... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Definition)
   [program (.only program)]
   ["[0]" ffi (.only import)]
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future)]]
   [control
    ["[0]" io (.only IO)]]
   [error
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]]
   [target
    ["[0]" jvm
     [bytecode (.only Bytecode)]
     ["[1]/[0]" type
      ["[1]/[0]" box]]]]
   [compiler
    ["@[0]" type]
    [default
     ["[0]" platform (.only Platform)]]
    [meta
     [archive (.only Archive)]
     ["[0]" context]
     ["[0]" cli]
     ["[0]" packager
      ["[1]" jvm]]]
    [language
     [lux
      [translation (.only Operation)]
      ["[0]" analysis (.only)
       [macro (.only Expander)]]
      ["[0]" phase (.only)
       ["[0]" extension (.only)
        ["[0]" analysis
         ["[2]/[1]" jvm]]
        ["[0]" translation
         ["[2]/[1]" jvm]]
        ["[0]" declaration
         ["[2]/[1]" jvm]]]
       [translation
        ["/" jvm (.only)
         ["[1][0]" runtime (.only Anchor Definition)]
         ["[1][0]" host]
         ["[1][0]" program]
         ["[1][0]" reference]]]]]]]
   ["[0]" world
    ["[0]" file]
    ["[0]" environment]]]]
 [program
  ["[0]" compositor]])

(import java/lang/reflect/Method
        "[1]::[0]"
        (invoke [java/lang/Object [java/lang/Object]] "try" java/lang/Object))

(import java/lang/ClassLoader
        "[1]::[0]")

(import (java/lang/Class c)
        "[1]::[0]"
        (getMethod [java/lang/String [(java/lang/Class [? < java/lang/Object])]] "try" java/lang/reflect/Method))

(import java/lang/Object
        "[1]::[0]"
        (getClass [] (java/lang/Class java/lang/Object)))

(the _object_class
  (java/lang/Class java/lang/Object)
  (ffi.class_for java/lang/Object))

(the _of2_args
  (Array (java/lang/Class java/lang/Object))
  (ffi.array (java/lang/Class java/lang/Object)
             [_object_class _object_class]))

(the _of4_args
  (Array (java/lang/Class java/lang/Object))
  (ffi.array (java/lang/Class java/lang/Object)
             [_object_class _object_class _object_class _object_class]))

(the .public (expander macro inputs lux)
  Expander
  (monad.let try.monad
    [of_method (|> macro
                   (as (-> Macro java/lang/Object))
                   (java/lang/Object::getClass [])
                   (java/lang/Class::getMethod [(ffi.as_string "apply") _of2_args]))]
    (as (-> (Try java/lang/Object) (Try (Try [analysis.State (List @type.Code)])))
        (java/lang/reflect/Method::invoke
         [(as (-> Macro java/lang/Object) macro)
          (ffi.array java/lang/Object
                     [(as (-> (List Code) java/lang/Object) inputs)
                      (as (-> Lux java/lang/Object) lux)])]
         of_method))))

(the phase_wrapper
  phase.Wrapper
  (|>>))

(the .public platform
  (IO [java/lang/ClassLoader
       /runtime.Host
       (Platform Anchor (Bytecode Any) Definition)])
  (monad.let io.monad
    [[loader host] /host.host]
    (pure [loader
           host
           [platform.#file_system (file.future file.default)
            platform.#host host

            platform.#phase /.translate
            platform.#runtime /runtime.translation

            platform.#phase_wrapper ..phase_wrapper
            platform.#write product.right]])))

(the extender
  extension.Extender
  ... TODO: Stop relying on coercions ASAP.
  (<| (function (@self handler
                       phase
                       archive parameters
                       state))
      (as (-> Any Try))
      try.trusted
      (as (-> Any Try))
      (monad.let try.monad
        [method (|> handler
                    (as (-> Any java/lang/Object))
                    (java/lang/Object::getClass [])
                    (java/lang/Class::getMethod [(ffi.as_string "apply") _of4_args]))]
        (java/lang/reflect/Method::invoke
         [(as (-> Any java/lang/Object) handler)
          (ffi.array java/lang/Object
                     [(as (-> Any java/lang/Object) (phase_wrapper phase))
                      (as (-> Any java/lang/Object) archive)
                      (as (-> Any java/lang/Object) parameters)
                      (as (-> Any java/lang/Object) state)])]
         method))))

(the (declare_success! _)
  (-> Any (Future Any))
  (future.soon (by environment.default exit +0)))

(the _
  (program [service cli.service]
    (let [context (context.jvm (cli.target service))]
      (exec
        (monad.let future.monad
          [[loader host platform] (future.soon ..platform)
           _ (compositor.compiler (|>> (as (-> Any platform.Custom)))
                                  context
                                  ..expander
                                  (extension/analysis.bundle loader host)
                                  (io.io platform)
                                  extension/translation.bundle
                                  (extension/declaration.bundle loader ..extender)
                                  (/program.program /runtime.class_name)
                                  /reference.constant
                                  ..extender
                                  service
                                  [(packager.package context)
                                   "program.jar"])]
          (..declare_success! []))
        (io.io [])))))
