(.module:
  [lux (#- i64)
   ["." host (#+ import:)]
   [data
    [number
     ["i" int]]]
   [target
    [jvm
     ["." type]]]
   [tool
    [compiler
     [phase ("operation@." monad)]]]]
  [luxc
   [lang
    [host
     ["." jvm (#+ Inst Operation)
      ["_" inst]]]]])

(def: #export bit
  (-> Bit (Operation Inst))
  (let [Boolean (type.class "java.lang.Boolean" (list))]
    (function (_ value)
      (operation@wrap (_.GETSTATIC Boolean (if value "TRUE" "FALSE") Boolean)))))

(def: #export (i64 value)
  (-> (I64 Any) (Operation Inst))
  (case (.int value)
    (^template [<int> <instruction>]
      <int>
      (operation@wrap (|>> <instruction> (_.wrap type.long))))
    ([+0 _.LCONST_0]
     [+1 _.LCONST_1])

    (^template [<int> <instruction>]
      <int>
      (operation@wrap (|>> <instruction> _.I2L (_.wrap type.long))))
    ([-1 _.ICONST_M1]
     ## [+0 _.ICONST_0]
     ## [+1 _.ICONST_1]
     [+2 _.ICONST_2]
     [+3 _.ICONST_3]
     [+4 _.ICONST_4]
     [+5 _.ICONST_5])

    _
    (let [loadI (|> value .int _.long)]
      (operation@wrap (|>> loadI (_.wrap type.long))))))

(import: #long java/lang/Double
  (#static doubleToRawLongBits #manual [double] int))

(def: d0-bits
  Int
  (java/lang/Double::doubleToRawLongBits +0.0))

(def: #export (f64 value)
  (-> Frac (Operation Inst))
  (case value
    (^template [<int> <instruction>]
      <int>
      (operation@wrap (|>> <instruction> (_.wrap type.double))))
    ([+1.0 _.DCONST_1])

    (^template [<int> <instruction>]
      <int>
      (operation@wrap (|>> <instruction> _.F2D (_.wrap type.double))))
    ([+2.0 _.FCONST_2])

    (^template [<int> <instruction>]
      <int>
      (operation@wrap (|>> <instruction> _.I2D (_.wrap type.double))))
    ([-1.0 _.ICONST_M1]
     ## [+0.0 _.ICONST_0]
     ## [+1.0 _.ICONST_1]
     [+2.0 _.ICONST_2]
     [+3.0 _.ICONST_3]
     [+4.0 _.ICONST_4]
     [+5.0 _.ICONST_5])
    
    _
    (let [loadI (if (i.= ..d0-bits
                         (java/lang/Double::doubleToRawLongBits (:coerce java/lang/Double value)))
                  _.DCONST_0
                  (_.double value))]
      (operation@wrap (|>> loadI (_.wrap type.double))))))

(def: #export (text value)
  (-> Text (Operation Inst))
  (operation@wrap (_.string value)))
