(.using
 [library
  [lux "*"
   [tool
    [compiler
     [language
      [lux
       ["[0]" synthesis]
       [phase
        ["[0]" extension]]]]]]]]
 [luxc
  [lang
   [host
    [jvm {"+" Phase}]]]]
 [//
  ["[0]" primitive]
  ["[0]" structure]
  ["[0]" reference]
  ["[0]" case]
  ["[0]" loop]
  ["[0]" function]])

(def: .public (translate archive synthesis)
  Phase
  (case synthesis
    (pattern (synthesis.bit value))
    (primitive.bit value)
    
    (pattern (synthesis.i64 value))
    (primitive.i64 value)
    
    (pattern (synthesis.f64 value))
    (primitive.f64 value)
    
    (pattern (synthesis.text value))
    (primitive.text value)

    (pattern (synthesis.variant data))
    (structure.variant translate archive data)

    (pattern (synthesis.tuple members))
    (structure.tuple translate archive members)

    (pattern (synthesis.variable variable))
    (reference.variable archive variable)

    (pattern (synthesis.constant constant))
    (reference.constant archive constant)

    (pattern (synthesis.branch/exec it))
    (case.exec translate archive it)

    (pattern (synthesis.branch/let data))
    (case.let translate archive data)

    (pattern (synthesis.branch/if data))
    (case.if translate archive data)

    (pattern (synthesis.branch/get data))
    (case.get translate archive data)

    (pattern (synthesis.branch/case data))
    (case.case translate archive data)

    (pattern (synthesis.loop/again data))
    (loop.again translate archive data)

    (pattern (synthesis.loop/scope data))
    (loop.scope translate archive data)

    (pattern (synthesis.function/apply data))
    (function.call translate archive data)

    (pattern (synthesis.function/abstraction data))
    (function.function translate archive data)

    {synthesis.#Extension extension}
    (extension.apply archive translate extension)))
