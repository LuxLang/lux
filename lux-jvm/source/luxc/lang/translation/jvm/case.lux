(.module:
  [lux (#- Type if let case)
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." function]
    ["ex" exception (#+ exception:)]]
   [data
    [number
     ["n" nat]]
    [collection
     ["." list ("#@." fold)]]]
   [target
    [jvm
     ["." type (#+ Type)
      ["." category (#+ Void Value Return Primitive Object Class Array Var Parameter Method)]
      ["." descriptor (#+ Descriptor)]
      ["." signature (#+ Signature)]]]]
   [tool
    [compiler
     ["." phase ("operation@." monad)]
     [meta
      [archive (#+ Archive)]]
     [language
      [lux
       ["." synthesis (#+ Path Synthesis)]]]]]]
  [luxc
   [lang
    [host
     ["$" jvm (#+ Label Inst Operation Phase Generator)
      ["_" inst]]]]]
  ["." //
   ["." runtime]])

(def: (pop-altI stack-depth)
  (-> Nat Inst)
  (.case stack-depth
    0 function.identity
    1 _.POP
    2 _.POP2
    _ ## (n.> 2)
    (|>> _.POP2
         (pop-altI (n.- 2 stack-depth)))))

(def: peekI
  Inst
  (|>> _.DUP
       (_.int +0)
       _.AALOAD))

(def: pushI
  Inst
  (_.INVOKESTATIC //.$Runtime "pm_push" (type.method [(list runtime.$Stack //.$Value) runtime.$Stack (list)])))

(def: popI
  (|>> (_.int +1)
       _.AALOAD
       (_.CHECKCAST runtime.$Stack)))

(def: (leftsI value)
  (-> Nat Inst)
  (.case value
    0 _.ICONST_0
    1 _.ICONST_1
    2 _.ICONST_2
    3 _.ICONST_3
    4 _.ICONST_4
    5 _.ICONST_5
    _ (_.int (.int value))))

(def: (left-projection lefts)
  (-> Nat Inst)
  (.let [[indexI accessI] (.case lefts
                            0
                            [_.ICONST_0
                             _.AALOAD]
                            
                            lefts
                            [(leftsI lefts)
                             (_.INVOKESTATIC //.$Runtime "tuple_left" (type.method [(list //.$Tuple runtime.$Index) //.$Value (list)]))])]
    (|>> (_.CHECKCAST //.$Tuple)
         indexI
         accessI)))

(def: (right-projection lefts)
  (-> Nat Inst)
  (|>> (_.CHECKCAST //.$Tuple)
       (leftsI lefts)
       (_.INVOKESTATIC //.$Runtime "tuple_right" (type.method [(list //.$Tuple runtime.$Index) //.$Value (list)]))))

(def: (path' stack-depth @else @end phase archive path)
  (-> Nat Label Label Phase Archive Path (Operation Inst))
  (.case path
    #synthesis.Pop
    (operation@wrap ..popI)
    
    (#synthesis.Bind register)
    (operation@wrap (|>> peekI
                         (_.ASTORE register)))

    (#synthesis.Bit-Fork when thenP elseP)
    (do phase.monad
      [thenG (path' stack-depth @else @end phase archive thenP)
       elseG (.case elseP
               (#.Some elseP)
               (path' stack-depth @else @end phase archive elseP)

               #.None
               (wrap (_.GOTO @else)))
       #let [ifI (.if when _.IFEQ _.IFNE)]]
      (wrap (<| _.with-label (function (_ @else))
                (|>> peekI
                     (_.unwrap type.boolean)
                     (ifI @else)
                     thenG
                     (_.label @else)
                     elseG))))

    (^template [<tag> <unwrap> <dup> <pop> <test> <comparison> <if>]
      (<tag> cons)
      (do {@ phase.monad}
        [forkG (: (Operation Inst)
                  (monad.fold @ (function (_ [test thenP] elseG)
                                  (do @
                                    [thenG (path' stack-depth @else @end phase archive thenP)]
                                    (wrap (<| _.with-label (function (_ @else))
                                              (|>> <dup>
                                                   (<test> test)
                                                   <comparison>
                                                   (<if> @else)
                                                   <pop>
                                                   thenG
                                                   (_.label @else)
                                                   elseG)))))
                              (|>> <pop>
                                   (_.GOTO @else))
                              (#.Cons cons)))]
        (wrap (|>> peekI
                   <unwrap>
                   forkG))))
    ([#synthesis.I64-Fork (_.unwrap type.long) _.DUP2 _.POP2 (|>> .int _.long) _.LCMP _.IFNE]
     [#synthesis.F64-Fork (_.unwrap type.double) _.DUP2 _.POP2 _.double _.DCMPL _.IFNE]
     [#synthesis.Text-Fork (|>) _.DUP _.POP _.string
      (_.INVOKEVIRTUAL (type.class "java.lang.Object" (list)) "equals" (type.method [(list //.$Value) type.boolean (list)]))
      _.IFEQ])
    
    (#synthesis.Then bodyS)
    (do phase.monad
      [bodyI (phase archive bodyS)]
      (wrap (|>> (pop-altI stack-depth)
                 bodyI
                 (_.GOTO @end))))
    
    (^template [<pattern> <flag> <prepare>]
      (^ (<pattern> idx))
      (operation@wrap (<| _.with-label (function (_ @success))
                          _.with-label (function (_ @fail))
                          (|>> peekI
                               (_.CHECKCAST //.$Variant)
                               (_.int (.int (<prepare> idx)))
                               <flag>
                               (_.INVOKESTATIC //.$Runtime "pm_variant" (type.method [(list //.$Variant runtime.$Tag runtime.$Flag) runtime.$Value (list)]))
                               _.DUP
                               (_.IFNULL @fail)
                               (_.GOTO @success)
                               (_.label @fail)
                               _.POP
                               (_.GOTO @else)
                               (_.label @success)
                               pushI))))
    ([synthesis.side/left  _.NULL        function.identity]
     [synthesis.side/right (_.string "") .inc])

    ## Extra optimization
    (^template [<path> <projection>]
      (^ (<path> lefts))
      (operation@wrap (|>> peekI
                           (<projection> lefts)
                           pushI))
      
      (^ (synthesis.path/seq
          (<path> lefts)
          (synthesis.!bind-top register thenP)))
      (do phase.monad
        [then! (path' stack-depth @else @end phase archive thenP)]
        (wrap (|>> peekI
                   (<projection> lefts)
                   (_.ASTORE register)
                   then!))))
    ([synthesis.member/left  ..left-projection]
     [synthesis.member/right ..right-projection])

    (#synthesis.Seq leftP rightP)
    (do phase.monad
      [leftI (path' stack-depth @else @end phase archive leftP)
       rightI (path' stack-depth @else @end phase archive rightP)]
      (wrap (|>> leftI
                 rightI)))

    (#synthesis.Alt leftP rightP)
    (do phase.monad
      [@alt-else _.make-label
       leftI (path' (inc stack-depth) @alt-else @end phase archive leftP)
       rightI (path' stack-depth @else @end phase archive rightP)]
      (wrap (|>> _.DUP
                 leftI
                 (_.label @alt-else)
                 _.POP
                 rightI)))
    ))

(def: (path @end phase archive path)
  (-> Label Phase Archive Path (Operation Inst))
  (do phase.monad
    [@else _.make-label
     pathI (..path' 1 @else @end phase archive path)]
    (wrap (|>> pathI
               (_.label @else)
               _.POP
               (_.INVOKESTATIC //.$Runtime "pm_fail" (type.method [(list) type.void (list)]))
               _.NULL
               (_.GOTO @end)))))

(def: #export (if phase archive [testS thenS elseS])
  (Generator [Synthesis Synthesis Synthesis])
  (do phase.monad
    [testI (phase archive testS)
     thenI (phase archive thenS)
     elseI (phase archive elseS)]
    (wrap (<| _.with-label (function (_ @else))
              _.with-label (function (_ @end))
              (|>> testI
                   (_.unwrap type.boolean)
                   (_.IFEQ @else)
                   thenI
                   (_.GOTO @end)
                   (_.label @else)
                   elseI
                   (_.label @end))))))

(def: #export (let phase archive [inputS register exprS])
  (Generator [Synthesis Nat Synthesis])
  (do phase.monad
    [inputI (phase archive inputS)
     exprI (phase archive exprS)]
    (wrap (|>> inputI
               (_.ASTORE register)
               exprI))))

(def: #export (get phase archive [path recordS])
  (Generator [(List synthesis.Member) Synthesis])
  (do phase.monad
    [recordG (phase archive recordS)]
    (wrap (list@fold (function (_ step so-far)
                       (.let [next (.case step
                                     (#.Left lefts)
                                     (..left-projection lefts)
                                     
                                     (#.Right lefts)
                                     (..right-projection lefts))]
                         (|>> so-far next)))
                     recordG
                     path))))

(def: #export (case phase archive [valueS path])
  (Generator [Synthesis Path])
  (do phase.monad
    [@end _.make-label
     valueI (phase archive valueS)
     pathI (..path @end phase archive path)]
    (wrap (|>> _.NULL
               valueI
               pushI
               pathI
               (_.label @end)))))
