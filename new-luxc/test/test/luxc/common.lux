(.module:
  lux
  (lux (control [monad #+ do])
       [io #+ IO]
       (data ["e" error])
       [macro])
  (luxc [lang]
        (lang ["&." host]
              [".L" init]
              [synthesis #+ Synthesis]
              (translation (jvm [".T_jvm" expression]
                                [".T_jvm" eval]
                                [".T_jvm" runtime])
                           [js]
                           (js [".T_js" expression]
                               [".T_js" eval]
                               [".T_js" runtime])
                           [lua]
                           (lua [".T_lua" expression]
                                [".T_lua" eval]
                                [".T_lua" runtime])

                           [ruby]
                           (ruby [".T_ruby" expression]
                                [".T_ruby" eval]
                                [".T_ruby" runtime])))))

(do-template [<name> <host>]
  [(def: #export <name>
     (IO Compiler)
     (do io.Monad<IO>
       [host <host>]
       (wrap (initL.compiler host))))]

  [init-jvm &host.init-host]
  [init-js  js.init]
  [init-lua lua.init]
  [init-ruby ruby.init]
  )

(def: (run-synthesis translate-runtime translate-expression eval init)
  (All [a] (-> (Meta Top) (-> Synthesis (Meta a)) (-> a (Meta Top)) (IO Compiler)
               (-> Synthesis (e.Error Top))))
  (function [synthesis]
    (|> (do macro.Monad<Meta>
          [_ translate-runtime
           sampleO (translate-expression synthesis)]
          (eval sampleO))
        (lang.with-current-module "")
        (macro.run (io.run init)))))

(def: #export run-jvm (run-synthesis runtimeT_jvm.translate expressionT_jvm.translate evalT_jvm.eval init-jvm))

(def: #export run-js (run-synthesis runtimeT_js.translate expressionT_js.translate evalT_js.eval init-js))

(def: #export run-lua (run-synthesis runtimeT_lua.translate expressionT_lua.translate evalT_lua.eval init-lua))

(def: #export run-ruby (run-synthesis runtimeT_ruby.translate expressionT_ruby.translate evalT_ruby.eval init-ruby))
