(;module:
  lux
  (lux (control pipe)
       ["r" math/random "r/" Monad<Random>]
       (data ["R" result])
       [macro]
       (macro [code]))
  (luxc ["&" base]
        [analyser]
        ["&;" host]))

(def: init-compiler-info
  Compiler-Info
  {#;compiler-version &;compiler-version
   #;compiler-mode    #;Build})

(def: init-type-context
  Type-Context
  {#;ex-counter +0
   #;var-counter +0
   #;var-bindings (list)})

(def: #export (init-compiler _)
  (-> Top Compiler)
  {#;info            init-compiler-info
   #;source          [dummy-cursor ""]
   #;cursor          dummy-cursor
   #;modules         (list)
   #;scopes          (list)
   #;type-context    init-type-context
   #;expected        #;None
   #;seed            +0
   #;scope-type-vars (list)
   #;host            (:! Void (&host;init-host []))})
