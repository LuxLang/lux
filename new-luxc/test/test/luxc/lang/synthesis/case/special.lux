(.module:
  lux
  (lux [io]
       (control [monad #+ do]
                pipe)
       (macro [code])
       ["r" math/random "r/" Monad<Random>]
       test)
  (luxc (lang ["la" analysis]
              ["ls" synthesis]
              (synthesis [".S" expression])
              [".L" variable #+ Variable]))
  (/// common))

(context: "Dummy variables."
  (<| (times +100)
      (do @
        [maskedA gen-primitive
         temp (|> r.nat (:: @ map (n/% +100)))
         #let [maskA (` ("lux case" (~ maskedA)
                         {("lux case bind" (~ (code.nat temp)))
                          (~ (la.var (variableL.local temp)))}))]]
        (test "Dummy variables created to mask expressions get eliminated during synthesis."
              (|> (expressionS.synthesize maskA)
                  (corresponds? maskedA))))))

(context: "Let expressions."
  (<| (times +100)
      (do @
        [registerA r.nat
         inputA gen-primitive
         outputA gen-primitive
         #let [letA (` ("lux case" (~ inputA)
                        {("lux case bind" (~ (code.nat registerA)))
                         (~ outputA)}))]]
        (test "Can detect and reify simple 'let' expressions."
              (|> (expressionS.synthesize letA)
                  (case> (^ [_ (#.Form (list [_ (#.Text "lux let")] [_ (#.Nat registerS)] inputS outputS))])
                         (and (n/= registerA registerS)
                              (corresponds? inputA inputS)
                              (corresponds? outputA outputS))

                         _
                         false))))))

(context: "If expressions."
  (<| (times +100)
      (do @
        [then|else r.bool
         inputA gen-primitive
         thenA gen-primitive
         elseA gen-primitive
         #let [ifA (if then|else
                     (` ("lux case" (~ inputA)
                         {true (~ thenA)
                          false (~ elseA)}))
                     (` ("lux case" (~ inputA)
                         {false (~ elseA)
                          true (~ thenA)})))]]
        (test "Can detect and reify simple 'if' expressions."
              (|> (expressionS.synthesize ifA)
                  (case> (^ [_ (#.Form (list [_ (#.Text "lux if")] inputS thenS elseS))])
                         (and (corresponds? inputA inputS)
                              (corresponds? thenA thenS)
                              (corresponds? elseA elseS))

                         _
                         false))))))
