(.module:
  [lux #*
   [control
    [monad (#+ do)]
    pipe]
   [data
    ["e" error]
    ["." text]]
   [compiler
    [default
     ["." reference]
     [phase
      ["." synthesis]]]]
   [math
    ["r" random]]
   test]
  [test
   [luxc
    ["." common (#+ Runner Definer)]]]
  [//
   ["&" function]])

(def: name-part
  (r.Random Text)
  (r.ascii/alpha 5))

(def: (definitions-spec define)
  (-> Definer Test)
  (do r.Monad<Random>
    [name (r.and name-part name-part)
     value r.frac]
    (test "Can refer to definitions."
          (|> (define name (synthesis.f64 value))
              (&.check value)))))

(def: (variables-spec run)
  (-> Runner Test)
  (do r.Monad<Random>
    [register (|> r.nat (:: @ map (n/% 100)))
     value r.frac]
    (test "Can refer to local variables/registers."
          (|> (run (synthesis.branch/let [(synthesis.f64 value)
                                          register
                                          (synthesis.variable/local register)]))
              (&.check value)))))

(def: (references-spec run define)
  (-> Runner Definer Test)
  (seq (definitions-spec define)
       (variables-spec run)))

(context: "[JVM] References."
  (<| (times 100)
      (references-spec common.run-jvm common.def-jvm)))

## (context: "[JS] References."
##   (<| (times 100)
##       (references-spec common.run-js common.def-js)))

## (context: "[Lua] References."
##   (<| (times 100)
##       (references-spec common.run-lua common.def-lua)))

## (context: "[Ruby] References."
##   (<| (times 100)
##       (references-spec common.run-ruby common.def-ruby)))

## (context: "[Python] References."
##   (<| (times 100)
##       (references-spec common.run-python common.def-python)))

## (context: "[R] References."
##   (<| (times 100)
##       (references-spec common.run-r common.def-r)))

## (context: "[Scheme] References."
##   (<| (times 100)
##       (references-spec common.run-scheme common.def-scheme)))

## (context: "[Common Lisp] References."
##   (<| (times 100)
##       (references-spec common.run-common-lisp common.def-common-lisp)))

## (context: "[PHP] References."
##   (<| (times 100)
##       (references-spec common.run-php common.def-php)))
