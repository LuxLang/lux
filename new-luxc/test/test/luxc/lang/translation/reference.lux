(.module:
  lux
  (lux [io #+ IO]
       (control [monad #+ do]
                pipe)
       (data ["e" error]
             [text])
       ["r" math/random]
       [macro]
       (macro [code])
       test)
  (luxc [lang]
        (lang ["_." module]
              ["ls" synthesis]
              (translation (jvm [".T_jvm" statement])
                           (js [".T_js" statement])
                           (lua [".T_lua" statement])
                           (ruby [".T_ruby" statement])
                           (python [".T_python" statement])
                           (r [".T_r" statement]))))
  (test/luxc common))

(def: upper-alpha-ascii
  (r.Random Nat)
  (|> r.nat (:: r.Functor<Random> map (|>> (n/% +91) (n/max +65)))))

(def: ident-part
  (r.Random Text)
  (|> (r.text' upper-alpha-ascii +5)
      (r.filter (function (_ sample)
                  (not (or (text.contains? "/" sample)
                           (text.contains? "[" sample)
                           (text.contains? "]" sample)))))))

(def: (definitions-spec define)
  (-> Definer Test)
  (do r.Monad<Random>
    [def-name (r.seq ident-part ident-part)
     def-value r.int]
    (test "Can refer to definitions."
          (|> (define def-name (code.int def-value))
              (case> (#e.Success valueT)
                     (i/= def-value (:! Int valueT))

                     (#e.Error error)
                     (exec (log! error)
                       false))))))

(def: (variables-spec run)
  (-> Runner Test)
  (do r.Monad<Random>
    [module-name (|> (r.text +5) (r.filter (|>> (text.contains? "/") not)))
     register (|> r.nat (:: @ map (n/% +100)))
     value r.int]
    (test "Can refer to local variables/registers."
          (|> (run (` ("lux let" (~ (code.nat register)) (~ (code.int value))
                       ((~ (code.int (nat-to-int register)))))))
              (case> (#e.Success outputT)
                     (i/= value (:! Int outputT))

                     (#e.Error error)
                     (exec (log! error)
                       false))))))

(def: (references-spec run define)
  (-> Runner Definer Test)
  (seq (definitions-spec define)
       (variables-spec run)))

(context: "[JVM] References."
  (<| (times +100)
      (references-spec run-jvm def-jvm)))

(context: "[JS] References."
  (<| (times +100)
      (references-spec run-js def-js)))

(context: "[Lua] References."
  (<| (times +100)
      (references-spec run-lua def-lua)))

(context: "[Ruby] References."
  (<| (times +100)
      (references-spec run-ruby def-ruby)))

(context: "[Python] References."
  (<| (times +100)
      (references-spec run-python def-python)))

(context: "[R] References."
  (<| (times +100)
      (references-spec run-r def-r)))
