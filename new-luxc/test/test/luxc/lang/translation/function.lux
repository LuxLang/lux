(.module:
  [lux (#- function)
   [control
    [monad (#+ do)]
    pipe]
   [data
    ["." maybe]
    ["." error (#+ Error)]
    ["." number]
    [text
     format]
    [collection
     ["." list ("list/." Functor<List>)]]]
   [math
    ["r" random (#+ Random) ("r/." Monad<Random>)]]
   [compiler
    [default
     ["." reference (#+ Register)]
     [phase
      [analysis (#+ Arity)]
      ["." synthesis (#+ Synthesis)]]]]
   test]
  [test
   [luxc
    ["." common (#+ Runner)]]])

(def: max-arity Arity 10)

(def: arity
  (Random Arity)
  (|> r.nat (r/map (|>> (n/% max-arity) (n/max 1)))))

(def: (local arity)
  (-> Arity(Random Register))
  (|> r.nat (r/map (|>> (n/% arity) inc))))

(def: function
  (Random [Arity Register Synthesis])
  (do r.Monad<Random>
    [arity ..arity
     local (..local arity)]
    (wrap [arity local
           (synthesis.function/abstraction
            {#synthesis.environment (list)
             #synthesis.arity arity
             #synthesis.body (synthesis.variable/local local)})])))

(def: #export (check reference)
  (-> Frac (Error Any) Bit)
  (|>> (case> (#error.Success valueT)
              (f/= reference (:coerce Frac valueT))

              (#error.Error error)
              (exec (log! error)
                #0))))

(def: #export safe-frac
  (Random Frac)
  (|> r.frac (r.filter (|>> number.not-a-number? not))))

(def: (function-spec run)
  (-> Runner Test)
  (do r.Monad<Random>
    [[arity local functionS] ..function
     partial-arity (|> r.nat (:: @ map (|>> (n/% arity) (n/max 1))))
     inputs (r.list arity safe-frac)
     #let [expectation (maybe.assume (list.nth (dec local) inputs))
           inputsS (list/map (|>> synthesis.f64) inputs)]]
    ($_ seq
        (test "Can read arguments."
              (|> (run (synthesis.function/apply {#synthesis.function functionS
                                                  #synthesis.arguments inputsS}))
                  (check expectation)))
        (test "Can partially apply functions."
              (or (n/= 1 arity)
                  (let [preS (list.take partial-arity inputsS)
                        postS (list.drop partial-arity inputsS)
                        partialS (synthesis.function/apply {#synthesis.function functionS
                                                            #synthesis.arguments preS})
                        totalS (synthesis.function/apply {#synthesis.function partialS
                                                          #synthesis.arguments postS})]
                    (|> (run totalS)
                        (check expectation)))))
        (test "Can read environment."
              (or (n/= 1 arity)
                  (let [environment (|> partial-arity
                                        (list.n/range 1)
                                        (list/map (|>> #reference.Local)))
                        variableS (if (n/<= partial-arity local)
                                    (synthesis.variable/foreign (dec local))
                                    (synthesis.variable/local (|> local (n/- partial-arity))))
                        inner-arity (n/- partial-arity arity)
                        innerS (synthesis.function/abstraction
                                {#synthesis.environment environment
                                 #synthesis.arity inner-arity
                                 #synthesis.body variableS})
                        outerS (synthesis.function/abstraction
                                {#synthesis.environment (list)
                                 #synthesis.arity partial-arity
                                 #synthesis.body innerS})]
                    (|> (run (synthesis.function/apply {#synthesis.function outerS
                                                        #synthesis.arguments inputsS}))
                        (check expectation)))))
        )))

(context: "[JVM] Function."
  (<| (times 100)
      (function-spec common.run-jvm)))

## (context: "[JS] Function."
##   (<| (times 100)
##       (function-spec common.run-js)))

## (context: "[Lua] Function."
##   (<| (times 100)
##       (function-spec common.run-lua)))

## (context: "[Ruby] Function."
##   (<| (times 100)
##       (function-spec common.run-ruby)))

## (context: "[Python] Function."
##   (<| (times 100)
##       (function-spec common.run-python)))

## (context: "[R] Function."
##   (<| (times 100)
##       (function-spec common.run-r)))

## (context: "[Scheme] Function."
##   (<| (times 100)
##       (function-spec common.run-scheme)))

## (context: "[Common Lisp] Function."
##   (<| (times 100)
##       (function-spec common.run-common-lisp)))

## (context: "[PHP] Function."
##   (<| (times 100)
##       (function-spec common.run-php)))
