(.module:
  [lux #*
   [control
    [monad (#+ do)]
    pipe]
   [data
    ["." error]
    ["." maybe]
    [text ("text/." Equivalence<Text>)
     format]
    [collection
     ["." array]
     ["." list ("list/." Functor<List>)]]]
   [math
    ["r" random]]
   ["." host (#+ import:)]
   [compiler
    [default
     [phase
      ["." analysis]
      ["." synthesis]]]]
   test]
  [test
   [luxc
    common]])

(import: java/lang/Integer)

(def: (tuples-spec run)
  (-> Runner Test)
  (do r.Monad<Random>
    [size (|> r.nat (:: @ map (|>> (n/% 10) (n/max 2))))
     tuple-in (r.list size r.i64)]
    (test "Can translate tuple."
          (|> (run (synthesis.tuple (list/map (|>> synthesis.i64) tuple-in)))
              (case> (#error.Success tuple-out)
                     (let [tuple-out (:coerce (Array Any) tuple-out)]
                       (and (n/= size (array.size tuple-out))
                            (list.every? (function (_ [left right])
                                           (i/= left (:coerce Int right)))
                                         (list.zip2 tuple-in (array.to-list tuple-out)))))

                     (#error.Error error)
                     (exec (log! error)
                       #0))))))

(def: (variants-spec run)
  (-> Runner Test)
  (do r.Monad<Random>
    [num-tags (|> r.nat (:: @ map (|>> (n/% 10) (n/max 2))))
     tag-in (|> r.nat (:: @ map (n/% num-tags)))
     #let [last?-in (|> num-tags dec (n/= tag-in))]
     value-in r.i64]
    (test "Can translate variant."
          (|> (run (synthesis.variant {#analysis.lefts (if last?-in
                                                         (dec tag-in)
                                                         tag-in)
                                       #analysis.right? last?-in
                                       #analysis.value (synthesis.i64 value-in)}))
              (case> (#error.Success valueT)
                     (let [valueT (:coerce (Array Any) valueT)]
                       (and (n/= 3 (array.size valueT))
                            (let [tag-out (:coerce Integer (maybe.assume (array.read 0 valueT)))
                                  last?-out (array.read 1 valueT)
                                  value-out (:coerce Any (maybe.assume (array.read 2 valueT)))
                                  same-tag? (|> tag-out host.int-to-long (:coerce Nat) (n/= tag-in))
                                  same-flag? (case last?-out
                                               (#.Some last?-out')
                                               (and last?-in (text/= "" (:coerce Text last?-out')))

                                               #.None
                                               (not last?-in))
                                  same-value? (|> value-out (:coerce Int) (i/= value-in))]
                              (and same-tag?
                                   same-flag?
                                   same-value?))))

                     (#error.Error error)
                     (exec (log! error)
                       #0))))))

(def: (structure-spec run)
  (-> Runner Test)
  ($_ seq
      (tuples-spec run)
      (variants-spec run)))

(context: "[JVM] Structures."
  (<| (times 100)
      (structure-spec run-jvm)))

## (context: "[JS] Structures."
##   (<| (times 100)
##       (structure-spec run-js)))

## (context: "[Lua] Structures."
##   (<| (times 100)
##       (structure-spec run-lua)))

## (context: "[Ruby] Structures."
##   (<| (times 100)
##       (structure-spec run-ruby)))

## (context: "[Python] Structures."
##   (<| (times 100)
##       (structure-spec run-python)))

## (context: "[R] Structures."
##   (<| (times 100)
##       (structure-spec run-r)))

## (context: "[Scheme] Structures."
##   (<| (times 100)
##       (structure-spec run-scheme)))

## (context: "[Common Lisp] Structures."
##   (<| (times 100)
##       (structure-spec run-common-lisp)))

## (context: "[PHP] Structures."
##   (<| (times 100)
##       (structure-spec run-php)))
