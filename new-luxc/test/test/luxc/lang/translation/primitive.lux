(.module:
  lux
  (lux [io]
       (control [monad #+ do]
                pipe)
       (data text/format
             ["e" error]
             [bool "B/" Eq<Bool>]
             [text "T/" Eq<Text>])
       ["r" math/random]
       [macro]
       (macro [code])
       test)
  (luxc (lang [".L" host]
              ["ls" synthesis]
              (translation [".T" expression]
                           ["@." runtime]
                           ["@." eval]
                           ["@." common])))
  (test/luxc common))

(context: "Primitives."
  (<| (times +100)
      (do @
        [%bool% r.bool
         %nat% r.nat
         %int% r.int
         %deg% r.deg
         %frac% r.frac
         %text% (r.text +5)]
        (with-expansions
          [<tests> (do-template [<desc> <type> <synthesis> <sample> <test>]
                     [(test (format "Can translate " <desc> ".")
                            (|> (do macro.Monad<Meta>
                                  [sampleI (expressionT.translate (<synthesis> <sample>))]
                                  (@eval.eval sampleI))
                                (macro.run (init-compiler []))
                                (case> (#e.Success valueT)
                                       (<test> <sample> (:! <type> valueT))

                                       _
                                       false)))]

                     ["bool" Bool code.bool %bool% B/=]
                     ["nat"  Nat  code.nat  %nat%  n/=]
                     ["int"  Int  code.int  %int%  i/=]
                     ["deg"  Deg  code.deg  %deg%  d/=]
                     ["frac" Frac code.frac %frac% f/=]
                     ["text" Text code.text %text% T/=])]
          ($_ seq
              (test "Can translate unit."
                    (|> (do macro.Monad<Meta>
                          [sampleI (expressionT.translate (' []))]
                          (@eval.eval sampleI))
                        (macro.run (init-compiler []))
                        (case> (#e.Success valueT)
                               (is hostL.unit (:! Text valueT))

                               _
                               false)))
              <tests>
              )))))
