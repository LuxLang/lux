(.module:
  lux
  (lux [io #+ IO]
       (control [monad #+ do]
                pipe)
       (data text/format
             ["e" error]
             [bool "bool/" Eq<Bool>]
             [text "text/" Eq<Text>])
       ["r" math/random]
       (lang ["//." synthesis])
       test)
  (luxc (lang [".L" host]))
  (test/luxc common))

(def: (spec run)
  (-> Runner Test)
  (do r.Monad<Random>
    [%bool% r.bool
     %nat% r.nat
     %int% r.int
     %rev% r.rev
     %frac% r.frac
     %text% (r.ascii +5)]
    (`` ($_ seq
            (~~ (do-template [<desc> <type> <synthesis> <sample> <test>]
                  [(test (format "Can translate " <desc> ".")
                         (|> (run (<synthesis> <sample>))
                             (case> (#e.Success valueT)
                                    (<test> <sample> (:coerce <type> valueT))

                                    (#e.Error error)
                                    (exec (log! error)
                                      false))))]

                  ["bool" Bool //synthesis.bool %bool% bool/=]
                  ["int"  Int  //synthesis.i64  %int%  i/=]
                  ["frac" Frac //synthesis.f64  %frac% f/=]
                  ["text" Text //synthesis.text %text% text/=]))
            ))))

(context: "[JVM] Primitives."
  (<| (times +100)
      (spec run-jvm)))

## (context: "[JS] Primitives."
##   (<| (times +100)
##       (spec run-js)))

## (context: "[Lua] Primitives."
##   (<| (times +100)
##       (spec run-lua)))

## (context: "[Ruby] Primitives."
##   (<| (times +100)
##       (spec run-ruby)))

## (context: "[Python] Primitives."
##   (<| (times +100)
##       (spec run-python)))

## (context: "[R] Primitives."
##   (<| (times +100)
##       (spec run-r)))

## (context: "[Scheme] Primitives."
##   (<| (times +100)
##       (spec run-scheme)))

## (context: "[Common Lisp] Primitives."
##   (<| (times +100)
##       (spec run-common-lisp)))

## (context: "[PHP] Primitives."
##   (<| (times +100)
##       (spec run-php)))
