(.module:
  lux
  (lux [io #+ IO]
       (control [monad #+ do]
                pipe)
       (data text/format
             ["e" error]
             [bool "bool/" Eq<Bool>]
             [text "text/" Eq<Text>])
       ["r" math/random]
       [macro]
       (macro [code])
       test)
  (luxc [lang]
        (lang [".L" host]
              [synthesis #+ Synthesis]))
  (test/luxc common))

(def: ascii
  (r.Random Nat)
  (|> r.nat (:: r.Functor<Random> map (|>> (n/% +256) (n/max +1)))))

(def: (spec run)
  (-> (-> Synthesis (e.Error Top)) Test)
  (do r.Monad<Random>
    [%bool% r.bool
     %nat% r.nat
     %int% r.int
     %deg% r.deg
     %frac% r.frac
     %text% (r.text' ascii +5)]
    (`` ($_ seq
            (test "Can translate unit."
                  (|> (run (' []))
                      (case> (#e.Success valueT)
                             (text/= hostL.unit (:! Text valueT))

                             (#e.Error error)
                             (exec (log! error)
                               false))))
            (~~ (do-template [<desc> <type> <synthesis> <sample> <test>]
                  [(test (format "Can translate " <desc> ".")
                         (|> (run (<synthesis> <sample>))
                             (case> (#e.Success valueT)
                                    (<test> <sample> (:! <type> valueT))

                                    (#e.Error error)
                                    (exec (log! error)
                                      false))))]

                  ["bool" Bool code.bool %bool% bool/=]
                  ["nat"  Nat  code.nat  %nat%  n/=]
                  ["int"  Int  code.int  %int%  i/=]
                  ["deg"  Deg  code.deg  %deg%  d/=]
                  ["frac" Frac code.frac %frac% f/=]
                  ["text" Text code.text %text% text/=]))
            ))))

(context: "[JVM] Primitives."
  (<| (times +100)
      (spec run-jvm)))

(context: "[JS] Primitives."
  (<| (times +100)
      (spec run-js)))

(context: "[Lua] Primitives."
  (<| (times +100)
      (spec run-lua)))

(context: "[Ruby] Primitives."
  (<| (times +100)
      (spec run-ruby)))

(context: "[Python] Primitives."
  (<| (times +100)
      (spec run-python)))

(context: "[R] Primitives."
  (<| (times +100)
      (spec run-r)))
