(.module:
  [lux #*
   [control
    [monad (#+ do)]
    pipe]
   [data
    ["." error]
    [bit ("bit/." Equivalence<Bit>)]
    ["." number]
    [text ("text/." Equivalence<Text>)
     format]]
   [math
    ["r" random]]
   [compiler
    [default
     [phase
      ["." synthesis]]]]
   test]
  [test
   [luxc
    common]])

(def: (f/=' reference subject)
  (-> Frac Frac Bit)
  (or (f/= reference subject)
      (and (number.not-a-number? reference)
           (number.not-a-number? subject))))

(def: (spec run)
  (-> Runner Test)
  (do r.Monad<Random>
    [|bit| r.bit
     |i64| r.i64
     |f64| r.frac
     |text| (r.ascii 5)]
    (`` ($_ seq
            (~~ (template [<desc> <type> <synthesis> <sample> <test>]
                  [(test (format "Can translate " <desc> ".")
                         (|> (run (<synthesis> <sample>))
                             (case> (#error.Success valueT)
                                    (<test> <sample> (:coerce <type> valueT))

                                    (#error.Error error)
                                    false)))]

                  ["bit"  Bit  synthesis.bit  |bit|  bit/=]
                  ["int"  Int  synthesis.i64  |i64|  i/=]
                  ["frac" Frac synthesis.f64  |f64|  f/=']
                  ["text" Text synthesis.text |text| text/=]
                  ))
            ))))

(context: "[JVM] Primitives."
  (<| (times 100)
      (spec run-jvm)))

## (context: "[JS] Primitives."
##   (<| (times 100)
##       (spec run-js)))

## (context: "[Lua] Primitives."
##   (<| (times 100)
##       (spec run-lua)))

## (context: "[Ruby] Primitives."
##   (<| (times 100)
##       (spec run-ruby)))

## (context: "[Python] Primitives."
##   (<| (times 100)
##       (spec run-python)))

## (context: "[R] Primitives."
##   (<| (times 100)
##       (spec run-r)))

## (context: "[Scheme] Primitives."
##   (<| (times 100)
##       (spec run-scheme)))

## (context: "[Common Lisp] Primitives."
##   (<| (times 100)
##       (spec run-common-lisp)))

## (context: "[PHP] Primitives."
##   (<| (times 100)
##       (spec run-php)))
