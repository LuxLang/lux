(.module:
  lux
  (lux [io #+ IO]
       (control [monad #+ do]
                pipe)
       (data text/format
             ["e" error]
             [bool "bool/" Eq<Bool>]
             [text "text/" Eq<Text>])
       ["r" math/random]
       [macro]
       (macro [code])
       test)
  (luxc [lang]
        (lang [".L" host]
              ["ls" synthesis]
              (translation (jvm [".T_jvm" expression]
                                [".T_jvm" runtime]
                                [".T_jvm" eval])
                           (js [".T_js" expression]
                               [".T_js" runtime]
                               [".T_js" eval]))))
  (test/luxc common))

(def: (spec translate-expression eval translate-runtime init)
  (All [a]
    (-> (-> ls.Synthesis (Meta a))
        (-> a (Meta Top))
        (Meta Top)
        (IO Compiler)
        Test))
  (do r.Monad<Random>
    [%bool% r.bool
     %nat% r.nat
     %int% r.int
     %deg% r.deg
     %frac% r.frac
     %text% (r.text +5)]
    (`` ($_ seq
            (test "Can translate unit."
                  (|> (do macro.Monad<Meta>
                        [_ translate-runtime
                         sampleO (translate-expression (' []))]
                        (eval sampleO))
                      (lang.with-current-module "")
                      (macro.run (io.run init))
                      (case> (#e.Success valueT)
                             (is hostL.unit (:! Text valueT))

                             _
                             false)))
            (~~ (do-template [<desc> <type> <synthesis> <sample> <test>]
                  [(test (format "Can translate " <desc> ".")
                         (|> (do macro.Monad<Meta>
                               [_ translate-runtime
                                sampleO (translate-expression (<synthesis> <sample>))]
                               (eval sampleO))
                             (lang.with-current-module "")
                             (macro.run (io.run init))
                             (case> (#e.Success valueT)
                                    (<test> <sample> (:! <type> valueT))

                                    (#e.Error error)
                                    false)))]

                  ["bool" Bool code.bool %bool% bool/=]
                  ["nat"  Nat  code.nat  %nat%  n/=]
                  ["int"  Int  code.int  %int%  i/=]
                  ["deg"  Deg  code.deg  %deg%  d/=]
                  ["frac" Frac code.frac %frac% f/=]
                  ["text" Text code.text %text% text/=]))
            ))))

(context: "[JVM] Primitives."
  (<| (times +100)
      (spec expressionT_jvm.translate evalT_jvm.eval runtimeT_jvm.translate init-jvm)))

(context: "[JS] Primitives."
  (<| (times +100)
      (spec expressionT_js.translate evalT_js.eval runtimeT_js.translate init-js)))
