(.module:
  [lux (#- case)
   [control
    [monad (#+ do)]
    pipe]
   [data
    [collection
     ["." list]]]
   [math
    ["r" random (#+ Random)]]
   [compiler
    [default
     ["." reference]
     [phase
      ["." analysis]
      ["." synthesis (#+ Path Synthesis)]]]]
   test]
  [test
   [luxc
    ["." common (#+ Runner)]]]
  [//
   ["&" function]])

(def: limit Nat 10)

(def: size
  (Random Nat)
  (|> r.nat (:: r.Monad<Random> map (|>> (n/% ..limit) (n/max 2)))))

(def: (tail? size idx)
  (-> Nat Nat Bit)
  (n/= (dec size) idx))

(def: case
  (Random [Synthesis Path])
  (<| r.rec (function (_ case))
      (`` ($_ r.either
              (do r.Monad<Random>
                [value r.i64]
                (wrap [(synthesis.i64 value)
                       synthesis.path/pop]))
              (~~ (do-template [<gen> <synth> <path>]
                    [(do r.Monad<Random>
                       [value <gen>]
                       (wrap [(<synth> value)
                              (<path> value)]))]

                    [r.bit         synthesis.bit  synthesis.path/bit]
                    [r.i64         synthesis.i64  synthesis.path/i64]
                    [r.frac        synthesis.f64  synthesis.path/f64]
                    [(r.unicode 5) synthesis.text synthesis.path/text]))
              (do r.Monad<Random>
                [size ..size
                 idx (|> r.nat (:: @ map (n/% size)))
                 [subS subP] case
                 #let [unitS (synthesis.text synthesis.unit)
                       caseS (synthesis.tuple
                              (list.concat (list (list.repeat idx unitS)
                                                 (list subS)
                                                 (list.repeat (|> size dec (n/- idx)) unitS))))
                       caseP (synthesis.path/seq [(if (tail? size idx)
                                                    (synthesis.member/right idx)
                                                    (synthesis.member/left idx))
                                                  subP])]]
                (wrap [caseS caseP]))
              (do r.Monad<Random>
                [size ..size
                 idx (|> r.nat (:: @ map (n/% size)))
                 [subS subP] case
                 #let [right? (tail? size idx)
                       caseS (synthesis.variant
                              {#analysis.lefts idx
                               #analysis.right? right?
                               #analysis.value subS})
                       caseP (synthesis.path/seq
                              [(if right?
                                 (synthesis.side/right idx)
                                 (synthesis.side/left idx))
                               subP])]]
                (wrap [caseS caseP]))
              ))))

(def: (let-spec run)
  (-> Runner Test)
  (do r.Monad<Random>
    [value &.safe-frac]
    (test "Specialized \"let\"."
          (|> (run (synthesis.branch/let [(synthesis.f64 value)
                                          0
                                          (synthesis.variable/local 0)]))
              (&.check value)))))

(def: (if-spec run)
  (-> Runner Test)
  (do r.Monad<Random>
    [on-true &.safe-frac
     on-false (|> &.safe-frac (r.filter (|>> (f/= on-true) not)))
     verdict r.bit]
    (test "Specialized \"if\"."
          (|> (run (synthesis.branch/if [(synthesis.bit verdict)
                                         (synthesis.f64 on-true)
                                         (synthesis.f64 on-false)]))
              (&.check (if verdict on-true on-false))))))

(def: (case-spec run)
  (-> Runner Test)
  (do r.Monad<Random>
    [[inputS pathS] ..case
     on-success &.safe-frac
     on-failure (|> &.safe-frac (r.filter (|>> (f/= on-success) not)))]
    (test "Case."
          (|> (run (synthesis.branch/case
                    [inputS
                     (synthesis.path/alt [(synthesis.path/seq [pathS
                                                               (synthesis.path/then (synthesis.f64 on-success))])
                                          (synthesis.path/then (synthesis.f64 on-failure))])]))
              (&.check on-success)))))

(def: (pattern-matching-spec run)
  (-> Runner Test)
  ($_ seq
      (let-spec run)
      (if-spec run)
      (case-spec run)))

(context: "[JVM] Pattern-matching."
  (<| (times 100)
      (pattern-matching-spec common.run-jvm)))

## (context: "[JS] Pattern-matching."
##   (<| (times 100)
##       (pattern-matching-spec common.run-js)))

## (context: "[Lua] Pattern-matching."
##   (<| (times 100)
##       (pattern-matching-spec common.run-lua)))

## (context: "[Ruby] Pattern-matching."
##   (<| (times 100)
##       (pattern-matching-spec common.run-ruby)))

## (context: "[Python] Function."
##   (<| (times 100)
##       (pattern-matching-spec common.run-python)))

## (context: "[R] Pattern-matching."
##   (<| (times 100)
##       (pattern-matching-spec common.run-r)))

## (context: "[Scheme] Pattern-matching."
##   (<| (times 100)
##       (pattern-matching-spec common.run-scheme)))

## (context: "[Common Lisp] Pattern-matching."
##   (<| (times 100)
##       (pattern-matching-spec common.run-common-lisp)))

## (context: "[PHP] Pattern-matching."
##   (<| (times 100)
##       (pattern-matching-spec common.run-php)))
