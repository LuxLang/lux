(.module:
  lux
  (lux [io]
       (control [monad #+ do]
                pipe)
       (data text/format
             ["e" error]
             [bool "bool/" Eq<Bool>]
             [text "text/" Eq<Text>])
       ["r" math/random]
       [macro]
       (macro [code])
       test)
  (luxc [lang]
        (lang [".L" host]
              ["ls" synthesis]
              (translation (js [".T" expression]
                               [".T" runtime]
                               [".T" eval]))))
  (test/luxc common))

(context: "Primitives."
  (<| (times +100)
      (do @
        [%bool% r.bool
         %nat% r.nat
         %int% r.int
         %deg% r.deg
         %frac% r.frac
         %text% (r.text +5)]
        (`` ($_ seq
                (test "Can translate unit."
                      (|> (do macro.Monad<Meta>
                            [_ runtimeT.translate
                             sampleI (expressionT.translate (' []))]
                            (evalT.eval sampleI))
                          (lang.with-current-module "")
                          (macro.run (init-js []))
                          (case> (#e.Success valueT)
                                 (is hostL.unit (:! Text valueT))

                                 _
                                 false)))
                (~~ (do-template [<desc> <type> <synthesis> <sample> <test>]
                      [(test (format "Can translate " <desc> ".")
                             (|> (do macro.Monad<Meta>
                                   [_ runtimeT.translate
                                    sampleI (expressionT.translate (<synthesis> <sample>))]
                                   (evalT.eval sampleI))
                                 (lang.with-current-module "")
                                 (macro.run (init-js []))
                                 (case> (#e.Success valueT)
                                        (<test> <sample> (:! <type> valueT))

                                        (#e.Error error)
                                        false)))]

                      ["bool" Bool code.bool %bool% bool/=]
                      ["nat"  Nat  code.nat  %nat%  n/=]
                      ["int"  Int  code.int  %int%  i/=]
                      ["deg"  Deg  code.deg  %deg%  d/=]
                      ["frac" Frac code.frac %frac% f/=]
                      ["text" Text code.text %text% text/=]))
                )))))
