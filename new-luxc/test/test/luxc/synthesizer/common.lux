(;module:
  lux
  (lux (data [bool "B/" Eq<Bool>]
             [text "T/" Eq<Text>])
       ["r" math/random "r/" Monad<Random>])
  (luxc (lang ["la" analysis]
              ["ls" synthesis])))

(def: #export gen-primitive
  (r;Random la;Analysis)
  (r;either (r;either (r;either (r/wrap #la;Unit)
                                (r/map (|>. #la;Bool) r;bool))
                      (r;either (r/map (|>. #la;Nat) r;nat)
                                (r/map (|>. #la;Int) r;int)))
            (r;either (r;either (r/map (|>. #la;Deg) r;deg)
                                (r/map (|>. #la;Frac) r;frac))
                      (r/map (|>. #la;Text) (r;text +5)))))

(def: #export (corresponds? analysis synthesis)
  (-> la;Analysis ls;Synthesis Bool)
  (case [analysis synthesis]
    (^template [<analysis> <synthesis> <test>]
      [(<analysis> valueA) (<synthesis> valueS)]
      (<test> valueA valueS))
    ([#la;Unit #ls;Unit is]
     [#la;Bool #ls;Bool B/=]
     [#la;Nat  #ls;Nat  n.=]
     [#la;Int  #ls;Int  i.=]
     [#la;Deg  #ls;Deg  d.=]
     [#la;Frac #ls;Frac f.=]
     [#la;Text #ls;Text T/=])

    _
    false))
