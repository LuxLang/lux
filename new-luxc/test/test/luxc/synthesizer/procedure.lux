(;module:
  lux
  (lux [io]
       (control [monad #+ do]
                pipe)
       (data [text "text/" Eq<Text>]
             [product]
             (coll [list]))
       ["r" math/random "r/" Monad<Random>]
       test)
  (luxc (lang ["la" analysis]
              ["ls" synthesis])
        (analyser [";A" structure])
        [synthesizer])
  (.. common))

(context: "Procedures"
  (<| (times +100)
      (do @
        [num-args (|> r;nat (:: @ map (n.% +10)))
         nameA (r;text +5)
         argsA (r;list num-args gen-primitive)]
        ($_ seq
            (test "Can synthesize procedure calls."
                  (|> (synthesizer;synthesize (la;procedure nameA argsA))
                      (case> (^ [_ (#;Form (list& [_ (#;Text procedure)] argsS))])
                             (and (text/= nameA procedure)
                                  (list;every? (product;uncurry corresponds?)
                                               (list;zip2 argsA argsS)))
                             
                             _
                             false)))
            ))))
