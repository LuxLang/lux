(;module:
  lux
  (lux [io]
       (control monad
                pipe)
       (data [bool "B/" Eq<Bool>]
             [text "T/" Eq<Text>]
             [product]
             (coll [list]))
       ["r" math/random "r/" Monad<Random>]
       test)
  (luxc (lang ["la" analysis]
              ["ls" synthesis])
        (analyser [";A" structure])
        [synthesizer])
  (.. common))

(test: "Procedures"
  [num-args (|> r;nat (:: @ map (n.% +10)))
   nameA (r;text +5)
   argsA (r;list num-args gen-primitive)]
  ($_ seq
      (assert "Can synthesize procedure calls."
              (|> (synthesizer;synthesize (#la;Procedure nameA argsA))
                  (case> (#ls;Procedure nameS argsS)
                         (and (T/= nameA nameS)
                              (list;every? (product;uncurry corresponds?)
                                           (list;zip2 argsA argsS)))
                         
                         _
                         false)))
      ))
