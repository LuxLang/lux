(;module:
  lux
  (lux [io]
       (control [monad #+ do]
                pipe)
       (data text/format)
       ["r" math/random]
       test)
  (luxc (lang ["la" analysis]
              ["ls" synthesis])
        [analyser]
        [synthesizer]))

(context: "Primitives"
  (<| (times +100)
      (do @
        [%bool% r;bool
         %nat% r;nat
         %int% r;int
         %deg% r;deg
         %frac% r;frac
         %text% (r;text +5)]
        (with-expansions
          [<tests> (do-template [<desc> <analysis> <synthesis> <sample>]
                     [(test (format "Can synthesize " <desc> ".")
                            (|> (synthesizer;synthesize (<analysis> <sample>))
                                (case> (<synthesis> value)
                                       (is <sample> value)

                                       _
                                       false)))]

                     ["unit" #la;Unit #ls;Unit []]
                     ["bool" #la;Bool #ls;Bool %bool%]
                     ["nat"  #la;Nat  #ls;Nat  %nat%]
                     ["int"  #la;Int  #ls;Int  %int%]
                     ["deg"  #la;Deg  #ls;Deg  %deg%]
                     ["frac" #la;Frac #ls;Frac %frac%]
                     ["text" #la;Text #ls;Text %text%])]
          ($_ seq
              <tests>)))))
