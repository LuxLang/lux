(;module:
  lux
  (lux [io]
       (control [monad #+ do]
                pipe)
       (data text/format)
       ["r" math/random]
       test)
  (luxc (lang ["la" analysis]
              ["ls" synthesis])
        [analyser]
        [synthesizer]))

(context: "Primitives"
  (<| (times +100)
      (do @
        [%bool% r;bool
         %nat% r;nat
         %int% r;int
         %deg% r;deg
         %frac% r;frac
         %text% (r;text +5)]
        (`` ($_ seq
                (test (format "Can synthesize unit.")
                      (|> (synthesizer;synthesize (#la;Unit []))
                          (case> [_ (#;Tuple #;Nil)]
                                 true

                                 _
                                 false)))
                (~~ (do-template [<desc> <analysis> <synthesis> <sample>]
                      [(test (format "Can synthesize " <desc> ".")
                             (|> (synthesizer;synthesize (<analysis> <sample>))
                                 (case> [_ (<synthesis> value)]
                                        (is <sample> value)

                                        _
                                        false)))]

                      ["bool" #la;Bool #;Bool %bool%]
                      ["nat"  #la;Nat  #;Nat  %nat%]
                      ["int"  #la;Int  #;Int  %int%]
                      ["deg"  #la;Deg  #;Deg  %deg%]
                      ["frac" #la;Frac #;Frac %frac%]
                      ["text" #la;Text #;Text %text%])))))))
