(;module:
  lux
  (lux [io]
       (control monad
                pipe)
       (data text/format)
       ["r" math/random "R/" Monad<Random>]
       test)
  (luxc (lang ["la" analysis]
              ["ls" synthesis])
        [analyser]
        [synthesizer]))

(context: "Primitives"
  [%bool% r;bool
   %nat% r;nat
   %int% r;int
   %deg% r;deg
   %real% r;real
   %text% (r;text +5)]
  (with-expansions
    [<tests> (do-template [<desc> <analysis> <synthesis> <sample>]
               [(test (format "Can synthesize " <desc> ".")
                      (|> (synthesizer;synthesize (<analysis> <sample>))
                          (case> (<synthesis> value)
                                 (is <sample> value)

                                 _
                                 false)))]

               ["unit" #la;Unit #ls;Unit []]
               ["bool" #la;Bool #ls;Bool %bool%]
               ["nat"  #la;Nat  #ls;Nat  %nat%]
               ["int"  #la;Int  #ls;Int  %int%]
               ["deg"  #la;Deg  #ls;Deg  %deg%]
               ["real" #la;Real #ls;Real %real%]
               ["text" #la;Text #ls;Text %text%])]
    ($_ seq
        <tests>)))
