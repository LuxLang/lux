(;module:
  lux
  (lux [io]
       (control [monad #+ do])
       (data [bool "bool/" Eq<Bool>]
             [number]
             (coll [list "list/" Functor<List> Fold<List>]
                   ["s" set])
             text/format)
       (meta [code])
       ["r" math/random "r/" Monad<Random>]
       test)
  (luxc (lang ["la" analysis]
              ["ls" synthesis])
        [synthesizer]
        (synthesizer ["&&;" loop]))
  (.. common))

(def: (does-recursion? arity exprS)
  (-> ls;Arity ls;Synthesis Bool)
  (loop [exprS exprS]
    (case exprS
      (^ [_ (#;Form (list [_ (#;Text "lux case")] inputS pathS))])
      (loop [pathS pathS]
        (case pathS
          (^ [_ (#;Form (list [_ (#;Text "lux case alt")] leftS rightS))])
          (or (recur leftS)
              (recur rightS))

          (^ [_ (#;Form (list [_ (#;Text "lux case seq")] leftS rightS))])
          (recur rightS)

          (^ [_ (#;Form (list [_ (#;Text "lux case exec")] bodyS))])
          (does-recursion? arity bodyS)
          
          _
          false))

      (^ [_ (#;Form (list& [_ (#;Text "lux recur")] argsS))])
      (n.= arity (list;size argsS))

      (^ [_ (#;Form (list [_ (#;Text "lux let")] register inputS bodyS))])
      (recur bodyS)

      (^ [_ (#;Form (list [_ (#;Text "lux if")] inputS thenS elseS))])
      (or (recur thenS)
          (recur elseS))

      _
      false
      )))

(def: (gen-body arity output)
  (-> Nat la;Analysis (r;Random la;Analysis))
  (r;either (r;either (r/wrap output)
                      (do r;Monad<Random>
                        [inputA (|> r;nat (:: @ map code;nat))
                         num-cases (|> r;nat (:: @ map (|>. (n.% +10) (n.max +1))))
                         tests (|> (r;set number;Hash<Nat> num-cases r;nat)
                                   (:: @ map (|>. s;to-list (list/map code;nat))))
                         #let [bad-bodies (list;repeat num-cases (' []))]
                         good-body (gen-body arity output)
                         where-to-set (|> r;nat (:: @ map (n.% num-cases)))
                         #let [bodies (list;concat (list (list;take where-to-set bad-bodies)
                                                         (list good-body)
                                                         (list;drop (n.inc where-to-set) bad-bodies)))]]
                        (wrap (` ("lux case" (~ inputA)
                                  (~ (code;record (list;zip2 tests bodies))))))))
            (r;either (do r;Monad<Random>
                        [valueS r;bool
                         output' (gen-body (n.inc arity) output)]
                        (wrap (` ("lux case" (~ (code;bool valueS))
                                  {("lux case bind" (~ (code;nat arity))) (~ output')}))))
                      (do r;Monad<Random>
                        [valueS r;bool
                         then|else r;bool
                         output' (gen-body arity output)
                         #let [thenA (if then|else output' (' []))
                               elseA (if (not then|else) output' (' []))]]
                        (wrap (` ("lux case" (~ (code;bool valueS))
                                  {(~ (code;bool then|else)) (~ thenA)
                                   (~ (code;bool (not then|else))) (~ elseA)})))))
            ))

(def: (make-function arity body)
  (-> ls;Arity la;Analysis la;Analysis)
  (case arity
    +0 body
    _ (` ("lux function" [] (~ (make-function (n.dec arity) body))))))

(def: gen-recursion
  (r;Random [Bool Nat la;Analysis])
  (do r;Monad<Random>
    [arity (|> r;nat (:: @ map (|>. (n.% +10) (n.max +1))))
     recur? r;bool
     outputS (if recur?
               (wrap (la;apply (list;repeat arity (' [])) (la;var 0)))
               (do @
                 [plus-or-minus? r;bool
                  how-much (|> r;nat (:: @ map (|>. (n.% arity) (n.max +1))))
                  #let [shift (if plus-or-minus? n.+ n.-)]]
                 (wrap (la;apply (list;repeat (shift how-much arity) (' [])) (la;var 0)))))
     bodyS (gen-body arity outputS)]
    (wrap [recur? arity (make-function arity bodyS)])))

(def: gen-loop
  (r;Random [Bool Nat la;Analysis])
  (do r;Monad<Random>
    [arity (|> r;nat (:: @ map (|>. (n.% +10) (n.max +1))))
     recur? r;bool
     self-ref? r;bool
     #let [selfA (la;var 0)
           argA (if self-ref? selfA (' []))]
     outputS (if recur?
               (wrap (la;apply (list;repeat arity argA) selfA))
               (do @
                 [plus-or-minus? r;bool
                  how-much (|> r;nat (:: @ map (|>. (n.% arity) (n.max +1))))
                  #let [shift (if plus-or-minus? n.+ n.-)]]
                 (wrap (la;apply (list;repeat (shift how-much arity) (' [])) selfA))))
     bodyS (gen-body arity outputS)]
    (wrap [(and recur? (not self-ref?))
           arity
           (make-function arity bodyS)])))

(context: "Recursion."
  (<| (times +100)
      (do @
        [[prediction arity analysis] gen-recursion]
        ($_ seq
            (test "Can accurately identify (and then reify) tail recursion."
                  (case (synthesizer;synthesize analysis)
                    (^ [_ (#;Form (list [_ (#;Text "lux function")] [_ (#;Nat _arity)] [_ (#;Tuple _env)] _body))])
                    (|> _body
                        (does-recursion? arity)
                        (bool/= prediction)
                        (and (n.= arity _arity)))

                    _
                    false))))))

(context: "Loop."
  (<| (times +100)
      (do @
        [[prediction arity analysis] gen-recursion]
        ($_ seq
            (test "Can reify loops."
                  (case (synthesizer;synthesize (la;apply (list;repeat arity (' [])) analysis))
                    (^ [_ (#;Form (list [_ (#;Text "lux loop")] [_ (#;Nat in_register)] [_ (#;Tuple _inits)] _body))])
                    (and (n.= arity (list;size _inits))
                         (not (&&loop;contains-self-reference? _body)))

                    (^ [_ (#;Form (list& [_ (#;Text "lux call")]
                                         [_ (#;Form (list [_ (#;Text "lux function")] _arity _env _bodyS))]
                                         argsS))])
                    (&&loop;contains-self-reference? _bodyS)

                    _
                    false))))))
