(;module:
  lux
  (lux [io]
       (control monad
                pipe)
       (data [bool "B/" Eq<Bool>]
             [product]
             (coll [list]))
       ["r" math/random "r/" Monad<Random>]
       test)
  (luxc (lang ["la" analysis]
              ["ls" synthesis])
        [synthesizer])
  (.. common))

(context: "Variants"
  [size (|> r;nat (:: @ map (|>. (n.% +10) (n.max +2))))
   tagA (|> r;nat (:: @ map (n.% size)))
   memberA gen-primitive]
  ($_ seq
      (test "Can synthesize variants."
            (|> (synthesizer;synthesize (la;sum tagA size +0 memberA))
                (case> (#ls;Variant tagS last?S memberS)
                       (and (n.= tagA tagS)
                            (B/= (n.= (n.dec size) tagA)
                                 last?S)
                            (corresponds? memberA memberS))
                       
                       _
                       false)))
      ))

(context: "Tuples"
  [size (|> r;nat (:: @ map (|>. (n.% +10) (n.max +2))))
   membersA (r;list size gen-primitive)]
  ($_ seq
      (test "Can synthesize tuple."
            (|> (synthesizer;synthesize (la;product membersA))
                (case> (#ls;Tuple membersS)
                       (and (n.= size (list;size membersS))
                            (list;every? (product;uncurry corresponds?) (list;zip2 membersA membersS)))

                       _
                       false)))
      ))
