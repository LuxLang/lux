(;module:
  lux
  (lux [io]
       (control monad)
       (data [char "C/" Eq<Char>]
             [text "T/" Eq<Text>]
             (text format
                   ["l" lexer])
             [number]
             ["E" error]
             (coll [list]))
       ["R" math/random "R/" Monad<Random>]
       (macro [ast])
       test)
  (luxc ["&" parser]))

(def: default-cursor
  Cursor
  {#;module ""
   #;line   +0
   #;column +0})

(def: ident-part^
  (R;Random Text)
  (do R;Monad<Random>
    [#let [digits "0123456789"
           delimiters "()[]{}#;"
           space "\t\v \n\r\f"
           invalid-range (format digits delimiters space)
           char-gen (|> R;char
                        (R;filter (function [sample]
                                    (not (text;contains? (char;as-text sample)
                                                         invalid-range)))))]
     size (|> R;nat (:: @ map (|>. (n.% +20) (n.max +1))))]
    (R;text' char-gen size)))

(def: ident^
  (R;Random Ident)
  (R;seq ident-part^ ident-part^))

(def: ast^
  (R;Random AST)
  (let [numeric^ (: (R;Random AST)
                    ($_ R;either
                        (|> R;bool (R/map (|>. #;Bool [default-cursor])))
                        (|> R;nat (R/map (|>. #;Nat [default-cursor])))
                        (|> R;int (R/map (|>. #;Int [default-cursor])))
                        (|> R;deg (R/map (|>. #;Deg [default-cursor])))
                        (|> R;real (R/map (|>. #;Real [default-cursor])))))
        textual^ (: (R;Random AST)
                    ($_ R;either
                        (|> R;char (R/map (|>. #;Char [default-cursor])))
                        (do R;Monad<Random>
                          [size (|> R;nat (R/map (n.% +20)))]
                          (|> (R;text size) (R/map (|>. #;Text [default-cursor]))))
                        (|> ident^ (R/map (|>. #;Symbol [default-cursor])))
                        (|> ident^ (R/map (|>. #;Tag [default-cursor])))))
        simple^ (: (R;Random AST)
                   ($_ R;either
                       numeric^
                       textual^))]
    (R;rec
     (function [ast^]
       (let [multi^ (do R;Monad<Random>
                      [size (|> R;nat (R/map (n.% +3)))]
                      (R;list size ast^))
             composite^ (: (R;Random AST)
                           ($_ R;either
                               (|> multi^ (R/map (|>. #;Form [default-cursor])))
                               (|> multi^ (R/map (|>. #;Tuple [default-cursor])))
                               (do R;Monad<Random>
                                 [size (|> R;nat (R/map (n.% +3)))]
                                 (|> (R;list size (R;seq ast^ ast^))
                                     (R/map (|>. #;Record [default-cursor]))))))]
         (R;either simple^
                   composite^))))))

(test: "Lux code parser."
  [sample ast^]
  (assert "Can parse Lux code."
          (case (&;parse [default-cursor (ast;to-text sample)])
            (#E;Error error)
            false

            (#E;Success [_ parsed])
            (:: ast;Eq<AST> = parsed sample))
          ))

(def: comment-text^
  (R;Random Text)
  (let [char-gen (|> R;char (R;filter (function [value]
                                        (not (or (char;space? value)
                                                 (C/= #"\n" value)
                                                 (C/= #"#" value)
                                                 (C/= #"(" value)
                                                 (C/= #")" value))))))]
    (do R;Monad<Random>
      [size (|> R;nat (R/map (n.% +20)))]
      (R;text' char-gen size))))

(def: comment^
  (R;Random Text)
  (R;either (do R;Monad<Random>
              [comment comment-text^]
              (wrap (format "## " comment "\n")))
            (R;rec (function [nested^]
                     (do R;Monad<Random>
                       [comment (R;either comment-text^
                                          nested^)]
                       (wrap (format "#( " comment " )#")))))))

(test: "Multi-line text & comments."
  [#let [char-gen (|> R;char (R;filter (function [value]
                                         (not (or (char;space? value)
                                                  (C/= #"\"" value)
                                                  (C/= #"\n" value))))))]
   x char-gen
   y char-gen
   z char-gen
   offset-size (|> R;nat (R/map (|>. (n.% +10) (n.max +1))))
   #let [offset (text;join-with "" (list;repeat offset-size " "))]
   sample ast^
   comment comment^
   unbalanced-comment comment-text^]
  ($_ seq
      (assert "Will reject invalid multi-line text."
              (let [bad-match (format (char;as-text x) "\n"
                                      (char;as-text y) "\n"
                                      (char;as-text z))]
                (case (&;parse [default-cursor
                                (format "\"" bad-match "\"")])
                  (#E;Error error)
                  true

                  (#E;Success [_ parsed])
                  false)))
      (assert "Will accept valid multi-line text"
              (let [good-input (format (char;as-text x) "\n"
                                       offset (char;as-text y) "\n"
                                       offset (char;as-text z))
                    good-output (format (char;as-text x) "\n"
                                        (char;as-text y) "\n"
                                        (char;as-text z))]
                (case (&;parse [(|> default-cursor
                                    (update@ #;column (n.+ (n.dec offset-size))))
                                (format "\"" good-input "\"")])
                  (#E;Error error)
                  false

                  (#E;Success [_ parsed])
                  (:: ast;Eq<AST> =
                      parsed
                      (ast;text good-output)))))
      (assert "Can handle comments."
              (case (&;parse [default-cursor
                              (format comment (ast;to-text sample))])
                (#E;Error error)
                false

                (#E;Success [_ parsed])
                (:: ast;Eq<AST> = parsed sample)))
      (assert "Will reject unbalanced multi-line comments."
              (and (case (&;parse [default-cursor
                                   (format "#(" "#(" unbalanced-comment ")#"
                                           (ast;to-text sample))])
                     (#E;Error error)
                     true

                     (#E;Success [_ parsed])
                     false)
                   (case (&;parse [default-cursor
                                   (format "#(" unbalanced-comment ")#" ")#"
                                           (ast;to-text sample))])
                     (#E;Error error)
                     true

                     (#E;Success [_ parsed])
                     false)))
      ))
