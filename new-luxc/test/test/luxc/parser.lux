(;module:
  lux
  (lux [io]
       (control monad)
       (data [char "C/" Eq<Char>]
             [text "T/" Eq<Text>]
             (text format
                   ["l" lexer])
             [number]
             ["R" result]
             (coll [list]))
       ["r" math/random "r/" Monad<Random>]
       (macro [code])
       test)
  (luxc ["&" parser]))

(def: default-cursor
  Cursor
  {#;module ""
   #;line   +0
   #;column +0})

(def: ident-part^
  (r;Random Text)
  (do r;Monad<Random>
    [#let [digits "0123456789"
           delimiters "()[]{}#;"
           space "\t\v \n\r\f"
           invalid-range (format digits delimiters space)
           char-gen (|> r;char
                        (r;filter (function [sample]
                                    (not (text;contains? (char;as-text sample)
                                                         invalid-range)))))]
     size (|> r;nat (:: @ map (|>. (n.% +20) (n.max +1))))]
    (r;text' char-gen size)))

(def: ident^
  (r;Random Ident)
  (r;seq ident-part^ ident-part^))

(def: ast^
  (r;Random Code)
  (let [numeric^ (: (r;Random Code)
                    ($_ r;either
                        (|> r;bool (r/map (|>. #;Bool [default-cursor])))
                        (|> r;nat (r/map (|>. #;Nat [default-cursor])))
                        (|> r;int (r/map (|>. #;Int [default-cursor])))
                        (|> r;deg (r/map (|>. #;Deg [default-cursor])))
                        (|> r;real (r/map (|>. #;Real [default-cursor])))))
        textual^ (: (r;Random Code)
                    ($_ r;either
                        (|> r;char (r/map (|>. #;Char [default-cursor])))
                        (do r;Monad<Random>
                          [size (|> r;nat (r/map (n.% +20)))]
                          (|> (r;text size) (r/map (|>. #;Text [default-cursor]))))
                        (|> ident^ (r/map (|>. #;Symbol [default-cursor])))
                        (|> ident^ (r/map (|>. #;Tag [default-cursor])))))
        simple^ (: (r;Random Code)
                   ($_ r;either
                       numeric^
                       textual^))]
    (r;rec
     (function [ast^]
       (let [multi^ (do r;Monad<Random>
                      [size (|> r;nat (r/map (n.% +3)))]
                      (r;list size ast^))
             composite^ (: (r;Random Code)
                           ($_ r;either
                               (|> multi^ (r/map (|>. #;Form [default-cursor])))
                               (|> multi^ (r/map (|>. #;Tuple [default-cursor])))
                               (do r;Monad<Random>
                                 [size (|> r;nat (r/map (n.% +3)))]
                                 (|> (r;list size (r;seq ast^ ast^))
                                     (r/map (|>. #;Record [default-cursor]))))))]
         (r;either simple^
                   composite^))))))

(test: "Lux code parser."
  [sample ast^]
  (assert "Can parse Lux code."
          (case (&;parse [default-cursor (code;to-text sample)])
            (#R;Error error)
            false

            (#R;Success [_ parsed])
            (:: code;Eq<Code> = parsed sample))
          ))

(def: comment-text^
  (r;Random Text)
  (let [char-gen (|> r;char (r;filter (function [value]
                                        (not (or (char;space? value)
                                                 (C/= #"\n" value)
                                                 (C/= #"#" value)
                                                 (C/= #"(" value)
                                                 (C/= #")" value))))))]
    (do r;Monad<Random>
      [size (|> r;nat (r/map (n.% +20)))]
      (r;text' char-gen size))))

(def: comment^
  (r;Random Text)
  (r;either (do r;Monad<Random>
              [comment comment-text^]
              (wrap (format "## " comment "\n")))
            (r;rec (function [nested^]
                     (do r;Monad<Random>
                       [comment (r;either comment-text^
                                          nested^)]
                       (wrap (format "#( " comment " )#")))))))

(test: "Multi-line text & comments."
  [#let [char-gen (|> r;char (r;filter (function [value]
                                         (not (or (char;space? value)
                                                  (C/= #"\"" value)
                                                  (C/= #"\n" value))))))]
   x char-gen
   y char-gen
   z char-gen
   offset-size (|> r;nat (r/map (|>. (n.% +10) (n.max +1))))
   #let [offset (text;join-with "" (list;repeat offset-size " "))]
   sample ast^
   comment comment^
   unbalanced-comment comment-text^]
  ($_ seq
      (assert "Will reject invalid multi-line text."
              (let [bad-match (format (char;as-text x) "\n"
                                      (char;as-text y) "\n"
                                      (char;as-text z))]
                (case (&;parse [default-cursor
                                (format "\"" bad-match "\"")])
                  (#R;Error error)
                  true

                  (#R;Success [_ parsed])
                  false)))
      (assert "Will accept valid multi-line text"
              (let [good-input (format (char;as-text x) "\n"
                                       offset (char;as-text y) "\n"
                                       offset (char;as-text z))
                    good-output (format (char;as-text x) "\n"
                                        (char;as-text y) "\n"
                                        (char;as-text z))]
                (case (&;parse [(|> default-cursor
                                    (update@ #;column (n.+ (n.dec offset-size))))
                                (format "\"" good-input "\"")])
                  (#R;Error error)
                  false

                  (#R;Success [_ parsed])
                  (:: code;Eq<Code> =
                      parsed
                      (code;text good-output)))))
      (assert "Can handle comments."
              (case (&;parse [default-cursor
                              (format comment (code;to-text sample))])
                (#R;Error error)
                false

                (#R;Success [_ parsed])
                (:: code;Eq<Code> = parsed sample)))
      (assert "Will reject unbalanced multi-line comments."
              (and (case (&;parse [default-cursor
                                   (format "#(" "#(" unbalanced-comment ")#"
                                           (code;to-text sample))])
                     (#R;Error error)
                     true

                     (#R;Success [_ parsed])
                     false)
                   (case (&;parse [default-cursor
                                   (format "#(" unbalanced-comment ")#" ")#"
                                           (code;to-text sample))])
                     (#R;Error error)
                     true

                     (#R;Success [_ parsed])
                     false)))
      ))
