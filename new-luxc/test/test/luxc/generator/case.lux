(;module:
  lux
  (lux [io]
       (control [monad #+ do]
                pipe)
       (data ["e" error]
             text/format
             (coll [list]))
       ["r" math/random "r/" Monad<Random>]
       [meta]
       (meta [code])
       test)
  (luxc (lang ["ls" synthesis])
        [synthesizer]
        (generator ["@" case]
                   [";G" expression]
                   ["@;" eval]
                   ["@;" runtime]
                   ["@;" common]))
  (test/luxc common))

(def: struct-limit Nat +10)

(def: (tail? size idx)
  (-> Nat Nat Bool)
  (n.= (n.dec size) idx))

(def: gen-case
  (r;Random [ls;Synthesis ls;Path])
  (<| r;rec (function [gen-case])
      (`` ($_ r;either
              (r/wrap [(' []) (' ("lux case pop"))])
              (~~ (do-template [<gen> <synth>]
                    [(do r;Monad<Random>
                       [value <gen>]
                       (wrap [(<synth> value) (<synth> value)]))]

                    [r;bool code;bool]
                    [r;nat code;nat]
                    [r;int code;int]
                    [r;deg code;deg]
                    [r;frac code;frac]
                    [(r;text +5) code;text]))
              (do r;Monad<Random>
                [size (|> r;nat (:: @ map (|>. (n.% struct-limit) (n.max +2))))
                 idx (|> r;nat (:: @ map (n.% size)))
                 [subS subP] gen-case
                 #let [caseS (` [(~@ (list;concat (list (list;repeat idx (' []))
                                                        (list subS)
                                                        (list;repeat (|> size n.dec (n.- idx)) (' [])))))])
                       caseP (if (tail? size idx)
                               (` ("lux case tuple right" (~ (code;nat idx)) (~ subP)))
                               (` ("lux case tuple left" (~ (code;nat idx)) (~ subP))))]]
                (wrap [caseS caseP]))
              (do r;Monad<Random>
                [size (|> r;nat (:: @ map (|>. (n.% struct-limit) (n.max +2))))
                 idx (|> r;nat (:: @ map (n.% size)))
                 [subS subP] gen-case
                 #let [caseS (` ((~ (code;nat idx)) (~ (code;bool (tail? size idx))) (~ subS)))
                       caseP (if (tail? size idx)
                               (` ("lux case variant right" (~ (code;nat idx)) (~ subP)))
                               (` ("lux case variant left" (~ (code;nat idx)) (~ subP))))]]
                (wrap [caseS caseP]))
              ))))

(context: "Pattern-matching."
  (<| (times +100)
      (do @
        [[valueS pathS] gen-case
         to-bind r;nat]
        ($_ seq
            (test "Can generate pattern-matching."
                  (|> (do meta;Monad<Meta>
                        [runtime-bytecode @runtime;generate
                         sampleI (@;generate-case expressionG;generate
                                                  valueS
                                                  (` ("lux case alt"
                                                      ("lux case seq" (~ pathS)
                                                       ("lux case exec" true))
                                                      ("lux case seq" ("lux case bind" +0)
                                                       ("lux case exec" false)))))]
                        (@eval;eval sampleI))
                      (meta;run (init-compiler []))
                      (case> (#e;Success valueG)
                             (:! Bool valueG)

                             (#e;Error error)
                             false)))
            (test "Can bind values."
                  (|> (do meta;Monad<Meta>
                        [runtime-bytecode @runtime;generate
                         sampleI (@;generate-case expressionG;generate
                                                  (code;nat to-bind)
                                                  (` ("lux case seq" ("lux case bind" +0)
                                                      ("lux case exec" (0)))))]
                        (@eval;eval sampleI))
                      (meta;run (init-compiler []))
                      (case> (#e;Success valueG)
                             (n.= to-bind (:! Nat valueG))

                             _
                             false)))))))
