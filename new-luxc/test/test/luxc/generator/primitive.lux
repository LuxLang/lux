(;module:
  lux
  (lux [io]
       (control [monad #+ do]
                pipe)
       (data text/format
             ["R" result]
             [bool "B/" Eq<Bool>]
             [text "T/" Eq<Text>])
       ["r" math/random "R/" Monad<Random>]
       [macro]
       test)
  (luxc (lang ["ls" synthesis])
        [analyser]
        [synthesizer]
        (generator ["@" expr]
                   ["@;" runtime]
                   ["@;" eval]
                   ["@;" common]))
  (test/luxc common))

(context: "Primitives."
  [%bool% r;bool
   %nat% r;nat
   %int% r;int
   %deg% r;deg
   %frac% r;frac
   %text% (r;text +5)]
  (with-expansions
    [<tests> (do-template [<desc> <type> <synthesis> <sample> <test>]
               [(test (format "Can generate " <desc> ".")
                      (|> (do macro;Monad<Lux>
                            [sampleI (@;generate (<synthesis> <sample>))]
                            (@eval;eval sampleI))
                          (macro;run (init-compiler []))
                          (case> (#R;Success valueG)
                                 (<test> <sample> (:! <type> valueG))

                                 _
                                 false)))]

               ["bool" Bool #ls;Bool %bool% B/=]
               ["nat"  Nat  #ls;Nat  %nat%  n.=]
               ["int"  Int  #ls;Int  %int%  i.=]
               ["deg"  Deg  #ls;Deg  %deg%  d.=]
               ["frac" Frac #ls;Frac %frac% f.=]
               ["text" Text #ls;Text %text% T/=])]
    ($_ seq
        (test "Can generate unit."
              (|> (do macro;Monad<Lux>
                    [sampleI (@;generate #ls;Unit)]
                    (@eval;eval sampleI))
                  (macro;run (init-compiler []))
                  (case> (#R;Success valueG)
                         (is @runtime;unit (:! Text valueG))

                         _
                         false)))
        <tests>
        )))
