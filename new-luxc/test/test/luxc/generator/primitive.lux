(;module:
  lux
  (lux [io]
       (control [monad #+ do]
                pipe)
       (data text/format
             ["e" error]
             [bool "B/" Eq<Bool>]
             [text "T/" Eq<Text>])
       ["r" math/random]
       [meta]
       (meta [code])
       test)
  (luxc [";L" host]
        (lang ["ls" synthesis])
        [analyser]
        [synthesizer]
        (generator ["@" expr]
                   ["@;" runtime]
                   ["@;" eval]
                   ["@;" common]))
  (test/luxc common))

(context: "Primitives."
  (<| (times +100)
      (do @
        [%bool% r;bool
         %nat% r;nat
         %int% r;int
         %deg% r;deg
         %frac% r;frac
         %text% (r;text +5)]
        (with-expansions
          [<tests> (do-template [<desc> <type> <synthesis> <sample> <test>]
                     [(test (format "Can generate " <desc> ".")
                            (|> (do meta;Monad<Meta>
                                  [sampleI (@;generate (<synthesis> <sample>))]
                                  (@eval;eval sampleI))
                                (meta;run (init-compiler []))
                                (case> (#e;Success valueG)
                                       (<test> <sample> (:! <type> valueG))

                                       _
                                       false)))]

                     ["bool" Bool code;bool %bool% B/=]
                     ["nat"  Nat  code;nat  %nat%  n.=]
                     ["int"  Int  code;int  %int%  i.=]
                     ["deg"  Deg  code;deg  %deg%  d.=]
                     ["frac" Frac code;frac %frac% f.=]
                     ["text" Text code;text %text% T/=])]
          ($_ seq
              (test "Can generate unit."
                    (|> (do meta;Monad<Meta>
                          [sampleI (@;generate (' []))]
                          (@eval;eval sampleI))
                        (meta;run (init-compiler []))
                        (case> (#e;Success valueG)
                               (is hostL;unit (:! Text valueG))

                               _
                               false)))
              <tests>
              )))))
