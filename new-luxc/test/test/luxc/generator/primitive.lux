(;module:
  lux
  (lux [io]
       (control monad
                pipe)
       (data text/format
             ["R" result]
             [bool "B/" Eq<Bool>]
             [char "C/" Eq<Char>]
             [text "T/" Eq<Text>])
       ["r" math/random "R/" Monad<Random>]
       [macro]
       test)
  (luxc (lang ["ls" synthesis])
        [analyser]
        [synthesizer]
        (generator ["@" expr]
                   ["@;" eval]
                   ["@;" common]))
  (test/luxc common))

(test: "Primitives."
  [%bool% r;bool
   %nat% r;nat
   %int% r;int
   %deg% r;deg
   %real% r;real
   %char% r;char
   %text% (r;text +5)]
  (with-expansions
    [<tests> (do-template [<desc> <type> <synthesis> <sample> <test>]
               [(assert (format "Can generate " <desc> ".")
                        (|> (@eval;eval (@;generate (<synthesis> <sample>)))
                            (macro;run (init-compiler []))
                            (case> (#R;Success valueG)
                                   (<test> <sample> (:! <type> valueG))

                                   _
                                   false)))]

               ["bool" Bool #ls;Bool %bool% B/=]
               ["nat"  Nat  #ls;Nat  %nat%  n.=]
               ["int"  Int  #ls;Int  %int%  i.=]
               ["deg"  Deg  #ls;Deg  %deg%  d.=]
               ["real" Real #ls;Real %real% r.=]
               ["char" Char #ls;Char %char% C/=]
               ["text" Text #ls;Text %text% T/=])]
    ($_ seq
        (assert "Can generate unit."
                (|> (@eval;eval (@;generate #ls;Unit))
                    (macro;run (init-compiler []))
                    (case> (#R;Success valueG)
                           (is @common;unit (:! Text valueG))

                           _
                           false)))
        <tests>
        )))
