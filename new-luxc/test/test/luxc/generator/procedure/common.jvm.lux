(;module:
  lux
  (lux [io]
       (control [monad #+ do]
                pipe)
       (data text/format
             [bit]
             ["e" error]
             [bool "bool/" Eq<Bool>]
             [text "text/" Eq<Text>]
             [number "n/" Interval<Nat> "i/" Interval<Int> "r/" Interval<Frac> "d/" Interval<Deg>]
             (coll ["a" array]
                   [list]))
       ["r" math/random "r/" Monad<Random>]
       [meta #+ Monad<Meta>]
       [host]
       test)
  (luxc (lang ["ls" synthesis])
        [analyser]
        [synthesizer]
        (generator ["@" expr]
                   ["@;" eval]
                   ["@;" runtime]
                   ["@;" common]))
  (test/luxc common))

(context: "Bit procedures"
  [param r;nat
   subject r;nat]
  (with-expansions [<binary> (do-template [<name> <reference>]
                               [(test <name>
                                      (|> (do meta;Monad<Meta>
                                            [sampleI (@;generate (#ls;Procedure <name>
                                                                                (list (#ls;Nat subject)
                                                                                      (#ls;Nat param))))]
                                            (@eval;eval sampleI))
                                          (meta;run (init-compiler []))
                                          (case> (#e;Success valueG)
                                                 (n.= (<reference> param subject) (:! Nat valueG))

                                                 _
                                                 false)))]

                               ["bit and"                  bit;and]
                               ["bit or"                   bit;or]
                               ["bit xor"                  bit;xor]
                               ["bit shift-left"           bit;shift-left]
                               ["bit unsigned-shift-right" bit;shift-right]
                               )]
    ($_ seq
        (test "bit count"
              (|> (do meta;Monad<Meta>
                    [sampleI (@;generate (#ls;Procedure "bit count" (list (#ls;Nat subject))))]
                    (@eval;eval sampleI))
                  (meta;run (init-compiler []))
                  (case> (#e;Success valueG)
                         (n.= (bit;count subject) (:! Nat valueG))

                         _
                         false)))

        <binary>
        (test "bit shift-right"
              (|> (do meta;Monad<Meta>
                    [sampleI (@;generate (#ls;Procedure "bit shift-right"
                                                        (list (#ls;Int (nat-to-int subject))
                                                              (#ls;Nat param))))]
                    (@eval;eval sampleI))
                  (meta;run (init-compiler []))
                  (case> (#e;Success valueG)
                         (i.= (bit;signed-shift-right param (nat-to-int subject))
                              (:! Int valueG))

                         _
                         false)))
        )))

(context: "Nat procedures"
  [param (|> r;nat (r;filter (|>. (n.= +0) not)))
   subject r;nat]
  (with-expansions [<nullary> (do-template [<name> <reference>]
                                [(test <name>
                                       (|> (do meta;Monad<Meta>
                                             [sampleI (@;generate (#ls;Procedure <name> (list)))]
                                             (@eval;eval sampleI))
                                           (meta;run (init-compiler []))
                                           (case> (#e;Success valueG)
                                                  (n.= <reference> (:! Nat valueG))

                                                  _
                                                  false)))]

                                ["nat min" n/bottom]
                                ["nat max" n/top]
                                )
                    <unary> (do-template [<name> <type> <prepare> <comp>]
                              [(test <name>
                                     (|> (do meta;Monad<Meta>
                                           [sampleI (@;generate (#ls;Procedure <name> (list (#ls;Nat subject))))]
                                           (@eval;eval sampleI))
                                         (meta;run (init-compiler []))
                                         (case> (#e;Success valueG)
                                                (<comp> (<prepare> subject) (:! <type> valueG))

                                                _
                                                false)))]

                              ["nat to-int"  Int  nat-to-int     i.=]
                              ["nat to-char" Text text;from-code text/=]
                              )
                    <binary> (do-template [<name> <reference> <outputT> <comp>]
                               [(test <name>
                                      (|> (do Monad<Meta>
                                            [runtime-bytecode @runtime;generate
                                             sampleI (@;generate (#ls;Procedure <name>
                                                                                (list (#ls;Nat subject)
                                                                                      (#ls;Nat param))))]
                                            (@eval;eval sampleI))
                                          (meta;run (init-compiler []))
                                          (case> (#e;Success valueG)
                                                 (<comp> (<reference> param subject) (:! <outputT> valueG))

                                                 _
                                                 false)))]

                               ["nat +" n.+ Nat  n.=]
                               ["nat -" n.- Nat  n.=]
                               ["nat *" n.* Nat  n.=]
                               ["nat /" n./ Nat  n.=]
                               ["nat %" n.% Nat  n.=]
                               ["nat =" n.= Bool bool/=]
                               ["nat <" n.< Bool bool/=]
                               )]
    ($_ seq
        <nullary>
        <unary>
        <binary>
        )))

(context: "Int procedures"
  [param (|> r;int (r;filter (|>. (i.= 0) not)))
   subject r;int]
  (with-expansions [<nullary> (do-template [<name> <reference>]
                                [(test <name>
                                       (|> (do meta;Monad<Meta>
                                             [sampleI (@;generate (#ls;Procedure <name> (list)))]
                                             (@eval;eval sampleI))
                                           (meta;run (init-compiler []))
                                           (case> (#e;Success valueG)
                                                  (i.= <reference> (:! Int valueG))

                                                  _
                                                  false)))]

                                ["int min" i/bottom]
                                ["int max" i/top]
                                )
                    <unary> (do-template [<name> <type> <prepare> <comp>]
                              [(test <name>
                                     (|> (do meta;Monad<Meta>
                                           [sampleI (@;generate (#ls;Procedure <name> (list (#ls;Int subject))))]
                                           (@eval;eval sampleI))
                                         (meta;run (init-compiler []))
                                         (case> (#e;Success valueG)
                                                (<comp> (<prepare> subject) (:! <type> valueG))

                                                _
                                                false)))]

                              ["int to-nat"  Nat  int-to-nat  n.=]
                              ["int to-frac" Frac int-to-frac f.=]
                              )
                    <binary> (do-template [<name> <reference> <outputT> <comp>]
                               [(test <name>
                                      (|> (do Monad<Meta>
                                            [runtime-bytecode @runtime;generate
                                             sampleI (@;generate (#ls;Procedure <name>
                                                                                (list (#ls;Int subject)
                                                                                      (#ls;Int param))))]
                                            (@eval;eval sampleI))
                                          (meta;run (init-compiler []))
                                          (case> (#e;Success valueG)
                                                 (<comp> (<reference> param subject) (:! <outputT> valueG))

                                                 _
                                                 false)))]

                               ["int +" i.+ Int  i.=]
                               ["int -" i.- Int  i.=]
                               ["int *" i.* Int  i.=]
                               ["int /" i./ Int  i.=]
                               ["int %" i.% Int  i.=]
                               ["int =" i.= Bool bool/=]
                               ["int <" i.< Bool bool/=]
                               )]
    ($_ seq
        <nullary>
        <unary>
        <binary>
        )))

(context: "Frac procedures [Part 1]"
  [param (|> r;frac (r;filter (|>. (f.= 0.0) not)))
   subject r;frac]
  (with-expansions [<binary> (do-template [<name> <reference> <outputT> <comp>]
                               [(test <name>
                                      (|> (do Monad<Meta>
                                            [runtime-bytecode @runtime;generate
                                             sampleI (@;generate (#ls;Procedure <name>
                                                                                (list (#ls;Frac subject)
                                                                                      (#ls;Frac param))))]
                                            (@eval;eval sampleI))
                                          (meta;run (init-compiler []))
                                          (case> (#e;Success valueG)
                                                 (<comp> (<reference> param subject) (:! <outputT> valueG))

                                                 _
                                                 false)))]

                               ["frac +" f.+ Frac f.=]
                               ["frac -" f.- Frac f.=]
                               ["frac *" f.* Frac f.=]
                               ["frac /" f./ Frac f.=]
                               ["frac %" f.% Frac f.=]
                               ["frac =" f.= Bool bool/=]
                               ["frac <" f.< Bool bool/=]
                               )]
    ($_ seq
        <binary>
        )))

(context: "Frac procedures [Part 2]"
  [param (|> r;frac (r;filter (|>. (f.= 0.0) not)))
   subject r;frac]
  (with-expansions [<nullary> (do-template [<name> <test>]
                                [(test <name>
                                       (|> (do meta;Monad<Meta>
                                             [sampleI (@;generate (#ls;Procedure <name> (list)))]
                                             (@eval;eval sampleI))
                                           (meta;run (init-compiler []))
                                           (case> (#e;Success valueG)
                                                  (<test> (:! Frac valueG))

                                                  _
                                                  false)))]

                                ["frac min" (f.= r/bottom)]
                                ["frac max" (f.= r/top)]
                                ["frac not-a-number" number;not-a-number?]
                                ["frac positive-infinity" (f.= number;positive-infinity)]
                                ["frac negative-infinity" (f.= number;negative-infinity)]
                                ["frac smallest" (f.= (_lux_proc [ "frac" "smallest-value"] []))]
                                )
                    <unary> (do-template [<name> <type> <prepare> <comp>]
                              [(test <name>
                                     (|> (do Monad<Meta>
                                           [runtime-bytecode @runtime;generate
                                            sampleI (@;generate (#ls;Procedure <name> (list (#ls;Frac subject))))]
                                           (@eval;eval sampleI))
                                         (meta;run (init-compiler []))
                                         (case> (#e;Success valueG)
                                                (<comp> (<prepare> subject) (:! <type> valueG))

                                                _
                                                false)))]

                              ["frac to-int" Int frac-to-int i.=]
                              ["frac to-deg" Deg frac-to-deg d.=]
                              )]
    ($_ seq
        <nullary>
        <unary>
        (test "frac encode|decode"
              (|> (do Monad<Meta>
                    [runtime-bytecode @runtime;generate
                     sampleI (@;generate (|> (#ls;Frac subject)
                                             (list) (#ls;Procedure "frac encode")
                                             (list) (#ls;Procedure "frac decode")))]
                    (@eval;eval sampleI))
                  (meta;run (init-compiler []))
                  (case> (^multi (#e;Success valueG)
                                 [(:! (Maybe Frac) valueG) (#;Some value)])
                         (f.= subject value)

                         _
                         false)))
        )))

(context: "Deg procedures"
  #seed +1021167468900
  [param (|> r;deg (r;filter (|>. (d.= .0) not)))
   special r;nat
   subject r;deg]
  (with-expansions [<nullary> (do-template [<name> <reference>]
                                [(test <name>
                                       (|> (do meta;Monad<Meta>
                                             [sampleI (@;generate (#ls;Procedure <name> (list)))]
                                             (@eval;eval sampleI))
                                           (meta;run (init-compiler []))
                                           (case> (#e;Success valueG)
                                                  (d.= <reference> (:! Deg valueG))

                                                  _
                                                  false)))]

                                ["deg min" d/bottom]
                                ["deg max" d/top]
                                )
                    <unary> (do-template [<name> <type> <prepare> <comp>]
                              [(test <name>
                                     (|> (do Monad<Meta>
                                           [runtime-bytecode @runtime;generate
                                            sampleI (@;generate (#ls;Procedure <name> (list (#ls;Deg subject))))]
                                           (@eval;eval sampleI))
                                         (meta;run (init-compiler []))
                                         (case> (#e;Success valueG)
                                                (<comp> (<prepare> subject) (:! <type> valueG))

                                                _
                                                false)))]

                              ["deg to-frac" Frac deg-to-frac f.=]
                              )
                    <binary> (do-template [<name> <reference> <outputT> <comp>]
                               [(test <name>
                                      (|> (do Monad<Meta>
                                            [runtime-bytecode @runtime;generate
                                             sampleI (@;generate (#ls;Procedure <name>
                                                                                (list (#ls;Deg subject)
                                                                                      (#ls;Deg param))))]
                                            (@eval;eval sampleI))
                                          (meta;run (init-compiler []))
                                          (case> (#e;Success valueG)
                                                 (<comp> (<reference> param subject) (:! <outputT> valueG))

                                                 _
                                                 false)))]

                               ["deg +" d.+ Deg  d.=]
                               ["deg -" d.- Deg  d.=]
                               ["deg *" d.* Deg  d.=]
                               ["deg /" d./ Deg  d.=]
                               ["deg %" d.% Deg  d.=]
                               ["deg =" d.= Bool bool/=]
                               ["deg <" d.< Bool bool/=]
                               )
                    <special> (do-template [<name> <reference> <outputT> <comp>]
                                [(test <name>
                                       (|> (do Monad<Meta>
                                             [runtime-bytecode @runtime;generate
                                              sampleI (@;generate (#ls;Procedure <name>
                                                                                 (list (#ls;Deg subject)
                                                                                       (#ls;Nat special))))]
                                             (@eval;eval sampleI))
                                           (meta;run (init-compiler []))
                                           (case> (#e;Success valueG)
                                                  (<comp> (<reference> special subject) (:! <outputT> valueG))

                                                  _
                                                  false)))]

                                ["deg scale"      d.scale      Deg d.=]
                                ["deg reciprocal" d.reciprocal Deg d.=]
                                )]
    ($_ seq
        <nullary>
        <unary>
        <binary>
        <special>
        )))
