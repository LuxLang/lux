(;module:
  lux
  (lux [io]
       (control monad
                pipe)
       (data ["R" result]
             [product]
             (coll [list "L/" Functor<List>]))
       ["r" math/random "R/" Monad<Random>]
       [type "Type/" Eq<Type>]
       [macro #+ Monad<Lux>]
       test)
  (luxc ["&" base]
        (lang ["la" analysis])
        [analyser]
        (analyser ["@" struct]
                  ["@;" common]))
  (.. common))

(def: analyse
  &;Analyser
  (analyser;analyser (:!! [])))

(def: (flatten-tuple analysis)
  (-> la;Analysis (List la;Analysis))
  (case analysis
    (#la;Product left right)
    (#;Cons left (flatten-tuple right))

    _
    (list analysis)))

(test: "Tuples"
  [size (|> r;nat (:: @ map (|>. (n.% +10) (n.max +2))))
   primitives (r;list size gen-simple-primitive)]
  ($_ seq
      (assert "Can analyse tuple."
              (|> (@common;with-unknown-type
                    (@;analyse-product analyse (L/map product;right primitives)))
                  (macro;run init-compiler)
                  (case> (#R;Success [_type tupleA])
                         (and (Type/= (type;tuple (L/map product;left primitives))
                                      _type)
                              (n.= size (list;size (flatten-tuple tupleA))))

                         _
                         false))
              )))
