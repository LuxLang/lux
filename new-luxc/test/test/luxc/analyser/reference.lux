(;module:
  lux
  (lux [io]
       (control monad
                pipe)
       (data ["R" result])
       ["r" math/random "R/" Monad<Random>]
       [type "Type/" Eq<Type>]
       [macro #+ Monad<Lux>]
       test)
  (luxc ["&;" env]
        ["&;" module]
        (lang ["~" analysis])
        [analyser]
        (analyser ["@" reference]
                  ["@;" common]))
  (.. common))

(test: "References"
  [[ref-type _] gen-primitive
   module-name (r;text +5)
   scope-name (r;text +5)
   var-name (r;text +5)]
  ($_ seq
      (assert "Can analyse relative reference."
              (|> (&env;with-scope scope-name
                    (&env;with-local [var-name ref-type]
                      (@common;with-unknown-type
                        (@;analyse-reference ["" var-name]))))
                  (macro;run init-compiler)
                  (case> (#R;Success [_type (#~;Relative idx)])
                         (Type/= ref-type _type)

                         _
                         false)))
      (assert "Can analyse absolute reference."
              (|> (do Monad<Lux>
                    [_ (&module;create +0 module-name)
                     _ (&module;define [module-name var-name]
                                       [ref-type (list) (:! Void [])])]
                    (@common;with-unknown-type
                      (@;analyse-reference [module-name var-name])))
                  (macro;run init-compiler)
                  (case> (#R;Success [_type (#~;Absolute idx)])
                         (Type/= ref-type _type)

                         _
                         false)))
      ))
