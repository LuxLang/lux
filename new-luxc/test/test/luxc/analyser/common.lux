(;module:
  lux
  (lux ["R" math/random "R/" Monad<Random>]
       (macro [code])))

(def: compiler-version Text "0.6.0")

(def: init-compiler-info
  Compiler-Info
  {#;compiler-version compiler-version
   #;compiler-mode    #;Build})

(def: init-type-context
  Type-Context
  {#;ex-counter +0
   #;var-counter +0
   #;var-bindings (list)})

(def: #export init-compiler
  Compiler
  {#;info            init-compiler-info
   #;source          [dummy-cursor ""]
   #;cursor          dummy-cursor
   #;modules         (list)
   #;scopes          (list)
   #;type-context    init-type-context
   #;expected        #;None
   #;seed            +0
   #;scope-type-vars (list)
   #;host            (:! Void [])})

(def: gen-unit
  (R;Random Code)
  (R/wrap (' [])))

(def: #export gen-simple-primitive
  (R;Random [Type Code])
  (with-expansions
    [<generators> (do-template [<type> <code-wrapper> <value-gen>]
                    [(R;seq (R/wrap <type>) (R/map <code-wrapper> <value-gen>))]

                    [Unit code;tuple (R;list +0 gen-unit)]
                    [Bool code;bool  R;bool]
                    [Nat  code;nat   R;nat]
                    [Int  code;int   R;int]
                    [Deg  code;deg   R;deg]
                    [Real code;real  R;real]
                    [Char code;char  R;char]
                    [Text code;text  (R;text +5)]
                    )]
    ($_ R;either
        <generators>
        )))
