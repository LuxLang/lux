(;module:
  lux
  (lux (control pipe)
       ["r" math/random "r/" Monad<Random>]
       (data ["R" result])
       [macro]
       (macro [code]))
  (luxc ["&" base]
        [analyser])
  (test/luxc common))

(def: gen-unit
  (r;Random Code)
  (r/wrap (' [])))

(def: #export gen-primitive
  (r;Random [Type Code])
  (with-expansions
    [<generators> (do-template [<type> <code-wrapper> <value-gen>]
                    [(r;seq (r/wrap <type>) (r/map <code-wrapper> <value-gen>))]

                    [Unit code;tuple (r;list +0 gen-unit)]
                    [Bool code;bool  r;bool]
                    [Nat  code;nat   r;nat]
                    [Int  code;int   r;int]
                    [Deg  code;deg   r;deg]
                    [Frac code;frac  r;frac]
                    [Text code;text  (r;text +5)]
                    )]
    ($_ r;either
        <generators>
        )))

(def: #export analyse
  &;Analyser
  (analyser;analyser (:!! [])))

(do-template [<name> <on-success> <on-failure>]
  [(def: #export (<name> analysis)
     (All [a] (-> (Lux a) Bool))
     (|> analysis
         (macro;run (init-compiler []))
         (case> (#R;Success _)
                <on-success>

                (#R;Error error)
                <on-failure>)))]

  [check-success true false]
  [check-failure false true]
  )
