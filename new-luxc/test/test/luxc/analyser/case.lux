(;module:
  lux
  (lux [io]
       (control [monad #+ do]
                pipe)
       (data [bool "B/" Eq<Bool>]
             ["R" result]
             [product]
             [text "T/" Eq<Text>]
             text/format
             (coll [list "L/" Monad<List>]
                   ["S" set]))
       ["r" math/random "r/" Monad<Random>]
       [type "Type/" Eq<Type>]
       (type ["tc" check])
       [macro #+ Monad<Lux>]
       (macro [code])
       test)
  (luxc ["&" base]
        (lang ["la" analysis])
        [analyser]
        (analyser ["@" case]
                  ["@;" common])
        ["@;" module])
  (.. common)
  (test/luxc common))

(def: (exhaustive-weaving branchings)
  (-> (List (List Code)) (List (List Code)))
  (case branchings
    #;Nil
    #;Nil

    (#;Cons head+ #;Nil)
    (L/map (|>. list) head+)

    (#;Cons head+ tail++)
    (do list;Monad<List>
      [tail+ (exhaustive-weaving tail++)
       head head+]
      (wrap (#;Cons head tail+)))))

(def: (exhaustive-branches-for allow-literals? variantTC inputC)
  (-> Bool (List [Code Code]) Code (r;Random (List Code)))
  (case inputC
    [_ (#;Bool _)]
    (r/wrap (list (' true) (' false)))

    (^template [<tag> <gen> <wrapper>]
      [_ (<tag> _)]
      (if allow-literals?
        (do r;Monad<Random>
          [?sample (r;maybe <gen>)]
          (case ?sample
            (#;Some sample)
            (do @
              [else (exhaustive-branches-for allow-literals? variantTC inputC)]
              (wrap (list& (<wrapper> sample) else)))

            #;None
            (wrap (list (' _)))))
        (r/wrap (list (' _)))))
    ([#;Nat  r;nat       code;nat]
     [#;Int  r;int       code;int]
     [#;Deg  r;deg       code;deg]
     [#;Frac r;frac      code;frac]
     [#;Text (r;text +5) code;text])
    
    (^ [_ (#;Tuple (list))])
    (r/wrap (list (' [])))

    (^ [_ (#;Record (list))])
    (r/wrap (list (' {})))

    [_ (#;Tuple members)]
    (do r;Monad<Random>
      [member-wise-patterns (monad;map @ (exhaustive-branches-for allow-literals? variantTC) members)]
      (wrap (|> member-wise-patterns
                exhaustive-weaving
                (L/map code;tuple))))

    [_ (#;Record kvs)]
    (do r;Monad<Random>
      [#let [ks (L/map product;left kvs)
             vs (L/map product;right kvs)]
       member-wise-patterns (monad;map @ (exhaustive-branches-for allow-literals? variantTC) vs)]
      (wrap (|> member-wise-patterns
                exhaustive-weaving
                (L/map (|>. (list;zip2 ks) code;record)))))

    (^ [_ (#;Form (list [_ (#;Tag _)] _))])
    (do r;Monad<Random>
      [bundles (monad;map @
                          (function [[_tag _code]]
                            (do @
                              [v-branches (exhaustive-branches-for allow-literals? variantTC _code)]
                              (wrap (L/map (function [pattern] (` ((~ _tag) (~ pattern))))
                                           v-branches))))
                          variantTC)]
      (wrap (L/join bundles)))

    _
    (r/wrap (list))
    ))

(def: (gen-input variant-tags record-tags primitivesC)
  (-> (List Code) (List Code) (List Code) (r;Random Code))
  (r;rec
   (function [gen-input]
     ($_ r;either
         (r/map product;right gen-primitive)
         (do r;Monad<Random>
           [choice (|> r;nat (:: @ map (n.% (list;size variant-tags))))
            #let [choiceT (assume (list;nth choice variant-tags))
                  choiceC (assume (list;nth choice primitivesC))]]
           (wrap (` ((~ choiceT) (~ choiceC)))))
         (do r;Monad<Random>
           [size (|> r;nat (:: @ map (n.% +3)))
            elems (r;list size gen-input)]
           (wrap (code;tuple elems)))
         (r/wrap (code;record (list;zip2 record-tags primitivesC)))
         ))))

(def: (branch body pattern)
  (-> Code Code [Code Code])
  [pattern body])

(context: "Pattern-matching."
  ## #seed +9253409297339902486
  ## #seed +3793366152923578600
  #seed +5004137551292836565
  [module-name (r;text +5)
   variant-name (r;text +5)
   record-name (|> (r;text +5) (r;filter (|>. (T/= variant-name) not)))
   size (|> r;nat (:: @ map (|>. (n.% +10) (n.max +2))))
   variant-tags (|> (r;set text;Hash<Text> size (r;text +5)) (:: @ map S;to-list))
   record-tags (|> (r;set text;Hash<Text> size (r;text +5)) (:: @ map S;to-list))
   primitivesTC (r;list size gen-primitive)
   #let [primitivesT (L/map product;left primitivesTC)
         primitivesC (L/map product;right primitivesTC)
         variant-tags+ (L/map (|>. [module-name] code;tag) variant-tags)
         record-tags+ (L/map (|>. [module-name] code;tag) record-tags)
         variantTC (list;zip2 variant-tags+ primitivesC)]
   inputC (gen-input variant-tags+ record-tags+ primitivesC)
   [outputT outputC] gen-primitive
   [heterogeneousT heterogeneousC] (|> gen-primitive
                                       (r;filter (|>. product;left (tc;checks? outputT) not)))
   exhaustive-patterns (exhaustive-branches-for true variantTC inputC)
   redundant-patterns (exhaustive-branches-for false variantTC inputC)
   redundancy-idx (|> r;nat (:: @ map (n.% (list;size redundant-patterns))))
   heterogeneous-idx (|> r;nat (:: @ map (n.% (list;size exhaustive-patterns))))
   #let [exhaustive-branchesC (L/map (branch outputC)
                                     exhaustive-patterns)
         non-exhaustive-branchesC (list;take (n.dec (list;size exhaustive-branchesC))
                                             exhaustive-branchesC)
         redundant-branchesC (<| (L/map (branch outputC))
                                 list;concat
                                 (list (list;take redundancy-idx redundant-patterns)
                                       (list (assume (list;nth redundancy-idx redundant-patterns)))
                                       (list;drop redundancy-idx redundant-patterns)))
         heterogeneous-branchesC (list;concat (list (list;take heterogeneous-idx exhaustive-branchesC)
                                                    (list (let [[_pattern _body] (assume (list;nth heterogeneous-idx exhaustive-branchesC))]
                                                            [_pattern heterogeneousC]))
                                                    (list;drop (n.inc heterogeneous-idx) exhaustive-branchesC)))
         ]]
  ($_ seq
      (test "Will reject empty pattern-matching (no branches)."
            (|> (&;with-scope
                  (&;with-expected-type outputT
                    (@;analyse-case analyse inputC (list))))
                check-failure))
      (test "Can analyse exhaustive pattern-matching."
            (|> (@module;with-module +0 module-name
                  (do Monad<Lux>
                    [_ (@module;declare-tags variant-tags false
                                             (#;Named [module-name variant-name]
                                                      (type;variant primitivesT)))
                     _ (@module;declare-tags record-tags false
                                             (#;Named [module-name record-name]
                                                      (type;tuple primitivesT)))]
                    (&;with-scope
                      (&;with-expected-type outputT
                        (@;analyse-case analyse inputC exhaustive-branchesC)))))
                check-success))
      (test "Will reject non-exhaustive pattern-matching."
            (|> (@module;with-module +0 module-name
                  (do Monad<Lux>
                    [_ (@module;declare-tags variant-tags false
                                             (#;Named [module-name variant-name]
                                                      (type;variant primitivesT)))
                     _ (@module;declare-tags record-tags false
                                             (#;Named [module-name record-name]
                                                      (type;tuple primitivesT)))]
                    (&;with-scope
                      (&;with-expected-type outputT
                        (@;analyse-case analyse inputC non-exhaustive-branchesC)))))
                check-failure))
      (test "Will reject redundant pattern-matching."
            (|> (@module;with-module +0 module-name
                  (do Monad<Lux>
                    [_ (@module;declare-tags variant-tags false
                                             (#;Named [module-name variant-name]
                                                      (type;variant primitivesT)))
                     _ (@module;declare-tags record-tags false
                                             (#;Named [module-name record-name]
                                                      (type;tuple primitivesT)))]
                    (&;with-scope
                      (&;with-expected-type outputT
                        (@;analyse-case analyse inputC redundant-branchesC)))))
                check-failure))
      (test "Will reject pattern-matching if the bodies of the branches do not all have the same type."
            (|> (@module;with-module +0 module-name
                  (do Monad<Lux>
                    [_ (@module;declare-tags variant-tags false
                                             (#;Named [module-name variant-name]
                                                      (type;variant primitivesT)))
                     _ (@module;declare-tags record-tags false
                                             (#;Named [module-name record-name]
                                                      (type;tuple primitivesT)))]
                    (&;with-scope
                      (&;with-expected-type outputT
                        (@;analyse-case analyse inputC heterogeneous-branchesC)))))
                check-failure))
      ))
