(;module:
  lux
  (lux [io]
       (control monad
                pipe)
       (data [bool "B/" Eq<Bool>]
             ["R" result]
             [product]
             [text]
             text/format
             (coll [list "L/" Functor<List>]
                   ["S" set]))
       ["r" math/random "r/" Monad<Random>]
       [type "Type/" Eq<Type>]
       (type ["TC" check])
       [macro #+ Monad<Lux>]
       (macro [code])
       test)
  (luxc ["&" base]
        (lang ["la" analysis])
        [analyser]
        (analyser ["@" structure]
                  ["@;" common])
        ["@;" module])
  (.. common)
  (test/luxc common))

(def: (flatten-tuple analysis)
  (-> la;Analysis (List la;Analysis))
  (case analysis
    (#la;Product left right)
    (#;Cons left (flatten-tuple right))

    _
    (list analysis)))

(def: (flatten-variant analysis)
  (-> la;Analysis (Maybe [Nat Bool la;Analysis]))
  (case analysis
    (#la;Sum variant)
    (loop [so-far +0
           variantA variant]
      (case variantA
        (#;Left valueA)
        (case valueA
          (#la;Sum choice)
          (recur (n.inc so-far) choice)

          _
          (#;Some [so-far false valueA]))
        
        (#;Right valueA)
        (#;Some [(n.inc so-far) true valueA])))

    _
    #;None))

(context: "Sums"
  [size (|> r;nat (:: @ map (|>. (n.% +10) (n.max +2))))
   choice (|> r;nat (:: @ map (n.% size)))
   primitives (r;list size gen-primitive)
   +choice (|> r;nat (:: @ map (n.% (n.inc size))))
   [_ +valueC] gen-primitive
   #let [variantT (type;variant (L/map product;left primitives))
         [valueT valueC] (assume (list;nth choice primitives))
         +size (n.inc size)
         +primitives (list;concat (list (list;take choice primitives)
                                        (list [(#;Bound +1) +valueC])
                                        (list;drop choice primitives)))
         [+valueT +valueC] (assume (list;nth +choice +primitives))
         +variantT (type;variant (L/map product;left +primitives))]]
  ($_ seq
      (test "Can analyse sum."
            (|> (&;with-scope
                  (&;with-expected-type variantT
                    (@;analyse-sum analyse choice valueC)))
                (macro;run (init-compiler []))
                (case> (^multi (#R;Success [_ sumA])
                               [(flatten-variant sumA)
                                (#;Some [tag last? valueA])])
                       (and (n.= tag choice)
                            (B/= last? (n.= (n.dec size) choice)))

                       _
                       false)))
      (test "Can analyse sum through bound type-vars."
            (|> (&;with-scope
                  (@common;with-var
                    (function [[var-id varT]]
                      (do Monad<Lux>
                        [_ (&;within-type-env
                            (TC;check varT variantT))]
                        (&;with-expected-type varT
                          (@;analyse-sum analyse choice valueC))))))
                (macro;run (init-compiler []))
                (case> (^multi (#R;Success [_ sumA])
                               [(flatten-variant sumA)
                                (#;Some [tag last? valueA])])
                       (and (n.= tag choice)
                            (B/= last? (n.= (n.dec size) choice)))

                       _
                       false)))
      (test "Cannot analyse sum through unbound type-vars."
            (|> (&;with-scope
                  (@common;with-var
                    (function [[var-id varT]]
                      (&;with-expected-type varT
                        (@;analyse-sum analyse choice valueC)))))
                (macro;run (init-compiler []))
                (case> (#R;Success _)
                       false

                       _
                       true)))
      (test "Can analyse sum through existential quantification."
            (|> (&;with-scope
                  (&;with-expected-type (type;ex-q +1 +variantT)
                    (@;analyse-sum analyse +choice +valueC)))
                (macro;run (init-compiler []))
                (case> (#R;Success _)
                       true

                       (#R;Error error)
                       false)))
      (test "Can analyse sum through universal quantification."
            (|> (&;with-scope
                  (&;with-expected-type (type;univ-q +1 +variantT)
                    (@;analyse-sum analyse +choice +valueC)))
                (macro;run (init-compiler []))
                (case> (#R;Success _)
                       (not (n.= choice +choice))

                       (#R;Error error)
                       (n.= choice +choice))))
      ))

(context: "Products"
  [size (|> r;nat (:: @ map (|>. (n.% +10) (n.max +2))))
   primitives (r;list size gen-primitive)
   choice (|> r;nat (:: @ map (n.% size)))
   [_ +valueC] gen-primitive
   #let [[singletonT singletonC] (|> primitives (list;nth choice) assume)
         +primitives (list;concat (list (list;take choice primitives)
                                        (list [(#;Bound +1) +valueC])
                                        (list;drop choice primitives)))
         +tupleT (type;tuple (L/map product;left +primitives))]]
  ($_ seq
      (test "Can analyse product."
            (|> (&;with-expected-type (type;tuple (L/map product;left primitives))
                  (@;analyse-product analyse (L/map product;right primitives)))
                (macro;run (init-compiler []))
                (case> (#R;Success tupleA)
                       (n.= size (list;size (flatten-tuple tupleA)))

                       _
                       false)))
      (test "Can infer product."
            (|> (@common;with-unknown-type
                  (@;analyse-product analyse (L/map product;right primitives)))
                (macro;run (init-compiler []))
                (case> (#R;Success [_type tupleA])
                       (and (Type/= (type;tuple (L/map product;left primitives))
                                    _type)
                            (n.= size (list;size (flatten-tuple tupleA))))

                       _
                       false)))
      (test "Can analyse pseudo-product (singleton tuple)"
            (|> (&;with-expected-type singletonT
                  (analyse (` [(~ singletonC)])))
                (macro;run (init-compiler []))
                (case> (#R;Success singletonA)
                       true

                       (#R;Error error)
                       false)))
      (test "Can analyse product through bound type-vars."
            (|> (&;with-scope
                  (@common;with-var
                    (function [[var-id varT]]
                      (do Monad<Lux>
                        [_ (&;within-type-env
                            (TC;check varT (type;tuple (L/map product;left primitives))))]
                        (&;with-expected-type varT
                          (@;analyse-product analyse (L/map product;right primitives)))))))
                (macro;run (init-compiler []))
                (case> (#R;Success [_ tupleA])
                       (n.= size (list;size (flatten-tuple tupleA)))

                       _
                       false)))
      (test "Can analyse product through existential quantification."
            (|> (&;with-scope
                  (&;with-expected-type (type;ex-q +1 +tupleT)
                    (@;analyse-product analyse (L/map product;right +primitives))))
                (macro;run (init-compiler []))
                (case> (#R;Success _)
                       true

                       (#R;Error error)
                       false)))
      (test "Cannot analyse product through universal quantification."
            (|> (&;with-scope
                  (&;with-expected-type (type;univ-q +1 +tupleT)
                    (@;analyse-product analyse (L/map product;right +primitives))))
                (macro;run (init-compiler []))
                (case> (#R;Success _)
                       false

                       (#R;Error error)
                       true)))
      ))

(def: (check-variant-inference variantT choice size analysis)
  (-> Type Nat Nat (Lux [Module Scope Type la;Analysis]) Bool)
  (|> analysis
      (macro;run (init-compiler []))
      (case> (^multi (#R;Success [_ _ sumT sumA])
                     [(flatten-variant sumA)
                      (#;Some [tag last? valueA])])
             (and (Type/= variantT sumT)
                  (n.= tag choice)
                  (B/= last? (n.= (n.dec size) choice)))

             _
             false)))

(def: (check-record-inference tupleT size analysis)
  (-> Type Nat (Lux [Module Scope Type la;Analysis]) Bool)
  (|> analysis
      (macro;run (init-compiler []))
      (case> (^multi (#R;Success [_ _ productT productA])
                     [(flatten-tuple productA)
                      membersA])
             (and (Type/= tupleT productT)
                  (n.= size (list;size membersA)))

             _
             false)))

(context: "Tagged Sums"
  [size (|> r;nat (:: @ map (|>. (n.% +10) (n.max +2))))
   tags (|> (r;set text;Hash<Text> size (r;text +5)) (:: @ map S;to-list))
   choice (|> r;nat (:: @ map (n.% size)))
   other-choice (|> r;nat (:: @ map (n.% size)) (r;filter (|>. (n.= choice) not)))
   primitives (r;list size gen-primitive)
   module-name (r;text +5)
   type-name (r;text +5)
   #let [varT (#;Bound +1)
         primitivesT (L/map product;left primitives)
         [choiceT choiceC] (assume (list;nth choice primitives))
         [other-choiceT other-choiceC] (assume (list;nth other-choice primitives))
         variantT (type;variant primitivesT)
         namedT (#;Named [module-name type-name] variantT)
         polyT (|> (type;variant (list;concat (list (list;take choice primitivesT)
                                                    (list varT)
                                                    (list;drop (n.inc choice) primitivesT))))
                   (type;univ-q +1))
         named-polyT (#;Named [module-name type-name] polyT)
         choice-tag (assume (list;nth choice tags))
         other-choice-tag (assume (list;nth other-choice tags))]]
  ($_ seq
      (test "Can infer tagged sum."
            (|> (@module;with-module +0 module-name
                  (do Monad<Lux>
                    [_ (@module;declare-tags tags false namedT)]
                    (&;with-scope
                      (@common;with-unknown-type
                        (@;analyse-tagged-sum analyse [module-name choice-tag] choiceC)))))
                (check-variant-inference variantT choice size)))
      (test "Tagged sums specialize when type-vars get bound."
            (|> (@module;with-module +0 module-name
                  (do Monad<Lux>
                    [_ (@module;declare-tags tags false named-polyT)]
                    (&;with-scope
                      (@common;with-unknown-type
                        (@;analyse-tagged-sum analyse [module-name choice-tag] choiceC)))))
                (check-variant-inference variantT choice size)))
      (test "Tagged sum inference retains universal quantification when type-vars are not bound."
            (|> (@module;with-module +0 module-name
                  (do Monad<Lux>
                    [_ (@module;declare-tags tags false named-polyT)]
                    (&;with-scope
                      (@common;with-unknown-type
                        (@;analyse-tagged-sum analyse [module-name other-choice-tag] other-choiceC)))))
                (check-variant-inference polyT other-choice size)))
      (test "Can specialize generic tagged sums."
            (|> (@module;with-module +0 module-name
                  (do Monad<Lux>
                    [_ (@module;declare-tags tags false named-polyT)]
                    (&;with-scope
                      (&;with-expected-type variantT
                        (@;analyse-tagged-sum analyse [module-name other-choice-tag] other-choiceC)))))
                (macro;run (init-compiler []))
                (case> (^multi (#R;Success [_ _ sumA])
                               [(flatten-variant sumA)
                                (#;Some [tag last? valueA])])
                       (and (n.= tag other-choice)
                            (B/= last? (n.= (n.dec size) other-choice)))

                       _
                       false)))
      ))

(context: "Records"
  [size (|> r;nat (:: @ map (|>. (n.% +10) (n.max +2))))
   tags (|> (r;set text;Hash<Text> size (r;text +5)) (:: @ map S;to-list))
   primitives (r;list size gen-primitive)
   module-name (r;text +5)
   type-name (r;text +5)
   choice (|> r;nat (:: @ map (n.% size)))
   #let [varT (#;Bound +1)
         tagsC (L/map (|>. [module-name] code;tag) tags)
         primitivesT (L/map product;left primitives)
         primitivesC (L/map product;right primitives)
         tupleT (type;tuple primitivesT)
         namedT (#;Named [module-name type-name] tupleT)
         recordC (list;zip2 tagsC primitivesC)
         polyT (|> (type;tuple (list;concat (list (list;take choice primitivesT)
                                                  (list varT)
                                                  (list;drop (n.inc choice) primitivesT))))
                   (type;univ-q +1))
         named-polyT (#;Named [module-name type-name] polyT)]]
  ($_ seq
      (test "Can infer record."
            (|> (@module;with-module +0 module-name
                  (do Monad<Lux>
                    [_ (@module;declare-tags tags false namedT)]
                    (&;with-scope
                      (@common;with-unknown-type
                        (@;analyse-record analyse recordC)))))
                (check-record-inference tupleT size)))
      (test "Records specialize when type-vars get bound."
            (|> (@module;with-module +0 module-name
                  (do Monad<Lux>
                    [_ (@module;declare-tags tags false named-polyT)]
                    (&;with-scope
                      (@common;with-unknown-type
                        (@;analyse-record analyse recordC)))))
                (check-record-inference tupleT size)))
      (test "Can specialize generic records."
            (|> (@module;with-module +0 module-name
                  (do Monad<Lux>
                    [_ (@module;declare-tags tags false named-polyT)]
                    (&;with-scope
                      (&;with-expected-type tupleT
                        (@;analyse-record analyse recordC)))))
                (macro;run (init-compiler []))
                (case> (^multi (#R;Success [_ _ productA])
                               [(flatten-tuple productA)
                                membersA])
                       (n.= size (list;size membersA))

                       _
                       false)))
      ))
