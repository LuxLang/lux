(;module:
  lux
  (lux [io]
       (control monad
                pipe)
       (data [bool "B/" Eq<Bool>]
             [char "C/" Eq<Char>]
             [text "T/" Eq<Text>]
             (text format
                   ["l" lexer])
             [number]
             ["E" error]
             [product]
             (coll [list "L/" Functor<List> Fold<List>]))
       ["R" math/random "R/" Monad<Random>]
       [type "Type/" Eq<Type>]
       [macro #+ Monad<Lux>]
       (macro [code])
       test)
  (luxc ["&" base]
        ["&;" env]
        ["&;" module]
        (lang ["~" analysis])
        [analyser]
        (analyser ["@" primitive]
                  ["@;" common]))
  (.. common))

(test: "Simple primitives"
  [%bool% R;bool
   %nat% R;nat
   %int% R;int
   %deg% R;deg
   %real% R;real
   %char% R;char
   %text% (R;text +5)]
  (with-expansions
    [<primitives> (do-template [<desc> <type> <tag> <value> <analyser>]
                    [(assert (format "Can analyse " <desc> ".")
                             (|> (@common;with-unknown-type
                                   (<analyser> <value>))
                                 (macro;run init-compiler)
                                 (case> (#E;Success [_type (<tag> value)])
                                        (and (Type/= <type> _type)
                                             (is <value> value))

                                        _
                                        false))
                             )]

                    ["unit" Unit #~;Unit []     (function [value] @;analyse-unit)]
                    ["bool" Bool #~;Bool %bool% @;analyse-bool]
                    ["nat"  Nat  #~;Nat  %nat%  @;analyse-nat]
                    ["int"  Int  #~;Int  %int%  @;analyse-int]
                    ["deg"  Deg  #~;Deg  %deg%  @;analyse-deg]
                    ["real" Real #~;Real %real% @;analyse-real]
                    ["char" Char #~;Char %char% @;analyse-char]
                    ["text" Text #~;Text %text% @;analyse-text]
                    )]
    ($_ seq
        <primitives>)))
