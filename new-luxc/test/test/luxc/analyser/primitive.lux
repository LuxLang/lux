(;module:
  lux
  (lux [io]
       (control [monad #+ do]
                pipe)
       (data [bool "B/" Eq<Bool>]
             [text "T/" Eq<Text>]
             (text format
                   ["l" lexer])
             [number]
             ["e" error]
             [product]
             (coll [list "L/" Functor<List> Fold<List>]))
       ["r" math/random]
       [meta #+ Monad<Meta>]
       (meta [code]
             [type "type/" Eq<Type>])
       test)
  (luxc ["&" base]
        ["&;" module]
        (lang ["~" analysis])
        [analyser]
        (analyser ["@" primitive]
                  ["@;" common]))
  (.. common)
  (test/luxc common))

(context: "Primitives"
  (<| (times +100)
      (do @
        [%bool% r;bool
         %nat% r;nat
         %int% r;int
         %deg% r;deg
         %frac% r;frac
         %text% (r;text +5)]
        (`` ($_ seq
                (test "Can analyse unit."
                      (|> (@common;with-unknown-type
                            @;analyse-unit)
                          (meta;run (init-compiler []))
                          (case> (^ (#e;Success [_type (^code [])]))
                                 (type/= Unit _type)

                                 _
                                 false))
                      )
                (~~ (do-template [<desc> <type> <tag> <value> <analyser>]
                      [(test (format "Can analyse " <desc> ".")
                             (|> (@common;with-unknown-type
                                   (<analyser> <value>))
                                 (meta;run (init-compiler []))
                                 (case> (#e;Success [_type [_ (<tag> value)]])
                                        (and (type/= <type> _type)
                                             (is <value> value))

                                        _
                                        false))
                             )]

                      ["bool" Bool #;Bool %bool% @;analyse-bool]
                      ["nat"  Nat  #;Nat  %nat%  @;analyse-nat]
                      ["int"  Int  #;Int  %int%  @;analyse-int]
                      ["deg"  Deg  #;Deg  %deg%  @;analyse-deg]
                      ["frac" Frac #;Frac %frac% @;analyse-frac]
                      ["text" Text #;Text %text% @;analyse-text]
                      )))))))
