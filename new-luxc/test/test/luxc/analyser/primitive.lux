(;module:
  lux
  (lux [io]
       (control [monad #+ do]
                pipe)
       (data [bool "B/" Eq<Bool>]
             [text "T/" Eq<Text>]
             (text format
                   ["l" lexer])
             [number]
             ["R" result]
             [product]
             (coll [list "L/" Functor<List> Fold<List>]))
       ["r" math/random "R/" Monad<Random>]
       [type "Type/" Eq<Type>]
       [macro #+ Monad<Lux>]
       (macro [code])
       test)
  (luxc ["&" base]
        ["&;" module]
        (lang ["~" analysis])
        [analyser]
        (analyser ["@" primitive]
                  ["@;" common]))
  (.. common)
  (test/luxc common))

(context: "Primitives"
  [%bool% r;bool
   %nat% r;nat
   %int% r;int
   %deg% r;deg
   %frac% r;frac
   %text% (r;text +5)]
  (with-expansions
    [<tests> (do-template [<desc> <type> <tag> <value> <analyser>]
               [(test (format "Can analyse " <desc> ".")
                      (|> (@common;with-unknown-type
                            (<analyser> <value>))
                          (macro;run (init-compiler []))
                          (case> (#R;Success [_type (<tag> value)])
                                 (and (Type/= <type> _type)
                                      (is <value> value))

                                 _
                                 false))
                      )]

               ["unit" Unit #~;Unit []     (function [value] @;analyse-unit)]
               ["bool" Bool #~;Bool %bool% @;analyse-bool]
               ["nat"  Nat  #~;Nat  %nat%  @;analyse-nat]
               ["int"  Int  #~;Int  %int%  @;analyse-int]
               ["deg"  Deg  #~;Deg  %deg%  @;analyse-deg]
               ["frac" Frac #~;Frac %frac% @;analyse-frac]
               ["text" Text #~;Text %text% @;analyse-text]
               )]
    ($_ seq
        <tests>)))
