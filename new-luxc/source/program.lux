(;module:
  lux
  (lux (control monad)
       [io #- run]
       [cli #+ program: CLI Monad<CLI>])
  (luxc ["&" base]
        ["&;" parser]
        ["&;" compiler]
        (module (descriptor ["&;" type]))
        ))

(type: Compilation
  {#mode &;Mode
   #program &;Path
   #target &;Path})

(def: (marker tokens)
  (-> (List Text) (CLI Unit))
  (cli;after (cli;option tokens)
             (:: Monad<CLI> wrap [])))

(def: (tagged tags)
  (-> (List Text) (CLI Text))
  (cli;after (cli;option tags)
             cli;any))

(def: mode^
  (CLI &;Mode)
  ($_ cli;alt
      (marker (list "release"))
      (marker (list "debug"))))

(def: compilation^
  (CLI Compilation)
  ($_ cli;seq
      mode^
      (tagged (list "-p" "--program"))
      (tagged (list "-t" "--target"))))

(program: ([command (cli;opt compilation^)]
           [sources (cli;some (tagged (list "-s" "--source")))])
  (case command
    #;None
    (io (log! "Hello, REPL!"))

    (#;Some [mode program target])
    (&compiler;compile-program mode program target sources)))
