(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." io]
    [parser
     [cli (#+ program:)]]]
   [math
    ["r" random]]]
  [spec
   ["." compositor (#+ Runner)
    [generation
     ["." primitive]
     ["." structure]]]]
  {1
   ["." /]}
  ## [test
  ##  [luxc
  ##   [lang
  ##    [translation
  ##     ## ["_.T" function]
  ##     ## ["_.T" reference]
  ##     ## ["_.T" case]
  ##     ## ["_.T" common]
  ##     ## ["_.T" jvm]
  ##     ## ["_.T" js]
  ##     ## ["_.T" lua]
  ##     ## ["_.T" ruby]
  ##     ## ["_.T" python]
  ##     ## ["_.T" r]
  ##     ## ["_.T" scheme]
  ##     ## ["_.T" common-lisp]
  ##     ## ["_.T" php]
  ##     ]]]]
  )

(def: (test runner)
  (-> Runner Test)
  ($_ _.and
      (primitive.spec runner)
      (structure.spec runner)
      ))

(program: args
  (<| io.io
      _.run!
      (_.times 100)
      (do r.monad
        [_ (wrap [])
         #let [platform (io.run /.jvm)]])
      (..test (compositor.runner platform
                                 /.bundle
                                 /.expander
                                 /.program))))
