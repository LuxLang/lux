(;module:
  lux
  (lux (control [monad #+ do])
       (data text/format)
       [meta "meta/" Monad<Meta>])
  (luxc ["&" base]
        (lang ["ls" synthesis])
        (generator [";G" common]
                   [";G" function]
                   (host ["$" jvm]
                         (jvm ["$t" type]
                              ["$i" inst])))))

(def: #export (generate-captured variable)
  (-> ls;Variable (Meta $;Inst))
  (do meta;Monad<Meta>
    [function-class commonG;function]
    (wrap (|>. ($i;ALOAD +0)
               ($i;GETFIELD function-class
                            (|> variable i.inc (i.* -1) int-to-nat functionG;captured)
                            commonG;$Object)))))

(def: #export (generate-variable variable)
  (-> ls;Variable (Meta $;Inst))
  (meta/wrap ($i;ALOAD (int-to-nat variable))))

(def: #export (generate-definition [def-module def-name])
  (-> Ident (Meta $;Inst))
  (let [bytecode-name (format def-module "/" (&;normalize-name def-name))]
    (meta/wrap ($i;GETSTATIC bytecode-name commonG;value-field commonG;$Object))))
