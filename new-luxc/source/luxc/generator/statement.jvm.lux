(;module:
  lux
  (lux (control monad)
       [io #- run]
       (data [text "T/" Eq<Text>]
             text/format)
       [macro #+ Monad<Lux>])
  (luxc ["&" base]
        ["&;" module]
        ["&;" scope]
        (compiler ["&;" expr])))

(def: #export (compile-def def-name def-value def-meta)
  (-> Text Code Code (Lux Unit))
  (do Monad<Lux>
    [=def-value (&expr;compile def-value)
     =def-meta (&expr;compile def-meta)]
    (undefined)))

(def: #export (compile-program prog-args prog-body)
  (-> Text Code (Lux Unit))
  (do Monad<Lux>
    [=prog-body (&scope;with-local [prog-args (type (List Text))]
                  (&expr;compile prog-body))]
    (undefined)))
