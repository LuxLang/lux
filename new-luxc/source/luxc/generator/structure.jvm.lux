
(;module:
  lux
  (lux (control monad)
       (data text/format
             (coll [list]))
       [macro #+ Monad<Lux> "Lux/" Monad<Lux>]
       [host #+ jvm-import do-to])
  (luxc ["&" base]
        (lang ["la" analysis]
              ["ls" synthesis])
        ["&;" analyser]
        ["&;" synthesizer]
        (generator ["&;" common]
                   (host ["$" jvm]
                         (jvm ["$t" type]
                              ["$d" def]
                              ["$i" inst])))))

(def: $Object $;Type ($t;class "java.lang.Object" (list)))

(def: #export (generate-tuple generate members)
  (-> (-> ls;Synthesis (Lux $;Inst)) (List ls;Synthesis) (Lux $;Inst))
  (do Monad<Lux>
    [#let [size (list;size members)]
     _ (&;assert "Cannot generate tuples with less than 2 elements."
                 (n.>= +2 size))
     membersI (|> members
                  list;enumerate
                  (mapM @ (function [[idx member]]
                            (do @
                              [memberI (generate member)]
                              (wrap (|>. $i;DUP
                                         ($i;int (nat-to-int idx))
                                         memberI
                                         $i;AASTORE)))))
                  (:: @ map $i;fuse))]
    (wrap (|>. ($i;array $Object size) membersI))))

(def: (flagI tail?)
  (-> Bool $;Inst)
  (if tail?
    ($i;string "")
    $i;NULL))

(def: #export (generate-variant generate tag tail? member)
  (-> (-> ls;Synthesis (Lux $;Inst)) Nat Bool ls;Synthesis (Lux $;Inst))
  (do Monad<Lux>
    [memberI (generate member)]
    (wrap (|>. ($i;int (nat-to-int tag))
               (flagI tail?)
               memberI
               ($i;INVOKESTATIC &common;runtime-class-name
                                "sum_make"
                                ($t;method (list $t;int $Object $Object)
                                           (#;Some ($t;array +1 $Object))
                                           (list))
                                false)))))
