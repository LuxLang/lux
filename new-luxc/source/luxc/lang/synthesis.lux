(;module:
  lux)

(def: #export Arity Nat)
(def: #export Register Nat)
(def: #export Variable Int)

(type: #export (Path' s)
  #UnitP
  (#BoolP Bool)
  (#NatP Nat)
  (#IntP Int)
  (#DegP Deg)
  (#FracP Frac)
  (#TextP Text)
  (#VariantP (Either Nat Nat) (Path' s))
  (#TupleP (Either Nat Nat) (Path' s))
  (#BindP Nat)
  (#AltP (Path' s) (Path' s))
  (#SeqP (Path' s) (Path' s))
  (#ExecP s))

(type: #export #rec Synthesis
  #Unit
  (#Bool Bool)
  (#Nat Nat)
  (#Int Int)
  (#Deg Deg)
  (#Frac Frac)
  (#Text Text)
  (#Variant Nat Bool Synthesis)
  (#Tuple (List Synthesis))
  (#Case Synthesis (Path' Synthesis))
  (#Function Arity (List Variable) Synthesis)
  (#Call (List Synthesis) Synthesis)
  (#Recur (List Synthesis))
  (#Procedure Text (List Synthesis))
  (#Variable Variable)
  (#Definition Ident)
  (#Let Register Synthesis Synthesis)
  (#If Synthesis Synthesis Synthesis)
  (#Loop Register (List Synthesis) Synthesis))

(type: #export Path (Path' Synthesis))
