(;module:
  lux)

(type: #export (Path' s)
  #PopP
  (#BindP Nat)
  (#BoolP Bool)
  (#NatP Nat)
  (#IntP Int)
  (#DegP Deg)
  (#RealP Real)
  (#CharP Char)
  (#TextP Text)
  (#VariantP (Either Nat Nat))
  (#TupleP (Either Nat Nat))
  (#AltP (Path' s) (Path' s))
  (#SeqP (Path' s) (Path' s))
  (#ExecP s))

(type: #export #rec Synthesis
  #Unit
  (#Bool Bool)
  (#Nat Nat)
  (#Int Int)
  (#Deg Deg)
  (#Real Real)
  (#Char Char)
  (#Text Text)
  (#Variant Nat Bool Synthesis)
  (#Tuple (List Synthesis))
  (#Case Synthesis (Path' Synthesis))
  (#Function Nat Scope Synthesis)
  (#Call Synthesis (List Synthesis))
  (#Recur Nat (List Synthesis))
  (#Procedure Text (List Synthesis))
  (#Relative Int)
  (#Absolute Ident)
  (#Let Nat Synthesis Synthesis)
  (#If Synthesis Synthesis Synthesis)
  (#Loop Nat (List Synthesis) Synthesis))

(type: #export Path (Path' Synthesis))
