(.module:
  lux
  (lux (control pipe)
       (data [number]
             text/format)
       [macro "meta/" Monad<Meta>])
  (luxc (lang (host [lua #+ Lua Expression Statement]))))

(def: #export translate-bool
  (-> Bool (Meta Expression))
  (|>> %b meta/wrap))

(def: #export translate-int
  (-> Int (Meta Expression))
  (|>> %i meta/wrap))

(def: #export translate-nat
  (-> Nat (Meta Expression))
  (|>> (:coerce Int) %i meta/wrap))

(def: #export translate-deg
  (-> Deg (Meta Expression))
  (|>> (:coerce Int) %i meta/wrap))

(def: #export translate-frac
  (-> Frac (Meta Expression))
  (|>> (cond> [(f/= number.positive-infinity)]
              [(new> "math.huge")]
              
              [(f/= number.negative-infinity)]
              [(new> "(-1 * math.huge)")]
              
              [(f/= number.not-a-number)]
              [(new> "(0/0)")]
              
              ## else
              [%f])
       meta/wrap))

(def: #export translate-text
  (-> Text (Meta Expression))
  (|>> %t meta/wrap))
