(.module:
  lux
  (lux (control [monad #+ do])
       (data [text]
             text/format
             (coll [list "list/" Functor<List>]))
       [macro])
  (luxc [lang]
        (lang ["ls" synthesis]
              (host [lua #+ Lua Expression Statement])))
  [//]
  (// [".T" reference]))

(def: #export (translate-loop translate offset initsS+ bodyS)
  (-> (-> ls.Synthesis (Meta Expression)) Nat (List ls.Synthesis) ls.Synthesis
      (Meta Expression))
  (do macro.Monad<Meta>
    [loop-name (:: @ map (|>> %code lang.normalize-name)
                   (macro.gensym "loop"))
     initsO+ (monad.map @ translate initsS+)
     bodyO (//.with-anchor [loop-name offset]
             (translate bodyS))
     #let [registersO+ (|> (list.n/range +0 (n/dec (list.size initsS+)))
                           (list/map (|>> (n/+ offset) referenceT.variable)))]
     _ (//.save (lua.function! loop-name registersO+
                               (lua.return! bodyO)))]
    (wrap (lua.apply loop-name initsO+))))

(def: #export (translate-recur translate argsS+)
  (-> (-> ls.Synthesis (Meta Expression)) (List ls.Synthesis)
      (Meta Expression))
  (do macro.Monad<Meta>
    [[loop-name offset] //.anchor
     argsO+ (monad.map @ translate argsS+)]
    (wrap (lua.apply loop-name argsO+))))
