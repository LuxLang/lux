(.module:
  lux
  (lux (control [monad #+ do]
                ["ex" exception #+ exception:]
                ["p" parser])
       (data ["e" error]
             [text]
             text/format
             (coll [list "list/" Functor<List>]
                   (dictionary ["dict" unordered #+ Dict])))
       [macro #+ with-gensyms]
       (macro [code]
              ["s" syntax #+ syntax:])
       [host])
  (luxc ["&" lang]
        (lang ["la" analysis]
              ["ls" synthesis]
              (host [lua #+ Lua Expression Statement])))
  [///]
  (/// [".T" runtime]
       [".T" case]
       [".T" function]
       [".T" loop]))

## [Types]
(type: #export Translator
  (-> ls.Synthesis (Meta Expression)))

(type: #export Proc
  (-> Translator (List ls.Synthesis) (Meta Expression)))

(type: #export Bundle
  (Dict Text Proc))

(syntax: (Vector {size s.nat} elemT)
  (wrap (list (` [(~+ (list.repeat size elemT))]))))

(type: #export Nullary (-> (Vector +0 Expression) Expression))
(type: #export Unary   (-> (Vector +1 Expression) Expression))
(type: #export Binary  (-> (Vector +2 Expression) Expression))
(type: #export Trinary (-> (Vector +3 Expression) Expression))
(type: #export Variadic (-> (List Expression) Expression))

## [Utils]
(def: #export (install name unnamed)
  (-> Text (-> Text Proc)
      (-> Bundle Bundle))
  (dict.put name (unnamed name)))

(def: #export (prefix prefix bundle)
  (-> Text Bundle Bundle)
  (|> bundle
      dict.entries
      (list/map (function (_ [key val]) [(format prefix " " key) val]))
      (dict.from-list text.Hash<Text>)))

(def: (wrong-arity proc expected actual)
  (-> Text Nat Nat Text)
  (format "Wrong number of arguments for " (%t proc) "\n"
          "Expected: " (|> expected .int %i) "\n"
          "  Actual: " (|> actual .int %i)))

(syntax: (arity: {name s.local-symbol} {arity s.nat})
  (with-gensyms [g_ g!proc g!name g!translate g!inputs]
    (do @
      [g!input+ (monad.seq @ (list.repeat arity (macro.gensym "input")))]
      (wrap (list (` (def: #export ((~ (code.local-symbol name)) (~ g!proc))
                       (-> (-> (..Vector (~ (code.nat arity)) Expression) Expression)
                           (-> Text ..Proc))
                       (function ((~ g_ ) (~ g!name))
                         (function ((~ g_ ) (~ g!translate) (~ g!inputs))
                           (case (~ g!inputs)
                             (^ (list (~+ g!input+)))
                             (do macro.Monad<Meta>
                               [(~+ (|> g!input+
                                        (list/map (function (_ g!input)
                                                    (list g!input (` ((~ g!translate) (~ g!input))))))
                                        list.concat))]
                               ((~' wrap) ((~ g!proc) [(~+ g!input+)])))

                             (~' _)
                             (macro.fail (wrong-arity (~ g!name) +1 (list.size (~ g!inputs))))))))))))))

(arity: nullary +0)
(arity: unary +1)
(arity: binary +2)
(arity: trinary +3)

(def: #export (variadic proc)
  (-> Variadic (-> Text Proc))
  (function (_ proc-name)
    (function (_ translate inputsS)
      (do macro.Monad<Meta>
        [inputsI (monad.map @ translate inputsS)]
        (wrap (proc inputsI))))))

## [Procedures]
## [[Lux]]
(def: (lux//is [leftO rightO])
  Binary
  (lua.= leftO rightO))

(def: (lux//if [testO thenO elseO])
  Trinary
  (caseT.translate-if testO thenO elseO))

(def: (lux//try riskyO)
  Unary
  (runtimeT.lux//try riskyO))

(exception: #export (Wrong-Syntax {message Text})
  message)

(def: #export (wrong-syntax procedure args)
  (-> Text (List ls.Synthesis) Text)
  (format "Procedure: " procedure "\n"
          "Arguments: " (%code (code.tuple args))))

(def: lux//loop
  (-> Text Proc)
  (function (_ proc-name)
    (function (_ translate inputsS)
      (case (s.run inputsS ($_ p.seq s.nat (s.tuple (p.many s.any)) s.any))
        (#e.Success [offset initsS+ bodyS])
        (loopT.translate-loop translate offset initsS+ bodyS)

        (#e.Error error)
        (&.throw Wrong-Syntax (wrong-syntax proc-name inputsS)))
      )))

(def: lux//recur
  (-> Text Proc)
  (function (_ proc-name)
    (function (_ translate inputsS)
      (loopT.translate-recur translate inputsS))))

## [[Bits]]
(do-template [<name> <op>]
  [(def: (<name> [subjectO paramO])
     Binary
     (<op> paramO subjectO))]

  [bit//and lua.bit-and]
  [bit//or  lua.bit-or]
  [bit//xor lua.bit-xor]
  )

(do-template [<name> <op>]
  [(def: (<name> [subjectO paramO])
     Binary
     (<op> paramO subjectO))]

  [bit//left-shift           lua.bit-shl]
  [bit//arithmetic-right-shift          lua.bit-shr]
  [bit//logical-right-shift  runtimeT.bit//logical-right-shift]
  )

## [[Arrays]]
(def: (array//new sizeO)
  Unary
  (runtimeT.array//new sizeO))

(def: (array//get [arrayO idxO])
  Binary
  (runtimeT.array//get arrayO idxO))

(def: (array//put [arrayO idxO elemO])
  Trinary
  (runtimeT.array//put arrayO idxO elemO))

(def: (array//remove [arrayO idxO])
  Binary
  (runtimeT.array//put arrayO idxO runtimeT.unit))

(def: array//size
  Unary
  lua.length)

## [[Numbers]]
(host.import: java/lang/Double
  (#static MIN_VALUE Double)
  (#static MAX_VALUE Double)
  (#static NaN Double)
  (#static POSITIVE_INFINITY Double)
  (#static NEGATIVE_INFINITY Double))

(do-template [<name> <const> <encode>]
  [(def: (<name> _)
     Nullary
     (<encode> <const>))]

  [frac//smallest          Double::MIN_VALUE            lua.float]
  [frac//min               (f/* -1.0 Double::MAX_VALUE) lua.float]
  [frac//max               Double::MAX_VALUE            lua.float]
  )

(do-template [<name> <expression>]
  [(def: (<name> _)
     Nullary
     <expression>)]

  [int//min "math.mininteger"]
  [int//max "math.maxinteger"]
  )

(do-template [<name> <op>]
  [(def: (<name> [subjectO paramO])
     Binary
     (<op> paramO subjectO))]

  [int//add        lua.+]
  [int//sub        lua.-]
  [int//mul        lua.*]
  [int//div        lua.//]
  [int//rem        lua.%]
  )

(do-template [<name> <op>]
  [(def: (<name> [subjectO paramO])
     Binary
     (<op> paramO subjectO))]

  [frac//add lua.+]
  [frac//sub lua.-]
  [frac//mul lua.*]
  [frac//div lua./]
  [frac//rem lua.%]
  [frac//=   lua.=]
  [frac//<   lua.<]

  [text//=   lua.=]
  [text//<   lua.<]
  )

(do-template [<name> <cmp>]
  [(def: (<name> [subjectO paramO])
     Binary
     (<cmp> paramO subjectO))]

  [int//= lua.=]
  [int//< lua.<]
  )

(def: frac//encode
  Unary
  (|>> (list) (lua.apply "tostring")))

(def: (frac//decode inputO)
  Unary
  (lux//try (lua.function (list)
              (lua.return! (lua.apply "tonumber" (list inputO))))))

(do-template [<name> <divisor>]
  [(def: (<name> inputO)
     Unary
     (lua./ <divisor> inputO))]

  [int//to-frac (lua.float 1.0)]
  )

(do-template [<name> <transform>]
  [(def: (<name> inputO)
     Unary
     (|> inputO <transform>))]

  [frac//to-int (<| (lua.apply "math.floor") (list))]
  [text//hash   runtimeT.text//hash]
  )

(def: int//char
  Unary
  (|>> (list) (lua.apply "string.char")))

## [[Text]]
(do-template [<name> <op>]
  [(def: <name>
     Unary
     (|>> (list) (lua.apply <op>)))]

  [text//size  "string.len"]
  )

(def: (text//concat [subjectO paramO])
  Binary
  (format "(" subjectO " .. " paramO ")"))

(def: (text//char [subjectO paramO])
  Binary
  (runtimeT.text//char subjectO paramO))

(do-template [<name> <runtime>]
  [(def: (<name> [subjectO paramO extraO])
     Trinary
     (<runtime> subjectO paramO extraO))]

  [text//clip  runtimeT.text//clip]
  [text//index runtimeT.text//index]
  )

## [[Math]]
(do-template [<name> <method>]
  [(def: (<name> inputO)
     Unary
     (lua.apply <method> (list inputO)))]

  [math//cos "math.cos"]
  [math//sin "math.sin"]
  [math//tan "math.tan"]
  [math//acos "math.acos"]
  [math//asin "math.asin"]
  [math//atan "math.atan"]
  [math//exp "math.exp"]
  [math//log "math.log"]
  [math//ceil "math.ceil"]
  [math//floor "math.floor"]
  )

(def: (math//pow [inputO paramO])
  Binary
  (lua.apply "math.pow" (list inputO paramO)))

## [[IO]]
(def: (io//log messageO)
  Unary
  (lua.or (lua.apply "print" (list messageO))
          runtimeT.unit))

(def: io//error
  Unary
  lua.error)

(def: io//exit
  Unary
  (|>> (list) (lua.apply "os.exit")))

(def: (io//current-time [])
  Nullary
  (|> (lua.apply "os.time" (list))
      (lua.* (lua.int 1_000))))

## [[Atoms]]
(def: atom//new
  Unary
  (|>> [runtimeT.atom//field] (list) lua.table))

(def: atom//read
  Unary
  (lua.nth (lua.string runtimeT.atom//field)))

(def: (atom//compare-and-swap [atomO oldO newO])
  Trinary
  (runtimeT.atom//compare-and-swap atomO oldO newO))

## [[Box]]
(def: box//new
  Unary
  (|>> (list) lua.array))

(def: box//read
  Unary
  (lua.nth (lua.int 1)))

(def: (box//write [valueO boxO])
  Binary
  (runtimeT.box//write valueO boxO))

## [[Processes]]
(def: (process//parallelism-level [])
  Nullary
  (lua.int 1))

(def: (process//schedule [milli-secondsO procedureO])
  Binary
  (runtimeT.process//schedule milli-secondsO procedureO))

## [Bundles]
(def: lux-procs
  Bundle
  (|> (dict.new text.Hash<Text>)
      (install "is" (binary lux//is))
      (install "try" (unary lux//try))
      (install "if" (trinary lux//if))
      (install "loop" lux//loop)
      (install "recur" lux//recur)
      ))

(def: bit-procs
  Bundle
  (<| (prefix "bit")
      (|> (dict.new text.Hash<Text>)
          (install "and" (binary bit//and))
          (install "or" (binary bit//or))
          (install "xor" (binary bit//xor))
          (install "left-shift" (binary bit//left-shift))
          (install "logical-right-shift" (binary bit//logical-right-shift))
          (install "arithmetic-right-shift" (binary bit//arithmetic-right-shift))
          )))

(def: int-procs
  Bundle
  (<| (prefix "int")
      (|> (dict.new text.Hash<Text>)
          (install "+" (binary int//add))
          (install "-" (binary int//sub))
          (install "*" (binary int//mul))
          (install "/" (binary int//div))
          (install "%" (binary int//rem))
          (install "=" (binary int//=))
          (install "<" (binary int//<))
          (install "min" (nullary int//min))
          (install "max" (nullary int//max))
          (install "to-frac" (unary int//to-frac))
          (install "char" (unary int//char)))))

(def: frac-procs
  Bundle
  (<| (prefix "frac")
      (|> (dict.new text.Hash<Text>)
          (install "+" (binary frac//add))
          (install "-" (binary frac//sub))
          (install "*" (binary frac//mul))
          (install "/" (binary frac//div))
          (install "%" (binary frac//rem))
          (install "=" (binary frac//=))
          (install "<" (binary frac//<))
          (install "smallest" (nullary frac//smallest))
          (install "min" (nullary frac//min))
          (install "max" (nullary frac//max))
          (install "to-int" (unary frac//to-int))
          (install "encode" (unary frac//encode))
          (install "decode" (unary frac//decode)))))

(def: text-procs
  Bundle
  (<| (prefix "text")
      (|> (dict.new text.Hash<Text>)
          (install "=" (binary text//=))
          (install "<" (binary text//<))
          (install "concat" (binary text//concat))
          (install "index" (trinary text//index))
          (install "size" (unary text//size))
          (install "hash" (unary text//hash))
          (install "char" (binary text//char))
          (install "clip" (trinary text//clip))
          )))

(def: array-procs
  Bundle
  (<| (prefix "array")
      (|> (dict.new text.Hash<Text>)
          (install "new" (unary array//new))
          (install "get" (binary array//get))
          (install "put" (trinary array//put))
          (install "remove" (binary array//remove))
          (install "size" (unary array//size))
          )))

(def: math-procs
  Bundle
  (<| (prefix "math")
      (|> (dict.new text.Hash<Text>)
          (install "cos" (unary math//cos))
          (install "sin" (unary math//sin))
          (install "tan" (unary math//tan))
          (install "acos" (unary math//acos))
          (install "asin" (unary math//asin))
          (install "atan" (unary math//atan))
          (install "exp" (unary math//exp))
          (install "log" (unary math//log))
          (install "ceil" (unary math//ceil))
          (install "floor" (unary math//floor))
          (install "pow" (binary math//pow))
          )))

(def: io-procs
  Bundle
  (<| (prefix "io")
      (|> (dict.new text.Hash<Text>)
          (install "log" (unary io//log))
          (install "error" (unary io//error))
          (install "exit" (unary io//exit))
          (install "current-time" (nullary io//current-time)))))

(def: atom-procs
  Bundle
  (<| (prefix "atom")
      (|> (dict.new text.Hash<Text>)
          (install "new" (unary atom//new))
          (install "read" (unary atom//read))
          (install "compare-and-swap" (trinary atom//compare-and-swap)))))

(def: box-procs
  Bundle
  (<| (prefix "box")
      (|> (dict.new text.Hash<Text>)
          (install "new" (unary box//new))
          (install "read" (unary box//read))
          (install "write" (binary box//write)))))

(def: process-procs
  Bundle
  (<| (prefix "process")
      (|> (dict.new text.Hash<Text>)
          (install "parallelism-level" (nullary process//parallelism-level))
          (install "schedule" (binary process//schedule))
          )))

(def: #export procedures
  Bundle
  (<| (prefix "lux")
      (|> lux-procs
          (dict.merge bit-procs)
          (dict.merge int-procs)
          (dict.merge frac-procs)
          (dict.merge text-procs)
          (dict.merge array-procs)
          (dict.merge math-procs)
          (dict.merge io-procs)
          (dict.merge atom-procs)
          (dict.merge box-procs)
          (dict.merge process-procs)
          )))
