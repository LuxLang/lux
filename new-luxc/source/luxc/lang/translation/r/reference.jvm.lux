(.module:
  lux
  (lux [macro]
       (data [text]
             text/format))
  (luxc ["&" lang]
        (lang [".L" variable #+ Variable Register]
              (host [r #+ Expression SVar @@])))
  [//]
  (// [".T" runtime]))

(do-template [<register> <translation> <prefix>]
  [(def: #export (<register> register)
     (-> Register SVar)
     (r.var (format <prefix> (%i (nat-to-int register)))))
   
   (def: #export (<translation> register)
     (-> Register (Meta Expression))
     (:: macro.Monad<Meta> wrap (@@ (<register> register))))]

  [closure  translate-captured "c"]
  [variable translate-local    "v"])

(def: #export (local var)
  (-> Variable SVar)
  (if (variableL.captured? var)
    (closure (variableL.captured-register var))
    (variable (int-to-nat var))))

(def: #export (translate-variable var)
  (-> Variable (Meta Expression))
  (if (variableL.captured? var)
    (translate-captured (variableL.captured-register var))
    (translate-local (int-to-nat var))))

(def: #export global
  (-> Ident SVar)
  (|>> //.definition-name r.var))

(def: #export (translate-definition name)
  (-> Ident (Meta Expression))
  (:: macro.Monad<Meta> wrap (@@ (global name))))
