(.module:
  lux
  (lux (control [monad #+ do])
       (data [text]
             text/format
             (coll [list "list/" Functor<List>]))
       [macro])
  (luxc [lang]
        (lang ["ls" synthesis]
              (host [r #+ Expression @@])))
  [//]
  (// [".T" reference]))

(def: #export (translate-loop translate offset initsS+ bodyS)
  (-> (-> ls.Synthesis (Meta Expression)) Nat (List ls.Synthesis) ls.Synthesis
      (Meta Expression))
  (do {@ macro.Monad<Meta>}
    [loop-name (|> (macro.gensym "loop")
                   (:: @ map (|>> %code lang.normalize-name)))
     initsO+ (monad.map @ translate initsS+)
     bodyO (//.with-anchor [loop-name offset]
             (translate bodyS))
     #let [$loop-name (r.var loop-name)
           @loop-name (@@ $loop-name)]
     _ (//.save (r.set! $loop-name
                        (r.function (|> (list.n/range +0 (dec (list.size initsS+)))
                                        (list/map (|>> (n/+ offset) referenceT.variable)))
                          bodyO)))]
    (wrap (r.apply initsO+ @loop-name))))

(def: #export (translate-recur translate argsS+)
  (-> (-> ls.Synthesis (Meta Expression)) (List ls.Synthesis)
      (Meta Expression))
  (do {@ macro.Monad<Meta>}
    [[loop-name offset] //.anchor
     argsO+ (monad.map @ translate argsS+)]
    (wrap (r.apply argsO+ (r.global loop-name)))))
