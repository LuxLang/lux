(.module:
  lux
  (lux [macro]
       (data [text]
             text/format))
  (luxc ["&" lang]
        (lang [".L" variable #+ Variable Register]
              (host ["_" php #+ Var])))
  [//]
  (// [".T" runtime]))

(do-template [<register> <prefix>]
  [(def: #export <register>
     (-> Register Var)
     (|>> (:coerce Int) %i (format <prefix>) _.var))]

  [closure  "c"]
  [variable "v"])

(def: #export (local var)
  (-> Variable Var)
  (if (variableL.captured? var)
    (closure (variableL.captured-register var))
    (variable (:coerce Nat var))))

(def: #export global
  (-> Ident Var)
  (|>> //.definition-name _.var))

(do-template [<name> <input> <converter>]
  [(def: #export <name>
     (-> <input> (Meta Var))
     (|>> <converter> (:: macro.Monad<Meta> wrap)))]

  [translate-variable   Variable local]
  [translate-definition Ident    global]
  )
