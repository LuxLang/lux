(.module:
  [lux #*
   [control
    ["." monad (#+ do)]
    ["ex" exception (#+ exception:)]]
   [data
    [text
     format]
    [collection
     ["." list]]]
   [compiler
    [default
     ["." phase
      [synthesis (#+ Synthesis)]]]]]
  [luxc
   [lang
    [host
     ["." jvm (#+ Inst Operation Phase)
      ["$t" type]
      ["_" inst]]]]]
  ["." //])

(exception: #export (not-a-tuple {size Nat})
  (ex.report ["Expected size" ">= 2"]
             ["Actual size" (%n size)]))

(def: $Object jvm.Type ($t.class "java.lang.Object" (list)))

(def: #export (tuple translate members)
  (-> Phase (List Synthesis) (Operation Inst))
  (do phase.Monad<Operation>
    [#let [size (list.size members)]
     _ (phase.assert not-a-tuple size
                     (n/>= +2 size))
     membersI (|> members
                  list.enumerate
                  (monad.map @ (function (_ [idx member])
                                 (do @
                                   [memberI (translate member)]
                                   (wrap (|>> _.DUP
                                              (_.int (.int idx))
                                              memberI
                                              _.AASTORE)))))
                  (:: @ map _.fuse))]
    (wrap (|>> (_.int (.int size))
               (_.array $Object)
               membersI))))

(def: (flagI tail?)
  (-> Bit Inst)
  (if tail?
    (_.string "")
    _.NULL))

(def: #export (variant translate tag tail? member)
  (-> Phase Nat Bit Synthesis (Operation Inst))
  (do phase.Monad<Operation>
    [memberI (translate member)]
    (wrap (|>> (_.int (.int tag))
               (flagI tail?)
               memberI
               (_.INVOKESTATIC //.runtime-class
                               "variant_make"
                               ($t.method (list $t.int $Object $Object)
                                          (#.Some ($t.array +1 $Object))
                                          (list))
                               #0)))))
