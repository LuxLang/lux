(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [data
    [text
     format]]
   [tool
    [compiler
     ["." name]
     ["." reference (#+ Register Variable)]
     ["." phase ("operation@." monad)
      ["." generation]]]]]
  [luxc
   [lang
    [host
     [jvm (#+ Inst Operation)
      ["_" inst]]]]]
  ["." //])

(template [<name> <prefix>]
  [(def: #export (<name> idx)
     (-> Nat Text)
     (|> idx %n (format <prefix>)))]

  [foreign-name "f"]
  [partial-name "p"]
  )

(def: (foreign variable)
  (-> Register (Operation Inst))
  (do phase.monad
    [function-class generation.context]
    (wrap (|>> (_.ALOAD 0)
               (_.GETFIELD function-class
                           (|> variable .nat foreign-name)
                           //.$Object)))))

(def: local
  (-> Register Inst)
  (|>> _.ALOAD))

(def: #export (variable variable)
  (-> Variable (Operation Inst))
  (case variable
    (#reference.Local variable)
    (operation@wrap (local variable))
    
    (#reference.Foreign variable)
    (foreign variable)))

(def: #export (constant name)
  (-> Name (Operation Inst))
  (do phase.monad
    [bytecode-name (generation.remember name)]
    (wrap (_.GETSTATIC bytecode-name //.value-field //.$Object))))
