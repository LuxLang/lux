(.module:
  [lux #*
   [control
    [monad (#+ do)]]
   [data
    [text
     format]]
   [compiler
    [default
     ["." name]
     ["." reference (#+ Register Variable)]
     ["." phase ("operation/." Monad<Operation>)
      ["." translation]]]]]
  [luxc
   [lang
    [host
     [jvm (#+ Inst Operation)
      ["$t" type]
      ["_" inst]]]]]
  ["." //])

(do-template [<name> <prefix>]
  [(def: #export (<name> idx)
     (-> Nat Text)
     (|> idx .int %i (format <prefix>)))]

  [foreign-name "f"]
  [partial-name "p"]
  )

(def: (foreign variable)
  (-> Register (Operation Inst))
  (do phase.Monad<Operation>
    [function-class translation.context]
    (wrap (|>> (_.ALOAD 0)
               (_.GETFIELD function-class
                           (|> variable .nat foreign-name)
                           //.$Object)))))

(def: local
  (-> Register (Operation Inst))
  (|>> _.ALOAD operation/wrap))

(def: #export (variable variable)
  (-> Variable (Operation Inst))
  (case variable
    (#reference.Local variable)
    (local variable)
    
    (#reference.Foreign variable)
    (foreign variable)))

(def: #export (constant name)
  (-> Name (Operation Inst))
  (do phase.Monad<Operation>
    [bytecode-name (translation.remember name)]
    (operation/wrap (_.GETSTATIC bytecode-name //.value-field //.$Object))))
