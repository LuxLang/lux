(.module:
  lux
  (lux (control [monad #+ do])
       (data [text "text/" Hash<Text>]
             text/format)
       [macro "macro/" Monad<Meta>])
  (luxc ["&" lang]
        (lang [".L" host]
              (host ["$" jvm]
                    (jvm ["$t" type]
                         ["$i" inst]))
              ["ls" synthesis]
              [".L" variable #+ Variable]))
  (// [".T" common]))

(do-template [<name> <prefix>]
  [(def: #export (<name> idx)
     (-> Nat Text)
     (|> idx .int %i (format <prefix>)))]

  [captured "c"]
  [partial  "p"]
  )

(def: #export (translate-captured variable)
  (-> Variable (Meta $.Inst))
  (do macro.Monad<Meta>
    [this-module macro.current-module-name
     function-class hostL.context
     #let [function-class (format (text.replace-all "/" "." this-module) "." function-class)]]
    (wrap (|>> ($i.ALOAD +0)
               ($i.GETFIELD function-class
                            (|> variable inc (i/* -1) .nat captured)
                            commonT.$Object)))))

(def: #export (translate-local variable)
  (-> Variable (Meta $.Inst))
  (macro/wrap ($i.ALOAD (.nat variable))))

(def: #export (translate-variable variable)
  (-> Variable (Meta $.Inst))
  (if (variableL.captured? variable)
    (translate-captured variable)
    (translate-local variable)))

(def: #export (translate-definition [def-module def-name])
  (-> Ident (Meta $.Inst))
  (let [bytecode-name (format def-module "/" (&.normalize-name def-name) (%n (text/hash def-name)))]
    (macro/wrap ($i.GETSTATIC bytecode-name commonT.value-field commonT.$Object))))
