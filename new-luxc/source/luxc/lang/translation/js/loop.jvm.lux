(.module:
  lux
  (lux (control [monad #+ do])
       (data [text]
             text/format
             (coll [list "list/" Functor<List>]))
       [macro])
  (luxc (lang ["ls" synthesis]))
  [//]
  (// [".T" reference]))

(def: #export loop-name Text "_loop")

(def: #export (translate-loop translate offset initsS+ bodyS)
  (-> (-> ls.Synthesis (Meta //.Expression)) Nat (List ls.Synthesis) ls.Synthesis
      (Meta //.Expression))
  (do macro.Monad<Meta>
    [initsJS+ (monad.map @ translate initsS+)
     bodyJS (translate bodyS)
     #let [registersJS+ (|> (list.n/range +0 (n/dec (list.size initsS+)))
                            (list/map (|>> (n/+ offset) referenceT.variable)))]]
    (wrap (format "(function " loop-name "(" (text.join-with "," registersJS+) ") {"
                  "return " bodyJS ";"
                  "})(" (text.join-with "," initsJS+) ")"))))

(def: #export (translate-iter translate offset argsS+)
  (-> (-> ls.Synthesis (Meta //.Expression)) Nat (List ls.Synthesis)
      (Meta //.Expression))
  (do macro.Monad<Meta>
    [argsJS+ (monad.map @ translate argsS+)]
    (wrap (format loop-name "(" (text.join-with "," argsJS+) ")"))))
