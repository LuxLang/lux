(.module:
  lux
  (lux (control [monad #+ do])
       (data [text]
             text/format
             (coll [list "list/" Functor<List>]))
       [macro])
  (luxc [lang]
        (lang ["ls" synthesis]
              (host [js #+ JS Expression Statement])))
  [//]
  (// [".T" reference]))

(def: #export (translate-loop translate offset initsS+ bodyS)
  (-> (-> ls.Synthesis (Meta Expression)) Nat (List ls.Synthesis) ls.Synthesis
      (Meta Expression))
  (do macro.Monad<Meta>
    [loop-name (:: @ map (|>> %code lang.normalize-name)
                   (macro.gensym "loop"))
     initsJS+ (monad.map @ translate initsS+)
     bodyJS (//.with-anchor [loop-name offset]
              (translate bodyS))
     #let [registersJS+ (|> (list.n/range +0 (dec (list.size initsS+)))
                            (list/map (|>> (n/+ offset) referenceT.variable)))]]
    (wrap (format "(function " loop-name "(" (text.join-with "," registersJS+) ") {"
                  "return " bodyJS ";"
                  "})(" (text.join-with "," initsJS+) ")"))))

(def: #export (translate-recur translate argsS+)
  (-> (-> ls.Synthesis (Meta Expression)) (List ls.Synthesis)
      (Meta Expression))
  (do macro.Monad<Meta>
    [[loop-name offset] //.anchor
     argsJS+ (monad.map @ translate argsS+)]
    (wrap (format loop-name "(" (text.join-with "," argsJS+) ")"))))
