(.module:
  lux
  (lux [macro]
       (data [text]
             text/format))
  (luxc ["&" lang])
  [//]
  (// [".T" runtime]))

(do-template [<register> <translation> <prefix>]
  [(def: #export (<register> register)
     (-> Nat //.Expression)
     (format <prefix> (%n register)))
   
   (def: #export (<translation> register)
     (-> Nat (Meta //.Expression))
     (:: macro.Monad<Meta> wrap (<register> register)))]

  [closure  translate-local    "c"]
  [variable translate-captured "v"])

(def: #export (global [module name])
  (-> Ident //.Expression)
  (format (text.replace-all "/" "_" module) "$" (&.normalize-name name)))

(def: #export (translate-definition name)
  (-> Ident (Meta //.Expression))
  (:: macro.Monad<Meta> wrap (global name)))
