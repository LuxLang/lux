(.module:
  [lux (#- Type Definition)
   [control
    monad
    ["p" parser]]
   [data
    [collection
     [list ("list/" Functor<List>)]]]
   [macro
    [code]
    ["s" syntax (#+ syntax:)]]
   [host (#+ import:)]
   [world
    [blob (#+ Blob)]]
   [language
    [reference (#+ Register)]
    [compiler
     ["." translation]]]])

## [Host]
(import: org/objectweb/asm/MethodVisitor)

(import: org/objectweb/asm/ClassWriter)

(import: #long org/objectweb/asm/Label
  (new []))

## [Type]
(type: #export Bound
  #Upper
  #Lower)

(type: #export Primitive
  #Boolean
  #Byte
  #Short
  #Int
  #Long
  #Float
  #Double
  #Char)

(type: #export #rec Generic
  (#Var Text)
  (#Wildcard (Maybe [Bound Generic]))
  (#Class Text (List Generic)))

(type: #export Class
  [Text (List Generic)])

(type: #export Parameter
  [Text Class (List Class)])

(type: #export #rec Type
  (#Primitive Primitive)
  (#Generic Generic)
  (#Array Type))

(type: #export Method
  {#args (List Type)
   #return (Maybe Type)
   #exceptions (List Generic)})

(type: #export Def
  (-> ClassWriter ClassWriter))

(type: #export Inst
  (-> MethodVisitor MethodVisitor))

(type: #export Label
  org/objectweb/asm/Label)

(type: #export Visibility
  #Public
  #Protected
  #Private
  #Default)

(type: #export Version
  #V1_1
  #V1_2
  #V1_3
  #V1_4
  #V1_5
  #V1_6
  #V1_7
  #V1_8)

(type: #export ByteCode Blob)

(type: #export Definition [Text ByteCode])

(type: #export Anchor [Label Register])

(type: #export Host
  (translation.Host Inst Definition))

(type: #export State
  (translation.State ..Anchor Inst Definition))

(type: #export Operation
  (translation.Operation ..Anchor Inst Definition))

(type: #export Compiler
  (translation.Compiler ..Anchor Inst Definition))

## [Values]
(syntax: (config: {type s.local-symbol}
           {none s.local-symbol}
           {++ s.local-symbol}
           {options (s.tuple (p.many s.local-symbol))})
  (let [g!type (code.local-symbol type)
        g!none (code.local-symbol none)
        g!tags+ (list/map code.local-tag options)
        g!_left (code.local-symbol "_left")
        g!_right (code.local-symbol "_right")
        g!options+ (list/map (function (_ option)
                               (` (def: (~' #export) (~ (code.local-symbol option))
                                    (~ g!type)
                                    (|> (~ g!none)
                                        (set@ (~ (code.local-tag option)) #1)))))
                             options)]
    (wrap (list& (` (type: (~' #export) (~ g!type)
                      (~ (code.record (list/map (function (_ tag)
                                                  [tag (` .Bit)])
                                                g!tags+)))))

                 (` (def: (~' #export) (~ g!none)
                      (~ g!type)
                      (~ (code.record (list/map (function (_ tag)
                                                  [tag (` #0)])
                                                g!tags+)))))

                 (` (def: (~' #export) ((~ (code.local-symbol ++)) (~ g!_left) (~ g!_right))
                      (-> (~ g!type) (~ g!type) (~ g!type))
                      (~ (code.record (list/map (function (_ tag)
                                                  [tag (` (or (get@ (~ tag) (~ g!_left))
                                                              (get@ (~ tag) (~ g!_right))))])
                                                g!tags+)))))

                 g!options+))))

## Configs
(config: Class-Config  noneC ++C [finalC])
(config: Method-Config noneM ++M [finalM staticM synchronizedM strictM])
(config: Field-Config  noneF ++F [finalF staticF transientF volatileF])

## Labels
(def: #export new-label
  (-> Any Label)
  org/objectweb/asm/Label::new)

(def: #export (simple-class name)
  (-> Text Class)
  [name (list)])
