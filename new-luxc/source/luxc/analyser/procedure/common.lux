(;module:
  lux
  (lux (control [monad #+ do])
       (concurrency ["A" atom])
       (data [text]
             text/format
             (coll [list]
                   [array #+ Array]
                   ["D" dict]))
       [macro #+ Monad<Lux>]
       (type ["TC" check])
       [io])
  (luxc ["&" base]
        (lang ["la" analysis #+ Analysis])
        (analyser ["&;" common])))

## [Utils]
(type: Proc
  (-> &;Analyser (List Code) (Lux Analysis)))

(type: Bundle
  (D;Dict Text Proc))

(def: (install name unnamed)
  (-> Text (-> Text Proc)
      (-> Bundle Bundle))
  (D;put name (unnamed name)))

(def: (wrong-amount-error proc expected actual)
  (-> Text Nat Nat Text)
  (format "Wrong number of arguments for " (%t proc) "\n"
          "Expected: " (|> expected nat-to-int %i) "\n"
          "  Actual: " (|> actual nat-to-int %i)))

(def: (simple-proc proc input-types output-type)
  (-> Text (List Type) Type Proc)
  (let [num-expected (list;size input-types)]
    (function [analyse args]
      (let [num-actual (list;size args)]
        (if (n.= num-expected num-actual)
          (do Monad<Lux>
            [argsA (monad;map @
                              (function [[argT argC]]
                                (&;with-expected-type argT
                                  (analyse argC)))
                              (list;zip2 input-types args))
             expected macro;expected-type
             _ (&;within-type-env
                (TC;check expected output-type))]
            (wrap (#la;Procedure proc argsA)))
          (&;fail (wrong-amount-error proc num-expected num-actual)))))))

(def: (binary-operation subjectT paramT outputT proc)
  (-> Type Type Type Text Proc)
  (simple-proc proc (list subjectT paramT) outputT))

(def: (trinary-operation subjectT param0T param1T outputT proc)
  (-> Type Type Type Type Text Proc)
  (simple-proc proc (list subjectT param0T param1T) outputT))

(def: (unary-operation inputT outputT proc)
  (-> Type Type Text Proc)
  (simple-proc proc (list inputT) outputT))

(def: (special-value valueT proc)
  (-> Type Text Proc)
  (simple-proc proc (list) valueT))

(def: (converter fromT toT proc)
  (-> Type Type Text Proc)
  (simple-proc proc (list fromT) toT))

## [Analysers]
## "lux is" represents reference/pointer equality.
(def: (analyse-lux-is proc)
  (-> Text Proc)
  (function [analyse args]
    (&common;with-var
      (function [[var-id varT]]
        ((binary-operation varT varT Bool proc)
         analyse args)))))

## "lux try" provides a simple way to interact with the host platform's
## error-handling facilities.
(def: (analyse-lux-try proc)
  (-> Text Proc)
  (function [analyse args]
    (&common;with-var
      (function [[var-id varT]]
        (case args
          (^ (list opC))
          (do Monad<Lux>
            [opA (&;with-expected-type (type (io;IO varT))
                   (analyse opC))
             outputT (&;within-type-env
                      (TC;clean var-id (type (Either Text varT))))
             expected macro;expected-type
             _ (&;within-type-env
                (TC;check expected outputT))]
            (wrap (#la;Procedure proc (list opA))))
          
          _
          (&;fail (wrong-amount-error proc +1 (list;size args))))))))

(def: lux-procs
  Bundle
  (|> (D;new text;Hash<Text>)
      (install "lux is" analyse-lux-is)
      (install "lux try" analyse-lux-try)))

(def: io-procs
  Bundle
  (|> (D;new text;Hash<Text>)
      (install "io log" (converter Text Unit))
      (install "io error" (converter Text Bottom))
      (install "io exit" (converter Nat Bottom))
      (install "io current-time" (special-value Int))))

(def: bit-procs
  Bundle
  (|> (D;new text;Hash<Text>)
      (install "bit count" (unary-operation Nat Nat))
      (install "bit and" (binary-operation Nat Nat Nat))
      (install "bit or" (binary-operation Nat Nat Nat))
      (install "bit xor" (binary-operation Nat Nat Nat))
      (install "bit shift-left" (binary-operation Nat Nat Nat))
      (install "bit unsigned-shift-right" (binary-operation Nat Nat Nat))
      (install "bit shift-right" (binary-operation Int Nat Int))
      ))

(def: nat-procs
  Bundle
  (|> (D;new text;Hash<Text>)
      (install "nat +" (binary-operation Nat Nat Nat))
      (install "nat -" (binary-operation Nat Nat Nat))
      (install "nat *" (binary-operation Nat Nat Nat))
      (install "nat /" (binary-operation Nat Nat Nat))
      (install "nat %" (binary-operation Nat Nat Nat))
      (install "nat =" (binary-operation Nat Nat Bool))
      (install "nat <" (binary-operation Nat Nat Bool))
      (install "nat min" (special-value Nat))
      (install "nat max" (special-value Nat))
      (install "nat to-int" (converter Nat Int))
      (install "nat to-text" (converter Nat Text))))

(def: int-procs
  Bundle
  (|> (D;new text;Hash<Text>)
      (install "int +" (binary-operation Int Int Int))
      (install "int -" (binary-operation Int Int Int))
      (install "int *" (binary-operation Int Int Int))
      (install "int /" (binary-operation Int Int Int))
      (install "int %" (binary-operation Int Int Int))
      (install "int =" (binary-operation Int Int Bool))
      (install "int <" (binary-operation Int Int Bool))
      (install "int min" (special-value Int))
      (install "int max" (special-value Int))
      (install "int to-nat" (converter Int Nat))
      (install "int to-frac" (converter Int Frac))))

(def: deg-procs
  Bundle
  (|> (D;new text;Hash<Text>)
      (install "deg +" (binary-operation Deg Deg Deg))
      (install "deg -" (binary-operation Deg Deg Deg))
      (install "deg *" (binary-operation Deg Deg Deg))
      (install "deg /" (binary-operation Deg Deg Deg))
      (install "deg %" (binary-operation Deg Deg Deg))
      (install "deg =" (binary-operation Deg Deg Bool))
      (install "deg <" (binary-operation Deg Deg Bool))
      (install "deg scale" (binary-operation Deg Nat Deg))
      (install "deg reciprocal" (binary-operation Deg Nat Deg))
      (install "deg min" (special-value Deg))
      (install "deg max" (special-value Deg))
      (install "deg to-frac" (converter Deg Frac))))

(def: frac-procs
  Bundle
  (|> (D;new text;Hash<Text>)
      (install "frac +" (binary-operation Frac Frac Frac))
      (install "frac -" (binary-operation Frac Frac Frac))
      (install "frac *" (binary-operation Frac Frac Frac))
      (install "frac /" (binary-operation Frac Frac Frac))
      (install "frac %" (binary-operation Frac Frac Frac))
      (install "frac =" (binary-operation Frac Frac Bool))
      (install "frac <" (binary-operation Frac Frac Bool))
      (install "frac smallest" (special-value Frac))
      (install "frac min" (special-value Frac))
      (install "frac max" (special-value Frac))
      (install "frac not-a-number" (special-value Frac))
      (install "frac positive-infinity" (special-value Frac))
      (install "frac negative-infinity" (special-value Frac))
      (install "frac to-deg" (converter Frac Deg))
      (install "frac to-int" (converter Frac Int))
      (install "frac encode" (converter Frac Text))
      (install "frac decode" (converter Text (type (Maybe Frac))))))

(def: text-procs
  Bundle
  (|> (D;new text;Hash<Text>)
      (install "text =" (binary-operation Text Text Bool))
      (install "text <" (binary-operation Text Text Bool))
      (install "text prepend" (binary-operation Text Text Text))
      (install "text index" (trinary-operation Text Text Nat (type (Maybe Nat))))
      (install "text size" (unary-operation Text Nat))
      (install "text hash" (unary-operation Text Nat))
      (install "text replace" (trinary-operation Text Text Text Text))
      (install "text char" (binary-operation Text Nat Nat))
      (install "text clip" (trinary-operation Text Nat Nat Text))
      ))

(def: (analyse-array-get proc)
  (-> Text Proc)
  (function [analyse args]
    (&common;with-var
      (function [[var-id varT]]
        ((binary-operation Nat (type (Array varT)) varT proc)
         analyse args)))))

(def: (analyse-array-put proc)
  (-> Text Proc)
  (function [analyse args]
    (&common;with-var
      (function [[var-id varT]]
        ((trinary-operation Nat varT (type (Array varT)) (type (Array varT)) proc)
         analyse args)))))

(def: (analyse-array-remove proc)
  (-> Text Proc)
  (function [analyse args]
    (&common;with-var
      (function [[var-id varT]]
        ((binary-operation Nat (type (Array varT)) (type (Array varT)) proc)
         analyse args)))))

(def: array-procs
  Bundle
  (|> (D;new text;Hash<Text>)
      (install "array new" (unary-operation Nat Array))
      (install "array get" analyse-array-get)
      (install "array put" analyse-array-put)
      (install "array remove" analyse-array-remove)
      (install "array size" (unary-operation (type (Ex [a] (Array a))) Nat))
      ))

(def: math-procs
  Bundle
  (|> (D;new text;Hash<Text>)
      (install "math cos" (unary-operation Frac Frac))
      (install "math sin" (unary-operation Frac Frac))
      (install "math tan" (unary-operation Frac Frac))
      (install "math acos" (unary-operation Frac Frac))
      (install "math asin" (unary-operation Frac Frac))
      (install "math atan" (unary-operation Frac Frac))
      (install "math cosh" (unary-operation Frac Frac))
      (install "math sinh" (unary-operation Frac Frac))
      (install "math tanh" (unary-operation Frac Frac))
      (install "math exp" (unary-operation Frac Frac))
      (install "math log" (unary-operation Frac Frac))
      (install "math root2" (unary-operation Frac Frac))
      (install "math root3" (unary-operation Frac Frac))
      (install "math ceil" (unary-operation Frac Frac))
      (install "math floor" (unary-operation Frac Frac))
      (install "math round" (unary-operation Frac Frac))
      (install "math atan2" (binary-operation Frac Frac Frac))
      (install "math pow" (binary-operation Frac Frac Frac))
      ))

(def: (analyse-atom-new proc)
  (-> Text Proc)
  (function [analyse args]
    (&common;with-var
      (function [[var-id varT]]
        (case args
          (^ (list initC))
          (do Monad<Lux>
            [initA (&;with-expected-type varT
                     (analyse initC))
             outputT (&;within-type-env
                      (TC;clean var-id (type (A;Atom varT))))
             expected macro;expected-type
             _ (&;within-type-env
                (TC;check expected outputT))]
            (wrap (#la;Procedure proc (list initA))))
          
          _
          (&;fail (wrong-amount-error proc +1 (list;size args))))))))

(def: (analyse-atom-read proc)
  (-> Text Proc)
  (function [analyse args]
    (&common;with-var
      (function [[var-id varT]]
        ((unary-operation (type (A;Atom varT)) varT proc)
         analyse args)))))

(def: (analyse-atom-compare-and-swap proc)
  (-> Text Proc)
  (function [analyse args]
    (&common;with-var
      (function [[var-id varT]]
        ((trinary-operation varT varT (type (A;Atom varT)) Bool proc)
         analyse args)))))

(def: atom-procs
  Bundle
  (|> (D;new text;Hash<Text>)
      (install "atom new" analyse-atom-new)
      (install "atom read" analyse-atom-read)
      (install "atom compare-and-swap" analyse-atom-compare-and-swap)
      ))

(def: process-procs
  Bundle
  (|> (D;new text;Hash<Text>)
      (install "process concurrency-level" (special-value Nat))
      (install "process future" (unary-operation (type (io;IO Top)) Unit))
      (install "process schedule" (binary-operation Nat (type (io;IO Top)) Unit))
      ))

(def: #export procedures
  Bundle
  (|> (D;new text;Hash<Text>)
      (D;merge lux-procs)
      (D;merge bit-procs)
      (D;merge nat-procs)
      (D;merge int-procs)
      (D;merge deg-procs)
      (D;merge frac-procs)
      (D;merge text-procs)
      (D;merge array-procs)
      (D;merge math-procs)
      (D;merge atom-procs)
      (D;merge process-procs)
      (D;merge io-procs)))
