(;module:
  lux
  (lux (control monad)
       [macro #+ Monad<Lux>]
       (type ["TC" check]))
  (luxc ["&" base]
        (lang ["la" analysis #+ Analysis])))

## These 2 analysers are somewhat special, since they require the
## means of evaluating Lux expressions at compile-time for the sake of
## computing Lux type values.
(def: #export (analyse-check analyse eval type value)
  (-> &;Analyser &;Eval Code Code (Lux Analysis))
  (do Monad<Lux>
    [actual (eval Type type)
     #let [actual (:! Type actual)]
     expected macro;expected-type
     _ (&;with-type-env
         (TC;check expected actual))]
    (&;with-expected-type actual
      (analyse value))))

(def: #export (analyse-coerce analyse eval type value)
  (-> &;Analyser &;Eval Code Code (Lux Analysis))
  (do Monad<Lux>
    [actual (eval Type type)
     expected macro;expected-type
     _ (&;with-type-env
         (TC;check expected (:! Type actual)))]
    (&;with-expected-type Top
      (analyse value))))
