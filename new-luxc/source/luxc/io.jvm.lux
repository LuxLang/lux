(;module:
  lux
  (lux (control monad)
       [io #- run]
       (concurrency ["P" promise])
       (data ["R" result]
             [text "T/" Eq<Text>]
             text/format)
       [macro]
       [host])
  (luxc ["&" base]))

(host;import java.io.File
  (new [String String])
  (exists [] #io #try boolean))

(host;import java.io.Reader
  (close [] #io #try void))

(host;import java.io.FileReader
  (new [File]))

(host;import java.io.BufferedReader
  (new [Reader])
  (readLine [] #io #try #? String))

(def: host-extension Text ".jvm")

(def: (find-in-sources path source-dirs)
  (-> &;Path (List &;Path) (P;Promise (Maybe File)))
  (loop [source-dirs source-dirs]
    (case source-dirs
      #;Nil
      (:: P;Monad<Promise> wrap #;None)

      (#;Cons dir source-dirs')
      (do P;Monad<Promise>
        [#let [file (File.new [dir path])]
         ?? (P;future (File.exists [] file))]
        (case ??
          (#;Right true)
          (wrap (#;Some file))

          _
          (recur source-dirs'))))))

(def: (read-source-code lux-file)
  (-> File (P;Promise (R;Result Text)))
  (P;future
   (let [reader (|> lux-file FileReader.new BufferedReader.new)]
     (loop [total ""]
       (do Monad<IO>
         [?line (BufferedReader.readLine [] reader)]
         (case ?line
           (#R;Error error)
           (wrap (#R;Error error))

           (#R;Success #;None)
           (wrap (#R;Success total))

           (#R;Success (#;Some line))
           (if (T/= "" total)
             (recur line)
             (recur (format total "\n" line)))))))))

(def: #export (read-module source-dirs module-name)
  (-> (List &;Path) Text (P;Promise (R;Result [&;Path Text])))
  (let [host-path (format module-name host-extension ".lux")
        lux-path (format module-name ".lux")]
    (with-expansions
      [<tries> (do-template [<path>]
                 [(do P;Monad<Promise>
                    [?file (find-in-sources <path> source-dirs)])
                  (case ?file
                    (#;Some file)
                    (do @
                      [?code (read-source-code file)]
                      (case ?code
                        (#R;Error error)
                        (wrap (#R;Error error))

                        (#R;Success code)
                        (wrap (#R;Success [<path> code]))))

                    #;None)]

                 [host-path]
                 [lux-path])]
      (<| <tries>
          (wrap (#R;Error (format "Module cannot be found: " module-name)))))))

(def: #export (write-module module-name module-descriptor)
  (-> Text Text (P;Promise Unit))
  (undefined))
