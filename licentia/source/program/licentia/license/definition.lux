(.module:
  [library
   [lux (#- Definition)
    [data
     ["." text
      ["%" format (#+ format)]]]]]
  [///
   ["$" document]])

(type: .public Definition
  {#term Text
   #meaning Text})

(def: not_a_contribution_notice
  (format text.double_quote "Not a Contribution" text.double_quote))

(def: .public patent_rights
  (List Text)
  (list "make"
        "have made"
        "use"
        "offer to sell"
        "sell"
        "import"
        "transfer"))

(def: commercial_services
  (List Text)
  (let [services (: (-> Text Text)
                    (function (_ type)
                      (format type " services")))]
    (list (services "hosting")
          (services "consulting")
          (services "support"))))

(def: individual_capacities
  (List Text)
  (list "officer"
        "employee"
        "member"
        "independent contractor"
        "agent of a corporation, business or organization (commercial or non-commercial)"))

(def: covered_work_description
  "work of authorship")

(template [<name> <term> <meaning>]
  [(def: .public <name>
     Definition
     {#term <term>
      #meaning <meaning>})]

  [license "This License"
   ($.paragraph (list (format "the terms and conditions defined in this document")))]

  [licensable "Licensable"
   ($.paragraph (list (format "having the right to grant any and all of the rights conveyed by " (get@ #term license))))]

  [legal_entity "Legal Entity"
   (let [abilities (: (List Text)
                      (list "to enter into contracts"
                            "to sue"
                            "to be sued"))]
     ($.paragraph (list (format "any human or non-human entity that is recognized as having privileges and obligations, such as having the ability " ($.and abilities)))))]

  [recipient "Recipient"
   ($.paragraph (list (format "a " (get@ #term legal_entity) " exercising permissions by " (get@ #term license))))]

  [licensor "The Licensor"
   ($.paragraph (list (format "the copyright owner granting " (get@ #term license) ", or a " (get@ #term legal_entity) " authorized by the copyright owner")))]

  [source_code_form "Source Code Form"
   ($.paragraph (list (format "the preferred form of the " ..covered_work_description " in order to make modifications to it")))]

  [object_form "Object Form"
   ($.paragraph (list (format "any form produced by transforming a " (get@ #term source_code_form) ", including but not limited to compiled code and transpiled code")))]

  [licensed_work "The Licensed Work"
   ($.paragraph (list (format "the " ..covered_work_description
                              ", whether in a " (get@ #term source_code_form)
                              " or in an " (get@ #term object_form)
                              ", made available under " (get@ #term license)
                              ", as indicated by a copyright notice that is included in or attached to the " ..covered_work_description)))]

  [derivative_work "Derivative Work"
   ($.paragraph (list (format "any work, whether in a " (get@ #term source_code_form)
                              " or in an " (get@ #term object_form)
                              ", that is based on (or derived from) " (get@ #term licensed_work)
                              " and which represents an original " ..covered_work_description)))]

  [submission "Submission"
   (let [forms_of_communication (: (List Text)
                                   (list "electronic"
                                         "verbal"
                                         "written"))]
     ($.paragraph (list (format "any form of " ($.or forms_of_communication) " communication sent to " (get@ #term licensor)
                                ", or its representatives, for the purpose of discussing and improving " (get@ #term licensed_work)
                                ", but excluding communication that is designated in writing by the copyright owner as " not_a_contribution_notice))))]

  [modification "Modification"
   (let [alteration "any addition to, or deletion from, the substance or structure of"
         object "file or other storage"
         targets (: (List Text)
                    (list (format "a " object " contained in " (get@ #term licensed_work))
                          (format "any new " object " that contains any part of " (get@ #term licensed_work))
                          (format "any " object " which replaces or otherwise alters the original functionality of "(get@ #term licensed_work) " at runtime")))]
     ($.paragraph (list (format alteration " " ($.or targets)))))]

  [required_component "Required Component"
   (let [possibilities (: (List Text)
                          (list "text"
                                "program"
                                "script"
                                "schema"
                                "interface definition"
                                "control file"
                                "other work"))]
     ($.paragraph (list (format "any " ($.or possibilities)
                                " created by " (get@ #term recipient)
                                " which is required by a third party to successfully install and run a " (get@ #term derivative_work)
                                " by " (get@ #term recipient)))))]

  [extension "Extension"
   (let [possibilities (: (List Text)
                          (list (get@ #term modification)
                                (get@ #term derivative_work)
                                (get@ #term required_component)))]
     ($.paragraph (list (format "any " ($.or possibilities)))))]

  [contribution "Contribution"
   ($.paragraph (list (format "any " covered_work_description ", including the original version of " (get@ #term licensed_work)
                              " and any " (get@ #term extension) " to " (get@ #term licensed_work)
                              ", that is intentionally communicated as a " (get@ #term submission)
                              " to " (get@ #term licensor)
                              " for inclusion in " (get@ #term licensed_work) " by the copyright owner"
                              ", or by a " (get@ #term legal_entity) " authorized to submit on behalf of the copyright owner")))]

  [contributor "Contributor"
   ($.paragraph (list (format (get@ #term licensor)
                              " or any " (get@ #term legal_entity)
                              " on behalf of whom a " (get@ #term contribution)
                              " has been received by " (get@ #term licensor)
                              ", and subsequently incorporated within " (get@ #term licensed_work))))]

  [patent_claim (format "Patent Claim Of A " (get@ #term contributor))
   (let [claim_types (: (List Text)
                        (list "method"
                              "process"
                              "apparatus"))]
     ($.paragraph (list (format "any patent claim(s), including without limitation " ($.and claim_types) " claims, in any patent "
                                (get@ #term licensable) " by such " (get@ #term contributor)
                                " that would be infringed, but for the grant of " (get@ #term license)
                                ", to " ($.or patent_rights) " its " (get@ #term contribution)))))]
  
  [secondary_license "Secondary License"
   ($.paragraph (list (format "any license for which compliance does not imply or require violating the terms of " (get@ #term license))))]

  [sell "Sell"
   ($.paragraph (list (format "practicing any or all of the rights granted to " (get@ #term recipient)
                              " under " (get@ #term license)
                              " to provide to third parties, for a fee or other consideration "
                              "(including without limitation fees for " ($.or commercial_services)
                              " related to "(get@ #term licensed_work) ")"
                              ", a product or service whose value derives, entirely or substantially, from the functionality of " (get@ #term licensed_work))))]

  [personal_use "Personal Use"
   (let [valid_purposes (: (List Text)
                           (list "personal"
                                 "private"
                                 "non-commercial"))]
     ($.paragraph (list (format "use of " (get@ #term licensed_work) " by an individual solely for his or her " ($.and valid_purposes) " purposes")
                        (format "An individual's use of " (get@ #term licensed_work) " in his or her capacity as an " ($.or individual_capacities) " does not qualify"))))]

  [serve "Serve"
   ($.paragraph (list (format "to deliver " (get@ #term licensed_work)
                              " and/or any " (get@ #term extension)
                              " by means of a computer network to one or more computers for purposes of execution of " (get@ #term licensed_work)
                              ", and/or the " (get@ #term extension))))]

  [research "Research"
   ($.paragraph (list (format "investigation or experimentation for the purpose of understanding the nature and limits of " (get@ #term licensed_work) " and its potential uses")))]

  [deploy "Deploy"
   (let [deployment_types (: (List Text)
                             (list "use"
                                   (get@ #term serve)
                                   "sublicense"
                                   "distribute"))
         sub_licensing (: (-> Text Text)
                          (function (_ type)
                            (format type " sublicensing")))
         third_party_interactions (: (List Text)
                                     (list (sub_licensing "direct")
                                           (sub_licensing "indirect")
                                           "distribution"))
         basic_definition (format "to " ($.or deployment_types)
                                  " " (get@ #term licensed_work)
                                  " other than for internal " (get@ #term research)
                                  " and/or " (get@ #term personal_use)
                                  " by " (get@ #term recipient))
         examples (format "any and all internal use or distribution of " (get@ #term licensed_work)
                          " within a business or organization in which " (get@ #term recipient)
                          " participates")
         exceptions (format "for " (get@ #term research) " and/or " (get@ #term personal_use))]
     ($.paragraph (list (format basic_definition
                                ", and includes without limitation, " examples
                                ", other than " exceptions
                                ", as well as " ($.or third_party_interactions)
                                " of " (get@ #term licensed_work)
                                " by " (get@ #term recipient)
                                " to any third party in any form or manner"))))]

  [electronic_distribution_mechanism "Electronic Distribution Mechanism"
   ($.paragraph (list "a mechanism generally accepted in the software development community for the electronic transfer of data, such as download from an FTP server or web site, where such mechanism is publicly accessible"))]
  )

(def: .public all
  (List Definition)
  (list license
        licensable
        legal_entity
        recipient
        licensor
        source_code_form
        object_form
        licensed_work
        derivative_work
        submission
        modification
        required_component
        extension
        contribution
        contributor
        patent_claim
        secondary_license
        sell
        personal_use
        serve
        research
        deploy
        electronic_distribution_mechanism))
