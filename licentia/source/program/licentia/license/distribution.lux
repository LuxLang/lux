... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [data
    ["[0]" text
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid)]]]]]
 ["[0]" // (.only Distribution)
  ["_" term]
  [//
   ["$" document]]])

(def notices
  (List Text)
  (let [notices (is (-> Text Text)
                    (function (_ what)
                      (format what " notices")))]
    (list (notices "copyright")
          (notices "patent")
          (notices "trademark")
          (notices "attribution")
          (notices "disclaimer of warranty")
          (notices "limitation of liability")
          (notices "other"))))

(def .public source_code_form
  (let [on_license_propagation (let [coverage (format "All distribution of " _.licensed_work " in " _.source_code_form)
                                     with_contributions (format "including any " ($.plural _.contribution)
                                                                " that " _.recipient
                                                                " creates")
                                     same_license (format "must be under the terms of " _.license)]
                                 (format coverage ", " with_contributions ", " same_license))
        on_license_access (let [responsibility_to_inform (format _.recipient
                                                                 " must inform recipients that the " _.source_code_form
                                                                 " of " _.licensed_work
                                                                 " is governed by the terms of " _.license)
                                license_copy (format "and how they can obtain a copy of " _.license)]
                            (format responsibility_to_inform ", " license_copy))
        on_license_immutability (format _.recipient
                                        " may not attempt to alter or restrict the recipientsâ€™ rights in the " _.source_code_form
                                        ", as specified in " _.license)
        on_notice_retention (let [obligation (format _.recipient " must retain")
                                  location (format "in the " _.source_code_form
                                                   " of any " _.extension
                                                   " that " _.recipient
                                                   " distributes")
                                  what (format "all " ($.and notices) " from the " _.source_code_form " of " _.licensed_work)
                                  exclusion ($.or (list (format "those notices that do not pertain to any part of the " _.extension)
                                                        "those notices that contain known factual inaccuracies"))]
                              (format obligation ", " location ", " what ", excluding " exclusion))
        on_additional_notices (let [right (format _.recipient
                                                  " may add additional "($.and notices)
                                                  " within an " _.extension
                                                  " that " _.recipient
                                                  " distributes")
                                    constraint (format "such additional " ($.and notices) " cannot be construed as modifying " _.license)]
                                (format right ", provided that " constraint))]
    ($.paragraph (list on_license_propagation
                       on_license_access
                       on_license_immutability
                       on_notice_retention
                       on_additional_notices))))

(def .public object_form
  (let [on_responsibility (let [condition (format "If " _.recipient
                                                  " distributes " _.licensed_work
                                                  " in " _.object_form)
                                responsibility (let [availability_responsibility (format _.licensed_work " must also be made available in " _.source_code_form)
                                                     source_code_responsibility (format _.recipient
                                                                                        " must inform recipients of the " _.object_form
                                                                                        " how they can obtain a copy of such " _.source_code_form)
                                                     constraints "by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient"]
                                                 (format availability_responsibility ", and " source_code_responsibility " " constraints))]
                            (format condition " then " responsibility))
        on_licensing (format _.recipient
                             " may distribute such " _.object_form
                             " under the terms of "_.license)]
    ($.paragraph (list on_responsibility
                       on_licensing))))

(def .public allow_re_licensing
  (let [can_license (format _.recipient
                            " may create and distribute an " _.extension
                            " under terms " _.recipient
                            " chooses")
        requirement (format _.recipient
                            " also comply with the requirements of " _.license
                            " for the " _.licensed_work)]
    (format can_license ", " "provided that " requirement)))

(def .public allow_multi_licensing
  (let [condition (format "the " _.extension " is a combination of " _.licensed_work " with a work governed by one or more " ($.plural _.secondary_license))
        permission (let [relicensing (format _.license
                                             " permits " _.recipient
                                             " to additionally distribute " _.licensed_work
                                             " under the terms of such " ($.plural _.secondary_license))
                         distribution (format "so that the recipient of the " _.extension
                                              " may, at their option, further distribute " _.licensed_work
                                              " under the terms of either " _.license
                                              " or such " ($.plural _.secondary_license))]
                     (format relicensing ", " distribution))]
    (format "If " condition ", " permission)))

(def .public (extension distribution)
  (-> Distribution Text)
  ($.paragraph (all list#composite
                    (if (its //.#can_re_license? distribution)
                      (list allow_re_licensing)
                      (list))
                    (if (its //.#can_multi_license? distribution)
                      (list allow_multi_licensing)
                      (list)))))
