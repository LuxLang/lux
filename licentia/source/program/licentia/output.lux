(.module:
  [lux (#- Definition)
   [data
    ["." maybe ("#\." functor)]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor monoid)]]]]
  [//
   ["." license (#+ Identification
                    Termination
                    Liability
                    Distribution
                    Commercial
                    Extension
                    Entity Black_List
                    URL Attribution
                    License)
    ["." copyright]
    ["." definition (#+ Definition)]
    ["." grant]
    ["." limitation]
    ["." assurance]
    ["." liability]
    ["." distribution]
    ["." commercial]
    ["." extension]
    ["." submission]
    ["." miscellaneous]
    ["." black_list]
    ["." notice]
    ["_" term]
    ["." addendum]]
   ["$" document]])

(def: #export (definition value)
  (-> Definition Text)
  (format ($.quote (get@ #definition.term value)) ": " (get@ #definition.meaning value)))

(def: #export (identification value)
  (-> Identification Text)
  (format (get@ #license.name value) text.new_line
          (get@ #license.version value)))

(def: #export (grant termination)
  (-> Termination Text)
  (`` (format (~~ (template [<title> <content>]
                    [($.block ($.section {#$.title <title>
                                          #$.content <content>}))]
                    
                    ["Grant of Copyright License"
                     grant.copyright]
                    
                    ["Grant of Patent License"
                     (grant.patent (get@ #license.patent_retaliation? termination))]
                    
                    ["Effective Date for the Grants"
                     grant.date]

                    ["Grant Termination"
                     (grant.termination (get@ #license.termination_period termination)
                                        (get@ #license.grace_period termination))]

                    ["No Retroactive Effect of Termination"
                     grant.no_retroactive_termination])))))

(def: #export limitation
  Text
  (`` (format (~~ (template [<title> <content>]
                    [($.block ($.section {#$.title <title>
                                          #$.content <content>}))]
                    
                    ["Limitations on Grant Scope"
                     limitation.grant]
                    
                    ["Limitations on Trademarks"
                     limitation.trademark]

                    [(format "Limitations on " ($.plural _.secondary_license))
                     limitation.secondary_licenses])))))

(def: #export assurance
  Text
  (`` (format (~~ (template [<title> <content>]
                    [($.block ($.section {#$.title <title>
                                          #$.content <content>}))]
                    
                    ["Representation"
                     assurance.representation]
                    
                    ["Fair Use"
                     assurance.fair_use])))))

(def: #export (liability value)
  (-> Liability Text)
  (`` (format (~~ (template [<title> <condition> <content>]
                    [(if <condition>
                       ($.block ($.section {#$.title <title>
                                            #$.content <content>}))
                       "")]

                    ["Disclaimer of Warranty"
                     on
                     liability.warranty]
                    
                    ["Limitation of Liability"
                     on
                     liability.limitation]
                    
                    ["Litigation"
                     on
                     liability.litigation]
                    
                    ["Accepting Warranty or Additional Liability"
                     (get@ #license.can_accept? value)
                     liability.can_accept]

                    ["High Risk Activities"
                     (get@ #license.disclaim_high_risk? value)
                     liability.disclaim_high_risk])))))

(def: #export (distribution distribution)
  (-> Distribution Text)
  (`` (format (~~ (template [<title> <condition> <content>]
                    [(if <condition>
                       ($.block ($.section {#$.title <title>
                                            #$.content <content>}))
                       "")]
                    
                    [(format "Distribution of a " _.source_code_form)
                     on
                     distribution.source_code_form]
                    
                    [(format "Distribution of an " _.object_form)
                     on
                     distribution.object_form]
                    
                    [(format "Distribution of an " _.extension)
                     (or (get@ #license.can_re_license? distribution)
                         (get@ #license.can_multi_license? distribution))
                     (distribution.extension distribution)])))))

(def: #export (commercial value)
  (-> Commercial Text)
  (`` (format (~~ (template [<title> <condition> <content>]
                    [(if <condition>
                       ($.block ($.section {#$.title <title>
                                            #$.content <content>}))
                       "")]

                    ["Non-Commerciality"
                     (not (get@ #license.can_sell? value))
                     commercial.cannot_sell]

                    [(format _.contributor " Attribution")
                     (get@ #license.require_contributor_credit? value)
                     commercial.require_contributor_attribution]

                    [(format _.contributor " Endorsement")
                     (not (get@ #license.allow_contributor_endorsement? value))
                     commercial.disallow_contributor_endorsement]
                    )))))

(def: #export (extension value)
  (-> Extension Text)
  (let [[show? document] (case (get@ #license.notification_period value)
                           (#.Some period)
                           [true (extension.notification_requirement period)]

                           #.None
                           [false ""])]
    (`` (format (~~ (template [<condition> <title> <content>]
                      [(if <condition>
                         ($.block ($.section {#$.title <title>
                                              #$.content <content>}))
                         "")]

                      [(get@ #license.same_license? value) "License Retention"
                       ($.paragraph (list\compose extension.sharing_requirement
                                                  extension.license_conflict_resolution))]
                      
                      [(get@ #license.must_be_distinguishable? value) (format _.extension " Distinctness")
                       extension.distinctness_requirement]
                      
                      [show? (format _.source_code_form " Availability")
                       document]
                      
                      [(get@ #license.must_describe_modifications? value) (format "Description of " ($.plural _.modification))
                       extension.description_requirement]))))))

(def: #export (attribution value)
  (-> Attribution Text)
  (let [copyright_notice (format "Attribution Copyright Notice: " (get@ #license.copyright_notice value))
        phrase (case (get@ #license.phrase value)
                 (#.Some phrase)
                 (format text.new_line "Attribution Phrase: " phrase text.new_line)

                 #.None
                 "")
        url (format text.new_line "Attribution URL: " (get@ #license.url value))
        image (case (get@ #license.image value)
                (#.Some image)
                (format text.new_line "Attribution Image: " image)

                #.None
                "")]
    (format copyright_notice
            phrase
            url
            image)))

(def: #export (miscellaneous identified?)
  (-> Bit Text)
  (`` (format (~~ (template [<title> <condition> <content>]
                    [(if <condition>
                       ($.block ($.section {#$.title <title>
                                            #$.content <content>}))
                       "")]

                    ["Entire Agreement"
                     on
                     miscellaneous.entire_agreement]

                    ["Relationship of Parties"
                     on
                     miscellaneous.relationship_of_parties]

                    ["Independent Development"
                     on
                     miscellaneous.independent_development]

                    ["Consent To Breach Not Waiver"
                     on
                     miscellaneous.not_waiver]
                    
                    ["Severability"
                     on
                     miscellaneous.severability]

                    ["Export Restrictions"
                     on
                     miscellaneous.export_restrictions]

                    [(format "Versions of " _.license)
                     identified?
                     miscellaneous.new_versions]
                    )))))

(def: black_list_spacing (format text.new_line text.new_line))

(def: #export (license value)
  (-> License Text)
  (let [identification (|> value
                           (get@ #license.identification)
                           (maybe\map ..identification)
                           (maybe.default ""))
        identified? (case (get@ #license.identification value)
                      (#.Some _)
                      true

                      #.None
                      false)]
    (`` (format ($.block identification)
                ($.block (notice.copyright (get@ #license.copyright_holders value)))
                
                (case (get@ #license.black_lists value)
                  #.Nil
                  ""

                  black_lists
                  ($.block ($.section {#$.title (format "Denial of " _.license)
                                       #$.content (|> black_lists
                                                      (list\map black_list.black_list)
                                                      (text.join_with ..black_list_spacing))})))
                
                ($.section {#$.title "Definitions"
                            #$.content (|> definition.all
                                           (list\map (|>> ..definition $.block))
                                           (text.join_with ""))})

                ($.block ($.section {#$.title (format "Acceptance of " _.license)
                                     #$.content limitation.acceptance}))

                (..grant (get@ #license.termination value))
                ..limitation
                ..assurance

                ($.block ($.section {#$.title (format _.submission " of " ($.plural _.contribution))
                                     #$.content submission.contribution}))

                (..liability (get@ #license.liability value))
                (..distribution (get@ #license.distribution value))
                (..commercial (get@ #license.commercial value))
                (..extension (get@ #license.extension value))

                (|> value
                    (get@ #license.attribution)
                    (maybe\map (|>> ..attribution
                                    ["Attribution Information"]
                                    $.section
                                    $.block))
                    (maybe.default ""))

                (..miscellaneous identified?)

                (addendum.output (get@ #license.addendum value))
                
                notice.end_of_license
                ))))
