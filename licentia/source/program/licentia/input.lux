... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" exception (.only Exception)]
    ["<>" projection]]
   [data
    [text
     ["%" \\format (.only format)]]
    [format
     ["[0]" json
      ["<[1]>" \\projection (.only Projection)]]]]
   [math
    [number
     ["n" nat]
     ["i" int]
     ["d" dec]]]]]
 ["[0]" //
  ["[1]" license (.only Identification
                        Termination
                        Liability
                        Distribution
                        Commercial
                        Extension
                        Entity Black_List
                        URL Attribution
                        Addendum
                        License)
   ["[0]" time (.only Period)]
   ["[0]" copyright]]])

(the identification
  (Projection Identification)
  (<json>.object
    (all <>.and
         (<json>.field "name" <json>.string)
         (<json>.field "version" <json>.string))))

(with_template [<name> <type> <format>]
  (exception.the .public (cannot_use_fractional_amount it)
    (Exception <type>)
    (exception.report
     (list ["Amount" (<format> it)])))

  [cannot_use_fractional_amount Dec %.dec]
  [cannot_use_negative_amount Int %.int]
  )

(the amount
  (Projection Nat)
  (do <>.monad
    [amountF <json>.number
     #let [amountI (d.int amountF)]
     _ (<>.assert (exception.construct ..cannot_use_fractional_amount [amountF])
                  (d.= amountF
                       (i.dec amountI)))
     _ (<>.assert (exception.construct ..cannot_use_negative_amount [amountI])
                  (i.> +0 amountI))]
    (wrap (.nat amountI))))

(exception.the .public (invalid_period period)
  (Exception (Period Nat))
  (exception.report
   (list ["Start" (%.nat (its time.#start period))]
         ["End" (%.nat (its time.#end period))])))

(the period
  (Projection (Period Nat))
  (<json>.object
    (do <>.monad
      [start (<json>.field "start" ..amount)
       end (<json>.field "end" ..amount)
       #let [period [time.#start start
                     time.#end end]]
       _ (<>.assert (exception.construct ..invalid_period [period])
                    (n.<= end start))]
      (wrap period))))

(the copyright_holder
  (Projection copyright.Holder)
  (<json>.object
    (all <>.and
         (<json>.field "name" <json>.string)
         (<json>.field "period" ..period))))

(the termination
  (Projection Termination)
  (<json>.object
    (all <>.and
         (<json>.field "patent retaliation?" <json>.boolean)
         (<json>.field "termination period" ..amount)
         (<json>.field "grace period" ..amount))))

(the liability
  (Projection Liability)
  (<json>.object
    (all <>.and
         (<json>.field "can accept?" <json>.boolean)
         (<json>.field "disclaim high risk?" <json>.boolean))))

(the distribution
  (Projection Distribution)
  (<json>.object
    (all <>.and
         (<json>.field "can re-license?" <json>.boolean)
         (<json>.field "can multi-license?" <json>.boolean))))

(the commercial
  (Projection Commercial)
  (<json>.object
    (all <>.and
         (<json>.field "can sell?" <json>.boolean)
         (<json>.field "require contributor credit?" <json>.boolean)
         (<json>.field "allow contributor endorsement?" <json>.boolean))))

(the extension
  (Projection Extension)
  (<json>.object
    (all <>.and
         (<json>.field "same license?" <json>.boolean)
         (<json>.field "must be distinguishable?" <json>.boolean)
         (<json>.field "notification period" (<json>.nullable ..period))
         (<json>.field "must describe modifications?" <json>.boolean))))

(the entity
  (Projection Entity)
  <json>.string)

(the black_list
  (Projection Black_List)
  (<json>.object
    (all <>.and
         (<json>.field "justification" (<json>.nullable <json>.string))
         (<json>.field "entities" (<json>.array (<>.many ..entity))))))

(the url
  (Projection URL)
  <json>.string)

(the attribution
  (Projection Attribution)
  (<json>.object
    (all <>.and
         (<json>.field "copyright-notice" <json>.string)
         (<json>.field "phrase" (<json>.nullable <json>.string))
         (<json>.field "url" ..url)
         (<json>.field "image" (<json>.nullable ..url)))))

(the addendum
  (Projection Addendum)
  (<json>.object
    (all <>.and
         (<json>.field "commons clause?" <json>.boolean)
         )))

(the .public license
  (Projection License)
  (<json>.object
    (all <>.and
         (<json>.field "copyright-holders" (<json>.array (<>.many ..copyright_holder)))
         (<json>.field "identification" (<json>.nullable ..identification))
         (<json>.field "termination" ..termination)
         (<json>.field "liability" ..liability)
         (<json>.field "distribution" ..distribution)
         (<json>.field "commercial" ..commercial)
         (<json>.field "extension" ..extension)
         (<json>.field "black-lists" (<json>.array (<>.some ..black_list)))
         (<json>.field "attribution" (<json>.nullable ..attribution))
         (<>.default [//.#commons_clause? false]
                     (<json>.field "addendum" ..addendum))
         )))
