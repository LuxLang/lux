... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [program (.only program)]
   ["[0]" ffi]
   ["[0]" debug]
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" io (.only IO io)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [concurrency
    ["[0]" future (.only Future)]]
   ["[0]" function]
   [data
    ["[0]" maybe (.use "[1]:[0]" monad)]
    ["[0]" product]
    [text
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" array]
     ["[0]" list]]]
   [math
    [number
     ["[0]" /64 (.only)
      ["n" natural]
      ["i" integer]]]]
   ["[0]" world
    ["[0]" file]
    ["[0]" environment]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   ["[0]" target (.only)
    ["_" js]]
   [compiler
    [type (.only Register)]
    ["[0]" program]
    [language
     [lux
      [program (.only Program)]
      [translation (.only Host)]
      [analysis
       [macro (.only Expander)]]
      ["[0]" phase (.only Operation Phase)
       ["[0]" extension (.only Extender Handler)
        ["[0]" analysis
         ["[1]" js]]
        ["[0]" translation
         ["[1]" js]]]
       [translation
        ["[0]" reference]
        ["[0]" js (.only)
         ["[0]" runtime]
         ["[1]/[0]" reference]]]]]]
    [default
     ["[0]" platform (.only Platform)]]
    [meta
     ["[0]" cli]
     ["[0]" context]
     [archive (.only Archive)
      ["[0]" unit]]
     ["[0]" packager
      ["[1]" script]]]]]])

(exception.the (null_has_no_representation code)
  (Exception (Maybe _.Expression))
  (when code
    {.:Some code}
    (_.code code)

    {.:None}
    "???"))

(target.if target.jvm
           (these (ffi.the java/lang/String
                    "[1]:[0]")

                  (ffi.the (java/lang/Class a)
                    "[1]:[0]")

                  (ffi.the java/lang/Object
                    "[1]:[0]"
                    (toString [] java/lang/String)
                    (getClass [] (java/lang/Class java/lang/Object)))

                  (ffi.the java/lang/Long
                    "[1]:[0]"
                    (intValue [] int))

                  (ffi.the java/lang/Integer
                    "[1]:[0]"
                    (longValue [] long))

                  (ffi.the java/lang/Number
                    "[1]:[0]"
                    (intValue [] int)
                    (longValue [] long)
                    (doubleValue [] double))

                  (ffi.the java/util/Arrays
                    "[1]:[0]"
                    ("static" [t] copyOfRange [[t] int int] [t]))

                  (ffi.the javax/script/ScriptEngine
                    "[1]:[0]"
                    (eval [java/lang/String] "try" "?" java/lang/Object))

                  (ffi.the javax/script/ScriptEngineFactory
                    "[1]:[0]"
                    (getScriptEngine [] javax/script/ScriptEngine))

                  (ffi.the org/openjdk/nashorn/api/scripting/NashornScriptEngineFactory
                    "[1]:[0]"
                    (new []))

                  (ffi.the org/openjdk/nashorn/api/scripting/JSObject
                    "[1]:[0]"
                    (isArray [] boolean)
                    (isFunction [] boolean)
                    (getSlot [int] "?" java/lang/Object)
                    (getMember [java/lang/String] "?" java/lang/Object)
                    (hasMember [java/lang/String] boolean)
                    (call ["?" java/lang/Object [java/lang/Object]] "try" java/lang/Object))

                  (ffi.the org/openjdk/nashorn/api/scripting/AbstractJSObject
                    "[1]:[0]")

                  (ffi.the org/openjdk/nashorn/api/scripting/ScriptObjectMirror
                    "[1]:[0]"
                    (size [] int)
                    (toString [] java/lang/String)
                    (getOwnKeys [boolean] [java/lang/String]))

                  (ffi.the org/openjdk/nashorn/internal/runtime/Undefined
                    "[1]:[0]"
                    ("static" getUndefined [] org/openjdk/nashorn/internal/runtime/Undefined))

                  (template.with [<name>]
                    [(ffi.interface <name>
                                    (getValue [] java/lang/Object))

                     (ffi.the <name>
                       "[1]:[0]"
                       (getValue [] java/lang/Object))]

                    [[IntegerValue]
                     [StructureValue]]
                    )

                  (exception.the (unknown_member [member object])
                    (Exception [Text java/lang/Object])
                    (exception.report
                     (list ["Member" member]
                           ["Object" (debug.inspection object)])))

                  (the jvm_integer
                    (-> (I64 Any) java/lang/Integer)
                    (|>> .integer
                         ffi.as_long
                         (java/lang/Long:intValue [])))

                  (the (js_integer value)
                    (-> Integer org/openjdk/nashorn/api/scripting/JSObject)
                    (<| (ffi.is org/openjdk/nashorn/api/scripting/JSObject)
                        (ffi.object [] org/openjdk/nashorn/api/scripting/AbstractJSObject [IntegerValue]
                          []
                          ... Methods
                          (IntegerValue
                           [] (getValue self []) java/lang/Object
                           (ffi.is java/lang/Object (ffi.as_long value)))
                          (org/openjdk/nashorn/api/scripting/AbstractJSObject
                           [] (getMember self [member java/lang/String]) java/lang/Object
                           (when (ffi.of_string member)
                             runtime.i64_high_field
                             (|> value
                                 .natural
                                 runtime.high
                                 jvm_integer
                                 (ffi.is java/lang/Object))

                             runtime.i64_low_field
                             (|> value
                                 .natural
                                 runtime.low
                                 jvm_integer
                                 (ffi.is java/lang/Object))

                             _
                             (halt! (exception.error ..unknown_member [(ffi.of_string member)
                                                                       (ffi.is java/lang/Object (ffi.as_long value))]))))
                          )))

                  (the (method_for_toString js_object)
                    (-> Any org/openjdk/nashorn/api/scripting/JSObject)
                    (<| (ffi.is org/openjdk/nashorn/api/scripting/JSObject)
                        (ffi.object [] org/openjdk/nashorn/api/scripting/AbstractJSObject []
                          []
                          (org/openjdk/nashorn/api/scripting/AbstractJSObject
                           [] (isFunction self []) boolean
                           (ffi.as_boolean true))
                          (org/openjdk/nashorn/api/scripting/AbstractJSObject
                           [] (call self [this java/lang/Object
                                          args [java/lang/Object]])
                           java/lang/Object
                           (|> js_object
                               debug.inspection
                               ffi.as_string
                               (ffi.is java/lang/Object)))
                          )))

                  (the (method_for_slice js_object value)
                    (-> (-> java/lang/Object org/openjdk/nashorn/api/scripting/JSObject) (Array java/lang/Object) org/openjdk/nashorn/api/scripting/JSObject)
                    (<| (ffi.is org/openjdk/nashorn/api/scripting/JSObject)
                        (ffi.object [] org/openjdk/nashorn/api/scripting/AbstractJSObject []
                          []
                          (org/openjdk/nashorn/api/scripting/AbstractJSObject
                           [] (isFunction self []) boolean
                           (ffi.as_boolean true))
                          (org/openjdk/nashorn/api/scripting/AbstractJSObject
                           [] (call self [this java/lang/Object
                                          args [java/lang/Object]])
                           java/lang/Object
                           (|> (java/util/Arrays:copyOfRange [value
                                                              (ffi.as_int (when (array.size args)
                                                                            0
                                                                            +0
                                                                            
                                                                            else
                                                                            (|> args
                                                                                (array.item 0)
                                                                                try.trusted
                                                                                (as (-> Any Integer)))))
                                                              (ffi.as_int (.integer (array.size value)))])
                               (as (-> Any java/lang/Object))
                               js_object
                               (ffi.is java/lang/Object)))
                          )))

                  (the (js_structure value)
                    (-> (Array java/lang/Object)
                        org/openjdk/nashorn/api/scripting/JSObject)
                    (let [js_object (is (-> java/lang/Object org/openjdk/nashorn/api/scripting/JSObject)
                                        (function (_ sub_value)
                                          (<| (when (ffi.as [java/lang/Object] sub_value)
                                                {.:Some sub_value}
                                                (|> sub_value
                                                    (as (-> Any (Array java/lang/Object)))
                                                    js_structure)

                                                {.:None})
                                              (when (ffi.as java/lang/Long sub_value)
                                                {.:Some sub_value}
                                                (|> sub_value
                                                    ffi.of_long
                                                    js_integer)

                                                {.:None})
                                              ... else
                                              (as (-> Any org/openjdk/nashorn/api/scripting/JSObject) sub_value))))]
                      (<| (ffi.is org/openjdk/nashorn/api/scripting/JSObject)
                          (ffi.object [] org/openjdk/nashorn/api/scripting/AbstractJSObject [StructureValue]
                            []
                            ... Methods
                            (StructureValue
                             [] (getValue self [])
                             java/lang/Object
                             (as (-> Any java/lang/Object) value))
                            (org/openjdk/nashorn/api/scripting/AbstractJSObject
                             [] (isArray self [])
                             boolean
                             (ffi.as_boolean true))
                            (org/openjdk/nashorn/api/scripting/AbstractJSObject
                             [] (getMember self [member java/lang/String])
                             java/lang/Object
                             (when (ffi.of_string member)
                               (^.or "toJSON" "toString")
                               (|> (method_for_toString value)
                                   (ffi.is java/lang/Object))
                               
                               "length"
                               (|> value
                                   array.size
                                   jvm_integer
                                   (ffi.is java/lang/Object))
                               
                               "slice"
                               (|> (method_for_slice js_object value)
                                   (ffi.is java/lang/Object))

                               runtime.variant_lefts_field
                               (|> value
                                   (array.item 0)
                                   try.trusted)
                               
                               runtime.variant_right?_field
                               (when (array.item 1 value)
                                 {try.:Success set!}
                                 set!

                                 {try.:Failure _}
                                 (ffi.null))
                               
                               runtime.variant_choice_field
                               (|> value
                                   (array.item 2)
                                   try.trusted
                                   js_object
                                   (ffi.is java/lang/Object))
                               
                               _
                               (halt! (exception.error ..unknown_member [(as (-> Any Text) member) (as (-> Any java/lang/Object) value)]))))
                            (org/openjdk/nashorn/api/scripting/AbstractJSObject
                             [] (getSlot self [idx int])
                             java/lang/Object
                             (let [index (|> idx
                                             (java/lang/Integer:longValue [])
                                             (as (-> Any Natural)))]
                               (if (n.< (array.size value) index)
                                   (|> value
                                       (array.item index)
                                       try.trusted
                                       js_object
                                       (as (-> Any java/lang/Object)))
                                   (|> (org/openjdk/nashorn/internal/runtime/Undefined:getUndefined [])
                                       (as (-> Any java/lang/Object))))))
                            ))))

                  (exception.the undefined_has_no_representation)

                  (exception.the (unknown_kind_of_host_object [object])
                    (Exception [java/lang/Object])
                    (exception.report
                     (list ["Class" (ffi.of_string (java/lang/Object:toString [] (java/lang/Object:getClass [] object)))]
                           ["Object" (ffi.of_string (java/lang/Object:toString [] object))]
                           ["Keys" (when (ffi.as org/openjdk/nashorn/api/scripting/ScriptObjectMirror object)
                                     {.:Some object}
                                     (|> object
                                         (org/openjdk/nashorn/api/scripting/ScriptObjectMirror:getOwnKeys [true])
                                         (list.of_array {.:None})
                                         (list.as_text (|>> ffi.of_string %.text)))
                                     
                                     {.:None}
                                     "???")])))

                  (the (i32 half i64)
                    (-> Text org/openjdk/nashorn/api/scripting/ScriptObjectMirror (Maybe Integer))
                    (|> i64
                        (org/openjdk/nashorn/api/scripting/JSObject:getMember [(ffi.as_string half)])
                        (maybe:each (|>> (ffi.as java/lang/Number)))
                        maybe:conjoint
                        (maybe:each (|>> (java/lang/Number:longValue []) ffi.of_long))))

                  (the (check_integer js_object)
                    (-> org/openjdk/nashorn/api/scripting/ScriptObjectMirror
                        (Maybe Integer))
                    (when [(..i32 runtime.i64_high_field js_object)
                           (..i32 runtime.i64_low_field js_object)]
                      [{.:Some high} {.:Some low}]
                      {.:Some (.integer (n.+ (|> high .natural (/64.<< 32))
                                             (if (i.< +0 (.integer low))
                                                 (|> low .natural (/64.<< 32) (/64.>> 32))
                                                 (.natural low))))}

                      _
                      {.:None}))

                  (the (check_variant lux_object js_object)
                    (-> (-> java/lang/Object (Try Any))
                        org/openjdk/nashorn/api/scripting/ScriptObjectMirror
                        (Maybe Any))
                    (when [(org/openjdk/nashorn/api/scripting/JSObject:getMember [(ffi.as_string runtime.variant_lefts_field)] js_object)
                           (org/openjdk/nashorn/api/scripting/JSObject:getMember [(ffi.as_string runtime.variant_right?_field)] js_object)
                           (org/openjdk/nashorn/api/scripting/JSObject:getMember [(ffi.as_string runtime.variant_choice_field)] js_object)]
                      (^.multi [{.:Some tag} ?flag {.:Some value}]
                               [[(ffi.as java/lang/Number tag) (lux_object value)]
                                [{.:Some tag} {try.:Success value}]])
                      {.:Some [(java/lang/Number:intValue [] (as (-> Any java/lang/Number) tag))
                               (maybe.else (ffi.null) ?flag)
                               value]}

                      _
                      {.:None}))

                  (the (check_tuple lux_object js_object)
                    (-> (-> java/lang/Object (Try Any))
                        org/openjdk/nashorn/api/scripting/ScriptObjectMirror
                        (Maybe (Array java/lang/Object)))
                    (if (ffi.of_boolean (org/openjdk/nashorn/api/scripting/JSObject:isArray [] js_object))
                        (let [num_keys (.natural (ffi.of_int (org/openjdk/nashorn/api/scripting/ScriptObjectMirror:size [] js_object)))]
                          (loop (of [idx 0
                                     output (is (Array java/lang/Object)
                                                (array.empty num_keys))])
                            (if (n.< num_keys idx)
                                (when (org/openjdk/nashorn/api/scripting/JSObject:getMember [(ffi.as_string (%.natural idx))] js_object)
                                  {.:Some member}
                                  (when (ffi.as org/openjdk/nashorn/internal/runtime/Undefined member)
                                    {.:Some _}
                                    (of (++ idx) output)

                                    {.:None}
                                    (when (lux_object member)
                                      {try.:Success parsed_member}
                                      (of (++ idx) (array.has! idx (as (-> Any java/lang/Object) parsed_member) output))

                                      {try.:Failure error}
                                      {.:None}))

                                  {.:None}
                                  (of (++ idx) output))
                                {.:Some output})))
                        {.:None}))

                  (the (lux_object js_object)
                    (-> java/lang/Object
                        (Try Any))
                    (`` (<| (if (ffi.null? js_object)
                                (exception.except ..null_has_no_representation [{.:None}]))
                            (when (ffi.as org/openjdk/nashorn/internal/runtime/Undefined js_object)
                              {.:Some _}
                              (exception.except ..undefined_has_no_representation [])

                              {.:None})
                            (,, (template.with [<class>]
                                  [(when (ffi.as <class> js_object)
                                     {.:Some js_object}
                                     {try.:Success js_object}

                                     {.:None})]

                                  [[java/lang/Boolean]
                                   [java/lang/String]]
                                  ))
                            (,, (template.with [<class> <method>]
                                  [(when (ffi.as <class> js_object)
                                     {.:Some js_object}
                                     {try.:Success (|> js_object <method>)}

                                     {.:None})]

                                  [[java/lang/Number (java/lang/Number:doubleValue [])]
                                   [StructureValue (StructureValue:getValue [])]
                                   [IntegerValue (IntegerValue:getValue [])]]
                                  ))
                            (when (ffi.as org/openjdk/nashorn/api/scripting/ScriptObjectMirror js_object)
                              {.:Some js_object}
                              (when (check_integer js_object)
                                {.:Some value}
                                {try.:Success value}

                                {.:None}
                                (when (check_variant lux_object js_object)
                                  {.:Some value}
                                  {try.:Success value}

                                  {.:None}
                                  (when (check_tuple lux_object js_object)
                                    {.:Some value}
                                    {try.:Success value}

                                    {.:None}
                                    (if (ffi.of_boolean (org/openjdk/nashorn/api/scripting/JSObject:isFunction [] js_object))
                                        {try.:Success js_object}
                                        ... (exception.except ..unknown_kind_of_host_object [(as (-> Any java/lang/Object) js_object)])
                                        {try.:Success js_object}
                                        ))))
                              {.:None})
                            ... else
                            ... (exception.except ..unknown_kind_of_host_object [(as (-> Any java/lang/Object) js_object)])
                            {try.:Success js_object}
                            )))

                  (the (ensure_function function)
                    (-> Any (Maybe org/openjdk/nashorn/api/scripting/JSObject))
                    (monad.let maybe.monad
                      [function (|> function
                                    (as (-> Any java/lang/Object))
                                    (ffi.as org/openjdk/nashorn/api/scripting/JSObject))]
                      (if (ffi.of_boolean (org/openjdk/nashorn/api/scripting/JSObject:isFunction [] function))
                          {.:Some function}
                          {.:None})))
                  )

           target.js
           (these))

(target.if target.jvm
           (these (the (call_macro inputs lux macro)
                    (-> (List Code) Lux org/openjdk/nashorn/api/scripting/JSObject
                        (Try (Try [Lux (List Code)])))
                    (let [to_js (is (-> Any java/lang/Object)
                                    (|>> (as (-> Any (Array java/lang/Object)))
                                         js_structure
                                         (as (-> Any java/lang/Object))))]
                      (<| (as (-> Any (Try (Try [Lux (List Code)]))))
                          (org/openjdk/nashorn/api/scripting/JSObject:call [{.:None}
                                                                            (ffi.array java/lang/Object
                                                                                       [(to_js inputs)
                                                                                        (to_js lux)])]
                                                                           macro))))

                  (exception.the (cannot_apply_a_non_function object)
                    (Exception java/lang/Object)
                    (exception.report
                     (list ["Object" (ffi.of_string (java/lang/Object:toString [] object))])))

                  (the (expander macro inputs lux)
                    Expander
                    (when (..ensure_function macro)
                      {.:Some macro}
                      (when (call_macro inputs lux macro)
                        {try.:Success output}
                        (|> output
                            (as (-> Any java/lang/Object))
                            lux_object
                            (as (-> Any (Try (Try [Lux (List Code)])))))

                        {try.:Failure error}
                        {try.:Failure error})
                      
                      {.:None}
                      (exception.except ..cannot_apply_a_non_function (as (-> Any java/lang/Object) macro))))
                  )

           target.js
           (the (expander macro inputs lux)
             Expander
             {try.:Success ((as (-> Any Macro') macro) inputs lux)})
           )

(target.if target.jvm
           (these (the (evaluate! interpreter input)
                    (-> javax/script/ScriptEngine _.Expression (Try Any))
                    (monad.let try.monad
                      [?output (javax/script/ScriptEngine:eval [(ffi.as_string (_.code input))] interpreter)]
                      (when ?output
                        {.:Some output}
                        (..lux_object output)

                        {.:None}
                        (exception.except ..null_has_no_representation [{.:Some input}]))))

                  (the (execute! interpreter input)
                    (-> javax/script/ScriptEngine _.Statement (Try Any))
                    (monad.let try.monad
                      [?output (javax/script/ScriptEngine:eval [(ffi.as_string (_.code input))] interpreter)]
                      (pure [])))

                  (the (define! interpreter context custom input)
                    (-> javax/script/ScriptEngine unit.ID (Maybe Text) _.Expression (Try [Text Any _.Statement]))
                    (let [global (maybe.else (reference.artifact context)
                                             custom)
                          @global (_.var global)]
                      (monad.let try.monad
                        [.let [definition (_.define @global input)]
                         _ (execute! interpreter definition)
                         value (evaluate! interpreter @global)]
                        (pure [global value definition]))))

                  (the host
                    (IO (Host _.Expression _.Statement))
                    (io (let [interpreter (|> (org/openjdk/nashorn/api/scripting/NashornScriptEngineFactory:new [])
                                              (javax/script/ScriptEngineFactory:getScriptEngine []))]
                          (is (Host _.Expression _.Statement)
                              (implementation
                               (the (evaluate [_ input]) (..evaluate! interpreter input))
                               (the execute (..execute! interpreter))
                               (the (define context custom [_ input]) (..define! interpreter context custom input))

                               (the (ingest context content)
                                 (|> content
                                     (by utf8.binary of)
                                     try.trusted
                                     (as (-> Any _.Statement))))

                               (the (re_learn context custom content)
                                 (..execute! interpreter content))
                               
                               (the (re_load context custom content)
                                 (monad.let try.monad
                                   [_ (..execute! interpreter content)]
                                   (..evaluate! interpreter (_.var (reference.artifact context))))))))))
                  )

           target.js
           (these (the (eval code)
                    (-> Text (Try (Maybe Any)))
                    ... Note: I have to call "eval" this way
                    ... in order to avoid a quirk of calling eval in Node
                    ... when the code is running under "use strict";.
                    (try (let [return (.js_of# (function.identity (.js_constant# "eval")) [code])]
                           (if (.js_object_null?# return)
                               {.:None}
                               {.:Some return}))))
                  
                  (the (evaluate! input)
                    (-> _.Expression (Try Any))
                    (monad.let try.monad
                      [?output (..eval (_.code input))]
                      (when ?output
                        {.:Some output}
                        (pure output)

                        {.:None}
                        (exception.except ..null_has_no_representation [{.:Some input}]))))

                  (the (execute! input)
                    (-> _.Statement (Try Any))
                    (monad.let try.monad
                      [?output (..eval (_.code input))]
                      (pure [])))

                  (the (define! context custom input)
                    (-> unit.ID (Maybe Text) _.Expression (Try [Text Any _.Statement]))
                    (let [global (maybe.else (reference.artifact context)
                                             custom)
                          @global (_.var global)]
                      (monad.let try.monad
                        [.let [definition (_.define @global input)]
                         _ (..execute! definition)
                         value (..evaluate! @global)]
                        (pure [global value definition]))))

                  (the host
                    (IO (Host _.Expression _.Statement))
                    (io (is (Host _.Expression _.Statement)
                            (implementation
                             (the (evaluate [_ input]) (..evaluate! input))
                             (the execute ..execute!)
                             (the (define context custom [_ input]) (..define! context custom input))

                             (the (ingest context content)
                               (|> content
                                   (by utf8.binary of)
                                   try.trusted
                                   (as (-> Any _.Statement))))

                             (the (re_learn context custom content)
                               (..execute! content))
                             
                             (the (re_load context custom content)
                               (monad.let try.monad
                                 [_ (..execute! content)]
                                 (..evaluate! (_.var (reference.artifact context)))))))))
                  ))

(the phase_wrapper
  phase.Wrapper
  (target.if target.jvm
             ... The implementation for target.jvm is technically incorrect.
             ... However, the JS compiler runs fast enough on Node to be fully hosted there.
             ... And running the JS compiler on the JVM (on top of Nashorn) is impractically slow.
             ... This means that in practice, only the target.js implementation matters.
             ... And since no cross-language boundary needs to be handled, it's a sufficient implementation.
             (|>>)

             target.js
             (|>>)))

(the platform
  (IO (Platform [Register Text] _.Expression _.Statement))
  (monad.let io.monad
    [host ..host]
    (pure [platform.:file_system (target.if target.jvm (file.future file.default)
                                            ... TODO: Handle this in a safer manner.
                                            ... This would crash if the compiler was run on a browser.
                                            target.js (maybe.trusted file.default))
           platform.:host host
           platform.:phase js.expression
           platform.:runtime runtime.translate
           platform.:phase_wrapper ..phase_wrapper
           platform.:write (|>> _.code (by utf8.binary as))])))

(the (lux_program context program)
  (Program _.Expression _.Statement)
  (let [@process (_.var "process")
        on_node_js? (|> @process
                        _.type_of
                        (_.= (_.string "undefined"))
                        _.not
                        (_.and (_.its "argv" @process)))
        node_js_inputs (|> @process
                           (_.its "argv")
                           (_.do "slice" (list (_.int +2))))
        no_inputs (_.array (list))]
    (_.; (|> program
             (_.of (list (runtime.lux//program_args (_.? on_node_js?
                                                         node_js_inputs
                                                         no_inputs))))
             (_.of (list (_.string "")))))))

(target.if target.jvm
           (the extender
             Extender
             ... TODO: Stop relying on coercions ASAP.
             (<| (function (_ handler
                              phase
                              archive parameters
                              state))
                 (as (-> Any Try))
                 try.trusted
                 (as (-> Any Try))
                 (monad.let try.monad
                   [handler (try.of_maybe "Not an extension handler."
                                          (..ensure_function handler))
                    .let [to_js (is (-> Any java/lang/Object)
                                    (|>> (as (-> Any (Array java/lang/Object))) js_structure (as (-> Any java/lang/Object))))]
                    output (org/openjdk/nashorn/api/scripting/JSObject:call [{.:None}
                                                                             (ffi.array java/lang/Object
                                                                                        [(as (-> Any java/lang/Object) ..phase_wrapper)
                                                                                         (to_js archive)
                                                                                         (to_js parameters)
                                                                                         (to_js state)])]
                                                                            handler)]
                   (lux_object (as (-> Any java/lang/Object) output)))))

           target.js
           (the extender
             Extender
             (|>> as_expected)))

(the (declare_success! _)
  (-> Any
      (Future Any))
  (future.soon (by environment.default exit +0)))

(the scope
  (-> _.Statement
      _.Statement)
  (|>> (_.closure (list))
       (_.of (list))
       _.;))

(the (lux_compiler it)
  (-> Any platform.Custom)
  (undefined))

(the _
  (program [service cli.service]
    (let [context (context.js (cli.target service))]
      (exec
        (monad.let future.monad
          [platform (future.soon ..platform)
           _ (program.compiler ..lux_compiler
                               context
                               ..expander
                               analysis.bundle
                               (io.io platform)
                               translation.bundle
                               extension.empty
                               ..lux_program
                               (reference.constant js/reference.system)
                               ..extender
                               service
                               [(packager.package _.use_strict _.code _.then ..scope)
                                (text "program" (its context.:artifact_extension context))])]
          (..declare_success! []))
        (io.io [])))))
