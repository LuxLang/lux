... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://github.com/wlav/cppyy
(.require
 [library
  [lux (.except tuple)
   [program (.only program)]
   ["[0]" ffi (.only import)]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" monad)]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]
    ["[0]" io (.only IO io)]
    [concurrency
     ["[0]" async (.only Async)]
     ["[0]" atom]]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" array
      ["[1]" \\unsafe (.only Array)]]]]
   [math
    [number
     ["n" nat]
     ["i" int]
     ["[0]" i64]]]
   ["[0]" world
    ["[0]" file]
    ["[0]" environment]]
   [meta
    ["[0]" static]
    [macro
     ["^" pattern]
     ["[0]" template]]
    [compiler
     [target
      ["_" c++ (.only)
       [":" type]]]
     [language
      [lux
       [program (.only Program)]
       [translation (.only Host)]
       [analysis
        [macro (.only Expander)]]
       ["[0]" phase (.only Operation Phase)
        ["[0]" extension (.only Extender Handler)
         ... ["[0]" analysis
         ...  ["[1]" js]]
         ["[0]" translation
          ["[1]" c++]]]
        [translation
         ["[0]" reference]
         ["/" c++ (.only)
          ["[1][0]" runtime]
          ["[1][0]" primitive]
          ["[1][0]" reference]]]]]]
     [default
      ["[0]" platform (.only Platform)]]
     [meta
      ["[0]" cli]
      ["[0]" context]
      [archive (.only Archive)
       ["[0]" unit]
       ["[0]" module]]
      ["[0]" packager
       ["[1]" script]]]]]]]
 [program
  ["[0]" compositor]])

(every Globals
  Any)

(import cppyy
  "[1]::[0]"
  ("static" cppdef [Text] "io" "try" Bit)
  ("static" cppexec [Text] "io" "try" Bit)
  ("static" gbl Globals))

(ffi.import (getattr [Any Text] Any))

(ffi.import (tuple [(Array Any)] Any))

(ffi.import (str [Any] Text))

(the nested
  (-> Text
      Text)
  (let [\n\t (%.message text.\n text.\t)]
    (|>> (text.replaced text.\n \n\t)
         (%.message text.\t))))

(the module
  module.ID
  (-- 0))

(every Runtime
  Any)

(every Value
  Any)

(the (runtime globals)
  (-> Any
      Runtime)
  (getattr [globals /runtime.namespace]))

(with_template [<short> <type>]
  [(the (<short> @ it)
     (-> Runtime Any
         <type>)
     (let [on (as (-> Any
                      <type>)
                  (getattr [@ (template.symbol [/runtime._] [<short>])]))]
       (on it)))]

  [object_tag Nat]
  [lux_bit Bit]
  [lux_i64 Int]
  [lux_text Text]

  [variant::lefts Nat]
  [variant::right? Bit]
  [variant::choice Value]

  [tuple::arity Nat]
  )

(the (lux_variant lefts right? choice)
  (-> Nat Bit Value
      Any)
  (|> (array.empty 3)
      (array.has! 0 lefts)
      (array.has! 1 (if right?
                      []
                      (.python_object_none#)))
      (array.has! 2 choice)
      [] ..tuple))

(the (tuple::member @ member it)
  (-> Runtime Nat Any
      Value)
  (let [on (as (-> Nat Any
                   Value)
               (getattr [@ /runtime.tuple::member]))]
    (on member it)))

(the (lux_tuple @ lux_value input)
  (-> Runtime (-> Runtime Any Value) Any
      Any)
  (let [arity (tuple::arity @ input)]
    (loop (next [member 0
                 output (array.empty arity)])
      (if (n.< arity member)
        (next (++ member)
              (array.has! member (lux_value @ (tuple::member @ member input))
                          output))
        output))))

(the (lux_value @ it)
  (-> Runtime Value
      Any)
  (when (object_tag @ it)
    /runtime.bit_tag
    (lux_bit @ it)
    
    /runtime.i64_tag
    (lux_i64 @ it)
    
    ... /runtime.f64_tag

    /runtime.text_tag
    (..str [(lux_text @ it)])

    /runtime.variant_tag
    (lux_variant (variant::lefts @ it)
                 (variant::right? @ it)
                 (lux_value @ (variant::choice @ it)))
    
    /runtime.tuple_tag
    (lux_tuple @ lux_value it)
    
    /runtime.function_tag
    it

    tag
    (panic! (when tag
              2 "F64"
              _ "???"))))

(the host
  (IO (Host /runtime.Value /runtime.Declaration))
  (io (let [id (atom.atom 0)
            \n\t (%.message text.\n text.\t)
            evaluate! (is (-> [(Maybe unit.ID) /runtime.Value] (Try Any))
                          (function (evaluate! [_ input])
                            (let [[id _] (io.value (atom.update! ++ id))
                                  global (reference.artifact [..module id])
                                  definition (_.variable (_.local global) /runtime.value_type input)]
                              (exec
                                (.log!# "[evaluate!]")
                                (.log!# (..nested (_.code definition)))
                                (io.value
                                 (do (try.with io.monad)
                                   [_ (cppyy::cppdef (_.code definition))
                                    .let [globals (io.value (cppyy::gbl))
                                          it (lux_value (..runtime globals)
                                                        (getattr [globals global]))]
                                    _ (cppyy::cppexec (_.code (_.; (_.:= (_.local global) /runtime.unit))))]
                                   (in it)))))))
            execute! (is (-> /runtime.Declaration
                             (Try Any))
                         (function (execute! input)
                           (exec
                             (.log!# "[execute!]")
                             (.log!# (..nested (_.code input)))
                             (io.value (cppyy::cppdef (_.code input))))))]
        (is (Host /runtime.Value /runtime.Declaration)
            (implementation
             (the evaluate evaluate!)
             (the execute execute!)
             (the (define context custom [@def input])
               (let [global (maybe.else (reference.artifact context)
                                        custom)
                     @global (_.local global)]
                 (do try.monad
                   [.let [definition (<| (_.namespace {.#None})
                                         (_.constant @global /runtime.value_type)
                                         input)]
                    _ (execute! definition)
                    .let [globals (io.value (cppyy::gbl))
                          value (lux_value (..runtime globals)
                                           (getattr [globals global]))]]
                   (in [global value definition]))))

             (the (ingest context content)
               (|> content
                   (of utf8.format projection)
                   try.trusted
                   (as /runtime.Declaration)))

             (the (re_learn context custom content)
               (execute! content))
             
             (the (re_load context custom content)
               (do try.monad
                 [_ (execute! content)]
                 (evaluate! [{.#None} (_.local (reference.artifact context))]))))))))

(the phase_wrapper
  phase.Wrapper
  (|>>))

(the .public platform
  (IO [/runtime.Host
       (Platform /runtime.Anchor /runtime.Value /runtime.Declaration)])
  (do io.monad
    [host ..host]
    (in [host
         [platform.#file_system (file.async file.default)
          platform.#host host

          platform.#phase /.translation
          platform.#runtime /runtime.translation

          platform.#phase_wrapper ..phase_wrapper
          platform.#write (|>> _.code (of utf8.format injection))]])))

(the (extender _)
  Extender
  (undefined))

(the (expander macro inputs lux)
  Expander
  (undefined))

(the (c++_program name it)
  (Program /runtime.Value /runtime.Declaration)
  (undefined))

(the (declare_success! _)
  (-> Any
      (Async Any))
  (async.future (of environment.default exit +0)))

(the _
  (program [service cli.service]
    (let [context (context.c++ (cli.target service))]
      (exec
        (do async.monad
          [[host platform] (async.future ..platform)
           _ (compositor.compiler (|>> (as platform.Custom))
                                  context
                                  ..expander
                                  extension.empty
                                  (io.io platform)
                                  translation.bundle
                                  extension.empty
                                  ..c++_program
                                  /reference.constant
                                  ..extender
                                  service
                                  [(packager.package (is /runtime.Declaration (_.manual ""))
                                                     _.code
                                                     _.also
                                                     (|>>))
                                   "program.cpp"])]
          (..declare_success! []))
        (io.io [])))))
