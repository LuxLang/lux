(.module:
  [lux #*
   [cli (#+ program:)]
   ["." io (#+ io)]
   ["_" test]

   ## These modules do not need to be tested.
   [type
    [variance (#+)]]
   [locale (#+)
    [language (#+)]
    [territory (#+)]]
   
   ## TODO: Test these modules
   [data
    [format
     [css (#+)]]]
   ## [control
   ##  ["._" contract]
   ##  ["._" concatenative]
   ##  ["._" predicate]
   ##  [monad
   ##   ["._" free]]]
   ## [data
   ##  ["._" env]
   ##  ["._" trace]
   ##  ["._" store]
   ##  [format
   ##   ["._" context]
   ##   ["._" html]
   ##   ["._" css]
   ##   ["._" binary]]
   ##  [collection
   ##   [tree
   ##    [rose
   ##     ["._" parser]]]
   ##   [dictionary
   ##    ["._" plist]]
   ##   [set
   ##    ["._" multi]]]
   ##  [text
   ##   ["._" buffer]]]
   ## ["._" macro
   ##  [poly
   ##   ["._" json]]]
   ## [type
   ##  ["._" unit]
   ##  ["._" refinement]
   ##  ["._" quotient]]
   ## [world
   ##  ["._" environment]
   ##  ["._" console]]
   ## [compiler
   ##  [host
   ##   [".H" scheme]]
   ##  ["._" cli]
   ##  ["._" default
   ##   ["._" evaluation]
   ##   [phase
   ##    ["._" translation
   ##     [scheme
   ##      ["._scheme" primitive]
   ##      ["._scheme" structure]
   ##      ["._scheme" reference]
   ##      ["._scheme" function]
   ##      ["._scheme" loop]
   ##      ["._scheme" case]
   ##      ["._scheme" extension]
   ##      ["._scheme" extension/common]
   ##      ["._scheme" expression]]]
   ##    [extension
   ##     ["._" statement]]]
   ##   ["._default" cache]]
   ##  [meta
   ##   ["._meta" io
   ##    ["._meta_io" context]
   ##    ["._meta_io" archive]]
   ##   ["._meta" archive]
   ##   ["._meta" cache]]]
   ## ["._" interpreter
   ##  ["._interpreter" type]]
   ]
  ## TODO: Must have 100% coverage on tests.
  [/
   ["/." lux
    ## [time
    ##  [instant (#+)]
    ##  [duration (#+)]
    ##  [date (#+)]]
    ## [control
    ##  ## [exception (#+)]
    ##  ## [interval (#+)]
    ##  ## [pipe (#+)]
    ##  ## [continuation (#+)]
    ##  ## [reader (#+)]
    ##  ## [writer (#+)]
    ##  ## [state (#+)]
    ##  ## [parser (#+)]
    ##  ## [thread (#+)]
    ##  ## [region (#+)]
    ##  ## [security
    ##  ##  [privacy (#+)]
    ##  ##  [integrity (#+)]]
    ##  [concurrency
    ##   [actor (#+)]
    ##   [atom (#+)]
    ##   [frp (#+)]
    ##   [promise (#+)]
    ##   [stm (#+)]
    ##   ## [semaphore (#+)]
    ##   ]]
    ## [data
    ##  [bit (#+)]
    ##  [color (#+)]
    ##  [error (#+)]
    ##  [name (#+)]
    ##  [identity (#+)]
    ##  [lazy (#+)]
    ##  [maybe (#+)]
    ##  [product (#+)]
    ##  [sum (#+)]
    ##  [number (#+) ## TODO: FIX Specially troublesome...
    ##   [i64 (#+)]
    ##   [ratio (#+)]
    ##   [complex (#+)]]
    ##  [text (#+)
    ##   ## [format (#+)]
    ##   [lexer (#+)]
    ##   [regex (#+)]]
    ##  [format
    ##   ## [json (#+)]
    ##   [xml (#+)]]
    ##  ## [collection
    ##  ##  [array (#+)]
    ##  ##  [bits (#+)]
    ##  ##  [list (#+)]
    ##  ##  [stack (#+)]
    ##  ##  [row (#+)]
    ##  ##  [sequence (#+)]
    ##  ##  [dictionary (#+)
    ##  ##   ["dictionary_." ordered]]
    ##  ##  [set (#+)
    ##  ##   ["set_." ordered]]
    ##  ##  [queue (#+)
    ##  ##   [priority (#+)]]
    ##  ##  [tree
    ##  ##   [rose (#+)
    ##  ##    [zipper (#+)]]]]
    ##  ]
    ## [math (#+)
    ##  [random (#+)]
    ##  [modular (#+)]
    ##  [logic
    ##   [continuous (#+)]
    ##   [fuzzy (#+)]]]
    ## [macro
    ##  [code (#+)]
    ##  [syntax (#+)]
    ##  [poly
    ##   ["poly_." equivalence]
    ##   ["poly_." functor]]]
    ## [type ## (#+)
    ##  ## [check (#+)]
    ##  ## [implicit (#+)] ## TODO: FIX Specially troublesome...
    ##  ## [resource (#+)]
    ##  [dynamic (#+)]]
    ## [compiler
    ##  [default
    ##   ["_default/." syntax]
    ##   [phase
    ##    [analysis
    ##     ["_.A" primitive]
    ##     ["_.A" structure]
    ##     ["_.A" reference]
    ##     ["_.A" case]
    ##     ["_.A" function]
    ##     [procedure
    ##      ["_.A" common]]]
    ##    [synthesis
    ##     ["_.S" primitive]
    ##     ["_.S" structure]
    ##     ["_.S" case]
    ##     ["_.S" function]]]]]
    ## [world
    ##  [binary (#+)]
    ##  [file (#+)]
    ##  [net
    ##   [tcp (#+)]
    ##   [udp (#+)]]]
    ]]
  )

(program: args
  (io (_.run! (<| (_.times 100)
                  /lux.test))))
