(;module:
  lux
  (lux [io]
       (control ["M" monad #+ do Monad]
                pipe
                ["p" parser])
       (data text/format
             [text "Text/" Eq<Text>]
             [number]
             [product]
             [sum]
             (coll [list]))
       ["&" cli]
       ["R" math/random])
  lux/test)

(context: "CLI"
  [num-args (|> R;nat (:: @ map (n.% +10)))
   #let [(^open "Nat/") number;Codec<Text,Nat>
         gen-arg (:: @ map Nat/encode R;nat)]
   option-name (R;text +5)
   singleton gen-arg]
  ($_ seq
      (test "Can read any argument."
            (|> (&;run (list singleton) &;any)
                (case> (#;Left _)
                       false
                       
                       (#;Right arg)
                       (Text/= arg singleton))))

      (test "Can use custom token parsers."
            (|> (&;run (list singleton) (&;parse Nat/decode))
                (case> (#;Left _)
                       false
                       
                       (#;Right parsed)
                       (Text/= (Nat/encode parsed)
                               singleton))))

      (test "Can obtain option values."
            (and (|> (&;run (list option-name singleton) (&;option (list option-name)))
                     (case> (#;Left _)
                            false
                            
                            (#;Right value)
                            (Text/= value singleton)))
                 (|> (&;run (list singleton) (&;option (list option-name)))
                     (case> (#;Left _) true (#;Right _) false))))

      (test "Can check flags."
            (and (|> (&;run (list option-name) (&;flag (list option-name)))
                     (case> (#;Right true) true _ false))
                 (|> (&;run (list) (&;flag (list option-name)))
                     (case> (#;Right false) true _ false))))

      (test "Can query if there are any more inputs."
            (and (|> (&;run (list) &;end)
                     (case> (#;Right []) true _ false))
                 (|> (&;run (list singleton) (p;not &;end))
                     (case> (#;Right []) false _ true))))
      ))
