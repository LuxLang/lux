(;module:
  [lux #- not]
  (lux (codata [io])
       (control monad)
       (data text/format
             [number]
             [product]
             [sum])
       (codata function)
       [cli #- run])
  [lux/test #-  assert])

(test: "lux/cli exports"
  (test-all (match (#;Right "foo")
                   (cli;run any (list "foo" "bar" "baz")))
            (match (#;Left _)
                   (cli;run any (list)))
            (match (#;Right 123)
                   (cli;run (parse (:: number;Codec<Text,Int> decode) any) (list "123")))
            (match (#;Left _)
                   (cli;run (option (list "-p" "--port")) (list)))
            (match (#;Left _)
                   (cli;run (option (list "-p" "--port")) (list "yolo")))
            (match (#;Right "123")
                   (cli;run (option (list "-p" "--port")) (list "-p" "123")))
            (match (#;Right "123")
                   (cli;run (option (list "-p" "--port")) (list "--port" "123")))
            (match (#;Right false)
                   (cli;run (flag (list "-h" "--help")) (list)))
            (match (#;Right false)
                   (cli;run (flag (list "-h" "--help")) (list "yolo")))
            (match (#;Right true)
                   (cli;run (flag (list "-h" "--help")) (list "-h")))
            (match (#;Right true)
                   (cli;run (flag (list "-h" "--help")) (list "--help")))
            (match (#;Right [])
                   (cli;run end (list)))
            (match (#;Left _)
                   (cli;run end (list "yolo")))
            (match (#;Left "YOLO")
                   (cli;run (assert false "YOLO") (list "yolo")))
            (match (#;Right [])
                   (cli;run (assert true "YOLO") (list "yolo")))
            (match (#;Right #;None)
                   (cli;run (opt any) (list)))
            (match (#;Right (#;Some "yolo"))
                   (cli;run (opt any) (list "yolo")))
            (match (#;Right ["foo" "bar"])
                   (cli;run (seq any any) (list "foo" "bar" "baz")))
            (match (#;Right ["foo" "bar"])
                   (cli;run (seq any any) (list "foo" "bar")))
            (match (#;Left _)
                   (cli;run (seq any any) (list "foo")))
            ## (match (#;Right (#;Left 123))
            ##          (cli;run (alt (parse (:: number;Codec<Text,Int> decode) any)
            ##                       any)
            ##                   (list "123" "foo")))
            ## (match (#;Right (#;Right "foo"))
            ##          (cli;run (alt (parse (:: number;Codec<Text,Int> decode) any)
            ##                       any)
            ##                   (list "foo")))
            (match (#;Left _)
                   (cli;run (alt (parse (:: number;Codec<Text,Int> decode) any)
                                 (parse (:: number;Codec<Text,Real> decode) any))
                            (list "foo")))
            (match (#;Left _)
                   (cli;run (not (parse (:: number;Codec<Text,Int> decode) any))
                            (list "123")))
            (match (#;Right [])
                   (cli;run (not (parse (:: number;Codec<Text,Int> decode) any))
                            (list "yolo")))
            (match (^ (#;Right (list "foo" "bar" "baz")))
                   (cli;run (some any) (list "foo" "bar" "baz")))
            (match (^ (#;Right (list)))
                   (cli;run (some any) (list)))
            (match (^ (#;Right (list "foo" "bar" "baz")))
                   (cli;run (many any) (list "foo" "bar" "baz")))
            (match (#;Left _)
                   (cli;run (many any) (list)))
            (match (#;Right "yolo")
                   (cli;run (either (parse sum;right any)
                                    any)
                            (list "yolo")))
            ))
