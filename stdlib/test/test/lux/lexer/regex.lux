(;module:
  lux
  (lux [io]
       (control monad)
       (data [error #- fail]
             [product]
             [text "T/" Eq<Text>]
             text/format)
       [compiler]
       (macro [ast]
              ["s" syntax #+ syntax:])
       ["R" random]
       pipe
       [lexer]
       (lexer ["&" regex]))
  lux/test)

## [Utils]
(def: (should-pass regex input)
  (-> (lexer;Lexer Text) Text Bool)
  (|> (lexer;run input regex)
      (case> (#;Right parsed)
             (T/= parsed input)

             _
             false)))

(def: (should-passT test regex input)
  (-> Text (lexer;Lexer Text) Text Bool)
  (|> (lexer;run input regex)
      (case> (#;Right parsed)
             (T/= test parsed)

             _
             false)))

(def: (should-fail regex input)
  (All [a] (-> (lexer;Lexer a) Text Bool))
  (|> (lexer;run input regex)
      (case> (#;Left _) true _ false)))

(syntax: (should-check pattern regex input)
  (wrap (list (` (|> (lexer;run (~ input) (~ regex))
                     (case> (^ (#;Right (~ pattern)))
                            true

                            (~' _)
                            false))))))

## [Tests]
(test: "Regular Expressions [Basics]"
  (assert "Can parse character literals."
          (and (should-pass (&;regex "a") "a")
               (should-fail (&;regex "a") ".")
               (should-pass (&;regex "\\.") ".")
               (should-fail (&;regex "\\.") "a"))))

(test: "Regular Expressions [System character classes]"
  ($_ seq
      (assert "Can parse anything."
              (should-pass (&;regex ".") "a"))

      (assert "Can parse digits."
              (and (should-pass (&;regex "\\d") "0")
                   (should-fail (&;regex "\\d") "m")))

      (assert "Can parse non digits."
              (and (should-pass (&;regex "\\D") "m")
                   (should-fail (&;regex "\\D") "0")))

      (assert "Can parse white-space."
              (and (should-pass (&;regex "\\s") " ")
                   (should-fail (&;regex "\\s") "m")))

      (assert "Can parse non white-space."
              (and (should-pass (&;regex "\\S") "m")
                   (should-fail (&;regex "\\S") " ")))

      (assert "Can parse word characters."
              (and (should-pass (&;regex "\\w") "_")
                   (should-fail (&;regex "\\w") "^")))

      (assert "Can parse non word characters."
              (and (should-pass (&;regex "\\W") ".")
                   (should-fail (&;regex "\\W") "a")))
      ))

(test: "Regular Expressions [Special system character classes : Part 1]"
  ($_ seq
      (assert "Can parse using special character classes."
              (and (and (should-pass (&;regex "\\p{Lower}") "m")
                        (should-fail (&;regex "\\p{Lower}") "M"))

                   (and (should-pass (&;regex "\\p{Upper}") "M")
                        (should-fail (&;regex "\\p{Upper}") "m"))

                   (and (should-pass (&;regex "\\p{Alpha}") "M")
                        (should-fail (&;regex "\\p{Alpha}") "0"))

                   (and (should-pass (&;regex "\\p{Digit}") "1")
                        (should-fail (&;regex "\\p{Digit}") "n"))

                   (and (should-pass (&;regex "\\p{Alnum}") "1")
                        (should-fail (&;regex "\\p{Alnum}") "."))

                   (and (should-pass (&;regex "\\p{Space}") " ")
                        (should-fail (&;regex "\\p{Space}") "."))
                   ))
      ))

(test: "Regular Expressions [Special system character classes : Part 2]"
  ($_ seq
      (assert "Can parse using special character classes."
              (and (and (should-pass (&;regex "\\p{HexDigit}") "a")
                        (should-fail (&;regex "\\p{HexDigit}") "."))

                   (and (should-pass (&;regex "\\p{OctDigit}") "6")
                        (should-fail (&;regex "\\p{OctDigit}") "."))

                   (and (should-pass (&;regex "\\p{Blank}") "\t")
                        (should-fail (&;regex "\\p{Blank}") "."))

                   (and (should-pass (&;regex "\\p{ASCII}") "\t")
                        (should-fail (&;regex "\\p{ASCII}") "\u1234"))

                   (and (should-pass (&;regex "\\p{Contrl}") "\u0012")
                        (should-fail (&;regex "\\p{Contrl}") "a"))

                   (and (should-pass (&;regex "\\p{Punct}") "@")
                        (should-fail (&;regex "\\p{Punct}") "a"))

                   (and (should-pass (&;regex "\\p{Graph}") "@")
                        (should-fail (&;regex "\\p{Graph}") " "))

                   (and (should-pass (&;regex "\\p{Print}") "\u0020")
                        (should-fail (&;regex "\\p{Print}") "\u1234"))
                   ))
      ))

(test: "Regular Expressions [Custom character classes : Part 1]"
  ($_ seq
      (assert "Can parse using custom character classes."
              (and (should-pass (&;regex "[abc]") "a")
                   (should-fail (&;regex "[abc]") "m")))

      (assert "Can parse using character ranges."
              (and (should-pass (&;regex "[a-z]") "a")
                   (should-pass (&;regex "[a-z]") "m")
                   (should-pass (&;regex "[a-z]") "z")))

      (assert "Can combine character ranges."
              (and (should-pass (&;regex "[a-zA-Z]") "a")
                   (should-pass (&;regex "[a-zA-Z]") "m")
                   (should-pass (&;regex "[a-zA-Z]") "z")
                   (should-pass (&;regex "[a-zA-Z]") "A")
                   (should-pass (&;regex "[a-zA-Z]") "M")
                   (should-pass (&;regex "[a-zA-Z]") "Z")))
      ))

(test: "Regular Expressions [Custom character classes : Part 2]"
  ($_ seq
      (assert "Can negate custom character classes."
              (and (should-fail (&;regex "[^abc]") "a")
                   (should-pass (&;regex "[^abc]") "m")))

      (assert "Can negate character ranges.."
              (and (should-fail (&;regex "[^a-z]") "a")
                   (should-pass (&;regex "[^a-z]") "0")))

      (assert "Can parse negate combinations of character ranges."
              (and (should-fail (&;regex "[^a-zA-Z]") "a")
                   (should-pass (&;regex "[^a-zA-Z]") "0")))
      ))

(test: "Regular Expressions [Custom character classes : Part 3]"
  ($_ seq
      (assert "Can make custom character classes more specific."
              (and (let [RE (&;regex "[a-z&&[def]]")]
                     (and (should-fail RE "a")
                          (should-pass RE "d")))

                   (let [RE (&;regex "[a-z&&[^bc]]")]
                     (and (should-pass RE "a")
                          (should-fail RE "b")))

                   (let [RE (&;regex "[a-z&&[^m-p]]")]
                     (and (should-pass RE "a")
                          (should-fail RE "m")
                          (should-fail RE "p")))))
      ))

(test: "Regular Expressions [Reference]"
  (let [number (&;regex "\\d+")]
    (assert "Can build complex regexs by combining simpler ones."
            (should-check ["809-345-6789" "809" "345" "6789"] (&;regex "(\\@<number>)-(\\@<number>)-(\\@<number>)") "809-345-6789"))))

(test: "Regular Expressions [Fuzzy Quantifiers]"
  ($_ seq
      (assert "Can sequentially combine patterns."
              (should-passT "aa" (&;regex "aa") "aa"))

      (assert "Can match patterns optionally."
              (and (should-passT "a" (&;regex "a?") "a")
                   (should-passT "" (&;regex "a?") "")))

      (assert "Can match a pattern 0 or more times."
              (and (should-passT "aaa" (&;regex "a*") "aaa")
                   (should-passT "" (&;regex "a*") "")))

      (assert "Can match a pattern 1 or more times."
              (and (should-passT "aaa" (&;regex "a+") "aaa")
                   (should-passT "a" (&;regex "a+") "a")
                   (should-fail (&;regex "a+") "")))
      ))

(test: "Regular Expressions [Crisp Quantifiers]"
  ($_ seq
      (assert "Can match a pattern N times."
              (and (should-passT "aa" (&;regex "a{2}") "aa")
                   (should-passT "a" (&;regex "a{1}") "aa")
                   (should-fail (&;regex "a{3}") "aa")))

      (assert "Can match a pattern at-least N times."
              (and (should-passT "aa" (&;regex "a{1,}") "aa")
                   (should-passT "aa" (&;regex "a{2,}") "aa")
                   (should-fail (&;regex "a{3,}") "aa")))

      (assert "Can match a pattern at-most N times."
              (and (should-passT "a" (&;regex "a{,1}") "aa")
                   (should-passT "aa" (&;regex "a{,2}") "aa")
                   (should-passT "aa" (&;regex "a{,3}") "aa")))

      (assert "Can match a pattern between N and M times."
              (and (should-passT "a" (&;regex "a{1,2}") "a")
                   (should-passT "aa" (&;regex "a{1,2}") "aa")
                   (should-passT "aa" (&;regex "a{1,2}") "aaa")))
      ))

(test: "Regular Expressions [Groups]"
  ($_ seq
      (assert "Can extract groups of sub-matches specified in a pattern."
              (and (should-check ["abc" "b"] (&;regex "a(.)c") "abc")
                   (should-check ["abbbbbc" "bbbbb"] (&;regex "a(b+)c") "abbbbbc")
                   (should-check ["809-345-6789" "809" "345" "6789"] (&;regex "(\\d{3})-(\\d{3})-(\\d{4})") "809-345-6789")
                   (should-check ["809-345-6789" "809" "6789"] (&;regex "(\\d{3})-(?:\\d{3})-(\\d{4})") "809-345-6789")
                   (should-check ["809-809-6789" "809" "6789"] (&;regex "(\\d{3})-\\0-(\\d{4})") "809-809-6789")
                   (should-check ["809-809-6789" "809" "6789"] (&;regex "(?<code>\\d{3})-\\k<code>-(\\d{4})") "809-809-6789")
                   (should-check ["809-809-6789-6789" "809" "6789"] (&;regex "(?<code>\\d{3})-\\k<code>-(\\d{4})-\\0") "809-809-6789-6789")))

      (assert "Can specify groups within groups."
              (should-check ["809-345-6789" "809" ["345-6789" "345" "6789"]] (&;regex "(\\d{3})-((\\d{3})-(\\d{4}))") "809-345-6789"))
      ))

(test: "Regular Expressions [Alternation]"
  ($_ seq
      (assert "Can specify alternative patterns."
              (and (should-check ["a" (+0 [])] (&;regex "a|b") "a")
                   (should-check ["b" (+1 [])] (&;regex "a|b") "b")
                   (should-fail (&;regex "a|b") "c")))

      (assert "Can have groups within alternations."
              (and (should-check ["abc" (+0 ["b" "c"])] (&;regex "a(.)(.)|b(.)(.)") "abc")
                   (should-check ["bcd" (+1 ["c" "d"])] (&;regex "a(.)(.)|b(.)(.)") "bcd")
                   (should-fail (&;regex "a(.)(.)|b(.)(.)") "cde")

                   (should-check ["809-345-6789" (+0 ["809" "345-6789" "345" "6789"])]
                                 (&;regex "(\\d{3})-((\\d{3})-(\\d{4}))|b(.)d")
                                 "809-345-6789")))
      ))
