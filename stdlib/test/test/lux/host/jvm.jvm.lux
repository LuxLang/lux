(.module:
  [lux #*
   [control
    [monad (#+ do)]
    [concurrency
     ["." atom]]]
   [data
    ["." error (#+ Error)]
    ["." text
     format]
    [format
     ["." binary]]
    [collection
     ["." dictionary]
     ["." row]]]
   ["." io (#+ IO)]
   [world
    ["." file (#+ File)]
    [binary (#+ Binary)]]
   [host
    [jvm
     ["/." loader (#+ Library)]
     ["/." version]
     ["/." name]
     ["/." descriptor]
     ["/." field]
     ["/." class]
     [modifier
      ["/.M" inner]]]]
   [math
    ["r" random]]]
  lux/test)

(def: (write-class name bytecode)
  (-> Text Binary (IO Text))
  (let [file-path (format name ".class")]
    (do io.Monad<IO>
      [outcome (do (error.ErrorT @)
                 [file (: (IO (Error (File IO)))
                          (file.get-file io.Monad<IO> file.System<IO> file-path))]
                 (:: file over-write bytecode))]
      (wrap (case outcome
              (#error.Success definition)
              (format "Wrote: " (%t file-path))
              
              (#error.Failure error)
              ## TODO: Remove 'log!' call.
              (exec (log! error)
                error))))))

(context: "Class"
  (let [package "my.package"
        name "MyClass"
        full-name (format package "." name)
        input (/class.class /version.v6_0 /class.public
                            (/name.internal "java.lang.Object")
                            (/name.internal full-name)
                            (list (/name.internal "java.io.Serializable")
                                  (/name.internal "java.lang.Runnable"))
                            (list (/field.field /field.public "foo" /descriptor.long (row.row))
                                  (/field.field /field.public "bar" /descriptor.double (row.row)))
                            (row.row)
                            (row.row))
        bytecode (binary.write /class.format input)
        loader (/loader.memory (/loader.new-library []))]
    ($_ seq
        (test "Can read a generated class."
              (case (binary.read /class.format bytecode)
                (#error.Success output)
                (:: /class.Equivalence<Class> = input output)
                
                (#error.Failure error)
                ## TODO: Remove 'log!' call.
                (exec (log! error)
                  false)))
        (test "Can generate a class."
              (case (/loader.define full-name bytecode loader)
                (#error.Success definition)
                true
                
                (#error.Failure error)
                ## TODO: Remove 'log!' call.
                (exec (log! error)
                  false)))
        )))
