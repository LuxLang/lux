(;module:
  lux
  (lux [io]
       (control monad)
       (data text/format
             [number]
             [product]
             identity
             [text "T/" Eq<Text>])
       ["R" math/random]
       pipe)
  lux/test)

(test: "Pipes"
  ($_ seq
      (assert "Can dismiss previous pipeline results and begin a new line."
              (|> 20
                  (i.* 3)
                  (i.+ 4)
                  (_> 0 i.inc)
                  (i.= 1)))
      
      (assert "Can give names to piped values within a pipeline's scope."
              (and (|> 5
                       (@> [(i.+ @ @)])
                       (i.= 10))
                   (|> 5
                       (@> X [(i.+ X X)])
                       (i.= 10))))
      
      (assert "Can do branching in pipelines."
              (and (|> 5
                       (?> [i.even?] [(i.* 2)]
                           [i.odd?] [(i.* 3)]
                           [(_> -1)])
                       (i.= 15))
                   (|> 4
                       (?> [i.even?] [(i.* 2)]
                           [i.odd?] [(i.* 3)])
                       (i.= 8))
                   (|> 5
                       (?> [i.even?] [(i.* 2)]
                           [(_> -1)])
                       (i.= -1))))

      (assert "Can loop within pipelines."
              (|> 1
                  (!> [(i.< 10)]
                      [i.inc])
                  (i.= 10)))
      
      (assert "Can use monads within pipelines."
              (|> 5
                  (%> Monad<Identity>
                      [(i.* 3)]
                      [(i.+ 4)]
                      [i.inc])
                  (i.= 20)))
      
      (assert "Can pattern-match against piped values."
              (|> 5
                  (case> 0 "zero"
                         1 "one"
                         2 "two"
                         3 "three"
                         4 "four"
                         5 "five"
                         6 "six"
                         7 "seven"
                         8 "eight"
                         9 "nine"
                         _ "???")
                  (T/= "five")))
      ))
