##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data error
             [product])
       [compiler]
       (macro [ast]
              ["s" syntax #+ syntax:])
       test
       [lexer]
       regex))

(syntax: (should-regex {veredict (s;alt s;bool s;any)} {regex s;text} {input s;text})
  (case veredict
    (+0 ?)
    (if ?
      (wrap (list (` (match+ (~ (ast;text input))
                             (should-pass (lexer;run (regex (~ (ast;text regex)))
                                                     (~ (ast;text input))))))))
      (wrap (list (` (should-fail (lexer;run (regex (~ (ast;text regex)))
                                             (~ (ast;text input))))))))

    (+1 result)
    (wrap (list (` (match+ (~ result)
                           (should-pass (lexer;run (regex (~ (ast;text regex)))
                                                   (~ (ast;text input))))))))))

## [Tests]
(test: "Regular Expressions [Basics]"
  (test-all (should-regex true "a" "a")
            (should-regex false "a" ".")
            (should-regex true "\\." ".")
            (should-regex false "\\." "a")
            ))

(test: "Regular Expressions [System character classes]"
  (test-all (should-regex true "." "a")

            (should-regex true "\\d" "0")
            (should-regex false "\\d" "m")
            (should-regex true "\\D" "m")
            (should-regex false "\\D" "0")

            (should-regex true "\\s" " ")
            (should-regex false "\\s" "m")
            (should-regex true "\\S" "m")
            (should-regex false "\\S" " ")

            (should-regex true "\\w" "_")
            (should-regex false "\\w" "^")
            (should-regex true "\\W" ".")
            (should-regex false "\\W" "a")

            (should-regex true "\\p{Lower}" "m")
            (should-regex false "\\p{Lower}" "M")

            (should-regex true "\\p{Upper}" "M")
            (should-regex false "\\p{Upper}" "m")

            (should-regex true "\\p{Alpha}" "M")
            (should-regex false "\\p{Alpha}" "0")

            (should-regex true "\\p{Digit}" "1")
            (should-regex false "\\p{Digit}" "n")

            (should-regex true "\\p{Alnum}" "1")
            (should-regex false "\\p{Alnum}" ".")

            (should-regex true "\\p{Space}" " ")
            (should-regex false "\\p{Space}" ".")

            (should-regex true "\\p{HexDigit}" "a")
            (should-regex false "\\p{HexDigit}" ".")

            (should-regex true "\\p{OctDigit}" "6")
            (should-regex false "\\p{OctDigit}" ".")

            (should-regex true "\\p{Blank}" "\t")
            (should-regex false "\\p{Blank}" ".")

            (should-regex true "\\p{ASCII}" "\t")
            (should-regex false "\\p{ASCII}" "\u1234")

            (should-regex true "\\p{Contrl}" "\u0012")
            (should-regex false "\\p{Contrl}" "a")

            (should-regex true "\\p{Punct}" "@")
            (should-regex false "\\p{Punct}" "a")

            (should-regex true "\\p{Graph}" "@")
            (should-regex false "\\p{Graph}" " ")

            (should-regex true "\\p{Print}" "\u0020")
            (should-regex false "\\p{Print}" "\u1234")
            ))

(test: "Regular Expressions [Custom character classes]"
  (test-all (should-regex true "[abc]" "a")
            (should-regex false "[abc]" "m")

            (should-regex true "[a-z]" "a")
            (should-regex true "[a-z]" "m")
            (should-regex true "[a-z]" "z")

            (should-regex true "[a-zA-Z]" "a")
            (should-regex true "[a-zA-Z]" "m")
            (should-regex true "[a-zA-Z]" "z")
            (should-regex true "[a-zA-Z]" "A")
            (should-regex true "[a-zA-Z]" "M")
            (should-regex true "[a-zA-Z]" "Z")

            (should-regex false "[^abc]" "a")
            (should-regex true "[^abc]" "m")

            (should-regex false "[^a-z]" "a")
            (should-regex true "[^a-z]" "0")
            (should-regex false "[^a-zA-Z]" "a")
            (should-regex true "[^a-zA-Z]" "0")

            (should-regex false "[a-z&&[def]]" "a")
            (should-regex true "[a-z&&[def]]" "d")

            (should-regex true "[a-z&&[^bc]]" "a")
            (should-regex false "[a-z&&[^bc]]" "b")

            (should-regex true "[a-z&&[^m-p]]" "a")
            (should-regex false "[a-z&&[^m-p]]" "m")
            (should-regex false "[a-z&&[^m-p]]" "p")
            ))

(test: "Regular Expressions [Reference]"
  (test-all (let [number (regex "\\d+")]
              (should-regex ["809-345-6789" "809" "345" "6789"] "(\\@<number>)-(\\@<number>)-(\\@<number>)" "809-345-6789"))
            ))

(test: "Regular Expressions [Quantifiers]"
  (test-all (should-regex "aa" "aa" "aa")

            (should-regex "a" "a?" "a")
            (should-regex "" "a?" "")
            
            (should-regex "aaa" "a*" "aaa")
            (should-regex "" "a*" "")
            
            (should-regex "aaa" "a+" "aaa")
            (should-regex "a" "a+" "a")
            (should-regex false "a+" "")

            (should-regex "aa" "a{2}" "aa")
            (should-regex "a" "a{1}" "aa")
            (should-regex false "a{3}" "aa")

            (should-regex "aa" "a{1,}" "aa")
            (should-regex "aa" "a{2,}" "aa")
            (should-regex false "a{3,}" "aa")

            (should-regex "a" "a{,1}" "aa")
            (should-regex "aa" "a{,2}" "aa")
            (should-regex "aa" "a{,3}" "aa")

            (should-regex "a" "a{1,2}" "a")
            (should-regex "aa" "a{1,2}" "aa")
            (should-regex "aa" "a{1,2}" "aaa")
            ))

(test: "Regular Expressions [Groups]"
  (test-all (should-regex ["abc" "b"] "a(.)c" "abc")
            (should-regex ["abbbbbc" "bbbbb"] "a(b+)c" "abbbbbc")
            (should-regex ["809-345-6789" "809" "345" "6789"] "(\\d{3})-(\\d{3})-(\\d{4})" "809-345-6789")
            (should-regex ["809-345-6789" "809" "6789"] "(\\d{3})-(?:\\d{3})-(\\d{4})" "809-345-6789")
            (should-regex ["809-809-6789" "809" "6789"] "(\\d{3})-\\0-(\\d{4})" "809-809-6789")
            (should-regex ["809-809-6789" "809" "6789"] "(?<code>\\d{3})-\\k<code>-(\\d{4})" "809-809-6789")
            (should-regex ["809-809-6789-6789" "809" "6789"] "(?<code>\\d{3})-\\k<code>-(\\d{4})-\\0" "809-809-6789-6789")

            (should-regex ["809-345-6789" "809" ["345-6789" "345" "6789"]] "(\\d{3})-((\\d{3})-(\\d{4}))" "809-345-6789")
            ))

(test: "Regular Expressions [Alternation]"
  (test-all (should-regex ["a" (+0 [])] "a|b" "a")
            (should-regex ["b" (+1 [])] "a|b" "b")
            (should-regex false "a|b" "c")

            (should-regex ["abc" (+0 "b")] "a(.)c|b(.)d" "abc")
            (should-regex ["bcd" (+1 "c")] "a(.)c|b(.)d" "bcd")
            (should-regex false "a(.)c|b(.)d" "cde")

            (should-regex ["abc" (+0 ["b" "c"])] "a(.)(.)|b(.)(.)" "abc")
            (should-regex ["bcd" (+1 ["c" "d"])] "a(.)(.)|b(.)(.)" "bcd")
            (should-regex false "a(.)(.)|b(.)(.)" "cde")

            (should-regex ["809-345-6789" (+0 ["809" "345-6789" "345" "6789"])]
                          "(\\d{3})-((\\d{3})-(\\d{4}))|b(.)d"
                          "809-345-6789")
            ))
