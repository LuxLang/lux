(;module:
  lux
  (lux [io]
       (control monad)
       (data [text "Text/" Monoid<Text>]
             text/format
             [number]
             [product])
       (function ["&" cont])
       ["R" math/random])
  lux/test)

(test: "Continuations"
  [sample R;nat
   #let [(^open "&/") &;Monad<Cont>]]
  ($_ seq
      (assert "Can run continuations to compute their values."
              (n.= sample (&;run (&/wrap sample))))

      (assert "Can use functor."
              (n.= (n.inc sample) (&;run (&/map n.inc (&/wrap sample)))))

      (assert "Can use applicative."
              (n.= (n.inc sample) (&;run (&/apply (&/wrap n.inc) (&/wrap sample)))))

      (assert "Can use monad."
              (n.= (n.inc sample) (&;run (do &;Monad<Cont>
                                           [func (wrap n.inc)
                                            arg (wrap sample)]
                                           (wrap (func arg))))))

      (assert "Can use the current-continuation as a escape hatch."
              (n.= (n.* +2 sample)
                   (&;run (do &;Monad<Cont>
                            [value (&;call/cc
                                    (lambda [k]
                                      (do @
                                        [temp (k sample)]
                                        ## If this code where to run,
                                        ## the output would be
                                        ## (n.* +4 sample)
                                        (k temp))))]
                            (wrap (n.* +2 value))))))

      (assert "Can use the current-continuation to build a time machine."
              (n.= (n.+ +100 sample)
                   (&;run (do &;Monad<Cont>
                            [[restart [output idx]] (&;portal [sample +0])]
                            (if (n.< +10 idx)
                              (restart [(n.+ +10 output) (n.inc idx)])
                              (wrap output))))))
      ))
