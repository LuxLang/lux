(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                functor
                [eq])
       (data [text "Text/" Monoid<Text>]
             text/format
             [number]
             [bool "B/" Eq<Bool>]
             maybe
             (coll [list]))
       ["r" math/random]
       (meta [type]
             type/implicit))
  lux/test)

(context: "Automatic structure selection"
  (<| (times +100)
      (do @
        [x r;nat
         y r;nat]
        ($_ seq
            (test "Can automatically select first-order structures."
                  (let [(^open "L/") (list;Eq<List> number;Eq<Nat>)]
                    (and (B/= (:: number;Eq<Nat> = x y)
                              (::: = x y))
                         (L/= (list;n.range +1 +10)
                              (::: map n.inc (list;n.range +0 +9)))
                         )))
            
            (test "Can automatically select second-order structures."
                  (::: =
                    (list;n.range +1 +10)
                    (list;n.range +1 +10)))

            (test "Can automatically select third-order structures."
                  (let [lln (::: map (list;n.range +1)
                              (list;n.range +1 +10))]
                    (::: = lln lln)))
            ))))
