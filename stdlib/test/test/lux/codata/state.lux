##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux [io]
       (control monad)
       (data [text "Text/" Monoid<Text>]
             text/format
             [number]
             [product])
       (codata function
               ["&" state])
       pipe)
  lux/test)

(test: "State"
  ($_ seq
      (assert "" (i.= 123 (product;right (&;run 123 &;get))))
      (assert "" (i.= 321 (product;right (&;run 123 (do &;Monad<State>
                                                      [_ (&;put 321)]
                                                      &;get)))))
      (assert "" (i.= 369 (product;right (&;run 123 (do &;Monad<State>
                                                      [_ (&;update (i.* 3))]
                                                      &;get)))))
      (assert "" (i.= 124 (product;right (&;run 123 (&;use i.inc)))))
      (assert "" (i.= 246 (product;right (&;run 123 (&;local (i.* 2) &;get)))))
      (assert "" (i.= 124 (product;right (&;run 123 (:: &;Functor<State> map i.inc &;get)))))
      (assert "" (i.= 10 (product;right (&;run 123 (:: &;Applicative<State> wrap 10)))))
      (assert "" (i.= 30 (product;right (&;run 123 (let [(^open "&/") &;Applicative<State>]
                                                     (&/apply (&/wrap (i.+ 10)) (&/wrap 20)))))))
      (assert "" (i.= 30 (product;right (&;run 123 (: (&;State Int Int)
                                                      (do &;Monad<State>
                                                        [f (wrap i.+)
                                                         x (wrap 10)
                                                         y (wrap 20)]
                                                        (wrap (f x y))))))))
      ))

(test: "Monad transformer"
  (let [lift (&;lift-state io;Monad<IO>)
        (^open "io/") io;Monad<IO>]
    (assert "Can add state functionality to any monad."
            (|> (: (&;State' io;IO Text Int)
                   (do (&;StateT io;Monad<IO>)
                     [a (lift (io/wrap 123))
                      b (wrap 456)]
                     (wrap (i.+ a b))))
                (&;run' "")
                io;run
                (case> ["" 579] true
                       _        false)))
    ))
