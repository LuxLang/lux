(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data [text "Text/" Monoid<Text>]
             text/format
             [number]
             [product])
       (codata function
               state))
  lux/test)

(test: "lux/codata/state exports"
  (test-all (match 123 (product;right (run 123 get)))
            (match 321 (product;right (run 123 (do Monad<State>
                                                 [_ (put 321)]
                                                 get))))
            (match 369 (product;right (run 123 (do Monad<State>
                                                 [_ (update (i.* 3))]
                                                 get))))
            (match 124 (product;right (run 123 (use i.inc))))
            (match 246 (product;right (run 123 (local (i.* 2) get))))
            (match 124 (product;right (run 123 (:: Functor<State> map i.inc get))))
            (match 10 (product;right (run 123 (:: Applicative<State> wrap 10))))
            (match 30 (product;right (run 123 (let [(^open) Applicative<State>]
                                                (apply (wrap (i.+ 10)) (wrap 20))))))
            (match 30 (product;right (run 123 (: (State Int Int)
                                                 (do Monad<State>
                                                   [f (wrap i.+)
                                                    x (wrap 10)
                                                    y (wrap 20)]
                                                   
                                                   (wrap (f x y)))))))
            ))
