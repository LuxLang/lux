(;module:
  lux
  (lux (codata [io])
       (control monad
                comonad)
       (data [text "Text/" Monoid<Text>]
             text/format
             [number "Int/" Codec<Text,Int>])
       (codata function
               [cont]
               (struct stream)))
  lux/test)

(test: "lux/codata/stream exports"
  (let% [<take+drop+split> (do-template [<take> <drop> <split> <arg>]
                             [(match (^ (list 0 1 2))
                                     (<take> <arg> (iterate inc 0)))
                              (match (^=> (^stream& w x y z ...)
                                          {[w x y z] [3 4 5 6]})
                                     (<drop> <arg> (iterate inc 0)))
                              (match (^=> (^ [(list 0 1 2) _stream_])
                                          {_stream_ (^stream& w x y z ...)}
                                          {[w x y z] [3 4 5 6]})
                                     (<split> <arg> (iterate inc 0)))]

                             [take       drop       split      +3]
                             [take-while drop-while split-with (< 3)])
         ]
    (test-all (match (^=> (^stream& w x y z ...)
                          {[w x y z] [0 1 2 3]})
                     (iterate inc 0))
              (match (^=> (^stream& w x y z ...)
                          {[w x y z] [0 0 0 0]})
                     (repeat 0))
              (match (^=> (#;Some the-stream)
                          {the-stream (^stream& w x y z ...)}
                          {[w x y z] [0 1 0 1]})
                     (cycle (list 0 1)))
              (match 0 (head (iterate inc 0)))
              (match (^=> (^stream& w x y z ...)
                          {[w x y z] [1 2 3 4]})
                     (tail (iterate inc 0)))
              (match 9 (at +9 (iterate inc 0)))
              (match 0 (at +0 (iterate inc 0)))
              <take+drop+split>
              (match (^=> (^stream& w x y z ...)
                          {[w x y z] ["0" "1" "2" "3"]})
                     (unfold (lambda [n] [(inc n) (Int/encode n)])
                             0))
              (match (^=> (^stream& w x y z ...)
                          {[w x y z] [0 2 4 6]})
                     (filter even? (iterate inc 0)))
              (match (^=> [e_stream o_stream]
                          {e_stream (^stream& w x y z ...)}
                          {o_stream (^stream& a b c d ...)}
                          {[w x y z a b c d] [0 2 4 6 1 3 5 7]})
                     (partition even? (iterate inc 0)))
              (match (^=> (^stream& w x y z ...)
                          {[w x y z] [0 1 4 9]})
                     (let [square (lambda [n] (* n n))]
                       (:: Functor<Stream> map square (iterate inc 0))))
              (match (^=> (^stream& w x y z ...)
                          {[w x y z] [4 9 16 25]})
                     (let [square (lambda [n] (* n n))]
                       (be CoMonad<Stream>
                         [inputs (iterate inc 2)]
                         (square (head inputs)))))
              )))
