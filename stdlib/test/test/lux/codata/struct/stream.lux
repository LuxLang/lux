##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (codata [io])
       (control monad
                comonad)
       (data [text "Text/" Monoid<Text>]
             text/format
             (struct [list])
             [number "Nat/" Codec<Text,Nat>])
       (codata function
               [cont]
               (struct ["&" stream]))
       ["R" random]
       pipe)
  lux/test)

(test: "Streams"
  [size (|> R;nat (:: @ map (|>. (n.% +100) (n.max +2))))
   offset (|> R;nat (:: @ map (n.% +100)))
   factor (|> R;nat (:: @ map (|>. (n.% +100) (n.max +2))))
   elem R;nat
   cycle-seed (R;list size R;nat)
   cycle-sample-idx (|> R;nat (:: @ map (n.% +1000)))
   #let [(^open "List/") (list;Eq<List> number;Eq<Nat>)
         sample0 (&;iterate n.inc +0)
         sample1 (&;iterate n.inc offset)]]
  ($_ seq
      (assert "Can move along a stream and take slices off it."
              (and (and (List/= (list;n.range +0 (n.dec size))
                                (&;take size sample0))
                        (List/= (list;n.range offset (n.dec (n.+ offset size)))
                                (&;take size (&;drop offset sample0)))
                        (let [[drops takes...] (&;split size sample0)]
                          (and (List/= (list;n.range +0 (n.dec size))
                                       drops)
                               (List/= (list;n.range size (n.dec (n.* +2 size)))
                                       (&;take size takes...)))))
                   (and (List/= (list;n.range +0 (n.dec size))
                                (&;take-while (n.< size) sample0))
                        (List/= (list;n.range offset (n.dec (n.+ offset size)))
                                (&;take-while (n.< (n.+ offset size))
                                              (&;drop-while (n.< offset) sample0)))
                        (let [[drops takes...] (&;split-while (n.< size) sample0)]
                          (and (List/= (list;n.range +0 (n.dec size))
                                       drops)
                               (List/= (list;n.range size (n.dec (n.* +2 size)))
                                       (&;take-while (n.< (n.* +2 size)) takes...)))))
                   ))

      (assert "Can repeat any element and infinite number of times."
              (n.= elem (&;at offset (&;repeat elem))))

      (assert "Can obtain the head & tail of a stream."
              (and (n.= offset (&;head sample1))
                   (List/= (list;n.range (n.inc offset) (n.+ offset size))
                           (&;take size (&;tail sample1)))))

      (assert "Can filter streams."
              (and (n.= (n.* +2 offset)
                        (&;at offset
                              (&;filter n.even? sample0)))
                   (let [[evens odds] (&;partition n.even? (&;iterate n.inc +0))]
                     (and (n.= (n.* +2 offset)
                               (&;at offset evens))
                          (n.= (n.inc (n.* +2 offset))
                               (&;at offset odds))))))

      (assert "Functor goes over 'all' elements in a stream."
              (let [(^open "&/") &;Functor<Stream>
                    there (&/map (n.* factor) sample0)
                    back-again (&/map (n./ factor) there)]
                (and (not (List/= (&;take size sample0)
                                  (&;take size there)))
                     (List/= (&;take size sample0)
                             (&;take size back-again)))))

      (assert "CoMonad produces a value for every element in a stream."
              (let [(^open "&/") &;Functor<Stream>]
                (List/= (&;take size (&/map (n.* factor) sample1))
                        (&;take size
                                (be &;CoMonad<Stream>
                                  [inputs sample1]
                                  (n.* factor (&;head inputs)))))))

      (assert "'unfold' generalizes 'iterate'."
              (let [(^open "&/") &;Functor<Stream>
                    (^open "List/") (list;Eq<List> text;Eq<Text>)]
                (List/= (&;take size
                                (&/map Nat/encode (&;iterate n.inc offset)))
                        (&;take size
                                (&;unfold (lambda [n] [(n.inc n) (Nat/encode n)])
                                          offset)))))

      (assert "Can cycle over the same elements as an infinite stream."
              (|> (&;cycle cycle-seed)
                  (default (undefined))
                  (&;at cycle-sample-idx)
                  (n.= (default (undefined)
                         (list;at (n.% size cycle-sample-idx)
                                  cycle-seed)))))
      ))
