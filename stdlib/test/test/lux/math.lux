##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data [text "Text/" Monoid<Text>]
             text/format
             [bool "b/" Eq<Bool>]
             [number "r/" Number<Real>]
             (struct [list "List/" Fold<List> Functor<List>])
             [product])
       (codata function)
       (math ["R" random])
       pipe
       ["&" math])
  lux/test)

(def: (within? margin-of-error standard value)
  (-> Real Real Real Bool)
  (r.< margin-of-error
       (r/abs (r.- standard value))))

## (def: margin Real 0.0000001)

## ## The JVM trigonometry functions sometimes give me funky results.
## ## I won't be testing this, until I can figure out what's going on, or
## ## come up with my own implementation
## (test: "Trigonometry"
##   [angle (|> R;real (:: @ map (r.* &;tau)))]
##   ($_ seq
##       (assert "Sine and arc-sine are inverse functions."
##               (|> angle &;sin &;asin (within? margin angle)))

##       (assert "Cosine and arc-cosine are inverse functions."
##               (|> angle &;cos &;acos (within? margin angle)))

##       (assert "Tangent and arc-tangent are inverse functions."
##               (|> angle &;tan &;atan (within? margin angle)))

##       (assert "Can freely go between degrees and radians."
##               (|> angle &;degrees &;radians (within? margin angle)))
##       ))

(test: "Roots"
  [factor (|> R;nat (:: @ map (|>. (n.% +1000)
                                   (n.max +1)
                                   nat-to-int
                                   int-to-real)))
   base (|> R;real (:: @ map (r.* factor)))]
  ($_ seq
      (assert "Square-root is inverse of square."
              (|> base (&;pow 2.0) &;sqrt (r.= base)))
      
      (assert "Cubic-root is inverse of cube."
              (|> base (&;pow 3.0) &;cbrt (r.= base)))
      ))

(test: "Rounding"
  [sample (|> R;real (:: @ map (r.* 1000.0)))]
  ($_ seq
      (assert "The ceiling will be an integer value, and will be >= the original."
              (let [ceil'd (&;ceil sample)]
                (and (|> ceil'd real-to-int int-to-real (r.= ceil'd))
                     (r.>= sample ceil'd)
                     (r.<= 1.0 (r.- sample ceil'd)))))

      (assert "The floor will be an integer value, and will be <= the original."
              (let [floor'd (&;floor sample)]
                (and (|> floor'd real-to-int int-to-real (r.= floor'd))
                     (r.<= sample floor'd)
                     (r.<= 1.0 (r.- floor'd sample)))))

      (assert "The round will be an integer value, and will be < or > or = the original."
              (let [round'd (&;round sample)]
                (and (|> round'd real-to-int int-to-real (r.= round'd))
                     (r.<= 1.0 (r/abs (r.- sample round'd))))))
      ))

(test: "Exponentials and logarithms"
  [sample (|> R;real (:: @ map (r.* 10.0)))]
  (assert "Logarithm is the inverse of exponential."
          (|> sample &;exp &;log (within? 1.0e-15 sample))))

(test: "Greatest-Common-Divisor and Least-Common-Multiple"
  [#let [gen-nat (|> R;nat (:: @ map (|>. (n.% +1000) (n.max +1))))]
   x gen-nat
   y gen-nat]
  ($_ (assert "GCD"
              (let [gcd (&;gcd x y)]
                (and (n.= +0 (n.% gcd x))
                     (n.= +0 (n.% gcd y))
                     (n.>= +1 gcd))))

      (assert "LCM"
              (let [lcm (&;lcm x y)]
                (and (n.= +0 (n.% x lcm))
                     (n.= +0 (n.% y lcm))
                     (n.<= (n.* x y) lcm))))
      ))

(test: "Infix syntax"
  [x R;nat
   y R;nat
   z R;nat
   #let [top (|> x (n.max y) (n.max z))
         bottom (|> x (n.min y) (n.min z))]]
  ($_ seq
      (assert "Constant values don't change."
              (n.= x (&;infix x)))

      (assert "Can call infix functions."
              (n.= (&;gcd y x) (&;infix [x &;gcd y])))

      (assert "Can use regular syntax in the middle of infix code."
              (n.= (&;gcd +450 (n.* +3 +9))
                   (&;infix [(n.* +3 +9) &;gcd +450])))

      (assert "Can use non-numerical functions/macros as operators."
              (b/= (and (n.< y x) (n.< z y))
                   (&;infix [[x n.< y] and [y n.< z]])))

      (assert "Can combine boolean operations in special ways via special keywords."
              (and (b/= (and (n.< y x) (n.< z y))
                        (&;infix [#and x n.< y n.< z]))
                   (b/= (and (n.< y x) (n.> z y))
                        (&;infix [#and x n.< y n.> z]))))
      ))
