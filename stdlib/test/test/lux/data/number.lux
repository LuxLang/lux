(.module:
  [lux #*
   [control
    ["M" monad (#+ do Monad)]
    pipe]
   [data
    number
    [text ("text/" Equivalence<Text>)
     format]]
   [math
    ["r" random]]]
  lux/test)

(do-template [category rand-gen <Equivalence> <Order>]
  [(context: (format "[" category "] " "Equivalence & Order")
     (<| (times +100)
         (do @
           [x rand-gen
            y rand-gen]
           (test "" (and (:: <Equivalence> = x x)
                         (or (:: <Equivalence> = x y)
                             (:: <Order> < y x)
                             (:: <Order> > y x)))))))]

  ["Nat"  r.nat  Equivalence<Nat>  Order<Nat>]
  ["Int"  r.int  Equivalence<Int>  Order<Int>]
  ["Rev"  r.rev  Equivalence<Rev>  Order<Rev>]
  ["Frac" r.frac Equivalence<Frac> Order<Frac>]
  )

(do-template [category rand-gen <Number> <Order>]
  [(context: (format "[" category "] " "Number")
     (<| (times +100)
         (do @
           [x rand-gen
            #let [(^open) <Number>
                  (^open) <Order>]]
           (test "" (and (>= x (abs x))
                         ## abs(0.0) == 0.0 && negate(abs(0.0)) == -0.0
                         (or (text/= "Frac" category)
                             (not (= x (negate x))))
                         (= x (negate (negate x)))
                         ## There is loss of precision when multiplying
                         (or (text/= "Rev" category)
                             (= x (* (signum x)
                                     (abs x)))))))))]

  ["Nat"  r.nat  Number<Nat>  Order<Nat>]
  ["Int"  r.int  Number<Int>  Order<Int>]
  ["Rev"  r.rev  Number<Rev>  Order<Rev>]
  ["Frac" r.frac Number<Frac> Order<Frac>]
  )

(do-template [category rand-gen <Enum> <Number> <Order>]
  [(context: (format "[" category "] " "Enum")
     (<| (times +100)
         (do @
           [x rand-gen]
           (test "" (let [(^open) <Number>
                          (^open) <Order>]
                      (and (> x
                              (:: <Enum> succ x))
                           (< x
                              (:: <Enum> pred x))
                           
                           (= x
                              (|> x (:: <Enum> pred) (:: <Enum> succ)))
                           (= x
                              (|> x (:: <Enum> succ) (:: <Enum> pred)))
                           ))))))]

  ["Nat"  r.nat Enum<Nat> Number<Nat> Order<Nat>]
  ["Int"  r.int Enum<Int> Number<Int> Order<Int>]
  )

(do-template [category rand-gen <Number> <Order> <Interval> <test>]
  [(context: (format "[" category "] " "Interval")
     (<| (times +100)
         (do @
           [x (|> rand-gen (r.filter <test>))
            #let [(^open) <Number>
                  (^open) <Order>]]
           (test "" (and (<= x (:: <Interval> bottom))
                         (>= x (:: <Interval> top)))))))]

  ["Nat"  r.nat  Number<Nat>  Order<Nat>  Interval<Nat>  (function (_ _) #1)]
  ["Int"  r.int  Number<Int>  Order<Int>  Interval<Int>  (function (_ _) #1)]
  ## Both min and max values will be positive (thus, greater than zero)
  ["Rev"  r.rev  Number<Rev>  Order<Rev>  Interval<Rev>  (function (_ _) #1)]
  ["Frac" r.frac Number<Frac> Order<Frac> Interval<Frac> (f/> 0.0)]
  )

(do-template [category rand-gen <Number> <Order> <Monoid> <cap> <test>]
  [(context: (format "[" category "] " "Monoid")
     (<| (times +100)
         (do @
           [x (|> rand-gen (:: @ map (|>> (:: <Number> abs) <cap>)) (r.filter <test>))
            #let [(^open) <Number>
                  (^open) <Order>
                  (^open) <Monoid>]]
           (test "Composing with identity doesn't change the value."
                 (and (= x (compose identity x))
                      (= x (compose x identity))
                      (= identity (compose identity identity)))))))]

  ["Nat/Add"  r.nat  Number<Nat>  Order<Nat>  Add@Monoid<Nat>  (n/% +1000)  (function (_ _) #1)]
  ["Nat/Mul"  r.nat  Number<Nat>  Order<Nat>  Mul@Monoid<Nat>  (n/% +1000)  (function (_ _) #1)]
  ["Nat/Min"  r.nat  Number<Nat>  Order<Nat>  Min@Monoid<Nat>  (n/% +1000)  (function (_ _) #1)]
  ["Nat/Max"  r.nat  Number<Nat>  Order<Nat>  Max@Monoid<Nat>  (n/% +1000)  (function (_ _) #1)]
  ["Int/Add"  r.int  Number<Int>  Order<Int>  Add@Monoid<Int>  (i/% 1000)   (function (_ _) #1)]
  ["Int/Mul"  r.int  Number<Int>  Order<Int>  Mul@Monoid<Int>  (i/% 1000)   (function (_ _) #1)]
  ["Int/Min"  r.int  Number<Int>  Order<Int>  Min@Monoid<Int>  (i/% 1000)   (function (_ _) #1)]
  ["Int/Max"  r.int  Number<Int>  Order<Int>  Max@Monoid<Int>  (i/% 1000)   (function (_ _) #1)]
  ["Rev/Add"  r.rev  Number<Rev>  Order<Rev>  Add@Monoid<Rev>  (r/% .125)   (function (_ _) #1)]
  ["Rev/Mul"  r.rev  Number<Rev>  Order<Rev>  Mul@Monoid<Rev>  (r/% .125)   (function (_ _) #1)]
  ["Rev/Min"  r.rev  Number<Rev>  Order<Rev>  Min@Monoid<Rev>  (r/% .125)   (function (_ _) #1)]
  ["Rev/Max"  r.rev  Number<Rev>  Order<Rev>  Max@Monoid<Rev>  (r/% .125)   (function (_ _) #1)]
  ["Frac/Add" r.frac Number<Frac> Order<Frac> Add@Monoid<Frac> (f/% 1000.0) (f/> 0.0)]
  ["Frac/Mul" r.frac Number<Frac> Order<Frac> Mul@Monoid<Frac> (f/% 1000.0) (f/> 0.0)]
  ["Frac/Min" r.frac Number<Frac> Order<Frac> Min@Monoid<Frac> (f/% 1000.0) (f/> 0.0)]
  ["Frac/Max" r.frac Number<Frac> Order<Frac> Max@Monoid<Frac> (f/% 1000.0) (f/> 0.0)]
  )

(do-template [<category> <rand-gen> <Equivalence> <Codec>]
  [(context: (format "[" <category> "] " "Alternative formats")
     (<| (times +100)
         (do @
           [x <rand-gen>]
           (test "Can encode/decode values."
                 (|> x
                     (:: <Codec> encode)
                     (:: <Codec> decode)
                     (case> (#.Right x')
                            (:: <Equivalence> = x x')

                            (#.Left _)
                            #0))))))]

  ["Nat/Binary"   r.nat  Equivalence<Nat>  Binary@Codec<Text,Nat>]
  ["Nat/Octal"    r.nat  Equivalence<Nat>  Octal@Codec<Text,Nat>]
  ["Nat/Decimal"  r.nat  Equivalence<Nat>  Codec<Text,Nat>]
  ["Nat/Hex"      r.nat  Equivalence<Nat>  Hex@Codec<Text,Nat>]

  ["Int/Binary"   r.int  Equivalence<Int>  Binary@Codec<Text,Int>]
  ["Int/Octal"    r.int  Equivalence<Int>  Octal@Codec<Text,Int>]
  ["Int/Decimal"  r.int  Equivalence<Int>  Codec<Text,Int>]
  ["Int/Hex"      r.int  Equivalence<Int>  Hex@Codec<Text,Int>]

  ["Rev/Binary"   r.rev  Equivalence<Rev>  Binary@Codec<Text,Rev>]
  ["Rev/Octal"    r.rev  Equivalence<Rev>  Octal@Codec<Text,Rev>]
  ["Rev/Decimal"  r.rev  Equivalence<Rev>  Codec<Text,Rev>]
  ["Rev/Hex"      r.rev  Equivalence<Rev>  Hex@Codec<Text,Rev>]

  ["Frac/Binary"  r.frac Equivalence<Frac> Binary@Codec<Text,Frac>]
  ["Frac/Octal"   r.frac Equivalence<Frac> Octal@Codec<Text,Frac>]
  ["Frac/Decimal" r.frac Equivalence<Frac> Codec<Text,Frac>]
  ["Frac/Hex"     r.frac Equivalence<Frac> Hex@Codec<Text,Frac>]
  )

(context: "Can convert frac values to/from their bit patterns."
  (<| (times +100)
      (do @
        [raw r.frac
         factor (|> r.nat (:: @ map (|>> (n/% +1000) (n/max +1))))
         #let [sample (|> factor .int int-to-frac (f/* raw))]]
        (test "Can convert frac values to/from their bit patterns."
              (|> sample frac-to-bits bits-to-frac (f/= sample))))))

(context: "Macros for alternative numeric encodings."
  ($_ seq
      (test "Binary."
            (and (n/= (bin "+11001001") (bin "+11_00_10_01"))
                 (i/= (bin "11001001") (bin "11_00_10_01"))
                 (r/= (bin ".11001001") (bin ".11_00_10_01"))
                 (f/= (bin "1100.1001") (bin "11_00.10_01"))))
      (test "Octal."
            (and (n/= (oct "+615243") (oct "+615_243"))
                 (i/= (oct "615243") (oct "615_243"))
                 (r/= (oct ".615243") (oct ".615_243"))
                 (f/= (oct "6152.43") (oct "615_2.43"))))
      (test "Hexadecimal."
            (and (n/= (hex "+deadBEEF") (hex "+dead_BEEF"))
                 (i/= (hex "deadBEEF") (hex "dead_BEEF"))
                 (r/= (hex ".deadBEEF") (hex ".dead_BEEF"))
                 (f/= (hex "deadBE.EF") (hex "dead_BE.EF"))))))
