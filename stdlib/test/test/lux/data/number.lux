##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data number
             [text "Text/" Monoid<Text>]
             text/format)
       (math ["R" random])
       pipe)
  lux/test)

(do-template [category rand-gen <Eq> <Ord>]
  [(test: (format "[" category "] " "Eq & Ord")
     [x rand-gen
      y rand-gen]
     (assert "" (and (:: <Eq> = x x)
                     (or (:: <Eq> = x y)
                         (:: <Ord> < y x)
                         (:: <Ord> > y x)))))]

  ["Nat"  R;nat  Eq<Nat>  Ord<Nat>]
  ["Int"  R;int  Eq<Int>  Ord<Int>]
  ["Real" R;real Eq<Real> Ord<Real>]
  ["Frac" R;frac Eq<Frac> Ord<Frac>]
  )

(do-template [category rand-gen <Number>]
  [(test: (format "[" category "] " "Number")
     [x rand-gen]
     (assert "" (let [(^open) <Number>]
                  (and (>= x (abs x))
                       (<= x (negate (abs x)))
                       (= x (* (signum x)
                               (abs x)))))))]

  ["Nat"  R;nat  Number<Nat>]
  ["Int"  R;int  Number<Int>]
  ["Real" R;real Number<Real>]
  )

(do-template [category rand-gen <Enum> <Number>]
  [(test: (format "[" category "] " "Enum")
     [x rand-gen]
     (assert "" (let [(^open) <Number>]
                  (and (> x
                          (:: <Enum> succ x))
                       (< x
                          (:: <Enum> pred x))
                       
                       (= x
                          (|> x (:: <Enum> pred) (:: <Enum> succ)))
                       (= x
                          (|> x (:: <Enum> succ) (:: <Enum> pred)))
                       ))))]

  ["Nat"  R;nat Enum<Nat> Number<Nat>]
  ["Int"  R;int Enum<Int> Number<Int>]
  )

(do-template [category rand-gen <Number> <Bounded>]
  [(test: (format "[" category "] " "Bounded")
     [x rand-gen]
     (assert "" (let [(^open) <Number>]
                  (and (<= x (:: <Bounded> bottom))
                       (>= x (:: <Bounded> top))
                       ))))]

  ["Nat"  R;nat  Number<Nat>  Bounded<Nat>]
  ["Int"  R;int  Number<Int>  Bounded<Int>]
  ["Real" R;real Number<Real> Bounded<Real>]
  )

(do-template [category rand-gen <Number> <Monoid> <cap>]
  [(test: (format "[" category "] " "Monoid")
     [x (:: @ map (|>. (:: <Number> abs) <cap>) rand-gen)]
     (assert "" (let [(^open) <Number>
                      (^open) <Monoid>]
                  (and (= x (append unit x))
                       (= x (append x unit))
                       (= unit (append unit unit))
                       (>= x (append x x))))))]

  ["Nat/Add"  R;nat  Number<Nat>  Add@Monoid<Nat>  (;%+ +1000)]
  ["Nat/Mul"  R;nat  Number<Nat>  Mul@Monoid<Nat>  (;%+ +1000)]
  ["Nat/Min"  R;nat  Number<Nat>  Min@Monoid<Nat>  (;%+ +1000)]
  ["Nat/Max"  R;nat  Number<Nat>  Max@Monoid<Nat>  (;%+ +1000)]
  ["Int/Add"  R;int  Number<Int>  Add@Monoid<Int>  (;% 1000)]
  ["Int/Mul"  R;int  Number<Int>  Mul@Monoid<Int>  (;% 1000)]
  ["Int/Min"  R;int  Number<Int>  Min@Monoid<Int>  (;% 1000)]
  ["Int/Max"  R;int  Number<Int>  Max@Monoid<Int>  (;% 1000)]
  ["Real/Add" R;real Number<Real> Add@Monoid<Real> (;%. 1000.0)]
  ["Real/Mul" R;real Number<Real> Mul@Monoid<Real> (;%. 1000.0)]
  ["Real/Min" R;real Number<Real> Min@Monoid<Real> (;%. 1000.0)]
  ["Real/Max" R;real Number<Real> Max@Monoid<Real> (;%. 1000.0)]
  )

(do-template [category rand-gen <Number> <Codec>]
  [(test: (format "[" category "] " "Codec")
     [x rand-gen]
     (assert "" (|> x
                    (:: <Codec> encode)
                    (:: <Codec> decode)
                    (case> (#;Right x')
                           (:: <Number> = x x')

                           (#;Left _)
                           false))))]

  ["Nat"  R;nat  Number<Nat>  Codec<Text,Nat>]
  ["Int"  R;int  Number<Int>  Codec<Text,Int>]
  ["Real" R;real Number<Real> Codec<Text,Real>]
  ## ["Frac" R;frac Number<Frac> Codec<Text,Frac>]
  )

(do-template [category rand-gen <Number> <Codec>]
  [(test: (format "[" category "] " "Alternative formats")
     [x rand-gen]
     (assert "" (|> x
                    (:: <Codec> encode)
                    (:: <Codec> decode)
                    (case> (#;Right x')
                           (:: <Number> = x x')

                           (#;Left _)
                           false))))]

  ["Nat/Binary" R;nat  Number<Nat>  Binary@Codec<Text,Nat>]
  ["Nat/Octal"  R;nat  Number<Nat>  Octal@Codec<Text,Nat>]
  ["Nat/Hex"    R;nat  Number<Nat>  Hex@Codec<Text,Nat>]
  )
