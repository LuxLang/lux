(.module:
  [lux #*
   [control
    ["M" monad (#+ do Monad)]]
   [data
    bit]
   [math
    ["r" random]]]
  lux/test)

(context: "Bit operations."
  (<| (times +100)
      (do @
        [value r.bit]
        (test "" (and (not (and value (not value)))
                      (or value (not value))

                      (not (:: Or@Monoid<Bit> identity))
                      (:: Or@Monoid<Bit> compose value (not value))
                      (:: And@Monoid<Bit> identity)
                      (not (:: And@Monoid<Bit> compose value (not value)))
                      
                      (:: Equivalence<Bit> = value (not (not value)))
                      (not (:: Equivalence<Bit> = value (not value)))

                      (not (:: Equivalence<Bit> = value ((complement id) value)))
                      (:: Equivalence<Bit> = value ((complement not) value))

                      (case (|> value
                                (:: Codec<Text,Bit> encode)
                                (:: Codec<Text,Bit> decode))
                        (#.Right dec-value)
                        (:: Equivalence<Bit> = value dec-value)

                        (#.Left _)
                        #0)
                      )))))
