##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (control [monad])
       (codata [io])
       (data ["&" bit]
             number)
       (math ["R" random]))
  lux/test)

(def: width Nat +64)

(test: "Bitwise operations."
  [pattern R;nat
   idx (:: @ map (n.% width) R;nat)]
  ($_ seq
      (assert "" (and (n.< (&;count (&;set idx pattern))
                           (&;count (&;clear idx pattern)))
                      (n.<= (&;count pattern)
                            (&;count (&;clear idx pattern)))
                      (n.>= (&;count pattern)
                            (&;count (&;set idx pattern)))

                      (or (and (&;set? idx pattern)
                               (not (&;set? idx (&;clear idx pattern))))
                          (and (not (&;set? idx pattern))
                               (&;set? idx (&;set idx pattern))))

                      (or (and (&;set? idx pattern)
                               (not (&;set? idx (&;flip idx pattern))))
                          (and (not (&;set? idx pattern))
                               (&;set? idx (&;flip idx pattern))))
                      
                      (n.= width
                           (n.+ (&;count pattern)
                                (&;count (&;~ pattern))))

                      (n.= +0
                           (&;& pattern
                                (&;~ pattern)))
                      (n.= (&;~ +0)
                           (&;| pattern
                                (&;~ pattern)))
                      (n.= (&;~ +0)
                           (&;^ pattern
                                (&;~ pattern)))
                      (n.= +0
                           (&;^ pattern
                                pattern))

                      (|> pattern (&;rotate-left idx) (&;rotate-right idx) (n.= pattern))
                      (|> pattern (&;rotate-right idx) (&;rotate-left idx) (n.= pattern))
                      (|> pattern (&;rotate-left idx) (&;rotate-left (n.- idx width)) (n.= pattern))
                      (|> pattern (&;rotate-right idx) (&;rotate-right (n.- idx width)) (n.= pattern))
                      ))
      
      (assert "Shift right respect the sign of ints."
              (let [value (nat-to-int pattern)]
                (if (i.< 0 value)
                  (i.< 0 (&;>> idx value))
                  (i.>= 0 (&;>> idx value)))))
      ))
