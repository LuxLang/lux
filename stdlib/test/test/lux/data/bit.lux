##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (control [monad])
       (codata [io])
       (data ["&" bit]
             number)
       (math ["R" random]))
  lux/test)

(def: width Nat +64)

(test: "Bitwise operations."
  [pattern R;nat
   idx (:: @ map (%+ width) R;nat)]
  ($_ seq
      (assert "" (and (<+ (&;count (&;set idx pattern))
                          (&;count (&;clear idx pattern)))
                      (<=+ (&;count pattern)
                           (&;count (&;clear idx pattern)))
                      (>=+ (&;count pattern)
                           (&;count (&;set idx pattern)))

                      (or (and (&;set? idx pattern)
                               (not (&;set? idx (&;clear idx pattern))))
                          (and (not (&;set? idx pattern))
                               (&;set? idx (&;set idx pattern))))

                      (or (and (&;set? idx pattern)
                               (not (&;set? idx (&;flip idx pattern))))
                          (and (not (&;set? idx pattern))
                               (&;set? idx (&;flip idx pattern))))
                      
                      (=+ width
                          (++ (&;count pattern)
                              (&;count (&;~ pattern))))

                      (=+ +0
                          (&;& pattern
                               (&;~ pattern)))
                      (=+ (&;~ +0)
                          (&;| pattern
                               (&;~ pattern)))
                      (=+ (&;~ +0)
                          (&;^ pattern
                               (&;~ pattern)))
                      (=+ +0
                          (&;^ pattern
                               pattern))

                      (|> pattern (&;rotate-left idx) (&;rotate-right idx) (=+ pattern))
                      (|> pattern (&;rotate-right idx) (&;rotate-left idx) (=+ pattern))
                      (|> pattern (&;rotate-left idx) (&;rotate-left (-+ idx width)) (=+ pattern))
                      (|> pattern (&;rotate-right idx) (&;rotate-right (-+ idx width)) (=+ pattern))
                      ))
      
      (assert "Shift right respect the sign of ints."
              (let [value (nat-to-int pattern)]
                (if (< 0 value)
                  (< 0 (&;>> idx value))
                  (>= 0 (&;>> idx value)))))
      ))
