(.module:
  [lux #*
   ["." io]
   [control
    [monad (#+ do Monad)]
    pipe]
   [data
    ["/" error (#+ Error)]]]
  lux/test)

(context: "Errors"
  (let [(^open "//.") /.Apply<Error>
        (^open "//.") /.Monad<Error>]
    ($_ seq
        (test "Functor correctly handles both cases."
              (and (|> (: (Error Int) (#/.Success +10))
                       (//map inc)
                       (case> (#/.Success +11) #1 _ #0))

                   (|> (: (Error Int) (#/.Failure "YOLO"))
                       (//map inc)
                       (case> (#/.Failure "YOLO") #1 _ #0))
                   ))
        
        (test "Apply correctly handles both cases."
              (and (|> (//wrap +20)
                       (case> (#/.Success +20) #1 _ #0))
                   (|> (//apply (//wrap inc) (//wrap +10))
                       (case> (#/.Success +11) #1 _ #0))
                   (|> (//apply (//wrap inc) (#/.Failure "YOLO"))
                       (case> (#/.Failure "YOLO") #1 _ #0))))
        
        (test "Monad correctly handles both cases."
              (and (|> (do /.Monad<Error>
                         [f (wrap i/+)
                          a (wrap +10)
                          b (wrap +20)]
                         (wrap (f a b)))
                       (case> (#/.Success +30) #1 _ #0))
                   (|> (do /.Monad<Error>
                         [f (wrap i/+)
                          a (#/.Failure "YOLO")
                          b (wrap +20)]
                         (wrap (f a b)))
                       (case> (#/.Failure "YOLO") #1 _ #0))
                   ))
        )))

(context: "Monad transformer"
  (let [lift (/.lift io.Monad<IO>)
        (^open "io/.") io.Monad<IO>]
    (test "Can add error functionality to any monad."
          (|> (io.run (do (/.ErrorT io.Monad<IO>)
                        [a (lift (io/wrap +123))
                         b (wrap +456)]
                        (wrap (i/+ a b))))
              (case> (#/.Success +579)
                     #1
                     
                     _
                     #0)))))
