##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data ["&" error])
       pipe)
  lux/test)

(test: "Errors"
  (let [(^open "&/") &;Monad<Error>]
    ($_ seq
        (assert "Functor correctly handles both cases."
                (and (|> (: (&;Error Int) (#;Right 10))
                         (&/map i.inc)
                         (case> (#;Right 11) true _ false))

                     (|> (: (&;Error Int) (#;Left "YOLO"))
                         (&/map i.inc)
                         (case> (#;Left "YOLO") true _ false))
                     ))
        
        (assert "Applicative correctly handles both cases."
                (and (|> (&/wrap 20)
                         (case> (#;Right 20) true _ false))
                     (|> (&/apply (&/wrap i.inc) (&/wrap 10))
                         (case> (#;Right 11) true _ false))
                     (|> (&/apply (&/wrap i.inc) (#;Left "YOLO"))
                         (case> (#;Left "YOLO") true _ false))))
        
        (assert "Monad correctly handles both cases."
                (and (|> (do &;Monad<Error>
                           [f (wrap i.+)
                            a (wrap 10)
                            b (wrap 20)]
                           (wrap (f a b)))
                         (case> (#;Right 30) true _ false))
                     (|> (do &;Monad<Error>
                           [f (wrap i.+)
                            a (#;Left "YOLO")
                            b (wrap 20)]
                           (wrap (f a b)))
                         (case> (#;Left "YOLO") true _ false))
                     ))
        )))
