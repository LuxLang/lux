(;module:
  lux
  (lux [io]
       (control monad
                pipe)
       (data text/format
             ["&" result]))
  lux/test)

(context: "Results"
  (let [(^open "&/") &;Monad<Result>]
    ($_ seq
        (test "Functor correctly handles both cases."
              (and (|> (: (&;Result Int) (#&;Success 10))
                       (&/map i.inc)
                       (case> (#&;Success 11) true _ false))

                   (|> (: (&;Result Int) (#&;Error "YOLO"))
                       (&/map i.inc)
                       (case> (#&;Error "YOLO") true _ false))
                   ))
        
        (test "Applicative correctly handles both cases."
              (and (|> (&/wrap 20)
                       (case> (#&;Success 20) true _ false))
                   (|> (&/apply (&/wrap i.inc) (&/wrap 10))
                       (case> (#&;Success 11) true _ false))
                   (|> (&/apply (&/wrap i.inc) (#&;Error "YOLO"))
                       (case> (#&;Error "YOLO") true _ false))))
        
        (test "Monad correctly handles both cases."
              (and (|> (do &;Monad<Result>
                         [f (wrap i.+)
                          a (wrap 10)
                          b (wrap 20)]
                         (wrap (f a b)))
                       (case> (#&;Success 30) true _ false))
                   (|> (do &;Monad<Result>
                         [f (wrap i.+)
                          a (#&;Error "YOLO")
                          b (wrap 20)]
                         (wrap (f a b)))
                       (case> (#&;Error "YOLO") true _ false))
                   ))
        )))

(context: "Monad transformer"
  (let [lift (&;lift io;Monad<IO>)
        (^open "io/") io;Monad<IO>]
    (test "Can add result functionality to any monad."
          (|> (io;run (do (&;ResultT io;Monad<IO>)
                        [a (lift (io/wrap 123))
                         b (wrap 456)]
                        (wrap (i.+ a b))))
              (case> (#&;Success 579) true
                     _ false)))))
