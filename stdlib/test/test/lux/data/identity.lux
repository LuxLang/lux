(.module:
  lux
  (lux [io]
       (control ["M" monad (#+ do Monad)]
                comonad)
       (data ["&" identity]
             [text "Text/" Monoid<Text> Equivalence<Text>]))
  lux/test)

(context: "Identity"
  (let [(^open "&/") &.Apply<Identity>
        (^open "&/") &.Monad<Identity>
        (^open "&/") &.CoMonad<Identity>]
    ($_ seq
        (test "Functor does not affect values."
              (Text/= "yololol" (&/map (Text/compose "yolo") "lol")))
        
        (test "Apply does not affect values."
              (and (Text/= "yolo" (&/wrap "yolo"))
                   (Text/= "yololol" (&/apply (&/wrap (Text/compose "yolo")) (&/wrap "lol")))))
        
        (test "Monad does not affect values."
              (Text/= "yololol" (do &.Monad<Identity>
                                  [f (wrap Text/compose)
                                   a (wrap "yolo")
                                   b (wrap "lol")]
                                  (wrap (f a b)))))
        
        (test "CoMonad does not affect values."
              (and (Text/= "yololol" (&/unwrap "yololol"))
                   (Text/= "yololol" (be &.CoMonad<Identity>
                                       [f Text/compose
                                        a "yolo"
                                        b "lol"]
                                       (f a b)))))
        )))
