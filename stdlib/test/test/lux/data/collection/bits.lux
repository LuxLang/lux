(.module:
  [lux #*
   [control
    [monad (#+ do)]
    [predicate]]
   [data
    [collection
     ["/" bits]]]
   [math
    ["r" random]]]
  lux/test
  [test [lux [control ["_eq" equivalence]]]])

(def: (size min max)
  (-> Nat Nat (r.Random Nat))
  (|> r.nat
      (:: r.Monad<Random> map (|>> (n/% max) (n/max min)))))

(def: bits
  (r.Random /.Bits)
  (do r.Monad<Random>
    [size (size +1 +1_000)
     idx (|> r.nat (:: @ map (n/% size)))]
    (wrap (|> /.empty (/.set idx)))))

(context: "Bits."
  (<| (times +100)
      (do @
        [size (size +1 +1_000)
         idx (|> r.nat (:: @ map (n/% size)))
         sample bits]
        ($_ seq
            (test "Can set individual bits."
                  (and (|> /.empty (/.get idx) not)
                       (|> /.empty (/.set idx) (/.get idx))))
            (test "Can clear individual bits."
                  (|> /.empty (/.set idx) (/.clear idx) (/.get idx) not))
            (test "Can flip individual bits."
                  (and (|> /.empty (/.flip idx) (/.get idx))
                       (|> /.empty (/.flip idx) (/.flip idx) (/.get idx) not)))

            (test "Bits (only) grow when (and as much as) necessary."
                  (and (n/= +0 (/.capacity /.empty))
                       (|> /.empty (/.set idx) /.capacity
                           (n/- idx)
                           (predicate.union (n/>= +0)
                                            (n/< /.chunk-size)))))
            (test "Bits (must) shrink when (and as much as) possible."
                  (let [grown (/.flip idx /.empty)]
                    (and (n/> +0 (/.capacity grown))
                         (is? /.empty (/.flip idx grown)))))

            (test "Intersection can be detected when there are set bits in common."
                  (and (not (/.intersects? /.empty
                                           /.empty))
                       (/.intersects? (/.set idx /.empty)
                                      (/.set idx /.empty))
                       (not (/.intersects? (/.set (inc idx) /.empty)
                                           (/.set idx /.empty)))))
            (test "Cannot intersect with one's opposite."
                  (not (/.intersects? sample (/.not sample))))

            (test "'and' with oneself changes nothing"
                  (:: /.Equivalence<Bits> = sample (/.and sample sample)))
            (test "'and' with one's opposite yields the empty bit-set."
                  (is? /.empty (/.and sample (/.not sample))))
            
            (test "'or' with one's opposite fully saturates a bit-set."
                  (n/= (/.size (/.or sample (/.not sample)))
                       (/.capacity sample)))
            
            (test "'xor' with oneself yields the empty bit-set."
                  (is? /.empty (/.xor sample sample)))
            (test "'xor' with one's opposite fully saturates a bit-set."
                  (n/= (/.size (/.xor sample (/.not sample)))
                       (/.capacity sample)))

            (test "Double negation results in original bit-set."
                  (:: /.Equivalence<Bits> = sample (/.not (/.not sample))))
            (test "Negation does not affect the empty bit-set."
                  (is? /.empty (/.not /.empty)))
            
            (_eq.spec /.Equivalence<Bits> ..bits)
            ))))
