(.module:
  [lux #*
   [control
    [monad (#+ do Monad)]]
   [data
    ["." number]
    ["." maybe]
    [collection ["&" row]
     [list ("list/." Fold<List>)]]]
   [math
    ["r" random]]]
  lux/test)

(context: "Rows"
  (<| (times +100)
      (do @
        [size (|> r.nat (:: @ map (|>> (n/% +100) (n/max +1))))
         idx (|> r.nat (:: @ map (n/% size)))
         sample (r.row size r.nat)
         other-sample (r.row size r.nat)
         non-member (|> r.nat (r.filter (|>> (&.member? number.Equivalence<Nat> sample) not)))
         #let [(^open "&/.") (&.Equivalence<Row> number.Equivalence<Nat>)
               (^open "&/.") &.Apply<Row>
               (^open "&/.") &.Monad<Row>
               (^open "&/.") &.Fold<Row>
               (^open "&/.") &.Monoid<Row>]]
        ($_ seq
            (test "Can query size of row."
                  (if (&.empty? sample)
                    (and (n/= +0 size)
                         (n/= +0 (&.size sample)))
                    (n/= size (&.size sample))))

            (test "Can add and remove elements to rows."
                  (and (n/= (inc size) (&.size (&.add non-member sample)))
                       (n/= (dec size) (&.size (&.pop sample)))))

            (test "Can put and get elements into rows."
                  (|> sample
                      (&.put idx non-member)
                      (&.nth idx)
                      maybe.assume
                      (is? non-member)))

            (test "Can update elements of rows."
                  (|> sample
                      (&.put idx non-member) (&.update idx inc)
                      (&.nth idx) maybe.assume
                      (n/= (inc non-member))))

            (test "Can safely transform to/from lists."
                  (|> sample &.to-list &.from-list (&/= sample)))

            (test "Can identify members of a row."
                  (and (not (&.member? number.Equivalence<Nat> sample non-member))
                       (&.member? number.Equivalence<Nat> (&.add non-member sample) non-member)))

            (test "Can fold over elements of row."
                  (n/= (list/fold n/+ +0 (&.to-list sample))
                       (&/fold n/+ +0 sample)))
            
            (test "Functor goes over every element."
                  (let [there (&/map inc sample)
                        back-again (&/map dec there)]
                    (and (not (&/= sample there))
                         (&/= sample back-again))))

            (test "Apply allows you to create singleton rows, and apply rows of functions to rows of values."
                  (and (&/= (&.row non-member) (&/wrap non-member))
                       (&/= (&/map inc sample)  (&/apply (&/wrap inc) sample))))

            (test "Row concatenation is a monad."
                  (&/= (&/compose sample other-sample)
                       (&/join (&.row sample other-sample))))

            (test "Can reverse."
                  (and (not (&/= sample
                                 (&.reverse sample)))
                       (not (&/= sample
                                 (&.reverse (&.reverse sample))))))
            ))))
