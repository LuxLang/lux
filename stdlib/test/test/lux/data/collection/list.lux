(.module:
  [lux #*
   ["." io]
   [control
    [monad (#+ do Monad)]
    pipe]
   [data
    ["." number]
    ["." bit]
    ["." product]
    ["." maybe]
    [collection
     ["&" list]]]
   [math
    ["r" random]]]
  lux/test)

(def: bounded-size
  (r.Random Nat)
  (|> r.nat
      (:: r.Monad<Random> map (|>> (n/% |100) (n/+ |10)))))

(context: "Lists: Part 1"
  (<| (times |100)
      (do @
        [size bounded-size
         idx (:: @ map (n/% size) r.nat)
         sample (r.list size r.nat)
         other-size bounded-size
         other-sample (r.list other-size r.nat)
         separator r.nat
         #let [(^open ".") (&.Equivalence<List> number.Equivalence<Nat>)
               (^open "&/.") &.Functor<List>]]
        ($_ seq
            (test "The size function should correctly portray the size of the list."
                  (n/= size (&.size sample)))

            (test "The repeat function should produce as many elements as asked of it."
                  (n/= size (&.size (&.repeat size []))))

            (test "Reversing a list does not change it's size."
                  (n/= (&.size sample)
                       (&.size (&.reverse sample))))
            
            (test "Reversing a list twice results in the original list."
                  (= sample
                     (&.reverse (&.reverse sample))))

            (test "Filtering by a predicate and its complement should result in a number of elements equal to the original list."
                  (and (n/= (&.size sample)
                            (n/+ (&.size (&.filter n/even? sample))
                                 (&.size (&.filter (bit.complement n/even?) sample))))
                       (let [[plus minus] (&.partition n/even? sample)]
                         (n/= (&.size sample)
                              (n/+ (&.size plus)
                                   (&.size minus))))))

            (test "If every element in a list satisfies a predicate, there can't be any that satisfy its complement."
                  (if (&.every? n/even? sample)
                    (and (not (&.any? (bit.complement n/even?) sample))
                         (&.empty? (&.filter (bit.complement n/even?) sample)))
                    (&.any? (bit.complement n/even?) sample)))

            (test "Any element of the list can be considered its member."
                  (let [elem (maybe.assume (&.nth idx sample))]
                    (&.member? number.Equivalence<Nat> sample elem)))
            ))))

(context: "Lists: Part 2"
  (<| (times |100)
      (do @
        [size bounded-size
         idx (:: @ map (n/% size) r.nat)
         sample (r.list size r.nat)
         other-size bounded-size
         other-sample (r.list other-size r.nat)
         separator r.nat
         #let [(^open ".") (&.Equivalence<List> number.Equivalence<Nat>)
               (^open "&/.") &.Functor<List>]]
        ($_ seq
            (test "Appending the head and the tail should yield the original list."
                  (let [head (maybe.assume (&.head sample))
                        tail (maybe.assume (&.tail sample))]
                    (= sample
                       (#.Cons head tail))))

            (test "Appending the inits and the last should yield the original list."
                  (let [(^open ".") &.Monoid<List>
                        inits (maybe.assume (&.inits sample))
                        last (maybe.assume (&.last sample))]
                    (= sample
                       (compose inits (list last)))))

            (test "Functor should go over every element of the list."
                  (let [(^open ".") &.Functor<List>
                        there (map inc sample)
                        back-again (map dec there)]
                    (and (not (= sample there))
                         (= sample back-again))))

            (test "Splitting a list into chunks and re-appending them should yield the original list."
                  (let [(^open ".") &.Monoid<List>
                        [left right] (&.split idx sample)
                        [left' right'] (&.split-with n/even? sample)]
                    (and (= sample
                            (compose left right))
                         (= sample
                            (compose left' right'))
                         (= sample
                            (compose (&.take idx sample)
                                     (&.drop idx sample)))
                         (= sample
                            (compose (&.take-while n/even? sample)
                                     (&.drop-while n/even? sample)))
                         )))

            (test "Segmenting the list in pairs should yield as many elements as N/2."
                  (n/= (n// |2 size)
                       (&.size (&.as-pairs sample))))

            (test "Sorting a list shouldn't change it's size."
                  (n/= (&.size sample)
                       (&.size (&.sort n/< sample))))

            (test "Sorting a list with one order should yield the reverse of sorting it with the opposite order."
                  (= (&.sort n/< sample)
                     (&.reverse (&.sort n/> sample))))
            ))))

(context: "Lists: Part 3"
  (<| (times |100)
      (do @
        [size bounded-size
         idx (:: @ map (n/% size) r.nat)
         sample (r.list size r.nat)
         other-size bounded-size
         other-sample (r.list other-size r.nat)
         separator r.nat
         from (|> r.nat (:: @ map (n/% |10)))
         to (|> r.nat (:: @ map (n/% |10)))
         #let [(^open ".") (&.Equivalence<List> number.Equivalence<Nat>)
               (^open "&/.") &.Functor<List>]]
        ($_ seq
            (test "If you zip 2 lists, the result's size will be that of the smaller list."
                  (n/= (&.size (&.zip2 sample other-sample))
                       (n/min (&.size sample) (&.size other-sample))))
            
            (test "I can pair-up elements of a list in order."
                  (let [(^open ".") &.Functor<List>
                        zipped (&.zip2 sample other-sample)
                        num-zipper (&.size zipped)]
                    (and (|> zipped (map product.left) (= (&.take num-zipper sample)))
                         (|> zipped (map product.right) (= (&.take num-zipper other-sample))))))
            
            (test "You can generate indices for any size, and they will be in ascending order."
                  (let [(^open ".") &.Functor<List>
                        indices (&.indices size)]
                    (and (n/= size (&.size indices))
                         (= indices
                            (&.sort n/< indices))
                         (&.every? (n/= (dec size))
                                   (&.zip2-with n/+
                                                indices
                                                (&.sort n/> indices)))
                         )))

            (test "The 'interpose' function places a value between every member of a list."
                  (let [(^open ".") &.Functor<List>
                        sample+ (&.interpose separator sample)]
                    (and (n/= (|> size (n/* |2) dec)
                              (&.size sample+))
                         (|> sample+ &.as-pairs (map product.right) (&.every? (n/= separator))))))

            (test "List append is a monoid."
                  (let [(^open ".") &.Monoid<List>]
                    (and (= sample (compose identity sample))
                         (= sample (compose sample identity))
                         (let [[left right] (&.split size (compose sample other-sample))]
                           (and (= sample left)
                                (= other-sample right))))))

            (test "Apply allows you to create singleton lists, and apply lists of functions to lists of values."
                  (let [(^open ".") &.Monad<List>
                        (^open ".") &.Apply<List>]
                    (and (= (list separator) (wrap separator))
                         (= (map inc sample)
                            (apply (wrap inc) sample)))))

            (test "List concatenation is a monad."
                  (let [(^open ".") &.Monad<List>
                        (^open ".") &.Monoid<List>]
                    (= (compose sample other-sample)
                       (join (list sample other-sample)))))

            (test "You can find any value that satisfies some criterium, if such values exist in the list."
                  (case (&.find n/even? sample)
                    (#.Some found)
                    (and (n/even? found)
                         (&.any? n/even? sample)
                         (not (&.every? (bit.complement n/even?) sample)))

                    #.None
                    (and (not (&.any? n/even? sample))
                         (&.every? (bit.complement n/even?) sample))))

            (test "You can iteratively construct a list, generating values until you're done."
                  (= (&.n/range |0 (dec size))
                     (&.iterate (function (_ n) (if (n/< size n) (#.Some (inc n)) #.None))
                                |0)))

            (test "Can enumerate all elements in a list."
                  (let [enum-sample (&.enumerate sample)]
                    (and (= (&.indices (&.size enum-sample))
                            (&/map product.left enum-sample))
                         (= sample
                            (&/map product.right enum-sample)))))

            (test "Ranges can be constructed forward and backwards."
                  (and (let [(^open "list/.") (&.Equivalence<List> number.Equivalence<Nat>)]
                         (list/= (&.n/range from to)
                                 (&.reverse (&.n/range to from))))
                       (let [(^open "list/.") (&.Equivalence<List> number.Equivalence<Int>)
                             from (.int from)
                             to (.int to)]
                         (list/= (&.i/range from to)
                                 (&.reverse (&.i/range to from))))))
            ))))

## TODO: Add again once new-luxc becomes the standard compiler.
(context: "Monad transformer"
  (let [lift (&.lift io.Monad<IO>)
        (^open "io/.") io.Monad<IO>]
    (test "Can add list functionality to any monad."
          (|> (io.run (do (&.ListT io.Monad<IO>)
                        [a (lift (io/wrap +123))
                         b (wrap +456)]
                        (wrap (i/+ a b))))
              (case> (^ (list +579)) #1
                     _               #0)))))
