(.module:
  lux
  (lux [io]
       (control [monad (#+ do Monad)])
       (data [product]
             [number]
             [text ("text/" Equivalence<Text>)]
             text/format
             (collection (tree ["&" rose])
                         [list ("list/" Functor<List> Fold<List>)]))
       ["r" math/random])
  lux/test)

(def: gen-tree
  (r.Random [Nat (&.Tree Nat)])
  (r.rec
   (function (_ gen-tree)
     (r.either (:: r.Monad<Random> map (|>> &.leaf [+1]) r.nat)
               (do r.Monad<Random>
                 [value r.nat
                  num-children (|> r.nat (:: @ map (n/% +3)))
                  children' (r.list num-children gen-tree)
                  #let [size' (list/fold n/+ +0 (list/map product.left children'))
                        children (list/map product.right children')]]
                 (wrap [(inc size')
                        (&.branch value children)]))
               ))))

(context: "Trees"
  (<| (times +100)
      (do @
        [[size sample] gen-tree
         #let [(^open "&/") (&.Equivalence<Tree> number.Equivalence<Nat>)
               (^open "&/") &.Fold<Tree>
               concat (function (_ addition partial) (format partial (%n addition)))]]
        ($_ seq
            (test "Can compare trees for equivalence."
                  (&/= sample sample))

            (test "Can flatten a tree to get all the nodes as a flat tree."
                  (n/= size
                       (list.size (&.flatten sample))))

            (test "Can fold trees."
                  (text/= (&/fold concat "" sample)
                          (list/fold concat "" (&.flatten sample))))
            ))))
