##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data (error ["&" exception #+ exception:])
             [text]
             [number])
       (codata function)
       (math ["R" random])
       pipe)
  lux/test)

(exception: Some-Exception)

(exception: Another-Exception)

(exception: Unknown-Exception)

(test: "Exceptions"
  [should-throw? R;bool
   which? R;bool
   should-catch? R;bool
   default-val R;nat
   some-val R;nat
   another-val R;nat
   otherwise-val R;nat
   #let [this-ex (if should-catch?
                   (if which?
                     Some-Exception
                     Another-Exception)
                   Unknown-Exception)
         this-val (if should-throw?
                    (if should-catch?
                      (if which?
                        some-val
                        another-val)
                      otherwise-val)
                    default-val)]]
  (assert "Catch and otherwhise handlers can properly handle the flow of exception-handling."
          (=+ this-val (|> (if should-throw?
                             (&;return default-val)
                             (&;throw this-ex "Uh-oh..."))
                           (&;catch Some-Exception (lambda [ex] some-val))
                           (&;catch Another-Exception (lambda [ex] another-val))
                           (&;otherwise (lambda [ex] otherwise-val))))))
