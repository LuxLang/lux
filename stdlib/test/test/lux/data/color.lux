(.module:
  lux
  (lux [io]
       (control [monad #+ do])
       (data ["@" color]
             [number "frac/" Number<Frac>])
       [math]
       ["r" math/random])
  lux/test)

(def: color
  (r.Random @.Color)
  (|> ($_ r.seq r.nat r.nat r.nat)
      (:: r.Monad<Random> map @.color)))

(def: scale
  (-> Nat Frac)
  (|>> nat-to-int int-to-frac))

(def: square (-> Frac Frac) (math.pow 2.0))

(def: (distance from to)
  (-> @.Color @.Color Frac)
  (let [[fr fg fb] (@.unpack from)
        [tr tg tb] (@.unpack to)]
    (math.pow 0.5 ($_ f/+
                      (|> (scale tr) (f/- (scale fr)) square)
                      (|> (scale tg) (f/- (scale fg)) square)
                      (|> (scale tb) (f/- (scale fb)) square)))))

(def: error-margin Frac 1.8)

(def: black @.Color (@.color [+0 +0 +0]))
(def: white @.Color (@.color [+255 +255 +255]))

(do-template [<field>]
  [(def: (<field> color)
     (-> @.Color Frac)
     (let [[hue saturation luminance] (@.to-hsl color)]
       <field>))]

  [saturation]
  [luminance]
  )

(context: "Color."
  (<| (times +100)
      (do @
        [any color
         colorful (|> color
                      (r.filter (function (_ color) (|> (distance color black) (f/>= 100.0))))
                      (r.filter (function (_ color) (|> (distance color white) (f/>= 100.0)))))
         mediocre (|> color
                      (r.filter (|>> saturation
                                     ((function (_ saturation)
                                        (and (f/>= 0.25 saturation)
                                             (f/<= 0.75 saturation)))))))
         ratio (|> r.frac (r.filter (f/>= 0.5)))]
        ($_ seq
            (test "Has equality."
                  (:: @.Eq<Color> = any any))
            (test "Can convert to/from HSL."
                  (|> any @.to-hsl @.from-hsl
                      (distance any)
                      (f/<= error-margin)))
            (test "Can convert to/from HSB."
                  (|> any @.to-hsb @.from-hsb
                      (distance any)
                      (f/<= error-margin)))
            (test "Can convert to/from CMYK."
                  (|> any @.to-cmyk @.from-cmyk
                      (distance any)
                      (f/<= error-margin)))
            (test "Can interpolate between 2 colors."
                  (and (f/<= (distance colorful black)
                             (distance (@.darker ratio colorful) black))
                       (f/<= (distance colorful white)
                             (distance (@.brighter ratio colorful) white))))
            (test "Can calculate complement."
                  (let [~any (@.complement any)
                        (^open "@/") @.Eq<Color>]
                    (and (not (@/= any ~any))
                         (@/= any (@.complement ~any)))))
            (test "Can saturate color."
                  (f/> (saturation mediocre)
                       (saturation (@.saturate ratio mediocre))))
            (test "Can de-saturate color."
                  (f/< (saturation mediocre)
                       (saturation (@.de-saturate ratio mediocre))))
            (test "Can gray-scale color."
                  (let [gray'ed (@.gray-scale mediocre)]
                    (and (f/= 0.0
                              (saturation gray'ed))
                         (|> (luminance gray'ed)
                             (f/- (luminance mediocre))
                             frac/abs
                             (f/<= error-margin)))))
            ))))
