(.module:
  [lux #*
   [io]
   [control
    [monad (#+ do Monad)]
    pipe]
   [data
    ["&" text
     format]
    [number]
    [collection
     [list]]]
   [math
    ["r" random]]]
  lux/test)

(context: "Size"
  (<| (times +100)
      (do @
        [size (:: @ map (n/% +100) r.nat)
         sample (r.unicode size)]
        (test "" (or (and (n/= +0 size)
                          (&.empty? sample))
                     (n/= size (&.size sample)))))))

(def: bounded-size
  (r.Random Nat)
  (|> r.nat
      (:: r.Monad<Random> map (|>> (n/% +20) (n/+ +1)))))

(context: "Locations"
  (<| (times +100)
      (do @
        [size bounded-size
         idx (:: @ map (n/% size) r.nat)
         sample (r.unicode size)]
        (test "" (|> sample
                     (&.nth idx)
                     (case> (^multi (#.Some char)
                                    [(&.from-code char) char]
                                    [[(&.index-of char sample)
                                      (&.last-index-of char sample)
                                      (&.index-of' char idx sample)
                                      (&.last-index-of' char idx sample)]
                                     [(#.Some io) (#.Some lio)
                                      (#.Some io') (#.Some lio')]])
                            (and (n/<= idx io)
                                 (n/>= idx lio)

                                 (n/= idx io')
                                 (n/>= idx lio')

                                 (&.contains? char sample))

                            _
                            false
                            ))
              ))))

(context: "Text functions"
  (<| (times +100)
      (do @
        [sizeL bounded-size
         sizeR bounded-size
         sampleL (r.unicode sizeL)
         sampleR (r.unicode sizeR)
         #let [sample (&.concat (list sampleL sampleR))
               fake-sample (&.join-with " " (list sampleL sampleR))
               dup-sample (&.join-with "" (list sampleL sampleR))
               enclosed-sample (&.enclose [sampleR sampleR] sampleL)
               (^open) &.Equivalence<Text>]]
        (test "" (and (not (= sample fake-sample))
                      (= sample dup-sample)
                      (&.starts-with? sampleL sample)
                      (&.ends-with? sampleR sample)
                      (= enclosed-sample
                         (&.enclose' sampleR sampleL))
                      
                      (|> (&.split sizeL sample)
                          (case> (#.Right [_l _r])
                                 (and (= sampleL _l)
                                      (= sampleR _r)
                                      (= sample (&.concat (list _l _r))))

                                 _
                                 false))
                      
                      (|> [(&.clip +0 sizeL sample)
                           (&.clip sizeL (&.size sample) sample)
                           (&.clip' sizeL sample)
                           (&.clip' +0 sample)]
                          (case> [(#.Right _l) (#.Right _r) (#.Right _r') (#.Right _f)]
                                 (and (= sampleL _l)
                                      (= sampleR _r)
                                      (= _r _r')
                                      (= sample _f))

                                 _
                                 false))
                      )
              ))))

(context: "More text functions"
  (<| (times +100)
      (do @
        [sizeP bounded-size
         sizeL bounded-size
         #let [## The wider unicode charset includes control characters that
               ## can make text replacement work improperly.
               ## Because of that, I restrict the charset.
               normal-char-gen (|> r.nat (:: @ map (|>> (n/% +128) (n/max +1))))]
         sep1 (r.text normal-char-gen +1)
         sep2 (r.text normal-char-gen +1)
         #let [part-gen (|> (r.text normal-char-gen sizeP)
                            (r.filter (|>> (&.contains? sep1) not)))]
         parts (r.list sizeL part-gen)
         #let [sample1 (&.concat (list.interpose sep1 parts))
               sample2 (&.concat (list.interpose sep2 parts))
               (^open "&/") &.Equivalence<Text>]]
        ($_ seq
            (test "Can split text through a separator."
                  (n/= (list.size parts)
                       (list.size (&.split-all-with sep1 sample1))))

            (test "Can replace occurrences of a piece of text inside a larger text."
                  (&/= sample2
                       (&.replace-all sep1 sep2 sample1)))
            ))))

(context: "Structures"
  (let [(^open "&/") &.Order<Text>]
    ($_ seq
        (test "" (&/< "bcd" "abc"))
        (test "" (not (&/< "abc" "abc")))
        (test "" (not (&/< "abc" "bcd")))
        (test "" (&/<= "bcd" "abc"))
        (test "" (&/<= "abc" "abc"))
        (test "" (not (&/<= "abc" "bcd")))
        (test "" (&/> "abc" "bcd"))
        (test "" (not (&/> "abc" "abc")))
        (test "" (not (&/> "bcd" "abc")))
        (test "" (&/>= "abc" "bcd"))
        (test "" (&/>= "abc" "abc"))
        (test "" (not (&/>= "bcd" "abc")))
        )))
