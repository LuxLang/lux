##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data (struct ["&" vector]
                     [list "List/" Fold<List> Functor<List>])
             [text "Text/" Monoid<Text>]
             text/format
             [number])
       (codata function)
       (math ["R" random])
       pipe)
  lux/test)

(test: "Vectors"
  [size (|> R;nat (:: @ map (%+ +100)))
   idx (|> R;nat (:: @ map (%+ size)))
   sample (R;vector size R;nat)
   other-sample (R;vector size R;nat)
   non-member (|> R;nat (R;filter (. not (&;member? number;Eq<Nat> sample))))
   #let [(^open "&/") (&;Eq<Vector> number;Eq<Nat>)
         (^open "&/") &;Monad<Vector>
         (^open "&/") &;Fold<Vector>
         (^open "&/") &;Monoid<Vector>]]
  ($_ seq
      (assert "Can query size of vector."
              (if (&;empty? sample)
                (and (=+ +0 size)
                     (=+ +0 (&;size sample)))
                (=+ size (&;size sample))))

      (assert "Can add and remove elements to vectors."
              (and (=+ (inc+ size) (&;size (&;add non-member sample)))
                   (=+ (dec+ size) (&;size (&;pop sample)))))

      (assert "Can put and get elements into vectors."
              (|> sample
                  (&;put idx non-member)
                  (&;at idx)
                  (default (undefined))
                  (== non-member)))

      (assert "Can update elements of vectors."
              (|> sample
                  (&;put idx non-member) (&;update idx inc+)
                  (&;at idx) (default (undefined))
                  (=+ (inc+ non-member))))

      (assert "Can safely transform to/from lists."
              (|> sample &;to-list &;from-list (&/= sample)))

      (assert "Can identify members of a vector."
              (and (not (&;member? number;Eq<Nat> sample non-member))
                   (&;member? number;Eq<Nat> (&;add non-member sample) non-member)))

      (assert "Can fold over elements of vector."
              (=+ (List/fold ++ +0 (&;to-list sample))
                  (&/fold ++ +0 sample)))
      
      (assert "Functor goes over every element."
              (let [there (&/map inc+ sample)
                    back-again (&/map dec+ there)]
                (and (not (&/= sample there))
                     (&/= sample back-again))))

      (assert "Applicative allows you to create singleton vectors, and apply vectors of functions to vectors of values."
              (and (&/= (&;vector non-member) (&/wrap non-member))
                   (&/= (&/map inc+ sample)   (&/apply (&/wrap inc+) sample))))

      (assert "Vector concatenation is a monad."
              (&/= (&/append sample other-sample)
                   (&/join (&;vector sample other-sample))))
      ))
