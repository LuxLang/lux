##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data (struct ["&" list])
             [text "Text/" Monoid<Text>]
             [number]
             [bool]
             [product])
       (math ["R" random])
       pipe)
  lux/test)

(def: bounded-size
  (R;Random Nat)
  (|> R;nat
      (:: R;Monad<Random> map (|>. (%+ +100) (++ +10)))))

(test: "Lists: Part 1"
  [size bounded-size
   idx (:: @ map (%+ size) R;nat)
   sample (R;list size R;nat)
   other-size bounded-size
   other-sample (R;list other-size R;nat)
   separator R;nat
   #let [(^open) (&;Eq<List> number;Eq<Nat>)
         (^open "&/") &;Functor<List>]]
  ($_ seq
      (assert "The size function should correctly portray the size of the list."
              (=+ size (&;size sample)))

      (assert "The repeat function should produce as many elements as asked of it."
              (=+ size (&;size (&;repeat size []))))

      (assert "Reversing a list does not change it's size."
              (=+ (&;size sample)
                  (&;size (&;reverse sample))))
      
      (assert "Reversing a list twice results in the original list."
              (= sample
                 (&;reverse (&;reverse sample))))

      (assert "Filtering by a predicate and its complement should result in a number of elements equal to the original list."
              (and (=+ (&;size sample)
                       (++ (&;size (&;filter even?+ sample))
                           (&;size (&;filter (bool;complement even?+) sample))))
                   (let [[plus minus] (&;partition even?+ sample)]
                     (=+ (&;size sample)
                         (++ (&;size plus)
                             (&;size minus))))))

      (assert "If every element in a list satisfies a predicate, there can't be any that satisfy its complement."
              (if (&;every? even?+ sample)
                (and (not (&;any? (bool;complement even?+) sample))
                     (&;empty? (&;filter (bool;complement even?+) sample)))
                (&;any? (bool;complement even?+) sample)))

      (assert "Any element of the list can be considered it's member."
              (let [elem (default (undefined)
                           (&;at idx sample))]
                (&;member? number;Eq<Nat> sample elem)))
      ))

(test: "Lists: Part 2"
  [size bounded-size
   idx (:: @ map (%+ size) R;nat)
   sample (R;list size R;nat)
   other-size bounded-size
   other-sample (R;list other-size R;nat)
   separator R;nat
   #let [(^open) (&;Eq<List> number;Eq<Nat>)
         (^open "&/") &;Functor<List>]]
  ($_ seq
      (assert "Appending the head and the tail should yield the original list."
              (let [head (default (undefined)
                           (&;head sample))
                    tail (default (undefined)
                           (&;tail sample))]
                (= sample
                   (#;Cons head tail))))

      (assert "Appending the inits and the last should yield the original list."
              (let [(^open) &;Monoid<List>
                    inits (default (undefined)
                            (&;inits sample))
                    last (default (undefined)
                           (&;last sample))]
                (= sample
                   (append inits (list last)))))

      (assert "Functor should go over every element of the list."
              (let [(^open) &;Functor<List>
                    there (map inc+ sample)
                    back-again (map dec+ there)]
                (and (not (= sample there))
                     (= sample back-again))))

      (assert "Splitting a list into chunks and re-appending them should yield the original list."
              (let [(^open) &;Monoid<List>
                    [left right] (&;split idx sample)
                    [left' right'] (&;split-with even?+ sample)]
                (and (= sample
                        (append left right))
                     (= sample
                        (append left' right'))
                     (= sample
                        (append (&;take idx sample)
                                (&;drop idx sample)))
                     (= sample
                        (append (&;take-while even?+ sample)
                                (&;drop-while even?+ sample)))
                     )))

      (assert "Segmenting the list in pairs should yield as many elements as N/2."
              (=+ (/+ +2 size)
                  (&;size (&;as-pairs sample))))

      (assert "Sorting a list shouldn't change it's size."
              (=+ (&;size sample)
                  (&;size (&;sort <+ sample))))

      (assert "Sorting a list with one order should yield the reverse of sorting it with the opposite order."
              (= (&;sort <+ sample)
                 (&;reverse (&;sort >+ sample))))
      ))

(test: "Lists: Part 3"
  [size bounded-size
   idx (:: @ map (%+ size) R;nat)
   sample (R;list size R;nat)
   other-size bounded-size
   other-sample (R;list other-size R;nat)
   separator R;nat
   #let [(^open) (&;Eq<List> number;Eq<Nat>)
         (^open "&/") &;Functor<List>]]
  ($_ seq
      (assert "If you zip 2 lists, the result's size will be that of the smaller list."
              (=+ (&;size (&;zip2 sample other-sample))
                  (min+ (&;size sample) (&;size other-sample))))
      
      (assert "I can pair-up elements of a list in order."
              (let [(^open) &;Functor<List>
                    zipped (&;zip2 sample other-sample)
                    num-zipper (&;size zipped)]
                (and (|> zipped (map product;left) (= (&;take num-zipper sample)))
                     (|> zipped (map product;right) (= (&;take num-zipper other-sample))))))
      
      (assert "You can generate indices for any size, and they will be in ascending order."
              (let [(^open) &;Functor<List>
                    indices (&;indices size)]
                (and (=+ size (&;size indices))
                     (= indices
                        (&;sort <+ indices))
                     (&;every? (=+ (dec+ size))
                               (&;zip2-with ++
                                            indices
                                            (&;sort >+ indices)))
                     )))

      (assert "The 'interpose' function places a value between every member of a list."
              (let [(^open) &;Functor<List>
                    sample+ (&;interpose separator sample)]
                (and (=+ (|> size (*+ +2) dec+)
                         (&;size sample+))
                     (|> sample+ &;as-pairs (map product;right) (&;every? (=+ separator))))))

      (assert "List append is a monoid."
              (let [(^open) &;Monoid<List>]
                (and (= sample (append unit sample))
                     (= sample (append sample unit))
                     (let [[left right] (&;split size (append sample other-sample))]
                       (and (= sample left)
                            (= other-sample right))))))

      (assert "Applicative allows you to create singleton lists, and apply lists of functions to lists of values."
              (let [(^open) &;Applicative<List>]
                (and (= (list separator) (wrap separator))
                     (= (map inc+ sample)
                        (apply (wrap inc+) sample)))))

      (assert "List concatenation is a monad."
              (let [(^open) &;Monad<List>
                    (^open) &;Monoid<List>]
                (= (append sample other-sample)
                   (join (list sample other-sample)))))

      (assert "You can find any value that satisfies some criterium, if such values exist in the list."
              (case (&;find even?+ sample)
                (#;Some found)
                (and (even?+ found)
                     (&;any? even?+ sample)
                     (not (&;every? (bool;complement even?+) sample)))

                #;None
                (and (not (&;any? even?+ sample))
                     (&;every? (bool;complement even?+) sample))))

      (assert "You can iteratively construct a list, generating values until you're done."
              (= (&;range+ +0 (dec+ size))
                 (&;iterate (lambda [n] (if (<+ size n) (#;Some (inc+ n)) #;None))
                            +0)))

      (assert "Can enumerate all elements in a list."
              (let [enum-sample (&;enumerate sample)]
                (and (= (&;indices (&;size enum-sample))
                        (&/map product;left enum-sample))
                     (= sample
                        (&/map product;right enum-sample)))))
      ))
