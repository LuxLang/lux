##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data (struct ["&" stack]
                     [list "" Fold<List>])
             [number])
       (math ["R" random])
       pipe)
  lux/test)

(def: gen-nat
  (R;Random Nat)
  (|> R;nat
      (:: R;Monad<Random> map (n.% +100))))

(test: "Stacks"
  [size gen-nat
   sample (R;stack size gen-nat)
   new-top gen-nat]
  ($_ seq
      (assert "Can query the size of a stack."
              (n.= size (&;size sample)))

      (assert "Can peek inside non-empty stacks."
              (case (&;peek sample)
                #;None     (&;empty? sample)
                (#;Some _) (not (&;empty? sample))))

      (assert "Popping empty stacks doesn't change anything.
                But, if they're non-empty, the top of the stack is removed."
              (let [sample' (&;pop sample)]
                (or (n.= (&;size sample) (n.inc (&;size sample')))
                    (and (&;empty? sample) (&;empty? sample')))
                ))

      (assert "Pushing onto a stack always increases it by 1, adding a new value at the top."
              (and (is sample
                       (&;pop (&;push new-top sample)))
                   (n.= (n.inc (&;size sample)) (&;size (&;push new-top sample)))
                   (|> (&;push new-top sample) &;peek (default (undefined))
                       (is new-top))))
      ))
