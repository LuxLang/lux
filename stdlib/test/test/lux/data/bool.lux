(;module:
  lux
  (lux (control ["M" monad #+ do Monad])
       [io]
       (data bool)
       ["r" math/random])
  lux/test)

(context: "Boolean operations."
  [value r;bool]
  (test "" (and (not (and value (not value)))
                (or value (not value))

                (not (:: Or@Monoid<Bool> identity))
                (:: Or@Monoid<Bool> compose value (not value))
                (:: And@Monoid<Bool> identity)
                (not (:: And@Monoid<Bool> compose value (not value)))
                
                (:: Eq<Bool> = value (not (not value)))
                (not (:: Eq<Bool> = value (not value)))

                (not (:: Eq<Bool> = value ((complement id) value)))
                (:: Eq<Bool> = value ((complement not) value))

                (case (|> value
                          (:: Codec<Text,Bool> encode)
                          (:: Codec<Text,Bool> decode))
                  (#;Right dec-value)
                  (:: Eq<Bool> = value dec-value)

                  (#;Left _)
                  false)
                )))
