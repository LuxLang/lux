(;module:
  lux
  (lux (control [monad])
       [io]
       (data char
             [text]
             text/format)
       ["R" random]
       pipe
       [host #- try])
  lux/test)

(test: "Char operations"
  [value R;char
   other R;char]
  ($_ seq
      (assert "Can compare characterss for equality."
              (:: Eq<Char> = value value))

      (assert "Can go back-and-forth into numeric codes."
              (|> value code char (:: Eq<Char> = value)))

      (assert "Can encode/decode as text."
              (and (|> value
                       (:: Codec<Text,Char> encode)
                       (:: Codec<Text,Char> decode)
                       (case> (#;Right dec-value)
                              (:: Eq<Char> = value dec-value)

                              (#;Left _)
                              false))
                   (|> value as-text
                       (text;nth +0) (default (undefined))
                       (:: Eq<Char> = value))))

      (assert "Characters have an ordering relationship."
              (if (:: Ord<Char> < other value)
                (:: Ord<Char> > value other)
                (:: Ord<Char> >= other value)))
      ))

(test: "Special cases"
  (assert "Can test whether a char is white-space."
          (and (space? #" ")
               (space? #"\n")
               (space? #"\t")
               (space? #"\r")
               (space? #"\f")
               (not (space? #"a")))))
