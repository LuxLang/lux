(;module:
  lux
  (lux (control [monad]
                pipe)
       [io]
       (data char
             [text]
             text/format)
       ["R" math/random])
  lux/test)

(context: "Char operations"
  [value R;char
   other R;char]
  ($_ seq
      (test "Can compare characterss for equality."
            (:: Eq<Char> = value value))

      (test "Can go back-and-forth into numeric codes."
            (|> value code char (:: Eq<Char> = value)))

      (test "Can encode/decode as text."
            (and (|> value
                     (:: Codec<Text,Char> encode)
                     (:: Codec<Text,Char> decode)
                     (case> (#;Right dec-value)
                            (:: Eq<Char> = value dec-value)

                            (#;Left _)
                            false))
                 (|> value as-text
                     (text;nth +0) (default (undefined))
                     (:: Eq<Char> = value))))

      (test "Characters have an ordering relationship."
            (if (:: Order<Char> < other value)
              (:: Order<Char> > value other)
              (:: Order<Char> >= other value)))
      ))

(context: "Special cases"
  (test "Can test whether a char is white-space."
        (and (space? #" ")
             (space? #"\n")
             (space? #"\t")
             (space? #"\r")
             (space? #"\f")
             (not (space? #"a")))))
