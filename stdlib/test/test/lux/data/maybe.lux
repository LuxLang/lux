##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data maybe
             [text "Text/" Monoid<Text>]
             [number]))
  lux/test)

(test: "lux/data/maybe exports"
  (all (match #;None (:: Monoid<Maybe> unit))
       (match (#;Some "yolo") (:: Monoid<Maybe> append (#;Some "yolo") (#;Some "lol")))
       (match (#;Some "yolo") (:: Monoid<Maybe> append (#;Some "yolo") #;None))
       (match (#;Some "lol") (:: Monoid<Maybe> append #;None (#;Some "lol")))
       (match #;None (: (Maybe Text) (:: Monoid<Maybe> append #;None #;None)))
       
       (match #;None (:: Functor<Maybe> map (Text/append "yolo") #;None))
       (match (#;Some "yololol") (:: Functor<Maybe> map (Text/append "yolo") (#;Some "lol")))
       
       (match (#;Some "yolo") (:: Applicative<Maybe> wrap "yolo"))
       (match (#;Some "yololol")
              (let [(^open) Applicative<Maybe>]
                (apply (wrap (Text/append "yolo")) (wrap "lol"))))
       
       (match (#;Some "yololol")
              (do Monad<Maybe>
                [f (wrap Text/append)
                 a (wrap "yolo")
                 b (wrap "lol")]
                (wrap (f a b))))

       (match true (:: (Eq<Maybe> text;Eq<Text>) =
                       (: (Maybe Text) #;None)
                       (: (Maybe Text) #;None)))
       (match true (:: (Eq<Maybe> text;Eq<Text>) =
                       (#;Some "yolo")
                       (#;Some "yolo")))
       (match false (:: (Eq<Maybe> text;Eq<Text>) =
                        (#;Some "yolo")
                        (#;Some "lol")))
       (match false (:: (Eq<Maybe> text;Eq<Text>) =
                        (#;Some "yolo")
                        (: (Maybe Text) #;None)))
       ))
