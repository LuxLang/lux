(.module:
  lux
  (lux [io]
       (control ["M" monad (#+ do Monad)]
                pipe)
       (data ["&" maybe]
             [text "text/" Monoid<Text>]
             [number]))
  lux/test)

(context: "Maybe"
  (let [(^open "&/") &.Monoid<Maybe>
        (^open "&/") &.Apply<Maybe>
        (^open "&/") &.Monad<Maybe>
        (^open "Maybe/") (&.Equivalence<Maybe> text.Equivalence<Text>)]
    ($_ seq
        (test "Can compare Maybe values."
              (and (Maybe/= #.None #.None)
                   (Maybe/= (#.Some "yolo") (#.Some "yolo"))
                   (not (Maybe/= (#.Some "yolo") (#.Some "lol")))
                   (not (Maybe/= (#.Some "yolo") #.None))))

        (test "Monoid respects Maybe."
              (and (Maybe/= #.None &/identity)
                   (Maybe/= (#.Some "yolo") (&/compose (#.Some "yolo") (#.Some "lol")))
                   (Maybe/= (#.Some "yolo") (&/compose (#.Some "yolo") #.None))
                   (Maybe/= (#.Some "lol") (&/compose #.None (#.Some "lol")))
                   (Maybe/= #.None (: (Maybe Text) (&/compose #.None #.None)))))
        
        (test "Functor respects Maybe."
              (and (Maybe/= #.None (&/map (text/compose "yolo") #.None))
                   (Maybe/= (#.Some "yololol") (&/map (text/compose "yolo") (#.Some "lol")))))
        
        (test "Apply respects Maybe."
              (and (Maybe/= (#.Some "yolo") (&/wrap "yolo"))
                   (Maybe/= (#.Some "yololol")
                            (&/apply (&/wrap (text/compose "yolo")) (&/wrap "lol")))))
        
        (test "Monad respects Maybe."
              (Maybe/= (#.Some "yololol")
                       (do &.Monad<Maybe>
                         [f (wrap text/compose)
                          a (wrap "yolo")
                          b (wrap "lol")]
                         (wrap (f a b)))))
        )))

(context: "Monad transformer"
  (let [lift (&.lift io.Monad<IO>)
        (^open "io/") io.Monad<IO>]
    (test "Can add maybe functionality to any monad."
          (|> (io.run (do (&.MaybeT io.Monad<IO>)
                        [a (lift (io/wrap 123))
                         b (wrap 456)]
                        (wrap (i/+ a b))))
              (case> (#.Some 579) true
                     _ false)))))
