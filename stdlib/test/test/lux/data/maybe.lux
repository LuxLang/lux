(.module:
  [lux #*
   ["." io ("io/." Monad<IO>)]
   [control
    ["M" monad (#+ do Monad)]
    pipe]
   [data
    ["&" maybe ("&/." Monoid<Maybe>)]
    ["." text ("text/." Monoid<Text>)]]]
  lux/test)

(context: "Maybe"
  (let [(^open "&/.") &.Apply<Maybe>
        (^open "&/.") &.Monad<Maybe>
        (^open "&/.") (&.Equivalence<Maybe> text.Equivalence<Text>)]
    ($_ seq
        (test "Can compare Maybe values."
              (and (&/= #.None #.None)
                   (&/= (#.Some "yolo") (#.Some "yolo"))
                   (not (&/= (#.Some "yolo") (#.Some "lol")))
                   (not (&/= (#.Some "yolo") #.None))))

        (test "Monoid respects Maybe."
              (and (&/= #.None &/identity)
                   (&/= (#.Some "yolo") (&/compose (#.Some "yolo") (#.Some "lol")))
                   (&/= (#.Some "yolo") (&/compose (#.Some "yolo") #.None))
                   (&/= (#.Some "lol") (&/compose #.None (#.Some "lol")))
                   (&/= #.None (: (Maybe Text) (&/compose #.None #.None)))))
        
        (test "Functor respects Maybe."
              (and (&/= #.None (&/map (text/compose "yolo") #.None))
                   (&/= (#.Some "yololol") (&/map (text/compose "yolo") (#.Some "lol")))))
        
        (test "Apply respects Maybe."
              (and (&/= (#.Some "yolo") (&/wrap "yolo"))
                   (&/= (#.Some "yololol")
                        (&/apply (&/wrap (text/compose "yolo")) (&/wrap "lol")))))
        
        (test "Monad respects Maybe."
              (&/= (#.Some "yololol")
                   (do &.Monad<Maybe>
                     [f (wrap text/compose)
                      a (wrap "yolo")
                      b (wrap "lol")]
                     (wrap (f a b)))))

        (do r.Monad<Random>
          [default r.nat
           maybe r.nat]
          (_.test "Can have defaults for Maybe values."
                  (and (is? default (maybe.default default
                                                   #.None))

                       (is? maybe (maybe.default default
                                                 (#.Some maybe))))))
        )))

(context: "Monad transformer"
  (let [lift (&.lift io.Monad<IO>)]
    (test "Can add maybe functionality to any monad."
          (|> (io.run (do (&.MaybeT io.Monad<IO>)
                        [a (lift (io/wrap +123))
                         b (wrap +456)]
                        (wrap (i/+ a b))))
              (case> (#.Some +579)
                     #1
                     
                     _
                     #0)))))
