(;module:
  lux
  (lux [io]
       (control monad)
       (data ["&" log]
             [text "Text/" Monoid<Text> Eq<Text>]
             [number]
             [product])
       (codata function)
       pipe)
  lux/test)

(test: "Logs"
  (let [(^open "&/") (&;Monad<Log> text;Monoid<Text>)]
    ($_ seq
        (assert "Functor respects Log."
                (i.= 11 (product;right (&/map i.inc ["" 10]))))
        
        (assert "Applicative respects Log."
                (and (i.= 20 (product;right (&/wrap 20)))
                     (i.= 30 (product;right (&/apply (&/wrap (i.+ 10)) (&/wrap 20))))))
        
        (assert "Monad respects Log."
                (i.= 30 (product;right (do (&;Monad<Log> text;Monoid<Text>)
                                         [f (wrap i.+)
                                          a (wrap 10)
                                          b (wrap 20)]
                                         (wrap (f a b))))))
        
        (assert "Can log any value."
                (Text/= "YOLO" (product;left (&;log "YOLO"))))
        )))

(test: "Monad transformer"
  (let [lift (&;lift-log text;Monoid<Text> io;Monad<IO>)
        (^open "io/") io;Monad<IO>]
    (assert "Can add log functionality to any monad."
            (|> (io;run (do (&;LogT text;Monoid<Text> io;Monad<IO>)
                          [a (lift (io/wrap 123))
                           b (wrap 456)]
                          (wrap (i.+ a b))))
                (case> ["" 579] true
                       _ false)))
    ))
