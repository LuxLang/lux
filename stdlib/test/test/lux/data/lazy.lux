(;module:
  lux
  (lux [io]
       (control ["M" monad #+ do Monad])
       (data ["&" lazy])
       ["R" math/random])
  lux/test)

(context: "Lazy."
  [left R;nat
   right R;nat
   #let [lazy (&;freeze (n.* left right))
         expected (n.* left right)]]
  ($_ seq
      (test "Lazying does not alter the expected value."
            (n.= expected
                 (&;thaw lazy)))
      (test "Lazy values only evaluate once."
            (and (not (is expected
                          (: Nat (&;thaw lazy))))
                 (is (&;thaw lazy)
                     (&;thaw lazy))))
      ))
