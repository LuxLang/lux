(.module:
  lux
  (lux [io]
       (control [monad #+ do Monad])
       (data ["&" lazy])
       ["r" math/random])
  lux/test)

(context: "Lazy."
  (<| (times +100)
      (do @
        [left r.nat
         right r.nat
         #let [lazy (&.freeze (n/* left right))
               expected (n/* left right)]]
        ($_ seq
            (test "Lazying does not alter the expected value."
                  (n/= expected
                       (&.thaw lazy)))
            (test "Lazy values only evaluate once."
                  (and (not (is? expected
                                 (&.thaw lazy)))
                       (is? (&.thaw lazy)
                            (&.thaw lazy))))
            ))))

(context: "Functor, Applicative, Monad."
  (<| (times +100)
      (do @
        [sample r.nat]
        ($_ seq
            (test "Functor map."
                  (|> (&.freeze sample)
                      (:: &.Functor<Lazy> map n/inc)
                      &.thaw
                      (n/= (n/inc sample))))

            (test "Applicative wrap."
                  (|> sample
                      (:: &.Applicative<Lazy> wrap)
                      &.thaw
                      (n/= sample)))
            
            (test "Applicative apply."
                  (let [(^open "&/") &.Applicative<Lazy>]
                    (|> (&/apply (&/wrap n/inc) (&/wrap sample))
                        &.thaw
                        (n/= (n/inc sample)))))
            
            (test "Monad."
                  (|> (do &.Monad<Lazy>
                        [f (wrap n/inc)
                         a (wrap sample)]
                        (wrap (f a)))
                      &.thaw
                      (n/= (n/inc sample))))
            ))))
