(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad])
       (data (coll ["&" priority-queue])
             [number]
             [maybe])
       ["r" math/random])
  lux/test)

(def: (gen-queue size)
  (-> Nat (r;Random (&;Queue Nat)))
  (do r;Monad<Random>
    [inputs (r;list size r;nat)]
    (monad;fold @ (function [head tail]
                    (do @
                      [priority r;nat]
                      (wrap (&;push priority head tail))))
                &;empty
                inputs)))

(context: "Queues"
  (<| (times +100)
      (do @
        [size (|> r;nat (:: @ map (n.% +100)))
         sample (gen-queue size)
         non-member-priority r;nat
         non-member (|> r;nat (r;filter (|>. (&;member? number;Eq<Nat> sample) not)))]
        ($_ seq
            (test "I can query the size of a queue (and empty queues have size 0)."
                  (n.= size (&;size sample)))

            (test "Enqueueing and dequeing affects the size of queues."
                  (and (n.= (n.inc size)
                            (&;size (&;push non-member-priority non-member sample)))
                       (or (n.= +0 (&;size sample))
                           (n.= (n.dec size)
                                (&;size (&;pop sample))))))

            (test "I can query whether an element belongs to a queue."
                  (and (and (not (&;member? number;Eq<Nat> sample non-member))
                            (&;member? number;Eq<Nat>
                                       (&;push non-member-priority non-member sample)
                                       non-member))
                       (or (n.= +0 (&;size sample))
                           (and (&;member? number;Eq<Nat>
                                           sample
                                           (maybe;assume (&;peek sample)))
                                (not (&;member? number;Eq<Nat>
                                                (&;pop sample)
                                                (maybe;assume (&;peek sample))))))))
            ))))
