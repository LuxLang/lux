(;module:
  lux
  (lux [io]
       (control monad)
       (data (coll ["&" priority-queue])
             [number])
       ["R" math/random])
  lux/test)

(def: (gen-queue size)
  (-> Nat (R;Random (&;Queue Nat)))
  (do R;Monad<Random>
    [inputs (R;list size R;nat)]
    (foldM @ (function [head tail]
               (do @
                 [priority R;nat]
                 (wrap (&;push priority head tail))))
           &;empty
           inputs)))

(test: "Queues"
  [size (|> R;nat (:: @ map (n.% +100)))
   sample (gen-queue size)
   non-member-priority R;nat
   non-member (|> R;nat (R;filter (|>. (&;member? number;Eq<Nat> sample) not)))]
  ($_ seq
      (assert "I can query the size of a queue (and empty queues have size 0)."
              (n.= size (&;size sample)))

      (assert "Enqueueing and dequeing affects the size of queues."
              (and (n.= (n.inc size)
                        (&;size (&;push non-member-priority non-member sample)))
                   (or (n.= +0 (&;size sample))
                       (n.= (n.dec size)
                            (&;size (&;pop sample))))))

      (assert "I can query whether an element belongs to a queue."
              (and (and (not (&;member? number;Eq<Nat> sample non-member))
                        (&;member? number;Eq<Nat>
                                   (&;push non-member-priority non-member sample)
                                   non-member))
                   (or (n.= +0 (&;size sample))
                       (and (&;member? number;Eq<Nat>
                                       sample
                                       (default (undefined) (&;peek sample)))
                            (not (&;member? number;Eq<Nat>
                                            (&;pop sample)
                                            (default (undefined) (&;peek sample))))))))
      ))
