(.module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                comonad)
       (data [maybe]
             [text "Text/" Monoid<Text>]
             text/format
             (coll [list]
                   ["&" stream])
             [number "Nat/" Codec<Text,Nat>])
       ["r" math/random])
  lux/test)

(context: "Streams"
  (<| (times +100)
      (do @
        [size (|> r.nat (:: @ map (|>> (n/% +100) (n/max +2))))
         offset (|> r.nat (:: @ map (n/% +100)))
         factor (|> r.nat (:: @ map (|>> (n/% +100) (n/max +2))))
         elem r.nat
         cycle-seed (r.list size r.nat)
         cycle-sample-idx (|> r.nat (:: @ map (n/% +1000)))
         #let [(^open "List/") (list.Eq<List> number.Eq<Nat>)
               sample0 (&.iterate n/inc +0)
               sample1 (&.iterate n/inc offset)]]
        ($_ seq
            (test "Can move along a stream and take slices off it."
                  (and (and (List/= (list.n/range +0 (n/dec size))
                                    (&.take size sample0))
                            (List/= (list.n/range offset (n/dec (n/+ offset size)))
                                    (&.take size (&.drop offset sample0)))
                            (let [[drops takes] (&.split size sample0)]
                              (and (List/= (list.n/range +0 (n/dec size))
                                           drops)
                                   (List/= (list.n/range size (n/dec (n/* +2 size)))
                                           (&.take size takes)))))
                       (and (List/= (list.n/range +0 (n/dec size))
                                    (&.take-while (n/< size) sample0))
                            (List/= (list.n/range offset (n/dec (n/+ offset size)))
                                    (&.take-while (n/< (n/+ offset size))
                                                  (&.drop-while (n/< offset) sample0)))
                            (let [[drops takes] (&.split-while (n/< size) sample0)]
                              (and (List/= (list.n/range +0 (n/dec size))
                                           drops)
                                   (List/= (list.n/range size (n/dec (n/* +2 size)))
                                           (&.take-while (n/< (n/* +2 size)) takes)))))
                       ))

            (test "Can repeat any element and infinite number of times."
                  (n/= elem (&.nth offset (&.repeat elem))))

            (test "Can obtain the head & tail of a stream."
                  (and (n/= offset (&.head sample1))
                       (List/= (list.n/range (n/inc offset) (n/+ offset size))
                               (&.take size (&.tail sample1)))))

            (test "Can filter streams."
                  (and (n/= (n/* +2 offset)
                            (&.nth offset
                                   (&.filter n/even? sample0)))
                       (let [[evens odds] (&.partition n/even? (&.iterate n/inc +0))]
                         (and (n/= (n/* +2 offset)
                                   (&.nth offset evens))
                              (n/= (n/inc (n/* +2 offset))
                                   (&.nth offset odds))))))

            (test "Functor goes over 'all' elements in a stream."
                  (let [(^open "&/") &.Functor<Stream>
                        there (&/map (n/* factor) sample0)
                        back-again (&/map (n// factor) there)]
                    (and (not (List/= (&.take size sample0)
                                      (&.take size there)))
                         (List/= (&.take size sample0)
                                 (&.take size back-again)))))

            (test "CoMonad produces a value for every element in a stream."
                  (let [(^open "&/") &.Functor<Stream>]
                    (List/= (&.take size (&/map (n/* factor) sample1))
                            (&.take size
                                    (be &.CoMonad<Stream>
                                      [inputs sample1]
                                      (n/* factor (&.head inputs)))))))

            (test "'unfold' generalizes 'iterate'."
                  (let [(^open "&/") &.Functor<Stream>
                        (^open "List/") (list.Eq<List> text.Eq<Text>)]
                    (List/= (&.take size
                                    (&/map Nat/encode (&.iterate n/inc offset)))
                            (&.take size
                                    (&.unfold (function (_ n) [(n/inc n) (Nat/encode n)])
                                              offset)))))

            (test "Can cycle over the same elements as an infinite stream."
                  (|> (&.cycle cycle-seed)
                      maybe.assume
                      (&.nth cycle-sample-idx)
                      (n/= (|> cycle-seed
                               (list.nth (n/% size cycle-sample-idx))
                               maybe.assume))))
            ))))
