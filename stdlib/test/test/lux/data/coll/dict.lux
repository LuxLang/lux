(;module:
  lux
  (lux [io]
       (control monad
                [eq])
       (data [text "Text/" Monoid<Text>]
             text/format
             [number]
             [char]
             (coll ["&" dict]
                   [list "List/" Fold<List> Functor<List>]))
       (codata function)
       ["R" math/random]
       pipe)
  lux/test)

(test: "Dictionaries."
  [#let [capped-nat (:: R;Monad<Random> map (n.% +100) R;nat)]
   size capped-nat
   dict (R;dict char;Hash<Char> size R;char capped-nat)
   non-key (|> R;char
               (R;filter (lambda [key] (not (&;contains? key dict)))))
   test-val (|> R;nat
                (R;filter (lambda [val] (not (list;member? number;Eq<Nat> (&;values dict) val)))))]
  ($_ seq
      (assert "Size function should correctly represent Dict size."
              (n.= size (&;size dict)))
      
      (assert "Dicts of size 0 should be considered empty."
              (if (n.= +0 size)
                (&;empty? dict)
                (not (&;empty? dict))))
      
      (assert "The functions 'entries', 'keys' and 'values' should be synchronized."
              (:: (list;Eq<List> (eq;conj char;Eq<Char> number;Eq<Nat>)) =
                  (&;entries dict)
                  (list;zip2 (&;keys dict)
                             (&;values dict))))
      
      (assert "Dict should be able to recognize it's own keys."
              (list;every? (lambda [key] (&;contains? key dict))
                           (&;keys dict)))
      
      (assert "Should be able to get every key."
              (list;every? (lambda [key] (case (&;get key dict)
                                      (#;Some _) true
                                      _          false))
                           (&;keys dict)))
      
      (assert "Shouldn't be able to access non-existant keys."
              (case (&;get non-key dict)
                (#;Some _) false
                _          true))
      
      (assert "Should be able to put and then get a value."
              (case (&;get non-key (&;put non-key test-val dict))
                (#;Some v) (n.= test-val v)
                _          true))
      
      (assert "Should be able to put~ and then get a value."
              (case (&;get non-key (&;put~ non-key test-val dict))
                (#;Some v) (n.= test-val v)
                _          true))
      
      (assert "Shouldn't be able to put~ an existing key."
              (or (n.= +0 size)
                  (let [first-key (|> dict &;keys list;head (default (undefined)))]
                    (case (&;get first-key (&;put~ first-key test-val dict))
                      (#;Some v) (not (n.= test-val v))
                      _          true))))
      
      (assert "Removing a key should make it's value inaccessible."
              (let [base (&;put non-key test-val dict)]
                (and (&;contains? non-key base)
                     (not (&;contains? non-key (&;remove non-key base))))))
      
      (assert "Should be possible to update values via their keys."
              (let [base (&;put non-key test-val dict)
                    updt (&;update non-key n.inc base)]
                (case [(&;get non-key base) (&;get non-key updt)]
                  [(#;Some x) (#;Some y)]
                  (n.= (n.inc x) y)

                  _
                  false)))
      
      (assert "Additions and removals to a Dict should affect its size."
              (let [plus (&;put non-key test-val dict)
                    base (&;remove non-key plus)]
                (and (n.= (n.inc (&;size dict)) (&;size plus))
                     (n.= (n.dec (&;size plus)) (&;size base)))))

      (assert "A Dict should equal itself & going to<->from lists shouldn't change that."
              (let [(^open) (&;Eq<Dict> number;Eq<Nat>)]
                (and (= dict dict)
                     (|> dict &;entries (&;from-list char;Hash<Char>) (= dict)))))

      (assert "Merging a Dict to itself changes nothing."
              (let [(^open) (&;Eq<Dict> number;Eq<Nat>)]
                (= dict (&;merge dict dict))))

      (assert "If you merge, and the second dict has overlapping keys, it should overwrite yours."
              (let [dict' (|> dict &;entries
                              (List/map (lambda [[k v]] [k (n.inc v)]))
                              (&;from-list char;Hash<Char>))
                    (^open) (&;Eq<Dict> number;Eq<Nat>)]
                (= dict' (&;merge dict' dict))))

      (assert "Can merge values in such a way that they become combined."
              (list;every? (lambda [[x x*2]] (n.= (n.* +2 x) x*2))
                           (list;zip2 (&;values dict)
                                      (&;values (&;merge-with n.+ dict dict)))))

      (assert "Should be able to select subset of keys from dict."
              (|> dict
                  (&;put non-key test-val)
                  (&;select (list non-key))
                  &;size
                  (n.= +1)))

      (assert "Should be able to re-bind existing values to different keys."
              (or (n.= +0 size)
                  (let [first-key (|> dict &;keys list;head (default (undefined)))
                        rebound (&;re-bind first-key non-key dict)]
                    (and (n.= (&;size dict) (&;size rebound))
                         (&;contains? non-key rebound)
                         (not (&;contains? first-key rebound))
                         (n.= (default (undefined)
                                (&;get first-key dict))
                              (default (undefined)
                                (&;get non-key rebound)))))))
      ))
