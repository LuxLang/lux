##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux [io]
       (control monad)
       (data (coll ["&" queue])
             [number])
       ["R" random]
       pipe)
  lux/test)

(test: "Queues"
  [size (:: @ map (n.% +100) R;nat)
   sample (R;queue size R;nat)
   non-member (|> R;nat
                  (R;filter (. not (&;member? number;Eq<Nat> sample))))]
  ($_ seq
      (assert "I can query the size of a queue (and empty queues have size 0)."
              (if (n.= +0 size)
                (&;empty? sample)
                (n.= size (&;size sample))))

      (assert "Enqueueing and dequeing affects the size of queues."
              (and (n.= (n.inc size) (&;size (&;push non-member sample)))
                   (or (&;empty? sample)
                       (n.= (n.dec size) (&;size (&;pop sample))))
                   (n.= size (&;size (&;pop (&;push non-member sample))))))

      (assert "Transforming to/from list can't change the queue."
              (let [(^open "&/") (&;Eq<Queue> number;Eq<Nat>)]
                (|> sample
                    &;to-list &;from-list
                    (&/= sample))))

      (assert "I can always peek at a non-empty queue."
              (case (&;peek sample)
                #;None     (&;empty? sample)
                (#;Some _) true))

      (assert "I can query whether an element belongs to a queue."
              (and (not (&;member? number;Eq<Nat> sample non-member))
                   (&;member? number;Eq<Nat> (&;push non-member sample)
                              non-member)
                   (case (&;peek sample)
                     #;None
                     (&;empty? sample)
                     
                     (#;Some first)
                     (and (&;member? number;Eq<Nat> sample first)
                          (not (&;member? number;Eq<Nat> (&;pop sample) first))))))
      ))
