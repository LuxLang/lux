(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad])
       (data (coll ["&" queue])
             [number])
       ["r" math/random])
  lux/test)

(context: "Queues"
  [size (:: @ map (n.% +100) r;nat)
   sample (r;queue size r;nat)
   non-member (|> r;nat
                  (r;filter (. not (&;member? number;Eq<Nat> sample))))]
  ($_ seq
      (test "I can query the size of a queue (and empty queues have size 0)."
            (if (n.= +0 size)
              (&;empty? sample)
              (n.= size (&;size sample))))

      (test "Enqueueing and dequeing affects the size of queues."
            (and (n.= (n.inc size) (&;size (&;push non-member sample)))
                 (or (&;empty? sample)
                     (n.= (n.dec size) (&;size (&;pop sample))))
                 (n.= size (&;size (&;pop (&;push non-member sample))))))

      (test "Transforming to/from list can't change the queue."
            (let [(^open "&/") (&;Eq<Queue> number;Eq<Nat>)]
              (|> sample
                  &;to-list &;from-list
                  (&/= sample))))

      (test "I can always peek at a non-empty queue."
            (case (&;peek sample)
              #;None     (&;empty? sample)
              (#;Some _) true))

      (test "I can query whether an element belongs to a queue."
            (and (not (&;member? number;Eq<Nat> sample non-member))
                 (&;member? number;Eq<Nat> (&;push non-member sample)
                            non-member)
                 (case (&;peek sample)
                   #;None
                   (&;empty? sample)
                   
                   (#;Some first)
                   (and (&;member? number;Eq<Nat> sample first)
                        (not (&;member? number;Eq<Nat> (&;pop sample) first))))))
      ))
