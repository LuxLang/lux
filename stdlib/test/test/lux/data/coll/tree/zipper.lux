(;module:
  lux
  (lux [io]
       (control monad
                pipe)
       (data (coll [list "List/" Fold<List> Functor<List>]
                   (tree ["&" zipper]
                         [rose]))
             [text "Text/" Monoid<Text>]
             text/format
             [number])
       ["R" math/random])
  lux/test)

(def: gen-tree
  (R;Random (rose;Tree Nat))
  (R;rec (function [gen-tree]
           (do R;Monad<Random>
             ## Each branch can have, at most, 1 child.
             [size (|> R;nat (:: @ map (n.% +2)))]
             (R;seq R;nat
                    (R;list size gen-tree))))))

(def: (to-end zipper)
  (All [a] (-> (&;Zipper a) (&;Zipper a)))
  (loop [zipper zipper]
    (if (&;end? zipper)
      zipper
      (recur (&;next zipper)))))

(context: "Zippers"
  [sample gen-tree
   new-val R;nat
   pre-val R;nat
   post-val R;nat
   #let [(^open "Tree/") (rose;Eq<Tree> number;Eq<Nat>)
         (^open "List/") (list;Eq<List> number;Eq<Nat>)]]
  ($_ seq
      (test "Trees can be converted to/from zippers."
            (|> sample
                &;from-tree &;to-tree
                (Tree/= sample)))

      (test "Creating a zipper gives you a root node."
            (|> sample &;from-tree &;root?))
      
      (test "Can move down inside branches. Can move up from lower nodes."
            (let [zipper (&;from-tree sample)]
              (if (&;branch? zipper)
                (let [child (|> zipper &;down)]
                  (and (not (Tree/= sample (&;to-tree child)))
                       (|> child &;parent (default (undefined)) (is zipper))
                       (|> child &;up (is zipper) not)
                       (|> child &;root (is zipper) not)))
                (and (&;leaf? zipper)
                     (|> zipper (&;prepend-child new-val) &;branch?)))))

      (test "Can prepend and append children."
            (let [zipper (&;from-tree sample)]
              (if (&;branch? zipper)
                (let [mid-val (|> zipper &;down &;value)
                      zipper (|> zipper
                                 (&;prepend-child pre-val)
                                 (&;append-child post-val))]
                  (and (|> zipper &;down &;value (is pre-val))
                       (|> zipper &;down &;right &;value (is mid-val))
                       (|> zipper &;down &;right &;right &;value (is post-val))
                       (|> zipper &;down &;rightmost &;leftmost &;value (is pre-val))
                       (|> zipper &;down &;right &;left &;value (is pre-val))
                       (|> zipper &;down &;rightmost &;value (is post-val))))
                true)))

      (test "Can insert children around a node (unless it's root)."
            (let [zipper (&;from-tree sample)]
              (if (&;branch? zipper)
                (let [mid-val (|> zipper &;down &;value)
                      zipper (|> zipper
                                 &;down
                                 (&;insert-left pre-val)
                                 (default (undefined))
                                 (&;insert-right post-val)
                                 (default (undefined))
                                 &;up)]
                  (and (|> zipper &;down &;value (is pre-val))
                       (|> zipper &;down &;right &;value (is mid-val))
                       (|> zipper &;down &;right &;right &;value (is post-val))
                       (|> zipper &;down &;rightmost &;leftmost &;value (is pre-val))
                       (|> zipper &;down &;right &;left &;value (is pre-val))
                       (|> zipper &;down &;rightmost &;value (is post-val))))
                (and (|> zipper (&;insert-left pre-val) (case> (#;Some _) false
                                                               #;None     true))
                     (|> zipper (&;insert-right post-val) (case> (#;Some _) false
                                                                 #;None     true))))))
      
      (test "Can set and update the value of a node."
            (|> sample &;from-tree (&;set new-val) &;value (n.= new-val)))

      (test "Zipper traversal follows the outline of the tree depth-first."
            (List/= (rose;flatten sample)
                    (loop [zipper (&;from-tree sample)]
                      (if (&;end? zipper)
                        (list (&;value zipper))
                        (#;Cons (&;value zipper)
                                (recur (&;next zipper)))))))

      (test "Backwards zipper traversal yield reverse tree flatten."
            (List/= (list;reverse (rose;flatten sample))
                    (loop [zipper (to-end (&;from-tree sample))]
                      (if (&;root? zipper)
                        (list (&;value zipper))
                        (#;Cons (&;value zipper)
                                (recur (&;prev zipper)))))))

      (test "Can remove nodes (except root nodes)."
            (let [zipper (&;from-tree sample)]
              (if (&;branch? zipper)
                (and (|> zipper &;down &;root? not)
                     (|> zipper &;down &;remove (case> #;None false
                                                       (#;Some node) (&;root? node))))
                (|> zipper &;remove (case> #;None     true
                                           (#;Some _) false)))))
      ))
