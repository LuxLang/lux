##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux [io]
       (control monad)
       (data (coll (tree ["&" rose])
                   [list "List/" Monad<List>])
             [number])
       ["R" random]
       pipe)
  lux/test)

(def: gen-nat
  (R;Random Nat)
  (|> R;nat
      (:: R;Monad<Random> map (n.% +100))))

(test: "Trees"
  [leaf (:: @ map &;leaf R;nat)
   branchS gen-nat
   branchV R;nat
   branchC (R;list branchS R;nat)
   #let [branch (&;branch branchV (List/map &;leaf branchC))]
   #let [(^open "&/") (&;Eq<Tree> number;Eq<Nat>)
         (^open "List/") (list;Eq<List> number;Eq<Nat>)]]
  ($_ seq
      (assert "Can compare trees for equality."
              (and (&/= leaf leaf)
                   (&/= branch branch)
                   (not (&/= leaf branch))
                   (not (&/= leaf (&;branch branchV (List/map &;leaf (list;reverse branchC)))))))

      (assert "Can flatten a tree to get all the nodes as a flat tree."
              (List/= (list& branchV branchC)
                      (&;flatten branch)))
      ))
