(.module:
  lux
  (lux [io]
       (control [monad #+ do Monad])
       (data (coll (set ["s" unordered]
                        ["&" ordered])
                   [list "" Fold<List>])
             [number]
             text/format)
       ["r" math/random])
  lux/test)

(def: gen-nat
  (r.Random Nat)
  (|> r.nat
      (:: r.Monad<Random> map (n/% +100))))

(context: "Sets"
  (<| (times +100)
      (do @
        [sizeL gen-nat
         sizeR gen-nat
         listL (|> (r.set number.Hash<Nat> sizeL gen-nat) (:: @ map s.to-list))
         listR (|> (r.set number.Hash<Nat> sizeR gen-nat) (:: @ map s.to-list))
         #let [(^open "&/") &.Equivalence<Set>
               setL (&.from-list number.Order<Nat> listL)
               setR (&.from-list number.Order<Nat> listR)
               sortedL (list.sort n/< listL)
               minL (list.head sortedL)
               maxL (list.last sortedL)]]
        ($_ seq
            (test "I can query the size of a set."
                  (n/= sizeL (&.size setL)))

            (test "Can query minimum value."
                  (case [(&.min setL) minL]
                    [#.None #.None]
                    true

                    [(#.Some reference) (#.Some sample)]
                    (n/= reference sample)

                    _
                    false))

            (test "Can query maximum value."
                  (case [(&.max setL) maxL]
                    [#.None #.None]
                    true

                    [(#.Some reference) (#.Some sample)]
                    (n/= reference sample)

                    _
                    false))

            (test "Converting sets to/from lists can't change their values."
                  (|> setL
                      &.to-list (&.from-list number.Order<Nat>)
                      (&/= setL)))

            (test "Order is preserved."
                  (let [listL (&.to-list setL)
                        (^open "L/") (list.Equivalence<List> number.Equivalence<Nat>)]
                    (L/= listL
                         (list.sort n/< listL))))

            (test "Every set is a sub-set of the union of itself with another."
                  (let [setLR (&.union setL setR)]
                    (and (&.sub? setLR setL)
                         (&.sub? setLR setR))))

            (test "Every set is a super-set of the intersection of itself with another."
                  (let [setLR (&.intersection setL setR)]
                    (and (&.super? setLR setL)
                         (&.super? setLR setR))))

            (test "Union with the empty set leaves a set unchanged."
                  (&/= setL
                       (&.union (&.new number.Order<Nat>)
                                setL)))

            (test "Intersection with the empty set results in the empty set."
                  (let [empty-set (&.new number.Order<Nat>)]
                    (&/= empty-set
                         (&.intersection empty-set setL))))

            (test "After substracting a set A from another B, no member of A can be a member of B."
                  (let [sub (&.difference setR setL)]
                    (not (list.any? (&.member? sub) (&.to-list setR)))))

            (test "Every member of a set must be identifiable."
                  (list.every? (&.member? setL) (&.to-list setL)))
            ))))
