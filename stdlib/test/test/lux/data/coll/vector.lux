(;module:
  lux
  (lux [io]
       (control monad)
       (data (coll ["&" vector]
                   [list "List/" Fold<List> Functor<List>])
             [text "Text/" Monoid<Text>]
             text/format
             [number])
       ["R" math/random])
  lux/test)

(test: "Vectors"
  [size (|> R;nat (:: @ map (|>. (n.% +100) (n.max +1))))
   idx (|> R;nat (:: @ map (n.% size)))
   sample (R;vector size R;nat)
   other-sample (R;vector size R;nat)
   non-member (|> R;nat (R;filter (. not (&;member? number;Eq<Nat> sample))))
   #let [(^open "&/") (&;Eq<Vector> number;Eq<Nat>)
         (^open "&/") &;Monad<Vector>
         (^open "&/") &;Fold<Vector>
         (^open "&/") &;Monoid<Vector>]]
  ($_ seq
      (assert "Can query size of vector."
              (if (&;empty? sample)
                (and (n.= +0 size)
                     (n.= +0 (&;size sample)))
                (n.= size (&;size sample))))

      (assert "Can add and remove elements to vectors."
              (and (n.= (n.inc size) (&;size (&;add non-member sample)))
                   (n.= (n.dec size) (&;size (&;pop sample)))))

      (assert "Can put and get elements into vectors."
              (|> sample
                  (&;put idx non-member)
                  (&;nth idx)
                  (default (undefined))
                  (is non-member)))

      (assert "Can update elements of vectors."
              (|> sample
                  (&;put idx non-member) (&;update idx n.inc)
                  (&;nth idx) (default (undefined))
                  (n.= (n.inc non-member))))

      (assert "Can safely transform to/from lists."
              (|> sample &;to-list &;from-list (&/= sample)))

      (assert "Can identify members of a vector."
              (and (not (&;member? number;Eq<Nat> sample non-member))
                   (&;member? number;Eq<Nat> (&;add non-member sample) non-member)))

      (assert "Can fold over elements of vector."
              (n.= (List/fold n.+ +0 (&;to-list sample))
                   (&/fold n.+ +0 sample)))
      
      (assert "Functor goes over every element."
              (let [there (&/map n.inc sample)
                    back-again (&/map n.dec there)]
                (and (not (&/= sample there))
                     (&/= sample back-again))))

      (assert "Applicative allows you to create singleton vectors, and apply vectors of functions to vectors of values."
              (and (&/= (&;vector non-member) (&/wrap non-member))
                   (&/= (&/map n.inc sample)  (&/apply (&/wrap n.inc) sample))))

      (assert "Vector concatenation is a monad."
              (&/= (&/append sample other-sample)
                   (&/join (&;vector sample other-sample))))
      ))
