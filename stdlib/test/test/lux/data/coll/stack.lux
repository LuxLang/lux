(;module:
  lux
  (lux [io]
       (control monad)
       (data (coll ["&" stack]
                   [list "" Fold<List>])
             [number])
       ["R" math/random])
  lux/test)

(def: gen-nat
  (R;Random Nat)
  (|> R;nat
      (:: R;Monad<Random> map (n.% +100))))

(context: "Stacks"
  [size gen-nat
   sample (R;stack size gen-nat)
   new-top gen-nat]
  ($_ seq
      (test "Can query the size of a stack."
            (n.= size (&;size sample)))

      (test "Can peek inside non-empty stacks."
            (case (&;peek sample)
              #;None     (&;empty? sample)
              (#;Some _) (not (&;empty? sample))))

      (test "Popping empty stacks doesn't change anything.
                But, if they're non-empty, the top of the stack is removed."
            (let [sample' (&;pop sample)]
              (or (n.= (&;size sample) (n.inc (&;size sample')))
                  (and (&;empty? sample) (&;empty? sample')))
              ))

      (test "Pushing onto a stack always increases it by 1, adding a new value at the top."
            (and (is sample
                     (&;pop (&;push new-top sample)))
                 (n.= (n.inc (&;size sample)) (&;size (&;push new-top sample)))
                 (|> (&;push new-top sample) &;peek (default (undefined))
                     (is new-top))))
      ))
