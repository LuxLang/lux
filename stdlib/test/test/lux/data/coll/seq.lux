(;module:
  lux
  (lux [io]
       (control monad)
       (data (coll ["&" seq]
                   ["F" tree/finger]
                   ["L" list])
             [text "Text/" Monoid<Text>]
             [number]
             [bool]
             [product])
       ["R" math/random]
       pipe)
  lux/test)

(def: bounded-size
  (R;Random Nat)
  (|> R;nat
      (:: R;Monad<Random> map (|>. (n.% +100) (n.+ +10) (n.max +1)))))

(test: "Seqs: Part 1"
  [size bounded-size
   idx (:: @ map (n.% size) R;nat)
   sample (|> (R;list size R;nat)
              (:: @ map (|>. &;from-list (default (undefined)))))
   extra R;nat
   #let [(^open "&/") (&;Eq<Seq> number;Eq<Nat>)]]
  ($_ seq
      (assert "Can convert to/from list."
              (|> sample
                  &;to-list &;from-list (default (undefined))
                  (&/= sample)))
      
      (assert "The size function should correctly portray the size of the seq."
              (n.= size (&;size sample)))

      (assert "Reversing a seq does not change it's size."
              (n.= (&;size sample)
                   (&;size (&;reverse sample))))
      
      (assert "Reversing a seq twice results in the original seq."
              (&/= sample
                   (&;reverse (&;reverse sample))))

      (assert "If every element in a list satisfies a predicate, there can't be any that satisfy its complement."
              (if (&;every? n.even? sample)
                (not (&;any? (bool;complement n.even?) sample))
                (&;any? (bool;complement n.even?) sample)))

      (assert "Any element of the list can be considered its member."
              (and (&;member? number;Eq<Nat>
                              (&;prepend extra sample)
                              extra)
                   (&;member? number;Eq<Nat>
                              (&;append extra sample)
                              extra)))
      
      (assert "Can do random access to seq elements."
              (and (|> (&;prepend extra sample)
                       (&;nth +0)
                       (case> (#;Some reference)
                              (n.= reference extra)

                              _
                              false))
                   (|> (&;append extra sample)
                       (&;nth size)
                       (case> (#;Some reference)
                              (n.= reference extra)

                              _
                              false))))
      ))

(test: "Seqs: Part 2"
  [size bounded-size
   sample (|> (R;list size R;nat)
              (:: @ map (|>. &;from-list (default (undefined)))))
   #let [(^open "&/") (&;Eq<Seq> number;Eq<Nat>)
         (^open "&/") &;Functor<Seq>]]
  ($_ seq
      (assert "Functor should go over every element of the seq."
              (let [there (&/map n.inc sample)
                    back-again (&/map n.dec there)]
                (and (not (&/= sample there))
                     (&/= sample back-again))))

      (assert "Sorting a seq shouldn't change it's size."
              (n.= (&;size sample)
                   (&;size (&;sort n.< sample))))

      (assert "Sorting a seq with one order should yield the reverse of sorting it with the opposite order."
              (&/= (&;sort n.< sample)
                   (&;reverse (&;sort n.> sample))))
      ))

(test: "Seqs: Part 3"
  [size bounded-size
   idx (:: @ map (n.% size) R;nat)
   sample (|> (R;list size R;nat)
              (:: @ map (|>. &;from-list (default (undefined)))))
   other-size bounded-size
   other-sample (|> (R;list other-size R;nat)
                    (:: @ map (|>. &;from-list (default (undefined)))))
   elem R;nat
   #let [(^open "&/") (&;Eq<Seq> number;Eq<Nat>)
         (^open "&/") &;Monad<Seq>]]
  ($_ seq
      (assert "Applicative allows you to create singleton seqs, and apply seqs of functions to seqs of values."
              (and (&/= (&;seq elem) (&/wrap elem))
                   (&/= (&/map n.inc sample)
                        (&/apply (&/wrap n.inc) sample))))

      (assert "Seq concatenation is a monad."
              (&/= (F;branch sample other-sample)
                   (&/join (&;seq sample other-sample))))

      (assert "You can find any value that satisfies some criterium, if such values exist in the seq."
              (case (&;find n.even? sample)
                (#;Some found)
                (and (n.even? found)
                     (&;any? n.even? sample)
                     (not (&;every? (bool;complement n.even?) sample)))

                #;None
                (and (not (&;any? n.even? sample))
                     (&;every? (bool;complement n.even?) sample))))
      ))
