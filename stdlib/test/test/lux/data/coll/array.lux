(;module:
  lux
  (lux (control [monad #+ do Monad]
                pipe)
       [io]
       (data (coll ["@" array]
                   [list])
             [number]
             [maybe])
       ["r" math/random])
  lux/test)

(def: bounded-size
  (r;Random Nat)
  (|> r;nat
      (:: r;Monad<Random> map (|>. (n/% +100) (n/+ +1)))))

(context: "Arrays and their copies"
  (<| (times +100)
      (do @
        [size bounded-size
         original (r;array size r;nat)
         #let [clone (@;clone original)
               copy (: (Array Nat)
                       (@;new size))
               manual-copy (: (Array Nat)
                              (@;new size))]]
        ($_ seq
            (test "Size function must correctly return size of array."
                  (n/= size (@;size original)))
            (test "Cloning an array should yield and identical array, but not the same one."
                  (and (:: (@;Eq<Array> number;Eq<Nat>) = original clone)
                       (not (is original clone))))
            (test "Full-range manual copies should give the same result as cloning."
                  (exec (@;copy size +0 original +0 copy)
                    (and (:: (@;Eq<Array> number;Eq<Nat>) = original copy)
                         (not (is original copy)))))
            (test "Array folding should go over all values."
                  (exec (:: @;Fold<Array> fold
                            (function [x idx]
                              (exec (@;write idx x manual-copy)
                                (n/inc idx)))
                            +0
                            original)
                    (:: (@;Eq<Array> number;Eq<Nat>) = original manual-copy)))
            (test "Transformations between (full) arrays and lists shouldn't cause lose or change any values."
                  (|> original
                      @;to-list @;from-list
                      (:: (@;Eq<Array> number;Eq<Nat>) = original)))
            ))))

(context: "Array mutation"
  (<| (times +100)
      (do @
        [size bounded-size
         idx (:: @ map (n/% size) r;nat)
         array (|> (r;array size r;nat)
                   (r;filter (|>. @;to-list (list;any? n/odd?))))
         #let [value (maybe;assume (@;read idx array))]]
        ($_ seq
            (test "Shouldn't be able to find a value in an unoccupied cell."
                  (case (@;read idx (@;delete idx array))
                    (#;Some _) false
                    #;None     true))
            (test "You should be able to access values put into the array."
                  (case (@;read idx (@;write idx value array))
                    (#;Some value') (n/= value' value)
                    #;None          false))
            (test "All cells should be occupied on a full array."
                  (and (n/= size (@;occupied array))
                       (n/= +0 (@;vacant array))))
            (test "Filtering mutates the array to remove invalid values."
                  (exec (@;filter n/even? array)
                    (and (n/< size (@;occupied array))
                         (n/> +0 (@;vacant array))
                         (n/= size (n/+ (@;occupied array)
                                        (@;vacant array))))))
            ))))

(context: "Finding values."
  (<| (times +100)
      (do @
        [size bounded-size
         array (|> (r;array size r;nat)
                   (r;filter (|>. @;to-list (list;any? n/even?))))]
        ($_ seq
            (test "Can find values inside arrays."
                  (|> (@;find n/even? array)
                      (case> (#;Some _) true
                             #;None     false)))
            (test "Can find values inside arrays (with access to indices)."
                  (|> (@;find+ (function [idx n]
                                 (and (n/even? n)
                                      (n/< size idx)))
                               array)
                      (case> (#;Some _) true
                             #;None     false)))))))

(context: "Functor"
  (<| (times +100)
      (do @
        [size bounded-size
         array (r;array size r;nat)]
        (let [(^open) @;Functor<Array>
              (^open) (@;Eq<Array> number;Eq<Nat>)]
          ($_ seq
              (test "Functor shouldn't alter original array."
                    (let [copy (map id array)]
                      (and (= array copy)
                           (not (is array copy)))))
              (test "Functor should go over all available array elements."
                    (let [there (map n/inc array)
                          back-again (map n/dec there)]
                      (and (not (= array there))
                           (= array back-again)))))))))

(context: "Monoid"
  (<| (times +100)
      (do @
        [sizeL bounded-size
         sizeR bounded-size
         left (r;array sizeL r;nat)
         right (r;array sizeR r;nat)
         #let [(^open) @;Monoid<Array>
               (^open) (@;Eq<Array> number;Eq<Nat>)
               fusion (compose left right)]]
        ($_ seq
            (test "Appending two arrays should produce a new one twice as large."
                  (n/= (n/+ sizeL sizeR) (@;size fusion)))
            (test "First elements of fused array should equal the first array."
                  (|> (: (Array Nat)
                         (@;new sizeL))
                      (@;copy sizeL +0 fusion +0)
                      (= left)))
            (test "Last elements of fused array should equal the second array."
                  (|> (: (Array Nat)
                         (@;new sizeR))
                      (@;copy sizeR sizeL fusion +0)
                      (= right)))
            ))))
