(;module:
  lux
  (lux [io]
       (control monad)
       (data (coll ["&" set]
                   [list "" Fold<List>])
             [number])
       ["R" random]
       pipe)
  lux/test)

(def: gen-nat
  (R;Random Nat)
  (|> R;nat
      (:: R;Monad<Random> map (n.% +100))))

(test: "Sets"
  [sizeL gen-nat
   sizeR gen-nat
   setL (R;set number;Hash<Nat> sizeL gen-nat)
   setR (R;set number;Hash<Nat> sizeR gen-nat)
   non-member (|> gen-nat
                  (R;filter (. not (&;member? setL))))
   #let [(^open "&/") &;Eq<Set>]]
  ($_ seq
      (assert "I can query the size of a set."
              (and (n.= sizeL (&;size setL))
                   (n.= sizeR (&;size setR))))

      (assert "Converting sets to/from lists can't change their values."
              (|> setL
                  &;to-list (&;from-list number;Hash<Nat>)
                  (&/= setL)))

      (assert "Every set is a sub-set of the union of itself with another."
              (let [setLR (&;union setL setR)]
                (and (&;sub? setLR setL)
                     (&;sub? setLR setR))))

      (assert "Every set is a super-set of the intersection of itself with another."
              (let [setLR (&;intersection setL setR)]
                (and (&;super? setLR setL)
                     (&;super? setLR setR))))

      (assert "Union with the empty set leaves a set unchanged."
              (&/= setL
                   (&;union (&;new number;Hash<Nat>)
                            setL)))

      (assert "Intersection with the empty set results in the empty set."
              (let [empty-set (&;new number;Hash<Nat>)]
                (&/= empty-set
                     (&;intersection empty-set setL))))

      (assert "After substracting a set A from another B, no member of A can be a member of B."
              (let [sub (&;difference setR setL)]
                (not (list;any? (&;member? sub) (&;to-list setR)))))

      (assert "Every member of a set must be identifiable."
              (and (not (&;member? setL non-member))
                   (&;member? (&;add non-member setL) non-member)
                   (not (&;member? (&;remove non-member (&;add non-member setL)) non-member))))
      ))
