(.module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                [eq #+ Eq])
       (data [product]
             [number]
             (coll (ordered ["&" dict])
                   ["s" set]
                   ["d" dict]
                   [list "L/" Functor<List>]))
       ["r" math/random])
  lux/test)

(context: "Dict"
  (<| (times +100)
      (do @
        [size (|> r.nat (:: @ map (n/% +100)))
         keys (r.set number.Hash<Nat> size r.nat)
         values (r.set number.Hash<Nat> size r.nat)
         extra-key (|> r.nat (r.filter (|>> (s.member? keys) not)))
         extra-value r.nat
         #let [pairs (list.zip2 (s.to-list keys)
                                (s.to-list values))
               sample (&.from-list number.Order<Nat> pairs)
               sorted-pairs (list.sort (function [[left _] [right _]]
                                         (n/< left right))
                                       pairs)
               sorted-values (L/map product.right sorted-pairs)
               (^open "&/") (&.Eq<Dict> number.Eq<Nat>)]]
        ($_ seq
            (test "Can query the size of a dictionary."
                  (n/= size (&.size sample)))

            (test "Can query value for minimum key."
                  (case [(&.min sample) (list.head sorted-values)]
                    [#.None #.None]
                    true

                    [(#.Some reference) (#.Some sample)]
                    (n/= reference sample)

                    _
                    false))

            (test "Can query value for maximum key."
                  (case [(&.max sample) (list.last sorted-values)]
                    [#.None #.None]
                    true

                    [(#.Some reference) (#.Some sample)]
                    (n/= reference sample)

                    _
                    false))

            (test "Converting dictionaries to/from lists cannot change their values."
                  (|> sample
                      &.entries (&.from-list number.Order<Nat>)
                      (&/= sample)))

            (test "Order is preserved."
                  (let [(^open "L/") (list.Eq<List> (: (Eq [Nat Nat])
                                                       (function [[kr vr] [ks vs]]
                                                         (and (n/= kr ks)
                                                              (n/= vr vs)))))]
                    (L/= (&.entries sample)
                         sorted-pairs)))

            (test "Every key in a dictionary must be identifiable."
                  (list.every? (function [key] (&.contains? key sample))
                               (&.keys sample)))

            (test "Can add and remove elements in a dictionary."
                  (and (not (&.contains? extra-key sample))
                       (let [sample' (&.put extra-key extra-value sample)
                             sample'' (&.remove extra-key sample')]
                         (and (&.contains? extra-key sample')
                              (not (&.contains? extra-key sample''))
                              (case [(&.get extra-key sample')
                                     (&.get extra-key sample'')]
                                [(#.Some found) #.None]
                                (n/= extra-value found)

                                _
                                false)))
                       ))
            ))))
