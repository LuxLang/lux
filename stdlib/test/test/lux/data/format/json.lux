(.module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                codec
                [equivalence #+ Equivalence]
                pipe
                ["p" parser])
       (data [text]
             text/format
             ["e" error]
             [bool]
             [maybe]
             [number]
             (format ["@" json])
             (coll [row #+ row]
                   (dictionary ["d" unordered])
                   [list]))
       [macro #+ with-gensyms]
       (macro [code]
              [syntax #+ syntax:]
              [poly #+ derived:]
              [poly/equivalence]
              [poly/json])
       (type [unit])
       ["r" math/random]
       (time ["ti" instant]
             ["tda" date]
             ["tdu" duration])
       test)
  (test (lux (time ["_." instant]
                   ["_." duration]
                   ["_." date])))
  )

(def: gen-json
  (r.Random @.JSON)
  (r.rec (function (_ gen-json)
           (do r.Monad<Random>
             [size (:: @ map (n/% +2) r.nat)]
             ($_ r.alt
                 (:: @ wrap [])
                 r.bool
                 (|> r.frac (:: @ map (f/* 1_000_000.0)))
                 (r.unicode size)
                 (r.row size gen-json)
                 (r.dict text.Hash<Text> size (r.unicode size) gen-json)
                 )))))

(context: "JSON"
  (<| (times +100)
      (do @
        [sample gen-json
         #let [(^open "@/") @.Equivalence<JSON>
               (^open "@/") @.Codec<Text,JSON>]]
        ($_ seq
            (test "Every JSON is equal to itself."
                  (@/= sample sample))

            (test "Can encode/decode JSON."
                  (|> sample @/encode @/decode
                      (case> (#.Right result)
                             (@/= sample result)

                             (#.Left _)
                             false)))
            ))))

(type: Variant
  (#Case0 Bool)
  (#Case1 Text)
  (#Case2 Frac))

(type: #rec Recursive
  (#Number Frac)
  (#Addition Frac Recursive))

(type: Record
  {#bool Bool
   #frac Frac
   #text Text
   #maybe (Maybe Frac)
   #list (List Frac)
   #dict (d.Dict Text Frac)
   ## #variant Variant
   ## #tuple [Bool Frac Text]
   #recursive Recursive
   ## #instant ti.Instant
   #duration tdu.Duration
   #date tda.Date
   #grams (unit.Qty unit.Gram)
   })

(def: gen-recursive
  (r.Random Recursive)
  (r.rec (function (_ gen-recursive)
           (r.alt r.frac
                  (r.seq r.frac gen-recursive)))))

(derived: (poly/equivalence.Equivalence<?> Recursive))

(def: qty
  (All [unit] (r.Random (unit.Qty unit)))
  (|> r.int (:: r.Monad<Random> map unit.in)))

(def: gen-record
  (r.Random Record)
  (do r.Monad<Random>
    [size (:: @ map (n/% +2) r.nat)]
    ($_ r.seq
        r.bool
        r.frac
        (r.unicode size)
        (r.maybe r.frac)
        (r.list size r.frac)
        (r.dict text.Hash<Text> size (r.unicode size) r.frac)
        ## ($_ r.alt r.bool (r.unicode size) r.frac)
        ## ($_ r.seq r.bool r.frac (r.unicode size))
        gen-recursive
        ## _instant.instant
        _duration.duration
        _date.date
        qty
        )))

(derived: (poly/json.Codec<JSON,?> Record))

(structure: _ (Equivalence Record)
  (def: (= recL recR)
    (let [variant/= (function (_ left right)
                      (case [left right]
                        [(#Case0 left') (#Case0 right')]
                        (:: bool.Equivalence<Bool> = left' right')

                        [(#Case1 left') (#Case1 right')]
                        (:: text.Equivalence<Text> = left' right')

                        [(#Case2 left') (#Case2 right')]
                        (f/= left' right')

                        _
                        false))]
      (and (:: bool.Equivalence<Bool> = (get@ #bool recL) (get@ #bool recR))
           (f/= (get@ #frac recL) (get@ #frac recR))
           (:: text.Equivalence<Text> = (get@ #text recL) (get@ #text recR))
           (:: (maybe.Equivalence<Maybe> number.Equivalence<Frac>) = (get@ #maybe recL) (get@ #maybe recR))
           (:: (list.Equivalence<List> number.Equivalence<Frac>) = (get@ #list recL) (get@ #list recR))
           (:: (d.Equivalence<Dict> number.Equivalence<Frac>) = (get@ #dict recL) (get@ #dict recR))
           ## (variant/= (get@ #variant recL) (get@ #variant recR))
           ## (let [[tL0 tL1 tL2] (get@ #tuple recL)
           ##       [tR0 tR1 tR2] (get@ #tuple recR)]
           ##   (and (:: bool.Equivalence<Bool> = tL0 tR0)
           ##        (f/= tL1 tR1)
           ##        (:: text.Equivalence<Text> = tL2 tR2)))
           (:: Equivalence<Recursive> = (get@ #recursive recL) (get@ #recursive recR))
           ## (:: ti.Equivalence<Instant> = (get@ #instant recL) (get@ #instant recR))
           (:: tdu.Equivalence<Duration> = (get@ #duration recL) (get@ #duration recR))
           (:: tda.Equivalence<Date> = (get@ #date recL) (get@ #date recR))
           (:: unit.Equivalence<Unit> = (get@ #grams recL) (get@ #grams recR))
           ))))

(context: "Polytypism"
  (<| (seed +14562075782602945288)
      ## (times +100)
      (do @
        [sample gen-record
         #let [(^open "@/") Equivalence<Record>
               (^open "@/") Codec<JSON,Record>]]
        (test "Can encode/decode arbitrary types."
              (|> sample @/encode @/decode
                  (case> (#e.Success result)
                         (@/= sample result)

                         (#e.Error error)
                         false))))))
