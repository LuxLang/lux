(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                codec
                [eq #+ Eq]
                pipe
                ["p" parser])
       (data [text "Text/" Monoid<Text>]
             text/format
             ["R" result]
             [bool]
             [maybe]
             [number "i/" Number<Int>]
             (format ["@" json]
                     (json ["@;" reader]
                           ["@;" codec]))
             (coll [vector #+ vector]
                   ["d" dict]
                   [list]))
       [macro #+ with-gensyms]
       (macro [code]
              [syntax #+ syntax:]
              [poly #+ derived:]
              [poly/eq])
       ["r" math/random]
       test)
  )

(def: gen-json
  (r;Random @;JSON)
  (r;rec (function [gen-json]
           (do r;Monad<Random>
             [size (:: @ map (n.% +2) r;nat)]
             ($_ r;alt
                 (:: @ wrap [])
                 r;bool
                 (|> r;real (:: @ map (r.* 1_000_000.0)))
                 (r;text size)
                 (r;vector size gen-json)
                 (r;dict text;Hash<Text> size (r;text size) gen-json)
                 )))))

(context: "JSON"
  [sample gen-json
   #let [(^open "@/") @;Eq<JSON>
         (^open "@/") @codec;Codec<Text,JSON>]]
  ($_ seq
      (test "Every JSON is equal to itself."
            (@/= sample sample))

      (test "Can encode/decode JSON."
            (|> sample @/encode @/decode
                (case> (#;Right result)
                       (@/= sample result)

                       (#;Left _)
                       false)))
      ))

(type: Variant
  (#Case0 Bool)
  (#Case1 Text)
  (#Case2 Real))

(type: #rec Recursive
  (#Number Real)
  (#Addition Real Recursive))

(type: Record
  {#unit Unit
   #bool Bool
   #real Real
   #text Text
   #maybe (Maybe Real)
   #list (List Real)
   #variant Variant
   #tuple [Bool Real Text]
   #dict (d;Dict Text Real)
   #recursive Recursive})

(def: gen-recursive
  (r;Random Recursive)
  (r;rec (function [gen-recursive]
           (r;alt r;real
                  (r;seq r;real gen-recursive)))))

(derived: (poly/eq;Eq<?> Recursive))

(def: gen-record
  (r;Random Record)
  (do r;Monad<Random>
    [size (:: @ map (n.% +2) r;nat)]
    ($_ r;seq
        (:: @ wrap [])
        r;bool
        r;real
        (r;text size)
        (r;maybe r;real)
        (r;list size r;real)
        ($_ r;alt r;bool (r;text size) r;real)
        ($_ r;seq r;bool r;real (r;text size))
        (r;dict text;Hash<Text> size (r;text size) r;real)
        gen-recursive
        )))

(derived: (@codec;Codec<JSON,?> Record))

(struct: _ (Eq Record)
  (def: (= recL recR)
    (let [variant/= (function [left right]
                      (case [left right]
                        [(#Case0 left') (#Case0 right')]
                        (:: bool;Eq<Bool> = left' right')
                        
                        [(#Case1 left') (#Case1 right')]
                        (:: text;Eq<Text> = left' right')
                        
                        [(#Case2 left') (#Case2 right')]
                        (r.= left' right')

                        _
                        false))]
      (and (:: bool;Eq<Bool> = (get@ #bool recL) (get@ #bool recR))
           (r.= (get@ #real recL) (get@ #real recR))
           (:: text;Eq<Text> = (get@ #text recL) (get@ #text recR))
           (:: (maybe;Eq<Maybe> number;Eq<Real>) = (get@ #maybe recL) (get@ #maybe recR))
           (:: (list;Eq<List> number;Eq<Real>) = (get@ #list recL) (get@ #list recR))
           (variant/= (get@ #variant recL) (get@ #variant recR))
           (let [[tL0 tL1 tL2] (get@ #tuple recL)
                 [tR0 tR1 tR2] (get@ #tuple recR)]
             (and (:: bool;Eq<Bool> = tL0 tR0)
                  (r.= tL1 tR1)
                  (:: text;Eq<Text> = tL2 tR2)))
           (:: (d;Eq<Dict> number;Eq<Real>) = (get@ #dict recL) (get@ #dict recR))
           (:: Eq<Recursive> = (get@ #recursive recL) (get@ #recursive recR))
           ))))

(context: "Polytypism"
  [sample gen-record
   #let [(^open "@/") Eq<Record>
         (^open "@/") Codec<JSON,Record>]]
  (test "Can encode/decode arbitrary types."
        (|> sample @/encode @/decode
            (case> (#R;Success result)
                   (@/= sample result)

                   (#R;Error error)
                   false))))
