(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                pipe)
       (data [text "Text/" Monoid<Text>]
             text/format
             [ident]
             (format ["&" xml])
             (coll [dict]
                   [list]))
       ["r" math/random "r/" Monad<Random>]
       test)
  )

(def: char-range
  Text
  (format "_"
          "abcdefghijklmnopqrstuvwxyz"
          "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))

(def: xml-char^
  (r;Random Nat)
  (do r;Monad<Random>
    [idx (|> r;nat (:: @ map (n.% (text;size char-range))))]
    (wrap (assume (text;nth idx char-range)))))

(def: (size^ bottom top)
  (-> Nat Nat (r;Random Nat))
  (let [constraint (|>. (n.% top) (n.max bottom))]
    (r/map constraint r;nat)))

(def: (xml-text^ bottom top)
  (-> Nat Nat (r;Random Text))
  (do r;Monad<Random>
    [size (size^ bottom top)]
    (r;text' xml-char^ size)))

(def: xml-identifier^
  (r;Random Ident)
  (r;seq (xml-text^ +0 +10)
         (xml-text^ +1 +10)))

(def: gen-xml
  (r;Random &;XML)
  (r;rec (function [gen-xml]
           (r;alt (xml-text^ +1 +10)
                  (do r;Monad<Random>
                    [size (size^ +0 +2)]
                    ($_ r;seq
                        xml-identifier^
                        (r;dict ident;Hash<Ident> size xml-identifier^ (xml-text^ +0 +10))
                        (r;list size gen-xml)))))))

(context: "XML"
  [sample gen-xml
   #let [(^open "&/") &;Eq<XML>
         (^open "&/") &;Codec<Text,XML>]]
  ($_ seq
      (test "Every XML is equal to itself."
            (&/= sample sample))

      (test "Can encode/decode XML."
            (|> sample &/encode &/decode
                (case> (#;Right result)
                       (&/= sample result)

                       (#;Left error)
                       false)))
      ))
