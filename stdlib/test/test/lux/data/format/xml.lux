(.module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                ["p" parser]
                pipe)
       (data [text "text/" Eq<Text>]
             text/format
             [ident]
             ["E" error]
             [maybe]
             (format ["&" xml])
             (coll [dict]
                   [list "L/" Functor<List>]))
       ["r" math/random "r/" Monad<Random>]
       test)
  )

(def: char-range
  Text
  (format "_"
          "abcdefghijklmnopqrstuvwxyz"
          "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))

(def: xml-char^
  (r.Random Nat)
  (do r.Monad<Random>
    [idx (|> r.nat (:: @ map (n/% (text.size char-range))))]
    (wrap (maybe.assume (text.nth idx char-range)))))

(def: (size^ bottom top)
  (-> Nat Nat (r.Random Nat))
  (let [constraint (|>> (n/% top) (n/max bottom))]
    (r/map constraint r.nat)))

(def: (xml-text^ bottom top)
  (-> Nat Nat (r.Random Text))
  (do r.Monad<Random>
    [size (size^ bottom top)]
    (r.text' xml-char^ size)))

(def: xml-identifier^
  (r.Random Ident)
  (r.seq (xml-text^ +0 +10)
         (xml-text^ +1 +10)))

(def: gen-xml
  (r.Random &.XML)
  (r.rec (function [gen-xml]
           (r.alt (xml-text^ +1 +10)
                  (do r.Monad<Random>
                    [size (size^ +0 +2)]
                    ($_ r.seq
                        xml-identifier^
                        (r.dict ident.Hash<Ident> size xml-identifier^ (xml-text^ +0 +10))
                        (r.list size gen-xml)))))))

(context: "XML."
  (<| (times +100)
      (do @
        [sample gen-xml
         #let [(^open "&/") &.Eq<XML>
               (^open "&/") &.Codec<Text,XML>]]
        ($_ seq
            (test "Every XML is equal to itself."
                  (&/= sample sample))

            (test "Can encode/decode XML."
                  (|> sample &/encode &/decode
                      (case> (#.Right result)
                             (&/= sample result)

                             (#.Left error)
                             false)))
            ))))

(context: "Parsing."
  (<| (times +100)
      (do @
        [text (xml-text^ +1 +10)
         num-children (|> r.nat (:: @ map (n/% +5)))
         children (r.list num-children (xml-text^ +1 +10))
         tag xml-identifier^
         attr xml-identifier^
         value (xml-text^ +1 +10)
         #let [node (#&.Node tag
                             (dict.put attr value &.attrs)
                             (L/map (|>> #&.Text) children))]]
        ($_ seq
            (test "Can parse text."
                  (E.default false
                             (do E.Monad<Error>
                               [output (&.run (#&.Text text)
                                              &.text)]
                               (wrap (text/= text output)))))
            (test "Can parse attributes."
                  (E.default false
                             (do E.Monad<Error>
                               [output (|> (&.attr attr)
                                           (p.before &.ignore)
                                           (&.run node))]
                               (wrap (text/= value output)))))
            (test "Can parse nodes."
                  (E.default false
                             (do E.Monad<Error>
                               [_ (|> (&.node tag)
                                      (p.before &.ignore)
                                      (&.run node))]
                               (wrap true))))
            (test "Can parse children."
                  (E.default false
                             (do E.Monad<Error>
                               [outputs (|> (&.children (p.some &.text))
                                            (&.run node))]
                               (wrap (:: (list.Eq<List> text.Eq<Text>) =
                                         children
                                         outputs)))))
            ))))
