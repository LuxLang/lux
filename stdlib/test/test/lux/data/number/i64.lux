(.module:
  [lux #*
   [control
    ["M" monad (#+ do Monad)]]
   [data
    [number #*
     ["&" i64]]]
   [math
    ["r" random]]]
  lux/test)

(context: "Bitwise operations."
  (<| (times +100)
      (do @
        [pattern r.nat
         idx (:: @ map (n/% &.width) r.nat)]
        ($_ seq
            (test "Clearing and settings bits should alter the count."
                  (and (n/= (dec (&.count (&.set idx pattern)))
                            (&.count (&.clear idx pattern)))
                       (|> (&.count pattern)
                           (n/- (&.count (&.clear idx pattern)))
                           (n/<= +1))
                       (|> (&.count (&.set idx pattern))
                           (n/- (&.count pattern))
                           (n/<= +1))))
            (test "Can query whether a bit is set."
                  (and (or (and (&.set? idx pattern)
                                (not (&.set? idx (&.clear idx pattern))))
                           (and (not (&.set? idx pattern))
                                (&.set? idx (&.set idx pattern))))

                       (or (and (&.set? idx pattern)
                                (not (&.set? idx (&.flip idx pattern))))
                           (and (not (&.set? idx pattern))
                                (&.set? idx (&.flip idx pattern))))))
            (test "The negation of a bit pattern should have a complementary bit-count."
                  (n/= &.width
                       (n/+ (&.count pattern)
                            (&.count (&.not pattern)))))
            (test "Can do simple binary logic."
                  (and (n/= +0
                            (&.and pattern
                                   (&.not pattern)))
                       (n/= (&.not +0)
                            (&.or pattern
                                  (&.not pattern)))
                       (n/= (&.not +0)
                            (&.xor pattern
                                   (&.not pattern)))
                       (n/= +0
                            (&.xor pattern
                                   pattern))))
            (test "rotate-left and rotate-right are inverses of one another."
                  (and (|> pattern
                           (&.rotate-left idx)
                           (&.rotate-right idx)
                           (n/= pattern))
                       (|> pattern
                           (&.rotate-right idx)
                           (&.rotate-left idx)
                           (n/= pattern))))
            (test "Rotate as many spaces as the bit-pattern's width leaves the pattern unchanged."
                  (and (|> pattern
                           (&.rotate-left &.width)
                           (n/= pattern))
                       (|> pattern
                           (&.rotate-right &.width)
                           (n/= pattern))))
            (test "Shift right respect the sign of ints."
                  (let [value (.int pattern)]
                    (if (i/< 0 value)
                      (i/< 0 (&.arithmetic-right-shift idx value))
                      (i/>= 0 (&.arithmetic-right-shift idx value)))))
            ))))
