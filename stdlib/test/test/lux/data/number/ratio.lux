(.module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                pipe)
       (data ["&" number/ratio "&/" Number<Ratio>])
       ["r" math/random])
  lux/test)

(def: gen-part
  (r.Random Nat)
  (|> r.nat (:: r.Monad<Random> map (|>> (n/% +1000) (n/max +1)))))

(def: gen-ratio
  (r.Random &.Ratio)
  (do r.Monad<Random>
    [numerator gen-part
     denominator (|> gen-part
                     (r.filter (|>> (n/= +0) not))
                     (r.filter (|>> (n/= numerator) not)))]
    (wrap (&.ratio numerator denominator))))

(context: "Normalization"
  (<| (times +100)
      (do @
        [denom1 gen-part
         denom2 gen-part
         sample gen-ratio]
        ($_ seq
            (test "All zeroes are the same."
                  (&.= (&.ratio +0 denom1)
                       (&.ratio +0 denom2)))

            (test "All ratios are built normalized."
                  (|> sample
                      &.normalize
                      ("lux in-module" "lux/data/number/ratio")
                      (&.= sample)))
            ))))

(context: "Arithmetic"
  (<| (times +100)
      (do @
        [x gen-ratio
         y gen-ratio
         #let [min (&.min x y)
               max (&.max x y)]]
        ($_ seq
            (test "Addition and subtraction are opposites."
                  (and (|> max (&.- min) (&.+ min) (&.= max))
                       (|> max (&.+ min) (&.- min) (&.= max))))

            (test "Multiplication and division are opposites."
                  (and (|> max (&./ min) (&.* min) (&.= max))
                       (|> max (&.* min) (&./ min) (&.= max))))

            (test "Modulus by a larger ratio doesn't change the value."
                  (|> min (&.% max) (&.= min)))

            (test "Modulus by a smaller ratio results in a value smaller than the limit."
                  (|> max (&.% min) (&.< min)))

            (test "Can get the remainder of a division."
                  (let [remainder (&.% min max)
                        multiple (&.- remainder max)
                        factor (&./ min multiple)]
                    (and (|> factor (get@ #&.denominator) (n/= +1))
                         (|> factor (&.* min) (&.+ remainder) (&.= max)))))
            ))))

(context: "Negation, absolute value and signum"
  (<| (times +100)
      (do @
        [sample gen-ratio]
        ($_ seq
            (test "Negation is it's own inverse."
                  (let [there (&/negate sample)
                        back-again (&/negate there)]
                    (and (not (&.= there sample))
                         (&.= back-again sample))))

            (test "All ratios are already at their absolute value."
                  (|> sample &/abs (&.= sample)))
            
            (test "Signum is the identity."
                  (|> sample (&.* (&/signum sample)) (&.= sample)))
            ))))

(context: "Order"
  (<| (times +100)
      (do @
        [x gen-ratio
         y gen-ratio]
        ($_ seq
            (test "Can compare ratios."
                  (and (or (&.<= y x)
                           (&.> y x))
                       (or (&.>= y x)
                           (&.< y x))))
            ))))

(context: "Codec"
  (<| (times +100)
      (do @
        [sample gen-ratio
         #let [(^open "&/") &.Codec<Text,Ratio>]]
        (test "Can encode/decode ratios."
              (|> sample &/encode &/decode
                  (case> (#.Right output)
                         (&.= sample output)
                         
                         _
                         false))))))
