(;module:
  lux
  (lux [io]
       (control monad
                pipe)
       (data [text "Text/" Monoid<Text>]
             text/format
             [bool "b/" Eq<Bool>]
             [number "r/" Number<Real>]
             ["&" number/ratio "&/" Number<Ratio>]
             (coll [list "List/" Fold<List> Functor<List>])
             [product])
       ["R" math/random])
  lux/test)

(def: gen-part
  (R;Random Nat)
  (|> R;nat (:: R;Monad<Random> map (|>. (n.% +1000) (n.max +1)))))

(def: gen-ratio
  (R;Random &;Ratio)
  (do R;Monad<Random>
    [numerator gen-part
     denominator (|> gen-part
                     (R;filter (|>. (n.= +0) not))
                     (R;filter (. not (n.= numerator))))]
    (wrap (&;ratio numerator denominator))))

(context: "Normalization"
  [denom1 gen-part
   denom2 gen-part
   sample gen-ratio]
  ($_ seq
      (test "All zeroes are the same."
            (&;q.= (&;ratio +0 denom1)
                   (&;ratio +0 denom2)))

      (test "All ratios are built normalized."
            (|> sample &;normalize (&;q.= sample)))
      ))

(context: "Arithmetic"
  [x gen-ratio
   y gen-ratio
   #let [min (&;q.min x y)
         max (&;q.max x y)]]
  ($_ seq
      (test "Addition and subtraction are opposites."
            (and (|> max (&;q.- min) (&;q.+ min) (&;q.= max))
                 (|> max (&;q.+ min) (&;q.- min) (&;q.= max))))

      (test "Multiplication and division are opposites."
            (and (|> max (&;q./ min) (&;q.* min) (&;q.= max))
                 (|> max (&;q.* min) (&;q./ min) (&;q.= max))))

      (test "Modulus by a larger ratio doesn't change the value."
            (|> min (&;q.% max) (&;q.= min)))

      (test "Modulus by a smaller ratio results in a value smaller than the limit."
            (|> max (&;q.% min) (&;q.< min)))

      (test "Can get the remainder of a division."
            (let [remainder (&;q.% min max)
                  multiple (&;q.- remainder max)
                  factor (&;q./ min multiple)]
              (and (|> factor (get@ #&;denominator) (n.= +1))
                   (|> factor (&;q.* min) (&;q.+ remainder) (&;q.= max)))))
      ))

(context: "Negation, absolute value and signum"
  [sample gen-ratio]
  ($_ seq
      (test "Negation is it's own inverse."
            (let [there (&/negate sample)
                  back-again (&/negate there)]
              (and (not (&;q.= there sample))
                   (&;q.= back-again sample))))

      (test "All ratios are already at their absolute value."
            (|> sample &/abs (&;q.= sample)))
      
      (test "Signum is the identity."
            (|> sample (&;q.* (&/signum sample)) (&;q.= sample)))
      ))

(context: "Order"
  [x gen-ratio
   y gen-ratio]
  ($_ seq
      (test "Can compare ratios."
            (and (or (&;q.<= y x)
                     (&;q.> y x))
                 (or (&;q.>= y x)
                     (&;q.< y x))))
      ))

(context: "Codec"
  [sample gen-ratio
   #let [(^open "&/") &;Codec<Text,Ratio>]]
  (test "Can encode/decode ratios."
        (|> sample &/encode &/decode
            (case> (#;Right output)
                   (&;q.= sample output)
                   
                   _
                   false))))
