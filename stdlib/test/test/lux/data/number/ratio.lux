(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                pipe)
       (data ["&" number/ratio "&/" Number<Ratio>])
       ["r" math/random])
  lux/test)

(def: gen-part
  (r;Random Nat)
  (|> r;nat (:: r;Monad<Random> map (|>> (n/% +1000) (n/max +1)))))

(def: gen-ratio
  (r;Random &;Ratio)
  (do r;Monad<Random>
    [numerator gen-part
     denominator (|> gen-part
                     (r;filter (|>> (n/= +0) not))
                     (r;filter (|>> (n/= numerator) not)))]
    (wrap (&;ratio numerator denominator))))

(context: "Normalization"
  (<| (times +100)
      (do @
        [denom1 gen-part
         denom2 gen-part
         sample gen-ratio]
        ($_ seq
            (test "All zeroes are the same."
                  (&;r/= (&;ratio +0 denom1)
                         (&;ratio +0 denom2)))

            (test "All ratios are built normalized."
                  (|> sample &;normalize (&;r/= sample)))
            ))))

(context: "Arithmetic"
  (<| (times +100)
      (do @
        [x gen-ratio
         y gen-ratio
         #let [min (&;r/min x y)
               max (&;r/max x y)]]
        ($_ seq
            (test "Addition and subtraction are opposites."
                  (and (|> max (&;r/- min) (&;r/+ min) (&;r/= max))
                       (|> max (&;r/+ min) (&;r/- min) (&;r/= max))))

            (test "Multiplication and division are opposites."
                  (and (|> max (&;r// min) (&;r/* min) (&;r/= max))
                       (|> max (&;r/* min) (&;r// min) (&;r/= max))))

            (test "Modulus by a larger ratio doesn't change the value."
                  (|> min (&;r/% max) (&;r/= min)))

            (test "Modulus by a smaller ratio results in a value smaller than the limit."
                  (|> max (&;r/% min) (&;r/< min)))

            (test "Can get the remainder of a division."
                  (let [remainder (&;r/% min max)
                        multiple (&;r/- remainder max)
                        factor (&;r// min multiple)]
                    (and (|> factor (get@ #&;denominator) (n/= +1))
                         (|> factor (&;r/* min) (&;r/+ remainder) (&;r/= max)))))
            ))))

(context: "Negation, absolute value and signum"
  (<| (times +100)
      (do @
        [sample gen-ratio]
        ($_ seq
            (test "Negation is it's own inverse."
                  (let [there (&/negate sample)
                        back-again (&/negate there)]
                    (and (not (&;r/= there sample))
                         (&;r/= back-again sample))))

            (test "All ratios are already at their absolute value."
                  (|> sample &/abs (&;r/= sample)))
            
            (test "Signum is the identity."
                  (|> sample (&;r/* (&/signum sample)) (&;r/= sample)))
            ))))

(context: "Order"
  (<| (times +100)
      (do @
        [x gen-ratio
         y gen-ratio]
        ($_ seq
            (test "Can compare ratios."
                  (and (or (&;r/<= y x)
                           (&;r/> y x))
                       (or (&;r/>= y x)
                           (&;r/< y x))))
            ))))

(context: "Codec"
  (<| (times +100)
      (do @
        [sample gen-ratio
         #let [(^open "&/") &;Codec<Text,Ratio>]]
        (test "Can encode/decode ratios."
              (|> sample &/encode &/decode
                  (case> (#;Right output)
                         (&;r/= sample output)
                         
                         _
                         false))))))
