(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                pipe)
       (data [text "Text/" Monoid<Text>]
             text/format
             [bool "b/" Eq<Bool>]
             [number "f/" Number<Frac>]
             ["&" number/complex]
             (coll [list "List/" Fold<List> Functor<List>])
             [product])
       [math]
       ["R" math/random])
  lux/test)

## Based on org.apache.commons.math4.complex.Complex
## https://github.com/apache/commons-math/blob/master/src/test/java/org/apache/commons/math4/complex/ComplexTest.java

(def: margin-of-error Frac 1.0e-10)

(def: (within? margin standard value)
  (-> Frac &;Complex &;Complex Bool)
  (let [real-dist (f/abs (f.- (get@ #&;real standard)
                              (get@ #&;real value)))
        imgn-dist (f/abs (f.- (get@ #&;imaginary standard)
                              (get@ #&;imaginary value)))]
    (and (f.< margin real-dist)
         (f.< margin imgn-dist))))

(def: gen-dim
  (R;Random Frac)
  (do R;Monad<Random>
    [factor (|> R;nat (:: @ map (|>. (n.% +1000) (n.max +1))))
     measure (|> R;frac (R;filter (f.> 0.0)))]
    (wrap (f.* (|> factor nat-to-int int-to-frac)
               measure))))

(def: gen-complex
  (R;Random &;Complex)
  (do R;Monad<Random>
    [real gen-dim
     imaginary gen-dim]
    (wrap (&;complex real imaginary))))

(context: "Construction"
  [real gen-dim
   imaginary gen-dim]
  ($_ seq
      (test "Can build and tear apart complex numbers"
            (let [r+i (&;complex real imaginary)]
              (and (f.= real (get@ #&;real r+i))
                   (f.= imaginary (get@ #&;imaginary r+i)))))

      (test "If either the real part or the imaginary part is NaN, the composite is NaN."
            (and (&;not-a-number? (&;complex number;not-a-number imaginary))
                 (&;not-a-number? (&;complex real number;not-a-number))))
      ))

(context: "Absolute value"
  [real gen-dim
   imaginary gen-dim]
  ($_ seq
      (test "Absolute value of complex >= absolute value of any of the parts."
            (let [r+i (&;complex real imaginary)
                  abs (get@ #&;real (&;c.abs r+i))]
              (and (f.>= (f/abs real) abs)
                   (f.>= (f/abs imaginary) abs))))

      (test "The absolute value of a complex number involving a NaN on either dimension, results in a NaN value."
            (and (number;not-a-number? (get@ #&;real (&;c.abs (&;complex number;not-a-number imaginary))))
                 (number;not-a-number? (get@ #&;real (&;c.abs (&;complex real number;not-a-number))))))

      (test "The absolute value of a complex number involving an infinity on either dimension, results in an infinite value."
            (and (f.= number;positive-infinity (get@ #&;real (&;c.abs (&;complex number;positive-infinity imaginary))))
                 (f.= number;positive-infinity (get@ #&;real (&;c.abs (&;complex real number;positive-infinity))))
                 (f.= number;positive-infinity (get@ #&;real (&;c.abs (&;complex number;negative-infinity imaginary))))
                 (f.= number;positive-infinity (get@ #&;real (&;c.abs (&;complex real number;negative-infinity))))))
      ))

(context: "Addidion, substraction, multiplication and division"
  [x gen-complex
   y gen-complex
   factor gen-dim]
  ($_ seq
      (test "Adding 2 complex numbers is the same as adding their parts."
            (let [z (&;c.+ y x)]
              (and (&;c.= z
                          (&;complex (f.+ (get@ #&;real y)
                                          (get@ #&;real x))
                                     (f.+ (get@ #&;imaginary y)
                                          (get@ #&;imaginary x)))))))

      (test "Subtracting 2 complex numbers is the same as adding their parts."
            (let [z (&;c.- y x)]
              (and (&;c.= z
                          (&;complex (f.- (get@ #&;real y)
                                          (get@ #&;real x))
                                     (f.- (get@ #&;imaginary y)
                                          (get@ #&;imaginary x)))))))

      (test "Subtraction is the inverse of addition."
            (and (|> x (&;c.+ y) (&;c.- y) (within? margin-of-error x))
                 (|> x (&;c.- y) (&;c.+ y) (within? margin-of-error x))))

      (test "Division is the inverse of multiplication."
            (|> x (&;c.* y) (&;c./ y) (within? margin-of-error x)))

      (test "Scalar division is the inverse of scalar multiplication."
            (|> x (&;c.*' factor) (&;c./' factor) (within? margin-of-error x)))

      (test "If you subtract the remainder, all divisions must be exact."
            (let [rem (&;c.% y x)
                  quotient (|> x (&;c.- rem) (&;c./ y))
                  floored (|> quotient
                              (update@ #&;real math;floor)
                              (update@ #&;imaginary math;floor))
                  (^open "&/") &;Codec<Text,Complex>]
              (within? 0.000000000001
                       x
                       (|> quotient (&;c.* y) (&;c.+ rem)))))
      ))

(context: "Conjugate, reciprocal, signum, negation"
  [x gen-complex]
  ($_ seq
      (test "Conjugate has same real part as original, and opposite of imaginary part."
            (let [cx (&;conjugate x)]
              (and (f.= (get@ #&;real x)
                        (get@ #&;real cx))
                   (f.= (f/negate (get@ #&;imaginary x))
                        (get@ #&;imaginary cx)))))

      (test "The reciprocal functions is its own inverse."
            (|> x &;reciprocal &;reciprocal (within? margin-of-error x)))

      (test "x*(x^-1) = 1"
            (|> x (&;c.* (&;reciprocal x)) (within? margin-of-error &;one)))

      (test "Absolute value of signum is always root2(2), 1 or 0."
            (let [signum-abs (|> x &;c.signum &;c.abs (get@ #&;real))]
              (or (f.= 0.0 signum-abs)
                  (f.= 1.0 signum-abs)
                  (f.= (math;root2 2.0) signum-abs))))

      (test "Negation is its own inverse."
            (let [there (&;c.negate x)
                  back-again (&;c.negate there)]
              (and (not (&;c.= there x))
                   (&;c.= back-again x))))

      (test "Negation doesn't change the absolute value."
            (f.= (get@ #&;real (&;c.abs x))
                 (get@ #&;real (&;c.abs (&;c.negate x)))))
      ))

## ## Don't know how to test complex trigonometry properly.
## (context: "Trigonometry"
##   [x gen-complex]
##   ($_ seq
##       (test "Arc-sine is the inverse of sine."
##             (|> x &;sin &;asin (within? margin-of-error x)))

##       (test "Arc-cosine is the inverse of cosine."
##             (|> x &;cos &;acos (within? margin-of-error x)))

##       (test "Arc-tangent is the inverse of tangent."
##             (|> x &;tan &;atan (within? margin-of-error x))))
##   )

(context: "Power 2 and exponential/logarithm"
  [x gen-complex]
  ($_ seq
      (test "Square root is inverse of power 2.0"
            (|> x (&;pow' 2.0) &;root2 (within? margin-of-error x)))

      (test "Logarithm is inverse of exponentiation."
            (|> x &;log &;exp (within? margin-of-error x)))
      ))

(context: "Complex roots"
  [sample gen-complex
   degree (|> R;nat (:: @ map (|>. (n.max +1) (n.% +5))))]
  (test "Can calculate the N roots for any complex number."
        (|> sample
            (&;nth-roots degree)
            (List/map (&;pow' (|> degree nat-to-int int-to-frac)))
            (list;every? (within? margin-of-error sample)))))

(context: "Codec"
  [sample gen-complex
   #let [(^open "c/") &;Codec<Text,Complex>]]
  (test "Can encode/decode complex numbers."
        (|> sample c/encode c/decode
            (case> (#;Right output)
                   (&;c.= sample output)

                   _
                   false))))
