(;module:
  lux
  (lux [io]
       (control monad
                pipe)
       (data sum
             [text "Text/" Monoid<Text>]
             [number]
             (coll [list])))
  lux/test)

(context: "Sum operations"
  (let [(^open "List/") (list;Eq<List> text;Eq<Text>)]
    ($_ seq
        (test "Can inject values into Either."
              (and (|> (left "Hello") (case> (+0 "Hello") true _ false))
                   (|> (right "World") (case> (+1 "World") true _ false))))

        (test "Can discriminate eithers based on their cases."
              (let [[_lefts _rights] (partition (: (List (| Text Text))
                                                   (list (+0 "0") (+1 "1") (+0 "2"))))]
                (and (List/= _lefts
                             (lefts (: (List (| Text Text))
                                       (list (+0 "0") (+1 "1") (+0 "2")))))

                     (List/= _rights
                             (rights (: (List (| Text Text))
                                        (list (+0 "0") (+1 "1") (+0 "2"))))))))

        (test "Can apply a function to an Either value depending on the case."
              (and (i.= 10 (either (function [_] 10)
                                   (function [_] 20)
                                   (: (| Text Text) (+0 ""))))
                   (i.= 20 (either (function [_] 10)
                                   (function [_] 20)
                                   (: (| Text Text) (+1 ""))))))
        )))
