(.module:
  lux
  (lux [io]
       (control [monad (#+ do Monad)]
                pipe)
       (data ["&" ident]
             [text "text/" Equivalence<Text>]
             text/format)
       ["r" math/random])
  lux/test)

(def: (gen-part size)
  (-> Nat (r.Random Text))
  (|> (r.unicode size) (r.filter (|>> (text.contains? ".") not))))

(context: "Idents"
  (<| (times +100)
      (do @
        [## First Ident
         sizeM1 (|> r.nat (:: @ map (n/% +100)))
         sizeN1 (|> r.nat (:: @ map (|>> (n/% +100) (n/max +1))))
         module1 (gen-part sizeM1)
         name1 (gen-part sizeN1)
         #let [ident1 [module1 name1]]
         ## Second Ident
         sizeM2 (|> r.nat (:: @ map (n/% +100)))
         sizeN2 (|> r.nat (:: @ map (|>> (n/% +100) (n/max +1))))
         module2 (gen-part sizeM2)
         name2 (gen-part sizeN2)
         #let [ident2 [module2 name2]]
         #let [(^open "&/") &.Equivalence<Ident>
               (^open "&/") &.Codec<Text,Ident>]]
        ($_ seq
            (test "Can get the module & name parts of an ident."
                  (and (is? module1 (&.module ident1))
                       (is? name1 (&.name ident1))))

            (test "Can compare idents for equivalence."
                  (and (&/= ident1 ident1)
                       (if (&/= ident1 ident2)
                         (and (text/= module1 module2)
                              (text/= name1 name2))
                         (or (not (text/= module1 module2))
                             (not (text/= name1 name2))))))

            (test "Can encode idents as text."
                  (|> ident1
                      &/encode &/decode
                      (case> (#.Right dec-ident) (&/= ident1 dec-ident)
                             _ false)))

            (test "Encoding an ident without a module component results in text equal to the name of the ident."
                  (if (text.empty? module1)
                    (text/= name1 (&/encode ident1))
                    true))
            ))))

(context: "Ident-related macros."
  (let [(^open "&/") &.Equivalence<Ident>]
    ($_ seq
        (test "Can obtain Ident from symbol."
              (and (&/= ["lux" "yolo"] (ident-for .yolo))
                   (&/= ["test/lux/data/ident" "yolo"] (ident-for ..yolo))
                   (&/= ["" "yolo"] (ident-for yolo))
                   (&/= ["lux/test" "yolo"] (ident-for lux/test.yolo))))
        
        (test "Can obtain Ident from tag."
              (and (&/= ["lux" "yolo"] (ident-for #.yolo))
                   (&/= ["test/lux/data/ident" "yolo"] (ident-for #..yolo))
                   (&/= ["" "yolo"] (ident-for #yolo))
                   (&/= ["lux/test" "yolo"] (ident-for #lux/test.yolo)))))))
