(;module:
  lux
  (lux [io]
       (control ["M" monad #+ do Monad]
                pipe)
       (data ["&" ident]
             [text "Text/" Eq<Text>]
             text/format)
       ["r" math/random])
  lux/test)

(def: (gen-part size)
  (-> Nat (r;Random Text))
  (|> (r;text size) (r;filter (. not (text;contains? ";")))))

(context: "Idents"
  [## First Ident
   sizeM1 (|> r;nat (:: @ map (n.% +100)))
   sizeN1 (|> r;nat (:: @ map (|>. (n.% +100) (n.max +1))))
   module1 (gen-part sizeM1)
   name1 (gen-part sizeN1)
   #let [ident1 [module1 name1]]
   ## Second Ident
   sizeM2 (|> r;nat (:: @ map (n.% +100)))
   sizeN2 (|> r;nat (:: @ map (|>. (n.% +100) (n.max +1))))
   module2 (gen-part sizeM2)
   name2 (gen-part sizeN2)
   #let [ident2 [module2 name2]]
   #let [(^open "&/") &;Eq<Ident>
         (^open "&/") &;Codec<Text,Ident>]]
  ($_ seq
      (test "Can get the module & name parts of an ident."
            (and (is module1 (&;module ident1))
                 (is name1 (&;name ident1))))

      (test "Can compare idents for equality."
            (and (&/= ident1 ident1)
                 (if (&/= ident1 ident2)
                   (and (Text/= module1 module2)
                        (Text/= name1 name2))
                   (or (not (Text/= module1 module2))
                       (not (Text/= name1 name2))))))

      (test "Can encode idents as text."
            (|> ident1
                &/encode &/decode
                (case> (#;Right dec-ident) (&/= ident1 dec-ident)
                       _ false)))

      (test "Encoding an ident without a module component results in text equal to the name of the ident."
            (if (text;empty? module1)
              (Text/= name1 (&/encode ident1))
              true))
      ))

(context: "Ident-related macros."
  (let [(^open "&/") &;Eq<Ident>]
    ($_ seq
        (test "Can obtain Ident from symbol."
              (and (&/= ["lux" "yolo"] (ident-for ;yolo))
                   (&/= ["test/lux/data/ident" "yolo"] (ident-for ;;yolo))
                   (&/= ["" "yolo"] (ident-for yolo))
                   (&/= ["lux/test" "yolo"] (ident-for lux/test;yolo))))
        
        (test "Can obtain Ident from tag."
              (and (&/= ["lux" "yolo"] (ident-for #;yolo))
                   (&/= ["test/lux/data/ident" "yolo"] (ident-for #;;yolo))
                   (&/= ["" "yolo"] (ident-for #yolo))
                   (&/= ["lux/test" "yolo"] (ident-for #lux/test;yolo)))))))
