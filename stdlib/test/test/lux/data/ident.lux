##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data ["&" ident]
             [text "Text/" Eq<Text>]
             text/format)
       (math ["R" random])
       pipe)
  lux/test)

(def: (gen-part size)
  (-> Nat (R;Random Text))
  (|> (R;text size) (R;filter (. not (text;contains? ";")))))

(test: "Idents"
  [## First Ident
   sizeM1 (|> R;nat (:: @ map (n.% +100)))
   sizeN1 (|> R;nat (:: @ map (|>. (n.% +100) (n.max +1))))
   module1 (gen-part sizeM1)
   name1 (gen-part sizeN1)
   #let [ident1 [module1 name1]]
   ## Second Ident
   sizeM2 (|> R;nat (:: @ map (n.% +100)))
   sizeN2 (|> R;nat (:: @ map (|>. (n.% +100) (n.max +1))))
   module2 (gen-part sizeM2)
   name2 (gen-part sizeN2)
   #let [ident2 [module2 name2]]
   #let [(^open "&/") &;Eq<Ident>
         (^open "&/") &;Codec<Text,Ident>]]
  ($_ seq
      (assert "Can get the module & name parts of an ident."
              (and (is module1 (&;module ident1))
                   (is name1 (&;name ident1))))

      (assert "Can compare idents for equality."
              (and (&/= ident1 ident1)
                   (if (&/= ident1 ident2)
                     (and (Text/= module1 module2)
                          (Text/= name1 name2))
                     (or (not (Text/= module1 module2))
                         (not (Text/= name1 name2))))))

      (assert "Can encode idents as text."
              (|> ident1
                  &/encode &/decode
                  (case> (#;Right dec-ident) (&/= ident1 dec-ident)
                         _ false)))

      (assert "Encoding an ident without a module component results in text equal to the name of the ident."
              (if (text;empty? module1)
                (Text/= name1 (&/encode ident1))
                true))
      ))

(test: "Ident-related macros."
  (let [(^open "&/") &;Eq<Ident>]
    ($_ seq
        (assert "Can obtain Ident from symbol."
                (and (&/= ["lux" "yolo"] (ident-for ;yolo))
                     (&/= ["test/lux/data/ident" "yolo"] (ident-for ;;yolo))
                     (&/= ["" "yolo"] (ident-for yolo))
                     (&/= ["lux/test" "yolo"] (ident-for lux/test;yolo))))
        
        (assert "Can obtain Ident from tag."
                (and (&/= ["lux" "yolo"] (ident-for #;yolo))
                     (&/= ["test/lux/data/ident" "yolo"] (ident-for #;;yolo))
                     (&/= ["" "yolo"] (ident-for #yolo))
                     (&/= ["lux/test" "yolo"] (ident-for #lux/test;yolo)))))))
