(.module:
  [lux #*
   ["&" io]
   [control
    ["M" monad (#+ do Monad)]]
   [data
    [number]
    [text ("text/." equivalence)
     format]]]
  lux/test)

(context: "I/O"
  ($_ seq
      (test "" (text/= "YOLO" (&.run (&.io "YOLO"))))
      (test "" (i/= +11 (&.run (:: &.functor map inc (&.io +10)))))
      (test "" (i/= +10 (&.run (:: &.monad wrap +10))))
      (test "" (i/= +30 (&.run (let [(^open "&/.") &.apply
                                     (^open "&/.") &.monad]
                                 (&/apply (&/wrap (i/+ +10)) (&/wrap +20))))))
      (test "" (i/= +30 (&.run (do &.monad
                                 [f (wrap i/+)
                                  x (wrap +10)
                                  y (wrap +20)]
                                 (wrap (f x y))))))))
