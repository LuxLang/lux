(;module:
  lux
  (lux ["&" io]
       (control monad)
       (data [text "Text/" Monoid<Text> Eq<Text>]
             text/format
             [number]))
  lux/test)

(test: "I/O"
  ($_ seq
      (assert "" (Text/= "YOLO" (&;run (&;io "YOLO"))))
      (assert "" (i.= 11 (&;run (:: &;Functor<IO> map i.inc (&;io 10)))))
      (assert "" (i.= 10 (&;run (:: &;Applicative<IO> wrap 10))))
      (assert "" (i.= 30 (&;run (let [(^open "&/") &;Applicative<IO>]
                                  (&/apply (&/wrap (i.+ 10)) (&/wrap 20))))))
      (assert "" (i.= 30 (&;run (do &;Monad<IO>
                                  [f (wrap i.+)
                                   x (wrap 10)
                                   y (wrap 20)]
                                  (wrap (f x y))))))))
