(.module:
  lux
  (lux ["&" io]
       (control ["M" monad #+ do Monad])
       (data [text "Text/" Monoid<Text> Equivalence<Text>]
             text/format
             [number]))
  lux/test)

(context: "I/O"
  ($_ seq
      (test "" (Text/= "YOLO" (&.run (&.io "YOLO"))))
      (test "" (i/= 11 (&.run (:: &.Functor<IO> map inc (&.io 10)))))
      (test "" (i/= 10 (&.run (:: &.Monad<IO> wrap 10))))
      (test "" (i/= 30 (&.run (let [(^open "&/") &.Apply<IO>
                                    (^open "&/") &.Monad<IO>]
                                (&/apply (&/wrap (i/+ 10)) (&/wrap 20))))))
      (test "" (i/= 30 (&.run (do &.Monad<IO>
                                [f (wrap i/+)
                                 x (wrap 10)
                                 y (wrap 20)]
                                (wrap (f x y))))))))
