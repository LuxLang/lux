(.module:
  [lux #*
   ["." io (#+ IO)]
   [control
    [monad (#+ do)]
    [security
     ["." taint (#+ Dirty)]]]
   [concurrency
    ["." promise]]
   [data
    ["." error (#+ Error)]
    ["." number]
    ["." text
     format]]
   [time
    ["." instant]
    ["." duration]]
   [world
    ["@" file (#+ File)]
    ["." binary (#+ Binary)]]
   [math
    ["r" random]]]
  lux/test
  [//
   ["_." binary]])

(def: truncate-millis
  (|>> (i// +1_000) (i/* +1_000)))

(context: "File system."
  (do @
    [file-size (|> r.nat (:: @ map (|>> (n/% 100) (n/max 10))))
     dataL (_binary.binary file-size)
     dataR (_binary.binary file-size)
     last-modified (|> r.int (:: @ map (|>> (:: number.Number<Int> abs)
                                            truncate-millis
                                            duration.from-millis
                                            instant.absolute)))]
    ($_ seq
        (wrap (do promise.Monad<Promise>
                [#let [file "temp_file_0"]
                 result (promise.future
                         (do io.Monad<Process>
                           [#let [check-existence! (: (IO (Error Bit))
                                                      (@.exists? io.Monad<IO> @.System<IO> file))]
                            pre! check-existence!
                            _ (:: @.System<IO> write dataL file)
                            post! check-existence!
                            _ (:: @.System<IO> delete file)
                            remains? check-existence!]
                           (wrap (and (not pre!)
                                      post!
                                      (not remains?)))))]
                (assert "Can create/delete files."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file "temp_file_1"]
                 result (promise.future
                         (do io.Monad<Process>
                           [_ (:: @.System<IO> write dataL file)
                            output (:: @.System<IO> read file)
                            _ (:: @.System<IO> delete file)]
                           (wrap (:: binary.Equivalence<Binary> = dataL (taint.trust output)))))]
                (assert "Can write/read files."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file "temp_file_2"]
                 result (promise.future
                         (do io.Monad<Process>
                           [_ (:: @.System<IO> write dataL file)
                            read-size (:: @.System<IO> size file)
                            _ (:: @.System<IO> delete file)]
                           (wrap (n/= file-size read-size))))]
                (assert "Can read file size."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file "temp_file_3"]
                 result (promise.future
                         (do io.Monad<Process>
                           [_ (:: @.System<IO> write dataL file)
                            _ (:: @.System<IO> append dataR file)
                            output (:: @.System<IO> read file)
                            read-size (:: @.System<IO> size file)
                            _ (:: @.System<IO> delete file)]
                           (wrap (and (n/= (n/* 2 file-size) read-size)
                                      (:: binary.Equivalence<Binary> =
                                          dataL
                                          (error.assume (binary.slice 0 (dec file-size)
                                                                      (taint.trust output))))
                                      (:: binary.Equivalence<Binary> =
                                          dataR
                                          (error.assume (binary.slice file-size (dec read-size)
                                                                      (taint.trust output))))))))]
                (assert "Can append to files."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [dir "temp_dir_4"]
                 result (promise.future
                         (do io.Monad<Process>
                           [#let [check-existence! (: (IO (Error Bit))
                                                      (@.exists? io.Monad<IO> @.System<IO> dir))]
                            pre! check-existence!
                            _ (:: @.System<IO> make-directory dir)
                            post! check-existence!
                            _ (:: @.System<IO> delete dir)
                            remains? check-existence!]
                           (wrap (and (not pre!)
                                      post!
                                      (not remains?)))))]
                (assert "Can create/delete directories."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file "temp_file_5"
                       dir "temp_dir_5"]
                 result (promise.future
                         (do io.Monad<Process>
                           [_ (:: @.System<IO> write dataL file)
                            file-is-file (:: @.System<IO> file? file)
                            file-is-directory (:: @.System<IO> directory? file)
                            _ (:: @.System<IO> delete file)
                            _ (:: @.System<IO> make-directory dir)
                            directory-is-file (:: @.System<IO> file? dir)
                            directory-is-directory (:: @.System<IO> directory? dir)
                            _ (:: @.System<IO> delete dir)]
                           (wrap (and file-is-file (not file-is-directory)
                                      (not directory-is-file) directory-is-directory))))]
                (assert "Can differentiate files from directories."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file "temp_file_6"
                       dir "temp_dir_6"]
                 result (promise.future
                         (do io.Monad<Process>
                           [_ (:: @.System<IO> make-directory dir)
                            #let [file' (format dir "/" file)]
                            _ (:: @.System<IO> write dataL file')
                            read-size (:: @.System<IO> size file')
                            _ (:: @.System<IO> delete file')
                            _ (:: @.System<IO> delete dir)]
                           (wrap (n/= file-size read-size))))]
                (assert "Can create files inside of directories."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file "temp_file_7"
                       dir "temp_dir_7"]
                 result (promise.future
                         (do io.Monad<Process>
                           [_ (:: @.System<IO> make-directory dir)
                            #let [file' (format dir "/" file)]
                            _ (:: @.System<IO> write dataL file')
                            children (:: @.System<IO> files dir)
                            _ (:: @.System<IO> delete file')
                            _ (:: @.System<IO> delete dir)]
                           (wrap (case children
                                   (^ (list child))
                                   (text.ends-with? file' child)

                                   _
                                   #0))))]
                (assert "Can list files inside a directory."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file "temp_file_8"]
                 result (promise.future
                         (do io.Monad<Process>
                           [_ (:: @.System<IO> write dataL file)
                            _ (:: @.System<IO> modify last-modified file)
                            time-read (:: @.System<IO> last-modified file)
                            _ (:: @.System<IO> delete file)]
                           (wrap (:: instant.Equivalence<Instant> = last-modified time-read))))]
                (assert "Can change the time of last modification."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file0 (format "temp_file_9+0")
                       file1 (format "temp_file_9+1")]
                 result (promise.future
                         (do io.Monad<Process>
                           [#let [check-existence! (: (-> File (IO (Error Bit)))
                                                      (@.exists? io.Monad<IO> @.System<IO>))]
                            _ (:: @.System<IO> write dataL file0)
                            pre! (check-existence! file0)
                            _ (:: @.System<IO> move file1 file0)
                            post! (check-existence! file0)
                            confirmed? (check-existence! file1)
                            _ (:: @.System<IO> delete file1)]
                           (wrap (and pre!
                                      (not post!)
                                      confirmed?))))]
                (assert "Can move a file from one path to another."
                        (error.default #0 result))))
        )))
