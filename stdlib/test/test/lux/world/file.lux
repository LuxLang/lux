(.module:
  [lux #*
   [io]
   [control
    [monad (#+ do)]]
   [concurrency
    [promise]]
   [data
    [error]
    [number]
    ["." text
     format]]
   [time
    [instant]
    [duration]]
   [world
    ["@" file]
    [binary]]
   [math
    ["r" random]]]
  lux/test
  [//
   ["_." binary]])

(def: truncate-millis
  (|>> (i// +1_000) (i/* +1_000)))

(context: "File system."
  (do @
    [file-size (|> r.nat (:: @ map (|>> (n/% |100) (n/max |10))))
     dataL (_binary.binary file-size)
     dataR (_binary.binary file-size)
     code r.nat
     last-modified (|> r.int (:: @ map (|>> (:: number.Number<Int> abs)
                                            truncate-millis
                                            duration.from-millis
                                            instant.absolute)))]
    ($_ seq
        (wrap (do promise.Monad<Promise>
                [#let [file (format "temp_file_" (%n (n/+ |0 code)))]
                 result (promise.future
                         (do (:: @.JVM@System &monad)
                           [pre! (@.exists? @.JVM@System file)
                            _ (:: @.JVM@System write dataL file)
                            post! (@.exists? @.JVM@System file)
                            _ (:: @.JVM@System delete file)
                            remains? (@.exists? @.JVM@System file)]
                           (wrap (and (not pre!) post!
                                      (not remains?)))))]
                (assert "Can create/delete files."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file (format "temp_file_" (%n (n/+ |1 code)))]
                 result (promise.future
                         (do (:: @.JVM@System &monad)
                           [_ (:: @.JVM@System write dataL file)
                            output (:: @.JVM@System read file)
                            _ (:: @.JVM@System delete file)]
                           (wrap (:: binary.Equivalence<Binary> = dataL output))))]
                (assert "Can write/read files."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file (format "temp_file_" (%n (n/+ |2 code)))]
                 result (promise.future
                         (do (:: @.JVM@System &monad)
                           [_ (:: @.JVM@System write dataL file)
                            read-size (:: @.JVM@System size file)
                            _ (:: @.JVM@System delete file)]
                           (wrap (n/= file-size read-size))))]
                (assert "Can read file size."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file (format "temp_file_" (%n (n/+ |3 code)))]
                 result (promise.future
                         (do (:: @.JVM@System &monad)
                           [_ (:: @.JVM@System write dataL file)
                            _ (:: @.JVM@System append dataR file)
                            output (:: @.JVM@System read file)
                            read-size (:: @.JVM@System size file)
                            _ (:: @.JVM@System delete file)]
                           (wrap (and (n/= (n/* |2 file-size) read-size)
                                      (:: binary.Equivalence<Binary> = dataL (error.assume (binary.slice |0 (dec file-size) output)))
                                      (:: binary.Equivalence<Binary> = dataR (error.assume (binary.slice file-size (dec read-size) output)))))))]
                (assert "Can append to files."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [dir (format "temp_dir_" (%n (n/+ |4 code)))]
                 result (promise.future
                         (do (:: @.JVM@System &monad)
                           [pre! (@.exists? @.JVM@System dir)
                            _ (:: @.JVM@System make-directory dir)
                            post! (@.exists? @.JVM@System dir)
                            _ (:: @.JVM@System delete dir)
                            remains? (@.exists? @.JVM@System dir)]
                           (wrap (and (not pre!) post!
                                      (not remains?)))))]
                (assert "Can create/delete directories."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file (format "temp_file_" (%n (n/+ |5 code)))
                       dir (format "temp_dir_" (%n (n/+ |5 code)))]
                 result (promise.future
                         (do (:: @.JVM@System &monad)
                           [_ (:: @.JVM@System write dataL file)
                            file-is-file (:: @.JVM@System file? file)
                            file-is-directory (:: @.JVM@System directory? file)
                            _ (:: @.JVM@System delete file)
                            _ (:: @.JVM@System make-directory dir)
                            directory-is-file (:: @.JVM@System file? dir)
                            directory-is-directory (:: @.JVM@System directory? dir)
                            _ (:: @.JVM@System delete dir)]
                           (wrap (and file-is-file (not file-is-directory)
                                      (not directory-is-file) directory-is-directory))))]
                (assert "Can differentiate files from directories."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file (format "temp_file_" (%n (n/+ |6 code)))
                       dir (format "temp_dir_" (%n (n/+ |6 code)))]
                 result (promise.future
                         (do (:: @.JVM@System &monad)
                           [_ (:: @.JVM@System make-directory dir)
                            #let [file' (format dir "/" file)]
                            _ (:: @.JVM@System write dataL file')
                            read-size (:: @.JVM@System size file')
                            _ (:: @.JVM@System delete file')
                            _ (:: @.JVM@System delete dir)]
                           (wrap (n/= file-size read-size))))]
                (assert "Can create files inside of directories."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file (format "temp_file_" (%n (n/+ |7 code)))
                       dir (format "temp_dir_" (%n (n/+ |7 code)))]
                 result (promise.future
                         (do (:: @.JVM@System &monad)
                           [_ (:: @.JVM@System make-directory dir)
                            #let [file' (format dir "/" file)]
                            _ (:: @.JVM@System write dataL file')
                            children (:: @.JVM@System files dir)
                            _ (:: @.JVM@System delete file')
                            _ (:: @.JVM@System delete dir)]
                           (wrap (case children
                                   (^ (list child))
                                   (text.ends-with? file' child)

                                   _
                                   #0))))]
                (assert "Can list files inside a directory."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file (format "temp_file_" (%n (n/+ |8 code)))]
                 result (promise.future
                         (do (:: @.JVM@System &monad)
                           [_ (:: @.JVM@System write dataL file)
                            _ (:: @.JVM@System modify last-modified file)
                            time-read (:: @.JVM@System last-modified file)
                            _ (:: @.JVM@System delete file)]
                           (wrap (:: instant.Equivalence<Instant> = last-modified time-read))))]
                (assert "Can change the time of last modification."
                        (error.default #0 result))))
        (wrap (do promise.Monad<Promise>
                [#let [file0 (format "temp_file_" (%n (n/+ |9 code)) "+0")
                       file1 (format "temp_file_" (%n (n/+ |9 code)) "+1")]
                 result (promise.future
                         (do (:: @.JVM@System &monad)
                           [_ (:: @.JVM@System write dataL file0)
                            pre! (@.exists? @.JVM@System file0)
                            _ (:: @.JVM@System move file1 file0)
                            post! (@.exists? @.JVM@System file0)
                            confirmed? (@.exists? @.JVM@System file1)
                            _ (:: @.JVM@System delete file1)]
                           (wrap (and pre! (not post!) confirmed?))))]
                (assert "Can move a file from one path to another."
                        (error.default #0 result))))
        )))
