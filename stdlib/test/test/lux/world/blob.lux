(.module:
  lux
  (lux [io]
       (control [monad #+ do]
                [pipe])
       (data [bit]
             [number]
             ["e" error]
             (coll [list]))
       (world ["/" blob])
       ["r" math/random])
  lux/test
  (test (lux (control ["_." eq]))))

(def: (succeed result)
  (-> (e.Error Bool) Bool)
  (case result
    (#e.Error _)
    false

    (#e.Success output)
    output))

(def: #export (blob size)
  (-> Nat (r.Random /.Blob))
  (let [output (/.create size)]
    (loop [idx +0]
      (if (n/< size idx)
        (do r.Monad<Random>
          [byte r.nat]
          (exec (e.assume (/.write-8 idx byte output))
            (recur (n/inc idx))))
        (:: r.Monad<Random> wrap output)))))

(def: (bits-io bytes read write value)
  (-> Nat (-> Nat /.Blob (e.Error Nat)) (-> Nat Nat /.Blob (e.Error Top)) Nat Bool)
  (let [blob (/.create +8)
        bits (n/* +8 bytes)
        capped-value (|> +1 (bit.left-shift bits) n/dec (bit.and value))]
    (succeed
     (do e.Monad<Error>
       [_ (write +0 value blob)
        output (read +0 blob)]
       (wrap (n/= capped-value output))))))

(context: "Blob."
  (<| (times +100)
      (do @
        [#let [gen-size (|> r.nat (:: @ map (|>> (n/% +100) (n/max +8))))]
         blob-size gen-size
         random-blob (blob blob-size)
         value r.nat
         #let [gen-idx (|> r.nat (:: @ map (n/% blob-size)))]
         [from to] (r.seq gen-idx gen-idx)
         #let [[from to] [(n/min from to) (n/max from to)]]]
        ($_ seq
            ## TODO: De-comment...
            ## (_eq.spec /.Eq<Blob> (:: @ map blob gen-size))
            (test "Can get size of blob."
                  (|> random-blob /.size (n/= blob-size)))
            (test "Can read/write 8-bit values."
                  (bits-io +1 /.read-8 /.write-8 value))
            (test "Can read/write 16-bit values."
                  (bits-io +2 /.read-16 /.write-16 value))
            (test "Can read/write 32-bit values."
                  (bits-io +4 /.read-32 /.write-32 value))
            (test "Can read/write 64-bit values."
                  (bits-io +8 /.read-64 /.write-64 value))
            (test "Can slice blobs."
                  (let [slice-size (|> to (n/- from) n/inc)
                        random-slice (e.assume (/.slice from to random-blob))
                        idxs (list.n/range +0 (n/dec slice-size))
                        reader (function (_ blob idx) (/.read-8 idx blob))]
                    (and (n/= slice-size (/.size random-slice))
                         (case [(monad.map e.Monad<Error> (reader random-slice) idxs)
                                (monad.map e.Monad<Error> (|>> (n/+ from) (reader random-blob)) idxs)]
                           [(#e.Success slice-vals) (#e.Success blob-vals)]
                           (:: (list.Eq<List> number.Eq<Nat>) = slice-vals blob-vals)

                           _
                           false))))
            ))))
