(.module:
  [lux #*
   [control
    ["." monad (#+ do)]]
   [data
    ["e" error]
    ["." number
     ["." i64]]
    [collection
     ["." list]]]
   [world
    ["/" binary]]
   [math
    ["r" random]]]
  lux/test
  [test
   [lux
    [control
     ["_eq" equivalence]]]])

(def: (succeed result)
  (-> (e.Error Bit) Bit)
  (case result
    (#e.Error _)
    #0

    (#e.Success output)
    output))

(def: #export (binary size)
  (-> Nat (r.Random /.Binary))
  (let [output (/.create size)]
    (loop [idx 0]
      (if (n/< size idx)
        (do r.Monad<Random>
          [byte r.nat]
          (exec (e.assume (/.write/8 idx byte output))
            (recur (inc idx))))
        (:: r.Monad<Random> wrap output)))))

(def: (bits-io bytes read write value)
  (-> Nat (-> Nat /.Binary (e.Error Nat)) (-> Nat Nat /.Binary (e.Error Any)) Nat Bit)
  (let [binary (/.create 8)
        bits (n/* 8 bytes)
        capped-value (|> 1 (i64.left-shift bits) dec (i64.and value))]
    (succeed
     (do e.Monad<Error>
       [_ (write 0 value binary)
        output (read 0 binary)]
       (wrap (n/= capped-value output))))))

(context: "Binary."
  (<| (times 100)
      (do @
        [#let [gen-size (|> r.nat (:: @ map (|>> (n/% 100) (n/max 8))))]
         binary-size gen-size
         random-binary (binary binary-size)
         value r.nat
         #let [gen-idx (|> r.nat (:: @ map (n/% binary-size)))]
         [from to] (r.and gen-idx gen-idx)
         #let [[from to] [(n/min from to) (n/max from to)]]]
        ($_ seq
            ## TODO: De-comment...
            ## (_eq.spec /.Equivalence<Binary> (:: @ map binary gen-size))
            (test "Can get size of binary."
                  (|> random-binary /.size (n/= binary-size)))
            (test "Can read/write 8-bit values."
                  (bits-io 1 /.read/8 /.write/8 value))
            (test "Can read/write 16-bit values."
                  (bits-io 2 /.read/16 /.write/16 value))
            (test "Can read/write 32-bit values."
                  (bits-io 4 /.read/32 /.write/32 value))
            (test "Can read/write 64-bit values."
                  (bits-io 8 /.read/64 /.write/64 value))
            (test "Can slice binaries."
                  (let [slice-size (|> to (n/- from) inc)
                        random-slice (e.assume (/.slice from to random-binary))
                        idxs (list.n/range 0 (dec slice-size))
                        reader (function (_ binary idx) (/.read/8 idx binary))]
                    (and (n/= slice-size (/.size random-slice))
                         (case [(monad.map e.Monad<Error> (reader random-slice) idxs)
                                (monad.map e.Monad<Error> (|>> (n/+ from) (reader random-binary)) idxs)]
                           [(#e.Success slice-vals) (#e.Success binary-vals)]
                           (:: (list.Equivalence<List> number.Equivalence<Nat>) = slice-vals binary-vals)

                           _
                           #0))))
            ))))
