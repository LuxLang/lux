(.module:
  [lux #*
   [control
    [monad (#+ do)]]
   [concurrency
    ["P" promise]
    ["T" task]]
   [data
    ["E" error]
    ["." text
     format]]
   [world
    ["." binary]
    ["." net
     ["@" udp]]]
   [math
    ["r" random]]]
  lux/test
  [///
   ["_." binary]])

(def: localhost net.Address "127.0.0.1")
(def: port
  (r.Random net.Port)
  (|> r.nat
      (:: r.Monad<Random> map
          (|>> (n/% +1000)
               (n/+ +8000)))))

(context: "UDP networking."
  (do @
    [port ..port
     size (|> r.nat (:: @ map (|>> (n/% +100) (n/max +10))))
     from (_binary.binary size)
     to (_binary.binary size)
     #let [temp (binary.create size)]]
    ($_ seq
        (wrap (do P.Monad<Promise>
                [result (do T.Monad<Task>
                          [server (@.server port)
                           client (@.client [])
                           ####################
                           _ (@.write localhost port from +0 size client)
                           [bytes-from from-address from-port] (@.read temp +0 size server)
                           #let [from-worked? (and (n/= size bytes-from)
                                                   (:: binary.Equivalence<Binary> = from temp))]
                           ####################
                           _ (@.write from-address from-port to +0 size server)
                           [bytes-to to-address to-port] (@.read temp +0 size client)
                           #let [to-worked? (and (n/= size bytes-to)
                                                 (:: binary.Equivalence<Binary> = to temp)
                                                 (n/= port to-port))]
                           ####################
                           _ (@.close client)
                           _ (@.close server)]
                          (wrap (and from-worked?
                                     to-worked?)))]
                (assert "Can communicate between client and server."
                        (E.default #0 result))))
        )))
