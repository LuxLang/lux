(.module:
  lux
  (lux [io]
       (control [monad #+ do]
                ["ex" exception #+ exception:])
       (concurrency ["P" promise]
                    ["T" task]
                    [frp "frp/" Functor<Channel>])
       (data ["E" error]
             [text]
             text/format)
       (world [blob]
              [net]
              (net ["@" tcp]))
       ["r" math/random])
  lux/test
  (/// ["_." blob]))

(def: localhost net.Address "127.0.0.1")
(def: port
  (r.Random net.Port)
  (|> r.nat
      (:: r.Monad<Random> map
          (|>> (n/% +1000)
               (n/+ +8000)))))

(context: "TCP networking."
  (do @
    [port ..port
     size (|> r.nat (:: @ map (|>> (n/% +100) (n/max +10))))
     from (_blob.blob size)
     to (_blob.blob size)
     #let [temp-from (blob.create size)
           temp-to (blob.create size)]]
    ($_ seq
        (wrap (do P.Monad<Promise>
                [result (do T.Monad<Task>
                          [[server-close server] (@.server port)
                           #let [from-worked? (: (T.Task Bool)
                                                 (P.promise #.Nil))
                                 _ (frp/map (function [socket]
                                              (do @
                                                [bytes-from (@.read temp-from +0 size socket)
                                                 #let [_ (io.run (P.resolve (#E.Success (and (n/= size bytes-from)
                                                                                             (:: blob.Eq<Blob> = from temp-from)))
                                                                            from-worked?))]]
                                                (@.write to +0 size socket)))
                                            server)]
                           
                           client (@.client localhost port)
                           _ (@.write from +0 size client)
                           from-worked? from-worked?
                           ####################
                           bytes-to (@.read temp-to +0 size client)
                           #let [to-worked? (and (n/= size bytes-to)
                                                 (:: blob.Eq<Blob> = to temp-to))]
                           ####################
                           _ (@.close client)
                           _ (T.from-promise (P.future (P.resolve [] server-close)))]
                          (wrap (and from-worked?
                                     to-worked?)))]
                (assert "Can communicate between client and server."
                        (E.default false result))))
        )))
