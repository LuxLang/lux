(.module:
  [lux #- primitive]
  (lux [io]
       (control [monad #+ do]
                pipe)
       (data [error]
             text/format)
       [language]
       (language [".L" extension]
                 ["///." compiler]
                 [".L" analysis #+ Analysis]
                 ["//" synthesis #+ Synthesis]
                 (synthesis [".S" expression]))
       ["r" math/random]
       test))

(def: #export primitive
  (r.Random Analysis)
  (do r.Monad<Random>
    [primitive (: (r.Random analysisL.Primitive)
                  ($_ r.alt
                      (wrap [])
                      r.bool
                      r.nat
                      r.int
                      r.rev
                      r.frac
                      (r.unicode +5)))]
    (wrap (#analysisL.Primitive primitive))))

(def: #export (corresponds? analysis synthesis)
  (-> Analysis Synthesis Bool)
  (case [synthesis analysis]
    [(#//.Primitive (#//.Text valueS))
     (#analysisL.Primitive (#analysisL.Unit valueA))]
    (is? valueS (:coerce Text valueA))
    
    [(#//.Primitive (#//.Bool valueS))
     (#analysisL.Primitive (#analysisL.Bool valueA))]
    (is? valueS valueA)
    
    [(#//.Primitive (#//.I64 valueS))
     (#analysisL.Primitive (#analysisL.Nat valueA))]
    (is? valueS (.i64 valueA))
    
    [(#//.Primitive (#//.I64 valueS))
     (#analysisL.Primitive (#analysisL.Int valueA))]
    (is? valueS (.i64 valueA))
    
    [(#//.Primitive (#//.I64 valueS))
     (#analysisL.Primitive (#analysisL.Rev valueA))]
    (is? valueS (.i64 valueA))
    
    [(#//.Primitive (#//.F64 valueS))
     (#analysisL.Primitive (#analysisL.Frac valueA))]
    (is? valueS valueA)
    
    [(#//.Primitive (#//.Text valueS))
     (#analysisL.Primitive (#analysisL.Text valueA))]
    (is? valueS valueA)
    
    _
    false))

(context: "Primitives."
  (<| (times +100)
      (do @
        [%bool% r.bool
         %nat% r.nat
         %int% r.int
         %rev% r.rev
         %frac% r.frac
         %text% (r.unicode +5)]
        (`` ($_ seq
                (~~ (do-template [<desc> <analysis> <synthesis> <sample>]
                      [(test (format "Can synthesize " <desc> ".")
                             (|> (#analysisL.Primitive (<analysis> <sample>))
                                 (expressionS.synthesizer extensionL.empty)
                                 (///compiler.run //.init)
                                 (case> (#error.Success (#//.Primitive (<synthesis> value)))
                                        (is? <sample> value)

                                        _
                                        false)))]

                      ["unit" #analysisL.Unit #//.Text //.unit]
                      ["bool" #analysisL.Bool #//.Bool %bool%]
                      ["nat"  #analysisL.Nat  #//.I64  (.i64 %nat%)]
                      ["int"  #analysisL.Int  #//.I64  (.i64 %int%)]
                      ["rev"  #analysisL.Rev  #//.I64  (.i64 %rev%)]
                      ["frac" #analysisL.Frac #//.F64  %frac%]
                      ["text" #analysisL.Text #//.Text %text%])))))))
