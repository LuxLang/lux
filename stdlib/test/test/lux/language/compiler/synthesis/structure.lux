(.module:
  lux
  (lux [io]
       (control [monad (#+ do)]
                pipe)
       (data [bool ("bool/" Equivalence<Bool>)]
             [product]
             [error]
             (collection [list]))
       (language ["///." compiler]
                 [".L" analysis]
                 ["//" synthesis (#+ Synthesis)]
                 (synthesis [".S" expression])
                 [".L" extension])
       (math ["r" random])
       test)
  [//primitive])

(context: "Variants"
  (<| (times +100)
      (do @
        [size (|> r.nat (:: @ map (|>> (n/% +10) (n/+ +2))))
         tagA (|> r.nat (:: @ map (n/% size)))
         memberA //primitive.primitive]
        ($_ seq
            (test "Can synthesize variants."
                  (|> (analysisL.sum-analysis size tagA memberA)
                      (expressionS.synthesizer extensionL.empty)
                      (///compiler.run //.init)
                      (case> (#error.Success (#//.Structure (#//.Variant [leftsS right?S valueS])))
                             (let [tagS (if right?S (inc leftsS) leftsS)]
                               (and (n/= tagA tagS)
                                    (|> tagS (n/= (dec size)) (bool/= right?S))
                                    (//primitive.corresponds? memberA valueS)))
                             
                             _
                             false)))
            ))))

(context: "Tuples"
  (<| (times +100)
      (do @
        [size (|> r.nat (:: @ map (|>> (n/% +10) (n/max +2))))
         membersA (r.list size //primitive.primitive)]
        ($_ seq
            (test "Can synthesize tuple."
                  (|> (analysisL.product-analysis membersA)
                      (expressionS.synthesizer extensionL.empty)
                      (///compiler.run //.init)
                      (case> (#error.Success (#//.Structure (#//.Tuple membersS)))
                             (and (n/= size (list.size membersS))
                                  (list.every? (product.uncurry //primitive.corresponds?)
                                               (list.zip2 membersA membersS)))

                             _
                             false)))
            ))))
