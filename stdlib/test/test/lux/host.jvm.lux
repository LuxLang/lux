(;module:
  lux
  (lux [io]
       (control monad)
       (data text/format
             [number]
             [product]
             [text "Text/" Eq<Text>])
       ["&" host #+ jvm-import class: interface: object]
       ["R" math/random]
       pipe)
  lux/test)

(jvm-import java.lang.Exception
  (new [String]))

(jvm-import java.lang.Object)

(jvm-import (java.lang.Class a)
  (getName [] String))

(jvm-import java.lang.System
  (#static out java.io.PrintStream)
  (#static currentTimeMillis [] #io long)
  (#static getenv [String] #io #? String))

(class: #final (TestClass A) [Runnable]
  ## Fields
  (#private foo boolean)
  (#private bar A)
  (#private baz java.lang.Object)
  ## Methods
  (#public [] (new [value A]) []
           (exec (:= .foo true)
             (:= .bar value)
             (:= .baz "")
             []))
  (#public (virtual) java.lang.Object
           "")
  (#public #static (static) java.lang.Object
           "")
  (Runnable [] (run) void
            [])
  )

(def: test-runnable
  (object [Runnable]
    []
    (Runnable [] (run) void
              [])))

(interface: TestInterface
  ([] foo [boolean String] void #throws [Exception]))

(test: "Conversions"
  [sample R;int]
  (let% [<int-convs> (do-template [<to> <from> <message>]
                       [(assert <message>
                                (or (|> sample <to> <from> (i.= sample))
                                    (let [capped-sample (|> sample <to> <from>)]
                                      (|> capped-sample <to> <from> (i.= capped-sample)))))]

                       [&;l2b &;b2l "Can succesfully convert to/from byte."]
                       [&;l2s &;s2l "Can succesfully convert to/from short."]
                       [&;l2i &;i2l "Can succesfully convert to/from int."]
                       [&;l2f &;f2l "Can succesfully convert to/from float."]
                       [&;l2d &;d2l "Can succesfully convert to/from double."]
                       [(<| &;i2c &;l2i) (<| &;i2l &;c2i) "Can succesfully convert to/from char."]
                       )]
    ($_ seq
        <int-convs>
        )))

(test: "Miscellaneous"
  ($_ seq
      (assert "Can check if an object is of a certain class."
              (and (&;instance? String "")
                   (not (&;instance? Long ""))
                   (&;instance? Object "")
                   (not (&;instance? Object (&;null)))))

      (assert "Can run code in a \"synchronized\" block."
              (&;synchronized "" true))

      ## (assert "Can safely try risky code."
      ##         (and (case (&;try [])
      ##                (#;Right _) true
      ##                (#;Left _) false)
      ##              (case (&;try (_lux_proc ["jvm" "throw"] [(Exception.new "Uh, oh...")]))
      ##                (#;Right _) false
      ##                (#;Left _) true)))

      (assert "Can access Class instances."
              (Text/= "java.lang.Class" (Class.getName [] (&;class-for java.lang.Class))))

      (assert "Can check if a value is null."
              (and (&;null? (&;null))
                   (not (&;null? ""))))

      (assert "Can safely convert nullable references into Maybe values."
              (and (|> (: (Maybe Object) (&;??? (&;null)))
                       (case> #;None true
                              _ false))
                   (|> (: (Maybe Object) (&;??? ""))
                       (case> (#;Some _) true
                              _ false))))
      ))

(test: "Arrays"
  [size (|> R;nat (:: @ map (|>. (n.% +100) (n.max +1))))
   idx (|> R;nat (:: @ map (n.% size)))
   value R;int]
  ($_ seq
      (assert "Can create arrays of some length."
              (n.= size (&;array-length (&;array Long size))))

      (assert "Can set and get array values."
              (let [arr (&;array Long size)]
                (exec (&;array-store idx value arr)
                  (i.= value (&;array-load idx arr)))))))
