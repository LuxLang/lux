(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                pipe)
       (data text/format
             [number]
             [product]
             [text "text/" Eq<Text>])
       ["&" host #+ class: interface: object]
       ["r" math/random])
  lux/test)

(&;import (java.util.concurrent.Callable a))

(&;import java.lang.Exception
  (new [String]))

(&;import java.lang.Object)

(&;import (java.lang.Class a)
  (getName [] String))

(&;import java.lang.System
  (#static out java.io.PrintStream)
  (#static currentTimeMillis [] #io long)
  (#static getenv [String] #io #? String))

(class: #final (TestClass A) [Runnable]
  ## Fields
  (#private foo boolean)
  (#private bar A)
  (#private baz java.lang.Object)
  ## Methods
  (#public [] (new [value A]) []
           (exec (:= .foo true)
             (:= .bar value)
             (:= .baz "")
             []))
  (#public (virtual) java.lang.Object
           "")
  (#public #static (static) java.lang.Object
           "")
  (Runnable [] (run) void
            [])
  )

(def: test-runnable
  (object [] [Runnable]
    []
    (Runnable [] (run) void
              [])))

(def: test-callable
  (object [a] [(Callable a)]
    []
    (Callable [] (call) a
              (undefined))))

(interface: TestInterface
  ([] foo [boolean String] void #throws [Exception]))

(context: "Conversions"
  (<| (times +100)
      (do @
        [sample r;int]
        (with-expansions
          [<int-convs> (do-template [<to> <from> <message>]
                         [(test <message>
                                (or (|> sample <to> <from> (i/= sample))
                                    (let [capped-sample (|> sample <to> <from>)]
                                      (|> capped-sample <to> <from> (i/= capped-sample)))))]

                         [&;l2b &;b2l "Can succesfully convert to/from byte."]
                         [&;l2s &;s2l "Can succesfully convert to/from short."]
                         [&;l2i &;i2l "Can succesfully convert to/from int."]
                         [&;l2f &;f2l "Can succesfully convert to/from float."]
                         [&;l2d &;d2l "Can succesfully convert to/from double."]
                         [(<| &;i2c &;l2i) (<| &;i2l &;c2i) "Can succesfully convert to/from char."]
                         )]
          ($_ seq
              <int-convs>
              )))))

(context: "Miscellaneous"
  ($_ seq
      (test "Can check if an object is of a certain class."
            (and (&;instance? String "")
                 (not (&;instance? Long ""))
                 (&;instance? Object "")
                 (not (&;instance? Object (&;null)))))

      (test "Can run code in a \"synchronized\" block."
            (&;synchronized "" true))

      (test "Can access Class instances."
            (text/= "java.lang.Class" (Class.getName [] (&;class-for java.lang.Class))))

      (test "Can check if a value is null."
            (and (&;null? (&;null))
                 (not (&;null? ""))))

      (test "Can safely convert nullable references into Maybe values."
            (and (|> (: (Maybe Object) (&;??? (&;null)))
                     (case> #;None true
                            _ false))
                 (|> (: (Maybe Object) (&;??? ""))
                     (case> (#;Some _) true
                            _ false))))
      ))

(context: "Arrays"
  (<| (times +100)
      (do @
        [size (|> r;nat (:: @ map (|>. (n/% +100) (n/max +1))))
         idx (|> r;nat (:: @ map (n/% size)))
         value r;int]
        ($_ seq
            (test "Can create arrays of some length."
                  (n/= size (&;array-length (&;array Long size))))

            (test "Can set and get array values."
                  (let [arr (&;array Long size)]
                    (exec (&;array-write idx value arr)
                      (i/= value (&;array-read idx arr)))))))))
