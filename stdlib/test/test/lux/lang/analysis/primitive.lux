(.module:
  [lux #- primitive]
  (lux [io]
       (control [monad #+ do]
                pipe
                ["ex" exception #+ exception:])
       (data (text format)
             ["e" error])
       ["r" math/random "r/" Monad<Random>]
       [macro]
       (macro [code])
       [lang]
       (lang [".L" type "type/" Eq<Type>]
             [".L" init]
             [analysis #+ Analysis]
             (analysis [".A" type]
                       [".A" expression]))
       test))

(def: analyse (expressionA.analyser (:! lang.Eval [])))

(def: unit
  (r.Random Code)
  (r/wrap (' [])))

(def: #export primitive
  (r.Random [Type Code])
  (`` ($_ r.either
          (~~ (do-template [<type> <code-wrapper> <value-gen>]
                [(r.seq (r/wrap <type>) (r/map <code-wrapper> <value-gen>))]

                [Top  code.tuple (r.list +0 ..unit)]
                [Bool code.bool  r.bool]
                [Nat  code.nat   r.nat]
                [Int  code.int   r.int]
                [Deg  code.deg   r.deg]
                [Frac code.frac  r.frac]
                [Text code.text  (r.unicode +5)]
                )))))

(exception: (wrong-inference {expected Type} {inferred Type})
  (ex.report ["Expected" (%type expected)]
             ["Inferred" (%type inferred)]))

(def: (infer-primitive expected-type analysis)
  (-> Type (Meta Analysis) (e.Error Analysis))
  (|> (typeA.with-inference
        analysis)
      (macro.run (initL.compiler []))
      (case> (#e.Success [inferred-type output])
             (if (is? expected-type inferred-type)
               (#e.Success output)
               (ex.throw wrong-inference [expected-type inferred-type]))

             (#e.Error error)
             (#e.Error error))))

(context: "Primitives"
  ($_ seq
      (test "Can analyse unit."
            (|> (infer-primitive Top (..analyse (' [])))
                (case> (^ (#e.Success (#analysis.Primitive (#analysis.Unit output))))
                       (is? [] output)

                       _
                       false)))
      (<| (times +100)
          (`` ($_ seq
                  (~~ (do-template [<desc> <type> <tag> <random> <constructor>]
                        [(do @
                           [sample <random>]
                           (test (format "Can analyse " <desc> ".")
                                 (|> (infer-primitive <type> (..analyse (<constructor> sample)))
                                     (case> (#e.Success (#analysis.Primitive (<tag> output)))
                                            (is? sample output)

                                            _
                                            false))))]

                        ["bool" Bool #analysis.Bool r.bool code.bool]
                        ["nat"  Nat  #analysis.Nat  r.nat  code.nat]
                        ["int"  Int  #analysis.Int  r.int  code.int]
                        ["deg"  Deg  #analysis.Deg  r.deg  code.deg]
                        ["frac" Frac #analysis.Frac r.frac code.frac]
                        ["text" Text #analysis.Text (r.unicode +5) code.text]
                        )))))))
