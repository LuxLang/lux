(.module:
  lux
  (lux [io]
       (control [monad #+ do Monad])
       (data [text "T/" Eq<Text>]
             text/format
             [number])
       ["r" math/random]
       (macro ["&" code]))
  lux/test)

(context: "Code"
  (with-expansions
    [<tests> (do-template [<expr> <text>]
               [(test (format "Can produce Code node: " <text>)
                      (and (T/= <text> (&.to-text <expr>))
                           (:: &.Eq<Code> = <expr> <expr>)))]

               [(&.bool true)                                 "true"]
               [(&.bool false)                                "false"]
               [(&.int 123)                                   "123"]
               [(&.frac 123.0)                                "123.0"]
               [(&.text "\n")                                 "\"\\n\""]
               [(&.tag ["yolo" "lol"])                        "#yolo.lol"]
               [(&.symbol ["yolo" "lol"])                     "yolo.lol"]
               [(&.form (list (&.bool true) (&.int 123)))     "(true 123)"]
               [(&.tuple (list (&.bool true) (&.int 123)))    "[true 123]"]
               [(&.record (list [(&.bool true) (&.int 123)])) "{true 123}"]
               [(&.local-tag "lol")                           "#lol"]
               [(&.local-symbol "lol")                        "lol"]
               )]
    ($_ seq <tests>)))
