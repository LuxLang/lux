(.module:
  [lux #*
   [io]
   [control
    [monad (#+ do Monad)]]
   [data
    [number]
    ["." text ("text/." Equivalence<Text>)
     format]]
   [math ["r" random]]
   [macro ["&" code]]]
  lux/test)

(context: "Code"
  (with-expansions
    [<tests> (do-template [<expr> <text>]
               [(test (format "Can produce Code node: " <text>)
                      (and (text/= <text> (&.to-text <expr>))
                           (:: &.Equivalence<Code> = <expr> <expr>)))]

               [(&.bit #1)                                  "#1"]
               [(&.bit #0)                                  "#0"]
               [(&.int +123)                                "+123"]
               [(&.frac +123.0)                             "+123.0"]
               [(&.text "1234")                               (format text.double-quote "1234" text.double-quote)]
               [(&.tag ["yolo" "lol"])                      "#yolo.lol"]
               [(&.identifier ["yolo" "lol"])               "yolo.lol"]
               [(&.form (list (&.bit #1) (&.int +123)))     "(#1 +123)"]
               [(&.tuple (list (&.bit #1) (&.int +123)))    "[#1 +123]"]
               [(&.record (list [(&.bit #1) (&.int +123)])) "{#1 +123}"]
               [(&.local-tag "lol")                         "#lol"]
               [(&.local-identifier "lol")                  "lol"]
               )]
    ($_ seq <tests>)))
