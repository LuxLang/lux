(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data [text "Text/" Monoid<Text>]
             [number])
       (macro ast)
       (codata function))
  lux/test)

(test: "lux/macro/ast exports"
  (let% [<tests> (do-template [<expr> <text> <pattern>]
                   [(match <pattern> <expr>)
                    (match <text> (ast-to-text <expr>))
                    (match true (:: Eq<AST> = <expr> <expr>))]

                   [(bool true)                             "true"       [["" -1 -1] (#;BoolS true)]]
                   [(bool false)                            "false"      [_ (#;BoolS false)]]
                   [(int 123)                               "123"        [_ (#;IntS 123)]]
                   [(real 123.0)                            "123.0"      [_ (#;RealS 123.0)]]
                   [(char #"\n")                            "#\"\\n\""   [_ (#;CharS #"\n")]]
                   [(text "\n")                             "\"\\n\""    [_ (#;TextS "\n")]]
                   [(tag ["yolo" "lol"])                    "#yolo;lol"  [_ (#;TagS ["yolo" "lol"])]]
                   [(symbol ["yolo" "lol"])                 "yolo;lol"   [_ (#;SymbolS ["yolo" "lol"])]]
                   [(form (list (bool true) (int 123)))     "(true 123)" (^ [_ (#;FormS (list [_ (#;BoolS true)] [_ (#;IntS 123)]))])]
                   [(tuple (list (bool true) (int 123)))    "[true 123]" (^ [_ (#;TupleS (list [_ (#;BoolS true)] [_ (#;IntS 123)]))])]
                   [(record (list [(bool true) (int 123)])) "{true 123}" (^ [_ (#;RecordS (list [[_ (#;BoolS true)] [_ (#;IntS 123)]]))])]
                   [(local-tag "lol")                       "#lol"       [_ (#;TagS ["" "lol"])]]
                   [(local-symbol "lol")                    "lol"        [_ (#;SymbolS ["" "lol"])]]
                   )]
    (test-all <tests>)))
