(;module:
  lux
  (lux [io]
       (control monad)
       (data [text "T/" Eq<Text>]
             text/format
             [number])
       ["R" math/random]
       pipe
       (macro ["&" ast]))
  lux/test)

(test: "AST"
  (let% [<tests> (do-template [<expr> <text>]
                   [(assert (format "Can produce AST node: " <text>)
                            (and (T/= <text> (&;to-text <expr>))
                                 (:: &;Eq<AST> = <expr> <expr>)))]

                   [(&;bool true)                                 "true"]
                   [(&;bool false)                                "false"]
                   [(&;int 123)                                   "123"]
                   [(&;real 123.0)                                "123.0"]
                   [(&;char #"\n")                                "#\"\\n\""]
                   [(&;text "\n")                                 "\"\\n\""]
                   [(&;tag ["yolo" "lol"])                        "#yolo;lol"]
                   [(&;symbol ["yolo" "lol"])                     "yolo;lol"]
                   [(&;form (list (&;bool true) (&;int 123)))     "(true 123)"]
                   [(&;tuple (list (&;bool true) (&;int 123)))    "[true 123]"]
                   [(&;record (list [(&;bool true) (&;int 123)])) "{true 123}"]
                   [(&;local-tag "lol")                           "#lol"]
                   [(&;local-symbol "lol")                        "lol"]
                   )]
    ($_ seq <tests>)))
