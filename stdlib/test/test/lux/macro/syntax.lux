(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data [text "Text/" Monoid<Text>]
             [number])
       (macro [ast]
              ["s" syntax #+ syntax: Syntax])
       (codata function))
  lux/test)

(test: "lux/macro/syntax exports [Part 1]"
  (let% [<simple-tests> (do-template [<pattern> <expr> <get> <ask> <demand>]
                          [(match (#;Right [_ <pattern>])
                                  (s;run (list <expr>)
                                         <get>))
                           (match (#;Right [_ true])
                                  (s;run (list <expr>)
                                         (<ask> <pattern>)))
                           (match (#;Right [_ []])
                                  (s;run (list <expr>)
                                         (<demand> <pattern>)))]

                          [true           (ast;bool true)             s;bool   s;bool?   s;bool!]
                          [123            (ast;int 123)               s;int    s;int?    s;int!]
                          [123.0          (ast;real 123.0)            s;real   s;real?   s;real!]
                          [#"\n"          (ast;char #"\n")            s;char   s;char?   s;char!]
                          ["\n"           (ast;text "\n")             s;text   s;text?   s;text!]
                          [["yolo" "lol"] (ast;symbol ["yolo" "lol"]) s;symbol s;symbol? s;symbol!]
                          [["yolo" "lol"] (ast;tag ["yolo" "lol"])    s;tag    s;tag?    s;tag!]
                          )
         <group-tests> (do-template [<parser> <ctor>]
                         [(match (#;Right [_ [true 123]])
                                 (s;run (list (<ctor> (list (ast;bool true) (ast;int 123))))
                                        (<parser> (s;seq s;bool s;int))))
                          (match (#;Right [_ true])
                                 (s;run (list (<ctor> (list (ast;bool true))))
                                        (<parser> s;bool)))
                          (match (#;Left _)
                                 (s;run (list (<ctor> (list (ast;bool true) (ast;int 123))))
                                        (<parser> s;bool)))
                          (match (#;Right [_ (#;Left true)])
                                 (s;run (list (<ctor> (list (ast;bool true))))
                                        (<parser> (s;alt s;bool s;int))))
                          (match (#;Right [_ (#;Right 123)])
                                 (s;run (list (<ctor> (list (ast;int 123))))
                                        (<parser> (s;alt s;bool s;int))))
                          (match (#;Left _)
                                 (s;run (list (<ctor> (list (ast;real 123.0))))
                                        (<parser> (s;alt s;bool s;int))))]

                         [s;form  ast;form]
                         [s;tuple ast;tuple])]
    (test-all (match (#;Right [_ [_ (#;BoolS true)]])
                     (s;run (list (ast;bool true) (ast;int 123))
                            s;any))
              <simple-tests>
              (match (#;Right [_ []])
                     (s;run (list (ast;bool true) (ast;int 123))
                            (s;assert true "yolo")))
              (match (#;Left _)
                     (s;run (list (ast;bool true) (ast;int 123))
                            (s;assert false "yolo")))
              (match (#;Right [_ +123])
                     (s;run (list (ast;nat +123))
                            s;nat))
              (match (#;Left _)
                     (s;run (list (ast;int -123))
                            s;nat))
              (match (#;Right [_ "yolo"])
                     (s;run (list (ast;local-symbol "yolo"))
                            s;local-symbol))
              (match (#;Left _)
                     (s;run (list (ast;symbol ["yolo" "lol"]))
                            s;local-symbol))
              (match (#;Right [_ "yolo"])
                     (s;run (list (ast;local-tag "yolo"))
                            s;local-tag))
              (match (#;Left _)
                     (s;run (list (ast;tag ["yolo" "lol"]))
                            s;local-tag))
              <group-tests>
              )))

(test: "lux/macro/syntax exports [Part 2]"
  (test-all (match (#;Right [_ [true 123]])
                   (s;run (list (ast;record (list [(ast;bool true) (ast;int 123)])))
                          (s;record (s;seq s;bool s;int))))
            (match (#;Right [_ (#;Some +123)])
                   (s;run (list (ast;nat +123))
                          (s;opt s;nat)))
            (match (#;Right [_ #;None])
                   (s;run (list (ast;int -123))
                          (s;opt s;nat)))
            (match (^ (#;Right [_ (list +123 +456 +789)]))
                   (s;run (list (ast;nat +123) (ast;nat +456) (ast;nat +789))
                          (s;some s;nat)))
            (match (^ (#;Right [_ (list)]))
                   (s;run (list (ast;int -123))
                          (s;some s;nat)))
            (match (^ (#;Right [_ (list +123 +456 +789)]))
                   (s;run (list (ast;nat +123) (ast;nat +456) (ast;nat +789))
                          (s;many s;nat)))
            (match (^ (#;Right [_ (list +123)]))
                   (s;run (list (ast;nat +123))
                          (s;many s;nat)))
            (match (#;Left _)
                   (s;run (list (ast;int -123))
                          (s;many s;nat)))
            (match (#;Right [_ 123])
                   (s;run (list (ast;int 123) (ast;int 456) (ast;int 789))
                          (s;either s;pos-int s;int)))
            (match (#;Right [_ -123])
                   (s;run (list (ast;int -123) (ast;int 456) (ast;int 789))
                          (s;either s;pos-int s;int)))
            (match (#;Left _)
                   (s;run (list (ast;bool true) (ast;int 456) (ast;int 789))
                          (s;either s;pos-int s;int)))
            (match (#;Right [_ true])
                   (s;run (list)
                          s;end?))
            (match (#;Right [_ false])
                   (s;run (list (ast;bool true))
                          s;end?))
            (match (#;Right [_ []])
                   (s;run (list)
                          s;end))
            (match (#;Left _)
                   (s;run (list (ast;bool true))
                          s;end))
            (match (^ (#;Right [_ (list 123 456 789)]))
                   (s;run (list (ast;int 123) (ast;int 456) (ast;int 789))
                          (s;exactly +3 s;int)))
            (match (^ (#;Right [_ (list 123 456)]))
                   (s;run (list (ast;int 123) (ast;int 456) (ast;int 789))
                          (s;exactly +2 s;int)))
            (match (#;Left _)
                   (s;run (list (ast;int 123) (ast;int 456) (ast;int 789))
                          (s;exactly +4 s;int)))
            (match (^ (#;Right [_ (list 123 456 789)]))
                   (s;run (list (ast;int 123) (ast;int 456) (ast;int 789))
                          (s;at-least +3 s;int)))
            (match (^ (#;Right [_ (list 123 456 789)]))
                   (s;run (list (ast;int 123) (ast;int 456) (ast;int 789))
                          (s;at-least +2 s;int)))
            (match (#;Left _)
                   (s;run (list (ast;int 123) (ast;int 456) (ast;int 789))
                          (s;at-least +4 s;int)))
            (match (^ (#;Right [_ (list 123 456 789)]))
                   (s;run (list (ast;int 123) (ast;int 456) (ast;int 789))
                          (s;at-most +3 s;int)))
            (match (^ (#;Right [_ (list 123 456)]))
                   (s;run (list (ast;int 123) (ast;int 456) (ast;int 789))
                          (s;at-most +2 s;int)))
            (match (^ (#;Right [_ (list 123 456 789)]))
                   (s;run (list (ast;int 123) (ast;int 456) (ast;int 789))
                          (s;at-most +4 s;int)))
            (match (^ (#;Right [_ (list 123 456 789)]))
                   (s;run (list (ast;int 123) (ast;int 456) (ast;int 789))
                          (s;between +3 +10 s;int)))
            (match (#;Left _)
                   (s;run (list (ast;int 123) (ast;int 456) (ast;int 789))
                          (s;between +4 +10 s;int)))
            (match (^ (#;Right [_ (list 123 456 789)]))
                   (s;run (list (ast;int 123) (ast;text "YOLO") (ast;int 456) (ast;text "YOLO") (ast;int 789))
                          (s;sep-by (s;text! "YOLO") s;int)))
            (match (^ (#;Right [_ (list 123 456)]))
                   (s;run (list (ast;int 123) (ast;text "YOLO") (ast;int 456) (ast;int 789))
                          (s;sep-by (s;text! "YOLO") s;int)))
            (match (#;Left _)
                   (s;run (list (ast;int 123) (ast;int 456) (ast;int 789))
                          (s;not s;int)))
            (match (#;Right [_ []])
                   (s;run (list (ast;bool true) (ast;int 456) (ast;int 789))
                          (s;not s;int)))
            ))
