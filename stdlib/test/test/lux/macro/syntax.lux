(.module:
  [lux #*
   [io]
   [control
    [monad (#+ do Monad)]
    [equivalence (#+ Equivalence)]
    ["p" parser]]
   [data
    [bit]
    [ident]
    ["e" error]
    [number]
    ["." text
     format]]
   [math
    ["r" random]]
   ["." macro
    [code]
    ["s" syntax (#+ syntax: Syntax)]]]
  lux/test)

## [Utils]
(def: (enforced? parser input)
  (-> (Syntax []) (List Code) Bit)
  (case (p.run input parser)
    (#.Right [_ []])
    #1

    _
    #0))

(def: (found? parser input)
  (-> (Syntax Bit) (List Code) Bit)
  (case (p.run input parser)
    (#.Right [_ #1])
    #1

    _
    #0))

(def: (equals? Equivalence<a> reference parser input)
  (All [a] (-> (Equivalence a) a (Syntax a) (List Code) Bit))
  (case (p.run input parser)
    (#.Right [_ output])
    (:: Equivalence<a> = reference output)

    _
    #0))

(def: (fails? input)
  (All [a] (-> (e.Error a) Bit))
  (case input
    (#.Left _)
    #1

    _
    #0))

(syntax: (match pattern input)
  (wrap (list (` (case (~ input)
                   (^ (#.Right [(~' _) (~ pattern)]))
                   #1

                   (~' _)
                   #0)))))

## [Tests]
(context: "Simple value syntax."
  (with-expansions
    [<simple-tests> (do-template [<assertion> <value> <ctor> <Equivalence> <get>]
                      [(test <assertion>
                             (and (equals? <Equivalence> <value> <get> (list (<ctor> <value>)))
                                  (found? (s.this? (<ctor> <value>)) (list (<ctor> <value>)))
                                  (enforced? (s.this (<ctor> <value>)) (list (<ctor> <value>)))))]

                      ["Can parse Bit syntax."    #1           code.bit    bit.Equivalence<Bit>    s.bit]
                      ["Can parse Nat syntax."    +123           code.nat    number.Equivalence<Nat>  s.nat]
                      ["Can parse Int syntax."    123            code.int    number.Equivalence<Int>  s.int]
                      ["Can parse Rev syntax."   .123            code.rev    number.Equivalence<Rev>  s.rev]
                      ["Can parse Frac syntax."   123.0          code.frac   number.Equivalence<Frac> s.frac]
                      ["Can parse Text syntax."   "\n"           code.text   text.Equivalence<Text>   s.text]
                      ["Can parse Symbol syntax." ["yolo" "lol"] code.symbol ident.Equivalence<Ident> s.symbol]
                      ["Can parse Tag syntax."    ["yolo" "lol"] code.tag    ident.Equivalence<Ident> s.tag]
                      )]
    ($_ seq
        <simple-tests>

        (test "Can parse symbols belonging to the current namespace."
              (and (match "yolo"
                          (p.run (list (code.local-symbol "yolo"))
                                 s.local-symbol))
                   (fails? (p.run (list (code.symbol ["yolo" "lol"]))
                                  s.local-symbol))))
        
        (test "Can parse tags belonging to the current namespace."
              (and (match "yolo"
                          (p.run (list (code.local-tag "yolo"))
                                 s.local-tag))
                   (fails? (p.run (list (code.tag ["yolo" "lol"]))
                                  s.local-tag))))
        )))

(context: "Complex value syntax."
  (with-expansions
    [<group-tests> (do-template [<type> <parser> <ctor>]
                     [(test (format "Can parse " <type> " syntax.")
                            (and (match [#1 123]
                                        (p.run (list (<ctor> (list (code.bit #1) (code.int 123))))
                                               (<parser> (p.seq s.bit s.int))))
                                 (match #1
                                        (p.run (list (<ctor> (list (code.bit #1))))
                                               (<parser> s.bit)))
                                 (fails? (p.run (list (<ctor> (list (code.bit #1) (code.int 123))))
                                                (<parser> s.bit)))
                                 (match (#.Left #1)
                                        (p.run (list (<ctor> (list (code.bit #1))))
                                               (<parser> (p.alt s.bit s.int))))
                                 (match (#.Right 123)
                                        (p.run (list (<ctor> (list (code.int 123))))
                                               (<parser> (p.alt s.bit s.int))))
                                 (fails? (p.run (list (<ctor> (list (code.frac 123.0))))
                                                (<parser> (p.alt s.bit s.int))))))]

                     ["form"  s.form  code.form]
                     ["tuple" s.tuple code.tuple])]
    ($_ seq
        <group-tests>

        (test "Can parse record syntax."
              (match [#1 123]
                     (p.run (list (code.record (list [(code.bit #1) (code.int 123)])))
                            (s.record (p.seq s.bit s.int)))))
        )))

(context: "Combinators"
  ($_ seq
      (test "Can parse any Code."
            (match [_ (#.Bit #1)]
                   (p.run (list (code.bit #1) (code.int 123))
                          s.any)))

      (test "Can check whether the end has been reached."
            (and (match #1
                        (p.run (list)
                               s.end?))
                 (match #0
                        (p.run (list (code.bit #1))
                               s.end?))))

      (test "Can ensure the end has been reached."
            (and (match []
                        (p.run (list)
                               s.end!))
                 (fails? (p.run (list (code.bit #1))
                                s.end!))))
      ))
