(.module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                [equivalence #+ Equivalence])
       (data text/format
             [bool]
             [number "int/" Number<Int>]
             [text]
             [maybe]
             (collection [list]))
       ["r" math/random]
       [macro]
       (macro [poly #+ derived:]
              ["&" poly/equivalence]))
  lux/test)

## [Utils]
(type: Variant
  (#Case0 Bool)
  (#Case1 Int)
  (#Case2 Frac))

(type: #rec Recursive
  (#Number Frac)
  (#Addition Frac Recursive))

(type: Record
  {#bool Bool
   #int Int
   #frac Frac
   #text Text
   #maybe (Maybe Int)
   #list (List Int)
   #variant Variant
   #tuple [Int Frac Text]
   #recursive Recursive})

(def: gen-recursive
  (r.Random Recursive)
  (r.rec (function (_ gen-recursive)
           (r.alt r.frac
                  (r.seq r.frac gen-recursive)))))

(def: gen-record
  (r.Random Record)
  (do r.Monad<Random>
    [size (:: @ map (n/% +2) r.nat)
     #let [gen-int (|> r.int (:: @ map (|>> int/abs (i/% 1_000_000))))]]
    ($_ r.seq
        r.bool
        gen-int
        r.frac
        (r.unicode size)
        (r.maybe gen-int)
        (r.list size gen-int)
        ($_ r.alt r.bool gen-int r.frac)
        ($_ r.seq gen-int r.frac (r.unicode size))
        gen-recursive)))

(derived: (&.Equivalence<?> Record))

## [Tests]
(context: "Equivalence polytypism"
  (<| (times +100)
      (do @
        [sample gen-record
         #let [(^open "&/") Equivalence<Record>]]
        (test "Every instance equals itself."
              (&/= sample sample)))))
