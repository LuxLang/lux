(;module:
  lux
  (lux [io]
       (control monad
                [functor]
                eq)
       (data text/format
             [bool]
             [number "i/" Number<Int>]
             [char]
             [text])
       ["R" math/random]
       [macro]
       (macro [poly #+ derived:]
              ["&" poly/functor]))
  lux/test)

## [Utils]
(type: (My-Maybe a)
  #My-None
  (#My-Some a))

(type: (My-List a)
  #My-Nil
  (#My-Cons [a (My-List a)]))

(type: (My-State s a)
  (-> s [s a]))

(derived: (&;Functor<?> My-Maybe))

(derived: (&;Functor<?> My-List))

(derived: (&;Functor<?> My-State))

## [Tests]
(test: "Functor polytypism"
  (assert "" true))
