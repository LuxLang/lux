(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                [eq #+ Eq])
       (data text/format
             [bool]
             [number "i/" Number<Int>]
             [text])
       ["r" math/random]
       [macro]
       (macro [poly #+ derived:]
              ["&" poly/text-encoder]))
  lux/test)

## [Utils]
(type: Variant
  (#Case0 Bool)
  (#Case1 Int)
  (#Case2 Real))

(type: Record
  {#unit Unit
   #bool Bool
   #int Int
   #real Real
   #text Text
   #maybe (Maybe Int)
   #list (List Int)
   #variant Variant
   #tuple [Int Real Text]})

(def: gen-record
  (r;Random Record)
  (do r;Monad<Random>
    [size (:: @ map (n.% +2) r;nat)
     #let [gen-int (|> r;int (:: @ map (|>. i/abs (i.% 1_000_000))))]]
    ($_ r;seq
        (:: @ wrap [])
        r;bool
        gen-int
        r;real
        (r;text size)
        (r;maybe gen-int)
        (r;list size gen-int)
        ($_ r;alt r;bool gen-int r;real)
        ($_ r;seq gen-int r;real (r;text size))
        )))

(derived: (&;Codec<Text,?>::encode Record))

## [Tests]
(context: "Text-encoding polytypism"
  (test "" true))
