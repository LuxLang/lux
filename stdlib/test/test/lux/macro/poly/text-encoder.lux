(;module:
  lux
  (lux [io]
       (control monad
                eq)
       (data text/format
             [bool]
             [number "i/" Number<Int>]
             [char]
             [text])
       ["R" math/random]
       [macro]
       (macro [poly #+ derived:]
              ["&" poly/text-encoder]))
  lux/test)

## [Utils]
(type: Variant
  (#Case0 Bool)
  (#Case1 Int)
  (#Case2 Real))

(type: Record
  {#unit Unit
   #bool Bool
   #int Int
   #real Real
   #char Char
   #text Text
   #maybe (Maybe Int)
   #list (List Int)
   #variant Variant
   #tuple [Int Real Char]})

(def: gen-record
  (R;Random Record)
  (do R;Monad<Random>
    [size (:: @ map (n.% +2) R;nat)
     #let [gen-int (|> R;int (:: @ map (|>. i/abs (i.% 1_000_000))))]]
    ($_ R;seq
        (:: @ wrap [])
        R;bool
        gen-int
        R;real
        R;char
        (R;text size)
        (R;maybe gen-int)
        (R;list size gen-int)
        ($_ R;alt R;bool gen-int R;real)
        ($_ R;seq gen-int R;real R;char)
        )))

(derived: (&;Codec<Text,?>::encode Record))

## [Tests]
(context: "Text-encoding polytypism"
  (test "" true))
