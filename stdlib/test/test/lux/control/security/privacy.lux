(.module:
  [lux #*
   [control
    [hash (#+ Hash)]
    [monad (#+ do)]
    [security
     ["@" privacy (#+ Context Privilege Private with-privacy)]]]
   [data
    ["." text ("text/." Equivalence<Text>)
     format]]
   [math
    ["r" random]]]
  lux/test)

(type: Password (Private Text))

(signature: (Policy %)
  (: (Hash (Password %))
     &hash)

  (: (-> Text (Password %))
     password)

  (: (Privilege %)
     privilege))

(def: (policy _)
  (Ex [%] (-> Any (Policy %)))
  (with-privacy
    (: (Context Policy)
       (function (_ (^@ privilege (^open "%/.")))
         (structure
          (def: &hash
            (structure
             (def: eq
               (structure (def: (= reference sample)
                            (text/= (%/reveal reference)
                                    (%/reveal sample)))))
             (def: hash
               (|>> %/reveal
                    (:: text.Hash<Text> hash)))))
          
          (def: password
            %/conceal)

          (def: privilege privilege))))))

(context: "Policy labels."
  (do @
    [#let [policy-0 (policy 0)]
     raw-password (r.ascii 10)
     #let [password (:: policy-0 password raw-password)]]
    ($_ seq
        (test "Can work with private values under the same label."
              (and (:: policy-0 = password password)
                   (n/= (:: text.Hash<Text> hash raw-password)
                        (:: policy-0 hash password))))
        (let [policy-1 (policy 1)
              delegate (@.delegation (:: policy-0 reveal) (:: policy-1 conceal))]
          (test "Can use delegation to share private values between policies."
                (:: policy-1 = (delegate password) (delegate password))))
        )))

(context: "Structures."
  (do @
    [#let [duplicate (: (-> Text Text)
                        (function (_ raw) (format raw raw)))
           policy-0 (policy 0)]
     raw-password (r.ascii 10)
     #let [password (:: policy-0 password raw-password)]
     #let [check (:: policy-0 =
                     (:: policy-0 password (duplicate raw-password)))
           (^open "@/.") @.Functor<Private>
           (^open "@/.") @.Apply<Private>
           (^open "@/.") @.Monad<Private>]]
    ($_ seq
        (test "Can use Functor."
              (check (@/map duplicate password)))
        (test "Can use Apply."
              (check (@/apply (@/wrap duplicate) password)))
        (test "Can use Monad."
              (check (do @.Monad<Private>
                       [raw-password' (:: policy-0 password raw-password)]
                       (wrap (duplicate raw-password')))))
        )))
