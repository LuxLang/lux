(.module:
  [lux #*
   [control
    [hash (#+ Hash)]
    [monad (#+ do)]
    [security
     ["@" integrity]]]
   [data
    ["." error]
    ["." text ("text/." Equivalence<Text>)
     format]]
   [math
    ["r" random]]]
  lux/test)

(context: "Taint."
  (do @
    [raw (r.ascii 10)
     #let [dirty (@.taint raw)]]
    ($_ seq
        (test "Can clean a tainted value by trusting it."
              (text/= raw (@.trust dirty)))
        (test "Can validate a tainted value."
              (case (@.validate (function (_ value)
                                  (if (|> value text.size (n/> 0))
                                    (#error.Success value)
                                    (#error.Failure "Empty text is invalid.")))
                                dirty)
                (#error.Success clean)
                (text/= raw clean)

                (#error.Failure error)
                false))
        )))

(context: "Structures."
  (do @
    [#let [duplicate (: (-> Text Text)
                        (function (_ raw) (format raw raw)))]
     raw (r.ascii 10)
     #let [check (|>> @.trust (text/= (duplicate raw)))
           (^open "@/.") @.Functor<Dirty>
           (^open "@/.") @.Apply<Dirty>
           (^open "@/.") @.Monad<Dirty>]]
    ($_ seq
        (test "Can use Functor."
              (check (@/map duplicate (@.taint raw))))
        (test "Can use Apply."
              (check (@/apply (@/wrap duplicate) (@.taint raw))))
        (test "Can use Monad."
              (check (do @.Monad<Dirty>
                       [dirty (@.taint raw)]
                       (wrap (duplicate dirty)))))
        )))
