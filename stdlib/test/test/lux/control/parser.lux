(;module:
  lux
  (lux [io]
       (control monad
                eq
                ["&" parser]
                pipe)
       (data [text "Text/" Monoid<Text>]
             text/format
             [number]
             [bool]
             [char]
             [ident]
             ["R" result])
       ["r" math/random]
       [macro]
       (macro [code]
              ["s" syntax #+ syntax:]))
  lux/test)

## [Utils]
(def: (should-fail input)
  (All [a] (-> (R;Result a) Bool))
  (case input
    (#R;Error _) true
    _          false))

(def: (enforced? parser input)
  (All [s] (-> (&;Parser s Unit) s Bool))
  (case (&;run input parser)
    (#R;Success [_ []])
    true

    _
    false))

(def: (found? parser input)
  (All [s] (-> (&;Parser s Bool) s Bool))
  (case (&;run input parser)
    (#R;Success [_ true])
    true

    _
    false))

(def: (is? Eq<a> test parser input)
  (All [s a] (-> (Eq a) a (&;Parser s a) s Bool))
  (case (&;run input parser)
    (#R;Success [_ output])
    (:: Eq<a> = test output)

    _
    false))

(def: (fails? input)
  (All [a] (-> (R;Result a) Bool))
  (case input
    (#R;Error _)
    true

    _
    false))

(syntax: (match pattern input)
  (wrap (list (` (case (~ input)
                   (^ (#R;Success [(~' _) (~ pattern)]))
                   true

                   (~' _)
                   false)))))

## [Tests]
(context: "Assertions"
  (test "Can make assertions while parsing."
        (and (match []
                    (&;run (list (code;bool true) (code;int 123))
                           (&;assert "yolo" true)))
             (fails? (&;run (list (code;bool true) (code;int 123))
                            (&;assert "yolo" false))))))

(context: "Combinators [Part 1]"
  ($_ seq
      (test "Can optionally succeed with some parser."
            (and (match (#;Some +123)
                        (&;run (list (code;nat +123))
                               (&;opt s;nat)))
                 (match #;None
                        (&;run (list (code;int -123))
                               (&;opt s;nat)))))

      (test "Can apply a parser 0 or more times."
            (and (match (list +123 +456 +789)
                        (&;run (list (code;nat +123) (code;nat +456) (code;nat +789))
                               (&;some s;nat)))
                 (match (list)
                        (&;run (list (code;int -123))
                               (&;some s;nat)))))

      (test "Can apply a parser 1 or more times."
            (and (match (list +123 +456 +789)
                        (&;run (list (code;nat +123) (code;nat +456) (code;nat +789))
                               (&;many s;nat)))
                 (match (list +123)
                        (&;run (list (code;nat +123))
                               (&;many s;nat)))
                 (fails? (&;run (list (code;int -123))
                                (&;many s;nat)))))

      (test "Can use either parser."
            (and (match 123
                        (&;run (list (code;int 123) (code;int 456) (code;int 789))
                               (&;either s;pos-int s;int)))
                 (match -123
                        (&;run (list (code;int -123) (code;int 456) (code;int 789))
                               (&;either s;pos-int s;int)))
                 (fails? (&;run (list (code;bool true) (code;int 456) (code;int 789))
                                (&;either s;pos-int s;int)))))

      (test "Can create the opposite/negation of any parser."
            (and (fails? (&;run (list (code;int 123) (code;int 456) (code;int 789))
                                (&;not s;int)))
                 (match []
                        (&;run (list (code;bool true) (code;int 456) (code;int 789))
                               (&;not s;int)))))
      ))

(context: "Combinators Part [2]"
  ($_ seq
      (test "Can fail at will."
            (should-fail (&;run (list)
                                (&;fail "Well, it really SHOULD fail..."))))
      
      (test "Can apply a parser N times."
            (and (match (list 123 456 789)
                        (&;run (list (code;int 123) (code;int 456) (code;int 789))
                               (&;exactly +3 s;int)))
                 (match (list 123 456)
                        (&;run (list (code;int 123) (code;int 456) (code;int 789))
                               (&;exactly +2 s;int)))
                 (fails? (&;run (list (code;int 123) (code;int 456) (code;int 789))
                                (&;exactly +4 s;int)))))

      (test "Can apply a parser at-least N times."
            (and (match (list 123 456 789)
                        (&;run (list (code;int 123) (code;int 456) (code;int 789))
                               (&;at-least +3 s;int)))
                 (match (list 123 456 789)
                        (&;run (list (code;int 123) (code;int 456) (code;int 789))
                               (&;at-least +2 s;int)))
                 (fails? (&;run (list (code;int 123) (code;int 456) (code;int 789))
                                (&;at-least +4 s;int)))))

      (test "Can apply a parser at-most N times."
            (and (match (list 123 456 789)
                        (&;run (list (code;int 123) (code;int 456) (code;int 789))
                               (&;at-most +3 s;int)))
                 (match (list 123 456)
                        (&;run (list (code;int 123) (code;int 456) (code;int 789))
                               (&;at-most +2 s;int)))
                 (match (list 123 456 789)
                        (&;run (list (code;int 123) (code;int 456) (code;int 789))
                               (&;at-most +4 s;int)))))

      (test "Can apply a parser between N and M times."
            (and (match (list 123 456 789)
                        (&;run (list (code;int 123) (code;int 456) (code;int 789))
                               (&;between +3 +10 s;int)))
                 (fails? (&;run (list (code;int 123) (code;int 456) (code;int 789))
                                (&;between +4 +10 s;int)))))

      (test "Can parse while taking separators into account."
            (and (match (list 123 456 789)
                        (&;run (list (code;int 123) (code;text "YOLO") (code;int 456) (code;text "YOLO") (code;int 789))
                               (&;sep-by (s;this (' "YOLO")) s;int)))
                 (match (list 123 456)
                        (&;run (list (code;int 123) (code;text "YOLO") (code;int 456) (code;int 789))
                               (&;sep-by (s;this (' "YOLO")) s;int)))))

      (test "Can obtain the whole of the remaining input."
            (|> &;remaining
                (&;run (list (code;int 123) (code;int 456) (code;int 789)))
                (match (list [_ (#;Int 123)] [_ (#;Int 456)] [_ (#;Int 789)]))))
      ))
