(;module:
  lux
  (lux [io]
       (control ["M" monad #+ do Monad]
                ["&" cont])
       (data [text "Text/" Monoid<Text>]
             text/format
             [number]
             [product]
             (coll [list]))
       ["R" math/random])
  lux/test)

(context: "Continuations"
  [sample R;nat
   #let [(^open "&/") &;Monad<Cont>]
   elems (R;list +3 R;nat)]
  ($_ seq
      (test "Can run continuations to compute their values."
            (n.= sample (&;run (&/wrap sample))))

      (test "Can use functor."
            (n.= (n.inc sample) (&;run (&/map n.inc (&/wrap sample)))))

      (test "Can use applicative."
            (n.= (n.inc sample) (&;run (&/apply (&/wrap n.inc) (&/wrap sample)))))

      (test "Can use monad."
            (n.= (n.inc sample) (&;run (do &;Monad<Cont>
                                         [func (wrap n.inc)
                                          arg (wrap sample)]
                                         (wrap (func arg))))))

      (test "Can use the current-continuation as a escape hatch."
            (n.= (n.* +2 sample)
                 (&;run (do &;Monad<Cont>
                          [value (&;call/cc
                                  (function [k]
                                    (do @
                                      [temp (k sample)]
                                      ## If this code where to run,
                                      ## the output would be
                                      ## (n.* +4 sample)
                                      (k temp))))]
                          (wrap (n.* +2 value))))))

      (test "Can use the current-continuation to build a time machine."
            (n.= (n.+ +100 sample)
                 (&;run (do &;Monad<Cont>
                          [[restart [output idx]] (&;portal [sample +0])]
                          (if (n.< +10 idx)
                            (restart [(n.+ +10 output) (n.inc idx)])
                            (wrap output))))))

      (test "Can use delimited continuations with shifting."
            (let [(^open "&/") &;Monad<Cont>
                  (^open "L/") (list;Eq<List> number;Eq<Nat>)
                  visit (: (-> (List Nat)
                               (&;Cont (List Nat) (List Nat)))
                           (function visit [xs]
                             (case xs
                               #;Nil
                               (&/wrap #;Nil)

                               (#;Cons x xs')
                               (do &;Monad<Cont>
                                 [output (&;shift (function [k]
                                                    (do @
                                                      [tail (k xs')]
                                                      (wrap (#;Cons x tail)))))]
                                 (visit output)))))]
              (L/= elems
                   (&;run (&;reset (visit elems))))
              ))
      ))
