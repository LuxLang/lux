(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                pipe
                ["&" reader])
       (data [text "Text/" Monoid<Text>]
             text/format
             [number]))
  lux/test)

(context: "Readers"
  ($_ seq
      (test "" (i/= 123 (&;run 123 &;ask)))
      (test "" (i/= 246 (&;run 123 (&;local (i/* 2) &;ask))))
      (test "" (i/= 134 (&;run 123 (:: &;Functor<Reader> map i/inc (i/+ 10)))))
      (test "" (i/= 10 (&;run 123 (:: &;Applicative<Reader> wrap 10))))
      (test "" (i/= 30 (&;run 123 (let [(^open "&/") &;Applicative<Reader>]
                                    (&/apply (&/wrap (i/+ 10)) (&/wrap 20))))))
      (test "" (i/= 30 (&;run 123 (do &;Monad<Reader>
                                    [f (wrap i/+)
                                     x (wrap 10)
                                     y (wrap 20)]
                                    (wrap (f x y))))))))

(context: "Monad transformer"
  (let [(^open "io/") io;Monad<IO>]
    (test "Can add reader functionality to any monad."
          (|> (do (&;ReaderT io;Monad<IO>)
                [a (&;lift (io/wrap 123))
                 b (wrap 456)]
                (wrap (i/+ a b)))
              (&;run "")
              io;run
              (case> 579 true
                     _   false)))
    ))
