(.module:
  lux
  (lux [io]
       (control ["M" monad (#+ do Monad)]
                pipe
                ["&" writer])
       (data [text ("text/" Equivalence<Text>)]
             [number]
             [product]))
  lux/test)

(context: "Writer."
  (let [(^open "&/") (&.Monad<Writer> text.Monoid<Text>)
        (^open "&/") (&.Apply<Writer> text.Monoid<Text>)]
    ($_ seq
        (test "Functor respects Writer."
              (i/= 11 (product.right (&/map inc ["" 10]))))
        
        (test "Apply respects Writer."
              (and (i/= 20 (product.right (&/wrap 20)))
                   (i/= 30 (product.right (&/apply (&/wrap (i/+ 10)) (&/wrap 20))))))
        
        (test "Monad respects Writer."
              (i/= 30 (product.right (do (&.Monad<Writer> text.Monoid<Text>)
                                       [f (wrap i/+)
                                        a (wrap 10)
                                        b (wrap 20)]
                                       (wrap (f a b))))))
        
        (test "Can log any value."
              (text/= "YOLO" (product.left (&.log "YOLO"))))
        )))

(context: "Monad transformer"
  (let [lift (&.lift text.Monoid<Text> io.Monad<IO>)
        (^open "io/") io.Monad<IO>]
    (test "Can add writer functionality to any monad."
          (|> (io.run (do (&.WriterT text.Monoid<Text> io.Monad<IO>)
                        [a (lift (io/wrap 123))
                         b (wrap 456)]
                        (wrap (i/+ a b))))
              (case> ["" 579] true
                     _ false)))
    ))
