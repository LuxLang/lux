(.module:
  [lux #*
   [io]
   [control
    ["M" monad (#+ do Monad)]
    pipe
    ["&" state]]
   [data
    [product]]
   [math
    ["r" random]]]
  lux/test)

(def: (with-conditions [state output] computation)
  (-> [Nat Nat] (&.State Nat Nat) Bit)
  (|> computation
      (&.run state)
      product.right
      (n/= output)))

(context: "Basics"
  (<| (times +100)
      (do @
        [state r.nat
         value r.nat]
        ($_ seq
            (test "Can get the state as a value."
                  (with-conditions [state state]
                    &.get))
            (test "Can replace the state."
                  (with-conditions [state value]
                    (do &.Monad<State>
                      [_ (&.put value)]
                      &.get)))
            (test "Can update the state."
                  (with-conditions [state (n/* value state)]
                    (do &.Monad<State>
                      [_ (&.update (n/* value))]
                      &.get)))
            (test "Can use the state."
                  (with-conditions [state (inc state)]
                    (&.use inc)))
            (test "Can use a temporary (local) state."
                  (with-conditions [state (n/* value state)]
                    (&.local (n/* value)
                             &.get)))
            ))))

(context: "Structures"
  (<| (times +100)
      (do @
        [state r.nat
         value r.nat
         #let [(^open "&/") &.Functor<State>
               (^open "&/") &.Apply<State>
               (^open "&/") &.Monad<State>]]
        ($_ seq
            (test "Can use functor."
                  (with-conditions [state (inc state)]
                    (&/map inc &.get)))
            (test "Can use apply."
                  (and (with-conditions [state value]
                         (&/wrap value))
                       (with-conditions [state (n/+ value value)]
                         (&/apply (&/wrap (n/+ value))
                                  (&/wrap value)))))
            (test "Can use monad."
                  (with-conditions [state (n/+ value value)]
                    (: (&.State Nat Nat)
                       (do &.Monad<State>
                         [f (wrap n/+)
                          x (wrap value)
                          y (wrap value)]
                         (wrap (f x y))))))
            ))))

(context: "Monad transformer"
  (<| (times +100)
      (do @
        [state r.nat
         left r.nat
         right r.nat]
        (let [(^open "io/") io.Monad<IO>]
          (test "Can add state functionality to any monad."
                (|> (: (&.State' io.IO Nat Nat)
                       (do (&.Monad<State'> io.Monad<IO>)
                         [a (&.lift io.Monad<IO> (io/wrap left))
                          b (wrap right)]
                         (wrap (n/+ a b))))
                    (&.run' state)
                    io.run
                    (case> [state' output']
                           (and (n/= state state')
                                (n/= (n/+ left right) output')))))
          ))))

(context: "Loops"
  (<| (times +100)
      (do @
        [limit (|> r.nat (:: @ map (n/% +10)))
         #let [condition (do &.Monad<State>
                           [state &.get]
                           (wrap (n/< limit state)))]]
        ($_ seq
            (test "'while' will only execute if the condition is true."
                  (|> (&.while condition (&.update inc))
                      (&.run +0)
                      (case> [state' output']
                             (n/= limit state'))))
            (test "'do-while' will execute at least once."
                  (|> (&.do-while condition (&.update inc))
                      (&.run +0)
                      (case> [state' output']
                             (or (n/= limit state')
                                 (and (n/= +0 limit)
                                      (n/= +1 state'))))))
            ))))
