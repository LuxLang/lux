(.module:
  [lux #*
   [control
    ["M" monad (#+ do Monad)]
    ["&" exception (#+ exception:)]]
   [data
    ["." error (#+ Error)]
    ["." text
     format]]
   [math
    ["r" random]]]
  lux/test)

(exception: some-exception)

(exception: another-exception)

(exception: unknown-exception)

(context: "Exceptions"
  (<| (times 100)
      (do @
        [should-throw? r.bit
         which? r.bit
         should-catch? r.bit
         default-val r.nat
         some-val r.nat
         another-val r.nat
         otherwise-val r.nat
         #let [this-ex (if should-catch?
                         (if which?
                           some-exception
                           another-exception)
                         unknown-exception)
               expected (if should-throw?
                          (if should-catch?
                            (if which?
                              some-val
                              another-val)
                            otherwise-val)
                          default-val)
               actual (|> (: (Error Nat)
                             (if should-throw?
                               (&.throw this-ex [])
                               (&.return default-val)))
                          (&.catch some-exception (function (_ ex) some-val))
                          (&.catch another-exception (function (_ ex) another-val))
                          (&.otherwise (function (_ ex) otherwise-val)))]]
        (test "Catch and otherwhise handlers can properly handle the flow of exception-handling."
              (n/= expected actual)))))
