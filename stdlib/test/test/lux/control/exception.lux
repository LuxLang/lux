(;module:
  lux
  (lux [io]
       (control monad
                ["&" exception #+ exception:])
       (data [error #- fail]
             [text]
             text/format
             [number])
       ["R" math/random])
  lux/test)

(exception: Some-Exception)

(exception: Another-Exception)

(exception: Unknown-Exception)

(test: "Exceptions"
  [should-throw? R;bool
   which? R;bool
   should-catch? R;bool
   default-val R;nat
   some-val R;nat
   another-val R;nat
   otherwise-val R;nat
   #let [this-ex (if should-catch?
                   (if which?
                     Some-Exception
                     Another-Exception)
                   Unknown-Exception)
         expected (if should-throw?
                    (if should-catch?
                      (if which?
                        some-val
                        another-val)
                      otherwise-val)
                    default-val)
         actual (|> (: (Error Nat)
                       (if should-throw?
                         (&;throw this-ex "Uh-oh...")
                         (&;return default-val)))
                    (&;catch Some-Exception (function [ex] some-val))
                    (&;catch Another-Exception (function [ex] another-val))
                    (&;otherwise (function [ex] otherwise-val)))]]
  (assert "Catch and otherwhise handlers can properly handle the flow of exception-handling."
          (n.= expected actual)))
