(.module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                pipe)
       (data text/format
             [number]
             [product]
             identity
             [text "text/" Eq<Text>])
       ["r" math/random])
  lux/test)

(context: "Pipes"
  ($_ seq
      (test "Can dismiss previous pipeline results and begin a new line."
            (|> 20
                (i/* 3)
                (i/+ 4)
                (new> 0 i/inc)
                (i/= 1)))
      
      (test "Can give names to piped values within a pipeline's scope."
            (|> 5
                (let> X [(i/+ X X)])
                (i/= 10)))
      
      (test "Can do branching in pipelines."
            (and (|> 5
                     (cond> [i/even?] [(i/* 2)]
                            [i/odd?] [(i/* 3)]
                            [(new> -1)])
                     (i/= 15))
                 (|> 4
                     (cond> [i/even?] [(i/* 2)]
                            [i/odd?] [(i/* 3)])
                     (i/= 8))
                 (|> 5
                     (cond> [i/even?] [(i/* 2)]
                            [(new> -1)])
                     (i/= -1))))

      (test "Can loop within pipelines."
            (|> 1
                (loop> [(i/< 10)]
                       [i/inc])
                (i/= 10)))
      
      (test "Can use monads within pipelines."
            (|> 5
                (do> Monad<Identity>
                     [(i/* 3)]
                     [(i/+ 4)]
                     [i/inc])
                (i/= 20)))
      
      (test "Can pattern-match against piped values."
            (|> 5
                (case> 0 "zero"
                       1 "one"
                       2 "two"
                       3 "three"
                       4 "four"
                       5 "five"
                       6 "six"
                       7 "seven"
                       8 "eight"
                       9 "nine"
                       _ "???")
                (text/= "five")))
      ))
