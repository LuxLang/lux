(.module:
  [lux #*
   [control
    [monad (#+ do Monad)]]
   [data
    [bit ("bit/." Equivalence<Bit>)]
    ["." number]
    [text
     format]
    [collection
     ["." list]
     ["." set]]]
   [math
    ["r" random]
    [logic
     ["&" fuzzy]
     ["_" continuous]]]]
  lux/test)

(do-template [<desc> <hash> <gen> <triangle> <lt> <lte> <gt> <gte>]
  [(context: (format "[" <desc> "] " "Triangles")
     (<| (times |100)
         (do @
           [values (r.set <hash> |3 <gen>)
            #let [[x y z] (case (set.to-list values)
                            (^ (list x y z))
                            [x y z]

                            _
                            (undefined))]
            sample <gen>
            #let [[bottom middle top] (case (list.sort <lt> (list x y z))
                                        (^ (list bottom middle top))
                                        [bottom middle top]

                                        _
                                        (undefined))
                  triangle (<triangle> x y z)]]
           ($_ seq
               (test "The middle value will always have maximum membership."
                     (r/= _.true (&.membership middle triangle)))
               
               (test "Boundary values will always have 0 membership."
                     (and (r/= _.false (&.membership bottom triangle))
                          (r/= _.false (&.membership top triangle))))

               (test "Values within range, will have membership > 0."
                     (bit/= (r/> _.false (&.membership sample triangle))
                            (and (<gt> bottom sample)
                                 (<lt> top sample))))

               (test "Values outside of range, will have membership = 0."
                     (bit/= (r/= _.false (&.membership sample triangle))
                            (or (<lte> bottom sample)
                                (<gte> top sample))))
               ))))]

  ["Rev"  number.Hash<Rev>  r.rev  &.triangle r/< r/<= r/> r/>=]
  )

(do-template [<desc> <hash> <gen> <trapezoid> <lt> <lte> <gt> <gte>]
  [(context: (format "[" <desc> "] " "Trapezoids")
     (<| (times |100)
         (do @
           [values (r.set <hash> |4 <gen>)
            #let [[w x y z] (case (set.to-list values)
                              (^ (list w x y z))
                              [w x y z]

                              _
                              (undefined))]
            sample <gen>
            #let [[bottom middle-bottom middle-top top] (case (list.sort <lt> (list w x y z))
                                                          (^ (list bottom middle-bottom middle-top top))
                                                          [bottom middle-bottom middle-top top]

                                                          _
                                                          (undefined))
                  trapezoid (<trapezoid> w x y z)]]
           ($_ seq
               (test "The middle values will always have maximum membership."
                     (and (r/= _.true (&.membership middle-bottom trapezoid))
                          (r/= _.true (&.membership middle-top trapezoid))))
               
               (test "Boundary values will always have 0 membership."
                     (and (r/= _.false (&.membership bottom trapezoid))
                          (r/= _.false (&.membership top trapezoid))))

               (test "Values within inner range will have membership = 1"
                     (bit/= (r/= _.true (&.membership sample trapezoid))
                            (and (<gte> middle-bottom sample)
                                 (<lte> middle-top sample))))

               (test "Values within range, will have membership > 0."
                     (bit/= (r/> _.false (&.membership sample trapezoid))
                            (and (<gt> bottom sample)
                                 (<lt> top sample))))

               (test "Values outside of range, will have membership = 0."
                     (bit/= (r/= _.false (&.membership sample trapezoid))
                            (or (<lte> bottom sample)
                                (<gte> top sample))))
               ))))]

  ["Rev"  number.Hash<Rev>  r.rev  &.trapezoid r/< r/<= r/> r/>=]
  )

(def: gen-triangle
  (r.Random (&.Fuzzy Rev))
  (do r.Monad<Random>
    [x r.rev
     y r.rev
     z r.rev]
    (wrap (&.triangle x y z))))

(context: "Combinators"
  (<| (times |100)
      (do @
        [left gen-triangle
         right gen-triangle
         sample r.rev]
        ($_ seq
            (test "Union membership as as high as membership in any of its members."
                  (let [combined (&.union left right)
                        combined-membership (&.membership sample combined)]
                    (and (r/>= (&.membership sample left)
                               combined-membership)
                         (r/>= (&.membership sample right)
                               combined-membership))))
            
            (test "Intersection membership as as low as membership in any of its members."
                  (let [combined (&.intersection left right)
                        combined-membership (&.membership sample combined)]
                    (and (r/<= (&.membership sample left)
                               combined-membership)
                         (r/<= (&.membership sample right)
                               combined-membership))))
            
            (test "Complement membership is the opposite of normal membership."
                  (r/= (&.membership sample left)
                       (_.not (&.membership sample (&.complement left)))))

            (test "Membership in the difference will never be higher than in the set being subtracted."
                  (bit/= (r/> (&.membership sample right)
                              (&.membership sample left))
                         (r/< (&.membership sample left)
                              (&.membership sample (&.difference left right)))))
            ))))

(context: "From predicates and sets"
  (<| (times |100)
      (do @
        [#let [set-10 (set.from-list number.Hash<Nat> (list.n/range |0 |10))]
         sample (|> r.nat (:: @ map (n/% |20)))]
        ($_ seq
            (test "Values that satisfy a predicate have membership = 1.
                   Values that don't have membership = 0."
                  (bit/= (r/= _.true (&.membership sample (&.from-predicate n/even?)))
                         (n/even? sample)))

            (test "Values that belong to a set have membership = 1.
                   Values that don't have membership = 0."
                  (bit/= (r/= _.true (&.membership sample (&.from-set set-10)))
                         (set.member? set-10 sample)))
            ))))

(context: "Thresholds"
  (<| (times |100)
      (do @
        [fuzzy gen-triangle
         sample r.rev
         threshold r.rev
         #let [vip-fuzzy (&.cut threshold fuzzy)
               member? (&.to-predicate threshold fuzzy)]]
        ($_ seq
            (test "Can increase the threshold of membership of a fuzzy set."
                  (bit/= (r/> _.false (&.membership sample vip-fuzzy))
                         (r/> threshold (&.membership sample fuzzy))))

            (test "Can turn fuzzy sets into predicates through a threshold."
                  (bit/= (member? sample)
                         (r/> threshold (&.membership sample fuzzy))))
            ))))
