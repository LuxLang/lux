(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad])
       (data (coll [list]
                   [set])
             [bool "B/" Eq<Bool>]
             [number]
             text/format)
       ["R" math/random]
       (math/logic ["&" fuzzy]
                   continuous))
  lux/test)

(do-template [<desc> <hash> <gen> <triangle> <lt> <lte> <gt> <gte>]
  [(context: (format "[" <desc> "] " "Triangles")
     [values (R;set <hash> +3 <gen>)
      #let [[x y z] (case (set;to-list values)
                      (^ (list x y z))
                      [x y z]

                      _
                      (undefined))]
      sample <gen>
      #let [[bottom middle top] (case (list;sort <lt> (list x y z))
                                  (^ (list bottom middle top))
                                  [bottom middle top]

                                  _
                                  (undefined))
            triangle (<triangle> x y z)]]
     ($_ seq
         (test "The middle value will always have maximum membership."
               (d.= ~true (&;membership middle triangle)))
         
         (test "Boundary values will always have 0 membership."
               (and (d.= ~false (&;membership bottom triangle))
                    (d.= ~false (&;membership top triangle))))

         (test "Values within range, will have membership > 0."
               (B/= (d.> ~false (&;membership sample triangle))
                    (and (<gt> bottom sample)
                         (<lt> top sample))))

         (test "Values outside of range, will have membership = 0."
               (B/= (d.= ~false (&;membership sample triangle))
                    (or (<lte> bottom sample)
                        (<gte> top sample))))
         ))]

  ["Real" number;Hash<Real> R;real &;r.triangle r.< r.<= r.> r.>=]
  ["Deg"  number;Hash<Deg>  R;deg  &;d.triangle d.< d.<= d.> d.>=]
  )

(do-template [<desc> <hash> <gen> <trapezoid> <lt> <lte> <gt> <gte>]
  [(context: (format "[" <desc> "] " "Trapezoids")
     [values (R;set <hash> +4 <gen>)
      #let [[w x y z] (case (set;to-list values)
                        (^ (list w x y z))
                        [w x y z]

                        _
                        (undefined))]
      sample <gen>
      #let [[bottom middle-bottom middle-top top] (case (list;sort <lt> (list w x y z))
                                                    (^ (list bottom middle-bottom middle-top top))
                                                    [bottom middle-bottom middle-top top]

                                                    _
                                                    (undefined))
            trapezoid (<trapezoid> w x y z)]]
     ($_ seq
         (test "The middle values will always have maximum membership."
               (and (d.= ~true (&;membership middle-bottom trapezoid))
                    (d.= ~true (&;membership middle-top trapezoid))))
         
         (test "Boundary values will always have 0 membership."
               (and (d.= ~false (&;membership bottom trapezoid))
                    (d.= ~false (&;membership top trapezoid))))

         (test "Values within inner range will have membership = 1"
               (B/= (d.= ~true (&;membership sample trapezoid))
                    (and (<gte> middle-bottom sample)
                         (<lte> middle-top sample))))

         (test "Values within range, will have membership > 0."
               (B/= (d.> ~false (&;membership sample trapezoid))
                    (and (<gt> bottom sample)
                         (<lt> top sample))))

         (test "Values outside of range, will have membership = 0."
               (B/= (d.= ~false (&;membership sample trapezoid))
                    (or (<lte> bottom sample)
                        (<gte> top sample))))
         ))]

  ["Real" number;Hash<Real> R;real &;r.trapezoid r.< r.<= r.> r.>=]
  ["Deg"  number;Hash<Deg>  R;deg  &;d.trapezoid d.< d.<= d.> d.>=]
  )

(context: "Gaussian"
  [deviation (|> R;real (R;filter (r.> 0.0)))
   center R;real
   #let [gaussian (&;gaussian deviation center)]]
  (test "The center value will always have maximum membership."
        (d.= ~true (&;membership center gaussian))))

(def: gen-triangle
  (R;Random (&;Fuzzy Real))
  (do R;Monad<Random>
    [x R;real
     y R;real
     z R;real]
    (wrap (&;r.triangle x y z))))

(context: "Combinators"
  [left gen-triangle
   right gen-triangle
   sample R;real]
  ($_ seq
      (test "Union membership as as high as membership in any of its members."
            (let [combined (&;union left right)
                  combined-membership (&;membership sample combined)]
              (and (d.>= (&;membership sample left)
                         combined-membership)
                   (d.>= (&;membership sample right)
                         combined-membership))))
      
      (test "Intersection membership as as low as membership in any of its members."
            (let [combined (&;intersection left right)
                  combined-membership (&;membership sample combined)]
              (and (d.<= (&;membership sample left)
                         combined-membership)
                   (d.<= (&;membership sample right)
                         combined-membership))))
      
      (test "Complement membership is the opposite of normal membership."
            (d.= (&;membership sample left)
                 (~not (&;membership sample (&;complement left)))))

      (test "Membership in the difference will never be higher than in the set being subtracted."
            (B/= (d.> (&;membership sample right)
                      (&;membership sample left))
                 (d.< (&;membership sample left)
                      (&;membership sample (&;difference left right)))))
      ))

(context: "From predicates and sets"
  [#let [set-10 (set;from-list number;Hash<Nat> (list;n.range +0 +10))]
   sample (|> R;nat (:: @ map (n.% +20)))]
  ($_ seq
      (test "Values that satisfy a predicate have membership = 1.
               Values that don't have membership = 0."
            (B/= (d.= ~true (&;membership sample (&;from-predicate n.even?)))
                 (n.even? sample)))

      (test "Values that belong to a set have membership = 1.
               Values that don't have membership = 0."
            (B/= (d.= ~true (&;membership sample (&;from-set set-10)))
                 (set;member? set-10 sample)))
      ))

(context: "Thresholds"
  [fuzzy gen-triangle
   sample R;real
   threshold R;deg
   #let [vip-fuzzy (&;cut threshold fuzzy)
         member? (&;to-predicate threshold fuzzy)]]
  ($_ seq
      (test "Can increase the threshold of membership of a fuzzy set."
            (B/= (d.> ~false (&;membership sample vip-fuzzy))
                 (d.> threshold (&;membership sample fuzzy))))

      (test "Can turn fuzzy sets into predicates through a threshold."
            (B/= (member? sample)
                 (d.> threshold (&;membership sample fuzzy))))
      ))
