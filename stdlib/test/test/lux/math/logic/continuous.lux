(;module:
  lux
  (lux [io]
       (control monad)
       (codata function)
       ["R" random]
       pipe
       ["&" math/logic/continuous])
  lux/test)

(test: "Operations"
  [left R;deg
   right R;deg]
  ($_ seq
      (assert "AND is the minimum."
              (let [result (&;and~ left right)]
                (and (d.<= left result)
                     (d.<= right result))))

      (assert "OR is the maximum."
              (let [result (&;or~ left right)]
                (and (d.>= left result)
                     (d.>= right result))))

      (assert "Double negation results in the original value."
              (d.= left (&;not~ (&;not~ left))))

      (assert "Every value is equivalent to itself."
              (and (d.>= left
                         (&;=~ left left))
                   (d.>= right
                         (&;=~ right right))))
      ))
