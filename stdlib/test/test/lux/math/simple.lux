(;module:
  lux
  (lux [io]
       (control monad)
       (data [text "Text/" Monoid<Text>]
             text/format
             [bool "b/" Eq<Bool>]
             [number "r/" Number<Real>]
             (coll [list "List/" Fold<List> Functor<List>])
             [product])
       (codata function)
       ["R" random]
       pipe
       ["&" math/simple])
  lux/test)

(do-template [<category> <generator> <=> <+> <-> <*> </> <%> <0>]
  [(test: (format <category> " arihtmetic")
     #seed +1786783812616344121
     [x <generator>
      y (|> <generator> (R;filter (. not (<=> <0>))))]
     ($_ seq
         (assert "Can add."
                 (<=> (<+> y x) (&;+ y x)))
         (assert "Can subtract."
                 (<=> (<-> y x) (&;- y x)))
         (assert "Can multiply."
                 (<=> (<*> y x) (&;* y x)))
         (assert "Can divide."
                 (<=> (</> y x) (&;/ y x)))
         (assert "Can get remainder."
                 (<=> (<%> y x) (&;% y x)))
         ))]

  ["Nat"  R;nat  n.= n.+ n.- n.* n./ n.% +0]
  ["Int"  R;int  i.= i.+ i.- i.* i./ i.%  0]
  ["Real" R;real r.= r.+ r.- r.* r./ r.%  0.0]
  ["Deg" R;deg d.= d.+ d.- d.* d./ d.% .0]
  )

(do-template [<category> <generator> <lt> <lte> <gt> <gte>]
  [(test: (format <category> " comparisons")
     [x <generator>
      y <generator>]
     ($_ seq
         (assert "<"
                 (b/= (<lt> y x) (&;< y x)))
         (assert "<="
                 (b/= (<lte> y x) (&;<= y x)))
         (assert ">"
                 (b/= (<gt> y x) (&;> y x)))
         (assert ">="
                 (b/= (<gte> y x) (&;>= y x)))
         ))]

  ["Nat"  R;nat  n.< n.<= n.> n.>=]
  ["Int"  R;int  i.< i.<= i.> i.>=]
  ["Real" R;real r.< r.<= r.> r.>=]
  ["Deg" R;deg d.< d.<= d.> d.>=]
  )

(do-template [<category> <generator> <=> <min> <max>]
  [(test: (format <category> " min & max")
     [x <generator>
      y <generator>]
     ($_ seq
         (assert "Min."
                 (<=> (<min> y x) (&;min y x)))
         (assert "Max."
                 (<=> (<max> y x) (&;max y x)))
         ))]

  ["Nat" R;nat n.= n.min n.max]
  ["Int" R;int i.= i.min i.max]
  )

(do-template [<category> <generator> <=> <inc> <dec>]
  [(test: (format <category> " inc & dec")
     [x <generator>]
     ($_ seq
         (assert "Inc."
                 (<=> (<inc> x) (&;inc x)))
         (assert "Dec."
                 (<=> (<dec> x) (&;dec x)))
         ))]

  ["Nat" R;nat n.= n.inc n.dec]
  ["Int" R;int i.= i.inc i.dec]
  )

(do-template [<category> <generator> <even?> <odd?>]
  [(test: (format <category> " even & odd")
     [x <generator>]
     ($_ seq
         (assert "Even."
                 (b/= (<even?> x) (&;even? x)))
         (assert "Odd."
                 (b/= (<odd?> x) (&;odd? x)))
         ))]

  ["Nat" R;nat n.even? n.odd?]
  ["Int" R;int i.even? i.odd?]
  )
