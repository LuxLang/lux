(;module:
  lux
  (lux [io]
       (control monad)
       (data [text "Text/" Monoid<Text>]
             text/format
             [bool "b/" Eq<Bool>]
             [number "r/" Number<Real>]
             (coll [list "List/" Fold<List> Functor<List>])
             [product])
       (codata function)
       [math]
       ["R" random]
       pipe
       ["&" math/complex])
  lux/test)

## Based on org.apache.commons.math4.complex.Complex
## https://github.com/apache/commons-math/blob/master/src/test/java/org/apache/commons/math4/complex/ComplexTest.java

(def: margin-of-error Real 1.0e-10)

(def: (within? margin standard value)
  (-> Real &;Complex &;Complex Bool)
  (let [real-dist (r/abs (r.- (get@ #&;real standard)
                              (get@ #&;real value)))
        imgn-dist (r/abs (r.- (get@ #&;imaginary standard)
                              (get@ #&;imaginary value)))]
    (and (r.< margin real-dist)
         (r.< margin imgn-dist))))

(def: gen-dim
  (R;Random Real)
  (do R;Monad<Random>
    [factor (|> R;nat (:: @ map (|>. (n.% +1000) (n.max +1))))
     measure (|> R;real (R;filter (r.> 0.0)))]
    (wrap (r.* (|> factor nat-to-int int-to-real)
               measure))))

(def: gen-complex
  (R;Random &;Complex)
  (do R;Monad<Random>
    [real gen-dim
     imaginary gen-dim]
    (wrap (&;complex real imaginary))))

(test: "Construction"
  [real gen-dim
   imaginary gen-dim]
  ($_ seq
      (assert "Can build and tear apart complex numbers"
              (let [r+i (&;complex real imaginary)]
                (and (r.= real (get@ #&;real r+i))
                     (r.= imaginary (get@ #&;imaginary r+i)))))

      (assert "If either the real part or the imaginary part is NaN, the composite is NaN."
              (and (&;nan? (&;complex number;nan imaginary))
                   (&;nan? (&;complex real number;nan))))
      ))

(test: "Absolute value"
  [real gen-dim
   imaginary gen-dim]
  ($_ seq
      (assert "Absolute value of complex >= absolute value of any of the parts."
              (let [r+i (&;complex real imaginary)
                    abs (get@ #&;real (&;c.abs r+i))]
                (and (r.>= (r/abs real) abs)
                     (r.>= (r/abs imaginary) abs))))

      (assert "The absolute value of a complex number involving a NaN on either dimension, results in a NaN value."
              (and (number;nan? (get@ #&;real (&;c.abs (&;complex number;nan imaginary))))
                   (number;nan? (get@ #&;real (&;c.abs (&;complex real number;nan))))))

      (assert "The absolute value of a complex number involving an infinity on either dimension, results in an infinite value."
              (and (r.= number;+inf (get@ #&;real (&;c.abs (&;complex number;+inf imaginary))))
                   (r.= number;+inf (get@ #&;real (&;c.abs (&;complex real number;+inf))))
                   (r.= number;+inf (get@ #&;real (&;c.abs (&;complex number;-inf imaginary))))
                   (r.= number;+inf (get@ #&;real (&;c.abs (&;complex real number;-inf))))))
      ))

(test: "Addidion, substraction, multiplication and division"
  [x gen-complex
   y gen-complex
   factor gen-dim]
  ($_ seq
      (assert "Adding 2 complex numbers is the same as adding their parts."
              (let [z (&;c.+ y x)]
                (and (&;c.= z
                            (&;complex (r.+ (get@ #&;real y)
                                            (get@ #&;real x))
                                       (r.+ (get@ #&;imaginary y)
                                            (get@ #&;imaginary x)))))))

      (assert "Subtracting 2 complex numbers is the same as adding their parts."
              (let [z (&;c.- y x)]
                (and (&;c.= z
                            (&;complex (r.- (get@ #&;real y)
                                            (get@ #&;real x))
                                       (r.- (get@ #&;imaginary y)
                                            (get@ #&;imaginary x)))))))

      (assert "Subtraction is the inverse of addition."
              (and (|> x (&;c.+ y) (&;c.- y) (within? margin-of-error x))
                   (|> x (&;c.- y) (&;c.+ y) (within? margin-of-error x))))

      (assert "Division is the inverse of multiplication."
              (|> x (&;c.* y) (&;c./ y) (within? margin-of-error x)))

      (assert "Scalar division is the inverse of scalar multiplication."
              (|> x (&;c.*' factor) (&;c./' factor) (within? margin-of-error x)))

      (assert "If you subtract the remainder, all divisions must be exact."
              (let [rem (&;c.% y x)
                    quotient (|> x (&;c.- rem) (&;c./ y))
                    floored (|> quotient
                                (update@ #&;real math;floor)
                                (update@ #&;imaginary math;floor))
                    (^open "&/") &;Codec<Text,Complex>]
                (within? 0.000000000001
                         x
                         (|> quotient (&;c.* y) (&;c.+ rem)))))
      ))

(test: "Conjugate, reciprocal, signum, negation"
  [x gen-complex]
  ($_ seq
      (assert "Conjugate has same real part as original, and opposite of imaginary part."
              (let [cx (&;conjugate x)]
                (and (r.= (get@ #&;real x)
                          (get@ #&;real cx))
                     (r.= (r/negate (get@ #&;imaginary x))
                          (get@ #&;imaginary cx)))))

      (assert "The reciprocal functions is its own inverse."
              (|> x &;reciprocal &;reciprocal (within? margin-of-error x)))

      (assert "x*(x^-1) = 1"
              (|> x (&;c.* (&;reciprocal x)) (within? margin-of-error &;one)))

      (assert "Absolute value of signum is always root2(2), 1 or 0."
              (let [signum-abs (|> x &;c.signum &;c.abs (get@ #&;real))]
                (or (r.= 0.0 signum-abs)
                    (r.= 1.0 signum-abs)
                    (r.= (math;root2 2.0) signum-abs))))

      (assert "Negation is its own inverse."
              (let [there (&;c.negate x)
                    back-again (&;c.negate there)]
                (and (not (&;c.= there x))
                     (&;c.= back-again x))))

      (assert "Negation doesn't change the absolute value."
              (r.= (get@ #&;real (&;c.abs x))
                   (get@ #&;real (&;c.abs (&;c.negate x)))))
      ))

## ## Don't know how to test complex trigonometry properly.
## (test: "Trigonometry"
##   [x gen-complex]
##   ($_ seq
##       (assert "Arc-sine is the inverse of sine."
##               (|> x &;sin &;asin (within? margin-of-error x)))

##       (assert "Arc-cosine is the inverse of cosine."
##               (|> x &;cos &;acos (within? margin-of-error x)))

##       (assert "Arc-tangent is the inverse of tangent."
##               (|> x &;tan &;atan (within? margin-of-error x))))
##   )

(test: "Power 2 and exponential/logarithm"
  [x gen-complex]
  ($_ seq
      (assert "Square root is inverse of power 2.0"
              (|> x (&;pow' 2.0) &;root2 (within? margin-of-error x)))

      (assert "Logarithm is inverse of exponentiation."
              (|> x &;log &;exp (within? margin-of-error x)))
      ))

(test: "Complex roots"
  [sample gen-complex
   degree (|> R;nat (:: @ map (|>. (n.max +1) (n.% +5))))]
  (assert "Can calculate the N roots for any complex number."
          (|> sample
              (&;nth-roots degree)
              (List/map (&;pow' (|> degree nat-to-int int-to-real)))
              (list;every? (within? margin-of-error sample)))))

(test: "Codec"
  [sample gen-complex
   #let [(^open "c/") &;Codec<Text,Complex>]]
  (assert "Can encode/decode complex numbers."
          (|> sample c/encode c/decode
              (case> (#;Right output)
                     (&;c.= sample output)

                     _
                     false))))
