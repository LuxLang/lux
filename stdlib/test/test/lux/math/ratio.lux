##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data [text "Text/" Monoid<Text>]
             text/format
             [bool "b/" Eq<Bool>]
             [number "r/" Number<Real>]
             (struct [list "List/" Fold<List> Functor<List>])
             [product])
       (codata function)
       (math ["R" random])
       pipe
       ["&" math/ratio "&/" Number<Ratio>])
  lux/test)

(def: gen-ratio
  (R;Random &;Ratio)
  (do R;Monad<Random>
    [numerator R;nat
     denominator (|> R;nat (R;filter (|>. (n.= +0) not)))]
    (wrap (&;ratio numerator denominator))))

(test: "Normalization"
  [denom1 R;nat
   denom2 R;nat
   sample gen-ratio]
  ($_ seq
      (assert "All zeroes are the same."
              (&;q.= (&;ratio +0 denom1)
                     (&;ratio +0 denom2)))

      (assert "All ratios are built normalized."
              (|> sample &;normalize (&;q.= sample)))
      ))

(test: "Arithmetic"
  [x gen-ratio
   y gen-ratio
   #let [min (&;q.min x y)
         max (&;q.max x y)]]
  ($_ seq
      (assert "Addition and subtraction are opposites."
              (and (|> max (&;q.- min) (&;q.+ min) (&;q.= max))
                   (|> max (&;q.+ min) (&;q.- min) (&;q.= max))))

      (assert "Multiplication and division are opposites."
              (and (|> max (&;q./ min) (&;q.* min) (&;q.= max))
                   (|> max (&;q.* min) (&;q./ min) (&;q.= max))))

      (assert "Modulus by a larger ratio doesn't change the value."
              (|> min (&;q.% max) (&;q.= min)))

      (assert "Modulus by a smaller ratio results in a value smaller than the limit."
              (|> max (&;q.% min) (&;q.< min)))

      (assert "Can get the remainder of a division."
              (let [remainder (&;q.% min max)
                    multiple (&;q.- remainder max)
                    factor (&;q./ min multiple)]
                (and (|> factor (get@ #&;denominator) (n.= +1))
                     (|> factor (&;q.* min) (&;q.+ remainder) (&;q.= max)))))
      ))

(test: "Negation, absolute value and signum"
  [sample gen-ratio]
  ($_ seq
      (assert "Negation is it's own inverse."
              (let [there (&/negate sample)
                    back-again (&/negate there)]
                (and (not (&;q.= there sample))
                     (&;q.= back-again sample))))

      (assert "All ratios are already at their absolute value."
              (|> sample &/abs (&;q.= sample)))
      
      (assert "Signum is the identity."
              (|> sample (&;q.* (&/signum sample)) (&;q.= sample)))
      ))

(test: "Order"
  [x gen-ratio
   y gen-ratio]
  ($_ seq
      (assert "Can compare ratios."
              (and (or (&;q.<= y x)
                       (&;q.> y x))
                   (or (&;q.>= y x)
                       (&;q.< y x))))
      ))

(test: "Codec"
  [sample gen-ratio
   #let [(^open "&/") &;Codec<Text,Ratio>]]
  (assert "Can encode/decode ratios."
          (|> sample &/encode &/decode
              (case> (#;Right output)
                     (&;q.= sample output)
                     
                     _
                     false))))
