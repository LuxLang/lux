(.module:
  [lux #*
   [io]
   [control
    [monad (#+ do Monad)]]
   [data
    ["E" error]]
   [math
    ["r" random]]
   [time
    ["@" duration]]]
  lux/test)

(def: #export duration
  (r.Random @.Duration)
  (|> r.int (:: r.Monad<Random> map @.from-millis)))

(context: "Conversion."
  (<| (times +100)
      (do @
        [millis r.int]
        (test "Can convert from/to milliseconds."
              (|> millis @.from-millis @.to-millis (i/= millis))))))

(context: "Equivalence."
  (<| (times +100)
      (do @
        [sample duration
         #let [(^open "@/") @.Equivalence<Duration>]]
        (test "Every duration equals itself."
              (@/= sample sample)))))

(context: "Order."
  (<| (times +100)
      (do @
        [reference duration
         sample duration
         #let [(^open "@/") @.Order<Duration>]]
        (test "Can compare times."
              (and (or (@/< reference sample)
                       (@/>= reference sample))
                   (or (@/> reference sample)
                       (@/<= reference sample)))))))

(context: "Arithmetic."
  (<| (times +100)
      (do @
        [sample (|> duration (:: @ map (@.frame @.day)))
         frame duration
         factor (|> r.int (:: @ map (|>> (i/% 10) (i/max 1))))
         #let [(^open "@/") @.Order<Duration>]]
        ($_ seq
            (test "Can scale a duration."
                  (|> sample (@.scale factor) (@.query sample) (i/= factor)))
            (test "Scaling a duration by one does not change it."
                  (|> sample (@.scale 1) (@/= sample)))
            (test "Merging with the empty duration changes nothing."
                  (|> sample (@.merge @.empty) (@/= sample)))
            (test "Merging a duration with it's opposite yields an empty duration."
                  (|> sample (@.merge (@.scale -1 sample)) (@/= @.empty)))
            (test "Can frame a duration in terms of another."
                  (cond (and (@.positive? frame) (@.positive? sample))
                        (|> sample (@.frame frame) (@/< frame))

                        (and (@.negative? frame) (@.negative? sample))
                        (|> sample (@.frame frame) (@/> frame))

                        (or (or (@.neutral? frame) (@.neutral? sample))
                            (|> sample
                                (@.frame frame)
                                (@.scale -1)
                                (@/< (if (@.negative? frame)
                                       (@.scale -1 frame)
                                       frame))))))))))

(context: "Codec"
  (<| (times +100)
      (do @
        [sample duration
         #let [(^open "@/") @.Equivalence<Duration>
               (^open "@/") @.Codec<Text,Duration>]]
        (test "Can encode/decode durations."
              (E.default false
                         (do E.Monad<Error>
                           [decoded (|> sample @/encode @/decode)]
                           (wrap (@/= sample decoded))))))))
