(.module:
  [lux #*
   [io]
   [control
    [monad (#+ do Monad)]]
   [data
    ["E" error]]
   [math
    ["r" random]]
   [time
    ["@" duration]]]
  lux/test)

(def: #export duration
  (r.Random @.Duration)
  (|> r.int (:: r.monad map @.from-millis)))

(context: "Conversion."
  (<| (times 100)
      (do @
        [millis r.int]
        (test "Can convert from/to milliseconds."
              (|> millis @.from-millis @.to-millis (i/= millis))))))

(context: "Equivalence."
  (<| (times 100)
      (do @
        [sample duration
         #let [(^open "@/.") @.equivalence]]
        (test "Every duration equals itself."
              (@/= sample sample)))))

(context: "Order."
  (<| (times 100)
      (do @
        [reference duration
         sample duration
         #let [(^open "@/.") @.order]]
        (test "Can compare times."
              (and (or (@/< reference sample)
                       (@/>= reference sample))
                   (or (@/> reference sample)
                       (@/<= reference sample)))))))

(context: "Arithmetic."
  (<| (times 100)
      (do @
        [sample (|> duration (:: @ map (@.frame @.day)))
         frame duration
         factor (|> r.int (:: @ map (|>> (i/% +10) (i/max +1))))
         #let [(^open "@/.") @.order]]
        ($_ seq
            (test "Can scale a duration."
                  (|> sample (@.scale-up factor) (@.query sample) (i/= factor)))
            (test "Scaling a duration by one does not change it."
                  (|> sample (@.scale-up +1) (@/= sample)))
            (test "Merging with the empty duration changes nothing."
                  (|> sample (@.merge @.empty) (@/= sample)))
            (test "Merging a duration with it's opposite yields an empty duration."
                  (|> sample (@.merge (@.scale-up -1 sample)) (@/= @.empty)))))))
