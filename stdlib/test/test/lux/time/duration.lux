(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad])
       (math ["r" random])
       (time ["@" duration]))
  lux/test)

(def: duration
  (r;Random @;Duration)
  (|> r;int (:: r;Monad<Random> map @;from-millis)))

(context: "Conversion."
  [millis r;int]
  (test "Can convert from/to milliseconds."
        (|> millis @;from-millis @;to-millis (i.= millis))))

(context: "Equality"
  [sample duration
   #let [(^open "@/") @;Eq<Duration>]]
  (test "Every duration equals itself."
        (@/= sample sample)))

(context: "Order"
  [reference duration
   sample duration
   #let [(^open "@/") @;Order<Duration>]]
  (test "Can compare times."
        (and (or (@/< reference sample)
                 (@/>= reference sample))
             (or (@/> reference sample)
                 (@/<= reference sample)))))

(context: "Arithmetic."
  #seed +16674263968423793
  [sample (|> duration (:: @ map (@;frame @;day)))
   frame duration
   factor (|> r;int (:: @ map (|>. (i.% 10) (i.max 1))))
   #let [(^open "@/") @;Order<Duration>]]
  ($_ seq
      (test "Can scale a duration."
            (|> sample (@;scale factor) (@;query sample) (i.= factor)))
      (test "Scaling a duration by one does not change it."
            (|> sample (@;scale 1) (@/= sample)))
      (test "Merging with the empty duration changes nothing."
            (|> sample (@;merge @;empty) (@/= sample)))
      (test "Merging a duration with it's opposite yields an empty duration."
            (|> sample (@;merge (@;scale -1 sample)) (@/= @;empty)))
      (test "Can frame a duration in terms of another."
            (if (or (and (@;positive? frame) (@;positive? sample))
                    (and (@;negative? frame) (@;negative? sample)))
              (|> sample (@;frame frame) (@/< frame))
              (or (or (@;neutral? frame) (@;neutral? sample))
                  (|> sample (@;frame frame) (@;scale -1) (@/< (if (@;negative? frame)
                                                                 (@;scale -1 frame)
                                                                 frame))))))
      ))
