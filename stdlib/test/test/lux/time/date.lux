(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad])
       (math ["r" random "r/" Monad<Random>])
       (time ["@" date]))
  lux/test)

(def: month
  (r;Random @;Month)
  (r;either (r;either (r;either (r/wrap #@;January)
                                (r;either (r/wrap #@;February)
                                          (r/wrap #@;March)))
                      (r;either (r/wrap #@;April)
                                (r;either (r/wrap #@;May)
                                          (r/wrap #@;June))))
            (r;either (r;either (r/wrap #@;July)
                                (r;either (r/wrap #@;August)
                                          (r/wrap #@;September)))
                      (r;either (r/wrap #@;October)
                                (r;either (r/wrap #@;November)
                                          (r/wrap #@;December))))))

(context: "(Month) Eq."
  [sample month
   #let [(^open "@/") @;Eq<Month>]]
  (test "Every value equals itself."
        (@/= sample sample)))

(context: "(Month) Order."
  [reference month
   sample month
   #let [(^open "@/") @;Order<Month>]]
  (test "Valid Order."
        (and (or (@/< reference sample)
                 (@/>= reference sample))
             (or (@/> reference sample)
                 (@/<= reference sample)))))

(context: "(Month) Enum."
  [sample month
   #let [(^open "@/") @;Enum<Month>]]
  (test "Valid Enum."
        (and (not (@/= (@/succ sample)
                       sample))
             (not (@/= (@/pred sample)
                       sample))
             (|> sample @/succ @/pred (@/= sample))
             (|> sample @/pred @/succ (@/= sample)))))

(def: day
  (r;Random @;Day)
  (r;either (r;either (r;either (r/wrap #@;Sunday)
                                (r/wrap #@;Monday))
                      (r;either (r/wrap #@;Tuesday)
                                (r/wrap #@;Wednesday)))
            (r;either (r;either (r/wrap #@;Thursday)
                                (r/wrap #@;Friday))
                      (r/wrap #@;Saturday))))

(context: "(Day) Eq."
  [sample day
   #let [(^open "@/") @;Eq<Day>]]
  (test "Every value equals itself."
        (@/= sample sample)))

(context: "(Day) Order."
  [reference day
   sample day
   #let [(^open "@/") @;Order<Day>]]
  (test "Valid Order."
        (and (or (@/< reference sample)
                 (@/>= reference sample))
             (or (@/> reference sample)
                 (@/<= reference sample)))))

(context: "(Day) Enum."
  [sample day
   #let [(^open "@/") @;Enum<Day>]]
  (test "Valid Enum."
        (and (not (@/= (@/succ sample)
                       sample))
             (not (@/= (@/pred sample)
                       sample))
             (|> sample @/succ @/pred (@/= sample))
             (|> sample @/pred @/succ (@/= sample)))))
