(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                pipe)
       (data [text]
             text/format
             ["E" error]
             [number "Int/" Number<Int>])
       (math ["r" random])
       (time ["@" instant]
             ["@d" duration]
             ["@date" date]))
  lux/test
  (// ["_;" duration]))

(def: boundary Int 99_999_999_999_999)

(def: #export instant
  (r;Random @;Instant)
  (|> r;int (:: r;Monad<Random> map (|>> (i/% boundary) @;from-millis))))

(context: "Conversion."
  (<| (times +100)
      (do @
        [millis r;int]
        (test "Can convert from/to milliseconds."
              (|> millis @;from-millis @;to-millis (i/= millis))))))

(context: "Equality"
  (<| (times +100)
      (do @
        [sample instant
         #let [(^open "@/") @;Eq<Instant>]]
        (test "Every instant equals itself."
              (@/= sample sample)))))

(context: "Order"
  (<| (times +100)
      (do @
        [reference instant
         sample instant
         #let [(^open "@/") @;Order<Instant>]]
        (test "Can compare instants."
              (and (or (@/< reference sample)
                       (@/>= reference sample))
                   (or (@/> reference sample)
                       (@/<= reference sample)))))))

(context: "Enum"
  (<| (times +100)
      (do @
        [sample instant
         #let [(^open "@/") @;Enum<Instant>]]
        (test "Valid Enum."
              (and (not (@/= (@/succ sample)
                             sample))
                   (not (@/= (@/pred sample)
                             sample))
                   (|> sample @/succ @/pred (@/= sample))
                   (|> sample @/pred @/succ (@/= sample)))))))

(context: "Arithmetic"
  (<| (times +100)
      (do @
        [sample instant
         span _duration;duration
         #let [(^open "@/") @;Eq<Instant>
               (^open "@d/") @d;Eq<Duration>]]
        ($_ seq
            (test "The span of a instant and itself has an empty duration."
                  (|> sample (@;span sample) (@d/= @d;empty)))
            (test "Can shift a instant by a duration."
                  (|> sample (@;shift span) (@;span sample) (@d/= span)))
            (test "Can obtain the time-span between the epoch and an instant."
                  (|> sample @;relative @;absolute (@/= sample)))
            (test "All instants are relative to the epoch."
                  (|> @;epoch (@;shift (@;relative sample)) (@/= sample)))))))

(context: "Codec"
  (<| (seed +9863552679229274604)
      ## (times +100)
      (do @
        [sample instant
         #let [(^open "@/") @;Eq<Instant>
               (^open "@/") @;Codec<Text,Instant>]]
        (test "Can encode/decode instants."
              (|> sample
                  @/encode
                  @/decode
                  (case> (#E;Success decoded)
                         (@/= sample decoded)

                         (#E;Error error)
                         false))))))
