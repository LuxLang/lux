(;module:
  lux
  (lux [io]
       (control [monad #+ do Monad]
                pipe)
       (data [text]
             text/format
             ["R" result]
             [number "Int/" Number<Int>])
       (math ["r" random])
       (time ["@" instant]
             ["@d" duration]
             ["@date" date]))
  lux/test)

(def: boundary Int 99_999_999_999_999)

(def: instant
  (r;Random @;Instant)
  (|> r;int (:: r;Monad<Random> map (|>. (i.% boundary) @;from-millis))))

(def: duration
  (r;Random @d;Duration)
  (|> r;int (:: r;Monad<Random> map @d;from-millis)))

(context: "Conversion."
  [millis r;int]
  (test "Can convert from/to milliseconds."
        (|> millis @;from-millis @;to-millis (i.= millis))))

(context: "Equality"
  [sample instant
   #let [(^open "@/") @;Eq<Instant>]]
  (test "Every instant equals itself."
        (@/= sample sample)))

(context: "Order"
  [reference instant
   sample instant
   #let [(^open "@/") @;Order<Instant>]]
  (test "Can compare instants."
        (and (or (@/< reference sample)
                 (@/>= reference sample))
             (or (@/> reference sample)
                 (@/<= reference sample)))))

(context: "Arithmetic"
  [sample instant
   span duration
   #let [(^open "@/") @;Eq<Instant>
         (^open "@d/") @d;Eq<Duration>]]
  ($_ seq
      (test "The span of a instant and itself has an empty duration."
            (|> sample (@;span sample) (@d/= @d;empty)))
      (test "Can shift a instant by a duration."
            (|> sample (@;shift span) (@;span sample) (@d/= span)))
      (test "Can obtain the time-span between the epoch and an instant."
            (|> sample @;relative @;absolute (@/= sample)))
      (test "All instants are relative to the epoch."
            (|> @;epoch (@;shift (@;relative sample)) (@/= sample)))))

(context: "Codec"
  [sample instant
   #let [(^open "@/") @;Eq<Instant>
         (^open "@/") @;Codec<Text,Instant>]]
  (test "Can encode/decode instants."
        (|> sample
            @/encode
            @/decode
            (case> (#R;Success decoded)
                   (@/= sample decoded)

                   (#R;Error error)
                   false))))
