(.module:
  [lux #*
   [control
    [monad (#+ do)]]
   [data
    ["e" error]
    ["." text
     format
     ["l" lexer]]
    [collection
     ["." list]
     ["dict" dictionary (#+ Dictionary)]]]
   [math
    ["r" random ("r/." Monad<Random>)]]
   [macro
    ["." code]]
   [compiler
    [default
     ["&" syntax]]]
   test])

(def: default-cursor
  Cursor
  {#.module ""
   #.line   0
   #.column 0})

(def: name-part^
  (r.Random Text)
  (do r.Monad<Random>
    [#let [digits "0123456789"
           delimiters (format "()[]{}#." &.text-delimiter)
           space (format " " text.new-line)
           invalid-range (format digits delimiters space)
           char-gen (|> r.nat
                        (:: @ map (|>> (n/% 256) (n/max 1)))
                        (r.filter (function (_ sample)
                                    (not (text.contains? (text.from-code sample)
                                                         invalid-range)))))]
     size (|> r.nat (:: @ map (|>> (n/% 20) (n/max 1))))]
    (r.text char-gen size)))

(def: name^
  (r.Random Name)
  (r.and name-part^ name-part^))

(def: code^
  (r.Random Code)
  (let [numeric^ (: (r.Random Code)
                    ($_ r.either
                        (|> r.bit (r/map code.bit))
                        (|> r.nat (r/map code.nat))
                        (|> r.int (r/map code.int))
                        (|> r.rev (r/map code.rev))
                        (|> r.frac (r/map code.frac))))
        textual^ (: (r.Random Code)
                    ($_ r.either
                        (do r.Monad<Random>
                          [size (|> r.nat (r/map (n/% 20)))]
                          (|> (r.unicode size) (r/map code.text)))
                        (|> name^ (r/map code.identifier))
                        (|> name^ (r/map code.tag))))
        simple^ (: (r.Random Code)
                   ($_ r.either
                       numeric^
                       textual^))]
    (r.rec
     (function (_ code^)
       (let [multi^ (do r.Monad<Random>
                      [size (|> r.nat (r/map (n/% 3)))]
                      (r.list size code^))
             composite^ (: (r.Random Code)
                           ($_ r.either
                               (|> multi^ (r/map code.form))
                               (|> multi^ (r/map code.tuple))
                               (do r.Monad<Random>
                                 [size (|> r.nat (r/map (n/% 3)))]
                                 (|> (r.list size (r.and code^ code^))
                                     (r/map code.record)))))]
         (r.either simple^
                   composite^))))))

(context: "Lux code syntax."
  (<| (times 100)
      (do @
        [sample code^
         other code^]
        ($_ seq
            (test "Can parse Lux code."
                  (case (let [source-code (%code sample)]
                          (&.parse "" (dict.new text.Hash<Text>) (text.size source-code)
                                   [default-cursor 0 source-code]))
                    (#e.Error error)
                    #0

                    (#e.Success [_ parsed])
                    (:: code.Equivalence<Code> = parsed sample)))
            (test "Can parse Lux multiple code nodes."
                  (let [source-code (format (%code sample) " " (%code other))
                        source-code//size (text.size source-code)]
                    (case (&.parse "" (dict.new text.Hash<Text>) source-code//size
                                   [default-cursor 0 source-code])
                      (#e.Error error)
                      #0

                      (#e.Success [remaining =sample])
                      (case (&.parse "" (dict.new text.Hash<Text>) source-code//size
                                     remaining)
                        (#e.Error error)
                        #0

                        (#e.Success [_ =other])
                        (and (:: code.Equivalence<Code> = sample =sample)
                             (:: code.Equivalence<Code> = other =other))))))
            ))))

(def: comment-text^
  (r.Random Text)
  (let [char-gen (|> r.nat (r.filter (|>> (n/= (`` (char (~~ (static text.new-line))))) not)))]
    (do r.Monad<Random>
      [size (|> r.nat (r/map (n/% 20)))]
      (r.text char-gen size))))

(def: comment^
  (r.Random Text)
  (do r.Monad<Random>
    [comment comment-text^]
    (wrap (format "## " comment text.new-line))))

(context: "Multi-line text & comments."
  (<| (seed 12137892244981970631)
      ## (times 100)
      (do @
        [sample code^
         comment comment^]
        ($_ seq
            (test "Can handle comments."
                  (case (let [source-code (format comment (%code sample))
                              source-code//size (text.size source-code)]
                          (&.parse "" (dict.new text.Hash<Text>) source-code//size
                                   [default-cursor 0 source-code]))
                    (#e.Error error)
                    #0

                    (#e.Success [_ parsed])
                    (:: code.Equivalence<Code> = parsed sample)))
            ))))
