(.module:
  [lux #*
   [io]
   [control
    [monad (#+ do)]
    pipe]
   [concurrency
    ["." atom]]
   [data
    ["e" error]
    ["." product]
    [text
     format]]
   [math
    ["r" random]]
   [type ("type/." Equivalence<Type>)]
   [macro
    ["." code]]
   [compiler
    [default
     ["." init]
     ["." phase
      [analysis
       ["." scope]
       [".A" type]]
      [extension
       [".E" analysis]]]]]
   test]
  [///
   ["_." primitive]])

(do-template [<name> <success> <failure>]
  [(def: (<name> procedure params output-type)
     (-> Text (List Code) Type Bit)
     (|> (scope.with-scope ""
           (typeA.with-type output-type
             (_primitive.analyse (` ((~ (code.text procedure)) (~+ params))))))
         (phase.run [analysisE.bundle (init.compiler [])])
         (case> (#e.Success _)
                <success>

                (#e.Error error)
                <failure>)))]

  [check-success+ #1 #0]
  [check-failure+ #0 #1]
  )

(context: "Lux procedures"
  (<| (times 100)
      (do @
        [[primT primC] _primitive.primitive
         [antiT antiC] (|> _primitive.primitive
                           (r.filter (|>> product.left (type/= primT) not)))]
        ($_ seq
            (test "Can test for reference equality."
                  (check-success+ "lux is" (list primC primC) Bit))
            (test "Reference equality must be done with elements of the same type."
                  (check-failure+ "lux is" (list primC antiC) Bit))
            (test "Can 'try' risky IO computations."
                  (check-success+ "lux try"
                                  (list (` ([(~' _) (~' _)] (~ primC))))
                                  (type (Either Text primT))))
            ))))

(context: "Bit procedures"
  (<| (times 100)
      (do @
        [subjectC (|> r.nat (:: @ map code.nat))
         signedC (|> r.int (:: @ map code.int))
         paramC (|> r.nat (:: @ map code.nat))]
        ($_ seq
            (test "Can perform bit 'and'."
                  (check-success+ "lux bit and" (list subjectC paramC) Nat))
            (test "Can perform bit 'or'."
                  (check-success+ "lux bit or" (list subjectC paramC) Nat))
            (test "Can perform bit 'xor'."
                  (check-success+ "lux bit xor" (list subjectC paramC) Nat))
            (test "Can shift bit pattern to the left."
                  (check-success+ "lux bit left-shift" (list subjectC paramC) Nat))
            (test "Can shift bit pattern to the right."
                  (check-success+ "lux bit logical-right-shift" (list subjectC paramC) Nat))
            (test "Can shift signed bit pattern to the right."
                  (check-success+ "lux bit arithmetic-right-shift" (list signedC paramC) Int))
            ))))

(context: "Int procedures"
  (<| (times 100)
      (do @
        [subjectC (|> r.int (:: @ map code.int))
         paramC (|> r.int (:: @ map code.int))]
        ($_ seq
            (test "Can add integers."
                  (check-success+ "lux int +" (list subjectC paramC) Int))
            (test "Can subtract integers."
                  (check-success+ "lux int -" (list subjectC paramC) Int))
            (test "Can multiply integers."
                  (check-success+ "lux int *" (list subjectC paramC) Int))
            (test "Can divide integers."
                  (check-success+ "lux int /" (list subjectC paramC) Int))
            (test "Can calculate remainder of integers."
                  (check-success+ "lux int %" (list subjectC paramC) Int))
            (test "Can test equivalence of integers."
                  (check-success+ "lux int =" (list subjectC paramC) Bit))
            (test "Can compare integers."
                  (check-success+ "lux int <" (list subjectC paramC) Bit))
            (test "Can convert integer to fraction."
                  (check-success+ "lux int to-frac" (list subjectC) Frac))
            (test "Can convert integer to text."
                  (check-success+ "lux int char" (list subjectC) Text))
            ))))

(context: "Frac procedures"
  (<| (times 100)
      (do @
        [subjectC (|> r.frac (:: @ map code.frac))
         paramC (|> r.frac (:: @ map code.frac))
         encodedC (|> (r.unicode 5) (:: @ map code.text))]
        ($_ seq
            (test "Can add frac numbers."
                  (check-success+ "lux frac +" (list subjectC paramC) Frac))
            (test "Can subtract frac numbers."
                  (check-success+ "lux frac -" (list subjectC paramC) Frac))
            (test "Can multiply frac numbers."
                  (check-success+ "lux frac *" (list subjectC paramC) Frac))
            (test "Can divide frac numbers."
                  (check-success+ "lux frac /" (list subjectC paramC) Frac))
            (test "Can calculate remainder of frac numbers."
                  (check-success+ "lux frac %" (list subjectC paramC) Frac))
            (test "Can test equivalence of frac numbers."
                  (check-success+ "lux frac =" (list subjectC paramC) Bit))
            (test "Can compare frac numbers."
                  (check-success+ "lux frac <" (list subjectC paramC) Bit))
            (test "Can obtain minimum frac number."
                  (check-success+ "lux frac min" (list) Frac))
            (test "Can obtain maximum frac number."
                  (check-success+ "lux frac max" (list) Frac))
            (test "Can obtain smallest frac number."
                  (check-success+ "lux frac smallest" (list) Frac))
            (test "Can convert frac number to integer."
                  (check-success+ "lux frac to-int" (list subjectC) Int))
            (test "Can convert frac number to text."
                  (check-success+ "lux frac encode" (list subjectC) Text))
            (test "Can convert text to frac number."
                  (check-success+ "lux frac decode" (list encodedC) (type (Maybe Frac))))
            ))))

(context: "Text procedures"
  (<| (times 100)
      (do @
        [subjectC (|> (r.unicode 5) (:: @ map code.text))
         paramC (|> (r.unicode 5) (:: @ map code.text))
         replacementC (|> (r.unicode 5) (:: @ map code.text))
         fromC (|> r.nat (:: @ map code.nat))
         toC (|> r.nat (:: @ map code.nat))]
        ($_ seq
            (test "Can test text equivalence."
                  (check-success+ "lux text =" (list subjectC paramC) Bit))
            (test "Compare texts in lexicographical order."
                  (check-success+ "lux text <" (list subjectC paramC) Bit))
            (test "Can concatenate one text to another."
                  (check-success+ "lux text concat" (list subjectC paramC) Text))
            (test "Can find the index of a piece of text inside a larger one that (may) contain it."
                  (check-success+ "lux text index" (list subjectC paramC fromC) (type (Maybe Nat))))
            (test "Can query the size/length of a text."
                  (check-success+ "lux text size" (list subjectC) Nat))
            (test "Can obtain the character code of a text at a given index."
                  (check-success+ "lux text char" (list subjectC fromC) (type (Maybe Nat))))
            (test "Can clip a piece of text between 2 indices."
                  (check-success+ "lux text clip" (list subjectC fromC toC) (type (Maybe Text))))
            ))))

(context: "Array procedures"
  (<| (times 100)
      (do @
        [[elemT elemC] _primitive.primitive
         sizeC (|> r.nat (:: @ map code.nat))
         idxC (|> r.nat (:: @ map code.nat))
         var-name (r.unicode 5)
         #let [arrayT (type (Array elemT))
               g!array (code.local-identifier var-name)
               array-operation (function (_ output-type code)
                                 (|> (scope.with-scope ""
                                       (scope.with-local [var-name arrayT]
                                         (typeA.with-type output-type
                                           (_primitive.analyse code))))
                                     (phase.run [analysisE.bundle (init.compiler [])])
                                     (case> (#e.Success _)
                                            #1

                                            (#e.Error error)
                                            #0)))]]
        ($_ seq
            (test "Can create arrays."
                  (check-success+ "lux array new" (list sizeC) arrayT))
            (test "Can get a value inside an array."
                  (array-operation (type (Maybe elemT))
                                   (` ("lux array get" (~ g!array) (~ idxC)))))
            (test "Can put a value inside an array."
                  (array-operation arrayT
                                   (` ("lux array put" (~ g!array) (~ idxC) (~ elemC)))))
            (test "Can remove a value from an array."
                  (array-operation arrayT
                                   (` ("lux array remove" (~ g!array) (~ idxC)))))
            (test "Can query the size of an array."
                  (array-operation Nat
                                   (` ("lux array size" (~ g!array)))))
            ))))

(context: "Math procedures"
  (<| (times 100)
      (do @
        [subjectC (|> r.frac (:: @ map code.frac))
         paramC (|> r.frac (:: @ map code.frac))]
        (`` ($_ seq
                (~~ (do-template [<proc> <desc>]
                      [(test (format "Can calculate " <desc> ".")
                             (check-success+ <proc> (list subjectC) Frac))]

                      ["lux math cos" "cosine"]
                      ["lux math sin" "sine"]
                      ["lux math tan" "tangent"]
                      ["lux math acos" "inverse/arc cosine"]
                      ["lux math asin" "inverse/arc sine"]
                      ["lux math atan" "inverse/arc tangent"]
                      ["lux math cosh" "hyperbolic cosine"]
                      ["lux math sinh" "hyperbolic sine"]
                      ["lux math tanh" "hyperbolic tangent"]
                      ["lux math exp" "exponentiation"]
                      ["lux math log" "logarithm"]
                      ["lux math ceil" "ceiling"]
                      ["lux math floor" "floor"]
                      ["lux math round" "rounding"]))
                (~~ (do-template [<proc> <desc>]
                      [(test (format "Can calculate " <desc> ".")
                             (check-success+ <proc> (list subjectC paramC) Frac))]

                      ["lux math atan2" "inverse/arc tangent (with 2 arguments)"]
                      ["lux math pow" "power"])))))))

(context: "Atom procedures"
  (<| (times 100)
      (do @
        [[elemT elemC] _primitive.primitive
         sizeC (|> r.nat (:: @ map code.nat))
         idxC (|> r.nat (:: @ map code.nat))
         var-name (r.unicode 5)
         #let [atomT (type (atom.Atom elemT))]]
        ($_ seq
            (test "Can create atomic reference."
                  (check-success+ "lux atom new" (list elemC) atomT))
            (test "Can read the value of an atomic reference."
                  (|> (scope.with-scope ""
                        (scope.with-local [var-name atomT]
                          (typeA.with-type elemT
                            (_primitive.analyse (` ("lux atom read" (~ (code.identifier ["" var-name]))))))))
                      (phase.run [analysisE.bundle (init.compiler [])])
                      (case> (#e.Success _)
                             #1

                             (#e.Error _)
                             #0)))
            (test "Can swap the value of an atomic reference."
                  (|> (scope.with-scope ""
                        (scope.with-local [var-name atomT]
                          (typeA.with-type Bit
                            (_primitive.analyse (` ("lux atom compare-and-swap"
                                                    (~ (code.identifier ["" var-name]))
                                                    (~ elemC)
                                                    (~ elemC)))))))
                      (phase.run [analysisE.bundle (init.compiler [])])
                      (case> (#e.Success _)
                             #1

                             (#e.Error _)
                             #0)))
            ))))

(context: "Process procedures"
  (<| (times 100)
      (do @
        [[primT primC] _primitive.primitive
         timeC (|> r.nat (:: @ map code.nat))]
        ($_ seq
            (test "Can query the level of concurrency."
                  (check-success+ "lux process parallelism-level" (list) Nat))
            (test "Can schedule an IO computation to run concurrently at some future time."
                  (check-success+ "lux process schedule"
                                  (list timeC
                                        (` ([(~' _) (~' _)] (~ primC))))
                                  Any))
            ))))

(context: "IO procedures"
  (<| (times 100)
      (do @
        [logC (|> (r.unicode 5) (:: @ map code.text))
         exitC (|> r.int (:: @ map code.int))]
        ($_ seq
            (test "Can log messages to standard output."
                  (check-success+ "lux io log" (list logC) Any))
            (test "Can throw a run-time error."
                  (check-success+ "lux io error" (list logC) Nothing))
            (test "Can exit the program."
                  (check-success+ "lux io exit" (list exitC) Nothing))
            (test "Can query the current time (as milliseconds since epoch)."
                  (check-success+ "lux io current-time" (list) Int))
            ))))
