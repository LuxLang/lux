(.module:
  [lux #*
   [control
    [monad (#+ do)]
    pipe]
   [data
    ["." error ("error/." Functor<Error>)]]
   [compiler
    [default
     ["." reference]
     ["." phase
      ["." analysis (#+ Branch Analysis)]
      ["//" synthesis (#+ Synthesis)
       ["." expression]]
      [extension
       ["." bundle]]]]]
   [math
    ["r" random]]
   test]
  ["." //primitive])

(context: "Dummy variables."
  (<| (times +100)
      (do @
        [maskedA //primitive.primitive
         temp (|> r.nat (:: @ map (n/% +100)))
         #let [maskA (analysis.control/case
                      [maskedA
                       [[(#analysis.Bind temp)
                         (#analysis.Reference (reference.local temp))]
                        (list)]])]]
        (test "Dummy variables created to mask expressions get eliminated during synthesis."
              (|> maskA
                  expression.synthesize
                  (phase.run [bundle.empty //.init])
                  (error/map (//primitive.corresponds? maskedA))
                  (error.default #0))))))

(context: "Let expressions."
  (<| (times +100)
      (do @
        [registerA r.nat
         inputA //primitive.primitive
         outputA //primitive.primitive
         #let [letA (analysis.control/case
                     [inputA
                      [[(#analysis.Bind registerA)
                        outputA]
                       (list)]])]]
        (test "Can detect and reify simple 'let' expressions."
              (|> letA
                  expression.synthesize
                  (phase.run [bundle.empty //.init])
                  (case> (^ (#error.Success (//.branch/let [inputS registerS outputS])))
                         (and (n/= registerA registerS)
                              (//primitive.corresponds? inputA inputS)
                              (//primitive.corresponds? outputA outputS))

                         _
                         #0))))))

(context: "If expressions."
  (<| (times +100)
      (do @
        [then|else r.bit
         inputA //primitive.primitive
         thenA //primitive.primitive
         elseA //primitive.primitive
         #let [thenB (: Branch
                        [(#analysis.Simple (#analysis.Bit #1))
                         thenA])
               elseB (: Branch
                        [(#analysis.Simple (#analysis.Bit #0))
                         elseA])
               ifA (if then|else
                     (analysis.control/case [inputA [thenB (list elseB)]])
                     (analysis.control/case [inputA [elseB (list thenB)]]))]]
        (test "Can detect and reify simple 'if' expressions."
              (|> ifA
                  expression.synthesize
                  (phase.run [bundle.empty //.init])
                  (case> (^ (#error.Success (//.branch/if [inputS thenS elseS])))
                         (and (//primitive.corresponds? inputA inputS)
                              (//primitive.corresponds? thenA thenS)
                              (//primitive.corresponds? elseA elseS))

                         _
                         #0))))))
