(;module:
  lux
  (lux (codata [io])
       (control monad)
       (data [text "Text/" Monoid<Text>]
             [number])
       type
       (codata function))
  lux/test)

(test: "lux/type exports"
  (let% [<eq-tests> (do-template [<type>]
                      [(match true (:: Eq<Type> = <type> <type>))]

                      [(#;HostT "java.util.List" (list Int))]
                      [#;UnitT]
                      [#;VoidT]
                      [(#;VarT +123)]
                      [(#;ExT +123)]
                      [(#;BoundT +123)]
                      [(#;LambdaT Bool Int)]
                      [(#;AppT List Int)]
                      [(#;NamedT ["" "Int-List"] (#;AppT List Int))]
                      [(#;SumT Bool Int)]
                      [(#;ProdT Bool Int)]
                      [(#;UnivQ (list) (#;ProdT Bool (#;BoundT +1)))]
                      [(#;ExQ (list) (#;ProdT Bool (#;BoundT +1)))]
                      )]
    (test-all <eq-tests>
              (match (^=> (#;Some _type) (:: Eq<Type> = _type (#;ProdT Bool Int)))
                     (apply-type (type (Meta Bool)) Int))
              (match #;None (apply-type Text Bool))
              (match true
                     (:: Eq<Type> =
                         (#;NamedT ["" "a"]
                                   (#;ProdT Bool Int))
                         (un-alias (#;NamedT ["" "c"]
                                             (#;NamedT ["" "b"]
                                                       (#;NamedT ["" "a"]
                                                                 (#;ProdT Bool Int)))))))
              )))
