(.module:
  lux
  (lux (data (coll [list]))
       (type (object interface))))

## No parameters
(interface: Counter
  (inc! [] @)
  (read! [] Nat))

(class: NatC Counter
  Nat

  (def: inc!
    (update@Counter inc))
  
  (def: read!
    get@Counter))

(interface: Resettable-Counter
  #super Counter
  (reset [] @))

(class: NatRC Resettable-Counter
  #super NatC
  Top

  (def: reset
    (set@Counter +0)))

## With parameters
(interface: (Collection a)
  (add [a] @)
  (size [] Nat))

(class: (ListC a) (Collection a)
  (List a)

  (def: (add elem)
    (update@Collection (|>> (#.Cons elem))))

  (def: size
    (|>> get@Collection list.size)))

(interface: (Iterable a)
  #super (Collection a)
  (enumerate [] (List a)))

(class: (ListI a) (Iterable a)
  #super (ListC a)
  Top

  (def: enumerate
    get@Collection))

## Polymorphism
(def: (poly0 counter)
  (-> Counter Nat)
  (read! counter))

(def: poly0-0 Nat (poly0 (new@NatC +0)))
(def: poly0-1 Nat (poly0 (new@NatRC +0 [])))

(def: (poly1 counter)
  (-> Resettable-Counter Nat)
  (n/+ (read! counter)
       (read! (reset counter))))

(def: poly1-0 Nat (poly1 (new@NatRC +0 [])))

(def: (poly2 counter)
  (-> NatC Nat)
  (read! counter))

(def: poly2-0 Nat (poly2 (new@NatC +0)))
(def: poly2-1 Nat (poly2 (new@NatRC +0 [])))

(def: (poly3 counter)
  (-> NatRC Nat)
  (n/+ (read! counter)
       (read! (reset counter))))

(def: poly3-0 Nat (poly3 (new@NatRC +0 [])))
