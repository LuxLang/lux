(;module:
  lux
  (lux [io]
       (control monad)
       (data [text "Text/" Monoid<Text> Eq<Text>]
             text/format
             [number]
             maybe
             (coll [list]))
       ["R" math/random]
       [type]
       ["&" type/check])
  lux/test)

## [Utils]
(def: gen-name
  (R;Random Text)
  (do R;Monad<Random>
    [size (|> R;nat (:: @ map (n.% +10)))]
    (R;text size)))

(def: gen-ident
  (R;Random Ident)
  (R;seq gen-name gen-name))

(def: gen-type
  (R;Random Type)
  (let [(^open "R/") R;Monad<Random>]
    (R;rec (function [gen-type]
             ($_ R;alt
                 (R;seq gen-name (R/wrap (list)))
                 (R/wrap [])
                 (R/wrap [])
                 (R;seq gen-type gen-type)
                 (R;seq gen-type gen-type)
                 (R;seq gen-type gen-type)
                 R;nat
                 R;nat
                 R;nat
                 (R;seq (R/wrap (list)) gen-type)
                 (R;seq (R/wrap (list)) gen-type)
                 (R;seq gen-type gen-type)
                 (R;seq gen-ident gen-type)
                 )))))

(def: (valid-type? type)
  (-> Type Bool)
  (case type
    (#;Host name params)
    (list;every? valid-type? params)
    
    (^or #;Void #;Unit (#;Ex id))
    true

    (^template [<tag>]
      (<tag> left right)
      (and (valid-type? left) (valid-type? right)))
    ([#;Sum] [#;Product] [#;Function])

    (#;Named name type')
    (valid-type? type')

    _
    false))

(def: (type-checks? input)
  (-> (&;Check []) Bool)
  (case (&;run &;fresh-context input)
    (#;Right [])
    true

    (#;Left error)
    false))

## [Tests]
(test: "Top and Bottom"
  [sample (|> gen-type (R;filter valid-type?))]
  ($_ seq
      (assert "Top is the super-type of everything."
              (&;checks? Top sample))

      (assert "Bottom is the sub-type of everything."
              (&;checks? sample Bottom))
      ))

(test: "Simple type-checking."
  ($_ seq
      (assert "Unit and Void match themselves."
              (and (&;checks? Void Void)
                   (&;checks? Unit Unit)))

      (assert "Existential types only match with themselves."
              (and (type-checks? (do &;Monad<Check>
                                   [[id ex] &;existential]
                                   (&;check ex ex)))
                   (not (type-checks? (do &;Monad<Check>
                                        [[lid lex] &;existential
                                         [rid rex] &;existential]
                                        (&;check lex rex))))))

      (assert "Names don't affect type-checking."
              (and (type-checks? (do &;Monad<Check>
                                   [[id ex] &;existential]
                                   (&;check (#;Named ["module" "name"] ex)
                                            ex)))
                   (type-checks? (do &;Monad<Check>
                                   [[id ex] &;existential]
                                   (&;check ex
                                            (#;Named ["module" "name"] ex))))
                   (type-checks? (do &;Monad<Check>
                                   [[id ex] &;existential]
                                   (&;check (#;Named ["module" "name"] ex)
                                            (#;Named ["module" "name"] ex))))))

      (assert "Can type-check functions."
              (and (&;checks? (#;Function Bottom Top)
                              (#;Function Top Bottom))
                   (not (&;checks? (#;Function Top Bottom)
                                   (#;Function Bottom Top)))))
      ))

(test: "Type application"
  [meta gen-type
   data gen-type]
  (assert "Can type-check type application."
          (and (&;checks? (#;App (#;App Meta meta) data)
                          (type;tuple (list meta data)))
               (&;checks? (type;tuple (list meta data))
                          (#;App (#;App Meta meta) data)))))

(test: "Host types"
  [nameL gen-name
   nameR (|> gen-name (R;filter (. not (Text/= nameL))))
   paramL gen-type
   paramR (|> gen-type (R;filter (|>. (&;checks? paramL) not)))]
  ($_ seq
      (assert "Host types match when they have the same name and the same parameters."
              (&;checks? (#;Host nameL (list paramL))
                         (#;Host nameL (list paramL))))

      (assert "Names matter to host types."
              (not (&;checks? (#;Host nameL (list paramL))
                              (#;Host nameR (list paramL)))))

      (assert "Parameters matter to host types."
              (not (&;checks? (#;Host nameL (list paramL))
                              (#;Host nameL (list paramR)))))
      ))

(test: "Type-vars"
  ($_ seq
      (assert "Type-vars check against themselves."
              (type-checks? (&;with-var (function [[id var]] (&;check var var)))))

      (assert "Can bind unbound type-vars by type-checking against them."
              (and (type-checks? (&;with-var (function [[id var]] (&;check var #;Unit))))
                   (type-checks? (&;with-var (function [[id var]] (&;check #;Unit var))))))

      (assert "Can't rebind already bound type-vars."
              (not (type-checks? (&;with-var (function [[id var]]
                                               (do &;Monad<Check>
                                                 [_ (&;check var #;Unit)]
                                                 (&;check var #;Void)))))))

      (assert "If the type bound to a var is a super-type to another, then the var is also a super-type."
              (type-checks? (&;with-var (function [[id var]]
                                          (do &;Monad<Check>
                                            [_ (&;check var Top)]
                                            (&;check var #;Unit))))))

      (assert "If the type bound to a var is a sub-type of another, then the var is also a sub-type."
              (type-checks? (&;with-var (function [[id var]]
                                          (do &;Monad<Check>
                                            [_ (&;check var Bottom)]
                                            (&;check #;Unit var))))))
      ))
