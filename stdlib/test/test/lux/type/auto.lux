(;module:
  lux
  (lux [io]
       (control monad
                functor
                [eq])
       (data [text "Text/" Monoid<Text>]
             text/format
             [number]
             [bool "B/" Eq<Bool>]
             maybe
             (coll [list]))
       ["R" random]
       pipe
       [type]
       type/auto)
  lux/test)

(test: "Automatic structure selection"
  [x R;nat
   y R;nat]
  ($_ seq
      (assert "Can automatically select first-order structures."
              (let [(^open "L/") (list;Eq<List> number;Eq<Nat>)]
                (and (B/= (:: number;Eq<Nat> = x y)
                          (::: = x y))
                     (L/= (list;n.range +1 +10)
                          (::: map n.inc (list;n.range +0 +9)))
                     )))
      
      (assert "Can automatically select second-order structures."
              (::: =
                   (list;n.range +1 +10)
                   (list;n.range +1 +10)))
      ))
