(.module:
  [lux #*
   [io]
   [control
    [equivalence]
    [functor]
    [monad (#+ do Monad)]]
   [data
    [bit ("bit/." Equivalence<Bit>)]
    [number]
    [collection [list]]]
   [math
    ["r" random]]
   [type implicit]]
  lux/test)

(context: "Automatic structure selection"
  (<| (times |100)
      (do @
        [x r.nat
         y r.nat]
        ($_ seq
            (test "Can automatically select first-order structures."
                  (let [(^open "list/.") (list.Equivalence<List> number.Equivalence<Nat>)]
                    (and (bit/= (:: number.Equivalence<Nat> = x y)
                                (::: = x y))
                         (list/= (list.n/range |1 |10)
                                 (::: map inc (list.n/range |0 |9)))
                         )))
            
            (test "Can automatically select second-order structures."
                  (::: =
                    (list.n/range |1 |10)
                    (list.n/range |1 |10)))

            (test "Can automatically select third-order structures."
                  (let [lln (::: map (list.n/range |1)
                              (list.n/range |1 |10))]
                    (::: = lln lln)))
            ))))
