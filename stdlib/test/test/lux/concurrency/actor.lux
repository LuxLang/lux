(;module:
  lux
  (lux [io #- run]
       (control monad
                ["ex" exception])
       (data [number]
             text/format
             ["R" result])
       (concurrency ["P" promise "P/" Monad<Promise>]
                    ["T" task]
                    ["&" actor #+ actor:]))
  lux/test)

(actor: Counter
  Nat

  ((count! state self)
   Nat
   (let [state' (n.inc state)]
     (T;return [state' state'])))

  ([cause state]
   (P/wrap (log! (if (ex;match? &;Killed cause)
                   (format "Counter was killed: " (%n state))
                   cause)))))

(context: "Actors"
  ($_ seq
      (test "Can check where an actor is alive."
            (io;run (do Monad<IO>
                      [counter (new-Counter +0)]
                      (wrap (&;alive? counter)))))
      
      (test "Can kill actors."
            (io;run (do Monad<IO>
                      [counter (new-Counter +0)
                       killed? (&;kill counter)]
                      (wrap (and killed?
                                 (not (&;alive? counter)))))))

      (test "Can poison actors."
            (io;run (do Monad<IO>
                      [counter (new-Counter +0)
                       poisoned? (&;poison counter)]
                      (wrap (and poisoned?
                                 (not (&;alive? counter)))))))
      
      (test "Cannot kill an already dead actor."
            (io;run (do Monad<IO>
                      [counter (new-Counter +0)
                       first-time (&;kill counter)
                       second-time (&;kill counter)]
                      (wrap (and first-time
                                 (not second-time))))))

      (test "Cannot poison an already dead actor."
            (io;run (do Monad<IO>
                      [counter (new-Counter +0)
                       first-time (&;kill counter)
                       second-time (&;poison counter)]
                      (wrap (and first-time
                                 (not second-time))))))

      (do P;Monad<Promise>
        [result (do T;Monad<Task>
                  [#let [counter (io;run (new-Counter +0))]
                   output-1 (count! counter)
                   output-2 (count! counter)
                   output-3 (count! counter)]
                  (wrap (and (n.= +1 output-1)
                             (n.= +2 output-2)
                             (n.= +3 output-3))))]
        (test "Can send messages to actors."
              (case result
                (#R;Success outcome)
                outcome

                (#R;Error error)
                false)))
      ))
