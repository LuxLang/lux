(;module:
  lux
  (lux [io #- run]
       (control monad)
       (data [number]
             text/format
             [error #- fail])
       (concurrency [promise #+ Promise Monad<Promise> "Promise/" Monad<Promise>]
                    ["&" actor #+ actor:])
       (codata function))
  lux/test)

(actor: Adder
  Int

  (method: (add! [offset Int])
    [Int Int]
    (let [*state*' (i.+ offset *state*)]
      (wrap (#;Right [*state*' [*state* *state*']]))))
  
  (stop:
    (wrap [])))

(test: "Actors"
  (let [counter-proc (: (&;Behavior Int (Promise Int))
                        [(lambda [self output state]
                           (let [state' (i.inc state)]
                             (exec (io;run (promise;resolve state' output))
                               (Promise/wrap (#;Right state')))))
                         (lambda [?error state] (Promise/wrap []))])]
    ($_ seq
        (assert "Can check where an actor is alive."
                (let [counter (: (&;Actor Int (Promise Int))
                                 (io;run (&;spawn 0 counter-proc)))]
                  (&;alive? counter)))
        
        (assert "Can poison/kill actors."
                (let [counter (: (&;Actor Int (Promise Int))
                                 (io;run (&;spawn 0 counter-proc)))]
                  (and (io;run (&;poison counter))
                       (not (&;alive? counter)))))
        
        (assert "Can't poison an already poisoned actor."
                (let [counter (: (&;Actor Int (Promise Int))
                                 (io;run (&;spawn 0 counter-proc)))]
                  (and (io;run (&;poison counter))
                       (not (io;run (&;poison counter))))))
        
        (do Monad<Promise>
          [#let [counter (: (&;Actor Int (Promise Int))
                            (io;run (&;spawn 0 counter-proc)))
                 output-1 (: (Promise Int) (promise;promise))
                 output-2 (: (Promise Int) (promise;promise))
                 output-3 (: (Promise Int) (promise;promise))]
           _ (&;send output-1 counter)
           _ (&;send output-2 counter)
           _ (&;send output-3 counter)
           =1 output-1
           =2 output-2
           =3 output-3]
          (assert "Can send messages to actors."
                  (and (i.= 1 =1)
                       (i.= 2 =2)
                       (i.= 3 =3))))
        
        (do Monad<Promise>
          [#let [adder (: Adder
                          (io;run (&;spawn 0 Adder//new)))]
           t1 (add! 1 adder)
           t2 (add! 2 adder)
           t3 (add! 3 adder)
           #let [_ (io;run (&;poison adder))]]
          (assert "Can use custom-defined actors."
                  (case [t1 t2 t3]
                    [[0 1] [1 3] [3 6]]
                    true

                    _
                    false)))
        )))
