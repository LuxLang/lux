(.module:
  lux
  (lux [io #+ IO io]
       (control ["M" monad #+ do Monad]
                ["ex" exception])
       (data [number]
             text/format
             ["E" error])
       (concurrency ["P" promise "P/" Monad<Promise>]
                    ["T" task]
                    ["&" actor #+ actor: message:]))
  lux/test)

(actor: Counter
  Nat

  ((handle message state self)
   (do T.Monad<Task>
     [#let [_ (log! "BEFORE")]
      output (message state self)
      #let [_ (log! "AFTER")]]
     (wrap output)))

  ((stop cause state)
   (P/wrap (log! (if (ex.match? &.Killed cause)
                   (format "Counter was killed: " (%n state))
                   cause)))))

(message: #export Counter
  (count! [increment Nat] state self Nat)
  (let [state' (n/+ increment state)]
    (T.return [state' state'])))

(context: "Actors"
  ($_ seq
      (test "Can check if an actor is alive."
            (io.run (do io.Monad<IO>
                      [counter (new@Counter +0)]
                      (wrap (&.alive? counter)))))
      
      (test "Can kill actors."
            (io.run (do io.Monad<IO>
                      [counter (new@Counter +0)
                       killed? (&.kill counter)]
                      (wrap (and killed?
                                 (not (&.alive? counter)))))))

      (test "Can poison actors."
            (io.run (do io.Monad<IO>
                      [counter (new@Counter +0)
                       poisoned? (&.poison counter)]
                      (wrap (and poisoned?
                                 (not (&.alive? counter)))))))
      
      (test "Cannot kill an already dead actor."
            (io.run (do io.Monad<IO>
                      [counter (new@Counter +0)
                       first-time (&.kill counter)
                       second-time (&.kill counter)]
                      (wrap (and first-time
                                 (not second-time))))))

      (test "Cannot poison an already dead actor."
            (io.run (do io.Monad<IO>
                      [counter (new@Counter +0)
                       first-time (&.kill counter)
                       second-time (&.poison counter)]
                      (wrap (and first-time
                                 (not second-time))))))

      (wrap (do P.Monad<Promise>
              [result (do T.Monad<Task>
                        [#let [counter (io.run (new@Counter +0))]
                         output-1 (count! +1 counter)
                         output-2 (count! +1 counter)
                         output-3 (count! +1 counter)]
                        (wrap (and (n/= +1 output-1)
                                   (n/= +2 output-2)
                                   (n/= +3 output-3))))]
              (assert "Can send messages to actors."
                      (case result
                        (#E.Success outcome)
                        outcome

                        (#E.Error error)
                        false))))
      ))
