(;module:
  lux
  (lux (control monad)
       (data [number]
             text/format
             error)
       (concurrency [promise #+ Promise Monad<Promise> "Promise/" Monad<Promise>]
                    actor)
       (codata function
               [io #- run]))
  lux/test)

(actor: Adder
  Int

  (method: (add! {offset Int})
    [Int Int]
    (let [*state*' (+ offset *state*)]
      (wrap (#;Right [*state*' [*state* *state*']]))))
  
  (stop:
    (exec (log! (format "Cause of death: " (default "???" *cause*)))
      (log! (format "Current state: " (%i *state*)))
      (wrap []))))

(test: "lux/concurrency/actor exports"
  (let [counter-proc (: (Proc Int (Promise Int))
                        [(lambda [self output state]
                           (let [state' (inc state)]
                             (exec (io;run (promise;resolve state' output))
                               (Promise/wrap (#;Right state')))))
                         (lambda [?error state] (Promise/wrap []))])]
    (test-all (match true
                     (let [counter (: (Actor Int (Promise Int))
                                      (io;run (spawn 0 counter-proc)))]
                       (alive? counter)))
              (match [true false]
                     (let [counter (: (Actor Int (Promise Int))
                                      (io;run (spawn 0 counter-proc)))]
                       [(io;run (poison counter))
                        (alive? counter)]))
              (match [true false]
                     (let [counter (: (Actor Int (Promise Int))
                                      (io;run (spawn 0 counter-proc)))]
                       [(io;run (poison counter))
                        (io;run (poison counter))]))
              (match+ [1 2 3]
                      (do Monad<Promise>
                        [#let [counter (: (Actor Int (Promise Int))
                                          (io;run (spawn 0 counter-proc)))
                               output-1 (: (Promise Int) (promise;promise))
                               output-2 (: (Promise Int) (promise;promise))
                               output-3 (: (Promise Int) (promise;promise))]
                         ?1 (send output-1 counter)
                         ?2 (send output-2 counter)
                         ?3 (send output-3 counter)]
                        (if (and ?1 ?2 ?3)
                          (from-promise ($_ promise;seq output-1 output-2 output-3))
                          (wrap (#;Left "Uh, oh...")))))
              (match+ [[0 1] [1 3] [3 6]]
                      (do Monad<Promise>
                        [#let [adder (: Adder
                                        (io;run (spawn 0 Adder//new)))]
                         t1 (add! 1 adder)
                         t2 (add! 2 adder)
                         t3 (add! 3 adder)
                         #let [? (io;run (poison adder))]]
                        (wrap (#;Right [t1 t2 t3]))
                        ))
              )))
