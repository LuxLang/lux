(;module:
  lux
  (lux [io #- run]
       (control monad)
       (data [number]
             text/format)
       (concurrency [promise #+ Promise Monad<Promise> "Promise/" Monad<Promise>]
                    ["&" frp]))
  lux/test)

(def: (List->Chan values)
  (-> (List Int) (&;Chan Int))
  (let [_chan (: (&;Chan Int) (&;chan))]
    (io;run (do Monad<IO>
              [_ (mapM @ (function [value] (&;write value _chan))
                       values)
               _ (&;close _chan)]
              (wrap _chan)))))

(test: "FRP"
  ($_ seq
      (do Monad<Promise>
        [elems (&;consume (List->Chan (list 0 1 2 3 4 5)))]
        (assert "Can consume a chan into a list."
                (case elems
                  (^ (list 0 1 2 3 4 5))
                  true

                  _
                  false)))

      (do Monad<Promise>
        [elems (&;consume (let [input (List->Chan (list 0 1 2 3 4 5))
                                output (: (&;Chan Int) (&;chan))]
                            (exec (&;pipe input output)
                              output)))]
        (assert "Can pipe one channel into another."
                (case elems
                  (^ (list 0 1 2 3 4 5))
                  true

                  _
                  false)))

      (do Monad<Promise>
        [elems (&;consume (&;filter i.even? (List->Chan (list 0 1 2 3 4 5))))]
        (assert "Can filter a channel's elements."
                (case elems
                  (^ (list 0 2 4))
                  true

                  _
                  false)))

      (do Monad<Promise>
        [elems (&;consume (&;merge (list (List->Chan (list 0 1 2 3 4 5))
                                         (List->Chan (list 0 -1 -2 -3 -4 -5)))))]
        (assert "Can merge channels."
                (case elems
                  (^ (list 0 1 2 3 4 5 0 -1 -2 -3 -4 -5))
                  true

                  _
                  false)))
      
      (do Monad<Promise>
        [output (&;fold (function [base input] (Promise/wrap (i.+ input base))) 0 (List->Chan (list 0 1 2 3 4 5)))]
        (assert "Can fold over a channel."
                (i.= 15 output)))

      (do Monad<Promise>
        [elems (&;consume (&;distinct number;Eq<Int> (List->Chan (list 0 0 0 1 2 2 3 3 3 3 4 4 4 5 5))))]
        (assert "Can avoid immediate repetition in the channel."
                (case elems
                  (^ (list 0 1 2 3 4 5))
                  true

                  _
                  false)))

      (do Monad<Promise>
        [elems (&;consume (&;once (:: promise;Monad<Promise> wrap 12345)))]
        (assert "Can convert a promise into a single-value channel."
                (case elems
                  (^ (list 12345))
                  true

                  _
                  false)))

      (do Monad<Promise>
        [elems (&;consume (:: &;Functor<Chan> map i.inc (List->Chan (list 0 1 2 3 4 5))))]
        (assert "Functor goes over every element in a channel."
                (case elems
                  (^ (list 1 2 3 4 5 6))
                  true

                  _
                  false)))

      (do Monad<Promise>
        [elems (&;consume (let [(^open) &;Applicative<Chan>]
                            (apply (wrap i.inc) (wrap 12345))))]
        (assert "Applicative works over all channel values."
                (case elems
                  (^ (list 12346))
                  true

                  _
                  false)))

      (do Monad<Promise>
        [elems (&;consume (do &;Monad<Chan>
                            [f (wrap i.inc)
                             a (wrap 12345)]
                            (wrap (f a))))]
        (assert "Monad works over all channel values."
                (case elems
                  (^ (list 12346))
                  true

                  _
                  false)))
      ))
