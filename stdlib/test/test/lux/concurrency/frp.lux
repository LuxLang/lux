(.module:
  lux
  (lux [io #+ IO io]
       (control ["M" monad #+ do Monad])
       (data [number]
             text/format)
       (concurrency ["P" promise #+ "P/" Monad<Promise>]
                    ["&" frp]))
  lux/test)

(def: (to-channel values)
  (-> (List Int) (&.Channel Int))
  (let [_channel (&.channel Int)]
    (io.run (do io.Monad<IO>
              [_ (M.map @ (function [value] (&.write value _channel))
                        values)
               _ (&.close _channel)]
              (wrap _channel)))))

(context: "FRP"
  ($_ seq
      (wrap (do P.Monad<Promise>
              [elems (&.consume (to-channel (list 0 1 2 3 4 5)))]
              (assert "Can consume a channel into a list."
                      (case elems
                        (^ (list 0 1 2 3 4 5))
                        true

                        _
                        false))))

      (wrap (do P.Monad<Promise>
              [elems (&.consume (let [input (to-channel (list 0 1 2 3 4 5))
                                      output (&.channel Int)]
                                  (exec (&.pipe input output)
                                    output)))]
              (assert "Can pipe one channel into another."
                      (case elems
                        (^ (list 0 1 2 3 4 5))
                        true

                        _
                        false))))

      (wrap (do P.Monad<Promise>
              [elems (&.consume (&.filter i/even? (to-channel (list 0 1 2 3 4 5))))]
              (assert "Can filter a channel's elements."
                      (case elems
                        (^ (list 0 2 4))
                        true

                        _
                        false))))

      (wrap (do P.Monad<Promise>
              [elems (&.consume (&.merge (list (to-channel (list 0 1 2 3 4 5))
                                               (to-channel (list 0 -1 -2 -3 -4 -5)))))]
              (assert "Can merge channels."
                      (case elems
                        (^ (list 0 1 2 3 4 5 0 -1 -2 -3 -4 -5))
                        true

                        _
                        false))))
      
      (wrap (do P.Monad<Promise>
              [output (&.fold (function [base input] (P/wrap (i/+ input base))) 0 (to-channel (list 0 1 2 3 4 5)))]
              (assert "Can fold over a channel."
                      (i/= 15 output))))

      (wrap (do P.Monad<Promise>
              [elems (&.consume (&.distinct number.Eq<Int> (to-channel (list 0 0 0 1 2 2 3 3 3 3 4 4 4 5 5))))]
              (assert "Can avoid immediate repetition in the channel."
                      (case elems
                        (^ (list 0 1 2 3 4 5))
                        true

                        _
                        false))))

      (wrap (do P.Monad<Promise>
              [elems (&.consume (&.once (:: @ wrap 12345)))]
              (assert "Can convert a promise into a single-value channel."
                      (case elems
                        (^ (list 12345))
                        true

                        _
                        false))))

      (wrap (do P.Monad<Promise>
              [elems (&.consume (:: &.Functor<Channel> map i/inc (to-channel (list 0 1 2 3 4 5))))]
              (assert "Functor goes over every element in a channel."
                      (case elems
                        (^ (list 1 2 3 4 5 6))
                        true

                        _
                        false))))

      (wrap (do P.Monad<Promise>
              [elems (&.consume (let [(^open) &.Applicative<Channel>]
                                  (apply (wrap i/inc) (wrap 12345))))]
              (assert "Applicative works over all channel values."
                      (case elems
                        (^ (list 12346))
                        true

                        _
                        false))))

      (wrap (do P.Monad<Promise>
              [elems (&.consume (do &.Monad<Channel>
                                  [f (wrap i/inc)
                                   a (wrap 12345)]
                                  (wrap (f a))))]
              (assert "Monad works over all channel values."
                      (case elems
                        (^ (list 12346))
                        true

                        _
                        false))))
      ))
