(;module:
  lux
  (lux [io]
       (control ["M" monad #+ do Monad])
       (data [number]
             [maybe]
             (coll [list "" Functor<List> "List/" Fold<List>])
             text/format)
       (concurrency ["&" stm]
                    [promise])
       ["r" math/random])
  lux/test)

(def: iterations/processes Int 100)

(context: "STM"
  ($_ seq
      (wrap (do promise;Monad<Promise>
              [#let [_var (&;var 0)
                     changes (io;run (&;follow _var))]
               output1 (&;commit (&;read _var))
               output2 (&;commit (do &;Monad<STM>
                                   [_ (&;write 5 _var)]
                                   (&;read _var)))
               output3 (&;commit (do &;Monad<STM>
                                   [temp (&;read _var)
                                    _ (&;update (i.* 3) _var)]
                                   (&;read _var)))
               ?c1+changes' changes
               #let [[c1 changes'] (maybe;default [-1 changes] ?c1+changes')]
               ?c2+changes' changes'
               #let [[c2 changes'] (maybe;default [-1 changes] ?c2+changes')]]
              (assert "Can read STM vars.
                       Can write STM vars.
                       Can update STM vars.
                       Can follow all the changes to STM vars."
                      (and (i.= 0 output1)
                           (i.= 5 output2)
                           (i.= 15 output3)
                           (and (i.= 5 c1) (i.= 15 c2))))))
      (wrap (let [_concurrency-var (&;var 0)]
              (do promise;Monad<Promise>
                [_ (M;seq @
                          (map (function [_]
                                 (M;map @ (function [_] (&;commit (&;update i.inc _concurrency-var)))
                                        (list;i.range 1 iterations/processes)))
                               (list;i.range 1 (nat-to-int promise;concurrency-level))))
                 last-val (&;commit (&;read _concurrency-var))]
                (assert "Can modify STM vars concurrently from multiple threads."
                        (i.= (i.* iterations/processes (nat-to-int promise;concurrency-level))
                             last-val)))))))
