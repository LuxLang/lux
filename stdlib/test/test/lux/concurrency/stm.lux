(.module:
  lux
  (lux [io (#+ IO)]
       (control ["M" monad (#+ do Monad)])
       (data [number]
             [maybe]
             (collection [list ("list/" Functor<List>)])
             text/format)
       (concurrency [atom (#+ Atom atom)]
                    ["&" stm]
                    [promise]
                    [frp (#+ Channel)])
       ["r" math/random])
  lux/test)

(def: (read! channel)
  (All [a] (-> (Channel a) (IO (Atom (List a)))))
  (do io.Monad<IO>
    [#let [output (atom (list))]
     _ (frp.listen (function (_ value)
                     ## TODO: Simplify when possible.
                     (do @
                       [_ (atom.update (|>> (#.Cons value)) output)]
                       (wrap [])))
                   channel)]
    (wrap output)))

(def: iterations-per-process Nat +100)

(context: "STM"
  ($_ seq
      (wrap (do promise.Monad<Promise>
              [output (&.commit (&.read (&.var +0)))]
              (assert "Can read STM vars."
                      (n/= +0 output))))
      (wrap (do promise.Monad<Promise>
              [#let [_var (&.var +0)]
               output (&.commit (do &.Monad<STM>
                                  [_ (&.write +5 _var)]
                                  (&.read _var)))]
              (assert "Can write STM vars."
                      (n/= +5 output))))
      (wrap (do promise.Monad<Promise>
              [#let [_var (&.var +5)]
               output (&.commit (do &.Monad<STM>
                                  [_ (&.update (n/* +3) _var)]
                                  (&.read _var)))]
              (assert "Can update STM vars."
                      (n/= +15 output))))
      (wrap (do promise.Monad<Promise>
              [#let [_var (&.var +0)
                     changes (io.run (read! (io.run (&.follow _var))))]
               _ (&.commit (&.write +5 _var))
               _ (&.commit (&.update (n/* +3) _var))
               changes (promise.future (atom.read changes))]
              (assert "Can follow all the changes to STM vars."
                      (:: (list.Equivalence<List> number.Equivalence<Nat>) =
                          (list +5 +15)
                          (list.reverse changes)))))
      (wrap (let [_concurrency-var (&.var +0)]
              (do promise.Monad<Promise>
                [_ (|> promise.parallelism
                       (list.n/range +1)
                       (list/map (function (_ _)
                                   (|> iterations-per-process
                                       (list.n/range +1)
                                       (M.map @ (function (_ _) (&.commit (&.update inc _concurrency-var)))))))
                       (M.seq @))
                 last-val (&.commit (&.read _concurrency-var))]
                (assert "Can modify STM vars concurrently from multiple threads."
                        (|> promise.parallelism
                            (n/* iterations-per-process)
                            (n/= last-val))))))))
