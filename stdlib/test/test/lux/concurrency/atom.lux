(;module:
  lux
  (lux [io]
       (control ["M" monad #+ do Monad])
       (data [number]
             (coll [list "" Functor<List>])
             text/format)
       (concurrency ["&" atom])
       ["r" math/random])
  lux/test)

(context: "Atoms"
  (<| (times +100)
      (do @
        [value r;nat
         swap-value r;nat
         set-value r;nat
         #let [box (&;atom value)]]
        ($_ seq
            (test "Can obtain the value of an atom."
                  (n.= value (io;run (&;get box))))

            (test "Can swap the value of an atom."
                  (and (io;run (&;compare-and-swap value swap-value box))
                       (n.= swap-value (io;run (&;get box)))))

            (test "Can update the value of an atom."
                  (exec (io;run (&;update n.inc box))
                    (n.= (n.inc swap-value) (io;run (&;get box)))))

            (test "Can immediately set the value of an atom."
                  (exec (io;run (&;set set-value box))
                    (n.= set-value (io;run (&;get box)))))
            ))))
