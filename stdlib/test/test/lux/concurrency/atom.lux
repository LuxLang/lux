(.module:
  [lux #*
   ["." io]
   [control
    ["M" monad (#+ do Monad)]]
   [concurrency
    ["&" atom]]
   [math
    ["r" random]]]
  lux/test)

(context: "Atoms"
  (<| (times 100)
      (do @
        [value r.nat
         swap-value r.nat
         set-value r.nat
         #let [box (&.atom value)]]
        ($_ seq
            (test "Can obtain the value of an atom."
                  (n/= value (io.run (&.read box))))

            (test "Can swap the value of an atom."
                  (and (io.run (&.compare-and-swap value swap-value box))
                       (n/= swap-value (io.run (&.read box)))))

            (test "Can update the value of an atom."
                  (exec (io.run (&.update inc box))
                    (n/= (inc swap-value) (io.run (&.read box)))))

            (test "Can immediately set the value of an atom."
                  (exec (io.run (&.write set-value box))
                    (n/= set-value (io.run (&.read box)))))
            ))))
