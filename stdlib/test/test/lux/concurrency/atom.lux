(;module:
  lux
  (lux [io]
       (control monad)
       (data [number]
             (coll [list "" Functor<List>])
             text/format)
       (concurrency ["&" atom])
       ["R" math/random]
       pipe)
  lux/test)

(test: "Atoms"
  [value R;nat
   swap-value R;nat
   set-value R;nat
   #let [box (&;atom value)]]
  ($_ seq
      (assert "Can obtain the value of an atom."
              (n.= value (io;run (&;get box))))

      (assert "Can swap the value of an atom."
              (and (io;run (&;compare-and-swap value swap-value box))
                   (n.= swap-value (io;run (&;get box)))))

      (assert "Can update the value of an atom."
              (exec (io;run (&;update n.inc box))
                (n.= (n.inc swap-value) (io;run (&;get box)))))

      (assert "Can immediately set the value of an atom."
              (exec (io;run (&;set set-value box))
                (n.= set-value (io;run (&;get box)))))
      ))
