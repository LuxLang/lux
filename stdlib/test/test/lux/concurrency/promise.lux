(.module:
  [lux #*
   ["." io]
   [control
    ["M" monad (#+ do Monad)]
    pipe]
   [concurrency
    ["&" promise ("&/." Monad<Promise>)]]
   [math
    ["r" random]]]
  lux/test)

(context: "Promises"
  ($_ seq
      (wrap (do &.Monad<Promise>
              [running? (&.future (io.io #1))]
              (assert "Can run IO actions in separate threads."
                      running?)))

      (wrap (do &.Monad<Promise>
              [_ (&.wait |500)]
              (assert "Can wait for a specified amount of time."
                      #1)))

      (wrap (do &.Monad<Promise>
              [[left right] (&.and (&.future (io.io #1))
                                   (&.future (io.io #0)))]
              (assert "Can combine promises sequentially."
                      (and left (not right)))))

      (wrap (do &.Monad<Promise>
              [?left (&.or (&.delay |100 #1)
                           (&.delay |200 #0))
               ?right (&.or (&.delay |200 #1)
                            (&.delay |100 #0))]
              (assert "Can combine promises alternatively."
                      (case [?left ?right]
                        [(#.Left #1) (#.Right #0)]
                        #1

                        _
                        #0))))

      (wrap (do &.Monad<Promise>
              [?left (&.either (&.delay |100 #1)
                               (&.delay |200 #0))
               ?right (&.either (&.delay |200 #1)
                                (&.delay |100 #0))]
              (assert "Can combine promises alternatively [Part 2]."
                      (and ?left (not ?right)))))

      (test "Can poll a promise for its value."
            (and (|> (&.poll (&/wrap #1))
                     (case> (#.Some #1) #1 _ #0))
                 (|> (&.poll (&.delay |200 #1))
                     (case> #.None #1 _ #0))))

      (test "Cannot re-resolve a resolved promise."
            (and (not (io.run (&.resolve #0 (&/wrap #1))))
                 (io.run (&.resolve #1 (: (&.Promise Bit) (&.promise #.None))))))

      (wrap (do &.Monad<Promise>
              [?none (&.time-out |100 (&.delay |200 #1))
               ?some (&.time-out |200 (&.delay |100 #1))]
              (assert "Can establish maximum waiting times for promises to be fulfilled."
                      (case [?none ?some]
                        [#.None (#.Some #1)]
                        #1

                        _
                        #0))))
      ))
