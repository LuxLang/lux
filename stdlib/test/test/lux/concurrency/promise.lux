(;module:
  lux
  (lux (control monad)
       (data [number]
             text/format
             error)
       (concurrency promise)
       (codata function
               [io #*]))
  lux/test)

(test: "lux/concurrency/promise exports"
  (test-all (match+ true (from-promise (future (io true))))
            (match+ [] (from-promise (wait +500)))
            (match+ [true false] (from-promise (seq (future (io true))
                                                  (future (io false)))))
            (match+ (#;Left true) (from-promise (alt (delay +100 true)
                                                   (delay +200 false))))
            (match+ (#;Right false) (from-promise (alt (delay +200 true)
                                                     (delay +100 false))))
            (match+ true (from-promise (either (delay +100 true)
                                             (delay +200 false))))
            (match+ false (from-promise (either (delay +200 true)
                                              (delay +100 false))))
            (match (#;Some true) (poll (:: Monad<Promise> wrap true)))
            (match #;None (poll (delay +200 true)))
            (match false (io;run (resolve false (:: Monad<Promise> wrap true))))
            (match true (io;run (resolve true (: (Promise Bool) (promise)))))
            (match+ #;None (from-promise (time-out +100 (delay +200 true))))
            (match+ (#;Some true) (from-promise (time-out +200 (delay +100 true))))
            ))
