(;module:
  lux
  (lux [io #- run]
       (control monad
                pipe)
       (data [number]
             text/format)
       (concurrency ["&" promise "&/" Monad<Promise>])
       ["R" math/random])
  lux/test)

(context: "Promises"
  ($_ seq
      (do &;Monad<Promise>
        [running? (&;future (io true))]
        (test "Can run IO actions in separate threads."
              running?))

      (do &;Monad<Promise>
        [_ (&;wait +500)]
        (test "Can wait for a specified amount of time."
              true))

      (do &;Monad<Promise>
        [[left right] (&;seq (&;future (io true))
                             (&;future (io false)))]
        (test "Can combine promises sequentially."
              (and left (not right))))

      (do &;Monad<Promise>
        [?left (&;alt (&;delay +100 true)
                      (&;delay +200 false))
         ?right (&;alt (&;delay +200 true)
                       (&;delay +100 false))]
        (test "Can combine promises alternatively."
              (case [?left ?right]
                [(#;Left true) (#;Right false)]
                true

                _
                false)))

      (do &;Monad<Promise>
        [?left (&;either (&;delay +100 true)
                         (&;delay +200 false))
         ?right (&;either (&;delay +200 true)
                          (&;delay +100 false))]
        (test "Can combine promises alternatively [Part 2]."
              (and ?left (not ?right))))

      (test "Can poll a promise for its value."
            (and (|> (&;poll (&/wrap true))
                     (case> (#;Some true) true _ false))
                 (|> (&;poll (&;delay +200 true))
                     (case> #;None true _ false))))

      (test "Cannot re-resolve a resolved promise."
            (and (not (io;run (&;resolve false (&/wrap true))))
                 (io;run (&;resolve true (&;promise Bool)))))

      (do &;Monad<Promise>
        [?none (&;time-out +100 (&;delay +200 true))
         ?some (&;time-out +200 (&;delay +100 true))]
        (test "Can establish maximum waiting times for promises to be fulfilled."
              (case [?none ?some]
                [#;None (#;Some true)]
                true

                _
                false)))
      ))
