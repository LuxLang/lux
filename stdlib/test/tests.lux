(;module:
  lux
  (lux (control monad)
       [io]
       (concurrency [promise])
       [cli #+ program:]
       [test])
  (test lux
        (lux ["_;" cli]
             ["_;" host]
             ["_;" io]
             (function ["_;" cont]
                       ["_;" reader]
                       ["_;" state]
                       ["_;" thunk])
             (concurrency ["_;" actor]
                          ["_;" atom]
                          ["_;" frp]
                          ["_;" promise]
                          ["_;" stm])
             (control ["_;" effect]
                      ["_;" interval]
                      ["_;" pipe])
             (data ["_;" bit]
                   ["_;" bool]
                   ["_;" char]
                   ["_;" error]
                   ["_;" ident]
                   ["_;" identity]
                   ["_;" log]
                   ["_;" maybe]
                   ["_;" number]
                   (number ["_;" ratio]
                           ["_;" complex])
                   ["_;" product]
                   ["_;" sum]
                   ["_;" text]
                   (error ["_;" exception])
                   (format ["_;" json]
                           ["_;" xml])
                   (coll ["_;" array]
                         ["_;" dict]
                         ["_;" list]
                         ["_;" queue]
                         ["_;" set]
                         ["_;" ordered]
                         ["_;" stack]
                         ["_;" vector]
                         (tree ["_;" rose]
                               ["_;" zipper])
                         ["_;" seq]
                         ["_;" priority-queue]
                         ["_;" stream])
                   (text ["_;" format]
                         ["_;" lexer]
                         ["_;" regex]))
             ["_;" math]
             (math ["_;" simple]
                   (logic ["_;" continuous]
                          ["_;" fuzzy]))
             (macro ["_;" ast]
                    ["_;" syntax]
                    (poly ["poly_;" eq]
                          ["poly_;" text-encoder]
                          ["poly_;" functor]))
             ["_;" type]
             (type ["_;" check]
                   ["_;" auto])
             ))
  (lux (control [contract])
       (data [env]
             [trace]
             [store])
       [macro]
       (math [random])))

## [Program]
(program: args
  (test;run))
