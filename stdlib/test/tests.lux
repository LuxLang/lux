(.module:
  [lux #*
   [cli (#+ program:)]
   [test]
   ## TODO: Test these modules
   [control
    [contract]
    [concatenative]
    [predicate]
    [monad/free]]
   [data
    [env]
    [trace]
    [store]
    [tainted]
    [format
     [context]
     [html]
     [css]
     [binary]]
    [collection
     [tree ["_." rose/parser]]
     [dictionary [plist]]
     [set [multi]]]
    [text [buffer]]]
   [macro (#+)
    [poly [json]]]
   [type
    [unit]
    [refinement]
    [quotient]]
   [world
    [environment]
    [console]]
   [language
    [host [".H" scheme]]
    [compiler
     [translation (#+)
      [scheme
       ["._scheme" primitive]
       ["._scheme" structure]
       ["._scheme" reference]
       ["._scheme" function]
       ["._scheme" loop]
       ["._scheme" case]
       ["._scheme" extension]
       ["._scheme" extension/common]
       ["._scheme" expression]]]
     [default [repl [type]]]
     [meta
      [io]
      [io/context]
      [io/archive]
      [archive]
      ["._meta" cache]]
     [default ["._default" cache]]]]]
  [test
   ["_." lux]
   [lux
    ["_." cli]
    ["_." host]
    ["_." io]
    [time
     ["_." instant]
     ["_." duration]
     ["_." date]]
    [concurrency
     ["_." actor]
     ["_." atom]
     ["_." frp]
     ["_." promise]
     ["_." stm]
     ["_." semaphore]]
    [control
     ["_." exception]
     ["_." interval]
     ["_." pipe]
     ["_." continuation]
     ["_." reader]
     ["_." writer]
     ["_." state]
     ["_." parser]
     ["_." thread]
     ["_." region]]
    [data
     ["_." bit]
     ["_." bool]
     ["_." color]
     ["_." error]
     ["_." ident]
     ["_." identity]
     ["_." lazy]
     ["_." maybe]
     ["_." product]
     ["_." sum]
     ## ["_." number] ## Specially troublesome...
     [number
      ["_." ratio]
      ["_." complex]]
     ["_." text]
     [text
      ["_." format]
      ["_." lexer]
      ["_." regex]]
     [format
      ["_." json]
      ["_." xml]]
     [collection
      ["_." array]
      ["_." bits]
      ["_." list]
      ["_." stack]
      ["_." row]
      ["_." sequence]
      ["_." dictionary]
      [dictionary ["_.D" ordered]]
      ["_." set]
      [set ["_.S" ordered]]
      ["_." queue]
      [queue ["_." priority]]
      [tree
       ["_." rose]
       [rose ["_." zipper]]]]]
    ["_." math]
    [math
     ["_." random]
     ["_." modular]
     [logic
      ["_." continuous]
      ["_." fuzzy]]]
    [macro
     ["_." code]
     ["_." syntax]
     [poly
      ["poly_." equivalence]
      ["poly_." functor]]]
    [type
     ## ["_." implicit] ## Specially troublesome...
     ["_." resource]
     [object
      ["_." interface]
      ["_." protocol]]]
    [language
     ["_language/." syntax]
     ["_." type]
     [type ["_." check]]
     [compiler
      [analysis
       ["_.A" primitive]
       ["_.A" structure]
       ["_.A" reference]
       ["_.A" case]
       ["_.A" function]
       ## [procedure
       ##  ["_.A" common]
       ##  ["_.A" host]]
       ]
      ## [synthesis
      ##  ["_.S" primitive]
      ##  ["_.S" structure]
      ##  ["_.S" case]
      ##  ["_.S" function]]
      ]
     ]
    [world
     ["_." blob]
     ## ["_." file] ## Specially troublesome...
     [net
      ["_." tcp]
      ["_." udp]]]
    ]]
  )

(program: args
  (test.run))
