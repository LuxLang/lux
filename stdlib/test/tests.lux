(.module:
  lux
  (lux [cli #+ program:]
       [test])
  (test ["_." lux]
        (lux ["_." cli]
             ["_." host]
             ["_." io]
             (time ["_." instant]
                   ["_." duration]
                   ["_." date])
             (concurrency ["_." actor]
                          ["_." atom]
                          ["_." frp]
                          ["_." promise]
                          ["_." stm])
             (control ["_." exception]
                      ["_." interval]
                      ["_." pipe]
                      ["_." cont]
                      ["_." reader]
                      ["_." writer]
                      ["_." state]
                      ["_." parser])
             (data ["_." bit]
                   ["_." bool]
                   ["_." error]
                   ["_." ident]
                   ["_." identity]
                   ["_." maybe]
                   ["_." number]
                   ["_." product]
                   ["_." sum]
                   ["_." text]
                   ["_." lazy]
                   ["_." color]
                   (number ["_." ratio]
                           ["_." complex])
                   (format ["_." json]
                           ["_." xml])
                   (coll ["_." array]
                         ["_." dict]
                         ["_." list]
                         ["_." queue]
                         ["_." set]
                         ["_." stack]
                         ["_." sequence]
                         ["_." priority-queue]
                         ["_." stream]
                         (tree ["tree_." rose]
                               ["tree_." zipper])
                         (ordered ["ordered_." dict]
                                  ["ordered_." set]))
                   (text ["_." format]
                         ["_." lexer]
                         ["_." regex]))
             ["_." math]
             (math ["_." random]
                   (logic ["_." continuous]
                          ["_." fuzzy]))
             (macro ["_." code]
                    ["_." syntax]
                    (poly ["poly_." eq]
                          ["poly_." functor]))
             (type ["_." implicit]
                   ["_." object])
             (lang ["lang_." syntax]
                   ["_." type]
                   (type ["_." check]))
             (world ["_." blob]
                    ["_." file]
                    (net ["_." tcp]
                         ["_." udp]))
             ))
  (lux (control [contract]
                [concatenative])
       (data [env]
             [trace]
             [store]
             [tainted]
             (format [context]
                     [html]
                     [css])
             (coll (tree ["tree_." parser])))
       (math [random])
       [macro]
       (macro (poly [json]))
       (type [unit])
       [world/env]
       [world/console])
  )

(program: args
  (test.run))
