(;module:
  lux
  (lux (control monad)
       [io]
       (concurrency [promise])
       [cli #+ program:]
       [test])
  (test lux
        (lux ["_;" cli]
             ["_;" host]
             ["_;" io]
             ["_;" pipe]
             ["_;" lexer]
             (lexer ["_;" regex])
             (codata ["_;" cont]
                     ["_;" env]
                     ["_;" state]
                     ["_;" thunk]
                     (coll ["_;" stream]))
             (concurrency ["_;" actor]
                          ["_;" atom]
                          ["_;" frp]
                          ["_;" promise]
                          ["_;" stm])
             (control ["_;" interval])
             ["_;" effect]
             (data [bit]
                   [bool]
                   [char]
                   [error]
                   [ident]
                   [identity]
                   [log]
                   [maybe]
                   [number]
                   (number ["_;" ratio]
                           ["_;" complex])
                   [product]
                   [sum]
                   [text]
                   (error [exception])
                   (format [json])
                   (coll [array]
                         [dict]
                         [list]
                         [queue]
                         [set]
                         [stack]
                         ## [vector]
                         (tree [rose]
                               [zipper]))
                   (text [format])
                   )
             ["_;" math]
             (math ## ["_;" random]
                   ["_;" simple]
                   (logic ["_;" continuous]
                          ["_;" fuzzy]))
             ## ["_;" macro]
             (macro ["_;" ast]
                    ["_;" syntax]
                    (poly ["poly_;" eq]
                          ["poly_;" text-encoder]
                          ["poly_;" functor]))
             ["_;" type]
             (type ["_;" check]
                   ["_;" auto])
             )
        ))

## [Program]
(program: args
  (test;run))
