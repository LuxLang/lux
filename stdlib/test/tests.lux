(.module:
  [lux
   [cli (#+ program:)]
   ["." test]
   ## TODO: Test these modules
   [control
    ["._" contract]
    ["._" concatenative]
    ["._" predicate]
    [monad
     ["._" free]]]
   [data
    ["._" env]
    ["._" trace]
    ["._" store]
    ["._" tainted]
    [format
     ["._" context]
     ["._" html]
     ["._" css]
     ["._" binary]]
    [collection
     [tree
      [rose
       ["._" parser]]]
     [dictionary
      ["._" plist]]
     [set
      ["._" multi]]]
    [text
     ["._" buffer]]]
   ["._" macro
    [poly
     ["._" json]]]
   [type
    ["._" unit]
    ["._" refinement]
    ["._" quotient]]
   [world
    ["._" environment]
    ["._" console]]
   [language
    [host
     [".H" scheme]]
    [compiler
     ["._" translation
      [scheme
       ["._scheme" primitive]
       ["._scheme" structure]
       ["._scheme" reference]
       ["._scheme" function]
       ["._scheme" loop]
       ["._scheme" case]
       ["._scheme" extension]
       ["._scheme" extension/common]
       ["._scheme" expression]]]
     [default
      [repl
       ["._" type]]]
     [meta
      ["._meta" io
       ["._meta_io" context]
       ["._meta_io" archive]]
      ["._meta" archive]
      ["._meta" cache]]
     [default
      ["._default" cache]]]]]
  [test
   ["_." lux]
   [lux
    ["_." cli]
    ["_." host]
    ["_." io]
    [time
     ["_." instant]
     ["_." duration]
     ["_." date]]
    [concurrency
     ["_." actor]
     ["_." atom]
     ["_." frp]
     ["_." promise]
     ["_." stm]
     ["_." semaphore]]
    [control
     ["_." exception]
     ["_." interval]
     ["_." pipe]
     ["_." continuation]
     ["_." reader]
     ["_." writer]
     ["_." state]
     ["_." parser]
     ["_." thread]
     ["_." region]]
    [data
     ["_." bit]
     ["_." color]
     ["_." error]
     ["_." ident]
     ["_." identity]
     ["_." lazy]
     ["_." maybe]
     ["_." product]
     ["_." sum]
     [number
      ## "_." number ## TODO: Specially troublesome...
      ["_." i64]
      ["_." ratio]
      ["_." complex]]
     ["_." text
      ["_." format]
      ["_." lexer]
      ["_." regex]]
     [format
      ["_." json]
      ["_." xml]]
     [collection
      ["_." array]
      ["_." bits]
      ["_." list]
      ["_." stack]
      ["_." row]
      ["_." sequence]
      ["_." dictionary
       ["dictionary_." ordered]]
      ["_." set
       ["set_." ordered]]
      ["_." queue
       ["_." priority]]
      [tree
       ["_." rose
        ["_." zipper]]]]]
    ["_." math
     ["_." random]
     ["_." modular]
     [logic
      ["_." continuous]
      ["_." fuzzy]]]
    [macro
     ["_." code]
     ["_." syntax]
     [poly
      ["poly_." equivalence]
      ["poly_." functor]]]
    ["_." type
     ["_." check]
     ## ["_." implicit] ## TODO: Specially troublesome...
     ["_." resource]
     [object
      ["_." interface]
      ["_." protocol]]]
    [language
     ["_language/." syntax]
     [compiler
      [analysis
       ["_.A" primitive]
       ["_.A" structure]
       ["_.A" reference]
       ["_.A" case]
       ["_.A" function]
       [procedure
        ["_.A" common]]]
      [synthesis
       ["_.S" primitive]
       ["_.S" structure]
       ["_.S" case]
       ["_.S" function]]]]
    [world
     ["_." binary]
     ## ["_." file] ## TODO: Specially troublesome...
     [net
      ["_." tcp]
      ["_." udp]]]]]
  )

(program: args
  (test.run))
