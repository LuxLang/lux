##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (control monad)
       (codata [io])
       (concurrency [promise])
       [cli #+ program:]
       [test])
  (test lux
        (lux ["_;" cli]
             ["_;" host]
             ["_;" pipe]
             ["_;" lexer]
             ["_;" regex]
             (codata ["_;" io]
                     ["_;" env]
                     ["_;" state]
                     ["_;" cont]
                     (struct ["_;" stream]))
             (concurrency ["_;" actor]
                          ["_;" atom]
                          ["_;" frp]
                          ["_;" promise]
                          ["_;" stm])
             (control [effect])
             (data [bit]
                   [bool]
                   [char]
                   [error]
                   [ident]
                   [identity]
                   [log]
                   [maybe]
                   [number]
                   [product]
                   [sum]
                   [text]
                   (error [exception])
                   (format [json])
                   (struct [array]
                           [dict]
                           [list]
                           [queue]
                           [set]
                           [stack]
                           [tree]
                           [vector]
                           [zipper])
                   (text [format]))
             ["_;" math]
             (math ["_;" ratio]
                   ["_;" complex]
                   ## ["_;" random]
                   ["_;" simple]
                   )
             ## ["_;" macro]
             (macro ["_;" ast]
                    ["_;" syntax]
                    ["_;" template]
                    (poly ["poly_;" eq]
                          ["poly_;" text-encoder]
                          ["poly_;" functor]))
             ["_;" type]
             (type ["_;" check]
                   ["_;" auto])
             )
        ))

## [Program]
(program: args
  (test;run))
