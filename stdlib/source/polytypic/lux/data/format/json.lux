... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" codec]]
   [control
    ["?" parser]]
   [data
    [text
     ["%" \\format (.only format)]]
    [collection
     [dictionary (.only Dictionary)]
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [meta
    ["[0]" type (.only)
     ["<[1]>" \\parser]
     ["[0]" poly (.only polytypic)]]]
   [world
    [time
     ["[0]" instant]
     ["[0]" duration]
     ["[0]" date]
     ["[0]" day]
     ["[0]" month]]]]]
 [\\library
  ["[0]" / (.only JSON)]])

(the .public codec
  (polytypic codec
    (with_expansions
      [,basic (with_template [,type ,codec]
                [(do !
                   [_ (<type>.sub ,type)]
                   (in (` ,codec)))]

                [Bit /.bit]
                [Nat /.nat]
                [Int /.int]
                [Rev /.rev]
                [Frac /.frac]
                [Text /.text])
       ,time (with_template [,type ,codec]
               [(do !
                  [_ (<type>.exactly ,type)]
                  (in (` ,codec)))]

               [Any /.any]
               [duration.Duration /.duration]
               [instant.Instant /.instant]
               [date.Date /.date]
               [day.Day /.day]
               [month.Month /.month])]
      (do [! ?.monad]
        [inputT <type>.next]
        (all ?.either
             ,basic
             ,time
             (do !
               ['value (<type>.applied (all ?.after
                                            (<type>.exactly Dictionary)
                                            (<type>.exactly .Text)
                                            codec))]
               (in (` (/.dictionary (, 'value)))))
             (do !
               ['item (<type>.applied (all ?.after
                                           (<type>.exactly .List)
                                           codec))]
               (in (` (/.list (, 'item)))))
             (do !
               [[head tail] (<type>.variant (?.and codec (?.many codec)))]
               (in (` (all /.sum
                           (, head)
                           (,* tail)))))
             (do !
               [[head tail] (<type>.tuple (?.and codec (?.many codec)))]
               (in (` (all /.product
                           (, head)
                           (,* tail)))))
             ... Type recursion
             (do !
               [['self 'body] (<type>.recursive codec)]
               (in (` (/.recursive
                       (.function ((, 'self) (, 'self))
                         (, 'body))))))
             <type>.recursive_self
             ... Type applications
             (do !
               [partsC (<type>.applied (?.many codec))]
               (in (` ((,* partsC)))))
             <type>.parameter
             <type>.recursive_call
             ... Polymorphism
             (do !
               [['func '*vars 'body] (<type>.polymorphic codec)]
               (in (` (is (All ((, 'func) (,* '*vars))
                            (-> (,* (list#each (|>> , (codec.Codec /.JSON) `) '*vars))
                                (codec.Codec /.JSON ((, (poly.code <type>.fresh inputT)) (,* '*vars)))))
                          (function ((, 'func) (,* '*vars))
                            (, 'body))))))
             ... If all else fails...
             (?.failure (format "Cannot create JSON codec for: " (type.absolute_format inputT)))
             )))))
