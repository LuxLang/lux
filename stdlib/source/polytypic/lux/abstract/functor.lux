... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" parser]]
   [data
    [collection
     ["[0]" list]]]
   [meta
    ["[0]" code]
    ["[0]" type
     [poly (.only polytypic)]
     ["<[1]>" \\parser]]]]]
 [\\library
  ["[0]" /]])

(the .public functor
  (polytypic functor
    (do [! <>.monad]
      [.let ['_ (code.local "_")
             'recursive (code.local "recursive")]
       [_ _ outputC] (is (<type>.Parser [Code (List Code) Code])
                         (<| <type>.polymorphic
                             <>.rec
                             (function (_ functor))
                             (all <>.either
                                  ... Type-var
                                  (do <>.monad
                                    [arity <type>.arity
                                     _ (<type>.this_parameter (-- arity))]
                                    (in (` /.variable)))
                                  ... Variants
                                  (do !
                                    [[head tail] (<type>.variant (<>.and functor (<>.some functor)))]
                                    (in (` (all /.sum
                                                (, head)
                                                (,* tail)))))
                                  ... Tuples
                                  (do !
                                    [[head tail] (<type>.tuple (<>.and functor (<>.some functor)))]
                                    (in (` (all /.product
                                                (, head)
                                                (,* tail)))))
                                  ... Functions
                                  (do !
                                    [[input output] (<type>.function (<>.many <type>.any)
                                                      functor)]
                                    (in (` (<| (,* (list.repeated (list.size input) (` /.function)))
                                               (, output)))))
                                  ... Recursion
                                  (do <>.monad
                                    [_ <type>.recursive_call]
                                    (in 'recursive))
                                  ... Parameters
                                  (do <>.monad
                                    [_ <type>.any]
                                    (in (` /.constant))))))]
      (in (` (/.recursive
              (function ((, '_) (, 'recursive))
                (, outputC))))))))
