(.module:
  [lux (#- for)
   [abstract
    [equivalence (#+ Equivalence)]]
   [data
    ["." product]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." monoid)]]]
   [macro
    ["." template]]
   [world
    ["." file]]])

(type: #export Runtime
  {#program Text
   #parameters (List Text)})

(def: #export equivalence
  (Equivalence Runtime)
  (product.equivalence
   text.equivalence
   (list.equivalence text.equivalence)))

(template [<name> <command> <parameters>]
  [(def: #export <name>
     Runtime
     {#program <command>
      #parameters (`` (list (~~ (template.splice <parameters>))))})]

  [default_java "java" ["-jar"]]
  [default_js "node" ["--stack_size=8192"]]
  [default_python "python3" []]
  [default_lua "lua" []]
  [default_ruby "RUBY_THREAD_VM_STACK_SIZE=15700000 ruby" []]
  )

(def: #export (for runtime path)
  (-> Runtime file.Path Runtime)
  (update@ #parameters
           (function (_ parameters)
             (list\compose parameters (list path)))
           runtime))
