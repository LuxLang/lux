... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Tag)
   [abstract
    [monad (.only do)]
    ["<>" projection]]
   [control
    ["[0]" pipe]
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception]]
   [data
    ["[0]" text]
    [format
     ["[0]" xml (.only Tag XML)
      ["<[1]>" \\projection (.only Projection)]]]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid functor mix)]
     ["[0]" stack (.use "[1]#[0]" monoid functor mix)]
     ["[0]" set]
     ["[0]" dictionary]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" name]]
   [world
    ["[0]" file]]]]
 ["[0]" //
  ["/" profile]
  ["[1][0]" dependency (.only Dependency)]
  [repository
   [remote (.only Address)]]
  ["[1][0]" artifact (.only Artifact)
   ["[1]/[0]" type]]])

... https://maven.apache.org/pom.html

(the project_tag "project")
(the dependency_tag "dependency")
(the dependencies_tag "dependencies")
(the repositories_tag "repositories")
(the repository_tag "repository")
(the url_tag "url")
(the group_tag "groupId")
(the artifact_tag "artifactId")
(the version_tag "version")

(the .public file
  file.Path
  "pom.xml")

(the version
  XML
  {xml.#Node ["" "modelVersion"] xml.attributes
             (stack {xml.#Text "4.0.0"})})

(the (property tag value)
  (-> Text Text XML)
  {xml.#Node ["" tag]
             xml.attributes
             (stack {xml.#Text value})})

(the (artifact value)
  (-> Artifact (Stack XML))
  (stack (..property ..group_tag (its //artifact.#group value))
         (..property ..artifact_tag (its //artifact.#name value))
         (..property ..version_tag (its //artifact.#version value))))

(the distribution
  (-> /.Distribution XML)
  (|>> (pipe.when
         {/.#Repo} "repo"
         {/.#Manual} "manual")
       (..property "distribution")))

(the (license [name url distribution])
  (-> /.License XML)
  (|> (stack (..property "name" name)
             (..property ..url_tag url)
             (..distribution distribution))
      {xml.#Node ["" "license"] xml.attributes}))

(the repository
  (-> Address XML)
  (|>> (..property ..url_tag)
       stack
       {xml.#Node ["" ..repository_tag] xml.attributes}))

(the (dependency value)
  (-> Dependency XML)
  {xml.#Node ["" ..dependency_tag]
             xml.attributes
             (stack#composite (..artifact (its //dependency.#artifact value))
                              (stack (..property "type" (its //dependency.#type value))))})

(the (group tag)
  (-> Text (-> (Stack XML) XML))
  (|>> {xml.#Node ["" tag] xml.attributes}))

(the scm
  (-> /.SCM XML)
  (|>> (..property ..url_tag)
       stack
       {xml.#Node ["" "scm"] xml.attributes}))

(the (organization [name url])
  (-> /.Organization XML)
  (|> (stack (..property "name" name)
             (..property ..url_tag url))
      {xml.#Node ["" "organization"] xml.attributes}))

(the (developer_organization [name url])
  (-> /.Organization (Stack XML))
  (stack (..property "organization" name)
         (..property "organizationUrl" url)))

(the (developer' [name email organization])
  (-> /.Developer (Stack XML))
  (stack.partial (..property "name" name)
                 (..property "email" email)
                 (|> organization (maybe#each ..developer_organization) (maybe.else (stack)))))

(template.with [<name> <type> <tag>]
  [(the <name>
     (-> <type> XML)
     (|>> ..developer' {xml.#Node ["" <tag>] xml.attributes}))]

  [developer /.Developer "developer"]
  [contributor /.Contributor "contributor"]
  )

(the (info identity value)
  (-> Artifact /.Info (Stack XML))
  (all stack#composite
       (|> identity (its //artifact.#name) (..property "name") stack)
       (|> value (its /.#url) (maybe#each (..property ..url_tag)) maybe.stack)
       (|> value (its /.#description) (maybe#each (..property "description")) maybe.stack)
       (|> value (its /.#licenses) (stack#each ..license) (..group "licenses") stack)
       (|> value (its /.#scm) (maybe#each ..scm) maybe.stack)
       (|> value (its /.#organization) (maybe#each ..organization) maybe.stack)
       (|> value (its /.#developers) (stack#each ..developer) (..group "developers") stack)
       (|> value (its /.#contributors) (stack#each ..contributor) (..group "contributors") stack)
       ))

(the .public (write value)
  (-> /.Profile (Try XML))
  (when (its /.#identity value)
    {.#Some identity}
    {try.#Success
     {xml.#Node ["" ..project_tag]
                xml.attributes
                (all stack#composite
                     (stack ..version)
                     (..artifact identity)
                     (|> value
                         (its /.#info)
                         (maybe#each (..info identity))
                         (maybe.else (stack)))
                     (|> value
                         (its /.#repositories)
                         set.as_list
                         (list#each ..repository)
                         list.as_stack
                         (..group "repositories")
                         stack)
                     (|> value
                         (its /.#dependencies)
                         set.as_list
                         (list#each ..dependency)
                         list.as_stack
                         (..group ..dependencies_tag)
                         stack)
                     )}}

    _
    (exception.except /.no_identity [])))

(the property_of
  (Projection [Tag Text])
  (do [! <>.monad]
    [tag <xml>.tag]
    (<| (<xml>.node tag)
        (by ! each (|>> [tag]))
        <xml>.text)))

(the (dependency_of own_version parent_version)
  (-> Text Text (Projection Dependency))
  (do [! <>.monad]
    [properties (by ! each (|>> list.of_stack (dictionary.of_list name.hash))
                    (<| (<xml>.node ["" ..dependency_tag])
                        (<>.some ..property_of)))]
    (<| <>.of_try
        (try.of_maybe "Cannot parse dependency.")
        (do try.monad
          [group (dictionary.value ["" ..group_tag] properties)
           artifact (dictionary.value ["" ..artifact_tag] properties)]
          (in [//dependency.#artifact [//artifact.#group group
                                       //artifact.#name artifact
                                       //artifact.#version (|> properties
                                                               (dictionary.value ["" ..version_tag])
                                                               (try.else "")
                                                               (text.replaced "${project.version}" own_version)
                                                               (text.replaced "${project.parent.version}" parent_version))]
               //dependency.#type (|> properties
                                      (dictionary.value ["" "type"])
                                      (try.else //artifact/type.jvm_library))])))))

(the (dependencies_of own_version parent_version)
  (-> Text Text (Projection (Stack Dependency)))
  (<| (<xml>.node ["" ..dependencies_tag])
      (<>.some (..dependency_of own_version parent_version))))

(the repository_of
  (Projection Address)
  (<| (<xml>.node ["" ..repository_tag])
      (<xml>.node ["" ..url_tag])
      <xml>.text))

(the repositories_of
  (Projection (Stack Address))
  (<| (<xml>.node ["" ..repositories_tag])
      (<>.some ..repository_of)))

(the own_version
  (Projection Text)
  (<| (<xml>.node ["" ..version_tag])
      <xml>.text))

(the parent_version
  (Projection Text)
  (<| (<xml>.node ["" "parent"])
      ..own_version))

(the .public of_xml
  (Projection /.Profile)
  (do [! <>.monad]
    [own_version (<>.else "" (<xml>.somewhere ..own_version))
     parent_version (<>.else "" (<xml>.somewhere ..parent_version))]
    (<| (<xml>.node ["" ..project_tag])
        (do !
          [dependencies (|> (..dependencies_of own_version parent_version)
                            <xml>.somewhere
                            (<>.else (stack)))
           repositories (|> ..repositories_of
                            <xml>.somewhere
                            (<>.else (stack)))
           _ (<>.some <xml>.any)]
          (in (|> (by /.monoid identity)
                  (revised /.#dependencies (function (_ empty)
                                             (stack#mix set.has empty dependencies)))
                  (revised /.#repositories (function (_ empty)
                                             (stack#mix set.has empty repositories)))))))))
