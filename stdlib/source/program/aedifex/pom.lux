(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [control
    [pipe (#+ case>)]
    ["." try (#+ Try)]
    ["." exception]
    ["<>" parser
     ["<xml>" xml (#+ Parser)]]]
   [data
    ["." name]
    ["." maybe ("#\." functor)]
    [format
     ["_" xml (#+ Tag XML)]]
    [collection
     ["." list ("#\." monoid functor fold)]
     ["." set]
     ["." dictionary]]]]
  ["." // #_
   ["/" profile]
   ["#." dependency (#+ Dependency)]
   [repository
    [remote (#+ Address)]]
   ["#." artifact (#+ Artifact)
    ["#/." type]]])

## https://maven.apache.org/pom.html

(def: project_tag "project")
(def: dependencies_tag "dependencies")
(def: group_tag "groupId")
(def: artifact_tag "artifactId")
(def: version_tag "version")

(def: #export file
  "pom.xml")

(def: version
  XML
  (#_.Node ["" "modelVersion"] _.attributes
           (list (#_.Text "4.0.0"))))

(def: (property tag value)
  (-> Text Text XML)
  (#_.Node ["" tag]
           _.attributes
           (list (#_.Text value))))

(def: (artifact value)
  (-> Artifact (List XML))
  (list (..property ..group_tag (get@ #//artifact.group value))
        (..property ..artifact_tag (get@ #//artifact.name value))
        (..property ..version_tag (get@ #//artifact.version value))))

(def: distribution
  (-> /.Distribution XML)
  (|>> (case> #/.Repo "repo"
              #/.Manual "manual")
       (..property "distribution")))

(def: (license [name url distribution])
  (-> /.License XML)
  (|> (list (..property "name" name)
            (..property "url" url)
            (..distribution distribution))
      (#_.Node ["" "license"] _.attributes)))

(def: repository
  (-> Address XML)
  (|>> (..property "url")
       list
       (#_.Node ["" "repository"] _.attributes)))

(def: (dependency value)
  (-> Dependency XML)
  (#_.Node ["" "dependency"]
           _.attributes
           (list\compose (..artifact (get@ #//dependency.artifact value))
                         (list (..property "type" (get@ #//dependency.type value))))))

(def: (group tag)
  (-> Text (-> (List XML) XML))
  (|>> (#_.Node ["" tag] _.attributes)))

(comment
  (def: scm
    (-> /.SCM XML)
    (|>> (..property "url")
         list
         (#_.Node ["" "scm"] _.attributes)))

  (def: (organization [name url])
    (-> /.Organization XML)
    (|> (list (..property "name" name)
              (..property "url" url))
        (#_.Node ["" "organization"] _.attributes)))

  (def: (developer_organization [name url])
    (-> /.Organization (List XML))
    (list (..property "organization" name)
          (..property "organizationUrl" url)))

  (def: (developer' [name email organization])
    (-> /.Developer (List XML))
    (list& (..property "name" name)
           (..property "email" email)
           (|> organization (maybe\map ..developer_organization) (maybe.default (list)))))

  (template [<name> <type> <tag>]
    [(def: <name>
       (-> <type> XML)
       (|>> ..developer' (#_.Node ["" <tag>] _.attributes)))]

    [developer /.Developer "developer"]
    [contributor /.Contributor "contributor"]
    )

  (def: (info value)
    (-> /.Info (List XML))
    ($_ list\compose
        (|> value (get@ #/.url) (maybe\map (..property "url")) maybe.to_list)
        (|> value (get@ #/.description) (maybe\map (..property "description")) maybe.to_list)
        (|> value (get@ #/.licenses) (list\map ..license) (..group "licenses") list)
        (|> value (get@ #/.scm) (maybe\map ..scm) maybe.to_list)
        (|> value (get@ #/.organization) (maybe\map ..organization) maybe.to_list)
        (|> value (get@ #/.developers) (list\map ..developer) (..group "developers") list)
        (|> value (get@ #/.contributors) (list\map ..contributor) (..group "contributors") list)
        ))
  )

(def: #export (write value)
  (-> /.Profile (Try XML))
  (case (get@ #/.identity value)
    (#.Some identity)
    (#try.Success
     (#_.Node ["" ..project_tag] _.attributes
              ($_ list\compose
                  (list ..version)
                  (..artifact identity)
                  (|> value (get@ #/.repositories) set.to_list (list\map ..repository) (..group "repositories") list)
                  (|> value (get@ #/.dependencies) set.to_list (list\map ..dependency) (..group ..dependencies_tag) list)
                  )))

    _
    (exception.throw /.no_identity [])))

(def: parse_property
  (Parser [Tag Text])
  (<>.and <xml>.tag
          (<xml>.children <xml>.text)))

(def: parse_dependency
  (Parser Dependency)
  (do {! <>.monad}
    [properties (\ ! map (dictionary.from_list name.hash)
                   (<xml>.children (<>.some ..parse_property)))]
    (<| <>.lift
        try.from_maybe
        (do maybe.monad
          [group (dictionary.get ["" ..group_tag] properties)
           artifact (dictionary.get ["" ..artifact_tag] properties)
           version (dictionary.get ["" ..version_tag] properties)]
          (wrap {#//dependency.artifact {#//artifact.group group
                                         #//artifact.name artifact
                                         #//artifact.version version}
                 #//dependency.type (|> properties
                                        (dictionary.get ["" "type"])
                                        (maybe.default //artifact/type.lux_library))})))))

(def: parse_dependencies
  (Parser (List Dependency))
  (do {! <>.monad}
    [_ (<xml>.node ["" ..dependencies_tag])]
    (<xml>.children (<>.some ..parse_dependency))))

(def: #export parser
  (Parser /.Profile)
  (do {! <>.monad}
    [_ (<xml>.node ["" ..project_tag])]
    (<xml>.children
     (do !
       [dependencies (<xml>.somewhere ..parse_dependencies)
        _ (<>.some <xml>.ignore)]
       (wrap (|> (\ /.monoid identity)
                 (update@ #/.dependencies (function (_ empty)
                                            (list\fold set.add empty dependencies)))))))))
