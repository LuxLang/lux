... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    [io (.only IO)]
    ["[0]" try (.only Try)]
    [concurrency
     ["[0]" async (.only Async)]
     ["[0]" stm]]]
   [data
    [binary (.only Binary)]]
   [world
    [net
     [uri (.only URI)]]]]])

(every .public (Repository !)
  (Interface
   (is Text
       description)
   (is (-> URI (! (Try Binary)))
       download)
   (is (-> URI Binary (! (Try Any)))
       upload)))

(the .public (async repository)
  (-> (Repository IO) (Repository Async))
  (implementation
   (the description
     (of repository description))
   (the (download uri)
     (async.future (of repository download uri)))

   (the (upload uri content)
     (async.future (of repository upload uri content)))
   ))

(every .public (Mock s)
  (Interface
   (is Text
       the_description)
   (is (-> URI s (Try [s Binary]))
       on_download)
   (is (-> URI Binary s (Try s))
       on_upload)))

(the .public (mock mock init)
  (for_any (_ s)
    (-> (Mock s) s
        (Repository Async)))
  (let [state (stm.var init)]
    (implementation
     (the description
       (of mock the_description))
     
     (the (download uri)
       (stm.commit!
        (do [! stm.monad]
          [|state| (stm.read state)]
          (when (of mock on_download uri |state|)
            {try.#Success [|state| output]}
            (do !
              [_ (stm.write |state| state)]
              (in {try.#Success output}))
            
            {try.#Failure error}
            (in {try.#Failure error})))))

     (the (upload uri content)
       (stm.commit!
        (do [! stm.monad]
          [|state| (stm.read state)]
          (when (of mock on_upload uri content |state|)
            {try.#Success |state|}
            (do !
              [_ (stm.write |state| state)]
              (in {try.#Success []}))
            
            {try.#Failure error}
            (in {try.#Failure error})))))
     )))
