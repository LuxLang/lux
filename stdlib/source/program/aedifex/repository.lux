... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [concurrency
    ["[0]" future (.only Future)]
    ["[0]" stm]]
   [control
    [io (.only IO)]]
   [error
    ["[0]" try (.only Try)]]
   [data
    [binary (.only Binary)]]
   [world
    [net
     [uri (.only URI)]]]]])

(every .public (Repository !)
  (Interface
   (is Text
       description)
   (is (-> URI (! (Try Binary)))
       download)
   (is (-> URI Binary (! (Try Any)))
       upload)))

(the .public (future repository)
  (-> (Repository IO) (Repository Future))
  (implementation
   (the description
     (by repository description))
   (the (download uri)
     (future.soon (by repository download uri)))

   (the (upload uri content)
     (future.soon (by repository upload uri content)))
   ))

(every .public (Memory s)
  (Interface
   (is Text
       the_description)
   (is (-> URI s (Try [s Binary]))
       on_download)
   (is (-> URI Binary s (Try s))
       on_upload)))

(the .public (memory memory init)
  (for_any (_ s)
    (-> (Memory s) s
        (Repository Future)))
  (let [state (stm.var init)]
    (implementation
     (the description
       (by memory the_description))
     
     (the (download uri)
       (stm.commit!
        (do [! stm.monad]
          [|state| (stm.read state)]
          (when (by memory on_download uri |state|)
            {try.#Success [|state| output]}
            (do !
              [_ (stm.write |state| state)]
              (pure {try.#Success output}))
            
            {try.#Failure error}
            (pure {try.#Failure error})))))

     (the (upload uri content)
       (stm.commit!
        (do [! stm.monad]
          [|state| (stm.read state)]
          (when (by memory on_upload uri content |state|)
            {try.#Success |state|}
            (do !
              [_ (stm.write |state| state)]
              (pure {try.#Success []}))
            
            {try.#Failure error}
            (pure {try.#Failure error})))))
     )))
