(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]]
   [control
    ["." try (#+ Try) ("#\." functor)]
    [parser
     ["<.>" xml]]]
   [data
    ["." sum]
    ["." product]
    ["." binary (#+ Binary)]
    [text
     ["." encoding]]
    [format
     ["." xml (#+ XML)]]
    [collection
     [set (#+ Set)]]]]
  ["." // #_
   ["/" profile]
   ["#." hash (#+ Hash SHA-1 MD5)]
   ["#." pom]
   [dependency (#+ Dependency)
    ["#." status (#+ Status)]]
   [repository
    [remote (#+ Address)]
    ["#." origin (#+ Origin)]]])

(type: #export Package
  {#origin Origin
   #library [Binary Status]
   #pom [XML Binary Status]})

(template [<name> <tag>]
  [(def: #export (<name> package)
     (-> Package Bit)
     (case (get@ #origin package)
       (<tag> _)
       true
       
       _
       false))]

  [local? #//origin.Local]
  [remote? #//origin.Remote]
  )

(def: #export (local pom library)
  (-> XML Binary Package)
  {#origin (#//origin.Local "")
   #library [library #//status.Unverified]
   #pom [pom
         (|> pom (\ xml.codec encode) (\ encoding.utf8 encode))
         #//status.Unverified]})

(def: #export dependencies
  (-> Package (Try (Set Dependency)))
  (|>> (get@ #pom)
       product.left
       list
       (<xml>.run //pom.parser)
       (try\map (get@ #/.dependencies))))

(def: #export repositories
  (-> Package (Try (Set Address)))
  (|>> (get@ #pom)
       product.left
       list
       (<xml>.run //pom.parser)
       (try\map (get@ #/.repositories))))

(def: #export equivalence
  (Equivalence Package)
  ($_ product.equivalence
      //origin.equivalence
      ($_ product.equivalence
          binary.equivalence
          //status.equivalence)
      ($_ product.equivalence
          xml.equivalence
          binary.equivalence
          //status.equivalence)
      ))
