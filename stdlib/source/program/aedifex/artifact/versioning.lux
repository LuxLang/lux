... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [control
    ["<>" projection]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]
     ["<[1]>" \\projection]]
    [format
     ["[0]" xml (.only XML)
      ["<[1]>" \\projection (.only Projection)]]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["n" nat]]]
   [world
    ["[0]" time (.only Time)
     ["[0]" date (.only Date)]
     ["[0]" year]
     ["[0]" month]]]]]
 ["[0]" //
  ["[1][0]" time]
  ["[1][0]" snapshot (.only Snapshot)
   ["[1]/[0]" version (.only Version)]]])

(every .public Versioning
  (Record
   [#snapshot Snapshot
    #last_updated //time.Time
    #versions (List Version)]))

(the .public init
  [#snapshot {//snapshot.#Local}
   #last_updated //time.epoch
   #versions (list)])

(the .public equivalence
  (Equivalence Versioning)
  (all product.equivalence
       //snapshot.equivalence
       //time.equivalence
       (list.equivalence //snapshot/version.equivalence)
       ))

(with_template [<definition> <tag>]
  [(the <definition> xml.Tag ["" <tag>])]

  [<last_updated> "lastUpdated"]
  [<snapshot_versions> "snapshotVersions"]

  [<versioning> "versioning"]
  )

(the last_updated_format
  (-> //time.Time XML)
  (|>> //time.format {xml.#Text} list {xml.#Node ..<last_updated> xml.attributes}))

(the .public (format (open "_[0]"))
  (-> Versioning XML)
  (<| {xml.#Node ..<versioning> xml.attributes}
      (list (//snapshot.format _#snapshot)
            (..last_updated_format _#last_updated)
            (|> _#versions
                (list#each //snapshot/version.format)
                {xml.#Node ..<snapshot_versions> xml.attributes}))))

(the (text tag)
  (-> xml.Tag (Projection Text))
  (<| (<xml>.node tag)
      <xml>.text))

(the last_updated_projection
  (Projection //time.Time)
  (<| (<text>.then //time.projection)
      (..text ..<last_updated>)))

(the .public projection
  (Projection Versioning)
  (<| (<xml>.node ..<versioning>)
      (all <>.and
           (<>.else {//snapshot.#Local} (<xml>.somewhere //snapshot.projection))
           (<>.else //time.epoch (<xml>.somewhere ..last_updated_projection))
           (<| (<>.else (list))
               <xml>.somewhere
               (<xml>.node ..<snapshot_versions>)
               (<>.some //snapshot/version.projection))
           )))
