(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]
    [monad (#+ do)]]
   [control
    ["." exception (#+ exception:)]
    ["<>" parser
     ["<.>" xml (#+ Parser)]
     ["<.>" text]]]
   [data
    ["." product]
    ["." maybe]
    ["." text
     ["%" format]]
    [format
     ["." xml (#+ XML)]]
    [collection
     ["." list ("#\." functor)]]]
   [math
    [number
     ["n" nat]]]
   ["." time (#+ Time)
    ["." instant (#+ Instant)]
    ["." date (#+ Date)]
    ["." year]
    ["." month]]]
  ["." // #_
   ["#." time]
   ["#." snapshot (#+ Snapshot)
    ["#/." version (#+ Version)]]])

(type: #export Versioning
  {#snapshot Snapshot
   #last_updated Instant
   #versions (List Version)})

(def: #export init
  {#snapshot #//snapshot.Local
   #last_updated instant.epoch
   #versions (list)})

(def: #export equivalence
  (Equivalence Versioning)
  ($_ product.equivalence
      //snapshot.equivalence
      instant.equivalence
      (list.equivalence //snapshot/version.equivalence)
      ))

(template [<definition> <tag>]
  [(def: <definition> xml.Tag ["" <tag>])]

  [<last_updated> "lastUpdated"]
  [<snapshot_versions> "snapshotVersions"]

  [<versioning> "versioning"]
  )

(def: format_last_updated
  (-> Instant XML)
  (|>> //time.format #xml.Text list (#xml.Node ..<last_updated> xml.attributes)))

(def: #export (format (^slots [#snapshot #last_updated #versions]))
  (-> Versioning XML)
  (<| (#xml.Node ..<versioning> xml.attributes)
      (list (//snapshot.format snapshot)
            (..format_last_updated last_updated)
            (|> versions
                (list\map //snapshot/version.format)
                (#xml.Node ..<snapshot_versions> xml.attributes)))))

(def: (sub tag parser)
  (All [a] (-> xml.Tag (Parser a) (Parser a)))
  (do <>.monad
    [_ (<xml>.node tag)]
    (<xml>.children parser)))

(def: (text tag)
  (-> xml.Tag (Parser Text))
  (..sub tag <xml>.text))

(def: last_updated_parser
  (Parser Instant)
  (<text>.embed //time.parser
                (..text ..<last_updated>)))

(def: #export parser
  (Parser Versioning)
  (<| (..sub ..<versioning>)
      ($_ <>.and
          (<xml>.somewhere //snapshot.parser)
          (<xml>.somewhere ..last_updated_parser)
          (<| <xml>.somewhere
              (..sub ..<snapshot_versions>)
              (<>.some //snapshot/version.parser))
          )))
