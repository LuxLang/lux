(.module:
  [library
   [lux #*
    [abstract
     [equivalence (#+ Equivalence)]
     [monad (#+ do)]]
    [control
     ["." exception (#+ exception:)]
     ["<>" parser
      ["<.>" xml (#+ Parser)]
      ["<.>" text]]]
    [data
     ["." product]
     ["." text
      ["%" format]]
     [format
      ["." xml (#+ XML)]]
     [collection
      ["." list ("#\." functor)]]]
    [math
     [number
      ["n" nat]]]
    ["." time (#+ Time)
     ["." date (#+ Date)]
     ["." year]
     ["." month]]]]
  ["." // #_
   ["#." time]
   ["#." snapshot (#+ Snapshot)
    ["#/." version (#+ Version)]]])

(type: .public Versioning
  {#snapshot Snapshot
   #last_updated //time.Time
   #versions (List Version)})

(def: .public init
  {#snapshot #//snapshot.Local
   #last_updated //time.epoch
   #versions (list)})

(def: .public equivalence
  (Equivalence Versioning)
  ($_ product.equivalence
      //snapshot.equivalence
      //time.equivalence
      (list.equivalence //snapshot/version.equivalence)
      ))

(template [<definition> <tag>]
  [(def: <definition> xml.Tag ["" <tag>])]

  [<last_updated> "lastUpdated"]
  [<snapshot_versions> "snapshotVersions"]

  [<versioning> "versioning"]
  )

(def: last_updated_format
  (-> //time.Time XML)
  (|>> //time.format #xml.Text list (#xml.Node ..<last_updated> xml.attributes)))

(def: .public (format (^slots [#snapshot #last_updated #versions]))
  (-> Versioning XML)
  (<| (#xml.Node ..<versioning> xml.attributes)
      (list (//snapshot.format snapshot)
            (..last_updated_format last_updated)
            (|> versions
                (list\map //snapshot/version.format)
                (#xml.Node ..<snapshot_versions> xml.attributes)))))

(def: (text tag)
  (-> xml.Tag (Parser Text))
  (<| (<xml>.node tag)
      <xml>.text))

(def: last_updated_parser
  (Parser //time.Time)
  (<| (<text>.then //time.parser)
      (..text ..<last_updated>)))

(def: .public parser
  (Parser Versioning)
  (<| (<xml>.node ..<versioning>)
      ($_ <>.and
          (<>.else #//snapshot.Local (<xml>.somewhere //snapshot.parser))
          (<>.else //time.epoch (<xml>.somewhere ..last_updated_parser))
          (<| (<>.else (list))
              <xml>.somewhere
              (<xml>.node ..<snapshot_versions>)
              (<>.some //snapshot/version.parser))
          )))
