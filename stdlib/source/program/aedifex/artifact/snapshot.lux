(.module:
  [lux (#- Name Type)
   [abstract
    [equivalence (#+ Equivalence)]
    [monad (#+ do)]]
   [control
    ["<>" parser
     ["<.>" xml (#+ Parser)]
     ["<.>" text]]]
   [data
    ["." sum]
    [format
     ["." xml (#+ XML)]]]]
  ["." / #_
   ["#." stamp (#+ Stamp)]])

(type: #export Snapshot
  #Local
  (#Remote Stamp))

(implementation: any_equivalence
  (Equivalence Any)

  (def: (= _ _)
    true))

(def: #export equivalence
  (Equivalence Snapshot)
  ($_ sum.equivalence
      ..any_equivalence
      /stamp.equivalence
      ))

(template [<definition> <tag>]
  [(def: <definition> xml.Tag ["" <tag>])]

  [<local_copy> "localCopy"]
  [<snapshot> "snapshot"]
  )

(def: local_copy_value
  "true")

(def: local_copy_format
  XML
  (#xml.Node <local_copy>
             xml.attributes
             (list (#xml.Text ..local_copy_value))))

(def: local_copy_parser
  (Parser Any)
  (<| (<xml>.node ..<local_copy>)
      (<text>.embed (<text>.this ..local_copy_value))
      <xml>.text))

(def: #export (format snapshot)
  (-> Snapshot XML)
  (<| (#xml.Node ..<snapshot> xml.attributes)
      (case snapshot
        #Local
        (list ..local_copy_format)
        
        (#Remote stamp)
        (/stamp.format stamp))))

(def: #export parser
  (Parser Snapshot)
  (<| (<xml>.node <snapshot>)
      (<>.or ..local_copy_parser
             /stamp.parser)))
