(.using
 [library
  [lux (.except Type)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [control
    ["<>" parser (.only)
     ["<[0]>" xml (.only Parser)]
     ["<[0]>" text]]]
   [data
    ["[0]" sum]
    [format
     ["[0]" xml (.only XML)]]]]]
 ["[0]" /
  ["[1][0]" stamp (.only Stamp)]])

(type: .public Snapshot
  (Variant
   {#Local}
   {#Remote Stamp}))

(implementation: any_equivalence
  (Equivalence Any)

  (def: (= _ _)
    true))

(def: .public equivalence
  (Equivalence Snapshot)
  (all sum.equivalence
       ..any_equivalence
       /stamp.equivalence
       ))

(with_template [<definition> <tag>]
  [(def: <definition> xml.Tag ["" <tag>])]

  [<local_copy> "localCopy"]
  [<snapshot> "snapshot"]
  )

(def: local_copy_value
  "true")

(def: local_copy_format
  XML
  {xml.#Node <local_copy>
             xml.attributes
             (list {xml.#Text ..local_copy_value})})

(def: local_copy_parser
  (Parser Any)
  (<| (<xml>.node ..<local_copy>)
      (<text>.then (<text>.this ..local_copy_value))
      <xml>.text))

(def: .public (format snapshot)
  (-> Snapshot XML)
  (<| {xml.#Node ..<snapshot> xml.attributes}
      (case snapshot
        {#Local}
        (list ..local_copy_format)
        
        {#Remote stamp}
        (/stamp.format stamp))))

(def: .public parser
  (Parser Snapshot)
  (<| (<xml>.node <snapshot>)
      (<>.or ..local_copy_parser
             /stamp.parser)))
