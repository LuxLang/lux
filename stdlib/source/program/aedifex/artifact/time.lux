(.module:
  [library
   [lux #*
    ["." time]
    [abstract
     [equivalence (#+ Equivalence)]
     [monad (#+ do)]]
    [control
     ["." try (#+ Try)]
     ["<>" parser
      ["<.>" text (#+ Parser)]]]
    [data
     ["." product]
     [text
      ["%" format (#+ Format)]]]
    [time
     ["." instant (#+ Instant)]]]]
  ["." / #_
   ["#." date]
   ["#." time]])

(type: #export Time
  [/date.Date /time.Time])

(def: #export epoch
  Time
  [/date.epoch time.midnight])

(def: #export (instant time)
  (-> Time Instant)
  (let [[date time] time]
    (instant.from_date_time (/date.value date)
                            time)))

(def: #export (from_instant instant)
  (-> Instant (Try Time))
  (do try.monad
    [date (/date.date (instant.date instant))]
    (wrap [date
           (instant.time instant)])))

(def: #export equivalence
  (Equivalence Time)
  (product.equivalence /date.equivalence
                       time.equivalence))

(def: #export (format [date time])
  (Format Time)
  (%.format (/date.format date)
            (/time.format time)))

(def: #export parser
  (Parser Time)
  (do <>.monad
    [date /date.parser
     time /time.parser]
    (wrap [date time])))
