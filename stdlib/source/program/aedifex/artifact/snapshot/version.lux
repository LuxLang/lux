(.module:
  [library
   [lux {"-" Type}
    [abstract
     [equivalence {"+" Equivalence}]
     [monad {"+" do}]]
    [control
     ["<>" parser
      ["<[0]>" xml {"+" Parser}]
      ["<[0]>" text]]]
    [data
     ["[0]" product]
     ["[0]" text]
     [format
      ["[0]" xml {"+" XML}]]]]]
  ["[0]" /// "_"
   ["[1][0]" type {"+" Type}]
   ["[1][0]" time {"+" Time}]])

(type: .public Version
  (Record
   [#extension Type
    #value Text
    #updated Time]))

(def: .public equivalence
  (Equivalence Version)
  ($_ product.equivalence
      text.equivalence
      text.equivalence
      ///time.equivalence
      ))

(template [<definition> <tag>]
  [(def: <definition> xml.Tag ["" <tag>])]

  [<extension> "extension"]
  [<value> "value"]
  [<updated> "updated"]

  [<snapshot_version> "snapshotVersion"]
  )

(def: (text_format tag value)
  (-> xml.Tag Text XML)
  (|> value {xml.#Text} list {xml.#Node tag xml.attributes}))

(def: .public (format (^open "_[0]"))
  (-> Version XML)
  (<| {xml.#Node ..<snapshot_version> xml.attributes}
      (list (..text_format ..<extension> _#extension)
            (..text_format ..<value> _#value)
            (..text_format ..<updated> (///time.format _#updated)))))

(def: (text tag)
  (-> xml.Tag (Parser Text))
  (<| (<xml>.node tag)
      <xml>.text))

(def: .public parser
  (Parser Version)
  (<| (<xml>.node ..<snapshot_version>)
      ($_ <>.and
          (<xml>.somewhere (..text ..<extension>))
          (<xml>.somewhere (..text ..<value>))
          (<xml>.somewhere (<text>.then ///time.parser
                                        (..text ..<updated>)))
          )))
