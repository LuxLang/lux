(.module:
  [library
   [lux #*
    [abstract
     [equivalence (#+ Equivalence)]
     [monad (#+ do)]]
    [control
     ["." exception (#+ exception:)]
     ["<>" parser
      ["<.>" text]
      ["<.>" xml (#+ Parser)]]]
    [data
     [text
      ["%" format]]
     [format
      ["." xml (#+ XML)]]]
    [time
     ["." instant (#+ Instant)]]]]
  ["." /// #_
   ["#." time
    ["#/." date]
    ["#/." time]]])

(type: .public Time
  ///time.Time)

(def: .public equivalence
  (Equivalence Time)
  ///time.equivalence)

(def: separator
  ".")

(def: .public (format [date time])
  (%.Format Time)
  (%.format (///time/date.format date)
            ..separator
            (///time/time.format time)))

(def: .public parser
  (<text>.Parser Time)
  (do <>.monad
    [date ///time/date.parser
     _ (<text>.this ..separator)
     time ///time/time.parser]
    (in [date time])))
