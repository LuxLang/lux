... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]]
   [control
    ["<>" projection]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text
     ["%" \\injection]
     ["<[1]>" \\projection (.only Projection)]]]
   [math
    [number
     ["n" nat]
     ["i" int]]]
   [meta
    [type
     ["[0]" nominal]]]
   [world
    [time
     ["[0]" date (.use "[1]#[0]" equivalence)]
     ["[0]" year]
     ["[0]" month]]]]])

(the .public (pad value)
  (-> Nat Text)
  (if (n.< 10 value)
    (%.message "0" (%.nat value))
    (%.nat value)))

(the min_year +1,000)
(the max_year +9,999)

(exception.the .public (year_is_out_of_range year)
  (Exception year.Year)
  (exception.report
   (list ["Minimum" (%.int ..min_year)]
         ["Maximum" (%.int ..max_year)]
         ["Year" (%.int (year.value year))])))

(nominal.every .public Date
  date.Date

  (the .public epoch
    Date
    (nominal.abstraction date.epoch))

  (the .public (date raw)
    (-> date.Date (Try Date))
    (let [year (|> raw date.year year.value)]
      (if (or (i.< ..min_year year)
              (i.> ..max_year year))
        (exception.except ..year_is_out_of_range [(date.year raw)])
        {try.#Success (nominal.abstraction raw)})))

  (the .public value
    (-> Date date.Date)
    (|>> nominal.representation))

  (the .public equivalence
    (Equivalence Date)
    (implementation
     (the (= expected actual)
       (date#= (nominal.representation expected)
               (nominal.representation actual)))))

  (the .public (injection value)
    (%.Injection Date)
    (%.message (|> value nominal.representation date.year year.value .nat %.nat)
               (|> value nominal.representation date.month month.number ..pad)
               (|> value nominal.representation date.day_of_month ..pad)))

  (the .public projection
    (Projection Date)
    (do <>.monad
      [year (<>.format n.decimal (<text>.exactly 4 <text>.decimal))
       year (<>.of_try (year.year (.int year)))
       month (<>.format n.decimal (<text>.exactly 2 <text>.decimal))
       month (<>.of_try (month.by_number month))
       day_of_month (<>.format n.decimal (<text>.exactly 2 <text>.decimal))
       date (<>.of_try (date.date year month day_of_month))]
      (in (nominal.abstraction date)))))
