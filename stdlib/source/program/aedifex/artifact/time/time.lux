(.require
 [library
  [lux (.except)
   ["[0]" time]
   [abstract
    [monad (.only do)]]
   [control
    ["<>" parser (.only)]]
   [data
    ["[0]" text
     ["%" \\format]
     ["<[1]>" \\parser (.only Parser)]]]
   [math
    [number
     ["n" nat]]]]]
 ["[0]" //
  ["[1]" date]])

(type: .public Time
  time.Time)

(def .public (format value)
  (%.Format Time)
  (let [(open "_[0]") (time.clock value)]
    (%.format (//.pad _#hour)
              (//.pad _#minute)
              (//.pad _#second))))

(def .public parser
  (<text>.Parser Time)
  (do <>.monad
    [hour (<>.codec n.decimal (<text>.exactly 2 <text>.decimal))
     minute (<>.codec n.decimal (<text>.exactly 2 <text>.decimal))
     second (<>.codec n.decimal (<text>.exactly 2 <text>.decimal))]
    (<>.lifted (time.time
                [time.#hour hour
                 time.#minute minute
                 time.#second second
                 time.#milli_second 0]))))
