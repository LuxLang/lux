(.module:
  [lux #*
   ["." time]
   [abstract
    [monad (#+ do)]]
   [control
    ["<>" parser
     ["<.>" text (#+ Parser)]]]
   [data
    [text
     ["%" format]]]
   [math
    [number
     ["n" nat]]]]
  ["." // #_
   ["#" date]])

(type: #export Time
  time.Time)

(def: #export (format value)
  (%.Format Time)
  (let [(^slots [#time.hour #time.minute #time.second]) (time.clock value)]
    (%.format (//.pad hour)
              (//.pad minute)
              (//.pad second))))

(def: #export parser
  (<text>.Parser Time)
  (do <>.monad
    [hour (<>.codec n.decimal (<text>.exactly 2 <text>.decimal))
     minute (<>.codec n.decimal (<text>.exactly 2 <text>.decimal))
     second (<>.codec n.decimal (<text>.exactly 2 <text>.decimal))]
    (<>.lift (time.time
              {#time.hour hour
               #time.minute minute
               #time.second second
               #time.milli_second 0}))))
