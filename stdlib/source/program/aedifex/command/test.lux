(.module:
  [lux (#- Name)
   [abstract
    [monad (#+ do)]]
   [control
    [concurrency
     ["." promise (#+ Promise) ("#\." monad)]]
    [security
     ["!" capability]]
    [parser
     [environment (#+ Environment)]]]
   [data
    [text
     ["%" format (#+ format)]]
    [number
     ["i" int]]]
   [world
    ["." file]
    ["." shell (#+ Shell)]
    ["." console (#+ Console)]]]
  ["." // #_
   ["#." build]
   ["/#" // #_
    ["#." action]
    ["#." command (#+ Command)]
    ["#." runtime]
    [dependency
     [resolution (#+ Resolution)]]]])

(def: #export start "[TEST STARTED]")
(def: #export success "[TEST ENDED]")
(def: #export failure "[TEST FAILED]")

(def: #export (do! console environment fs shell resolution profile)
  (-> (Console Promise) Environment (file.System Promise) (Shell Promise) Resolution (Command Any))
  (do ///action.monad
    [[compiler program] (//build.do! console environment fs shell resolution profile)
     working-directory (promise\wrap (//build.working-directory environment))
     _ (console.write-line ..start console)
     process (!.use (\ shell execute)
                    [environment
                     working-directory
                     (case compiler
                       (#//build.JVM artifact) (///runtime.java program)
                       (#//build.JS artifact) (///runtime.node program))
                     (list)])
     exit (!.use (\ process await) [])
     _ (console.write-line (if (i.= shell.normal exit)
                             ..success
                             ..failure)
                           console)]
    (wrap [])))
