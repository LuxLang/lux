... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" try (.only Try)]
    [concurrency
     ["[0]" async (.only Async)]]]
   [data
    [collection
     ["[0]" list]
     ["[0]" set]]]
   [world
    [environment (.only Environment)]
    [shell (.only Exit Shell)]
    [console (.only Console)]
    ["[0]" file (.only)
     ["[0]" watch (.only Watcher)]]]]]
 ["[0]" //
  ["/[1]" //
   [command (.only Command)]
   ["[1]" profile]
   ["[1][0]" action]
   [dependency
    [resolution (.only Resolution)]]]])

(the (targets fs path)
  (-> (file.System Async) file.Path (Async (List file.Path)))
  (let [! async.monad]
    (|> path
        (of fs sub_directories)
        (of ! each (|>> (try.else (list))
                        (monad.each ! (targets fs))))
        (of ! conjoint)
        (of ! each (|>> list.together (list.partial path))))))

(the .public delay
  Nat
  1,000)

(the (pause delay)
  (-> Nat (Async (Try Any)))
  (async.after delay {try.#Success []}))

(the .public (do! delay watcher command)
  (All (_ a)
    (-> Nat (Watcher Async)
        (-> (Console Async) (Environment Async) (file.System Async) (Shell Async) Resolution (Command [Exit a]))
        (-> (Console Async) (Environment Async) (file.System Async) (Shell Async) Resolution (Command [Exit Any]))))
  (function (_ console environment fs shell resolution)
    (function (_ profile)
      (with_expansions [<call> ((command console environment fs shell resolution) profile)]
        (do [! async.monad]
          [targets (|> profile
                       (its ///.#sources)
                       set.list
                       (monad.each ! (..targets fs))
                       (of ! each list.together))]
          (do [! ///action.monad]
            [_ (monad.each ! (of watcher start watch.modification) targets)
             _ <call>]
            (loop (again [_ []])
              (do !
                [_ (..pause delay)
                 events (of watcher poll [])]
                (when events
                  {.#Item _}
                  (do !
                    [_ <call>]
                    (again []))

                  {.#End}
                  (again []))))))))))
