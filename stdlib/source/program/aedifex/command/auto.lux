(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    [concurrency
     ["." promise (#+ Promise)]]
    [security
     ["!" capability]]]
   [data
    [collection
     ["." list]
     ["." set]]]
   [world
    [environment (#+ Environment)]
    [shell (#+ Shell)]
    ["." file (#+ Path)
     ["." watch (#+ Watcher)]]]]
  ["." // #_
   ["/#" // #_
    [command (#+ Command)]
    ["#" profile]
    ["#." action (#+ Action)]
    [dependency
     [resolution (#+ Resolution)]]]])

(def: (targets fs path)
  (-> (file.System Promise) Path (Promise (List Path)))
  (do {! promise.monad}
    [?root (!.use (:: fs directory) [path])]
    (case ?root
      (#try.Success root)
      (loop [root root]
        (do !
          [subs (:: ! map (|>> (try.default (list)))
                    (!.use (:: root directories) []))]
          (:: ! map (|>> list.concat (list& (!.use (:: root scope) [])))
              (monad.map ! recur subs))))

      (#try.Failure error)
      (wrap (list)))))

(def: (pause _)
  (-> Any (Promise (Try Any)))
  (promise.delay 1,000 (#try.Success [])))

(def: #export (do! watcher command)
  (All [a]
    (-> (Watcher Promise)
        (-> Environment (file.System Promise) (Shell Promise) Resolution (Command a))
        (-> Environment (file.System Promise) (Shell Promise) Resolution (Command Any))))
  (function (_ environment fs shell resolution)
    (function (_ profile)
      (with-expansions [<call> ((command environment fs shell resolution) profile)]
        (do {! promise.monad}
          [targets (|> profile
                       (get@ #///.sources)
                       set.to-list
                       (monad.map ! (..targets fs))
                       (:: ! map list.concat))]
          (do {! ///action.monad}
            [_ (monad.map ! (:: watcher start watch.all) targets)
             _ <call>]
            (loop [_ []]
              (do !
                [_ (..pause [])
                 events (:: watcher poll [])
                 _ (case events
                     (#.Cons _)
                     (do !
                       [_ <call>]
                       (wrap []))

                     #.Nil
                     (wrap []))]
                (recur [])))))))))
