(.module:
  [library
   [lux #*
    [abstract
     [monad (#+ do)]]
    [control
     ["." exception]
     [concurrency
      ["." promise (#+ Promise)]]]
    [data
     [collection
      ["." set (#+ Set)]
      ["." list ("#\." fold)]
      ["." dictionary]]
     [text
      ["%" format]]]
    [world
     [net (#+ URL)]
     [program (#+ Program)]
     ["." file]
     ["." console (#+ Console)]]]]
  ["." // #_
   ["#." clean]
   ["/#" // #_
    [command (#+ Command)]
    [repository (#+ Repository)]
    ["#" profile]
    ["#." action (#+ Action)]
    ["#." artifact (#+ Artifact)]
    ["#." dependency (#+ Dependency)
     ["#/." resolution (#+ Resolution)]
     ["#/." deployment]]]])

(def: format
  (%.Format Dependency)
  (|>> (get@ #///dependency.artifact)
       ///artifact.format
       %.text))

(def: #export (do! console local remotes new_repository profile)
  (-> (Console Promise) (Repository Promise) (List (Repository Promise)) (-> URL (Repository Promise)) (Command Resolution))
  (do promise.monad
    [#let [dependencies (|> (get@ #///.dependencies profile)
                            set.to_list
                            (#.Cons (get@ #///.compiler profile)))]
     [local_successes local_failures cache] (///dependency/resolution.all console
                                                                          (list local)
                                                                          new_repository
                                                                          dependencies
                                                                          ///dependency/resolution.empty)
     [remote_successes remote_failures resolution] (///dependency/resolution.all console
                                                                                 remotes
                                                                                 new_repository
                                                                                 dependencies
                                                                                 cache)]
    (do ///action.monad
      [cached (|> (dictionary.keys cache)
                  (list\fold dictionary.remove resolution)
                  (///dependency/deployment.all local))
       _ (console.write_line (exception.report
                              ["Local successes" (|> local_successes
                                                     (list.sort (\ ///dependency.order <))
                                                     (exception.enumerate ..format))]
                              ["Local failures" (|> local_failures
                                                    (list.sort (\ ///dependency.order <))
                                                    (exception.enumerate ..format))]
                              ["Remote successes" (|> remote_successes
                                                      (set.of_list ///dependency.hash)
                                                      (set.difference (set.of_list ///dependency.hash local_successes))
                                                      set.to_list
                                                      (list.sort (\ ///dependency.order <))
                                                      (exception.enumerate ..format))]
                              ["Remote failures" (|> remote_failures
                                                     (list.sort (\ ///dependency.order <))
                                                     (exception.enumerate ..format))])
                             console)]
      (wrap resolution))))
