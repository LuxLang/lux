... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Name text)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]
    ["<>" projection]]
   [concurrency
    ["[0]" future (.only Future)]]
   [control
    ["[0]" pipe]]
   [error
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]
     ["<[1]>" \\projection]
     [encoding
      ["[0]" utf8]]]
    [format
     ["[0]" xml (.only XML)
      ["<[1]>" \\projection (.only Projection)]]]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["n" natural]]]
   [macro
    ["[0]" template]]
   ["[0]" time (.only Time)
    ["[0]" instant (.only Instant)]
    ["[0]" date (.only Date)]
    ["[0]" year]
    ["[0]" month]]
   [world
    [net
     ["[0]" uri (.only URI)]]]]]
 ["[0]" // (.only)
  ["/[1]" //
   [repository (.only Repository)]
   ["[1][0]" artifact (.only Group Name Version Artifact)]]])

(every .public Metadata
  (Record
   [#group Group
    #name Name
    #versions (Stack Version)
    #last_updated Instant]))

(the (pad value)
  (-> Natural Text)
  (if (n.< 10 value)
    (.text "0" (%.natural value))
    (%.natural value)))

(the (date_text value)
  (text.Injection Date)
  (.text (|> value date.year year.value .natural %.natural)
         (|> value date.month month.number ..pad)
         (|> value date.day_of_month ..pad)))

(the (time_text value)
  (text.Injection Time)
  (let [(open "[0]") (time.clock value)]
    (.text (..pad #hour)
           (..pad #minute)
           (..pad #second))))

(the (instant_text value)
  (text.Injection Instant)
  (.text (..date_text (instant.date value))
         (..time_text (instant.time value))))

(template.with [<definition> <tag>]
  [(the <definition> xml.Tag ["" <tag>])]

  [<group> "groupId"]
  [<name> "artifactId"]
  [<version> "version"]
  [<versioning> "versioning"]
  [<versions> "versions"]
  [<last_updated> "lastUpdated"]
  [<metadata> "metadata"]
  )

(template.with [<name> <type> <tag> <pre>]
  [(the <name>
     (-> <type> XML)
     (|>> <pre> {xml.#Text} stack {xml.#Node <tag> xml.attributes}))]

  [group_xml Group ..<group> (|>)]
  [name_xml Name ..<name> (|>)]
  [version_xml Version ..<version> (|>)]
  [last_updated_xml Instant ..<last_updated> ..instant_text]
  )

(the versions_xml
  (-> (Stack Version) XML)
  (|>> (stack#each ..version_xml) {xml.#Node ..<versions> xml.attributes}))

(the .public (as_xml value)
  (-> Metadata
      XML)
  {xml.#Node ..<metadata>
             xml.attributes
             (stack (..group_xml (its #group value))
                    (..name_xml (its #name value))
                    {xml.#Node ..<versioning>
                               xml.attributes
                               (stack (..versions_xml (its #versions value))
                                      (..last_updated_xml (its #last_updated value)))})})

(the (text tag)
  (-> xml.Tag
      (Projection Text))
  (<| (<xml>.node tag)
      <xml>.text))

(the date_of
  (<text>.Projection Date)
  (do <>.monad
    [year (<>.of n.base_10 (<text>.exactly 4 <text>.decimal))
     year (<>.of_try (year.year (.integer year)))
     month (<>.of n.base_10 (<text>.exactly 2 <text>.decimal))
     month (<>.of_try (month.by_number month))
     day_of_month (<>.of n.base_10 (<text>.exactly 2 <text>.decimal))]
    (<>.of_try (date.date year month day_of_month))))

(the time_of
  (<text>.Projection Time)
  (do <>.monad
    [hour (<>.of n.base_10 (<text>.exactly 2 <text>.decimal))
     minute (<>.of n.base_10 (<text>.exactly 2 <text>.decimal))
     second (<>.of n.base_10 (<text>.exactly 2 <text>.decimal))]
    (<>.of_try (time.time
                [time.#hour hour
                 time.#minute minute
                 time.#second second
                 time.#milli_second 0]))))

(the last_updated_of
  (Projection Instant)
  (<text>.then (do <>.monad
                 [date ..date_of
                  time ..time_of]
                 (in (instant.of_date_time date time)))
               (..text ..<last_updated>)))

(the .public of_xml
  (Projection Metadata)
  (<| (<xml>.node ..<metadata>)
      (all <>.and
           (<xml>.somewhere (..text ..<group>))
           (<xml>.somewhere (..text ..<name>))
           (<| (<xml>.node ..<versioning>)
               ... Handle any ignorable tag.
               (<>.before (<>.some <xml>.any))
               (all <>.and
                    (<| <xml>.somewhere
                        (<xml>.node ..<versions>)
                        (<>.many (..text ..<version>)))
                    (<xml>.somewhere ..last_updated_of)
                    )))))

(the .public equivalence
  (Equivalence Metadata)
  (all product.equivalence
       text.equivalence
       text.equivalence
       (stack.equivalence text.equivalence)
       instant.equivalence
       ))

(alias [=]
       ..equivalence)

(the .public uri
  (-> Artifact URI)
  //.remote_project_uri)

(the epoch
  Instant
  (instant.of_millis +0))

(the .public (read repository artifact)
  (-> (Repository Future) Artifact (Future (Try Metadata)))
  (do future.monad
    [project (by repository download (..uri artifact))]
    (when project
      {try.#Success binary_metadata}
      (in (|> binary_metadata
              (pipe.do try.monad
                [(by utf8.binary of)]
                [(by xml.text of)]
                [stack (<xml>.value ..of_xml)])))
      
      {try.#Failure error}
      (in {try.#Success
           (let [(open "[0]") artifact]
             [..#group #group
              ..#name #name
              ..#versions (stack)
              ..#last_updated ..epoch])}))))

(the .public (write repository artifact metadata)
  (-> (Repository Future) Artifact Metadata (Future (Try Any)))
  (|> metadata
      ..as_xml
      (by xml.text as)
      (by utf8.binary as)
      (by repository upload (..uri artifact))))
