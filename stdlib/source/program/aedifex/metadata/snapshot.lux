... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Name Type text)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]
    ["<>" projection]]
   [concurrency
    ["[0]" future (.only Future)]]
   [control
    ["[0]" pipe]]
   [error
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]
     ["<[1]>" \\projection]
     [encoding
      ["[0]" utf8]]]
    [format
     ["[0]" xml (.only XML)
      ["<[1]>" \\projection (.only Projection)]]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" time (.only Time)
    ["[0]" instant (.only Instant)]
    ["[0]" date (.only Date)]
    ["[0]" year]
    ["[0]" month]]
   [world
    [net
     ["[0]" uri (.only URI)]]]]]
 ["[0]" // (.only)
  ["/[1]" //
   [repository (.only Repository)]
   ["[1][0]" artifact (.only Group Name Version Artifact)
    ["[1]/[0]" time]
    ["[1]/[0]" type (.only Type)]
    ["[1]/[0]" versioning (.only Versioning)]
    ["[1]/[0]" snapshot (.only)
     ["[1]/[0]" version]
     ["[1]/[0]" stamp]]]]])

(every .public Metadata
  (Record
   [#artifact Artifact
    #versioning Versioning]))

(template.with [<definition> <tag>]
  [(the <definition>
     xml.Tag
     ["" <tag>])]

  [[<group> "groupId"]
   [<name> "artifactId"]
   [<version> "version"]
   [<metadata> "metadata"]])

(template.with [<name> <type> <tag> <pre>]
  [(the <name>
     (-> <type>
         XML)
     (|>> <pre>
          {xml.#Text}
          list
          {xml.#Node <tag> xml.attributes}))]

  [[group_xml Group ..<group> (|>)]
   [name_xml Name ..<name> (|>)]
   [version_xml Version ..<version> (|>)]])

(the .public (as_xml (open "/[0]"))
  (-> Metadata
      XML)
  (let [(open "//[0]") /#artifact]
    {xml.#Node ..<metadata>
               xml.attributes
               (list (..group_xml //#group)
                     (..name_xml //#name)
                     (..version_xml //#version)
                     (///artifact/versioning.as_xml /#versioning))}))

(the (text tag)
  (-> xml.Tag
      (Projection Text))
  (<| (<xml>.node tag)
      <xml>.text))

(the .public of_xml
  (Projection Metadata)
  (<| (<xml>.node ..<metadata>)
      (do [! <>.monad]
        [group (<xml>.somewhere (..text ..<group>))
         name (<xml>.somewhere (..text ..<name>))
         version (<xml>.somewhere (..text ..<version>))
         versioning (expansion.let [<default_version> [///artifact/snapshot/version.#extension ///artifact/type.jvm_library
                                                       ///artifact/snapshot/version.#value version
                                                       ///artifact/snapshot/version.#updated ///artifact/time.epoch]]
                      (|> (<xml>.somewhere ///artifact/versioning.of_xml)
                          (by ! each
                              (revised ///artifact/versioning.#versions
                                       (is (-> (List ///artifact/snapshot/version.Version)
                                               (List ///artifact/snapshot/version.Version))
                                           (|>> (pipe.when
                                                  (list)
                                                  (list <default_version>)

                                                  versions
                                                  versions)))))
                          (<>.else [///artifact/versioning.#snapshot {///artifact/snapshot.#Local}
                                    ///artifact/versioning.#last_updated ///artifact/time.epoch
                                    ///artifact/versioning.#versions (list <default_version>)])))]
        (pure [#artifact [///artifact.#group group
                          ///artifact.#name name
                          ///artifact.#version version]
               #versioning versioning]))))

(the .public equivalence
  (Equivalence Metadata)
  (all product.equivalence
       ///artifact.equivalence
       ///artifact/versioning.equivalence
       ))

(alias [=]
       ..equivalence)

(the .public uri
  (-> Artifact
      URI)
  //.remote_artifact_uri)

(the .public (read repository artifact)
  (-> (Repository Future) Artifact
      (Future (Try Metadata)))
  (do future.monad
    [project (by repository download (..uri artifact))]
    (when project
      {try.#Success project}
      (pure (|> 
             (do try.monad
               [it (by utf8.binary of project)
                it (by xml.text of it)]
               (<xml>.value (list it) ..of_xml))))
      
      {try.#Failure error}
      (pure {try.#Success
             [#artifact artifact
              #versioning ///artifact/versioning.init]}))))

(the .public (write repository artifact metadata)
  (-> (Repository Future) Artifact Metadata
      (Future (Try Any)))
  (|> metadata
      ..as_xml
      (by xml.text as)
      (by utf8.binary as)
      (by repository upload (..uri artifact))))
