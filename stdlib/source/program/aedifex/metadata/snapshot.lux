(.require
 [library
  [lux (.except Type)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]]
   [control
    ["<>" parser]
    ["[0]" pipe]
    ["[0]" try (.only Try)]
    [concurrency
     ["[0]" async (.only Async)]]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\format]
     ["<[1]>" \\parser]
     [encoding
      ["[0]" utf8]]]
    [format
     ["[0]" xml (.only XML)
      ["<[1]>" \\parser (.only Parser)]]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["n" nat]]]
   [world
    [net
     ["[0]" uri (.only URI)]]
    ["[0]" time (.only Time)
     ["[0]" instant (.only Instant)]
     ["[0]" date (.only Date)]
     ["[0]" year]
     ["[0]" month]]]]]
 ["[0]" // (.only)
  ["/[1]" //
   [repository (.only Repository)]
   ["[1][0]" artifact (.only Group Name Version Artifact)
    ["[1]/[0]" time]
    ["[1]/[0]" type (.only Type)]
    ["[1]/[0]" versioning (.only Versioning)]
    ["[1]/[0]" snapshot (.only)
     ["[1]/[0]" version]
     ["[1]/[0]" stamp]]]]])

(type .public Metadata
  (Record
   [#artifact Artifact
    #versioning Versioning]))

(with_template [<definition> <tag>]
  [(def <definition> xml.Tag ["" <tag>])]

  [<group> "groupId"]
  [<name> "artifactId"]
  [<version> "version"]
  [<metadata> "metadata"]
  )

(with_template [<name> <type> <tag> <pre>]
  [(def <name>
     (-> <type> XML)
     (|>> <pre> {xml.#Text} list {xml.#Node <tag> xml.attributes}))]

  [group_format Group ..<group> (|>)]
  [name_format Name ..<name> (|>)]
  [version_format Version ..<version> (|>)]
  )

(def .public (format (open "/[0]"))
  (-> Metadata XML)
  (let [(open "//[0]") /#artifact]
    {xml.#Node ..<metadata>
               xml.attributes
               (list (..group_format //#group)
                     (..name_format //#name)
                     (..version_format //#version)
                     (///artifact/versioning.format /#versioning))}))

(def (text tag)
  (-> xml.Tag (Parser Text))
  (<| (<xml>.node tag)
      <xml>.text))

(def .public parser
  (Parser Metadata)
  (<| (<xml>.node ..<metadata>)
      (do [! <>.monad]
        [group (<xml>.somewhere (..text ..<group>))
         name (<xml>.somewhere (..text ..<name>))
         version (<xml>.somewhere (..text ..<version>))
         versioning (with_expansions [<default_version> [///artifact/snapshot/version.#extension ///artifact/type.jvm_library
                                                         ///artifact/snapshot/version.#value version
                                                         ///artifact/snapshot/version.#updated ///artifact/time.epoch]]
                      (|> (<xml>.somewhere ///artifact/versioning.parser)
                          (at ! each
                              (revised ///artifact/versioning.#versions
                                       (is (-> (List ///artifact/snapshot/version.Version)
                                               (List ///artifact/snapshot/version.Version))
                                           (|>> (pipe.case
                                                  (list)
                                                  (list <default_version>)

                                                  versions
                                                  versions)))))
                          (<>.else [///artifact/versioning.#snapshot {///artifact/snapshot.#Local}
                                    ///artifact/versioning.#last_updated ///artifact/time.epoch
                                    ///artifact/versioning.#versions (list <default_version>)])))]
        (in [#artifact [///artifact.#group group
                        ///artifact.#name name
                        ///artifact.#version version]
             #versioning versioning]))))

(def .public equivalence
  (Equivalence Metadata)
  (all product.equivalence
       ///artifact.equivalence
       ///artifact/versioning.equivalence
       ))

(def .public uri
  (-> Artifact URI)
  //.remote_artifact_uri)

(def .public (read repository artifact)
  (-> (Repository Async) Artifact (Async (Try Metadata)))
  (do async.monad
    [project (at repository download (..uri artifact))]
    (case project
      {try.#Success project}
      (in (|> project
              (pipe.do try.monad
                [(at utf8.codec decoded)]
                [(at xml.codec decoded)]
                [list (<xml>.result ..parser)])))
      
      {try.#Failure error}
      (in {try.#Success
           [#artifact artifact
            #versioning ///artifact/versioning.init]}))))

(def .public (write repository artifact metadata)
  (-> (Repository Async) Artifact Metadata (Async (Try Any)))
  (|> metadata
      ..format
      (at xml.codec encoded)
      (at utf8.codec encoded)
      (at repository upload (..uri artifact))))
