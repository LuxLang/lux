... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only Monad do)]]
   [algorithm
    ["[0]" mix]]
   [control
    ["[0]" pipe]
    ["[0]" try (.only Try)]]
   [data
    [binary (.only Binary)]
    ["[0]" text (.only)
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list]]]
   [meta
    ["[0]" location]
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    [compiler
     [language
      [lux
       ["[0]" syntax]]]]]
   [world
    ["[0]" file]]]]
 ["[0]" //
  ["[1][0]" profile (.only Name Profile)]
  ["[1][0]" project (.only Project)]
  ["[1][0]" parser]])

(the (lux_parser source_code)
  (-> Text (Try Code))
  (let [parse (syntax.parse ""
                            syntax.no_aliases
                            (text.size source_code))]
    (when (parse [location.dummy 0 source_code])
      {.#Left [_ error]}
      {try.#Failure error}
      
      {.#Right [_ lux_code]}
      {try.#Success lux_code})))

(the project_parser
  (-> Binary (Try Project))
  (|>> (pipe.do try.monad
         [(of utf8.codec decoded)]
         [..lux_parser]
         [(list) (<code>.value //parser.project)])))

(the .public (read monad fs profiles)
  (All (_ !) (-> (Monad !) (file.System !) (List Name) (! (Try Profile))))
  (|> //project.file
      (of fs read)
      (of monad each
          (function (_ it)
            (do [! try.monad]
              [it it
               it (..project_parser it)
               it (monad.each ! (//project.profile it) (list.partial //profile.default profiles))]
              (in (mix.with_monoid //profile.monoid list.mix it)))))))
