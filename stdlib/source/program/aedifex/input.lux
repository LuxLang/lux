(.module:
  [library
   [lux {"-" [Name]}
    [abstract
     ["." monad {"+" [Monad do]}]
     ["." mix]]
    [control
     [pipe {"+" [do>]}]
     ["." try {"+" [Try]}]
     [parser
      ["<.>" code]]]
    [data
     [binary {"+" [Binary]}]
     ["." text
      [encoding
       ["." utf8]]]
     [collection
      ["." list]]]
    [meta
     ["." location]]
    [tool
     [compiler
      [language
       [lux
        ["." syntax]]]]]
    [world
     ["." file]]]]
  ["." // "_"
   ["#." profile {"+" [Name Profile]}]
   ["#." project {"+" [Project]}]
   ["#." parser]])

(def: (lux_parser source_code)
  (-> Text (Try Code))
  (let [parse (syntax.parse ""
                            syntax.no_aliases
                            (text.size source_code))]
    (case (parse [location.dummy 0 source_code])
      (#.Left [_ error])
      (#try.Failure error)
      
      (#.Right [_ lux_code])
      (#try.Success lux_code))))

(def: project_parser
  (-> Binary (Try Project))
  (|>> (do> try.monad
            [(\ utf8.codec decoded)]
            [..lux_parser]
            [(list) (<code>.result //parser.project)])))

(def: .public (read monad fs profiles)
  (All (_ !) (-> (Monad !) (file.System !) (List Name) (! (Try Profile))))
  (|> //project.file
      (\ fs read)
      (\ monad each
         (function (_ it)
           (do {! try.monad}
             [it it
              it (..project_parser it)
              it (monad.each ! (//project.profile it) profiles)]
             (in (mix.with_monoid //profile.monoid list.mix it)))))))
