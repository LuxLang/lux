(.module:
  [lux #*
   [data
    ["." text ("#\." equivalence)]
    [collection
     ["." dictionary (#+ Dictionary)]
     ["." list ("#\." functor)]
     ["." set (#+ Set)]]]
   [macro
    ["." code]]]
  ["." // #_
   ["/" profile]
   ["#." project (#+ Project)]
   ["#." dependency (#+ Dependency)]
   ["#." artifact (#+ Artifact)
    ["#/." type]]])

(type: #export (Format a)
  (-> a Code))

(def: (license [name url type])
  (Format /.License)
  (`' {#name (~ (code.text name))
       #url (~ (code.text url))
       #type (~ (case type
                  #/.Repo
                  (' #repo)

                  #/.Manual
                  (' #manual)))}))

(def: (organization [name url])
  (Format /.Organization)
  (`' {#name (~ (code.text name))
       #url (~ (code.text url))}))

(def: (developer [name url organization])
  (Format /.Developer)
  (case organization
    #.None
    (`' {#name (~ (code.text name))
         #url (~ (code.text url))})

    (#.Some value)
    (`' {#name (~ (code.text name))
         #url (~ (code.text url))
         #organization (~ (..organization value))})))

(def: contributor
  (Format /.Contributor)
  ..developer)

(type: Aggregate
  (Dictionary Text Code))

(def: aggregate
  (Format Aggregate)
  (|>> dictionary.entries
       (list\map (function (_ [key value])
                   [(code.local_tag key) value]))
       code.record))

(def: empty
  Aggregate
  (dictionary.new text.hash))

(def: (on_maybe field value format aggregate)
  (All [a]
    (-> Text (Maybe a) (Format a) Aggregate Aggregate))
  (case value
    #.None
    aggregate

    (#.Some value)
    (dictionary.put field (format value) aggregate)))

(def: (on_list field value format aggregate)
  (All [a]
    (-> Text (List a) (Format a) Aggregate Aggregate))
  (case value
    #.Nil
    aggregate

    value
    (dictionary.put field (` [(~+ (list\map format value))]) aggregate)))

(def: (on_set field value format aggregate)
  (All [a]
    (-> Text (Set a) (Format a) Aggregate Aggregate))
  (..on_list field (set.to_list value) format aggregate))

(def: (on_dictionary field value key_format value_format aggregate)
  (All [k v]
    (-> Text (Dictionary k v) (Format k) (Format v) Aggregate Aggregate))
  (if (dictionary.empty? value)
    aggregate
    (dictionary.put field
                    (|> value
                        dictionary.entries
                        (list\map (function (_ [key value])
                                    [(key_format key) (value_format value)]))
                        code.record)
                    aggregate)))

(def: (info value)
  (Format /.Info)
  (|> ..empty
      (..on_maybe "url" (get@ #/.url value) code.text)
      (..on_maybe "scm" (get@ #/.scm value) code.text)
      (..on_maybe "description" (get@ #/.description value) code.text)
      (..on_list "licenses" (get@ #/.licenses value) ..license)
      (..on_maybe "organization" (get@ #/.organization value) ..organization)
      (..on_list "developers" (get@ #/.developers value) ..developer)
      (..on_list "contributors" (get@ #/.contributors value) ..contributor)
      ..aggregate))

(def: (artifact' [group name version])
  (-> Artifact (List Code))
  (list (code.text group)
        (code.text name)
        (code.text version)))

(def: (artifact value)
  (Format Artifact)
  (` [(~+ (..artifact' value))]))

(def: (dependency [artifact type])
  (Format Dependency)
  (if (text\= //artifact/type.lux_library type)
    (` [(~+ (..artifact' artifact))])
    (` [(~+ (..artifact' artifact))
        (~ (code.text type))])))

(def: #export (profile value)
  (Format /.Profile)
  (|> ..empty
      (..on_list "parents" (get@ #/.parents value) code.text)
      (..on_maybe "identity" (get@ #/.identity value) ..artifact)
      (..on_maybe "info" (get@ #/.info value) ..info)
      (..on_set "repositories" (get@ #/.repositories value) code.text)
      (..on_set "dependencies" (get@ #/.dependencies value) ..dependency)
      (dictionary.put "compiler" (..dependency (get@ #/.compiler value)))
      (..on_set "sources" (get@ #/.sources value) code.text)
      (dictionary.put "target" (code.text (get@ #/.target value)))
      (..on_maybe "program" (get@ #/.program value) code.text)
      (..on_maybe "test" (get@ #/.test value) code.text)
      (..on_dictionary "deploy_repositories" (get@ #/.deploy_repositories value) code.text code.text)
      ..aggregate))

(def: #export project
  (Format Project)
  (|>> dictionary.entries
       (list\map (function (_ [key value])
                   [(code.text key) (..profile value)]))
       code.record))
