... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [data
    ["[0]" text]
    [collection
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" stack (.use "[1]#[0]" monad)]
     ["[0]" set (.only Set)]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" code]]
   [compiler
    [meta
     [cli
      [compiler (.only Compiler)]]]]]]
 ["[0]" //
  ["/" profile]
  ["[1][0]" runtime (.only Runtime)]
  ["[1][0]" project (.only Project)]
  ["[1][0]" dependency (.only Dependency)]
  ["[1][0]" artifact (.only Artifact)
   ["[1]/[0]" type]]])

(every .public (Injection it)
  (-> it
      Code))

(the (license [name url type])
  (Injection /.License)
  (`' ["name" (, (code.text name))
       "url" (, (code.text url))
       "type" (, (when type
                   {/.#Repo}
                   (' "repo")

                   {/.#Manual}
                   (' "manual")))]))

(the (organization [name url])
  (Injection /.Organization)
  (`' ["name" (, (code.text name))
       "url" (, (code.text url))]))

(the (developer [name url organization])
  (Injection /.Developer)
  (when organization
    {.#None}
    (`' ["name" (, (code.text name))
         "url" (, (code.text url))])

    {.#Some value}
    (`' ["name" (, (code.text name))
         "url" (, (code.text url))
         "organization" (, (..organization value))])))

(the contributor
  (Injection /.Contributor)
  ..developer)

(every Aggregate
  (Dictionary Text Code))

(the aggregate
  (Injection Aggregate)
  (|>> dictionary.entries
       (stack#each (function (_ [key value])
                     (stack (code.text key) value)))
       stack#conjoint
       code.tuple))

(the empty
  Aggregate
  (dictionary.empty text.hash))

(the (on_maybe field value as_code aggregate)
  (for_any (_ a)
    (-> Text (Maybe a) (Injection a) Aggregate Aggregate))
  (when value
    {.#None}
    aggregate

    {.#Some value}
    (dictionary.has field (as_code value) aggregate)))

(the (on_stack field value injection aggregate)
  (for_any (_ a)
    (-> Text (Stack a) (Injection a) Aggregate Aggregate))
  (when value
    {.#Empty}
    aggregate

    value
    (dictionary.has field (` [(,* (stack#each injection value))]) aggregate)))

(the (on_set field value injection aggregate)
  (for_any (_ a)
    (-> Text (Set a) (Injection a) Aggregate Aggregate))
  (..on_stack field (set.stack value) injection aggregate))

(the (on_dictionary field value key_xml value_xml aggregate)
  (for_any (_ k v)
    (-> Text (Dictionary k v) (Injection k) (Injection v) Aggregate
        Aggregate))
  (if (dictionary.empty? value)
    aggregate
    (dictionary.has field
                    (|> value
                        dictionary.entries
                        (stack#each (function (_ [key value])
                                      (stack (key_xml key) (value_xml value))))
                        stack#conjoint
                        code.tuple)
                    aggregate)))

(the (info value)
  (Injection /.Info)
  (|> ..empty
      (..on_maybe "url" (its /.#url value) code.text)
      (..on_maybe "scm" (its /.#scm value) code.text)
      (..on_maybe "description" (its /.#description value) code.text)
      (..on_stack "licenses" (its /.#licenses value) ..license)
      (..on_maybe "organization" (its /.#organization value) ..organization)
      (..on_stack "developers" (its /.#developers value) ..developer)
      (..on_stack "contributors" (its /.#contributors value) ..contributor)
      ..aggregate))

(the (artifact' [group name version])
  (-> Artifact (Stack Code))
  (stack (code.text group)
         (code.text name)
         (code.text version)))

(the (artifact value)
  (Injection Artifact)
  (` [(,* (..artifact' value))]))

(the (dependency [artifact type])
  (Injection Dependency)
  (if (text.= //artifact/type.lux_library type)
    (` [(,* (..artifact' artifact))])
    (` [(,* (..artifact' artifact))
        (, (code.text type))])))

(the (runtime [environment program parameters])
  (Injection Runtime)
  (` [(,* (stack#each (function (_ [var value])
                        (` [(, (code.text var))
                            (, (code.text value))]))
                      (dictionary.entries environment)))
      (, (code.text program))
      (,* (stack#each code.text parameters))]))

(the (compiler [definition parameters])
  (Injection Compiler)
  (` [(, (code.name definition))
      (,* (stack#each code.text parameters))]))

(the configuration
  (Injection /.Configuration)
  (|>> (stack#each (function (_ [setting value])
                     (stack (code.text setting)
                            (code.text value))))
       stack#conjoint
       code.tuple))

(the .public lux_compiler_label
  "lux")

(the .public (profile value)
  (Injection /.Profile)
  (`` (|> ..empty
          (..on_stack "parents" (its /.#parents value) code.text)
          (..on_maybe "identity" (its /.#identity value) ..artifact)
          (..on_maybe "info" (its /.#info value) ..info)
          (..on_set "repositories" (its /.#repositories value) code.text)
          (..on_set "dependencies" (its /.#dependencies value) ..dependency)
          (dictionary.has ..lux_compiler_label (..dependency (its /.#lux value)))
          (..on_stack "compilers" (its /.#compilers value) ..compiler)
          (..on_set "sources" (its /.#sources value) code.text)
          (dictionary.has "target" (code.text (its /.#target value)))
          (..on_maybe "program" (its /.#program value) code.name)
          (..on_maybe "test" (its /.#test value) code.name)
          (..on_dictionary "deploy_repositories" (its /.#deploy_repositories value) code.text code.text)
          (dictionary.has "configuration" (..configuration (its /.#configuration value)))
          (,, (template.with [<tag>]
                [(dictionary.has (template.text [<tag>]) (..runtime (its <tag> value)))]

                [/.#java]
                [/.#js]
                [/.#python]
                [/.#lua]
                [/.#ruby]))
          ..aggregate)))

(the .public project
  (Injection Project)
  (|>> dictionary.entries
       (stack#each (function (_ [key value])
                     (stack (code.text key) (..profile value))))
       stack#conjoint
       code.tuple))
