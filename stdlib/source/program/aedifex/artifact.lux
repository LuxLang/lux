... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Name #version
                local)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    ["[0]" order (.only Order)]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" order) (.only Injection)
     ["%" \\injection]]
    [collection
     ["[0]" stack (.use "[1]#[0]" monoid)]]]
   [macro
    ["[0]" template]]
   [world
    ["[0]" file (.only Path)]
    [net
     [uri (.only URI)
      ["[0]" path]]]]]])

(every .public Group
  Text)

(every .public Name
  Text)

(every .public Version
  Text)

(every .public Artifact
  (Record
   [#group Group
    #name Name
    #version Version]))

(the .public hash
  (Hash Artifact)
  (all product.hash
       text.hash
       text.hash
       text.hash
       ))

(the .public equivalence
  (Equivalence Artifact)
  (by ..hash equivalence))

(alias [=]
       ..equivalence)

(the .public order
  (Order Artifact)
  (implementation
   (the equivalence
     ..equivalence)

   (the (< expected actual)
     (<| (or (text#< (its #group expected)
                     (its #group actual)))

         (and (text.= (its #group expected)
                      (its #group actual)))
         (or (text#< (its #name expected)
                     (its #name actual)))
         
         (and (text.= (its #name expected)
                      (its #name actual)))
         (text#< (its #version expected)
                 (its #version actual))))))

(order.for [] Artifact ..order)

... https://en.wikipedia.org/wiki/Delimiter
(template.with [<delimiter> <definition>]
  [(the <definition>
     Text
     <delimiter>)]

  ["." group_delimiter]
  ["-" version_delimiter]
  [":" identity_delimiter]
  )

(the .public (identity artifact)
  (-> Artifact Text)
  (text (its #name artifact)
        ..version_delimiter
        (its #version artifact)))

(the .public (as_text value)
  (Injection Artifact)
  (text (its #group value)
        ..identity_delimiter
        (..identity value)))

(the .public (directory delimiter group)
  (-> Text Group Text)
  (|> group
      (text.all_split_by ..group_delimiter)
      (text.interposed delimiter)))

(the .public (bundle version artifact)
  (-> Version Artifact URI)
  (let [/ path.delimiter
        group (..directory / (its #group artifact))
        name (its #name artifact)]
    (text group / name / version)))

(the .public (uri version artifact)
  (-> Version Artifact URI)
  (let [/ path.delimiter]
    (text (..bundle version artifact) / (..identity artifact))))

(the .public (local artifact)
  (-> Artifact (Stack Text))
  (stack#composite (|> artifact
                       (its #group)
                       (text.all_split_by ..group_delimiter))
                   (stack (its #name artifact)
                          (its #version artifact))))
