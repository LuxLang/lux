... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except local #version)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]
    [hash (.only Hash)]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" order)
     ["%" \\format (.only Format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid)]]]
   [world
    ["[0]" file (.only Path)]
    [net
     [uri (.only URI)
      ["[0]" path]]]]]])

(type .public Group
  Text)

(type .public Name
  Text)

(type .public Version
  Text)

(type .public Artifact
  (Record
   [#group Group
    #name Name
    #version Version]))

(def .public hash
  (Hash Artifact)
  (all product.hash
       text.hash
       text.hash
       text.hash
       ))

(def .public equivalence
  (Equivalence Artifact)
  (of ..hash equivalence))

(def .public order
  (Order Artifact)
  (implementation
   (def equivalence
     ..equivalence)

   (def (< reference subject)
     (<| (or (text#< (its #group reference)
                     (its #group subject)))

         (and (text#= (its #group reference)
                      (its #group subject)))
         (or (text#< (its #name reference)
                     (its #name subject)))
         
         (and (text#= (its #name reference)
                      (its #name subject)))
         (text#< (its #version reference)
                 (its #version subject))))))

(with_template [<separator> <definition>]
  [(def <definition>
     Text
     <separator>)]

  ["." group_separator]
  ["-" version_separator]
  [":" identity_separator]
  )

(def .public (identity artifact)
  (-> Artifact Text)
  (%.format (its #name artifact)
            ..version_separator
            (its #version artifact)))

(def .public (format value)
  (Format Artifact)
  (%.format (its #group value)
            ..identity_separator
            (..identity value)))

(def .public (directory separator group)
  (-> Text Group Text)
  (|> group
      (text.all_split_by ..group_separator)
      (text.interposed separator)))

(def .public (bundle version artifact)
  (-> Version Artifact URI)
  (let [/ path.separator
        group (..directory / (its #group artifact))
        name (its #name artifact)]
    (%.format group / name / version)))

(def .public (uri version artifact)
  (-> Version Artifact URI)
  (let [/ path.separator]
    (%.format (..bundle version artifact) / (..identity artifact))))

(def .public (local artifact)
  (-> Artifact (List Text))
  (list#composite (|> artifact
                      (its #group)
                      (text.all_split_by ..group_separator))
                  (list (its #name artifact)
                        (its #version artifact))))
