(.module:
  [library
   [lux (#- char)
    ["$" documentation (#+ documentation:)]
    [data
     [text (#+ \n)
      ["%" format (#+ format)]]
     [collection
      ["." list]]]]]
  ["." / #_
   ["#." annotations]
   ["#." check]
   ["#." declaration]
   ["#." definition]
   ["#." export]
   ["#." input]
   ["#." type #_
    ["#/." variable]]]
  [\\library
   ["." /]])

(documentation: /.syntax:
  (format \n "A more advanced way to define macros than 'macro:'."
          \n "The inputs to the macro can be parsed in complex ways through the use of syntax parsers."
          \n "The macro body is also (implicitly) run in the Meta monad, to save some typing."
          \n "Also, the compiler state can be accessed through the *lux* binding.")
  [(syntax: .public (object [.let [imports (class_imports *lux*)]
                             .let [class_vars (list)]
                             super (opt (super_class_decl^ imports class_vars))
                             interfaces (tuple (some (super_class_decl^ imports class_vars)))
                             constructor_args (constructor_args^ imports class_vars)
                             methods (some (overriden_method_def^ imports))])
     (let [def_code ($_ text\compose "anon-class:"
                        (spaced (list (super_class_decl$ (maybe.else object_super_class super))
                                      (with_brackets (spaced (list\map super_class_decl$ interfaces)))
                                      (with_brackets (spaced (list\map constructor_arg$ constructor_args)))
                                      (with_brackets (spaced (list\map (method_def$ id) methods))))))]
       (in (list (` ((~ (code.text def_code))))))))])

(.def: .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [..syntax:]
            [/annotations.documentation
             /check.documentation
             /declaration.documentation
             /definition.documentation
             /export.documentation
             /input.documentation
             /type/variable.documentation]))
