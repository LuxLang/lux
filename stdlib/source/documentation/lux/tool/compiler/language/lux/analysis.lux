(.require
 [library
  [lux (.except)
   ["$" documentation]
   [data
    [text (.only \n)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list]]]
   [meta
    [macro
     ["[0]" template]]]]]
 ["[0]" \\parser]
 [\\library
  ["[0]" /]])

(`` (.def \\parser
      (.List $.Module)
      ($.module \\parser._
                ""
                [($.default \\parser.cannot_parse)
                 ($.default \\parser.unconsumed_input)

                 ($.documentation (\\parser.Parser it)
                   "A parser for Lux code analysis nodes.")

                 ($.documentation \\parser.result
                   "Executes a parser and makes sure no inputs go unconsumed."
                   [(result parser input)])

                 ($.documentation \\parser.any
                   "Matches any value, without discrimination.")

                 ($.documentation \\parser.end
                   "Ensures there are no more inputs.")

                 ($.documentation \\parser.end?
                   "Checks whether there are no more inputs.")

                 (,, (with_template [<query> <assertion>]
                       [($.documentation <query>
                          (format "Queries for a " (template.text [<query>]) " value."))
                        ($.documentation <assertion>
                          (format "Assert a specific " (template.text [<query>]) " value."))]

                       [\\parser.bit \\parser.this_bit]
                       [\\parser.nat \\parser.this_nat]
                       [\\parser.int \\parser.this_int]
                       [\\parser.rev \\parser.this_rev]
                       [\\parser.frac \\parser.this_frac]
                       [\\parser.text \\parser.this_text]
                       [\\parser.local \\parser.this_local]
                       [\\parser.foreign \\parser.this_foreign]
                       [\\parser.constant \\parser.this_constant]
                       ))

                 ($.documentation \\parser.tuple
                   "Parses only within the context of a tuple's contents."
                   [(tuple parser)])]
                [])))

(.def .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [($.default /.Branch')
             ($.default /.Match')
             ($.default /.Environment)
             ($.default /.Analysis)
             ($.default /.Branch)
             ($.default /.Match)
             ($.default /.equivalence)
             ($.default /.case)
             ($.default /.unit)
             ($.default /.bit)
             ($.default /.nat)
             ($.default /.int)
             ($.default /.rev)
             ($.default /.frac)
             ($.default /.text)
             ($.default /.no_op)
             ($.default /.variable)
             ($.default /.constant)
             ($.default /.local)
             ($.default /.foreign)
             ($.default /.variant)
             ($.default /.tuple)
             ($.default /.format)
             ($.default /.State+)
             ($.default /.Operation)
             ($.default /.Phase)
             ($.default /.Handler)
             ($.default /.Bundle)
             ($.default /.with_source_code)
             ($.default /.with_current_module)
             ($.default /.with_location)
             ($.default /.failure)
             ($.default /.except)
             ($.default /.assertion)
             ($.default /.with_exception)
             ($.default /.set_state)
             ($.default /.set_source_code)
             ($.default /.set_current_module)
             ($.default /.set_location)
             ($.default /.location)
             ($.default /.source)
             ($.default /.info)
             ($.default /.state)]
            [..\\parser]))
