(.require
 [library
  [lux (.except list)
   ["$" documentation]
   [data
    ["[0]" text (.only \n)
     ["%" \\format (.only format)]]]]]
 ["[0]" \\parser]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" finger]
  ["[1][0]" zipper]])

(`` (.def \\parser
      (.List $.Module)
      ($.module \\parser._
                ""
                [($.default \\parser.cannot_move_further)

                 ($.documentation (\\parser.Parser it)
                   "A parser of arbitrary trees.")

                 ($.documentation \\parser.result'
                   "Applies the parser against a tree zipper."
                   [(result' parser zipper)])

                 ($.documentation \\parser.result
                   "Applies the parser against a tree."
                   [(result parser tree)])

                 ($.documentation \\parser.value
                   "Yields the value inside the current tree node.")

                 (,, (with_template [<name> <doc>]
                       [($.documentation <name>
                          <doc>)]

                       [\\parser.down "Move down."]
                       [\\parser.up "Move up."]

                       [\\parser.right "Move to the right."]
                       [\\parser.rightmost "Move to the rightmost node."]

                       [\\parser.left "Move to the left."]
                       [\\parser.leftmost "Move to the leftmost node."]
                       
                       [\\parser.next "Move to the next node."]
                       [\\parser.end "Move to the last node."]
                       
                       [\\parser.previous "Move to the previous node."]
                       [\\parser.start "Move to the root node."]
                       ))]
                [])))

(.def .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [($.default /.equivalence)
             ($.default /.functor)
             ($.default /.mix)

             ($.documentation (/.Tree it)
               "A generic tree data-structure.")

             ($.documentation /.flat
               "All the leaf values of the tree, in order."
               [(flat tree)])

             ($.documentation /.leaf
               ""
               [(leaf value)])

             ($.documentation /.branch
               ""
               [(branch value children)])

             ($.documentation /.tree
               "Tree literals."
               [(is (Tree Nat)
                    (tree 12
                          {34 {}
                              56 {}
                              78 {90 {}}}))])]
            [..\\parser
             
             /finger.documentation
             /zipper.documentation]))
