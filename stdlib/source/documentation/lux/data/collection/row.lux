(.module:
  [library
   [lux (#- list)
    ["$" documentation (#+ documentation:)]
    [control
     ["<>" parser
      ["<.>" code]]]
    [data
     ["." text (#+ \n)
      ["%" format (#+ format)]]]
    [macro
     [syntax (#+ syntax:)]
     ["." code]
     ["." template]]]]
  [\\library
   ["." /]])

(documentation: /.Row
  "A sequential data-structure with fast random access.")

(documentation: /.suffix
  ""
  [(suffix val row)])

(documentation: /.within_bounds?
  "Determines whether the index is within the bounds of the row."
  [(within_bounds? row idx)])

(documentation: /.item
  ""
  [(item idx row)])

(documentation: /.has
  ""
  [(has idx val row)])

(documentation: /.revised
  ""
  [(revised idx f row)])

(documentation: /.prefix
  ""
  [(prefix row)])

(documentation: /.list
  ""
  [(list row)])

(documentation: /.member?
  ""
  [(member? equivalence row val)])

(documentation: /.row
  "Row literals."
  [(: (Row Nat)
      (row 12 34 56 78 90))])

(.def: .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [..Row
             ..suffix
             ..within_bounds?
             ..item
             ..has
             ..revised
             ..prefix
             ..list
             ..member?
             ..row
             ($.default /.empty)
             ($.default /.size)
             ($.default /.index_out_of_bounds)
             ($.default /.of_list)
             ($.default /.empty?)
             ($.default /.equivalence)
             ($.default /.fold)
             ($.default /.monoid)
             ($.default /.functor)
             ($.default /.apply)
             ($.default /.monad)
             ($.default /.reversed)
             ($.default /.every?)
             ($.default /.any?)]
            []))
