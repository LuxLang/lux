... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["$" documentation]
   [data
    [text (.only \n)
     ["%" \\injection]]]
   [meta
    [macro
     ["[0]" template]]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" property]])

(`` (the .public documentation
      (List $.Documentation)
      (let [zipped (list ($.definition /.zipped
                           "Create list zippers with the specified number of input lists."
                           ($.example (' (the zipped_2 (zipped 2))))
                           ($.example (' (the zipped_3 (zipped 3))))
                           ($.example (' (zipped_3 xs ys zs)))
                           ($.example (' ((zipped 3) xs ys zs))))

                         ($.definition /.zipped_with
                           "Create list zippers with the specified number of input lists."
                           ($.example (' (the zipped_with_2 (zipped_with 2))))
                           ($.example (' (the zipped_with_3 (zipped_with 3))))
                           ($.example (' (zipped_with_2 + xs ys)))
                           ($.example (' ((zipped_with 2) + xs ys))))

                         ($.definition /.zipped_2)
                         ($.definition /.zipped_3)
                         ($.definition /.zipped_with_2)
                         ($.definition /.zipped_with_3))]
        (/.partial ($.module /._
                             "")

                   ($.definition /.mix)
                   ($.definition /.equivalence)
                   ($.definition /.hash)
                   ($.definition /.monoid)
                   ($.definition /.functor)
                   ($.definition /.monad)
                   
                   ($.definition /.first)
                   ($.definition /.after)
                   ($.definition /.while)
                   ($.definition /.until)
                   ($.definition /.every?)
                   ($.definition /.any?)

                   ($.definition /.mixes
                     ""
                     ($.example (' (mixes f init inputs))))

                   ($.definition /.in_reverse
                     ""
                     ($.example (' (in_reverse xs))))

                   ($.definition /.only
                     "A list with only values that satisfy the predicate."
                     ($.example (' (only keep? xs))))

                   ($.definition /.partition
                     "Divide the list into all elements that satisfy a predicate, and all elements that do not."
                     ($.example (' (partition satisfies? list))))

                   ($.definition /.pairs
                     "Cut the list into pairs of 2."
                     ($.example (' (pairs list))))

                   ($.definition /.split_at
                     ""
                     ($.example (' (split_at n xs))))

                   ($.definition /.split_when
                     "Segment the list by using a predicate to tell when to cut."
                     ($.example (' (split_when predicate xs))))

                   ($.definition /.sub
                     "Segment the list into sub-lists of (at most) the given size."
                     ($.example (' (sub size list))))

                   ($.definition /.repeated
                     "A list of the value x, repeated n times."
                     ($.example (' (repeated n x))))

                   ($.definition /.iterations
                     "Generates a list element by element until the function returns .#None."
                     ($.example (' (iterations f x))))

                   ($.definition /.one
                     ""
                     ($.example (' (one check xs))))

                   ($.definition /.all
                     ""
                     ($.example (' (all check xs))))

                   ($.definition /.example
                     "Yields the first value in the list that satisfies the predicate."
                     ($.example (' (example predicate xs))))

                   ($.definition /.interposed
                     "Puts a value between every two elements in the list."
                     ($.example (' (interposed sep xs))))

                   ($.definition /.size
                     ""
                     ($.example (' (size list))))

                   ($.definition /.item
                     "Fetches the element at the specified index."
                     ($.example (' (item i xs))))

                   ($.definition /.in_order
                     "A list ordered by a comparison function."
                     ($.example (' (in_order < xs))))

                   ($.definition /.empty?
                     ""
                     ($.example (' (empty? xs))))

                   ($.definition /.member?
                     ""
                     ($.example (' (member? eq xs x))))

                   (,, (template.with [<name> <doc>]
                         [($.definition <name>
                            <doc>)]

                         [[/.head "Yields the first element of a list."]
                          [/.tail "For a list of size N, yields the N-1 elements after the first one."]]
                         ))

                   ($.definition /.domain
                     "Produces all the valid indices for a given size."
                     ($.example (' (domain size))))

                   ($.definition /.last
                     ""
                     ($.example (' (last xs))))

                   ($.definition /.inits
                     (text "For a list of size N, yields the first N-1 elements."
                           \n "Will yield a .#None for empty lists.")
                     ($.example (' (inits xs))))

                   ($.definition /.together
                     "The sequential combination of all the lists.")

                   ($.definition /.with
                     "Enhances a monad with List functionality."
                     ($.example (' (with monad))))

                   ($.definition /.lifted
                     "Wraps a monadic value with List machinery."
                     ($.example (' (lifted monad))))

                   ($.definition /.enumeration
                     "Pairs every element in the list with its index, starting at 0."
                     ($.example (' (enumeration xs))))

                   ($.definition /.when
                     "Can be used as a guard in (co)monadic be/do expressions."
                     ($.example (' (monad.let monad
                                     [value (do_something 1 2 3)
                                      .when (passes_test? value)]
                                     (do_something_else 4 5 6)))))

                   (all /#composite
                        zipped
                        
                        /property.documentation
                        )
                   ))))
