(.require
 [library
  [lux (.except list has revised)
   ["$" documentation]]]
 [\\library
  ["[0]" /]])

(.def .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [($.default /.empty)
             ($.default /.size)
             ($.default /.index_out_of_bounds)
             ($.default /.of_list)
             ($.default /.empty?)
             ($.default /.equivalence)
             ($.default /.mix)
             ($.default /.monoid)
             ($.default /.functor)
             ($.default /.apply)
             ($.default /.monad)
             ($.default /.reversed)
             ($.default /.every?)
             ($.default /.any?)

             ($.documentation (/.Sequence it)
               "A sequential data-structure with fast random access.")

             ($.documentation /.suffix
               ""
               [(suffix val sequence)])

             ($.documentation /.within_bounds?
               "Determines whether the index is within the bounds of the sequence."
               [(within_bounds? sequence idx)])

             ($.documentation /.item
               ""
               [(item idx sequence)])

             ($.documentation /.has
               ""
               [(has idx val sequence)])

             ($.documentation /.revised
               ""
               [(revised idx f sequence)])

             ($.documentation /.prefix
               ""
               [(prefix sequence)])

             ($.documentation /.list
               ""
               [(list sequence)])

             ($.documentation /.member?
               ""
               [(member? equivalence sequence val)])

             ($.documentation /.sequence
               "Sequence literals."
               [(is (Sequence Nat)
                    (sequence 12 34 56 78 90))])]
            []))
