(.module:
  [library
   [lux (#- list)
    ["$" documentation (#+ documentation:)]
    [control
     ["<>" parser
      ["<.>" code]]]
    [data
     ["." text (#+ \n)
      ["%" format (#+ format)]]]
    [macro
     [syntax (#+ syntax:)]
     ["." code]
     ["." template]]]]
  [\\library
   ["." /]])

(documentation: (/.Sequence it)
  "An infinite sequence of values.")

(documentation: /.iterations
  "A stateful way of infinitely calculating the values of a sequence."
  [(iterations step init)])

(documentation: /.repeated
  "Repeat a value forever."
  [(repeated x)])

(documentation: /.cycle
  (format "Go over the elements of a list forever."
          \n "The list should not be empty.")
  [(cycle [start next])])

(documentation: /.item
  ""
  [(item idx sequence)])

(template [<taker> <dropper>]
  [(documentation: <taker>
     ""
     [(<taker> pred xs)])
   (documentation: <dropper>
     ""
     [(<dropper> pred xs)])]
  
  [/.while /.until]
  [/.first /.after]
  )

(template [<splitter>]
  [(documentation: <splitter>
     ""
     [(<splitter> pred xs)])]
  
  [/.split_when]
  [/.split_at]
  )

(documentation: /.only
  "A new sequence only with items that satisfy the predicate."
  [(only predicate sequence)])

(documentation: /.partition
  (format "Split a sequence in two based on a predicate."
          \n "The left side contains all entries for which the predicate is #1."
          \n "The right side contains all entries for which the predicate is #0.")
  [(partition left? xs)])

(documentation: /.^sequence&
  (format "Allows destructuring of sequences in pattern-matching expressions."
          \n "Caveat emptor: Only use it for destructuring, and not for testing values within the sequences.")
  [(let [(^sequence& x y z _tail) (some_sequence_func +1 +2 +3)]
     (func x y z))])

(.def: .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [..Sequence
             ..iterations
             ..repeated
             ..cycle
             ..item

             ..while ..until
             ..first ..after
             
             ..split_when
             ..split_at
             
             ..only
             ..partition
             ..^sequence&
             ($.default /.head)
             ($.default /.tail)
             ($.default /.functor)
             ($.default /.comonad)]
            []))
