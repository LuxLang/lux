(.using
 [library
  [lux "*"
   ["$" documentation {"+" documentation:}]
   [data
    [text {"+" \n}
     ["%" format {"+" format}]]]
   [macro
    ["[0]" template]]]]
 [\\library
  ["[0]" /]])

(documentation: /.Binary
  "A binary BLOB of data.")

(documentation: /.empty
  "A fresh/empty binary BLOB of the specified size."
  [(empty size)])

(documentation: /.aggregate
  ""
  [(aggregate f init binary)])

(documentation: /.read_8!
  "Read 1 byte (8 bits) at the given index."
  [(read_8! index binary)])

(documentation: /.read_16!
  "Read 2 bytes (16 bits) at the given index."
  [(read_16! index binary)])

(documentation: /.read_32!
  "Read 4 bytes (32 bits) at the given index."
  [(read_32! index binary)])

(documentation: /.read_64!
  "Read 8 bytes (64 bits) at the given index."
  [(read_64! index binary)])

(documentation: /.write_8!
  "Write 1 byte (8 bits) at the given index."
  [(write_8! index value binary)])

(documentation: /.write_16!
  "Write 2 bytes (16 bits) at the given index."
  [(write_16! index value binary)])

(documentation: /.write_32!
  "Write 4 bytes (32 bits) at the given index."
  [(write_32! index value binary)])

(documentation: /.write_64!
  "Write 8 bytes (64 bits) at the given index."
  [(write_64! index value binary)])

(documentation: /.copy
  "Mutates the target binary BLOB by copying bytes from the source BLOB to it."
  [(copy bytes source_offset source target_offset target)])

(documentation: /.slice
  "Yields a subset of the binary BLOB, so long as the specified range is valid."
  [(slice offset length binary)])

(documentation: /.after
  "Yields a binary BLOB with at most the specified number of bytes removed."
  [(after bytes binary)])

(.def: .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [..Binary
             ..empty
             ..aggregate
             ..read_8!
             ..read_16!
             ..read_32!
             ..read_64!
             ..write_8!
             ..write_16!
             ..write_32!
             ..write_64!
             ..copy
             ..slice
             ..after
             ($.default /.index_out_of_bounds)
             ($.default /.slice_out_of_bounds)
             ($.default /.size)
             ($.default /.equivalence)
             ($.default /.monoid)]
            []))
