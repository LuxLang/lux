... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["$" documentation]
   [data
    [text (.only \n)]]
   [meta
    [macro
     ["[0]" template]]]]]
 [\\library
  ["[0]" /]])

(`` (the .public documentation
      (List $.Documentation)
      (list ($.module /._
                      "")

            ($.definition /.Frame
              "Meta-data about an abstract/nominal type in a stack of them.")

            ($.definition /.current
              "The currently-being-defined abstract/nominal type.")

            ($.definition /.specific
              "A specific abstract/nominal type still being defined somewhere in the scope."
              ($.example (' (specific name))))

            (,, (template.with [<name> <from> <$> <to>]
                  [($.definition <name>
                     "Type-casting macro for abstract/nominal types."
                     ($.example (' (|> value
                                       (is <from>)
                                       <$>
                                       (is <to>)))))]

                  [[/.of Reification abstraction Abstraction]
                   [/.as Abstraction reification Reification]]
                  ))

            ($.definition /.def
              (text "Define abstract/nominal types which hide their reification details."
                    \n "You can convert between the abstraction and its reification selectively to access the value, while hiding it from others.")
              ($.example (' (/.def String
                                   Text

                                   (.the (string value)
                                     (-> Text String)
                                     (abstraction value))

                                   (.the (text value)
                                     (-> String Text)
                                     (reification value)))))

              ($.comment "Type-parameters are optional.")
              ($.example (' (/.def (Duplicate a)
                                   [a a]

                                   (.the (duplicate value)
                                     (for_any (_ a) (-> a (Duplicate a)))
                                     (abstraction [value value])))))

              ($.comment "Definitions can be nested.")
              ($.example (' (/.def (Single a)
                                   a

                                   (.the (single value)
                                     (for_any (_ a) (-> a (Single a)))
                                     (abstraction value))

                                   (/.def (Double a)
                                          [a a]

                                          (.the (double value)
                                            (for_any (_ a) (-> a (Double a)))
                                            (abstraction [value value]))

                                          (.the (single' value)
                                            (for_any (_ a) (-> a (Single a)))
                                            (abstraction Single [value value]))

                                          (let [value 0123]
                                            (same? value
                                                   (|> value
                                                       single'
                                                       (reification Single)
                                                       double
                                                       reification)))))))

              ($.comment "Type-parameters do not necessarily have to be used in the reification type.")
              ($.comment "If they are not used, they become phantom types and can be used to customize types without changing the reification.")
              ($.example (' (/.def (JavaScript a)
                                   Text

                                   (/.def Expression Any)
                                   (/.def Statement Any)

                                   (.the (+ x y)
                                     (-> (JavaScript Expression) (JavaScript Expression) (JavaScript Expression))
                                     (abstraction
                                      (text "(" (reification x) "+" (reification y) ")")))

                                   (.the (while test body)
                                     (-> (JavaScript Expression) (JavaScript Statement) (JavaScript Statement))
                                     (abstraction
                                      (text "while(" (reification test) ") {"
                                            (reification body)
                                            "}")))))))

            ($.definition /.transmutation
              "Transmutes an abstract/nominal type's phantom types."
              ($.example (' (/.def (JavaScript a)
                                   Text

                                   (/.def Expression Any)
                                   (/.def Statement Any)

                                   (.the (statement expression)
                                     (-> (JavaScript Expression) (JavaScript Statement))
                                     (transmutation expression))

                                   (.the (statement' expression)
                                     (-> (JavaScript Expression) (JavaScript Statement))
                                     (transmutation JavaScript expression))))))
            )))
