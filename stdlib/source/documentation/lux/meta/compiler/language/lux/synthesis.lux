... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["$" documentation]
   [data
    [text (.only \n)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid)]]]
   [meta
    [macro
     ["[0]" template]]]]]
 ["[0]" \\projection]
 [\\library
  ["[0]" /]])

(`` (the \\projection
      (List $.Documentation)
      (list ($.module \\projection._
                      "")

            ($.definition \\projection.cannot_parse)
            ($.definition \\projection.unconsumed_input)
            ($.definition \\projection.expected_empty_input)
            ($.definition \\projection.wrong_arity)
            ($.definition \\projection.empty_input)

            ($.definition (\\projection.Projection it)
              "A projection for the Lux compiler's synthesis nodes using during optimization.")

            ($.definition \\projection.value
              (%.message "Executes the projection against the inputs."
                         \n "Ensures all inputs are consumed by the projection.")
              ($.example (' (value projection input))))

            ($.definition \\projection.any
              "Yields a synthesis node without subjecting it to any analysis.")

            ($.definition \\projection.end
              "Ensures there are no more inputs.")

            ($.definition \\projection.end?
              "Checks whether there are no more inputs.")

            (,, (template.with [<query> <assertion>]
                  [($.definition <query>
                     (%.message "Queries for a " (template.text [<query>]) " synthesis node."))
                   ($.definition <assertion>
                     (%.message "Checks for a specific " (template.text [<query>]) " synthesis node."))]

                  [\\projection.bit \\projection.this_bit]
                  [\\projection.i64 \\projection.this_i64]
                  [\\projection.f64 \\projection.this_f64]
                  [\\projection.text \\projection.this_text]
                  [\\projection.local \\projection.this_local]
                  [\\projection.foreign \\projection.this_foreign]
                  [\\projection.constant \\projection.this_constant]
                  ))

            ($.definition \\projection.tuple
              "Parses the contents of a tuple."
              ($.example (' (tuple projection))))

            ($.definition \\projection.function
              "Parses the body of a function with the 'expected' arity."
              ($.example (' (function expected projection))))

            ($.definition \\projection.loop
              "Parses the initial values and the body of a loop."
              ($.example (' (loop init_projections iteration_projection))))
            )))

(the all_templates
  (List $.Documentation)
  (list ($.definition /.path/pop)
        ($.definition /.path/side)
        ($.definition /.path/member)
        ($.definition /.side/left)
        ($.definition /.side/right)
        ($.definition /.member/left)
        ($.definition /.member/right)
        ($.definition /.path/bind)
        ($.definition /.path/then)
        ($.definition /.path/alt)
        ($.definition /.path/seq)
        ($.definition /.unit)
        ($.definition /.bit)
        ($.definition /.i64)
        ($.definition /.f64)
        ($.definition /.text)
        ($.definition /.variant)
        ($.definition /.tuple)
        ($.definition /.variable)
        ($.definition /.constant)
        ($.definition /.local)
        ($.definition /.foreign)
        ($.definition /.when)
        ($.definition /.let)
        ($.definition /.if)
        ($.definition /.its)
        ($.definition /.again)
        ($.definition /.scope)
        ($.definition /.abstraction)
        ($.definition /.apply)
        ($.definition /.!bind_top)
        ($.definition /.!multi_pop)
        ($.definition /.simple_left_side)
        ($.definition /.simple_right_side)
        ))

(the .public documentation
  (List $.Documentation)
  (list.partial ($.module /._
                          "")

                ($.definition /.Resolver)
                ($.definition /.State)
                ($.definition /.fresh_resolver)
                ($.definition /.init)
                ($.definition /.Fork)
                ($.definition /.Path')
                ($.definition /.Abstraction')
                ($.definition /.Apply')
                ($.definition /.Branch)
                ($.definition /.Scope)
                ($.definition /.Loop)
                ($.definition /.Function)
                ($.definition /.Control)
                ($.definition /.Term)
                ($.definition /.State)
                ($.definition /.Operation)
                ($.definition /.Phase)
                ($.definition /.Handler)
                ($.definition /.Bundle)
                ($.definition /.Path)
                ($.definition /.Abstraction)
                ($.definition /.Apply)
                ($.definition /.with_locals)
                ($.definition /.locals)
                ($.definition /.with_currying?)
                ($.definition /.currying?)
                ($.definition /.with_new_local)
                ($.definition /.%path')
                ($.definition /.injection)
                ($.definition /.%path)
                ($.definition /.equivalence)
                ($.definition /.hash)

                (all list#composite
                     ..all_templates
                     ..\\projection
                     )
                ))
