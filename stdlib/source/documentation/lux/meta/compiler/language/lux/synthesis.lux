(.require
 [library
  [lux (.except)
   ["$" documentation]
   [data
    [text (.only \n)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list]]]
   [meta
    [macro
     ["[0]" template]]]]]
 ["[0]" \\parser]
 [\\library
  ["[0]" /]])

(`` (.def \\parser
      (.List $.Module)
      ($.module \\parser._
                ""
                [($.default \\parser.cannot_parse)
                 ($.default \\parser.unconsumed_input)
                 ($.default \\parser.expected_empty_input)
                 ($.default \\parser.wrong_arity)
                 ($.default \\parser.empty_input)

                 ($.definition (\\parser.Parser it)
                   "A parser for the Lux compiler's synthesis nodes using during optimization.")

                 ($.definition \\parser.result
                   (format "Executes the parser against the inputs."
                           \n "Ensures all inputs are consumed by the parser.")
                   [(result parser input)])

                 ($.definition \\parser.any
                   "Yields a synthesis node without subjecting it to any analysis.")

                 ($.definition \\parser.end
                   "Ensures there are no more inputs.")

                 ($.definition \\parser.end?
                   "Checks whether there are no more inputs.")

                 (,, (with_template [<query> <assertion>]
                       [($.definition <query>
                          (format "Queries for a " (template.text [<query>]) " synthesis node."))
                        ($.definition <assertion>
                          (format "Checks for a specific " (template.text [<query>]) " synthesis node."))]

                       [\\parser.bit \\parser.this_bit]
                       [\\parser.i64 \\parser.this_i64]
                       [\\parser.f64 \\parser.this_f64]
                       [\\parser.text \\parser.this_text]
                       [\\parser.local \\parser.this_local]
                       [\\parser.foreign \\parser.this_foreign]
                       [\\parser.constant \\parser.this_constant]
                       ))

                 ($.definition \\parser.tuple
                   "Parses the contents of a tuple."
                   [(tuple parser)])

                 ($.definition \\parser.function
                   "Parses the body of a function with the 'expected' arity."
                   [(function expected parser)])

                 ($.definition \\parser.loop
                   "Parses the initial values and the body of a loop."
                   [(loop init_parsers iteration_parser)])]
                [])))

(.def .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [($.default /.Resolver)
             ($.default /.State)
             ($.default /.fresh_resolver)
             ($.default /.init)
             ($.default /.Fork)
             ($.default /.Path')
             ($.default /.Abstraction')
             ($.default /.Apply')
             ($.default /.Branch)
             ($.default /.Scope)
             ($.default /.Loop)
             ($.default /.Function)
             ($.default /.Control)
             ($.default /.Synthesis)
             ($.default /.State+)
             ($.default /.Operation)
             ($.default /.Phase)
             ($.default /.Handler)
             ($.default /.Bundle)
             ($.default /.Path)
             ($.default /.path/pop)
             ($.default /.path/side)
             ($.default /.path/member)
             ($.default /.side/left)
             ($.default /.side/right)
             ($.default /.member/left)
             ($.default /.member/right)
             ($.default /.path/bind)
             ($.default /.path/then)
             ($.default /.path/alt)
             ($.default /.path/seq)
             ($.default /.Abstraction)
             ($.default /.Apply)
             ($.default /.unit)
             ($.default /.with_locals)
             ($.default /.locals)
             ($.default /.with_currying?)
             ($.default /.currying?)
             ($.default /.with_new_local)
             ($.default /.bit)
             ($.default /.i64)
             ($.default /.f64)
             ($.default /.text)
             ($.default /.variant)
             ($.default /.tuple)
             ($.default /.variable)
             ($.default /.constant)
             ($.default /.variable/local)
             ($.default /.variable/foreign)
             ($.default /.branch/case)
             ($.default /.branch/let)
             ($.default /.branch/if)
             ($.default /.branch/get)
             ($.default /.loop/again)
             ($.default /.loop/scope)
             ($.default /.function/abstraction)
             ($.default /.function/apply)
             ($.default /.%path')
             ($.default /.%synthesis)
             ($.default /.%path)
             ($.default /.equivalence)
             ($.default /.hash)
             ($.default /.!bind_top)
             ($.default /.!multi_pop)
             ($.default /.simple_left_side)
             ($.default /.simple_right_side)]
            [..\\parser]))
