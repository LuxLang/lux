(.require
 [library
  [lux (.except)
   ["$" documentation]
   [control
    ["[0]" io]]
   [data
    ["[0]" text (.only \n)
     ["%" \\format (.only format)]]]]]
 ["[0]" \\parser]
 [\\library
  ["[0]" /]])

(.def \\parser
  (.List $.Module)
  ($.module \\parser._
            ""
            [($.documentation (\\parser.Parser it)
               "A command-line interface parser.")

             ($.documentation \\parser.result
               "Executes the parser and verifies that all inputs are processed."
               [(result parser inputs)])

             ($.documentation \\parser.any
               "Just returns the next input without applying any logic.")

             ($.documentation \\parser.parse
               "Parses the next input with a parsing function."
               [(parse parser)])

             ($.documentation \\parser.this
               "Checks that a token is in the inputs."
               [(this reference)])

             ($.documentation \\parser.somewhere
               "Given a parser, tries to parse it somewhere in the inputs (i.e. not necessarily parsing the immediate inputs)."
               [(somewhere cli)])

             ($.documentation \\parser.end
               "Ensures there are no more inputs.")

             ($.documentation \\parser.named
               "Parses a named parameter and yields its value."
               [(named name value)])

             ($.documentation \\parser.parameter
               "Parses a parameter that can have either a short or a long name."
               [(parameter [short long] value)])]
            []))

(.def .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [($.documentation /.program:
               "Defines the entry-point to a program (similar to the 'main' function/method in other programming languages)."
               ["Can take a list of all the input parameters to the program."
                (program: all_arguments
                  (do io.monad
                    [foo (initialize program)]
                    (do_something_with all_arguments)))]
               ["Can also parse them using CLI parsers from the library/lux/control/parser/cli module."
                (program: [config configuration_parser]
                  (do io.monad
                    [data (initialize program with config)]
                    (do_something_with data)))])]
            [..\\parser]))
