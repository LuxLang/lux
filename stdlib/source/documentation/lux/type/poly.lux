(.module:
  [library
   [lux {"-" [and]}
    ["$" documentation {"+" [documentation:]}]
    [abstract
     [\\specification
      ["$[0]" equivalence]
      ["$[0]" codec]]]
    [control
     ["<>" parser
      ["<[0]>" code]]]
    [data
     ["[0]" text {"+" [\n]}
      ["%" format {"+" [format]}]]]
    [macro
     ["[0]" template]]]]
  [\\library
   ["[0]" /]])

(documentation: /.derived:
  ""
  [(type: Variant
     (.Variant
      (#Bit Bit)
      (#Text Text)
      (#Frac Frac)))

   (type: Recursive
     (Rec Recursive
       (.Variant
        (#Number Frac)
        (#Addition Frac Recursive))))

   (type: Record
     (.Record
      [#bit Bit
       #frac Frac
       #text Text
       #maybe (Maybe Frac)
       #list (List Frac)
       #dictionary (Dictionary Text Frac)
       #variant Variant
       #tuple [Bit Text Frac]
       #recursive Recursive
       #date Date
       #grams (Qty Gram)]))

   (derived: equivalence
     ($equivalence.equivalence
      Record))

   (: (Equivalence Record)
      equivalence)

   (derived: codec
     ($codec.codec
      Record))

   (: (Codec Json Record)
      codec)])

(documentation: /.code
  ""
  [(code env type)])

(.def: .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [..derived:
             ..code
             ($.default /.poly:)]
            []))
