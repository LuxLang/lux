(.module:
  [library
   [lux (#- type)
    ["$" documentation (#+ documentation:)]
    [control
     ["<>" parser
      ["<.>" code]]]
    [data
     ["." text (#+ \n)
      ["%" format (#+ format)]]]
    [macro
     ["." template]]]]
  [\\library
   ["." /]])

(documentation: /.Refined
  "A refined version of another type, using a predicate to select valid instances.")

(documentation: /.Refiner
  "A selection mechanism for refined instances of a type.")

(documentation: /.refiner
  ""
  [(refiner predicate)])

(documentation: /.lifted
  (format "Yields a function that can work on refined values."
          \n "Respects the constraints of the refinement.")
  [(lifted transform)])

(documentation: /.only
  ""
  [(only refiner values)])

(documentation: /.partition
  "Separates refined values from the un-refined ones."
  [(partition refiner values)])

(documentation: /.type
  "The Refined type associated with a Refiner type."
  [(def: even
     (refiner even?))

   (def: Even
     Type
     (type even))

   (: (Maybe Even)
      (even 123))])

(.def: .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [..Refined
             ..Refiner
             ..refiner
             ..lifted
             ..only
             ..partition
             ..type
             ($.default /.value)
             ($.default /.predicate)]
            []))
