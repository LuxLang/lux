... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["$" documentation]
   [data
    ["[0]" text (.only \n)
     ["%" \\injection]]
    [collection
     ["[0]" list]]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" code]
  ["[1][0]" location]
  ["[1][0]" symbol]
  ["[1][0]" type]
  ["[1][0]" macro]
  ["[1][0]" static]
  ["[1][0]" extension]
  ["[1][0]/" compiler
   ... ["[1][0]" phase]
   ["[1][0]" target]
   [language
    [lux
     ["[1][0]" analysis]
     ["[1][0]" declaration]
     ["[1][0]" translation]
     ["[1][0]" synthesis]]]]])

(the /compiler
  (List $.Documentation)
  (list.together
   (list ... /compiler/phase.documentation
    /compiler/target.documentation
    /compiler/analysis.documentation
    /compiler/declaration.documentation
    /compiler/translation.documentation
    /compiler/synthesis.documentation
    )))

(the .public documentation
  (List $.Documentation)
  (let [query (list ($.definition /.module
                      "Looks-up a module with the given name."
                      ($.example (' (module name))))

                    ($.definition /.current_module_name
                      "The name of the module currently being compiled, if any.")

                    ($.definition /.current_module
                      "The module currently being compiled, if any.")

                    ($.definition /.macro
                      "Looks-up a macro known by the given name."
                      ($.example (' (macro full_name))))

                    ($.definition /.seed
                      (%.message "The current value of a number tracked by the compiler."
                                 \n "Also increases the value, so it's different next time it is seen."
                                 \n "This number can be used for generating data 'randomly' during compilation."))

                    ($.definition /.module_exists?
                      ""
                      ($.example (' (module_exists? module))))

                    ($.definition /.var_type
                      "Looks-up the type of a local variable somewhere in the environment."
                      ($.example (' (var_type name))))

                    ($.definition /.definition
                      "Looks-up a definition's whole data in the available modules (including the current one)."
                      ($.example (' (definition name))))

                    ($.definition /.export
                      (%.message "Looks-up a definition in the available modules (including the current one)."
                                 \n "The look-up only succeeds if the definition has been exported.")
                      ($.example (' (export name))))

                    ($.definition /.definition_type
                      "Looks-up a definition's type in the available modules (including the current one)."
                      ($.example (' (definition_type name))))

                    ($.definition /.type
                      "Looks-up the type of either a local variable or a definition."
                      ($.example (' (type name))))

                    ($.definition /.type_definition
                      "Finds the value of a type definition (such as Int, Any or Lux)."
                      ($.example (' (type_definition name))))

                    ($.definition /.globals
                      "The entire list of globals in a module (including the non-exported/private ones)."
                      ($.example (' (globals module))))

                    ($.definition /.definitions
                      "The entire list of definitions in a module (including the non-exported/private ones)."
                      ($.example (' (definitions module))))

                    ($.definition /.exports
                      "All the exported definitions in a module."
                      ($.example (' (exports module_name))))

                    ($.definition /.modules
                      "All the available modules (including the current one).")

                    ($.definition /.tags_of
                      "All the tags associated with a type definition."
                      ($.example (' (tags_of type_name))))

                    ($.definition /.location
                      "The location of the current expression being analyzed.")

                    ($.definition /.expected_type
                      "The expected type of the current expression being analyzed.")

                    ($.definition /.imported_modules
                      "All the modules imported by a specified module."
                      ($.example (' (imported_modules module_name))))

                    ($.definition /.imported_by?
                      ""
                      ($.example (' (imported_by? import module))))

                    ($.definition /.imported?
                      "Checks if the given module has been imported by the current module."
                      ($.example (' (imported? import))))

                    ($.definition /.tag
                      "Given a tag, finds out what is its index, its related tag-list and its associated type."
                      ($.example (' (tag tag_name))))

                    ($.definition /.slot
                      "Given a slot, finds out what is its index, its related slot-list and its associated type."
                      ($.example (' (slot slot_name))))

                    ($.definition /.tag_lists
                      "All the tag-lists defined in a module, with their associated types."
                      ($.example (' (tag_lists module))))

                    ($.definition /.locals
                      "All the local variables currently in scope, separated in different scopes.")

                    ($.definition /.compiler_state
                      "Obtains the current state of the compiler.")

                    ($.definition /.type_context
                      "The current type-checking context."))
        computation (list ($.definition /.of_try)
                          ($.definition /.try)

                          ($.definition /.value'
                            (%.message "Evaluates a computation that depends on Lux's compiler state."
                                       \n "Also returns a (potentially modified) compiler state.")
                            ($.example (' (value' lux action))))

                          ($.definition /.value
                            "Evaluates a computation that depends on Lux's compiler state."
                            ($.example (' (value lux action))))

                          ($.definition /.either
                            "Pick whichever computation succeeds."
                            ($.example (' (either left right))))

                          ($.definition /.assertion
                            "Fails with the given message if the test is #0."
                            ($.example (' (assertion message test))))

                          ($.definition /.failure
                            "Fails with the given error message."
                            ($.example (' (failure error)))))]
    (list.partial ($.module /._
                            "Functions for extracting information from the state of the compiler.")

                  ($.definition /.functor)
                  ($.definition /.apply)
                  ($.definition /.monad)

                  ($.definition /.normal
                    (%.message "If given a name without a module prefix, gives it the current module's name as prefix."
                               \n "Otherwise, returns the name as-is.")
                    ($.example (' (normal name))))

                  ($.definition /.de_aliased
                    "Given an aliased definition's name, returns the original definition being referenced."
                    ($.example (' (de_aliased def_name))))

                  ($.definition /.eval
                    ""
                    ($.example (' (eval type code))))

                  (list.together
                   (list query
                         computation
                         ../compiler

                         /code.documentation
                         /location.documentation
                         /symbol.documentation
                         /type.documentation
                         /macro.documentation
                         /static.documentation
                         /extension.documentation
                         ))
                  )))
