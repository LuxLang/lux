(.require
 [library
  [lux (.except int char)
   ["$" documentation]
   [data
    ["[0]" text (.only \n)
     ["%" \\format (.only format)]]]]]
 [\\library
  ["[0]" /]])

(.def .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [($.default (/.Object brand))
             ($.default /.Function)
             ($.default /.Symbol)
             ($.default /.Null)
             ($.default /.Undefined)
             ($.default /.Boolean)
             ($.default /.Number)
             ($.default /.String)
             ($.default /.null?)
             ($.default /.on_browser?)
             ($.default /.on_nashorn?)
             ($.default /.on_node_js?)

             ($.definition /.null
               "The null pointer.")

             ($.definition /.import
               "Easily import types, methods, functions and constants."
               [(import Uint8Array
                  "[1]::[0]")

                (import TextEncoder
                  "[1]::[0]"
                  (new [/.String])
                  (encode [/.String] Uint8Array))

                (import TextDecoder
                  "[1]::[0]"
                  (new [/.String])
                  (decode [/.String] String))])

             ($.definition /.type_of
               "The type of an object, as text."
               [(= "boolean"
                   (type_of #1))]
               [(= "number"
                   (type_of +123.456))]
               [(= "string"
                   (type_of "789"))]
               [(= "function"
                   (type_of (function (_ value) value)))])

             ($.definition /.constant
               "Allows using definitions from the JavaScript host platform."
               [(constant .Frac [Math PI])])

             ($.definition /.closure
               (format "Allows defining closures/anonymous-functions in the form that JavaScript expects."
                       \n "This is useful for adapting Lux functions for usage by JavaScript code.")
               [(is /.Function
                    (closure [left right]
                             (do_something (as Foo left) (as Bar right))))])]
            []))
