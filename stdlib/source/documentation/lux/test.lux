(.require
 [library
  [lux (.except and for)
   ["$" documentation]
   [data
    ["[0]" text (.only \n)
     ["%" \\format (.only format)]]]]]
 [\\library
  ["[0]" /]])

(.def .public documentation
  (.List $.Module)
  ($.module /._
            "Tools for unit & property-based/generative testing."
            [($.definition /.must_try_test_at_least_once)
             ($.definition /.error_during_execution)

             ($.definition /.Tally
               "A record of successes and failures while executing tests.")

             ($.definition /.Assertion
               "An asynchronous operation that yields test results.")

             ($.definition /.Test
               "A test that relies on random data generation to thoroughly cover different scenarios.")

             ($.definition /.and'
               "Sequencing combinator (for assertions)."
               [(and' left right)])

             ($.definition /.and
               "Sequencing combinator."
               [(and left right)])

             ($.definition /.context
               "Adds a contextual description to a test's documentation."
               [(context description)])

             ($.definition /.failure
               "A failing test, with a given error message.")

             ($.definition /.assertion
               "Check that a condition is #1, and fail with the given message otherwise."
               [(assertion message condition)])

             ($.definition /.property
               "Check that a condition is #1, and fail with the given message otherwise."
               [(property message condition)])

             ($.definition /.lifted
               ""
               [(lifted message random)])

             ($.definition /.Seed
               "The seed value used for random testing (if that feature is used).")

             ($.definition /.seed
               (format "Execute the given test with a specific seed value."
                       \n "This allows you to reproduce a failing test case as many times as you want while debugging.")
               [(seed value test)])

             ($.definition /.times
               (format "Allows executing a test several times."
                       \n "By doing this, it's possible to thoroughly test code with many different scenarios."
                       \n "This assumes that random data generation is being used in tests instead of fixed/constant inputs.")
               [(times amount test)])

             ($.definition /.run!
               (format "Executes a test, and exits the program with either a successful or a failing exit code."
                       \n "WARNING: This procedure is only meant to be used in (program: ...) forms.")
               [(run! test)])

             ($.definition /.coverage'
               (format "Specifies a test as covering one or more definitions."
                       \n "Adds to the test tally information to track which definitions have been tested.")
               [(coverage' [definition/0 definition/1 ,,, definition/N]
                  (is Bit
                      (some "computation")))])

             ($.definition /.coverage
               (format "Specifies a test as covering one or more definitions."
                       \n "Adds to the test tally information to track which definitions have been tested.")
               [(coverage [definition/0 definition/1 ,,, definition/N]
                  (is Bit
                      (some "computation")))])

             ($.definition /.for
               (format "Specifies a context for tests as covering one or more definitions."
                       \n "Adds to the test tally information to track which definitions have been tested.")
               [(for [definition/0 definition/1 ,,, definition/N]
                     (is Test
                         some_test))])

             ($.definition /.covering
               (format "Specifies the module being covered by a test."
                       \n "Adds tracking information to the tally to know which exported definitions in the module need to be covered.")
               [(covering .._
                          (is Test
                              some_test))])

             ($.definition /.in_parallel
               "Executes multiple tests in parallel (if the host platform supports it) to take advantage of multiple cores."
               [(in_parallel tests)])]
            []))
