(.require
 [library
  [lux (.except if loop)
   ["$" documentation]
   [data
    [text (.only \n)
     ["%" \\format (.only format)]]]]]
 [\\library
  ["[0]" /]])

(.def .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [($.default /.monoid)

             ($.definition (/.Mixin input output)
               "A partially-defined function which can be mixed with others to inherit their behavior.")

             ($.definition /.fixed
               "Given a mixin, produces a normal function."
               [(fixed f)])

             ($.definition /.nothing
               "A mixin that does nothing and just delegates work to the next mixin.")

             ($.definition /.mixed
               "Produces a new mixin, where the behavior of the child can make use of the behavior of the parent."
               [(mixed parent child)])

             ($.definition /.advice
               "Only apply then mixin when the input meets some criterion."
               [(advice when then)])

             ($.definition /.before
               "Executes an action before doing the main work."
               [(before monad action)])

             ($.definition /.after
               "Executes an action after doing the main work."
               [(after monad action)])

             ($.definition (/.Recursive input output)
               "An indirectly recursive function.")

             ($.definition /.of_recursive
               "Transform an indirectly recursive function into a mixin."
               [(of_recursive recursive)])]
            []))
