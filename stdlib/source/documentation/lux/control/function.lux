(.module:
  [library
   [lux (#- if loop)
    ["$" documentation (#+ documentation:)]
    [data
     [text (#+ \n)
      ["%" format (#+ format)]]]
    [macro
     ["." template]]]]
  [\\library
   ["." /]]
  ["." / #_
   ["#." contract]
   ["#." memo]
   ["#." mixin]
   ["#." mutual]])

(documentation: /.identity
  (format "Identity function."
          \n "Does nothing to its argument and just returns it.")
  [(same? (identity value)
          value)])

(documentation: /.composite
  "Function composition."
  [(= ((composite f g) "foo")
      (f (g "foo")))])

(documentation: /.constant
  "Create constant functions."
  [(= ((constant "foo") "bar")
      "foo")])

(documentation: /.flipped
  "Flips the order of the arguments of a function."
  [(= ((flipped f) "foo" "bar")
      (f "bar" "foo"))])

(documentation: /.on
  "Simple 1-argument function application."
  [(on input function)])

(.def: .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [..identity
             ..composite
             ..constant
             ..flipped
             ..on
             ($.default /.monoid)]
            [/contract.documentation
             /memo.documentation
             /mixin.documentation
             /mutual.documentation]))
