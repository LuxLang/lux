(.require
 [library
  [lux (.except if loop)
   ["$" documentation]
   [data
    [text (.only \n)
     ["%" \\format (.only format)]]]]]
 [\\library
  ["[0]" /]])

(.def .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [($.definition /.already_closed)
             ($.definition /.functor)
             ($.definition /.apply)
             ($.definition /.monad)
             ($.definition /.subscribe!)
             ($.definition /.mixes)
             ($.definition /.poll)
             ($.definition /.periodic)
             ($.definition /.iterations)
             ($.definition /.distinct)
             ($.definition /.list)

             ($.definition (/.Channel it)
               "An asynchronous channel to distribute values.")

             ($.definition (/.Sink it)
               "The tail-end of a channel, which can be written-to to fee the channel.")

             ($.definition /.channel
               "Creates a brand-new channel and hands it over, along with the sink to write to it."
               [(channel _)])

             ($.definition (/.Subscriber it)
               "A function that can receive every value fed into a channel.")

             ($.definition /.only
               (format "Produces a new channel based on the old one, only with values"
                       \n "that pass the test.")
               [(only pass? channel)])

             ($.definition /.of_async
               "A one-element channel containing the output from an async."
               [(of_async async)])

             ($.definition /.mix
               "Asynchronous mix over channels."
               [(mix f init channel)])

             ($.definition /.sequential
               "Transforms the given list into a channel with the same elements."
               [(sequential milli_seconds values)])]
            []))
