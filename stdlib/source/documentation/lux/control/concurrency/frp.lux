(.using
 [library
  [lux {"-" if loop}
   ["$" documentation (.only documentation:)]
   [data
    [text (.only \n)
     ["%" format (.only format)]]]
   [macro
    ["[0]" template]]]]
 [\\library
  ["[0]" /]])

(documentation: (/.Channel it)
  "An asynchronous channel to distribute values.")

(documentation: (/.Sink it)
  "The tail-end of a channel, which can be written-to to fee the channel.")

(documentation: /.channel
  "Creates a brand-new channel and hands it over, along with the sink to write to it."
  [(channel _)])

(documentation: (/.Subscriber it)
  "A function that can receive every value fed into a channel.")

(documentation: /.only
  (format "Produces a new channel based on the old one, only with values"
          \n "that pass the test.")
  [(only pass? channel)])

(documentation: /.of_async
  "A one-element channel containing the output from an async."
  [(of_async async)])

(documentation: /.mix
  "Asynchronous mix over channels."
  [(mix f init channel)])

(documentation: /.sequential
  "Transforms the given list into a channel with the same elements."
  [(sequential milli_seconds values)])

(.def: .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [..Channel
             ..Sink
             ..channel
             ..Subscriber
             ..only
             ..of_async
             ..mix
             ..sequential
             ($.default /.channel_is_already_closed)
             ($.default /.functor)
             ($.default /.apply)
             ($.default /.monad)
             ($.default /.subscribe!)
             ($.default /.mixes)
             ($.default /.poll)
             ($.default /.periodic)
             ($.default /.iterations)
             ($.default /.distinct)
             ($.default /.list)]
            []))
