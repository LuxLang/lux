... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["$" documentation]
   [data
    [text (.only \n)
     ["%" \\format (.only format)]]]]]
 [\\library
  ["[0]" /]])

(.def .public documentation
  (.List $.Documentation)
  (list ($.module /._
                  "")

        ($.definition /.functor)
        ($.definition /.apply)
        ($.definition /.monad)

        ($.definition (/.Parser state it)
          "A generic parser.")

        ($.definition /.assertion
          "Fails with the given message if the test is #0."
          ($.example (assertion message test)))

        ($.definition /.maybe
          "Optionality combinator."
          ($.example (maybe parser)))

        ($.definition /.value
          (format "Executes the parser on the input."
                  \n "Does not verify that all of the input has been consumed by the parser."
                  \n "Returns both the parser's output, and a value that represents the remaining input.")
          ($.example (value parser input)))

        ($.definition /.and
          "Sequencing combinator."
          ($.example (and first second)))

        ($.definition /.or
          "Heterogeneous alternative combinator."
          ($.example (or left right)))

        ($.definition /.either
          "Homogeneous alternative combinator."
          ($.example (either this that)))

        ($.definition /.some
          "0-or-more combinator."
          ($.example (some parser)))

        ($.definition /.many
          "1-or-more combinator."
          ($.example (many parser)))

        ($.definition /.exactly
          "Parse exactly N times."
          ($.example (exactly amount parser)))

        ($.definition /.at_least
          "Parse at least N times."
          ($.example (at_least amount parser)))

        ($.definition /.at_most
          "Parse at most N times."
          ($.example (at_most amount parser)))

        ($.definition /.between
          ""
          ($.example (between minimum additional parser)))

        ($.definition /.separated_by
          "Parses instances of 'parser' that are separated by instances of 'separator'."
          ($.example (separated_by separator parser)))

        ($.definition /.not
          "Only succeeds when the underlying parser fails."
          ($.example (not parser)))

        ($.definition /.failure
          "Always fail with this 'message'."
          ($.example (failure message)))

        ($.definition /.of_try
          "Lift a potentially failed computation into a parser."
          ($.example (of_try operation)))

        ($.definition /.else
          "If the given parser fails, returns the default value."
          ($.example (else value parser)))

        ($.definition /.remaining
          "Yield the remaining input (without consuming it).")

        ($.definition /.rec
          "Combinator for recursive parsers."
          ($.example (rec parser)))

        ($.definition /.after
          "Run the parser after another one (whose output is ignored)."
          ($.example (after param subject)))

        ($.definition /.before
          "Run the parser before another one (whose output is ignored)."
          ($.example (before param subject)))

        ($.definition /.only
          "Only succeed when the parser's output passes a test."
          ($.example (only test parser)))

        ($.definition /.parses?
          "Ignore a parser's output and just verify that it succeeds."
          ($.example (parses? parser)))

        ($.definition /.parses
          "Ignore a parser's output and just execute it."
          ($.example (parses parser)))

        ($.definition /.speculative
          (format "Executes a parser, without actually consuming the input."
                  \n "That way, the same input can be consumed again by another parser.")
          ($.example (speculative parser)))

        ($.definition /.codec
          "Decode the output of a parser using a codec."
          ($.example (codec codec parser)))
        ))
