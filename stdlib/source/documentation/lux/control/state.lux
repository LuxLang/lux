(.require
 [library
  [lux (.except local)
   ["$" documentation]
   [data
    [text (.only \n)
     ["%" \\format (.only format)]]]]]
 [\\library
  ["[0]" /]])

(.def .public documentation
  (.List $.Documentation)
  (list ($.module /._
                  "")

        ($.definition /.functor)
        ($.definition /.apply)
        ($.definition /.monad)

        ($.definition (/.State state it)
          "Stateful computations.")

        ($.definition /.get
          "Read the current state.")

        ($.definition /.put
          "Set the new state."
          ($.example (put new_state)))

        ($.definition /.update
          "Compute the new state."
          ($.example (update change)))

        ($.definition /.use
          "Run a function on the current state."
          ($.example (use user)))

        ($.definition /.local
          "Run the computation with a locally-modified state."
          ($.example (local change action)))

        ($.definition /.result
          "Run a stateful computation."
          ($.example (result state action)))

        ($.definition /.while
          "A stateful while loop."
          ($.example (while condition body)))

        ($.definition /.do_while
          "A stateful do-while loop."
          ($.example (do_while condition body)))

        ($.definition /.+State
          "Stateful computations decorated by a monad.")

        ($.definition /.result'
          "Execute a stateful computation decorated by a monad."
          ($.example (result' state action)))

        ($.definition /.with
          "A monad transformer to create composite stateful computations."
          ($.example (with monad)))

        ($.definition /.lifted
          "Lift monadic values to the +State wrapper."
          ($.example (lifted monad ma)))
        ))
