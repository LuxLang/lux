(.require
 [library
  [lux (.except nat int rev local)
   ["$" documentation (.only documentation:)]
   [data
    [text (.only \n)
     ["%" \\format (.only format)]]]
   [macro
    ["[0]" template]]]]
 [\\library
  ["[0]" /]])

(documentation: (/.Parser it)
  "A parser for Lux code analysis nodes.")

(documentation: /.result
  "Executes a parser and makes sure no inputs go unconsumed."
  [(result parser input)])

(documentation: /.any
  "Matches any value, without discrimination.")

(documentation: /.end
  "Ensures there are no more inputs.")

(documentation: /.end?
  "Checks whether there are no more inputs.")

(with_template [<query> <assertion>]
  [(`` (these (`` (documentation: <query>
                    (format "Queries for a " (,, (template.text [<query>])) " value.")))
              (`` (documentation: <assertion>
                    (format "Assert a specific " (,, (template.text [<query>])) " value.")))))]

  [/.bit /.this_bit]
  [/.nat /.this_nat]
  [/.int /.this_int]
  [/.rev /.this_rev]
  [/.frac /.this_frac]
  [/.text /.this_text]
  [/.local /.this_local]
  [/.foreign /.this_foreign]
  [/.constant /.this_constant]
  )

(documentation: /.tuple
  "Parses only within the context of a tuple's contents."
  [(tuple parser)])

(.def .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [..Parser
             ..result
             ..any
             ..end
             ..end?
             ..bit ..this_bit
             ..nat ..this_nat
             ..int ..this_int
             ..rev ..this_rev
             ..frac ..this_frac
             ..text ..this_text
             ..local ..this_local
             ..foreign ..this_foreign
             ..constant ..this_constant
             ..tuple
             ($.default /.cannot_parse)
             ($.default /.unconsumed_input)]
            []))
