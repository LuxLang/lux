(.using
 [library
  [lux (.except nat int rev local not symbol)
   ["$" documentation (.only documentation:)]
   [data
    [text (.only \n)
     ["%" \\format (.only format)]]]
   [macro
    ["[0]" template]]]]
 [\\library
  ["[0]" /]])

(documentation: (/.Parser it)
  "A Lux code parser.")

(documentation: /.any
  "Yields the next input without applying any logic.")

(with_template [<query> <check>]
  [(`` (documentation: <query>
         (format "Parses the next " (~~ (template.text [<query>])) " input.")))
   (`` (documentation: <check>
         (format "Checks for a specific " (~~ (template.text [<query>])) " input.")))]

  [/.bit    /.this_bit]
  [/.nat    /.this_nat]
  [/.int    /.this_int]
  [/.rev    /.this_rev]
  [/.frac   /.this_frac]
  [/.text   /.this_text]
  [/.symbol /.this_symbol]
  )

(documentation: /.this
  "Ensures the given Code is the next input."
  [(this code)])

(with_template [<query> <check> <desc>]
  [(documentation: <query>
     (format "Parse a local " <desc> " (a " <desc> " that has no module prefix)."))
   (documentation: <check>
     (format "Checks for a specific local " <desc> " (a " <desc> " that has no module prefix)."))]

  [/.local /.this_local "local symbol"]
  )

(with_template [<name>]
  [(`` (documentation: <name>
         (format "Parses the contents of a " (~~ (template.text [<name>])) ".")))]

  [/.form]
  [/.variant]
  [/.tuple]
  )

(documentation: /.end
  "Verifies there are no more inputs.")

(documentation: /.end?
  "Checks whether there are no more inputs.")

(documentation: /.result
  "Executes a parser against a stream of code, and verifies all the inputs are consumed."
  [(result parser inputs)])

(documentation: /.locally
  "Runs parser against the given list of inputs."
  [(locally inputs parser)])

(documentation: /.not
  "Yields the next Code token if the parser fails."
  [(not expected_to_fail)])

(documentation: /.next
  "Yields the next Code token without consuming it from the input stream.")

(.def: .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [..Parser
             ..any

             ..bit
             ..this_bit
             ..nat
             ..this_nat
             ..int
             ..this_int
             ..rev
             ..this_rev
             ..frac
             ..this_frac
             ..text
             ..this_text
             ..symbol
             ..this_symbol
             
             ..this

             ..local
             ..this_local
             
             ..form
             ..tuple
             
             ..variant
             ..end
             ..end?
             ..result
             ..locally
             ..not
             ..next]
            []))
