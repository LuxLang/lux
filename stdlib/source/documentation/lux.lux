(.module:
  [library
   [lux
    [program (#+ program:)]
    ["$" documentation (#+ documentation:)]
    ["." debug]
    [control
     ["." io]]]]
  [\\library
   ["." /]]
  ["." / #_
   ["#." abstract]
   ["#." control]
   ["#." data]
   ... ["#." debug]
   ... ["#." documentation]
   ... ["#." locale]
   ... ["#." macro
   ...  ["#/." code]]
   ... ["#." math]
   ... ["#." meta]
   ... ["#." program]
   ... ["#." target]
   ... ["#." test]
   ... ["#." time]
   ... ... ["#." tool] ... TODO: Update & expand tests for this
   ... ["#." type]
   ... ["#." world]
   ... ["#." ffi]
   ... ["#." extension]
   ... ["#." target #_
   ...  <target>]
   ])

(documentation: /.:of
  "Generates the type corresponding to a given expression."
  [(let [my_num +123]
     (:of my_num))
   "=>"
   .Int]
  [(:of +123)
   "=>"
   .Int])

(.def: .public documentation
  (.List $.Module)
  ($.module /._
            ""
            [..:of]
            [/abstract.documentation
             /control.documentation
             /data.documentation]))

(program: inputs
  (io.io (debug.log! ($.documentation ..documentation))))
