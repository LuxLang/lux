... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except or and)
   ["_" theorem (.only)
    ["?" proposition]
    ["in" substitution]
    ["by" rule]
    ["[0]" induction]]
   [data
    ["[0]" sum]
    ["[0]" product]]]]
 [\\library
  ["[0]" /]]
 [//
  [data
   ["![0]" product]]])

(_.the .public identity
  (?.let [any]
    [it any]
    (?.= (/.identity it)
         it))
  (_.= (by.of by.definition (list in.any))
       in.any))

(_.the .public constant
  (?.let [any_constant any]
    [constant any_constant
     it any]
    (?.= (/.constant constant it)
         constant))
  (_.= (by.of by.definition (list in.any in.any))
       in.any))

(_.the .public of
  (?.let [any_premise any_conclusion]
    [premise any_premise
     it (-> any_premise any_conclusion)]
    (?.= (/.of premise it)
         (it premise)))
  (_.= (by.of by.definition (list in.any in.any))
       in.any))

(_.the .public composite
  (?.let [any_premise any_lemma any_conclusion]
    [before (-> any_premise any_lemma)
     after (-> any_lemma any_conclusion)
     it any_premise]
    (?.= ((/.composite after before) it)
         (after (before it))))
  (_.= (by.of (by.of by.definition (list in.any in.any))
              (list in.any))
       in.any))

(_.the .public left_identity
  (?.let [any_premise any_conclusion]
    [it (-> any_premise any_conclusion)]
    (?.= (/.composite /.identity it)
         it))
  (induction.function
    (_.= (all by.and
              (by.= ..composite)
              (by.= ..identity))
         in.any)))

(_.the .public right_identity
  (?.let [any_premise any_conclusion]
    [it (-> any_premise any_conclusion)]
    (?.= (/.composite it /.identity)
         it))
  (induction.function
    (_.= (all by.and
              (by.= ..composite)
              (by.of' in.any (list (by.= ..identity))))
         in.any)))

(_.the .public in_reverse
  (?.let [any_this any_that any_conclusion]
    [this any_this
     that any_that
     it (-> any_this any_that any_conclusion)]
    (?.= ((/.in_reverse it) that this)
         (it this that)))
  (_.= (by.of (by.of by.definition (list in.any))
              (list in.any in.any))
       in.any))

(_.the .public double_reversal
  (?.let [any_this any_that any_conclusion]
    [it (-> any_this any_that any_conclusion)]
    (?.= (/.in_reverse (/.in_reverse it))
         it))
  (<| induction.function
      induction.function
      (_.= (all by.and
                (by.= ..in_reverse)
                (by.= ..in_reverse))
           in.any)))

(_.the .public intermediation
  (?.let [premise conclusion]
    [_ premise
     of (-> premise conclusion)]
    (?.= (function (_ it) (of it))
         of))
  (induction.function
    (_.= (by.of in.any (list in.any))
         in.any)))

(_.the .public uncurried_is_inverse_of_curried
  (?.let [any_left any_right any]
    [it (-> [any_left any_right] any)]
    (?.= (/.uncurried (/.curried it))
         it))
  (_.= (all by.and
            (by.of by.definition (list (by.of by.definition (list in.any))))
            (in.function (in.it in.any)
              (function (_ @0)
                (by.when in.any
                  (function (_ ==)
                    (all by.and
                         (by.of (by.= @0) (list in.any in.any))
                         (by.of' in.any (list (by.= ==))))))))
            (by.= ..intermediation))
       in.any))

(_.the .public curried_is_inverse_of_uncurried
  (?.let [any_left any_right any]
    [it (-> any_left any_right any)]
    (?.= (/.curried (/.uncurried it))
         it))
  (_.= (all by.and
            (by.of by.definition (list (by.of by.definition (list in.any))))
            ((in.function (in.it in.any))
             (function (_ @0)
               (all by.and
                    ((in.function (in.and (in.it (by.= @0))
                                          (in.it in.any)))
                     (function (_ [@0 @1])
                       (all by.and
                            (by.of (by.= @0) (list (in.pair in.any in.any)))
                            (by.when in.any
                              ((_.with _.pair)
                               (function (_ [@left @right])
                                 (by.of' in.any (list (by.and (by.= @left)
                                                              (by.= @1))
                                                      (by.= @right)))))))))
                    (by.= ..intermediation))))
            (by.= ..intermediation))
       in.any))

(the (or by_choice)
  (Change in.Rule)
  (all by.and
       (by.of by.definition (list in.any in.any by_choice))
       (by.when in.any
         (function (_ ==)
           (by.of' in.any (list (by.= ==)))))))

(the any_or
  (_.= (or (by.of by.definition (list in.any)))
       in.any))

(_.the .public left_or
  (?.let [any_left any_right any]
    [left any_left
     right any_right
     on_left (-> any_left any)
     on_right (-> any_right any)]
    (?.= (/.or on_left on_right (sum.left left))
         (on_left left)))
  ..any_or)

(_.the .public right_or
  (?.let [any_left any_right any]
    [left any_left
     right any_right
     on_left (-> any_left any)
     on_right (-> any_right any)]
    (?.= (/.or on_left on_right (sum.right right))
         (on_right right)))
  ..any_or)

(_.the .public identity_by_or
  (?.let [any_left any_right]
    [it (Or any_left any_right)]
    (?.= (/.or sum.left sum.right it)
         it))
  (let [proof (function (_ =_it)
                (_.= (all by.and
                          (or (by.= =_it))
                          (by.of by.definition (list in.any)))
                     (by.= =_it)))]
    (induction.case proof proof)))

(_.the .public double_reversal_of_or
  (?.let [any_left any_right]
    [it (Or any_left any_right)]
    (?.= (/.or sum.right sum.left (/.or sum.right sum.left it))
         it))
  (let [proof (function (_ =_it)
                (_.= (all by.and
                          (or (all by.and
                                   (or (by.= =_it))
                                   (by.of by.definition (list in.any))))
                          (by.of by.definition (list in.any)))
                     (by.= =_it)))]
    (induction.case proof proof)))

(_.the .public and
  (?.let [any any_left any_right]
    [it any
     by_left (-> any any_left)
     by_right (-> any any_right)]
    (?.= [(by_left it) (by_right it)]
         (/.and by_left by_right it)))
  (_.= in.any
       (by.of by.definition (list in.any in.any in.any))))

(_.the .public identity_by_and
  (?.let [any_left any_right]
    [it [any_left any_right]]
    (?.= (/.and product.left product.right it)
         it))
  (induction.pair
   (function (_ @it)
     (_.= (all by.and
               (by.of' in.any (list in.any in.any (by.= @it)))
               (by.= (?.in_reverse ..and))
               (in.pair (by.= !product.left) (by.= !product.right)))
          (by.= @it)))))
