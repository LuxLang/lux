... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except or and)
   ["_" theorem (.only)
    ["?" proposition]
    ["in" rule]
    ["by" proof]
    ["[0]" induction]]
   [data
    ["[0]" sum]
    ["[0]" product]]]]
 [\\library
  ["[0]" /]]
 [//
  [data
   ["![0]" product]]])

(_.the .public identity
  (?.let [any]
    [it any]
    (?.= (/.identity it)
         it))
  (by.= (by.of by.definition (list in.as_is))
        in.as_is))

(_.the .public constant
  (?.let [any_constant any]
    [constant any_constant
     it any]
    (?.= (/.constant constant it)
         constant))
  (by.= (by.of by.definition (list in.as_is in.as_is))
        in.as_is))

(_.the .public of
  (?.let [any_premise any_conclusion]
    [premise any_premise
     it (-> any_premise any_conclusion)]
    (?.= (/.of premise it)
         (it premise)))
  (by.= (by.of by.definition (list in.as_is in.as_is))
        in.as_is))

(_.the .public composite
  (?.let [any_premise any_lemma any_conclusion]
    [before (-> any_premise any_lemma)
     after (-> any_lemma any_conclusion)
     it any_premise]
    (?.= ((/.composite after before) it)
         (after (before it))))
  (by.= (by.of (by.of by.definition (list in.as_is in.as_is))
               (list in.as_is))
        in.as_is))

(_.the .public left_identity
  (?.let [any_premise any_conclusion]
    [it (-> any_premise any_conclusion)]
    (?.= (/.composite /.identity it)
         it))
  (induction.function
    (by.= (all by.and
               (in.by ..composite)
               (in.by ..identity))
          in.as_is)))

(_.the .public right_identity
  (?.let [any_premise any_conclusion]
    [it (-> any_premise any_conclusion)]
    (?.= (/.composite it /.identity)
         it))
  (induction.function
    (by.= (all by.and
               (in.by ..composite)
               (by.of' in.as_is (list (in.by ..identity))))
          in.as_is)))

(_.the .public in_reverse
  (?.let [any_this any_that any_conclusion]
    [this any_this
     that any_that
     it (-> any_this any_that any_conclusion)]
    (?.= ((/.in_reverse it) that this)
         (it this that)))
  (by.= (by.of (by.of by.definition (list in.as_is))
               (list in.as_is in.as_is))
        in.as_is))

(_.the .public double_reversal
  (?.let [any_this any_that any_conclusion]
    [it (-> any_this any_that any_conclusion)]
    (?.= (/.in_reverse (/.in_reverse it))
         it))
  (<| induction.function
      induction.function
      (by.= (all by.and
                 (in.by ..in_reverse)
                 (in.by ..in_reverse))
            in.as_is)))

(_.the .public intermediation
  (?.let [premise conclusion]
    [_ premise
     of (-> premise conclusion)]
    (?.= (function (_ it) (of it))
         of))
  (induction.function
    (by.= (by.of in.as_is (list in.as_is))
          in.as_is)))

(_.the .public uncurried_is_inverse_of_curried
  (?.let [any_left any_right any]
    [it (-> [any_left any_right] any)]
    (?.= (/.uncurried (/.curried it))
         it))
  (by.= (all by.and
             (by.of by.definition (list (by.of by.definition (list in.as_is))))
             (in.function (in.it in.as_is)
               (function (_ @0)
                 (by.when in.as_is
                   (function (_ ==)
                     (all by.and
                          (by.of (in.by @0) (list in.as_is in.as_is))
                          (by.of' in.as_is (list (in.by ==))))))))
             (in.by ..intermediation))
        in.as_is))

(_.the .public curried_is_inverse_of_uncurried
  (?.let [any_left any_right any]
    [it (-> any_left any_right any)]
    (?.= (/.curried (/.uncurried it))
         it))
  (by.= (all by.and
             (by.of by.definition (list (by.of by.definition (list in.as_is))))
             ((in.function (in.it in.as_is))
              (function (_ @0)
                (all by.and
                     ((in.function (in.and (in.it (in.by @0))
                                           (in.it in.as_is)))
                      (function (_ [@0 @1])
                        (all by.and
                             (by.of (in.by @0) (list (in.pair in.as_is in.as_is)))
                             (by.when in.as_is
                               ((_.with _.pair)
                                (function (_ [@left @right])
                                  (by.of' in.as_is (list (by.and (in.by @left)
                                                                 (in.by @1))
                                                         (in.by @right)))))))))
                     (in.by ..intermediation))))
             (in.by ..intermediation))
        in.as_is))

(the (or by_choice)
  (Change in.Rule)
  (all by.and
       (by.of by.definition (list in.as_is in.as_is by_choice))
       (by.when in.as_is
         (function (_ ==)
           (by.of' in.as_is (list (in.by ==)))))))

(the any_or
  (by.= (or (by.of by.definition (list in.as_is)))
        in.as_is))

(_.the .public left_or
  (?.let [any_left any_right any]
    [left any_left
     right any_right
     on_left (-> any_left any)
     on_right (-> any_right any)]
    (?.= (/.or on_left on_right (sum.left left))
         (on_left left)))
  ..any_or)

(_.the .public right_or
  (?.let [any_left any_right any]
    [left any_left
     right any_right
     on_left (-> any_left any)
     on_right (-> any_right any)]
    (?.= (/.or on_left on_right (sum.right right))
         (on_right right)))
  ..any_or)

(_.the .public identity_by_or
  (?.let [any_left any_right]
    [it (Or any_left any_right)]
    (?.= (/.or sum.left sum.right it)
         it))
  (let [proof (function (_ =_it)
                (by.= (all by.and
                           (or (in.by =_it))
                           (by.of by.definition (list in.as_is)))
                      (in.by =_it)))]
    (induction.case proof proof)))

(_.the .public double_reversal_of_or
  (?.let [any_left any_right]
    [it (Or any_left any_right)]
    (?.= (/.or sum.right sum.left (/.or sum.right sum.left it))
         it))
  (let [proof (function (_ =_it)
                (by.= (all by.and
                           (or (all by.and
                                    (or (in.by =_it))
                                    (by.of by.definition (list in.as_is))))
                           (by.of by.definition (list in.as_is)))
                      (in.by =_it)))]
    (induction.case proof proof)))

(_.the .public and
  (?.let [any any_left any_right]
    [it any
     by_left (-> any any_left)
     by_right (-> any any_right)]
    (?.= [(by_left it) (by_right it)]
         (/.and by_left by_right it)))
  (by.= in.as_is
        (by.of by.definition (list in.as_is in.as_is in.as_is))))

(_.the .public identity_by_and
  (?.let [any_left any_right]
    [it [any_left any_right]]
    (?.= (/.and product.left product.right it)
         it))
  (induction.pair
   (function (_ @it)
     (by.= (all by.and
                (by.of' in.as_is (list in.as_is in.as_is (in.by @it)))
                (in.by (?.in_reverse ..and))
                (in.pair (in.by !product.left) (in.by !product.right)))
           (in.by @it)))))
