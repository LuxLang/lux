... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except by)
   ["_" theorem (.only)
    ["?" proposition]
    ["in" rule]
    ["by" proof]
    ["[0]" induction]]
   ["[0]" function]]]
 [\\library
  ["[0]" /]])

(_.the .public left
  (?.let [any_left any_right]
    [left any_left
     right any_right]
    (?.= (/.left [left right])
         left))
  (by.= (all by.and
             (by.of by.definition (list in.as_is))
             (by.when in.as_is
               (_.with _.left_of_pair in.by)))
        in.as_is))

(_.the .public right
  (?.let [any_left any_right]
    [left any_left
     right any_right]
    (?.= (/.right [left right])
         right))
  (by.= (all by.and
             (by.of by.definition (list in.as_is))
             (by.when in.as_is
               (_.with _.right_of_pair in.by)))
        in.as_is))

(_.the .public in_reverse
  (?.let [any_left any_right]
    [left any_left
     right any_right]
    (?.= (/.in_reverse [left right])
         [right left]))
  (by.= (all by.and
             (by.of by.definition (list in.as_is))
             (by.when in.as_is
               ((_.with _.pair)
                (function (_ [@left @right])
                  (in.pair (in.by @right) (in.by @left))))))
        in.as_is))

(_.the .public involution_of_in_reverse
  (?.let [any_left any_right]
    [left any_left
     right any_right]
    (?.= (/.in_reverse (/.in_reverse [left right]))
         [left right]))
  (let [by_reversal (by.when in.as_is
                      ((_.with _.pair)
                       (function (_ [@left @right])
                         (in.pair (in.by @right) (in.by @left)))))]
    (by.= (all by.and
               (by.of by.definition (list (all by.and
                                               (by.of by.definition (list in.as_is))
                                               by_reversal)))
               by_reversal)
          in.as_is)))

(_.the .public by
  (?.let [any_left any_right
          any_left' any_right']
    [left any_left
     right any_right
     by_left (-> any_left any_left')
     by_right (-> any_right any_right')]
    (?.= (/.by by_left by_right [left right])
         [(by_left left) (by_right right)]))
  (by.= (all by.and
             (by.of by.definition (list in.as_is in.as_is in.as_is))
             (by.when in.as_is
               ((_.with _.pair)
                (function (_ [@left @right])
                  (in.pair (by.of' in.as_is (list (in.by @left)))
                           (by.of' in.as_is (list (in.by @right))))))))
        in.as_is))

(_.the .public identity_by_by
  (?.let [any_left any_right]
    [left any_left
     right any_right]
    (?.= (/.by function.identity function.identity [left right])
         [left right]))
  (let [by_identity (by.of by.definition (list in.as_is))]
    (by.= (all by.and
               (in.by ..by)
               (in.pair by_identity by_identity))
          in.as_is)))
