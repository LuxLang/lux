... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except by)
   ["_" theorem (.only)
    ["?" proposition]
    ["!" proof]
    ["in" substitution]
    ["by" rule]]
   ["[0]" function]]]
 [\\library
  ["[0]" /]])

(_.the .public left
  (?.let [any_left any_right]
    [left any_left
     right any_right]
    (?.= (/.left [left right])
         left))
  (!.= (all by.and
            (by.of by.definition (list in.any))
            (by.when in.any
              (_.with (_.pair _.any _.any)
                (|>> /.left by.=))))
       in.any))

(_.the .public right
  (?.let [any_left any_right]
    [left any_left
     right any_right]
    (?.= (/.right [left right])
         right))
  (!.= (all by.and
            (by.of by.definition (list in.any))
            (by.when in.any
              (_.with (_.pair _.any _.any)
                (|>> /.right by.=))))
       in.any))

(_.the .public in_reverse
  (?.let [any_left any_right]
    [left any_left
     right any_right]
    (?.= (/.in_reverse [left right])
         [right left]))
  (!.= (all by.and
            (by.of by.definition (list in.any))
            (by.when in.any
              ((_.with (_.pair _.any _.any))
               (function (_ [@left @right])
                 (in.pair (by.= @right) (by.= @left))))))
       in.any))

(_.the .public involution_of_in_reverse
  (?.let [any_left any_right]
    [left any_left
     right any_right]
    (?.= (/.in_reverse (/.in_reverse [left right]))
         [left right]))
  (let [by_reversal (by.when in.any
                      ((_.with (_.pair _.any _.any))
                       (function (_ [@left @right])
                         (in.pair (by.= @right) (by.= @left)))))]
    (!.= (all by.and
              (by.of by.definition (list (all by.and
                                              (by.of by.definition (list in.any))
                                              by_reversal)))
              by_reversal)
         in.any)))

(_.the .public by
  (?.let [any_left any_right
          any_left' any_right']
    [left any_left
     right any_right
     by_left (-> any_left any_left')
     by_right (-> any_right any_right')]
    (?.= (/.by by_left by_right [left right])
         [(by_left left) (by_right right)]))
  (!.= (all by.and
            (by.of by.definition (list in.any in.any in.any))
            (by.when in.any
              ((_.with (_.pair _.any _.any))
               (function (_ [@left @right])
                 (in.pair (by.of' in.any (list (by.= @left)))
                          (by.of' in.any (list (by.= @right))))))))
       in.any))

(_.the .public identity_by_by
  (?.let [any_left any_right]
    [left any_left
     right any_right]
    (?.= (/.by function.identity function.identity [left right])
         [left right]))
  (let [by_identity (by.of by.definition (list in.any))]
    (!.= (all by.and
              (by.= ..by)
              (in.pair by_identity by_identity))
         in.any)))
