... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except by)
   ["_" theorem (.only)
    ["?" proposition]
    ["!" proof]
    ["in" substitution]
    ["by" rule]]]]
 [\\library
  ["[0]" /]]
 [///
  [logic
   ["[0]" bit]]])

(_.the .public else|none
  (?.let [any]
    [it any]
    (?.= (/.else it {.:None})
         it))
  (!.= (by.when in.any
         (function (_ =_none)
           in.any))
       in.any))

(_.the .public else|some
  (?.let [any]
    [it any
     else any]
    (?.= (/.else else {.:Some it})
         it))
  (!.= (by.when in.any
         (function (_ =_some)
           (by.= =_some)))
       in.any))

(_.the .public as_list|none
  (?.= (/.as_list {.:None})
       (.list))
  (!.= (all by.and
            (by.of (by.definition) (list in.any))
            (by.when in.any
              (function (_ =_none)
                in.any)))
       in.any))

(_.the .public as_list|some
  (?.let [any]
    [it any]
    (?.= (/.as_list {.:Some it})
         (.list it)))
  (!.= (all by.and
            (by.of by.definition (list in.any))
            (by.when in.any
              (function (_ =_some)
                (in.list (list (by.= =_some))))))
       in.any))

(_.the .public whether|false
  (?.let [any]
    [it (Maybe any)]
    (?.= (Maybe any)
         (/.whether .false it)
         {.:None}))
  (!.= (by.when by.definition
         (function (_ =_some)
           in.any))
       in.any))

(_.the .public whether|true
  (?.let [any]
    [it (Maybe any)]
    (?.= (Maybe any)
         (/.whether .true it)
         it))
  (!.= (by.= bit.if_true)
       in.any))

(_.the .public or|none
  (?.let [any]
    [it (Maybe any)]
    (?.= (Maybe any)
         (/.or {.:None} it)
         it))
  (!.= (by.when in.any
         (function (_ =_none)
           in.any))
       in.any))

(_.the .public or|some
  (?.let [any]
    [it any
     else (Maybe any)]
    (?.= (Maybe any)
         (/.or {.:Some it} else)
         {.:Some it}))
  (!.= (by.when in.any
         (function (_ =_some)
           (in.right_case (by.= =_some))))
       in.any))

(_.the .public if|none
  (?.let [any]
    [then any
     else any]
    (?.= (/.if [it {.:None}]
               then
               else)
         else))
  (!.= (by.when in.any
         (function (_ =_none)
           in.any))
       in.any))

(_.the .public if|some
  (?.let [any any_premise]
    [some any_premise
     then (-> any_premise any)
     else any]
    (?.= (/.if [it {.:Some some}]
               (then it)
               else)
         (then some)))
  (!.= (by.when in.any
         (function (_ =_some)
           (by.of' in.any (list (by.= =_some)))))
       in.any))
