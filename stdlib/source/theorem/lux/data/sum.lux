... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except by)
   ["_" theorem (.only)
    ["?" proposition]
    ["in" rule]
    ["by" proof]
    ["[0]" induction]]
   ["[0]" function]]]
 [\\library
  ["[0]" /]])

(the (by case by_choice)
  (-> (Change in.Rule)
      (Change in.Rule))
  (all by.and
       (by.of by.definition (list in.as_is in.as_is by_choice))
       (by.when in.as_is
         (function (_ ==)
           (case (by.of' in.as_is (list (in.by ==))))))))

(the (any_by case)
  (-> (Change in.Rule)
      by.Proof)
  (by.= (all by.and
             (by.of by.definition
                    (list in.as_is
                          in.as_is
                          (by.of by.definition (list in.as_is))))
             (by.when in.as_is
               (function (_ ==)
                 (case (by.of' in.as_is (list (in.by ==)))))))
        (by.of by.definition (list in.as_is))))

(_.the .public left_by
  (?.let [any_left any_right any]
    [left any_left
     right any_right
     on_left (-> any_left any)
     on_right (-> any_right any)]
    (?.= (/.by on_left on_right (/.left left))
         (/.left (on_left left))))
  (any_by in.left_case))

(_.the .public right_by
  (?.let [any_left any_right any]
    [left any_left
     right any_right
     on_left (-> any_left any)
     on_right (-> any_right any)]
    (?.= (/.by on_left on_right (/.right right))
         (/.right (on_right right))))
  (any_by in.right_case))

(_.the .public identity_by_by
  (?.let [any_left any_right]
    [it (Or any_left any_right)]
    (?.= (/.by function.identity function.identity it)
         it))
  (let [proof (is (-> (Change in.Rule)
                      induction.Case)
                  (function (_ case
                               =_it)
                    (by.= (all by.and
                               (by case (in.by =_it))
                               (case (by.of by.definition (list in.as_is))))
                          (in.by =_it))))]
    (induction.case (proof in.left_case)
                    (proof in.right_case))))
