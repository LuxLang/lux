... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except all or and not)
   ["_" theorem (.only)
    ["?" proposition]
    ["in" substitution]
    ["by" rule]
    ["[0]" induction]]
   [logic
    ["[0]" bit
     ["[1]" \\theorem]]]
   [macro
    ["[0]" template]]]]
 ["/" \\library])

(_.the .public none
  (?.let [any]
    [it any]
    (?.= (/.none it)
         .false))
  (_.= (.all by.and
             (by.of' by.definition (list in.any))
             (by.of by.definition (list in.any in.any)))
       by.definition))

(the by_true
  (.all by.and
        by.definition
        (by.of by.definition (list by.definition))
        (by.when in.any
          (function (_ _)
            in.any))))

(_.the .public all
  (?.let [any]
    [it any]
    (?.= (/.all it)
         .true))
  (_.= (.all by.and
             (by.of' by.definition (list in.any))
             (by.of by.definition (list in.any in.any)))
       ..by_true))

(_.the .public double_negation
  (?.let [any]
    [it (/.Predicate any)]
    (?.= (/.not (/.not it))
         it))
  (induction.function
    (_.= (.all by.and
               (by.of (by.of by.definition (list (by.of by.definition (list in.any))))
                      (list in.any))
               (by.of' in.any (list (by.of in.any (list in.any))))
               (by.= bit.double_negation))
         in.any)))

(_.the .public not_none
  (?.let [any]
    [it (/.Predicate any)]
    (?.= (/.not /.none)
         /.all))
  (induction.function
    (_.= (.all by.and
               (by.of by.definition (list in.any in.any))
               (by.of' in.any (list (by.= ..none)))
               (by.= bit.true_is_not_false))
         (by.= ..all))))

(_.the .public not_all
  (?.let [any]
    [it (/.Predicate any)]
    (?.= (/.not /.all)
         /.none))
  (induction.function
    (_.= (.all by.and
               (by.of by.definition (list in.any in.any))
               (by.of' in.any (list (by.= ..all)))
               (by.= bit.false_is_not_true))
         (by.= ..none))))

(_.the .public or_none
  (?.let [any]
    [it (/.Predicate any)]
    (?.= (/.or /.none it)
         it))
  (induction.function
    (_.= (.all by.and
               (by.of (by.of by.definition (list in.any in.any))
                      (list in.any))
               (bit.or (by.= ..none) in.any)
               (by.= bit.identity_of_or))
         in.any)))

(_.the .public and_all
  (?.let [any]
    [it (/.Predicate any)]
    (?.= (/.and /.all it)
         it))
  (induction.function
    (_.= (.all by.and
               (by.of (by.of by.definition (list in.any in.any))
                      (list in.any))
               (bit.and (by.= ..all) in.any)
               (by.= bit.identity_of_and))
         in.any)))

(template.the .public (< ,super ,sub)
  [(?.let [it any]
     (?.if (list (?.= (,sub it)
                      .true))
           (?.= (,super it)
                .true)))])

(_.the .public (<_or_left =_true)
  (?.let [any]
    [left (/.Predicate any)
     right (/.Predicate any)]
    (..< (/.or left right) left))
  (_.= (.all by.and
             (by.of by.definition (list in.any in.any in.any))
             (bit.or (by.= =_true) in.any)
             (by.= bit.annihilation_of_or))
       in.any))

(_.the .public (<_or_right =_true)
  (?.let [any]
    [left (/.Predicate any)
     right (/.Predicate any)]
    (..< (/.or left right) right))
  (_.= (.all by.and
             (by.of by.definition (list in.any in.any in.any))
             (bit.or in.any (by.= =_true))
             (by.= bit.commutativity_of_or)
             (by.= bit.annihilation_of_or))
       in.any))

(_.the .public (<_and_left =_left)
  (?.let [any]
    [left (/.Predicate any)
     right (/.Predicate any)]
    (..< left (/.and left right)))
  ((_.let [=_left
           (.all by.and
                 (_.= (by.of by.definition (list in.any in.any in.any))
                      ..by_true)
                 (_.then _.qed))])
   (function (_ [=_left =_right])
     (_.= (by.= =_left)
          ..by_true))))

(_.the .public (<_and_right =_right)
  (?.let [any]
    [left (/.Predicate any)
     right (/.Predicate any)]
    (..< right (/.and left right)))
  ((_.let [=_right
           (.all by.and
                 (_.= (by.of by.definition (list in.any in.any in.any))
                      ..by_true)
                 (_.then _.qed))])
   (function (_ [=_left =_right])
     (_.= (by.= =_right)
          ..by_true))))

(_.the .public difference_of_none
  (?.let [any]
    [it (/.Predicate any)]
    (?.= (/.- /.none it)
         it))
  (induction.function
    (_.= (.all by.and
               (by.of by.definition (list in.any in.any in.any))
               (bit.and in.any
                        (.all by.and
                              (by.of' in.any (list (by.= ..none)))
                              (by.= bit.true_is_not_false)))
               (by.= bit.commutativity_of_and)
               (by.= bit.identity_of_and))
         in.any)))

(_.the .public difference_of_all
  (?.let [any]
    [it (/.Predicate any)]
    (?.= (/.- /.all it)
         /.none))
  (induction.function
    (_.= (.all by.and
               (by.of by.definition (list in.any in.any in.any))
               (bit.and in.any
                        (.all by.and
                              (by.of' in.any (list (by.= ..all)))
                              (by.= bit.false_is_not_true)))
               (by.= bit.commutativity_of_and)
               (by.= bit.annihilation_of_and))
         (by.= ..none))))

(_.the .public difference_of_self
  (?.let [any]
    [it (/.Predicate any)]
    (?.= (/.- it it)
         /.none))
  (induction.function
    (_.= (.all by.and
               (by.of by.definition (list in.any in.any in.any))
               (by.= bit.complementation_of_and))
         (by.= ..none))))
