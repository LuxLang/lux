... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["_" theorem (.only)
    ["?" proposition]
    ["!" proof]
    ["in" substitution]
    ["by" rule]
    ["[0]" induction]]
   [abstract
    ["[0]" functor
     ["//[1]" \\theorem]]]]]
 ["/" \\library])

(_.the .public write
  (?.let [any]
    [it any]
    (?.= (/.write it)
         [it []]))
  (!.= (by.of by.definition (list in.any))
       in.any))

(_.the .public identity_of_functor
  (//functor.identity /.functor)
  (let [by_identity (by.of by.definition (list in.any))]
    (induction.function
      (!.= (all by.and
                (by.of by.definition (list in.any in.any))
                (by.when in.any
                  (function (_ ==)
                    (all by.and
                         (in.pair in.any by_identity)
                         (by.= ==)))))
           by_identity))))

(_.the .public composition_of_functor
  (//functor.composition /.functor)
  (let [by_composite (by.of by.definition (list in.any in.any in.any))
        by_functor (by.of by.definition (list in.any in.any))]
    (induction.function
      (!.= (all by.and
                by_composite
                (all by.and
                     by_functor
                     (by.when (all by.and
                                   by_functor
                                   (by.when in.any
                                     (function (_ ==)
                                       in.any)))
                       ((_.with _.pair)
                        (function (_ [=_left =_right])
                          (in.pair (by.= =_left)
                                   (by.of' in.any (list (by.= =_right)))))))))
           (all by.and
                by_functor
                (by.when in.any
                  (function (_ _)
                    (in.pair in.any by_composite))))))))

(the .public functor
  (?.model (//functor.system /.functor)
           (list ..identity_of_functor
                 ..composition_of_functor)))
