... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except local)
   ["_" theorem (.only)
    ["?" proposition]
    ["!" proof]
    ["in" substitution]
    ["by" rule]
    ["[0]" induction]]
   [abstract
    ["[0]" functor
     ["//[1]" \\theorem]]]
   ["[0]" function
    ["[1]" /]
    ["//[1]" \\theorem]]]]
 ["/" \\library])

(the by_alias
  (all by.and
       by.definition
       by.definition))

(_.the .public value
  (?.let [any_context any]
    [context any_context
     it (/.Scope any_context any)]
    (?.= (/.value context it)
         (it context)))
  (!.= (by.of ..by_alias (list in.any in.any))
       in.any))

(_.the .public context
  (?.let [any_context]
    [context any_context]
    (?.= (/.value context /.context)
         context))
  (!.= (all by.and
            (by.of ..by_alias (list in.any in.any))
            (by.of ..by_alias (list in.any)))
       in.any))

(the (by_local scope)
  (Change in.Rule)
  (let [by_composite (all by.and
                          by.definition
                          (by.of by.definition (list in.any)))]
    (all by.and
         (by.of by_composite (list in.any scope))
         (by.of by.definition (list in.any in.any)))))

(_.the .public local
  (?.let [any_context any]
    [change (Change any_context)
     context any_context
     it (/.Scope any_context any)]
    (?.= (/.value context (/.local change it))
         (/.value (change context) it)))
  (!.= (all by.and
            (by.of ..by_alias (list in.any in.any))
            (by.of (..by_local in.any) (list in.any)))
       (by.of ..by_alias (list in.any in.any))))

(_.the .public identity_of_local
  (?.let [any_context any]
    [it (/.Scope any_context any)]
    (?.= (/.local function.identity it)
         it))
  (induction.function
    (!.= (all by.and
              (by.of (..by_local in.any) (list in.any))
              (by.of' in.any (list (by.= //function.identity))))
         in.any)))

(_.the .public composition_of_local
  (?.let [any_context any]
    [before (Change any_context)
     after (Change any_context)
     it (/.Scope any_context any)]
    (?.= (/.local before (/.local after it))
         (/.local (function.composite after before) it)))
  (induction.function
    (!.= (all by.and
              (by.of (..by_local (..by_local in.any)) (list in.any))
              (by.of in.any (list in.any)))
         (all by.and
              (by.of (..by_local in.any) (list in.any))
              (by.of' in.any (list (by.of by.definition (list in.any in.any in.any))))))))

(_.the .public identity_of_functor
  (//functor.identity /.functor)
  (induction.function
    (induction.function
      (!.= (all by.and
                (by.of (by.of (by.of ..by_alias (list in.any)) (list in.any))
                       (list in.any))
                (by.= //function.identity))
           (by.of' (by.= //function.identity) (list in.any))))))

(_.the .public composition_of_functor
  (//functor.composition /.functor)
  (let [by_functor (all by.and
                        (by.of' (by.of ..by_alias (list in.any in.any))
                                (list in.any))
                        (by.of in.any (list in.any)))]
    (induction.function
      (induction.function
        (!.= (all by.and
                  (by.of' (by.of by.definition (list in.any in.any))
                          (list in.any in.any))
                  (by.of' (by.of in.any (list in.any))
                          (list in.any))
                  by_functor
                  (by.of' in.any (list by_functor)))
             (all by.and
                  by_functor
                  (by.of by.definition (list in.any in.any in.any))))))))

(the .public functor
  (?.model (//functor.system /.functor)
           (list ..identity_of_functor
                 ..composition_of_functor)))
