... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except local as)
   ["_" theorem (.only)
    ["?" proposition]
    ["in" substitution]
    ["by" rule]
    ["[0]" induction]]
   [abstract
    ["[0]" functor
     ["//[1]" \\theorem]]]
   ["[0]" function
    ["[1]" /]
    ["//[1]" \\theorem]]]]
 ["/" \\library])

(_.the .public value
  (?.let [any_state any]
    [state any_state
     it (/.State any_state any)]
    (?.= (/.value state it)
         (it state)))
  (_.= (by.of by.definition (list in.any in.any))
       in.any))

(_.the .public state
  (?.let [any_state any]
    [state any_state
     it (/.State any_state any)]
    (?.= (/.value state /.state)
         [state state]))
  (_.= (all by.and
            (by.of by.definition (list in.any in.any))
            (by.of by.definition (list in.any)))
       in.any))

(_.the .public as
  (?.let [any_state any]
    [state any_state
     it (/.State any_state any)
     as (-> any_state any)]
    (?.= (/.value state (/.as as))
         [state (as state)]))
  (_.= (all by.and
            (by.of by.definition (list in.any in.any))
            (by.of by.definition (list in.any in.any)))
       in.any))

(_.the .public identity_of_as
  (?.= (/.as function.identity)
       /.state)
  (induction.function
    (_.= (all by.and
              (by.of by.definition (list in.any in.any))
              (in.pair in.any (by.= //function.identity)))
         (by.of by.definition (list in.any)))))

(_.the .public put
  (?.let [any_state any]
    [old_state any_state
     new_state any_state]
    (?.= (/.value old_state (/.put new_state))
         [new_state []]))
  (_.= (all by.and
            (by.of by.definition (list in.any in.any))
            (by.of by.definition (list in.any in.any)))
       in.any))

(_.the .public update
  (?.let [any_state any]
    [state any_state
     change (Change any_state)]
    (?.= (/.value state (/.update change))
         [(change state) []]))
  (_.= (all by.and
            (by.of by.definition (list in.any in.any))
            (by.of by.definition (list in.any in.any)))
       in.any))

(_.the .public identity_of_functor
  (//functor.identity /.functor)
  (<| induction.function
      induction.function
      (_.= (all by.and
                (by.of (by.of by.definition (list in.any in.any)) (list in.any))
                (by.when in.any
                  (function (_ =_pair)
                    (all by.and
                         (in.pair in.any (by.= //function.identity))
                         (by.= =_pair)))))
           (by.of' (by.= //function.identity) (list in.any)))))

(_.the .public composition_of_functor
  (//functor.composition /.functor)
  (<| induction.function
      induction.function
      (let [by_composite (by.of by.definition (list in.any in.any in.any))
            by_functor (by.of (by.of by.definition (list in.any in.any))
                              (list in.any))]
        (_.= (all by.and
                  (by.of' by_composite (list in.any))
                  by_functor
                  (by.when (all by.and
                                by_functor
                                (by.when in.any
                                  (function (_ =_pair)
                                    in.any)))
                    ((_.with _.pair)
                     (function (_ [=_left =_right])
                       (in.pair (by.= =_left)
                                (by.of' in.any (list (by.= =_right))))))))
             (all by.and
                  by_functor
                  (by.when in.any
                    (function (_ =_pair)
                      (in.pair in.any by_composite))))))))

(the .public functor
  (?.model (//functor.system /.functor)
           (list ..identity_of_functor
                 ..composition_of_functor)))
