... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except false true not)
   ["_" theorem (.only)
    ["?" proposition]
    ["!" proof]
    ["in" substitution]
    ["by" rule]
    ["[0]" induction]]
   [macro
    ["[0]" template]]]]
 ["/" \\library])

(template.the (|type|)
  [(.I64 .Any)])

(template.the .public (all_false)
  [(.i64 +0)])

(template.the .public (all_true)
  [(.i64 -1)])

(template.the (identity ,x ,1)
  [(?.let [it (|type|)]
     (?.= (|type|)
          (,x ,1 it)
          it))])

(template.the (idempotence ,x)
  [(?.let [it (|type|)]
     (?.= (|type|)
          (,x it it)
          it))])

(template.the (commutativity ,x)
  [(?.let [this (|type|)
           that (|type|)]
     (?.= (|type|)
          (,x this that)
          (,x that this)))])

(template.the (associativity ,x)
  [(?.let [this (|type|)
           that (|type|)
           else (|type|)]
     (?.= (|type|)
          (,x this (,x that else))
          (,x (,x this that) else)))])

(template.the (annihilation ,x ,0)
  [(?.let [it (|type|)]
     (?.= (|type|)
          (,x ,0 it)
          ,0))])

(template.the (the_monoid_by_extension ,x_extension ,1_extension
                                       ,identity_extension
                                       ,commutativity_extension
                                       ,associativity_extension)
  [(these (_.the .public ,identity_extension
            (identity ,x_extension ,1_extension)
            !.axiom)

          (_.the .public ,commutativity_extension
            (commutativity ,x_extension)
            !.axiom)

          (_.the .public ,associativity_extension
            (associativity ,x_extension)
            !.axiom))])

(template.the (the_group_by_extension ,x_extension ,1_extension ,0_extension
                                      ,identity_extension
                                      ,idempotence_extension
                                      ,commutativity_extension
                                      ,associativity_extension
                                      ,annihilation_extension)
  [(these (the_monoid_by_extension ,x_extension ,1_extension
                                   ,identity_extension
                                   ,commutativity_extension
                                   ,associativity_extension)

          (_.the .public ,idempotence_extension
            (idempotence ,x_extension)
            !.axiom)

          (_.the .public ,annihilation_extension
            (annihilation ,x_extension ,0_extension)
            !.axiom))])

(template.the (the_monoid_by_definition ,x_definition ,1_definition
                                        ,identity_extension ,identity_definition
                                        ,commutativity_extension ,commutativity_definition
                                        ,associativity_extension ,associativity_definition)
  [(these (_.the .public ,identity_definition
            (identity ,x_definition ,1_definition)
            (!.= (all by.and
                      (by.of by.definition (list by.definition in.any))
                      (by.= ,identity_extension))
                 in.any))

          (_.the .public ,commutativity_definition
            (commutativity ,x_definition)
            (!.= (all by.and
                      (by.of by.definition (list in.any in.any))
                      (by.= ,commutativity_extension))
                 (by.of by.definition (list in.any in.any))))

          (_.the .public ,associativity_definition
            (associativity ,x_definition)
            (!.= (all by.and
                      (by.of by.definition (list in.any (by.of by.definition (list in.any in.any))))
                      (by.= ,associativity_extension))
                 (by.of by.definition (list (by.of by.definition (list in.any in.any)) in.any)))))])

(template.the (the_group_by_definition ,x_definition ,1_definition ,0_definition
                                       ,identity_extension ,identity_definition
                                       ,idempotence_extension ,idempotence_definition
                                       ,commutativity_extension ,commutativity_definition
                                       ,associativity_extension ,associativity_definition
                                       ,annihilation_extension ,annihilation_definition)
  [(these (the_monoid_by_definition ,x_definition ,1_definition
                                    ,identity_extension ,identity_definition
                                    ,commutativity_extension ,commutativity_definition
                                    ,associativity_extension ,associativity_definition)

          (_.the .public ,idempotence_definition
            (idempotence ,x_definition)
            (!.= (all by.and
                      (by.of by.definition (list in.any in.any))
                      (by.= ,idempotence_extension))
                 in.any))

          (_.the .public ,annihilation_definition
            (annihilation ,x_definition ,0_definition)
            (!.= (all by.and
                      (by.of by.definition (list by.definition in.any))
                      (by.= ,annihilation_extension))
                 by.definition)))])

(template.the (the_monoid ,x_extension ,x_definition
                          ,1_extension ,1_definition
                          ,identity_extension ,identity_definition
                          ,commutativity_extension ,commutativity_definition
                          ,associativity_extension ,associativity_definition)
  [(these (the_monoid_by_extension ,x_extension ,1_extension
                                   ,identity_extension
                                   ,commutativity_extension
                                   ,associativity_extension)
          (the_monoid_by_definition ,x_definition ,1_definition
                                    ,identity_extension ,identity_definition
                                    ,commutativity_extension ,commutativity_definition
                                    ,associativity_extension ,associativity_definition))])

(template.the (the_group ,x_extension ,x_definition
                         ,1_extension ,1_definition
                         ,0_extension ,0_definition
                         ,identity_extension ,identity_definition
                         ,idempotence_extension ,idempotence_definition
                         ,commutativity_extension ,commutativity_definition
                         ,associativity_extension ,associativity_definition
                         ,annihilation_extension ,annihilation_definition)
  [(these (the_group_by_extension ,x_extension ,1_extension ,0_extension
                                  ,identity_extension
                                  ,idempotence_extension
                                  ,commutativity_extension
                                  ,associativity_extension
                                  ,annihilation_extension)
          (the_group_by_definition ,x_definition ,1_definition ,0_definition
                                   ,identity_extension ,identity_definition
                                   ,idempotence_extension ,idempotence_definition
                                   ,commutativity_extension ,commutativity_definition
                                   ,associativity_extension ,associativity_definition
                                   ,annihilation_extension ,annihilation_definition))])

(the_group .i64_or# /.or
           (all_false) /.false
           (all_true) /.true
           identity_of_i64_or identity_of_or
           idempotence_of_i64_or idempotence_of_or
           commutativity_of_i64_or commutativity_of_or
           associativity_of_i64_or associativity_of_or
           annihilation_of_i64_or annihilation_of_or)

(the_group .i64_and# /.and
           (all_true) /.true
           (all_false) /.false
           identity_of_i64_and identity_of_and
           idempotence_of_i64_and idempotence_of_and
           commutativity_of_i64_and commutativity_of_and
           associativity_of_i64_and associativity_of_and
           annihilation_of_i64_and annihilation_of_and)

(these (the_monoid .i64_xor# /.xor
                   (all_false) /.false
                   identity_of_i64_xor identity_of_xor
                   commutativity_of_i64_xor commutativity_of_xor
                   associativity_of_i64_xor associativity_of_xor)

       (_.the .public non_idempotence_of_i64_xor
         (?.let [it (|type|)]
           (?.= (|type|)
                (.i64_xor# it it)
                (all_false)))
         !.axiom)

       (_.the .public non_idempotence_of_xor
         (?.let [it (|type|)]
           (?.= (|type|)
                (/.xor it it)
                /.false))
         (!.= (all by.and
                   (by.of by.definition (list in.any in.any))
                   (by.= non_idempotence_of_i64_xor))
              by.definition))

       (_.the .public complementation_of_xor
         (?.let [it (|type|)]
           (?.= (|type|)
                (/.xor it (/.not it))
                /.true))
         (!.= (all by.and
                   (by.of' in.any (list in.any (all by.and
                                                    (by.of' by.definition (list in.any))
                                                    (by.= ..commutativity_of_xor))))
                   (by.= ..associativity_of_xor)
                   (by.of' in.any (list (by.= ..non_idempotence_of_xor) in.any))
                   (by.= ..identity_of_xor))
              in.any)))

(template.the (reflexivity ,x ,true)
  [(?.let [it (|type|)]
     (?.= .Bit
          (,x it it)
          ,true))])

(template.the (symmetry ,x)
  [(?.let [this (|type|)
           that (|type|)]
     (?.= .Bit
          (,x this that)
          (,x that this)))])

(these (_.the .public reflexivity_of_i64_=
         (reflexivity .i64_=# 1b)
         !.axiom)

       (_.the .public symmetry_of_i64_=
         (symmetry .i64_=#)
         !.axiom))

(these (_.the .public reflexivity_of_=
         (reflexivity /.= .true)
         (!.= (all by.and
                   (by.of by.definition (list in.any in.any))
                   (by.= reflexivity_of_i64_=))
              (all by.and
                   by.definition
                   (by.of by.definition (list by.definition))
                   (by.when in.any
                     (function (_ _)
                       in.any)))))

       (_.the .public symmetry_of_=
         (symmetry /.=)
         (!.= (all by.and
                   (by.of by.definition (list in.any in.any))
                   (by.= symmetry_of_i64_=))
              (by.of by.definition (list in.any in.any)))))

(_.the .public false
  (?.= (|type|)
       (/.not /.true)
       /.false)
  (!.= (all by.and
            (by.of' by.definition (list in.any))
            (by.= ..non_idempotence_of_xor))
       in.any))

(_.the .public true
  (?.= (|type|)
       (/.not /.false)
       /.true)
  (!.= (all by.and
            (by.of' by.definition (list in.any))
            (by.= ..commutativity_of_xor)
            (by.= ..identity_of_xor))
       in.any))

(_.the .public double_negation
  (?.let [it (|type|)]
    (?.= (|type|)
         (/.not (/.not it))
         it))
  (!.= (all by.and
            (by.of' by.definition (list (by.of' by.definition (list in.any))))
            (by.= ..associativity_of_xor)
            (by.of' in.any (list (by.= ..non_idempotence_of_xor) in.any))
            (by.= ..identity_of_xor))
       in.any))
