... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["_" theorem (.only)
    ["?" proposition]
    ["!" proof]
    ["in" substitution]
    ["by" rule]]
   [macro
    ["[0]" template]]]]
 ["/" \\library])

(template.the (|type|)
  [.Integer])

(template.the (identity ,x ,1)
  [(?.let [it (|type|)]
     (?.= (|type|)
          (,x ,1 it)
          it))])

(template.the (commutativity ,x)
  [(?.let [this (|type|)
           that (|type|)]
     (?.= (|type|)
          (,x this that)
          (,x that this)))])

(template.the (associativity ,x)
  [(?.let [this (|type|)
           that (|type|)
           else (|type|)]
     (?.= (|type|)
          (,x this (,x that else))
          (,x (,x this that) else)))])

(template.the (the_identity ,axiom ,x_extension ,1_extension
                            ,theorem ,x_definition ,1_definition)
  [(_.the .public ,axiom
     (identity ,x_extension ,1_extension)
     !.axiom)

   (_.the .public ,theorem
     (identity ,x_definition ,1_definition)
     (!.= (all by.and
               (by.of by.definition (list by.definition in.any))
               (by.= ,axiom))
          in.any))])

(template.the (the_commutativity ,axiom ,x_extension
                                 ,theorem ,x_definition)
  [(_.the .public ,axiom
     (commutativity ,x_extension)
     !.axiom)

   (_.the .public ,theorem
     (commutativity ,x_definition)
     (!.= (all by.and
               (by.of by.definition (list in.any in.any))
               (by.= ,axiom))
          (by.of by.definition (list in.any in.any))))])

(template.the (the_associativity ,axiom ,x_extension
                                 ,theorem ,x_definition)
  [(_.the .public ,axiom
     (associativity ,x_extension)
     !.axiom)

   (_.the .public ,theorem
     (associativity ,x_definition)
     (!.= (all by.and
               (by.of by.definition (list in.any (by.of by.definition (list in.any in.any))))
               (by.= ,axiom))
          (by.of by.definition (list (by.of by.definition (list in.any in.any)) in.any))))])

... https://en.wikipedia.org/wiki/Addition#Properties
(these (the_identity identity_of_i64_+ .i64_+# +0
                     identity_of_+ /.+ /.zero)

       (the_commutativity commutativity_of_i64_+ .i64_+#
                          commutativity_of_+ /.+)

       (the_associativity associativity_of_i64_+ .i64_+#
                          associativity_of_+ /.+))

... https://en.wikipedia.org/wiki/Multiplication#Properties
(these (the_identity identity_of_int_x .int_x# +1
                     identity_of_x /.x /.positive_one)

       (the_commutativity commutativity_of_int_x .int_x#
                          commutativity_of_x /.x)

       (the_associativity associativity_of_int_x .int_x#
                          associativity_of_x /.x))

(these (_.the .public annihilation_of_int_x
         (?.let [it (|type|)]
           (?.= (|type|)
                (.int_x# +0 it)
                +0))
         !.axiom)

       (_.the .public annihilation_of_x
         (?.let [it (|type|)]
           (?.= (|type|)
                (/.x /.zero it)
                /.zero))
         (!.= (all by.and
                   (by.of by.definition (list by.definition in.any))
                   (by.= ..annihilation_of_int_x))
              by.definition)))

(template.the .public (- ,it)
  [(.i64_-# ,it +0)])

(these (_.the .public opposite_by_int_x
         (?.let [it (|type|)]
           (?.= (|type|)
                (- it)
                (.int_x# -1 it)))
         !.axiom)

       (_.the .public opposite_by_x
         (?.let [it (|type|)]
           (?.= (|type|)
                (/.opposite it)
                (/.x /.negative_one it)))
         (!.= (all by.and
                   (by.of by.definition (list in.any))
                   (by.of by.definition (list in.any by.definition))
                   (by.= ..opposite_by_int_x))
              (by.of by.definition (list by.definition in.any)))))

(these (_.the .public distributivity_of_int_x
         (?.let [this (|type|)
                 that (|type|)
                 else (|type|)]
           (?.= (|type|)
                (.i64_+# (.int_x# else this) (.int_x# else that))
                (.int_x# else (.i64_+# this that))))
         !.axiom)

       (_.the .public distributivity_of_x
         (?.let [this (|type|)
                 that (|type|)
                 else (|type|)]
           (?.= (|type|)
                (/.+ (/.x else this) (/.x else that))
                (/.x else (/.+ this that))))
         (let [+|x (function (_ this that)
                     (by.of by.definition (list this that)))]
           (!.= (+|x (+|x in.any in.any) (+|x in.any in.any))
                (all by.and
                     (+|x in.any (+|x in.any in.any))
                     (by.= (?.in_reverse ..distributivity_of_int_x)))))))

... https://en.wikipedia.org/wiki/Subtraction#Properties
(_.the .public i64_+_opposite
  (?.let [by (|type|)
          it (|type|)]
    (?.= (|type|)
         (.i64_+# (- by) it)
         (.i64_-# by it)))
  !.axiom)

(_.the .public +_opposite
  (?.let [by (|type|)
          it (|type|)]
    (?.= (|type|)
         (/.+ (/.opposite by) it)
         (/.- by it)))
  (!.= (all by.and
            (by.of by.definition (list (all by.and
                                            (by.of by.definition (list in.any))
                                            (by.of by.definition (list in.any by.definition)))
                                       in.any))
            (by.= ..i64_+_opposite))
       (by.of by.definition (list in.any in.any))))

(_.the .public associativity_of_-
  (?.let [this (|type|)
          that (|type|)
          it (|type|)]
    (?.= (|type|)
         (/.- this (/.+ that it))
         (/.+ (/.- this that) it)))
  (!.= (all by.and
            (by.= (?.in_reverse ..+_opposite))
            (by.= ..associativity_of_+)
            (by.of' in.any (list (by.= ..+_opposite) in.any)))
       in.any))

(these (the (binary this that)
         (-> in.Rule in.Rule
             in.Rule)
         (by.of' in.any (list this that)))

       (the in_+ ..binary)
       (the in_x ..binary)

       (the (by_reflection by_it)
         (by.of by.definition (list in.any by_it)))

       (the in_- ..binary))

(_.the .public identity_of_-
  (identity /.- /.zero)
  (!.= (all by.and
            (by.= (?.in_reverse ..+_opposite))
            (by.of by.definition (list (all by.and
                                            (by.= ..opposite_by_x)
                                            (by.of by.definition (list by.definition by.definition))
                                            by.x)
                                       in.any))
            (by.= ..identity_of_i64_+))
       in.any))

(_.the .public opposite_of_zero
  (?.= (|type|)
       (/.opposite /.zero)
       /.zero)
  (!.= (all by.and
            (by.of by.definition (list in.any))
            (by.= ..identity_of_-))
       in.any))

(_.the .public commutativity_of_+_-
  (?.let [this (|type|)
          that (|type|)
          it (|type|)]
    (?.= (|type|)
         (/.- that (/.+ this it))
         (/.+ this (/.- that it))))
  (!.= (all by.and
            (by.= (?.in_reverse ..+_opposite))
            (by.= ..associativity_of_+)
            (by.of' in.any (list (by.= ..commutativity_of_+) in.any))
            (by.= (?.in_reverse ..associativity_of_+))
            (by.of' in.any (list in.any (by.= ..+_opposite))))
       in.any))

(_.the .public distributivity_of_opposite
  (?.let [this (|type|)
          that (|type|)]
    (?.= (|type|)
         (/.opposite (/.+ this that))
         (/.+ (/.opposite this) (/.opposite that))))
  (!.= (all by.and
            (by.= ..opposite_by_x)
            (by.= (?.in_reverse ..distributivity_of_x)))
       (by.of' in.any (list (by.= ..opposite_by_x) (by.= ..opposite_by_x)))))

(_.the .public consecutive_-
  (?.let [this (|type|)
          that (|type|)
          it (|type|)]
    (?.= (|type|)
         (/.- this (/.- that it))
         (/.- (/.+ this that) it)))
  (let [as_+ (by.= (?.in_reverse ..+_opposite))]
    (!.= (all by.and
              (by.of' in.any (list in.any as_+))
              as_+
              (by.= ..associativity_of_+)
              (by.of' in.any (list (by.= (?.in_reverse ..distributivity_of_opposite))
                                   in.any))
              (by.= ..+_opposite))
         in.any)))

(_.the .public commutativity_of_-
  (?.let [this (|type|)
          that (|type|)
          it (|type|)]
    (?.= (|type|)
         (/.- that (/.- this it))
         (/.- this (/.- that it))))
  (!.= (all by.and
            (by.= ..consecutive_-)
            (by.of' in.any (list (by.= ..commutativity_of_+) in.any))
            (by.= (?.in_reverse ..consecutive_-)))
       in.any))

(_.the .public anti_associativity_of_-
  (?.let [this (|type|)
          that (|type|)
          it (|type|)]
    (?.= (|type|)
         (/.- (/.- that this) it)
         (/.- this (/.+ that it))))
  (let [opposite (function (_ it)
                   (all by.and
                        (by.of' in.any (list it))
                        (by.= ..opposite_by_x)))]
    (!.= (all by.and
              (by.of' in.any (list (by.= (?.in_reverse ..+_opposite)) in.any))
              (by.= (?.in_reverse ..+_opposite))
              (in_+ (opposite (in_+ (opposite in.any)
                                    in.any))
                    in.any)
              (in_+ (all by.and
                         (by.= (?.in_reverse ..distributivity_of_x))
                         (in_+ (all by.and
                                    (by.= ..associativity_of_x)
                                    (in_x (all by.and
                                               (by.of by.definition (list by.definition by.definition))
                                               by.x)
                                          in.any)
                                    (by.of by.definition (list in.any in.any))
                                    (by.= ..identity_of_int_x))
                               in.any)
                         (by.= ..commutativity_of_+))
                    in.any)
              (by.= (?.in_reverse ..associativity_of_+))
              (in_+ (by.= (?.in_reverse ..opposite_by_x))
                    in.any)
              (by.= ..+_opposite))
         in.any)))

(_.the .public -_opposite
  (?.let [by (|type|)
          it (|type|)]
    (?.= (|type|)
         (/.- (/.opposite by) it)
         (/.+ by it)))
  (!.= (all by.and
            (by.of' in.any (list (by.of by.definition (list in.any))
                                 in.any))
            (by.= ..anti_associativity_of_-)
            (by.= ..identity_of_-))
       in.any))

(_.the .public double_opposite
  (?.let [it (|type|)]
    (?.= (|type|)
         (/.opposite (/.opposite it))
         it))
  (let [by_opposite (function (_ by_it)
                      (by.of by.definition (list by_it)))]
    (!.= (all by.and
              (by_opposite (by_opposite in.any))
              (by.= ..anti_associativity_of_-)
              (by.= ..identity_of_-)
              (by.= ..commutativity_of_+)
              (by.= ..identity_of_+))
         in.any)))

(_.the .public annihilation_by_-
  (?.let [it (|type|)]
    (?.= (|type|)
         (/.- it it)
         /.zero))
  (!.= (all by.and
            (by.= (?.in_reverse ..+_opposite))
            (in_+ (all by.and
                       (by.= ..opposite_by_x)
                       (by.= ..commutativity_of_x))
                  (all by.and
                       (by.= (?.in_reverse ..identity_of_x))
                       (by.= ..commutativity_of_x)))
            (by.= ..distributivity_of_x)
            (in_x in.any
                  (all by.and
                       (by.of by.definition (list by.definition by.definition))
                       by.+))
            (by.= ..commutativity_of_x)
            (by.of by.definition (list in.any in.any))
            (by.= ..annihilation_of_int_x))
       by.definition))

(_.the .public inversion_of_+
  (?.let [by (|type|)
          it (|type|)]
    (?.= (|type|)
         (/.- by (/.+ by it))
         it))
  (!.= (all by.and
            (by.= (?.in_reverse ..+_opposite))
            (by.= ..associativity_of_+)
            (by.of' in.any (list (all by.and
                                      (by.= ..+_opposite)
                                      (by.= ..annihilation_by_-))
                                 in.any))
            (by.= ..identity_of_+))
       in.any))

(_.the .public inversion_of_-
  (?.let [by (|type|)
          it (|type|)]
    (?.= (|type|)
         (/.+ by (/.- by it))
         it))
  (!.= (all by.and
            (by.of' in.any (list in.any (by.= (?.in_reverse ..+_opposite))))
            (by.= ..associativity_of_+)
            (by.of' in.any (list (all by.and
                                      (by.= ..commutativity_of_+)
                                      (by.= ..+_opposite)
                                      (by.= ..annihilation_by_-))
                                 in.any))
            (by.= ..identity_of_+))
       in.any))

... https://en.wikipedia.org/wiki/Anticommutative_property
(_.the .public anti_commutativity_of_-
  (?.let [this (|type|)
          that (|type|)]
    (?.= (|type|)
         (/.opposite (/.- this that))
         (/.- that this)))
  (!.= (all by.and
            (by.of' in.any (list (by.= (?.in_reverse ..+_opposite))))
            (by.= ..distributivity_of_opposite)
            (in_+ (by.= ..double_opposite) in.any)
            (by.= ..commutativity_of_+)
            (by.= ..+_opposite))
       in.any))

(_.the .public reflection_of_self
  (?.let [it (|type|)]
    (?.= (|type|)
         (/.reflection it it)
         it))
  (!.= (all by.and
            (by.of by.definition (list in.any in.any))
            (by.of' in.any (list (by.= ..annihilation_by_-) in.any))
            (by.= ..identity_of_-))
       in.any))

(_.the .public opposite_is_special_reflection
  (?.let [it (|type|)]
    (?.= (|type|)
         (/.reflection /.zero it)
         (/.opposite it)))
  (!.= (all by.and
            (by.of by.definition (list in.any in.any))
            (by.of' in.any (list (by.= ..identity_of_-) in.any)))
       (by.of by.definition (list in.any))))

(_.the .public double_reflection
  (?.let [origin (|type|)
          it (|type|)]
    (?.= (|type|)
         (/.reflection origin (/.reflection origin it))
         it))
  (!.= (all by.and
            (by_reflection (by_reflection in.any))
            (in_- (all by.and
                       (in_- in.any
                             (by.= ..anti_associativity_of_-))
                       (by.= ..commutativity_of_-)
                       (in_- in.any
                             (by.= ..inversion_of_+)))
                  in.any)
            (by.= ..anti_associativity_of_-)
            (in_- in.any (by.= ..commutativity_of_+))
            (by.= ..inversion_of_+))
       in.any))

(_.the .public difference_of_reflection
  (?.let [origin (|type|)
          it (|type|)]
    (?.= (|type|)
         (/.- (/.reflection origin it) origin)
         (/.- origin it)))
  (!.= (all by.and
            (in_- (all by.and
                       (by_reflection in.any)
                       (by.= ..anti_associativity_of_-))
                  in.any)
            (by.= ..anti_associativity_of_-)
            (by.= (?.in_reverse ..consecutive_-))
            (in_- in.any (all by.and
                              (in_- in.any (by.= ..commutativity_of_+))
                              (by.= ..inversion_of_+))))
       in.any))
