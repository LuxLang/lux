... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except false true)
   ["_" theorem (.only)
    ["?" proposition]
    ["!" proof (.only)
     ["[0]" induction]]
    ["in" substitution]
    ["by" rule]]
   [macro
    ["[0]" template]]]]
 ["/" \\library]
 [//
  ["[0]" bit]])

(template.with [,name ,bit ,from ,to]
  [(_.the .public ,name
     (?.= (/.not ,from)
          ,to)
     (!.= (all by.and
               (by.of by.definition (list by.definition))
               (by.when in.any
                 ((_.with (all _.pair
                               _.any _.any _.any _.any
                               _.any _.any _.any _.any))
                  (function (_ [/7 /6 /5 /4 /3 /2 /1 /0])
                    (let [not (function (_ it)
                                (all by.and
                                     (by.of' in.any (list (by.= it)))
                                     (by.= ,bit)))]
                      (all in.pair
                           (not /7)
                           (not /6)
                           (not /5)
                           (not /4)
                           (not /3)
                           (not /2)
                           (not /1)
                           (not /0)))))))
          by.definition))]

  [[false bit.false_is_not_true /.true /.false]
   [true bit.true_is_not_false /.false /.true]])

(the byte
  (all _.pair
       _.any _.any _.any _.any
       _.any _.any _.any _.any))

... https://en.wikipedia.org/wiki/Involution_(mathematics)
(_.the .public involution_of_not
  (?.let [it /.Byte]
    (?.= (/.not (/.not it))
         it))
  (let [not (function (_ it)
              (by.of' in.any (list (by.= it))))]
    (<| (induction.tuple 8)
        (function (_ =_it))
        (!.= (all by.and
                  (by.of by.definition (list (all by.and
                                                  (by.of by.definition (list (by.= =_it)))
                                                  (by.when in.any
                                                    ((_.with ..byte)
                                                     (function (_ [/7 /6 /5 /4 /3 /2 /1 /0])
                                                       (all in.pair
                                                            (not /7)
                                                            (not /6)
                                                            (not /5)
                                                            (not /4)
                                                            (not /3)
                                                            (not /2)
                                                            (not /1)
                                                            (not /0))))))))
                  (by.when in.any
                    ((_.with ..byte)
                     (function (_ [/7 /6 /5 /4 /3 /2 /1 /0])
                       (let [not_not (function (_ it)
                                       (all by.and
                                            (not it)
                                            (by.= bit.double_negation)))]
                         (all in.pair
                              (not_not /7)
                              (not_not /6)
                              (not_not /5)
                              (not_not /4)
                              (not_not /3)
                              (not_not /2)
                              (not_not /1)
                              (not_not /0)))))))
             (by.= =_it)))))

(template.with [,name ,* ,value ,commutativity ,identity ,*']
  [(_.the .public ,name
     (?.let [it /.Byte]
       (?.= (,* ,value it)
            it))
     (let [*' ,*'
           * (function (_ this that)
               (all by.and
                    (*' (by.= this) (by.= that))
                    (by.= ,commutativity)
                    (by.= ,identity)))]
       (<| (induction.tuple 8)
           (function (_ =_it))
           (!.= (all by.and
                     (by.of by.definition (list by.definition (by.= =_it)))
                     (by.when in.any
                       ((_.with ..byte)
                        (function (_ [this_7 this_6 this_5 this_4 this_3 this_2 this_1 this_0])
                          (by.when in.any
                            ((_.with ..byte)
                             (function (_ [that_7 that_6 that_5 that_4 that_3 that_2 that_1 that_0])
                               (all in.pair
                                    (* that_7 this_7)
                                    (* that_6 this_6)
                                    (* that_5 this_5)
                                    (* that_4 this_4)
                                    (* that_3 this_3)
                                    (* that_2 this_2)
                                    (* that_1 this_1)
                                    (* that_0 this_0)))))))))
                (by.= =_it)))))]

  [[identity_of_xor /.xor /.false bit.commutativity_of_xor bit.identity_of_xor
    (function (_ this that)
      (by.of' in.any (list this that)))]
   [identity_of_or /.or /.false bit.commutativity_of_or bit.identity_of_or bit.or]
   [identity_of_and /.and /.true bit.commutativity_of_and bit.identity_of_and bit.and]])

(template.with [,name ,* ,bit ,*']
  [(_.the .public ,name
     (?.let [this /.Byte
             that /.Byte]
       (?.= (,* this that)
            (,* that this)))
     (let [*' ,*']
       (<| (induction.tuple 8)
           (function (_ =_this))
           (induction.tuple 8)
           (function (_ =_that))
           (!.= (all by.and
                     (by.of by.definition (list (by.= =_this) (by.= =_that)))
                     (by.when in.any
                       ((_.with ..byte)
                        (function (_ [this_7 this_6 this_5 this_4 this_3 this_2 this_1 this_0])
                          (by.when in.any
                            ((_.with ..byte)
                             (function (_ [that_7 that_6 that_5 that_4 that_3 that_2 that_1 that_0])
                               (let [* (function (_ this that)
                                         (all by.and
                                              (*' (by.= this) (by.= that))
                                              (by.= ,bit)))]
                                 (all in.pair
                                      (* this_7 that_7)
                                      (* this_6 that_6)
                                      (* this_5 that_5)
                                      (* this_4 that_4)
                                      (* this_3 that_3)
                                      (* this_2 that_2)
                                      (* this_1 that_1)
                                      (* this_0 that_0))))))))))
                (all by.and
                     (by.of by.definition (list (by.= =_that) (by.= =_this)))
                     (by.when in.any
                       ((_.with ..byte)
                        (function (_ [that_7 that_6 that_5 that_4 that_3 that_2 that_1 that_0])
                          (by.when in.any
                            ((_.with ..byte)
                             (function (_ [this_7 this_6 this_5 this_4 this_3 this_2 this_1 this_0])
                               (all in.pair
                                    (*' (by.= that_7) (by.= this_7))
                                    (*' (by.= that_6) (by.= this_6))
                                    (*' (by.= that_5) (by.= this_5))
                                    (*' (by.= that_4) (by.= this_4))
                                    (*' (by.= that_3) (by.= this_3))
                                    (*' (by.= that_2) (by.= this_2))
                                    (*' (by.= that_1) (by.= this_1))
                                    (*' (by.= that_0) (by.= this_0))))))))))))))]

  [[commutativity_of_xor /.xor bit.commutativity_of_xor
    (function (_ this that)
      (by.of' in.any (list this that)))]
   [commutativity_of_or /.or bit.commutativity_of_or bit.or]
   [commutativity_of_and /.and bit.commutativity_of_and bit.and]])

(template.with [,name ,* ,bit ,*']
  [(_.the .public ,name
     (?.let [this /.Byte
             that /.Byte
             else /.Byte]
       (?.= (,* this (,* that else))
            (,* (,* this that) else)))
     (let [*' ,*'
           * (function (_ this that)
               (all by.and
                    (*' (by.= this) (by.= that))
                    (by.= ,bit)))]
       (<| (induction.tuple 8)
           (function (_ =_this))
           (induction.tuple 8)
           (function (_ =_that))
           (induction.tuple 8)
           (function (_ =_else))
           (!.= (all by.and
                     (by.of by.definition (list (by.= =_this) (by.of by.definition (list (by.= =_that) (by.= =_else)))))
                     (by.when in.any
                       ((_.with ..byte)
                        (function (_ [this_7 this_6 this_5 this_4 this_3 this_2 this_1 this_0])
                          (by.when (by.when in.any
                                     ((_.with ..byte)
                                      (function (_ [that_7 that_6 that_5 that_4 that_3 that_2 that_1 that_0])
                                        (by.when in.any
                                          ((_.with ..byte)
                                           (function (_ [else_7 else_6 else_5 else_4 else_3 else_2 else_1 else_0])
                                             (all in.pair
                                                  (*' (by.= that_7) (by.= else_7))
                                                  (*' (by.= that_6) (by.= else_6))
                                                  (*' (by.= that_5) (by.= else_5))
                                                  (*' (by.= that_4) (by.= else_4))
                                                  (*' (by.= that_3) (by.= else_3))
                                                  (*' (by.= that_2) (by.= else_2))
                                                  (*' (by.= that_1) (by.= else_1))
                                                  (*' (by.= that_0) (by.= else_0)))))))))
                            ((_.with ..byte)
                             (function (_ [that*else_7 that*else_6 that*else_5 that*else_4 that*else_3 that*else_2 that*else_1 that*else_0])
                               (all in.pair
                                    (* this_7 that*else_7)
                                    (* this_6 that*else_6)
                                    (* this_5 that*else_5)
                                    (* this_4 that*else_4)
                                    (* this_3 that*else_3)
                                    (* this_2 that*else_2)
                                    (* this_1 that*else_1)
                                    (* this_0 that*else_0)))))))))
                (all by.and
                     (by.of by.definition (list (by.of by.definition (list (by.= =_this) (by.= =_that))) (by.= =_else)))
                     (by.when (by.when in.any
                                ((_.with ..byte)
                                 (function (_ [this_7 this_6 this_5 this_4 this_3 this_2 this_1 this_0])
                                   (by.when in.any
                                     ((_.with ..byte)
                                      (function (_ [that_7 that_6 that_5 that_4 that_3 that_2 that_1 that_0])
                                        (all in.pair
                                             (*' (by.= this_7) (by.= that_7))
                                             (*' (by.= this_6) (by.= that_6))
                                             (*' (by.= this_5) (by.= that_5))
                                             (*' (by.= this_4) (by.= that_4))
                                             (*' (by.= this_3) (by.= that_3))
                                             (*' (by.= this_2) (by.= that_2))
                                             (*' (by.= this_1) (by.= that_1))
                                             (*' (by.= this_0) (by.= that_0)))))))))
                       ((_.with ..byte)
                        (function (_ [this*that_7 this*that_6 this*that_5 this*that_4 this*that_3 this*that_2 this*that_1 this*that_0])
                          (by.when in.any
                            ((_.with ..byte)
                             (function (_ [else_7 else_6 else_5 else_4 else_3 else_2 else_1 else_0])
                               (all in.pair
                                    (*' (by.= this*that_7) (by.= else_7))
                                    (*' (by.= this*that_6) (by.= else_6))
                                    (*' (by.= this*that_5) (by.= else_5))
                                    (*' (by.= this*that_4) (by.= else_4))
                                    (*' (by.= this*that_3) (by.= else_3))
                                    (*' (by.= this*that_2) (by.= else_2))
                                    (*' (by.= this*that_1) (by.= else_1))
                                    (*' (by.= this*that_0) (by.= else_0))))))))))))))]

  [[associativity_of_xor /.xor bit.associativity_of_xor
    (function (_ this that)
      (by.of' in.any (list this that)))]
   [associativity_of_or /.or bit.associativity_of_or bit.or]
   [associativity_of_and /.and bit.associativity_of_and bit.and]])
