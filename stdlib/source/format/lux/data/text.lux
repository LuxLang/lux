... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except list nat int rev symbol type)
   [abstract
    [monad (.only do)]
    [functor
     ["[0]" contravariant]]]
   [control
    ["<>" parser]
    ["[0]" maybe]]
   [data
    ["[0]" bit]
    ["[0]" text]
    [format
     ["[0]" xml]
     ["[0]" json]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]]]
   [math
    [number
     ["[0]" nat]
     ["[0]" int]
     ["[0]" rev]
     ["[0]" frac]
     ["[0]" ratio]
     ["[0]" complex]]
    [arithmetic
     ["[0]" modular]]]
   [meta
    ["[0]" location]
    ["[0]" symbol]
    ["[0]" type]
    ["[0]" code (.only)
     ["<[1]>" \\parser (.only Parser)]]
    [macro
     [syntax (.only syntax)]
     ["[0]" template]]]
   [world
    ["[0]" time (.only)
     ["[0]" instant]
     ["[0]" duration]
     ["[0]" date]
     ["[0]" day]
     ["[0]" month]]]]])

(.every .public (Format of)
  (-> of
      Text))

(the .public functor
  (contravariant.Functor Format)
  (implementation
   (the (each f fb)
     (|>> f fb))))

(the .public format
  (syntax (_ [fragments (<>.many <code>.any)])
    (in (.list (` (.text_composite# (,* fragments)))))))

(with_template [<name> <type> <formatter>]
  [(the .public <name>
     (Format <type>)
     <formatter>)]

  [bit      Bit               (of bit.codec encoded)]
  [nat      Nat               (of nat.decimal encoded)]
  [int      Int               (of int.decimal encoded)]
  [rev      Rev               (of rev.decimal encoded)]
  [frac     Frac              (of frac.decimal encoded)]
  [text     Text              text.format]
  
  [ratio    ratio.Ratio       (of ratio.codec encoded)]
  [complex  complex.Complex   complex.format]
  
  [symbol   Symbol            (of symbol.absolute encoded)]
  [location Location          location.format]
  [code     Code              code.absolute]
  [type     Type              type.absolute_format]
  
  [instant  instant.Instant   (of instant.codec encoded)]
  [duration duration.Duration (of duration.codec encoded)]
  [date     date.Date         (of date.codec encoded)]
  [time     time.Time         (of time.codec encoded)]
  [day      day.Day           (of day.codec encoded)]
  [month    month.Month       (of month.codec encoded)]
  
  [xml      xml.XML           (of xml.codec encoded)]
  [json     json.JSON         (of json.codec encoded)]
  )

(with_template [<name>]
  [(the .public (<name> it)
     (Format Frac)
     (let [fraction (of (template.symbol [frac._] [<name>]) encoded it)]
       (<| (maybe.else fraction)
           (do maybe.monad
             [[integer _] (text.split_by "." fraction)
              suffix (text.clip (-- (text.size fraction)) 1 fraction)]
             (in (..format integer suffix))))))]

  [degree]
  [percentage]
  [permille]
  [permyriad]
  )

(with_template [<type> <format>,<codec>]
  [(`` (with_template [<format> <codec>]
         [(the .public <format>
            (Format <type>)
            (of <codec> encoded))]

         (,, (template.spliced <format>,<codec>))))]

  [Nat
   [[nat_2 nat.binary]
    [nat_8 nat.octal]
    [nat_10 nat.decimal]
    [nat_16 nat.hex]]]
  [Int
   [[int_2 int.binary]
    [int_8 int.octal]
    [int_10 int.decimal]
    [int_16 int.hex]]]
  [Rev
   [[rev_2 rev.binary]
    [rev_8 rev.octal]
    [rev_10 rev.decimal]
    [rev_16 rev.hex]]]
  [Frac
   [[frac_2 frac.binary]
    [frac_8 frac.octal]
    [frac_10 frac.decimal]
    [frac_16 frac.hex]]]
  )

(the .public (padded padding format)
  (-> Nat (Format Nat)
      (Format Nat))
  (of (nat.padded padding
                  (implementation
                   (the encoded format)
                   (the (decoded _) (undefined))))
      encoded))

(the .public (mod modular)
  (All (_ %)
    (Format (modular.Mod %)))
  (let [codec (modular.codec (modular.modulus modular))]
    (of codec encoded modular)))

(the .public (list formatter)
  (All (_ of)
    (-> (Format of)
        (Format (List of))))
  (|>> (list#each (|>> formatter (format " ")))
       text.together
       (text.enclosed ["(list" ")"])))

(the .public (maybe format)
  (All (_ of)
    (-> (Format of)
        (Format (Maybe of))))
  (function (_ value)
    (when value
      {.#None}
      "{.#None}"

      {.#Some value}
      (..format "{.#Some " (format value) "}"))))
