... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except and or nat int rev list symbol type)
   [ffi (.only)]
   [abstract
    [monoid (.only Monoid)]
    [monad (.only Monad do)]
    [equivalence (.only Equivalence)]]
   [control
    ["<>" parser (.use "[1]#[0]" monad)]
    ["[0]" pipe]
    ["[0]" function]]
   [data
    ["[0]" product]
    [text
     ["%" \\format (.only format)]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list]
     ["[0]" sequence (.only Sequence) (.use "[1]#[0]" functor)]
     ["[0]" set (.only Set)]
     [array
      [\\unsafe (.only)]]]]
   [math
    [number
     ["n" nat]
     ["[0]" i64]
     ["[0]" frac]]]
   [meta
    [macro
     ["^" pattern]]]
   [world
    [time
     ["[0]" instant (.only Instant)]
     ["[0]" duration (.only Duration)]]]]]
 ["[0]" \\unsafe (.only Binary)]
 ["</>" \\parser (.only Offset Size Parser)])

(with_template [<name> <extension> <post>]
  [(def <name>
     (template (<name> <parameter> <subject>)
       [(<post> (<extension> (.int <parameter>) (.int <subject>)))]))]

  [n#= .i64_=# .|>]
  [n#+ .i64_+# .nat]
  [n#* .int_*# .nat]
  )

(def mask
  (-> Size (I64 Any))
  (|>> (n#* i64.bits_per_byte) i64.mask))

(.type .public Mutation
  (-> [Offset Binary] [Offset Binary]))

(.type .public Specification
  [Size Mutation])

(def .public no_op
  Specification
  [0 function.identity])

(def .public (instance [size mutation])
  (-> Specification Binary)
  (|> size \\unsafe.empty [0] mutation product.right))

(def .public monoid
  (Monoid Specification)
  (implementation
   (def identity
     ..no_op)
   
   (def (composite [sizeL mutL] [sizeR mutR])
     [(n#+ sizeL sizeR)
      (|>> mutL mutR)])))

(.type .public (Format a)
  (-> a Specification))

(def .public (result format value)
  (All (_ a) (-> (Format a) a Binary))
  (..instance (format value)))

(with_template [<name> <size> <write>]
  [(def .public <name>
     (Format (I64 Any))
     (function (_ value)
       [<size>
        (function (_ [offset binary])
          [(n#+ <size> offset)
           (<write> offset value binary)])]))]

  [bits_8  </>.size_8  \\unsafe.has_8!]
  [bits_16 </>.size_16 \\unsafe.has_16!]
  [bits_32 </>.size_32 \\unsafe.has_32!]
  [bits_64 </>.size_64 \\unsafe.has_64!]
  )

(def .public (or left right)
  (All (_ l r) (-> (Format l) (Format r) (Format (Or l r))))
  (function (_ altV)
    (when altV
      (^.with_template [<number> <tag> <format>]
        [{<tag> caseV}
         (let [[caseS caseT] (<format> caseV)]
           [(.++ caseS)
            (function (_ [offset binary])
              (|> binary
                  (\\unsafe.has_8! offset <number>)
                  [(.++ offset)]
                  caseT))])])
      ([0 .#Left left]
       [1 .#Right right])
      )))

(def .public (and pre post)
  (All (_ a b) (-> (Format a) (Format b) (Format [a b])))
  (function (_ [preV postV])
    (of ..monoid composite (pre preV) (post postV))))

(def .public (rec body)
  (All (_ a) (-> (-> (Format a) (Format a)) (Format a)))
  (function (again value)
    (body again value)))

(def .public any
  (Format Any)
  (function.constant ..no_op))

(def .public bit
  (Format Bit)
  (|>> (pipe.when #0 0 #1 1) ..bits_8))

(with_template [<name> <type>]
  [(def .public <name> (Format <type>) ..bits_64)]

  [nat Nat]
  [int Int]
  [rev Rev]
  )

(def .public frac
  (Format Frac)
  (|>> frac.bits ..bits_64))

(def .public (segment size)
  (-> Nat (Format Binary))
  (function (_ value)
    [size
     (function (_ [offset binary])
       [(n#+ size offset)
        (\\unsafe.copy! (n.min size (\\unsafe.size value))
                        0
                        value
                        offset
                        binary)])]))

(with_template [<name> <bits> <size> <write>]
  [(def .public <name>
     (Format Binary)
     (let [mask (..mask <size>)]
       (function (_ value)
         (let [size (|> value \\unsafe.size (i64.and mask))
               size' (n#+ <size> size)]
           [size'
            (function (_ [offset binary])
              [(n#+ size' offset)
               (|> binary
                   (<write> offset size)
                   (\\unsafe.copy! size 0 value (n#+ <size> offset)))])]))))]

  [binary_8  ..bits_8  </>.size_8  \\unsafe.has_8!]
  [binary_16 ..bits_16 </>.size_16 \\unsafe.has_16!]
  [binary_32 ..bits_32 </>.size_32 \\unsafe.has_32!]
  [binary_64 ..bits_64 </>.size_64 \\unsafe.has_64!]
  )

(with_template [<name> <binary>]
  [(def .public <name>
     (Format Text)
     (|>> (of utf8.codec encoded) <binary>))]

  [utf8_8  ..binary_8]
  [utf8_16 ..binary_16]
  [utf8_32 ..binary_32]
  [utf8_64 ..binary_64]
  )

(def .public text ..utf8_64)

(with_template [<name> <size> <write>]
  [(def .public (<name> valueW)
     (All (_ v) (-> (Format v) (Format (Sequence v))))
     (function (_ value)
       (let [original_count (sequence.size value)
             capped_count (i64.and (..mask <size>)
                                   original_count)
             value (if (n#= original_count capped_count)
                     value
                     (|> value sequence.list (list.first capped_count) sequence.of_list))
             (open "specification#[0]") ..monoid
             [size mutation] (|> value
                                 (sequence#each valueW)
                                 (of sequence.mix mix
                                     (function (_ post pre)
                                       (specification#composite pre post))
                                     specification#identity))]
         [(n#+ <size> size)
          (function (_ [offset binary])
            (|> binary
                (<write> offset capped_count)
                [(n#+ <size> offset)]
                mutation))])))]

  [sequence_8  </>.size_8  \\unsafe.has_8!]
  [sequence_16 </>.size_16 \\unsafe.has_16!]
  [sequence_32 </>.size_32 \\unsafe.has_32!]
  [sequence_64 </>.size_64 \\unsafe.has_64!]
  )

(def .public maybe
  (All (_ a) (-> (Format a) (Format (Maybe a))))
  (..or ..any))

(def .public (list value)
  (All (_ a) (-> (Format a) (Format (List a))))
  (..rec
   (|>> (..and value)
        (..or ..any))))

(def .public (set value)
  (All (_ a) (-> (Format a) (Format (Set a))))
  (|>> set.list (..list value)))

(def .public symbol
  (Format Symbol)
  (..and ..text ..text))

(def .public type
  (Format Type)
  (..rec
   (function (_ again)
     (let [pair (..and again again)
           indexed ..nat
           quantified (..and (..list again) again)]
       (function (_ altV)
         (when altV
           (^.with_template [<number> <tag> <format>]
             [{<tag> caseV}
              (let [[caseS caseT] (<format> caseV)]
                [(.++ caseS)
                 (function (_ [offset binary])
                   (|> binary
                       (\\unsafe.has_8! offset <number>)
                       [(.++ offset)]
                       caseT))])])
           ([00 .#Nominal (..and ..text (..list again))]
            [01 .#Sum pair]
            [02 .#Product pair]
            [03 .#Function pair]
            [04 .#Parameter indexed]
            [05 .#Var indexed]
            [06 .#Ex indexed]
            [07 .#UnivQ quantified]
            [08 .#ExQ quantified]
            [09 .#Apply pair]
            [10 .#Named (..and ..symbol again)])
           ))))))

(def .public location
  (Format Location)
  (all ..and ..text ..nat ..nat))

(def .public code
  (Format Code)
  (..rec
   (function (_ again)
     (let [sequence (..list again)]
       (..and ..location
              (function (_ altV)
                (when altV
                  (^.with_template [<number> <tag> <format>]
                    [{<tag> caseV}
                     (let [[caseS caseT] (<format> caseV)]
                       [(.++ caseS)
                        (function (_ [offset binary])
                          (|> binary
                              (\\unsafe.has_8! offset <number>)
                              [(.++ offset)]
                              caseT))])])
                  ([0 .#Bit ..bit]
                   [1 .#Nat ..nat]
                   [2 .#Int ..int]
                   [3 .#Rev ..rev]
                   [4 .#Frac ..frac]
                   [5 .#Text ..text]
                   [6 .#Symbol ..symbol]
                   [7 .#Form sequence]
                   [8 .#Variant sequence]
                   [9 .#Tuple sequence])
                  )))))))

(def .public instant
  (Format Instant)
  (|>> instant.millis
       ..int))

(def .public duration
  (Format Duration)
  (|>> duration.millis
       ..int))
