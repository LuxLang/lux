... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except list type)
   [abstract
    ["[0]" equivalence]
    ["[0]" functor]]
   [control
    ["[0]" try (.only Error)]
    [function
     ["[0]" predicate]]]
   [data
    [collection
     ["[0]" list]]]
   [meta
    ["[0]" location]
    [type
     ["[0]" variance]]
    [compiler
     ["@" target]]]]])

(the .public nominal
  "#Array")

(with_template [<item> <array>]
  [(.every .public <array>
     {.#Nominal ..nominal {.#Item <item> {.#End}}})]

  [(variance.Mutable read write) (Array' read write)]
  [(variance.Mutable of of) (Array of)]
  )

(with_expansions [<index_type> (.Nominal "java.lang.Long")
                  <item_type> (.Nominal "java.lang.Object")]
  (these (for @.jvm (the jvm_int
                      (template (jvm_int value)
                        [(.|> value
                              (.as <index_type>)
                              .jvm_object_cast#
                              .jvm_conversion_long_to_int#)]))
              (these))
         
         (`` (the .public empty
               (template (empty <size>)
                 [((.is (.All (_ of)
                          (.-> .Nat
                               (..Array of)))
                        (.function (empty size)
                          (.as_expected
                           (.for (,, (.static @.old))
                                 ("jvm anewarray" "(java.lang.Object )" size)

                                 (,, (.static @.jvm))
                                 (|> (,, (..jvm_int size))
                                     .jvm_array_new_object#
                                     (.is (..Array <item_type>)))

                                 (,, (.static @.js)) (.js_array_new# size)
                                 (,, (.static @.python)) (.python_array_new# size)
                                 (,, (.static @.lua)) (.lua_array_new# size)
                                 (,, (.static @.ruby)) (.ruby_array_new# size)
                                 (,, (.static @.php)) ("php array new" size)
                                 (,, (.static @.scheme)) ("scheme array new" size)))))
                   <size>)])))

         (`` (the .public size
               (template (size <array>)
                 [((.is (.All (_ read write)
                          (.-> (..Array' read write)
                               .Nat))
                        (.function (size array)
                          (.for (,, (.static @.old))
                                ("jvm arraylength" array)

                                (,, (.static @.jvm))
                                (.|> array
                                     .jvm_array_length_object#
                                     .jvm_conversion_int_to_long#
                                     .jvm_object_cast#
                                     (.is <index_type>)
                                     (.as .Nat))

                                (,, (.static @.js)) (.js_array_length# array)
                                (,, (.static @.python)) (.python_array_length# array)
                                (,, (.static @.lua)) (.lua_array_length# array)
                                (,, (.static @.ruby)) (.ruby_array_length# array)
                                (,, (.static @.php)) ("php array length" array)
                                (,, (.static @.scheme)) ("scheme array length" array))))
                   <array>)])))

         (the lacks?'
           (template (lacks?' <read!> <null?> index array)
             [(<null?> (<read!> index array))]))

         (`` (the .public lacks?
               (template (lacks? <index> <array>)
                 [((.is (.All (_ read write)
                          (.-> .Nat (..Array' read write)
                               .Bit))
                        (.function (lacks? index array)
                          (.let [size (..size array)]
                            (.if (.int_<# (.int size) (.int index))
                              (.for (,, (.static @.old))
                                    ("jvm object null?" ("jvm aaload" array index))

                                    (,, (.static @.jvm))
                                    (.|> array
                                         (.jvm_array_read_object# (,, (jvm_int index)))
                                         .jvm_object_null?#)

                                    (,, (.static @.js)) (,, (lacks?' .js_array_read# .js_object_undefined?# index array))
                                    (,, (.static @.python)) (,, (lacks?' .python_array_read# .python_object_none?# index array))
                                    (,, (.static @.lua)) (,, (lacks?' .lua_array_read# .lua_object_nil?# index array))
                                    (,, (.static @.ruby)) (,, (lacks?' .ruby_array_read# .ruby_object_nil?# index array))
                                    (,, (.static @.php)) (,, (lacks?' "php array read" "php object null?" index array))
                                    (,, (.static @.scheme)) (,, (lacks?' "scheme array read" "scheme object nil?" index array)))
                              .true))))
                   <index> <array>)])))

         (the .public has?
           (template (has? index array)
             [(.not (..lacks? index array))]))

         (`` (the .public item
               (template (item <index> <array>)
                 [((.is (.All (_ read write)
                          (.-> .Nat (..Array' read write)
                               read))
                        (.function (item index array)
                          (.as_expected
                           (.for (,, (.static @.old))
                                 ("jvm aaload" array index)

                                 (,, (.static @.jvm))
                                 (.jvm_array_read_object# (,, (jvm_int index)) array)

                                 (,, (.static @.js)) (.js_array_read# index array)
                                 (,, (.static @.python)) (.python_array_read# index array)
                                 (,, (.static @.lua)) (.lua_array_read# index array)
                                 (,, (.static @.ruby)) (.ruby_array_read# index array)
                                 (,, (.static @.php)) ("php array read" index array)
                                 (,, (.static @.scheme)) ("scheme array read" index array)))))
                   <index> <array>)])))

         (`` (the .public has!
               (template (has! <index> <value> <array>)
                 [((.is (.All (_ read write)
                          (.-> .Nat write (..Array' read write)
                               (..Array' read write)))
                        (.function (has! index value array)
                          (.for (,, (.static @.old))
                                ("jvm aastore" array index value)

                                (,, (.static @.jvm))
                                (.|> array
                                     (.jvm_array_write_object# (,, (jvm_int index)) value)
                                     .as_expected)

                                (,, (.static @.js)) (.js_array_write# index (.as_expected value) array)
                                (,, (.static @.python)) (.python_array_write# index (.as_expected value) array)
                                (,, (.static @.lua)) (.lua_array_write# index (.as_expected value) array)
                                (,, (.static @.ruby)) (.ruby_array_write# index (.as_expected value) array)
                                (,, (.static @.php)) ("php array write" index (.as_expected value) array)
                                (,, (.static @.scheme)) ("scheme array write" index (.as_expected value) array))))
                   <index> <value> <array>)])))

         (`` (the .public lacks!
               (template (lacks! <index> <array>)
                 [((.is (.All (_ read write)
                          (.-> .Nat (..Array' read write)
                               (..Array' read write)))
                        (.function (lacks! index array)
                          (.let [size (..size array)]
                            (.if (.int_<# (.int size) (.int index))
                              (.for (,, (.static @.old))
                                    (..has! index (.as_expected ("jvm object null")) array)
                                    
                                    (,, (.static @.jvm))
                                    (..has! index (.as_expected (is <item_type> (.jvm_object_null#))) array)

                                    (,, (.static @.js)) (.js_array_delete# index array)
                                    (,, (.static @.python)) (.python_array_delete# index array)
                                    (,, (.static @.lua)) (.lua_array_delete# index array)
                                    (,, (.static @.ruby)) (.ruby_array_delete# index array)
                                    (,, (.static @.php)) ("php array delete" index array)
                                    (,, (.static @.scheme)) ("scheme array delete" index array))
                              array))))
                   <index> <array>)]))))
  )

(the .public revised!
  (template (revised! <index> <$> <array>)
    [((.is (.All (_ read write)
             (.-> .Nat (.-> read write) (..Array' read write)
                  (..Array' read write)))
           (.function (revised! index $ array)
             (.if (..lacks? index array)
               array
               (..has! index ($ (..item index array)) array))))
      <index> <$> <array>)]))

(the .public upsert!
  (template (upsert! <index> <default> <$> <array>)
    [((.is (.All (_ read write)
             (.-> .Nat read (.-> read write) (..Array' read write)
                  (..Array' read write)))
           (.function (upsert! index default $ array)
             (..has! index
                     ($ (.if (..lacks? index array)
                          default
                          (..item index array)))
                     array)))
      <index> <default> <$> <array>)]))

(the .public copy!
  (template (copy! <length> <src_start> <src_array> <dest_start> <dest_array>)
    [((.is (.All (_ read write)
             (.-> .Nat .Nat (..Array' write .Nothing) .Nat (..Array' read write)
                  (..Array' read write)))
           (.function (copy! length src_start src_array dest_start dest_array)
             (.loop (again [offset 0])
               (.if (.int_<# (.int length) (.int offset))
                 (.exec
                   (.if (..lacks? (.i64_+# offset src_start) src_array)
                     (..lacks! (.i64_+# offset dest_start) dest_array)
                     (..has! (.i64_+# offset dest_start)
                             (..item (.i64_+# offset src_start) src_array)
                             dest_array))
                   (again (.i64_+# 1 offset)))
                 dest_array))))
      <length> <src_start> <src_array> <dest_start> <dest_array>)]))

(with_template [<name> <when_lacks> <when_has>]
  [(the .public <name>
     (template (<name> <array>)
       [((.is (.All (_ read write)
                (.-> (..Array' read write)
                     .Nat))
              (.function (occupancy array)
                (.let [size (..size array)]
                  (.loop (again [index 0
                                 it 0])
                    (.if (.int_<# (.int size) (.int index))
                      (.if (..lacks? index array)
                        (again (.i64_+# 1 index) <when_lacks>)
                        (again (.i64_+# 1 index) <when_has>))
                      it)))))
         <array>)]))]

  [occupancy it (.i64_+# 1 it)]
  [vacancy (.i64_+# 1 it) it]
  )

(the .public only!
  (template (only! <?> <it>)
    [((.is (.All (_ read write)
             (.-> (.-> read .Bit) (..Array' read write)
                  (..Array' read write)))
           (.function (only! ? it)
             (.let [size (..size it)]
               (.loop (again [index 0])
                 (.if (.int_<# (.int size) (.int index))
                   (.exec
                     (.if (..lacks? index it)
                       it
                       (.if (? (..item index it))
                         it
                         (..lacks! index it)))
                     (again (.i64_+# 1 index)))
                   it)))))
      <?> <it>)]))

(the .public no_example
  Text
  (location.with (location.here)
    "No example to be found."))

(with_template [<name> <predicate> <test> <type> <term>]
  [(the .public <name>
     (template (<name> <?> <it>)
       [((.is (.All (_ read write)
                (.-> <predicate> (..Array' read write)
                     (try.Try <type>)))
              (.function (<name> ? it)
                (.let [size (..size it)]
                  (.loop (again [index 0])
                    (.if (.int_<# (.int size) (.int index))
                      (.if (..lacks? index it)
                        (again (.i64_+# 1 index))
                        (.let [it (..item index it)]
                          (.if <test>
                            {try.#Success <term>}
                            (again (.i64_+# 1 index)))))
                      {try.#Failure ..no_example})))))
         <?> <it>)]))]

  [example (.-> read .Bit) (? it) read it]
  [example' (.-> Nat read .Bit) (? index it) [Nat read] [index it]]
  )

(the .public clone
  (template (clone <it>)
    [((.is (.All (_ of)
             (.-> (..Array of)
                  (..Array of)))
           (.function (clone it)
             (.let [size (..size it)]
               (..copy! size 0 it 0 (..empty size)))))
      <it>)]))

(the .public of_list
  (template (of_list <input>)
    [((.is (.All (_ of)
             (.-> (.List of)
                  (..Array of)))
           (.function (of_list input)
             (.let [size (list.size input)
                    output (..empty size)]
               (.loop (again [index 0
                              input input])
                 (.when input
                   {.#End}
                   output
                   
                   {.#Item head tail}
                   (.exec
                     (..has! index head output)
                     (again (.i64_+# 1 index) tail)))))))
      <input>)]))

(the underflow
  Nat
  (-- 0))

(`` (the list|-default
      (template (list|-default <empty> <array>)
        [((.is (.All (_ read write)
                 (.-> (.List read) (..Array' read write)
                      (.List read)))
               (.function (list|-default empty array)
                 (.loop (again [index (.i64_-# 1 (..size array))
                                output empty])
                   (.if (.i64_=# (,, (.static ..underflow)) index)
                     output
                     (again (.i64_-# 1 index)
                            (.if (..lacks? index array)
                              output
                              {.#Item (..item index array) output}))))))
          <empty> <array>)])))

(`` (the list|+default
      (template (list|+default <default> <array>)
        [((.is (.All (_ read write)
                 (.-> read (..Array' read write)
                      (.List read)))
               (.function (list|+default default array)
                 (.loop (again [index (.i64_-# 1 (..size array))
                                output (`` (.is (.List (,, (.these (,, (.type_of default)))))
                                                {.#End}))])
                   (.if (.i64_=# (,, (.static ..underflow)) index)
                     output
                     (again (.i64_-# 1 index)
                            {.#Item (.if (..lacks? index array)
                                      default
                                      (..item index array))
                                    output})))))
          <default> <array>)])))

(`` (the .public list
      (template (list <default> <array>)
        [((.is (.All (_ read write)
                 (.-> (.Maybe read) (..Array' read write)
                      (.List read)))
               (.function (list default array)
                 (.when default
                   {.#Some default}
                   (,, (..list|+default default array))

                   {.#None}
                   (,, (..list|-default {.#End} array)))))
          <default> <array>)])))

(the .public =
  (template (= <//#=> <left/*> <right/*>)
    [((.is (.All (_ read write_left write_right)
             (.-> (equivalence.Equivalence read)
                  (.-> (..Array' read write_left) (..Array' read write_right)
                       .Bit)))
           (.function (= //#= left/* right/*)
             (.let [size (..size left/*)]
               (.and (.i64_=# (..size right/*) size)
                     (.loop (again [index 0])
                       (.if (.int_<# (.int size) (.int index))
                         (.if (..lacks? index left/*)
                           (..lacks? index right/*)
                           (.if (..lacks? index right/*)
                             .false
                             (.and (//#= (..item index left/*)
                                         (..item index right/*))
                                   (again (.i64_+# 1 index)))))
                         true))))))
      <//#=> <left/*> <right/*>)]))

(the .public composite
  (template (composite <left/*> <right/*>)
    [((.is (.All (_ of)
             (.-> (..Array' of .Nothing) (..Array' of .Nothing)
                  (..Array of)))
           (.function (composite left/* right/*)
             (.let [|left| (..size left/*)
                    |right| (..size right/*)]
               (.|> (..empty (.i64_+# |left| |right|))
                    (..copy! |left| 0 left/* 0)
                    (..copy! |right| 0 right/* |left|)))))
      <left/*> <right/*>)]))

(the .public mix
  (template (mix <$> <init> <it>)
    [((.is (.All (_ read write state)
             (.-> (.-> Nat read state state) state (..Array' read write)
                  state))
           (.function (mix $ init it)
             (.let [size (..size it)]
               (.loop (again [index 0
                              so_far init])
                 (.if (.int_<# (.int size) (.int index))
                   (.if (..lacks? index it)
                     (again (.i64_+# 1 index) so_far)
                     (again (.i64_+# 1 index) ($ index (..item index it) so_far)))
                   so_far)))))
      <$> <init> <it>)]))

(the .public each
  (template (each <$> <input>)
    [((.is (functor.Functor ..Array)
           (.function (each $ input)
             (..mix (.function (_ index item output)
                      (..has! index ($ item) output))
                    (..empty (..size input))
                    input)))
      <$> <input>)]))

(with_template [<name> <init> <op>]
  [(the .public <name>
     (template (<name> <?> <it>)
       [((.is (.All (_ read write)
                (.-> (predicate.Predicate read)
                     (predicate.Predicate (..Array' read write))))
              (.function (<name> ? it)
                (.let [size (..size it)]
                  (.loop (again [index 0])
                    (.if (.int_<# (.int size) (.int index))
                      (.if (..lacks? index it)
                        (again (.i64_+# 1 index))
                        (<op> (? (..item index it))
                              (again (.i64_+# 1 index))))
                      <init>)))))
         <?> <it>)]))]

  [every? .true  and]
  [any?   .false or]
  )

(the .public no_one
  Error
  (location.with (location.here)
    "No one value to be found."))

(the .public one
  (template (one <?> <it>)
    [((.is (.All (_ read read' write)
             (.-> (.-> read (.Maybe read')) (..Array' read write)
                  (try.Try read')))
           (.function (one ? it)
             (.let [size (..size it)]
               (.loop (again [index 0])
                 (.if (.int_<# (.int size) (.int index))
                   (with_expansions [<again> (again (.i64_+# 1 index))]
                     (.if (..lacks? index it)
                       <again>
                       (.when (? (..item index it))
                         {.#None}
                         <again>

                         {.#Some output}
                         {try.#Success output})))
                   {try.#Failure ..no_one})))))
      <?> <it>)]))
