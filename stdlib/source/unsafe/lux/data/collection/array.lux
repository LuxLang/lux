... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except list type)
   [abstract
    ["[0]" equivalence]
    ["[0]" functor]]
   [control
    ["[0]" try]]
   [function
    ["[0]" predicate]]
   [data
    [collection
     ["[0]" list]]]
   [type
    ["[0]" variance]]
   [meta
    ["[0]" provenance]]]])

(the _expansion#let (.in_module# .prelude .expansion#let))
(the with_template' (.in_module# .prelude .with_template))
(the template#macro (.in_module# .prelude .template#macro))

(the .public nominal
  "#Array")

(with_template' [<item> <array>]
  [(.every .public <array>
     {.#Nominal ..nominal {.#Item <item> {.#End}}})]

  [(variance.Mutable read write) (Array' read write)]
  [(variance.Mutable of of) (Array of)]
  )

(every .public Index
  Natural)

(<| (_expansion#let [<index_type> (.Nominal "java.lang.Long")
                     <item_type> (.Nominal "java.lang.Object")])
    (these (for .jvm (the jvm_integer
                       (template#macro
                        (jvm_integer value)
                        [(.|> value
                              (.as <index_type>)
                              .jvm_object_cast#
                              .jvm_conversion_long_to_int#)]))
                (these))
           
           (`` (the .public empty
                 (template#macro
                  (empty <size>)
                  [((.is (.for_any (_ of)
                           (.-> ..Index
                                (..Array of)))
                         (.function (empty size)
                           (.as_expected
                            (.for .jvm
                                  (|> (,, (..jvm_integer size))
                                      .jvm_array_new_object#
                                      (.is (..Array <item_type>)))

                                  .js
                                  (.js_array_new# size)
                                  
                                  .python
                                  (.python_array_new# size)
                                  
                                  .lua
                                  (.lua_array_new# size)
                                  
                                  .ruby
                                  (.ruby_array_new# size)
                                  
                                  .php
                                  ("php array new" size)))))
                    <size>)])))

           (`` (the .public size
                 (template#macro
                  (size <array>)
                  [((.is (.for_any (_ read write)
                           (.-> (..Array' read write)
                                ..Index))
                         (.function (size array)
                           (.for .jvm
                                 (.|> array
                                      .jvm_array_length_object#
                                      .jvm_conversion_int_to_long#
                                      .jvm_object_cast#
                                      (.is <index_type>)
                                      (.as ..Index))

                                 .js
                                 (.js_array_length# array)
                                 
                                 .python
                                 (.python_array_length# array)
                                 
                                 .lua
                                 (.lua_array_length# array)
                                 
                                 .ruby
                                 (.ruby_array_length# array)
                                 
                                 .php
                                 ("php array length" array))))
                    <array>)])))

           (the lacks?'
             (template#macro
              (lacks?' <read!> <null?> index array)
              [(<null?> (<read!> index array))]))

           (`` (the .public lacks?
                 (template#macro
                  (lacks? <index> <array>)
                  [((.is (.for_any (_ read write)
                           (.-> ..Index (..Array' read write)
                                .Bit))
                         (.function (lacks? index array)
                           (.let [size (..size array)]
                             (.if (.int_<# (.integer size) (.integer index))
                               (.for .jvm
                                     (.|> array
                                          (.jvm_array_read_object# (,, (jvm_integer index)))
                                          .jvm_object_null?#)

                                     .js
                                     (,, (lacks?' .js_array_read# .js_object_undefined?# index array))
                                     
                                     .python
                                     (,, (lacks?' .python_array_read# .python_object_none?# index array))
                                     
                                     .lua
                                     (,, (lacks?' .lua_array_read# .lua_object_nil?# index array))
                                     
                                     .ruby
                                     (,, (lacks?' .ruby_array_read# .ruby_object_nil?# index array))
                                     
                                     .php
                                     (,, (lacks?' "php array read" "php object null?" index array)))
                               .true))))
                    <index> <array>)])))

           (the .public has?
             (template#macro
              (has? index array)
              [(.not (..lacks? index array))]))

           (`` (the .public item
                 (template#macro
                  (item <index> <array>)
                  [((.is (.for_any (_ read write)
                           (.-> ..Index (..Array' read write)
                                read))
                         (.function (item index array)
                           (.as_expected
                            (.for .jvm
                                  (.jvm_array_read_object# (,, (jvm_integer index)) array)

                                  .js
                                  (.js_array_read# index array)
                                  
                                  .python
                                  (.python_array_read# index array)
                                  
                                  .lua
                                  (.lua_array_read# index array)
                                  
                                  .ruby
                                  (.ruby_array_read# index array)
                                  
                                  .php
                                  ("php array read" index array)))))
                    <index> <array>)])))

           (`` (the .public has!
                 (template#macro
                  (has! <index> <value> <array>)
                  [((.is (.for_any (_ read write)
                           (.-> ..Index write (..Array' read write)
                                (..Array' read write)))
                         (.function (has! index value array)
                           (.for .jvm
                                 (.|> array
                                      (.jvm_array_write_object# (,, (jvm_integer index)) value)
                                      .as_expected)

                                 .js
                                 (.js_array_write# index (.as_expected value) array)
                                 
                                 .python
                                 (.python_array_write# index (.as_expected value) array)
                                 
                                 .lua
                                 (.lua_array_write# index (.as_expected value) array)
                                 
                                 .ruby
                                 (.ruby_array_write# index (.as_expected value) array)
                                 
                                 .php
                                 ("php array write" index (.as_expected value) array))))
                    <index> <value> <array>)])))

           (`` (the .public lacks!
                 (template#macro
                  (lacks! <index> <array>)
                  [((.is (.for_any (_ read write)
                           (.-> ..Index (..Array' read write)
                                (..Array' read write)))
                         (.function (lacks! index array)
                           (.let [size (..size array)]
                             (.if (.int_<# (.integer size) (.integer index))
                               (.for .jvm
                                     (..has! index (.as_expected (is <item_type> (.jvm_object_null#))) array)

                                     .js
                                     (.js_array_delete# index array)
                                     
                                     .python
                                     (.python_array_delete# index array)
                                     
                                     .lua
                                     (.lua_array_delete# index array)
                                     
                                     .ruby
                                     (.ruby_array_delete# index array)
                                     
                                     .php
                                     ("php array delete" index array))
                               array))))
                    <index> <array>)]))))
    )

(the .public revised!
  (template#macro
   (revised! <index> <$> <array>)
   [((.is (.for_any (_ read write)
            (.-> ..Index (.-> read write) (..Array' read write)
                 (..Array' read write)))
          (.function (revised! index $ array)
            (.if (..lacks? index array)
              array
              (..has! index ($ (..item index array)) array))))
     <index> <$> <array>)]))

(the .public upsert!
  (template#macro
   (upsert! <index> <default> <$> <array>)
   [((.is (.for_any (_ read write)
            (.-> ..Index read (.-> read write) (..Array' read write)
                 (..Array' read write)))
          (.function (upsert! index default $ array)
            (..has! index
                    ($ (.if (..lacks? index array)
                         default
                         (..item index array)))
                    array)))
     <index> <default> <$> <array>)]))

(the .public copy!
  (template#macro
   (copy! <length> <src_start> <src_array> <dest_start> <dest_array>)
   [((.is (.for_any (_ read write)
            (.-> ..Index ..Index (..Array' write .Nothing) ..Index (..Array' read write)
                 (..Array' read write)))
          (.function (copy! length src_start src_array dest_start dest_array)
            (.loop (again [offset 0])
              (.if (.int_<# (.integer length) (.integer offset))
                (.exec
                  (.if (..lacks? (.i64_+# offset src_start) src_array)
                    (..lacks! (.i64_+# offset dest_start) dest_array)
                    (..has! (.i64_+# offset dest_start)
                            (..item (.i64_+# offset src_start) src_array)
                            dest_array))
                  (again (.i64_+# 1 offset)))
                dest_array))))
     <length> <src_start> <src_array> <dest_start> <dest_array>)]))

(with_template' [<name> <when_lacks> <when_has>]
  [(the .public <name>
     (template#macro
      (<name> <array>)
      [((.is (.for_any (_ read write)
               (.-> (..Array' read write)
                    ..Index))
             (.function (occupancy array)
               (.let [size (..size array)]
                 (.loop (again [index 0
                                it 0])
                   (.if (.int_<# (.integer size) (.integer index))
                     (.if (..lacks? index array)
                       (again (.i64_+# 1 index) <when_lacks>)
                       (again (.i64_+# 1 index) <when_has>))
                     it)))))
        <array>)]))]

  [occupancy it (.i64_+# 1 it)]
  [vacancy (.i64_+# 1 it) it]
  )

(the .public only!
  (template#macro
   (only! <?> <it>)
   [((.is (.for_any (_ read write)
            (.-> (.-> read .Bit) (..Array' read write)
                 (..Array' read write)))
          (.function (only! ? it)
            (.let [size (..size it)]
              (.loop (again [index 0])
                (.if (.int_<# (.integer size) (.integer index))
                  (.exec
                    (.if (..lacks? index it)
                      it
                      (.if (? (..item index it))
                        it
                        (..lacks! index it)))
                    (again (.i64_+# 1 index)))
                  it)))))
     <?> <it>)]))

(the .public no_example
  Text
  (provenance.with (provenance.here)
    "No example to be found."))

(with_template' [<name> <predicate> <test> <type> <term>]
  [(the .public <name>
     (template#macro
      (<name> <?> <it>)
      [((.is (.for_any (_ read write)
               (.-> <predicate> (..Array' read write)
                    (try.Try <type>)))
             (.function (<name> ? it)
               (.let [size (..size it)]
                 (.loop (again [index 0])
                   (.if (.int_<# (.integer size) (.integer index))
                     (.if (..lacks? index it)
                       (again (.i64_+# 1 index))
                       (.let [it (..item index it)]
                         (.if <test>
                           {try.#Success <term>}
                           (again (.i64_+# 1 index)))))
                     {try.#Failure ..no_example})))))
        <?> <it>)]))]

  [example (.-> read .Bit) (? it) read it]
  [example' (.-> ..Index read .Bit) (? index it) [..Index read] [index it]]
  )

(the .public clone
  (template#macro
   (clone <it>)
   [((.is (.for_any (_ of)
            (.-> (..Array of)
                 (..Array of)))
          (.function (clone it)
            (.let [size (..size it)]
              (..copy! size 0 it 0 (..empty size)))))
     <it>)]))

(the .public of_list
  (template#macro
   (of_list <input>)
   [((.is (.for_any (_ of)
            (.-> (.List of)
                 (..Array of)))
          (.function (of_list input)
            (.let [size (list.size input)
                   output (..empty size)]
              (.loop (again [index 0
                             input input])
                (.when input
                  {.#End}
                  output
                  
                  {.#Item head tail}
                  (.exec
                    (..has! index head output)
                    (again (.i64_+# 1 index) tail)))))))
     <input>)]))

(the underflow
  ..Index
  (-- 0))

(`` (the list|-default
      (template#macro
       (list|-default <empty> <array>)
       [((.is (.for_any (_ read write)
                (.-> (.List read) (..Array' read write)
                     (.List read)))
              (.function (list|-default empty array)
                (.loop (again [index (.i64_-# 1 (..size array))
                               output empty])
                  (.if (.i64_=# (,, (.static ..underflow)) index)
                    output
                    (again (.i64_-# 1 index)
                           (.if (..lacks? index array)
                             output
                             {.#Item (..item index array) output}))))))
         <empty> <array>)])))

(`` (the list|+default
      (template#macro
       (list|+default <default> <array>)
       [((.is (.for_any (_ read write)
                (.-> read (..Array' read write)
                     (.List read)))
              (.function (list|+default default array)
                (.loop (again [index (.i64_-# 1 (..size array))
                               output (`` (.is (.List (,, (.these (,, (.type_of default)))))
                                               {.#End}))])
                  (.if (.i64_=# (,, (.static ..underflow)) index)
                    output
                    (again (.i64_-# 1 index)
                           {.#Item (.if (..lacks? index array)
                                     default
                                     (..item index array))
                                   output})))))
         <default> <array>)])))

(`` (the .public list
      (template#macro
       (list <default> <array>)
       [((.is (.for_any (_ read write)
                (.-> (.Maybe read) (..Array' read write)
                     (.List read)))
              (.function (list default array)
                (.when default
                  {.#Some default}
                  (,, (..list|+default default array))

                  {.#None}
                  (,, (..list|-default {.#End} array)))))
         <default> <array>)])))

(the .public =
  (template#macro
   (= <//#=> <left/*> <right/*>)
   [((.is (.for_any (_ read write_left write_right)
            (.-> (equivalence.Equivalence read)
                 (.-> (..Array' read write_left) (..Array' read write_right)
                      .Bit)))
          (.function (= //#= left/* right/*)
            (.let [size (..size left/*)]
              (.and (.i64_=# (..size right/*) size)
                    (.loop (again [index 0])
                      (.if (.int_<# (.integer size) (.integer index))
                        (.if (..lacks? index left/*)
                          (..lacks? index right/*)
                          (.if (..lacks? index right/*)
                            .false
                            (.and (//#= (..item index left/*)
                                        (..item index right/*))
                                  (again (.i64_+# 1 index)))))
                        true))))))
     <//#=> <left/*> <right/*>)]))

(the .public composite
  (template#macro
   (composite <left/*> <right/*>)
   [((.is (.for_any (_ of)
            (.-> (..Array' of .Nothing) (..Array' of .Nothing)
                 (..Array of)))
          (.function (composite left/* right/*)
            (.let [|left| (..size left/*)
                   |right| (..size right/*)]
              (.|> (..empty (.i64_+# |left| |right|))
                   (..copy! |left| 0 left/* 0)
                   (..copy! |right| 0 right/* |left|)))))
     <left/*> <right/*>)]))

(the .public mix
  (template#macro
   (mix <$> <init> <it>)
   [((.is (.for_any (_ read write state)
            (.-> (.-> ..Index read state state) state (..Array' read write)
                 state))
          (.function (mix $ init it)
            (.let [size (..size it)]
              (.loop (again [index 0
                             so_far init])
                (.if (.int_<# (.integer size) (.integer index))
                  (.if (..lacks? index it)
                    (again (.i64_+# 1 index) so_far)
                    (again (.i64_+# 1 index) ($ index (..item index it) so_far)))
                  so_far)))))
     <$> <init> <it>)]))

(the .public each
  (template#macro
   (each <$> <input>)
   [((.is (functor.Functor ..Array)
          (.function (each $ input)
            (..mix (.function (_ index item output)
                     (..has! index ($ item) output))
                   (..empty (..size input))
                   input)))
     <$> <input>)]))

(with_template' [<name> <init> <op>]
  [(the .public <name>
     (template#macro
      (<name> <?> <it>)
      [((.is (.for_any (_ read write)
               (.-> (predicate.Predicate read)
                    (predicate.Predicate (..Array' read write))))
             (.function (<name> ? it)
               (.let [size (..size it)]
                 (.loop (again [index 0])
                   (.if (.int_<# (.integer size) (.integer index))
                     (.if (..lacks? index it)
                       (again (.i64_+# 1 index))
                       (<op> (? (..item index it))
                             (again (.i64_+# 1 index))))
                     <init>)))))
        <?> <it>)]))]

  [every? .true  and]
  [any?   .false or]
  )

(the .public no_one
  Error
  (provenance.with (provenance.here)
    "No one value to be found."))

(the .public one
  (template#macro
   (one <?> <it>)
   [((.is (.for_any (_ read read' write)
            (.-> (.-> read (.Maybe read')) (..Array' read write)
                 (try.Try read')))
          (.function (one ? it)
            (.let [size (..size it)]
              (.loop (again [index 0])
                (.if (.int_<# (.integer size) (.integer index))
                  (<| (.._expansion#let [<again> (again (.i64_+# 1 index))])
                      (.if (..lacks? index it)
                        <again>
                        (.when (? (..item index it))
                          {.#None}
                          <again>

                          {.#Some output}
                          {try.#Success output})))
                  {try.#Failure ..no_one})))))
     <?> <it>)]))
