... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [function
    ["[0]" inline]]
   [data
    [collection
     ["[0]" array
      ["[1]" \\unsafe]]]]
   [math
    ["[0]" number (.only)
     ["[0]" /64]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]]])

(for .jvm
     (these (every .public Binary
              (ffi.type [byte]))

            (ffi.the java/lang/Object
              "[1]:[0]")
            
            (ffi.the java/lang/System
              "[1]:[0]"
              ("static" arraycopy [java/lang/Object int java/lang/Object int int] void))

            (ffi.the java/util/Arrays
              "[1]:[0]"
              ("static" copyOfRange [[byte] int int] [byte])
              ("static" equals [[byte] [byte]] boolean)))

     .js
     (these (ffi.the ArrayBuffer
              "[1]:[0]")
            (ffi.the Uint8Array
              "[1]:[0]")
            
            (every .public Binary
              Uint8Array))

     .python
     (every .public Binary
       (Nominal "bytearray"))

     ... Default
     (every .public Binary
       (.Array (I64 Any))))

(every .public Index
  Natural)

(`` (expansion.let [<size> (.is .Natural size)]
      (template.the .public (empty size)
        [(is ..Binary
             (for .jvm
                  (.is ..Binary (ffi.array byte <size>))

                  .js
                  (.|> <size>
                       .integer
                       .int_f64#
                       []
                       (.js_object_new# (.js_constant# "ArrayBuffer"))
                       []
                       (.js_object_new# (.js_constant# "Uint8Array"))
                       (.as (-> Any ..Binary)))

                  .python
                  (.|> <size>
                       []
                       (.python_of# (.as (-> Any ffi.Function) (.python_constant# "bytearray")))
                       (.as (-> Any ..Binary)))

                  ... Default
                  (array.empty <size>)))])))

(`` (expansion.let [<it> (.is ..Binary it)]
      (template.the .public (size it)
        [(.is .Natural
              (.for .jvm
                    (ffi.length <it>)

                    .js
                    (.|> <it>
                         (.js_object_get# "length")
                         (.as (-> Any .Decimal))
                         .f64_int#
                         .natural)

                    .python
                    (.|> <it>
                         (.as (-> Any (.Array (.I64 .Any))))
                         array.size)

                    ... Default
                    (array.size <it>)))])))

(the byte_mask
  Natural
  (/64.mask /64.bits_per_byte))

(expansion.let [<byte_mask> (.static ..byte_mask)
                <it> (.is ..Binary it)
                <index> (.is ..Index index)]
  (template.the .public (bits_08 index it)
    [(.<| (.as (-> (.I64 .Any) .I64))
          (`` (.for .jvm
                    (.|> <it>
                         (ffi.read! <index>)
                         ffi.byte_to_long
                         (.as (-> (.Nominal "java.lang.Long") .I64))
                         (.i64_and# <byte_mask>))

                    .js
                    (.|> <it>
                         (.as (-> Any (.Array .Decimal)))
                         (.array_its# <index>)
                         (.as (-> Any .Decimal))
                         .f64_int#
                         .i64)

                    .python
                    (.|> <it>
                         (.as (-> Any (.Array .I64)))
                         (array.item <index>))

                    ... Default
                    (.if (array.lacks? <index> <it>)
                         (.i64 0)
                         (array.item <index> <it>)))))]))

(template.the .public (bits_16 index' it')
  [(.<| (.let [index (.is ..Index index')
               it (.is ..Binary it')])
        (.as (-> (.I64 .Any) .I64))
        (.all .i64_or#
              (.i64_left# 08 (..bits_08 index it))
              (..bits_08 (.i64_+# 1 index) it)))])

(template.the .public (bits_32 index' it')
  [(.<| (.let [index (.is ..Index index')
               it (.is ..Binary it')])
        (.as (-> (.I64 .Any) .I64))
        (.all .i64_or#
              (.i64_left# 24 (..bits_08 index it))
              (.i64_left# 16 (..bits_08 (.i64_+# 1 index) it))
              (.i64_left# 08 (..bits_08 (.i64_+# 2 index) it))
              (..bits_08 (.i64_+# 3 index) it)))])

(template.the .public (bits_64 index' it')
  [(.<| (.let [index (.is ..Index index')
               it (.is ..Binary it')])
        (.as (-> (.I64 .Any) .I64))
        (.all .i64_or#
              (.i64_left# 56 (..bits_08 index it))
              (.i64_left# 48 (..bits_08 (.i64_+# 1 index) it))
              (.i64_left# 40 (..bits_08 (.i64_+# 2 index) it))
              (.i64_left# 32 (..bits_08 (.i64_+# 3 index) it))
              (.i64_left# 24 (..bits_08 (.i64_+# 4 index) it))
              (.i64_left# 16 (..bits_08 (.i64_+# 5 index) it))
              (.i64_left# 08 (..bits_08 (.i64_+# 6 index) it))
              (..bits_08 (.i64_+# 7 index) it)))])

(expansion.let [<byte> (number.base_16 "FF")
                <it> (.is ..Binary it)
                <index> (.is ..Index index)
                <value> (.is (.I64 .Any) value)]
  (`` (template.the .public (has_08! index value it)
        [(.is ..Binary
              (.for .jvm
                    (ffi.write! <index>
                                (|> <value>
                                    (.as (-> (.I64 .Any) (.Nominal "java.lang.Long")))
                                    ffi.long_to_byte)
                                <it>)

                    .js
                    (.|> <it>
                         (.as (-> ..Binary (.Array .Decimal)))
                         (.array_has# <index>
                                      (.|> <value>
                                           .integer
                                           (.i64_and# (.integer <byte>))
                                           .int_f64#
                                           .as_expected))
                         (.as (-> Any ..Binary)))
                    
                    .python
                    (.|> <it>
                         (.as (-> ..Binary (.Array (.I64 .Any))))
                         (array.has! <index> (.|> <value> (.i64_and# <byte>) (.is (.I64 .Any))))
                         (.as (-> Any ..Binary)))

                    ... Default
                    (array.has! <index> (.|> <value> .integer (.i64_and# (.integer <byte>))) <it>)))])))

(template.the .public (has_16! index' value' it)
  [(.let [index (.is ..Index index')
          value (.is (.I64 .Any) value')]
     (.|> it
          (..has_08! index (.i64_right# 08 value))
          (..has_08! (.i64_+# 1 index) value)))])

(template.the .public (has_32! index' value' it)
  [(.let [index (.is ..Index index')
          value (.is (.I64 .Any) value')]
     (.|> it
          (..has_08! index (.i64_right# 24 value))
          (..has_08! (.i64_+# 1 index) (.i64_right# 16 value))
          (..has_08! (.i64_+# 2 index) (.i64_right# 08 value))
          (..has_08! (.i64_+# 3 index) value)))])

(`` (template.the .public (has_64! index' value' it)
      [(.let [index (.is ..Index index')
              value (.is (.I64 .Any) value')]
         (.|> it
              (..has_08! index (.i64_right# 56 value))
              (..has_08! (.i64_+# 1 index) (.i64_right# 48 value))
              (..has_08! (.i64_+# 2 index) (.i64_right# 40 value))
              (..has_08! (.i64_+# 3 index) (.i64_right# 32 value))
              (..has_08! (.i64_+# 4 index) (.i64_right# 24 value))
              (..has_08! (.i64_+# 5 index) (.i64_right# 16 value))
              (..has_08! (.i64_+# 6 index) (.i64_right# 08 value))
              (..has_08! (.i64_+# 7 index) value)))]))

(expansion.let [<reference> (.is ..Binary reference')
                <sample> (.is ..Binary sample')]
  (`` (template.the .public (= reference' sample')
        [(.for .jvm
               (ffi.of_boolean (,, (java/util/Arrays:equals [<reference> <sample>])))

               ... else
               (.let [reference <reference>
                      sample <sample>
                      limit (..size reference)]
                 (.and (.i64_=# limit (..size sample))
                       (.loop (again [index 0])
                         (.if (.i64_=# limit index)
                              .true
                              (.and (.i64_=# (..bits_08 index reference)
                                             (..bits_08 index sample))
                                    (again (.i64_+# 1 index))))))))])))

... TODO: Turn into a template ASAP.
(`` (the .public copy!
      (inline.macro (_ bytes source_offset source target_offset target)
        (-> .Natural ..Index ..Binary ..Index ..Binary
            ..Binary)
        (.for .jvm
              (.exec
                (java/lang/System:arraycopy [source (ffi.as_int (.integer source_offset))
                                             target (ffi.as_int (.integer target_offset))
                                             (ffi.as_int (.integer bytes))])
                target)
              
              ... Default
              (.loop (again [index 0])
                (.if (.int_<# (.integer bytes) (.integer index))
                     (.exec
                       (..has_08! (.i64_+# target_offset index)
                                  (..bits_08 (.i64_+# source_offset index) source)
                                  target)
                       (again (.i64_+# 1 index)))
                     target))))))

... TODO: Turn into a template ASAP.
(the .public slice
  (inline.macro (_ offset size binary)
    (-> ..Index .Natural ..Binary
        ..Binary)
    (.for .jvm
          (.let [limit (.i64_+# size offset)]
            (java/util/Arrays:copyOfRange [binary
                                           (ffi.as_int (.integer offset))
                                           (ffi.as_int (.integer limit))]))
          
          ... Default
          (..copy! size offset binary 0 (..empty size)))))
