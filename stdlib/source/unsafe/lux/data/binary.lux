... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["[0]" ffi]
   [control
    [function
     [inline (.only inlined)]]]
   [data
    [collection
     ["[0]" array
      ["[1]" \\unsafe]]]]
   [math
    [number (.only hex)
     ["[0]" i64]]]
   [meta
    [compiler
     ["@" target]]]]])

(with_expansions [<jvm> (these (type .public Binary
                                 (ffi.type [byte]))

                               (ffi.import java/lang/Object
                                 "[1]::[0]")
                               
                               (ffi.import java/lang/System
                                 "[1]::[0]"
                                 ("static" arraycopy [java/lang/Object int java/lang/Object int int] void))

                               (ffi.import java/util/Arrays
                                 "[1]::[0]"
                                 ("static" copyOfRange [[byte] int int] [byte])
                                 ("static" equals [[byte] [byte]] boolean)))]
  (for @.old (these <jvm>)
       @.jvm (these <jvm>)

       @.js
       (these (ffi.import ArrayBuffer
                "[1]::[0]")
              (ffi.import Uint8Array
                "[1]::[0]")
              
              (type .public Binary
                Uint8Array))

       @.python
       (type .public Binary
         (Nominal "bytearray"))

       @.scheme
       (these (type .public Binary
                (Nominal "bytevector"))
              
              (ffi.import (make-bytevector [Nat] Binary))
              (ffi.import (bytevector-u8-ref [Binary Nat] I64))
              (ffi.import (bytevector-u8-set! [Binary Nat (I64 Any)] Any))
              (ffi.import (bytevector-length [Binary] Nat)))

       ... Default
       (type .public Binary
         (array.Array (I64 Any)))))

(`` (with_expansions [<size> (.is .Nat size)
                      <jvm> (ffi.array byte <size>)
                      <jvm> (.is ..Binary <jvm>)]
      (def .public empty
        (template (empty size)
          [(is ..Binary
               (for (,, (.static @.old)) <jvm>
                    (,, (.static @.jvm)) <jvm>

                    (,, (.static @.js))
                    (.|> <size>
                         .int
                         .int_f64#
                         []
                         (.js_object_new# (.js_constant# "ArrayBuffer"))
                         []
                         (.js_object_new# (.js_constant# "Uint8Array"))
                         (.as ..Binary))

                    (,, (.static @.python))
                    (.|> <size>
                         []
                         (.python_apply# (.as ffi.Function (.python_constant# "bytearray")))
                         (.as ..Binary))

                    (,, (.static @.scheme))
                    (..make-bytevector <size>)

                    ... Default
                    (array.empty <size>)))]))))

(`` (with_expansions [<it> (.is ..Binary it)
                      <jvm> (ffi.length <it>)]
      (def .public size
        (template (size it)
          [(.is .Nat
                (.for (,, (.static @.old)) <jvm>
                      (,, (.static @.jvm)) <jvm>

                      (,, (.static @.js))
                      (.|> <it>
                           (.js_object_get# "length")
                           (.as .Frac)
                           .f64_int#
                           .nat)

                      (,, (.static @.python))
                      (.|> <it>
                           (.as (array.Array (.I64 .Any)))
                           .python_array_length#)

                      (,, (.static @.scheme))
                      (..bytevector-length [<it>])

                      ... Default
                      (array.size <it>)))]))))

(def byte_mask
  Nat
  (i64.mask i64.bits_per_byte))

(with_expansions [<byte_mask> (.static ..byte_mask)
                  <it> (.is ..Binary it)
                  <index> (.is .Nat index)
                  <jvm> (ffi.read! <index> <it>)
                  <jvm> (ffi.byte_to_long <jvm>)
                  <jvm> (.|> <jvm>
                             (.as .I64)
                             (.i64_and# <byte_mask>))]
  (def .public bits_8
    (template (bits_8 index it)
      [(.<| (.as .I64)
            (.is (.I64 .Any))
            (`` (.for (,, (.static @.old)) (,, <jvm>)
                      (,, (.static @.jvm)) (,, <jvm>)

                      (,, (.static @.js))
                      (.|> <it>
                           (.as (array.Array .Frac))
                           (.js_array_read# <index>)
                           (.as .Frac)
                           .f64_int#
                           .i64)

                      (,, (.static @.python))
                      (.|> <it>
                           (.as (array.Array .I64))
                           (.python_array_read# <index>))

                      (,, (.static @.scheme))
                      (..bytevector-u8-ref [<it> <index>])

                      ... Default
                      (.if (array.lacks? <index> <it>)
                        (.i64 0)
                        (array.item <index> <it>)))))])))

(def .public bits_16
  (template (bits_16 index' it')
    [(.<| (.let [index (.is Nat index')
                 it (.is ..Binary it')])
          (.as .I64)
          (.is (.I64 .Any))
          (.all .i64_or#
                (.i64_left# 08 (..bits_8 index it))
                (..bits_8 (.i64_+# 1 index) it)))]))

(def .public bits_32
  (template (bits_32 index' it')
    [(.<| (.let [index (.is Nat index')
                 it (.is ..Binary it')])
          (.as .I64)
          (.is (.I64 .Any))
          (.all .i64_or#
                (.i64_left# 24 (..bits_8 index it))
                (.i64_left# 16 (..bits_8 (.i64_+# 1 index) it))
                (.i64_left# 08 (..bits_8 (.i64_+# 2 index) it))
                (..bits_8 (.i64_+# 3 index) it)))]))

(def .public bits_64
  (template (bits_64 index' it')
    [(.<| (.let [index (.is Nat index')
                 it (.is ..Binary it')])
          (.as .I64)
          (.is (.I64 .Any))
          (.all .i64_or#
                (.i64_left# 56 (..bits_8 index it))
                (.i64_left# 48 (..bits_8 (.i64_+# 1 index) it))
                (.i64_left# 40 (..bits_8 (.i64_+# 2 index) it))
                (.i64_left# 32 (..bits_8 (.i64_+# 3 index) it))
                (.i64_left# 24 (..bits_8 (.i64_+# 4 index) it))
                (.i64_left# 16 (..bits_8 (.i64_+# 5 index) it))
                (.i64_left# 08 (..bits_8 (.i64_+# 6 index) it))
                (..bits_8 (.i64_+# 7 index) it)))]))

(with_expansions [<byte> (hex "FF")
                  <it> (.is ..Binary it)
                  <index> (.is .Nat index)
                  <value> (.is (.I64 .Any) value)
                  <jvm_value> (`` (.for (,, (.static @.old))
                                        (.as .Int <value>)

                                        (,, (.static @.jvm))
                                        (.as (.Nominal "java.lang.Long") <value>)
                                        <value>))
                  <jvm_value> <jvm_value>
                  <jvm_value> (ffi.long_to_byte <jvm_value>)
                  <jvm> (ffi.write! <index> <jvm_value> <it>)]
  (`` (def .public has_8!
        (template (has_8! index value it)
          [(.is ..Binary
                (.for (,, (.static @.old)) <jvm>
                      (,, (.static @.jvm)) <jvm>

                      (,, (.static @.js))
                      (.|> <it>
                           (.is ..Binary)
                           (.as (array.Array .Frac))
                           (.js_array_write# <index>
                                             (.|> <value>
                                                  .int
                                                  (.i64_and# (.int <byte>))
                                                  .int_f64#
                                                  .as_expected))
                           (.as ..Binary))
                      
                      (,, (.static @.python))
                      (.|> <it>
                           (.is ..Binary)
                           (.as (array.Array (.I64 .Any)))
                           (.python_array_write# <index> (.|> <value> (.i64_and# <byte>) (.is (.I64 .Any))))
                           (.as ..Binary))
                      
                      (,, (.static @.scheme))
                      (.let [it' <it>]
                        (.exec
                          (..bytevector-u8-set! [it' <index> <value>])
                          it'))

                      ... Default
                      (array.has! <index> (.|> <value> .int (.i64_and# (.int <byte>))) <it>)))]))))

(def .public has_16!
  (template (has_16! index' value' it)
    [(.let [index (.is .Nat index')
            value (.is (.I64 .Any) value')]
       (.|> it
            (..has_8! index (.i64_right# 08 value))
            (..has_8! (.i64_+# 1 index) value)))]))

(def .public has_32!
  (template (has_32! index' value' it)
    [(.let [index (.is .Nat index')
            value (.is (.I64 .Any) value')]
       (.|> it
            (..has_8! index (.i64_right# 24 value))
            (..has_8! (.i64_+# 1 index) (.i64_right# 16 value))
            (..has_8! (.i64_+# 2 index) (.i64_right# 08 value))
            (..has_8! (.i64_+# 3 index) value)))]))

(`` (def .public has_64!
      (template (has_64! index' value' it)
        [(.let [index (.is .Nat index')
                value (.is (.I64 .Any) value')]
           (.for (,, (.static @.scheme)) (.let [write_high (.is (.-> ..Binary ..Binary)
                                                                (.|>> (..has_8! index (.i64_right# 56 value))
                                                                      (..has_8! (.i64_+# 1 index) (.i64_right# 48 value))
                                                                      (..has_8! (.i64_+# 2 index) (.i64_right# 40 value))
                                                                      (..has_8! (.i64_+# 3 index) (.i64_right# 32 value))))
                                                write_low (.is (.-> ..Binary ..Binary)
                                                               (.|>> (..has_8! (.i64_+# 4 index) (.i64_right# 24 value))
                                                                     (..has_8! (.i64_+# 5 index) (.i64_right# 16 value))
                                                                     (..has_8! (.i64_+# 6 index) (.i64_right# 08 value))
                                                                     (..has_8! (.i64_+# 7 index) value)))]
                                           (.|> it
                                                write_high
                                                write_low))
                 (.|> it
                      (..has_8! index (.i64_right# 56 value))
                      (..has_8! (.i64_+# 1 index) (.i64_right# 48 value))
                      (..has_8! (.i64_+# 2 index) (.i64_right# 40 value))
                      (..has_8! (.i64_+# 3 index) (.i64_right# 32 value))
                      (..has_8! (.i64_+# 4 index) (.i64_right# 24 value))
                      (..has_8! (.i64_+# 5 index) (.i64_right# 16 value))
                      (..has_8! (.i64_+# 6 index) (.i64_right# 08 value))
                      (..has_8! (.i64_+# 7 index) value))))])))

(with_expansions [<reference> (.is ..Binary reference')
                  <sample> (.is ..Binary sample')
                  <jvm> (java/util/Arrays::equals <reference> <sample>)
                  <jvm> (ffi.of_boolean <jvm>)]
  (`` (def .public =
        (template (= reference' sample')
          [(.for (,, (.static @.old)) <jvm>
                 (,, (.static @.jvm)) <jvm>
                 (.let [reference <reference>
                        sample <sample>
                        limit (..size reference)]
                   (.and (.i64_=# limit (..size sample))
                         (.loop (again [index 0])
                           (.if (.i64_=# limit index)
                             .true
                             (.and (.i64_=# (..bits_8 index reference)
                                            (..bits_8 index sample))
                                   (again (.i64_+# 1 index))))))))]))))

... TODO: Turn into a template ASAP.
(`` (def .public copy!
      (inlined (_ bytes source_offset source target_offset target)
        (-> .Nat .Nat ..Binary Nat ..Binary ..Binary)
        (with_expansions [<jvm> (java/lang/System::arraycopy source (ffi.as_int (.int source_offset))
                                                             target (ffi.as_int (.int target_offset))
                                                             (ffi.as_int (.int bytes)))
                          <jvm> (.exec
                                  <jvm>
                                  target)]
          (.for (,, (.static @.old)) <jvm>
                (,, (.static @.jvm)) <jvm>
                
                ... Default
                (.loop (again [index 0])
                  (.if (.int_<# (.int bytes) (.int index))
                    (.exec
                      (..has_8! (.i64_+# target_offset index)
                                (..bits_8 (.i64_+# source_offset index) source)
                                target)
                      (again (.i64_+# 1 index)))
                    target)))))))

... TODO: Turn into a template ASAP.
(`` (with_expansions [<jvm> (java/util/Arrays::copyOfRange binary
                                                           (ffi.as_int (.int offset))
                                                           (ffi.as_int (.int limit)))
                      <jvm> (.let [limit (.i64_+# size offset)]
                              <jvm>)]
      (def .public slice
        (inlined (_ offset size binary)
          (-> .Nat .Nat ..Binary ..Binary)
          (.for (,, (.static @.old)) <jvm>
                (,, (.static @.jvm)) <jvm>
                
                ... Default
                (..copy! size offset binary 0 (..empty size)))))))
