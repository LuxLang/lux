... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [control
    [function
     [inline (.only inlined)]]]
   [data
    [collection
     ["[0]" array
      ["[1]" \\unsafe]]]]
   [math
    [number (.only hex)
     ["[0]" i64]]]
   [meta
    [macro
     ["[0]" expansion]
     ["[0]" template]]]]])

(for .jvm
     (these (every .public Binary
              (ffi.type [byte]))

            (ffi.import java/lang/Object
              "[1]::[0]")
            
            (ffi.import java/lang/System
              "[1]::[0]"
              ("static" arraycopy [java/lang/Object int java/lang/Object int int] void))

            (ffi.import java/util/Arrays
              "[1]::[0]"
              ("static" copyOfRange [[byte] int int] [byte])
              ("static" equals [[byte] [byte]] boolean)))

     .js
     (these (ffi.import ArrayBuffer
              "[1]::[0]")
            (ffi.import Uint8Array
              "[1]::[0]")
            
            (every .public Binary
              Uint8Array))

     .python
     (every .public Binary
       (Nominal "bytearray"))

     .scheme
     (these (every .public Binary
              (Nominal "bytevector"))
            
            (ffi.import (make-bytevector [Natural] Binary))
            (ffi.import (bytevector-u8-ref [Binary Natural] I64))
            (ffi.import (bytevector-u8-set! [Binary Natural (I64 Any)] Any))
            (ffi.import (bytevector-length [Binary] Natural)))

     ... Default
     (every .public Binary
       (array.Array (I64 Any))))

(every .public Index
  Natural)

(`` (expansion.let [<size> (.is .Natural size)]
      (the .public empty
        (template.macro (empty size)
          [(is ..Binary
               (for .jvm
                    (.is ..Binary (ffi.array byte <size>))

                    .js
                    (.|> <size>
                         .integer
                         .int_f64#
                         []
                         (.js_object_new# (.js_constant# "ArrayBuffer"))
                         []
                         (.js_object_new# (.js_constant# "Uint8Array"))
                         (.as ..Binary))

                    .python
                    (.|> <size>
                         []
                         (.python_apply# (.as ffi.Function (.python_constant# "bytearray")))
                         (.as ..Binary))

                    .scheme
                    (..make-bytevector <size>)

                    ... Default
                    (array.empty <size>)))]))))

(`` (expansion.let [<it> (.is ..Binary it)]
      (the .public size
        (template.macro (size it)
          [(.is .Natural
                (.for .jvm
                      (ffi.length <it>)

                      .js
                      (.|> <it>
                           (.js_object_get# "length")
                           (.as .Decimal)
                           .f64_int#
                           .natural)

                      .python
                      (.|> <it>
                           (.as (array.Array (.I64 .Any)))
                           .python_array_length#)

                      .scheme
                      (..bytevector-length [<it>])

                      ... Default
                      (array.size <it>)))]))))

(the byte_mask
  Natural
  (i64.mask i64.bits_per_byte))

(expansion.let [<byte_mask> (.static ..byte_mask)
                <it> (.is ..Binary it)
                <index> (.is ..Index index)]
  (the .public bits_08
    (template.macro (bits_08 index it)
      [(.<| (.as .I64)
            (.is (.I64 .Any))
            (`` (.for .jvm
                      (.|> <it>
                           (ffi.read! <index>)
                           ffi.byte_to_long
                           (.as .I64)
                           (.i64_and# <byte_mask>))

                      .js
                      (.|> <it>
                           (.as (array.Array .Decimal))
                           (.js_array_read# <index>)
                           (.as .Decimal)
                           .f64_int#
                           .i64)

                      .python
                      (.|> <it>
                           (.as (array.Array .I64))
                           (.python_array_read# <index>))

                      .scheme
                      (..bytevector-u8-ref [<it> <index>])

                      ... Default
                      (.if (array.lacks? <index> <it>)
                        (.i64 0)
                        (array.item <index> <it>)))))])))

(the .public bits_16
  (template.macro (bits_16 index' it')
    [(.<| (.let [index (.is ..Index index')
                 it (.is ..Binary it')])
          (.as .I64)
          (.is (.I64 .Any))
          (.all .i64_or#
                (.i64_left# 08 (..bits_08 index it))
                (..bits_08 (.i64_+# 1 index) it)))]))

(the .public bits_32
  (template.macro (bits_32 index' it')
    [(.<| (.let [index (.is ..Index index')
                 it (.is ..Binary it')])
          (.as .I64)
          (.is (.I64 .Any))
          (.all .i64_or#
                (.i64_left# 24 (..bits_08 index it))
                (.i64_left# 16 (..bits_08 (.i64_+# 1 index) it))
                (.i64_left# 08 (..bits_08 (.i64_+# 2 index) it))
                (..bits_08 (.i64_+# 3 index) it)))]))

(the .public bits_64
  (template.macro (bits_64 index' it')
    [(.<| (.let [index (.is ..Index index')
                 it (.is ..Binary it')])
          (.as .I64)
          (.is (.I64 .Any))
          (.all .i64_or#
                (.i64_left# 56 (..bits_08 index it))
                (.i64_left# 48 (..bits_08 (.i64_+# 1 index) it))
                (.i64_left# 40 (..bits_08 (.i64_+# 2 index) it))
                (.i64_left# 32 (..bits_08 (.i64_+# 3 index) it))
                (.i64_left# 24 (..bits_08 (.i64_+# 4 index) it))
                (.i64_left# 16 (..bits_08 (.i64_+# 5 index) it))
                (.i64_left# 08 (..bits_08 (.i64_+# 6 index) it))
                (..bits_08 (.i64_+# 7 index) it)))]))

(expansion.let [<byte> (hex "FF")
                <it> (.is ..Binary it)
                <index> (.is ..Index index)
                <value> (.is (.I64 .Any) value)]
  (`` (the .public has_08!
        (template.macro (has_08! index value it)
          [(.is ..Binary
                (.for .jvm
                      (ffi.write! <index>
                                  (|> <value>
                                      (.as (.Nominal "java.lang.Long"))
                                      ffi.long_to_byte)
                                  <it>)

                      .js
                      (.|> <it>
                           (.is ..Binary)
                           (.as (array.Array .Decimal))
                           (.js_array_write# <index>
                                             (.|> <value>
                                                  .integer
                                                  (.i64_and# (.integer <byte>))
                                                  .int_f64#
                                                  .as_expected))
                           (.as ..Binary))
                      
                      .python
                      (.|> <it>
                           (.is ..Binary)
                           (.as (array.Array (.I64 .Any)))
                           (.python_array_write# <index> (.|> <value> (.i64_and# <byte>) (.is (.I64 .Any))))
                           (.as ..Binary))
                      
                      .scheme
                      (.let [it' <it>]
                        (.exec
                          (..bytevector-u8-set! [it' <index> <value>])
                          it'))

                      ... Default
                      (array.has! <index> (.|> <value> .integer (.i64_and# (.integer <byte>))) <it>)))]))))

(the .public has_16!
  (template.macro (has_16! index' value' it)
    [(.let [index (.is ..Index index')
            value (.is (.I64 .Any) value')]
       (.|> it
            (..has_08! index (.i64_right# 08 value))
            (..has_08! (.i64_+# 1 index) value)))]))

(the .public has_32!
  (template.macro (has_32! index' value' it)
    [(.let [index (.is ..Index index')
            value (.is (.I64 .Any) value')]
       (.|> it
            (..has_08! index (.i64_right# 24 value))
            (..has_08! (.i64_+# 1 index) (.i64_right# 16 value))
            (..has_08! (.i64_+# 2 index) (.i64_right# 08 value))
            (..has_08! (.i64_+# 3 index) value)))]))

(`` (the .public has_64!
      (template.macro (has_64! index' value' it)
        [(.let [index (.is ..Index index')
                value (.is (.I64 .Any) value')]
           (.for .scheme (.let [write_high (.is (.-> ..Binary ..Binary)
                                                (.|>> (..has_08! index (.i64_right# 56 value))
                                                      (..has_08! (.i64_+# 1 index) (.i64_right# 48 value))
                                                      (..has_08! (.i64_+# 2 index) (.i64_right# 40 value))
                                                      (..has_08! (.i64_+# 3 index) (.i64_right# 32 value))))
                                write_low (.is (.-> ..Binary ..Binary)
                                               (.|>> (..has_08! (.i64_+# 4 index) (.i64_right# 24 value))
                                                     (..has_08! (.i64_+# 5 index) (.i64_right# 16 value))
                                                     (..has_08! (.i64_+# 6 index) (.i64_right# 08 value))
                                                     (..has_08! (.i64_+# 7 index) value)))]
                           (.|> it
                                write_high
                                write_low))
                 (.|> it
                      (..has_08! index (.i64_right# 56 value))
                      (..has_08! (.i64_+# 1 index) (.i64_right# 48 value))
                      (..has_08! (.i64_+# 2 index) (.i64_right# 40 value))
                      (..has_08! (.i64_+# 3 index) (.i64_right# 32 value))
                      (..has_08! (.i64_+# 4 index) (.i64_right# 24 value))
                      (..has_08! (.i64_+# 5 index) (.i64_right# 16 value))
                      (..has_08! (.i64_+# 6 index) (.i64_right# 08 value))
                      (..has_08! (.i64_+# 7 index) value))))])))

(expansion.let [<reference> (.is ..Binary reference')
                <sample> (.is ..Binary sample')]
  (`` (the .public =
        (template.macro (= reference' sample')
          [(.for .jvm
                 (ffi.of_boolean (,, (java/util/Arrays::equals [<reference> <sample>])))

                 ... else
                 (.let [reference <reference>
                        sample <sample>
                        limit (..size reference)]
                   (.and (.i64_=# limit (..size sample))
                         (.loop (again [index 0])
                           (.if (.i64_=# limit index)
                             .true
                             (.and (.i64_=# (..bits_08 index reference)
                                            (..bits_08 index sample))
                                   (again (.i64_+# 1 index))))))))]))))

... TODO: Turn into a template ASAP.
(`` (the .public copy!
      (inlined (_ bytes source_offset source target_offset target)
        (-> .Natural ..Index ..Binary ..Index ..Binary
            ..Binary)
        (.for .jvm
              (.exec
                (java/lang/System::arraycopy [source (ffi.as_int (.integer source_offset))
                                              target (ffi.as_int (.integer target_offset))
                                              (ffi.as_int (.integer bytes))])
                target)
              
              ... Default
              (.loop (again [index 0])
                (.if (.int_<# (.integer bytes) (.integer index))
                  (.exec
                    (..has_08! (.i64_+# target_offset index)
                               (..bits_08 (.i64_+# source_offset index) source)
                               target)
                    (again (.i64_+# 1 index)))
                  target))))))

... TODO: Turn into a template ASAP.
(the .public slice
  (inlined (_ offset size binary)
    (-> ..Index .Natural ..Binary
        ..Binary)
    (.for .jvm
          (.let [limit (.i64_+# size offset)]
            (java/util/Arrays::copyOfRange [binary
                                            (ffi.as_int (.integer offset))
                                            (ffi.as_int (.integer limit))]))
          
          ... Default
          (..copy! size offset binary 0 (..empty size)))))
