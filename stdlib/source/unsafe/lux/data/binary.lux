(.using
 [library
  [lux "*"
   ["@" target]
   ["[0]" ffi]
   [control
    [function
     [inline {"+" inline:}]]]
   [data
    [collection
     ["[0]" array "_"
      ["[1]" \\unsafe]]]]
   [math
    [number {"+" hex}
     ["[0]" i64]]]]])

(with_expansions [<jvm> (as_is (type: .public Binary
                                 (ffi.type [byte]))

                               (ffi.import: java/lang/Object
                                 "[1]::[0]")
                               
                               (ffi.import: java/lang/System
                                 "[1]::[0]"
                                 ("static" arraycopy [java/lang/Object int java/lang/Object int int] void))

                               (ffi.import: java/util/Arrays
                                 "[1]::[0]"
                                 ("static" copyOfRange [[byte] int int] [byte])
                                 ("static" equals [[byte] [byte]] boolean)))]
  (for @.old (as_is <jvm>)
       @.jvm (as_is <jvm>)

       @.js
       (as_is (ffi.import: ArrayBuffer
                "[1]::[0]")
              (ffi.import: Uint8Array
                "[1]::[0]")
              
              (type: .public Binary
                Uint8Array))

       @.python
       (type: .public Binary
         (Primitive "bytearray"))

       @.scheme
       (as_is (type: .public Binary
                (Primitive "bytevector"))
              
              (ffi.import: (make-bytevector [Nat] Binary))
              (ffi.import: (bytevector-u8-ref [Binary Nat] I64))
              (ffi.import: (bytevector-u8-set! [Binary Nat (I64 Any)] Any))
              (ffi.import: (bytevector-length [Binary] Nat)))

       ... Default
       (type: .public Binary
         (array.Array (I64 Any)))))

(`` (with_expansions [<size> (.is .Nat size)
                      <jvm> (ffi.array byte <size>)
                      <jvm> (.is ..Binary <jvm>)]
      (template: .public (empty size)
        [(is ..Binary
             (for (~~ (.static @.old)) <jvm>
                  (~~ (.static @.jvm)) <jvm>

                  (~~ (.static @.js))
                  (.|> <size>
                       .int
                       "lux i64 f64"
                       []
                       ("js object new" ("js constant" "ArrayBuffer"))
                       []
                       ("js object new" ("js constant" "Uint8Array"))
                       (.as ..Binary))

                  (~~ (.static @.python))
                  (.|> <size>
                       []
                       ("python apply" (.as ffi.Function ("python constant" "bytearray")))
                       (.as ..Binary))

                  (~~ (.static @.scheme))
                  (..make-bytevector <size>)

                  ... Default
                  (array.empty <size>)))])))

(`` (with_expansions [<it> (.is ..Binary it)
                      <jvm> (ffi.length <it>)]
      (template: .public (size it)
        [(.is .Nat
              (.for (~~ (.static @.old)) <jvm>
                    (~~ (.static @.jvm)) <jvm>

                    (~~ (.static @.js))
                    (.|> <it>
                         ("js object get" "length")
                         (.as .Frac)
                         "lux f64 i64"
                         .nat)

                    (~~ (.static @.python))
                    (.|> <it>
                         (.as (array.Array (.I64 .Any)))
                         "python array length")

                    (~~ (.static @.scheme))
                    (..bytevector-length [<it>])

                    ... Default
                    (array.size <it>)))])))

(def: byte_mask
  Nat
  (i64.mask i64.bits_per_byte))

(with_expansions [<byte_mask> (.static ..byte_mask)
                  <it> (.is ..Binary it)
                  <index> (.is .Nat index)
                  <jvm> (ffi.read! <index> <it>)
                  <jvm> (ffi.byte_to_long <jvm>)
                  <jvm> (.|> <jvm>
                             (.as .I64)
                             ("lux i64 and" <byte_mask>))]
  (template: .public (bytes/1 index it)
    [(.<| (.as .I64)
          (.is (.I64 .Any))
          (`` (.for (~~ (.static @.old)) (~~ <jvm>)
                    (~~ (.static @.jvm)) (~~ <jvm>)

                    (~~ (.static @.js))
                    (.|> <it>
                         (.as (array.Array .Frac))
                         ("js array read" <index>)
                         "lux f64 i64"
                         .i64)

                    (~~ (.static @.python))
                    (.|> <it>
                         (.as (array.Array .I64))
                         ("python array read" <index>))

                    (~~ (.static @.scheme))
                    (..bytevector-u8-ref [<it> <index>])

                    ... Default
                    (.if (array.lacks? <index> <it>)
                      (.i64 0)
                      (array.item <index> <it>)))))]))

(template: .public (bytes/2 index' it')
  [(.<| (.let [index (.is Nat index')
               it (.is ..Binary it')])
        (.as .I64)
        (.is (.I64 .Any))
        (.$_ "lux i64 or"
             ("lux i64 left-shift" 8 (..bytes/1 index it))
             (..bytes/1 ("lux i64 +" 1 index) it)))])

(template: .public (bytes/4 index' it')
  [(.<| (.let [index (.is Nat index')
               it (.is ..Binary it')])
        (.as .I64)
        (.is (.I64 .Any))
        (.$_ "lux i64 or"
             ("lux i64 left-shift" 24 (..bytes/1 index it))
             ("lux i64 left-shift" 16 (..bytes/1 ("lux i64 +" 1 index) it))
             ("lux i64 left-shift" 8 (..bytes/1 ("lux i64 +" 2 index) it))
             (..bytes/1 ("lux i64 +" 3 index) it)))])

(template: .public (bytes/8 index' it')
  [(.<| (.let [index (.is Nat index')
               it (.is ..Binary it')])
        (.as .I64)
        (.is (.I64 .Any))
        (.$_ "lux i64 or"
             ("lux i64 left-shift" 56 (..bytes/1 index it))
             ("lux i64 left-shift" 48 (..bytes/1 ("lux i64 +" 1 index) it))
             ("lux i64 left-shift" 40 (..bytes/1 ("lux i64 +" 2 index) it))
             ("lux i64 left-shift" 32 (..bytes/1 ("lux i64 +" 3 index) it))
             ("lux i64 left-shift" 24 (..bytes/1 ("lux i64 +" 4 index) it))
             ("lux i64 left-shift" 16 (..bytes/1 ("lux i64 +" 5 index) it))
             ("lux i64 left-shift" 8 (..bytes/1 ("lux i64 +" 6 index) it))
             (..bytes/1 ("lux i64 +" 7 index) it)))])

(with_expansions [<byte> (hex "FF")
                  <it> (.is ..Binary it)
                  <index> (.is .Nat index)
                  <value> (.is (.I64 .Any) value)
                  <jvm_value> (`` (.for (~~ (.static @.old))
                                        (.as .Int <value>)

                                        (~~ (.static @.jvm))
                                        (.as (.Primitive "java.lang.Long") <value>)
                                        <value>))
                  <jvm_value> <jvm_value>
                  <jvm_value> (ffi.long_to_byte <jvm_value>)
                  <jvm> (ffi.write! <index> <jvm_value> <it>)]
  (`` (template: .public (with/1! index value it)
        [(.is ..Binary
              (.for (~~ (.static @.old)) <jvm>
                    (~~ (.static @.jvm)) <jvm>

                    (~~ (.static @.js))
                    (.|> <it>
                         (.is ..Binary)
                         (.as (array.Array .Frac))
                         ("js array write" <index>
                          (.|> <value>
                               .int
                               ("lux i64 and" (.int <byte>))
                               "lux i64 f64"))
                         (.as ..Binary))
                    
                    (~~ (.static @.python))
                    (.|> <it>
                         (.is ..Binary)
                         (.as (array.Array (.I64 .Any)))
                         ("python array write" <index> (.|> <value> ("lux i64 and" <byte>) (.is (.I64 .Any))))
                         (.as ..Binary))
                    
                    (~~ (.static @.scheme))
                    (.let [it' <it>]
                      (.exec
                        (..bytevector-u8-set! [it' <index> <value>])
                        it'))

                    ... Default
                    (array.has! <index> (.|> <value> .int ("lux i64 and" (.int <byte>))) <it>)))])))

(template: .public (with/2! index' value' it)
  [(.let [index (.is .Nat index')
          value (.is (.I64 .Any) value')]
     (.|> it
          (..with/1! index ("lux i64 right-shift" 8 value))
          (..with/1! ("lux i64 +" 1 index) value)))])

(template: .public (with/4! index' value' it)
  [(.let [index (.is .Nat index')
          value (.is (.I64 .Any) value')]
     (.|> it
          (..with/1! index ("lux i64 right-shift" 24 value))
          (..with/1! ("lux i64 +" 1 index) ("lux i64 right-shift" 16 value))
          (..with/1! ("lux i64 +" 2 index) ("lux i64 right-shift" 8 value))
          (..with/1! ("lux i64 +" 3 index) value)))])

(`` (template: .public (with/8! index' value' it)
      [(.let [index (.is .Nat index')
              value (.is (.I64 .Any) value')]
         (.for (~~ (.static @.scheme)) (.let [write_high (.is (.-> ..Binary ..Binary)
                                                              (.|>> (..with/1! index ("lux i64 right-shift" 56 value))
                                                                    (..with/1! ("lux i64 +" 1 index) ("lux i64 right-shift" 48 value))
                                                                    (..with/1! ("lux i64 +" 2 index) ("lux i64 right-shift" 40 value))
                                                                    (..with/1! ("lux i64 +" 3 index) ("lux i64 right-shift" 32 value))))
                                              write_low (.is (.-> ..Binary ..Binary)
                                                             (.|>> (..with/1! ("lux i64 +" 4 index) ("lux i64 right-shift" 24 value))
                                                                   (..with/1! ("lux i64 +" 5 index) ("lux i64 right-shift" 16 value))
                                                                   (..with/1! ("lux i64 +" 6 index) ("lux i64 right-shift" 8 value))
                                                                   (..with/1! ("lux i64 +" 7 index) value)))]
                                         (.|> it
                                              write_high
                                              write_low))
               (.|> it
                    (..with/1! index ("lux i64 right-shift" 56 value))
                    (..with/1! ("lux i64 +" 1 index) ("lux i64 right-shift" 48 value))
                    (..with/1! ("lux i64 +" 2 index) ("lux i64 right-shift" 40 value))
                    (..with/1! ("lux i64 +" 3 index) ("lux i64 right-shift" 32 value))
                    (..with/1! ("lux i64 +" 4 index) ("lux i64 right-shift" 24 value))
                    (..with/1! ("lux i64 +" 5 index) ("lux i64 right-shift" 16 value))
                    (..with/1! ("lux i64 +" 6 index) ("lux i64 right-shift" 8 value))
                    (..with/1! ("lux i64 +" 7 index) value))))]))

(with_expansions [<reference> (.is ..Binary reference')
                  <sample> (.is ..Binary sample')
                  <jvm> (java/util/Arrays::equals <reference> <sample>)
                  <jvm> (ffi.of_boolean <jvm>)]
  (`` (template: .public (= reference' sample')
        [(.for (~~ (.static @.old)) <jvm>
               (~~ (.static @.jvm)) <jvm>
               (.let [reference <reference>
                      sample <sample>
                      limit (..size reference)]
                 (.and ("lux i64 =" limit (..size sample))
                       (.loop [index 0]
                         (.if ("lux i64 =" limit index)
                           .true
                           (.and ("lux i64 ="
                                  (..bytes/1 index reference)
                                  (..bytes/1 index sample))
                                 (again ("lux i64 +" 1 index))))))))])))

... TODO: Turn into a template ASAP.
(`` (inline: .public (copy! bytes source_offset source target_offset target)
      (-> .Nat .Nat ..Binary Nat ..Binary ..Binary)
      (with_expansions [<jvm> (java/lang/System::arraycopy source (ffi.as_int (.int source_offset))
                                                           target (ffi.as_int (.int target_offset))
                                                           (ffi.as_int (.int bytes)))
                        <jvm> (.exec
                                <jvm>
                                target)]
        (.for (~~ (.static @.old)) <jvm>
              (~~ (.static @.jvm)) <jvm>
              
              ... Default
              (.loop [index 0]
                (.if ("lux i64 <" (.int bytes) (.int index))
                  (.exec
                    (..with/1! ("lux i64 +" target_offset index)
                               (..bytes/1 ("lux i64 +" source_offset index) source)
                               target)
                    (again ("lux i64 +" 1 index)))
                  target))))))

... TODO: Turn into a template ASAP.
(`` (with_expansions [<jvm> (java/util/Arrays::copyOfRange binary
                                                           (ffi.as_int (.int offset))
                                                           (ffi.as_int (.int limit)))
                      <jvm> (.let [limit ("lux i64 +" size offset)]
                              <jvm>)]
      (inline: .public (slice offset size binary)
        (-> .Nat .Nat ..Binary ..Binary)
        (.for (~~ (.static @.old)) <jvm>
              (~~ (.static @.jvm)) <jvm>
              
              ... Default
              (..copy! size offset binary 0 (..empty size))))))
