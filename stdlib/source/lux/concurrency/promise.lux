(.module:
  [lux (#- and or)
   [control
    [functor (#+ Functor)]
    [apply (#+ Apply)]
    ["." monad (#+ do Monad)]]
   [data
    ["." product]]
   ["." function]
   [type
    abstract]
   ["." io (#+ IO io)]
   [concurrency
    ["." atom (#+ Atom atom)]]])

(def: #export parallelism
  Nat
  ("lux process parallelism"))

(abstract: #export (Promise a)
  {#.doc "Represents values produced by asynchronous computations (unlike IO, which is synchronous)."}
  (Atom [(Maybe a) (List (-> a (IO Any)))])

  (def: #export (promise ?value)
    (All [a] (-> (Maybe a) (Promise a)))
    (:abstraction (atom [?value (list)])))

  (def: #export (poll (^:representation promise))
    {#.doc "Polls a promise's value."}
    (All [a] (-> (Promise a) (Maybe a)))
    (|> (atom.read promise)
        io.run
        product.left))

  (def: #export (resolve value (^:representation promise))
    {#.doc "Sets an promise's value if it has not been done yet."}
    (All [a] (-> a (Promise a) (IO Bit)))
    (do io.Monad<IO>
      [(^@ old [_value _observers]) (atom.read promise)]
      (case _value
        (#.Some _)
        (wrap #0)

        #.None
        (do @
          [#let [new [(#.Some value) #.None]]
           succeeded? (atom.compare-and-swap old new promise)]
          (if succeeded?
            (do @
              [_ (monad.map @ (function (_ f) (f value))
                            _observers)]
              (wrap #1))
            (resolve value (:abstraction promise)))))))

  (def: #export (await f (^:representation promise))
    (All [a] (-> (-> a (IO Any)) (Promise a) Any))
    (let [(^@ old [_value _observers]) (io.run (atom.read promise))]
      (case _value
        (#.Some value)
        (io.run (f value))

        #.None
        (let [new [_value (#.Cons f _observers)]]
          (if (io.run (atom.compare-and-swap old new promise))
            []
            (await f (:abstraction promise)))))))
  )

(def: #export (resolved? promise)
  {#.doc "Checks whether a promise's value has already been resolved."}
  (All [a] (-> (Promise a) Bit))
  (case (poll promise)
    #.None
    #0

    (#.Some _)
    #1))

(structure: #export _ (Functor Promise)
  (def: (map f fa)
    (let [fb (promise #.None)]
      (exec (await (function (_ a) (resolve (f a) fb))
                   fa)
        fb))))

(structure: #export _ (Apply Promise)
  (def: functor Functor<Promise>)

  (def: (apply ff fa)
    (let [fb (promise #.None)]
      (exec (await (function (_ f)
                     (io (await (function (_ a) (resolve (f a) fb))
                                fa)))
                   ff)
        fb))))

(structure: #export _ (Monad Promise)
  (def: functor Functor<Promise>)

  (def: (wrap a)
    (promise (#.Some a)))

  (def: (join mma)
    (let [ma (promise #.None)]
      (exec (await (function (_ ma')
                     (io (await (function (_ a') (resolve a' ma))
                                ma')))
                   mma)
        ma))))

(def: #export (and left right)
  {#.doc "Sequencing combinator."}
  (All [a b] (-> (Promise a) (Promise b) (Promise [a b])))
  (do Monad<Promise>
    [a left
     b right]
    (wrap [a b])))

(def: #export (or left right)
  {#.doc "Heterogeneous alternative combinator."}
  (All [a b] (-> (Promise a) (Promise b) (Promise (| a b))))
  (let [a|b (promise #.None)]
    (with-expansions
      [<sides> (do-template [<promise> <tag>]
                 [(await (function (_ value) (resolve (<tag> value) a|b))
                         <promise>)]

                 [left  #.Left]
                 [right #.Right]
                 )]
      (exec <sides>
        a|b))))

(def: #export (either left right)
  {#.doc "Homogeneous alternative combinator."}
  (All [a] (-> (Promise a) (Promise a) (Promise a)))
  (let [left||right (promise #.None)]
    (`` (exec (~~ (do-template [<promise>]
                    [(await (function (_ value) (resolve value left||right))
                            <promise>)]

                    [left]
                    [right]))
          left||right))))

(def: #export (schedule millis-delay computation)
  {#.doc "Runs an I/O computation on its own process (after a specified delay) and returns a Promise that will eventually host its result."}
  (All [a] (-> Nat (IO a) (Promise a)))
  (let [!out (promise #.None)]
    (exec ("lux process schedule" millis-delay
           (io (io.run (resolve (io.run computation)
                                !out))))
      !out)))

(def: #export future
  {#.doc "Runs an I/O computation on its own process and returns a Promise that will eventually host its result."}
  (All [a] (-> (IO a) (Promise a)))
  (schedule |0))

(def: #export (delay time-millis value)
  {#.doc "Delivers a value after a certain period has passed."}
  (All [a] (-> Nat a (Promise a)))
  (schedule time-millis (io value)))

(def: #export (wait time-millis)
  {#.doc "Returns a promise that will be resolved after the specified amount of milliseconds."}
  (-> Nat (Promise Any))
  (delay time-millis []))

(def: #export (time-out time-millis promise)
  {#.doc "Wait for a promise to be resolved within the specified amount of milliseconds."}
  (All [a] (-> Nat (Promise a) (Promise (Maybe a))))
  (..or (wait time-millis) promise))
