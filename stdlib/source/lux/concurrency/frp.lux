(.module:
  lux
  (lux (control [functor (#+ Functor)]
                [apply (#+ Apply)]
                [monad (#+ do Monad)])
       [io (#+ IO io)]
       (data (collection [list ("list/" Monoid<List>)]))
       (type abstract))
  (// [atom (#+ Atom atom)]
      [promise (#+ Promise)]))

## [Types]
(abstract: #export (Channel a)
  {#.doc "An asynchronous channel to distribute values."}
  (Atom (List (-> a (IO Any))))

  (def: #export (channel _)
    (All [a] (-> Any (Channel a)))
    (:abstraction (atom (list))))

  (def: #export (listen listener (^:representation channel))
    (All [a] (-> (-> a (IO Any)) (Channel a) (IO Any)))
    ## TODO: Simplify when possible.
    (do io.Monad<IO>
      [_ (atom.update (|>> (#.Cons listener)) channel)]
      (wrap [])))

  (def: #export (publish (^:representation channel) value)
    {#.doc "Publish to a channel."}
    (All [a] (-> (Channel a) a (IO Any)))
    (do io.Monad<IO>
      [listeners (atom.read channel)]
      (monad.map @ (function (_ listener) (listener value)) listeners)))
  )

## [Values]
(def: #export (filter predicate input)
  (All [a] (-> (-> a Bool) (Channel a) (Channel a)))
  (let [output (channel [])]
    (exec (io.run (listen (function (_ value)
                            (if (predicate value)
                              (publish output value)
                              (io [])))
                          input))
      output)))

(def: #export (pipe output input)
  {#.doc "Copy/pipe the contents of a channel on to another."}
  (All [a] (-> (Channel a) (Channel a) (IO Any)))
  (listen (publish output)
          input))

(def: #export (merge inputs)
  {#.doc "Fuse all the elements in a list of channels by piping them onto a new output channel."}
  (All [a] (-> (List (Channel a)) (IO (Channel a))))
  (let [output (channel [])]
    (do io.Monad<IO>
      [_ (monad.map @ (pipe output) inputs)]
      (wrap output))))

(def: #export (from-promise promise)
  (All [a] (-> (Promise a) (Channel a)))
  (let [output (channel [])]
    (exec (promise.await (publish output) promise)
      output)))

(def: #export (poll time action)
  (All [a] (-> Nat (IO a) (Channel a)))
  (let [output (channel [])]
    (exec (io.run
           (loop [_ []]
             (do io.Monad<IO>
               [value action
                _ (publish output value)]
               (wrap (promise.await recur (promise.wait time))))))
      output)))

(def: #export (periodic time)
  (-> Nat (Channel Any))
  (let [output (channel [])]
    (exec (io.run
           (loop [_ []]
             (do io.Monad<IO>
               [_ (publish output [])]
               (wrap (promise.await recur (promise.wait time))))))
      output)))

(def: #export (iterate f init)
  (All [a] (-> (-> a (Promise a)) a (Channel a)))
  (let [output (channel [])]
    (exec (io.run
           (loop [zero init]
             (do io.Monad<IO>
               [_ (publish output zero)]
               (wrap (promise.await recur (f zero))))))
      output)))

## [Structures]
(structure: #export _ (Functor Channel)
  (def: (map f input)
    (let [output (channel [])]
      (exec (io.run (listen (|>> f (publish output))
                            input))
        output))))

(structure: #export _ (Apply Channel)
  (def: functor Functor<Channel>)

  (def: (apply ff fa)
    (let [output (channel [])]
      (exec (io.run (listen (function (_ f)
                              (listen (|>> f (publish output))
                                      fa))
                            ff))
        output))))

(structure: #export _ (Monad Channel)
  (def: functor Functor<Channel>)

  (def: (wrap a)
    (let [output (channel [])]
      (exec (io.run (publish output a))
        output)))

  (def: (join mma)
    (let [output (channel [])]
      (exec (io.run (listen (listen (publish output))
                            mma))
        output))))
