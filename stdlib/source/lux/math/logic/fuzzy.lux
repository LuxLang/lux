(.module:
  lux
  (lux (data [number "Deg/" Interval<Deg>]
             (coll [list]
                   (set ["set" unordered #+ Set]))
             text/format)
       [math])
  (// ["&" continuous]))

(type: #export (Fuzzy a)
  (-> a Deg))

(def: #export (membership elem set)
  (All [a] (-> a (Fuzzy a) Deg))
  (set elem))

(def: #export (union left right)
  (All [a] (-> (Fuzzy a) (Fuzzy a) (Fuzzy a)))
  (function (_ elem)
    (&.~or (membership elem left)
           (membership elem right))))

(def: #export (intersection left right)
  (All [a] (-> (Fuzzy a) (Fuzzy a) (Fuzzy a)))
  (function (_ elem)
    (&.~and (membership elem left)
            (membership elem right))))

(def: #export (complement set)
  (All [a] (-> (Fuzzy a) (Fuzzy a)))
  (function (_ elem)
    (&.~not (membership elem set))))

(def: #export (difference sub base)
  (All [a] (-> (Fuzzy a) (Fuzzy a) (Fuzzy a)))
  (function (_ elem)
    (&.~and (membership elem base)
            (&.~not (membership elem sub)))))

(def: #export (from-predicate predicate)
  (All [a] (-> (-> a Bool) (Fuzzy a)))
  (function (_ elem)
    (if (predicate elem)
      &.~true
      &.~false)))

(def: #export (from-set set)
  (All [a] (-> (Set a) (Fuzzy a)))
  (from-predicate (set.member? set)))

(def: (ascending from to)
  (-> Deg Deg (Fuzzy Deg))
  (function (_ elem)
    (cond (d/<= from elem)
          &.~false

          (d/>= to elem)
          &.~true

          ## in the middle...
          (d// (d/- from to)
               (d/- from elem)))))

(def: (descending from to)
  (-> Deg Deg (Fuzzy Deg))
  (function (_ elem)
    (cond (d/<= from elem)
          &.~true

          (d/>= to elem)
          &.~false

          ## in the middle...
          (d// (d/- from to)
               (d/- elem to)))))

(def: #export (gradient from to)
  (-> Deg Deg (Fuzzy Deg))
  (if (d/< to from)
    (ascending from to)
    (descending from to)))

(def: #export (triangle bottom middle top)
  (-> Deg Deg Deg (Fuzzy Deg))
  (case (list.sort d/< (list bottom middle top))
    (^ (list bottom middle top))
    (intersection (ascending bottom middle)
                  (descending middle top))

    _
    (undefined)))

(def: #export (trapezoid bottom middle-bottom middle-top top)
  (-> Deg Deg Deg Deg (Fuzzy Deg))
  (case (list.sort d/< (list bottom middle-bottom middle-top top))
    (^ (list bottom middle-bottom middle-top top))
    (intersection (ascending bottom middle-bottom)
                  (descending middle-top top))

    _
    (undefined)))

(def: #export (cut treshold set)
  (All [a] (-> Deg (Fuzzy a) (Fuzzy a)))
  (function (_ elem)
    (let [membership (set elem)]
      (if (d/> treshold membership)
        (|> membership (d/- treshold) (d/* &.~true))
        &.~false))))

(def: #export (to-predicate treshold set)
  (All [a] (-> Deg (Fuzzy a) (-> a Bool)))
  (function (_ elem)
    (d/> treshold (set elem))))

(type: #export (Fuzzy2 a)
  (-> a [Deg Deg]))

(def: #export (type-2 lower upper)
  (All [a] (-> (Fuzzy a) (Fuzzy a) (Fuzzy2 a)))
  (function (_ elem)
    (let [l-deg (lower elem)
          u-deg (upper elem)]
      [(d/min l-deg
              u-deg)
       u-deg])))
