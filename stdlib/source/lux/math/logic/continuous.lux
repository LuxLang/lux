(.module:
  [lux (#- false true or and not)
   [data
    [number
     ["." rev ("#@." interval)]]]])

(def: #export true  Rev rev@top)
(def: #export false Rev rev@bottom)

(template [<name> <chooser>]
  [(def: #export <name>
     (-> Rev Rev Rev)
     <chooser>)]

  [and r/min]
  [or  r/max]
  )

(def: #export (not input)
  (-> Rev Rev)
  (r/- input ..true))

(def: #export (implies consequent antecedent)
  (-> Rev Rev Rev)
  (or (not antecedent)
      consequent))

(def: #export (includes sub super)
  (-> Rev Rev Rev)
  (let [-sub (not sub)
        sum (r/+ -sub super)
        no-overflow? (.and (r/>= -sub sum)
                           (r/>= super sum))]
    (if no-overflow?
      sum
      ..true)))

(def: #export (= left right)
  (-> Rev Rev Rev)
  (and (or (not left) right)
       (or left (not right))))
