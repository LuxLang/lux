(;module:
  lux
  (lux (data [number "Deg/" Interval<Deg>])))

(def: #export ~true Deg Deg/top)
(def: #export ~false Deg Deg/bottom)

(do-template [<name> <chooser>]
  [(def: #export <name>
     (-> Deg Deg Deg)
     <chooser>)]

  [~and d.min]
  [~or  d.max]
  )

(def: #export (~not input)
  (-> Deg Deg)
  (d.- input ~true))

(def: #export (~implies consequent antecedent)
  (-> Deg Deg Deg)
  (~or (~not antecedent)
       consequent))

(def: #export (includes~ sub super)
  (-> Deg Deg Deg)
  (let [-sub (~not sub)
        sum (d.+ -sub super)
        no-overflow? (and (d.>= -sub sum)
                          (d.>= super sum))]
    (if no-overflow?
      sum
      ~true)))

(def: #export (~= left right)
  (-> Deg Deg Deg)
  (~and (~or (~not left) right)
        (~or left (~not right))))
