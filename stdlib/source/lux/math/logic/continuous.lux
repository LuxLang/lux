(.module:
  [lux (#- false true or and not)
   [abstract
    [monoid (#+ Monoid)]]
   [math
    [number
     ["r" rev ("#\." interval)]]]])

(def: #export false Rev r\bottom)
(def: #export true  Rev r\top)

(template [<name> <chooser> <monoid> <identity>]
  [(def: #export <name>
     (-> Rev Rev Rev)
     <chooser>)

   (implementation: #export <monoid>
     (Monoid Rev)

     (def: identity <identity>)
     (def: compose <name>))]

  [or  r.max disjunction ..false]
  [and r.min conjunction ..true]
  )

(def: #export (not input)
  (-> Rev Rev)
  (r.- input ..true))

(def: #export (implies consequent antecedent)
  (-> Rev Rev Rev)
  (or (not antecedent)
      consequent))

(def: #export (= left right)
  (-> Rev Rev Rev)
  (and (or (not left) right)
       (or left (not right))))
