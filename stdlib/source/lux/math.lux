(.module: {#.doc "Common mathematical constants and functions."}
  lux
  (lux (control monad
                ["p" parser "p/" Functor<Parser>])
       (data [product]
             [number]
             (coll [list "L/" Fold<List>]))
       [macro]
       (macro ["s" syntax #+ syntax: Syntax]
              [code])))

## [Values]
(do-template [<name> <value> <doc>]
  [(def: #export <name>
     {#.doc <doc>}
     Frac
     <value>)]

  [e   2.7182818284590452354  "The base of the natural logarithm."]
  [pi  3.14159265358979323846 "The ratio of a circle's circumference to its diameter."]
  [tau 6.28318530717958647692 "The ratio of a circle's circumference to its radius."]
  )

(do-template [<name> <method>]
  [(def: #export (<name> input)
     (-> Frac Frac)
     (<method> input))]

  [cos   "lux math cos"]
  [sin   "lux math sin"]
  [tan   "lux math tan"]

  [acos  "lux math acos"]
  [asin  "lux math asin"]
  [atan  "lux math atan"]
  
  [exp   "lux math exp"]
  [log   "lux math log"]
  
  [ceil  "lux math ceil"]
  [floor "lux math floor"]
  )

(def: #export (round input)
  (-> Frac Frac)
  (let [floored (floor input)
        diff (f/- floored input)]
    (cond (f/> 0.5 diff)
          (f/+ 1.0 floored)
          
          (f/< -0.5 diff)
          (f/+ -1.0 floored)
          
          ## else
          floored)))

(def: #export (pow param subject)
  (-> Frac Frac Frac)
  ("lux math pow" subject param))

(def: #export (atan2 param subject)
  (-> Frac Frac Frac)
  (cond (f/> 0.0 param)
        (atan (f// param subject))

        (f/< 0.0 param)
        (if (f/>= 0.0 subject)
          (|> subject (f// param) atan (f/+ pi))
          (|> subject (f// param) atan (f/- pi)))

        ## (f/= 0.0 param)
        (cond (f/> 0.0 subject)
              (|> pi (f// 2.0))
              
              (f/< 0.0 subject)
              (|> pi (f// -2.0))
              
              ## (f/= 0.0 subject)
              number.not-a-number)))

(def: #export (log' base input)
  (-> Frac Frac Frac)
  (f// (log base)
       (log input)))

(def: #export (factorial n)
  (-> Nat Nat)
  (loop [acc +1
         n n]
    (if (n/<= +1 n)
      acc
      (recur (n/* n acc) (n/dec n)))))

(def: #export (hypotenuse catA catB)
  (-> Frac Frac Frac)
  (pow 0.5 (f/+ (pow 2.0 catA)
                (pow 2.0 catB))))

(do-template [<type> <mod> <gcd> <lcm> <zero> <*> </> <->]
  [(def: #export (<gcd> a b)
     {#.doc "Greatest Common Divisor."}
     (-> <type> <type> <type>)
     (case b
       <zero> a
       _ (<gcd> b (<mod> b a))))

   (def: #export (<lcm> a b)
     {#.doc "Least Common Multiple."}
     (-> <type> <type> <type>)
     (case [a b]
       (^or [_ <zero>] [<zero> _])
       <zero>

       _
       (|> a (</> (<gcd> a b)) (<*> b))
       ))]

  [Nat n/mod n/gcd n/lcm +0 n/* n// n/-]
  [Int i/mod i/gcd i/lcm  0 i/* i// i/-]
  )

## Hyperbolic functions
## https://en.wikipedia.org/wiki/Hyperbolic_function#Definitions
(do-template [<name> <comp> <inverse>]
  [(def: #export (<name> x)
     (-> Frac Frac)
     (|> (exp x) (<comp> (exp (f/* -1.0 x))) (f// 2.0)))

   (def: #export (<inverse> x)
     (-> Frac Frac)
     (|> 2.0 (f// (|> (exp x) (<comp> (exp (f/* -1.0 x)))))))]

  [sinh f/- csch]
  [cosh f/+ sech]
  )

(do-template [<name> <top> <bottom>]
  [(def: #export (<name> x)
     (-> Frac Frac)
     (let [e+ (exp x)
           e- (exp (f/* -1.0 x))
           sinh' (|> e+ (f/- e-))
           cosh' (|> e+ (f/+ e-))]
       (|> <top> (f// <bottom>))))]

  [tanh sinh' cosh']
  [coth cosh' sinh']
  )

## https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions#Definitions_in_terms_of_logarithms
(do-template [<name> <comp>]
  [(def: #export (<name> x)
     (-> Frac Frac)
     (|> x (pow 2.0) (<comp> 1.0) (pow 0.5) (f/+ x) log))]

  [asinh f/+]
  [acosh f/-]
  )

(do-template [<name> <base> <diff>]
  [(def: #export (<name> x)
     (-> Frac Frac)
     (let [x+ (|> <base> (f/+ <diff>))
           x- (|> <base> (f/- <diff>))]
       (|> x+ (f// x-) log (f// 2.0))))]

  [atanh 1.0 x]
  [acoth x 1.0]
  )

(do-template [<name> <op>]
  [(def: #export (<name> x)
     (-> Frac Frac)
     (let [x^2 (|> x (pow 2.0))]
       (|> 1.0 (<op> x^2) (pow 0.5) (f/+ 1.0) (f// x) log)))]

  [asech f/-]
  [acsch f/+]
  )

## [Syntax]
(type: #rec Infix
  (#Const Code)
  (#Call (List Code))
  (#Unary Code Infix)
  (#Binary Infix Code Infix))

(def: infix^
  (Syntax Infix)
  (<| p.rec (function (_ infix^))
      ($_ p.alt
          ($_ p.either
              (p/map code.bool s.bool)
              (p/map code.nat s.nat)
              (p/map code.int s.int)
              (p/map code.deg s.deg)
              (p/map code.frac s.frac)
              (p/map code.text s.text)
              (p/map code.symbol s.symbol)
              (p/map code.tag s.tag))
          (s.form (p.many s.any))
          (s.tuple (p.seq s.any infix^))
          (s.tuple ($_ p.either
                       (do p.Monad<Parser>
                         [_ (s.this (' #and))
                          init-subject infix^
                          init-op s.any
                          init-param infix^
                          steps (p.some (p.seq s.any infix^))]
                         (wrap (product.right (L/fold (function (_ [op param] [subject [_subject _op _param]])
                                                        [param [(#Binary _subject _op _param)
                                                                (` and)
                                                                (#Binary subject op param)]])
                                                      [init-param [init-subject init-op init-param]]
                                                      steps))))
                       (do p.Monad<Parser>
                         [init-subject infix^
                          init-op s.any
                          init-param infix^
                          steps (p.some (p.seq s.any infix^))]
                         (wrap (L/fold (function (_ [op param] [_subject _op _param])
                                         [(#Binary _subject _op _param) op param])
                                       [init-subject init-op init-param]
                                       steps)))
                       ))
          )))

(def: (infix-to-prefix infix)
  (-> Infix Code)
  (case infix
    (#Const value)
    value
    
    (#Call parts)
    (code.form parts)

    (#Unary op subject)
    (` ((~ op) (~ (infix-to-prefix subject))))
    
    (#Binary left op right)
    (` ((~ op) (~ (infix-to-prefix right)) (~ (infix-to-prefix left))))
    ))

(syntax: #export (infix [expr infix^])
  {#.doc (doc "Infix math syntax."
              (infix [x i/* 10])
              (infix [[x i/+ y] i/* [x i/- y]])
              (infix [sin [x i/+ y]])
              (infix [[x n/< y] and [y n/< z]])
              (infix [#and x n/< y n/< z])
              (infix [(n/* +3 +9) gcd +450])

              "The rules for infix syntax are simple."
              "If you want your binary function to work well with it."
              "Then take the argument to the right (y) as your first argument,"
              "and take the argument to the left (x) as your second argument.")}
  (wrap (list (infix-to-prefix expr))))
