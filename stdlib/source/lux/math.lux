(.module: {#.doc "Common mathematical constants and functions."}
  [lux #*
   ["@" target]
   [math
    [number
     ["n" nat]
     ["i" int]]]])

(template [<name> <value> <doc>]
  [(def: #export <name>
     {#.doc <doc>}
     <value>)]

  [e   +2.7182818284590452354  "The base of the natural logarithm."]
  [pi  +3.14159265358979323846 "The ratio of a circle's circumference to its diameter."]
  [tau +6.28318530717958647692 "The ratio of a circle's circumference to its radius."]
  )

(for {@.old
      (as_is (template [<name> <method>]
               [(def: #export (<name> input)
                  (-> Frac Frac)
                  (<method> input))]

               [cos   "jvm invokestatic:java.lang.Math:cos:double"]
               [sin   "jvm invokestatic:java.lang.Math:sin:double"]
               [tan   "jvm invokestatic:java.lang.Math:tan:double"]

               [acos  "jvm invokestatic:java.lang.Math:acos:double"]
               [asin  "jvm invokestatic:java.lang.Math:asin:double"]
               [atan  "jvm invokestatic:java.lang.Math:atan:double"]
               
               [exp   "jvm invokestatic:java.lang.Math:exp:double"]
               [log   "jvm invokestatic:java.lang.Math:log:double"]
               
               [ceil  "jvm invokestatic:java.lang.Math:ceil:double"]
               [floor "jvm invokestatic:java.lang.Math:floor:double"]
               )
             (def: #export (pow param subject)
               (-> Frac Frac Frac)
               ("jvm invokestatic:java.lang.Math:pow:double,double" subject param)))

      @.jvm
      (as_is (template: (!double value)
               (|> value
                   (:coerce (primitive "java.lang.Double"))
                   "jvm object cast"))
             
             (template: (!frac value)
               (|> value
                   "jvm object cast"
                   (: (primitive "java.lang.Double"))
                   (:coerce Frac)))
             
             (template [<name> <method>]
               [(def: #export <name>
                  (-> Frac Frac)
                  (|>> !double
                       ["D"]
                       ("jvm member invoke static" [] "java.lang.Math" <method> [])
                       !frac))]

               [cos   "cos"]
               [sin   "sin"]
               [tan   "tan"]

               [acos  "acos"]
               [asin  "asin"]
               [atan  "atan"]
               
               [exp   "exp"]
               [log   "log"]
               
               [ceil  "ceil"]
               [floor "floor"]
               
               [root/2 "sqrt"]
               [root/3 "cbrt"]
               )
             
             (def: #export (pow param subject)
               (-> Frac Frac Frac)
               (|> ("jvm member invoke static" [] "java.lang.Math" "pow" []
                    ["D" (!double subject)] ["D" (!double param)])
                   !frac)))

      @.js
      (as_is (template [<name> <method>]
               [(def: #export <name>
                  (-> Frac Frac)
                  (|>> ("js apply" ("js constant" <method>))
                       (:coerce Frac)))]

               [cos   "Math.cos"]
               [sin   "Math.sin"]
               [tan   "Math.tan"]

               [acos  "Math.acos"]
               [asin  "Math.asin"]
               [atan  "Math.atan"]
               
               [exp   "Math.exp"]
               [log   "Math.log"]
               
               [ceil  "Math.ceil"]
               [floor "Math.floor"]

               [root/2 "Math.sqrt"]
               [root/3 "Math.cbrt"]
               )
             
             (def: #export (pow param subject)
               (-> Frac Frac Frac)
               (:coerce Frac ("js apply" ("js constant" "Math.pow") subject param))))

      @.python
      (as_is (template [<name> <method>]
               [(def: #export <name>
                  (-> Frac Frac)
                  (|>> ("python object do" <method> ("python import" "math"))
                       (:coerce Frac)))]

               [cos   "cos"]
               [sin   "sin"]
               [tan   "tan"]

               [acos  "acos"]
               [asin  "asin"]
               [atan  "atan"]
               
               [exp   "exp"]
               [log   "log"]
               
               [ceil  "ceil"]
               [floor "floor"]

               [root/2 "sqrt"]
               )
             
             (def: #export (pow param subject)
               (-> Frac Frac Frac)
               (:coerce Frac ("python object do" "pow" ("python import" "math") subject param)))

             (def: #export root/3
               (-> Frac Frac)
               (..pow ("lux f64 /" +3.0 +1.0))))

      @.lua
      (as_is (template [<name> <method>]
               [(def: #export <name>
                  (-> Frac Frac)
                  (|>> ("lua apply" ("lua constant" <method>))
                       (:coerce Frac)))]

               [cos   "math.cos"]
               [sin   "math.sin"]
               [tan   "math.tan"]

               [acos  "math.acos"]
               [asin  "math.asin"]
               [atan  "math.atan"]
               
               [exp   "math.exp"]
               [log   "math.log"]
               
               [ceil  "math.ceil"]
               [floor "math.floor"]

               [root/2 "math.sqrt"]
               )
             
             (def: #export (pow param subject)
               (-> Frac Frac Frac)
               ("lua power" param subject))

             (def: #export root/3
               (-> Frac Frac)
               (..pow ("lux f64 /" +3.0 +1.0))))

      @.ruby
      (as_is (template [<name> <method>]
               [(def: #export <name>
                  (-> Frac Frac)
                  (|>> ("ruby apply" ("ruby constant" <method>))
                       (:coerce Frac)))]

               [cos   "Math.cos"]
               [sin   "Math.sin"]
               [tan   "Math.tan"]

               [acos  "Math.acos"]
               [asin  "Math.asin"]
               [atan  "Math.atan"]
               
               [exp   "Math.exp"]
               [log   "Math.log"]
               
               [root/2 "Math.sqrt"]
               [root/3 "Math.cbrt"]
               )

             (template [<name> <method>]
               [(def: #export <name>
                  (-> Frac Frac)
                  (|>> ("ruby object do" <method>)
                       (:coerce Int)
                       ("lux i64 f64")))]

               [ceil  "ceil"]
               [floor "floor"]
               )

             (def: #export (pow param subject)
               (-> Frac Frac Frac)
               (:coerce Frac ("ruby object do" "**" subject param))))

      @.php
      (as_is (template [<name> <method>]
               [(def: #export <name>
                  (-> Frac Frac)
                  (|>> ("php apply" ("php constant" <method>))
                       (:coerce Frac)))]

               [cos   "cos"]
               [sin   "sin"]
               [tan   "tan"]

               [acos  "acos"]
               [asin  "asin"]
               [atan  "atan"]
               
               [exp   "exp"]
               [log   "log"]

               [ceil  "ceil"]
               [floor "floor"]
               
               [root/2 "sqrt"]
               )

             (def: #export (pow param subject)
               (-> Frac Frac Frac)
               (:coerce Frac ("php apply" ("php constant" "pow") subject param)))

             (def: #export root/3
               (-> Frac Frac)
               (..pow ("lux f64 /" +3.0 +1.0))))

      @.scheme
      (as_is (template [<name> <method>]
               [(def: #export <name>
                  (-> Frac Frac)
                  (|>> ("scheme apply" ("scheme constant" <method>))
                       (:coerce Frac)))]

               [cos   "cos"]
               [sin   "sin"]
               [tan   "tan"]

               [acos  "acos"]
               [asin  "asin"]
               [atan  "atan"]
               
               [exp   "exp"]
               [log   "log"]

               [ceil  "ceiling"]
               [floor "floor"]
               
               [root/2 "sqrt"]
               )

             (def: #export (pow param subject)
               (-> Frac Frac Frac)
               (:coerce Frac ("scheme apply" ("scheme constant" "expt") subject param)))

             (def: #export root/3
               (-> Frac Frac)
               (..pow ("lux f64 /" +3.0 +1.0))))
      })

(def: #export (round input)
  (-> Frac Frac)
  (let [floored (floor input)
        diff ("lux f64 -" floored input)]
    (cond ("lux f64 <" diff +0.5)
          ("lux f64 +" +1.0 floored)
          
          ("lux f64 <" -0.5 diff)
          ("lux f64 +" -1.0 floored)
          
          ## else
          floored)))

(def: #export (atan2 param subject)
  (-> Frac Frac Frac)
  (cond ("lux f64 <" param +0.0)
        (..atan ("lux f64 /" param subject))

        ("lux f64 <" +0.0 param)
        (if (or ("lux f64 <" subject +0.0)
                ("lux f64 =" +0.0 subject))
          (|> subject ("lux f64 /" param) atan ("lux f64 +" pi))
          (|> subject ("lux f64 /" param) atan ("lux f64 -" pi)))

        ## ("lux f64 =" +0.0 param)
        (cond ("lux f64 <" subject +0.0)
              (|> pi ("lux f64 /" +2.0))
              
              ("lux f64 <" +0.0 subject)
              (|> pi ("lux f64 /" -2.0))
              
              ## ("lux f64 =" +0.0 subject)
              ("lux f64 /" +0.0 +0.0))))

(def: #export (log' base input)
  (-> Frac Frac Frac)
  ("lux f64 /" (log base)
   (log input)))

(def: #export (factorial n)
  (-> Nat Nat)
  (loop [acc 1
         n n]
    (if (n.<= 1 n)
      acc
      (recur (n.* n acc) (dec n)))))

(def: #export (hypotenuse catA catB)
  (-> Frac Frac Frac)
  (pow +0.5 ("lux f64 +"
             (pow +2.0 catA)
             (pow +2.0 catB))))

## Hyperbolic functions
## https://en.wikipedia.org/wiki/Hyperbolic_function#Definitions
(template [<name> <comp> <inverse>]
  [(def: #export (<name> x)
     (-> Frac Frac)
     (|> (exp x) (<comp> (exp ("lux f64 *" -1.0 x))) ("lux f64 /" +2.0)))

   (def: #export (<inverse> x)
     (-> Frac Frac)
     (|> +2.0 ("lux f64 /" (|> (exp x) (<comp> (exp ("lux f64 *" -1.0 x)))))))]

  [sinh "lux f64 -" csch]
  [cosh "lux f64 +" sech]
  )

(template [<name> <top> <bottom>]
  [(def: #export (<name> x)
     (-> Frac Frac)
     (let [e+ (exp x)
           e- (exp ("lux f64 *" -1.0 x))
           sinh' (|> e+ ("lux f64 -" e-))
           cosh' (|> e+ ("lux f64 +" e-))]
       (|> <top> ("lux f64 /" <bottom>))))]

  [tanh sinh' cosh']
  [coth cosh' sinh']
  )

## https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions#Definitions_in_terms_of_logarithms
(template [<name> <comp>]
  [(def: #export (<name> x)
     (-> Frac Frac)
     (|> x (pow +2.0) (<comp> +1.0) (pow +0.5) ("lux f64 +" x) log))]

  [asinh "lux f64 +"]
  [acosh "lux f64 -"]
  )

(template [<name> <base> <diff>]
  [(def: #export (<name> x)
     (-> Frac Frac)
     (let [x+ (|> <base> ("lux f64 +" <diff>))
           x- (|> <base> ("lux f64 -" <diff>))]
       (|> x+ ("lux f64 /" x-) log ("lux f64 /" +2.0))))]

  [atanh +1.0 x]
  [acoth x +1.0]
  )

(template [<name> <op>]
  [(def: #export (<name> x)
     (-> Frac Frac)
     (let [x^2 (|> x (pow +2.0))]
       (|> +1.0 (<op> x^2) (pow +0.5) ("lux f64 +" +1.0) ("lux f64 /" x) log)))]

  [asech "lux f64 -"]
  [acsch "lux f64 +"]
  )
