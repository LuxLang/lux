(.module:
  [lux (#- Location Code int if cond function or and not let)
   [abstract
    [equivalence (#+ Equivalence)]
    [hash (#+ Hash)]]
   [control
    [pipe (#+ case> cond> new>)]]
   [data
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor fold)]]]
   [macro
    ["." template]]
   [math
    [number
     ["i" int]
     ["f" frac]]]
   [type
    abstract]])

(def: input_separator ", ")
(def: statement_suffix ";")

(def: nest
  (-> Text Text)
  (|>> (format text.new_line)
       (text.replace_all text.new_line (format text.new_line text.tab))))

(abstract: #export (Code brand)
  Text

  (structure: #export equivalence
    (All [brand] (Equivalence (Code brand)))

    (def: (= reference subject)
      (\ text.equivalence = (:representation reference) (:representation subject))))

  (structure: #export hash
    (All [brand] (Hash (Code brand)))

    (def: &equivalence ..equivalence)
    (def: hash (|>> :representation (\ text.hash hash))))

  (def: #export manual
    (-> Text Code)
    (|>> :abstraction))

  (def: #export code
    (-> (Code Any) Text)
    (|>> :representation))

  (template [<type> <super>+]
    [(with_expansions [<brand> (template.identifier [<type> "'"])]
       (abstract: (<brand> brand) Any)
       (`` (type: #export <type> (|> Any <brand> (~~ (template.splice <super>+))))))]
    
    [Expression [Code]]
    [Computation [Expression' Code]]
    [Location [Computation' Expression' Code]]
    [Statement [Code]]
    )

  (template [<type> <super>+]
    [(with_expansions [<brand> (template.identifier [<type> "'"])]
       (abstract: #export <brand> Any)
       (`` (type: #export <type> (|> <brand> (~~ (template.splice <super>+))))))]

    [Literal [Computation' Expression' Code]]
    [Var [Location' Computation' Expression' Code]]
    [Access [Location' Computation' Expression' Code]]
    )

  (def: #export nil
    Literal
    (:abstraction "nil"))

  (def: #export bool
    (-> Bit Literal)
    (|>> (case> #0 "false"
                #1 "true")
         :abstraction))

  (def: #export (int value)
    (-> Int Literal)
    (:abstraction (.if (i.< +0 value)
                    (%.int value)
                    (%.nat (.nat value)))))

  (def: #export float
    (-> Frac Literal)
    (|>> (cond> [(f.= f.positive_infinity)]
                [(new> "(1.0/0.0)" [])]
                
                [(f.= f.negative_infinity)]
                [(new> "(-1.0/0.0)" [])]
                
                [(f.= f.not_a_number)]
                [(new> "(0.0/0.0)" [])]

                ## else
                [%.frac])
         :abstraction))

  (def: sanitize
    (-> Text Text)
    (`` (|>> (~~ (template [<find> <replace>]
                   [(text.replace_all <find> <replace>)]

                   ["\" "\\"]
                   [text.tab "\t"]
                   [text.vertical_tab "\v"]
                   [text.null "\0"]
                   [text.back_space "\b"]
                   [text.form_feed "\f"]
                   [text.new_line "\n"]
                   [text.carriage_return "\r"]
                   [text.double_quote (format "\" text.double_quote)]
                   ))
             )))

  (def: #export string
    (-> Text Literal)
    (|>> ..sanitize (text.enclose' text.double_quote) :abstraction))

  (def: #export array
    (-> (List Expression) Literal)
    (|>> (list\map ..code)
         (text.join_with ..input_separator)
         (text.enclose ["{" "}"])
         :abstraction))

  (def: #export table
    (-> (List [Text Expression]) Literal)
    (|>> (list\map (.function (_ [key value])
                     (format key " = " (:representation value))))
         (text.join_with ..input_separator)
         (text.enclose ["{" "}"])
         :abstraction))

  (def: #export (nth idx array)
    (-> Expression Expression Access)
    (:abstraction (format (:representation array) "[" (:representation idx) "]")))

  (def: #export (the field table)
    (-> Text Expression Computation)
    (:abstraction (format (:representation table) "." field)))

  (def: #export length
    (-> Expression Computation)
    (|>> :representation
         (text.enclose ["#(" ")"])
         :abstraction))

  (def: #export (apply/* args func)
    (-> (List Expression) Expression Computation)
    (|> args
        (list\map ..code)
        (text.join_with ..input_separator)
        (text.enclose ["(" ")"])
        (format (:representation func))
        :abstraction))

  (def: #export (do method table args)
    (-> Text Expression (List Expression) Computation)
    (|> args
        (list\map ..code)
        (text.join_with ..input_separator)
        (text.enclose ["(" ")"])
        (format (:representation table) ":" method)
        :abstraction))

  (template [<op> <name>]
    [(def: #export (<name> parameter subject)
       (-> Expression Expression Expression)
       (:abstraction (format "("
                             (:representation subject)
                             " " <op> " "
                             (:representation parameter)
                             ")")))]

    ["==" =]
    ["<"  <]
    ["<=" <=]
    [">"  >]
    [">=" >=]
    ["+"  +]
    ["-"  -]
    ["*"  *]
    ["/"  /]
    ["//" //]
    ["%"  %]
    [".." concat]

    ["or"  or]
    ["and" and]
    ["|"   bit_or]
    ["&"   bit_and]
    ["~"   bit_xor]

    ["<<" bit_shl]
    [">>" bit_shr]
    )

  (def: #export (not subject)
    (-> Expression Expression)
    (:abstraction (format "(not " (:representation subject) ")")))

  (def: #export var
    (-> Text Var)
    (|>> :abstraction))

  (def: #export statement
    (-> Expression Statement)
    (|>> :representation (text.suffix ..statement_suffix) :abstraction))

  (def: #export (then pre! post!)
    (-> Statement Statement Statement)
    (:abstraction
     (format (:representation pre!)
             text.new_line
             (:representation post!))))

  (def: locations
    (-> (List Location) Text)
    (|>> (list\map ..code)
         (text.join_with ..input_separator)))

  (def: #export (local vars)
    (-> (List Var) Statement)
    (:abstraction (format "local " (..locations vars) ..statement_suffix)))

  (def: #export (set vars value)
    (-> (List Location) Expression Statement)
    (:abstraction (format (..locations vars) " = " (:representation value) ..statement_suffix)))

  (def: #export (let vars value)
    (-> (List Var) Expression Statement)
    ($_ ..then
        (local vars)
        (set vars value)))

  (def: #export (local/1 var value)
    (-> Var Expression Statement)
    (:abstraction (format "local " (:representation var) " = " (:representation value) ..statement_suffix)))

  (def: #export (if test then! else!)
    (-> Expression Statement Statement Statement)
    (:abstraction (format "if " (:representation test)
                          text.new_line "then" (..nest (:representation then!))
                          text.new_line "else" (..nest (:representation else!))
                          text.new_line "end" ..statement_suffix)))

  (def: #export (when test then!)
    (-> Expression Statement Statement)
    (:abstraction (format "if " (:representation test)
                          text.new_line "then" (..nest (:representation then!))
                          text.new_line "end" ..statement_suffix)))

  (def: #export (while test body!)
    (-> Expression Statement Statement)
    (:abstraction
     (format "while " (:representation test) " do"
             (..nest (:representation body!))
             text.new_line "end" ..statement_suffix)))

  (def: #export (for_in vars source body!)
    (-> (List Var) Expression Statement Statement)
    (:abstraction
     (format "for " (|> vars
                        (list\map ..code)
                        (text.join_with ..input_separator))
             " in " (:representation source) " do"
             (..nest (:representation body!))
             text.new_line "end" ..statement_suffix)))

  (def: #export (for_step var from to step body!)
    (-> Var Expression Expression Expression Statement
        Statement)
    (:abstraction
     (format "for " (:representation var)
             " = " (:representation from)
             ..input_separator (:representation to)
             ..input_separator (:representation step) " do"
             (..nest (:representation body!))
             text.new_line "end" ..statement_suffix)))

  (def: #export (return value)
    (-> Expression Statement)
    (:abstraction (format "return " (:representation value) ..statement_suffix)))

  (def: #export (closure args body!)
    (-> (List Var) Statement Expression)
    (|> (format "function " (|> args
                                ..locations
                                (text.enclose ["(" ")"]))
                (..nest (:representation body!))
                text.new_line "end")
        (text.enclose ["(" ")"])
        :abstraction))

  (template [<name> <code>]
    [(def: #export (<name> name args body!)
       (-> Var (List Var) Statement Statement)
       (:abstraction
        (format <code> " " (:representation name)
                (|> args
                    ..locations
                    (text.enclose ["(" ")"]))
                (..nest (:representation body!))
                text.new_line "end" ..statement_suffix)))]

    [function "function"]
    [local_function "local function"]
    )

  (def: #export break
    Statement
    (|> "break"
        (text.suffix ..statement_suffix)
        :abstraction))
  )

(def: #export (cond clauses else!)
  (-> (List [Expression Statement]) Statement Statement)
  (list\fold (.function (_ [test then!] next!)
               (..if test then! next!))
             else!
             (list.reverse clauses)))
