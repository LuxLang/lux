(.module:
  [lux (#- Code int or and if function cond let)
   [control
    [pipe (#+ new> cond> case>)]]
   [data
    [number
     ["." frac]]
    ["." text
     format]
    [collection
     ["." list ("#@." functor fold)]]]
   [macro
    ["." template]]
   [type
    abstract]])

(abstract: #export (Code k)
  {}
  
  Text

  (template [<type> <brand> <super>+]
    [(abstract: #export (<brand> brand) {} Any)
     (`` (type: #export <type> (|> Any <brand> (~~ (template.splice <super>+)))))]
    
    [Expression Expression' [Code]]
    )

  (template [<type> <brand> <super>+]
    [(abstract: #export <brand> {} Any)
     (`` (type: #export <type> (|> <brand> (~~ (template.splice <super>+)))))]

    [Global Global' [Expression' Code]]
    [Var Var' [Expression' Code]]
    [Computation Computation' [Expression' Code]]
    )

  (type: #export Arguments
    {#mandatory (List Var)
     #rest (Maybe Var)})

  (def: #export code (-> (Code Any) Text) (|>> :representation))

  (def: #export var (-> Text Var) (|>> :abstraction))

  (def: (arguments [mandatory rest])
    (-> Arguments (Code Any))
    (case rest
      (#.Some rest)
      (case mandatory
        #.Nil
        rest

        _
        (|> (format " . " (:representation rest))
            (format (|> mandatory
                        (list@map ..code)
                        (text.join-with " ")))
            (text.enclose ["(" ")"])
            :abstraction))
      
      #.None
      (|> mandatory
          (list@map ..code)
          (text.join-with " ")
          (text.enclose ["(" ")"])
          :abstraction)))

  (def: #export nil
    Computation
    (:abstraction "'()"))

  (def: #export bool
    (-> Bit Computation)
    (|>> (case> #0 "#f"
                #1 "#t")
         :abstraction))

  (def: #export int
    (-> Int Computation)
    (|>> %i :abstraction))

  (def: #export float
    (-> Frac Computation)
    (|>> (cond> [(f/= frac.positive-infinity)]
                [(new> "+inf.0" [])]
                
                [(f/= frac.negative-infinity)]
                [(new> "-inf.0" [])]
                
                [frac.not-a-number?]
                [(new> "+nan.0" [])]
                
                ## else
                [%f])
         :abstraction))

  (def: #export positive-infinity Computation (..float frac.positive-infinity))
  (def: #export negative-infinity Computation (..float frac.negative-infinity))
  (def: #export not-a-number Computation (..float frac.not-a-number))

  (def: sanitize
    (-> Text Text)
    (`` (|>> (~~ (template [<find> <replace>]
                   [(text.replace-all <find> <replace>)]

                   [text.alarm "\a"]
                   [text.back-space "\b"]
                   [text.tab "\t"]
                   [text.new-line "\n"]
                   [text.carriage-return "\r"]
                   [text.double-quote (format "\" text.double-quote)]
                   ["\" "\\"]
                   ["|" "\|"]
                   ))
             )))
  
  (def: #export string
    (-> Text Computation)
    (|>> ..sanitize %t :abstraction))

  (def: #export symbol
    (-> Text Computation)
    (|>> (format "'") :abstraction))

  (def: #export global
    (-> Text Global)
    (|>> :abstraction))

  (def: form
    (-> (List (Code Any)) Code)
    (|>> (list@map ..code)
         (text.join-with " ")
         (text.enclose ["(" ")"])
         :abstraction))
  
  (def: #export (apply/* func args)
    (-> Expression (List Expression) Computation)
    (..form (#.Cons func args)))
  
  (template [<name> <function>]
    [(def: #export <name>
       (-> (List Expression) Computation)
       (apply/* (..global <function>)))]

    [vector/* "vector"]
    [list/*   "list"]
    )

  (def: #export (apply/0 func)
    (-> Expression Computation)
    (..apply/* func (list)))

  (template [<lux-name> <scheme-name>]
    [(def: #export <lux-name> (apply/0 (..global <scheme-name>)))]

    [newline/0 "newline"]
    )

  (template [<apply> <arg>+ <type>+ <function>+]
    [(`` (def: #export (<apply> function)
           (-> Expression (~~ (template.splice <type>+)) Computation)
           (.function (_ (~~ (template.splice <arg>+)))
             (..apply/* function (list (~~ (template.splice <arg>+)))))))

     (`` (template [<definition> <function>]
           [(def: #export <definition> (<apply> (..global <function>)))]

           (~~ (template.splice <function>+))))]

    [apply/1 [_0] [Expression]
     [[exact/1 "exact"]
      [integer->char/1 "integer->char"]
      [number->string/1 "number->string"]
      [string/1 "string"]
      [length/1 "length"]
      [values/1 "values"]
      [null?/1 "null?"]
      [car/1 "car"]
      [cdr/1 "cdr"]
      [raise/1 "raise"]
      [error-object-message/1 "error-object-message"]
      [make-vector/1 "make-vector"]
      [vector-length/1 "vector-length"]
      [not/1 "not"]
      [string-length/1 "string-length"]
      [string-hash/1 "string-hash"]
      [reverse/1 "reverse"]
      [display/1 "display"]
      [exit/1 "exit"]]]

    [apply/2 [_0 _1] [Expression Expression]
     [[append/2 "append"]
      [cons/2 "cons"]
      [make-vector/2 "make-vector"]
      ## [vector-ref/2 "vector-ref"]
      [list-tail/2 "list-tail"]
      [map/2 "map"]
      [string-ref/2 "string-ref"]
      [string-append/2 "string-append"]]]

    [apply/3 [_0 _1 _2] [Expression Expression Expression]
     [[substring/3 "substring"]
      [vector-set!/3 "vector-set!"]]]

    [apply/5 [_0 _1 _2 _3 _4] [Expression Expression Expression Expression Expression]
     [[vector-copy!/5 "vector-copy!"]]]
    )

  ## TODO: define "vector-ref/2" like a normal apply/2 function.
  ## "vector-ref/2" as an 'invoke' is problematic, since it only works
  ## in Kawa.
  ## However, the way Kawa defines "vector-ref" causes trouble,
  ## because it does a runtime type-check which throws an error when
  ## it checks against custom values/objects/classes made for
  ## JVM<->Scheme interop.
  ## There are 2 ways to deal with this:
  ## 0. To fork Kawa, and get rid of the type-check so the normal
  ## "vector-ref" can be used instead.
  ## 1. To carry on, and then, when it's time to compile the compiler
  ## itself into Scheme, switch from 'invoke' to normal 'vector-ref'.
  ## Either way, the 'invoke' needs to go away.
  (def: #export (vector-ref/2 vector index)
    (-> Expression Expression Computation)
    (..form (list (..var "invoke") vector (..symbol "getRaw") index)))

  (template [<lux-name> <scheme-name>]
    [(def: #export (<lux-name> param subject)
       (-> Expression Expression Computation)
       (..apply/2 (..global <scheme-name>) subject param))]

    [=/2   "="]
    [eq?/2 "eq?"]
    [eqv?/2 "eqv?"]
    [</2   "<"]
    [<=/2  "<="]
    [>/2   ">"]
    [>=/2  ">="]
    [string=?/2 "string=?"]
    [string<?/2 "string<?"]
    [+/2   "+"]
    [-/2   "-"]
    [//2   "/"]
    [*/2   "*"]
    [expt/2 "expt"]
    [remainder/2 "remainder"]
    [quotient/2 "quotient"]
    [mod/2 "mod"]
    [arithmetic-shift/2 "arithmetic-shift"]
    [bit-and/2 "bitwise-and"]
    [bit-or/2 "bitwise-ior"]
    [bit-xor/2 "bitwise-xor"]
    )

  (template [<lux-name> <scheme-name>]
    [(def: #export <lux-name>
       (-> (List Expression) Computation)
       (|>> (list& (..global <scheme-name>)) ..form))]

    [or "or"]
    [and "and"]
    )

  (template [<lux-name> <scheme-name> <var> <pre>]
    [(def: #export (<lux-name> bindings body)
       (-> (List [<var> Expression]) Expression Computation)
       (..form (list (..global <scheme-name>)
                     (|> bindings
                         (list@map (.function (_ [binding/name binding/value])
                                     (..form (list (|> binding/name <pre>)
                                                   binding/value))))
                         ..form)
                     body)))]

    [let           "let"           Var       (<|)]
    [let*          "let*"          Var       (<|)]
    [letrec        "letrec"        Var       (<|)]
    [let-values    "let-values"    Arguments ..arguments]
    [let*-values   "let*-values"   Arguments ..arguments]
    [letrec-values "letrec-values" Arguments ..arguments]
    )

  (def: #export (if test then else)
    (-> Expression Expression Expression Computation)
    (..form (list (..global "if") test then else)))

  (def: #export (when test then)
    (-> Expression Expression Computation)
    (..form (list (..global "when") test then)))

  (def: #export (cond clauses else)
    (-> (List [Expression Expression]) Expression Computation)
    (|> (list@fold (.function (_ [test then] next)
                     (if test then next))
                   else
                   (list.reverse clauses))
        :representation
        :abstraction))

  (def: #export (lambda arguments body)
    (-> Arguments Expression Computation)
    (..form (list (..global "lambda")
                  (..arguments arguments)
                  body)))

  (def: #export (define-function name arguments body)
    (-> Var Arguments Expression Computation)
    (..form (list (..global "define")
                  (|> arguments
                      (update@ #mandatory (|>> (#.Cons name)))
                      ..arguments)
                  body)))

  (def: #export (define-constant name value)
    (-> Var Expression Computation)
    (..form (list (..global "define") name value)))

  (def: #export begin
    (-> (List Expression) Computation)
    (|>> (#.Cons (..global "begin")) ..form))

  (def: #export (set! name value)
    (-> Var Expression Computation)
    (..form (list (..global "set!") name value)))

  (def: #export (with-exception-handler handler body)
    (-> Expression Expression Computation)
    (..form (list (..global "with-exception-handler") handler body)))
  )
