(.module:
  [lux (#- Location Code static int if cond function or and not comment)
   ["@" target]
   ["." host]
   [control
    [pipe (#+ case> cond> new>)]]
   [data
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor fold)]]]
   [macro
    ["." template]]
   [math
    [number
     ["f" frac]]]
   [type
    abstract]])

(def: input_separator ", ")
(def: statement_suffix ";")

(for {@.old (as_is (host.import: java/lang/CharSequence)
                   (host.import: java/lang/String
                     ["#::."
                      (replace [java/lang/CharSequence java/lang/CharSequence] java/lang/String)]))}
     (as_is))

(def: nest
  (-> Text Text)
  (.let [nested_new_line (format text.new_line text.tab)]
    (for {@.old (|>> (format text.new_line)
                     (:coerce java/lang/String)
                     (java/lang/String::replace (:coerce java/lang/CharSequence text.new_line)
                                                (:coerce java/lang/CharSequence nested_new_line)))}
         (|>> (format text.new_line)
              (text.replace_all text.new_line nested_new_line)))))

(abstract: #export (Code brand)
  Text

  (def: #export manual
    (-> Text Code)
    (|>> :abstraction))

  (def: #export code
    (-> (Code Any) Text)
    (|>> :representation))

  (template [<type> <super>+]
    [(with_expansions [<brand> (template.identifier [<type> "'"])]
       (abstract: (<brand> brand) Any)
       (`` (type: #export <type> (|> Any <brand> (~~ (template.splice <super>+))))))]
    
    [Expression [Code]]
    [Computation [Expression' Code]]
    [Location [Computation' Expression' Code]]
    [Var [Location' Computation' Expression' Code]]
    [LVar [Var' Location' Computation' Expression' Code]]
    [Statement [Code]]
    )

  (template [<type> <super>+]
    [(with_expansions [<brand> (template.identifier [<type> "'"])]
       (abstract: #export <brand> Any)
       (`` (type: #export <type> (|> <brand> (~~ (template.splice <super>+))))))]

    [Literal [Computation' Expression' Code]]
    [Access [Location' Computation' Expression' Code]]
    [GVar [Var' Location' Computation' Expression' Code]]
    [IVar [Var' Location' Computation' Expression' Code]]
    [SVar [Var' Location' Computation' Expression' Code]]
    [LVar* [LVar' Var' Location' Computation' Expression' Code]]
    [LVar** [LVar' Var' Location' Computation' Expression' Code]]
    )

  (template [<var> <prefix> <constructor>]
    [(def: #export <constructor>
       (-> Text <var>)
       (|>> (format <prefix>) :abstraction))]

    [GVar "$"  global]
    [IVar "@"  instance]
    [SVar "@@" static]
    )

  (def: #export local
    (-> Text LVar)
    (|>> :abstraction))

  (template [<var> <prefix> <modifier> <unpacker>]
    [(template [<name> <input> <output>]
       [(def: #export <name>
          (-> <input> <output>)
          (|>> :representation (format <prefix>) :abstraction))]

       [<modifier> LVar <var>]
       [<unpacker> Expression Computation]
       )]

    [LVar*  "*"  variadic    splat]
    [LVar** "**" variadic_kv double_splat]
    )

  (template [<ruby_name> <lux_name>]
    [(def: #export <lux_name> (..global <ruby_name>))]

    ["@" latest_error]
    ["_" last_string_read]
    ["." last_line_number_read]
    ["&" last_string_matched]
    ["~" last_regexp_match]
    ["=" case_insensitivity_flag]
    ["/" input_record_separator]
    ["\" output_record_separator]
    ["0" script_name]
    ["*" command_line_arguments]
    ["$" process_id]
    ["?" exit_status]
    )

  (def: #export nil
    Literal
    (:abstraction "nil"))

  (def: #export bool
    (-> Bit Literal)
    (|>> (case> #0 "false"
                #1 "true")
         :abstraction))

  (def: sanitize
    (-> Text Text)
    (`` (|>> (~~ (template [<find> <replace>]
                   [(text.replace_all <find> <replace>)]

                   ["\" "\\"]
                   [text.tab "\t"]
                   [text.vertical_tab "\v"]
                   [text.null "\0"]
                   [text.back_space "\b"]
                   [text.form_feed "\f"]
                   [text.new_line "\n"]
                   [text.carriage_return "\r"]
                   [text.double_quote (format "\" text.double_quote)]
                   ))
             )))

  (template [<format> <name> <type> <prep>]
    [(def: #export <name>
       (-> <type> Literal)
       (|>> <prep> <format> :abstraction))]

    [%.int int Int     (<|)]
    [%.text string Text ..sanitize]
    )

  (def: #export float
    (-> Frac Literal)
    (|>> (cond> [(f.= f.positive_infinity)]
                [(new> "(+1.0/0.0)" [])]
                
                [(f.= f.negative_infinity)]
                [(new> "(-1.0/0.0)" [])]
                
                [(f.= f.not_a_number)]
                [(new> "(+0.0/-0.0)" [])]

                ## else
                [%.frac])
         :abstraction))

  (def: #export (array_range from to array)
    (-> Expression Expression Expression Computation)
    (|> (format (:representation from) ".." (:representation to))
        (text.enclose ["[" "]"])
        (format (:representation array))
        :abstraction))

  (def: #export array
    (-> (List Expression) Literal)
    (|>> (list\map (|>> :representation))
         (text.join_with ..input_separator)
         (text.enclose ["[" "]"])
         :abstraction))

  (def: #export hash
    (-> (List [Expression Expression]) Literal)
    (|>> (list\map (.function (_ [k v])
                     (format (:representation k) " => " (:representation v))))
         (text.join_with ..input_separator)
         (text.enclose ["{" "}"])
         :abstraction))

  (def: #export (apply/* args func)
    (-> (List Expression) Expression Computation)
    (|> args
        (list\map (|>> :representation))
        (text.join_with ..input_separator)
        (text.enclose ["(" ")"])
        (format (:representation func))
        :abstraction))

  (def: #export (the field object)
    (-> Text Expression Access)
    (:abstraction (format (:representation object) "." field)))

  (def: #export (nth idx array)
    (-> Expression Expression Access)
    (|> (:representation idx)
        (text.enclose ["[" "]"])
        (format (:representation array))
        :abstraction))

  (def: #export (? test then else)
    (-> Expression Expression Expression Computation)
    (|> (format (:representation test) " ? "
                (:representation then) " : "
                (:representation else))
        (text.enclose ["(" ")"])
        :abstraction))

  (def: #export statement
    (-> Expression Statement)
    (|>> :representation
         (text.suffix ..statement_suffix)
         :abstraction))

  (def: #export (then pre! post!)
    (-> Statement Statement Statement)
    (:abstraction
     (format (:representation pre!)
             text.new_line
             (:representation post!))))

  (def: #export (set vars value)
    (-> (List Location) Expression Statement)
    (:abstraction
     (format (|> vars
                 (list\map (|>> :representation))
                 (text.join_with ..input_separator))
             " = " (:representation value) ..statement_suffix)))

  (def: (block content)
    (-> Text Text)
    (format content
            text.new_line "end" ..statement_suffix))

  (def: #export (if test then! else!)
    (-> Expression Statement Statement Statement)
    (<| :abstraction
        ..block
        (format "if " (:representation test)
                text.new_line (..nest (:representation then!))
                text.new_line "else"
                text.new_line (..nest (:representation else!)))))

  (template [<name> <block>]
    [(def: #export (<name> test then!)
       (-> Expression Statement Statement)
       (<| :abstraction
           ..block
           (format <block> " " (:representation test)
                   text.new_line (..nest (:representation then!)))))]

    [when "if"]
    [while "while"]
    )

  (def: #export (for_in var array iteration!)
    (-> LVar Expression Statement Statement)
    (<| :abstraction
        ..block
        (format "for " (:representation var)
                " in " (:representation array)
                " do "
                text.new_line (..nest (:representation iteration!)))))

  (type: #export Rescue
    {#classes (List Text)
     #exception LVar
     #rescue Statement})

  (def: #export (begin body! rescues)
    (-> Statement (List Rescue) Statement)
    (<| :abstraction
        ..block
        (format "begin"
                text.new_line (:representation body!)
                (|> rescues
                    (list\map (.function (_ [classes exception rescue])
                                (format text.new_line "rescue " (text.join_with ..input_separator classes)
                                        " => " (:representation exception)
                                        text.new_line (..nest (:representation rescue)))))
                    (text.join_with text.new_line)))))

  (def: #export (return value)
    (-> Expression Statement)
    (:abstraction (format "return " (:representation value) ..statement_suffix)))

  (def: #export (raise message)
    (-> Expression Computation)
    (:abstraction (format "raise " (:representation message))))

  (template [<name> <keyword>]
    [(def: #export <name>
       Statement
       (|> <keyword>
           (text.suffix ..statement_suffix)
           :abstraction))]

    [next "next"]
    [redo "redo"]
    [break "break"]
    )

  (def: #export (function name args body!)
    (-> LVar (List Var) Statement Statement)
    (<| :abstraction
        ..block
        (format "def " (:representation name)
                (|> args
                    (list\map (|>> :representation))
                    (text.join_with ..input_separator)
                    (text.enclose ["(" ")"]))
                text.new_line (:representation body!))))

  (def: #export (lambda name args body!)
    (-> (Maybe LVar) (List Var) Statement Literal)
    (let [proc (|> (format (|> args
                               (list\map (|>> :representation))
                               (text.join_with ..input_separator)
                               (text.enclose' "|"))
                           " "
                           (:representation body!))
                   (text.enclose ["{" "}"])
                   (format "lambda "))]
      (|> (case name
            #.None
            proc
            
            (#.Some name)
            (format (:representation name) " = " proc))
          (text.enclose ["(" ")"])
          :abstraction)))

  (template [<op> <name>]
    [(def: #export (<name> parameter subject)
       (-> Expression Expression Computation)
       (:abstraction (format "(" (:representation subject) " " <op> " " (:representation parameter) ")")))]

    ["==" =]
    [ "<" <]
    ["<=" <=]
    [ ">" >]
    [">=" >=]

    [ "+" +]
    [ "-" -]
    [ "*" *]
    [ "/" /]
    [ "%" %]
    ["**" pow]

    ["||" or]
    ["&&" and]
    [ "|" bit_or]
    [ "&" bit_and]
    [ "^" bit_xor]

    ["<<" bit_shl]
    [">>" bit_shr]
    )

  (def: #export (not subject)
    (-> Expression Computation)
    (:abstraction (format "(!" (:representation subject) ")")))

  (def: #export (comment commentary on)
    (All [brand] (-> Text (Code brand) (Code brand)))
    (:abstraction (format "# "  (..sanitize commentary) text.new_line
                          (:representation on))))
  )

(def: #export (do method args object)
  (-> Text (List Expression) Expression Computation)
  (|> object (..the method) (..apply/* args)))

(def: #export (cond clauses else!)
  (-> (List [Expression Statement]) Statement Statement)
  (list\fold (.function (_ [test then!] next!)
               (..if test then! next!))
             else!
             (list.reverse clauses)))
