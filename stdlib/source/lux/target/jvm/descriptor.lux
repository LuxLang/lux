(.module:
  [lux (#- int char)
   [data
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#@." functor)]]]
   [macro
    ["." template]]
   [type
    abstract]]
  ["." // #_
   [encoding
    ["#." name (#+ External)]]])

(abstract: #export Void' {} Any)

(abstract: #export (Value' kind) {} Any)
(abstract: #export (Return kind) {} Any)

(abstract: #export Method {} Any)

(abstract: #export (Descriptor kind)
  {}

  Text

  (type: #export (Value kind) (Return (Value' kind)))
  (type: #export Void (Return Void'))

  (type: #export Field (Value Any))

  (template [<refined>]
    [(with-expansions [<raw> (template.identifier [<refined> "'"])]
       (abstract: #export <raw> {} Any)
       (type: #export <refined> (Value <raw>)))]

    [Primitive]
    [Object]
    [Array]
    )

  (template [<sigil> <name> <kind>]
    [(def: #export <name>
       (Descriptor <kind>)
       (:abstraction <sigil>))]

    ["Z" boolean Primitive]
    ["B" byte Primitive]
    ["S" short Primitive]
    ["I" int Primitive]
    ["J" long Primitive]
    ["F" float Primitive]
    ["D" double Primitive]
    ["C" char Primitive]
    ["V" void Void]
    )

  (def: #export object
    (-> External (Descriptor Object))
    (|>> //name.internal
         //name.read
         (text.enclose ["L" ";"])
         :abstraction))

  (def: #export array
    (-> (Descriptor (Value Any))
        (Descriptor Array))
    (|>> :representation
         (format "[")
         :abstraction))

  (def: #export (method inputs output)
    (-> (List (Descriptor (Value Any)))
        (Descriptor (Return Any))
        (Descriptor Method))
    (:abstraction
     (format (|> inputs
                 (list@map (|>> :representation))
                 (text.join-with "")
                 (text.enclose ["(" ")"]))
             (:representation output))))

  (def: #export descriptor
    (-> (Descriptor Any) Text)
    (|>> :representation))
  )
