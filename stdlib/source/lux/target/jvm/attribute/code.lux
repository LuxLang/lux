(.module:
  [lux (#- Code)
   [type (#+ :share)]
   [abstract
    ["." equivalence (#+ Equivalence)]]
   [data
    ["." binary (#+ Binary)]
    [format
     [".F" binary (#+ Writer) ("#@." monoid)]]
    [collection
     ["." row (#+ Row) ("#@." functor fold)]]]]
  ["." /// #_
   [program
    ["#." resources (#+ Resources)]]
   [encoding
    ["#." unsigned (#+ U2)]]]
  ["." / #_
   ["#." exception (#+ Exception)]])

(type: #export (Code Attribute)
  {#resources Resources
   #code Binary
   #exception-table (Row Exception)
   #attributes (Row Attribute)})

(def: #export (length length code)
  (All [Attribute] (-> (-> Attribute Nat) (Code Attribute) Nat))
  ($_ n/+
      ## u2 max_stack;
      ## u2 max_locals;
      ///resources.length
      ## u4 code_length;
      ///unsigned.u4-bytes
      ## u1 code[code_length];
      (binary.size (get@ #code code))
      ## u2 exception_table_length;
      ///unsigned.u2-bytes
      ## exception_table[exception_table_length];
      (|> code
          (get@ #exception-table)
          row.size
          (n/* /exception.length))
      ## u2 attributes_count;
      ///unsigned.u2-bytes
      ## attribute_info attributes[attributes_count];
      (|> code
          (get@ #attributes)
          (row@map length)
          (row@fold n/+ 0))))

(def: #export (equivalence attribute-equivalence)
  (All [attribute]
    (-> (Equivalence attribute) (Equivalence (Code attribute))))
  ($_ equivalence.product
      ///resources.equivalence
      binary.equivalence
      (row.equivalence /exception.equivalence)
      (row.equivalence attribute-equivalence)
      ))

## https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.3
(def: #export (writer writer code)
  (All [Attribute] (-> (Writer Attribute) (Writer (Code Attribute))))
  ($_ binaryF@compose
      ## u2 max_stack;
      ## u2 max_locals;
      (///resources.writer (get@ #resources code))
      ## u4 code_length;
      ## u1 code[code_length];
      (binaryF.binary/32 (get@ #code code))
      ## u2 exception_table_length;
      ## exception_table[exception_table_length];
      ((binaryF.row/16 /exception.writer) (get@ #exception-table code))
      ## u2 attributes_count;
      ## attribute_info attributes[attributes_count];
      ((binaryF.row/16 writer) (get@ #attributes code))
      ))
