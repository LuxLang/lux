(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]]
   [data
    [format
     [binary (#+ Writer)]]
    [text
     ["%" format (#+ Format)]]]
   [math
    [number
     ["n" nat]]]
   [type
    abstract]]
  ["." // #_
   [jump (#+ Big_Jump)]
   ["/#" // #_
    [encoding
     ["#." unsigned (#+ U2)]
     ["#." signed (#+ S4)]]]])

(abstract: #export Address
  U2

  (def: #export value
    (-> Address U2)
    (|>> :representation))

  (def: #export start
    Address
    (|> 0 ///unsigned.u2 try.assume :abstraction))

  (def: #export (move distance)
    (-> U2 (-> Address (Try Address)))
    (|>> :representation
         (///unsigned.+/2 distance)
         (\ try.functor map (|>> :abstraction))))

  (def: with_sign
    (-> Address (Try S4))
    (|>> :representation ///unsigned.value .int ///signed.s4))

  (def: #export (jump from to)
    (-> Address Address (Try Big_Jump))
    (do try.monad
      [from (with_sign from)
       to (with_sign to)]
      (///signed.-/4 from to)))

  (def: #export (after? reference subject)
    (-> Address Address Bit)
    (n.> (|> reference :representation ///unsigned.value)
         (|> subject :representation ///unsigned.value)))

  (structure: #export equivalence
    (Equivalence Address)
    
    (def: (= reference subject)
      (\ ///unsigned.equivalence =
         (:representation reference)
         (:representation subject))))

  (def: #export writer
    (Writer Address)
    (|>> :representation ///unsigned.writer/2))

  (def: #export format
    (Format Address)
    (|>> :representation ///unsigned.value %.nat))
  )
