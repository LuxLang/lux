(.module:
  [lux (#- for)
   [abstract
    ["." equivalence (#+ Equivalence)]]
   [control
    ["." try]]
   [data
    [format
     [binary (#+ Writer)]]]
   [type
    abstract]]
  ["." ///// #_
   [encoding
    ["#." unsigned (#+ U1 U2)]]])

(type: #export Register U1)

(abstract: #export Registry
  {}
  
  U2

  (def: #export registry
    (-> U2 Registry)
    (|>> :abstraction))

  (def: #export empty
    Registry
    (|> 0 /////unsigned.u2 try.assume :abstraction))

  (def: #export equivalence
    (Equivalence Registry)
    (:: equivalence.contravariant map-1
        (|>> :representation)
        /////unsigned.equivalence))

  (def: #export writer
    (Writer Registry)
    (|>> :representation /////unsigned.writer/2))

  (def: #export (has needed)
    (-> Registry Registry Registry)
    (|>> :representation
         (/////unsigned.max/2 (:representation needed))
         :abstraction))

  (template [<name> <extra>]
    [(def: #export <name>
       (-> Register Registry)
       (let [extra (|> <extra> /////unsigned.u2 try.assume)]
         (|>> /////unsigned.lift/2
              (/////unsigned.+/2 extra)
              try.assume
              :abstraction)))]

    [for 1]
    [for-wide 2]
    )
  )

(def: #export length
  /////unsigned.bytes/2)
