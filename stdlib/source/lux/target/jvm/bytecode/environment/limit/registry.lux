(.module:
  [lux (#- Type for static)
   [abstract
    ["." equivalence (#+ Equivalence)]]
   [control
    ["." try (#+ Try) ("#@." functor)]]
   [data
    [number
     ["n" nat]]
    [format
     [binary (#+ Writer)]]
    [collection
     ["." list ("#@." functor fold)]]]
   [type
    abstract]]
  ["." ///// #_
   [encoding
    ["#." unsigned (#+ U1 U2)]]
   ["#." type (#+ Type)
    [category (#+ Method)]
    ["#/." parser]]])

(type: #export Register U1)

(def: normal 1)
(def: wide 2)

(abstract: #export Registry
  U2

  (def: #export registry
    (-> U2 Registry)
    (|>> :abstraction))

  (def: (minimal type)
    (-> (Type Method) Nat)
    (let [[inputs output exceptions] (/////type/parser.method type)]
      (|> inputs
          (list@map (function (_ input)
                      (if (or (is? /////type.long input)
                              (is? /////type.double input))
                        ..wide
                        ..normal)))
          (list@fold n.+ 0))))

  (template [<start> <name>]
    [(def: #export <name>
       (-> (Type Method) (Try Registry))
       (|>> ..minimal
            (n.+ <start>)
            /////unsigned.u2
            (try@map ..registry)))]

    [0 static]
    [1 virtual]
    )

  (def: #export equivalence
    (Equivalence Registry)
    (:: equivalence.functor map
        (|>> :representation)
        /////unsigned.equivalence))

  (def: #export writer
    (Writer Registry)
    (|>> :representation /////unsigned.writer/2))

  (def: #export (has needed)
    (-> Registry Registry Registry)
    (|>> :representation
         (/////unsigned.max/2 (:representation needed))
         :abstraction))

  (template [<name> <extra>]
    [(def: #export <name>
       (-> Register Registry)
       (let [extra (|> <extra> /////unsigned.u2 try.assume)]
         (|>> /////unsigned.lift/2
              (/////unsigned.+/2 extra)
              try.assume
              :abstraction)))]

    [for ..normal]
    [for-wide ..wide]
    )
  )

(def: #export length
  /////unsigned.bytes/2)
