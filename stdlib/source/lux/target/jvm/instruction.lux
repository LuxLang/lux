(.module:
  [lux (#- Type)
   [abstract
    [monoid (#+ Monoid)]
    ["." monad (#+ Monad do)]]
   [control
    ["." state (#+ State)]
    ["." writer (#+ Writer)]
    ["." function]
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]]
   [data
    ["." product]
    ["." maybe]
    [text
     ["%" format (#+ format)]]
    [number
     ["n" nat]
     ["i" int]]
    [collection
     ["." list ("#@." functor fold)]
     ["." dictionary (#+ Dictionary)]]]]
  ["." / #_
   ["#." condition (#+ Local)]
   ["#." jump (#+ Jump Big-Jump)]
   ["#." bytecode (#+ Primitive-Array-Type Bytecode) ("#@." monoid)]
   ["/#" // #_
    ["#." index]
    [encoding
     ["#." name]
     ["#." unsigned (#+ U1 U2)]
     ["#." signed (#+ S4)]]
    ["#." constant (#+ UTF8)
     ["#/." pool (#+ Pool)]]
    ["." type (#+ Type)
     [category (#+ Value' Value Return' Return Method Class)]
     ["." reflection]
     ["." parser]]]])

(def: reflection
  (All [category]
    (-> (Type (<| Return' Value' category)) Text))
  (|>> type.reflection reflection.reflection))

(type: #export Label Nat)

(type: #export Address Nat)

(type: #export Resolver (Dictionary Label Address))

(type: #export Tracker
  {#program-counter Address
   #next-label Label
   #known-labels Resolver})

(def: fresh
  Tracker
  {#program-counter 0
   #next-label 0
   #known-labels (dictionary.new n.hash)})

(type: #export Partial
  (-> Resolver (Try Bytecode)))

(def: partial-identity
  Partial
  (function.constant (#try.Success /bytecode.nop)))

(structure: partial-monoid
  (Monoid Partial)

  (def: identity ..partial-identity)

  (def: (compose left right)
    (cond (is? ..partial-identity left)
          right

          (is? ..partial-identity right)
          left

          ## else
          (function (_ resolver)
            (do try.monad
              [left (left resolver)
               right (right resolver)]
              (wrap (/bytecode@compose left right)))))))

(type: #export (Instruction a)
  (State [Pool Tracker] (Writer Partial a)))

(def: #export new-label
  (Instruction Label)
  (function (_ [pool tracker])
    [[pool
      (update@ #next-label inc tracker)]
     [..partial-identity
      (get@ #next-label tracker)]]))

(def: #export (set-label label)
  (-> Label (Instruction Any))
  ## TODO: Throw an exception if trying to set an already-set label!
  (function (_ [pool tracker])
    [[pool
      (update@ #known-labels
               (dictionary.put label (get@ #program-counter tracker))
               tracker)]
     [..partial-identity
      []]]))

(def: #export monad
  ## TODO: Remove the coercion. It was added because the type-checker
  ## seems to have a bug that is being triggered here.
  (:coerce (Monad Instruction)
           (writer.with ..partial-monoid
                        (: (Monad (State [Pool Tracker]))
                           state.monad))))

(def: #export (resolve instruction)
  (All [a] (-> (Instruction a) (State Pool (Try [Bytecode a]))))
  (function (_ pool)
    (let [[[pool tracker] [partial output]] (state.run [pool ..fresh] instruction)]
      [pool (do try.monad
              [bytecode (partial (get@ #known-labels tracker))]
              (wrap [bytecode output]))])))

(def: (nullary bytecode)
  (-> Bytecode (Instruction Any))
  (function (_ [pool tracker])
    [[pool tracker]
     [(function.constant (#try.Success bytecode))
      []]]))

(template [<name> <bytecode>]
  [(def: #export <name> (nullary <bytecode>))]

  [nop /bytecode.nop]
  [aconst-null /bytecode.aconst-null]

  [iconst-m1 /bytecode.iconst-m1]
  [iconst-0 /bytecode.iconst-0]
  [iconst-1 /bytecode.iconst-1]
  [iconst-2 /bytecode.iconst-2]
  [iconst-3 /bytecode.iconst-3]
  [iconst-4 /bytecode.iconst-4]
  [iconst-5 /bytecode.iconst-5]

  [lconst-0 /bytecode.lconst-0]
  [lconst-1 /bytecode.lconst-1]

  [fconst-0 /bytecode.fconst-0]
  [fconst-1 /bytecode.fconst-1]
  [fconst-2 /bytecode.fconst-2]
  
  [dconst-0 /bytecode.dconst-0]
  [dconst-1 /bytecode.dconst-1]

  [pop /bytecode.pop]
  [pop2 /bytecode.pop2]
  
  [dup /bytecode.dup]
  [dup-x1 /bytecode.dup-x1]
  [dup-x2 /bytecode.dup-x2]
  [dup2 /bytecode.dup2]
  [dup2-x1 /bytecode.dup2-x1]
  [dup2-x2 /bytecode.dup2-x2]
  
  [swap /bytecode.swap]

  [istore-0 /bytecode.istore-0]
  [istore-1 /bytecode.istore-1]
  [istore-2 /bytecode.istore-2]
  [istore-3 /bytecode.istore-3]

  [lstore-0 /bytecode.lstore-0]
  [lstore-1 /bytecode.lstore-1]
  [lstore-2 /bytecode.lstore-2]
  [lstore-3 /bytecode.lstore-3]

  [fstore-0 /bytecode.fstore-0]
  [fstore-1 /bytecode.fstore-1]
  [fstore-2 /bytecode.fstore-2]
  [fstore-3 /bytecode.fstore-3]

  [dstore-0 /bytecode.dstore-0]
  [dstore-1 /bytecode.dstore-1]
  [dstore-2 /bytecode.dstore-2]
  [dstore-3 /bytecode.dstore-3]
  
  [astore-0 /bytecode.astore-0]
  [astore-1 /bytecode.astore-1]
  [astore-2 /bytecode.astore-2]
  [astore-3 /bytecode.astore-3]

  [iaload /bytecode.iaload]
  [laload /bytecode.laload]
  [faload /bytecode.faload]
  [daload /bytecode.daload]
  [aaload /bytecode.aaload]
  [baload /bytecode.baload]
  [caload /bytecode.caload]
  [saload /bytecode.saload]

  [iastore /bytecode.iastore]
  [lastore /bytecode.lastore]
  [fastore /bytecode.fastore]
  [dastore /bytecode.dastore]
  [aastore /bytecode.aastore]
  [bastore /bytecode.bastore]
  [castore /bytecode.castore]
  [sastore /bytecode.sastore]

  [iadd /bytecode.iadd]
  [isub /bytecode.isub]
  [imul /bytecode.imul]
  [idiv /bytecode.idiv]
  [irem /bytecode.irem]
  [ineg /bytecode.ineg]
  [ishl /bytecode.ishl]
  [ishr /bytecode.ishr]
  [iushr /bytecode.iushr]
  [iand /bytecode.iand]
  [ior /bytecode.ior]
  [ixor /bytecode.ixor]

  [ladd /bytecode.ladd]
  [lsub /bytecode.lsub]
  [lmul /bytecode.lmul]
  [ldiv /bytecode.ldiv]
  [lrem /bytecode.lrem]
  [lneg /bytecode.lneg]
  [land /bytecode.land]
  [lor /bytecode.lor]
  [lxor /bytecode.lxor]
  
  [fadd /bytecode.fadd]
  [fsub /bytecode.fsub]
  [fmul /bytecode.fmul]
  [fdiv /bytecode.fdiv]
  [frem /bytecode.frem]
  [fneg /bytecode.fneg]
  
  [dadd /bytecode.dadd]
  [dsub /bytecode.dsub]
  [dmul /bytecode.dmul]
  [ddiv /bytecode.ddiv]
  [drem /bytecode.drem]
  [dneg /bytecode.dneg]

  [lshl /bytecode.lshl]
  [lshr /bytecode.lshr]
  [lushr /bytecode.lushr]

  [l2i /bytecode.l2i]
  [l2f /bytecode.l2f]
  [l2d /bytecode.l2d]
  
  [f2i /bytecode.f2i]
  [f2l /bytecode.f2l]
  [f2d /bytecode.f2d]
  
  [d2i /bytecode.d2i]
  [d2l /bytecode.d2l]
  [d2f /bytecode.d2f]

  [i2l /bytecode.i2l]
  [i2f /bytecode.i2f]
  [i2d /bytecode.i2d]
  [i2b /bytecode.i2b]
  [i2c /bytecode.i2c]
  [i2s /bytecode.i2s]

  [lcmp /bytecode.lcmp]
  
  [fcmpl /bytecode.fcmpl]
  [fcmpg /bytecode.fcmpg]

  [dcmpl /bytecode.dcmpl]
  [dcmpg /bytecode.dcmpg]

  [ireturn /bytecode.ireturn]
  [lreturn /bytecode.lreturn]
  [freturn /bytecode.freturn]
  [dreturn /bytecode.dreturn]
  [areturn /bytecode.areturn]
  [return /bytecode.return]

  [arraylength /bytecode.arraylength]
  
  [athrow /bytecode.athrow]
  
  [monitorenter /bytecode.monitorenter]
  [monitorexit /bytecode.monitorexit]
  )

(def: #export (bipush byte)
  (-> U1 (Instruction Any))
  (function (_ [pool tracker])
    [[pool tracker]
     [(function.constant (#try.Success (/bytecode.bipush byte)))
      []]]))

(def: (lift on-pool)
  (All [a]
    (-> (State Pool a)
        (Instruction a)))
  (function (_ [pool tracker])
    (let [[pool' output] (state.run pool on-pool)]
      [[pool' tracker]
       [..partial-identity
        output]])))

(def: max-u1
  (|> //unsigned.max-u1 //unsigned.nat //unsigned.u2))

(template [<name> <type> <constant> <ldc>]
  [(def: #export (<name> value)
     (-> <type> (Instruction Any))
     (do ..monad
       [index (..lift (<constant> value))
        #let [index' (//index.number index)]]
       (..nullary (if (:: //unsigned.order < ..max-u1 index')
                    (/bytecode.ldc (|> index' //unsigned.nat //unsigned.u1))
                    (<ldc> index)))))]

  [ldc/string //constant.UTF8 //constant/pool.string /bytecode.ldc-w/string]
  )

(template [<name> <type> <constant> <ldc>]
  [(def: #export (<name> value)
     (-> <type> (Instruction Any))
     (do ..monad
       [index (..lift (<constant> value))]
       (..nullary (<ldc> index))))]

  [ldc/integer //constant.Integer //constant/pool.integer /bytecode.ldc-w/integer]
  [ldc/long //constant.Long //constant/pool.long /bytecode.ldc2-w/long]
  [ldc/float //constant.Float //constant/pool.float /bytecode.ldc-w/float]
  [ldc/double //constant.Double //constant/pool.double /bytecode.ldc2-w/double]
  )

(template [<name> <bytecode> <input>]
  [(def: #export <name>
     (-> <input> (Instruction Any))
     (|>> <bytecode> nullary))]

  [iload /bytecode.iload Local]
  [lload /bytecode.lload Local]
  [fload /bytecode.fload Local]
  [dload /bytecode.dload Local]
  [aload /bytecode.aload Local]

  [istore /bytecode.istore Local]
  [lstore /bytecode.lstore Local]
  [fstore /bytecode.fstore Local]
  [dstore /bytecode.dstore Local]
  [astore /bytecode.astore Local]

  [ret /bytecode.ret Local]

  [newarray /bytecode.newarray Primitive-Array-Type]

  [sipush /bytecode.sipush U2]
  )

(exception: #export (unknown-label {label Label})
  (exception.report
   ["Label" (%.nat label)]))

(exception: #export (cannot-do-a-big-jump {label Label}
                                          {@from Address}
                                          {jump Big-Jump})
  (exception.report
   ["Label" (%.nat label)]
   ["Start" (%.nat @from)]
   ["Target" (|> jump //signed.int %.int)]))

(def: (jump @from @to)
  (-> Address Address (Either Jump Big-Jump))
  (let [jump (.int (n.- @to @from))
        big? (n.> (//unsigned.nat //unsigned.max-u2)
                  (.nat (i.* (if (i.>= +0 jump)
                               +1
                               -1)
                             jump)))]
    (if big?
      (#.Right (//signed.s4 jump))
      (#.Left (//signed.s2 jump)))))

(template [<name> <bytecode>]
  [(def: #export (<name> label)
     (-> Label (Instruction Any))
     (function (_ [pool tracker])
       (let [@from (get@ #program-counter tracker)]
         [[pool tracker]
          [(function (_ resolver)
             (case (dictionary.get label resolver)
               (#.Some @to)
               (case (jump @from @to)
                 (#.Left jump)
                 (#try.Success (<bytecode> jump))

                 (#.Right jump)
                 (exception.throw ..cannot-do-a-big-jump [label @from jump]))

               #.None
               (exception.throw ..unknown-label [label])))
           []]])))]

  [ifeq /bytecode.ifeq]
  [ifne /bytecode.ifne]
  [iflt /bytecode.iflt]
  [ifge /bytecode.ifge]
  [ifgt /bytecode.ifgt]
  [ifle /bytecode.ifle]
  
  [if-icmpeq /bytecode.if-icmpeq]
  [if-icmpne /bytecode.if-icmpne]
  [if-icmplt /bytecode.if-icmplt]
  [if-icmpge /bytecode.if-icmpge]
  [if-icmpgt /bytecode.if-icmpgt]
  [if-icmple /bytecode.if-icmple]
  
  [if-acmpeq /bytecode.if-acmpeq]
  [if-acmpne /bytecode.if-acmpne]
  
  [ifnull /bytecode.ifnull]
  [ifnonnull /bytecode.ifnonnull]
  )

(template [<name> <normal-bytecode> <wide-bytecode>]
  [(def: #export (<name> label)
     (-> Label (Instruction Any))
     (function (_ [pool tracker])
       (let [@from (get@ #program-counter tracker)]
         [[pool tracker]
          [(function (_ resolver)
             (case (dictionary.get label resolver)
               (#.Some @to)
               (case (jump @from @to)
                 (#.Left jump)
                 (#try.Success (<normal-bytecode> jump))

                 (#.Right jump)
                 (#try.Success (<wide-bytecode> jump)))

               #.None
               (exception.throw ..unknown-label [label])))
           []]])))]

  [goto /bytecode.goto /bytecode.goto-w]
  [jsr /bytecode.jsr /bytecode.jsr-w]
  )

(def: (big-jump jump)
  (-> (Either Jump Big-Jump) Big-Jump)
  (case jump
    (#.Left small)
    (/jump.lift small)

    (#.Right big)
    big))

(exception: #export invalid-tableswitch)

(def: #export (tableswitch minimum default cases)
  (-> S4 Label (List Label) (Instruction Any))
  (function (_ [pool tracker])
    (let [@from (get@ #program-counter tracker)]
      [[pool tracker]
       [(function (_ resolver)
          (let [get (: (-> Label (Maybe Address))
                       (function (_ label)
                         (dictionary.get label resolver)))]
            (case (do maybe.monad
                    [@default (get default)
                     @cases (monad.map @ get cases)
                     #let [>default (big-jump (jump @from @default))
                           >cases (list@map (|>> (jump @from) big-jump)
                                            @cases)]]
                    (wrap (/bytecode.tableswitch minimum >default >cases)))
              (#.Some bytecode)
              (#try.Success bytecode)

              #.None
              (exception.throw ..invalid-tableswitch []))))
        []]])))

(exception: #export invalid-lookupswitch)

(def: #export (lookupswitch default cases)
  (-> Label (List [S4 Label]) (Instruction Any))
  (function (_ [pool tracker])
    (let [@from (get@ #program-counter tracker)]
      [[pool tracker]
       [(function (_ resolver)
          (let [get (: (-> Label (Maybe Address))
                       (function (_ label)
                         (dictionary.get label resolver)))]
            (case (do maybe.monad
                    [@default (get default)
                     @cases (monad.map @ (|>> product.right get) cases)
                     #let [>default (big-jump (jump @from @default))
                           >cases (|> @cases
                                      (list@map (|>> (jump @from) big-jump))
                                      (list.zip2 (list@map product.left cases)))]]
                    (wrap (/bytecode.lookupswitch >default >cases)))
              (#.Some bytecode)
              (#try.Success bytecode)

              #.None
              (exception.throw ..invalid-lookupswitch []))))
        []]])))

(template [<name> <bytecode>]
  [(def: #export (<name> class)
     (-> (Type Class) (Instruction Any))
     (do ..monad
       ## TODO: Make sure it"s impossible to have indexes greater than U2.
       [index (..lift (//constant/pool.class (//name.internal (..reflection class))))]
       (..nullary (<bytecode> index))))]

  [new /bytecode.new]
  [anewarray /bytecode.anewarray]
  [checkcast /bytecode.checkcast]
  [instanceof /bytecode.instanceof]
  )

(def: #export (iinc register increase)
  (-> Local U1 (Instruction Any))
  (..nullary (/bytecode.iinc register increase)))

(def: #export (multianewarray class count)
  (-> (Type Class) U1 (Instruction Any))
  (do ..monad
    [index (..lift (//constant/pool.class (//name.internal (..reflection class))))]
    (..nullary (/bytecode.multianewarray index count))))

(def: (type-size type)
  (-> (Type Return) U1)
  (//unsigned.u1
   (cond (is? type.void type)
         0

         (or (is? type.long type)
             (is? type.double type))
         2

         ## else
         1)))

(template [<static?> <name> <bytecode>]
  [(def: #export (<name> class method type)
     (-> (Type Class) Text (Type Method) (Instruction Any))
     (let [[inputs output exceptions] (parser.method type)]
       (do ..monad
         [index (<| ..lift
                    (//constant/pool.method (..reflection class))
                    {#//constant/pool.name method
                     #//constant/pool.descriptor (type.descriptor type)})]
         (..nullary (<bytecode>
                     index
                     (|> inputs
                         (list@map ..type-size)
                         (list@fold //unsigned.u1/+ (//unsigned.u1 (if <static?> 0 1))))
                     (..type-size output))))))]

  [#1 invokestatic /bytecode.invokestatic]
  [#0 invokevirtual /bytecode.invokevirtual]
  [#0 invokespecial /bytecode.invokespecial]
  [#0 invokeinterface /bytecode.invokeinterface]
  )

(template [<name> <1> <2>]
  [(def: #export (<name> class field type)
     (-> (Type Class) Text (Type Value) (Instruction Any))
     (do ..monad
       [index (<| ..lift
                  (//constant/pool.field (..reflection class))
                  {#//constant/pool.name field
                   #//constant/pool.descriptor (type.descriptor type)})]
       (..nullary (cond (is? type.long type)
                        (<2> index)

                        (is? type.double type)
                        (<2> index)
                        
                        ## else
                        (<1> index)))))]

  [getstatic /bytecode.getstatic/1 /bytecode.getstatic/2]
  [putstatic /bytecode.putstatic/1 /bytecode.putstatic/2]
  [getfield /bytecode.getfield/1 /bytecode.getfield/2]
  [putfield /bytecode.putfield/1 /bytecode.putfield/2]
  )

(def: #export (compose pre post)
  (All [pre post]
    (-> (Instruction pre) (Instruction post) (Instruction post)))
  (do ..monad
    [_ pre]
    post))
