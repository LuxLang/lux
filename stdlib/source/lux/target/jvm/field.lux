(.module:
  [lux (#- static)
   [abstract
    [monoid (#+)]
    ["." equivalence (#+ Equivalence)]
    ["." monad (#+ do)]]
   [control
    ["." state (#+ State)]]
   [data
    [number (#+)
     [i64 (#+)]]
    [format
     [".F" binary (#+ Writer) ("#@." monoid)]]
    [collection
     ["." row (#+ Row)]]]
   [type
    [abstract (#+)]]]
  ["." // #_
   ["." modifier (#+ Modifier modifiers:)]
   ["#." constant (#+ UTF8)
    ["#/." pool (#+ Pool)]]
   ["#." index (#+ Index)]
   ["#." attribute (#+ Attribute)]
   ["#." type (#+ Type)
    [category (#+ Value)]
    [descriptor (#+ Descriptor)]]])

(type: #export #rec Field
  {#modifier (Modifier Field)
   #name (Index UTF8)
   #descriptor (Index (Descriptor Value))
   #attributes (Row Attribute)})

(modifiers: Field
  ["0001" public]
  ["0002" private]
  ["0004" protected]
  ["0008" static]
  ["0010" final]
  ["0040" volatile]
  ["0080" transient]
  ["1000" synthetic]
  ["4000" enum]
  )

(def: #export equivalence
  (Equivalence Field)
  ($_ equivalence.product
      modifier.equivalence
      //index.equivalence
      //index.equivalence
      (row.equivalence //attribute.equivalence)))

(def: #export (writer field)
  (Writer Field)
  (`` ($_ binaryF@compose
          (~~ (template [<writer> <slot>]
                [(<writer> (get@ <slot> field))]

                [modifier.writer #modifier]
                [//index.writer #name]
                [//index.writer #descriptor]
                [(binaryF.row/16 //attribute.writer) #attributes]))
          )))

(def: #export (field modifier name type attributes)
  (-> (Modifier Field) UTF8 (Type Value) (Row Attribute)
      (State Pool Field))
  (do state.monad
    [@name (//constant/pool.utf8 name)
     @descriptor (//constant/pool.descriptor (//type.descriptor type))]
    (wrap {#modifier modifier
           #name @name
           #descriptor @descriptor
           #attributes attributes})))
