(.module:
  [lux #*
   [abstract
    ["." equivalence (#+ Equivalence)]
    [monad (#+ do)]]
   [control
    ["." state (#+ State)]
    ["." exception (#+ exception:)]]
   [data
    ["." error (#+ Error)]
    ["." text ("#;." equivalence)
     ["%" format]]
    [format
     ["." binary (#+ Format)]]
    [collection
     ["." list ("#;." fold)]
     ["." row (#+ Row)]]]
   [type
    abstract]]
  ["." // (#+ UTF8 Class Constant) ("#;." class-equivalence)
   [//
    ["." encoding]
    ["." index (#+ Index)]
    ["." descriptor (#+ Descriptor)]]])

(def: offset 1)

(type: #export Pool (Row Constant))

(def: #export equivalence
  (Equivalence Pool)
  (row.equivalence //.equivalence))

(template: (!add <tag> <=> <value>)
  (function (_ pool)
    (with-expansions [<index> (as-is (index.index (encoding.to-u2 (n/+ offset idx))))
                      <try-again> (as-is (recur (.inc idx)))]
      (loop [idx 0]
        (case (row.nth idx pool)
          (#.Some entry)
          (case entry
            (<tag> reference)
            (if (<=> reference <value>)
              [pool
               <index>]
              <try-again>)
            
            _
            <try-again>)
          
          #.None
          [(row.add (<tag> <value>) pool)
           <index>])))))

(template: (!raw-index <index>)
  (|> <index> index.number encoding.from-u2 .nat))

(exception: #export (invalid-index {index (Index Any)}
                                   {maximum Nat})
  (exception.report
   ["Index" (|> index !raw-index %.nat)]
   ["Maximum" (%.nat maximum)]))

(exception: #export (invalid-constant {index (Index Any)}
                                      {tag Name})
  (exception.report
   ["Index" (|> index !raw-index %.nat)]
   ["Expected tag" (%.name tag)]))

(template: (!fetch <tag> <index>)
  (function (_ pool)
    (case (row.nth (|> <index> !raw-index (n/- offset))
                   pool)
      (#.Some entry)
      (case entry
        (<tag> value)
        [pool (#error.Success value)]

        _
        [pool (exception.throw ..invalid-constant [<index> (name-of <tag>)])])

      #.None
      [pool (exception.throw ..invalid-index [<index> (row.size pool)])])))

(exception: #export (cannot-find {tag Name} {value Text})
  (exception.report
   ["Expected tag" (%.name tag)]
   ["Value" value]))

(template: (!find <tag> <=> <%> <expected>)
  (function (_ pool)
    (with-expansions [<index> (as-is (index.index (encoding.to-u2 (n/+ offset idx))))
                      <try-again> (as-is (recur (.inc idx)))]
      (loop [idx 0]
        (case (row.nth idx pool)
          (#.Some entry)
          (case entry
            (<tag> actual)
            (if (<=> actual <expected>)
              [pool
               (#error.Success <index>)]
              <try-again>)
            
            _
            <try-again>)
          
          #.None
          [pool
           (exception.throw ..cannot-find [(name-of <tag>) (<%> <expected>)])])))))

(type: (Adder of)
  (-> of (State Pool (Index of))))

(type: (Fetcher of)
  (-> (Index of) (State Pool (Error of))))

(type: (Finder of)
  (-> of (State Pool (Error (Index of)))))

(def: #export (utf8 value)
  (Adder UTF8)
  (!add #//.UTF8 text;= value))

(def: #export (fetch-utf8 index)
  (Fetcher UTF8)
  (!fetch #//.UTF8 index))

(def: #export (find-utf8 reference)
  (Finder UTF8)
  (!find #//.UTF8 text;= %.text reference))

(def: (class' value)
  (Adder Class)
  (!add #//.Class //;= value))

(def: #export (class name)
  (-> UTF8 (State Pool (Index Class)))
  (do state.monad
    [@name (utf8 name)]
    (class' (//.class @name))))

(def: #export (descriptor value)
  (All [kind]
    (-> (Descriptor kind)
        (State Pool (Index (Descriptor kind)))))
  (let [value (descriptor.descriptor value)]
    (!add #//.UTF8 text;= value)))

(def: #export format
  (Format Pool)
  (binary.row/16' ..offset //.format))

(def: #export empty
  Pool
  row.empty)
