(.module:
  [lux #*
   ["." host]
   [abstract
    ["." equivalence (#+ Equivalence)]
    [monad (#+ do)]]
   [control
    ["." state (#+ State)]
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]]
   [data
    [number
     ["." i32]
     ["." int]
     ["." frac]]
    ["." text
     ["%" format (#+ format)]]
    [format
     [".F" binary (#+ Writer) ("specification@." monoid)]]
    [collection
     ["." row (#+ Row) ("#@." fold)]]]
   [type
    abstract]
   [macro
    ["." template]]]
  ["." // (#+ UTF8 String Class Integer Float Long Double Constant Name-And-Type Reference)
   [//
    [encoding
     ["#." name (#+ Internal External)]
     ["#." unsigned]]
    ["#." index (#+ Index)]
    ["#." descriptor (#+ Field Method Descriptor)]]])

(type: #export Pool [Index (Row [Index Constant])])

(def: #export equivalence
  (Equivalence Pool)
  (equivalence.product //index.equivalence
                       (row.equivalence (equivalence.product //index.equivalence
                                                             //.equivalence))))

(template: (!add <tag> <=> <value>)
  (function (_ [next pool])
    (with-expansions [<try-again> (as-is (recur (.inc idx)))]
      (loop [idx 0]
        (case (row.nth idx pool)
          (#.Some entry)
          (case entry
            [index (<tag> reference)]
            (if (:: <=> = reference <value>)
              [[next pool]
               index]
              <try-again>)
            
            _
            <try-again>)
          
          #.None
          (let [new (<tag> <value>)]
            [[(|> next
                  //index.number
                  (//unsigned.u2/+ (//unsigned.u2 (//.size new)))
                  //index.index)
              (row.add [next new] pool)]
             next]))))))

(template: (!raw-index <index>)
  (|> <index> //index.number //unsigned.nat))

(exception: #export (invalid-index {index (Index Any)})
  (exception.report
   ["Index" (|> index !raw-index %.nat)]))

(exception: #export (invalid-constant {index (Index Any)}
                                      {tag Name})
  (exception.report
   ["Index" (|> index !raw-index %.nat)]
   ["Expected tag" (%.name tag)]))

(template: (!fetch <tag> <index>)
  (with-expansions [<failure> (as-is [[next pool] (exception.throw ..invalid-index [<index>])])]
    (function (_ [next pool])
      (loop [idx 0]
        (case (row.nth idx pool)
          (#.Some [index entry])
          (let [index' (!raw-index index)
                <index>' (!raw-index <index>)]
            (cond (n/< index' <index>')
                  (recur (inc idx))

                  (n/= index' <index>')
                  (case entry
                    (<tag> value)
                    [[next pool] (#try.Success value)]

                    _
                    [[next pool] (exception.throw ..invalid-constant [<index> (name-of <tag>)])])

                  ## (n/> index' <index>')
                  <failure>))

          #.None
          <failure>))
      )))

(exception: #export (cannot-find {tag Name} {value Text})
  (exception.report
   ["Expected tag" (%.name tag)]
   ["Value" value]))

(template: (!find <tag> <=> <%> <expected>)
  (function (_ [next pool])
    (with-expansions [<try-again> (as-is (recur (.inc idx)))]
      (loop [idx 0]
        (case (row.nth idx pool)
          (#.Some [index entry])
          (case entry
            (<tag> actual)
            (if (:: <=> = actual <expected>)
              [[next pool]
               (#try.Success index)]
              <try-again>)
            
            _
            <try-again>)
          
          #.None
          [[next pool]
           (exception.throw ..cannot-find [(name-of <tag>) (<%> <expected>)])])))))

(type: (Adder of)
  (-> of (State Pool (Index of))))

(type: (Fetcher of)
  (-> (Index of) (State Pool (Try of))))

(type: (Finder of)
  (-> of (State Pool (Try (Index of)))))

(template [<name> <type> <tag> <equivalence> <format>]
  [(def: #export (<name> value)
     (Adder <type>)
     (!add <tag> <equivalence> value))

   (`` (def: #export ((~~ (template.identifier ["fetch-" <name>])) index)
         (Fetcher <type>)
         (!fetch <tag> index)))

   (`` (def: #export ((~~ (template.identifier ["find-" <name>])) reference)
         (Finder <type>)
         (!find <tag> <equivalence> <format> reference)))]

  [integer Integer #//.Integer (//.value-equivalence i32.equivalence) (|>> //.value .nat %.nat)]
  [float Float #//.Float (//.value-equivalence //.float-equivalence) (|>> //.value host.float-to-double %.frac)]
  [long Long #//.Long (//.value-equivalence int.equivalence) (|>> //.value %.int)]
  [double Double #//.Double (//.value-equivalence frac.equivalence) (|>> //.value %.frac)]
  [utf8 UTF8 #//.UTF8 text.equivalence %.text]
  )

(def: #export (string value)
  (-> Text (State Pool (Index String)))
  (do state.monad
    [@value (utf8 value)
     #let [value (//.string @value)]]
    (!add #//.String (//.value-equivalence //index.equivalence) value)))

(def: #export (class name)
  (-> Internal (State Pool (Index Class)))
  (do state.monad
    [@name (utf8 (//name.read name))
     #let [value (//.class @name)]]
    (!add #//.Class //.class-equivalence value)))

(def: #export (descriptor value)
  (All [kind]
    (-> (Descriptor kind)
        (State Pool (Index (Descriptor kind)))))
  (let [value (//descriptor.descriptor value)]
    (!add #//.UTF8 text.equivalence value)))

(type: #export (Member of)
  {#name UTF8
   #descriptor (Descriptor of)})

(def: #export (name-and-type [name descriptor])
  (All [of]
    (-> (Member of) (State Pool (Index (Name-And-Type of)))))
  (do state.monad
    [@name (utf8 name)
     @descriptor (..descriptor descriptor)]
    (!add #//.Name-And-Type //.name-and-type-equivalence
          {#//.name @name
           #//.descriptor @descriptor})))

(template [<name> <tag> <of>]
  [(def: #export (<name> class member)
     (-> External (Member <of>) (State Pool (Index (Reference <of>))))
     (do state.monad
       [@class (..class (//name.internal class))
        @name-and-type (name-and-type member)]
       (!add <tag> //.reference-equivalence
             {#//.class @class
              #//.name-and-type @name-and-type})))]

  [field #//.Field Field]
  [method #//.Method Method]
  [interface-method #//.Interface-Method Method]
  )

(def: #export writer
  (Writer Pool)
  (function (_ [next pool])
    (row@fold (function (_ [_index post] pre)
                (specification@compose pre (//.writer post)))
              (binaryF.bits/16 (!raw-index next))
              pool)))

(def: #export empty
  Pool
  [(|> 1 //unsigned.u2 //index.index)
   row.empty])
