(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]]
   [control
    ["." try]]
   [data
    [format
     [binary (#+ Writer)]]]
   [type
    abstract]]
  ["." /// #_
   [encoding
    ["#." unsigned (#+ U1) ("u1@." equivalence)]]])

(abstract: #export Tag
  {}

  U1

  (structure: #export equivalence
    (Equivalence Tag)
    (def: (= reference sample)
      (u1@= (:representation reference)
            (:representation sample))))

  (template [<code> <name>]
    [(def: #export <name>
       Tag
       (|> <code> ///unsigned.u1 try.assume :abstraction))]

    [01 utf8]
    [03 integer]
    [04 float]
    [05 long]
    [06 double]
    [07 class]
    [08 string]
    [09 field]
    [10 method]
    [11 interface-method]
    [12 name-and-type]
    [15 method-handle]
    [16 method-type]
    [18 invoke-dynamic]
    )

  (def: #export writer
    (Writer Tag)
    (|>> :representation ///unsigned.writer/1))
  )
