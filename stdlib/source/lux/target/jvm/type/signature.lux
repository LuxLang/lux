(.module:
  [lux (#- int char)
   [abstract
    [equivalence (#+ Equivalence)]
    [hash (#+ Hash)]]
   [data
    ["." text ("#//." hash)
     ["%" format (#+ format)]]
    [collection
     ["." list ("#//." functor)]]]
   [type
    abstract]]
  ["." // #_
   [category (#+ Void Value Return Method Primitive Object Class Array Var Parameter Declaration)]
   ["#." descriptor]
   ["/#" // #_
    [encoding
     ["#." name (#+ External)]]]])

(abstract: #export (Signature category)
  Text

  (def: #export signature
    (-> (Signature Any) Text)
    (|>> :representation))

  (template [<category> <name> <descriptor>]
    [(def: #export <name>
       (Signature <category>)
       (:abstraction (//descriptor.descriptor <descriptor>)))]

    [Void void //descriptor.void]
    [Primitive boolean //descriptor.boolean]
    [Primitive byte //descriptor.byte]
    [Primitive short //descriptor.short]
    [Primitive int //descriptor.int]
    [Primitive long //descriptor.long]
    [Primitive float //descriptor.float]
    [Primitive double //descriptor.double]
    [Primitive char //descriptor.char]
    )

  (def: #export array
    (-> (Signature Value) (Signature Array))
    (|>> :representation
         (format //descriptor.array-prefix)
         :abstraction))

  (def: #export wildcard
    (Signature Parameter)
    (:abstraction "*"))

  (def: #export var-prefix "T")
  
  (def: #export var
    (-> Text (Signature Var))
    (|>> (text.enclose [..var-prefix //descriptor.class-suffix])
         :abstraction))

  (def: #export lower-prefix "-")
  (def: #export upper-prefix "+")
  
  (template [<name> <prefix>]
    [(def: #export <name>
       (-> (Signature Class) (Signature Parameter))
       (|>> :representation (format <prefix>) :abstraction))]

    [lower ..lower-prefix]
    [upper ..upper-prefix]
    )

  (def: #export parameters-start "<")
  (def: #export parameters-end ">")

  (def: #export (class name parameters)
    (-> External (List (Signature Parameter)) (Signature Class))
    (:abstraction
     (format //descriptor.class-prefix
             (|> name ///name.internal ///name.read)
             (case parameters
               #.Nil
               ""

               _
               (format ..parameters-start
                       (|> parameters
                           (list//map ..signature)
                           (text.join-with ""))
                       ..parameters-end))
             //descriptor.class-suffix)))

  (def: #export (declaration name variables)
    (-> External (List (Signature Var)) (Signature Declaration))
    (:transmutation (..class name variables)))

  (def: #export as-class
    (-> (Signature Declaration) (Signature Class))
    (|>> :transmutation))

  (def: #export arguments-start "(")
  (def: #export arguments-end ")")

  (def: #export exception-prefix "^")

  (def: #export (method [inputs output exceptions])
    (-> [(List (Signature Value))
         (Signature Return)
         (List (Signature Class))]
        (Signature Method))
    (:abstraction
     (format (|> inputs
                 (list//map ..signature)
                 (text.join-with "")
                 (text.enclose [..arguments-start
                                ..arguments-end]))
             (:representation output)
             (|> exceptions
                 (list//map (|>> :representation (format ..exception-prefix)))
                 (text.join-with "")))))

  (structure: #export equivalence
    (All [category] (Equivalence (Signature category)))
    
    (def: (= parameter subject)
      (text//= (:representation parameter)
               (:representation subject))))

  (structure: #export hash
    (All [category] (Hash (Signature category)))

    (def: &equivalence ..equivalence)
    (def: hash (|>> :representation text//hash)))
  )
