(.module:
  [lux (#- int char)
   [abstract
    [equivalence (#+ Equivalence)]]
   [data
    ["." maybe]
    ["." text ("#\." equivalence)
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor)]]]
   [math
    [number
     ["n" nat]]]
   [type
    abstract]]
  ["." // #_
   [category (#+ Void Value Return Method Primitive Object Class Array Var Parameter Declaration)]
   ["/#" // #_
    [encoding
     ["#." name (#+ Internal External)]]]])

(abstract: #export (Descriptor category)
  Text

  (def: #export descriptor
    (-> (Descriptor Any) Text)
    (|>> :representation))

  (template [<sigil> <category> <name>]
    [(def: #export <name>
       (Descriptor <category>)
       (:abstraction <sigil>))]

    ["V" Void void]
    ["Z" Primitive boolean]
    ["B" Primitive byte]
    ["S" Primitive short]
    ["I" Primitive int]
    ["J" Primitive long]
    ["F" Primitive float]
    ["D" Primitive double]
    ["C" Primitive char]
    )

  (def: #export class_prefix "L")
  (def: #export class_suffix ";")

  (def: #export class
    (-> External (Descriptor Class))
    (|>> ///name.internal
         ///name.read
         (text.enclose [..class_prefix ..class_suffix])
         :abstraction))

  (def: #export (declaration name)
    (-> External (Descriptor Declaration))
    (:transmutation (..class name)))

  (def: #export as_class
    (-> (Descriptor Declaration) (Descriptor Class))
    (|>> :transmutation))

  (template [<name> <category>]
    [(def: #export <name>
       (Descriptor <category>)
       (:transmutation
        (..class "java.lang.Object")))]

    [var Var]
    [wildcard Parameter]
    )

  (def: #export (lower descriptor)
    (-> (Descriptor Class) (Descriptor Parameter))
    ..wildcard)

  (def: #export upper
    (-> (Descriptor Class) (Descriptor Parameter))
    (|>> :transmutation))
  
  (def: #export array_prefix "[")

  (def: #export array
    (-> (Descriptor Value)
        (Descriptor Array))
    (|>> :representation
         (format ..array_prefix)
         :abstraction))

  (def: #export (method [inputs output])
    (-> [(List (Descriptor Value))
         (Descriptor Return)]
        (Descriptor Method))
    (:abstraction
     (format (|> inputs
                 (list\map ..descriptor)
                 (text.join_with "")
                 (text.enclose ["(" ")"]))
             (:representation output))))

  (structure: #export equivalence
    (All [category] (Equivalence (Descriptor category)))
    
    (def: (= parameter subject)
      (text\= (:representation parameter) (:representation subject))))

  (def: #export class_name
    (-> (Descriptor Object) Internal)
    (let [prefix_size (text.size ..class_prefix)
          suffix_size (text.size ..class_suffix)]
      (function (_ descriptor)
        (let [repr (:representation descriptor)]
          (if (text.starts_with? ..array_prefix repr)
            (///name.internal repr)
            (|> repr
                (text.clip prefix_size
                           (n.- suffix_size
                                (text.size repr)))
                (\ maybe.monad map ///name.internal)
                maybe.assume))))))
  )
