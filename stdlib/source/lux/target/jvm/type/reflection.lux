(.module:
  [lux (#- int char)
   [data
    [text
     ["%" format (#+ format)]]]
   [type
    abstract]]
  ["." // #_
   [category (#+ Void Value Return Method Primitive Object Class Array Parameter)]
   ["#." descriptor]
   [//
    [encoding
     ["#." name (#+ External)]]]])

(abstract: #export (Reflection category)
  {}

  Text

  (def: #export reflection
    (-> (Reflection Any) Text)
    (|>> :representation))

  (template [<category> <name> <reflection>]
    [(def: #export <name>
       (Reflection <category>)
       (:abstraction <reflection>))]

    [Void void "void"]
    [Primitive boolean "boolean"]
    [Primitive byte "byte"]
    [Primitive short "short"]
    [Primitive int "int"]
    [Primitive long "long"]
    [Primitive float "float"]
    [Primitive double "double"]
    [Primitive char "char"]
    )

  (def: #export class
    (-> External (Reflection Class))
    (|>> :abstraction))

  (def: #export array
    (-> (Reflection Value) (Reflection Array))
    (|>> :representation
         (format //descriptor.array-prefix)
         :abstraction))

  (template [<name>]
    [(def: #export <name>
       (Reflection Parameter)
       (:transmutation
        (..class "java.lang.Object")))]

    [var]
    [wildcard]
    )

  (def: #export (lower reflection)
    (-> (Reflection Class) (Reflection Parameter))
    ..wildcard)

  (def: #export upper
    (-> (Reflection Class) (Reflection Parameter))
    (|>> :transmutation))
  )
