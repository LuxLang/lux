(.module:
  [lux (#- int char)]
  ["." //])

(template [<name> <reflection>]
  [(def: #export <name> <reflection>)]

  [void "void"]
  [boolean "boolean"]
  [byte "byte"]
  [short "short"]
  [int "int"]
  [long "long"]
  [float "float"]
  [double "double"]
  [char "char"]
  )

(def: #export (class type)
  (-> //.Type Text)
  (case type
    (#//.Primitive prim)
    (case prim
      #//.Boolean ..boolean
      #//.Byte    ..byte
      #//.Short   ..short
      #//.Int     ..int
      #//.Long    ..long
      #//.Float   ..float
      #//.Double  ..double
      #//.Char    ..char)

    (#//.Array sub)
    (//.syntax-name (//.descriptor type))

    (#//.Generic generic)
    (case generic
      (#//.Class class params)
      (//.syntax-name class)

      (^or (#//.Var name)
           (#//.Wildcard #.None)
           (#//.Wildcard (#.Some [#//.Lower bound])))
      //.object-class

      (#//.Wildcard (#.Some [#//.Upper bound]))
      (class (#//.Generic bound)))
    ))
