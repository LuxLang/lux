(.module:
  [lux (#- int char)
   [data
    [text
     ["%" format (#+ format)]]]
   [macro
    ["." template]]
   [type
    abstract]]
  ["." //
   ["#." descriptor]
   [//
    [encoding
     ["#." name (#+ External)]]]])

(abstract: #export Void' {} Any)

(abstract: #export (Value' brand) {} Any)
(abstract: #export (Return' brand) {} Any)

(abstract: #export Method {} Any)

(abstract: #export (Reflection brand)
  {}

  Text

  (type: #export Return (<| Return' Any))
  (type: #export Value (<| Return' Value' Any))
  (type: #export Void (<| Return' Void'))

  (abstract: #export (Object' brand) {} Any)
  (type: #export Object (<| Return' Value' Object' Any))

  (template [<parents> <child>]
    [(with-expansions [<raw> (template.identifier [<child> "'"])]
       (abstract: #export <raw> {} Any)
       (type: #export <child>
         (`` (<| Return' Value' (~~ (template.splice <parents>)) <raw>))))]

    [[] Primitive]
    [[Object'] Class]
    [[Object'] Array]
    )

  (def: #export reflection
    (-> (Reflection Any) Text)
    (|>> :representation))

  (template [<brand> <name> <reflection>]
    [(def: #export <name>
       (Reflection <brand>)
       (:abstraction <reflection>))]

    [Void void "void"]
    [Primitive boolean "boolean"]
    [Primitive byte "byte"]
    [Primitive short "short"]
    [Primitive int "int"]
    [Primitive long "long"]
    [Primitive float "float"]
    [Primitive double "double"]
    [Primitive char "char"]
    )

  (def: #export class
    (-> External (Reflection Class))
    (|>> :abstraction))

  (def: #export array
    (-> (Reflection Class) (Reflection Array))
    (|>> :representation
         (format //descriptor.array-prefix)
         :abstraction))
  )
