(.module:
  [lux (#- Type static)
   [abstract
    [monoid (#+)]
    ["." equivalence (#+ Equivalence)]
    ["." monad (#+ do)]]
   [control
    ["." try]
    ["." state (#+ State)]]
   [data
    [number (#+)
     [i64 (#+)]]
    [format
     [".F" binary (#+ Writer) ("#@." monoid)]]
    [collection
     ["." row (#+ Row)]]]
   [type
    [abstract (#+)]]]
  ["." // #_
   ["#." modifier (#+ Modifier modifiers:)]
   ["#." index (#+ Index)]
   ["#." attribute (#+ Attribute)
    ["#/." code]]
   ["#." constant (#+ UTF8)
    ["#/." pool (#+ Pool)]]
   ["#." instruction (#+ Instruction)
    ["#/." condition]
    ["#/." bytecode]]
   ["#." type (#+ Type)
    ["#/." category]
    ["#." descriptor (#+ Descriptor)]]])

(type: #export #rec Method
  {#modifier (Modifier Method)
   #name (Index UTF8)
   #descriptor (Index (Descriptor //type/category.Method))
   #attributes (Row Attribute)})

(modifiers: Method
  ["0001" public]
  ["0002" private]
  ["0004" protected]
  ["0008" static]
  ["0010" final]
  ["0020" synchronized]
  ["0040" bridge]
  ["0080" var-args]
  ["0100" native]
  ["0400" abstract]
  ["0800" strict]
  ["1000" synthetic]
  )

(def: #export (method modifier name type attributes code)
  (-> (Modifier Method) UTF8 (Type //type/category.Method) (List (State Pool Attribute)) (Instruction Any)
      (State Pool Method))
  (do state.monad
    [@name (//constant/pool.utf8 name)
     @descriptor (//constant/pool.descriptor (//type.descriptor type))
     attributes (monad.seq @ attributes)
     ?code (//instruction.resolve code)
     [environment exceptions bytecode] (case (do try.monad
                                               [[bytecode exceptions output] ?code
                                                [environment specification] (//instruction/bytecode.run bytecode)]
                                               (wrap [environment exceptions (binaryF.instance specification)]))
                                         (#try.Success [environment exceptions bytecode])
                                         (wrap [environment exceptions bytecode])
                                         
                                         (#try.Failure error)
                                         ## TODO: Allow error-management within
                                         ## the monad.
                                         (error! error))
     @code (//attribute.code {#//attribute/code.resources (get@ #//instruction/condition.resources environment)
                              #//attribute/code.code bytecode
                              #//attribute/code.exception-table exceptions
                              #//attribute/code.attributes (row.row)})]
    (wrap {#modifier modifier
           #name @name
           #descriptor @descriptor
           #attributes (|> attributes row.from-list (row.add @code))})))

(def: #export equivalence
  (Equivalence Method)
  ($_ equivalence.product
      //modifier.equivalence
      //index.equivalence
      //index.equivalence
      (row.equivalence //attribute.equivalence)))

(def: #export (writer field)
  (Writer Method)
  (`` ($_ binaryF@compose
          (~~ (template [<writer> <slot>]
                [(<writer> (get@ <slot> field))]

                [//modifier.writer #modifier]
                [//index.writer #name]
                [//index.writer #descriptor]
                [(binaryF.row/16 //attribute.writer) #attributes]))
          )))
