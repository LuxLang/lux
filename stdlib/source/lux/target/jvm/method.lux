(.module:
  [lux (#- static)
   [abstract
    ["." equivalence (#+ Equivalence)]
    [monoid (#+)]
    ["." monad (#+ do)]]
   [control
    ["<>" parser]
    ["." state (#+ State)]]
   [data
    [number (#+)
     [i64 (#+)]]
    [format
     [".F" binary (#+ Reader Writer Format) ("#@." monoid)]]
    [collection
     ["." row (#+ Row)]]]
   [type
    [abstract (#+)]]]
  ["." // #_
   [encoding (#+)]
   ["." modifier (#+ Modifier modifiers:)]
   ["#." constant (#+ UTF8)
    [pool (#+ Pool)]]
   ["#." index (#+ Index)]
   ["#." attribute (#+ Attribute)]
   ["#." descriptor (#+ Descriptor)]])

(type: #export #rec Method
  {#modifier (Modifier Method)
   #name (Index UTF8)
   #descriptor (Index (Descriptor //descriptor.Method))
   #attributes (Row Attribute)})

(modifiers: Method
  ["0001" public]
  ["0002" private]
  ["0004" protected]
  ["0008" static]
  ["0010" final]
  ["0020" synchronized]
  ["0040" bridge]
  ["0080" var-args]
  ["0100" native]
  ["0400" abstract]
  ["0800" strict]
  ["1000" synthetic]
  )

(def: #export equivalence
  (Equivalence Method)
  ($_ equivalence.product
      modifier.equivalence
      //index.equivalence
      //index.equivalence
      (row.equivalence //attribute.equivalence)))

(def: #export (reader pool)
  (-> Pool (Reader Method))
  ($_ <>.and
      (get@ #binaryF.reader modifier.format)
      (get@ #binaryF.reader //index.format)
      (get@ #binaryF.reader //index.format)
      (get@ #binaryF.reader
            (binaryF.row/16 {#binaryF.reader (//attribute.reader pool)
                             ## TODO: Get rid of this dirty hack ASAP
                             #binaryF.writer (function (_ _) binaryF.no-op)}))))

(def: #export (writer field)
  (Writer Method)
  (let [attribute-format (: (Format Attribute)
                            {## TODO: Get rid of this dirty hack ASAP
                             #binaryF.reader (<>.fail "")
                             #binaryF.writer //attribute.writer})]
    (`` ($_ binaryF@compose
            (~~ (template [<format> <slot>]
                  [((get@ #binaryF.writer <format>) (get@ <slot> field))]

                  [modifier.format #modifier]
                  [//index.format #name]
                  [//index.format #descriptor]
                  [(binaryF.row/16 attribute-format) #attributes]))
            ))))
