(.module:
  [lux #*
   ["@" target]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]
    ["." io (#+ IO)]
    [concurrency
     ["." atom (#+ Atom)]]]
   [data
    ["." binary (#+ Binary)]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." array]
     ["." dictionary (#+ Dictionary)]]]
   ["." host (#+ import: object do-to)]])

(type: #export Library
  (Atom (Dictionary Text Binary)))

(exception: #export (already-stored {class Text})
  (exception.report
   ["Class" class]))

(exception: #export (unknown {class Text} {known-classes (List Text)})
  (exception.report
   ["Class" class]
   ["Known classes" (exception.enumerate (|>>) known-classes)]))

(exception: #export (cannot-define {class Text} {error Text})
  (exception.report
   ["Class" class]
   ["Error" error]))

(import: #long java/lang/Object
  (getClass [] (java/lang/Class java/lang/Object)))

(import: #long java/lang/String)

(import: #long java/lang/reflect/Method
  (invoke [java/lang/Object [java/lang/Object]] #try java/lang/Object))

(import: #long (java/lang/Class a)
  (getDeclaredMethod [java/lang/String [(java/lang/Class [? < java/lang/Object])]] java/lang/reflect/Method))

(import: #long java/lang/Integer
  (#static TYPE (java/lang/Class java/lang/Integer)))

(import: #long java/lang/reflect/AccessibleObject
  (setAccessible [boolean] void))

(import: #long java/lang/ClassLoader
  (loadClass [java/lang/String]
             #io #try (java/lang/Class java/lang/Object)))

(with-expansions [<elemT> (as-is (java/lang/Class java/lang/Object))]
  (def: java/lang/ClassLoader::defineClass
    java/lang/reflect/Method
    (let [signature (|> (host.array <elemT> 4)
                        (host.array-write 0 (:coerce <elemT>
                                                     (host.class-for java/lang/String)))
                        (host.array-write 1 (java/lang/Object::getClass (host.array byte 0)))
                        (host.array-write 2 (:coerce <elemT>
                                                     (java/lang/Integer::TYPE)))
                        (host.array-write 3 (:coerce <elemT>
                                                     (java/lang/Integer::TYPE))))]
      (do-to (java/lang/Class::getDeclaredMethod "defineClass"
                                                 signature
                                                 (host.class-for java/lang/ClassLoader))
        (java/lang/reflect/AccessibleObject::setAccessible true)))))

(def: #export (define class-name bytecode loader)
  (-> Text Binary java/lang/ClassLoader (Try java/lang/Object))
  (let [signature (array.from-list (list (:coerce java/lang/Object
                                                  class-name)
                                         (:coerce java/lang/Object
                                                  bytecode)
                                         (:coerce java/lang/Object
                                                  (|> 0
                                                      (:coerce (primitive "java.lang.Long"))
                                                      host.long-to-int))
                                         (:coerce java/lang/Object
                                                  (|> bytecode
                                                      binary.size
                                                      (:coerce (primitive "java.lang.Long"))
                                                      host.long-to-int))))]
    (java/lang/reflect/Method::invoke loader signature java/lang/ClassLoader::defineClass)))

(def: #export (new-library _)
  (-> Any Library)
  (atom.atom (dictionary.new text.hash)))

(def: #export (memory library)
  (-> Library java/lang/ClassLoader)
  (with-expansions [<cast> (for {@.old
                                 (<|)
                                 
                                 @.jvm
                                 "jvm object cast"})]
    (<| <cast>
        (object [] java/lang/ClassLoader []
          []
          (java/lang/ClassLoader (findClass self {class-name java/lang/String})
                                 (java/lang/Class [? < java/lang/Object])
                                 #throws [java/lang/ClassNotFoundException]
                                 (let [class-name (:coerce Text class-name)
                                       classes (|> library atom.read io.run)]
                                   (case (dictionary.get class-name classes)
                                     (#.Some bytecode)
                                     (case (..define class-name bytecode (<| <cast> self))
                                       (#try.Success class)
                                       (:assume class)

                                       (#try.Failure error)
                                       (error! (exception.construct ..cannot-define [class-name error])))

                                     #.None
                                     (error! (exception.construct ..unknown [class-name (dictionary.keys classes)])))))))))

(def: #export (store name bytecode library)
  (-> Text Binary Library (IO (Try Any)))
  (do {@ io.monad}
    [library' (atom.read library)]
    (if (dictionary.contains? name library')
      (wrap (exception.throw ..already-stored name))
      (do @
        [_ (atom.update (dictionary.put name bytecode) library)]
        (wrap (#try.Success []))))))

(def: #export (load name loader)
  (-> Text java/lang/ClassLoader
      (IO (Try (java/lang/Class java/lang/Object))))
  (java/lang/ClassLoader::loadClass name loader))
