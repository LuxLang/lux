(.module:
  [lux (#- Type int char)
   [control
    ["<>" parser
     ["<t>" text (#+ Parser)]]]
   [data
    [error (#+ Error)]
    ["." maybe ("#@." functor)]
    ["." text
     format]
    [collection
     ["." list ("#@." functor)]]]])

(template [<descriptor> <definition>]
  [(def: #export <definition> <descriptor>)]

  ["V" void-descriptor]
  ["Z" boolean-descriptor]
  ["B" byte-descriptor]
  ["S" short-descriptor]
  ["I" int-descriptor]
  ["J" long-descriptor]
  ["F" float-descriptor]
  ["D" double-descriptor]
  ["C" char-descriptor]
  )

(template [<name> <reflection>]
  [(def: #export <name> <reflection>)]

  [void-reflection "void"]
  [boolean-reflection "boolean"]
  [byte-reflection "byte"]
  [short-reflection "short"]
  [int-reflection "int"]
  [long-reflection "long"]
  [float-reflection "float"]
  [double-reflection "double"]
  [char-reflection "char"]
  )

(def: #export array-prefix "[")
(def: object-prefix "L")
(def: var-prefix "T")
(def: wildcard-descriptor "*")
(def: lower-prefix "-")
(def: upper-prefix "+")
(def: object-suffix ";")
(def: #export object-class "java.lang.Object")

(def: valid-var-characters/head
  (format "abcdefghijklmnopqrstuvwxyz"
          "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          "_"))

(def: valid-var-characters/tail
  (format valid-var-characters/head
          "0123456789"))

(def: syntax-package-separator ".")
(def: binary-package-separator "/")

(def: valid-class-characters/head
  (format valid-var-characters/head ..binary-package-separator))

(def: valid-class-characters/tail
  (format valid-var-characters/tail ..binary-package-separator))

(type: #export Bound
  #Lower
  #Upper)

(type: #export Primitive
  #Boolean
  #Byte
  #Short
  #Int
  #Long
  #Float
  #Double
  #Char)

(type: #export Var Text)

(with-expansions [<Class> (as-is  [Text (List Generic)])]
  (type: #export #rec Generic
    (#Var Var)
    (#Wildcard (Maybe [Bound Generic]))
    (#Class <Class>))

  (type: #export Class
    <Class>)
  )

(type: #export Parameter
  [Text Class (List Class)])

(type: #export #rec Type
  (#Primitive Primitive)
  (#Generic Generic)
  (#Array Type))

(type: #export Argument
  [Text Type])

(type: #export Return
  (Maybe Type))

(type: #export Method
  {#args (List Type)
   #return Return
   #exceptions (List Generic)})

(type: #export (Typed a)
  [Type a])

(template [<name> <primitive>]
  [(def: #export <name> Type (#Primitive <primitive>))]

  [boolean #Boolean]
  [byte    #Byte]
  [short   #Short]
  [int     #Int]
  [long    #Long]
  [float   #Float]
  [double  #Double]
  [char    #Char]
  )

(template: #export (class name params)
  (#..Generic (#..Class name params)))

(template: #export (var name)
  (#..Generic (#..Var name)))

(template: #export (wildcard bound)
  (#..Generic (#..Wildcard bound)))

(def: #export (array depth elemT)
  (-> Nat Type Type)
  (case depth
    0 elemT
    _ (#Array (array (dec depth) elemT))))

(template [<name> <from> <to>]
  [(def: #export <name>
     (-> Text Text)
     (text.replace-all <from> <to>))]

  [binary-name ..syntax-package-separator ..binary-package-separator]
  [syntax-name ..binary-package-separator ..syntax-package-separator]
  )

(def: #export (descriptor type)
  (-> Type Text)
  (case type
    (#Primitive prim)
    (case prim
      #Boolean ..boolean-descriptor
      #Byte    ..byte-descriptor
      #Short   ..short-descriptor
      #Int     ..int-descriptor
      #Long    ..long-descriptor
      #Float   ..float-descriptor
      #Double  ..double-descriptor
      #Char    ..char-descriptor)

    (#Array sub)
    (format ..array-prefix (descriptor sub))

    (#Generic generic)
    (case generic
      (#Class class params)
      (format ..object-prefix (binary-name class) ..object-suffix)

      (^or (#Var name) (#Wildcard ?bound))
      (descriptor (#Generic (#Class ..object-class (list)))))
    ))

(def: #export (class-name type)
  (-> Type (Maybe Text))
  (case type
    (#Primitive prim)
    #.None

    (#Array sub)
    (#.Some (descriptor type))

    (#Generic generic)
    (case generic
      (#Class class params)
      (#.Some class)

      (^or (#Var name) (#Wildcard ?bound))
      (#.Some ..object-class))
    ))

(def: #export (signature type)
  (-> Type Text)
  (case type
    (#Primitive prim)
    (case prim
      #Boolean ..boolean-descriptor
      #Byte    ..byte-descriptor
      #Short   ..short-descriptor
      #Int     ..int-descriptor
      #Long    ..long-descriptor
      #Float   ..float-descriptor
      #Double  ..double-descriptor
      #Char    ..char-descriptor)

    (#Array sub)
    (format ..array-prefix (signature sub))

    (#Generic generic)
    (case generic
      (#Class class params)
      (let [=params (if (list.empty? params)
                      ""
                      (format "<"
                              (|> params
                                  (list@map (|>> #Generic signature))
                                  (text.join-with ""))
                              ">"))]
        (format ..object-prefix (binary-name class) =params ..object-suffix))

      (#Var name)
      (format ..var-prefix name ..object-suffix)

      (#Wildcard #.None)
      ..wildcard-descriptor

      (^template [<tag> <prefix>]
        (#Wildcard (#.Some [<tag> bound]))
        (format <prefix> (signature (#Generic bound))))
      ([#Lower ..lower-prefix]
       [#Upper ..upper-prefix]))
    ))

(template [<name> <head> <tail>]
  [(def: <name>
     (Parser Text)
     (<t>.slice (<t>.and! (<t>.one-of! <head>)
                          (<t>.some! (<t>.one-of! <tail>)))))]

  [parse-class-name valid-class-characters/head valid-class-characters/tail]
  [parse-var-name valid-var-characters/head valid-var-characters/tail]
  )

(def: parse-var
  (Parser Var)
  (|> ..parse-var-name
      (<>.after (<t>.this ..var-prefix))
      (<>.before (<t>.this ..object-suffix))))

(def: parse-bound
  (Parser Bound)
  ($_ <>.or
      (<t>.this ..lower-prefix)
      (<t>.this ..upper-prefix)))

(def: parse-generic
  (Parser Generic)
  (<>.rec
   (function (_ recur)
     ($_ <>.or
         ..parse-var
         ($_ <>.or
             (<t>.this ..wildcard-descriptor)
             (<>.and ..parse-bound recur)
             )
         (|> (<>.and ..parse-class-name
                     (|> (<>.some recur)
                         (<>.after (<t>.this "<"))
                         (<>.before (<t>.this ">"))
                         (<>.default (list))))
             (<>.after (<t>.this ..object-prefix))
             (<>.before (<t>.this ..object-suffix)))
         ))))

(def: #export parse-signature
  (Parser Type)
  (<>.rec
   (function (_ recur)
     ($_ <>.or
         ($_ <>.or
             (<t>.this ..boolean-descriptor)
             (<t>.this ..byte-descriptor)
             (<t>.this ..short-descriptor)
             (<t>.this ..int-descriptor)
             (<t>.this ..long-descriptor)
             (<t>.this ..float-descriptor)
             (<t>.this ..double-descriptor)
             (<t>.this ..char-descriptor)
             )
         ..parse-generic
         (<>.after (<t>.this ..array-prefix)
                   recur)
         ))))

(def: #export (method args return exceptions)
  (-> (List Type) (Maybe Type) (List Generic) Method)
  {#args args #return return #exceptions exceptions})

(def: method-args
  (text.enclose ["(" ")"]))

(def: #export (method-descriptor method)
  (-> Method Text)
  (format (|> (get@ #args method) (list@map descriptor) (text.join-with "") ..method-args)
          (case (get@ #return method)
            #.None
            ..void-descriptor

            (#.Some return)
            (descriptor return))))

(def: #export (method-signature method)
  (-> Method Text)
  (format (|> (get@ #args method) (list@map signature) (text.join-with "") ..method-args)
          (case (get@ #return method)
            #.None
            ..void-descriptor

            (#.Some return)
            (signature return))
          (|> (get@ #exceptions method)
              (list@map (|>> #Generic signature (format "^")))
              (text.join-with ""))))

(def: #export (reflection-class type)
  (-> Type Text)
  (case type
    (#Primitive prim)
    (case prim
      #Boolean ..boolean-reflection
      #Byte    ..byte-reflection
      #Short   ..short-reflection
      #Int     ..int-reflection
      #Long    ..long-reflection
      #Float   ..float-reflection
      #Double  ..double-reflection
      #Char    ..char-reflection)

    (#Array sub)
    (syntax-name (descriptor type))

    (#Generic generic)
    (case generic
      (#Class class params)
      (syntax-name class)

      (^or (#Var name)
           (#Wildcard #.None)
           (#Wildcard (#.Some [#Lower bound])))
      ..object-class

      (#Wildcard (#.Some [#Upper bound]))
      (reflection-class (#Generic bound)))
    ))
