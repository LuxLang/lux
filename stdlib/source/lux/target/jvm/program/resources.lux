(.module:
  [lux #*
   [abstract
    ["." equivalence (#+ Equivalence)]]
   [control
    ["<>" parser
     ["<2>" binary (#+ Parser)]]]
   [data
    [format
     [".F" binary (#+ Writer) ("#@." monoid)]]]]
  ["." /// #_
   [encoding
    ["#." unsigned (#+ U2)]]])

(type: #export Resources
  {#max-stack U2
   #max-locals U2})

(def: #export start
  Resources
  {#max-stack (///unsigned.u2 0)
   #max-locals (///unsigned.u2 0)})

(def: #export length
  ($_ n/+
      ## u2 max_stack;
      ///unsigned.u2-bytes
      ## u2 max_locals;
      ///unsigned.u2-bytes))

(def: #export equivalence
  (Equivalence Resources)
  ($_ equivalence.product
      ## u2 max_stack;
      ///unsigned.equivalence
      ## u2 max_locals;
      ///unsigned.equivalence
      ))

(def: #export parser
  (Parser Resources)
  ($_ <>.and
      ## u2 max_stack;
      ///unsigned.u2-parser
      ## u2 max_locals;
      ///unsigned.u2-parser
      ))

(def: #export (writer resources)
  (Writer Resources)
  ($_ binaryF@compose
      ## u2 max_stack;
      (///unsigned.u2-writer (get@ #max-stack resources))
      ## u2 max_locals;
      (///unsigned.u2-writer (get@ #max-locals resources))
      ))
