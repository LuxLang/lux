(.module:
  [lux (#- Type int)
   ["." host (#+ import:)]
   [abstract
    [monoid (#+ Monoid)]
    ["." monad (#+ Monad do)]]
   [control
    ["." writer (#+ Writer)]
    ["." state (#+ State')]
    ["." function]
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]]
   [data
    ["." product]
    ["." maybe]
    [text
     ["%" format (#+ format)]]
    [number
     ["n" nat]
     ["i" int]
     ["." i32 (#+ I32)]]
    [collection
     ["." list ("#\." functor fold)]
     ["." dictionary (#+ Dictionary)]
     ["." row (#+ Row)]]]
   [macro
    ["." template]]]
  ["." / #_
   ["#." address (#+ Address)]
   ["#." jump (#+ Jump Big-Jump)]
   ["_" instruction (#+ Primitive-Array-Type Instruction Estimator) ("#\." monoid)]
   ["#." environment (#+ Environment)
    [limit
     ["/." registry (#+ Register Registry)]
     ["/." stack (#+ Stack)]]]
   ["/#" // #_
    ["#." index (#+ Index)]
    [encoding
     ["#." name]
     ["#." unsigned (#+ U1 U2)]
     ["#." signed (#+ S1 S2 S4)]]
    ["#." constant (#+ UTF8)
     ["#/." pool (#+ Pool Resource)]]
    [attribute
     [code
      ["#." exception (#+ Exception)]]]
    ["." type (#+ Type)
     [category (#+ Class Object Value' Value Return' Return Method)]
     ["." reflection]
     ["." parser]]]])

(type: #export Label Nat)

(type: #export Resolver (Dictionary Label [Stack (Maybe Address)]))

(type: #export Tracker
  {#program-counter Address
   #next Label
   #known Resolver})

(def: fresh
  Tracker
  {#program-counter /address.start
   #next 0
   #known (dictionary.new n.hash)})

(type: #export Relative
  (-> Resolver (Try [(Row Exception) Instruction])))

(def: no-exceptions
  (Row Exception)
  row.empty)

(def: relative-identity
  Relative
  (function.constant (#try.Success [..no-exceptions _.empty])))

(structure: relative-monoid
  (Monoid Relative)

  (def: identity ..relative-identity)

  (def: (compose left right)
    (cond (is? ..relative-identity left)
          right

          (is? ..relative-identity right)
          left

          ## else
          (function (_ resolver)
            (do try.monad
              [[left-exceptions left-instruction] (left resolver)
               [right-exceptions right-instruction] (right resolver)]
              (wrap [(:: row.monoid compose left-exceptions right-exceptions)
                     (_\compose left-instruction right-instruction)]))))))

(type: #export (Bytecode a)
  (State' Try [Pool Environment Tracker] (Writer Relative a)))

(def: #export new-label
  (Bytecode Label)
  (function (_ [pool environment tracker])
    (#try.Success [[pool
                    environment
                    (update@ #next inc tracker)]
                   [..relative-identity
                    (get@ #next tracker)]])))

(exception: #export (label-has-already-been-set {label Label})
  (exception.report
   ["Label" (%.nat label)]))

(exception: #export (mismatched-environments {instruction Name}
                                             {label Label}
                                             {address Address}
                                             {expected Stack}
                                             {actual Stack})
  (exception.report
   ["Instruction" (%.name instruction)]
   ["Label" (%.nat label)]
   ["Address" (/address.format address)]
   ["Expected" (/stack.format expected)]
   ["Actual" (/stack.format actual)]))

(with-expansions [<success> (as-is (wrap [[pool
                                           environment
                                           (update@ #known
                                                    (dictionary.put label [actual (#.Some @here)])
                                                    tracker)]
                                          [..relative-identity
                                           []]]))]
  (def: #export (set-label label)
    (-> Label (Bytecode Any))
    (function (_ [pool environment tracker])
      (let [@here (get@ #program-counter tracker)]
        (case (dictionary.get label (get@ #known tracker))
          (#.Some [expected (#.Some address)])
          (exception.throw ..label-has-already-been-set [label])
          
          (#.Some [expected #.None])
          (do try.monad
            [[actual environment] (/environment.continue expected environment)]
            <success>)

          #.None
          (do try.monad
            [[actual environment] (/environment.continue (|> environment
                                                             (get@ #/environment.stack)
                                                             (maybe.default /stack.empty))
                                                         environment)]
            <success>))))))

(def: #export monad
  (Monad Bytecode)
  (<| (:coerce (Monad Bytecode))
      (writer.with ..relative-monoid)
      (: (Monad (State' Try [Pool Environment Tracker])))
      state.with
      (: (Monad Try))
      try.monad))

(def: #export fail
  (-> Text Bytecode)
  (|>> #try.Failure function.constant))

(def: #export (throw exception value)
  (All [e] (-> (exception.Exception e) e Bytecode))
  (..fail (exception.construct exception value)))

(def: #export (resolve environment bytecode)
  (All [a] (-> Environment (Bytecode a) (Resource [Environment (Row Exception) Instruction a])))
  (function (_ pool)
    (do try.monad
      [[[pool environment tracker] [relative output]] (bytecode [pool environment ..fresh])
       [exceptions instruction] (relative (get@ #known tracker))]
      (wrap [pool [environment exceptions instruction output]]))))

(def: (step estimator counter)
  (-> Estimator Address (Try Address))
  (/address.move (estimator counter) counter))

(def: (bytecode consumption production registry [estimator bytecode] input)
  (All [a] (-> U2 U2 Registry [Estimator (-> [a] Instruction)] [a] (Bytecode Any)))
  (function (_ [pool environment tracker])
    (do {! try.monad}
      [environment' (|> environment
                        (/environment.consumes consumption)
                        (monad.bind ! (/environment.produces production))
                        (monad.bind ! (/environment.has registry)))
       program-counter' (step estimator (get@ #program-counter tracker))]
      (wrap [[pool
              environment'
              (set@ #program-counter program-counter' tracker)]
             [(function.constant (wrap [..no-exceptions (bytecode input)]))
              []]]))))

(template [<name> <frames>]
  [(def: <name> U2 (|> <frames> //unsigned.u2 try.assume))]

  [$0 0]
  [$1 1]
  [$2 2]
  [$3 3]
  [$4 4]
  [$5 5]
  [$6 6]
  )

(template [<name> <registry>]
  [(def: <name> Registry (|> <registry> //unsigned.u2 try.assume /registry.registry))]

  [@_ 0]
  [@0 1]
  [@1 2]
  [@2 3]
  [@3 4]
  [@4 5]
  )

(template [<name> <consumption> <production> <registry> <instruction>]
  [(def: #export <name>
     (Bytecode Any)
     (..bytecode <consumption>
                 <production>
                 <registry>
                 <instruction>
                 []))]

  [nop $0 $0 @_ _.nop]
  
  [aconst-null $0 $1 @_ _.aconst-null]

  [iconst-m1 $0 $1 @_ _.iconst-m1]
  [iconst-0 $0 $1 @_ _.iconst-0]
  [iconst-1 $0 $1 @_ _.iconst-1]
  [iconst-2 $0 $1 @_ _.iconst-2]
  [iconst-3 $0 $1 @_ _.iconst-3]
  [iconst-4 $0 $1 @_ _.iconst-4]
  [iconst-5 $0 $1 @_ _.iconst-5]

  [lconst-0 $0 $2 @_ _.lconst-0]
  [lconst-1 $0 $2 @_ _.lconst-1]

  [fconst-0 $0 $1 @_ _.fconst-0]
  [fconst-1 $0 $1 @_ _.fconst-1]
  [fconst-2 $0 $1 @_ _.fconst-2]
  
  [dconst-0 $0 $2 @_ _.dconst-0]
  [dconst-1 $0 $2 @_ _.dconst-1]

  [pop $1 $0 @_ _.pop]
  [pop2 $2 $0 @_ _.pop2]
  
  [dup $1 $2 @_ _.dup]
  [dup-x1 $2 $3 @_ _.dup-x1]
  [dup-x2 $3 $4 @_ _.dup-x2]
  [dup2 $2 $4 @_ _.dup2]
  [dup2-x1 $3 $5 @_ _.dup2-x1]
  [dup2-x2 $4 $6 @_ _.dup2-x2]
  
  [swap $2 $2 @_ _.swap]

  [iaload $2 $1 @_ _.iaload]
  [laload $2 $2 @_ _.laload]
  [faload $2 $1 @_ _.faload]
  [daload $2 $2 @_ _.daload]
  [aaload $2 $1 @_ _.aaload]
  [baload $2 $1 @_ _.baload]
  [caload $2 $1 @_ _.caload]
  [saload $2 $1 @_ _.saload]

  [iload-0 $0 $1 @0 _.iload-0]
  [iload-1 $0 $1 @1 _.iload-1]
  [iload-2 $0 $1 @2 _.iload-2]
  [iload-3 $0 $1 @3 _.iload-3]

  [lload-0 $0 $2 @1 _.lload-0]
  [lload-1 $0 $2 @2 _.lload-1]
  [lload-2 $0 $2 @3 _.lload-2]
  [lload-3 $0 $2 @4 _.lload-3]
  
  [fload-0 $0 $1 @0 _.fload-0]
  [fload-1 $0 $1 @1 _.fload-1]
  [fload-2 $0 $1 @2 _.fload-2]
  [fload-3 $0 $1 @3 _.fload-3]
  
  [dload-0 $0 $2 @1 _.dload-0]
  [dload-1 $0 $2 @2 _.dload-1]
  [dload-2 $0 $2 @3 _.dload-2]
  [dload-3 $0 $2 @4 _.dload-3]
  
  [aload-0 $0 $1 @0 _.aload-0]
  [aload-1 $0 $1 @1 _.aload-1]
  [aload-2 $0 $1 @2 _.aload-2]
  [aload-3 $0 $1 @3 _.aload-3]

  [iastore $3 $1 @_ _.iastore]
  [lastore $4 $1 @_ _.lastore]
  [fastore $3 $1 @_ _.fastore]
  [dastore $4 $1 @_ _.dastore]
  [aastore $3 $1 @_ _.aastore]
  [bastore $3 $1 @_ _.bastore]
  [castore $3 $1 @_ _.castore]
  [sastore $3 $1 @_ _.sastore]

  [istore-0 $1 $0 @0 _.istore-0]
  [istore-1 $1 $0 @1 _.istore-1]
  [istore-2 $1 $0 @2 _.istore-2]
  [istore-3 $1 $0 @3 _.istore-3]

  [lstore-0 $2 $0 @1 _.lstore-0]
  [lstore-1 $2 $0 @2 _.lstore-1]
  [lstore-2 $2 $0 @3 _.lstore-2]
  [lstore-3 $2 $0 @4 _.lstore-3]

  [fstore-0 $1 $0 @0 _.fstore-0]
  [fstore-1 $1 $0 @1 _.fstore-1]
  [fstore-2 $1 $0 @2 _.fstore-2]
  [fstore-3 $1 $0 @3 _.fstore-3]

  [dstore-0 $2 $0 @1 _.dstore-0]
  [dstore-1 $2 $0 @2 _.dstore-1]
  [dstore-2 $2 $0 @3 _.dstore-2]
  [dstore-3 $2 $0 @4 _.dstore-3]
  
  [astore-0 $1 $0 @0 _.astore-0]
  [astore-1 $1 $0 @1 _.astore-1]
  [astore-2 $1 $0 @2 _.astore-2]
  [astore-3 $1 $0 @3 _.astore-3]

  [iadd $2 $1 @_ _.iadd]
  [isub $2 $1 @_ _.isub]
  [imul $2 $1 @_ _.imul]
  [idiv $2 $1 @_ _.idiv]
  [irem $2 $1 @_ _.irem]
  [ineg $1 $1 @_ _.ineg]
  [iand $2 $1 @_ _.iand]
  [ior $2 $1 @_ _.ior]
  [ixor $2 $1 @_ _.ixor]
  [ishl $2 $1 @_ _.ishl]
  [ishr $2 $1 @_ _.ishr]
  [iushr $2 $1 @_ _.iushr]

  [ladd $4 $2 @_ _.ladd]
  [lsub $4 $2 @_ _.lsub]
  [lmul $4 $2 @_ _.lmul]
  [ldiv $4 $2 @_ _.ldiv]
  [lrem $4 $2 @_ _.lrem]
  [lneg $2 $2 @_ _.lneg]
  [land $4 $2 @_ _.land]
  [lor $4 $2 @_ _.lor]
  [lxor $4 $2 @_ _.lxor]
  [lshl $3 $2 @_ _.lshl]
  [lshr $3 $2 @_ _.lshr]
  [lushr $3 $2 @_ _.lushr]
  
  [fadd $2 $1 @_ _.fadd]
  [fsub $2 $1 @_ _.fsub]
  [fmul $2 $1 @_ _.fmul]
  [fdiv $2 $1 @_ _.fdiv]
  [frem $2 $1 @_ _.frem]
  [fneg $1 $1 @_ _.fneg]
  
  [dadd $4 $2 @_ _.dadd]
  [dsub $4 $2 @_ _.dsub]
  [dmul $4 $2 @_ _.dmul]
  [ddiv $4 $2 @_ _.ddiv]
  [drem $4 $2 @_ _.drem]
  [dneg $2 $2 @_ _.dneg]

  [l2i $2 $1 @_ _.l2i]
  [l2f $2 $1 @_ _.l2f]
  [l2d $2 $2 @_ _.l2d]
  
  [f2i $1 $1 @_ _.f2i]
  [f2l $1 $2 @_ _.f2l]
  [f2d $1 $2 @_ _.f2d]
  
  [d2i $2 $1 @_ _.d2i]
  [d2l $2 $2 @_ _.d2l]
  [d2f $2 $1 @_ _.d2f]

  [i2l $1 $2 @_ _.i2l]
  [i2f $1 $1 @_ _.i2f]
  [i2d $1 $2 @_ _.i2d]
  [i2b $1 $1 @_ _.i2b]
  [i2c $1 $1 @_ _.i2c]
  [i2s $1 $1 @_ _.i2s]

  [lcmp $4 $1 @_ _.lcmp]
  
  [fcmpl $2 $1 @_ _.fcmpl]
  [fcmpg $2 $1 @_ _.fcmpg]

  [dcmpl $4 $1 @_ _.dcmpl]
  [dcmpg $4 $1 @_ _.dcmpg]

  [arraylength $1 $1 @_ _.arraylength]
  
  [monitorenter $1 $0 @_ _.monitorenter]
  [monitorexit $1 $0 @_ _.monitorexit]
  )

(def: discontinuity!
  (Bytecode Any)
  (function (_ [pool environment tracker])
    (do try.monad
      [_ (/environment.stack environment)]
      (wrap [[pool
              (/environment.discontinue environment)
              tracker]
             [..relative-identity
              []]]))))

(template [<name> <consumption> <instruction>]
  [(def: #export <name>
     (Bytecode Any)
     (do ..monad
       [_ (..bytecode <consumption> $0 @_ <instruction> [])]
       ..discontinuity!))]

  [ireturn $1 _.ireturn]
  [lreturn $2 _.lreturn]
  [freturn $1 _.freturn]
  [dreturn $2 _.dreturn]
  [areturn $1 _.areturn]
  [return $0 _.return]

  [athrow $1 _.athrow]
  )

(def: #export (bipush byte)
  (-> S1 (Bytecode Any))
  (..bytecode $0 $1 @_ _.bipush [byte]))

(def: (lift resource)
  (All [a]
    (-> (Resource a)
        (Bytecode a)))
  (function (_ [pool environment tracker])
    (do try.monad
      [[pool' output] (resource pool)]
      (wrap [[pool' environment tracker]
             [..relative-identity
              output]]))))

(def: #export (string value)
  (-> //constant.UTF8 (Bytecode Any))
  (do ..monad
    [index (..lift (//constant/pool.string value))]
    (case (|> index //index.value //unsigned.value //unsigned.u1)
      (#try.Success index)
      (..bytecode $0 $1 @_ _.ldc [index])

      (#try.Failure _)
      (..bytecode $0 $1 @_ _.ldc-w/string [index]))))

(import: java/lang/Float
  (#static floatToRawIntBits #manual [float] int))

(import: java/lang/Double
  (#static doubleToRawLongBits #manual [double] int))

(template [<name> <type> <constructor> <constant> <wide> <to-lux> <specializations>]
  [(def: #export (<name> value)
     (-> <type> (Bytecode Any))
     (case (|> value <to-lux>)
       (^template [<special> <instruction>]
         [<special> (..bytecode $0 $1 @_ <instruction> [])])
       <specializations>
       
       _ (do ..monad
           [index (..lift (<constant> (<constructor> value)))]
           (case (|> index //index.value //unsigned.value //unsigned.u1)
             (#try.Success index)
             (..bytecode $0 $1 @_ _.ldc [index])

             (#try.Failure _)
             (..bytecode $0 $1 @_ <wide> [index])))))]

  [int I32 //constant.integer //constant/pool.integer _.ldc-w/integer
   (<| .int i32.i64)
   ([-1 _.iconst-m1]
    [+0 _.iconst-0]
    [+1 _.iconst-1]
    [+2 _.iconst-2]
    [+3 _.iconst-3]
    [+4 _.iconst-4]
    [+5 _.iconst-5])]
  )

(def: (arbitrary-float value)
  (-> java/lang/Float (Bytecode Any))
  (do ..monad
    [index (..lift (//constant/pool.float (//constant.float value)))]
    (case (|> index //index.value //unsigned.value //unsigned.u1)
      (#try.Success index)
      (..bytecode $0 $1 @_ _.ldc [index])

      (#try.Failure _)
      (..bytecode $0 $1 @_ _.ldc-w/float [index]))))

(def: float-bits
  (-> java/lang/Float Int)
  (|>> java/lang/Float::floatToRawIntBits
       host.int-to-long
       (:coerce Int)))

(def: negative-zero-float-bits
  (|> -0.0 host.double-to-float ..float-bits))

(def: #export (float value)
  (-> java/lang/Float (Bytecode Any))
  (if (i.= ..negative-zero-float-bits
           (..float-bits value))
    (..arbitrary-float value)
    (case (|> value host.float-to-double (:coerce Frac))
      (^template [<special> <instruction>]
        [<special> (..bytecode $0 $1 @_ <instruction> [])])
      ([+0.0 _.fconst-0]
       [+1.0 _.fconst-1]
       [+2.0 _.fconst-2])
      
      _ (..arbitrary-float value))))

(template [<name> <type> <constructor> <constant> <wide> <to-lux> <specializations>]
  [(def: #export (<name> value)
     (-> <type> (Bytecode Any))
     (case (|> value <to-lux>)
       (^template [<special> <instruction>]
         [<special> (..bytecode $0 $2 @_ <instruction> [])])
       <specializations>
       
       _ (do ..monad
           [index (..lift (<constant> (<constructor> value)))]
           (..bytecode $0 $2 @_ <wide> [index]))))]

  [long Int //constant.long //constant/pool.long _.ldc2-w/long
   (<|)
   ([+0 _.lconst-0]
    [+1 _.lconst-1])]
  )

(def: (arbitrary-double value)
  (-> java/lang/Double (Bytecode Any))
  (do ..monad
    [index (..lift (//constant/pool.double (//constant.double value)))]
    (..bytecode $0 $2 @_ _.ldc2-w/double [index])))

(def: double-bits
  (-> java/lang/Double Int)
  (|>> java/lang/Double::doubleToRawLongBits
       (:coerce Int)))

(def: negative-zero-double-bits
  (..double-bits -0.0))

(def: #export (double value)
  (-> java/lang/Double (Bytecode Any))
  (if (i.= ..negative-zero-double-bits
           (..double-bits value))
    (..arbitrary-double value)
    (case value
      (^template [<special> <instruction>]
        [<special> (..bytecode $0 $2 @_ <instruction> [])])
      ([+0.0 _.dconst-0]
       [+1.0 _.dconst-1])
      
      _ (..arbitrary-double value))))

(exception: #export (invalid-register {id Nat})
  (exception.report
   ["ID" (%.nat id)]))

(def: (register id)
  (-> Nat (Bytecode Register))
  (case (//unsigned.u1 id)
    (#try.Success register)
    (:: ..monad wrap register)
    
    (#try.Failure error)
    (..throw ..invalid-register [id])))

(template [<for> <size> <name> <general> <specials>]
  [(def: #export (<name> local)
     (-> Nat (Bytecode Any))
     (with-expansions [<specials>' (template.splice <specials>)]
       (`` (case local
             (~~ (template [<case> <instruction> <registry>]
                   [<case> (..bytecode $0 <size> <registry> <instruction> [])]
                   
                   <specials>'))
             _ (do ..monad
                 [local (..register local)]
                 (..bytecode $0 <size> (<for> local) <general> [local]))))))]
  
  [/registry.for $1 iload _.iload
   [[0 _.iload-0 @0]
    [1 _.iload-1 @1]
    [2 _.iload-2 @2]
    [3 _.iload-3 @3]]]
  [/registry.for-wide $2 lload _.lload
   [[0 _.lload-0 @1]
    [1 _.lload-1 @2]
    [2 _.lload-2 @3]
    [3 _.lload-3 @4]]]
  [/registry.for $1 fload _.fload
   [[0 _.fload-0 @0]
    [1 _.fload-1 @1]
    [2 _.fload-2 @2]
    [3 _.fload-3 @3]]]
  [/registry.for-wide $2 dload _.dload
   [[0 _.dload-0 @1]
    [1 _.dload-1 @2]
    [2 _.dload-2 @3]
    [3 _.dload-3 @4]]]
  [/registry.for $1 aload _.aload
   [[0 _.aload-0 @0]
    [1 _.aload-1 @1]
    [2 _.aload-2 @2]
    [3 _.aload-3 @3]]]
  )

(template [<for> <size> <name> <general> <specials>]
  [(def: #export (<name> local)
     (-> Nat (Bytecode Any))
     (with-expansions [<specials>' (template.splice <specials>)]
       (`` (case local
             (~~ (template [<case> <instruction> <registry>]
                   [<case> (..bytecode <size> $0 <registry> <instruction> [])]
                   
                   <specials>'))
             _ (do ..monad
                 [local (..register local)]
                 (..bytecode <size> $0 (<for> local) <general> [local]))))))]
  
  [/registry.for $1 istore _.istore
   [[0 _.istore-0 @0]
    [1 _.istore-1 @1]
    [2 _.istore-2 @2]
    [3 _.istore-3 @3]]]
  [/registry.for-wide $2 lstore _.lstore
   [[0 _.lstore-0 @1]
    [1 _.lstore-1 @2]
    [2 _.lstore-2 @3]
    [3 _.lstore-3 @4]]]
  [/registry.for $1 fstore _.fstore
   [[0 _.fstore-0 @0]
    [1 _.fstore-1 @1]
    [2 _.fstore-2 @2]
    [3 _.fstore-3 @3]]]
  [/registry.for-wide $2 dstore _.dstore
   [[0 _.dstore-0 @1]
    [1 _.dstore-1 @2]
    [2 _.dstore-2 @3]
    [3 _.dstore-3 @4]]]
  [/registry.for $1 astore _.astore
   [[0 _.astore-0 @0]
    [1 _.astore-1 @1]
    [2 _.astore-2 @2]
    [3 _.astore-3 @3]]]
  )

(template [<consumption> <production> <name> <instruction> <input>]
  [(def: #export <name>
     (-> <input> (Bytecode Any))
     (..bytecode <consumption> <production> @_ <instruction>))]
  
  [$1 $1 newarray _.newarray Primitive-Array-Type]
  [$0 $1 sipush _.sipush S2]
  )

(exception: #export (unknown-label {label Label})
  (exception.report
   ["Label" (%.nat label)]))

(exception: #export (cannot-do-a-big-jump {label Label}
                                          {@from Address}
                                          {jump Big-Jump})
  (exception.report
   ["Label" (%.nat label)]
   ["Start" (|> @from /address.value //unsigned.value %.nat)]
   ["Target" (|> jump //signed.value %.int)]))

(type: Any-Jump (Either Big-Jump Jump))

(def: (jump @from @to)
  (-> Address Address (Try Any-Jump))
  (do {! try.monad}
    [jump (:: ! map //signed.value
              (/address.jump @from @to))]
    (let [big? (n.> (//unsigned.value //unsigned.maximum/2)
                    (.nat (i.* (if (i.>= +0 jump)
                                 +1
                                 -1)
                               jump)))]
      (if big?
        (:: ! map (|>> #.Left) (//signed.s4 jump))
        (:: ! map (|>> #.Right) (//signed.s2 jump))))))

(exception: #export (unset-label {label Label})
  (exception.report
   ["Label" (%.nat label)]))

(def: (resolve-label label resolver)
  (-> Label Resolver (Try [Stack Address]))
  (case (dictionary.get label resolver)
    (#.Some [actual (#.Some address)])
    (#try.Success [actual address])

    (#.Some [actual #.None])
    (exception.throw ..unset-label [label])
    
    #.None
    (exception.throw ..unknown-label [label])))

(def: (acknowledge-label stack label tracker)
  (-> Stack Label Tracker Tracker)
  (case (dictionary.get label (get@ #known tracker))
    (#.Some _)
    tracker

    #.None
    (update@ #known (dictionary.put label [stack #.None]) tracker)))

(template [<consumption> <name> <instruction>]
  [(def: #export (<name> label)
     (-> Label (Bytecode Any))
     (let [[estimator bytecode] <instruction>]
       (function (_ [pool environment tracker])
         (let [@here (get@ #program-counter tracker)]
           (do try.monad
             [environment' (|> environment
                               (/environment.consumes <consumption>))
              actual (/environment.stack environment')
              program-counter' (step estimator @here)]
             (wrap (let [@from @here]
                     [[pool
                       environment'
                       (|> tracker
                           (..acknowledge-label actual label)
                           (set@ #program-counter program-counter'))]
                      [(function (_ resolver)
                         (do try.monad
                           [[expected @to] (..resolve-label label resolver)
                            _ (exception.assert ..mismatched-environments [(name-of <instruction>) label @here expected actual]
                                                (:: /stack.equivalence = expected actual))
                            jump (..jump @from @to)]
                           (case jump
                             (#.Left jump)
                             (exception.throw ..cannot-do-a-big-jump [label @from jump])

                             (#.Right jump)
                             (wrap [..no-exceptions (bytecode jump)]))))
                       []]])))))))]

  [$1 ifeq _.ifeq]
  [$1 ifne _.ifne]
  [$1 iflt _.iflt]
  [$1 ifge _.ifge]
  [$1 ifgt _.ifgt]
  [$1 ifle _.ifle]
  
  [$1 ifnull _.ifnull]
  [$1 ifnonnull _.ifnonnull]

  [$2 if-icmpeq _.if-icmpeq]
  [$2 if-icmpne _.if-icmpne]
  [$2 if-icmplt _.if-icmplt]
  [$2 if-icmpge _.if-icmpge]
  [$2 if-icmpgt _.if-icmpgt]
  [$2 if-icmple _.if-icmple]
  
  [$2 if-acmpeq _.if-acmpeq]
  [$2 if-acmpne _.if-acmpne]
  )

(template [<name> <instruction> <on-long-jump> <on-short-jump>]
  [(def: #export (<name> label)
     (-> Label (Bytecode Any))
     (let [[estimator bytecode] <instruction>]
       (function (_ [pool environment tracker])
         (do try.monad
           [actual (/environment.stack environment)
            #let [@here (get@ #program-counter tracker)]
            program-counter' (step estimator @here)]
           (wrap (let [@from @here]
                   [[pool
                     (/environment.discontinue environment)
                     (|> tracker
                         (..acknowledge-label actual label)
                         (set@ #program-counter program-counter'))]
                    [(function (_ resolver)
                       (case (dictionary.get label resolver)
                         (#.Some [expected (#.Some @to)])
                         (do try.monad
                           [_ (exception.assert ..mismatched-environments [(name-of <instruction>) label @here expected actual]
                                                (:: /stack.equivalence = expected actual))
                            jump (..jump @from @to)]
                           (case jump
                             (#.Left jump)
                             <on-long-jump>

                             (#.Right jump)
                             <on-short-jump>))

                         (#.Some [expected #.None])
                         (exception.throw ..unset-label [label])

                         #.None
                         (exception.throw ..unknown-label [label])))
                     []]]))))))]

  [goto _.goto
   (exception.throw ..cannot-do-a-big-jump [label @from jump])
   (wrap [..no-exceptions (bytecode jump)])]
  [goto-w _.goto-w
   (wrap [..no-exceptions (bytecode jump)])
   (wrap [..no-exceptions (bytecode (/jump.lift jump))])]
  )

(def: (big-jump jump)
  (-> Any-Jump Big-Jump)
  (case jump
    (#.Left big)
    big

    (#.Right small)
    (/jump.lift small)))

(exception: #export invalid-tableswitch)

(def: #export (tableswitch minimum default [at-minimum afterwards])
  (-> S4 Label [Label (List Label)] (Bytecode Any))
  (let [[estimator bytecode] _.tableswitch]
    (function (_ [pool environment tracker])
      (do try.monad
        [environment' (|> environment
                          (/environment.consumes $1))
         actual (/environment.stack environment')
         program-counter' (step (estimator (list.size afterwards)) (get@ #program-counter tracker))]
        (wrap (let [@from (get@ #program-counter tracker)]
                [[pool
                  environment'
                  (|> (list\fold (..acknowledge-label actual) tracker (list& default at-minimum afterwards))
                      (set@ #program-counter program-counter'))]
                 [(function (_ resolver)
                    (let [get (: (-> Label (Maybe [Stack (Maybe Address)]))
                                 (function (_ label)
                                   (dictionary.get label resolver)))]
                      (case (do {! maybe.monad}
                              [@default (|> default get (monad.bind ! product.right))
                               @at-minimum (|> at-minimum get (monad.bind ! product.right))
                               @afterwards (|> afterwards
                                               (monad.map ! get)
                                               (monad.bind ! (monad.map ! product.right)))]
                              (wrap [@default @at-minimum @afterwards]))
                        (#.Some [@default @at-minimum @afterwards])
                        (do {! try.monad}
                          [>default (:: ! map ..big-jump (..jump @from @default))
                           >at-minimum (:: ! map ..big-jump (..jump @from @at-minimum))
                           >afterwards (monad.map ! (|>> (..jump @from) (:: ! map ..big-jump))
                                                  @afterwards)]
                          (wrap [..no-exceptions (bytecode minimum >default [>at-minimum >afterwards])]))

                        #.None
                        (exception.throw ..invalid-tableswitch []))))
                  []]]))))))

(exception: #export invalid-lookupswitch)

(def: #export (lookupswitch default cases)
  (-> Label (List [S4 Label]) (Bytecode Any))
  (let [cases (list.sort (function (_ [left _] [right _])
                           (i.< (//signed.value left)
                                (//signed.value right)))
                         cases)
        [estimator bytecode] _.lookupswitch]
    (function (_ [pool environment tracker])
      (do try.monad
        [environment' (|> environment
                          (/environment.consumes $1))
         actual (/environment.stack environment')
         program-counter' (step (estimator (list.size cases)) (get@ #program-counter tracker))]
        (wrap (let [@from (get@ #program-counter tracker)]
                [[pool
                  environment'
                  (|> (list\fold (..acknowledge-label actual) tracker (list& default (list\map product.right cases)))
                      (set@ #program-counter program-counter'))]
                 [(function (_ resolver)
                    (let [get (: (-> Label (Maybe [Stack (Maybe Address)]))
                                 (function (_ label)
                                   (dictionary.get label resolver)))]
                      (case (do {! maybe.monad}
                              [@default (|> default get (monad.bind ! product.right))
                               @cases (|> cases
                                          (monad.map ! (|>> product.right get))
                                          (monad.bind ! (monad.map ! product.right)))]
                              (wrap [@default @cases]))
                        (#.Some [@default @cases])
                        (do {! try.monad}
                          [>default (:: ! map ..big-jump (..jump @from @default))
                           >cases (|> @cases
                                      (monad.map ! (|>> (..jump @from) (:: ! map ..big-jump)))
                                      (:: ! map (|>> (list.zip/2 (list\map product.left cases)))))]
                          (wrap [..no-exceptions (bytecode >default >cases)]))

                        #.None
                        (exception.throw ..invalid-lookupswitch []))))
                  []]]))))))

(def: reflection
  (All [category]
    (-> (Type (<| Return' Value' category)) Text))
  (|>> type.reflection reflection.reflection))

(template [<consumption> <production> <name> <category> <instruction>]
  [(def: #export (<name> class)
     (-> (Type <category>) (Bytecode Any))
     (do ..monad
       [## TODO: Make sure it's impossible to have indexes greater than U2.
        index (..lift (//constant/pool.class (//name.internal (..reflection class))))]
       (..bytecode <consumption> <production> @_ <instruction> [index])))]

  [$0 $1 new Class _.new]
  [$1 $1 anewarray Object _.anewarray]
  [$1 $1 checkcast Object _.checkcast]
  [$1 $1 instanceof Object _.instanceof]
  )

(def: #export (iinc register increase)
  (-> Nat U1 (Bytecode Any))
  (do ..monad
    [register (..register register)]
    (..bytecode $0 $0 (/registry.for register) _.iinc [register increase])))

(exception: #export (multiarray-cannot-be-zero-dimensional {class (Type Object)})
  (exception.report ["Class" (..reflection class)]))

(def: #export (multianewarray class dimensions)
  (-> (Type Object) U1 (Bytecode Any))
  (do ..monad
    [_ (: (Bytecode Any)
          (case (|> dimensions //unsigned.value)
            0 (..throw ..multiarray-cannot-be-zero-dimensional [class])
            _ (wrap [])))
     index (..lift (//constant/pool.class (//name.internal (..reflection class))))]
    (..bytecode (//unsigned.lift/2 dimensions) $1 @_ _.multianewarray [index dimensions])))

(def: (type-size type)
  (-> (Type Return) Nat)
  (cond (is? type.void type)
        0

        (or (is? type.long type)
            (is? type.double type))
        2

        ## else
        1))

(template [<static?> <name> <instruction> <method>]
  [(def: #export (<name> class method type)
     (-> (Type Class) Text (Type Method) (Bytecode Any))
     (let [[inputs output exceptions] (parser.method type)]
       (do ..monad
         [index (<| ..lift
                    (<method> (..reflection class))
                    {#//constant/pool.name method
                     #//constant/pool.descriptor (type.descriptor type)})
          #let [consumption (|> inputs
                                (list\map ..type-size)
                                (list\fold n.+ (if <static?> 0 1))
                                //unsigned.u1
                                try.assume)
                production (|> output ..type-size //unsigned.u1 try.assume)]]
         (..bytecode (//unsigned.lift/2 consumption)
                     (//unsigned.lift/2 production)
                     @_
                     <instruction> [index consumption production]))))]

  [#1 invokestatic _.invokestatic //constant/pool.method]
  [#0 invokevirtual _.invokevirtual //constant/pool.method]
  [#0 invokespecial _.invokespecial //constant/pool.method]
  [#0 invokeinterface _.invokeinterface //constant/pool.interface-method]
  )

(template [<consumption> <name> <1> <2>]
  [(def: #export (<name> class field type)
     (-> (Type Class) Text (Type Value) (Bytecode Any))
     (do ..monad
       [index (<| ..lift
                  (//constant/pool.field (..reflection class))
                  {#//constant/pool.name field
                   #//constant/pool.descriptor (type.descriptor type)})]
       (if (or (is? type.long type)
               (is? type.double type))
         (..bytecode <consumption> $2 @_ <2> [index])
         (..bytecode <consumption> $1 @_ <1> [index]))))]

  [$0 getstatic _.getstatic/1 _.getstatic/2]
  [$1 putstatic _.putstatic/1 _.putstatic/2]
  [$1 getfield _.getfield/1 _.getfield/2]
  [$2 putfield _.putfield/1 _.putfield/2]
  )

(exception: #export (invalid-range-for-try {start Address} {end Address})
  (exception.report
   ["Start" (|> start /address.value //unsigned.value %.nat)]
   ["End" (|> end /address.value //unsigned.value %.nat)]))

(def: #export (try @start @end @handler catch)
  (-> Label Label Label (Type Class) (Bytecode Any))
  (do ..monad
    [@catch (..lift (//constant/pool.class (//name.internal (..reflection catch))))]
    (function (_ [pool environment tracker])
      (#try.Success
       [[pool
         environment
         (..acknowledge-label /stack.catch @handler tracker)]
        [(function (_ resolver)
           (do try.monad
             [[_ @start] (..resolve-label @start resolver)
              [_ @end] (..resolve-label @end resolver)
              _ (if (/address.after? @start @end)
                  (wrap [])
                  (exception.throw ..invalid-range-for-try [@start @end]))
              [_ @handler] (..resolve-label @handler resolver)]
             (wrap [(row.row {#//exception.start @start
                              #//exception.end @end
                              #//exception.handler @handler
                              #//exception.catch @catch})
                    _.empty])))
         []]]))))

(def: #export (compose pre post)
  (All [pre post]
    (-> (Bytecode pre) (Bytecode post) (Bytecode post)))
  (do ..monad
    [_ pre]
    post))
