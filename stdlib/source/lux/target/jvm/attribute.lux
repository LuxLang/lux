(.module:
  [lux (#- Info Code)
   [abstract
    [monad (#+ do)]
    ["." equivalence (#+ Equivalence)]]
   [control
    ["." state (#+ State)]
    ["." try]
    ["." exception (#+ exception:)]
    ["<>" parser
     ["<2>" binary (#+ Parser)]]]
   [data
    ["." product]
    [format
     [".F" binary (#+ Writer) ("#@." monoid)]]]]
  ["." // #_
   ["#." index (#+ Index)]
   [encoding
    ["#." unsigned (#+ U2 U4)]]
   ["#." constant (#+ UTF8 Class Value)
    ["#/." pool (#+ Pool)]]]
  ["." / #_
   ["#." constant (#+ Constant)]
   ["#." code]])

(type: #export (Info about)
  {#name (Index UTF8)
   #length U4
   #info about})

(def: #export (info-equivalence Equivalence<about>)
  (All [about]
    (-> (Equivalence about)
        (Equivalence (Info about))))
  ($_ equivalence.product
      //index.equivalence
      //unsigned.equivalence
      Equivalence<about>))

(def: (info-writer writer)
  (All [about]
    (-> (Writer about)
        (Writer (Info about))))
  (function (_ [name length info])
    (let [[nameS nameT] (//index.writer name)
          [lengthS lengthT] (//unsigned.u4-writer length)
          [infoS infoT] (writer info)]
      [($_ n/+ nameS lengthS infoS)
       (|>> nameT lengthT infoT)])))

(with-expansions [<Code> (as-is (/code.Code Attribute))]
  (type: #export #rec Attribute
    (#Constant (Info Constant))
    (#Code (Info <Code>)))

  (type: #export Code
    <Code>)
  )

(def: #export equivalence
  (Equivalence Attribute)
  (equivalence.rec
   (function (_ equivalence)
     ($_ equivalence.sum
         (info-equivalence /constant.equivalence)
         (info-equivalence (/code.equivalence equivalence))))))

(def: fixed-attribute-length
  ($_ n/+
      ## u2 attribute_name_index;
      //unsigned.u2-bytes
      ## u4 attribute_length;
      //unsigned.u4-bytes
      ))

(def: (length attribute)
  (-> Attribute Nat)
  (case attribute
    (^template [<tag>]
      (<tag> [name length info])
      (|> length //unsigned.nat .nat (n/+ fixed-attribute-length)))
    ([#Constant] [#Code])))

(def: constant-name "ConstantValue")

(def: (constant' @name index)
  (-> (Index UTF8) Constant Attribute)
  (#Constant {#name @name
              #length (//unsigned.u4 /constant.length)
              #info index}))

(def: #export (constant index)
  (-> Constant (State Pool Attribute))
  (do state.monad
    [@name (//constant/pool.utf8 ..constant-name)]
    (wrap (constant' @name index))))

(def: code-name "Code")

(def: (code' @name specification)
  (-> (Index UTF8) Code Attribute)
  (#Code {#name @name
          ## https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.3
          #length (//unsigned.u4
                   (/code.length ..length specification))
          #info specification}))

(def: #export (code specification)
  (-> Code (State Pool Attribute))
  (do state.monad
    [@name (//constant/pool.utf8 ..code-name)]
    (wrap (code' @name specification))))

(exception: #export invalid-attribute)

(def: #export (parser pool)
  (-> Pool (Parser Attribute))
  (let [?@constant (|> ..constant-name
                       //constant/pool.find-utf8
                       (state.run pool)
                       product.right)
        ?@code (|> ..code-name
                   //constant/pool.find-utf8
                   (state.run pool)
                   product.right)
        (^open "_@.") (try.equivalence //index.equivalence)]
    (<>.rec
     (function (_ parser)
       (do <>.monad
         [@name //index.parser
          length //unsigned.u4-parser]
         (cond (_@= ?@constant (#try.Success @name))
               (:: @ map (..constant' @name) /constant.parser)
               
               (_@= ?@code (#try.Success @name))
               (:: @ map (..code' @name) (/code.parser parser))

               ## else
               (<>.fail (exception.construct ..invalid-attribute []))))))))

(def: #export (writer value)
  (Writer Attribute)
  (case value
    (#Constant attribute)
    ((info-writer /constant.writer) attribute)
    
    (#Code attribute)
    ((info-writer (/code.writer writer)) attribute)))
