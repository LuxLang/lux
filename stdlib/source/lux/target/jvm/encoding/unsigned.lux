(.module:
  [lux (#- nat)
   [abstract
    [equivalence (#+ Equivalence)]
    [order (#+ Order)]]
   [data
    [number
     ["." i64]]
    [format
     [".F" binary (#+ Writer)]]]
   [macro
    ["." template]]
   [type
    abstract]])

(abstract: #export (Unsigned brand)
  {}
  Nat

  (def: #export nat
    (-> (Unsigned Any) Nat)
    (|>> :representation))

  (structure: #export equivalence
    (All [brand] (Equivalence (Unsigned brand)))
    (def: (= reference sample)
      (n/= (:representation reference) (:representation sample))))

  (structure: #export order
    (All [brand] (Order (Unsigned brand)))
    
    (def: &equivalence ..equivalence)
    (def: (< reference sample)
      (n/< (:representation reference) (:representation sample))))

  (template [<bytes> <name> <size> <constructor> <max> <+>]
    [(with-expansions [<raw> (template.identifier [<name> "'"])]
       (abstract: #export <raw> {} Any)
       (type: #export <name> (Unsigned <raw>)))

     (def: #export <size> Nat <bytes>)
     
     (def: #export <max>
       <name>
       (|> <bytes> (n/* i64.bits-per-byte) i64.mask :abstraction))
     
     (def: #export <constructor>
       (-> Nat <name>)
       (|>> (i64.and (:representation <max>)) :abstraction))

     (def: #export (<+> parameter subject)
       (-> <name> <name> <name>)
       (:abstraction
        (i64.and (:representation <max>)
                 (n/+ (:representation parameter)
                      (:representation subject)))))]

    [1 U1 u1-bytes u1 max-u1 u1/+]
    [2 U2 u2-bytes u2 max-u2 u2/+]
    [4 U4 u4-bytes u4 max-u4 u4/+]
    )
  )

(template [<writer-name> <type> <writer>]
  [(def: #export <writer-name>
     (Writer <type>)
     (|>> ..nat <writer>))]

  [u1-writer U1 binaryF.bits/8]
  [u2-writer U2 binaryF.bits/16]
  [u4-writer U4 binaryF.bits/32]
  )
