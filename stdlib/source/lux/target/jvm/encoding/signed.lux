(.module:
  [lux (#- int)
   [abstract
    [equivalence (#+ Equivalence)]
    [order (#+ Order)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]]
   [data
    [number
     ["." i64]
     ["n" nat]
     ["i" int]]
    [text
     ["%" format (#+ format)]]
    ["." format #_
     ["#" binary (#+ Writer)]]]
   [macro
    ["." template]]
   [type
    abstract]])

(abstract: #export (Signed brand)
  Int

  (def: #export value
    (-> (Signed Any) Int)
    (|>> :representation))

  (structure: #export equivalence
    (All [brand] (Equivalence (Signed brand)))
    (def: (= reference sample)
      (i.= (:representation reference) (:representation sample))))

  (structure: #export order
    (All [brand] (Order (Signed brand)))
    
    (def: &equivalence ..equivalence)
    (def: (< reference sample)
      (i.< (:representation reference) (:representation sample))))

  (exception: #export (value-exceeds-the-scope {value Int}
                                               {scope Nat})
    (exception.report
     ["Value" (%.int value)]
     ["Scope (in bytes)" (%.nat scope)]))

  (template [<bytes> <name> <size> <constructor> <maximum> <+> <->]
    [(with-expansions [<raw> (template.identifier [<name> "'"])]
       (abstract: #export <raw> Any)
       (type: #export <name> (Signed <raw>)))

     (def: #export <size> <bytes>)
     
     (def: #export <maximum>
       <name>
       (|> <bytes> (n.* i64.bits-per-byte) dec i64.mask :abstraction))
     
     (def: #export <constructor>
       (-> Int (Try <name>))
       (let [positive (|> <bytes> (n.* i64.bits-per-byte) i64.mask .nat)
             negative (|> positive (i64.arithmetic-right-shift 1) i64.not)]
         (function (_ value)
           (if (i.= (if (i.< +0 value)
                      (i64.or negative value)
                      (i64.and positive value))
                    value)
             (#try.Success (:abstraction value))
             (exception.throw ..value-exceeds-the-scope [value <size>])))))

     (template [<abstract-operation> <concrete-operation>]
       [(def: #export (<abstract-operation> parameter subject)
          (-> <name> <name> (Try <name>))
          (<constructor>
           (<concrete-operation> (:representation parameter)
                                 (:representation subject))))]

       [<+> i.+]
       [<-> i.-]
       )]

    [1 S1 bytes/1 s1 maximum/1 +/1 -/1]
    [2 S2 bytes/2 s2 maximum/2 +/2 -/2]
    [4 S4 bytes/4 s4 maximum/4 +/4 -/4]
    )

  (template [<name> <from> <to>]
    [(def: #export <name>
       (-> <from> <to>)
       (|>> :transmutation))]

    [lift/2 S1 S2]
    [lift/4 S2 S4]
    )

  (template [<writer-name> <type> <writer>]
    [(def: #export <writer-name>
       (Writer <type>)
       (|>> :representation <writer>))]

    [writer/1 S1 format.bits/8]
    [writer/2 S2 format.bits/16]
    [writer/4 S4 format.bits/32]
    )
  )
