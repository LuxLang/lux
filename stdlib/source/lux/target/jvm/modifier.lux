(.module:
  [lux #*
   [abstract
    ["." equivalence (#+ Equivalence)]
    ["." monoid (#+ Monoid)]]
   [control
    ["." try]
    ["<>" parser
     ["<c>" code]]]
   [data
    ["." number (#+ hex)
     ["." i64]]
    [format
     [".F" binary (#+ Writer)]]
    [collection
     ["." list ("#@." functor)]]]
   [type
    abstract]
   [macro (#+ with-gensyms)
    [syntax (#+ syntax:)]
    ["." code]]]
  ["." // #_
   [encoding
    ["#." unsigned]]])

(abstract: #export (Modifier of)
  //unsigned.U2

  (def: #export code
    (-> (Modifier Any) //unsigned.U2)
    (|>> :representation))

  (structure: #export equivalence
    (All [of] (Equivalence (Modifier of)))
    (def: (= reference sample)
      (:: //unsigned.equivalence =
          (:representation reference)
          (:representation sample))))

  (template: (!wrap value)
    (|> value
        //unsigned.u2
        try.assume
        :abstraction))

  (template: (!unwrap value)
    (|> value
        :representation
        //unsigned.value))

  (def: #export (has? sub super)
    (All [of] (-> (Modifier of) (Modifier of) Bit))
    (let [sub (!unwrap sub)]
      (|> (!unwrap super)
          (i64.and sub)
          (:: i64.equivalence = sub))))

  (structure: #export monoid
    (All [of] (Monoid (Modifier of)))

    (def: identity
      (!wrap (hex "0000")))
    
    (def: (compose left right)
      (!wrap (i64.or (!unwrap left) (!unwrap right)))))

  (def: #export empty
    Modifier
    (:: ..monoid identity))

  (def: #export writer
    (All [of] (Writer (Modifier of)))
    (|>> :representation //unsigned.writer/2))

  (def: modifier
    (-> Nat Modifier)
    (|>> !wrap))
  )

(syntax: #export (modifiers: ofT {options (<>.many <c>.any)})
  (with-gensyms [g!modifier g!code]
    (wrap (list (` (template [(~ g!code) (~ g!modifier)]
                     [(def: (~' #export) (~ g!modifier)
                        (..Modifier (~ ofT))
                        ((~! ..modifier) ((~! number.hex) (~ g!code))))]
                     
                     (~+ options)))))))
