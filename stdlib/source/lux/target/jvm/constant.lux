(.module:
  [lux #*
   ["." host (#+ import:)]
   ["@" target]
   [abstract
    [monad (#+ do)]
    ["." equivalence (#+ Equivalence)]]
   [data
    [number
     ["." i32 (#+ I32)]
     ["." i64]
     ["." int]
     ["." frac]]
    ["." text]
    [format
     [".F" binary (#+ Writer) ("#@." monoid)]]
    [collection
     ["." row (#+ Row)]]]
   [type
    abstract]
   [macro
    ["." template]]]
  ["." / #_
   ["#." tag]
   ["/#" // #_
    ["#." index (#+ Index)]
    [type
     ["#." category]
     ["#." descriptor (#+ Descriptor)]]
    [encoding
     ["#." unsigned]]]])

(type: #export UTF8 Text)

(def: utf8-writer
  (Writer UTF8)
  binaryF.utf8/16)

(abstract: #export Class
  {}
  
  (Index UTF8)
  
  (def: #export class
    (-> (Index UTF8) Class)
    (|>> :abstraction))

  (def: #export class-equivalence
    (Equivalence Class)
    (:: equivalence.contravariant map-1
        (|>> :representation)
        //index.equivalence))

  (def: class-writer
    (Writer Class)
    (|>> :representation //index.writer))
  )

(import: #long java/lang/Float
  (#static floatToRawIntBits #manual [float] int))

(structure: #export float-equivalence
  (Equivalence java/lang/Float)

  (def: (= parameter subject)
    (`` (for {(~~ (static @.old))
              ("jvm feq" parameter subject)
              
              (~~ (static @.jvm))
              ("jvm float ="
               ("jvm object cast" parameter)
               ("jvm object cast" subject))}))))

(import: #long java/lang/Double
  (#static doubleToRawLongBits [double] long))

(abstract: #export (Value kind)

  {}

  kind

  (def: #export value
    (All [kind] (-> (Value kind) kind))
    (|>> :representation))

  (def: #export (value-equivalence Equivalence<kind>)
    (All [kind]
      (-> (Equivalence kind)
          (Equivalence (Value kind))))
    (:: equivalence.contravariant map-1
        (|>> :representation)
        Equivalence<kind>))

  (template [<constructor> <type> <marker>]
    [(type: #export <type> (Value <marker>))

     (def: #export <constructor>
       (-> <marker> <type>)
       (|>> :abstraction))]

    [integer Integer I32]
    [float   Float   java/lang/Float]
    [long    Long    .Int]
    [double  Double  Frac]
    [string  String  (Index UTF8)]
    )

  (template [<writer-name> <type> <write> <writer>]
    [(def: <writer-name>
       (Writer <type>)
       (`` (|>> :representation
                (~~ (template.splice <write>))
                (~~ (template.splice <writer>)))))]

    [integer-writer Integer [] [binaryF.bits/32]]
    [float-writer Float [java/lang/Float::floatToRawIntBits host.int-to-long (:coerce I64)] [i32.i32 binaryF.bits/32]]
    [long-writer Long [] [binaryF.bits/64]]
    [double-writer Double [java/lang/Double::doubleToRawLongBits] [binaryF.bits/64]]
    [string-writer String [] [//index.writer]]
    )
  )

(type: #export (Name-And-Type of)
  {#name (Index UTF8)
   #descriptor (Index (Descriptor of))})

(type: #export (Reference of)
  {#class (Index Class)
   #name-and-type (Index (Name-And-Type of))})

(template [<type> <equivalence> <writer>]
  [(def: #export <equivalence>
     (Equivalence (<type> Any))
     ($_ equivalence.product
         //index.equivalence
         //index.equivalence))

   (def: <writer>
     (Writer (<type> Any))
     ($_ binaryF.and
         //index.writer
         //index.writer))]

  [Name-And-Type name-and-type-equivalence name-and-type-writer]
  [Reference reference-equivalence reference-writer]
  )

(type: #export Constant
  (#UTF8 UTF8)
  (#Integer Integer)
  (#Float Float)
  (#Long Long)
  (#Double Double)
  (#Class Class)
  (#String String)
  (#Field (Reference //category.Value))
  (#Method (Reference //category.Method))
  (#Interface-Method (Reference //category.Method))
  (#Name-And-Type (Name-And-Type Any)))

(def: #export (size constant)
  (-> Constant Nat)
  (case constant
    (^or (#Long _) (#Double _))
    2

    _
    1))

(def: #export equivalence
  (Equivalence Constant)
  ## TODO: Delete the explicit "structure" and use the combinator
  ## version below as soon as the new format for variants is implemented.
  (structure
   (def: (= reference sample)
     (case [reference sample]
       (^template [<tag> <equivalence>]
         [(<tag> reference) (<tag> sample)]
         (:: <equivalence> = reference sample))
       ([#UTF8 text.equivalence]
        [#Integer (..value-equivalence i32.equivalence)]
        [#Long (..value-equivalence int.equivalence)]
        [#Float (..value-equivalence float-equivalence)]
        [#Double (..value-equivalence frac.equivalence)]
        [#Class ..class-equivalence]
        [#String (..value-equivalence //index.equivalence)]
        [#Field ..reference-equivalence]
        [#Method ..reference-equivalence]
        [#Interface-Method ..reference-equivalence]
        [#Name-And-Type ..name-and-type-equivalence])
       
       _
       false)))
  ## ($_ equivalence.sum
  ##     ## #UTF8
  ##     text.equivalence
  ##     ## #Long
  ##     (..value-equivalence int.equivalence)
  ##     ## #Double
  ##     (..value-equivalence frac.equivalence)
  ##     ## #Class
  ##     ..class-equivalence
  ##     ## #String
  ##     (..value-equivalence //index.equivalence)
  ##     ## #Field
  ##     ..reference-equivalence
  ##     ## #Method
  ##     ..reference-equivalence
  ##     ## #Interface-Method
  ##     ..reference-equivalence
  ##     ## #Name-And-Type
  ##     ..name-and-type-equivalence
  ##     )
  )

(def: #export writer
  (Writer Constant)
  (with-expansions [<constants> (as-is [#UTF8             /tag.utf8             ..utf8-writer]
                                       [#Integer          /tag.integer          ..integer-writer]
                                       [#Float            /tag.float            ..float-writer]
                                       [#Long             /tag.long             ..long-writer]
                                       [#Double           /tag.double           ..double-writer]
                                       [#Class            /tag.class            ..class-writer]
                                       [#String           /tag.string           ..string-writer]
                                       [#Field            /tag.field            ..reference-writer]
                                       [#Method           /tag.method           ..reference-writer]
                                       [#Interface-Method /tag.interface-method ..reference-writer]
                                       [#Name-And-Type    /tag.name-and-type    ..name-and-type-writer]
                                       ## TODO: Method-Handle
                                       ## TODO: Method-Type
                                       ## TODO: Invoke-Dynamic
                                       )]
    (function (_ value)
      (case value
        (^template [<case> <tag> <writer>]
          (<case> value)
          (binaryF@compose (/tag.writer <tag>)
                           (<writer> value)))
        (<constants>)
        ))))
