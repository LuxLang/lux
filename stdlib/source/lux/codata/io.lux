##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (control functor
                applicative
                monad)
       (data (struct list))))

## [Types]
(type: #export (IO a)
  (-> Void a))

## [Syntax]
(macro: #export (io tokens state)
  {#;doc (doc
           "Delays the evaluation of an expression, by wrapping it in an IO 'thunk'."
           "Great for wrapping side-effecting computations (which won't be performed until the IO is \"run\")."
           (io (exec
                 (log! msg)
                 "Some value...")))}
  (case tokens
    (^ (list value))
    (let [blank (: AST [["" -1 -1] (#;SymbolS ["" ""])])]
      (#;Right [state (list (` (;_lux_lambda (~ blank) (~ blank) (~ value))))]))

    _
    (#;Left "Wrong syntax for io")))

## [Structures]
(struct: #export _ (Functor IO)
  (def: (map f ma)
    (io (f (ma (:! Void []))))))

(struct: #export _ (Applicative IO)
  (def: functor Functor<IO>)

  (def: (wrap x)
    (io x))

  (def: (apply ff fa)
    (io ((ff (:! Void [])) (fa (:! Void []))))))

(struct: #export _ (Monad IO)
  (def: applicative Applicative<IO>)
  
  (def: (join mma)
    (io ((mma (:! Void [])) (:! Void [])))))

## [Functions]
(def: #export (run action)
  (All [a] (-> (IO a) a))
  (action (:! Void [])))
