##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (control functor
                applicative
                ["M" monad #*])))

## [Types]
(type: #export (Env r a)
  (-> r a))

## [Structures]
(struct: #export Functor<Env> (All [r] (Functor (Env r)))
  (def: (map f fa)
    (lambda [env]
      (f (fa env)))))

(struct: #export Applicative<Env> (All [r] (Applicative (Env r)))
  (def: functor Functor<Env>)

  (def: (wrap x)
    (lambda [env] x))

  (def: (apply ff fa)
    (lambda [env]
      ((ff env) (fa env)))))

(struct: #export Monad<Env> (All [r] (Monad (Env r)))
  (def: applicative Applicative<Env>)

  (def: (join mma)
    (lambda [env]
      (mma env env))))

## [Values]
(def: #export ask
  {#;doc "Get the value of the environment."}
  (All [r] (Env r r))
  (lambda [env] env))

(def: #export (local change env-proc)
  {#;doc "Run computation with a locally-modified environment."}
  (All [r a] (-> (-> r r) (Env r a) (Env r a)))
  (|>. change env-proc))

(def: #export (run env env-proc)
  (All [r a] (-> r (Env r a) a))
  (env-proc env))

(struct: #export (EnvT Monad<M>)
  (All [M] (-> (Monad M) (All [e] (Monad (All [a] (Env e (M a)))))))
  (def: applicative (compA Applicative<Env> (get@ #M;applicative Monad<M>)))
  (def: (join eMeMa)
    (lambda [env]
      (do Monad<M>
        [eMa (run env eMeMa)]
        (run env eMa)))))

(def: #export lift-env
  (All [M e a] (-> (M a) (Env e (M a))))
  (:: Monad<Env> wrap))
