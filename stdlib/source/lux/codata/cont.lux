##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (macro (ast #as ast))
       (control (functor     #as F #refer #all)
                (applicative #as A #refer #all)
                (monad       #as M #refer #all))
       (data (struct list)))
  (.. function))

## [Types]
(type: #export (Cont a)
  (All [b]
    (-> (-> a b) b)))

## [Syntax]
(macro: #export (@lazy tokens state)
  {#;doc (doc "Delays the evaluation of an expression, by wrapping it in a continuation 'thunk'."
              (@lazy (some-computation some-input)))}
  (case tokens
    (^ (list value))
    (let [blank (ast;symbol ["" ""])]
      (#;Right [state (list (` (;lambda [(~ blank)] ((~ blank) (~ value)))))]))
    
    _
    (#;Left "Wrong syntax for @lazy")))

## [Functions]
(def: #export (call/cc f)
  {#;doc "Call with current continuation."}
  (All [a b c] (Cont (-> a (Cont b c)) (Cont a c)))
  (lambda [k]
    (f (lambda [a _]
         (k a))
       k)))

(def: #export (run thunk)
  {#;doc "Forces a continuation thunk to be evaluated."}
  (All [a]
    (-> (Cont a) a))
  (thunk id))

## [Structs]
(struct: #export _ (Functor Cont)
  (def: (map f ma)
    (lambda [k] (ma (. k f)))))

(struct: #export _ (Applicative Cont)
  (def: functor Functor<Cont>)

  (def: (wrap a)
    (@lazy a))

  (def: (apply ff fa)
    (@lazy ((run ff) (run fa)))))

(struct: #export _ (Monad Cont)
  (def: applicative Applicative<Cont>)

  (def: join run))
