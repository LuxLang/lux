(.module:
  [lux #*
   ["@" target]
   ["." type]
   ["." host (#+ import:)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." function]
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]
    ["<>" parser
     ["<.>" type (#+ Parser)]]
    pipe]
   [data
    ["." text
     ["%" format (#+ format)]]
    [format
     [xml (#+ XML)]
     ["." json]]
    [collection
     ["." array]
     ["." list ("#@." functor)]]]
   [time
    [instant (#+ Instant)]
    [duration (#+ Duration)]
    [date (#+ Date)]]
   [macro
    ["." template]]])

(with-expansions [<for-jvm> (as-is (import: #long java/lang/String)

                                   (import: #long (java/lang/Class a)
                                     (getCanonicalName [] java/lang/String))

                                   (import: #long java/lang/Object
                                     (new [])
                                     (toString [] java/lang/String)
                                     (getClass [] (java/lang/Class java/lang/Object)))

                                   (import: #long java/lang/Integer
                                     (longValue [] long))

                                   (import: #long java/lang/Long
                                     (intValue [] int))

                                   (import: #long java/lang/Number
                                     (intValue [] int)
                                     (longValue [] long)
                                     (doubleValue [] double)))]
  (for {@.old
        (as-is <for-jvm>)

        @.jvm
        (as-is <for-jvm>)

        @.js
        (as-is (import: JSON
                 (#static stringify [.Any] host.String))
               (import: Array
                 (#static isArray [.Any] host.Boolean)))}))

(def: Inspector (-> Any Text))

(def: (inspect-tuple inspect)
  (-> Inspector Inspector)
  (|>> (:coerce (array.Array Any))
       array.to-list
       (list@map inspect)
       (text.join-with " ")
       (text.enclose ["[" "]"])))

(def: #export (inspect value)
  Inspector
  (with-expansions [<for-jvm> (let [object (:coerce java/lang/Object value)]
                                (`` (<| (~~ (template [<class> <processing>]
                                              [(case (host.check <class> object)
                                                 (#.Some value)
                                                 (`` (|> value (~~ (template.splice <processing>))))
                                                 #.None)]

                                              [java/lang/Boolean [(:coerce .Bit) %.bit]]
                                              [java/lang/String [(:coerce .Text) %.text]]
                                              [java/lang/Long [(:coerce .Int) %.int]]
                                              [java/lang/Number [java/lang/Number::doubleValue %.frac]]
                                              ))
                                        (case (host.check [java/lang/Object] object)
                                          (#.Some value)
                                          (let [value (:coerce (array.Array java/lang/Object) value)]
                                            (case (array.read 0 value)
                                              (^multi (#.Some tag)
                                                      [(host.check java/lang/Integer tag)
                                                       (#.Some tag)]
                                                      [[(array.read 1 value)
                                                        (array.read 2 value)]
                                                       [last?
                                                        (#.Some choice)]])
                                              (let [last? (case last?
                                                            (#.Some _) #1
                                                            #.None #0)]
                                                (|> (format (%.nat (.nat (java/lang/Integer::longValue tag)))
                                                            " " (%.bit last?)
                                                            " " (inspect choice))
                                                    (text.enclose ["(" ")"])))

                                              _
                                              (inspect-tuple inspect value)))
                                          #.None)
                                        (java/lang/Object::toString object))))]
    (for {@.old
          <for-jvm>

          @.jvm
          <for-jvm>

          @.js
          (case (host.type-of value)
            (^template [<type-of> <then>]
              <type-of>
              (`` (|> value (~~ (template.splice <then>)))))
            (["boolean" [(:coerce .Bit) %.bit]]
             ["string" [(:coerce .Text) %t]]
             ["number" [(:coerce .Frac) %f]]
             ["undefined" [JSON::stringify]])
            
            "object"
            (let [variant-tag ("js object get" "_lux_tag" value)
                  variant-flag ("js object get" "_lux_flag" value)
                  variant-value ("js object get" "_lux_value" value)]
              (cond (not (or ("js object undefined?" variant-tag)
                             ("js object undefined?" variant-flag)
                             ("js object undefined?" variant-value)))
                    (|> (format (JSON::stringify variant-tag)
                                " " (%.bit (not ("js object null?" variant-flag)))
                                " " (inspect variant-value))
                        (text.enclose ["(" ")"]))

                    (not (or ("js object undefined?" ("js object get" "_lux_low" value))
                             ("js object undefined?" ("js object get" "_lux_high" value))))
                    (|> value (:coerce .Int) %.int)

                    (Array::isArray value)
                    (inspect-tuple inspect value)
                    
                    ## else
                    (JSON::stringify value)))

            _
            (undefined))
          })))

(exception: #export (cannot-represent-value {type Type})
  (exception.report
   ["Type" (%.type type)]))

(type: Representation (-> Any Text))

(def: primitive-representation
  (Parser Representation)
  (`` ($_ <>.either
          (do <>.monad
            [_ (<type>.exactly Any)]
            (wrap (function.constant "[]")))
          
          (~~ (template [<type> <formatter>]
                [(do <>.monad
                   [_ (<type>.sub <type>)]
                   (wrap (|>> (:coerce <type>) <formatter>)))]

                [Bit %.bit]
                [Nat %.nat]
                [Int %.int]
                [Rev %.rev]
                [Frac %.frac]
                [Text %.text])))))

(def: (special-representation representation)
  (-> (Parser Representation) (Parser Representation))
  (`` ($_ <>.either
          (~~ (template [<type> <formatter>]
                [(do <>.monad
                   [_ (<type>.sub <type>)]
                   (wrap (|>> (:coerce <type>) <formatter>)))]

                [Type %.type]
                [Code %.code]
                [Instant %.instant]
                [Duration %.duration]
                [Date %.date]
                [json.JSON %.json]
                [XML %.xml]))

          (do <>.monad
            [[_ elemT] (<type>.apply (<>.and (<type>.exactly List) <type>.any))
             elemR (<type>.local (list elemT) representation)]
            (wrap (|>> (:coerce (List Any)) (%.list elemR))))

          (do <>.monad
            [[_ elemT] (<type>.apply (<>.and (<type>.exactly Maybe) <type>.any))
             elemR (<type>.local (list elemT) representation)]
            (wrap (|>> (:coerce (Maybe Any))
                       (case> #.None
                              "#.None"

                              (#.Some elemV)
                              (format "(#.Some " (elemR elemV) ")"))))))))

(def: (variant-representation representation)
  (-> (Parser Representation) (Parser Representation))
  (do <>.monad
    [membersR+ (<type>.variant (<>.many representation))]
    (wrap (function (_ variantV)
            (let [[lefts right? sub-repr] (loop [lefts 0
                                                 representations membersR+
                                                 variantV variantV]
                                            (case representations
                                              (#.Cons leftR (#.Cons rightR extraR+))
                                              (case (:coerce (| Any Any) variantV)
                                                (#.Left left)
                                                [lefts #0 (leftR left)]

                                                (#.Right right)
                                                (case extraR+
                                                  #.Nil
                                                  [lefts #1 (rightR right)]

                                                  extraR+
                                                  (recur (inc lefts) (#.Cons rightR extraR+) right)))

                                              _
                                              (undefined)))]
              (format "(" (%.nat lefts) " " (%.bit right?) " " sub-repr ")"))))))

(def: (tuple-representation representation)
  (-> (Parser Representation) (Parser Representation))
  (do <>.monad
    [membersR+ (<type>.tuple (<>.many representation))]
    (wrap (function (_ tupleV)
            (let [tuple-body (loop [representations membersR+
                                    tupleV tupleV]
                               (case representations
                                 #.Nil
                                 ""
                                 
                                 (#.Cons lastR #.Nil)
                                 (lastR tupleV)
                                 
                                 (#.Cons headR tailR)
                                 (let [[leftV rightV] (:coerce [Any Any] tupleV)]
                                   (format (headR leftV) " " (recur tailR rightV)))))]
              (format "[" tuple-body "]"))))))

(def: representation
  (Parser Representation)
  (<>.rec
   (function (_ representation)
     ($_ <>.either
         primitive-representation
         (special-representation representation)
         (variant-representation representation)
         (tuple-representation representation)

         (do <>.monad
           [[funcT inputsT+] (<type>.apply (<>.and <type>.any (<>.many <type>.any)))]
           (case (type.apply inputsT+ funcT)
             (#.Some outputT)
             (<type>.local (list outputT) representation)

             #.None
             (<>.fail "")))

         (do <>.monad
           [[name anonymous] <type>.named]
           (<type>.local (list anonymous) representation))

         (<>.fail "")
         ))))

(def: #export (represent type value)
  (-> Type Any (Try Text))
  (case (<type>.run type ..representation)
    (#try.Success representation)
    (#try.Success (representation value))

    (#try.Failure _)
    (exception.throw cannot-represent-value type)))
