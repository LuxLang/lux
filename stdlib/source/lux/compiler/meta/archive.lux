(.module:
  [lux (#- Module)
   [control
    ["ex" exception (#+ exception:)]
    ["." equivalence (#+ Equivalence)]
    ["." monad (#+ do)]]
   [data
    ["." error (#+ Error)]
    ["." name]
    ["." text
     format]
    [collection
     ["." dictionary (#+ Dictionary)]]]
   [type (#+ :share)
    abstract]
   [world
    [file (#+ File)]]]
  [///
   [default (#+ Version)]]
  [/
   ["." signature (#+ Signature)]
   ["." key (#+ Key)]
   ["." descriptor (#+ Module Descriptor)]
   ["." document (#+ Document)]])

## Archive
(exception: #export (unknown-document {name Module})
  (ex.report ["Module" name]))

(exception: #export (cannot-replace-document {name Module}
                                             {old (Document Any)}
                                             {new (Document Any)})
  (ex.report ["Module" name]
             ["Old key" (signature.description (document.signature old))]
             ["New key" (signature.description (document.signature new))]))

(with-expansions [<Document> (as-is (type (Ex [d] (Document d))))]
  (abstract: #export Archive
    {}
    
    (Dictionary Text <Document>)

    (def: #export empty
      Archive
      (:abstraction (dictionary.new text.Hash<Text>)))

    (def: #export (add name document archive)
      (-> Module <Document> Archive (Error Archive))
      (case (dictionary.get name (:representation archive))
        (#.Some existing)
        (if (is? document existing)
          (#error.Success archive)
          (ex.throw cannot-replace-document [name existing document]))
        
        #.None
        (#error.Success (:abstraction (dictionary.put name document
                                                      (:representation archive))))))

    (def: #export (find name archive)
      (-> Module Archive (Error <Document>))
      (case (dictionary.get name (:representation archive))
        (#.Some document)
        (#error.Success document)
        
        #.None
        (ex.throw unknown-document [name])))

    (def: #export (merge additions archive)
      (-> Archive Archive (Error Archive))
      (monad.fold error.Monad<Error>
                  (function (_ [name' document'] archive')
                    (..add name' document' archive'))
                  archive
                  (dictionary.entries (:representation additions))))
    ))
