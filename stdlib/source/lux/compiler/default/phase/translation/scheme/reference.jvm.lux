(.module:
  [lux #*
   [control
    pipe]
   [data
    [text
     format]]]
  [//
   [runtime (#+ Operation)]
   ["/." //
    [// ("operation/." Monad<Operation>)
     [analysis (#+ Variant Tuple)]
     [synthesis (#+ Synthesis)]
     [//
      ["." reference (#+ Register Variable Reference)]
      [//
       [host
        ["_" scheme (#+ Expression Global Var)]]]]]]])

(do-template [<name> <prefix>]
  [(def: #export <name>
     (-> Register Var)
     (|>> .int %i (format <prefix>) _.var))]

  [local'   "l"]
  [foreign' "f"]
  )

(def: #export variable
  (-> Variable (Operation Var))
  (|>> (case> (#reference.Local register)
              (local' register)
              
              (#reference.Foreign register)
              (foreign' register))
       operation/wrap))

(def: #export constant
  (-> Name (Operation Global))
  (|>> ///.remember (operation/map _.global)))

(def: #export reference
  (-> Reference (Operation Expression))
  (|>> (case> (#reference.Constant value)
              (..constant value)
              
              (#reference.Variable value)
              (..variable value))))
