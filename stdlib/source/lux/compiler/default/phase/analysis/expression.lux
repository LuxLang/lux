(.module:
  [lux #*
   [control
    [monad (#+ do)]
    ["ex" exception (#+ exception:)]]
   [data
    ["." error]
    ["." text
     format]
    [collection
     [list ("list/." Functor<List>)]]]
   ["." macro]]
  ["." // (#+ Analysis Operation Phase)
   ["." type]
   ["." primitive]
   ["." structure]
   ["//." reference]
   ["." case]
   ["." function]
   ["//." macro]
   ["/." //
    ["." extension]
    [//
     ["." reference]]]])

(exception: #export (macro-expansion-failed {macro Name} {inputs (List Code)} {error Text})
  (ex.report ["Macro" (%name macro)]
             ["Inputs" (|> inputs
                           (list/map (|>> %code (format text.new-line text.tab)))
                           (text.join-with ""))]
             ["Error" error]))

(exception: #export (macro-call-must-have-single-expansion {macro Name} {inputs (List Code)})
  (ex.report ["Macro" (%name macro)]
             ["Inputs" (|> inputs
                           (list/map (|>> %code (format text.new-line text.tab)))
                           (text.join-with ""))]))

(exception: #export (unrecognized-syntax {code Code})
  (ex.report ["Code" (%code code)]))

(def: #export (expand-macro name macro inputs)
  (-> Name Macro (List Code) (Operation (List Code)))
  (extension.lift
   (function (_ state)
     (case (//macro.expand macro inputs state)
       (#error.Error error)
       ((///.throw macro-expansion-failed [name inputs error]) state)

       output
       output))))

(def: #export (compile code)
  Phase
  (do ///.Monad<Operation>
    [expectedT (extension.lift macro.expected-type)]
    (let [[cursor code'] code]
      ## The cursor must be set in the state for the sake
      ## of having useful error messages.
      (//.with-cursor cursor
        (case code'
          (^template [<tag> <analyser>]
            (<tag> value)
            (<analyser> value))
          ([#.Bit  primitive.bit]
           [#.Nat  primitive.nat]
           [#.Int  primitive.int]
           [#.Rev  primitive.rev]
           [#.Frac primitive.frac]
           [#.Text primitive.text])

          (^template [<tag> <analyser>]
            (^ (#.Form (list& [_ (<tag> tag)]
                              values)))
            (case values
              (#.Cons value #.Nil)
              (<analyser> compile tag value)

              _
              (<analyser> compile tag (` [(~+ values)]))))
          ([#.Nat structure.sum]
           [#.Tag structure.tagged-sum])

          (#.Tag tag)
          (structure.tagged-sum compile tag (' []))

          (^ (#.Tuple (list)))
          primitive.unit

          (^ (#.Tuple (list singleton)))
          (compile singleton)

          (^ (#.Tuple elems))
          (structure.product compile elems)

          (^ (#.Record pairs))
          (structure.record compile pairs)

          (#.Identifier reference)
          (//reference.reference reference)

          (^ (#.Form (list [_ (#.Record branches)] input)))
          (case.case compile input branches)

          (^ (#.Form (list& [_ (#.Text extension-name)] extension-args)))
          (extension.apply "Analysis" compile [extension-name extension-args])

          (^ (#.Form (list [_ (#.Tuple (list [_ (#.Identifier ["" function-name])]
                                             [_ (#.Identifier ["" arg-name])]))]
                           body)))
          (function.function compile function-name arg-name body)

          (^ (#.Form (list& functionC argsC+)))
          (do @
            [[functionT functionA] (type.with-inference
                                     (compile functionC))]
            (case functionA
              (#//.Reference (#reference.Constant def-name))
              (do @
                [?macro (extension.lift (macro.find-macro def-name))]
                (case ?macro
                  (#.Some macro)
                  (do @
                    [expansion (expand-macro def-name macro argsC+)]
                    (case expansion
                      (^ (list single))
                      (compile single)

                      _
                      (///.throw macro-call-must-have-single-expansion [def-name argsC+])))

                  _
                  (function.apply compile functionT functionA argsC+)))

              _
              (function.apply compile functionT functionA argsC+)))

          _
          (///.throw unrecognized-syntax code)
          )))))
