(.module:
  [lux (#- primitive)
   [control
    ["." monad (#+ do)]]
   [data
    ["." maybe]
    [collection
     ["." list ("list/." Functor<List>)]
     ["." dictionary (#+ Dictionary)]]]]
  ["." // (#+ Synthesis Phase)
   ["." function]
   ["." case]
   ["/." // ("operation/." Monad<Operation>)
    ["." analysis (#+ Analysis)]
    ["." extension]
    [//
     ["." reference]]]])

(def: (primitive analysis)
  (-> analysis.Primitive //.Primitive)
  (case analysis
    #analysis.Unit
    (#//.Text //.unit)
    
    (^template [<analysis> <synthesis>]
      (<analysis> value)
      (<synthesis> value))
    ([#analysis.Bit  #//.Bit]
     [#analysis.Frac #//.F64]
     [#analysis.Text #//.Text])

    (^template [<analysis> <synthesis>]
      (<analysis> value)
      (<synthesis> (.i64 value)))
    ([#analysis.Nat #//.I64]
     [#analysis.Int #//.I64]
     [#analysis.Rev #//.I64])))

(def: #export (phase analysis)
  Phase
  (case analysis
    (#analysis.Primitive analysis')
    (operation/wrap (#//.Primitive (..primitive analysis')))

    (#analysis.Structure structure)
    (case structure
      (#analysis.Variant variant)
      (do ///.Monad<Operation>
        [valueS (phase (get@ #analysis.value variant))]
        (wrap (//.variant (set@ #analysis.value valueS variant))))

      (#analysis.Tuple tuple)
      (|> tuple
          (monad.map ///.Monad<Operation> phase)
          (:: ///.Monad<Operation> map (|>> //.tuple))))
    
    (#analysis.Reference reference)
    (operation/wrap (#//.Reference reference))

    (#analysis.Case inputA branchesAB+)
    (case.synthesize phase inputA branchesAB+)

    (^ (analysis.no-op value))
    (phase value)

    (#analysis.Apply _)
    (function.apply phase analysis)

    (#analysis.Function environmentA bodyA)
    (function.abstraction phase environmentA bodyA)

    (#analysis.Extension name args)
    (extension.apply phase [name args])
    ))
