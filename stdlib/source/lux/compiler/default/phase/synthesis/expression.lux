(.module:
  [lux (#- primitive)
   [control
    ["." monad (#+ do)]]
   [data
    ["." maybe]
    [collection
     ["." list ("list/." Functor<List>)]
     ["dict" dictionary (#+ Dictionary)]]]]
  ["." // (#+ Synthesis Phase)
   ["." function]
   ["." case]
   ["/." // ("operation/." Monad<Operation>)
    ["." analysis (#+ Analysis)]
    ["." extension]
    [//
     ["." reference]]]])

(def: (primitive analysis)
  (-> analysis.Primitive //.Primitive)
  (case analysis
    #analysis.Unit
    (#//.Text //.unit)
    
    (^template [<analysis> <synthesis>]
      (<analysis> value)
      (<synthesis> value))
    ([#analysis.Bit  #//.Bit]
     [#analysis.Frac #//.F64]
     [#analysis.Text #//.Text])

    (^template [<analysis> <synthesis>]
      (<analysis> value)
      (<synthesis> (.i64 value)))
    ([#analysis.Nat #//.I64]
     [#analysis.Int #//.I64]
     [#analysis.Rev #//.I64])))

(def: #export (synthesize analysis)
  Phase
  (case analysis
    (#analysis.Primitive analysis')
    (operation/wrap (#//.Primitive (..primitive analysis')))

    (#analysis.Structure composite)
    (case (analysis.variant analysis)
      (#.Some variant)
      (do ///.Monad<Operation>
        [valueS (synthesize (get@ #analysis.value variant))]
        (wrap (#//.Structure (#//.Variant (set@ #analysis.value valueS variant)))))

      _
      (do ///.Monad<Operation>
        [tupleS (monad.map @ synthesize (analysis.tuple analysis))]
        (wrap (#//.Structure (#//.Tuple tupleS)))))

    (#analysis.Reference reference)
    (case reference
      (#reference.Constant constant)
      (operation/wrap (#//.Reference reference))

      (#reference.Variable var)
      (do ///.Monad<Operation>
        [resolver //.resolver]
        (case var
          (#reference.Local register)
          (do @
            [arity //.scope-arity]
            (wrap (if (function.nested? arity)
                    (if (n/= 0 register)
                      (|> (dec arity)
                          (list.n/range 1)
                          (list/map (|>> //.variable/local))
                          [(//.variable/local 0)]
                          //.function/apply)
                      (#//.Reference (#reference.Variable (function.adjust arity #0 var))))
                    (#//.Reference (#reference.Variable var)))))
          
          (#reference.Foreign register)
          (wrap (|> resolver (dict.get var) (maybe.default var) #reference.Variable #//.Reference)))))

    (#analysis.Case inputA branchesAB+)
    (case.synthesize (|>> synthesize //.indirectly) inputA branchesAB+)

    (#analysis.Apply _)
    (function.apply (|>> synthesize //.indirectly) analysis)

    (#analysis.Function environmentA bodyA)
    (function.function synthesize environmentA bodyA)

    (#analysis.Extension name args)
    (extension.apply (|>> synthesize //.indirectly)
                     [name args])
    ))
