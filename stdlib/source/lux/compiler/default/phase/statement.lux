(.module:
  [lux #*]
  [// (#+ Eval)
   ["." analysis
    [".A" expression]]
   ["." synthesis
    [".S" expression]]
   ["." translation (#+ Host)]
   ["." extension
    ["." bundle]
    [".E" analysis]
    [".E" synthesis]
    [".E" translation]
    ## [".E" statement]
    ]
   [//
    ["." init]]])

(type: #export (Component state phase)
  {#state state
   #phase phase})

(type: #export (State anchor expression statement)
  {#analysis (Component analysis.State+
                        analysis.Phase)
   #synthesis (Component synthesis.State+
                         synthesis.Phase)
   #translation (Component (translation.State+ anchor expression statement)
                           (translation.Phase anchor expression statement))})

(do-template [<special> <general>]
  [(type: #export (<special> anchor expression statement)
     (<general> (..State anchor expression statement) Code Any))]

  [State+    extension.State]
  [Operation extension.Operation]
  [Phase     extension.Phase]
  [Handler   extension.Handler]
  [Bundle    extension.Bundle]
  )

(def: #export (state eval translate host)
  (All [anchor expression statement]
    (-> Eval
        (translation.Phase anchor expression statement)
        (Host expression statement)
        (..State+ anchor expression statement)))
  [bundle.empty
   ## statementE.bundle
   {#analysis {#state [analysisE.bundle (init.compiler [])]
               #phase (expressionA.analyser eval)}
    #synthesis {#state [synthesisE.bundle synthesis.init]
                #phase expressionS.synthesize}
    #translation {#state [translationE.bundle (translation.state host)]
                  #phase translate}}])
