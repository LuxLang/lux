(.module:
  [lux #*
   [control
    [monad (#+ do)]
    pipe]
   [data
    ["." error]]]
  [//
   ["." phase (#+ Eval)
    ["." analysis
     [".A" expression]]
    ["." synthesis
     [".S" expression]]
    ["." translation]]])

(def: #export (evaluator analysis-state synthesis-state translation-state translate)
  (All [anchor expression statement]
    (-> analysis.State+
        synthesis.State+
        (translation.State+ anchor expression statement)
        (translation.Phase anchor expression statement)
        Eval))
  (function (eval type exprC)
    (do error.Monad<Error>
      [exprA (|> exprC (expressionA.analyser eval)(phase.run analysis-state))
       exprS (|> exprA expressionS.synthesize (phase.run synthesis-state))]
      (phase.run translation-state
                 (do phase.Monad<Operation>
                   [exprO (translate exprS)]
                   (translation.evaluate! exprO))))))
