(.module:
  [lux (#- Source)
   [control
    [monad (#+ do)]
    ["ex" exception (#+ exception:)]]
   [data
    ["." product]
    ["." error]
    [text ("text/." Hash<Text>)
     format
     ["." encoding]]
    [collection
     ["." dictionary]]]
   [type (#+ :share)]
   ["." macro]
   [world
    ["." file (#+ File)]]]
  [//
   [meta
    [io
     ["." context]]]]
  [/
   ["." init]
   ["." syntax (#+ Aliases)]
   ["." phase
    ["." analysis
     ["." module]
     [".A" expression]]
    ["." translation (#+ Host)]
    ["." statement
     [".S" total]]]]
  ## (luxc [cache]
  ##       [cache/description]
  ##       [cache/io])
  )

(def: (forgive-eof operation)
  (All [s o]
    (-> (phase.Operation s o) (phase.Operation s Any)))
  (function (_ compiler)
    (ex.catch syntax.end-of-file
              (|>> [compiler])
              (operation compiler))))

(def: #export prelude Text "lux")

(def: (read current-module aliases)
  (-> Text Aliases (analysis.Operation Code))
  (function (_ [bundle compiler])
    (case (syntax.read current-module aliases (get@ #.source compiler))
      (#error.Error error)
      (#error.Error error)

      (#error.Success [source' output])
      (#error.Success [[bundle (set@ #.source source' compiler)]
                       output]))))

## ## (def: (write-module target-dir file-name module-name module artifacts)
## ##   (-> File Text Text Module Artifacts (Process Any))
## ##   (do io.Monad<Process>
## ##     [_ (monad.map @ (product.uncurry (&io.write target-dir))
## ##                   (dictionary.entries artifacts))]
## ##     (&io.write target-dir
## ##                (format module-name "/" cache.descriptor-name)
## ##                (encoding.to-utf8 (%code (cache/description.write file-name module))))))

(type: #export Configuration
  {#sources (List File)
   #target File})

(type: #export (Platform fs anchor expression statement)
  {#host (Host expression statement)
   #phase (translation.Phase anchor expression statement)
   #runtime (translation.Operation anchor expression statement Any)
   #file-system (file.System fs)})

(type: #export Source
  {#name Text
   #code Text})

(with-expansions [<Platform> (as-is (Platform fs anchor expression statement))
                  <Operation> (as-is (statement.Operation anchor expression statement Any))
                  <Compiler> (as-is (statement.State+ anchor expression statement))]
  
  (def: (begin-module-compilation module-name source)
    (All [anchor expression statement]
      (-> Text Source <Operation>))
    (statement.lift-analysis
     (do phase.Monad<Operation>
       [_ (module.create (text/hash (get@ #code source)) module-name)
        _ (analysis.set-current-module module-name)]
       (analysis.set-source-code (init.source (get@ #name source) (get@ #code source))))))

  (def: end-module-compilation
    (All [anchor expression statement]
      (-> Text <Operation>))
    (|>> module.set-compiled
         statement.lift-analysis))

  (def: (loop-module-compilation module-name)
    (All [anchor expression statement]
      (-> Text <Operation>))
    (forgive-eof
     (loop [_ []]
       (do phase.Monad<Operation>
         [code (statement.lift-analysis
                (do @
                  [code (..read module-name syntax.no-aliases)
                   #let [[cursor _] code]
                   _ (analysis.set-cursor cursor)]
                  (wrap code)))
          _ (totalS.phase code)
          _ init.refresh]
         (forgive-eof (recur []))))))

  (def: (perform-module-compilation module-name source)
    (All [anchor expression statement]
      (-> Text Source <Operation>))
    (do phase.Monad<Operation>
      [_ (begin-module-compilation module-name source)
       _ (loop-module-compilation module-name)]
      (end-module-compilation module-name)))

  (def: #export (compile-module platform configuration module-name compiler)
    (All [fs anchor expression statement]
      (-> <Platform> Configuration Text <Compiler> (fs <Compiler>)))
    (do (:: (get@ #file-system platform) &monad)
      [source (context.read (get@ #file-system platform)
                            (get@ #sources configuration)
                            module-name)
       ## _ (&io.prepare-module target-dir module-name)
       ## _ (write-module target-dir file-name module-name module artifacts)
       ]
      (<| (:: @ map product.left)
          (:: (get@ #file-system platform) lift)
          (phase.run' compiler)
          (:share [fs anchor expression statement]
                  {<Platform>
                   platform}
                  {<Operation>
                   (perform-module-compilation module-name source)}))))

  (def: (initialize-runtime platform configuration)
    (All [fs anchor expression statement]
      (-> <Platform> Configuration (fs <Compiler>)))
    (|> platform
        (get@ #runtime)
        statement.lift-translation
        (phase.run' (init.state (get@ #host platform)
                                (get@ #phase platform)))
        (:: error.Functor<Error> map product.left)
        (:: (get@ #file-system platform) lift))
    
    ## (case (runtimeT.translate ## (initL.compiler (io.run js.init))
    ##        (initL.compiler (io.run hostL.init-host))
    ##        )
    ##   ## (#error.Success [compiler disk-write])
    ##   ## (do @
    ##   ##   [_ (&io.prepare-target target)
    ##   ##    _ disk-write
    ##   ##    ## _ (cache/io.pre-load sources target (commonT.load-definition compiler))
    ##   ##    ]
    ##   ##   (wrap (|> compiler
    ##   ##             (set@ [#.info #.mode] #.Build))))

    ##   (#error.Success [compiler [runtime-bc function-bc]])
    ##   (do @
    ##     [_ (&io.prepare-target target)
    ##      ## _ (&io.write target (format hostL.runtime-class ".class") runtime-bc)
    ##      ## _ (&io.write target (format hostL.function-class ".class") function-bc)
    ##      ## _ (cache/io.pre-load sources target (commonT.load-definition compiler))
    ##      ]
    ##     (wrap (|> compiler
    ##               (set@ [#.info #.mode] #.Build))))

    ##   (#error.Error error)
    ##   (io.fail error))
    )

  (def: #export (compile platform configuration program)
    (All [fs anchor expression statement]
      (-> <Platform> Configuration Text (fs Any)))
    (do (:: (get@ #file-system platform) &monad)
      [compiler (initialize-runtime platform configuration)
       _ (compile-module platform configuration ..prelude compiler)
       _ (compile-module platform configuration program compiler)
       ## _ (cache/io.clean target ...)
       ]
      (wrap (log! "Compilation complete!"))))
  )
