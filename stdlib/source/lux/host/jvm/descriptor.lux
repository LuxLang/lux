(.module:
  [lux (#- int char)
   [data
    ["." text
     format]
    [collection
     [list ("list/." functor)]]]
   [type
    abstract]]
  [//
   ["//." name (#+ Internal)]])

(abstract: #export Base' {} Any)
(abstract: #export Object' {} Any)
(abstract: #export Array' {} Any)
(abstract: #export Void' {} Any)

(abstract: #export (Value' kind) {} Any)
(abstract: #export (Return kind) {} Any)

(abstract: #export Method {} Any)

(abstract: #export (Descriptor kind)
  {}

  Text

  (type: #export (Value kind) (Return (Value' kind)))
  (type: #export Void (Return Void'))

  (do-template [<refined> <raw>]
    [(type: #export <refined> (Value <raw>))]

    [Base Base']
    [Object Object']
    [Array Array'])

  (do-template [<sigil> <name> <kind>]
    [(def: #export <name>
       (Descriptor <kind>)
       (:abstraction <sigil>))]

    ["Z" boolean Base]

    ["B" byte Base]
    ["S" short Base]
    ["I" int Base]
    ["J" long Base]

    ["C" char Base]

    ["F" float Base]
    ["D" double Base]

    ["V" void Void])

  (def: #export object
    (-> Internal (Descriptor Object))
    (|>> //name.read
         (text.enclose ["L" ";"])
         :abstraction))

  (def: #export array
    (-> (Descriptor (Value Any))
        (Descriptor Array))
    (|>> :representation
         (format "[")
         :abstraction))

  (def: #export (method inputs output)
    (-> (List (Descriptor (Value Any)))
        (Descriptor (Return Any))
        (Descriptor Method))
    (:abstraction
     (format (|> inputs
                 (list/map (|>> :representation))
                 (text.join-with "")
                 (text.enclose ["(" ")"]))
             (:representation output))))

  (def: #export descriptor
    (-> (Descriptor Any) Text)
    (|>> :representation))
  )
