(.module:
  [lux #*
   [control
    [monoid (#+ Monoid)]
    [parser ("parser/." Functor<Parser>)]]
   [data
    [number (#+ hex)
     ["." i64]]
    [format
     ["." binary (#+ Format)]]]
   [type
    abstract]]
  [//
   ["//." encoding (#+ U2)]])

(abstract: #export Access
  {}

  U2

  (def: #export code
    (-> Access U2)
    (|>> :representation))

  (def: #export (combine parameter subject)
    (-> Access Access Access)
    (let [parameter' (//encoding.from-u2 (:representation parameter))
          subject' (//encoding.from-u2 (:representation subject))]
      (:abstraction (//encoding.to-u2 (i64.and parameter'
                                               subject')))))

  (do-template [<name> <code>]
    [(def: #export <name>
       Access
       (|> (hex <code>) //encoding.to-u2 :abstraction))]

    [empty      "0000"]
    [public     "0001"]
    [final      "0010"]
    [super      "0020"]
    [interface  "0200"]
    [abstract   "0400"]
    [synthetic  "1000"]
    [annotation "2000"]
    [enum       "4000"]
    )

  (def: #export format
    (Format Access)
    (let [(^open "_/.") //encoding.u2-format]
      {#binary.reader (|> _/reader (parser/map (|>> :abstraction)))
       #binary.writer (|>> :representation _/writer)}))
  )

(structure: #export _ (Monoid Access)
  (def: identity ..empty)
  (def: compose ..combine))
