(.module:
  [lux #*
   [control
    ["." equivalence (#+ Equivalence)]
    [monoid (#+)]
    [parser (#+)]
    ["." monad (#+ do)]
    ["." state (#+ State)]]
   [data
    [number (#+)
     [i64 (#+)]]
    [format
     ["." binary (#+ Format)]]
    [collection
     ["." row (#+ Row)]]]
   [type
    [abstract (#+)]]]
  [//
   ["//." encoding (#+)]
   ["//." modifier (#+ modifiers:)]
   ["//." version (#+ Version Minor Major)]
   ["//." name (#+ Internal)]
   ["//." magic (#+ Magic)]
   ["//." index (#+ Index)]
   ["//." attribute (#+ Attribute)]
   ["//." field (#+ Field)]
   ["//." method (#+ Method)]
   ["//." constant (#+ Constant)
    ["//." pool (#+ Pool)]]])

(modifiers:
  ["0001" public]
  ["0010" final]
  ["0020" super]
  ["0200" interface]
  ["0400" abstract]
  ["1000" synthetic]
  ["2000" annotation]
  ["4000" enum]
  )

(type: #export Class
  {#magic Magic
   #minor-version Minor
   #major-version Major
   #constant-pool Pool
   #modifier Modifier
   #this (Index //constant.Class)
   #super (Index //constant.Class)
   #interfaces (Row (Index //constant.Class))
   #fields (Row Field)
   #methods (Row Method)
   #attributes (Row Attribute)})

(def: #export Equivalence<Class>
  (Equivalence Class)
  ($_ equivalence.product
      //encoding.Equivalence<U4>
      //encoding.Equivalence<U2>
      //encoding.Equivalence<U2>
      //pool.Equivalence<Pool>
      ..Equivalence<Modifier>
      //index.Equivalence<Index>
      //index.Equivalence<Index>
      (row.Equivalence<Row> //index.Equivalence<Index>)
      (row.Equivalence<Row> //field.Equivalence<Field>)
      (row.Equivalence<Row> //method.Equivalence<Method>)
      (row.Equivalence<Row> //attribute.Equivalence<Attribute>)))

(def: default-minor-version Minor (//version.version 0))

(def: (install-classes this super interfaces)
  (-> Internal Internal (List Internal)
      (State Pool [(Index //constant.Class) (Index //constant.Class) (Row (Index //constant.Class))]))
  (do state.Monad<State>
    [@this (//pool.class (//name.read this))
     @super (//pool.class (//name.read super))
     @interfaces (: (State Pool (Row (Index //constant.Class)))
                    (monad.fold @ (function (_ interface @interfaces)
                                    (do @
                                      [@interface (//pool.class (//name.read interface))]
                                      (wrap (row.add @interface @interfaces))))
                                row.empty
                                interfaces))]
    (wrap [@this @super @interfaces])))

(def: #export (class version modifier
                     super this interfaces
                     fields methods attributes)
  (-> Major Modifier
      Internal Internal (List Internal)
      (List (State Pool Field))
      (Row Method)
      (Row Attribute)
      Class)
  (let [[pool [@this @super @interfaces] =fields]
        (state.run //pool.empty
                   (do state.Monad<State>
                     [classes (install-classes this super interfaces)
                      =fields (monad.seq state.Monad<State> fields)]
                     (wrap [classes =fields])))]
    {#magic //magic.code
     #minor-version ..default-minor-version
     #major-version version
     #constant-pool pool
     #modifier modifier
     #this @this
     #super @super
     #interfaces @interfaces
     #fields (row.from-list =fields)
     #methods methods
     #attributes attributes}))

(def: #export format
  (Format Class)
  ($_ binary.and
      //magic.format
      //version.format
      //version.format
      //pool.format
      ..modifier-format
      //index.format
      //index.format
      (binary.row/16 //index.format)
      (binary.row/16 //field.format)
      (binary.row/16 //method.format)
      (binary.row/16 //attribute.format)))
