(.module:
  [lux #*
   [control
    ["." equivalence (#+ Equivalence)]
    [monad (#+ do)]
    ["." state (#+ State)]]
   [data
    ["." text ("#;." equivalence)]
    [format
     ["." binary (#+ Format)]]
    [collection
     ["." list ("#;." fold)]
     ["." row (#+ Row)]]]
   [type
    abstract]]
  ["." // (#+ UTF8 Class Constant) ("#;." class-equivalence)
   [//
    ["." encoding]
    ["." index (#+ Index)]
    ["." descriptor (#+ Descriptor)]]])

(def: offset 1)

(type: #export Pool (Row Constant))

(def: #export equivalence
  (Equivalence Pool)
  (row.equivalence //.equivalence))

(template: (!add <value> <tag> <=>)
  (function (_ pool)
    (with-expansions [<index> (as-is (index.index (encoding.to-u2 (n/+ offset idx))))
                      <try-again> (as-is (recur (.inc idx)))]
      (loop [idx 0]
        (case (row.nth idx pool)
          (#.Some entry)
          (case entry
            (<tag> reference)
            (if (<=> reference <value>)
              [pool
               <index>]
              <try-again>)
            
            _
            <try-again>)
          
          #.None
          [(row.add (<tag> <value>) pool)
           <index>])))))

(def: #export (utf8 value)
  (-> UTF8 (State Pool (Index UTF8)))
  (!add value #//.UTF8 text;=))

(def: (class' value)
  (-> Class (State Pool (Index Class)))
  (!add value #//.Class //;=))

(def: #export (class name)
  (-> UTF8 (State Pool (Index Class)))
  (do state.monad
    [@name (utf8 name)]
    (class' (//.class @name))))

(def: #export (descriptor value)
  (All [kind]
    (-> (Descriptor kind)
        (State Pool (Index (Descriptor kind)))))
  (let [value (descriptor.descriptor value)]
    (!add value #//.UTF8 text;=)))

(def: #export format
  (Format Pool)
  (binary.row/16' ..offset //.format))

(def: #export empty
  Pool
  row.empty)
