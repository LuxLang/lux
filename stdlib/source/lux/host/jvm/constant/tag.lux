(.module:
  [lux #*
   [control
    [equivalence (#+ Equivalence)]]
   [data
    [format
     ["." binary (#+ Format)]]]
   [type
    abstract]]
  [///
   ["." encoding (#+ U1) ("u1/." u1-equivalence)]])

(abstract: #export Tag
  {}

  U1

  (structure: #export equivalence (Equivalence Tag)
    (def: (= reference sample)
      (u1/= (:representation reference)
            (:representation sample))))

  (template [<code> <name>]
    [(def: #export <name>
       Tag
       (:abstraction (encoding.to-u1 <code>)))]

    [01 utf8]
    [03 integer]
    [04 float]
    [05 long]
    [06 double]
    [07 class]
    [08 string]
    [09 field]
    [10 method]
    [11 interface-method]
    [12 name-and-type]
    [15 method-handle]
    [16 method-type]
    [18 invoke-dynamic]
    )

  (def: #export format
    (Format Tag)
    (binary.adapt (|>> :abstraction)
                  (|>> :representation)
                  encoding.u1-format))
  )
