(.module:
  [lux #*
   [control
    [monad (#+ do)]
    ["." parser]
    ["." equivalence (#+ Equivalence)]]
   [data
    [number
     ["." int]
     ["." frac]]
    ["." text]
    [format
     ["." binary (#+ Format) ("mutation/." monoid)]]
    [collection
     ["." row (#+ Row)]]]
   [type
    abstract]]
  [//
   [encoding (#+ U4)]
   ["//." index (#+ Index)]
   [descriptor (#+ Descriptor)]]
  [/
   ["/." tag ("tag/." equivalence)]])

(type: #export UTF8 Text)

(def: utf8-format
  (Format UTF8)
  binary.utf8/16)

(abstract: #export Class
  {}
  
  (Index UTF8)
  
  (def: #export class
    (-> (Index UTF8) Class)
    (|>> :abstraction))

  (def: #export class-equivalence
    (Equivalence Class)
    (:: equivalence.contravariant map-1
        (|>> :representation)
        //index.equivalence))

  (def: class-format
    (Format Class)
    (binary.adapt (|>> :abstraction)
                  (|>> :representation)
                  //index.format))
  )

(abstract: #export (Value kind)

  {}

  kind

  (def: #export value
    (All [kind] (-> (Value kind) kind))
    (|>> :representation))

  (def: #export (value-equivalence Equivalence<kind>)
    (All [kind]
      (-> (Equivalence kind)
          (Equivalence (Value kind))))
    (:: equivalence.contravariant map-1
        (|>> :representation)
        Equivalence<kind>))

  (do-template [<constructor> <type> <marker>]
    [(type: #export <type> (Value <marker>))

     (def: #export <constructor>
       (-> <marker> <type>)
       (|>> :abstraction))]

    [integer Integer U4]
    [long    Long    .Int]
    [float   Float   Nothing]
    [double  Double  Frac]
    [string  String  (Index UTF8)]
    )

  (do-template [<name> <type> <read> <write> <base>]
    [(def: <name>
       (Format <type>)
       (binary.adapt (|>> <read> :abstraction)
                     (|>> :representation <write>)
                     <base>))]

    [long-format Long .int (<|) binary.bits/64]
    [double-format Double frac.bits-to-frac frac.frac-to-bits binary.bits/64]
    [string-format String (<|) (<|) //index.format]
    )
  )

(type: #export Name-And-Type
  {#name (Index UTF8)
   #descriptor (Index (Descriptor Any))})

(type: #export Reference
  {#class (Index Class)
   #name-and-type (Index Name-And-Type)})

(do-template [<type> <equivalence> <format>]
  [(def: #export <equivalence>
     (Equivalence <type>)
     ($_ equivalence.product
         //index.equivalence
         //index.equivalence))

   (def: #export <format>
     (Format <type>)
     ($_ binary.and
         //index.format
         //index.format))]

  [Name-And-Type name-and-type-equivalence name-and-type-format]
  [Reference reference-equivalence reference-format]
  )

(type: #export Constant
  (#UTF8 UTF8)
  (#Long Long)
  (#Double Double)
  (#Class Class)
  (#String String)
  (#Field Reference)
  (#Method Reference)
  (#Interface-Method Reference)
  (#Name-And-Type Name-And-Type))

(def: #export equivalence
  (Equivalence Constant)
  ($_ equivalence.sum
      ## #UTF8
      text.equivalence
      ## #Long
      (..value-equivalence int.equivalence)
      ## #Double
      (..value-equivalence frac.equivalence)
      ## #Class
      ..class-equivalence
      ## #String
      (..value-equivalence //index.equivalence)
      ## #Field
      ..reference-equivalence
      ## #Method
      ..reference-equivalence
      ## #Interface-Method
      ..reference-equivalence
      ## #Name-And-Type
      ..name-and-type-equivalence
      ))

(def: #export format
  (Format Constant)
  (with-expansions [<constants> (as-is [#UTF8             /tag.utf8             ..utf8-format]
                                       ## TODO: Integer
                                       ## TODO: Float
                                       [#Long             /tag.long             ..long-format]
                                       [#Double           /tag.double           ..double-format]
                                       [#Class            /tag.class            ..class-format]
                                       [#String           /tag.string           ..string-format]
                                       [#Field            /tag.field            ..reference-format]
                                       [#Method           /tag.method           ..reference-format]
                                       [#Interface-Method /tag.interface-method ..reference-format]
                                       [#Name-And-Type    /tag.name-and-type    ..name-and-type-format]
                                       ## TODO: Method-Handle
                                       ## TODO: Method-Type
                                       ## TODO: Invoke-Dynamic
                                       )]
    {#binary.reader (do parser.monad
                      [tag (get@ #binary.reader /tag.format)]
                      (`` (cond (~~ (do-template [<case> <tag> <format>]
                                      [(tag/= <tag> tag)
                                       (:: @ map (|>> <case>) (get@ #binary.reader <format>))]

                                      <constants>))
                                
                                ## else
                                (parser.fail "Cannot parse constant."))))
     #binary.writer (function (_ value)
                      (case value
                        (^template [<case> <tag> <format>]
                          (<case> value)
                          (mutation/compose ((get@ #binary.writer /tag.format) <tag>)
                                            ((get@ #binary.writer <format>) value)))
                        (<constants>)
                        ))}))
