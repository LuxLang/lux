(.module:
  [lux #*
   [control
    [monad (#+ do)]
    ["." parser]
    ["." equivalence (#+ Equivalence)]]
   [data
    ["." text]
    [format
     ["." binary (#+ Format) ("mutation/." Monoid<Mutation>)]]
    [collection
     ["." row (#+ Row)]]]
   [type
    abstract]
   ["." host (#+ import:)]]
  [//
   ["//." index (#+ Index)]]
  [/
   ["/." tag ("tag/." Equivalence<Tag>)]])

(type: #export UTF8 Text)

(def: utf8-format
  (Format UTF8)
  binary.utf8/16)

(abstract: #export Class
  {}
  
  (Index UTF8)
  
  (def: #export class
    (-> (Index UTF8) Class)
    (|>> :abstraction))

  (def: #export Equivalence<Class>
    (Equivalence Class)
    (:: equivalence.Contravariant<Equivalence> map-1
        (|>> :representation)
        //index.Equivalence<Index>))

  (def: class-format
    (Format Class)
    (binary.adapt (|>> :abstraction)
                  (|>> :representation)
                  //index.format))
  )

(abstract: #export (Value kind)

  {}

  kind

  (def: #export value
    (All [kind] (-> (Value kind) kind))
    (|>> :representation))

  (do-template [<type> <class> <constructor>]
    [(import: #long <class>)

     (type: #export <type> (Value <class>))

     (def: #export <constructor>
       (-> <class> <type>)
       (|>> :abstraction))]

    [Integer java/lang/Integer integer]
    [Long java/lang/Long long]
    [Float java/lang/Float float]
    [Double java/lang/Double double]
    [String java/lang/String string]
    )
  )

(type: #export Constant
  (#UTF8 UTF8)
  (#Class Class))

(def: #export Equivalence<Constant>
  (Equivalence Constant)
  ($_ equivalence.sum
      text.Equivalence<Text>
      ..Equivalence<Class>))

(def: #export format
  (Format Constant)
  (with-expansions [<constants> (as-is [#UTF8  /tag.utf8  ..utf8-format]
                                       [#Class /tag.class ..class-format])]
    {#binary.reader (do parser.Monad<Parser>
                      [tag (get@ #binary.reader /tag.format)]
                      (`` (cond (~~ (do-template [<case> <tag> <format>]
                                      [(tag/= <tag> tag)
                                       (:: @ map (|>> <case>) (get@ #binary.reader <format>))]

                                      <constants>))
                                
                                ## else
                                (parser.fail "Cannot parse constant."))))
     #binary.writer (function (_ value)
                      (case value
                        (^template [<case> <tag> <format>]
                          (<case> value)
                          (mutation/compose ((get@ #binary.writer /tag.format) <tag>)
                                            ((get@ #binary.writer <format>) value)))
                        (<constants>)
                        ))}))
