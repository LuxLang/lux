(.module:
  [lux #*
   [control
    [monad (#+ do)]
    ["." parser]]
   [data
    [format
     ["." binary (#+ Format) ("mutation/." Monoid<Mutation>)]]
    [collection
     ["." row (#+ Row)]]]
   [type
    abstract]]
  [//
   ["//." index (#+ Index)]]
  [/
   ["/." tag ("tag/." Equivalence<Tag>)]])

(type: #export Constant
  (#UTF8 Text)
  (#Class Index))

(def: #export format
  (Format Constant)
  (with-expansions [<constants> (as-is [#UTF8  /tag.utf8  binary.utf8/16]
                                       [#Class /tag.class //index.format])]
    {#binary.reader (do parser.Monad<Parser>
                      [tag (get@ #binary.reader /tag.format)]
                      (`` (cond (~~ (do-template [<case> <tag> <format>]
                                      [(tag/= <tag> tag)
                                       (:: @ map (|>> <case>) (get@ #binary.reader <format>))]

                                      <constants>))
                                
                                ## else
                                (parser.fail "Cannot parse constant."))))
     #binary.writer (function (_ value)
                      (case value
                        (^template [<case> <tag> <format>]
                          (<case> value)
                          (mutation/compose ((get@ #binary.writer /tag.format) <tag>)
                                            ((get@ #binary.writer <format>) value)))
                        (<constants>)
                        ))}))
