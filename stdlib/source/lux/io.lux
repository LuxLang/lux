(.module: {#.doc "A method for abstracting I/O and effectful computations to make it safe while writing pure functional code."}
  [lux #*
   [control
    [functor (#+ Functor)]
    [apply (#+ Apply)]
    [monad (#+ do Monad)]
    ["ex" exception (#+ Exception)]]
   [data
    ["." error (#+ Error)]
    [collection
     [list]]]])

(type: #export (IO a)
  {#.doc "A type that represents synchronous, effectful computations that may interact with the outside world."}
  (-> Nothing a))

(macro: #export (io tokens state)
  {#.doc (doc "Delays the evaluation of an expression, by wrapping it in an IO 'thunk'."
              "Great for wrapping effectful computations (which will not be performed until the IO is \"run\")."
              (io (exec
                    (log! msg)
                    "Some value...")))}
  (case tokens
    (^ (list value))
    (let [blank (: Code [["" 0 0] (#.Identifier ["" ""])])]
      (#.Right [state (list (` ([(~ blank) (~ blank)] (~ value))))]))

    _
    (#.Left "Wrong syntax for io")))

(structure: #export _ (Functor IO)
  (def: (map f ma)
    (io (f (ma (:coerce Nothing []))))))

(structure: #export _ (Apply IO)
  (def: functor Functor<IO>)

  (def: (apply ff fa)
    (io ((ff (:coerce Nothing [])) (fa (:coerce Nothing []))))))

(structure: #export _ (Monad IO)
  (def: functor Functor<IO>)

  (def: (wrap x)
    (io x))
  
  (def: (join mma)
    (io ((mma (:coerce Nothing [])) (:coerce Nothing [])))))

(def: #export (run action)
  {#.doc "A way to execute IO computations and perform their side-effects."}
  (All [a] (-> (IO a) a))
  (action (:coerce Nothing [])))

(def: #export (exit code)
  (-> Int (IO Nothing))
  (io ("lux io exit" code)))

## Process
(type: #export (Process a)
  (IO (Error a)))

(structure: #export _ (Functor Process)
  (def: (map f ma)
    (io (:: error.Functor<Error> map f (run ma)))))

(structure: #export _ (Apply Process)
  (def: functor Functor<Process>)

  (def: (apply ff fa)
    (io (:: error.Apply<Error> apply (run ff) (run fa)))))

(structure: #export _ (Monad Process)
  (def: functor Functor<Process>)

  (def: (wrap x)
    (io (:: error.Monad<Error> wrap x)))
  
  (def: (join mma)
    (case (run mma)
      (#error.Success ma)
      ma
      
      (#error.Error error)
      (io (#error.Error error)))))

(def: #export from-io
  (All [a] (-> (IO a) (Process a)))
  (:: Functor<IO> map (|>> #error.Success)))

(def: #export (fail error)
  (All [a] (-> Text (Process a)))
  (io (#error.Error error)))

(def: #export (throw exception message)
  (All [e a] (-> (Exception e) e (Process a)))
  (io (ex.throw exception message)))
