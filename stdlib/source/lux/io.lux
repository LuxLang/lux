## TODO: Make IO an abstract type.
(.module: {#.doc "A method for abstracting I/O and effectful computations to make it safe while writing pure functional code."}
  [lux #*
   [control
    [functor (#+ Functor)]
    [apply (#+ Apply)]
    [monad (#+ do Monad)]]])

(type: #export (IO a)
  {#.doc "A type that represents synchronous, effectful computations that may interact with the outside world."}
  (-> Nothing a))

(macro: #export (io tokens state)
  {#.doc (doc "Delays the evaluation of an expression, by wrapping it in an IO 'thunk'."
              "Great for wrapping effectful computations (which will not be performed until the IO is 'run')."
              (io (exec
                    (log! msg)
                    "Some value...")))}
  (case tokens
    (^ (list value))
    (let [blank (: Code [["" 0 0] (#.Identifier ["" ""])])]
      (#.Right [state (list (` ([(~ blank) (~ blank)] (~ value))))]))

    _
    (#.Left "Wrong syntax for io")))

(structure: #export functor (Functor IO)
  (def: (map f ma)
    (io (f (ma (:coerce Nothing []))))))

(structure: #export apply (Apply IO)
  (def: &functor ..functor)

  (def: (apply ff fa)
    (io ((ff (:coerce Nothing [])) (fa (:coerce Nothing []))))))

(structure: #export monad (Monad IO)
  (def: &functor ..functor)

  (def: (wrap x)
    (io x))
  
  (def: (join mma)
    (io ((mma (:coerce Nothing [])) (:coerce Nothing [])))))

(def: #export (run action)
  {#.doc "A way to execute IO computations and perform their side-effects."}
  (All [a] (-> (IO a) a))
  (action (:coerce Nothing [])))

(def: #export (exit code)
  (-> Int (IO Nothing))
  (io ("lux io exit" code)))
