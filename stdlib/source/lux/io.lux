(;module: {#;doc "A method for abstracting I/O and effectful computations to make it safe while writing pure functional code."}
  lux
  (lux (control functor
                applicative
                monad)
       (data (coll list))))

## [Types]
(type: #export (IO a)
  {#;doc "A type that represents synchronous, effectful computations that may interact with the outside world."}
  (-> Void a))

## [Syntax]
(macro: #export (io tokens state)
  {#;doc (doc "Delays the evaluation of an expression, by wrapping it in an IO 'thunk'."
              "Great for wrapping effectful computations (which will not be performed until the IO is \"run\")."
              (io (exec
                    (log! msg)
                    "Some value...")))}
  (case tokens
    (^ (list value))
    (let [blank (: Code [["" +0 +0] (#;Symbol ["" ""])])]
      (#;Right [state (list (` (;_lux_function (~ blank) (~ blank) (~ value))))]))

    _
    (#;Left "Wrong syntax for io")))

## [Structures]
(struct: #export _ (Functor IO)
  (def: (map f ma)
    (io (f (ma (:! Void []))))))

(struct: #export _ (Applicative IO)
  (def: functor Functor<IO>)

  (def: (wrap x)
    (io x))

  (def: (apply ff fa)
    (io ((ff (:! Void [])) (fa (:! Void []))))))

(struct: #export _ (Monad IO)
  (def: applicative Applicative<IO>)
  
  (def: (join mma)
    (io ((mma (:! Void [])) (:! Void [])))))

## [Functions]
(def: #export (run action)
  {#;doc "A way to execute IO computations and perform their side-effects."}
  (All [a] (-> (IO a) a))
  (action (:! Void [])))
