(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]
    [hash (#+ Hash)]]
   [data
    ["." maybe ("#\." functor)]
    ["." text
     ["%" format (#+ format)]
     ["." encoding (#+ Encoding)]]]
   [type
    abstract]]
  [/
   ["." language (#+ Language)]
   ["." territory (#+ Territory)]])

(abstract: #export Locale
  Text

  (def: territory_separator "_")
  (def: encoding_separator ".")

  (def: #export (locale language territory encoding)
    (-> Language (Maybe Territory) (Maybe Encoding) Locale)
    (:abstraction (format (language.code language)
                          (|> territory
                              (maybe\map (|>> territory.long_code (format ..territory_separator)))
                              (maybe.default ""))
                          (|> encoding
                              (maybe\map (|>> encoding.name (format ..encoding_separator)))
                              (maybe.default "")))))

  (def: #export code
    (-> Locale Text)
    (|>> :representation))

  (structure: #export equivalence
    (Equivalence Locale)
    
    (def: (= reference sample)
      (\ text.equivalence = (:representation reference) (:representation sample))))

  (structure: #export hash
    (Hash Locale)
    
    (def: &equivalence
      ..equivalence)
    
    (def: hash
      (|>> :representation
           (\ text.hash hash))))
  )
