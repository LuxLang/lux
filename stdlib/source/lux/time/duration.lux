(.module:
  [lux #*
   [control
    equivalence
    order
    codec
    [monoid (#+ Monoid)]
    ["p" parser]
    [monad (#+ do)]]
   [data
    ["." number ("nat/." Codec<Text,Nat>) ("int/." Codec<Text,Int> Number<Int>)]
    [text ("text/." Monoid<Text>)
     ["l" lexer]]
    ["e" error]]
   [type
    abstract]])

(abstract: #export Duration
  {#.doc "Durations have a resolution of milli-seconds."}
  Int

  (def: #export from-millis
    (-> Int Duration)
    (|>> :abstraction))

  (def: #export to-millis
    (-> Duration Int)
    (|>> :representation))

  (do-template [<name> <op>]
    [(def: #export (<name> param subject)
       (-> Duration Duration Duration)
       (:abstraction (<op> (:representation param) (:representation subject))))]

    [merge i/+]
    [frame i/%]
    )

  (do-template [<name> <op>]
    [(def: #export (<name> scalar duration)
       (-> Int Duration Duration)
       (:abstraction (<op> scalar (:representation duration))))]

    [scale-up i/*]
    [scale-down i//]
    )

  (def: #export inverse (scale-up -1))

  (def: #export (difference from to)
    (-> Duration Duration Duration)
    (|> from inverse (merge to)))

  (def: #export (query param subject)
    (-> Duration Duration Int)
    (i// (:representation param) (:representation subject)))

  (structure: #export _ (Equivalence Duration)
    (def: (= param subject)
      (i/= (:representation param) (:representation subject))))

  (structure: #export _ (Order Duration)
    (def: eq Equivalence<Duration>)
    (do-template [<name> <op>]
      [(def: (<name> param subject)
         (<op> (:representation param) (:representation subject)))]

      [<  i/<]
      [<= i/<=]
      [>  i/>]
      [>= i/>=]
      ))

  (do-template [<name> <op>]
    [(def: #export <name>
       (-> Duration Bit)
       (|>> :representation (<op> +0)))]

    [positive? i/>]
    [negative? i/<]
    [neutral?  i/=]
    )
  )

(def: #export empty Duration (from-millis +0))
(def: #export milli Duration (from-millis +1))
(def: #export second Duration (scale-up +1_000 milli))
(def: #export minute Duration (scale-up +60 second))
(def: #export hour Duration (scale-up +60 minute))
(def: #export day Duration (scale-up +24 hour))
(def: #export week Duration (scale-up +7 day))
(def: #export normal-year Duration (scale-up +365 day))
(def: #export leap-year Duration (merge day normal-year))

(structure: #export _ (Monoid Duration)
  (def: identity empty)
  (def: compose merge))

(def: (encode duration)
  (-> Duration Text)
  (if (:: Equivalence<Duration> = empty duration)
    "+0ms"
    (let [signed? (negative? duration)
          [days time-left] [(query day duration) (frame day duration)]
          days (if signed?
                 (int/abs days)
                 days)
          time-left (if signed?
                      (scale-up -1 time-left)
                      time-left)
          [hours time-left] [(query hour time-left) (frame hour time-left)]
          [minutes time-left] [(query minute time-left) (frame minute time-left)]
          [seconds time-left] [(query second time-left) (frame second time-left)]
          millis (to-millis time-left)]
      ($_ text/compose
          (if signed? "-" "+")
          (if (i/= +0 days) "" (text/compose (nat/encode (.nat days)) "D"))
          (if (i/= +0 hours) "" (text/compose (nat/encode (.nat hours)) "h"))
          (if (i/= +0 minutes) "" (text/compose (nat/encode (.nat minutes)) "m"))
          (if (i/= +0 seconds) "" (text/compose (nat/encode (.nat seconds)) "s"))
          (if (i/= +0 millis) "" (text/compose (nat/encode (.nat millis)) "ms"))
          ))))

(def: (lex-section suffix)
  (-> Text (l.Lexer Int))
  (|> (p.codec number.Codec<Text,Int> (l.many l.decimal))
      (p.before (p.and (l.this suffix) (p.not l.alpha)))
      (p.default +0)))

(def: lex-duration
  (l.Lexer Duration)
  (do p.Monad<Parser>
    [signed? (p.or (l.this? "-") (l.this? "+"))
     #let [sign (function (_ raw)
                  (case signed?
                    (#.Left _)
                    (i/* -1 raw)

                    (#.Right _)
                    raw))]
     utc-day (lex-section "D")
     utc-hour (lex-section "h")
     utc-minute (lex-section "m")
     _ (p.assert "Invalid minute."
                 (and (i/>= +0 utc-minute)
                      (i/<= +59 utc-minute)))
     utc-second (lex-section "s")
     _ (p.assert "Invalid second."
                 (and (i/>= +0 utc-second)
                      (i/<= +59 utc-second)))
     utc-millis (lex-section "ms")
     _ (p.assert "Invalid milli-seconds."
                 (and (i/>= +0 utc-millis)
                      (i/<= +999 utc-millis)))]
    (wrap (|> empty
              (merge (scale-up (sign utc-day) day))
              (merge (scale-up (sign utc-hour) hour))
              (merge (scale-up (sign utc-minute) minute))
              (merge (scale-up (sign utc-second) second))
              (merge (scale-up (sign utc-millis) milli))))))

(def: (decode input)
  (-> Text (e.Error Duration))
  (l.run input lex-duration))

(structure: #export _
  {#.doc "For example: +15D21h14m51s827ms"}
  (Codec Text Duration)
  (def: encode encode)
  (def: decode decode))
