(;module:
  lux
  (lux (control eq
                order)
       (type model)))

(model: #export Duration
  {#;doc "Durations have a resolution of milliseconds."}
  Int

  (def: #export from-millis
    (-> Int Duration)
    (|>. @model))

  (def: #export to-millis
    (-> Duration Int)
    (|>. @repr))

  (do-template [<name> <op>]
    [(def: #export (<name> param subject)
       (-> Duration Duration Duration)
       (@model (<op> (@repr param) (@repr subject))))]

    [merge i.+]
    [frame i.%]
    )

  (def: #export (scale scalar duration)
    (-> Int Duration Duration)
    (@model (i.* scalar (@repr duration))))

  (def: #export (query param subject)
    (-> Duration Duration Int)
    (i./ (@repr param) (@repr subject)))

  (struct: #export _ (Eq Duration)
    (def: (= param subject)
      (i.= (@repr param) (@repr subject))))

  (struct: #export _ (Order Duration)
    (def: eq Eq<Duration>)
    (do-template [<name> <op>]
      [(def: (<name> param subject)
         (<op> (@repr param) (@repr subject)))]

      [<  i.<]
      [<= i.<=]
      [>  i.>]
      [>= i.>=]
      ))

  (do-template [<name> <op>]
    [(def: #export (<name> duration)
       (-> Duration Bool)
       (<op> 0 (@repr duration)))]

    [positive? i.>]
    [negative? i.<]
    [neutral?  i.=])
  )

(def: #export empty Duration (from-millis 0))
(def: #export milli Duration (from-millis 1))
(def: #export second Duration (from-millis 1_000))
(def: #export minute Duration (scale 60 second))
(def: #export hour Duration (scale 60 minute))
(def: #export day Duration (scale 24 hour))
(def: #export week Duration (scale 7 day))
(def: #export normal-year Duration (scale 365 day))
(def: #export leap-year Duration (merge day normal-year))
