(.module:
  [lux (#- nat)
   [abstract
    [equivalence (#+ Equivalence)]
    [order (#+ Order)]
    [enum (#+ Enum)]
    [codec (#+ Codec)]]
   [control
    ["." try]
    ["." exception (#+ exception:)]]
   [data
    ["." text]]
   [math
    [number
     ["n" nat]]]])

(type: #export Day
  #Sunday
  #Monday
  #Tuesday
  #Wednesday
  #Thursday
  #Friday
  #Saturday)

(structure: #export equivalence
  (Equivalence Day)
  
  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag>]
        [[<tag> <tag>]
         #1])
      ([#Sunday]
       [#Monday]
       [#Tuesday]
       [#Wednesday]
       [#Thursday]
       [#Friday]
       [#Saturday])

      _
      #0)))

(def: (nat day)
  (-> Day Nat)
  (case day
    #Sunday    0
    #Monday    1
    #Tuesday   2
    #Wednesday 3
    #Thursday  4
    #Friday    5
    #Saturday  6))

(structure: #export order
  (Order Day)
  
  (def: &equivalence ..equivalence)
  
  (def: (< reference sample)
    (n.< (..nat reference) (..nat sample))))

(structure: #export enum
  (Enum Day)
  
  (def: &order ..order)
  
  (def: (succ day)
    (case day
      #Sunday    #Monday
      #Monday    #Tuesday
      #Tuesday   #Wednesday
      #Wednesday #Thursday
      #Thursday  #Friday
      #Friday    #Saturday
      #Saturday  #Sunday))
  
  (def: (pred day)
    (case day
      #Monday    #Sunday
      #Tuesday   #Monday
      #Wednesday #Tuesday
      #Thursday  #Wednesday
      #Friday    #Thursday
      #Saturday  #Friday
      #Sunday    #Saturday)))

(exception: #export (not_a_day_of_the_week {value Text})
  (exception.report
   ["Value" (text.format value)]))

(structure: #export codec
  (Codec Text Day)
  
  (def: (encode value)
    (case value
      #Monday    "Monday"
      #Tuesday   "Tuesday"
      #Wednesday "Wednesday"
      #Thursday  "Thursday"
      #Friday    "Friday"
      #Saturday  "Saturday"
      #Sunday    "Sunday"))
  (def: (decode value)
    (case value
      "Monday"    (#try.Success #..Monday)
      "Tuesday"   (#try.Success #..Tuesday)
      "Wednesday" (#try.Success #..Wednesday)
      "Thursday"  (#try.Success #..Thursday)
      "Friday"    (#try.Success #..Friday)
      "Saturday"  (#try.Success #..Saturday)
      "Sunday"    (#try.Success #..Sunday)
      _ (exception.throw ..not_a_day_of_the_week [value]))))
