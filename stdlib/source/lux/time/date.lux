(;module:
  lux
  (lux (control eq
                order
                enum)))

(type: #export Year Int)

(type: #export Month
  #January
  #February
  #March
  #April
  #May
  #June
  #July
  #August
  #September
  #October
  #November
  #December)

(struct: #export _ (Eq Month)
  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag>]
        [<tag> <tag>]
        true)
      ([#January]
       [#February]
       [#March]
       [#April]
       [#May]
       [#June]
       [#July]
       [#August]
       [#September]
       [#October]
       [#November]
       [#December])

      _
      false)))

(def: (month-to-nat month)
  (-> Month Nat)
  (case month
    #January   +0
    #February  +1
    #March     +2
    #April     +3
    #May       +4
    #June      +5
    #July      +6
    #August    +7
    #September +8
    #October   +9
    #November +10
    #December +11))

(struct: #export _ (Order Month)
  (def: eq Eq<Month>)
  (do-template [<name> <comp>]
    [(def: (<name> reference sample)
       (<comp> (month-to-nat reference) (month-to-nat sample)))]

    [<  n.<]
    [<= n.<=]
    [>  n.>]
    [>= n.>=]
    ))

(struct: #export _ (Enum Month)
  (def: order Order<Month>)
  (def: (succ month)
    (case month
      #January   #February
      #February  #March
      #March     #April
      #April     #May
      #May       #June
      #June      #July
      #July      #August
      #August    #September
      #September #October
      #October   #November
      #November  #December
      #December  #January))
  (def: (pred month)
    (case month
      #February  #January
      #March     #February
      #April     #March
      #May       #April
      #June      #May
      #July      #June
      #August    #July
      #September #August
      #October   #September
      #November  #October
      #December  #November
      #January   #December)))

(type: #export Day
  #Sunday
  #Monday
  #Tuesday
  #Wednesday
  #Thursday
  #Friday
  #Saturday)

(struct: #export _ (Eq Day)
  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag>]
        [<tag> <tag>]
        true)
      ([#Sunday]
       [#Monday]
       [#Tuesday]
       [#Wednesday]
       [#Thursday]
       [#Friday]
       [#Saturday])

      _
      false)))

(def: (day-to-nat day)
  (-> Day Nat)
  (case day
    #Sunday    +0
    #Monday    +1
    #Tuesday   +2
    #Wednesday +3
    #Thursday  +4
    #Friday    +5
    #Saturday  +6))

(struct: #export _ (Order Day)
  (def: eq Eq<Day>)
  (do-template [<name> <comp>]
    [(def: (<name> reference sample)
       (<comp> (day-to-nat reference) (day-to-nat sample)))]

    [<  n.<]
    [<= n.<=]
    [>  n.>]
    [>= n.>=]
    ))

(struct: #export _ (Enum Day)
  (def: order Order<Day>)
  (def: (succ day)
    (case day
      #Sunday    #Monday
      #Monday    #Tuesday
      #Tuesday   #Wednesday
      #Wednesday #Thursday
      #Thursday  #Friday
      #Friday    #Saturday
      #Saturday  #Sunday))
  (def: (pred day)
    (case day
      #Monday    #Sunday
      #Tuesday   #Monday
      #Wednesday #Tuesday
      #Thursday  #Wednesday
      #Friday    #Thursday
      #Saturday  #Friday
      #Sunday    #Saturday)))

(type: #export Date
  {#year Year
   #month Month
   #day Nat})

(struct: #export _ (Eq Date)
  (def: (= reference sample)
    (and (i.= (get@ #year reference)
              (get@ #year sample))
         (:: Eq<Month> =
             (get@ #month reference)
             (get@ #month sample))
         (n.= (get@ #day reference)
              (get@ #day sample)))))
