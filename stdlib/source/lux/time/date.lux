(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]
    [order (#+ Order)]
    [enum (#+ Enum)]
    [codec (#+ Codec)]
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]
    ["<>" parser
     ["<t>" text (#+ Parser)]]]
   [data
    ["." maybe]
    ["." text ("#\." monoid)]
    [number
     ["n" nat ("#\." decimal)]
     ["i" int]]
    [collection
     ["." list ("#\." fold)]
     ["." dictionary (#+ Dictionary)]]]
   [type
    abstract]]
  ["." // #_
   ["#." year (#+ Year)]
   ["#." month (#+ Month)]])

(def: month-by-number
  (Dictionary Nat Month)
  (list\fold (function (_ month mapping)
               (dictionary.put (//month.number month) month mapping))
             (dictionary.new n.hash)
             //month.year))

(exception: #export there-is-no-year-0)

(def: minimum-day 1)

(def: (month-days year month)
  (-> Year Month Nat)
  (if (//year.leap? year)
    (//month.leap-year-days month)
    (//month.days month)))

(def: (day-is-within-limits? year month day)
  (-> Year Month Nat Bit)
  (and (n.>= ..minimum-day day)
       (n.<= (..month-days year month) day)))

(exception: #export (invalid-day {year Year} {month Month} {day Nat})
  (exception.report
   ["Value" (n\encode day)]
   ["Minimum" (n\encode ..minimum-day)]
   ["Maximum" (n\encode (..month-days year month))]
   ["Year" (\ //year.codec encode year)]
   ["Month" (n\encode (//month.number month))]))

(def: (pad value)
  (-> Nat Text)
  (let [digits (n\encode value)]
    (if (n.< 10 value)
      (text\compose "0" digits)
      digits)))

(def: separator
  "-")

(abstract: #export Date
  {#year Year
   #month Month
   #day Nat}

  (def: #export (date year month day)
    (-> Year Month Nat (Try Date))
    (if (..day-is-within-limits? year month day)
      (#try.Success
       (:abstraction
        {#year year
         #month month
         #day day}))
      (exception.throw ..invalid-day [year month day])))

  (template [<name> <type> <field>]
    [(def: #export <name>
       (-> Date <type>)
       (|>> :representation (get@ <field>)))]

    [year Year #year]
    [month Month #month]
    [day-of-month Nat #day]
    )

  (structure: #export equivalence
    (Equivalence Date)
    
    (def: (= reference sample)
      (let [reference (:representation reference)
            sample (:representation sample)]
        (and (\ //year.equivalence =
                (get@ #year reference)
                (get@ #year sample))
             (\ //month.equivalence =
                (get@ #month reference)
                (get@ #month sample))
             (n.= (get@ #day reference)
                  (get@ #day sample))))))

  (structure: #export order
    (Order Date)
    
    (def: &equivalence ..equivalence)
    
    (def: (< reference sample)
      (let [reference (:representation reference)
            sample (:representation sample)]
        (or (\ //year.order <
               (get@ #year reference)
               (get@ #year sample))
            (and (\ //year.equivalence =
                    (get@ #year reference)
                    (get@ #year sample))
                 (or (\ //month.order <
                        (get@ #month reference)
                        (get@ #month sample))
                     (and (\ //month.order =
                             (get@ #month reference)
                             (get@ #month sample))
                          (n.< (get@ #day reference)
                               (get@ #day sample)))))))))
  )

(def: parse-section
  (Parser Nat)
  (<>.codec n.decimal (<t>.exactly 2 <t>.decimal)))

(def: parse-millis
  (Parser Nat)
  (<>.either (|> (<t>.at-most 3 <t>.decimal)
                 (<>.codec n.decimal)
                 (<>.after (<t>.this ".")))
             (\ <>.monad wrap 0)))

(template [<minimum> <maximum> <parser> <exception>]
  [(exception: #export (<exception> {value Nat})
     (exception.report
      ["Value" (n\encode value)]
      ["Minimum" (n\encode <minimum>)]
      ["Maximum" (n\encode <maximum>)]))

   (def: <parser>
     (Parser Nat)
     (do <>.monad
       [value ..parse-section]
       (if (and (n.>= <minimum> value)
                (n.<= <maximum> value))
         (wrap value)
         (<>.lift (exception.throw <exception> [value])))))]

  [1 12 parse-month invalid-month]
  )

(def: #export parser
  (Parser Date)
  (do <>.monad
    [utc-year //year.parser
     _ (<t>.this ..separator)
     utc-month ..parse-month
     _ (<t>.this ..separator)
     #let [month (maybe.assume (dictionary.get utc-month ..month-by-number))]
     utc-day ..parse-section]
    (<>.lift (..date utc-year month utc-day))))

(def: (encode value)
  (-> Date Text)
  ($_ text\compose
      (\ //year.codec encode (..year value))
      ..separator (..pad (|> value ..month //month.number))
      ..separator (..pad (..day-of-month value))))

(structure: #export codec
  {#.doc (doc "Based on ISO 8601."
              "For example: 2017-01-15")}
  (Codec Text Date)
  
  (def: encode ..encode)
  (def: decode (<t>.run ..parser)))

(def: days-per-leap
  (|> //year.days
      (n.* 4)
      (n.+ 1)))

(def: days-per-century
  (let [leaps-per-century (n./ //year.leap
                               //year.century)]
    (|> //year.century
        (n.* //year.days)
        (n.+ leaps-per-century)
        (n.- 1))))

(def: days-per-era
  (let [centuries-per-era (n./ //year.century
                               //year.era)]
    (|> centuries-per-era
        (n.* ..days-per-century)
        (n.+ 1))))

(def: days-since-epoch
  (let [years::70 70
        leaps::70 (n./ //year.leap
                       years::70)
        days::70 (|> years::70
                     (n.* //year.days)
                     (n.+ leaps::70))
        ## The epoch is being calculated from March 1st, instead of January 1st.
        january-&-february (n.+ (//month.days #//month.January)
                                (//month.days #//month.February))]
    (|> 0
        ## 1600/01/01
        (n.+ (n.* 4 days-per-era))
        ## 1900/01/01
        (n.+ (n.* 3 days-per-century))
        ## 1970/01/01
        (n.+ days::70)
        ## 1970/03/01
        (n.- january-&-february))))

(def: first-month-of-civil-year 3)

(with-expansions [<pull> +3
                  <push> +9]
  (def: (internal-month civil-month)
    (-> Nat Int)
    (if (n.< ..first-month-of-civil-year civil-month)
      (i.+ <push> (.int civil-month))
      (i.- <pull> (.int civil-month))))

  (def: (civil-month internal-month)
    (-> Int Nat)
    (.nat (if (i.< +10 internal-month)
            (i.+ <pull> internal-month)
            (i.- <push> internal-month)))))

(with-expansions [<up> +153
                  <translation> +2
                  <down> +5]
  (def: day-of-year-from-month
    (-> Nat Int)
    (|>> ..internal-month
         (i.* <up>)
         (i.+ <translation>)
         (i./ <down>)))

  (def: month-from-day-of-year
    (-> Int Nat)
    (|>> (i.* <down>)
         (i.+ <translation>)
         (i./ <up>)
         ..civil-month)))

(def: last-era-leap-day
  (.int (dec ..days-per-leap)))

(def: last-era-day
  (.int (dec ..days-per-era)))

(def: (civil-year utc-month utc-year)
  (-> Nat Year Int)
  (let [## Coercing, because the year is already in external form.
        utc-year (:coerce Int utc-year)]
    (if (n.< ..first-month-of-civil-year utc-month)
      (dec utc-year)
      utc-year)))

## http://howardhinnant.github.io/date_algorithms.html
(def: #export (days date)
  (-> Date Int)
  (let [utc-month (|> date ..month //month.number)
        civil-year (..civil-year utc-month (..year date))
        era (|> (if (i.< +0 civil-year)
                  (i.- (.int (dec //year.era))
                       civil-year)
                  civil-year)
                (i./ (.int //year.era)))
        year-of-era (i.- (i.* (.int //year.era)
                              era)
                         civil-year)
        day-of-year (|> utc-month
                        ..day-of-year-from-month
                        (i.+ (.int (dec (..day-of-month date)))))
        day-of-era (|> day-of-year
                       (i.+ (i.* (.int //year.days) year-of-era))
                       (i.+ (i./ (.int //year.leap) year-of-era))
                       (i.- (i./ (.int //year.century) year-of-era)))]
    (|> (i.* (.int ..days-per-era) era)
        (i.+ day-of-era)
        (i.- (.int ..days-since-epoch)))))

## http://howardhinnant.github.io/date_algorithms.html
(def: #export (from-days days)
  (-> Int Date)
  (let [days (i.+ (.int ..days-since-epoch) days)
        era (|> (if (i.< +0 days)
                  (i.- ..last-era-day days)
                  days)
                (i./ (.int ..days-per-era)))
        day-of-era (i.- (i.* (.int ..days-per-era) era) days)
        year-of-era (|> day-of-era
                        (i.- (i./ ..last-era-leap-day day-of-era))
                        (i.+ (i./ (.int ..days-per-century) day-of-era))
                        (i.- (i./ ..last-era-day day-of-era))
                        (i./ (.int //year.days)))
        year (i.+ (i.* (.int //year.era) era)
                  year-of-era)
        day-of-year (|> day-of-era
                        (i.- (i.* (.int //year.days) year-of-era))
                        (i.- (i./ (.int //year.leap) year-of-era))
                        (i.+ (i./ (.int //year.century) year-of-era)))
        month (..month-from-day-of-year day-of-year)
        day (|> day-of-year
                (i.- (..day-of-year-from-month month))
                (i.+ +1)
                .nat)
        year (if (n.< ..first-month-of-civil-year month)
               (inc year)
               year)]
    ## Coercing, because the year is already in internal form.
    (try.assume (..date (:coerce Year year)
                        (maybe.assume (dictionary.get month ..month-by-number))
                        day))))

(structure: #export enum
  (Enum Date)

  (def: &order ..order)

  (def: succ
    (|>> ..days inc ..from-days))

  (def: pred
    (|>> ..days dec ..from-days)))
