(.module:
  [lux #*
   [data
    [number
     ["n" nat]
     ["i" int]]]])

(type: #export Year
  Int)

(def: #export epoch
  Year
  +1970)

(type: #export Period
  Nat)

(template [<period> <name>]
  [(def: #export <name>
     Period
     <period>)]

  [004 leap]
  [100 century]
  [400 era]
  )

(def: (divisible? factor input)
  (-> Int Int Bit)
  (|> input (i.% factor) (i.= +0)))

## https://en.wikipedia.org/wiki/Leap_year#Algorithm
(def: #export (leap? year)
  (-> Year Bit)
  (and (..divisible? (.int ..leap) year)
       (or (not (..divisible? (.int ..century) year))
           (..divisible? (.int ..era) year))))

(def: (with-year-0-leap year days)
  (let [after-year-0? (i.> +0 year)]
    (if after-year-0?
      (i.+ +1 days)
      days)))

(def: #export (leaps year)
  (-> Year Int)
  (let [limit (if (i.> +0 year)
                (dec year)
                (inc year))]
    (`` (|> +0
            (~~ (template [<polarity> <years>]
                  [(<polarity> (i./ (.int <years>) limit))]

                  [i.+ ..leap]
                  [i.- ..century]
                  [i.+ ..era]
                  ))
            (..with-year-0-leap year)))))

(def: days-per-normal-year
  365)

(def: #export (days year)
  (-> Year Int)
  (|> year
      (i.* (.int ..days-per-normal-year))
      (i.+ (..leaps year))))
