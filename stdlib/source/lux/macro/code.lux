(.module:
  [lux (#- nat int rev)
   [abstract
    ["." equivalence (#+ Equivalence)]]
   [data
    ["." bit]
    ["." name]
    [number
     ["." nat]
     ["." int]
     ["." rev]
     ["." frac]]
    ["." text ("#@." monoid)]
    [collection
     ["." list ("#@." functor)]]]])

## (type: (Code' w)
##   (#.Bit Bit)
##   (#.Nat Nat)
##   (#.Int Int)
##   (#.Frac Frac)
##   (#.Text Text)
##   (#.Identifier Name)
##   (#.Tag Name)
##   (#.Form (List (w (Code' w))))
##   (#.Tuple (List (w (Code' w))))
##   (#.Record (List [(w (Code' w)) (w (Code' w))])))

## (type: Code
##   (Ann Cursor (Code' (Ann Cursor))))

(def: _cursor Cursor ["" 0 0])

(template [<name> <type> <tag>]
  [(def: #export (<name> x)
     (-> <type> Code)
     [_cursor (<tag> x)])]
  
  [bit        Bit                #.Bit]
  [nat        Nat                #.Nat]
  [int        Int                #.Int]
  [rev        Rev                #.Rev]
  [frac       Frac               #.Frac]
  [text       Text               #.Text]
  [identifier Name               #.Identifier]
  [tag        Name               #.Tag]
  [form       (List Code)        #.Form]
  [tuple      (List Code)        #.Tuple]
  [record     (List [Code Code]) #.Record]
  )

(template [<name> <tag> <doc>]
  [(def: #export (<name> name)
     {#.doc <doc>}
     (-> Text Code)
     [_cursor (<tag> ["" name])])]

  [local-identifier #.Identifier "Produces a local identifier (an identifier with no module prefix)."]
  [local-tag        #.Tag        "Produces a local tag (a tag with no module prefix)."])

(structure: #export equivalence (Equivalence Code)
  (def: (= x y)
    (case [x y]
      (^template [<tag> <eq>]
        [[_ (<tag> x')] [_ (<tag> y')]]
        (:: <eq> = x' y'))
      ([#.Bit        bit.equivalence]
       [#.Nat        nat.equivalence]
       [#.Int        int.equivalence]
       [#.Rev        rev.equivalence]
       [#.Frac       frac.equivalence]
       [#.Text       text.equivalence]
       [#.Identifier name.equivalence]
       [#.Tag        name.equivalence])

      (^template [<tag>]
        [[_ (<tag> xs')] [_ (<tag> ys')]]
        (:: (list.equivalence =) = xs' ys'))
      ([#.Form]
       [#.Tuple])

      [[_ (#.Record xs')] [_ (#.Record ys')]]
      (:: (list.equivalence (equivalence.product = =))
          = xs' ys')
      
      _
      #0)))

(def: #export (to-text ast)
  (-> Code Text)
  (case ast
    (^template [<tag> <struct>]
      [_ (<tag> value)]
      (:: <struct> encode value))
    ([#.Bit        bit.codec]
     [#.Nat        nat.decimal]
     [#.Int        int.decimal]
     [#.Rev        rev.decimal]
     [#.Frac       frac.decimal]
     [#.Identifier name.codec])

    [_ (#.Text value)]
    (text.encode value)

    [_ (#.Tag name)]
    (text@compose  "#" (:: name.codec encode name))

    (^template [<tag> <open> <close>]
      [_ (<tag> members)]
      ($_ text@compose
          <open>
          (|> members
              (list@map to-text)
              (list.interpose " ")
              (text.join-with ""))
          <close>))
    ([#.Form  "(" ")"]
     [#.Tuple "[" "]"])

    [_ (#.Record pairs)]
    ($_ text@compose
        "{"
        (|> pairs
            (list@map (function (_ [left right])
                        ($_ text@compose (to-text left) " " (to-text right))))
            (list.interpose " ")
            (text.join-with ""))
        "}")
    ))

(def: #export (replace original substitute ast)
  {#.doc "Replaces all code that looks like the 'original' with the 'substitute'."}
  (-> Code Code Code Code)
  (if (:: ..equivalence = original ast)
    substitute
    (case ast
      (^template [<tag>]
        [cursor (<tag> parts)]
        [cursor (<tag> (list@map (replace original substitute) parts))])
      ([#.Form]
       [#.Tuple])

      [cursor (#.Record parts)]
      [cursor (#.Record (list@map (function (_ [left right])
                                    [(replace original substitute left)
                                     (replace original substitute right)])
                                  parts))]

      _
      ast)))
