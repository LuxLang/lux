(.module:
  [lux #- nat int rev]
  (lux (control [equivalence #+ Equivalence])
       (data bool
             number
             [text #+ Equivalence<Text> "text/" Monoid<Text>]
             ident
             (coll [list #* "" Functor<List> Fold<List>])
             )))

## [Types]
## (type: (Code' w)
##   (#.Bool Bool)
##   (#.Nat Nat)
##   (#.Int Int)
##   (#.Frac Frac)
##   (#.Text Text)
##   (#.Symbol Text Text)
##   (#.Tag Text Text)
##   (#.Form (List (w (Code' w))))
##   (#.Tuple (List (w (Code' w))))
##   (#.Record (List [(w (Code' w)) (w (Code' w))])))

## (type: Code
##   (Ann Cursor (Code' (Ann Cursor))))

## [Utils]
(def: _cursor Cursor ["" +0 +0])

## [Functions]
(do-template [<name> <type> <tag>]
  [(def: #export (<name> x)
     (-> <type> Code)
     [_cursor (<tag> x)])]
  
  [bool   Bool              #.Bool]
  [nat    Nat               #.Nat]
  [int    Int               #.Int]
  [rev    Rev               #.Rev]
  [frac   Frac              #.Frac]
  [text   Text              #.Text]
  [symbol Ident             #.Symbol]
  [tag    Ident             #.Tag]
  [form   (List Code)       #.Form]
  [tuple  (List Code)       #.Tuple]
  [record (List [Code Code]) #.Record]
  )

(do-template [<name> <tag> <doc>]
  [(def: #export (<name> name)
     {#.doc <doc>}
     (-> Text Code)
     [_cursor (<tag> ["" name])])]

  [local-symbol #.Symbol "Produces a local symbol (a symbol with no module prefix)."]
  [local-tag    #.Tag    "Produces a local tag (a tag with no module prefix)."])

## [Structures]
(structure: #export _ (Equivalence Code)
  (def: (= x y)
    (case [x y]
      (^template [<tag> <eq>]
        [[_ (<tag> x')] [_ (<tag> y')]]
        (:: <eq> = x' y'))
      ([#.Bool   Equivalence<Bool>]
       [#.Nat    Equivalence<Nat>]
       [#.Int    Equivalence<Int>]
       [#.Rev    Equivalence<Rev>]
       [#.Frac   Equivalence<Frac>]
       [#.Text   Equivalence<Text>]
       [#.Symbol Equivalence<Ident>]
       [#.Tag    Equivalence<Ident>])

      (^template [<tag>]
        [[_ (<tag> xs')] [_ (<tag> ys')]]
        (and (:: Equivalence<Nat> = (size xs') (size ys'))
             (fold (function (_ [x' y'] old)
                     (and old (= x' y')))
                   true
                   (zip2 xs' ys'))))
      ([#.Form]
       [#.Tuple])

      [[_ (#.Record xs')] [_ (#.Record ys')]]
      (and (:: Equivalence<Nat> = (size xs') (size ys'))
           (fold (function (_ [[xl' xr'] [yl' yr']] old)
                   (and old (= xl' yl') (= xr' yr')))
                 true
                 (zip2 xs' ys')))
      
      _
      false)))

## [Values]
(def: #export (to-text ast)
  (-> Code Text)
  (case ast
    (^template [<tag> <struct>]
      [_ (<tag> value)]
      (:: <struct> encode value))
    ([#.Bool   Codec<Text,Bool>]
     [#.Nat    Codec<Text,Nat>]
     [#.Int    Codec<Text,Int>]
     [#.Rev    Codec<Text,Rev>]
     [#.Frac   Codec<Text,Frac>]
     [#.Symbol Codec<Text,Ident>])

    [_ (#.Text value)]
    (text.encode value)

    [_ (#.Tag ident)]
    (text/compose  "#" (:: Codec<Text,Ident> encode ident))

    (^template [<tag> <open> <close>]
      [_ (<tag> members)]
      ($_ text/compose <open> (|> members (map to-text) (interpose " ") (text.join-with "")) <close>))
    ([#.Form  "(" ")"]
     [#.Tuple "[" "]"])

    [_ (#.Record pairs)]
    ($_ text/compose "{" (|> pairs (map (function (_ [left right]) ($_ text/compose (to-text left) " " (to-text right)))) (interpose " ") (text.join-with "")) "}")
    ))

(def: #export (replace original substitute ast)
  {#.doc "Replaces all code that looks like the 'original' with the 'substitute'."}
  (-> Code Code Code Code)
  (if (:: Equivalence<Code> = original ast)
    substitute
    (case ast
      (^template [<tag>]
        [cursor (<tag> parts)]
        [cursor (<tag> (map (replace original substitute) parts))])
      ([#.Form]
       [#.Tuple])

      [cursor (#.Record parts)]
      [cursor (#.Record (map (function (_ [left right])
                               [(replace original substitute left)
                                (replace original substitute right)])
                             parts))]

      _
      ast)))
