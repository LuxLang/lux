(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]]
   [control
    ["." function]
    ["<>" parser
     ["<.>" code (#+ Parser)]]]
   [data
    ["." product]
    ["." name]
    [collection
     ["." list ("#\." functor)]]]
   [macro
    ["." code]]])

(type: #export Annotations
  (List [Name Code]))

(def: #export equivalence
  (Equivalence Annotations)
  (list.equivalence
   (product.equivalence name.equivalence
                        code.equivalence)))

(def: #export empty
  Annotations
  (list))

(def: #export write
  (-> Annotations Code)
  (let [entry (product.both code.tag function.identity)]
    (|>> (list\map entry)
         code.record)))

(def: #export parser
  (Parser Annotations)
  (<code>.record
   (<>.some
    (<>.and <code>.tag
            <code>.any))))
