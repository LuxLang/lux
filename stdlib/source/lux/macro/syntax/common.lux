##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module: {#;doc "Commons syntax parsers and generators.

                  The goal is to be able to reuse common syntax in macro definitions across libraries."}
  lux
  (lux (control monad)
       (data (struct [list])
             text/format
             [ident "Ident/" Eq<Ident>]
             [product])
       [compiler]
       (macro [ast]
              ["s" syntax #+ syntax: Syntax])))

## Exports
(type: #export Export-Level
  #Exported
  #Hidden)

(def: #export export-level
  {#;doc (doc "A parser for export levels."
              "Such as:"
              #export
              #hidden)}
  (Syntax (Maybe Export-Level))
  (s;opt (s;alt (s;sample! (' #export))
                (s;sample! (' #hidden)))))

(def: #export (gen-export-level ?el)
  (-> (Maybe Export-Level) (List AST))
  (case ?el
    #;None
    (list)

    (#;Some #Exported)
    (list (' #export))

    (#;Some #Hidden)
    (list (' #hidden))))

## Declarations
(type: #export Decl
  {#decl-name Text
   #decl-args (List Text)})

(def: #export decl
  {#;doc (doc "A parser for declaration syntax."
              "Such as:"
              quux
              (foo bar baz))}
  (Syntax Decl)
  (s;either (s;seq s;local-symbol
                   (:: s;Monad<Syntax> wrap (list)))
            (s;form (s;seq s;local-symbol
                           (s;many s;local-symbol)))))

## Definitions
(type: #export Def-Syntax
  {#def-name Text
   #def-type (Maybe AST)
   #def-value AST
   #def-anns (List [Ident AST])
   #def-args (List Text)
   })

(def: check^
  (Syntax [(Maybe AST) AST])
  (s;either (s;form (do s;Monad<Syntax>
                      [_ (s;sample! (' lux;_lux_:))
                       type s;any
                       value s;any]
                      (wrap [(#;Some type) value])))
            (s;seq (:: s;Monad<Syntax> wrap #;None)
                   s;any)))

(def: _def-anns-tag^
  (Syntax Ident)
  (s;tuple (s;seq s;text s;text)))

(def: (_def-anns^ _)
  (-> Top (Syntax (List [Ident AST])))
  (s;alt (s;sample! (' #lux;Nil))
         (s;form (do s;Monad<Syntax>
                   [_ (s;sample! (' #lux;Cons))
                    [head tail] (s;seq (s;tuple (s;seq _def-anns-tag^ s;any))
                                       (_def-anns^ []))]
                   (wrap [head tail])))
         ))

(def: (flat-list^ _)
  (-> Top (Syntax (List AST)))
  (s;either (do s;Monad<Syntax>
              [_ (s;sample! (' #lux;Nil))]
              (wrap (list)))
            (s;form (do s;Monad<Syntax>
                      [_ (s;sample! (' #lux;Cons))
                       [head tail] (s;tuple (s;seq s;any s;any))
                       tail (s;local (list tail) (flat-list^ []))]
                      (wrap (#;Cons head tail))))))

(def: list-meta^
  (Syntax (List AST))
  (s;form (do s;Monad<Syntax>
            [_ (s;sample! (' #lux;ListA))]
            (flat-list^ []))))

(def: text-meta^
  (Syntax Text)
  (s;form (do s;Monad<Syntax>
            [_ (s;sample! (' #lux;TextA))]
            s;text)))

(def: (find-def-args meta-data)
  (-> (List [Ident AST]) (List Text))
  (default (list)
    (case (list;find (|>. product;left (Ident/= ["lux" "func-args"])) meta-data)
      (^=> (#;Some [_ value])
           [(s;run (list value) list-meta^)
            (#;Right [_ args])]
           [(s;run args (s;some text-meta^))
            (#;Right [_ args])])
      (#;Some args)

      _
      #;None)
    ))

(def: #export (def compiler)
  {#;doc "A parser that first macro-expands and then analyses the input AST, to ensure it's a definition."}
  (-> Compiler (Syntax Def-Syntax))
  (do s;Monad<Syntax>
    [def-raw s;any
     me-def-raw (s;on compiler
                      (compiler;macro-expand-all def-raw))]
    (s;local me-def-raw
             (s;form (do @
                       [_ (s;sample! (' lux;_lux_def))
                        def-name s;local-symbol
                        [?def-type def-value] check^
                        def-anns s;any
                        def-anns (s;local (list def-anns)
                                          (_def-anns^ []))
                        #let [def-args (find-def-args def-anns)]]
                       (wrap {#def-name def-name
                              #def-type ?def-type
                              #def-anns def-anns
                              #def-value def-value
                              #def-args def-args}))))))

(def: #export (typed-def compiler)
  {#;doc "A parser for definitions that ensures the input syntax is typed."}
  (-> Compiler (Syntax Def-Syntax))
  (do s;Monad<Syntax>
    [_def (def compiler)
     _ (case (get@ #def-type _def)
         (#;Some _)
         (wrap [])

         #;None
         (s;fail "Typed def must have a type!")
         )]
    (wrap _def)))

(def: #export def-anns
  {#;doc "Parser for the common annotations syntax used by def: statements."}
  (Syntax (List [Ident AST]))
  (s;record (s;some (s;seq s;tag s;any))))

(def: #export typed-arg
  {#;doc "Parser for the common typed-argument syntax used by many macros."}
  (Syntax [Text AST])
  (s;tuple (s;seq s;local-symbol s;any)))

(def: #export type-params
  {#;doc "Parser for the common type var/param used by many macros."}
  (Syntax (List Text))
  (s;tuple (s;some s;local-symbol)))
