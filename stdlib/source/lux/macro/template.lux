(.module:
  [lux #*
   [control
    ["." monad (#+ do)]
    ["p" parser]]
   [data
    [collection
     ["." list ("#/." monad)]]]]
  ["." //
   ["." code]
   ["s" syntax (#+ syntax:)]])

(syntax: #export (splice {parts (s.tuple (p.some s.any))})
  (wrap parts))

(syntax: #export (with-locals {locals (s.tuple (p.some s.local-identifier))}
                   body)
  (do @
    [g!locals (|> (//.gensym "local")
                  (list.repeat (list.size locals))
                  (monad.seq @))]
    (wrap (list (` (.with-expansions [(~+ (|> (list.zip2 locals g!locals)
                                              (list/map (function (_ [name identifier])
                                                          (list (code.local-identifier name) (as-is identifier))))
                                              list/join))]
                     (~ body)))))))
