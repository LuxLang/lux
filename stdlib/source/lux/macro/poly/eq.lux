##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (control monad
                [eq])
       (data [text]
             text/format
             (struct [list "List/" Monad<List>]
                     [dict #+ Dict])
             [number]
             [product]
             [bool]
             [char]
             [maybe])
       [compiler #+ Monad<Lux> with-gensyms]
       (macro [ast]
              [syntax #+ syntax: Syntax]
              (syntax [common])
              [poly #+ poly:])
       [type]
       ))

## [Utils]
(def: (function$ func inputs output)
  (-> AST (List AST) AST AST)
  (case inputs
    #;Nil
    output

    _
    (` (lambda (~@ (if (list;empty? inputs) (list) (list func)))
         [(~@ inputs)]
         (~ output)))))

## [Derivers]
(poly: #export (Eq<?> env :x:)
  (let [->Eq (: (-> AST AST)
                (lambda [.type.] (` (eq;Eq (~ .type.)))))]
    (let% [<basic> (do-template [<type> <matcher> <eq>]
                     [(do @
                        [_ (<matcher> :x:)]
                        (wrap (` (: (~ (->Eq (` <type>)))
                                    <eq>))))]

                     [Unit poly;unit (lambda [(~' test) (~' input)] true)]
                     [Bool poly;bool bool;Eq<Bool>]
                     [Nat  poly;nat  number;Eq<Nat>]
                     [Int  poly;int  number;Eq<Int>]
                     [Frac poly;frac number;Eq<Frac>]
                     [Real poly;real number;Eq<Real>]
                     [Char poly;char char;Eq<Char>]
                     [Text poly;text text;Eq<Text>])]
      ($_ compiler;either
          ## Primitive types
          <basic>
          ## Variants
          (with-gensyms [g!type-fun g!left g!right]
            (do @
              [[g!vars cases] (poly;variant :x:)
               #let [new-env (poly;extend-env g!type-fun g!vars env)]
               pattern-matching (mapM @
                                      (lambda [[name :case:]]
                                        (do @
                                          [g!eq (Eq<?> new-env :case:)]
                                          (wrap (list (` [((~ (ast;tag name)) (~ g!left))
                                                          ((~ (ast;tag name)) (~ g!right))])
                                                      (` ((~ g!eq) (~ g!left) (~ g!right)))))))
                                      cases)
               #let [base (function$ g!type-fun g!vars
                                     (` (lambda [(~ g!left) (~ g!right)]
                                          (case [(~ g!left) (~ g!right)]
                                            (~@ (List/join pattern-matching))))))]]
              (wrap (if (and false (poly;contains-bound-types? :x:))
                      base
                      (` (: (~ (poly;gen-type ->Eq g!type-fun g!vars :x:))
                            (~ base)))))))
          ## Tuples
          (with-gensyms [g!type-fun]
            (do @
              [[g!vars members] (poly;tuple :x:)
               #let [new-env (poly;extend-env g!type-fun g!vars env)]
               pattern-matching (mapM @
                                      (lambda [:member:]
                                        (do @
                                          [g!left (compiler;gensym "g!left")
                                           g!right (compiler;gensym "g!right")
                                           g!eq (Eq<?> new-env :member:)]
                                          (wrap [g!left g!right g!eq])))
                                      members)
               #let [.left. (` [(~@ (List/map product;left pattern-matching))])
                     .right. (` [(~@ (List/map (|>. product;right product;left) pattern-matching))])
                     base (function$ g!type-fun g!vars
                                     (` (lambda [(~ .left.) (~ .right.)]
                                          (and (~@ (List/map (lambda [[g!left g!right g!eq]]
                                                               (` ((~ g!eq) (~ g!left) (~ g!right))))
                                                             pattern-matching))))))]]
              (wrap (if (and false (poly;contains-bound-types? :x:))
                      base
                      (` (: (~ (poly;gen-type ->Eq g!type-fun g!vars :x:))
                            (~ base)))))))
          ## Type recursion
          (poly;recur env :x:)
          ## Type applications
          (do @
            [[:func: :args:] (poly;apply :x:)
             .func. (Eq<?> env :func:)
             .args. (mapM @ (Eq<?> env) :args:)]
            (wrap (` (: (~ (->Eq (type;to-ast :x:)))
                        ((~ .func.) (~@ .args.))))))
          ## Bound type-vars
          (poly;bound env :x:)
          ## If all else fails...
          (compiler;fail (format "Can't create Eq for: " (%type :x:)))
          ))))
