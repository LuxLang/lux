(.module: {#.doc "Codecs for values in the JSON format."}
  [lux #*
   [control
    [monad (#+ Monad do)]
    [equivalence (#+ Equivalence)]
    codec
    ["p" parser]]
   [data
    ["." bit]
    maybe
    ["e" error]
    ["." sum]
    ["." product]
    [number
     ["." i64]
     ["." nat ("#/." codec)]
     ["." frac ("#/." codec)]]
    ["." text ("#/." equivalence)
     ["l" lexer]
     format]
    [format
     ["/" json (#+ JSON)]]
    [collection
     ["." list ("#/." fold monad)]
     ["." row (#+ Row row) ("#/." monad)]
     ["d" dictionary]]]
   [time
    ## ["i" instant]
    ## ["du" duration]
    ["da" date]]
   [macro (#+ with-gensyms)
    ["s" syntax (#+ syntax:)]
    ["." code]
    ["." poly (#+ poly:)]]
   ["." type
    ["." unit]]])

(def: tag
  (-> Nat Frac)
  (|>> .int int-to-frac))

(def: (rec-encode non-rec)
  (All [a] (-> (-> (-> a JSON)
                   (-> a JSON))
               (-> a JSON)))
  (function (_ input)
    (non-rec (rec-encode non-rec) input)))

(def: low-mask Nat (|> 1 (i64.left-shift 32) dec))
(def: high-mask Nat (|> low-mask (i64.left-shift 32)))

(structure: nat-codec (Codec JSON Nat)
  (def: (encode input)
    (let [high (|> input (i64.and high-mask) (i64.logical-right-shift 32))
          low (i64.and low-mask input)]
      (#/.Array (row (|> high .int int-to-frac #/.Number)
                     (|> low .int int-to-frac #/.Number)))))
  (def: (decode input)
    (<| (/.run input)
        /.array
        (do p.monad
          [high /.number
           low /.number])
        (wrap (n/+ (|> high frac-to-int .nat (i64.left-shift 32))
                   (|> low frac-to-int .nat))))))

(structure: int-codec (Codec JSON Int)
  (def: encode (|>> .nat (:: nat-codec encode)))
  (def: decode
    (|>> (:: nat-codec decode) (:: e.functor map .int))))

(def: (nullable writer)
  {#.doc "Builds a JSON generator for potentially inexistent values."}
  (All [a] (-> (-> a JSON) (-> (Maybe a) JSON)))
  (function (_ elem)
    (case elem
      #.None         #/.Null
      (#.Some value) (writer value))))

(structure: qty-codec
  (All [unit] (Codec JSON (unit.Qty unit)))
  
  (def: encode
    (|>> unit.out (:: ..int-codec encode)))
  (def: decode
    (|>> (:: ..int-codec decode) (:: e.functor map unit.in))))

(poly: codec//encode
  (with-expansions
    [<basic> (do-template [<matcher> <encoder>]
               [(do @
                  [#let [g!_ (code.local-identifier "_______")]
                   _ <matcher>]
                  (wrap (` (: (~ (@JSON//encode inputT))
                              <encoder>))))]

               [(poly.exactly Any) (function ((~ g!_) (~ (code.identifier ["" "0"]))) #/.Null)]
               [(poly.sub Bit)     (|>> #/.Boolean)]
               [(poly.sub Nat)     (:: (~! ..nat-codec) (~' encode))]
               [(poly.sub Int)     (:: (~! ..int-codec) (~' encode))]
               [(poly.sub Frac)    (|>> #/.Number)]
               [(poly.sub Text)    (|>> #/.String)])
     <time> (do-template [<type> <codec>]
              [(do @
                 [_ (poly.exactly <type>)]
                 (wrap (` (: (~ (@JSON//encode inputT))
                             (|>> (:: <codec> (~' encode)) #/.String)))))]

              ## [du.Duration du.codec]
              ## [i.Instant   i.codec]
              [da.Date     da.date-codec]
              [da.Day      da.day-codec]
              [da.Month    da.month-codec])]
    (do @
      [*env* poly.env
       #let [@JSON//encode (: (-> Type Code)
                              (function (_ type)
                                (` (-> (~ (poly.to-code *env* type)) /.JSON))))]
       inputT poly.peek]
      ($_ p.either
          <basic>
          <time>
          (do @
            [unitT (poly.apply (p.after (poly.exactly unit.Qty)
                                        poly.any))]
            (wrap (` (: (~ (@JSON//encode inputT))
                        (:: (~! qty-codec) (~' encode))))))
          (do @
            [#let [g!_ (code.local-identifier "_______")
                   g!key (code.local-identifier "_______key")
                   g!val (code.local-identifier "_______val")]
             [_ _ =val=] (poly.apply ($_ p.and
                                         (poly.exactly d.Dictionary)
                                         (poly.exactly .Text)
                                         codec//encode))]
            (wrap (` (: (~ (@JSON//encode inputT))
                        (|>> d.entries
                             ((~! list/map) (function ((~ g!_) [(~ g!key) (~ g!val)])
                                              [(~ g!key) ((~ =val=) (~ g!val))]))
                             (d.from-list text.hash)
                             #/.Object)))))
          (do @
            [[_ =sub=] (poly.apply ($_ p.and
                                       (poly.exactly .Maybe)
                                       codec//encode))]
            (wrap (` (: (~ (@JSON//encode inputT))
                        ((~! ..nullable) (~ =sub=))))))
          (do @
            [[_ =sub=] (poly.apply ($_ p.and
                                       (poly.exactly .List)
                                       codec//encode))]
            (wrap (` (: (~ (@JSON//encode inputT))
                        (|>> ((~! list/map) (~ =sub=)) row.from-list #/.Array)))))
          (do @
            [#let [g!_ (code.local-identifier "_______")
                   g!input (code.local-identifier "_______input")]
             members (poly.variant (p.many codec//encode))]
            (wrap (` (: (~ (@JSON//encode inputT))
                        (function ((~ g!_) (~ g!input))
                          (case (~ g!input)
                            (~+ (list/join (list/map (function (_ [tag g!encode])
                                                       (list (` ((~ (code.nat tag)) (~ g!input)))
                                                             (` (/.json [(~ (code.frac (..tag tag)))
                                                                         ((~ g!encode) (~ g!input))]))))
                                                     (list.enumerate members))))))))))
          (do @
            [g!encoders (poly.tuple (p.many codec//encode))
             #let [g!_ (code.local-identifier "_______")
                   g!members (|> (list.size g!encoders)
                                 list.indices
                                 (list/map (|>> nat/encode code.local-identifier)))]]
            (wrap (` (: (~ (@JSON//encode inputT))
                        (function ((~ g!_) [(~+ g!members)])
                          (/.json [(~+ (list/map (function (_ [g!member g!encode])
                                                   (` ((~ g!encode) (~ g!member))))
                                                 (list.zip2 g!members g!encoders)))]))))))
          ## Type recursion
          (do @
            [[selfC non-recC] (poly.recursive codec//encode)
             #let [g! (code.local-identifier "____________")]]
            (wrap (` (: (~ (@JSON//encode inputT))
                        ((~! ..rec-encode) (.function ((~ g!) (~ selfC))
                                             (~ non-recC)))))))
          poly.recursive-self
          ## Type applications
          (do @
            [partsC (poly.apply (p.many codec//encode))]
            (wrap (` ((~+ partsC)))))
          ## Polymorphism
          (do @
            [[funcC varsC bodyC] (poly.polymorphic codec//encode)]
            (wrap (` (: (All [(~+ varsC)]
                          (-> (~+ (list/map (function (_ varC) (` (->  (~ varC) /.JSON)))
                                            varsC))
                              (-> ((~ (poly.to-code *env* inputT)) (~+ varsC))
                                  /.JSON)))
                        (function ((~ funcC) (~+ varsC))
                          (~ bodyC))))))
          poly.parameter
          poly.recursive-call
          ## If all else fails...
          (p.fail (format "Cannot create JSON encoder for: " (type.to-text inputT)))
          ))))

(poly: codec//decode
  (with-expansions
    [<basic> (do-template [<matcher> <decoder>]
               [(do @
                  [_ <matcher>]
                  (wrap (` (: (~ (@JSON//decode inputT))
                              <decoder>))))]

               [(poly.exactly Any)  /.null]
               [(poly.sub Bit)      /.boolean]
               [(poly.sub Nat)      (p.codec (~! ..nat-codec) /.any)]
               [(poly.sub Int)      (p.codec (~! ..int-codec) /.any)]
               [(poly.sub Frac)     /.number]
               [(poly.sub Text)     /.string])
     <time> (do-template [<type> <codec>]
              [(do @
                 [_ (poly.exactly <type>)]
                 (wrap (` (: (~ (@JSON//decode inputT))
                             (p.codec <codec> /.string)))))]

              ## [du.Duration du.codec]
              ## [i.Instant   i.codec]
              [da.Date     da.date-codec]
              [da.Day      da.day-codec]
              [da.Month    da.month-codec])]
    (do @
      [*env* poly.env
       #let [@JSON//decode (: (-> Type Code)
                              (function (_ type)
                                (` (/.Reader (~ (poly.to-code *env* type))))))]
       inputT poly.peek]
      ($_ p.either
          <basic>
          <time>
          (do @
            [unitT (poly.apply (p.after (poly.exactly unit.Qty)
                                        poly.any))]
            (wrap (` (: (~ (@JSON//decode inputT))
                        (p.codec (~! qty-codec) /.any)))))
          (do @
            [[_ _ valC] (poly.apply ($_ p.and
                                        (poly.exactly d.Dictionary)
                                        (poly.exactly .Text)
                                        codec//decode))]
            (wrap (` (: (~ (@JSON//decode inputT))
                        (/.object (~ valC))))))
          (do @
            [[_ subC] (poly.apply (p.and (poly.exactly .Maybe)
                                         codec//decode))]
            (wrap (` (: (~ (@JSON//decode inputT))
                        (/.nullable (~ subC))))))
          (do @
            [[_ subC] (poly.apply (p.and (poly.exactly .List)
                                         codec//decode))]
            (wrap (` (: (~ (@JSON//decode inputT))
                        (/.array (p.some (~ subC)))))))
          (do @
            [members (poly.variant (p.many codec//decode))]
            (wrap (` (: (~ (@JSON//decode inputT))
                        ($_ p.or
                            (~+ (list/map (function (_ [tag memberC])
                                            (` (|> (~ memberC)
                                                   (p.after (/.number! (~ (code.frac (..tag tag)))))
                                                   /.array)))
                                          (list.enumerate members))))))))
          (do @
            [g!decoders (poly.tuple (p.many codec//decode))]
            (wrap (` (: (~ (@JSON//decode inputT))
                        (/.array ($_ p.and (~+ g!decoders)))))))
          ## Type recursion
          (do @
            [[selfC bodyC] (poly.recursive codec//decode)
             #let [g! (code.local-identifier "____________")]]
            (wrap (` (: (~ (@JSON//decode inputT))
                        (p.rec (.function ((~ g!) (~ selfC))
                                 (~ bodyC)))))))
          poly.recursive-self
          ## Type applications
          (do @
            [[funcC argsC] (poly.apply (p.and codec//decode (p.many codec//decode)))]
            (wrap (` ((~ funcC) (~+ argsC)))))
          ## Polymorphism
          (do @
            [[funcC varsC bodyC] (poly.polymorphic codec//decode)]
            (wrap (` (: (All [(~+ varsC)]
                          (-> (~+ (list/map (|>> (~) /.Reader (`)) varsC))
                              (/.Reader ((~ (poly.to-code *env* inputT)) (~+ varsC)))))
                        (function ((~ funcC) (~+ varsC))
                          (~ bodyC))))))
          poly.parameter
          poly.recursive-call
          ## If all else fails...
          (p.fail (format "Cannot create JSON decoder for: " (type.to-text inputT)))
          ))))

(syntax: #export (codec inputT)
  {#.doc (doc "A macro for automatically producing JSON codecs."
              (type: Variant
                (#Case0 Bit)
                (#Case1 Text)
                (#Case2 Frac))

              (type: Record
                {#bit Bit
                 #frac Frac
                 #text Text
                 #maybe (Maybe Frac)
                 #list (List Frac)
                 #variant Variant
                 #tuple [Bit Frac Text]
                 #dict (Dictionary Text Frac)})

              (derived: (..codec Record)))}
  (with-gensyms [g!inputs]
    (wrap (list (` (: (Codec /.JSON (~ inputT))
                      (structure (def: (~' encode) ((~! ..codec) (~ inputT)))
                                 (def: ((~' decode) (~ g!inputs)) (/.run (~ g!inputs) ((~! ..codec) (~ inputT))))
                                 )))))))
