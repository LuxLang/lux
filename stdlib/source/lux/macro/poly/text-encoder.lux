(;module:
  lux
  (lux (control monad
                [codec])
       (data [text]
             text/format
             (coll [list "List/" Monad<List>]
                   [dict #+ Dict])
             [number]
             [product]
             [bool]
             [char]
             [maybe]
             [ident "Ident/" Codec<Text,Ident>]
             error)
       [macro #+ Monad<Lux> with-gensyms]
       (macro [ast]
              [syntax #+ syntax: Syntax]
              (syntax [common])
              [poly #+ poly:])
       [type]
       ))

(def: (function$ func inputs output)
  (-> AST (List AST) AST AST)
  (case inputs
    #;Nil
    output

    _
    (` (function (~@ (if (list;empty? inputs) (list) (list func)))
         [(~@ inputs)]
         (~ output)))))

## [Derivers]
(poly: #export (Codec<Text,?>::encode env :x:)
  (let [->Codec::encode (: (-> AST AST)
                           (function [.type.] (` (-> (~ .type.) Text))))]
    (let% [<basic> (do-template [<type> <matcher> <encoder>]
                     [(do @
                        [_ (<matcher> :x:)]
                        (wrap (` (: (~ (->Codec::encode (` <type>)))
                                    (~' <encoder>)))))]

                     [Unit poly;unit (function [_0] "[]")]
                     [Bool poly;bool (:: bool;Codec<Text,Bool> encode)]
                     [Nat  poly;nat  (:: number;Codec<Text,Nat> encode)]
                     [Int  poly;int  (:: number;Codec<Text,Int> encode)]
                     [Deg poly;deg (:: number;Codec<Text,Deg> encode)]
                     [Real poly;real (:: number;Codec<Text,Real> encode)]
                     [Char poly;char (:: char;Codec<Text,Char> encode)]
                     [Text poly;text (:: text;Codec<Text,Text> encode)])]
      ($_ macro;either
          ## Primitives
          <basic>
          ## Variants
          (with-gensyms [g!type-fun g!case g!input]
            (do @
              [[g!vars cases] (poly;variant :x:)
               #let [new-env (poly;extend-env [:x: g!type-fun]
                                              (list;zip2 (|> g!vars list;size poly;type-var-indices) g!vars)
                                              env)]
               pattern-matching (mapM @
                                      (function [[name :case:]]
                                        (do @
                                          [encoder (Codec<Text,?>::encode new-env :case:)]
                                          (wrap (list (` ((~ (ast;tag name)) (~ g!case)))
                                                      (` (format "(#"
                                                                 (~ (ast;text (Ident/encode name)))
                                                                 " "
                                                                 ((~ encoder) (~ g!case))
                                                                 ")"))))))
                                      cases)
               #let [base (function$ g!type-fun g!vars
                                     (` (function [(~ g!input)]
                                          (case (~ g!input)
                                            (~@ (List/join pattern-matching))))))]]
              (wrap (` (: (~ (poly;gen-type env ->Codec::encode g!type-fun g!vars :x:))
                          (~ base)
                          )))))
          ## Records
          (with-gensyms [g!type-fun g!case g!input]
            (do @
              [[g!vars slots] (poly;record :x:)
               #let [new-env (poly;extend-env [:x: g!type-fun]
                                              (list;zip2 (|> g!vars list;size poly;type-var-indices) g!vars)
                                              env)]
               synthesis (mapM @
                               (function [[name :slot:]]
                                 (do @
                                   [encoder (Codec<Text,?>::encode new-env :slot:)]
                                   (wrap (` (format "#"
                                                    (~ (ast;text (Ident/encode name)))
                                                    " "
                                                    ((~ encoder) (get@ (~ (ast;tag name)) (~ g!input))))))))
                               slots)
               #let [base (function$ g!type-fun g!vars
                                     (` (function [(~ g!input)]
                                          (format "{" (~@ (list;interpose (' " ") synthesis)) "}"))))]]
              (wrap (` (: (~ (poly;gen-type env ->Codec::encode g!type-fun g!vars :x:))
                          (~ base)
                          )))))
          ## Tuples
          (with-gensyms [g!type-fun g!case g!input]
            (do @
              [[g!vars members] (poly;tuple :x:)
               #let [new-env (poly;extend-env [:x: g!type-fun]
                                              (list;zip2 (|> g!vars list;size poly;type-var-indices) g!vars)
                                              env)]
               parts (mapM @
                           (function [:member:]
                             (do @
                               [g!member (macro;gensym "g!member")
                                encoder (Codec<Text,?>::encode new-env :member:)]
                               (wrap [g!member encoder])))
                           members)
               #let [analysis (` [(~@ (List/map product;left parts))])
                     synthesis (List/map (function [[g!member g!encoder]]
                                           (` ((~ g!encoder) (~ g!member))))
                                         parts)
                     base (function$ g!type-fun g!vars
                                     (` (function [(~ g!input)]
                                          (case (~ g!input)
                                            (~ analysis)
                                            (format "[" (~@ (list;interpose (' " ") synthesis)) "]")))))]]
              (wrap (` (: (~ (poly;gen-type env ->Codec::encode g!type-fun g!vars :x:))
                          (~ base)
                          )))))
          ## Type recursion
          (poly;recur env :x:)
          ## Type applications
          (do @
            [[:func: :args:] (poly;apply :x:)
             .func. (Codec<Text,?>::encode env :func:)
             .args. (mapM @ (Codec<Text,?>::encode env) :args:)]
            (wrap (` (: (~ (->Codec::encode (type;to-ast :x:)))
                        ((~ .func.) (~@ .args.))))))
          ## Bound type-variables
          (poly;bound env :x:)
          ## Failure...
          (macro;fail (format "Cannot create Text encoder for: " (%type :x:)))
          ))))
