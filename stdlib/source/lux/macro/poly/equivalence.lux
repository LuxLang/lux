(.module:
  [lux #*
   [control
    [monad (#+ do Monad)]
    ["eq" equivalence]
    ["p" parser]]
   [data
    ["." product]
    ["." bit]
    ["." maybe]
    ["." number ("nat/." Codec<Text,Nat>)]
    ["." text ("text/." Monoid<Text>)
     format]
    [collection
     ["." list ("list/." Monad<List>)]
     ["." row]
     ["." array]
     ["." queue]
     ["." set]
     ["dict" dictionary (#+ Dictionary)]
     [tree
      ["." rose]]]]
   [time
    ["du" duration]
    ["da" date]
    ["i" instant]]
   ["." macro
    ["." code]
    [syntax (#+ syntax: Syntax)
     ["." common]]
    ["." poly (#+ poly:)]]
   ["." type
    ["." unit]]])

## [Derivers]
(poly: #export Equivalence<?>
  (`` (do @
        [#let [g!_ (code.local-identifier "_____________")]
         *env* poly.env
         inputT poly.peek
         #let [@Equivalence (: (-> Type Code)
                               (function (_ type)
                                 (` (eq.Equivalence (~ (poly.to-code *env* type))))))]]
        ($_ p.either
            ## Basic types
            (~~ (do-template [<matcher> <eq>]
                  [(do @
                     [_ <matcher>]
                     (wrap (` (: (~ (@Equivalence inputT))
                                 <eq>))))]

                  [(poly.exactly Any) (function ((~ g!_) (~ g!_) (~ g!_)) #1)]
                  [(poly.sub Bit)     bit.Equivalence<Bit>]
                  [(poly.sub Nat)     number.Equivalence<Nat>]
                  [(poly.sub Int)     number.Equivalence<Int>]
                  [(poly.sub Rev)     number.Equivalence<Rev>]
                  [(poly.sub Frac)    number.Equivalence<Frac>]
                  [(poly.sub Text)    text.Equivalence<Text>]))
            ## Composite types
            (~~ (do-template [<name> <eq>]
                  [(do @
                     [[_ argC] (poly.apply (p.seq (poly.exactly <name>)
                                                  Equivalence<?>))]
                     (wrap (` (: (~ (@Equivalence inputT))
                                 (<eq> (~ argC))))))]

                  [.Maybe            maybe.Equivalence<Maybe>]
                  [.List             list.Equivalence<List>]
                  [row.Row row.Equivalence<Row>]
                  [.Array            array.Equivalence<Array>]
                  [queue.Queue       queue.Equivalence<Queue>]
                  [set.Set           set.Equivalence<Set>]
                  [rose.Tree         rose.Equivalence<Tree>]
                  ))
            (do @
              [[_ _ valC] (poly.apply ($_ p.seq
                                          (poly.exactly dict.Dictionary)
                                          poly.any
                                          Equivalence<?>))]
              (wrap (` (: (~ (@Equivalence inputT))
                          (dict.Equivalence<Dictionary> (~ valC))))))
            ## Models
            (~~ (do-template [<type> <eq>]
                  [(do @
                     [_ (poly.exactly <type>)]
                     (wrap (` (: (~ (@Equivalence inputT))
                                 <eq>))))]

                  [du.Duration du.Equivalence<Duration>]
                  [i.Instant   i.Equivalence<Instant>]
                  [da.Date     da.Equivalence<Date>]
                  [da.Day      da.Equivalence<Day>]
                  [da.Month    da.Equivalence<Month>]))
            (do @
              [_ (poly.apply (p.seq (poly.exactly unit.Qty)
                                    poly.any))]
              (wrap (` (: (~ (@Equivalence inputT))
                          unit.Equivalence<Qty>))))
            ## Variants
            (do @
              [members (poly.variant (p.many Equivalence<?>))
               #let [g!_ (code.local-identifier "_____________")
                     g!left (code.local-identifier "_____________left")
                     g!right (code.local-identifier "_____________right")]]
              (wrap (` (: (~ (@Equivalence inputT))
                          (function ((~ g!_) (~ g!left) (~ g!right))
                            (case [(~ g!left) (~ g!right)]
                              (~+ (list/join (list/map (function (_ [tag g!eq])
                                                         (list (` [((~ (code.nat tag)) (~ g!left))
                                                                   ((~ (code.nat tag)) (~ g!right))])
                                                               (` ((~ g!eq) (~ g!left) (~ g!right)))))
                                                       (list.enumerate members))))
                              (~ g!_)
                              #0))))))
            ## Tuples
            (do @
              [g!eqs (poly.tuple (p.many Equivalence<?>))
               #let [g!_ (code.local-identifier "_____________")
                     indices (|> (list.size g!eqs) dec (list.n/range +0))
                     g!lefts (list/map (|>> nat/encode (text/compose "left") code.local-identifier) indices)
                     g!rights (list/map (|>> nat/encode (text/compose "right") code.local-identifier) indices)]]
              (wrap (` (: (~ (@Equivalence inputT))
                          (function ((~ g!_) [(~+ g!lefts)] [(~+ g!rights)])
                            (and (~+ (|> (list.zip3 g!eqs g!lefts g!rights)
                                         (list/map (function (_ [g!eq g!left g!right])
                                                     (` ((~ g!eq) (~ g!left) (~ g!right)))))))))))))
            ## Type recursion
            (do @
              [[g!self bodyC] (poly.recursive Equivalence<?>)
               #let [g!_ (code.local-identifier "_____________")]]
              (wrap (` (: (~ (@Equivalence inputT))
                          (eq.rec (.function ((~ g!_) (~ g!self))
                                    (~ bodyC)))))))
            poly.recursive-self
            ## Type applications
            (do @
              [[funcC argsC] (poly.apply (p.seq Equivalence<?> (p.many Equivalence<?>)))]
              (wrap (` ((~ funcC) (~+ argsC)))))
            ## Parameters
            poly.parameter
            ## Polymorphism
            (do @
              [[funcC varsC bodyC] (poly.polymorphic Equivalence<?>)]
              (wrap (` (: (All [(~+ varsC)]
                            (-> (~+ (list/map (|>> (~) eq.Equivalence (`)) varsC))
                                (eq.Equivalence ((~ (poly.to-code *env* inputT)) (~+ varsC)))))
                          (function ((~ funcC) (~+ varsC))
                            (~ bodyC))))))
            poly.recursive-call
            ## If all else fails...
            (|> poly.any
                (:: @ map (|>> %type (format "Cannot create Equivalence for: ") p.fail))
                (:: @ join))
            ))))
