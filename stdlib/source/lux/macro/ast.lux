(;module:
  lux
  (lux (control eq)
       (data bool
             number
             [char]
             [text #+ Eq<Text> "Text/" Monoid<Text>]
             ident
             (coll [list #* "" Functor<List> Fold<List>])
             )))

## [Types]
## (type: (AST' w)
##   (#;Bool Bool)
##   (#;Nat Nat)
##   (#;Int Int)
##   (#;Real Real)
##   (#;Char Char)
##   (#;Text Text)
##   (#;Symbol Text Text)
##   (#;Tag Text Text)
##   (#;Form (List (w (AST' w))))
##   (#;Tuple (List (w (AST' w))))
##   (#;Record (List [(w (AST' w)) (w (AST' w))])))

## (type: AST
##   (Meta Cursor (AST' (Meta Cursor))))

## [Utils]
(def: _cursor Cursor ["" +0 +0])

## [Functions]
(do-template [<name> <type> <tag>]
  [(def: #export (<name> x)
     (-> <type> AST)
     [_cursor (<tag> x)])]
  
  [bool   Bool             #;Bool]
  [nat    Nat              #;Nat]
  [int    Int              #;Int]
  [deg    Deg              #;Deg]
  [real   Real             #;Real]
  [char   Char             #;Char]
  [text   Text             #;Text]
  [symbol Ident            #;Symbol]
  [tag    Ident            #;Tag]
  [form   (List AST)       #;Form]
  [tuple  (List AST)       #;Tuple]
  [record (List [AST AST]) #;Record]
  )

(do-template [<name> <tag> <doc>]
  [(def: #export (<name> name)
     {#;doc <doc>}
     (-> Text AST)
     [_cursor (<tag> ["" name])])]

  [local-symbol #;Symbol "Produces a local symbol (a symbol with no module prefix)."]
  [local-tag    #;Tag    "Produces a local tag (a tag with no module prefix)."])

## [Structures]
(struct: #export _ (Eq AST)
  (def: (= x y)
    (case [x y]
      (^template [<tag> <eq>]
        [[_ (<tag> x')] [_ (<tag> y')]]
        (:: <eq> = x' y'))
      ([#;Bool   Eq<Bool>]
       [#;Nat    Eq<Nat>]
       [#;Int    Eq<Int>]
       [#;Deg    Eq<Deg>]
       [#;Real   Eq<Real>]
       [#;Char   char;Eq<Char>]
       [#;Text   Eq<Text>]
       [#;Symbol Eq<Ident>]
       [#;Tag    Eq<Ident>])

      (^template [<tag>]
        [[_ (<tag> xs')] [_ (<tag> ys')]]
        (and (:: Eq<Nat> = (size xs') (size ys'))
             (fold (function [[x' y'] old]
                     (and old (= x' y')))
                   true
                   (zip2 xs' ys'))))
      ([#;Form]
       [#;Tuple])

      [[_ (#;Record xs')] [_ (#;Record ys')]]
      (and (:: Eq<Nat> = (size xs') (size ys'))
           (fold (function [[[xl' xr'] [yl' yr']] old]
                   (and old (= xl' yl') (= xr' yr')))
                 true
                 (zip2 xs' ys')))
      
      _
      false)))

## [Values]
(def: #export (to-text ast)
  (-> AST Text)
  (case ast
    (^template [<tag> <struct>]
      [_ (<tag> value)]
      (:: <struct> encode value))
    ([#;Bool   Codec<Text,Bool>]
     [#;Nat    Codec<Text,Nat>]
     [#;Int    Codec<Text,Int>]
     [#;Deg    Codec<Text,Deg>]
     [#;Real   Codec<Text,Real>]
     [#;Char   char;Codec<Text,Char>]
     [#;Text   text;Codec<Text,Text>]
     [#;Symbol Codec<Text,Ident>])

    [_ (#;Tag ident)]
    (Text/append  "#" (:: Codec<Text,Ident> encode ident))

    (^template [<tag> <open> <close>]
      [_ (<tag> members)]
      ($_ Text/append <open> (|> members (map to-text) (interpose " ") (text;join-with "")) <close>))
    ([#;Form  "(" ")"]
     [#;Tuple "[" "]"])

    [_ (#;Record pairs)]
    ($_ Text/append "{" (|> pairs (map (function [[left right]] ($_ Text/append (to-text left) " " (to-text right)))) (interpose " ") (text;join-with "")) "}")
    ))

(def: #export (replace original substitute ast)
  {#;doc "Replaces all ASTs that look like 'original' with the 'substitute' in the given AST."}
  (-> AST AST AST AST)
  (if (:: Eq<AST> = original ast)
    substitute
    (case ast
      (^template [<tag>]
        [cursor (<tag> parts)]
        [cursor (<tag> (map (replace original substitute) parts))])
      ([#;Form]
       [#;Tuple])

      [cursor (#;Record parts)]
      [cursor (#;Record (map (function [[left right]]
                               [(replace original substitute left)
                                (replace original substitute right)])
                             parts))]

      _
      ast)))
