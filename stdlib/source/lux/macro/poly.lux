##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  [lux #- list]
  (lux (control monad
                [eq])
       (data [text]
             text/format
             (struct [list "List/" Fold<List> Monad<List>]
                     [dict #+ Dict])
             [number]
             [product]
             [bool]
             [char]
             [maybe])
       [compiler #+ Monad<Lux> with-gensyms]
       (macro [ast]
              ["s" syntax #+ syntax: Syntax]
              (syntax [common]))
       [type]
       ))

## [Types]
(type: #export (Matcher a)
  (-> Type (Lux a)))

(type: #export Env (Dict Nat [Type AST]))

## [Combinators]
(do-template [<combinator> <name> <type>]
  [(def: #export <combinator>
     (Matcher Unit)
     (lambda [:type:]
       (case (type;un-name :type:)
         <type>
         (:: compiler;Monad<Lux> wrap [])

         _
         (compiler;fail (format "Not " <name> " type: " (%type :type:))))))]

  [void "Void" #;VoidT]
  [unit "Unit" #;UnitT]
  )

(do-template [<combinator> <name>]
  [(def: #export <combinator>
     (Matcher Unit)
     (lambda [:type:]
       (case (type;un-alias :type:)
         (#;NamedT ["lux" <name>] _)
         (:: compiler;Monad<Lux> wrap [])

         _
         (compiler;fail (format "Not " <name> " type: " (%type :type:))))))]

  [bool "Bool"]
  [nat  "Nat"]
  [int  "Int"]
  [frac "Frac"]
  [real "Real"]
  [char "Char"]
  [text "Text"]
  )

(def: #export primitive
  (Matcher Type)
  (lambda [:type:]
    (let% [<primitives> (do-template [<parser> <type>]
                          [(do Monad<Lux>
                             [_ (<parser> :type:)]
                             (wrap <type>))]

                          [void Void]
                          [unit Unit]
                          [bool Bool]
                          [nat  Nat]
                          [int  Int]
                          [frac Frac]
                          [real Real]
                          [char Char]
                          [text Text])]
      ($_ compiler;either
          <primitives>))))

(syntax: ($AST$ ast)
  (wrap (;list (ast;text (ast;to-text ast)))))

(do-template [<single> <multi> <flattener> <tag>]
  [(def: #export <single>
     (Matcher [Type Type])
     (lambda [:type:]
       (case (type;un-name :type:)
         (<tag> :left: :right:)
         (:: compiler;Monad<Lux> wrap [:left: :right:])

         _
         (compiler;fail (format "Not a " ($AST$ <tag>) " type: " (%type :type:))))))

   (def: #export <multi>
     (Matcher (List Type))
     (lambda [:type:]
       (let [members (<flattener> (type;un-name :type:))]
         (if (n.> +1 (list;size members))
           (:: compiler;Monad<Lux> wrap members)
           (compiler;fail (format "Not a " ($AST$ <tag>) " type: " (%type :type:)))))))]

  [sum    sum+    type;flatten-variant #;SumT]
  [prod   prod+   type;flatten-tuple   #;ProdT]
  )

(def: #export func
  (Matcher [Type Type])
  (lambda [:type:]
    (case (type;un-name :type:)
      (#;LambdaT :left: :right:)
      (:: compiler;Monad<Lux> wrap [:left: :right:])

      _
      (compiler;fail (format "Not a LambdaT type: " (%type :type:))))))

(def: #export func+
  (Matcher [(List Type) Type])
  (lambda [:type:]
    (let [[ins out] (type;flatten-function (type;un-name :type:))]
      (if (n.> +0 (list;size ins))
        (:: compiler;Monad<Lux> wrap [ins out])
        (compiler;fail (format "Not a LambdaT type: " (%type :type:)))))))

(def: #export tagged
  (Matcher [(List Ident) Type])
  (lambda [:type:]
    (case (type;un-alias :type:)
      (#;NamedT type-name :def:)
      (do compiler;Monad<Lux>
        [tags (compiler;tags-of type-name)]
        (wrap [tags :def:]))

      _
      (compiler;fail (format "Unnamed types can't have tags: " (%type :type:))))))

(def: #export polymorphic
  (Matcher [(List AST) Type])
  (lambda [:type:]
    (loop [:type: (type;un-name :type:)]
      (case :type:
        (#;UnivQ _ :type:')
        (do compiler;Monad<Lux>
          [[g!tail :type:''] (recur :type:')
           g!head (compiler;gensym "type-var")]
          (wrap [(list& g!head g!tail)
                 :type:'']))

        _
        (:: compiler;Monad<Lux> wrap [(;list) :type:])))))

(do-template [<combinator> <sub-comb> <build>]
  [(def: #export <combinator>
     (Matcher [(List AST) (List [Ident Type])])
     (lambda [:type:]
       (do compiler;Monad<Lux>
         [[tags :type:] (tagged :type:)
          _ (compiler;assert "Records and variants must have tags."
                             (n.> +0 (list;size tags)))
          [vars :type:] (polymorphic :type:)
          members (<sub-comb> :type:)
          #let [num-tags (list;size tags)
                [init-tags last-tag] (list;split (n.dec num-tags) tags)
                [init-types last-types] (list;split (n.dec num-tags) members)]]
         (wrap [vars (list;concat (;list (list;zip2 init-tags init-types)
                                         (;list [(default (undefined)
                                                   (list;head last-tag))
                                                 (<build> last-types)])))]))))]

  [variant sum+  type;variant]
  [record  prod+ type;tuple]
  )

(def: #export tuple
  (Matcher [(List AST) (List Type)])
  (lambda [:type:]
    (do compiler;Monad<Lux>
      [[vars :type:] (polymorphic :type:)
       members (prod+ :type:)]
      (wrap [vars members]))))

(def: #export function
  (Matcher [(List AST) [(List Type) Type]])
  (lambda [:type:]
    (do compiler;Monad<Lux>
      [[vars :type:] (polymorphic :type:)
       ins+out (func+ :type:)]
      (wrap [vars ins+out]))))

(def: #export apply
  (Matcher [Type (List Type)])
  (lambda [:type:]
    (do compiler;Monad<Lux>
      [#let [[:func: :args:] (loop [:type: (type;un-name :type:)]
                               (case :type:
                                 (#;AppT :func: :arg:)
                                 (let [[:func:' :args:] (recur :func:)]
                                   [:func:' (list& :arg: :args:)])

                                 _
                                 [:type: (;list)]))]]
      (case :args:
        #;Nil
        (compiler;fail "Not a type application.")

        _
        (wrap [:func: (list;reverse :args:)])))))

(do-template [<combinator> <name>]
  [(def: #export <combinator>
     (Matcher Type)
     (lambda [:type:]
       (case (type;un-name :type:)
         (^=> (#;AppT :quant: :arg:)
              [(type;un-alias :quant:) (#;NamedT ["lux" <name>] _)])
         (:: compiler;Monad<Lux> wrap :arg:)

         _
         (compiler;fail (format "Not " <name> " type: " (%type :type:))))))]

  [maybe "Maybe"]
  [list  "List"]
  )

(def: (adjusted-idx env idx)
  (-> Env Nat Nat)
  (let [env-level (n./ +2 (dict;size env))
        bound-level (n./ +2 idx)
        bound-idx (n.% +2 idx)]
    (|> env-level n.dec (n.- bound-level) (n.* +2) (n.+ bound-idx))))

(def: #export (bound env)
  (-> Env (Matcher AST))
  (lambda [:type:]
    (case :type:
      (#;BoundT idx)
      (case (dict;get (adjusted-idx env idx) env)
        (#;Some [poly-type poly-ast])
        (:: compiler;Monad<Lux> wrap poly-ast)

        #;None
        (compiler;fail (format "Unknown bound type: " (%type :type:))))

      _
      (compiler;fail (format "Not a bound type: " (%type :type:))))))

(def: #export (recur env)
  (-> Env (Matcher AST))
  (lambda [:type:]
    (do Monad<Lux>
      [[t-func t-args] (apply :type:)]
      (case t-func
        (^=> (#;BoundT t-func-idx)
             (n.= +0 (adjusted-idx env t-func-idx))
             [(do maybe;Monad<Maybe>
                [=func (dict;get +0 env)
                 =args (mapM @ (lambda [t-arg]
                                 (case t-arg
                                   (#;BoundT idx)
                                   (dict;get (adjusted-idx env idx) env)

                                   _
                                   #;None))
                             t-args)]
                (wrap (` ((~ (product;right =func)) (~@ (List/map product;right =args))))))
              (#;Some call)])
        (wrap call)

        _
        (compiler;fail (format "Type is not a recursive instance: " (%type :type:))))
      )))

(def: #export (var env var-id)
  (-> Env Nat (Matcher Unit))
  (lambda [:type:]
    (case :type:
      (^=> (#;BoundT idx)
           (n.= var-id (adjusted-idx env idx)))
      (:: compiler;Monad<Lux> wrap [])

      _
      (compiler;fail (format "Not a bound type: " (%type :type:))))))

## [Syntax]
(def: #export (extend-env [funcT funcA] type-vars env)
  (-> [Type AST] (List [Type AST]) Env Env)
  (case type-vars
    #;Nil
    env
    
    (#;Cons [varT varA] type-vars')
    (let [current-size (dict;size env)]
      (|> env
          (dict;put current-size [funcT funcA])
          (dict;put (n.inc current-size) [varT varA])
          (extend-env [(#;AppT funcT varT) (` (#;AppT (~ funcA) (~ varA)))]
                      type-vars')
          ))))

(syntax: #export (poly: [_ex-lev common;export-level]
                   [[name env inputs] (s;form ($_ s;seq
                                                  s;local-symbol
                                                  s;local-symbol
                                                  (s;many s;local-symbol)))]
                   body)
  (with-gensyms [g!body]
    (let [g!inputs (List/map (|>. [""] ast;symbol) inputs)
          g!name (ast;symbol ["" name])
          g!env (ast;symbol ["" env])]
      (wrap (;list (` (syntax: (~@ (common;gen-export-level _ex-lev)) ((~ g!name) (~@ (List/map (lambda [g!input] (` [(~ g!input) s;symbol]))
                                                                                                g!inputs)))
                        (do Monad<Lux>
                          [(~@ (List/join (List/map (lambda [g!input] (;list g!input (` (compiler;find-type-def (~ g!input)))))
                                                    g!inputs)))
                           (~' #let) [(~ g!env) (: Env (dict;new number;Hash<Nat>))]
                           (~ g!body) (: (Lux AST)
                                         (loop [(~ g!env) (~ g!env)
                                                (~@ (List/join (List/map (lambda [g!input] (;list g!input g!input))
                                                                         g!inputs)))]
                                           (let [(~ g!name) (~' recur)]
                                             (~ body))))]
                          ((~' wrap) (;list (~ g!body)))))))))))

(def: (common-poly-name? poly-func)
  (-> Text Bool)
  (text;contains? "?" poly-func))

(def: (derivation-name poly args)
  (-> Text (List Text) (Maybe Text))
  (if (common-poly-name? poly)
    (#;Some (List/fold (text;replace-once "?") poly args))
    #;None))

(syntax: #export (derived: [_ex-lev common;export-level]
                   [?name (s;opt s;local-symbol)]
                   [[poly-func poly-args] (s;form (s;seq s;symbol (s;many s;symbol)))]
                   [?custom-impl (s;opt s;any)])
  (do @
    [poly-args (mapM @ compiler;normalize poly-args)
     name (case ?name
            (#;Some name)
            (wrap name)

            (^=> #;None
                 [(derivation-name (product;right poly-func) (List/map product;right poly-args))
                  (#;Some derived-name)])
            (wrap derived-name)

            _
            (compiler;fail "derived: was given no explicit name, and can't generate one from given information."))
     #let [impl (case ?custom-impl
                  (#;Some custom-impl)
                  custom-impl

                  #;None
                  (` ((~ (ast;symbol poly-func)) (~@ (List/map ast;symbol poly-args)))))]]
    (wrap (;list (` (def: (~@ (common;gen-export-level _ex-lev))
                      (~ (ast;symbol ["" name]))
                      {#;struct? true}
                      (~ impl)))))))

## [Derivers]
(def: (to-ast env type)
  (-> Env Type AST)
  (case type
    (#;HostT name params)
    (` (#;HostT (~ (ast;text name))
                (list (~@ (List/map (to-ast env) params)))))

    (^template [<tag>]
      <tag>
      (` <tag>))
    ([#;VoidT] [#;UnitT])

    (^template [<tag>]
      (<tag> idx)
      (` (<tag> (~ (ast;nat idx)))))
    ([#;VarT] [#;ExT])

    (#;BoundT idx)
    (let [idx (adjusted-idx env idx)]
      (if (n.= +0 idx)
        (|> (dict;get idx env) (default (undefined)) product;left (to-ast env))
        (` (;$ (~ (ast;nat (n.dec idx)))))))

    (^template [<tag>]
      (<tag> left right)
      (` (<tag> (~ (to-ast env left))
                (~ (to-ast env right)))))
    ([#;LambdaT] [#;AppT])

    (^template [<tag> <macro> <flattener>]
      (<tag> left right)
      (` (<macro> (~@ (List/map (to-ast env) (<flattener> type))))))
    ([#;SumT  | type;flatten-variant]
     [#;ProdT & type;flatten-tuple])

    (#;NamedT name sub-type)
    (ast;symbol name)

    (^template [<tag>]
      (<tag> scope body)
      (` (<tag> (list (~@ (List/map (to-ast env) scope)))
                (~ (to-ast env body)))))
    ([#;UnivQ] [#;ExQ])
    ))

(def: #export (gen-type env converter type-fun tvars type)
  (-> Env (-> AST AST) AST (List AST) Type AST)
  (let [type' (to-ast env type)]
    (case tvars
      #;Nil
      (converter type')

      _
      (` (All (~ type-fun) [(~@ tvars)]
           (-> (~@ (List/map converter tvars))
               (~ (converter (` ((~ type') (~@ tvars)))))))))))

(def: #export (type-var-indices num-vars)
  (-> Nat (List Type))
  (|> num-vars list;indices (List/map (|>. #;BoundT))))
