(;module:
  [lux #- function]
  (lux (control [monad #+ do Monad]
                [eq]
                ["p" parser])
       [function]
       (data [text "text/" Monoid<Text>]
             (coll [list "L/" Fold<List> Monad<List> Monoid<List>]
                   [dict #+ Dict])
             [number "nat/" Codec<Text,Nat>]
             [product]
             [bool]
             [maybe]
             [ident "Ident/" Eq<Ident> Codec<Text,Ident>]
             ["R" result])
       [macro #+ with-gensyms]
       (macro [code]
              ["s" syntax #+ syntax: Syntax]
              (syntax ["cs" common]
                      (common ["csr" reader]
                              ["csw" writer])))
       [type]
       (type [check])
       ))

(type: #export Env (Dict Nat [Type Code]))

(type: #export (Poly a)
  (p;Parser [Env (List Type)] a))

(def: #export fresh Env (dict;new number;Hash<Nat>))

(def: (run' env types poly)
  (All [a] (-> Env (List Type) (Poly a) (R;Result a)))
  (case (p;run [env types] poly)
    (#R;Error error)
    (#R;Error error)

    (#R;Success [[env' remaining] output])
    (case remaining
      #;Nil
      (#R;Success output)

      _
      (#R;Error (|> remaining
                    (L/map type;to-text)
                    (text;join-with ", ")
                    (text/append "Unconsumed types: "))))))

(def: #export (run type poly)
  (All [a] (-> Type (Poly a) (R;Result a)))
  (run' fresh (list type) poly))

(def: #export env
  (Poly Env)
  (;function [[env inputs]]
    (#R;Success [[env inputs] env])))

(def: (with-env temp poly)
  (All [a] (-> Env (Poly a) (Poly a)))
  (;function [[env inputs]]
    (case (p;run [temp inputs] poly)
      (#R;Error error)
      (#R;Error error)

      (#R;Success [[_ remaining] output])
      (#R;Success [[env remaining] output]))))

(def: #export peek
  (Poly Type)
  (;function [[env inputs]]
    (case inputs
      #;Nil
      (#R;Error "Empty stream of types.")

      (#;Cons headT tail)
      (#R;Success [[env inputs] headT]))))

(def: #export any
  (Poly Type)
  (;function [[env inputs]]
    (case inputs
      #;Nil
      (#R;Error "Empty stream of types.")

      (#;Cons headT tail)
      (#R;Success [[env tail] headT]))))

(def: #export (local types poly)
  (All [a] (-> (List Type) (Poly a) (Poly a)))
  (;function [[env pass-through]]
    (case (run' env types poly)
      (#R;Error error)
      (#R;Error error)

      (#R;Success output)
      (#R;Success [[env pass-through] output]))))

(def: (label idx)
  (-> Nat Code)
  (code;local-symbol (text/append "label\u0000" (nat/encode idx))))

(def: #export (with-extension type poly)
  (All [a] (-> Type (Poly a) (Poly [Code a])))
  (;function [[env inputs]]
    (let [current-id (dict;size env)
          g!var (label current-id)]
      (case (p;run [(dict;put current-id [type g!var] env)
                    inputs]
                   poly)
        (#R;Error error)
        (#R;Error error)

        (#R;Success [[_ inputs'] output])
        (#R;Success [[env inputs'] [g!var output]])))))

(do-template [<combinator> <name> <type>]
  [(def: #export <combinator>
     (Poly Unit)
     (do p;Monad<Parser>
       [headT any]
       (case (type;un-name headT)
         <type>
         (wrap [])

         _
         (p;fail ($_ text/append "Not " <name> " type: " (type;to-text headT))))))]

  [void "Void" #;Void]
  [unit "Unit" #;Unit]
  [bool "Bool" (#;Host "#Bool" #;Nil)]
  [nat  "Nat"  (#;Host "#Nat" #;Nil)]
  [int  "Int"  (#;Host "#Int" #;Nil)]
  [deg  "Deg"  (#;Host "#Deg" #;Nil)]
  [frac "Frac" (#;Host "#Frac" #;Nil)]
  [text "Text" (#;Host "#Text" #;Nil)]
  )

(def: #export primitive
  (Poly Type)
  (do p;Monad<Parser>
    [headT any]
    (case (run headT ($_ p;either
                         void
                         unit
                         bool
                         nat
                         int
                         deg
                         frac
                         text))
      (#R;Error error)
      (p;fail error)

      (#R;Success _)
      (wrap headT))))

(do-template [<name> <flattener> <tag>]
  [(def: #export (<name> poly)
     (All [a] (-> (Poly a) (Poly a)))
     (do p;Monad<Parser>
       [headT any]
       (let [members (<flattener> (type;un-name headT))]
         (if (n.> +1 (list;size members))
           (local members poly)
           (p;fail ($_ text/append "Not a " (Ident/encode (ident-for <tag>)) " type: " (type;to-text headT)))))))]

  [variant type;flatten-variant #;Sum]
  [tuple   type;flatten-tuple   #;Product]
  )

(def: polymorphic'
  (Poly [Nat Type])
  (do p;Monad<Parser>
    [headT any
     #let [[num-arg bodyT] (type;flatten-univ-q (type;un-name headT))]]
    (if (n.= +0 num-arg)
      (p;fail ($_ text/append "Non-polymorphic type: " (type;to-text headT)))
      (wrap [num-arg bodyT]))))

(def: #export (polymorphic poly)
  (All [a] (-> (Poly a) (Poly [Code (List Code) a])))
  (do p;Monad<Parser>
    [headT any
     funcI (:: @ map dict;size ;;env)
     [num-args non-poly] (local (list headT) polymorphic')
     env ;;env
     #let [funcL (label funcI)
           [all-varsL env'] (loop [current-arg +0
                                   env' env
                                   all-varsL (: (List Code) (list))]
                              (if (n.< num-args current-arg)
                                (if (n.= +0 current-arg)
                                  (let [varL (label (n.inc funcI))]
                                    (recur (n.inc current-arg)
                                           (|> env'
                                               (dict;put funcI [headT funcL])
                                               (dict;put (n.inc funcI) [(#;Bound (n.inc funcI)) varL]))
                                           (#;Cons varL all-varsL)))
                                  (let [partialI (|> current-arg (n.* +2) (n.+ funcI))
                                        partial-varI (n.inc partialI)
                                        partial-varL (label partial-varI)
                                        partialC (` ((~ funcL) (~@ (|> (list;n.range +0 (n.dec num-args))
                                                                       (L/map (|>. (n.* +2) n.inc (n.+ funcI) label))
                                                                       list;reverse))))]
                                    (recur (n.inc current-arg)
                                           (|> env'
                                               (dict;put partialI [;Void partialC])
                                               (dict;put partial-varI [(#;Bound partial-varI) partial-varL]))
                                           (#;Cons partial-varL all-varsL))))
                                [all-varsL env']))]]
    (|> (do @
          [output poly]
          (wrap [funcL all-varsL output]))
        (local (list non-poly))
        (with-env env'))))

(def: #export (function in-poly out-poly)
  (All [i o] (-> (Poly i) (Poly o) (Poly [i o])))
  (do p;Monad<Parser>
    [headT any
     #let [[inputsT outputT] (type;flatten-function (type;un-name headT))]]
    (if (n.> +0 (list;size inputsT))
      (p;seq (local inputsT in-poly)
             (local (list outputT) out-poly))
      (p;fail ($_ text/append "Non-function type: " (type;to-text headT))))))

(def: #export (apply poly)
  (All [a] (-> (Poly a) (Poly a)))
  (do p;Monad<Parser>
    [headT any
     #let [[funcT paramsT] (type;flatten-application (type;un-name headT))]]
    (if (n.= +0 (list;size paramsT))
      (p;fail ($_ text/append "Non-application type: " (type;to-text headT)))
      (local (#;Cons funcT paramsT) poly))))

(def: #export (this expected)
  (-> Type (Poly Unit))
  (do p;Monad<Parser>
    [actual any]
    (if (check;checks? expected actual)
      (wrap [])
      (p;fail ($_ text/append
                  "Types do not match." "\n"
                  "Expected: " (type;to-text expected) "\n"
                  "  Actual: " (type;to-text actual))))))

(def: (adjusted-idx env idx)
  (-> Env Nat Nat)
  (let [env-level (n./ +2 (dict;size env))
        bound-level (n./ +2 idx)
        bound-idx (n.% +2 idx)]
    (|> env-level n.dec (n.- bound-level) (n.* +2) (n.+ bound-idx))))

(def: #export bound
  (Poly Code)
  (do p;Monad<Parser>
    [env ;;env
     headT any]
    (case headT
      (#;Bound idx)
      (case (dict;get (adjusted-idx env idx) env)
        (#;Some [poly-type poly-ast])
        (wrap poly-ast)

        #;None
        (p;fail ($_ text/append "Unknown bound type: " (type;to-text headT))))

      _
      (p;fail ($_ text/append "Not a bound type: " (type;to-text headT))))))

(def: #export (var id)
  (-> Nat (Poly Unit))
  (do p;Monad<Parser>
    [env ;;env
     headT any]
    (case headT
      (#;Bound idx)
      (if (n.= id (adjusted-idx env idx))
        (wrap [])
        (p;fail ($_ text/append "Wrong bound type.\n"
                    "Expected: " (nat/encode id) "\n"
                    "  Actual: " (nat/encode idx))))

      _
      (p;fail ($_ text/append "Not a bound type: " (type;to-text headT))))))

(def: #export (recursive poly)
  (All [a] (-> (Poly a) (Poly [Code a])))
  (do p;Monad<Parser>
    [headT any]
    (case (type;un-name headT)
      (#;Apply #;Void (#;UnivQ _ headT'))
      (do @
        [[recT _ output] (|> poly
                             (with-extension #;Void)
                             (with-extension headT)
                             (local (list headT')))]
        (wrap [recT output]))

      _
      (p;fail ($_ text/append "Not a recursive type: " (type;to-text headT))))))

(def: #export recursive-self
  (Poly Code)
  (do p;Monad<Parser>
    [env ;;env
     headT any]
    (case (type;un-name headT)
      (^multi (#;Apply #;Void (#;Bound funcT-idx))
              (n.= +0 (adjusted-idx env funcT-idx))
              [(dict;get +0 env) (#;Some [self-type self-call])])
      (wrap self-call)

      _
      (p;fail ($_ text/append "Not a recursive type: " (type;to-text headT))))))

(def: #export recursive-call
  (Poly Code)
  (do p;Monad<Parser>
    [env ;;env
     [funcT argsT] (apply (p;seq any (p;many any)))
     _ (local (list funcT) (var +0))
     allC (let [allT (list& funcT argsT)]
            (|> allT
                (monad;map @ (function;const bound))
                (local allT)))]
    (wrap (` ((~@ allC))))))

(def: #export log
  (All [a] (Poly a))
  (do p;Monad<Parser>
    [current any
     #let [_ (log! ($_ text/append
                       "{" (Ident/encode (ident-for ;;log)) "} "
                       (type;to-text current)))]]
    (p;fail "LOGGING")))

## [Syntax]
(syntax: #export (poly: [export csr;export]
                   [name s;local-symbol]
                   body)
  (with-gensyms [g!type g!output]
    (let [g!name (code;symbol ["" name])]
      (wrap (;list (` (syntax: (~@ (csw;export export)) ((~ g!name) [(~ g!type) s;symbol])
                        (do macro;Monad<Lux>
                          [(~ g!type) (macro;find-type-def (~ g!type))]
                          (case (|> (~ body)
                                    (;function [(~ g!name)])
                                    p;rec
                                    (do p;Monad<Parser> [])
                                    (;;run (~ g!type))
                                    (: (;Either ;Text ;Code)))
                            (#;Left (~ g!output))
                            (macro;fail (~ g!output))

                            (#;Right (~ g!output))
                            ((~' wrap) (;list (~ g!output))))))))))))

(def: (common-poly-name? poly-func)
  (-> Text Bool)
  (text;contains? "?" poly-func))

(def: (derivation-name poly args)
  (-> Text (List Text) (Maybe Text))
  (if (common-poly-name? poly)
    (#;Some (L/fold (text;replace-once "?") poly args))
    #;None))

(syntax: #export (derived: [export csr;export]
                   [?name (p;opt s;local-symbol)]
                   [[poly-func poly-args] (s;form (p;seq s;symbol (p;many s;symbol)))]
                   [?custom-impl (p;opt s;any)])
  (do @
    [poly-args (monad;map @ macro;normalize poly-args)
     name (case ?name
            (#;Some name)
            (wrap name)

            (^multi #;None
                    [(derivation-name (product;right poly-func) (L/map product;right poly-args))
                     (#;Some derived-name)])
            (wrap derived-name)

            _
            (p;fail "derived: was given no explicit name, and cannot generate one from given information."))
     #let [impl (case ?custom-impl
                  (#;Some custom-impl)
                  custom-impl

                  #;None
                  (` ((~ (code;symbol poly-func)) (~@ (L/map code;symbol poly-args)))))]]
    (wrap (;list (` (def: (~@ (csw;export export))
                      (~ (code;symbol ["" name]))
                      {#;struct? true}
                      (~ impl)))))))

## [Derivers]
(def: #export (to-ast env type)
  (-> Env Type Code)
  (case type
    (#;Host name params)
    (` (#;Host (~ (code;text name))
               (list (~@ (L/map (to-ast env) params)))))

    (^template [<tag>]
      <tag>
      (` <tag>))
    ([#;Void] [#;Unit])

    (^template [<tag>]
      (<tag> idx)
      (` (<tag> (~ (code;nat idx)))))
    ([#;Var] [#;Ex])

    (#;Bound idx)
    (let [idx (adjusted-idx env idx)]
      (if (n.= +0 idx)
        (|> (dict;get idx env) maybe;assume product;left (to-ast env))
        (` (;$ (~ (code;nat (n.dec idx)))))))

    (#;Apply #;Void (#;Bound idx))
    (let [idx (adjusted-idx env idx)]
      (if (n.= +0 idx)
        (|> (dict;get idx env) maybe;assume product;left (to-ast env))
        (undefined)))
    
    (^template [<tag>]
      (<tag> left right)
      (` (<tag> (~ (to-ast env left))
                (~ (to-ast env right)))))
    ([#;Function] [#;Apply])

    (^template [<tag> <macro> <flattener>]
      (<tag> left right)
      (` (<macro> (~@ (L/map (to-ast env) (<flattener> type))))))
    ([#;Sum  | type;flatten-variant]
     [#;Product & type;flatten-tuple])

    (#;Named name sub-type)
    (code;symbol name)

    (^template [<tag>]
      (<tag> scope body)
      (` (<tag> (list (~@ (L/map (to-ast env) scope)))
                (~ (to-ast env body)))))
    ([#;UnivQ] [#;ExQ])
    ))
