(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [control
    ["p" parser
     ["<.>" type (#+ Env)]
     ["s" code]]]
   [data
    ["." product]
    ["." maybe]
    ["." text]
    [number
     ["n" nat]]
    [collection
     ["." list ("#\." fold functor)]
     ["." dictionary]]]
   ["." meta (#+ with-gensyms)]
   [macro
    ["." code]
    [syntax (#+ syntax:)
     [common
      ["csr" reader]
      ["csw" writer]]]]
   ["." type]])

(syntax: #export (poly: {export csr.export}
                   {name s.local-identifier}
                   body)
  (with-gensyms [g!_ g!type g!output]
    (let [g!name (code.identifier ["" name])]
      (wrap (.list (` ((~! syntax:) (~+ (csw.export export)) ((~ g!name) {(~ g!type) (~! s.identifier)})
                       ((~! do) (~! meta.monad)
                        [(~ g!type) ((~! meta.find-type-def) (~ g!type))]
                        (case (: (.Either .Text .Code)
                                 ((~! <type>.run) ((~! p.rec)
                                                   (function ((~ g!_) (~ g!name))
                                                     (~ body)))
                                  (~ g!type)))
                          (#.Left (~ g!output))
                          ((~! meta.fail) (~ g!output))

                          (#.Right (~ g!output))
                          ((~' wrap) (.list (~ g!output))))))))))))

(def: (common-poly-name? poly-func)
  (-> Text Bit)
  (text.contains? "?" poly-func))

(def: (derivation-name poly args)
  (-> Text (List Text) (Maybe Text))
  (if (common-poly-name? poly)
    (#.Some (list\fold (text.replace-once "?") poly args))
    #.None))

(syntax: #export (derived: {export csr.export}
                   {?name (p.maybe s.local-identifier)}
                   {[poly-func poly-args] (s.form (p.and s.identifier (p.many s.identifier)))}
                   {?custom-impl (p.maybe s.any)})
  (do {! meta.monad}
    [poly-args (monad.map ! meta.normalize poly-args)
     name (case ?name
            (#.Some name)
            (wrap name)

            (^multi #.None
                    [(derivation-name (product.right poly-func) (list\map product.right poly-args))
                     (#.Some derived-name)])
            (wrap derived-name)

            _
            (p.fail "derived: was given no explicit name, and cannot generate one from given information."))
     #let [impl (case ?custom-impl
                  (#.Some custom-impl)
                  custom-impl

                  #.None
                  (` ((~ (code.identifier poly-func)) (~+ (list\map code.identifier poly-args)))))]]
    (wrap (.list (` (def: (~+ (csw.export export))
                      (~ (code.identifier ["" name]))
                      {#.struct? #1}
                      (~ impl)))))))

(def: #export (to-code env type)
  (-> Env Type Code)
  (case type
    (#.Primitive name params)
    (` (#.Primitive (~ (code.text name))
                    (list (~+ (list\map (to-code env) params)))))

    (^template [<tag>]
      [(<tag> idx)
       (` (<tag> (~ (code.nat idx))))])
    ([#.Var] [#.Ex])

    (#.Parameter idx)
    (let [idx (<type>.adjusted-idx env idx)]
      (if (n.= 0 idx)
        (|> (dictionary.get idx env) maybe.assume product.left (to-code env))
        (` (.$ (~ (code.nat (dec idx)))))))

    (#.Apply (#.Named ["lux" "Nothing"] _) (#.Parameter idx))
    (let [idx (<type>.adjusted-idx env idx)]
      (if (n.= 0 idx)
        (|> (dictionary.get idx env) maybe.assume product.left (to-code env))
        (undefined)))
    
    (^template [<tag>]
      [(<tag> left right)
       (` (<tag> (~ (to-code env left))
                 (~ (to-code env right))))])
    ([#.Function] [#.Apply])

    (^template [<macro> <tag> <flattener>]
      [(<tag> left right)
       (` (<macro> (~+ (list\map (to-code env) (<flattener> type)))))])
    ([| #.Sum type.flatten-variant]
     [& #.Product type.flatten-tuple])

    (#.Named name sub-type)
    (code.identifier name)

    (^template [<tag>]
      [(<tag> scope body)
       (` (<tag> (list (~+ (list\map (to-code env) scope)))
                 (~ (to-code env body))))])
    ([#.UnivQ] [#.ExQ])
    ))
