(.module:
  lux
  (lux (control [monad #+ do]
                ["ex" exception #+ exception:])
       (data ["e" error]
             [text]
             (coll (dictionary ["dict" unordered #+ Dict])))
       [macro])
  [// #+ Eval]
  (// [".L" analysis #+ Analyser]
      [".L" synthesis #+ Synthesizer]))

(do-template [<name>]
  [(exception: #export (<name> {message Text})
     message)]

  [unknown-analysis]
  [unknown-synthesis]
  [unknown-translation]
  [unknown-statement]

  [cannot-define-analysis-more-than-once]
  [cannot-define-synthesis-more-than-once]
  [cannot-define-translation-more-than-once]
  [cannot-define-statement-more-than-once]
  )

(type: #export Analysis
  (-> Analyser Eval (List Code) (Meta analysisL.Analysis)))

(type: #export Synthesis
  (-> Synthesizer (List analysisL.Analysis)
      (synthesisL.Operation synthesisL.Synthesis)))

(type: #export Translation
  (-> (List Code) (Meta Code)))

(type: #export Statement
  (-> (List Code) (Meta Any)))

(type: #export (Extension e)
  (Dict Text e))

(type: #export Extensions
  {#analysis (Extension Analysis)
   #synthesis (Extension Synthesis)
   #translation (Extension Translation)
   #statement (Extension Statement)})

(def: #export fresh
  Extensions
  {#analysis (dict.new text.Hash<Text>)
   #synthesis (dict.new text.Hash<Text>)
   #translation (dict.new text.Hash<Text>)
   #statement (dict.new text.Hash<Text>)})

(def: get
  (Meta Extensions)
  (function (_ compiler)
    (#e.Success [compiler
                 (|> compiler (get@ #.extensions) (:! Extensions))])))

(def: (set extensions)
  (-> Extensions (Meta Any))
  (function (_ compiler)
    (#e.Success [(set@ #.extensions (:! Nothing extensions) compiler)
                 []])))

(do-template [<name> <type> <category> <exception>]
  [(def: #export (<name> name)
     (-> Text (Meta <type>))
     (do macro.Monad<Meta>
       [extensions ..get]
       (case (dict.get name (get@ <category> extensions))
         (#.Some extension)
         (wrap extension)

         #.None
         (//.throw <exception> name))))]

  [find-analysis    Analysis    #analysis    unknown-analysis]
  [find-synthesis   Synthesis   #synthesis   unknown-synthesis]
  [find-translation Translation #translation unknown-translation]
  [find-statement   Statement   #statement   unknown-statement]
  )

(def: #export empty
  (All [e] (Extension e))
  (dict.new text.Hash<Text>))

(do-template [<all> <type> <category>]
  [(def: #export <all>
     (Meta (Extension <type>))
     (|> ..get
         (:: macro.Monad<Meta> map (get@ <category>))))]

  [all-analyses     Analysis    #analysis]
  [all-syntheses    Synthesis   #synthesis]
  [all-translations Translation #translation]
  [all-statements   Statement   #statement]
  )

(do-template [<name> <type> <category> <exception>]
  [(def: #export (<name> name extension)
     (-> Text <type> (Meta Any))
     (do macro.Monad<Meta>
       [extensions ..get
        _ (//.assert <exception> name
                     (not (dict.contains? name (get@ <category> extensions))))
        _ (..set (update@ <category> (dict.put name extension) extensions))]
       (wrap [])))]

  [install-analysis    Analysis    #analysis    cannot-define-analysis-more-than-once]
  [install-synthesis   Synthesis   #synthesis   cannot-define-synthesis-more-than-once]
  [install-translation Translation #translation cannot-define-translation-more-than-once]
  [install-statement   Statement   #statement   cannot-define-statement-more-than-once]
  )
