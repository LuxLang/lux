(.module:
  lux
  (lux (control [monad #+ do]
                ["ex" exception #+ exception:])
       (data [text]
             text/format
             (collection [list "list/" Functor<List>]
                         ["dict" dictionary #+ Dictionary])))
  [//])

(exception: #export (incorrect-arity {name Text} {arity Nat} {args Nat})
  (ex.report ["Extension" (%t name)]
             ["Expected arity" (|> arity .int %i)]
             ["Actual arity" (|> args .int %i)]))

(exception: #export (invalid-syntax {name Text})
  (ex.report ["Extension" name]))

## [Utils]
(def: #export (install name anonymous)
  (All [s i o]
    (-> Text (-> Text (//.Handler s i o))
        (-> (//.Bundle s i o) (//.Bundle s i o))))
  (dict.put name anonymous))

(def: #export (prefix prefix)
  (All [s i o]
    (-> Text (-> (//.Bundle s i o) (//.Bundle s i o))))
  (|>> dict.entries
       (list/map (function (_ [key val]) [(format prefix " " key) val]))
       (dict.from-list text.Hash<Text>)))
