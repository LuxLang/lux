(.module:
  lux
  (lux (control monad)
       [macro]
       (macro [code])
       (lang (type ["tc" check])))
  [///]
  [// #+ Analysis Operation]
  [//type]
  [////reference]
  [////scope])

## [Analysers]
(def: (definition def-name)
  (-> Ident (Operation Analysis))
  (do ///.Monad<Operation>
    [[actualT def-anns _] (macro.find-def def-name)]
    (case (macro.get-symbol-ann (ident-for #.alias) def-anns)
      (#.Some real-def-name)
      (definition real-def-name)

      _
      (do @
        [_ (//type.infer actualT)]
        (:: @ map (|>> ////reference.constant #//.Reference)
            (macro.normalize def-name))))))

(def: (variable var-name)
  (-> Text (Operation (Maybe Analysis)))
  (do ///.Monad<Operation>
    [?var (////scope.find var-name)]
    (case ?var
      (#.Some [actualT ref])
      (do @
        [_ (//type.infer actualT)]
        (wrap (#.Some (|> ref ////reference.variable #//.Reference))))

      #.None
      (wrap #.None))))

(def: #export (reference reference)
  (-> Ident (Operation Analysis))
  (case reference
    ["" simple-name]
    (do ///.Monad<Operation>
      [?var (variable simple-name)]
      (case ?var
        (#.Some varA)
        (wrap varA)

        #.None
        (do @
          [this-module macro.current-module-name]
          (definition [this-module simple-name]))))

    _
    (definition reference)))
