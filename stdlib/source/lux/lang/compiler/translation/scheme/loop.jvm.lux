(.module:
  [lux #- loop]
  (lux (control [monad #+ do])
       (data [product]
             [text]
             text/format
             (coll [list "list/" Functor<List>]))
       [macro])
  [////]
  (//// [name]
        (host ["_" scheme #+ Computation Var])
        [compiler "operation/" Monad<Operation>]
        [synthesis #+ Synthesis])
  [///]
  [//runtime #+ Operation Translator]
  [//reference])

(def: @loop (_.var "loop"))

(def: #export (loop translate offset initsS+ bodyS)
  (-> Translator Nat (List Synthesis) Synthesis
      (Operation Computation))
  (do compiler.Monad<Operation>
    [initsO+ (monad.map @ translate initsS+)
     bodyO (///.with-anchor @loop
             (translate bodyS))]
    (wrap (_.letrec (list [@loop (_.lambda [(|> initsS+
                                           list.enumerate
                                           (list/map (|>> product.left (n/+ offset) //reference.local')))
                                       #.None]
                                      bodyO)])
                    (_.apply/* @loop initsO+)))))

(def: #export (recur translate argsS+)
  (-> Translator (List Synthesis) (Operation Computation))
  (do compiler.Monad<Operation>
    [@loop ///.anchor
     argsO+ (monad.map @ translate argsS+)]
    (wrap (_.apply/* @loop argsO+))))
