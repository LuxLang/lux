(.module:
  lux
  (lux (control [state]
                ["ex" exception #+ Exception exception:]
                [monad #+ do])
       (data [product]
             [error #+ Error])
       [function]))

(type: #export (Operation s o)
  (state.State' Error s o))

(def: #export (run state operation)
  (All [s o]
    (-> s (Operation s o) (Error o)))
  (|> state
      operation
      (:: error.Monad<Error> map product.right)))

(def: #export (throw exception parameters)
  (All [e] (-> (Exception e) e Operation))
  (state.lift error.Monad<Error>
              (ex.throw exception parameters)))

(def: #export (localized transform)
  (All [s o]
    (-> (-> s s)
        (-> (Operation s o) (Operation s o))))
  (function (_ operation)
    (function (_ state)
      (case (operation (transform state))
        (#error.Error error)
        (#error.Error error)

        (#error.Success [state' output])
        (#error.Success [state output])))))

(def: #export (with-state state)
  (All [s o] (-> s (-> (Operation s o) (Operation s o))))
  (localized (function.constant state)))

(def: #export Monad<Operation>
  (state.Monad<State'> error.Monad<Error>))

(type: #export (Compiler s i o)
  (-> i (Operation s o)))
