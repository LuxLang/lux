(.module:
  [lux #- nat int deg]
  (lux [function]
       (data (coll [list "list/" Fold<List>]))))

(type: #export #rec Primitive
  #Unit
  (#Bool Bool)
  (#Nat Nat)
  (#Int Int)
  (#Deg Deg)
  (#Frac Frac)
  (#Text Text))

(type: #export Tag Nat)

(type: #export (Composite a)
  (#Sum (Either a a))
  (#Product [a a]))

(type: #export Register Nat)

(type: #export #rec Pattern
  (#Simple Primitive)
  (#Complex (Composite Pattern))
  (#Bind Register))

(type: #export Variable
  (#Local Register)
  (#Foreign Register))

(type: #export (Match p e)
  [[p e] (List [p e])])

(type: #export Environment
  (List Variable))

(type: #export (Special e)
  [Text (List e)])

(type: #export #rec Analysis
  (#Primitive Primitive)
  (#Structure (Composite Analysis))
  (#Case Analysis (Match Pattern Analysis))
  (#Function Environment Analysis)
  (#Apply Analysis Analysis)
  (#Variable Variable)
  (#Constant Ident)
  (#Special (Special Analysis)))

(do-template [<name> <type> <tag>]
  [(def: #export <name>
     (-> <type> Analysis)
     (|>> <tag> #Primitive))]

  [bool Bool #Bool]
  [nat  Nat  #Nat]
  [int  Int  #Int]
  [deg  Deg  #Deg]
  [frac Frac #Frac]
  [text Text #Text]
  )

(type: #export (Variant a)
  {#lefts Nat
   #right? Bool
   #value a})

(type: #export (Tuple a) (List a))

(type: #export Application [Analysis (List Analysis)])

(def: (last? size tag)
  (-> Nat Tag Bool)
  (n/= (dec size) tag))

(def: #export (no-op value)
  (-> Analysis Analysis)
  (let [identity (#Function (list) (#Variable (#Local +1)))]
    (#Apply value identity)))

(do-template [<name> <type> <structure> <prep-value>]
  [(def: #export (<name> size tag value)
     (-> Nat Tag <type> <type>)
     (let [left (function.const (|>> #.Left #Sum <structure>))
           right (|>> #.Right #Sum <structure>)]
       (if (last? size tag)
         (if (n/= +1 tag)
           (right value)
           (list/fold left
                      (right value)
                      (list.n/range +0 (n/- +2 tag))))
         (list/fold left
                    (case value
                      (<structure> (#Sum _))
                      (<prep-value> value)

                      _
                      value)
                    (list.n/range +0 tag)))))]

  [sum-analysis Analysis #Structure no-op]
  [sum-pattern  Pattern  #Complex   id]
  )

(do-template [<name> <type> <primitive> <structure>]
  [(def: #export (<name> members)
     (-> (Tuple <type>) <type>)
     (case (list.reverse members)
       #.Nil
       (<primitive> #Unit)

       (#.Cons singleton #.Nil)
       singleton

       (#.Cons last prevs)
       (list/fold (function (_ left right) (<structure> (#Product left right)))
                  last prevs)))]

  [product-analysis Analysis #Primitive #Structure]
  [product-pattern  Pattern  #Simple    #Complex]
  )

(def: #export (apply [func args])
  (-> Application Analysis)
  (list/fold (function (_ arg func) (#Apply arg func)) func args))

(type: #export Analyser
  (-> Code (Meta Analysis)))

(def: #export (tuple analysis)
  (-> Analysis (Tuple Analysis))
  (case analysis
    (#Structure (#Product left right))
    (#.Cons left (tuple right))

    _
    (list analysis)))

(def: #export (variant analysis)
  (-> Analysis (Maybe (Variant Analysis)))
  (loop [lefts +0
         variantA analysis]
    (case variantA
      (#Structure (#Sum (#.Left valueA)))
      (case valueA
        (#Structure (#Sum _))
        (recur (inc lefts) valueA)

        _
        (#.Some {#lefts lefts
                 #right? false
                 #value valueA}))
      
      (#Structure (#Sum (#.Right valueA)))
      (#.Some {#lefts lefts
               #right? true
               #value valueA})

      _
      #.None)))

(def: #export (application analysis)
  (-> Analysis Application)
  (case analysis
    (#Apply head func)
    (let [[func' tail] (application func)]
      [func' (#.Cons head tail)])

    _
    [analysis (list)]))
