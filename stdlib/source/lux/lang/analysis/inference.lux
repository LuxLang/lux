(.module:
  lux
  (lux (control [monad #+ do]
                ["ex" exception #+ exception:])
       (data [maybe]
             [text]
             text/format
             (coll [list "list/" Functor<List>]))
       [macro "macro/" Monad<Meta>]
       [lang]
       (lang [type]
             (type ["tc" check])
             [analysis #+ Analysis Analyser]
             (analysis [".A" type]))))

(exception: #export (variant-tag-out-of-bounds {size Nat} {tag analysis.Tag} {type Type})
  (ex.report ["Tag" (%n tag)]
             ["Variant size" (%n size)]
             ["Variant type" (%type type)]))

(exception: #export (cannot-infer {type Type} {args (List Code)})
  (ex.report ["Type" (%type type)]
             ["Arguments" (|> args
                              list.enumerate
                              (list/map (function (_ [idx argC])
                                          (format "\n  " (%n idx) " " (%code argC))))
                              (text.join-with ""))]))

(exception: #export (cannot-infer-argument {inferred Type} {argument Code})
  (ex.report ["Inferred Type" (%type inferred)]
             ["Argument" (%code argument)]))

(exception: #export (smaller-variant-than-expected {expected Nat} {actual Nat})
  (ex.report ["Expected" (%i (.int expected))]
             ["Actual" (%i (.int actual))]))

(do-template [<name>]
  [(exception: #export (<name> {type Type})
     (%type type))]

  [not-a-variant-type]
  [not-a-record-type]
  [invalid-type-application]
  )

(def: (replace-bound bound-idx replacementT type)
  (-> Nat Type Type Type)
  (case type
    (#.Primitive name params)
    (#.Primitive name (list/map (replace-bound bound-idx replacementT) params))

    (^template [<tag>]
      (<tag> left right)
      (<tag> (replace-bound bound-idx replacementT left)
             (replace-bound bound-idx replacementT right)))
    ([#.Sum]
     [#.Product]
     [#.Function]
     [#.Apply])
    
    (#.Bound idx)
    (if (n/= bound-idx idx)
      replacementT
      type)

    (^template [<tag>]
      (<tag> env quantified)
      (<tag> (list/map (replace-bound bound-idx replacementT) env)
             (replace-bound (n/+ +2 bound-idx) replacementT quantified)))
    ([#.UnivQ]
     [#.ExQ])
    
    _
    type))

(def: new-named-type
  (Meta Type)
  (do macro.Monad<Meta>
    [[_module _line _column] macro.cursor
     [ex-id exT] (typeA.with-env tc.existential)]
    (wrap (#.Primitive (format "{New Type @ " (%t _module)
                               "," (%n _line)
                               "," (%n _column)
                               "} " (%n ex-id))
                       (list)))))

## Type-inference works by applying some (potentially quantified) type
## to a sequence of values.
## Function types are used for this, although inference is not always
## done for function application (alternative uses may be records and
## tagged variants).
## But, so long as the type being used for the inference can be treated
## as a function type, this method of inference should work.
(def: #export (general analyse inferT args)
  (-> Analyser Type (List Code) (Meta [Type (List Analysis)]))
  (case args
    #.Nil
    (do macro.Monad<Meta>
      [_ (typeA.infer inferT)]
      (wrap [inferT (list)]))
    
    (#.Cons argC args')
    (case inferT
      (#.Named name unnamedT)
      (general analyse unnamedT args)

      (#.UnivQ _)
      (do macro.Monad<Meta>
        [[var-id varT] (typeA.with-env tc.var)]
        (general analyse (maybe.assume (type.apply (list varT) inferT)) args))

      (#.ExQ _)
      (do macro.Monad<Meta>
        [[var-id varT] (typeA.with-env tc.var)
         output (general analyse
                         (maybe.assume (type.apply (list varT) inferT))
                         args)
         bound? (typeA.with-env
                  (tc.bound? var-id))
         _ (if bound?
             (wrap [])
             (do @
               [newT new-named-type]
               (typeA.with-env
                 (tc.check varT newT))))]
        (wrap output))

      (#.Apply inputT transT)
      (case (type.apply (list inputT) transT)
        (#.Some outputT)
        (general analyse outputT args)

        #.None
        (lang.throw invalid-type-application inferT))

      ## Arguments are inferred back-to-front because, by convention,
      ## Lux functions take the most important arguments *last*, which
      ## means that the most information for doing proper inference is
      ## located in the last arguments to a function call.
      ## By inferring back-to-front, a lot of type-annotations can be
      ## avoided in Lux code, since the inference algorithm can piece
      ## things together more easily.
      (#.Function inputT outputT)
      (do macro.Monad<Meta>
        [[outputT' args'A] (general analyse outputT args')
         argA (lang.with-stacked-errors
                (function (_ _)
                  (ex.construct cannot-infer-argument [inputT argC]))
                (typeA.with-type inputT
                  (analyse argC)))]
        (wrap [outputT' (list& argA args'A)]))

      (#.Var infer-id)
      (do macro.Monad<Meta>
        [?inferT' (typeA.with-env (tc.read infer-id))]
        (case ?inferT'
          (#.Some inferT')
          (general analyse inferT' args)

          _
          (lang.throw cannot-infer [inferT args])))

      _
      (lang.throw cannot-infer [inferT args]))
    ))

## Turns a record type into the kind of function type suitable for inference.
(def: #export (record inferT)
  (-> Type (Meta Type))
  (case inferT
    (#.Named name unnamedT)
    (record unnamedT)

    (^template [<tag>]
      (<tag> env bodyT)
      (do macro.Monad<Meta>
        [bodyT+ (record bodyT)]
        (wrap (<tag> env bodyT+))))
    ([#.UnivQ]
     [#.ExQ])

    (#.Apply inputT funcT)
    (case (type.apply (list inputT) funcT)
      (#.Some outputT)
      (record outputT)

      #.None
      (lang.throw invalid-type-application inferT))

    (#.Product _)
    (macro/wrap (type.function (type.flatten-tuple inferT) inferT))

    _
    (lang.throw not-a-record-type inferT)))

## Turns a variant type into the kind of function type suitable for inference.
(def: #export (variant tag expected-size inferT)
  (-> Nat Nat Type (Meta Type))
  (loop [depth +0
         currentT inferT]
    (case currentT
      (#.Named name unnamedT)
      (do macro.Monad<Meta>
        [unnamedT+ (recur depth unnamedT)]
        (wrap unnamedT+))

      (^template [<tag>]
        (<tag> env bodyT)
        (do macro.Monad<Meta>
          [bodyT+ (recur (inc depth) bodyT)]
          (wrap (<tag> env bodyT+))))
      ([#.UnivQ]
       [#.ExQ])

      (#.Sum _)
      (let [cases (type.flatten-variant currentT)
            actual-size (list.size cases)
            boundary (dec expected-size)]
        (cond (or (n/= expected-size actual-size)
                  (and (n/> expected-size actual-size)
                       (n/< boundary tag)))
              (case (list.nth tag cases)
                (#.Some caseT)
                (macro/wrap (if (n/= +0 depth)
                              (type.function (list caseT) currentT)
                              (let [replace! (replace-bound (|> depth dec (n/* +2)) inferT)]
                                (type.function (list (replace! caseT))
                                  (replace! currentT)))))

                #.None
                (lang.throw variant-tag-out-of-bounds [expected-size tag inferT]))
              
              (n/< expected-size actual-size)
              (lang.throw smaller-variant-than-expected [expected-size actual-size])

              (n/= boundary tag)
              (let [caseT (type.variant (list.drop boundary cases))]
                (macro/wrap (if (n/= +0 depth)
                              (type.function (list caseT) currentT)
                              (let [replace! (replace-bound (|> depth dec (n/* +2)) inferT)]
                                (type.function (list (replace! caseT))
                                  (replace! currentT))))))
              
              ## else
              (lang.throw variant-tag-out-of-bounds [expected-size tag inferT])))

      (#.Apply inputT funcT)
      (case (type.apply (list inputT) funcT)
        (#.Some outputT)
        (variant tag expected-size outputT)

        #.None
        (lang.throw invalid-type-application inferT))

      _
      (lang.throw not-a-variant-type inferT))))
