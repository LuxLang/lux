(.module:
  lux
  (lux (control [monad #+ do]
                ["ex" exception #+ exception:])
       (data ["e" error]
             [product]
             text/format)
       [macro]
       [lang #+ Eval]
       (lang [type]
             (type ["tc" check])
             [".L" analysis #+ Analysis Analyser]
             (analysis [".A" type]
                       [".A" primitive]
                       [".A" structure]
                       [".A" reference]
                       ## [".A" function]
                       )
             ## [".L" macro]
             ## [".L" extension]
             )))

(exception: #export (macro-expansion-failed {message Text})
  message)

(do-template [<name>]
  [(exception: #export (<name> {code Code})
     (%code code))]

  [macro-call-must-have-single-expansion]
  [unrecognized-syntax]
  )

(def: #export (analyser eval)
  (-> Eval Analyser)
  (: (-> Code (Meta Analysis))
     (function (analyse code)
       (do macro.Monad<Meta>
         [expectedT macro.expected-type]
         (let [[cursor code'] code]
           ## The cursor must be set in the compiler for the sake
           ## of having useful error messages.
           (lang.with-cursor cursor
             (case code'
               (^template [<tag> <analyser>]
                 (<tag> value)
                 (<analyser> value))
               ([#.Bool primitiveA.bool]
                [#.Nat  primitiveA.nat]
                [#.Int  primitiveA.int]
                [#.Deg  primitiveA.deg]
                [#.Frac primitiveA.frac]
                [#.Text primitiveA.text])

               (^template [<tag> <analyser>]
                 (^ (#.Form (list& [_ (<tag> tag)]
                                   values)))
                 (case values
                   (#.Cons value #.Nil)
                   (<analyser> analyse tag value)

                   _
                   (<analyser> analyse tag (` [(~+ values)]))))
               ([#.Nat structureA.sum]
                [#.Tag structureA.tagged-sum])

               (#.Tag tag)
               (structureA.tagged-sum analyse tag (' []))

               (^ (#.Tuple (list)))
               primitiveA.unit

               (^ (#.Tuple (list singleton)))
               (analyse singleton)

               (^ (#.Tuple elems))
               (structureA.product analyse elems)

               (^ (#.Record pairs))
               (structureA.record analyse pairs)

               (#.Symbol reference)
               (referenceA.reference reference)

               ## (^ (#.Form (list& [_ (#.Text proc-name)] proc-args)))
               ## (do macro.Monad<Meta>
               ##   [procedure (extensionL.find-analysis proc-name)]
               ##   (procedure analyse eval proc-args))

               ## (^ (#.Form (list& func args)))
               ## (do macro.Monad<Meta>
               ##   [[funcT funcA] (typeA.with-inference
               ##                    (analyse func))]
               ##   (case funcA
               ##     [_ (#.Symbol def-name)]
               ##     (do @
               ##       [?macro (lang.with-error-tracking
               ##                 (macro.find-macro def-name))]
               ##       (case ?macro
               ##         (#.Some macro)
               ##         (do @
               ##           [expansion (: (Meta (List Code))
               ##                         (function (_ compiler)
               ##                           (case (macroL.expand macro args compiler)
               ##                             (#e.Error error)
               ##                             ((lang.throw macro-expansion-failed error) compiler)

               ##                             output
               ##                             output)))]
               ##           (case expansion
               ##             (^ (list single))
               ##             (analyse single)

               ##             _
               ##             (lang.throw macro-call-must-have-single-expansion code)))

               ##         _
               ##         (functionA.analyse-apply analyse funcT funcA args)))

               ##     _
               ##     (functionA.analyse-apply analyse funcT funcA args)))

               _
               (lang.throw unrecognized-syntax code)
               )))))))
