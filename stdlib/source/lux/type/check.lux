(.module: {#.doc "Type-checking functionality."}
  [lux #*
   [control
    [functor (#+ Functor)]
    [apply (#+ Apply)]
    ["." monad (#+ Monad do)]
    ["ex" exception (#+ exception:)]]
   [data
    ["." maybe]
    ["." product]
    ["." error (#+ Error)]
    [number
     ["." nat ("#;." decimal)]]
    ["." text ("#;." monoid equivalence)]
    [collection
     ["." list]
     ["." set (#+ Set)]]]]
  ["." // ("#;." equivalence)])

(template: (!n/= reference subject)
  ("lux i64 =" subject reference))

(template: (!text;= reference subject)
  ("lux text =" subject reference))

(exception: #export (unknown-type-var {id Nat})
  (ex.report ["ID" (nat;encode id)]))

(exception: #export (unbound-type-var {id Nat})
  (ex.report ["ID" (nat;encode id)]))

(exception: #export (invalid-type-application {funcT Type} {argT Type})
  (ex.report ["Type function" (//.to-text funcT)]
             ["Type argument" (//.to-text argT)]))

(exception: #export (cannot-rebind-var {id Nat} {type Type} {bound Type})
  (ex.report ["Var" (nat;encode id)]
             ["Wanted Type" (//.to-text type)]
             ["Current Type" (//.to-text bound)]))

(exception: #export (type-check-failed {expected Type} {actual Type})
  (ex.report ["Expected" (//.to-text expected)]
             ["Actual" (//.to-text actual)]))

(type: #export Var Nat)

(type: #export Assumption [Type Type])

(type: #export (Check a)
  (-> Type-Context (Error [Type-Context a])))

(type: #export Type-Vars
  (List [Var (Maybe Type)]))

(structure: #export functor (Functor Check)
  (def: (map f fa)
    (function (_ context)
      (case (fa context)
        (#error.Success [context' output])
        (#error.Success [context' (f output)])

        (#error.Failure error)
        (#error.Failure error)))))

(structure: #export apply (Apply Check)
  (def: &functor ..functor)

  (def: (apply ff fa)
    (function (_ context)
      (case (ff context)
        (#error.Success [context' f])
        (case (fa context')
          (#error.Success [context'' a])
          (#error.Success [context'' (f a)])

          (#error.Failure error)
          (#error.Failure error))

        (#error.Failure error)
        (#error.Failure error)
        )))
  )

(structure: #export monad (Monad Check)
  (def: &functor ..functor)

  (def: (wrap x)
    (function (_ context)
      (#error.Success [context x])))

  (def: (join ffa)
    (function (_ context)
      (case (ffa context)
        (#error.Success [context' fa])
        (case (fa context')
          (#error.Success [context'' a])
          (#error.Success [context'' a])

          (#error.Failure error)
          (#error.Failure error))

        (#error.Failure error)
        (#error.Failure error)
        )))
  )

(open: "check;." ..monad)

(def: (var::get id plist)
  (-> Var Type-Vars (Maybe (Maybe Type)))
  (case plist
    (#.Cons [var-id var-type]
            plist')
    (if (!n/= id var-id)
      (#.Some var-type)
      (var::get id plist'))

    #.Nil
    #.None))

(def: (var::new id plist)
  (-> Var Type-Vars Type-Vars)
  (#.Cons [id #.None] plist))

(def: (var::put id value plist)
  (-> Var (Maybe Type) Type-Vars Type-Vars)
  (case plist
    #.Nil
    (list [id value])

    (#.Cons [var-id var-type]
            plist')
    (if (!n/= id var-id)
      (#.Cons [var-id value]
              plist')
      (#.Cons [var-id var-type]
              (var::put id value plist')))))

(def: (var::remove id plist)
  (-> Var Type-Vars Type-Vars)
  (case plist
    (#.Cons [var-id var-type]
            plist')
    (if (!n/= id var-id)
      plist'
      (#.Cons [var-id var-type]
              (var::remove id plist')))

    #.Nil
    #.Nil))

(def: #export (run context proc)
  (All [a] (-> Type-Context (Check a) (Error a)))
  (case (proc context)
    (#error.Success [context' output])
    (#error.Success output)

    (#error.Failure error)
    (#error.Failure error)))

(def: #export (throw exception message)
  (All [e a] (-> (ex.Exception e) e (Check a)))
  (function (_ context)
    (ex.throw exception message)))

(def: #export existential
  {#.doc "A producer of existential types."}
  (Check [Nat Type])
  (function (_ context)
    (let [id (get@ #.ex-counter context)]
      (#error.Success [(update@ #.ex-counter inc context)
                       [id (#.Ex id)]]))))

(do-template [<name> <outputT> <fail> <succeed>]
  [(def: #export (<name> id)
     (-> Var (Check <outputT>))
     (function (_ context)
       (case (|> context (get@ #.var-bindings) (var::get id))
         (^or (#.Some (#.Some (#.Var _)))
              (#.Some #.None))
         (#error.Success [context <fail>])
         
         (#.Some (#.Some bound))
         (#error.Success [context <succeed>])

         #.None
         (ex.throw unknown-type-var id))))]

  [bound? Bit          #0     #1]
  [read   (Maybe Type) #.None (#.Some bound)]
  )

(def: (peek id)
  (-> Var (Check Type))
  (function (_ context)
    (case (|> context (get@ #.var-bindings) (var::get id))
      (#.Some (#.Some bound))
      (#error.Success [context bound])

      (#.Some _)
      (ex.throw unbound-type-var id)

      _
      (ex.throw unknown-type-var id))))

(def: #export (bind type id)
  (-> Type Var (Check Any))
  (function (_ context)
    (case (|> context (get@ #.var-bindings) (var::get id))
      (#.Some #.None)
      (#error.Success [(update@ #.var-bindings (var::put id (#.Some type)) context)
                       []])

      (#.Some (#.Some bound))
      (ex.throw cannot-rebind-var [id type bound])
      
      _
      (ex.throw unknown-type-var id))))

(def: (update type id)
  (-> Type Var (Check Any))
  (function (_ context)
    (case (|> context (get@ #.var-bindings) (var::get id))
      (#.Some _)
      (#error.Success [(update@ #.var-bindings (var::put id (#.Some type)) context)
                       []])
      
      _
      (ex.throw unknown-type-var id))))

(def: #export var
  (Check [Var Type])
  (function (_ context)
    (let [id (get@ #.var-counter context)]
      (#error.Success [(|> context
                           (update@ #.var-counter inc)
                           (update@ #.var-bindings (var::new id)))
                       [id (#.Var id)]]))))

(def: (apply-type! funcT argT)
  (-> Type Type (Check Type))
  (case funcT
    (#.Var func-id)
    (do ..monad
      [?funcT' (read func-id)]
      (case ?funcT'
        (#.Some funcT')
        (apply-type! funcT' argT)

        _
        (throw invalid-type-application [funcT argT])))

    _
    (case (//.apply (list argT) funcT)
      (#.Some output)
      (check;wrap output)

      _
      (throw invalid-type-application [funcT argT]))))

(type: #export Ring (Set Var))

(def: empty-ring Ring (set.new nat.hash))

## TODO: Optimize this by not using sets anymore.
(def: #export (ring start)
  (-> Var (Check Ring))
  (function (_ context)
    (loop [current start
           output (set.add start empty-ring)]
      (case (|> context (get@ #.var-bindings) (var::get current))
        (#.Some (#.Some type))
        (case type
          (#.Var post)
          (if (!n/= start post)
            (#error.Success [context output])
            (recur post (set.add post output)))
          
          _
          (#error.Success [context empty-ring]))

        (#.Some #.None)
        (#error.Success [context output])
        
        #.None
        (ex.throw unknown-type-var current)))))

(def: #export fresh-context
  Type-Context
  {#.var-counter 0
   #.ex-counter 0
   #.var-bindings (list)
   })

(def: (attempt op)
  (All [a] (-> (Check a) (Check (Maybe a))))
  (function (_ context)
    (case (op context)
      (#error.Success [context' output])
      (#error.Success [context' (#.Some output)])

      (#error.Failure _)
      (#error.Success [context #.None]))))

(def: #export (fail message)
  (All [a] (-> Text (Check a)))
  (function (_ context)
    (#error.Failure message)))

(def: #export (assert message test)
  (-> Text Bit (Check Any))
  (function (_ context)
    (if test
      (#error.Success [context []])
      (#error.Failure message))))

(def: (either left right)
  (All [a] (-> (Check a) (Check a) (Check a)))
  (function (_ context)
    (case (left context)
      (#error.Success [context' output])
      (#error.Success [context' output])

      (#error.Failure _)
      (right context))))

(def: (assumed? [e a] assumptions)
  (-> Assumption (List Assumption) Bit)
  (list.any? (function (_ [e' a'])
               (and (//;= e e')
                    (//;= a a')))
             assumptions))

(def: (assume! assumption assumptions)
  (-> Assumption (List Assumption) (List Assumption))
  (#.Cons assumption assumptions))

## TODO: "if-bind" can be optimized...
(def: (if-bind id type then else)
  (All [a]
    (-> Var Type (Check a) (-> Type (Check a))
        (Check a)))
  ($_ either
      (do ..monad
        [_ (..bind type id)]
        then)
      (do ..monad
        [ring (..ring id)
         _ (assert "" (n/> 1 (set.size ring)))
         _ (monad.map @ (update type) (set.to-list ring))]
        then)
      (do ..monad
        [?bound (read id)]
        (else (maybe.default (#.Var id) ?bound)))))

## TODO: "link-2" can be optimized...
(def: (link-2 left right)
  (-> Var Var (Check Any))
  (do ..monad
    [_ (..bind (#.Var right) left)]
    (..bind (#.Var left) right)))

## TODO: "link-3" can be optimized...
(def: (link-3 interpose to from)
  (-> Var Var Var (Check Any))
  (do ..monad
    [_ (update (#.Var interpose) from)]
    (update (#.Var to) interpose)))

## TODO: "check-vars" can be optimized...
(def: (check-vars check' assumptions idE idA)
  (-> (-> (List Assumption) Type Type (Check (List Assumption)))
      (List Assumption)
      Var Var
      (Check (List Assumption)))
  (if (!n/= idE idA)
    (check;wrap assumptions)
    (do ..monad
      [ebound (attempt (peek idE))
       abound (attempt (peek idA))]
      (case [ebound abound]
        ## Link the 2 variables circularly
        [#.None #.None]
        (do @
          [_ (link-2 idE idA)]
          (wrap assumptions))

        ## Interpose new variable between 2 existing links
        [(#.Some etype) #.None]
        (case etype
          (#.Var targetE)
          (do @
            [_ (link-3 idA targetE idE)]
            (wrap assumptions))

          _
          (check' assumptions etype (#.Var idA)))

        ## Interpose new variable between 2 existing links
        [#.None (#.Some atype)]
        (case atype
          (#.Var targetA)
          (do @
            [_ (link-3 idE targetA idA)]
            (wrap assumptions))

          _
          (check' assumptions (#.Var idE) atype))

        [(#.Some etype) (#.Some atype)]
        (case [etype atype]
          [(#.Var targetE) (#.Var targetA)]
          (do @
            [ringE (..ring idE)
             ringA (..ring idA)]
            (if (:: set.equivalence = ringE ringA)
              (wrap assumptions)
              ## Fuse 2 rings
              (do @
                [_ (monad.fold @ (function (_ interpose to)
                                   (do @
                                     [_ (link-3 interpose to idE)]
                                     (wrap interpose)))
                               targetE
                               (set.to-list ringA))]
                (wrap assumptions))))

          (^template [<pattern> <id> <type>]
            <pattern>
            (do @
              [ring (..ring <id>)
               _ (monad.map @ (update <type>) (set.to-list ring))]
              (wrap assumptions)))
          ([[(#.Var _) _] idE atype]
           [[_ (#.Var _)] idA etype])
          
          _
          (check' assumptions etype atype))))))

(def: (with-error-stack on-error check)
  (All [a] (-> (-> Any Text) (Check a) (Check a)))
  (function (_ context)
    (case (check context)
      (#error.Failure error)
      (#error.Failure (case error
                        ""
                        (on-error [])

                        _
                        ($_ text;compose
                            (on-error [])
                            text.new-line text.new-line
                            "-----------------------------------------"
                            text.new-line text.new-line
                            error)))

      output
      output)))

## TODO: "check-apply" can be optimized...
(def: (check-apply check' assumptions [eAT eFT] [aAT aFT])
  (-> (-> (List Assumption) Type Type (Check (List Assumption))) (List Assumption)
      [Type Type] [Type Type]
      (Check (List Assumption)))
  (case [eFT aFT]
    (^or [(#.UnivQ _ _) (#.Ex _)] [(#.UnivQ _ _) (#.Var _)])
    (do ..monad
      [eFT' (apply-type! eFT eAT)]
      (check' assumptions eFT' (#.Apply aAT aFT)))

    (^or [(#.Ex _) (#.UnivQ _ _)] [(#.Var _) (#.UnivQ _ _)])
    (do ..monad
      [aFT' (apply-type! aFT aAT)]
      (check' assumptions (#.Apply eAT eFT) aFT'))

    (^or [(#.Ex _) _] [_ (#.Ex _)])
    (do ..monad
      [assumptions (check' assumptions eFT aFT)]
      (check' assumptions eAT aAT))

    [(#.Var id) _]
    (do ..monad
      [?rFT (read id)]
      (case ?rFT
        (#.Some rFT)
        (check' assumptions (#.Apply eAT rFT) (#.Apply aAT aFT))

        _
        (do ..monad
          [assumptions (check' assumptions eFT aFT)
           e' (apply-type! aFT eAT)
           a' (apply-type! aFT aAT)]
          (check' assumptions e' a'))))

    [_ (#.Var id)]
    (do ..monad
      [?rFT (read id)]
      (case ?rFT
        (#.Some rFT)
        (check' assumptions (#.Apply eAT eFT) (#.Apply aAT rFT))

        _
        (do ..monad
          [assumptions (check' assumptions eFT aFT)
           e' (apply-type! eFT eAT)
           a' (apply-type! eFT aAT)]
          (check' assumptions e' a'))))

    _
    (fail "")))

## TODO: "check'" can be optimized...
(def: #export (check' assumptions expected actual)
  {#.doc "Type-check to ensure that the 'expected' type subsumes the 'actual' type."}
  (-> (List Assumption) Type Type (Check (List Assumption)))
  (if (is? expected actual)
    (check;wrap assumptions)
    (with-error-stack
      (function (_ _) (ex.construct type-check-failed [expected actual]))
      (case [expected actual]
        [(#.Var idE) (#.Var idA)]
        (check-vars check' assumptions idE idA)
        
        [(#.Var id) _]
        (if-bind id actual
                 (check;wrap assumptions)
                 (function (_ bound)
                   (check' assumptions bound actual)))
        
        [_ (#.Var id)]
        (if-bind id expected
                 (check;wrap assumptions)
                 (function (_ bound)
                   (check' assumptions expected bound)))

        (^template [<fe> <fa>]
          [(#.Apply A1 <fe>) (#.Apply A2 <fa>)]
          (check-apply check' assumptions [A1 <fe>] [A2 <fa>]))
        ([F1 (#.Ex ex)]
         [(#.Ex ex) F2]
         [F1 (#.Var id)]
         [(#.Var id) F2])
        
        [(#.Apply A F) _]
        (let [new-assumption [expected actual]]
          (if (assumed? new-assumption assumptions)
            (check;wrap assumptions)
            (do ..monad
              [expected' (apply-type! F A)]
              (check' (assume! new-assumption assumptions) expected' actual))))

        [_ (#.Apply A F)]
        (do ..monad
          [actual' (apply-type! F A)]
          (check' assumptions expected actual'))

        ## TODO: Refactor-away as cold-code
        (^template [<tag> <instancer>]
          [(<tag> _) _]
          (do ..monad
            [[_ paramT] <instancer>
             expected' (apply-type! expected paramT)]
            (check' assumptions expected' actual)))
        ([#.UnivQ ..existential]
         [#.ExQ ..var])

        ## TODO: Refactor-away as cold-code
        (^template [<tag> <instancer>]
          [_ (<tag> _)]
          (do ..monad
            [[_ paramT] <instancer>
             actual' (apply-type! actual paramT)]
            (check' assumptions expected actual')))
        ([#.UnivQ ..var]
         [#.ExQ ..existential])

        [(#.Primitive e-name e-params) (#.Primitive a-name a-params)]
        (if (!text;= e-name a-name)
          (loop [assumptions assumptions
                 e-params e-params
                 a-params a-params]
            (case [e-params a-params]
              [#.Nil #.Nil]
              (check;wrap assumptions)
              
              [(#.Cons e-head e-tail) (#.Cons a-head a-tail)]
              (do ..monad
                [assumptions' (check' assumptions e-head a-head)]
                (recur assumptions' e-tail a-tail))

              _
              (fail "")))
          (fail ""))

        (^template [<compose>]
          [(<compose> eL eR) (<compose> aL aR)]
          (do ..monad
            [assumptions (check' assumptions eL aL)]
            (check' assumptions eR aR)))
        ([#.Sum]
         [#.Product])
        
        [(#.Function eI eO) (#.Function aI aO)]
        (do ..monad
          [assumptions (check' assumptions aI eI)]
          (check' assumptions eO aO))

        [(#.Ex e!id) (#.Ex a!id)]
        (if (!n/= e!id a!id)
          (check;wrap assumptions)
          (fail ""))

        [(#.Named _ ?etype) _]
        (check' assumptions ?etype actual)

        [_ (#.Named _ ?atype)]
        (check' assumptions expected ?atype)

        _
        (fail "")))))

(def: #export (check expected actual)
  {#.doc "Type-check to ensure that the 'expected' type subsumes the 'actual' type."}
  (-> Type Type (Check Any))
  (check' (list) expected actual))

(def: #export (checks? expected actual)
  {#.doc "A simple type-checking function that just returns a yes/no answer."}
  (-> Type Type Bit)
  (case (run fresh-context (check' (list) expected actual))
    (#error.Failure _)
    #0

    (#error.Success _)
    #1))

(def: #export context
  (Check Type-Context)
  (function (_ context)
    (#error.Success [context context])))

(def: #export (clean inputT)
  (-> Type (Check Type))
  (case inputT
    (#.Primitive name paramsT+)
    (|> paramsT+
        (monad.map ..monad clean)
        (check;map (|>> (#.Primitive name))))

    (^or (#.Parameter _) (#.Ex _) (#.Named _))
    (check;wrap inputT)

    (^template [<tag>]
      (<tag> leftT rightT)
      (do ..monad
        [leftT' (clean leftT)]
        (|> (clean rightT)
            (check;map (|>> (<tag> leftT'))))))
    ([#.Sum] [#.Product] [#.Function] [#.Apply])

    (#.Var id)
    (do ..monad
      [?actualT (read id)]
      (case ?actualT
        (#.Some actualT)
        (clean actualT)

        _
        (wrap inputT)))

    (^template [<tag>]
      (<tag> envT+ unquantifiedT)
      (do ..monad
        [envT+' (monad.map @ clean envT+)]
        (wrap (<tag> envT+' unquantifiedT))))
    ([#.UnivQ] [#.ExQ])
    ))
