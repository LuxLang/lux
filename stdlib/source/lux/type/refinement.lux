(.module:
  [lux #- type]
  (lux (control [predicate #+ Pred]
                [monad #+ do]
                ["p" parser])
       (data ["e" error #+ Error])
       (lang [type "type/" Eq<Type>])
       (type abstract)
       [macro]
       (macro ["s" syntax #+ syntax:]
              [poly])))

(abstract: #export (Refined t r)
  {#.doc "A refined type 'r' of base type 't' using a predicate."}
  
  {#value t
   #predicate (Pred t)}

  (type: #export (Refiner t r)
    (-> t (Maybe (Refined t r))))

  (def: #export (refinement predicate)
    (All [t]
      (Ex [r]
        (-> (Pred t) (Refiner t r))))
    (function (_ un-refined)
      (if (predicate un-refined)
        (#.Some (:abstraction {#value un-refined
                               #predicate predicate}))
        #.None)))

  (do-template [<name> <output> <slot>]
    [(def: #export (<name> refined)
       (All [t r] (-> (Refined t r) <output>))
       (|> refined :representation (get@ <slot>)))]

    [un-refine t        #value]
    [predicate (Pred t) #predicate]
    )

  (def: #export (lift transform)
    (All [t r]
      (-> (-> t t)
          (-> (Refined t r) (Maybe (Refined t r)))))
    (function (_ refined)
      (let [[value predicate] (:representation refined)
            value' (transform value)]
        (if (predicate value')
          (#.Some (:abstraction {#value value'
                                 #predicate predicate}))
          #.None))))
  )

(def: #export (filter refiner values)
  (All [t r] (-> (Refiner t r) (List t) (List (Refined t r))))
  (case values
    #.Nil
    #.Nil

    (#.Cons head tail)
    (case (refiner head)
      (#.Some refined)
      (#.Cons refined (filter refiner tail))
      
      #.None
      (filter refiner tail))))

(def: #export (partition refiner values)
  (All [t r] (-> (Refiner t r) (List t) [(List (Refined t r)) (List t)]))
  (case values
    #.Nil
    [#.Nil #.Nil]

    (#.Cons head tail)
    (let [[yes no] (partition refiner tail)]
      (case (refiner head)
        (#.Some refined)
        [(#.Cons refined yes)
         no]
        
        #.None
        [yes
         (#.Cons head no)]))))

(def: (refinement-type constructor-type)
  (-> Type (Error Type))
  (<| (poly.run constructor-type)
      (do p.Monad<Parser>
        [[un-refinedT outputT] (poly.function poly.any poly.any)
         refined-ex (<| (poly.local (list outputT))
                        poly.apply (p.after (poly.this .Maybe))
                        poly.apply (p.after (poly.this ..Refined))
                        (p.after (poly.this un-refinedT))
                        poly.existential)]
        (wrap (.type (..Refined un-refinedT (#.Ex refined-ex)))))))

(syntax: #export (type {refinement s.symbol})
  (do @
    [constructorT (macro.find-type refinement)
     refinementT (case (refinement-type constructorT)
                   (#e.Success refinementT)
                   (wrap refinementT)

                   (#e.Error error)
                   (p.fail error))]
    (wrap (list (type.to-code refinementT)))))
