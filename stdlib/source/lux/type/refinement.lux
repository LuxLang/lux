(.module:
  [lux (#- type)
   [abstract
    [predicate (#+ Predicate)]]
   ["." meta]
   [macro
    [syntax (#+ syntax:)]]
   [type (#+ :by-example)
    abstract]])

(abstract: #export (Refined t r)
  {#value t
   #predicate (Predicate t)}

  {#.doc "A refined type 'r' of base type 't' using a predicate."}

  (type: #export (Refiner t r)
    (-> t (Maybe (Refined t r))))

  (def: #export (refinement predicate)
    (All [t]
      (Ex [r]
        (-> (Predicate t) (Refiner t r))))
    (function (_ un-refined)
      (if (predicate un-refined)
        (#.Some (:abstraction {#value un-refined
                               #predicate predicate}))
        #.None)))

  (template [<name> <output> <slot>]
    [(def: #export (<name> refined)
       (All [t r] (-> (Refined t r) <output>))
       (|> refined :representation (get@ <slot>)))]

    [un-refine t             #value]
    [predicate (Predicate t) #predicate]
    )

  (def: #export (lift transform)
    (All [t r]
      (-> (-> t t)
          (-> (Refined t r) (Maybe (Refined t r)))))
    (function (_ refined)
      (let [[value predicate] (:representation refined)
            value' (transform value)]
        (if (predicate value')
          (#.Some (:abstraction {#value value'
                                 #predicate predicate}))
          #.None))))
  )

(def: #export (filter refiner values)
  (All [t r] (-> (Refiner t r) (List t) (List (Refined t r))))
  (case values
    #.Nil
    #.Nil

    (#.Cons head tail)
    (case (refiner head)
      (#.Some refined)
      (#.Cons refined (filter refiner tail))
      
      #.None
      (filter refiner tail))))

(def: #export (partition refiner values)
  (All [t r] (-> (Refiner t r) (List t) [(List (Refined t r)) (List t)]))
  (case values
    #.Nil
    [#.Nil #.Nil]

    (#.Cons head tail)
    (let [[yes no] (partition refiner tail)]
      (case (refiner head)
        (#.Some refined)
        [(#.Cons refined yes)
         no]
        
        #.None
        [yes
         (#.Cons head no)]))))

(syntax: #export (type refiner)
  (meta.with-gensyms [g!t g!r]
    (wrap (list (` ((~! :by-example) [(~ g!t) (~ g!r)]
                    {(..Refiner (~ g!t) (~ g!r))
                     (~ refiner)}
                    (..Refined (~ g!t) (~ g!r))))))))
