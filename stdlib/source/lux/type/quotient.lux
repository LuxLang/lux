(.module:
  [lux (#- type)
   [type (#+ :by-example)
    abstract]])

(abstract: #export (Class t c q)
  (-> t c)

  (def: #export class
    (All [t c]
      (Ex [q]
        (-> (-> t c) (Class t c q))))
    (|>> :abstraction))

  (abstract: #export (Quotient t c q)
    {#value t
     #label c}

    (def: #export (quotient class value)
      (All [t c q]
        (-> (Class t c q) t
            (Quotient t c q)))
      (:abstraction {#value value
                     #label ((:representation Class class) value)}))

    (template [<name> <output> <slot>]
      [(def: #export <name>
         (All [t c q] (-> (Quotient t c q) <output>))
         (|>> :representation (get@ <slot>)))]

      [value t #value]
      [label c #label]
      )
    )
  )

(template: #export (type <class>)
  (:by-example [t c q]
               {(..Class t c q)
                <class>}
               (..Quotient t c q)))
