(.module:
  [lux (#- type)
   [control
    [monad (#+ do)]
    ["p" parser]]
   [data
    ["." error (#+ Error)]]
   ["." type
    abstract]
   ["." macro
    ["s" syntax (#+ syntax:)]
    ["." poly]]])

(abstract: #export (Class t c q)
  {}

  (-> t c)

  (def: #export class
    (All [t c]
      (Ex [q]
        (-> (-> t c) (Class t c q))))
    (|>> :abstraction))

  (abstract: #export (Quotient t c q)
    {}

    {#value t
     #label c}

    (def: #export (quotient class value)
      (All [t c q]
        (-> (Class t c q) t
            (Quotient t c q)))
      (:abstraction {#value value
                     #label ((:representation Class class) value)}))

    (do-template [<name> <output> <slot>]
      [(def: #export <name>
         (All [t c q] (-> (Quotient t c q) <output>))
         (|>> :representation (get@ <slot>)))]

      [value t #value]
      [label c #label]
      )
    )
  )

(def: (quotient-type constructor-type)
  (-> Type (Error Type))
  (<| (poly.run constructor-type)
      (do p.monad
        [[valueT classT quotient-ex] (<| poly.apply (p.after (poly.exactly ..Class))
                                         ($_ p.and poly.any poly.any poly.existential))]
        (wrap (.type (..Quotient valueT classT (:~ (#.Ex quotient-ex))))))))

(syntax: #export (type {quotient s.identifier})
  (do @
    [constructorT (macro.find-type quotient)
     quotientT (case (quotient-type constructorT)
                 (#error.Success quotientT)
                 (wrap quotientT)

                 (#error.Failure error)
                 (p.fail error))]
    (wrap (list (type.to-code quotientT)))))
