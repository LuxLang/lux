(.module:
  [lux #*
   [abstract
    ["." monad (#+ Monad do)]
    ["eq" equivalence]]
   [control
    ["." try]
    ["p" parser
     ["s" code (#+ Parser)]]]
   [data
    ["." product]
    ["." maybe]
    ["." number
     ["n" nat]]
    ["." text ("#@." equivalence)
     ["%" format (#+ format)]]
    [collection
     ["." list ("#@." monad fold)]
     ["dict" dictionary (#+ Dictionary)]]]
   ["." meta]
   [macro
    ["." code]
    [syntax (#+ syntax:)]]
   [meta
    ["." annotation]]
   ["." type
    ["." check (#+ Check)]]])

(def: (find-type-var id env)
  (-> Nat Type-Context (Meta Type))
  (case (list.find (|>> product.left (n.= id))
                   (get@ #.var-bindings env))
    (#.Some [_ (#.Some type)])
    (case type
      (#.Var id')
      (find-type-var id' env)

      _
      (:: meta.monad wrap type))

    (#.Some [_ #.None])
    (meta.fail (format "Unbound type-var " (%.nat id)))

    #.None
    (meta.fail (format "Unknown type-var " (%.nat id)))
    ))

(def: (resolve-type var-name)
  (-> Name (Meta Type))
  (do meta.monad
    [raw-type (meta.find-type var-name)
     compiler meta.get-compiler]
    (case raw-type
      (#.Var id)
      (find-type-var id (get@ #.type-context compiler))

      _
      (wrap raw-type))))

(def: (find-member-type idx sig-type)
  (-> Nat Type (Check Type))
  (case sig-type
    (#.Named _ sig-type')
    (find-member-type idx sig-type')

    (#.Apply arg func)
    (case (type.apply (list arg) func)
      #.None
      (check.fail (format "Cannot apply type " (%.type func) " to type " (%.type arg)))

      (#.Some sig-type')
      (find-member-type idx sig-type'))

    (#.Product left right)
    (if (n.= 0 idx)
      (:: check.monad wrap left)
      (find-member-type (dec idx) right))

    _
    (if (n.= 0 idx)
      (:: check.monad wrap sig-type)
      (check.fail (format "Cannot find member type " (%.nat idx) " for " (%.type sig-type))))))

(def: (find-member-name member)
  (-> Name (Meta Name))
  (case member
    ["" simple-name]
    (meta.either (do meta.monad
                   [member (meta.normalize member)
                    _ (meta.resolve-tag member)]
                   (wrap member))
                 (do {@ meta.monad}
                   [this-module-name meta.current-module-name
                    imp-mods (meta.imported-modules this-module-name)
                    tag-lists (monad.map @ meta.tag-lists imp-mods)
                    #let [tag-lists (|> tag-lists list@join (list@map product.left) list@join)
                          candidates (list.filter (|>> product.right (text@= simple-name))
                                                  tag-lists)]]
                   (case candidates
                     #.Nil
                     (meta.fail (format "Unknown tag: " (%.name member)))
                     
                     (#.Cons winner #.Nil)
                     (wrap winner)
                     
                     _
                     (meta.fail (format "Too many candidate tags: " (%.list %.name candidates))))))

    _
    (:: meta.monad wrap member)))

(def: (resolve-member member)
  (-> Name (Meta [Nat Type]))
  (do meta.monad
    [member (find-member-name member)
     [idx tag-list sig-type] (meta.resolve-tag member)]
    (wrap [idx sig-type])))

(def: (prepare-definitions source-module target-module constants)
  (-> Text Text (List [Text Definition]) (List [Name Type]))
  (do list.monad
    [[name [exported? def-type def-anns def-value]] constants]
    (if (and (annotation.structure? def-anns)
             (or (text@= target-module source-module)
                 exported?))
      (list [[source-module name] def-type])
      (list))))

(def: local-env
  (Meta (List [Name Type]))
  (do meta.monad
    [local-batches meta.locals
     #let [total-locals (list@fold (function (_ [name type] table)
                                     (try.default table (dict.try-put name type table)))
                                   (: (Dictionary Text Type)
                                      (dict.new text.hash))
                                   (list@join local-batches))]]
    (wrap (|> total-locals
              dict.entries
              (list@map (function (_ [name type]) [["" name] type]))))))

(def: local-structs
  (Meta (List [Name Type]))
  (do {@ meta.monad}
    [this-module-name meta.current-module-name]
    (:: @ map (prepare-definitions this-module-name this-module-name)
        (meta.definitions this-module-name))))

(def: import-structs
  (Meta (List [Name Type]))
  (do {@ meta.monad}
    [this-module-name meta.current-module-name
     imp-mods (meta.imported-modules this-module-name)
     export-batches (monad.map @ (function (_ imp-mod)
                                   (:: @ map (prepare-definitions imp-mod this-module-name)
                                       (meta.definitions imp-mod)))
                               imp-mods)]
    (wrap (list@join export-batches))))

(def: (apply-function-type func arg)
  (-> Type Type (Check Type))
  (case func
    (#.Named _ func')
    (apply-function-type func' arg)

    (#.UnivQ _)
    (do check.monad
      [[id var] check.var]
      (apply-function-type (maybe.assume (type.apply (list var) func))
                           arg))

    (#.Function input output)
    (do check.monad
      [_ (check.check input arg)]
      (wrap output))

    _
    (check.fail (format "Invalid function type: " (%.type func)))))

(def: (concrete-type type)
  (-> Type (Check [(List Nat) Type]))
  (case type
    (#.UnivQ _)
    (do check.monad
      [[id var] check.var
       [ids final-output] (concrete-type (maybe.assume (type.apply (list var) type)))]
      (wrap [(#.Cons id ids)
             final-output]))
    
    _
    (:: check.monad wrap [(list) type])))

(def: (check-apply member-type input-types output-type)
  (-> Type (List Type) Type (Check []))
  (do check.monad
    [member-type' (monad.fold check.monad
                              (function (_ input member)
                                (apply-function-type member input))
                              member-type
                              input-types)]
    (check.check output-type member-type')))

(type: #rec Instance
  {#constructor Name
   #dependencies (List Instance)})

(def: (test-provision provision context dep alts)
  (-> (-> Lux Type-Context Type (Check Instance))
      Type-Context Type (List [Name Type])
      (Meta (List Instance)))
  (do meta.monad
    [compiler meta.get-compiler]
    (case (|> alts
              (list@map (function (_ [alt-name alt-type])
                          (case (check.run context
                                           (do {@ check.monad}
                                             [[tvars alt-type] (concrete-type alt-type)
                                              #let [[deps alt-type] (type.flatten-function alt-type)]
                                              _ (check.check dep alt-type)
                                              context' check.context
                                              =deps (monad.map @ (provision compiler context') deps)]
                                             (wrap =deps)))
                            (#.Left error)
                            (list)

                            (#.Right =deps)
                            (list [alt-name =deps]))))
              list@join)
      #.Nil
      (meta.fail (format "No candidates for provisioning: " (%.type dep)))

      found
      (wrap found))))

(def: (provision compiler context dep)
  (-> Lux Type-Context Type (Check Instance))
  (case (meta.run compiler
                  ($_ meta.either
                      (do meta.monad [alts ..local-env] (..test-provision provision context dep alts))
                      (do meta.monad [alts ..local-structs] (..test-provision provision context dep alts))
                      (do meta.monad [alts ..import-structs] (..test-provision provision context dep alts))))
    (#.Left error)
    (check.fail error)

    (#.Right candidates)
    (case candidates
      #.Nil
      (check.fail (format "No candidates for provisioning: " (%.type dep)))

      (#.Cons winner #.Nil)
      (:: check.monad wrap winner)

      _
      (check.fail (format "Too many candidates for provisioning: " (%.type dep) " --- " (%.list (|>> product.left %.name) candidates))))
    ))

(def: (test-alternatives sig-type member-idx input-types output-type alts)
  (-> Type Nat (List Type) Type (List [Name Type]) (Meta (List Instance)))
  (do meta.monad
    [compiler meta.get-compiler
     context meta.type-context]
    (case (|> alts
              (list@map (function (_ [alt-name alt-type])
                          (case (check.run context
                                           (do {@ check.monad}
                                             [[tvars alt-type] (concrete-type alt-type)
                                              #let [[deps alt-type] (type.flatten-function alt-type)]
                                              _ (check.check alt-type sig-type)
                                              member-type (find-member-type member-idx alt-type)
                                              _ (check-apply member-type input-types output-type)
                                              context' check.context
                                              =deps (monad.map @ (provision compiler context') deps)]
                                             (wrap =deps)))
                            (#.Left error)
                            (list)

                            (#.Right =deps)
                            (list [alt-name =deps]))))
              list@join)
      #.Nil
      (meta.fail (format "No alternatives for " (%.type (type.function input-types output-type))))

      found
      (wrap found))))

(def: (find-alternatives sig-type member-idx input-types output-type)
  (-> Type Nat (List Type) Type (Meta (List Instance)))
  (let [test (test-alternatives sig-type member-idx input-types output-type)]
    ($_ meta.either
        (do meta.monad [alts local-env] (test alts))
        (do meta.monad [alts local-structs] (test alts))
        (do meta.monad [alts import-structs] (test alts)))))

(def: (var? input)
  (-> Code Bit)
  (case input
    [_ (#.Identifier _)]
    #1

    _
    #0))

(def: (join-pair [l r])
  (All [a] (-> [a a] (List a)))
  (list l r))

(def: (instance$ [constructor dependencies])
  (-> Instance Code)
  (case dependencies
    #.Nil
    (code.identifier constructor)

    _
    (` ((~ (code.identifier constructor)) (~+ (list@map instance$ dependencies))))))

(syntax: #export (:::
                   {member s.identifier}
                   {args (p.or (p.and (p.some s.identifier) s.end!)
                               (p.and (p.some s.any) s.end!))})
  {#.doc (doc "Automatic structure selection (for type-class style polymorphism)."
              "This feature layers type-class style polymorphism on top of Lux's signatures and structures."
              "When calling a polymorphic function, or using a polymorphic constant,"
              "this macro will check the types of the arguments, and the expected type for the whole expression"
              "and it will search in the local scope, the module's scope and the imports' scope"
              "in order to find suitable structures to satisfy those requirements."
              "If a single alternative is found, that one will be used automatically."
              "If no alternative is found, or if more than one alternative is found (ambiguity)"
              "a compile-time error will be raised, to alert the user."
              "Examples:"
              "Nat equivalence"
              (:: number.equivalence = x y)
              (::: = x y)
              "Can optionally add the prefix of the module where the signature was defined."
              (::: eq.= x y)
              "(List Nat) equivalence"
              (::: =
                (list.indices 10)
                (list.indices 10))
              "(Functor List) map"
              (::: map inc (list.indices 10))
              "Caveat emptor: You need to make sure to import the module of any structure you want to use."
              "Otherwise, this macro will not find it.")}
  (case args
    (#.Left [args _])
    (do {@ meta.monad}
      [[member-idx sig-type] (resolve-member member)
       input-types (monad.map @ resolve-type args)
       output-type meta.expected-type
       chosen-ones (find-alternatives sig-type member-idx input-types output-type)]
      (case chosen-ones
        #.Nil
        (meta.fail (format "No structure option could be found for member: " (%.name member)))

        (#.Cons chosen #.Nil)
        (wrap (list (` (:: (~ (instance$ chosen))
                           (~ (code.local-identifier (product.right member)))
                           (~+ (list@map code.identifier args))))))

        _
        (meta.fail (format "Too many options available: "
                           (|> chosen-ones
                               (list@map (|>> product.left %.name))
                               (text.join-with ", "))
                           " --- for type: " (%.type sig-type)))))

    (#.Right [args _])
    (do {@ meta.monad}
      [labels (|> (meta.gensym "") (list.repeat (list.size args)) (monad.seq @))]
      (wrap (list (` (let [(~+ (|> (list.zip2 labels args) (list@map join-pair) list@join))]
                       (..::: (~ (code.identifier member)) (~+ labels)))))))
    ))

(def: (implicit-bindings amount)
  (-> Nat (Meta (List Code)))
  (|> (meta.gensym "g!implicit")
      (list.repeat amount)
      (monad.seq meta.monad)))

(def: implicits
  (Parser (List Code))
  (s.tuple (p.many s.any)))

(syntax: #export (implicit {structures ..implicits} body)
  (do meta.monad
    [g!implicit+ (implicit-bindings (list.size structures))]
    (wrap (list (` (let [(~+ (|> (list.zip2 g!implicit+ structures)
                                 (list@map (function (_ [g!implicit structure])
                                             (list g!implicit structure)))
                                 list@join))]
                     (~ body)))))))

(syntax: #export (implicit: {structures ..implicits})
  (do meta.monad
    [g!implicit+ (implicit-bindings (list.size structures))]
    (wrap (|> (list.zip2 g!implicit+ structures)
              (list@map (function (_ [g!implicit structure])
                          (` (def: (~ g!implicit) (~ structure)))))))))
