(.module:
  [lux #*
   [abstract
    [monad (#+ Monad do)]]
   [control
    ["." exception (#+ exception:)]
    ["<>" parser ("#\." monad)
     ["<c>" code (#+ Parser)]]]
   [data
    ["." name ("#\." codec)]
    ["." text ("#\." equivalence monoid)]
    [collection
     ["." list ("#\." functor monoid)]]]
   ["." meta]
   [macro
    ["." code]
    [syntax (#+ syntax:)
     ["cs" common
      ["csr" reader]
      ["csw" writer]]]]
   [type (#+ :cast)]])

(type: Stack List)

(def: peek
  (All [a] (-> (Stack a) (Maybe a)))
  list.head)

(def: (push value stack)
  (All [a] (-> a (Stack a) (Stack a)))
  (#.Cons value stack))

(def: pop
  (All [a] (-> (Stack a) (Maybe (Stack a))))
  list.tail)

(type: #export Frame
  {#name Text
   #type-vars (List Code)
   #abstraction Code
   #representation Code})

(def: frames
  (Stack Frame)
  #.Nil)

(template: (!peek <source> <reference> <then>)
  (loop [entries <source>]
    (case entries
      (#.Cons [head-name head] tail)
      (if (text\= <reference> head-name)
        <then>
        (recur tail))

      #.Nil
      (undefined))))

(def: (peek-frames-definition reference source)
  (-> Text (List [Text Global]) (Stack Frame))
  (!peek source reference
         (case head
           (#.Left _)
           (undefined)

           (#.Right [exported? frame-type frame-anns frame-value])
           (:coerce (Stack Frame) frame-value))))

(def: (peek-frames reference definition-reference source)
  (-> Text Text (List [Text Module]) (Stack Frame))
  (!peek source reference
         (peek-frames-definition definition-reference (get@ #.definitions head))))

(exception: #export no-active-frames)

(def: (peek! frame)
  (-> (Maybe Text) (Meta Frame))
  (function (_ compiler)
    (let [[reference definition-reference] (name-of ..frames)
          current-frames (peek-frames reference definition-reference (get@ #.modules compiler))]
      (case (case frame
              (#.Some frame)
              (list.find (function (_ [actual _])
                           (text\= frame actual))
                         current-frames)
              
              #.None
              (..peek current-frames))
        (#.Some frame)
        (#.Right [compiler frame])
        
        #.None
        (exception.throw ..no-active-frames [])))))

(def: #export current
  (Meta Frame)
  (..peek! #.None))

(def: #export (specific name)
  (-> Text (Meta Frame))
  (..peek! (#.Some name)))

(template: (!push <source> <reference> <then>)
  (loop [entries <source>]
    (case entries
      (#.Cons [head-name head] tail)
      (if (text\= <reference> head-name)
        (#.Cons [head-name <then>]
                tail)
        (#.Cons [head-name head]
                (recur tail)))

      #.Nil
      (undefined))))

(def: (push-frame-definition reference frame source)
  (-> Text Frame (List [Text Global]) (List [Text Global]))
  (!push source reference
         (case head
           (#.Left _)
           (undefined)

           (#.Right [exported? frames-type frames-anns frames-value])
           (#.Right [exported?
                     frames-type
                     frames-anns
                     (..push frame (:coerce (Stack Frame) frames-value))]))))

(def: (push-frame [module-reference definition-reference] frame source)
  (-> Name Frame (List [Text Module]) (List [Text Module]))
  (!push source module-reference
         (update@ #.definitions (push-frame-definition definition-reference frame) head)))

(def: (push! frame)
  (-> Frame (Meta Any))
  (function (_ compiler)
    (#.Right [(update@ #.modules
                       (..push-frame (name-of ..frames) frame)
                       compiler)
              []])))

(def: (pop-frame-definition reference source)
  (-> Text (List [Text Global]) (List [Text Global]))
  (!push source reference
         (case head
           (#.Left _)
           (undefined)

           (#.Right [exported? frames-type frames-anns frames-value])
           (#.Right [exported?
                     frames-type
                     frames-anns
                     (let [current-frames (:coerce (Stack Frame) frames-value)]
                       (case (..pop current-frames)
                         (#.Some current-frames')
                         current-frames'

                         #.None
                         current-frames))]))))

(def: (pop-frame [module-reference definition-reference] source)
  (-> Name (List [Text Module]) (List [Text Module]))
  (!push source module-reference
         (|> head (update@ #.definitions (pop-frame-definition definition-reference)))))

(syntax: (pop!)
  (function (_ compiler)
    (#.Right [(update@ #.modules
                       (..pop-frame (name-of ..frames))
                       compiler)
              (list)])))

(def: cast
  (Parser [(Maybe Text) Code])
  (<>.either (<>.and (<>.maybe <c>.local-identifier) <c>.any)
             (<>.and (<>\wrap #.None) <c>.any)))

(template [<name> <from> <to>]
  [(syntax: #export (<name> {[frame value] ..cast})
     (do meta.monad
       [[name type-vars abstraction representation] (peek! frame)]
       (wrap (list (` ((~! :cast) [(~+ type-vars)] (~ <from>) (~ <to>)
                       (~ value)))))))]

  [:abstraction representation abstraction]
  [:representation abstraction representation]
  )

(def: abstraction-type-name
  (-> Name Text)
  (|>> name\encode
       ($_ text\compose
           (name\encode (name-of #..Abstraction))
           " ")))

(def: representation-definition-name
  (-> Text Text)
  (|>> ($_ text\compose
           (name\encode (name-of #Representation))
           " ")))

(def: declaration
  (Parser [Text (List Text)])
  (<>.either (<c>.form (<>.and <c>.local-identifier (<>.some <c>.local-identifier)))
             (<>.and <c>.local-identifier (\ <>.monad wrap (list)))))

## TODO: Make sure the generated code always gets optimized away.
## (This applies to uses of ":abstraction" and ":representation")
(syntax: #export (abstract:
                   {export csr.export}
                   {[name type-vars] declaration}
                   representation-type
                   {annotations (<>.default cs.empty-annotations csr.annotations)}
                   {primitives (<>.some <c>.any)})
  (do meta.monad
    [current-module meta.current-module-name
     #let [type-varsC (list\map code.local-identifier type-vars)
           abstraction-declaration (` ((~ (code.local-identifier name)) (~+ type-varsC)))
           representation-declaration (` ((~ (code.local-identifier (representation-definition-name name)))
                                          (~+ type-varsC)))]
     _ (..push! [name
                 type-varsC
                 abstraction-declaration
                 representation-declaration])]
    (wrap (list& (` (type: (~+ (csw.export export)) (~ abstraction-declaration)
                      (~ (csw.annotations annotations))
                      (primitive (~ (code.text (abstraction-type-name [current-module name])))
                                 [(~+ type-varsC)])))
                 (` (type: (~ representation-declaration)
                      (~ representation-type)))
                 ($_ list\compose
                     primitives
                     (list (` ((~! ..pop!)))))))))

(syntax: #export (:transmutation value)
  (wrap (list (` (..:abstraction (..:representation (~ value)))))))

(syntax: #export (^:representation {name (<c>.form <c>.local-identifier)}
                                   body
                                   {branches (<>.some <c>.any)})
  (let [g!var (code.local-identifier name)]
    (wrap (list& g!var
                 (` (.let [(~ g!var) (..:representation (~ g!var))]
                      (~ body)))
                 branches))))
