(.module:
  lux
  (lux (control [applicative]
                [monad #+ do Monad]
                ["p" parser])
       (data [text "text/" Eq<Text> Monoid<Text>]
             ["E" error]
             (coll [list "list/" Functor<List> Monoid<List>]))
       [macro]
       (macro [code]
              ["s" syntax #+ syntax:]
              (syntax ["cs" common]
                      (common ["csr" reader]
                              ["csw" writer])))))

(def: (get k plist)
  (All [a]
    (-> Text (List [Text a]) (Maybe a)))
  (case plist
    #.Nil
    #.None

    (#.Cons [k' v] plist')
    (if (text/= k k')
      (#.Some v)
      (get k plist'))))

(def: (put k v plist)
  (All [a]
    (-> Text a (List [Text a]) (List [Text a])))
  (case plist
    #.Nil
    (list [k v])

    (#.Cons [k' v'] plist')
    (if (text/= k k')
      (#.Cons [k' v] plist')
      (#.Cons [k' v'] (put k v plist')))))

(def: (remove k plist)
  (All [a]
    (-> Text (List [Text a]) (List [Text a])))
  (case plist
    #.Nil
    #.Nil

    (#.Cons [k' v'] plist')
    (if (text/= k k')
      plist'
      (#.Cons [k' v'] (remove k plist')))))

(def: down-cast Text "@abstract")
(def: up-cast Text "@repr")
(def: macro-anns Code (' {#.macro? true}))

(def: representation-name
  (-> Text Text)
  (|>> ($_ text/compose "{" kind "@" module "}")
       (let [[module kind] (ident-for #..Representation)])))

(def: (install-casts' this-module-name name type-vars)
  (-> Text Text (List Text) (Meta Unit))
  (do macro.Monad<Meta>
    [this-module (macro.find-module this-module-name)
     #let [type-varsC (list/map code.local-symbol type-vars)
           abstract-declaration (` ((~ (code.local-symbol name)) (~+ type-varsC)))
           representation-declaration (` ((~ (code.local-symbol (representation-name name))) (~+ type-varsC)))
           this-module (|> this-module
                           (update@ #.definitions (put down-cast (: Definition
                                                                    [Macro macro-anns
                                                                     (: Macro
                                                                        (function [tokens]
                                                                          (case tokens
                                                                            (^ (list value))
                                                                            (wrap (list (` ((: (All [(~+ type-varsC)]
                                                                                                 (-> (~ representation-declaration) (~ abstract-declaration)))
                                                                                               (|>> :!!))
                                                                                            (~ value)))))

                                                                            _
                                                                            (macro.fail ($_ text/compose "Wrong syntax for " down-cast)))))])))
                           (update@ #.definitions (put up-cast (: Definition
                                                                  [Macro macro-anns
                                                                   (: Macro
                                                                      (function [tokens]
                                                                        (case tokens
                                                                          (^ (list value))
                                                                          (wrap (list (` ((: (All [(~+ type-varsC)]
                                                                                               (-> (~ abstract-declaration) (~ representation-declaration)))
                                                                                             (|>> :!!))
                                                                                          (~ value)))))

                                                                          _
                                                                          (macro.fail ($_ text/compose "Wrong syntax for " up-cast)))))]))))]]
    (function [compiler]
      (#E.Success [(update@ #.modules (put this-module-name this-module) compiler)
                   []]))))

(def: (un-install-casts' this-module-name)
  (-> Text (Meta Unit))
  (do macro.Monad<Meta>
    [this-module (macro.find-module this-module-name)
     #let [this-module (|> this-module
                           (update@ #.definitions (remove down-cast))
                           (update@ #.definitions (remove up-cast)))]]
    (function [compiler]
      (#E.Success [(update@ #.modules (put this-module-name this-module) compiler)
                   []]))))

(syntax: (install-casts [name s.local-symbol]
                        [type-vars (s.tuple (p.some s.local-symbol))])
  (do @
    [this-module-name macro.current-module-name
     ?down-cast (macro.find-macro [this-module-name down-cast])
     ?up-cast (macro.find-macro [this-module-name up-cast])]
    (case [?down-cast ?up-cast]
      [#.None #.None]
      (do @
        [_ (install-casts' this-module-name name type-vars)]
        (wrap (list)))

      _
      (macro.fail ($_ text/compose
                      "Cannot temporarily define casting functions ("
                      down-cast " & " up-cast
                      ") because definitions like that already exist.")))))

(syntax: (un-install-casts)
  (do macro.Monad<Meta>
    [this-module-name macro.current-module-name
     ?down-cast (macro.find-macro [this-module-name down-cast])
     ?up-cast (macro.find-macro [this-module-name up-cast])]
    (case [?down-cast ?up-cast]
      [(#.Some _) (#.Some _)]
      (do @
        [_ (un-install-casts' this-module-name)]
        (wrap (list)))

      _
      (macro.fail ($_ text/compose
                      "Cannot un-define casting functions ("
                      down-cast " & " up-cast
                      ") because they do not exist.")))))

(def: declaration
  (s.Syntax [Text (List Text)])
  (p.either (s.form (p.seq s.local-symbol (p.some s.local-symbol)))
            (p.seq s.local-symbol (:: p.Monad<Parser> wrap (list)))))

(syntax: #export (abstract: [export csr.export]
                   [[name type-vars] declaration]
                   [annotations (p.default cs.empty-annotations csr.annotations)]
                   representation-type
                   [primitives (p.some s.any)])
  (let [hidden-name (representation-name name)
        type-varsC (list/map code.local-symbol type-vars)
        abstract-declaration (` ((~ (code.local-symbol name)) (~+ type-varsC)))
        representation-declaration (` ((~ (code.local-symbol hidden-name)) (~+ type-varsC)))]
    (wrap (list& (` (type: (~+ (csw.export export)) (~ abstract-declaration)
                      (~ (csw.annotations annotations))
                      (primitive (~ (code.text hidden-name)) [(~+ type-varsC)])))
                 (` (type: (~+ (csw.export export)) (~ representation-declaration)
                      (~ representation-type)))
                 (` ((~! install-casts) (~ (code.local-symbol name)) [(~+ type-varsC)]))
                 (list/compose primitives
                               (list (` ((~! un-install-casts)))))))))
