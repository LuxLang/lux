(.module:
  [lux #*
   [control
    [monad (#+ do Monad)]
    ["p" parser]]
   [data
    [text ("text/." Equivalence<Text> Monoid<Text>)]
    ["." error]
    [collection
     [list ("list/." Functor<List> Monoid<List>)]]]
   ["." macro ("meta/." Monad<Meta>)
    ["." code]
    ["s" syntax (#+ syntax:)]
    [syntax
     ["cs" common]
     [common
      ["csr" reader]
      ["csw" writer]]]]
   [type (#+ :cast)]])

(def: (get k plist)
  (All [a]
    (-> Text (List [Text a]) (Maybe a)))
  (case plist
    #.Nil
    #.None

    (#.Cons [k' v] plist')
    (if (text/= k k')
      (#.Some v)
      (get k plist'))))

(def: (put k v plist)
  (All [a]
    (-> Text a (List [Text a]) (List [Text a])))
  (case plist
    #.Nil
    (list [k v])

    (#.Cons [k' v'] plist')
    (if (text/= k k')
      (#.Cons [k' v] plist')
      (#.Cons [k' v'] (put k v plist')))))

(def: (remove k plist)
  (All [a]
    (-> Text (List [Text a]) (List [Text a])))
  (case plist
    #.Nil
    #.Nil

    (#.Cons [k' v'] plist')
    (if (text/= k k')
      plist'
      (#.Cons [k' v'] (remove k plist')))))

(def: down-cast Text ":abstraction")
(def: up-cast Text ":representation")
(def: macro-anns Code (' {#.macro? #1}))

(def: representation-name
  (-> Text Text)
  (|>> ($_ text/compose "{" kind "@" module "}")
       (let [[module kind] (name-for #..Representation)])))

(def: (cast type-vars input-declaration output-declaration)
  (-> (List Code) Code Code Macro)
  (function (_ tokens)
    (case tokens
      (^ (list value))
      (meta/wrap (list (` ((~! :cast) [(~+ type-vars)] (~ input-declaration) (~ output-declaration)
                           (~ value)))))

      _
      (meta/wrap (list (` ((~! :cast) [(~+ type-vars)] (~ input-declaration) (~ output-declaration))))))))

(def: (install-casts' this-module-name name type-vars)
  (-> Text Text (List Text) (Meta Any))
  (do macro.Monad<Meta>
    [this-module (macro.find-module this-module-name)
     #let [type-varsC (list/map code.local-symbol type-vars)
           abstraction-declaration (` ((~ (code.local-symbol name)) (~+ type-varsC)))
           representation-declaration (` ((~ (code.local-symbol (representation-name name))) (~+ type-varsC)))
           this-module (|> this-module
                           (update@ #.definitions (put down-cast (: Definition
                                                                    [Macro macro-anns
                                                                     (cast type-varsC representation-declaration abstraction-declaration)])))
                           (update@ #.definitions (put up-cast (: Definition
                                                                  [Macro macro-anns
                                                                   (cast type-varsC abstraction-declaration representation-declaration)]))))]]
    (function (_ compiler)
      (#error.Success [(update@ #.modules (put this-module-name this-module) compiler)
                       []]))))

(def: (un-install-casts' this-module-name)
  (-> Text (Meta Any))
  (do macro.Monad<Meta>
    [this-module (macro.find-module this-module-name)
     #let [this-module (|> this-module
                           (update@ #.definitions (remove down-cast))
                           (update@ #.definitions (remove up-cast)))]]
    (function (_ compiler)
      (#error.Success [(update@ #.modules (put this-module-name this-module) compiler)
                       []]))))

(syntax: (install-casts {name s.local-symbol}
                        {type-vars (s.tuple (p.some s.local-symbol))})
  (do @
    [this-module-name macro.current-module-name
     ?down-cast (macro.find-macro [this-module-name down-cast])
     ?up-cast (macro.find-macro [this-module-name up-cast])]
    (case [?down-cast ?up-cast]
      [#.None #.None]
      (do @
        [_ (install-casts' this-module-name name type-vars)]
        (wrap (list)))

      _
      (macro.fail ($_ text/compose "Cannot temporarily define casting functions (" down-cast " & " up-cast ") because definitions like that already exist.")))))

(syntax: (un-install-casts)
  (do macro.Monad<Meta>
    [this-module-name macro.current-module-name
     ?down-cast (macro.find-macro [this-module-name down-cast])
     ?up-cast (macro.find-macro [this-module-name up-cast])]
    (case [?down-cast ?up-cast]
      [(#.Some _) (#.Some _)]
      (do @
        [_ (un-install-casts' this-module-name)]
        (wrap (list)))

      _
      (macro.fail ($_ text/compose "Cannot un-define casting functions (" down-cast " & " up-cast ") because they do not exist.")))))

(def: declaration
  (s.Syntax [Text (List Text)])
  (p.either (s.form (p.seq s.local-symbol (p.some s.local-symbol)))
            (p.seq s.local-symbol (:: p.Monad<Parser> wrap (list)))))

(syntax: #export (abstract:
                   {export csr.export}
                   {[name type-vars] declaration}
                   {annotations (p.default cs.empty-annotations csr.annotations)}
                   representation-type
                   {primitives (p.some s.any)})
  (let [hidden-name (representation-name name)
        type-varsC (list/map code.local-symbol type-vars)
        abstraction-declaration (` ((~ (code.local-symbol name)) (~+ type-varsC)))
        representation-declaration (` ((~ (code.local-symbol hidden-name)) (~+ type-varsC)))]
    (wrap (list& (` (type: (~+ (csw.export export)) (~ abstraction-declaration)
                      (~ (csw.annotations annotations))
                      (primitive (~ (code.text hidden-name)) [(~+ type-varsC)])))
                 (` (type: (~+ (csw.export export)) (~ representation-declaration)
                      (~ representation-type)))
                 (` ((~! install-casts) (~ (code.local-symbol name)) [(~+ type-varsC)]))
                 (list/compose primitives
                               (list (` ((~! un-install-casts)))))))))

(syntax: #export (^:representation {name (s.form s.local-symbol)}
                                   body
                                   {branches (p.some s.any)})
  (let [g!representation (code.local-symbol name)]
    (do @
      [current-module macro.current-module-name
       #let [g!:representation (code.symbol [current-module up-cast])]]
      (wrap (list& g!representation
                   (` (.let [(~ g!representation) ((~ g!:representation) (~ g!representation))]
                        (~ body)))
                   branches)))))
