(.module:
  [lux #*])

(signature: #export (Monoid a)
  {#.doc (doc "A way to compose values."
              "Includes an identity value which does not alter any other value when combined with.")}
  (: a
     identity)
  (: (-> a a a)
     compose))

(def: #export (compose left right)
  (All [l r] (-> (Monoid l) (Monoid r) (Monoid [l r])))
  (structure
   (def: identity
     [(\ left identity) (\ right identity)])
   
   (def: (compose [lL rL] [lR rR])
     [(\ left compose lL lR)
      (\ right compose rL rR)])))
