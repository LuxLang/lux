(.module:
  lux
  [//
   ["." equivalence (#+ Equivalence)]])

(signature: #export (Hash a)
  {#.doc (doc "A way to produce hash-codes for a type's instances."
              "A necessity when working with some data-structures, such as dictionaries or sets.")}
  (: (Equivalence a)
     &equivalence)
  (: (-> a Nat)
     hash))

(def: #export (product leftH rightH)
  (All [l r] (-> (Hash l) (Hash r) (Hash [l r])))
  (structure
   (def: &equivalence
     (equivalence.product (:: leftH &equivalence)
                          (:: rightH &equivalence)))
   (def: (hash [leftV rightV])
     (n/* (:: leftH hash leftV)
          (:: rightH hash rightV)))))
