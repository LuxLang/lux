(.module:
  [lux #*]
  [//
   ["." equivalence (#+ Equivalence)]
   [functor
    ["." contravariant]]])

(interface: #export (Hash a)
  {#.doc (doc "A way to produce hash-codes for a type's instances."
              "A necessity when working with some data-structures, such as dictionaries or sets.")}
  (: (Equivalence a)
     &equivalence)
  (: (-> a Nat)
     hash))

(implementation: #export functor
  (contravariant.Functor Hash)
  
  (def: (map f super)
    (implementation
     (def: &equivalence
       (\ equivalence.functor map f
          (\ super &equivalence)))
     
     (def: hash
       (|>> f (\ super hash))))))
