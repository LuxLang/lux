(.module:
  [lux #*]
  [//
   ["." equivalence (#+ Equivalence)]])

(signature: #export (Hash a)
  {#.doc (doc "A way to produce hash-codes for a type's instances."
              "A necessity when working with some data-structures, such as dictionaries or sets.")}
  (: (Equivalence a)
     &equivalence)
  (: (-> a Nat)
     hash))

(def: #export (sum left right)
  (All [l r] (-> (Hash l) (Hash r) (Hash (| l r))))
  (structure
   (def: &equivalence
     (equivalence.sum (:: left &equivalence)
                      (:: right &equivalence)))
   (def: (hash value)
     (<| (:coerce Nat)
         (case value
           (#.Left value)
           ("lux i64 *" +2 (:coerce Int (:: left hash value)))

           (#.Right value)
           ("lux i64 *" +3 (:coerce Int (:: right hash value))))))))

(def: #export (product left right)
  (All [l r] (-> (Hash l) (Hash r) (Hash (& l r))))
  (structure
   (def: &equivalence
     (equivalence.product (:: left &equivalence)
                          (:: right &equivalence)))
   (def: (hash [leftV rightV])
     (:coerce Nat
              ("lux i64 +"
               (:coerce Int (:: left hash leftV))
               (:coerce Int (:: right hash rightV)))))))
