(.module:
  [lux #*]
  [//
   [functor (#+ Contravariant)]])

(signature: #export (Equivalence a)
  {#.doc "Equivalence for a type's instances."}
  (: (-> a a Bit)
     =))

(def: #export (product left right)
  (All [l r] (-> (Equivalence l) (Equivalence r) (Equivalence [l r])))
  (structure
   (def: (= [a b] [x y])
     (and (:: left = a x)
          (:: right = b y)))))

(def: #export (sum left right)
  (All [l r] (-> (Equivalence l) (Equivalence r) (Equivalence (| l r))))
  (structure
   (def: (= reference sample)
     (case [reference sample]
       [(#.Left reference) (#.Left sample)]
       (:: left = reference sample)

       [(#.Right reference) (#.Right sample)]
       (:: right = reference sample)

       _
       false))))

(def: #export (rec sub)
  (All [a] (-> (-> (Equivalence a) (Equivalence a)) (Equivalence a)))
  (structure
   (def: (= left right)
     (sub (rec sub) left right))))

(structure: #export contravariant
  (Contravariant Equivalence)
  
  (def: (map-1 f equivalence)
    (structure
     (def: (= reference sample)
       (:: equivalence = (f reference) (f sample))))))
