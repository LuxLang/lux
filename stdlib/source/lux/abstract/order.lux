(.module:
  [lux #*
   [control
    ["." function]]]
  [//
   [functor (#+ Contravariant)]
   ["." equivalence (#+ Equivalence)]])

(signature: #export (Order a)
  {#.doc "A signature for types that possess some sense of ordering among their elements."}
  
  (: (Equivalence a)
     &equivalence)

  (: (-> a a Bit)
     <)
  )

(type: #export (Comparison a)
  (-> (Order a) a a Bit))

(def: #export (<= order parameter subject)
  Comparison
  (or (:: order < parameter subject)
      (:: order = parameter subject)))

(def: #export (> order parameter subject)
  Comparison
  (:: order < subject parameter))

(def: #export (>= order parameter subject)
  Comparison
  (or (:: order < subject parameter)
      (:: order = subject parameter)))

(type: #export (Choice a)
  (-> (Order a) a a a))

(def: #export (min order x y)
  Choice
  (if (:: order < y x) x y))

(def: #export (max order x y)
  Choice
  (if (:: order < y x) y x))

(structure: #export contravariant (Contravariant Order)
  (def: (map-1 f order)
    (structure
     (def: &equivalence (:: equivalence.contravariant map-1 f (:: order &equivalence)))
     
     (def: (< reference sample)
       (:: order < (f reference) (f sample))))))
