(.module:
  [lux #*]
  [///
   [functor (#+ Functor)]
   [apply (#+ Apply)]
   [monad (#+ Monad)]])

(type: #export (Free F a)
  {#.doc "The Free Monad."}
  (#Pure a)
  (#Effect (F (Free F a))))

(structure: #export (functor dsl)
  (All [F] (-> (Functor F) (Functor (Free F))))
  
  (def: (map f ea)
    (case ea
      (#Pure a)
      (#Pure (f a))
      
      (#Effect value)
      (#Effect (\ dsl map (map f) value)))))

(structure: #export (apply dsl)
  (All [F] (-> (Functor F) (Apply (Free F))))
  
  (def: &functor (..functor dsl))

  (def: (apply ef ea)
    (case [ef ea]
      [(#Pure f) (#Pure a)]
      (#Pure (f a))

      [(#Pure f) (#Effect fa)]
      (#Effect (\ dsl map
                  (\ (..functor dsl) map f)
                  fa))

      [(#Effect ff) _]
      (#Effect (\ dsl map
                  (function (_ f) (apply f ea))
                  ff))
      )))

(structure: #export (monad dsl)
  (All [F] (-> (Functor F) (Monad (Free F))))

  (def: &functor (..functor dsl))

  (def: (wrap a)
    (#Pure a))

  (def: (join efefa)
    (case efefa
      (#Pure efa)
      (case efa
        (#Pure a)
        (#Pure a)

        (#Effect fa)
        (#Effect fa))
      
      (#Effect fefa)
      (#Effect (\ dsl map
                  (\ (monad dsl) join)
                  fefa))
      )))
