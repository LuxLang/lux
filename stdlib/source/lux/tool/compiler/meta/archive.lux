(.module:
  [lux (#- Module)
   [abstract
    ["." equivalence (#+ Equivalence)]
    ["." monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]
    ["." function]
    ["<>" parser
     ["<b>" binary (#+ Parser)]]]
   [data
    [binary (#+ Binary)]
    ["." product]
    ["." name]
    ["." text
     ["%" format (#+ format)]]
    [format
     ["." binary (#+ Writer)]]
    [number
     ["n" nat ("#@." equivalence)]]
    [collection
     ["." list ("#@." functor fold)]
     ["." dictionary (#+ Dictionary)]
     ["." set]]]
   [type
    abstract]
   [world
    [file (#+ File)]]]
  [/
   ["." signature (#+ Signature)]
   ["." key (#+ Key)]
   ["." descriptor (#+ Module Descriptor)]
   ["." document (#+ Document)]
   [///
    [version (#+ Version)]]])

(exception: #export (unknown-document {module Module}
                                      {known-modules (List Module)})
  (exception.report
   ["Module" module]
   ["Known Modules" (exception.enumerate function.identity known-modules)]))

(exception: #export (cannot-replace-document {module Module}
                                             {old (Document Any)}
                                             {new (Document Any)})
  (exception.report
   ["Module" module]
   ["Old key" (signature.description (document.signature old))]
   ["New key" (signature.description (document.signature new))]))

(exception: #export (module-has-already-been-reserved {module Module})
  (exception.report
   ["Module" module]))

(exception: #export (module-must-be-reserved-before-it-can-be-added {module Module})
  (exception.report
   ["Module" module]))

(exception: #export (module-is-only-reserved {module Module})
  (exception.report
   ["Module" module]))

(type: #export ID Nat)

(def: #export runtime-module Module "")

(abstract: #export Archive
  {}
  
  {#next ID
   #resolver (Dictionary Module [ID (Maybe [Descriptor (Document Any)])])}

  (def: next
    (-> Archive ID)
    (|>> :representation (get@ #next)))

  (def: #export empty
    Archive
    (:abstraction {#next 0
                   #resolver (dictionary.new text.hash)}))

  (def: #export (id module archive)
    (-> Module Archive (Try ID))
    (let [(^slots [#..resolver]) (:representation archive)]
      (case (dictionary.get module resolver)
        (#.Some [id _])
        (#try.Success id)
        
        #.None
        (exception.throw ..unknown-document [module
                                             (dictionary.keys resolver)]))))

  (def: #export (reserve module archive)
    (-> Module Archive (Try [ID Archive]))
    (let [(^slots [#..next #..resolver]) (:representation archive)]
      (case (dictionary.get module resolver)
        (#.Some _)
        (exception.throw ..module-has-already-been-reserved [module])
        
        #.None
        (#try.Success [next
                       (|> archive
                           :representation
                           (update@ #..resolver (dictionary.put module [next #.None]))
                           (update@ #..next inc)
                           :abstraction)]))))

  (def: #export (add module [descriptor document] archive)
    (-> Module [Descriptor (Document Any)] Archive (Try Archive))
    (let [(^slots [#..resolver]) (:representation archive)]
      (case (dictionary.get module resolver)
        (#.Some [id #.None])
        (#try.Success (|> archive
                          :representation
                          (update@ #..resolver (dictionary.put module [id (#.Some [descriptor document])]))
                          :abstraction))
        
        (#.Some [id (#.Some [existing-descriptor existing-document])])
        (if (is? document existing-document)
          ## TODO: Find out why this code allows for the same module to be added more than once. It looks fishy...
          (#try.Success archive)
          (exception.throw ..cannot-replace-document [module existing-document document]))
        
        #.None
        (exception.throw ..module-must-be-reserved-before-it-can-be-added [module]))))

  (def: #export (find module archive)
    (-> Module Archive (Try [Descriptor (Document Any)]))
    (let [(^slots [#..resolver]) (:representation archive)]
      (case (dictionary.get module resolver)
        (#.Some [id (#.Some document)])
        (#try.Success document)

        (#.Some [id #.None])
        (exception.throw ..module-is-only-reserved [module])
        
        #.None
        (exception.throw ..unknown-document [module
                                             (dictionary.keys resolver)]))))

  (def: #export (archived? archive module)
    (-> Archive Module Bit)
    (case (find module archive)
      (#try.Success _)
      yes

      (#try.Failure _)
      no))

  (def: #export archived
    (-> Archive (List Module))
    (|>> :representation
         (get@ #resolver)
         dictionary.entries
         (list.search-all (function (_ [module [id descriptor+document]])
                            (case descriptor+document
                              (#.Some _) (#.Some module)
                              #.None #.None)))))

  (def: #export reserved
    (-> Archive (List Module))
    (|>> :representation
         (get@ #resolver)
         dictionary.keys))

  (def: #export reservations
    (-> Archive (List [Module ID]))
    (|>> :representation
         (get@ #resolver)
         dictionary.entries
         (list@map (function (_ [module [id _]])
                     [module id]))))

  (def: #export (merge additions archive)
    (-> Archive Archive (Try Archive))
    (|> additions
        :representation
        (get@ #resolver)
        dictionary.entries
        (monad.fold try.monad
                    (function (_ [module' [id descriptor+document']] archive')
                      (case descriptor+document'
                        (#.Some descriptor+document')
                        (if (archived? archive' module')
                          (#try.Success archive')
                          (..add module' descriptor+document' archive'))
                        
                        #.None
                        (#try.Success archive')))
                    archive)))

  (type: Reservation [Module ID])
  (type: Frozen [Version ID (List Reservation)])
  
  (def: reader
    (Parser ..Frozen)
    ($_ <>.and
        <b>.nat
        <b>.nat
        (<b>.list (<>.and <b>.text <b>.nat))))

  (def: writer
    (Writer ..Frozen)
    ($_ binary.and
        binary.nat
        binary.nat
        (binary.list (binary.and binary.text binary.nat))))
  
  (def: #export (export version archive)
    (-> Version Archive Binary)
    (let [(^slots [#..next #..resolver]) (:representation archive)]
      (|> resolver
          dictionary.entries
          (list.search-all (function (_ [module [id descriptor+document]])
                             (case descriptor+document
                               (#.Some _) (#.Some [module id])
                               #.None #.None)))
          [version next]
          (binary.run ..writer))))

  (exception: #export (version-mismatch {expected Version} {actual Version})
    (exception.report
     ["Expected" (%.nat expected)]
     ["Actual" (%.nat actual)]))

  (exception: #export corrupt-data)

  (def: (correct-modules? reservations)
    (-> (List Reservation) Bit)
    (n.= (list.size reservations)
         (|> reservations
             (list@map product.left)
             (set.from-list text.hash)
             set.size)))

  (def: (correct-ids? reservations)
    (-> (List Reservation) Bit)
    (n.= (list.size reservations)
         (|> reservations
             (list@map product.right)
             (set.from-list n.hash)
             set.size)))

  (def: (correct-reservations? reservations)
    (-> (List Reservation) Bit)
    (and (correct-modules? reservations)
         (correct-ids? reservations)))

  (def: #export (import expected binary)
    (-> Version Binary (Try Archive))
    (do try.monad
      [[actual next reservations] (<b>.run ..reader binary)
       _ (exception.assert ..version-mismatch [expected actual]
                           (n@= expected actual))
       _ (exception.assert ..corrupt-data []
                           (correct-reservations? reservations))]
      (wrap (:abstraction
             {#next next
              #resolver (list@fold (function (_ [module id] archive)
                                     (dictionary.put module [id #.None] archive))
                                   (get@ #resolver (:representation ..empty))
                                   reservations)}))))
  )
