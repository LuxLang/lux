(.module:
  [lux (#- Module)
   [abstract
    ["." equivalence (#+ Equivalence)]
    ["." monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["ex" exception (#+ exception:)]]
   [data
    ["." name]
    ["." text]
    [collection
     ["." dictionary (#+ Dictionary)]]]
   [type
    abstract]
   [world
    [file (#+ File)]]]
  [/
   ["." signature (#+ Signature)]
   ["." key (#+ Key)]
   ["." descriptor (#+ Module Descriptor)]
   ["." document (#+ Document)]])

(exception: #export (unknown-document {module Module})
  (ex.report ["Module" module]))

(exception: #export (cannot-replace-document {module Module}
                                             {old (Document Any)}
                                             {new (Document Any)})
  (ex.report ["Module" module]
             ["Old key" (signature.description (document.signature old))]
             ["New key" (signature.description (document.signature new))]))

(abstract: #export Archive
  {}
  
  (Dictionary Module [Descriptor (Document Any)])

  (def: #export empty
    Archive
    (:abstraction (dictionary.new text.hash)))

  (def: #export (add module [descriptor document] archive)
    (-> Module [Descriptor (Document Any)] Archive (Try Archive))
    (case (dictionary.get module (:representation archive))
      (#.Some [existing-descriptor existing-document])
      (if (is? document existing-document)
        (#try.Success archive)
        (ex.throw cannot-replace-document [module existing-document document]))
      
      #.None
      (#try.Success (|> archive
                        :representation
                        (dictionary.put module [descriptor document])
                        :abstraction))))

  (def: #export (find module archive)
    (-> Module Archive (Try [Descriptor (Document Any)]))
    (case (dictionary.get module (:representation archive))
      (#.Some document)
      (#try.Success document)
      
      #.None
      (ex.throw unknown-document [module])))

  (def: #export (archived? archive module)
    (-> Archive Module Bit)
    (case (find module archive)
      (#try.Success _)
      yes

      (#try.Failure _)
      no))

  (def: #export archived
    (-> Archive (List Module))
    (|>> :representation dictionary.keys))

  (def: #export (merge additions archive)
    (-> Archive Archive (Try Archive))
    (monad.fold try.monad
                (function (_ [module' descriptor+document'] archive')
                  (..add module' descriptor+document' archive'))
                archive
                (dictionary.entries (:representation additions))))
  )
