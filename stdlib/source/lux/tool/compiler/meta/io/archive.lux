(.module:
  [lux (#- Module)
   ["@" target (#+ Host)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]
    [concurrency
     ["." promise (#+ Promise)]]
    [security
     ["!" capability (#+ capability:)]]]
   [data
    [binary (#+ Binary)]
    ["." text
     ["%" format (#+ format)]]]
   [world
    ["." file (#+ Path File Directory System)]]]
  ["." // (#+ Module)
   ["/#" //
    ["." archive (#+ Archive)]]])

(exception: #export (cannot-prepare {archive Path}
                                    {module-id archive.ID}
                                    {error Text})
  (exception.report
   ["Archive" archive]
   ["Module ID" (%.nat module-id)]
   ["Error" error]))

(def: #export (archive system host root)
  (-> (System Promise) Host Path Path)
  (format root (:: system separator) host))

(def: #export (lux-archive system host root)
  (-> (System Promise) Host Path Path)
  (format (..archive system host root)
          (:: system separator)
          //.lux-context))

(def: #export (document system host root module-id)
  (-> (System Promise) Host Path archive.ID Path)
  (format (..lux-archive system host root)
          (:: system separator)
          (%.nat module-id)))

(def: #export (artifact system host root module-id name extension)
  (-> (System Promise) Host Path archive.ID Text Text Path)
  (format (document system host root module-id)
          (:: system separator)
          name
          extension))

(def: #export (prepare system host root module-id)
  (-> (System Promise) Host Path archive.ID (Promise (Try Any)))
  (do promise.monad
    [#let [document (..document system host root module-id)]
     document-exists? (file.exists? promise.monad system document)]
    (if document-exists?
      (wrap (#try.Success []))
      (do @
        [_ (file.get-directory @ system (..lux-archive system host root))
         outcome (!.use (:: system create-directory) document)]
        (case outcome
          (#try.Success output)
          (wrap (#try.Success []))

          (#try.Failure error)
          (wrap (exception.throw ..cannot-prepare [(..archive system host root)
                                                   module-id
                                                   error])))))))

(def: #export (write system host root module-id name extension content)
  (-> (System Promise) Host Path archive.ID Text Text Binary (Promise (Try Any)))
  (do (try.with promise.monad)
    [artifact (: (Promise (Try (File Promise)))
                 (file.get-file promise.monad system
                                (..artifact system host root module-id name extension)))]
    (!.use (:: artifact over-write) content)))

(def: #export (enable system host root)
  (-> (System Promise) Host Path (Promise (Try Any)))
  (do (try.with promise.monad)
    [_ (: (Promise (Try (Directory Promise)))
          (file.get-directory promise.monad system root))
     _ (: (Promise (Try (Directory Promise)))
          (file.get-directory promise.monad system (..archive system host root)))]
    (wrap [])))

(def: (general-descriptor system host root)
  (-> (System Promise) Host Path Path)
  (format (..archive system host root)
          (:: system separator)
          "general-descriptor"))

(def: #export (freeze system host root archive)
  (-> (System Promise) Host Path Archive (Promise (Try Any)))
  (do (try.with promise.monad)
    [file (: (Promise (Try (File Promise)))
             (file.get-file promise.monad system (..general-descriptor system host root)))]
    (!.use (:: file over-write) (archive.export ///.version archive))))

(def: #export (thaw system host root)
  (-> (System Promise) Host Path (Promise (Try Archive)))
  (do promise.monad
    [file (!.use (:: system file) (..general-descriptor system host root))]
    (case file
      (#try.Success file)
      (do (try.with promise.monad)
        [binary (!.use (:: file content) [])]
        (:: promise.monad wrap (archive.import ///.version binary)))
      
      (#try.Failure error)
      (wrap (#try.Success archive.empty)))))
