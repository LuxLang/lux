(.module:
  [lux (#- Module Code)
   ["@" target]
   [abstract
    [monad (#+ Monad do)]]
   [control
    ["ex" exception (#+ Exception exception:)]
    [security
     ["!" capability]]]
   [data
    ["." error (#+ Error)]
    ["." text ("#;." hash)
     format
     ["." encoding]]]
   [world
    ["." file (#+ Path File)]
    [binary (#+ Binary)]]
   [type (#+ :share)]]
  ["." // (#+ Context Code)
   ["#/" // #_
    [archive
     [descriptor (#+ Module)]]
    ["#/" // (#+ Input)]]])

(template [<name>]
  [(exception: #export (<name> {module Module})
     (ex.report ["Module" module]))]

  [cannot-find-module]
  [cannot-read-module]
  )

(type: #export Extension Text)

(def: lux-extension
  Extension
  ".lux")

(def: #export (path system context module)
  (All [m] (-> (file.System m) Context Module Path))
  (|> module
      (//.sanitize system)
      (format context (:: system separator))))

(def: (find-source-file monad system contexts module extension)
  (All [!]
    (-> (Monad !) (file.System !) (List Context) Module Extension
        (! (Error [Path (File !)]))))
  (case contexts
    #.Nil
    (:: monad wrap (ex.throw ..cannot-find-module [module]))

    (#.Cons context contexts')
    (do monad
      [#let [path (format (..path system context module) extension)]
       file (!.use (:: system file) path)]
      (case file
        (#error.Success file)
        (wrap (#error.Success [path file]))

        (#error.Failure error)
        (find-source-file monad system contexts' module extension)))))

(def: #export (find-any-source-file monad system contexts partial-host-extension module)
  (All [!]
    (-> (Monad !) (file.System !) (List Context) Text Module
        (! (Error [Path (File !)]))))
  (let [full-host-extension (format partial-host-extension lux-extension)]
    (do monad
      [outcome (find-source-file monad system contexts module full-host-extension)]
      (case outcome
        (#error.Success output)
        (wrap outcome)

        (#error.Failure error)
        (find-source-file monad system contexts module ..lux-extension)))))

(def: #export (read monad system contexts partial-host-extension module)
  (All [!]
    (-> (Monad !) (file.System !) (List Context) Text Module
        (! (Error Input))))
  (do (error.with monad)
    [## TODO: Get rid of both ":share"s ASAP
     path,file (:share [!]
                       {(Monad !)
                        monad}
                       {(! (Error [Path (File !)]))
                        (find-any-source-file monad system contexts partial-host-extension module)})
     #let [[path file] (:share [!]
                               {(Monad !)
                                monad}
                               {[Path (File !)]
                                path,file})]
     binary (!.use (:: file content) [])]
    (case (encoding.from-utf8 binary)
      (#error.Success code)
      (wrap {#////.module module
             #////.file path
             #////.hash (text;hash code)
             #////.code code})
      
      (#error.Failure _)
      (:: monad wrap (ex.throw ..cannot-read-module [module])))))
