(.module:
  [lux (#- Module Code)
   ["@" target]
   [abstract
    [predicate (#+ Predicate)]
    ["." monad (#+ Monad do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]
    [security
     ["!" capability]]
    [concurrency
     ["." promise (#+ Promise) ("#\." monad)]]]
   [data
    [binary (#+ Binary)]
    ["." text ("#\." hash)
     ["%" format (#+ format)]
     ["." encoding]]
    [collection
     ["." dictionary (#+ Dictionary)]]]
   [world
    ["." file (#+ Path File)]]]
  [program
   [compositor
    [import (#+ Import)]]]
  ["." // (#+ Context Code)
   ["/#" // #_
    [archive
     [descriptor (#+ Module)]]
    ["/#" // (#+ Input)]]])

(template [<name>]
  [(exception: #export (<name> {module Module})
     (exception.report
      ["Module" (%.text module)]))]

  [cannot-find-module]
  [cannot-read-module]
  )

(type: #export Extension
  Text)

(def: lux-extension
  Extension
  ".lux")

(def: #export (path system context module)
  (All [m] (-> (file.System m) Context Module Path))
  (|> module
      (//.sanitize system)
      (format context (:: system separator))))

(def: (find-source-file system contexts module extension)
  (-> (file.System Promise) (List Context) Module Extension
      (Promise (Try [Path (File Promise)])))
  (case contexts
    #.Nil
    (promise\wrap (exception.throw ..cannot-find-module [module]))

    (#.Cons context contexts')
    (do promise.monad
      [#let [path (format (..path system context module) extension)]
       file (!.use (:: system file) [path])]
      (case file
        (#try.Success file)
        (wrap (#try.Success [path file]))

        (#try.Failure _)
        (find-source-file system contexts' module extension)))))

(def: (full-host-extension partial-host-extension)
  (-> Extension Extension)
  (format partial-host-extension ..lux-extension))

(def: (find-local-source-file system import contexts partial-host-extension module)
  (-> (file.System Promise) Import (List Context) Extension Module
      (Promise (Try [Path Binary])))
  ## Preference is explicitly being given to Lux files that have a host extension.
  ## Normal Lux files (i.e. without a host extension) are then picked as fallback files.
  (do {! promise.monad}
    [outcome (..find-source-file system contexts module (..full-host-extension partial-host-extension))]
    (case outcome
      (#try.Success [path file])
      (do (try.with !)
        [data (!.use (:: file content) [])]
        (wrap [path data]))

      (#try.Failure _)
      (do (try.with !)
        [[path file] (..find-source-file system contexts module ..lux-extension)
         data (!.use (:: file content) [])]
        (wrap [path data])))))

(def: (find-library-source-file import partial-host-extension module)
  (-> Import Extension Module (Try [Path Binary]))
  (let [path (format module (..full-host-extension partial-host-extension))]
    (case (dictionary.get path import)
      (#.Some data)
      (#try.Success [path data])

      #.None
      (let [path (format module ..lux-extension)]
        (case (dictionary.get path import)
          (#.Some data)
          (#try.Success [path data])

          #.None
          (exception.throw ..cannot-find-module [module]))))))

(def: (find-any-source-file system import contexts partial-host-extension module)
  (-> (file.System Promise) Import (List Context) Extension Module
      (Promise (Try [Path Binary])))
  ## Preference is explicitly being given to Lux files that have a host extension.
  ## Normal Lux files (i.e. without a host extension) are then picked as fallback files.
  (do {! promise.monad}
    [outcome (find-local-source-file system import contexts partial-host-extension module)]
    (case outcome
      (#try.Success [path data])
      (wrap outcome)

      (#try.Failure _)
      (wrap (..find-library-source-file import partial-host-extension module)))))

(def: #export (read system import contexts partial-host-extension module)
  (-> (file.System Promise) Import (List Context) Extension Module
      (Promise (Try Input)))
  (do (try.with promise.monad)
    [[path binary] (..find-any-source-file system import contexts partial-host-extension module)]
    (case (encoding.from-utf8 binary)
      (#try.Success code)
      (wrap {#////.module module
             #////.file path
             #////.hash (text\hash code)
             #////.code code})
      
      (#try.Failure _)
      (promise\wrap (exception.throw ..cannot-read-module [module])))))

(type: #export Enumeration
  (Dictionary Path Binary))

(exception: #export (cannot-clean-path {prefix Path} {path Path})
  (exception.report
   ["Prefix" (%.text prefix)]
   ["Path" (%.text path)]))

(def: (clean-path system context path)
  (All [!] (-> (file.System !) Context Path (Try Path)))
  (let [prefix (format context (:: system separator))]
    (case (text.split-with prefix path)
      #.None
      (exception.throw ..cannot-clean-path [prefix path])
      
      (#.Some [_ path])
      (#try.Success path))))

(def: (enumerate-context system context enumeration)
  (-> (file.System Promise) Context Enumeration (Promise (Try Enumeration)))
  (do {! (try.with promise.monad)}
    [directory (!.use (:: system directory) [context])]
    (loop [directory directory
           enumeration enumeration]
      (do !
        [files (!.use (:: directory files) [])
         enumeration (monad.fold ! (function (_ file enumeration)
                                     (let [path (!.use (:: file path) [])]
                                       (if (text.ends-with? ..lux-extension path)
                                         (do !
                                           [path (promise\wrap (..clean-path system context path))
                                            source-code (!.use (:: file content) [])]
                                           (promise\wrap
                                            (dictionary.try-put path source-code enumeration)))
                                         (wrap enumeration))))
                                 enumeration
                                 files)
         directories (!.use (:: directory directories) [])]
        (monad.fold ! recur enumeration directories)))))

(def: Action
  (type (All [a] (Promise (Try a)))))

(def: #export (enumerate system contexts)
  (-> (file.System Promise) (List Context) (Action Enumeration))
  (monad.fold (: (Monad Action)
                 (try.with promise.monad))
              (enumerate-context system)
              (: Enumeration
                 (dictionary.new text.hash))
              contexts))
