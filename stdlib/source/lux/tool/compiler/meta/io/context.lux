(.module:
  [lux (#- Module Code)
   ["@" target]
   [abstract
    [monad (#+ Monad do)]]
   [control
    ["." try (#+ Try)]
    ["ex" exception (#+ Exception exception:)]
    [security
     ["!" capability]]
    [concurrency
     ["." promise (#+ Promise)]]]
   [data
    [binary (#+ Binary)]
    ["." text ("#;." hash)
     ["%" format (#+ format)]
     ["." encoding]]]
   [world
    ["." file (#+ Path File)]]]
  ["." // (#+ Context Code)
   ["#/" // #_
    [archive
     [descriptor (#+ Module)]]
    ["#/" // (#+ Input)]]])

(template [<name>]
  [(exception: #export (<name> {module Module})
     (ex.report ["Module" module]))]

  [cannot-find-module]
  [cannot-read-module]
  )

(type: #export Extension Text)

(def: lux-extension
  Extension
  ".lux")

(def: #export (path system context module)
  (All [m] (-> (file.System m) Context Module Path))
  (|> module
      (//.sanitize system)
      (format context (:: system separator))))

(def: (find-source-file system contexts module extension)
  (-> (file.System Promise) (List Context) Module Extension
      (Promise (Try [Path (File Promise)])))
  (case contexts
    #.Nil
    (:: promise.monad wrap (ex.throw ..cannot-find-module [module]))

    (#.Cons context contexts')
    (do promise.monad
      [#let [path (format (..path system context module) extension)]
       file (!.use (:: system file) path)]
      (case file
        (#try.Success file)
        (wrap (#try.Success [path file]))

        (#try.Failure _)
        (find-source-file system contexts' module extension)))))

(def: #export (find-any-source-file system contexts partial-host-extension module)
  (-> (file.System Promise) (List Context) Text Module
      (Promise (Try [Path (File Promise)])))
  (let [full-host-extension (format partial-host-extension lux-extension)]
    (do promise.monad
      [outcome (find-source-file system contexts module full-host-extension)]
      (case outcome
        (#try.Success output)
        (wrap outcome)

        (#try.Failure _)
        (find-source-file system contexts module ..lux-extension)))))

(def: #export (read system contexts partial-host-extension module)
  (-> (file.System Promise) (List Context) Text Module
      (Promise (Try Input)))
  (do (try.with promise.monad)
    [[path file] (..find-any-source-file system contexts partial-host-extension module)
     binary (!.use (:: file content) [])]
    (case (encoding.from-utf8 binary)
      (#try.Success code)
      (wrap {#////.module module
             #////.file path
             #////.hash (text;hash code)
             #////.code code})
      
      (#try.Failure _)
      (:: promise.monad wrap (ex.throw ..cannot-read-module [module])))))
