(.module:
  [lux (#- Module Definition)
   [type (#+ :share)]
   ["." host (#+ import: do_to)]
   [abstract
    ["." monad (#+ Monad do)]]
   [control
    ["." try (#+ Try)]
    [concurrency
     ["." promise (#+ Promise)]]
    [security
     ["!" capability]]]
   [data
    ["." binary (#+ Binary)]
    ["." text
     ["%" format (#+ format)]]
    [number
     ["n" nat]]
    [collection
     ["." row (#+ Row)]
     ["." list ("#\." functor)]]]
   [target
    [jvm
     [encoding
      ["." name]]]]
   [world
    ["." file (#+ File Directory)]]]
  [program
   [compositor
    ["." static (#+ Static)]]]
  ["." // (#+ Packager)
   [//
    ["." archive
     ["." descriptor (#+ Module)]
     ["." artifact]]
    ["." io #_
     ["#" archive]]
    [//
     [language
      ["$" lux
       [generation (#+ Context)]
       [phase
        [generation
         [jvm
          ["." runtime (#+ Definition)]]]]]]]]])

(import: java/lang/Object)

(import: java/lang/String)

(import: java/util/jar/Attributes
  ["#::."
   (put [java/lang/Object java/lang/Object] #? java/lang/Object)])

(import: java/util/jar/Attributes$Name
  ["#::."
   (#static MAIN_CLASS java/util/jar/Attributes$Name)
   (#static MANIFEST_VERSION java/util/jar/Attributes$Name)])

(import: java/util/jar/Manifest
  ["#::."
   (new [])
   (getMainAttributes [] java/util/jar/Attributes)])

(import: java/io/Flushable
  ["#::."
   (flush [] void)])

(import: java/io/Closeable
  ["#::."
   (close [] void)])

(import: java/io/OutputStream)

(import: java/io/ByteArrayOutputStream
  ["#::."
   (new [int])
   (toByteArray [] [byte])])

(import: java/util/zip/ZipEntry)

(import: java/util/zip/ZipOutputStream
  ["#::."
   (write [[byte] int int] void)
   (closeEntry [] void)])

(import: java/util/jar/JarEntry
  ["#::."
   (new [java/lang/String])])

(import: java/util/jar/JarOutputStream
  ["#::."
   (new [java/io/OutputStream java/util/jar/Manifest])
   (putNextEntry [java/util/zip/ZipEntry] void)])

(def: byte 1)
## https://en.wikipedia.org/wiki/Kibibyte
(def: kibi_byte (n.* 1,024 byte))
## https://en.wikipedia.org/wiki/Mebibyte
(def: mebi_byte (n.* 1,024 kibi_byte))

(def: manifest_version "1.0")

(def: (manifest program)
  (-> Context java/util/jar/Manifest)
  (let [manifest (java/util/jar/Manifest::new)]
    (exec (do_to (java/util/jar/Manifest::getMainAttributes manifest)
            (java/util/jar/Attributes::put (java/util/jar/Attributes$Name::MAIN_CLASS) (|> program runtime.class_name name.internal name.external))
            (java/util/jar/Attributes::put (java/util/jar/Attributes$Name::MANIFEST_VERSION) ..manifest_version))
      manifest)))

## TODO: Delete ASAP
(type: (Action ! a)
  (! (Try a)))

(def: (write_class monad file_system static context sink)
  (All [!]
    (-> (Monad !) (file.System !) Static Context java/util/jar/JarOutputStream
        (Action ! java/util/jar/JarOutputStream)))
  (do (try.with monad)
    [artifact (let [[module artifact] context]
                (!.use (\ file_system file) [(io.artifact file_system static module (%.nat artifact))]))
     content (!.use (\ artifact content) [])
     #let [class_path (format (runtime.class_name context) (get@ #static.artifact_extension static))]]
    (wrap (do_to sink
            (java/util/jar/JarOutputStream::putNextEntry (java/util/jar/JarEntry::new class_path))
            (java/util/zip/ZipOutputStream::write content +0 (.int (binary.size content)))
            (java/io/Flushable::flush)
            (java/util/zip/ZipOutputStream::closeEntry)))))

(def: (write_module monad file_system static [module artifacts] sink)
  (All [!]
    (-> (Monad !) (file.System !) Static [archive.ID (List artifact.ID)] java/util/jar/JarOutputStream
        (Action ! java/util/jar/JarOutputStream)))
  (monad.fold (:assume (try.with monad))
              (function (_ artifact sink)
                (..write_class monad file_system static [module artifact] sink))
              sink
              artifacts))

(def: #export (package monad file_system static archive program)
  (All [!] (Packager !))
  (do {! (try.with monad)}
    [cache (:share [!]
                   {(Monad !)
                    monad}
                   {(! (Try (Directory !)))
                    (:assume (!.use (\ file_system directory) [(get@ #static.target static)]))})
     order (|> archive
               archive.archived
               (monad.map try.monad (function (_ module)
                                      (do try.monad
                                        [[descriptor document] (archive.find module archive)
                                         module_id (archive.id module archive)]
                                        (wrap (|> descriptor
                                                  (get@ #descriptor.registry)
                                                  artifact.artifacts
                                                  row.to_list
                                                  (list\map (|>> (get@ #artifact.id)))
                                                  [module_id])))))
               (\ monad wrap))
     #let [buffer (java/io/ByteArrayOutputStream::new (.int ..mebi_byte))
           sink (java/util/jar/JarOutputStream::new buffer (..manifest program))]
     sink (monad.fold ! (..write_module monad file_system static) sink order)
     #let [_ (do_to sink
               (java/io/Flushable::flush)
               (java/io/Closeable::close))]]
    (wrap (java/io/ByteArrayOutputStream::toByteArray buffer))))
