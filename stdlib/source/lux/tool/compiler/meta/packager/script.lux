(.module:
  [lux #*
   [data
    ["." text
     format
     ["." encoding]]
    [collection
     ["." dictionary]
     ["." row]
     ["." list ("#@." functor fold)]]]
   [host
    ["_" js]]
   [tool
    [compiler
     [phase
      [generation (#+ Output)]]]]
   [world
    [binary (#+ Binary)]]])

(def: #export (package outputs)
  (All [statements]
    (-> (Output statements) Binary))
  (|> outputs
      dictionary.entries
      (list@map (function (_ [module buffer])
                  (|> buffer
                      row.to-list
                      (:coerce (List [Name _.Statement]))
                      (list@fold (function (_ [artifact content] pre!)
                                   (|> content
                                       (_.comment (%name artifact))
                                       (_.then pre!)))
                                 (_.comment module
                                   _.use-strict))
                      (: _.Statement)
                      _.code)))
      (text.join-with text.new-line)
      encoding.to-utf8))
