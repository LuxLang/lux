(.module:
  [lux #*
   [control
    [pipe (#+ case>)]]
   [data
    ["." product]
    ["." text
     format
     ["." encoding]]
    [collection
     ["." row]
     ["." list ("#@." monad fold)]]]
   [host
    ["_" js]]
   [tool
    [compiler
     [phase
      [generation (#+ Output)]]]]
   [world
    [binary (#+ Binary)]]])

(def: #export (package outputs)
  (All [statements]
    (-> (Output statements) Binary))
  (|> outputs
      row.to-list
      (list@map (function (_ [module buffer])
                  (|> buffer
                      row.to-list
                      (:coerce (List [Name _.Statement]))
                      (list@map product.right))))
      list@join
      (case> (#.Cons head tail)
             (|> (list@fold (function (_ post! pre!)
                              (_.then pre! post!))
                            head
                            tail)
                 (: _.Statement)
                 _.code
                 encoding.to-utf8)
             
             #.Nil
             (encoding.to-utf8 ""))))
