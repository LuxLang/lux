(.module:
  [lux #*
   [type (#+ :share)]
   [abstract
    ["." monad (#+ Monad do)]]
   [control
    ["." try (#+ Try)]
    [security
     ["!" capability]]]
   [data
    [binary (#+ Binary)]
    [text
     ["%" format (#+ format)]
     ["." encoding]]
    [collection
     ["." row]
     ["." list ("#\." functor)]]]
   [world
    ["." file (#+ File Directory)]]]
  [program
   [compositor
    ["." static (#+ Static)]]]
  ["." // (#+ Packager)
   [//
    ["." archive
     ["." descriptor]
     ["." artifact]]
    [cache
     ["." dependency]]
    ["." io #_
     ["#" archive]]
    [//
     [language
      ["$" lux
       [generation (#+ Context)]]]]]])

## TODO: Delete ASAP
(type: (Action ! a)
  (! (Try a)))

(def: (write_artifact monad file_system static context)
  (All [!]
    (-> (Monad !) (file.System !) Static Context
        (Action ! Binary)))
  (do (try.with monad)
    [artifact (let [[module artifact] context]
                (!.use (\ file_system file) [(io.artifact file_system static module (%.nat artifact))]))]
    (!.use (\ artifact content) [])))

(def: (write_module monad file_system static sequence [module artifacts] so_far)
  (All [! directive]
    (-> (Monad !) (file.System !) Static (-> directive directive directive) [archive.ID (List artifact.ID)] directive
        (Action ! directive)))
  (monad.fold (:assume (try.with monad))
              (function (_ artifact so_far)
                (do (try.with monad)
                  [content (..write_artifact monad file_system static [module artifact])
                   content (\ monad wrap (\ encoding.utf8 decode content))]
                  (wrap (sequence so_far
                                  (:share [directive]
                                          {directive
                                           so_far}
                                          {directive
                                           (:assume content)})))))
              so_far
              artifacts))

(def: #export (package header to_code sequence scope)
  (All [! directive]
    (-> directive
        (-> directive Text)
        (-> directive directive directive)
        (-> directive directive)
        (Packager !)))
  (function (package monad file_system static archive program)
    (do {! (try.with monad)}
      [cache (!.use (\ file_system directory) [(get@ #static.target static)])
       order (\ monad wrap (dependency.load_order $.key archive))]
      (|> order
          (list\map (function (_ [module [module_id [descriptor document]]])
                      [module_id
                       (|> descriptor
                           (get@ #descriptor.registry)
                           artifact.artifacts
                           row.to_list
                           (list\map (|>> (get@ #artifact.id))))]))
          (monad.fold ! (..write_module monad file_system static sequence) header)
          (\ ! map (|>> scope to_code (\ encoding.utf8 encode)))))))
