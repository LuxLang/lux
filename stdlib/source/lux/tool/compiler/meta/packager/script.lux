(.module:
  [lux #*
   [type (#+ :share)]
   [abstract
    ["." monad (#+ Monad do)]]
   [control
    ["." try (#+ Try)]
    [security
     ["!" capability]]]
   [data
    [binary (#+ Binary)]
    ["." product]
    [text
     ["%" format (#+ format)]
     ["." encoding]]
    [collection
     ["." row]
     ["." list ("#\." functor)]]]
   [world
    ["." file (#+ File Directory)]]]
  [program
   [compositor
    ["." static (#+ Static)]]]
  ["." // (#+ Packager)
   [//
    ["." archive (#+ Output)
     ["." descriptor]
     ["." artifact]]
    [cache
     ["." dependency]]
    ["." io #_
     ["#" archive]]
    [//
     [language
      ["$" lux
       [generation (#+ Context)]]]]]])

## TODO: Delete ASAP
(type: (Action ! a)
  (! (Try a)))

(def: (write_module sequence [module artifacts output] so_far)
  (All [directive]
    (-> (-> directive directive directive) [archive.ID (List artifact.ID) Output] directive
        (Try directive)))
  (|> output
      row.to_list
      (list\map product.right)
      (monad.fold try.monad
                  (function (_ content so_far)
                    (|> content
                        (\ encoding.utf8 decode)
                        (\ try.monad map
                           (function (_ content)
                             (sequence so_far
                                       (:share [directive]
                                               {directive
                                                so_far}
                                               {directive
                                                (:assume content)}))))))
                  so_far)))

(def: #export (package header to_code sequence scope)
  (All [directive]
    (-> directive
        (-> directive Text)
        (-> directive directive directive)
        (-> directive directive)
        Packager))
  (function (package archive program)
    (do {! try.monad}
      [order (dependency.load_order $.key archive)]
      (|> order
          (list\map (function (_ [module [module_id [descriptor document output]]])
                      [module_id
                       (|> descriptor
                           (get@ #descriptor.registry)
                           artifact.artifacts
                           row.to_list
                           (list\map (|>> (get@ #artifact.id))))
                       output]))
          (monad.fold ! (..write_module sequence) header)
          (\ ! map (|>> scope to_code (\ encoding.utf8 encode)))))))
