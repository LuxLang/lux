(.module:
  [lux #*
   [abstract
    [monad (#+ Monad)]]
   [control
    [try (#+ Try)]]
   [data
    [binary (#+ Binary)]
    [collection
     ["." row]
     ["." list ("#\." functor)]]]
   [world
    ["." file (#+ Path)]]]
  [program
   [compositor
    [static (#+ Static)]]]
  [//
   [cache
    ["." dependency]]
   ["." archive (#+ Archive)
    ["." descriptor]
    ["." artifact]]
   [//
    [language
     [lux
      [generation (#+ Context)]]]]])

(type: #export (Packager !)
  (-> (Monad !) (file.System !) Static Archive Context (! (Try Binary))))

(type: #export Order
  (List [archive.ID (List artifact.ID)]))

(def: #export order
  (-> dependency.Order Order)
  (list\map (function (_ [module [module-id [descriptor document]]])
              (|> descriptor
                  (get@ #descriptor.registry)
                  artifact.artifacts
                  row.to-list
                  (list\map (|>> (get@ #artifact.id)))
                  [module-id]))))
