(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [control
    [pipe (#+ case>)]
    ["." exception (#+ exception:)]
    ["<>" parser
     ["<b>" binary (#+ Parser)]]]
   [data
    ["." product]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." list]
     ["." row (#+ Row) ("#@." functor fold)]
     ["." dictionary (#+ Dictionary)]]
    [format
     ["." binary (#+ Writer)]]]
   [type
    abstract]])

(type: #export ID
  Nat)

(type: #export Category
  #Anonymous
  (#Definition Text)
  (#Analyser Text)
  (#Synthesizer Text)
  (#Generator Text)
  (#Directive Text))

(type: #export Artifact
  {#id ID
   #category Category})

(abstract: #export Registry
  {#artifacts (Row Artifact)
   #resolver (Dictionary Text ID)}

  (def: #export empty
    Registry
    (:abstraction {#artifacts row.empty
                   #resolver (dictionary.new text.hash)}))

  (def: #export artifacts
    (-> Registry (Row Artifact))
    (|>> :representation (get@ #artifacts)))

  (def: next
    (-> Registry ID)
    (|>> ..artifacts row.size))

  (def: #export (resource registry)
    (-> Registry [ID Registry])
    (let [id (..next registry)]
      [id
       (|> registry
           :representation
           (update@ #artifacts (row.add {#id id
                                         #category #Anonymous}))
           :abstraction)]))

  (template [<tag> <create> <fetch>]
    [(def: #export (<create> name registry)
       (-> Text Registry [ID Registry])
       (let [id (..next registry)]
         [id
          (|> registry
              :representation
              (update@ #artifacts (row.add {#id id
                                            #category (<tag> name)}))
              (update@ #resolver (dictionary.put name id))
              :abstraction)]))

     (def: #export (<fetch> registry)
       (-> Registry (List Text))
       (|> registry
           :representation
           (get@ #artifacts)
           row.to-list
           (list.search-all (|>> (get@ #category)
                                 (case> (<tag> name) (#.Some name)
                                        _ #.None)))))]

    [#Definition definition definitions]
    [#Analyser analyser analysers]
    [#Synthesizer synthesizer synthesizers]
    [#Generator generator generators]
    [#Directive directive directives]
    )

  (def: #export (remember name registry)
    (-> Text Registry (Maybe ID))
    (|> (:representation registry)
        (get@ #resolver)
        (dictionary.get name)))

  (def: #export writer
    (Writer Registry)
    (let [category (: (Writer Category)
                      (function (_ value)
                        (case value
                          (^template [<nat> <tag> <writer>]
                            (<tag> value) ((binary.and binary.nat <writer>) [<nat> value]))
                          ([0 #Anonymous binary.any]
                           [1 #Definition binary.text]
                           [2 #Analyser binary.text]
                           [3 #Synthesizer binary.text]
                           [4 #Generator binary.text]
                           [5 #Directive binary.text]))))
          artifacts (: (Writer (Row Category))
                       (binary.row/64 category))]
      (|>> :representation
           (get@ #artifacts)
           (row@map (get@ #category))
           artifacts)))

  (exception: #export (invalid-category {tag Nat})
    (exception.report
     ["Tag" (%.nat tag)]))

  (def: #export parser
    (Parser Registry)
    (let [category (: (Parser Category)
                      (do {@ <>.monad}
                        [tag <b>.nat]
                        (case tag
                          0 (:: @ map (|>> #Anonymous) <b>.any)
                          1 (:: @ map (|>> #Definition) <b>.text)
                          2 (:: @ map (|>> #Analyser) <b>.text)
                          3 (:: @ map (|>> #Synthesizer) <b>.text)
                          4 (:: @ map (|>> #Generator) <b>.text)
                          5 (:: @ map (|>> #Directive) <b>.text)
                          _ (<>.fail (exception.construct ..invalid-category [tag])))))]
      (|> (<b>.row/64 category)
          (:: <>.monad map (row@fold (function (_ artifact registry)
                                       (product.right
                                        (case artifact
                                          #Anonymous
                                          (..resource registry)

                                          (^template [<tag> <create>]
                                            (<tag> name)
                                            (<create> name registry))
                                          ([#Definition ..definition]
                                           [#Analyser ..analyser]
                                           [#Synthesizer ..synthesizer]
                                           [#Generator ..generator]
                                           [#Directive ..directive])
                                          )))
                                     ..empty)))))
  )
