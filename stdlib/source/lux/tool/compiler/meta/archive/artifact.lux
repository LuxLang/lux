(.module:
  [lux #*
   [data
    ["." text]
    [collection
     ["." row (#+ Row)]
     ["." dictionary (#+ Dictionary)]]]
   [type
    abstract]])

(type: #export ID Nat)

(type: Artifact
  {#id ID
   #name (Maybe Text)})

(abstract: #export Registry
  {}
  {#next ID
   #artifacts (Row Artifact)
   #resolver (Dictionary Text ID)}

  (def: #export empty
    Registry
    (:abstraction {#next 0
                   #artifacts row.empty
                   #resolver (dictionary.new text.hash)}))

  (def: #export (resource registry)
    (-> Registry [ID Registry])
    (let [id (get@ #next (:representation registry))]
      [id
       (|> registry
           :representation
           (update@ #next inc)
           (update@ #artifacts (row.add {#id id
                                         #name #.None}))
           :abstraction)]))

  (def: #export (definition name registry)
    (-> Text Registry [ID Registry])
    (let [id (get@ #next (:representation registry))]
      [id
       (|> registry
           :representation
           (update@ #next inc)
           (update@ #artifacts (row.add {#id id
                                         #name (#.Some name)}))
           :abstraction)]))

  (def: #export (remember name registry)
    (-> Text Registry (Maybe ID))
    (|> (:representation registry)
        (get@ #resolver)
        (dictionary.get name)))
  )
