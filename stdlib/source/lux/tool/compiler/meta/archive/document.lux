(.module:
  [lux (#- Module)
   [control
    ["." try (#+ Try)]
    ["ex" exception (#+ exception:)]]
   [data
    [collection
     ["." dictionary (#+ Dictionary)]]]
   [type (#+ :share)
    abstract]]
  [//
   ["." signature (#+ Signature)]
   ["." key (#+ Key)]
   [descriptor (#+ Module)]])

(exception: #export (invalid-signature {expected Signature} {actual Signature})
  (ex.report ["Expected" (signature.description expected)]
             ["Actual" (signature.description actual)]))

(abstract: #export (Document d)
  {}
  
  {#signature Signature
   #content d}

  (def: #export (read key document)
    (All [d] (-> (Key d) (Document Any) (Try d)))
    (let [[document//signature document//content] (:representation document)]
      (if (:: signature.equivalence =
              (key.signature key)
              document//signature)
        (#try.Success (:share [e]
                              {(Key e)
                               key}
                              {e
                               document//content}))
        (ex.throw invalid-signature [(key.signature key)
                                     document//signature]))))

  (def: #export (write key content)
    (All [d] (-> (Key d) d (Document d)))
    (:abstraction {#signature (key.signature key)
                   #content content}))

  (def: #export signature
    (-> (Document Any) Signature)
    (|>> :representation (get@ #signature)))
  )
