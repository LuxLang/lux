(.module:
  [lux #*
   [control
    [monad (#+ do)]]
   [data
    ["." error]
    [text
     format]]]
  [///
   ["." phase
    [macro (#+ Expander)]
    ["." analysis
     ["." type]]
    ["." synthesis
     [".S" expression]]
    ["." translation]
    [//
     [analysis (#+ Operation)]]]])

(type: #export Eval
  (-> Nat Type Code (Operation Any)))

(def: #export (evaluator expander synthesis-state translation-state translate)
  (All [anchor expression statement]
    (-> Expander
        synthesis.State+
        (translation.State+ anchor expression statement)
        (translation.Phase anchor expression statement)
        Eval))
  (let [analyze (analysis.phase expander)]
    (function (eval count type exprC)
      (do phase.monad
        [exprA (type.with-type type
                 (analyze exprC))]
        (phase.lift (do error.monad
                      [exprS (|> exprA expressionS.phase (phase.run synthesis-state))]
                      (phase.run translation-state
                                 (do phase.monad
                                   [exprO (translate exprS)]
                                   (translation.evaluate! (format "eval" (%n count)) exprO)))))))))
