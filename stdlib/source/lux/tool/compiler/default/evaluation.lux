(.module:
  [lux #*
   [control
    [monad (#+ do)]]
   [data
    ["." error]
    [text
     format]]]
  [///
   ["." phase
    [analysis (#+ Operation)
     [".A" expression]
     ["." type]]
    ["." synthesis
     [".S" expression]]
    ["." translation]]])

(type: #export Eval
  (-> Nat Type Code (Operation Any)))

(def: #export (evaluator synthesis-state translation-state translate)
  (All [anchor expression statement]
    (-> synthesis.State+
        (translation.State+ anchor expression statement)
        (translation.Phase anchor expression statement)
        Eval))
  (function (eval count type exprC)
    (do phase.monad
      [exprA (type.with-type type
               (expressionA.compile exprC))]
      (phase.lift (do error.monad
                    [exprS (|> exprA expressionS.phase (phase.run synthesis-state))]
                    (phase.run translation-state
                               (do phase.monad
                                 [exprO (translate exprS)]
                                 (translation.evaluate! (format "eval" (%n count)) exprO))))))))
