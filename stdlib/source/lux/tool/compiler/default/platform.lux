(.module:
  [lux (#- Module)
   [type (#+ :share)]
   ["@" target (#+ Host)]
   [abstract
    ["." monad (#+ Monad do)]]
   [control
    ["." try (#+ Try)]
    [concurrency
     ["." promise (#+ Promise) ("#@." monad)]]]
   [data
    ["." binary (#+ Binary)]
    ["." bit]
    ["." product]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." row]]
    [format
     ["_" binary (#+ Writer)]]]
   [world
    ["." file (#+ Path)]]]
  ["." // #_
   ["#." init]
   ["/#" // (#+ Output)
    ["#." phase]
    [language
     [lux
      ["$" /]
      ["." syntax]
      ["#." analysis
       [macro (#+ Expander)]]
      ["#." generation (#+ Buffer)]
      ["#." directive]
      [phase
       [extension (#+ Extender)]]]]
    [meta
     ["." archive (#+ Archive)
      ["." descriptor (#+ Descriptor Module)]
      ["." document (#+ Document)]]
     [io
      ["." context]
      ["ioW" archive]]]]]
  [program
   [compositor
    ["." cli (#+ Configuration)]]])

(type: #export (Platform anchor expression directive)
  {#&file-system (file.System Promise)
   #host (///generation.Host expression directive)
   #phase (///generation.Phase anchor expression directive)
   #runtime (///generation.Operation anchor expression directive Any)
   #write (-> directive Binary)})

## TODO: Get rid of this
(type: (Action a)
  (Promise (Try a)))

## TODO: Get rid of this
(def: monad
  (:coerce (Monad Action)
           (try.with promise.monad)))

(with-expansions [<type-vars> (as-is [anchor expression directive])
                  <Platform> (as-is (Platform anchor expression directive))
                  <State+> (as-is (///directive.State+ anchor expression directive))
                  <Bundle> (as-is (///generation.Bundle anchor expression directive))]

  (def: writer
    (Writer [Descriptor (Document .Module)])
    (_.and descriptor.writer
           (document.writer $.writer)))

  (def: (cache-module platform host target-dir module-file-name module-id extension [[descriptor document] output])
    (All <type-vars>
      (-> <Platform> Host Path Path archive.ID Text [[Descriptor (Document Any)] Output]
          (Promise (Try Any))))
    (let [system (get@ #&file-system platform)
          write-artifact! (: (-> [Text Binary] (Action Any))
                             (function (_ [name content])
                               (ioW.write system host target-dir module-id name extension content)))]
      (do ..monad
        [_ (ioW.prepare system host target-dir module-id)
         _ (|> output
               row.to-list
               (monad.map ..monad write-artifact!)
               (: (Action (List Any))))
         document (:: promise.monad wrap
                      (document.check $.key document))]
        (ioW.cache system host target-dir module-id
                   (_.run ..writer [descriptor document])))))

  ## TODO: Inline ASAP
  (def: initialize-buffer!
    (All <type-vars>
      (///generation.Operation anchor expression directive Any))
    (///generation.set-buffer ///generation.empty-buffer))

  ## TODO: Inline ASAP
  (def: compile-runtime!
    (All <type-vars>
      (-> <Platform> (///generation.Operation anchor expression directive Any)))
    (get@ #runtime))

  (def: #export (initialize extension target host module expander host-analysis platform generation-bundle host-directive-bundle program extender)
    (All <type-vars>
      (-> Text
          Path
          Host
          Module
          Expander
          ///analysis.Bundle
          <Platform>
          <Bundle>
          (///directive.Bundle anchor expression directive)
          (-> expression directive)
          Extender
          (Promise (Try [<State+> Archive (Buffer directive)]))))
    (let [state (//init.state host
                              module
                              expander
                              host-analysis
                              (get@ #host platform)
                              (get@ #phase platform)
                              generation-bundle
                              host-directive-bundle
                              program
                              extender)]
      (do (try.with promise.monad)
        [_ (ioW.enable (get@ #&file-system platform) host target)
         [archive analysis-state] (ioW.thaw extension (get@ #host platform) (get@ #&file-system platform) host target)]
        (|> (do ///phase.monad
              [_ (///directive.lift-analysis
                  (///analysis.install analysis-state))]
              (///directive.lift-generation
               (do ///phase.monad
                 [_ ..initialize-buffer!
                  _ (..compile-runtime! platform)
                  buffer ///generation.buffer]
                 (wrap [archive buffer]))))
            (///phase.run' state)
            promise@wrap))))

  (def: #export (compile target partial-host-extension expander platform host configuration archive extension state)
    (All <type-vars>
      (-> Text Text Expander <Platform> Host Configuration Archive Text <State+> (Promise (Try [Archive <State+>]))))
    (let [source-module (get@ #cli.module configuration)
          compiler (:share <type-vars>
                           {<State+>
                            state}
                           {(///.Compiler <State+> .Module Any)
                            ((//init.compiler expander syntax.prelude (get@ #write platform)) $.key (list))})]
      (loop [module source-module
             [archive state] [archive state]]
        (if (archive.archived? archive module)
          (promise@wrap (#try.Success [archive state]))
          (let [import! (:share <type-vars>
                                {<Platform>
                                 platform}
                                {(-> Module [Archive <State+>]
                                     (Promise (Try [Archive <State+>])))
                                 recur})]
            (do (try.with promise.monad)
              [[module-id archive] (promise@wrap (archive.reserve module archive))
               input (context.read (get@ #&file-system platform)
                                   (get@ #cli.sources configuration)
                                   partial-host-extension
                                   module)]
              (loop [archive archive
                     state state
                     compilation (compiler (:coerce ///.Input input))]
                (do @
                  [#let [dependencies (get@ #///.dependencies compilation)]
                   archive+state (monad.fold @ import! [archive state] dependencies)
                   #let [## TODO: Inline ASAP
                         [archive state] (:share <type-vars>
                                                 {<Platform>
                                                  platform}
                                                 {[Archive <State+>]
                                                  archive+state})
                         continue! (:share <type-vars>
                                           {<Platform>
                                            platform}
                                           {(-> Archive <State+> (///.Compilation <State+> .Module Any)
                                                (Promise (Try [Archive <State+>])))
                                            recur})]]
                  (case ((get@ #///.process compilation)
                         (case dependencies
                           #.Nil
                           state

                           _
                           ## TODO: The "///directive.set-current-module" below shouldn't be necessary. Remove it ASAP.
                           ## TODO: The context shouldn't need to be re-set either.
                           (|> (///directive.set-current-module module)
                               (///phase.run' state)
                               try.assume
                               product.left))
                         archive)
                    (#try.Success [state more|done])
                    (case more|done
                      (#.Left more)
                      (continue! archive state more)

                      (#.Right payload)
                      (do (try.with promise.monad)
                        [_ (..cache-module platform
                                           host
                                           target
                                           (get@ #///.file input)
                                           module-id
                                           extension
                                           payload)
                         #let [[descriptor+document output] payload]]
                        (case (archive.add module descriptor+document archive)
                          (#try.Success archive)
                          (wrap [archive state])
                          
                          (#try.Failure error)
                          (promise@wrap (#try.Failure error)))))

                    (#try.Failure error)
                    (do (try.with promise.monad)
                      [_ (ioW.freeze (get@ #&file-system platform) host target archive)]
                      (promise@wrap (#try.Failure error))))))))))))
  )
