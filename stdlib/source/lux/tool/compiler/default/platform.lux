(.module:
  [lux (#- Module)
   [type (#+ :share)]
   [abstract
    ["." monad (#+ Monad do)]]
   [control
    ["." try (#+ Try)]
    [concurrency
     ["." promise (#+ Promise)]]]
   [data
    ["." bit]
    ["." product]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list]]]
   [world
    ["." file (#+ File)]]]
  ["." // #_
   ["#." init]
   ["/#" //
    ["#." phase]
    [language
     [lux
      ["." syntax]
      ["#." analysis
       [macro (#+ Expander)]]
      ["#." generation (#+ Buffer)]
      ["#." directive]
      [phase
       ## TODO: Get rid of this import ASAP
       ["." extension (#+ Extender)]
       [analysis
        ["." module]]]]]
    [meta
     ["." archive (#+ Archive)
      [descriptor (#+ Module)]]
     [io
      ["." context]]]]]
  [program
   [compositor
    ["." cli (#+ Configuration)]]])

(type: #export (Platform anchor expression directive)
  {#&file-system (file.System Promise)
   #host (///generation.Host expression directive)
   #phase (///generation.Phase anchor expression directive)
   #runtime (///generation.Operation anchor expression directive Any)})

## (def: (write-module target-dir file-name module-name module outputs)
##   (-> File Text Text Module Outputs (Process Any))
##   (do (try.with io.monad)
##     [_ (monad.map @ (product.uncurry (&io.write target-dir))
##                   (dictionary.entries outputs))]
##     (&io.write target-dir
##                (format module-name "/" cache.descriptor-name)
##                (encoding.to-utf8 (%.code (cache/description.write file-name module))))))

(with-expansions [<type-vars> (as-is [anchor expression directive])
                  <Platform> (as-is (Platform anchor expression directive))
                  <State+> (as-is (///directive.State+ anchor expression directive))
                  <Bundle> (as-is (///generation.Bundle anchor expression directive))]

  (def: pause-context
    (All <type-vars>
      (-> <State+> ///generation.Context))
    (get@ [#extension.state #///directive.generation #///directive.state #extension.state #///generation.context]))

  (def: (resume-context context state)
    (All <type-vars>
      (-> ///generation.Context <State+> <State+>))
    (set@ [#extension.state #///directive.generation #///directive.state #extension.state #///generation.context]
          context
          state))

  ## TODO: Inline ASAP
  (def: initialize-buffer!
    (All <type-vars>
      (///generation.Operation anchor expression directive Any))
    (///generation.set-buffer ///generation.empty-buffer))

  ## TODO: Inline ASAP
  (def: compile-runtime!
    (All <type-vars>
      (-> <Platform> (///generation.Operation anchor expression directive Any)))
    (get@ #runtime))

  ## TODO: Inline ASAP
  (def: save-runtime-buffer!
    (All <type-vars>
      (///generation.Operation anchor expression directive (Buffer directive)))
    (///generation.save-buffer! ""))
  
  (def: #export (initialize target expander host-analysis platform generation-bundle host-directive-bundle program extender)
    (All <type-vars>
      (-> Text
          Expander
          ///analysis.Bundle
          <Platform>
          <Bundle>
          (///directive.Bundle anchor expression directive)
          (-> expression directive)
          Extender
          (Promise (Try <State+>))))
    (let [state (//init.state target
                              expander
                              host-analysis
                              (get@ #host platform)
                              (get@ #phase platform)
                              generation-bundle
                              host-directive-bundle
                              program
                              extender)]
      (|> (do ///phase.monad
            [_ ..initialize-buffer!
             _ (..compile-runtime! platform)]
            ..save-runtime-buffer!)
          ///directive.lift-generation
          (///phase.run' state)
          (:: try.functor map product.left)
          (:: promise.monad wrap)))

    ## (case (runtimeT.generate ## (initL.compiler (io.run js.init))
    ##        (initL.compiler (io.run hostL.init-host))
    ##        )
    ##   ## (#try.Success [state disk-write])
    ##   ## (do @
    ##   ##   [_ (&io.prepare-target target)
    ##   ##    _ disk-write
    ##   ##    ## _ (cache/io.pre-load sources target (commonT.load-definition state))
    ##   ##    ]
    ##   ##   (wrap (|> state
    ##   ##             (set@ [#.info #.mode] #.Build))))

    ##   (#try.Success [state [runtime-bc function-bc]])
    ##   (do @
    ##     [_ (&io.prepare-target target)
    ##      ## _ (&io.write target (format hostL.runtime-class ".class") runtime-bc)
    ##      ## _ (&io.write target (format hostL.function-class ".class") function-bc)
    ##      ## _ (cache/io.pre-load sources target (commonT.load-definition state))
    ##      ]
    ##     (wrap (|> state
    ##               (set@ [#.info #.mode] #.Build))))

    ##   (#try.Failure error)
    ##   (io.fail error))
    )

  (def: #export (compile partial-host-extension expander platform configuration archive state)
    (All <type-vars>
      (-> Text Expander <Platform> Configuration Archive <State+> (Promise (Try [Archive <State+>]))))
    (let [source-module (get@ #cli.module configuration)
          compiler (:share <type-vars>
                           {<State+>
                            state}
                           {(///.Compiler <State+> .Module Any)
                            ((//init.compiler expander syntax.prelude) //init.key (list))})]
      (loop [module source-module
             [archive state] [archive state]]
        (if (archive.archived? archive module)
          (:: promise.monad wrap (#try.Success [archive state]))
          (let [import! (:share <type-vars>
                                {<Platform>
                                 platform}
                                {(-> Module [Archive <State+>]
                                     (Promise (Try [Archive <State+>])))
                                 recur})]
            (do (try.with promise.monad)
              [input (context.read (get@ #&file-system platform)
                                   (get@ #cli.sources configuration)
                                   partial-host-extension
                                   module)
               ## _ (&io.prepare-module target-dir (get@ #cli.module configuration))
               ## _ (write-module target-dir file-name (get@ #cli.module configuration) module outputs)
               ]
              (loop [archive archive
                     state (..resume-context (///generation.fresh-context module) state)
                     compilation (compiler (:coerce ///.Input input))]
                (do @
                  [#let [dependencies (get@ #///.dependencies compilation)
                         current-context (..pause-context state)]
                   archive+state (monad.fold @
                                             import!
                                             [archive state]
                                             (list.filter (bit.complement (archive.archived? archive))
                                                          dependencies))
                   #let [## TODO: Inline ASAP
                         [archive state] (:share <type-vars>
                                                 {<Platform>
                                                  platform}
                                                 {[Archive <State+>]
                                                  archive+state})
                         continue! (:share <type-vars>
                                           {<Platform>
                                            platform}
                                           {(-> Archive <State+> (///.Compilation <State+> .Module Any)
                                                (Promise (Try [Archive <State+>])))
                                            recur})]]
                  (case ((get@ #///.process compilation)
                         (case dependencies
                           #.Nil
                           state

                           _
                           ## TODO: The "///analysis.set-current-module" below shouldn't be necessary. Remove it ASAP.
                           ## TODO: The context shouldn't need to be re-set either.
                           (|> (///analysis.set-current-module module)
                               ///directive.lift-analysis
                               (///phase.run' (..resume-context current-context state))
                               try.assume
                               product.left))
                         archive)
                    (#try.Success [state more|done])
                    (case more|done
                      (#.Left more)
                      (continue! archive state more)

                      (#.Right [descriptor+document output])
                      (case (archive.add module descriptor+document archive)
                        (#try.Success archive)
                        (wrap [archive state])
                        
                        (#try.Failure error)
                        (:: promise.monad wrap (#try.Failure error))))

                    (#try.Failure error)
                    (:: promise.monad wrap (#try.Failure error)))))))))))
  )
