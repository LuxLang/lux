(.module:
  [lux (#- Module)
   [type (#+ :share)]
   [abstract
    ["." monad (#+ Monad do)]]
   [data
    ["." bit]
    ["." product]
    ["." error (#+ Error)]
    [text
     format]
    [collection
     ["." list]]]
   [world
    ["." file (#+ File)]]]
  ["." // #_
   ["#." init]
   ["#." syntax]
   ["#/" //
    ["#." analysis]
    ["#." statement]
    ["#." phase
     [macro (#+ Expander)]
     ## TODO: Get rid of this import ASAP
     [extension (#+)]
     ["." generation]
     [analysis
      ["." module]]]
    [meta
     ["." archive (#+ Archive)
      [descriptor (#+ Module)]]
     [io
      ["." context]]]]]
  [program
   [compositor
    ["." cli (#+ Configuration)]]])

(type: #export (Platform ! anchor expression statement)
  {#&monad (Monad !)
   #&file-system (file.System !)
   #host (generation.Host expression statement)
   #phase (generation.Phase anchor expression statement)
   #runtime (generation.Operation anchor expression statement Any)})

## (def: (write-module target-dir file-name module-name module outputs)
##   (-> File Text Text Module Outputs (Process Any))
##   (do (error.with io.monad)
##     [_ (monad.map @ (product.uncurry (&io.write target-dir))
##                   (dictionary.entries outputs))]
##     (&io.write target-dir
##                (format module-name "/" cache.descriptor-name)
##                (encoding.to-utf8 (%code (cache/description.write file-name module))))))

(with-expansions [<type-vars> (as-is [! anchor expression statement])
                  <Platform> (as-is (Platform ! anchor expression statement))
                  <State+> (as-is (///statement.State+ anchor expression statement))
                  <Bundle> (as-is (generation.Bundle anchor expression statement))]

  (def: #export (initialize expander platform generation-bundle host-statement-bundle program)
    (All <type-vars>
      (-> Expander
          <Platform>
          <Bundle>
          (///statement.Bundle anchor expression statement)
          (-> expression statement)
          (! (Error <State+>))))
    (|> platform
        (get@ #runtime)
        ///statement.lift-generation
        (///phase.run' (//init.state expander
                                     (get@ #host platform)
                                     (get@ #phase platform)
                                     generation-bundle
                                     host-statement-bundle
                                     program))
        (:: error.functor map product.left)
        (:: (get@ #&monad platform) wrap))

    ## (case (runtimeT.generate ## (initL.compiler (io.run js.init))
    ##        (initL.compiler (io.run hostL.init-host))
    ##        )
    ##   ## (#error.Success [state disk-write])
    ##   ## (do @
    ##   ##   [_ (&io.prepare-target target)
    ##   ##    _ disk-write
    ##   ##    ## _ (cache/io.pre-load sources target (commonT.load-definition state))
    ##   ##    ]
    ##   ##   (wrap (|> state
    ##   ##             (set@ [#.info #.mode] #.Build))))

    ##   (#error.Success [state [runtime-bc function-bc]])
    ##   (do @
    ##     [_ (&io.prepare-target target)
    ##      ## _ (&io.write target (format hostL.runtime-class ".class") runtime-bc)
    ##      ## _ (&io.write target (format hostL.function-class ".class") function-bc)
    ##      ## _ (cache/io.pre-load sources target (commonT.load-definition state))
    ##      ]
    ##     (wrap (|> state
    ##               (set@ [#.info #.mode] #.Build))))

    ##   (#error.Failure error)
    ##   (io.fail error))
    )

  (def: #export (compile expander platform configuration archive state)
    (All <type-vars>
      (-> Expander <Platform> Configuration Archive <State+> (! (Error [Archive <State+>]))))
    (let [monad (get@ #&monad platform)
          source-module (get@ #cli.module configuration)
          compiler (:share [anchor expression statement]
                           {<State+>
                            state}
                           {(///.Compiler <State+> .Module Any)
                            ((//init.compiler expander //syntax.prelude) //init.key (list))})]
      (loop [module source-module
             [archive state] [archive state]]
        (if (archive.archived? archive module)
          (:: monad wrap (#error.Success [archive state]))
          (let [import! (:share <type-vars>
                                {<Platform>
                                 platform}
                                {(-> Module [Archive <State+>]
                                     (! (Error [Archive <State+>])))
                                 recur})]
            (do (error.with monad)
              [input (context.read monad
                                   (get@ #&file-system platform)
                                   (get@ #cli.sources configuration)
                                   module)
               ## _ (&io.prepare-module target-dir (get@ #cli.module configuration))
               ## _ (write-module target-dir file-name (get@ #cli.module configuration) module outputs)
               ]
              (loop [archive archive
                     state state
                     compilation (compiler (:coerce ///.Input input))]
                (do @
                  [#let [dependencies (get@ #///.dependencies compilation)]
                   archive+state (monad.fold @
                                             import!
                                             [archive state]
                                             (list.filter (bit.complement (archive.archived? archive))
                                                          dependencies))
                   #let [[archive state] (:share <type-vars>
                                                 {<Platform>
                                                  platform}
                                                 {[Archive <State+>]
                                                  archive+state})
                         continue! (:share <type-vars>
                                           {<Platform>
                                            platform}
                                           {(-> Archive <State+> (///.Compilation <State+> .Module Any)
                                                (! (Error [Archive <State+>])))
                                            recur})]]
                  (case ((get@ #///.process compilation)
                         (case dependencies
                           #.Nil
                           state

                           _
                           ## TODO: The "///analysis.set-current-module" below shouldn't be necessary. Remove it ASAP.
                           (|> (///analysis.set-current-module module)
                               ///statement.lift-analysis
                               (///phase.run' state)
                               error.assume
                               product.left))
                         archive)
                    (#error.Success [state more|done])
                    (case more|done
                      (#.Left more)
                      (continue! archive state more)

                      (#.Right [descriptor+document output])
                      (case (archive.add module descriptor+document archive)
                        (#error.Success archive)
                        (wrap [archive state])
                        
                        (#error.Failure error)
                        (:: monad wrap (#error.Failure error))))

                    (#error.Failure error)
                    (:: monad wrap (#error.Failure error)))))))))))
  )
