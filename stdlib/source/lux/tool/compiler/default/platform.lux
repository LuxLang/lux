(.module:
  [lux (#- Module)
   [type (#+ :share)]
   ["@" target (#+ Host)]
   [abstract
    ["." monad (#+ Monad do)]]
   [control
    ["." try (#+ Try)]
    [concurrency
     ["." promise (#+ Promise) ("#@." monad)]]]
   [data
    ["." binary (#+ Binary)]
    ["." bit]
    ["." product]
    ["." text
     ["%" format (#+ format)]]
    [collection
     [dictionary (#+ Dictionary)]
     ["." row ("#@." fold)]
     ["." set]
     ["." list ("#@." monoid)]]
    [format
     ["_" binary (#+ Writer)]]]
   [world
    ["." file (#+ Path)]]]
  ["." // #_
   ["#." init]
   ["/#" // (#+ Output)
    ["#." phase]
    [language
     [lux
      ["$" /]
      ["#." version]
      ["." syntax]
      ["#." analysis
       [macro (#+ Expander)]]
      ["#." synthesis]
      ["#." generation (#+ Buffer)]
      ["#." directive]
      [phase
       ["." extension (#+ Extender)]
       [analysis
        ["." module]]]]]
    [meta
     ["." archive (#+ Archive)
      ["." artifact (#+ Registry)]
      ["." descriptor (#+ Descriptor Module)]
      ["." document (#+ Document)]]
     [io
      ["." context]
      ["ioW" archive]]]]]
  [program
   [compositor
    ["." cli (#+ Configuration)]]])

(type: #export (Platform anchor expression directive)
  {#&file-system (file.System Promise)
   #host (///generation.Host expression directive)
   #phase (///generation.Phase anchor expression directive)
   #runtime (///generation.Operation anchor expression directive [Registry Output])
   #write (-> directive Binary)})

## TODO: Get rid of this
(type: (Action a)
  (Promise (Try a)))

## TODO: Get rid of this
(def: monad
  (:coerce (Monad Action)
           (try.with promise.monad)))

(with-expansions [<type-vars> (as-is anchor expression directive)
                  <Platform> (as-is (Platform <type-vars>))
                  <State+> (as-is (///directive.State+ <type-vars>))
                  <Bundle> (as-is (///generation.Bundle <type-vars>))]

  (def: writer
    (Writer [Descriptor (Document .Module)])
    (_.and descriptor.writer
           (document.writer $.writer)))

  (def: (cache-module platform host target-dir module-id extension [[descriptor document] output])
    (All [<type-vars>]
      (-> <Platform> Host Path archive.ID Text [[Descriptor (Document Any)] Output]
          (Promise (Try Any))))
    (let [system (get@ #&file-system platform)
          write-artifact! (: (-> [Text Binary] (Action Any))
                             (function (_ [name content])
                               (ioW.write system host target-dir module-id name extension content)))]
      (do ..monad
        [_ (ioW.prepare system host target-dir module-id)
         _ (|> output
               row.to-list
               (monad.map ..monad write-artifact!)
               (: (Action (List Any))))
         document (:: promise.monad wrap
                      (document.check $.key document))]
        (ioW.cache system host target-dir module-id
                   (_.run ..writer [descriptor document])))))

  ## TODO: Inline ASAP
  (def: initialize-buffer!
    (All [<type-vars>]
      (///generation.Operation <type-vars> Any))
    (///generation.set-buffer ///generation.empty-buffer))

  ## TODO: Inline ASAP
  (def: (compile-runtime! platform)
    (All [<type-vars>]
      (-> <Platform> (///generation.Operation <type-vars> [Registry Output])))
    (do ///phase.monad
      [_ ..initialize-buffer!]
      (get@ #runtime platform)))

  (def: (runtime-descriptor registry)
    (-> Registry Descriptor)
    {#descriptor.hash 0
     #descriptor.name archive.runtime-module
     #descriptor.file ""
     #descriptor.references (set.new text.hash)
     #descriptor.state #.Compiled
     #descriptor.registry registry})
  
  (def: runtime-document
    (Document .Module)
    (document.write $.key (module.new 0)))

  (def: (process-runtime archive platform)
    (All [<type-vars>]
      (-> Archive <Platform>
          (///directive.Operation <type-vars>
                                  [Archive [[Descriptor (Document .Module)] Output]])))
    (do ///phase.monad
      [[registry payload] (///directive.lift-generation
                           (..compile-runtime! platform))
       #let [descriptor,document [(..runtime-descriptor registry) ..runtime-document]]
       archive (///phase.lift (do try.monad
                                [[_ archive] (archive.reserve archive.runtime-module archive)]
                                (archive.add archive.runtime-module descriptor,document archive)))]
      (wrap [archive [descriptor,document payload]])))

  (def: (initialize-state extender
                          [analysers
                           synthesizers
                           generators
                           directives]
                          analysis-state
                          state)
    (All [<type-vars>]
      (-> Extender
          [(Dictionary Text ///analysis.Handler)
           (Dictionary Text ///synthesis.Handler)
           (Dictionary Text ///generation.Handler)
           (Dictionary Text ///directive.Handler)]
          .Lux
          <State+>
          (Try <State+>)))
    (|> (:share [<type-vars>]
                {<State+>
                 state}
                {(///directive.Operation <type-vars> Any)
                 (do ///phase.monad
                   [_ (///directive.lift-analysis
                       (///analysis.install analysis-state))
                    _ (///directive.lift-analysis
                       (extension.with extender analysers))
                    _ (///directive.lift-synthesis
                       (extension.with extender synthesizers))
                    _ (///directive.lift-generation
                       (extension.with extender (:assume generators)))
                    _ (extension.with extender (:assume directives))]
                   (wrap []))})
        (///phase.run' state)
        (:: try.monad map product.left)))

  (def: #export (initialize extension target host module expander host-analysis platform generation-bundle host-directive-bundle program extender)
    (All [<type-vars>]
      (-> Text
          Path
          Host
          Module
          Expander
          ///analysis.Bundle
          <Platform>
          <Bundle>
          (///directive.Bundle <type-vars>)
          (-> expression directive)
          Extender
          (Promise (Try [<State+> Archive]))))
    (do (try.with promise.monad)
      [#let [state (//init.state host
                                 module
                                 expander
                                 host-analysis
                                 (get@ #host platform)
                                 (get@ #phase platform)
                                 generation-bundle
                                 host-directive-bundle
                                 program
                                 extender)]
       _ (ioW.enable (get@ #&file-system platform) host target)
       [archive analysis-state bundles] (ioW.thaw extension (get@ #host platform) (get@ #&file-system platform) host target)
       state (promise@wrap (initialize-state extender bundles analysis-state state))]
      (if (archive.archived? archive archive.runtime-module)
        (wrap [state archive])
        (do (try.with promise.monad)
          [[state [archive payload]] (|> (..process-runtime archive platform)
                                         (///phase.run' state)
                                         promise@wrap)
           _ (..cache-module platform host target 0 extension payload)]
          (wrap [state archive])))))

  (def: module-compilation-log
    (All [<type-vars>]
      (-> <State+> Text))
    (|>> (get@ [#extension.state
                #///directive.generation
                #///directive.state
                #extension.state
                #///generation.log])
         (row@fold (function (_ right left)
                     (format left text.new-line right))
                   "")))

  (def: with-reset-log
    (All [<type-vars>]
      (-> <State+> <State+>))
    (set@ [#extension.state
           #///directive.generation
           #///directive.state
           #extension.state
           #///generation.log]
          row.empty))

  (def: #export (compile target partial-host-extension expander platform host configuration archive extension state)
    (All [<type-vars>]
      (-> Text Text Expander <Platform> Host Configuration Archive Text <State+> (Promise (Try [Archive <State+>]))))
    (let [source-module (get@ #cli.module configuration)
          compiler (:share [<type-vars>]
                           {<State+>
                            state}
                           {(///.Compiler <State+> .Module Any)
                            ((//init.compiler expander syntax.prelude (get@ #write platform)) $.key (list))})]
      (loop [module source-module
             [archive state] [archive state]]
        (if (archive.archived? archive module)
          (promise@wrap (#try.Success [archive state]))
          (let [import! (:share [<type-vars>]
                                {<Platform>
                                 platform}
                                {(-> Module [Archive <State+>]
                                     (Action [Archive <State+>]))
                                 recur})]
            (do (try.with promise.monad)
              [[module-id archive] (promise@wrap (archive.reserve module archive))
               input (context.read (get@ #&file-system platform)
                                   (get@ #cli.sources configuration)
                                   partial-host-extension
                                   module)]
              (loop [archive archive
                     state state
                     compilation (compiler (:coerce ///.Input input))
                     all-dependencies (: (List Module)
                                         (list))]
                (do @
                  [#let [new-dependencies (get@ #///.dependencies compilation)
                         all-dependencies (list@compose new-dependencies all-dependencies)]
                   [archive state] (:share [<type-vars>]
                                           {<Platform>
                                            platform}
                                           {(Action [Archive <State+>])
                                            (monad.fold ..monad import! [archive state] new-dependencies)})
                   #let [continue! (:share [<type-vars>]
                                           {<Platform>
                                            platform}
                                           {(-> Archive <State+> (///.Compilation <State+> .Module Any) (List Module)
                                                (Action [Archive <State+>]))
                                            recur})]]
                  (case ((get@ #///.process compilation)
                         (case new-dependencies
                           #.Nil
                           state

                           _
                           ## TODO: The "///directive.set-current-module" below shouldn't be necessary. Remove it ASAP.
                           ## TODO: The context shouldn't need to be re-set either.
                           (|> (///directive.set-current-module module)
                               (///phase.run' state)
                               try.assume
                               product.left))
                         archive)
                    (#try.Success [state more|done])
                    (case more|done
                      (#.Left more)
                      (continue! archive state more all-dependencies)

                      (#.Right [[descriptor document] output])
                      (do (try.with promise.monad)
                        [#let [_ (log! (..module-compilation-log state))
                               descriptor (set@ #descriptor.references (set.from-list text.hash all-dependencies) descriptor)]
                         _ (..cache-module platform host target module-id extension [[descriptor document] output])]
                        (case (archive.add module [descriptor document] archive)
                          (#try.Success archive)
                          (wrap [archive
                                 (..with-reset-log state)])
                          
                          (#try.Failure error)
                          (promise@wrap (#try.Failure error)))))

                    (#try.Failure error)
                    (do (try.with promise.monad)
                      [_ (ioW.freeze (get@ #&file-system platform) host target archive)]
                      (promise@wrap (#try.Failure error))))))))))))
  )
