(.module:
  [lux (#- Module)
   [type (#+ :share)]
   ["@" target (#+ Host)]
   [abstract
    ["." monad (#+ Monad do)]]
   [control
    ["." try (#+ Try)]
    [concurrency
     ["." promise (#+ Promise Resolver) ("#@." monad)]
     ["." stm (#+ Var STM)]]]
   [data
    ["." binary (#+ Binary)]
    ["." bit]
    ["." product]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." dictionary (#+ Dictionary)]
     ["." row (#+ Row) ("#@." fold)]
     ["." set]
     ["." list ("#@." monoid functor fold)]]
    [format
     ["_" binary (#+ Writer)]]]
   [world
    ["." file (#+ Path)]]]
  ["." // #_
   ["#." init]
   ["/#" // (#+ Output)
    ["#." phase]
    [language
     [lux
      ["$" /]
      ["#." version]
      ["." syntax]
      ["#." analysis
       [macro (#+ Expander)]]
      ["#." synthesis]
      ["#." generation (#+ Buffer)]
      ["#." directive]
      [phase
       ["." extension (#+ Extender)]
       [analysis
        ["." module]]]]]
    [meta
     ["." archive (#+ Archive)
      ["." artifact (#+ Registry)]
      ["." descriptor (#+ Descriptor Module)]
      ["." document (#+ Document)]]
     [io
      ["." context]
      ["ioW" archive]]]]]
  [program
   [compositor
    ["." cli (#+ Compilation Library)]
    ["." static (#+ Static)]
    ["." import]]])

(type: #export (Platform anchor expression directive)
  {#&file-system (file.System Promise)
   #host (///generation.Host expression directive)
   #phase (///generation.Phase anchor expression directive)
   #runtime (///generation.Operation anchor expression directive [Registry Output])
   #write (-> directive Binary)})

## TODO: Get rid of this
(type: (Action a)
  (Promise (Try a)))

## TODO: Get rid of this
(def: monad
  (:coerce (Monad Action)
           (try.with promise.monad)))

(with-expansions [<type-vars> (as-is anchor expression directive)
                  <Platform> (as-is (Platform <type-vars>))
                  <State+> (as-is (///directive.State+ <type-vars>))
                  <Bundle> (as-is (///generation.Bundle <type-vars>))]

  (def: writer
    (Writer [Descriptor (Document .Module)])
    (_.and descriptor.writer
           (document.writer $.writer)))

  (def: (cache-module static platform module-id [[descriptor document] output])
    (All [<type-vars>]
      (-> Static <Platform> archive.ID [[Descriptor (Document Any)] Output]
          (Promise (Try Any))))
    (let [system (get@ #&file-system platform)
          write-artifact! (: (-> [Text Binary] (Action Any))
                             (function (_ [name content])
                               (ioW.write system (get@ #static.host static) (get@ #static.target static) module-id name (get@ #static.artifact-extension static) content)))]
      (do ..monad
        [_ (ioW.prepare system (get@ #static.host static) (get@ #static.target static) module-id)
         _ (|> output
               row.to-list
               (monad.map ..monad write-artifact!)
               (: (Action (List Any))))
         document (:: promise.monad wrap
                      (document.check $.key document))]
        (ioW.cache system (get@ #static.host static) (get@ #static.target static) module-id
                   (_.run ..writer [descriptor document])))))

  ## TODO: Inline ASAP
  (def: initialize-buffer!
    (All [<type-vars>]
      (///generation.Operation <type-vars> Any))
    (///generation.set-buffer ///generation.empty-buffer))

  ## TODO: Inline ASAP
  (def: (compile-runtime! platform)
    (All [<type-vars>]
      (-> <Platform> (///generation.Operation <type-vars> [Registry Output])))
    (do ///phase.monad
      [_ ..initialize-buffer!]
      (get@ #runtime platform)))

  (def: (runtime-descriptor registry)
    (-> Registry Descriptor)
    {#descriptor.hash 0
     #descriptor.name archive.runtime-module
     #descriptor.file ""
     #descriptor.references (set.new text.hash)
     #descriptor.state #.Compiled
     #descriptor.registry registry})
  
  (def: runtime-document
    (Document .Module)
    (document.write $.key (module.new 0)))

  (def: (process-runtime archive platform)
    (All [<type-vars>]
      (-> Archive <Platform>
          (///directive.Operation <type-vars>
                                  [Archive [[Descriptor (Document .Module)] Output]])))
    (do ///phase.monad
      [[registry payload] (///directive.lift-generation
                           (..compile-runtime! platform))
       #let [descriptor,document [(..runtime-descriptor registry) ..runtime-document]]
       archive (///phase.lift (do try.monad
                                [[_ archive] (archive.reserve archive.runtime-module archive)]
                                (archive.add archive.runtime-module descriptor,document archive)))]
      (wrap [archive [descriptor,document payload]])))

  (def: (initialize-state extender
                          [analysers
                           synthesizers
                           generators
                           directives]
                          analysis-state
                          state)
    (All [<type-vars>]
      (-> Extender
          [(Dictionary Text ///analysis.Handler)
           (Dictionary Text ///synthesis.Handler)
           (Dictionary Text ///generation.Handler)
           (Dictionary Text ///directive.Handler)]
          .Lux
          <State+>
          (Try <State+>)))
    (|> (:share [<type-vars>]
                {<State+>
                 state}
                {(///directive.Operation <type-vars> Any)
                 (do ///phase.monad
                   [_ (///directive.lift-analysis
                       (///analysis.install analysis-state))
                    _ (///directive.lift-analysis
                       (extension.with extender analysers))
                    _ (///directive.lift-synthesis
                       (extension.with extender synthesizers))
                    _ (///directive.lift-generation
                       (extension.with extender (:assume generators)))
                    _ (extension.with extender (:assume directives))]
                   (wrap []))})
        (///phase.run' state)
        (:: try.monad map product.left)))

  (def: #export (initialize static module expander host-analysis platform generation-bundle host-directive-bundle program extender)
    (All [<type-vars>]
      (-> Static
          Module
          Expander
          ///analysis.Bundle
          <Platform>
          <Bundle>
          (///directive.Bundle <type-vars>)
          (-> expression directive)
          Extender
          (Promise (Try [<State+> Archive]))))
    (do (try.with promise.monad)
      [#let [state (//init.state (get@ #static.host static)
                                 module
                                 expander
                                 host-analysis
                                 (get@ #host platform)
                                 (get@ #phase platform)
                                 generation-bundle
                                 host-directive-bundle
                                 program
                                 extender)]
       _ (ioW.enable (get@ #&file-system platform) (get@ #static.host static) (get@ #static.target static))
       [archive analysis-state bundles] (ioW.thaw (get@ #static.artifact-extension static) (get@ #host platform) (get@ #&file-system platform) (get@ #static.host static) (get@ #static.target static))
       state (promise@wrap (initialize-state extender bundles analysis-state state))]
      (if (archive.archived? archive archive.runtime-module)
        (wrap [state archive])
        (do (try.with promise.monad)
          [[state [archive payload]] (|> (..process-runtime archive platform)
                                         (///phase.run' state)
                                         promise@wrap)
           _ (..cache-module static platform 0 payload)]
          (wrap [state archive])))))

  (def: module-compilation-log
    (All [<type-vars>]
      (-> <State+> Text))
    (|>> (get@ [#extension.state
                #///directive.generation
                #///directive.state
                #extension.state
                #///generation.log])
         (row@fold (function (_ right left)
                     (format left text.new-line right))
                   "")))

  (def: with-reset-log
    (All [<type-vars>]
      (-> <State+> <State+>))
    (set@ [#extension.state
           #///directive.generation
           #///directive.state
           #extension.state
           #///generation.log]
          row.empty))

  (with-expansions [<Context> (as-is [Archive <State+>])
                    <Result> (as-is (Try <Context>))
                    <Return> (as-is (Promise <Result>))
                    <Signal> (as-is (Resolver <Result>))
                    <Pending> (as-is [<Return> <Signal>])
                    <Importer> (as-is (-> Module <Return>))
                    <Compiler> (as-is (-> <Importer> archive.ID <Context> Module <Return>))]
    (def: (parallel initial)
      (All [<type-vars>]
        (-> <Context>
            (-> <Compiler> <Importer>)))
      (let [current (stm.var initial)
            pending (:share [<type-vars>]
                            {<Context>
                             initial}
                            {(Var (Dictionary Module <Pending>))
                             (:assume (stm.var (dictionary.new text.hash)))})]
        (function (_ compile)
          (function (import! module)
            (do {@ promise.monad}
              [[return signal] (:share [<type-vars>]
                                       {<Context>
                                        initial}
                                       {(Promise [<Return> (Maybe [<Context>
                                                                   archive.ID
                                                                   <Signal>])])
                                        (:assume
                                         (stm.commit
                                          (do {@ stm.monad}
                                            [[archive state] (stm.read current)]
                                            (if (archive.archived? archive module)
                                              (wrap [(promise@wrap (#try.Success [archive state]))
                                                     #.None])
                                              (do @
                                                [@pending (stm.read pending)]
                                                (case (dictionary.get module @pending)
                                                  (#.Some [return signal])
                                                  (wrap [return
                                                         #.None])
                                                  
                                                  #.None
                                                  (case (archive.reserve module archive)
                                                    (#try.Success [module-id archive])
                                                    (do @
                                                      [_ (stm.write [archive state] current)
                                                       #let [[return signal] (:share [<type-vars>]
                                                                                     {<Context>
                                                                                      initial}
                                                                                     {<Pending>
                                                                                      (promise.promise [])})]
                                                       _ (stm.update (dictionary.put module [return signal]) pending)]
                                                      (wrap [return
                                                             (#.Some [[archive state]
                                                                      module-id
                                                                      signal])]))
                                                    
                                                    (#try.Failure error)
                                                    (wrap [(promise@wrap (#try.Failure error))
                                                           #.None]))))))))})
               _ (case signal
                   #.None
                   (wrap [])
                   
                   (#.Some [context module-id resolver])
                   (do @
                     [result (compile import! module-id context module)
                      result (case result
                               (#try.Failure error)
                               (wrap result)

                               (#try.Success [resulting-archive resulting-state])
                               (stm.commit (do stm.monad
                                             [[_ [merged-archive _]] (stm.update (function (_ [archive state])
                                                                                   [(archive.merge resulting-archive archive)
                                                                                    state])
                                                                                 current)]
                                             (wrap (#try.Success [merged-archive resulting-state])))))
                      _ (promise.future (resolver result))]
                     (wrap [])))]
              return)))))

    ## TODO: Find a better way, as this only works for the Lux compiler.
    (def: (updated-state archive state)
      (All [<type-vars>]
        (-> Archive <State+> (Try <State+>)))
      (do {@ try.monad}
        [modules (monad.map @ (function (_ module)
                                (do @
                                  [[descriptor document] (archive.find module archive)
                                   lux-module (document.read $.key document)]
                                  (wrap [module lux-module])))
                            (archive.archived archive))
         #let [additions (|> modules
                             (list@map product.left)
                             (set.from-list text.hash))]]
        (wrap (update@ [#extension.state
                        #///directive.analysis
                        #///directive.state
                        #extension.state]
                       (function (_ analysis-state)
                         (|> analysis-state
                             (:coerce .Lux)
                             (update@ #.modules (function (_ current)
                                                  (list@compose (list.filter (|>> product.left
                                                                                  (set.member? additions)
                                                                                  not)
                                                                             current)
                                                                modules)))
                             :assume))
                       state))))

    (def: (set-current-module module state)
      (All [<type-vars>]
        (-> Module <State+> <State+>))
      (|> (///directive.set-current-module module)
          (///phase.run' state)
          try.assume
          product.left))

    (def: #export (compile libraries static expander platform compilation context)
      (All [<type-vars>]
        (-> (List Library) Static Expander <Platform> Compilation <Context> <Return>))
      (let [[compilation-sources compilation-libraries compilation-target compilation-module] compilation
            base-compiler (:share [<type-vars>]
                                  {<Context>
                                   context}
                                  {(///.Compiler <State+> .Module Any)
                                   (:assume
                                    ((//init.compiler expander syntax.prelude (get@ #write platform)) $.key (list)))})]
        (do (try.with promise.monad)
          [libraries (import.import (get@ #&file-system platform) compilation-libraries)
           #let [parallel-compiler (..parallel
                                    context
                                    (function (_ import! module-id [archive state] module)
                                      (do (try.with promise.monad)
                                        [#let [state (..set-current-module module state)]
                                         input (context.read (get@ #&file-system platform)
                                                             libraries
                                                             compilation-sources
                                                             (get@ #static.host-module-extension static)
                                                             module)]
                                        (loop [[archive state] [archive state]
                                               compilation (base-compiler (:coerce ///.Input input))
                                               all-dependencies (: (List Module)
                                                                   (list))]
                                          (do {@ (try.with promise.monad)}
                                            [#let [new-dependencies (get@ #///.dependencies compilation)
                                                   all-dependencies (list@compose new-dependencies all-dependencies)
                                                   continue! (:share [<type-vars>]
                                                                     {<Platform>
                                                                      platform}
                                                                     {(-> <Context> (///.Compilation <State+> .Module Any) (List Module)
                                                                          (Action [Archive <State+>]))
                                                                      (:assume
                                                                       recur)})]
                                             [archive state] (case new-dependencies
                                                               #.Nil
                                                               (wrap [archive state])

                                                               (#.Cons _)
                                                               (do @
                                                                 [archive,document+ (|> new-dependencies
                                                                                        (list@map import!)
                                                                                        (monad.seq ..monad))
                                                                  #let [archive (|> archive,document+
                                                                                    (list@map product.left)
                                                                                    (list@fold archive.merge archive))]]
                                                                 (wrap [archive (try.assume
                                                                                 (..updated-state archive state))])))]
                                            (case ((get@ #///.process compilation)
                                                   ## TODO: The "///directive.set-current-module" below shouldn't be necessary. Remove it ASAP.
                                                   ## TODO: The context shouldn't need to be re-set either.
                                                   (|> (///directive.set-current-module module)
                                                       (///phase.run' state)
                                                       try.assume
                                                       product.left)
                                                   archive)
                                              (#try.Success [state more|done])
                                              (case more|done
                                                (#.Left more)
                                                (continue! [archive state] more all-dependencies)

                                                (#.Right [[descriptor document] output])
                                                (do (try.with promise.monad)
                                                  [#let [_ (log! (..module-compilation-log state))
                                                         descriptor (set@ #descriptor.references (set.from-list text.hash all-dependencies) descriptor)]
                                                   _ (..cache-module static platform module-id [[descriptor document] output])]
                                                  (case (archive.add module [descriptor document] archive)
                                                    (#try.Success archive)
                                                    (wrap [archive
                                                           (..with-reset-log state)])
                                                    
                                                    (#try.Failure error)
                                                    (promise@wrap (#try.Failure error)))))

                                              (#try.Failure error)
                                              (do (try.with promise.monad)
                                                [_ (ioW.freeze (get@ #&file-system platform) (get@ #static.host static) (get@ #static.target static) archive)]
                                                (promise@wrap (#try.Failure error)))))))))]]
          (parallel-compiler compilation-module))))
    ))
