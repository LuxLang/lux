(.module:
  [lux (#- Module loop)
   [control
    ["." monad (#+ do)]
    ["ex" exception (#+ exception:)]]
   [data
    ["." product]
    ["." error (#+ Error)]
    ["." text ("#/." hash)]
    [collection
     ["." dictionary]
     ["." set]]]
   ["." macro]
   [world
    ["." file]]]
  ["." //
   ["." syntax (#+ Aliases)]
   ["." evaluation]
   ["/." // (#+ Instancer)
    ["." analysis]
    ["." synthesis]
    ["." statement]
    ["." host]
    ["." phase
     [macro (#+ Expander)]
     [".P" analysis
      ["." module]]
     [".P" synthesis]
     ["." generation]
     [".P" statement]
     ["." extension
      [".E" analysis]
      [".E" synthesis]
      [".E" statement]]]
    [meta
     [archive
      ["." signature]
      ["." key (#+ Key)]
      ["." descriptor (#+ Module)]
      ["." document]]]]])

(def: #export info
  Info
  {#.target (`` (for {(~~ (static host.common-lisp)) host.common-lisp
                      (~~ (static host.js))          host.js
                      (~~ (static host.jvm))         host.jvm
                      (~~ (static host.lua))         host.lua
                      (~~ (static host.php))         host.php
                      (~~ (static host.python))      host.python
                      (~~ (static host.r))           host.r
                      (~~ (static host.ruby))        host.ruby
                      (~~ (static host.scheme))      host.scheme}))
   #.version //.version
   #.mode #.Build})

(def: (refresh expander)
  (All [anchor expression statement]
    (-> Expander (statement.Operation anchor expression statement Any)))
  (do phase.monad
    [[bundle state] phase.get-state
     #let [eval (evaluation.evaluator expander
                                      (get@ [#statement.synthesis #statement.state] state)
                                      (get@ [#statement.generation #statement.state] state)
                                      (get@ [#statement.generation #statement.phase] state))]]
    (phase.set-state [bundle
                      (update@ [#statement.analysis #statement.state]
                               (: (-> analysis.State+ analysis.State+)
                                  (|>> product.right
                                       [(analysisE.bundle eval)]))
                               state)])))

(def: #export (state expander host generate generation-bundle)
  (All [anchor expression statement]
    (-> Expander
        (generation.Host expression statement)
        (generation.Phase anchor expression statement)
        (generation.Bundle anchor expression statement)
        (statement.State+ anchor expression statement)))
  (let [synthesis-state [synthesisE.bundle synthesis.init]
        generation-state [generation-bundle (generation.state host)]
        eval (evaluation.evaluator expander synthesis-state generation-state generate)
        analysis-state [(analysisE.bundle eval) (analysis.state ..info host)]]
    [statementE.bundle
     {#statement.analysis {#statement.state analysis-state
                           #statement.phase (analysisP.phase expander)}
      #statement.synthesis {#statement.state synthesis-state
                            #statement.phase synthesisP.phase}
      #statement.generation {#statement.state generation-state
                             #statement.phase generate}}]))

(type: Reader
  (-> Source (Error [Source Code])))

(def: (reader current-module aliases)
  (-> Module Aliases (analysis.Operation Reader))
  (function (_ [bundle state])
    (let [[cursor offset source-code] (get@ #.source state)]
      (#error.Success [[bundle state]
                       (syntax.parse current-module aliases ("lux text size" source-code))]))))

(def: (read reader)
  (-> Reader (analysis.Operation Code))
  (function (_ [bundle compiler])
    (case (reader (get@ #.source compiler))
      (#error.Failure error)
      (#error.Failure error)

      (#error.Success [source' output])
      (let [[cursor _] output]
        (#error.Success [[bundle (|> compiler
                                     (set@ #.source source')
                                     (set@ #.cursor cursor))]
                         output])))))

(with-expansions [<Operation> (as-is (All [anchor expression statement]
                                       (statement.Operation anchor expression statement Any)))]

  (def: (begin dependencies hash input)
    (-> (List Module) Nat ///.Input <Operation>)
    (statement.lift-analysis
     (do phase.monad
       [#let [module (get@ #///.module input)]
        _ (module.create hash module)
        _ (analysis.set-current-module module)
        _ (monad.map @ module.import dependencies)]
       (analysis.set-source-code (analysis.source (get@ #///.module input) (get@ #///.code input))))))

  (def: end
    (-> Module <Operation>)
    (|>> module.set-compiled
         statement.lift-analysis))

  (def: (iteration expander reader)
    (-> Expander Reader <Operation>)
    (let [execute (statementP.phase expander)]
      (do phase.monad
        [code (statement.lift-analysis
               (..read reader))
         _ (execute code)]
        (..refresh expander))))

  (def: (loop expander module)
    (-> Expander Module <Operation>)
    (do phase.monad
      [reader (statement.lift-analysis
               (..reader module syntax.no-aliases))]
      (function (_ state)
        (.loop [state state]
          (case (..iteration expander reader state)
            (#error.Success [state' output])
            (recur state')

            (#error.Failure error)
            (if (ex.match? syntax.end-of-file error)
              (#error.Success [state []])
              (ex.with-stack ///.cannot-compile module (#error.Failure error))))))))

  (def: (compile expander dependencies hash input)
    (-> Expander (List Module) Nat ///.Input <Operation>)
    (do phase.monad
      [#let [module (get@ #///.module input)]
       _ (..begin dependencies hash input)
       _ (..loop expander module)]
      (..end module)))

  (def: (default-dependencies prelude input)
    (-> Module ///.Input (List Module))
    (if (text/= prelude (get@ #///.module input))
      (list)
      (list prelude)))
  )

(def: #export (compiler expander prelude module)
  (-> Expander Module Module
      (All [anchor expression statement]
        (Instancer (statement.State+ anchor expression statement) .Module)))
  (function (_ key parameters input)
    (let [hash (text/hash (get@ #///.code input))
          dependencies (default-dependencies prelude input)]
      {#///.dependencies dependencies
       #///.process (function (_ state archive)
                      (do error.monad
                        [[state' analysis-module] (phase.run' state
                                                              (: (All [anchor expression statement]
                                                                   (statement.Operation anchor expression statement .Module))
                                                                 (do phase.monad
                                                                   [_ (compile expander dependencies hash input)]
                                                                   (statement.lift-analysis
                                                                    (extension.lift
                                                                     macro.current-module)))))
                         #let [descriptor {#descriptor.hash hash
                                           #descriptor.name (get@ #///.module input)
                                           #descriptor.file (get@ #///.file input)
                                           #descriptor.references (set.from-list text.hash dependencies)
                                           #descriptor.state #.Compiled}]]
                        (wrap (#.Right [state'
                                        [descriptor (document.write key analysis-module)]
                                        (dictionary.new text.hash)]))))})))

(def: #export key
  (Key .Module)
  (key.key {#signature.name (name-of ..compiler)
            #signature.version //.version}
           (module.new 0)))
