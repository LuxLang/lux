(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]
    [hash (#+ Hash)]]
   [control
    [pipe (#+ case>)]]
   [data
    [number
     ["n" nat]
     ["i" int]]
    [text
     ["%" format (#+ Format)]]]])

(type: #export Register
  Nat)

(type: #export Variable
  (#Local Register)
  (#Foreign Register))

(structure: #export equivalence
  (Equivalence Variable)
  
  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag>]
        [(<tag> reference') (<tag> sample')]
        (n.= reference' sample'))
      ([#Local] [#Foreign])

      _
      #0)))

(structure: #export hash
  (Hash Variable)
  
  (def: &equivalence ..equivalence)
  (def: hash
    (|>> (case> (#Local register)
                register
                
                (#Foreign register)
                (|> register .int (i.* -1) .nat)))))

(template: #export (self)
  (#..Local 0))

(def: #export self?
  (-> Variable Bit)
  (|>> (case> (^ (..self))
              true

              _
              false)))

(def: #export format
  (Format Variable)
  (|>> (case> (#Local local)
              (%.format "+" (%.nat local))
              
              (#Foreign foreign)
              (%.format "-" (%.nat foreign)))))
