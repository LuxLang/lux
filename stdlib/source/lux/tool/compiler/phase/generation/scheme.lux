(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]]
  [/
   [runtime (#+ Phase)]
   ["." primitive]
   ["." structure]
   ["." reference ("#;." system)]
   ["." function]
   ["." case]
   ["." loop]
   ["." ///
    ["." extension]
    [//
     [analysis (#+)]
     ["." synthesis]]]])

(def: #export (generate synthesis)
  Phase
  (case synthesis
    (^template [<tag> <generator>]
      (^ (<tag> value))
      (:: ///.monad wrap (<generator> value)))
    ([synthesis.bit  primitive.bit]
     [synthesis.i64  primitive.i64]
     [synthesis.f64  primitive.f64]
     [synthesis.text primitive.text])

    (^ (synthesis.variant variantS))
    (structure.variant generate variantS)

    (^ (synthesis.tuple members))
    (structure.tuple generate members)

    (#synthesis.Reference value)
    (reference;reference value)

    (^ (synthesis.branch/case case))
    (case.case generate case)

    (^ (synthesis.branch/let let))
    (case.let generate let)

    (^ (synthesis.branch/if if))
    (case.if generate if)

    (^ (synthesis.loop/scope scope))
    (loop.scope generate scope)

    (^ (synthesis.loop/recur updates))
    (loop.recur generate updates)

    (^ (synthesis.function/abstraction abstraction))
    (function.function generate abstraction)

    (^ (synthesis.function/apply application))
    (function.apply generate application)

    (#synthesis.Extension extension)
    (extension.apply generate extension)))
