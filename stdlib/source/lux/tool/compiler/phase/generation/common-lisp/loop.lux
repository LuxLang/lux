(.module:
  [lux (#- Scope)
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." product]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#@." functor)]]]
   [target
    ["_" common-lisp (#+ Expression)]]]
  ["." // #_
   [runtime (#+ Operation Phase)]
   ["#." case]
   ["#/" //
    ["#/" //
     [//
      [synthesis (#+ Scope Synthesis)]]]]])

(def: #export (scope generate [start initsS+ bodyS])
  (-> Phase (Scope Synthesis) (Operation (Expression Any)))
  (do ////.monad
    [@scope (:: @ map (|>> %.nat (format "scope") _.var) ///.next)
     initsG+ (monad.map @ generate initsS+)
     bodyG (///.with-anchor @scope
             (generate bodyS))]
    (wrap (_.labels (list [@scope {#_.input (|> initsS+
                                                list.enumerate
                                                (list@map (|>> product.left (n/+ start) //case.register))
                                                _.args)
                                   #_.output bodyG}])
                    (_.funcall/+ [(_.function/1 @scope) initsG+])))))

(def: #export (recur generate argsS+)
  (-> Phase (List Synthesis) (Operation (Expression Any)))
  (do ////.monad
    [@scope ///.anchor
     argsO+ (monad.map @ generate argsS+)]
    (wrap (_.call/* @scope argsO+))))
