(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [target
    ["_" python (#+ Expression)]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase)]
   ["#." primitive]
   ["//#" ///
    ["/#" // #_
     [analysis (#+ Variant Tuple)]
     ["#." synthesis (#+ Synthesis)]]]])

(def: #export (tuple generate elemsS+)
  (-> Phase (Tuple Synthesis) (Operation (Expression Any)))
  (case elemsS+
    #.Nil
    (:: ////.monad wrap (//primitive.text /////synthesis.unit))

    (#.Cons singletonS #.Nil)
    (generate singletonS)

    _
    (|> elemsS+
        (monad.map ////.monad generate)
        (:: ////.monad map _.list))))

(def: #export (variant generate [lefts right? valueS])
  (-> Phase (Variant Synthesis) (Operation (Expression Any)))
  (:: ////.monad map
      (//runtime.variant (if right?
                           (inc lefts)
                           lefts)
                         right?)
      (generate valueS)))
