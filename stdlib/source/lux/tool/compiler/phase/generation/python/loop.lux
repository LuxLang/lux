(.module:
  [lux (#- Scope)
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." product]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#@." functor)]]]
   [target
    ["_" python (#+ Expression)]]]
  ["." // #_
   [runtime (#+ Operation Phase)]
   ["#." case]
   ["#/" //
    ["#/" //
     [//
      [synthesis (#+ Scope Synthesis)]]]]])

(def: #export (scope generate [start initsS+ bodyS])
  (-> Phase (Scope Synthesis) (Operation (Expression Any)))
  (do ////.monad
    [@loop (:: @ map (|>> %.nat (format "loop") _.var) ///.next)
     initsO+ (monad.map @ generate initsS+)
     bodyO (///.with-anchor @loop
             (generate bodyS))
     _ (///.save! true ["" (_.code @loop)]
                  (_.def @loop (|> initsS+
                                   list.enumerate
                                   (list@map (|>> product.left (n/+ start) //case.register)))
                         (_.return bodyO)))]
    (wrap (_.apply/* @loop initsO+))))

(def: #export (recur generate argsS+)
  (-> Phase (List Synthesis) (Operation (Expression Any)))
  (do ////.monad
    [@scope ///.anchor
     argsO+ (monad.map @ generate argsS+)]
    (wrap (_.apply/* @scope argsO+))))
