(.module:
  [lux (#- function)
   [abstract
    ["." monad (#+ do)]]
   [control
    pipe]
   [data
    ["." product]
    [collection
     ["." list ("#@." functor fold)]]]
   [target
    ["_" ruby (#+ Expression Statement)]]]
  ["." // #_
   [runtime (#+ Operation Phase)]
   ["#." reference]
   ["#." case]
   ["#/" //
    ["#." reference]
    ["#/" //
     ["." // #_
      [reference (#+ Register Variable)]
      [analysis (#+ Variant Tuple Environment Arity Abstraction Application Analysis)]
      [synthesis (#+ Synthesis)]]]]])

(def: #export (apply generate [functionS argsS+])
  (-> Phase (Application Synthesis) (Operation (Expression Any)))
  (do ////.monad
    [functionO (generate functionS)
     argsO+ (monad.map @ generate argsS+)]
    (wrap (_.do "call" argsO+ functionO))))

(def: #export capture
  (///reference.foreign _.local))

(def: (with-closure inits function-definition)
  (-> (List (Expression Any)) (Expression Any) (Expression Any))
  (case inits
    #.Nil
    function-definition

    _
    (|> function-definition
        _.return
        (_.lambda #.None
             (|> (list.enumerate inits)
                 (list@map (|>> product.left ..capture))))
        (_.do "call" inits))))

(def: input
  (|>> inc //case.register))

(def: #export (function generate [environment arity bodyS])
  (-> Phase (Abstraction Synthesis) (Operation (Expression Any)))
  (do ////.monad
    [[function-name bodyO] (///.with-context
                             (do @
                               [function-name ///.context]
                               (///.with-anchor (_.local function-name)
                                 (generate bodyS))))
     closureO+ (: (Operation (List (Expression Any)))
                  (monad.map @ (:: //reference.system variable) environment))
     #let [@curried (_.local "curried")
           arityO (|> arity .int _.int)
           limitO (|> arity dec .int _.int)
           @num-args (_.local "num_args")
           @self (_.local function-name)
           initialize-self! (_.set (list (//case.register 0)) @self)
           initialize! (list@fold (.function (_ post pre!)
                                    ($_ _.then
                                        pre!
                                        (_.set (list (..input post)) (_.nth (|> post .int _.int) @curried))))
                                  initialize-self!
                                  (list.indices arity))]]
    (wrap (with-closure closureO+
            (_.lambda (#.Some @self) (list (_.variadic @curried))
                 ($_ _.then
                     (_.set (list @num-args) (_.the "length" @curried))
                     (_.cond (list [(|> @num-args (_.= arityO))
                                    ($_ _.then
                                        initialize!
                                        (_.return bodyO))]
                                   [(|> @num-args (_.> arityO))
                                    (let [slice (.function (_ from to)
                                                  (_.array-range from to @curried))
                                          arity-args (_.splat (slice (_.int +0) limitO))
                                          output-func-args (_.splat (slice arityO @num-args))]
                                      (_.return (|> @self
                                                    (_.do "call" (list arity-args))
                                                    (_.do "call" (list output-func-args)))))])
                             ## (|> @num-args (_.< arityO))
                             (let [@missing (_.local "missing")]
                               (_.return (_.lambda #.None (list (_.variadic @missing))
                                              (_.return (|> @self
                                                            (_.do "call" (list (_.splat (|> (_.array (list))
                                                                                            (_.do "concat" (list @curried))
                                                                                            (_.do "concat" (list @missing))))))))))))
                     ))))
    ))
