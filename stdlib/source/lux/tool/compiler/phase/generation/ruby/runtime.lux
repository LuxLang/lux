(.module:
  [lux (#- inc)
   [abstract
    [monad (#+ do)]]
   [control
    ["." function]
    ["p" parser
     ["s" code]]]
   [data
    [number (#+ hex)
     ["." i64]]
    ["." text
     format]
    [collection
     ["." list ("#@." functor)]]]
   ["." macro
    ["." code]
    [syntax (#+ syntax:)]]
   [host
    ["_" ruby (#+ Expression LVar Computation Literal Statement)]]]
  ["." ///
   ["//." //
    [//
     ["/////." name]
     ["." synthesis]]]]
  )

(template [<name> <base>]
  [(type: #export <name>
     (<base> LVar (Expression Any) (Statement Any)))]

  [Operation ///.Operation]
  [Phase ///.Phase]
  [Handler ///.Handler]
  [Bundle ///.Bundle]
  )

(def: prefix Text "LuxRuntime")

(def: #export unit (_.string synthesis.unit))

(def: (flag value)
  (-> Bit Literal)
  (if value
    (_.string "")
    _.nil))

(def: #export variant-tag-field "_lux_tag")
(def: #export variant-flag-field "_lux_flag")
(def: #export variant-value-field "_lux_value")

(def: (variant' tag last? value)
  (-> (Expression Any) (Expression Any) (Expression Any) Literal)
  (_.hash (list [(_.string ..variant-tag-field) tag]
                [(_.string ..variant-flag-field) last?]
                [(_.string ..variant-value-field) value])))

(def: #export (variant tag last? value)
  (-> Nat Bit (Expression Any) Literal)
  (variant' (_.int (.int tag)) (..flag last?) value))

(def: #export none
  Literal
  (variant 0 #0 unit))

(def: #export some
  (-> (Expression Any) Literal)
  (variant 1 #1))

(def: #export left
  (-> (Expression Any) Literal)
  (variant 0 #0))

(def: #export right
  (-> (Expression Any) Literal)
  (variant 1 #1))

(def: runtime-name
  (-> Text LVar)
  (|>> /////name.normalize
       (format ..prefix "_")
       _.local))

(def: (feature name definition)
  (-> LVar (-> LVar (Statement Any)) (Statement Any))
  (definition name))

(syntax: #export (with-vars {vars (s.tuple (p.some s.local-identifier))}
                   body)
  (wrap (list (` (let [(~+ (|> vars
                               (list@map (function (_ var)
                                           (list (code.local-identifier var)
                                                 (` (_.local (~ (code.text (/////name.normalize var))))))))
                               list.concat))]
                   (~ body))))))

(syntax: (runtime: {declaration (p.or s.local-identifier
                                      (s.form (p.and s.local-identifier
                                                     (p.some s.local-identifier))))}
           code)
  (case declaration
    (#.Left name)
    (macro.with-gensyms [g!_]
      (let [nameC (code.local-identifier name)
            code-nameC (code.local-identifier (format "@" name))
            runtime-nameC (` (runtime-name (~ (code.text name))))]
        (wrap (list (` (def: #export (~ nameC) LVar (~ runtime-nameC)))
                    (` (def: (~ code-nameC)
                         (Statement Any)
                         (..feature (~ runtime-nameC)
                                    (function ((~ g!_) (~ nameC))
                                      (~ code)))))))))
    
    (#.Right [name inputs])
    (macro.with-gensyms [g!_]
      (let [nameC (code.local-identifier name)
            code-nameC (code.local-identifier (format "@" name))
            runtime-nameC (` (runtime-name (~ (code.text name))))
            inputsC (list@map code.local-identifier inputs)
            inputs-typesC (list@map (function.constant (` (_.Expression Any)))
                                    inputs)]
        (wrap (list (` (def: #export ((~ nameC) (~+ inputsC))
                         (-> (~+ inputs-typesC) (Computation Any))
                         (_.apply/* (list (~+ inputsC)) (~ runtime-nameC))))
                    (` (def: (~ code-nameC)
                         (Statement Any)
                         (..feature (~ runtime-nameC)
                                    (function ((~ g!_) (~ g!_))
                                      (..with-vars [(~+ inputsC)]
                                        (_.function (~ g!_) (list (~+ inputsC))
                                          (~ code)))))))))))))

(def: tuple-size
  (_.the "length"))

(def: last-index
  (|>> ..tuple-size (_.- (_.int +1))))

(with-expansions [<recur> (as-is ($_ _.then
                                     (_.set (list lefts) (_.- last-index-right lefts))
                                     (_.set (list tuple) (_.nth last-index-right tuple))))]
  (runtime: (tuple//left lefts tuple)
    (with-vars [last-index-right]
      (<| (_.while (_.bool true))
          ($_ _.then
              (_.set (list last-index-right) (..last-index tuple))
              (_.if (_.> lefts last-index-right)
                ## No need for recursion
                (_.return (_.nth lefts tuple))
                ## Needs recursion
                <recur>)))))

  (runtime: (tuple//right lefts tuple)
    (with-vars [last-index-right right-index]
      (<| (_.while (_.bool true))
          ($_ _.then
              (_.set (list last-index-right) (..last-index tuple))
              (_.set (list right-index) (_.+ (_.int +1) lefts))
              (_.cond (list [(_.= right-index last-index-right)
                             (_.return (_.nth right-index tuple))]
                            [(_.> right-index last-index-right)
                             ## Needs recursion.
                             <recur>])
                      (_.return (_.array-range right-index (..tuple-size tuple) tuple)))
              )))))

(runtime: (sum//get sum wantsLast wantedTag)
  (let [no-match! (_.return _.nil)
        sum-tag (_.nth (_.string ..variant-tag-field) sum)
        sum-flag (_.nth (_.string ..variant-flag-field) sum)
        sum-value (_.nth (_.string ..variant-value-field) sum)
        is-last? (_.= (_.string "") sum-flag)
        test-recursion! (_.if is-last?
                          ## Must recurse.
                          (_.return (sum//get sum-value wantsLast (_.- sum-tag wantedTag)))
                          no-match!)]
    (_.cond (list [(_.= sum-tag wantedTag)
                   (_.if (_.= wantsLast sum-flag)
                     (_.return sum-value)
                     test-recursion!)]

                  [(_.> sum-tag wantedTag)
                   test-recursion!]

                  [(_.and (_.< sum-tag wantedTag)
                          (_.= (_.string "") wantsLast))
                   (_.return (variant' (_.- wantedTag sum-tag) sum-flag sum-value))])

            no-match!)))

(def: runtime//adt
  (Statement Any)
  ($_ _.then
      @tuple//left
      @tuple//right
      @sum//get))

(runtime: (lux//try risky)
  (with-vars [error value]
    (_.begin ($_ _.then
                 (_.set (list value) (_.do "call" (list ..unit) risky))
                 (_.return (..right value)))
             (list [(list) error
                    (_.return (..left (_.the "message" error)))]))))

(runtime: (lux//program-args raw)
  (with-vars [tail head]
    ($_ _.then
        (_.set (list tail) ..none)
        (<| (_.for-in head raw)
            (_.set (list tail) (..some (_.array (list head tail)))))
        (_.return tail))))

(def: runtime//lux
  (Statement Any)
  ($_ _.then
      @lux//try
      @lux//program-args))

(runtime: (i64//logic-right-shift param subject)
  (let [mask (|> (_.int +1)
                 (_.bit-shl (_.- param (_.int +64)))
                 (_.- (_.int +1)))]
    (_.return (|> subject
                  (_.bit-shr param)
                  (_.bit-and mask)))))

(def: runtime//i64
  (Statement Any)
  @i64//logic-right-shift)

(runtime: (f64//decode inputG)
  (with-vars [@input @temp]
    ($_ _.then
        (_.set (list @input) inputG)
        (_.set (list @temp) (_.do "to_f" (list) @input))
        (_.if ($_ _.or
                  (_.not (_.= (_.float +0.0) @temp))
                  (_.= (_.string "0") @input)
                  (_.= (_.string ".0") @input)
                  (_.= (_.string "0.0") @input))
          (_.return (..some @temp))
          (_.return ..none)))))

(def: runtime//f64
  (Statement Any)
  @f64//decode)

(runtime: (text//index subject param start)
  (with-vars [idx]
    ($_ _.then
        (_.set (list idx) (|> subject (_.do "index" (list param start))))
        (_.if (_.= _.nil idx)
          (_.return ..none)
          (_.return (..some idx))))))

(def: (within? top value)
  (-> (Expression Any) (Expression Any) (Computation Any))
  (_.and (|> value (_.>= (_.int +0)))
         (|> value (_.< top))))

(runtime: (text//clip @text @from @to)
  (_.return (|> @text (_.array-range @from @to))))

(runtime: (text//char idx text)
  (_.if (|> idx (within? (_.the "length" text)))
    (_.return (..some (|> text (_.array-range idx idx) (_.do "ord" (list)))))
    (_.return ..none)))

(def: runtime//text
  (Statement Any)
  ($_ _.then
      @text//index
      @text//clip
      @text//char))

(def: runtime
  (Statement Any)
  ($_ _.then
      runtime//adt
      runtime//lux
      runtime//i64
      runtime//f64
      runtime//text
      ))

(def: #export artifact ..prefix)

(def: #export generate
  (Operation Any)
  (///.with-buffer
    (do ////.monad
      [_ (///.save! ["" ..prefix] ..runtime)]
      (///.save-buffer! ..artifact))))
