(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]]
  ["." / #_
   [runtime (#+ Phase)]
   ["#." primitive]
   ["#." structure]
   ["#." reference]
   ["#." function]
   ["#." case]
   ["#." loop]
   ["//#" ///
    ["#." extension]
    [//
     [analysis (#+)]
     ["." synthesis]
     ["." reference]]]])

(def: #export (generate synthesis)
  Phase
  (case synthesis
    (^template [<tag> <generator>]
      (^ (<tag> value))
      (:: ///.monad wrap (<generator> value)))
    ([synthesis.bit  /primitive.bit]
     [synthesis.i64  /primitive.i64]
     [synthesis.f64  /primitive.f64]
     [synthesis.text /primitive.text])

    (^ (synthesis.variant variantS))
    (/structure.variant generate variantS)

    (^ (synthesis.tuple members))
    (/structure.tuple generate members)

    (#synthesis.Reference reference)
    (case reference
      (#reference.Variable variable)
      (/reference.variable variable)
      
      (#reference.Constant constant)
      (/reference.constant constant))

    (^ (synthesis.branch/case [valueS pathS]))
    (/case.case generate valueS pathS)

    (^ (synthesis.branch/let [inputS register bodyS]))
    (/case.let generate inputS register bodyS)

    (^ (synthesis.branch/if [conditionS thenS elseS]))
    (/case.if generate conditionS thenS elseS)

    (^ (synthesis.loop/scope scope))
    (/loop.scope generate scope)

    (^ (synthesis.loop/recur updates))
    (/loop.recur generate updates)

    (^ (synthesis.function/abstraction abstraction))
    (/function.abstraction generate abstraction)

    (^ (synthesis.function/apply application))
    (/function.apply generate application)

    (#synthesis.Extension extension)
    (///extension.apply generate extension)
    ))
