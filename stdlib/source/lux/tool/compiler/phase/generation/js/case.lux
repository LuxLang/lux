(.module:
  [lux (#- case let if)
   [control
    [monad (#+ do)]
    ["ex" exception (#+ exception:)]]
   [data
    ["." number]
    ["." text
     format]
    [collection
     ["." list ("#/." functor fold)]]]
   [host
    ["_" js (#+ Expression Computation Var Statement)]]]
  [//
   ["//." runtime (#+ Operation Phase)]
   ["//." reference]
   ["//." primitive]
   [//
    ["." reference]
    ["//." // ("#/." monad)
     [//
      [reference (#+ Register)]
      ["." synthesis (#+ Synthesis Path)]]]]])

(def: #export register
  (reference.local _.var))

(def: #export (let generate [valueS register bodyS])
  (-> Phase [Synthesis Register Synthesis]
      (Operation Computation))
  (do ////.monad
    [valueO (generate valueS)
     bodyO (generate bodyS)]
    ## TODO: Find some way to do 'let' without paying the price of the closure.
    (wrap (_.apply/* (<| (_.closure (list))
                         ($_ _.then
                             (_.define (..register register) valueO)
                             (_.return bodyO)))
                     (list)))))

(def: #export (record-get generate valueS pathP)
  (-> Phase Synthesis (List [Nat Bit])
      (Operation Expression))
  (do ////.monad
    [valueO (generate valueS)]
    (wrap (list/fold (function (_ [idx tail?] source)
                       (.let [method (.if tail?
                                       //runtime.product//right
                                       //runtime.product//left)]
                         (method source (_.i32 (.int idx)))))
                     valueO
                     pathP))))

(def: #export (if generate [testS thenS elseS])
  (-> Phase [Synthesis Synthesis Synthesis]
      (Operation Computation))
  (do ////.monad
    [testO (generate testS)
     thenO (generate thenS)
     elseO (generate elseS)]
    (wrap (_.? testO thenO elseO))))

(def: @savepoint (_.var "lux_pm_cursor_savepoint"))
(def: @cursor (_.var "lux_pm_cursor"))
(def: @temp (_.var "lux_pm_temp"))
(def: @alt-error (_.var "alt_error"))

(def: (push-cursor! value)
  (-> Expression Statement)
  (_.statement (|> @cursor (_.do "push" (list value)))))

(def: peek-and-pop-cursor
  Expression
  (|> @cursor (_.do "pop" (list))))

(def: pop-cursor!
  Statement
  (_.statement ..peek-and-pop-cursor))

(def: length
  (|>> (_.the "length")))

(def: last-index
  (|>> ..length (_.- (_.i32 +1))))

(def: peek-cursor
  Expression
  (|> @cursor (_.at (last-index @cursor))))

(def: save-cursor!
  Statement
  (.let [cursor (|> @cursor (_.do "slice" (list)))]
    (_.statement (|> @savepoint (_.do "push" (list cursor))))))

(def: restore-cursor!
  Statement
  (_.set @cursor (|> @savepoint (_.do "pop" (list)))))

(def: fail-pm! _.break)

(def: (count-pops path)
  (-> Path [Nat Path])
  (.case path
    (^ ($_ synthesis.path/seq
           #synthesis.Pop
           path'))
    (.let [[pops post-pops] (count-pops path')]
      [(inc pops) post-pops])

    _
    [0 path]))

(def: (multi-pop-cursor! pops)
  (-> Nat Statement)
  (.let [popsJS (_.i32 (.int pops))]
    (_.statement (|> @cursor (_.do "splice" (list (|> @cursor ..length (_.- popsJS))
                                                  popsJS))))))

(exception: #export unrecognized-path)

(def: (pattern-matching' generate pathP)
  (-> Phase Path (Operation Statement))
  (.case pathP
    (^ (synthesis.path/then bodyS))
    (do ////.monad
      [body! (generate bodyS)]
      (wrap (_.return body!)))

    #synthesis.Pop
    (/////wrap pop-cursor!)

    (#synthesis.Bind register)
    (/////wrap (_.define (..register register) ..peek-cursor))

    (^template [<tag> <format> <=>]
      (^ (<tag> value))
      (/////wrap (_.when (|> value <format> (<=> ..peek-cursor) _.not)
                         fail-pm!)))
    ([synthesis.path/bit  //primitive.bit           _.=]
     [synthesis.path/i64  (<| //primitive.i64 .int) //runtime.i64//=]
     [synthesis.path/f64  //primitive.f64           _.=]
     [synthesis.path/text //primitive.text          _.=])

    (^template [<pm> <flag> <prep>]
      (^ (<pm> idx))
      (/////wrap ($_ _.then
                     (_.set @temp (|> idx <prep> .int _.i32 (//runtime.sum//get ..peek-cursor <flag>)))
                     (_.if (_.= _.null @temp)
                       fail-pm!
                       (push-cursor! @temp)))))
    ([synthesis.side/left  _.null        (<|)]
     [synthesis.side/right (_.string "") inc])

    (^template [<pm> <getter> <prep>]
      (^ (<pm> idx))
      (/////wrap (|> idx <prep> .int _.i32 (<getter> ..peek-cursor) push-cursor!)))
    ([synthesis.member/left  //runtime.product//left  (<|)]
     [synthesis.member/right //runtime.product//right inc])

    (^ ($_ synthesis.path/seq
           (#synthesis.Bind register)
           #synthesis.Pop
           thenP))
    (do ////.monad
      [then! (pattern-matching' generate thenP)]
      (/////wrap ($_ _.then
                     (_.define (..register register) ..peek-and-pop-cursor)
                     then!)))

    (^ ($_ synthesis.path/seq
           #synthesis.Pop
           #synthesis.Pop
           nextP))
    (.let [[extra-pops nextP'] (count-pops nextP)]
      (do ////.monad
        [next! (pattern-matching' generate nextP')]
        (/////wrap ($_ _.then
                       (multi-pop-cursor! (n/+ 2 extra-pops))
                       next!))))

    (^template [<tag> <computation>]
      (^ (<tag> leftP rightP))
      (do ////.monad
        [left! (pattern-matching' generate leftP)
         right! (pattern-matching' generate rightP)]
        (wrap <computation>)))
    ([synthesis.path/seq (_.then left! right!)]
     [synthesis.path/alt ($_ _.then
                             (_.do-while _.false
                                         ($_ _.then
                                             ..save-cursor!
                                             left!))
                             ($_ _.then
                                 ..restore-cursor!
                                 right!))])

    _
    (////.throw unrecognized-path [])))

(def: (pattern-matching generate pathP)
  (-> Phase Path (Operation Statement))
  (do ////.monad
    [pattern-matching! (pattern-matching' generate pathP)]
    (wrap ($_ _.then
              (_.do-while _.false
                          pattern-matching!)
              (_.throw (_.string "Invalid expression for pattern-matching."))))))

(def: #export (case generate [valueS pathP])
  (-> Phase [Synthesis Path] (Operation Computation))
  (do ////.monad
    [stack-init (generate valueS)
     path! (pattern-matching generate pathP)
     #let [closure (<| (_.closure (list))
                       ($_ _.then
                           (_.declare @temp)
                           (_.define @cursor (_.array (list stack-init)))
                           (_.define @savepoint (_.array (list)))
                           path!))]]
    (wrap (_.apply/* closure (list)))))
