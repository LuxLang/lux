(.module:
  [lux #*
   [host (#+ import:)]
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." product]
    [collection
     ["." dictionary]]]
   [target
    ["_" js (#+ Expression)]]]
  ["." /// #_
   ["#." runtime (#+ Operation Phase Handler Bundle)]
   ["#." primitive]
   [//
    [extension (#+ Nullary Unary Binary Trinary
                   nullary unary binary trinary)]
    [//
     [extension
      ["." bundle]]]]])

## [Procedures]
## [[Bits]]
(template [<name> <op>]
  [(def: (<name> [paramG subjectG])
     (Binary Expression)
     (<op> subjectG (///runtime.i64//to-number paramG)))]

  [i64//left-shift             ///runtime.i64//left-shift]
  [i64//arithmetic-right-shift ///runtime.i64//arithmetic-right-shift]
  [i64//logical-right-shift    ///runtime.i64//logic-right-shift]
  )

## [[Numbers]]
(import: #long java/lang/Double
  (#static MIN_VALUE double)
  (#static MAX_VALUE double))

(template [<name> <const>]
  [(def: (<name> _)
     (Nullary Expression)
     (///primitive.f64 <const>))]

  [f64//smallest (java/lang/Double::MIN_VALUE)]
  [f64//min      (f/* -1.0 (java/lang/Double::MAX_VALUE))]
  [f64//max      (java/lang/Double::MAX_VALUE)]
  )

(def: f64//decode
  (Unary Expression)
  (|>> list
       (_.apply/* (_.var "parseFloat"))
       _.return
       (_.closure (list))
       ///runtime.lux//try))

(def: i64//char
  (Unary Expression)
  (|>> ///runtime.i64//to-number
       (list)
       (_.apply/* (_.var "String.fromCharCode"))))

## [[Text]]
(def: (text//concat [leftG rightG])
  (Binary Expression)
  (|> leftG (_.do "concat" (list rightG))))

(def: (text//clip [startG endG subjectG])
  (Trinary Expression)
  (///runtime.text//clip startG endG subjectG))

(def: (text//index [startG partG subjectG])
  (Trinary Expression)
  (///runtime.text//index startG partG subjectG))

## [[IO]]
(def: (io//log messageG)
  (Unary Expression)
  ($_ _.,
      (///runtime.io//log messageG)
      ///runtime.unit))

(def: (io//exit codeG)
  (Unary Expression)
  (let [@@process (_.var "process")
        @@window (_.var "window")
        @@location (_.var "location")]
    ($_ _.or
        ($_ _.and
            (_.not (_.= _.undefined (_.type-of @@process)))
            (_.the "exit" @@process)
            (_.do "exit" (list (///runtime.i64//to-number codeG)) @@process))
        (_.do "close" (list) @@window)
        (_.do "reload" (list) @@location))))

(def: (io//current-time _)
  (Nullary Expression)
  (|> (_.new (_.var "Date") (list))
      (_.do "getTime" (list))
      ///runtime.i64//from-number))

## [Bundles]
(def: lux-procs
  Bundle
  (|> bundle.empty
      (bundle.install "is" (binary (product.uncurry _.=)))
      (bundle.install "try" (unary ///runtime.lux//try))))

(def: i64-procs
  Bundle
  (<| (bundle.prefix "i64")
      (|> bundle.empty
          (bundle.install "and" (binary (product.uncurry ///runtime.i64//and)))
          (bundle.install "or" (binary (product.uncurry ///runtime.i64//or)))
          (bundle.install "xor" (binary (product.uncurry ///runtime.i64//xor)))
          (bundle.install "left-shift" (binary i64//left-shift))
          (bundle.install "logical-right-shift" (binary i64//logical-right-shift))
          (bundle.install "arithmetic-right-shift" (binary i64//arithmetic-right-shift))
          (bundle.install "=" (binary (product.uncurry ///runtime.i64//=)))
          (bundle.install "<" (binary (product.uncurry ///runtime.i64//<)))
          (bundle.install "+" (binary (product.uncurry ///runtime.i64//+)))
          (bundle.install "-" (binary (product.uncurry ///runtime.i64//-)))
          (bundle.install "*" (binary (product.uncurry ///runtime.i64//*)))
          (bundle.install "/" (binary (product.uncurry ///runtime.i64///)))
          (bundle.install "%" (binary (product.uncurry ///runtime.i64//%)))
          (bundle.install "f64" (unary ///runtime.i64//to-number))
          (bundle.install "char" (unary i64//char))
          )))

(def: f64-procs
  Bundle
  (<| (bundle.prefix "f64")
      (|> bundle.empty
          (bundle.install "+" (binary (product.uncurry _.+)))
          (bundle.install "-" (binary (product.uncurry _.-)))
          (bundle.install "*" (binary (product.uncurry _.*)))
          (bundle.install "/" (binary (product.uncurry _./)))
          (bundle.install "%" (binary (product.uncurry _.%)))
          (bundle.install "=" (binary (product.uncurry _.=)))
          (bundle.install "<" (binary (product.uncurry _.<)))
          (bundle.install "smallest" (nullary f64//smallest))
          (bundle.install "min" (nullary f64//min))
          (bundle.install "max" (nullary f64//max))
          (bundle.install "i64" (unary ///runtime.i64//from-number))
          (bundle.install "encode" (unary (_.do "toString" (list))))
          (bundle.install "decode" (unary f64//decode)))))

(def: text-procs
  Bundle
  (<| (bundle.prefix "text")
      (|> bundle.empty
          (bundle.install "=" (binary (product.uncurry _.=)))
          (bundle.install "<" (binary (product.uncurry _.<)))
          (bundle.install "concat" (binary text//concat))
          (bundle.install "index" (trinary text//index))
          (bundle.install "size" (unary (|>> (_.the "length") ///runtime.i64//from-number)))
          (bundle.install "char" (binary (product.uncurry ///runtime.text//char)))
          (bundle.install "clip" (trinary text//clip))
          )))

(def: io-procs
  Bundle
  (<| (bundle.prefix "io")
      (|> bundle.empty
          (bundle.install "log" (unary io//log))
          (bundle.install "error" (unary ///runtime.io//error))
          (bundle.install "exit" (unary io//exit))
          (bundle.install "current-time" (nullary io//current-time)))))

(def: #export bundle
  Bundle
  (<| (bundle.prefix "lux")
      (|> lux-procs
          (dictionary.merge i64-procs)
          (dictionary.merge f64-procs)
          (dictionary.merge text-procs)
          (dictionary.merge io-procs)
          )))
