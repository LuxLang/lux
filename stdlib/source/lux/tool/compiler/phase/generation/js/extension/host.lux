(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." function]
    ["<>" parser
     ["<s>" synthesis (#+ Parser)]]]
   [data
    ["." error]
    [collection
     ["." dictionary]]]
   [target
    ["_" js (#+ Expression)]]]
  ["." // #_
   ["#." common (#+ custom)]
   ["/#" // #_
    ["#." runtime (#+ Operation Phase Handler Bundle
                      with-vars)]
    ["#." primitive]
    ["/#" // #_
     [extension (#+ Nullary Unary Binary Trinary
                    nullary unary binary trinary)]
     ["/#" //
      ["." extension
       ["." bundle]]]]]])

(def: array::new
  (Unary Expression)
  (|>> ///runtime.i64//to-number list (_.new (_.var "Array"))))

(def: array::length
  (Unary Expression)
  (|>> (_.the "length") ///runtime.i64//from-number))

(def: (array::read [indexG arrayG])
  (Binary Expression)
  (_.at indexG arrayG))

(def: (array::write [indexG valueG arrayG])
  (Trinary Expression)
  (///runtime.array//write indexG valueG arrayG))

(def: (array::delete [indexG arrayG])
  (Binary Expression)
  (///runtime.array//delete indexG arrayG))

(def: array
  Bundle
  (<| (bundle.prefix "array")
      (|> bundle.empty
          (bundle.install "new" (unary array::new))
          (bundle.install "length" (unary array::length))
          (bundle.install "read" (binary array::read))
          (bundle.install "write" (trinary array::write))
          (bundle.install "delete" (binary array::delete))
          )))

(def: object::new
  (custom
   [($_ <>.and <s>.any (<>.some <s>.any))
    (function (_ extension phase [constructorS inputsS])
      (do /////.monad
        [constructorG (phase constructorS)
         inputsG (monad.map @ phase inputsS)]
        (wrap (_.new constructorG inputsG))))]))

(def: object::get
  Handler
  (custom
   [($_ <>.and <s>.text <s>.any)
    (function (_ extension phase [fieldS objectS])
      (do /////.monad
        [objectG (phase objectS)]
        (wrap (_.the fieldS objectG))))]))

(def: object::do
  Handler
  (custom
   [($_ <>.and <s>.text <s>.any (<>.some <s>.any))
    (function (_ extension phase [methodS objectS inputsS])
      (do /////.monad
        [objectG (phase objectS)
         inputsG (monad.map @ phase inputsS)]
        (wrap (_.do methodS inputsG objectG))))]))

(template [<!> <?> <unit>]
  [(def: <!> (Nullary Expression) (function.constant <unit>))
   (def: <?> (Unary Expression) (_.= <unit>))]

  [object::null object::null? _.null]
  [object::undefined object::undefined? _.undefined]
  )

(def: object
  Bundle
  (<| (bundle.prefix "object")
      (|> bundle.empty
          (bundle.install "new" object::new)
          (bundle.install "get" object::get)
          (bundle.install "do" object::do)
          (bundle.install "null" (nullary object::null))
          (bundle.install "null?" (unary object::null?))
          (bundle.install "undefined" (nullary object::undefined))
          (bundle.install "undefined?" (unary object::undefined?))
          )))

(def: js::constant
  (custom
   [<s>.text
    (function (_ extension phase name)
      (do /////.monad
        []
        (wrap (_.var name))))]))

(def: js::apply
  (custom
   [($_ <>.and <s>.any (<>.some <s>.any))
    (function (_ extension phase [abstractionS inputsS])
      (do /////.monad
        [abstractionG (phase abstractionS)
         inputsG (monad.map @ phase inputsS)]
        (wrap (_.apply/* abstractionG inputsG))))]))

(def: #export bundle
  Bundle
  (<| (bundle.prefix "js")
      (|> bundle.empty
          (bundle.install "constant" js::constant)
          (bundle.install "apply" js::apply)
          (bundle.install "type-of" (unary _.type-of))
          (dictionary.merge ..array)
          (dictionary.merge ..object)
          )))
