(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [host
    ["_" js (#+ Expression)]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase)]
   ["#." primitive]
   ["#//" ///
    ["#/" // #_
     [analysis (#+ Variant Tuple)]
     ["#." synthesis (#+ Synthesis)]]]])

(def: #export (tuple generate elemsS+)
  (-> Phase (Tuple Synthesis) (Operation Expression))
  (case elemsS+
    #.Nil
    (:: ////.monad wrap (//primitive.text /////synthesis.unit))

    (#.Cons singletonS #.Nil)
    (generate singletonS)

    _
    (do ////.monad
      [elemsT+ (monad.map @ generate elemsS+)]
      (wrap (_.array elemsT+)))))

(def: #export (variant generate [lefts right? valueS])
  (-> Phase (Variant Synthesis) (Operation Expression))
  (:: ////.monad map
      (//runtime.variant (_.i32 (.int (if right?
                                        (inc lefts)
                                        lefts)))
                         (//runtime.flag right?))
      (generate valueS)))
