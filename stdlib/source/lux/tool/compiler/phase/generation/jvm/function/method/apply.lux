(.module:
  [lux (#- type)
   [abstract
    ["." monad]]
   [data
    [number
     ["n" nat]
     ["." i32]]
    [collection
     ["." list]]]
   [target
    [jvm
     ["." descriptor (#+ Descriptor Value Return)]
     ["_" instruction (#+ Instruction) ("#@." monad)]
     ["." constant]
     [encoding
      ["." unsigned]]]]]
  ["." /// #_
   ["#." abstract]
   ["#." arity]
   ["/#" // #_
    ["#." value]
    [////
     [reference (#+ Register)]
     [arity (#+ Arity)]]]])

(def: #export name "apply")

(def: #export (type arity)
  (-> Arity [(List (Descriptor (Value Any))) (Descriptor (Return Any))])
  [(list.repeat arity ////value.type)
   ////value.type])

(def: (increment by)
  (-> Nat (Instruction Any))
  ($_ _.compose
      (<| _.ldc/integer constant.integer i32.i32 .i64 by)
      _.iadd))

(def: (inputs offset amount)
  (-> Register Nat (Instruction Any))
  ($_ _.compose
      (|> amount
          list.indices
          (monad.map _.monad (|>> (n.+ offset) unsigned.u1 _.aload)))
      (_@wrap [])
      ))

(def: #export (instruction offset amount)
  (-> Register Nat (Instruction Any))
  (let [arity (n.min amount ///arity.maximum)]
    ($_ _.compose
        (_.checkcast ///abstract.class)
        (..inputs offset arity)
        (_.invokevirtual ///abstract.class ..name (..type arity))
        (if (n.> ///arity.maximum amount)
          (instruction (n.+ ///arity.maximum offset)
                       (n.- ///arity.maximum amount))
          (_@wrap []))
        )))
