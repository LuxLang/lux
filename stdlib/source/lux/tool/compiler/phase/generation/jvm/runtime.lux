(.module:
  [lux (#- Type Definition case)
   [data
    [binary (#+ Binary)]]
   [target
    [jvm
     ["_" instruction (#+ Label Instruction)]
     ["." type (#+ Type)
      ["." category (#+ Method)]]]]]
  ["." // #_
   ["#." value]
   ["/#" //
    [///
     [reference (#+ Register)]]]]
  )

(type: #export Byte-Code Binary)

(type: #export Definition [Text Byte-Code])

(type: #export Anchor [Label Register])

(template [<name> <base>]
  [(type: #export <name>
     (<base> Anchor (Instruction Any) Definition))]

  [Operation ///.Operation]
  [Phase ///.Phase]
  [Handler ///.Handler]
  [Bundle ///.Bundle]
  )

(type: #export (Generator i)
  (-> Phase i (Operation (Instruction Any))))

(def: #export class (type.class "LuxRuntime" (list)))

(def: #export $Tag type.int)
(def: #export $Flag //value.type)
(def: #export $Variant (type.array //value.type))

(def: #export $Offset type.int)
(def: #export $Tuple (type.array //value.type))

(def: #export $Stack (type.array //value.type))

(def: procedure
  (-> Text (Type Method) (Instruction Any))
  (_.invokestatic ..class))

(def: failure-type
  (type.method [(list) type.void (list)]))

(def: #export apply-failure
  (..procedure "apply_failure" ..failure-type))

(def: #export pm-failure
  (..procedure "pm_failure" ..failure-type))

(def: push-name
  "push")

(def: push-type
  (type.method [(list ..$Stack //value.type) ..$Stack (list)]))

(def: #export push
  (..procedure ..push-name ..push-type))

(def: case-name
  "case")

(def: case-type
  (type.method [(list ..$Variant ..$Tag ..$Flag) //value.type (list)]))

(def: #export case
  (..procedure ..case-name ..case-type))

(def: projection-type
  (type.method [(list ..$Tuple $Offset) //value.type (list)]))

(def: #export left
  (..procedure "left" ..projection-type))

(def: #export right
  (..procedure "right" ..projection-type))
