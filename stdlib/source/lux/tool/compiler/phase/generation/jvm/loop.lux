(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." function]]
   [data
    ["." product]
    [number
     ["n" nat]]
    [collection
     ["." list ("#@." functor)]]]
   [target
    [jvm
     ["_" bytecode (#+ Label Bytecode) ("#@." monad)]]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase)]
   ["#." value]
   [////
    [reference (#+ Register)]
    ["." synthesis (#+ Path Synthesis)]
    ["." phase
     ["." generation]]]])

(def: (invariant? register changeS)
  (-> Register Synthesis Bit)
  (case changeS
    (^ (synthesis.variable/local var))
    (n.= register var)

    _
    false))

(def: no-op
  (_@wrap []))

(def: #export (recur translate updatesS)
  (-> Phase (List Synthesis) (Operation (Bytecode Any)))
  (do phase.monad
    [[@begin offset] generation.anchor
     updatesG (|> updatesS
                  list.enumerate
                  (list@map (function (_ [index updateS])
                              [(n.+ offset index) updateS]))
                  (monad.map @ (function (_ [register updateS])
                                 (if (invariant? register updateS)
                                   (wrap [..no-op
                                          ..no-op])
                                   (do @
                                     [fetchG (translate updateS)
                                      #let [storeG (_.astore register)]]
                                     (wrap [fetchG storeG]))))))]
    (wrap ($_ _.compose
              ## It may look weird that first I fetch all the values separately,
              ## and then I store them all.
              ## It must be done that way in order to avoid a potential bug.
              ## Let's say that you'll recur with 2 expressions: X and Y.
              ## If Y depends on the value of X, and you don't perform fetches
              ## and stores separately, then by the time Y is evaluated, it
              ## will refer to the new value of X, instead of the old value, as
              ## should be the case.
              (|> updatesG
                  (list@map product.left)
                  (monad.seq _.monad))
              (|> updatesG
                  list.reverse
                  (list@map product.right)
                  (monad.seq _.monad))
              (_.goto @begin)))))

(def: #export (scope translate [offset initsS+ iterationS])
  (-> Phase [Nat (List Synthesis) Synthesis] (Operation (Bytecode Any)))
  (do phase.monad
    [@begin //runtime.forge-label
     initsI+ (monad.map @ translate initsS+)
     iterationG (generation.with-anchor [@begin offset]
                  (translate iterationS))
     #let [initializationG (|> (list.enumerate initsI+)
                               (list@map (function (_ [index initG])
                                           ($_ _.compose
                                               initG
                                               (_.astore (n.+ offset index)))))
                               (monad.seq _.monad))]]
    (wrap ($_ _.compose
              initializationG
              (_.set-label @begin)
              iterationG))))
