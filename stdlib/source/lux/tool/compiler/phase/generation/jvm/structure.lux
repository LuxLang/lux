(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [data
    [number
     ["." i32]]
    [collection
     ["." list]]]
   [target
    [jvm
     ["." constant]
     ["_" instruction (#+ Instruction)]
     ["." type]]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Generator)]
   ["#." primitive]
   ["#//" ///
    ["#/" // #_
     [analysis (#+ Variant Tuple)]
     ["#." synthesis (#+ Synthesis)]]]])

(def: $Object (type.class "java.lang.Object" (list)))

(def: unitG (Instruction Any) (//primitive.text /////synthesis.unit))

(template: (!integer <value>)
  (|> <value> .i64 i32.i32 constant.integer))

(def: #export (tuple generate membersS)
  (Generator (Tuple Synthesis))
  (case membersS
    #.Nil
    (:: ////.monad wrap ..unitG)

    (#.Cons singletonS #.Nil)
    (generate singletonS)

    _
    (do ////.monad
      [membersI (|> membersS
                    list.enumerate
                    (monad.map @ (function (_ [idx member])
                                   (do @
                                     [memberI (generate member)]
                                     (wrap (do _.monad
                                             [_ _.dup
                                              _ (_.ldc/integer (!integer idx))
                                              _ memberI]
                                             _.aastore))))))]
      (wrap (do _.monad
              [_ (_.ldc/integer (!integer (list.size membersS)))
               _ (_.anewarray $Object)]
              (monad.seq @ membersI))))))

(def: (flagG right?)
  (-> Bit (Instruction Any))
  (if right?
    ..unitG
    _.aconst-null))

(def: #export (variant generate [lefts right? valueS])
  (Generator (Variant Synthesis))
  (do ////.monad
    [valueI (generate valueS)]
    (wrap (do _.monad
            [_ (_.ldc/integer (!integer (if right?
                                          (.inc lefts)
                                          lefts)))
             _ (flagG right?)
             _ valueI]
            (_.invokestatic //runtime.class "variant"
                            (type.method [(list type.int $Object $Object)
                                          (type.array $Object)
                                          (list)]))))))
