(.module:
  [lux (#- type)
   [target
    [jvm
     ["." descriptor (#+ Descriptor Value Return)]
     ["_" instruction (#+ Instruction)]
     [encoding
      ["." unsigned]]]]]
  ["." /// #_
   ["#." abstract]
   ["#." arity]
   ["/#" // #_
    [////
     ["." arity (#+ Arity)]]]])

(def: #export type
  [(List (Descriptor (Value Any)))
   (Descriptor (Return Any))]
  [(list ///arity.type) descriptor.void])

(def: #export (instruction environment-size arity)
  (-> Nat Arity (Instruction Any))
  (let [arity-register (inc environment-size)]
    ($_ _.compose
        (if (arity.unary? arity)
          (_.bipush (unsigned.u1 0))
          (_.iload (unsigned.u1 arity-register)))
        (_.invokespecial ///abstract.class "<init>" ..type))))
