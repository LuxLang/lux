(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [control
    [state (#+ State)]]
   [data
    [number
     ["." i32]
     ["n" nat]]
    [collection
     ["." list ("#@." monoid functor)]
     ["." row]]]
   [target
    [jvm
     ["." descriptor (#+ Descriptor Value Return)]
     ["." modifier (#+ Modifier) ("#@." monoid)]
     ["." field (#+ Field)]
     ["." method (#+ Method)]
     ["_" instruction (#+ Label Instruction) ("#@." monad)]
     ["." constant
      [pool (#+ Pool)]]
     [encoding
      [name (#+ External)]
      ["." unsigned]]]]]
  ["." / #_
   ["#." abstract]
   ["#." arity]
   ["#." field
    ["#/." foreign]
    ["#/." partial
     ["#/." count]]]
   ["#." method #_
    ["#/." new]
    ["#/." reset]
    ["#/." implementation]
    ["#/." apply]]
   ["/#" // #_
    [runtime (#+ Operation Phase)]
    ["#." value]
    ["#." reference]
    [////
     [reference (#+ Register)]
     [analysis (#+ Environment)]
     [synthesis (#+ Synthesis Abstraction Apply)]
     ["." arity (#+ Arity)]
     ["." phase]]]])

(def: #export (apply generate [abstractionS argsS])
  (-> Phase Apply (Operation (Instruction Any)))
  (do phase.monad
    [abstractionG (generate abstractionS)
     argsG (monad.map @ generate argsS)]
    (wrap ($_ _.compose
              abstractionG
              (|> argsG
                  (list.split-all /arity.maximum)
                  (monad.map _.monad
                             (function (_ batchG)
                               ($_ _.compose
                                   (_.checkcast /abstract.class)
                                   (monad.seq _.monad batchG)
                                   (_.invokevirtual /abstract.class /method/apply.name (/method/apply.type (list.size batchG)))
                                   ))))))))
