(.module:
  [lux (#- i64)
   [abstract
    [monad (#+ do)]]
   [target
    [jvm
     ["|" descriptor]
     ["." constant]
     ["_" instruction (#+ Instruction)]]]
   [macro
    ["." template]]]
  ["." // #_
   ["#." runtime]])

(def: #export (bit value)
  (-> Bit (Instruction Any))
  (_.getstatic "java.lang.Boolean"
               (if value "TRUE" "FALSE")
               (|.class "java.lang.Boolean")))

(template [<name> <inputT> <ldc> <class> <inputD>]
  [(def: #export (<name> value)
     (-> <inputT> (Instruction Any))
     (do _.monad
       [_ (`` (|> value (~~ (template.splice <ldc>))))]
       (_.invokestatic <class> "valueOf"
                       [(list <inputD>)
                        (|.class <class>)])))]

  [i64 (I64 Any) [.int constant.long _.ldc/long] "java.lang.Long"   |.long]
  [f64 Frac      [constant.double _.ldc/double]  "java.lang.Double" |.double]
  )

(def: #export text _.ldc/string)
