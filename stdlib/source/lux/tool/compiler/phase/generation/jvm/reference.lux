(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [data
    [text
     ["%" format (#+ format)]]]
   [tool
    [compiler
     ["." reference (#+ Register Variable)]
     ["." phase ("operation@." monad)
      ["." generation]]]]
   [target
    [jvm
     ["_" instruction (#+ Instruction)]
     [encoding
      ["." unsigned]]]]]
  ["." // #_
   [runtime (#+ Operation)]
   ["#." value]])

(def: #export this
  (Instruction Any)
  (_.aload (unsigned.u1 0)))

(template [<name> <prefix>]
  [(def: #export <name>
     (-> Register Text)
     (|>> %.nat (format <prefix>)))]

  [foreign-name "f"]
  [partial-name "p"]
  )

(def: (foreign variable)
  (-> Register (Operation (Instruction Any)))
  (do phase.monad
    [function-class generation.context]
    (wrap ($_ _.compose
              ..this
              (_.getfield function-class (..foreign-name variable)
                          //value.type)))))

(def: local
  (-> Register (Instruction Any))
  (|>> unsigned.u1 _.aload))

(def: #export (variable variable)
  (-> Variable (Operation (Instruction Any)))
  (case variable
    (#reference.Local variable)
    (operation@wrap (..local variable))
    
    (#reference.Foreign variable)
    (..foreign variable)))

(def: #export (constant name)
  (-> Name (Operation (Instruction Any)))
  (do phase.monad
    [bytecode-name (generation.remember name)]
    (wrap (_.getstatic bytecode-name //value.field //value.type))))
