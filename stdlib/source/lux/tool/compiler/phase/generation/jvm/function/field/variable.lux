(.module:
  [lux (#- Type type)
   [control
    [state (#+ State)]]
   [data
    [collection
     ["." list ("#@." functor)]
     ["." row]]]
   [target
    [jvm
     ["." modifier (#+ Modifier) ("#@." monoid)]
     ["." field (#+ Field)]
     ["_" instruction (#+ Instruction)]
     [type (#+ Type)
      [category (#+ Value Class)]]
     [constant
      [pool (#+ Pool)]]]]]
  ["." //// #_
   ["#." type]
   ["#." reference]
   [////
    [reference (#+ Register)]]])

(def: #export type ////type.value)

(def: #export (get class name)
  (-> (Type Class) Text (Instruction Any))
  ($_ _.compose
      ////reference.this
      (_.getfield class name ..type)
      ))

(def: #export (put naming class register value)
  (-> (-> Register Text) (Type Class) Register (Instruction Any) (Instruction Any))
  ($_ _.compose
      ////reference.this
      value
      (_.putfield class (naming register) ..type)))

(def: modifier
  (Modifier Field)
  ($_ modifier@compose
      field.private
      field.final
      ))

(def: #export (variable name type)
  (-> Text (Type Value) (State Pool Field))
  (field.field ..modifier name type (row.row)))

(def: #export (variables naming amount)
  (-> (-> Register Text) Nat (List (State Pool Field)))
  (|> amount
      list.indices
      (list@map (function (_ register)
                  (..variable (naming register) ..type)))))
