(.module:
  [lux (#- type)
   [abstract
    ["." monad (#+ do)]]
   [control
    [state (#+ State)]]
   [data
    [number
     ["n" nat]]
    [collection
     ["." list ("#@." monoid)]]]
   [target
    [jvm
     ["." modifier (#+ Modifier) ("#@." monoid)]
     ["." field (#+ Field)]
     ["." method (#+ Method)]
     ["_" instruction (#+ Instruction)]
     ["." constant
      [pool (#+ Pool)]]
     [encoding
      [name (#+ External)]
      ["." unsigned]]
     [type
      ["." category (#+ Value Return)]
      ["." descriptor (#+ Descriptor)]]]]]
  ["." //
   ["#." init]
   ["/#" // #_
    ["#." arity]
    ["#." field
     ["#/." foreign]
     ["#/." partial]]
    ["/#" // #_
     [runtime (#+ Operation)]
     ["#." value]
     ["#." reference]
     [////
      [analysis (#+ Environment)]
      ["." arity (#+ Arity)]
      ["." phase]]]]])

(def: (arguments arity)
  (-> Arity (List (Descriptor Value)))
  (list.repeat (dec arity) ////value.type))

(def: #export (type environment arity)
  (-> Environment Arity [(List (Descriptor Value))
                         (Descriptor Return)])
  [(list@compose (///field/foreign.closure environment)
                 (if (arity.multiary? arity)
                   (list& ///arity.type (arguments arity))
                   (list)))
   descriptor.void])

(def: #export (instance class environment arity)
  (-> External Environment Arity (Operation (Instruction Any)))
  (do phase.monad
    [foreign* (monad.map @ ////reference.variable environment)]
    (wrap ($_ _.compose
              (_.new class)
              _.dup
              (monad.seq _.monad foreign*)
              (///field/partial.new arity)
              (_.invokespecial class "<init>" (..type environment arity))))))

(def: #export (method class environment arity)
  (-> External Environment Arity (State Pool Method))
  (let [after-this (: (-> Nat Nat)
                      (n.+ 1))
        environment-size (list.size environment)
        after-environment (: (-> Nat Nat)
                             (|>> after-this (n.+ environment-size)))
        after-arity (: (-> Nat Nat)
                       (|>> after-environment (n.+ 1)))]
    (method.method //.modifier "<init>"
                   (descriptor.method (..type environment arity))
                   (list)
                   ($_ _.compose
                       ////reference.this
                       (//init.instruction environment-size arity)
                       (monad.map _.monad (function (_ register)
                                            ($_ _.compose
                                                ////reference.this
                                                (_.aload (unsigned.u1 (after-this register)))
                                                (_.putfield class (////reference.foreign-name register) ////value.type)))
                                  (list.indices environment-size))
                       (monad.map _.monad (function (_ register)
                                            ($_ _.compose
                                                ////reference.this
                                                (_.aload (unsigned.u1 (after-arity register)))
                                                (_.putfield class (////reference.partial-name register) ////value.type)))
                                  (list.indices (n.- ///arity.minimum arity)))
                       _.areturn))))
