(.module:
  [lux #*
   [control
    pipe]
   [data
    [text
     format]]
   [type (#+ :share)]]
  [//
   ["/." //
    ["//." // ("#/." monad)
     [synthesis (#+ Synthesis)]
     [//
      ["." reference (#+ Register Variable Reference)]]]]])

(signature: #export (System expression)
  (: (-> Register expression)
     local)
  (: (-> Register expression)
     foreign)
  (: (All [anchor statement]
       (-> Variable (///.Operation anchor expression statement)))
     variable)
  (: (All [anchor statement]
       (-> Name (///.Operation anchor expression statement)))
     constant)
  (: (All [anchor statement]
       (-> Reference (///.Operation anchor expression statement)))
     reference))

(def: (variable-maker prefix variable)
  (All [expression]
    (-> Text (-> Text expression)
        (-> Register expression)))
  (|>> %n (format prefix) variable))

(def: #export foreign
  (All [expression]
    (-> (-> Text expression)
        (-> Register expression)))
  (variable-maker "f"))

(def: #export local
  (All [expression]
    (-> (-> Text expression)
        (-> Register expression)))
  (variable-maker "l"))

(def: #export (system constant variable)
  (All [expression]
    (-> (-> Text expression) (-> Text expression)
        (System expression)))
  (let [local (..local variable)
        foreign (..foreign variable)
        variable (:share [expression]
                         {(-> Text expression)
                          variable}
                         {(All [anchor statement]
                            (-> Variable (///.Operation anchor expression statement)))
                          (|>> (case> (#reference.Local register)
                                      (local register)
                                      
                                      (#reference.Foreign register)
                                      (foreign register))
                               /////wrap)})
        constant (:share [expression]
                         {(-> Text expression)
                          constant}
                         {(All [anchor statement]
                            (-> Name (///.Operation anchor expression statement)))
                          (|>> ///.remember (/////map constant))})]
    (structure
     (def: local local)
     (def: foreign foreign)
     (def: variable variable)
     (def: constant constant)
     (def: reference
       (|>> (case> (#reference.Constant value)
                   (constant value)
                   
                   (#reference.Variable value)
                   (variable value)))))))
