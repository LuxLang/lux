(.module:
  [lux (#- Scope)
   [control
    ["." monad (#+ do)]]
   [data
    ["." product]
    ["." text
     format]
    [collection
     ["." list ("#/." functor)]]]
   [host
    ["_" js (#+ Computation Var)]]]
  [//
   [runtime (#+ Operation Phase)]
   ["." reference]
   ["//." case]
   ["/." //
    ["//." //
     [//
      [synthesis (#+ Scope Synthesis)]]]]])

(def: @scope (_.var "scope"))

(def: #export (scope translate [start initsS+ bodyS])
  (-> Phase (Scope Synthesis) (Operation Computation))
  (do ////.monad
    [initsO+ (monad.map @ translate initsS+)
     bodyO (///.with-anchor @scope
             (translate bodyS))
     #let [closure (_.function @scope
                     (|> initsS+
                         list.enumerate
                         (list/map (|>> product.left (n/+ start) //case.register)))
                     (_.return bodyO))]]
    (wrap (_.apply/* closure initsO+))))

(def: #export (recur translate argsS+)
  (-> Phase (List Synthesis) (Operation Computation))
  (do ////.monad
    [@scope ///.anchor
     argsO+ (monad.map @ translate argsS+)]
    (wrap (_.apply/* @scope argsO+))))
