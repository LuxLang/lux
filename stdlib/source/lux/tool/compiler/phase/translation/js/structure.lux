(.module:
  [lux #*
   [control
    ["." monad (#+ do)]]
   [host
    ["_" js (#+ Expression)]]]
  [//
   ["//." runtime (#+ Generator)]
   ["//." primitive]
   ["//." ///
    [analysis (#+ Variant Tuple)]
    ["." synthesis (#+ Synthesis)]]])

(def: #export (tuple elemsS+ translate)
  (Generator (Tuple Synthesis))
  (case elemsS+
    #.Nil
    (//primitive.text synthesis.unit)

    (#.Cons singletonS #.Nil)
    (translate singletonS)

    _
    (do /////.monad
      [elemsT+ (monad.map @ translate elemsS+)]
      (wrap (_.array elemsT+)))))

(def: #export (variant [lefts right? valueS] translate)
  (Generator (Variant Synthesis))
  (do /////.monad
    [valueT (translate valueS)]
    (wrap (//runtime.variant (_.i32 (.int lefts)) (//runtime.flag right?) valueT))))
