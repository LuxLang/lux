(.module:
  [lux #*
   [control
    ["." monad (#+ do)]]
   [host
    ["_" js (#+ Expression)]]]
  [//
   ["//." runtime (#+ Operation Phase)]
   ["//." primitive]
   ["/." ///
    [analysis (#+ Variant Tuple)]
    ["." synthesis (#+ Synthesis)]]])

(def: #export (tuple translate elemsS+)
  (-> Phase (Tuple Synthesis) (Operation Expression))
  (case elemsS+
    #.Nil
    (:: ////.monad wrap (//primitive.text synthesis.unit))

    (#.Cons singletonS #.Nil)
    (translate singletonS)

    _
    (do ////.monad
      [elemsT+ (monad.map @ translate elemsS+)]
      (wrap (_.array elemsT+)))))

(def: #export (variant translate [lefts right? valueS])
  (-> Phase (Variant Synthesis) (Operation Expression))
  (:: ////.monad map
      (//runtime.variant (_.i32 (.int (if right?
                                        (inc lefts)
                                        lefts)))
                         (//runtime.flag right?))
      (translate valueS)))
