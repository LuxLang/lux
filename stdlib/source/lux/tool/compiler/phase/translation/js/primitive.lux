(.module:
  [lux (#- int)
   [control
    [pipe (#+ cond> new>)]]
   [data
    [number
     ["." i64]
     ["." frac]]
    [text
     format]]
   [host
    ["_" js (#+ Expression)]]]
  [//
   ["//." runtime (#+ Operation)]
   [//
    ["//." // ("#/." monad)]]])

(def: #export bit
  (-> Bit (Operation Expression))
  (|>> _.boolean /////wrap))

(def: high
  (-> Int Int)
  (i64.logic-right-shift 32))

(def: low
  (-> Int Int)
  (let [mask (dec (i64.left-shift 32 1))]
    (|>> (i64.and mask))))

(def: #export (int value)
  (-> Int (Operation Expression))
  (/////wrap (//runtime.i64//new (|> value ..high _.i32)
                                 (|> value ..low _.i32))))

(def: #export frac
  (-> Frac (Operation Expression))
  (|>> (cond> [(f/= frac.positive-infinity)]
              [(new> _.positive-infinity [])]
              
              [(f/= frac.negative-infinity)]
              [(new> _.negative-infinity [])]
              
              [(f/= frac.not-a-number)]
              [(new> _.not-a-number [])]
              
              ## else
              [_.number])
       /////wrap))

(def: #export text
  (-> Text (Operation Expression))
  (|>> _.string  /////wrap))
