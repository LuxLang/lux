(.module:
  [lux (#- i64)
   [control
    [pipe (#+ cond> new>)]]
   [data
    [number
     ["." i64]
     ["." frac]]]
   [host
    ["_" js (#+ Computation)]]]
  [//
   ["//." runtime]])

(def: #export bit
  (-> Bit Computation)
  _.boolean)

(def: high
  (-> (I64 Any) (I64 Any))
  (i64.logic-right-shift 32))

(def: low
  (-> (I64 Any) (I64 Any))
  (let [mask (dec (i64.left-shift 32 1))]
    (|>> (i64.and mask))))

(def: #export (i64 value)
  (-> (I64 Any) Computation)
  (//runtime.i64//new (|> value ..high .int _.i32)
                      (|> value ..low .int _.i32)))

(def: #export f64
  (-> Frac Computation)
  (|>> (cond> [(f/= frac.positive-infinity)]
              [(new> _.positive-infinity [])]
              
              [(f/= frac.negative-infinity)]
              [(new> _.negative-infinity [])]
              
              [(f/= frac.not-a-number)]
              [(new> _.not-a-number [])]
              
              ## else
              [_.number])))

(def: #export text
  (-> Text Computation)
  _.string)
