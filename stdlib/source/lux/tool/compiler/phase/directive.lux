(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." exception (#+ exception:)]]
   [data
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#;." fold monoid)]]]
   ["." macro]]
  ["." //
   ["#." extension]
   [".P" analysis
    ["." type]]
   ["#/" // #_
    [reference (#+)]
    ["#." analysis
     ["#/." macro (#+ Expander)]]
    ["/" directive (#+ Phase)]]])

(exception: #export (not-a-directive {code Code})
  (exception.report
   ["Directive" (%.code code)]))

(exception: #export (invalid-macro-call {code Code})
  (exception.report
   ["Code" (%.code code)]))

(exception: #export (macro-was-not-found {name Name})
  (exception.report
   ["Name" (%.name name)]))

(with-expansions [<lux_def_module> (as-is [|form-cursor| (#.Form (list& [|text-cursor| (#.Text "lux def module")] annotations))])]
  (def: #export (phase expander)
    (-> Expander Phase)
    (let [analyze (analysisP.phase expander)]
      (function (recur code)
        (case code
          (^ [_ (#.Form (list& [_ (#.Text name)] inputs))])
          (//extension.apply recur [name inputs])

          (^ [_ (#.Form (list& macro inputs))])
          (do //.monad
            [expansion (/.lift-analysis
                        (do @
                          [macroA (type.with-type Macro
                                    (analyze macro))]
                          (case macroA
                            (^ (///analysis.constant macro-name))
                            (do @
                              [?macro (//extension.lift (macro.find-macro macro-name))
                               macro (case ?macro
                                       (#.Some macro)
                                       (wrap macro)
                                       
                                       #.None
                                       (//.throw ..macro-was-not-found macro-name))]
                              (//extension.lift (///analysis/macro.expand expander macro-name macro inputs)))
                            
                            _
                            (//.throw ..invalid-macro-call code))))]
            (case expansion
              (^ (list& <lux_def_module> referrals))
              (|> (recur <lux_def_module>)
                  (:: @ map (update@ #/.referrals (list;compose referrals))))

              _
              (|> expansion
                  (monad.map @ recur)
                  (:: @ map (list;fold /.merge-requirements /.no-requirements)))))

          _
          (//.throw ..not-a-directive code))))))
