(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [control
    ["ex" exception (#+ exception:)]]
   [data
    ["." maybe]
    ["." text
     format]
    [collection
     ["." list ("#;." functor monoid fold)]
     ["dict" dictionary (#+ Dictionary)]]]]
  ["." // #_
   ["#." loop (#+ Transform)]
   ["#/" // ("#;." monad)
    ["#/" // #_
     ["#." reference (#+ Register Variable)]
     ["#." analysis (#+ Environment Arity Analysis)]
     ["/" synthesis (#+ Path Synthesis Operation Phase)]]]])

(exception: #export (cannot-find-foreign-variable-in-environment {foreign Register} {environment Environment})
  (ex.report ["Foreign" (%n foreign)]
             ["Environment" (|> environment
                                (list;map ////reference.%variable)
                                (text.join-with " "))]))

(def: arity-arguments
  (-> Arity (List Synthesis))
  (|>> dec
       (list.n/range 1)
       (list;map (|>> /.variable/local))))

(template: #export (self-reference)
  (/.variable/local 0))

(def: (expanded-nested-self-reference arity)
  (-> Arity Synthesis)
  (/.function/apply [(..self-reference) (arity-arguments arity)]))

(def: #export (apply phase)
  (-> Phase Phase)
  (function (_ exprA)
    (let [[funcA argsA] (////analysis.application exprA)]
      (do ///.monad
        [funcS (phase funcA)
         argsS (monad.map @ phase argsA)
         ## locals /.locals
         ]
        (with-expansions [<apply> (as-is (/.function/apply [funcS argsS]))]
          (case funcS
            ## (^ (/.function/abstraction functionS))
            ## (wrap (|> functionS
            ##           (//loop.loop (get@ #/.environment functionS) locals argsS)
            ##           (maybe.default <apply>)))

            (^ (/.function/apply [funcS' argsS']))
            (wrap (/.function/apply [funcS' (list;compose argsS' argsS)]))

            _
            (wrap <apply>)))))))

(def: (find-foreign environment register)
  (-> Environment Register (Operation Variable))
  (case (list.nth register environment)
    (#.Some aliased)
    (///;wrap aliased)

    #.None
    (///.throw cannot-find-foreign-variable-in-environment [register environment])))

(def: (grow-path grow path)
  (-> (-> Synthesis (Operation Synthesis)) Path (Operation Path))
  (case path
    (#/.Bind register)
    (///;wrap (#/.Bind (inc register)))

    (^template [<tag>]
      (<tag> left right)
      (do ///.monad
        [left' (grow-path grow left)
         right' (grow-path grow right)]
        (wrap (<tag> left' right'))))
    ([#/.Alt] [#/.Seq])
    
    (#/.Then thenS)
    (|> thenS
        grow
        (///;map (|>> #/.Then)))

    _
    (///;wrap path)))

(def: (grow-sub-environment super sub)
  (-> Environment Environment (Operation Environment))
  (monad.map ///.monad
             (function (_ variable)
               (case variable
                 (#////reference.Local register)
                 (///;wrap (#////reference.Local (inc register)))
                 
                 (#////reference.Foreign register)
                 (find-foreign super register)))
             sub))

(def: (grow environment expression)
  (-> Environment Synthesis (Operation Synthesis))
  (case expression
    (#/.Structure structure)
    (case structure
      (#////analysis.Variant [lefts right? subS])
      (|> subS
          (grow environment)
          (///;map (|>> [lefts right?] /.variant)))
      
      (#////analysis.Tuple membersS+)
      (|> membersS+
          (monad.map ///.monad (grow environment))
          (///;map (|>> /.tuple))))

    (^ (..self-reference))
    (///;wrap (/.function/apply [expression (list (/.variable/local 1))]))
    
    (#/.Reference reference)
    (case reference
      (#////reference.Variable variable)
      (case variable
        (#////reference.Local register)
        (///;wrap (/.variable/local (inc register)))
        
        (#////reference.Foreign register)
        (|> register
            (find-foreign environment)
            (///;map (|>> /.variable))))
      
      (#////reference.Constant constant)
      (///;wrap expression))
    
    (#/.Control control)
    (case control
      (#/.Branch branch)
      (case branch
        (#/.Let [inputS register bodyS])
        (do ///.monad
          [inputS' (grow environment inputS)
           bodyS' (grow environment bodyS)]
          (wrap (/.branch/let [inputS' (inc register) bodyS'])))
        
        (#/.If [testS thenS elseS])
        (do ///.monad
          [testS' (grow environment testS)
           thenS' (grow environment thenS)
           elseS' (grow environment elseS)]
          (wrap (/.branch/if [testS' thenS' elseS'])))
        
        (#/.Case [inputS pathS])
        (do ///.monad
          [inputS' (grow environment inputS)
           pathS' (grow-path (grow environment) pathS)]
          (wrap (/.branch/case [inputS' pathS']))))
      
      (#/.Loop loop)
      (case loop
        (#/.Scope [start initsS+ iterationS])
        (do ///.monad
          [initsS+' (monad.map @ (grow environment) initsS+)
           iterationS' (grow environment iterationS)]
          (wrap (/.loop/scope [start initsS+' iterationS'])))
        
        (#/.Recur argumentsS+)
        (|> argumentsS+
            (monad.map ///.monad (grow environment))
            (///;map (|>> /.loop/recur))))
      
      (#/.Function function)
      (case function
        (#/.Abstraction [_env _arity _body])
        (do ///.monad
          [_env' (grow-sub-environment environment _env)]
          (wrap (/.function/abstraction [_env' _arity _body])))
        
        (#/.Apply funcS argsS+)
        (case funcS
          (^ (/.function/apply [(..self-reference) pre-argsS+]))
          (///;wrap (/.function/apply [(..self-reference)
                                       (list;compose pre-argsS+ argsS+)]))
          
          _
          (do ///.monad
            [funcS' (grow environment funcS)
             argsS+' (monad.map @ (grow environment) argsS+)]
            (wrap (/.function/apply [funcS' argsS+']))))))
    
    (#/.Extension name argumentsS+)
    (|> argumentsS+
        (monad.map ///.monad (grow environment))
        (///;map (|>> (#/.Extension name))))

    _
    (///;wrap expression)))

(def: #export (abstraction phase environment bodyA)
  (-> Phase Environment Analysis (Operation Synthesis))
  (do ///.monad
    [bodyS (phase bodyA)]
    (case bodyS
      (^ (/.function/abstraction [env' down-arity' bodyS']))
      (|> bodyS'
          (grow env')
          (:: @ map (|>> [environment (inc down-arity')] /.function/abstraction)))
      
      _
      (wrap (/.function/abstraction [environment 1 bodyS])))))
