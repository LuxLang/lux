## This is LuxC's parser.
## It takes the source code of a Lux file in raw text form and
## extracts the syntactic structure of the code from it.
## It only produces Lux Code nodes, and thus removes any white-space
## and comments while processing its inputs.

## Another important aspect of the parser is that it keeps track of
## its position within the input data.
## That is, the parser takes into account the line and column
## information in the input text (it doesn't really touch the
## file-name aspect of the location, leaving it intact in whatever
## base-line location it is given).

## This particular piece of functionality is not located in one
## function, but it is instead scattered throughout several parsers,
## since the logic for how to update the location varies, depending on
## what is being parsed, and the rules involved.

## You will notice that several parsers have a "where" parameter, that
## tells them the location position prior to the parser being run.
## They are supposed to produce some parsed output, alongside an
## updated location pointing to the end position, after the parser was run.

## Lux Code nodes/tokens are annotated with location meta-data
## [file-name, line, column] to keep track of their provenance and
## location, which is helpful for documentation and debugging.
(.module:
  [lux #*
   [abstract
    monad]
   [control
    ["." exception (#+ exception:)]
    [parser
     [text (#+ Offset)]]]
   [data
    ["." maybe]
    [number
     ["n" nat]
     ["." int]
     ["." rev]
     ["." frac]]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." list]
     ["." dictionary (#+ Dictionary)]]]
   [macro
    ["." template]]])

## TODO: Implement "lux syntax char case!" as a custom extension.
## That way, it should be possible to obtain the char without wrapping
## it into a java.lang.Long, thereby improving performance.

## TODO: Make an extension to take advantage of java/lang/String::indexOf<int,int>
## to get better performance than the current "lux text index" extension.

## TODO: Instead of always keeping a "where" location variable, keep the
## individual components (i.e. file, line and column) separate, so
## that updated the "where" only involved updating the components, and
## producing the locations only involved building them, without any need
## for pattern-matching and de-structuring.

(type: Char Nat)

(template [<name> <extension> <diff>]
  [(template: (<name> value)
     (<extension> <diff> value))]

  [!inc   "lux i64 +" 1]
  [!inc/2 "lux i64 +" 2]
  [!dec   "lux i64 -" 1]
  )

(template: (!clip from to text)
  ("lux text clip" from to text))

(template [<name> <extension>]
  [(template: (<name> reference subject)
     (<extension> reference subject))]

  [!n/= "lux i64 ="]
  [!i/< "lux i64 <"]
  )

(template [<name> <extension>]
  [(template: (<name> param subject)
     (<extension> param subject))]

  [!n/+ "lux i64 +"]
  [!n/- "lux i64 -"]
  )

(type: #export Aliases
  (Dictionary Text Text))

(def: #export no-aliases
  Aliases
  (dictionary.new text.hash))

(def: #export prelude "lux")

(def: #export text-delimiter text.double-quote)

(template [<char> <definition>]
  [(def: #export <definition> <char>)]

  ## Form delimiters
  ["(" open-form]
  [")" close-form]

  ## Tuple delimiters
  ["[" open-tuple]
  ["]" close-tuple]

  ## Record delimiters
  ["{" open-record]
  ["}" close-record]

  ["#" sigil]

  ["," digit-separator]

  ["+" positive-sign]
  ["-" negative-sign]

  ["." frac-separator]

  ## The parts of a name are separated by a single mark.
  ## E.g. module.short.
  ## Only one such mark may be used in an name, since there
  ## can only be 2 parts to a name (the module [before the
  ## mark], and the short [after the mark]).
  ## There are also some extra rules regarding name syntax,
  ## encoded in the parser.
  ["." name-separator]
  )

(exception: #export (end-of-file {module Text})
  (exception.report
   ["Module" (%.text module)]))

(def: amount-of-input-shown 64)

(template: (input-at start input)
  ## (-> Offset Text Text)
  (let [end (|> start (!n/+ amount-of-input-shown) (n.min ("lux text size" input)))]
    (!clip start end input)))

(exception: #export (unrecognized-input {[file line column] Location} {context Text} {input Text} {offset Offset})
  (exception.report
   ["File" file]
   ["Line" (%.nat line)]
   ["Column" (%.nat column)]
   ["Context" (%.text context)]
   ["Input" (input-at offset input)]))

(exception: #export (text-cannot-contain-new-lines {text Text})
  (exception.report
   ["Text" (%.text text)]))

(template: (!failure parser where offset source-code)
  (#.Left [[where offset source-code]
           (exception.construct ..unrecognized-input [where (%.name (name-of parser)) source-code offset])]))

(template: (!end-of-file where offset source-code current-module)
  (#.Left [[where offset source-code]
           (exception.construct ..end-of-file current-module)]))

(type: (Parser a)
  (-> Source (Either [Source Text] [Source a])))

(template: (!with-char+ @source-code-size @source-code @offset @char @else @body)
  (if (!i/< (:coerce Int @source-code-size)
            (:coerce Int @offset))
    (let [@char ("lux text char" @offset @source-code)]
      @body)
    @else))

(template: (!with-char @source-code @offset @char @else @body)
  (!with-char+ ("lux text size" @source-code) @source-code @offset @char @else @body))

(template: (!letE <binding> <computation> <body>)
  (case <computation>
    (#.Right <binding>)
    <body>

    ## (#.Left error)
    <<otherwise>>
    (:assume <<otherwise>>)))

(template: (!horizontal where offset source-code)
  [(update@ #.column inc where)
   (!inc offset)
   source-code])

(template: (!new-line where)
  ## (-> Location Location)
  (let [[where::file where::line where::column] where]
    [where::file (!inc where::line) 0]))

(template: (!forward length where)
  ## (-> Nat Location Location)
  (let [[where::file where::line where::column] where]
    [where::file where::line (!n/+ length where::column)]))

(template: (!vertical where offset source-code)
  [(!new-line where)
   (!inc offset)
   source-code])

(template [<name> <close> <tag>]
  [(template: (<name> parse where offset source-code)
     ## (-> (Parser Code) (Parser Code))
     (loop [source (: Source [(!forward 1 where) offset source-code])
            stack (: (List Code) #.Nil)]
       (case (parse source)
         (#.Right [source' top])
         (recur source' (#.Cons top stack))
         
         (#.Left [source' error])
         (if (is? <close> error)
           (#.Right [source'
                     [where (<tag> (list.reverse stack))]])
           (#.Left [source' error])))))]

  ## Form and tuple syntax is mostly the same, differing only in the
  ## delimiters involved.
  ## They may have an arbitrary number of arbitrary Code nodes as elements.
  [parse-form  ..close-form  #.Form]
  [parse-tuple ..close-tuple #.Tuple]
  )

(template: (parse-record parse where offset source-code)
  ## (-> (Parser Code) (Parser Code))
  (loop [source (: Source [(!forward 1 where) offset source-code])
         stack (: (List [Code Code]) #.Nil)]
    (case (parse source)
      (#.Right [sourceF field])
      (!letE [sourceFV value] (parse sourceF)
             (recur sourceFV (#.Cons [field value] stack)))

      (#.Left [source' error])
      (if (is? ..close-record error)
        (#.Right [source'
                  [where (#.Record (list.reverse stack))]])
        (#.Left [source' error])))))

(template: (!guarantee-no-new-lines where offset source-code content body)
  (case ("lux text index" 0 (static text.new-line) content)
    #.None
    body

    g!_
    (#.Left [[where offset source-code]
             (exception.construct ..text-cannot-contain-new-lines content)])))

(def: (parse-text where offset source-code)
  (-> Location Nat Text (Either [Source Text] [Source Code]))
  (case ("lux text index" offset (static ..text-delimiter) source-code)
    (#.Some g!end)
    (<| (let [g!content (!clip offset g!end source-code)])
        (!guarantee-no-new-lines where offset source-code g!content)
        (#.Right [[(let [size (!n/- offset g!end)]
                     (update@ #.column (|>> (!n/+ size) (!n/+ 2)) where))
                   (!inc g!end)
                   source-code]
                  [where
                   (#.Text g!content)]]))
    
    _
    (!failure ..parse-text where offset source-code)))

(with-expansions [<digits> (as-is "0" "1" "2" "3" "4" "5" "6" "7" "8" "9")
                  <non-name-chars> (template [<char>]
                                     [(~~ (static <char>))]

                                     [text.space]
                                     [text.new-line] [text.carriage-return]
                                     [..name-separator]
                                     [..open-form] [..close-form]
                                     [..open-tuple] [..close-tuple]
                                     [..open-record] [..close-record]
                                     [..text-delimiter]
                                     [..sigil])
                  <digit-separator> (static ..digit-separator)]
  (template: (!if-digit? @char @then @else)
    ("lux syntax char case!" @char
     [[<digits>]
      @then]

     ## else
     @else))

  (template: (!if-digit?+ @char @then @else-options @else)
    (`` ("lux syntax char case!" @char
         [[<digits> <digit-separator>]
          @then

          (~~ (template.splice @else-options))]

         ## else
         @else)))

  (`` (template: (!if-name-char?|tail @char @then @else)
        ("lux syntax char case!" @char
         [[<non-name-chars>]
          @else]

         ## else
         @then)))

  (`` (template: (!if-name-char?|head @char @then @else)
        ("lux syntax char case!" @char
         [[<non-name-chars> <digits>]
          @else]

         ## else
         @then)))
  )

(template: (!number-output <source-code> <start> <end> <codec> <tag>)
  (case (|> <source-code>
            (!clip <start> <end>)
            (text.replace-all ..digit-separator "")
            (\ <codec> decode))
    (#.Right output)
    (#.Right [[(let [[where::file where::line where::column] where]
                 [where::file where::line (!n/+ (!n/- <start> <end>) where::column)])
               <end>
               <source-code>]
              [where (<tag> output)]])
    
    (#.Left error)
    (#.Left [[where <start> <source-code>]
             error])))

(def: no-exponent Offset 0)

(with-expansions [<int-output> (as-is (!number-output source-code start end int.decimal #.Int))
                  <frac-output> (as-is (!number-output source-code start end frac.decimal #.Frac))
                  <failure> (!failure ..parse-frac where offset source-code)
                  <frac-separator> (static ..frac-separator)
                  <signs> (template [<sign>]
                            [(~~ (static <sign>))]

                            [..positive-sign]
                            [..negative-sign])]
  (template: (parse-frac source-code//size start where offset source-code)
    ## (-> Nat Offset (Parser Code))
    (loop [end offset
           exponent (static ..no-exponent)]
      (<| (!with-char+ source-code//size source-code end char/0 <frac-output>)
          (!if-digit?+ char/0
                       (recur (!inc end) exponent)

                       [["e" "E"]
                        (if (is? (static ..no-exponent) exponent)
                          (<| (!with-char+ source-code//size source-code (!inc end) char/1 <failure>)
                              (`` ("lux syntax char case!" char/1
                                   [[<signs>]
                                    (<| (!with-char+ source-code//size source-code (!n/+ 2 end) char/2 <failure>)
                                        (!if-digit?+ char/2
                                                     (recur (!n/+ 3 end) char/0)
                                                     []
                                                     <failure>))]
                                   ## else
                                   <failure>)))
                          <frac-output>)]

                       <frac-output>))))

  (template: (parse-signed source-code//size start where offset source-code)
    ## (-> Nat Offset (Parser Code))
    (loop [end offset]
      (<| (!with-char+ source-code//size source-code end char <int-output>)
          (!if-digit?+ char
                       (recur (!inc end))

                       [[<frac-separator>]
                        (parse-frac source-code//size start where (!inc end) source-code)]

                       <int-output>))))
  )

(template [<parser> <codec> <tag>]
  [(template: (<parser> source-code//size start where offset source-code)
     ## (-> Nat Nat Location Nat Text (Either [Source Text] [Source Code]))
     (loop [g!end offset]
       (<| (!with-char+ source-code//size source-code g!end g!char (!number-output source-code start g!end <codec> <tag>))
           (!if-digit?+ g!char
                        (recur (!inc g!end))
                        []
                        (!number-output source-code start g!end <codec> <tag>)))))]

  [parse-nat n.decimal #.Nat]
  [parse-rev rev.decimal #.Rev]
  )

(template: (!parse-signed source-code//size offset where source-code @aliases @end)
  (<| (let [g!offset/1 (!inc offset)])
      (!with-char+ source-code//size source-code g!offset/1 g!char/1 @end)
      (!if-digit? g!char/1
                  (parse-signed source-code//size offset where (!inc/2 offset) source-code)
                  (!parse-full-name offset [where (!inc offset) source-code] where @aliases #.Identifier))))

(with-expansions [<output> (#.Right [[(update@ #.column (|>> (!n/+ (!n/- start end))) where)
                                      end
                                      source-code]
                                     (!clip start end source-code)])]
  (template: (parse-name-part start where offset source-code)
    ## (-> Offset (Parser Text))
    (let [source-code//size ("lux text size" source-code)]
      (loop [end offset]
        (<| (!with-char+ source-code//size source-code end char <output>)
            (!if-name-char?|tail char
                                 (recur (!inc end))
                                 <output>))))))

(template: (!parse-half-name @offset @char @module)
  (!if-name-char?|head @char
                       (!letE [source' name] (..parse-name-part @offset where (!inc @offset) source-code)
                              (#.Right [source' [@module name]]))
                       (!failure ..!parse-half-name where @offset source-code)))

(`` (def: (parse-short-name source-code//size current-module [where offset/0 source-code])
      (-> Nat Text (Parser Name))
      (<| (!with-char+ source-code//size source-code offset/0 char/0
                       (!end-of-file where offset/0 source-code current-module))
          (if (!n/= (char (~~ (static ..name-separator))) char/0)
            (<| (let [offset/1 (!inc offset/0)])
                (!with-char+ source-code//size source-code offset/1 char/1
                             (!end-of-file where offset/1 source-code current-module))
                (!parse-half-name offset/1 char/1 current-module))
            (!parse-half-name offset/0 char/0 (static ..prelude))))))

(template: (!parse-short-name source-code//size @current-module @source @where @tag)
  (!letE [source' name] (..parse-short-name source-code//size @current-module @source)
         (#.Right [source' [@where (@tag name)]])))

(with-expansions [<simple> (as-is (#.Right [source' ["" simple]]))]
  (`` (def: (parse-full-name aliases start source)
        (-> Aliases Offset (Parser Name))
        (<| (!letE [source' simple] (let [[where offset source-code] source]
                                      (..parse-name-part start where offset source-code)))
            (let [[where' offset' source-code'] source'])
            (!with-char source-code' offset' char/separator <simple>)
            (if (!n/= (char (~~ (static ..name-separator))) char/separator)
              (<| (let [offset'' (!inc offset')])
                  (!letE [source'' complex] (..parse-name-part offset'' (!forward 1 where') offset'' source-code'))
                  (if ("lux text =" "" complex)
                    (let [[where offset source-code] source]
                      (!failure ..parse-full-name where offset source-code))
                    (#.Right [source'' [(|> aliases
                                            (dictionary.get simple)
                                            (maybe.default simple))
                                        complex]])))
              <simple>)))))

(template: (!parse-full-name @offset @source @where @aliases @tag)
  (!letE [source' full-name] (..parse-full-name @aliases @offset @source)
         (#.Right [source' [@where (@tag full-name)]])))

## TODO: Grammar macro for specifying syntax.
## (grammar: lux-grammar
##   [expression ...]
##   [form "(" [#* expression] ")"])

(with-expansions [<consume-1> (as-is where (!inc offset/0) source-code)
                  <move-1> (as-is [(!forward 1 where) (!inc offset/0) source-code])
                  <move-2> (as-is [(!forward 1 where) (!inc/2 offset/0) source-code])
                  <recur> (as-is (parse current-module aliases source-code//size))
                  <horizontal-move> (as-is (recur (!horizontal where offset/0 source-code)))]

  (template: (!close closer)
    (#.Left [<move-1> closer]))
  
  (def: #export (parse current-module aliases source-code//size)
    (-> Text Aliases Nat (Parser Code))
    ## The "exec []" is only there to avoid function fusion.
    ## This is to preserve the loop as much as possible and keep it tight.
    (exec []
      (function (recur [where offset/0 source-code])
        (<| (!with-char+ source-code//size source-code offset/0 char/0
                         (!end-of-file where offset/0 source-code current-module))
            (with-expansions [<composites> (template [<open> <close> <parser>]
                                             [[(~~ (static <open>))]
                                              (<parser> <recur> <consume-1>)

                                              [(~~ (static <close>))]
                                              (!close <close>)]

                                             [..open-form ..close-form parse-form]
                                             [..open-tuple ..close-tuple parse-tuple]
                                             [..open-record ..close-record parse-record]
                                             )]
              (`` ("lux syntax char case!" char/0
                   [[(~~ (static text.space))
                     (~~ (static text.carriage-return))]
                    <horizontal-move>
                    
                    ## New line
                    [(~~ (static text.new-line))]
                    (recur (!vertical where offset/0 source-code))

                    <composites>

                    ## Text
                    [(~~ (static ..text-delimiter))]
                    (parse-text where (!inc offset/0) source-code)

                    ## Special code
                    [(~~ (static ..sigil))]
                    (<| (let [offset/1 (!inc offset/0)])
                        (!with-char+ source-code//size source-code offset/1 char/1
                                     (!end-of-file where offset/1 source-code current-module))
                        ("lux syntax char case!" char/1
                         [[(~~ (static ..name-separator))]
                          (!parse-short-name source-code//size current-module <move-2> where #.Tag)

                          ## Single-line comment
                          [(~~ (static ..sigil))]
                          (case ("lux text index" (!inc offset/1) (static text.new-line) source-code)
                            (#.Some end)
                            (recur (!vertical where end source-code))
                            
                            _
                            (!end-of-file where offset/1 source-code current-module))

                          (~~ (template [<char> <bit>]
                                [[<char>]
                                 (#.Right [[(update@ #.column (|>> !inc/2) where)
                                            (!inc offset/1)
                                            source-code]
                                           [where (#.Bit <bit>)]])]

                                ["0" #0]
                                ["1" #1]))]

                         ## else
                         (!if-name-char?|head char/1
                                              ## Tag
                                              (!parse-full-name offset/1 <move-2> where aliases #.Tag)
                                              (!failure ..parse where offset/0 source-code))))

                    ## Coincidentally (= ..name-separator ..frac-separator)
                    [(~~ (static ..name-separator))
                     ## (~~ (static ..frac-separator))
                     ]
                    (<| (let [offset/1 (!inc offset/0)])
                        (!with-char+ source-code//size source-code offset/1 char/1
                                     (!end-of-file where offset/1 source-code current-module))
                        (!if-digit? char/1
                                    (parse-rev source-code//size offset/0 where (!inc offset/1) source-code)
                                    (!parse-short-name source-code//size current-module [where offset/1 source-code] where #.Identifier)))

                    [(~~ (static ..positive-sign))
                     (~~ (static ..negative-sign))]
                    (!parse-signed source-code//size offset/0 where source-code aliases
                                   (!end-of-file where offset/0 source-code current-module))]

                   ## else
                   (!if-digit? char/0
                               ## Natural number
                               (parse-nat source-code//size offset/0 where (!inc offset/0) source-code)
                               ## Identifier
                               (!parse-full-name offset/0 [<consume-1>] where aliases #.Identifier))
                   )))
            )))
    ))
