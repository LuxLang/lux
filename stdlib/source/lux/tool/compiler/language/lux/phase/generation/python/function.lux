(.module:
  [lux (#- function)
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." product]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor fold)]]]
   [target
    ["_" python (#+ SVar Expression Statement)]]]
  ["." // #_
   [runtime (#+ Operation Phase Generator)]
   ["#." reference]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["//#" /// #_
     [analysis (#+ Variant Tuple Environment Abstraction Application Analysis)]
     [synthesis (#+ Synthesis)]
     ["#." generation (#+ Context)]
     ["//#" /// #_
      [arity (#+ Arity)]
      ["#." phase]
      [reference
       [variable (#+ Register Variable)]]]]]])

(def: #export (apply generate archive [functionS argsS+])
  (Generator (Application Synthesis))
  (do {! ///////phase.monad}
    [functionO (generate archive functionS)
     argsO+ (monad.map ! (generate archive) argsS+)]
    (wrap (_.apply/* functionO argsO+))))

(def: #export capture
  (-> Register SVar)
  (|>> (///reference.foreign //reference.system) :assume))

(def: (with_closure function_name inits function_definition)
  (-> Text (List (Expression Any)) (Statement Any) (Operation (Expression Any)))
  (case inits
    #.Nil
    (do ///////phase.monad
      [_ (/////generation.execute! function_definition)
       _ (/////generation.save! function_name function_definition)]
      (wrap (_.apply/* (_.var function_name) inits)))

    _
    (do {! ///////phase.monad}
      [@closure (\ ! map _.var (/////generation.gensym "closure"))
       #let [directive (_.def @closure
                              (|> (list.enumeration inits)
                                  (list\map (|>> product.left ..capture)))
                              ($_ _.then
                                  function_definition
                                  (_.return (_.var function_name))))]
       _ (/////generation.execute! function_definition)
       _ (/////generation.save! (_.code @closure) directive)]
      (wrap (_.apply/* @closure inits)))))

(def: input
  (|>> inc //case.register))

(def: (@scope function_name)
  (-> Context Text)
  (format (///reference.artifact function_name) "_scope"))

(def: #export (function generate archive [environment arity bodyS])
  (Generator (Abstraction Synthesis))
  (do {! ///////phase.monad}
    [[function_name bodyO] (/////generation.with_new_context archive
                             (do !
                               [function_name (\ ! map ..@scope
                                                 (/////generation.context archive))]
                               (/////generation.with_anchor (_.var function_name)
                                 (generate archive bodyS))))
     environment (monad.map ! (generate archive) environment)
     #let [function_name (///reference.artifact function_name)
           @curried (_.var "curried")
           arityO (|> arity .int _.int)
           @num_args (_.var "num_args")
           @self (_.var function_name)
           apply_poly (.function (_ args func)
                        (_.apply_poly (list) args func))
           initialize_self! (_.set (list (//case.register 0)) @self)
           initialize! (list\fold (.function (_ post pre!)
                                    ($_ _.then
                                        pre!
                                        (_.set (list (..input post)) (_.nth (|> post .int _.int) @curried))))
                                  initialize_self!
                                  (list.indices arity))]]
    (with_closure function_name environment
      (_.def @self (list (_.poly @curried))
             ($_ _.then
                 (_.set (list @num_args) (_.len/1 @curried))
                 (_.cond (list [(|> @num_args (_.= arityO))
                                ($_ _.then
                                    initialize!
                                    (_.return bodyO))]
                               [(|> @num_args (_.> arityO))
                                (let [arity_inputs (_.slice (_.int +0) arityO @curried)
                                      extra_inputs (_.slice arityO @num_args @curried)]
                                  (_.return (|> @self
                                                (apply_poly arity_inputs)
                                                (apply_poly extra_inputs))))])
                         ## (|> @num_args (_.< arityO))
                         (let [@next (_.var "next")
                               @missing (_.var "missing")]
                           ($_ _.then
                               (_.def @next (list (_.poly @missing))
                                      (_.return (|> @self (apply_poly (|> @curried (_.+ @missing))))))
                               (_.return @next)
                               )))
                 )))
    ))
