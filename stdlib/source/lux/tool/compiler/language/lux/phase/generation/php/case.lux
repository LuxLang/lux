(.module:
  [lux (#- case let if)
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." product]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor fold)]
     ["." set]]]
   [math
    [number
     ["i" int]]]
   [target
    ["_" php (#+ Expression Var Statement)]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Phase! Generator Generator!)]
   ["#." reference]
   ["#." primitive]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     ["#." synthesis #_
      ["#/." case]]
     ["/#" // #_
      ["#." synthesis (#+ Member Synthesis Path)]
      ["#." generation]
      ["//#" /// #_
       [reference
        ["#." variable (#+ Register)]]
       ["#." phase ("#\." monad)]
       [meta
        [archive (#+ Archive)]]]]]]])

(def: #export register
  (-> Register Var)
  (|>> (///reference.local //reference.system) :assume))

(def: #export capture
  (-> Register Var)
  (|>> (///reference.foreign //reference.system) :assume))

(def: #export (let generate archive [valueS register bodyS])
  (Generator [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueG (generate archive valueS)
     bodyG (generate archive bodyS)]
    (wrap (|> bodyG
              (list (_.set (..register register) valueG))
              _.array/*
              (_.nth (_.int +1))))))

(def: #export (get generate archive [pathP valueS])
  (Generator [(List Member) Synthesis])
  (do ///////phase.monad
    [valueG (generate archive valueS)]
    (wrap (list\fold (function (_ side source)
                       (.let [method (.case side
                                       (^template [<side> <accessor>]
                                         [(<side> lefts)
                                          (<accessor> (_.int (.int lefts)))])
                                       ([#.Left //runtime.tuple//left]
                                        [#.Right //runtime.tuple//right]))]
                         (method source)))
                     valueG
                     pathP))))

(def: #export (if generate archive [testS thenS elseS])
  (Generator [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [testG (generate archive testS)
     thenG (generate archive thenS)
     elseG (generate archive elseS)]
    (wrap (_.? testG thenG elseG))))

(def: @savepoint (_.var "lux_pm_savepoint"))
(def: @cursor (_.var "lux_pm_cursor"))
(def: @temp (_.var "lux_pm_temp"))

(def: (push! value)
  (-> Expression Statement)
  (_.; (_.array_push/2 [@cursor value])))

(def: peek_and_pop
  Expression
  (_.array_pop/1 @cursor))

(def: pop!
  Statement
  (_.; ..peek_and_pop))

(def: peek
  Expression
  (_.nth (|> @cursor _.count/1 (_.- (_.int +1)))
         @cursor))

(def: save!
  Statement
  (.let [cursor (_.array_slice/2 [@cursor (_.int +0)])]
    (_.; (_.array_push/2 [@savepoint cursor]))))

(def: restore!
  Statement
  (_.; (_.set @cursor (_.array_pop/1 @savepoint))))

(def: fail! _.break)

(def: (multi_pop! pops)
  (-> Nat Statement)
  (_.; (_.array_splice/3 [@cursor
                          (_.int +0)
                          (_.int (i.* -1 (.int pops)))])))

(template [<name> <flag> <prep>]
  [(def: (<name> simple? idx)
     (-> Bit Nat Statement)
     ($_ _.then
         (_.; (_.set @temp (|> idx <prep> .int _.int (//runtime.sum//get ..peek <flag>))))
         (.if simple?
           (_.when (_.is_null/1 @temp)
                   fail!)
           (_.if (_.is_null/1 @temp)
             fail!
             (..push! @temp)))))]

  [left_choice  _.null        (<|)]
  [right_choice (_.string "") inc]
  )

(def: (alternation pre! post!)
  (-> Statement Statement Statement)
  ($_ _.then
      (_.do_while (_.bool false)
                  ($_ _.then
                      ..save!
                      pre!))
      ($_ _.then
          ..restore!
          post!)))

(def: (pattern_matching' generate archive)
  (-> Phase Archive Path (Operation Statement))
  (function (recur pathP)
    (.case pathP
      (#/////synthesis.Then bodyS)
      (\ ///////phase.monad map _.return (generate archive bodyS))

      #/////synthesis.Pop
      (///////phase\wrap ..pop!)

      (#/////synthesis.Bind register)
      (///////phase\wrap (_.; (_.set (..register register) ..peek)))

      (#/////synthesis.Bit_Fork when thenP elseP)
      (do {! ///////phase.monad}
        [then! (recur thenP)
         else! (.case elseP
                 (#.Some elseP)
                 (recur elseP)

                 #.None
                 (wrap ..fail!))]
        (wrap (.if when
                (_.if ..peek
                  then!
                  else!)
                (_.if ..peek
                  else!
                  then!))))

      (^template [<tag> <format>]
        [(<tag> cons)
         (do {! ///////phase.monad}
           [clauses (monad.map ! (function (_ [match then])
                                   (do !
                                     [then! (recur then)]
                                     (wrap [(_.= (|> match <format>)
                                                 ..peek)
                                            then!])))
                               (#.Cons cons))]
           (wrap (_.cond clauses ..fail!)))])
      ([#/////synthesis.I64_Fork //primitive.i64]
       [#/////synthesis.F64_Fork //primitive.f64]
       [#/////synthesis.Text_Fork //primitive.text])

      (^template [<complex> <simple> <choice>]
        [(^ (<complex> idx))
         (///////phase\wrap (<choice> false idx))

         (^ (<simple> idx nextP))
         (|> nextP
             recur
             (\ ///////phase.monad map (_.then (<choice> true idx))))])
      ([/////synthesis.side/left  /////synthesis.simple_left_side  ..left_choice]
       [/////synthesis.side/right /////synthesis.simple_right_side ..right_choice])

      (^ (/////synthesis.member/left 0))
      (///////phase\wrap (|> ..peek (_.nth (_.int +0)) ..push!))
      
      (^template [<pm> <getter>]
        [(^ (<pm> lefts))
         (///////phase\wrap (|> ..peek (<getter> (_.int (.int lefts))) ..push!))])
      ([/////synthesis.member/left  //runtime.tuple//left]
       [/////synthesis.member/right //runtime.tuple//right])

      (^ (/////synthesis.!bind_top register thenP))
      (do ///////phase.monad
        [then! (recur thenP)]
        (///////phase\wrap ($_ _.then
                               (_.; (_.set (..register register) ..peek_and_pop))
                               then!)))

      ## (^ (/////synthesis.!multi_pop nextP))
      ## (.let [[extra_pops nextP'] (////synthesis/case.count_pops nextP)]
      ##   (do ///////phase.monad
      ##     [next! (recur nextP')]
      ##     (///////phase\wrap ($_ _.then
      ##                    (..multi_pop! (n.+ 2 extra_pops))
      ##                    next!))))

      (^template [<tag> <combinator>]
        [(^ (<tag> preP postP))
         (do ///////phase.monad
           [pre! (recur preP)
            post! (recur postP)]
           (wrap (<combinator> pre! post!)))])
      ([/////synthesis.path/seq _.then]
       [/////synthesis.path/alt ..alternation]))))

(def: (pattern_matching generate archive pathP)
  (-> Phase Archive Path (Operation Statement))
  (do ///////phase.monad
    [pattern_matching! (pattern_matching' generate archive pathP)]
    (wrap ($_ _.then
              (_.do_while (_.bool false)
                          pattern_matching!)
              (_.throw (_.new (_.constant "Exception") (list (_.string ////synthesis/case.pattern_matching_error))))))))

(def: (gensym prefix)
  (-> Text (Operation Text))
  (\ ///////phase.monad map (|>> %.nat (format prefix)) /////generation.next))

(def: #export (case generate archive [valueS pathP])
  (Generator [Synthesis Path])
  (do {! ///////phase.monad}
    [initG (generate archive valueS)
     pattern_matching! (pattern_matching generate archive pathP)
     @case (..gensym "case")
     #let [@caseG (_.global @case)
           @caseL (_.var @case)]
     @init (\ ! map _.var (..gensym "init"))
     #let [@dependencies+ (|> (////synthesis/case.storage pathP)
                              (get@ #////synthesis/case.dependencies)
                              set.to_list
                              (list\map (function (_ variable)
                                          [false (.case variable
                                                   (#///////variable.Local register)
                                                   (..register register)
                                                   
                                                   (#///////variable.Foreign register)
                                                   (..capture register))])))]
     #let [directive ($_ _.then
                         (<| _.;
                             (_.set @caseL)
                             (_.closure (list (_.reference @caseL)) (list& [#0 @init]
                                                                           @dependencies+))
                             ($_ _.then
                                 (_.; (_.set @cursor (_.array/* (list @init))))
                                 (_.; (_.set @savepoint (_.array/* (list))))
                                 pattern_matching!))
                         (_.; (_.set @caseG @caseL)))]
     _ (/////generation.execute! directive)
     _ (/////generation.save! @case directive)]
    (wrap (_.apply/* (list& initG (list\map product.right @dependencies+))
                     @caseG))))
