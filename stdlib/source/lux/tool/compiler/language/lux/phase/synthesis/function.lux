(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]
    ["." enum]]
   [control
    [pipe (#+ case>)]
    ["." exception (#+ exception:)]]
   [data
    ["." maybe ("#@." functor)]
    ["." text
     ["%" format (#+ format)]]
    [number
     ["n" nat]]
    [collection
     ["." list ("#@." functor monoid fold)]]]]
  ["." // #_
   ["#." loop (#+ Transform)]
   ["//#" /// #_
    ["#." analysis (#+ Environment Analysis)]
    ["/" synthesis (#+ Path Abstraction Synthesis Operation Phase)]
    [///
     [arity (#+ Arity)]
     ["#." reference
      ["#/." variable (#+ Register Variable)]]
     ["." phase ("#@." monad)]]]])

(exception: #export (cannot-find-foreign-variable-in-environment {foreign Register} {environment (Environment Synthesis)})
  (exception.report
   ["Foreign" (%.nat foreign)]
   ["Environment" (exception.enumerate /.%synthesis environment)]))

(def: arity-arguments
  (-> Arity (List Synthesis))
  (|>> dec
       (enum.range n.enum 1)
       (list@map (|>> /.variable/local))))

(template: #export (self-reference)
  (/.variable/local 0))

(def: (expanded-nested-self-reference arity)
  (-> Arity Synthesis)
  (/.function/apply [(..self-reference) (arity-arguments arity)]))

(def: #export (apply phase)
  (-> Phase Phase)
  (function (_ archive exprA)
    (let [[funcA argsA] (////analysis.application exprA)]
      (do {! phase.monad}
        [funcS (phase archive funcA)
         argsS (monad.map ! (phase archive) argsA)]
        (with-expansions [<apply> (as-is (/.function/apply [funcS argsS]))]
          (case funcS
            (^ (/.function/abstraction functionS))
            (if (n.= (get@ #/.arity functionS)
                     (list.size argsS))
              (do !
                [locals /.locals]
                (wrap (|> functionS
                          (//loop.optimization true locals argsS)
                          (maybe@map (: (-> [Nat (List Synthesis) Synthesis] Synthesis)
                                        (function (_ [start inits iteration])
                                          (case iteration
                                            (^ (/.loop/scope [start' inits' output]))
                                            (if (and (n.= start start')
                                                     (list.empty? inits'))
                                              (/.loop/scope [start inits output])
                                              (/.loop/scope [start inits iteration]))

                                            _
                                            (/.loop/scope [start inits iteration])))))
                          (maybe.default <apply>))))
              (wrap <apply>))

            (^ (/.function/apply [funcS' argsS']))
            (wrap (/.function/apply [funcS' (list@compose argsS' argsS)]))

            _
            (wrap <apply>)))))))

(def: (find-foreign environment register)
  (-> (Environment Synthesis) Register (Operation Synthesis))
  (case (list.nth register environment)
    (#.Some aliased)
    (phase@wrap aliased)

    #.None
    (phase.throw ..cannot-find-foreign-variable-in-environment [register environment])))

(def: (grow-path grow path)
  (-> (-> Synthesis (Operation Synthesis)) Path (Operation Path))
  (case path
    (#/.Bind register)
    (phase@wrap (#/.Bind (inc register)))

    (^template [<tag>]
      [(<tag> left right)
       (do phase.monad
         [left' (grow-path grow left)
          right' (grow-path grow right)]
         (wrap (<tag> left' right')))])
    ([#/.Alt] [#/.Seq])

    (#/.Bit-Fork when then else)
    (do {! phase.monad}
      [then (grow-path grow then)
       else (case else
              (#.Some else)
              (:: ! map (|>> #.Some) (grow-path grow else))

              #.None
              (wrap #.None))]
      (wrap (#/.Bit-Fork when then else)))
    
    (^template [<tag>]
      [(<tag> [[test then] elses])
       (do {! phase.monad}
         [then (grow-path grow then)
          elses (monad.map ! (function (_ [else-test else-then])
                               (do !
                                 [else-then (grow-path grow else-then)]
                                 (wrap [else-test else-then])))
                           elses)]
         (wrap (<tag> [[test then] elses])))])
    ([#/.I64-Fork]
     [#/.F64-Fork]
     [#/.Text-Fork])
    
    (#/.Then thenS)
    (|> thenS
        grow
        (phase@map (|>> #/.Then)))

    _
    (phase@wrap path)))

(def: (grow environment expression)
  (-> (Environment Synthesis) Synthesis (Operation Synthesis))
  (case expression
    (#/.Structure structure)
    (case structure
      (#////analysis.Variant [lefts right? subS])
      (|> subS
          (grow environment)
          (phase@map (|>> [lefts right?] /.variant)))
      
      (#////analysis.Tuple membersS+)
      (|> membersS+
          (monad.map phase.monad (grow environment))
          (phase@map (|>> /.tuple))))

    (^ (..self-reference))
    (phase@wrap (/.function/apply [expression (list (/.variable/local 1))]))
    
    (#/.Reference reference)
    (case reference
      (#////reference.Variable variable)
      (case variable
        (#////reference/variable.Local register)
        (phase@wrap (/.variable/local (inc register)))
        
        (#////reference/variable.Foreign register)
        (..find-foreign environment register))
      
      (#////reference.Constant constant)
      (phase@wrap expression))
    
    (#/.Control control)
    (case control
      (#/.Branch branch)
      (case branch
        (#/.Let [inputS register bodyS])
        (do phase.monad
          [inputS' (grow environment inputS)
           bodyS' (grow environment bodyS)]
          (wrap (/.branch/let [inputS' (inc register) bodyS'])))
        
        (#/.If [testS thenS elseS])
        (do phase.monad
          [testS' (grow environment testS)
           thenS' (grow environment thenS)
           elseS' (grow environment elseS)]
          (wrap (/.branch/if [testS' thenS' elseS'])))

        (#/.Get members inputS)
        (do phase.monad
          [inputS' (grow environment inputS)]
          (wrap (/.branch/get [members inputS'])))
        
        (#/.Case [inputS pathS])
        (do phase.monad
          [inputS' (grow environment inputS)
           pathS' (grow-path (grow environment) pathS)]
          (wrap (/.branch/case [inputS' pathS']))))
      
      (#/.Loop loop)
      (case loop
        (#/.Scope [start initsS+ iterationS])
        (do {! phase.monad}
          [initsS+' (monad.map ! (grow environment) initsS+)
           iterationS' (grow environment iterationS)]
          (wrap (/.loop/scope [(inc start) initsS+' iterationS'])))
        
        (#/.Recur argumentsS+)
        (|> argumentsS+
            (monad.map phase.monad (grow environment))
            (phase@map (|>> /.loop/recur))))
      
      (#/.Function function)
      (case function
        (#/.Abstraction [_env _arity _body])
        (do {! phase.monad}
          [_env' (monad.map !
                            (|>> (case> (#/.Reference (#////reference.Variable (#////reference/variable.Foreign register)))
                                        (..find-foreign environment register)

                                        captured
                                        (grow environment captured)))
                            _env)]
          (wrap (/.function/abstraction [_env' _arity _body])))
        
        (#/.Apply funcS argsS+)
        (do {! phase.monad}
          [funcS (grow environment funcS)
           argsS+ (monad.map ! (grow environment) argsS+)]
          (wrap (/.function/apply (case funcS
                                    (^ (/.function/apply [(..self-reference) pre-argsS+]))
                                    [(..self-reference)
                                     (list@compose pre-argsS+ argsS+)]

                                    _
                                    [funcS
                                     argsS+]))))))
    
    (#/.Extension name argumentsS+)
    (|> argumentsS+
        (monad.map phase.monad (grow environment))
        (phase@map (|>> (#/.Extension name))))

    (#/.Primitive _)
    (phase@wrap expression)))

(def: #export (abstraction phase environment archive bodyA)
  (-> Phase (Environment Analysis) Phase)
  (do {! phase.monad}
    [currying? /.currying?
     environment (monad.map ! (phase archive) environment)
     bodyS (/.with-currying? true
             (/.with-locals 2
               (phase archive bodyA)))
     abstraction (: (Operation Abstraction)
                    (case bodyS
                      (^ (/.function/abstraction [env' down-arity' bodyS']))
                      (|> bodyS'
                          (grow env')
                          (:: ! map (function (_ body)
                                      {#/.environment environment
                                       #/.arity (inc down-arity')
                                       #/.body body})))
                      
                      _
                      (wrap {#/.environment environment
                             #/.arity 1
                             #/.body bodyS})))]
    (wrap (if currying?
            (/.function/abstraction abstraction)
            (case (//loop.optimization false 1 (list) abstraction)
              (#.Some [startL initsL bodyL])
              (/.function/abstraction {#/.environment environment
                                       #/.arity (get@ #/.arity abstraction)
                                       #/.body (/.loop/scope [startL initsL bodyL])})
              
              #.None
              (/.function/abstraction abstraction))))))
