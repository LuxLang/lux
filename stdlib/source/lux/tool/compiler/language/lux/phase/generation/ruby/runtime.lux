(.module:
  [lux (#- inc)
   ["." meta]
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." function]
    ["<>" parser
     ["<.>" code]]]
   [data
    ["." product]
    ["." text ("#\." hash)
     ["%" format (#+ format)]
     ["." encoding]]
    [collection
     ["." list ("#\." functor)]
     ["." row]]]
   ["." macro
    [syntax (#+ syntax:)]
    ["." code]]
   [math
    [number (#+ hex)
     ["." i64]]]
   ["@" target
    ["_" ruby (#+ Expression LVar Computation Literal Statement)]]]
  ["." /// #_
   ["#." reference]
   ["//#" /// #_
    ["$" version]
    ["#." synthesis (#+ Synthesis)]
    ["#." generation]
    ["//#" ///
     ["#." phase]
     [reference
      [variable (#+ Register)]]
     [meta
      [archive (#+ Output Archive)
       ["." artifact (#+ Registry)]]]]]])

(template [<name> <base>]
  [(type: #export <name>
     (<base> LVar Expression Statement))]

  [Operation /////generation.Operation]
  [Phase /////generation.Phase]
  [Handler /////generation.Handler]
  [Bundle /////generation.Bundle]
  )

(type: #export (Generator i)
  (-> Phase Archive i (Operation Expression)))

(type: #export Phase!
  (-> Phase Archive Synthesis (Operation (Statement Any))))

(type: #export (Generator! i)
  (-> Phase! Phase Archive i (Operation (Statement Any))))

(def: prefix Text "LuxRuntime")

(def: #export unit
  (_.string /////synthesis.unit))

(def: (flag value)
  (-> Bit Literal)
  (if value
    ..unit
    _.nil))

(def: (feature name definition)
  (-> LVar (-> LVar Statement) Statement)
  (definition name))

(syntax: #export (with_vars {vars (<code>.tuple (<>.some <code>.local_identifier))}
                   body)
  (do {! meta.monad}
    [ids (monad.seq ! (list.repeat (list.size vars) meta.count))]
    (wrap (list (` (let [(~+ (|> vars
                                 (list.zip/2 ids)
                                 (list\map (function (_ [id var])
                                             (list (code.local_identifier var)
                                                   (` (_.local (~ (code.text (format "v" (%.nat id)))))))))
                                 list.concat))]
                     (~ body)))))))

(def: module_id
  0)

(syntax: (runtime: {declaration (<>.or <code>.local_identifier
                                       (<code>.form (<>.and <code>.local_identifier
                                                            (<>.some <code>.local_identifier))))}
           code)
  (do meta.monad
    [runtime_id meta.count]
    (macro.with_gensyms [g!_]
      (let [runtime (code.local_identifier (///reference.artifact [..module_id runtime_id]))
            runtime_name (` (_.local (~ (code.text (%.code runtime)))))]
        (case declaration
          (#.Left name)
          (macro.with_gensyms [g!_]
            (let [g!name (code.local_identifier name)]
              (wrap (list (` (def: #export (~ g!name) LVar (~ runtime_name)))
                          (` (def: (~ (code.local_identifier (format "@" name)))
                               Statement
                               (..feature (~ runtime_name)
                                          (function ((~ g!_) (~ g!name))
                                            (_.set (list (~ g!name)) (~ code))))))))))
          
          (#.Right [name inputs])
          (macro.with_gensyms [g!_]
            (let [g!name (code.local_identifier name)
                  inputsC (list\map code.local_identifier inputs)
                  inputs_typesC (list\map (function.constant (` _.Expression))
                                          inputs)]
              (wrap (list (` (def: #export ((~ g!name) (~+ inputsC))
                               (-> (~+ inputs_typesC) Computation)
                               (_.apply/* (list (~+ inputsC)) (~ runtime_name))))
                          
                          (` (def: (~ (code.local_identifier (format "@" name)))
                               Statement
                               (..feature (~ runtime_name)
                                          (function ((~ g!_) (~ g!_))
                                            (..with_vars [(~+ inputsC)]
                                              (_.function (~ g!_) (list (~+ inputsC))
                                                (~ code))))))))))))))))

(def: tuple_size
  (_.the "length"))

(def: last_index
  (|>> ..tuple_size (_.- (_.int +1))))

(with_expansions [<recur> (as_is ($_ _.then
                                     (_.set (list lefts) (_.- last_index_right lefts))
                                     (_.set (list tuple) (_.nth last_index_right tuple))))]
  (runtime: (tuple//left lefts tuple)
    (with_vars [last_index_right]
      (<| (_.while (_.bool true))
          ($_ _.then
              (_.set (list last_index_right) (..last_index tuple))
              (_.if (_.> lefts last_index_right)
                ## No need for recursion
                (_.return (_.nth lefts tuple))
                ## Needs recursion
                <recur>)))))

  (runtime: (tuple//right lefts tuple)
    (with_vars [last_index_right right_index]
      (<| (_.while (_.bool true))
          ($_ _.then
              (_.set (list last_index_right) (..last_index tuple))
              (_.set (list right_index) (_.+ (_.int +1) lefts))
              (_.cond (list [(_.= last_index_right right_index)
                             (_.return (_.nth right_index tuple))]
                            [(_.> last_index_right right_index)
                             ## Needs recursion.
                             <recur>])
                      (_.return (_.array_range right_index (..tuple_size tuple) tuple)))
              )))))

(def: #export variant_tag_field "_lux_tag")
(def: #export variant_flag_field "_lux_flag")
(def: #export variant_value_field "_lux_value")

(runtime: (sum//make tag last? value)
  (_.return (_.hash (list [(_.string ..variant_tag_field) tag]
                          [(_.string ..variant_flag_field) last?]
                          [(_.string ..variant_value_field) value]))))

(def: #export (variant tag last? value)
  (-> Nat Bit Expression Computation)
  (sum//make (_.int (.int tag)) (..flag last?) value))

(def: #export none
  Computation
  (..variant 0 #0 ..unit))

(def: #export some
  (-> Expression Computation)
  (..variant 1 #1))

(def: #export left
  (-> Expression Computation)
  (..variant 0 #0))

(def: #export right
  (-> Expression Computation)
  (..variant 1 #1))

(runtime: (sum//get sum wantsLast wantedTag)
  (let [no_match! (_.return _.nil)
        sum_tag (_.nth (_.string ..variant_tag_field) sum)
        sum_flag (_.nth (_.string ..variant_flag_field) sum)
        sum_value (_.nth (_.string ..variant_value_field) sum)
        is_last? (_.= ..unit sum_flag)
        test_recursion! (_.if is_last?
                          ## Must recurse.
                          ($_ _.then
                              (_.set (list sum) sum_value)
                              (_.set (list wantedTag) (_.- sum_tag wantedTag)))
                          no_match!)]
    (<| (_.while (_.bool true))
        (_.cond (list [(_.= sum_tag wantedTag)
                       (_.if (_.= wantsLast sum_flag)
                         (_.return sum_value)
                         test_recursion!)]

                      [(_.< wantedTag sum_tag)
                       test_recursion!]

                      [(_.= ..unit wantsLast)
                       (_.return (sum//make (_.- wantedTag sum_tag) sum_flag sum_value))])

                no_match!))))

(def: runtime//adt
  Statement
  ($_ _.then
      @tuple//left
      @tuple//right
      @sum//make
      @sum//get
      ))

(runtime: (lux//try risky)
  (with_vars [error value]
    (_.begin ($_ _.then
                 (_.set (list value) (_.apply_lambda/* (list ..unit) risky))
                 (_.return (..right value)))
             (list [(list) error
                    (_.return (..left (_.the "message" error)))]))))

(runtime: (lux//program_args raw)
  (with_vars [tail head]
    ($_ _.then
        (_.set (list tail) ..none)
        (<| (_.for_in head raw)
            (_.set (list tail) (..some (_.array (list head tail)))))
        (_.return tail))))

(def: runtime//lux
  Statement
  ($_ _.then
      @lux//try
      @lux//program_args
      ))

(runtime: (i64//logic_right_shift param subject)
  (let [mask (|> (_.int +1)
                 (_.bit_shl (_.- param (_.int +64)))
                 (_.- (_.int +1)))]
    (_.return (|> subject
                  (_.bit_shr param)
                  (_.bit_and mask)))))

(def: runtime//i64
  Statement
  ($_ _.then
      @i64//logic_right_shift
      ))

(runtime: (f64//decode inputG)
  (with_vars [@input @temp]
    ($_ _.then
        (_.set (list @input) inputG)
        (_.set (list @temp) (_.do "to_f" (list) @input))
        (_.if ($_ _.or
                  (_.not (_.= (_.float +0.0) @temp))
                  (_.= (_.string "0") @input)
                  (_.= (_.string ".0") @input)
                  (_.= (_.string "0.0") @input))
          (_.return (..some @temp))
          (_.return ..none)))))

(def: runtime//f64
  Statement
  ($_ _.then
      @f64//decode
      ))

(runtime: (text//index subject param start)
  (with_vars [idx]
    ($_ _.then
        (_.set (list idx) (|> subject (_.do "index" (list param start))))
        (_.if (_.= _.nil idx)
          (_.return ..none)
          (_.return (..some idx))))))

(def: (within? top value)
  (-> Expression Expression Computation)
  (_.and (|> value (_.>= (_.int +0)))
         (|> value (_.< top))))

(runtime: (text//clip @text @from @to)
  (_.return (|> @text (_.array_range @from @to))))

(runtime: (text//char idx text)
  (_.if (|> idx (within? (_.the "length" text)))
    (_.return (..some (|> text (_.array_range idx idx) (_.do "ord" (list)))))
    (_.return ..none)))

(def: runtime//text
  Statement
  ($_ _.then
      @text//index
      @text//clip
      @text//char
      ))

(def: runtime
  Statement
  ($_ _.then
      runtime//adt
      runtime//lux
      runtime//i64
      runtime//f64
      runtime//text
      ))

(def: #export artifact
  ..prefix)

(def: #export generate
  (Operation [Registry Output])
  (do ///////phase.monad
    [_ (/////generation.execute! ..runtime)
     _ (/////generation.save! (%.nat ..module_id) ..runtime)]
    (wrap [(|> artifact.empty
               artifact.resource
               product.right)
           (row.row [(%.nat ..module_id)
                     (|> ..runtime
                         _.code
                         (\ encoding.utf8 encode))])])))
