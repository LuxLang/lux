(.module:
  [lux (#- function)
   [abstract
    ["." monad (#+ do)]]
   [control
    pipe]
   [data
    ["." product]
    [collection
     ["." list ("#@." functor fold)]]]
   [target
    ["_" common-lisp (#+ Expression)]]]
  ["." // #_
   [runtime (#+ Operation Phase)]
   ["#." reference]
   ["#." case]
   ["#/" //
    ["#." reference]
    ["#/" //
     ["." // #_
      [reference (#+ Register Variable)]
      [arity (#+ Arity)]
      [analysis (#+ Variant Tuple Environment Abstraction Application Analysis)]
      [synthesis (#+ Synthesis)]]]]])

(def: #export (apply generate [functionS argsS+])
  (-> Phase (Application Synthesis) (Operation (Expression Any)))
  (do ////.monad
    [functionG (generate functionS)
     argsG+ (monad.map @ generate argsS+)]
    (wrap (_.funcall/+ [functionG argsG+]))))

(def: #export capture
  (///reference.foreign _.var))

(def: (with-closure function-name inits function-definition)
  (-> Text (List (Expression Any)) (Expression Any) (Operation (Expression Any)))
  (case inits
    #.Nil
    (:: ////.monad wrap function-definition)

    _
    (do ////.monad
      [@closure (:: @ map _.var (///.gensym "closure"))]
      (wrap (_.labels (list [@closure [(|> (list.enumerate inits)
                                           (list@map (|>> product.left ..capture))
                                           _.args)
                                       function-definition]])
                      (_.funcall/+ [(_.function/1 @closure) inits]))))))

(def: input
  (|>> inc //case.register))

(def: #export (function generate [environment arity bodyS])
  (-> Phase (Abstraction Synthesis) (Operation (Expression Any)))
  (do ////.monad
    [[function-name bodyG] (///.with-context
                             (do @
                               [function-name ///.context]
                               (///.with-anchor (_.var function-name)
                                 (generate bodyS))))
     closureG+ (: (Operation (List (Expression Any)))
                  (monad.map @ (:: //reference.system variable) environment))
     #let [@curried (_.var "curried")
           @missing (_.var "missing")
           arityG (|> arity .int _.int)
           @num-args (_.var "num_args")
           @self (_.var function-name)
           initialize-self! [(//case.register 0) (_.function/1 @self)]
           initialize! [(|> (list.indices arity)
                            (list@map ..input)
                            _.args)
                        @curried]]]
    (with-closure function-name closureG+
      (_.labels (list [@self [(_.args& (list) @curried)
                              (_.let (list [@num-args (_.length/1 @curried)])
                                (_.cond (list [(|> @num-args (_.= arityG))
                                               (_.let (list initialize-self!)
                                                 (_.destructuring-bind initialize!
                                                                       bodyG))]

                                              [(|> @num-args (_.> arityG))
                                               (let [arity-inputs (_.subseq/3 [@curried (_.int +0) arityG])
                                                     extra-inputs (_.subseq/3 [@curried arityG @num-args])]
                                                 (_.apply/2 [(_.apply/2 [(_.function/1 @self)
                                                                         arity-inputs])
                                                             extra-inputs]))])
                                        ## (|> @num-args (_.< arityG))
                                        (_.lambda (_.args& (list) @missing)
                                             (_.apply/2 [(_.function/1 @self)
                                                         (_.append/2 [@curried @missing])]))))]])
                (_.function/1 @self)))
    ))
