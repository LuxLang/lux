(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]
    ["." monad (#+ do)]]
   [control
    [pipe (#+ when> new> case>)]]
   [data
    ["." product]
    ["." bit ("#\." equivalence)]
    ["." text ("#\." equivalence)]
    [number
     ["." i64]
     ["n" nat]
     ["." frac ("#\." equivalence)]]
    [collection
     ["." list ("#\." functor fold monoid)]
     ["." set (#+ Set)]]]]
  ["." /// #_
   [//
    ["#." analysis (#+ Pattern Match Analysis)]
    ["/" synthesis (#+ Path Synthesis Operation Phase)]
    [///
     ["#" phase ("#\." monad)]
     ["#." reference
      ["#/." variable (#+ Register Variable)]]
     [meta
      [archive (#+ Archive)]]]]])

(def: clean_up
  (-> Path Path)
  (|>> (#/.Seq #/.Pop)))

(def: (path' pattern end? thenC)
  (-> Pattern Bit (Operation Path) (Operation Path))
  (case pattern
    (#///analysis.Simple simple)
    (case simple
      #///analysis.Unit
      thenC

      (#///analysis.Bit when)
      (///\map (function (_ then)
                 (#/.Bit_Fork when then #.None))
               thenC)

      (^template [<from> <to> <conversion>]
        [(<from> test)
         (///\map (function (_ then)
                    (<to> [(<conversion> test) then] (list)))
                  thenC)])
      ([#///analysis.Nat  #/.I64_Fork .i64]
       [#///analysis.Int  #/.I64_Fork .i64]
       [#///analysis.Rev  #/.I64_Fork .i64]
       [#///analysis.Frac #/.F64_Fork |>]
       [#///analysis.Text #/.Text_Fork |>]))

    (#///analysis.Bind register)
    (<| (\ ///.monad map (|>> (#/.Seq (#/.Bind register))))
        /.with_new_local
        thenC)

    (#///analysis.Complex (#///analysis.Variant [lefts right? value_pattern]))
    (<| (///\map (|>> (#/.Seq (#/.Access (#/.Side (if right?
                                                    (#.Right lefts)
                                                    (#.Left lefts)))))))
        (path' value_pattern end?)
        (when> [(new> (not end?) [])] [(///\map ..clean_up)])
        thenC)

    (#///analysis.Complex (#///analysis.Tuple tuple))
    (let [tuple::last (dec (list.size tuple))]
      (list\fold (function (_ [tuple::lefts tuple::member] nextC)
                   (.case tuple::member
                     (#///analysis.Simple #///analysis.Unit)
                     nextC

                     _
                     (let [right? (n.= tuple::last tuple::lefts)
                           end?' (and end? right?)]
                       (<| (///\map (|>> (#/.Seq (#/.Access (#/.Member (if right?
                                                                         (#.Right (dec tuple::lefts))
                                                                         (#.Left tuple::lefts)))))))
                           (path' tuple::member end?')
                           (when> [(new> (not end?') [])] [(///\map ..clean_up)])
                           nextC))))
                 thenC
                 (list.reverse (list.enumeration tuple))))
    ))

(def: (path archive synthesize pattern bodyA)
  (-> Archive Phase Pattern Analysis (Operation Path))
  (path' pattern true (///\map (|>> #/.Then) (synthesize archive bodyA))))

(def: (weave_branch weave equivalence [new_test new_then] [[old_test old_then] old_tail])
  (All [a] (-> (-> Path Path Path) (Equivalence a) [a Path] (/.Fork a Path)
               (/.Fork a Path)))
  (if (\ equivalence = new_test old_test)
    [[old_test (weave new_then old_then)] old_tail]
    [[old_test old_then]
     (case old_tail
       #.Nil
       (list [new_test new_then])
       
       (#.Cons old_cons)
       (#.Cons (weave_branch weave equivalence [new_test new_then] old_cons)))]))

(def: (weave_fork weave equivalence new_fork old_fork)
  (All [a] (-> (-> Path Path Path) (Equivalence a) (/.Fork a Path) (/.Fork a Path)
               (/.Fork a Path)))
  (list\fold (..weave_branch weave equivalence) old_fork (#.Cons new_fork)))

(def: (weave new old)
  (-> Path Path Path)
  (with_expansions [<default> (as_is (#/.Alt old new))]
    (case [new old]
      [_
       (#/.Alt old_left old_right)]
      (#/.Alt old_left
              (weave new old_right))

      [(#/.Seq preN postN)
       (#/.Seq preO postO)]
      (case (weave preN preO)
        (#/.Alt _)
        <default>

        woven
        (#/.Seq woven (weave postN postO)))

      [#/.Pop #/.Pop]
      old

      [(#/.Bit_Fork new_when new_then new_else)
       (#/.Bit_Fork old_when old_then old_else)]
      (if (bit\= new_when old_when)
        (#/.Bit_Fork old_when
                     (weave new_then old_then)
                     (case [new_else old_else]
                       [#.None #.None]
                       #.None

                       (^or [(#.Some woven_then) #.None]
                            [#.None (#.Some woven_then)])
                       (#.Some woven_then)

                       [(#.Some new_else) (#.Some old_else)]
                       (#.Some (weave new_else old_else))))
        (#/.Bit_Fork old_when
                     (case new_else
                       #.None
                       old_then

                       (#.Some new_else)
                       (weave new_else old_then))
                     (#.Some (case old_else
                               #.None
                               new_then

                               (#.Some old_else)
                               (weave new_then old_else)))))

      (^template [<tag> <equivalence>]
        [[(<tag> new_fork) (<tag> old_fork)]
         (<tag> (..weave_fork weave <equivalence> new_fork old_fork))])
      ([#/.I64_Fork i64.equivalence]
       [#/.F64_Fork frac.equivalence]
       [#/.Text_Fork text.equivalence])
      
      (^template [<access> <side>]
        [[(#/.Access (<access> (<side> newL)))
          (#/.Access (<access> (<side> oldL)))]
         (if (n.= newL oldL)
           old
           <default>)])
      ([#/.Side #.Left]
       [#/.Side #.Right]
       [#/.Member #.Left]
       [#/.Member #.Right])

      [(#/.Bind newR) (#/.Bind oldR)]
      (if (n.= newR oldR)
        old
        <default>)

      _
      <default>)))

(def: (get patterns @selection)
  (-> (///analysis.Tuple ///analysis.Pattern) Register (List /.Member))
  (loop [lefts 0
         patterns patterns]
    (with_expansions [<failure> (as_is (list))
                      <continue> (as_is (recur (inc lefts)
                                               tail))
                      <member> (as_is (if (list.empty? tail)
                                        (#.Right (dec lefts))
                                        (#.Left lefts)))]
      (case patterns
        #.Nil
        <failure>

        (#.Cons head tail)
        (case head
          (#///analysis.Simple #///analysis.Unit)
          <continue>
          
          (#///analysis.Bind register)
          (if (n.= @selection register)
            (list <member>)
            <continue>)

          (#///analysis.Complex (#///analysis.Tuple sub_patterns))
          (case (get sub_patterns @selection)
            #.Nil
            <continue>

            sub_members
            (list& <member> sub_members))
          
          _
          <failure>)))))

(def: #export (synthesize_case synthesize archive input [[headP headA] tailPA+])
  (-> Phase Archive Synthesis Match (Operation Synthesis))
  (do {! ///.monad}
    [headSP (path archive synthesize headP headA)
     tailSP+ (monad.map ! (product.uncurry (path archive synthesize)) tailPA+)]
    (wrap (/.branch/case [input (list\fold weave headSP tailSP+)]))))

(template: (!masking <variable> <output>)
  [[(#///analysis.Bind <variable>)
    (#///analysis.Reference (///reference.local <output>))]
   (list)])

(def: #export (synthesize_let synthesize archive input @variable body)
  (-> Phase Archive Synthesis Register Analysis (Operation Synthesis))
  (do ///.monad
    [body (/.with_new_local
            (synthesize archive body))]
    (wrap (/.branch/let [input @variable body]))))

(def: #export (synthesize_masking synthesize archive input @variable @output)
  (-> Phase Archive Synthesis Register Register (Operation Synthesis))
  (if (n.= @variable @output)
    (///\wrap input)
    (..synthesize_let synthesize archive input @variable (#///analysis.Reference (///reference.local @output)))))

(def: #export (synthesize_if synthesize archive test then else)
  (-> Phase Archive Synthesis Analysis Analysis (Operation Synthesis))
  (do ///.monad
    [then (synthesize archive then)
     else (synthesize archive else)]
    (wrap (/.branch/if [test then else]))))

(template: (!get <patterns> <output>)
  [[(///analysis.pattern/tuple <patterns>)
    (#///analysis.Reference (///reference.local <output>))]
   (.list)])

(def: #export (synthesize_get synthesize archive input patterns @member)
  (-> Phase Archive Synthesis (///analysis.Tuple ///analysis.Pattern) Register (Operation Synthesis))
  (case (..get patterns @member)
    #.Nil
    (..synthesize_case synthesize archive input (!get patterns @member))

    path
    (case input
      (^ (/.branch/get [sub_path sub_input]))
      (///\wrap (/.branch/get [(list\compose path sub_path) sub_input]))

      _
      (///\wrap (/.branch/get [path input])))))

(def: #export (synthesize synthesize^ [headB tailB+] archive inputA)
  (-> Phase Match Phase)
  (do {! ///.monad}
    [inputS (synthesize^ archive inputA)]
    (case [headB tailB+]
      (^ (!masking @variable @output))
      (..synthesize_masking synthesize^ archive inputS @variable @output)

      [[(#///analysis.Bind @variable) body]
       #.Nil]
      (..synthesize_let synthesize^ archive inputS @variable body)
      
      (^or (^ [[(///analysis.pattern/bit #1) then]
               (list [(///analysis.pattern/bit #0) else])])
           (^ [[(///analysis.pattern/bit #1) then]
               (list [(///analysis.pattern/unit) else])])

           (^ [[(///analysis.pattern/bit #0) else]
               (list [(///analysis.pattern/bit #1) then])])
           (^ [[(///analysis.pattern/bit #0) else]
               (list [(///analysis.pattern/unit) then])]))
      (..synthesize_if synthesize^ archive inputS then else)
      
      (^ (!get patterns @member))
      (..synthesize_get synthesize^ archive inputS patterns @member)
      
      match
      (..synthesize_case synthesize^ archive inputS match))))

(def: #export (count_pops path)
  (-> Path [Nat Path])
  (case path
    (^ (/.path/seq #/.Pop path'))
    (let [[pops post_pops] (count_pops path')]
      [(inc pops) post_pops])

    _
    [0 path]))

(def: #export pattern_matching_error
  "Invalid expression for pattern-matching.")

(type: #export Storage
  {#bindings (Set Variable)
   #dependencies (Set Variable)})

(def: empty
  Storage
  {#bindings (set.new ///reference/variable.hash)
   #dependencies (set.new ///reference/variable.hash)})

## TODO: Use this to declare all local variables at the beginning of
## script functions.
## That way, it should be possible to do cheap "let" expressions,
## since the variable will exist beforehand, so no closure will need
## to be created for it.
## Apply this trick to JS, Python et al.
(def: #export (storage path)
  (-> Path Storage)
  (loop for_path
    [path path
     path_storage ..empty]
    (case path
      (^ (/.path/bind register))
      (update@ #bindings (set.add (#///reference/variable.Local register))
               path_storage)

      (^or (^ (/.path/seq left right))
           (^ (/.path/alt left right)))
      (list\fold for_path path_storage (list left right))

      (^ (/.path/then bodyS))
      (loop for_synthesis
        [bodyS bodyS
         synthesis_storage path_storage]
        (case bodyS
          (^ (/.variant [lefts right? valueS]))
          (for_synthesis valueS synthesis_storage)

          (^ (/.tuple members))
          (list\fold for_synthesis synthesis_storage members)

          (#/.Reference (#///reference.Variable var))
          (if (set.member? (get@ #bindings synthesis_storage) var)
            synthesis_storage
            (update@ #dependencies (set.add var) synthesis_storage))

          (^ (/.function/apply [functionS argsS]))
          (list\fold for_synthesis synthesis_storage (#.Cons functionS argsS))

          (^ (/.function/abstraction [environment arity bodyS]))
          (list\fold for_synthesis synthesis_storage environment)

          (^ (/.branch/let [inputS register exprS]))
          (list\fold for_synthesis
                     (update@ #bindings (set.add (#///reference/variable.Local register))
                              synthesis_storage)
                     (list inputS exprS))

          (^ (/.branch/if [testS thenS elseS]))
          (list\fold for_synthesis synthesis_storage (list testS thenS elseS))

          (^ (/.branch/case [inputS pathS]))
          (|> synthesis_storage (for_synthesis inputS) (for_path pathS))

          (^ (/.loop/scope [start initsS+ iterationS]))
          (list\fold for_synthesis synthesis_storage (#.Cons iterationS initsS+))

          (^ (/.loop/recur replacementsS+))
          (list\fold for_synthesis synthesis_storage replacementsS+)

          (#/.Extension [extension argsS])
          (list\fold for_synthesis synthesis_storage argsS)

          _
          synthesis_storage))

      _
      path_storage
      )))
