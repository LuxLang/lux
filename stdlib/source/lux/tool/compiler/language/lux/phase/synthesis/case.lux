(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]
    ["." monad (#+ do)]]
   [control
    [pipe (#+ when> new> case>)]]
   [data
    ["." product]
    ["." bit ("#@." equivalence)]
    ["." text ("#@." equivalence)]
    [number
     ["n" nat]
     ["." frac ("#@." equivalence)]]
    [collection
     ["." list ("#@." functor fold monoid)]
     ["." set (#+ Set)]]]]
  ["." /// #_
   [//
    ["#." analysis (#+ Pattern Match Analysis)]
    ["/" synthesis (#+ Path Synthesis Operation Phase)]
    [///
     ["#" phase ("#@." monad)]
     ["#." reference
      ["#/." variable (#+ Register Variable)]]
     [meta
      [archive (#+ Archive)]]]]])

(def: clean-up
  (-> Path Path)
  (|>> (#/.Seq #/.Pop)))

(def: (path' pattern end? thenC)
  (-> Pattern Bit (Operation Path) (Operation Path))
  (case pattern
    (#///analysis.Simple simple)
    (case simple
      #///analysis.Unit
      thenC
      
      (^template [<from> <to>]
        (<from> value)
        (///@map (|>> (#/.Seq (#/.Test (|> value <to>))))
                 thenC))
      ([#///analysis.Bit  #/.Bit]
       [#///analysis.Nat  (<| #/.I64 .i64)]
       [#///analysis.Int  (<| #/.I64 .i64)]
       [#///analysis.Rev  (<| #/.I64 .i64)]
       [#///analysis.Frac #/.F64]
       [#///analysis.Text #/.Text]))

    (#///analysis.Bind register)
    (<| (:: ///.monad map (|>> (#/.Seq (#/.Bind register))))
        /.with-new-local
        thenC)

    (#///analysis.Complex (#///analysis.Variant [lefts right? value-pattern]))
    (<| (///@map (|>> (#/.Seq (#/.Access (#/.Side (if right?
                                                    (#.Right lefts)
                                                    (#.Left lefts)))))))
        (path' value-pattern end?)
        (when> [(new> (not end?) [])] [(///@map ..clean-up)])
        thenC)

    (#///analysis.Complex (#///analysis.Tuple tuple))
    (let [tuple::last (dec (list.size tuple))]
      (list@fold (function (_ [tuple::lefts tuple::member] nextC)
                   (let [right? (n.= tuple::last tuple::lefts)
                         end?' (and end? right?)]
                     (<| (///@map (|>> (#/.Seq (#/.Access (#/.Member (if right?
                                                                       (#.Right (dec tuple::lefts))
                                                                       (#.Left tuple::lefts)))))))
                         (path' tuple::member end?')
                         (when> [(new> (not end?') [])] [(///@map ..clean-up)])
                         nextC)))
                 thenC
                 (list.reverse (list.enumerate tuple))))
    ))

(def: (path archive synthesize pattern bodyA)
  (-> Archive Phase Pattern Analysis (Operation Path))
  (path' pattern true (///@map (|>> #/.Then) (synthesize archive bodyA))))

(def: (weave leftP rightP)
  (-> Path Path Path)
  (with-expansions [<default> (as-is (#/.Alt leftP rightP))]
    (case [leftP rightP]
      [(#/.Seq preL postL)
       (#/.Seq preR postR)]
      (case (weave preL preR)
        (#/.Alt _)
        <default>

        weavedP
        (#/.Seq weavedP (weave postL postR)))

      [#/.Pop #/.Pop]
      rightP

      (^template [<tag> <eq>]
        [(#/.Test (<tag> leftV))
         (#/.Test (<tag> rightV))]
        (if (<eq> leftV rightV)
          rightP
          <default>))
      ([#/.Bit bit@=]
       [#/.I64 "lux i64 ="]
       [#/.F64 frac@=]
       [#/.Text text@=])

      (^template [<access> <side>]
        [(#/.Access (<access> (<side> leftL)))
         (#/.Access (<access> (<side> rightL)))]
        (if (n.= leftL rightL)
          rightP
          <default>))
      ([#/.Side #.Left]
       [#/.Side #.Right]
       [#/.Member #.Left]
       [#/.Member #.Right])

      [(#/.Bind leftR) (#/.Bind rightR)]
      (if (n.= leftR rightR)
        rightP
        <default>)

      _
      <default>)))

(def: (get patterns @selection)
  (-> (///analysis.Tuple ///analysis.Pattern) Register (List /.Member))
  (loop [lefts 0
         patterns patterns]
    (with-expansions [<failure> (as-is (list))
                      <continue> (as-is (recur (inc lefts)
                                               tail))
                      <member> (as-is (if (list.empty? tail)
                                        (#.Right (dec lefts))
                                        (#.Left lefts)))]
      (case patterns
        #.Nil
        <failure>

        (#.Cons head tail)
        (case head
          (#///analysis.Simple #///analysis.Unit)
          <continue>
          
          (#///analysis.Bind register)
          (if (n.= @selection register)
            (list <member>)
            <continue>)

          (#///analysis.Complex (#///analysis.Tuple sub-patterns))
          (case (get sub-patterns @selection)
            #.Nil
            <continue>

            sub-members
            (list& <member> sub-members))
          
          _
          <failure>)))))

(def: #export (synthesize-case synthesize archive input [headB tailB+])
  (-> Phase Archive Synthesis Match (Operation Synthesis))
  (let [[[lastP lastA] prevsPA] (|> (#.Cons headB tailB+)
                                    list.reverse
                                    (case> (#.Cons [lastP lastA] prevsPA)
                                           [[lastP lastA] prevsPA]
                                           
                                           _
                                           (undefined)))]
    (do {@ ///.monad}
      [lastSP (path archive synthesize lastP lastA)
       prevsSP+ (monad.map @ (product.uncurry (path archive synthesize)) prevsPA)]
      (wrap (/.branch/case [input (list@fold weave lastSP prevsSP+)])))))

(template: (!masking <variable> <output>)
  [[(#///analysis.Bind <variable>)
    (#///analysis.Reference (///reference.local <output>))]
   (list)])

(def: #export (synthesize-masking synthesize archive input @variable @output)
  (-> Phase Archive Synthesis Register Register (Operation Synthesis))
  (if (n.= @variable @output)
    (///@wrap input)
    (..synthesize-case synthesize archive input (!masking @variable @output))))

(def: #export (synthesize-let synthesize archive input @variable body)
  (-> Phase Archive Synthesis Register Analysis (Operation Synthesis))
  (do ///.monad
    [body (/.with-new-local
            (synthesize archive body))]
    (wrap (/.branch/let [input @variable body]))))

(def: #export (synthesize-if synthesize archive test then else)
  (-> Phase Archive Synthesis Analysis Analysis (Operation Synthesis))
  (do ///.monad
    [then (synthesize archive then)
     else (synthesize archive else)]
    (wrap (/.branch/if [test then else]))))

(template: (!get <patterns> <output>)
  [[(///analysis.pattern/tuple <patterns>)
    (#///analysis.Reference (///reference.local <output>))]
   (.list)])

(def: #export (synthesize-get synthesize archive input patterns @member)
  (-> Phase Archive Synthesis (///analysis.Tuple ///analysis.Pattern) Register (Operation Synthesis))
  (case (..get patterns @member)
    #.Nil
    (..synthesize-case synthesize archive input (!get patterns @member))

    path
    (case input
      (^ (/.branch/get [sub-path sub-input]))
      (///@wrap (/.branch/get [(list@compose path sub-path) sub-input]))

      _
      (///@wrap (/.branch/get [path input])))))

(def: #export (synthesize synthesize^ [headB tailB+] archive inputA)
  (-> Phase Match Phase)
  (do {@ ///.monad}
    [inputS (synthesize^ archive inputA)]
    (case [headB tailB+]
      (^ (!masking @variable @output))
      (..synthesize-masking synthesize^ archive inputS @variable @output)

      [[(#///analysis.Bind @variable) body]
       #.Nil]
      (..synthesize-let synthesize^ archive inputS @variable body)
      
      (^or (^ [[(///analysis.pattern/bit #1) then]
               (list [(///analysis.pattern/bit #0) else])])
           (^ [[(///analysis.pattern/bit #1) then]
               (list [(///analysis.pattern/unit) else])])

           (^ [[(///analysis.pattern/bit #0) else]
               (list [(///analysis.pattern/bit #1) then])])
           (^ [[(///analysis.pattern/bit #0) else]
               (list [(///analysis.pattern/unit) then])]))
      (..synthesize-if synthesize^ archive inputS then else)
      
      (^ (!get patterns @member))
      (..synthesize-get synthesize^ archive inputS patterns @member)
      
      match
      (..synthesize-case synthesize^ archive inputS match))))

(def: #export (count-pops path)
  (-> Path [Nat Path])
  (case path
    (^ (/.path/seq #/.Pop path'))
    (let [[pops post-pops] (count-pops path')]
      [(inc pops) post-pops])

    _
    [0 path]))

(def: #export pattern-matching-error
  "Invalid expression for pattern-matching.")

(type: #export Storage
  {#bindings (Set Variable)
   #dependencies (Set Variable)})

(def: empty
  Storage
  {#bindings (set.new ///reference/variable.hash)
   #dependencies (set.new ///reference/variable.hash)})

## TODO: Use this to declare all local variables at the beginning of
## script functions.
## That way, it should be possible to do cheap "let" expressions,
## since the variable will exist beforehand, so no closure will need
## to be created for it.
## Apply this trick to JS, Python et al.
(def: #export (storage path)
  (-> Path Storage)
  (loop for-path
    [path path
     path-storage ..empty]
    (case path
      (^ (/.path/bind register))
      (update@ #bindings (set.add (#///reference/variable.Local register))
               path-storage)

      (^or (^ (/.path/seq left right))
           (^ (/.path/alt left right)))
      (list@fold for-path path-storage (list left right))

      (^ (/.path/then bodyS))
      (loop for-synthesis
        [bodyS bodyS
         synthesis-storage path-storage]
        (case bodyS
          (^ (/.variant [lefts right? valueS]))
          (for-synthesis valueS synthesis-storage)

          (^ (/.tuple members))
          (list@fold for-synthesis synthesis-storage members)

          (#/.Reference (#///reference.Variable var))
          (if (set.member? (get@ #bindings synthesis-storage) var)
            synthesis-storage
            (update@ #dependencies (set.add var) synthesis-storage))

          (^ (/.function/apply [functionS argsS]))
          (list@fold for-synthesis synthesis-storage (#.Cons functionS argsS))

          (^ (/.function/abstraction [environment arity bodyS]))
          (list@fold (function (_ variable storage)
                       (for-synthesis (#/.Reference (#///reference.Variable variable))
                                      storage))
                     synthesis-storage
                     environment)

          (^ (/.branch/let [inputS register exprS]))
          (list@fold for-synthesis
                     (update@ #bindings (set.add (#///reference/variable.Local register))
                              synthesis-storage)
                     (list inputS exprS))

          (^ (/.branch/if [testS thenS elseS]))
          (list@fold for-synthesis synthesis-storage (list testS thenS elseS))

          (^ (/.branch/case [inputS pathS]))
          (|> synthesis-storage (for-synthesis inputS) (for-path pathS))

          (^ (/.loop/scope [start initsS+ iterationS]))
          (list@fold for-synthesis synthesis-storage (#.Cons iterationS initsS+))

          (^ (/.loop/recur replacementsS+))
          (list@fold for-synthesis synthesis-storage replacementsS+)

          (#/.Extension [extension argsS])
          (list@fold for-synthesis synthesis-storage argsS)

          _
          synthesis-storage))

      _
      path-storage
      )))
