(.module:
  [lux (#- Definition)
   [abstract
    [monad (#+ do)]]
   [control
    ["." try]]
   [data
    [collection
     ["." row]]
    ["." format #_
     ["#" binary]]]
   [target
    [jvm
     ["_" bytecode (#+ Bytecode)]
     ["." modifier (#+ Modifier) ("#\." monoid)]
     ["." method (#+ Method)]
     ["." version]
     ["." class (#+ Class)]
     [encoding
      ["." name]]
     ["." type
      ["." reflection]]]]]
  ["." //
   ["#." runtime (#+ Definition)]
   ["#." function/abstract]])

(def: #export class "LuxProgram")

(def: ^Object (type.class "java.lang.Object" (list)))
(def: ^String (type.class "java.lang.String" (list)))
(def: ^Args (type.array ^String))

(def: main::type (type.method [(list ..^Args) type.void (list)]))

(def: main::modifier
  (Modifier Method)
  ($_ modifier\compose
      method.public
      method.static
      method.strict
      ))

(def: program::modifier
  (Modifier Class)
  ($_ modifier\compose
      class.public
      class.final
      ))

(def: nil //runtime.none-injection)

(def: amount-of-inputs
  (Bytecode Any)
  ($_ _.compose
      _.aload-0
      _.arraylength))

(def: decrease
  (Bytecode Any)
  ($_ _.compose
      _.iconst-1
      _.isub))

(def: head
  (Bytecode Any)
  ($_ _.compose
      _.dup
      _.aload-0
      _.swap
      _.aaload
      _.swap
      _.dup-x2
      _.pop))

(def: pair
  (Bytecode Any)
  ($_ _.compose
      _.iconst-2
      (_.anewarray ^Object)
      _.dup-x1
      _.swap
      _.iconst-0
      _.swap
      _.aastore
      _.dup-x1
      _.swap
      _.iconst-1
      _.swap
      _.aastore))

(def: cons //runtime.right-injection)

(def: input-list
  (Bytecode Any)
  (do _.monad
    [@loop _.new-label
     @end _.new-label]
    ($_ _.compose
        ..nil
        ..amount-of-inputs
        (_.set-label @loop)
        ..decrease
        _.dup
        (_.iflt @end)
        ..head
        ..pair
        ..cons
        _.swap
        (_.goto @loop)
        (_.set-label @end)
        _.pop)))

(def: feed-inputs //runtime.apply)

(def: run-io
  (Bytecode Any)
  ($_ _.compose
      (_.checkcast //function/abstract.class)
      _.aconst-null
      //runtime.apply))

(def: #export (program program)
  (-> (Bytecode Any) Definition)
  (let [super-class (|> ..^Object type.reflection reflection.reflection name.internal)
        main (method.method ..main::modifier "main" ..main::type
                            (list)
                            (#.Some ($_ _.compose
                                        program
                                        ..input-list
                                        ..feed-inputs
                                        ..run-io
                                        _.return)))]
    [..class
     (<| (format.run class.writer)
         try.assume
         (class.class version.v6_0
                      ..program::modifier
                      (name.internal ..class)
                      super-class
                      (list)
                      (list)
                      (list main)
                      (row.row)))]))
