(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." try]
    ["<>" parser
     ["<s>" synthesis (#+ Parser)]]]
   [data
    ["." product]
    [collection
     ["." list ("#\." functor)]
     ["." dictionary]]]
   [math
    [number
     ["f" frac]]]
   ["@" target
    ["_" js (#+ Literal Expression Statement)]]]
  ["." //// #_
   ["/" bundle]
   ["/#" // #_
    ["." extension]
    [generation
     [extension (#+ Nullary Unary Binary Trinary
                    nullary unary binary trinary)]
     ["//" js #_
      ["#." runtime (#+ Operation Phase Handler Bundle Generator)]
      ["#." primitive]]]
    [//
     [synthesis (#+ %synthesis)]
     [///
      ["#" phase]]]]])

(def: #export (custom [parser handler])
  (All [s]
    (-> [(Parser s)
         (-> Text (Generator s))]
        Handler))
  (function (_ extension_name phase archive input)
    (case (<s>.run parser input)
      (#try.Success input')
      (handler extension_name phase archive input')

      (#try.Failure error)
      (/////.throw extension.invalid_syntax [extension_name %synthesis input]))))

## [Procedures]
## [[Bits]]
(template [<name> <op>]
  [(def: (<name> [paramG subjectG])
     (Binary Expression)
     (<op> subjectG (//runtime.i64//to_number paramG)))]

  [i64//left_shift             //runtime.i64//left_shift]
  [i64//arithmetic_right_shift //runtime.i64//arithmetic_right_shift]
  [i64//logical_right_shift    //runtime.i64//logic_right_shift]
  )

## [[Numbers]]
(def: f64//decode
  (Unary Expression)
  (|>> list
       (_.apply/* (_.var "parseFloat"))
       _.return
       (_.closure (list))
       //runtime.lux//try))

(def: i64//char
  (Unary Expression)
  (|>> //runtime.i64//to_number
       (list)
       (_.apply/* (_.var "String.fromCharCode"))))

## [[Text]]
(def: (text//concat [leftG rightG])
  (Binary Expression)
  (|> leftG (_.do "concat" (list rightG))))

(def: (text//clip [startG endG subjectG])
  (Trinary Expression)
  (//runtime.text//clip startG endG subjectG))

(def: (text//index [startG partG subjectG])
  (Trinary Expression)
  (//runtime.text//index startG partG subjectG))

## [[IO]]
(def: (io//log messageG)
  (Unary Expression)
  ($_ _.,
      (//runtime.io//log messageG)
      //runtime.unit))

(def: (io//exit codeG)
  (Unary Expression)
  (let [exit_node_js! (let [@@process (_.var "process")]
                        (|> (_.not (_.= _.undefined (_.type_of @@process)))
                            (_.and (_.the "exit" @@process))
                            (_.and (_.do "exit" (list (//runtime.i64//to_number codeG)) @@process))))
        close_browser_window! (let [@@window (_.var "window")]
                                (|> (_.not (_.= _.undefined (_.type_of @@window)))
                                    (_.and (_.the "close" @@window))
                                    (_.and (_.do "close" (list) @@window))))
        reload_page! (let [@@location (_.var "location")]
                       (|> (_.not (_.= _.undefined (_.type_of @@location)))
                           (_.and (_.the "reload" @@location))
                           (_.and (_.do "reload" (list) @@location))))]
    (|> exit_node_js!
        (_.or close_browser_window!)
        (_.or reload_page!))))

(def: (io//current_time _)
  (Nullary Expression)
  (|> (_.new (_.var "Date") (list))
      (_.do "getTime" (list))
      //runtime.i64//from_number))

## TODO: Get rid of this ASAP
(def: lux::syntax_char_case!
  (..custom [($_ <>.and
                 <s>.any
                 <s>.any
                 (<>.some (<s>.tuple ($_ <>.and
                                         (<s>.tuple (<>.many <s>.i64))
                                         <s>.any))))
             (function (_ extension_name phase archive [input else conditionals])
               (do {! /////.monad}
                 [inputG (phase archive input)
                  elseG (phase archive else)
                  conditionalsG (: (Operation (List [(List Literal)
                                                     Statement]))
                                   (monad.map ! (function (_ [chars branch])
                                                  (do !
                                                    [branchG (phase archive branch)]
                                                    (wrap [(list\map (|>> .int _.int) chars)
                                                           (_.return branchG)])))
                                              conditionals))]
                 (wrap (_.apply/* (_.closure (list)
                                             (_.switch (_.the //runtime.i64_low_field inputG)
                                                       conditionalsG
                                                       (#.Some (_.return elseG))))
                                  (list)))))]))

## [Bundles]
(def: lux_procs
  Bundle
  (|> /.empty
      (/.install "syntax char case!" lux::syntax_char_case!)
      (/.install "is" (binary (product.uncurry _.=)))
      (/.install "try" (unary //runtime.lux//try))))

(def: i64_procs
  Bundle
  (<| (/.prefix "i64")
      (|> /.empty
          (/.install "and" (binary (product.uncurry //runtime.i64//and)))
          (/.install "or" (binary (product.uncurry //runtime.i64//or)))
          (/.install "xor" (binary (product.uncurry //runtime.i64//xor)))
          (/.install "left-shift" (binary i64//left_shift))
          (/.install "logical-right-shift" (binary i64//logical_right_shift))
          (/.install "arithmetic-right-shift" (binary i64//arithmetic_right_shift))
          (/.install "=" (binary (product.uncurry //runtime.i64//=)))
          (/.install "<" (binary (product.uncurry //runtime.i64//<)))
          (/.install "+" (binary (product.uncurry //runtime.i64//+)))
          (/.install "-" (binary (product.uncurry //runtime.i64//-)))
          (/.install "*" (binary (product.uncurry //runtime.i64//*)))
          (/.install "/" (binary (product.uncurry //runtime.i64///)))
          (/.install "%" (binary (product.uncurry //runtime.i64//%)))
          (/.install "f64" (unary //runtime.i64//to_number))
          (/.install "char" (unary i64//char))
          )))

(def: f64_procs
  Bundle
  (<| (/.prefix "f64")
      (|> /.empty
          (/.install "+" (binary (product.uncurry _.+)))
          (/.install "-" (binary (product.uncurry _.-)))
          (/.install "*" (binary (product.uncurry _.*)))
          (/.install "/" (binary (product.uncurry _./)))
          (/.install "%" (binary (product.uncurry _.%)))
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "i64" (unary //runtime.i64//from_number))
          (/.install "encode" (unary (_.do "toString" (list))))
          (/.install "decode" (unary f64//decode)))))

(def: text_procs
  Bundle
  (<| (/.prefix "text")
      (|> /.empty
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "concat" (binary text//concat))
          (/.install "index" (trinary text//index))
          (/.install "size" (unary (|>> (_.the "length") //runtime.i64//from_number)))
          (/.install "char" (binary (product.uncurry //runtime.text//char)))
          (/.install "clip" (trinary text//clip))
          )))

(def: io_procs
  Bundle
  (<| (/.prefix "io")
      (|> /.empty
          (/.install "log" (unary io//log))
          (/.install "error" (unary //runtime.io//error))
          (/.install "exit" (unary io//exit))
          (/.install "current-time" (nullary io//current_time)))))

(def: #export bundle
  Bundle
  (<| (/.prefix "lux")
      (|> lux_procs
          (dictionary.merge i64_procs)
          (dictionary.merge f64_procs)
          (dictionary.merge text_procs)
          (dictionary.merge io_procs)
          )))
