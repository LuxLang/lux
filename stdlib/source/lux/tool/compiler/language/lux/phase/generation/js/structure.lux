(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [target
    ["_" js (#+ Expression)]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase)]
   ["#." primitive]
   ["///#" //// #_
    [analysis (#+ Variant Tuple)]
    ["#." synthesis (#+ Synthesis)]
    ["//#" ///
     ["#." phase ("#@." monad)]]]])

(def: unit Expression (//primitive.text /////synthesis.unit))

(def: #export (tuple generate elemsS+)
  (-> Phase (Tuple Synthesis) (Operation Expression))
  (case elemsS+
    #.Nil
    (///////phase@wrap ..unit)

    (#.Cons singletonS #.Nil)
    (generate singletonS)

    _
    (do ///////phase.monad
      [elemsT+ (monad.map @ generate elemsS+)]
      (wrap (_.array elemsT+)))))

(def: #export (variant generate [lefts right? valueS])
  (-> Phase (Variant Synthesis) (Operation Expression))
  (let [tag (if right?
              (inc lefts)
              lefts)]
    (///////phase@map (//runtime.variant (_.i32 (.int tag))
                                         (//runtime.flag right?))
                      (generate valueS))))
