(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [target
    ["_" js (#+ Expression)]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Generator)]
   ["#." primitive]
   ["///#" //// #_
    [analysis (#+ Variant Tuple)]
    ["#." synthesis (#+ Synthesis)]
    ["//#" ///
     ["#." phase ("#@." monad)]]]])

(def: #export (tuple generate archive elemsS+)
  (Generator (Tuple Synthesis))
  (case elemsS+
    #.Nil
    (///////phase@wrap //runtime.unit)

    (#.Cons singletonS #.Nil)
    (generate archive singletonS)

    _
    (do {@ ///////phase.monad}
      [elemsT+ (monad.map @ (generate archive) elemsS+)]
      (wrap (_.array elemsT+)))))

(def: #export (variant generate archive [lefts right? valueS])
  (Generator (Variant Synthesis))
  (let [tag (if right?
              (inc lefts)
              lefts)]
    (///////phase@map (//runtime.variant (_.i32 (.int tag))
                                         (//runtime.flag right?))
                      (generate archive valueS))))
