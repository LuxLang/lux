(.module:
  [lux (#- function)
   [abstract
    ["." monad (#+ do)]]
   [control
    pipe]
   [data
    ["." product]
    ["." text]
    [collection
     ["." list ("#@." functor fold)]]]
   [target
    ["_" php (#+ Argument Expression Statement)]]]
  ["." // #_
   [runtime (#+ Operation Phase)]
   ["#." reference]
   ["#." case]
   ["#/" //
    ["#." reference]
    ["#/" //
     ["." // #_
      [reference (#+ Register Variable)]
      [arity (#+ Arity)]
      [analysis (#+ Variant Tuple Environment Abstraction Application Analysis)]
      [synthesis (#+ Synthesis)]]]]])

(def: #export (apply generate [functionS argsS+])
  (-> Phase (Application Synthesis) (Operation (Expression Any)))
  (do {@ ////.monad}
    [functionG (generate functionS)
     argsG+ (monad.map @ generate argsS+)]
    (wrap (_.apply/* argsG+ functionG))))

(def: #export capture
  (///reference.foreign _.var))

(def: input
  (|>> inc //case.register))

(def: #export (function generate [environment arity bodyS])
  (-> Phase (Abstraction Synthesis) (Operation (Expression Any)))
  (do {@ ////.monad}
    [[function-name bodyG] (///.with-context
                             (do @
                               [function-name ///.context]
                               (///.with-anchor (_.var function-name)
                                 (generate bodyS))))
     closureG+ (: (Operation (List Argument))
                  (monad.map @ (|>> (:: //reference.system variable)
                                    (:: @ map _.reference))
                             environment))
     #let [@curried (_.var "curried")
           arityG (|> arity .int _.int)
           @num-args (_.var "num_args")
           @selfG (_.global function-name)
           @selfL (_.var function-name)
           initialize-self! (_.; (_.set (//case.register 0) @selfL))
           initialize! (list@fold (.function (_ post pre!)
                                    ($_ _.then
                                        pre!
                                        (_.; (_.set (..input post) (_.nth (|> post .int _.int) @curried)))))
                                  initialize-self!
                                  (list.indices arity))]
     #let [directive ($_ _.then
                         (<| _.;
                             (_.set @selfL)
                             (_.closure (list& (_.reference @selfL) closureG+) (list))
                             ($_ _.then
                                 (_.echo (_.string "'ello, world! "))
                                 (_.; (_.set @num-args (_.func-num-args/0 [])))
                                 (_.echo @num-args) (_.echo (_.string " ~ ")) (_.echo arityG)
                                 (_.echo (_.string text.new-line))
                                 (_.; (_.set @curried (_.func-get-args/0 [])))
                                 (_.cond (list [(|> @num-args (_.= arityG))
                                                ($_ _.then
                                                    initialize!
                                                    (_.return bodyG))]
                                               [(|> @num-args (_.> arityG))
                                                (let [arity-inputs (_.array-slice/3 [@curried (_.int +0) arityG])
                                                      extra-inputs (_.array-slice/2 [@curried arityG])
                                                      next (_.call-user-func-array/2 [@selfL arity-inputs])
                                                      done (_.call-user-func-array/2 [next extra-inputs])]
                                                  ($_ _.then
                                                      (_.echo (_.string "STAGED ")) (_.echo (_.count/1 arity-inputs))
                                                      (_.echo (_.string " + ")) (_.echo (_.count/1 extra-inputs))
                                                      (_.echo (_.string text.new-line))
                                                      (_.echo (_.string "@selfL ")) (_.echo @selfL) (_.echo (_.string text.new-line))
                                                      (_.echo (_.string "  next ")) (_.echo next) (_.echo (_.string text.new-line))
                                                      (_.echo (_.string "  done ")) (_.echo done) (_.echo (_.string text.new-line))
                                                      (_.return done)))])
                                         ## (|> @num-args (_.< arityG))
                                         (let [@missing (_.var "missing")]
                                           (_.return (<| (_.closure (list (_.reference @selfL) (_.reference @curried)) (list))
                                                         ($_ _.then
                                                             (_.; (_.set @missing (_.func-get-args/0 [])))
                                                             (_.echo (_.string "NEXT ")) (_.echo (_.count/1 @curried))
                                                             (_.echo (_.string " ")) (_.echo (_.count/1 @missing))
                                                             (_.echo (_.string " ")) (_.echo (_.count/1 (_.array-merge/+ @curried (list @missing))))
                                                             (_.echo (_.string text.new-line))
                                                             (_.return (_.call-user-func-array/2 [@selfL (_.array-merge/+ @curried (list @missing))])))))))
                                 ))
                         (_.; (_.set @selfG @selfL)))]
     _ (///.execute! directive)
     _ (///.save! function-name directive)]
    (wrap @selfG)))
