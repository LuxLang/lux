(.module:
  [lux (#- Type type)
   [data
    [collection
     ["." list ("#@." functor)]]]
   [target
    [jvm
     ["." method (#+ Method)]
     ["_" bytecode (#+ Bytecode)]
     [constant
      [pool (#+ Resource)]]
     ["." type (#+ Type)
      ["." category (#+ Class)]]]]]
  ["." //
   ["#." new]
   ["/#" // #_
    [field
     [variable
      ["#." foreign]]]
    ["/#" // #_
     ["#." reference]
     [////
      [analysis (#+ Environment)]
      [///
       ["." arity (#+ Arity)]]]]]])

(def: #export name "reset")

(def: #export (type class)
  (-> (Type Class) (Type category.Method))
  (type.method [(list) class (list)]))

(def: (current-environment class)
  (-> (Type Class) Environment (List (Bytecode Any)))
  (|>> list.size
       list.indices
       (list@map (///foreign.get class))))

(def: #export (method class environment arity)
  (-> (Type Class) Environment Arity (Resource Method))
  (method.method //.modifier ..name
                 (..type class)
                 (list)
                 (#.Some ($_ _.compose
                             (if (arity.multiary? arity)
                               (//new.instance' (..current-environment class environment) class environment arity)
                               ////reference.this)
                             _.areturn))))
