(.module:
  [lux (#- nat int rev)
   [abstract
    monad]]
  ["." // #_
   ["#." type]
   ["/#" // #_
    [//
     ["/" analysis (#+ Analysis Operation)]
     [///
      ["#" phase]]]]])

(template [<name> <type> <tag>]
  [(def: #export (<name> value)
     (-> <type> (Operation Analysis))
     (do ///.monad
       [_ (//type.infer <type>)]
       (wrap (#/.Primitive (<tag> value)))))]

  [bit  .Bit  #/.Bit]
  [nat  .Nat  #/.Nat]
  [int  .Int  #/.Int]
  [rev  .Rev  #/.Rev]
  [frac .Frac #/.Frac]
  [text .Text #/.Text]
  )

(def: #export unit
  (Operation Analysis)
  (do ///.monad
    [_ (//type.infer .Any)]
    (wrap (#/.Primitive #/.Unit))))
