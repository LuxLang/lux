(.module:
  [lux (#- Scope)
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." product]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor fold)]
     ["." set]]]
   [math
    [number
     ["n" nat]]]
   [target
    ["_" ruby (#+ Expression LVar Statement)]]]
  ["." // #_
   [runtime (#+ Operation Phase Generator Phase! Generator!)]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     [synthesis
      ["." case]]
     ["/#" // #_
      ["." synthesis (#+ Scope Synthesis)]
      ["#." generation]
      ["//#" /// #_
       ["#." phase]
       [reference
        ["#." variable (#+ Register)]]]]]]])

(def: loop_name
  (-> Nat LVar)
  (|>> %.nat (format "loop") _.local))

(def: #export (scope expression archive [start initsS+ bodyS])
  (Generator (Scope Synthesis))
  (case initsS+
    ## function/false/non-independent loop
    #.Nil
    (expression archive bodyS)

    ## true loop
    _
    (do {! ///////phase.monad}
      [@loop (\ ! map ..loop_name /////generation.next)
       initsO+ (monad.map ! (expression archive) initsS+)
       [[loop_module loop_artifact] bodyO] (/////generation.with_new_context archive
                                             (do !
                                               [@loop (\ ! map (|>> ///reference.artifact _.local)
                                                         (/////generation.context archive))]
                                               (/////generation.with_anchor @loop
                                                 (expression archive bodyS))))
       #let [@loop (|> [loop_module loop_artifact] ///reference.artifact _.local)
             locals (|> initsS+
                        list.enumeration
                        (list\map (|>> product.left (n.+ start) //case.register)))
             actual_loop (_.statement
                          (_.lambda (#.Some @loop) locals
                                    (_.return bodyO)))
             [directive instantiation] (: [Statement Expression]
                                          (case (|> (synthesis.path/then bodyS)
                                                    //case.dependencies
                                                    (set.from_list _.code_hash)
                                                    (set.difference (set.from_list _.code_hash locals))
                                                    set.to_list)
                                            #.Nil
                                            [actual_loop
                                             @loop]

                                            foreigns
                                            [(_.statement
                                              (_.lambda (#.Some @loop) foreigns
                                                        ($_ _.then
                                                            actual_loop
                                                            (_.return @loop))))
                                             (_.apply_lambda/* foreigns @loop)]))]
       _ (/////generation.execute! directive)
       _ (/////generation.save! (%.nat loop_artifact) directive)]
      (wrap (_.apply_lambda/* initsO+ instantiation)))))

(def: #export (recur expression archive argsS+)
  (Generator (List Synthesis))
  (do {! ///////phase.monad}
    [@scope /////generation.anchor
     argsO+ (monad.map ! (expression archive) argsS+)]
    (wrap (_.apply_lambda/* argsO+ @scope))))
