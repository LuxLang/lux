(.module:
  [lux (#- Scope)
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." product]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor fold)]
     ["." set]]]
   [math
    [number
     ["n" nat]]]
   [target
    ["_" ruby (#+ Expression LVar Statement)]]]
  ["." // #_
   [runtime (#+ Operation Phase Generator Phase! Generator!)]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     [synthesis
      ["." case]]
     ["/#" // #_
      ["." synthesis (#+ Scope Synthesis)]
      ["#." generation]
      ["//#" /// #_
       ["#." phase]
       [reference
        ["#." variable (#+ Register)]]]]]]])

(def: loop_name
  (-> Nat LVar)
  (|>> %.nat (format "loop") _.local))

(def: #export (scope expression archive [start initsS+ bodyS])
  (Generator (Scope Synthesis))
  (do {! ///////phase.monad}
    [@loop (\ ! map ..loop_name /////generation.next)
     initsO+ (monad.map ! (expression archive) initsS+)
     bodyO (/////generation.with_anchor @loop
             (expression archive bodyS))]
    (wrap (|> (_.return bodyO)
              (_.lambda (#.Some @loop)
                        (|> initsS+
                            list.enumeration
                            (list\map (|>> product.left (n.+ start) //case.register))))
              (_.apply/* initsO+)))))

(def: #export (recur expression archive argsS+)
  (Generator (List Synthesis))
  (do {! ///////phase.monad}
    [@scope /////generation.anchor
     argsO+ (monad.map ! (expression archive) argsS+)]
    (wrap (_.apply/* argsO+ @scope))))
