(.module:
  [lux #*
   [host (#+ import:)]
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." function]]
   [data
    ["." product]
    ["." text]
    [number
     ["f" frac]]
    [collection
     ["." dictionary]]]
   [target
    ["_" ruby (#+ Expression)]]]
  [////
   ["/" bundle]
   [//
    [generation
     [extension (#+ Nullary Unary Binary Trinary
                    nullary unary binary trinary)]
     ["//" ruby #_
      ["#." runtime (#+ Operation Phase Handler Bundle)]]]]])

(def: lux-procs
  Bundle
  (|> /.empty
      (/.install "is" (binary (product.uncurry _.=)))
      (/.install "try" (unary //runtime.lux//try))))

(def: keep-i64
  (All [input]
    (-> (-> input (Expression Any))
        (-> input (Expression Any))))
  (function.compose (_.bit-and (_.manual "0xFFFFFFFFFFFFFFFF"))))

(def: i64-procs
  Bundle
  (<| (/.prefix "i64")
      (|> /.empty
          (/.install "and" (binary (product.uncurry _.bit-and)))
          (/.install "or" (binary (product.uncurry _.bit-or)))
          (/.install "xor" (binary (product.uncurry _.bit-xor)))
          (/.install "left-shift" (binary (..keep-i64 (product.uncurry _.bit-shl))))
          (/.install "logical-right-shift" (binary (product.uncurry //runtime.i64//logic-right-shift)))
          (/.install "arithmetic-right-shift" (binary (product.uncurry _.bit-shr)))
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "+" (binary (..keep-i64 (product.uncurry _.+))))
          (/.install "-" (binary (..keep-i64 (product.uncurry _.-))))
          )))

(import: java/lang/Double
  (#static MIN_VALUE double)
  (#static MAX_VALUE double))

(template [<name> <const>]
  [(def: (<name> _)
     (Nullary (Expression Any))
     (_.float <const>))]

  [frac//smallest (java/lang/Double::MIN_VALUE)]
  [frac//min      (f.* -1.0 (java/lang/Double::MAX_VALUE))]
  [frac//max      (java/lang/Double::MAX_VALUE)]
  )

(def: int-procs
  Bundle
  (<| (/.prefix "int")
      (|> /.empty
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "*" (binary (..keep-i64 (product.uncurry _.*))))
          (/.install "/" (binary (product.uncurry _./)))
          (/.install "%" (binary (product.uncurry _.%)))
          (/.install "frac" (unary (_./ (_.float +1.0))))
          (/.install "char" (unary (_.do "chr" (list)))))))

(def: frac-procs
  Bundle
  (<| (/.prefix "frac")
      (|> /.empty
          (/.install "+" (binary (product.uncurry _.+)))
          (/.install "-" (binary (product.uncurry _.-)))
          (/.install "*" (binary (product.uncurry _.*)))
          (/.install "/" (binary (product.uncurry _./)))
          (/.install "%" (binary (product.uncurry _.%)))
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "smallest" (nullary frac//smallest))
          (/.install "min" (nullary frac//min))
          (/.install "max" (nullary frac//max))
          (/.install "int" (unary (_.do "floor" (list))))
          (/.install "encode" (unary (_.do "to_s" (list))))
          (/.install "decode" (unary //runtime.f64//decode)))))

(def: (text//char [subjectO paramO])
  (Binary (Expression Any))
  (//runtime.text//char subjectO paramO))

(def: (text//clip [paramO extraO subjectO])
  (Trinary (Expression Any))
  (//runtime.text//clip subjectO paramO extraO))

(def: (text//index [startO partO textO])
  (Trinary (Expression Any))
  (//runtime.text//index textO partO startO))

(def: text-procs
  Bundle
  (<| (/.prefix "text")
      (|> /.empty
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "concat" (binary (product.uncurry _.+)))
          (/.install "index" (trinary text//index))
          (/.install "size" (unary (_.the "length")))
          (/.install "char" (binary (product.uncurry //runtime.text//char)))
          (/.install "clip" (trinary text//clip))
          )))

(def: (io//log! messageG)
  (Unary (Expression Any))
  (_.or (_.apply/* (list (|> messageG (_.+ (_.string text.new-line))))
                   (_.local "puts"))
        //runtime.unit))

(def: io//error!
  (Unary (Expression Any))
  _.raise)

(def: (io//exit! code)
  (Unary (Expression Any))
  (_.apply/* (list code) (_.local "exit")))

(def: (io//current-time! _)
  (Nullary (Expression Any))
  (|> (_.local "Time")
      (_.do "now" (list))
      (_.do "to_f" (list))
      (_.* (_.float +1000.0))
      (_.do "to_i" (list))))

(def: io-procs
  Bundle
  (<| (/.prefix "io")
      (|> /.empty
          (/.install "log" (unary ..io//log!))
          (/.install "error" (unary ..io//error!))
          (/.install "exit" (unary ..io//exit!))
          (/.install "current-time" (nullary ..io//current-time!)))))

(def: #export bundle
  Bundle
  (<| (/.prefix "lux")
      (|> lux-procs
          (dictionary.merge ..i64-procs)
          (dictionary.merge ..int-procs)
          (dictionary.merge ..frac-procs)
          (dictionary.merge ..text-procs)
          (dictionary.merge ..io-procs)
          )))
