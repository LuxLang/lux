(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." function]
    ["." try]
    ["<>" parser
     ["<s>" synthesis (#+ Parser)]]]
   [data
    ["." product]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." dictionary]
     ["." list ("#\." functor fold)]]]
   [math
    [number
     ["f" frac]]]
   [target
    ["_" ruby (#+ Expression)]]]
  ["." //// #_
   ["/" bundle]
   ["/#" // #_
    ["." extension]
    [generation
     [extension (#+ Nullary Unary Binary Trinary
                    nullary unary binary trinary)]
     ["//" ruby #_
      ["#." runtime (#+ Operation Phase Handler Bundle Generator)]]]
    [//
     [synthesis (#+ %synthesis)]
     ["." generation]
     [///
      ["#" phase]]]]])

(def: #export (custom [parser handler])
  (All [s]
    (-> [(Parser s)
         (-> Text (Generator s))]
        Handler))
  (function (_ extension_name phase archive input)
    (case (<s>.run parser input)
      (#try.Success input')
      (handler extension_name phase archive input')

      (#try.Failure error)
      (/////.throw extension.invalid_syntax [extension_name %synthesis input]))))

## TODO: Get rid of this ASAP
(def: lux::syntax_char_case!
  (..custom [($_ <>.and
                 <s>.any
                 <s>.any
                 (<>.some (<s>.tuple ($_ <>.and
                                         (<s>.tuple (<>.many <s>.i64))
                                         <s>.any))))
             (function (_ extension_name phase archive [input else conditionals])
               (do {! /////.monad}
                 [inputG (phase archive input)
                  elseG (phase archive else)
                  @input (\ ! map _.local (generation.gensym "input"))
                  conditionalsG (: (Operation (List [Expression Expression]))
                                   (monad.map ! (function (_ [chars branch])
                                                  (do !
                                                    [branchG (phase archive branch)]
                                                    (wrap [(|> chars
                                                               (list\map (|>> .int _.int (_.= @input)))
                                                               (list\fold (function (_ clause total)
                                                                            (if (is? _.nil total)
                                                                              clause
                                                                              (_.or clause total)))
                                                                          _.nil))
                                                           branchG])))
                                              conditionals))
                  #let [closure (_.lambda #.None (list @input)
                                          (list\fold (function (_ [test then] else)
                                                       (_.if test (_.return then) else))
                                                     (_.return elseG)
                                                     conditionalsG))]]
                 (wrap (_.apply_lambda/* (list inputG) closure))))]))

(def: lux_procs
  Bundle
  (|> /.empty
      (/.install "syntax char case!" lux::syntax_char_case!)
      (/.install "is" (binary (function (_ [reference subject])
                                (_.do "equal?" (list reference) subject))))
      (/.install "try" (unary //runtime.lux//try))))

(def: (capped operation parameter subject)
  (-> (-> Expression Expression Expression)
      (-> Expression Expression Expression))
  (//runtime.i64//64 (operation parameter subject)))

(def: i64_procs
  Bundle
  (<| (/.prefix "i64")
      (|> /.empty
          (/.install "and" (binary (product.uncurry //runtime.i64//and)))
          (/.install "or" (binary (product.uncurry //runtime.i64//or)))
          (/.install "xor" (binary (product.uncurry //runtime.i64//xor)))
          (/.install "left-shift" (binary (product.uncurry //runtime.i64//left_shift)))
          (/.install "right-shift" (binary (product.uncurry //runtime.i64//right_shift)))
          
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "+" (binary (product.uncurry (..capped _.+))))
          (/.install "-" (binary (product.uncurry (..capped _.-))))
          (/.install "*" (binary (product.uncurry (..capped _.*))))
          (/.install "/" (binary (product.uncurry //runtime.i64//division)))
          (/.install "%" (binary (function (_ [parameter subject])
                                   (_.do "remainder" (list parameter) subject))))
          
          (/.install "f64" (unary (_./ (_.float +1.0))))
          (/.install "char" (unary (_.do "chr" (list (_.string "UTF-8")))))
          )))

(def: f64_procs
  Bundle
  (<| (/.prefix "f64")
      (|> /.empty
          (/.install "+" (binary (product.uncurry _.+)))
          (/.install "-" (binary (product.uncurry _.-)))
          (/.install "*" (binary (product.uncurry _.*)))
          (/.install "/" (binary (product.uncurry _./)))
          (/.install "%" (binary (function (_ [parameter subject])
                                   (_.do "remainder" (list parameter) subject))))
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "i64" (unary (_.do "floor" (list))))
          (/.install "encode" (unary (_.do "to_s" (list))))
          (/.install "decode" (unary //runtime.f64//decode)))))

(def: (text//char [subjectO paramO])
  (Binary Expression)
  (//runtime.text//char subjectO paramO))

(def: (text//clip [paramO extraO subjectO])
  (Trinary Expression)
  (//runtime.text//clip paramO extraO subjectO))

(def: (text//index [startO partO textO])
  (Trinary Expression)
  (//runtime.text//index textO partO startO))

(def: text_procs
  Bundle
  (<| (/.prefix "text")
      (|> /.empty
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "concat" (binary (product.uncurry (function.flip _.+))))
          (/.install "index" (trinary text//index))
          (/.install "size" (unary (_.the "length")))
          (/.install "char" (binary (product.uncurry //runtime.text//char)))
          (/.install "clip" (trinary text//clip))
          )))

(def: (io//log! messageG)
  (Unary Expression)
  (|> (_.print/2 messageG (_.string text.new_line))
      (_.or //runtime.unit)))

(def: io//error!
  (Unary Expression)
  _.raise)

(def: io_procs
  Bundle
  (<| (/.prefix "io")
      (|> /.empty
          (/.install "log" (unary ..io//log!))
          (/.install "error" (unary ..io//error!))
          )))

(def: #export bundle
  Bundle
  (<| (/.prefix "lux")
      (|> lux_procs
          (dictionary.merge ..i64_procs)
          (dictionary.merge ..f64_procs)
          (dictionary.merge ..text_procs)
          (dictionary.merge ..io_procs)
          )))
