(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." function]
    ["." try]
    ["<>" parser
     ["<s>" synthesis (#+ Parser)]]]
   [data
    ["." product]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." dictionary]
     ["." list ("#\." functor fold)]]]
   [math
    [number
     ["f" frac]]]
   [target
    ["_" ruby (#+ Expression)]]]
  ["." //// #_
   ["/" bundle]
   ["/#" // #_
    ["." extension]
    [generation
     [extension (#+ Nullary Unary Binary Trinary
                    nullary unary binary trinary)]
     ["//" ruby #_
      ["#." runtime (#+ Operation Phase Handler Bundle Generator)]]]
    [//
     [synthesis (#+ %synthesis)]
     ["." generation]
     [///
      ["#" phase]]]]])

(def: #export (custom [parser handler])
  (All [s]
    (-> [(Parser s)
         (-> Text (Generator s))]
        Handler))
  (function (_ extension_name phase archive input)
    (case (<s>.run parser input)
      (#try.Success input')
      (handler extension_name phase archive input')

      (#try.Failure error)
      (/////.throw extension.invalid_syntax [extension_name %synthesis input]))))

(def: lux_procs
  Bundle
  (|> /.empty
      (/.install "is" (binary (product.uncurry _.=)))
      (/.install "try" (unary //runtime.lux//try))))

(def: keep_i64
  (All [input]
    (-> (-> input Expression)
        (-> input Expression)))
  (function.compose (_.bit_and (_.manual "0xFFFFFFFFFFFFFFFF"))))

(def: i64_procs
  Bundle
  (<| (/.prefix "i64")
      (|> /.empty
          (/.install "and" (binary (product.uncurry _.bit_and)))
          (/.install "or" (binary (product.uncurry _.bit_or)))
          (/.install "xor" (binary (product.uncurry _.bit_xor)))
          (/.install "left-shift" (binary (..keep_i64 (product.uncurry _.bit_shl))))
          (/.install "right-shift" (binary (product.uncurry //runtime.i64//logic_right_shift)))
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "+" (binary (..keep_i64 (product.uncurry _.+))))
          (/.install "-" (binary (..keep_i64 (product.uncurry _.-))))
          )))

(def: int_procs
  Bundle
  (<| (/.prefix "int")
      (|> /.empty
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "*" (binary (..keep_i64 (product.uncurry _.*))))
          (/.install "/" (binary (product.uncurry _./)))
          (/.install "%" (binary (product.uncurry _.%)))
          (/.install "frac" (unary (_./ (_.float +1.0))))
          (/.install "char" (unary (_.do "chr" (list)))))))

(def: frac_procs
  Bundle
  (<| (/.prefix "frac")
      (|> /.empty
          (/.install "+" (binary (product.uncurry _.+)))
          (/.install "-" (binary (product.uncurry _.-)))
          (/.install "*" (binary (product.uncurry _.*)))
          (/.install "/" (binary (product.uncurry _./)))
          (/.install "%" (binary (product.uncurry _.%)))
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "int" (unary (_.do "floor" (list))))
          (/.install "encode" (unary (_.do "to_s" (list))))
          (/.install "decode" (unary //runtime.f64//decode)))))

(def: (text//char [subjectO paramO])
  (Binary Expression)
  (//runtime.text//char subjectO paramO))

(def: (text//clip [paramO extraO subjectO])
  (Trinary Expression)
  (//runtime.text//clip subjectO paramO extraO))

(def: (text//index [startO partO textO])
  (Trinary Expression)
  (//runtime.text//index textO partO startO))

(def: text_procs
  Bundle
  (<| (/.prefix "text")
      (|> /.empty
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "concat" (binary (product.uncurry _.+)))
          (/.install "index" (trinary text//index))
          (/.install "size" (unary (_.the "length")))
          (/.install "char" (binary (product.uncurry //runtime.text//char)))
          (/.install "clip" (trinary text//clip))
          )))

(def: (io//log! messageG)
  (Unary Expression)
  (_.or (_.apply/* (list (|> messageG (_.+ (_.string text.new_line))))
                   (_.local "puts"))
        //runtime.unit))

(def: io//error!
  (Unary Expression)
  _.raise)

(def: (io//current_time! _)
  (Nullary Expression)
  (|> (_.local "Time")
      (_.do "now" (list))
      (_.do "to_f" (list))
      (_.* (_.float +1000.0))
      (_.do "to_i" (list))))

(def: io_procs
  Bundle
  (<| (/.prefix "io")
      (|> /.empty
          (/.install "log" (unary ..io//log!))
          (/.install "error" (unary ..io//error!))
          (/.install "current-time" (nullary ..io//current_time!)))))

(def: #export bundle
  Bundle
  (<| (/.prefix "lux")
      (|> lux_procs
          (dictionary.merge ..i64_procs)
          (dictionary.merge ..int_procs)
          (dictionary.merge ..frac_procs)
          (dictionary.merge ..text_procs)
          (dictionary.merge ..io_procs)
          )))
