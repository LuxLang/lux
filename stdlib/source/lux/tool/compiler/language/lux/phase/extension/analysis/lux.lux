(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [control
    [io (#+ IO)]
    ["." try]
    ["." exception (#+ exception:)]
    ["<>" parser
     ["<c>" code (#+ Parser)]]]
   [data
    ["." maybe]
    [number
     ["n" nat]]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#@." functor)]
     ["." dictionary (#+ Dictionary)]]]
   [type
    ["." check]]
   ["." meta]]
  ["." ///
   ["#." bundle]
   ["/#" // #_
    [analysis
     [".A" type]]
    [//
     ["#." analysis (#+ Analysis Operation Phase Handler Bundle)
      [evaluation (#+ Eval)]]
     [///
      ["#" phase]
      [meta
       [archive (#+ Archive)]]]]]])

(def: #export (custom [syntax handler])
  (All [s]
    (-> [(Parser s)
         (-> Text Phase Archive s (Operation Analysis))]
        Handler))
  (function (_ extension-name analyse archive args)
    (case (<c>.run syntax args)
      (#try.Success inputs)
      (handler extension-name analyse archive inputs)

      (#try.Failure _)
      (////analysis.throw ///.invalid-syntax [extension-name %.code args]))))

(def: (simple inputsT+ outputT)
  (-> (List Type) Type Handler)
  (let [num-expected (list.size inputsT+)]
    (function (_ extension-name analyse archive args)
      (let [num-actual (list.size args)]
        (if (n.= num-expected num-actual)
          (do {@ ////.monad}
            [_ (typeA.infer outputT)
             argsA (monad.map @
                              (function (_ [argT argC])
                                (typeA.with-type argT
                                  (analyse archive argC)))
                              (list.zip/2 inputsT+ args))]
            (wrap (#////analysis.Extension extension-name argsA)))
          (////analysis.throw ///.incorrect-arity [extension-name num-expected num-actual]))))))

(def: #export (nullary valueT)
  (-> Type Handler)
  (simple (list) valueT))

(def: #export (unary inputT outputT)
  (-> Type Type Handler)
  (simple (list inputT) outputT))

(def: #export (binary subjectT paramT outputT)
  (-> Type Type Type Handler)
  (simple (list subjectT paramT) outputT))

(def: #export (trinary subjectT param0T param1T outputT)
  (-> Type Type Type Type Handler)
  (simple (list subjectT param0T param1T) outputT))

## TODO: Get rid of this ASAP
(as-is
 (exception: #export (char-text-must-be-size-1 {text Text})
   (exception.report
    ["Text" (%.text text)]))
 
 (def: text-char
   (Parser text.Char)
   (do <>.monad
     [raw <c>.text]
     (case (text.size raw)
       1 (wrap (|> raw (text.nth 0) maybe.assume))
       _ (<>.fail (exception.construct ..char-text-must-be-size-1 [raw])))))

 (def: lux::syntax-char-case!
   (..custom
    [($_ <>.and
         <c>.any
         (<c>.tuple (<>.some (<>.and (<c>.tuple (<>.many ..text-char))
                                     <c>.any)))
         <c>.any)
     (function (_ extension-name phase archive [input conditionals else])
       (do {@ ////.monad}
         [input (typeA.with-type text.Char
                  (phase archive input))
          expectedT (///.lift meta.expected-type)
          conditionals (monad.map @ (function (_ [cases branch])
                                      (do @
                                        [branch (typeA.with-type expectedT
                                                  (phase archive branch))]
                                        (wrap [cases branch])))
                                  conditionals)
          else (typeA.with-type expectedT
                 (phase archive else))]
         (wrap (|> conditionals
                   (list@map (function (_ [cases branch])
                               (////analysis.tuple
                                (list (////analysis.tuple (list@map (|>> ////analysis.nat) cases))
                                      branch))))
                   (list& input else)
                   (#////analysis.Extension extension-name)))))])))

## "lux is" represents reference/pointer equality.
(def: lux::is
  Handler
  (function (_ extension-name analyse archive args)
    (do ////.monad
      [[var-id varT] (typeA.with-env check.var)]
      ((binary varT varT Bit extension-name)
       analyse archive args))))

## "lux try" provides a simple way to interact with the host platform's
## error-handling facilities.
(def: lux::try
  Handler
  (function (_ extension-name analyse archive args)
    (case args
      (^ (list opC))
      (do ////.monad
        [[var-id varT] (typeA.with-env check.var)
         _ (typeA.infer (type (Either Text varT)))
         opA (typeA.with-type (type (IO varT))
               (analyse archive opC))]
        (wrap (#////analysis.Extension extension-name (list opA))))
      
      _
      (////analysis.throw ///.incorrect-arity [extension-name 1 (list.size args)]))))

(def: lux::in-module
  Handler
  (function (_ extension-name analyse archive argsC+)
    (case argsC+
      (^ (list [_ (#.Text module-name)] exprC))
      (////analysis.with-current-module module-name
        (analyse archive exprC))
      
      _
      (////analysis.throw ///.invalid-syntax [extension-name %.code argsC+]))))

(def: (lux::check eval)
  (-> Eval Handler)
  (function (_ extension-name analyse archive args)
    (case args
      (^ (list typeC valueC))
      (do {@ ////.monad}
        [count (///.lift meta.count)
         actualT (:: @ map (|>> (:coerce Type))
                     (eval archive count Type typeC))
         _ (typeA.infer actualT)]
        (typeA.with-type actualT
          (analyse archive valueC)))

      _
      (////analysis.throw ///.incorrect-arity [extension-name 2 (list.size args)]))))

(def: (lux::coerce eval)
  (-> Eval Handler)
  (function (_ extension-name analyse archive args)
    (case args
      (^ (list typeC valueC))
      (do {@ ////.monad}
        [count (///.lift meta.count)
         actualT (:: @ map (|>> (:coerce Type))
                     (eval archive count Type typeC))
         _ (typeA.infer actualT)
         [valueT valueA] (typeA.with-inference
                           (analyse archive valueC))]
        (wrap valueA))

      _
      (////analysis.throw ///.incorrect-arity [extension-name 2 (list.size args)]))))

(def: (caster input output)
  (-> Type Type Handler)
  (..custom
   [<c>.any
    (function (_ extension-name phase archive valueC)
      (do {@ ////.monad}
        [_ (typeA.infer output)]
        (typeA.with-type input
          (phase archive valueC))))]))

(def: lux::macro
  Handler
  (..custom
   [<c>.any
    (function (_ extension-name phase archive valueC)
      (do {@ ////.monad}
        [_ (typeA.infer .Macro)
         input-type (loop [input-name (name-of .Macro')]
                      (do @
                        [input-type (///.lift (meta.find-def (name-of .Macro')))]
                        (case input-type
                          (#.Definition [exported? def-type def-data def-value])
                          (wrap (:coerce Type def-value))

                          (#.Alias real-name)
                          (recur real-name))))]
        (typeA.with-type input-type
          (phase archive valueC))))]))

(def: (bundle::lux eval)
  (-> Eval Bundle)
  (|> ///bundle.empty
      (///bundle.install "syntax char case!" lux::syntax-char-case!)
      (///bundle.install "is" lux::is)
      (///bundle.install "try" lux::try)
      (///bundle.install "check" (lux::check eval))
      (///bundle.install "coerce" (lux::coerce eval))
      (///bundle.install "macro" ..lux::macro)
      (///bundle.install "check type" (..caster .Type .Type))
      (///bundle.install "in-module" lux::in-module)))

(def: bundle::io
  Bundle
  (<| (///bundle.prefix "io")
      (|> ///bundle.empty
          (///bundle.install "log" (unary Text Any))
          (///bundle.install "error" (unary Text Nothing))
          (///bundle.install "exit" (unary Int Nothing))
          (///bundle.install "current-time" (nullary Int)))))

(def: I64* (type (I64 Any)))

(def: bundle::i64
  Bundle
  (<| (///bundle.prefix "i64")
      (|> ///bundle.empty
          (///bundle.install "and" (binary I64* I64* I64))
          (///bundle.install "or" (binary I64* I64* I64))
          (///bundle.install "xor" (binary I64* I64* I64))
          (///bundle.install "left-shift" (binary Nat I64* I64))
          (///bundle.install "logical-right-shift" (binary Nat I64* I64))
          (///bundle.install "arithmetic-right-shift" (binary Nat I64* I64))
          (///bundle.install "=" (binary I64* I64* Bit))
          (///bundle.install "<" (binary Int Int Bit))
          (///bundle.install "+" (binary I64* I64* I64))
          (///bundle.install "-" (binary I64* I64* I64))
          (///bundle.install "*" (binary Int Int Int))
          (///bundle.install "/" (binary Int Int Int))
          (///bundle.install "%" (binary Int Int Int))
          (///bundle.install "f64" (unary Int Frac))
          (///bundle.install "char" (unary Int Text)))))

(def: bundle::f64
  Bundle
  (<| (///bundle.prefix "f64")
      (|> ///bundle.empty
          (///bundle.install "+" (binary Frac Frac Frac))
          (///bundle.install "-" (binary Frac Frac Frac))
          (///bundle.install "*" (binary Frac Frac Frac))
          (///bundle.install "/" (binary Frac Frac Frac))
          (///bundle.install "%" (binary Frac Frac Frac))
          (///bundle.install "=" (binary Frac Frac Bit))
          (///bundle.install "<" (binary Frac Frac Bit))
          (///bundle.install "smallest" (nullary Frac))
          (///bundle.install "min" (nullary Frac))
          (///bundle.install "max" (nullary Frac))
          (///bundle.install "i64" (unary Frac Int))
          (///bundle.install "encode" (unary Frac Text))
          (///bundle.install "decode" (unary Text (type (Maybe Frac)))))))

(def: bundle::text
  Bundle
  (<| (///bundle.prefix "text")
      (|> ///bundle.empty
          (///bundle.install "=" (binary Text Text Bit))
          (///bundle.install "<" (binary Text Text Bit))
          (///bundle.install "concat" (binary Text Text Text))
          (///bundle.install "index" (trinary Nat Text Text (type (Maybe Nat))))
          (///bundle.install "size" (unary Text Nat))
          (///bundle.install "char" (binary Nat Text Nat))
          (///bundle.install "clip" (trinary Nat Nat Text Text))
          )))

(def: #export (bundle eval)
  (-> Eval Bundle)
  (<| (///bundle.prefix "lux")
      (|> ///bundle.empty
          (dictionary.merge (bundle::lux eval))
          (dictionary.merge bundle::i64)
          (dictionary.merge bundle::f64)
          (dictionary.merge bundle::text)
          (dictionary.merge bundle::io)
          )))
