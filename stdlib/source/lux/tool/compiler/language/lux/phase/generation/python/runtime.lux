(.module:
  [lux (#- inc)
   ["." meta]
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." function]
    ["<>" parser
     ["<.>" code]]]
   [data
    ["." product]
    ["." text ("#\." hash)
     ["%" format (#+ format)]
     ["." encoding]]
    [collection
     ["." list ("#\." functor)]
     ["." row]]]
   ["." macro
    [syntax (#+ syntax:)]
    ["." code]]
   [math
    [number (#+ hex)
     ["." i64]]]
   [target
    ["_" python (#+ Expression SVar Computation Literal Statement)]]]
  ["." /// #_
   ["#." reference]
   ["//#" /// #_
    ["$" version]
    ["#." synthesis]
    ["#." generation]
    ["//#" /// (#+ Output)
     ["#." phase]
     [meta
      [archive (#+ Archive)
       ["." artifact (#+ Registry)]]]]]])

(template [<name> <base>]
  [(type: #export <name>
     (<base> SVar (Expression Any) (Statement Any)))]

  [Operation /////generation.Operation]
  [Phase /////generation.Phase]
  [Handler /////generation.Handler]
  [Bundle /////generation.Bundle]
  )

(type: #export (Generator i)
  (-> Phase Archive i (Operation (Expression Any))))

(def: prefix Text "LuxRuntime")

(def: #export unit (_.string /////synthesis.unit))

(def: (flag value)
  (-> Bit Literal)
  (if value
    (_.string "")
    _.none))

(def: (variant' tag last? value)
  (-> (Expression Any) (Expression Any) (Expression Any) Literal)
  (_.tuple (list tag last? value)))

(def: #export (variant tag last? value)
  (-> Nat Bit (Expression Any) Literal)
  (variant' (_.int (.int tag))
            (flag last?)
            value))

(def: #export none
  Literal
  (..variant 0 #0 unit))

(def: #export some
  (-> (Expression Any) Literal)
  (..variant 1 #1))

(def: #export left
  (-> (Expression Any) Literal)
  (..variant 0 #0))

(def: #export right
  (-> (Expression Any) Literal)
  (..variant 1 #1))

(def: (runtime_name name)
  (-> Text SVar)
  (let [identifier (format ..prefix
                           "_" (%.nat $.version)
                           "_" (%.nat (text\hash name)))]
    (_.var identifier)))

(def: (feature name definition)
  (-> SVar (-> SVar (Statement Any)) (Statement Any))
  (definition name))

(syntax: #export (with_vars {vars (<code>.tuple (<>.some <code>.local_identifier))}
                   body)
  (do {! meta.monad}
    [ids (monad.seq ! (list.repeat (list.size vars) meta.count))]
    (wrap (list (` (let [(~+ (|> vars
                                 (list.zip/2 ids)
                                 (list\map (function (_ [id var])
                                             (list (code.local_identifier var)
                                                   (` (_.var (~ (code.text (format "v" (%.nat id)))))))))
                                 list.concat))]
                     (~ body)))))))

(syntax: (runtime: {declaration (<>.or <code>.local_identifier
                                       (<code>.form (<>.and <code>.local_identifier
                                                            (<>.some <code>.local_identifier))))}
           code)
  (case declaration
    (#.Left name)
    (macro.with_gensyms [g!_]
      (let [nameC (code.local_identifier name)
            code_nameC (code.local_identifier (format "@" name))
            runtime_nameC (` (runtime_name (~ (code.text name))))]
        (wrap (list (` (def: #export (~ nameC) SVar (~ runtime_nameC)))
                    (` (def: (~ code_nameC)
                         (Statement Any)
                         (..feature (~ runtime_nameC)
                                    (function ((~ g!_) (~ nameC))
                                      (~ code)))))))))
    
    (#.Right [name inputs])
    (macro.with_gensyms [g!_]
      (let [nameC (code.local_identifier name)
            code_nameC (code.local_identifier (format "@" name))
            runtime_nameC (` (runtime_name (~ (code.text name))))
            inputsC (list\map code.local_identifier inputs)
            inputs_typesC (list\map (function.constant (` (_.Expression Any)))
                                    inputs)]
        (wrap (list (` (def: #export ((~ nameC) (~+ inputsC))
                         (-> (~+ inputs_typesC) (Computation Any))
                         (_.apply/* (~ runtime_nameC) (list (~+ inputsC)))))
                    (` (def: (~ code_nameC)
                         (Statement Any)
                         (..feature (~ runtime_nameC)
                                    (function ((~ g!_) (~ g!_))
                                      (..with_vars [(~+ inputsC)]
                                        (_.def (~ g!_) (list (~+ inputsC))
                                               (~ code)))))))))))))

(runtime: (lux//try op)
  (with_vars [error value]
    (_.try ($_ _.then
               (_.set (list value) (_.apply/* op (list unit)))
               (_.return (right value)))
           (list [(list (_.var "Exception")) error
                  (_.return (left (_.str/1 error)))]))))

(runtime: (lux//program_args program_args)
  (with_vars [inputs value]
    ($_ _.then
        (_.set (list inputs) none)
        (<| (_.for_in value program_args)
            (_.set (list inputs)
                   (some (_.tuple (list value inputs)))))
        (_.return inputs))))

(def: runtime//lux
  (Statement Any)
  ($_ _.then
      @lux//try
      @lux//program_args
      ))

(runtime: (io//log! message)
  ($_ _.then
      (_.print message)
      (_.return ..unit)))

(runtime: (io//throw! message)
  ($_ _.then
      (_.raise (_.Exception/1 message))
      (_.return ..unit)))

(runtime: (io//current_time! _)
  ($_ _.then
      (_.import "time")
      (_.return (|> (_.var "time")
                    (_.do "time" (list))
                    (_.* (_.int +1,000))
                    _.int/1))))

(def: runtime//io
  (Statement Any)
  ($_ _.then
      @io//log!
      @io//throw!
      @io//current_time!
      ))

(def: last_index
  (|>> _.len/1 (_.- (_.int +1))))

(with_expansions [<recur> (as_is ($_ _.then
                                     (_.set (list lefts) (_.- last_index_right lefts))
                                     (_.set (list tuple) (_.nth last_index_right tuple))))]
  (runtime: (tuple//left lefts tuple)
    (with_vars [last_index_right]
      (<| (_.while (_.bool true))
          ($_ _.then
              (_.set (list last_index_right) (..last_index tuple))
              (_.if (_.> lefts last_index_right)
                ## No need for recursion
                (_.return (_.nth lefts tuple))
                ## Needs recursion
                <recur>)))))

  (runtime: (tuple//right lefts tuple)
    (with_vars [last_index_right right_index]
      (<| (_.while (_.bool true))
          ($_ _.then
              (_.set (list last_index_right) (..last_index tuple))
              (_.set (list right_index) (_.+ (_.int +1) lefts))
              (_.cond (list [(_.= last_index_right right_index)
                             (_.return (_.nth right_index tuple))]
                            [(_.> last_index_right right_index)
                             ## Needs recursion.
                             <recur>])
                      (_.return (_.slice_from right_index tuple)))
              )))))

(runtime: (sum//get sum wantsLast wantedTag)
  (let [no_match! (_.return _.none)
        sum_tag (_.nth (_.int +0) sum)
        sum_flag (_.nth (_.int +1) sum)
        sum_value (_.nth (_.int +2) sum)
        is_last? (_.= (_.string "") sum_flag)
        test_recursion! (_.if is_last?
                          ## Must recurse.
                          (_.return (sum//get sum_value wantsLast (_.- sum_tag wantedTag)))
                          no_match!)]
    (_.cond (list [(_.= sum_tag wantedTag)
                   (_.if (_.= wantsLast sum_flag)
                     (_.return sum_value)
                     test_recursion!)]

                  [(_.> sum_tag wantedTag)
                   test_recursion!]

                  [(_.and (_.< sum_tag wantedTag)
                          (_.= (_.string "") wantsLast))
                   (_.return (variant' (_.- wantedTag sum_tag) sum_flag sum_value))])

            no_match!)))

(def: runtime//adt
  (Statement Any)
  ($_ _.then
      @tuple//left
      @tuple//right
      @sum//get
      ))

(def: full_64_bits
  Literal
  (_.manual "0xFFFFFFFFFFFFFFFF"))

(runtime: (i64//64 input)
  (with_vars [capped]
    (_.cond (list [(|> input (_.> full_64_bits))
                   (_.return (|> input (_.bit_and full_64_bits) i64//64))]
                  [(|> input (_.> (: Literal (_.manual "0x7FFFFFFFFFFFFFFF"))))
                   ($_ _.then
                       (_.set (list capped)
                              (_.int/1 (|> (: Literal (_.manual "0x10000000000000000"))
                                           (_.- input))))
                       (_.if (|> capped (_.<= (: Literal (_.manual "9223372036854775807L"))))
                         (_.return (|> capped (_.* (_.int -1))))
                         (_.return (: Literal (_.manual "-9223372036854775808L")))))])
            (_.return input))))

(runtime: (i64//logic_right_shift param subject)
  (let [mask (|> (_.int +1)
                 (_.bit_shl (_.- param (_.int +64)))
                 (_.- (_.int +1)))]
    (_.return (|> subject
                  (_.bit_shr param)
                  (_.bit_and mask)))))

(def: runtime//i64
  (Statement Any)
  ($_ _.then
      @i64//64
      @i64//logic_right_shift
      ))

(runtime: (f64//decode input)
  (with_vars [ex]
    (_.try
     (_.return (..some (_.float/1 input)))
     (list [(list (_.var "Exception")) ex
            (_.return ..none)]))))

(def: runtime//f64
  (Statement Any)
  ($_ _.then
      @f64//decode
      ))

(runtime: (text//index subject param start)
  (with_vars [idx]
    ($_ _.then
        (_.set (list idx) (|> subject (_.do "find" (list param start))))
        (_.if (_.= (_.int -1) idx)
          (_.return ..none)
          (_.return (..some idx))))))

(def: inc (|>> (_.+ (_.int +1))))

(def: (within? top value)
  (-> (Expression Any) (Expression Any) (Computation Any))
  (_.and (|> value (_.>= (_.int +0)))
         (|> value (_.< top))))

(runtime: (text//clip @text @from @to)
  (_.return (|> @text (_.slice @from (inc @to)))))

(runtime: (text//char idx text)
  (_.if (|> idx (within? (_.len/1 text)))
    (_.return (..some (_.ord/1 (|> text (_.slice idx (inc idx))))))
    (_.return ..none)))

(def: runtime//text
  (Statement Any)
  ($_ _.then
      @text//index
      @text//clip
      @text//char
      ))

(def: runtime
  (Statement Any)
  ($_ _.then
      runtime//lux
      runtime//adt
      runtime//i64
      runtime//f64
      runtime//text
      runtime//io
      ))

(def: #export artifact
  ..prefix)

(def: #export generate
  (Operation [Registry Output])
  (/////generation.with_buffer
    (do ///////phase.monad
      [_ (/////generation.execute! ..runtime)
       _ (/////generation.save! ..prefix ..runtime)]
      (wrap [(|> artifact.empty
                 artifact.resource
                 product.right)
             (row.row ["0"
                       (|> ..runtime
                           _.code
                           (\ encoding.utf8 encode))])]))))
