(.module:
  [lux (#- inc)
   ["." meta]
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." function]
    ["<>" parser
     ["<.>" code]]]
   [data
    ["." product]
    ["." text ("#\." hash)
     ["%" format (#+ format)]
     ["." encoding]]
    [collection
     ["." list ("#\." functor)]
     ["." row]]]
   ["." macro
    [syntax (#+ syntax:)]
    ["." code]]
   [math
    [number (#+ hex)
     ["." i64]]]
   ["@" target
    ["_" python (#+ Expression SVar Computation Literal Statement)]]]
  ["." /// #_
   ["#." reference]
   ["//#" /// #_
    ["$" version]
    ["#." synthesis (#+ Synthesis)]
    ["#." generation]
    ["//#" ///
     ["#." phase]
     [reference
      [variable (#+ Register)]]
     [meta
      [archive (#+ Output Archive)
       ["." artifact (#+ Registry)]]]]]])

(template [<name> <base>]
  [(type: #export <name>
     (<base> Register (Expression Any) (Statement Any)))]

  [Operation /////generation.Operation]
  [Phase /////generation.Phase]
  [Handler /////generation.Handler]
  [Bundle /////generation.Bundle]
  )

(type: #export Phase!
  (-> Phase Archive Synthesis (Operation (Statement Any))))

(type: #export (Generator! i)
  (-> Phase! Phase Archive i (Operation (Statement Any))))

(type: #export (Generator i)
  (-> Phase Archive i (Operation (Expression Any))))

(def: prefix
  "LuxRuntime")

(def: #export
  unit
  (_.unicode /////synthesis.unit))

(def: (flag value)
  (-> Bit Literal)
  (if value
    ..unit
    _.none))

(def: (variant' tag last? value)
  (-> (Expression Any) (Expression Any) (Expression Any) Literal)
  (_.tuple (list tag last? value)))

(def: #export (variant tag last? value)
  (-> Nat Bit (Expression Any) Literal)
  (variant' (_.int (.int tag))
            (flag last?)
            value))

(def: #export none
  Literal
  (..variant 0 #0 unit))

(def: #export some
  (-> (Expression Any) Literal)
  (..variant 1 #1))

(def: #export left
  (-> (Expression Any) Literal)
  (..variant 0 #0))

(def: #export right
  (-> (Expression Any) Literal)
  (..variant 1 #1))

(def: (runtime_name name)
  (-> Text SVar)
  (let [identifier (format ..prefix
                           "_" (%.nat $.version)
                           "_" (%.nat (text\hash name)))]
    (_.var identifier)))

(def: (feature name definition)
  (-> SVar (-> SVar (Statement Any)) (Statement Any))
  (definition name))

(syntax: #export (with_vars {vars (<code>.tuple (<>.some <code>.local_identifier))}
                   body)
  (do {! meta.monad}
    [ids (monad.seq ! (list.repeat (list.size vars) meta.count))]
    (wrap (list (` (let [(~+ (|> vars
                                 (list.zip/2 ids)
                                 (list\map (function (_ [id var])
                                             (list (code.local_identifier var)
                                                   (` (_.var (~ (code.text (format "v" (%.nat id)))))))))
                                 list.concat))]
                     (~ body)))))))

(syntax: (runtime: {declaration (<>.or <code>.local_identifier
                                       (<code>.form (<>.and <code>.local_identifier
                                                            (<>.some <code>.local_identifier))))}
           code)
  (case declaration
    (#.Left name)
    (macro.with_gensyms [g!_]
      (let [nameC (code.local_identifier name)
            code_nameC (code.local_identifier (format "@" name))
            runtime_nameC (` (runtime_name (~ (code.text name))))]
        (wrap (list (` (def: #export (~ nameC) SVar (~ runtime_nameC)))
                    (` (def: (~ code_nameC)
                         (Statement Any)
                         (..feature (~ runtime_nameC)
                                    (function ((~ g!_) (~ g!_))
                                      (_.set (list (~ g!_)) (~ code))))))))))
    
    (#.Right [name inputs])
    (macro.with_gensyms [g!_]
      (let [nameC (code.local_identifier name)
            code_nameC (code.local_identifier (format "@" name))
            runtime_nameC (` (runtime_name (~ (code.text name))))
            inputsC (list\map code.local_identifier inputs)
            inputs_typesC (list\map (function.constant (` (_.Expression Any)))
                                    inputs)]
        (wrap (list (` (def: #export ((~ nameC) (~+ inputsC))
                         (-> (~+ inputs_typesC) (Computation Any))
                         (_.apply/* (~ runtime_nameC) (list (~+ inputsC)))))
                    (` (def: (~ code_nameC)
                         (Statement Any)
                         (..feature (~ runtime_nameC)
                                    (function ((~ g!_) (~ g!_))
                                      (..with_vars [(~+ inputsC)]
                                        (_.def (~ g!_) (list (~+ inputsC))
                                               (~ code)))))))))))))

(runtime: (lux//try op)
  (with_vars [exception]
    (_.try (_.return (..right (_.apply/* op (list ..unit))))
           (list [(list (_.var "Exception")) exception
                  (_.return (..left (_.str/1 exception)))]))))

(runtime: (lux//program_args program_args)
  (with_vars [inputs value]
    ($_ _.then
        (_.set (list inputs) ..none)
        (<| (_.for_in value (_.apply/* (_.var "reversed") (list program_args)))
            (_.set (list inputs)
                   (..some (_.list (list value inputs)))))
        (_.return inputs))))

(runtime: (lux//exec code globals)
  ($_ _.then
      (_.exec code (#.Some globals))
      (_.return ..unit)))

(def: runtime//lux
  (Statement Any)
  ($_ _.then
      @lux//try
      @lux//program_args
      @lux//exec
      ))

(runtime: (io//log! message)
  ($_ _.then
      (_.print message)
      (_.return ..unit)))

(runtime: (io//throw! message)
  (_.raise (_.Exception/1 message)))

(runtime: (io//current_time! _)
  ($_ _.then
      (_.import "time")
      (_.return (|> (_.var "time")
                    (_.do "time" (list))
                    (_.* (_.int +1,000))
                    _.int/1))))

(def: runtime//io
  (Statement Any)
  ($_ _.then
      @io//log!
      @io//throw!
      @io//current_time!
      ))

(def: last_index
  (|>> _.len/1 (_.- (_.int +1))))

(with_expansions [<recur> (as_is ($_ _.then
                                     (_.set (list lefts) (_.- last_index_right lefts))
                                     (_.set (list tuple) (_.nth last_index_right tuple))))]
  (runtime: (tuple//left lefts tuple)
    (with_vars [last_index_right]
      (_.while (_.bool true)
               ($_ _.then
                   (_.set (list last_index_right) (..last_index tuple))
                   (_.if (_.> lefts last_index_right)
                     ## No need for recursion
                     (_.return (_.nth lefts tuple))
                     ## Needs recursion
                     <recur>))
               #.None)))

  (runtime: (tuple//right lefts tuple)
    (with_vars [last_index_right right_index]
      (_.while (_.bool true)
               ($_ _.then
                   (_.set (list last_index_right) (..last_index tuple))
                   (_.set (list right_index) (_.+ (_.int +1) lefts))
                   (_.cond (list [(_.= last_index_right right_index)
                                  (_.return (_.nth right_index tuple))]
                                 [(_.> last_index_right right_index)
                                  ## Needs recursion.
                                  <recur>])
                           (_.return (_.slice_from right_index tuple))))
               #.None))))

(runtime: (sum//get sum wantsLast wantedTag)
  (let [no_match! (_.return _.none)
        sum_tag (_.nth (_.int +0) sum)
        sum_flag (_.nth (_.int +1) sum)
        sum_value (_.nth (_.int +2) sum)
        is_last? (_.= ..unit sum_flag)
        test_recursion! (_.if is_last?
                          ## Must recurse.
                          ($_ _.then
                              (_.set (list wantedTag) (_.- sum_tag wantedTag))
                              (_.set (list sum) sum_value))
                          no_match!)]
    (_.while (_.bool true)
             (_.cond (list [(_.= wantedTag sum_tag)
                            (_.if (_.= wantsLast sum_flag)
                              (_.return sum_value)
                              test_recursion!)]

                           [(_.< wantedTag sum_tag)
                            test_recursion!]

                           [(_.= ..unit wantsLast)
                            (_.return (variant' (_.- wantedTag sum_tag) sum_flag sum_value))])

                     no_match!)
             #.None)))

(def: runtime//adt
  (Statement Any)
  ($_ _.then
      @tuple//left
      @tuple//right
      @sum//get
      ))

(def: i64//+limit (_.manual "+0x7FFFFFFFFFFFFFFF"))
(def: i64//-limit (_.manual "-0x8000000000000000"))
(def: i64//+iteration (_.manual "+0x10000000000000000"))
(def: i64//-iteration (_.manual "-0x10000000000000000"))
(def: i64//+cap (_.manual "+0x8000000000000000"))
(def: i64//-cap (_.manual "-0x8000000000000001"))

(runtime: (i64//64 input)
  (with_vars [temp]
    (`` (<| (~~ (template [<scenario> <iteration> <cap> <entrance>]
                  [(_.if (|> input <scenario>)
                     ($_ _.then
                         (_.set (list temp) (_.% <iteration> input))
                         (_.return (_.? (|> temp <scenario>)
                                        (|> temp (_.- <cap>) (_.+ <entrance>))
                                        temp))))]

                  [(_.> ..i64//+limit) ..i64//+iteration ..i64//+cap ..i64//-limit]
                  [(_.< ..i64//-limit) ..i64//-iteration ..i64//-cap ..i64//+limit]
                  ))
            (_.return (for {@.python input}
                           ## This +- is only necessary to guarantee that values within the limits are always longs in Python 2
                           (|> input (_.+ ..i64//+limit) (_.- ..i64//+limit))))))))

(def: as_nat
  (_.% ..i64//+iteration))

(runtime: (i64//left_shift param subject)
  (_.return (|> subject
                (_.bit_shl (_.% (_.int +64) param))
                ..i64//64)))

(runtime: (i64//right_shift param subject)
  ($_ _.then
      (_.set (list param) (_.% (_.int +64) param))
      (_.return (_.? (_.= (_.int +0) param)
                     subject
                     (|> subject
                         ..as_nat
                         (_.bit_shr param))))))

(runtime: (i64//division param subject)
  (with_vars [floored]
    ($_ _.then
        (_.set (list floored) (_.// param subject))
        (_.return (let [potentially_floored? (_.< (_.int +0) floored)
                        inexact? (|> subject
                                     (_.% param)
                                     (_.= (_.int +0))
                                     _.not)]
                    (_.? (_.and potentially_floored?
                                inexact?)
                         (_.+ (_.int +1) floored)
                         floored))))))

(runtime: (i64//remainder param subject)
  (_.return (_.- (|>  subject (..i64//division param) (_.* param))
                 subject)))

(template [<runtime> <host>]
  [(runtime: (<runtime> left right)
     (_.return (..i64//64 (<host> (..as_nat left) (..as_nat right)))))]

  [i64//and _.bit_and]
  [i64//or _.bit_or]
  [i64//xor _.bit_xor]
  )

(def: python_version
  (Expression Any)
  (|> (_.__import__/1 (_.unicode "sys"))
      (_.the "version_info")
      (_.the "major")))

(runtime: (i64//char value)
  (_.return (_.? (_.= (_.int +3) ..python_version)
                 (_.chr/1 value)
                 (_.unichr/1 value))))

(def: runtime//i64
  (Statement Any)
  ($_ _.then
      @i64//64
      @i64//left_shift
      @i64//right_shift
      @i64//division
      @i64//remainder
      @i64//and
      @i64//or
      @i64//xor
      @i64//char
      ))

(runtime: (f64//decode input)
  (with_vars [ex]
    (_.try
     (_.return (..some (_.float/1 input)))
     (list [(list (_.var "Exception")) ex
            (_.return ..none)]))))

(def: runtime//f64
  (Statement Any)
  ($_ _.then
      @f64//decode
      ))

(runtime: (text//index start param subject)
  (with_vars [idx]
    ($_ _.then
        (_.set (list idx) (|> subject (_.do "find" (list param start))))
        (_.return (_.? (_.= (_.int -1) idx)
                       ..none
                       (..some (..i64//64 idx)))))))

(def: inc
  (|>> (_.+ (_.int +1))))

(def: (within? top value)
  (-> (Expression Any) (Expression Any) (Computation Any))
  (_.and (|> value (_.>= (_.int +0)))
         (|> value (_.< top))))

(runtime: (text//clip @offset @length @text)
  (_.return (|> @text (_.slice @offset (_.+ @offset @length)))))

(runtime: (text//char idx text)
  (_.if (|> idx (within? (_.len/1 text)))
    (_.return (|> text (_.slice idx (..inc idx)) _.ord/1 ..i64//64))
    (_.raise (_.Exception/1 (_.unicode "[Lux Error] Cannot get char from text.")))))

(def: runtime//text
  (Statement Any)
  ($_ _.then
      @text//index
      @text//clip
      @text//char
      ))

(runtime: (array//write idx value array)
  ($_ _.then
      (_.set (list (_.nth idx array)) value)
      (_.return array)))

(def: runtime//array
  (Statement Any)
  ($_ _.then
      @array//write
      ))

(def: runtime
  (Statement Any)
  ($_ _.then
      runtime//lux
      runtime//io
      runtime//adt
      runtime//i64
      runtime//f64
      runtime//text
      runtime//array
      ))

(def: #export artifact
  ..prefix)

(def: #export generate
  (Operation [Registry Output])
  (/////generation.with_buffer
    (do ///////phase.monad
      [_ (/////generation.execute! ..runtime)
       _ (/////generation.save! ..prefix ..runtime)]
      (wrap [(|> artifact.empty
                 artifact.resource
                 product.right)
             (row.row ["0"
                       (|> ..runtime
                           _.code
                           (\ encoding.utf8 encode))])]))))
