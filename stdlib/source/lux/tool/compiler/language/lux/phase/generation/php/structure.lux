(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [data
    [collection
     ["." list]]]
   [target
    ["_" php (#+ Expression)]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Generator)]
   ["#." primitive]
   ["///#" //// #_
    [analysis (#+ Variant Tuple)]
    ["#." synthesis (#+ Synthesis)]
    ["//#" /// #_
     ["#." phase ("#\." monad)]]]])

(def: #export (tuple expression archive elemsS+)
  (Generator (Tuple Synthesis))
  (case elemsS+
    #.Nil
    (///////phase\wrap (//primitive.text /////synthesis.unit))

    (#.Cons singletonS #.Nil)
    (expression archive singletonS)

    _
    (let [size (_.int (.int (list.size elemsS+)))]
      (|> elemsS+
          (monad.map ///////phase.monad (expression archive))
          (///////phase\map (|>> _.array/*
                                 (//runtime.tuple//make size)))))))

(def: #export (variant expression archive [lefts right? valueS])
  (Generator (Variant Synthesis))
  (let [tag (if right?
              (inc lefts)
              lefts)]
    (///////phase\map (//runtime.variant tag right?)
                      (expression archive valueS))))
