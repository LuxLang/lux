(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." function]
    ["<>" parser
     ["<s>" synthesis (#+ Parser)]]]
   [data
    [collection
     ["." dictionary]
     ["." list]]]
   [target
    ["_" js (#+ Var Expression)]]]
  ["." // #_
   ["#." common (#+ custom)]
   ["//#" /// #_
    ["/" bundle]
    ["/#" // #_
     ["." extension]
     [generation
      [extension (#+ Nullary Unary Binary Trinary
                     nullary unary binary trinary)]
      ["//" js #_
       ["#." runtime (#+ Operation Phase Handler Bundle
                         with-vars)]]]
     ["/#" // #_
      ["." generation]
      ["//#" /// #_
       ["#." phase]]]]]])

(def: array::new
  (Unary Expression)
  (|>> (_.the //runtime.i64-low-field) list (_.new (_.var "Array"))))

(def: array::length
  (Unary Expression)
  (|>> (_.the "length") //runtime.i64//from-number))

(def: (array::read [indexG arrayG])
  (Binary Expression)
  (_.at (_.the //runtime.i64-low-field indexG)
        arrayG))

(def: (array::write [indexG valueG arrayG])
  (Trinary Expression)
  (//runtime.array//write indexG valueG arrayG))

(def: (array::delete [indexG arrayG])
  (Binary Expression)
  (//runtime.array//delete indexG arrayG))

(def: array
  Bundle
  (<| (/.prefix "array")
      (|> /.empty
          (/.install "new" (unary array::new))
          (/.install "length" (unary array::length))
          (/.install "read" (binary array::read))
          (/.install "write" (trinary array::write))
          (/.install "delete" (binary array::delete))
          )))

(def: object::new
  (custom
   [($_ <>.and <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [constructorS inputsS])
      (do {@ ////////phase.monad}
        [constructorG (phase archive constructorS)
         inputsG (monad.map @ (phase archive) inputsS)]
        (wrap (_.new constructorG inputsG))))]))

(def: object::get
  Handler
  (custom
   [($_ <>.and <s>.text <s>.any)
    (function (_ extension phase archive [fieldS objectS])
      (do ////////phase.monad
        [objectG (phase archive objectS)]
        (wrap (_.the fieldS objectG))))]))

(def: object::do
  Handler
  (custom
   [($_ <>.and <s>.text <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [methodS objectS inputsS])
      (do {@ ////////phase.monad}
        [objectG (phase archive objectS)
         inputsG (monad.map @ (phase archive) inputsS)]
        (wrap (_.do methodS inputsG objectG))))]))

(template [<!> <?> <unit>]
  [(def: <!> (Nullary Expression) (function.constant <unit>))
   (def: <?> (Unary Expression) (_.= <unit>))]

  [object::null object::null? _.null]
  [object::undefined object::undefined? _.undefined]
  )

(def: object
  Bundle
  (<| (/.prefix "object")
      (|> /.empty
          (/.install "new" object::new)
          (/.install "get" object::get)
          (/.install "do" object::do)
          (/.install "null" (nullary object::null))
          (/.install "null?" (unary object::null?))
          (/.install "undefined" (nullary object::undefined))
          (/.install "undefined?" (unary object::undefined?))
          )))

(def: js::constant
  (custom
   [<s>.text
    (function (_ extension phase archive name)
      (do ////////phase.monad
        []
        (wrap (_.var name))))]))

(def: js::apply
  (custom
   [($_ <>.and <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [abstractionS inputsS])
      (do {@ ////////phase.monad}
        [abstractionG (phase archive abstractionS)
         inputsG (monad.map @ (phase archive) inputsS)]
        (wrap (_.apply/* abstractionG inputsG))))]))

(def: js::function
  (custom
   [($_ <>.and <s>.i64 <s>.any)
    (function (_ extension phase archive [arity abstractionS])
      (do {@ ////////phase.monad}
        [abstractionG (phase archive abstractionS)
         #let [variable (: (-> Text (Operation Var))
                           (|>> generation.gensym
                                (:: @ map _.var)))]
         g!inputs (monad.map @ (function (_ _) (variable "input"))
                             (list.repeat (.nat arity) []))
         g!abstraction (variable "abstraction")]
        (wrap (_.closure g!inputs
                         ($_ _.then
                             (_.define g!abstraction abstractionG)
                             (_.return (case (.nat arity)
                                         0 (_.apply/1 g!abstraction //runtime.unit)
                                         1 (_.apply/* g!abstraction g!inputs)
                                         _ (_.apply/1 g!abstraction (_.array g!inputs)))))))))]))

(def: #export bundle
  Bundle
  (<| (/.prefix "js")
      (|> /.empty
          (/.install "constant" js::constant)
          (/.install "apply" js::apply)
          (/.install "type-of" (unary _.type-of))
          (/.install "function" js::function)
          (dictionary.merge ..array)
          (dictionary.merge ..object)
          )))
