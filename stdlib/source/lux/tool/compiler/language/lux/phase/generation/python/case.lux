(.module:
  [lux (#- case let if)
   [abstract
    [monad (#+ do)]]
   [control
    ["ex" exception (#+ exception:)]]
   [data
    ["." text
     ["%" format (#+ format)]]
    [number
     ["n" nat]
     ["i" int]]
    [collection
     ["." list ("#\." functor fold)]
     ["." set]]]
   [target
    ["_" python (#+ Expression SVar Statement)]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Generator)]
   ["#." primitive]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     [synthesis
      ["." case]]
     ["/#" // #_
      ["#." synthesis (#+ Synthesis Path)]
      ["#." generation]
      ["//#" /// #_
       ["#." reference (#+ Register)]
       ["#." phase ("#\." monad)]
       [meta
        [archive (#+ Archive)]]]]]]])

(def: #export register
  (///reference.local _.var))

(def: #export capture
  (///reference.foreign _.var))

(def: #export (let generate archive [valueS register bodyS])
  (Generator [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueO (generate archive valueS)
     bodyO (generate archive bodyS)]
    ## TODO: Find some way to do 'let' without paying the price of the closure.
    (wrap (_.apply/* (_.lambda (list (..register register))
                               bodyO)
                     (list valueO)))))

(def: #export (record-get generate archive [valueS pathP])
  (Generator [Synthesis (List (Either Nat Nat))])
  (do ///////phase.monad
    [valueO (generate archive valueS)]
    (wrap (list\fold (function (_ side source)
                       (.let [method (.case side
                                       (^template [<side> <accessor>]
                                         [(<side> lefts)
                                          (<accessor> (_.int (.int lefts)))])
                                       ([#.Left //runtime.tuple//left]
                                        [#.Right //runtime.tuple//right]))]
                         (method source)))
                     valueO
                     pathP))))

(def: #export (if generate archive [testS thenS elseS])
  (Generator [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [testO (generate archive testS)
     thenO (generate archive thenS)
     elseO (generate archive elseS)]
    (wrap (_.? testO thenO elseO))))

(def: @savepoint (_.var "lux_pm_savepoint"))
(def: @cursor (_.var "lux_pm_cursor"))
(def: @temp (_.var "lux_pm_temp"))

(def: (push! value)
  (-> (Expression Any) (Statement Any))
  (_.statement (|> @cursor (_.do "append" (list value)))))

(def: peek-and-pop
  (Expression Any)
  (|> @cursor (_.do "pop" (list))))

(def: pop!
  (Statement Any)
  (_.statement ..peek-and-pop))

(def: peek
  (Expression Any)
  (_.nth (_.int -1) @cursor))

(def: save!
  (Statement Any)
  (.let [cursor (_.slice-from (_.int +0) @cursor)]
    (_.statement (|> @savepoint (_.do "append" (list cursor))))))

(def: restore!
  (Statement Any)
  (_.set (list @cursor) (|> @savepoint (_.do "pop" (list)))))

(def: fail-pm! _.break)

(def: (multi-pop! pops)
  (-> Nat (Statement Any))
  (_.delete (_.slice-from (_.int (i.* -1 (.int pops))) @cursor)))

(template [<name> <flag> <prep>]
  [(def: (<name> simple? idx)
     (-> Bit Nat (Statement Any))
     ($_ _.then
         (_.set (list @temp) (|> idx <prep> .int _.int (//runtime.sum//get ..peek <flag>)))
         (.if simple?
           (_.when (_.= _.none @temp)
                   fail-pm!)
           (_.if (_.= _.none @temp)
             fail-pm!
             (..push! @temp))
           )))]

  [left-choice  _.none        (<|)]
  [right-choice (_.string "") inc]
  )

(def: (alternation pre! post!)
  (-> (Statement Any) (Statement Any) (Statement Any))
  ($_ _.then
      (_.while (_.bool true)
               ($_ _.then
                   ..save!
                   pre!))
      ($_ _.then
          ..restore!
          post!)))

(def: (pattern-matching' generate archive pathP)
  (-> Phase Archive Path (Operation (Statement Any)))
  (.case pathP
    (^ (/////synthesis.path/then bodyS))
    (///////phase\map _.return (generate archive bodyS))

    #/////synthesis.Pop
    (///////phase\wrap ..pop!)

    (#/////synthesis.Bind register)
    (///////phase\wrap (_.set (list (..register register)) ..peek))

    (^template [<tag> <format>]
      [(^ (<tag> value))
       (///////phase\wrap (_.when (|> value <format> (_.= ..peek) _.not)
                                  fail-pm!))])
    ([/////synthesis.path/bit  //primitive.bit]
     [/////synthesis.path/i64  //primitive.i64]
     [/////synthesis.path/f64  //primitive.f64]
     [/////synthesis.path/text //primitive.text])

    (^template [<complex> <simple> <choice>]
      [(^ (<complex> idx))
       (///////phase\wrap (<choice> false idx))

       (^ (<simple> idx nextP))
       (|> nextP
           (pattern-matching' generate archive)
           (///////phase\map (_.then (<choice> true idx))))])
    ([/////synthesis.side/left  /////synthesis.simple-left-side  ..left-choice]
     [/////synthesis.side/right /////synthesis.simple-right-side ..right-choice])

    (^ (/////synthesis.member/left 0))
    (///////phase\wrap (|> ..peek (_.nth (_.int +0)) ..push!))
    
    (^template [<pm> <getter>]
      [(^ (<pm> lefts))
       (///////phase\wrap (|> ..peek (<getter> (_.int (.int lefts))) ..push!))])
    ([/////synthesis.member/left  //runtime.tuple//left]
     [/////synthesis.member/right //runtime.tuple//right])

    (^ (/////synthesis.!bind-top register thenP))
    (do ///////phase.monad
      [then! (pattern-matching' generate archive thenP)]
      (///////phase\wrap ($_ _.then
                             (_.set (list (..register register)) ..peek-and-pop)
                             then!)))

    (^ (/////synthesis.!multi-pop nextP))
    (.let [[extra-pops nextP'] (case.count-pops nextP)]
      (do ///////phase.monad
        [next! (pattern-matching' generate archive nextP')]
        (///////phase\wrap ($_ _.then
                               (..multi-pop! (n.+ 2 extra-pops))
                               next!))))

    (^template [<tag> <combinator>]
      [(^ (<tag> preP postP))
       (do ///////phase.monad
         [pre! (pattern-matching' generate archive preP)
          post! (pattern-matching' generate archive postP)]
         (wrap (<combinator> pre! post!)))])
    ([/////synthesis.path/seq _.then]
     [/////synthesis.path/alt ..alternation])))

(def: (pattern-matching generate archive pathP)
  (-> Phase Archive Path (Operation (Statement Any)))
  (do ///////phase.monad
    [pattern-matching! (pattern-matching' generate archive pathP)]
    (wrap ($_ _.then
              (_.while (_.bool true)
                       pattern-matching!)
              (_.raise (_.Exception/1 (_.string case.pattern-matching-error)))))))

(def: (gensym prefix)
  (-> Text (Operation SVar))
  (///////phase\map (|>> %.nat (format prefix) _.var) /////generation.next))

(def: #export (case generate archive [valueS pathP])
  (Generator [Synthesis Path])
  (do ///////phase.monad
    [initG (generate archive valueS)
     pattern-matching! (pattern-matching generate archive pathP)
     @case (..gensym "case")
     @init (..gensym "init")
     #let [@dependencies+ (|> (case.storage pathP)
                              (get@ #case.dependencies)
                              set.to-list
                              (list\map (function (_ variable)
                                          (.case variable
                                            (#///////reference.Local register)
                                            (..register register)
                                            
                                            (#///////reference.Foreign register)
                                            (..capture register)))))]
     #let [directive (_.def @case (list& @init @dependencies+)
                            ($_ _.then
                                (_.set (list @cursor) (_.list (list @init)))
                                (_.set (list @savepoint) (_.list (list)))
                                pattern-matching!))]
     _ (/////generation.execute! directive)
     _ (/////generation.save! (_.code @case) directive)]
    (wrap (_.apply/* @case (list& initG @dependencies+)))))
