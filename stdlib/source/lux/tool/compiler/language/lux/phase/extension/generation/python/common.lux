(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." function]]
   [data
    ["." product]
    [collection
     ["." dictionary]]]
   [math
    [number
     ["f" frac]]]
   [target
    ["_" python (#+ Expression)]]]
  [////
   ["/" bundle]
   [//
    [generation
     [extension (#+ Nullary Unary Binary Trinary
                    nullary unary binary trinary)]
     ["//" python #_
      ["#." runtime (#+ Operation Phase Handler Bundle)]]]]])

(def: lux_procs
  Bundle
  (|> /.empty
      (/.install "is" (binary (product.uncurry _.is)))
      (/.install "try" (unary //runtime.lux//try))))

(def: i64_procs
  Bundle
  (<| (/.prefix "i64")
      (|> /.empty
          (/.install "and" (binary (product.uncurry _.bit_and)))
          (/.install "or" (binary (product.uncurry _.bit_or)))
          (/.install "xor" (binary (product.uncurry _.bit_xor)))
          (/.install "left-shift" (binary (function.compose //runtime.i64//64 (product.uncurry _.bit_shl))))
          (/.install "logical-right-shift" (binary (product.uncurry //runtime.i64//logic_right_shift)))
          (/.install "arithmetic-right-shift" (binary (product.uncurry _.bit_shr)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "+" (binary (product.uncurry _.+)))
          (/.install "-" (binary (product.uncurry _.-)))
          (/.install "*" (binary (product.uncurry _.*)))
          (/.install "/" (binary (product.uncurry _./)))
          (/.install "%" (binary (product.uncurry _.%)))
          (/.install "f64" (unary _.float/1))
          (/.install "char" (unary _.chr/1))
          )))

(def: frac_procs
  Bundle
  (<| (/.prefix "frac")
      (|> /.empty
          (/.install "+" (binary (product.uncurry _.+)))
          (/.install "-" (binary (product.uncurry _.-)))
          (/.install "*" (binary (product.uncurry _.*)))
          (/.install "/" (binary (product.uncurry _./)))
          (/.install "%" (binary (product.uncurry _.%)))
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "int" (unary _.int/1))
          (/.install "encode" (unary _.repr/1))
          (/.install "decode" (unary //runtime.frac//decode)))))

(def: (text//clip [paramO extraO subjectO])
  (Trinary (Expression Any))
  (//runtime.text//clip subjectO paramO extraO))

(def: (text//index [startO partO textO])
  (Trinary (Expression Any))
  (//runtime.text//index textO partO startO))

(def: text_procs
  Bundle
  (<| (/.prefix "text")
      (|> /.empty
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "concat" (binary (product.uncurry _.+)))
          (/.install "index" (trinary text//index))
          (/.install "size" (unary _.len/1))
          (/.install "char" (binary (product.uncurry //runtime.text//char)))
          (/.install "clip" (trinary text//clip))
          )))

(def: io_procs
  Bundle
  (<| (/.prefix "io")
      (|> /.empty
          (/.install "log" (unary //runtime.io//log!))
          (/.install "error" (unary //runtime.io//throw!))
          (/.install "exit" (unary //runtime.io//exit!))
          (/.install "current-time" (nullary (function.constant (//runtime.io//current_time! //runtime.unit)))))))

(def: #export bundle
  Bundle
  (<| (/.prefix "lux")
      (|> lux_procs
          (dictionary.merge i64_procs)
          (dictionary.merge frac_procs)
          (dictionary.merge text_procs)
          (dictionary.merge io_procs)
          )))
