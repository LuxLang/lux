(.module:
  [lux (#- function)
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." product]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor fold)]]]
   [target
    ["_" ruby (#+ LVar Expression Statement)]]]
  ["." // #_
   [runtime (#+ Operation Phase Generator Phase! Generator!)]
   ["#." reference]
   ["#." case]
   ["#." loop]
   ["/#" // #_
    ["#." reference]
    ["//#" /// #_
     [analysis (#+ Variant Tuple Environment Abstraction Application Analysis)]
     [synthesis (#+ Synthesis)]
     ["#." generation (#+ Context)]
     ["//#" /// #_
      [arity (#+ Arity)]
      ["#." phase]
      [reference
       [variable (#+ Register Variable)]]
      [meta
       [archive (#+ Archive)
        ["." artifact]]]]]]])

(def: #export (apply expression archive [functionS argsS+])
  (Generator (Application Synthesis))
  (do {! ///////phase.monad}
    [functionO (expression archive functionS)
     argsO+ (monad.map ! (expression archive) argsS+)]
    (wrap (_.do "call" argsO+ functionO))))

(def: #export capture
  (-> Register LVar)
  (|>> (///reference.foreign //reference.system) :assume))

(def: (with_closure inits function_definition)
  (-> (List Expression) Expression Expression)
  (case inits
    #.Nil
    function_definition

    _
    (|> function_definition
        _.return
        (_.lambda #.None
                  (|> (list.enumeration inits)
                      (list\map (|>> product.left ..capture))))
        (_.do "call" inits))))

(def: input
  (|>> inc //case.register))

(def: #export (function expression archive [environment arity bodyS])
  (Generator (Abstraction Synthesis))
  (do {! ///////phase.monad}
    [[function_name bodyO] (/////generation.with_new_context archive
                             (do !
                               [function_name (\ ! map ///reference.artifact
                                                 (/////generation.context archive))]
                               (/////generation.with_anchor (_.local function_name)
                                 (expression archive bodyS))))
     closureO+ (monad.map ! (expression archive) environment)
     #let [function_name (///reference.artifact function_name)
           @curried (_.local "curried")
           arityO (|> arity .int _.int)
           limitO (|> arity dec .int _.int)
           @num_args (_.local "num_args")
           @self (_.local function_name)
           initialize_self! (_.set (list (//case.register 0)) @self)
           initialize! (list\fold (.function (_ post pre!)
                                    ($_ _.then
                                        pre!
                                        (_.set (list (..input post)) (_.nth (|> post .int _.int) @curried))))
                                  initialize_self!
                                  (list.indices arity))]]
    (wrap (with_closure closureO+
            (_.lambda (#.Some @self) (list (_.variadic @curried))
                      ($_ _.then
                          (_.set (list @num_args) (_.the "length" @curried))
                          (_.cond (list [(|> @num_args (_.= arityO))
                                         ($_ _.then
                                             initialize!
                                             (_.return bodyO))]
                                        [(|> @num_args (_.> arityO))
                                         (let [slice (.function (_ from to)
                                                       (_.array_range from to @curried))
                                               arity_args (_.splat (slice (_.int +0) limitO))
                                               output_func_args (_.splat (slice arityO @num_args))]
                                           (_.return (|> @self
                                                         (_.do "call" (list arity_args))
                                                         (_.do "call" (list output_func_args)))))])
                                  ## (|> @num_args (_.< arityO))
                                  (let [@missing (_.local "missing")]
                                    (_.return (_.lambda #.None (list (_.variadic @missing))
                                                        (_.return (|> @self
                                                                      (_.do "call" (list (_.splat (|> (_.array (list))
                                                                                                      (_.do "concat" (list @curried))
                                                                                                      (_.do "concat" (list @missing))))))))))))
                          ))))
    ))
