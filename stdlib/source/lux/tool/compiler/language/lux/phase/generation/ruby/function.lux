(.module:
  [lux (#- function)
   [abstract
    ["." monad (#+ do)]]
   [control
    pipe]
   [data
    ["." product]
    [collection
     ["." list ("#\." functor fold)]]]
   [target
    ["_" ruby (#+ Expression Statement)]]]
  ["." // #_
   [runtime (#+ Operation Phase Generator)]
   ["#." reference]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["//#" /// #_
     [analysis (#+ Variant Tuple Environment Abstraction Application Analysis)]
     [synthesis (#+ Synthesis)]
     ["#." generation]
     ["//#" /// #_
      [reference (#+ Register Variable)]
      [arity (#+ Arity)]
      ["#." phase]]]]])

(def: #export (apply generate archive [functionS argsS+])
  (Generator (Application Synthesis))
  (do {! ///////phase.monad}
    [functionO (generate archive functionS)
     argsO+ (monad.map ! (generate archive) argsS+)]
    (wrap (_.do "call" argsO+ functionO))))

(def: #export capture
  (///reference.foreign _.local))

(def: (with-closure inits function-definition)
  (-> (List (Expression Any)) (Expression Any) (Expression Any))
  (case inits
    #.Nil
    function-definition

    _
    (|> function-definition
        _.return
        (_.lambda #.None
                  (|> (list.enumeration inits)
                      (list\map (|>> product.left ..capture))))
        (_.do "call" inits))))

(def: input
  (|>> inc //case.register))

(def: #export (function generate archive [environment arity bodyS])
  (Generator (Abstraction Synthesis))
  (do {! ///////phase.monad}
    [[function-name bodyO] (/////generation.with-new-context
                             (do !
                               [function-name (:: ! map ///reference.artifact-name
                                                  /////generation.context)]
                               (/////generation.with-anchor (_.local function-name)
                                 (generate archive bodyS))))
     closureO+ (: (Operation (List (Expression Any)))
                  (monad.map ! (:: //reference.system variable) environment))
     #let [function-name (///reference.artifact-name function-name)
           @curried (_.local "curried")
           arityO (|> arity .int _.int)
           limitO (|> arity dec .int _.int)
           @num-args (_.local "num_args")
           @self (_.local function-name)
           initialize-self! (_.set (list (//case.register 0)) @self)
           initialize! (list\fold (.function (_ post pre!)
                                    ($_ _.then
                                        pre!
                                        (_.set (list (..input post)) (_.nth (|> post .int _.int) @curried))))
                                  initialize-self!
                                  (list.indices arity))]]
    (wrap (with-closure closureO+
            (_.lambda (#.Some @self) (list (_.variadic @curried))
                      ($_ _.then
                          (_.set (list @num-args) (_.the "length" @curried))
                          (_.cond (list [(|> @num-args (_.= arityO))
                                         ($_ _.then
                                             initialize!
                                             (_.return bodyO))]
                                        [(|> @num-args (_.> arityO))
                                         (let [slice (.function (_ from to)
                                                       (_.array-range from to @curried))
                                               arity-args (_.splat (slice (_.int +0) limitO))
                                               output-func-args (_.splat (slice arityO @num-args))]
                                           (_.return (|> @self
                                                         (_.do "call" (list arity-args))
                                                         (_.do "call" (list output-func-args)))))])
                                  ## (|> @num-args (_.< arityO))
                                  (let [@missing (_.local "missing")]
                                    (_.return (_.lambda #.None (list (_.variadic @missing))
                                                        (_.return (|> @self
                                                                      (_.do "call" (list (_.splat (|> (_.array (list))
                                                                                                      (_.do "concat" (list @curried))
                                                                                                      (_.do "concat" (list @missing))))))))))))
                          ))))
    ))
