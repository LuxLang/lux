(.module:
  [lux (#- Type type)
   [abstract
    ["." monad (#+ do)]]
   [data
    [number
     ["n" nat]]
    [collection
     ["." list ("#@." monoid)]]]
   [target
    [jvm
     ["." modifier (#+ Modifier) ("#@." monoid)]
     ["." field (#+ Field)]
     ["." method (#+ Method)]
     ["_" bytecode (#+ Bytecode)]
     ["." constant
      [pool (#+ Resource)]]
     [type (#+ Type)
      ["." category (#+ Class Value Return)]]]]]
  ["." //
   ["#." init]
   ["#." implementation]
   ["/#" // #_
    [field
     [constant
      ["#." arity]]
     [variable
      ["#." foreign]
      ["#." partial]]]
    ["/#" // #_
     [runtime (#+ Operation)]
     ["#." value]
     ["#." reference]
     [////
      [analysis (#+ Environment)]
      [///
       ["." arity (#+ Arity)]
       ["." phase]]]]]])

(def: #export (instance' foreign-setup class environment arity)
  (-> (List (Bytecode Any)) (Type Class) Environment Arity (Bytecode Any))
  ($_ _.compose
      (_.new class)
      _.dup
      (monad.seq _.monad foreign-setup)
      (///partial.new arity)
      (_.invokespecial class //init.name (//init.type environment arity))))

(def: #export (instance class environment arity)
  (-> (Type Class) Environment Arity (Operation (Bytecode Any)))
  (do phase.monad
    [foreign* (monad.map @ ////reference.variable environment)]
    (wrap (instance' foreign* class environment arity))))

(def: #export (method class environment arity)
  (-> (Type Class) Environment Arity (Resource Method))
  (let [after-this (: (-> Nat Nat)
                      (n.+ 1))
        environment-size (list.size environment)
        after-environment (: (-> Nat Nat)
                             (|>> after-this (n.+ environment-size)))
        after-arity (: (-> Nat Nat)
                       (|>> after-environment (n.+ 1)))]
    (method.method //.modifier //init.name
                   (//init.type environment arity)
                   (list)
                   (#.Some ($_ _.compose
                               ////reference.this
                               (//init.super environment-size arity)
                               (monad.map _.monad (function (_ register)
                                                    (///foreign.put class register (_.aload (after-this register))))
                                          (list.indices environment-size))
                               (monad.map _.monad (function (_ register)
                                                    (///partial.put class register (_.aload (after-arity register))))
                                          (list.indices (n.- ///arity.minimum arity)))
                               _.areturn)))))
