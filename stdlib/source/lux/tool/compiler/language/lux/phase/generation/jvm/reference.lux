(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [data
    [text
     ["%" format (#+ format)]]]
   [target
    [jvm
     ["_" bytecode (#+ Bytecode)]
     ["." type]
     [encoding
      ["." unsigned]]]]]
  ["." // #_
   [runtime (#+ Operation)]
   ["#." value]
   ["#." type]
   ["//#" /// #_
    [//
     ["." generation]
     [///
      ["#" phase ("operation@." monad)]
      ["." reference (#+ Register Variable)]]]]])

(def: #export this
  (Bytecode Any)
  _.aload-0)

(template [<name> <prefix>]
  [(def: #export <name>
     (-> Register Text)
     (|>> %.nat (format <prefix>)))]

  [foreign-name "f"]
  [partial-name "p"]
  )

(def: (foreign variable)
  (-> Register (Operation (Bytecode Any)))
  (do ////.monad
    [function-class generation.context]
    (wrap ($_ _.compose
              ..this
              (_.getfield (type.class function-class (list))
                          (..foreign-name variable)
                          //type.value)))))

(def: #export (variable variable)
  (-> Variable (Operation (Bytecode Any)))
  (case variable
    (#reference.Local variable)
    (operation@wrap (_.aload variable))
    
    (#reference.Foreign variable)
    (..foreign variable)))

(def: #export (constant name)
  (-> Name (Operation (Bytecode Any)))
  (do ////.monad
    [bytecode-name (generation.remember name)]
    (wrap (_.getstatic (type.class bytecode-name (list)) //value.field //type.value))))
