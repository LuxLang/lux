(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]]
  ["." / #_
   [runtime (#+ Phase)]
   ["#." primitive]
   ["#." structure]
   ["#." reference ("#@." system)]
   ["#." function]
   ["#." case]
   ["#." loop]
   ["//#" /// #_
    ["#." extension]
    ["/#" // #_
     [analysis (#+)]
     ["#." synthesis]
     ["//#" /// #_
      ["#." phase ("#@." monad)]]]]])

(def: #export (generate archive synthesis)
  Phase
  (case synthesis
    (^template [<tag> <generator>]
      (^ (<tag> value))
      (//////phase@wrap (<generator> value)))
    ([////synthesis.bit  /primitive.bit]
     [////synthesis.i64  /primitive.i64]
     [////synthesis.f64  /primitive.f64]
     [////synthesis.text /primitive.text])

    (^ (////synthesis.variant variantS))
    (/structure.variant generate archive variantS)

    (^ (////synthesis.tuple members))
    (/structure.tuple generate archive members)

    (#////synthesis.Reference value)
    (/reference@reference value)

    (^ (////synthesis.branch/case case))
    (/case.case generate archive case)

    (^ (////synthesis.branch/let let))
    (/case.let generate archive let)

    (^ (////synthesis.branch/if if))
    (/case.if generate archive if)

    (^ (////synthesis.loop/scope scope))
    (/loop.scope generate archive scope)

    (^ (////synthesis.loop/recur updates))
    (/loop.recur generate archive updates)

    (^ (////synthesis.function/abstraction abstraction))
    (/function.function generate archive abstraction)

    (^ (////synthesis.function/apply application))
    (/function.apply generate archive application)

    (#////synthesis.Extension extension)
    (///extension.apply archive generate extension)))
