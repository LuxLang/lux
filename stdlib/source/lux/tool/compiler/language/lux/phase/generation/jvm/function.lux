(.module:
  [lux (#- Type)
   [abstract
    ["." monad (#+ do)]]
   [data
    [number
     ["." i32]
     ["n" nat]]
    [collection
     ["." list ("#@." monoid functor)]
     ["." row]]
    ["." format #_
     ["#" binary]]]
   [target
    [jvm
     ["." version]
     ["." modifier (#+ Modifier) ("#@." monoid)]
     ["." field (#+ Field)]
     ["." method (#+ Method)]
     ["_" bytecode (#+ Label Bytecode) ("#@." monad)]
     ["." class (#+ Class)]
     ["." type (#+ Type)
      [category (#+ Return' Value')]
      ["." reflection]]
     ["." constant
      [pool (#+ Resource)]]
     [encoding
      ["." name (#+ External Internal)]
      ["." unsigned]]]]
   [tool
    [compiler
     [meta
      ["." archive (#+ Archive)]]]]]
  ["." / #_
   ["#." abstract]
   [field
    [constant
     ["#." arity]]
    [variable
     ["#." foreign]
     ["#." partial]]]
   [method
    ["#." init]
    ["#." new]
    ["#." implementation]
    ["#." reset]
    ["#." apply]]
   ["/#" // #_
    ["#." runtime (#+ Operation Phase Generator)]
    [////
     [analysis (#+ Environment)]
     [synthesis (#+ Synthesis Abstraction Apply)]
     ["." generation]
     [///
      ["." arity (#+ Arity)]
      ["." phase]
      [reference
       [variable (#+ Register)]]]]]])

(def: #export (with generate archive @begin class environment arity body)
  (-> Phase Archive Label External (Environment Synthesis) Arity (Bytecode Any)
      (Operation [(List (Resource Field))
                  (List (Resource Method))
                  (Bytecode Any)]))
  (let [classT (type.class class (list))
        fields (: (List (Resource Field))
                  (list& /arity.constant
                         (list@compose (/foreign.variables environment)
                                       (/partial.variables arity))))
        methods (: (List (Resource Method))
                   (list& (/init.method classT environment arity)
                          (/reset.method classT environment arity)
                          (if (arity.multiary? arity)
                            (|> (n.min arity /arity.maximum)
                                list.indices
                                (list@map (|>> inc (/apply.method classT environment arity @begin body)))
                                (list& (/implementation.method arity @begin body)))
                            (list (/implementation.method' //runtime.apply::name arity @begin body)))))]
    (do phase.monad
      [instance (/new.instance generate archive classT environment arity)]
      (wrap [fields methods instance]))))

(def: modifier
  (Modifier Class)
  ($_ modifier@compose
      class.public
      class.final))

(def: this-offset 1)

(def: internal
  (All [category]
    (-> (Type (<| Return' Value' category))
        Internal))
  (|>> type.reflection reflection.reflection name.internal))

(def: #export (abstraction generate archive [environment arity bodyS])
  (Generator Abstraction)
  (do phase.monad
    [@begin //runtime.forge-label
     [function-context bodyG] (generation.with-new-context archive
                                (generation.with-anchor [@begin ..this-offset]
                                  (generate archive bodyS)))
     #let [function-class (//runtime.class-name function-context)]
     [fields methods instance] (..with generate archive @begin function-class environment arity bodyG)
     class (phase.lift (class.class version.v6_0
                                    ..modifier
                                    (name.internal function-class)
                                    (..internal /abstract.class) (list)
                                    fields
                                    methods
                                    (row.row)))
     _ (generation.save! true ["" function-class]
                         [function-class
                          (format.run class.writer class)])]
    (wrap instance)))

(def: #export (apply generate archive [abstractionS inputsS])
  (Generator Apply)
  (do {@ phase.monad}
    [abstractionG (generate archive abstractionS)
     inputsG (monad.map @ (generate archive) inputsS)]
    (wrap ($_ _.compose
              abstractionG
              (|> inputsG
                  (list.split-all /arity.maximum)
                  (monad.map _.monad
                             (function (_ batchG)
                               ($_ _.compose
                                   (_.checkcast /abstract.class)
                                   (monad.seq _.monad batchG)
                                   (_.invokevirtual /abstract.class //runtime.apply::name (//runtime.apply::type (list.size batchG)))
                                   ))))
              ))))
