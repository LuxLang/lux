(.module:
  [lux (#- Scope)
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." product]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor)]
     ["." set]]]
   [math
    [number
     ["n" nat]]]
   [target
    ["_" lua (#+ Var Expression Statement)]]]
  ["." // #_
   [runtime (#+ Operation Phase Phase! Generator Generator!)]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["//#" /// #_
     ["."synthesis (#+ Scope Synthesis)]
     ["#." generation]
     ["//#" /// #_
      ["#." phase]
      [reference
       [variable (#+ Register)]]]]]])

(def: loop_name
  (-> Nat Var)
  (|>> %.nat (format "loop") _.var))

(def: #export (scope generate archive [start initsS+ bodyS])
  (Generator (Scope Synthesis))
  (case initsS+
    ## function/false/non-independent loop
    #.Nil
    (generate archive bodyS)

    ## true loop
    _
    (do {! ///////phase.monad}
      [@loop (\ ! map ..loop_name /////generation.next)
       initsO+ (monad.map ! (generate archive) initsS+)
       [loop_name bodyO] (/////generation.with_new_context archive
                           (do !
                             [@loop (\ ! map (|>> ///reference.artifact _.var)
                                       (/////generation.context archive))]
                             (/////generation.with_anchor @loop
                               (generate archive bodyS))))
       #let [@loop (_.var (///reference.artifact loop_name))
             locals (|> initsS+
                        list.enumeration
                        (list\map (|>> product.left (n.+ start) //case.register)))
             [directive instantiation] (: [Statement Expression]
                                          (case (|> (synthesis.path/then bodyS)
                                                    //case.dependencies
                                                    (set.from_list _.hash)
                                                    (set.difference (set.from_list _.hash locals))
                                                    set.to_list)
                                            #.Nil
                                            [(_.function @loop locals
                                               (_.return bodyO))
                                             @loop]

                                            foreigns
                                            (let [@context (_.var (format (///reference.artifact loop_name) "_context"))]
                                              [(_.function @context foreigns
                                                 ($_ _.then
                                                     (<| (_.local_function @loop locals)
                                                         (_.return bodyO))
                                                     (_.return @loop)
                                                     ))
                                               (_.apply/* foreigns @context)])))]
       _ (/////generation.execute! directive)
       _ (/////generation.save! (_.code @loop) directive)]
      (wrap (_.apply/* initsO+ instantiation)))))

(def: #export (recur generate archive argsS+)
  (Generator (List Synthesis))
  (do {! ///////phase.monad}
    [@scope /////generation.anchor
     argsO+ (monad.map ! (generate archive) argsS+)]
    (wrap (_.apply/* argsO+ @scope))))
