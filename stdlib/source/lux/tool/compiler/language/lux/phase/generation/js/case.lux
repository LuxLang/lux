(.module:
  [lux (#- case let if)
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." exception (#+ exception:)]]
   [data
    ["." maybe]
    ["." text]
    [number
     ["n" nat]]
    [collection
     ["." list ("#@." functor fold)]]]
   [target
    ["_" js (#+ Expression Computation Var Statement)]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Generator)]
   ["#." reference]
   ["#." primitive]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     ["#." synthesis #_
      ["#/." case]]
     ["/#" // #_
      ["#." synthesis (#+ Member Synthesis Path)]
      ["//#" /// #_
       [reference
        [variable (#+ Register)]]
       ["#." phase ("#@." monad)]
       [meta
        [archive (#+ Archive)]]]]]]])

(def: #export register
  (-> Register Var)
  (|>> (///reference.local //reference.system) :assume))

(def: #export (let generate archive [valueS register bodyS])
  (Generator [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueO (generate archive valueS)
     bodyO (generate archive bodyS)]
    ## TODO: Find some way to do 'let' without paying the price of the closure.
    (wrap (_.apply/* (_.closure (list (..register register))
                                (_.return bodyO))
                     (list valueO)))))

(def: #export (if generate archive [testS thenS elseS])
  (Generator [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [testO (generate archive testS)
     thenO (generate archive thenS)
     elseO (generate archive elseS)]
    (wrap (_.? testO thenO elseO))))

(def: #export (get generate archive [pathP valueS])
  (Generator [(List Member) Synthesis])
  (do ///////phase.monad
    [valueO (generate archive valueS)]
    (wrap (list@fold (function (_ side source)
                       (.let [method (.case side
                                       (^template [<side> <accessor>]
                                         (<side> lefts)
                                         (<accessor> (_.i32 (.int lefts))))
                                       ([#.Left  //runtime.tuple//left]
                                        [#.Right //runtime.tuple//right]))]
                         (method source)))
                     valueO
                     (list.reverse pathP)))))

(def: @savepoint (_.var "lux_pm_cursor_savepoint"))
(def: @cursor (_.var "lux_pm_cursor"))
(def: @temp (_.var "lux_pm_temp"))

(def: (push-cursor! value)
  (-> Expression Statement)
  (_.statement (|> @cursor (_.do "push" (list value)))))

(def: peek-and-pop-cursor
  Expression
  (|> @cursor (_.do "pop" (list))))

(def: pop-cursor!
  Statement
  (_.statement ..peek-and-pop-cursor))

(def: length
  (|>> (_.the "length")))

(def: last-index
  (|>> ..length (_.- (_.i32 +1))))

(def: peek-cursor
  Expression
  (|> @cursor (_.at (last-index @cursor))))

(def: save-cursor!
  Statement
  (.let [cursor (|> @cursor (_.do "slice" (list)))]
    (_.statement (|> @savepoint (_.do "push" (list cursor))))))

(def: restore-cursor!
  Statement
  (_.set @cursor (|> @savepoint (_.do "pop" (list)))))

(def: fail-pm! _.break)

(def: (multi-pop-cursor! pops)
  (-> Nat Statement)
  (.let [popsJS (_.i32 (.int pops))]
    (_.statement (|> @cursor (_.do "splice" (list (|> @cursor ..length (_.- popsJS))
                                                  popsJS))))))

(template [<name> <flag> <prep>]
  [(def: (<name> simple? idx)
     (-> Bit Nat Statement)
     ($_ _.then
         (_.set @temp (|> idx <prep> .int _.i32 (//runtime.sum//get ..peek-cursor <flag>)))
         (.if simple?
           (_.when (_.= _.null @temp)
                   ..fail-pm!)
           (_.if (_.= _.null @temp)
             ..fail-pm!
             (push-cursor! @temp)))))]

  [left-choice  _.null        (<|)]
  [right-choice (_.string "") inc]
  )

(def: (alternation pre! post!)
  (-> Statement Statement Statement)
  ($_ _.then
      (_.do-while (_.boolean false)
                  ($_ _.then
                      ..save-cursor!
                      pre!))
      ($_ _.then
          ..restore-cursor!
          post!)))

(def: (optimized-pattern-matching recur generate archive pathP)
  (-> (-> Path (Operation Statement)) Phase Archive
      (-> Path (Operation (Maybe Statement))))
  (.case pathP
    (^template [<simple> <choice>]
      (^ (<simple> idx nextP))
      (|> nextP
          recur
          (:: ///////phase.monad map (|>> (_.then (<choice> true idx)) #.Some))))
    ([/////synthesis.simple-left-side  ..left-choice]
     [/////synthesis.simple-right-side ..right-choice])

    (^ (/////synthesis.member/left 0))
    (///////phase@wrap (#.Some (push-cursor! (_.at (_.i32 +0) ..peek-cursor))))

    ## Extra optimization
    (^ (/////synthesis.path/seq
        (/////synthesis.member/left 0)
        (/////synthesis.!bind-top register thenP)))
    (do ///////phase.monad
      [then! (recur thenP)]
      (wrap (#.Some ($_ _.then
                        (_.define (..register register) (_.at (_.i32 +0) ..peek-cursor))
                        then!))))

    ## Extra optimization
    (^template [<pm> <getter>]
      (^ (/////synthesis.path/seq
          (<pm> lefts)
          (/////synthesis.!bind-top register thenP)))
      (do ///////phase.monad
        [then! (recur thenP)]
        (wrap (#.Some ($_ _.then
                          (_.define (..register register) (<getter> (_.i32 (.int lefts)) ..peek-cursor))
                          then!)))))
    ([/////synthesis.member/left  //runtime.tuple//left]
     [/////synthesis.member/right //runtime.tuple//right])

    (^ (/////synthesis.!bind-top register thenP))
    (do ///////phase.monad
      [then! (recur thenP)]
      (wrap (#.Some ($_ _.then
                        (_.define (..register register) ..peek-and-pop-cursor)
                        then!))))

    (^ (/////synthesis.!multi-pop nextP))
    (.let [[extra-pops nextP'] (////synthesis/case.count-pops nextP)]
      (do ///////phase.monad
        [next! (recur nextP')]
        (wrap (#.Some ($_ _.then
                          (multi-pop-cursor! (n.+ 2 extra-pops))
                          next!)))))

    _
    (///////phase@wrap #.None)))

(def: (pattern-matching' generate archive)
  (-> Phase Archive
      (-> Path (Operation Statement)))
  (function (recur pathP)
    (do ///////phase.monad
      [outcome (optimized-pattern-matching recur generate archive pathP)]
      (.case outcome
        (#.Some outcome)
        (wrap outcome)

        #.None
        (.case pathP
          #/////synthesis.Pop
          (///////phase@wrap pop-cursor!)

          (#/////synthesis.Bind register)
          (///////phase@wrap (_.define (..register register) ..peek-cursor))

          (#/////synthesis.Bit-Fork when thenP elseP)
          (do {@ ///////phase.monad}
            [then! (recur thenP)
             else! (.case elseP
                     (#.Some elseP)
                     (recur elseP)

                     #.None
                     (wrap ..fail-pm!))]
            (wrap (.if when
                    (_.if ..peek-cursor
                      then!
                      else!)
                    (_.if ..peek-cursor
                      else!
                      then!))))

          (#/////synthesis.I64-Fork cons)
          (do {@ ///////phase.monad}
            [clauses (monad.map @ (function (_ [match then])
                                    (do @
                                      [then! (recur then)]
                                      (wrap [(//runtime.i64//= (//primitive.i64 (.int match))
                                                               ..peek-cursor)
                                             then!])))
                                (#.Cons cons))]
            (wrap (_.cond clauses ..fail-pm!)))

          (^template [<tag> <format> <type>]
            (<tag> cons)
            (do {@ ///////phase.monad}
              [cases (monad.map @ (function (_ [match then])
                                    (:: @ map (|>> [(list (<format> match))]) (recur then)))
                                (#.Cons cons))]
              (wrap (_.switch ..peek-cursor
                              cases
                              (#.Some ..fail-pm!)))))
          ([#/////synthesis.F64-Fork //primitive.f64 Frac]
           [#/////synthesis.Text-Fork //primitive.text Text])

          (#/////synthesis.Then bodyS)
          (do ///////phase.monad
            [body! (generate archive bodyS)]
            (wrap (_.return body!)))

          (^template [<complex> <choice>]
            (^ (<complex> idx))
            (///////phase@wrap (<choice> false idx)))
          ([/////synthesis.side/left  ..left-choice]
           [/////synthesis.side/right ..right-choice])

          (^template [<pm> <getter>]
            (^ (<pm> lefts))
            (///////phase@wrap (push-cursor! (<getter> (_.i32 (.int lefts)) ..peek-cursor))))
          ([/////synthesis.member/left  //runtime.tuple//left]
           [/////synthesis.member/right //runtime.tuple//right])

          (^template [<tag> <combinator>]
            (^ (<tag> leftP rightP))
            (do ///////phase.monad
              [left! (recur leftP)
               right! (recur rightP)]
              (wrap (<combinator> left! right!))))
          ([/////synthesis.path/seq _.then]
           [/////synthesis.path/alt ..alternation]))))))

(def: (pattern-matching generate archive pathP)
  (-> Phase Archive Path (Operation Statement))
  (do ///////phase.monad
    [pattern-matching! (pattern-matching' generate archive pathP)]
    (wrap ($_ _.then
              (_.do-while (_.boolean false)
                          pattern-matching!)
              (_.throw (_.string ////synthesis/case.pattern-matching-error))))))

(def: #export (case generate archive [valueS pathP])
  (Generator [Synthesis Path])
  (do ///////phase.monad
    [stack-init (generate archive valueS)
     path! (pattern-matching generate archive pathP)
     #let [closure (<| (_.closure (list))
                       ($_ _.then
                           (_.declare @temp)
                           (_.define @cursor (_.array (list stack-init)))
                           (_.define @savepoint (_.array (list)))
                           path!))]]
    (wrap (_.apply/* closure (list)))))
