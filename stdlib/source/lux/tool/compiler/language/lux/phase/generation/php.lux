(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [control
    ["." exception (#+ exception:)]]
   [target
    ["_" php]]]
  ["." / #_
   [runtime (#+ Phase Phase!)]
   ["#." primitive]
   ["#." structure]
   ["#." reference]
   ["#." case]
   ["#." loop]
   ["#." function]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     ["#." extension]
     ["/#" // #_
      [analysis (#+)]
      ["." synthesis]
      ["//#" /// #_
       ["#." phase ("#\." monad)]
       [reference (#+)
        [variable (#+)]]]]]]])

(def: #export (generate archive synthesis)
  Phase
  (case synthesis
    (^template [<tag> <generator>]
      [(^ (<tag> value))
       (//////phase\wrap (<generator> value))])
    ([synthesis.bit  /primitive.bit]
     [synthesis.i64  /primitive.i64]
     [synthesis.f64  /primitive.f64]
     [synthesis.text /primitive.text])

    (#synthesis.Reference value)
    (//reference.reference /reference.system archive value)

    (^template [<tag> <generator>]
      [(^ (<tag> value))
       (<generator> generate archive value)])
    ([synthesis.variant /structure.variant]
     [synthesis.tuple /structure.tuple]
     [synthesis.branch/case /case.case]
     [synthesis.branch/let /case.let]
     [synthesis.branch/if /case.if]
     [synthesis.branch/get /case.get]
     [synthesis.loop/scope /loop.scope]
     [synthesis.loop/recur /loop.recur]
     [synthesis.function/apply /function.apply]
     [synthesis.function/abstraction /function.function])

    (#synthesis.Extension extension)
    (///extension.apply archive generate extension)))
