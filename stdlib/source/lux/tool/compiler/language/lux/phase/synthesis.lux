(.module:
  [lux (#- primitive)
   [abstract
    ["." monad (#+ do)]]
   [control
    [pipe (#+ case>)]
    ["." try]]
   [data
    ["." maybe]
    [collection
     ["." list ("#\." functor)]
     ["." dictionary (#+ Dictionary)]]]]
  ["." / #_
   ["#." function]
   ["#." case]
   ["#." variable]
   ["/#" // #_
    ["#." extension]
    ["/#" // #_
     ["#." analysis (#+ Analysis)]
     ["/" synthesis (#+ Synthesis Phase)]
     [///
      ["." phase ("#\." monad)]
      [reference (#+)
       [variable (#+)]]]]]])

(def: (primitive analysis)
  (-> ///analysis.Primitive /.Primitive)
  (case analysis
    #///analysis.Unit
    (#/.Text /.unit)
    
    (^template [<analysis> <synthesis>]
      [(<analysis> value)
       (<synthesis> value)])
    ([#///analysis.Bit  #/.Bit]
     [#///analysis.Frac #/.F64]
     [#///analysis.Text #/.Text])

    (^template [<analysis> <synthesis>]
      [(<analysis> value)
       (<synthesis> (.i64 value))])
    ([#///analysis.Nat #/.I64]
     [#///analysis.Int #/.I64]
     [#///analysis.Rev #/.I64])))

(def: (optimization archive)
  Phase
  (function (optimization' analysis)
    (case analysis
      (#///analysis.Primitive analysis')
      (phase\wrap (#/.Primitive (..primitive analysis')))

      (#///analysis.Structure structure)
      (/.with_currying? false
        (case structure
          (#///analysis.Variant variant)
          (do phase.monad
            [valueS (optimization' (get@ #///analysis.value variant))]
            (wrap (/.variant (set@ #///analysis.value valueS variant))))

          (#///analysis.Tuple tuple)
          (|> tuple
              (monad.map phase.monad optimization')
              (phase\map (|>> /.tuple)))))
      
      (#///analysis.Reference reference)
      (phase\wrap (#/.Reference reference))

      (#///analysis.Case inputA branchesAB+)
      (/.with_currying? false
        (/case.synthesize optimization branchesAB+ archive inputA))

      (^ (///analysis.no_op value))
      (optimization' value)

      (#///analysis.Apply _)
      (/.with_currying? false
        (/function.apply optimization archive analysis))

      (#///analysis.Function environmentA bodyA)
      (/function.abstraction optimization environmentA archive bodyA)

      (#///analysis.Extension name args)
      (/.with_currying? false
        (function (_ state)
          (|> (//extension.apply archive optimization [name args])
              (phase.run' state)
              (case> (#try.Success output)
                     (#try.Success output)
                     
                     (#try.Failure _)
                     (|> args
                         (monad.map phase.monad optimization')
                         (phase\map (|>> [name] #/.Extension))
                         (phase.run' state))))))
      )))

(def: #export (phase archive analysis)
  Phase
  (do phase.monad
    [synthesis (..optimization archive analysis)]
    (phase.lift (/variable.optimization synthesis))))
