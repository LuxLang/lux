(.module:
  [lux #*
   [data
    [text
     ["%" format (#+ format)]]]]
  ["." //// #_
   ["." version]
   ["#." generation (#+ Context)]
   ["//#" /// #_
    ["." reference (#+ Reference)
     ["." variable (#+ Register Variable)]]
    ["." phase ("#\." monad)]
    [meta
     [archive (#+ Archive)]]]])

(def: #export (artifact [module artifact])
  (-> Context Text)
  (format "lux_"
          "v" (%.nat version.version)
          "m" (%.nat module)
          "a" (%.nat artifact)))

(signature: #export (System expression)
  (: (-> Text expression)
     constant)
  (: (-> Text expression)
     variable))

(def: #export (constant system archive name)
  (All [anchor expression directive]
    (-> (System expression) Archive Name
        (////generation.Operation anchor expression directive expression)))
  (phase\map (|>> ..artifact (\ system constant))
             (////generation.remember archive name)))

(template [<sigil> <name>]
  [(def: #export (<name> system)
     (All [expression]
       (-> (System expression)
           (-> Register expression)))
     (|>> %.nat (format <sigil>) (\ system variable)))]

  ["f" foreign]
  ["l" local]
  )

(def: #export (variable system variable)
  (All [expression]
    (-> (System expression) Variable expression))
  (case variable
    (#variable.Local register)
    (..local system register)
    
    (#variable.Foreign register)
    (..foreign system register)))

(def: #export (reference system archive reference)
  (All [anchor expression directive]
    (-> (System expression) Archive Reference (////generation.Operation anchor expression directive expression)))
  (case reference
    (#reference.Constant value)
    (..constant system archive value)
    
    (#reference.Variable value)
    (phase\wrap (..variable system value))))
