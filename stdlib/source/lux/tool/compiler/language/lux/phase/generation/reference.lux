(.module:
  [lux #*
   [control
    pipe]
   [data
    [text
     ["%" format (#+ format)]]]
   [type (#+ :share)]]
  ["." //// #_
   [synthesis (#+ Synthesis)]
   ["#." generation]
   ["//#" /// #_
    ["#." reference (#+ Register Variable Reference)]
    ["#." phase ("#@." monad)]]])

(signature: #export (System expression)
  (: (-> Register expression)
     local)
  (: (-> Register expression)
     foreign)
  (: (All [anchor directive]
       (-> Variable (////generation.Operation anchor expression directive)))
     variable)
  (: (All [anchor directive]
       (-> Name (////generation.Operation anchor expression directive)))
     constant)
  (: (All [anchor directive]
       (-> Reference (////generation.Operation anchor expression directive)))
     reference))

(def: (variable-maker prefix variable)
  (All [expression]
    (-> Text (-> Text expression)
        (-> Register expression)))
  (|>> %.nat (format prefix) variable))

(template [<sigil> <name>]
  [(def: #export <name>
     (All [expression]
       (-> (-> Text expression)
           (-> Register expression)))
     (variable-maker <sigil>))]

  ["f" foreign]
  ["l" local]
  )

(def: #export (system constant variable)
  (All [expression]
    (-> (-> Text expression) (-> Text expression)
        (System expression)))
  (let [local (..local variable)
        foreign (..foreign variable)
        variable (:share [expression]
                         {(-> Text expression)
                          variable}
                         {(All [anchor directive]
                            (-> Variable (////generation.Operation anchor expression directive)))
                          (|>> (case> (#//////reference.Local register)
                                      (local register)
                                      
                                      (#//////reference.Foreign register)
                                      (foreign register))
                               //////phase@wrap)})
        constant (:share [expression]
                         {(-> Text expression)
                          constant}
                         {(All [anchor directive]
                            (-> Name (////generation.Operation anchor expression directive)))
                          (|>> ////generation.remember (//////phase@map constant))})]
    (structure
     (def: local local)
     (def: foreign foreign)
     (def: variable variable)
     (def: constant constant)
     (def: reference
       (|>> (case> (#//////reference.Constant value)
                   (constant value)
                   
                   (#//////reference.Variable value)
                   (variable value)))))))
