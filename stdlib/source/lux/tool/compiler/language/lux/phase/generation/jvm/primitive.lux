(.module:
  [lux (#- i64)
   ["." host (#+ import:)]
   [abstract
    [monad (#+ do)]]
   [target
    [jvm
     ["_" bytecode (#+ Bytecode)]
     ["." type]]]]
  ["." // #_
   ["#." runtime]])

(def: $Boolean (type.class "java.lang.Boolean" (list)))
(def: $Long (type.class "java.lang.Long" (list)))
(def: $Double (type.class "java.lang.Double" (list)))

(def: #export (bit value)
  (-> Bit (Bytecode Any))
  (_.getstatic $Boolean (if value "TRUE" "FALSE") $Boolean))

(def: wrap-i64
  (_.invokestatic $Long "valueOf" (type.method [(list type.long) $Long (list)])))

(def: #export (i64 value)
  (-> (I64 Any) (Bytecode Any))
  (case (.int value)
    (^template [<int> <instruction>]
      <int>
      (do _.monad
        [_ <instruction>]
        ..wrap-i64))
    ([+0 _.lconst-0]
     [+1 _.lconst-1])

    (^template [<int> <instruction>]
      <int>
      (do _.monad
        [_ <instruction>
         _ _.i2l]
        ..wrap-i64))
    ([-1 _.iconst-m1]
     ## [+0 _.iconst-0]
     ## [+1 _.iconst-1]
     [+2 _.iconst-2]
     [+3 _.iconst-3]
     [+4 _.iconst-4]
     [+5 _.iconst-5])

    _
    (do _.monad
      [_ (|> value .int _.long)]
      ..wrap-i64)))

(def: wrap-f64
  (_.invokestatic $Double "valueOf" (type.method [(list type.double) $Double (list)])))

(import: #long java/lang/Double
  (#static doubleToRawLongBits #manual [double] int))

(def: #export (f64 value)
  (-> Frac (Bytecode Any))
  (case value
    (^template [<int> <instruction>]
      <int>
      (do _.monad
        [_ <instruction>]
        ..wrap-f64))
    ([+1.0 _.dconst-1])

    (^template [<int> <instruction>]
      <int>
      (do _.monad
        [_ <instruction>
         _ _.f2d]
        ..wrap-f64))
    ([+2.0 _.fconst-2])

    (^template [<int> <instruction>]
      <int>
      (do _.monad
        [_ <instruction>
         _ _.i2d]
        ..wrap-f64))
    ([-1.0 _.iconst-m1]
     ## [+0.0 _.iconst-0]
     ## [+1.0 _.iconst-1]
     [+2.0 _.iconst-2]
     [+3.0 _.iconst-3]
     [+4.0 _.iconst-4]
     [+5.0 _.iconst-5])
    
    _
    (let [constantI (if (i.= ..d0-bits
                             (java/lang/Double::doubleToRawLongBits (:coerce java/lang/Double value)))
                      _.dconst-0
                      (_.double value))]
      (do _.monad
        [_ constantI]
        ..wrap-f64))))

(def: #export text
  _.string)
