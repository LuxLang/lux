(.module:
  [lux (#- Scope)
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." product]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor)]]]
   [math
    [number
     ["n" nat]]]
   [target
    ["_" python (#+ Expression SVar)]]]
  ["." // #_
   [runtime (#+ Operation Phase Generator)]
   ["#." case]
   ["///#" //// #_
    [synthesis (#+ Scope Synthesis)]
    ["#." generation]
    ["//#" /// #_
     ["#." phase]]]])

(def: loop_name
  (-> Nat SVar)
  (|>> %.nat (format "loop") _.var))

(def: #export (scope generate archive [start initsS+ bodyS])
  (Generator (Scope Synthesis))
  (do {! ///////phase.monad}
    [@loop (\ ! map ..loop_name /////generation.next)
     initsO+ (monad.map ! (generate archive) initsS+)
     bodyO (/////generation.with_anchor @loop
             (generate archive bodyS))
     #let [directive (_.def @loop (|> initsS+
                                      list.enumeration
                                      (list\map (|>> product.left (n.+ start) //case.register)))
                            (_.return bodyO))]
     _ (/////generation.execute! directive)
     _ (/////generation.save! (_.code @loop) directive)]
    (wrap (_.apply/* @loop initsO+))))

(def: #export (recur generate archive argsS+)
  (Generator (List Synthesis))
  (do {! ///////phase.monad}
    [@scope /////generation.anchor
     argsO+ (monad.map ! (generate archive) argsS+)]
    (wrap (_.apply/* @scope argsO+))))
