(.module:
  [lux (#- Scope)
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." product]
    [number
     ["n" nat]]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#@." functor)]]]
   [target
    ["_" python (#+ Expression SVar)]]]
  ["." // #_
   [runtime (#+ Operation Phase Generator)]
   ["#." case]
   ["///#" //// #_
    [synthesis (#+ Scope Synthesis)]
    ["#." generation]
    ["//#" /// #_
     ["#." phase]]]])

(def: loop-name
  (-> Nat SVar)
  (|>> %.nat (format "loop") _.var))

(def: #export (scope generate archive [start initsS+ bodyS])
  (Generator (Scope Synthesis))
  (do ///////phase.monad
    [@loop (:: @ map ..loop-name /////generation.next)
     initsO+ (monad.map @ (generate archive) initsS+)
     bodyO (/////generation.with-anchor @loop
             (generate archive bodyS))
     _ (/////generation.save! true ["" (_.code @loop)]
                              (_.def @loop (|> initsS+
                                               list.enumerate
                                               (list@map (|>> product.left (n.+ start) //case.register)))
                                     (_.return bodyO)))]
    (wrap (_.apply/* @loop initsO+))))

(def: #export (recur generate archive argsS+)
  (Generator (List Synthesis))
  (do ///////phase.monad
    [@scope /////generation.anchor
     argsO+ (monad.map @ (generate archive) argsS+)]
    (wrap (_.apply/* @scope argsO+))))
