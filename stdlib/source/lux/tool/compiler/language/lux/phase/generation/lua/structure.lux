(.module:
  [lux #*
   [abstract
    ["." monad (#+ do)]]
   [target
    ["_" lua (#+ Expression)]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase)]
   ["#." primitive]
   ["///#" //// #_
    [analysis (#+ Variant Tuple)]
    ["#." synthesis (#+ Synthesis)]
    ["//#" /// #_
     ["#." phase ("#@." monad)]]]])

(def: #export (tuple generate elemsS+)
  (-> Phase (Tuple Synthesis) (Operation (Expression Any)))
  (case elemsS+
    #.Nil
    (///////phase@wrap (//primitive.text /////synthesis.unit))

    (#.Cons singletonS #.Nil)
    (generate singletonS)

    _
    (|> elemsS+
        (monad.map ///////phase.monad generate)
        (///////phase@map _.array))))

(def: #export (variant generate [lefts right? valueS])
  (-> Phase (Variant Synthesis) (Operation (Expression Any)))
  (let [tag (if right?
              (inc lefts)
              lefts)]
    (///////phase@map (//runtime.variant tag right?)
                      (generate valueS))))
