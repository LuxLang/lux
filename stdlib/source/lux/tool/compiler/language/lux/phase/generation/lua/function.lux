(.module:
  [lux (#- function)
   [abstract
    ["." monad (#+ do)]]
   [control
    pipe]
   [data
    ["." product]
    [collection
     ["." list ("#\." functor fold)]]]
   [target
    ["_" lua (#+ Expression Statement)]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Generator)]
   ["#." reference]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["//#" /// #_
     [analysis (#+ Variant Tuple Environment Abstraction Application Analysis)]
     [synthesis (#+ Synthesis)]
     ["#." generation]
     ["//#" /// #_
      [reference (#+ Register Variable)]
      [arity (#+ Arity)]
      ["#." phase]]]]])

(def: #export (apply generate archive [functionS argsS+])
  (Generator (Application Synthesis))
  (do {! ///////phase.monad}
    [functionO (generate archive functionS)
     argsO+ (monad.map ! (generate archive) argsS+)]
    (wrap (_.apply/* argsO+ functionO))))

(def: #export capture
  (///reference.foreign _.var))

(def: (with-closure function-name inits function-definition)
  (-> Text (List (Expression Any)) Statement (Operation (Expression Any)))
  (case inits
    #.Nil
    (do ///////phase.monad
      [_ (/////generation.execute! function-definition)
       _ (/////generation.save! function-name function-definition)]
      (wrap (|> (_.var function-name) (_.apply/* inits))))

    _
    (do {! ///////phase.monad}
      [@closure (\ ! map _.var (/////generation.gensym "closure"))
       #let [directive (_.function @closure
                         (|> (list.enumeration inits)
                             (list\map (|>> product.left ..capture)))
                         ($_ _.then
                             function-definition
                             (_.return (_.var function-name))))]
       _ (/////generation.execute! directive)
       _ (/////generation.save! (_.code @closure) directive)]
      (wrap (_.apply/* inits @closure)))))

(def: input
  (|>> inc //case.register))

(def: #export (function generate archive [environment arity bodyS])
  (Generator (Abstraction Synthesis))
  (do {! ///////phase.monad}
    [[function-name bodyO] (/////generation.with-new-context
                             (do !
                               [function-name (\ ! map ///reference.artifact-name
                                                 /////generation.context)]
                               (/////generation.with-anchor (_.var function-name)
                                 (generate archive bodyS))))
     closureO+ (: (Operation (List (Expression Any)))
                  (monad.map ! (\ //reference.system variable) environment))
     #let [function-name (///reference.artifact-name function-name)
           @curried (_.var "curried")
           arityO (|> arity .int _.int)
           @num-args (_.var "num_args")
           @self (_.var function-name)
           initialize-self! (_.let (list (//case.register 0)) @self)
           initialize! (list\fold (.function (_ post pre!)
                                    ($_ _.then
                                        pre!
                                        (_.let (list (..input post)) (_.nth (|> post inc .int _.int) @curried))))
                                  initialize-self!
                                  (list.indices arity))
           pack (|>> (list) _.apply/* (|> (_.var "table.pack")))
           unpack (|>> (list) _.apply/* (|> (_.var "table.unpack")))
           @var-args (_.var "...")]]
    (with-closure function-name closureO+
      (_.function @self (list @var-args)
        ($_ _.then
            (_.let (list @curried) (pack @var-args))
            (_.let (list @num-args) (_.the "n" @curried))
            (_.cond (list [(|> @num-args (_.= (_.int +0)))
                           (_.return @self)]
                          [(|> @num-args (_.= arityO))
                           ($_ _.then
                               initialize!
                               (_.return bodyO))]
                          [(|> @num-args (_.> arityO))
                           (let [arity-inputs (//runtime.array//sub (_.int +0) arityO @curried)
                                 extra-inputs (//runtime.array//sub arityO @num-args @curried)]
                             (_.return (|> @self
                                           (_.apply/* (list (unpack arity-inputs)))
                                           (_.apply/* (list (unpack extra-inputs))))))])
                    ## (|> @num-args (_.< arityO))
                    (_.return (_.closure (list @var-args)
                                         (_.return (|> @self (_.apply/* (list (unpack (//runtime.array//concat @curried (pack @var-args))))))))))
            )))
    ))
