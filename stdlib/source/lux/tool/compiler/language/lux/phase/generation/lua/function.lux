(.module:
  [lux (#- function)
   [abstract
    ["." monad (#+ do)]]
   [control
    pipe]
   [data
    ["." product]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor fold)]]]
   [target
    ["_" lua (#+ Var Expression Label Statement)]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Phase! Generator)]
   ["#." reference]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["//#" /// #_
     [analysis (#+ Variant Tuple Abstraction Application Analysis)]
     [synthesis (#+ Synthesis)]
     ["#." generation (#+ Context)]
     ["//#" /// #_
      [arity (#+ Arity)]
      ["#." phase ("#\." monad)]
      [reference
       [variable (#+ Register Variable)]]]]]])

(def: #export (apply expression archive [functionS argsS+])
  (Generator (Application Synthesis))
  (do {! ///////phase.monad}
    [functionO (expression archive functionS)
     argsO+ (monad.map ! (expression archive) argsS+)]
    (wrap (_.apply/* argsO+ functionO))))

(def: capture
  (-> Register Var)
  (|>> (///reference.foreign //reference.system) :assume))

(def: (with_closure inits @self @args body!)
  (-> (List Expression) Var (List Var) Statement [Statement Expression])
  (case inits
    #.Nil
    [(_.function @self @args body!)
     @self]

    _
    (let [@inits (|> (list.enumeration inits)
                     (list\map (|>> product.left ..capture)))]
      [(_.function @self @inits
         ($_ _.then
             (_.local_function @self @args body!)
             (_.return @self)))
       (_.apply/* inits @self)])))

(def: input
  (|>> inc //case.register))

(def: (@scope function_name)
  (-> Context Label)
  (_.label (format (///reference.artifact function_name) "_scope")))

(def: #export (function statement expression archive [environment arity bodyS])
  (-> Phase! (Generator (Abstraction Synthesis)))
  (do {! ///////phase.monad}
    [[function_name body!] (/////generation.with_new_context archive
                             (do !
                               [@scope (\ ! map ..@scope
                                          (/////generation.context archive))]
                               (/////generation.with_anchor [1 @scope]
                                 (statement expression archive bodyS))))
     closureO+ (monad.map ! (expression archive) environment)
     #let [@curried (_.var "curried")
           arityO (|> arity .int _.int)
           @num_args (_.var "num_args")
           @scope (..@scope function_name)
           @self (_.var (///reference.artifact function_name))
           initialize_self! (_.local/1 (//case.register 0) @self)
           initialize! (list\fold (.function (_ post pre!)
                                    ($_ _.then
                                        pre!
                                        (_.local/1 (..input post) (_.nth (|> post inc .int _.int) @curried))))
                                  initialize_self!
                                  (list.indices arity))
           pack (|>> (list) _.array)
           unpack (|>> (list) _.apply/* (|> (_.var "table.unpack")))
           @var_args (_.var "...")]
     #let [[definition instantiation] (with_closure closureO+ @self (list @var_args)
                                        ($_ _.then
                                            (_.local/1 @curried (pack @var_args))
                                            (_.local/1 @num_args (_.length @curried))
                                            (_.cond (list [(|> @num_args (_.= (_.int +0)))
                                                           (_.return @self)]
                                                          [(|> @num_args (_.= arityO))
                                                           ($_ _.then
                                                               initialize!
                                                               (_.set_label @scope)
                                                               body!)]
                                                          [(|> @num_args (_.> arityO))
                                                           (let [arity_inputs (//runtime.array//sub (_.int +0) arityO @curried)
                                                                 extra_inputs (//runtime.array//sub arityO @num_args @curried)]
                                                             (_.return (|> @self
                                                                           (_.apply/* (list (unpack arity_inputs)))
                                                                           (_.apply/* (list (unpack extra_inputs))))))])
                                                    ## (|> @num_args (_.< arityO))
                                                    (_.return (_.closure (list @var_args)
                                                                         (_.return (|> @self (_.apply/* (list (unpack (//runtime.array//concat @curried (pack @var_args))))))))))
                                            ))]
     _ (/////generation.execute! definition)
     _ (/////generation.save! (%.nat (product.right function_name)) definition)]
    (wrap instantiation)))
