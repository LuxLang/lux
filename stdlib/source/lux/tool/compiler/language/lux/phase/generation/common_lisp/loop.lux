(.module:
  [lux (#- Scope)
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." product]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor)]]]
   [math
    [number
     ["n" nat]]]
   [target
    ["_" common_lisp (#+ Expression)]]]
  ["." // #_
   [runtime (#+ Operation Phase Generator)]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     [synthesis
      ["." case]]
     ["/#" // #_
      ["."synthesis (#+ Scope Synthesis)]
      ["#." generation]
      ["//#" /// #_
       ["#." phase]
       [meta
        [archive (#+ Archive)]]
       [reference
        [variable (#+ Register)]]]]]]])

(def: #export (scope expression archive [start initsS+ bodyS])
  (Generator (Scope Synthesis))
  (do {! ///////phase.monad}
    [@scope (\ ! map (|>> %.nat (format "scope") _.var) /////generation.next)
     initsG+ (monad.map ! (expression archive) initsS+)
     bodyG (/////generation.with_anchor @scope
             (expression archive bodyS))]
    (wrap (_.labels (list [@scope {#_.input (|> initsS+
                                                list.enumeration
                                                (list\map (|>> product.left (n.+ start) //case.register))
                                                _.args)
                                   #_.output bodyG}])
                    (_.funcall/+ [(_.function/1 @scope) initsG+])))))

(def: #export (recur expression archive argsS+)
  (Generator (List Synthesis))
  (do {! ///////phase.monad}
    [@scope /////generation.anchor
     argsO+ (monad.map ! (expression archive) argsS+)]
    (wrap (_.call/* @scope argsO+))))
