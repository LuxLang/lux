(.module:
  [lux (#- Scope)
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." product]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor)]
     ["." set]]]
   [math
    [number
     ["n" nat]]]
   [target
    ["_" php (#+ Var Expression Statement)]]]
  ["." // #_
   [runtime (#+ Operation Phase Phase! Generator Generator!)]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["//#" /// #_
     ["."synthesis (#+ Scope Synthesis)]
     ["#." generation]
     ["//#" /// #_
      ["#." phase]
      [meta
       [archive (#+ Archive)]]
      [reference
       [variable (#+ Register)]]]]]])

(def: #export (scope generate archive [start initsS+ bodyS])
  (Generator (Scope Synthesis))
  (do {! ///////phase.monad}
    [@loop (\ ! map (|>> %.nat (format "loop")) /////generation.next)
     #let [@loopG (_.global @loop)
           @loopL (_.var @loop)]
     initsO+ (monad.map ! (generate archive) initsS+)
     bodyO (/////generation.with_anchor @loopL
             (generate archive bodyS))
     #let [directive ($_ _.then
                         (<| _.;
                             (_.set @loopL)
                             (_.closure (list (_.reference @loopL))
                                        (|> initsS+
                                            list.enumeration
                                            (list\map (|>> product.left (n.+ start) //case.register [#0])))
                                        (_.return bodyO)))
                         (_.; (_.set @loopG @loopL)))]
     _ (/////generation.execute! directive)
     _ (/////generation.save! @loop directive)]
    (wrap (_.apply/* initsO+ @loopG))))

(def: #export (recur generate archive argsS+)
  (Generator (List Synthesis))
  (do {! ///////phase.monad}
    [@scope /////generation.anchor
     argsO+ (monad.map ! (generate archive) argsS+)]
    (wrap (_.apply/* argsO+ @scope))))
