(.module:
  [lux (#- Scope)
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." product]
    [number
     ["n" nat]]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#@." functor)]]]
   [target
    ["_" php (#+ Expression)]]]
  ["." // #_
   [runtime (#+ Operation Phase)]
   ["#." case]
   ["#/" //
    ["#/" //
     [//
      [synthesis (#+ Scope Synthesis)]]]]])

(def: #export (scope generate [start initsS+ bodyS])
  (-> Phase (Scope Synthesis) (Operation (Expression Any)))
  (do {@ ////.monad}
    [@loop (:: @ map (|>> %.nat (format "loop")) ///.next)
     #let [@loopG (_.global @loop)
           @loopL (_.var @loop)]
     initsO+ (monad.map @ generate initsS+)
     bodyO (///.with-anchor @loopL
             (generate bodyS))
     #let [directive ($_ _.then
                         (<| _.;
                             (_.set @loopL)
                             (_.closure (list (_.reference @loopL))
                                        (|> initsS+
                                            list.enumeration
                                            (list@map (|>> product.left (n.+ start) //case.register [#0])))
                                        (_.return bodyO)))
                         (_.; (_.set @loopG @loopL)))]
     _ (///.execute! directive)
     _ (///.save! @loop directive)]
    (wrap (_.apply/* initsO+ @loopG))))

(def: #export (recur generate argsS+)
  (-> Phase (List Synthesis) (Operation (Expression Any)))
  (do {@ ////.monad}
    [@scope ///.anchor
     argsO+ (monad.map @ generate argsS+)]
    (wrap (_.apply/* argsO+ @scope))))
