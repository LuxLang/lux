(.module:
  [lux (#- function)
   [abstract
    ["." monad (#+ do)]]
   [control
    pipe]
   [data
    ["." product]
    [collection
     ["." list ("#@." functor fold)]]]
   [target
    ["_" js (#+ Expression Computation Var)]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Generator)]
   ["#." reference]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["//#" /// #_
     [analysis (#+ Variant Tuple Environment Abstraction Application Analysis)]
     [synthesis (#+ Synthesis)]
     ["#." generation]
     ["//#" /// #_
      [arity (#+ Arity)]
      [reference (#+ Register Variable)]
      ["#." phase ("#@." monad)]]]]])

(def: #export (apply generate archive [functionS argsS+])
  (Generator (Application Synthesis))
  (do ///////phase.monad
    [functionO (generate archive functionS)
     argsO+ (monad.map @ (generate archive) argsS+)]
    (wrap (_.apply/* functionO argsO+))))

(def: (with-closure inits function-definition)
  (-> (List Expression) Computation (Operation Computation))
  (///////phase@wrap
   (case inits
     #.Nil
     function-definition

     _
     (let [capture (///reference.foreign _.var)
           closure (_.closure (|> (list.enumerate inits)
                                  (list@map (|>> product.left capture)))
                              (_.return function-definition))]
       (_.apply/* closure inits)))))

(def: @curried (_.var "curried"))

(def: input
  (|>> inc //case.register))

(def: @@arguments (_.var "arguments"))

(def: #export (function generate archive [environment arity bodyS])
  (Generator (Abstraction Synthesis))
  (do ///////phase.monad
    [[function-name bodyO] (/////generation.with-new-context
                             (do @
                               [function-name (:: @ map ///reference.artifact-name
                                                  /////generation.context)]
                               (/////generation.with-anchor (_.var function-name)
                                 (generate archive bodyS))))
     #let [capture (:: //reference.system variable)]
     closureO+ (: (Operation (List Expression))
                  (monad.map @ capture environment))
     #let [arityO (|> arity .int _.i32)
           @num-args (_.var "num_args")
           @self (_.var (///reference.artifact-name function-name))
           apply-poly (.function (_ args func)
                        (|> func (_.do "apply" (list _.null args))))
           initialize-self! (_.define (//case.register 0) @self)
           initialize! (list@fold (.function (_ post pre!)
                                    ($_ _.then
                                        pre!
                                        (_.define (..input post) (_.at (_.i32 (.int post)) @@arguments))))
                                  initialize-self!
                                  (list.indices arity))]]
    (with-closure closureO+
      (_.function @self (list)
        ($_ _.then
            (_.define @num-args (_.the "length" @@arguments))
            (_.cond (list [(|> @num-args (_.= arityO))
                           ($_ _.then
                               initialize!
                               (_.return bodyO))]
                          [(|> @num-args (_.> arityO))
                           (let [arity-inputs (|> (_.array (list))
                                                  (_.the "slice")
                                                  (_.do "call" (list @@arguments (_.i32 +0) arityO)))
                                 extra-inputs (|> (_.array (list))
                                                  (_.the "slice")
                                                  (_.do "call" (list @@arguments arityO)))]
                             (_.return (|> @self
                                           (apply-poly arity-inputs)
                                           (apply-poly extra-inputs))))])
                    ## (|> @num-args (_.< arityO))
                    (let [all-inputs (|> (_.array (list))
                                         (_.the "slice")
                                         (_.do "call" (list @@arguments)))]
                      ($_ _.then
                          (_.define @curried all-inputs)
                          (_.return (_.closure (list)
                                               (let [@missing all-inputs]
                                                 (_.return (apply-poly (_.do "concat" (list @missing) @curried)
                                                                       @self))))))))
            )))
    ))
