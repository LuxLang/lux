(.module:
  [lux (#- function)
   [abstract
    ["." monad (#+ do)]]
   [control
    pipe]
   [data
    ["." product]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#@." functor fold)]]]
   [target
    ["_" js (#+ Expression Computation Var Statement)]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Phase! Generator)]
   ["#." reference]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["//#" /// #_
     [analysis (#+ Variant Tuple Abstraction Application Analysis)]
     [synthesis (#+ Synthesis)]
     ["#." generation (#+ Context)]
     ["//#" /// #_
      [arity (#+ Arity)]
      [reference
       [variable (#+ Register Variable)]]
      ["#." phase ("#@." monad)]]]]])

(def: #export (apply generate archive [functionS argsS+])
  (Generator (Application Synthesis))
  (do {@ ///////phase.monad}
    [functionO (generate archive functionS)
     argsO+ (monad.map @ (generate archive) argsS+)]
    (wrap (_.apply/* functionO argsO+))))

(def: (with-closure @self inits function-body)
  (-> Var (List Expression) Statement [Statement Expression])
  (case inits
    #.Nil
    [(_.function! @self (list) function-body)
     @self]

    _
    (let [capture (: (-> Register Var)
                     (|>> (///reference.foreign //reference.system) :assume))]
      [(_.function! @self
                    (|> (list.enumeration inits)
                        (list@map (|>> product.left capture)))
                    (_.return (_.function @self (list) function-body)))
       (_.apply/* @self inits)])))

(def: @curried (_.var "curried"))

(def: input
  (|>> inc //case.register))

(def: @@arguments (_.var "arguments"))

(def: (@scope function-name)
  (-> Context Text)
  (format (///reference.artifact function-name) "_scope"))

(def: #export (function statement expression archive [environment arity bodyS])
  (-> Phase! (Generator (Abstraction Synthesis)))
  (do {@ ///////phase.monad}
    [[function-name body!] (/////generation.with-new-context archive
                             (do @
                               [scope (:: @ map ..@scope
                                          (/////generation.context archive))]
                               (/////generation.with-anchor [1 scope]
                                 (statement expression archive bodyS))))
     #let [arityO (|> arity .int _.i32)
           @num-args (_.var "num_args")
           @scope (..@scope function-name)
           @self (_.var (///reference.artifact function-name))
           apply-poly (.function (_ args func)
                        (|> func (_.do "apply" (list _.null args))))
           initialize-self! (_.define (//case.register 0) @self)
           initialize! (list@fold (.function (_ post pre!)
                                    ($_ _.then
                                        pre!
                                        (_.define (..input post) (_.at (_.i32 (.int post)) @@arguments))))
                                  initialize-self!
                                  (list.indices arity))]
     environment (monad.map @ (expression archive) environment)
     #let [[definition instantiation] (with-closure @self environment
                                        ($_ _.then
                                            (_.define @num-args (_.the "length" @@arguments))
                                            (_.cond (list [(|> @num-args (_.= arityO))
                                                           ($_ _.then
                                                               initialize!
                                                               (_.with-label (_.label @scope)
                                                                 (_.do-while (_.boolean true)
                                                                             body!)))]
                                                          [(|> @num-args (_.> arityO))
                                                           (let [arity-inputs (|> (_.array (list))
                                                                                  (_.the "slice")
                                                                                  (_.do "call" (list @@arguments (_.i32 +0) arityO)))
                                                                 extra-inputs (|> (_.array (list))
                                                                                  (_.the "slice")
                                                                                  (_.do "call" (list @@arguments arityO)))]
                                                             (_.return (|> @self
                                                                           (apply-poly arity-inputs)
                                                                           (apply-poly extra-inputs))))])
                                                    ## (|> @num-args (_.< arityO))
                                                    (let [all-inputs (|> (_.array (list))
                                                                         (_.the "slice")
                                                                         (_.do "call" (list @@arguments)))]
                                                      ($_ _.then
                                                          (_.define @curried all-inputs)
                                                          (_.return (_.closure (list)
                                                                               (let [@missing all-inputs]
                                                                                 (_.return (apply-poly (_.do "concat" (list @missing) @curried)
                                                                                                       @self))))))))
                                            ))]
     _ (/////generation.execute! definition)
     _ (/////generation.save! (%.nat (product.right function-name)) definition)]
    (wrap instantiation)))
