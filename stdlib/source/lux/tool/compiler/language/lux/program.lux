(.module:
  [lux (#- Module)
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]]
   [data
    ["." product]
    ["." maybe]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor)]]]]
  [//
   [generation (#+ Context)]
   [///
    [meta
     ["." archive (#+ Archive)
      ["." descriptor (#+ Module)]
      ["." artifact]]]]])

(type: #export (Program expression directive)
  (-> Context expression directive))

(def: #export name
  Text
  "")

(exception: #export (cannot-find-program {modules (List Module)})
  (exception.report
   ["Modules" (exception.enumerate %.text modules)]))

(def: #export (context archive)
  (-> Archive (Try Context))
  (do {! try.monad}
    [registries (|> archive
                    archive.archived
                    (monad.map !
                               (function (_ module)
                                 (do !
                                   [id (archive.id module archive)
                                    [descriptor document] (archive.find module archive)]
                                   (wrap [[module id] (get@ #descriptor.registry descriptor)])))))]
    (case (list.one (function (_ [[module module-id] registry])
                      (do maybe.monad
                        [program-id (artifact.remember ..name registry)]
                        (wrap [module-id program-id])))
                    registries)
      (#.Some program-context)
      (wrap program-context)
      
      #.None
      (|> registries
          (list\map (|>> product.left product.left))
          (exception.throw ..cannot-find-program)))))
