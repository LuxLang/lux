(.module:
  [lux (#- Module)
   [abstract
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]
    ["." function]]
   [data
    [binary (#+ Binary)]
    ["." product]
    ["." name ("#@." equivalence)]
    ["." text ("#@." equivalence)
     ["%" format (#+ format)]]
    [number
     ["n" nat]]
    [collection
     ["." row (#+ Row)]
     ["." list ("#@." functor)]]]]
  [//
   [synthesis (#+ Synthesis)]
   [phase
    ["." extension]]
   [///
    ["." phase]
    [meta
     ["." archive (#+ Archive)
      ["." descriptor (#+ Module)]
      ["." artifact]]]]])

(type: #export Context [archive.ID artifact.ID])
(type: #export (Buffer directive) (Row [Name directive]))

(exception: #export (cannot-interpret {error Text})
  (exception.report
   ["Error" error]))

(template [<name>]
  [(exception: #export (<name> {name Name})
     (exception.report
      ["Output" (%.name name)]))]

  [cannot-overwrite-output]
  [no-buffer-for-saving-code]
  )

(signature: #export (Host expression directive)
  (: (-> Text expression (Try Any))
     evaluate!)
  (: (-> Text directive (Try Any))
     execute!)
  (: (-> Context expression (Try [Text Any directive]))
     define!)

  (: (-> Context Binary directive)
     ingest)
  (: (-> Context directive (Try Any))
     re-learn)
  (: (-> Context directive (Try Any))
     re-load))

(type: #export (State anchor expression directive)
  {#module Module
   #anchor (Maybe anchor)
   #host (Host expression directive)
   #buffer (Maybe (Buffer directive))
   #registry artifact.Registry
   #counter Nat
   #context (Maybe artifact.ID)})

(template [<special> <general>]
  [(type: #export (<special> anchor expression directive)
     (<general> (State anchor expression directive) Synthesis expression))]

  [State+    extension.State]
  [Operation extension.Operation]
  [Phase     extension.Phase]
  [Handler   extension.Handler]
  [Bundle    extension.Bundle]
  )

(def: #export (state host module)
  (All [anchor expression directive]
    (-> (Host expression directive)
        Module
        (..State anchor expression directive)))
  {#module module
   #anchor #.None
   #host host
   #buffer #.None
   #registry artifact.empty
   #counter 0
   #context #.None})

(def: #export empty-buffer Buffer row.empty)

(template [<tag>
           <with-declaration> <with-type> <with-value>
           <set> <get> <get-type> <exception>]
  [(exception: #export <exception>)

   (def: #export <with-declaration>
     (All [anchor expression directive output] <with-type>)
     (function (_ body)
       (function (_ [bundle state])
         (case (body [bundle (set@ <tag> (#.Some <with-value>) state)])
           (#try.Success [[bundle' state'] output])
           (#try.Success [[bundle' (set@ <tag> (get@ <tag> state) state')]
                          output])

           (#try.Failure error)
           (#try.Failure error)))))

   (def: #export <get>
     (All [anchor expression directive]
       (Operation anchor expression directive <get-type>))
     (function (_ (^@ stateE [bundle state]))
       (case (get@ <tag> state)
         (#.Some output)
         (#try.Success [stateE output])

         #.None
         (exception.throw <exception> []))))

   (def: #export (<set> value)
     (All [anchor expression directive]
       (-> <get-type> (Operation anchor expression directive Any)))
     (function (_ [bundle state])
       (#try.Success [[bundle (set@ <tag> (#.Some value) state)]
                      []])))]

  [#anchor
   (with-anchor anchor)
   (-> anchor (Operation anchor expression directive output)
       (Operation anchor expression directive output))
   anchor
   set-anchor anchor anchor no-anchor]

  [#buffer
   with-buffer
   (-> (Operation anchor expression directive output)
       (Operation anchor expression directive output))
   ..empty-buffer
   set-buffer buffer (Buffer directive) no-active-buffer]
  )

(def: #export get-registry
  (All [anchor expression directive]
    (Operation anchor expression directive artifact.Registry))
  (function (_ (^@ stateE [bundle state]))
    (#try.Success [stateE (get@ #registry state)])))

(def: #export (set-registry value)
  (All [anchor expression directive]
    (-> artifact.Registry (Operation anchor expression directive Any)))
  (function (_ [bundle state])
    (#try.Success [[bundle (set@ #registry value state)]
                   []])))

(def: #export next
  (All [anchor expression directive]
    (Operation anchor expression directive Nat))
  (do phase.monad
    [count (extension.read (get@ #counter))
     _ (extension.update (update@ #counter inc))]
    (wrap count)))

(def: #export (gensym prefix)
  (All [anchor expression directive]
    (-> Text (Operation anchor expression directive Text)))
  (:: phase.monad map (|>> %.nat (format prefix)) ..next))

(def: #export (enter-module module)
  (All [anchor expression directive]
    (-> Module (Operation anchor expression directive Any)))
  (extension.update (set@ #module module)))

(template [<name> <inputT>]
  [(def: #export (<name> label code)
     (All [anchor expression directive]
       (-> Text <inputT> (Operation anchor expression directive Any)))
     (function (_ (^@ state+ [bundle state]))
       (case (:: (get@ #host state) <name> label code)
         (#try.Success output)
         (#try.Success [state+ output])

         (#try.Failure error)
         (exception.throw ..cannot-interpret error))))]

  [evaluate! expression]
  [execute!  directive]
  )

(def: #export (define! context code)
  (All [anchor expression directive]
    (-> Context expression (Operation anchor expression directive [Text Any directive])))
  (function (_ (^@ stateE [bundle state]))
    (case (:: (get@ #host state) define! context code)
      (#try.Success output)
      (#try.Success [stateE output])

      (#try.Failure error)
      (exception.throw ..cannot-interpret error))))

(def: #export (save! execute? name code)
  (All [anchor expression directive]
    (-> Bit Name directive (Operation anchor expression directive Any)))
  (do phase.monad
    [_ (if execute?
         (do @
           [label (..gensym "save")]
           (execute! label code))
         (wrap []))
     ?buffer (extension.read (get@ #buffer))]
    (case ?buffer
      (#.Some buffer)
      (if (row.any? (|>> product.left (name@= name)) buffer)
        (phase.throw ..cannot-overwrite-output [name])
        (extension.update (set@ #buffer (#.Some (row.add [name code] buffer)))))
      
      #.None
      (phase.throw ..no-buffer-for-saving-code [name]))))

(template [<name> <artifact>]
  [(def: #export (<name> name)
     (All [anchor expression directive]
       (-> Text (Operation anchor expression directive artifact.ID)))
     (function (_ (^@ stateE [bundle state]))
       (let [[id registry'] (<artifact> name (get@ #registry state))]
         (#try.Success [[bundle (set@ #registry registry' state)]
                        id]))))]

  [learn artifact.definition]
  [learn-analyser artifact.analyser]
  [learn-synthesizer artifact.synthesizer]
  [learn-generator artifact.generator]
  [learn-directive artifact.directive]
  )

(exception: #export (unknown-definition {name Name}
                                        {known-definitions (List Text)})
  (exception.report
   ["Definition" (name.short name)]
   ["Module" (name.module name)]
   ["Known Definitions" (exception.enumerate function.identity known-definitions)]))

(def: #export (remember archive name)
  (All [anchor expression directive]
    (-> Archive Name (Operation anchor expression directive Context)))
  (function (_ (^@ stateE [bundle state]))
    (let [[_module _name] name]
      (do try.monad
        [module-id (archive.id _module archive)
         registry (if (text@= (get@ #module state) _module)
                    (#try.Success (get@ #registry state))
                    (do try.monad
                      [[descriptor document] (archive.find _module archive)]
                      (#try.Success (get@ #descriptor.registry descriptor))))]
        (case (artifact.remember _name registry)
          #.None
          (exception.throw ..unknown-definition [name (artifact.definitions registry)])
          
          (#.Some id)
          (#try.Success [stateE [module-id id]]))))))

(exception: #export no-context)

(def: #export (context archive)
  (All [anchor expression directive]
    (-> Archive (Operation anchor expression directive Context)))
  (function (_ (^@ stateE [bundle state]))
    (case (get@ #context state)
      #.None
      (exception.throw ..no-context [])
      
      (#.Some id)
      (do try.monad
        [module-id (archive.id (get@ #module state) archive)]
        (wrap [stateE [module-id id]])))))

(def: #export (with-context id body)
  (All [anchor expression directive a]
    (-> artifact.ID
        (Operation anchor expression directive a)
        (Operation anchor expression directive a)))
  (function (_ [bundle state])
    (do try.monad
      [[[bundle' state'] output] (body [bundle (set@ #context (#.Some id) state)])]
      (wrap [[bundle' (set@ #context (get@ #context state) state')]
             output]))))

(def: #export (with-new-context archive body)
  (All [anchor expression directive a]
    (-> Archive (Operation anchor expression directive a)
        (Operation anchor expression directive [Context a])))
  (function (_ (^@ stateE [bundle state]))
    (let [[id registry'] (artifact.resource (get@ #registry state))]
      (do try.monad
        [[[bundle' state'] output] (body [bundle (|> state
                                                     (set@ #registry registry')
                                                     (set@ #context (#.Some id)))])
         module-id (archive.id (get@ #module state) archive)]
        (wrap [[bundle' (set@ #context (get@ #context state) state')]
               [[module-id id]
                output]])))))
