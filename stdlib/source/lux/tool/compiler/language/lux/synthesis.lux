(.module:
  [lux (#- i64 Scope)
   [abstract
    [monad (#+ do)]
    [hash (#+ Hash)]
    ["." equivalence (#+ Equivalence)]]
   [control
    [pipe (#+ case>)]
    ["." exception (#+ exception:)]]
   [data
    ["." sum]
    ["." product]
    ["." maybe]
    ["." bit ("#@." equivalence)]
    ["." text ("#@." equivalence)
     ["%" format (#+ Format format)]]
    [number
     ["." i64]
     ["n" nat]
     ["i" int]
     ["f" frac]]
    [collection
     ["." list ("#@." functor)]
     ["." dictionary (#+ Dictionary)]]]]
  [//
   ["." analysis (#+ Environment Composite Analysis)]
   [phase
    ["." extension (#+ Extension)]]
   [///
    [arity (#+ Arity)]
    ["." phase]
    ["." reference (#+ Reference)
     ["." variable (#+ Register Variable)]]]])

(type: #export Resolver
  (Dictionary Variable Variable))

(type: #export State
  {#locals Nat
   ## https://en.wikipedia.org/wiki/Currying
   #currying? Bit})

(def: #export fresh-resolver
  Resolver
  (dictionary.new variable.hash))

(def: #export init
  State
  {#locals 0
   #currying? false})

(type: #export Primitive
  (#Bit Bit)
  (#I64 (I64 Any))
  (#F64 Frac)
  (#Text Text))

(type: #export Side
  (Either Nat Nat))

(type: #export Member
  (Either Nat Nat))

(type: #export Access
  (#Side Side)
  (#Member Member))

(type: #export (Fork value next)
  [[value next] (List [value next])])

(type: #export (Path' s)
  #Pop
  (#Access Access)
  (#Bind Register)
  (#Bit-Fork Bit (Path' s) (Maybe (Path' s)))
  (#I64-Fork (Fork (I64 Any) (Path' s)))
  (#F64-Fork (Fork Frac (Path' s)))
  (#Text-Fork (Fork Text (Path' s)))
  (#Alt (Path' s) (Path' s))
  (#Seq (Path' s) (Path' s))
  (#Then s))

(type: #export (Abstraction' s)
  {#environment (Environment s)
   #arity Arity
   #body s})

(type: #export (Apply' s)
  {#function s
   #arguments (List s)})

(type: #export (Branch s)
  (#Let s Register s)
  (#If s s s)
  (#Get (List Member) s)
  (#Case s (Path' s)))

(type: #export (Scope s)
  {#start Register
   #inits (List s)
   #iteration s})

(type: #export (Loop s)
  (#Scope (Scope s))
  (#Recur (List s)))

(type: #export (Function s)
  (#Abstraction (Abstraction' s))
  (#Apply s (List s)))

(type: #export (Control s)
  (#Branch (Branch s))
  (#Loop (Loop s))
  (#Function (Function s)))

(type: #export #rec Synthesis
  (#Primitive Primitive)
  (#Structure (Composite Synthesis))
  (#Reference Reference)
  (#Control (Control Synthesis))
  (#Extension (Extension Synthesis)))

(template [<special> <general>]
  [(type: #export <special>
     (<general> ..State Analysis Synthesis))]

  [State+    extension.State]
  [Operation extension.Operation]
  [Phase     extension.Phase]
  [Handler   extension.Handler]
  [Bundle    extension.Bundle]
  )

(type: #export Path
  (Path' Synthesis))

(def: #export path/pop
  Path
  #Pop)

(template [<name> <kind>]
  [(template: #export (<name> content)
     (.<| #..Access
          <kind>
          content))]

  [path/side   #..Side]
  [path/member #..Member]
  )

(template [<name> <kind> <side>]
  [(template: #export (<name> content)
     (.<| #..Access
          <kind>
          <side>
          content))]

  [side/left    #..Side   #.Left]
  [side/right   #..Side   #.Right]
  [member/left  #..Member #.Left]
  [member/right #..Member #.Right]
  )

(template [<name> <tag>]
  [(template: #export (<name> content)
     (<tag> content))]

  [path/bind #..Bind]
  [path/then #..Then]
  )

(template [<name> <tag>]
  [(template: #export (<name> left right)
     (<tag> [left right]))]

  [path/alt  #..Alt]
  [path/seq  #..Seq]
  )

(type: #export Abstraction
  (Abstraction' Synthesis))

(type: #export Apply
  (Apply' Synthesis))

(def: #export unit Text "")

(template [<with> <query> <tag> <type>]
  [(def: #export (<with> value)
     (-> <type> (All [a] (-> (Operation a) (Operation a))))
     (extension.temporary (set@ <tag> value)))

   (def: #export <query>
     (Operation <type>)
     (extension.read (get@ <tag>)))]

  [with-locals    locals    #locals    Nat]
  [with-currying? currying? #currying? Bit]
  )

(def: #export with-new-local
  (All [a] (-> (Operation a) (Operation a)))
  (<<| (do phase.monad
         [locals ..locals])
       (..with-locals (inc locals))))

(template [<name> <tag>]
  [(template: #export (<name> content)
     (#..Primitive (<tag> content)))]

  [bit  #..Bit]
  [i64  #..I64]
  [f64  #..F64]
  [text #..Text]
  )

(template [<name> <tag>]
  [(template: #export (<name> content)
     (<| #..Structure
         <tag>
         content))]

  [variant #analysis.Variant]
  [tuple   #analysis.Tuple]
  )

(template [<name> <tag>]
  [(template: #export (<name> content)
     (.<| #..Reference
          <tag>
          content))]

  [variable         reference.variable]
  [constant         reference.constant]
  [variable/local   reference.local]
  [variable/foreign reference.foreign]
  )

(template [<name> <family> <tag>]
  [(template: #export (<name> content)
     (.<| #..Control
          <family>
          <tag>
          content))]

  [branch/case          #..Branch   #..Case]
  [branch/let           #..Branch   #..Let]
  [branch/if            #..Branch   #..If]
  [branch/get           #..Branch   #..Get]

  [loop/recur           #..Loop     #..Recur]
  [loop/scope           #..Loop     #..Scope]

  [function/abstraction #..Function #..Abstraction]
  [function/apply       #..Function #..Apply]
  )

(def: #export (%path' %then value)
  (All [a] (-> (Format a) (Format (Path' a))))
  (case value
    #Pop
    "_"

    (#Bit-Fork when then else)
    (format "(?"
            " " (%.bit when) " " (%path' %then then)
            (case else
              (#.Some else)
              (format " " (%.bit (not when)) " " (%path' %then else))

              #.None
              "")
            ")")
    
    (^template [<tag> <format>]
      (<tag> cons)
      (|> (#.Cons cons)
          (list@map (function (_ [test then])
                      (format (<format> test) " " (%path' %then then))))
          (text.join-with " ")
          (text.enclose ["(? " ")"])))
    ([#I64-Fork (|>> .int %.int)]
     [#F64-Fork %.frac]
     [#Text-Fork %.text])
    
    (#Access access)
    (case access
      (#Side side)
      (case side
        (#.Left lefts)
        (format "(" (%.nat lefts) " #0" ")")
        
        (#.Right lefts)
        (format "(" (%.nat lefts) " #1" ")"))
      
      (#Member member)
      (case member
        (#.Left lefts)
        (format "[" (%.nat lefts) " #0" "]")
        
        (#.Right lefts)
        (format "[" (%.nat lefts) " #1" "]")))
    
    (#Bind register)
    (format "(@ " (%.nat register) ")")
    
    (#Alt left right)
    (format "(| " (%path' %then left) " " (%path' %then right) ")")
    
    (#Seq left right)
    (format "(& " (%path' %then left) " " (%path' %then right) ")")
    
    (#Then then)
    (|> (%then then)
        (text.enclose ["(! " ")"]))))

(def: #export (%synthesis value)
  (Format Synthesis)
  (case value
    (#Primitive primitive)
    (case primitive
      (^template [<pattern> <format>]
        (<pattern> value)
        (<format> value))
      ([#Bit  %.bit]
       [#F64  %.frac]
       [#Text %.text])
      
      (#I64 value)
      (%.int (.int value)))

    (#Structure structure)
    (case structure
      (#analysis.Variant [lefts right? content])
      (|> (%synthesis content)
          (format (%.nat lefts) " " (%.bit right?) " ")
          (text.enclose ["(" ")"]))
      
      (#analysis.Tuple members)
      (|> members
          (list@map %synthesis)
          (text.join-with " ")
          (text.enclose ["[" "]"])))

    (#Reference reference)
    (reference.format reference)

    (#Control control)
    (case control
      (#Function function)
      (case function
        (#Abstraction [environment arity body])
        (let [environment' (|> environment
                               (list@map %synthesis)
                               (text.join-with " ")
                               (text.enclose ["[" "]"]))]
          (|> (format environment' " " (%.nat arity) " " (%synthesis body))
              (text.enclose ["(#function " ")"])))
        
        (#Apply func args)
        (|> args
            (list@map %synthesis)
            (text.join-with " ")
            (format (%synthesis func) " ")
            (text.enclose ["(" ")"])))

      (#Branch branch)
      (case branch
        (#Let input register body)
        (|> (format (%.nat register) " " (%synthesis input) " " (%synthesis body))
            (text.enclose ["(#let " ")"]))
        
        (#If test then else)
        (|> (format (%synthesis test) " " (%synthesis then) " " (%synthesis else))
            (text.enclose ["(#if " ")"]))

        (#Get members record)
        (|> (format (%.list (%path' %synthesis)
                            (list@map (|>> #Member #Access) members))
                    " " (%synthesis record))
            (text.enclose ["(#get " ")"]))
        
        (#Case input path)
        (|> (format (%synthesis input) " " (%path' %synthesis path))
            (text.enclose ["(#case " ")"])))
      
      (#Loop loop)
      (case loop
        (#Scope scope)
        (|> (format (%.nat (get@ #start scope))
                    " " (|> (get@ #inits scope)
                            (list@map %synthesis)
                            (text.join-with " ")
                            (text.enclose ["[" "]"]))
                    " " (%synthesis (get@ #iteration scope)))
            (text.enclose ["(#loop " ")"]))
        
        (#Recur args)
        (|> args
            (list@map %synthesis)
            (text.join-with " ")
            (text.enclose ["(#recur " ")"]))))

    (#Extension [name args])
    (|> (list@map %synthesis args)
        (text.join-with " ")
        (format (%.text name) " ")
        (text.enclose ["(" ")"]))))

(def: #export %path
  (Format Path)
  (%path' %synthesis))

(structure: #export primitive-equivalence
  (Equivalence Primitive)
  
  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag> <eq> <format>]
        [(<tag> reference') (<tag> sample')]
        (<eq> reference' sample'))
      ([#Bit  bit@=  %.bit]
       [#F64  f.=    %.frac]
       [#Text text@= %.text])

      [(#I64 reference') (#I64 sample')]
      (i.= (.int reference') (.int sample'))

      _
      false)))

(structure: primitive-hash
  (Hash Primitive)

  (def: &equivalence ..primitive-equivalence)

  (def: hash
    (|>> (case> (^template [<tag> <hash>]
                  (<tag> value')
                  (:: <hash> hash value'))
                ([#Bit  bit.hash]
                 [#F64  f.hash]
                 [#Text text.hash]
                 [#I64  i64.hash])))))

(def: side-equivalence
  (Equivalence Side)
  (sum.equivalence n.equivalence n.equivalence))

(def: member-equivalence
  (Equivalence Member)
  (sum.equivalence n.equivalence n.equivalence))

(def: member-hash
  (Hash Member)
  (sum.hash n.hash n.hash))

(structure: #export access-equivalence
  (Equivalence Access)
  
  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag> <equivalence>]
        [(<tag> reference) (<tag> sample)]
        (:: <equivalence> = reference sample))
      ([#Side ..side-equivalence]
       [#Member ..member-equivalence])

      _
      false)))

(structure: access-hash
  (Hash Access)

  (def: &equivalence ..access-equivalence)
  
  (def: (hash value)
    (let [sub-hash (sum.hash n.hash n.hash)]
      (case value
        (^template [<tag>]
          (<tag> value)
          (:: sub-hash hash value))
        ([#Side]
         [#Member])))))

(structure: #export (path'-equivalence equivalence)
  (All [a] (-> (Equivalence a) (Equivalence (Path' a))))

  (def: (= reference sample)
    (case [reference sample]
      [#Pop #Pop]
      true

      [(#Bit-Fork reference-when reference-then reference-else)
       (#Bit-Fork sample-when sample-then sample-else)]
      (and (bit@= reference-when sample-when)
           (= reference-then sample-then)
           (:: (maybe.equivalence =) = reference-else sample-else))

      (^template [<tag> <equivalence>]
        [(<tag> reference-cons)
         (<tag> sample-cons)]
        (:: (list.equivalence (equivalence.product <equivalence> =)) =
            (#.Cons reference-cons)
            (#.Cons sample-cons)))
      ([#I64-Fork i64.equivalence]
       [#F64-Fork f.equivalence]
       [#Text-Fork text.equivalence])
      
      (^template [<tag> <equivalence>]
        [(<tag> reference') (<tag> sample')]
        (:: <equivalence> = reference' sample'))
      ([#Access ..access-equivalence]
       [#Then   equivalence])
      
      [(#Bind reference') (#Bind sample')]
      (n.= reference' sample')

      (^template [<tag>]
        [(<tag> leftR rightR) (<tag> leftS rightS)]
        (and (= leftR leftS)
             (= rightR rightS)))
      ([#Alt]
       [#Seq])

      _
      false)))

(structure: (path'-hash super)
  (All [a] (-> (Hash a) (Hash (Path' a))))

  (def: &equivalence
    (..path'-equivalence (:: super &equivalence)))
  
  (def: (hash value)
    (case value
      #Pop
      2

      (#Access access)
      (n.* 3 (:: ..access-hash hash access))

      (#Bind register)
      (n.* 5 (:: n.hash hash register))

      (#Bit-Fork when then else)
      ($_ n.* 7
          (:: bit.hash hash when)
          (hash then)
          (:: (maybe.hash (path'-hash super)) hash else))

      (^template [<factor> <tag> <hash>]
        (<tag> cons)
        (let [case-hash (product.hash <hash>
                                      (path'-hash super))
              cons-hash (product.hash case-hash (list.hash case-hash))]
          (n.* <factor> (:: cons-hash hash cons))))
      ([11 #I64-Fork i64.hash]
       [13 #F64-Fork f.hash]
       [17 #Text-Fork text.hash])

      (^template [<factor> <tag>]
        (<tag> fork)
        (let [recur-hash (path'-hash super)
              fork-hash (product.hash recur-hash recur-hash)]
          (n.* <factor> (:: fork-hash hash fork))))
      ([19 #Alt]
       [23 #Seq])

      (#Then body)
      (n.* 29 (:: super hash body))
      )))

(structure: (branch-equivalence (^open "/@."))
  (All [a] (-> (Equivalence a) (Equivalence (Branch a))))

  (def: (= reference sample)
    (case [reference sample]
      [(#Let [reference-input reference-register reference-body])
       (#Let [sample-input sample-register sample-body])]
      (and (/@= reference-input sample-input)
           (n.= reference-register sample-register)
           (/@= reference-body sample-body))

      [(#If [reference-test reference-then reference-else])
       (#If [sample-test sample-then sample-else])]
      (and (/@= reference-test sample-test)
           (/@= reference-then sample-then)
           (/@= reference-else sample-else))
      
      [(#Get [reference-path reference-record])
       (#Get [sample-path sample-record])]
      (and (:: (list.equivalence ..member-equivalence) = reference-path sample-path)
           (/@= reference-record sample-record))
      
      [(#Case [reference-input reference-path])
       (#Case [sample-input sample-path])]
      (and (/@= reference-input sample-input)
           (:: (path'-equivalence /@=) = reference-path sample-path))
      
      _
      false)))

(structure: (branch-hash super)
  (All [a] (-> (Hash a) (Hash (Branch a))))

  (def: &equivalence
    (..branch-equivalence (:: super &equivalence)))
  
  (def: (hash value)
    (case value
      (#Let [input register body])
      ($_ n.* 2
          (:: super hash input)
          (:: n.hash hash register)
          (:: super hash body))

      (#If [test then else])
      ($_ n.* 3
          (:: super hash test)
          (:: super hash then)
          (:: super hash else))
      
      (#Get [path record])
      ($_ n.* 5
          (:: (list.hash ..member-hash) hash path)
          (:: super hash record))
      
      (#Case [input path])
      ($_ n.* 7
          (:: super hash input)
          (:: (..path'-hash super) hash path))
      )))

(structure: (loop-equivalence (^open "/@."))
  (All [a] (-> (Equivalence a) (Equivalence (Loop a))))

  (def: (= reference sample)
    (case [reference sample]
      [(#Scope [reference-start reference-inits reference-iteration])
       (#Scope [sample-start sample-inits sample-iteration])]
      (and (n.= reference-start sample-start)
           (:: (list.equivalence /@=) = reference-inits sample-inits)
           (/@= reference-iteration sample-iteration))

      [(#Recur reference) (#Recur sample)]
      (:: (list.equivalence /@=) = reference sample)
      
      _
      false)))

(structure: (loop-hash super)
  (All [a] (-> (Hash a) (Hash (Loop a))))

  (def: &equivalence
    (..loop-equivalence (:: super &equivalence)))
  
  (def: (hash value)
    (case value
      (#Scope [start inits iteration])
      ($_ n.* 2
          (:: n.hash hash start)
          (:: (list.hash super) hash inits)
          (:: super hash iteration))

      (#Recur resets)
      ($_ n.* 3
          (:: (list.hash super) hash resets))
      )))

(structure: (function-equivalence (^open "/@."))
  (All [a] (-> (Equivalence a) (Equivalence (Function a))))

  (def: (= reference sample)
    (case [reference sample]
      [(#Abstraction [reference-environment reference-arity reference-body])
       (#Abstraction [sample-environment sample-arity sample-body])]
      (and (:: (list.equivalence /@=) = reference-environment sample-environment)
           (n.= reference-arity sample-arity)
           (/@= reference-body sample-body))
      
      [(#Apply [reference-abstraction reference-arguments])
       (#Apply [sample-abstraction sample-arguments])]
      (and (/@= reference-abstraction sample-abstraction)
           (:: (list.equivalence /@=) = reference-arguments sample-arguments))
      
      _
      false)))

(structure: (function-hash super)
  (All [a] (-> (Hash a) (Hash (Function a))))

  (def: &equivalence
    (..function-equivalence (:: super &equivalence)))
  
  (def: (hash value)
    (case value
      (#Abstraction [environment arity body])
      ($_ n.* 2
          (:: (list.hash super) hash environment)
          (:: n.hash hash arity)
          (:: super hash body))
      
      (#Apply [abstraction arguments])
      ($_ n.* 3
          (:: super hash abstraction)
          (:: (list.hash super) hash arguments))
      )))

(structure: (control-equivalence (^open "/@."))
  (All [a] (-> (Equivalence a) (Equivalence (Control a))))

  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag> <equivalence>]
        [(<tag> reference) (<tag> sample)]
        (:: (<equivalence> /@=) = reference sample))
      ([#Branch ..branch-equivalence]
       [#Loop ..loop-equivalence]
       [#Function ..function-equivalence])
      
      _
      false)))

(structure: (control-hash super)
  (All [a] (-> (Hash a) (Hash (Control a))))

  (def: &equivalence
    (..control-equivalence (:: super &equivalence)))

  (def: (hash value)
    (case value
      (^template [<factor> <tag> <hash>]
        (<tag> value)
        (n.* <factor> (:: (<hash> super) hash value)))
      ([2 #Branch ..branch-hash]
       [3 #Loop ..loop-hash]
       [5 #Function ..function-hash])
      )))

(structure: #export equivalence
  (Equivalence Synthesis)
  
  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag> <equivalence>]
        [(<tag> reference') (<tag> sample')]
        (:: <equivalence> = reference' sample'))
      ([#Primitive ..primitive-equivalence]
       [#Structure (analysis.composite-equivalence =)]
       [#Reference reference.equivalence]
       [#Control (control-equivalence =)]
       [#Extension (extension.equivalence =)])

      _
      false)))

(def: #export path-equivalence
  (Equivalence Path)
  (path'-equivalence equivalence))

(structure: #export hash
  (Hash Synthesis)

  (def: &equivalence ..equivalence)

  (def: (hash value)
    (let [recur-hash [..equivalence hash]]
      (case value
        (^template [<tag> <hash>]
          (<tag> value)
          (:: <hash> hash value))
        ([#Primitive ..primitive-hash]
         [#Structure (analysis.composite-hash recur-hash)]
         [#Reference reference.hash]
         [#Control (..control-hash recur-hash)]
         [#Extension (extension.hash recur-hash)])))))

(template: #export (!bind-top register thenP)
  ($_ ..path/seq
      (#..Bind register)
      #..Pop
      thenP))

(template: #export (!multi-pop nextP)
  ($_ ..path/seq
      #..Pop
      #..Pop
      nextP))

## TODO: There are sister patterns to the simple side checks for tuples.
## These correspond to the situation where tuple members are accessed
## and bound to variables, but those variables are never used, so they
## become POPs.
## After re-implementing unused-variable-elimination, must add those
## pattern-optimizations again, since a lot of BINDs will become POPs
## and thus will result in useless code being generated.
(template [<name> <side>]
  [(template: #export (<name> idx nextP)
     ($_ ..path/seq
         (<side> idx)
         #..Pop
         nextP))]

  [simple-left-side ..side/left]
  [simple-right-side ..side/right]
  )
