(.module:
  [lux (#- Module)
   [abstract
    [monad (#+ do)]]
   [data
    [collection
     ["." list ("#@." monoid)]]]]
  [//
   ["." analysis]
   ["." synthesis]
   ["." generation]
   [phase
    ["." extension]]
   [///
    ["." phase]
    [meta
     [archive
      [descriptor (#+ Module)]]]]])

(type: #export (Component state phase)
  {#state state
   #phase phase})

(type: #export (State anchor expression directive)
  {#analysis (Component analysis.State+
                        analysis.Phase)
   #synthesis (Component synthesis.State+
                         synthesis.Phase)
   #generation (Component (generation.State+ anchor expression directive)
                          (generation.Phase anchor expression directive))})

(type: #export Import
  {#module Module
   #alias Text})

(type: #export Requirements
  {#imports (List Import)
   #referrals (List Code)})

(def: #export no-requirements
  Requirements
  {#imports (list)
   #referrals (list)})

(def: #export (merge-requirements left right)
  (-> Requirements Requirements Requirements)
  {#imports (list@compose (get@ #imports left) (get@ #imports right))
   #referrals (list@compose (get@ #referrals left) (get@ #referrals right))})

(template [<special> <general>]
  [(type: #export (<special> anchor expression directive)
     (<general> (..State anchor expression directive) Code Requirements))]

  [State+    extension.State]
  [Operation extension.Operation]
  [Phase     extension.Phase]
  [Handler   extension.Handler]
  [Bundle    extension.Bundle]
  )

(template [<name> <component> <operation>]
  [(def: #export <name>
     (All [anchor expression directive output]
       (-> (<operation> output)
           (Operation anchor expression directive output)))
     (|>> (phase.sub [(get@ [<component> #..state])
                      (set@ [<component> #..state])])
          extension.lift))]

  [lift-analysis   #..analysis   analysis.Operation]
  [lift-synthesis  #..synthesis  synthesis.Operation]
  [lift-generation #..generation (generation.Operation anchor expression directive)]
  )

(def: #export (set-current-module module)
  (All [anchor expression directive]
    (-> Module (Operation anchor expression directive Any)))
  (do phase.monad
    [_ (..lift-analysis
        (analysis.set-current-module module))]
    (..lift-generation
     (generation.enter-module module))))
