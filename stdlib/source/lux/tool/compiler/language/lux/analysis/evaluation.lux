(.module:
  [lux (#- Module)
   [abstract
    [monad (#+ do)]]
   [control
    ["." try]]
   [data
    ["." text
     ["%" format (#+ format)]]
    [number
     ["n" nat]]]
   ["." macro]]
  [// (#+ Operation)
   [macro (#+ Expander)]
   [//
    [phase
     [".P" extension]
     [".P" synthesis]
     [".P" analysis
      ["." type]]
     [//
      ["." synthesis]
      ["." generation (#+ Context)]
      [///
       ["." phase]
       [meta
        [archive (#+ Archive)
         [descriptor (#+ Module)]]]]]]]])

(type: #export Eval
  (-> Archive Nat Type Code (Operation Any)))

(def: (context [module-id artifact-id])
  (-> Context Context)
  ## TODO: Find a better way that doesn't rely on clever tricks.
  [(n.- module-id 0) artifact-id])

(def: #export (evaluator expander synthesis-state generation-state generate)
  (All [anchor expression artifact]
    (-> Expander
        synthesis.State+
        (generation.State+ anchor expression artifact)
        (generation.Phase anchor expression artifact)
        Eval))
  (let [analyze (analysisP.phase expander)]
    (function (eval archive count type exprC)
      (do phase.monad
        [exprA (type.with-type type
                 (analyze archive exprC))
         module (extensionP.lift
                 macro.current-module-name)]
        (phase.lift (do try.monad
                      [exprS (|> exprA (synthesisP.phase archive) (phase.run synthesis-state))]
                      (phase.run generation-state
                                 (do phase.monad
                                   [exprO (generate archive exprS)
                                    module-id (generation.module-id module archive)]
                                   (generation.evaluate! (..context [module-id count]) exprO)))))))))
