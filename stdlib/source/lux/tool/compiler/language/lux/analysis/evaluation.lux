(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [control
    ["." try]]
   [data
    [text
     ["%" format (#+ format)]]]]
  [// (#+ Operation)
   [macro (#+ Expander)]
   [//
    [phase
     [".P" synthesis]
     [".P" analysis
      ["." type]]
     [//
      ["." synthesis]
      ["." generation]
      [///
       ["." phase]]]]]])

(type: #export Eval
  (-> Nat Type Code (Operation Any)))

(def: #export (evaluator expander synthesis-state generation-state generate)
  (All [anchor expression artifact]
    (-> Expander
        synthesis.State+
        (generation.State+ anchor expression artifact)
        (generation.Phase anchor expression artifact)
        Eval))
  (let [analyze (analysisP.phase expander)]
    (function (eval count type exprC)
      (do phase.monad
        [exprA (type.with-type type
                 (analyze exprC))]
        (phase.lift (do try.monad
                      [exprS (|> exprA synthesisP.phase (phase.run synthesis-state))]
                      (phase.run generation-state
                                 (do phase.monad
                                   [exprO (generate exprS)]
                                   (generation.evaluate! (format "eval" (%.nat count)) exprO)))))))))
