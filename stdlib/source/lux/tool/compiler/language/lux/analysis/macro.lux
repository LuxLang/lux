(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]]
   [data
    ["." text
     ["%" format (#+ format)]]]
   ["." meta]]
  [/////
   ["." phase]])

(exception: #export (expansion_failed {macro Name} {inputs (List Code)} {error Text})
  (exception.report
   ["Macro" (%.name macro)]
   ["Inputs" (exception.enumerate %.code inputs)]
   ["Error" error]))

(exception: #export (must_have_single_expansion {macro Name} {inputs (List Code)} {outputs (List Code)})
  (exception.report
   ["Macro" (%.name macro)]
   ["Inputs" (exception.enumerate %.code inputs)]
   ["Outputs" (exception.enumerate %.code outputs)]))

(type: #export Expander
  (-> Macro (List Code) Lux (Try (Try [Lux (List Code)]))))

(def: #export (expand expander name macro inputs)
  (-> Expander Name Macro (List Code) (Meta (List Code)))
  (function (_ state)
    (do try.monad
      [output (expander macro inputs state)]
      (case output
        (#try.Success output)
        (#try.Success output)
        
        (#try.Failure error)
        ((meta.fail (exception.construct ..expansion_failed [name inputs error])) state)))))

(def: #export (expand_one expander name macro inputs)
  (-> Expander Name Macro (List Code) (Meta Code))
  (do meta.monad
    [expansion (expand expander name macro inputs)]
    (case expansion
      (^ (list single))
      (wrap single)

      _
      (meta.fail (exception.construct ..must_have_single_expansion [name inputs expansion])))))
