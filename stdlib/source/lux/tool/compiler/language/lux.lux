(.module:
  [lux #*
   [control
    ["<>" parser
     ["<b>" binary (#+ Parser)]]]
   [data
    [format
     ["_" binary (#+ Writer)]]]])

## TODO: Remove #module-hash, #imports & #module-state ASAP.
## TODO: Not just from this parser, but from the lux.Module type.
(def: #export writer
  (Writer .Module)
  (let [definition (: (Writer Definition)
                      ($_ _.and _.bit _.type _.code _.any))
        name (: (Writer Name)
                (_.and _.text _.text))
        alias name
        global (: (Writer Global)
                  (_.or alias definition))
        tag (: (Writer [Nat (List Name) Bit Type])
               ($_ _.and
                   _.nat
                   (_.list name)
                   _.bit
                   _.type))
        type (: (Writer [(List Name) Bit Type])
                ($_ _.and
                    (_.list name)
                    _.bit
                    _.type))]
    ($_ _.and
        ## #module-hash
        _.nat
        ## #module-aliases
        (_.list alias)
        ## #definitions
        (_.list (_.and _.text global))
        ## #imports
        (_.list _.text)
        ## #tags
        (_.list (_.and _.text tag))
        ## #types
        (_.list (_.and _.text type))
        ## #module-annotations
        (_.maybe _.code)
        ## #module-state
        _.any)))

(def: #export parser
  (Parser .Module)
  (let [definition (: (Parser Definition)
                      ($_ <>.and <b>.bit <b>.type <b>.code <b>.any))
        name (: (Parser Name)
                (<>.and <b>.text <b>.text))
        alias name
        global (: (Parser Global)
                  (<>.or alias definition))
        tag (: (Parser [Nat (List Name) Bit Type])
               ($_ <>.and
                   <b>.nat
                   (<b>.list name)
                   <b>.bit
                   <b>.type))
        type (: (Parser [(List Name) Bit Type])
                ($_ <>.and
                    (<b>.list name)
                    <b>.bit
                    <b>.type))]
    ($_ <>.and
        ## #module-hash
        <b>.nat
        ## #module-aliases
        (<b>.list alias)
        ## #definitions
        (<b>.list (<>.and <b>.text global))
        ## #imports
        (<b>.list <b>.text)
        ## #tags
        (<b>.list (<>.and <b>.text tag))
        ## #types
        (<b>.list (<>.and <b>.text type))
        ## #module-annotations
        (<b>.maybe <b>.code)
        ## #module-state
        (:: <>.monad wrap #.Cached))))
