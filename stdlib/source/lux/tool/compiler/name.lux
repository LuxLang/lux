(.module:
  [lux #*
   [data
    ["." maybe]
    ["." text
     format]]])

(`` (template: (!sanitize char)
      ("lux syntax char case!" char
       [["*"] "_AS"
        ["+"] "_PL"
        ["-"] "_DS"
        ["/"] "_SL"
        ["\"] "_BS"
        ["_"] "_US"
        ["%"] "_PC"
        ["$"] "_DL"
        ["'"] "_QU"
        ["`"] "_BQ"
        ["@"] "_AT"
        ["^"] "_CR"
        ["&"] "_AA"
        ["="] "_EQ"
        ["!"] "_BG"
        ["?"] "_QM"
        [":"] "_CO"
        [";"] "_SC"
        ["."] "_PD"
        [","] "_CM"
        ["<"] "_LT"
        [">"] "_GT"
        ["~"] "_TI"
        ["|"] "_PI"]
       (text.from-code char))))

(def: #export (normalize name)
  (-> Text Text)
  (let [name/size (text.size name)]
    (loop [idx 0
           output ""]
      (if (n/< name/size idx)
        (recur (inc idx)
               (|> name
                   ("lux text char" idx)
                   !sanitize
                   (format output)))
        output))))

(def: #export (definition [module short])
  (-> Name Text)
  (format (normalize module) "___" (normalize short)))
