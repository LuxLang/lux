(.module:
  [lux (#- Module Source Code)
   [control
    ["ex" exception (#+ exception:)]]
   [data
    ["." error (#+ Error)]
    [collection
     ["." dictionary (#+ Dictionary)]]]
   [world
    ["." file (#+ Path)]]]
  [/
   [meta
    ["." archive (#+ Archive)
     [key (#+ Key)]
     [descriptor (#+ Descriptor Module)]
     [document (#+ Document)]]]])

(type: #export Code
  Text)

(type: #export Parameter
  Text)

(type: #export Input
  {#module Module
   #file Path
   #hash Nat
   #code Code})

(type: #export (Output o)
  (Dictionary Text o))

(type: #export (Compilation d o)
  {#dependencies (List Module)
   #process (-> Archive
                (Error (Either (Compilation d o)
                               [[Descriptor (Document d)] (Output o)])))})

(type: #export (Compiler d o)
  (-> Input (Compilation d o)))

(type: #export (Instancer d o)
  (-> (Key d) (List Parameter) (Compiler d o)))

(exception: #export (cannot-compile {module Module})
  (ex.report ["Module" module]))
