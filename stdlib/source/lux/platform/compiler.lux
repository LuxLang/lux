(.module:
  [lux (#- Module Source Code)
   [control
    ["ex" exception (#+ exception:)]]
   [data
    ["." error (#+ Error)]
    [collection
     ["." dictionary (#+ Dictionary)]]]
   [world
    ["." binary (#+ Binary)]
    ["." file (#+ File)]]]
  [/
   [meta
    ["." archive (#+ Archive)
     [key (#+ Key)]
     [descriptor (#+ Module)]
     [document (#+ Document)]]]])

(type: #export Code Text)

(type: #export Parameter Text)

(type: #export Input
  {#module Module
   #file File
   #code Code})

(type: #export Output
  (Dictionary Text Binary))

(type: #export (Compilation d)
  {#dependencies (List Module)
   #process (-> Archive
                (Error (Either (Compilation d)
                               [(Document d) Output])))})

(type: #export (Compiler d)
  (-> (Key d) (List Parameter) Input (Compilation d)))

(type: #export (Importer !)
  (-> (file.System !) Module Archive (! (Error Archive))))

(exception: #export (cannot-compile {module Module})
  (ex.report ["Module" module]))
