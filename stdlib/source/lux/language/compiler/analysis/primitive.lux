(.module:
  [lux (#- nat int rev)
   [control monad]
   [macro]]
  [// (#+ Analysis)
   [".A" type]])

## [Analysers]
(do-template [<name> <type> <tag>]
  [(def: #export (<name> value)
     (-> <type> (Meta Analysis))
     (do macro.Monad<Meta>
       [_ (typeA.infer <type>)]
       (wrap (#//.Primitive (<tag> value)))))]

  [bool Bool #//.Bool]
  [nat  Nat  #//.Nat]
  [int  Int  #//.Int]
  [rev  Rev  #//.Rev]
  [frac Frac #//.Frac]
  [text Text #//.Text]
  )

(def: #export unit
  (Meta Analysis)
  (do macro.Monad<Meta>
    [_ (typeA.infer Any)]
    (wrap (#//.Primitive #//.Unit))))
