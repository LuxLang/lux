(.module:
  [lux #- i64 Scope]
  (lux (control [monad #+ do])
       (data [error #+ Error]
             (collection ["dict" dictionary #+ Dictionary])))
  [///reference #+ Register Variable Reference]
  [// #+ Operation Compiler]
  [//analysis #+ Environment Arity Analysis])

(type: #export Resolver (Dictionary Variable Variable))

(type: #export State
  {#scope-arity Arity
   #resolver Resolver
   #direct? Bool
   #locals Nat})

(def: #export fresh-resolver
  Resolver
  (dict.new ///reference.Hash<Variable>))

(def: #export init
  State
  {#scope-arity +0
   #resolver fresh-resolver
   #direct? false
   #locals +0})

(type: #export Primitive
  (#Bool Bool)
  (#I64 I64)
  (#F64 Frac)
  (#Text Text))

(type: #export (Structure a)
  (#Variant (//analysis.Variant a))
  (#Tuple (//analysis.Tuple a)))

(type: #export Side
  (Either Nat Nat))

(type: #export Member
  (Either Nat Nat))

(type: #export Access
  (#Side Side)
  (#Member Member))

(type: #export (Path' s)
  #Pop
  (#Test Primitive)
  (#Access Access)
  (#Bind Register)
  (#Alt (Path' s) (Path' s))
  (#Seq (Path' s) (Path' s))
  (#Then s))

(type: #export (Abstraction' s)
  {#environment Environment
   #arity Arity
   #body s})

(type: #export (Branch s)
  (#Case s (Path' s))
  (#Let s Register s)
  (#If s s s))

(type: #export (Scope s)
  {#start Register
   #inits (List s)
   #iteration s})

(type: #export (Loop s)
  (#Scope (Scope s))
  (#Recur (List s)))

(type: #export (Function s)
  (#Abstraction (Abstraction' s))
  (#Apply s (List s)))

(type: #export (Control s)
  (#Branch (Branch s))
  (#Loop (Loop s))
  (#Function (Function s)))

(type: #export #rec Synthesis
  (#Primitive Primitive)
  (#Structure (Structure Synthesis))
  (#Reference Reference)
  (#Control (Control Synthesis)))

(type: #export Path
  (Path' Synthesis))

(def: #export path/pop
  Path
  #Pop)

(do-template [<name> <tag>]
  [(template: #export (<name> content)
     (#..Test (<tag> content)))]

  [path/bool #..Bool]
  [path/i64  #..I64]
  [path/f64  #..F64]
  [path/text #..Text]
  )

(do-template [<name> <kind>]
  [(template: #export (<name> content)
     (.<| #..Access
          <kind>
          content))]

  [path/side   #..Side]
  [path/member #..Member]
  )

(do-template [<name> <kind> <side>]
  [(template: #export (<name> content)
     (.<| #..Access
          <kind>
          <side>
          content))]

  [side/left    #..Side   #.Left]
  [side/right   #..Side   #.Right]
  [member/left  #..Member #.Left]
  [member/right #..Member #.Right]
  )

(do-template [<name> <tag>]
  [(template: #export (<name> content)
     (<tag> content))]

  [path/alt  #..Alt]
  [path/seq  #..Seq]
  [path/then #..Then]
  )

(type: #export Abstraction
  (Abstraction' Synthesis))

(def: #export unit Text "")

(type: #export Synthesizer
  (Compiler ..State Analysis Synthesis))

(do-template [<name> <value>]
  [(def: #export <name>
     (All [a] (-> (Operation ..State a) (Operation ..State a)))
     (//.localized (set@ #direct? <value>)))]

  [indirectly false]
  [directly   true]
  )

(do-template [<name> <type> <tag>]
  [(def: #export (<name> value)
     (-> <type> (All [a] (-> (Operation ..State a) (Operation ..State a))))
     (//.localized (set@ <tag> value)))]

  [with-scope-arity Arity    #scope-arity]
  [with-resolver    Resolver #resolver]
  [with-locals      Nat      #locals]
  )

(def: #export (with-abstraction arity resolver)
  (All [o]
    (-> Arity Resolver
        (-> (Operation ..State o) (Operation ..State o))))
  (//.with-state {#scope-arity arity
                  #resolver resolver
                  #direct? true
                  #locals arity}))

(do-template [<name> <tag> <type>]
  [(def: #export <name>
     (Operation ..State <type>)
     (function (_ state)
       (#error.Success [state (get@ <tag> state)])))]

  [scope-arity #scope-arity Arity]
  [resolver    #resolver    Resolver]
  [direct?     #direct?     Bool]
  [locals      #locals      Nat]
  )

(def: #export with-new-local
  (All [a] (-> (Operation ..State a) (Operation ..State a)))
  (<<| (do //.Monad<Operation>
         [locals ..locals])
       (..with-locals (inc locals))))

(do-template [<name> <tag>]
  [(template: #export (<name> content)
     (#..Primitive (<tag> content)))]

  [bool #..Bool]
  [i64  #..I64]
  [f64  #..F64]
  [text #..Text]
  )

(do-template [<name> <tag>]
  [(template: #export (<name> content)
     (<| #..Structure
         <tag>
         content))]

  [variant #..Variant]
  [tuple   #..Tuple]
  )

(do-template [<name> <tag>]
  [(template: #export (<name> content)
     (.<| #..Reference
          <tag>
          content))]

  [variable/local   ///reference.local]
  [variable/foreign ///reference.foreign]
  )

(do-template [<name> <family> <tag>]
  [(template: #export (<name> content)
     (.<| #..Control
          <family>
          <tag>
          content))]

  [branch/case          #..Branch   #..Case]
  [branch/let           #..Branch   #..Let]
  [branch/if            #..Branch   #..If]

  [loop/scope           #..Loop     #..Scope]
  [loop/recur           #..Loop     #..Recur]

  [function/abstraction #..Function #..Abstraction]
  [function/apply       #..Function #..Apply]
  )
