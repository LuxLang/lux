(.module:
  [lux #*
   [control [monad (#+ do)]]]
  [/////
   [host
    ["_" scheme (#+ Expression)]]
   ["." compiler
    [analysis (#+ Variant Tuple)]
    [synthesis (#+ Synthesis)]]]
  [//runtime (#+ Operation Compiler)]
  [//primitive])

(def: #export (tuple translate elemsS+)
  (-> Compiler (Tuple Synthesis) (Operation Expression))
  (case elemsS+
    #.Nil
    (//primitive.text synthesis.unit)

    (#.Cons singletonS #.Nil)
    (translate singletonS)

    _
    (do compiler.Monad<Operation>
      [elemsT+ (monad.map @ translate elemsS+)]
      (wrap (_.vector/* elemsT+)))))

(def: #export (variant translate [lefts right? valueS])
  (-> Compiler (Variant Synthesis) (Operation Expression))
  (do compiler.Monad<Operation>
    [valueT (translate valueS)]
    (wrap (//runtime.variant [lefts right? valueT]))))
