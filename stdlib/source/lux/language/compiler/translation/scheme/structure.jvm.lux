(.module:
  [lux #*
   [control
    ["." monad (#+ do)]]]
  [//
   ["." runtime (#+ Operation Compiler)]
   ["." primitive]
   ["." ///
    [analysis (#+ Variant Tuple)]
    ["." synthesis (#+ Synthesis)]
    [//
     [host
      ["_" scheme (#+ Expression)]]]]])

(def: #export (tuple translate elemsS+)
  (-> Compiler (Tuple Synthesis) (Operation Expression))
  (case elemsS+
    #.Nil
    (primitive.text synthesis.unit)

    (#.Cons singletonS #.Nil)
    (translate singletonS)

    _
    (do ///.Monad<Operation>
      [elemsT+ (monad.map @ translate elemsS+)]
      (wrap (_.vector/* elemsT+)))))

(def: #export (variant translate [lefts right? valueS])
  (-> Compiler (Variant Synthesis) (Operation Expression))
  (do ///.Monad<Operation>
    [valueT (translate valueS)]
    (wrap (runtime.variant [lefts right? valueT]))))
