(.module:
  [lux (#- Scope)
   [control
    ["." monad (#+ do)]]
   [data
    ["." product]
    ["." text
     format]
    [collection
     ["." list ("list/" Functor<List>)]]]]
  [//
   [runtime (#+ Operation Compiler)]
   ["." reference]
   ["/." //
    ["//." //
     [synthesis (#+ Scope Synthesis)]
     [//
      [host
       ["_" scheme (#+ Computation Var)]]]]]])

(def: @scope (_.var "scope"))

(def: #export (scope translate [start initsS+ bodyS])
  (-> Compiler (Scope Synthesis) (Operation Computation))
  (do ////.Monad<Operation>
    [initsO+ (monad.map @ translate initsS+)
     bodyO (///.with-anchor @scope
             (translate bodyS))]
    (wrap (_.letrec (list [@scope (_.lambda [(|> initsS+
                                            list.enumerate
                                            (list/map (|>> product.left (n/+ start) reference.local')))
                                        #.None]
                                       bodyO)])
                    (_.apply/* @scope initsO+)))))

(def: #export (recur translate argsS+)
  (-> Compiler (List Synthesis) (Operation Computation))
  (do ////.Monad<Operation>
    [@scope ///.anchor
     argsO+ (monad.map @ translate argsS+)]
    (wrap (_.apply/* @scope argsO+))))
