(.module:
  [lux (#- Scope)]
  (lux (control [monad (#+ do)])
       (data [product]
             [text]
             text/format
             (collection [list "list/" Functor<List>]))
       [macro])
  (///// (host ["_" scheme (#+ Computation Var)])
         [compiler]
         (compiler [synthesis (#+ Scope Synthesis)]))
  [///]
  [//runtime (#+ Operation Translator)]
  [//reference])

(def: @scope (_.var "scope"))

(def: #export (scope translate [start initsS+ bodyS])
  (-> Translator (Scope Synthesis) (Operation Computation))
  (do compiler.Monad<Operation>
    [initsO+ (monad.map @ translate initsS+)
     bodyO (///.with-anchor @scope
             (translate bodyS))]
    (wrap (_.letrec (list [@scope (_.lambda [(|> initsS+
                                            list.enumerate
                                            (list/map (|>> product.left (n/+ start) //reference.local')))
                                        #.None]
                                       bodyO)])
                    (_.apply/* @scope initsO+)))))

(def: #export (recur translate argsS+)
  (-> Translator (List Synthesis) (Operation Computation))
  (do compiler.Monad<Operation>
    [@scope ///.anchor
     argsO+ (monad.map @ translate argsS+)]
    (wrap (_.apply/* @scope argsO+))))
