(.module:
  [lux #*
   [control
    pipe]
   [data
    [text
     format]]]
  [//
   [runtime (#+ Operation)]
   [/// ("operation/" Monad<Operation>)
    [analysis (#+ Variant Tuple)]
    [synthesis (#+ Synthesis)]
    [//
     ["." reference (#+ Register Variable Reference)]
     ["." name]
     [host ["_" scheme (#+ Expression Var)]]]]])

(do-template [<name> <prefix>]
  [(def: #export <name>
     (-> Register Var)
     (|>> .int %i (format <prefix>) _.var))]

  [local'   "l"]
  [foreign' "f"]
  )

(def: #export variable'
  (-> Variable Var)
  (|>> (case> (#reference.Local register)
              (local' register)
              
              (#reference.Foreign register)
              (foreign' register))))

(def: #export variable
  (-> Variable (Operation Var))
  (|>> ..variable'
       operation/wrap))

(def: #export constant'
  (-> Ident Var)
  (|>> name.definition _.var))

(def: #export constant
  (-> Ident (Operation Var))
  (|>> constant' operation/wrap))

(def: #export reference'
  (-> Reference Expression)
  (|>> (case> (#reference.Constant value)
              (..constant' value)
              
              (#reference.Variable value)
              (..variable' value))))

(def: #export reference
  (-> Reference (Operation Expression))
  (|>> reference' operation/wrap))
