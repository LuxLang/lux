(.module:
  lux
  (lux (control [equivalence (#+ Equivalence)]
                [hash (#+ Hash)]
                pipe)))

(type: #export Register Nat)

(type: #export Variable
  (#Local Register)
  (#Foreign Register))

(type: #export Reference
  (#Variable Variable)
  (#Constant Ident))

(structure: #export _ (Equivalence Variable)
  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag>]
        [(<tag> reference') (<tag> sample')]
        (n/= reference' sample'))
      ([#Local] [#Foreign])

      _
      false)))

(structure: #export _ (Hash Variable)
  (def: eq Equivalence<Variable>)
  (def: (hash var)
    (case var
      (#Local register)
      (n/* +1 register)
      
      (#Foreign register)
      (n/* +2 register))))

(do-template [<name> <family> <tag>]
  [(template: #export (<name> content)
     (<| <family>
         <tag>
         content))]

  [local   #..Variable #..Local]
  [foreign #..Variable #..Foreign]
  )

(do-template [<name> <tag>]
  [(template: #export (<name> content)
     (<| <tag>
         content))]

  [variable #..Variable]
  [constant #..Constant]
  )

(def: #export self Reference (..local +0))

(def: #export self?
  (-> Variable Bool)
  (|>> ..variable
       (case> (^ (..local +0))
              true

              _
              false)))
