(;module:
  lux
  (lux (control functor
                applicative
                monad)
       function
       [compiler #+ with-gensyms]
       (macro [ast]
              [syntax #+ syntax:])))

(type: #export (Cont i o)
  {#;doc "Continuations."}
  (-> (-> i o) o))

(def: #export (continue k cont)
  {#;doc "Forces a continuation thunk to be evaluated."}
  (All [i o] (-> (-> i o) (Cont i o) o))
  (cont k))

(def: #export (run cont)
  {#;doc "Forces a continuation thunk to be evaluated."}
  (All [a] (-> (Cont a a) a))
  (cont id))

(struct: #export Functor<Cont> (All [o] (Functor (All [i] (Cont i o))))
  (def: (map f fv)
    (lambda [k] (fv (. k f)))))

(struct: #export Applicative<Cont> (All [o] (Applicative (All [i] (Cont i o))))
  (def: functor Functor<Cont>)

  (def: (wrap value)
    (lambda [k] (k value)))

  (def: (apply ff fv)
    (lambda [k]
      (|> (k (f v))
          (lambda [v]) fv
          (lambda [f]) ff))))

(struct: #export Monad<Cont> (All [o] (Monad (All [i] (Cont i o))))
  (def: applicative Applicative<Cont>)

  (def: (join ffa)
    (lambda [k]
      (ffa (continue k)))))

(def: #export (call/cc f)
  {#;doc "Call with current continuation."}
  (All [a b z]
    (-> (-> (-> a (Cont b z))
            (Cont a z))
        (Cont a z)))
  (lambda [k]
    (f (lambda [a] (lambda [_] (k a)))
       k)))

(syntax: #export (pending expr)
  {#;doc (doc "Turns any expression into a function that is pending a continuation."
              (pending (some-computation some-input)))}
  (with-gensyms [g!k]
    (wrap (list (` (;lambda [(~ g!k)] ((~ g!k) (~ expr))))))))

(def: #export (portal init)
  (All [i o z]
    (-> i
        (Cont [(-> i (Cont o z))
               i]
              z)))
  (call/cc (lambda [k]
             (do Monad<Cont>
               [#let [nexus (lambda nexus [val]
                              (k [nexus val]))]
                _ (k [nexus init])]
               (wrap (undefined))))))

(def: #export (reset scope)
  (All [i o] (-> (Cont i i) (Cont i o)))
  (lambda [k]
    (k (run scope))))

(def: #export (static f)
  (All [a]
    (-> (-> (-> a (Cont a a))
            (Cont a a))
        (Cont a a)))
  (lambda [oc]
    (f (lambda [a] (lambda [ic] (ic (oc a))))
       id)))
