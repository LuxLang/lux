(.module: lux
  (// [fold #+ Fold]))

(signature: #export (Monoid a)
  {#.doc "A way to compose values.

          Includes an identity value which does not alter any other value when combined with."}
  (: a
     identity)
  (: (-> a a a)
     compose))

(def: #export (compose Monoid<l> Monoid<r>)
  (All [l r] (-> (Monoid l) (Monoid r) (Monoid [l r])))
  (structure (def: identity
               [(:: Monoid<l> identity) (:: Monoid<r> identity)])
             
             (def: (compose [lL rL] [lR rR])
               [(:: Monoid<l> compose lL lR)
                (:: Monoid<r> compose rL rR)])))

(def: #export (fold Monoid<a> Fold<F> data)
  (All [a F] (-> (Monoid a) (Fold F) (F a) a))
  (let [(^open "a/") Monoid<a>]
    (:: Fold<F> fold a/compose a/identity data)))
