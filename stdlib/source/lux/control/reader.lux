(.module:
  [lux #*
   [abstract
    ["." functor (#+ Functor)]
    [apply (#+ Apply)]
    ["." monad (#+ Monad do)]]])

(type: #export (Reader r a)
  {#.doc "Computations that have access to some environmental value."}
  (-> r a))

(def: #export ask
  {#.doc "Get the environment."}
  (All [r] (Reader r r))
  (function (_ env) env))

(def: #export (local change proc)
  {#.doc "Run computation with a locally-modified environment."}
  (All [r a] (-> (-> r r) (Reader r a) (Reader r a)))
  (|>> change proc))

(def: #export (run env proc)
  (All [r a] (-> r (Reader r a) a))
  (proc env))

(structure: #export functor
  (All [r] (Functor (Reader r)))
  
  (def: (map f fa)
    (function (_ env)
      (f (fa env)))))

(structure: #export apply
  (All [r] (Apply (Reader r)))
  
  (def: &functor ..functor)

  (def: (apply ff fa)
    (function (_ env)
      ((ff env) (fa env)))))

(structure: #export monad
  (All [r] (Monad (Reader r)))
  
  (def: &functor ..functor)

  (def: (wrap x)
    (function (_ env) x))

  (def: (join mma)
    (function (_ env)
      (mma env env))))

(structure: #export (with monad)
  {#.doc "Monad transformer for Reader."}
  (All [M] (-> (Monad M) (All [e] (Monad (All [a] (Reader e (M a)))))))

  (def: &functor (functor.compose ..functor (get@ #monad.&functor monad)))

  (def: wrap (|>> (\ monad wrap) (\ ..monad wrap)))
  
  (def: (join eMeMa)
    (function (_ env)
      (do monad
        [eMa (run env eMeMa)]
        (run env eMa)))))

(def: #export lift
  {#.doc "Lift monadic values to the Reader wrapper."}
  (All [M e a] (-> (M a) (Reader e (M a))))
  (\ ..monad wrap))
