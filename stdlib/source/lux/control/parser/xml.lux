(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [control
    ["." exception (#+ exception:)]]
   [data
    ["." error (#+ Error)]
    ["." name ("#@." equivalence codec)]
    ["." text ("#@." monoid)]
    [collection
     ["." list ("#@." functor)]
     ["." dictionary]]
    [format
     ["/" xml (#+ XML)]]]]
  ["." //])

(type: #export (Parser a)
  (//.Parser (List XML) a))

(exception: #export empty-input)
(exception: #export unexpected-input)
(exception: #export unknown-attribute)

(exception: #export (wrong-tag {tag Name})
  (exception.report
   ["Tag" (name@encode tag)]))

(def: blank-line ($_ text@compose text.new-line text.new-line))

(exception: #export (unconsumed-inputs {inputs (List XML)})
  (|> inputs
      (list@map (:: /.codec encode))
      (text.join-with blank-line)))

(def: #export text
  (Parser Text)
  (function (_ docs)
    (case docs
      #.Nil
      (exception.throw empty-input [])
      
      (#.Cons head tail)
      (case head
        (#/.Text value)
        (#error.Success [tail value])
        
        (#/.Node _)
        (exception.throw unexpected-input [])))))

(def: #export (attr name)
  (-> Name (Parser Text))
  (function (_ docs)
    (case docs
      #.Nil
      (exception.throw empty-input [])
      
      (#.Cons head _)
      (case head
        (#/.Text _)
        (exception.throw unexpected-input [])
        
        (#/.Node tag attrs children)
        (case (dictionary.get name attrs)
          #.None
          (exception.throw unknown-attribute [])
          
          (#.Some value)
          (#error.Success [docs value]))))))

(def: (run' docs reader)
  (All [a] (-> (List XML) (Parser a) (Error a)))
  (case (//.run docs reader)
    (#error.Success [remaining output])
    (if (list.empty? remaining)
      (#error.Success output)
      (exception.throw unconsumed-inputs remaining))
    
    (#error.Failure error)
    (#error.Failure error)))

(def: #export (node tag)
  (-> Name (Parser Any))
  (function (_ docs)
    (case docs
      #.Nil
      (exception.throw empty-input [])
      
      (#.Cons head _)
      (case head
        (#/.Text _)
        (exception.throw unexpected-input [])
        
        (#/.Node _tag _attrs _children)
        (if (name@= tag _tag)
          (#error.Success [docs []])
          (exception.throw wrong-tag tag))))))

(def: #export (children reader)
  (All [a] (-> (Parser a) (Parser a)))
  (function (_ docs)
    (case docs
      #.Nil
      (exception.throw empty-input [])
      
      (#.Cons head tail)
      (case head
        (#/.Text _)
        (exception.throw unexpected-input [])
        
        (#/.Node _tag _attrs _children)
        (do error.monad
          [output (run' _children reader)]
          (wrap [tail output]))))))

(def: #export ignore
  (Parser Any)
  (function (_ docs)
    (case docs
      #.Nil
      (exception.throw empty-input [])
      
      (#.Cons head tail)
      (#error.Success [tail []]))))

(def: #export (run document reader)
  (All [a] (-> XML (Parser a) (Error a)))
  (run' (list document) reader))
