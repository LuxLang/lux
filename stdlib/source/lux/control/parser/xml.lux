(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]]
   [data
    ["." name ("#\." equivalence codec)]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." list]
     ["." dictionary]]
    [format
     ["/" xml (#+ Attribute Tag XML)]]]]
  ["." //])

(type: #export (Parser a)
  (//.Parser (List XML) a))

(exception: #export empty_input)
(exception: #export unexpected_input)

(exception: #export (wrong_tag {expected Tag} {actual Tag})
  (exception.report
   ["Expected" (%.text (/.tag expected))]
   ["Actual" (%.text (/.tag actual))]))

(exception: #export (unknown_attribute {expected Attribute} {available (List Attribute)})
  (exception.report
   ["Expected" (%.text (/.attribute expected))]
   ["Available" (exception.enumerate (|>> /.attribute %.text) available)]))

(exception: #export (unconsumed_inputs {inputs (List XML)})
  (exception.report
   ["Inputs" (exception.enumerate (\ /.codec encode) inputs)]))

(def: #export text
  (Parser Text)
  (function (_ documents)
    (case documents
      #.Nil
      (exception.throw ..empty_input [])
      
      (#.Cons head tail)
      (case head
        (#/.Text value)
        (#try.Success [tail value])
        
        (#/.Node _)
        (exception.throw ..unexpected_input [])))))

(def: #export (node expected)
  (-> Tag (Parser Any))
  (function (_ documents)
    (case documents
      #.Nil
      (exception.throw ..empty_input [])
      
      (#.Cons head _)
      (case head
        (#/.Text _)
        (exception.throw ..unexpected_input [])
        
        (#/.Node actual _attributes _children)
        (if (name\= expected actual)
          (#try.Success [documents []])
          (exception.throw ..wrong_tag [expected actual]))))))

(def: #export tag
  (Parser Tag)
  (function (_ documents)
    (case documents
      #.Nil
      (exception.throw ..empty_input [])
      
      (#.Cons head _)
      (case head
        (#/.Text _)
        (exception.throw ..unexpected_input [])
        
        (#/.Node tag _attributes _children)
        (#try.Success [documents tag])))))

(def: #export (attribute name)
  (-> Attribute (Parser Text))
  (function (_ documents)
    (case documents
      #.Nil
      (exception.throw ..empty_input [])
      
      (#.Cons head _)
      (case head
        (#/.Text _)
        (exception.throw ..unexpected_input [])
        
        (#/.Node tag attributes children)
        (case (dictionary.get name attributes)
          #.None
          (exception.throw ..unknown_attribute [name (dictionary.keys attributes)])
          
          (#.Some value)
          (#try.Success [documents value]))))))

(def: #export (run parser documents)
  (All [a] (-> (Parser a) (List XML) (Try a)))
  (case (//.run parser documents)
    (#try.Success [remaining output])
    (if (list.empty? remaining)
      (#try.Success output)
      (exception.throw ..unconsumed_inputs remaining))
    
    (#try.Failure error)
    (#try.Failure error)))

(def: #export (children parser)
  (All [a] (-> (Parser a) (Parser a)))
  (function (_ documents)
    (case documents
      #.Nil
      (exception.throw ..empty_input [])
      
      (#.Cons head tail)
      (case head
        (#/.Text _)
        (exception.throw ..unexpected_input [])
        
        (#/.Node _tag _attributes children)
        (do try.monad
          [output (..run parser children)]
          (wrap [tail output]))))))

(def: #export ignore
  (Parser Any)
  (function (_ documents)
    (case documents
      #.Nil
      (exception.throw ..empty_input [])
      
      (#.Cons head tail)
      (#try.Success [tail []]))))

(exception: #export nowhere)

(def: #export (somewhere parser)
  (All [a] (-> (Parser a) (Parser a)))
  (function (recur input)
    (case (//.run parser input)
      (#try.Success [remaining output])
      (#try.Success [remaining output])
      
      (#try.Failure error)
      (case input
        #.Nil
        (exception.throw ..nowhere [])
        
        (#.Cons head tail)
        (do try.monad
          [[tail' output] (recur tail)]
          (wrap [(#.Cons head tail')
                 output]))))))
