(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]]
   [data
    ["." name ("#@." equivalence codec)]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#@." functor)]
     ["." dictionary]]
    [format
     ["/" xml (#+ Attribute Tag XML)]]]]
  ["." //])

(type: #export (Parser a)
  (//.Parser (List XML) a))

(exception: #export empty-input)
(exception: #export unexpected-input)

(def: (label [namespace name])
  (-> Name Text)
  (format namespace ":" name))

(template [<exception> <type> <header>]
  [(exception: #export (<exception> {label <type>})
     (exception.report
      [<header> (%.text (..label label))]))]

  [wrong-tag Tag "Tag"]
  [unknown-attribute Attribute "Attribute"]
  )

(def: blank-line
  (format text.new-line text.new-line))

(exception: #export (unconsumed-inputs {inputs (List XML)})
  (|> inputs
      (list@map (:: /.codec encode))
      (text.join-with blank-line)))

(def: #export text
  (Parser Text)
  (function (_ docs)
    (case docs
      #.Nil
      (exception.throw ..empty-input [])
      
      (#.Cons head tail)
      (case head
        (#/.Text value)
        (#try.Success [tail value])
        
        (#/.Node _)
        (exception.throw ..unexpected-input [])))))

(def: #export (node tag)
  (-> Tag (Parser Any))
  (function (_ docs)
    (case docs
      #.Nil
      (exception.throw ..empty-input [])
      
      (#.Cons head _)
      (case head
        (#/.Text _)
        (exception.throw ..unexpected-input [])
        
        (#/.Node _tag _attrs _children)
        (if (name@= tag _tag)
          (#try.Success [docs []])
          (exception.throw ..wrong-tag tag))))))

(def: #export tag
  (Parser Tag)
  (function (_ docs)
    (case docs
      #.Nil
      (exception.throw ..empty-input [])
      
      (#.Cons head _)
      (case head
        (#/.Text _)
        (exception.throw ..unexpected-input [])
        
        (#/.Node tag _attrs _children)
        (#try.Success [docs tag])))))

(def: #export (attr name)
  (-> Attribute (Parser Text))
  (function (_ docs)
    (case docs
      #.Nil
      (exception.throw ..empty-input [])
      
      (#.Cons head _)
      (case head
        (#/.Text _)
        (exception.throw ..unexpected-input [])
        
        (#/.Node tag attrs children)
        (case (dictionary.get name attrs)
          #.None
          (exception.throw ..unknown-attribute [name])
          
          (#.Some value)
          (#try.Success [docs value]))))))

(def: (run' parser docs)
  (All [a] (-> (Parser a) (List XML) (Try a)))
  (case (//.run parser docs)
    (#try.Success [remaining output])
    (if (list.empty? remaining)
      (#try.Success output)
      (exception.throw ..unconsumed-inputs remaining))
    
    (#try.Failure error)
    (#try.Failure error)))

(def: #export (children parser)
  (All [a] (-> (Parser a) (Parser a)))
  (function (_ docs)
    (case docs
      #.Nil
      (exception.throw ..empty-input [])
      
      (#.Cons head tail)
      (case head
        (#/.Text _)
        (exception.throw ..unexpected-input [])
        
        (#/.Node _tag _attrs children)
        (do try.monad
          [output (run' parser children)]
          (wrap [tail output]))))))

(def: #export ignore
  (Parser Any)
  (function (_ docs)
    (case docs
      #.Nil
      (exception.throw ..empty-input [])
      
      (#.Cons head tail)
      (#try.Success [tail []]))))

(def: #export (run parser document)
  (All [a] (-> (Parser a) XML (Try a)))
  (..run' parser (list document)))
