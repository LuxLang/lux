(.module:
  [lux #*
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]]
   [data
    ["." product]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." dictionary (#+ Dictionary)]]]
   [world
    ["/" environment]]]
  ["." //])

(exception: #export (unknown {property /.Property})
  (exception.report
   ["Property" (%.text property)]))

(type: #export (Parser a)
  (//.Parser /.Environment a))

(def: #export empty
  /.Environment
  (dictionary.new text.hash))

(def: #export (property name)
  (-> Text (Parser Text))
  (function (_ environment)
    (case (dictionary.get name environment)
      (#.Some value)
      (exception.return [environment value])
      
      #.None
      (exception.throw ..unknown name))))

(def: #export (run parser environment)
  (All [a] (-> (Parser a) /.Environment (Try a)))
  (:: try.monad map product.right (parser environment)))
