(.module:
  [lux #*
   ["@" target]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]]
   [data
    [collection
     ["." list ("#\." monoid monad)]]
    ["." text ("#\." equivalence)
     ["%" format (#+ format)]]]
   [meta (#+ with-gensyms)]
   [macro
    ["." code]
    [syntax (#+ syntax:)]]]
  ["." //
   ["s" code]
   [//
    ["." io]
    [concurrency
     ["." thread]]]])

(type: #export (Parser a)
  {#.doc "A command-line interface parser."}
  (//.Parser (List Text) a))

(def: #export (run parser inputs)
  (All [a] (-> (Parser a) (List Text) (Try a)))
  (case (//.run parser inputs)
    (#try.Success [remaining output])
    (case remaining 
      #.Nil
      (#try.Success output)

      _
      (#try.Failure (format "Remaining CLI inputs: " (text.join-with " " remaining))))

    (#try.Failure try)
    (#try.Failure try)))

(def: #export any
  {#.doc "Just returns the next input without applying any logic."}
  (Parser Text)
  (function (_ inputs)
    (case inputs
      (#.Cons arg inputs')
      (#try.Success [inputs' arg])
      
      _
      (#try.Failure "Cannot parse empty arguments."))))

(def: #export (parse parser)
  {#.doc "Parses the next input with a parsing function."}
  (All [a] (-> (-> Text (Try a)) (Parser a)))
  (function (_ inputs)
    (do try.monad
      [[remaining raw] (any inputs)
       output (parser raw)]
      (wrap [remaining output]))))

(def: #export (this reference)
  {#.doc "Checks that a token is in the inputs."}
  (-> Text (Parser Any))
  (function (_ inputs)
    (do try.monad
      [[remaining raw] (any inputs)]
      (if (text\= reference raw)
        (wrap [remaining []])
        (try.fail (format "Missing token: '" reference "'"))))))

(def: #export (somewhere cli)
  {#.doc "Given a parser, tries to parse it somewhere in the inputs (i.e. not necessarily parsing the immediate inputs)."}
  (All [a] (-> (Parser a) (Parser a)))
  (function (_ inputs)
    (loop [immediate inputs]
      (case (//.run cli immediate)
        (#try.Success [remaining output])
        (#try.Success [remaining output])

        (#try.Failure try)
        (case immediate
          #.Nil
          (#try.Failure try)
          
          (#.Cons to-omit immediate')
          (do try.monad
            [[remaining output] (recur immediate')]
            (wrap [(#.Cons to-omit remaining)
                   output])))))))

(def: #export end
  {#.doc "Ensures there are no more inputs."}
  (Parser Any)
  (function (_ inputs)
    (case inputs
      #.Nil (#try.Success [inputs []])
      _     (#try.Failure (format "Unknown parameters: " (text.join-with " " inputs))))))

(def: #export (named name value)
  (All [a] (-> Text (Parser a) (Parser a)))
  (|> value
      (//.after (..this name))
      ..somewhere))

(def: #export (parameter [short long] value)
  (All [a] (-> [Text Text] (Parser a) (Parser a)))
  (|> value
      (//.after (//.either (..this short) (..this long)))
      ..somewhere))

(type: Program-Args
  (#Raw Text)
  (#Parsed (List [Code Code])))

(def: program-args^
  (s.Parser Program-Args)
  (//.or s.local-identifier
         (s.tuple (//.some (//.either (do //.monad
                                        [name s.local-identifier]
                                        (wrap [(code.identifier ["" name]) (` any)]))
                                      (s.record (//.and s.any s.any)))))))

(syntax: #export (program:
                   {args program-args^}
                   body)
  {#.doc (doc "Defines the entry-point to a program (similar to the 'main' function/method in other programming languages)."
              "Can take a list of all the input parameters to the program, or can destructure them using CLI-option combinators from the lux/cli module."
              (program: all-args
                (do io.monad
                  [foo init-program
                   bar (do-something all-args)]
                  (wrap [])))

              (program: [name]
                (io (log! (\ text.monoid compose "Hello, " name))))

              (program: [{config config^}]
                (do io.monad
                  [data (init-program config)]
                  (do-something data))))}
  (with-gensyms [g!program g!args g!_ g!output g!message]
    (let [initialization+event-loop
          (` ((~! do) (~! io.monad)
              [(~ g!output) (~ body)
               (~+ (for {@.old
                         (list)
                         
                         @.jvm
                         (list)

                         @.js
                         (list)}
                        (list g!_
                              (` ((~! thread.run!) [])))))]
              ((~' wrap) (~ g!output))))]
      (case args
        (#Raw args)
        (wrap (list (` ("lux def program"
                        (.function ((~ g!program) (~ (code.identifier ["" args])))
                          (~ initialization+event-loop))))))
        
        (#Parsed args)
        (wrap (list (` ("lux def program"
                        (.function ((~ g!program) (~ g!args))
                          (case ((: (~! (..Parser (io.IO .Any)))
                                    ((~! do) (~! //.monad)
                                     [(~+ (|> args
                                              (list\map (function (_ [binding parser])
                                                          (list binding parser)))
                                              list\join))]
                                     ((~' wrap) (~ initialization+event-loop))))
                                 (~ g!args))
                            (#.Right [(~ g!_) (~ g!output)])
                            (~ g!output)

                            (#.Left (~ g!message))
                            (.error! (~ g!message))))))
                    ))
        ))))
