(.module:
  [lux (#- or and not)
   [abstract
    [monad (#+ Monad do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]]
   [data
    ["." product]
    ["." maybe]
    ["/" text ("#@." monoid)]
    [number
     ["n" nat ("#@." decimal)]]
    [collection
     ["." list ("#@." fold)]]]
   [macro
    ["." code]]]
  ["." //])

(type: #export Offset Nat)

(def: start-offset Offset 0)

(type: #export Parser
  (//.Parser [Offset Text]))

(type: #export Slice
  {#basis Offset
   #distance Offset})

(def: (remaining offset tape)
  (-> Offset Text Text)
  (|> tape (/.split offset) maybe.assume product.right))

(exception: #export (unconsumed-input {offset Offset} {tape Text})
  (exception.report
   ["Offset" (n@encode offset)]
   ["Input size" (n@encode (/.size tape))]
   ["Remaining input" (remaining offset tape)]))

(exception: #export (expected-to-fail {offset Offset} {tape Text})
  (exception.report
   ["Offset" (n@encode offset)]
   ["Input" (remaining offset tape)]))

(exception: #export cannot-parse)
(exception: #export cannot-slice)

(def: #export (run parser input)
  (All [a] (-> (Parser a) Text (Try a)))
  (case (parser [start-offset input])
    (#try.Failure msg)
    (#try.Failure msg)
    
    (#try.Success [[end-offset _] output])
    (if (n.= end-offset (/.size input))
      (#try.Success output)
      (exception.throw ..unconsumed-input [end-offset input]))))

(def: #export offset
  (Parser Offset)
  (function (_ (^@ input [offset tape]))
    (#try.Success [input offset])))

(def: (with-slices parser)
  (-> (Parser (List Slice)) (Parser Slice))
  (do //.monad
    [offset ..offset
     slices parser]
    (wrap (list@fold (function (_ [slice::basis slice::distance]
                                  [total::basis total::distance])
                       [total::basis ("lux i64 +" slice::distance total::distance)])
                     {#basis offset
                      #distance 0}
                     slices))))

(def: #export any
  {#.doc "Just returns the next character without applying any logic."}
  (Parser Text)
  (function (_ [offset tape])
    (case (/.nth offset tape)
      (#.Some output)
      (#try.Success [[("lux i64 +" 1 offset) tape] (/.from-code output)])

      _
      (exception.throw ..cannot-parse []))))

(def: #export any!
  {#.doc "Just returns the next character without applying any logic."}
  (Parser Slice)
  (function (_ [offset tape])
    (#try.Success [[("lux i64 +" 1 offset) tape]
                   {#basis offset
                    #distance 1}])))

(template [<name> <type> <any>]
  [(def: #export (<name> p)
     {#.doc "Produce a character if the parser fails."}
     (All [a] (-> (Parser a) (Parser <type>)))
     (function (_ input)
       (case (p input)
         (#try.Failure msg)
         (<any> input)
         
         _
         (exception.throw ..expected-to-fail input))))]

  [not  Text  ..any]
  [not! Slice ..any!]
  )

(def: #export (this reference)
  {#.doc "Lex a text if it matches the given sample."}
  (-> Text (Parser Any))
  (function (_ [offset tape])
    (case (/.index-of' reference offset tape)
      (#.Some where)
      (if (n.= offset where)
        (#try.Success [[("lux i64 +" (/.size reference) offset) tape]
                       []])
        (#try.Failure ($_ /@compose "Could not match: " (/.encode reference) " @ " (maybe.assume (/.clip' offset tape)))))

      _
      (#try.Failure ($_ /@compose "Could not match: " (/.encode reference))))))

(def: #export (this? reference)
  {#.doc "Lex a text if it matches the given sample."}
  (-> Text (Parser Bit))
  (function (_ (^@ input [offset tape]))
    (case (/.index-of' reference offset tape)
      (^multi (#.Some where) (n.= offset where))
      (#try.Success [[("lux i64 +" (/.size reference) offset) tape]
                     #1])

      _
      (#try.Success [input #0]))))

(def: #export end
  {#.doc "Ensure the parser's input is empty."}
  (Parser Any)
  (function (_ (^@ input [offset tape]))
    (if (n.= offset (/.size tape))
      (#try.Success [input []])
      (exception.throw ..unconsumed-input input))))

(def: #export end?
  {#.doc "Ask if the parser's input is empty."}
  (Parser Bit)
  (function (_ (^@ input [offset tape]))
    (#try.Success [input (n.= offset (/.size tape))])))

(def: #export peek
  {#.doc "Lex the next character (without consuming it from the input)."}
  (Parser Text)
  (function (_ (^@ input [offset tape]))
    (case (/.nth offset tape)
      (#.Some output)
      (#try.Success [input (/.from-code output)])

      _
      (exception.throw ..cannot-parse []))))

(def: #export get-input
  {#.doc "Get all of the remaining input (without consuming it)."}
  (Parser Text)
  (function (_ (^@ input [offset tape]))
    (#try.Success [input (remaining offset tape)])))

(def: #export (range bottom top)
  {#.doc "Only lex characters within a range."}
  (-> Nat Nat (Parser Text))
  (do //.monad
    [char any
     #let [char' (maybe.assume (/.nth 0 char))]
     _ (//.assert ($_ /@compose "Character is not within range: " (/.from-code bottom) "-" (/.from-code top))
                  (.and (n.>= bottom char')
                        (n.<= top char')))]
    (wrap char)))

(template [<name> <bottom> <top> <desc>]
  [(def: #export <name>
     {#.doc (code.text ($_ /@compose "Only lex " <desc> " characters."))}
     (Parser Text)
     (range (char <bottom>) (char <top>)))]

  [upper   "A" "Z" "uppercase"]
  [lower   "a" "z" "lowercase"]
  [decimal "0" "9" "decimal"]
  [octal   "0" "7" "octal"]
  )

(def: #export alpha
  {#.doc "Only lex alphabetic characters."}
  (Parser Text)
  (//.either lower upper))

(def: #export alpha-num
  {#.doc "Only lex alphanumeric characters."}
  (Parser Text)
  (//.either alpha decimal))

(def: #export hexadecimal
  {#.doc "Only lex hexadecimal digits."}
  (Parser Text)
  ($_ //.either
      decimal
      (range (char "a") (char "f"))
      (range (char "A") (char "F"))))

(template [<name> <description-modifier> <modifier>]
  [(def: #export (<name> options)
     {#.doc (code.text ($_ /@compose "Only lex characters that are" <description-modifier> " part of a piece of text."))}
     (-> Text (Parser Text))
     (function (_ [offset tape])
       (case (/.nth offset tape)
         (#.Some output)
         (let [output (/.from-code output)]
           (if (<modifier> (/.contains? output options))
             (#try.Success [[("lux i64 +" 1 offset) tape] output])
             (#try.Failure ($_ /@compose "Character (" output
                               ") is should " <description-modifier>
                               "be one of: " options))))

         _
         (exception.throw ..cannot-parse []))))]

  [one-of  ""     |>]
  [none-of " not" .not]
  )

(template [<name> <description-modifier> <modifier>]
  [(def: #export (<name> options)
     {#.doc (code.text ($_ /@compose "Only lex characters that are" <description-modifier> " part of a piece of text."))}
     (-> Text (Parser Slice))
     (function (_ [offset tape])
       (case (/.nth offset tape)
         (#.Some output)
         (let [output (/.from-code output)]
           (if (<modifier> (/.contains? output options))
             (#try.Success [[("lux i64 +" 1 offset) tape]
                            {#basis offset
                             #distance 1}])
             (#try.Failure ($_ /@compose "Character (" output
                               ") is should " <description-modifier>
                               "be one of: " options))))

         _
         (exception.throw ..cannot-parse []))))]

  [one-of!  ""     |>]
  [none-of! " not" .not]
  )

(def: #export (satisfies p)
  {#.doc "Only lex characters that satisfy a predicate."}
  (-> (-> Nat Bit) (Parser Text))
  (function (_ [offset tape])
    (case (/.nth offset tape)
      (#.Some output)
      (if (p output)
        (#try.Success [[("lux i64 +" 1 offset) tape] (/.from-code output)])
        (#try.Failure ($_ /@compose "Character does not satisfy predicate: " (/.from-code output))))

      _
      (exception.throw ..cannot-parse []))))

(def: #export space
  {#.doc "Only lex white-space."}
  (Parser Text)
  (satisfies /.space?))

(def: #export (and left right)
  (-> (Parser Text) (Parser Text) (Parser Text))
  (do //.monad
    [=left left
     =right right]
    (wrap ($_ /@compose =left =right))))

(def: #export (and! left right)
  (-> (Parser Slice) (Parser Slice) (Parser Slice))
  (do //.monad
    [[left::basis left::distance] left
     [right::basis right::distance] right]
    (wrap [left::basis ("lux i64 +" left::distance right::distance)])))

(template [<name> <base> <doc-modifier>]
  [(def: #export (<name> parser)
     {#.doc (code.text ($_ /@compose "Lex " <doc-modifier> " characters as a single continuous text."))}
     (-> (Parser Text) (Parser Text))
     (|> parser <base> (:: //.monad map /.concat)))]

  [some //.some "some"]
  [many //.many "many"]
  )

(template [<name> <base> <doc-modifier>]
  [(def: #export (<name> parser)
     {#.doc (code.text ($_ /@compose "Lex " <doc-modifier> " characters as a single continuous text."))}
     (-> (Parser Slice) (Parser Slice))
     (with-slices (<base> parser)))]

  [some! //.some "some"]
  [many! //.many "many"]
  )

(template [<name> <base> <doc-modifier>]
  [(def: #export (<name> amount parser)
     {#.doc (code.text ($_ /@compose "Lex " <doc-modifier> " N characters."))}
     (-> Nat (Parser Text) (Parser Text))
     (|> parser (<base> amount) (:: //.monad map /.concat)))]

  [exactly  //.exactly  "exactly"]
  [at-most  //.at-most  "at most"]
  [at-least //.at-least "at least"]
  )

(template [<name> <base> <doc-modifier>]
  [(def: #export (<name> amount parser)
     {#.doc (code.text ($_ /@compose "Lex " <doc-modifier> " N characters."))}
     (-> Nat (Parser Slice) (Parser Slice))
     (with-slices (<base> amount parser)))]

  [exactly!  //.exactly  "exactly"]
  [at-most!  //.at-most  "at most"]
  [at-least! //.at-least "at least"]
  )

(def: #export (between from to parser)
  {#.doc "Lex between N and M characters."}
  (-> Nat Nat (Parser Text) (Parser Text))
  (|> parser (//.between from to) (:: //.monad map /.concat)))

(def: #export (between! from to parser)
  {#.doc "Lex between N and M characters."}
  (-> Nat Nat (Parser Slice) (Parser Slice))
  (with-slices (//.between from to parser)))

(def: #export (enclosed [start end] parser)
  (All [a] (-> [Text Text] (Parser a) (Parser a)))
  (|> parser
      (//.before (this end))
      (//.after (this start))))

(def: #export (local local-input parser)
  {#.doc "Run a parser with the given input, instead of the real one."}
  (All [a] (-> Text (Parser a) (Parser a)))
  (function (_ real-input)
    (case (..run parser local-input)
      (#try.Failure error)
      (#try.Failure error)

      (#try.Success value)
      (#try.Success [real-input value]))))

(def: #export (slice parser)
  (-> (Parser Slice) (Parser Text))
  (do //.monad
    [[basis distance] parser]
    (function (_ (^@ input [offset tape]))
      (case (/.clip basis ("lux i64 +" basis distance) tape)
        (#.Some output)
        (#try.Success [input output])

        #.None
        (exception.throw ..cannot-slice [])))))

(def: #export (embed structured text)
  (All [s a]
    (-> (Parser a)
        (//.Parser s Text)
        (//.Parser s a)))
  (do //.monad
    [raw text]
    (//.lift (..run structured raw))))
