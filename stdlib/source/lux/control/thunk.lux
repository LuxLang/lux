(;module:
  lux
  (lux [io]
       (control monad)
       (concurrency ["A" atom])
       [macro]
       (macro ["s" syntax #+ syntax:])))

(type: #export (Thunk a)
  (-> [] a))

(def: #hidden (freeze' generator)
  (All [a] (-> (-> [] a) (-> [] a)))
  (let [cache (: (A;Atom (Maybe ($ +0)))
                 (A;atom #;None))]
    (function [_]
      (case (io;run (A;get cache))
        (#;Some value)
        value

        _
        (let [value (generator [])]
          (exec (io;run (A;compare-and-swap _ (#;Some value) cache))
            value))))))

(syntax: #export (freeze expr)
  (do @
    [g!arg (macro;gensym "")]
    (wrap (list (` (freeze' (function [(~ g!arg)] (~ expr))))))))

(def: #export (thaw thunk)
  (All [a] (-> (Thunk a) a))
  (thunk []))
