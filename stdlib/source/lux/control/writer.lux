(.module:
  [lux #*
   [control
    monoid
    ["F" functor]
    ["A" apply]
    [monad (#+ do Monad)]]])

(type: #export (Writer l a)
  {#.doc "Represents a value with an associated 'log' value to record arbitrary information."}
  {#log l
   #value a})

(structure: #export Functor<Writer>
  (All [l]
    (F.Functor (Writer l)))
  
  (def: (map f fa)
    (let [[log datum] fa]
      [log (f datum)])))

(structure: #export (Apply<Writer> mon)
  (All [l]
    (-> (Monoid l) (A.Apply (Writer l))))
  
  (def: functor Functor<Writer>)

  (def: (apply ff fa)
    (let [[log1 f] ff
          [log2 a] fa]
      [(:: mon compose log1 log2) (f a)])))

(structure: #export (Monad<Writer> mon)
  (All [l]
    (-> (Monoid l) (Monad (Writer l))))
  
  (def: functor Functor<Writer>)

  (def: (wrap x)
    [(:: mon identity) x])

  (def: (join mma)
    (let [[log1 [log2 a]] mma]
      [(:: mon compose log1 log2) a])))

(def: #export (log l)
  {#.doc "Set the log to a particular value."}
  (All [l] (-> l (Writer l Any)))
  [l []])

(structure: #export (WriterT Monoid<l> Monad<M>)
  (All [l M] (-> (Monoid l) (Monad M) (Monad (All [a] (M (Writer l a))))))

  (def: functor (F.compose (get@ #monad.functor Monad<M>) Functor<Writer>))

  (def: wrap
    (let [monad (Monad<Writer> Monoid<l>)]
      (|>> (:: monad wrap) (:: Monad<M> wrap))))
  
  (def: (join MlMla)
    (do Monad<M>
      [## TODO: Remove once new-luxc is the standard compiler.
       [l1 Mla] (: (($ +1) (Writer ($ +0) (($ +1) (Writer ($ +0) ($ +2)))))
                   MlMla)
       ## [l1 Mla] MlMla
       [l2 a] Mla]
      (wrap [(:: Monoid<l> compose l1 l2) a]))))

(def: #export (lift Monoid<l> Monad<M>)
  (All [l M a] (-> (Monoid l) (Monad M) (-> (M a) (M (Writer l a)))))
  (function (_ ma)
    (do Monad<M>
      [a ma]
      (wrap [(:: Monoid<l> identity) a]))))
