(.module:
  [lux #*
   [control
    [equivalence (#+ Equivalence)]
    [security
     [capability (#+ Capability)]]]
   [type
    abstract]])

(abstract: #export (ID code entity storage)
  {#.doc "A value that uniquely identifies an entity in some foreign data storage (such as a database)."}

  code

  (structure: #export (Equivalence<ID> Equivalence<code>)
    (All [code entity storage]
      (-> (Equivalence code)
          (Equivalence (ID code entity storage))))
    (def: (= reference sample)
      (:: Equivalence<code> =
          (:representation reference)
          (:representation sample))))

  (type: #export (Can-Identify code storage)
    (All [entity]
      (Capability code
                  (ID code entity storage))))

  (type: #export (Can-Anonymize code storage)
    (All [entity]
      (Capability (ID code entity storage)
                  code)))

  (type: #export (Service code)
    (Ex [storage]
      [(Can-Identify code storage)
       (Can-Anonymize code storage)]))

  (def: Service<_>
    (All [code storage] (Service code storage))
    [(|>> :abstraction)
     (|>> :representation)])

  (type: #export (Context code scope storage)
    (-> (Service code storage)
        (scope storage)))

  (def: #export (service _)
    (All [code]
      (Ex [storage]
        (-> Any (Service code storage))))
    ..Service<_>)

  (def: #export (with-identity context)
    (All [code scope]
      (Ex [storage]
        (-> (Context code scope storage)
            (scope storage))))
    (context ..Service<_>))
  )
