(.module:
  lux
  (// [functor #+ Functor]))

## [Utils]
(def: (list/fold f init xs)
  (All [a b]
    (-> (-> b a a) a (List b) a)) 
  (case xs
    #.Nil
    init

    (#.Cons x xs')
    (list/fold f (f x init) xs')))

(def: (list/size xs)
  (All [a] (-> (List a) Nat))
  (loop [counter +0
         xs xs]
    (case xs
      #.Nil
      counter

      (#.Cons _ xs')
      (recur (inc counter) xs'))))

(def: (reverse xs)
  (All [a]
    (-> (List a) (List a)))
  (list/fold (function (_ head tail) (#.Cons head tail))
             #.Nil
             xs))

(def: (as-pairs xs)
  (All [a] (-> (List a) (List [a a])))
  (case xs
    (#.Cons x1 (#.Cons x2 xs'))
    (#.Cons [x1 x2] (as-pairs xs'))

    _
    #.Nil))

## [Signatures]
(sig: #export (Monad m)
  (: (Functor m)
     functor)
  (: (All [a]
       (-> a (m a)))
     wrap)
  (: (All [a]
       (-> (m (m a)) (m a)))
     join))

## [Syntax]
(def: _cursor Cursor ["" +0 +0])

(macro: #export (do tokens state)
  {#.doc (doc "Macro for easy concatenation of monadic operations."
              (do Monad<Maybe>
                [y (f1 x)
                 z (f2 z)]
                (wrap (f3 z))))}
  (case tokens
    (#.Cons monad (#.Cons [_ (#.Tuple bindings)] (#.Cons body #.Nil)))
    (if (|> bindings list/size (n/% +2) (n/= +0))
      (let [g!_ (: Code [_cursor (#.Symbol ["" " _ "])])
            g!map (: Code [_cursor (#.Symbol ["" " map "])])
            g!join (: Code [_cursor (#.Symbol ["" " join "])])
            body' (list/fold (: (-> [Code Code] Code Code)
                                (function (_ binding body')
                                  (let [[var value] binding]
                                    (case var
                                      [_ (#.Tag ["" "let"])]
                                      (` (let (~ value) (~ body')))

                                      _
                                      (` (|> (~ value) ((~ g!map) (function ((~ g!_) (~ var)) (~ body'))) (~ g!join)))
                                      ))))
                             body
                             (reverse (as-pairs bindings)))]
        (#.Right [state (#.Cons (` ("lux case" (~ monad)
                                    {(~' @)
                                     ("lux case" (~' @)
                                      {{#..functor {#functor.map (~ g!map)}
                                        #..wrap (~' wrap)
                                        #..join (~ g!join)}
                                       (~ body')})}))
                                #.Nil)]))
      (#.Left "'do' bindings must have an even number of parts."))

    _
    (#.Left "Wrong syntax for 'do'")))

## [Functions]
(def: #export (seq monad xs)
  {#.doc "Run all the monadic values in the list and produce a list of the base values."}
  (All [M a]
    (-> (Monad M) (List (M a)) (M (List a))))
  (case xs
    #.Nil
    (:: monad wrap #.Nil)
    
    (#.Cons x xs')
    (do monad
      [_x x
       _xs (seq monad xs')]
      (wrap (#.Cons _x _xs)))
    ))

(def: #export (map monad f xs)
  {#.doc "Apply a monad-producing function to all values in a list."}
  (All [M a b]
    (-> (Monad M) (-> a (M b)) (List a) (M (List b))))
  (case xs
    #.Nil
    (:: monad wrap #.Nil)
    
    (#.Cons x xs')
    (do monad
      [_x (f x)
       _xs (map monad f xs')]
      (wrap (#.Cons _x _xs)))
    ))

(def: #export (fold monad f init xs)
  {#.doc "Fold a list with a monad-producing function."}
  (All [M a b]
    (-> (Monad M) (-> b a (M a)) a (List b)
        (M a)))
  (case xs
    #.Nil
    (:: monad wrap init)

    (#.Cons x xs')
    (do monad
      [init' (f x init)]
      (fold monad f init' xs'))))

(def: #export (lift Monad<M> f)
  {#.doc "Lift a normal function into the space of monads."}
  (All [M a b]
    (-> (Monad M) (-> a b) (-> (M a) (M b))))
  (function (_ ma)
    (do Monad<M>
      [a ma]
      (wrap (f a)))))
