(;module:
  lux
  (.. (functor #as F)
      (applicative #as A)))

## [Utils]
(def: (L/fold f init xs)
  (All [a b]
    (-> (-> b a a) a (List b) a)) 
  (case xs
    #;Nil
    init

    (#;Cons x xs')
    (L/fold f (f x init) xs')))

(def: (reverse xs)
  (All [a]
    (-> (List a) (List a)))
  (L/fold (function [head tail] (#;Cons head tail))
          #;Nil
          xs))

(def: (as-pairs xs)
  (All [a] (-> (List a) (List [a a])))
  (case xs
    (#;Cons x1 (#;Cons x2 xs'))
    (#;Cons [x1 x2] (as-pairs xs'))

    _
    #;Nil))

## [Signatures]
(sig: #export (Monad m)
  (: (A;Applicative m)
     applicative)
  (: (All [a]
       (-> (m (m a)) (m a)))
     join))

## [Syntax]
(def: _cursor Cursor ["" +0 +0])

(macro: #export (do tokens state)
  {#;doc (doc "Macro for easy concatenation of monadic operations."
              (do Monad<Maybe>
                [y (f1 x)
                 z (f2 z)]
                (wrap (f3 z))))}
  (case tokens
    (#;Cons monad (#;Cons [_ (#;Tuple bindings)] (#;Cons body #;Nil)))
    (let [g!map (: Code [_cursor (#;Symbol ["" " map "])])
          g!join (: Code [_cursor (#;Symbol ["" " join "])])
          g!apply (: Code [_cursor (#;Symbol ["" " apply "])])
          body' (L/fold (: (-> [Code Code] Code Code)
                           (function [binding body']
                             (let [[var value] binding]
                               (case var
                                 [_ (#;Tag ["" "let"])]
                                 (` (let (~ value) (~ body')))

                                 _
                                 (` (|> (~ value) ((~ g!map) (function [(~ var)] (~ body'))) (~ g!join)))
                                 ))))
                        body
                        (reverse (as-pairs bindings)))]
      (#;Right [state (#;Cons (` ("lux case" (~ monad)
                                  (~' @)
                                  ("lux case" (~' @)
                                   {#applicative {#A;functor {#F;map (~ g!map)}
                                                  #A;wrap (~' wrap)
                                                  #A;apply (~ g!apply)}
                                    #join (~ g!join)}
                                   (~ body'))))
                              #;Nil)]))

    _
    (#;Left "Wrong syntax for do")))

## [Functions]
(def: #export (seq monad xs)
  {#;doc "Run all the monadic values in the list and produce a list of the base values."}
  (All [M a]
    (-> (Monad M) (List (M a)) (M (List a))))
  (case xs
    #;Nil
    (:: monad wrap #;Nil)
    
    (#;Cons x xs')
    (do monad
      [_x x
       _xs (seq monad xs')]
      (wrap (#;Cons _x _xs)))
    ))

(def: #export (map monad f xs)
  {#;doc "Apply a monad-producing function to all values in a list."}
  (All [M a b]
    (-> (Monad M) (-> a (M b)) (List a) (M (List b))))
  (case xs
    #;Nil
    (:: monad wrap #;Nil)
    
    (#;Cons x xs')
    (do monad
      [_x (f x)
       _xs (map monad f xs')]
      (wrap (#;Cons _x _xs)))
    ))

(def: #export (fold monad f init xs)
  {#;doc "Fold a list with a monad-producing function."}
  (All [M a b]
    (-> (Monad M) (-> b a (M a)) a (List b)
        (M a)))
  (case xs
    #;Nil
    (:: monad wrap init)

    (#;Cons x xs')
    (do monad
      [init' (f x init)]
      (fold monad f init' xs'))))

(def: #export (lift Monad<M> f)
  {#;doc "Lift a normal function into the space of monads."}
  (All [M a b]
    (-> (Monad M) (-> a b) (-> (M a) (M b))))
  (function [ma]
    (do Monad<M>
      [a ma]
      (wrap (f a)))))

## [Free Monads]
(type: #export (Free F a)
  {#;doc "The Free Monad."}
  (#Pure a)
  (#Effect (F (Free F a))))

(struct: #export (Functor<Free> dsl)
  (All [F] (-> (F;Functor F) (F;Functor (Free F))))
  (def: (map f ea)
    (case ea
      (#Pure a)
      (#Pure (f a))
      
      (#Effect value)
      (#Effect (:: dsl map (map f) value)))))

(struct: #export (Applicative<Free> dsl)
  (All [F] (-> (F;Functor F) (A;Applicative (Free F))))
  (def: functor (Functor<Free> dsl))

  (def: (wrap a)
    (#Pure a))
  
  (def: (apply ef ea)
    (case [ef ea]
      [(#Pure f) (#Pure a)]
      (#Pure (f a))

      [(#Pure f) (#Effect fa)]
      (#Effect (:: dsl map
                   (:: (Functor<Free> dsl) map f)
                   fa))

      [(#Effect ff) _]
      (#Effect (:: dsl map
                   (function [f] (apply f ea))
                   ff))
      )))

(struct: #export (Monad<Free> dsl)
  (All [F] (-> (F;Functor F) (Monad (Free F))))
  (def: applicative (Applicative<Free> dsl))

  (def: (join efefa)
    (case efefa
      (#Pure efa)
      (case efa
        (#Pure a)
        (#Pure a)

        (#Effect fa)
        (#Effect fa))
      
      (#Effect fefa)
      (#Effect (:: dsl map
                   (:: (Monad<Free> dsl) join)
                   fefa))
      )))
