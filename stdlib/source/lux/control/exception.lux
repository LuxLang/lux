(.module: {#.doc "Exception-handling functionality built on top of the Error type."}
  [lux #*
   [control
    [monad (#+ do)]
    ["p" parser]]
   [data
    ["//" error (#+ Error)]
    ["." maybe]
    ["." product]
    ["." text ("text/." monoid)]
    [collection
     ["." list ("list/." functor fold)]]]
   ["." macro
    ["." code]
    ["s" syntax (#+ syntax: Syntax)]
    [syntax
     ["cs" common]
     [common
      ["csr" reader]
      ["csw" writer]]]]])

## [Types]
(type: #export (Exception a)
  {#.doc "An exception provides a way to decorate error messages."}
  {#label Text
   #constructor (-> a Text)})

## [Values]
(def: #export (match? exception error)
  (All [e] (-> (Exception e) Text Bit))
  (text.starts-with? (get@ #label exception) error))

(def: #export (catch exception then try)
  {#.doc (doc "If a particular exception is detected on a possibly-erroneous value, handle it."
              "If no exception was detected, or a different one from the one being checked, then pass along the original value.")}
  (All [e a]
    (-> (Exception e) (-> Text a) (Error a)
        (Error a)))
  (case try
    (#//.Success output)
    (#//.Success output)

    (#//.Failure error)
    (let [reference (get@ #label exception)]
      (if (text.starts-with? reference error)
        (#//.Success (|> error
                         (text.clip (text.size reference) (text.size error))
                         maybe.assume
                         then))
        (#//.Failure error)))))

(def: #export (otherwise to-do try)
  {#.doc "If no handler could be found to catch the exception, then run a function as a last-resort measure."}
  (All [a]
    (-> (-> Text a) (Error a) a))
  (case try
    (#//.Success output)
    output

    (#//.Failure error)
    (to-do error)))

(def: #export (return value)
  {#.doc "A way to lift normal values into the error-handling context."}
  (All [a] (-> a (Error a)))
  (#//.Success value))

(def: #export (construct exception message)
  {#.doc "Constructs an exception."}
  (All [e] (-> (Exception e) e Text))
  ((get@ #constructor exception) message))

(def: #export (throw exception message)
  {#.doc "Decorate an error message with an Exception and lift it into the error-handling context."}
  (All [e] (-> (Exception e) e Error))
  (#//.Failure (construct exception message)))

(def: #export (assert exception message test)
  (All [e] (-> (Exception e) e Bit (Error Any)))
  (if test
    (#//.Success [])
    (..throw exception message)))

(syntax: #export (exception: {export csr.export}
                   {t-vars (p.default (list) csr.type-variables)}
                   {[name inputs] (p.either (p.and s.local-identifier (wrap (list)))
                                            (s.form (p.and s.local-identifier (p.some csr.typed-input))))}
                   {body (p.maybe s.any)})
  {#.doc (doc "Define a new exception type."
              "It moslty just serves as a way to tag error messages for later catching."
              ""
              "Simple case:"
              (exception: #export some-exception)
              ""
              "Complex case:"
              (exception: #export [optional type-vars] (some-exception [optional Text] {arguments Int})
                optional-body))}
  (macro.with-gensyms [g!descriptor]
    (do @
      [current-module macro.current-module-name
       #let [descriptor ($_ text/compose "{" current-module "." name "}" text.new-line)
             g!self (code.local-identifier name)]]
      (wrap (list (` (def: (~+ (csw.export export))
                       (~ g!self)
                       (All [(~+ (csw.type-variables t-vars))]
                         (..Exception [(~+ (list/map (get@ #cs.input-type) inputs))]))
                       (let [(~ g!descriptor) (~ (code.text descriptor))]
                         {#..label (~ g!descriptor)
                          #..constructor (function ((~ g!self) [(~+ (list/map (get@ #cs.input-binding) inputs))])
                                           ((~! text/compose) (~ g!descriptor)
                                            (~ (maybe.default (' "") body))))})))))
      )))

(def: #export (report' entries)
  (-> (List [Text Text]) Text)
  (let [largest-header-size (|> entries
                                (list/map (|>> product.left text.size))
                                (list/fold n/max 0))]
    (|> entries
        (list/map (function (_ [header message])
                    (let [padding (|> " "
                                      (list.repeat (n/- (text.size header)
                                                        largest-header-size))
                                      (text.join-with ""))]
                      ($_ text/compose padding header ": " message text.new-line))))
        (text.join-with ""))))

(syntax: #export (report {entries (p.many (s.tuple (p.and s.any s.any)))})
  (wrap (list (` (report' (list (~+ (|> entries
                                        (list/map (function (_ [header message])
                                                    (` [(~ header) (~ message)])))))))))))

(def: separator
  ($_ "lux text concat"
      text.new-line text.new-line
      "-----------------------------------------"
      text.new-line text.new-line))

(def: #export (with-stack exception message computation)
  (All [e a] (-> (Exception e) e (Error a) (Error a)))
  (case computation
    (#//.Failure error)
    (#//.Failure (case error
                   ""
                   (..construct exception message)

                   _
                   ($_ "lux text concat"
                       (..construct exception message)
                       ..separator
                       error)))

    success
    success))
