(;module:
  lux
  (// [functor #+ Functor]))

(sig: #export (Applicative f)
  {#;doc "Applicative functors."}
  (: (Functor f)
     functor)
  (: (All [a]
       (-> a (f a)))
     wrap)
  (: (All [a b]
       (-> (f (-> a b)) (f a) (f b)))
     apply))

(struct: #export (compose Applicative<F> Applicative<G>)
  {#;doc "Applicative functor composition."}
  (All [F G] (-> (Applicative F) (Applicative G) (Applicative (All [a] (F (G a))))))
  
  (def: functor (functor;compose (get@ #functor Applicative<F>)
                                 (get@ #functor Applicative<G>)))
  (def: wrap
    (|>. (:: Applicative<G> wrap) (:: Applicative<F> wrap)))
  (def: (apply fgf fgx)
    ## (let [fgf' (:: Applicative<F> apply
    ##                (:: Applicative<F> wrap (:: Applicative<G> apply))
    ##                fgf)]
    ##   (:: Applicative<F> apply fgf' fgx))
    (let [applyF (:: Applicative<F> apply)
          applyG (:: Applicative<G> apply)]
      ($_ applyF
          (:: Applicative<F> wrap applyG)
          fgf
          fgx))
    ))
