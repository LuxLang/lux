(.module:
  [lux #*
   [control
    [functor (#+ Functor)]
    [apply (#+ Apply)]
    [monad (#+ Monad)]]
   [data
    [error (#+ Error)]]
   [type
    abstract]])

(abstract: #export (Dirty a)
  a

  (def: #export taint
    (All [a] (-> a (Dirty a)))
    (|>> :abstraction))

  (def: #export (validate validator dirty)
    (All [a b] (-> (-> a (Error b)) (Dirty a) (Error b)))
    (validator (:representation dirty)))

  (def: #export trust
    (All [a] (-> (Dirty a) a))
    (|>> :representation))

  (structure: #export _ (Functor Dirty)
    (def: (map f fa)
      (|> fa :representation f :abstraction)))

  (structure: #export _ (Apply Dirty)
    (def: functor Functor<Dirty>)

    (def: (apply ff fa)
      (:abstraction ((:representation ff) (:representation fa)))))

  (structure: #export _ (Monad Dirty)
    (def: functor Functor<Dirty>)

    (def: wrap (|>> :abstraction))

    (def: join (|>> :representation)))
  )
