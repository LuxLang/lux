(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [control
    ["p" parser]
    ["." io (#+ IO)]
    [concurrency
     ["." promise (#+ Promise)]]
    [parser
     ["s" code]]]
   [data
    [text
     format]
    [collection
     ["." list ("#;." functor)]]]
   [type
    abstract]
   ["." macro
    ["." code]
    [syntax (#+ syntax:)
     [common
      ["." reader]
      ["." writer]]]]])

(abstract: #export (Capability brand input output)
  {#.doc (doc "Represents the capability to perform an operation."
              "This operation is assumed to have security implications.")}

  (-> input output)

  (def: forge
    (All [brand input output]
      (-> (-> input output)
          (Capability brand input output)))
    (|>> :abstraction))

  (def: #export (use capability input)
    (All [brand input output]
      (-> (Capability brand input output)
          input
          output))
    ((:representation capability) input))

  (syntax: #export (capability: {export reader.export}
                     {declaration reader.declaration}
                     {annotations (p.maybe reader.annotations)}
                     {[forge input output] (s.form ($_ p.and s.local-identifier s.any s.any))})
    (do @
      [this-module macro.current-module-name
       #let [[name vars] declaration]
       g!brand (:: @ map (|>> %code code.text)
                   (macro.gensym (format (%name [this-module name]))))
       #let [capability (` (..Capability (.primitive (~ g!brand)) (~ input) (~ output)))]]
      (wrap (list (` (type: (~+ (writer.export export))
                       (~ (writer.declaration declaration))
                       (~ capability)))
                  (` (def: (~+ (writer.export export))
                       (~ (code.local-identifier forge))
                       (All [(~+ (list;map code.local-identifier vars))]
                         (-> (-> (~ input) (~ output))
                             (~ capability)))
                       (~! ..forge)))
                  ))))

  (def: #export (async capability)
    (All [brand input output]
      (-> (Capability brand input (IO output))
          (Capability brand input (Promise output))))
    (..forge (|>> ((:representation capability)) promise.future)))
  )
