(.module: lux)

(signature: #export (Functor f)
  (: (All [a b]
       (-> (-> a b)
           (-> (f a) (f b))))
     map))

(type: #export (Fix f)
  (f (Fix f)))

(type: #export (<&> f g)
  (All [a] (& (f a) (g a))))

(type: #export (<|> f g)
  (All [a] (| (f a) (g a))))

(type: #export (<$> f g)
  (All [a] (f (g a))))

(structure: #export (compose Functor<F> Functor<G>)
  {#.doc "Functor composition."}
  (All [F G] (-> (Functor F) (Functor G) (Functor (All [a] (F (G a))))))
  (def: (map f fga)
    (:: Functor<F> map (:: Functor<G> map f) fga)))
