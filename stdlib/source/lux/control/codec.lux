(;module:
  lux
  (lux (control monad)
       (data ["R" result])))

## [Signatures]
(sig: #export (Codec m a)
  {#;doc "A way to move back-and-forth between a type and an alternative representation for it."}
  (: (-> a m)
     encode)
  (: (-> m (R;Result a))
     decode))

## [Values]
(struct: #export (compose Codec<c,b> Codec<b,a>)
  {#;doc "Codec composition."}
  (All [a b c]
    (-> (Codec c b) (Codec b a)
        (Codec c a)))
  (def: encode
    (|>. (:: Codec<b,a> encode)
         (:: Codec<c,b> encode)))

  (def: (decode cy)
    (do R;Monad<Result>
      [by (:: Codec<c,b> decode cy)]
      (:: Codec<b,a> decode by)))
  )
