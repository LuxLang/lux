(.module:
  [lux #*
   [control
    [functor (#+ Contravariant)]]
   function]
  [//
   ["." equivalence (#+ Equivalence)]])

## [Signatures]
(`` (signature: #export (Order a)
      {#.doc "A signature for types that possess some sense of ordering among their elements."}
      
      (: (Equivalence a)
         eq)
      
      (~~ (do-template [<name>]
            [(: (-> a a Bit) <name>)]

            [<] [<=] [>] [>=]
            ))
      ))

## [Values]
(def: #export (order eq <)
  (All [a]
    (-> (Equivalence a) (-> a a Bit) (Order a)))
  (let [> (flip <)]
    (structure (def: eq eq)
               (def: < <)
               (def: (<= test subject)
                 (or (< test subject)
                     (:: eq = test subject)))
               (def: > >)
               (def: (>= test subject)
                 (or (> test subject)
                     (:: eq = test subject))))))

(do-template [<name> <op>]
  [(def: #export (<name> order x y)
     (All [a]
       (-> (Order a) a a a))
     (if (:: order <op> y x) x y))]

  [min <]
  [max >]
  )

(`` (structure: #export _ (Contravariant Order)
      (def: (map-1 f Order<b>)
        (structure
         (def: eq (:: equivalence.Contravariant<Equivalence> map-1 f (:: Order<b> eq)))
         
         (~~ (do-template [<name>]
               [(def: (<name> reference sample)
                  (:: Order<b> <name> (f reference) (f sample)))]

               [<] [<=] [>] [>=]
               ))))))
