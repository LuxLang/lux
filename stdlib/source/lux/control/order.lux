(;module:
  lux
  (.. eq)
  lux/codata/function)

## [Signatures]
(sig: #export (Order a)
  {#;doc "A signature for types that possess some sense of ordering among their elements."}
  
  (: (Eq a)
     eq)
  
  (do-template [<name>]
    [(: (-> a a Bool) <name>)]

    [<] [<=] [>] [>=]
    )
  )

## [Values]
(def: #export (order eq <)
  (All [a]
    (-> (Eq a) (-> a a Bool) (Order a)))
  (let [> (flip <)]
    (struct
     (def: eq eq)
     (def: < <)
     (def: (<= test subject)
       (or (< test subject)
           (:: eq = test subject)))
     (def: > >)
     (def: (>= test subject)
       (or (> test subject)
           (:: eq = test subject))))))

(do-template [<name> <op>]
  [(def: #export (<name> order x y)
     (All [a]
       (-> (Order a) a a a))
     (if (:: order <op> y x) x y))]

  [max >]
  [min <]
  )
