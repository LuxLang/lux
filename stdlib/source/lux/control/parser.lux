(.module:
  [lux (#- not)
   [control
    [functor (#+ Functor)]
    [apply (#+ Apply)]
    [monad (#+ do Monad)]
    [codec]]
   [data
    [collection [list ("list/" Functor<List> Monoid<List>)]]
    [product]
    ["e" error (#+ Error)]]])

(type: #export (Parser s a)
  {#.doc "A generic parser."}
  (-> s (e.Error [s a])))

## [Structures]
(structure: #export Functor<Parser> (All [s] (Functor (Parser s)))
  (def: (map f ma)
    (function (_ input)
      (case (ma input)
        (#e.Error msg)
        (#e.Error msg)

        (#e.Success [input' a])
        (#e.Success [input' (f a)])))))

(structure: #export Apply<Parser> (All [s] (Apply (Parser s)))
  (def: functor Functor<Parser>)

  (def: (apply ff fa)
    (function (_ input)
      (case (ff input)
        (#e.Success [input' f])
        (case (fa input')
          (#e.Success [input'' a])
          (#e.Success [input'' (f a)])

          (#e.Error msg)
          (#e.Error msg))

        (#e.Error msg)
        (#e.Error msg)))))

(structure: #export Monad<Parser> (All [s] (Monad (Parser s)))
  (def: functor Functor<Parser>)

  (def: (wrap x)
    (function (_ input)
      (#e.Success [input x])))

  (def: (join mma)
    (function (_ input)
      (case (mma input)
        (#e.Error msg)
        (#e.Error msg)

        (#e.Success [input' ma])
        (ma input')))))

## [Parsers]
(def: #export (assert message test)
  {#.doc "Fails with the given message if the test is false."}
  (All [s] (-> Text Bool (Parser s Any)))
  (function (_ input)
    (if test
      (#e.Success [input []])
      (#e.Error message))))

(def: #export (maybe p)
  {#.doc "Optionality combinator."}
  (All [s a]
    (-> (Parser s a) (Parser s (Maybe a))))
  (function (_ input)
    (case (p input)
      (#e.Error _)            (#e.Success [input #.None])
      (#e.Success [input' x]) (#e.Success [input' (#.Some x)]))))

(def: #export (run input p)
  (All [s a]
    (-> s (Parser s a) (e.Error [s a])))
  (p input))

(def: #export (some p)
  {#.doc "0-or-more combinator."}
  (All [s a]
    (-> (Parser s a) (Parser s (List a))))
  (function (_ input)
    (case (p input)
      (#e.Error _)            (#e.Success [input (list)])
      (#e.Success [input' x]) (run input'
                                   (do Monad<Parser>
                                     [xs (some p)]
                                     (wrap (list& x xs)))
                                   ))))

(def: #export (many p)
  {#.doc "1-or-more combinator."}
  (All [s a]
    (-> (Parser s a) (Parser s (List a))))
  (do Monad<Parser>
    [x p
     xs (some p)]
    (wrap (list& x xs))))

(def: #export (seq p1 p2)
  {#.doc "Sequencing combinator."}
  (All [s a b]
    (-> (Parser s a) (Parser s b) (Parser s [a b])))
  (do Monad<Parser>
    [x1 p1
     x2 p2]
    (wrap [x1 x2])))

(def: #export (alt p1 p2)
  {#.doc "Heterogeneous alternative combinator."}
  (All [s a b]
    (-> (Parser s a) (Parser s b) (Parser s (| a b))))
  (function (_ tokens)
    (case (p1 tokens)
      (#e.Success [tokens' x1]) (#e.Success [tokens' (+0 x1)])
      (#e.Error _)             (run tokens
                                    (do Monad<Parser>
                                      [x2 p2]
                                      (wrap (+1 x2))))
      )))

(def: #export (either pl pr)
  {#.doc "Homogeneous alternative combinator."}
  (All [s a]
    (-> (Parser s a) (Parser s a) (Parser s a)))
  (function (_ tokens)
    (case (pl tokens)
      (#e.Error _) (pr tokens)
      output     output
      )))

(def: #export (exactly n p)
  {#.doc "Parse exactly N times."}
  (All [s a] (-> Nat (Parser s a) (Parser s (List a))))
  (if (n/> +0 n)
    (do Monad<Parser>
      [x p
       xs (exactly (dec n) p)]
      (wrap (#.Cons x xs)))
    (:: Monad<Parser> wrap (list))))

(def: #export (at-least n p)
  {#.doc "Parse at least N times."}
  (All [s a] (-> Nat (Parser s a) (Parser s (List a))))
  (do Monad<Parser>
    [min (exactly n p)
     extra (some p)]
    (wrap (list/compose min extra))))

(def: #export (at-most n p)
  {#.doc "Parse at most N times."}
  (All [s a] (-> Nat (Parser s a) (Parser s (List a))))
  (if (n/> +0 n)
    (function (_ input)
      (case (p input)
        (#e.Error msg)
        (#e.Success [input (list)])

        (#e.Success [input' x])
        (run input'
             (do Monad<Parser>
               [xs (at-most (dec n) p)]
               (wrap (#.Cons x xs))))
        ))
    (:: Monad<Parser> wrap (list))))

(def: #export (between from to p)
  {#.doc "Parse between N and M times."}
  (All [s a] (-> Nat Nat (Parser s a) (Parser s (List a))))
  (do Monad<Parser>
    [min-xs (exactly from p)
     max-xs (at-most (n/- from to) p)]
    (wrap (:: list.Monad<List> join (list min-xs max-xs)))))

(def: #export (sep-by sep p)
  {#.doc "Parsers instances of 'p' that are separated by instances of 'sep'."}
  (All [s a b] (-> (Parser s b) (Parser s a) (Parser s (List a))))
  (do Monad<Parser>
    [?x (maybe p)]
    (case ?x
      #.None
      (wrap #.Nil)
      
      (#.Some x)
      (do @
        [xs' (some (seq sep p))]
        (wrap (#.Cons x (list/map product.right xs'))))
      )))

(def: #export (not p)
  (All [s a] (-> (Parser s a) (Parser s Any)))
  (function (_ input)
    (case (p input)
      (#e.Error msg)
      (#e.Success [input []])
      
      _
      (#e.Error "Expected to fail; yet succeeded."))))

(def: #export (fail message)
  (All [s a] (-> Text (Parser s a)))
  (function (_ input)
    (#e.Error message)))

(def: #export (lift operation)
  (All [s a] (-> (Error a) (Parser s a)))
  (function (_ input)
    (case operation
      (#e.Success output)
      (#e.Success [input output])
      
      (#e.Error error)
      (#e.Error error))))

(def: #export (default value parser)
  {#.doc "If the given parser fails, returns the default value."}
  (All [s a] (-> a (Parser s a) (Parser s a)))
  (function (_ input)
    (case (parser input)
      (#e.Error error)
      (#e.Success [input value])

      (#e.Success [input' output])
      (#e.Success [input' output]))))

(def: #export remaining
  (All [s] (Parser s s))
  (function (_ inputs)
    (#e.Success [inputs inputs])))

(def: #export (rec parser)
  {#.doc "Combinator for recursive parser."}
  (All [s a] (-> (-> (Parser s a) (Parser s a)) (Parser s a)))
  (function (_ inputs)
    (run inputs (parser (rec parser)))))

(def: #export (after param subject)
  (All [s _ a] (-> (Parser s _) (Parser s a) (Parser s a)))
  (do Monad<Parser>
    [_ param]
    subject))

(def: #export (before param subject)
  (All [s _ a] (-> (Parser s _) (Parser s a) (Parser s a)))
  (do Monad<Parser>
    [output subject
     _ param]
    (wrap output)))

(def: #export (filter test parser)
  (All [s a] (-> (-> a Bool) (Parser s a) (Parser s a)))
  (do Monad<Parser>
    [output parser
     _ (assert "Constraint failed." (test output))]
    (wrap output)))

(def: #export (codec Codec<a,z> parser)
  (All [s a z] (-> (codec.Codec a z) (Parser s a) (Parser s z)))
  (function (_ input)
    (case (parser input)
      (#e.Error error)
      (#e.Error error)

      (#e.Success [input' to-decode])
      (case (:: Codec<a,z> decode to-decode)
        (#e.Error error)
        (#e.Error error)
        
        (#e.Success value)
        (#e.Success [input' value])))))
