(.module:
  [lux #*
   [control
    [functor (#+ Functor)]
    [apply (#+ Apply)]
    [monad (#+ Monad do)]
    ["ex" exception (#+ Exception)]]
   [data
    ["." error (#+ Error)]]
   ["." macro
    ["s" syntax (#+ syntax: Syntax)]]]
  [//
   ["." promise (#+ Promise)]])

(type: #export (Task a)
  (Promise (Error a)))

(def: #export (fail error)
  (All [a] (-> Text (Task a)))
  (:: promise.Monad<Promise> wrap (#error.Error error)))

(def: #export (throw exception message)
  (All [e a] (-> (Exception e) e (Task a)))
  (:: promise.Monad<Promise> wrap
      (ex.throw exception message)))

(def: #export (return value)
  (All [a] (-> a (Task a)))
  (:: promise.Monad<Promise> wrap (#error.Success value)))

(def: #export (try computation)
  (All [a] (-> (Task a) (Task (Error a))))
  (:: promise.Functor<Promise> map (|>> #error.Success) computation))

(structure: #export _ (Functor Task)
  (def: (map f fa)
    (:: promise.Functor<Promise> map
        (function (_ fa')
          (case fa'
            (#error.Error error)
            (#error.Error error)

            (#error.Success a)
            (#error.Success (f a))))
        fa)))

(structure: #export _ (Apply Task)
  (def: functor Functor<Task>)

  (def: (apply ff fa)
    (do promise.Monad<Promise>
      [ff' ff
       fa' fa]
      (wrap (do error.Monad<Error>
              [f ff'
               a fa']
              (wrap (f a)))))))

(structure: #export _ (Monad Task)
  (def: functor Functor<Task>)

  (def: wrap return)

  (def: (join mma)
    (do promise.Monad<Promise>
      [mma' mma]
      (case mma'
        (#error.Error error)
        (wrap (#error.Error error))

        (#error.Success ma)
        ma))))

(syntax: #export (task {type s.any})
  {#.doc (doc "Makes an uninitialized Task (in this example, of Any)."
              (task Any))}
  (wrap (list (` (: (..Task (~ type))
                    (promise.promise #.None))))))

(def: #export (from-promise promise)
  (All [a] (-> (Promise a) (Task a)))
  (:: promise.Functor<Promise> map (|>> #error.Success) promise))
