(.module:
  [lux #*
   [control
    [functor (#+ Functor)]
    [apply (#+ Apply)]
    [monad (#+ Monad do)]
    ["ex" exception (#+ Exception)]]
   [data
    ["." error (#+ Error)]]
   ["." macro
    ["s" syntax (#+ syntax: Syntax)]]]
  [//
   ["." promise (#+ Promise)]])

(type: #export (Task a)
  (Promise (Error a)))

(type: #export (Resolver a)
  (promise.Resolver (Error a)))

(do-template [<name> <input> <tag>]
  [(def: #export <name>
     (All [a] (-> <input> (Task a)))
     (|>> <tag> promise.resolved))]

  [return a    #error.Success]
  [fail   Text #error.Failure]
  )

(def: #export (throw exception message)
  (All [e a] (-> (Exception e) e (Task a)))
  (:: promise.monad wrap (ex.throw exception message)))

(def: #export (try computation)
  (All [a] (-> (Task a) (Task (Error a))))
  (:: promise.functor map (|>> #error.Success) computation))

(structure: #export functor (Functor Task)
  (def: (map f fa)
    (:: promise.functor map
        (function (_ fa')
          (case fa'
            (#error.Failure error)
            (#error.Failure error)

            (#error.Success a)
            (#error.Success (f a))))
        fa)))

(structure: #export apply (Apply Task)
  (def: &functor ..functor)

  (def: (apply ff fa)
    (do promise.monad
      [ff' ff
       fa' fa]
      (wrap (do error.monad
              [f ff'
               a fa']
              (wrap (f a)))))))

(structure: #export monad (Monad Task)
  (def: &functor ..functor)

  (def: wrap return)

  (def: (join mma)
    (do promise.monad
      [mma' mma]
      (case mma'
        (#error.Failure error)
        (wrap (#error.Failure error))

        (#error.Success ma)
        ma))))

(def: #export task
  (All [a] (-> Any [(Task a) (Resolver a)]))
  promise.promise)

(def: #export (from-promise promise)
  (All [a] (-> (Promise a) (Task a)))
  (:: promise.functor map (|>> #error.Success) promise))
