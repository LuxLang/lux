(.module:
  [lux #*
   ["." host]
   ["@" target]
   [abstract
    [monad (#+ do)]]
   [control
    ["." function]
    ["." io (#- run)]]
   [data
    [collection
     ["." array]]]
   [type
    abstract]])

(for {@.old
      (host.import: #long (java/util/concurrent/atomic/AtomicReference a)
        (new [a])
        (get [] a)
        (compareAndSet [a a] boolean))

      @.jvm
      (host.import: #long (java/util/concurrent/atomic/AtomicReference a)
        (new [a])
        (get [] a)
        (compareAndSet [a a] boolean))}
     (as-is))

(abstract: #export (Atom a)
  {#.doc "Atomic references that are safe to mutate concurrently."}

  (for {@.old
        (java/util/concurrent/atomic/AtomicReference a)

        @.jvm
        (java/util/concurrent/atomic/AtomicReference a)

        @.js
        (array.Array a)
        })

  (def: #export (atom value)
    (All [a] (-> a (Atom a)))
    (:abstraction (for {@.old
                        (java/util/concurrent/atomic/AtomicReference::new value)

                        @.jvm
                        (java/util/concurrent/atomic/AtomicReference::new value)

                        @.js
                        ("js array write" 0 value ("js array new" 1))
                        })))

  (def: #export (read atom)
    (All [a] (-> (Atom a) (IO a)))
    (io (for {@.old
              (java/util/concurrent/atomic/AtomicReference::get (:representation atom))

              @.jvm
              (java/util/concurrent/atomic/AtomicReference::get (:representation atom))

              @.js
              ("js array read" 0 (:representation atom))
              })))

  (def: #export (compare-and-swap current new atom)
    {#.doc (doc "Only mutates an atom if you can present its current value."
                "That guarantees that atom was not updated since you last read from it.")}
    (All [a] (-> a a (Atom a) (IO Bit)))
    (io (for {@.old
              (java/util/concurrent/atomic/AtomicReference::compareAndSet current new (:representation atom))

              @.jvm
              (java/util/concurrent/atomic/AtomicReference::compareAndSet current new (:representation atom))

              @.js
              (let [old ("js array read" 0 (:representation atom))]
                (if (is? old current)
                  (exec ("js array write" 0 new (:representation atom))
                    true)
                  false))})))
  )

(def: #export (update f atom)
  {#.doc (doc "Updates an atom by applying a function to its current value."
              "If it fails to update it (because some other process wrote to it first), it will retry until it succeeds."
              "The retries will be done with the new values of the atom, as they show up.")}
  (All [a] (-> (-> a a) (Atom a) (IO a)))
  (loop [_ []]
    (do io.monad
      [old (read atom)
       #let [new (f old)]
       swapped? (compare-and-swap old new atom)]
      (if swapped?
        (wrap new)
        (recur [])))))

(def: #export (write value atom)
  (All [a] (-> a (Atom a) (IO Any)))
  (update (function.constant value) atom))
