(.module:
  [lux #*
   ["@" target]
   ["." ffi]
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." exception (#+ exception:)]
    ["." io (#+ IO io)]]
   [data
    [collection
     ["." list]]]
   [math
    [number
     ["n" nat]
     ["f" frac]]]]
  [//
   ["." atom (#+ Atom)]])

(with_expansions [<jvm> (as_is (ffi.import: java/lang/Object)

                               (ffi.import: java/lang/Runtime
                                 ["#::."
                                  (#static getRuntime [] java/lang/Runtime)
                                  (availableProcessors [] int)])

                               (ffi.import: java/lang/Runnable)

                               (ffi.import: java/util/concurrent/TimeUnit
                                 ["#::."
                                  (#enum MILLISECONDS)])
                               
                               (ffi.import: java/util/concurrent/Executor
                                 ["#::."
                                  (execute [java/lang/Runnable] #io void)])

                               (ffi.import: (java/util/concurrent/ScheduledFuture a))

                               (ffi.import: java/util/concurrent/ScheduledThreadPoolExecutor
                                 ["#::."
                                  (new [int])
                                  (schedule [java/lang/Runnable long java/util/concurrent/TimeUnit] #io (java/util/concurrent/ScheduledFuture java/lang/Object))]))]
  (for {@.old (as_is <jvm>)
        @.jvm (as_is <jvm>)

        @.js
        (as_is (ffi.import: (setTimeout [ffi.Function ffi.Number] #io Any)))

        @.python
        (ffi.import: threading/Timer
          (new [ffi.Float ffi.Function])
          (start [] #io #? Any))}
       
       ## Default
       (type: Thread
         {#creation Nat
          #delay Nat
          #action (IO Any)})
       ))

(def: #export parallelism
  Nat
  (with_expansions [<jvm> (|> (java/lang/Runtime::getRuntime)
                              (java/lang/Runtime::availableProcessors)
                              .nat)]
    (for {@.old <jvm>
          @.jvm <jvm>}
         ## Default
         1)))

(with_expansions [<jvm> (as_is (def: runner
                                 java/util/concurrent/ScheduledThreadPoolExecutor
                                 (java/util/concurrent/ScheduledThreadPoolExecutor::new (.int ..parallelism))))]
  (for {@.old <jvm>
        @.jvm <jvm>
        @.js (as_is)
        @.python (as_is)}
       
       ## Default
       (def: runner
         (Atom (List Thread))
         (atom.atom (list)))))

(def: #export (schedule milli_seconds action)
  (-> Nat (IO Any) (IO Any))
  (for {@.old
        (let [runnable (ffi.object [] [java/lang/Runnable]
                         []
                         (java/lang/Runnable [] (run self) void
                                             (io.run action)))]
          (case milli_seconds
            0 (java/util/concurrent/Executor::execute runnable runner)
            _ (java/util/concurrent/ScheduledThreadPoolExecutor::schedule runnable (.int milli_seconds) java/util/concurrent/TimeUnit::MILLISECONDS
                                                                          runner)))

        @.jvm
        (let [runnable (ffi.object [] [java/lang/Runnable]
                         []
                         (java/lang/Runnable [] (run self) void
                                             (io.run action)))]
          (case milli_seconds
            0 (java/util/concurrent/Executor::execute runnable runner)
            _ (java/util/concurrent/ScheduledThreadPoolExecutor::schedule runnable (.int milli_seconds) java/util/concurrent/TimeUnit::MILLISECONDS
                                                                          runner)))

        @.js
        (..setTimeout [(ffi.closure [] (io.run action))
                       (n.frac milli_seconds)])

        @.python
        (do io.monad
          [_ (|> (ffi.lambda [] (io.run action))
                 [(|> milli_seconds n.frac (f./ +1,000.0))]
                 threading/Timer::new
                 (threading/Timer::start []))]
          (wrap []))}
       
       ## Default
       (do io.monad
         [_ (atom.update (|>> (#.Cons {#creation (.nat ("lux io current-time"))
                                       #delay milli_seconds
                                       #action action}))
                         ..runner)]
         (wrap []))))

(for {@.old (as_is)
      @.jvm (as_is)
      @.js (as_is)
      @.python (as_is)}
     
     ## Default
     (as_is (exception: #export cannot_continue_running_threads)
            
            (def: #export run!
              (IO Any)
              (loop [_ []]
                (do {! io.monad}
                  [threads (atom.read ..runner)]
                  (case threads
                    ## And... we're done!
                    #.Nil
                    (wrap [])

                    _
                    (do !
                      [#let [now (.nat ("lux io current-time"))
                             [ready pending] (list.partition (function (_ thread)
                                                               (|> (get@ #creation thread)
                                                                   (n.+ (get@ #delay thread))
                                                                   (n.<= now)))
                                                             threads)]
                       swapped? (atom.compare_and_swap threads pending ..runner)]
                      (if swapped?
                        (do !
                          [_ (monad.map ! (get@ #action) ready)]
                          (recur []))
                        (error! (exception.construct ..cannot_continue_running_threads []))))
                    ))))
            ))
