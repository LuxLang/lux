(.module:
  [lux #*
   ["@" target]
   ["." host]
   [abstract
    ["." monad (#+ do)]]
   [control
    ["ex" exception (#+ exception:)]
    ["." io (#+ IO io)]]
   [data
    [collection
     ["." list]]]
   [math
    [number
     ["n" nat]]]]
  [//
   ["." atom (#+ Atom)]])

(with_expansions [<jvm> (as_is (host.import: java/lang/Object)

                               (host.import: java/lang/Runtime
                                 ["#::."
                                  (#static getRuntime [] java/lang/Runtime)
                                  (availableProcessors [] int)])

                               (host.import: java/lang/Runnable)

                               (host.import: java/util/concurrent/TimeUnit
                                 ["#::."
                                  (#enum MILLISECONDS)])
                               
                               (host.import: java/util/concurrent/Executor
                                 ["#::."
                                  (execute [java/lang/Runnable] #io void)])

                               (host.import: (java/util/concurrent/ScheduledFuture a))

                               (host.import: java/util/concurrent/ScheduledThreadPoolExecutor
                                 ["#::."
                                  (new [int])
                                  (schedule [java/lang/Runnable long java/util/concurrent/TimeUnit] #io (java/util/concurrent/ScheduledFuture java/lang/Object))]))]
  (for {@.old (as_is <jvm>)
        @.jvm (as_is <jvm>)

        @.js
        (as_is (host.import: (setTimeout [host.Function host.Number] #io Any)))}
       
       ## Default
       (type: Thread
         {#creation Nat
          #delay Nat
          #action (IO Any)})
       ))

(def: #export parallelism
  Nat
  (with_expansions [<jvm> (|> (java/lang/Runtime::getRuntime)
                              (java/lang/Runtime::availableProcessors)
                              .nat)]
    (for {@.old <jvm>
          @.jvm <jvm>}
         
         ## Default
         1)))

(with_expansions [<jvm> (as_is (def: runner
                                 java/util/concurrent/ScheduledThreadPoolExecutor
                                 (java/util/concurrent/ScheduledThreadPoolExecutor::new (.int ..parallelism))))]
  (for {@.old <jvm>
        @.jvm <jvm>

        @.js
        (as_is)}
       
       ## Default
       (def: runner
         (Atom (List Thread))
         (atom.atom (list)))))

(def: #export (schedule milli_seconds action)
  (-> Nat (IO Any) (IO Any))
  (for {@.old
        (let [runnable (host.object [] [java/lang/Runnable]
                         []
                         (java/lang/Runnable [] (run self) void
                                             (io.run action)))]
          (case milli_seconds
            0 (java/util/concurrent/Executor::execute runnable runner)
            _ (java/util/concurrent/ScheduledThreadPoolExecutor::schedule runnable (.int milli_seconds) java/util/concurrent/TimeUnit::MILLISECONDS
                                                                          runner)))

        @.jvm
        (let [runnable (host.object [] [java/lang/Runnable]
                         []
                         (java/lang/Runnable [] (run self) void
                                             (io.run action)))]
          (case milli_seconds
            0 (java/util/concurrent/Executor::execute runnable runner)
            _ (java/util/concurrent/ScheduledThreadPoolExecutor::schedule runnable (.int milli_seconds) java/util/concurrent/TimeUnit::MILLISECONDS
                                                                          runner)))

        @.js
        (..setTimeout [(host.closure [] (io.run action))
                       (n.frac milli_seconds)])}
       
       ## Default
       (do io.monad
         [_ (atom.update (|>> (#.Cons {#creation (.nat ("lux io current-time"))
                                       #delay milli_seconds
                                       #action action}))
                         ..runner)]
         (wrap []))))

(for {@.old
      (as_is)

      @.jvm
      (as_is)

      @.js
      (as_is)}
     
     ## Default
     (as_is (exception: #export cannot_continue_running_threads)
            
            (def: #export (run! _)
              (-> Any (IO Any))
              (do {! io.monad}
                [threads (atom.read ..runner)]
                (case threads
                  ## And... we're done!
                  #.Nil
                  (wrap [])

                  _
                  (do !
                    [#let [now (.nat ("lux io current-time"))
                           [ready pending] (list.partition (function (_ thread)
                                                             (|> (get@ #creation thread)
                                                                 (n.+ (get@ #delay thread))
                                                                 (n.<= now)))
                                                           threads)]
                     swapped? (atom.compare_and_swap threads pending ..runner)]
                    (if swapped?
                      (do !
                        [_ (monad.map ! (get@ #action) ready)]
                        (run! []))
                      (error! (ex.construct ..cannot_continue_running_threads []))))
                  )))
            ))
