(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [control
    ["." io (#+ IO)]
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]]
   [data
    [text
     ["%" format (#+ format)]]
    [number
     ["n" nat]
     ["i" int]]
    [collection
     ["." queue (#+ Queue)]]]
   [type
    abstract
    ["." refinement]]]
  [//
   ["." atom (#+ Atom)]
   ["." promise (#+ Promise Resolver)]])

(type: State
  {#max-positions Nat
   #open-positions Int
   #waiting-list (Queue (Resolver Any))})

(abstract: #export Semaphore
  (Atom State)

  {#.doc "A tool for controlling access to resources by multiple concurrent processes."}

  (def: most-positions-possible
    (.nat (:: i.interval top)))

  (def: #export (semaphore initial-open-positions)
    (-> Nat Semaphore)
    (let [max-positions (n.min initial-open-positions
                               ..most-positions-possible)]
      (:abstraction (atom.atom {#max-positions max-positions
                                #open-positions (.int max-positions)
                                #waiting-list queue.empty}))))

  (def: #export (wait semaphore)
    (Ex [k] (-> Semaphore (Promise Any)))
    (let [semaphore (:representation semaphore)
          [signal sink] (: [(Promise Any) (Resolver Any)]
                           (promise.promise []))]
      (exec (promise.future
             (loop [_ []]
               (do io.monad
                 [state (atom.read semaphore)
                  #let [[ready? state'] (: [Bit State]
                                           (if (i.> +0 (get@ #open-positions state))
                                             [true (|> state
                                                       (update@ #open-positions dec))]
                                             [false (|> state
                                                        (update@ #open-positions dec)
                                                        (update@ #waiting-list (queue.push sink)))]))]
                  success? (atom.compare-and-swap state state' semaphore)]
                 (if success?
                   (if ready?
                     (sink [])
                     (wrap false))
                   (recur [])))))
        signal)))

  (exception: #export (semaphore-is-maxed-out {max-positions Nat})
    (exception.report
     ["Max Positions" (%.nat max-positions)]))

  (def: #export (signal semaphore)
    (Ex [k] (-> Semaphore (Promise (Try Int))))
    (let [semaphore (:representation semaphore)]
      (promise.future
       (loop [_ []]
         (do {@ io.monad}
           [state (atom.read semaphore)
            #let [[?sink state' maxed-out?] (: [(Maybe (Resolver Any)) State Bit]
                                               (case (queue.peek (get@ #waiting-list state))
                                                 #.None
                                                 (if (n.= (get@ #max-positions state)
                                                          (.nat (get@ #open-positions state)))
                                                   [#.None
                                                    state
                                                    true]
                                                   [#.None
                                                    (update@ #open-positions inc state)
                                                    false])
                                                 
                                                 (#.Some head)
                                                 [(#.Some head)
                                                  (|> state
                                                      (update@ #open-positions inc)
                                                      (update@ #waiting-list queue.pop))
                                                  false]))]]
           (if maxed-out?
             (wrap (exception.throw ..semaphore-is-maxed-out [(get@ #max-positions state)]))
             (do @
               [#let [open-positions (get@ #open-positions state')]
                success? (atom.compare-and-swap state state' semaphore)]
               (if success?
                 (do @
                   [_ (case ?sink
                        #.None
                        (wrap true)

                        (#.Some sink)
                        (sink []))]
                   (wrap (#try.Success open-positions)))
                 (recur [])))))))))
  )

(abstract: #export Mutex
  Semaphore

  {#.doc "A mutual-exclusion lock that can only be acquired by one process at a time."}

  (def: #export (mutex _)
    (-> Any Mutex)
    (:abstraction (semaphore 1)))

  (def: acquire
    (-> Mutex (Promise Any))
    (|>> :representation wait))

  (def: release
    (-> Mutex (Promise Any))
    (|>> :representation signal))

  (def: #export (synchronize mutex procedure)
    (All [a] (-> Mutex (IO (Promise a)) (Promise a)))
    (do promise.monad
      [_ (acquire mutex)
       output (io.run procedure)
       _ (release mutex)]
      (wrap output)))
  )

(def: #export limit (refinement.refinement (n.> 0)))
(type: #export Limit (:~ (refinement.type limit)))

(abstract: #export Barrier
  {#limit Limit
   #count (Atom Nat)
   #start-turnstile Semaphore
   #end-turnstile Semaphore}

  {#.doc "A barrier that blocks all processes from proceeding until a given number of processes are parked at the barrier."}

  (def: #export (barrier limit)
    (-> Limit Barrier)
    (:abstraction {#limit limit
                   #count (atom.atom 0)
                   #start-turnstile (semaphore 0)
                   #end-turnstile (semaphore 0)}))

  (def: (un-block times turnstile)
    (-> Nat Semaphore (Promise Any))
    (loop [step 0]
      (if (n.< times step)
        (do promise.monad
          [_ (..signal turnstile)]
          (recur (inc step)))
        (:: promise.monad wrap []))))

  (template [<phase> <update> <goal> <turnstile>]
    [(def: (<phase> (^:representation barrier))
       (-> Barrier (Promise Any))
       (do promise.monad
         [#let [limit (refinement.un-refine (get@ #limit barrier))
                goal <goal>
                count (io.run (atom.update <update> (get@ #count barrier)))
                reached? (n.= goal count)]]
         (if reached?
           (un-block limit (get@ <turnstile> barrier))
           (wait (get@ <turnstile> barrier)))))]

    [start inc limit #start-turnstile]
    [end   dec 0     #end-turnstile]
    )

  (def: #export (block barrier)
    (-> Barrier (Promise Any))
    (do promise.monad
      [_ (..start barrier)]
      (..end barrier)))
  )
