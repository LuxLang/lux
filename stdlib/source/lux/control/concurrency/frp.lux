(.module:
  [lux (#- Source)
   [control
    [functor (#+ Functor)]
    [apply (#+ Apply)]
    ["." monad (#+ do Monad)]
    [predicate (#+ Predicate)]
    [equivalence (#+ Equivalence)]]
   ["." io (#+ IO)]
   [data
    [maybe ("maybe/." functor)]
    [collection
     [list ("list/." monoid)]]]
   [type (#+ :share)
    abstract]]
  [//
   ["." atom (#+ Atom)]
   ["." promise (#+ Promise) ("promise/." functor)]])

(type: #export (Channel a)
  {#.doc "An asynchronous channel to distribute values."}
  (Promise (Maybe [a (Channel a)])))

(signature: #export (Source a)
  (: (IO Bit)
     close)
  (: (-> a (IO Bit))
     feed))

(def: (source resolve)
  (All [a]
    (-> (promise.Resolver (Maybe [a (Channel a)]))
        (Source a)))
  (let [source (atom.atom resolve)]
    (structure
     (def: close
       (loop [_ []]
         (do io.monad
           [current (atom.read source)
            stopped? (current #.None)]
           (if stopped?
             ## I closed the source.
             (wrap true)
             ## Someone else interacted with the source.
             (do @
               [latter (atom.read source)]
               (if (is? current latter)
                 ## Someone else closed the source.
                 (wrap true)
                 ## Someone else fed the source while I was closing it.
                 (recur [])))))))
     
     (def: (feed value)
       (loop [_ []]
         (do io.monad
           [current (atom.read source)
            #let [[next resolve-next] (:share [a]
                                              {(promise.Resolver (Maybe [a (Channel a)]))
                                               current}
                                              {[(Promise (Maybe [a (Channel a)]))
                                                (promise.Resolver (Maybe [a (Channel a)]))]
                                               (promise.promise [])})]
            fed? (current (#.Some [value next]))]
           (if fed?
             ## I fed the source.
             (atom.compare-and-swap current resolve-next source)
             ## Someone else interacted with the source.
             (do @
               [latter (atom.read source)]
               (if (is? current latter)
                 ## Someone else closed the source while I was feeding it.
                 (wrap false)
                 ## Someone else fed the source.
                 (recur []))))))))))

(def: #export (channel _)
  (All [a] (-> Any [(Channel a) (Source a)]))
  (let [[promise resolve] (promise.promise [])]
    [promise (..source resolve)]))

(def: #export (listen listener channel)
  (All [a] (-> (-> a (IO Any)) (Channel a) (IO Any)))
  (io.io (exec (: (Promise Any)
                  (loop [channel channel]
                    (do promise.monad
                      [cons channel]
                      (case cons
                        (#.Some [head tail])
                        (exec (io.run (listener head))
                          (recur tail))
                        
                        #.None
                        (wrap [])))))
           [])))

(structure: #export functor (Functor Channel)
  (def: (map f)
    (promise/map
     (maybe/map
      (function (_ [head tail])
        [(f head) (map f tail)])))))

(structure: #export apply (Apply Channel)
  (def: &functor ..functor)

  (def: (apply ff fa)
    (do promise.monad
      [cons-f ff
       cons-a fa]
      (case [cons-f cons-a]
        [(#.Some [head-f tail-f]) (#.Some [head-a tail-a])]
        (wrap (#.Some [(head-f head-a) (apply tail-f tail-a)]))

        _
        (wrap #.None)))))

(structure: #export monad (Monad Channel)
  (def: &functor ..functor)

  (def: (wrap a)
    (promise.resolved (#.Some [a (promise.resolved #.None)])))

  (def: (join mma)
    (let [[output source] (channel [])]
      (exec (io.run (..listen (..listen (:: source feed))
                              mma))
        output))))

(def: #export (filter pass? channel)
  (All [a] (-> (Predicate a) (Channel a) (Channel a)))
  (do promise.monad
    [cons channel]
    (case cons
      (#.Some [head tail])
      (let [tail' (filter pass? tail)]
        (if (pass? head)
          (wrap (#.Some [head tail']))
          tail'))
      
      #.None
      (wrap #.None))))

(def: #export (from-promise promise)
  (All [a] (-> (Promise a) (Channel a)))
  (promise/map (function (_ value)
                 (#.Some [value (promise.resolved #.None)]))
               promise))

(def: #export (fold f init channel)
  {#.doc "Asynchronous fold over channels."}
  (All [a b]
    (-> (-> b a (Promise a)) a (Channel b)
        (Promise a)))
  (do promise.monad
    [cons channel]
    (case cons
      #.None
      (wrap init)
      
      (#.Some [head tail])
      (do @
        [init' (f head init)]
        (fold f init' tail)))))

(def: #export (folds f init channel)
  {#.doc "A channel of folds."}
  (All [a b]
    (-> (-> b a (Promise a)) a (Channel b)
        (Channel a)))
  (do promise.monad
    [cons channel]
    (case cons
      #.None
      (wrap (#.Some [init (wrap #.None)]))
      
      (#.Some [head tail])
      (do @
        [init' (f head init)]
        (folds f init' tail)))))

(def: #export (poll milli-seconds action)
  (All [a] (-> Nat (IO a) (Channel a)))
  (let [[output source] (channel [])]
    (exec (io.run (loop [_ []]
                    (do io.monad
                      [value action
                       _ (:: source feed value)]
                      (promise.await recur (promise.wait milli-seconds)))))
      output)))

(def: #export (periodic milli-seconds)
  (-> Nat (Channel Any))
  (poll milli-seconds (io.io [])))

(def: #export (iterate f init)
  (All [a] (-> (-> a (Promise (Maybe a))) a (Channel a)))
  (do promise.monad
    [?next (f init)]
    (case ?next
      (#.Some next)
      (wrap (#.Some [init (iterate f next)]))
      
      #.None
      (wrap (#.Some [init (wrap #.None)])))))

(def: (distinct' equivalence previous channel)
  (All [a] (-> (Equivalence a) a (Channel a) (Channel a)))
  (do promise.monad
    [cons channel]
    (case cons
      (#.Some [head tail])
      (if (:: equivalence = previous head)
        (distinct' equivalence previous tail)
        (wrap (#.Some [head (distinct' equivalence head tail)])))
      
      #.None
      (wrap #.None))))

(def: #export (distinct equivalence channel)
  (All [a] (-> (Equivalence a) (Channel a) (Channel a)))
  (do promise.monad
    [cons channel]
    (case cons
      (#.Some [head tail])
      (wrap (#.Some [head (distinct' equivalence head tail)]))
      
      #.None
      (wrap #.None))))

(def: #export (consume channel)
  {#.doc "Reads the entirety of a channel's content and returns it as a list."}
  (All [a] (-> (Channel a) (Promise (List a))))
  (do promise.monad
    [cons channel]
    (case cons
      (#.Some [head tail])
      (:: @ map (|>> (#.Cons head))
          (consume tail))

      #.None
      (wrap #.Nil))))

(def: #export (sequential milli-seconds values)
  (All [a] (-> Nat (List a) (Channel a)))
  (case values
    #.Nil
    (promise.resolved #.None)

    (#.Cons head tail)
    (promise.resolved (#.Some [head (do promise.monad
                                      [_ (promise.wait milli-seconds)]
                                      (sequential milli-seconds tail))]))))
