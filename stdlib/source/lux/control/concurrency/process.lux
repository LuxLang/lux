(.module:
  [lux #*
   ["@" target]
   ["." host]
   [abstract
    ["." monad (#+ do)]]
   [control
    ["ex" exception (#+ exception:)]
    ["." io (#+ IO io)]]
   [data
    [number
     ["n" nat]]
    [collection
     ["." list]]]]
  [//
   ["." atom (#+ Atom)]])

(for {@.old
      (as-is (host.import: java/lang/Object)

             (host.import: java/lang/Runtime
               (#static getRuntime [] java/lang/Runtime)
               (availableProcessors [] int))

             (host.import: java/lang/Runnable)

             (host.import: java/util/concurrent/TimeUnit
               (#enum MILLISECONDS))
             
             (host.import: java/util/concurrent/Executor
               (execute [java/lang/Runnable] #io void))

             (host.import: (java/util/concurrent/ScheduledFuture a))

             (host.import: java/util/concurrent/ScheduledThreadPoolExecutor
               (new [int])
               (schedule [java/lang/Runnable long java/util/concurrent/TimeUnit] #io (java/util/concurrent/ScheduledFuture java/lang/Object))))

      @.jvm
      (as-is (host.import: java/lang/Object)

             (host.import: java/lang/Runtime
               (#static getRuntime [] java/lang/Runtime)
               (availableProcessors [] int))

             (host.import: java/lang/Runnable)

             (host.import: java/util/concurrent/TimeUnit
               (#enum MILLISECONDS))
             
             (host.import: java/util/concurrent/Executor
               (execute [java/lang/Runnable] #io void))

             (host.import: (java/util/concurrent/ScheduledFuture a))

             (host.import: java/util/concurrent/ScheduledThreadPoolExecutor
               (new [int])
               (schedule [java/lang/Runnable long java/util/concurrent/TimeUnit] #io (java/util/concurrent/ScheduledFuture java/lang/Object))))

      @.js
      (as-is (host.import: (setTimeout [host.Function host.Number] #io Any)))}
     
     ## Default
     (type: Process
       {#creation Nat
        #delay Nat
        #action (IO Any)})
     )

(def: #export parallelism
  Nat
  (for {@.old
        (|> (java/lang/Runtime::getRuntime)
            (java/lang/Runtime::availableProcessors)
            .nat)

        @.jvm
        (|> (java/lang/Runtime::getRuntime)
            (java/lang/Runtime::availableProcessors)
            .nat)}
       
       ## Default
       1))

(for {@.old
      (def: runner
        (java/util/concurrent/ScheduledThreadPoolExecutor::new (.int ..parallelism)))

      @.jvm
      (def: runner
        (java/util/concurrent/ScheduledThreadPoolExecutor::new (.int ..parallelism)))

      @.js
      (as-is)}
     
     ## Default
     (def: runner
       (Atom (List Process))
       (atom.atom (list))))

(def: #export (schedule milli-seconds action)
  (-> Nat (IO Any) (IO Any))
  (for {@.old
        (let [runnable (host.object [] [java/lang/Runnable]
                         []
                         (java/lang/Runnable [] (run self) void
                                             (io.run action)))]
          (case milli-seconds
            0 (java/util/concurrent/Executor::execute runnable runner)
            _ (java/util/concurrent/ScheduledThreadPoolExecutor::schedule runnable (.int milli-seconds) java/util/concurrent/TimeUnit::MILLISECONDS
                                                                          runner)))

        @.jvm
        (let [runnable (host.object [] [java/lang/Runnable]
                         []
                         (java/lang/Runnable [] (run self) void
                                             (io.run action)))]
          (case milli-seconds
            0 (java/util/concurrent/Executor::execute runnable runner)
            _ (java/util/concurrent/ScheduledThreadPoolExecutor::schedule runnable (.int milli-seconds) java/util/concurrent/TimeUnit::MILLISECONDS
                                                                          runner)))

        @.js
        (..setTimeout [(host.closure [] (io.run action))
                       (n.frac milli-seconds)])}
       
       ## Default
       (do io.monad
         [_ (atom.update (|>> (#.Cons {#creation (.nat ("lux io current-time"))
                                       #delay milli-seconds
                                       #action action}))
                         ..runner)]
         (wrap []))))

(for {@.old
      (as-is)

      @.jvm
      (as-is)

      @.js
      (as-is)}
     
     ## Default
     (as-is (exception: #export cannot-continue-running-processes)
            
            (def: #export (run! _)
              (-> Any (IO Any))
              (do {! io.monad}
                [processes (atom.read ..runner)]
                (case processes
                  ## And... we're done!
                  #.Nil
                  (wrap [])

                  _
                  (do !
                    [#let [now (.nat ("lux io current-time"))
                           [ready pending] (list.partition (function (_ process)
                                                             (|> (get@ #creation process)
                                                                 (n.+ (get@ #delay process))
                                                                 (n.<= now)))
                                                           processes)]
                     swapped? (atom.compare-and-swap processes pending ..runner)]
                    (if swapped?
                      (do !
                        [_ (monad.map ! (get@ #action) ready)]
                        (run! []))
                      (error! (ex.construct ..cannot-continue-running-processes []))))
                  )))
            ))
