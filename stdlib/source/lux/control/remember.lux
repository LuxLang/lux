(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [control
    ["p" parser ("#@." functor)
     ["s" code (#+ Parser)]]
    ["ex" exception (#+ exception:)]]
   [data
    ["." error]
    ["." text
     format]]
   [time
    ["." instant]
    ["." date (#+ Date) ("#@." order codec)]]
   ["." macro
    ["." code]
    [syntax (#+ syntax:)]]
   ["." io]])

(exception: #export (must-remember {message Text} {focus (Maybe Code)})
  (format message text.new-line
          (case focus
            (#.Some focus)
            (%code focus)

            #.None
            "")))

(def: deadline
  (Parser Date)
  ($_ p.either
      (p@map (|>> instant.from-millis instant.date)
             s.int)
      (do p.monad
        [raw s.text]
        (case (:: date.codec decode raw)
          (#error.Success date)
          (wrap date)
          
          (#error.Failure message)
          (p.fail message)))))

(syntax: #export (remember {deadline ..deadline} {message s.text} {focus (p.maybe s.any)})
  (let [now (io.run instant.now)
        today (instant.date now)]
    (if (date@< deadline today)
      (wrap (case focus
              (#.Some focus)
              (list focus)

              #.None
              (list)))
      (macro.fail (ex.construct must-remember [message focus])))))

(template [<name> <message>]
  [(syntax: #export (<name> {deadline ..deadline} {message s.text} {focus (p.maybe s.any)})
     (wrap (list (` (..remember (~ (code.text (date@encode deadline)))
                      (~ (code.text (format <message> " " message)))
                      (~+ (case focus
                            (#.Some focus)
                            (list focus)

                            #.None
                            (list))))))))]

  [to-do  "TODO"]
  [fix-me "FIXME"]
  )
