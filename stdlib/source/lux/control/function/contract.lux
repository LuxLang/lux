(.module:
  [lux #*
   [control
    ["." exception (#+ exception:)]]
   [data
    [number
     ["i" int]]
    [text
     ["%" format (#+ format)]]]
   [meta (#+ with-gensyms)]
   [macro
    [syntax (#+ syntax:)]
    ["." code]]])

(template [<name>]
  [(exception: (<name> {condition Code})
     (exception.report
      ["Condition" (%.code condition)]))]

  [pre-condition-failed]
  [post-condition-failed]
  )

(def: (assert! message test)
  (-> Text Bit [])
  (if test
    []
    (error! message)))

(syntax: #export (pre test expr)
  {#.doc (doc "Pre-conditions."
              "Given a test and an expression to run, only runs the expression if the test passes."
              "Otherwise, an error is raised."
              (pre (i.= +4 (i.+ +2 +2))
                   (foo +123 +456 +789)))}
  (wrap (list (` (exec ((~! ..assert!) (~ (code.text (exception.construct ..pre-condition-failed test)))
                        (~ test))
                   (~ expr))))))

(syntax: #export (post test expr)
  {#.doc (doc "Post-conditions."
              "Given a predicate and an expression to run, evaluates the expression and then tests the output with the predicate."
              "If the predicate returns #1, returns the value of the expression."
              "Otherwise, an error is raised."
              (post i.even?
                    (i.+ +2 +2)))}
  (with-gensyms [g!output]
    (wrap (list (` (let [(~ g!output) (~ expr)]
                     (exec ((~! ..assert!) (~ (code.text (exception.construct ..post-condition-failed test)))
                            ((~ test) (~ g!output)))
                       (~ g!output))))))))
