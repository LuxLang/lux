(.module:
  [lux #*
   [control [monoid (#+ Monoid)]]
   [data [collection [set (#+ Set)]]]
   [function]])

(type: #export (Predicate a)
  (-> a Bit))

(do-template [<identity-name> <identity-value> <composition-name> <composition>]
  [(def: #export <identity-name>
     (All [a] (Predicate a))
     (function.constant <identity-value>))

   (def: #export (<composition-name> left right)
     (All [a] (-> (Predicate a) (Predicate a) (Predicate a)))
     (function (_ value)
       (<composition> (left value)
                      (right value))))]

  [none #0 union        or]
  [all  #1 intersection and]
  )

(do-template [<name> <identity> <composition>]
  [(structure: #export <name> (All [a] (Monoid (Predicate a)))
     (def: identity <identity>)
     (def: compose <composition>))]

  [Union@Monoid        none union]
  [Intersection@Monoid all intersection]
  )

(def: #export (complement predicate)
  (All [a] (-> (Predicate a) (Predicate a)))
  (|>> predicate not))

(def: #export (difference sub base)
  (All [a] (-> (Predicate a) (Predicate a) (Predicate a)))
  (function (_ value)
    (and (base value)
         (not (sub value)))))

(def: #export (set set)
  (All [a] (-> (Set a) (Predicate a)))
  (set.member? set))

(def: #export (rec predicate)
  (All [a]
    (-> (-> (Predicate a) (Predicate a))
        (Predicate a)))
  (|>> (predicate (rec predicate))))
