(.module:
  lux
  (lux (data (coll (set ["set" unordered #+ Set])))))

(type: #export (Pred a)
  (-> a Bool))

(do-template [<name> <combo>]
  [(def: #export (<name> left right)
     (All [a] (-> (Pred a) (Pred a) (Pred a)))
     (function (_ value)
       (<combo> (left value)
                (right value))))]

  [union        or]
  [intersection and]
  )

(def: #export (complement predicate)
  (All [a] (-> (Pred a) (Pred a)))
  (|>> predicate not))

(def: #export (difference sub base)
  (All [a] (-> (Pred a) (Pred a) (Pred a)))
  (function (_ value)
    (and (base value)
         (not (sub value)))))

(def: #export (set set)
  (All [a] (-> (Set a) (Pred a)))
  (set.member? set))

(def: #export (rec predicate)
  (All [a]
    (-> (-> (Pred a) (Pred a))
        (Pred a)))
  (|>> (predicate (rec predicate))))
