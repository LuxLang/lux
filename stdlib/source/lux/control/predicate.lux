(.module:
  lux
  (lux (control [monoid #+ Monoid])
       (data (coll (set ["set" unordered #+ Set])))
       [function]))

(type: #export (Predicate a)
  (-> a Bool))

(alias: Pred Predicate)

(do-template [<identity-name> <identity-value> <composition-name> <composition>]
  [(def: #export <identity-name>
     (All [a] (Pred a))
     (function.const <identity-value>))

   (def: #export (<composition-name> left right)
     (All [a] (-> (Pred a) (Pred a) (Pred a)))
     (function (_ value)
       (<composition> (left value)
                      (right value))))]

  [none false union        or]
  [all  true  intersection and]
  )

(do-template [<name> <identity> <composition>]
  [(struct: #export <name> (All [a] (Monoid (Pred a)))
     (def: identity <identity>)
     (def: compose <composition>))]

  [Union@Monoid        none union]
  [Intersection@Monoid all intersection]
  )

(def: #export (complement predicate)
  (All [a] (-> (Pred a) (Pred a)))
  (|>> predicate not))

(def: #export (difference sub base)
  (All [a] (-> (Pred a) (Pred a) (Pred a)))
  (function (_ value)
    (and (base value)
         (not (sub value)))))

(def: #export (set set)
  (All [a] (-> (Set a) (Pred a)))
  (set.member? set))

(def: #export (rec predicate)
  (All [a]
    (-> (-> (Pred a) (Pred a))
        (Pred a)))
  (|>> (predicate (rec predicate))))
