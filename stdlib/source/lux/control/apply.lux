(.module:
  lux
  [//
   ["." functor (#+ Functor)]
   [monad (#+ Monad)]])

(signature: #export (Apply f)
  {#.doc "Applicative functors."}
  (: (Functor f)
     functor)
  (: (All [a b]
       (-> (f (-> a b)) (f a) (f b)))
     apply))

(structure: #export (compose Monad<F> Apply<F> Apply<G>)
  {#.doc "Applicative functor composition."}
  (All [F G]
    (-> (Monad F) (Apply F) (Apply G)
        (Apply (All [a] (F (G a))))))
  
  (def: functor (functor.compose (get@ #functor Apply<F>) (get@ #functor Apply<G>)))
  
  (def: (apply fgf fgx)
    ## TODO: Switch from this version to the one below (in comments) ASAP.
    (let [fgf' (:: Apply<F> apply
                   (:: Monad<F> wrap (:: Apply<G> apply))
                   fgf)]
      (:: Apply<F> apply fgf' fgx))
    ## (let [applyF (:: Apply<F> apply)
    ##       applyG (:: Apply<G> apply)]
    ##   ($_ applyF
    ##       (:: Monad<F> wrap applyG)
    ##       fgf
    ##       fgx))
    ))
