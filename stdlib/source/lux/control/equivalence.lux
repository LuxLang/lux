(.module: lux)

(signature: #export (Equivalence a)
  {#.doc "Equivalence for a type's instances."}
  (: (-> a a Bool)
     =))

(def: #export (product left right)
  (All [l r] (-> (Equivalence l) (Equivalence r) (Equivalence [l r])))
  (structure (def: (= [a b] [x y])
               (and (:: left = a x)
                    (:: right = b y)))))

(def: #export (sum left right)
  (All [l r] (-> (Equivalence l) (Equivalence r) (Equivalence (| l r))))
  (structure (def: (= a|b x|y)
               (case [a|b x|y]
                 [(+0 a) (+0 x)]
                 (:: left = a x)

                 [(+1 b) (+1 y)]
                 (:: right = b y)

                 _
                 false))))

(def: #export (rec sub)
  (All [a] (-> (-> (Equivalence a) (Equivalence a)) (Equivalence a)))
  (structure (def: (= left right)
               (sub (rec sub) left right))))
