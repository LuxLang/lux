(.module:
  [lux #*
   [abstract
    [functor (#+ Functor)]
    [apply (#+ Apply)]
    ["." monad (#+ Monad do)]]
   [control
    ["." try (#+ Try)]]
   [data
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#@." fold)]]]]
  [//
   ["." exception (#+ Exception exception:)]])

(type: (Cleaner r m)
  (-> r (m (Try Any))))

(type: #export (Region r m a)
  (-> [r (List (Cleaner r m))]
      (m [(List (Cleaner r m))
          (Try a)])))

(def: separator
  Text
  (format text.new-line
          "-----------------------------------------" text.new-line
          "-----------------------------------------" text.new-line
          "-----------------------------------------" text.new-line
          text.new-line))

(exception: #export [a] (clean-up-error {error Text}
                                        {output (Try a)})
  (format error
          (case output
            (#try.Success _)
            ""

            (#try.Failure error|output)
            (format separator
                    error|output))))

(def: (combine-outcomes clean-up output)
  (All [a] (-> (Try Any) (Try a) (Try a)))
  (case clean-up
    (#try.Success _)
    output

    (#try.Failure error|clean-up)
    (exception.throw ..clean-up-error [error|clean-up output])))

(def: #export (run Monad<m> computation)
  (All [m a]
    (-> (Monad m) (All [r] (Region r m a))
        (m (Try a))))
  (do {@ Monad<m>}
    [[cleaners output] (computation [[] (list)])
     results (monad.map @ (function (_ cleaner) (cleaner []))
                        cleaners)]
    (wrap (list@fold combine-outcomes output results))))

(def: #export (acquire Monad<m> cleaner value)
  (All [m a] (-> (Monad m) (-> a (m (Try Any))) a
                 (All [r] (Region r m a))))
  (function (_ [region cleaners])
    (:: Monad<m> wrap [(#.Cons (function (_ region) (cleaner value))
                               cleaners)
                       (#try.Success value)])))

(structure: #export (functor Functor<m>)
  (All [m]
    (-> (Functor m)
        (All [r] (Functor (Region r m)))))

  (def: (map f)
    (function (_ fa)
      (function (_ region+cleaners)
        (:: Functor<m> map
            (function (_ [cleaners' temp])
              [cleaners' (case temp
                           (#try.Success value)
                           (#try.Success (f value))

                           (#try.Failure error)
                           (#try.Failure error))])
            (fa region+cleaners))))))

(structure: #export (apply Monad<m>)
  (All [m]
    (-> (Monad m)
        (All [r] (Apply (Region r m)))))

  (def: &functor
    (..functor (get@ #monad.&functor Monad<m>)))

  (def: (apply ff fa)
    (function (_ [region cleaners])
      (do Monad<m>
        [[cleaners ef] (ff [region cleaners])
         [cleaners ea] (fa [region cleaners])]
        (case ef
          (#try.Success f)
          (case ea
            (#try.Success a)
            (wrap [cleaners (#try.Success (f a))])
            
            (#try.Failure error)
            (wrap [cleaners (#try.Failure error)]))
          
          (#try.Failure error)
          (wrap [cleaners (#try.Failure error)]))))))

(structure: #export (monad Monad<m>)
  (All [m]
    (-> (Monad m)
        (All [r] (Monad (Region r m)))))

  (def: &functor
    (..functor (get@ #monad.&functor Monad<m>)))

  (def: (wrap value)
    (function (_ [region cleaners])
      (:: Monad<m> wrap [cleaners (#try.Success value)])))

  (def: (join ffa)
    (function (_ [region cleaners])
      (do Monad<m>
        [[cleaners efa] (ffa [region cleaners])]
        (case efa
          (#try.Success fa)
          (fa [region cleaners])

          (#try.Failure error)
          (wrap [cleaners (#try.Failure error)]))))))

(def: #export (fail Monad<m> error)
  (All [m a]
    (-> (Monad m) Text
        (All [r] (Region r m a))))
  (function (_ [region cleaners])
    (:: Monad<m> wrap [cleaners (#try.Failure error)])))

(def: #export (throw Monad<m> exception message)
  (All [m e a]
    (-> (Monad m) (Exception e) e
        (All [r] (Region r m a))))
  (fail Monad<m> (exception.construct exception message)))

(def: #export (lift Monad<m> operation)
  (All [m a]
    (-> (Monad m) (m a)
        (All [r] (Region r m a))))
  (function (_ [region cleaners])
    (do Monad<m>
      [output operation]
      (wrap [cleaners (#try.Success output)]))))
