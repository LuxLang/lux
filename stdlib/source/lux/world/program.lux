(.module:
  [lux #*
   ["@" target]
   ["." ffi (#+ import:)]
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." function]
    ["." io (#+ IO)]
    ["." try]
    [concurrency
     ["." atom]
     ["." promise (#+ Promise)]]
    [parser
     ["." environment (#+ Environment)]]]
   [data
    ["." bit ("#\." equivalence)]
    ["." maybe]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." array (#+ Array) ("#\." fold)]
     ["." dictionary (#+ Dictionary)]
     ["." list ("#\." functor)]]]
   [math
    [number
     ["i" int]]]
   [type
    abstract]]
  [//
   [file (#+ Path)]
   [shell (#+ Exit)]])

(signature: #export (Program !)
  (: (-> Any (! Environment))
     environment)
  (: (-> Any (! Path))
     home)
  (: (-> Any (! Path))
     directory)
  (: (-> Exit (! Nothing))
     exit))

(def: #export (async program)
  (-> (Program IO) (Program Promise))
  (structure
   (def: environment
     (|>> (\ program environment) promise.future))
   (def: home
     (|>> (\ program home) promise.future))
   (def: directory
     (|>> (\ program directory) promise.future))
   (def: exit
     (|>> (\ program exit) promise.future))))

(def: #export (mock environment home directory)
  (-> Environment Path Path (Program IO))
  (let [@dead? (atom.atom false)]
    (structure
     (def: environment
       (function.constant (io.io environment)))
     (def: home
       (function.constant (io.io home)))
     (def: directory
       (function.constant (io.io directory)))
     (def: (exit code)
       (io.io (error! (%.int code)))))))

## Do not trust the values of environment variables
## https://wiki.sei.cmu.edu/confluence/display/java/ENV02-J.+Do+not+trust+the+values+of+environment+variables

(with_expansions [<jvm> (as_is (import: java/lang/String)

                               (import: (java/util/Map$Entry k v)
                                 ["#::."
                                  (getKey [] k)
                                  (getValue [] v)])

                               (import: (java/util/Iterator a)
                                 ["#::."
                                  (hasNext [] boolean)
                                  (next [] a)])

                               (import: (java/util/Set a)
                                 ["#::."
                                  (iterator [] (java/util/Iterator a))])

                               (import: (java/util/Map k v)
                                 ["#::."
                                  (entrySet [] (java/util/Set (java/util/Map$Entry k v)))])

                               (import: java/lang/System
                                 ["#::."
                                  (#static getenv [] (java/util/Map java/lang/String java/lang/String))
                                  (#static getProperty [java/lang/String] #? java/lang/String)
                                  (#static exit [int] #io void)])

                               (def: (jvm\\consume f iterator)
                                 (All [a b] (-> (-> a b) (java/util/Iterator a) (List b)))
                                 (if (java/util/Iterator::hasNext iterator)
                                   (#.Cons (f (java/util/Iterator::next iterator))
                                           (jvm\\consume f iterator))
                                   #.Nil))

                               (def: (jvm\\to_kv entry)
                                 (All [k v] (-> (java/util/Map$Entry k v) [k v]))
                                 [(java/util/Map$Entry::getKey entry)
                                  (java/util/Map$Entry::getValue entry)])

                               (def: jvm\\environment
                                 (IO Environment)
                                 (with_expansions [<jvm> (as_is (io.io (|> (java/lang/System::getenv)
                                                                           java/util/Map::entrySet
                                                                           java/util/Set::iterator
                                                                           (..jvm\\consume ..jvm\\to_kv)
                                                                           (dictionary.from_list text.hash))))]
                                   (for {@.old <jvm>
                                         @.jvm <jvm>})))
                               )]
  (for {@.old (as_is <jvm>)
        @.jvm (as_is <jvm>)
        @.js (as_is (def: default_exit!
                      (-> Exit (IO Nothing))
                      (|>> %.int error! io.io))

                    (import: NodeJs_Process
                      (exit [ffi.Number] #io Nothing)
                      (cwd [] #io Path))

                    (def: (exit_node_js! code)
                      (-> Exit (IO Nothing))
                      (case (ffi.constant ..NodeJs_Process [process])
                        (#.Some process)
                        (NodeJs_Process::exit (i.frac code) process)
                        
                        #.None
                        (..default_exit! code)))

                    (import: Browser_Window
                      (close [] Nothing))

                    (import: Browser_Location
                      (reload [] Nothing))

                    (def: (exit_browser! code)
                      (-> Exit (IO Nothing))
                      (case [(ffi.constant ..Browser_Window [window])
                             (ffi.constant ..Browser_Location [location])]
                        [(#.Some window) (#.Some location)]
                        (exec
                          (Browser_Window::close [] window)
                          (Browser_Location::reload [] location)
                          (..default_exit! code))

                        [(#.Some window) #.None]
                        (exec
                          (Browser_Window::close [] window)
                          (..default_exit! code))

                        [#.None (#.Some location)]
                        (exec
                          (Browser_Location::reload [] location)
                          (..default_exit! code))
                        
                        [#.None #.None]
                        (..default_exit! code)))

                    (import: Object
                      (#static entries [Object] (Array (Array ffi.String))))

                    (import: NodeJs_OS
                      (homedir [] #io Path))

                    (import: (require [ffi.String] Any)))
        @.python (as_is (import: os
                          (#static getcwd [] #io ffi.String)
                          (#static _exit [ffi.Integer] #io Nothing))

                        (import: os/path
                          (#static expanduser [ffi.String] #io ffi.String))

                        (import: os/environ
                          (#static keys [] #io (Array ffi.String))
                          (#static get [ffi.String] #io ffi.String)))
        @.lua (as_is (ffi.import: LuaFile
                       (read [ffi.String] #io #? ffi.String)
                       (close [] #io ffi.Boolean))

                     (ffi.import: (io/popen [ffi.String] #io #try #? LuaFile))
                     (ffi.import: (os/getenv [ffi.String] #io #? ffi.String))
                     (ffi.import: (os/exit [ffi.Integer] #io Nothing))

                     (def: (run_command default command)
                       (-> Text Text (IO Text))
                       (do {! io.monad}
                         [outcome (io/popen [command])]
                         (case outcome
                           (#try.Success outcome)
                           (case outcome
                             (#.Some file)
                             (do !
                               [?output (LuaFile::read ["*l"] file)
                                _ (LuaFile::close [] file)]
                               (wrap (maybe.default default ?output)))
                             
                             #.None
                             (wrap default))
                           
                           (#try.Failure _)
                           (wrap default)))))
        @.ruby (as_is (ffi.import: Env #as RubyEnv
                        (#static keys [] (Array Text))
                        (#static fetch [Text] Text))

                      (ffi.import: "fileutils" FileUtils #as RubyFileUtils
                        (#static pwd [] #io Path))
                      
                      (ffi.import: Dir #as RubyDir
                        (#static home [] #io Path))

                      (ffi.import: Kernel #as RubyKernel
                        (#static exit [Int] #io Nothing)))

        @.php
        (as_is (ffi.import: (exit [Int] #io Nothing))
               ## https://www.php.net/manual/en/function.exit.php
               (ffi.import: (getcwd [] #io ffi.String))
               ## https://www.php.net/manual/en/function.getcwd.php
               (ffi.import: (getenv #as getenv/1 [ffi.String] #io ffi.String))
               (ffi.import: (getenv #as getenv/0 [] #io (Array ffi.String)))
               ## https://www.php.net/manual/en/function.getenv.php
               ## https://www.php.net/manual/en/function.array-keys.php
               (ffi.import: (array_keys [(Array ffi.String)] (Array ffi.String)))
               )

        @.scheme
        (as_is (ffi.import: (exit [Int] #io Nothing))
               ## https://srfi.schemers.org/srfi-98/srfi-98.html
               (abstract: Pair Any)
               (abstract: PList Any)
               (ffi.import: (get-environment-variables [] #io PList))
               (ffi.import: (car [Pair] Text))
               (ffi.import: (cdr [Pair] Text))
               (ffi.import: (car #as head [PList] Pair))
               (ffi.import: (cdr #as tail [PList] PList)))}
       (as_is)))

(structure: #export default
  (Program IO)

  (def: (environment _)
    (with_expansions [<jvm> ..jvm\\environment]
      (for {@.old <jvm>
            @.jvm <jvm>
            @.js (io.io (if ffi.on_node_js?
                          (case (ffi.constant Object [process env])
                            (#.Some process/env)
                            (array\fold (function (_ entry environment)
                                          (<| (maybe.default environment)
                                              (do maybe.monad
                                                [variable (array.read 0 entry)
                                                 value (array.read 1 entry)]
                                                (wrap (dictionary.put variable value environment)))))
                                        environment.empty
                                        (Object::entries [process/env]))

                            #.None
                            (undefined))
                          environment.empty))
            @.python (do {! io.monad}
                       [keys (os/environ::keys [])]
                       (monad.fold ! (function (_ variable environment)
                                       (do !
                                         [value (os/environ::get [variable])]
                                         (wrap (dictionary.put variable value environment))))
                                   environment.empty
                                   (array.to_list keys)))
            @.ruby (|> (RubyEnv::keys [])
                       array.to_list
                       (list\map (function (_ variable)
                                   [variable (RubyEnv::fetch [variable])]))
                       (dictionary.from_list text.hash)
                       io.io)
            @.php (do io.monad
                    [environment (..getenv/0 [])]
                    (wrap (|> environment
                              ..array_keys
                              array.to_list
                              (list\map (function (_ variable)
                                          [variable ("php array read" (:coerce Nat variable) environment)]))
                              (dictionary.from_list text.hash))))
            @.scheme (do io.monad
                       [input (..get-environment-variables [])]
                       (loop [input input
                              output environment.empty]
                         (if ("scheme object nil?" input)
                           (wrap output)
                           (let [entry (..head input)]
                             (recur (..tail input)
                                    (dictionary.put (..car entry) (..cdr entry) output))))))}
           ## TODO: Replace dummy implementation.
           (io.io environment.empty))))
  
  (def: (home _)
    (with_expansions [<default> (io.io "~")
                      <jvm> (io.io (maybe.default "" (java/lang/System::getProperty "user.home")))]
      (for {@.old <jvm>
            @.jvm <jvm>
            @.js (if ffi.on_node_js?
                   (|> (..require "os")
                       (:coerce NodeJs_OS)
                       (NodeJs_OS::homedir []))
                   <default>)
            @.python (os/path::expanduser ["~"])
            @.lua (..run_command "~" "echo ~")
            @.ruby (RubyDir::home [])
            @.php (do io.monad
                    [output (..getenv/1 ["HOME"])]
                    (wrap (if (bit\= false (:coerce Bit output))
                            "~"
                            output)))}
           ## TODO: Replace dummy implementation.
           <default>)))

  (def: (directory _)
    (with_expansions [<default> "."
                      <jvm> (io.io (maybe.default "" (java/lang/System::getProperty "user.dir")))]
      (for {@.old <jvm>
            @.jvm <jvm>
            @.js (if ffi.on_node_js?
                   (case (ffi.constant ..NodeJs_Process [process])
                     (#.Some process)
                     (NodeJs_Process::cwd [] process)
                     
                     #.None
                     (io.io <default>))
                   (io.io <default>))
            @.python (os::getcwd [])
            @.lua (do io.monad
                    [#let [default <default>]
                     on_windows (..run_command default "cd")]
                    (if (is? default on_windows)
                      (..run_command default "pwd")
                      (wrap on_windows)))
            @.ruby (RubyFileUtils::pwd [])
            @.php (do io.monad
                    [output (..getcwd [])]
                    (wrap (if (bit\= false (:coerce Bit output))
                            "."
                            output)))}
           ## TODO: Replace dummy implementation.
           (io.io <default>))))
  
  (def: (exit code)
    (with_expansions [<jvm> (do io.monad
                              [_ (java/lang/System::exit code)]
                              (wrap (undefined)))]
      (for {@.old <jvm>
            @.jvm <jvm>
            @.js (cond ffi.on_node_js?
                       (..exit_node_js! code)

                       ffi.on_browser?
                       (..exit_browser! code)

                       ## else
                       (..default_exit! code))
            @.python (os::_exit [code])
            @.lua (os/exit [code])
            @.ruby (RubyKernel::exit [code])
            @.php (..exit [code])
            @.scheme (..exit [code])}))))
