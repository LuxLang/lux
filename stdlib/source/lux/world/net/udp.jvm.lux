(.module:
  [lux #*
   [control
    monad
    ["ex" exception (#+ exception:)]]
   [concurrency
    ["P" promise]
    ["T" task]]
   [data
    ["e" error]
    ["." maybe]
    [collection
     ["." array]]]
   [type
    abstract]
   [world
    [blob (#+ Blob)]]
   ["." io]
   [host (#+ import:)]]
  ["." //])

(import: java/lang/AutoCloseable
  (close [] #io #try void))

(import: java/io/Flushable
  (flush [] #io #try void))

(import: java/net/InetAddress
  (#static getAllByName [String] #io #try (Array InetAddress))
  (getHostAddress [] String))

(import: java/net/DatagramPacket
  (new #as new|send [(Array byte) int int InetAddress int])
  (new #as new|receive [(Array byte) int int])
  (getAddress [] InetAddress)
  (getPort [] int)
  (getLength [] int))

(import: java/net/DatagramSocket
  (new #as new|client [] #io #try)
  (new #as new|server [int] #io #try)
  (receive [DatagramPacket] #io #try void)
  (send [DatagramPacket] #io #try void))

############################################################
############################################################
############################################################

(exception: #export (cannot-resolve-address {address //.Address})
  address)

(exception: #export (multiple-candidate-addresses {address //.Address})
  address)

(def: (resolve address)
  (-> //.Address (io.IO (e.Error InetAddress)))
  (do (e.ErrorT io.Monad<IO>)
    [addresses (InetAddress::getAllByName [address])]
    (: (io.IO (e.Error InetAddress))
       (case (array.size addresses)
         +0 (io.io (ex.throw cannot-resolve-address address))
         +1 (wrap (maybe.assume (array.read +0 addresses)))
         _ (io.io (ex.throw multiple-candidate-addresses address))))))

(abstract: #export UDP {}
  {#socket DatagramSocket}
  
  (def: #export (read data offset length self)
    (-> Blob Nat Nat UDP (T.Task [Nat //.Address //.Port]))
    (let [(^open ".") (:representation self)
          packet (DatagramPacket::new|receive [data (.int offset) (.int length)])]
      (P.future
       (do (e.ErrorT io.Monad<IO>)
         [_ (DatagramSocket::receive [packet] socket)
          #let [bytes-read (.nat (DatagramPacket::getLength [] packet))]]
         (wrap [bytes-read
                (|> packet (DatagramPacket::getAddress []) (InetAddress::getHostAddress []))
                (.nat (DatagramPacket::getPort [] packet))])))))
  
  (def: #export (write address port data offset length self)
    (-> //.Address //.Port Blob Nat Nat UDP (T.Task Any))
    (P.future
     (do (e.ErrorT io.Monad<IO>)
       [address (resolve address)
        #let [(^open ".") (:representation self)]]
       (DatagramSocket::send (DatagramPacket::new|send [data (.int offset) (.int length) address (.int port)])
                             socket))))

  (def: #export (close self)
    (-> UDP (T.Task Any))
    (let [(^open ".") (:representation self)]
      (P.future
       (AutoCloseable::close [] socket))))

  (def: #export (client _)
    (-> Any (T.Task UDP))
    (P.future
     (do (e.ErrorT io.Monad<IO>)
       [socket (DatagramSocket::new|client [])]
       (wrap (:abstraction (#socket socket))))))

  (def: #export (server port)
    (-> //.Port (T.Task UDP))
    (P.future
     (do (e.ErrorT io.Monad<IO>)
       [socket (DatagramSocket::new|server [(.int port)])]
       (wrap (:abstraction (#socket socket))))))
  )
