(.module:
  [lux #*
   [control
    pipe
    ["." monad (#+ do)]
    [concurrency
     ["." promise (#+ Promise)]
     ["." frp]]]
   [data
    ["." maybe]
    ["." error (#+ Error)]
    ["." number]
    ["." text
     ["." encoding]]
    [format
     ["." json (#+ JSON)]
     ["." context (#+ Context Property)]]
    [collection
     ["." list ("#;." functor fold)]
     ["." dictionary]]]
   [world
    ["." binary (#+ Binary)]]]
  ["." // (#+ Body Response Server)
   ["#." response]
   ["#." query]
   ["#." cookie]])

(def: (merge inputs)
  (-> (List Binary) Binary)
  (let [[_ output] (error.assume
                    (monad.fold error.monad
                                (function (_ input [offset output])
                                  (let [amount (binary.size input)]
                                    (:: error.functor map (|>> [(n/+ amount offset)])
                                        (binary.copy amount 0 input offset output))))
                                [0 (|> inputs
                                       (list;map binary.size)
                                       (list;fold n/+ 0)
                                       binary.create)]
                                inputs))]
    output))

(def: (read-text-body body)
  (-> Body (Promise (Error Text)))
  (do promise.monad
    [blobs (frp.consume body)]
    (wrap (encoding.from-utf8 (merge blobs)))))

(def: failure (//response.bad-request ""))

(def: #export (json reader server)
  (All [a] (-> (json.Reader a) (-> a Server) Server))
  (function (_ (^@ request [identification protocol resource message]))
    (do promise.monad
      [?raw (read-text-body (get@ #//.body message))]
      (case (do error.monad
              [raw ?raw
               content (:: json.codec decode raw)]
              (json.run content reader))
        (#error.Success input)
        (server input request)
        
        (#error.Failure error)
        (promise.resolved ..failure)))))

(def: #export (text server)
  (-> (-> Text Server) Server)
  (function (_ (^@ request [identification protocol resource message]))
    (do promise.monad
      [?raw (read-text-body (get@ #//.body message))]
      (case ?raw
        (#error.Success content)
        (server content request)
        
        (#error.Failure error)
        (promise.resolved ..failure)))))

(def: #export (query property server)
  (All [a] (-> (Property a) (-> a Server) Server))
  (function (_ [identification protocol resource message])
    (let [full (get@ #//.uri resource)
          [uri query] (|> full
                          (text.split-with "?")
                          (maybe.default [full ""]))]
      (case (do error.monad
              [query (//query.parameters query)
               input (context.run query property)]
              (wrap [[identification protocol (set@ #//.uri uri resource) message]
                     input]))
        (#error.Success [request input])
        (server input request)
        
        (#error.Failure error)
        (promise.resolved ..failure)))))

(def: #export (form property server)
  (All [a] (-> (Property a) (-> a Server) Server))
  (function (_ (^@ request [identification protocol resource message]))
    (do promise.monad
      [?body (read-text-body (get@ #//.body message))]
      (case (do error.monad
              [body ?body
               form (//query.parameters body)]
              (context.run form property))
        (#error.Success input)
        (server input request)
        
        (#error.Failure error)
        (promise.resolved ..failure)))))

(def: #export (cookies property server)
  (All [a] (-> (Property a) (-> a Server) Server))
  (function (_ (^@ request [identification protocol resource message]))
    (case (do error.monad
            [cookies (|> (get@ #//.headers message)
                         (dictionary.get "Cookie")
                         (maybe.default "")
                         //cookie.get)]
            (context.run cookies property))
      (#error.Success input)
      (server input request)
      
      (#error.Failure error)
      (promise.resolved ..failure))))
