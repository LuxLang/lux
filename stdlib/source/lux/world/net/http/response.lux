(.module:
  [lux #*
   [control
    [concurrency
     ["." frp ("channel/." Monad<Channel>)]]]
   [data
    ["." text
     format
     ["." encoding]]
    [format
     ["." html]
     ["." css (#+ CSS)]
     ["." context]]]
   ["." io]
   [world
    ["." binary (#+ Binary)]]]
  ["." // (#+ Status Body Response)
   ["." status]
   ["." mime (#+ MIME)]
   ["." header]
   [// (#+ URL)]])

(def: #export empty
  (-> Status Response)
  (let [body (channel/wrap (encoding.to-utf8 ""))]
    (function (_ status)
      [status
       {#//.headers (|> context.empty
                        (header.content-length 0)
                        (header.content-type mime.text))
        #//.body body}])))

(def: #export (temporary-redirect to)
  (-> URL Response)
  (let [[status message] (..empty status.temporary-redirect)]
    [status (update@ #//.headers (header.location to) message)]))

(def: #export not-found
  Response
  (..empty status.not-found))

(def: #export (content status type data)
  (-> Status MIME Binary Response)
  [status
   {#//.headers (|> context.empty
                    (header.content-length (binary.size data))
                    (header.content-type type))
    #//.body (channel/wrap data)}])

(def: #export bad-request
  (-> Text Response)
  (|>> encoding.to-utf8 (content status.bad-request mime.text)))

(def: #export ok
  (-> MIME Binary Response)
  (content status.ok))

(def: #export text
  (-> Text Response)
  (|>> encoding.to-utf8 (..ok mime.text)))

(def: #export html
  (-> html.Document Response)
  (|>> html.html encoding.to-utf8 (..ok mime.html)))

(def: #export css
  (-> CSS Response)
  (|>> encoding.to-utf8 (..ok mime.css)))
