(.module:
  [lux #*
   [control
    [concurrency
     ["." frp ("channel/." Monad<Channel>)]]]
   [data
    ["." text
     format
     ["." encoding]]
    [collection
     ["." array]
     ["." dictionary (#+ Dictionary)]]]
   ["." io]
   [world
    ["." binary (#+ Binary)]]]
  ["." // (#+ Body Response)
   ["." status]
   ["." mime]
   ["." header]
   [// (#+ URL)]])

(def: #export (temporary-redirect to)
  (-> URL Response)
  [status.temporary-redirect
   {#//.headers (|> (dictionary.new text.Hash<Text>)
                    (header.content-length 0)
                    (header.content-type mime.text)
                    (header.location to))
    #//.body (channel/wrap (encoding.to-utf8 ""))}])

(def: #export not-found
  Response
  [status.not-found
   {#//.headers (|> (dictionary.new text.Hash<Text>)
                    (header.content-length 0)
                    (header.content-type mime.text))
    #//.body (channel/wrap (encoding.to-utf8 ""))}])

(def: #export (fail message)
  (-> Text Response)
  (let [data (encoding.to-utf8 message)]
    [status.bad-request
     {#//.headers (|> (dictionary.new text.Hash<Text>)
                      (header.content-length (binary.size data))
                      (header.content-type mime.text))
      #//.body (channel/wrap data)}]))

(def: #export (text content)
  (-> Text Response)
  (let [data (encoding.to-utf8 content)]
    [status.ok
     {#//.headers (|> (dictionary.new text.Hash<Text>)
                      (header.content-length (binary.size data))
                      (header.content-type mime.text))
      #//.body (channel/wrap data)}]))
