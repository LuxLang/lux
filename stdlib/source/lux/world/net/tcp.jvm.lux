(.module:
  lux
  (lux (control monad)
       (concurrency [promise #+ Promise promise]
                    [task #+ Task]
                    [frp])
       (data ["e" error])
       (type abstract)
       (world [blob #+ Blob])
       [io #+ Process]
       [host])
  [//])

(host.import java/lang/AutoCloseable
  (close [] #io #try void))

(host.import java/io/Flushable
  (flush [] #io #try void))

(host.import java/io/InputStream
  (read [(Array byte) int int] #io #try int))

(host.import java/io/OutputStream
  (write [(Array byte) int int] #io #try void))

(host.import java/net/Socket
  (new [String int] #io #try)
  (getInputStream [] #io #try InputStream)
  (getOutputStream [] #io #try OutputStream))

(host.import java/net/ServerSocket
  (new [int] #io #try)
  (accept [] #io #try Socket))

############################################################
############################################################
############################################################

(abstract: #export TCP {}
  {#socket Socket
   #in InputStream
   #out OutputStream}
  
  (def: #export (read data offset length self)
    (-> Blob Nat Nat TCP (Task Nat))
    (promise.future
     (do io.Monad<Process>
       [bytes-read (InputStream::read [data (nat-to-int offset) (nat-to-int length)]
                                      (get@ #in (@representation self)))]
       (wrap (int-to-nat bytes-read)))))
  
  (def: #export (write data offset length self)
    (-> Blob Nat Nat TCP (Task Top))
    (let [out (get@ #out (@representation self))]
      (promise.future
       (do io.Monad<Process>
         [_ (OutputStream::write [data (nat-to-int offset) (nat-to-int length)]
                                 out)]
         (Flushable::flush [] out)))))

  (def: #export (close self)
    (-> TCP (Task Top))
    (let [(^open) (@representation self)]
      (promise.future
       (do io.Monad<Process>
         [_ (AutoCloseable::close [] in)
          _ (AutoCloseable::close [] out)]
         (AutoCloseable::close [] socket)))))

  (def: (tcp-client socket)
    (-> Socket (Process TCP))
    (do io.Monad<Process>
      [input (Socket::getInputStream [] socket)
       output (Socket::getOutputStream [] socket)]
      (wrap (@abstraction {#socket socket
                           #in input
                           #out output}))))
  )

(def: #export (client address port)
  (-> //.Address //.Port (Task TCP))
  (promise.future
   (do io.Monad<Process>
     [socket (Socket::new [address (nat-to-int port)])]
     (tcp-client socket))))

(def: #export (server port)
  (-> //.Port (Task [(Promise Top)
                     (frp.Channel TCP)]))
  (promise.future
   (do (e.ErrorT io.Monad<IO>)
     [server (ServerSocket::new [(nat-to-int port)])
      #let [signal (: (Promise Top)
                      (promise #.None))
            _ (promise.await (function (_ _)
                               (AutoCloseable::close [] server))
                             signal)
            output (: (frp.Channel TCP)
                      (frp.channel []))
            _ (: (Promise Top)
                 (promise.future
                  (loop [_ []]
                    (do io.Monad<IO>
                      [?client (do (e.ErrorT io.Monad<IO>)
                                 [socket (ServerSocket::accept [] server)]
                                 (tcp-client socket))]
                      (case ?client
                        (#e.Error error)
                        (wrap [])
                        
                        (#e.Success client)
                        (do @
                          [_ (frp.publish output client)]
                          (recur [])))))))]]
     (wrap [signal output]))))
