(.module:
  [lux #*
   [control
    monad
    [security
     ["." taint (#+ Dirty taint)]]]
   [concurrency
    ["." promise (#+ Promise promise)]
    [task (#+ Task)]
    ["." frp]]
   [data
    ["." error (#+ Error)]]
   [world
    ["." binary (#+ Binary)]]
   ["." io (#+ IO)]
   [host (#+ import:)]
   [platform
    [compiler
     ["." host]]]]
  ["." // (#+ Can-Read Can-Write Can-Close)])

(import: java/lang/AutoCloseable
  (close [] #io #try void))

(import: java/io/Flushable
  (flush [] #io #try void))

(import: java/io/InputStream
  (read [(Array byte) int int] #io #try int))

(import: java/io/OutputStream
  (write [(Array byte) int int] #io #try void))

(import: java/net/Socket
  (new [String int] #io #try)
  (getInputStream [] #try InputStream)
  (getOutputStream [] #try OutputStream))

(import: java/net/ServerSocket
  (new [int] #io #try)
  (accept [] #io #try Socket))

############################################################
############################################################
############################################################

(signature: #export (TCP !)
  (: (Can-Read ! [Nat (Dirty Binary)])
     read)

  (: (Can-Write ! Binary)
     write)

  (: (Can-Close !)
     close))

(def: #export (async tcp)
  (-> (TCP IO) (TCP Promise))
  (`` (structure (~~ (do-template [<capability>]
                       [(def: <capability> (|>> (:: tcp <capability>) promise.future))]

                       [read] [write] [close])))))

(`` (for {(~~ (static host.jvm))
          (as-is (def: (tcp socket)
                   (-> Socket (Error (TCP IO)))
                   (do error.Monad<Error>
                     [input (Socket::getInputStream socket)
                      output (Socket::getOutputStream socket)]
                     (wrap (: (TCP IO)
                              (structure (def: (read size)
                                           (do io.Monad<Process>
                                             [#let [data (binary.create size)]
                                              bytes-read (InputStream::read data +0 (.int size) input)]
                                             (wrap [(.nat bytes-read)
                                                    (taint data)])))
                                         
                                         (def: (write data)
                                           (do io.Monad<Process>
                                             [_ (OutputStream::write data +0 (.int (binary.size data))
                                                                     output)]
                                             (Flushable::flush output)))

                                         (def: (close _)
                                           (do io.Monad<Process>
                                             [_ (AutoCloseable::close input)
                                              _ (AutoCloseable::close output)]
                                             (AutoCloseable::close socket))))))))

                 (def: #export (client address port)
                   (-> //.Address //.Port (IO (Error (TCP IO))))
                   (do io.Monad<Process>
                     [socket (Socket::new address (.int port))]
                     (io.io (tcp socket))))

                 (def: #export (server port)
                   (-> //.Port (IO (Error [(Promise Any)
                                           (frp.Channel (TCP IO))])))
                   (do io.Monad<Process>
                     [server (ServerSocket::new (.int port))
                      #let [close-signal (: (Promise Any)
                                            (promise #.None))
                            _ (promise.await (function (_ _)
                                               (AutoCloseable::close server))
                                             close-signal)
                            output (: (frp.Channel (TCP IO))
                                      (frp.channel []))
                            _ (: (Promise Any)
                                 (promise.future
                                  (loop [_ []]
                                    (do io.Monad<IO>
                                      [?client (do io.Monad<Process>
                                                 [socket (ServerSocket::accept server)]
                                                 (io.io (tcp socket)))]
                                      (case ?client
                                        (#error.Error error)
                                        (wrap [])
                                        
                                        (#error.Success client)
                                        (do @
                                          [_ (frp.publish output client)]
                                          (recur [])))))))]]
                     (wrap [close-signal output]))))}))
