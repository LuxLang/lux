(.module:
  [lux #*
   [control
    [equivalence (#+ Equivalence)]
    [hash (#+ Hash)]]
   [data
    ["." text
     format
     ["." encoding (#+ Encoding)]]]
   [type
    abstract]
   ["." macro]]
  [//
   ["." language (#+ Language)]
   ["." territory (#+ Territory)]])

(abstract: #export Locale
  {}

  Text

  (def: territory-separator "_")
  (def: encoding-separator ".")

  (def: #export (locale language territory encoding)
    (-> Language (Maybe Territory) (Maybe Encoding) Locale)
    (:abstraction (format (language.language language)
                          (case territory
                            (#.Some territory)
                            (format ..territory-separator (territory.long-code territory))
                            
                            #.None
                            "")
                          (case encoding
                            (#.Some encoding)
                            (format ..encoding-separator (encoding.name encoding))
                            
                            #.None
                            ""))))

  (def: #export code
    (-> Locale Text)
    (|>> :representation))

  (structure: #export _ (Equivalence Locale)
    (def: (= reference sample)
      (:: text.Equivalence<Text> = (:representation reference) (:representation sample))))

  (structure: #export _ (Hash Locale)
    (def: eq Equivalence<Locale>)
    
    (def: hash
      (|>> :representation
           (:: text.Hash<Text> hash))))
  )
