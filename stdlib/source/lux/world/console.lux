(.module:
  [lux #*
   [control
    [monad (#+ do)]
    ["ex" exception (#+ exception:)]]
   [data
    ["." error]
    ["." text
     format]]
   [concurrency
    ["." promise]
    ["." task (#+ Task)]]
   ["." io (#+ IO Process io)]
   [host (#+ import:)]])

(exception: #export (cannot-close)
  "")

(signature: #export (Console m)
  (: (-> [] (m Nat))
     read)
  (: (-> [] (m Text))
     read-line)
  (: (-> [Text] (m Any))
     write)
  (: (-> [] (m Any))
     close))

(for {"JVM"
      (as-is (import: java/lang/String)

             (import: #long java/io/Console
               (readLine [] #io #try String))

             (import: java/io/InputStream
               (read [] #io #try int))

             (import: java/io/PrintStream
               (print [String] #io #try void))

             (import: java/lang/System
               (#static console [] #io #try java/io/Console)
               (#static in java/io/InputStream)
               (#static out java/io/PrintStream))

             (def: #export open
               (Process (Console Task))
               (do io.Monad<Process>
                 [jvm-console (System::console [])
                  #let [jvm-input System::in
                        jvm-output System::out]]
                 (wrap (: (Console Task)
                          (structure
                           (def: (read _)
                             (|> jvm-input
                                 (InputStream::read [])
                                 (:: io.Functor<Process> map .nat)
                                 promise.future))
                           
                           (def: (read-line _)
                             (|> jvm-console (java/io/Console::readLine []) promise.future))
                           
                           (def: (write message)
                             (|> jvm-output (PrintStream::print [message]) promise.future))
                           
                           (def: close
                             (|>> (ex.construct cannot-close) task.fail))))))))
      })

(def: #export (write-line message console)
  (All [m] (-> Text (Console m) (m Any)))
  (:: console write (format message "")))
