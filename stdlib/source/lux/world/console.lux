(.module:
  [lux #*
   [host (#+ import:)]
   ["@" target]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]
    ["." io (#+ IO io)]
    [concurrency
     ["." promise (#+ Promise)]
     ["." stm]]
    [security
     ["!" capability (#+ capability:)]]]
   [data
    ["." text (#+ Char)
     ["%" format (#+ format)]]]])

(template [<name>]
  [(exception: #export (<name>)
     "")]

  [cannot-open]
  [cannot-close]
  )

(capability: #export (Can-Read ! o)
  (can-read [] (! (Try o))))

(capability: #export (Can-Write ! i)
  (can-write i (! (Try Any))))

(capability: #export (Can-Close !)
  (can-close [] (! (Try Any))))

(signature: #export (Console !)
  (: (Can-Read ! Char)
     read)
  (: (Can-Read ! Text)
     read-line)
  (: (Can-Write ! Text)
     write)
  (: (Can-Close !)
     close))

(def: #export (async console)
  (-> (Console IO) (Console Promise))
  (`` (structure (~~ (template [<capability> <forge>]
                       [(def: <capability>
                          (<forge>
                           (|>> (!.use (:: console <capability>)) promise.future)))]

                       [read ..can-read]
                       [read-line ..can-read]
                       [write ..can-write]
                       [close ..can-close])))))

(with-expansions [<jvm> (as-is (import: java/lang/String)

                               (import: java/io/Console
                                 ["#::."
                                  (readLine [] #io #try java/lang/String)])

                               (import: java/io/InputStream
                                 ["#::."
                                  (read [] #io #try int)])

                               (import: java/io/PrintStream
                                 ["#::."
                                  (print [java/lang/String] #io #try void)])

                               (import: java/lang/System
                                 ["#::."
                                  (#static console [] #io #? java/io/Console)
                                  (#static in java/io/InputStream)
                                  (#static out java/io/PrintStream)])

                               (def: #export default
                                 (IO (Try (Console IO)))
                                 (do io.monad
                                   [?jvm-console (java/lang/System::console)]
                                   (case ?jvm-console
                                     #.None
                                     (wrap (exception.throw ..cannot-open []))

                                     (#.Some jvm-console)
                                     (let [jvm-input (java/lang/System::in)
                                           jvm-output (java/lang/System::out)]
                                       (<| wrap
                                           exception.return
                                           (: (Console IO)) ## TODO: Remove ASAP
                                           (structure
                                            (def: read
                                              (..can-read
                                               (function (_ _)
                                                 (|> jvm-input
                                                     java/io/InputStream::read
                                                     (:: (try.with io.monad) map .nat)))))
                                            
                                            (def: read-line
                                              (..can-read
                                               (function (_ _)
                                                 (java/io/Console::readLine jvm-console))))
                                            
                                            (def: write
                                              (..can-write
                                               (function (_ message)
                                                 (java/io/PrintStream::print message jvm-output))))
                                            
                                            (def: close
                                              (..can-close
                                               (|>> (exception.throw ..cannot-close) wrap))))))))))]
  (for {@.old (as-is <jvm>)
        @.jvm (as-is <jvm>)}))

(def: #export (write-line message console)
  (All [!] (-> Text (Console !) (! Any)))
  (!.use (:: console write) (format message text.new-line)))

(signature: #export (Simulation s)
  (: (-> s (Try [s Char]))
     on-read)
  (: (-> s (Try [s Text]))
     on-read-line)
  (: (-> Text s (Try s))
     on-write)
  (: (-> s (Try s))
     on-close))

(def: #export (mock simulation init)
  (All [s] (-> (Simulation s) s (Console Promise)))
  (let [state (stm.var init)]
    (`` (structure
         (~~ (template [<method> <simulation>]
               [(def: <method>
                  (..can-read
                   (function (_ _)
                     (stm.commit
                      (do {! stm.monad}
                        [|state| (stm.read state)]
                        (case (:: simulation <simulation> |state|)
                          (#try.Success [|state| output])
                          (do !
                            [_ (stm.write |state| state)]
                            (wrap (#try.Success output)))
                          
                          (#try.Failure error)
                          (wrap (#try.Failure error))))))))]

               [read on-read]
               [read-line on-read-line]
               ))

         (def: write
           (..can-write
            (function (_ input)
              (stm.commit
               (do {! stm.monad}
                 [|state| (stm.read state)]
                 (case (:: simulation on-write input |state|)
                   (#try.Success |state|)
                   (do !
                     [_ (stm.write |state| state)]
                     (wrap (#try.Success [])))
                   
                   (#try.Failure error)
                   (wrap (#try.Failure error))))))))

         (def: close
           (..can-close
            (function (_ _)
              (stm.commit
               (do {! stm.monad}
                 [|state| (stm.read state)]
                 (case (:: simulation on-close |state|)
                   (#try.Success |state|)
                   (do !
                     [_ (stm.write |state| state)]
                     (wrap (#try.Success [])))
                   
                   (#try.Failure error)
                   (wrap (#try.Failure error))))))))
         ))))
