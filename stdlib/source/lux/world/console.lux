(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [control
    ["ex" exception (#+ exception:)]
    ["." io (#+ IO io)]
    [concurrency
     ["." promise (#+ Promise)]]
    [security
     ["!" capability (#+ capability:)]]]
   [data
    ["." error (#+ Error)]
    ["." text
     format]]
   [host (#+ import:)]
   [tool
    [compiler
     ["." host]]]])

(template [<name>]
  [(exception: #export (<name>)
     "")]

  [cannot-open]
  [cannot-close]
  )

(capability: #export (Can-Read ! o)
  (can-read [] (! (Error o))))

(capability: #export (Can-Write ! i)
  (can-write i (! (Error Any))))

(capability: #export (Can-Close !)
  (can-close [] (! (Error Any))))

(signature: #export (Console !)
  (: (Can-Read ! Nat)
     can-read)
  (: (Can-Read ! Text)
     can-read-line)
  (: (Can-Write ! Text)
     can-write)
  (: (Can-Close !)
     can-close))

(def: #export (async console)
  (-> (Console IO) (Console Promise))
  (`` (structure (~~ (template [<capability> <forge>]
                       [(def: <capability>
                          (<forge>
                           (|>> (!.use (:: console <capability>)) promise.future)))]

                       [can-read ..can-read]
                       [can-read-line ..can-read]
                       [can-write ..can-write]
                       [can-close ..can-close])))))

(`` (for {(~~ (static host.old))
          (as-is (import: java/lang/String)

                 (import: #long java/io/Console
                   (readLine [] #io #try String))

                 (import: java/io/InputStream
                   (read [] #io #try int))

                 (import: java/io/PrintStream
                   (print [String] #io #try void))

                 (import: java/lang/System
                   (#static console [] #io #? java/io/Console)
                   (#static in java/io/InputStream)
                   (#static out java/io/PrintStream))

                 (def: #export system
                   (IO (Error (Console IO)))
                   (do io.monad
                     [?jvm-console (System::console)]
                     (case ?jvm-console
                       #.None
                       (wrap (ex.throw cannot-open []))

                       (#.Some jvm-console)
                       (let [jvm-input (System::in)
                             jvm-output (System::out)]
                         (<| wrap
                             ex.return
                             (: (Console IO)) ## TODO: Remove ASAP
                             (structure
                              (def: can-read
                                (..can-read
                                 (function (_ _)
                                   (|> jvm-input
                                       InputStream::read
                                       (:: (error.with io.monad) map .nat)))))
                              
                              (def: can-read-line
                                (..can-read
                                 (function (_ _)
                                   (java/io/Console::readLine jvm-console))))
                              
                              (def: can-write
                                (..can-write
                                 (function (_ message)
                                   (PrintStream::print message jvm-output))))
                              
                              (def: can-close
                                (..can-close
                                 (|>> (ex.throw cannot-close) wrap))))))))))
          }))

(def: #export (write-line message console)
  (All [!] (-> Text (Console !) (! Any)))
  (!.use (:: console can-write) (format message text.new-line)))
