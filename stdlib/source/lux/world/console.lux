(.module:
  [lux #*
   [control
    [monad (#+ do)]
    ["ex" exception (#+ exception:)]
    [security
     ["." taint (#+ Dirty taint)]
     [capability (#+ Capability)]]]
   [data
    ["." error (#+ Error)]
    ["." text
     format]]
   ["." io (#+ IO Process io)]
   [concurrency
    ["." promise (#+ Promise)]]
   [host (#+ import:)]
   [platform
    [compiler
     ["." host]]]])

(do-template [<name>]
  [(exception: #export (<name>)
     "")]

  [cannot-open]
  [cannot-close]
  )

(type: #export (Can-Read ! o)
  (Capability [] (! (Error (Dirty o)))))

(type: #export (Can-Write ! i)
  (Capability i (! (Error Any))))

(type: #export (Can-Close !)
  (Capability [] (! (Error Any))))

(signature: #export (Console !)
  (: (Can-Read ! Nat)
     read)
  (: (Can-Read ! Text)
     read-line)
  (: (Can-Write ! Text)
     write)
  (: (Can-Close !)
     close))

(def: #export (async console)
  (-> (Console IO) (Console Promise))
  (`` (structure (~~ (do-template [<capability>]
                       [(def: <capability> (|>> (:: console <capability>) promise.future))]

                       [read] [read-line] [write] [close])))))

(`` (for {(~~ (static host.jvm))
          (as-is (import: java/lang/String)

                 (import: #long java/io/Console
                   (readLine [] #io #try String))

                 (import: java/io/InputStream
                   (read [] #io #try int))

                 (import: java/io/PrintStream
                   (print [String] #io #try void))

                 (import: java/lang/System
                   (#static console [] #io #? java/io/Console)
                   (#static in java/io/InputStream)
                   (#static out java/io/PrintStream))

                 (def: #export system
                   (IO (Error (Console IO)))
                   (do io.Monad<IO>
                     [?jvm-console (System::console)]
                     (case ?jvm-console
                       #.None
                       (io.fail (ex.construct cannot-open []))

                       (#.Some jvm-console)
                       (let [jvm-input (System::in)
                             jvm-output (System::out)]
                         (<| io.from-io
                             wrap
                             (: (Console IO)) ## TODO: Remove ASAP
                             (structure
                              (def: (read _)
                                (|> jvm-input
                                    InputStream::read
                                    (:: io.Functor<Process> map (|>> .nat taint))))
                              
                              (def: (read-line _)
                                (|> jvm-console
                                    java/io/Console::readLine
                                    (:: io.Functor<Process> map taint)))
                              
                              (def: (write message)
                                (PrintStream::print message jvm-output))
                              
                              (def: close
                                (|>> (ex.construct cannot-close) io.fail)))))))))
          }))

(def: #export (write-line message Console<!>)
  (All [!] (-> Text (Console !) (! Any)))
  (:: Console<!> write (format message text.new-line)))
