(.module:
  [lux #*
   [control
    [monad (#+ do)]
    ["ex" exception (#+ exception:)]]
   [data
    ["." error]
    ["." text
     format]]
   ["." io (#+ IO Process io)]
   [host (#+ import:)]
   [compiler
    ["." host]]])

(do-template [<name>]
  [(exception: #export (<name>)
     "")]

  [cannot-open]
  [cannot-close]
  )

(signature: #export (Console !)
  (: (-> [] (! Nat))
     read)
  (: (-> [] (! Text))
     read-line)
  (: (-> Text (! Any))
     write)
  (: (-> [] (! Any))
     close))

(`` (for {(~~ (static host.jvm))
          (as-is (import: java/lang/String)

                 (import: #long java/io/Console
                   (readLine [] #io #try String))

                 (import: java/io/InputStream
                   (read [] #io #try int))

                 (import: java/io/PrintStream
                   (print [String] #io #try void))

                 (import: java/lang/System
                   (#static console [] #io #? java/io/Console)
                   (#static in java/io/InputStream)
                   (#static out java/io/PrintStream))

                 (def: #export open
                   (Process (Console Process))
                   (do io.Monad<IO>
                     [?jvm-console (System::console [])]
                     (case ?jvm-console
                       #.None
                       (io.fail (ex.construct cannot-open []))

                       (#.Some jvm-console)
                       (let [jvm-input System::in
                             jvm-output System::out]
                         (<| io.from-io
                             wrap
                             (: (Console Process)) ## TODO: Remove ASAP
                             (structure
                              (def: (read _)
                                (|> jvm-input
                                    (InputStream::read [])
                                    (:: io.Functor<Process> map .nat)))
                              
                              (def: (read-line _)
                                (|> jvm-console (java/io/Console::readLine [])))
                              
                              (def: (write message)
                                (|> jvm-output (PrintStream::print [message])))
                              
                              (def: close
                                (|>> (ex.construct cannot-close) io.fail)))))))))
          }))

(def: #export (write-line message Console<!>)
  (All [!] (-> Text (Console !) (! Any)))
  (:: Console<!> write (format message "")))
