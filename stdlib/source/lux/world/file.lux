(.module:
  lux
  (lux (control [monad #+ do]
                ["ex" exception #+ exception:])
       (data (coll [array]))
       (time ["i" instant]
             ["d" duration])
       (world [blob #+ Blob])
       [io #+ Process]
       [host]))

(type: #export File Text)

(exception: #export (Could-Not-Read-All-Data {file File})
  file)

(exception: #export (Not-A-Directory {file File})
  file)

(host.import #long java/io/File
  (new [String])
  (exists [] #io #try boolean)
  (mkdirs [] #io #try boolean)
  (delete [] #io #try boolean)
  (length [] #io #try long)
  (listFiles [] #io #try #? (Array java/io/File))
  (getAbsolutePath [] #io #try String)
  (renameTo [java/io/File] #io #try boolean)
  (isFile [] #io #try boolean)
  (isDirectory [] #io #try boolean)
  (lastModified [] #io #try long)
  (setLastModified [long] #io #try boolean)
  (canRead [] #io #try boolean)
  (canWrite [] #io #try boolean)
  (canExecute [] #io #try boolean)
  (#static separator String))

(host.import java/lang/AutoCloseable
  (close [] #io #try void))

(host.import java/io/OutputStream
  (write [(Array byte)] #io #try void)
  (flush [] #io #try void))

(host.import java/io/FileOutputStream
  (new [java/io/File boolean] #io #try))

(host.import java/io/InputStream
  (read [(Array byte)] #io #try int))

(host.import java/io/FileInputStream
  (new [java/io/File] #io #try))

(do-template [<name> <flag>]
  [(def: #export (<name> data file)
     (-> Blob File (Process Unit))
     (do io.Monad<Process>
       [stream (FileOutputStream::new [(java/io/File::new file) <flag>])
        _ (OutputStream::write [data] stream)
        _ (OutputStream::flush [] stream)]
       (AutoCloseable::close [] stream)))]

  [append true]
  [write  false]
  )

(def: #export (read file)
  (-> File (Process Blob))
  (do io.Monad<Process>
    [#let [file' (java/io/File::new file)]
     size (java/io/File::length [] file')
     #let [data (blob.create (int-to-nat size))]
     stream (FileInputStream::new [file'])
     bytes-read (InputStream::read [data] stream)
     _ (AutoCloseable::close [] stream)]
    (if (i/= size bytes-read)
      (wrap data)
      (io.io (ex.throw Could-Not-Read-All-Data file)))))

(def: #export (size file)
  (-> File (Process Nat))
  (do io.Monad<Process>
    [size (java/io/File::length [] (java/io/File::new file))]
    (wrap (int-to-nat size))))

(def: #export (files dir)
  (-> File (Process (List File)))
  (do io.Monad<Process>
    [?files (java/io/File::listFiles [] (java/io/File::new dir))]
    (case ?files
      (#.Some files)
      (monad.map @ (java/io/File::getAbsolutePath [])
                 (array.to-list files))

      #.None
      (io.throw Not-A-Directory dir))))

(do-template [<name> <method>]
  [(def: #export (<name> file)
     (-> File (Process Bool))
     (<method> [] (java/io/File::new file)))]

  [exists?        java/io/File::exists]
  [make-directory java/io/File::mkdirs]
  [delete         java/io/File::delete]
  [file?          java/io/File::isFile]
  [directory?     java/io/File::isDirectory]
  [can-read?      java/io/File::canRead]
  [can-write?     java/io/File::canWrite]
  [can-execute?   java/io/File::canExecute]
  )

(def: #export (move target source)
  (-> File File (Process Bool))
  (java/io/File::renameTo [(java/io/File::new target)]
                          (java/io/File::new source)))

(def: #export (last-modified file)
  (-> File (Process i.Instant))
  (do io.Monad<Process>
    [millis (java/io/File::lastModified [] (java/io/File::new file))]
    (wrap (|> millis d.from-millis i.absolute))))

(def: #export (modify time file)
  (-> i.Instant File (Process Bool))
  (java/io/File::setLastModified [(|> time i.relative d.to-millis)]
                                 (java/io/File::new file)))

(def: #export separator Text java/io/File::separator)
