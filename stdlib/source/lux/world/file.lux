(.module:
  [lux #*
   ["." host (#+ import:)]
   ["@" target]
   [abstract
    ["." monad (#+ Monad do)]]
   [control
    ["." try (#+ Try) ("#@." functor)]
    ["." exception (#+ Exception exception:)]
    ["." io (#+ IO) ("#@." functor)]
    [concurrency
     ["." promise (#+ Promise)]]
    [security
     ["!" capability (#+ capability:)]]]
   [data
    ["." product]
    ["." maybe]
    ["." binary (#+ Binary)]
    ["." text
     ["%" format (#+ format)]]
    [number
     ["i" int]
     ["f" frac]]
    [collection
     ["." array (#+ Array)]
     ["." list ("#@." functor)]]]
   [time
    ["." instant (#+ Instant)]
    ["." duration]]
   [macro
    ["." template]]])

(type: #export Path
  Text)

(capability: #export (Can-Open ! capability)
  (can-open Path (! (Try (capability !)))))

(capability: #export (Can-See o)
  (can-see [] o))

(capability: #export (Can-Query ! o)
  (can-query [] (! (Try o))))

(capability: #export (Can-Modify ! i)
  (can-modify [i] (! (Try Any))))

(capability: #export (Can-Delete !)
  (can-delete [] (! (Try Any))))

(`` (signature: #export (File !)
      (~~ (template [<name> <output>]
            [(: (Can-See <output>)
                <name>)]

            [name Text]
            [path Path]
            ))

      (~~ (template [<name> <output>]
            [(: (Can-Query ! <output>)
                <name>)]

            [size          Nat]
            [last-modified Instant]
            [can-execute?  Bit]
            [content       Binary]
            ))

      (: (Can-Open ! File)
         move)

      (~~ (template [<name> <input>]
            [(: (Can-Modify ! <input>)
                <name>)]

            [modify     Instant]
            [over-write Binary]
            [append     Binary]
            ))

      (: (Can-Delete !)
         delete)
      ))

(signature: #export (Directory !)
  (: (Can-Query ! (List (File !)))
     files)

  (: (Can-Query ! (List (Directory !)))
     directories)

  (: (Can-Delete !)
     discard))

(`` (signature: #export (System !)
      (~~ (template [<name> <capability>]
            [(: (Can-Open ! <capability>)
                <name>)]

            [file             File]
            [create-file      File]
            [directory        Directory]
            [create-directory Directory]
            ))

      (: Text
         separator)
      ))

(def: (async-file file)
  (-> (File IO) (File Promise))
  (`` (structure
       (~~ (template [<forge> <name>+]
             [(with-expansions [<rows> (template.splice <name>+)]
                (template [<name>]
                  [(def: <name> (<forge> (|>> (!.use (:: file <name>)))))]

                  <rows>))]

             [..can-see
              [[name] [path]]]
             
             ))

       (~~ (template [<forge> <name>+]
             [(with-expansions [<rows> (template.splice <name>+)]
                (template [<name>]
                  [(def: <name> (<forge> (|>> (!.use (:: file <name>)) promise.future)))]

                  <rows>))]

             [..can-query
              [[size] [last-modified] [can-execute?] [content]]]
             
             [..can-modify
              [[modify] [over-write] [append]]]
             
             [..can-delete
              [[delete]]]))

       (def: move
         (..can-open
          (|>> (!.use (:: file move)) (io@map (try@map async-file)) promise.future))))))

(def: (async-directory directory)
  (-> (Directory IO) (Directory Promise))
  (`` (structure (~~ (template [<name> <async>]
                       [(def: <name> (..can-query
                                      (|>> (!.use (:: directory <name>))
                                           (io@map (try@map (list@map <async>)))
                                           promise.future)))]

                       [files       ..async-file]
                       [directories async-directory]))

                 (def: discard (..can-delete
                                (|>> (!.use (:: directory discard)) promise.future))))))

(def: #export (async system)
  (-> (System IO) (System Promise))
  (`` (structure
       (~~ (template [<name> <async>]
             [(def: <name> (..can-open
                            (|>> (!.use (:: system <name>)) (io@map (try@map <async>)) promise.future)))]

             [file             ..async-file]
             [create-file      ..async-file]
             [directory        ..async-directory]
             [create-directory ..async-directory]))

       (def: separator (:: system separator)))))

(def: #export (un-nest system file)
  (All [!] (-> (System !) Path (Maybe [Path Text])))
  (case (text.last-index-of (:: system separator) file)
    #.None
    #.None
    
    (#.Some last-separator)
    (let [[parent temp] (maybe.assume (text.split last-separator file))
          [_ child] (maybe.assume (text.split (text.size (:: system separator)) temp))]
      (#.Some [parent child]))))

(def: #export (nest system [parent child])
  (All [!] (-> (System !) [Path Text] Path))
  (format parent (:: system separator) child))

(template [<name>]
  [(exception: #export (<name> {file Path})
     (exception.report
      ["Path" file]))]

  [cannot-create-file]
  [cannot-find-file]
  [cannot-delete-file]

  [cannot-create-directory]
  [cannot-find-directory]
  [cannot-discard-directory]
  
  [cannot-read-all-data]
  [not-a-directory]
  )

(with-expansions [<for-jvm> (as-is (exception: #export (cannot-move {target Path} {source Path})
                                     (exception.report
                                      ["Source" source]
                                      ["Target" target]))

                                   (exception: #export (cannot-modify {instant Instant} {file Path})
                                     (exception.report
                                      ["Instant" (%.instant instant)]
                                      ["Path" file]))

                                   (import: #long java/lang/String)

                                   (`` (import: #long java/io/File
                                         (new [java/lang/String])
                                         (~~ (template [<name>]
                                               [(<name> [] #io #try boolean)]

                                               [createNewFile] [mkdir]
                                               [exists] [delete]
                                               [isFile] [isDirectory]
                                               [canRead] [canWrite] [canExecute]))

                                         (getName [] java/lang/String)
                                         (length [] #io #try long)
                                         (listFiles [] #io #try #? [java/io/File])
                                         (getAbsolutePath [] #io #try java/lang/String)
                                         (renameTo [java/io/File] #io #try boolean)
                                         (lastModified [] #io #try long)
                                         (setLastModified [long] #io #try boolean)
                                         (#static separator java/lang/String)))

                                   (template: (!delete path exception)
                                     (do io.monad
                                       [outcome (java/io/File::delete (java/io/File::new path))]
                                       (case outcome
                                         (#try.Success #1)
                                         (wrap (#try.Success []))

                                         _
                                         (io.io (exception.throw exception [path])))))

                                   (import: #long java/lang/AutoCloseable
                                     (close [] #io #try void))

                                   (import: #long java/io/OutputStream
                                     (write [[byte]] #io #try void)
                                     (flush [] #io #try void))

                                   (import: #long java/io/FileOutputStream
                                     (new [java/io/File boolean] #io #try))

                                   (import: #long java/io/InputStream
                                     (read [[byte]] #io #try int))

                                   (import: #long java/io/FileInputStream
                                     (new [java/io/File] #io #try))

                                   (`` (structure: (file path)
                                         (-> Path (File IO))

                                         (~~ (template [<name> <flag>]
                                               [(def: <name>
                                                  (..can-modify
                                                   (function (<name> data)
                                                     (do (try.with io.monad)
                                                       [stream (java/io/FileOutputStream::new (java/io/File::new path) <flag>)
                                                        _ (java/io/OutputStream::write data stream)
                                                        _ (java/io/OutputStream::flush stream)]
                                                       (java/lang/AutoCloseable::close stream)))))]

                                               [over-write  #0]
                                               [append      #1]
                                               ))

                                         (def: content
                                           (..can-query
                                            (function (content _)
                                              (do (try.with io.monad)
                                                [#let [file (java/io/File::new path)]
                                                 size (java/io/File::length file)
                                                 #let [data (binary.create (.nat size))]
                                                 stream (java/io/FileInputStream::new file)
                                                 bytes-read (java/io/InputStream::read data stream)
                                                 _ (java/lang/AutoCloseable::close stream)]
                                                (if (i.= size bytes-read)
                                                  (wrap data)
                                                  (io.io (exception.throw cannot-read-all-data path)))))))

                                         (def: name
                                           (..can-see
                                            (function (name _)
                                              (|> path
                                                  java/io/File::new
                                                  java/io/File::getName))))

                                         (def: path
                                           (..can-see
                                            (function (_ _)
                                              path)))

                                         (def: size
                                           (..can-query
                                            (function (size _)
                                              (|> path
                                                  java/io/File::new
                                                  java/io/File::length
                                                  (:: (try.with io.monad) map .nat)))))

                                         (def: last-modified
                                           (..can-query
                                            (function (last-modified _)
                                              (|> path
                                                  java/io/File::new
                                                  (java/io/File::lastModified)
                                                  (:: (try.with io.monad) map (|>> duration.from-millis instant.absolute))))))

                                         (def: can-execute?
                                           (..can-query
                                            (function (can-execute? _)
                                              (|> path
                                                  java/io/File::new
                                                  java/io/File::canExecute))))

                                         (def: move
                                           (..can-open
                                            (function (move destination)
                                              (do io.monad
                                                [outcome (java/io/File::renameTo (java/io/File::new destination)
                                                                                 (java/io/File::new path))]
                                                (case outcome
                                                  (#try.Success #1)
                                                  (wrap (#try.Success (file destination)))

                                                  _
                                                  (io.io (exception.throw cannot-move [destination path])))))))

                                         (def: modify
                                           (..can-modify
                                            (function (modify time-stamp)
                                              (do io.monad
                                                [outcome (java/io/File::setLastModified (|> time-stamp instant.relative duration.to-millis)
                                                                                        (java/io/File::new path))]
                                                (case outcome
                                                  (#try.Success #1)
                                                  (wrap (#try.Success []))

                                                  _
                                                  (io.io (exception.throw cannot-modify [time-stamp path])))))))

                                         (def: delete
                                           (..can-delete
                                            (function (delete _)
                                              (!delete path cannot-delete-file))))))

                                   (`` (structure: (directory path)
                                         (-> Path (Directory IO))

                                         (~~ (template [<name> <method> <capability>]
                                               [(def: <name>
                                                  (..can-query
                                                   (function (<name> _)
                                                     (do {@ (try.with io.monad)}
                                                       [?children (java/io/File::listFiles (java/io/File::new path))]
                                                       (case ?children
                                                         (#.Some children)
                                                         (|> children
                                                             array.to-list
                                                             (monad.filter @ (|>> <method>))
                                                             (:: @ map (monad.map @ (|>> java/io/File::getAbsolutePath (:: @ map <capability>))))
                                                             (:: @ join))

                                                         #.None
                                                         (io.io (exception.throw not-a-directory [path])))))))]

                                               [files       java/io/File::isFile      file]
                                               [directories java/io/File::isDirectory directory]
                                               ))

                                         (def: discard
                                           (..can-delete
                                            (function (discard _)
                                              (!delete path cannot-discard-directory))))))

                                   (`` (structure: #export system
                                         (System IO)
                                         
                                         (~~ (template [<name> <method> <capability> <exception>]
                                               [(def: <name>
                                                  (..can-open
                                                   (function (<name> path)
                                                     (do io.monad
                                                       [#let [file (java/io/File::new path)]
                                                        outcome (<method> file)]
                                                       (case outcome
                                                         (#try.Success #1)
                                                         (wrap (#try.Success (<capability> path)))

                                                         _
                                                         (wrap (exception.throw <exception> [path])))))))]

                                               [file             java/io/File::isFile        ..file      cannot-find-file]
                                               [create-file      java/io/File::createNewFile ..file      cannot-create-file]
                                               [directory        java/io/File::isDirectory   ..directory cannot-find-directory]
                                               [create-directory java/io/File::mkdir         ..directory cannot-create-directory]
                                               ))

                                         (def: separator (java/io/File::separator))
                                         )))]
  (for {@.old
        (as-is <for-jvm>)

        @.jvm
        (as-is <for-jvm>)

        @.js
        (as-is (import: Buffer
                 (#static from [Binary] ..Buffer))
               
               (import: FileDescriptor)

               (import: Stats
                 (size host.Number)
                 (mtimeMs host.Number)
                 (isFile [] #try host.Boolean)
                 (isDirectory [] #try host.Boolean))

               (import: FsConstants
                 (F_OK host.Number)
                 (R_OK host.Number)
                 (W_OK host.Number)
                 (X_OK host.Number))
               
               (import: Fs
                 (constants FsConstants)
                 (readFileSync [host.String] #try Binary)
                 (appendFileSync [host.String Buffer] #try Any)
                 (writeFileSync [host.String Buffer] #try Any)
                 (statSync [host.String] #try Stats)
                 (accessSync [host.String host.Number] #try Any)
                 (renameSync [host.String host.String] #try Any)
                 (utimesSync [host.String host.Number host.Number] #try Any)
                 (unlink [host.String] #try Any)
                 (readdirSync [host.String] #try (Array host.String))
                 (mkdirSync [host.String] #try Any)
                 (rmdirSync [host.String] #try Any))

               (import: JsPath
                 (sep host.String)
                 (basename [host.String] host.String))
               
               (template [<name> <path>]
                 [(def: (<name> _)
                    (-> [] (Maybe (-> host.String Any)))
                    (host.constant (-> host.String Any) <path>))]

                 [normal-require [require]]
                 [global-require [global require]]
                 [process-load [global process mainModule constructor _load]]
                 )

               (def: (require _)
                 (-> [] (-> host.String Any))
                 (case [(normal-require []) (global-require []) (process-load [])]
                   (^or [(#.Some require) _ _]
                        [_ (#.Some require) _]
                        [_ _ (#.Some require)])
                   require

                   _
                   (undefined)))

               (template [<name> <module> <type>]
                 [(def: (<name> _)
                    (-> [] <type>)
                    (:coerce <type> (..require [] <module>)))]

                 [node-fs "fs" ..Fs]
                 [node-path "path" ..JsPath]
                 )

               (`` (structure: (file path)
                     (-> Path (File IO))

                     (~~ (template [<name> <method>]
                           [(def: <name>
                              (..can-modify
                               (function (<name> data)
                                 (io.io (<method> [path (Buffer::from data)] (..node-fs []))))))]

                           [over-write  Fs::writeFileSync]
                           [append      Fs::appendFileSync]
                           ))

                     (def: content
                       (..can-query
                        (function (_ _)
                          (io.io (Fs::readFileSync [path] (..node-fs []))))))

                     (def: name
                       (..can-see
                        (function (_ _)
                          (JsPath::basename path (..node-path [])))))

                     (def: path
                       (..can-see
                        (function (_ _)
                          path)))

                     (def: size
                       (..can-query
                        (function (size _)
                          (|> (Fs::statSync [path] (..node-fs []))
                              (:: try.monad map (|>> Stats::size f.nat))
                              io.io))))

                     (def: last-modified
                       (..can-query
                        (function (last-modified _)
                          (|> (Fs::statSync [path] (..node-fs []))
                              (:: try.monad map (|>> Stats::mtimeMs
                                                     f.int
                                                     duration.from-millis
                                                     instant.absolute))
                              io.io))))

                     (def: can-execute?
                       (..can-query
                        (function (can-execute? _)
                          (io.io (do try.monad
                                   [#let [node-fs (..node-fs [])]
                                    _ (Fs::accessSync [path (|> node-fs Fs::constants FsConstants::F_OK)] node-fs)]
                                   (wrap (case (Fs::accessSync [path (|> node-fs Fs::constants FsConstants::X_OK)] node-fs)
                                           (#try.Success _)
                                           true

                                           (#try.Failure _)
                                           false)))))))

                     (def: move
                       (..can-open
                        (function (move destination)
                          (io.io (do try.monad
                                   [_ (Fs::renameSync [path destination] (..node-fs []))]
                                   (wrap (file destination)))))))

                     (def: modify
                       (..can-modify
                        (function (modify time-stamp)
                          (io.io (let [when (|> time-stamp instant.relative duration.to-millis i.frac)]
                                   (Fs::utimesSync [path when when] (..node-fs [])))))))

                     (def: delete
                       (..can-delete
                        (function (delete _)
                          (io.io (Fs::unlink [path] (..node-fs []))))))))

               (`` (structure: (directory path)
                     (-> Path (Directory IO))

                     (~~ (template [<name> <method> <capability>]
                           [(def: <name>
                              (..can-query
                               (function (<name> _)
                                 (io.io (do {@ try.monad}
                                          [#let [node-fs (..node-fs [])]
                                           subs (Fs::readdirSync [path] node-fs)
                                           subs (monad.map @ (function (_ sub)
                                                               (do @
                                                                 [stats (Fs::statSync [sub] node-fs)
                                                                  verdict (<method> [] stats)]
                                                                 (wrap [verdict sub])))
                                                           (array.to-list subs))]
                                          (wrap (|> subs
                                                    (list.filter product.left)
                                                    (list@map (|>> product.right <capability>)))))))))]

                           [files       Stats::isFile      ..file]
                           [directories Stats::isDirectory directory]
                           ))

                     (def: discard
                       (..can-delete
                        (function (discard _)
                          (io.io (Fs::rmdirSync [path] (..node-fs []))))))))

               (`` (structure: #export system
                     (System IO)
                     
                     (~~ (template [<name> <method> <capability> <exception>]
                           [(def: <name>
                              (..can-open
                               (function (<name> path)
                                 (io.io (do try.monad
                                          [stats (Fs::statSync [path] (..node-fs []))
                                           verdict (<method> [] stats)]
                                          (if verdict
                                            (wrap (<capability> path))
                                            (exception.throw <exception> [path])))))))]

                           [file             Stats::isFile        ..file      ..cannot-find-file]
                           [directory        Stats::isDirectory   ..directory ..cannot-find-directory]
                           ))

                     (~~ (template [<name> <capability> <exception> <prep>]
                           [(def: <name>
                              (..can-open
                               (function (<name> path)
                                 (io.io (let [node-fs (..node-fs [])]
                                          (case (Fs::accessSync [path (|> node-fs Fs::constants FsConstants::F_OK)] node-fs)
                                            (#try.Success _)
                                            (exception.throw <exception> [path])
                                            
                                            (#try.Failure _)
                                            (do try.monad
                                              [_ (|> node-fs <prep>)]
                                              (wrap (<capability> path)))))))))]

                           [create-file ..file ..cannot-create-file (Fs::appendFileSync [path (Buffer::from (binary.create 0))])]
                           [create-directory ..directory ..cannot-create-directory (Fs::mkdirSync [path])]
                           ))

                     (def: separator
                       (if host.on-node-js?
                         (JsPath::sep (..node-path []))
                         "/"))
                     ))
               )
        }))

(template [<get> <signature> <create> <find> <exception>]
  [(def: #export (<get> monad system path)
     (All [!] (-> (Monad !) (System !) Path (! (Try (<signature> !)))))
     (do monad
       [outcome (!.use (:: system <create>) path)]
       (case outcome
         (#try.Success file)
         (wrap (#try.Success file))
         
         (#try.Failure error)
         (if (exception.match? <exception> error)
           (!.use (:: system <find>) path)
           (wrap (#try.Failure error))))))]

  [get-file      File      create-file      file      ..cannot-create-file]
  [get-directory Directory create-directory directory ..cannot-create-directory]
  )

(def: #export (exists? monad system path)
  (All [!] (-> (Monad !) (System !) Path (! Bit)))
  (do monad
    [?file (!.use (:: system file) path)]
    (case ?file
      (#try.Success file)
      (wrap true)

      (#try.Failure _)
      (do monad
        [?directory (!.use (:: system directory) path)]
        (case ?directory
          (#try.Success directory)
          (wrap true)

          (#try.Failure _)
          (wrap false))))))
