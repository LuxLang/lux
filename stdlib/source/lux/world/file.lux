(.module:
  [lux #*
   [control
    [monad (#+ Monad do)]
    ["ex" exception (#+ Exception exception:)]
    pipe]
   [data
    [error (#+ Error)]
    text/format
    [collection [array]]]
   [time
    [instant (#+ Instant)]
    [duration]]
   [world [blob (#+ Blob)]]
   [io (#+ Process)]
   [host (#+ import:)]
   [language/host]])

(type: #export File Text)

(type: #export Permission
  #Read
  #Write
  #Execute)

(signature: #export (System m)
  (: (Monad m)
     &monad)

  (: (All [e a] (-> (Exception e) e (m a)))
     throw)

  (: (All [a] (-> (m a) (m (Error a))))
     try)

  (: (All [a] (-> (Error a) (m a)))
     lift)
  
  (do-template [<name>]
    [(: (-> Blob File (m Any))
        <name>)]

    [append] [write])

  (do-template [<name> <output>]
    [(: (-> File (m <output>))
        <name>)]

    [read Blob]
    [size Nat]
    [files (List File)]
    [last-modified Instant])

  (do-template [<name>]
    [(: (-> File (m Bool))
        <name>)]

    [file?]
    [directory?]
    )

  (: (-> Permission File (m Bool))
     can?)

  (do-template [<name>]
    [(: (-> File (m Any))
        <name>)]

    [make-directory]
    [delete]
    )

  (: (-> File File (m Any))
     move)

  (: (-> Instant File (m Any))
     modify)

  (: Text
     separator)
  )

(do-template [<name>]
  [(exception: #export (<name> {file File})
     (ex.report ["File" file]))]

  [cannot-read-all-data]
  [not-a-directory]
  [cannot-make-directory]
  [cannot-delete]
  )

(exception: #export (cannot-move {target File} {source File})
  (ex.report ["Source" source]
             ["Target" target]))

(exception: #export (cannot-modify {instant Instant} {file File})
  (ex.report ["Instant" (%instant instant)]
             ["File" file]))

(`` (for {(~~ (static language/host.jvm))
          (as-is (import: #long java/io/File
                   (new [String])
                   (exists [] #io #try boolean)
                   (mkdirs [] #io #try boolean)
                   (delete [] #io #try boolean)
                   (length [] #io #try long)
                   (listFiles [] #io #try #? (Array java/io/File))
                   (getAbsolutePath [] #io #try String)
                   (renameTo [java/io/File] #io #try boolean)
                   (isFile [] #io #try boolean)
                   (isDirectory [] #io #try boolean)
                   (lastModified [] #io #try long)
                   (setLastModified [long] #io #try boolean)
                   (canRead [] #io #try boolean)
                   (canWrite [] #io #try boolean)
                   (canExecute [] #io #try boolean)
                   (#static separator String))

                 (import: java/lang/AutoCloseable
                   (close [] #io #try void))

                 (import: java/io/OutputStream
                   (write [(Array byte)] #io #try void)
                   (flush [] #io #try void))

                 (import: java/io/FileOutputStream
                   (new [java/io/File boolean] #io #try))

                 (import: java/io/InputStream
                   (read [(Array byte)] #io #try int))

                 (import: java/io/FileInputStream
                   (new [java/io/File] #io #try))

                 (structure: #export JVM@System (System Process)
                   (def: &monad io.Monad<Process>)

                   (def: throw io.throw)

                   (def: (try computation)
                     (do io.Monad<IO>
                       [outcome computation]
                       (:: io.Monad<Process> wrap outcome)))

                   (def: lift (:: io.Monad<IO> wrap))
                   
                   (do-template [<name> <flag>]
                     [(def: (<name> data file)
                        (do io.Monad<Process>
                          [stream (FileOutputStream::new [(java/io/File::new file) <flag>])
                           _ (OutputStream::write [data] stream)
                           _ (OutputStream::flush [] stream)]
                          (AutoCloseable::close [] stream)))]

                     [append true]
                     [write  false]
                     )

                   (def: (read file)
                     (do io.Monad<Process>
                       [#let [file' (java/io/File::new file)]
                        size (java/io/File::length [] file')
                        #let [data (blob.create (.nat size))]
                        stream (FileInputStream::new [file'])
                        bytes-read (InputStream::read [data] stream)
                        _ (AutoCloseable::close [] stream)]
                       (if (i/= size bytes-read)
                         (wrap data)
                         (io.io (ex.throw cannot-read-all-data file)))))

                   (def: size
                     (|>> [] java/io/File::new
                          (java/io/File::length [])
                          (:: io.Monad<Process> map .nat)))

                   (def: (files dir)
                     (do io.Monad<Process>
                       [?files (java/io/File::listFiles [] (java/io/File::new dir))]
                       (case ?files
                         (#.Some files)
                         (monad.map @ (java/io/File::getAbsolutePath [])
                                    (array.to-list files))

                         #.None
                         (io.throw not-a-directory dir))))

                   (do-template [<name> <method>]
                     [(def: <name> (|>> [] java/io/File::new (<method> [])))]

                     [file?      java/io/File::isFile]
                     [directory? java/io/File::isDirectory]
                     )

                   (def: (can? permission file)
                     (let [jvm-file (java/io/File::new file)]
                       (case permission
                         #Read (java/io/File::canRead [] jvm-file)
                         #Write (java/io/File::canWrite [] jvm-file)
                         #Execute (java/io/File::canExecute [] jvm-file))))

                   (def: last-modified
                     (|>> [] java/io/File::new
                          (java/io/File::lastModified [])
                          (:: io.Monad<Process> map (|>> duration.from-millis instant.absolute))))

                   (do-template [<name> <exception> <method>]
                     [(def: (<name> subject)
                        (do io.Monad<IO>
                          [outcome (<method> [] (java/io/File::new subject))]
                          (case outcome
                            (#error.Success true)
                            (wrap (#error.Success []))

                            _
                            (io.throw <exception> [subject]))))]

                     [make-directory cannot-make-directory java/io/File::mkdirs]
                     [delete         cannot-delete         java/io/File::delete]
                     )

                   (do-template [<name> <exception> <method> <parameter-pre>]
                     [(def: (<name> parameter subject)
                        (do io.Monad<IO>
                          [outcome (<method> [(|> parameter <parameter-pre>)]
                                             (java/io/File::new subject))]
                          (case outcome
                            (#error.Success true)
                            (wrap (#error.Success []))

                            _
                            (io.throw <exception> [parameter subject]))))]

                     [move   cannot-move   java/io/File::renameTo        java/io/File::new]
                     [modify cannot-modify java/io/File::setLastModified (<| duration.to-millis instant.relative)]
                     )

                   (def: separator java/io/File::separator)
                   ))
          }))

(def: #export (exists? System<m> file)
  (All [m] (-> (System m) File (m Bool)))
  (|> file
      (do> (:: System<m> &monad)
           [(:: System<m> file?)]
           [(if> [(wrap true)]
                 [(:: System<m> directory? file)])])))
