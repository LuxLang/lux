(.module:
  [lux #*
   [control
    [equivalence (#+ Equivalence)]
    [interval (#+ Interval)]
    [security
     ["!" capability (#+ capability:)]]]
   [data
    [error (#+ Error)]
    [text ("text/." equivalence)]]
   [time
    ["." instant (#+ Instant) ("instant/." equivalence)]]])

(type: #export (Entry a)
  {#what  a
   #why   Text
   #how   Text
   #who   Text
   #where Text
   #when  Instant})

(type: #export Range
  (Interval Instant))

(def: #export (range start end)
  (-> Instant Instant Range)
  (structure
   (def: &enum instant.enum)
   (def: bottom start)
   (def: top end)))

(structure: #export (equivalence (^open "_/."))
  (All [a] (-> (Equivalence a) (Equivalence (Entry a))))
  (def: (= reference sample)
    (and (_/= (get@ #what reference) (get@ #what sample))
         (text/= (get@ #why reference) (get@ #why sample))
         (text/= (get@ #how reference) (get@ #how sample))
         (text/= (get@ #who reference) (get@ #who sample))
         (text/= (get@ #where reference) (get@ #where sample))
         (instant/= (get@ #when reference) (get@ #when sample)))))

(capability: #export (Can-Write ! a)
  (can-write (Entry a) (! (Error Any))))

(capability: #export (Can-Read ! a)
  (can-read Range (! (Error (List (Entry a))))))

(type: #export (Journal ! a)
  {#can-write (Can-Write ! a)
   #can-read (Can-Read ! a)})
