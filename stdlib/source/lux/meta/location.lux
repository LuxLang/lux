(.module:
  [lux #*])

(def: #export dummy
  Location
  {#.module ""
   #.line   0
   #.column 0})

(macro: #export (here tokens compiler)
  (case tokens
    #.Nil
    (let [location (get@ #.location compiler)]
      (#.Right [compiler
                (list (` [(~ [..dummy (#.Text (get@ #.module location))])
                          (~ [..dummy (#.Nat (get@ #.line location))])
                          (~ [..dummy (#.Nat (get@ #.column location))])]))]))

    _
    (#.Left "Wrong syntax for here")))

(def: #export (format value)
  (-> Location Text)
  (let [separator ","
        [file line column] value]
    ($_ "lux text concat"
        "@"
        (("lux in-module" "lux" .text@encode) file) separator
        (("lux in-module" "lux" .nat@encode) line) separator
        (("lux in-module" "lux" .nat@encode) column))))
