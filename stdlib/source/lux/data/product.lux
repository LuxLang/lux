(.module:
  {#.doc "Functionality for working with tuples (particularly 2-tuples)."}
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]
    [hash (#+ Hash)]]])

(template [<name> <type> <output>]
  [(def: #export (<name> xy)
     (All [a b] (-> (& a b) <type>))
     (let [[x y] xy]
       <output>))]

  [left  a x]
  [right b y]
  )

(def: #export (curry f)
  (All [a b c]
    (-> (-> (& a b) c)
        (-> a b c)))
  (function (_ x y)
    (f [x y])))

(def: #export (uncurry f)
  (All [a b c]
    (-> (-> a b c)
        (-> (& a b) c)))
  (function (_ xy)
    (let [[x y] xy]
      (f x y))))

(def: #export (swap xy)
  (All [a b] (-> (& a b) (& b a)))
  (let [[x y] xy]
    [y x]))

(def: #export (apply f g)
  (All [a b c d]
    (-> (-> a c) (-> b d)
        (-> (& a b) (& c d))))
  (function (_ [x y])
    [(f x) (g y)]))

(def: #export (fork f g)
  (All [a l r]
    (-> (-> a l) (-> a r)
        (-> a (& l r))))
  (function (_ x)
    [(f x) (g x)]))

(structure: #export (equivalence left right)
  (All [l r] (-> (Equivalence l) (Equivalence r) (Equivalence [l r])))

  (def: (= [rl rr] [sl sr])
    (and (\ left = rl sl)
         (\ right = rr sr))))

(def: #export (hash left right)
  (All [l r] (-> (Hash l) (Hash r) (Hash (& l r))))
  (structure
   (def: &equivalence
     (..equivalence (\ left &equivalence)
                    (\ right &equivalence)))
   (def: (hash [leftV rightV])
     ("lux i64 +"
      (\ left hash leftV)
      (\ right hash rightV)))))
