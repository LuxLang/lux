(;module:
  lux
  (lux/control eq
               [order]
               codec
               hash)
  (.. [text "Text/" Monoid<Text>]))

## [Structures]
(struct: #export _ (Eq Char)
  (def: (= x y)
    (_lux_proc ["char" "="] [x y])))

(struct: #export _ (Hash Char)
  (def: eq Eq<Char>)
  (def: (hash input)
    (_lux_proc ["char" "to-nat"] [input])))

(struct: #export _ (order;Order Char)
  (def: eq Eq<Char>)

  (def: (< test subject)
    (_lux_proc ["char" "<"] [subject test]))

  (def: (<= test subject)
    (or (_lux_proc ["char" "="] [subject test])
        (_lux_proc ["char" "<"] [subject test])))

  (def: (> test subject)
    (_lux_proc ["char" "<"] [test subject]))

  (def: (>= test subject)
    (or (_lux_proc ["char" "="] [test subject])
        (_lux_proc ["char" "<"] [test subject])))
  )

(struct: #export _ (Codec Text Char)
  (def: (encode x)
    (let [as-text (case x
                    #"\t" "\\t"
                    #"\v" "\\v"
                    #"\b" "\\b"
                    #"\n" "\\n"
                    #"\r" "\\r"
                    #"\f" "\\f"
                    #"\"" "\\\""
                    #"\\" "\\\\"
                    _     (_lux_proc ["char" "to-text"] [x]))]
      ($_ Text/append "#\"" as-text "\"")))

  (def: (decode y)
    (let [size (text;size y)]
      (if (and (text;starts-with? "#\"" y)
               (text;ends-with? "\"" y)
               (or (n.= +4 size)
                   (n.= +5 size)))
        (if (n.= +4 size)
          (case (text;nth +2 y)
            #;None
            (#;Left (Text/append "Wrong syntax for Char: " y))

            (#;Some char)
            (#;Right char))
          (case [(text;nth +2 y) (text;nth +3 y)]
            [(#;Some #"\\") (#;Some char)]
            (case char
              #"t" (#;Right #"\t")
              #"v" (#;Right #"\v")
              #"b" (#;Right #"\b")
              #"n" (#;Right #"\n")
              #"r" (#;Right #"\r")
              #"f" (#;Right #"\f")
              #"\"" (#;Right #"\"")
              #"\\" (#;Right #"\\")
              _    (#;Left (Text/append "Wrong syntax for Char: " y)))

            _
            (#;Left (Text/append "Wrong syntax for Char: " y))))
        (#;Left (Text/append "Wrong syntax for Char: " y))))))

## [Values]
(def: #export (space? char)
  {#;doc "Checks whether the character is white-space."}
  (-> Char Bool)
  (case char
    (^or #"\t" #"\v" #" " #"\n" #"\r" #"\f")
    true

    _
    false))

(def: #export (as-text x)
  (-> Char Text)
  (_lux_proc ["char" "to-text"] [x]))

(def: #export (char x)
  (-> Nat Char)
  (_lux_proc ["nat" "to-char"] [x]))

(def: #export (code x)
  (-> Char Nat)
  (_lux_proc ["char" "to-nat"] [x]))
