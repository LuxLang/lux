(;module:
  lux
  (lux [io]
       (control monad)
       (concurrency ["A" atom])
       [macro]
       (macro ["s" syntax #+ syntax:])
       (type model)))

(model: #export (Lazy a)
  (-> [] a)

  (def: #hidden (freeze' generator)
    (All [a] (-> (-> [] a) (Lazy a)))
    (let [cache (: (A;Atom (Maybe ($ +0)))
                   (A;atom #;None))]
      (@model (function [_]
                (case (io;run (A;get cache))
                  (#;Some value)
                  value

                  _
                  (let [value (generator [])]
                    (exec (io;run (A;compare-and-swap _ (#;Some value) cache))
                      value)))))))

  (def: #export (thaw l-value)
    (All [a] (-> (Lazy a) a))
    ((@repr l-value) [])))

(syntax: #export (freeze expr)
  (do @
    [g!_ (macro;gensym "_")]
    (wrap (list (` (freeze' (function [(~ g!_)] (~ expr))))))))
