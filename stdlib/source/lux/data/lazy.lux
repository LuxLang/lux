(.module:
  lux
  (lux [io]
       (control [functor #+ Functor]
                [applicative #+ Applicative]
                [monad #+ Monad do])
       (concurrency [atom])
       [macro #+ with-gensyms]
       (macro ["s" syntax #+ syntax:])
       (type abstract)))

(abstract: #export (Lazy a)
  (-> [] a)

  (def: (freeze' generator)
    (All [a] (-> (-> [] a) (Lazy a)))
    (let [cache (atom.atom #.None)]
      (@abstraction (function (_ _)
                      (case (io.run (atom.read cache))
                        (#.Some value)
                        value

                        _
                        (let [value (generator [])]
                          (exec (io.run (atom.compare-and-swap _ (#.Some value) cache))
                            value)))))))

  (def: #export (thaw l-value)
    (All [a] (-> (Lazy a) a))
    ((@representation l-value) [])))

(syntax: #export (freeze expr)
  (with-gensyms [g!_]
    (wrap (list (` ((~! freeze') (function ((~ g!_) (~ g!_)) (~ expr))))))))

(struct: #export _ (Functor Lazy)
  (def: (map f fa)
    (freeze (f (thaw fa)))))

(struct: #export _ (Applicative Lazy)
  (def: functor Functor<Lazy>)
  (def: (apply ff fa)
    (freeze ((thaw ff) (thaw fa)))))

(struct: #export _ (Monad Lazy)
  (def: functor Functor<Lazy>)
  (def: wrap (|>> freeze))
  (def: join thaw))
