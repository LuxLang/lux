##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (control monad)
       (data [error #- fail]
             [text])
       [compiler]
       (macro [ast]
              ["s" syntax #+ syntax: Syntax]
              (syntax [common]))))

## [Types]
(type: #export Exception
  (-> Text Text))

## [Values]
(def: #hidden _Text/append_
  (-> Text Text Text)
  (:: text;Monoid<Text> append))

(def: #export (catch exception then try)
  (All [a]
    (-> Exception (-> Text a) (Error a)
        (Error a)))
  (case try
    (#;Right output)
    (#;Right output)

    (#;Left error)
    (if (text;starts-with? (exception "") error)
      (#;Right (then error))
      (#;Left error))))

(def: #export (otherwise to-do try)
  (All [a]
    (-> (-> Text a) (Error a) a))
  (case try
    (#;Right output)
    output

    (#;Left error)
    (to-do error)))

(def: #export (return value)
  (All [a] (-> a (Error a)))
  (#;Right value))

(def: #export (throw exception message)
  (All [a] (-> Exception Text (Error a)))
  (#;Left (exception message)))

(syntax: #export (exception: [_ex-lev common;export-level] [name s;local-symbol])
  (do @
    [current-module compiler;current-module-name
     #let [g!message (ast;symbol ["" "message"])]]
    (wrap (list (` (def: (~@ (common;gen-export-level _ex-lev)) ((~ (ast;symbol ["" name])) (~ g!message))
                     Exception
                     ($_ _Text/append_ "[" (~ (ast;text current-module)) ";" (~ (ast;text name)) "]\t" (~ g!message))))))))
