(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]
    [hash (#+ Hash)]
    [order (#+ Order)]
    [codec (#+ Codec)]]
   [data
    ["." text ("#\." equivalence monoid)]
    ["." product]]])

## (type: Name
##   [Text Text])

(template [<name> <side>]
  [(def: #export (<name> [module short])
     (-> Name Text)
     <side>)]

  [module module]
  [short  short]
  )

(def: #export hash
  (Hash Name)
  (product.hash text.hash text.hash))

(def: #export equivalence
  (Equivalence Name)
  (:: ..hash &equivalence))

(structure: #export order
  (Order Name)
  
  (def: &equivalence ..equivalence)
  (def: (< [moduleP shortP] [moduleS shortS])
    (if (text\= moduleP moduleS)
      (:: text.order < shortP shortS)
      (:: text.order < moduleP moduleS))))

(structure: #export codec
  (Codec Text Name)
  
  (def: (encode [module short])
    (case module
      "" short
      _ ($_ text\compose module "." short)))
  
  (def: (decode input)
    (if (text\= "" input)
      (#.Left (text\compose "Invalid format for Name: " input))
      (case (text.split-all-with "." input)
        (^ (list short))
        (#.Right ["" short])

        (^ (list module short))
        (#.Right [module short])

        _
        (#.Left (text\compose "Invalid format for Name: " input))))))
