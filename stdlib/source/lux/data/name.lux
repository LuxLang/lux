(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]
    [order (#+ Order)]
    [codec (#+ Codec)]
    hash]
   [data
    ["." text ("#@." monoid hash)]]])

## (type: Name
##   [Text Text])

(template [<name> <side>]
  [(def: #export (<name> [module short])
     (-> Name Text)
     <side>)]

  [module module]
  [short  short]
  )

(structure: #export equivalence (Equivalence Name)
  (def: (= [xmodule xname] [ymodule yname])
    (and (text@= xmodule ymodule)
         (text@= xname yname))))

(def: (name@< [moduleP shortP] [moduleS shortS])
  (-> Name Name Bit)
  (if (text@= moduleP moduleS)
    (:: text.order < shortP shortS)
    (:: text.order < moduleP moduleS)))

(structure: #export order (Order Name)
  (def: &equivalence ..equivalence)
  (def: < name@<)
  (def: (<= parameter subject)
    (or (:: ..equivalence = parameter subject)
        (name@< parameter subject)))
  (def: (> parameter subject)
    (name@< subject parameter))
  (def: (>= parameter subject)
    (or (:: ..equivalence = subject parameter)
        (name@< subject parameter))))

(structure: #export codec (Codec Text Name)
  (def: (encode [module short])
    (case module
      "" short
      _ ($_ text@compose module "." short)))
  
  (def: (decode input)
    (if (text@= "" input)
      (#.Left (text@compose "Invalid format for Name: " input))
      (case (text.split-all-with "." input)
        (^ (list short))
        (#.Right ["" short])

        (^ (list module short))
        (#.Right [module short])

        _
        (#.Left (text@compose "Invalid format for Name: " input))))))

(structure: #export hash (Hash Name)
  (def: &equivalence ..equivalence)
  
  (def: (hash [module name])
    (n/+ (text@hash module) (text@hash name))))
