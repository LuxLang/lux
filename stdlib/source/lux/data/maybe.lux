(.module:
  [lux #*
   [control
    ["m" monoid]
    ["F" functor]
    ["A" apply]
    [monad (#+ do Monad)]
    [equivalence (#+ Equivalence)]]])

## [Types]
## (type: (Maybe a)
##   #.None
##   (#.Some a))

## [Structures]
(structure: #export Monoid<Maybe> (All [a] (m.Monoid (Maybe a)))
  (def: identity #.None)
  (def: (compose xs ys)
    (case xs
      #.None     ys
      (#.Some x) (#.Some x))))

(structure: #export _ (F.Functor Maybe)
  (def: (map f ma)
    (case ma
      #.None     #.None
      (#.Some a) (#.Some (f a)))))

(structure: #export _ (A.Apply Maybe)
  (def: functor Functor<Maybe>)

  (def: (apply ff fa)
    (case [ff fa]
      [(#.Some f) (#.Some a)]
      (#.Some (f a))

      _
      #.None)))

(structure: #export _ (Monad Maybe)
  (def: functor Functor<Maybe>)

  (def: (wrap x)
    (#.Some x))

  (def: (join mma)
    (case mma
      #.None      #.None
      (#.Some xs) xs)))

(structure: #export (Equivalence<Maybe> Equivalence<a>) (All [a] (-> (Equivalence a) (Equivalence (Maybe a))))
  (def: (= mx my)
    (case [mx my]
      [#.None #.None]
      #1

      [(#.Some x) (#.Some y)]
      (:: Equivalence<a> = x y)
      
      _
      #0)))

(structure: #export (MaybeT Monad<M>)
  (All [M] (-> (Monad M) (Monad (All [a] (M (Maybe a))))))

  (def: functor (F.compose (get@ #monad.functor Monad<M>) Functor<Maybe>))

  (def: wrap (|>> (:: Monad<Maybe> wrap) (:: Monad<M> wrap)))
  
  (def: (join MmMma)
    (do Monad<M>
      [mMma MmMma]
      (case mMma
        #.None
        (wrap #.None)

        (#.Some Mma)
        Mma))))

(def: #export (lift Monad<M>)
  (All [M a] (-> (Monad M) (-> (M a) (M (Maybe a)))))
  (monad.lift Monad<M> (:: Monad<Maybe> wrap)))

(macro: #export (default tokens state)
  {#.doc "## Allows you to provide a default value that will be used
          ## if a (Maybe x) value turns out to be #.None.
          (default 20 (#.Some 10)) => 10

          (default 20 #.None) => 20"}
  (case tokens
    (^ (list else maybe))
    (let [g!temp (: Code [dummy-cursor (#.Symbol ["" ""])])
          code (` (case (~ maybe)
                    (#.Some (~ g!temp))
                    (~ g!temp)

                    #.None
                    (~ else)))]
      (#.Right [state (list code)]))

    _
    (#.Left "Wrong syntax for default")))

(def: #export assume
  (All [a] (-> (Maybe a) a))
  (|>> (default (undefined))))
