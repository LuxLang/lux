(.module: {#.doc "Rational arithmetic."}
  [lux #*
   [control
    [equivalence (#+ Equivalence)]
    [order (#+ Order)]
    number
    codec
    monad
    ["p" parser]]
   [data
    ["." error]
    ["." product]
    ["." maybe]
    [number ("nat/." Codec<Text,Nat>)]
    ["." text ("text/." Monoid<Text>)
     format]]
   ["." function]
   ["." math]
   ["." macro
    ["." code]
    ["s" syntax (#+ syntax: Syntax)]]])

(type: #export Ratio
  {#numerator Nat
   #denominator Nat})

(def: (normalize (^slots [#numerator #denominator]))
  (-> Ratio Ratio)
  (let [common (math.n/gcd numerator denominator)]
    {#numerator (n// common numerator)
     #denominator (n// common denominator)}))

(def: #export (* param input)
  (-> Ratio Ratio Ratio)
  (normalize [(n/* (get@ #numerator param)
                   (get@ #numerator input))
              (n/* (get@ #denominator param)
                   (get@ #denominator input))]))

(def: #export (/ param input)
  (-> Ratio Ratio Ratio)
  (normalize [(n/* (get@ #denominator param)
                   (get@ #numerator input))
              (n/* (get@ #numerator param)
                   (get@ #denominator input))]))

(def: #export (+ param input)
  (-> Ratio Ratio Ratio)
  (normalize [(n/+ (n/* (get@ #denominator input)
                        (get@ #numerator param))
                   (n/* (get@ #denominator param)
                        (get@ #numerator input)))
              (n/* (get@ #denominator param)
                   (get@ #denominator input))]))

(def: #export (- param input)
  (-> Ratio Ratio Ratio)
  (normalize [(n/- (n/* (get@ #denominator input)
                        (get@ #numerator param))
                   (n/* (get@ #denominator param)
                        (get@ #numerator input)))
              (n/* (get@ #denominator param)
                   (get@ #denominator input))]))

(def: #export (% param input)
  (-> Ratio Ratio Ratio)
  (let [quot (n// (n/* (get@ #denominator input)
                       (get@ #numerator param))
                  (n/* (get@ #denominator param)
                       (get@ #numerator input)))]
    (- (update@ #numerator (n/* quot) param)
       input)))

(def: #export (= param input)
  (-> Ratio Ratio Bit)
  (and (n/= (get@ #numerator param)
            (get@ #numerator input))
       (n/= (get@ #denominator param)
            (get@ #denominator input))))

(do-template [<name> <op>]
  [(def: #export (<name> param input)
     (-> Ratio Ratio Bit)
     (and (<op> (n/* (get@ #denominator input)
                     (get@ #numerator param))
                (n/* (get@ #denominator param)
                     (get@ #numerator input)))))]

  [<  n/<]
  [<= n/<=]
  [>  n/>]
  [>= n/>=]
  )

(do-template [<name> <comp>]
  [(def: #export (<name> left right)
     (-> Ratio Ratio Ratio)
     (if (<comp> left right)
       right
       left))]

  [min <]
  [max >]
  )

(structure: #export _ (Equivalence Ratio)
  (def: = ..=))

(structure: #export _ (Order Ratio)
  (def: eq Equivalence<Ratio>)
  (def: < ..<)
  (def: <= ..<=)
  (def: > ..>)
  (def: >= ..>=))

(structure: #export _ (Number Ratio)
  (def: + ..+)
  (def: - ..-)
  (def: * ..*)
  (def: / ../)
  (def: % ..%)
  (def: (negate (^slots [#numerator #denominator]))
    {#numerator denominator
     #denominator numerator})
  (def: abs function.identity)
  (def: (signum x)
    {#numerator 1
     #denominator 1}))

(def: separator Text ":")

(def: part-encode
  (-> Nat Text)
  (|>> nat/encode (text.split 1) maybe.assume product.right))

(structure: #export _ (Codec Text Ratio)
  (def: (encode (^slots [#numerator #denominator]))
    ($_ text/compose (part-encode numerator) separator (part-encode denominator)))

  (def: (decode input)
    (case (text.split-with separator input)
      (#.Some [num denom])
      (do error.Monad<Error>
        [numerator (nat/decode num)
         denominator (nat/decode denom)]
        (wrap (normalize {#numerator numerator
                          #denominator denominator})))
      
      #.None
      (#.Left (text/compose "Invalid syntax for ratio: " input)))))

(syntax: #export (ratio numerator {?denominator (p.maybe s.any)})
  {#.doc (doc "Rational literals."
              (ratio numerator denominator)
              "The denominator can be omitted if it's 1."
              (ratio numerator))}
  (wrap (list (` ((~! normalize) {#..numerator (~ numerator)
                                  #..denominator (~ (maybe.default (' 1)
                                                                   ?denominator))})))))
