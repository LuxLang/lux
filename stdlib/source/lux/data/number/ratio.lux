(.module:
  {#.doc "Rational numbers."}
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]
    [order (#+ Order)]
    [monoid (#+ Monoid)]
    [codec (#+ Codec)]
    [monad (#+ do)]]
   [control
    ["." function]
    ["." try]
    ["p" parser
     ["s" code (#+ Parser)]]]
   [data
    ["." product]
    ["." maybe]
    [number
     ["n" nat ("#@." decimal)]]
    ["." text ("#@." monoid)]]
   ["." math]
   [macro
    ["." code]
    [syntax (#+ syntax:)]]])

(type: #export Ratio
  {#numerator Nat
   #denominator Nat})

(def: (equalize parameter subject)
  (-> Ratio Ratio [Nat Nat])
  [(n.* (get@ #denominator subject)
        (get@ #numerator parameter))
   (n.* (get@ #denominator parameter)
        (get@ #numerator subject))])

(def: (normalize (^slots [#numerator #denominator]))
  (-> Ratio Ratio)
  (let [common (n.gcd numerator denominator)]
    {#numerator (n./ common numerator)
     #denominator (n./ common denominator)}))

(structure: #export equivalence (Equivalence Ratio)
  (def: (= parameter subject)
    (and (n.= (get@ #numerator parameter)
              (get@ #numerator subject))
         (n.= (get@ #denominator parameter)
              (get@ #denominator subject)))))

(structure: #export order (Order Ratio)
  (def: &equivalence ..equivalence)

  (def: (< parameter subject)
    (let [[parameter' subject'] (..equalize parameter subject)]
      (n.< parameter' subject')))
  )

(def: #export (+ parameter subject)
  (-> Ratio Ratio Ratio)
  (let [[parameter' subject'] (..equalize parameter subject)]
    (normalize [(n.+ parameter' subject')
                (n.* (get@ #denominator parameter)
                     (get@ #denominator subject))])))

(def: #export (- parameter subject)
  (-> Ratio Ratio Ratio)
  (let [[parameter' subject'] (..equalize parameter subject)]
    (normalize [(n.- parameter' subject')
                (n.* (get@ #denominator parameter)
                     (get@ #denominator subject))])))

(def: #export (* parameter subject)
  (-> Ratio Ratio Ratio)
  (normalize [(n.* (get@ #numerator parameter)
                   (get@ #numerator subject))
              (n.* (get@ #denominator parameter)
                   (get@ #denominator subject))]))

(def: #export (/ parameter subject)
  (-> Ratio Ratio Ratio)
  (let [[parameter' subject'] (..equalize parameter subject)]
    (normalize [subject' parameter'])))

(def: #export (% parameter subject)
  (-> Ratio Ratio Ratio)
  (let [[parameter' subject'] (..equalize parameter subject)
        quot (n./ parameter' subject')]
    (..- (update@ #numerator (n.* quot) parameter)
         subject)))

(def: #export (reciprocal (^slots [#numerator #denominator]))
  (-> Ratio Ratio)
  {#numerator denominator
   #denominator numerator})

(def: separator ":")

(structure: #export codec (Codec Text Ratio)
  (def: (encode (^slots [#numerator #denominator]))
    ($_ text@compose (n@encode numerator) ..separator (n@encode denominator)))

  (def: (decode input)
    (case (text.split-with ..separator input)
      (#.Some [num denom])
      (do try.monad
        [numerator (n@decode num)
         denominator (n@decode denom)]
        (wrap (normalize {#numerator numerator
                          #denominator denominator})))
      
      #.None
      (#.Left (text@compose "Invalid syntax for ratio: " input)))))

(syntax: #export (ratio numerator {?denominator (p.maybe s.any)})
  {#.doc (doc "Rational literals."
              (ratio numerator denominator)
              "The denominator can be omitted if it's 1."
              (ratio numerator))}
  (wrap (list (` ((~! ..normalize) {#..numerator (~ numerator)
                                    #..denominator (~ (maybe.default (' 1)
                                                                     ?denominator))})))))

(template [<identity> <compose> <name>]
  [(structure: #export <name>
     (Monoid Ratio)

     (def: identity (..ratio <identity>))
     (def: compose <compose>)
     )]
  
  [0 ..+ addition]
  [1 ..* multiplication]
  )
