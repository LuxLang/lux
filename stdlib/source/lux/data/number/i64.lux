(.module:
  [lux (#- and or not false true)
   [abstract
    [equivalence (#+ Equivalence)]
    [hash (#+ Hash)]
    [monoid (#+ Monoid)]]
   [data
    [number
     ["n" nat]]]])

(def: #export bits-per-byte
  8)

(def: #export bytes-per-i64
  8)

(def: #export width
  Nat
  (n.* ..bits-per-byte
       ..bytes-per-i64))

(template [<parameter-type> <name> <op> <doc>]
  [(def: #export (<name> parameter subject)
     {#.doc <doc>}
     (All [s] (-> <parameter-type> (I64 s) (I64 s)))
     (<op> parameter subject))]

  [(I64 Any) or                     "lux i64 or"                     "Bitwise or."]
  [(I64 Any) xor                    "lux i64 xor"                    "Bitwise xor."]
  [(I64 Any) and                    "lux i64 and"                    "Bitwise and."]
  
  [Nat       left-shift             "lux i64 left-shift"             "Bitwise left-shift."]
  [Nat       logic-right-shift      "lux i64 logical-right-shift"    "Unsigned bitwise logic-right-shift."]
  [Nat       arithmetic-right-shift "lux i64 arithmetic-right-shift" "Signed bitwise arithmetic-right-shift."]
  )

(def: #export not
  {#.doc "Bitwise negation."}
  (All [s] (-> (I64 s) (I64 s)))
  (xor (.i64 (dec 0))))

(type: #export Mask
  I64)

(def: #export false
  Mask
  (.i64 0))

(def: #export true
  Mask
  (..not ..false))

(def: #export (mask amount-of-bits)
  (-> Nat Mask)
  (case amount-of-bits
    0 ..false
    bits (case (n.% ..width bits)
           0 ..true
           bits (|> 1 .i64 (..left-shift (n.% ..width bits)) .dec))))

(def: #export (bit position)
  (-> Nat Mask)
  (|> 1 .i64 (..left-shift (n.% ..width position))))

(def: #export sign
  Mask
  (..bit (dec ..width)))

(def: (add-shift shift value)
  (-> Nat Nat Nat)
  (|> value (logic-right-shift shift) (n.+ value)))

(def: #export (count subject)
  {#.doc "Count the number of 1s in a bit-map."}
  (-> (I64 Any) Nat)
  (let [count' (n.- (|> subject (logic-right-shift 1) (..and 6148914691236517205) i64)
                    (i64 subject))]
    (|> count'
        (logic-right-shift 2) (..and 3689348814741910323) (n.+ (..and 3689348814741910323 count'))
        (add-shift 4) (..and 1085102592571150095)
        (add-shift 8)
        (add-shift 16)
        (add-shift 32)
        (..and 127))))

(def: #export (clear idx input)
  {#.doc "Clear bit at given index."}
  (All [s] (-> Nat (I64 s) (I64 s)))
  (|> idx ..bit ..not (..and input)))

(template [<name> <op> <doc>]
  [(def: #export (<name> idx input)
     {#.doc <doc>}
     (All [s] (-> Nat (I64 s) (I64 s)))
     (|> idx ..bit (<op> input)))]

  [set  ..or  "Set bit at given index."]
  [flip ..xor "Flip bit at given index."]
  )

(def: #export (set? idx input)
  (-> Nat (I64 Any) Bit)
  (|> input (:coerce I64) (..and (..bit idx)) (n.= 0) .not))

(def: #export (clear? idx input)
  (-> Nat (I64 Any) Bit)
  (.not (..set? idx input)))

(template [<name> <main> <comp>]
  [(def: #export (<name> distance input)
     (All [s] (-> Nat (I64 s) (I64 s)))
     (let [backwards-distance (n.- (n.% width distance) width)]
       (|> input
           (<comp> backwards-distance)
           (..or (<main> distance input)))))]

  [rotate-left  left-shift        logic-right-shift]
  [rotate-right logic-right-shift left-shift]
  )

(def: #export (region size offset)
  (-> Nat Nat Mask)
  (..left-shift offset (..mask size)))

(structure: #export equivalence
  (All [a] (Equivalence (I64 a)))

  (def: (= parameter subject)
    ("lux i64 =" parameter subject)))

(structure: #export hash
  (All [a] (Hash (I64 a)))

  (def: &equivalence ..equivalence)

  (def: hash .nat))

(template [<monoid> <identity> <compose>]
  [(structure: #export <monoid>
     (All [a] (Monoid (I64 a)))

     (def: identity <identity>)
     (def: compose <compose>)
     )]

  [disjunction ..false ..or]
  [conjunction ..true ..and]
  )

(signature: #export (Sub size)
  (: (Equivalence (I64 size))
     &equivalence)
  (: Nat
     width)
  (: (-> I64 (I64 size))
     narrow)
  (: (-> (I64 size) I64)
     widen))

(def: #export (sub width)
  (Ex [size] (-> Nat (Maybe (Sub size))))
  (if (.and (n.> 0 width)
            (n.< ..width width))
    (let [sign-shift (n.- width ..width)
          sign (..bit (dec width))
          mantissa (..mask (dec width))
          co-mantissa (..xor (.i64 -1) mantissa)]
      (#.Some (: Sub
                 (structure
                  (def: &equivalence ..equivalence)
                  (def: width width)
                  (def: (narrow value)
                    (..or (|> value (..and ..sign) (..logic-right-shift sign-shift))
                          (|> value (..and mantissa))))
                  (def: (widen value)
                    (.i64 (case (.nat (..and sign value))
                            0 value
                            _ (..or co-mantissa value))))))))
    #.None))
