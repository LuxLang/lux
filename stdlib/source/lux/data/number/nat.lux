(.module:
  [lux #*
   [abstract
    [hash (#+ Hash)]
    [enum (#+ Enum)]
    [interval (#+ Interval)]
    [monoid (#+ Monoid)]
    [equivalence (#+ Equivalence)]
    [codec (#+ Codec)]
    ["." order (#+ Order)]]
   [control
    ["." function]
    ["." try (#+ Try)]]
   [data
    ["." maybe]
    ["." text (#+ Char)]]])

(def: #export + (-> Nat Nat Nat) n/+)

(def: #export - (-> Nat Nat Nat) n/-)

(def: #export * (-> Nat Nat Nat) n/*)

(def: #export / (-> Nat Nat Nat) n//)

(def: #export % (-> Nat Nat Nat) n/%)

(def: #export (/% param subject)
  (-> Nat Nat [Nat Nat])
  [(../ param subject)
   (..% param subject)])

(def: #export (mod param subject)
  (-> Nat Nat Nat)
  (let [exact (|> subject (../ param) (..* param))]
    (|> subject (..- exact))))

(def: #export frac
  (-> Nat Frac)
  (|>> .int "lux i64 f64"))

(structure: #export equivalence
  (Equivalence Nat)
  
  (def: = n/=))

(structure: #export order
  (Order Nat)
  
  (def: &equivalence ..equivalence)
  (def: < n/<))

(structure: #export enum
  (Enum Nat)
  
  (def: &order ..order)
  (def: succ inc)
  (def: pred dec))

(structure: #export interval
  (Interval Nat)

  (def: &enum ..enum)
  (def: top (.nat -1))
  (def: bottom 0))

(template [<name> <compose> <identity>]
  [(structure: #export <name>
     (Monoid Nat)
     
     (def: identity <identity>)
     (def: compose <compose>))]

  [addition       ..+   0]
  [multiplication ..*   1]
  [minimum        n/min (:: ..interval top)]
  [maximum        n/max (:: ..interval bottom)]
  )

(def: #export (binary-character value)
  (-> Nat (Maybe Text))
  (case value
    0 (#.Some "0")
    1 (#.Some "1")
    _ #.None))

(def: #export (binary-value digit)
  (-> Char (Maybe Nat))
  (case digit
    (^ (char "0")) (#.Some 0)
    (^ (char "1")) (#.Some 1)
    _ #.None))

(def: #export (octal-character value)
  (-> Nat (Maybe Text))
  (case value
    0 (#.Some "0")
    1 (#.Some "1")
    2 (#.Some "2")
    3 (#.Some "3")
    4 (#.Some "4")
    5 (#.Some "5")
    6 (#.Some "6")
    7 (#.Some "7")
    _ #.None))

(def: #export (octal-value digit)
  (-> Char (Maybe Nat))
  (case digit
    (^ (char "0")) (#.Some 0)
    (^ (char "1")) (#.Some 1)
    (^ (char "2")) (#.Some 2)
    (^ (char "3")) (#.Some 3)
    (^ (char "4")) (#.Some 4)
    (^ (char "5")) (#.Some 5)
    (^ (char "6")) (#.Some 6)
    (^ (char "7")) (#.Some 7)
    _ #.None))

(def: #export (decimal-character value)
  (-> Nat (Maybe Text))
  (case value
    0 (#.Some "0")
    1 (#.Some "1")
    2 (#.Some "2")
    3 (#.Some "3")
    4 (#.Some "4")
    5 (#.Some "5")
    6 (#.Some "6")
    7 (#.Some "7")
    8 (#.Some "8")
    9 (#.Some "9")
    _ #.None))

(def: #export (decimal-value digit)
  (-> Char (Maybe Nat))
  (case digit
    (^ (char "0")) (#.Some 0)
    (^ (char "1")) (#.Some 1)
    (^ (char "2")) (#.Some 2)
    (^ (char "3")) (#.Some 3)
    (^ (char "4")) (#.Some 4)
    (^ (char "5")) (#.Some 5)
    (^ (char "6")) (#.Some 6)
    (^ (char "7")) (#.Some 7)
    (^ (char "8")) (#.Some 8)
    (^ (char "9")) (#.Some 9)
    _ #.None))

(def: #export (hexadecimal-character value)
  (-> Nat (Maybe Text))
  (case value
    0 (#.Some "0")
    1 (#.Some "1")
    2 (#.Some "2")
    3 (#.Some "3")
    4 (#.Some "4")
    5 (#.Some "5")
    6 (#.Some "6")
    7 (#.Some "7")
    8 (#.Some "8")
    9 (#.Some "9")
    10 (#.Some "A")
    11 (#.Some "B")
    12 (#.Some "C")
    13 (#.Some "D")
    14 (#.Some "E")
    15 (#.Some "F")
    _ #.None))

(def: #export (hexadecimal-value digit)
  (-> Char (Maybe Nat))
  (case digit
    (^ (char "0")) (#.Some 0)
    (^ (char "1")) (#.Some 1)
    (^ (char "2")) (#.Some 2)
    (^ (char "3")) (#.Some 3)
    (^ (char "4")) (#.Some 4)
    (^ (char "5")) (#.Some 5)
    (^ (char "6")) (#.Some 6)
    (^ (char "7")) (#.Some 7)
    (^ (char "8")) (#.Some 8)
    (^ (char "9")) (#.Some 9)
    (^or (^ (char "a")) (^ (char "A"))) (#.Some 10)
    (^or (^ (char "b")) (^ (char "B"))) (#.Some 11)
    (^or (^ (char "c")) (^ (char "C"))) (#.Some 12)
    (^or (^ (char "d")) (^ (char "D"))) (#.Some 13)
    (^or (^ (char "e")) (^ (char "E"))) (#.Some 14)
    (^or (^ (char "f")) (^ (char "F"))) (#.Some 15)
    _ #.None))

(template [<struct> <base> <to-character> <to-value> <error>]
  [(structure: #export <struct> (Codec Text Nat)
     (def: (encode value)
       (loop [input value
              output ""]
         (let [digit (maybe.assume (<to-character> (..% <base> input)))
               output' ("lux text concat" digit output)]
           (case (../ <base> input)
             0
             output'

             input'
             (recur input' output')))))

     (def: (decode repr)
       (let [input-size ("lux text size" repr)]
         (if (n/> 0 input-size)
           (loop [idx 0
                  output 0]
             (if (n/< input-size idx)
               (case (<to-value> ("lux text char" idx repr))
                 #.None
                 (#try.Failure ("lux text concat" <error> repr))

                 (#.Some digit-value)
                 (recur (inc idx)
                        (|> output (..* <base>) (..+ digit-value))))
               (#try.Success output)))
           (#try.Failure ("lux text concat" <error> repr))))))]

  [binary  2  binary-character      binary-value      "Invalid binary syntax for Nat: "]
  [octal   8  octal-character       octal-value       "Invalid octal syntax for Nat: "]
  [decimal 10 decimal-character     decimal-value     "Invalid decimal syntax for Nat: "]
  [hex     16 hexadecimal-character hexadecimal-value "Invalid hexadecimal syntax for Nat: "]
  )

(structure: #export hash (Hash Nat)
  (def: &equivalence ..equivalence)
  (def: hash function.identity))
