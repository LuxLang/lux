(.module:
  [lux #*
   [abstract
    [hash (#+ Hash)]
    [enum (#+ Enum)]
    [interval (#+ Interval)]
    [monoid (#+ Monoid)]
    [equivalence (#+ Equivalence)]
    [codec (#+ Codec)]
    ["." order (#+ Order)]]
   [control
    ["." function]
    ["." try (#+ Try)]]
   [data
    ["." maybe]]])

(template [<extension> <output> <name> <documentation>]
  [(def: #export (<name> parameter subject)
     {#.doc <documentation>}
     (-> Nat Nat <output>)
     (<extension> parameter subject))]

  ["lux i64 =" Bit = "Nat(ural) equivalence."]
  ["lux i64 +" Nat + "Nat(ural) addition."]
  ["lux i64 -" Nat - "Nat(ural) substraction."]
  )

(def: high
  (-> (I64 Any) I64)
  (|>> ("lux i64 logical-right-shift" 32)))

(def: low
  (-> (I64 Any) I64)
  (let [mask (|> 1 ("lux i64 left-shift" 32) ("lux i64 -" 1))]
    (|>> ("lux i64 and" mask))))

(def: #export (< reference sample)
  {#.doc "Nat(ural) less-than."}
  (-> Nat Nat Bit)
  (let [referenceH (..high reference)
        sampleH (..high sample)]
    (if ("lux i64 <" referenceH sampleH)
      #1
      (if ("lux i64 =" referenceH sampleH)
        ("lux i64 <"
         (..low reference)
         (..low sample))
        #0))))

(def: #export (<= reference sample)
  {#.doc "Nat(ural) less-than or equal."}
  (-> Nat Nat Bit)
  (if (..< reference sample)
    #1
    ("lux i64 =" reference sample)))

(def: #export (> reference sample)
  {#.doc "Nat(ural) greater-than."}
  (-> Nat Nat Bit)
  (..< sample reference))

(def: #export (>= reference sample)
  {#.doc "Nat(ural) greater-than or equal."}
  (-> Nat Nat Bit)
  (if (..< sample reference)
    #1
    ("lux i64 =" reference sample)))

(template [<name> <test> <doc>]
  [(def: #export (<name> left right)
     {#.doc <doc>}
     (-> Nat Nat Nat)
     (if (<test> right left)
       left
       right))]

  [min ..< "Nat(ural) minimum."]
  [max ..> "Nat(ural) maximum."]
  )

(def: #export (* parameter subject)
  {#.doc "Nat(ural) multiplication."}
  (-> Nat Nat Nat)
  ("lux coerce" Nat
   ("lux i64 *"
    ("lux coerce" Int parameter)
    ("lux coerce" Int subject))))

(def: #export (/ parameter subject)
  {#.doc "Nat(ural) division."}
  (-> Nat Nat Nat)
  (if ("lux i64 <" +0 ("lux coerce" Int parameter))
    (if (..< parameter subject)
      0
      1)
    (let [quotient (|> subject
                       ("lux i64 logical-right-shift" 1)
                       ("lux i64 /" ("lux coerce" Int parameter))
                       ("lux i64 left-shift" 1))
          flat ("lux i64 *"
                ("lux coerce" Int parameter)
                ("lux coerce" Int quotient))
          remainder ("lux i64 -" flat subject)]
      (if (..< parameter remainder)
        quotient
        ("lux i64 +" 1 quotient)))))

(def: #export (/% parameter subject)
  {#.doc "Nat(ural) [division remainder]."}
  (-> Nat Nat [Nat Nat])
  (let [div (../ parameter subject)
        flat ("lux i64 *"
              ("lux coerce" Int parameter)
              ("lux coerce" Int div))]
    [div ("lux i64 -" flat subject)]))

(def: #export (% parameter subject)
  {#.doc "Nat(ural) remainder."}
  (-> Nat Nat Nat)
  (let [flat ("lux i64 *"
              ("lux coerce" Int parameter)
              ("lux coerce" Int (../ parameter subject)))]
    ("lux i64 -" flat subject)))

(def: #export (gcd a b)
  {#.doc "Greatest Common Divisor."}
  (-> Nat Nat Nat)
  (case b
    0 a
    _ (gcd b (..% b a))))

(def: #export (lcm a b)
  {#.doc "Least Common Multiple."}
  (-> Nat Nat Nat)
  (case [a b]
    (^or [_ 0] [0 _])
    0

    _
    (|> a (../ (..gcd a b)) (..* b))))

(def: #export even?
  (-> Nat Bit)
  (|>> (..% 2) ("lux i64 =" 0)))

(def: #export odd?
  (-> Nat Bit)
  (|>> ..even? not))

(def: #export frac
  (-> Nat Frac)
  (|>> .int "lux i64 f64"))

(structure: #export equivalence
  (Equivalence Nat)
  
  (def: = ..=))

(structure: #export order
  (Order Nat)
  
  (def: &equivalence ..equivalence)
  (def: < ..<))

(structure: #export enum
  (Enum Nat)
  
  (def: &order ..order)
  (def: succ inc)
  (def: pred dec))

(structure: #export interval
  (Interval Nat)

  (def: &enum ..enum)
  (def: top (.nat -1))
  (def: bottom 0))

(template [<name> <compose> <identity>]
  [(structure: #export <name>
     (Monoid Nat)
     
     (def: identity <identity>)
     (def: compose <compose>))]

  [addition       ..+   0]
  [multiplication ..*   1]
  [minimum        ..min (\ ..interval top)]
  [maximum        ..max (\ ..interval bottom)]
  )

(def: (binary-character value)
  (-> Nat (Maybe Text))
  (case value
    0 (#.Some "0")
    1 (#.Some "1")
    _ #.None))

(def: (binary-value digit)
  (-> Nat (Maybe Nat))
  (case digit
    (^ (char "0")) (#.Some 0)
    (^ (char "1")) (#.Some 1)
    _ #.None))

(def: (octal-character value)
  (-> Nat (Maybe Text))
  (case value
    0 (#.Some "0")
    1 (#.Some "1")
    2 (#.Some "2")
    3 (#.Some "3")
    4 (#.Some "4")
    5 (#.Some "5")
    6 (#.Some "6")
    7 (#.Some "7")
    _ #.None))

(def: (octal-value digit)
  (-> Nat (Maybe Nat))
  (case digit
    (^ (char "0")) (#.Some 0)
    (^ (char "1")) (#.Some 1)
    (^ (char "2")) (#.Some 2)
    (^ (char "3")) (#.Some 3)
    (^ (char "4")) (#.Some 4)
    (^ (char "5")) (#.Some 5)
    (^ (char "6")) (#.Some 6)
    (^ (char "7")) (#.Some 7)
    _ #.None))

(def: (decimal-character value)
  (-> Nat (Maybe Text))
  (case value
    0 (#.Some "0")
    1 (#.Some "1")
    2 (#.Some "2")
    3 (#.Some "3")
    4 (#.Some "4")
    5 (#.Some "5")
    6 (#.Some "6")
    7 (#.Some "7")
    8 (#.Some "8")
    9 (#.Some "9")
    _ #.None))

(def: (decimal-value digit)
  (-> Nat (Maybe Nat))
  (case digit
    (^ (char "0")) (#.Some 0)
    (^ (char "1")) (#.Some 1)
    (^ (char "2")) (#.Some 2)
    (^ (char "3")) (#.Some 3)
    (^ (char "4")) (#.Some 4)
    (^ (char "5")) (#.Some 5)
    (^ (char "6")) (#.Some 6)
    (^ (char "7")) (#.Some 7)
    (^ (char "8")) (#.Some 8)
    (^ (char "9")) (#.Some 9)
    _ #.None))

(def: (hexadecimal-character value)
  (-> Nat (Maybe Text))
  (case value
    0 (#.Some "0")
    1 (#.Some "1")
    2 (#.Some "2")
    3 (#.Some "3")
    4 (#.Some "4")
    5 (#.Some "5")
    6 (#.Some "6")
    7 (#.Some "7")
    8 (#.Some "8")
    9 (#.Some "9")
    10 (#.Some "A")
    11 (#.Some "B")
    12 (#.Some "C")
    13 (#.Some "D")
    14 (#.Some "E")
    15 (#.Some "F")
    _ #.None))

(def: (hexadecimal-value digit)
  (-> Nat (Maybe Nat))
  (case digit
    (^ (char "0")) (#.Some 0)
    (^ (char "1")) (#.Some 1)
    (^ (char "2")) (#.Some 2)
    (^ (char "3")) (#.Some 3)
    (^ (char "4")) (#.Some 4)
    (^ (char "5")) (#.Some 5)
    (^ (char "6")) (#.Some 6)
    (^ (char "7")) (#.Some 7)
    (^ (char "8")) (#.Some 8)
    (^ (char "9")) (#.Some 9)
    (^or (^ (char "a")) (^ (char "A"))) (#.Some 10)
    (^or (^ (char "b")) (^ (char "B"))) (#.Some 11)
    (^or (^ (char "c")) (^ (char "C"))) (#.Some 12)
    (^or (^ (char "d")) (^ (char "D"))) (#.Some 13)
    (^or (^ (char "e")) (^ (char "E"))) (#.Some 14)
    (^or (^ (char "f")) (^ (char "F"))) (#.Some 15)
    _ #.None))

(template [<base> <struct> <to-character> <to-value> <error>]
  [(structure: #export <struct>
     (Codec Text Nat)
     
     (def: (encode value)
       (loop [input value
              output ""]
         (let [digit (maybe.assume (<to-character> (..% <base> input)))
               output' ("lux text concat" digit output)]
           (case (../ <base> input)
             0
             output'

             input'
             (recur input' output')))))

     (def: (decode repr)
       (let [input-size ("lux text size" repr)]
         (if (..> 0 input-size)
           (loop [idx 0
                  output 0]
             (if (..< input-size idx)
               (case (<to-value> ("lux text char" idx repr))
                 #.None
                 (#try.Failure ("lux text concat" <error> repr))

                 (#.Some digit-value)
                 (recur (inc idx)
                        (|> output (..* <base>) (..+ digit-value))))
               (#try.Success output)))
           (#try.Failure ("lux text concat" <error> repr))))))]

  [02 binary  binary-character      binary-value      "Invalid binary syntax for Nat: "]
  [08 octal   octal-character       octal-value       "Invalid octal syntax for Nat: "]
  [10 decimal decimal-character     decimal-value     "Invalid decimal syntax for Nat: "]
  [16 hex     hexadecimal-character hexadecimal-value "Invalid hexadecimal syntax for Nat: "]
  )

(structure: #export hash
  (Hash Nat)
  
  (def: &equivalence ..equivalence)
  (def: hash function.identity))
