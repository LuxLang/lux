(.module:
  [lux #*
   [abstract
    [hash (#+ Hash)]
    [enum (#+ Enum)]
    [interval (#+ Interval)]
    [monoid (#+ Monoid)]
    [equivalence (#+ Equivalence)]
    [codec (#+ Codec)]
    [predicate (#+ Predicate)]
    ["." order (#+ Order)]]
   [control
    ["." try (#+ Try)]]
   [data
    [text (#+ Char)]
    ["." maybe]]]
  ["." // #_
   ["#." nat]
   ["#." i64]])

(def: #export (= reference sample)
  {#.doc "Int(eger) equivalence."}
  (-> Int Int Bit)
  ("lux i64 =" reference sample))

(def: #export (< reference sample)
  {#.doc "Int(eger) less-than."}
  (-> Int Int Bit)
  ("lux i64 <" reference sample))

(def: #export (<= reference sample)
  {#.doc "Int(eger) less-than or equal."}
  (-> Int Int Bit)
  (if ("lux i64 <" reference sample)
    #1
    ("lux i64 =" reference sample)))

(def: #export (> reference sample)
  {#.doc "Int(eger) greater-than."}
  (-> Int Int Bit)
  ("lux i64 <" sample reference))

(def: #export (>= reference sample)
  {#.doc "Int(eger) greater-than or equal."}
  (-> Int Int Bit)
  (if ("lux i64 <" sample reference)
    #1
    ("lux i64 =" reference sample)))

(template [<comparison> <name>]
  [(def: #export <name>
     (Predicate Int)
     (<comparison> +0))]

  [..> positive?]
  [..< negative?]
  [..= zero?]
  )

(template [<name> <test> <doc>]
  [(def: #export (<name> left right)
     {#.doc <doc>}
     (-> Int Int Int)
     (if (<test> right left)
       left
       right))]

  [min ..< "Int(eger) minimum."]
  [max ..> "Int(eger) maximum."]
  )

(template [<name> <op> <doc>]
  [(def: #export (<name> param subject)
     {#.doc <doc>}
     (-> Int Int Int)
     (<op> param subject))]

  [+ "lux i64 +" "Int(eger) addition."]
  [- "lux i64 -" "Int(eger) substraction."]
  [* "lux i64 *" "Int(eger) multiplication."]
  [/ "lux i64 /" "Int(eger) division."]
  [% "lux i64 %" "Int(eger) remainder."]
  )

(def: #export (/% param subject)
  (-> Int Int [Int Int])
  [(../ param subject)
   (..% param subject)])

(def: #export negate (-> Int Int) (..* -1))

(def: #export (abs x)
  (-> Int Int)
  (if (..< +0 x)
    (..* -1 x)
    x))

(def: #export (signum x)
  (-> Int Int)
  (cond (..= +0 x) +0
        (..< +0 x) -1
        ## else
        +1))

(def: #export (mod param subject)
  (All [m] (-> Int Int Int))
  (let [raw (..% param subject)]
    (if (..< +0 raw)
      (let [shift (if (..< +0 param) ..- ..+)]
        (|> raw (shift param)))
      raw)))

(def: #export even?
  (-> Int Bit)
  (|>> (..% +2) ("lux i64 =" +0)))

(def: #export odd?
  (-> Int Bit)
  (|>> ..even? not))

(def: #export (gcd a b)
  {#.doc "Greatest Common Divisor."}
  (-> Int Int Int)
  (case b
    +0 a
    _ (gcd b (..mod b a))))

(def: #export (lcm a b)
  {#.doc "Least Common Multiple."}
  (-> Int Int Int)
  (case [a b]
    (^or [_ +0] [+0 _])
    +0

    _
    (|> a (/ (gcd a b)) (* b))
    ))

(def: #export frac
  (-> Int Frac)
  (|>> "lux i64 f64"))

(structure: #export equivalence
  (Equivalence Int)
  
  (def: = ..=))

(structure: #export order
  (Order Int)
  
  (def: &equivalence ..equivalence)
  (def: < ..<))

(structure: #export enum
  (Enum Int)
  
  (def: &order ..order)
  (def: succ inc)
  (def: pred dec))

## TODO: Find out why the numeric literals fail during JS compilation.
(structure: #export interval
  (Interval Int)
  
  (def: &enum ..enum)
  (def: top
    ## +9,223,372,036,854,775,807
    (let [half (//i64.left-shift 62 +1)]
      (+ half
         (dec half))))
  (def: bottom
    ## -9,223,372,036,854,775,808
    (//i64.left-shift 63 +1)))

(template [<name> <compose> <identity>]
  [(structure: #export <name>
     (Monoid Int)
     
     (def: identity <identity>)
     (def: compose <compose>))]

  [addition       ..+   +0]
  [multiplication ..*   +1]
  [maximum        ..max (\ ..interval bottom)]
  [minimum        ..min (\ ..interval top)]
  )

(def: (sign!! value)
  (-> Int Text)
  (if (..< +0 value)
    "-"
    "+"))

(def: (sign?? representation)
  (-> Text (Maybe Int))
  (case ("lux text char" 0 representation)
    (^ (char "-"))
    (#.Some -1)

    (^ (char "+"))
    (#.Some +1)

    _
    #.None))

(def: (int-decode-loop input-size repr sign <base> <to-value> <error>)
  (-> Nat Text Int Int (-> Char (Maybe Nat)) Text (Try Int))
  (loop [idx 1
         output +0]
    (if (//nat.< input-size idx)
      (case (<to-value> ("lux text char" idx repr))
        #.None
        (#try.Failure <error>)

        (#.Some digit-value)
        (recur (inc idx)
               (|> output (..* <base>) (..+ (.int digit-value)))))
      (#try.Success (..* sign output)))))

(template [<struct> <base> <to-character> <to-value> <error>]
  [(structure: #export <struct>
     (Codec Text Int)
     
     (def: (encode value)
       (if (..= +0 value)
         "+0"
         (loop [input (|> value (../ <base>) ..abs)
                output (|> value (..% <base>) ..abs .nat
                           <to-character>
                           maybe.assume)]
           (if (..= +0 input)
             ("lux text concat" (sign!! value) output)
             (let [digit (maybe.assume (<to-character> (.nat (..% <base> input))))]
               (recur (../ <base> input)
                      ("lux text concat" digit output)))))))

     (def: (decode repr)
       (let [input-size ("lux text size" repr)]
         (if (//nat.> 1 input-size)
           (case (sign?? repr)
             (#.Some sign)
             (int-decode-loop input-size repr sign <base> <to-value> <error>)

             #.None
             (#try.Failure <error>))
           (#try.Failure <error>)))))]

  [binary   +2 //nat.binary-character      //nat.binary-value      "Invalid binary syntax for Int: "]
  [octal    +8 //nat.octal-character       //nat.octal-value       "Invalid octal syntax for Int: "]
  [decimal +10 //nat.decimal-character     //nat.decimal-value     "Invalid syntax for Int: "]
  [hex     +16 //nat.hexadecimal-character //nat.hexadecimal-value "Invalid hexadecimal syntax for Int: "]
  )

(structure: #export hash
  (Hash Int)
  
  (def: &equivalence ..equivalence)
  (def: hash .nat))
