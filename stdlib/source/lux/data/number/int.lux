(.module:
  [lux #*
   [abstract
    [hash (#+ Hash)]
    [enum (#+ Enum)]
    [interval (#+ Interval)]
    [monoid (#+ Monoid)]
    [equivalence (#+ Equivalence)]
    [codec (#+ Codec)]
    ["." order (#+ Order)]]
   [control
    ["." try (#+ Try)]]
   [data
    [text (#+ Char)]
    ["." maybe]]]
  [//
   ["." nat]])

(def: #export + (-> Int Int Int) i/+)

(def: #export - (-> Int Int Int) i/-)

(def: #export * (-> Int Int Int) i/*)

(def: #export / (-> Int Int Int) i//)

(def: #export % (-> Int Int Int) i/%)

(def: #export (/% param subject)
  (-> Int Int [Int Int])
  [(../ param subject)
   (..% param subject)])

(def: #export negate (-> Int Int) (..* -1))

(def: #export (abs x)
  (-> Int Int)
  (if (i/< +0 x)
    (..* -1 x)
    x))

(def: #export (signum x)
  (-> Int Int)
  (cond (i/= +0 x) +0
        (i/< +0 x) -1
        ## else
        +1))

(def: #export (mod param subject)
  (All [m] (-> Int Int Int))
  (let [raw (..% param subject)]
    (if (i/< +0 raw)
      (let [shift (if (i/< +0 param) ..- ..+)]
        (|> raw (shift param)))
      raw)))

(def: #export frac
  (-> Int Frac)
  (|>> "lux i64 f64"))

(structure: #export equivalence (Equivalence Int)
  (def: = i/=))

(structure: #export order (Order Int)
  (def: &equivalence ..equivalence)
  (def: < i/<))

(structure: #export enum (Enum Int)
  (def: &order ..order)
  (def: succ inc)
  (def: pred dec))

(structure: #export interval (Interval Int)
  (def: &enum ..enum)
  (def: top +9,223,372,036,854,775,807)
  (def: bottom -9,223,372,036,854,775,808))

(template [<name> <compose> <identity>]
  [(structure: #export <name> (Monoid Int)
     (def: identity <identity>)
     (def: compose <compose>))]

  [addition       ..+   +0]
  [multiplication ..*   +1]
  [maximum        i/max (:: ..interval bottom)]
  [minimum        i/min (:: ..interval top)]
  )

(def: (sign!! value)
  (-> Int Text)
  (if (i/< +0 value)
    "-"
    "+"))

(def: (sign?? representation)
  (-> Text (Maybe Int))
  (case ("lux text char" 0 representation)
    (^ (char "-"))
    (#.Some -1)

    (^ (char "+"))
    (#.Some +1)

    _
    #.None))

(def: (int-decode-loop input-size repr sign <base> <to-value> <error>)
  (-> Nat Text Int Int (-> Char (Maybe Nat)) Text (Try Int))
  (loop [idx 1
         output +0]
    (if (n/< input-size idx)
      (case (<to-value> ("lux text char" idx repr))
        #.None
        (#try.Failure <error>)

        (#.Some digit-value)
        (recur (inc idx)
               (|> output (..* <base>) (..+ (.int digit-value)))))
      (#try.Success (..* sign output)))))

(template [<struct> <base> <to-character> <to-value> <error>]
  [(structure: #export <struct> (Codec Text Int)
     (def: (encode value)
       (if (i/= +0 value)
         "+0"
         (loop [input (|> value (../ <base>) ..abs)
                output (|> value (..% <base>) ..abs .nat
                           <to-character>
                           maybe.assume)]
           (if (i/= +0 input)
             ("lux text concat" (sign!! value) output)
             (let [digit (maybe.assume (<to-character> (.nat (..% <base> input))))]
               (recur (../ <base> input)
                      ("lux text concat" digit output)))))))

     (def: (decode repr)
       (let [input-size ("lux text size" repr)]
         (if (n/> 1 input-size)
           (case (sign?? repr)
             (#.Some sign)
             (int-decode-loop input-size repr sign <base> <to-value> <error>)

             #.None
             (#try.Failure <error>))
           (#try.Failure <error>)))))]

  [binary   +2 nat.binary-character      nat.binary-value      "Invalid binary syntax for Int: "]
  [octal    +8 nat.octal-character       nat.octal-value       "Invalid octal syntax for Int: "]
  [decimal +10 nat.decimal-character     nat.decimal-value     "Invalid syntax for Int: "]
  [hex     +16 nat.hexadecimal-character nat.hexadecimal-value "Invalid hexadecimal syntax for Int: "]
  )

(structure: #export hash (Hash Int)
  (def: &equivalence ..equivalence)
  (def: hash .nat))
