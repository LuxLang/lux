(;module:
  lux
  (lux (control ["m" monoid]
                ["F" functor]
                comonad)))

(type: #export (Trace t a)
  {#monoid (m;Monoid t)
   #trace (-> t a)})

(struct: #export Functor<Trace> (All [t] (F;Functor (Trace t)))
  (def: (map f fa)
    (update@ #trace (. f) fa)))

(struct: #export CoMonad<Trace> (All [t] (CoMonad (Trace t)))
  (def: functor Functor<Trace>)

  (def: (unwrap wa)
    ((get@ #trace wa)
     (get@ [#monoid #m;identity] wa)))

  (def: (split wa)
    (let [monoid (get@ #monoid wa)]
      {#monoid monoid
       #trace (function [t1]
                {#monoid monoid
                 #trace (function [t2]
                          ((get@ #trace wa)
                           (:: monoid compose t1 t2)))})})))

(def: #export (run context tracer)
  (All [t a] (-> t (Trace t a) a))
  (:: tracer trace context))
