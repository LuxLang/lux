(.module:
  [lux #*
   [control
    ["." monoid (#+ Monoid)]
    [functor (#+ Functor)]
    comonad]
   function])

(type: #export (Trace t a)
  {#monoid (Monoid t)
   #trace (-> t a)})

(structure: #export Functor<Trace> (All [t] (Functor (Trace t)))
  (def: (map f fa)
    (update@ #trace (compose f) fa)))

(structure: #export CoMonad<Trace> (All [t] (CoMonad (Trace t)))
  (def: functor Functor<Trace>)

  (def: (unwrap wa)
    ((get@ #trace wa)
     (get@ [#monoid #monoid.identity] wa)))

  (def: (split wa)
    (let [monoid (get@ #monoid wa)]
      {#monoid monoid
       #trace (function (_ t1)
                {#monoid monoid
                 #trace (function (_ t2)
                          ((get@ #trace wa)
                           (:: monoid compose t1 t2)))})})))

(def: #export (run context tracer)
  (All [t a] (-> t (Trace t a) a))
  (:: tracer trace context))
