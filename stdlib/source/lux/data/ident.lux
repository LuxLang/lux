##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (control eq
                codec
                hash)
       (data [text "Text/" Monoid<Text> Eq<Text>])))

## [Types]
## (type: Ident
##   [Text Text])

## [Functions]
(do-template [<name> <side>]
  [(def: #export (<name> [module name])
     (-> Ident Text)
     <side>)]

  [module module]
  [name   name]
  )

## [Structures]
(struct: #export _ (Eq Ident)
  (def: (= [xmodule xname] [ymodule yname])
    (and (Text/= xmodule ymodule)
         (Text/= xname yname))))

(struct: #export _ (Codec Text Ident)
  (def: (encode [module name])
    (case module
      "" name
      _ ($_ Text/append module ";" name)))
  
  (def: (decode input)
    (if (Text/= "" input)
      (#;Left (Text/append "Invalid format for Ident: " input))
      (case (text;split-all-with ";" input)
        (^ (list name))
        (#;Right ["" name])

        (^ (list module name))
        (#;Right [module name])

        _
        (#;Left (Text/append "Invalid format for Ident: " input))))))

(struct: #export _ (Hash Ident)
  (def: eq Eq<Ident>)
  
  (def: (hash [module name])
    (let [(^open) text;Hash<Text>]
      (n.* (hash module) (hash name)))))
