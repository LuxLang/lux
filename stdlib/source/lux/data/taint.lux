(;module:
  lux
  (lux (data [product])))

(type: #export (Tainted a)
  [a Void])

(def: #export (taint input)
  (All [a] (-> a (Tainted a)))
  [input (:! Void [])])

(def: #export (trust input)
  (All [a] (-> (Tainted a) a))
  (product;left input))

(def: #export (validate pred input)
  (All [a] (-> (-> a Bool) (Tainted a) (Maybe a)))
  (let [value (product;left input)]
    (if (pred value)
      (#;Some value)
      #;None)))

(def: #export (sanitize f input)
  (All [a] (-> (-> a a) (Tainted a) a))
  (|> input product;left f))
