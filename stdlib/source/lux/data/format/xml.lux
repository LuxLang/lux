(.module:
  [lux #*
   [abstract
    [monad (#+ do)]
    [equivalence (#+ Equivalence)]
    [codec (#+ Codec)]]
   [control
    [try (#+ Try)]
    ["p" parser ("#@." monad)
     ["l" text (#+ Parser)]]]
   [data
    ["." product]
    ["." name ("#@." equivalence codec)]
    [number
     ["n" nat]
     ["." int]]
    ["." text ("#@." equivalence monoid)]
    [collection
     ["." list ("#@." functor)]
     ["." dictionary (#+ Dictionary)]]]])

(type: #export Tag
  Name)

(type: #export Attrs
  (Dictionary Name Text))

(def: #export attrs
  Attrs
  (dictionary.new name.hash))

(type: #export #rec XML
  (#Text Text)
  (#Node Tag Attrs (List XML)))

(def: namespace-separator
  ":")

(def: xml-standard-escape-char^
  (Parser Text)
  ($_ p.either
      (p.after (l.this "&lt;") (p@wrap "<"))
      (p.after (l.this "&gt;") (p@wrap ">"))
      (p.after (l.this "&amp;") (p@wrap "&"))
      (p.after (l.this "&apos;") (p@wrap "'"))
      (p.after (l.this "&quot;") (p@wrap text.double-quote))))

(def: xml-unicode-escape-char^
  (Parser Text)
  (|> (do p.monad
        [hex? (p.maybe (l.this "x"))
         code (case hex?
                #.None
                (p.codec int.decimal (l.many l.decimal))

                (#.Some _)
                (p.codec int.decimal (l.many l.hexadecimal)))]
        (wrap (|> code .nat text.from-code)))
      (p.before (l.this ";"))
      (p.after (l.this "&#"))))

(def: xml-escape-char^
  (Parser Text)
  (p.either xml-standard-escape-char^
            xml-unicode-escape-char^))

(def: xml-char^
  (Parser Text)
  (p.either (l.none-of ($_ text@compose "<>&'" text.double-quote))
            xml-escape-char^))

(def: xml-identifier
  (Parser Text)
  (do p.monad
    [head (p.either (l.one-of "_")
                    l.alpha)
     tail (l.some (p.either (l.one-of "_.-")
                            l.alpha-num))]
    (wrap ($_ text@compose head tail))))

(def: namespaced-symbol^
  (Parser Name)
  (do p.monad
    [first-part xml-identifier
     ?second-part (<| p.maybe (p.after (l.this ..namespace-separator)) xml-identifier)]
    (case ?second-part
      #.None
      (wrap ["" first-part])

      (#.Some second-part)
      (wrap [first-part second-part]))))

(def: tag^ namespaced-symbol^)
(def: attr-name^ namespaced-symbol^)

(def: spaced^
  (All [a] (-> (Parser a) (Parser a)))
  (let [white-space^ (p.some l.space)]
    (|>> (p.before white-space^)
         (p.after white-space^))))

(def: attr-value^
  (Parser Text)
  (let [value^ (l.some xml-char^)]
    (p.either (l.enclosed [text.double-quote text.double-quote] value^)
              (l.enclosed ["'" "'"] value^))))

(def: attrs^
  (Parser Attrs)
  (<| (:: p.monad map (dictionary.from-list name.hash))
      p.some
      (p.and (spaced^ attr-name^))
      (p.after (l.this "="))
      (spaced^ attr-value^)))

(def: (close-tag^ expected)
  (-> Tag (Parser []))
  (do p.monad
    [actual (|> tag^
                spaced^
                (p.after (l.this "/"))
                (l.enclosed ["<" ">"]))]
    (p.assert ($_ text@compose "Close tag does not match open tag." text.new-line
                  "Expected: " (name@encode expected) text.new-line
                  "  Actual: " (name@encode actual) text.new-line)
              (name@= expected actual))))

(def: comment^
  (Parser Text)
  (|> (l.not (l.this "--"))
      l.some
      (l.enclosed ["<--" "-->"])
      spaced^))

(def: xml-header^
  (Parser Attrs)
  (|> (spaced^ attrs^)
      (p.before (l.this "?>"))
      (p.after (l.this "<?xml"))
      spaced^))

(def: cdata^
  (Parser Text)
  (let [end (l.this "]]>")]
    (|> (l.some (l.not end))
        (p.after end)
        (p.after (l.this "<![CDATA["))
        spaced^)))

(def: text^
  (Parser XML)
  (|> (p.either cdata^
                (l.many xml-char^))
      (p@map (|>> #Text))))

(def: xml^
  (Parser XML)
  (|> (p.rec
       (function (_ node^)
         (p.either text^
                   (spaced^
                    (do p.monad
                      [_ (l.this "<")
                       tag (spaced^ tag^)
                       attrs (spaced^ attrs^)
                       #let [no-children^ (do p.monad
                                            [_ (l.this "/>")]
                                            (wrap (#Node tag attrs (list))))
                             with-children^ (do p.monad
                                              [_ (l.this ">")
                                               children (p.some node^)
                                               _ (close-tag^ tag)]
                                              (wrap (#Node tag attrs children)))]]
                      (p.either no-children^
                                with-children^))))))
      ## This is put outside of the call to "rec" because comments
      ## cannot be located inside of XML nodes.
      ## This way, the comments can only be before or after the main document.
      (p.before (p.some comment^))
      (p.after (p.some comment^))
      (p.after (p.maybe xml-header^))))

(def: #export read
  (-> Text (Try XML))
  (l.run xml^))

(def: (sanitize-value input)
  (-> Text Text)
  (|> input
      (text.replace-all "&" "&amp;")
      (text.replace-all "<" "&lt;")
      (text.replace-all ">" "&gt;")
      (text.replace-all "'" "&apos;")
      (text.replace-all text.double-quote "&quot;")))

(def: (write-label [namespace name])
  (-> Tag Text)
  (case namespace
    "" name
    _ ($_ text@compose namespace ..namespace-separator name)))

(def: (write-attrs attrs)
  (-> Attrs Text)
  (|> attrs
      dictionary.entries
      (list@map (function (_ [key value])
                  ($_ text@compose (..write-label key) "=" text.double-quote (sanitize-value value) text.double-quote)))
      (text.join-with " ")))

(def: xml-header
  Text
  ($_ text@compose "<?xml version=" text.double-quote "1.0" text.double-quote " encoding=" text.double-quote "UTF-8" text.double-quote "?>"))

(def: #export (write input)
  (-> XML Text)
  ($_ text@compose xml-header
      (loop [input input]
        (case input
          (#Text value)
          (sanitize-value value)
          
          (#Node xml-tag xml-attrs xml-children)
          (let [tag (..write-label xml-tag)
                attrs (if (dictionary.empty? xml-attrs)
                        ""
                        ($_ text@compose " " (write-attrs xml-attrs)))]
            (if (list.empty? xml-children)
              ($_ text@compose "<" tag attrs "/>")
              ($_ text@compose "<" tag attrs ">"
                  (|> xml-children
                      (list@map recur)
                      (text.join-with ""))
                  "</" tag ">")))))))

(structure: #export codec
  (Codec Text XML)
  
  (def: encode write)
  (def: decode read))

(structure: #export equivalence
  (Equivalence XML)
  
  (def: (= reference sample)
    (case [reference sample]
      [(#Text reference/value) (#Text sample/value)]
      (text@= reference/value sample/value)

      [(#Node reference/tag reference/attrs reference/children)
       (#Node sample/tag sample/attrs sample/children)]
      (and (name@= reference/tag sample/tag)
           (:: (dictionary.equivalence text.equivalence) = reference/attrs sample/attrs)
           (n.= (list.size reference/children)
                (list.size sample/children))
           (|> (list.zip2 reference/children sample/children)
               (list.every? (product.uncurry =))))

      _
      #0)))
