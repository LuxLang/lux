(.module:
  [lux #- nat int rev]
  (lux (control [monad #+ do Monad]
                ["p" parser]
                ["ex" exception #+ exception:])
       (data [error]
             (text [encoding]
                   [format #+ %n])
             [number])
       (world [blob #+ Blob])))

## Exceptions
(exception: #export (blob-was-not-fully-read {length Nat} {read Nat})
  (ex.report ["Blob length" (%n length)]
             ["Read bytes" (%n read)]))

(exception: #export (invalid-bool {byte Nat})
  (%n byte))

## Types
(type: #export Offset Nat)

(type: #export Size Nat)

(def: #export size/8 +1)
(def: #export size/16 +2)
(def: #export size/32 +4)
(def: #export size/64 +8)

(type: #export Read
  (p.Parser [Offset Blob]))

(type: #export (Write a)
  (-> a [Size (-> Offset Blob Blob)]))

(type: #export (Format a)
  {#read (Read a)
   #write (Write a)})

## Operators
(def: #export (read format input)
  (All [a] (-> (Format a) Blob (error.Error a)))
  (case ((get@ #read format) [+0 input])
    (#error.Error msg)
    (#error.Error msg)
    
    (#error.Success [[end _] output])
    (let [length (blob.size input)]
      (if (n/= end length)
        (#error.Success output)
        (ex.throw blob-was-not-fully-read [length end])))))

(def: #export (write format value)
  (All [a] (-> (Format a) a Blob))
  (let [[valueS valueT] ((get@ #write format) value)]
    (|> valueS blob.create (valueT +0))))

## Combinators
(def: #export (seq preF postF)
  (All [a b] (-> (Format a) (Format b) (Format [a b])))
  {#read (p.seq (get@ #read preF) (get@ #read postF))
   #write (function (_ [preV postV])
            (let [[preS preT] ((get@ #write preF) preV)
                  [postS postT] ((get@ #write postF) postV)]
              [(n/+ preS postS)
               (function (_ offset)
                 (|>> (preT offset)
                      (postT (n/+ preS offset))))]))})

## Primitives
(do-template [<name> <size> <read> <write>]
  [(def: <name>
     (Format (I64 Any))
     {#read (function (_ [offset blob])
              (case (<read> offset blob)
                (#error.Success data)
                (#error.Success [(n/+ <size> offset) blob] data)
                
                (#error.Error error)
                (#error.Error error)))
      #write (function (_ value)
               [<size>
                (function (_ offset blob)
                  (error.assume (<write> offset value blob)))])})]

  [bits/8  size/8 blob.read/8  blob.write/8]
  [bits/16 size/16 blob.read/16 blob.write/16]
  [bits/32 size/32 blob.read/32 blob.write/32]
  [bits/64 size/64 blob.read/64 blob.write/64]
  )

## Utilities
(def: #export bool
  (Format Bool)
  {#read (function (_ [offset blob])
           (case (blob.read/8 offset blob)
             (#error.Success data)
             (case (: Nat data)
               (^template [<nat> <bool>]
                 <nat> (#error.Success [(inc offset) blob] <bool>))
               ([+0 false]
                [+1 true])
               
               _
               (ex.throw invalid-bool data))
             
             (#error.Error error)
             (#error.Error error)))
   #write (function (_ value)
            [+1
             (function (_ offset blob)
               (exec (error.assume (blob.write/8 offset (if value +1 +0) blob))
                 blob))])}
  )

(def: #export nat (Format Nat) (:assume ..bits/64))
(def: #export int (Format Int) (:assume ..bits/64))
(def: #export rev (Format Rev) (:assume ..bits/64))

(def: #export frac
  (Format Frac)
  (let [(^slots [#read #write]) ..bits/64]
    {#read (:: p.Monad<Parser> map number.bits-to-frac read)
     #write (|>> number.frac-to-bits write)}))

(def: #export blob
  (Format Blob)
  {#read (do p.Monad<Parser>
           [size (get@ #read nat)]
           (function (_ [offset blob])
             (do error.Monad<Error>
               [#let [end (n/+ size offset)]
                output (blob.slice offset end blob)]
               (wrap [[end blob] output]))))
   #write (function (_ value)
            (let [size (blob.size value)]
              [(n/+ size/64 size)
               (function (_ offset blob)
                 (error.assume
                  (do error.Monad<Error>
                    [_ (blob.write/64 offset size blob)]
                    (blob.copy size +0 value (n/+ size/64 offset) blob))))]))})

(def: #export text
  (Format Text)
  (let [(^slots [#read #write]) ..blob]
    {#read (do p.Monad<Parser>
             [utf8 read]
             (p.lift (encoding.from-utf8 utf8)))
     #write (|>> encoding.to-utf8 write)}))
