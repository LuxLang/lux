(.module:
  [lux (#- nat int rev list type)
   [control
    [monad (#+ do Monad)]
    ["p" parser]
    ["ex" exception (#+ exception:)]
    [equivalence (#+ Equivalence)]]
   [data
    ["." error (#+ Error)]
    ["." number]
    [text
     ["." encoding]
     [format (#+ %n)]]]
   [world
    ["." binary (#+ Binary)]]])

## Exceptions
(exception: #export (binary-was-not-fully-read {length Nat} {read Nat})
  (ex.report ["Binary length" (%n length)]
             ["Read bytes" (%n read)]))

(exception: #export (invalid-tag {range Nat} {byte Nat})
  (ex.report ["Range" (%n range)]
             ["Byte" (%n byte)]))

## Types
(type: #export Offset Nat)

(type: #export Size Nat)

(def: #export size/8 +1)
(def: #export size/16 +2)
(def: #export size/32 +4)
(def: #export size/64 +8)

(type: #export Read
  (p.Parser [Offset Binary]))

(type: #export (Write a)
  (-> a [Size (-> Offset Binary Binary)]))

(type: #export (Format a)
  {#read (Read a)
   #write (Write a)})

## Operators
(def: #export (read format input)
  (All [a] (-> (Format a) Binary (Error a)))
  (case ((get@ #read format) [+0 input])
    (#error.Error msg)
    (#error.Error msg)
    
    (#error.Success [[end _] output])
    (let [length (binary.size input)]
      (if (n/= end length)
        (#error.Success output)
        (ex.throw binary-was-not-fully-read [length end])))))

(def: #export (write format value)
  (All [a] (-> (Format a) a Binary))
  (let [[valueS valueT] ((get@ #write format) value)]
    (|> valueS binary.create (valueT +0))))

## Primitives
(do-template [<name> <size> <read> <write>]
  [(def: <name>
     (Format (I64 Any))
     {#read (function (_ [offset binary])
              (case (<read> offset binary)
                (#error.Success data)
                (#error.Success [(n/+ <size> offset) binary] data)
                
                (#error.Error error)
                (#error.Error error)))
      #write (function (_ value)
               [<size>
                (function (_ offset binary)
                  (|> binary
                      (<write> offset value)
                      error.assume))])})]

  [bits/8  size/8  binary.read/8  binary.write/8]
  [bits/16 size/16 binary.read/16 binary.write/16]
  [bits/32 size/32 binary.read/32 binary.write/32]
  [bits/64 size/64 binary.read/64 binary.write/64]
  )

## Combinators
(def: #export (alt leftB rightB)
  (All [l r] (-> (Format l) (Format r) (Format (| l r))))
  {#read (do p.Monad<Parser>
           [flag (get@ #read bits/8)]
           (case flag
             +0 (:: @ map (|>> #.Left) (get@ #read leftB))
             +1 (:: @ map (|>> #.Right) (get@ #read rightB))
             _ (p.lift (ex.throw invalid-tag [+2 (.nat flag)]))))
   #write (function (_ altV)
            (case altV
              (#.Left leftV)
              (let [[leftS leftT] ((get@ #write leftB) leftV)]
                [(.inc leftS)
                 (function (_ offset binary)
                   (|> binary
                       (binary.write/8 offset +0)
                       error.assume
                       (leftT (.inc offset))))])
              
              (#.Right rightV)
              (let [[rightS rightT] ((get@ #write rightB) rightV)]
                [(.inc rightS)
                 (function (_ offset binary)
                   (|> binary
                       (binary.write/8 offset +1)
                       error.assume
                       (rightT (.inc offset))))])
              ))})

(def: #export (seq preB postB)
  (All [a b] (-> (Format a) (Format b) (Format [a b])))
  {#read (p.seq (get@ #read preB) (get@ #read postB))
   #write (function (_ [preV postV])
            (let [[preS preT] ((get@ #write preB) preV)
                  [postS postT] ((get@ #write postB) postV)]
              [(n/+ preS postS)
               (function (_ offset)
                 (|>> (preT offset)
                      (postT (n/+ preS offset))))]))})

(def: #export (rec body)
  (All [a] (-> (-> (Format a) (Format a)) (Format a)))
  {#read (function (_ input)
           (let [read (get@ #read (body (rec body)))]
             (read input)))
   #write (function (_ value)
            (let [write (get@ #write (body (rec body)))]
              (write value)))})

## Utilities
(def: #export (ignore default)
  (All [a] (-> a (Format a)))
  {#read (function (_ input)
           (#error.Success [input default]))
   #write (function (_ value)
            [+0
             (function (_ offset binary)
               binary)])})

(def: #export any
  (Format Any)
  (ignore []))

(def: #export bit
  (Format Bit)
  {#read (function (_ [offset binary])
           (case (binary.read/8 offset binary)
             (#error.Success data)
             (case (: Nat data)
               (^template [<nat> <bit>]
                 <nat> (#error.Success [(inc offset) binary] <bit>))
               ([+0 #0]
                [+1 #1])
               
               _
               (ex.throw invalid-tag [+2 data]))
             
             (#error.Error error)
             (#error.Error error)))
   #write (function (_ value)
            [+1
             (function (_ offset binary)
               (|> binary
                   (binary.write/8 offset (if value +1 +0))
                   error.assume))])})

(def: #export nat (Format Nat) (:assume ..bits/64))
(def: #export int (Format Int) (:assume ..bits/64))
(def: #export rev (Format Rev) (:assume ..bits/64))

(def: #export frac
  (Format Frac)
  (let [(^slots [#read #write]) ..bits/64]
    {#read (:: p.Monad<Parser> map number.bits-to-frac read)
     #write (|>> number.frac-to-bits write)}))

(def: #export binary
  (Format Binary)
  {#read (do p.Monad<Parser>
           [size (get@ #read nat)]
           (function (_ [offset binary])
             (do error.Monad<Error>
               [#let [end (n/+ size offset)]
                output (binary.slice offset end binary)]
               (wrap [[end binary] output]))))
   #write (function (_ value)
            (let [size (binary.size value)]
              [(n/+ size/64 size)
               (function (_ offset binary)
                 (error.assume
                  (do error.Monad<Error>
                    [_ (binary.write/64 offset size binary)]
                    (binary.copy size +0 value (n/+ size/64 offset) binary))))]))})

(def: #export text
  (Format Text)
  (let [(^slots [#read #write]) ..binary]
    {#read (do p.Monad<Parser>
             [utf8 read]
             (p.lift (encoding.from-utf8 utf8)))
     #write (|>> encoding.to-utf8 write)}))

(def: #export maybe
  (All [a] (-> (Format a) (Format (Maybe a))))
  (..alt ..any))

(def: #export (list value)
  (All [a] (-> (Format a) (Format (List a))))
  (..rec
   (function (_ recur)
     (..alt ..any
            (..seq value recur)))))

(def: #export ident
  (Format Ident)
  (..seq ..text ..text))

(def: #export type
  (Format Type)
  (..rec
   (function (_ type)
     (let [pair (..seq type type)
           indexed ..nat
           quantified (..seq (..list type) type)]
       ($_ ..alt
           ## #Primitive
           (..seq ..text (..list type))
           ## #Sum
           pair
           ## #Product
           pair
           ## #Function
           pair
           ## #Parameter
           indexed
           ## #Var
           indexed
           ## #Ex
           indexed
           ## #UnivQ
           quantified
           ## #ExQ
           quantified
           ## #Apply
           pair
           ## #Named
           (..seq ..ident type)
           )))))

(def: #export cursor
  (Format Cursor)
  ($_ ..seq ..text ..nat ..nat))

(def: #export code
  (Format Code)
  (..rec
   (function (_ code)
     (let [sequence (..list code)
           code' ($_ ..alt
                     ## #Bit
                     ..bit
                     ## #Nat
                     ..nat
                     ## #Int
                     ..int
                     ## #Rev
                     ..rev
                     ## #Frac
                     ..frac
                     ## #Text
                     ..text
                     ## #Symbol
                     ..ident
                     ## #Tag
                     ..ident
                     ## #Form
                     sequence
                     ## #Tuple
                     sequence
                     ## #Record
                     (..list (..seq code code)))]
       (..seq ..cursor code')))))
