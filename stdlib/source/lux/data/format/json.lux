(.module: {#.doc (.doc "Functionality for reading and writing values in the JSON format."
                       "For more information, please see: http://www.json.org/")}
  [lux #*
   [abstract
    ["." monad (#+ do)]
    [equivalence (#+ Equivalence)]
    codec]
   [control
    pipe
    ["." try (#+ Try)]
    ["<>" parser ("#@." monad)
     ["<t>" text (#+ Parser)]]]
   [data
    ["." bit]
    ["." maybe]
    ["." product]
    [number
     ["n" nat]
     ["f" frac ("#@." decimal)]]
    ["." text ("#@." equivalence monoid)]
    [collection
     ["." list ("#@." fold functor)]
     ["." row (#+ Row row) ("#@." monad)]
     ["." dictionary (#+ Dictionary)]]]
   ["." meta (#+ monad with-gensyms)]
   [macro
    [syntax (#+ syntax:)]
    ["." code]]])

(template [<name> <type>]
  [(type: #export <name> <type>)]

  [Null    Any]
  [Boolean Bit]
  [Number  Frac]
  [String  Text]
  )

(type: #export #rec JSON
  (#Null    Null)
  (#Boolean Boolean)
  (#Number  Number)
  (#String  String)
  (#Array   (Row JSON))
  (#Object  (Dictionary String JSON)))

(template [<name> <type>]
  [(type: #export <name> <type>)]

  [Array  (Row JSON)]
  [Object (Dictionary String JSON)]
  )

(def: #export object
  (-> (List [String JSON]) JSON)
  (|>> (dictionary.from-list text.hash) #..Object))

(syntax: #export (json token)
  {#.doc (doc "A simple way to produce JSON literals."
              (json #1)
              (json +123.456)
              (json "Some text")
              (json #null)
              (json ["this" "is" "an" "array"])
              (json {"this" "is"
                     "an" "object"}))}
  (let [(^open ".") ..monad
        wrapper (function (_ x) (` (..json (~ x))))]
    (case token
      (^template [<ast-tag> <ctor> <json-tag>]
        [[_ (<ast-tag> value)]
         (wrap (list (` (: JSON (<json-tag> (~ (<ctor> value)))))))])
      ([#.Bit  code.bit  #..Boolean]
       [#.Frac code.frac #..Number]
       [#.Text code.text #..String])

      [_ (#.Tag ["" "null"])]
      (wrap (list (` (: JSON #..Null))))

      [_ (#.Tuple members)]
      (wrap (list (` (: JSON (#..Array ((~! row) (~+ (list@map wrapper members))))))))

      [_ (#.Record pairs)]
      (do {! ..monad}
        [pairs' (monad.map !
                           (function (_ [slot value])
                             (case slot
                               [_ (#.Text key-name)]
                               (wrap (` [(~ (code.text key-name)) (~ (wrapper value))]))

                               _
                               (meta.fail "Wrong syntax for JSON object.")))
                           pairs)]
        (wrap (list (` (: JSON (#..Object ((~! dictionary.from-list)
                                           (~! text.hash)
                                           (list (~+ pairs')))))))))
      
      _
      (wrap (list token)))))

(def: #export (get-fields json)
  {#.doc "Get all the fields in a JSON object."}
  (-> JSON (Try (List String)))
  (case json
    (#Object obj)
    (#try.Success (dictionary.keys obj))

    _
    (#try.Failure ($_ text@compose "Cannot get the fields of a non-object."))))

(def: #export (get key json)
  {#.doc "A JSON object field getter."}
  (-> String JSON (Try JSON))
  (case json
    (#Object obj)
    (case (dictionary.get key obj)
      (#.Some value)
      (#try.Success value)

      #.None
      (#try.Failure ($_ text@compose "Missing field '" key "' on object.")))

    _
    (#try.Failure ($_ text@compose "Cannot get field '" key "' on a non-object."))))

(def: #export (set key value json)
  {#.doc "A JSON object field setter."}
  (-> String JSON JSON (Try JSON))
  (case json
    (#Object obj)
    (#try.Success (#Object (dictionary.put key value obj)))

    _
    (#try.Failure ($_ text@compose "Cannot set field '" key "' on a non-object."))))

(template [<name> <tag> <type> <desc>]
  [(def: #export (<name> key json)
     {#.doc (code.text ($_ text@compose "A JSON object field getter for " <desc> "."))}
     (-> Text JSON (Try <type>))
     (case (get key json)
       (#try.Success (<tag> value))
       (#try.Success value)

       (#try.Success _)
       (#try.Failure ($_ text@compose "Wrong value type at key: " key))

       (#try.Failure error)
       (#try.Failure error)))]

  [get-boolean #Boolean Boolean "booleans"]
  [get-number  #Number  Number  "numbers"]
  [get-string  #String  String  "strings"]
  [get-array   #Array   Array   "arrays"]
  [get-object  #Object  Object  "objects"]
  )

(structure: #export equivalence
  (Equivalence JSON)
  
  (def: (= x y)
    (case [x y]
      [#Null #Null]
      #1

      (^template [<tag> <struct>]
        [[(<tag> x') (<tag> y')]
         (:: <struct> = x' y')])
      ([#Boolean bit.equivalence]
       [#Number  f.equivalence]
       [#String  text.equivalence])

      [(#Array xs) (#Array ys)]
      (and (n.= (row.size xs) (row.size ys))
           (list@fold (function (_ idx prev)
                        (and prev
                             (maybe.default #0
                                            (do maybe.monad
                                              [x' (row.nth idx xs)
                                               y' (row.nth idx ys)]
                                              (wrap (= x' y'))))))
                      #1
                      (list.indices (row.size xs))))
      
      [(#Object xs) (#Object ys)]
      (and (n.= (dictionary.size xs) (dictionary.size ys))
           (list@fold (function (_ [xk xv] prev)
                        (and prev
                             (case (dictionary.get xk ys)
                               #.None   #0
                               (#.Some yv) (= xv yv))))
                      #1
                      (dictionary.entries xs)))
      
      _
      #0)))

############################################################
############################################################
############################################################

(def: (format-null _) (-> Null Text) "null")

(def: format-boolean
  (-> Boolean Text)
  (|>> (case>
        #0 "false"
        #1 "true")))

(def: format-number
  (-> Number Text)
  (|>> (case>
        +0.0 "0.0"
        -0.0 "0.0"
        value (let [raw (:: f.decimal encode value)]
                (if (f.< +0.0 value)
                  raw
                  (|> raw (text.split 1) maybe.assume product.right))))))

(def: format-string (-> String Text) text.encode)

(def: (format-array format elems)
  (-> (-> JSON Text) (-> Array Text))
  ($_ text@compose "["
      (|> elems (row@map format) row.to-list (text.join-with ","))
      "]"))

(def: (format-object format object)
  (-> (-> JSON Text) (-> Object Text))
  ($_ text@compose "{"
      (|> object
          dictionary.entries
          (list@map (function (_ [key value]) ($_ text@compose (format-string key) ":" (format value))))
          (text.join-with ","))
      "}"))

(def: #export (format json)
  (-> JSON Text)
  (case json
    (^template [<tag> <format>]
      [(<tag> value)
       (<format> value)])
    ([#Null    format-null]
     [#Boolean format-boolean]
     [#Number  format-number]
     [#String  format-string]
     [#Array   (format-array format)]
     [#Object  (format-object format)])
    ))

############################################################
############################################################
############################################################

(def: space~
  (Parser Text)
  (<t>.some <t>.space))

(def: data-sep
  (Parser [Text Any Text])
  ($_ <>.and space~ (<t>.this ",") space~))

(def: null~
  (Parser Null)
  (do <>.monad
    [_ (<t>.this "null")]
    (wrap [])))

(template [<name> <token> <value>]
  [(def: <name>
     (Parser Boolean)
     (do <>.monad
       [_ (<t>.this <token>)]
       (wrap <value>)))]

  [true~  "true"  #1]
  [false~ "false" #0]
  )

(def: boolean~
  (Parser Boolean)
  (<>.either true~ false~))

(def: number~
  (Parser Number)
  (do {! <>.monad}
    [signed? (<>.parses? (<t>.this "-"))
     digits (<t>.many <t>.decimal)
     decimals (<>.default "0"
                          (do !
                            [_ (<t>.this ".")]
                            (<t>.many <t>.decimal)))
     exp (<>.default ""
                     (do !
                       [mark (<t>.one-of "eE")
                        signed?' (<>.parses? (<t>.this "-"))
                        offset (<t>.many <t>.decimal)]
                       (wrap ($_ text@compose mark (if signed?' "-" "") offset))))]
    (case (f@decode ($_ text@compose (if signed? "-" "") digits "." decimals exp))
      (#try.Failure message)
      (<>.fail message)
      
      (#try.Success value)
      (wrap value))))

(def: escaped~
  (Parser Text)
  ($_ <>.either
      (<>.after (<t>.this "\t")
                (<>@wrap text.tab))
      (<>.after (<t>.this "\b")
                (<>@wrap text.back-space))
      (<>.after (<t>.this "\n")
                (<>@wrap text.new-line))
      (<>.after (<t>.this "\r")
                (<>@wrap text.carriage-return))
      (<>.after (<t>.this "\f")
                (<>@wrap text.form-feed))
      (<>.after (<t>.this (text@compose "\" text.double-quote))
                (<>@wrap text.double-quote))
      (<>.after (<t>.this "\\")
                (<>@wrap "\"))))

(def: string~
  (Parser String)
  (<| (<t>.enclosed [text.double-quote text.double-quote])
      (loop [_ []])
      (do {! <>.monad}
        [chars (<t>.some (<t>.none-of (text@compose "\" text.double-quote)))
         stop <t>.peek])
      (if (text@= "\" stop)
        (do !
          [escaped escaped~
           next-chars (recur [])]
          (wrap ($_ text@compose chars escaped next-chars)))
        (wrap chars))))

(def: (kv~ json~)
  (-> (Parser JSON) (Parser [String JSON]))
  (do <>.monad
    [key string~
     _ space~
     _ (<t>.this ":")
     _ space~
     value json~]
    (wrap [key value])))

(template [<name> <type> <open> <close> <elem-parser> <prep>]
  [(def: (<name> json~)
     (-> (Parser JSON) (Parser <type>))
     (do <>.monad
       [_ (<t>.this <open>)
        _ space~
        elems (<>.sep-by data-sep <elem-parser>)
        _ space~
        _ (<t>.this <close>)]
       (wrap (<prep> elems))))]

  [array~  Array  "[" "]" json~  row.from-list]
  [object~ Object "{" "}" (kv~ json~) (dictionary.from-list text.hash)]
  )

(def: json~
  (Parser JSON)
  (<>.rec
   (function (_ json~)
     ($_ <>.or
         null~
         boolean~
         number~
         string~
         (array~ json~)
         (object~ json~)))))

(structure: #export codec
  (Codec Text JSON)
  
  (def: encode ..format)
  (def: decode (<t>.run json~)))
