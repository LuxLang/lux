(.module: {#.doc (.doc "Functionality for reading and writing values in the JSON format."
                       "For more information, please see: http://www.json.org/")}
  [lux #*
   [abstract
    ["." monad (#+ Monad do)]
    [equivalence (#+ Equivalence)]
    codec]
   [control
    pipe
    ["p" parser (#+ Parser) ("#@." monad)
     ["l" text]]
    ["ex" exception (#+ exception:)]]
   [data
    ["." bit]
    ["." maybe]
    ["." error (#+ Error)]
    ["." sum]
    ["." product]
    [number
     ["." frac ("#@." decimal)]]
    ["." text ("#@." equivalence monoid)]
    [collection
     ["." list ("#@." fold monad)]
     ["." row (#+ Row row) ("#@." monad)]
     ["." dictionary (#+ Dictionary)]]]
   ["." macro (#+ monad with-gensyms)
    ["s" syntax (#+ syntax:)]
    ["." code]]])

(template [<name> <type>]
  [(type: #export <name> <type>)]

  [Null    Any]
  [Boolean Bit]
  [Number  Frac]
  [String  Text]
  )

(type: #export #rec JSON
  (#Null    Null)
  (#Boolean Boolean)
  (#Number  Number)
  (#String  String)
  (#Array   (Row JSON))
  (#Object  (Dictionary String JSON)))

(template [<name> <type>]
  [(type: #export <name> <type>)]

  [Array   (Row JSON)]
  [Object  (Dictionary String JSON)]
  )

(type: #export (Reader a)
  {#.doc "JSON reader."}
  (Parser (List JSON) a))

(syntax: #export (json token)
  {#.doc (doc "A simple way to produce JSON literals."
              (json #1)
              (json +123.456)
              (json "Some text")
              (json #null)
              (json ["this" "is" "an" "array"])
              (json {"this" "is"
                     "an" "object"}))}
  (let [(^open ".") ..monad
        wrapper (function (_ x) (` (..json (~ x))))]
    (case token
      (^template [<ast-tag> <ctor> <json-tag>]
        [_ (<ast-tag> value)]
        (wrap (list (` (: JSON (<json-tag> (~ (<ctor> value))))))))
      ([#.Bit  code.bit  #Boolean]
       [#.Frac code.frac #Number]
       [#.Text code.text #String])

      [_ (#.Tag ["" "null"])]
      (wrap (list (` (: JSON #Null))))

      [_ (#.Tuple members)]
      (wrap (list (` (: JSON (#Array ((~! row) (~+ (list@map wrapper members))))))))

      [_ (#.Record pairs)]
      (do ..monad
        [pairs' (monad.map @
                           (function (_ [slot value])
                             (case slot
                               [_ (#.Text key-name)]
                               (wrap (` [(~ (code.text key-name)) (~ (wrapper value))]))

                               _
                               (macro.fail "Wrong syntax for JSON object.")))
                           pairs)]
        (wrap (list (` (: JSON (#Object ((~! dictionary.from-list) (~! text.hash) (list (~+ pairs')))))))))
      
      _
      (wrap (list token)))))

(def: #export (get-fields json)
  {#.doc "Get all the fields in a JSON object."}
  (-> JSON (Error (List String)))
  (case json
    (#Object obj)
    (#error.Success (dictionary.keys obj))

    _
    (#error.Failure ($_ text@compose "Cannot get the fields of a non-object."))))

(def: #export (get key json)
  {#.doc "A JSON object field getter."}
  (-> String JSON (Error JSON))
  (case json
    (#Object obj)
    (case (dictionary.get key obj)
      (#.Some value)
      (#error.Success value)

      #.None
      (#error.Failure ($_ text@compose "Missing field '" key "' on object.")))

    _
    (#error.Failure ($_ text@compose "Cannot get field '" key "' of a non-object."))))

(def: #export (set key value json)
  {#.doc "A JSON object field setter."}
  (-> String JSON JSON (Error JSON))
  (case json
    (#Object obj)
    (#error.Success (#Object (dictionary.put key value obj)))

    _
    (#error.Failure ($_ text@compose "Cannot set field '" key "' of a non-object."))))

(template [<name> <tag> <type> <desc>]
  [(def: #export (<name> key json)
     {#.doc (code.text ($_ text@compose "A JSON object field getter for " <desc> "."))}
     (-> Text JSON (Error <type>))
     (case (get key json)
       (#error.Success (<tag> value))
       (#error.Success value)

       (#error.Success _)
       (#error.Failure ($_ text@compose "Wrong value type at key: " key))

       (#error.Failure error)
       (#error.Failure error)))]

  [get-boolean #Boolean Boolean "booleans"]
  [get-number  #Number  Number  "numbers"]
  [get-string  #String  String  "strings"]
  [get-array   #Array   Array   "arrays"]
  [get-object  #Object  Object  "objects"]
  )

(structure: #export equivalence (Equivalence JSON)
  (def: (= x y)
    (case [x y]
      [#Null #Null]
      #1

      (^template [<tag> <struct>]
        [(<tag> x') (<tag> y')]
        (:: <struct> = x' y'))
      ([#Boolean bit.equivalence]
       [#Number  frac.equivalence]
       [#String  text.equivalence])

      [(#Array xs) (#Array ys)]
      (and (n/= (row.size xs) (row.size ys))
           (list@fold (function (_ idx prev)
                        (and prev
                             (maybe.default #0
                                            (do maybe.monad
                                              [x' (row.nth idx xs)
                                               y' (row.nth idx ys)]
                                              (wrap (= x' y'))))))
                      #1
                      (list.indices (row.size xs))))
      
      [(#Object xs) (#Object ys)]
      (and (n/= (dictionary.size xs) (dictionary.size ys))
           (list@fold (function (_ [xk xv] prev)
                        (and prev
                             (case (dictionary.get xk ys)
                               #.None   #0
                               (#.Some yv) (= xv yv))))
                      #1
                      (dictionary.entries xs)))
      
      _
      #0)))

############################################################
############################################################
############################################################

(def: encode-boolean
  (-> Bit Text)
  (|>> (case>
        #0 "false"
        #1 "true")))

(def: encode-number
  (-> Frac Text)
  (|>> (case>
        +0.0 "0.0"
        -0.0 "0.0"
        value (let [raw (:: frac.decimal encode value)]
                (if (f/< +0.0 value)
                  raw
                  (|> raw (text.split 1) maybe.assume product.right))))))

(def: (show-null _) (-> Null Text) "null")

(template [<name> <type> <codec>]
  [(def: <name> (-> <type> Text) <codec>)]

  [show-boolean Boolean ..encode-boolean]
  [show-number  Number  ..encode-number]
  [show-string  String  text.encode]
  )

(def: (show-array show-json elems)
  (-> (-> JSON Text) (-> Array Text))
  ($_ text@compose "["
      (|> elems (row@map show-json) row.to-list (text.join-with ","))
      "]"))

(def: (show-object show-json object)
  (-> (-> JSON Text) (-> Object Text))
  ($_ text@compose "{"
      (|> object
          dictionary.entries
          (list@map (function (_ [key value]) ($_ text@compose (show-string key) ":" (show-json value))))
          (text.join-with ","))
      "}"))

(def: (show-json json)
  (-> JSON Text)
  (case json
    (^template [<tag> <show>]
      (<tag> value)
      (<show> value))
    ([#Null    show-null]
     [#Boolean show-boolean]
     [#Number  show-number]
     [#String  show-string]
     [#Array   (show-array show-json)]
     [#Object  (show-object show-json)])
    ))

############################################################
############################################################
############################################################

(exception: #export (unconsumed-input {input (List JSON)})
  (|> input
      (list@map show-json)
      (text.join-with text.new-line)))

(exception: #export (empty-input)
  "")

(def: #export (run json parser)
  (All [a] (-> JSON (Reader a) (Error a)))
  (case (p.run (list json) parser)
    (#error.Success [remainder output])
    (case remainder
      #.Nil
      (#error.Success output)

      _
      (ex.throw unconsumed-input remainder))
    
    (#error.Failure error)
    (#error.Failure error)))

(def: #export (fail error)
  (All [a] (-> Text (Reader a)))
  (function (_ inputs)
    (#error.Failure error)))

(def: #export any
  {#.doc "Just returns the JSON input without applying any logic."}
  (Reader JSON)
  (<| (function (_ inputs))
      (case inputs
        #.Nil
        (ex.throw empty-input [])
        
        (#.Cons head tail)
        (#error.Success [tail head]))))

(template [<name> <type> <tag> <desc>]
  [(def: #export <name>
     {#.doc (code.text ($_ text@compose "Reads a JSON value as " <desc> "."))}
     (Reader <type>)
     (do p.monad
       [head any]
       (case head
         (<tag> value)
         (wrap value)

         _
         (fail ($_ text@compose "JSON value is not " <desc> ".")))))]

  [null    Any  #Null    "null"]
  [boolean Bit  #Boolean "boolean"]
  [number  Frac #Number  "number"]
  [string  Text #String  "string"]
  )

(template [<test> <check> <type> <eq> <encoder> <tag> <desc>]
  [(def: #export (<test> test)
     {#.doc (code.text ($_ text@compose "Asks whether a JSON value is a " <desc> "."))}
     (-> <type> (Reader Bit))
     (do p.monad
       [head any]
       (case head
         (<tag> value)
         (wrap (:: <eq> = test value))

         _
         (fail ($_ text@compose "JSON value is not " <desc> ".")))))

   (def: #export (<check> test)
     {#.doc (code.text ($_ text@compose "Ensures a JSON value is a " <desc> "."))}
     (-> <type> (Reader Any))
     (do p.monad
       [head any]
       (case head
         (<tag> value)
         (if (:: <eq> = test value)
           (wrap [])
           (fail ($_ text@compose "Value mismatch: " (<encoder> test) " =/= " (<encoder> value))))

         _
         (fail ($_ text@compose "JSON value is not a " <desc> ".")))))]

  [boolean? boolean! Bit  bit.equivalence  encode-boolean           #Boolean "boolean"]
  [number?  number!  Frac frac.equivalence (:: frac.decimal encode) #Number  "number"]
  [string?  string!  Text text.equivalence text.encode              #String  "string"]
  )

(def: #export (nullable parser)
  (All [a] (-> (Reader a) (Reader (Maybe a))))
  (p.or null
        parser))

(def: #export (array parser)
  {#.doc "Parses a JSON array."}
  (All [a] (-> (Reader a) (Reader a)))
  (do p.monad
    [head any]
    (case head
      (#Array values)
      (case (p.run (row.to-list values) parser)
        (#error.Failure error)
        (fail error)

        (#error.Success [remainder output])
        (case remainder
          #.Nil
          (wrap output)

          _
          (fail (ex.construct unconsumed-input remainder))))

      _
      (fail (text@compose "JSON value is not an array: " (show-json head))))))

(def: #export (object parser)
  {#.doc "Parses a JSON object. Use this with the 'field' combinator."}
  (All [a] (-> (Reader a) (Reader a)))
  (do p.monad
    [head any]
    (case head
      (#Object kvs)
      (case (p.run (|> kvs
                       dictionary.entries
                       (list@map (function (_ [key value])
                                   (list (#String key) value)))
                       list.concat)
                   parser)
        (#error.Failure error)
        (fail error)

        (#error.Success [remainder output])
        (case remainder
          #.Nil
          (wrap output)

          _
          (fail (ex.construct unconsumed-input remainder))))
      
      _
      (fail (text@compose "JSON value is not an object: " (show-json head))))))

(def: #export (field field-name parser)
  {#.doc "Parses a field inside a JSON object. Use this inside the 'object' combinator."}
  (All [a] (-> Text (Reader a) (Reader a)))
  (function (recur inputs)
    (case inputs
      (^ (list& (#String key) value inputs'))
      (if (text@= key field-name)
        (case (p.run (list value) parser)
          (#error.Success [#.Nil output])
          (#error.Success [inputs' output])

          (#error.Success [inputs'' _])
          (ex.throw unconsumed-input inputs'')

          (#error.Failure error)
          (#error.Failure error))
        (do error.monad
          [[inputs'' output] (recur inputs')]
          (wrap [(list& (#String key) value inputs'')
                 output])))

      #.Nil
      (ex.throw empty-input [])

      _
      (ex.throw unconsumed-input inputs))))

(def: #export dictionary
  {#.doc "Parses a dictionary-like JSON object."}
  (All [a] (-> (Reader a) (Reader (Dictionary Text a))))
  (|>> (p.and ..string)
       p.some
       object
       (p@map (dictionary.from-list text.hash))))

############################################################
############################################################
############################################################

(def: space~
  (l.Lexer Text)
  (l.some l.space))

(def: data-sep
  (l.Lexer [Text Any Text])
  ($_ p.and space~ (l.this ",") space~))

(def: null~
  (l.Lexer Null)
  (do p.monad
    [_ (l.this "null")]
    (wrap [])))

(template [<name> <token> <value>]
  [(def: <name>
     (l.Lexer Boolean)
     (do p.monad
       [_ (l.this <token>)]
       (wrap <value>)))]

  [true~  "true"  #1]
  [false~ "false" #0]
  )

(def: boolean~
  (l.Lexer Boolean)
  (p.either true~ false~))

(def: number~
  (l.Lexer Number)
  (do p.monad
    [signed? (l.this? "-")
     digits (l.many l.decimal)
     decimals (p.default "0"
                         (do @
                           [_ (l.this ".")]
                           (l.many l.decimal)))
     exp (p.default ""
                    (do @
                      [mark (l.one-of "eE")
                       signed?' (l.this? "-")
                       offset (l.many l.decimal)]
                      (wrap ($_ text@compose mark (if signed?' "-" "") offset))))]
    (case (frac@decode ($_ text@compose (if signed? "-" "") digits "." decimals exp))
      (#error.Failure message)
      (p.fail message)
      
      (#error.Success value)
      (wrap value))))

(def: escaped~
  (l.Lexer Text)
  ($_ p.either
      (p.after (l.this "\t")
               (p@wrap text.tab))
      (p.after (l.this "\b")
               (p@wrap text.back-space))
      (p.after (l.this "\n")
               (p@wrap text.new-line))
      (p.after (l.this "\r")
               (p@wrap text.carriage-return))
      (p.after (l.this "\f")
               (p@wrap text.form-feed))
      (p.after (l.this (text@compose "\" text.double-quote))
               (p@wrap text.double-quote))
      (p.after (l.this "\\")
               (p@wrap "\"))))

(def: string~
  (l.Lexer String)
  (<| (l.enclosed [text.double-quote text.double-quote])
      (loop [_ []])
      (do p.monad
        [chars (l.some (l.none-of (text@compose "\" text.double-quote)))
         stop l.peek])
      (if (text@= "\" stop)
        (do @
          [escaped escaped~
           next-chars (recur [])]
          (wrap ($_ text@compose chars escaped next-chars)))
        (wrap chars))))

(def: (kv~ json~)
  (-> (-> Any (l.Lexer JSON)) (l.Lexer [String JSON]))
  (do p.monad
    [key string~
     _ space~
     _ (l.this ":")
     _ space~
     value (json~ [])]
    (wrap [key value])))

(template [<name> <type> <open> <close> <elem-parser> <prep>]
  [(def: (<name> json~)
     (-> (-> Any (l.Lexer JSON)) (l.Lexer <type>))
     (do p.monad
       [_ (l.this <open>)
        _ space~
        elems (p.sep-by data-sep <elem-parser>)
        _ space~
        _ (l.this <close>)]
       (wrap (<prep> elems))))]

  [array~  Array  "[" "]" (json~ [])  row.from-list]
  [object~ Object "{" "}" (kv~ json~) (dictionary.from-list text.hash)]
  )

(def: (json~' _)
  (-> Any (l.Lexer JSON))
  ($_ p.or null~ boolean~ number~ string~ (array~ json~') (object~ json~')))

(structure: #export codec (Codec Text JSON)
  (def: encode show-json)
  (def: decode (function (_ input) (l.run input (json~' [])))))
