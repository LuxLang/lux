(.module:
  [lux (#- Name and)
   [data
    ["." color (#+ Color Pigment)]
    ["." number]
    ["." text
     format
     ["." encoding (#+ Encoding)]]
    [collection
     ["." list ("list/." Functor<List> Monoid<List>)]]]
   [type
    abstract]
   [world
    [net (#+ URL)]]]
  [/
   ["." selector (#+ Selector Combinator)]
   ["." value (#+ Value)]
   ["." property (#+ Property)]])

(abstract: #export Style
  {#.doc "The style associated with a CSS selector."}

  Text

  (def: #export empty Style (:abstraction ""))

  (def: property-separator " ")

  (def: #export (with [property value])
    (All [brand]
      (-> [(Property brand) (Value brand)]
          (-> Style Style)))
    (|>> :representation
         (format (property.name property) ": " (value.value value) ";" ..property-separator)
         :abstraction))

  (def: #export inline
    (-> Style Text)
    (|>> :representation))
  )

(abstract: #export CSS
  {}

  Text

  (def: #export (rule selector style)
    (-> Selector Style CSS)
    (:abstraction (format (selector.selector selector) " " "{" (..inline style) "}")))

  (def: #export (char-set encoding)
    (-> Encoding CSS)
    (:abstraction (format "@charset" " " (%t (encoding.name encoding)) ";")))

  (def: css-separator text.new-line)

  (def: #export (and pre post)
    (-> CSS CSS CSS)
    (:abstraction (format (:representation pre) ..css-separator
                          (:representation post))))

  (def: #export (alter combinator selector css)
    (-> Combinator Selector CSS CSS)
    (|> css
        :representation
        (text.split-all-with ..css-separator)
        (list/map (|>> (format (selector.selector (combinator selector (selector.tag ""))))))
        (text.join-with ..css-separator)
        :abstraction))

  (def: #export (dependent combinator selector style inner)
    (-> Combinator Selector Style CSS CSS)
    (..and (..rule selector style)
           (..alter combinator selector inner)))

  (do-template [<name> <combinator>]
    [(def: #export <name>
       (-> Selector Style CSS CSS)
       (..dependent <combinator>))]

    [scope selector.in]
    [complex selector.sub]
    )
  )
