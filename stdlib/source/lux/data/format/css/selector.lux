(.module:
  [lux (#- and id is? not)
   [data
    ["." text
     format]]
   [type
    abstract]
   ["." locale (#+ Locale)]])

(type: #export Tag Text)
(type: #export ID Text)
(type: #export Class Text)
(type: #export Attribute Text)

(abstract: #export Selector
  {}
  
  Text

  (def: #export selector
    (-> Selector Text)
    (|>> :representation))

  (def: #export any
    Selector
    (:abstraction "*"))

  (def: #export tag
    (-> Tag Selector)
    (|>> :abstraction))

  (do-template [<name> <type> <prefix>]
    [(def: #export <name>
       (-> <type> Selector)
       (|>> (format <prefix>) :abstraction))]

    [id ID "#"]
    [class Class "."]
    )

  (type: #export Combinator
    (-> Selector Selector Selector))

  (do-template [<name> <combinator>]
    [(def: #export (<name> left right)
       Combinator
       (:abstraction (format (:representation left)
                             <combinator>
                             (:representation right))))]

    [and ","]
    [in " "]
    [sub ">"]
    [after "+"]
    [later "~"]
    )

  (def: #export (with attribute)
    (-> Attribute Selector)
    (:abstraction (format "[" attribute "]")))

  (do-template [<name> <check>]
    [(def: #export (<name> attribute value base)
       (-> Attribute Text Selector Selector)
       (:abstraction (format (:representation base) "[" attribute <check> value "]")))]

    [is? "="]
    [has? "~="]
    [has-start? "|="]
    [starts? "^="]
    [ends? "$="]
    [contains? "*="]
    )

  (do-template [<name> <pseudo>]
    [(def: #export (<name> base)
       (-> Selector Selector)
       (:abstraction (format (:representation base) <pseudo>)))]

    [active ":active"]
    [after! "::after"]
    [before! "::before"]

    [checked ":checked"]
    [default ":default"]
    [disabled ":disabled"]
    [empty ":empty"]
    [enabled ":enabled"]
    [first-child ":first-child"]
    [first-letter "::first-letter"]
    [first-line "::first-line"]
    [first-of-type ":first-of-type"]
    [focused ":focus"]
    [hovered ":hover"]
    [in-range ":in-range"]
    [indeterminate ":indeterminate"]
    [invalid ":invalid"]
    [last-child ":last-child"]
    [last-of-type ":last-of-type"]
    [link ":link"]
    [only-of-type ":only-of-type"]
    [only-child ":only-child"]
    [optional ":optional"]
    [out-of-range ":out-of-range"]
    [placeholder "::placeholder"]
    [read-only ":read-only"]
    [read-write ":read-write"]
    [required ":required"]
    [root ":root"]
    [selection "::selection"]
    [target ":target"]
    [valid ":valid"]
    [visited ":visited"]
    )

  (def: #export (language locale base)
    (-> Locale Selector Selector)
    (|> locale
        locale.code
        (text.enclose ["(" ")"])
        (format (:representation base) ":lang")
        :abstraction))

  (def: #export not
    (-> Selector Selector)
    (|>> :representation
         (text.enclose ["(" ")"])
         (format ":not")
         :abstraction))

  (abstract: #export Index
    {}
    
    Text

    (def: #export simple
      (-> Nat Index)
      (|>> %n :abstraction))

    (do-template [<name> <index>]
      [(def: #export <name> Index (:abstraction <index>))]
      
      [odd "odd"]
      [even "even"]
      )

    (type: #export Formula
      {#constant Int
       #variable Int})

    (def: #export (formula input)
      (-> Formula Index)
      (let [(^slots [#constant #variable]) input]
        (:abstraction (format (if (i/< +0 variable)
                                (%i variable)
                                (%n (.nat variable)))
                              (%i constant)))))
    
    (do-template [<name> <pseudo>]
      [(def: #export (<name> index base)
         (-> Index Selector Selector)
         (|> (:representation index)
             (text.enclose ["(" ")"])
             (format (:representation Selector base) <pseudo>)
             (:abstraction Selector)))]

      [nth-child ":nth-child"]
      [nth-last-child ":nth-last-child"]
      [nth-last-of-type ":nth-last-of-type"]
      [nth-of-type ":nth-of-type"]
      )
    )
  )
