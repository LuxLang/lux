##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (control functor
                applicative
                ["M" monad #*])))

## [Types]
(type: #export (Error a)
  (Either Text a))

## [Structures]
(struct: #export _ (Functor Error)
  (def: (map f ma)
    (case ma
      (#;Left msg)    (#;Left msg)
      (#;Right datum) (#;Right (f datum)))))

(struct: #export _ (Applicative Error)
  (def: functor Functor<Error>)

  (def: (wrap a)
    (#;Right a))

  (def: (apply ff fa)
    (case ff
      (#;Right f)
      (case fa
        (#;Right a)
        (#;Right (f a))

        (#;Left msg)
        (#;Left msg))

      (#;Left msg)
      (#;Left msg))
    ))

(struct: #export _ (Monad Error)
  (def: applicative Applicative<Error>)

  (def: (join mma)
    (case mma
      (#;Left msg) (#;Left msg)
      (#;Right ma) ma)))

(struct: #export (ErrorT Monad<M>)
  (All [M] (-> (Monad M) (Monad (All [a] (M (Error a))))))
  (def: applicative (compA (get@ #M;applicative Monad<M>) Applicative<Error>))
  (def: (join MeMea)
    (do Monad<M>
      [eMea MeMea]
      (case eMea
        (#;Left error)
        (wrap (#;Left error))

        (#;Right Mea)
        Mea))))

(def: #export (lift-error Monad<M>)
  (All [M a] (-> (Monad M) (-> (M a) (M (Error a)))))
  (liftM Monad<M> (:: Monad<Error> wrap)))

(def: #export (fail message)
  (All [a] (-> Text (Error a)))
  (#;Left message))
