(;module:
  lux
  (lux (control functor
                applicative
                ["M" monad #*])))

## [Types]
(type: #export (Error a)
  (#Error Text)
  (#Success a))

## [Structures]
(struct: #export _ (Functor Error)
  (def: (map f ma)
    (case ma
      (#Error msg)    (#Error msg)
      (#Success datum) (#Success (f datum)))))

(struct: #export _ (Applicative Error)
  (def: functor Functor<Error>)

  (def: (wrap a)
    (#Success a))

  (def: (apply ff fa)
    (case ff
      (#Success f)
      (case fa
        (#Success a)
        (#Success (f a))

        (#Error msg)
        (#Error msg))

      (#Error msg)
      (#Error msg))
    ))

(struct: #export _ (Monad Error)
  (def: applicative Applicative<Error>)

  (def: (join mma)
    (case mma
      (#Error msg) (#Error msg)
      (#Success ma) ma)))

(struct: #export (ErrorT Monad<M>)
  (All [M] (-> (Monad M) (Monad (All [a] (M (Error a))))))
  (def: applicative (compA (get@ #M;applicative Monad<M>) Applicative<Error>))
  (def: (join MeMea)
    (do Monad<M>
      [eMea MeMea]
      (case eMea
        (#Error error)
        (wrap (#Error error))

        (#Success Mea)
        Mea))))

(def: #export (lift-error Monad<M>)
  (All [M a] (-> (Monad M) (-> (M a) (M (Error a)))))
  (liftM Monad<M> (:: Monad<Error> wrap)))

(def: #export (succeed value)
  (All [a] (-> a (Error a)))
  (#Success value))

(def: #export (fail message)
  (All [a] (-> Text (Error a)))
  (#Error message))
