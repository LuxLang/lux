(.module:
  lux
  (lux (control [monoid #+ Monoid]
                [functor #+ Functor]
                [eq #+ Eq]
                fold)
       (data (coll [list "list/" Fold<List>])
             [product])
       ))

(def: #export (new size)
  (All [a] (-> Nat (Array a)))
  ("lux array new" size))

(def: #export (size xs)
  (All [a] (-> (Array a) Nat))
  ("lux array size" xs))

(def: #export (read i xs)
  (All [a]
    (-> Nat (Array a) (Maybe a)))
  ("lux array get" xs i))

(def: #export (write i x xs)
  (All [a]
    (-> Nat a (Array a) (Array a)))
  ("lux array put" xs i x))

(def: #export (delete i xs)
  (All [a]
    (-> Nat (Array a) (Array a)))
  ("lux array remove" xs i))

(def: #export (copy length src-start src-array dest-start dest-array)
  (All [a] (-> Nat Nat (Array a) Nat (Array a)
               (Array a)))
  (if (n/= +0 length)
    dest-array
    (list/fold (function [offset target]
                 (case (read (n/+ offset src-start) src-array)
                   #.None
                   target
                   
                   (#.Some value)
                   (write (n/+ offset dest-start) value target)))
               dest-array
               (list.n/range +0 (n/dec length)))))

(def: #export (occupied array)
  {#.doc "Finds out how many cells in an array are occupied."}
  (All [a] (-> (Array a) Nat))
  (list/fold (function [idx count]
               (case (read idx array)
                 #.None
                 count
                 
                 (#.Some _)
                 (n/inc count)))
             +0
             (list.indices (size array))))

(def: #export (vacant array)
  {#.doc "Finds out how many cells in an array are vacant."}
  (All [a] (-> (Array a) Nat))
  (n/- (occupied array) (size array)))

(def: #export (filter p xs)
  (All [a]
    (-> (-> a Bool) (Array a) (Array a)))
  (list/fold (function [idx xs']
               (case (read idx xs)
                 #.None
                 xs'

                 (#.Some x)
                 (if (p x)
                   xs'
                   (delete idx xs'))))
             xs
             (list.indices (size xs))))

(def: #export (find p xs)
  (All [a]
    (-> (-> a Bool) (Array a) (Maybe a)))
  (let [arr-size (size xs)]
    (loop [idx +0]
      (if (n/< arr-size idx)
        (case (read idx xs)
          #.None
          (recur (n/inc idx))
          
          (#.Some x)
          (if (p x)
            (#.Some x)
            (recur (n/inc idx))))
        #.None))))

(def: #export (find+ p xs)
  {#.doc "Just like 'find', but with access to the index of each value."}
  (All [a]
    (-> (-> Nat a Bool) (Array a) (Maybe [Nat a])))
  (let [arr-size (size xs)]
    (loop [idx +0]
      (if (n/< arr-size idx)
        (case (read idx xs)
          #.None
          (recur (n/inc idx))
          
          (#.Some x)
          (if (p idx x)
            (#.Some [idx x])
            (recur (n/inc idx))))
        #.None))))

(def: #export (clone xs)
  (All [a] (-> (Array a) (Array a)))
  (let [arr-size (size xs)]
    (list/fold (function [idx ys]
                 (case (read idx xs)
                   #.None
                   ys

                   (#.Some x)
                   (write idx x ys)))
               (new arr-size)
               (list.indices arr-size))))

(def: #export (from-list xs)
  (All [a] (-> (List a) (Array a)))
  (product.right (list/fold (function [x [idx arr]]
                              [(n/inc idx) (write idx x arr)])
                            [+0 (new (list.size xs))]
                            xs)))

(def: underflow Nat (n/dec +0))

(def: #export (to-list array)
  (All [a] (-> (Array a) (List a)))
  (loop [idx (n/dec (size array))
         output #.Nil]
    (if (n/= underflow idx)
      output
      (recur (n/dec idx)
             (case (read idx array)
               (#.Some head)
               (#.Cons head output)

               #.None
               output)))))

(struct: #export (Eq<Array> Eq<a>)
  (All [a] (-> (Eq a) (Eq (Array a))))
  (def: (= xs ys)
    (let [sxs (size xs)
          sxy (size ys)]
      (and (n/= sxy sxs)
           (list/fold (function [idx prev]
                        (and prev
                             (case [(read idx xs) (read idx ys)]
                               [#.None #.None]
                               true

                               [(#.Some x) (#.Some y)]
                               (:: Eq<a> = x y)

                               _
                               false)))
                      true
                      (list.n/range +0 (n/dec sxs)))))
    ))

(struct: #export Monoid<Array> (All [a]
                                 (Monoid (Array a)))
  (def: identity (new +0))

  (def: (compose xs ys)
    (let [sxs (size xs)
          sxy (size ys)]
      (|> (new (n/+ sxy sxs))
          (copy sxs +0 xs +0)
          (copy sxy +0 ys sxs)))))

(struct: #export _ (Functor Array)
  (def: (map f ma)
    (let [arr-size (size ma)]
      (if (n/= +0 arr-size)
        (new arr-size)
        (list/fold (function [idx mb]
                     (case (read idx ma)
                       #.None
                       mb

                       (#.Some x)
                       (write idx (f x) mb)))
                   (new arr-size)
                   (list.n/range +0 (n/dec arr-size)))
        ))))

(struct: #export _ (Fold Array)
  (def: (fold f init xs)
    (let [arr-size (size xs)]
      (loop [so-far init
             idx +0]
        (if (n/< arr-size idx)
          (case (read idx xs)
            #.None
            (recur so-far (n/inc idx))

            (#.Some value)
            (recur (f value so-far) (n/inc idx)))
          so-far)))))
