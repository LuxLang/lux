(;module:
  lux
  (lux (control monad
                eq
                [order #+ Order])
       (data (coll [list "" Monad<List> "L/" Monoid<List> Fold<List>]
                   (ordered ["d" dict]))
             ["p" product]
             ["M" maybe #+ Functor<Maybe>])
       [macro]
       (macro [code]
              ["s" syntax #+ syntax: Syntax])))

(type: #export (Set a)
  (d;Dict a a))

(def: #export new
  (All [a] (-> (Order a) (Set a)))
  d;new)

(def: #export (member? set elem)
  (All [a] (-> (Set a) a Bool))
  (d;contains? elem set))

(do-template [<name> <alias>]
  [(def: #export (<name> set)
     (All [a] (-> (Set a) (Maybe a)))
     (<alias> set))]

  [min d;min]
  [max d;max]
  )

(do-template [<name> <alias>]
  [(def: #export (<name> set)
     (All [a] (-> (Set a) Nat))
     (<alias> set))]

  [size  d;size]
  [depth d;depth]
  )

(def: #export (add elem set)
  (All [a] (-> a (Set a) (Set a)))
  (d;put elem elem set))

(def: #export (remove elem set)
  (All [a] (-> a (Set a) (Set a)))
  (d;remove elem set))

(def: #export (from-list Order<a> list)
  (All [a] (-> (Order a) (List a) (Set a)))
  (L/fold add (new Order<a>) list))

(def: #export (to-list set)
  (All [a] (-> (Set a) (List a)))
  (d;keys set))

(def: #export (union left right)
  (All [a] (-> (Set a) (Set a) (Set a)))
  (L/fold add right (to-list left)))

(def: #export (intersection left right)
  (All [a] (-> (Set a) (Set a) (Set a)))
  (|> (to-list right)
      (list;filter (member? left))
      (from-list (get@ #d;order right))))

(def: #export (difference param subject)
  (All [a] (-> (Set a) (Set a) (Set a)))
  (|> (to-list subject)
      (list;filter (. not (member? param)))
      (from-list (get@ #d;order subject))))

(def: #export (sub? super sub)
  (All [a] (-> (Set a) (Set a) Bool))
  (list;every? (member? super) (to-list sub)))

(def: #export (super? sub super)
  (All [a] (-> (Set a) (Set a) Bool))
  (sub? super sub))

(struct: #export Eq<Set> (All [a] (Eq (Set a)))
  (def: (= reference sample)
    (:: (list;Eq<List> (:: sample eq))
        = (to-list reference) (to-list sample))))
