(;module:
  lux
  (lux (control [eq #+ Eq]
                [hash #*])
       (data (coll [dict]
                   [list "List/" Fold<List> Functor<List>]))))

## [Types]
(type: #export (Set a)
  (dict;Dict a a))

## [Values]
(def: #export (new Hash<a>)
  (All [a] (-> (Hash a) (Set a)))
  (dict;new Hash<a>))

(def: #export (add elem set)
  (All [a] (-> a (Set a) (Set a)))
  (dict;put elem elem set))

(def: #export (remove elem set)
  (All [a] (-> a (Set a) (Set a)))
  (dict;remove elem set))

(def: #export (member? set elem)
  (All [a] (-> (Set a) a Bool))
  (dict;contains? elem set))

(def: #export to-list
  (All [a] (-> (Set a) (List a)))
  dict;keys)

(def: #export (from-list Hash<a> xs)
  (All [a] (-> (Hash a) (List a) (Set a)))
  (List/fold add (new Hash<a>) xs))

(def: #export (union xs yx)
  (All [a] (-> (Set a) (Set a) (Set a)))
  (dict;merge xs yx))

(def: #export (difference sub base)
  (All [a] (-> (Set a) (Set a) (Set a)))
  (List/fold remove base (to-list sub)))

(def: #export (intersection filter base)
  (All [a] (-> (Set a) (Set a) (Set a)))
  (dict;select (dict;keys filter) base))

(def: #export (size set)
  (All [a] (-> (Set a) Nat))
  (dict;size set))

(def: #export (empty? set)
  (All [a] (-> (Set a) Bool))
  (n/= +0 (dict;size set)))

(def: #export (sub? super sub)
  (All [a] (-> (Set a) (Set a) Bool))
  (list;every? (member? super) (to-list sub)))

(def: #export (super? sub super)
  (All [a] (-> (Set a) (Set a) Bool))
  (sub? super sub))

## [Structures]
(struct: #export Eq<Set> (All [a] (Eq (Set a)))
  (def: (= (^@ test [Hash<a> _]) subject)
    (:: (list;Eq<List> (get@ #hash;eq Hash<a>)) = (to-list test) (to-list subject))))

(struct: #export Hash<Set> (All [a] (Hash (Set a)))
  (def: eq Eq<Set>)
  
  (def: (hash (^@ set [Hash<a> _]))
    (List/fold (function [elem acc] (n/+ (:: Hash<a> hash elem) acc))
               +0
               (to-list set))))
