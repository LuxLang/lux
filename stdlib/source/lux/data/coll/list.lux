(.module:
  lux
  (lux (control [monoid #+ Monoid]
                [functor #+ Functor]
                [apply #+ Apply]
                [monad #+ do Monad]
                [eq #+ Eq]
                [fold])
       (data [number "nat/" Codec<Text,Nat>]
             bool
             [product])))

## [Types]
## (type: (List a)
##   #Nil
##   (#Cons a (List a)))

## [Functions]
(struct: #export _ (fold.Fold List)
  (def: (fold f init xs)
    (case xs
      #.Nil
      init

      (#.Cons [x xs'])
      (fold f (f x init) xs'))))

(open Fold<List>)

(def: #export (reverse xs)
  (All [a]
    (-> (List a) (List a)))
  (fold (function (_ head tail) (#.Cons head tail))
        #.Nil
        xs))

(def: #export (filter p xs)
  (All [a]
    (-> (-> a Bool) (List a) (List a)))
  (case xs
    #.Nil
    #.Nil
    
    (#.Cons [x xs'])
    (if (p x)
      (#.Cons [x (filter p xs')])
      (filter p xs'))))

(def: #export (partition p xs)
  {#.doc "Divide the list into all elements that satisfy a predicate, and all elements that do not."}
  (All [a] (-> (-> a Bool) (List a) [(List a) (List a)]))
  [(filter p xs) (filter (complement p) xs)])

(def: #export (as-pairs xs)
  {#.doc "Cut the list into pairs of 2.

          Caveat emptor: If the list has an uneven number of elements, the last one will be skipped."}
  (All [a] (-> (List a) (List [a a])))
  (case xs
    (^ (#.Cons [x1 (#.Cons [x2 xs'])]))
    (#.Cons [[x1 x2] (as-pairs xs')])

    _
    #.Nil))

(do-template [<name> <then> <else>]
  [(def: #export (<name> n xs)
     (All [a]
       (-> Nat (List a) (List a)))
     (if (n/> +0 n)
       (case xs
         #.Nil
         #.Nil
         
         (#.Cons [x xs'])
         <then>)
       <else>))]
  
  [take (#.Cons [x (take (n/dec n) xs')]) #.Nil]
  [drop (drop (n/dec n) xs') xs]
  )

(do-template [<name> <then> <else>]
  [(def: #export (<name> p xs)
     (All [a]
       (-> (-> a Bool) (List a) (List a)))
     (case xs
       #.Nil
       #.Nil
       
       (#.Cons [x xs'])
       (if (p x)
         <then>
         <else>)))]

  [take-while (#.Cons [x (take-while p xs')]) #.Nil]
  [drop-while (drop-while p xs') xs]
  )

(def: #export (split n xs)
  (All [a]
    (-> Nat (List a) [(List a) (List a)]))
  (if (n/> +0 n)
    (case xs
      #.Nil
      [#.Nil #.Nil]
      
      (#.Cons [x xs'])
      (let [[tail rest] (split (n/dec n) xs')]
        [(#.Cons [x tail]) rest]))
    [#.Nil xs]))

(def: (split-with' p ys xs)
  (All [a]
    (-> (-> a Bool) (List a) (List a) [(List a) (List a)]))
  (case xs
    #.Nil
    [ys xs]

    (#.Cons [x xs'])
    (if (p x)
      (split-with' p (#.Cons [x ys]) xs')
      [ys xs])))

(def: #export (split-with p xs)
  {#.doc "Segment the list by using a predicate to tell when to cut."}
  (All [a]
    (-> (-> a Bool) (List a) [(List a) (List a)]))
  (let [[ys' xs'] (split-with' p #.Nil xs)]
    [(reverse ys') xs']))

(def: #export (split-all n xs)
  {#.doc "Segment the list in chunks of size n."}
  (All [a] (-> Nat (List a) (List (List a))))
  (case xs
    #.Nil
    (list)

    _
    (let [[pre post] (split n xs)]
      (#.Cons pre (split-all n post)))))

(def: #export (repeat n x)
  {#.doc "A list of the value x, repeated n times."}
  (All [a]
    (-> Nat a (List a)))
  (if (n/> +0 n)
    (#.Cons [x (repeat (n/dec n) x)])
    #.Nil))

(def: (iterate' f x)
  (All [a]
    (-> (-> a (Maybe a)) a (List a)))
  (case (f x)
    (#.Some x')
    (list& x (iterate' f x'))

    #.None
    (list)))

(def: #export (iterate f x)
  {#.doc "Generates a list element by element until the function returns #.None."}
  (All [a]
    (-> (-> a (Maybe a)) a (List a)))
  (case (f x)
    (#.Some x')
    (list& x (iterate' f x'))

    #.None
    (list x)))

(def: #export (find p xs)
  {#.doc "Returns the first value in the list for which the predicate is true."}
  (All [a]
    (-> (-> a Bool) (List a) (Maybe a)))
  (case xs
    #.Nil
    #.None

    (#.Cons [x xs'])
    (if (p x)
      (#.Some x)
      (find p xs'))))

(def: #export (interpose sep xs)
  {#.doc "Puts a value between every two elements in the list."}
  (All [a]
    (-> a (List a) (List a)))
  (case xs
    #.Nil
    xs

    (#.Cons [x #.Nil])
    xs

    (#.Cons [x xs'])
    (#.Cons [x (#.Cons [sep (interpose sep xs')])])))

(def: #export (size list)
  (All [a] (-> (List a) Nat))
  (fold (function (_ _ acc) (n/+ +1 acc)) +0 list))

(do-template [<name> <init> <op>]
  [(def: #export (<name> p xs)
     (All [a]
       (-> (-> a Bool) (List a) Bool))
     (loop [xs xs]
       (case xs
         #.Nil
         <init>

         (#.Cons x xs')
         (case (p x)
           <init>
           (recur xs')

           output
           output))))]

  [every? true  and]
  [any?   false or]
  )

(def: #export (nth i xs)
  {#.doc "Fetches the element at the specified index."}
  (All [a]
    (-> Nat (List a) (Maybe a)))
  (case xs
    #.Nil
    #.None

    (#.Cons [x xs'])
    (if (n/= +0 i)
      (#.Some x)
      (nth (n/dec i) xs'))))

## [Structures]
(struct: #export (Eq<List> Eq<a>)
  (All [a] (-> (Eq a) (Eq (List a))))
  (def: (= xs ys)
    (case [xs ys]
      [#.Nil #.Nil]
      true

      [(#.Cons x xs') (#.Cons y ys')]
      (and (:: Eq<a> = x y)
           (= xs' ys'))

      [_ _]
      false
      )))

(struct: #export Monoid<List> (All [a]
                                (Monoid (List a)))
  (def: identity #.Nil)
  (def: (compose xs ys)
    (case xs
      #.Nil          ys
      (#.Cons x xs') (#.Cons x (compose xs' ys)))))

(open Monoid<List>)

(struct: #export _ (Functor List)
  (def: (map f ma)
    (case ma
      #.Nil          #.Nil
      (#.Cons a ma') (#.Cons (f a) (map f ma')))))

(open Functor<List>)

(struct: #export _ (Apply List)
  (def: functor Functor<List>)

  (def: (apply ff fa)
    (case ff
      #.Nil
      #.Nil
      
      (#.Cons f ff')
      (compose (map f fa) (apply ff' fa)))))

(struct: #export _ (Monad List)
  (def: functor Functor<List>)

  (def: (wrap a)
    (#.Cons a #.Nil))

  (def: join (|>> reverse (fold compose identity))))

## [Functions]
(def: #export (sort < xs)
  (All [a] (-> (-> a a Bool) (List a) (List a)))
  (case xs
    #.Nil
    (list)
    
    (#.Cons x xs')
    (let [[pre post] (fold (function (_ x' [pre post])
                             (if (< x x')
                               [(#.Cons x' pre) post]
                               [pre (#.Cons x' post)]))
                           [(list) (list)]
                           xs')]
      ($_ compose (sort < pre) (list x) (sort < post)))))

(do-template [<name> <type> <comp> <inc>]
  [(def: #export (<name> from to)
     {#.doc "Generates an inclusive interval of values [from, to]."}
     (-> <type> <type> (List <type>))
     (if (<comp> to from)
       (list& from (<name> (<inc> from) to))
       (list)))]

  [i/range Int i/<= i/inc]
  [n/range Nat n/<= n/inc]
  )

(def: #export (empty? xs)
  (All [a] (-> (List a) Bool))
  (case xs
    #.Nil true
    _     false))

(def: #export (member? eq xs x)
  (All [a] (-> (Eq a) (List a) a Bool))
  (case xs
    #.Nil           false
    (#.Cons x' xs') (or (:: eq = x x')
                        (member? eq xs' x))))

(do-template [<name> <output> <side> <doc>]
  [(def: #export (<name> xs)
     {#.doc <doc>}
     (All [a] (-> (List a) (Maybe <output>)))
     (case xs
       #.Nil
       #.None

       (#.Cons x xs')
       (#.Some <side>)))]

  [head a        x   "Returns the first element of a list."]
  [tail (List a) xs' "For a list of size N, returns the N-1 elements after the first one."]
  )

## [Syntax]
(def: (symbol$ name)
  (-> Text Code)
  [["" +0 +0] (#.Symbol "" name)])

(macro: #export (zip tokens state)
  {#.doc (doc "Create list zippers with the specified number of input lists."
              (def: #export zip2 (zip +2))
              (def: #export zip3 (zip +3))
              ((zip +3) xs ys zs))}
  (case tokens
    (^ (list [_ (#.Nat num-lists)]))
    (if (n/> +0 num-lists)
      (let [(^open) Functor<List>
            indices (n/range +0 (n/dec num-lists))
            type-vars (: (List Code) (map (|>> nat/encode symbol$) indices))
            zip-type (` (All [(~+ type-vars)]
                          (-> (~+ (map (: (-> Code Code) (function (_ var) (` (List (~ var)))))
                                       type-vars))
                              (List [(~+ type-vars)]))))
            vars+lists (|> indices
                           (map n/inc)
                           (map (function (_ idx)
                                  (let [base (nat/encode idx)]
                                    [(symbol$ base)
                                     (symbol$ ("lux text concat" base "'"))]))))
            pattern (` [(~+ (map (function (_ [v vs]) (` (#.Cons (~ v) (~ vs))))
                                 vars+lists))])
            g!step (symbol$ "\tstep\t")
            g!blank (symbol$ "\t_\t")
            list-vars (map product.right vars+lists)
            code (` (: (~ zip-type)
                       (function ((~ g!step) (~+ list-vars))
                         (case [(~+ list-vars)]
                           (~ pattern)
                           (#.Cons [(~+ (map product.left vars+lists))]
                                   ((~ g!step) (~+ list-vars)))

                           (~ g!blank)
                           #.Nil))))]
        (#.Right [state (list code)]))
      (#.Left "Cannot zip 0 lists."))

    _
    (#.Left "Wrong syntax for zip")))

(def: #export zip2 (zip +2))
(def: #export zip3 (zip +3))

(macro: #export (zip-with tokens state)
  {#.doc (doc "Create list zippers with the specified number of input lists."
              (def: #export zip2-with (zip-with +2))
              (def: #export zip3-with (zip-with +3))
              ((zip-with +2) i/+ xs ys))}
  (case tokens
    (^ (list [_ (#.Nat num-lists)]))
    (if (n/> +0 num-lists)
      (let [(^open) Functor<List>
            indices (n/range +0 (n/dec num-lists))
            g!return-type (symbol$ "\treturn-type\t")
            g!func (symbol$ "\tfunc\t")
            type-vars (: (List Code) (map (|>> nat/encode symbol$) indices))
            zip-type (` (All [(~+ type-vars) (~ g!return-type)]
                          (-> (-> (~+ type-vars) (~ g!return-type))
                              (~+ (map (: (-> Code Code) (function (_ var) (` (List (~ var)))))
                                       type-vars))
                              (List (~ g!return-type)))))
            vars+lists (|> indices
                           (map n/inc)
                           (map (function (_ idx)
                                  (let [base (nat/encode idx)]
                                    [(symbol$ base)
                                     (symbol$ ("lux text concat" base "'"))]))))
            pattern (` [(~+ (map (function (_ [v vs]) (` (#.Cons (~ v) (~ vs))))
                                 vars+lists))])
            g!step (symbol$ "\tstep\t")
            g!blank (symbol$ "\t_\t")
            list-vars (map product.right vars+lists)
            code (` (: (~ zip-type)
                       (function ((~ g!step) (~ g!func) (~+ list-vars))
                         (case [(~+ list-vars)]
                           (~ pattern)
                           (#.Cons ((~ g!func) (~+ (map product.left vars+lists)))
                                   ((~ g!step) (~ g!func) (~+ list-vars)))

                           (~ g!blank)
                           #.Nil))))]
        (#.Right [state (list code)]))
      (#.Left "Cannot zip-with 0 lists."))

    _
    (#.Left "Wrong syntax for zip-with")))

(def: #export zip2-with (zip-with +2))
(def: #export zip3-with (zip-with +3))

(def: #export (last xs)
  (All [a] (-> (List a) (Maybe a)))
  (case xs
    #.Nil
    #.None

    (#.Cons x #.Nil)
    (#.Some x)
    
    (#.Cons x xs')
    (last xs')))

(def: #export (inits xs)
  {#.doc "For a list of size N, returns the first N-1 elements.

          Empty lists will result in a #.None value being returned instead."}
  (All [a] (-> (List a) (Maybe (List a))))
  (case xs
    #.Nil
    #.None

    (#.Cons x #.Nil)
    (#.Some #.Nil)
    
    (#.Cons x xs')
    (case (inits xs')
      #.None
      (undefined)

      (#.Some tail)
      (#.Some (#.Cons x tail)))
    ))

(def: #export (concat xss)
  (All [a] (-> (List (List a)) (List a)))
  (:: Monad<List> join xss))

(struct: #export (ListT Monad<M>)
  (All [M] (-> (Monad M) (Monad (All [a] (M (List a))))))

  (def: functor (functor.compose (get@ #monad.functor Monad<M>) Functor<List>))

  (def: wrap (|>> (:: Monad<List> wrap) (:: Monad<M> wrap)))
  
  (def: (join MlMla)
    (do Monad<M>
      [lMla MlMla
       ## TODO: Remove this version ASAP and use one below.
       lla (: (($ +0) (List (List ($ +1))))
              (monad.seq @ lMla))
       ## lla (monad.seq @ lMla)
       ]
      (wrap (concat lla)))))

(def: #export (lift Monad<M>)
  (All [M a] (-> (Monad M) (-> (M a) (M (List a)))))
  (monad.lift Monad<M> (:: Monad<List> wrap)))

(def: (enumerate' idx xs)
  (All [a] (-> Nat (List a) (List [Nat a])))
  (case xs
    #.Nil
    #.Nil

    (#.Cons x xs')
    (#.Cons [idx x] (enumerate' (n/inc idx) xs'))))

(def: #export (enumerate xs)
  {#.doc "Pairs every element in the list with its index, starting at 0."}
  (All [a] (-> (List a) (List [Nat a])))
  (enumerate' +0 xs))

(def: #export (indices size)
  {#.doc "Produces all the valid indices for a given size."}
  (All [a] (-> Nat (List Nat)))
  (if (n/= +0 size)
    (list)
    (|> size n/dec (n/range +0))))
