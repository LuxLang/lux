(;module:
  lux
  (lux (control eq)
       (data (coll [list "List/" Monoid<List>]))))

## [Types]
(type: #export (Queue a)
  {#front (List a)
   #rear (List a)})

## [Values]
(def: #export empty
  Queue
  {#front (list)
   #rear (list)})

(def: #export (from-list entries)
  (All [a] (-> (List a) (Queue a)))
  {#front entries
   #rear (list)})

(def: #export (to-list queue)
  (All [a] (-> (Queue a) (List a)))
  (let [(^slots [#front #rear]) queue]
    (List/append front (list;reverse rear))))

(def: #export peek
  (All [a] (-> (Queue a) (Maybe a)))
  (|>. (get@ #front) list;head))

(def: #export (size queue)
  (All [a] (-> (Queue a) Nat))
  (let [(^slots [#front #rear]) queue]
    (n.+ (list;size front)
         (list;size rear))))

(def: #export empty?
  (All [a] (-> (Queue a) Bool))
  (|>. (get@ [#front]) list;empty?))

(def: #export (member? Eq<a> queue member)
  (All [a] (-> (Eq a) (Queue a) a Bool))
  (let [(^slots [#front #rear]) queue]
    (or (list;member? Eq<a> front member)
        (list;member? Eq<a> rear member))))

(def: #export (pop queue)
  (All [a] (-> (Queue a) (Queue a)))
  (case (get@ #front queue)
    (^ (list)) ## Empty...
    queue

    (^ (list _)) ## Front has dried up...
    (|> queue
        (set@ #front (list;reverse (get@ #rear queue)))
        (set@ #rear (list)))
    
    (^ (list& _ front')) ## Consume front!
    (|> queue
        (set@ #front front'))))

(def: #export (push val queue)
  (All [a] (-> a (Queue a) (Queue a)))
  (case (get@ #front queue)
    #;Nil
    (set@ #front (list val) queue)

    _
    (update@ #rear (|>. (#;Cons val)) queue)))

## [Structures]
(struct: #export (Eq<Queue> Eq<a>)
  (All [a] (-> (Eq a) (Eq (Queue a))))
  (def: (= qx qy)
    (:: (list;Eq<List> Eq<a>) = (to-list qx) (to-list qy))))
