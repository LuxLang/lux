(;module:
  lux
  (lux (control functor
                comonad)
       (data (coll [list "L/" Monad<List> Fold<List> Monoid<List>]
                   (tree [rose #+ Tree "T/" Functor<Tree>])
                   [stack #+ Stack])
             [maybe "M/" Monad<Maybe>])
       [macro]
       (macro [code]
              ["s" syntax #+ syntax: Syntax])))

## Adapted from the clojure.zip namespace in the Clojure standard library.

## [Types]
(type: #export (Zipper a)
  {#;doc "Tree zippers, for easy navigation and editing over trees."}
  {#parent (Maybe (Zipper a))
   #lefts (Stack (Tree a))
   #rights (Stack (Tree a))
   #node (Tree a)})

## [Values]
(def: #export (zip tree)
  (All [a] (-> (Tree a) (Zipper a)))
  {#parent #;None
   #lefts stack;empty
   #rights stack;empty
   #node tree})

(def: #export (unzip zipper)
  (All [a] (-> (Zipper a) (Tree a)))
  (get@ #node zipper))

(def: #export (value zipper)
  (All [a] (-> (Zipper a) a))
  (|> zipper (get@ [#node #rose;value])))

(def: #export (children zipper)
  (All [a] (-> (Zipper a) (List (Tree a))))
  (|> zipper (get@ [#node #rose;children])))

(def: #export (branch? zipper)
  (All [a] (-> (Zipper a) Bool))
  (|> zipper children list;empty? not))

(def: #export (leaf? zipper)
  (All [a] (-> (Zipper a) Bool))
  (|> zipper branch? not))

(def: #export (end? zipper)
  (All [a] (-> (Zipper a) Bool))
  (and (list;empty? (get@ #rights zipper))
       (list;empty? (children zipper))))

(def: #export (root? zipper)
  (All [a] (-> (Zipper a) Bool))
  (case (get@ #parent zipper)
    #;None
    true

    _
    false))

(def: #export (down zipper)
  (All [a] (-> (Zipper a) (Zipper a)))
  (case (children zipper)
    #;Nil
    zipper

    (#;Cons chead ctail)
    {#parent (#;Some zipper)
     #lefts stack;empty
     #rights ctail
     #node chead}))

(def: #export (up zipper)
  (All [a] (-> (Zipper a) (Zipper a)))
  (case (get@ #parent zipper)
    #;None
    zipper

    (#;Some parent)
    (|> parent
        (update@ #node (: (-> (Tree ($ +0)) (Tree ($ +0)))
                          (function [node]
                            (set@ #rose;children (L/compose (list;reverse (get@ #lefts zipper))
                                                            (#;Cons (get@ #node zipper)
                                                                    (get@ #rights zipper)))
                                  node)))))))

(def: #export (root zipper)
  (All [a] (-> (Zipper a) (Zipper a)))
  (loop [zipper zipper]
    (case (get@ #parent zipper)
      #;None     zipper
      (#;Some _) (recur (up zipper)))))

(do-template [<one-name> <all-name> <side> <op-side>]
  [(def: #export (<one-name> zipper)
     (All [a] (-> (Zipper a) (Zipper a)))
     (case (get@ <side> zipper)
       #;Nil
       zipper

       (#;Cons next side')
       (|> zipper
           (update@ <op-side> (function [op-side]
                                (#;Cons (get@ #node zipper) op-side)))
           (set@ <side> side')
           (set@ #node next))))

   (def: #export (<all-name> zipper)
     (All [a] (-> (Zipper a) (Zipper a)))
     (L/fold (function [_] <one-name>) zipper (get@ <side> zipper)))]

  [right rightmost #rights #lefts]
  [left  leftmost  #lefts  #rights]
  )

(do-template [<name> <h-side> <h-op> <v-op>]
  [(def: #export (<name> zipper)
     (All [a] (-> (Zipper a) (Zipper a)))
     (case (get@ <h-side> zipper)
       #;Nil
       (<v-op> zipper)

       _
       (<h-op> zipper)))]

  [next #rights right down]
  [prev #lefts  left up]
  )

(def: #export (set value zipper)
  (All [a] (-> a (Zipper a) (Zipper a)))
  (set@ [#node #rose;value] value zipper))

(def: #export (update f zipper)
  (All [a] (-> (-> a a) (Zipper a) (Zipper a)))
  (update@ [#node #rose;value] f zipper))

(def: #export (prepend-child value zipper)
  (All [a] (-> a (Zipper a) (Zipper a)))
  (update@ [#node #rose;children]
           (function [children]
             (list& (: (Tree ($ +0))
                       (rose;tree [value {}]))
                    children))
           zipper))

(def: #export (append-child value zipper)
  (All [a] (-> a (Zipper a) (Zipper a)))
  (update@ [#node #rose;children]
           (function [children]
             (L/compose children
                        (list (: (Tree ($ +0))
                                 (rose;tree [value {}])))))
           zipper))

(def: #export (remove zipper)
  (All [a] (-> (Zipper a) (Maybe (Zipper a))))
  (case (get@ #lefts zipper)
    #;Nil
    (case (get@ #parent zipper)
      #;None
      #;None

      (#;Some next)
      (#;Some (|> next
                  (update@ [#node #rose;children] (|>. list;tail (maybe;default (list)))))))

    (#;Cons next side)
    (#;Some (|> zipper
                (set@ #lefts side)
                (set@ #node next)))))

(do-template [<name> <side>]
  [(def: #export (<name> value zipper)
     (All [a] (-> a (Zipper a) (Maybe (Zipper a))))
     (case (get@ #parent zipper)
       #;None
       #;None

       _
       (#;Some (|> zipper
                   (update@ <side> (function [side]
                                     (#;Cons (: (Tree ($ +0))
                                                (rose;tree [value {}]))
                                             side)))))))]

  [insert-left  #lefts]
  [insert-right #rights]
  )

(struct: #export _ (Functor Zipper)
  (def: (map f fa)
    {#parent (|> fa (get@ #parent) (M/map (map f)))
     #lefts (|> fa (get@ #lefts) (L/map (T/map f)))
     #rights (|> fa (get@ #rights) (L/map (T/map f)))
     #node (T/map f (get@ #node fa))}))

## (struct: #export _ (CoMonad Zipper)
##   (def: functor Functor<Zipper>)

##   (def: unwrap (get@ [#node #rose;value]))

##   (def: (split wa)
##     (let [tree-splitter (function tree-splitter [tree]
##                           {#rose;value (zip tree)
##                            #rose;children (L/map tree-splitter
##                                                  (get@ #rose;children tree))})]
##       {#parent (|> wa (get@ #parent) (M/map split))
##        #lefts (|> wa (get@ #lefts) (L/map tree-splitter))
##        #rights (|> wa (get@ #rights) (L/map tree-splitter))
##        #node (|> fa (get@ #node) tree-splitter)})))
