(;module:
  lux
  (lux (control ["p" parser]
                ["ex" exception #+ exception:])
       (data ["E" error]))
  (.. ["T" rose]
      ["Z" zipper]))

(type: #export (Parser t a)
  (p;Parser (Z;Zipper t) a))

(def: #export (run-zipper zipper parser)
  (All [t a] (-> (Z;Zipper t) (Parser t a) (E;Error a)))
  (case (p;run zipper parser)
    (#E;Success [zipper output])
    (#E;Success output)

    (#E;Error error)
    (#E;Error error)))

(def: #export (run tree parser)
  (All [t a] (-> (T;Tree t) (Parser t a) (E;Error a)))
  (run-zipper (Z;zip tree) parser))

(def: #export value
  (All [t] (Parser t t))
  (function [zipper]
    (#E;Success [zipper (Z;value zipper)])))

(exception: #export Cannot-Move-Further)

(do-template [<name> <direction>]
  [(def: #export <name>
     (All [t] (Parser t []))
     (function [zipper]
       (let [next (<direction> zipper)]
         (if (is zipper next)
           (ex;throw Cannot-Move-Further "")
           (#E;Success [next []])))))]

  [up        Z;up]
  [down      Z;down]
  [left      Z;left]
  [right     Z;right]
  [root      Z;root]
  [rightmost Z;rightmost]
  [leftmost  Z;leftmost]
  [next      Z;next]
  [prev      Z;prev]
  )
