(;module:
  lux
  (lux (control ["m" monoid])
       (data text/format)))

(type: #export (Node m a)
  (#Leaf m a)
  (#Branch m (Node m a) (Node m a)))

(type: #export (Fingers m a)
  {#monoid (m;Monoid m)
   #tree (Node m a)})

(def: #export (tag fingers)
  (All [m a] (-> (Fingers m a) m))
  (case (get@ #tree fingers)
    (^or (#Leaf tag _) (#Branch tag _ _))
    tag))

(def: #export (value fingers)
  (All [m a] (-> (Fingers m a) a))
  (case (get@ #tree fingers)
    (#Leaf tag value)
    value

    (#Branch tag left right)
    (value (set@ #tree left fingers))))

(def: #export (branch left right)
  (All [m a] (-> (Fingers m a) (Fingers m a) (Fingers m a)))
  (let [Monoid<m> (get@ #monoid right)]
    {#monoid Monoid<m>
     #tree (#Branch (:: Monoid<m> append (tag left) (tag right))
                    (get@ #tree left)
                    (get@ #tree right))}))

(def: #export (search pred fingers)
  (All [m a] (-> (-> m Bool) (Fingers m a) (Maybe a)))
  (let [tag/append (get@ [#monoid #m;append] fingers)]
    (if (pred (tag fingers))
      (loop [_tag (get@ [#monoid #m;unit] fingers)
             _node (get@ #tree fingers)]
        (case _node
          (#Leaf _ value)
          (#;Some value)

          (#Branch _ left right)
          (let [shifted-tag (tag/append _tag (tag (set@ #tree left fingers)))]
            (if (pred shifted-tag)
              (recur _tag left)
              (recur shifted-tag right)))))
      #;None)))
