(;module:
  lux
  (lux (control functor
                monad
                eq
                ["p" parser])
       (data (coll [list "L/" Monad<List>]))
       [macro]
       (macro [code]
              ["s" syntax #+ syntax: Syntax])))

## [Types]
(type: #export (Tree a)
  {#value a
   #children (List (Tree a))})

## [Values]
(def: #export (flatten tree)
  (All [a] (-> (Tree a) (List a)))
  (#;Cons (get@ #value tree)
          (L/join (L/map flatten (get@ #children tree)))))

(def: #export (leaf value)
  (All [a] (-> a (Tree a)))
  {#value value
   #children (list)})

(def: #export (branch value children)
  (All [a] (-> a (List (Tree a)) (Tree a)))
  {#value value
   #children children})

## [Syntax]
(type: #rec Tree-Code
  [Code (List Tree-Code)])

(def: tree^
  (Syntax Tree-Code)
  (|> (|>. p;some s;record (p;seq s;any))
      p;rec
      p;some
      s;record
      (p;seq s;any)
      s;tuple))

(syntax: #export (tree [root tree^])
  {#;doc (doc "Tree literals."
              (tree Int [10 {20 {}
                             30 {}
                             40 {}}]))}
  (wrap (list (` (~ (loop [[value children] root]
                      (` {#value (~ value)
                          #children (list (~@ (L/map recur children)))})))))))

## [Structs]
(struct: #export (Eq<Tree> Eq<a>) (All [a] (-> (Eq a) (Eq (Tree a))))
  (def: (= tx ty)
    (and (:: Eq<a> = (get@ #value tx) (get@ #value ty))
         (:: (list;Eq<List> (Eq<Tree> Eq<a>)) = (get@ #children tx) (get@ #children ty)))))

(struct: #export _ (Functor Tree)
  (def: (map f fa)
    {#value (f (get@ #value fa))
     #children (L/map (map f)
                      (get@ #children fa))}))
