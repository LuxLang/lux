(.module:
  lux
  (lux (control [equivalence (#+ Equivalence)]
                [order (#+ Order)])
       (data (collection [list "list/" Fold<List>]
                         (dictionary ["//" ordered])))
       (type abstract)))

(abstract: #export (Set a)
  {}
  
  (//.Dictionary a a)

  (def: #export new
    (All [a] (-> (Order a) (Set a)))
    (|>> //.new :abstraction))

  (def: #export (member? set elem)
    (All [a] (-> (Set a) a Bool))
    (|> set :representation (//.contains? elem)))

  (do-template [<name> <alias>]
    [(def: #export <name>
       (All [a] (-> (Set a) (Maybe a)))
       (|>> :representation <alias>))]

    [min //.min]
    [max //.max]
    )

  (do-template [<name> <alias>]
    [(def: #export <name>
       (-> (Set Any) Nat)
       (|>> :representation <alias>))]

    [size  //.size]
    [depth //.depth]
    )

  (def: #export (add elem set)
    (All [a] (-> a (Set a) (Set a)))
    (|> set :representation (//.put elem elem) :abstraction))

  (def: #export (remove elem set)
    (All [a] (-> a (Set a) (Set a)))
    (|> set :representation (//.remove elem) :abstraction))

  (def: #export to-list
    (All [a] (-> (Set a) (List a)))
    (|>> :representation //.keys))

  (def: #export (from-list Order<a> list)
    (All [a] (-> (Order a) (List a) (Set a)))
    (list/fold add (new Order<a>) list))

  (def: #export (union left right)
    (All [a] (-> (Set a) (Set a) (Set a)))
    (list/fold ..add right (..to-list left)))

  (def: #export (intersection left right)
    (All [a] (-> (Set a) (Set a) (Set a)))
    (|> (..to-list right)
        (list.filter (..member? left))
        (..from-list (get@ #//.order (:representation right)))))

  (def: #export (difference param subject)
    (All [a] (-> (Set a) (Set a) (Set a)))
    (|> (..to-list subject)
        (list.filter (|>> (..member? param) not))
        (..from-list (get@ #//.order (:representation subject)))))

  (structure: #export Equivalence<Set> (All [a] (Equivalence (Set a)))
    (def: (= reference sample)
      (:: (list.Equivalence<List> (:: (:representation sample) eq))
          = (..to-list reference) (..to-list sample))))
  )

(def: #export (sub? super sub)
  (All [a] (-> (Set a) (Set a) Bool))
  (|> sub
      ..to-list
      (list.every? (..member? super))))

(def: #export (super? sub super)
  (All [a] (-> (Set a) (Set a) Bool))
  (sub? super sub))
