(.module:
  [lux #*
   [data
    [collection
     [list]]]])

## [Types]
(type: #export (Stack a)
  (List a))

## [Values]
(def: #export empty
  Stack
  (list))

(def: #export (size stack)
  (All [a] (-> (Stack a) Nat))
  (list.size stack))

(def: #export (empty? stack)
  (All [a] (-> (Stack a) Bool))
  (list.empty? stack))

(def: #export (peek stack)
  (All [a] (-> (Stack a) (Maybe a)))
  (case stack
    #.Nil
    #.None
    
    (#.Cons value _)
    (#.Some value)))

(def: #export (pop stack)
  (All [a] (-> (Stack a) (Stack a)))
  (case stack
    #.Nil
    #.Nil
    
    (#.Cons _ stack')
    stack'))

(def: #export (push value stack)
  (All [a] (-> a (Stack a) (Stack a)))
  (#.Cons value stack))
