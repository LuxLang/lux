(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]
    [functor (#+ Functor)]]
   [data
    [collection
     ["//" list]]]])

(type: #export (Stack a)
  (List a))

(def: #export empty
  Stack
  (list))

(def: #export size
  (All [a] (-> (Stack a) Nat))
  //.size)

(def: #export empty?
  (All [a] (-> (Stack a) Bit))
  //.empty?)

(def: #export (peek stack)
  (All [a] (-> (Stack a) (Maybe a)))
  (case stack
    #.Nil
    #.None
    
    (#.Cons value _)
    (#.Some value)))

(def: #export (pop stack)
  (All [a] (-> (Stack a) (Maybe (Stack a))))
  (case stack
    #.Nil
    #.None
    
    (#.Cons _ stack')
    (#.Some stack')))

(def: #export (push value stack)
  (All [a] (-> a (Stack a) (Stack a)))
  (#.Cons value stack))

(def: #export equivalence
  (All [a]
    (-> (Equivalence a)
        (Equivalence (Stack a))))
  //.equivalence)

(def: #export functor
  (Functor Stack)
  //.functor)
