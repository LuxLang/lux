(.module:
  [lux #*
   [control ["m" monoid]]
   [data [text format]]])

(type: #export (Node m a)
  (#Leaf m a)
  (#Branch m (Node m a) (Node m a)))

(type: #export (Tree m a)
  {#monoid (m.Monoid m)
   #node (Node m a)})

(def: #export (tag tree)
  (All [m a] (-> (Tree m a) m))
  (case (get@ #node tree)
    (^or (#Leaf tag _) (#Branch tag _ _))
    tag))

(def: #export (value tree)
  (All [m a] (-> (Tree m a) a))
  (case (get@ #node tree)
    (#Leaf tag value)
    value

    (#Branch tag left right)
    (value (set@ #node left tree))))

(def: #export (branch left right)
  (All [m a] (-> (Tree m a) (Tree m a) (Tree m a)))
  (let [Monoid<m> (get@ #monoid right)]
    {#monoid Monoid<m>
     #node (#Branch (:: Monoid<m> compose (tag left) (tag right))
                    (get@ #node left)
                    (get@ #node right))}))

(def: #export (search pred tree)
  (All [m a] (-> (-> m Bit) (Tree m a) (Maybe a)))
  (let [tag/compose (get@ [#monoid #m.compose] tree)]
    (if (pred (tag tree))
      (loop [_tag (get@ [#monoid #m.identity] tree)
             _node (get@ #node tree)]
        (case _node
          (#Leaf _ value)
          (#.Some value)

          (#Branch _ left right)
          (let [shifted-tag (tag/compose _tag (tag (set@ #node left tree)))]
            (if (pred shifted-tag)
              (recur _tag left)
              (recur shifted-tag right)))))
      #.None)))

(def: #export (found? pred tree)
  (All [m a] (-> (-> m Bit) (Tree m a) Bit))
  (case (search pred tree)
    (#.Some _)
    true

    #.None
    false))
