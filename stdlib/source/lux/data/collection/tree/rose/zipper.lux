(.module:
  [lux #*
   [control
    functor
    comonad]
   [data
    ["." maybe ("maybe/." Monad<Maybe>)]
    [collection
     ["." list ("list/." Functor<List> Fold<List> Monoid<List>)]
     ["." stack (#+ Stack)]]]
   ["." macro
    ["." code]
    ["s" syntax (#+ syntax: Syntax)]]]
  ["." // (#+ Tree) ("tree/." Functor<Tree>)])

## Adapted from the clojure.zip namespace in the Clojure standard library.

## [Types]
(type: #export (Zipper a)
  {#.doc "Tree zippers, for easy navigation and editing over trees."}
  {#parent (Maybe (Zipper a))
   #lefts (Stack (Tree a))
   #rights (Stack (Tree a))
   #node (Tree a)})

## [Values]
(def: #export (zip tree)
  (All [a] (-> (Tree a) (Zipper a)))
  {#parent #.None
   #lefts stack.empty
   #rights stack.empty
   #node tree})

(def: #export (unzip zipper)
  (All [a] (-> (Zipper a) (Tree a)))
  (get@ #node zipper))

(def: #export (value zipper)
  (All [a] (-> (Zipper a) a))
  (|> zipper (get@ [#node #//.value])))

(def: #export (children zipper)
  (All [a] (-> (Zipper a) (List (Tree a))))
  (|> zipper (get@ [#node #//.children])))

(def: #export (branch? zipper)
  (All [a] (-> (Zipper a) Bit))
  (|> zipper children list.empty? not))

(def: #export (leaf? zipper)
  (All [a] (-> (Zipper a) Bit))
  (|> zipper branch? not))

(def: #export (end? zipper)
  (All [a] (-> (Zipper a) Bit))
  (and (list.empty? (get@ #rights zipper))
       (list.empty? (children zipper))))

(def: #export (root? zipper)
  (All [a] (-> (Zipper a) Bit))
  (case (get@ #parent zipper)
    #.None
    #1

    _
    #0))

(def: #export (down zipper)
  (All [a] (-> (Zipper a) (Zipper a)))
  (case (children zipper)
    #.Nil
    zipper

    (#.Cons chead ctail)
    {#parent (#.Some zipper)
     #lefts stack.empty
     #rights ctail
     #node chead}))

(def: #export (up zipper)
  (All [a] (-> (Zipper a) (Zipper a)))
  (case (get@ #parent zipper)
    #.None
    zipper

    (#.Some parent)
    (|> parent
        ## TODO: Remove once new-luxc becomes the standard compiler.
        (update@ #node (: (-> (Tree ($ +0)) (Tree ($ +0)))
                          (function (_ node)
                            (set@ #//.children (list/compose (list.reverse (get@ #lefts zipper))
                                                             (#.Cons (get@ #node zipper)
                                                                     (get@ #rights zipper)))
                                  node))))
        ## (update@ #node (function (_ node)
        ##                  (set@ #//.children (list/compose (list.reverse (get@ #lefts zipper))
        ##                                                     (#.Cons (get@ #node zipper)
        ##                                                             (get@ #rights zipper)))
        ##                        node)))
        )))

(def: #export (root zipper)
  (All [a] (-> (Zipper a) (Zipper a)))
  (loop [zipper zipper]
    (case (get@ #parent zipper)
      #.None     zipper
      (#.Some _) (recur (up zipper)))))

(do-template [<one-name> <all-name> <side> <op-side>]
  [(def: #export (<one-name> zipper)
     (All [a] (-> (Zipper a) (Zipper a)))
     (case (get@ <side> zipper)
       #.Nil
       zipper

       (#.Cons next side')
       (|> zipper
           (update@ <op-side> (function (_ op-side)
                                (#.Cons (get@ #node zipper) op-side)))
           (set@ <side> side')
           (set@ #node next))))

   (def: #export (<all-name> zipper)
     (All [a] (-> (Zipper a) (Zipper a)))
     (list/fold (function (_ _) <one-name>) zipper (get@ <side> zipper)))]

  [right rightmost #rights #lefts]
  [left  leftmost  #lefts  #rights]
  )

(do-template [<name> <h-side> <h-op> <v-op>]
  [(def: #export (<name> zipper)
     (All [a] (-> (Zipper a) (Zipper a)))
     (case (get@ <h-side> zipper)
       #.Nil
       (<v-op> zipper)

       _
       (<h-op> zipper)))]

  [next #rights right down]
  [prev #lefts  left up]
  )

(def: #export (set value zipper)
  (All [a] (-> a (Zipper a) (Zipper a)))
  (set@ [#node #//.value] value zipper))

(def: #export (update f zipper)
  (All [a] (-> (-> a a) (Zipper a) (Zipper a)))
  (update@ [#node #//.value] f zipper))

(def: #export (prepend-child value zipper)
  (All [a] (-> a (Zipper a) (Zipper a)))
  (update@ [#node #//.children]
           (function (_ children)
             ## TODO: Remove once new-luxc becomes the standard compiler.
             (list& (: (Tree ($ +0))
                       (//.tree [value {}]))
                    children)
             ## (list& (//.tree [value {}])
             ##        children)
             )
           zipper))

(def: #export (append-child value zipper)
  (All [a] (-> a (Zipper a) (Zipper a)))
  (update@ [#node #//.children]
           (function (_ children)
             (list/compose children
                           ## TODO: Remove once new-luxc becomes the standard compiler.
                           (list (: (Tree ($ +0))
                                    (//.tree [value {}])))
                           ## (list (//.tree [value {}]))
                           ))
           zipper))

(def: #export (remove zipper)
  (All [a] (-> (Zipper a) (Maybe (Zipper a))))
  (case (get@ #lefts zipper)
    #.Nil
    (case (get@ #parent zipper)
      #.None
      #.None

      (#.Some next)
      (#.Some (|> next
                  (update@ [#node #//.children] (|>> list.tail (maybe.default (list)))))))

    (#.Cons next side)
    (#.Some (|> zipper
                (set@ #lefts side)
                (set@ #node next)))))

(do-template [<name> <side>]
  [(def: #export (<name> value zipper)
     (All [a] (-> a (Zipper a) (Maybe (Zipper a))))
     (case (get@ #parent zipper)
       #.None
       #.None

       _
       (#.Some (|> zipper
                   (update@ <side> (function (_ side)
                                     ## TODO: Remove once new-luxc becomes the standard compiler.
                                     (#.Cons (: (Tree ($ +0))
                                                (//.tree [value {}]))
                                             side)
                                     ## (#.Cons (//.tree [value {}])
                                     ##         side)
                                     ))))))]

  [insert-left  #lefts]
  [insert-right #rights]
  )

(structure: #export _ (Functor Zipper)
  (def: (map f fa)
    {#parent (|> fa (get@ #parent) (maybe/map (map f)))
     #lefts (|> fa (get@ #lefts) (list/map (tree/map f)))
     #rights (|> fa (get@ #rights) (list/map (tree/map f)))
     #node (tree/map f (get@ #node fa))}))

## TODO: Add again once new-luxc becomes the standard compiler.
## (structure: #export _ (CoMonad Zipper)
##   (def: functor Functor<Zipper>)

##   (def: unwrap (get@ [#node #//.value]))

##   (def: (split wa)
##     (let [tree-splitter (function (tree-splitter tree)
##                           {#//.value (zip tree)
##                            #//.children (list/map tree-splitter
##                                                  (get@ #//.children tree))})]
##       {#parent (|> wa (get@ #parent) (maybe/map split))
##        #lefts (|> wa (get@ #lefts) (list/map tree-splitter))
##        #rights (|> wa (get@ #rights) (list/map tree-splitter))
##        #node (|> fa (get@ #node) tree-splitter)})))
