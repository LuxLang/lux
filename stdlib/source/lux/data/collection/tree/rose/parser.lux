(.module:
  [lux #*
   [control
    ["p" parser]
    ["ex" exception (#+ exception:)]]
   [data
    ["." error (#+ Error)]]]
  [// (#+ Tree)
   ["." zipper (#+ Zipper)]])

(type: #export (Parser t a)
  (p.Parser (Zipper t) a))

(def: #export (run-zipper zipper parser)
  (All [t a] (-> (Zipper t) (Parser t a) (Error a)))
  (case (p.run zipper parser)
    (#error.Success [zipper output])
    (#error.Success output)

    (#error.Failure error)
    (#error.Failure error)))

(def: #export (run tree parser)
  (All [t a] (-> (Tree t) (Parser t a) (Error a)))
  (run-zipper (zipper.zip tree) parser))

(def: #export value
  (All [t] (Parser t t))
  (function (_ zipper)
    (#error.Success [zipper (zipper.value zipper)])))

(exception: #export cannot-move-further)

(template [<name> <direction>]
  [(def: #export <name>
     (All [t] (Parser t []))
     (function (_ zipper)
       (let [next (<direction> zipper)]
         (if (is? zipper next)
           (ex.throw cannot-move-further [])
           (#error.Success [next []])))))]

  [up        zipper.up]
  [down      zipper.down]
  [left      zipper.left]
  [right     zipper.right]
  [root      zipper.root]
  [rightmost zipper.rightmost]
  [leftmost  zipper.leftmost]
  [next      zipper.next]
  [prev      zipper.prev]
  )
