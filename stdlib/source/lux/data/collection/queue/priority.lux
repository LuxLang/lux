(.module:
  lux
  (lux (control [equivalence (#+ Equivalence)]
                [monad (#+ do Monad)])
       (data (collection (tree [finger (#+ Tree)]))
             [number "nat/" Interval<Nat>]
             [maybe])))

(type: #export Priority Nat)

(type: #export (Queue a)
  (Maybe (Tree Priority a)))

(def: #export max Priority nat/top)
(def: #export min Priority nat/bottom)

(def: #export empty
  Queue
  #.None)

(def: #export (peek queue)
  (All [a] (-> (Queue a) (Maybe a)))
  (do maybe.Monad<Maybe>
    [fingers queue]
    (wrap (maybe.assume (finger.search (n/= (finger.tag fingers)) fingers)))))

(def: #export (size queue)
  (All [a] (-> (Queue a) Nat))
  (case queue
    #.None
    +0

    (#.Some fingers)
    (loop [node (get@ #finger.node fingers)]
      (case node
        (#finger.Leaf _ _)
        +1

        (#finger.Branch _ left right)
        (n/+ (recur left) (recur right))))))

(def: #export (member? Equivalence<a> queue member)
  (All [a] (-> (Equivalence a) (Queue a) a Bool))
  (case queue
    #.None
    false

    (#.Some fingers)
    (loop [node (get@ #finger.node fingers)]
      (case node
        (#finger.Leaf _ reference)
        (:: Equivalence<a> = reference member)

        (#finger.Branch _ left right)
        (or (recur left)
            (recur right))))))

(def: #export (pop queue)
  (All [a] (-> (Queue a) (Queue a)))
  (do maybe.Monad<Maybe>
    [fingers queue
     #let [highest-priority (finger.tag fingers)]
     node' (loop [node (get@ #finger.node fingers)]
             (case node
               (#finger.Leaf priority reference)
               (if (n/= highest-priority priority)
                 #.None
                 (#.Some node))

               (#finger.Branch priority left right)
               (if (n/= highest-priority (finger.tag (set@ #finger.node left fingers)))
                 (case (recur left)
                   #.None
                   (#.Some right)

                   (#.Some =left)
                   (|> (finger.branch (set@ #finger.node =left fingers)
                                      (set@ #finger.node right fingers))
                       (get@ #finger.node)
                       #.Some))
                 (case (recur right)
                   #.None
                   (#.Some left)

                   (#.Some =right)
                   (|> (finger.branch (set@ #finger.node left fingers)
                                      (set@ #finger.node =right fingers))
                       (get@ #finger.node)
                       #.Some))
                 )))]
    (wrap (set@ #finger.node node' fingers))))

(def: #export (push priority value queue)
  (All [a] (-> Priority a (Queue a) (Queue a)))
  (let [addition {#finger.monoid number.Max@Monoid<Nat>
                  #finger.node (#finger.Leaf priority value)}]
    (case queue
      #.None
      (#.Some addition)

      (#.Some fingers)
      (#.Some (finger.branch fingers addition)))))
