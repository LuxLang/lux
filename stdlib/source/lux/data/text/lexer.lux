(;module:
  [lux #- not]
  (lux (control functor
                applicative
                monad
                codec
                ["p" parser])
       (data [text "T/" Eq<Text>]
             text/format
             [product]
             [char "C/" Order<Char> Codec<Text,Char>]
             maybe
             ["R" result]
             (coll [list "L/" Functor<List>]))))

(type: Offset Nat)

(def: start-offset Offset +0)

(type: #export Lexer
  (p;Parser [Offset Text]))

(def: (remaining offset tape)
  (-> Offset Text Text)
  (|> tape (text;split offset) assume product;right))

(def: cannot-lex-error Text "Cannot lex from empty text.")

(def: (unconsumed-input-error offset tape)
  (-> Offset Text Text)
  (format "Unconsumed input: " (remaining offset tape)))

(def: #export (run input lexer)
  (All [a] (-> Text (Lexer a) (R;Result a)))
  (case (lexer [start-offset input])
    (#R;Error msg)
    (#R;Error msg)
    
    (#R;Success [[end-offset _] output])
    (if (n.= end-offset (text;size input))
      (#R;Success output)
      (#R;Error (unconsumed-input-error end-offset input)))
    ))

(def: #export any
  {#;doc "Just returns the next character without applying any logic."}
  (Lexer Text)
  (function [[offset tape]]
    (case (text;nth offset tape)
      (#;Some output)
      (#R;Success [[(n.inc offset) tape] (char;as-text output)])

      _
      (#R;Error cannot-lex-error))
    ))

(def: #export (not p)
  {#;doc "Produce a character if the lexer fails."}
  (All [a] (-> (Lexer a) (Lexer Text)))
  (function [input]
    (case (p input)
      (#R;Error msg)
      (any input)
      
      _
      (#R;Error "Expected to fail; yet succeeded."))))

(def: #export (this reference)
  {#;doc "Lex a text if it matches the given sample."}
  (-> Text (Lexer Unit))
  (function [[offset tape]]
    (case (text;index-of reference offset tape)
      (^multi (#;Some where) (n.= offset where))
      (#R;Success [[(n.+ (text;size reference) offset) tape] []])

      _
      (#R;Error (format "Could not match: " (text;encode reference) " @ " tape)))))

(def: #export (this? reference)
  {#;doc "Lex a text if it matches the given sample."}
  (-> Text (Lexer Bool))
  (function [(^@ input [offset tape])]
    (case (text;index-of reference offset tape)
      (^multi (#;Some where) (n.= offset where))
      (#R;Success [[(n.+ (text;size reference) offset) tape] true])

      _
      (#R;Success [input false]))))

(def: #export end
  {#;doc "Ensure the lexer's input is empty."}
  (Lexer Unit)
  (function [(^@ input [offset tape])]
    (if (n.= offset (text;size tape))
      (#R;Success [input []])
      (#R;Error (unconsumed-input-error offset tape)))))

(def: #export end?
  {#;doc "Ask if the lexer's input is empty."}
  (Lexer Bool)
  (function [(^@ input [offset tape])]
    (#R;Success [input (n.= offset (text;size tape))])))

(def: #export peek
  {#;doc "Lex the next character (without consuming it from the input)."}
  (Lexer Text)
  (function [(^@ input [offset tape])]
    (case (text;nth offset tape)
      (#;Some output)
      (#R;Success [input (char;as-text output)])

      _
      (#R;Error cannot-lex-error))
    ))

(def: #export get-input
  {#;doc "Get all of the remaining input (without consuming it)."}
  (Lexer Text)
  (function [(^@ input [offset tape])]
    (#R;Success [input (remaining offset tape)])))

(def: #export (range bottom top)
  {#;doc "Only lex characters within a range."}
  (-> Char Char (Lexer Text))
  (do p;Monad<Parser>
    [char any
     #let [char' (|> char (text;nth +0) assume)]
     _ (p;assert (format "Character is not within range: " (C/encode bottom) "-" (C/encode top))
                 (and (C/>= bottom char')
                      (C/<= top char')))]
    (wrap char)))

(do-template [<name> <bottom> <top> <desc>]
  [(def: #export <name>
     {#;doc (#;TextA (format "Only lex " <desc> " characters."))}
     (Lexer Text)
     (range <bottom> <top>))]

  [upper   #"A" #"Z" "uppercase"]
  [lower   #"a" #"z" "lowercase"]
  [decimal #"0" #"9" "decimal"]
  [octal   #"0" #"7" "octal"]
  )

(def: #export alpha
  {#;doc "Only lex alphabetic characters."}
  (Lexer Text)
  (p;either lower upper))

(def: #export alpha-num
  {#;doc "Only lex alphanumeric characters."}
  (Lexer Text)
  (p;either alpha decimal))

(def: #export hexadecimal
  {#;doc "Only lex hexadecimal digits."}
  (Lexer Text)
  ($_ p;either
      decimal
      (range #"a" #"f")
      (range #"A" #"F")))

(def: #export (one-of options)
  {#;doc "Only lex characters that are part of a piece of text."}
  (-> Text (Lexer Text))
  (function [[offset tape]]
    (case (text;nth offset tape)
      (#;Some output)
      (let [output (char;as-text output)]
        (if (text;contains? output options)
          (#R;Success [[(n.inc offset) tape] output])
          (#R;Error (format "Character (" output ") is not one of: " options))))

      _
      (#R;Error cannot-lex-error))))

(def: #export (none-of options)
  {#;doc "Only lex characters that are not part of a piece of text."}
  (-> Text (Lexer Text))
  (function [[offset tape]]
    (case (text;nth offset tape)
      (#;Some output)
      (let [output (char;as-text output)]
        (if (;not (text;contains? output options))
          (#R;Success [[(n.inc offset) tape] output])
          (#R;Error (format "Character (" output ") is one of: " options))))

      _
      (#R;Error cannot-lex-error))))

(def: #export (satisfies p)
  {#;doc "Only lex characters that satisfy a predicate."}
  (-> (-> Char Bool) (Lexer Text))
  (function [[offset tape]]
    (case (text;nth offset tape)
      (#;Some output)
      (if (p output)
        (#R;Success [[(n.inc offset) tape] (char;as-text output)])
        (#R;Error (format "Character does not satisfy predicate: " (char;as-text output))))

      _
      (#R;Error cannot-lex-error))))

(def: #export space
  {#;doc "Only lex white-space."}
  (Lexer Text)
  (satisfies char;space?))

(def: #export (seq left right)
  (-> (Lexer Text) (Lexer Text) (Lexer Text))
  (do p;Monad<Parser>
    [=left left
     =right right]
    (wrap (format =left =right))))

(do-template [<name> <base> <doc>]
  [(def: #export (<name> p)
     {#;doc <doc>}
     (-> (Lexer Text) (Lexer Text))
     (|> p <base> (:: p;Monad<Parser> map text;concat)))]

  [some p;some "Lex some characters as a single continuous text."]
  [many p;many "Lex many characters as a single continuous text."]
  )

(do-template [<name> <base> <doc>]
  [(def: #export (<name> n p)
     {#;doc <doc>}
     (-> Nat (Lexer Text) (Lexer Text))
     (do p;Monad<Parser>
       []
       (|> p (<base> n) (:: @ map text;concat))))]

  [exactly  p;exactly  "Lex exactly N characters."]
  [at-most  p;at-most  "Lex at most N characters."]
  [at-least p;at-least "Lex at least N characters."]
  )

(def: #export (between from to p)
  {#;doc "Lex between N and M characters."}
  (-> Nat Nat (Lexer Text) (Lexer Text))
  (|> p (p;between from to) (:: p;Monad<Parser> map text;concat)))

(def: #export (codec Codec<a> lexer)
  {#;doc "Lex a token by means of a codec."}
  (All [a] (-> (Codec Text a) (Lexer Text) (Lexer a)))
  (function [input]
    (case (lexer input)
      (#R;Error error)
      (#R;Error error)

      (#R;Success [input' to-decode])
      (case (:: Codec<a> decode to-decode)
        (#R;Error error)
        (#R;Error error)
        
        (#R;Success value)
        (#R;Success [input' value])))))

(def: #export (enclosed [start end] lexer)
  (All [a] (-> [Text Text] (Lexer a) (Lexer a)))
  (|> lexer
      (p;before (this end))
      (p;after (this start))))

(def: #export (local local-input lexer)
  {#;doc "Run a lexer with the given input, instead of the real one."}
  (All [a] (-> Text (Lexer a) (Lexer a)))
  (function [real-input]
    (case (run local-input lexer)
      (#R;Error error)
      (#R;Error error)

      (#R;Success value)
      (#R;Success [real-input value]))))
