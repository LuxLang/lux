(.module:
  [lux #*
   [abstract
    monad]
   [control
    ["p" parser ("#@." monad)
     ["l" text (#+ Parser)]]]
   [data
    ["." product]
    ["." error]
    ["." maybe]
    [number (#+ hex)
     ["." nat ("#@." decimal)]]
    [collection
     ["." list ("#@." fold monad)]]]
   ["." macro (#+ with-gensyms)
    ["." code]
    ["s" syntax (#+ syntax:)]]]
  ["." //
   format])

(def: regex-char^
  (Parser Text)
  (l.none-of "\.|&()[]{}"))

(def: escaped-char^
  (Parser Text)
  (do p.monad
    [? (l.this? "\")]
    (if ?
      l.any
      regex-char^)))

(def: (refine^ refinement^ base^)
  (All [a] (-> (Parser a) (Parser Text) (Parser Text)))
  (do p.monad
    [output base^
     _ (l.local output refinement^)]
    (wrap output)))

(def: word^
  (Parser Text)
  (p.either l.alpha-num
            (l.one-of "_")))

(def: (copy reference)
  (-> Text (Parser Text))
  (p.after (l.this reference) (p@wrap reference)))

(def: (join-text^ part^)
  (-> (Parser (List Text)) (Parser Text))
  (do p.monad
    [parts part^]
    (wrap (//.join-with "" parts))))

(def: name-char^
  (Parser Text)
  (l.none-of (format "[]{}()s#.<>" //.double-quote)))

(def: name-part^
  (Parser Text)
  (do p.monad
    [head (refine^ (l.not l.decimal)
                   name-char^)
     tail (l.some name-char^)]
    (wrap (format head tail))))

(def: (name^ current-module)
  (-> Text (Parser Name))
  ($_ p.either
      (p.and (p@wrap current-module) (p.after (l.this "..") name-part^))
      (p.and name-part^ (p.after (l.this ".") name-part^))
      (p.and (p@wrap "lux") (p.after (l.this ".") name-part^))
      (p.and (p@wrap "") name-part^)))

(def: (re-var^ current-module)
  (-> Text (Parser Code))
  (do p.monad
    [name (l.enclosed ["\@<" ">"] (name^ current-module))]
    (wrap (` (: (Parser Text) (~ (code.identifier name)))))))

(def: re-range^
  (Parser Code)
  (do p.monad
    [from (|> regex-char^ (:: @ map (|>> (//.nth 0) maybe.assume)))
     _ (l.this "-")
     to (|> regex-char^ (:: @ map (|>> (//.nth 0) maybe.assume)))]
    (wrap (` (l.range (~ (code.nat from)) (~ (code.nat to)))))))

(def: re-char^
  (Parser Code)
  (do p.monad
    [char escaped-char^]
    (wrap (` ((~! ..copy) (~ (code.text char)))))))

(def: re-options^
  (Parser Code)
  (do p.monad
    [options (l.many escaped-char^)]
    (wrap (` (l.one-of (~ (code.text options)))))))

(def: re-user-class^'
  (Parser Code)
  (do p.monad
    [negate? (p.maybe (l.this "^"))
     parts (p.many ($_ p.either
                       re-range^
                       re-options^))]
    (wrap (case negate?
            (#.Some _) (` (l.not ($_ p.either (~+ parts))))
            #.None     (` ($_ p.either (~+ parts)))))))

(def: re-user-class^
  (Parser Code)
  (do p.monad
    [_ (wrap [])
     init re-user-class^'
     rest (p.some (p.after (l.this "&&") (l.enclosed ["[" "]"] re-user-class^')))]
    (wrap (list@fold (function (_ refinement base)
                       (` ((~! refine^) (~ refinement) (~ base))))
                     init
                     rest))))

(def: blank^
  (Parser Text)
  (l.one-of (format " " //.tab)))

(def: ascii^
  (Parser Text)
  (l.range (hex "0") (hex "7F")))

(def: control^
  (Parser Text)
  (p.either (l.range (hex "0") (hex "1F"))
            (l.one-of (//.from-code (hex "7F")))))

(def: punct^
  (Parser Text)
  (l.one-of (format "!#$%&'()*+,-./:;<=>?@[\]^_`{|}~"
                    //.double-quote)))

(def: graph^
  (Parser Text)
  (p.either punct^ l.alpha-num))

(def: print^
  (Parser Text)
  (p.either graph^
            (l.one-of (//.from-code (hex "20")))))

(def: re-system-class^
  (Parser Code)
  (do p.monad
    []
    ($_ p.either
        (p.after (l.this ".") (wrap (` l.any)))
        (p.after (l.this "\d") (wrap (` l.decimal)))
        (p.after (l.this "\D") (wrap (` (l.not l.decimal))))
        (p.after (l.this "\s") (wrap (` l.space)))
        (p.after (l.this "\S") (wrap (` (l.not l.space))))
        (p.after (l.this "\w") (wrap (` (~! word^))))
        (p.after (l.this "\W") (wrap (` (l.not (~! word^)))))

        (p.after (l.this "\p{Lower}") (wrap (` l.lower)))
        (p.after (l.this "\p{Upper}") (wrap (` l.upper)))
        (p.after (l.this "\p{Alpha}") (wrap (` l.alpha)))
        (p.after (l.this "\p{Digit}") (wrap (` l.decimal)))
        (p.after (l.this "\p{Alnum}") (wrap (` l.alpha-num)))
        (p.after (l.this "\p{Space}") (wrap (` l.space)))
        (p.after (l.this "\p{HexDigit}") (wrap (` l.hexadecimal)))
        (p.after (l.this "\p{OctDigit}") (wrap (` l.octal)))
        (p.after (l.this "\p{Blank}") (wrap (` (~! blank^))))
        (p.after (l.this "\p{ASCII}") (wrap (` (~! ascii^))))
        (p.after (l.this "\p{Contrl}") (wrap (` (~! control^))))
        (p.after (l.this "\p{Punct}") (wrap (` (~! punct^))))
        (p.after (l.this "\p{Graph}") (wrap (` (~! graph^))))
        (p.after (l.this "\p{Print}") (wrap (` (~! print^))))
        )))

(def: re-class^
  (Parser Code)
  (p.either re-system-class^
            (l.enclosed ["[" "]"] re-user-class^)))

(def: number^
  (Parser Nat)
  (|> (l.many l.decimal)
      (p.codec nat.decimal)))

(def: re-back-reference^
  (Parser Code)
  (p.either (do p.monad
              [_ (l.this "\")
               id number^]
              (wrap (` ((~! ..copy) (~ (code.identifier ["" (nat@encode id)]))))))
            (do p.monad
              [_ (l.this "\k<")
               captured-name name-part^
               _ (l.this ">")]
              (wrap (` ((~! ..copy) (~ (code.identifier ["" captured-name]))))))))

(def: (re-simple^ current-module)
  (-> Text (Parser Code))
  ($_ p.either
      re-class^
      (re-var^ current-module)
      re-back-reference^
      re-char^
      ))

(def: (re-simple-quantified^ current-module)
  (-> Text (Parser Code))
  (do p.monad
    [base (re-simple^ current-module)
     quantifier (l.one-of "?*+")]
    (case quantifier
      "?"
      (wrap (` (p.default "" (~ base))))
      
      "*"
      (wrap (` ((~! join-text^) (p.some (~ base)))))
      
      ## "+"
      _
      (wrap (` ((~! join-text^) (p.many (~ base)))))
      )))

(def: (re-counted-quantified^ current-module)
  (-> Text (Parser Code))
  (do p.monad
    [base (re-simple^ current-module)]
    (l.enclosed ["{" "}"]
                ($_ p.either
                    (do @
                      [[from to] (p.and number^ (p.after (l.this ",") number^))]
                      (wrap (` ((~! join-text^) (p.between (~ (code.nat from))
                                                           (~ (code.nat to))
                                                           (~ base))))))
                    (do @
                      [limit (p.after (l.this ",") number^)]
                      (wrap (` ((~! join-text^) (p.at-most (~ (code.nat limit)) (~ base))))))
                    (do @
                      [limit (p.before (l.this ",") number^)]
                      (wrap (` ((~! join-text^) (p.at-least (~ (code.nat limit)) (~ base))))))
                    (do @
                      [limit number^]
                      (wrap (` ((~! join-text^) (p.exactly (~ (code.nat limit)) (~ base))))))))))

(def: (re-quantified^ current-module)
  (-> Text (Parser Code))
  (p.either (re-simple-quantified^ current-module)
            (re-counted-quantified^ current-module)))

(def: (re-complex^ current-module)
  (-> Text (Parser Code))
  ($_ p.either
      (re-quantified^ current-module)
      (re-simple^ current-module)))

(type: Re-Group
  #Non-Capturing
  (#Capturing [(Maybe Text) Nat]))

(def: (re-sequential^ capturing? re-scoped^ current-module)
  (-> Bit
      (-> Text (Parser [Re-Group Code]))
      Text
      (Parser [Nat Code]))
  (do p.monad
    [parts (p.many (p.or (re-complex^ current-module)
                         (re-scoped^ current-module)))
     #let [g!total (code.identifier ["" "0total"])
           g!temp (code.identifier ["" "0temp"])
           [_ names steps] (list@fold (: (-> (Either Code [Re-Group Code])
                                             [Nat (List Code) (List (List Code))]
                                             [Nat (List Code) (List (List Code))])
                                         (function (_ part [idx names steps])
                                           (case part
                                             (^or (#.Left complex) (#.Right [#Non-Capturing complex]))
                                             [idx
                                              names
                                              (list& (list g!temp complex
                                                           (' #let) (` [(~ g!total) (:: (~! //.monoid) (~' compose) (~ g!total) (~ g!temp))]))
                                                     steps)]
                                             
                                             (#.Right [(#Capturing [?name num-captures]) scoped])
                                             (let [[idx! name!] (case ?name
                                                                  (#.Some _name)
                                                                  [idx (code.identifier ["" _name])]

                                                                  #.None
                                                                  [(inc idx) (code.identifier ["" (nat@encode idx)])])
                                                   access (if (n/> 0 num-captures)
                                                            (` ((~! product.left) (~ name!)))
                                                            name!)]
                                               [idx!
                                                (list& name! names)
                                                (list& (list name! scoped
                                                             (' #let) (` [(~ g!total) (:: (~! //.monoid) (~' compose) (~ g!total) (~ access))]))
                                                       steps)])
                                             )))
                                      [0
                                       (: (List Code) (list))
                                       (: (List (List Code)) (list))]
                                      parts)]]
    (wrap [(if capturing?
             (list.size names)
             0)
           (` (do p.monad
                [(~ (' #let)) [(~ g!total) ""]
                 (~+ (|> steps list.reverse list@join))]
                ((~ (' wrap)) [(~ g!total) (~+ (list.reverse names))])))])
    ))

(def: (unflatten^ lexer)
  (-> (Parser Text) (Parser [Text Any]))
  (p.and lexer (:: p.monad wrap [])))

(def: (|||^ left right)
  (All [l r] (-> (Parser [Text l]) (Parser [Text r]) (Parser [Text (| l r)])))
  (function (_ input)
    (case (left input)
      (#error.Success [input' [lt lv]])
      (#error.Success [input' [lt (0 lv)]])

      (#error.Failure _)
      (case (right input)
        (#error.Success [input' [rt rv]])
        (#error.Success [input' [rt (1 rv)]])

        (#error.Failure error)
        (#error.Failure error)))))

(def: (|||_^ left right)
  (All [l r] (-> (Parser [Text l]) (Parser [Text r]) (Parser Text)))
  (function (_ input)
    (case (left input)
      (#error.Success [input' [lt lv]])
      (#error.Success [input' lt])

      (#error.Failure _)
      (case (right input)
        (#error.Success [input' [rt rv]])
        (#error.Success [input' rt])

        (#error.Failure error)
        (#error.Failure error)))))

(def: (prep-alternative [num-captures alt])
  (-> [Nat Code] Code)
  (if (n/> 0 num-captures)
    alt
    (` ((~! unflatten^) (~ alt)))))

(def: (re-alternative^ capturing? re-scoped^ current-module)
  (-> Bit
      (-> Text (Parser [Re-Group Code]))
      Text
      (Parser [Nat Code]))
  (do p.monad
    [#let [sub^ (re-sequential^ capturing? re-scoped^ current-module)]
     head sub^
     tail (p.some (p.after (l.this "|") sub^))]
    (if (list.empty? tail)
      (wrap head)
      (wrap [(list@fold n/max (product.left head) (list@map product.left tail))
             (` ($_ ((~ (if capturing?
                          (` (~! |||^))
                          (` (~! |||_^)))))
                    (~ (prep-alternative head))
                    (~+ (list@map prep-alternative tail))))]))))

(def: (re-scoped^ current-module)
  (-> Text (Parser [Re-Group Code]))
  ($_ p.either
      (do p.monad
        [_ (l.this "(?:")
         [_ scoped] (re-alternative^ #0 re-scoped^ current-module)
         _ (l.this ")")]
        (wrap [#Non-Capturing scoped]))
      (do p.monad
        [complex (re-complex^ current-module)]
        (wrap [#Non-Capturing complex]))
      (do p.monad
        [_ (l.this "(?<")
         captured-name name-part^
         _ (l.this ">")
         [num-captures pattern] (re-alternative^ #1 re-scoped^ current-module)
         _ (l.this ")")]
        (wrap [(#Capturing [(#.Some captured-name) num-captures]) pattern]))
      (do p.monad
        [_ (l.this "(")
         [num-captures pattern] (re-alternative^ #1 re-scoped^ current-module)
         _ (l.this ")")]
        (wrap [(#Capturing [#.None num-captures]) pattern]))))

(def: (regex^ current-module)
  (-> Text (Parser Code))
  (:: p.monad map product.right (re-alternative^ #1 re-scoped^ current-module)))

(syntax: #export (regex {pattern s.text})
  {#.doc (doc "Create lexers using regular-expression syntax."
              "For example:"
              
              "Literals"
              (regex "a")
              
              "Wildcards"
              (regex ".")
              
              "Escaping"
              (regex "\.")
              
              "Character classes"
              (regex "\d")
              (regex "\p{Lower}")
              (regex "[abc]")
              (regex "[a-z]")
              (regex "[a-zA-Z]")
              (regex "[a-z&&[def]]")
              
              "Negation"
              (regex "[^abc]")
              (regex "[^a-z]")
              (regex "[^a-zA-Z]")
              (regex "[a-z&&[^bc]]")
              (regex "[a-z&&[^m-p]]")
              
              "Combinations"
              (regex "aa")
              (regex "a?")
              (regex "a*")
              (regex "a+")
              
              "Specific amounts"
              (regex "a{2}")
              
              "At least"
              (regex "a{1,}")
              
              "At most"
              (regex "a{,1}")
              
              "Between"
              (regex "a{1,2}")
              
              "Groups"
              (regex "a(.)c")
              (regex "a(b+)c")
              (regex "(\d{3})-(\d{3})-(\d{4})")
              (regex "(\d{3})-(?:\d{3})-(\d{4})")
              (regex "(?<code>\d{3})-\k<code>-(\d{4})")
              (regex "(?<code>\d{3})-\k<code>-(\d{4})-\0")
              (regex "(\d{3})-((\d{3})-(\d{4}))")
              
              "Alternation"
              (regex "a|b")
              (regex "a(.)(.)|b(.)(.)")
              )}
  (do @
    [current-module macro.current-module-name]
    (case (|> (regex^ current-module)
              (p.before l.end)
              (l.run pattern))
      (#error.Failure error)
      (macro.fail (format "Error while parsing regular-expression:" //.new-line
                          error))

      (#error.Success regex)
      (wrap (list regex))
      )))

(syntax: #export (^regex {[pattern bindings] (s.form (p.and s.text (p.maybe s.any)))}
                         body
                         {branches (p.many s.any)})
  {#.doc (doc "Allows you to test text against regular expressions."
              (case some-text
                (^regex "(\d{3})-(\d{3})-(\d{4})"
                        [_ country-code area-code place-code])
                do-some-thing-when-number

                (^regex "\w+")
                do-some-thing-when-word

                _
                do-something-else))}
  (with-gensyms [g!temp]
    (wrap (list& (` (^multi (~ g!temp)
                            [((~! l.run) (~ g!temp) (regex (~ (code.text pattern))))
                             (#error.Success (~ (maybe.default g!temp bindings)))]))
                 body
                 branches))))
