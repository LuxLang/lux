(.module:
  [lux #*
   [host (#+ import:)]
   [data
    ["." product]
    [number
     ["n" nat]]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." row (#+ Row) ("#;." fold)]]]
   [compiler
    ["_" host]]
   [type
    abstract]]
  ["." //])

(`` (for {(~~ (static _.old))
          (as-is (import: java/lang/CharSequence)

                 (import: java/lang/Appendable
                   (append [CharSequence] Appendable))

                 (import: java/lang/StringBuilder
                   (new [int])
                   (toString [] String)))}))

(`` (abstract: #export Buffer
      (for {(~~ (static _.old))
            [Nat (-> StringBuilder StringBuilder)]}
           ## default
           (Row Text))

      {#.doc "Immutable text buffer for efficient text concatenation."}

      (def: #export empty
        Buffer
        (:abstraction (for {(~~ (static _.old))
                            [0 id]}
                           ## default
                           row.empty)))

      (def: #export (append chunk buffer)
        (-> Text Buffer Buffer)
        (for {(~~ (static _.old))
              (let [[capacity transform] (:representation buffer)
                    append! (: (-> Text StringBuilder StringBuilder)
                               (function (_ chunk builder)
                                 (exec (Appendable::append (:coerce CharSequence chunk)
                                                           builder)
                                   builder)))]
                (:abstraction [(n.+ (//.size chunk) capacity)
                               (|>> transform (append! chunk))]))}
             ## default
             (|> buffer :representation (row.add chunk) :abstraction)))

      (def: #export (size buffer)
        (-> Buffer Nat)
        (for {(~~ (static _.old))
              (|> buffer :representation product.left)}
             ## default
             (row;fold (function (_ chunk total)
                         (n.+ (//.size chunk) total))
                       0
                       (:representation buffer))))

      (def: #export (text buffer)
        (-> Buffer Text)
        (for {(~~ (static _.old))
              (let [[capacity transform] (:representation buffer)]
                (|> (StringBuilder::new (.int capacity))
                    transform
                    StringBuilder::toString))}
             ## default
             (row;fold (function (_ chunk total)
                         (format total chunk))
                       ""
                       (:representation buffer))))
      ))
