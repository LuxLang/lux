(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]]
   [data
    [collection
     ["." list ("#\." fold functor)]
     ["." set ("#\." equivalence)]
     ["." tree #_
      ["#" finger (#+ Tree)]]]]
   [type (#+ :by-example)
    abstract]]
  ["." / #_
   ["/#" // #_
    [// (#+ Char)]
    ["#." block (#+ Block)]]])

(def: builder
  (tree.builder //block.monoid))

(def: :@:
  (:by-example [@]
               {(tree.Builder @ Block)
                ..builder}
               @))

(abstract: #export Set
  (Tree :@: Block [])

  (def: #export (compose left right)
    (-> Set Set Set)
    (:abstraction
     (\ builder branch
        (:representation left)
        (:representation right))))

  (def: (singleton block)
    (-> Block Set)
    (:abstraction
     (\ builder leaf block [])))

  (def: #export (set [head tail])
    (-> [Block (List Block)] Set)
    (list\fold ..compose (..singleton head) (list\map ..singleton tail)))

  (def: #export character
    Set
    (..set [//block.basic-latin
            (list //block.latin-1-supplement
                  //block.latin-extended-a
                  //block.latin-extended-b
                  //block.ipa-extensions
                  //block.spacing-modifier-letters
                  //block.combining-diacritical-marks
                  //block.greek-and-coptic
                  //block.cyrillic
                  //block.cyrillic-supplementary
                  //block.armenian
                  //block.hebrew
                  //block.arabic
                  //block.syriac
                  //block.thaana
                  //block.devanagari
                  //block.bengali
                  //block.gurmukhi
                  //block.gujarati
                  //block.oriya
                  //block.tamil
                  //block.telugu
                  //block.kannada
                  //block.malayalam
                  //block.sinhala
                  //block.thai
                  //block.lao
                  //block.tibetan
                  //block.myanmar
                  //block.georgian
                  //block.hangul-jamo
                  //block.ethiopic
                  //block.cherokee
                  //block.unified-canadian-aboriginal-syllabics
                  //block.ogham
                  //block.runic
                  //block.tagalog
                  //block.hanunoo
                  //block.buhid
                  //block.tagbanwa
                  //block.khmer
                  //block.mongolian
                  //block.limbu
                  //block.tai-le
                  //block.khmer-symbols
                  //block.phonetic-extensions
                  //block.latin-extended-additional
                  //block.greek-extended
                  //block.general-punctuation
                  //block.superscripts-and-subscripts
                  //block.currency-symbols
                  //block.combining-diacritical-marks-for-symbols
                  //block.letterlike-symbols
                  //block.number-forms
                  //block.arrows
                  //block.mathematical-operators
                  //block.miscellaneous-technical
                  //block.control-pictures
                  //block.optical-character-recognition
                  //block.enclosed-alphanumerics
                  //block.box-drawing

                  //block.block-elements
                  //block.geometric-shapes
                  //block.miscellaneous-symbols
                  //block.dingbats
                  //block.miscellaneous-mathematical-symbols-a
                  //block.supplemental-arrows-a
                  //block.braille-patterns
                  //block.supplemental-arrows-b
                  //block.miscellaneous-mathematical-symbols-b
                  //block.supplemental-mathematical-operators
                  //block.miscellaneous-symbols-and-arrows
                  //block.cjk-radicals-supplement
                  //block.kangxi-radicals
                  //block.ideographic-description-characters
                  //block.cjk-symbols-and-punctuation
                  //block.hiragana
                  //block.katakana
                  //block.bopomofo
                  //block.hangul-compatibility-jamo
                  //block.kanbun
                  //block.bopomofo-extended
                  //block.katakana-phonetic-extensions
                  //block.enclosed-cjk-letters-and-months
                  //block.cjk-compatibility
                  //block.cjk-unified-ideographs-extension-a
                  //block.yijing-hexagram-symbols
                  //block.cjk-unified-ideographs
                  //block.yi-syllables
                  //block.yi-radicals
                  //block.hangul-syllables
                  )]))

  (def: #export non-character
    Set
    (..set [//block.high-surrogates
            (list  //block.high-private-use-surrogates
                   //block.low-surrogates
                   //block.private-use-area
                   //block.cjk-compatibility-ideographs
                   //block.alphabetic-presentation-forms
                   //block.arabic-presentation-forms-a
                   //block.variation-selectors
                   //block.combining-half-marks
                   //block.cjk-compatibility-forms
                   //block.small-form-variants
                   //block.arabic-presentation-forms-b
                   //block.halfwidth-and-fullwidth-forms
                   //block.specials
                   ## //block.linear-b-syllabary
                   ## //block.linear-b-ideograms
                   ## //block.aegean-numbers
                   ## //block.old-italic
                   ## //block.gothic
                   ## //block.ugaritic
                   ## //block.deseret
                   ## //block.shavian
                   ## //block.osmanya
                   ## //block.cypriot-syllabary
                   ## //block.byzantine-musical-symbols
                   ## //block.musical-symbols
                   ## //block.tai-xuan-jing-symbols
                   ## //block.mathematical-alphanumeric-symbols
                   ## //block.cjk-unified-ideographs-extension-b
                   ## //block.cjk-compatibility-ideographs-supplement
                   ## //block.tags
                   )]))

  (def: #export full
    Set
    ($_ ..compose
        ..character
        ..non-character
        ))

  (def: #export (range set)
    (-> Set [Char Char])
    (let [tag (tree.tag (:representation set))]
      [(//block.start tag)
       (//block.end tag)]))

  (def: #export (member? set character)
    (-> Set Char Bit)
    (loop [tree (:representation set)]
      (if (//block.within? (tree.tag tree) character)
        (case (tree.root tree)
          (0 #0 _)
          true
          
          (0 #1 left right)
          (or (recur left)
              (recur right)))
        false)))

  (structure: #export equivalence
    (Equivalence Set)

    (def: (= reference subject)
      (set\= (set.from-list //block.hash (tree.tags (:representation reference)))
             (set.from-list //block.hash (tree.tags (:representation subject))))))
  )

(template [<name> <blocks>]
  [(def: #export <name>
     (..set <blocks>))]

  [ascii             [//block.basic-latin (list)]]
  [ascii/alpha       [//block.basic-latin/upper-alpha (list //block.basic-latin/lower-alpha)]]
  [ascii/alpha-num   [//block.basic-latin/upper-alpha (list //block.basic-latin/lower-alpha //block.basic-latin/decimal)]]
  [ascii/upper-alpha [//block.basic-latin/upper-alpha (list)]]
  [ascii/lower-alpha [//block.basic-latin/lower-alpha (list)]]
  )
