(.module:
  [lux (#- list nat int rev type)
   [abstract
    [monad (#+ do)]]
   [control
    ["p" parser
     ["s" code (#+ Parser)]]]
   [data
    ["." bit]
    ["." name]
    [number
     ["." nat]
     ["." int]
     ["." rev]
     ["." frac]
     ["." ratio]]
    ["." text]
    [format
     ["." xml]
     ["." json]]
    [collection
     ["." list ("#@." monad)]]]
   [time
    ["." instant]
    ["." duration]
    ["." date]]
   [math
    ["." modular]]
   [macro
    ["." code]
    [syntax (#+ syntax:)]]
   ["." type]])

(syntax: #export (format {fragments (p.many s.any)})
  {#.doc (doc "Text interpolation."
              (format "Static part " (text static) " does not match URI: " uri))}
  (wrap (.list (` ($_ "lux text concat" (~+ fragments))))))

(type: #export (Format a)
  {#.doc "A way to produce readable text from values."}
  (-> a Text))

(template [<name> <type> <formatter>]
  [(def: #export <name>
     (Format <type>)
     <formatter>)]

  [bit      Bit               (:: bit.codec encode)]
  [nat      Nat               (:: nat.decimal encode)]
  [int      Int               (:: int.decimal encode)]
  [rev      Rev               (:: rev.decimal encode)]
  [frac     Frac              (:: frac.decimal encode)]
  [ratio    ratio.Ratio       (:: ratio.codec encode)]
  [text     Text              text.encode]
  [name     Name              (:: name.codec encode)]
  [code     Code              code.to-text]
  [type     Type              type.to-text]
  [bin      Nat               (:: nat.binary encode)]
  [oct      Nat               (:: nat.octal encode)]
  [hex      Nat               (:: nat.hex encode)]
  [xml      xml.XML           (:: xml.codec encode)]
  [json     json.JSON         (:: json.codec encode)]
  [instant  instant.Instant   instant.to-text]
  [duration duration.Duration duration.encode]
  [date     date.Date         (:: date.codec encode)]
  [cursor   Cursor            .cursor-description]
  )

(def: #export (mod modular)
  (All [m] (Format (modular.Mod m)))
  (let [[_ modulus] (modular.un-mod modular)]
    (:: (modular.codec modulus) encode modular)))

(def: #export (list formatter)
  (All [a] (-> (Format a) (Format (List a))))
  (|>> (list@map (|>> formatter (format " ")))
       (text.join-with "")
       (text.enclose ["(list" ")"])))
