(;module:
  lux
  (lux (control ["M" monad #+ do Monad]
                ["p" parser])
       (data [bool]
             [number]
             [text]
             [ident]
             (coll [list "L/" Monad<List>])
             (format [xml]
                     [json]))
       (time [instant]
             [duration]
             [date])
       [meta]
       (meta [code]
             ["s" syntax #+ syntax: Syntax]
             [type])))

## [Syntax]
(def: #hidden _compose_
  (-> Text Text Text)
  (:: text;Monoid<Text> compose))

(syntax: #export (format [fragments (p;many s;any)])
  {#;doc (doc "Text interpolation."
              (format "Static part " (%t static) " does not match URI: " uri))}
  (wrap (list (` ($_ _compose_ (~@ fragments))))))

## [Formatters]
(type: #export (Formatter a)
  {#;doc "A way to produce readable text from values."}
  (-> a Text))

(do-template [<name> <type> <formatter>]
  [(def: #export <name>
     (Formatter <type>)
     <formatter>)]

  [%b        Bool              (:: bool;Codec<Text,Bool> encode)]
  [%n        Nat               (:: number;Codec<Text,Nat> encode)]
  [%i        Int               (:: number;Codec<Text,Int> encode)]
  [%d        Deg               (:: number;Codec<Text,Deg> encode)]
  [%f        Frac              (:: number;Codec<Text,Frac> encode)]
  [%t        Text              text;encode]
  [%ident    Ident             (:: ident;Codec<Text,Ident> encode)]
  [%code     Code              code;to-text]
  [%type     Type              type;to-text]
  [%bin      Nat               (:: number;Binary@Codec<Text,Nat> encode)]
  [%oct      Nat               (:: number;Octal@Codec<Text,Nat> encode)]
  [%hex      Nat               (:: number;Hex@Codec<Text,Nat> encode)]
  [%xml      xml;XML           (:: xml;Codec<Text,XML> encode)]
  [%json     json;JSON         (:: json;Codec<Text,JSON> encode)]
  [%instant  instant;Instant   (:: instant;Codec<Text,Instant> encode)]
  [%duration duration;Duration (:: duration;Codec<Text,Duration> encode)]
  [%date     date;Date         (:: date;Codec<Text,Date> encode)]
  )

(def: #export (%list formatter)
  (All [a] (-> (Formatter a) (Formatter (List a))))
  (function [values]
    (case values
      #;Nil
      "(list)"

      _
      (format "(list " (text;join-with " " (L/map formatter values)) ")"))))
