##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (control monad)
       (data [bool]
             [char]
             [number]
             [text]
             [ident]
             (coll [list "" Monad<List>]))
       [type]
       [compiler]
       (macro [ast]
              ["s" syntax #+ syntax: Syntax])))

## [Syntax]
(def: #hidden _append_
  (-> Text Text Text)
  (:: text;Monoid<Text> append))

(syntax: #export (format [fragments (s;many s;any)])
  {#;doc (doc "Text interpolation as a macro."
              (format "Static part " (%t static) " doesn't match URI: " uri))}
  (wrap (list (` ($_ _append_ (~@ fragments))))))

## [Formatters]
(type: #export (Formatter a)
  {#;doc "A way to produce readable text from values."}
  (-> a Text))

(do-template [<name> <type> <formatter>]
  [(def: #export <name>
     (Formatter <type>)
     <formatter>)]

  [%b     Bool  (:: bool;Codec<Text,Bool> encode)]
  [%n     Nat   (:: number;Codec<Text,Nat> encode)]
  [%i     Int   (:: number;Codec<Text,Int> encode)]
  [%f     Deg  (:: number;Codec<Text,Deg> encode)]
  [%r     Real  (:: number;Codec<Text,Real> encode)]
  [%c     Char  (:: char;Codec<Text,Char> encode)]
  [%t     Text  (:: text;Codec<Text,Text> encode)]
  [%ident Ident (:: ident;Codec<Text,Ident> encode)]
  [%ast   AST   ast;to-text]
  [%type  Type  type;to-text]
  [%bin     Nat   (:: number;Binary@Codec<Text,Nat> encode)]
  [%oct     Nat   (:: number;Octal@Codec<Text,Nat> encode)]
  [%hex     Nat   (:: number;Hex@Codec<Text,Nat> encode)]
  )

(def: #export (%list formatter)
  (All [a] (-> (Formatter a) (Formatter (List a))))
  (lambda [values]
    (case values
      #;Nil
      "(list)"

      _
      (format "(list " (text;join-with " " (map formatter values)) ")"))))
