(.module:
  [lux #*
   [control
    [functor (#+ Functor)]
    [apply (#+ Apply)]
    ["M" monad #*]
    ["CM" comonad #*]]])

## [Types]
(type: #export (Identity a)
  a)

## [Structures]
(structure: #export functor (Functor Identity)
  (def: map id))

(structure: #export apply (Apply Identity)
  (def: &functor ..functor)
  (def: (apply ff fa)
    (ff fa)))

(structure: #export monad (Monad Identity)
  (def: &functor ..functor)
  (def: wrap id)
  (def: join id))

(structure: #export comonad (CoMonad Identity)
  (def: &functor ..functor)
  (def: unwrap id)
  (def: split id))
