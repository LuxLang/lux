(.module:
  lux
  (lux/control ["F" functor]
               ["A" apply]
               (monad #as M #refer #all)
               (comonad #as CM #refer #all)))

## [Types]
(type: #export (Identity a)
  a)

## [Structures]
(structure: #export _ (F.Functor Identity)
  (def: map id))

(structure: #export _ (A.Apply Identity)
  (def: functor Functor<Identity>)
  (def: (apply ff fa)
    (ff fa)))

(structure: #export _ (Monad Identity)
  (def: functor Functor<Identity>)
  (def: wrap id)
  (def: join id))

(structure: #export _ (CoMonad Identity)
  (def: functor Functor<Identity>)
  (def: unwrap id)
  (def: split id))
