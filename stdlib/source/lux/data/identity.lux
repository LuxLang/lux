(.module:
  [lux #*
   [abstract
    [functor (#+ Functor)]
    [apply (#+ Apply)]
    [monad (#+ Monad)]
    [comonad (#+ CoMonad)]]
   [control
    ["." function]]])

(type: #export (Identity a)
  a)

(implementation: #export functor
  (Functor Identity)

  (def: map function.identity))

(implementation: #export apply
  (Apply Identity)

  (def: &functor ..functor)
  (def: (apply ff fa) (ff fa)))

(implementation: #export monad
  (Monad Identity)
  
  (def: &functor ..functor)
  (def: wrap function.identity)
  (def: join function.identity))

(implementation: #export comonad
  (CoMonad Identity)
  
  (def: &functor ..functor)
  (def: unwrap function.identity)
  (def: split function.identity))
