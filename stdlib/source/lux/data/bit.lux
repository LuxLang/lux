(.module:
  [lux #*
   [control
    [monoid (#+ Monoid)]
    [equivalence (#+ Equivalence)]
    hash
    [codec (#+ Codec)]]
   function])

## [Structures]
(structure: #export _ (Equivalence Bit)
  (def: (= x y)
    (if x
      y
      (not y))))

(structure: #export _ (Hash Bit)
  (def: eq Equivalence<Bit>)
  (def: (hash value)
    (case value
      #1 1
      #0 0)))

(do-template [<name> <identity> <op>]
  [(structure: #export <name> (Monoid Bit)
     (def: identity <identity>)
     (def: (compose x y)
       (<op> x y)))]

  [ Or@Monoid<Bit> #0 or]
  [And@Monoid<Bit> #1 and]
  )

(structure: #export _ (Codec Text Bit)
  (def: (encode x)
    (if x
      "#1"
      "#0"))

  (def: (decode input)
    (case input
      "#1" (#.Right #1)
      "#0" (#.Right #0)
      _    (#.Left "Wrong syntax for Bit."))))

## [Values]
(def: #export complement
  {#.doc "Generates the complement of a predicate.
          That is a predicate that returns the oposite of the original predicate."}
  (All [a] (-> (-> a Bit) (-> a Bit)))
  (compose not))
