(;module: [lux #- and or not])

(def: #export width Nat +64)

## [Values]
(do-template [<short-name> <op> <doc> <type>]
  [(def: #export (<short-name> param subject)
     {#;doc <doc>}
     (-> Nat <type> <type>)
     (_lux_proc ["bit" <op>] [subject param]))]

  [and "and" "Bitwise and." Nat]
  [or "or" "Bitwise or." Nat]
  [xor "xor" "Bitwise xor." Nat]
  [shift-left "shift-left" "Bitwise shift-left." Nat]
  [shift-right "shift-right" "Bitwise shift-right." Int]
  [unsigned-shift-right "unsigned-shift-right" "Bitwise unsigned-shift-right." Nat]
  )

(def: #export (count subject)
  {#;doc "Count the number of 1s in a bit-map."}
  (-> Nat Nat)
  (_lux_proc ["bit" "count"] [subject]))

(def: #export not
  {#;doc "Bitwise negation."}
  (-> Nat Nat)
  (let [mask (int-to-nat -1)]
    (xor mask)))

(def: #export (clear idx input)
  {#;doc "Clear bit at given index."}
  (-> Nat Nat Nat)
  (;;and (;;not (shift-left idx +1))
         input))

(do-template [<name> <op> <doc>]
  [(def: #export (<name> idx input)
     {#;doc <doc>}
     (-> Nat Nat Nat)
     (<op> (shift-left idx +1) input))]

  [set  ;;or "Set bit at given index."]
  [flip ;;xor "Flip bit at given index."]
  )

(def: #export (set? idx input)
  (-> Nat Nat Bool)
  (|> input (;;and (shift-left idx +1)) (n.= +0) ;not))

(do-template [<name> <main> <comp>]
  [(def: #export (<name> distance input)
     (-> Nat Nat Nat)
     (;;or (<main> distance input)
           (<comp> (n.- (n.% width distance)
                        width)
                   input)))]

  [rotate-left  shift-left  unsigned-shift-right]
  [rotate-right unsigned-shift-right shift-left]
  )
