(.module:
  {#.doc "Functionality for working with variants (particularly 2-variants)."}
  lux)

(template [<name> <type> <index>]
  [(def: #export (<name> value)
     (All [a b] (-> <type> (| a b)))
     (<index> value))]

  [left  a 0]
  [right b 1])

(def: #export (either fl fr)
  (All [a b c]
    (-> (-> a c) (-> b c)
        (-> (| a b) c)))
  (function (_ input)
    (case input
      (0 l) (fl l)
      (1 r) (fr r))))

(def: #export (each fl fr)
  (All [l l' r r']
    (-> (-> l l') (-> r r')
        (-> (| l r) (| l' r'))))
  (function (_ input)
    (case input
      (0 l) (0 (fl l))
      (1 r) (1 (fr r)))))

(template [<name> <side> <tag>]
  [(def: #export (<name> es)
     (All [a b] (-> (List (| a b)) (List <side>)))
     (case es
       #.Nil                  #.Nil
       (#.Cons (<tag> x) es') (#.Cons [x (<name> es')])
       (#.Cons _ es')         (<name> es')))]

  [lefts  a 0]
  [rights b 1]
  )

(def: #export (partition xs)
  (All [a b] (-> (List (| a b)) [(List a) (List b)]))
  (case xs
    #.Nil
    [#.Nil #.Nil]

    (#.Cons x xs')
    (let [[lefts rights] (partition xs')]
      (case x
        (0 x')  [(#.Cons x' lefts) rights]
        (1 x') [lefts (#.Cons x' rights)]))))
