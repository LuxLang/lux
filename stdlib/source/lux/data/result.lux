(;module:
  [lux #- assume default]
  (lux (control functor
                applicative
                ["M" monad #+ do Monad])))

## [Types]
(type: #export (Result a)
  (#Error Text)
  (#Success a))

## [Structures]
(struct: #export _ (Functor Result)
  (def: (map f ma)
    (case ma
      (#Error msg)     (#Error msg)
      (#Success datum) (#Success (f datum)))))

(struct: #export _ (Applicative Result)
  (def: functor Functor<Result>)

  (def: (wrap a)
    (#Success a))

  (def: (apply ff fa)
    (case ff
      (#Success f)
      (case fa
        (#Success a)
        (#Success (f a))

        (#Error msg)
        (#Error msg))

      (#Error msg)
      (#Error msg))
    ))

(struct: #export _ (Monad Result)
  (def: applicative Applicative<Result>)

  (def: (join mma)
    (case mma
      (#Error msg) (#Error msg)
      (#Success ma) ma)))

(struct: #export (ResultT Monad<M>)
  (All [M] (-> (Monad M) (Monad (All [a] (M (Result a))))))
  (def: applicative (compA (get@ #M;applicative Monad<M>) Applicative<Result>))
  (def: (join MeMea)
    (do Monad<M>
      [eMea MeMea]
      (case eMea
        (#Error error)
        (wrap (#Error error))

        (#Success Mea)
        Mea))))

(def: #export (lift Monad<M>)
  (All [M a] (-> (Monad M) (-> (M a) (M (Result a)))))
  (M;lift Monad<M> (:: Monad<Result> wrap)))

(def: #export (succeed value)
  (All [a] (-> a (Result a)))
  (#Success value))

(def: #export (fail message)
  (All [a] (-> Text (Result a)))
  (#Error message))

(def: #export (assume result)
  (All [a] (-> (Result a) a))
  (case result
    (#Success value)
    value

    (#Error message)
    (error! message)))

(macro: #export (default tokens compiler)
  {#;doc (doc "Allows you to provide a default value that will be used"
              "if a (Result x) value turns out to be #Error."
              (is 10
                  (default 20 (#Success 10)))
              (is 20
                  (default 20 (#Error "KABOOM!"))))}
  (case tokens
    (^ (list else result))
    (#Success [compiler (list (` (case (~ result)
                                   (#;;Success (~' g!temp))
                                   (~' g!temp)

                                   (#;;Error (~ [dummy-cursor (#;Symbol ["" ""])]))
                                   (~ else))))])

    _
    (#Error "Wrong syntax for default")))
