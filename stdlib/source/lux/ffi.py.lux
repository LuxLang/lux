(.module:
  [lux #*
   ["." meta]
   ["@" target]
   [abstract
    [monad (#+ do)]]
   [control
    ["." io]
    ["<>" parser
     ["<c>" code (#+ Parser)]]]
   [data
    ["." product]
    ["." maybe]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor fold)]]]
   [type
    abstract]
   [macro (#+ with_gensyms)
    [syntax (#+ syntax:)]
    ["." code]
    ["." template]]])

(abstract: #export (Object brand) Any)

(template [<name>]
  [(with_expansions [<brand> (template.identifier [<name> "'"])]
     (abstract: #export <brand> Any)
     (type: #export <name>
       (..Object <brand>)))]

  [None]
  [Function]
  [Dict]
  )

(template [<name> <type>]
  [(type: #export <name>
     <type>)]

  [Boolean Bit]
  [Integer Int]
  [Float   Frac]
  [String  Text]
  )

(type: Noneable
  [Bit Code])

(def: noneable
  (Parser Noneable)
  (let [token (' #?)]
    (<| (<>.and (<>.parses? (<c>.this! token)))
        (<>.after (<>.not (<c>.this! token)))
        <c>.any)))

(type: Constructor
  (List Noneable))

(def: constructor
  (Parser Constructor)
  (<c>.form (<>.after (<c>.this! (' new))
                      (<c>.tuple (<>.some ..noneable)))))

(type: Field
  [Bit Text Noneable])

(def: static!
  (Parser Any)
  (<c>.this! (' #static)))

(def: field
  (Parser Field)
  (<c>.form ($_ <>.and
                (<>.parses? ..static!)
                <c>.local_identifier
                ..noneable)))

(type: Common_Method
  {#name Text
   #alias (Maybe Text)
   #inputs (List Noneable)
   #io? Bit
   #try? Bit
   #output Noneable})

(type: Static_Method Common_Method)
(type: Virtual_Method Common_Method)

(type: Method
  (#Static Static_Method)
  (#Virtual Virtual_Method))

(def: common_method
  (Parser Common_Method)
  ($_ <>.and
      <c>.local_identifier
      (<>.maybe (<>.after (<c>.this! (' #as)) <c>.local_identifier))
      (<c>.tuple (<>.some ..noneable))
      (<>.parses? (<c>.this! (' #io)))
      (<>.parses? (<c>.this! (' #try)))
      ..noneable))

(def: static_method
  (<>.after ..static! ..common_method))

(def: method
  (Parser Method)
  (<c>.form (<>.or ..static_method
                   ..common_method)))

(type: Member
  (#Constructor Constructor)
  (#Field Field)
  (#Method Method))

(def: member
  (Parser Member)
  ($_ <>.or
      ..constructor
      ..field
      ..method
      ))

(def: input_variables
  (-> (List Noneable) (List [Bit Code]))
  (|>> list.enumeration
       (list\map (function (_ [idx [noneable? type]])
                   [noneable? (|> idx %.nat code.local_identifier)]))))

(def: (noneable_type [noneable? type])
  (-> Noneable Code)
  (if noneable?
    (` (.Maybe (~ type)))
    type))

(def: (with_none g!temp [noneable? input])
  (-> Code [Bit Code] Code)
  (if noneable?
    (` (case (~ input)
         (#.Some (~ g!temp))
         (~ g!temp)

         #.None
         ("python object none")))
    input))

(def: (without_none g!temp [noneable? outputT] output)
  (-> Code Noneable Code Code)
  (if noneable?
    (` (let [(~ g!temp) (~ output)]
         (if ("python object none?" (~ g!temp))
           #.None
           (#.Some (~ g!temp)))))
    (` (let [(~ g!temp) (~ output)]
         (if (not ("python object none?" (~ g!temp)))
           (~ g!temp)
           (.error! "None is an invalid value!"))))))

(type: Import
  (#Class [Text (List Member)])
  (#Function Static_Method))

(def: import
  ($_ <>.or
      ($_ <>.and
          <c>.local_identifier
          (<>.some member))
      (<c>.form ..common_method)
      ))

(syntax: #export (try expression)
  {#.doc (doc (case (try (risky_computation input))
                (#.Right success)
                (do_something success)

                (#.Left error)
                (recover_from_failure error)))}
  (wrap (list (` ("lux try" ((~! io.io) (~ expression)))))))

(def: (with_io with? without)
  (-> Bit Code Code)
  (if with?
    (` (io.io (~ without)))
    without))

(def: (io_type io? rawT)
  (-> Bit Code Code)
  (if io?
    (` (io.IO (~ rawT)))
    rawT))

(def: (with_try with? without_try)
  (-> Bit Code Code)
  (if with?
    (` (..try (~ without_try)))
    without_try))

(def: (try_type try? rawT)
  (-> Bit Code Code)
  (if try?
    (` (.Either .Text (~ rawT)))
    rawT))

(def: (make_function g!method g!temp source inputsT io? try? outputT)
  (-> Code Code Code (List Noneable) Bit Bit Noneable Code)
  (let [g!inputs (input_variables inputsT)]
    (` (def: ((~ g!method)
              [(~+ (list\map product.right g!inputs))])
         (-> [(~+ (list\map noneable_type inputsT))]
             (~ (|> (noneable_type outputT)
                    (try_type try?)
                    (io_type io?))))
         (:assume
          (~ (<| (with_io io?)
                 (with_try try?)
                 (without_none g!temp outputT)
                 (` ("python apply"
                     (:coerce ..Function (~ source))
                     (~+ (list\map (with_none g!temp) g!inputs)))))))))))

(syntax: #export (import: {import ..import})
  (with_gensyms [g!temp]
    (case import
      (#Class [class members])
      (with_gensyms [g!object]
        (let [qualify (: (-> Text Code)
                         (|>> (format class "::") code.local_identifier))
              g!type (code.local_identifier class)
              real_class (text.replace_all "/" "." class)
              imported (case (text.split_all_with "/" class)
                         (#.Cons head tail)
                         (list\fold (function (_ sub super)
                                      (` ("python object get" (~ (code.text sub))
                                          (:coerce (..Object .Any) (~ super)))))
                                    (` ("python import" (~ (code.text head))))
                                    tail)
                         
                         #.Nil
                         (` ("python import" (~ (code.text class)))))]
          (wrap (list& (` (type: (~ g!type)
                            (..Object (primitive (~ (code.text real_class))))))
                       (list\map (function (_ member)
                                   (case member
                                     (#Constructor inputsT)
                                     (let [g!inputs (input_variables inputsT)]
                                       (` (def: ((~ (qualify "new"))
                                                 [(~+ (list\map product.right g!inputs))])
                                            (-> [(~+ (list\map noneable_type inputsT))]
                                                (~ g!type))
                                            (:assume
                                             ("python apply"
                                              (:coerce ..Function (~ imported))
                                              (~+ (list\map (with_none g!temp) g!inputs)))))))
                                     
                                     (#Field [static? field fieldT])
                                     (if static?
                                       (` ((~! syntax:) ((~ (qualify field)))
                                           (\ (~! meta.monad) (~' wrap)
                                              (list (` (.:coerce (~ (noneable_type fieldT))
                                                                 ("python object get" (~ (code.text field))
                                                                  (:coerce (..Object .Any) (~ imported)))))))))
                                       (` (def: ((~ (qualify field))
                                                 (~ g!object))
                                            (-> (~ g!type)
                                                (~ (noneable_type fieldT)))
                                            (:assume
                                             (~ (without_none g!temp fieldT (` ("python object get" (~ (code.text field))
                                                                                (:coerce (..Object .Any) (~ g!object))))))))))
                                     
                                     (#Method method)
                                     (case method
                                       (#Static [method alias inputsT io? try? outputT])
                                       (..make_function (qualify (maybe.default method alias))
                                                        g!temp
                                                        (` ("python object get" (~ (code.text method))
                                                            (:coerce (..Object .Any) (~ imported))))
                                                        inputsT
                                                        io?
                                                        try?
                                                        outputT)
                                       
                                       (#Virtual [method alias inputsT io? try? outputT])
                                       (let [g!inputs (input_variables inputsT)]
                                         (` (def: ((~ (qualify (maybe.default method alias)))
                                                   [(~+ (list\map product.right g!inputs))]
                                                   (~ g!object))
                                              (-> [(~+ (list\map noneable_type inputsT))]
                                                  (~ g!type)
                                                  (~ (|> (noneable_type outputT)
                                                         (try_type try?)
                                                         (io_type io?))))
                                              (:assume
                                               (~ (<| (with_io io?)
                                                      (with_try try?)
                                                      (without_none g!temp outputT)
                                                      (` ("python object do"
                                                          (~ (code.text method))
                                                          (~ g!object)
                                                          (~+ (list\map (with_none g!temp) g!inputs)))))))))))))
                                 members)))))
      
      (#Function [name alias inputsT io? try? outputT])
      (wrap (list (..make_function (code.local_identifier (maybe.default name alias))
                                   g!temp
                                   (` ("python constant" (~ (code.text name))))
                                   inputsT
                                   io?
                                   try?
                                   outputT)))
      )))

(template: #export (lambda <inputs> <output>)
  (.:coerce ..Function
            (`` ("python function"
                 (~~ (template.count <inputs>))
                 (.function (_ [<inputs>])
                   <output>)))))
