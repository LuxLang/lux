(.module:
  lux
  (lux (control [monoid #+ Monoid])))

(def: #export (compose f g)
  {#.doc "Function composition."}
  (All [a b c]
    (-> (-> b c) (-> a b) (-> a c)))
  (|>> g f))

(def: #export (constant c)
  {#.doc "Create constant functions."}
  (All [a b] (-> a (-> b a)))
  (function (_ _) c))

(def: #export (flip f)
  {#.doc "Flips the order of the arguments of a function."}
  (All [a b c]
    (-> (-> a b c) (-> b a c)))
  (function (_ x y) (f y x)))

(struct: #export Monoid<Function> (All [a] (Monoid (-> a a)))
  (def: identity id)
  (def: compose ..compose))
