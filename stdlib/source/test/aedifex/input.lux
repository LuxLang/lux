... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.only Try)]
    [concurrency
     ["[0]" future (.only Future)]]]
   [data
    [text
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" set (.only Set)]]]
   [math
    ["[0]" random]]
   [meta
    ["[0]" code]]
   [world
    ["[0]" file]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 [//
  ["$[0]" profile]]
 [\\program
  ["[0]" / (.only)
   ["/[1]" //
    ["[1]" profile (.only Profile)]
    ["[1][0]" project]
    ["[1][0]" action]
    ["[1][0]" injection]
    [repository
     [remote (.only Address)]]]]])

(the (with_default_source sources)
  (-> (Set //.Source) (Set //.Source))
  (if (set.empty? sources)
    (set.has //.default_source sources)
    sources))

(the with_default_repository
  (-> (Set Address) (Set Address))
  (set.has //.default_repository))

(the with_defaults
  (-> Profile Profile)
  (|>> (revised //.#sources ..with_default_source)
       (revised //.#repositories ..with_default_repository)))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected (by ! each (has //.#parents (list)) $profile.random)
         .let [fs (is (file.System Future)
                      (file.mock (by file.default delimiter)))]]
        (in (do future.monad
              [verdict (do //action.monad
                         [.let [profile (|> expected
                                            (//project.project //.default)
                                            //injection.project
                                            code.as_text
                                            (by utf8.format injection))]
                          _ (by fs write //project.file profile)
                          actual (is (Future (Try Profile))
                                     (/.read future.monad fs (list)))]
                         (in (by //.equivalence = (with_defaults expected) actual)))]
              (unit.coverage [/.read]
                (try.else false verdict)))))))
