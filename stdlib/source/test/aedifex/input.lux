(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    [concurrency
     ["." promise (#+ Promise)]]]
   [data
    [text
     ["%" format]
     [encoding
      ["." utf8]]]
    [collection
     ["." set (#+ Set)]]]
   [math
    ["." random]]
   [world
    ["." file]]]
  [//
   ["$." profile]]
  [\\program
   ["." /
    ["/#" // #_
     ["#" profile (#+ Profile)]
     ["#." project]
     ["#." action]
     ["#." format]
     [repository
      [remote (#+ Address)]]]]])

(def: (with_default_source sources)
  (-> (Set //.Source) (Set //.Source))
  (if (set.empty? sources)
    (set.add //.default_source sources)
    sources))

(def: with_default_repository
  (-> (Set Address) (Set Address))
  (set.add //.default_repository))

(def: #export test
  Test
  (<| (_.covering /._)
      (do {! random.monad}
        [expected (\ ! map (set@ #//.parents (list)) $profile.random)
         #let [fs (: (file.System Promise)
                     (file.mock (\ file.default separator)))]]
        (wrap (do promise.monad
                [verdict (do //action.monad
                           [#let [profile (|> expected
                                              //format.profile
                                              %.code
                                              (\ utf8.codec encode))]
                            _ (\ fs write profile //project.file)
                            actual (: (Promise (Try Profile))
                                      (/.read promise.monad fs //.default))]
                           (wrap (\ //.equivalence =
                                    (|> expected
                                        (update@ #//.sources ..with_default_source)
                                        (update@ #//.repositories ..with_default_repository))
                                    actual)))]
                (_.cover' [/.read]
                          (try.default false verdict)))))))
