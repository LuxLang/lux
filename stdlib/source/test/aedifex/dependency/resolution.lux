... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except all)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [function
    ["[0]" predicate]]
   [concurrency
    ["[0]" future]]
   [data
    [binary (.only Binary)]
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [format
     ["[0]" xml]]
    [collection
     ["[0]" dictionary]
     ["[0]" set]
     ["[0]" stack]]]
   [math
    ["[0]" random (.only Random)]]
   [macro
    ["[0]" template]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 ["$[0]" ///
  ["[1][0]" package]
  ["[1][0]" repository]
  ["[1][0]" artifact]
  [command
   ["[1][0]" version]]]
 [\\program
  ["[0]" / (.only)
   ["//[1]" ///
    ["[1]" profile]
    ["[1][0]" package (.only Package)]
    ["[1][0]" hash]
    ["[1][0]" dependency (.only Dependency)
     ["[1]/[0]" status]]
    ["[1][0]" pom]
    ["[1][0]" artifact (.only Artifact)
     ["[1]/[0]" type]
     ["[1]/[0]" extension]]
    ["[1][0]" repository (.only Memory)
     ["[1]/[0]" origin]]]]])

(the random
  (Random /.Resolution)
  (do [! random.monad]
    [artifact $///artifact.random
     [_ package] $///package.random]
    (in (dictionary.has [///dependency.#artifact artifact
                         ///dependency.#type ///artifact/type.lux_library]
                        package
                        /.empty))))

(the lux_sha1
  Text
  (text ///artifact/extension.lux_library ///artifact/extension.sha1))

(the lux_md5
  Text
  (text ///artifact/extension.lux_library ///artifact/extension.md5))

(the pom_sha1
  Text
  (text ///artifact/extension.pom ///artifact/extension.sha1))

(the pom_md5
  Text
  (text ///artifact/extension.pom ///artifact/extension.md5))

(the sha1
  (-> Binary Binary)
  (|>> ///hash.sha1
       (by ///hash.sha1_format as)
       (by utf8.binary as)))

(the md5
  (-> Binary Binary)
  (|>> ///hash.md5
       (by ///hash.md5_format as)
       (by utf8.binary as)))

(the .public nope
  (Memory Any)
  (implementation
   (the the_description
     "[0]")
   (the (on_download uri state)
     {try.#Failure "NOPE"})
   (the (on_upload uri binary state)
     {try.#Failure "NOPE"})))

(the .public (single artifact package)
  (-> Artifact Package (Memory Any))
  (let [expected (///artifact.uri (its ///artifact.#version artifact) artifact)]
    (implementation
     (the the_description
       "[1]")
     (the (on_download uri state)
       (if (text.contains? expected uri)
         (let [library (is Binary
                           (|> package
                               (its ///package.#library)
                               product.left))
               pom (is Binary
                       (|> package
                           (its ///package.#pom)
                           product.left
                           (by xml.text as)
                           (by utf8.binary as)))]
           (if (text.ends_with? ///artifact/extension.lux_library uri)
             {try.#Success [state library]}

             (text.ends_with? ..lux_sha1 uri)
             {try.#Success [state (..sha1 library)]}

             (text.ends_with? ..lux_md5 uri)
             {try.#Success [state (..md5 library)]}
             
             (text.ends_with? ///artifact/extension.pom uri)
             {try.#Success [state pom]}

             (text.ends_with? ..pom_sha1 uri)
             {try.#Success [state (..sha1 pom)]}

             (text.ends_with? ..pom_md5 uri)
             {try.#Success [state (..md5 pom)]}

             ... else
             {try.#Failure "NOPE"}))
         {try.#Failure "NOPE"}))
     (the (on_upload uri binary state)
       {try.#Failure "NOPE"}))))

(the (bad_sha1 expected_artifact expected_package dummy_package)
  (-> Artifact Package Package (Memory Any))
  (implementation
   (the the_description
     "[~SHA1]")
   (the (on_download uri state)
     (if (text.contains? (///artifact.uri (its ///artifact.#version expected_artifact) expected_artifact) uri)
       (if (text.ends_with? ///artifact/extension.lux_library uri)
         {try.#Success [state (|> expected_package
                                  (its ///package.#library)
                                  product.left)]}

         (text.ends_with? ..lux_sha1 uri)
         {try.#Success [state (|> expected_package
                                  (its ///package.#library)
                                  product.left
                                  ..sha1)]}

         (text.ends_with? ..lux_md5 uri)
         {try.#Success [state (|> expected_package
                                  (its ///package.#library)
                                  product.left
                                  ..md5)]}
         
         (text.ends_with? ///artifact/extension.pom uri)
         {try.#Success [state (|> expected_package
                                  (its ///package.#pom)
                                  product.left
                                  (by xml.text as)
                                  (by utf8.binary as))]}

         (text.ends_with? ..pom_sha1 uri)
         {try.#Success [state (|> dummy_package
                                  (its ///package.#pom)
                                  product.left
                                  (by xml.text as)
                                  (by utf8.binary as)
                                  ..sha1)]}

         (text.ends_with? ..pom_md5 uri)
         {try.#Success [state (|> expected_package
                                  (its ///package.#pom)
                                  product.left
                                  (by xml.text as)
                                  (by utf8.binary as)
                                  ..md5)]}

         ... else
         {try.#Failure "NOPE"})
       {try.#Failure "NOPE"}))
   (the (on_upload uri binary state)
     {try.#Failure "NOPE"})))

(the (bad_md5 expected_artifact expected_package dummy_package)
  (-> Artifact Package Package (Memory Any))
  (implementation
   (the the_description
     "[~MD5]")
   (the (on_download uri state)
     (if (text.contains? (///artifact.uri (its ///artifact.#version expected_artifact) expected_artifact) uri)
       (if (text.ends_with? ///artifact/extension.lux_library uri)
         {try.#Success [state (|> expected_package
                                  (its ///package.#library)
                                  product.left)]}

         (text.ends_with? ..lux_sha1 uri)
         {try.#Success [state (|> expected_package
                                  (its ///package.#library)
                                  product.left
                                  ..sha1)]}

         (text.ends_with? ..lux_md5 uri)
         {try.#Success [state (|> dummy_package
                                  (its ///package.#library)
                                  product.left
                                  ..md5)]}
         
         (text.ends_with? ///artifact/extension.pom uri)
         {try.#Success [state (|> expected_package
                                  (its ///package.#pom)
                                  product.left
                                  (by xml.text as)
                                  (by utf8.binary as))]}

         (text.ends_with? ..pom_sha1 uri)
         {try.#Success [state (|> expected_package
                                  (its ///package.#pom)
                                  product.left
                                  (by xml.text as)
                                  (by utf8.binary as)
                                  ..sha1)]}

         (text.ends_with? ..pom_md5 uri)
         {try.#Success [state (|> dummy_package
                                  (its ///package.#pom)
                                  product.left
                                  (by xml.text as)
                                  (by utf8.binary as)
                                  ..md5)]}

         ... else
         {try.#Failure "NOPE"})
       {try.#Failure "NOPE"}))
   (the (on_upload uri binary state)
     {try.#Failure "NOPE"})))

(the one
  Test
  (do [! random.monad]
    [expected_artifact $///artifact.random
     [_ expected_package] $///package.random
     [_ dummy_package] (random.only (|>> product.right
                                         (has ///package.#pom (its ///package.#pom expected_package))
                                         (by ///package.equivalence = expected_package)
                                         not)
                                    $///package.random)
     .let [good (..single expected_artifact expected_package)
           bad_sha1 (..bad_sha1 expected_artifact expected_package dummy_package)
           bad_md5 (..bad_md5 expected_artifact expected_package dummy_package)]]
    (`` (.all _.and
              (in (do future.monad
                    [actual_package (/.one (///repository.memory good [])
                                           [///dependency.#artifact expected_artifact
                                            ///dependency.#type ///artifact/type.lux_library])]
                    (unit.coverage [/.one]
                      (when actual_package
                        {try.#Success actual_package}
                        (by ///package.equivalence =
                            (has ///package.#origin {///repository/origin.#Remote ""} expected_package)
                            actual_package)
                        
                        {try.#Failure _}
                        false))))
              (,, (template.with [<exception> <bad>]
                    [(in (do future.monad
                           [actual_package (/.one (///repository.memory <bad> [])
                                                  [///dependency.#artifact expected_artifact
                                                   ///dependency.#type ///artifact/type.lux_library])]
                           (unit.coverage [<exception>]
                             (when actual_package
                               {try.#Failure error}
                               (exception.is? <exception> error)

                               {try.#Success _}
                               false))))]

                    [/.sha1_does_not_match bad_sha1]
                    [/.md5_does_not_match bad_md5]
                    ))
              ))))

(the any
  Test
  (do [! random.monad]
    [expected_artifact $///artifact.random
     [_ expected_package] $///package.random
     [_ dummy_package] (random.only (|>> product.right
                                         (has ///package.#pom (its ///package.#pom expected_package))
                                         (by ///package.equivalence = expected_package)
                                         not)
                                    $///package.random)
     .let [good (..single expected_artifact expected_package)
           bad_sha1 (..bad_sha1 expected_artifact expected_package dummy_package)
           bad_md5 (..bad_md5 expected_artifact expected_package dummy_package)]]
    (.all _.and
          (in (do future.monad
                [.let [console ($///version.echo "")]
                 actual_package (/.any console
                                       (stack (///repository.memory bad_sha1 [])
                                              (///repository.memory bad_md5 [])
                                              (///repository.memory good []))
                                       [///dependency.#artifact expected_artifact
                                        ///dependency.#type ///artifact/type.lux_library])]
                (unit.coverage [/.any]
                  (when actual_package
                    {try.#Success actual_package}
                    (by ///package.equivalence =
                        (has ///package.#origin {///repository/origin.#Remote ""} expected_package)
                        actual_package)
                    
                    {try.#Failure _}
                    false))))
          (in (do future.monad
                [.let [console ($///version.echo "")]
                 actual_package (/.any console
                                       (stack (///repository.memory bad_sha1 [])
                                              (///repository.memory bad_md5 []))
                                       [///dependency.#artifact expected_artifact
                                        ///dependency.#type ///artifact/type.lux_library])]
                (unit.coverage [/.cannot_resolve]
                  (when actual_package
                    {try.#Failure error}
                    (exception.is? /.cannot_resolve error)

                    {try.#Success _}
                    false))))
          )))

(the artifacts
  (Random [Artifact Artifact Artifact])
  (do random.monad
    [dependee_artifact $///artifact.random
     depender_artifact (random.only (predicate.complement
                                     (by ///artifact.equivalence = dependee_artifact))
                                    $///artifact.random)
     ignored_artifact (random.only (predicate.complement
                                    (predicate.and (by ///artifact.equivalence = dependee_artifact)
                                                   (by ///artifact.equivalence = depender_artifact)))
                                   $///artifact.random)]
    (in [dependee_artifact depender_artifact ignored_artifact])))

(the (packages [dependee_artifact depender_artifact ignored_artifact])
  (-> [Artifact Artifact Artifact]
      (Random [[Dependency Dependency Dependency]
               [Package Package Package]]))
  (do random.monad
    [[_ dependee_package] $///package.random
     [_ depender_package] $///package.random
     [_ ignored_package] $///package.random

     .let [dependee [///dependency.#artifact dependee_artifact
                     ///dependency.#type ///artifact/type.lux_library]
           depender [///dependency.#artifact depender_artifact
                     ///dependency.#type ///artifact/type.lux_library]
           ignored [///dependency.#artifact ignored_artifact
                    ///dependency.#type ///artifact/type.lux_library]

           dependee_pom (|> (by ///.monoid identity)
                            (has ///.#identity {.#Some dependee_artifact})
                            ///pom.write
                            try.trusted)
           depender_pom (|> (by ///.monoid identity)
                            (has ///.#identity {.#Some depender_artifact})
                            (has ///.#dependencies (set.of_stack ///dependency.hash (stack dependee)))
                            ///pom.write
                            try.trusted)
           ignored_pom (|> (by ///.monoid identity)
                           (has ///.#identity {.#Some ignored_artifact})
                           ///pom.write
                           try.trusted)

           dependee_package (has ///package.#pom
                                 [dependee_pom
                                  (|> dependee_pom (by xml.text as) (by utf8.binary as))
                                  {///dependency/status.#Unverified}]
                                 dependee_package)
           depender_package (has ///package.#pom
                                 [depender_pom
                                  (|> depender_pom (by xml.text as) (by utf8.binary as))
                                  {///dependency/status.#Unverified}]
                                 depender_package)
           ignored_package (has ///package.#pom
                                [ignored_pom
                                 (|> ignored_pom (by xml.text as) (by utf8.binary as))
                                 {///dependency/status.#Unverified}]
                                ignored_package)]]
    (in [[dependee depender ignored]
         [dependee_package depender_package ignored_package]])))

(the all
  Test
  (do [! random.monad]
    [[dependee_artifact depender_artifact ignored_artifact] ..artifacts

     [[dependee depender ignored]
      [dependee_package depender_package ignored_package]]
     (..packages [dependee_artifact depender_artifact ignored_artifact])]
    (.all _.and
          (in (do future.monad
                [.let [console ($///version.echo "")]
                 [successes failures resolution] (/.all console
                                                        (stack (///repository.memory (..single dependee_artifact dependee_package) [])
                                                               (///repository.memory (..single depender_artifact depender_package) [])
                                                               (///repository.memory (..single ignored_artifact ignored_package) []))
                                                        (function (_ url)
                                                          (///repository.memory ..nope []))
                                                        (stack depender)
                                                        /.empty)]
                (unit.coverage [/.all]
                  (and (dictionary.key? resolution depender)
                       (stack.any? (///dependency.= depender) successes)
                       
                       (dictionary.key? resolution dependee)
                       (stack.any? (///dependency.= dependee) successes)

                       (stack.empty? failures)
                       (not (dictionary.key? resolution ignored))))))
          )))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Resolution])
      (.all _.and
            (_.for [/.equivalence]
                   (equivalenceT.spec /.equivalence ..random))

            (_.coverage [/.empty]
              (dictionary.empty? /.empty))

            ..one
            ..any
            ..all
            )))
