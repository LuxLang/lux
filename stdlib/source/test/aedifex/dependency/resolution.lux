(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     ["." predicate]
     [\\specification
      ["$." equivalence]]]
    [control
     ["." try]
     ["." exception]
     [concurrency
      ["." promise]]]
    [data
     [binary (#+ Binary)]
     ["." product]
     ["." text
      ["%" format (#+ format)]
      [encoding
       ["." utf8]]]
     [format
      ["." xml]]
     [collection
      ["." dictionary]
      ["." set]
      ["." list]]]
    [math
     ["." random (#+ Random)]]]]
  ["$." /// #_
   ["#." package]
   ["#." repository]
   ["#." artifact]
   [command
    ["#." version]]]
  [\\program
   ["." /
    ["//#" /// #_
     ["#" profile]
     ["#." package (#+ Package)]
     ["#." hash]
     ["#." dependency (#+ Dependency) ("#\." equivalence)
      ["#/." status]]
     ["#." pom]
     ["#." artifact (#+ Artifact)
      ["#/." type]
      ["#/." extension]]
     ["#." repository (#+ Mock)
      ["#/." origin]]]]])

(def: random
  (Random /.Resolution)
  (do {! random.monad}
    [artifact $///artifact.random
     [_ package] $///package.random]
    (wrap (dictionary.put {#///dependency.artifact artifact
                           #///dependency.type ///artifact/type.lux_library}
                          package
                          /.empty))))

(def: lux_sha-1
  Text
  (format ///artifact/extension.lux_library ///artifact/extension.sha-1))

(def: lux_md5
  Text
  (format ///artifact/extension.lux_library ///artifact/extension.md5))

(def: pom_sha-1
  Text
  (format ///artifact/extension.pom ///artifact/extension.sha-1))

(def: pom_md5
  Text
  (format ///artifact/extension.pom ///artifact/extension.md5))

(def: sha-1
  (-> Binary Binary)
  (|>> ///hash.sha-1
       (\ ///hash.sha-1_codec encode)
       (\ utf8.codec encode)))

(def: md5
  (-> Binary Binary)
  (|>> ///hash.md5
       (\ ///hash.md5_codec encode)
       (\ utf8.codec encode)))

(def: #export nope
  (Mock Any)
  (implementation
   (def: the_description
     "[0]")
   (def: (on_download uri state)
     (#try.Failure "NOPE"))
   (def: (on_upload uri binary state)
     (#try.Failure "NOPE"))))

(def: #export (single artifact package)
  (-> Artifact Package (Mock Any))
  (let [expected (///artifact.uri (get@ #///artifact.version artifact) artifact)]
    (implementation
     (def: the_description
       "[1]")
     (def: (on_download uri state)
       (if (text.contains? expected uri)
         (let [library (: Binary
                          (|> package
                              (get@ #///package.library)
                              product.left))
               pom (: Binary
                      (|> package
                          (get@ #///package.pom)
                          product.left
                          (\ xml.codec encode)
                          (\ utf8.codec encode)))]
           (cond (text.ends_with? ///artifact/extension.lux_library uri)
                 (#try.Success [state library])

                 (text.ends_with? ..lux_sha-1 uri)
                 (#try.Success [state (..sha-1 library)])

                 (text.ends_with? ..lux_md5 uri)
                 (#try.Success [state (..md5 library)])
                 
                 (text.ends_with? ///artifact/extension.pom uri)
                 (#try.Success [state pom])

                 (text.ends_with? ..pom_sha-1 uri)
                 (#try.Success [state (..sha-1 pom)])

                 (text.ends_with? ..pom_md5 uri)
                 (#try.Success [state (..md5 pom)])

                 ## else
                 (#try.Failure "NOPE")))
         (#try.Failure "NOPE")))
     (def: (on_upload uri binary state)
       (#try.Failure "NOPE")))))

(def: (bad_sha-1 expected_artifact expected_package dummy_package)
  (-> Artifact Package Package (Mock Any))
  (implementation
   (def: the_description
     "[~SHA-1]")
   (def: (on_download uri state)
     (if (text.contains? (///artifact.uri (get@ #///artifact.version expected_artifact) expected_artifact) uri)
       (cond (text.ends_with? ///artifact/extension.lux_library uri)
             (#try.Success [state (|> expected_package
                                      (get@ #///package.library)
                                      product.left)])

             (text.ends_with? ..lux_sha-1 uri)
             (#try.Success [state (|> expected_package
                                      (get@ #///package.library)
                                      product.left
                                      ..sha-1)])

             (text.ends_with? ..lux_md5 uri)
             (#try.Success [state (|> expected_package
                                      (get@ #///package.library)
                                      product.left
                                      ..md5)])
             
             (text.ends_with? ///artifact/extension.pom uri)
             (#try.Success [state (|> expected_package
                                      (get@ #///package.pom)
                                      product.left
                                      (\ xml.codec encode)
                                      (\ utf8.codec encode))])

             (text.ends_with? ..pom_sha-1 uri)
             (#try.Success [state (|> dummy_package
                                      (get@ #///package.pom)
                                      product.left
                                      (\ xml.codec encode)
                                      (\ utf8.codec encode)
                                      ..sha-1)])

             (text.ends_with? ..pom_md5 uri)
             (#try.Success [state (|> expected_package
                                      (get@ #///package.pom)
                                      product.left
                                      (\ xml.codec encode)
                                      (\ utf8.codec encode)
                                      ..md5)])

             ## else
             (#try.Failure "NOPE"))
       (#try.Failure "NOPE")))
   (def: (on_upload uri binary state)
     (#try.Failure "NOPE"))))

(def: (bad_md5 expected_artifact expected_package dummy_package)
  (-> Artifact Package Package (Mock Any))
  (implementation
   (def: the_description
     "[~MD5]")
   (def: (on_download uri state)
     (if (text.contains? (///artifact.uri (get@ #///artifact.version expected_artifact) expected_artifact) uri)
       (cond (text.ends_with? ///artifact/extension.lux_library uri)
             (#try.Success [state (|> expected_package
                                      (get@ #///package.library)
                                      product.left)])

             (text.ends_with? ..lux_sha-1 uri)
             (#try.Success [state (|> expected_package
                                      (get@ #///package.library)
                                      product.left
                                      ..sha-1)])

             (text.ends_with? ..lux_md5 uri)
             (#try.Success [state (|> dummy_package
                                      (get@ #///package.library)
                                      product.left
                                      ..md5)])
             
             (text.ends_with? ///artifact/extension.pom uri)
             (#try.Success [state (|> expected_package
                                      (get@ #///package.pom)
                                      product.left
                                      (\ xml.codec encode)
                                      (\ utf8.codec encode))])

             (text.ends_with? ..pom_sha-1 uri)
             (#try.Success [state (|> expected_package
                                      (get@ #///package.pom)
                                      product.left
                                      (\ xml.codec encode)
                                      (\ utf8.codec encode)
                                      ..sha-1)])

             (text.ends_with? ..pom_md5 uri)
             (#try.Success [state (|> dummy_package
                                      (get@ #///package.pom)
                                      product.left
                                      (\ xml.codec encode)
                                      (\ utf8.codec encode)
                                      ..md5)])

             ## else
             (#try.Failure "NOPE"))
       (#try.Failure "NOPE")))
   (def: (on_upload uri binary state)
     (#try.Failure "NOPE"))))

(def: one
  Test
  (do {! random.monad}
    [expected_artifact $///artifact.random
     [_ expected_package] $///package.random
     [_ dummy_package] (random.filter (|>> product.right
                                           (set@ #///package.pom (get@ #///package.pom expected_package))
                                           (\ ///package.equivalence = expected_package)
                                           not)
                                      $///package.random)
     #let [good (..single expected_artifact expected_package)
           bad_sha-1 (..bad_sha-1 expected_artifact expected_package dummy_package)
           bad_md5 (..bad_md5 expected_artifact expected_package dummy_package)]]
    (`` ($_ _.and
            (wrap
             (do promise.monad
               [actual_package (/.one (///repository.mock good [])
                                      {#///dependency.artifact expected_artifact
                                       #///dependency.type ///artifact/type.lux_library})]
               (_.cover' [/.one]
                         (case actual_package
                           (#try.Success actual_package)
                           (\ ///package.equivalence =
                              (set@ #///package.origin (#///repository/origin.Remote "") expected_package)
                              actual_package)
                           
                           (#try.Failure _)
                           false))))
            (~~ (template [<exception> <bad>]
                  [(wrap
                    (do promise.monad
                      [actual_package (/.one (///repository.mock <bad> [])
                                             {#///dependency.artifact expected_artifact
                                              #///dependency.type ///artifact/type.lux_library})]
                      (_.cover' [<exception>]
                                (case actual_package
                                  (#try.Failure error)
                                  (exception.match? <exception> error)

                                  (#try.Success _)
                                  false))))]

                  [/.sha-1_does_not_match bad_sha-1]
                  [/.md5_does_not_match bad_md5]
                  ))
            ))))

(def: any
  Test
  (do {! random.monad}
    [expected_artifact $///artifact.random
     [_ expected_package] $///package.random
     [_ dummy_package] (random.filter (|>> product.right
                                           (set@ #///package.pom (get@ #///package.pom expected_package))
                                           (\ ///package.equivalence = expected_package)
                                           not)
                                      $///package.random)
     #let [good (..single expected_artifact expected_package)
           bad_sha-1 (..bad_sha-1 expected_artifact expected_package dummy_package)
           bad_md5 (..bad_md5 expected_artifact expected_package dummy_package)]]
    ($_ _.and
        (wrap
         (do promise.monad
           [#let [console ($///version.echo "")]
            actual_package (/.any console
                                  (list (///repository.mock bad_sha-1 [])
                                        (///repository.mock bad_md5 [])
                                        (///repository.mock good []))
                                  {#///dependency.artifact expected_artifact
                                   #///dependency.type ///artifact/type.lux_library})]
           (_.cover' [/.any]
                     (case actual_package
                       (#try.Success actual_package)
                       (\ ///package.equivalence =
                          (set@ #///package.origin (#///repository/origin.Remote "") expected_package)
                          actual_package)
                       
                       (#try.Failure _)
                       false))))
        (wrap
         (do promise.monad
           [#let [console ($///version.echo "")]
            actual_package (/.any console
                                  (list (///repository.mock bad_sha-1 [])
                                        (///repository.mock bad_md5 []))
                                  {#///dependency.artifact expected_artifact
                                   #///dependency.type ///artifact/type.lux_library})]
           (_.cover' [/.cannot_resolve]
                     (case actual_package
                       (#try.Failure error)
                       (exception.match? /.cannot_resolve error)

                       (#try.Success _)
                       false))))
        )))

(def: artifacts
  (Random [Artifact Artifact Artifact])
  (do random.monad
    [dependee_artifact $///artifact.random
     depender_artifact (random.filter (predicate.complement
                                       (\ ///artifact.equivalence = dependee_artifact))
                                      $///artifact.random)
     ignored_artifact (random.filter (predicate.complement
                                      (predicate.unite (\ ///artifact.equivalence = dependee_artifact)
                                                       (\ ///artifact.equivalence = depender_artifact)))
                                     $///artifact.random)]
    (wrap [dependee_artifact depender_artifact ignored_artifact])))

(def: (packages [dependee_artifact depender_artifact ignored_artifact])
  (-> [Artifact Artifact Artifact]
      (Random [[Dependency Dependency Dependency]
               [Package Package Package]]))
  (do random.monad
    [[_ dependee_package] $///package.random
     [_ depender_package] $///package.random
     [_ ignored_package] $///package.random

     #let [dependee {#///dependency.artifact dependee_artifact
                     #///dependency.type ///artifact/type.lux_library}
           depender {#///dependency.artifact depender_artifact
                     #///dependency.type ///artifact/type.lux_library}
           ignored {#///dependency.artifact ignored_artifact
                    #///dependency.type ///artifact/type.lux_library}

           dependee_pom (|> (\ ///.monoid identity)
                            (set@ #///.identity (#.Some dependee_artifact))
                            ///pom.write
                            try.assume)
           depender_pom (|> (\ ///.monoid identity)
                            (set@ #///.identity (#.Some depender_artifact))
                            (set@ #///.dependencies (set.from_list ///dependency.hash (list dependee)))
                            ///pom.write
                            try.assume)
           ignored_pom (|> (\ ///.monoid identity)
                           (set@ #///.identity (#.Some ignored_artifact))
                           ///pom.write
                           try.assume)

           dependee_package (set@ #///package.pom
                                  [dependee_pom
                                   (|> dependee_pom (\ xml.codec encode) (\ utf8.codec encode))
                                   #///dependency/status.Unverified]
                                  dependee_package)
           depender_package (set@ #///package.pom
                                  [depender_pom
                                   (|> depender_pom (\ xml.codec encode) (\ utf8.codec encode))
                                   #///dependency/status.Unverified]
                                  depender_package)
           ignored_package (set@ #///package.pom
                                 [ignored_pom
                                  (|> ignored_pom (\ xml.codec encode) (\ utf8.codec encode))
                                  #///dependency/status.Unverified]
                                 ignored_package)]]
    (wrap [[dependee depender ignored]
           [dependee_package depender_package ignored_package]])))

(def: all
  Test
  (do {! random.monad}
    [[dependee_artifact depender_artifact ignored_artifact] ..artifacts

     [[dependee depender ignored]
      [dependee_package depender_package ignored_package]]
     (..packages [dependee_artifact depender_artifact ignored_artifact])]
    ($_ _.and
        (wrap
         (do promise.monad
           [#let [console ($///version.echo "")]
            [successes failures resolution] (/.all console
                                                   (list (///repository.mock (..single dependee_artifact dependee_package) [])
                                                         (///repository.mock (..single depender_artifact depender_package) [])
                                                         (///repository.mock (..single ignored_artifact ignored_package) []))
                                                   (function (_ url)
                                                     (///repository.mock ..nope []))
                                                   (list depender)
                                                   /.empty)]
           (_.cover' [/.all]
                     (and (dictionary.key? resolution depender)
                          (list.any? (///dependency\= depender) successes)
                          
                          (dictionary.key? resolution dependee)
                          (list.any? (///dependency\= dependee) successes)

                          (list.empty? failures)
                          (not (dictionary.key? resolution ignored))))))
        )))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Resolution])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (_.cover [/.empty]
                   (dictionary.empty? /.empty))

          ..one
          ..any
          ..all
          )))
