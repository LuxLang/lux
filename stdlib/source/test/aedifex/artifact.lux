(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [hash (.only Hash)]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" order]
     ["$[0]" hash]]]
   [data
    ["[0]" text (.open: "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]]
   [world
    ["[0]" file]
    [net
     ["[0]" uri]]]]]
 ["[0]" /
  ["[1][0]" extension]
  ["[1][0]" snapshot]
  ["[1][0]" time]
  ["[1][0]" type]
  ["[1][0]" versioning]]
 [\\program
  ["[0]" /]])

(def: .public random
  (Random /.Artifact)
  (let [size 4]
    (all random.and
         (random.lower_case size)
         (random.lower_case size)
         (random.lower_case size))))

(def: .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [sample ..random])
      (_.for [/.Group /.Name /.Version
              /.Artifact]
             (all _.and
                  (_.for [/.equivalence]
                         ($equivalence.spec /.equivalence ..random))
                  (_.for [/.order]
                         ($order.spec /.order ..random))
                  (_.for [/.hash]
                         ($hash.spec /.hash ..random))

                  (_.coverage [/.format /.identity]
                    (and (text.ends_with? (/.identity sample) (/.format sample))
                         (not (text#= (/.identity sample) (/.format sample)))))
                  
                  /extension.test
                  /snapshot.test
                  /time.test
                  /type.test
                  /versioning.test
                  ))))
