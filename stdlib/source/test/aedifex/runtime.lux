(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [data
    ["." maybe ("#\." functor)]
    ["." text ("#\." equivalence)]
    [collection
     ["." list ("#\." functor)]
     ["." set]]]
   [math
    ["." random (#+ Random) ("#\." monad)]
    [number
     ["n" nat]]]]
  [\\program
   ["." /]])

(def: #export random
  (Random /.Runtime)
  ($_ random.either
      (random\wrap /.default_java)
      (random\wrap /.default_js)
      (random\wrap /.default_python)
      (random\wrap /.default_lua)
      (random\wrap /.default_ruby)
      ))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Runtime])
      (do random.monad
        [path (random.ascii/alpha 5)
         runtime ..random]
        (`` ($_ _.and
                (~~ (template [<command>]
                      [(_.cover [/.default_java /.default_js /.default_python /.default_lua /.default_ruby]
                                (let [listing (|> (list /.default_java /.default_js /.default_python /.default_lua /.default_ruby)
                                                  (list\map (get@ #/.program)))
                                      unique (set.from_list text.hash listing)]
                                  (n.= (list.size listing)
                                       (set.size unique))))]

                      [/.default_java]
                      [/.default_js]
                      [/.default_python]
                      [/.default_lua]
                      [/.default_ruby]
                      ))
                (_.cover [/.for]
                         (let [runtime' (/.for runtime path)]
                           (and (text\= (get@ #/.program runtime)
                                        (get@ #/.program runtime'))
                                (|> runtime'
                                    (get@ #/.parameters)
                                    list.last
                                    (maybe\map (text\= path))
                                    (maybe.default false)))))
                )))))
