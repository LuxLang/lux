... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io (.only IO)]
    ["[0]" maybe (.use "[1]#[0]" functor)]
    ["[0]" try (.use "[1]#[0]" monad)]
    ["[0]" exception]]
   ["[0]" function]
   [data
    ["[0]" binary]
    ["[0]" text (.only)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" dictionary]]]
   [math
    ["[0]" random (.only Random)]]
   [macro
    ["[0]" expansion]]
   [world
    [net (.only URL)
     ["[0]" http
      ["[1]" client]
      ["[1]/[0]" status]
      ["@[1]" /]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\program
  ["[0]" / (.only)
   ["/[1]" //
    ["[1][0]" identity]]]])

(the (url_body url)
  (-> URL (@http.Body IO))
  (let [url (by utf8.binary as url)]
    (function (_ _)
      (io.io {try.#Success [(binary.size url) url]}))))

(the (good_http user password)
  (-> //identity.User //identity.Password (http.Client IO))
  (implementation
   (the (request method url headers input)
     (expansion.let [<failure> [http/status.bad_request
                                [@http.#headers (http.headers (stack))
                                 @http.#body (..url_body "")]]]
       (<| io.io
           {try.#Success}
           (if (|> headers
                   (dictionary.value "User-Agent")
                   (maybe#each (same? /.user_agent))
                   (maybe.else false))
             (when [method input]
               [{@http.#Get} {.#None}]
               [http/status.ok
                [@http.#headers (http.headers (stack))
                 @http.#body (..url_body url)]]
               
               [{@http.#Put} {.#Some input}]
               (if (|> headers
                       (dictionary.value "Authorization")
                       (maybe#each (text.= (//identity.basic_auth user password)))
                       (maybe.else false))
                 [http/status.created
                  [@http.#headers (http.headers (stack))
                   @http.#body (..url_body url)]]
                 <failure>)
               
               _
               <failure>)
             <failure>))))))

(the bad_http
  (http.Client IO)
  (implementation
   (the (request method url headers input)
     (<| io.io
         {try.#Success}
         [http/status.bad_request
          [@http.#headers (http.headers (stack))
           @http.#body (..url_body "")]]))))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [address (random.upper_cased 10)
         uri (random.lower_cased 10)

         user (random.lower_cased 10)
         password (random.lower_cased 10)

         content (by ! each (by utf8.binary as)
                     (random.lower_cased 10))]
        (all _.and
             (_.coverage [/.repository /.user_agent /.Address]
               (let [repo (/.repository (..good_http user password)
                                        {.#Some [//identity.#user user
                                                 //identity.#password password]}
                                        address)]
                 (and (|> (by repo download uri)
                          io.value
                          (try#each (by utf8.binary of))
                          try#conjoint
                          (try#each (text.= (text address uri)))
                          (try.else false))
                      (|> (by repo upload uri content)
                          io.value
                          (try#each (function.constant true))
                          (try.else false)))))
             (_.coverage [/.upload_failure]
               (let [repo (/.repository (..good_http user password)
                                        {.#None}
                                        address)]
                 (when (io.value (by repo upload uri content))
                   {try.#Failure error}
                   (exception.is? /.upload_failure error)
                   
                   {try.#Success _}
                   false)))
             (_.coverage [/.download_failure]
               (let [repo (/.repository ..bad_http
                                        {.#None}
                                        address)]
                 (when (io.value (by repo download uri))
                   {try.#Failure error}
                   (exception.is? /.download_failure error)
                   
                   {try.#Success _}
                   false)))
             ))))
