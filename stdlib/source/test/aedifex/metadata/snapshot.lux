... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["[0]" maybe]
    ["[0]" try (.use "[1]#[0]" functor)]
    [concurrency
     ["[0]" async]]]
   [data
    ["[0]" text]
    [format
     ["[0]" xml
      ["<[1]>" \\projection]]]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" natural]]]
   [meta
    ["[0]" code]]
   [world
    ["[0]" file]
    ["[0]" environment
     ["program" /]
     ["[1]" \\projection]]
    ["[0]" time (.only)
     ["[0]" date]
     ["[0]" year]
     ["[0]" month]
     ["[0]" instant (.only Instant)]
     ["[0]" duration]]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 ["$[0]" ///
  ["[1][0]" artifact (.only)
   ["[1]/[0]" type]
   ["[1]/[0]" time]
   ["[1]/[0]" snapshot
    ["[1]/[0]" version]]]]
 [\\program
  ["[0]" / (.only)
   ["/[1]" // (.only)
    ["/[1]" //
     [artifact
      [versioning (.only Versioning)]
      ["[1][0]" snapshot]]
     ["[1][0]" repository
      ["[1]/[0]" local]]]]]])

(the random_instant
  (Random Instant)
  (do [! random.monad]
    [year (of ! each (|>> (n.% 9,000) (n.+ 1,000) .int) random.natural)
     month (of ! each (|>> (n.% 12) (n.+ 1)) random.natural)
     day_of_month (of ! each (|>> (n.% 28) (n.+ 1)) random.natural)
     hour (of ! each (n.% 24) random.natural)
     minute (of ! each (n.% 60) random.natural)
     second (of ! each (n.% 60) random.natural)]
    (in (try.trusted
         (do try.monad
           [year (year.year year)
            month (month.by_number month)
            date (date.date year month day_of_month)
            time (time.time
                  [time.#hour hour
                   time.#minute minute
                   time.#second second
                   time.#milli_second 0])]
           (in (instant.of_date_time date time)))))))

(the random_versioning
  (Random Versioning)
  (all random.and
       (random#in {///snapshot.#Local})
       $///artifact/time.random
       (random.list 5 $///artifact/snapshot/version.random)
       ))

(the .public random
  (Random /.Metadata)
  (all random.and
       $///artifact.random
       ..random_versioning
       ))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Metadata])
      (do random.monad
        [expected ..random
         .let [artifact (its /.#artifact expected)]]
        (all _.and
             (_.for [/.equivalence]
                    (equivalenceT.spec /.equivalence ..random))
             
             (_.coverage [/.injection /.projection]
               (|> expected
                   /.injection
                   list
                   (<xml>.value /.projection)
                   (try#each (of /.equivalence = expected))
                   (try.else false)))
             (_.coverage [/.uri]
               (text.= (//.remote_artifact_uri artifact)
                       (/.uri artifact)))
             (do random.monad
               [home (random.lower_cased 5)
                working_directory (random.lower_cased 5)
                .let [program (program.async (program.mock environment.empty home working_directory))
                      fs (file.mock (of file.default separator))
                      repository (///repository/local.repository program fs)]]
               (in (do async.monad
                     [wrote? (/.write repository artifact expected)
                      actual (/.read repository artifact)]
                     (unit.coverage [/.write /.read]
                       (and (when wrote?
                              {try.#Success _} true
                              {try.#Failure _} false)
                            (when actual
                              {try.#Success actual}
                              (of /.equivalence = expected actual)
                              
                              {try.#Failure _}
                              false))))))
             ))))
