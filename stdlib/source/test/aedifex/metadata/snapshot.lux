(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" maybe]
    ["[0]" try ("[1]#[0]" functor)]
    [parser
     ["[0]" environment]
     ["<[0]>" xml]]
    [concurrency
     ["[0]" async]]]
   [data
    ["[0]" text ("[1]#[0]" equivalence)]
    [collection
     ["[0]" list]]]
   [macro
    ["[0]" code]]
   [math
    ["[0]" random {"+" Random} ("[1]#[0]" monad)]
    [number
     ["n" nat]]]
   ["[0]" time
    ["[0]" date]
    ["[0]" year]
    ["[0]" month]
    ["[0]" instant {"+" Instant}]
    ["[0]" duration]]
   [world
    ["[0]" file]
    ["[0]" program]]]]
 ["$[0]" /// "_"
  ["[1][0]" artifact
   ["[1]/[0]" type]
   ["[1]/[0]" time]
   ["[1]/[0]" snapshot "_"
    ["[1]/[0]" version]]]]
 [\\program
  ["[0]" /
   ["/[1]" //
    ["/[1]" // "_"
     [artifact
      [versioning {"+" Versioning}]
      ["[1][0]" snapshot]]
     ["[1][0]" repository "_"
      ["[1]/[0]" local]]]]]])

(def: random_instant
  (Random Instant)
  (do [! random.monad]
    [year (# ! each (|>> (n.% 9,000) (n.+ 1,000) .int) random.nat)
     month (# ! each (|>> (n.% 12) (n.+ 1)) random.nat)
     day_of_month (# ! each (|>> (n.% 28) (n.+ 1)) random.nat)
     hour (# ! each (n.% 24) random.nat)
     minute (# ! each (n.% 60) random.nat)
     second (# ! each (n.% 60) random.nat)]
    (in (try.trusted
         (do try.monad
           [year (year.year year)
            month (month.by_number month)
            date (date.date year month day_of_month)
            time (time.time
                  [time.#hour hour
                   time.#minute minute
                   time.#second second
                   time.#milli_second 0])]
           (in (instant.of_date_time date time)))))))

(def: random_versioning
  (Random Versioning)
  (all random.and
       (random#in {///snapshot.#Local})
       $///artifact/time.random
       (random.list 5 $///artifact/snapshot/version.random)
       ))

(def: .public random
  (Random /.Metadata)
  (all random.and
       $///artifact.random
       ..random_versioning
       ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Metadata])
      (do random.monad
        [expected ..random
         .let [artifact (the /.#artifact expected)]]
        (all _.and
             (_.for [/.equivalence]
                    ($equivalence.spec /.equivalence ..random))
             
             (_.cover [/.format /.parser]
                      (|> expected
                          /.format
                          list
                          (<xml>.result /.parser)
                          (try#each (# /.equivalence = expected))
                          (try.else false)))
             (_.cover [/.uri]
                      (text#= (//.remote_artifact_uri artifact)
                              (/.uri artifact)))
             (do random.monad
               [home (random.ascii/lower 5)
                working_directory (random.ascii/lower 5)
                .let [program (program.async (program.mock environment.empty home working_directory))
                      fs (file.mock (# file.default separator))
                      repository (///repository/local.repository program fs)]]
               (in (do async.monad
                     [wrote? (/.write repository artifact expected)
                      actual (/.read repository artifact)]
                     (_.cover' [/.write /.read]
                               (and (case wrote?
                                      {try.#Success _} true
                                      {try.#Failure _} false)
                                    (case actual
                                      {try.#Success actual}
                                      (# /.equivalence = expected actual)
                                      
                                      {try.#Failure _}
                                      false))))))
             ))))
