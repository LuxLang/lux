(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try (.open: "[1]#[0]" functor)]
    [parser
     ["<[0]>" text]]]
   [time
    ["[0]" instant (.open: "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["i" int]]]]]
 [\\program
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" date]
  ["[1][0]" time]])

(def: .public random
  (Random /.Time)
  (do random.monad
    [date /date.random
     time /time.random]
    (in [date time])))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Time])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))

           (do random.monad
             [expected ..random]
             (_.coverage [/.format /.parser]
               (|> expected
                   /.format
                   (<text>.result /.parser)
                   (try#each (# /.equivalence = expected))
                   (try.else false))))
           (do random.monad
             [expected ..random]
             (_.coverage [/.instant /.of_instant]
               (|> expected
                   /.instant
                   /.of_instant
                   (try#each (# /.equivalence = expected))
                   (try.else false))))
           (_.coverage [/.epoch]
             (instant#= instant.epoch (/.instant /.epoch)))

           /date.test
           /time.test
           )))
