(.require
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    [format
     ["[0]" xml
      ["<[1]>" \\parser]]]]
   [math
    ["[0]" random (.only Random)]]]]
 [\\program
  ["[0]" /]])

(def .public random
  (Random /.Build)
  random.nat)

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Build]
             (all _.and
                  (_.for [/.equivalence]
                         ($equivalence.spec /.equivalence ..random))
                  
                  (do random.monad
                    [expected ..random]
                    (_.coverage [/.format /.parser]
                      (|> expected
                          /.format
                          list
                          (<xml>.result /.parser)
                          (try#each (at /.equivalence = expected))
                          (try.else false))))
                  ))))
