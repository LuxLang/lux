(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    [abstract
     [monad {"+" [do]}]
     [\\specification
      ["$[0]" equivalence]]]
    [control
     ["[0]" try ("[1]\[0]" functor)]
     [parser
      ["<[0]>" xml]]]
    [math
     ["[0]" random {"+" [Random]}]]
    [time
     ["[0]" instant]]]]
  [\\program
   ["[0]" /]]
  ["$[0]" // "_"
   ["[1][0]" time]
   ["[1][0]" build]])

(def: .public random
  (Random /.Stamp)
  ($_ random.and
      $//time.random
      $//build.random
      ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Stamp])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (do random.monad
            [expected ..random]
            (_.cover [/.format /.parser]
                     (|> expected
                         /.format
                         (<xml>.result /.parser)
                         (try\each (\ /.equivalence = expected))
                         (try.else false))))
          )))
