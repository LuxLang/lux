(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" text
     ["<[1]>" \\parser]]]
   [math
    ["[0]" random (.only Random)]]
   [test
    ["_" property (.only Test)]]]]
 [\\program
  ["[0]" /]]
 ["$[0]" ///
  ["[1][0]" time]])

(def .public random
  (Random /.Time)
  $///time.random)

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Time])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))

           (do random.monad
             [expected ..random]
             (all _.and
                  (_.coverage [/.format /.parser]
                    (|> expected
                        /.format
                        (<text>.result /.parser)
                        (try#each (of /.equivalence = expected))
                        (try.else false)))
                  ))
           )))
