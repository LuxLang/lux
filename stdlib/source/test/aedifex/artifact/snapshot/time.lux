(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    [abstract
     [monad {"+" [do]}]
     [\\specification
      ["$[0]" equivalence]]]
    [control
     ["[0]" try ("[1]\[0]" functor)]
     [parser
      ["<[0]>" text]]]
    [math
     ["[0]" random {"+" [Random]}]]]]
  [\\program
   ["[0]" /]]
  ["$[0]" /// "_"
   ["[1][0]" time]])

(def: .public random
  (Random /.Time)
  $///time.random)

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Time])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (do random.monad
            [expected ..random]
            ($_ _.and
                (_.cover [/.format /.parser]
                         (|> expected
                             /.format
                             (<text>.result /.parser)
                             (try\each (\ /.equivalence = expected))
                             (try.else false)))
                ))
          )))
