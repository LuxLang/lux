(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]]}]
   [control
    ["." try ("#\." functor)]
    [parser
     ["<.>" text]]]
   [math
    ["." random (#+ Random)]]
   [time
    ["." instant]]]
  {#program
   ["." /]})

(def: #export random
  (Random /.Time)
  random.instant)

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Time])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (do random.monad
            [expected ..random]
            ($_ _.and
                (_.cover [/.format /.parser]
                         (|> expected
                             /.format
                             (<text>.run /.parser)
                             (try\map (\ instant.equivalence = expected))
                             (try.default false)))
                ))
          )))
