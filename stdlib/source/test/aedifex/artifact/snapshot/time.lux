(.using
 [library
  [lux (.full)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try ("[1]#[0]" functor)]
    [parser
     ["<[0]>" text]]]
   [math
    ["[0]" random (.only Random)]]]]
 [\\program
  ["[0]" /]]
 ["$[0]" /// "_"
  ["[1][0]" time]])

(def: .public random
  (Random /.Time)
  $///time.random)

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Time])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))

           (do random.monad
             [expected ..random]
             (all _.and
                  (_.coverage [/.format /.parser]
                    (|> expected
                        /.format
                        (<text>.result /.parser)
                        (try#each (# /.equivalence = expected))
                        (try.else false)))
                  ))
           )))
