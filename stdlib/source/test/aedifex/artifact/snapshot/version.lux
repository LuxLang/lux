(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]]]
    [control
     ["." try ("#\." functor)]
     [parser
      ["<.>" xml]]]
    [math
     ["." random (#+ Random)]]]]
  [\\program
   ["." /]]
  ["." / #_
   ["#." value]]
  ["$." /// #_
   ["#." type]
   ["#." time]])

(def: .public random
  (Random /.Version)
  ($_ random.and
      $///type.random
      (random.ascii/alpha 1)
      $///time.random
      ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Version])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (do random.monad
            [expected ..random]
            (_.cover [/.format /.parser]
                     (|> expected
                         /.format
                         list
                         (<xml>.result /.parser)
                         (try\each (\ /.equivalence = expected))
                         (try.else false))))

          /value.test
          )))
