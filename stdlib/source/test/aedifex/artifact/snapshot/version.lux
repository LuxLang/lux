(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]]}]
   [control
    ["." try ("#\." functor)]
    [parser
     ["<.>" xml]]]
   [math
    ["." random (#+ Random)]]]
  {#program
   ["." /]}
  ["." / #_
   ["#." value]]
  ["$." /// #_
   ["#." type]
   ["#." time]])

(def: #export random
  (Random /.Version)
  ($_ random.and
      $///type.random
      (random.ascii/alpha 1)
      $///time.random
      ))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Version])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (do random.monad
            [expected ..random]
            (_.cover [/.format /.parser]
                     (|> expected
                         /.format
                         list
                         (<xml>.run /.parser)
                         (try\map (\ /.equivalence = expected))
                         (try.default false))))

          /value.test
          )))
