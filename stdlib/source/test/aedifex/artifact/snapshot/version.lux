(.require
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    [format
     ["[0]" xml
      ["<[1]>" \\parser]]]]
   [math
    ["[0]" random (.only Random)]]]]
 [\\program
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" value]]
 ["$[0]" ///
  ["[1][0]" type]
  ["[1][0]" time]])

(def .public random
  (Random /.Version)
  (all random.and
       $///type.random
       (random.alphabetic 1)
       $///time.random
       ))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Version])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))

           (do random.monad
             [expected ..random]
             (_.coverage [/.format /.parser]
               (|> expected
                   /.format
                   list
                   (<xml>.result /.parser)
                   (try#each (at /.equivalence = expected))
                   (try.else false))))

           /value.test
           )))
