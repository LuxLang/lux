(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try ("[1]#[0]" functor)]
    [parser
     ["<[0]>" xml]]]
   [math
    ["[0]" random {"+" Random} ("[1]#[0]" monad)]]]]
 ["$[0]" / "_"
  ["[1][0]" build]
  ["[1][0]" stamp]
  ["[1][0]" time]
  ["[1][0]" version]]
 [\\program
  ["[0]" /]])

(def: .public random
  (Random /.Snapshot)
  (random.or (random#in [])
             $/stamp.random))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Snapshot]
             (all _.and
                  (_.for [/.equivalence]
                         ($equivalence.spec /.equivalence ..random))
                  
                  (do random.monad
                    [expected ..random]
                    (_.coverage [/.format /.parser]
                      (|> expected
                          /.format
                          list
                          (<xml>.result /.parser)
                          (try#each (# /.equivalence = expected))
                          (try.else false))))

                  $/build.test
                  $/stamp.test
                  $/time.test
                  $/version.test
                  ))))
