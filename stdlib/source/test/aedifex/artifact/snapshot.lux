(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]]}]
   [control
    ["." try ("#\." functor)]
    [parser
     ["<.>" xml]]]
   [math
    ["." random (#+ Random) ("#\." monad)]]]
  ["$." / #_
   ["#." build]
   ["#." time]
   ["#." stamp]
   ["#." version
    ["#/." value]]]
  {#program
   ["." /]})

(def: #export random
  (Random /.Snapshot)
  (random.or (random\wrap [])
             $/stamp.random))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Snapshot]
             ($_ _.and
                 (_.for [/.equivalence]
                        ($equivalence.spec /.equivalence ..random))
                 
                 (do random.monad
                   [expected ..random]
                   (_.cover [/.format /.parser]
                            (|> expected
                                /.format
                                list
                                (<xml>.run /.parser)
                                (try\map (\ /.equivalence = expected))
                                (try.default false))))

                 $/build.test
                 $/time.test
                 $/stamp.test
                 $/version.test
                 $/version/value.test
                 ))))
