(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]]]
    [control
     ["." try ("#\." functor)]
     [parser
      ["<.>" xml]]]
    [math
     ["." random (#+ Random)]]]]
  [\\program
   ["." /]]
  ["$." // #_
   ["#." time]
   ["#." snapshot
    ["#/." version]]])

(def: .public random
  (Random /.Versioning)
  ($_ random.and
      $//snapshot.random
      $//time.random
      (random.list 5 $//snapshot/version.random)
      ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Versioning])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))
          
          (do random.monad
            [expected ..random]
            (_.cover [/.format /.parser]
                     (|> expected
                         /.format
                         list
                         (<xml>.result /.parser)
                         (try\map (\ /.equivalence = expected))
                         (try.else false))))
          (_.cover [/.init]
                   (|> /.init
                       /.format
                       list
                       (<xml>.result /.parser)
                       (try\map (\ /.equivalence = /.init))
                       (try.else false)))
          )))
