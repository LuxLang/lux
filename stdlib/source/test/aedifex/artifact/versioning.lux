(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    [\spec
     ["$." equivalence]]]
   [control
    ["." try ("#\." functor)]
    [parser
     ["<.>" xml]]]
   [math
    ["." random (#+ Random)]]]
  [\\program
   ["." /]]
  ["$." // #_
   ["#." time]
   ["#." snapshot
    ["#/." version]]])

(def: #export random
  (Random /.Versioning)
  ($_ random.and
      $//snapshot.random
      $//time.random
      (random.list 5 $//snapshot/version.random)
      ))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Versioning])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))
          
          (do random.monad
            [expected ..random]
            (_.cover [/.format /.parser]
                     (|> expected
                         /.format
                         list
                         (<xml>.run /.parser)
                         (try\map (\ /.equivalence = expected))
                         (try.default false))))
          (_.cover [/.init]
                   (|> /.init
                       /.format
                       list
                       (<xml>.run /.parser)
                       (try\map (\ /.equivalence = /.init))
                       (try.default false)))
          )))
