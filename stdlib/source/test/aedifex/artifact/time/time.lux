(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    ["." time]
    [abstract
     [monad (#+ do)]]
    [control
     ["." try ("#\." functor)]
     [parser
      ["<.>" text]]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]
      ["i" int]]]]]
  [\\program
   ["." /]])

(def: .public random
  (Random /.Time)
  (random.one (|>> time.clock (set@ #time.milli_second 0) time.time)
              random.time))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Time])
      ($_ _.and
          (do random.monad
            [expected ..random]
            (_.cover [/.format /.parser]
                     (|> expected
                         /.format
                         (<text>.result /.parser)
                         (try\map (\ time.equivalence = expected))
                         (try.else false))))
          )))
