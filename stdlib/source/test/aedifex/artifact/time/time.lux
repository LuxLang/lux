(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   ["[0]" time]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.open: "[1]#[0]" functor)]
    [parser
     ["<[0]>" text]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]
     ["i" int]]]]]
 [\\program
  ["[0]" /]])

(def: .public random
  (Random /.Time)
  (random.one (|>> time.clock
                   (has time.#milli_second 0)
                   time.time)
              random.time))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Time])
      (all _.and
           (do random.monad
             [expected ..random]
             (_.coverage [/.format /.parser]
               (|> expected
                   /.format
                   (<text>.result /.parser)
                   (try#each (# time.equivalence = expected))
                   (try.else false))))
           )))
