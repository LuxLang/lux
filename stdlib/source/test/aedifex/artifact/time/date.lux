(.module:
  [library
   [lux "*"
    ["_" test {"+" Test}]
    [abstract
     [monad {"+" do}]
     [\\specification
      ["$[0]" equivalence]]]
    [control
     ["[0]" try ("[1]#[0]" functor)]
     ["[0]" exception]
     [parser
      ["<[0]>" text]]]
    [math
     ["[0]" random {"+" Random}]
     [number
      ["n" nat]
      ["i" int]]]
    [time
     ["[0]" date ("[1]#[0]" equivalence)]
     ["[0]" year]]]]
  [\\program
   ["[0]" /]])

(def: .public random
  (Random /.Date)
  (random.one (function (_ raw)
                (try.maybe
                 (do try.monad
                   [year (|> raw date.year year.value i.abs (i.% +9,000) (i.+ +1,000) year.year)
                    raw (date.date year
                                   (date.month raw)
                                   (date.day_of_month raw))]
                   (/.date raw))))
              random.date))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Date])
      (do random.monad
        [expected ..random
         candidate random.date]
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec /.equivalence ..random))

            (_.cover [/.format /.parser]
                     (|> expected
                         /.format
                         (<text>.result /.parser)
                         (try#each (# /.equivalence = expected))
                         (try.else false)))
            (_.cover [/.value /.date]
                     (|> expected
                         /.value
                         /.date
                         (try#each (# /.equivalence = expected))
                         (try.else false)))
            (_.cover [/.year_is_out_of_range]
                     (case (/.date candidate)
                       {try.#Success date}
                       (same? candidate (/.value date))
                       
                       {try.#Failure error}
                       (exception.match? /.year_is_out_of_range error)))
            (_.cover [/.epoch]
                     (date#= date.epoch (/.value /.epoch)))
            ))))
