(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try ("#\." functor)]
    [parser
     ["<.>" text]]]
   [math
    ["." random (#+ Random)]
    [number
     ["n" nat]
     ["i" int]]]
   [time
    ["." date]
    ["." year]]]
  [\\program
   ["." /]])

(def: #export random
  (Random /.Date)
  (random.one (function (_ raw)
                (try.to_maybe
                 (do try.monad
                   [year (|> raw date.year year.value i.abs (i.% +9,000) (i.+ +1,000) year.year)
                    raw (date.date year
                                   (date.month raw)
                                   (date.day_of_month raw))]
                   (/.date raw))))
              random.date))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Date])
      ($_ _.and
          (do random.monad
            [expected ..random]
            (_.cover [/.format /.parser]
                     (|> expected
                         /.format
                         (<text>.run /.parser)
                         (try\map (\ /.equivalence = expected))
                         (try.default false))))
          )))
