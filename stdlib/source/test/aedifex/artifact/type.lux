(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [data
     ["." text]
     [collection
      ["." set]
      ["." list]]]
    [math
     ["." random (#+ Random) ("#\." monad)]
     [number
      ["n" nat]]]]]
  [\\program
   ["." /]])

(def: #export random
  (Random /.Type)
  ($_ random.either
      ($_ random.either
          (random\wrap /.lux_library)
          (random\wrap /.jvm_library))
      ($_ random.either
          (random\wrap /.pom)
          (random\wrap /.md5)
          (random\wrap /.sha-1))
      ))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Type]
             ($_ _.and
                 (_.cover [/.lux_library /.jvm_library /.js_library
                           /.pom /.md5 /.sha-1]
                          (let [options (list /.lux_library /.jvm_library /.js_library
                                              /.pom /.md5 /.sha-1)
                                uniques (set.of_list text.hash options)]
                            (n.= (list.size options)
                                 (set.size uniques))))
                 ))))
