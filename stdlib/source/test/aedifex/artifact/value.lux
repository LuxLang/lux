(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]]}]
   [control
    ["." try ("#\." functor)]
    [parser
     ["<.>" text]]]
   [math
    ["." random (#+ Random)]
    [number
     ["n" nat]
     ["i" int]]]
   [time
    ["." instant]]]
  {#program
   ["." /]})

(def: #export random
  (Random /.Value)
  ($_ random.and
      (random.ascii/alpha 5)
      random.instant
      random.nat
      ))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Build /.Value])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))
          )))
