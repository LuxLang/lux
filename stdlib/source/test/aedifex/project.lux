(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\spec
      ["$." equivalence]
      ["$." monoid]]]
    [control
     ["." try ("#\." functor)]
     ["." exception]]
    [data
     ["." product]
     ["." text ("#\." equivalence)]]
    [math
     ["." random (#+ Random) ("#\." monad)]
     [number
      ["n" nat]]]]]
  [//
   ["@." profile]]
  [\\program
   ["." /
    ["/#" // #_
     ["#" profile]]]])

(def: profile
  (Random [//.Name //.Profile])
  (|> @profile.random
      (random\map (set@ #//.parents (list)))
      (random.and (random.ascii/alpha 1))))

(def: #export random
  (Random /.Project)
  (do random.monad
    [[name profile] ..profile]
    (wrap (/.project name profile))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Project /.project]
             ($_ _.and
                 (_.for [/.equivalence]
                        ($equivalence.spec /.equivalence ..random))
                 (_.for [/.monoid]
                        ($monoid.spec /.equivalence /.monoid ..random))

                 (do random.monad
                   [[super_name super_profile] ..profile
                    [dummy_name dummy_profile] (random.filter (|>> product.left (text\= super_name) not)
                                                              ..profile)
                    [sub_name sub_profile] (random.filter (function (_ [name profile])
                                                            (and (not (text\= super_name name))
                                                                 (not (text\= dummy_name name))))
                                                          ..profile)
                    fake_name (random.filter (function (_ name)
                                               (and (not (text\= super_name name))
                                                    (not (text\= dummy_name name))
                                                    (not (text\= sub_name name))))
                                             (random.ascii/alpha 1))
                    #let [project ($_ (\ /.monoid compose)
                                      (/.project super_name super_profile)
                                      (/.project dummy_name dummy_profile)
                                      (/.project sub_name (set@ #//.parents (list super_name) sub_profile)))
                          circular ($_ (\ /.monoid compose)
                                       (/.project super_name (set@ #//.parents (list sub_name) super_profile))
                                       (/.project dummy_name dummy_profile)
                                       (/.project sub_name (set@ #//.parents (list super_name) sub_profile)))]]
                   ($_ _.and
                       (_.cover [/.profile]
                                (and (|> (/.profile super_name project)
                                         (try\map (\ //.equivalence = super_profile))
                                         (try.default false))
                                     (|> (/.profile dummy_name project)
                                         (try\map (\ //.equivalence = dummy_profile))
                                         (try.default false))
                                     (|> (/.profile sub_name project)
                                         (try\map (\ //.equivalence = (\ //.monoid compose sub_profile super_profile)))
                                         (try.default false))))
                       (_.cover [/.unknown_profile]
                                (case (/.profile fake_name project)
                                  (#try.Success _)
                                  false

                                  (#try.Failure error)
                                  (exception.match? /.unknown_profile error)))
                       (_.cover [/.circular_dependency]
                                (case (/.profile sub_name circular)
                                  (#try.Success _)
                                  false

                                  (#try.Failure error)
                                  (exception.match? /.circular_dependency error)))
                       ))
                 ))))
