... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    ["[0]" monad (.only do)]]
   [control
    ["[0]" io]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [concurrency
    ["[0]" future (.only Future)]]
   [data
    ["[0]" product]
    ["[0]" binary (.only Binary)
     ["_[1]" \\test]]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    ["[0]" random (.only Random)]]
   [macro
    ["[0]" template]]
   [world
    [net
     ["[0]" uri (.only URI)]]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 ["[0]" /
  ["[1][0]" identity]
  ["[1][0]" origin]
  ["[1][0]" local]
  ["[1][0]" remote]
  [//
   ["@[0]" artifact]]]
 [\\program
  ["[0]" / (.only)
   ["[0]" remote]
   ["/[1]" //
    ["[1][0]" artifact (.only Version Artifact)
     ["[1]/[0]" extension (.only Extension)]]]]])

(the .public (spec valid_artifact invalid_artifact subject)
  (-> Artifact Artifact (/.Repository Future)
      Test)
  (do random.monad
    [expected (_binary.random 100)]
    (in (all unit.and
             (do future.monad
               [.let [good_uri (remote.uri (its //artifact.#version valid_artifact) valid_artifact //artifact/extension.lux_library)]
                good_upload! (by subject upload good_uri expected)
                good_download! (by subject download good_uri)

                .let [bad_uri (remote.uri (its //artifact.#version invalid_artifact) invalid_artifact //artifact/extension.lux_library)]
                bad_upload! (by subject upload bad_uri expected)
                bad_download! (by subject download bad_uri)]
               (unit.coverage [/.Repository]
                 (let [successfull_flow!
                       (when [good_upload! good_download!]
                         [{try.#Success _} {try.#Success actual}]
                         (by binary.equivalence = expected actual)

                         _
                         false)

                       failed_flow!
                       (when [bad_upload! bad_download!]
                         [{try.#Failure _} {try.#Failure _}]
                         true

                         _
                         false)]
                   (and successfull_flow!
                        failed_flow!))))
             ))))

(the artifact
  (-> Version Artifact)
  (|>> ["com.github.luxlang" "test-artifact"]))

(template.with [<name>]
  [(exception.the (<name> uri)
     (Exception URI)
     (exception.report
      (stack ["URI" (%.text uri)])))]

  [not_found]
  [cannot_upload]
  )

(every Store
  (Dictionary URI Binary))

(the .public empty
  Store
  (dictionary.empty text.hash))

(the valid_version
  Version
  "1.2.3-YES")

(the invalid_version
  Version
  "4.5.6-NO")

(the .public memory
  (/.Memory Store)
  (implementation
   (the the_description
     "@")
   (the (on_download uri state)
     (when (dictionary.value uri state)
       {try.#Success content}
       (when (binary.size content)
         0 (exception.except ..not_found [uri])
         _ {try.#Success [state content]})
       
       {try.#Failure _}
       (exception.except ..not_found [uri])))
   (the (on_upload uri content state)
     (if (dictionary.key? state uri)
       (exception.except ..cannot_upload [uri])
       {try.#Success (dictionary.has uri content state)}))))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (_.for [/.memory /.Memory]
                  (do random.monad
                    [_ (in [])]
                    (..spec (..artifact ..valid_version)
                            (..artifact ..invalid_version)
                            (/.memory ..memory
                                      (|> ..empty
                                          (dictionary.has (remote.uri ..invalid_version
                                                                      (..artifact ..invalid_version)
                                                                      //artifact/extension.lux_library)
                                                          (binary.empty 0)))))))

           /identity.test
           /origin.test
           /local.test
           /remote.test
           )))
