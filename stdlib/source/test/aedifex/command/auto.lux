... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" try]
    [concurrency
     ["[0]" atom (.only Atom)]
     ["[0]" async (.only Async)]]]
   [data
    ["[0]" binary]
    ["[0]" text (.only)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" set]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [world
    [console (.only Console)]
    ["[0]" shell (.only Exit Shell)]
    ["[0]" environment
     ["program" / (.only Environment)]
     ["[1]" \\projection]]
    ["[0]" file (.only)
     ["[0]" watch]]
    [time
     ["[0]" instant]]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 ["[0]" //
  ["$[0]" version]
  ["$[0]" build]]
 [\\program
  ["[0]" / (.only)
   ["//[1]" ///
    [command (.only Command)]
    ["[1]" profile (.only Profile)]
    ["[1][0]" action]
    [dependency
     [resolution (.only Resolution)]]]]])

(the (command expected_runs end_signal fs dummy_file)
  (-> Natural Text (file.System Async) file.Path
      [(Atom Natural)
       (-> (Console Async) (Environment Async) (file.System Async) (Shell Async) Resolution (Command [Exit Any]))])
  (let [@runs (is (Atom Natural)
                  (atom.atom 0))]
    [@runs
     (function (_ console program fs shell resolution profile)
       (do [! async.monad]
         [[_ actual_runs] (async.future (atom.update! ++ @runs))]
         (if (n.= expected_runs actual_runs)
           (in {try.#Failure end_signal})
           (do (try.with !)
             [_ (by fs write dummy_file (by utf8.format injection (%.natural actual_runs)))
              _ (by fs modify dummy_file (|> actual_runs .integer instant.of_millis))]
             (in [shell.normal []])))))]))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [end_signal (random.alphabetic 5)
         .let [/ (by file.default separator)
               [fs watcher] (watch.mock /)]
         
         program (random.and (random.alphabetic 5)
                             (random.alphabetic 5))
         target (random.alphabetic 5)
         source (random.alphabetic 5)
         .let [empty_profile (is Profile
                                 (by ///.monoid identity))
               with_target (is (-> Profile Profile)
                               (has ///.#target target))
               with_program (is (-> Profile Profile)
                                (has ///.#program {.#Some program}))
               
               profile (|> empty_profile
                           with_program
                           with_target
                           (has ///.#sources (set.of_list text.hash (list source))))]

         home (random.alphabetic 5)
         working_directory (random.alphabetic 5)
         
         expected_runs (by ! each (|>> (n.% 10) (n.max 2)) random.natural)
         dummy_path (by ! each (|>> (%.message source /)) (random.alphabetic 5))
         [compiler resolution] $build.resolution]
        (all _.and
             (_.coverage [/.delay]
               (n.> 0 /.delay))
             (in (do async.monad
                   [verdict (do ///action.monad
                              [_ (by fs make_directory source)
                               _ (by fs write dummy_path (binary.empty 0))
                               .let [[@runs command] (..command expected_runs end_signal fs dummy_path)]
                               _ (by watcher poll [])]
                              (do [! async.monad]
                                [no_dangling_process! (|> profile
                                                          (has ///.#lux compiler)
                                                          ((/.do! 1 watcher command)
                                                           ($version.echo "")
                                                           (program.async (program.mock environment.empty home working_directory))
                                                           fs
                                                           (shell.async ($build.good_shell []))
                                                           resolution)
                                                          (by ! each (|>> (pipe.when
                                                                            {try.#Failure error}
                                                                            (same? end_signal error)

                                                                            {try.#Success _}
                                                                            false))))
                                 correct_number_of_runs! (|> @runs
                                                             atom.read!
                                                             async.future
                                                             (by ! each (n.= expected_runs)))]
                                (in {try.#Success (and correct_number_of_runs!
                                                       no_dangling_process!)})))]
                   (unit.coverage [/.do!]
                     (try.else false verdict))))
             ))))
