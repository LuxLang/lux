(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [control
     ["." try ("#\." functor)]
     [concurrency
      ["." async]]]
    [data
     ["." binary ("#\." equivalence)]
     ["." text ("#\." equivalence)
      [encoding
       ["." utf8]]]
     [format
      ["." xml]]]
    [math
     ["." random]]
    [world
     ["." file]]]]
  [//
   ["@." version]
   [//
    ["@." profile]]]
  [\\program
   ["." /
    ["//#" /// #_
     ["#" profile]
     ["#." action]
     ["#." pom]]]])

(def: #export test
  Test
  (<| (_.covering /._)
      (do random.monad
        [sample @profile.random
         #let [fs (file.mock (\ file.default separator))]]
        (in (do {! async.monad}
              [#let [console (@version.echo "")]
               outcome (/.do! console fs sample)]
              (case outcome
                (#try.Success _)
                (do !
                  [verdict (do ///action.monad
                             [expected (|> (///pom.write sample)
                                           (try\map (|>> (\ xml.codec encode)
                                                         (\ utf8.codec encode)))
                                           (\ ! in))
                              actual (\ fs read ///pom.file)

                              logging! (\ ///action.monad map
                                          (text\= /.success)
                                          (\ console read_line []))

                              #let [expected_content!
                                    (binary\= expected actual)]]
                             (in (and logging!
                                      expected_content!)))]
                  (_.cover' [/.do! /.success]
                            (try.else false verdict)))
                
                (#try.Failure error)
                (_.cover' [/.do!]
                          (case (get@ #///.identity sample)
                            (#.Some _)
                            false

                            #.None
                            true))))))))
