... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [concurrency
    ["[0]" future (.only Future)]]
   [data
    ["[0]" text (.only \n)
     ["%" \\injection]]]
   [math
    ["[0]" random]]
   [meta
    ["lux_[0]" version]]
   [compiler
    ["[0]" version]]
   [world
    ["[0]" console (.only Console Memory)]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 [///
  ["@[0]" profile]]
 [\\program
  ["[0]" /]])

(exception.the .public console_is_closed!)

(the memory
  (Memory [Bit Text])
  (implementation
   (the (on_read [open? state])
     (if open?
         (<| (try.of_maybe "")
             (do maybe.monad
               [head (text.character 0 state)
                [_ tail] (text.split_at 1 state)]
               (pure [[open? tail] head])))
         (exception.except ..console_is_closed! [])))
   (the (on_read_line [open? state])
     (if open?
         (<| (try.of_maybe "")
             (do maybe.monad
               [[output state] (text.split_by \n state)]
               (pure [[open? state] output])))
         (exception.except ..console_is_closed! [])))
   (the (on_write input [open? state])
     (if open?
         {try.#Success [open? (text state input)]}
         (exception.except ..console_is_closed! [])))
   (the (on_close [open? buffer])
     (if open?
         {try.#Success [false buffer]}
         (exception.except ..console_is_closed! [])))))

(the .public echo
  (-> Text (Console Future))
  (|>> [true]
       (console.memory ..memory)
       console.future))

(the .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [profile @profile.random]
        (pure (do future.monad
                [.let [console (..echo "")]
                 verdict (do (try.with future.monad)
                           [_ (/.do! console profile)
                            logging (by console read_line [])]
                           (pure (text.= (version.as_text lux_version.latest)
                                         logging)))]
                (unit.coverage [/.do!]
                  (try.else false verdict)))))))
