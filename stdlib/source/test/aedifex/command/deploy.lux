(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." try (#+ Try) ("#\." functor)]
    ["." exception]
    [concurrency
     ["." promise (#+ Promise)]]
    [security
     ["!" capability]]
    [parser
     ["." environment (#+ Environment)]]]
   [data
    ["." maybe]
    ["." binary]
    ["." text ("#\." equivalence)
     ["%" format (#+ format)]
     ["." encoding]]
    ["." format #_
     ["#" binary]
     ["." tar]
     ["." xml]]
    [collection
     ["." set (#+ Set)]
     ["." dictionary (#+ Dictionary)]]]
   [math
    ["." random (#+ Random)]]
   [world
    ["." file (#+ Path File)]
    ["." program (#+ Program)]]]
  [program
   [compositor
    ["." export]]]
  [//
   ["@." version]
   [//
    ["@." profile]
    ["@." repository]]]
  {#program
   ["." /
    ["/#" // #_
     ["#." clean]
     ["/#" // #_
      ["#" profile]
      ["#." action]
      ["#." pom]
      ["#." local]
      ["#." hash]
      ["#." repository (#+ Identity Repository)]
      ["#." artifact (#+ Artifact)
       ["#/." extension]]]]]})

(def: (make-sources! fs sources)
  (-> (file.System Promise) (Set Path) (Promise (Try Any)))
  (loop [sources (set.to-list sources)]
    (case sources
      #.Nil
      (|> []
          (\ try.monad wrap)
          (\ promise.monad wrap))
      
      (#.Cons head tail)
      (do (try.with promise.monad)
        [_ (: (Promise (Try Path))
              (file.make-directories promise.monad fs head))
         _ (: (Promise (Try (File Promise)))
              (file.get-file promise.monad fs (format head (\ fs separator) head ".lux")))]
        (recur tail)))))

(def: (execute! program repository fs identity artifact profile)
  (-> (Program Promise) (Repository Promise) (file.System Promise)
      Identity Artifact ///.Profile
      (Promise (Try Text)))
  (do promise.monad
    [home (\ program home [])]
    (do ///action.monad
      [#let [console (@version.echo "")]
       _ (..make-sources! fs (get@ #///.sources profile))
       _ (: (Promise (Try Path))
            (file.make-directories promise.monad fs (///local.repository fs home)))
       _ (/.do! console repository fs identity artifact profile)]
      (!.use (\ console read-line) []))))

(def: #export test
  Test
  (<| (_.covering /._)
      (do {! random.monad}
        [[artifact expected-pom profile]
         (random.one (function (_ profile)
                       (do maybe.monad
                         [artifact (get@ #///.identity profile)
                          expected-pom (try.to-maybe (///pom.write profile))]
                         (wrap [artifact expected-pom profile])))
                     @profile.random)
         
         identity @repository.identity
         home (random.ascii/alpha 5)
         working-directory (random.ascii/alpha 5)
         #let [repository (///repository.mock (@repository.simulation identity)
                                              @repository.empty)
               fs (file.mock (\ file.default separator))
               program (program.async (program.mock environment.empty home working-directory))]]
        (wrap (do {! promise.monad}
                [verdict (do {! ///action.monad}
                           [logging (..execute! program repository fs identity artifact profile)
                            expected-library (|> profile
                                                 (get@ #///.sources)
                                                 set.to-list
                                                 (export.library fs)
                                                 (\ ! map (format.run tar.writer)))
                            
                            actual-pom (\ repository download artifact ///artifact/extension.pom)
                            actual-library (\ repository download artifact ///artifact/extension.lux-library)
                            actual-sha-1 (\ repository download artifact ///artifact/extension.sha-1)
                            actual-md5 (\ repository download artifact ///artifact/extension.md5)

                            #let [deployed-library!
                                  (\ binary.equivalence =
                                     expected-library
                                     actual-library)

                                  deployed-pom!
                                  (\ binary.equivalence =
                                     (|> expected-pom (\ xml.codec encode) encoding.to-utf8)
                                     actual-pom)

                                  deployed-sha-1!
                                  (\ binary.equivalence =
                                     (///hash.data (///hash.sha-1 expected-library))
                                     actual-sha-1)

                                  deployed-md5!
                                  (\ binary.equivalence =
                                     (///hash.data (///hash.md5 expected-library))
                                     actual-md5)]]
                           (wrap (and (text\= //clean.success logging)
                                      deployed-library!
                                      deployed-pom!
                                      deployed-sha-1!
                                      deployed-md5!)))]
                (_.cover' [/.do!]
                          (try.default false verdict)))))))
