(.using
 [library
  [lux "*"
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    [concurrency
     ["[0]" async (.only Async)]]
    [parser
     ["[0]" environment]]]
   [data
    ["[0]" binary ("[1]#[0]" equivalence)]
    ["[0]" text ("[1]#[0]" equivalence)
     ["%" format (.only format)]
     [encoding
      ["[0]" utf8]]]
    ["[0]" format "_"
     ["[1]" binary]
     ["[0]" tar]
     ["[0]" xml]]
    [collection
     ["[0]" set]]]
   [math
    ["[0]" random]]
   [tool
    [compiler
     [meta
      ["[0]" export]]]]
   [world
    ["[0]" file]
    ["[0]" program (.only Program)]
    ["[0]" shell]]]]
 [//
  ["$[0]" build]
  ["$[0]" install]
  ["$[0]" version]
  [//
   ["$[0]" profile]
   ["$[0]" repository]]]
 [\\program
  ["[0]" /
   ["//[1]" /// "_"
    ["[1]" profile]
    ["[1][0]" action]
    ["[1][0]" pom]
    ["[1][0]" hash]
    ["[1][0]" repository (.only Repository)
     ["[1]/[0]" local]
     ["[1]/[0]" remote]]
    ["[1][0]" artifact (.only Artifact)
     ["[1]/[0]" extension]]]]])

(def: (execute! program local remote fs artifact profile)
  (-> (Program Async) (Repository Async) (Repository Async) (file.System Async)
      Artifact ///.Profile
      (Async (Try Text)))
  (do ///action.monad
    [.let [console ($version.echo "")
           shell (shell.async ($build.bad_shell []))]
     _ ($install.make_sources! fs (the ///.#sources profile))
     _ (/.do! program shell console local remote fs artifact profile)]
    (# console read_line [])))

(def: .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [[artifact expected_pom profile]
         (random.one (function (_ profile)
                       (do maybe.monad
                         [artifact (the ///.#identity profile)
                          expected_pom (try.maybe (///pom.write profile))]
                         (in [artifact expected_pom profile])))
                     $profile.random)
         
         home (random.alphabetic 5)
         working_directory (random.alphabetic 5)
         .let [fs (file.mock (# file.default separator))
               program (program.async (program.mock environment.empty home working_directory))
               local (///repository/local.repository program fs)
               remote (///repository.mock $repository.mock
                                          $repository.empty)]]
        (in (do [! async.monad]
              [verdict (do [! ///action.monad]
                         [logging (..execute! program local remote fs artifact profile)
                          expected_library (|> profile
                                               (the ///.#sources)
                                               set.list
                                               (export.library fs)
                                               (# ! each (format.result tar.writer)))

                          actual_pom (# remote download (///repository/remote.uri (the ///artifact.#version artifact) artifact ///artifact/extension.pom))
                          actual_library (# remote download (///repository/remote.uri (the ///artifact.#version artifact) artifact ///artifact/extension.lux_library))
                          actual_sha-1 (# remote download (///repository/remote.uri (the ///artifact.#version artifact) artifact (format ///artifact/extension.lux_library ///artifact/extension.sha-1)))
                          actual_sha-1 (# async.monad in
                                          (do try.monad
                                            [actual_sha-1 (# utf8.codec decoded actual_sha-1)]
                                            (# ///hash.sha-1_codec decoded actual_sha-1)))
                          actual_md5 (# remote download (///repository/remote.uri (the ///artifact.#version artifact) artifact (format ///artifact/extension.lux_library ///artifact/extension.md5)))
                          actual_md5 (# async.monad in
                                        (do try.monad
                                          [actual_md5 (# utf8.codec decoded actual_md5)]
                                          (# ///hash.md5_codec decoded actual_md5)))

                          .let [succeeded!
                                (text#= /.success logging)

                                deployed_library!
                                (binary#= expected_library
                                          actual_library)

                                deployed_pom!
                                (binary#= (|> expected_pom (# xml.codec encoded) (# utf8.codec encoded))
                                          actual_pom)

                                deployed_sha-1!
                                (# ///hash.equivalence =
                                   (///hash.sha-1 expected_library)
                                   actual_sha-1)

                                deployed_md5!
                                (# ///hash.equivalence =
                                   (///hash.md5 expected_library)
                                   actual_md5)]]
                         (in (and succeeded!
                                  deployed_library!
                                  deployed_pom!
                                  deployed_sha-1!
                                  deployed_md5!)))]
              (_.coverage' [/.do! /.success]
                (try.else false verdict)))))))
