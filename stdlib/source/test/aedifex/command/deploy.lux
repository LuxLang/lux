... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    ["[0]" exception]]
   [concurrency
    ["[0]" future (.only Future) (.use "[1]#[0]" monad)]]
   [data
    ["[0]" binary (.only)
     ["[0]" \\injection]]
    ["[0]" text (.only)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    ["[0]" format
     ["[0]" tar]
     ["[0]" xml]]
    [collection
     ["[0]" set]]]
   [math
    ["[0]" random]]
   [meta
    [compiler
     [meta
      ["[0]" export]]]]
   [world
    ["[0]" file]
    ["[0]" shell (.only Process Shell)]
    ["[0]" environment
     ["program" / (.only Environment)]
     ["[1]" \\projection]]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 ["$" //
  ["[1][0]" install]
  ["[1][0]" version]
  [//
   ["[1][0]" profile]
   ["[1][0]" repository]]]
 [\\program
  ["[0]" / (.only)
   ["/[1]" //
    ["[1][0]" install]
    ["/[1]" //
     ["[1]" profile]
     ["[1][0]" action]
     ["[1][0]" pom]
     ["[1][0]" hash]
     ["[1][0]" repository (.only Repository)
      ["[1]/[0]" local]
      ["[1]/[0]" remote]]
     ["[1][0]" artifact (.only Artifact)
      ["[1]/[0]" extension]]]]]])

(the (shell fs)
  (-> (file.System Future) (Shell Future))
  (implementation
   (the (execute [environment working_directory command arguments])
     (do [! ///action.monad]
       [files (by fs directory_files working_directory)
        _ (monad.each !
                      (function (_ file)
                        (do !
                          [_ (is (Future (Try Any))
                                 (file.copy future.monad fs
                                            file
                                            (text file ".asc")))]
                          (in [])))
                      files)]
       (<| in
           (is (Process Future))
           (implementation
            (the (read _)
              (future#in (exception.except shell.no_more_output [])))
            (the (fail _)
              (future#in (exception.except shell.no_more_output [])))
            (the (write input)
              (future#in {try.#Failure "write"}))
            (the (destroy _)
              (future#in {try.#Failure "destroy"}))
            (the (await _)
              (in shell.error))))))))

(the (execute! program local remote fs artifact profile)
  (-> (Environment Future) (Repository Future) (Repository Future) (file.System Future)
      Artifact ///.Profile
      (Future (Try [Text Text])))
  (do ///action.monad
    [.let [console ($version.echo "")]
     _ ($install.make_sources! fs (its ///.#sources profile))
     _ (/.do! program (..shell fs) console local remote fs artifact profile)
     locally_installed! (by console read_line [])
     deployed! (by console read_line [])]
    (in [locally_installed! deployed!])))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [[artifact expected_pom profile]
         (random.one (function (_ profile)
                       (do maybe.monad
                         [artifact (its ///.#identity profile)
                          expected_pom (try.maybe (///pom.write profile))]
                         (in [artifact expected_pom profile])))
                     $profile.random)
         
         home (random.alphabetic 5)
         working_directory (random.alphabetic 5)
         .let [fs (file.mock (by file.default delimiter))
               program (program.future (program.mock environment.empty home working_directory))
               local (///repository/local.repository program fs)
               remote (///repository.mock $repository.mock
                                          $repository.empty)]]
        (in (do [! future.monad]
              [verdict (do [! ///action.monad]
                         [[locally_installed! deployed!] (..execute! program local remote fs artifact profile)
                          expected_library (|> profile
                                               (its ///.#sources)
                                               set.list
                                               (export.library fs)
                                               (by ! each (\\injection.value tar.as_binary)))

                          actual_pom (by remote download (///repository/remote.uri (its ///artifact.#version artifact) artifact ///artifact/extension.pom))
                          actual_library (by remote download (///repository/remote.uri (its ///artifact.#version artifact) artifact ///artifact/extension.lux_library))
                          actual_sha1 (by remote download (///repository/remote.uri (its ///artifact.#version artifact) artifact (text ///artifact/extension.lux_library ///artifact/extension.sha1)))
                          actual_sha1 (by future.monad in
                                          (do try.monad
                                            [actual_sha1 (by utf8.binary of actual_sha1)]
                                            (by ///hash.sha1_format of actual_sha1)))
                          actual_md5 (by remote download (///repository/remote.uri (its ///artifact.#version artifact) artifact (text ///artifact/extension.lux_library ///artifact/extension.md5)))
                          actual_md5 (by future.monad in
                                         (do try.monad
                                           [actual_md5 (by utf8.binary of actual_md5)]
                                           (by ///hash.md5_format of actual_md5)))

                          .let [succeeded!
                                (and (text.= //install.success locally_installed!)
                                     (text.= /.success deployed!))

                                deployed_library!
                                (binary.= expected_library
                                          actual_library)

                                deployed_pom!
                                (binary.= (|> expected_pom (by xml.text as) (by utf8.binary as))
                                          actual_pom)

                                deployed_sha1!
                                (by ///hash.equivalence =
                                    (///hash.sha1 expected_library)
                                    actual_sha1)

                                deployed_md5!
                                (by ///hash.equivalence =
                                    (///hash.md5 expected_library)
                                    actual_md5)]]
                         (in (and succeeded!
                                  deployed_library!
                                  deployed_pom!
                                  deployed_sha1!
                                  deployed_md5!)))]
              (unit.coverage [/.do! /.success]
                (try.else false verdict)))))))
