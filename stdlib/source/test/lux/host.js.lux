(.module:
  [lux #*
   ["_" test (#+ Test)]
   [math
    ["." random (#+ Random)]]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try]]
   [data
    ["." text ("#\." equivalence)]
    [number
     ["." nat]
     ["." frac]]]]
  {1
   ["." /]})

(/.import: Uint8Array)

## On Nashorn
(/.import: java/lang/String
  (new [Uint8Array /.String])
  (getBytes [/.String] Uint8Array))

## On Node
(/.import: Buffer
  (#static from [/.String /.String] Buffer)
  (toString [/.String] /.String))

## On the browser
(/.import: TextEncoder
  (new [/.String])
  (encode [/.String] Uint8Array))

(/.import: TextDecoder
  (new [/.String])
  (decode [Uint8Array] /.String))

(def: #export test
  Test
  (do {! random.monad}
    [boolean random.bit
     number (:: ! map (|>> (nat.% 100) nat.frac) random.nat)
     string (random.ascii 5)
     function (:: ! map (function (_ shift)
                          (: (-> Nat Nat)
                             (nat.+ shift)))
                  random.nat)
     ## I64s get compiled as JavaScript objects with a specific structure.
     object random.nat]
    (<| (_.covering /._)
        ($_ _.and
            (_.cover [/.on-browser? /.on-node-js? /.on-nashorn?]
                     (or /.on-nashorn?
                         /.on-node-js?
                         /.on-browser?))
            (_.cover [/.type-of]
                     (and (text\= "boolean" (/.type-of boolean))
                          (text\= "number" (/.type-of number))
                          (text\= "string" (/.type-of string))
                          (text\= "function" (/.type-of function))
                          (text\= "object" (/.type-of object))))
            (_.cover [/.try]
                     (case (/.try (error! string))
                       (#try.Success _)
                       false
                       
                       (#try.Failure error)
                       (text\= string error)))
            (_.cover [/.import:]
                     (let [encoding "utf8"]
                       (text\= string
                               (cond /.on-nashorn?
                                     (let [binary (java/lang/String::getBytes [encoding] (:coerce java/lang/String string))]
                                       (|> (java/lang/String::new [binary encoding])
                                           (:coerce Text)))
                                     
                                     /.on-node-js?
                                     (|> (Buffer::from [string encoding])
                                         (Buffer::toString [encoding]))
                                     
                                     ## On the browser
                                     (let [binary (|> (TextEncoder::new [encoding])
                                                      (TextEncoder::encode [string]))]
                                       (|> (TextDecoder::new [encoding])
                                           (TextDecoder::decode [binary])))
                                     ))))
            ))))
