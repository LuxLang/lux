(.module:
  [lux #*
   data/text/format
   ["_" test (#+ Test)]
   ["r" math/random]
   ["." function]
   [abstract
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." equivalence]
      ["$." monoid]
      ["$." codec]]}]]
  {1
   ["." /]})

(def: #export test
  Test
  (<| (_.context (%name (name-of .Bit)))
      (do r.monad
        [value r.bit]
        ($_ _.and
            ($equivalence.spec /.equivalence r.bit)
            ($codec.spec /.equivalence /.codec r.bit)
            (<| (_.context "Disjunction.")
                ($monoid.spec /.equivalence /.disjunction r.bit))
            (<| (_.context "Conjunction.")
                ($monoid.spec /.equivalence /.conjunction r.bit))
            (_.test "A value cannot be true and false at the same time."
                    (not (and value (not value))))
            (_.test "A value must be either true or false at any time."
                    (or value (not value)))
            (_.test "Can create the complement of a predicate."
                    (and (not (:: /.equivalence = value ((/.complement function.identity) value)))
                         (:: /.equivalence = value ((/.complement not) value))))
            ))))
