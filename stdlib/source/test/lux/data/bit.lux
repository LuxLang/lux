... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [control
    ["[0]" try]]
   ["[0]" function]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    ["[0]" random]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [left random.bit
         right random.bit]
        (all _.and
             (_.for [/.equivalence /.=]
                    (static.when (same? /.equivalence /.=)
                      (equivalenceT.spec /.equivalence random.bit)))
             (_.for [/.hash]
                    (hashT.spec /.hash random.bit))
             (_.for [/.disjunction]
                    (monoidT.spec /.equivalence /.disjunction random.bit))
             (_.for [/.conjunction]
                    (monoidT.spec /.equivalence /.conjunction random.bit))
             (_.for [/.format]
                    (formatT.spec /.equivalence /.format random.bit))
             
             (_.coverage [/.no /.yes]
               (and (same? false /.no)
                    (same? true /.yes)))
             (_.coverage [/.off /.on]
               (and (same? false /.off)
                    (same? true /.on)))
             (_.coverage [/.falsum /.verum]
               (and (same? false /.falsum)
                    (same? true /.verum)))
             (_.coverage [/.as_text]
               (/.= (/.= left right)
                    (text.= (/.as_text left) (/.as_text right))))
             (_.coverage [/.not_valid]
               (|> (%.message (/.as_text left) (/.as_text right))
                   (by /.format projection)
                   (try.is? /.not_valid)))
             ))))
