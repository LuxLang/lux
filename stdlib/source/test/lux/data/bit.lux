(.module:
  [lux #*
   [control
    ["M" monad (#+ Monad do)]]
   [data
    bit]
   [math
    ["r" random]]]
  lux/test)

(context: "Bit operations."
  (<| (times 100)
      (do @
        [value r.bit]
        (test "" (and (not (and value (not value)))
                      (or value (not value))

                      (not (:: disjunction identity))
                      (:: disjunction compose value (not value))
                      (:: conjunction identity)
                      (not (:: conjunction compose value (not value)))
                      
                      (:: equivalence = value (not (not value)))
                      (not (:: equivalence = value (not value)))

                      (not (:: equivalence = value ((complement id) value)))
                      (:: equivalence = value ((complement not) value))

                      (case (|> value
                                (:: codec encode)
                                (:: codec decode))
                        (#.Right dec-value)
                        (:: equivalence = value dec-value)

                        (#.Left _)
                        #0)
                      )))))
