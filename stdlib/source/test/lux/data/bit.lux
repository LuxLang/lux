(.module:
  [lux #*
   ["_" test (#+ Test)]
   [math
    ["." random]]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]
      ["$." monoid]
      ["$." codec]]}]
   [control
    ["." function]]]
  {1
   ["." /]})

(def: #export test
  Test
  (<| (_.covering /._)
      (do random.monad
        [value random.bit]
        ($_ _.and
            (_.with-cover [/.equivalence]
              ($equivalence.spec /.equivalence random.bit))
            (_.with-cover [/.disjunction]
              ($monoid.spec /.equivalence /.disjunction random.bit))
            (_.with-cover [/.conjunction]
              ($monoid.spec /.equivalence /.conjunction random.bit))
            (_.with-cover [/.codec]
              ($codec.spec /.equivalence /.codec random.bit))
            
            (_.cover [/.complement]
                     (and (not (\ /.equivalence = value ((/.complement function.identity) value)))
                          (\ /.equivalence = value ((/.complement not) value))))
            ))))
