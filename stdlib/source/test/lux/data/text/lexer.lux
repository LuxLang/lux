(.module:
  [lux #*
   [control
    [monad (#+ do Monad)]
    pipe
    ["p" parser]]
   [data
    ["." error (#+ Error)]
    ["." text ("text/." equivalence)
     format
     ["&" lexer]]
    [collection
     ["." list]]]
   [math
    ["r" random]]]
  lux/test)

## [Utils]
(def: (should-fail input)
  (All [a] (-> (Error a) Bit))
  (case input
    (#.Left _) #1
    _          #0))

(def: (should-passT test input)
  (-> Text (Error Text) Bit)
  (case input
    (#.Right output)
    (text/= test output)
    
    _
    #0))

(def: (should-passL test input)
  (-> (List Text) (Error (List Text)) Bit)
  (let [(^open "list/.") (list.equivalence text.equivalence)]
    (case input
      (#.Right output)
      (list/= test output)
      
      _
      #0)))

(def: (should-passE test input)
  (-> (Either Text Text) (Error (Either Text Text)) Bit)
  (case input
    (#.Right output)
    (case [test output]
      [(#.Left test) (#.Left output)]
      (text/= test output)

      [(#.Right test) (#.Right output)]
      (text/= test output)

      _
      #0)
    
    _
    #0))

## [Tests]
(context: "End"
  ($_ seq
      (test "Can detect the end of the input."
            (|> (&.run ""
                       &.end)
                (case> (#.Right _) #1 _ #0)))
      
      (test "Won't mistake non-empty text for no more input."
            (|> (&.run "YOLO"
                       &.end)
                (case> (#.Left _) #1 _ #0)))
      ))

(context: "Literals"
  (<| (times 100)
      (do @
        [size (|> r.nat (:: @ map (|>> (n/% 100) (n/max 10))))
         sample (r.unicode size)
         non-sample (|> (r.unicode size)
                        (r.filter (|>> (text/= sample) not)))]
        ($_ seq
            (test "Can find literal text fragments."
                  (and (|> (&.run sample
                                  (&.this sample))
                           (case> (#.Right []) #1 _ #0))
                       (|> (&.run non-sample
                                  (&.this sample))
                           (case> (#.Left _) #1 _ #0))))
            ))))

(context: "Custom lexers"
  ($_ seq
      (test "Can lex anything"
            (and (should-passT "A" (&.run "A"
                                          &.any))
                 (should-fail (&.run ""
                                     &.any))))

      (test "Can lex characters ranges."
            (and (should-passT "Y" (&.run "Y"
                                          (&.range (char "X") (char "Z"))))
                 (should-fail (&.run "M"
                                     (&.range (char "X") (char "Z"))))))
      
      (test "Can lex upper-case and lower-case letters."
            (and (should-passT "Y" (&.run "Y"
                                          &.upper))
                 (should-fail (&.run "m"
                                     &.upper))
                 
                 (should-passT "y" (&.run "y"
                                          &.lower))
                 (should-fail (&.run "M"
                                     &.lower))))

      (test "Can lex numbers."
            (and (should-passT "1" (&.run "1"
                                          &.decimal))
                 (should-fail (&.run " "
                                     &.decimal))

                 (should-passT "7" (&.run "7"
                                          &.octal))
                 (should-fail (&.run "8"
                                     &.octal))

                 (should-passT "1" (&.run "1"
                                          &.hexadecimal))
                 (should-passT "a" (&.run "a"
                                          &.hexadecimal))
                 (should-passT "A" (&.run "A"
                                          &.hexadecimal))
                 (should-fail (&.run " "
                                     &.hexadecimal))
                 ))

      (test "Can lex alphabetic characters."
            (and (should-passT "A" (&.run "A"
                                          &.alpha))
                 (should-passT "a" (&.run "a"
                                          &.alpha))
                 (should-fail (&.run "1"
                                     &.alpha))))

      (test "Can lex alphanumeric characters."
            (and (should-passT "A" (&.run "A"
                                          &.alpha-num))
                 (should-passT "a" (&.run "a"
                                          &.alpha-num))
                 (should-passT "1" (&.run "1"
                                          &.alpha-num))
                 (should-fail (&.run " "
                                     &.alpha-num))))

      (test "Can lex white-space."
            (and (should-passT " " (&.run " "
                                          &.space))
                 (should-fail (&.run "8"
                                     &.space))))
      ))

(context: "Combinators"
  ($_ seq
      (test "Can combine lexers sequentially."
            (and (|> (&.run "YO"
                            (p.and &.any &.any))
                     (case> (#.Right ["Y" "O"]) #1
                            _ #0))
                 (should-fail (&.run "Y"
                                     (p.and &.any &.any)))))
      
      (test "Can create the opposite of a lexer."
            (and (should-passT "a" (&.run "a"
                                          (&.not (p.or &.decimal &.upper))))
                 (should-fail (&.run "A"
                                     (&.not (p.or &.decimal &.upper))))))
      
      (test "Can select from among a set of characters."
            (and (should-passT "C" (&.run "C"
                                          (&.one-of "ABC")))
                 (should-fail (&.run "D"
                                     (&.one-of "ABC")))))

      (test "Can avoid a set of characters."
            (and (should-passT "D" (&.run "D"
                                          (&.none-of "ABC")))
                 (should-fail (&.run "C"
                                     (&.none-of "ABC")))))
      
      (test "Can lex using arbitrary predicates."
            (and (should-passT "D" (&.run "D"
                                          (&.satisfies (function (_ c) #1))))
                 (should-fail (&.run "C"
                                     (&.satisfies (function (_ c) #0))))))
      
      (test "Can apply a lexer multiple times."
            (and (should-passT "0123456789ABCDEF" (&.run "0123456789ABCDEF"
                                                         (&.many &.hexadecimal)))
                 (should-fail (&.run "yolo"
                                     (&.many &.hexadecimal)))

                 (should-passT "" (&.run ""
                                         (&.some &.hexadecimal)))))
      ))
