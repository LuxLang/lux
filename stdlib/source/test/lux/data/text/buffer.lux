(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    [abstract
     [monad {"+" [do]}]]
    [data
     ["." text ("#\." equivalence)
      ["%" format {"+" [format]}]]]
    [math
     ["." random {"+" [Random]}]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /]])

(def: part
  (Random Text)
  (do {! random.monad}
    [size (\ ! each (|>> (n.% 10) ++) random.nat)]
    (random.ascii/alpha size)))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Buffer])
      (do random.monad
        [left ..part
         mid ..part
         right ..part]
        ($_ _.and
            (_.cover [/.empty]
                     (n.= 0(/.size /.empty)))
            (_.cover [/.size /.then]
                     (n.= (text.size left)
                          (/.size (/.then left /.empty))))
            (_.cover [/.text]
                     (text\= (format left mid right)
                             (|> /.empty
                                 (/.then left)
                                 (/.then mid)
                                 (/.then right)
                                 /.text)))
            ))))
