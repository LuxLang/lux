... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["[0]" debug]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)
     [char (.only Char)]
     ["%" \\format (.only format)]]
    [collection
     ["[0]" set (.only Set)]]]
   [math
    ["[0]" random (.only Random)]
    [number (.only hex)
     ["n" nat]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    [macro
     [syntax (.only syntax)]
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" unicode
     ["[1]" set]]]]])

(the (range max min)
  (-> Char Char (Random Char))
  (let [range (n.- min max)]
    (of random.monad each
        (|>> (n.% range) (n.+ min))
        random.nat)))

(the under_range
  (Random Char)
  (..range (debug.private /.ascii_bottom) 0))

(the over_range
  (Random Char)
  (..range (hex "FFFF") (++ (debug.private /.ascii_top))))

(the in_range
  (Random Char)
  (..range (++ (debug.private /.ascii_top)) (debug.private /.ascii_bottom)))

(the ascii_range
  (Random Char)
  (..range (++ (debug.private /.ascii_top)) 0))

(the valid_sigils
  (Set Char)
  (set.of_list n.hash
               (list (debug.private /.\0_sigil)
                     (debug.private /.\a_sigil)
                     (debug.private /.\b_sigil)
                     (debug.private /.\t_sigil)
                     (debug.private /.\n_sigil)
                     (debug.private /.\v_sigil)
                     (debug.private /.\f_sigil)
                     (debug.private /.\r_sigil)
                     (debug.private /.\''_sigil)
                     (debug.private /.\\_sigil)
                     (debug.private /.\u_sigil))))

(the static_sample
  (syntax (_ [])
    (do meta.monad
      [seed meta.seed
       .let [[_ expected] (|> (random.ascii 10)
                              (random.only (|>> (text.contains? text.\0) not))
                              (is (Random Text))
                              (random.value random.pcg_32
                                            [random.#increase seed
                                             random.#seed seed]))]]
      (in (list (code.text expected))))))

(the static_escaped
  (syntax (_ [un_escaped <code>.text])
    (in (list (code.text (/.escaped un_escaped))))))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (do random.monad
             [ascii ..ascii_range]
             (_.coverage [/.escapable?]
               (`` (if (or (,, (with_template [<char>]
                                 [(n.= (debug.private <char>) ascii)]
                                 
                                 [/.\0] [/.\a] [/.\b] [/.\t]
                                 [/.\n] [/.\v] [/.\f] [/.\r]
                                 [/.\''] [/.\\])))
                     (/.escapable? ascii)
                     (bit#= (/.escapable? ascii)
                            (or (n.< (debug.private /.ascii_bottom) ascii)
                                (n.> (debug.private /.ascii_top) ascii)))))))
           (do random.monad
             [left (random.char unicode.character)
              right (random.char unicode.character)]
             (_.coverage [/.escaped /.un_escaped]
               (let [expected (format (text.of_char left) (text.of_char right))]
                 (if (or (/.escapable? left)
                         (/.escapable? right))
                   (let [escaped (/.escaped expected)]
                     (when (/.un_escaped escaped)
                       {try.#Success un_escaped}
                       (and (not (text#= escaped expected))
                            (text#= un_escaped expected))
                       
                       {try.#Failure error}
                       false))
                   (text#= expected (/.escaped expected))))))
           (do [! random.monad]
             [dummy (|> (random.char unicode.character)
                        (of ! each text.of_char))]
             (_.coverage [/.dangling_escape]
               (when (/.un_escaped (format (/.escaped dummy) "\"))
                 {try.#Success _}
                 false

                 {try.#Failure error}
                 (exception.is? /.dangling_escape error))))
           (do [! random.monad]
             [dummy (|> (random.char unicode.character)
                        (random.only (|>> (set.member? ..valid_sigils) not))
                        (of ! each text.of_char))]
             (_.coverage [/.invalid_escape]
               (when (/.un_escaped (format "\" dummy))
                 {try.#Success _}
                 false

                 {try.#Failure error}
                 (exception.is? /.invalid_escape error))))
           (do [! random.monad]
             [too_short (|> (random.char unicode.character)
                            (of ! each (n.% (hex "1000"))))
              code (|> (random.unicode 4)
                       (random.only (function (_ code)
                                      (when (of n.hex projection code)
                                        {try.#Failure error} true
                                        {try.#Success _} false))))]
             (_.coverage [/.invalid_unicode_escape]
               (template.let [(!invalid <code>)
                              [(when (/.un_escaped (format "\u" <code>))
                                 {try.#Success _}
                                 false

                                 {try.#Failure error}
                                 (exception.is? /.invalid_unicode_escape error))]]
                 (and (!invalid (of n.hex injection too_short))
                      (!invalid code)))))
           (_.coverage [/.literal]
             (with_expansions [<example> (..static_sample)]
               (text#= <example> (`` (/.literal (,, (..static_escaped <example>)))))))
           )))
