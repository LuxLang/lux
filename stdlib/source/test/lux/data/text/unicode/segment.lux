(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]
      ["$." hash]
      ["$." monoid]]}]
   [data
    ["." text]
    [number (#+ hex)
     ["n" nat]]
    [collection
     ["." set]
     ["." list]]]
   [macro
    ["." template]]
   [math
    ["." random (#+ Random)]]]
  {1
   ["." /]})

(def: #export random
  (Random /.Segment)
  (do random.monad
    [start random.nat
     end random.nat]
    (wrap (/.segment start end))))

(with-expansions [<segments> (as-is [segments/0
                                     [/.basic-latin
                                      /.latin-1-supplement
                                      /.latin-extended-a
                                      /.latin-extended-b
                                      /.ipa-extensions
                                      /.spacing-modifier-letters
                                      /.combining-diacritical-marks
                                      /.greek-and-coptic
                                      /.cyrillic
                                      /.cyrillic-supplementary
                                      /.armenian
                                      /.hebrew
                                      /.arabic
                                      /.syriac
                                      /.thaana
                                      /.devanagari
                                      /.bengali
                                      /.gurmukhi
                                      /.gujarati
                                      /.oriya
                                      /.tamil
                                      /.telugu
                                      /.kannada
                                      /.malayalam
                                      /.sinhala
                                      /.thai
                                      /.lao
                                      /.tibetan
                                      /.myanmar
                                      /.georgian
                                      /.hangul-jamo
                                      /.ethiopic
                                      /.cherokee
                                      /.unified-canadian-aboriginal-syllabics
                                      /.ogham
                                      /.runic
                                      /.tagalog
                                      /.hanunoo
                                      /.buhid
                                      /.tagbanwa
                                      /.khmer
                                      /.mongolian]]
                                    [segments/1
                                     [/.limbu
                                      /.tai-le
                                      /.khmer-symbols
                                      /.phonetic-extensions
                                      /.latin-extended-additional
                                      /.greek-extended
                                      /.general-punctuation
                                      /.superscripts-and-subscripts
                                      /.currency-symbols
                                      /.combining-diacritical-marks-for-symbols
                                      /.letterlike-symbols
                                      /.number-forms
                                      /.arrows
                                      /.mathematical-operators
                                      /.miscellaneous-technical
                                      /.control-pictures
                                      /.optical-character-recognition
                                      /.enclosed-alphanumerics
                                      /.box-drawing
                                      /.block-elements
                                      /.geometric-shapes
                                      /.miscellaneous-symbols
                                      /.dingbats
                                      /.miscellaneous-mathematical-symbols-a
                                      /.supplemental-arrows-a
                                      /.braille-patterns
                                      /.supplemental-arrows-b
                                      /.miscellaneous-mathematical-symbols-b
                                      /.supplemental-mathematical-operators
                                      /.miscellaneous-symbols-and-arrows
                                      /.cjk-radicals-supplement
                                      /.kangxi-radicals
                                      /.ideographic-description-characters
                                      /.cjk-symbols-and-punctuation
                                      /.hiragana
                                      /.katakana
                                      /.bopomofo
                                      /.hangul-compatibility-jamo
                                      /.kanbun
                                      /.bopomofo-extended
                                      /.katakana-phonetic-extensions
                                      /.enclosed-cjk-letters-and-months
                                      /.cjk-compatibility
                                      /.cjk-unified-ideographs-extension-a
                                      /.yijing-hexagram-symbols
                                      /.cjk-unified-ideographs
                                      /.yi-syllables
                                      /.yi-radicals
                                      /.hangul-syllables
                                      /.high-surrogates
                                      /.high-private-use-surrogates
                                      /.low-surrogates
                                      /.private-use-area
                                      /.cjk-compatibility-ideographs
                                      /.alphabetic-presentation-forms]]
                                    [segments/2
                                     [/.arabic-presentation-forms-a
                                      /.variation-selectors
                                      /.combining-half-marks
                                      /.cjk-compatibility-forms
                                      /.small-form-variants
                                      /.arabic-presentation-forms-b
                                      /.halfwidth-and-fullwidth-forms
                                      /.specials
                                      
                                      ## Specialized segments
                                      /.basic-latin/decimal
                                      /.basic-latin/upper-alpha
                                      /.basic-latin/lower-alpha]]
                                    )
                  <named> (template [<definition> <part>]
                            [((: (-> Any (List /.Segment))
                                 (function (_ _)
                                   (`` (list (~~ (template.splice <part>))))))
                              [])]
                            
                            <segments>)]
  (template [<definition> <part>]
    [(def: <definition>
       Test
       (`` (_.cover [(~~ (template.splice <part>))]
                    (let [all (list.concat (list <named>))
                          unique (set.from-list /.hash all)]
                      (n.= (list.size all)
                           (set.size unique))))))]
    
    <segments>
    )

  (def: #export test
    Test
    (<| (_.covering /._)
        (_.for [/.Segment])
        (do {! random.monad}
          [#let [top-start (hex "AC00")
                 top-end (hex "D7AF")]
           start (\ ! map (|>> (n.% top-start) inc) random.nat)
           end (\ ! map (|>> (n.% top-end) inc) random.nat)
           #let [sample (/.segment start end)
                 size (/.size sample)]
           inside (\ ! map
                     (|>> (n.% size)
                          (n.+ (/.start sample)))
                     random.nat)]
          (`` ($_ _.and
                  (_.for [/.equivalence]
                         ($equivalence.spec /.equivalence ..random))
                  (_.for [/.hash]
                         ($hash.spec /.hash ..random))
                  (_.for [/.monoid]
                         ($monoid.spec /.equivalence /.monoid ..random))
                  
                  (_.cover [/.segment]
                           (\ /.equivalence =
                              (/.segment start end)
                              (/.segment end start)))
                  (_.cover [/.start]
                           (n.= (n.min start end)
                                (/.start (/.segment start end))))
                  (_.cover [/.end]
                           (n.= (n.max start end)
                                (/.end (/.segment start end))))
                  (_.cover [/.size]
                           (n.= (inc (n.- (n.min start end)
                                          (n.max start end)))
                                (/.size (/.segment start end))))
                  (_.cover [/.within?]
                           (and (/.within? sample inside)
                                (not (/.within? sample (dec (/.start sample))))
                                (not (/.within? sample (inc (/.end sample))))))
                  (~~ (template [<definition> <part>]
                        [<definition>]
                        
                        <segments>))
                  )))))
  )
