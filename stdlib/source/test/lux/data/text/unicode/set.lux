... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [data
    ["[0]" product]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" /
  ["/[1]" //
   ["[1][0]" block]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" block]]]])

(the .public random
  (Random /.Set)
  (monad.let [! random.monad]
    [left //block.random
     right //block.random]
    (pure (/.set [left (list right)]))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Set])
      (monad.let [! random.monad]
        [block //block.random
         inside (by ! each
                    (|>> (n.% (block.size block))
                         (n.+ (block.start block)))
                    random.natural)
         left //block.random
         right //block.random
         .let [equivalence (product.equivalence n.equivalence
                                                n.equivalence)]]
        (`` (all _.and
                 (_.for [/.equivalence /.=]
                        (static.when (identical? /.equivalence /.=)
                          (equivalenceT.spec /.equivalence ..random)))
                 
                 (_.coverage [/.set]
                   (and (n.= (block.start left)
                             (/.start (/.set [left (list)])))
                        (n.= (block.end left)
                             (/.end (/.set [left (list)])))))
                 (_.coverage [/.start]
                   (n.= (n.minor (block.start left)
                                 (block.start right))
                        (/.start (/.set [left (list right)]))))
                 (_.coverage [/.end]
                   (n.= (n.major (block.end left)
                                 (block.end right))
                        (/.end (/.set [left (list right)]))))
                 (_.coverage [/.member?]
                   (bit.= (block.within? block inside)
                          (/.member? (/.set [block (list)]) inside)))
                 (_.coverage [/.composite]
                   (let [composed (/.composite (/.set [left (list)])
                                               (/.set [right (list)]))]
                     (and (n.= (n.minor (block.start left)
                                        (block.start right))
                               (/.start composed))
                          (n.= (n.major (block.end left)
                                        (block.end right))
                               (/.end composed)))))
                 (,, (template.with [<set>]
                       [(monad.let random.monad
                          [character (random.character <set>)
                           .let [start (/.start <set>)
                                 end (/.end <set>)]]
                          (_.coverage [<set>]
                            (and (/.member? <set> character)
                                 (not (/.member? <set> (-- start)))
                                 (not (/.member? <set> (++ end))))))]

                       [[/.ascii]
                        [/.alphabetic]
                        [/.alpha_numeric]
                        [/.lower_case]
                        [/.upper_case]
                        [/.numeric]
                        [/.character]
                        [/.non_character]
                        [/.full]]))

                 //block.test
                 )))))
