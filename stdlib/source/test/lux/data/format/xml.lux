... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except character name text)
   [abstract
    ["<>" projection (.use "[1]:[0]" monad)]
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" dictionary]
     ["[0]" list (.use "[1]:[0]" monad)]]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" monad)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]
    ["[0]" template]
    ["[0]" expansion]]
   ["[0]" type]
   [meta
    ["[0]" static]
    ["[0]" name]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" \\projection]
 [\\library
  ["[0]" /]])

(the !expect
  (template.macro (_ <pattern> <value>)
    [(when <value>
       <pattern>
       true
       
       _
       false)]))

(the !failure
  (template.macro (_ <exception> <cases>)
    [(monad.let [! random.monad]
       [expected (random.alphabetic 1)]
       (_.coverage [<exception>]
         (`` (and (,, (template.with [<projection> <input>]
                        [(|> <projection>
                             (\\projection.value (list <input>))
                             (!expect (^.multi {try.:Failure error}
                                               (exception.is? <exception> error))))]

                        <cases>))))))]))

(the random_label
  (Random Name)
  (random.and (random.alphabetic 1)
              (random.alphabetic 1)))

(the random_tag ..random_label)
(the random_attribute ..random_label)

(the \\projection
  Test
  (<| (_.covering \\projection._)
      (_.for [\\projection.Projection
              \\projection.value])
      (all _.and
           (monad.let [! random.monad]
             [expected (random.alphabetic 1)]
             (_.coverage [\\projection.text]
               (|> \\projection.text
                   (\\projection.value (list {/.:Text expected}))
                   (!expect (^.multi {try.:Success actual}
                                     (text.= expected actual))))))
           (!failure \\projection.unconsumed_inputs
                     [[(<>:pure expected)
                       {/.:Text expected}]])
           (monad.let [! random.monad]
             [expected (by ! each (|>> {/.:Text}) (random.alphabetic 1))]
             (_.coverage [\\projection.any]
               (|> \\projection.any
                   (\\projection.value (list expected))
                   (try:each (/.= expected))
                   (try.else false))))
           (monad.let [! random.monad]
             [expected ..random_tag]
             (_.coverage [\\projection.tag]
               (|> (monad.let <>.monad
                     [actual \\projection.tag
                      _ \\projection.any]
                     (pure (name.= expected actual)))
                   (\\projection.value (list {/.:Node expected (dictionary.empty name.hash) (list)}))
                   (!expect {try.:Success .true}))))
           (monad.let [! random.monad]
             [expected ..random_tag]
             (_.coverage [\\projection.node]
               (|> (\\projection.node expected (<>:pure []))
                   (\\projection.value (list {/.:Node expected (dictionary.empty name.hash) (list)}))
                   (!expect {try.:Success []}))))
           (!failure \\projection.wrong_tag
                     [[(\\projection.node ["" expected] (<>:pure []))
                       {/.:Node [expected ""] (dictionary.empty name.hash) (list)}]])
           (monad.let [! random.monad]
             [expected_tag ..random_tag
              expected_attribute ..random_attribute
              expected_value (random.alphabetic 1)]
             (_.coverage [\\projection.attribute]
               (|> (<| (\\projection.node expected_tag)
                       (<>.after (\\projection.attribute expected_attribute))
                       (<>:pure []))
                   (\\projection.value (list {/.:Node expected_tag
                                                      (|> (dictionary.empty name.hash)
                                                          (dictionary.has expected_attribute expected_value))
                                                      (list)}))
                   (!expect {try.:Success []}))))
           (!failure \\projection.unknown_attribute
                     [[(\\projection.attribute ["" expected])
                       {/.:Node [expected expected]
                                (|> (dictionary.empty name.hash)
                                    (dictionary.has [expected ""] expected))
                                (list)}]])
           (!failure \\projection.empty_input
                     [[(monad.let <>.monad
                         [_ \\projection.any]
                         \\projection.any)
                       {/.:Text expected}]
                      [(monad.let <>.monad
                         [_ \\projection.any]
                         \\projection.text)
                       {/.:Text expected}]
                      [(monad.let <>.monad
                         [_ \\projection.any]
                         (\\projection.node [expected expected]
                                            (<>:pure [])))
                       {/.:Node [expected expected]
                                (dictionary.empty name.hash)
                                (list)}]
                      [(monad.let <>.monad
                         [_ \\projection.any]
                         (\\projection.node [expected expected]
                                            (\\projection.attribute [expected expected])))
                       {/.:Node [expected expected]
                                (|> (dictionary.empty name.hash)
                                    (dictionary.has [expected expected] expected))
                                (list)}]])
           (!failure \\projection.unexpected_input
                     [[\\projection.text
                       {/.:Node [expected expected] (dictionary.empty name.hash) (list)}]
                      [(\\projection.node [expected expected]
                                          (<>:pure []))
                       {/.:Text expected}]
                      [(\\projection.node [expected expected]
                                          (\\projection.attribute [expected expected]))
                       {/.:Text expected}]])
           (monad.let [! random.monad]
             [.let [node (is (-> /.Tag (List /.XML) /.XML)
                             (function (_ tag children)
                               {/.:Node tag (dictionary.empty name.hash) children}))]
              parent ..random_tag
              right ..random_tag
              wrong (random.only (|>> (name.= right) not)
                                 ..random_tag)
              .let [projection (<| (\\projection.node parent)
                                   (monad.let <>.monad
                                     [_ (<| \\projection.somewhere
                                            (\\projection.node right)
                                            (<>:pure []))
                                      _ (<>.some \\projection.any)]
                                     (pure [])))]
              repetitions (by ! each (n.% 10) random.natural)]
             (all _.and
                  (_.coverage [\\projection.somewhere]
                    (|> projection
                        (\\projection.value (list (node parent
                                                        (list:conjoint (list (list.repeated repetitions (node wrong (list)))
                                                                             (list (node right (list)))
                                                                             (list.repeated repetitions (node wrong (list))))))))
                        (!expect {try.:Success []})))
                  (_.coverage [\\projection.nowhere]
                    (|> projection
                        (\\projection.value (list (node parent
                                                        (list.repeated repetitions (node wrong (list))))))
                        (!expect (^.multi {try.:Failure error}
                                          (exception.is? \\projection.nowhere error)))))
                  ))
           )))

(the character_range
  Text
  (.text "_"
         "abcdefghijklmnopqrstuvwxyz"
         "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))

(the character
  (Random Natural)
  (monad.let [! random.monad]
    [idx (|> random.natural (by ! each (n.% (text.size character_range))))]
    (pure (maybe.trusted (text.character idx character_range)))))

(the (size minimum maximum)
  (-> Natural Natural (Random Natural))
  (let [constraint (|>> (n.% maximum) (n.major minimum))]
    (random:each constraint random.natural)))

(the (text minimum maximum)
  (-> Natural Natural (Random Text))
  (monad.let random.monad
    [size (..size minimum maximum)]
    (random.text ..character size)))

(the name
  (Random Name)
  (random.and (..text 0 10)
              (..text 1 10)))

(the .public random
  (Random /.XML)
  (random.rec (function (_ random)
                (random.or (..text 1 10)
                           (monad.let random.monad
                             [size (..size 0 2)]
                             (all random.and
                                  ..name
                                  (random.dictionary name.hash size ..name (..text 0 10))
                                  (random.list size random)))))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.XML /.:Text /.:Node])
      (all _.and
           (_.for [/.equivalence /.=]
                  (static.when (identical? /.equivalence /.=)
                    (equivalenceT.spec /.equivalence ..random)))
           (_.for [/.text]
                  (formatT.spec /.equivalence /.text ..random))

           (monad.let [! random.monad]
             [(^.let symbol [namespace name]) ..name]
             (`` (all _.and
                      (,, (template.with [<type> <injection>]
                            [(_.coverage [<type> <injection>]
                               (and (text.= name (<injection> ["" name]))
                                    (let [symbol (<injection> symbol)]
                                      (and (text.starts_with? namespace symbol)
                                           (text.ends_with? name symbol)))))]

                            [[/.Tag /.tag]
                             [/.Attribute /.attribute]]))
                      (_.coverage [/.Attrs /.attributes]
                        (dictionary.empty? /.attributes))
                      )))
           (monad.let random.monad
             [expected ..random]
             (_.coverage [/.as_text]
               (|> expected
                   /.as_text
                   (by /.text of)
                   (try:each (by /.equivalence = expected))
                   (try.else false))))

           ..\\projection
           )))
