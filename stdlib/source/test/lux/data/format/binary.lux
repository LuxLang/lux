(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]
    [\\specification
     ["$[0]" monoid]]]
   [data
    ["[0]" binary (.open: "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]]]]
 [\\library
  ["[0]" /]])

(implementation: equivalence
  (Equivalence /.Specification)

  (def: (= reference subject)
    (binary#= (/.instance reference)
              (/.instance subject))))

(def: random
  (Random /.Specification)
  (at random.monad each /.nat random.nat))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Mutation /.Specification /.Writer])
      (all _.and
           (_.for [/.monoid]
                  ($monoid.spec ..equivalence /.monoid ..random))
           )))
