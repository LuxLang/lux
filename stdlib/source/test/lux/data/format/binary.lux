(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [equivalence (#+ Equivalence)]
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." monoid]]}]
   [data
    ["." binary ("#\." equivalence)]]
   [math
    ["." random (#+ Random)]]]
  {1
   ["." /]})

(structure: equivalence
  (Equivalence /.Specification)

  (def: (= reference subject)
    (binary\= (/.instance reference)
              (/.instance subject))))

(def: random
  (Random /.Specification)
  (:: random.monad map /.nat random.nat))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.Mutation /.Specification /.Writer])
      ($_ _.and
          (_.with-cover [/.monoid]
            ($monoid.spec ..equivalence /.monoid ..random))
          )))
