(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [equivalence (#+ Equivalence)]
     [monad (#+ do)]
     [\\specification
      ["$." monoid]]]
    [data
     ["." binary ("#\." equivalence)]]
    [math
     ["." random (#+ Random)]]]]
  [\\library
   ["." /]])

(implementation: equivalence
  (Equivalence /.Specification)

  (def: (= reference subject)
    (binary\= (/.instance reference)
              (/.instance subject))))

(def: random
  (Random /.Specification)
  (\ random.monad each /.nat random.nat))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Mutation /.Specification /.Writer])
      ($_ _.and
          (_.for [/.monoid]
                 ($monoid.spec ..equivalence /.monoid ..random))
          )))
