... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except name)
   ["[0]" function]
   [abstract
    ["<>" projection]
    ["[0]" monad]
    ["[0]" equality
     ["[1]T" \\test]]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" product]
    ["[0]" binary (.use "[1]:[0]" monoid)
     ["<b>" \\projection]
     ["[0]" \\injection]
     ["[1]T" \\test]]
    ["[0]" text (.only)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]
     ["[0]" unicode
      ["[1]" set]
      ["[1]/[0]" block]]]
    [collection
     ["[0]" sequence]
     ["[0]" list (.use "[1]:[0]" mix)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [macro
    ["[0]" template]]
   [time
    ["[0]" instant (.only Instant)]
    ["[0]" duration]]
   [test
    ["_" property (.only Test)]]
   [meta
    ["[0]" static]]]]
 [\\library
  ["[0]" /]])

(the path
  Test
  (_.for [/.Path]
         (monad.let [! random.monad]
           [expected (random.lower_cased /.path_size)
            invalid (random.lower_cased (++ /.path_size))
            not_ascii (random.text (random.character (unicode.set [unicode/block.katakana (list)]))
                                   /.path_size)]
           (`` (all _.and
                    (_.coverage [/.path /.from_path]
                      (when (/.path expected)
                        {try.:Success actual}
                        (text.= expected
                                (/.from_path actual))

                        {try.:Failure error}
                        false))
                    (_.coverage [/.no_path]
                      (text.= "" (/.from_path /.no_path)))
                    (_.coverage [/.path_size /.path_is_too_long]
                      (when (/.path invalid)
                        {try.:Success _}
                        false

                        {try.:Failure error}
                        (exception.is? /.path_is_too_long error)))
                    (_.coverage [/.not_ascii]
                      (when (/.path not_ascii)
                        {try.:Success actual}
                        false

                        {try.:Failure error}
                        (exception.is? /.not_ascii error)))
                    )))))

(the for_name
  Test
  (_.for [/.Name]
         (monad.let [! random.monad]
           [expected (random.lower_cased /.name_size)
            invalid (random.lower_cased (++ /.name_size))
            not_ascii (random.text (random.character (unicode.set [unicode/block.katakana (list)]))
                                   /.name_size)]
           (`` (all _.and
                    (_.coverage [/.name /.from_name]
                      (when (/.name expected)
                        {try.:Success actual}
                        (text.= expected
                                (/.from_name actual))

                        {try.:Failure error}
                        false))
                    (_.coverage [/.name_size /.name_is_too_long]
                      (when (/.name invalid)
                        {try.:Success _}
                        false

                        {try.:Failure error}
                        (exception.is? /.name_is_too_long error)))
                    (_.coverage [/.not_ascii]
                      (when (/.name not_ascii)
                        {try.:Success actual}
                        false

                        {try.:Failure error}
                        (exception.is? /.not_ascii error)))
                    )))))

(the small
  Test
  (_.for [/.Small]
         (monad.let [! random.monad]
           [expected (|> random.natural (by ! each (n.% /.small_limit)))
            invalid (|> random.natural (by ! each (n.major /.small_limit)))]
           (`` (all _.and
                    (_.coverage [/.small /.from_small]
                      (when (/.small expected)
                        {try.:Success actual}
                        (n.= expected
                             (/.from_small actual))

                        {try.:Failure error}
                        false))
                    (_.coverage [/.small_limit /.not_a_small_number]
                      (when (/.small invalid)
                        {try.:Success actual}
                        false

                        {try.:Failure error}
                        (exception.is? /.not_a_small_number error)))
                    )))))

(the big
  Test
  (_.for [/.Big]
         (monad.let [! random.monad]
           [expected (|> random.natural (by ! each (n.% /.big_limit)))
            invalid (|> random.natural (by ! each (n.major /.big_limit)))]
           (`` (all _.and
                    (_.coverage [/.big /.from_big]
                      (when (/.big expected)
                        {try.:Success actual}
                        (n.= expected
                             (/.from_big actual))

                        {try.:Failure error}
                        false))
                    (_.coverage [/.big_limit /.not_a_big_number]
                      (when (/.big invalid)
                        {try.:Success actual}
                        false

                        {try.:Failure error}
                        (exception.is? /.not_a_big_number error)))
                    )))))

(the chunk_size 32)

(the entry
  Test
  (monad.let [! random.monad]
    [expected_path (random.lower_cased (-- /.path_size))
     expected_moment (by ! each (|>> (n.% 1,0,00,00,00,00,000) .integer instant.of_millis)
                         random.natural)
     chunk (random.lower_cased chunk_size)
     chunks (by ! each (n.% 100) random.natural)
     .let [content (|> chunk
                       (list.repeated chunks)
                       text.together
                       (by utf8.binary as))]]
    (`` (all _.and
             (,, (template.with [<type> <tag>]
                   [(_.coverage [<type>]
                      (|> (monad.let try.monad
                            [expected_path (/.path expected_path)
                             tar (|> (sequence.new {<tag> expected_path})
                                     (\\injection.value /.as_binary)
                                     (<b>.value /.of_binary))]
                            (pure (when (sequence.as_list tar)
                                    (list {<tag> actual_path})
                                    (text.= (/.from_path expected_path)
                                            (/.from_path actual_path))

                                    _
                                    false)))
                          (try.else false)))]

                   [[/.Symbolic_Link /.:Symbolic_Link]
                    [/.Directory /.:Directory]]))
             (_.for [/.File /.Content /.content /.data]
                    (all _.and
                         (,, (template.with [<type> <tag>]
                               [(_.coverage [<type>]
                                  (|> (monad.let try.monad
                                        [expected_path (/.path expected_path)
                                         expected_content (/.content content)
                                         tar (|> (sequence.new {<tag> [expected_path
                                                                       expected_moment
                                                                       /.none
                                                                       [/.:user [/.:name /.anonymous
                                                                                 /.:id /.no_id]
                                                                        /.:group [/.:name /.anonymous
                                                                                  /.:id /.no_id]]
                                                                       expected_content]})
                                                 (\\injection.value /.as_binary)
                                                 (<b>.value /.of_binary))]
                                        (pure (when (sequence.as_list tar)
                                                (list {<tag> [actual_path actual_moment actual_mode actual_ownership actual_content]})
                                                (let [seconds (is (-> Instant Integer)
                                                                  (|>> instant.relative (duration.ticks duration.second)))]
                                                  (and (text.= (/.from_path expected_path)
                                                               (/.from_path actual_path))
                                                       (i.= (seconds expected_moment)
                                                            (seconds actual_moment))
                                                       (binary.= (/.data expected_content)
                                                                 (/.data actual_content))))

                                                _
                                                false)))
                                      (try.else false)))]

                               [[/.Normal /.:Normal]
                                [/.Contiguous /.:Contiguous]]))))))))

(the random_mode
  (Random /.Mode)
  (monad.let [! random.monad]
    []
    (random.either (random.either (random.either (pure /.execute_by_other)
                                                 (pure /.write_by_other))
                                  (random.either (pure /.read_by_other)
                                                 (pure /.execute_by_group)))
                   (random.either (random.either (random.either (pure /.write_by_group)
                                                                (pure /.read_by_group))
                                                 (random.either (pure /.execute_by_owner)
                                                                (pure /.write_by_owner)))
                                  (random.either (random.either (pure /.read_by_owner)
                                                                (pure /.save_text))
                                                 (random.either (pure /.set_group_id_on_execution)
                                                                (pure /.set_user_id_on_execution)))))))

(the mode
  Test
  (_.for [/.Mode /.mode]
         (monad.let [! random.monad]
           [path (random.lower_cased 10)
            modes (random.list 4 ..random_mode)
            .let [expected_mode (list:mix /.and /.none modes)]]
           (`` (all _.and
                    (_.coverage [/.and]
                      (|> (monad.let try.monad
                            [path (/.path path)
                             content (/.content (binary.empty 0))
                             tar (|> (sequence.new {/.:Normal [path
                                                               (instant.of_millis +0)
                                                               expected_mode
                                                               [/.:user [/.:name /.anonymous
                                                                         /.:id /.no_id]
                                                                /.:group [/.:name /.anonymous
                                                                          /.:id /.no_id]]
                                                               content]})
                                     (\\injection.value /.as_binary)
                                     (<b>.value /.of_binary))]
                            (pure (when (sequence.as_list tar)
                                    (list {/.:Normal [_ _ actual_mode _ _]})
                                    (n.= (/.mode expected_mode)
                                         (/.mode actual_mode))

                                    _
                                    false)))
                          (try.else false)))
                    (,, (template.with [<expected_mode>]
                          [(_.coverage [<expected_mode>]
                             (|> (monad.let try.monad
                                   [path (/.path path)
                                    content (/.content (binary.empty 0))
                                    tar (|> (sequence.new {/.:Normal [path
                                                                      (instant.of_millis +0)
                                                                      <expected_mode>
                                                                      [/.:user [/.:name /.anonymous
                                                                                /.:id /.no_id]
                                                                       /.:group [/.:name /.anonymous
                                                                                 /.:id /.no_id]]
                                                                      content]})
                                            (\\injection.value /.as_binary)
                                            (<b>.value /.of_binary))]
                                   (pure (when (sequence.as_list tar)
                                           (list {/.:Normal [_ _ actual_mode _ _]})
                                           (n.= (/.mode <expected_mode>)
                                                (/.mode actual_mode))

                                           _
                                           false)))
                                 (try.else false)))]

                          [[/.none]

                           [/.execute_by_other]
                           [/.write_by_other]
                           [/.read_by_other]

                           [/.execute_by_group]
                           [/.write_by_group]
                           [/.read_by_group]

                           [/.execute_by_owner]
                           [/.write_by_owner]
                           [/.read_by_owner]

                           [/.save_text]
                           [/.set_group_id_on_execution]
                           [/.set_user_id_on_execution]])))))))

(the ownership
  Test
  (monad.let [! random.monad]
    [path (random.lower_cased /.path_size)
     expected (random.lower_cased /.name_size)
     invalid (random.lower_cased (++ /.name_size))
     not_ascii (random.text (random.character (unicode.set [unicode/block.katakana (list)]))
                            /.name_size)]
    (<| (_.for [/.Ownership
                /.:user /.:group
                
                /.Owner
                /.:name /.:id
                
                /.ID])
        (all _.and
             (_.coverage [/.name_size /.name_is_too_long]
               (when (/.name invalid)
                 {try.:Success _}
                 false

                 {try.:Failure error}
                 (exception.is? /.name_is_too_long error)))
             (_.coverage [/.not_ascii]
               (when (/.name not_ascii)
                 {try.:Success actual}
                 false

                 {try.:Failure error}
                 (exception.is? /.not_ascii error)))
             (_.coverage [/.Name
                          /.name /.from_name]
               (|> (monad.let try.monad
                     [path (/.path path)
                      content (/.content (binary.empty 0))
                      expected (/.name expected)
                      tar (|> (sequence.new {/.:Normal [path
                                                        (instant.of_millis +0)
                                                        /.none
                                                        [/.:user [/.:name expected
                                                                  /.:id /.no_id]
                                                         /.:group [/.:name /.anonymous
                                                                   /.:id /.no_id]]
                                                        content]})
                              (\\injection.value /.as_binary)
                              (<b>.value /.of_binary))]
                     (pure (when (sequence.as_list tar)
                             (list {/.:Normal [_ _ _ actual_ownership _]})
                             (and (text.= (/.from_name expected)
                                          (/.from_name (its [/.:user /.:name] actual_ownership)))
                                  (text.= (/.from_name /.anonymous)
                                          (/.from_name (its [/.:group /.:name] actual_ownership))))
                             
                             _
                             false)))
                   (try.else false)))
             (_.coverage [/.anonymous /.no_id]
               (|> (monad.let try.monad
                     [path (/.path path)
                      content (/.content (binary.empty 0))
                      tar (|> (sequence.new {/.:Normal [path
                                                        (instant.of_millis +0)
                                                        /.none
                                                        [/.:user [/.:name /.anonymous
                                                                  /.:id /.no_id]
                                                         /.:group [/.:name /.anonymous
                                                                   /.:id /.no_id]]
                                                        content]})
                              (\\injection.value /.as_binary)
                              (<b>.value /.of_binary))]
                     (pure (when (sequence.as_list tar)
                             (list {/.:Normal [_ _ _ actual_ownership _]})
                             (and (text.= (/.from_name /.anonymous)
                                          (/.from_name (its [/.:user /.:name] actual_ownership)))
                                  (n.= (/.from_small /.no_id)
                                       (/.from_small (its [/.:user /.:id] actual_ownership)))
                                  (text.= (/.from_name /.anonymous)
                                          (/.from_name (its [/.:group /.:name] actual_ownership)))
                                  (n.= (/.from_small /.no_id)
                                       (/.from_small (its [/.:group /.:id] actual_ownership))))
                             
                             _
                             false)))
                   (try.else false)))
             (_.coverage [/.no_owner]
               (identical? /.no_id (its /.:id /.no_owner)))
             (_.coverage [/.no_ownership]
               (and (identical? /.no_owner (its /.:user /.no_ownership))
                    (identical? /.no_owner (its /.:group /.no_ownership))))
             ))))

(the random_path
  (-> Natural
      (Random /.Path))
  (|>> random.lower_cased
       (random.one /.path)))

(the (random_file size)
  (-> Natural
      (Random /.File))
  (monad.let [! random.monad]
    [path (..random_path size)
     seconds (by ! each
                 (function (_ seconds)
                   (instant.absolute (duration.up (n.% 1,000,000 seconds)
                                                  duration.second)))
                 random.natural)
     mode random_mode
     content (random.one /.content (binaryT.random size))]
    (pure [path seconds mode /.no_ownership content])))

(the (random_entry size)
  (-> Natural
      (Random /.Entry))
  (all random.or
       (..random_file size)
       (..random_path size)
       (..random_path size)
       (..random_file size)
       ))

(the .public (random size)
  (-> Natural
      (Random /.Tar))
  (monad.let [! random.monad]
    [entry_0 (..random_entry size)
     entry_1 (..random_entry size)
     entry_2 (..random_entry size)
     entry_3 (..random_entry size)]
    (pure (sequence.new entry_0 entry_1 entry_2 entry_3))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Tar])
      (monad.let [! random.monad]
        [expected_tar (..random 1)

         left (..random 2)
         right (..random 3)

         expected_file (..random_file 4)
         .let [[expected_path expected_time expected_mode expected_ownership expected_content] expected_file]
         not_expected_file (..random_file 5)]
        (all _.and
             (_.for [/.equality /.=]
                    (static.when (identical? /.equality /.=)
                      (equalityT.spec /.equality (..random 1))))
             
             (_.coverage [/.as_binary /.of_binary]
               (|> expected_tar
                   (\\injection.value /.as_binary)
                   (<b>.value /.of_binary)
                   (by try.monad each (/.= expected_tar))
                   (try.else false)))
             (_.coverage [/.binary]
               (|> expected_tar
                   (by /.binary as)
                   (by /.binary of)
                   (by try.monad each (/.= expected_tar))
                   (try.else false)))
             (_.coverage [/.file]
               (|> (sequence.new {/.:Normal expected_file})
                   (/.file expected_path)
                   (by (try.equality binary.equality) =
                       {try.:Success (/.data expected_content)})))
             (_.coverage [/.unknown_file]
               (|> (sequence.new {/.:Normal not_expected_file})
                   (/.file expected_path)
                   (try:each (function.constant false))
                   (exception.else (exception.is? /.unknown_file))))
             (_.coverage [/.invalid_end_of_archive]
               (let [dump (\\injection.value /.as_binary sequence.empty)]
                 (when (<b>.value /.of_binary (binary:composite dump dump))
                   {try.:Success _}
                   false
                   
                   {try.:Failure error}
                   (exception.is? /.invalid_end_of_archive error))))
             
             ..path
             ..for_name
             ..small
             ..big
             (_.for [/.Entry
                     /.:Normal /.:Symbolic_Link /.:Directory /.:Contiguous]
                    (all _.and
                         ..entry
                         ..mode
                         ..ownership
                         ))
             ))))
