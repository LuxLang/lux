(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   [abstract
    codec
    [monad (#+ do Monad)]
    [equivalence (#+ Equivalence)]
    {[0 #test]
     [/
      ["$." equivalence]
      ["$." codec]]}]
   [control
    pipe
    ["p" parser]]
   [data
    ["." bit]
    ["." maybe]
    ["." text]
    [number
     ["n" nat]
     ["." frac]]
    [collection
     [row (#+ row)]
     ["d" dictionary]
     ["." list]]]
   [macro
    [poly (#+ derived:)]]
   [type
    ["." unit]]
   [math
    ["r" random (#+ Random)]]
   [time
    ["ti" instant]
    ["tda" date]
    ## ["tdu" duration]
    ]]
  [test
   [lux
    [time
     ["_." instant]
     ## ["_." duration]
     ["_." date]]]]
  {1
   ["." / (#+ JSON)]})

(def: #export json
  (Random JSON)
  (r.rec (function (_ recur)
           (do {@ r.monad}
             [size (:: @ map (n.% 2) r.nat)]
             ($_ r.or
                 (:: @ wrap [])
                 r.bit
                 r.safe-frac
                 (r.unicode size)
                 (r.row size recur)
                 (r.dictionary text.hash size (r.unicode size) recur)
                 )))))

(def: #export test
  Test
  (<| (_.context (%.name (name-of /._)))
      ($_ _.and
          ($equivalence.spec /.equivalence ..json)
          ($codec.spec /.equivalence /.codec ..json)
          )))
