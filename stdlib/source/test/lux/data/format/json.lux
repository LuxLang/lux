... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Variant Record
                :Bit :Text :Revolution)
   [abstract
    [format (.only Format)]
    ["<>" projection]
    ["[0]" monad]
    ["[0]" equality (.only Equality)
     ["[0]/[1]" \\polytypic]
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]]
   [control
    ["[0]" pipe]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" maybe]
    ["[0]" any]
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]
     ["[0]" escape]]
    [collection
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" set]
     ["[0]" list (.use "[1]:[0]" functor)]
     ["[0]" stack]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" monad)]
    [number
     [/64
      ["[0]" natural]
      ["[0]" integer]
      ["[0]" revolution]
      ["[0]" decimal]]]]
   ["[0]" macro (.only)
    ["^" pattern]
    ["[0]" syntax]
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" code]
    ["[0]" static]]
   [time
    ["[0]" instant (.only)
     ["[0]/[1]" \\test]]
    ["[0]" duration (.only)
     ["[0]/[1]" \\test]]
    ["[0]" date]
    ["[0]" day]
    ["[0]" month]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" \\polytypic]
 ["[0]" \\projection]
 [\\library
  ["[0]" / (.only JSON)]])

(the !expect
  (template.macro (_ <pattern> <value>)
    [(when <value>
       <pattern>
       true
       
       _
       false)]))

(the \\projection
  Test
  (<| (_.covering \\projection._)
      (_.for [\\projection.Projection
              \\projection.value])
      (`` (all _.and
               (monad.let [! random.monad]
                 [expected (by ! each (|>> {/.:String}) (random.unicode 1))]
                 (_.coverage [\\projection.any]
                   (|> \\projection.any
                       (\\projection.value expected)
                       (!expect (^.multi {try.:Success actual}
                                         (by /.equality = expected actual))))))
               (_.coverage [\\projection.null]
                 (|> \\projection.null
                     (\\projection.value {/.:Null})
                     (!expect {try.:Success _})))
               (,, (template.with [<query> <test> <check> <random> <json> <equality>]
                     [(monad.let [! random.monad]
                        [expected <random>
                         dummy (|> <random> (random.only (|>> (by <equality> = expected) not)))]
                        (all _.and
                             (_.coverage [<query>]
                               (|> <query>
                                   (\\projection.value {<json> expected})
                                   (!expect (^.multi {try.:Success actual}
                                                     (by <equality> = expected actual)))))
                             (_.coverage [<test>]
                               (and (|> (<test> expected)
                                        (\\projection.value {<json> expected})
                                        (!expect {try.:Success .true}))
                                    (|> (<test> expected)
                                        (\\projection.value {<json> dummy})
                                        (!expect {try.:Success .false}))))
                             (_.coverage [<check>]
                               (and (|> (<check> expected)
                                        (\\projection.value {<json> expected})
                                        (!expect {try.:Success _}))
                                    (|> (<check> expected)
                                        (\\projection.value {<json> dummy})
                                        (!expect {try.:Failure _}))))))]

                     [[\\projection.boolean \\projection.boolean? \\projection.this_boolean random.bit /.:Boolean bit.equality]
                      [\\projection.number \\projection.number? \\projection.this_number random.safe_decimal /.:Number decimal.equality]
                      [\\projection.string \\projection.string? \\projection.this_string (random.unicode 1) /.:String text.equality]]))
               (monad.let [! random.monad]
                 [expected (random.unicode 1)
                  dummy random.bit]
                 (_.coverage [\\projection.unexpected_value]
                   (|> \\projection.string
                       (\\projection.value {/.:Boolean dummy})
                       (!expect (^.multi {try.:Failure error}
                                         (exception.is? \\projection.unexpected_value error))))))
               (monad.let [! random.monad]
                 [expected (random.unicode 1)
                  dummy (|> (random.unicode 1) (random.only (|>> (by text.equality = expected) not)))]
                 (_.coverage [\\projection.value_mismatch]
                   (|> (\\projection.this_string expected)
                       (\\projection.value {/.:String dummy})
                       (!expect (^.multi {try.:Failure error}
                                         (exception.is? \\projection.value_mismatch error))))))
               (monad.let [! random.monad]
                 [expected (random.unicode 1)]
                 (_.coverage [\\projection.nullable]
                   (and (|> (\\projection.nullable \\projection.string)
                            (\\projection.value {/.:Null})
                            (!expect (^.multi {try.:Success actual}
                                              (by (maybe.equality text.equality) = {.:None} actual))))
                        (|> (\\projection.nullable \\projection.string)
                            (\\projection.value {/.:String expected})
                            (!expect (^.multi {try.:Success actual}
                                              (by (maybe.equality text.equality) = {.:Some expected} actual)))))))
               (monad.let [! random.monad]
                 [size (by ! each (natural.% 10) random.natural)
                  expected (|> (random.unicode 1)
                               (random.list size))]
                 (_.coverage [\\projection.array]
                   (|> (\\projection.array (<>.some \\projection.string))
                       (\\projection.value {/.:Array (list:each (|>> {/.:String}) expected)})
                       (!expect (^.multi {try.:Success actual}
                                         (by (list.equality text.equality) = expected actual))))))
               (monad.let [! random.monad]
                 [expected (by ! each (|>> {/.:String}) (random.unicode 1))]
                 (_.coverage [\\projection.unconsumed_input]
                   (|> (\\projection.array \\projection.any)
                       (\\projection.value {/.:Array (list expected expected)})
                       (!expect (^.multi {try.:Failure error}
                                         (exception.is? \\projection.unconsumed_input error))))))
               (_.coverage [\\projection.empty_input]
                 (|> (\\projection.array \\projection.any)
                     (\\projection.value {/.:Array (list)})
                     (!expect (^.multi {try.:Failure error}
                                       (exception.is? \\projection.empty_input error)))))
               (monad.let [! random.monad]
                 [expected_boolean random.bit
                  expected_number random.safe_decimal
                  expected_string (random.unicode 1)
                  [boolean_field number_field string_field] (|> (random.set text.hash 3 (random.unicode 3))
                                                                (by ! each (|>> set.as_list
                                                                                (pipe.when
                                                                                  (list boolean_field number_field string_field)
                                                                                  [boolean_field number_field string_field]

                                                                                  _
                                                                                  (undefined)))))]
                 (_.coverage [\\projection.object \\projection.field]
                   (|> (\\projection.object (all <>.and
                                                 (\\projection.field boolean_field \\projection.boolean)
                                                 (\\projection.field number_field \\projection.number)
                                                 (\\projection.field string_field \\projection.string)))
                       (\\projection.value {/.:Object
                                            (dictionary.of_list text.hash
                                                                (list [boolean_field {/.:Boolean expected_boolean}]
                                                                      [number_field {/.:Number expected_number}]
                                                                      [string_field {/.:String expected_string}]))})
                       (!expect (^.multi {try.:Success [actual_boolean actual_number actual_string]}
                                         (and (by bit.equality = expected_boolean actual_boolean)
                                              (by decimal.equality = expected_number actual_number)
                                              (by text.equality = expected_string actual_string)))))))
               (monad.let [! random.monad]
                 [size (by ! each (natural.% 10) random.natural)
                  keys (random.list size (random.unicode 1))
                  values (random.list size (random.unicode 1))
                  .let [expected (dictionary.of_list text.hash (list.zipped_2 keys values))]]
                 (_.coverage [\\projection.dictionary]
                   (|> (\\projection.dictionary \\projection.string)
                       (\\projection.value {/.:Object
                                            (|> values
                                                (list:each (|>> {/.:String}))
                                                (list.zipped_2 keys)
                                                (dictionary.of_list text.hash))})
                       (!expect (^.multi {try.:Success actual}
                                         (by (dictionary.equality text.equality) = expected actual))))))
               ))))

(every Variant
  (.Variant
   {:Bit Bit}
   {:Text Text}
   {:Revolution Revolution}))

(every Record
  (.Record
   [:bit Bit
    :text Text
    :revolution Revolution]))

(every Recursive
  (Rec Recursive
    (.Variant
     {:Number Decimal}
     {:Addition Decimal Recursive})))

(every Arbitrary
  (.Record
   [:maybe (Maybe Decimal)
    :recursive Recursive]))

(the gen_recursive
  (Random Recursive)
  (random.rec
   (function (_ gen_recursive)
     (random.or random.unit_decimal
                (random.and random.unit_decimal
                            gen_recursive)))))

(the gen_arbitrary
  (Random Arbitrary)
  (monad.let [! random.monad]
    [size (by ! each (natural.% 2) random.natural)]
    (all random.and
         (random.maybe random.unit_decimal)
         ..gen_recursive)))

(the equality
  (Equality Arbitrary)
  (\\polytypic/equality.equality Arbitrary))

(the format
  (Format JSON Arbitrary)
  (\\polytypic.format Arbitrary))

(the \\polytypic
  Test
  (<| (_.covering \\polytypic._)
      (_.for [\\polytypic.format]
             (formatT.spec ..equality ..format ..gen_arbitrary))))

(the .public random
  (Random /.JSON)
  (random.rec
   (function (_ again)
     (monad.let [! random.monad]
       [size (by ! each (natural.% 3) random.natural)]
       (all random.or
            (by ! pure [])
            random.bit
            random.unit_decimal
            (random.unicode size)
            (random.list size again)
            (random.dictionary text.hash size (random.unicode size) again)
            )))))

(syntax.the (boolean [])
  (monad.let meta.monad
    [value meta.seed]
    (pure (list (code.bit (natural.even? value))))))

(syntax.the (number [])
  (monad.let meta.monad
    [value meta.seed]
    (pure (list (code.decimal (natural.decimal value))))))

(syntax.the (string [])
  (monad.let meta.monad
    [value (macro.name "string")]
    (pure (list (code.text (code.as_text value))))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.JSON])
      (`` (all _.and
               (_.for [/.equality /.=]
                      (static.when (identical? /.equality /.=)
                        (equalityT.spec /.equality ..random)))
               (_.for [/.any]
                      (all _.and
                           (formatT.spec any.equality /.any (random:pure []))
                           (formatT.spec any.equality (\\polytypic.format Any) (random:pure []))
                           ))
               (_.for [/.bit]
                      (all _.and
                           (formatT.spec bit.equality /.bit random.bit)
                           (formatT.spec bit.equality (\\polytypic.format Bit) random.bit)
                           ))
               (_.for [/.natural]
                      (all _.and
                           (formatT.spec natural.equality /.natural random.natural)
                           (formatT.spec natural.equality (\\polytypic.format Natural) random.natural)
                           ))
               (_.for [/.integer]
                      (all _.and
                           (formatT.spec integer.equality /.integer random.integer)
                           (formatT.spec integer.equality (\\polytypic.format Integer) random.integer)
                           ))
               (_.for [/.revolution]
                      (all _.and
                           (formatT.spec revolution.equality /.revolution random.revolution)
                           (formatT.spec revolution.equality (\\polytypic.format Revolution) random.revolution)
                           ))
               (_.for [/.decimal]
                      (all _.and
                           (formatT.spec decimal.equality /.decimal random.decimal)
                           (formatT.spec decimal.equality (\\polytypic.format Decimal) random.unit_decimal)
                           ))
               (_.for [/.text]
                      (all _.and
                           (formatT.spec text.equality /.text (random.unicode 2))
                           (formatT.spec text.equality (\\polytypic.format Text) (random.unicode 2))
                           ))
               (_.for [/.instant]
                      (all _.and
                           (formatT.spec instant.equality /.instant instant.random)
                           (formatT.spec instant.equality (\\polytypic.format instant.Instant) instant.random)
                           ))
               (_.for [/.duration]
                      (all _.and
                           (formatT.spec duration.equality /.duration duration.random)
                           (formatT.spec duration.equality (\\polytypic.format duration.Duration) duration.random)
                           ))
               (_.for [/.date]
                      (all _.and
                           (formatT.spec date.equality /.date date.random)
                           (formatT.spec date.equality (\\polytypic.format date.Date) date.random)
                           ))
               (_.for [/.day]
                      (all _.and
                           (formatT.spec day.equality /.day day.random)
                           (formatT.spec day.equality (\\polytypic.format day.Day) day.random)
                           ))
               (_.for [/.month]
                      (all _.and
                           (formatT.spec month.equality /.month month.random)
                           (formatT.spec month.equality (\\polytypic.format month.Month) month.random)
                           ))
               (_.for [/.list]
                      (let [equality (list.equality natural.equality)
                            random (random.list 2 random.natural)]
                        (all _.and
                             (formatT.spec equality (/.list /.natural) random)
                             (formatT.spec equality (\\polytypic.format (type (List Natural))) random)
                             )))
               (_.for [/.dictionary]
                      (let [equality (dictionary.equality natural.equality)
                            random (random.dictionary text.hash 2 (random.unicode 2) random.natural)]
                        (all _.and
                             (formatT.spec equality (/.dictionary /.natural) random)
                             (formatT.spec equality (\\polytypic.format (type (Dictionary Text Natural))) random)
                             )))
               (_.for [/.sum]
                      (let [equality (all equality.sum bit.equality text.equality revolution.equality)
                            random (all random.or random.bit (random.unicode 2) random.revolution)]
                        (formatT.spec equality (all /.sum /.bit /.text /.revolution) random)))
               (_.for [/.product]
                      (let [equality (all equality.product bit.equality text.equality revolution.equality)
                            random (all random.and random.bit (random.unicode 2) random.revolution)]
                        (formatT.spec equality (all /.product /.bit /.text /.revolution) random)))
               (monad.let random.monad
                 [left random.natural
                  right random.natural]
                 (_.coverage [/.recursive]
                   (with (try.equality (stack.equality natural.equality))
                     (= {try.:Success (stack left right)}
                        (with (is (Format JSON (Stack Natural))
                                  (/.recursive
                                   (|>> (/.product /.natural)
                                        (/.sum /.any))))
                          (of (as (stack left right))))))))
               (_.for [/.Case /.case /.or /.variant]
                      (let [equality (all equality.sum bit.equality text.equality revolution.equality)
                            random (all random.or random.bit (random.unicode 2) random.revolution)]
                        (all _.and
                             (formatT.spec equality (/.variant (all /.or (/.case /.bit) (/.case /.text) (/.case /.revolution))) random)
                             (formatT.spec equality (\\polytypic.format Variant) random)
                             )))
               (_.for [/.Member /.member /.and /.record]
                      (let [equality (all equality.product bit.equality text.equality revolution.equality)
                            random (all random.and random.bit (random.unicode 2) random.revolution)]
                        (all _.and
                             (formatT.spec equality (/.record (all /.and (/.member /.bit) (/.member /.text) (/.member /.revolution))) random)
                             (formatT.spec equality (\\polytypic.format Record) random)
                             )))
               (_.for [/.format]
                      (formatT.spec /.equality /.format ..random))

               (monad.let random.monad
                 [sample ..random]
                 (_.coverage [/.Null /.:Null /.null?]
                   (by bit.equality =
                       (/.null? sample)
                       (when sample
                         {/.:Null} true
                         _ false))))
               (monad.let random.monad
                 [expected ..random]
                 (_.coverage [/.as_text]
                   (|> expected
                       /.as_text
                       (by /.format of)
                       (try:each (/.= expected))
                       (try.else false))))
               (monad.let random.monad
                 [keys (random.set text.hash 3 (random.alphabetic 1))
                  values (random.set decimal.hash 3 random.unit_decimal)
                  .let [expected (list.zipped_2 (set.as_list keys)
                                                (list:each (|>> {/.:Number}) (set.as_list values)))
                        object (/.object expected)]]
                 (all _.and
                      (_.coverage [/.object /.fields]
                        (when (/.fields object)
                          {try.:Success actual}
                          (by (list.equality text.equality) =
                              (list:each product.left expected)
                              actual)
                          
                          {try.:Failure error}
                          false))
                      (_.coverage [/.field]
                        (list.every? (function (_ [key expected])
                                       (|> (/.field key object)
                                           (try:each (/.= expected))
                                           (try.else false)))
                                     expected))
                      ))
               (monad.let random.monad
                 [key (random.alphabetic 1)
                  unknown (random.only (|>> (by text.equality = key) not)
                                       (random.alphabetic 1))
                  expected random.unit_decimal]
                 (_.coverage [/.has]
                   (<| (try.else false)
                       (monad.let try.monad
                         [object (/.has key {/.:Number expected} (/.object (list)))
                          .let [can_find_known_key!
                                (|> object
                                    (/.field key)
                                    (try:each (/.= {/.:Number expected}))
                                    (try.else false))

                                cannot_find_unknown_key!
                                (when (/.field unknown object)
                                  {try.:Success _}
                                  false

                                  {try.:Failure error}
                                  true)]]
                         (pure (and can_find_known_key!
                                    cannot_find_unknown_key!))))))
               (,, (template.with [<type> <field> <tag> <random> <equality>]
                     [(monad.let random.monad
                        [key (random.alphabetic 1)
                         value <random>]
                        (_.coverage [<type> <tag> <field>]
                          (|> (/.object (list [key {<tag> value}]))
                              (<field> key)
                              (try:each (by <equality> = value))
                              (try.else false))))]

                     [[/.Boolean /.boolean_field /.:Boolean random.bit bit.equality]
                      [/.Number /.number_field /.:Number random.unit_decimal decimal.equality]
                      [/.String /.string_field /.:String (random.alphabetic 1) text.equality]
                      [/.Array /.array_field /.:Array (random.list 3 ..random) (list.equality /.equality)]
                      [/.Object /.object_field /.:Object (random.dictionary text.hash 3 (random.alphabetic 1) ..random) (dictionary.equality /.equality)]]))
               (expansion.let [<boolean> (boolean)
                               <number> (number)
                               <string> (string)
                               <array_list> (list {/.:Null}
                                                  {/.:Boolean <boolean>}
                                                  {/.:Number <number>}
                                                  {/.:String <string>})
                               <key0> (string)
                               <key1> (string)
                               <key2> (string)
                               <key3> (string)
                               <key4> (string)
                               <key5> (string)
                               <key6> (string)]
                 (_.coverage [/.json]
                   (and (/.= {/.:Null} (/.json ()))
                        (,, (template.with [<tag> <value>]
                              [(/.= {<tag> <value>} (/.json <value>))]
                              
                              [[/.:Boolean <boolean>]
                               [/.:Number <number>]
                               [/.:String <string>]]))
                        (/.= {/.:Array <array_list>} (/.json [() <boolean> <number> <string>]))
                        (let [object (/.json {<key0> ()
                                                     <key1> <boolean>
                                                     <key2> <number>
                                                     <key3> <string>
                                                     <key4> [() <boolean> <number> <string>]
                                                     <key5> {<key6> <number>}})]
                          (<| (try.else false)
                              (monad.let try.monad
                                [value0 (/.field <key0> object)
                                 value1 (/.field <key1> object)
                                 value2 (/.field <key2> object)
                                 value3 (/.field <key3> object)
                                 value4 (/.field <key4> object)
                                 value5 (/.field <key5> object)
                                 value6 (/.field <key6> value5)]
                                (pure (and (/.= {/.:Null} value0)
                                           (/.= {/.:Boolean <boolean>} value1)
                                           (/.= {/.:Number <number>} value2)
                                           (/.= {/.:String <string>} value3)
                                           (/.= {/.:Array <array_list>} value4)
                                           (/.= {/.:Number <number>} value6))))))
                        )))

               ..\\polytypic
               ..\\projection
               ))))
