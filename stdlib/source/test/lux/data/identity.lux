(.module:
  [lux #*
   [control
    ["M" monad (#+ Monad do)]
    comonad]
   [data
    ["&" identity]
    ["." text ("#/." monoid equivalence)]]]
  lux/test)

(context: "Identity"
  (let [(^open "&/.") &.apply
        (^open "&/.") &.monad
        (^open "&/.") &.comonad]
    ($_ seq
        (test "Functor does not affect values."
              (text/= "yololol" (&/map (text/compose "yolo") "lol")))
        
        (test "Apply does not affect values."
              (and (text/= "yolo" (&/wrap "yolo"))
                   (text/= "yololol" (&/apply (&/wrap (text/compose "yolo")) (&/wrap "lol")))))
        
        (test "Monad does not affect values."
              (text/= "yololol" (do &.monad
                                  [f (wrap text/compose)
                                   a (wrap "yolo")
                                   b (wrap "lol")]
                                  (wrap (f a b)))))
        
        (test "CoMonad does not affect values."
              (and (text/= "yololol" (&/unwrap "yololol"))
                   (text/= "yololol" (be &.comonad
                                       [f text/compose
                                        a "yolo"
                                        b "lol"]
                                       (f a b)))))
        )))
