(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    ["[0]" apply
     ["[1]T" \\test]]
    ["[0]" comonad
     ["[1]T" \\test]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only Identity)]])

(def injection
  (Injection Identity)
  (|>>))

(def comparison
  (Comparison Identity)
  (function (_ ==)
    ==))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Identity])
      (all _.and
           (_.for [/.functor]
                  (functorT.spec ..injection ..comparison /.functor))
           (_.for [/.apply]
                  (applyT.spec ..injection ..comparison /.apply))
           (_.for [/.monad]
                  (monadT.spec ..injection ..comparison /.monad))
           (_.for [/.comonad]
                  (comonadT.spec ..injection ..comparison /.comonad))
           )))
