(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [equivalence (#+)]
    [functor (#+)]
    comonad
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [data
    ["." text ("#@." monoid equivalence)
     ["%" format (#+ format)]]]]
  {1
   ["." / (#+ Identity)]})

(def: injection
  (Injection Identity)
  (|>>))

(def: comparison
  (Comparison Identity)
  (function (_ ==)
    ==))

(def: #export test
  Test
  (<| (_.context (%.name (name-of /.Identity)))
      ($_ _.and
          ($functor.spec ..injection ..comparison /.functor)
          ($apply.spec ..injection ..comparison /.apply)
          ($monad.spec ..injection ..comparison /.monad)
          
          (let [(^open "/@.") /.comonad]
            (_.test "CoMonad does not affect values."
                    (and (text@= "yololol" (/@unwrap "yololol"))
                         (text@= "yololol" (be /.comonad
                                             [f text@compose
                                              a "yolo"
                                              b "lol"]
                                             (f a b))))))
          )))
