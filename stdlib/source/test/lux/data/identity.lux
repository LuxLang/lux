(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [equivalence (#+)]
    [functor (#+)]
    comonad
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]
      ["$." comonad]]}]
   [data
    ["." text ("#@." monoid equivalence)
     ["%" format (#+ format)]]]]
  {1
   ["." / (#+ Identity)]})

(def: injection
  (Injection Identity)
  (|>>))

(def: comparison
  (Comparison Identity)
  (function (_ ==)
    ==))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.Identity])
      ($_ _.and
          (_.with-cover [/.functor]
            ($functor.spec ..injection ..comparison /.functor))
          (_.with-cover [/.apply]
            ($apply.spec ..injection ..comparison /.apply))
          (_.with-cover [/.monad]
            ($monad.spec ..injection ..comparison /.monad))
          (_.with-cover [/.comonad]
            ($comonad.spec ..injection ..comparison /.comonad))
          )))
