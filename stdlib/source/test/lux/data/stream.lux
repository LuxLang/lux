... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equality (.only Equality)]
    [functor (.only Functor)
     [\\test (.only Comparison)]]
    ["[0]" monad (.only Monad)
     ["[1]T" \\test]]]
   [data
    ["[0]" product]
    [collection
     ["[0]" sequence]]]
   [math
    ["[0]" random]
    [number
     [/64
      ["[0]" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the (comparison yield_equality)
  (for_any (_ yield)
    (-> (Equality yield)
        (Comparison (/.Stream yield))))
  (function (_ value_equality reference it)
    (let [[reference_yield reference_value] (/.sequence reference)
          [it_yield it_value] (/.sequence it)]
      (and (by (sequence.equality yield_equality) = reference_yield it_yield)
           (by value_equality = reference_value reference_value)))))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let random.monad
        [_0 random.natural
         _1 random.natural
         _2 random.natural])
      (_.for [/.Effect /.Stream])
      (all _.and
           (_.for [/.monad]
                  (monadT.spec (by /.monad pure) (..comparison natural.equality) /.monad))

           (_.coverage [/.one /.mix]
             (|> (monad.let /.monad
                   [_ (/.one _0)
                    _ (/.one _1)
                    _ (/.one _2)]
                   (pure []))
                 (/.mix natural.+ 0)
                 product.left
                 (natural.= (all natural.+ _0 _1 _2))))
           (_.coverage [/.each]
             (|> (monad.let /.monad
                   [_ (/.one _0)
                    _ (/.one _1)
                    _ (/.one _2)]
                   (pure []))
                 (/.each ++)
                 (/.mix natural.+ 0)
                 product.left
                 (natural.= (all natural.+ (++ _0) (++ _1) (++ _2)))))
           (_.coverage [/.only]
             (let [? (natural.> _0)
                   expected (|> (sequence.new _0 _1 _2)
                                (sequence.only ?)
                                (sequence.mix natural.+ 0))]
               (|> (monad.let /.monad
                     [_ (/.one _0)
                      _ (/.one _1)
                      _ (/.one _2)]
                     (pure []))
                   (/.only ?)
                   (/.mix natural.+ 0)
                   product.left
                   (natural.= expected))))
           (_.coverage [/.sequence]
             (|> (monad.let /.monad
                   [_ (/.one _1)

                    _ (/.one _2)
                    _ (/.one _2)]
                   (pure []))
                 /.sequence
                 product.left
                 (by (sequence.equality natural.equality) =
                     (sequence.new _1
                                   _2 _2))))
           (_.coverage [/.many]
             (|> (monad.let /.monad
                   [_ (/.many (list))
                    _ (/.many (list _1))
                    _ (/.many (list _2 _2))]
                   (pure []))
                 /.sequence
                 product.left
                 (by (sequence.equality natural.equality) =
                     (sequence.new _1
                                   _2 _2))))
           (_.coverage [/.next]
             (and (when (/.next (by /.monad pure _0))
                    {.:Left it}
                    (identical? _0 it)

                    else
                    false)
                  (when (/.next (/.one _0))
                    {.:Right [head tail]}
                    (identical? _0 head)

                    else
                    false)))
           )))
