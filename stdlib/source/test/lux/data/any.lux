(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]
    [\\specification
     ["[0]S" hash]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def .public random
  (Random Any)
  (random#in /.any))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec /.equivalence ..random))
           (_.for [/.hash]
                  (hashS.spec /.hash ..random))
           
           (_.coverage [/.any]
             (same? [] /.any))
           )))
