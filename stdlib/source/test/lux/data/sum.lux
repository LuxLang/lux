... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equality
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [control
    ["[0]" pipe]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" functor)]]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [test
    ["_" property (.only Test)]]]]
 ["/" \\library]
 ["!" \\theorem])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [.Union .Or])
      (monad.let [! random.monad]
        [expected random.natural
         shift random.natural]
        (all _.and
             (_.for [/.equality]
                    (equalityT.spec (/.equality n.equality n.equality)
                                    (random.or random.natural random.natural)))
             (_.for [/.hash]
                    (hashT.spec (/.hash n.hash n.hash)
                                (random.or random.natural random.natural)))

             (_.by_proof [/.left]
                         [!.left_by])
             (_.by_proof [/.right]
                         [!.right_by])
             (_.by_proof [/.by]
                         [!.identity_by_by])
             (monad.let !
               [size (by ! each (n.% 5) random.natural)
                expected (random.list size random.natural)]
               (all _.and
                    (_.coverage [/.lefts]
                      (let [actual (is (List (Or Natural Natural))
                                       (list:each /.left expected))]
                        (and (by (list.equality n.equality) =
                                 expected
                                 (/.lefts actual))
                             (by (list.equality n.equality) =
                                 (list)
                                 (/.rights actual)))))
                    (_.coverage [/.rights]
                      (let [actual (is (List (Or Natural Natural))
                                       (list:each /.right expected))]
                        (and (by (list.equality n.equality) =
                                 expected
                                 (/.rights actual))
                             (by (list.equality n.equality) =
                                 (list)
                                 (/.lefts actual)))))
                    (_.coverage [/.partition]
                      (let [[lefts rights] (|> expected
                                               (list:each (function (_ value)
                                                            (if (n.even? value)
                                                                (/.left value)
                                                                (/.right value))))
                                               (is (List (Or Natural Natural)))
                                               /.partition)]
                        (and (by (list.equality n.equality) =
                                 (list.only n.even? expected)
                                 lefts)
                             (by (list.equality n.equality) =
                                 (list.only (|>> n.even? not) expected)
                                 rights))))
                    ))
             ))))
