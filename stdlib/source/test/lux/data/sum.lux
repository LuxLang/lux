... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [control
    ["[0]" pipe]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]
     ["i" integer]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [.Union .Or])
      (do [! random.monad]
        [expected random.natural
         shift random.natural]
        (all _.and
             (_.for [/.equivalence]
                    (equivalenceT.spec (/.equivalence n.equivalence n.equivalence)
                                       (random.or random.natural random.natural)))
             (_.for [/.hash]
                    (hashT.spec (/.hash n.hash n.hash)
                                (random.or random.natural random.natural)))

             (_.coverage [/.left]
               (|> (/.left expected)
                   (is (Or Natural Natural))
                   (pipe.when
                     {#0 actual} (n.= expected actual)
                     _ false)))
             (_.coverage [/.right]
               (|> (/.right expected)
                   (is (Or Natural Natural))
                   (pipe.when
                     {#1 actual} (n.= expected actual)
                     _ false)))
             (_.coverage [/.either]
               (and (|> (/.left expected)
                        (is (Or Natural Natural))
                        (/.either (n.+ shift) (n.- shift))
                        (n.= (n.+ shift expected)))
                    (|> (/.right expected)
                        (is (Or Natural Natural))
                        (/.either (n.+ shift) (n.- shift))
                        (n.= (n.- shift expected)))))
             (_.coverage [/.then]
               (and (|> (/.left expected)
                        (is (Or Natural Natural))
                        (/.then (n.+ shift) (n.- shift))
                        (pipe.when {#0 actual} (n.= (n.+ shift expected) actual) _ false))
                    (|> (/.right expected)
                        (is (Or Natural Natural))
                        (/.then (n.+ shift) (n.- shift))
                        (pipe.when {#1 actual} (n.= (n.- shift expected) actual) _ false))))
             (do !
               [size (of ! each (n.% 5) random.natural)
                expected (random.list size random.natural)]
               (all _.and
                    (_.coverage [/.lefts]
                      (let [actual (is (List (Or Natural Natural))
                                       (list#each /.left expected))]
                        (and (of (list.equivalence n.equivalence) =
                                 expected
                                 (/.lefts actual))
                             (of (list.equivalence n.equivalence) =
                                 (list)
                                 (/.rights actual)))))
                    (_.coverage [/.rights]
                      (let [actual (is (List (Or Natural Natural))
                                       (list#each /.right expected))]
                        (and (of (list.equivalence n.equivalence) =
                                 expected
                                 (/.rights actual))
                             (of (list.equivalence n.equivalence) =
                                 (list)
                                 (/.lefts actual)))))
                    (_.coverage [/.partition]
                      (let [[lefts rights] (|> expected
                                               (list#each (function (_ value)
                                                            (if (n.even? value)
                                                              (/.left value)
                                                              (/.right value))))
                                               (is (List (Or Natural Natural)))
                                               /.partition)]
                        (and (of (list.equivalence n.equivalence) =
                                 (list.only n.even? expected)
                                 lefts)
                             (of (list.equivalence n.equivalence) =
                                 (list.only (|>> n.even? not) expected)
                                 rights))))
                    ))
             ))))
