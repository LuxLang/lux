(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]]}]
   [control
    pipe]
   [data
    ["." text]
    [number
     ["n" nat]]
    [collection
     ["." list ("#@." functor)]]]
   [math
    ["." random]]]
  {1
   ["." /]})

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [.|])
      (do {! random.monad}
        [expected random.nat
         shift random.nat])
      ($_ _.and
          (_.with-cover [/.equivalence]
            ($equivalence.spec (/.equivalence n.equivalence n.equivalence)
                               (random.or random.nat random.nat)))

          (_.cover [/.left]
                   (|> (/.left expected)
                       (: (| Nat Nat))
                       (case> (0 #0 actual) (n.= expected actual)
                              _ false)))
          (_.cover [/.right]
                   (|> (/.right expected)
                       (: (| Nat Nat))
                       (case> (0 #1 actual) (n.= expected actual)
                              _ false)))
          (_.cover [/.either]
                   (and (|> (/.left expected)
                            (: (| Nat Nat))
                            (/.either (n.+ shift) (n.- shift))
                            (n.= (n.+ shift expected)))
                        (|> (/.right expected)
                            (: (| Nat Nat))
                            (/.either (n.+ shift) (n.- shift))
                            (n.= (n.- shift expected)))))
          (_.cover [/.each]
                   (and (|> (/.left expected)
                            (: (| Nat Nat))
                            (/.each (n.+ shift) (n.- shift))
                            (case> (0 #0 actual) (n.= (n.+ shift expected) actual) _ false))
                        (|> (/.right expected)
                            (: (| Nat Nat))
                            (/.each (n.+ shift) (n.- shift))
                            (case> (0 #1 actual) (n.= (n.- shift expected) actual) _ false))))
          (do !
            [size (:: ! map (n.% 5) random.nat)
             expected (random.list size random.nat)]
            ($_ _.and
                (_.cover [/.lefts]
                         (let [actual (: (List (| Nat Nat))
                                         (list@map /.left expected))]
                           (and (:: (list.equivalence n.equivalence) =
                                    expected
                                    (/.lefts actual))
                                (:: (list.equivalence n.equivalence) =
                                    (list)
                                    (/.rights actual)))))
                (_.cover [/.rights]
                         (let [actual (: (List (| Nat Nat))
                                         (list@map /.right expected))]
                           (and (:: (list.equivalence n.equivalence) =
                                    expected
                                    (/.rights actual))
                                (:: (list.equivalence n.equivalence) =
                                    (list)
                                    (/.lefts actual)))))
                (_.cover [/.partition]
                         (let [[lefts rights] (|> expected
                                                  (list@map (function (_ value)
                                                              (if (n.even? value)
                                                                (/.left value)
                                                                (/.right value))))
                                                  (: (List (| Nat Nat)))
                                                  /.partition)]
                           (and (:: (list.equivalence n.equivalence) =
                                    (list.filter n.even? expected)
                                    lefts)
                                (:: (list.equivalence n.equivalence) =
                                    (list.filter (|>> n.even? not) expected)
                                    rights))))
                ))
          )))
