(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" hash]]]
   [control
    ["[0]" pipe]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.open: "[1]#[0]" functor)]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]
     ["i" int]]]]]
 [\\library
  ["[0]" /]])

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [.Union .Or])
      (do [! random.monad]
        [expected random.nat
         shift random.nat]
        (all _.and
             (_.for [/.equivalence]
                    ($equivalence.spec (/.equivalence n.equivalence n.equivalence)
                                       (random.or random.nat random.nat)))
             (_.for [/.hash]
                    ($hash.spec (/.hash n.hash n.hash)
                                (random.or random.nat random.nat)))

             (_.coverage [/.left]
               (|> (/.left expected)
                   (is (Or Nat Nat))
                   (pipe.case
                     {0 #0 actual} (n.= expected actual)
                     _ false)))
             (_.coverage [/.right]
               (|> (/.right expected)
                   (is (Or Nat Nat))
                   (pipe.case
                     {0 #1 actual} (n.= expected actual)
                     _ false)))
             (_.coverage [/.either]
               (and (|> (/.left expected)
                        (is (Or Nat Nat))
                        (/.either (n.+ shift) (n.- shift))
                        (n.= (n.+ shift expected)))
                    (|> (/.right expected)
                        (is (Or Nat Nat))
                        (/.either (n.+ shift) (n.- shift))
                        (n.= (n.- shift expected)))))
             (_.coverage [/.then]
               (and (|> (/.left expected)
                        (is (Or Nat Nat))
                        (/.then (n.+ shift) (n.- shift))
                        (pipe.case {0 #0 actual} (n.= (n.+ shift expected) actual) _ false))
                    (|> (/.right expected)
                        (is (Or Nat Nat))
                        (/.then (n.+ shift) (n.- shift))
                        (pipe.case {0 #1 actual} (n.= (n.- shift expected) actual) _ false))))
             (do !
               [size (# ! each (n.% 5) random.nat)
                expected (random.list size random.nat)]
               (all _.and
                    (_.coverage [/.lefts]
                      (let [actual (is (List (Or Nat Nat))
                                       (list#each /.left expected))]
                        (and (# (list.equivalence n.equivalence) =
                                expected
                                (/.lefts actual))
                             (# (list.equivalence n.equivalence) =
                                (list)
                                (/.rights actual)))))
                    (_.coverage [/.rights]
                      (let [actual (is (List (Or Nat Nat))
                                       (list#each /.right expected))]
                        (and (# (list.equivalence n.equivalence) =
                                expected
                                (/.rights actual))
                             (# (list.equivalence n.equivalence) =
                                (list)
                                (/.lefts actual)))))
                    (_.coverage [/.partition]
                      (let [[lefts rights] (|> expected
                                               (list#each (function (_ value)
                                                            (if (n.even? value)
                                                              (/.left value)
                                                              (/.right value))))
                                               (is (List (Or Nat Nat)))
                                               /.partition)]
                        (and (# (list.equivalence n.equivalence) =
                                (list.only n.even? expected)
                                lefts)
                             (# (list.equivalence n.equivalence) =
                                (list.only (|>> n.even? not) expected)
                                rights))))
                    ))
             ))))
