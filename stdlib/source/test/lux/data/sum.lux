(.module:
  [lux #*
   ["_" test (#+ Test)]
   ["%" data/text/format (#+ format)]
   [control
    pipe]
   [data
    ["." text]
    [number
     ["n" nat]]
    [collection
     ["." list]]]]
  {1
   ["." /]})

(def: #export test
  Test
  (<| (_.context (%.name (name-of .|)))
      (let [(^open "list/.") (list.equivalence text.equivalence)]
        ($_ _.and
            (_.test "Can inject values into Either."
                    (and (|> (/.left "Hello") (case> (0 "Hello") #1 _ #0))
                         (|> (/.right "World") (case> (1 "World") #1 _ #0))))
            (_.test "Can discriminate eithers based on their cases."
                    (let [[_lefts _rights] (/.partition (: (List (| Text Text))
                                                           (list (0 "0") (1 "1") (0 "2"))))]
                      (and (list/= _lefts
                                   (/.lefts (: (List (| Text Text))
                                               (list (0 "0") (1 "1") (0 "2")))))

                           (list/= _rights
                                   (/.rights (: (List (| Text Text))
                                                (list (0 "0") (1 "1") (0 "2"))))))))
            (_.test "Can apply a function to an Either value depending on the case."
                    (and (n.= 10 (/.either (function (_ _) 10)
                                           (function (_ _) 20)
                                           (: (| Text Text) (0 ""))))
                         (n.= 20 (/.either (function (_ _) 10)
                                           (function (_ _) 20)
                                           (: (| Text Text) (1 ""))))))
            ))))
