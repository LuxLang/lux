(.module:
  [lux #*
   ["_" test (#+ Test)]
   [data
    ["." name]
    ["%" text/format (#+ format)]]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]]}]
   [math
    ["r" random (#+ Random)]]]
  {1
   ["." /
    ["/#" // #_
     ["#." i64 (#+ Mask)]]]})

(def: #export i8
  (Random /.I8)
  (:: r.functor map /.i8 r.i64))

(def: mask
  Mask
  (//i64.or //i64.sign
            (//i64.mask 7)))

(def: #export test
  Test
  (<| (_.context (name.module (name-of /._)))
      (do {@ r.monad}
        [expected (:: @ map (|>> (//i64.and ..mask) (: I64)) r.i64)]
        ($_ _.and
            ($equivalence.spec /.equivalence ..i8)
            
            (_.test "Can convert between I64 and I8"
                    (let [actual (|> expected /.i8 /.i64)]
                      (:: //i64.equivalence = expected actual)))
            ))))
