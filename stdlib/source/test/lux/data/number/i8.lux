(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]]}]
   [data
    [number
     ["i" int]]]
   [math
    ["." random (#+ Random)]]]
  {1
   ["." /
    ["/#" // #_
     ["#." i64]]]})

(def: #export random
  (Random /.I8)
  (\ random.functor map /.i8 random.i64))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.I8])
      (do {! random.monad}
        [#let [limit (|> (dec /.width)
                         //i64.mask
                         .int
                         inc)]
         expected (\ ! map (i.% limit) random.int)]
        ($_ _.and
            (_.with-cover [/.equivalence]
              ($equivalence.spec /.equivalence ..random))
            
            (_.cover [/.i8 /.i64 /.width]
                     (let [actual (|> expected .i64 /.i8 /.i64)]
                       (\ //i64.equivalence = expected actual)))
            ))))
