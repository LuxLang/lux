(.module:
  [lux #*
   ["_" test (#+ Test)]
   [data
    ["." name]
    ["%" text/format (#+ format)]
    [number
     ["i" int]]]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]
      ["$." monoid]]}]
   [math
    ["r" random]]]
  {1
   ["." /
    ["/#" // #_
     ["#." nat]]]})

(def: #export test
  Test
  (<| (_.context (name.module (name-of /._)))
      (do {@ r.monad}
        [pattern r.nat
         idx (:: @ map (//nat.% /.width) r.nat)]
        ($_ _.and
            ($equivalence.spec /.equivalence r.i64)
            ($monoid.spec //nat.equivalence /.disjunction r.nat)
            ($monoid.spec //nat.equivalence /.conjunction r.nat)
            
            (_.test "Clearing and settings bits should alter the count."
                    (and (//nat.= (dec (/.count (/.set idx pattern)))
                                  (/.count (/.clear idx pattern)))
                         (|> (/.count pattern)
                             (//nat.- (/.count (/.clear idx pattern)))
                             (//nat.<= 1))
                         (|> (/.count (/.set idx pattern))
                             (//nat.- (/.count pattern))
                             (//nat.<= 1))))
            (_.test "Can query whether a bit is set."
                    (and (or (and (/.set? idx pattern)
                                  (not (/.set? idx (/.clear idx pattern))))
                             (and (not (/.set? idx pattern))
                                  (/.set? idx (/.set idx pattern))))

                         (or (and (/.set? idx pattern)
                                  (not (/.set? idx (/.flip idx pattern))))
                             (and (not (/.set? idx pattern))
                                  (/.set? idx (/.flip idx pattern))))))
            (_.test "The negation of a bit pattern should have a complementary bit-count."
                    (//nat.= /.width
                             (//nat.+ (/.count pattern)
                                      (/.count (/.not pattern)))))
            (_.test "Can do simple binary logic."
                    (and (//nat.= 0
                                  (/.and pattern
                                         (/.not pattern)))
                         (//nat.= (/.not 0)
                                  (/.or pattern
                                        (/.not pattern)))
                         (//nat.= (/.not 0)
                                  (/.xor pattern
                                         (/.not pattern)))
                         (//nat.= 0
                                  (/.xor pattern
                                         pattern))))
            (_.test "rotate-left and rotate-right are inverses of one another."
                    (and (|> pattern
                             (/.rotate-left idx)
                             (/.rotate-right idx)
                             (//nat.= pattern))
                         (|> pattern
                             (/.rotate-right idx)
                             (/.rotate-left idx)
                             (//nat.= pattern))))
            (_.test "Rotate as many spaces as the bit-pattern's width leaves the pattern unchanged."
                    (and (|> pattern
                             (/.rotate-left /.width)
                             (//nat.= pattern))
                         (|> pattern
                             (/.rotate-right /.width)
                             (//nat.= pattern))))
            (_.test "Shift right respect the sign of ints."
                    (let [value (.int pattern)]
                      (if (i.< +0 value)
                        (i.< +0 (/.arithmetic-right-shift idx value))
                        (i.>= +0 (/.arithmetic-right-shift idx value)))))
            ))))
