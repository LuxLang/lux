(.module:
  [lux #*
   data/text/format
   ["_" test (#+ Test)]
   [control
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." equivalence]
      ["$." order]
      ["$." number]
      ["$." enum]
      ["$." interval]
      ["$." monoid]
      ["$." codec]]}]
   [math
    ["r" random]]]
  {1
   ["." /
    //]})

(def: #export test
  Test
  (<| (_.context (%name (name-of .Rev)))
      ($_ _.and
          ($equivalence.spec /.equivalence r.rev)
          ($order.spec /.order r.rev)
          ($number.spec /.order /.number r.rev)
          ($enum.spec /.enum r.rev)
          ($interval.spec /.interval r.rev)
          (<| (_.context "Addition.")
              ($monoid.spec /.equivalence /.addition r.rev))
          (<| (_.context "Multiplication.")
              ($monoid.spec /.equivalence /.multiplication r.rev))
          (<| (_.context "Minimum.")
              ($monoid.spec /.equivalence /.minimum r.rev))
          (<| (_.context "Maximum.")
              ($monoid.spec /.equivalence /.multiplication r.rev))
          (<| (_.context "Binary.")
              ($codec.spec /.equivalence /.binary r.rev))
          (<| (_.context "Octal.")
              ($codec.spec /.equivalence /.octal r.rev))
          (<| (_.context "Decimal.")
              ($codec.spec /.equivalence /.decimal r.rev))
          (<| (_.context "Hexadecimal.")
              ($codec.spec /.equivalence /.hex r.rev))

          (_.test "Alternate notations."
                  (and (r/= (bin ".11001001")
                            (bin ".11,00,10,01"))
                       (r/= (oct ".615243")
                            (oct ".615,243"))
                       (r/= (hex ".deadBEEF")
                            (hex ".dead,BEEF"))))
          )))
