(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." equivalence]
      ["$." order]
      ["$." number]
      ["$." enum]
      ["$." interval]
      ["$." monoid]
      ["$." codec]]}]
   [data
    [number
     ["." i64]]]
   [math
    ["r" random]]]
  {1
   ["." /
    //]})

(def: #export test
  Test
  (<| (_.context (%.name (name-of /._)))
      (`` ($_ _.and
              ($equivalence.spec /.equivalence r.rev)
              ($order.spec /.order r.rev)
              ($enum.spec /.enum r.rev)
              ($interval.spec /.interval r.rev)
              (~~ (template [<monoid>]
                    [(<| (_.context (%.name (name-of <monoid>)))
                         ($monoid.spec /.equivalence <monoid> r.rev))]

                    [/.addition] [/.minimum] [/.maximum]
                    ))
              (~~ (template [<codec>]
                    [(<| (_.context (%.name (name-of /.binary)))
                         ($codec.spec /.equivalence <codec> r.rev))]

                    [/.binary] [/.octal] [/.decimal] [/.hex]
                    ))
              (_.test "Alternate notations."
                      (and (r/= (bin ".11001001")
                                (bin ".11,00,10,01"))
                           (r/= (oct ".615243")
                                (oct ".615,243"))
                           (r/= (hex ".deadBEEF")
                                (hex ".dead,BEEF"))))
              ))))
