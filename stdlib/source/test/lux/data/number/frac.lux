(.module:
  [lux #*
   data/text/format
   ["_" test (#+ Test)]
   [control
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." equivalence]
      ["$." order]
      ["$." number]
      ["$." enum]
      ["$." interval]
      ["$." monoid]
      ["$." codec]]}]
   [math
    ["r" random]]]
  {1
   ["." /
    //]})

(def: #export test
  Test
  (<| (_.context (%name (name-of .Frac)))
      ($_ _.and
          ($equivalence.spec /.equivalence r.frac)
          ($order.spec /.order r.frac)
          ($number.spec /.order /.number r.frac)
          ($enum.spec /.enum r.frac)
          ($interval.spec /.interval r.frac)
          (<| (_.context "Addition.")
              ($monoid.spec /.equivalence /.addition r.frac))
          (<| (_.context "Multiplication.")
              ($monoid.spec /.equivalence /.multiplication r.frac))
          (<| (_.context "Minimum.")
              ($monoid.spec /.equivalence /.minimum r.frac))
          (<| (_.context "Maximum.")
              ($monoid.spec /.equivalence /.multiplication r.frac))
          ## TODO: Uncomment ASAP
          ## (<| (_.context "Binary.")
          ##     ($codec.spec /.equivalence /.binary r.frac))
          ## (<| (_.context "Octal.")
          ##     ($codec.spec /.equivalence /.octal r.frac))
          ## (<| (_.context "Decimal.")
          ##     ($codec.spec /.equivalence /.decimal r.frac))
          ## (<| (_.context "Hexadecimal.")
          ##     ($codec.spec /.equivalence /.hex r.frac))

          (_.test "Alternate notations."
                  (and (f/= (bin "+1100.1001")
                            (bin "+11,00.10,01"))
                       (f/= (oct "-6152.43")
                            (oct "-615,2.43"))
                       (f/= (hex "+deadBE.EF")
                            (hex "+dead,BE.EF"))))
          (do r.monad
            [sample r.frac]
            (_.test "Can convert frac values to/from their bit patterns."
                    (|> sample /.frac-to-bits /.bits-to-frac (f/= sample))))
          )))
