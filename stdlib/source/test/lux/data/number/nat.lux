(.module:
  [lux #*
   data/text/format
   ["_" test (#+ Test)]
   [control
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." equivalence]
      ["$." order]
      ["$." number]
      ["$." enum]
      ["$." interval]
      ["$." monoid]
      ["$." codec]]}]
   [math
    ["r" random]]]
  {1
   ["." /
    //]})

(def: #export test
  Test
  (<| (_.context (%name (name-of /._)))
      (`` ($_ _.and
              ($equivalence.spec /.equivalence r.nat)
              ($order.spec /.order r.nat)
              ($number.spec /.order /.number (:: r.monad map (n/% 1,000,000) r.nat))
              ($enum.spec /.enum r.nat)
              ($interval.spec /.interval r.nat)
              (~~ (do-template [<monoid>]
                    [(<| (_.context (%name (name-of <monoid>)))
                         ($monoid.spec /.equivalence <monoid> r.nat))]

                    [/.addition] [/.multiplication] [/.minimum] [/.maximum]
                    ))
              (~~ (do-template [<codec>]
                    [(<| (_.context (%name (name-of /.binary)))
                         ($codec.spec /.equivalence <codec> r.nat))]

                    [/.binary] [/.octal] [/.decimal] [/.hex]
                    ))

              (_.test "Alternate notations."
                      (and (n/= (bin "11001001")
                                (bin "11,00,10,01"))
                           (n/= (oct "615243")
                                (oct "615,243"))
                           (n/= (hex "deadBEEF")
                                (hex "dead,BEEF"))))
              ))))
