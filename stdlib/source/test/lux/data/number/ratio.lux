(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." equivalence]
      ["$." order]
      ["$." monoid]
      ["$." codec]]}]
   [data
    [number
     ["n" nat]]]
   [math
    ["r" random (#+ Random)]]]
  {1
   ["." / (#+ Ratio)]})

(def: part
  (Random Nat)
  (|> r.nat (:: r.monad map (|>> (n.% 1,000,000) (n.max 1)))))

(def: #export ratio
  (Random Ratio)
  (do r.monad
    [numerator ..part
     denominator (r.filter (|>> (n.= 0) not) ..part)]
    (wrap (/.ratio numerator denominator))))

(def: #export test
  Test
  (<| (_.context (%.name (name-of /._)))
      (`` ($_ _.and
              ($equivalence.spec /.equivalence ..ratio)
              ($order.spec /.order ..ratio)
              (~~ (template [<monoid>]
                    [(<| (_.context (%.name (name-of <monoid>)))
                         ($monoid.spec /.equivalence <monoid> ..ratio))]

                    [/.addition] [/.multiplication]
                    ))
              ($codec.spec /.equivalence /.codec ..ratio)

              (do r.monad
                [denom0 ..part
                 denom1 ..part]
                (_.test "All zeroes are the same."
                        (let [(^open "/@.") /.equivalence]
                          (/@= (/.ratio 0 denom0)
                               (/.ratio 0 denom1)))))
              ))))
