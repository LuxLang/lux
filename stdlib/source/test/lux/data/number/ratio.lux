(.module:
  [lux #*
   data/text/format
   ["_" test (#+ Test)]
   [control
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." equivalence]
      ["$." order]
      ["$." number]
      ["$." codec]]}]
   [math
    ["r" random (#+ Random)]]]
  {1
   ["." / (#+ Ratio)]})

(def: part
  (Random Nat)
  (|> r.nat (:: r.monad map (|>> (n/% 1000) (n/max 1)))))

(def: #export ratio
  (Random Ratio)
  (do r.monad
    [numerator ..part
     denominator (|> ..part
                     (r.filter (|>> (n/= 0) not))
                     (r.filter (|>> (n/= numerator) not)))]
    (wrap (/.ratio numerator denominator))))

(def: #export test
  Test
  (do r.monad
    [denom0 ..part
     denom1 ..part]
    ($_ _.and
        ($equivalence.spec /.equivalence ..ratio)
        ($order.spec /.order ..ratio)
        ($number.spec /.order /.number ..ratio)
        ($codec.spec /.equivalence /.codec ..ratio)

        (_.test "All zeroes are the same."
                (let [(^open "/@.") /.equivalence]
                  (/@= (/.ratio 0 denom0)
                       (/.ratio 0 denom1))))
        )))
