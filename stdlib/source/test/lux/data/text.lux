(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do Monad)]
    {[0 #test]
     [/
      ["$." equivalence]
      ["$." order]]}]
   [control
    pipe]
   [data
    [number
     ["n" nat]]
    [collection
     ["." list]]]
   [math
    ["r" random]]]
  {1
   ["." /]})

(def: bounded-size
  (r.Random Nat)
  (|> r.nat
      (:: r.monad map (|>> (n.% 20) (n.+ 1)))))

(def: #export test
  Test
  (<| (_.context (%.name (name-of .Text)))
      ($_ _.and
          ($equivalence.spec /.equivalence (r.ascii 2))
          ($order.spec /.order (r.ascii 2))

          (do r.monad
            [size (:: @ map (n.% 10) r.nat)
             sample (r.unicode size)]
            ($_ _.and
                (_.test "Can get the size of text."
                        (n.= size (/.size sample)))
                (_.test "Text with size 0 is considered 'empty'."
                        (or (not (n.= 0 size))
                            (/.empty? sample)))))
          (do r.monad
            [size bounded-size
             idx (:: @ map (n.% size) r.nat)
             sample (r.unicode size)]
            (_.test "Character locations."
                    (|> sample
                        (/.nth idx)
                        (case> (^multi (#.Some char)
                                       [(/.from-code char) char]
                                       [[(/.index-of char sample)
                                         (/.last-index-of char sample)
                                         (/.index-of' char idx sample)
                                         (/.last-index-of' char idx sample)]
                                        [(#.Some io) (#.Some lio)
                                         (#.Some io') (#.Some lio')]])
                               (and (n.<= idx io)
                                    (n.>= idx lio)

                                    (n.= idx io')
                                    (n.>= idx lio')

                                    (/.contains? char sample))

                               _
                               #0
                               ))
                    ))
          (do r.monad
            [sizeL bounded-size
             sizeR bounded-size
             sampleL (r.unicode sizeL)
             sampleR (r.unicode sizeR)
             #let [sample (/.concat (list sampleL sampleR))
                   (^open "/@.") /.equivalence]]
            ($_ _.and
                (_.test "Can join text snippets."
                        (and (not (/@= sample
                                       (/.join-with " " (list sampleL sampleR))))
                             (/@= sample
                                  (/.join-with "" (list sampleL sampleR)))))
                (_.test "Can check sub-texts at the borders."
                        (and (/.starts-with? sampleL sample)
                             (/.ends-with? sampleR sample)))
                (_.test "Can enclose text in another texts."
                        (/@= (/.enclose [sampleR sampleR] sampleL)
                             (/.enclose' sampleR sampleL)))
                (_.test "Can split text."
                        (|> (/.split sizeL sample)
                            (case> (#.Right [_l _r])
                                   (and (/@= sampleL _l)
                                        (/@= sampleR _r)
                                        (/@= sample (/.concat (list _l _r))))

                                   _
                                   #0)))
                (_.test "Can clip text."
                        (|> [(/.clip 0 sizeL sample)
                             (/.clip sizeL (/.size sample) sample)
                             (/.clip' sizeL sample)
                             (/.clip' 0 sample)]
                            (case> [(#.Right _l) (#.Right _r) (#.Right _r') (#.Right _f)]
                                   (and (/@= sampleL _l)
                                        (/@= sampleR _r)
                                        (/@= _r _r')
                                        (/@= sample _f))

                                   _
                                   #0)))
                ))
          (do r.monad
            [sizeP bounded-size
             sizeL bounded-size
             #let [## The wider unicode charset includes control characters that
                   ## can make text replacement work improperly.
                   ## Because of that, I restrict the charset.
                   normal-char-gen (|> r.nat (:: @ map (|>> (n.% 128) (n.max 1))))]
             sep1 (r.text normal-char-gen 1)
             sep2 (r.text normal-char-gen 1)
             #let [part-gen (|> (r.text normal-char-gen sizeP)
                                (r.filter (|>> (/.contains? sep1) not)))]
             parts (r.list sizeL part-gen)
             #let [sample1 (/.concat (list.interpose sep1 parts))
                   sample2 (/.concat (list.interpose sep2 parts))
                   (^open "/@.") /.equivalence]]
            ($_ _.and
                (_.test "Can split text multiple times through a separator."
                        (n.= (list.size parts)
                             (list.size (/.split-all-with sep1 sample1))))

                (_.test "Can replace occurrences of a piece of text inside a larger text."
                        (/@= sample2
                             (/.replace-all sep1 sep2 sample1)))
                ))
          )))
