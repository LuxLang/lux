(.module:
  [library
   [lux (#- char)
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]
      ["$." hash]
      ["$." order]
      ["$." monoid]]]
    [control
     pipe]
    [data
     ["." maybe]
     [collection
      ["." list]
      ["." set]]]
    [math
     ["." random]
     [number
      ["n" nat]]]]]
  ["." / #_
   ["#." buffer]
   ["#." encoding]
   ["#." format]
   ["#." regex]
   ["#." escape]
   ["#." unicode #_
    ["#" set]]]
  [\\library
   ["." /]])

(def: bounded_size
  (random.Random Nat)
  (|> random.nat
      (\ random.monad map (|>> (n.% 20) (n.+ 1)))))

(def: size
  Test
  (do {! random.monad}
    [size (\ ! map (n.% 10) random.nat)
     sample (random.unicode size)]
    ($_ _.and
        (_.cover [/.size]
                 (n.= size (/.size sample)))
        (_.cover [/.empty?]
                 (or (/.empty? sample)
                     (not (n.= 0 size)))))))

(def: affix
  Test
  (do {! random.monad}
    [inner (random.unicode 1)
     outer (random.only (|>> (\ /.equivalence = inner) not)
                        (random.unicode 1))
     left (random.unicode 1)
     right (random.unicode 1)
     #let [full (\ /.monoid compose inner outer)
           fake_index (dec 0)]]
    (`` ($_ _.and
            (~~ (template [<affix> <predicate>]
                  [(_.cover [<affix> <predicate>]
                            (<predicate> outer (<affix> outer inner)))]

                  [/.prefix /.starts_with?]
                  [/.suffix /.ends_with?]
                  [/.enclosed' /.enclosed_by?]
                  ))
            (_.cover [/.enclosed]
                     (let [value (/.enclosed [left right] inner)]
                       (and (/.starts_with? left value)
                            (/.ends_with? right value))))
            (_.cover [/.format]
                     (let [sample (/.format inner)]
                       (and (/.enclosed_by? /.double_quote sample)
                            (/.contains? inner sample))))
            ))))

(def: index
  Test
  (do {! random.monad}
    [inner (random.unicode 1)
     outer (random.only (|>> (\ /.equivalence = inner) not)
                        (random.unicode 1))
     #let [fake_index (dec 0)]]
    ($_ _.and
        (_.cover [/.contains?]
                 (let [full (\ /.monoid compose inner outer)]
                   (and (/.contains? inner full)
                        (/.contains? outer full))))
        (_.cover [/.index_of]
                 (and (|> (/.index_of inner (\ /.monoid compose inner outer))
                          (maybe.default fake_index)
                          (n.= 0))
                      (|> (/.index_of outer (\ /.monoid compose inner outer))
                          (maybe.default fake_index)
                          (n.= 1))))
        (_.cover [/.index_of']
                 (let [full (\ /.monoid compose inner outer)]
                   (and (|> (/.index_of' inner 0 full)
                            (maybe.default fake_index)
                            (n.= 0))
                        (|> (/.index_of' inner 1 full)
                            (maybe.default fake_index)
                            (n.= fake_index))
                        
                        (|> (/.index_of' outer 0 full)
                            (maybe.default fake_index)
                            (n.= 1))
                        (|> (/.index_of' outer 1 full)
                            (maybe.default fake_index)
                            (n.= 1))
                        (|> (/.index_of' outer 2 full)
                            (maybe.default fake_index)
                            (n.= fake_index)))))
        (_.cover [/.last_index_of]
                 (let [full ($_ (\ /.monoid compose) outer inner outer)]
                   (and (|> (/.last_index_of inner full)
                            (maybe.default fake_index)
                            (n.= 1))
                        (|> (/.last_index_of outer full)
                            (maybe.default fake_index)
                            (n.= 2)))))
        (_.cover [/.last_index_of']
                 (let [full ($_ (\ /.monoid compose) outer inner outer)]
                   (and (|> (/.last_index_of' inner 0 full)
                            (maybe.default fake_index)
                            (n.= 1))
                        (|> (/.last_index_of' inner 2 full)
                            (maybe.default fake_index)
                            (n.= fake_index))
                        
                        (|> (/.last_index_of' outer 0 full)
                            (maybe.default fake_index)
                            (n.= 2))
                        (|> (/.last_index_of' outer 2 full)
                            (maybe.default fake_index)
                            (n.= 2))
                        (|> (/.last_index_of' outer 3 full)
                            (maybe.default fake_index)
                            (n.= fake_index)))))
        )))

(def: char
  Test
  ($_ _.and
      (_.for [/.Char /.of_code]
             (`` ($_ _.and
                     (~~ (template [<short> <long>]
                           [(_.cover [<short> <long>]
                                     (\ /.equivalence = <short> <long>))]

                           [/.\0  /.null]
                           [/.\a  /.alarm]
                           [/.\b  /.back_space]
                           [/.\t  /.tab]
                           [/.\n  /.new_line]
                           [/.\v  /.vertical_tab]
                           [/.\f  /.form_feed]
                           [/.\r  /.carriage_return]
                           [/.\'' /.double_quote]))
                     (_.cover [/.line_feed]
                              (\ /.equivalence = /.new_line /.line_feed))
                     )))
      (do {! random.monad}
        [size (\ ! map (|>> (n.% 10) inc) random.nat)
         characters (random.set /.hash size (random.ascii/alpha 1))
         #let [sample (|> characters set.to_list /.concat)]
         expected (\ ! map (n.% size) random.nat)]
        (_.cover [/.nth]
                 (case (/.nth expected sample)
                   (#.Some char)
                   (case (/.index_of (/.of_code char) sample)
                     (#.Some actual)
                     (n.= expected actual)

                     _
                     false)
                   
                   #.None
                   false)))
      (_.cover [/.space /.space?]
               (`` (and (~~ (template [<char>]
                              [(/.space? (`` (.char (~~ (static <char>)))))]
                              
                              [/.tab]
                              [/.vertical_tab]
                              [/.space]
                              [/.new_line]
                              [/.carriage_return]
                              [/.form_feed]
                              )))))
      ))

(def: manipulation
  Test
  (do {! random.monad}
    [size (\ ! map (|>> (n.% 10) (n.+ 2)) random.nat)
     characters (random.set /.hash size (random.ascii/alpha 1))
     separator (random.only (|>> (set.member? characters) not)
                            (random.ascii/alpha 1))
     #let [with_no_separator (|> characters set.to_list /.concat)]
     static (random.ascii/alpha 1)
     #let [dynamic (random.only (|>> (\ /.equivalence = static) not)
                                (random.ascii/alpha 1))]
     pre dynamic
     post dynamic

     lower (random.ascii/lower 1)
     upper (random.ascii/upper 1)]
    ($_ _.and
        (_.cover [/.concat]
                 (n.= (set.size characters)
                      (/.size (/.concat (set.to_list characters)))))
        (_.cover [/.join_with /.split_all_with]
                 (and (|> (set.to_list characters)
                          (/.join_with separator)
                          (/.split_all_with separator)
                          (set.of_list /.hash)
                          (\ set.equivalence = characters))
                      (\ /.equivalence =
                         (/.concat (set.to_list characters))
                         (/.join_with "" (set.to_list characters)))))
        (_.cover [/.replace_once]
                 (\ /.equivalence =
                    (\ /.monoid compose post static)
                    (/.replace_once pre post (\ /.monoid compose pre static))))
        (_.cover [/.split_with]
                 (case (/.split_with static ($_ (\ /.monoid compose) pre static post))
                   (#.Some [left right])
                   (and (\ /.equivalence = pre left)
                        (\ /.equivalence = post right))
                   
                   #.None
                   false))
        (_.cover [/.lower_case]
                 (let [effectiveness!
                       (|> upper
                           /.lower_case
                           (\ /.equivalence = upper)
                           not)

                       idempotence!
                       (|> lower
                           /.lower_case
                           (\ /.equivalence = lower))
                       
                       inverse!
                       (|> lower
                           /.upper_case
                           /.lower_case
                           (\ /.equivalence = lower))]
                   (and effectiveness!
                        idempotence!
                        inverse!)))
        (_.cover [/.upper_case]
                 (let [effectiveness!
                       (|> lower
                           /.upper_case
                           (\ /.equivalence = lower)
                           not)

                       idempotence!
                       (|> upper
                           /.upper_case
                           (\ /.equivalence = upper))
                       
                       inverse!
                       (|> upper
                           /.lower_case
                           /.upper_case
                           (\ /.equivalence = upper))]
                   (and effectiveness!
                        idempotence!
                        inverse!)))
        )))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [.Text])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence (random.ascii 2)))
          (_.for [/.hash]
                 (|> (random.ascii 1)
                     ($hash.spec /.hash)))
          (_.for [/.order]
                 ($order.spec /.order (random.ascii 2)))
          (_.for [/.monoid]
                 ($monoid.spec /.equivalence /.monoid (random.ascii 2)))

          ..size
          ..affix
          ..index
          ..char
          ..manipulation
          
          (do random.monad
            [sizeL bounded_size
             sizeR bounded_size
             sampleL (random.unicode sizeL)
             sampleR (random.unicode sizeR)
             middle (random.unicode 1)
             #let [sample (/.concat (list sampleL sampleR))
                   (^open "/\.") /.equivalence]]
            ($_ _.and
                (_.cover [/.split]
                         (|> (/.split sizeL sample)
                             (case> (#.Right [_l _r])
                                    (and (/\= sampleL _l)
                                         (/\= sampleR _r)
                                         (/\= sample (/.concat (list _l _r))))

                                    _
                                    #0)))
                (_.cover [/.clip /.clip']
                         (|> [(/.clip 0 sizeL sample)
                              (/.clip sizeL (n.- sizeL (/.size sample)) sample)
                              (/.clip' sizeL sample)
                              (/.clip' 0 sample)]
                             (case> [(#.Right _l) (#.Right _r) (#.Right _r') (#.Right _f)]
                                    (and (/\= sampleL _l)
                                         (/\= sampleR _r)
                                         (/\= _r _r')
                                         (/\= sample _f))

                                    _
                                    #0)))
                ))
          (do {! random.monad}
            [sizeP bounded_size
             sizeL bounded_size
             #let [## The wider unicode charset includes control characters that
                   ## can make text replacement work improperly.
                   ## Because of that, I restrict the charset.
                   normal_char_gen (|> random.nat (\ ! map (|>> (n.% 128) (n.max 1))))]
             sep1 (random.text normal_char_gen 1)
             sep2 (random.text normal_char_gen 1)
             #let [part_gen (|> (random.text normal_char_gen sizeP)
                                (random.only (|>> (/.contains? sep1) not)))]
             parts (random.list sizeL part_gen)
             #let [sample1 (/.concat (list.interpose sep1 parts))
                   sample2 (/.concat (list.interpose sep2 parts))
                   (^open "/\.") /.equivalence]]
            (_.cover [/.replace_all]
                     (/\= sample2
                          (/.replace_all sep1 sep2 sample1))))

          /buffer.test
          /encoding.test
          /format.test
          /regex.test
          /escape.test
          /unicode.test
          )))
