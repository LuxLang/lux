(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\spec
      ["$." equivalence]]]
    [math
     ["." random]
     [number
      ["n" nat]
      ["i" int]]]]]
  [\\library
   ["." /]])

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [.&])
      (do random.monad
        [expected random.nat
         shift random.nat
         dummy (random.filter (|>> (n.= expected) not)
                              random.nat)]
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec (/.equivalence n.equivalence i.equivalence)
                                      (random.and random.nat random.int)))
            (do random.monad
              [left random.int
               right random.nat]
              (_.cover [/.hash]
                       (let [hash (/.hash i.hash n.hash)]
                         (n.= (n.+ (\ i.hash hash left)
                                   (\ n.hash hash right))
                              (\ hash hash [left right])))))
            
            (<| (_.cover [/.left])
                (n.= expected (/.left [expected dummy])))
            (<| (_.cover [/.right])
                (n.= expected (/.right [dummy expected])))
            (<| (_.cover [/.fork])
                (let [[left right] ((/.fork (n.+ shift) (n.- shift)) expected)]
                  (and (n.= (n.+ shift expected)
                            left)
                       (n.= (n.- shift expected)
                            right))))
            (do random.monad
              [left random.nat
               right random.nat]
              ($_ _.and
                  (<| (_.cover [/.swap])
                      (let [pair [left right]]
                        (and (n.= (/.left pair)
                                  (/.right (/.swap pair)))
                             (n.= (/.right pair)
                                  (/.left (/.swap pair))))))
                  (<| (_.cover [/.uncurry])
                      (n.= (n.+ left right)
                           ((/.uncurry n.+) [left right])))
                  (<| (_.cover [/.curry])
                      (n.= (n.+ left right)
                           ((/.curry (/.uncurry n.+)) left right)))
                  (<| (_.cover [/.apply])
                      (let [[left' right'] (/.apply (n.+ shift) (n.- shift) [left right])]
                        (and (n.= (n.+ shift left) left')
                             (n.= (n.- shift right) right'))))))
            ))))
