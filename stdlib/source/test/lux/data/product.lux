... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 [\\theorem
  ["!" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [.Tuple .And])
      (monad.let random.monad
        [expected random.natural
         shift random.natural
         dummy (random.only (|>> (n.= expected) not)
                            random.natural)]
        (all _.and
             (_.for [/.equivalence]
                    (equivalenceT.spec (/.equivalence n.equivalence i.equivalence)
                                       (random.and random.natural random.integer)))
             (monad.let random.monad
               [left random.integer
                right random.natural]
               (_.coverage [/.hash]
                 (let [hash (/.hash i.hash n.hash)]
                   (n.= (n.+ (by i.hash hash left)
                             (by n.hash hash right))
                        (by hash hash [left right])))))
             
             (_.coverage [/.left
                          !.left]
               true)
             (_.coverage [/.right
                          !.right]
               true)
             (_.coverage [/.in_reverse
                          !.in_reverse
                          !.involution_of_in_reverse]
               true)
             (_.coverage [/.curried /.uncurried
                          !.uncurried_is_inverse_of_curried
                          !.curried_is_inverse_of_uncurried]
               true)
             (_.coverage [/.then
                          !.then
                          !.identity_by_then]
               true)
             (_.coverage [/.forked
                          !.forked
                          !.identity_by_forked]
               true)
             ))))
