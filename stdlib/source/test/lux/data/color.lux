(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" hash]
     ["$[0]" monoid]]]
   [data
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" functor)]
    [number
     ["n" nat]
     ["f" frac]
     ["r" rev]
     ["[0]" int]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" rgb]
   ["[0]" hsl]]]
 ["[0]" /
  ["[1][0]" rgb]
  ["[1][0]" cmyk]
  ["[1][0]" hsl]
  ["[1][0]" hsb]
  ["[1][0]" pigment]
  ["[1][0]" named]
  ["[1][0]" terminal]])

(def .public random
  (Random /.Color)
  (random#each /.of_rgb /rgb.random))

... (def palette
...   Test
...   (_.for [/.Spread /.Palette]
...          (do [! random.monad]
...            [eH (of ! each (|>> f.abs (f.% +0.9) (f.+ +0.05))
...                    random.safe_frac)
...             .let [eS +0.5]
...             variations (of ! each (|>> (n.% 3) (n.+ 2)) random.nat)
...             .let [max_spread (f./ (|> variations ++ .int int.frac)
...                                   +1.0)
...                   min_spread (f./ +2.0 max_spread)
...                   spread_space (f.- min_spread max_spread)]
...             spread (of ! each (|>> f.abs (f.% spread_space) (f.+ min_spread))
...                        random.safe_frac)]
...            (`` (all _.and
...                     (,, (with_template [<brightness> <palette>]
...                           [(_.coverage [<palette>]
...                              (let [eB <brightness>
...                                    expected (/.of_hsb [eH eS eB])
...                                    palette (<palette> spread variations expected)]
...                                (and (n.= variations (list.size palette))
...                                     (not (list.any? (of /.equivalence = expected) palette)))))]
...                           [+1.0 /.analogous]
...                           [+0.5 /.monochromatic]
...                           ))
...                     )))))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Color])
      (do [! random.monad]
        [expected ..random]
        (all _.and
             ... ..palette

             /rgb.test
             /cmyk.test
             /hsl.test
             /hsb.test
             /pigment.test
             /named.test
             /terminal.test
             ))))
