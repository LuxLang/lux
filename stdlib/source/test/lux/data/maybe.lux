(.module:
  [lux #*
   ["_" test (#+ Test)]
   [control
    pipe
    [monad (#+ do)]
    {[0 #test]
     [/
      [".T" functor (#+ Injection Comparison)]
      [".T" apply]
      [".T" monad]
      [".T" equivalence]]}]
   [data
    ["." text
     format]
    [number
     ["." nat]]]
   ["." io ("#@." monad)]
   [math
    ["r" random (#+ Random)]]]
  {1
   ["." / ("#@." monoid)]})

(def: injection
  (Injection Maybe)
  (|>> #.Some))

(def: comparison
  (Comparison Maybe)
  (function (_ ==)
    (:: (/.equivalence ==) =)))

(def: #export maybe
  (All [a] (-> (Random a) (Random (Maybe a))))
  (:: r.functor map (|>> #.Some)))

(def: #export test
  Test
  (<| (_.context (%name (name-of .Maybe)))
      ($_ _.and
          (equivalenceT.test (/.equivalence nat.equivalence) (..maybe r.nat))
          (functorT.laws ..injection ..comparison /.functor)
          (applyT.laws ..injection ..comparison /.apply)
          (monadT.laws ..injection ..comparison /.monad)
          (do r.monad
            [left r.nat
             right r.nat
             #let [expected (n/+ left right)]]
            (let [lift (/.lift io.monad)]
              (_.test "Can add maybe functionality to any monad."
                      (|> (io.run (do (/.with io.monad)
                                    [a (lift (io@wrap left))
                                     b (wrap right)]
                                    (wrap (n/+ a b))))
                          (case> (#.Some actual)
                                 (n/= expected actual)

                                 _
                                 false)))))
          (let [(^open "/@.") (/.equivalence text.equivalence)
                (^open "/@.") /.monoid]
            (_.test "Monoid respects Maybe."
                    (and (/@= #.None /@identity)
                         (/@= (#.Some "yolo") (/@compose (#.Some "yolo") (#.Some "lol")))
                         (/@= (#.Some "yolo") (/@compose (#.Some "yolo") #.None))
                         (/@= (#.Some "lol") (/@compose #.None (#.Some "lol")))
                         (/@= #.None (: (Maybe Text) (/@compose #.None #.None))))))
          (do r.monad
            [default r.nat
             value r.nat]
            (_.test "Can have defaults for Maybe values."
                    (and (is? default (/.default default
                                                 #.None))

                         (is? value (/.default default
                                               (#.Some value))))))
          )))
