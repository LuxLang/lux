(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\spec
      ["$." equivalence]
      ["$." hash]
      ["$." monoid]
      ["$." functor]
      ["$." apply]
      ["$." monad]]]
    [control
     ["." io ("#\." monad)]
     pipe]
    [data
     ["." text]
     [collection
      ["." list]]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." / ("#\." monoid monad)]])

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [.Maybe])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec (/.equivalence n.equivalence) (random.maybe random.nat)))
          (_.for [/.hash]
                 (|> random.nat
                     (\ random.monad map (|>> #.Some))
                     ($hash.spec (/.hash n.hash))))
          (_.for [/.monoid]
                 ($monoid.spec (/.equivalence n.equivalence) /.monoid (random.maybe random.nat)))
          (_.for [/.functor]
                 ($functor.spec /\wrap /.equivalence /.functor))
          (_.for [/.apply]
                 ($apply.spec /\wrap /.equivalence /.apply))
          (_.for [/.monad]
                 ($monad.spec /\wrap /.equivalence /.monad))
          
          (do random.monad
            [left random.nat
             right random.nat
             #let [expected (n.+ left right)]]
            (let [lift (/.lift io.monad)]
              (_.cover [/.with /.lift]
                       (|> (io.run (do (/.with io.monad)
                                     [a (lift (io\wrap left))
                                      b (wrap right)]
                                     (wrap (n.+ a b))))
                           (case> (#.Some actual)
                                  (n.= expected actual)

                                  _
                                  false)))))
          (do random.monad
            [default random.nat
             value random.nat]
            (_.cover [/.default]
                     (and (is? default (/.default default
                                                  #.None))

                          (is? value (/.default default
                                                (#.Some value))))))
          (do random.monad
            [value random.nat]
            (_.cover [/.assume]
                     (is? value (/.assume (#.Some value)))))
          (do random.monad
            [value random.nat]
            (_.cover [/.to-list]
                     (\ (list.equivalence n.equivalence) =
                        (list value)
                        (/.to-list (#.Some value)))))
          )))
