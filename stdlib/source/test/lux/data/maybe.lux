... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["[0]" io (.use "[1]:[0]" monad)]
    ["[0]" pipe]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 ["/" \\library (.use "[1]:[0]" monoid monad)]
 ["!" \\theorem])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [.Maybe
              .:None .:Some])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec (/.equivalence n.equivalence) (random.maybe random.natural)))
           (_.for [/.hash]
                  (|> random.natural
                      (by random.monad each (|>> {.:Some}))
                      (hashT.spec (/.hash n.hash))))
           (_.for [/.monoid]
                  (monoidT.spec (/.equivalence n.equivalence) /.monoid (random.maybe random.natural)))
           (_.for [/.functor]
                  (functorT.spec /:pure /.equivalence /.functor))
           (_.for [/.monad]
                  (monadT.spec /:pure /.equivalence /.monad))
           
           (monad.let random.monad
             [left random.natural
              right random.natural
              .let [expected (n.+ left right)]]
             (let [lifted (/.lifted io.monad)]
               (_.coverage [/.With /.with /.lifted]
                 (|> (io.value (monad.let (/.with io.monad)
                                 [a (lifted (io:pure left))
                                  b (pure right)]
                                 (pure (n.+ a b))))
                     (pipe.when
                       {.:Some actual}
                       (n.= expected actual)

                       _
                       false)))))
           (_.by_proof [/.else]
                       (list (_.proposition !.else|none)
                             (_.proposition !.else|some)))
           (monad.let random.monad
             [value random.natural]
             (_.coverage [/.trusted]
               (identical? value (/.trusted {.:Some value}))))
           (_.by_proof [/.whether]
                       (list (_.proposition !.whether|false)
                             (_.proposition !.whether|true)))
           (_.by_proof [/.or]
                       (list (_.proposition !.or|none)
                             (_.proposition !.or|some)))
           (_.by_proof [/.as_list]
                       (list (_.proposition !.as_list|none)
                             (_.proposition !.as_list|some)))
           (_.by_proof [/.if]
                       (list (_.proposition !.if|none)
                             (_.proposition !.if|some)))
           )))
