(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]
      ["$." monoid]
      ["$." functor]
      ["$." apply]
      ["$." monad]]}]
   [control
    ["." io ("#\." monad)]
    pipe]
   [data
    ["." text]
    [number
     ["n" nat]]
    [collection
     ["." list]]]
   [math
    ["." random (#+ Random)]]]
  {1
   ["." / ("#\." monoid monad)]})

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [.Maybe]
        ($_ _.and
            (_.with-cover [/.equivalence]
              ($equivalence.spec (/.equivalence n.equivalence) (random.maybe random.nat)))
            (_.with-cover [/.monoid]
              ($monoid.spec (/.equivalence n.equivalence) /.monoid (random.maybe random.nat)))
            (_.with-cover [/.functor]
              ($functor.spec /\wrap /.equivalence /.functor))
            (_.with-cover [/.apply]
              ($apply.spec /\wrap /.equivalence /.apply))
            (_.with-cover [/.monad]
              ($monad.spec /\wrap /.equivalence /.monad))
            
            (do random.monad
              [left random.nat
               right random.nat
               #let [expected (n.+ left right)]]
              (let [lift (/.lift io.monad)]
                (_.cover [/.with /.lift]
                         (|> (io.run (do (/.with io.monad)
                                       [a (lift (io\wrap left))
                                        b (wrap right)]
                                       (wrap (n.+ a b))))
                             (case> (#.Some actual)
                                    (n.= expected actual)

                                    _
                                    false)))))
            (do random.monad
              [default random.nat
               value random.nat]
              (_.cover [/.default]
                       (and (is? default (/.default default
                                                    #.None))

                            (is? value (/.default default
                                                  (#.Some value))))))
            (do random.monad
              [value random.nat]
              (_.cover [/.assume]
                       (is? value (/.assume (#.Some value)))))
            (do random.monad
              [value random.nat]
              (_.cover [/.to-list]
                       (\ (list.equivalence n.equivalence) =
                          (list value)
                          (/.to-list (#.Some value)))))
            ))))
