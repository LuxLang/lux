... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]]
   [meta
    [macro
     ["[0]" expansion]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 [//
  ["[0]T" rgb]])

(expansion.let [<commands> (these [/.black_foreground]
                                  [/.red_foreground]
                                  [/.green_foreground]
                                  [/.yellow_foreground]
                                  [/.blue_foreground]
                                  [/.magenta_foreground]
                                  [/.cyan_foreground]
                                  [/.white_foreground]
                                  [/.bright_black_foreground]
                                  [/.bright_red_foreground]
                                  [/.bright_green_foreground]
                                  [/.bright_yellow_foreground]
                                  [/.bright_blue_foreground]
                                  [/.bright_magenta_foreground]
                                  [/.bright_cyan_foreground]
                                  [/.bright_white_foreground]

                                  [/.black_background]
                                  [/.red_background]
                                  [/.green_background]
                                  [/.yellow_background]
                                  [/.blue_background]
                                  [/.magenta_background]
                                  [/.cyan_background]
                                  [/.white_background]
                                  [/.bright_black_background]
                                  [/.bright_red_background]
                                  [/.bright_green_background]
                                  [/.bright_yellow_background]
                                  [/.bright_blue_background]
                                  [/.bright_magenta_background]
                                  [/.bright_cyan_background]
                                  [/.bright_white_background]
                                  )]
  (these (the .public random
           (Random /.Command)
           (`` (all random.either
                    (random#each /.foreground rgbT.random)
                    (random#each /.background rgbT.random)
                    (,, (with_template [<command>]
                          [(random#in <command>)]

                          <commands>
                          ))
                    )))
         
         (the .public test
           Test
           (<| (_.covering /._)
               (do [! random.monad]
                 [color rgbT.random
                  command ..random
                  expected_text (random.upper_cased 3)])
               (_.for [/.Command])
               (all _.and
                    (_.for [/.equivalence]
                           (equivalenceT.spec /.equivalence ..random))

                    (_.coverage [/.with]
                      (let [it (/.with command
                                 expected_text)]
                        (and (text.contains? expected_text it)
                             (not (text#= expected_text it)))))
                    (_.coverage [/.foreground /.background]
                      (not (of /.equivalence =
                               (/.foreground color)
                               (/.background color))))
                    (`` (_.coverage [(,, (with_template [<command>]
                                           [<command>]

                                           <commands>))]
                          (loop (again [commands (list <commands>)])
                            (when commands
                              {.#End}
                              true

                              {.#Item head tail}
                              (and (list.every? (|>> (of /.equivalence = head) not) tail)
                                   (again tail))))))
                    ))))
  )
