(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [\\specification
     ["[0]S" equivalence]]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["f" frac]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" rgb]]]]
 [//
  ["[0]T" rgb]])

(def .public value
  (Random /.Value)
  (random.one (|>> /.value try.maybe)
              random.safe_frac))

(def .public random
  (Random /.HSL)
  (do random.monad
    [hue ..value
     saturation ..value
     luminance ..value]
    (random.one (|>> try.maybe)
                (in (/.hsl hue saturation luminance)))))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_value ..value
         expected_rgb rgbT.random
         expected_hsl ..random])
      (all _.and
           (_.for [/.Value]
                  (all _.and
                       (_.coverage [/.value]
                         (|> expected_value
                             /.value
                             (try#each (f.= expected_value))
                             (try.else false)))
                       (_.coverage [/.least]
                         (when (/.value (f.+ +0.001 /.least))
                           {try.#Failure _} false
                           {try.#Success _} true))
                       (_.coverage [/.most]
                         (when (/.value (f.- +0.001 /.most))
                           {try.#Failure _} false
                           {try.#Success _} true))
                       (_.coverage [/.invalid]
                         (and (when (/.value (f.- +0.001 /.least))
                                {try.#Failure it} (exception.match? /.invalid it)
                                {try.#Success _} false)
                              (when (/.value (f.+ +0.001 /.most))
                                {try.#Failure it} (exception.match? /.invalid it)
                                {try.#Success _} false)))
                       ))
           (_.for [/.HSL]
                  (all _.and
                       (_.for [/.equivalence]
                              (equivalenceS.spec /.equivalence ..random))

                       (_.coverage [/.hsl
                                    /.hue /.saturation /.luminance]
                         (|> (/.hsl (/.hue expected_hsl) (/.saturation expected_hsl) (/.luminance expected_hsl))
                             (try#each (at /.equivalence = expected_hsl))
                             (try.else false)))
                       (_.coverage [/.of_rgb /.rgb]
                         (and (|> expected_rgb
                                  /.of_rgb
                                  /.rgb
                                  (at rgb.equivalence = expected_rgb))
                              (|> expected_hsl
                                  /.rgb
                                  /.of_rgb
                                  (at /.equivalence = expected_hsl))))
                       ))
           )))
