(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [\\specification
     ["[0]S" equivalence]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["f" frac]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" rgb]
    ["[0]" hsb]]]]
 [//
  ["[0]T" rgb]])

(def .public value
  (Random /.Value)
  (random#each /.value random.safe_frac))

(def .public random
  (Random /.HSL)
  (do random.monad
    [hue ..value
     saturation ..value
     luminance ..value]
    (in (/.hsl hue saturation luminance))))

(def rgb_error_margin
  +1.8)

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_value ..value
         expected_rgb rgbT.random
         expected_hsl ..random

         possible_value random.frac

         mediocre (|> ..random
                      (random.only (|>> (the /.#saturation)
                                        ((function (_ it)
                                           (and (f.>= +0.25 it)
                                                (f.<= +0.75 it)))))))
         ratio (|> random.safe_frac (random.only (f.>= +0.5)))])
      (all _.and
           (_.for [/.Value]
                  (all _.and
                       (_.coverage [/.value?]
                         (and (/.value? expected_value)
                              (not (/.value? (f.+ f.smallest /.most)))
                              (not (/.value? (f.- f.smallest /.least)))))
                       (_.coverage [/.value]
                         (if (/.value? possible_value)
                           (|> possible_value
                               /.value
                               (f.= possible_value))
                           (or (f.= /.least (/.value possible_value))
                               (f.= /.most (/.value possible_value)))))
                       (_.coverage [/.least]
                         (and (f.< /.most
                                   /.least)
                              (/.value? /.least)
                              (/.value? (f.+ f.smallest /.least))
                              (not (/.value? (f.- f.smallest /.least)))))
                       (_.coverage [/.most]
                         (and (f.> /.least
                                   /.most)
                              (/.value? /.most)
                              (/.value? (f.- f.smallest /.most))
                              (not (/.value? (f.+ f.smallest /.most)))))
                       ))
           (_.for [/.HSL
                   /.#hue /.#saturation /.#luminance]
                  (`` (all _.and
                           (_.for [/.equivalence]
                                  (equivalenceS.spec /.equivalence ..random))

                           (_.coverage [/.hsl]
                             (|> (/.hsl (the /.#hue expected_hsl)
                                        (the /.#saturation expected_hsl)
                                        (the /.#luminance expected_hsl))
                                 (of /.equivalence = expected_hsl)))
                           (_.coverage [/.of_rgb /.rgb]
                             (and (|> expected_rgb
                                      /.of_rgb
                                      /.rgb
                                      (of rgb.equivalence = expected_rgb))
                                  (|> expected_hsl
                                      /.rgb
                                      /.of_rgb
                                      (of /.equivalence = expected_hsl))))

                           (_.coverage [/.saturated]
                             (f.> (the /.#saturation mediocre)
                                  (the /.#saturation (/.saturated ratio mediocre))))
                           (_.coverage [/.un_saturated]
                             (f.< (the /.#saturation mediocre)
                                  (the /.#saturation (/.un_saturated ratio mediocre))))
                           (_.coverage [/.gray_scale]
                             (let [gray'ed (/.gray_scale mediocre)]
                               (and (f.= +0.0
                                         (the /.#saturation gray'ed))
                                    (|> (the /.#luminance gray'ed)
                                        (f.- (the /.#luminance mediocre))
                                        f.abs
                                        (f.<= ..rgb_error_margin)))))
                           )))
           )))
