... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["f" frac]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" rgb]]]]
 [//
  ["[0]T" rgb]])

(def .public value
  (Random /.Value)
  (random#each /.value random.safe_frac))

(def .public random
  (Random /.HSB)
  (do random.monad
    [hue ..value
     saturation ..value
     brightness ..value]
    (in (/.hsb hue saturation brightness))))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_value ..value
         expected_rgb rgbT.random
         expected_hsb ..random

         possible_value random.frac
         .let [delta +0.000000001]

         left ..random
         right ..random])
      (all _.and
           (_.for [/.Value]
                  (all _.and
                       (_.coverage [/.value?]
                         (and (/.value? expected_value)
                              (not (/.value? (f.+ delta /.most)))
                              (not (/.value? (f.- delta /.least)))))
                       (_.coverage [/.value]
                         (if (/.value? possible_value)
                           (|> possible_value
                               /.value
                               (f.= possible_value))
                           (or (f.= /.least (/.value possible_value))
                               (f.= /.most (/.value possible_value)))))
                       (_.coverage [/.least]
                         (and (f.< /.most
                                   /.least)
                              (/.value? /.least)
                              (/.value? (f.+ delta /.least))
                              (not (/.value? (f.- delta /.least)))))
                       (_.coverage [/.most]
                         (and (f.> /.least
                                   /.most)
                              (/.value? /.most)
                              (/.value? (f.- delta /.most))
                              (not (/.value? (f.+ delta /.most)))))
                       ))
           (_.for [/.HSB]
                  (all _.and
                       (_.for [/.equivalence]
                              (equivalenceT.spec /.equivalence ..random))

                       (_.coverage [/.hsb
                                    /.hue /.saturation /.brightness]
                         (|> (/.hsb (/.hue expected_hsb) (/.saturation expected_hsb) (/.brightness expected_hsb))
                             (of /.equivalence = expected_hsb)))
                       (_.coverage [/.of_rgb /.rgb]
                         (|> expected_rgb
                             /.of_rgb
                             /.rgb
                             (of rgb.equivalence = expected_rgb)))
                       (_.coverage [/.format]
                         (bit#= (of /.equivalence = left right)
                                (text#= (/.format left) (/.format right))))
                       ))
           )))
