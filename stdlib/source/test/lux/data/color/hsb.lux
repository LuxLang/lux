... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [data
    ["[0]" bit]
    ["[0]" text]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" natural]
     ["d" decimal]]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" rgb]]]]
 [//
  ["[0]T" rgb]])

(the .public value
  (Random /.Value)
  (random#each /.value random.unit_decimal))

(the degree
  (Random /.Value)
  (random#each (|>> (n.% 360) n.decimal d.of_degree)
               random.natural))

(the percentage
  (Random /.Value)
  (random#each (|>> (n.% 100) n.decimal d.of_percentage)
               random.natural))

(the .public random
  (Random /.HSB)
  (do random.monad
    [hue ..degree
     saturation ..percentage
     brightness ..percentage]
    (in (/.hsb hue saturation brightness))))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_value ..value
         expected_rgb rgbT.random
         expected_hsb ..random

         possible_value (random.only (|>> d.not_a_number? not)
                                     random.decimal)
         .let [delta +0.000000001]

         left ..random
         right ..random])
      (all _.and
           (_.for [/.Value]
                  (all _.and
                       (_.coverage [/.value?]
                         (and (/.value? expected_value)
                              (not (/.value? (d.+ delta /.most)))
                              (not (/.value? (d.- delta /.least)))))
                       (_.coverage [/.value]
                         (if (/.value? possible_value)
                           (|> possible_value
                               /.value
                               (d.= possible_value))
                           (or (d.= /.least (/.value possible_value))
                               (d.= /.most (/.value possible_value)))))
                       (_.coverage [/.least]
                         (and (d.< /.most
                                   /.least)
                              (/.value? /.least)
                              (/.value? (d.+ delta /.least))
                              (not (/.value? (d.- delta /.least)))))
                       (_.coverage [/.most]
                         (and (d.> /.least
                                   /.most)
                              (/.value? /.most)
                              (/.value? (d.- delta /.most))
                              (not (/.value? (d.+ delta /.most)))))
                       ))
           (_.for [/.HSB]
                  (all _.and
                       (_.for [/.equivalence /.=]
                              (static.when (same? /.equivalence /.=)
                                (equivalenceT.spec /.equivalence ..random)))

                       (_.coverage [/.hsb
                                    /.hue /.saturation /.brightness]
                         (|> (/.hsb (/.hue expected_hsb) (/.saturation expected_hsb) (/.brightness expected_hsb))
                             (of /.equivalence = expected_hsb)))
                       (_.coverage [/.of_rgb /.rgb]
                         (|> expected_rgb
                             /.of_rgb
                             /.rgb
                             (of rgb.equivalence = expected_rgb)))
                       (_.coverage [/.injection]
                         (bit.= (of /.equivalence = left right)
                                (text.= (/.injection left) (/.injection right))))
                       ))
           )))
