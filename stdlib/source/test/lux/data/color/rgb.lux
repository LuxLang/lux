(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" functor)]
    [number
     ["n" nat]
     ["i" int]
     ["f" frac]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def .public value
  (Random /.Value)
  (random#each (|>> (n.% /.limit) /.value)
               random.nat))

(def .public random
  (Random /.RGB)
  (do random.monad
    [red ..value
     green ..value
     blue ..value]
    (in (/.rgb red green blue))))

(def scale
  (-> Nat
      Frac)
  (|>> .int
       i.frac))

(def square
  (-> Frac
      Frac)
  (f.pow +2.0))

(def square_root
  (-> Frac
      Frac)
  (f.pow +0.5))

(def (distance/3 from to)
  (-> /.RGB /.RGB
      Frac)
  (square_root
   (all f.+
        (|> (scale (the /.#red to)) (f.- (scale (the /.#red from))) square)
        (|> (scale (the /.#green to)) (f.- (scale (the /.#green from))) square)
        (|> (scale (the /.#blue to)) (f.- (scale (the /.#blue from))) square))))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_value ..value
         expected ..random

         expected_red ..value
         expected_green ..value
         expected_blue ..value

         colorful (random.only (function (_ it)
                                 (and (|> it (distance/3 /.black) (f.>= +100.0))
                                      (|> it (distance/3 /.white) (f.>= +100.0))))
                               ..random)
         ratio (random.only (f.>= +0.5)
                            random.safe_frac)])
      (all _.and
           (_.for [/.Value]
                  (all _.and
                       (_.coverage [/.least]
                         (n.>= /.least
                               expected_value))
                       (_.coverage [/.most]
                         (n.<= /.most
                               expected_value))
                       (_.coverage [/.value?]
                         (and (/.value? expected_value)
                              (not (/.value? (++ /.most)))
                              (not (/.value? (-- /.least)))))
                       (_.coverage [/.value]
                         (|> expected_value
                             /.value
                             (n.= expected_value)))
                       (_.coverage [/.limit]
                         (|> /.limit
                             /.value
                             (n.= /.limit)
                             not))
                       ))
           (_.for [/.RGB
                   /.#red /.#green /.#blue]
                  (all _.and
                       (_.for [/.equivalence]
                              (equivalenceT.spec /.equivalence ..random))
                       (_.for [/.hash]
                              (hashT.spec /.hash ..random))
                       (_.for [/.addition]
                              (monoidT.spec /.equivalence /.addition ..random))
                       (_.for [/.subtraction]
                              (monoidT.spec /.equivalence /.subtraction ..random))

                       (_.coverage [/.rgb]
                         (let [it (/.rgb expected_red expected_green expected_blue)]
                           (and (same? expected_red
                                       (the /.#red it))
                                (same? expected_green
                                       (the /.#green it))
                                (same? expected_blue
                                       (the /.#blue it)))))
                       (_.coverage [/.complement]
                         (let [~expected (/.complement expected)
                               (open "/#[0]") /.equivalence]
                           (and (not (/#= expected ~expected))
                                (/#= expected (/.complement ~expected)))))
                       (_.coverage [/.black /.white]
                         (and (of /.equivalence = /.white (/.complement /.black))
                              (of /.equivalence = /.black (/.complement /.white))))

                       (_.coverage [/.interpolated]
                         (and (f.<= (distance/3 /.black colorful)
                                    (distance/3 /.black (/.interpolated /.black ratio colorful)))
                              (f.<= (distance/3 /.white colorful)
                                    (distance/3 /.white (/.interpolated /.white ratio colorful)))))
                       (_.coverage [/.darker /.brighter]
                         (and (f.<= (distance/3 /.black colorful)
                                    (distance/3 /.black (/.darker ratio colorful)))
                              (f.<= (distance/3 /.white colorful)
                                    (distance/3 /.white (/.brighter ratio colorful)))))
                       ))
           )))
