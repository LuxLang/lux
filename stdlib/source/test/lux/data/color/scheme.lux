(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" hash]
     ["$[0]" monoid]]]
   [data
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" functor)]
    [number
     ["n" nat]
     ["f" frac]
     ["r" rev]
     ["[0]" int]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" rgb (.use "[1]#[0]" equivalence)]
    ["[0]" hsl]
    ["[0]" hsb]]]])

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_hue (of ! each (|>> f.abs (f.% +0.9) (f.+ +0.05))
                          random.safe_frac)
         .let [expected_saturation +0.5]
         variations (of ! each (|>> (n.% 3) (n.+ 2)) random.nat)
         .let [max_spread (f./ (|> variations ++ .int int.frac)
                               +1.0)
               min_spread (f./ +2.0 max_spread)
               spread_space (f.- min_spread max_spread)]
         spread (of ! each (|>> f.abs (f.% spread_space) (f.+ min_spread))
                    random.safe_frac)])
      (`` (all _.and
               (,, (with_template [<palette>]
                     [(_.coverage [<palette>]
                        (let [expected (hsb.rgb (hsb.hsb expected_hue expected_saturation +0.5))
                              [c0 c1 c2] (<palette> expected)]
                          (and (rgb#= expected c0)
                               (not (rgb#= expected c1))
                               (not (rgb#= expected c2)))))]

                     [/.triad]
                     [/.clash]
                     [/.split_complement]))
               (,, (with_template [<palette>]
                     [(_.coverage [<palette>]
                        (let [expected (hsb.rgb (hsb.hsb expected_hue expected_saturation +0.5))
                              [c0 c1 c2 c3] (<palette> expected)]
                          (and (rgb#= expected c0)
                               (not (rgb#= expected c1))
                               (not (rgb#= expected c2))
                               (not (rgb#= expected c3)))))]

                     [/.square]
                     [/.tetradic]))
               (_.for [/.Spread /.Scheme]
                      (all _.and
                           (,, (with_template [expected_brightness <palette>]
                                 [(_.coverage [<palette>]
                                    (let [expected (hsb.rgb (hsb.hsb expected_hue
                                                                     expected_saturation
                                                                     expected_brightness))
                                          palette (<palette> spread variations expected)]
                                      (and (n.= variations (list.size palette))
                                           (not (list.any? (rgb#= expected) palette)))))]
                                 [+1.0 /.analogous]
                                 [+0.5 /.monochromatic]
                                 ))
                           ))
               ))))
