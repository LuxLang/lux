... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" functor
     ["[1]T" \\test (.only Injection)]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["[0]" maybe]
    ["[0]" try]]
   [data
    ["[0]" bit]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the (injection value)
  (Injection /.Stack)
  (/.top value /.empty))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Stack])
      (do random.monad
        [size (of random.monad each (n.% 100) random.natural)
         sample (random.stack size random.natural)
         expected_top random.natural]
        (all _.and
             (_.for [/.equivalence]
                    (equivalenceT.spec (/.equivalence n.equivalence) (random.stack size random.natural)))
             (_.for [/.functor]
                    (functorT.spec ..injection /.equivalence /.functor))
             
             (_.coverage [/.size]
               (n.= size (/.size sample)))
             (_.coverage [/.empty?]
               (bit.= (n.= 0 (/.size sample))
                      (/.empty? sample)))
             (_.coverage [/.empty]
               (/.empty? /.empty))
             (_.coverage [/.value]
               (when (/.value sample)
                 {try.#Failure _}
                 (/.empty? sample)
                 
                 {try.#Success _}
                 (not (/.empty? sample))))
             (_.coverage [/.next]
               (when (/.next sample)
                 {try.#Failure _}
                 (/.empty? sample)
                 
                 {try.#Success [top remaining]}
                 (of (/.equivalence n.equivalence) =
                     sample
                     (/.top top remaining))))
             (_.coverage [/.is_empty]
               (and (try.is? /.is_empty (/.value /.empty))
                    (try.is? /.is_empty (/.next /.empty))))
             (_.coverage [/.top]
               (when (/.next (/.top expected_top sample))
                 {try.#Success [actual_top actual_sample]}
                 (and (same? expected_top actual_top)
                      (same? sample actual_sample))
                 
                 {try.#Failure _}
                 false))
             ))))
