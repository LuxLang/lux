(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]
      ["$." functor (#+ Injection)]]}]
   [data
    ["." maybe]
    ["." bit ("#\." equivalence)]
    [number
     ["n" nat]]]
   [math
    ["." random]]]
  {1
   ["." /]})

(def: (injection value)
  (Injection /.Stack)
  (/.push value /.empty))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.Stack])
      (do random.monad
        [size (\ random.monad map (n.% 100) random.nat)
         sample (random.stack size random.nat)
         expected-top random.nat]
        ($_ _.and
            (_.with-cover [/.equivalence]
              ($equivalence.spec (/.equivalence n.equivalence) (random.stack size random.nat)))
            (_.with-cover [/.functor]
              ($functor.spec ..injection /.equivalence /.functor))
            
            (_.cover [/.size]
                     (n.= size (/.size sample)))
            (_.cover [/.empty?]
                     (bit\= (n.= 0 (/.size sample))
                            (/.empty? sample)))
            (_.cover [/.empty]
                     (/.empty? /.empty))
            (_.cover [/.peek]
                     (case (/.peek sample)
                       #.None
                       (/.empty? sample)
                       
                       (#.Some _)
                       (not (/.empty? sample))))
            (_.cover [/.pop]
                     (case (/.pop sample)
                       #.None
                       (/.empty? sample)
                       
                       (#.Some [top remaining])
                       (\ (/.equivalence n.equivalence) =
                          sample
                          (/.push top remaining))))
            (_.cover [/.push]
                     (case (/.pop (/.push expected-top sample))
                       (#.Some [actual-top actual-sample])
                       (and (is? expected-top actual-top)
                            (is? sample actual-sample))
                       
                       #.None
                       false))
            ))))
