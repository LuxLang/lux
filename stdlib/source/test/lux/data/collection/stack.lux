(.require
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" functor (.only Injection)]]]
   [control
    ["[0]" maybe]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" /]])

(def (injection value)
  (Injection /.Stack)
  (/.top value /.empty))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Stack])
      (do random.monad
        [size (at random.monad each (n.% 100) random.nat)
         sample (random.stack size random.nat)
         expected_top random.nat]
        (all _.and
             (_.for [/.equivalence]
                    ($equivalence.spec (/.equivalence n.equivalence) (random.stack size random.nat)))
             (_.for [/.functor]
                    ($functor.spec ..injection /.equivalence /.functor))
             
             (_.coverage [/.size]
               (n.= size (/.size sample)))
             (_.coverage [/.empty?]
               (bit#= (n.= 0 (/.size sample))
                      (/.empty? sample)))
             (_.coverage [/.empty]
               (/.empty? /.empty))
             (_.coverage [/.value]
               (case (/.value sample)
                 {.#None}
                 (/.empty? sample)
                 
                 {.#Some _}
                 (not (/.empty? sample))))
             (_.coverage [/.next]
               (case (/.next sample)
                 {.#None}
                 (/.empty? sample)
                 
                 {.#Some [top remaining]}
                 (at (/.equivalence n.equivalence) =
                     sample
                     (/.top top remaining))))
             (_.coverage [/.top]
               (case (/.next (/.top expected_top sample))
                 {.#Some [actual_top actual_sample]}
                 (and (same? expected_top actual_top)
                      (same? sample actual_sample))
                 
                 {.#None}
                 false))
             ))))
