(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." equivalence]
      ["$." functor (#+ Injection)]]}]
   [data
    ["." maybe]
    [number
     ["n" nat]]]
   [math
    ["r" random]]]
  {1
   ["." /]})

(def: (injection value)
  (Injection /.Stack)
  (/.push value /.empty))

(def: gen-nat
  (r.Random Nat)
  (|> r.nat
      (:: r.monad map (n.% 100))))

(def: #export test
  Test
  (<| (_.context (%.name (name-of /._)))
      (do r.monad
        [size gen-nat
         sample (r.stack size gen-nat)
         new-top gen-nat]
        ($_ _.and
            ($equivalence.spec (/.equivalence n.equivalence) (r.stack size r.nat))
            ($functor.spec ..injection /.equivalence /.functor)
            
            (_.test (%.name (name-of /.size))
                    (n.= size (/.size sample)))
            (_.test (%.name (name-of /.peek))
                    (case (/.peek sample)
                      #.None     (/.empty? sample)
                      (#.Some _) (not (/.empty? sample))))
            (_.test (%.name (name-of /.pop))
                    (case (/.size sample)
                      0 (case (/.pop sample)
                          #.None
                          (/.empty? sample)
                          
                          (#.Some _)
                          false)
                      expected (case (/.pop sample)
                                 (#.Some sample')
                                 (and (n.= (dec expected) (/.size sample'))
                                      (not (/.empty? sample)))
                                 
                                 #.None
                                 false)))
            (_.test (%.name (name-of /.push))
                    (and (is? sample
                              (|> sample (/.push new-top) /.pop maybe.assume))
                         (n.= (inc (/.size sample))
                              (/.size (/.push new-top sample)))
                         (|> (/.push new-top sample) /.peek maybe.assume
                             (is? new-top))))
            ))))
