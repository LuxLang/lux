(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]
      ["$." functor (#+ Injection)]]]
    [control
     ["." maybe]]
    [data
     ["." bit ("#\." equivalence)]]
    [math
     ["." random]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /]])

(def: (injection value)
  (Injection /.Stack)
  (/.push value /.empty))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Stack])
      (do random.monad
        [size (\ random.monad map (n.% 100) random.nat)
         sample (random.stack size random.nat)
         expected_top random.nat]
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec (/.equivalence n.equivalence) (random.stack size random.nat)))
            (_.for [/.functor]
                   ($functor.spec ..injection /.equivalence /.functor))
            
            (_.cover [/.size]
                     (n.= size (/.size sample)))
            (_.cover [/.empty?]
                     (bit\= (n.= 0 (/.size sample))
                            (/.empty? sample)))
            (_.cover [/.empty]
                     (/.empty? /.empty))
            (_.cover [/.peek]
                     (case (/.peek sample)
                       #.None
                       (/.empty? sample)
                       
                       (#.Some _)
                       (not (/.empty? sample))))
            (_.cover [/.pop]
                     (case (/.pop sample)
                       #.None
                       (/.empty? sample)
                       
                       (#.Some [top remaining])
                       (\ (/.equivalence n.equivalence) =
                          sample
                          (/.push top remaining))))
            (_.cover [/.push]
                     (case (/.pop (/.push expected_top sample))
                       (#.Some [actual_top actual_sample])
                       (and (same? expected_top actual_top)
                            (same? sample actual_sample))
                       
                       #.None
                       false))
            ))))
