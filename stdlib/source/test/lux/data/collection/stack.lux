... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" enum]
    ["[0]" monad (.only)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [function
    [poly
     [type
      ["[0]" mix
       ["[1]T" \\test]]]]]
   [control
    ["[0]" pipe]
    ["[0]" io]
    ["[0]" pure (.only Pure)]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   ["[0]" function (.only)
    ["[0]" predicate]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list]
     ["[0]" set]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]
      ["[0]" integer]]]]
   [macro
    ["[0]" template]]
   [test
    ["_" property (.only Test)]]
   [aspect
    ["[0]" view]]]]
 [\\library
  ["[0]" /]])

(the bounded_size
  (Random Natural)
  (by random.monad each (n.% 100)
      random.natural))

(the random
  (Random (Stack Natural))
  (monad.let [! random.monad]
    [size ..bounded_size]
    (|> random.natural
        (random.set n.hash size)
        (by ! each (|>> set.as_list (view.as list.stack))))))

(the signatures
  Test
  (all _.and
       (_.for [/.equivalence]
              (equivalenceT.spec (/.equivalence n.equivalence) ..random))
       (_.for [/.hash]
              (|> random.natural
                  (by random.monad each (|>> stack))
                  (hashT.spec (/.hash n.hash))))
       (_.for [/.monoid]
              (monoidT.spec (/.equivalence n.equivalence) /.monoid ..random))
       (_.for [/.mix]
              (mixT.spec (|>> stack) /.equivalence /.mix))
       (_.for [/.functor]
              (functorT.spec (|>> stack) /.equivalence /.functor))
       ))

(the whole
  Test
  (monad.let [! random.monad]
    [size ..bounded_size
     .let [(open "/:[0]") (/.equivalence n.equivalence)]
     sample (by ! each (|>> set.as_list (view.as list.stack)) (random.set n.hash size random.natural))
     expected_head random.natural
     expected_neck random.natural]
    (all _.and
         (_.coverage [/.size]
           (n.= size (/.size sample)))
         (_.coverage [/.empty?]
           (by bit.equivalence =
               (/.empty? sample)
               (n.= 0 (/.size sample))))
         (_.coverage [/.in_reverse]
           (or (n.< 2 (/.size sample))
               (let [not_same!
                     (not (/:= sample
                               (/.in_reverse sample)))

                     self_symmetry!
                     (/:= sample
                          (/.in_reverse (/.in_reverse sample)))]
                 (and not_same!
                      self_symmetry!))))
         (_.coverage [/.every? /.any?]
           (if (/.every? n.even? sample)
               (not (/.any? (predicate.complement n.even?) sample))
               (/.any? (predicate.complement n.even?) sample)))
         (_.coverage [/.partial]
           (when (/.partial expected_head expected_neck sample)
             (/.partial actual_head actual_neck actual_sample)
             (and (identical? expected_head actual_head)
                  (identical? expected_neck actual_neck)
                  (identical? sample actual_sample))

             else
             false))
         )))

(the domain
  Test
  (monad.let [! random.monad]
    [sample ..random
     .let [size (/.size sample)]]
    (all _.and
         (_.coverage [/.item]
           (list.every? (function (_ [index expected])
                          (when (/.item index sample)
                            {try.:Success actual}
                            (n.= expected actual)
                            
                            {try.:Failure _}
                            false))
                        (list.enumeration (view.of list.stack sample))))
         )))

(the slice
  Test
  (let [(open "/:[0]") (/.equivalence n.equivalence)
        (open "/:[0]") /.monoid]
    (monad.let [! random.monad]
      [sample (random.only (|>> /.size (n.> 0))
                           ..random)
       .let [size (/.size sample)]
       idx (by ! each (n.% size) random.natural)
       sub_size (by ! each (|>> (n.% size) ++) random.natural)]
      (all _.and
           (_.coverage [/.only]
             (let [positives (/.only n.even? sample)
                   negatives (/.only (predicate.complement n.even?) sample)]
               (and (/.every? n.even? positives)
                    (not (/.any? n.even? negatives))

                    (n.= (/.size sample)
                         (n.+ (/.size positives)
                              (/.size negatives))))))
           (_.coverage [/.split_when]
             (let [[left right] (/.split_when n.even? sample)]
               (/:= sample
                    (/:composite left right))))
           ))))

(the member
  Test
  (let [(open "/:[0]") (/.equivalence n.equivalence)]
    (monad.let [! random.monad]
      [sample ..random]
      (`` (all _.and
               (_.coverage [/.member?]
                 (/.every? (/.member? n.equivalence sample)
                           sample))
               (,, (template.with [<head> <tail> <pre>]
                     [(all _.and
                           (_.coverage [<head>]
                             (when [(<pre> sample) (<head> sample)]
                               [{.:Top expected _} {try.:Success actual}]
                               (n.= expected actual)

                               [{.:Empty} {try.:Failure _}]
                               true

                               _
                               false))
                           (_.coverage [<tail>]
                             (when [(<pre> sample) (<tail> sample)]
                               [{.:Top _ expected} {try.:Success actual}]
                               (/:= (<pre> expected) actual)

                               [{.:Empty} {try.:Failure _}]
                               true

                               _
                               false))
                           )]

                     [[/.top /.pop |>]]))
               )))))

(the search
  Test
  (let [(open "/:[0]") /.functor
        
        choice (is (-> Natural (Maybe Text))
                   (function (_ value)
                     (if (n.even? value)
                         {.:Some (by n.base_10 as value)}
                         {.:None})))]
    (monad.let [! random.monad]
      [sample ..random]
      (all _.and
           (_.coverage [/.one]
             (when [(|> sample
                        (/.only n.even?)
                        (/:each (by n.base_10 as))
                        /.top)
                    (/.one choice sample)]
               [{try.:Success expected} {try.:Success actual}]
               (text.= expected actual)

               [{try.:Failure _} {try.:Failure _}]
               true

               _
               false))
           (_.coverage [/.example]
             (when (/.example n.even? sample)
               {try.:Success found}
               (n.even? found)

               {try.:Failure _}
               (not (/.any? n.even? sample))))
           (monad.let [! random.monad]
             [expected_size (by ! each (|>> (n.% 100) ++) random.natural)
              .let [random (is (Random (Stack Natural))
                               (|> random.natural
                                   (random.set n.hash expected_size)
                                   (by ! each (|>> set.as_list
                                                   (view.as list.stack)))))]
              expected random
              difference random.natural]
             (with (/.equivalence n.equivalence)
               (all _.and
                    (_.coverage [/.only']
                      (and (= (/.only n.even? expected)
                              (is (Pure (Stack Natural))
                                  (/.only' pure.monad n.even? expected)))
                           (= (/.only n.odd? expected)
                              (is (Pure (Stack Natural))
                                  (/.only' pure.monad n.odd? expected)))))
                    (_.coverage [/.mix']
                      (with n.equivalence
                        (= (/.mix n.- 0 expected)
                           (is (Pure Natural)
                               (/.mix' pure.monad
                                       (function (_ next total)
                                         (by pure.monad pure (n.- next total)))
                                       0
                                       expected)))))
                    (_.coverage [/.each']
                      (= (by /.functor each (n.+ difference) expected)
                         (is (Pure (Stack Natural))
                             (/.each' pure.monad
                                      (|>> (n.+ difference)
                                           (by pure.monad pure))
                                      expected)))))))
           ))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [.Stack
              .:Empty .:Top])
      (all _.and
           ..signatures
           ..whole
           ..domain
           ..slice
           ..member
           ..search
           )))
