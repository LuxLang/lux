... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" enum]
    ["[0]" monad (.only do)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [function
    [polytypism
     ["[0]" mix
      ["[1]T" \\test]]]]
   [control
    ["[0]" pipe]
    ["[0]" io]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   ["[0]" function (.only)
    ["[0]" predicate]]
   [data
    ["[0]" bit]
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]
     ["[0]" integer]]]
   [macro
    ["[0]" template]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.use "[1]#[0]" monad)]]
 ["[0]" \\projection])

(the bounded_size
  (Random Natural)
  (by random.monad each (n.% 100)
      random.natural))

(the random
  (Random (Stack Natural))
  (do [! random.monad]
    [size ..bounded_size]
    (|> random.natural
        (random.set n.hash size)
        (by ! each (|>> set.as_list list.as_stack)))))

(the signatures
  Test
  (all _.and
       (_.for [/.equivalence]
              (equivalenceT.spec (/.equivalence n.equivalence) ..random))
       (_.for [/.hash]
              (|> random.natural
                  (by random.monad each (|>> stack))
                  (hashT.spec (/.hash n.hash))))
       (_.for [/.monoid]
              (monoidT.spec (/.equivalence n.equivalence) /.monoid ..random))
       (_.for [/.mix]
              (mixT.spec /#in /.equivalence /.mix))
       (_.for [/.functor]
              (functorT.spec /#in /.equivalence /.functor))
       (_.for [/.monad]
              (monadT.spec /#in /.equivalence /.monad))

       (do [! random.monad]
         [parameter random.natural
          subject random.natural]
         (let [lifted (/.lifted io.monad)
               (open "io#[0]") io.monad
               expected (n.+ parameter subject)]
           (_.coverage [/.with /.lifted]
             (|> (io.value (do (/.with io.monad)
                             [a (lifted (io#in parameter))
                              b (in subject)]
                             (in (n.+ a b))))
                 (pipe.when
                   (stack actual)
                   (n.= expected actual)
                   
                   _
                   false)))))
       ))

(the whole
  Test
  (do [! random.monad]
    [size ..bounded_size
     .let [(open "/#[0]") (/.equivalence n.equivalence)]
     sample (by ! each (|>> set.as_list list.as_stack) (random.set n.hash size random.natural))]
    (all _.and
         (_.coverage [/.size]
           (n.= size (/.size sample)))
         (_.coverage [/.empty?]
           (by bit.equivalence =
               (/.empty? sample)
               (n.= 0 (/.size sample))))
         (_.coverage [/.repeated]
           (n.= size (/.size (/.repeated size []))))
         (_.coverage [/.reversed]
           (or (n.< 2 (/.size sample))
               (let [not_same!
                     (not (/#= sample
                               (/.reversed sample)))

                     self_symmetry!
                     (/#= sample
                          (/.reversed (/.reversed sample)))]
                 (and not_same!
                      self_symmetry!))))
         (_.coverage [/.every? /.any?]
           (if (/.every? n.even? sample)
             (not (/.any? (predicate.complement n.even?) sample))
             (/.any? (predicate.complement n.even?) sample)))
         (_.coverage [/.sorted]
           (let [<<< n.<
                 
                 size_preservation!
                 (n.= (/.size sample)
                      (/.size (/.sorted <<< sample)))
                 
                 symmetry!
                 (/#= (/.sorted <<< sample)
                      (/.reversed (/.sorted (function.flipped <<<) sample)))]
             (and size_preservation!
                  symmetry!)))
         )))

(the indices
  Test
  (let [(open "/#[0]") (/.equivalence n.equivalence)
        (open "/#[0]") /.functor]
    (do [! random.monad]
      [sample ..random
       .let [size (/.size sample)]]
      (all _.and
           (_.coverage [/.indices]
             (let [indices (/.indices size)

                   expected_amount!
                   (n.= size (/.size indices))

                   already_sorted!
                   (/#= indices
                        (/.sorted n.< indices))

                   expected_numbers!
                   (/.every? (n.= (-- size))
                             (/.zipped_with_2 n.+
                                              indices
                                              (/.sorted n.> indices)))]
               (and expected_amount!
                    already_sorted!
                    expected_numbers!)))
           (_.coverage [/.enumeration]
             (let [enumeration (/.enumeration sample)

                   has_correct_indices!
                   (/#= (/.indices (/.size enumeration))
                        (/#each product.left enumeration))

                   has_correct_values!
                   (/#= sample
                        (/#each product.right enumeration))]
               (and has_correct_indices!
                    has_correct_values!)))
           (_.coverage [/.item]
             (/.every? (function (_ [index expected])
                         (when (/.item index sample)
                           {try.#Success actual}
                           (n.= expected actual)
                           
                           {try.#Failure _}
                           false))
                       (/.enumeration sample)))
           (do !
             [index (when size
                      0 random.natural
                      _ (by ! each (n.% size) random.natural))
              .let [changed? (/#= sample (/.revised index ++ sample))
                    same? (/#= sample (/.revised size ++ sample))]]
             (_.coverage [/.revised]
               (when size
                 0 (and changed?
                        same?)
                 _ (not changed?))))
           ))))

(the slice
  Test
  (let [(open "/#[0]") (/.equivalence n.equivalence)
        (open "/#[0]") /.monoid]
    (do [! random.monad]
      [sample (random.only (|>> /.size (n.> 0))
                           ..random)
       .let [size (/.size sample)]
       idx (by ! each (n.% size) random.natural)
       sub_size (by ! each (|>> (n.% size) ++) random.natural)]
      (all _.and
           (_.coverage [/.only]
             (let [positives (/.only n.even? sample)
                   negatives (/.only (predicate.complement n.even?) sample)]
               (and (/.every? n.even? positives)
                    (not (/.any? n.even? negatives))

                    (n.= (/.size sample)
                         (n.+ (/.size positives)
                              (/.size negatives))))))
           (_.coverage [/.partition]
             (let [[positives negatives] (/.partition n.even? sample)]
               (and (/#= (/.only n.even? sample)
                         positives)
                    (/#= (/.only (predicate.complement n.even?) sample)
                         negatives))))
           (_.coverage [/.split_at]
             (let [[left right] (/.split_at idx sample)]
               (/#= sample
                    (/#composite left right))))
           (_.coverage [/.split_when]
             (let [[left right] (/.split_when n.even? sample)]
               (/#= sample
                    (/#composite left right))))
           (_.coverage [/.first /.after]
             (/#= sample
                  (/#composite (/.first idx sample)
                               (/.after idx sample))))
           (_.coverage [/.while /.until]
             (/#= sample
                  (/#composite (/.while n.even? sample)
                               (/.until (|>> n.even? not) sample))))
           (_.coverage [/.sub]
             (let [subs (/.sub sub_size sample)]
               (and (/.every? (|>> /.size (n.<= sub_size)) subs)
                    (/#= sample
                         (/.together subs)))))
           ))))

(the member
  Test
  (let [(open "/#[0]") (/.equivalence n.equivalence)]
    (do [! random.monad]
      [sample ..random]
      (`` (all _.and
               (_.coverage [/.member?]
                 (/.every? (/.member? n.equivalence sample)
                           sample))
               (,, (template.with [<head> <tail> <pre>]
                     [(all _.and
                           (_.coverage [<head>]
                             (when [(<pre> sample) (<head> sample)]
                               [{.#Top expected _} {try.#Success actual}]
                               (n.= expected actual)

                               [{.#Empty} {try.#Failure _}]
                               true

                               _
                               false))
                           (_.coverage [<tail>]
                             (when [(<pre> sample) (<tail> sample)]
                               [{.#Top _ expected} {try.#Success actual}]
                               (/#= (<pre> expected) actual)

                               [{.#Empty} {try.#Failure _}]
                               true

                               _
                               false))
                           )]

                     [/.head /.tail |>]
                     [/.last /.inits /.reversed]
                     ))
               )))))

(the grouping
  Test
  (let [(open "/#[0]") (/.equivalence n.equivalence)
        (open "/#[0]") /.functor
        (open "/#[0]") /.monoid
        
        +/2 (is (-> Natural Natural Natural)
                (function (_ left right)
                  (all n.+ left right)))
        +/3 (is (-> Natural Natural Natural Natural)
                (function (_ left mid right)
                  (all n.+ left mid right)))]
    (do [! random.monad]
      [sample/0 ..random
       sample/1 ..random
       sample/2 ..random]
      (all _.and
           (_.coverage [/.pairs]
             (let [even_sized? (|> sample/0
                                   /.size
                                   (n.% 2)
                                   (n.= 0))]
               (when (/.pairs sample/0)
                 {try.#Success pairs/0}
                 (and even_sized?
                      (n.= (n./ 2 (/.size sample/0))
                           (/.size pairs/0)))

                 {try.#Failure _}
                 (not even_sized?))))
           (_.coverage [/.zipped_2]
             (let [zipped (/.zipped_2 sample/0 sample/1)
                   zipped::size (/.size zipped)

                   size_of_smaller_stack!
                   (n.= zipped::size
                        (n.minor (/.size sample/0)
                                 (/.size sample/1)))

                   can_extract_values!
                   (and (/#= (/.first zipped::size sample/0)
                             (/#each product.left zipped))
                        (/#= (/.first zipped::size sample/1)
                             (/#each product.right zipped)))]
               (and size_of_smaller_stack!
                    can_extract_values!)))
           (_.coverage [/.zipped_3]
             (let [zipped (/.zipped_3 sample/0 sample/1 sample/2)
                   zipped::size (/.size zipped)
                   
                   size_of_smaller_stack!
                   (n.= zipped::size
                        (all n.minor
                             (/.size sample/0)
                             (/.size sample/1)
                             (/.size sample/2)))

                   can_extract_values!
                   (and (/#= (/.first zipped::size sample/0)
                             (/#each product.left zipped))
                        (/#= (/.first zipped::size sample/1)
                             (/#each (|>> product.right product.left) zipped))
                        (/#= (/.first zipped::size sample/2)
                             (/#each (|>> product.right product.right) zipped)))]
               (and size_of_smaller_stack!
                    can_extract_values!)))
           (_.coverage [/.zipped]
             (and (by (/.equivalence (product.equivalence n.equivalence n.equivalence)) =
                      (/.zipped_2 sample/0 sample/1)
                      ((/.zipped 2) sample/0 sample/1))
                  (by (/.equivalence (all product.equivalence n.equivalence n.equivalence n.equivalence)) =
                      (/.zipped_3 sample/0 sample/1 sample/2)
                      ((/.zipped 3) sample/0 sample/1 sample/2))))

           (_.coverage [/.zipped_with_2]
             (/#= (/#each (function (_ [left right])
                            (+/2 left right))
                          (/.zipped_2 sample/0 sample/1))
                  (/.zipped_with_2 +/2 sample/0 sample/1)))
           (_.coverage [/.zipped_with_3]
             (/#= (/#each (function (_ [left mid right])
                            (+/3 left mid right))
                          (/.zipped_3 sample/0 sample/1 sample/2))
                  (/.zipped_with_3 +/3 sample/0 sample/1 sample/2)))
           (_.coverage [/.zipped_with]
             (and (/#= (/.zipped_with_2 +/2 sample/0 sample/1)
                       ((/.zipped_with 2) +/2 sample/0 sample/1))
                  (/#= (/.zipped_with_3 +/3 sample/0 sample/1 sample/2)
                       ((/.zipped_with 3) +/3 sample/0 sample/1 sample/2))))
           (_.coverage [/.together]
             (and (/#= (/#composite sample/0 sample/1)
                       (/.together (stack sample/0 sample/1)))
                  (/#= (all /#composite sample/0 sample/1 sample/2)
                       (/.together (stack sample/0 sample/1 sample/2)))))
           ))))

(the search
  Test
  (let [(open "/#[0]") /.functor
        
        choice (is (-> Natural (Maybe Text))
                   (function (_ value)
                     (if (n.even? value)
                       {.#Some (by n.base_10 as value)}
                       {.#None})))]
    (do [! random.monad]
      [sample ..random]
      (all _.and
           (_.coverage [/.one]
             (when [(|> sample
                        (/.only n.even?)
                        (/#each (by n.base_10 as))
                        /.head)
                    (/.one choice sample)]
               [{try.#Success expected} {try.#Success actual}]
               (text.= expected actual)

               [{try.#Failure _} {try.#Failure _}]
               true

               _
               false))
           (_.coverage [/.all]
             (by (/.equivalence text.equivalence) =
                 (|> sample
                     (/.only n.even?)
                     (/#each (by n.base_10 as)))
                 (/.all choice sample)))
           (_.coverage [/.example]
             (when (/.example n.even? sample)
               {try.#Success found}
               (n.even? found)

               {try.#Failure _}
               (not (/.any? n.even? sample))))
           ))))

(the \\projection
  Test
  (<| (_.covering \\projection._)
      (_.for [\\projection.Projection])
      (do random.monad
        [left random.natural
         right (random.only (|>> (n.= left) not)
                            random.natural)])
      (all _.and
           (_.coverage [\\projection.one]
             (when (\\projection.value (\\projection.one (n.= left))
                                       (stack left))
               {try.#Success it}
               (same? left it)
               
               {try.#Failure error}
               false))
           (_.coverage [\\projection.invalid]
             (when (\\projection.value (\\projection.one (n.= left))
                                       (stack right))
               {try.#Success it}
               false
               
               {try.#Failure error}
               (exception.is? \\projection.invalid error)))
           (_.coverage [\\projection.empty]
             (when (\\projection.value (\\projection.one (n.= left))
                                       (stack))
               {try.#Success it}
               false
               
               {try.#Failure error}
               (exception.is? \\projection.empty error)))
           (_.coverage [\\projection.value \\projection.left_over]
             (when (\\projection.value (\\projection.one (n.= left))
                                       (stack left right))
               {try.#Success it}
               false
               
               {try.#Failure error}
               (exception.is? \\projection.left_over error)))
           )))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [.Stack
              .#Empty .#Top])
      (let [(open "/#[0]") (/.equivalence n.equivalence)
            (open "/#[0]") /.functor]
        (do [! random.monad]
          [sample ..random
           delimiter random.natural]
          (all _.and
               ..signatures
               ..whole
               ..indices
               ..slice
               ..member
               ..grouping
               ..search
               
               (_.coverage [/.interposed]
                 (or (/.empty? sample)
                     (let [sample+ (/.interposed delimiter sample)]
                       (and (n.= (|> (/.size sample) (n.* 2) --)
                                 (/.size sample+))
                            (|> sample+
                                /.pairs
                                (try.else (stack))
                                (/.every? (|>> product.right (n.= delimiter))))))))
               (_.coverage [/.iterations]
                 (or (/.empty? sample)
                     (let [size (/.size sample)]
                       (/#= (/.indices size)
                            (/.iterations (function (_ index)
                                            (if (n.< size index)
                                              {.#Some (++ index)}
                                              {.#None}))
                                          0)))))
               (_.coverage [/.mixes]
                 (/#= (/#each (function (_ index)
                                (by /.mix mix n.+ 0 (/.first index sample)))
                              (/.indices (++ (/.size sample))))
                      (/.mixes n.+ 0 sample)))
               (do random.monad
                 [expected random.natural
                  .let [(open "/#[0]") (/.equivalence n.equivalence)]]
                 (_.coverage [/.when]
                   (and (/#= (stack expected) (/.when true (stack expected)))
                        (/#= (stack) (/.when false (stack expected))))))

               ..\\projection
               )))))
