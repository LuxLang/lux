... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equality (.only)
     ["[1]T" \\test]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]
   [aspect
    ["[0]" view (.only)
     ["[1]T" \\test]]
    ["[0]" case (.only)
     ["[1]T" \\test]]]
   [data
    ["[0]" any]]
   [logic
    ["[0]" bit]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" //]]])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [expected_size (by ! each (n.% 100) random.natural)
         .let [random_list (random.list expected_size random.natural)
               random_slice (|> random_list
                                (by ! each /.new)
                                (is (Random (/.Slice Natural))))]
         expected_slice random_slice
         expected_list random_list])
      (_.for [/.Slice])
      (all _.and
           (_.for [/.equality]
                  (equalityT.spec (/.equality n.equality) random_slice))
           (_.for [/.list]
                  (viewT.specification /.list
                                       (/.equality n.equality)
                                       (//.equality n.equality)
                                       
                                       random_slice
                                       (random.list expected_size random.natural)))
           
           (_.coverage [/.empty /.empty?]
             (/.empty? /.empty))
           (_.coverage [/.size]
             (and (n.= expected_size (/.size expected_slice))
                  (bit.= (/.empty? expected_slice)
                         (n.= 0 (/.size expected_slice)))))
           (_.coverage [/.new]
             (let [it (/.new expected_list)]
               (and (n.= (//.size expected_list)
                         (/.size it))
                    (with (//.equality n.equality)
                      (= expected_list
                         (view.as /.list it))))))
           (all _.and
                (<| (_.for [/.:Nil])
                    (caseT.specification /.:Nil
                                         [(/.equality n.equality)
                                          random_slice]
                                         [any.equality
                                          (pure [])]))
                (_.coverage [/.:Nil]
                  (and (case.when (is (/.Slice Natural)
                                      /.empty)
                         {/.:Nil _}
                         true
                         
                         else
                         false)
                       (by (/.equality n.equality) =
                           /.empty
                           (case.some /.:Nil [])))))
           (let [/:equality (/.equality n.equality)]
             (all _.and
                  (<| (_.for [/.:Cons])
                      (caseT.specification /.:Cons
                                           [/:equality
                                            random_slice]
                                           [(equality.product n.equality /:equality)
                                            (random.and random.natural random_slice)]))
                  (_.coverage [/.:Cons]
                    (and (case.when expected_slice
                           {/.:Cons head tail}
                           (by /:equality = expected_slice (case.some /.:Cons [head tail]))
                           
                           else
                           (by /:equality = /.empty else))
                         (case.when (is (/.Slice Natural)
                                        /.empty)
                           {/.:Cons head tail}
                           false
                           
                           else
                           true)))))
           (let [/:equality (/.equality n.equality)]
             (all _.and
                  (<| (_.for [/.:Pair])
                      (caseT.specification /.:Pair
                                           [/:equality
                                            random_slice]
                                           [(all equality.product n.equality n.equality /:equality)
                                            (all random.and random.natural random.natural random_slice)]))
                  (_.coverage [/.:Pair]
                    (let [in_reverse (is (for_any (_ it)
                                           (Change (/.Slice Natural)))
                                         (function (in_reverse it)
                                           (case.when it
                                             {/.:Pair start end it'}
                                             (case.some /.:Pair [end start (in_reverse it')])
                                             
                                             else
                                             it)))]
                      (/:equality (|> expected_slice
                                      (view.as /.list)
                                      //.in_reverse
                                      (view.of /.list))
                                  (in_reverse expected_slice))))))
           )))
