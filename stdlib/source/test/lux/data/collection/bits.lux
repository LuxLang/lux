(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    ["." predicate]
    {[0 #spec]
     [/
      ["$." equivalence]]}]
   [data
    [number
     ["n" nat]]]
   [math
    ["." random (#+ Random)]]]
  {1
   ["." / (#+ Bits)]})

(def: (size min max)
  (-> Nat Nat (Random Nat))
  (|> random.nat
      (:: random.monad map (|>> (n.% (inc max)) (n.max min)))))

(def: #export random
  (Random Bits)
  (do {@ random.monad}
    [size (:: @ map (n.% 1,000) random.nat)]
    (case size
      0 (wrap /.empty)
      _ (do {@ random.monad}
          [idx (|> random.nat (:: @ map (n.% size)))]
          (wrap (/.set idx /.empty))))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.Bits])
      ($_ _.and
          (_.with-cover [/.equivalence]
            ($equivalence.spec /.equivalence ..random))

          (do random.monad
            [sample ..random]
            (_.cover [/.empty? /.size]
                     (if (/.empty? sample)
                       (n.= 0 (/.size sample))
                       (n.> 0 (/.size sample)))))
          (_.cover [/.empty]
                   (/.empty? /.empty))
          
          (do {@ random.monad}
            [size (:: @ map (|>> (n.% 1,000) inc) random.nat)
             idx (:: @ map (n.% size) random.nat)
             sample ..random]
            ($_ _.and
                (_.cover [/.get /.set]
                         (and (|> /.empty (/.get idx) not)
                              (|> /.empty (/.set idx) (/.get idx))))
                (_.cover [/.clear]
                         (|> /.empty (/.set idx) (/.clear idx) (/.get idx) not))
                (_.cover [/.flip]
                         (and (|> /.empty (/.flip idx) (/.get idx))
                              (|> /.empty (/.flip idx) (/.flip idx) (/.get idx) not)))
                (_.cover [/.Chunk /.capacity /.chunk-size]
                         (and (n.= 0 (/.capacity /.empty))
                              (|> /.empty (/.set idx) /.capacity
                                  (n.- idx)
                                  (predicate.unite (n.>= 0)
                                                   (n.< /.chunk-size)))
                              (let [grown (/.flip idx /.empty)]
                                (and (n.> 0 (/.capacity grown))
                                     (is? /.empty (/.flip idx grown))))))
                (_.cover [/.intersects?]
                         (and (not (/.intersects? /.empty
                                                  /.empty))
                              (/.intersects? (/.set idx /.empty)
                                             (/.set idx /.empty))
                              (not (/.intersects? (/.set (inc idx) /.empty)
                                                  (/.set idx /.empty)))
                              (not (/.intersects? sample (/.not sample)))))
                (_.cover [/.not]
                         (and (not (:: /.equivalence = sample (/.not sample)))
                              (:: /.equivalence = sample (/.not (/.not sample)))
                              (is? /.empty (/.not /.empty))))
                (_.cover [/.xor]
                         (and (is? /.empty (/.xor sample sample))
                              (n.= (/.size (/.xor sample (/.not sample)))
                                   (/.capacity sample))))
                (_.cover [/.or]
                         (and (:: /.equivalence = sample (/.or sample sample))
                              (n.= (/.size (/.or sample (/.not sample)))
                                   (/.capacity sample))))
                (_.cover [/.and]
                         (and (:: /.equivalence = sample (/.and sample sample))
                              (is? /.empty (/.and sample (/.not sample)))))
                )))))
