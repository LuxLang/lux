... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equality (.only Equality)]
    ["[0]" enum]
    ["[0]" monad]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    ["[0]" comonad
     ["[1]T" \\test]]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]:[0]" monad monoid)]]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the (equality super)
  (for_any (_ it)
    (-> (Equality it)
        (Equality (/.Stream it))))
  (implementation
   (the (= expected actual)
     (by (list.equality super) =
         (/.first 100 expected)
         (/.first 100 actual)))))

(the (iterations step)
  (for_any (_ it)
    (-> (-> it it)
        (-> it (/.Stream it))))
  (/.iterations
   (function (_ state)
     (let [state' (step state)]
       [state' state]))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Stream])
      (let [(open "list:[0]") (list.equality n.equality)])
      (monad.let [! random.monad]
        [repeated random.natural
         index (by ! each (n.% 100) random.natural)
         size (by ! each (|>> (n.% 10) ++) random.natural)
         offset (by ! each (n.% 100) random.natural)
         cycle_start random.natural
         cycle_next (random.list size random.natural)]
        (all _.and
             (_.for [/.functor]
                    (functorT.spec /.repeated ..equality /.functor))
             (_.for [/.comonad]
                    (comonadT.spec /.repeated ..equality /.comonad))
             
             (_.coverage [/.item]
               (n.= (n.+ offset index)
                    (/.item index (..iterations ++ offset))))
             (_.coverage [/.repeated]
               (n.= repeated
                    (/.item index (/.repeated repeated))))
             (_.coverage [/.first]
               (list:= (enum.range n.enum offset (-- (n.+ size offset)))
                       (/.first size (..iterations ++ offset))))
             (_.coverage [/.after]
               (list:= (enum.range n.enum offset (-- (n.+ size offset)))
                       (/.first size (/.after offset (..iterations ++ 0)))))
             (_.coverage [/.split_at]
               (let [[drops takes] (/.split_at size (..iterations ++ 0))]
                 (and (list:= (enum.range n.enum 0 (-- size))
                              drops)
                      (list:= (enum.range n.enum size (-- (n.x 2 size)))
                              (/.first size takes)))))
             (_.coverage [/.while]
               (list:= (enum.range n.enum 0 (-- size))
                       (/.while (n.< size) (..iterations ++ 0))))
             (_.coverage [/.until]
               (list:= (enum.range n.enum offset (n.+ (-- size) offset))
                       (/.while (n.< (n.+ size offset))
                                (/.until (n.>= offset) (..iterations ++ 0)))))
             (_.coverage [/.split_when]
               (let [[drops takes] (/.split_when (n.= size) (..iterations ++ 0))]
                 (and (list:= (enum.range n.enum 0 (-- size))
                              drops)
                      (list:= (enum.range n.enum size (-- (n.x 2 size)))
                              (/.while (n.< (n.x 2 size)) takes)))))
             (_.coverage [/.head]
               (n.= offset
                    (/.head (..iterations ++ offset))))
             (_.coverage [/.tail]
               (list:= (enum.range n.enum (++ offset) (n.+ size offset))
                       (/.first size (/.tail (..iterations ++ offset)))))
             (_.coverage [/.only]
               (list:= (list:each (n.x 2) (enum.range n.enum 0 (-- size)))
                       (/.first size (/.only n.even? (..iterations ++ 0)))))
             (_.coverage [/.partition]
               (let [[evens odds] (/.partition n.even? (..iterations ++ 0))]
                 (and (n.= (n.x 2 offset)
                           (/.item offset evens))
                      (n.= (++ (n.x 2 offset))
                           (/.item offset odds)))))
             (_.coverage [/.iterations]
               (let [(open "/:[0]") /.functor
                     (open "list:[0]") (list.equality text.equality)]
                 (list:= (/.first size
                                  (/:each %.natural (..iterations ++ offset)))
                         (/.first size
                                  (/.iterations (function (_ n) [(++ n) (%.natural n)])
                                                offset)))))
             (_.coverage [/.cycle]
               (let [cycle (list:composite (list cycle_start) cycle_next)

                     expected (list:conjoint (list.repeated size cycle))
                     actual (/.first (n.x size (list.size cycle))
                                     (/.cycle [cycle_start cycle_next]))]
                 (list:= expected actual)))
             (_.coverage [/.pattern]
               (let [(/.pattern first second third next) (..iterations ++ offset)]
                 (and (n.= offset first)
                      (n.= (n.+ 1 offset) second)
                      (n.= (n.+ 2 offset) third))))
             ))))
