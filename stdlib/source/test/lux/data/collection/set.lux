... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [hash (.only Hash)]
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [data
    ["[0]" bit]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the gen_nat
  (Random Nat)
  (of random.monad each (n.% 100)
      random.nat))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Set])
      (do [! random.monad]
        [size ..gen_nat]
        (all _.and
             (_.for [/.equivalence]
                    (equivalenceT.spec /.equivalence (random.set n.hash size random.nat)))
             (_.for [/.hash]
                    (|> random.nat
                        (of random.monad each (|>> list (/.of_list n.hash)))
                        (hashT.spec /.hash)))
             (_.for [/.monoid]
                    (monoidT.spec /.equivalence (/.monoid n.hash) (random.set n.hash size random.nat)))

             (do !
               [sizeL ..gen_nat
                sizeR ..gen_nat
                setL (random.set n.hash sizeL random.nat)
                setR (random.set n.hash sizeR random.nat)
                non_memberL (random.only (|>> (/.member? setL) not)
                                         random.nat)]
               (all _.and
                    (_.coverage [/.empty]
                      (/.empty? (/.empty n.hash)))
                    (do !
                      [hash (of ! each (function (_ constant)
                                         (is (Hash Nat)
                                             (implementation
                                              (the equivalence n.equivalence)
                                              
                                              (the (hash _)
                                                constant))))
                                random.nat)]
                      (_.coverage [/.member_hash]
                        (same? hash (/.member_hash (/.empty hash)))))
                    (_.coverage [/.size]
                      (n.= sizeL (/.size setL)))
                    (_.coverage [/.empty?]
                      (bit.= (/.empty? setL)
                             (n.= 0 (/.size setL))))
                    (_.coverage [/.list /.of_list]
                      (|> setL /.list (/.of_list n.hash) (/.= setL)))
                    (_.coverage [/.member?]
                      (and (list.every? (/.member? setL) (/.list setL))
                           (not (/.member? setL non_memberL))))
                    (_.coverage [/.has]
                      (let [before_addition!
                            (not (/.member? setL non_memberL))

                            after_addition!
                            (/.member? (/.has non_memberL setL) non_memberL)

                            size_increase!
                            (n.= (++ (/.size setL))
                                 (/.size (/.has non_memberL setL)))]
                        (and before_addition!
                             after_addition!)))
                    (_.coverage [/.lacks]
                      (let [symmetry!
                            (|> setL
                                (/.has non_memberL)
                                (/.lacks non_memberL)
                                (/.= setL))

                            idempotency!
                            (|> setL
                                (/.lacks non_memberL)
                                (/.= setL))]
                        (and symmetry!
                             idempotency!)))
                    (_.coverage [/.union /.sub?]
                      (let [setLR (/.union setL setR)
                            
                            sets_are_subs_of_their_unions!
                            (and (/.sub? setLR setL)
                                 (/.sub? setLR setR))

                            union_with_empty_set!
                            (|> setL
                                (/.union (/.empty n.hash))
                                (/.= setL))]
                        (and sets_are_subs_of_their_unions!
                             union_with_empty_set!)))
                    (_.coverage [/.intersection /.super?]
                      (let [setLR (/.intersection setL setR)
                            
                            sets_are_supers_of_their_intersections!
                            (and (/.super? setLR setL)
                                 (/.super? setLR setR))

                            intersection_with_empty_set!
                            (|> setL
                                (/.intersection (/.empty n.hash))
                                /.empty?)]
                        (and sets_are_supers_of_their_intersections!
                             intersection_with_empty_set!)))
                    (_.coverage [/.difference]
                      (let [setL+R (/.union setR setL)
                            setL_R (/.difference setR setL+R)]
                        (and (list.every? (/.member? setL+R) (/.list setR))
                             (not (list.any? (/.member? setL_R) (/.list setR))))))
                    (_.coverage [/.predicate]
                      (list.every? (/.predicate setL) (/.list setL)))
                    ))))))
