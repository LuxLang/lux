(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [hash (#+ Hash)]
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]
      ["$." hash]
      ["$." monoid]]]
    [data
     ["." bit ("#\." equivalence)]
     [collection
      ["." list]]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." / ("\." equivalence)]])

(def: gen_nat
  (Random Nat)
  (\ random.monad map (n.% 100)
     random.nat))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Set])
      (do {! random.monad}
        [size ..gen_nat]
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec /.equivalence (random.set n.hash size random.nat)))
            (_.for [/.hash]
                   (|> random.nat
                       (\ random.monad map (|>> list (/.of_list n.hash)))
                       ($hash.spec /.hash)))
            (_.for [/.monoid]
                   ($monoid.spec /.equivalence (/.monoid n.hash) (random.set n.hash size random.nat)))

            (do !
              [sizeL ..gen_nat
               sizeR ..gen_nat
               setL (random.set n.hash sizeL random.nat)
               setR (random.set n.hash sizeR random.nat)
               non_memberL (random.only (|>> (/.member? setL) not)
                                        random.nat)]
              ($_ _.and
                  (_.cover [/.empty]
                           (/.empty? (/.empty n.hash)))
                  (do !
                    [hash (\ ! map (function (_ constant)
                                     (: (Hash Nat)
                                        (implementation
                                         (def: &equivalence n.equivalence)
                                         
                                         (def: (hash _)
                                           constant))))
                             random.nat)]
                    (_.cover [/.member_hash]
                             (same? hash (/.member_hash (/.empty hash)))))
                  (_.cover [/.size]
                           (n.= sizeL (/.size setL)))
                  (_.cover [/.empty?]
                           (bit\= (/.empty? setL)
                                  (n.= 0 (/.size setL))))
                  (_.cover [/.list /.of_list]
                           (|> setL /.list (/.of_list n.hash) (\= setL)))
                  (_.cover [/.member?]
                           (and (list.every? (/.member? setL) (/.list setL))
                                (not (/.member? setL non_memberL))))
                  (_.cover [/.has]
                           (let [before_addition!
                                 (not (/.member? setL non_memberL))

                                 after_addition!
                                 (/.member? (/.has non_memberL setL) non_memberL)

                                 size_increase!
                                 (n.= (inc (/.size setL))
                                      (/.size (/.has non_memberL setL)))]
                             (and before_addition!
                                  after_addition!)))
                  (_.cover [/.lacks]
                           (let [symmetry!
                                 (|> setL
                                     (/.has non_memberL)
                                     (/.lacks non_memberL)
                                     (\= setL))

                                 idempotency!
                                 (|> setL
                                     (/.lacks non_memberL)
                                     (\= setL))]
                             (and symmetry!
                                  idempotency!)))
                  (_.cover [/.union /.sub?]
                           (let [setLR (/.union setL setR)
                                 
                                 sets_are_subs_of_their_unions!
                                 (and (/.sub? setLR setL)
                                      (/.sub? setLR setR))

                                 union_with_empty_set!
                                 (|> setL
                                     (/.union (/.empty n.hash))
                                     (\= setL))]
                             (and sets_are_subs_of_their_unions!
                                  union_with_empty_set!)))
                  (_.cover [/.intersection /.super?]
                           (let [setLR (/.intersection setL setR)
                                 
                                 sets_are_supers_of_their_intersections!
                                 (and (/.super? setLR setL)
                                      (/.super? setLR setR))

                                 intersection_with_empty_set!
                                 (|> setL
                                     (/.intersection (/.empty n.hash))
                                     /.empty?)]
                             (and sets_are_supers_of_their_intersections!
                                  intersection_with_empty_set!)))
                  (_.cover [/.difference]
                           (let [setL+R (/.union setR setL)
                                 setL_R (/.difference setR setL+R)]
                             (and (list.every? (/.member? setL+R) (/.list setR))
                                  (not (list.any? (/.member? setL_R) (/.list setR))))))
                  (_.cover [/.predicate]
                           (list.every? (/.predicate setL) (/.list setL)))
                  ))))))
