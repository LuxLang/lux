(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]
      ["$." monoid]]}]
   [data
    [number
     ["n" nat]]
    [collection
     ["." list]]]
   [math
    ["r" random]]]
  {1
   ["." /]})

(def: gen-nat
  (r.Random Nat)
  (|> r.nat
      (:: r.monad map (n.% 100))))

(def: #export test
  Test
  (<| (_.context (%.name (name-of /.Set)))
      (do r.monad
        [size gen-nat]
        ($_ _.and
            ($equivalence.spec /.equivalence (r.set n.hash size r.nat))
            ($monoid.spec /.equivalence (/.monoid n.hash) (r.set n.hash size r.nat))

            (do r.monad
              [sizeL gen-nat
               sizeR gen-nat
               setL (r.set n.hash sizeL gen-nat)
               setR (r.set n.hash sizeR gen-nat)
               non-member (|> gen-nat
                              (r.filter (|>> (/.member? setL) not)))
               #let [(^open "/@.") /.equivalence]]
              ($_ _.and
                  (_.test "I can query the size of a set."
                          (and (n.= sizeL (/.size setL))
                               (n.= sizeR (/.size setR))))
                  (_.test "Converting sets to/from lists can't change their values."
                          (|> setL
                              /.to-list (/.from-list n.hash)
                              (/@= setL)))
                  (_.test "Every set is a sub-set of the union of itself with another."
                          (let [setLR (/.union setL setR)]
                            (and (/.sub? setLR setL)
                                 (/.sub? setLR setR))))
                  (_.test "Every set is a super-set of the intersection of itself with another."
                          (let [setLR (/.intersection setL setR)]
                            (and (/.super? setLR setL)
                                 (/.super? setLR setR))))
                  (_.test "Union with the empty set leaves a set unchanged."
                          (/@= setL
                               (/.union (/.new n.hash)
                                        setL)))
                  (_.test "Intersection with the empty set results in the empty set."
                          (let [empty-set (/.new n.hash)]
                            (/@= empty-set
                                 (/.intersection empty-set setL))))
                  (_.test "After substracting a set A from another B, no member of A can be a member of B."
                          (let [sub (/.difference setR setL)]
                            (not (list.any? (/.member? sub) (/.to-list setR)))))
                  (_.test "Every member of a set must be identifiable."
                          (and (not (/.member? setL non-member))
                               (/.member? (/.add non-member setL) non-member)
                               (not (/.member? (/.remove non-member (/.add non-member setL)) non-member))))
                  ))))))
