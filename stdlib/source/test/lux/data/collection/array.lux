... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [functor (.only)]
    [monad (.only do)]
    ["[0]" functor
     ["[1]T" \\test (.only Injection)]]
    ["[0]" monoid
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [function
    [polytypism
     ["[0]" mix (.only Mix)
      ["[1]T" \\test]]]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" bit]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" stack (.use "[1]#[0]" functor)]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" functor)]
    [number
     ["n" natural]]]
   [macro
    ["[0]" template]
    ["[0]" expansion]]
   [meta
    ["[0]" static]
    ["[0]" code]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only Array)
   ["[0]" \\unsafe]]])

(the injection
  (Injection Array)
  (|>> stack /.of_stack))

(the bounded_size
  (Random Natural)
  (by random.monad each (|>> (n.% 20) ++)
      random.natural))

(the structures
  Test
  (do [! random.monad]
    [size ..bounded_size]
    (all _.and
         (_.for [/.equivalence]
                (equivalenceT.spec (/.equivalence n.equivalence) (random.array size random.natural)))
         (_.for [/.monoid]
                (monoidT.spec (/.equivalence n.equivalence) /.monoid (random.array size random.natural)))
         (_.for [/.functor]
                (functorT.spec ..injection /.equivalence /.functor))
         (_.for [/.mix]
                (mixT.spec ..injection /.equivalence /.mix))
         )))

(the search
  Test
  (do [! random.monad]
    [size ..bounded_size
     base random.natural
     shift random.natural
     .let [expected (n.+ base shift)]
     the_array (random.array size random.natural)
     evens (random.array size (random.only n.even? random.natural))]
    (all _.and
         (let [(open "/#[0]") /.functor
               choose (is (-> Natural (Maybe Text))
                          (function (_ value)
                            (if (n.even? value)
                                {.#Some (by n.base_10 as value)}
                                {.#None})))]
           (_.coverage [/.one]
             (when [(|> evens
                        (/#each (by n.base_10 as))
                        (/.item 0))
                    (/.one choose evens)]
               [{try.#Success expected} {try.#Success actual}]
               (text.= expected actual)

               [{try.#Failure _} {try.#Failure _}]
               true

               _
               false)))
         (_.coverage [/.example]
           (by (maybe.equivalence n.equivalence) =
               (/.example n.even? the_array)
               (stack.example n.even? (/.as_stack {.#None} the_array))))
         (_.coverage [/.example']
           (when [(/.example n.even? the_array)
                  (/.example' (function (_ idx member)
                                (n.even? member))
                              the_array)]
             [{try.#Success expected} {try.#Success [idx actual]}]
             (when (/.item idx the_array)
               {try.#Success again}
               (and (n.= expected actual)
                    (n.= actual again))
               
               {try.#Failure _}
               false)

             [{try.#Failure _} {try.#Failure _}]
             true

             _
             false))
         (_.coverage [/.every?]
           (by bit.equivalence =
               (stack.every? n.even? (/.as_stack {.#None} the_array))
               (/.every? n.even? the_array)))
         (_.coverage [/.any?]
           (by bit.equivalence =
               (stack.any? n.even? (/.as_stack {.#None} the_array))
               (/.any? n.even? the_array)))
         )))

(the test|unsafe
  Test
  (<| (_.covering \\unsafe._)
      (_.for [\\unsafe.Array])
      (do [! random.monad]
        [size ..bounded_size
         base random.natural
         shift random.natural
         dummy (random.only (|>> (n.= base) not) random.natural)
         .let [expected (n.+ base shift)]
         the_array (random.array size random.natural)
         evens (random.array size (random.only n.even? random.natural))]
        (`` (all _.and
                 (_.for [\\unsafe.=]
                        (equivalenceT.spec (function (_ left right)
                                             (\\unsafe.= n.equivalence left right))
                                           (random.array size random.natural)))
                 (_.for [\\unsafe.composite]
                        (monoidT.spec (/.equivalence n.equivalence)
                                      (implementation
                                       (the identity (\\unsafe.empty 0))
                                       (the (composite left right)
                                         (\\unsafe.composite left right)))
                                      (random.array size random.natural)))
                 (_.for [\\unsafe.each]
                        (functorT.spec ..injection /.equivalence
                                       (function (_ $ it)
                                         (\\unsafe.each $ it))))
                 (_.for [\\unsafe.mix]
                        (mixT.spec ..injection /.equivalence
                                   (is (Mix \\unsafe.Array)
                                       (function (_ $ init it)
                                         (\\unsafe.mix (function (_ index item output)
                                                         ($ item output))
                                                       init
                                                       it)))))
                 
                 (_.coverage [\\unsafe.empty \\unsafe.size]
                   (n.= size (\\unsafe.size (is (Array Natural)
                                                (\\unsafe.empty size)))))
                 (_.coverage [\\unsafe.lacks?]
                   (let [the_array (|> (\\unsafe.empty 2)
                                       (is (Array Natural))
                                       (\\unsafe.has! 0 expected))]
                     (and (not (\\unsafe.lacks? 0 the_array))
                          (\\unsafe.lacks? 1 the_array))))
                 (_.coverage [\\unsafe.item \\unsafe.has!]
                   (|> (\\unsafe.empty 2)
                       (is (Array Natural))
                       (\\unsafe.has! 0 expected)
                       (\\unsafe.item 0)
                       (n.= expected)))
                 (_.coverage [\\unsafe.lacks!]
                   (|> (\\unsafe.empty 1)
                       (is (Array Natural))
                       (\\unsafe.has! 0 expected)
                       (\\unsafe.lacks! 0)
                       (\\unsafe.lacks? 0)))
                 (_.coverage [\\unsafe.lacks?]
                   (let [the_array (|> (\\unsafe.empty 2)
                                       (is (Array Natural))
                                       (\\unsafe.has! 0 expected))]
                     (and (not (\\unsafe.lacks? 0 the_array))
                          (\\unsafe.lacks? 1 the_array))))
                 (_.coverage [\\unsafe.has?]
                   (let [the_array (|> (\\unsafe.empty 2)
                                       (is (Array Natural))
                                       (\\unsafe.has! 0 expected))]
                     (and (\\unsafe.has? 0 the_array)
                          (not (\\unsafe.has? 1 the_array)))))
                 (_.coverage [\\unsafe.revised!]
                   (|> (\\unsafe.empty 1)
                       (is (Array Natural))
                       (\\unsafe.has! 0 base)
                       (\\unsafe.revised! 0 (n.+ shift))
                       (\\unsafe.item 0)
                       (n.= expected)))
                 (_.coverage [\\unsafe.upsert!]
                   (let [the_array (|> (\\unsafe.empty 2)
                                       (is (Array Natural))
                                       (\\unsafe.has! 0 base)
                                       (\\unsafe.upsert! 0 dummy (n.+ shift))
                                       (\\unsafe.upsert! 1 base (n.+ shift)))]
                     (and (n.= expected (\\unsafe.item 0 the_array))
                          (n.= expected (\\unsafe.item 1 the_array)))))
                 (do !
                   [occupancy (by ! each (n.% (++ size)) random.natural)]
                   (_.coverage [\\unsafe.occupancy \\unsafe.vacancy]
                     (let [the_array (loop (again [output (is (Array Natural)
                                                              (\\unsafe.empty size))
                                                   idx 0])
                                       (if (n.< occupancy idx)
                                           (again (\\unsafe.has! idx expected output)
                                                  (++ idx))
                                           output))]
                       (and (n.= occupancy (\\unsafe.occupancy the_array))
                            (n.= size (n.+ (\\unsafe.occupancy the_array)
                                           (\\unsafe.vacancy the_array)))))))
                 (do !
                   [the_stack (random.stack size random.natural)
                    .let [the_array (\\unsafe.clone the_array)
                          members (|> the_array (\\unsafe.as_stack {.#None}) list.of_stack (set.of_list n.hash))]
                    default (random.only (function (_ value)
                                           (not (or (n.even? value)
                                                    (set.member? members value))))
                                         random.natural)]
                   (_.coverage [\\unsafe.of_stack \\unsafe.as_stack]
                     (and (|> the_stack \\unsafe.of_stack (\\unsafe.as_stack {.#None})
                              (by (stack.equivalence n.equivalence) = the_stack))
                          (|> the_array (\\unsafe.as_stack {.#None}) \\unsafe.of_stack
                              (\\unsafe.= n.equivalence the_array))
                          (exec
                            (\\unsafe.only! n.even? the_array)
                            (stack.every? (function (_ value)
                                            (or (n.even? value)
                                                (same? default value)))
                                          (\\unsafe.as_stack {.#Some default} the_array))))))
                 (do !
                   [amount (by ! each (n.% (++ size)) random.natural)]
                   (_.coverage [\\unsafe.copy!]
                     (let [copy (is (Array Natural)
                                    (\\unsafe.empty size))]
                       (exec (\\unsafe.copy! amount 0 the_array 0 copy)
                         (by (stack.equivalence n.equivalence) =
                             (stack.first amount (\\unsafe.as_stack {.#None} the_array))
                             (\\unsafe.as_stack {.#None} copy))))))
                 (_.coverage [\\unsafe.clone]
                   (let [clone (\\unsafe.clone the_array)]
                     (and (not (same? the_array clone))
                          (\\unsafe.= n.equivalence the_array clone))))
                 (let [the_array (\\unsafe.clone the_array)
                       evens (|> the_array (\\unsafe.as_stack {.#None}) (stack.only n.even?))
                       odds (|> the_array (\\unsafe.as_stack {.#None}) (stack.only n.odd?))]
                   (_.coverage [\\unsafe.only!]
                     (exec (\\unsafe.only! n.even? the_array)
                       (and (n.= (stack.size evens) (\\unsafe.occupancy the_array))
                            (n.= (stack.size odds) (\\unsafe.vacancy the_array))
                            (|> the_array
                                (\\unsafe.as_stack {.#None})
                                (by (stack.equivalence n.equivalence) = evens))))))
                 (let [choose (is (-> Natural (Maybe Text))
                                  (function (_ value)
                                    (if (n.even? value)
                                        {.#Some (by n.base_10 as value)}
                                        {.#None})))]
                   (_.coverage [\\unsafe.one]
                     (|> evens
                         (\\unsafe.one choose)
                         (maybe#each (text.= (|> evens
                                                 (\\unsafe.each (by n.base_10 as))
                                                 (\\unsafe.item 0))))
                         (maybe.else false))))
                 (_.coverage [\\unsafe.example]
                   (when [(\\unsafe.example n.even? the_array)
                          (stack.example n.even? (\\unsafe.as_stack {.#None} the_array))]
                     [{try.#Success expected} {try.#Success actual}]
                     (by n.equivalence = expected actual)

                     [{try.#Failure _} {try.#Failure _}]
                     true

                     _
                     false))
                 (_.coverage [\\unsafe.example']
                   (when [(\\unsafe.example n.even? the_array)
                          (\\unsafe.example' (function (_ idx member)
                                               (n.even? member))
                                             the_array)]
                     [{try.#Success expected} {try.#Success [idx actual]}]
                     (and (not (\\unsafe.lacks? idx the_array))
                          (n.= expected actual)
                          (n.= actual (\\unsafe.item idx the_array)))

                     [{try.#Failure _} {try.#Failure _}]
                     true

                     _
                     false))
                 (_.coverage [\\unsafe.every?]
                   (by bit.equivalence =
                       (stack.every? n.even? (\\unsafe.as_stack {.#None} the_array))
                       (\\unsafe.every? n.even? the_array)))
                 (_.coverage [\\unsafe.any?]
                   (by bit.equivalence =
                       (stack.any? n.even? (\\unsafe.as_stack {.#None} the_array))
                       (\\unsafe.any? n.even? the_array)))
                 )))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Array])
      (do [! random.monad]
        [size ..bounded_size
         base random.natural
         shift random.natural
         dummy (random.only (|>> (n.= base) not) random.natural)
         .let [expected (n.+ base shift)]
         the_array (random.array size random.natural)]
        (all _.and
             ..structures
             ..search

             (_.coverage [/.empty /.size]
               (n.= size (/.size (is (Array Natural)
                                     (/.empty size)))))
             (_.coverage [/.item /.has!]
               (let [the_array (|> (/.empty 2)
                                   (is (Array Natural))
                                   (/.has! 0 expected))]
                 (when [(/.item 0 the_array)
                        (/.item 1 the_array)]
                   [{try.#Success actual} {try.#Failure _}]
                   (n.= expected actual)

                   _
                   false)))
             (_.coverage [/.lacks!]
               (let [the_array (|> (/.empty 1)
                                   (is (Array Natural))
                                   (/.has! 0 expected))]
                 (when [(/.item 0 the_array)
                        (/.item 0 (/.lacks! 0 the_array))]
                   [{try.#Success actual} {try.#Failure _}]
                   (n.= expected actual)

                   _
                   false)))
             (_.coverage [/.lacks?]
               (let [the_array (|> (/.empty 2)
                                   (is (Array Natural))
                                   (/.has! 0 expected))]
                 (and (not (/.lacks? 0 the_array))
                      (/.lacks? 1 the_array))))
             (_.coverage [/.has?]
               (let [the_array (|> (/.empty 2)
                                   (is (Array Natural))
                                   (/.has! 0 expected))]
                 (and (/.has? 0 the_array)
                      (not (/.has? 1 the_array)))))
             (_.coverage [/.revised!]
               (let [the_array (|> (/.empty 1)
                                   (is (Array Natural))
                                   (/.has! 0 base)
                                   (/.revised! 0 (n.+ shift)))]
                 (when (/.item 0 the_array)
                   {try.#Success actual}
                   (n.= expected actual)

                   _
                   false)))
             (_.coverage [/.upsert!]
               (let [the_array (|> (/.empty 2)
                                   (is (Array Natural))
                                   (/.has! 0 base)
                                   (/.upsert! 0 dummy (n.+ shift))
                                   (/.upsert! 1 base (n.+ shift)))]
                 (when [(/.item 0 the_array)
                        (/.item 1 the_array)]
                   [{try.#Success actual/0} {try.#Success actual/1}]
                   (and (n.= expected actual/0)
                        (n.= expected actual/1))

                   _
                   false)))
             (do !
               [occupancy (by ! each (n.% (++ size)) random.natural)]
               (_.coverage [/.occupancy /.vacancy]
                 (let [the_array (loop (again [output (is (Array Natural)
                                                          (/.empty size))
                                               idx 0])
                                   (if (n.< occupancy idx)
                                       (again (/.has! idx expected output)
                                              (++ idx))
                                       output))]
                   (and (n.= occupancy (/.occupancy the_array))
                        (n.= size (n.+ (/.occupancy the_array)
                                       (/.vacancy the_array)))))))
             (do !
               [the_stack (random.stack size random.natural)
                .let [the_array (/.clone the_array)
                      members (|> the_array (/.as_stack {.#None}) list.of_stack (set.of_list n.hash))]
                default (random.only (function (_ value)
                                       (not (or (n.even? value)
                                                (set.member? members value))))
                                     random.natural)]
               (_.coverage [/.of_stack /.as_stack]
                 (and (|> the_stack /.of_stack (/.as_stack {.#None})
                          (by (stack.equivalence n.equivalence) = the_stack))
                      (|> the_array (/.as_stack {.#None}) /.of_stack
                          (by (/.equivalence n.equivalence) = the_array))
                      (exec
                        (/.only! n.even? the_array)
                        (stack.every? (function (_ value)
                                        (or (n.even? value)
                                            (same? default value)))
                                      (/.as_stack {.#Some default} the_array))))))
             (do !
               [amount (by ! each (n.% (++ size)) random.natural)]
               (_.coverage [/.copy!]
                 (let [copy (is (Array Natural)
                                (/.empty size))]
                   (exec (/.copy! amount 0 the_array 0 copy)
                     (by (stack.equivalence n.equivalence) =
                         (stack.first amount (/.as_stack {.#None} the_array))
                         (/.as_stack {.#None} copy))))))
             (_.coverage [/.clone]
               (let [clone (/.clone the_array)]
                 (and (not (same? the_array clone))
                      (by (/.equivalence n.equivalence) = the_array clone))))
             (let [the_array (/.clone the_array)
                   evens (|> the_array (/.as_stack {.#None}) (stack.only n.even?))
                   odds (|> the_array (/.as_stack {.#None}) (stack.only n.odd?))]
               (_.coverage [/.only!]
                 (exec (/.only! n.even? the_array)
                   (and (n.= (stack.size evens) (/.occupancy the_array))
                        (n.= (stack.size odds) (/.vacancy the_array))
                        (|> the_array (/.as_stack {.#None}) (by (stack.equivalence n.equivalence) = evens))))))
             (_.coverage [/.array]
               (expansion.let [<expected_size> (static.random code.natural
                                                              (random#each (n.% 10) random.natural))
                               <elements> (static.random (|>> (list#each code.natural)
                                                              code.tuple)
                                                         (random.list <expected_size> random.natural))]
                 (let [it (is (/.Array Natural)
                              (`` (/.array (,, (template.spliced <elements>)))))
                       (open "stack#[0]") (stack.equivalence n.equivalence)]
                   (and (n.= <expected_size> (/.size it))
                        (stack#= (is (Stack Natural)
                                     (`` (stack (,, (template.spliced <elements>)))))
                                 (/.as_stack {.#None} it))))))

             ..test|unsafe
             ))))
