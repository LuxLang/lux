(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\spec
      ["$." equivalence]
      ["$." monoid]
      ["$." fold]
      ["$." functor (#+ Injection)]]]
    [data
     ["." bit]
     ["." maybe]
     [collection
      ["." list]
      ["." set]]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." / (#+ Array)]])

(def: injection
  (Injection Array)
  (|>> list /.from_list))

(def: bounded_size
  (Random Nat)
  (\ random.monad map (|>> (n.% 100) (n.+ 1))
     random.nat))

(def: structures
  Test
  (do {! random.monad}
    [size ..bounded_size]
    ($_ _.and
        (_.for [/.equivalence]
               ($equivalence.spec (/.equivalence n.equivalence) (random.array size random.nat)))
        (_.for [/.monoid]
               ($monoid.spec (/.equivalence n.equivalence) /.monoid (random.array size random.nat)))
        (_.for [/.functor]
               ($functor.spec ..injection /.equivalence /.functor))
        (_.for [/.fold]
               ($fold.spec ..injection /.equivalence /.fold))
        )))

(def: search
  Test
  (do {! random.monad}
    [size ..bounded_size
     base random.nat
     shift random.nat
     #let [expected (n.+ base shift)]
     the_array (random.array size random.nat)]
    ($_ _.and
        (_.cover [/.find]
                 (\ (maybe.equivalence n.equivalence) =
                    (/.find n.even? the_array)
                    (list.find n.even? (/.to_list the_array))))
        (_.cover [/.find+]
                 (case [(/.find n.even? the_array)
                        (/.find+ (function (_ idx member)
                                   (n.even? member))
                                 the_array)]
                   [(#.Some expected) (#.Some [idx actual])]
                   (case (/.read idx the_array)
                     (#.Some again)
                     (and (n.= expected actual)
                          (n.= actual again))
                     
                     #.None
                     false)

                   [#.None #.None]
                   true

                   _
                   false))
        (_.cover [/.every?]
                 (\ bit.equivalence =
                    (list.every? n.even? (/.to_list the_array))
                    (/.every? n.even? the_array)))
        (_.cover [/.any?]
                 (\ bit.equivalence =
                    (list.any? n.even? (/.to_list the_array))
                    (/.any? n.even? the_array)))
        )))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Array])
      (do {! random.monad}
        [size ..bounded_size
         base random.nat
         shift random.nat
         dummy (random.filter (|>> (n.= base) not) random.nat)
         #let [expected (n.+ base shift)]
         the_array (random.array size random.nat)]
        ($_ _.and
            ..structures
            ..search

            (_.cover [/.new /.size]
                     (n.= size (/.size (: (Array Nat)
                                          (/.new size)))))
            (_.cover [/.type_name]
                     (case /.Array
                       (^ (#.Named _ (#.UnivQ _ (#.Primitive nominal_type (list (#.Parameter 1))))))
                       (is? /.type_name nominal_type)

                       _
                       false))
            (_.cover [/.read /.write!]
                     (let [the_array (|> (/.new 2)
                                         (: (Array Nat))
                                         (/.write! 0 expected))]
                       (case [(/.read 0 the_array)
                              (/.read 1 the_array)]
                         [(#.Some actual) #.None]
                         (n.= expected actual)

                         _
                         false)))
            (_.cover [/.delete!]
                     (let [the_array (|> (/.new 1)
                                         (: (Array Nat))
                                         (/.write! 0 expected))]
                       (case [(/.read 0 the_array)
                              (/.read 0 (/.delete! 0 the_array))]
                         [(#.Some actual) #.None]
                         (n.= expected actual)

                         _
                         false)))
            (_.cover [/.contains?]
                     (let [the_array (|> (/.new 2)
                                         (: (Array Nat))
                                         (/.write! 0 expected))]
                       (and (/.contains? 0 the_array)
                            (not (/.contains? 1 the_array)))))
            
            (_.cover [/.update!]
                     (let [the_array (|> (/.new 1)
                                         (: (Array Nat))
                                         (/.write! 0 base)
                                         (/.update! 0 (n.+ shift)))]
                       (case (/.read 0 the_array)
                         (#.Some actual)
                         (n.= expected actual)

                         _
                         false)))
            (_.cover [/.upsert!]
                     (let [the_array (|> (/.new 2)
                                         (: (Array Nat))
                                         (/.write! 0 base)
                                         (/.upsert! 0 dummy (n.+ shift))
                                         (/.upsert! 1 base (n.+ shift)))]
                       (case [(/.read 0 the_array)
                              (/.read 1 the_array)]
                         [(#.Some actual/0) (#.Some actual/1)]
                         (and (n.= expected actual/0)
                              (n.= expected actual/1))

                         _
                         false)))
            (do !
              [occupancy (\ ! map (n.% (inc size)) random.nat)]
              (_.cover [/.occupancy /.vacancy]
                       (let [the_array (loop [output (: (Array Nat)
                                                        (/.new size))
                                              idx 0]
                                         (if (n.< occupancy idx)
                                           (recur (/.write! idx expected output)
                                                  (inc idx))
                                           output))]
                         (and (n.= occupancy (/.occupancy the_array))
                              (n.= size (n.+ (/.occupancy the_array)
                                             (/.vacancy the_array)))))))
            (do !
              [the_list (random.list size random.nat)]
              (_.cover [/.from_list /.to_list]
                       (and (|> the_list /.from_list /.to_list
                                (\ (list.equivalence n.equivalence) = the_list))
                            (|> the_array /.to_list /.from_list
                                (\ (/.equivalence n.equivalence) = the_array)))))
            (do !
              [amount (\ ! map (n.% (inc size)) random.nat)]
              (_.cover [/.copy!]
                       (let [copy (: (Array Nat)
                                     (/.new size))]
                         (exec (/.copy! amount 0 the_array 0 copy)
                           (\ (list.equivalence n.equivalence) =
                              (list.take amount (/.to_list the_array))
                              (/.to_list copy))))))
            (_.cover [/.clone]
                     (let [clone (/.clone the_array)]
                       (and (not (is? the_array clone))
                            (\ (/.equivalence n.equivalence) = the_array clone))))
            (let [the_array (/.clone the_array)
                  evens (|> the_array /.to_list (list.filter n.even?))
                  odds (|> the_array /.to_list (list.filter n.odd?))]
              (_.cover [/.filter!]
                       (exec (/.filter! n.even? the_array)
                         (and (n.= (list.size evens) (/.occupancy the_array))
                              (n.= (list.size odds) (/.vacancy the_array))
                              (|> the_array /.to_list (\ (list.equivalence n.equivalence) = evens))))))
            (do !
              [#let [the_array (/.clone the_array)
                     members (|> the_array /.to_list (set.from_list n.hash))]
               default (random.filter (function (_ value)
                                        (not (or (n.even? value)
                                                 (set.member? members value))))
                                      random.nat)]
              (_.cover [/.to_list']
                       (exec (/.filter! n.even? the_array)
                         (list.every? (function (_ value)
                                        (or (n.even? value)
                                            (is? default value)))
                                      (/.to_list' default the_array)))))
            ))))
