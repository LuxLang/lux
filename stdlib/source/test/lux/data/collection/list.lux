(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     ["." enum]
     [\\specification
      ["$." equivalence]
      ["$." hash]
      ["$." monoid]
      ["$." fold]
      ["$." functor]
      ["$." apply]
      ["$." monad]]]
    [control
     pipe
     ["." io]
     ["." maybe]
     ["." function]]
    [data
     ["." bit]
     ["." product]
     ["." text ("#\." equivalence)]
     [collection
      ["." set]]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]
      ["." int]]]]]
  [\\library
   ["." / ("#\." monad)]])

(def: bounded_size
  (Random Nat)
  (\ random.monad map (n.% 100)
     random.nat))

(def: random
  (Random (List Nat))
  (do {! random.monad}
    [size ..bounded_size]
    (|> random.nat
        (random.set n.hash size)
        (\ ! map set.list))))

(def: signatures
  Test
  ($_ _.and
      (_.for [/.equivalence]
             ($equivalence.spec (/.equivalence n.equivalence) ..random))
      (_.for [/.hash]
             (|> random.nat
                 (\ random.monad map (|>> list))
                 ($hash.spec (/.hash n.hash))))
      (_.for [/.monoid]
             ($monoid.spec (/.equivalence n.equivalence) /.monoid ..random))
      (_.for [/.fold]
             ($fold.spec /\in /.equivalence /.fold))
      (_.for [/.functor]
             ($functor.spec /\in /.equivalence /.functor))
      (_.for [/.apply]
             ($apply.spec /\in /.equivalence /.apply))
      (_.for [/.monad]
             ($monad.spec /\in /.equivalence /.monad))

      (do {! random.monad}
        [parameter random.nat
         subject random.nat]
        (let [lift (/.lift io.monad)
              (^open "io\.") io.monad
              expected (n.+ parameter subject)]
          (_.cover [/.with /.lift]
                   (|> (io.run! (do (/.with io.monad)
                                  [a (lift (io\in parameter))
                                   b (in subject)]
                                  (in (n.+ a b))))
                       (case> (^ (list actual))
                              (n.= expected actual)
                              
                              _
                              false)))))
      ))

(def: whole
  Test
  (do {! random.monad}
    [size ..bounded_size
     .let [(^open "/\.") (/.equivalence n.equivalence)]
     sample (\ ! map set.list (random.set n.hash size random.nat))]
    ($_ _.and
        (_.cover [/.size]
                 (n.= size (/.size sample)))
        (_.cover [/.empty?]
                 (\ bit.equivalence =
                    (/.empty? sample)
                    (n.= 0 (/.size sample))))
        (_.cover [/.repeated]
                 (n.= size (/.size (/.repeated size []))))
        (_.cover [/.reversed]
                 (or (n.< 2 (/.size sample))
                     (let [not_same!
                           (not (/\= sample
                                     (/.reversed sample)))

                           self_symmetry!
                           (/\= sample
                                (/.reversed (/.reversed sample)))]
                       (and not_same!
                            self_symmetry!))))
        (_.cover [/.every? /.any?]
                 (if (/.every? n.even? sample)
                   (not (/.any? (bit.complement n.even?) sample))
                   (/.any? (bit.complement n.even?) sample)))
        (_.cover [/.sorted]
                 (let [<<< n.<
                       
                       size_preservation!
                       (n.= (/.size sample)
                            (/.size (/.sorted <<< sample)))
                       
                       symmetry!
                       (/\= (/.sorted <<< sample)
                            (/.reversed (/.sorted (function.flipped <<<) sample)))]
                   (and size_preservation!
                        symmetry!)))
        )))

(def: indices
  Test
  (let [(^open "/\.") (/.equivalence n.equivalence)
        (^open "/\.") /.functor]
    (do {! random.monad}
      [sample ..random
       .let [size (/.size sample)]]
      ($_ _.and
          (_.cover [/.indices]
                   (let [indices (/.indices size)

                         expected_amount!
                         (n.= size (/.size indices))

                         already_sorted!
                         (/\= indices
                              (/.sorted n.< indices))

                         expected_numbers!
                         (/.every? (n.= (dec size))
                                   (/.zipped_with/2 n.+
                                                    indices
                                                    (/.sorted n.> indices)))]
                     (and expected_amount!
                          already_sorted!
                          expected_numbers!)))
          (_.cover [/.enumeration]
                   (let [enumeration (/.enumeration sample)

                         has_correct_indices!
                         (/\= (/.indices (/.size enumeration))
                              (/\map product.left enumeration))

                         has_correct_values!
                         (/\= sample
                              (/\map product.right enumeration))]
                     (and has_correct_indices!
                          has_correct_values!)))
          (_.cover [/.item]
                   (/.every? (function (_ [index expected])
                               (case (/.item index sample)
                                 (#.Some actual)
                                 (n.= expected actual)
                                 
                                 #.None
                                 false))
                             (/.enumeration sample)))
          ))))

(def: slice
  Test
  (let [(^open "/\.") (/.equivalence n.equivalence)
        (^open "/\.") /.monoid]
    (do {! random.monad}
      [sample (random.only (|>> /.size (n.> 0))
                           ..random)
       .let [size (/.size sample)]
       idx (\ ! map (n.% size) random.nat)
       sub_size (\ ! map (|>> (n.% size) inc) random.nat)]
      ($_ _.and
          (_.cover [/.only]
                   (let [positives (/.only n.even? sample)
                         negatives (/.only (bit.complement n.even?) sample)]
                     (and (/.every? n.even? positives)
                          (not (/.any? n.even? negatives))

                          (n.= (/.size sample)
                               (n.+ (/.size positives)
                                    (/.size negatives))))))
          (_.cover [/.partition]
                   (let [[positives negatives] (/.partition n.even? sample)]
                     (and (/\= (/.only n.even? sample)
                               positives)
                          (/\= (/.only (bit.complement n.even?) sample)
                               negatives))))
          (_.cover [/.split]
                   (let [[left right] (/.split idx sample)]
                     (/\= sample
                          (/\compose left right))))
          (_.cover [/.split_when]
                   (let [[left right] (/.split_when n.even? sample)]
                     (/\= sample
                          (/\compose left right))))
          (_.cover [/.take /.drop]
                   (/\= sample
                        (/\compose (/.take idx sample)
                                   (/.drop idx sample))))
          (_.cover [/.while /.until]
                   (/\= sample
                        (/\compose (/.while n.even? sample)
                                   (/.until n.even? sample))))
          (_.cover [/.sub]
                   (let [subs (/.sub sub_size sample)]
                     (and (/.every? (|>> /.size (n.<= sub_size)) subs)
                          (/\= sample
                               (/.joined subs)))))
          ))))

(def: member
  Test
  (let [(^open "/\.") (/.equivalence n.equivalence)]
    (do {! random.monad}
      [sample ..random]
      (`` ($_ _.and
              (_.cover [/.member?]
                       (/.every? (/.member? n.equivalence sample)
                                 sample))
              (~~ (template [<head> <tail> <pre>]
                    [($_ _.and
                         (_.cover [<head>]
                                  (case [(<pre> sample) (<head> sample)]
                                    [(#.Item expected _) (#.Some actual)]
                                    (n.= expected actual)

                                    [#.End #.None]
                                    true

                                    _
                                    false))
                         (_.cover [<tail>]
                                  (case [(<pre> sample) (<tail> sample)]
                                    [(#.Item _ expected) (#.Some actual)]
                                    (/\= (<pre> expected) actual)

                                    [#.End #.None]
                                    true

                                    _
                                    false))
                         )]

                    [/.head /.tail |>]
                    [/.last /.inits /.reversed]
                    ))
              )))))

(def: grouping
  Test
  (let [(^open "/\.") (/.equivalence n.equivalence)
        (^open "/\.") /.functor
        (^open "/\.") /.monoid
        
        +/2 (: (-> Nat Nat Nat)
               (function (_ left right)
                 ($_ n.+ left right)))
        +/3 (: (-> Nat Nat Nat Nat)
               (function (_ left mid right)
                 ($_ n.+ left mid right)))]
    (do {! random.monad}
      [sample/0 ..random
       sample/1 ..random
       sample/2 ..random]
      ($_ _.and
          (_.cover [/.pairs]
                   (n.= (n./ 2 (/.size sample/0))
                        (/.size (/.pairs sample/0))))
          (_.cover [/.zipped/2]
                   (let [zipped (/.zipped/2 sample/0 sample/1)
                         zipped::size (/.size zipped)

                         size_of_smaller_list!
                         (n.= zipped::size
                              (n.min (/.size sample/0) (/.size sample/1)))

                         can_extract_values!
                         (and (/\= (/.take zipped::size sample/0)
                                   (/\map product.left zipped))
                              (/\= (/.take zipped::size sample/1)
                                   (/\map product.right zipped)))]
                     (and size_of_smaller_list!
                          can_extract_values!)))
          (_.cover [/.zipped/3]
                   (let [zipped (/.zipped/3 sample/0 sample/1 sample/2)
                         zipped::size (/.size zipped)
                         
                         size_of_smaller_list!
                         (n.= zipped::size
                              ($_ n.min
                                  (/.size sample/0)
                                  (/.size sample/1)
                                  (/.size sample/2)))

                         can_extract_values!
                         (and (/\= (/.take zipped::size sample/0)
                                   (/\map product.left zipped))
                              (/\= (/.take zipped::size sample/1)
                                   (/\map (|>> product.right product.left) zipped))
                              (/\= (/.take zipped::size sample/2)
                                   (/\map (|>> product.right product.right) zipped)))]
                     (and size_of_smaller_list!
                          can_extract_values!)))
          (_.cover [/.zipped]
                   (and (\ (/.equivalence (product.equivalence n.equivalence n.equivalence)) =
                           (/.zipped/2 sample/0 sample/1)
                           ((/.zipped 2) sample/0 sample/1))
                        (\ (/.equivalence ($_ product.equivalence n.equivalence n.equivalence n.equivalence)) =
                           (/.zipped/3 sample/0 sample/1 sample/2)
                           ((/.zipped 3) sample/0 sample/1 sample/2))))

          (_.cover [/.zipped_with/2]
                   (/\= (/\map (function (_ [left right])
                                 (+/2 left right))
                               (/.zipped/2 sample/0 sample/1))
                        (/.zipped_with/2 +/2 sample/0 sample/1)))
          (_.cover [/.zipped_with/3]
                   (/\= (/\map (function (_ [left mid right])
                                 (+/3 left mid right))
                               (/.zipped/3 sample/0 sample/1 sample/2))
                        (/.zipped_with/3 +/3 sample/0 sample/1 sample/2)))
          (_.cover [/.zipped_with]
                   (and (/\= (/.zipped_with/2 +/2 sample/0 sample/1)
                             ((/.zipped_with 2) +/2 sample/0 sample/1))
                        (/\= (/.zipped_with/3 +/3 sample/0 sample/1 sample/2)
                             ((/.zipped_with 3) +/3 sample/0 sample/1 sample/2))))
          (_.cover [/.joined]
                   (and (/\= (/\compose sample/0 sample/1)
                             (/.joined (list sample/0 sample/1)))
                        (/\= ($_ /\compose sample/0 sample/1 sample/2)
                             (/.joined (list sample/0 sample/1 sample/2)))))
          ))))

(def: search
  Test
  (let [(^open "/\.") /.functor
        
        choose (: (-> Nat (Maybe Text))
                  (function (_ value)
                    (if (n.even? value)
                      (#.Some (\ n.decimal encode value))
                      #.None)))]
    (do {! random.monad}
      [sample ..random]
      ($_ _.and
          (_.cover [/.one]
                   (case [(|> sample
                              (/.only n.even?)
                              (/\map (\ n.decimal encode))
                              /.head)
                          (/.one choose sample)]
                     [(#.Some expected) (#.Some actual)]
                     (text\= expected actual)

                     [#.None #.None]
                     true

                     _
                     false))
          (_.cover [/.all]
                   (\ (/.equivalence text.equivalence) =
                      (|> sample
                          (/.only n.even?)
                          (/\map (\ n.decimal encode)))
                      (/.all choose sample)))
          (_.cover [/.example]
                   (case (/.example n.even? sample)
                     (#.Some found)
                     (n.even? found)

                     #.None
                     (not (/.any? n.even? sample))))
          ))))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [.List])
      (let [(^open "/\.") (/.equivalence n.equivalence)
            (^open "/\.") /.functor]
        (do {! random.monad}
          [sample ..random
           separator random.nat]
          ($_ _.and
              ..signatures
              ..whole
              ..indices
              ..slice
              ..member
              ..grouping
              ..search
              
              (_.cover [/.interposed]
                       (or (/.empty? sample)
                           (let [sample+ (/.interposed separator sample)]
                             (and (n.= (|> (/.size sample) (n.* 2) dec)
                                       (/.size sample+))
                                  (|> sample+ /.pairs (/.every? (|>> product.right (n.= separator))))))))
              (_.cover [/.iterations]
                       (or (/.empty? sample)
                           (let [size (/.size sample)]
                             (/\= (/.indices size)
                                  (/.iterations (function (_ index)
                                                  (if (n.< size index)
                                                    (#.Some (inc index))
                                                    #.None))
                                                0)))))
              (_.cover [/.folds]
                       (/\= (/\map (function (_ index)
                                     (\ /.fold fold n.+ 0 (/.take index sample)))
                                   (/.indices (inc (/.size sample))))
                            (/.folds n.+ 0 sample)))
              (do random.monad
                [expected random.nat
                 .let [(^open "/\.") (/.equivalence n.equivalence)]]
                (_.cover [/.when]
                         (and (/\= (list expected) (/.when true (list expected)))
                              (/\= (list) (/.when false (list expected))))))
              )))))
