... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [function
    [poly
     [type
      ["[0]" mix
       ["[1]T" \\test]]]]]
   ["[0]" error (.only)
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]]
   [data
    ["[0]" any]
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" set]
     ["[0]" stack]
     ["[0]" array]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]
   [aspect
    ["[0]" view (.only)
     ["[1]T" \\test]]
    ["[0]" case (.only)
     ["[1]T" \\test]]]
   [control
    ["[0]" pure (.only Pure)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" \\projection]
 ["[0]" /
  ["[1][0]" property]
  ["[1][0]" slice]])

(the \\projection
  Test
  (<| (_.covering \\projection._)
      (_.for [\\projection.Projection
              \\projection.value])
      (monad.let random.monad
        [left random.natural
         right (random.only (|>> (n.= left) not)
                            random.natural)])
      (all _.and
           (_.coverage [\\projection.any]
             (|> \\projection.any
                 (\\projection.value (list left))
                 (try#each (same? left))
                 (try.else false)))
           (_.coverage [\\projection.not_available]
             (|> \\projection.any
                 (\\projection.value (list))
                 (try.is? \\projection.not_available)))
           (_.coverage [\\projection.not_consumed]
             (|> \\projection.any
                 (\\projection.value (list left right))
                 (try.is? \\projection.not_consumed)))
           )))

(the .public test
  Test
  (<| (_.covering /._)
      (with (/.equivalence n.equivalence))
      (monad.let [! random.monad]
        [expected_size (by ! each (|>> (n.% 100) ++) random.natural)
         .let [within_range (by ! each (n.% (++ expected_size)) random.natural)]
         cut_off within_range
         size_of_complete_segment within_range
         .let [random_list (is (Random (List Natural))
                               (|> random.natural
                                   (random.set n.hash expected_size)
                                   (by ! each set.as_list)))]
         expected_list random_list
         alternative_list (random.only (|>> (= expected_list) not)
                                       random_list)
         expected_value (random.only (|>> (/.member? n.= expected_list) not)
                                     random.natural)
         arbitrary_member (by ! each (n.% expected_size) random.natural)
         difference random.natural])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec (/.equivalence n.equivalence) random_list))
           (_.for [/.hash]
                  (|> random.natural
                      (by random.monad each (by /.monad pure))
                      (hashT.spec (/.hash n.hash))))
           (_.for [/.monoid]
                  (monoidT.spec (/.equivalence n.equivalence) /.monoid random_list))
           (_.for [/.mix]
                  (mixT.spec (by /.monad pure) /.equivalence /.mix))
           (_.for [/.functor]
                  (functorT.spec (by /.monad pure) /.equivalence /.functor))
           (_.for [/.monad]
                  (monadT.spec (by /.monad pure) /.equivalence /.monad))
           (_.for [/.stack]
                  (monad.let [! random.monad]
                    [size (by ! each (n.% 10) random.natural)]
                    (viewT.specification /.stack
                                         (/.equivalence n.equivalence)
                                         (stack.equivalence n.equivalence)
                                         
                                         (random.list size random.natural)
                                         (random.stack size random.natural))))
           
           (_.coverage [/.size]
             (n.= expected_size
                  (/.size expected_list)))
           (_.coverage [/.empty?]
             (bit.= (n.= 0 (/.size expected_list))
                    (/.empty? expected_list)))
           (_.coverage [/.empty]
             (/.empty? /.empty))
           (_.coverage [/.reversed]
             (and (|> expected_list
                      /.reversed
                      /.reversed
                      (= expected_list))
                  (bit.= (n.< 2 (/.size expected_list))
                         (by (/.equivalence n.equivalence) =
                             expected_list
                             (/.reversed expected_list)))))
           (_.coverage [/.first /.after /.split]
             (let [before (/.first cut_off expected_list)
                   after (/.after cut_off expected_list)
                   [before' after'] (/.split cut_off expected_list)]
               (and (n.= cut_off (/.size before))
                    (n.= (n.- cut_off expected_size) (/.size after))
                    (= expected_list (by /.monoid composite before after))
                    (= before before')
                    (= after after'))))
           (_.coverage [/.repeated /.every?]
             (let [it (/.repeated expected_size expected_value)]
               (and (n.= expected_size (/.size it))
                    (/.every? (same? expected_value) it))))
           (_.coverage [/.interposed /.any? /.member? /.only]
             (let [it (/.interposed expected_value expected_list)
                   expected_additions (-- expected_size)]
               (and (n.= (n.+ expected_additions expected_size)
                         (/.size it))
                    (bit.= (n.> 0 expected_additions)
                           (and (/.any? (n.= expected_value) it)
                                (/.member? n.= it expected_value)))
                    (= expected_list (/.only (|>> (n.= expected_value) not) it))
                    (= (/.repeated expected_additions expected_value)
                       (/.only (n.= expected_value) it)))))
           (_.coverage [/.item /.dynamic]
             (let [[actual_size copy] (/.dynamic (function (_ index)
                                                   (monad.let try.monad
                                                     [it (/.item index expected_list)]
                                                     (pure [(++ index) it])))
                                                 0)]
               (and (n.= expected_size actual_size)
                    (= expected_list copy))))
           (_.coverage [/.indices /.static]
             (let [[actual_size expected_indices] (/.static expected_size
                                                            (function (_ index)
                                                              [(++ index) index])
                                                            0)]
               (and (n.= expected_size actual_size)
                    (= expected_indices
                       (/.indices expected_size)))))
           (_.coverage [/.enumeration]
             (let [it (/.enumeration expected_list)]
               (and (= (/.indices expected_size)
                       (by /.functor each product.left it))
                    (= expected_list
                       (by /.functor each product.right it)))))
           (_.coverage [/.zipped_2]
             (by (/.equivalence (product.equivalence n.equivalence n.equivalence)) =
                 (/.zipped_2 (/.indices expected_size) expected_list)
                 (/.enumeration expected_list)))
           (_.coverage [/.as_text]
             (bit.= (= expected_list
                       alternative_list)
                    (text.= (/.as_text %.natural expected_list)
                            (/.as_text %.natural alternative_list))))
           (_.coverage [/.sub]
             (let [it (/.sub size_of_complete_segment expected_list)]
               (when size_of_complete_segment
                 0 (by (/.equivalence =) = /.empty it)
                 _ (and (/.every? (|>> /.size (n.<= size_of_complete_segment))
                                  it)
                        (= expected_list (by /.monad conjoint it))))))
           (_.coverage [/.sorted]
             (let [less_up_to_more (/.sorted n.< expected_list)
                   more_up_to_less (/.sorted n.> expected_list)]
               (and (n.= (/.size expected_list)
                         (/.size less_up_to_more))
                    (set.= (set.of_list n.hash expected_list)
                           (set.of_list n.hash less_up_to_more))
                    (when (view.as /.stack less_up_to_more)
                      {.#Empty}
                      true

                      {.#Top reference terms}
                      (product.left (stack.mix (function (_ more [so_far less])
                                                 [(and so_far
                                                       (n.< more less))
                                                  more])
                                               [true reference]
                                               terms)))
                    (= less_up_to_more
                       (/.reversed more_up_to_less)))))
           (_.coverage [/.has]
             (let [can_change!
                   (|> expected_list
                       (/.has arbitrary_member expected_value)
                       (.list_item# arbitrary_member)
                       (same? expected_value))

                   can_expand!
                   (let [expansion (/.has expected_size expected_value expected_list)]
                     (and (|> expansion
                              (.list_item# expected_size)
                              (same? expected_value))
                          (n.= (++ expected_size) (/.size expansion))))

                   cannot_over_expand!
                   (|> expected_list
                       (/.has (++ expected_size) expected_value)
                       (= expected_list))]
               (and can_change!
                    can_expand!
                    cannot_over_expand!)))
           (_.coverage [/.lacks]
             (let [inverse_of_has!
                   (|> expected_list
                       (/.has expected_size expected_value)
                       (/.lacks expected_size)
                       (= expected_list))

                   at_any_position!
                   (= (with /.monoid
                        (composite (/.first arbitrary_member expected_list)
                                   (/.after (++ arbitrary_member) expected_list)))
                      (/.lacks arbitrary_member expected_list))

                   cannot_over_reduce!
                   (|> expected_list
                       (/.has (++ expected_size) expected_value)
                       (= expected_list))]
               (and inverse_of_has!
                    at_any_position!
                    cannot_over_reduce!)))
           (_.coverage [/.revised]
             (with n.equivalence
               (= (|> expected_list
                      (.list_item# arbitrary_member)
                      (n.+ difference))
                  (|> expected_list
                      (/.revised arbitrary_member (n.+ difference))
                      (.list_item# arbitrary_member)))))
           (_.coverage [/.when]
             (and (= (list)
                     (/.when false expected_list))
                  (= expected_list
                     (/.when true expected_list))))
           (_.coverage [/.example]
             (with (try.equivalence n.equivalence)
               (and (= {try.#Failure error.not_valid}
                       (/.example (same? expected_value) expected_list))
                    (= {try.#Success expected_value}
                       (/.example (same? expected_value)
                                  (/.has 0 expected_value expected_list))))))
           (_.coverage [/.one]
             (let [choice (is (-> Natural
                                  (Maybe Natural))
                              (function (_ it)
                                (if (same? expected_value it)
                                    {.#Some (++ expected_value)}
                                    {.#None})))]
               (with (try.equivalence n.equivalence)
                 (and (= {try.#Failure error.not_valid}
                         (/.one choice expected_list))
                      (= {try.#Success (++ expected_value)}
                         (/.one choice
                                (/.has 0 expected_value expected_list)))))))
           (_.coverage [/.only']
             (and (= (/.only n.even? expected_list)
                     (is (Pure (List Natural))
                         (/.only' pure.monad n.even? expected_list)))
                  (= (/.only n.odd? expected_list)
                     (is (Pure (List Natural))
                         (/.only' pure.monad n.odd? expected_list)))))
           (_.coverage [/.mix']
             (with n.equivalence
               (= (/.mix n.- 0 expected_list)
                  (is (Pure Natural)
                      (/.mix' pure.monad
                              (function (_ next total)
                                (by pure.monad pure (n.- next total)))
                              0
                              expected_list)))))
           (_.coverage [/.one']
             (let [choice (is (-> Natural
                                  (Maybe Natural))
                              (function (_ it)
                                (if (same? expected_value it)
                                    {.#Some (++ expected_value)}
                                    {.#None})))]
               (with (try.equivalence n.equivalence)
                 (and (= (/.one choice expected_list)
                         (is (Pure (Try Natural))
                             (/.one' pure.monad choice expected_list)))
                      (let [expected_list (/.has 0 expected_value expected_list)]
                        (= (/.one choice expected_list)
                           (is (Pure (Try Natural))
                               (/.one' pure.monad choice expected_list))))))))
           (_.coverage [/.each']
             (= (by /.functor each (n.+ difference) expected_list)
                (is (Pure (List Natural))
                    (/.each' pure.monad
                             (|>> (n.+ difference)
                                  (by pure.monad pure))
                             expected_list))))
           (_.coverage [/.complete]
             (with pure.monad
               (= (is (Pure (List Natural))
                      (pure expected_list))
                  (is (Pure (List Natural))
                      (|> expected_list
                          (by /.functor each pure)
                          (/.complete pure.monad))))))
           (_.coverage [/.all]
             (= (/.only n.even? expected_list)
                (/.all (function (_ it)
                         (if (n.even? it)
                             {.#Some it}
                             {.#None}))
                       expected_list)))
           (_.coverage [/.of_array]
             (and (|> (array.empty expected_size)
                      (/.of_array {.#None})
                      (= (list)))
                  (|> (array.empty expected_size)
                      (/.of_array {.#Some expected_value})
                      (= (/.repeated expected_size expected_value)))))
           (_.coverage [/.as_array]
             (|> expected_list
                 /.as_array
                 (/.of_array {.#None})
                 (= expected_list)))
           (_.coverage [/.partition]
             (let [[every_even every_odd] (/.partition n.even? expected_list)]
               (and (= (/.only n.even? expected_list)
                       every_even)
                    (= (/.only n.odd? expected_list)
                       every_odd))))
           (_.coverage [/.every_mix]
             (= (by /.functor each
                    (function (_ size)
                      (/.mix n.+ 0 (/.first size expected_list)))
                    (/.indices (++ (/.size expected_list))))
                (/.every_mix n.+ 0 expected_list)))

           ..\\projection
           /property.test
           /slice.test
           )))
