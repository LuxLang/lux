(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    ["[0]" enum]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" hash]
     ["$[0]" monoid]
     ["$[0]" mix]
     ["$[0]" functor]
     ["$[0]" apply]
     ["$[0]" monad]]]
   [control
    ["[0]" pipe]
    ["[0]" io]
    ["[0]" maybe]
    ["[0]" function]]
   [data
    ["[0]" bit]
    ["[0]" product]
    ["[0]" text (.open: "[1]#[0]" equivalence)]
    [collection
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]
     ["[0]" int]]]]]
 [\\library
  ["[0]" / (.open: "[1]#[0]" monad)]])

(def bounded_size
  (Random Nat)
  (at random.monad each (n.% 100)
      random.nat))

(def random
  (Random (List Nat))
  (do [! random.monad]
    [size ..bounded_size]
    (|> random.nat
        (random.set n.hash size)
        (at ! each set.list))))

(def signatures
  Test
  (all _.and
       (_.for [/.equivalence]
              ($equivalence.spec (/.equivalence n.equivalence) ..random))
       (_.for [/.hash]
              (|> random.nat
                  (at random.monad each (|>> list))
                  ($hash.spec (/.hash n.hash))))
       (_.for [/.monoid]
              ($monoid.spec (/.equivalence n.equivalence) /.monoid ..random))
       (_.for [/.mix]
              ($mix.spec /#in /.equivalence /.mix))
       (_.for [/.functor]
              ($functor.spec /#in /.equivalence /.functor))
       (_.for [/.apply]
              ($apply.spec /#in /.equivalence /.apply))
       (_.for [/.monad]
              ($monad.spec /#in /.equivalence /.monad))

       (do [! random.monad]
         [parameter random.nat
          subject random.nat]
         (let [lifted (/.lifted io.monad)
               (open "io#[0]") io.monad
               expected (n.+ parameter subject)]
           (_.coverage [/.with /.lifted]
             (|> (io.run! (do (/.with io.monad)
                            [a (lifted (io#in parameter))
                             b (in subject)]
                            (in (n.+ a b))))
                 (pipe.case
                   (pattern (list actual))
                   (n.= expected actual)
                   
                   _
                   false)))))
       ))

(def whole
  Test
  (do [! random.monad]
    [size ..bounded_size
     .let [(open "/#[0]") (/.equivalence n.equivalence)]
     sample (at ! each set.list (random.set n.hash size random.nat))]
    (all _.and
         (_.coverage [/.size]
           (n.= size (/.size sample)))
         (_.coverage [/.empty?]
           (at bit.equivalence =
               (/.empty? sample)
               (n.= 0 (/.size sample))))
         (_.coverage [/.repeated]
           (n.= size (/.size (/.repeated size []))))
         (_.coverage [/.reversed]
           (or (n.< 2 (/.size sample))
               (let [not_same!
                     (not (/#= sample
                               (/.reversed sample)))

                     self_symmetry!
                     (/#= sample
                          (/.reversed (/.reversed sample)))]
                 (and not_same!
                      self_symmetry!))))
         (_.coverage [/.every? /.any?]
           (if (/.every? n.even? sample)
             (not (/.any? (bit.complement n.even?) sample))
             (/.any? (bit.complement n.even?) sample)))
         (_.coverage [/.sorted]
           (let [<<< n.<
                 
                 size_preservation!
                 (n.= (/.size sample)
                      (/.size (/.sorted <<< sample)))
                 
                 symmetry!
                 (/#= (/.sorted <<< sample)
                      (/.reversed (/.sorted (function.flipped <<<) sample)))]
             (and size_preservation!
                  symmetry!)))
         )))

(def indices
  Test
  (let [(open "/#[0]") (/.equivalence n.equivalence)
        (open "/#[0]") /.functor]
    (do [! random.monad]
      [sample ..random
       .let [size (/.size sample)]]
      (all _.and
           (_.coverage [/.indices]
             (let [indices (/.indices size)

                   expected_amount!
                   (n.= size (/.size indices))

                   already_sorted!
                   (/#= indices
                        (/.sorted n.< indices))

                   expected_numbers!
                   (/.every? (n.= (-- size))
                             (/.zipped_with_2 n.+
                                              indices
                                              (/.sorted n.> indices)))]
               (and expected_amount!
                    already_sorted!
                    expected_numbers!)))
           (_.coverage [/.enumeration]
             (let [enumeration (/.enumeration sample)

                   has_correct_indices!
                   (/#= (/.indices (/.size enumeration))
                        (/#each product.left enumeration))

                   has_correct_values!
                   (/#= sample
                        (/#each product.right enumeration))]
               (and has_correct_indices!
                    has_correct_values!)))
           (_.coverage [/.item]
             (/.every? (function (_ [index expected])
                         (case (/.item index sample)
                           {.#Some actual}
                           (n.= expected actual)
                           
                           {.#None}
                           false))
                       (/.enumeration sample)))
           (do !
             [index (case size
                      0 random.nat
                      _ (at ! each (n.% size) random.nat))
              .let [changed? (/#= sample (/.revised index ++ sample))
                    same? (/#= sample (/.revised size ++ sample))]]
             (_.coverage [/.revised]
               (case size
                 0 (and changed?
                        same?)
                 _ (not changed?))))
           ))))

(def slice
  Test
  (let [(open "/#[0]") (/.equivalence n.equivalence)
        (open "/#[0]") /.monoid]
    (do [! random.monad]
      [sample (random.only (|>> /.size (n.> 0))
                           ..random)
       .let [size (/.size sample)]
       idx (at ! each (n.% size) random.nat)
       sub_size (at ! each (|>> (n.% size) ++) random.nat)]
      (all _.and
           (_.coverage [/.only]
             (let [positives (/.only n.even? sample)
                   negatives (/.only (bit.complement n.even?) sample)]
               (and (/.every? n.even? positives)
                    (not (/.any? n.even? negatives))

                    (n.= (/.size sample)
                         (n.+ (/.size positives)
                              (/.size negatives))))))
           (_.coverage [/.partition]
             (let [[positives negatives] (/.partition n.even? sample)]
               (and (/#= (/.only n.even? sample)
                         positives)
                    (/#= (/.only (bit.complement n.even?) sample)
                         negatives))))
           (_.coverage [/.split_at]
             (let [[left right] (/.split_at idx sample)]
               (/#= sample
                    (/#composite left right))))
           (_.coverage [/.split_when]
             (let [[left right] (/.split_when n.even? sample)]
               (/#= sample
                    (/#composite left right))))
           (_.coverage [/.first /.after]
             (/#= sample
                  (/#composite (/.first idx sample)
                               (/.after idx sample))))
           (_.coverage [/.while /.until]
             (/#= sample
                  (/#composite (/.while n.even? sample)
                               (/.until n.even? sample))))
           (_.coverage [/.sub]
             (let [subs (/.sub sub_size sample)]
               (and (/.every? (|>> /.size (n.<= sub_size)) subs)
                    (/#= sample
                         (/.together subs)))))
           ))))

(def member
  Test
  (let [(open "/#[0]") (/.equivalence n.equivalence)]
    (do [! random.monad]
      [sample ..random]
      (`` (all _.and
               (_.coverage [/.member?]
                 (/.every? (/.member? n.equivalence sample)
                           sample))
               (~~ (with_template [<head> <tail> <pre>]
                     [(all _.and
                           (_.coverage [<head>]
                             (case [(<pre> sample) (<head> sample)]
                               [{.#Item expected _} {.#Some actual}]
                               (n.= expected actual)

                               [{.#End} {.#None}]
                               true

                               _
                               false))
                           (_.coverage [<tail>]
                             (case [(<pre> sample) (<tail> sample)]
                               [{.#Item _ expected} {.#Some actual}]
                               (/#= (<pre> expected) actual)

                               [{.#End} {.#None}]
                               true

                               _
                               false))
                           )]

                     [/.head /.tail |>]
                     [/.last /.inits /.reversed]
                     ))
               )))))

(def grouping
  Test
  (let [(open "/#[0]") (/.equivalence n.equivalence)
        (open "/#[0]") /.functor
        (open "/#[0]") /.monoid
        
        +/2 (is (-> Nat Nat Nat)
                (function (_ left right)
                  (all n.+ left right)))
        +/3 (is (-> Nat Nat Nat Nat)
                (function (_ left mid right)
                  (all n.+ left mid right)))]
    (do [! random.monad]
      [sample/0 ..random
       sample/1 ..random
       sample/2 ..random]
      (all _.and
           (_.coverage [/.pairs]
             (let [even_sized? (|> sample/0
                                   /.size
                                   (n.% 2)
                                   (n.= 0))]
               (case (/.pairs sample/0)
                 {.#Some pairs/0}
                 (and even_sized?
                      (n.= (n./ 2 (/.size sample/0))
                           (/.size pairs/0)))

                 {.#None}
                 (not even_sized?))))
           (_.coverage [/.zipped_2]
             (let [zipped (/.zipped_2 sample/0 sample/1)
                   zipped::size (/.size zipped)

                   size_of_smaller_list!
                   (n.= zipped::size
                        (n.min (/.size sample/0) (/.size sample/1)))

                   can_extract_values!
                   (and (/#= (/.first zipped::size sample/0)
                             (/#each product.left zipped))
                        (/#= (/.first zipped::size sample/1)
                             (/#each product.right zipped)))]
               (and size_of_smaller_list!
                    can_extract_values!)))
           (_.coverage [/.zipped_3]
             (let [zipped (/.zipped_3 sample/0 sample/1 sample/2)
                   zipped::size (/.size zipped)
                   
                   size_of_smaller_list!
                   (n.= zipped::size
                        (all n.min
                             (/.size sample/0)
                             (/.size sample/1)
                             (/.size sample/2)))

                   can_extract_values!
                   (and (/#= (/.first zipped::size sample/0)
                             (/#each product.left zipped))
                        (/#= (/.first zipped::size sample/1)
                             (/#each (|>> product.right product.left) zipped))
                        (/#= (/.first zipped::size sample/2)
                             (/#each (|>> product.right product.right) zipped)))]
               (and size_of_smaller_list!
                    can_extract_values!)))
           (_.coverage [/.zipped]
             (and (at (/.equivalence (product.equivalence n.equivalence n.equivalence)) =
                      (/.zipped_2 sample/0 sample/1)
                      ((/.zipped 2) sample/0 sample/1))
                  (at (/.equivalence (all product.equivalence n.equivalence n.equivalence n.equivalence)) =
                      (/.zipped_3 sample/0 sample/1 sample/2)
                      ((/.zipped 3) sample/0 sample/1 sample/2))))

           (_.coverage [/.zipped_with_2]
             (/#= (/#each (function (_ [left right])
                            (+/2 left right))
                          (/.zipped_2 sample/0 sample/1))
                  (/.zipped_with_2 +/2 sample/0 sample/1)))
           (_.coverage [/.zipped_with_3]
             (/#= (/#each (function (_ [left mid right])
                            (+/3 left mid right))
                          (/.zipped_3 sample/0 sample/1 sample/2))
                  (/.zipped_with_3 +/3 sample/0 sample/1 sample/2)))
           (_.coverage [/.zipped_with]
             (and (/#= (/.zipped_with_2 +/2 sample/0 sample/1)
                       ((/.zipped_with 2) +/2 sample/0 sample/1))
                  (/#= (/.zipped_with_3 +/3 sample/0 sample/1 sample/2)
                       ((/.zipped_with 3) +/3 sample/0 sample/1 sample/2))))
           (_.coverage [/.together]
             (and (/#= (/#composite sample/0 sample/1)
                       (/.together (list sample/0 sample/1)))
                  (/#= (all /#composite sample/0 sample/1 sample/2)
                       (/.together (list sample/0 sample/1 sample/2)))))
           ))))

(def search
  Test
  (let [(open "/#[0]") /.functor
        
        choice (is (-> Nat (Maybe Text))
                   (function (_ value)
                     (if (n.even? value)
                       {.#Some (at n.decimal encoded value)}
                       {.#None})))]
    (do [! random.monad]
      [sample ..random]
      (all _.and
           (_.coverage [/.one]
             (case [(|> sample
                        (/.only n.even?)
                        (/#each (at n.decimal encoded))
                        /.head)
                    (/.one choice sample)]
               [{.#Some expected} {.#Some actual}]
               (text#= expected actual)

               [{.#None} {.#None}]
               true

               _
               false))
           (_.coverage [/.all]
             (at (/.equivalence text.equivalence) =
                 (|> sample
                     (/.only n.even?)
                     (/#each (at n.decimal encoded)))
                 (/.all choice sample)))
           (_.coverage [/.example]
             (case (/.example n.even? sample)
               {.#Some found}
               (n.even? found)

               {.#None}
               (not (/.any? n.even? sample))))
           ))))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [.List])
      (let [(open "/#[0]") (/.equivalence n.equivalence)
            (open "/#[0]") /.functor]
        (do [! random.monad]
          [sample ..random
           separator random.nat]
          (all _.and
               ..signatures
               ..whole
               ..indices
               ..slice
               ..member
               ..grouping
               ..search
               
               (_.coverage [/.interposed]
                 (or (/.empty? sample)
                     (let [sample+ (/.interposed separator sample)]
                       (and (n.= (|> (/.size sample) (n.* 2) --)
                                 (/.size sample+))
                            (|> sample+
                                /.pairs
                                (maybe.else (list))
                                (/.every? (|>> product.right (n.= separator))))))))
               (_.coverage [/.iterations]
                 (or (/.empty? sample)
                     (let [size (/.size sample)]
                       (/#= (/.indices size)
                            (/.iterations (function (_ index)
                                            (if (n.< size index)
                                              {.#Some (++ index)}
                                              {.#None}))
                                          0)))))
               (_.coverage [/.mixes]
                 (/#= (/#each (function (_ index)
                                (at /.mix mix n.+ 0 (/.first index sample)))
                              (/.indices (++ (/.size sample))))
                      (/.mixes n.+ 0 sample)))
               (do random.monad
                 [expected random.nat
                  .let [(open "/#[0]") (/.equivalence n.equivalence)]]
                 (_.coverage [/.when]
                   (and (/#= (list expected) (/.when true (list expected)))
                        (/#= (list) (/.when false (list expected))))))
               )))))
