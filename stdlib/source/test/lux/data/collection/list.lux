... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence]]
   [error
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" any]
    ["[0]" bit]
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" set]
     ["[0]" stack]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]
   [aspect
    ["[0]" case (.only)
     ["[1]T" \\test]]]]]
 [\\library
  ["[0]" /]]
 ["[0]" \\projection]
 ["[0]" /
  ["[1][0]" property]])

(the \\projection
  Test
  (<| (_.covering \\projection._)
      (_.for [\\projection.Projection
              \\projection.value])
      (do random.monad
        [left random.natural
         right (random.only (|>> (n.= left) not)
                            random.natural)])
      (all _.and
           (_.coverage [\\projection.any]
             (|> \\projection.any
                 (\\projection.value (list left))
                 (try#each (same? left))
                 (try.else false)))
           (_.coverage [\\projection.not_available]
             (|> \\projection.any
                 (\\projection.value (list))
                 (try.is? \\projection.not_available)))
           (_.coverage [\\projection.not_consumed]
             (|> \\projection.any
                 (\\projection.value (list left right))
                 (try.is? \\projection.not_consumed)))
           )))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_size (by ! each (|>> (n.% 100) ++) random.natural)
         .let [within_range (by ! each (n.% (++ expected_size)) random.natural)]
         cut_off within_range
         size_of_complete_segment within_range
         .let [random_list (is (Random (List Natural))
                               (|> random.natural
                                   (random.set n.hash expected_size)
                                   (by ! each set.as_list)))
               /#= (by (/.equivalence n.equivalence) =)]
         expected_list random_list
         alternative_list (random.only (|>> (/#= expected_list) not)
                                       random_list)
         expected_value (random.only (|>> (/.member? n.= expected_list) not)
                                     random.natural)])
      (all _.and
           (_.coverage [/.size]
             (n.= expected_size
                  (/.size expected_list)))
           (_.coverage [/.empty?]
             (bit.= (n.= 0 (/.size expected_list))
                    (/.empty? expected_list)))
           (_.coverage [/.empty]
             (/.empty? /.empty))
           (_.coverage [/.reversed]
             (and (|> expected_list
                      /.reversed
                      /.reversed
                      (/#= expected_list))
                  (bit.= (n.< 2 (/.size expected_list))
                         (by (/.equivalence n.equivalence) =
                             expected_list
                             (/.reversed expected_list)))))
           (_.coverage [/.first /.after /.split]
             (let [before (/.first cut_off expected_list)
                   after (/.after cut_off expected_list)
                   [before' after'] (/.split cut_off expected_list)]
               (and (n.= cut_off (/.size before))
                    (n.= (n.- cut_off expected_size) (/.size after))
                    (/#= expected_list (by /.monoid composite before after))
                    (/#= before before')
                    (/#= after after'))))
           (_.coverage [/.as_stack /.of_stack]
             (|> expected_list
                 /.as_stack
                 /.of_stack
                 (/#= expected_list)))
           (_.coverage [/.repeated /.every?]
             (let [it (/.repeated expected_size expected_value)]
               (and (n.= expected_size (/.size it))
                    (/.every? (same? expected_value) it))))
           (_.coverage [/.interposed /.any? /.member? /.only]
             (let [it (/.interposed expected_value expected_list)
                   expected_additions (-- expected_size)]
               (and (n.= (n.+ expected_additions expected_size)
                         (/.size it))
                    (bit.= (n.> 0 expected_additions)
                           (and (/.any? (n.= expected_value) it)
                                (/.member? n.= it expected_value)))
                    (/#= expected_list (/.only (|>> (n.= expected_value) not) it))
                    (/#= (/.repeated expected_additions expected_value)
                         (/.only (n.= expected_value) it)))))
           (_.coverage [/.item /.dynamic]
             (let [[actual_size copy] (/.dynamic (function (_ index)
                                                   (do try.monad
                                                     [it (/.item index expected_list)]
                                                     (pure [(++ index) it])))
                                                 0)]
               (and (n.= expected_size actual_size)
                    (/#= expected_list copy))))
           (_.coverage [/.indices /.static]
             (let [[actual_size expected_indices] (/.static expected_size
                                                            (function (_ index)
                                                              [(++ index) index])
                                                            0)]
               (and (n.= expected_size actual_size)
                    (/#= expected_indices
                         (/.indices expected_size)))))
           (_.coverage [/.enumeration]
             (let [it (/.enumeration expected_list)]
               (and (/#= (/.indices expected_size)
                         (by /.functor each product.left it))
                    (/#= expected_list
                         (by /.functor each product.right it)))))
           (_.coverage [/.zipped_2]
             (by (/.equivalence (product.equivalence n.equivalence n.equivalence)) =
                 (/.zipped_2 (/.indices expected_size) expected_list)
                 (/.enumeration expected_list)))
           (_.coverage [/.as_text]
             (bit.= (/#= expected_list
                         alternative_list)
                    (text.= (/.as_text %.natural expected_list)
                            (/.as_text %.natural alternative_list))))
           (_.coverage [/.sub]
             (let [it (/.sub size_of_complete_segment expected_list)]
               (when size_of_complete_segment
                 0 (by (/.equivalence /#=) = /.empty it)
                 _ (and (/.every? (|>> /.size (n.<= size_of_complete_segment))
                                  it)
                        (/#= expected_list (by /.monad conjoint it))))))
           (_.coverage [/.sorted]
             (let [less_up_to_more (/.sorted n.< expected_list)
                   more_up_to_less (/.sorted n.> expected_list)]
               (and (n.= (/.size expected_list)
                         (/.size less_up_to_more))
                    (set.= (set.of_list n.hash expected_list)
                           (set.of_list n.hash less_up_to_more))
                    (when (/.as_stack less_up_to_more)
                      {.#Empty}
                      true

                      {.#Top reference terms}
                      (product.left (stack.mix (function (_ more [so_far less])
                                                 [(and so_far
                                                       (n.< more less))
                                                  more])
                                               [true reference]
                                               terms)))
                    (/#= less_up_to_more
                         (/.reversed more_up_to_less)))))
           (all _.and
                (<| (_.for [/.#Nil])
                    (caseT.specification /.#Nil
                                         (/.equivalence n.equivalence) any.equivalence
                                         random_list (pure [])))
                (_.coverage [/.#Nil]
                  (and (case.when (is (List Natural) /.empty)
                         {/.#Nil _}
                         true
                         
                         else
                         false)
                       (by (/.equivalence n.equivalence) =
                           (is (List Natural) /.empty)
                           (case.some /.#Nil [])))))
           (let [list#equivalence (/.equivalence n.equivalence)]
             (all _.and
                  (<| (_.for [/.#Cons])
                      (caseT.specification /.#Cons
                                           list#equivalence (equivalence.product n.equivalence list#equivalence)
                                           random_list (random.and random.natural random_list)))
                  (_.coverage [/.#Cons]
                    (and (case.when expected_list
                           {/.#Cons head tail}
                           (by list#equivalence = expected_list (case.some /.#Cons [head tail]))
                           
                           else
                           (by list#equivalence = (is (List Natural) /.empty) else))
                         (case.when (is (List Natural) /.empty)
                           {/.#Cons head tail}
                           false
                           
                           else
                           true)))))
           (let [list#equivalence (/.equivalence n.equivalence)]
             (all _.and
                  (<| (_.for [/.#Pair])
                      (caseT.specification /.#Pair
                                           list#equivalence (all equivalence.product n.equivalence n.equivalence list#equivalence)
                                           random_list (all random.and random.natural random.natural random_list)))
                  (_.coverage [/.#Pair]
                    (let [reversed (is (for_any (_ it)
                                         (Change (List it)))
                                       (function (reversed it)
                                         (case.when it
                                           {/.#Pair start end it'}
                                           (case.some /.#Pair [end start (reversed it')])
                                           
                                           else
                                           it)))]
                      (list#equivalence (/.reversed expected_list) (reversed expected_list))))))

           ..\\projection
           /property.test
           )))
