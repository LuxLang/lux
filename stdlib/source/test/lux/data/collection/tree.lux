(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." equivalence]
      ["$." fold]
      ["$." functor]]}]
   [data
    [number
     ["n" nat]]
    [collection
     ["." list ("#@." functor fold)]]]
   [math
    ["r" random (#+ Random)]]]
  {1
   ["." / (#+ Tree)]})

(def: #export (tree size gen-value)
  (All [a] (-> Nat (Random a) (Random (Tree a))))
  (let [singleton (:: r.monad map /.leaf gen-value)]
    (case size
      0
      singleton
      
      1
      singleton

      2
      (do r.monad
        [value gen-value
         single (tree 1 gen-value)]
        (wrap (/.branch value (list single))))
      
      _
      (do r.monad
        [value gen-value
         #let [size (dec size)]
         left (tree (n./ 2 size) gen-value)
         right (tree (n.+ (n.% 2 size) (n./ 2 size))
                     gen-value)]
        (wrap (/.branch value (list left right))))
      )))

(def: #export test
  Test
  (<| (_.context (%.name (name-of /.Tree)))
      (do {@ r.monad}
        [size (:: @ map (|>> (n.% 100) (n.+ 1)) r.nat)]
        ($_ _.and
            ($equivalence.spec (/.equivalence n.equivalence) (..tree size r.nat))
            ($fold.spec /.leaf /.equivalence /.fold)
            ($functor.spec /.leaf /.equivalence /.functor)
            
            (do @
              [sample (..tree size r.nat)]
              (_.test "Can flatten a tree to get all the nodes as a flat tree."
                      (n.= size
                           (list.size (/.flatten sample)))))
            ))))
