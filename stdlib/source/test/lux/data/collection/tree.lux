... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["//" projection]
    ["[0]" monad (.only do)]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [function
    [polytypism
     ["[0]" mix
      ["[1]T" \\test]]]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix monoid)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" \\projection]
 [\\library
  ["[0]" / (.only Tree)
   ["[0]" zipper]]])

(the !expect
  (template.macro (_ <pattern> <value>)
    [(when <value>
       <pattern>
       true
       
       _
       false)]))

(the !cover
  (template.macro (_ <coverage> <projection> <sample>)
    [(do [! random.monad]
       [dummy random.natural
        expected (|> random.natural (random.only (|>> (n.= dummy) not)))]
       (_.coverage <coverage>
         (|> (\\projection.value <projection>
                                 <sample>)
             (!expect (^.multi {try.#Success actual}
                               (n.= expected actual))))))]))

(the !cover/2
  (template.macro (_ <coverage> <projection> <sample0> <sample1>)
    [(do [! random.monad]
       [dummy random.natural
        expected (|> random.natural (random.only (|>> (n.= dummy) not)))]
       (_.coverage <coverage>
         (and (|> (\\projection.value <projection> <sample0>)
                  (!expect (^.multi {try.#Success actual}
                                    (n.= expected actual))))
              (|> (\\projection.value <projection> <sample1>)
                  (!expect (^.multi {try.#Success actual}
                                    (n.= expected actual)))))))]))

(the \\projection
  Test
  (<| (_.covering \\projection._)
      (_.for [\\projection.Projection])
      (all _.and
           (!cover [\\projection.value \\projection.here]
                   \\projection.here
                   (/.leaf expected))
           (do [! random.monad]
             [expected random.natural]
             (_.coverage [\\projection.value']
               (|> (\\projection.value' \\projection.here
                                        (zipper.zipper (/.leaf expected)))
                   (!expect (^.multi {try.#Success actual}
                                     (n.= expected actual))))))
           (!cover [\\projection.down]
                   (do //.monad
                     [_ \\projection.down]
                     \\projection.here)
                   (/.branch dummy
                             (list (/.leaf expected))))
           (!cover [\\projection.up]
                   (do //.monad
                     [_ \\projection.down
                      _ \\projection.up]
                     \\projection.here)
                   (/.branch expected
                             (list (/.leaf dummy))))
           (!cover [\\projection.right]
                   (do //.monad
                     [_ \\projection.down
                      _ \\projection.right]
                     \\projection.here)
                   (/.branch dummy
                             (list (/.leaf dummy)
                                   (/.leaf expected))))
           (!cover [\\projection.left]
                   (do //.monad
                     [_ \\projection.down
                      _ \\projection.right
                      _ \\projection.left]
                     \\projection.here)
                   (/.branch dummy
                             (list (/.leaf expected)
                                   (/.leaf dummy))))
           (!cover [\\projection.rightmost]
                   (do //.monad
                     [_ \\projection.down
                      _ \\projection.rightmost]
                     \\projection.here)
                   (/.branch dummy
                             (list (/.leaf dummy)
                                   (/.leaf dummy)
                                   (/.leaf expected))))
           (!cover [\\projection.leftmost]
                   (do //.monad
                     [_ \\projection.down
                      _ \\projection.rightmost
                      _ \\projection.leftmost]
                     \\projection.here)
                   (/.branch dummy
                             (list (/.leaf expected)
                                   (/.leaf dummy)
                                   (/.leaf dummy))))
           (!cover/2 [\\projection.next]
                     (do //.monad
                       [_ \\projection.next
                        _ \\projection.next]
                       \\projection.here)
                     (/.branch dummy
                               (list (/.branch dummy
                                               (list (/.leaf expected)))))
                     (/.branch dummy
                               (list (/.leaf dummy)
                                     (/.leaf expected))))
           (!cover/2 [\\projection.previous]
                     (do //.monad
                       [_ \\projection.next
                        _ \\projection.next
                        _ \\projection.previous]
                       \\projection.here)
                     (/.branch dummy
                               (list (/.branch expected
                                               (list (/.leaf dummy)))))
                     (/.branch dummy
                               (list (/.leaf expected)
                                     (/.leaf dummy))))
           (!cover/2 [\\projection.end]
                     (do //.monad
                       [_ \\projection.end]
                       \\projection.here)
                     (/.branch dummy
                               (list (/.branch dummy
                                               (list (/.leaf expected)))))
                     (/.branch dummy
                               (list (/.leaf dummy)
                                     (/.leaf expected))))
           (!cover/2 [\\projection.start]
                     (do //.monad
                       [_ \\projection.end
                        _ \\projection.start]
                       \\projection.here)
                     (/.branch expected
                               (list (/.branch dummy
                                               (list (/.leaf dummy)))))
                     (/.branch expected
                               (list (/.leaf dummy)
                                     (/.leaf dummy))))
           (do [! random.monad]
             [dummy random.natural]
             (_.coverage [\\projection.cannot_move_further]
               (`` (and (,, (template.with [<projection>]
                              [(|> (\\projection.value <projection>
                                                       (/.leaf dummy))
                                   (!expect (^.multi {try.#Failure error}
                                                     (exception.is? \\projection.cannot_move_further error))))]

                              [[\\projection.down] [\\projection.up]
                               [\\projection.right] [\\projection.left]
                               [\\projection.next] [\\projection.previous]]))))))
           )))

(the .public (tree gen_value)
  (for_any (_ a)
    (-> (Random a)
        (Random [Natural (Tree a)])))
  (do [! random.monad]
    [value gen_value
     num_children (by ! each (n.% 2) random.natural)
     children (random.list num_children (tree gen_value))]
    (pure [(|> children
               (list#each product.left)
               (list#mix n.+ 1))
           [/.#value value
            /.#children (list#each product.right children)]])))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Tree
              /.#value /.#children])
      (all _.and
           (_.for [/.equivalence]
                  (|> (..tree random.natural)
                      (by random.monad each product.right)
                      (equivalenceT.spec (/.equivalence n.equivalence))))
           (_.for [/.mix]
                  (mixT.spec /.leaf /.equivalence /.mix))
           (_.for [/.functor]
                  (functorT.spec /.leaf /.equivalence /.functor))
           
           (do random.monad
             [[size sample] (..tree random.natural)]
             (_.coverage [/.flat]
               (n.= size
                    (list.size (/.flat sample)))))
           (do random.monad
             [expected random.natural]
             (_.coverage [/.leaf]
               (by (list.equivalence n.equivalence) =
                   (list expected)
                   (/.flat (/.leaf expected)))))
           (do [! random.monad]
             [value random.natural
              num_children (by ! each (n.% 3) random.natural)
              children (random.list num_children random.natural)]
             (_.coverage [/.branch]
               (by (list.equivalence n.equivalence) =
                   (list#composite (list value) children)
                   (/.flat (/.branch value (list#each /.leaf children))))))
           (do random.monad
             [expected/0 random.natural
              expected/1 random.natural
              expected/2 random.natural
              expected/3 random.natural
              expected/4 random.natural
              expected/5 random.natural]
             (_.coverage [/.tree]
               (and (by (list.equivalence n.equivalence) =
                        (list expected/0)
                        (/.flat (/.tree expected/0)))
                    (by (list.equivalence n.equivalence) =
                        (list expected/0 expected/1 expected/2)
                        (/.flat (/.tree expected/0
                                        {expected/1 {}
                                                    expected/2 {}})))
                    (by (list.equivalence n.equivalence) =
                        (list expected/0 expected/1 expected/2
                              expected/3 expected/4 expected/5)
                        (/.flat (/.tree expected/0
                                        {expected/1 {}
                                                    expected/2 {expected/3 {}
                                                                           expected/4 {expected/5 {}}}})))
                    )))

           ..\\projection
           )))
