... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    ["[0]" mix
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["//" parser]
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [meta
    [macro
     ["^" pattern]]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" \\parser]
 [\\library
  ["[0]" / (.only Tree)
   ["[0]" zipper]]])

(def !expect
  (template (_ <pattern> <value>)
    [(when <value>
       <pattern>
       true
       
       _
       false)]))

(def !cover
  (template (_ <coverage> <parser> <sample>)
    [(do [! random.monad]
       [dummy random.nat
        expected (|> random.nat (random.only (|>> (n.= dummy) not)))]
       (_.coverage <coverage>
         (|> (\\parser.result <parser>
                              <sample>)
             (!expect (^.multi {try.#Success actual}
                               (n.= expected actual))))))]))

(def !cover/2
  (template (_ <coverage> <parser> <sample0> <sample1>)
    [(do [! random.monad]
       [dummy random.nat
        expected (|> random.nat (random.only (|>> (n.= dummy) not)))]
       (_.coverage <coverage>
         (and (|> (\\parser.result <parser> <sample0>)
                  (!expect (^.multi {try.#Success actual}
                                    (n.= expected actual))))
              (|> (\\parser.result <parser> <sample1>)
                  (!expect (^.multi {try.#Success actual}
                                    (n.= expected actual)))))))]))

(def \\parser
  Test
  (<| (_.covering \\parser._)
      (_.for [\\parser.Parser])
      (all _.and
           (!cover [\\parser.result \\parser.value]
                   \\parser.value
                   (/.leaf expected))
           (do [! random.monad]
             [expected random.nat]
             (_.coverage [\\parser.result']
               (|> (\\parser.result' \\parser.value
                                     (zipper.zipper (/.leaf expected)))
                   (!expect (^.multi {try.#Success actual}
                                     (n.= expected actual))))))
           (!cover [\\parser.down]
                   (do //.monad
                     [_ \\parser.down]
                     \\parser.value)
                   (/.branch dummy
                             (list (/.leaf expected))))
           (!cover [\\parser.up]
                   (do //.monad
                     [_ \\parser.down
                      _ \\parser.up]
                     \\parser.value)
                   (/.branch expected
                             (list (/.leaf dummy))))
           (!cover [\\parser.right]
                   (do //.monad
                     [_ \\parser.down
                      _ \\parser.right]
                     \\parser.value)
                   (/.branch dummy
                             (list (/.leaf dummy)
                                   (/.leaf expected))))
           (!cover [\\parser.left]
                   (do //.monad
                     [_ \\parser.down
                      _ \\parser.right
                      _ \\parser.left]
                     \\parser.value)
                   (/.branch dummy
                             (list (/.leaf expected)
                                   (/.leaf dummy))))
           (!cover [\\parser.rightmost]
                   (do //.monad
                     [_ \\parser.down
                      _ \\parser.rightmost]
                     \\parser.value)
                   (/.branch dummy
                             (list (/.leaf dummy)
                                   (/.leaf dummy)
                                   (/.leaf expected))))
           (!cover [\\parser.leftmost]
                   (do //.monad
                     [_ \\parser.down
                      _ \\parser.rightmost
                      _ \\parser.leftmost]
                     \\parser.value)
                   (/.branch dummy
                             (list (/.leaf expected)
                                   (/.leaf dummy)
                                   (/.leaf dummy))))
           (!cover/2 [\\parser.next]
                     (do //.monad
                       [_ \\parser.next
                        _ \\parser.next]
                       \\parser.value)
                     (/.branch dummy
                               (list (/.branch dummy
                                               (list (/.leaf expected)))))
                     (/.branch dummy
                               (list (/.leaf dummy)
                                     (/.leaf expected))))
           (!cover/2 [\\parser.previous]
                     (do //.monad
                       [_ \\parser.next
                        _ \\parser.next
                        _ \\parser.previous]
                       \\parser.value)
                     (/.branch dummy
                               (list (/.branch expected
                                               (list (/.leaf dummy)))))
                     (/.branch dummy
                               (list (/.leaf expected)
                                     (/.leaf dummy))))
           (!cover/2 [\\parser.end]
                     (do //.monad
                       [_ \\parser.end]
                       \\parser.value)
                     (/.branch dummy
                               (list (/.branch dummy
                                               (list (/.leaf expected)))))
                     (/.branch dummy
                               (list (/.leaf dummy)
                                     (/.leaf expected))))
           (!cover/2 [\\parser.start]
                     (do //.monad
                       [_ \\parser.end
                        _ \\parser.start]
                       \\parser.value)
                     (/.branch expected
                               (list (/.branch dummy
                                               (list (/.leaf dummy)))))
                     (/.branch expected
                               (list (/.leaf dummy)
                                     (/.leaf dummy))))
           (do [! random.monad]
             [dummy random.nat]
             (_.coverage [\\parser.cannot_move_further]
               (`` (and (,, (with_template [<parser>]
                              [(|> (\\parser.result <parser>
                                                    (/.leaf dummy))
                                   (!expect (^.multi {try.#Failure error}
                                                     (exception.match? \\parser.cannot_move_further error))))]

                              [\\parser.down] [\\parser.up]
                              [\\parser.right] [\\parser.left]
                              [\\parser.next] [\\parser.previous]
                              ))))))
           )))

(def .public (tree gen_value)
  (All (_ a) (-> (Random a) (Random [Nat (Tree a)])))
  (do [! random.monad]
    [value gen_value
     num_children (of ! each (n.% 2) random.nat)
     children (random.list num_children (tree gen_value))]
    (in [(|> children
             (list#each product.left)
             (list#mix n.+ 1))
         [/.#value value
          /.#children (list#each product.right children)]])))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Tree
              /.#value /.#children])
      (all _.and
           (_.for [/.equivalence]
                  (|> (..tree random.nat)
                      (of random.monad each product.right)
                      (equivalenceT.spec (/.equivalence n.equivalence))))
           (_.for [/.mix]
                  (mixT.spec /.leaf /.equivalence /.mix))
           (_.for [/.functor]
                  (functorT.spec /.leaf /.equivalence /.functor))
           
           (do random.monad
             [[size sample] (..tree random.nat)]
             (_.coverage [/.flat]
               (n.= size
                    (list.size (/.flat sample)))))
           (do random.monad
             [expected random.nat]
             (_.coverage [/.leaf]
               (of (list.equivalence n.equivalence) =
                   (list expected)
                   (/.flat (/.leaf expected)))))
           (do [! random.monad]
             [value random.nat
              num_children (of ! each (n.% 3) random.nat)
              children (random.list num_children random.nat)]
             (_.coverage [/.branch]
               (of (list.equivalence n.equivalence) =
                   (list.partial value children)
                   (/.flat (/.branch value (list#each /.leaf children))))))
           (do random.monad
             [expected/0 random.nat
              expected/1 random.nat
              expected/2 random.nat
              expected/3 random.nat
              expected/4 random.nat
              expected/5 random.nat]
             (_.coverage [/.tree]
               (and (of (list.equivalence n.equivalence) =
                        (list expected/0)
                        (/.flat (/.tree expected/0)))
                    (of (list.equivalence n.equivalence) =
                        (list expected/0 expected/1 expected/2)
                        (/.flat (/.tree expected/0
                                        {expected/1 {}
                                                    expected/2 {}})))
                    (of (list.equivalence n.equivalence) =
                        (list expected/0 expected/1 expected/2
                              expected/3 expected/4 expected/5)
                        (/.flat (/.tree expected/0
                                        {expected/1 {}
                                                    expected/2 {expected/3 {}
                                                                           expected/4 {expected/5 {}}}})))
                    )))

           ..\\parser
           )))
