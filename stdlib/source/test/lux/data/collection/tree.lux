(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     ["." monad (#+ do)]
     [\\specification
      ["$." equivalence]
      ["$." fold]
      ["$." functor]]]
    [data
     ["." product]
     [collection
      ["." list ("#\." functor fold)]]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." / (#+ Tree)]])

(def: #export (tree gen_value)
  (All [a] (-> (Random a) (Random [Nat (Tree a)])))
  (do {! random.monad}
    [value gen_value
     num_children (\ ! map (n.% 2) random.nat)
     children (random.list num_children (tree gen_value))]
    (in [(|> children
             (list\map product.left)
             (list\fold n.+ 1))
         {#/.value value
          #/.children (list\map product.right children)}])))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Tree])
      ($_ _.and
          (_.for [/.equivalence]
                 (|> (..tree random.nat)
                     (\ random.monad map product.right)
                     ($equivalence.spec (/.equivalence n.equivalence))))
          (_.for [/.fold]
                 ($fold.spec /.leaf /.equivalence /.fold))
          (_.for [/.functor]
                 ($functor.spec /.leaf /.equivalence /.functor))
          
          (do random.monad
            [[size sample] (..tree random.nat)]
            (_.cover [/.flat]
                     (n.= size
                          (list.size (/.flat sample)))))
          (do random.monad
            [expected random.nat]
            (_.cover [/.leaf]
                     (\ (list.equivalence n.equivalence) =
                        (list expected)
                        (/.flat (/.leaf expected)))))
          (do {! random.monad}
            [value random.nat
             num_children (\ ! map (n.% 3) random.nat)
             children (random.list num_children random.nat)]
            (_.cover [/.branch]
                     (\ (list.equivalence n.equivalence) =
                        (list& value children)
                        (/.flat (/.branch value (list\map /.leaf children))))))
          (do random.monad
            [expected/0 random.nat
             expected/1 random.nat
             expected/2 random.nat
             expected/3 random.nat
             expected/4 random.nat
             expected/5 random.nat]
            (_.cover [/.tree]
                     (and (\ (list.equivalence n.equivalence) =
                             (list expected/0)
                             (/.flat (/.tree expected/0)))
                          (\ (list.equivalence n.equivalence) =
                             (list expected/0 expected/1 expected/2)
                             (/.flat (/.tree expected/0
                                             {expected/1 {}
                                              expected/2 {}})))
                          (\ (list.equivalence n.equivalence) =
                             (list expected/0 expected/1 expected/2
                                   expected/3 expected/4 expected/5)
                             (/.flat (/.tree expected/0
                                             {expected/1 {}
                                              expected/2 {expected/3 {}
                                                          expected/4 {expected/5 {}}}})))
                          )))
          )))
