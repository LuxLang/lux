(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    [\spec
     ["$." equivalence]]]
   [data
    ["." bit ("#\." equivalence)]
    ["." maybe ("#\." monad)]
    ["." text]
    [collection
     ["." set]
     ["." list]]]
   [math
    ["." random (#+ Random)]
    [number
     ["n" nat]]]]
  [\\
   ["." /]])

(def: #export (random size gen_key gen_value)
  (All [v]
    (-> Nat (Random Text) (Random v) (Random (/.PList v))))
  (do random.monad
    [keys (random.set text.hash size gen_key)
     values (random.list size gen_value)]
    (wrap (list.zip/2 (set.to_list keys) values))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.PList])
      (do {! random.monad}
        [#let [gen_key (random.ascii/alpha 10)]
         size (\ ! map (n.% 100) random.nat)
         sample (..random size gen_key random.nat)

         #let [keys (|> sample /.keys (set.from_list text.hash))]
         extra_key (random.filter (|>> (set.member? keys) not)
                                  gen_key)
         extra_value random.nat
         shift random.nat]
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec (/.equivalence n.equivalence)
                                      (..random size gen_key random.nat)))
            
            (_.cover [/.size]
                     (n.= size (/.size sample)))
            (_.cover [/.empty?]
                     (bit\= (n.= 0 (/.size sample))
                            (/.empty? sample)))
            (_.cover [/.empty]
                     (/.empty? /.empty))
            (_.cover [/.keys /.values]
                     (\ (/.equivalence n.equivalence) =
                        sample
                        (list.zip/2 (/.keys sample)
                                    (/.values sample))))
            (_.cover [/.contains?]
                     (and (list.every? (function (_ key)
                                         (/.contains? key sample))
                                       (/.keys sample))
                          (not (/.contains? extra_key sample))))
            (_.cover [/.put]
                     (let [sample+ (/.put extra_key extra_value sample)]
                       (and (not (/.contains? extra_key sample))
                            (/.contains? extra_key sample+)
                            (n.= (inc (/.size sample))
                                 (/.size sample+)))))
            (_.cover [/.get]
                     (|> sample
                         (/.put extra_key extra_value)
                         (/.get extra_key)
                         (maybe\map (n.= extra_value))
                         (maybe.default false)))
            (_.cover [/.update]
                     (|> sample
                         (/.put extra_key extra_value)
                         (/.update extra_key (n.+ shift))
                         (/.get extra_key)
                         (maybe\map (n.= (n.+ shift extra_value)))
                         (maybe.default false)))
            (_.cover [/.remove]
                     (|> sample
                         (/.put extra_key extra_value)
                         (/.remove extra_key)
                         (\ (/.equivalence n.equivalence) = sample)))
            ))))
