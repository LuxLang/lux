... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equality (.only Equality)]
    [order (.only Order)]
    ["[0]" monad]
    ["[0]" equality
     ["[1]T" \\test]]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" set]
     ["[0]" list (.use "[1]:[0]" functor)]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" monad)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public (dictionary order gen_key gen_value size)
  (for_any (_ k v)
    (-> (Order k) (Random k) (Random v) Natural
        (Random (/.Dictionary k v))))
  (when size
    0
    (random:pure (/.empty order))
    
    _
    (monad.let random.monad
      [partial (dictionary order gen_key gen_value (-- size))
       key (random.only (|>> (/.in_domain? partial) not)
                        gen_key)
       value gen_value]
      (pure (/.has key value partial)))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Dictionary
              /.:order /.:root])
      (monad.let [! random.monad]
        [size (by ! each (n.% 100) random.natural)
         keys (random.set n.hash size random.natural)
         values (random.set n.hash size random.natural)
         extra_key (random.only (|>> (set.member? keys) not)
                                random.natural)
         extra_value random.natural
         shift random.natural
         .let [pairs (list.zipped_2 (set.as_list keys)
                                    (set.as_list values))
               sample (/.of_list n.order pairs)
               pairs_in_order (list.in_order (function (_ [left _] [right _])
                                               (n.< left right))
                                             pairs)
               values_in_order (list:each product.right pairs_in_order)
               (open "list:[0]") (list.equality (is (Equality [Natural Natural])
                                                    (function (_ [kr vr] [ks vs])
                                                      (and (n.= kr ks)
                                                           (n.= vr vs)))))
               (open "/:[0]") (/.equality n.equality)]]
        (all _.and
             (_.for [/.equality]
                    (equalityT.spec (/.equality n.equality) (..dictionary n.order random.natural random.natural size)))
             
             (_.coverage [/.size]
               (n.= size (/.size sample)))
             (_.coverage [/.empty?]
               (bit.= (n.= 0 (/.size sample))
                      (/.empty? sample)))
             (_.coverage [/.empty]
               (/.empty? (/.empty n.order)))
             (_.coverage [/.minor]
               (when [(/.minor sample) (list.item 0 values_in_order)]
                 [{try.:Failure _} {try.:Failure _}]
                 true

                 [{try.:Success reference} {try.:Success sample}]
                 (n.= reference sample)

                 _
                 false))
             (_.coverage [/.major]
               (when [(/.major sample) (list.item (-- size) values_in_order)]
                 [{try.:Failure _} {try.:Failure _}]
                 true

                 [{try.:Success reference} {try.:Success sample}]
                 (n.= reference sample)

                 _
                 false))
             (_.coverage [/.entries]
               (list:= (/.entries sample)
                       pairs_in_order))
             (_.coverage [/.domain /.values]
               (list:= (/.entries sample)
                       (list.zipped_2 (/.domain sample)
                                      (/.values sample))))
             (_.coverage [/.of_list]
               (|> sample
                   /.entries
                   (/.of_list n.order)
                   (/:= sample)))
             (_.coverage [/.in_domain?]
               (and (list.every? (/.in_domain? sample)
                                 (/.domain sample))
                    (not (/.in_domain? sample extra_key))))
             (_.coverage [/.has]
               (and (not (/.in_domain? sample extra_key))
                    (let [sample+ (/.has extra_key extra_value sample)]
                      (and (/.in_domain? sample+ extra_key)
                           (n.= (++ (/.size sample))
                                (/.size sample+))))))
             (_.coverage [/.value]
               (let [sample+ (/.has extra_key extra_value sample)]
                 (when [(/.value extra_key sample)
                        (/.value extra_key sample+)]
                   [{try.:Failure _} {try.:Success actual}]
                   (n.= extra_value actual)
                   
                   _
                   false)))
             (_.coverage [/.lacks]
               (|> sample
                   (/.has extra_key extra_value)
                   (/.lacks extra_key)
                   (/:= sample)))
             (_.coverage [/.revised]
               (|> sample
                   (/.has extra_key extra_value)
                   (/.revised extra_key (n.+ shift))
                   (/.value extra_key)
                   (try:each (n.= (n.+ shift extra_value)))
                   (try.else false)))
             ))))
