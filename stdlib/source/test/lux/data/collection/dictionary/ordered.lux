(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [equivalence (#+ Equivalence)]
     [order (#+ Order)]
     [\\specification
      ["$." equivalence]]]
    [data
     ["." product]
     ["." bit ("#\." equivalence)]
     ["." maybe ("#\." monad)]
     [collection
      ["." set]
      ["." list ("#\." functor)]]]
    [math
     ["." random (#+ Random) ("#\." monad)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /]])

(def: #export (dictionary order gen_key gen_value size)
  (All [k v]
    (-> (Order k) (Random k) (Random v) Nat (Random (/.Dictionary k v))))
  (case size
    0
    (random\in (/.empty order))
    
    _
    (do random.monad
      [partial (dictionary order gen_key gen_value (dec size))
       key (random.only (|>> (/.key? partial) not)
                        gen_key)
       value gen_value]
      (in (/.put key value partial)))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Dictionary])
      (do {! random.monad}
        [size (\ ! map (n.% 100) random.nat)
         keys (random.set n.hash size random.nat)
         values (random.set n.hash size random.nat)
         extra_key (random.only (|>> (set.member? keys) not)
                                random.nat)
         extra_value random.nat
         shift random.nat
         .let [pairs (list.zipped/2 (set.list keys)
                                    (set.list values))
               sample (/.of_list n.order pairs)
               sorted_pairs (list.sort (function (_ [left _] [right _])
                                         (n.< left right))
                                       pairs)
               sorted_values (list\map product.right sorted_pairs)
               (^open "list\.") (list.equivalence (: (Equivalence [Nat Nat])
                                                     (function (_ [kr vr] [ks vs])
                                                       (and (n.= kr ks)
                                                            (n.= vr vs)))))
               (^open "/\.") (/.equivalence n.equivalence)]]
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec (/.equivalence n.equivalence) (..dictionary n.order random.nat random.nat size)))
            
            (_.cover [/.size]
                     (n.= size (/.size sample)))
            (_.cover [/.empty?]
                     (bit\= (n.= 0 (/.size sample))
                            (/.empty? sample)))
            (_.cover [/.empty]
                     (/.empty? (/.empty n.order)))
            (_.cover [/.min]
                     (case [(/.min sample) (list.head sorted_values)]
                       [#.None #.None]
                       #1

                       [(#.Some reference) (#.Some sample)]
                       (n.= reference sample)

                       _
                       #0))
            (_.cover [/.max]
                     (case [(/.max sample) (list.last sorted_values)]
                       [#.None #.None]
                       #1

                       [(#.Some reference) (#.Some sample)]
                       (n.= reference sample)

                       _
                       #0))
            (_.cover [/.entries]
                     (list\= (/.entries sample)
                             sorted_pairs))
            (_.cover [/.keys /.values]
                     (list\= (/.entries sample)
                             (list.zipped/2 (/.keys sample) (/.values sample))))
            (_.cover [/.of_list]
                     (|> sample
                         /.entries (/.of_list n.order)
                         (/\= sample)))
            (_.cover [/.key?]
                     (and (list.every? (/.key? sample)
                                       (/.keys sample))
                          (not (/.key? sample extra_key))))
            (_.cover [/.put]
                     (and (not (/.key? sample extra_key))
                          (let [sample+ (/.put extra_key extra_value sample)]
                            (and (/.key? sample+ extra_key)
                                 (n.= (inc (/.size sample))
                                      (/.size sample+))))))
            (_.cover [/.get]
                     (let [sample+ (/.put extra_key extra_value sample)]
                       (case [(/.get extra_key sample)
                              (/.get extra_key sample+)]
                         [#.None (#.Some actual)]
                         (n.= extra_value actual)
                         
                         _
                         false)))
            (_.cover [/.remove]
                     (|> sample
                         (/.put extra_key extra_value)
                         (/.remove extra_key)
                         (/\= sample)))
            (_.cover [/.update]
                     (|> sample
                         (/.put extra_key extra_value)
                         (/.update extra_key (n.+ shift))
                         (/.get extra_key)
                         (maybe\map (n.= (n.+ shift extra_value)))
                         (maybe.else false)))
            ))))
