... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [type (.only by_example)]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the builder
  (/.builder text.monoid))

(the :@:
  (by_example [@]
    (is (/.Builder @ Text)
        ..builder)
    @))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Tree])
      (do [! random.monad]
        [tag_left (random.alpha_numeric 1)
         tag_right (random.only (|>> (text.= tag_left) not)
                                (random.alpha_numeric 1))
         expected_left random.natural
         expected_right random.natural]
        (all _.and
             (_.coverage [/.Builder /.builder]
               (exec (/.builder text.monoid)
                 true))
             (_.coverage [/.tag]
               (and (text.= tag_left
                            (/.tag (by ..builder leaf tag_left expected_left)))
                    (text.= (text#composite tag_left tag_right)
                            (/.tag (by ..builder branch
                                       (by ..builder leaf tag_left expected_left)
                                       (by ..builder leaf tag_right expected_right))))))
             (_.coverage [/.root]
               (and (when (/.root (by ..builder leaf tag_left expected_left))
                      {.#Left actual}
                      (n.= expected_left actual)
                      
                      {.#Right _}
                      false)
                    (when (/.root (by ..builder branch
                                      (by ..builder leaf tag_left expected_left)
                                      (by ..builder leaf tag_right expected_right)))
                      {.#Left _}
                      false
                      
                      {.#Right [left right]}
                      (when [(/.root left)
                             (/.root right)]
                        [{.#Left actual_left} {.#Left actual_right}]
                        (and (n.= expected_left actual_left)
                             (n.= expected_right actual_right))
                        
                        _
                        false))))
             (_.coverage [/.value]
               (and (n.= expected_left
                         (/.value (by ..builder leaf tag_left expected_left)))
                    (n.= expected_left
                         (/.value (by ..builder branch
                                      (by ..builder leaf tag_left expected_left)
                                      (by ..builder leaf tag_right expected_right))))))
             (do random.monad
               [.let [tags_equivalence (list.equivalence text.equivalence)
                      values_equivalence (list.equivalence n.equivalence)]
                tags/H (random.alpha_numeric 1)
                tags/T (random.list 5 (random.alpha_numeric 1))
                values/H random.natural
                values/T (random.list 5 random.natural)]
               (_.coverage [/.tags /.values]
                 (let [tree (list#mix (function (_ [tag value] tree)
                                        (by builder branch tree (by builder leaf tag value)))
                                      (by builder leaf tags/H values/H)
                                      (list.zipped_2 tags/T values/T))]
                   (and (by tags_equivalence = (list.partial tags/H tags/T) (/.tags tree))
                        (by values_equivalence = (list.partial values/H values/T) (/.values tree))))))
             (_.coverage [/.one]
               (let [can_find_correct_one!
                     (|> (by ..builder leaf tag_left expected_left)
                         (/.one (text.contains? tag_left))
                         (maybe#each (n.= expected_left))
                         (maybe.else false))

                     cannot_find_incorrect_one!
                     (|> (by ..builder leaf tag_right expected_right)
                         (/.one (text.contains? tag_left))
                         (maybe#each (n.= expected_left))
                         (maybe.else false)
                         not)

                     can_find_left!
                     (|> (by ..builder branch
                             (by ..builder leaf tag_left expected_left)
                             (by ..builder leaf tag_right expected_right))
                         (/.one (text.contains? tag_left))
                         (maybe#each (n.= expected_left))
                         (maybe.else false))

                     can_find_right!
                     (|> (by ..builder branch
                             (by ..builder leaf tag_left expected_left)
                             (by ..builder leaf tag_right expected_right))
                         (/.one (text.contains? tag_right))
                         (maybe#each (n.= expected_right))
                         (maybe.else false))]
                 (and can_find_correct_one!
                      cannot_find_incorrect_one!
                      can_find_left!
                      can_find_right!)))
             (_.coverage [/.exists?]
               (let [can_find_correct_one!
                     (/.exists? (text.contains? tag_left)
                                (by ..builder leaf tag_left expected_left))

                     cannot_find_incorrect_one!
                     (not (/.exists? (text.contains? tag_left)
                                     (by ..builder leaf tag_right expected_right)))

                     can_find_left!
                     (/.exists? (text.contains? tag_left)
                                (by ..builder branch
                                    (by ..builder leaf tag_left expected_left)
                                    (by ..builder leaf tag_right expected_right)))

                     can_find_right!
                     (/.exists? (text.contains? tag_right)
                                (by ..builder branch
                                    (by ..builder leaf tag_left expected_left)
                                    (by ..builder leaf tag_right expected_right)))]
                 (and can_find_correct_one!
                      cannot_find_incorrect_one!
                      can_find_left!
                      can_find_right!)))
             ))))
