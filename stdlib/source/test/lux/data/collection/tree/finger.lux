(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [data
    ["." maybe ("#\." functor)]
    ["." text ("#\." equivalence monoid)]
    [collection
     ["." list ("#\." fold)]]]
   [math
    ["." random]
    [number
     ["n" nat]]]
   [type (#+ :by_example)]]
  [\\
   ["." /]])

(def: builder
  (/.builder text.monoid))

(def: :@:
  (:by_example [@]
               (/.Builder @ Text)
               ..builder
               
               @))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Tree])
      (do {! random.monad}
        [tag_left (random.ascii/alpha_num 1)
         tag_right (random.filter (|>> (text\= tag_left) not)
                                  (random.ascii/alpha_num 1))
         expected_left random.nat
         expected_right random.nat]
        ($_ _.and
            (_.cover [/.Builder /.builder]
                     (exec (/.builder text.monoid)
                       true))
            (_.cover [/.tag]
                     (and (text\= tag_left
                                  (/.tag (\ ..builder leaf tag_left expected_left)))
                          (text\= (text\compose tag_left tag_right)
                                  (/.tag (\ ..builder branch
                                            (\ ..builder leaf tag_left expected_left)
                                            (\ ..builder leaf tag_right expected_right))))))
            (_.cover [/.root]
                     (and (case (/.root (\ ..builder leaf tag_left expected_left))
                            (#.Left actual)
                            (n.= expected_left actual)
                            
                            (#.Right _)
                            false)
                          (case (/.root (\ ..builder branch
                                           (\ ..builder leaf tag_left expected_left)
                                           (\ ..builder leaf tag_right expected_right)))
                            (#.Left _)
                            false
                            
                            (#.Right [left right])
                            (case [(/.root left)
                                   (/.root right)]
                              [(#.Left actual_left) (#.Left actual_right)]
                              (and (n.= expected_left actual_left)
                                   (n.= expected_right actual_right))
                              
                              _
                              false))))
            (_.cover [/.value]
                     (and (n.= expected_left
                               (/.value (\ ..builder leaf tag_left expected_left)))
                          (n.= expected_left
                               (/.value (\ ..builder branch
                                           (\ ..builder leaf tag_left expected_left)
                                           (\ ..builder leaf tag_right expected_right))))))
            (do random.monad
              [#let [tags_equivalence (list.equivalence text.equivalence)
                     values_equivalence (list.equivalence n.equivalence)]
               tags/H (random.ascii/alpha_num 1)
               tags/T (random.list 5 (random.ascii/alpha_num 1))
               values/H random.nat
               values/T (random.list 5 random.nat)]
              (_.cover [/.tags /.values]
                       (let [tree (list\fold (function (_ [tag value] tree)
                                               (\ builder branch tree (\ builder leaf tag value)))
                                             (\ builder leaf tags/H values/H)
                                             (list.zip/2 tags/T values/T))]
                         (and (\ tags_equivalence = (list& tags/H tags/T) (/.tags tree))
                              (\ values_equivalence = (list& values/H values/T) (/.values tree))))))
            (_.cover [/.search]
                     (let [can_find_correct_one!
                           (|> (\ ..builder leaf tag_left expected_left)
                               (/.search (text.contains? tag_left))
                               (maybe\map (n.= expected_left))
                               (maybe.default false))

                           cannot_find_incorrect_one!
                           (|> (\ ..builder leaf tag_right expected_right)
                               (/.search (text.contains? tag_left))
                               (maybe\map (n.= expected_left))
                               (maybe.default false)
                               not)

                           can_find_left!
                           (|> (\ ..builder branch
                                  (\ ..builder leaf tag_left expected_left)
                                  (\ ..builder leaf tag_right expected_right))
                               (/.search (text.contains? tag_left))
                               (maybe\map (n.= expected_left))
                               (maybe.default false))

                           can_find_right!
                           (|> (\ ..builder branch
                                  (\ ..builder leaf tag_left expected_left)
                                  (\ ..builder leaf tag_right expected_right))
                               (/.search (text.contains? tag_right))
                               (maybe\map (n.= expected_right))
                               (maybe.default false))]
                       (and can_find_correct_one!
                            cannot_find_incorrect_one!
                            can_find_left!
                            can_find_right!)))
            (_.cover [/.found?]
                     (let [can_find_correct_one!
                           (/.found? (text.contains? tag_left)
                                     (\ ..builder leaf tag_left expected_left))

                           cannot_find_incorrect_one!
                           (not (/.found? (text.contains? tag_left)
                                          (\ ..builder leaf tag_right expected_right)))

                           can_find_left!
                           (/.found? (text.contains? tag_left)
                                     (\ ..builder branch
                                        (\ ..builder leaf tag_left expected_left)
                                        (\ ..builder leaf tag_right expected_right)))

                           can_find_right!
                           (/.found? (text.contains? tag_right)
                                     (\ ..builder branch
                                        (\ ..builder leaf tag_left expected_left)
                                        (\ ..builder leaf tag_right expected_right)))]
                       (and can_find_correct_one!
                            cannot_find_incorrect_one!
                            can_find_left!
                            can_find_right!)))
            ))))
