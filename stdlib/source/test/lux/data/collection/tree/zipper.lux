(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" comonad]]]
   [control
    ["[0]" pipe]
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" //]
 [\\library
  ["[0]" / (.only Zipper)
   ["tree" //]]])

(def move
  Test
  (do random.monad
    [expected random.nat
     dummy (random.only (|>> (n.= expected) not) random.nat)]
    (all _.and
         (_.coverage [/.down]
           (|> (tree.branch dummy (list (tree.leaf expected)))
               /.zipper
               (pipe.do maybe.monad
                 [/.down]
                 [/.value (n.= expected) in])
               (maybe.else false)))
         (_.coverage [/.up]
           (|> (tree.branch expected (list (tree.leaf dummy)))
               /.zipper
               (pipe.do maybe.monad
                 [/.down]
                 [/.up]
                 [/.value (n.= expected) in])
               (maybe.else false)))
         (_.coverage [/.right]
           (|> (tree.branch dummy (list (tree.leaf dummy) (tree.leaf expected)))
               /.zipper
               (pipe.do maybe.monad
                 [/.down]
                 [/.right]
                 [/.value (n.= expected) in])
               (maybe.else false)))
         (_.coverage [/.rightmost]
           (|> (tree.branch dummy
                            (list (tree.leaf dummy)
                                  (tree.leaf dummy)
                                  (tree.leaf dummy)
                                  (tree.leaf expected)))
               /.zipper
               (pipe.do maybe.monad
                 [/.down]
                 [/.rightmost]
                 [/.value (n.= expected) in])
               (maybe.else false)))
         (_.coverage [/.left]
           (|> (tree.branch dummy (list (tree.leaf expected) (tree.leaf dummy)))
               /.zipper
               (pipe.do maybe.monad
                 [/.down]
                 [/.right]
                 [/.left]
                 [/.value (n.= expected) in])
               (maybe.else false)))
         (_.coverage [/.leftmost]
           (|> (tree.branch dummy
                            (list (tree.leaf expected)
                                  (tree.leaf dummy)
                                  (tree.leaf dummy)
                                  (tree.leaf dummy)))
               /.zipper
               (pipe.do maybe.monad
                 [/.down]
                 [/.rightmost]
                 [/.leftmost]
                 [/.value (n.= expected) in])
               (maybe.else false)))
         (_.coverage [/.next]
           (and (|> (tree.branch dummy
                                 (list (tree.leaf expected)
                                       (tree.leaf dummy)))
                    /.zipper
                    (pipe.do maybe.monad
                      [/.next]
                      [/.value (n.= expected) in])
                    (maybe.else false))
                (|> (tree.branch dummy
                                 (list (tree.leaf dummy)
                                       (tree.leaf expected)))
                    /.zipper
                    (pipe.do maybe.monad
                      [/.next]
                      [/.next]
                      [/.value (n.= expected) in])
                    (maybe.else false))))
         (_.coverage [/.end]
           (|> (tree.branch dummy
                            (list (tree.leaf dummy)
                                  (tree.leaf dummy)
                                  (tree.leaf dummy)
                                  (tree.leaf expected)))
               /.zipper
               (pipe.do maybe.monad
                 [/.end]
                 [/.value (n.= expected) in])
               (maybe.else false)))
         (_.coverage [/.start]
           (|> (tree.branch expected
                            (list (tree.leaf dummy)
                                  (tree.leaf dummy)
                                  (tree.leaf dummy)
                                  (tree.leaf dummy)))
               /.zipper
               (pipe.do maybe.monad
                 [/.end]
                 [/.start]
                 [/.value (n.= expected) in])
               (maybe.else false)))
         (_.coverage [/.previous]
           (and (|> (tree.branch expected
                                 (list (tree.leaf dummy)
                                       (tree.leaf dummy)))
                    /.zipper
                    (pipe.do maybe.monad
                      [/.next]
                      [/.previous]
                      [/.value (n.= expected) in])
                    (maybe.else false))
                (|> (tree.branch dummy
                                 (list (tree.leaf expected)
                                       (tree.leaf dummy)))
                    /.zipper
                    (pipe.do maybe.monad
                      [/.next]
                      [/.next]
                      [/.previous]
                      [/.value (n.= expected) in])
                    (maybe.else false))))
         )))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Zipper
              /.#family /.#node])
      (do [! random.monad]
        [[size sample] (//.tree random.nat)
         expected random.nat
         dummy (random.only (|>> (n.= expected) not) random.nat)
         .let [(open "tree#[0]") (tree.equivalence n.equivalence)
               (open "list#[0]") (list.equivalence n.equivalence)]]
        (all _.and
             (_.for [/.equivalence]
                    ($equivalence.spec (/.equivalence n.equivalence) (of ! each (|>> product.right /.zipper) (//.tree random.nat))))
             (_.for [/.functor]
                    (functorT.spec (|>> tree.leaf /.zipper) /.equivalence /.functor))
             (_.for [/.comonad]
                    ($comonad.spec (|>> tree.leaf /.zipper) /.equivalence /.comonad))
             
             (_.coverage [/.zipper /.tree]
               (|> sample /.zipper /.tree (tree#= sample)))
             (_.coverage [/.start?]
               (|> sample /.zipper /.start?))
             (_.coverage [/.leaf?]
               (/.leaf? (/.zipper (tree.leaf expected))))
             (_.coverage [/.branch?]
               (and (/.branch? (/.zipper (tree.branch expected (list (tree.leaf expected)))))
                    (not (/.branch? (/.zipper (tree.branch expected (list)))))))
             (_.coverage [/.value]
               (and (n.= expected (/.value (/.zipper (tree.leaf expected))))
                    (n.= expected (/.value (/.zipper (tree.branch expected (list (tree.leaf expected))))))))
             (_.coverage [/.set]
               (|> (/.zipper (tree.leaf dummy))
                   (/.set expected)
                   /.value
                   (n.= expected)))
             (_.coverage [/.update]
               (|> (/.zipper (tree.leaf expected))
                   (/.update ++)
                   /.value
                   (n.= (++ expected))))
             ..move
             (_.coverage [/.end?]
               (or (/.end? (/.zipper sample))
                   (|> sample
                       /.zipper
                       /.end
                       (maybe#each /.end?)
                       (maybe.else false))))
             (_.coverage [/.interpose]
               (let [cursor (|> (tree.branch dummy (list (tree.leaf dummy)))
                                /.zipper
                                (/.interpose expected))]
                 (and (n.= dummy (/.value cursor))
                      (|> cursor
                          (pipe.do maybe.monad
                            [/.down]
                            [/.value (n.= expected) in])
                          (maybe.else false))
                      (|> cursor
                          (pipe.do maybe.monad
                            [/.down]
                            [/.down]
                            [/.value (n.= dummy) in])
                          (maybe.else false)))))
             (_.coverage [/.adopt]
               (let [cursor (|> (tree.branch dummy (list (tree.leaf dummy)))
                                /.zipper
                                (/.adopt expected))]
                 (and (n.= dummy (/.value cursor))
                      (|> cursor
                          (pipe.do maybe.monad
                            [/.down]
                            [/.value (n.= expected) in])
                          (maybe.else false))
                      (|> cursor
                          (pipe.do maybe.monad
                            [/.down]
                            [/.right]
                            [/.value (n.= dummy) in])
                          (maybe.else false)))))
             (_.coverage [/.insert_left]
               (|> (tree.branch dummy (list (tree.leaf dummy)))
                   /.zipper
                   (pipe.do maybe.monad
                     [/.down]
                     [(/.insert_left expected)]
                     [/.left]
                     [/.value (n.= expected) in])
                   (maybe.else false)))
             (_.coverage [/.insert_right]
               (|> (tree.branch dummy (list (tree.leaf dummy)))
                   /.zipper
                   (pipe.do maybe.monad
                     [/.down]
                     [(/.insert_right expected)]
                     [/.right]
                     [/.value (n.= expected) in])
                   (maybe.else false)))
             (_.coverage [/.remove]
               (|> (tree.branch dummy (list (tree.leaf dummy)))
                   /.zipper
                   (pipe.do maybe.monad
                     [/.down]
                     [(/.insert_left expected)]
                     [/.remove]
                     [/.value (n.= expected) in])
                   (maybe.else false)))
             ))))
