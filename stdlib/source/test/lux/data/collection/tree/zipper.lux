(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]
      ["$." functor]
      ["$." comonad]]}]
   [control
    pipe]
   [data
    ["." product]
    ["." maybe ("#\." functor)]
    ["." text]
    [collection
     ["." list]]]
   [math
    ["." random]
    [number
     ["n" nat]]]]
  ["." //]
  {1
   ["." / (#+ Zipper)
    ["tree" //]]})

(def: move
  Test
  (do random.monad
    [expected random.nat
     dummy (random.filter (|>> (n.= expected) not) random.nat)]
    ($_ _.and
        (_.cover [/.down]
                 (|> (tree.branch dummy (list (tree.leaf expected)))
                     /.zip
                     (do> maybe.monad
                          [/.down]
                          [/.value (n.= expected) wrap])
                     (maybe.default false)))
        (_.cover [/.up]
                 (|> (tree.branch expected (list (tree.leaf dummy)))
                     /.zip
                     (do> maybe.monad
                          [/.down]
                          [/.up]
                          [/.value (n.= expected) wrap])
                     (maybe.default false)))
        (_.cover [/.right]
                 (|> (tree.branch dummy (list (tree.leaf dummy) (tree.leaf expected)))
                     /.zip
                     (do> maybe.monad
                          [/.down]
                          [/.right]
                          [/.value (n.= expected) wrap])
                     (maybe.default false)))
        (_.cover [/.rightmost]
                 (|> (tree.branch dummy
                                  (list (tree.leaf dummy)
                                        (tree.leaf dummy)
                                        (tree.leaf dummy)
                                        (tree.leaf expected)))
                     /.zip
                     (do> maybe.monad
                          [/.down]
                          [/.rightmost]
                          [/.value (n.= expected) wrap])
                     (maybe.default false)))
        (_.cover [/.left]
                 (|> (tree.branch dummy (list (tree.leaf expected) (tree.leaf dummy)))
                     /.zip
                     (do> maybe.monad
                          [/.down]
                          [/.right]
                          [/.left]
                          [/.value (n.= expected) wrap])
                     (maybe.default false)))
        (_.cover [/.leftmost]
                 (|> (tree.branch dummy
                                  (list (tree.leaf expected)
                                        (tree.leaf dummy)
                                        (tree.leaf dummy)
                                        (tree.leaf dummy)))
                     /.zip
                     (do> maybe.monad
                          [/.down]
                          [/.rightmost]
                          [/.leftmost]
                          [/.value (n.= expected) wrap])
                     (maybe.default false)))
        (_.cover [/.next]
                 (and (|> (tree.branch dummy
                                       (list (tree.leaf expected)
                                             (tree.leaf dummy)))
                          /.zip
                          (do> maybe.monad
                               [/.next]
                               [/.value (n.= expected) wrap])
                          (maybe.default false))
                      (|> (tree.branch dummy
                                       (list (tree.leaf dummy)
                                             (tree.leaf expected)))
                          /.zip
                          (do> maybe.monad
                               [/.next]
                               [/.next]
                               [/.value (n.= expected) wrap])
                          (maybe.default false))))
        (_.cover [/.end]
                 (|> (tree.branch dummy
                                  (list (tree.leaf dummy)
                                        (tree.leaf dummy)
                                        (tree.leaf dummy)
                                        (tree.leaf expected)))
                     /.zip
                     (do> maybe.monad
                          [/.end]
                          [/.value (n.= expected) wrap])
                     (maybe.default false)))
        (_.cover [/.start]
                 (|> (tree.branch expected
                                  (list (tree.leaf dummy)
                                        (tree.leaf dummy)
                                        (tree.leaf dummy)
                                        (tree.leaf dummy)))
                     /.zip
                     (do> maybe.monad
                          [/.end]
                          [/.start]
                          [/.value (n.= expected) wrap])
                     (maybe.default false)))
        (_.cover [/.previous]
                 (and (|> (tree.branch expected
                                       (list (tree.leaf dummy)
                                             (tree.leaf dummy)))
                          /.zip
                          (do> maybe.monad
                               [/.next]
                               [/.previous]
                               [/.value (n.= expected) wrap])
                          (maybe.default false))
                      (|> (tree.branch dummy
                                       (list (tree.leaf expected)
                                             (tree.leaf dummy)))
                          /.zip
                          (do> maybe.monad
                               [/.next]
                               [/.next]
                               [/.previous]
                               [/.value (n.= expected) wrap])
                          (maybe.default false))))
        )))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Zipper])
      (do {! random.monad}
        [[size sample] (//.tree random.nat)
         expected random.nat
         dummy (random.filter (|>> (n.= expected) not) random.nat)
         #let [(^open "tree\.") (tree.equivalence n.equivalence)
               (^open "list\.") (list.equivalence n.equivalence)]]
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec (/.equivalence n.equivalence) (\ ! map (|>> product.right /.zip) (//.tree random.nat))))
            (_.for [/.functor]
                   ($functor.spec (|>> tree.leaf /.zip) /.equivalence /.functor))
            (_.for [/.comonad]
                   ($comonad.spec (|>> tree.leaf /.zip) /.equivalence /.comonad))
            
            (_.cover [/.zip /.unzip]
                     (|> sample /.zip /.unzip (tree\= sample)))
            (_.cover [/.start?]
                     (|> sample /.zip /.start?))
            (_.cover [/.leaf?]
                     (/.leaf? (/.zip (tree.leaf expected))))
            (_.cover [/.branch?]
                     (and (/.branch? (/.zip (tree.branch expected (list (tree.leaf expected)))))
                          (not (/.branch? (/.zip (tree.branch expected (list)))))))
            (_.cover [/.value]
                     (and (n.= expected (/.value (/.zip (tree.leaf expected))))
                          (n.= expected (/.value (/.zip (tree.branch expected (list (tree.leaf expected))))))))
            (_.cover [/.set]
                     (|> (/.zip (tree.leaf dummy))
                         (/.set expected)
                         /.value
                         (n.= expected)))
            (_.cover [/.update]
                     (|> (/.zip (tree.leaf expected))
                         (/.update inc)
                         /.value
                         (n.= (inc expected))))
            ..move
            (_.cover [/.end?]
                     (or (/.end? (/.zip sample))
                         (|> sample
                             /.zip
                             /.end
                             (maybe\map /.end?)
                             (maybe.default false))))
            (_.cover [/.interpose]
                     (let [cursor (|> (tree.branch dummy (list (tree.leaf dummy)))
                                      /.zip
                                      (/.interpose expected))]
                       (and (n.= dummy (/.value cursor))
                            (|> cursor
                                (do> maybe.monad
                                     [/.down]
                                     [/.value (n.= expected) wrap])
                                (maybe.default false))
                            (|> cursor
                                (do> maybe.monad
                                     [/.down]
                                     [/.down]
                                     [/.value (n.= dummy) wrap])
                                (maybe.default false)))))
            (_.cover [/.adopt]
                     (let [cursor (|> (tree.branch dummy (list (tree.leaf dummy)))
                                      /.zip
                                      (/.adopt expected))]
                       (and (n.= dummy (/.value cursor))
                            (|> cursor
                                (do> maybe.monad
                                     [/.down]
                                     [/.value (n.= expected) wrap])
                                (maybe.default false))
                            (|> cursor
                                (do> maybe.monad
                                     [/.down]
                                     [/.right]
                                     [/.value (n.= dummy) wrap])
                                (maybe.default false)))))
            (_.cover [/.insert-left]
                     (|> (tree.branch dummy (list (tree.leaf dummy)))
                         /.zip
                         (do> maybe.monad
                              [/.down]
                              [(/.insert-left expected)]
                              [/.left]
                              [/.value (n.= expected) wrap])
                         (maybe.default false)))
            (_.cover [/.insert-right]
                     (|> (tree.branch dummy (list (tree.leaf dummy)))
                         /.zip
                         (do> maybe.monad
                              [/.down]
                              [(/.insert-right expected)]
                              [/.right]
                              [/.value (n.= expected) wrap])
                         (maybe.default false)))
            (_.cover [/.remove]
                     (|> (tree.branch dummy (list (tree.leaf dummy)))
                         /.zip
                         (do> maybe.monad
                              [/.down]
                              [(/.insert-left expected)]
                              [/.remove]
                              [/.value (n.= expected) wrap])
                         (maybe.default false)))
            ))))
