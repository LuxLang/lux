(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    [abstract
     [monad {"+" [do]}]
     [\\specification
      ["$." equivalence]
      ["$." functor]
      ["$." comonad]]]
    [control
     pipe
     ["." maybe ("#\." functor)]]
    [data
     ["." product]
     ["." text]
     [collection
      ["." list]]]
    [math
     ["." random]
     [number
      ["n" nat]]]]]
  ["." //]
  [\\library
   ["." / {"+" [Zipper]}
    ["tree" //]]])

(def: move
  Test
  (do random.monad
    [expected random.nat
     dummy (random.only (|>> (n.= expected) not) random.nat)]
    ($_ _.and
        (_.cover [/.down]
                 (|> (tree.branch dummy (list (tree.leaf expected)))
                     /.zipper
                     (do> maybe.monad
                          [/.down]
                          [/.value (n.= expected) in])
                     (maybe.else false)))
        (_.cover [/.up]
                 (|> (tree.branch expected (list (tree.leaf dummy)))
                     /.zipper
                     (do> maybe.monad
                          [/.down]
                          [/.up]
                          [/.value (n.= expected) in])
                     (maybe.else false)))
        (_.cover [/.right]
                 (|> (tree.branch dummy (list (tree.leaf dummy) (tree.leaf expected)))
                     /.zipper
                     (do> maybe.monad
                          [/.down]
                          [/.right]
                          [/.value (n.= expected) in])
                     (maybe.else false)))
        (_.cover [/.rightmost]
                 (|> (tree.branch dummy
                                  (list (tree.leaf dummy)
                                        (tree.leaf dummy)
                                        (tree.leaf dummy)
                                        (tree.leaf expected)))
                     /.zipper
                     (do> maybe.monad
                          [/.down]
                          [/.rightmost]
                          [/.value (n.= expected) in])
                     (maybe.else false)))
        (_.cover [/.left]
                 (|> (tree.branch dummy (list (tree.leaf expected) (tree.leaf dummy)))
                     /.zipper
                     (do> maybe.monad
                          [/.down]
                          [/.right]
                          [/.left]
                          [/.value (n.= expected) in])
                     (maybe.else false)))
        (_.cover [/.leftmost]
                 (|> (tree.branch dummy
                                  (list (tree.leaf expected)
                                        (tree.leaf dummy)
                                        (tree.leaf dummy)
                                        (tree.leaf dummy)))
                     /.zipper
                     (do> maybe.monad
                          [/.down]
                          [/.rightmost]
                          [/.leftmost]
                          [/.value (n.= expected) in])
                     (maybe.else false)))
        (_.cover [/.next]
                 (and (|> (tree.branch dummy
                                       (list (tree.leaf expected)
                                             (tree.leaf dummy)))
                          /.zipper
                          (do> maybe.monad
                               [/.next]
                               [/.value (n.= expected) in])
                          (maybe.else false))
                      (|> (tree.branch dummy
                                       (list (tree.leaf dummy)
                                             (tree.leaf expected)))
                          /.zipper
                          (do> maybe.monad
                               [/.next]
                               [/.next]
                               [/.value (n.= expected) in])
                          (maybe.else false))))
        (_.cover [/.end]
                 (|> (tree.branch dummy
                                  (list (tree.leaf dummy)
                                        (tree.leaf dummy)
                                        (tree.leaf dummy)
                                        (tree.leaf expected)))
                     /.zipper
                     (do> maybe.monad
                          [/.end]
                          [/.value (n.= expected) in])
                     (maybe.else false)))
        (_.cover [/.start]
                 (|> (tree.branch expected
                                  (list (tree.leaf dummy)
                                        (tree.leaf dummy)
                                        (tree.leaf dummy)
                                        (tree.leaf dummy)))
                     /.zipper
                     (do> maybe.monad
                          [/.end]
                          [/.start]
                          [/.value (n.= expected) in])
                     (maybe.else false)))
        (_.cover [/.previous]
                 (and (|> (tree.branch expected
                                       (list (tree.leaf dummy)
                                             (tree.leaf dummy)))
                          /.zipper
                          (do> maybe.monad
                               [/.next]
                               [/.previous]
                               [/.value (n.= expected) in])
                          (maybe.else false))
                      (|> (tree.branch dummy
                                       (list (tree.leaf expected)
                                             (tree.leaf dummy)))
                          /.zipper
                          (do> maybe.monad
                               [/.next]
                               [/.next]
                               [/.previous]
                               [/.value (n.= expected) in])
                          (maybe.else false))))
        )))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Zipper])
      (do [! random.monad]
        [[size sample] (//.tree random.nat)
         expected random.nat
         dummy (random.only (|>> (n.= expected) not) random.nat)
         .let [(^open "tree\.") (tree.equivalence n.equivalence)
               (^open "list\.") (list.equivalence n.equivalence)]]
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec (/.equivalence n.equivalence) (\ ! each (|>> product.right /.zipper) (//.tree random.nat))))
            (_.for [/.functor]
                   ($functor.spec (|>> tree.leaf /.zipper) /.equivalence /.functor))
            (_.for [/.comonad]
                   ($comonad.spec (|>> tree.leaf /.zipper) /.equivalence /.comonad))
            
            (_.cover [/.zipper /.tree]
                     (|> sample /.zipper /.tree (tree\= sample)))
            (_.cover [/.start?]
                     (|> sample /.zipper /.start?))
            (_.cover [/.leaf?]
                     (/.leaf? (/.zipper (tree.leaf expected))))
            (_.cover [/.branch?]
                     (and (/.branch? (/.zipper (tree.branch expected (list (tree.leaf expected)))))
                          (not (/.branch? (/.zipper (tree.branch expected (list)))))))
            (_.cover [/.value]
                     (and (n.= expected (/.value (/.zipper (tree.leaf expected))))
                          (n.= expected (/.value (/.zipper (tree.branch expected (list (tree.leaf expected))))))))
            (_.cover [/.set]
                     (|> (/.zipper (tree.leaf dummy))
                         (/.set expected)
                         /.value
                         (n.= expected)))
            (_.cover [/.update]
                     (|> (/.zipper (tree.leaf expected))
                         (/.update ++)
                         /.value
                         (n.= (++ expected))))
            ..move
            (_.cover [/.end?]
                     (or (/.end? (/.zipper sample))
                         (|> sample
                             /.zipper
                             /.end
                             (maybe\each /.end?)
                             (maybe.else false))))
            (_.cover [/.interpose]
                     (let [cursor (|> (tree.branch dummy (list (tree.leaf dummy)))
                                      /.zipper
                                      (/.interpose expected))]
                       (and (n.= dummy (/.value cursor))
                            (|> cursor
                                (do> maybe.monad
                                     [/.down]
                                     [/.value (n.= expected) in])
                                (maybe.else false))
                            (|> cursor
                                (do> maybe.monad
                                     [/.down]
                                     [/.down]
                                     [/.value (n.= dummy) in])
                                (maybe.else false)))))
            (_.cover [/.adopt]
                     (let [cursor (|> (tree.branch dummy (list (tree.leaf dummy)))
                                      /.zipper
                                      (/.adopt expected))]
                       (and (n.= dummy (/.value cursor))
                            (|> cursor
                                (do> maybe.monad
                                     [/.down]
                                     [/.value (n.= expected) in])
                                (maybe.else false))
                            (|> cursor
                                (do> maybe.monad
                                     [/.down]
                                     [/.right]
                                     [/.value (n.= dummy) in])
                                (maybe.else false)))))
            (_.cover [/.insert_left]
                     (|> (tree.branch dummy (list (tree.leaf dummy)))
                         /.zipper
                         (do> maybe.monad
                              [/.down]
                              [(/.insert_left expected)]
                              [/.left]
                              [/.value (n.= expected) in])
                         (maybe.else false)))
            (_.cover [/.insert_right]
                     (|> (tree.branch dummy (list (tree.leaf dummy)))
                         /.zipper
                         (do> maybe.monad
                              [/.down]
                              [(/.insert_right expected)]
                              [/.right]
                              [/.value (n.= expected) in])
                         (maybe.else false)))
            (_.cover [/.remove]
                     (|> (tree.branch dummy (list (tree.leaf dummy)))
                         /.zipper
                         (do> maybe.monad
                              [/.down]
                              [(/.insert_left expected)]
                              [/.remove]
                              [/.value (n.= expected) in])
                         (maybe.else false)))
            ))))
