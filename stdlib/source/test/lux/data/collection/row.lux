(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]
      ["$." monoid]
      ["$." fold]
      ["$." functor (#+ Injection)]
      ["$." apply]
      ["$." monad]]}]
   [control
    ["." try]]
   [data
    [number
     ["n" nat]]
    [collection
     ["." list ("#@." fold)]]]
   [math
    ["r" random]]]
  {1
   ["." / ("#@." monad)]})

(def: #export test
  Test
  (<| (_.context (%.name (name-of /._)))
      (do {@ r.monad}
        [size (|> r.nat (:: @ map (|>> (n.% 100) (n.max 10))))]
        ($_ _.and
            ($equivalence.spec (/.equivalence n.equivalence) (r.row size r.nat))
            ($monoid.spec (/.equivalence n.equivalence) /.monoid (r.row size r.nat))
            ($fold.spec /@wrap /.equivalence /.fold)
            ($functor.spec /@wrap /.equivalence /.functor)
            ($apply.spec /@wrap /.equivalence /.apply)
            ($monad.spec /@wrap /.equivalence /.monad)

            (do @
              [idx (|> r.nat (:: @ map (n.% size)))
               sample (r.row size r.nat)
               other-sample (r.row size r.nat)
               non-member (|> r.nat (r.filter (|>> (/.member? n.equivalence sample) not)))
               #let [(^open "/@.") (/.equivalence n.equivalence)]]
              ($_ _.and
                  (_.test (format (%.name (name-of /.size))
                                  " " (%.name (name-of /.empty?)))
                          (if (/.empty? sample)
                            (and (n.= 0 size)
                                 (n.= 0 (/.size sample)))
                            (n.= size (/.size sample))))
                  (_.test (format (%.name (name-of /.add))
                                  " " (%.name (name-of /.pop)))
                          (and (n.= (inc size) (/.size (/.add non-member sample)))
                               (n.= (dec size) (/.size (/.pop sample)))))
                  (_.test (format (%.name (name-of /.put))
                                  " &&& " (%.name (name-of /.nth)))
                          (|> sample
                              (/.put idx non-member) try.assume
                              (/.nth idx) try.assume
                              (is? non-member)))
                  (_.test (%.name (name-of /.update))
                          (|> sample
                              (/.put idx non-member) try.assume
                              (/.update idx inc) try.assume
                              (/.nth idx) try.assume
                              (n.= (inc non-member))))
                  (_.test (format (%.name (name-of /.to-list))
                                  " &&& " (%.name (name-of /.from-list)))
                          (|> sample /.to-list /.from-list (/@= sample)))
                  (_.test (%.name (name-of /.member?))
                          (and (not (/.member? n.equivalence sample non-member))
                               (/.member? n.equivalence (/.add non-member sample) non-member)))
                  (_.test (%.name (name-of /.reverse))
                          (and (not (/@= sample
                                         (/.reverse sample)))
                               (/@= sample
                                    (/.reverse (/.reverse sample)))))
                  ))
            ))))
