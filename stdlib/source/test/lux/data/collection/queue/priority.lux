(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." maybe]
    [number
     ["n" nat]]]
   [math
    ["r" random (#+ Random)]]]
  {1
   ["." / (#+ Queue)]})

(def: #export (queue size)
  (-> Nat (Random (Queue Nat)))
  (do r.monad
    [inputs (r.list size r.nat)]
    (monad.fold @ (function (_ head tail)
                    (do @
                      [priority r.nat]
                      (wrap (/.push priority head tail))))
                /.empty
                inputs)))

(def: #export test
  Test
  (<| (_.context (%.name (name-of /.Queue)))
      (do r.monad
        [size (|> r.nat (:: @ map (n.% 100)))
         sample (..queue size)
         non-member-priority r.nat
         non-member (|> r.nat (r.filter (|>> (/.member? n.equivalence sample) not)))]
        ($_ _.and
            (_.test "I can query the size of a queue (and empty queues have size 0)."
                    (n.= size (/.size sample)))
            (_.test "Enqueueing and dequeing affects the size of queues."
                    (and (n.= (inc size)
                              (/.size (/.push non-member-priority non-member sample)))
                         (or (n.= 0 (/.size sample))
                             (n.= (dec size)
                                  (/.size (/.pop sample))))))
            (_.test "I can query whether an element belongs to a queue."
                    (and (and (not (/.member? n.equivalence sample non-member))
                              (/.member? n.equivalence
                                         (/.push non-member-priority non-member sample)
                                         non-member))
                         (or (n.= 0 (/.size sample))
                             (and (/.member? n.equivalence
                                             sample
                                             (maybe.assume (/.peek sample)))
                                  (not (/.member? n.equivalence
                                                  (/.pop sample)
                                                  (maybe.assume (/.peek sample))))))))
            ))))
