(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    ["." monad (#+ do)]]
   [data
    ["." maybe ("#\." functor)]
    ["." bit ("#\." equivalence)]
    [number
     ["n" nat]]]
   [math
    ["." random (#+ Random)]]]
  {1
   ["." / (#+ Queue)]})

(def: #export (random size)
  (-> Nat (Random (Queue Nat)))
  (do {! random.monad}
    [inputs (random.list size random.nat)]
    (monad.fold ! (function (_ head tail)
                    (do !
                      [priority random.nat]
                      (wrap (/.push priority head tail))))
                /.empty
                inputs)))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.Queue])
      (do {! random.monad}
        [size (:: ! map (n.% 100) random.nat)
         sample (..random size)
         non-member-priority random.nat
         non-member (random.filter (|>> (/.member? n.equivalence sample) not)
                                   random.nat)

         max-member random.nat
         min-member random.nat]
        ($_ _.and
            (_.cover [/.size]
                     (n.= size (/.size sample)))
            (_.cover [/.empty?]
                     (bit\= (n.= 0 (/.size sample))
                            (/.empty? sample)))
            (_.cover [/.empty]
                     (/.empty? /.empty))
            (_.cover [/.peek]
                     (case (/.peek sample)
                       (#.Some first)
                       (n.> 0 (/.size sample))
                       
                       #.None
                       (/.empty? sample)))
            (_.cover [/.member?]
                     (case (/.peek sample)
                       (#.Some first)
                       (/.member? n.equivalence sample first)
                       
                       #.None
                       (/.empty? sample)))
            (_.cover [/.push]
                     (let [sample+ (/.push non-member-priority non-member sample)]
                       (and (not (/.member? n.equivalence sample non-member))
                            (n.= (inc (/.size sample))
                                 (/.size sample+))
                            (/.member? n.equivalence sample+ non-member))))
            (_.cover [/.pop]
                     (let [sample- (/.pop sample)]
                       (or (and (/.empty? sample)
                                (/.empty? sample-))
                           (n.= (dec (/.size sample))
                                (/.size sample-)))))
            (_.with-cover [/.Priority]
              ($_ _.and
                  (_.cover [/.max]
                           (|> /.empty
                               (/.push /.min min-member)
                               (/.push /.max max-member)
                               /.peek
                               (maybe\map (n.= max-member))
                               (maybe.default false)))
                  (_.cover [/.min]
                           (|> /.empty
                               (/.push /.max max-member)
                               (/.push /.min min-member)
                               /.pop
                               /.peek
                               (maybe\map (n.= min-member))
                               (maybe.default false)))
                  ))
            ))))
