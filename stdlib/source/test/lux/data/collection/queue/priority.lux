(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     ["." monad (#+ do)]]
    [data
     ["." maybe ("#\." functor)]
     ["." bit ("#\." equivalence)]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." / (#+ Queue)]])

(def: #export (random size)
  (-> Nat (Random (Queue Nat)))
  (do {! random.monad}
    [inputs (random.list size random.nat)]
    (monad.fold ! (function (_ head tail)
                    (do !
                      [priority random.nat]
                      (in (/.push priority head tail))))
                /.empty
                inputs)))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Queue])
      (do {! random.monad}
        [size (\ ! map (n.% 100) random.nat)
         sample (..random size)
         non_member_priority random.nat
         non_member (random.only (|>> (/.member? n.equivalence sample) not)
                                 random.nat)

         max_member random.nat
         min_member random.nat]
        ($_ _.and
            (_.cover [/.size]
                     (n.= size (/.size sample)))
            (_.cover [/.empty?]
                     (bit\= (n.= 0 (/.size sample))
                            (/.empty? sample)))
            (_.cover [/.empty]
                     (/.empty? /.empty))
            (_.cover [/.peek]
                     (case (/.peek sample)
                       (#.Some first)
                       (n.> 0 (/.size sample))
                       
                       #.None
                       (/.empty? sample)))
            (_.cover [/.member?]
                     (case (/.peek sample)
                       (#.Some first)
                       (/.member? n.equivalence sample first)
                       
                       #.None
                       (/.empty? sample)))
            (_.cover [/.push]
                     (let [sample+ (/.push non_member_priority non_member sample)]
                       (and (not (/.member? n.equivalence sample non_member))
                            (n.= (inc (/.size sample))
                                 (/.size sample+))
                            (/.member? n.equivalence sample+ non_member))))
            (_.cover [/.pop]
                     (let [sample- (/.pop sample)]
                       (or (and (/.empty? sample)
                                (/.empty? sample-))
                           (n.= (dec (/.size sample))
                                (/.size sample-)))))
            (_.for [/.Priority]
                   ($_ _.and
                       (_.cover [/.max]
                                (|> /.empty
                                    (/.push /.min min_member)
                                    (/.push /.max max_member)
                                    /.peek
                                    (maybe\map (n.= max_member))
                                    (maybe.default false)))
                       (_.cover [/.min]
                                (|> /.empty
                                    (/.push /.max max_member)
                                    (/.push /.min min_member)
                                    /.pop
                                    /.peek
                                    (maybe\map (n.= min_member))
                                    (maybe.default false)))
                       ))
            ))))
