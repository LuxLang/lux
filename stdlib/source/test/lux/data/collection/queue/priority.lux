... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only Queue)]])

(the .public (random size)
  (-> Nat (Random (Queue Nat)))
  (do [! random.monad]
    [inputs (random.list size random.nat)]
    (monad.mix ! (function (_ head tail)
                   (do !
                     [priority random.nat]
                     (in (/.end priority head tail))))
               /.empty
               inputs)))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Queue])
      (do [! random.monad]
        [size (of ! each (n.% 100) random.nat)
         sample (..random size)
         non_member_priority random.nat
         non_member (random.only (|>> (/.member? n.equivalence sample) not)
                                 random.nat)

         max_member random.nat
         min_member random.nat]
        (all _.and
             (_.coverage [/.size]
               (n.= size (/.size sample)))
             (_.coverage [/.empty?]
               (bit#= (n.= 0 (/.size sample))
                      (/.empty? sample)))
             (_.coverage [/.empty]
               (/.empty? /.empty))
             (_.coverage [/.front]
               (when (/.front sample)
                 {.#Some first}
                 (n.> 0 (/.size sample))
                 
                 {.#None}
                 (/.empty? sample)))
             (_.coverage [/.member?]
               (when (/.front sample)
                 {.#Some first}
                 (/.member? n.equivalence sample first)
                 
                 {.#None}
                 (/.empty? sample)))
             (_.coverage [/.end]
               (let [sample+ (/.end non_member_priority non_member sample)]
                 (and (not (/.member? n.equivalence sample non_member))
                      (n.= (++ (/.size sample))
                           (/.size sample+))
                      (/.member? n.equivalence sample+ non_member))))
             (_.coverage [/.next]
               (let [sample- (/.next sample)]
                 (or (and (/.empty? sample)
                          (/.empty? sample-))
                     (n.= (-- (/.size sample))
                          (/.size sample-)))))
             (_.for [/.Priority]
                    (all _.and
                         (_.coverage [/.max]
                           (|> /.empty
                               (/.end /.min min_member)
                               (/.end /.max max_member)
                               /.front
                               (maybe#each (n.= max_member))
                               (maybe.else false)))
                         (_.coverage [/.min]
                           (|> /.empty
                               (/.end /.max max_member)
                               (/.end /.min min_member)
                               /.next
                               /.front
                               (maybe#each (n.= min_member))
                               (maybe.else false)))
                         ))
             ))))
