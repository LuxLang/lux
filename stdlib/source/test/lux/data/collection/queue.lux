(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." equivalence]
      ["$." functor (#+ Injection)]]}]
   [data
    [number
     ["n" nat]]]
   [math
    ["r" random]]]
  {1
   ["." /]})

(def: injection
  (Injection /.Queue)
  (|>> list /.from-list))

(def: #export test
  Test
  (<| (_.context (%.name (name-of /.Queue)))
      (do r.monad
        [size (:: @ map (n.% 100) r.nat)
         sample (r.queue size r.nat)
         non-member (|> r.nat
                        (r.filter (|>> (/.member? n.equivalence sample) not)))]
        ($_ _.and
            ($equivalence.spec (/.equivalence n.equivalence) (r.queue size r.nat))
            ($functor.spec ..injection /.equivalence /.functor)
            
            (_.test "I can query the size of a queue (and empty queues have size 0)."
                    (if (n.= 0 size)
                      (/.empty? sample)
                      (n.= size (/.size sample))))
            (_.test "Enqueueing and dequeing affects the size of queues."
                    (and (n.= (inc size) (/.size (/.push non-member sample)))
                         (or (/.empty? sample)
                             (n.= (dec size) (/.size (/.pop sample))))
                         (n.= size (/.size (/.pop (/.push non-member sample))))))
            (_.test "Transforming to/from list can't change the queue."
                    (let [(^open "/;.") (/.equivalence n.equivalence)]
                      (|> sample
                          /.to-list /.from-list
                          (/;= sample))))
            (_.test "I can always peek at a non-empty queue."
                    (case (/.peek sample)
                      #.None     (/.empty? sample)
                      (#.Some _) #1))
            (_.test "I can query whether an element belongs to a queue."
                    (and (not (/.member? n.equivalence sample non-member))
                         (/.member? n.equivalence (/.push non-member sample)
                                    non-member)
                         (case (/.peek sample)
                           #.None
                           (/.empty? sample)
                           
                           (#.Some first)
                           (and (/.member? n.equivalence sample first)
                                (not (/.member? n.equivalence (/.pop sample) first))))))
            ))))
