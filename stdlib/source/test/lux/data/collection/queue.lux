... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" functor
     ["[1]T" \\test (.only Injection)]]
    ["[0]" equality
     ["[1]T" \\test]]]
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" set]
     ["[0]" list (.use "[1]:[0]" monoid)]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]
   [aspect
    ["[0]" view (.only)
     ["[1]T" \\test]]]]]
 [\\library
  ["[0]" /]])

(the injection
  (Injection /.Queue)
  (|>> list
       (view.of /.list)))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Queue
              /.:front /.:rear])
      (monad.let [! random.monad]
        [size (by ! each (n.% 100) random.natural)
         members (random.set n.hash size random.natural)
         non_member (random.only (|>> (set.member? members) not)
                                 random.natural)
         .let [members (set.as_list members)
               sample (view.of /.list members)]]
        (all _.and
             (_.for [/.equality]
                    (equalityT.spec (/.equality n.equality) (random.queue size random.natural)))
             (_.for [/.functor]
                    (functorT.spec ..injection /.equality /.functor))
             (_.for [/.list]
                    (monad.let [! random.monad]
                      [size (by ! each (n.% 10) random.natural)]
                      (viewT.specification /.list
                                           (/.equality n.equality)
                                           (list.equality n.equality)
                                           
                                           (random.queue size random.natural)
                                           (random.list size random.natural))))

             (_.coverage [/.size]
               (n.= size (/.size sample)))
             (_.coverage [/.empty?]
               (bit.= (n.= 0 size) (/.empty? sample)))
             (_.coverage [/.empty]
               (let [empty_is_empty!
                     (/.empty? /.empty)

                     all_empty_queues_look_the_same!
                     (bit.= (/.empty? sample)
                            (by (/.equality n.equality) =
                                sample
                                /.empty))]
                 (and empty_is_empty!
                      all_empty_queues_look_the_same!)))
             (_.coverage [/.front]
               (when [(view.as list.stack members) (/.front sample)]
                 [{.:Top head tail} {try.:Success first}]
                 (n.= head first)
                 
                 [{.:Empty} {try.:Failure _}]
                 true

                 _
                 false))
             (_.coverage [/.member?]
               (let [every_member_is_identified!
                     (list.every? (/.member? n.equality sample)
                                  (view.as /.list sample))

                     non_member_is_not_identified!
                     (not (/.member? n.equality sample non_member))]
                 (and every_member_is_identified!
                      non_member_is_not_identified!)))
             (_.coverage [/.end]
               (let [pushed (/.end non_member sample)

                     size_increases!
                     (n.= (++ (/.size sample)) (/.size pushed))

                     new_member_is_identified!
                     (/.member? n.equality pushed non_member)

                     has_expected_order!
                     (by (list.equality n.equality) =
                         (list:composite (view.as /.list sample) (list non_member))
                         (view.as /.list pushed))]
                 (and size_increases!
                      new_member_is_identified!
                      has_expected_order!)))
             (_.coverage [/.next]
               (when (view.as list.stack members)
                 {.:Top target expected}
                 (let [popped (/.next sample)

                       size_decreases!
                       (n.= (-- (/.size sample))
                            (/.size popped))

                       popped_member_is_not_identified!
                       (not (/.member? n.equality popped target))

                       has_expected_order!
                       (by (list.equality n.equality) =
                           (view.of list.stack expected)
                           (view.as /.list popped))]
                   (and size_decreases!
                        popped_member_is_not_identified!
                        has_expected_order!))
                 
                 {.:Empty}
                 (and (/.empty? sample)
                      (/.empty? (/.next sample)))))
             ))))
