... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" functor
     ["[1]T" \\test (.only Injection)]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [error
    ["[0]" try]]
   [data
    ["[0]" bit]
    [collection
     ["[0]" set]
     ["[0]" stack (.use "[1]#[0]" monoid)]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the injection
  (Injection /.Queue)
  (|>> stack /.of_stack))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Queue
              /.#front /.#rear])
      (do [! random.monad]
        [size (by ! each (n.% 100) random.natural)
         members (random.set n.hash size random.natural)
         non_member (random.only (|>> (set.member? members) not)
                                 random.natural)
         .let [members (set.stack members)
               sample (/.of_stack members)]]
        (all _.and
             (_.for [/.equivalence]
                    (equivalenceT.spec (/.equivalence n.equivalence) (random.queue size random.natural)))
             (_.for [/.functor]
                    (functorT.spec ..injection /.equivalence /.functor))

             (_.coverage [/.of_stack /.stack]
               (|> members /.of_stack /.stack
                   (by (stack.equivalence n.equivalence) = members)))
             (_.coverage [/.size]
               (n.= size (/.size sample)))
             (_.coverage [/.empty?]
               (bit.= (n.= 0 size) (/.empty? sample)))
             (_.coverage [/.empty]
               (let [empty_is_empty!
                     (/.empty? /.empty)

                     all_empty_queues_look_the_same!
                     (bit.= (/.empty? sample)
                            (by (/.equivalence n.equivalence) =
                                sample
                                /.empty))]
                 (and empty_is_empty!
                      all_empty_queues_look_the_same!)))
             (_.coverage [/.front]
               (when [members (/.front sample)]
                 [{.#Top head tail} {try.#Success first}]
                 (n.= head first)
                 
                 [{.#Empty} {try.#Failure _}]
                 true

                 _
                 false))
             (_.coverage [/.member?]
               (let [every_member_is_identified!
                     (stack.every? (/.member? n.equivalence sample)
                                   (/.stack sample))

                     non_member_is_not_identified!
                     (not (/.member? n.equivalence sample non_member))]
                 (and every_member_is_identified!
                      non_member_is_not_identified!)))
             (_.coverage [/.end]
               (let [pushed (/.end non_member sample)

                     size_increases!
                     (n.= (++ (/.size sample)) (/.size pushed))

                     new_member_is_identified!
                     (/.member? n.equivalence pushed non_member)

                     has_expected_order!
                     (by (stack.equivalence n.equivalence) =
                         (stack#composite (/.stack sample) (stack non_member))
                         (/.stack pushed))]
                 (and size_increases!
                      new_member_is_identified!
                      has_expected_order!)))
             (_.coverage [/.next]
               (when members
                 {.#Top target expected}
                 (let [popped (/.next sample)

                       size_decreases!
                       (n.= (-- (/.size sample))
                            (/.size popped))

                       popped_member_is_not_identified!
                       (not (/.member? n.equivalence popped target))

                       has_expected_order!
                       (by (stack.equivalence n.equivalence) =
                           expected
                           (/.stack popped))]
                   (and size_decreases!
                        popped_member_is_not_identified!
                        has_expected_order!))
                 
                 {.#Empty}
                 (and (/.empty? sample)
                      (/.empty? (/.next sample)))))
             ))))
