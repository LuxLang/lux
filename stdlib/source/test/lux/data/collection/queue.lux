(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]
      ["$." functor (#+ Injection)]]]
    [data
     ["." bit ("#\." equivalence)]
     [collection
      ["." set]
      ["." list ("#\." monoid)]]]
    [math
     ["." random]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /]])

(def: injection
  (Injection /.Queue)
  (|>> list /.of_list))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Queue])
      (do {! random.monad}
        [size (\ ! map (n.% 100) random.nat)
         members (random.set n.hash size random.nat)
         non_member (random.only (|>> (set.member? members) not)
                                 random.nat)
         .let [members (set.list members)
               sample (/.of_list members)]]
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec (/.equivalence n.equivalence) (random.queue size random.nat)))
            (_.for [/.functor]
                   ($functor.spec ..injection /.equivalence /.functor))

            (_.cover [/.of_list /.list]
                     (|> members /.of_list /.list
                         (\ (list.equivalence n.equivalence) = members)))
            (_.cover [/.size]
                     (n.= size (/.size sample)))
            (_.cover [/.empty?]
                     (bit\= (n.= 0 size) (/.empty? sample)))
            (_.cover [/.empty]
                     (let [empty_is_empty!
                           (/.empty? /.empty)

                           all_empty_queues_look_the_same!
                           (bit\= (/.empty? sample)
                                  (\ (/.equivalence n.equivalence) =
                                     sample
                                     /.empty))]
                       (and empty_is_empty!
                            all_empty_queues_look_the_same!)))
            (_.cover [/.front]
                     (case [members (/.front sample)]
                       [(#.Item head tail) (#.Some first)]
                       (n.= head first)
                       
                       [#.End #.None]
                       true

                       _
                       false))
            (_.cover [/.member?]
                     (let [every_member_is_identified!
                           (list.every? (/.member? n.equivalence sample)
                                        (/.list sample))

                           non_member_is_not_identified!
                           (not (/.member? n.equivalence sample non_member))]
                       (and every_member_is_identified!
                            non_member_is_not_identified!)))
            (_.cover [/.end]
                     (let [pushed (/.end non_member sample)

                           size_increases!
                           (n.= (inc (/.size sample)) (/.size pushed))

                           new_member_is_identified!
                           (/.member? n.equivalence pushed non_member)

                           has_expected_order!
                           (\ (list.equivalence n.equivalence) =
                              (list\compose (/.list sample) (list non_member))
                              (/.list pushed))]
                       (and size_increases!
                            new_member_is_identified!
                            has_expected_order!)))
            (_.cover [/.next]
                     (case members
                       (#.Item target expected)
                       (let [popped (/.next sample)

                             size_decreases!
                             (n.= (dec (/.size sample))
                                  (/.size popped))

                             popped_member_is_not_identified!
                             (not (/.member? n.equivalence popped target))

                             has_expected_order!
                             (\ (list.equivalence n.equivalence) =
                                expected
                                (/.list popped))]
                         (and size_decreases!
                              popped_member_is_not_identified!
                              has_expected_order!))
                       
                       #.End
                       (and (/.empty? sample)
                            (/.empty? (/.next sample)))))
            ))))
