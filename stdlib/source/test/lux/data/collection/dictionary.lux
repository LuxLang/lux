(.require
 [library
  [lux (.except)
   [abstract
    [hash (.only Hash)]
    [monad (.only do)]
    ["[0]" functor
     ["[1]T" \\test (.only Injection)]]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" set]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def injection
  (Injection (/.Dictionary Nat))
  (|>> [0] list (/.of_list n.hash)))

(def for_dictionaries
  Test
  (do [! random.monad]
    [.let [capped_nat (of random.monad each (n.% 100) random.nat)]
     size capped_nat
     dict (random.dictionary n.hash size random.nat capped_nat)
     non_key (random.only (|>> (/.key? dict) not)
                          random.nat)
     test_val (random.only (|>> (list.member? n.equivalence (/.values dict)) not)
                           random.nat)]
    (all _.and
         (_.coverage [/.size]
           (n.= size (/.size dict)))
         
         (_.coverage [/.empty?]
           (when size
             0 (/.empty? dict)
             _ (not (/.empty? dict))))
         
         (_.coverage [/.empty]
           (let [sample (/.empty n.hash)]
             (and (n.= 0 (/.size sample))
                  (/.empty? sample))))

         (do !
           [constant random.nat
            .let [hash (is (Hash Nat)
                           (implementation
                            (def equivalence n.equivalence)
                            (def (hash _)
                              constant)))]]
           (_.coverage [/.key_hash]
             (same? hash (/.key_hash (/.empty hash)))))
         
         (_.coverage [/.entries]
           (let [entries (/.entries dict)

                 correct_size!
                 (n.= (/.size dict)
                      (list.size entries))

                 unique_keys!
                 (|> entries
                     (list#each product.left)
                     (set.of_list n.hash)
                     set.size
                     (n.= (/.size dict)))

                 correct_pairing!
                 (list.every? (function (_ [key value])
                                (|> dict
                                    (/.value key)
                                    (maybe#each (n.= value))
                                    (maybe.else false)))
                              entries)]
             (and correct_size!
                  unique_keys!
                  correct_pairing!)))
         (_.coverage [/.keys]
           (let [keys (/.keys dict)

                 correct_size!
                 (n.= (/.size dict)
                      (list.size keys))

                 unique_keys!
                 (|> keys
                     (set.of_list n.hash)
                     set.size
                     (n.= (/.size dict)))

                 recognized!
                 (list.every? (/.key? dict) keys)]
             (and correct_size!
                  unique_keys!
                  recognized!)))
         (_.coverage [/.values]
           (n.= (/.size dict)
                (list.size (/.values dict))))

         (_.coverage [/.composite]
           (let [merging_with_oneself (let [(open "[0]") (/.equivalence n.equivalence)]
                                        (= dict (/.composite dict dict)))
                 overwritting_keys (let [dict' (|> dict /.entries
                                                   (list#each (function (_ [k v]) [k (++ v)]))
                                                   (/.of_list n.hash))
                                         (open "[0]") (/.equivalence n.equivalence)]
                                     (= dict' (/.composite dict' dict)))]
             (and merging_with_oneself
                  overwritting_keys)))
         
         (_.coverage [/.composite_with]
           (list.every? (function (_ [x x*2]) (n.= (n.* 2 x) x*2))
                        (list.zipped_2 (/.values dict)
                                       (/.values (/.composite_with n.+ dict dict)))))

         (_.coverage [/.of_list]
           (let [(open "[0]") (/.equivalence n.equivalence)]
             (and (= dict dict)
                  (|> dict /.entries (/.of_list n.hash) (= dict)))))
         )))

(def for_entries
  Test
  (do random.monad
    [.let [capped_nat (of random.monad each (n.% 100) random.nat)]
     size capped_nat
     dict (random.dictionary n.hash size random.nat capped_nat)
     non_key (random.only (|>> (/.key? dict) not)
                          random.nat)
     test_val (random.only (|>> (list.member? n.equivalence (/.values dict)) not)
                           random.nat)]
    (all _.and
         (_.coverage [/.key?]
           (list.every? (/.key? dict)
                        (/.keys dict)))
         
         (_.coverage [/.value]
           (and (list.every? (function (_ key) (when (/.value key dict)
                                                 {.#Some _} true
                                                 _          false))
                             (/.keys dict))
                (when (/.value non_key dict)
                  {.#Some _} false
                  _          true)))
         
         (_.coverage [/.has]
           (and (n.= (++ (/.size dict))
                     (/.size (/.has non_key test_val dict)))
                (when (/.value non_key (/.has non_key test_val dict))
                  {.#Some v} (n.= test_val v)
                  _          true)))
         
         (_.coverage [/.has' /.key_already_exists]
           (let [can_put_new_keys!
                 (when (/.has' non_key test_val dict)
                   {try.#Success dict}
                   (when (/.value non_key dict)
                     {.#Some v} (n.= test_val v)
                     _          true)

                   {try.#Failure _}
                   false)
                 
                 cannot_put_old_keys!
                 (or (n.= 0 size)
                     (let [first_key (|> dict /.keys list.head maybe.trusted)]
                       (when (/.has' first_key test_val dict)
                         {try.#Success _}
                         false
                         
                         {try.#Failure error}
                         (exception.match? /.key_already_exists error))))]
             (and can_put_new_keys!
                  cannot_put_old_keys!)))
         
         (_.coverage [/.lacks]
           (and (let [base (/.has non_key test_val dict)]
                  (and (/.key? base non_key)
                       (not (/.key? (/.lacks non_key base) non_key))))
                (when (list.head (/.keys dict))
                  {.#None}
                  true
                  
                  {.#Some known_key}
                  (n.= (-- (/.size dict))
                       (/.size (/.lacks known_key dict))))))
         
         (_.coverage [/.revised]
           (let [base (/.has non_key test_val dict)
                 updt (/.revised non_key ++ base)]
             (when [(/.value non_key base) (/.value non_key updt)]
               [{.#Some x} {.#Some y}]
               (n.= (++ x) y)

               _
               false)))
         
         (_.coverage [/.revised']
           (let [can_upsert_new_key!
                 (when (/.value non_key (/.revised' non_key test_val ++ dict))
                   {.#Some inserted}
                   (n.= (++ test_val) inserted)

                   {.#None}
                   false)

                 can_upsert_old_key!
                 (when (list.head (/.entries dict))
                   {.#None}
                   true
                   
                   {.#Some [known_key known_value]}
                   (when (/.value known_key (/.revised' known_key test_val ++ dict))
                     {.#Some updated}
                     (n.= (++ known_value) updated)

                     {.#None}
                     false))]
             (and can_upsert_new_key!
                  can_upsert_old_key!)))

         (_.coverage [/.sub]
           (|> dict
               (/.has non_key test_val)
               (/.sub (list non_key))
               /.size
               (n.= 1)))
         
         (_.coverage [/.re_bound]
           (or (n.= 0 size)
               (let [first_key (|> dict /.keys list.head maybe.trusted)
                     rebound (/.re_bound first_key non_key dict)]
                 (and (n.= (/.size dict) (/.size rebound))
                      (/.key? rebound non_key)
                      (not (/.key? rebound first_key))
                      (n.= (maybe.trusted (/.value first_key dict))
                           (maybe.trusted (/.value non_key rebound)))))))
         )))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Dictionary])
      (do random.monad
        [.let [capped_nat (of random.monad each (n.% 100) random.nat)]
         size capped_nat
         dict (random.dictionary n.hash size random.nat capped_nat)
         non_key (random.only (|>> (/.key? dict) not)
                              random.nat)
         test_val (random.only (|>> (list.member? n.equivalence (/.values dict)) not)
                               random.nat)]
        (all _.and
             (_.for [/.equivalence]
                    ($equivalence.spec (/.equivalence n.equivalence)
                                       (random.dictionary n.hash size random.nat random.nat)))
             
             (_.for [/.functor]
                    (functorT.spec ..injection /.equivalence /.functor))

             ..for_dictionaries
             ..for_entries
             ))))
