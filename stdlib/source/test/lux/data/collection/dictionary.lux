(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [hash (#+ Hash)]
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]
      ["$." functor (#+ Injection)]]]
    [control
     ["." try]
     ["." exception]]
    [data
     ["." product]
     ["." maybe ("#\." functor)]
     [collection
      ["." list ("#\." functor)]
      ["." set]]]
    [math
     ["." random]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /]])

(def: injection
  (Injection (/.Dictionary Nat))
  (|>> [0] list (/.of_list n.hash)))

(def: for_dictionaries
  Test
  (do {! random.monad}
    [#let [capped_nat (\ random.monad map (n.% 100) random.nat)]
     size capped_nat
     dict (random.dictionary n.hash size random.nat capped_nat)
     non_key (random.only (|>> (/.key? dict) not)
                          random.nat)
     test_val (random.only (|>> (list.member? n.equivalence (/.values dict)) not)
                           random.nat)]
    ($_ _.and
        (_.cover [/.size]
                 (n.= size (/.size dict)))
        
        (_.cover [/.empty?]
                 (case size
                   0 (/.empty? dict)
                   _ (not (/.empty? dict))))
        
        (_.cover [/.new]
                 (let [sample (/.new n.hash)]
                   (and (n.= 0 (/.size sample))
                        (/.empty? sample))))

        (do !
          [constant random.nat
           #let [hash (: (Hash Nat)
                         (implementation
                          (def: &equivalence n.equivalence)
                          (def: (hash _)
                            constant)))]]
          (_.cover [/.key_hash]
                   (is? hash (/.key_hash (/.new hash)))))
        
        (_.cover [/.entries]
                 (let [entries (/.entries dict)

                       correct_size!
                       (n.= (/.size dict)
                            (list.size entries))

                       unique_keys!
                       (|> entries
                           (list\map product.left)
                           (set.of_list n.hash)
                           set.size
                           (n.= (/.size dict)))

                       correct_pairing!
                       (list.every? (function (_ [key value])
                                      (|> dict
                                          (/.get key)
                                          (maybe\map (n.= value))
                                          (maybe.default false)))
                                    entries)]
                   (and correct_size!
                        unique_keys!
                        correct_pairing!)))
        (_.cover [/.keys]
                 (let [keys (/.keys dict)

                       correct_size!
                       (n.= (/.size dict)
                            (list.size keys))

                       unique_keys!
                       (|> keys
                           (set.of_list n.hash)
                           set.size
                           (n.= (/.size dict)))

                       recognized!
                       (list.every? (/.key? dict) keys)]
                   (and correct_size!
                        unique_keys!
                        recognized!)))
        (_.cover [/.values]
                 (n.= (/.size dict)
                      (list.size (/.values dict))))

        (_.cover [/.merge]
                 (let [merging_with_oneself (let [(^open ".") (/.equivalence n.equivalence)]
                                              (= dict (/.merge dict dict)))
                       overwritting_keys (let [dict' (|> dict /.entries
                                                         (list\map (function (_ [k v]) [k (inc v)]))
                                                         (/.of_list n.hash))
                                               (^open ".") (/.equivalence n.equivalence)]
                                           (= dict' (/.merge dict' dict)))]
                   (and merging_with_oneself
                        overwritting_keys)))
        
        (_.cover [/.merge_with]
                 (list.every? (function (_ [x x*2]) (n.= (n.* 2 x) x*2))
                              (list.zipped/2 (/.values dict)
                                             (/.values (/.merge_with n.+ dict dict)))))

        (_.cover [/.of_list]
                 (let [(^open ".") (/.equivalence n.equivalence)]
                   (and (= dict dict)
                        (|> dict /.entries (/.of_list n.hash) (= dict)))))
        )))

(def: for_entries
  Test
  (do random.monad
    [#let [capped_nat (\ random.monad map (n.% 100) random.nat)]
     size capped_nat
     dict (random.dictionary n.hash size random.nat capped_nat)
     non_key (random.only (|>> (/.key? dict) not)
                          random.nat)
     test_val (random.only (|>> (list.member? n.equivalence (/.values dict)) not)
                           random.nat)]
    ($_ _.and
        (_.cover [/.key?]
                 (list.every? (/.key? dict)
                              (/.keys dict)))
        
        (_.cover [/.get]
                 (and (list.every? (function (_ key) (case (/.get key dict)
                                                       (#.Some _) true
                                                       _          false))
                                   (/.keys dict))
                      (case (/.get non_key dict)
                        (#.Some _) false
                        _          true)))
        
        (_.cover [/.put]
                 (and (n.= (inc (/.size dict))
                           (/.size (/.put non_key test_val dict)))
                      (case (/.get non_key (/.put non_key test_val dict))
                        (#.Some v) (n.= test_val v)
                        _          true)))
        
        (_.cover [/.try_put /.key_already_exists]
                 (let [can_put_new_keys!
                       (case (/.try_put non_key test_val dict)
                         (#try.Success dict)
                         (case (/.get non_key dict)
                           (#.Some v) (n.= test_val v)
                           _          true)

                         (#try.Failure _)
                         false)
                       
                       cannot_put_old_keys!
                       (or (n.= 0 size)
                           (let [first_key (|> dict /.keys list.head maybe.assume)]
                             (case (/.try_put first_key test_val dict)
                               (#try.Success _)
                               false
                               
                               (#try.Failure error)
                               (exception.match? /.key_already_exists error))))]
                   (and can_put_new_keys!
                        cannot_put_old_keys!)))
        
        (_.cover [/.remove]
                 (and (let [base (/.put non_key test_val dict)]
                        (and (/.key? base non_key)
                             (not (/.key? (/.remove non_key base) non_key))))
                      (case (list.head (/.keys dict))
                        #.None
                        true
                        
                        (#.Some known_key)
                        (n.= (dec (/.size dict))
                             (/.size (/.remove known_key dict))))))
        
        (_.cover [/.update]
                 (let [base (/.put non_key test_val dict)
                       updt (/.update non_key inc base)]
                   (case [(/.get non_key base) (/.get non_key updt)]
                     [(#.Some x) (#.Some y)]
                     (n.= (inc x) y)

                     _
                     false)))
        
        (_.cover [/.upsert]
                 (let [can_upsert_new_key!
                       (case (/.get non_key (/.upsert non_key test_val inc dict))
                         (#.Some inserted)
                         (n.= (inc test_val) inserted)

                         #.None
                         false)

                       can_upsert_old_key!
                       (case (list.head (/.entries dict))
                         #.None
                         true
                         
                         (#.Some [known_key known_value])
                         (case (/.get known_key (/.upsert known_key test_val inc dict))
                           (#.Some updated)
                           (n.= (inc known_value) updated)

                           #.None
                           false))]
                   (and can_upsert_new_key!
                        can_upsert_old_key!)))

        (_.cover [/.select]
                 (|> dict
                     (/.put non_key test_val)
                     (/.select (list non_key))
                     /.size
                     (n.= 1)))
        
        (_.cover [/.re_bind]
                 (or (n.= 0 size)
                     (let [first_key (|> dict /.keys list.head maybe.assume)
                           rebound (/.re_bind first_key non_key dict)]
                       (and (n.= (/.size dict) (/.size rebound))
                            (/.key? rebound non_key)
                            (not (/.key? rebound first_key))
                            (n.= (maybe.assume (/.get first_key dict))
                                 (maybe.assume (/.get non_key rebound)))))))
        )))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Dictionary])
      (do random.monad
        [#let [capped_nat (\ random.monad map (n.% 100) random.nat)]
         size capped_nat
         dict (random.dictionary n.hash size random.nat capped_nat)
         non_key (random.only (|>> (/.key? dict) not)
                              random.nat)
         test_val (random.only (|>> (list.member? n.equivalence (/.values dict)) not)
                               random.nat)]
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec (/.equivalence n.equivalence)
                                      (random.dictionary n.hash size random.nat random.nat)))
            
            (_.for [/.functor]
                   ($functor.spec ..injection /.equivalence /.functor))

            ..for_dictionaries
            ..for_entries
            ))))
