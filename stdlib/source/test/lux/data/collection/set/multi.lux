(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [hash (.only Hash)]
    [monad (.only do)]
    ["[0]" predicate]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" hash]]]
   [data
    ["[0]" bit ("[1]#[0]" equivalence)]
    [collection
     ["[0]" set]
     ["[0]" list ("[1]#[0]" mix)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" /]])

(def: count
  (Random Nat)
  (# random.monad each (|>> (n.% 10) ++) random.nat))

(def: .public (random size hash count element)
  (All (_ a) (-> Nat (Hash a) (Random Nat) (Random a) (Random (/.Set a))))
  (do [! random.monad]
    [elements (random.set hash size element)
     element_counts (random.list size ..count)]
    (in (list#mix (function (_ [count element] set)
                    (/.has count element set))
                  (/.empty hash)
                  (list.zipped_2 element_counts
                                 (set.list elements))))))

(def: signature
  Test
  (do [! random.monad]
    [diversity (# ! each (n.% 10) random.nat)]
    (all _.and
         (_.for [/.equivalence]
                ($equivalence.spec /.equivalence (..random diversity n.hash ..count random.nat)))
         (_.for [/.hash]
                (|> random.nat
                    (# random.monad each (function (_ single)
                                           (/.has 1 single (/.empty n.hash))))
                    ($hash.spec /.hash)))
         )))

(def: composition
  Test
  (do [! random.monad]
    [diversity (# ! each (n.% 10) random.nat)
     sample (..random diversity n.hash ..count random.nat)
     another (..random diversity n.hash ..count random.nat)]
    (`` (all _.and
             (~~ (template [<name> <composition>]
                   [(_.coverage [<name>]
                      (let [|sample| (/.support sample)
                            |another| (/.support another)
                            sample_only (set.difference |another| |sample|)
                            another_only (set.difference |sample| |another|)
                            common (set.intersection |sample| |another|)
                            composed (<name> sample another)

                            no_left_changes! (list.every? (function (_ member)
                                                            (n.= (/.multiplicity sample member)
                                                                 (/.multiplicity composed member)))
                                                          (set.list sample_only))
                            no_right_changes! (list.every? (function (_ member)
                                                             (n.= (/.multiplicity another member)
                                                                  (/.multiplicity composed member)))
                                                           (set.list another_only))
                            common_changes! (list.every? (function (_ member)
                                                           (n.= (<composition> (/.multiplicity sample member)
                                                                               (/.multiplicity another member))
                                                                (/.multiplicity composed member)))
                                                         (set.list common))]
                        (and no_left_changes!
                             no_right_changes!
                             common_changes!)))]

                   [/.sum n.+]
                   [/.union n.max]
                   ))
             (_.coverage [/.intersection]
               (let [|sample| (/.support sample)
                     |another| (/.support another)
                     sample_only (set.difference |another| |sample|)
                     another_only (set.difference |sample| |another|)
                     common (set.intersection |sample| |another|)
                     composed (/.intersection sample another)

                     left_removals! (list.every? (|>> (/.member? composed) not)
                                                 (set.list sample_only))
                     right_removals! (list.every? (|>> (/.member? composed) not)
                                                  (set.list another_only))
                     common_changes! (list.every? (function (_ member)
                                                    (n.= (n.min (/.multiplicity sample member)
                                                                (/.multiplicity another member))
                                                         (/.multiplicity composed member)))
                                                  (set.list common))]
                 (and left_removals!
                      right_removals!
                      common_changes!)))
             ))))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Set])
      (do [! random.monad]
        [diversity (# ! each (n.% 10) random.nat)
         sample (..random diversity n.hash ..count random.nat)
         non_member (random.only (predicate.complement (set.member? (/.support sample)))
                                 random.nat)
         addition_count ..count
         partial_removal_count (# ! each (n.% addition_count) random.nat)
         another (..random diversity n.hash ..count random.nat)]
        (all _.and
             (_.coverage [/.list /.of_list]
               (|> sample
                   /.list
                   (/.of_list n.hash)
                   (# /.equivalence = sample)))
             (_.coverage [/.size]
               (n.= (list.size (/.list sample))
                    (/.size sample)))
             (_.coverage [/.empty?]
               (bit#= (/.empty? sample)
                      (n.= 0 (/.size sample))))
             (_.coverage [/.empty]
               (/.empty? (/.empty n.hash)))
             (_.coverage [/.support]
               (list.every? (set.member? (/.support sample))
                            (/.list sample)))
             (_.coverage [/.member?]
               (let [non_member_is_not_identified!
                     (not (/.member? sample non_member))

                     all_members_are_identified!
                     (list.every? (/.member? sample)
                                  (/.list sample))]
                 (and non_member_is_not_identified!
                      all_members_are_identified!)))
             (_.coverage [/.multiplicity]
               (let [non_members_have_0_multiplicity!
                     (n.= 0 (/.multiplicity sample non_member))

                     every_member_has_positive_multiplicity!
                     (list.every? (|>> (/.multiplicity sample) (n.> 0))
                                  (/.list sample))]
                 (and non_members_have_0_multiplicity!
                      every_member_has_positive_multiplicity!)))
             (_.coverage [/.has]
               (let [null_scenario!
                     (|> sample
                         (/.has 0 non_member)
                         (# /.equivalence = sample))

                     normal_scenario!
                     (let [sample+ (/.has addition_count non_member sample)]
                       (and (not (/.member? sample non_member))
                            (/.member? sample+ non_member)
                            (n.= addition_count (/.multiplicity sample+ non_member))))]
                 (and null_scenario!
                      normal_scenario!)))
             (_.coverage [/.lacks]
               (let [null_scenario!
                     (# /.equivalence =
                        (|> sample
                            (/.has addition_count non_member))
                        (|> sample
                            (/.has addition_count non_member)
                            (/.lacks 0 non_member)))

                     partial_scenario!
                     (let [sample* (|> sample
                                       (/.has addition_count non_member)
                                       (/.lacks partial_removal_count non_member))]
                       (and (/.member? sample* non_member)
                            (n.= (n.- partial_removal_count
                                      addition_count)
                                 (/.multiplicity sample* non_member))))

                     total_scenario!
                     (|> sample
                         (/.has addition_count non_member)
                         (/.lacks addition_count non_member)
                         (# /.equivalence = sample))]
                 (and null_scenario!
                      partial_scenario!
                      total_scenario!)))
             (_.coverage [/.of_set]
               (let [unary (|> sample /.support /.of_set)]
                 (list.every? (|>> (/.multiplicity unary) (n.= 1))
                              (/.list unary))))
             (_.coverage [/.sub?]
               (let [unary (|> sample /.support /.of_set)]
                 (and (/.sub? sample unary)
                      (or (not (/.sub? unary sample))
                          (# /.equivalence = sample unary)))))
             (_.coverage [/.super?]
               (let [unary (|> sample /.support /.of_set)]
                 (and (/.super? unary sample)
                      (or (not (/.super? sample unary))
                          (# /.equivalence = sample unary)))))
             (_.coverage [/.difference]
               (let [|sample| (/.support sample)
                     |another| (/.support another)
                     sample_only (set.difference |another| |sample|)
                     another_only (set.difference |sample| |another|)
                     common (set.intersection |sample| |another|)
                     composed (/.difference sample another)

                     ommissions! (list.every? (|>> (/.member? composed) not)
                                              (set.list sample_only))
                     intact! (list.every? (function (_ member)
                                            (n.= (/.multiplicity another member)
                                                 (/.multiplicity composed member)))
                                          (set.list another_only))
                     subtractions! (list.every? (function (_ member)
                                                  (let [sample_multiplicity (/.multiplicity sample member)
                                                        another_multiplicity (/.multiplicity another member)]
                                                    (n.= (if (n.> another_multiplicity sample_multiplicity)
                                                           0
                                                           (n.- sample_multiplicity
                                                                another_multiplicity))
                                                         (/.multiplicity composed member))))
                                                (set.list common))]
                 (and ommissions!
                      intact!
                      subtractions!)))

             ..signature
             ..composition
             ))))
