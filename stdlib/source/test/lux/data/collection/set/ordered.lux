(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [order (#+ Order)]
     [\\specification
      ["$." equivalence]]]
    [data
     ["." bit ("#\." equivalence)]
     [collection
      ["." list]]]
    [math
     ["." random (#+ Random) ("#\." monad)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." / (#+ Set)
    ["." //]]])

(def: size
  (random.Random Nat)
  (\ random.monad map (n.% 100) random.nat))

(def: #export (random size &order gen_value)
  (All [a] (-> Nat (Order a) (Random a) (Random (Set a))))
  (case size
    0
    (random\in (/.empty &order))

    _
    (do random.monad
      [partial (random (dec size) &order gen_value)
       value (random.only (|>> (/.member? partial) not)
                          gen_value)]
      (in (/.add value partial)))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Set])
      (do {! random.monad}
        [sizeL ..size
         sizeR ..size
         usetL (random.set n.hash sizeL random.nat)
         non_memberL (random.only (|>> (//.member? usetL) not)
                                  random.nat)
         #let [listL (//.to_list usetL)]
         listR (|> (random.set n.hash sizeR random.nat) (\ ! map //.to_list))
         #let [(^open "/\.") /.equivalence
               setL (/.of_list n.order listL)
               setR (/.of_list n.order listR)
               empty (/.empty n.order)]]
        (`` ($_ _.and
                (_.for [/.equivalence]
                       ($equivalence.spec /.equivalence (..random sizeL n.order random.nat)))

                (_.cover [/.size]
                         (n.= sizeL (/.size setL)))
                (_.cover [/.empty?]
                         (bit\= (n.= 0 (/.size setL))
                                (/.empty? setL)))
                (_.cover [/.empty]
                         (/.empty? (/.empty n.order)))
                (_.cover [/.to_list]
                         (\ (list.equivalence n.equivalence) =
                            (/.to_list (/.of_list n.order listL))
                            (list.sort (\ n.order <) listL)))
                (_.cover [/.of_list]
                         (|> setL
                             /.to_list (/.of_list n.order)
                             (/\= setL)))
                (~~ (template [<coverage> <comparison>]
                      [(_.cover [<coverage>]
                                (case (<coverage> setL)
                                  (#.Some value)
                                  (|> setL /.to_list (list.every? (<comparison> value)))

                                  #.None
                                  (/.empty? setL)))]

                      [/.min n.>=]
                      [/.max n.<=]
                      ))
                (_.cover [/.member?]
                         (let [members_are_identified!
                               (list.every? (/.member? setL) (/.to_list setL))

                               non_members_are_not_identified!
                               (not (/.member? setL non_memberL))]
                           (and members_are_identified!
                                non_members_are_not_identified!)))
                (_.cover [/.add]
                         (let [setL+ (/.add non_memberL setL)]
                           (and (not (/.member? setL non_memberL))
                                (/.member? setL+ non_memberL)
                                (n.= (inc (/.size setL))
                                     (/.size setL+)))))
                (_.cover [/.remove]
                         (|> setL
                             (/.add non_memberL)
                             (/.remove non_memberL)
                             (\ /.equivalence = setL)))
                (_.cover [/.sub?]
                         (let [self!
                               (/.sub? setL setL)

                               empty!
                               (/.sub? setL empty)]
                           (and self!
                                empty!)))
                (_.cover [/.super?]
                         (let [self!
                               (/.super? setL setL)

                               empty!
                               (/.super? empty setL)

                               symmetry!
                               (bit\= (/.super? setL setR)
                                      (/.sub? setR setL))]
                           (and self!
                                empty!
                                symmetry!)))
                (~~ (template [<coverage> <relation> <empty?>]
                      [(_.cover [<coverage>]
                                (let [self!
                                      (\ /.equivalence =
                                         setL
                                         (<coverage> setL setL))

                                      super!
                                      (and (<relation> (<coverage> setL setR) setL)
                                           (<relation> (<coverage> setL setR) setR))

                                      empty!
                                      (\ /.equivalence =
                                         (if <empty?> empty setL)
                                         (<coverage> setL empty))

                                      idempotence!
                                      (\ /.equivalence =
                                         (<coverage> setL (<coverage> setL setR))
                                         (<coverage> setR (<coverage> setL setR)))]
                                  (and self!
                                       super!
                                       empty!
                                       idempotence!)))]

                      [/.union /.sub? false]
                      [/.intersection /.super? true]
                      ))
                (_.cover [/.difference]
                         (let [self!
                               (|> setL
                                   (/.difference setL)
                                   (\ /.equivalence = empty))

                               empty!
                               (|> setL
                                   (/.difference empty)
                                   (\ /.equivalence = setL))

                               difference!
                               (not (list.any? (/.member? (/.difference setL setR))
                                               (/.to_list setL)))

                               idempotence!
                               (\ /.equivalence =
                                  (/.difference setL setR)
                                  (/.difference setL (/.difference setL setR)))]
                           (and self!
                                empty!
                                difference!
                                idempotence!)))
                )))))
