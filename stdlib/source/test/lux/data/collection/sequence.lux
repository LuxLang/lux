(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [comonad (#+)]
    [functor (#+)]
    [monad (#+ do)]
    [equivalence (#+ Equivalence)]
    ["." enum]
    {[0 #spec]
     [/
      ["$." functor]
      ["$." comonad]]}]
   [data
    [number
     ["n" nat]]
    ["." text
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor)]]]
   [math
    ["." random]]]
  {1
   ["." /]})

(structure: (equivalence super)
  (All [a] (-> (Equivalence a) (Equivalence (/.Sequence a))))

  (def: (= reference subject)
    (:: (list.equivalence super) =
        (/.take 100 reference)
        (/.take 100 subject))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.Sequence])
      (let [(^open "list\.") (list.equivalence n.equivalence)])
      (do {! random.monad}
        [repeated random.nat
         index (:: ! map (n.% 100) random.nat)
         size (:: ! map (|>> (n.% 10) inc) random.nat)
         offset (:: ! map (n.% 100) random.nat)
         cycle-start random.nat
         cycle-next (random.list size random.nat)]
        ($_ _.and
            (_.with-cover [/.functor]
              ($functor.spec /.repeat ..equivalence /.functor))
            (_.with-cover [/.comonad]
              ($comonad.spec /.repeat ..equivalence /.comonad))
            
            (_.cover [/.iterate /.nth]
                     (n.= (n.+ offset index)
                          (/.nth index (/.iterate inc offset))))
            (_.cover [/.repeat]
                     (n.= repeated
                          (/.nth index (/.repeat repeated))))
            (_.cover [/.take]
                     (list\= (enum.range n.enum offset (dec (n.+ size offset)))
                             (/.take size (/.iterate inc offset))))
            (_.cover [/.drop]
                     (list\= (enum.range n.enum offset (dec (n.+ size offset)))
                             (/.take size (/.drop offset (/.iterate inc 0)))))
            (_.cover [/.split]
                     (let [[drops takes] (/.split size (/.iterate inc 0))]
                       (and (list\= (enum.range n.enum 0 (dec size))
                                    drops)
                            (list\= (enum.range n.enum size (dec (n.* 2 size)))
                                    (/.take size takes)))))
            (_.cover [/.take-while]
                     (list\= (enum.range n.enum 0 (dec size))
                             (/.take-while (n.< size) (/.iterate inc 0))))
            (_.cover [/.drop-while]
                     (list\= (enum.range n.enum offset (dec (n.+ size offset)))
                             (/.take-while (n.< (n.+ size offset))
                                           (/.drop-while (n.< offset) (/.iterate inc 0)))))
            (_.cover [/.split-while]
                     (let [[drops takes] (/.split-while (n.< size) (/.iterate inc 0))]
                       (and (list\= (enum.range n.enum 0 (dec size))
                                    drops)
                            (list\= (enum.range n.enum size (dec (n.* 2 size)))
                                    (/.take-while (n.< (n.* 2 size)) takes)))))
            (_.cover [/.head]
                     (n.= offset
                          (/.head (/.iterate inc offset))))
            (_.cover [/.tail]
                     (list\= (enum.range n.enum (inc offset) (n.+ size offset))
                             (/.take size (/.tail (/.iterate inc offset)))))
            (_.cover [/.filter]
                     (list\= (list\map (n.* 2) (enum.range n.enum 0 (dec size)))
                             (/.take size (/.filter n.even? (/.iterate inc 0)))))
            (_.cover [/.partition]
                     (let [[evens odds] (/.partition n.even? (/.iterate inc 0))]
                       (and (n.= (n.* 2 offset)
                                 (/.nth offset evens))
                            (n.= (inc (n.* 2 offset))
                                 (/.nth offset odds)))))
            (_.cover [/.unfold]
                     (let [(^open "/\.") /.functor
                           (^open "list\.") (list.equivalence text.equivalence)]
                       (list\= (/.take size
                                       (/\map %.nat (/.iterate inc offset)))
                               (/.take size
                                       (/.unfold (function (_ n) [(inc n) (%.nat n)])
                                                 offset)))))
            (_.cover [/.cycle]
                     (let [cycle (list& cycle-start cycle-next)]
                       (list\= (list.concat (list.repeat size cycle))
                               (/.take (n.* size (list.size cycle))
                                       (/.cycle [cycle-start cycle-next])))))
            (_.cover [/.^sequence&]
                     (let [(/.^sequence& first second third next) (/.iterate inc offset)]
                       (and (n.= offset first)
                            (n.= (n.+ 1 offset) second)
                            (n.= (n.+ 2 offset) third))))
            ))))
