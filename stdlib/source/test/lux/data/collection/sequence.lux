... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection)]]
    ["[0]" monoid
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [algorithm
    ["[0]" mix
     ["[1]T" \\test]]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception]]
   [function
    ["[0]" predicate]]
   [data
    ["[0]" bit]
    ["[0]" text]
    [collection
     ["[0]" stack (.use "[1]#[0]" mix)]
     ["[0]" set]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.use "[1]#[0]" monad)]])

(the signatures
  Test
  (do [! random.monad]
    [size (by ! each (n.% 100) random.natural)]
    (all _.and
         (_.for [/.equivalence]
                (equivalenceT.spec (/.equivalence n.equivalence) (/.random size random.natural)))
         (_.for [/.monoid]
                (monoidT.spec (/.equivalence n.equivalence) /.monoid (/.random size random.natural)))
         (_.for [/.mix]
                (mixT.spec /#in /.equivalence /.mix))
         (_.for [/.functor]
                (functorT.spec /#in /.equivalence /.functor))
         (_.for [/.monad]
                (monadT.spec /#in /.equivalence /.monad))
         )))

(the whole
  Test
  (do [! random.monad]
    [size (by ! each (n.% 100) random.natural)
     sample (random.set n.hash size random.natural)
     .let [sample (|> sample set.stack /.of_stack)]
     .let [(open "/#[0]") (/.equivalence n.equivalence)]]
    (all _.and
         (_.coverage [/.size]
           (n.= size (/.size sample)))
         (_.coverage [/.empty?]
           (bit.= (/.empty? sample) (n.= 0 (/.size sample))))
         (_.coverage [/.empty]
           (/.empty? /.empty))
         (_.coverage [/.as_stack /.of_stack]
           (|> sample
               /.as_stack
               /.of_stack
               (/#= sample)))
         (_.coverage [/.as_array /.of_array]
           (|> sample
               /.as_array
               /.of_array
               (/#= sample)))
         (_.coverage [/.reversed]
           (or (n.< 2 (/.size sample))
               (let [not_same!
                     (not (/#= sample
                               (/.reversed sample)))

                     self_symmetry!
                     (/#= sample
                          (/.reversed (/.reversed sample)))]
                 (and not_same!
                      self_symmetry!))))
         (_.coverage [/.every? /.any?]
           (if (/.every? n.even? sample)
             (not (/.any? (predicate.complement n.even?) sample))
             (/.any? (predicate.complement n.even?) sample)))
         )))

(the index_based
  Test
  (do [! random.monad]
    [size (by ! each (|>> (n.% 100) ++) random.natural)]
    (all _.and
         (do !
           [good_index (|> random.natural (by ! each (n.% size)))
            .let [bad_index (n.+ size good_index)]
            sample (random.set n.hash size random.natural)
            non_member (random.only (|>> (set.member? sample) not)
                                    random.natural)
            .let [sample (|> sample set.stack /.of_stack)]]
           (all _.and
                (_.coverage [/.item]
                  (when (/.item good_index sample)
                    {try.#Success member}
                    (/.member? n.equivalence sample member)
                    
                    {try.#Failure error}
                    false))
                (_.coverage [/.has]
                  (<| (try.else false)
                      (do try.monad
                        [sample (/.has good_index non_member sample)
                         actual (/.item good_index sample)]
                        (in (same? non_member actual)))))
                (_.coverage [/.revised]
                  (<| (try.else false)
                      (do try.monad
                        [sample (/.has good_index non_member sample)
                         sample (/.revised good_index ++ sample)
                         actual (/.item good_index sample)]
                        (in (n.= (++ non_member) actual)))))
                (_.coverage [/.within_bounds?]
                  (and (/.within_bounds? sample good_index)
                       (not (/.within_bounds? sample bad_index))))
                (_.coverage [/.index_out_of_bounds]
                  (let [fails! (is (for_any (_ a)
                                     (-> (Try a)
                                         Bit))
                                   (function (_ situation)
                                     (when situation
                                       {try.#Success member}
                                       false
                                       
                                       {try.#Failure error}
                                       (exception.is? /.index_out_of_bounds error))))]
                    (and (fails! (/.item bad_index sample))
                         (fails! (/.has bad_index non_member sample))
                         (fails! (/.revised bad_index ++ sample)))))
                ))
         )))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Sequence
              /.#level /.#size /.#root /.#tail])
      (do [! random.monad]
        [size (by ! each (|>> (n.% 100) ++) random.natural)]
        (all _.and
             ..signatures
             ..whole
             ..index_based

             (do !
               [sample (random.set n.hash size random.natural)
                non_member (random.only (|>> (set.member? sample) not)
                                        random.natural)
                .let [sample (|> sample set.stack /.of_stack)]
                .let [(open "/#[0]") (/.equivalence n.equivalence)]]
               (all _.and
                    (do !
                      [value/0 random.natural
                       value/1 random.natural
                       value/2 random.natural]
                      (_.coverage [/.sequence]
                        (/#= (/.of_stack (stack value/0 value/1 value/2))
                             (/.sequence value/0 value/1 value/2))))
                    (_.coverage [/.member?]
                      (and (stack.every? (/.member? n.equivalence sample)
                                         (/.as_stack sample))
                           (not (/.member? n.equivalence sample non_member))))
                    (_.coverage [/.suffix]
                      (let [added (/.suffix non_member sample)

                            size_increases!
                            (n.= (++ (/.size sample))
                                 (/.size added))

                            is_a_member!
                            (/.member? n.equivalence added non_member)]
                        (and size_increases!
                             is_a_member!)))
                    (_.coverage [/.prefix]
                      (if (/.empty? sample)
                        (/.empty? (/.prefix sample))
                        (let [expected_size!
                              (n.= (-- (/.size sample))
                                   (/.size (/.prefix sample)))

                              symmetry!
                              (|> sample
                                  (/.suffix non_member)
                                  /.prefix
                                  (/#= sample))]
                          (and expected_size!
                               symmetry!))))
                    (_.coverage [/.only]
                      (let [positives (/.only n.even? sample)
                            negatives (/.only (predicate.complement n.even?) sample)]
                        (and (/.every? n.even? positives)
                             (not (/.any? n.even? negatives))

                             (n.= (/.size sample)
                                  (n.+ (/.size positives)
                                       (/.size negatives))))))
                    (_.coverage [/.all]
                      (let [positives (/.all (function (_ it)
                                               (if (n.even? it)
                                                 {.#Some it}
                                                 {.#None}))
                                             sample)
                            negatives (/.all (function (_ it)
                                               (if (not (n.even? it))
                                                 {.#Some it}
                                                 {.#None}))
                                             sample)]
                        (and (/.every? n.even? positives)
                             (not (/.any? n.even? negatives))

                             (n.= (/.size sample)
                                  (n.+ (/.size positives)
                                       (/.size negatives))))))
                    (_.coverage [/.one]
                      (let [(open "/#[0]") /.functor
                            choice (is (-> Natural (Maybe Text))
                                       (function (_ value)
                                         (if (n.even? value)
                                           {.#Some (by n.base_10 as value)}
                                           {.#None})))]
                        (when [(|> sample
                                   (/.only n.even?)
                                   (/#each (by n.base_10 as))
                                   (/.item 0))
                               (/.one choice sample)]
                          [{try.#Success expected} {try.#Success actual}]
                          (text.= expected actual)

                          [{try.#Failure _} {try.#Failure _}]
                          true

                          _
                          false)))
                    (do !
                      [.let [equivalence (/.equivalence n.equivalence)
                             random (/.random 2 random.natural)]
                       expected random
                       actual (random.only (|>> (by equivalence = expected) not)
                                           random)]
                      (_.coverage [/.random]
                        (not (by equivalence = expected actual))))
                    ))
             ))))
