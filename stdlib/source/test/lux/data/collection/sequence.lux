(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" functor
     ["[1]T" \\test (.only Injection)]]
    ["[0]" apply
     ["[1]T" \\test]]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" monoid]
     ["$[0]" mix]
     ["$[0]" monad]]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]
     ["[0]" set]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.use "[1]#[0]" monad)]])

(def signatures
  Test
  (do [! random.monad]
    [size (of ! each (n.% 100) random.nat)]
    (all _.and
         (_.for [/.equivalence]
                ($equivalence.spec (/.equivalence n.equivalence) (random.sequence size random.nat)))
         (_.for [/.monoid]
                ($monoid.spec (/.equivalence n.equivalence) /.monoid (random.sequence size random.nat)))
         (_.for [/.mix]
                ($mix.spec /#in /.equivalence /.mix))
         (_.for [/.functor]
                (functorT.spec /#in /.equivalence /.functor))
         (_.for [/.apply]
                (applyT.spec /#in /.equivalence /.apply))
         (_.for [/.monad]
                ($monad.spec /#in /.equivalence /.monad))
         )))

(def whole
  Test
  (do [! random.monad]
    [size (of ! each (n.% 100) random.nat)
     sample (random.set n.hash size random.nat)
     .let [sample (|> sample set.list /.of_list)]
     .let [(open "/#[0]") (/.equivalence n.equivalence)]]
    (all _.and
         (_.coverage [/.size]
           (n.= size (/.size sample)))
         (_.coverage [/.empty?]
           (bit#= (/.empty? sample) (n.= 0 (/.size sample))))
         (_.coverage [/.empty]
           (/.empty? /.empty))
         (_.coverage [/.list /.of_list]
           (|> sample /.list /.of_list (/#= sample)))
         (_.coverage [/.reversed]
           (or (n.< 2 (/.size sample))
               (let [not_same!
                     (not (/#= sample
                               (/.reversed sample)))

                     self_symmetry!
                     (/#= sample
                          (/.reversed (/.reversed sample)))]
                 (and not_same!
                      self_symmetry!))))
         (_.coverage [/.every? /.any?]
           (if (/.every? n.even? sample)
             (not (/.any? (bit.complement n.even?) sample))
             (/.any? (bit.complement n.even?) sample)))
         )))

(def index_based
  Test
  (do [! random.monad]
    [size (of ! each (|>> (n.% 100) ++) random.nat)]
    (all _.and
         (do !
           [good_index (|> random.nat (of ! each (n.% size)))
            .let [bad_index (n.+ size good_index)]
            sample (random.set n.hash size random.nat)
            non_member (random.only (|>> (set.member? sample) not)
                                    random.nat)
            .let [sample (|> sample set.list /.of_list)]]
           (all _.and
                (_.coverage [/.item]
                  (when (/.item good_index sample)
                    {try.#Success member}
                    (/.member? n.equivalence sample member)
                    
                    {try.#Failure error}
                    false))
                (_.coverage [/.has]
                  (<| (try.else false)
                      (do try.monad
                        [sample (/.has good_index non_member sample)
                         actual (/.item good_index sample)]
                        (in (same? non_member actual)))))
                (_.coverage [/.revised]
                  (<| (try.else false)
                      (do try.monad
                        [sample (/.has good_index non_member sample)
                         sample (/.revised good_index ++ sample)
                         actual (/.item good_index sample)]
                        (in (n.= (++ non_member) actual)))))
                (_.coverage [/.within_bounds?]
                  (and (/.within_bounds? sample good_index)
                       (not (/.within_bounds? sample bad_index))))
                (_.coverage [/.index_out_of_bounds]
                  (let [fails! (is (All (_ a) (-> (Try a) Bit))
                                   (function (_ situation)
                                     (when situation
                                       {try.#Success member}
                                       false
                                       
                                       {try.#Failure error}
                                       (exception.match? /.index_out_of_bounds error))))]
                    (and (fails! (/.item bad_index sample))
                         (fails! (/.has bad_index non_member sample))
                         (fails! (/.revised bad_index ++ sample)))))
                ))
         )))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Sequence
              /.#level /.#size /.#root /.#tail])
      (do [! random.monad]
        [size (of ! each (|>> (n.% 100) ++) random.nat)]
        (all _.and
             ..signatures
             ..whole
             ..index_based

             (do !
               [sample (random.set n.hash size random.nat)
                non_member (random.only (|>> (set.member? sample) not)
                                        random.nat)
                .let [sample (|> sample set.list /.of_list)]
                .let [(open "/#[0]") (/.equivalence n.equivalence)]]
               (all _.and
                    (do !
                      [value/0 random.nat
                       value/1 random.nat
                       value/2 random.nat]
                      (_.coverage [/.sequence]
                        (/#= (/.of_list (list value/0 value/1 value/2))
                             (/.sequence value/0 value/1 value/2))))
                    (_.coverage [/.member?]
                      (and (list.every? (/.member? n.equivalence sample)
                                        (/.list sample))
                           (not (/.member? n.equivalence sample non_member))))
                    (_.coverage [/.suffix]
                      (let [added (/.suffix non_member sample)

                            size_increases!
                            (n.= (++ (/.size sample))
                                 (/.size added))

                            is_a_member!
                            (/.member? n.equivalence added non_member)]
                        (and size_increases!
                             is_a_member!)))
                    (_.coverage [/.prefix]
                      (if (/.empty? sample)
                        (/.empty? (/.prefix sample))
                        (let [expected_size!
                              (n.= (-- (/.size sample))
                                   (/.size (/.prefix sample)))

                              symmetry!
                              (|> sample
                                  (/.suffix non_member)
                                  /.prefix
                                  (/#= sample))]
                          (and expected_size!
                               symmetry!))))
                    (_.coverage [/.only]
                      (let [positives (/.only n.even? sample)
                            negatives (/.only (bit.complement n.even?) sample)]
                        (and (/.every? n.even? positives)
                             (not (/.any? n.even? negatives))

                             (n.= (/.size sample)
                                  (n.+ (/.size positives)
                                       (/.size negatives))))))
                    (_.coverage [/.all]
                      (let [positives (/.all (function (_ it)
                                               (if (n.even? it)
                                                 {.#Some it}
                                                 {.#None}))
                                             sample)
                            negatives (/.all (function (_ it)
                                               (if (not (n.even? it))
                                                 {.#Some it}
                                                 {.#None}))
                                             sample)]
                        (and (/.every? n.even? positives)
                             (not (/.any? n.even? negatives))

                             (n.= (/.size sample)
                                  (n.+ (/.size positives)
                                       (/.size negatives))))))
                    (_.coverage [/.one]
                      (let [(open "/#[0]") /.functor
                            choice (is (-> Nat (Maybe Text))
                                       (function (_ value)
                                         (if (n.even? value)
                                           {.#Some (of n.decimal encoded value)}
                                           {.#None})))]
                        (when [(|> sample
                                   (/.only n.even?)
                                   (/#each (of n.decimal encoded))
                                   (/.item 0))
                               (/.one choice sample)]
                          [{try.#Success expected} {.#Some actual}]
                          (text#= expected actual)

                          [{try.#Failure _} {.#None}]
                          true

                          _
                          false)))
                    ))
             ))))
