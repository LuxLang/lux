(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [equivalence (#+ Equivalence)]
     ["." enum]
     [\\specification
      ["$." functor]
      ["$." comonad]]]
    [data
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor)]]]
    [math
     ["." random]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /]])

(implementation: (equivalence super)
  (All [a] (-> (Equivalence a) (Equivalence (/.Sequence a))))

  (def: (= reference subject)
    (\ (list.equivalence super) =
       (/.first 100 reference)
       (/.first 100 subject))))

(def: (iterations step)
  (All [a]
    (-> (-> a a)
        (-> a (/.Sequence a))))
  (/.iterations
   (function (_ state)
     (let [state' (step state)]
       [state' state]))))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Sequence])
      (let [(^open "list\.") (list.equivalence n.equivalence)])
      (do {! random.monad}
        [repeated random.nat
         index (\ ! map (n.% 100) random.nat)
         size (\ ! map (|>> (n.% 10) inc) random.nat)
         offset (\ ! map (n.% 100) random.nat)
         cycle_start random.nat
         cycle_next (random.list size random.nat)]
        ($_ _.and
            (_.for [/.functor]
                   ($functor.spec /.repeated ..equivalence /.functor))
            (_.for [/.comonad]
                   ($comonad.spec /.repeated ..equivalence /.comonad))
            
            (_.cover [/.item]
                     (n.= (n.+ offset index)
                          (/.item index (..iterations inc offset))))
            (_.cover [/.repeated]
                     (n.= repeated
                          (/.item index (/.repeated repeated))))
            (_.cover [/.first]
                     (list\= (enum.range n.enum offset (dec (n.+ size offset)))
                             (/.first size (..iterations inc offset))))
            (_.cover [/.after]
                     (list\= (enum.range n.enum offset (dec (n.+ size offset)))
                             (/.first size (/.after offset (..iterations inc 0)))))
            (_.cover [/.split_at]
                     (let [[drops takes] (/.split_at size (..iterations inc 0))]
                       (and (list\= (enum.range n.enum 0 (dec size))
                                    drops)
                            (list\= (enum.range n.enum size (dec (n.* 2 size)))
                                    (/.first size takes)))))
            (_.cover [/.while]
                     (list\= (enum.range n.enum 0 (dec size))
                             (/.while (n.< size) (..iterations inc 0))))
            (_.cover [/.until]
                     (list\= (enum.range n.enum offset (dec (n.+ size offset)))
                             (/.while (n.< (n.+ size offset))
                                      (/.until (n.< offset) (..iterations inc 0)))))
            (_.cover [/.split_when]
                     (let [[drops takes] (/.split_when (n.= size) (..iterations inc 0))]
                       (and (list\= (enum.range n.enum 0 (dec size))
                                    drops)
                            (list\= (enum.range n.enum size (dec (n.* 2 size)))
                                    (/.while (n.< (n.* 2 size)) takes)))))
            (_.cover [/.head]
                     (n.= offset
                          (/.head (..iterations inc offset))))
            (_.cover [/.tail]
                     (list\= (enum.range n.enum (inc offset) (n.+ size offset))
                             (/.first size (/.tail (..iterations inc offset)))))
            (_.cover [/.only]
                     (list\= (list\map (n.* 2) (enum.range n.enum 0 (dec size)))
                             (/.first size (/.only n.even? (..iterations inc 0)))))
            (_.cover [/.partition]
                     (let [[evens odds] (/.partition n.even? (..iterations inc 0))]
                       (and (n.= (n.* 2 offset)
                                 (/.item offset evens))
                            (n.= (inc (n.* 2 offset))
                                 (/.item offset odds)))))
            (_.cover [/.iterations]
                     (let [(^open "/\.") /.functor
                           (^open "list\.") (list.equivalence text.equivalence)]
                       (list\= (/.first size
                                        (/\map %.nat (..iterations inc offset)))
                               (/.first size
                                        (/.iterations (function (_ n) [(inc n) (%.nat n)])
                                                      offset)))))
            (_.cover [/.cycle]
                     (let [cycle (list& cycle_start cycle_next)]
                       (list\= (list.joined (list.repeated size cycle))
                               (/.first (n.* size (list.size cycle))
                                        (/.cycle [cycle_start cycle_next])))))
            (_.cover [/.^sequence&]
                     (let [(/.^sequence& first second third next) (..iterations inc offset)]
                       (and (n.= offset first)
                            (n.= (n.+ 1 offset) second)
                            (n.= (n.+ 2 offset) third))))
            ))))
