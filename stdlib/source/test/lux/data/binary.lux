... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [ffi (.only)]
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]
    ["<>" projection]
    ["[0]" enum]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [control
    ["[0]" pipe]
    ["[0]" maybe]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" sum]
    ["[0]" bit]
    ["[0]" text (.only)
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor)]
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" sequence]
     ["[0]" set]
     [array
      [\\unsafe (.only)]]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" /64 (.only)
      ["n" natural]
      ["[0]" integer]
      ["[0]" revolution]
      ["[0]" decimal]]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   ["[0]" type]
   [meta
    ["[0]" static]
    ["[0]" name]
    ["[0]" code]]
   [time
    ["[0]" instant]
    ["[0]" duration]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["!" \\unsafe]
   ["[0]" \\injection]
   ["[0]" \\projection]]])

(the !expect
  (template.macro (_ <expectation> <computation>)
    [(when <computation>
       <expectation>
       true

       _
       false)]))

(the segment_size 10)

(the (utf8_conversion_does_not_alter? value)
  (Predicate Text)
  (|> value
      (by utf8.binary as)
      (by utf8.binary of)
      (pipe.when
        {try.#Success converted}
        (text.= value converted)
        
        {try.#Failure error}
        false)))

(the random_text
  (Random Text)
  (random.only ..utf8_conversion_does_not_alter?
               (random.unicode ..segment_size)))

(the random_name
  (Random Name)
  (random.and ..random_text ..random_text))

(the provenance_equivalence
  (Equivalence Provenance)
  (implementation
   (the (= [expected_module expected_line expected_column]
           [sample_module sample_line sample_column])
     (and (text.= expected_module sample_module)
          (n.= expected_line sample_line)
          (n.= expected_column sample_column)))))

(the random_provenance
  (Random Provenance)
  (all random.and
       ..random_text
       random.natural
       random.natural))

(the random_code
  (Random Code)
  (random.rec
   (function (_ code)
     (let [random_composite (is (Random (List Code))
                                (do [! random.monad]
                                  [size (by ! each (n.% 2) random.natural)]
                                  (random.list size code)))]
       (is (Random Code)
           (all random.or
                (random.and ..random_provenance random.bit)
                (random.and ..random_provenance random.natural)
                (random.and ..random_provenance random.integer)
                (random.and ..random_provenance random.revolution)
                (random.and ..random_provenance random.unit_decimal)
                (random.and ..random_provenance ..random_text)
                (random.and ..random_provenance ..random_name)
                (random.and ..random_provenance random_composite)
                (random.and ..random_provenance random_composite)
                (random.and ..random_provenance random_composite)
                ))))))

(the random_type
  (Random Type)
  (let [(open "[0]") random.monad]
    (all random.either
         (pure .Natural)
         (pure .Stack)
         (pure .Code)
         (pure .Type))))

(the size
  Test
  (<| (_.for [\\projection.Size])
      (`` (all _.and
               (,, (template.with [<size> <projection> <injection>]
                     [(do [! random.monad]
                        [expected (by ! each (/64.and (/64.mask <size>))
                                      random.natural)]
                        (_.coverage [<size> <projection> <injection>]
                          (|> (\\injection.value <injection> expected)
                              (\\projection.value <projection>)
                              (!expect (^.multi {try.#Success actual}
                                                (n.= (.natural expected)
                                                     (.natural actual)))))))]

                     [[\\projection.size_08 \\projection.bits_08 \\injection.bits_08]
                      [\\projection.size_16 \\projection.bits_16 \\injection.bits_16]
                      [\\projection.size_32 \\projection.bits_32 \\injection.bits_32]
                      [\\projection.size_64 \\projection.bits_64 \\injection.bits_64]]))))))

(the binary
  Test
  (`` (all _.and
           (,, (template.with [<projection> <injection>]
                 [(do [! random.monad]
                    [expected (by ! each (by utf8.binary as) (random.ascii ..segment_size))]
                    (_.coverage [<projection> <injection>]
                      (|> (\\injection.value <injection> expected)
                          (\\projection.value <projection>)
                          (!expect (^.multi {try.#Success actual}
                                            (by /.equivalence = expected actual))))))]

                 [[\\projection.binary_08 \\injection.binary_08]
                  [\\projection.binary_16 \\injection.binary_16]
                  [\\projection.binary_32 \\injection.binary_32]
                  [\\projection.binary_64 \\injection.binary_64]])))))

(the utf8
  Test
  (`` (all _.and
           (,, (template.with [<projection> <injection>]
                 [(do [! random.monad]
                    [expected (random.ascii ..segment_size)]
                    (_.coverage [<projection> <injection>]
                      (|> (\\injection.value <injection> expected)
                          (\\projection.value <projection>)
                          (!expect (^.multi {try.#Success actual}
                                            (by text.equivalence = expected actual))))))]

                 [[\\projection.utf8_08 \\injection.utf8_08]
                  [\\projection.utf8_16 \\injection.utf8_16]
                  [\\projection.utf8_32 \\injection.utf8_32]
                  [\\projection.utf8_64 \\injection.utf8_64]
                  [\\projection.text \\injection.text]])))))

(the sequence
  Test
  (`` (all _.and
           (,, (template.with [<projection> <injection>]
                 [(do [! random.monad]
                    [expected (sequence.random ..segment_size random.natural)]
                    (_.coverage [<projection> <injection>]
                      (|> expected
                          (\\injection.value (<injection> \\injection.natural))
                          (\\projection.value (<projection> \\projection.natural))
                          (!expect (^.multi {try.#Success actual}
                                            (by (sequence.equivalence n.equivalence) = expected actual))))))]

                 [[\\projection.sequence_08 \\injection.sequence_08]
                  [\\projection.sequence_16 \\injection.sequence_16]
                  [\\projection.sequence_32 \\injection.sequence_32]
                  [\\projection.sequence_64 \\injection.sequence_64]])))))

(the simple
  Test
  (`` (all _.and
           (,, (template.with [<projection> <injection> <random> <equivalence>]
                 [(do [! random.monad]
                    [expected <random>]
                    (_.coverage [<projection> <injection>]
                      (|> expected
                          (\\injection.value <injection>)
                          (\\projection.value <projection>)
                          (!expect (^.multi {try.#Success actual}
                                            (by <equivalence> = expected actual))))))]

                 [[\\projection.bit \\injection.bit random.bit bit.equivalence]
                  [\\projection.natural \\injection.natural random.natural n.equivalence]
                  [\\projection.integer \\injection.integer random.integer integer.equivalence]
                  [\\projection.revolution \\injection.revolution random.revolution revolution.equivalence]
                  [\\projection.instant \\injection.instant instant.random instant.equivalence]
                  [\\projection.duration \\injection.duration duration.random duration.equivalence]]))
           (do [! random.monad]
             [expected random.decimal]
             (_.coverage [\\projection.decimal \\injection.decimal]
               (|> expected
                   (\\injection.value \\injection.decimal)
                   (\\projection.value \\projection.decimal)
                   (!expect (^.multi {try.#Success actual}
                                     (or (by decimal.equivalence = expected actual)
                                         (and (decimal.not_a_number? expected)
                                              (decimal.not_a_number? actual))))))))
           (do [! random.monad]
             [expected (by ! each (|>> (/64.and (/64.mask \\projection.size_08))
                                       (n.major 2))
                           random.natural)]
             (_.coverage [\\projection.not_a_bit]
               (|> expected
                   (\\injection.value \\injection.bits_08)
                   (\\projection.value \\projection.bit)
                   (!expect (^.multi {try.#Failure error}
                                     (exception.is? \\projection.not_a_bit error))))))
           )))

(the complex
  Test
  (`` (all _.and
           (,, (template.with [<projection> <injection> <random> <equivalence>]
                 [(do [! random.monad]
                    [expected <random>]
                    (_.coverage [<projection> <injection>]
                      (|> expected
                          (\\injection.value <injection>)
                          (\\projection.value <projection>)
                          (!expect (^.multi {try.#Success actual}
                                            (by <equivalence> = expected actual))))))]

                 [[\\projection.provenance \\injection.provenance random_provenance provenance_equivalence]
                  [\\projection.code \\injection.code random_code code.equivalence]
                  [\\projection.type \\injection.type random_type type.equivalence]]))
           (,, (template.with [<projection_coverage> <projection> <coverage_injection> <injection> <random> <equivalence>]
                 [(do [! random.monad]
                    [expected <random>]
                    (_.coverage [<projection_coverage> <coverage_injection>]
                      (|> expected
                          (\\injection.value <injection>)
                          (\\projection.value <projection>)
                          (!expect (^.multi {try.#Success actual}
                                            (by <equivalence> = expected actual))))))]

                 [[\\projection.maybe (\\projection.maybe \\projection.natural) \\injection.maybe (\\injection.maybe \\injection.natural) (random.maybe random.natural) (maybe.equivalence n.equivalence)]
                  [\\projection.stack (\\projection.stack \\projection.natural) \\injection.stack (\\injection.stack \\injection.natural) (random.stack ..segment_size random.natural) (stack.equivalence n.equivalence)]
                  [\\projection.set (\\projection.set n.hash \\projection.natural) \\injection.set (\\injection.set \\injection.natural) (random.set n.hash ..segment_size random.natural) set.equivalence]
                  [\\projection.name \\projection.name \\injection.name \\injection.name ..random_name name.equivalence]]))
           (do [! random.monad]
             [expected (by ! each (list.repeated ..segment_size) random.natural)]
             (_.coverage [\\projection.set_elements_are_not_unique]
               (|> expected
                   (\\injection.value (\\injection.list \\injection.natural))
                   (\\projection.value (\\projection.set n.hash \\projection.natural))
                   (!expect (^.multi {try.#Failure error}
                                     (exception.is? \\projection.set_elements_are_not_unique error))))))
           (do [! random.monad]
             [expected (random.or random.bit random.natural)]
             (_.coverage [\\projection.or \\injection.or]
               (|> expected
                   (\\injection.value (\\injection.or \\injection.bit \\injection.natural))
                   (\\projection.value (is (\\projection.Projection (Either Bit Natural))
                                           (\\projection.or \\projection.bit \\projection.natural)))
                   (!expect (^.multi {try.#Success actual}
                                     (by (sum.equivalence bit.equivalence n.equivalence) =
                                         expected
                                         actual))))))
           (do [! random.monad]
             [tag (by ! each (|>> (/64.and (/64.mask \\projection.size_08))
                                  (n.major 2))
                      random.natural)
              value random.bit]
             (_.coverage [\\projection.invalid_tag]
               (|> [tag value]
                   (\\injection.value (\\injection.and \\injection.bits_08 \\injection.bit))
                   (\\projection.value (is (\\projection.Projection (Either Bit Natural))
                                           (\\projection.or \\projection.bit \\projection.natural)))
                   (!expect (^.multi {try.#Failure error}
                                     (exception.is? \\projection.invalid_tag error))))))
           (do [! random.monad]
             [expected (random.stack ..segment_size random.natural)]
             (_.coverage [\\projection.rec \\injection.rec \\injection.and \\injection.any]
               (|> expected
                   (\\injection.value (\\injection.rec (|>> (\\injection.and \\injection.natural)
                                                            (\\injection.or \\injection.any))))
                   (\\projection.value (is (\\projection.Projection (Stack Natural))
                                           (\\projection.rec
                                            (function (_ again)
                                              (\\projection.or \\projection.any
                                                               (<>.and \\projection.natural
                                                                       again))))))
                   (!expect (^.multi {try.#Success actual}
                                     (by (stack.equivalence n.equivalence) =
                                         expected
                                         actual))))))
           )))

(the \\projection
  Test
  (<| (_.covering \\projection._)
      (_.for [\\projection.Projection])
      (`` (all _.and
               (_.coverage [\\projection.value \\projection.any
                            \\injection.no_op \\injection.instance]
                 (|> (\\injection.instance \\injection.no_op)
                     (\\projection.value \\projection.any)
                     (!expect {try.#Success _})))
               (do [! random.monad]
                 [data (by ! each (by utf8.binary as) (random.ascii ..segment_size))]
                 (_.coverage [\\projection.binary_was_not_fully_read]
                   (|> data
                       (\\projection.value \\projection.any)
                       (!expect (^.multi {try.#Failure error}
                                         (exception.is? \\projection.binary_was_not_fully_read error))))))
               (do [! random.monad]
                 [expected (by ! each (by utf8.binary as) (random.ascii ..segment_size))]
                 (_.coverage [\\projection.segment \\injection.segment \\injection.value]
                   (|> expected
                       (\\injection.value (\\injection.segment ..segment_size))
                       (\\projection.value (\\projection.segment ..segment_size))
                       (!expect (^.multi {try.#Success actual}
                                         (by /.equivalence = expected actual))))))
               (do [! random.monad]
                 [data (by ! each (by utf8.binary as) (random.ascii ..segment_size))]
                 (_.coverage [\\projection.end?]
                   (|> data
                       (\\projection.value (do <>.monad
                                             [pre \\projection.end?
                                              _ (\\projection.segment ..segment_size)
                                              post \\projection.end?]
                                             (pure (and (not pre)
                                                        post))))
                       (!expect {try.#Success .true}))))
               (do [! random.monad]
                 [to_read (by ! each (n.% (++ ..segment_size)) random.natural)
                  data (by ! each (by utf8.binary as) (random.ascii ..segment_size))]
                 (_.coverage [\\projection.Offset \\projection.offset]
                   (|> data
                       (\\projection.value (do <>.monad
                                             [start \\projection.offset
                                              _ (\\projection.segment to_read)
                                              offset \\projection.offset
                                              _ (\\projection.segment (n.- to_read ..segment_size))
                                              nothing_left \\projection.offset]
                                             (pure (and (n.= 0 start)
                                                        (n.= to_read offset)
                                                        (n.= ..segment_size nothing_left)))))
                       (!expect {try.#Success .true}))))
               (do [! random.monad]
                 [to_read (by ! each (n.% (++ ..segment_size)) random.natural)
                  data (by ! each (by utf8.binary as) (random.ascii ..segment_size))]
                 (_.coverage [\\projection.remaining]
                   (|> data
                       (\\projection.value (do <>.monad
                                             [_ (\\projection.segment to_read)
                                              remaining \\projection.remaining
                                              _ (\\projection.segment (n.- to_read ..segment_size))
                                              nothing_left \\projection.remaining]
                                             (pure (and (n.= ..segment_size
                                                             (n.+ to_read remaining))
                                                        (n.= 0 nothing_left)))))
                       (!expect {try.#Success .true}))))
               ..size
               ..binary
               ..utf8
               ..sequence
               ..simple
               ..complex
               ))))

(the equivalence
  (Equivalence \\injection.Specification)
  (implementation
   (the (= expected actual)
     (/.= (\\injection.instance expected)
          (\\injection.instance actual)))))

(the random_specification
  (Random \\injection.Specification)
  (by random.monad each \\injection.natural random.natural))

(the \\injection
  Test
  (<| (_.covering \\injection._)
      (_.for [\\injection.Mutation \\injection.Specification \\injection.Injection])
      (all _.and
           (_.for [\\injection.monoid]
                  (monoidT.spec ..equivalence \\injection.monoid ..random_specification))
           )))

(the (succeed it)
  (-> (Try Bit) Bit)
  (when it
    {try.#Failure _}
    false

    {try.#Success output}
    output))

(the .public (random size)
  (-> Natural (Random /.Binary))
  (let [output (/.empty size)]
    (loop (again [idx 0])
      (if (n.< size idx)
          (do random.monad
            [byte random.natural]
            (exec (try.trusted (/.has_08! idx byte output))
              (again (++ idx))))
          (by random.monad pure output)))))

(the (throws? exception try)
  (for_any (_ e a)
    (-> (Exception e) (Try a)
        Bit))
  (when try
    {try.#Failure error}
    (exception.is? exception error)

    {try.#Success _}
    false))

(the (binary_io power read write value)
  (-> Natural (-> Natural /.Binary (Try Natural)) (-> Natural Natural /.Binary (Try Any)) Natural Bit)
  (let [bytes (/64.left_shifted power 1)
        binary (/.empty bytes)
        cap (when bytes
              8 (-- 0)
              _ (|> 1 (/64.left_shifted (n.x 8 bytes)) --))
        capped_value (/64.and cap value)]
    (and (..succeed
          (do try.monad
            [pre (read 0 binary)
             _ (write 0 value binary)
             post (read 0 binary)]
            (pure (and (n.= 0 pre)
                       (n.= capped_value post)))))
         (throws? /.index_out_of_bounds (read 1 binary))
         (throws? /.index_out_of_bounds (write 1 value binary)))))

(the as_stack
  (-> /.Binary (Stack Natural))
  (/.mix (function (_ head tail)
           {.#Top head tail})
         (stack)))

(the test|unsafe
  Test
  (<| (_.covering !._)
      (_.for [!.Binary])
      (do [! random.monad]
        [.let [gen_size (|> random.natural (by ! each (|>> (n.% 100) (n.major 8))))]
         size gen_size
         sample (..random size)
         value random.natural
         .let [gen_idx (|> random.natural (by ! each (n.% size)))]
         offset gen_idx
         length (by ! each (n.% (n.- offset size)) random.natural)]
        (`` (all _.and
                 (_.for [!.=]
                        (equivalenceT.spec (function (_ left right)
                                             (!.= left right))
                                           (..random size)))
                 (_.coverage [!.empty]
                   (!.= (!.empty size) (!.empty size)))
                 (_.coverage [!.size]
                   (|> (!.empty size) !.size (n.= size)))
                 (,, (template.with [<power> <bytes/?> <has/?>]
                       [(_.coverage [<bytes/?> <has/?>]
                          (let [bytes (/64.left_shifted <power> 1)
                                binary (!.empty bytes)
                                cap (when bytes
                                      8 (-- 0)
                                      _ (|> 1 (/64.left_shifted (n.x 8 bytes)) --))
                                capped_value (/64.and cap value)
                                
                                pre (<bytes/?> 0 binary)
                                _ (<has/?> 0 value binary)
                                post (<bytes/?> 0 binary)]
                            (and (n.= 0 pre)
                                 (n.= capped_value post))))]

                       [[0 !.bits_08 !.has_08!]
                        [1 !.bits_16 !.has_16!]
                        [2 !.bits_32 !.has_32!]
                        [3 !.bits_64 !.has_64!]]))
                 (_.coverage [!.slice]
                   (let [random_slice (!.slice offset length sample)
                         idxs (is (Stack Natural)
                                  (when length
                                    0 (stack)
                                    _ (list.as_stack (enum.range n.enum 0 (-- length)))))
                         reader (function (_ binary idx)
                                  (!.bits_08 idx binary))]
                     (and (n.= length (!.size random_slice))
                          (by (stack.equivalence n.equivalence) =
                              (stack#each (|>> (n.+ offset) (reader sample)) idxs)
                              (stack#each (reader random_slice) idxs)))))
                 (_.coverage [!.copy!]
                   (and (let [it (!.copy! size 0 sample 0 (!.empty size))]
                          (and (not (same? sample it))
                               (!.= sample it)))
                        (let [sample/0 (!.bits_08 0 sample)
                              copy (!.copy! 1 0 sample 0 (!.empty 2))
                              copy/0 (!.bits_08 0 copy)
                              copy/1 (!.bits_08 1 copy)]
                          (and (n.= sample/0 copy/0)
                               (n.= 0 copy/1)))))
                 )))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Binary])
      (do [! random.monad]
        [.let [gen_size (|> random.natural (by ! each (|>> (n.% 100) (n.major 8))))]
         size gen_size
         sample (..random size)
         value random.natural
         .let [gen_idx (|> random.natural (by ! each (n.% size)))]
         offset (by ! each (n.major 1) gen_idx)
         length (by ! each (n.% (n.- offset size)) random.natural)]
        (all _.and
             (_.for [/.equivalence /.=]
                    (static.when (same? /.equivalence /.=)
                      (equivalenceT.spec /.equivalence (..random size))))
             (_.for [/.hash]
                    (hashT.spec /.hash (..random size)))
             (_.for [/.monoid]
                    (monoidT.spec /.equivalence /.monoid (..random size)))
             (_.coverage [/.mix]
               (n.= (by stack.mix mix n.+ 0 (..as_stack sample))
                    (/.mix n.+ 0 sample)))
             
             (_.coverage [/.empty]
               (by /.equivalence =
                   (/.empty size)
                   (/.empty size)))
             (_.coverage [/.size]
               (|> (/.empty size) /.size (n.= size)))
             (_.for [/.index_out_of_bounds]
                    (all _.and
                         (_.coverage [/.bits_08 /.has_08!]
                           (..binary_io 0 /.bits_08 /.has_08! value))
                         (_.coverage [/.bits_16 /.has_16!]
                           (..binary_io 1 /.bits_16 /.has_16! value))
                         (_.coverage [/.bits_32 /.has_32!]
                           (..binary_io 2 /.bits_32 /.has_32! value))
                         (_.coverage [/.bits_64 /.has_64!]
                           (..binary_io 3 /.bits_64 /.has_64! value))))
             (_.coverage [/.slice]
               (let [random_slice (try.trusted (/.slice offset length sample))
                     idxs (is (Stack Natural)
                              (when length
                                0 (stack)
                                _ (list.as_stack (enum.range n.enum 0 (-- length)))))
                     reader (function (_ binary idx)
                              (/.bits_08 idx binary))]
                 (and (n.= length (/.size random_slice))
                      (when [(stack.each' try.monad (|>> (n.+ offset) (reader sample)) idxs)
                             (stack.each' try.monad (reader random_slice) idxs)]
                        [{try.#Success binary_vals} {try.#Success slice_vals}]
                        (by (stack.equivalence n.equivalence) = binary_vals slice_vals)

                        _
                        false))))
             (_.coverage [/.slice_out_of_bounds]
               (and (throws? /.slice_out_of_bounds (/.slice size size sample))
                    (let [verdict (throws? /.slice_out_of_bounds (/.slice offset size sample))]
                      (when offset
                        0 (not verdict)
                        _ verdict))))
             (_.coverage [/.after]
               (and (by /.equivalence = sample (/.after 0 sample))
                    (by /.equivalence = (/.empty 0) (/.after size sample))
                    (n.= (n.- offset size) (/.size (/.after offset sample)))
                    (when (stack.reversed (..as_stack sample))
                      {.#Empty}
                      false

                      {.#Top head tail}
                      (n.= (stack.mix n.+ 0 tail)
                           (/.mix n.+ 0 (/.after 1 sample))))))
             (_.coverage [/.copy!]
               (and (when (/.copy! size 0 sample 0 (/.empty size))
                      {try.#Success output}
                      (and (not (same? sample output))
                           (by /.equivalence = sample output))

                      {try.#Failure _}
                      false)
                    (succeed
                     (do try.monad
                       [sample/0 (/.bits_08 0 sample)
                        copy (/.copy! 1 0 sample 0 (/.empty 2))
                        copy/0 (/.bits_08 0 copy)
                        copy/1 (/.bits_08 1 copy)]
                       (pure (and (n.= sample/0 copy/0)
                                  (n.= 0 copy/1)))))))
             (_.coverage [/.cannot_copy]
               (and (not (throws? /.cannot_copy
                                  (/.copy! size 0 sample 0 (/.empty size))))
                    (throws? /.cannot_copy
                             (/.copy! (n.+ offset size) 0 sample 0 (/.empty size)))
                    (throws? /.cannot_copy
                             (/.copy! size offset sample 0 (/.empty size)))
                    (throws? /.cannot_copy
                             (/.copy! size 0 sample offset (/.empty size)))))
             (_.coverage [/.copy]
               (/.= sample
                    (/.copy sample)))

             ..test|unsafe
             ..\\injection
             ..\\projection
             ))))
