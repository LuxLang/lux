(.module:
  [lux #*
   ["_" test (#+ Test)]
   [control
    pipe
    [monad (#+ do)]
    {[0 #test]
     [/
      [".T" equivalence]
      [".T" codec]]}]
   [data
    ["." text ("#@." equivalence)
     format]]
   [math
    ["r" random (#+ Random)]]]
  {1
   ["." /]})

(def: (part size)
  (-> Nat (r.Random Text))
  (|> (r.unicode size) (r.filter (|>> (text.contains? ".") not))))

(def: #export (name module-size short-size)
  (-> Nat Nat (Random Name))
  (r.and (..part module-size)
         (..part short-size)))

(def: #export test
  Test
  (<| (_.context (%name (name-of .Name)))
      (do r.monad
        [## First Name
         sizeM1 (|> r.nat (:: @ map (n/% 100)))
         sizeS1 (|> r.nat (:: @ map (|>> (n/% 100) (n/max 1))))
         (^@ name1 [module1 short1]) (..name sizeM1 sizeS1)
         ## Second Name
         sizeM2 (|> r.nat (:: @ map (n/% 100)))
         sizeS2 (|> r.nat (:: @ map (|>> (n/% 100) (n/max 1))))
         (^@ name2 [module2 short2]) (..name sizeM2 sizeS2)]
        ($_ _.and
            (equivalenceT.test /.equivalence (..name sizeM1 sizeS1))
            (codecT.test /.codec /.equivalence (..name sizeM1 sizeS1))
            (_.test "Can get the module / short parts of an name."
                    (and (is? module1 (/.module name1))
                         (is? short1 (/.short name1))))
            (let [(^open "/@.") /.codec]
              (_.test "Encoding an name without a module component results in text equal to the short of the name."
                      (if (text.empty? module1)
                        (text@= short1 (/@encode name1))
                        #1)))
            (let [(^open "/@.") /.equivalence]
              ($_ _.and
                  (_.test "Can obtain Name from identifier."
                          (and (/@= ["lux" "yolo"] (name-of .yolo))
                               (/@= ["test/lux/data/name" "yolo"] (name-of ..yolo))
                               (/@= ["" "yolo"] (name-of yolo))
                               (/@= ["lux/test" "yolo"] (name-of lux/test.yolo))))
                  (_.test "Can obtain Name from tag."
                          (and (/@= ["lux" "yolo"] (name-of #.yolo))
                               (/@= ["test/lux/data/name" "yolo"] (name-of #..yolo))
                               (/@= ["" "yolo"] (name-of #yolo))
                               (/@= ["lux/test" "yolo"] (name-of #lux/test.yolo))))))
            ))))
