(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]
      ["$." hash]
      ["$." order]
      ["$." codec]]]
    [control
     pipe]
    [data
     ["." text ("#\." equivalence)]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /]])

(def: .public (random module_size short_size)
  (-> Nat Nat (Random Name))
  (random.and (random.ascii/alpha module_size)
              (random.ascii/alpha short_size)))

(def: .public test
  Test
  (<| (_.covering /._)
      (do {! random.monad}
        [... First Name
         sizeM1 (|> random.nat (\ ! map (n.% 100)))
         sizeS1 (|> random.nat (\ ! map (|>> (n.% 100) (n.max 1))))
         (^@ name1 [module1 short1]) (..random sizeM1 sizeS1)
         ... Second Name
         sizeM2 (|> random.nat (\ ! map (n.% 100)))
         sizeS2 (|> random.nat (\ ! map (|>> (n.% 100) (n.max 1))))
         (^@ name2 [module2 short2]) (..random sizeM2 sizeS2)]
        (_.for [.Name]
               ($_ _.and
                   (_.for [/.equivalence]
                          ($equivalence.spec /.equivalence (..random sizeM1 sizeS1)))
                   (_.for [/.hash]
                          (|> (random.ascii 1)
                              (\ ! map (|>> [""]))
                              ($hash.spec /.hash)))
                   (_.for [/.order]
                          ($order.spec /.order (..random sizeM1 sizeS1)))
                   (_.for [/.codec]
                          (_.and ($codec.spec /.equivalence /.codec (..random sizeM1 sizeS1))
                                 (let [(^open "/\.") /.codec]
                                   (_.test "Encoding an name without a module component results in text equal to the short of the name."
                                           (if (text.empty? module1)
                                             (text\= short1 (/\encoded name1))
                                             #1)))))
                   
                   (_.cover [/.module /.short]
                            (and (same? module1 (/.module name1))
                                 (same? short1 (/.short name1))))
                   (_.for [.name_of]
                          (let [(^open "/\.") /.equivalence]
                            ($_ _.and
                                (_.test "Can obtain Name from identifier."
                                        (and (/\= [.prelude_module "yolo"] (.name_of .yolo))
                                             (/\= ["test/lux/data/name" "yolo"] (.name_of ..yolo))
                                             (/\= ["" "yolo"] (.name_of yolo))
                                             (/\= ["library/lux/test" "yolo"] (.name_of library/lux/test.yolo))))
                                (_.test "Can obtain Name from tag."
                                        (and (/\= [.prelude_module "yolo"] (.name_of #.yolo))
                                             (/\= ["test/lux/data/name" "yolo"] (.name_of #..yolo))
                                             (/\= ["" "yolo"] (.name_of #yolo))
                                             (/\= ["library/lux/test" "yolo"] (.name_of #library/lux/test.yolo)))))))
                   )))))
