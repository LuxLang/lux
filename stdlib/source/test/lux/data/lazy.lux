(.module:
  [lux #*
   [control
    [monad (#+ do Monad)]]
   [data
    ["&" lazy]]
   [math
    ["r" random]]]
  lux/test)

(context: "Lazy."
  (<| (times 100)
      (do @
        [left r.nat
         right r.nat
         #let [lazy (&.freeze (n/* left right))
               expected (n/* left right)]]
        ($_ seq
            (test "Lazying does not alter the expected value."
                  (n/= expected
                       (&.thaw lazy)))
            (test "Lazy values only evaluate once."
                  (and (not (is? expected
                                 (&.thaw lazy)))
                       (is? (&.thaw lazy)
                            (&.thaw lazy))))
            ))))

(context: "Functor, Apply, Monad."
  (<| (times 100)
      (do @
        [sample r.nat]
        ($_ seq
            (test "Functor map."
                  (|> (&.freeze sample)
                      (:: &.functor map inc)
                      &.thaw
                      (n/= (inc sample))))

            (test "Monad."
                  (|> (do &.monad
                        [f (wrap inc)
                         a (wrap sample)]
                        (wrap (f a)))
                      &.thaw
                      (n/= (inc sample))))
            
            (test "Apply apply."
                  (let [(^open "&;.") &.monad
                        (^open "&;.") &.apply]
                    (|> (&;apply (&;wrap inc) (&;wrap sample))
                        &.thaw
                        (n/= (inc sample)))))
            ))))
