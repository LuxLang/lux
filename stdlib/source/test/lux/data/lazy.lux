(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]
      ["$." equivalence]]}]
   [data
    [number
     ["n" nat]]]
   [math
    ["." random (#+ Random)]]]
  {1
   ["." / (#+ Lazy)]})

(def: injection
  (Injection Lazy)
  (|>> /.freeze))

(def: comparison
  (Comparison Lazy)
  (function (_ ==)
    (:: (/.equivalence ==) =)))

(def: #export lazy
  (All [a] (-> (Random a) (Random (Lazy a))))
  (:: random.functor map (|>> /.freeze)))

(def: #export test
  Test
  (<| (_.covering /._)
      (do random.monad
        [left random.nat
         right random.nat
         #let [expected (n.* left right)]]
        (_.with-cover [/.Lazy]
          ($_ _.and
              (_.with-cover [/.equivalence]
                ($equivalence.spec (/.equivalence n.equivalence) (..lazy random.nat)))
              (_.with-cover [/.functor]
                ($functor.spec ..injection ..comparison /.functor))
              (_.with-cover [/.apply]
                ($apply.spec ..injection ..comparison /.apply))
              (_.with-cover [/.monad]
                ($monad.spec ..injection ..comparison /.monad))

              (_.cover [/.freeze]
                       (let [lazy (/.freeze (n.* left right))]
                         (n.= expected
                              (/.thaw lazy))))

              (_.cover [/.thaw]
                       (let [lazy (/.freeze (n.* left right))]
                         (and (not (is? expected
                                        (/.thaw lazy)))
                              (is? (/.thaw lazy)
                                   (/.thaw lazy)))))
              )))))
