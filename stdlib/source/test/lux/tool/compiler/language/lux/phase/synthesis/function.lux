(.module:
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    ["[0]" monad {"+" do}]]
   [control
    ["[0]" try]]
   [data
    ["[0]" product]
    ["[0]" text
     ["%" format {"+" format}]]
    [number
     ["n" nat]]
    [collection
     ["[0]" list ("[1]#[0]" functor mix monoid)]
     ["[0]" dictionary {"+" Dictionary}]
     ["[0]" set]]]
   [math
    ["[0]" random {"+" Random}]]]
  ["[0]" // "_"
   ["[1][0]" primitive]]
  [\\
   ["[0]" /
    ["/[1]" //
     ["/[1]" // "_"
      [extension
       ["[1][0]" bundle]]
      ["/[1]" //
       ["[0]" analysis {"+" Analysis}]
       ["[0]" synthesis {"+" Synthesis}]
       [///
        [arity {"+" Arity}]
        ["[0]" reference
         ["[0]" variable {"+" Variable}]]
        ["[0]" phase]
        [meta
         ["[0]" archive]]]]]]]])

(def: (n_function loop? arity body)
  (-> Bit Arity Synthesis Synthesis)
  (synthesis.function/abstraction
   [synthesis.#environment (list)
    synthesis.#arity arity
    synthesis.#body (if loop?
                      (synthesis.loop/scope
                       [synthesis.#start 1
                        synthesis.#inits (list)
                        synthesis.#iteration body])
                      body)]))

(def: (n_abstraction arity body)
  (-> Arity Analysis Analysis)
  (list#mix (function (_ arity_1 body)
              (case arity_1
                0 {analysis.#Function (list) body}
                _ {analysis.#Function ($_ list#composite
                                          (list#each (|>> {variable.#Foreign})
                                                     (list.indices arity_1))
                                          (list {variable.#Local 1}))
                                      body}))
            body
            (list.reversed (list.indices arity))))

(template: (!expect <pattern> <value>)
  (case <value>
    <pattern>
    true
    
    _
    false))

(type: Circumstance
  (Record
   [#loop? Bit
    #expectation Synthesis
    #reality Analysis]))

(type: Scenario
  (-> Bit (Random Circumstance)))

(def: (random_unit output?)
  Scenario
  (# random.monad in
     [true
      (synthesis.text synthesis.unit)
      (analysis.unit)]))

(template [<name> <random> <synthesis> <analysis>]
  [(def: (<name> output?)
     Scenario
     (do [! random.monad]
       [value <random>]
       (in [true
            (<synthesis> value)
            (<analysis> value)])))]

  [random_bit random.bit synthesis.bit analysis.bit]
  [random_nat random.nat (|>> .i64 synthesis.i64) analysis.nat]
  [random_int random.int (|>> .i64 synthesis.i64) analysis.int]
  [random_rev random.rev (|>> .i64 synthesis.i64) analysis.rev]
  [random_frac random.frac synthesis.f64 analysis.frac]
  [random_text (random.unicode 1) synthesis.text analysis.text]
  )

(def: (random_primitive output?)
  Scenario
  (random.either (random.either (..random_unit output?)
                                (random.either (..random_bit output?)
                                               (..random_nat output?)))
                 (random.either (random.either (..random_int output?)
                                               (..random_rev output?))
                                (random.either (..random_frac output?)
                                               (..random_text output?)))))

(def: (random_variant random_value output?)
  (-> Scenario Scenario)
  (do [! random.monad]
    [lefts random.nat
     right? random.bit
     [loop? expected_value actual_value] (random_value false)]
    (in [loop?
         (synthesis.variant
          [analysis.#lefts lefts
           analysis.#right? right?
           analysis.#value expected_value])
         (analysis.variant
          [analysis.#lefts lefts
           analysis.#right? right?
           analysis.#value actual_value])])))

(def: (random_tuple random_value output?)
  (-> Scenario Scenario)
  (do [! random.monad]
    [[loop?_left expected_left actual_left] (random_value false)
     [loop?_right expected_right actual_right] (random_value false)]
    (in [(and loop?_left
              loop?_right)
         (synthesis.tuple (list expected_left expected_right))
         (analysis.tuple (list actual_left actual_right))])))

(def: (random_structure random_value output?)
  (-> Scenario Scenario)
  ($_ random.either
      (..random_variant random_value output?)
      (..random_tuple random_value output?)))

(def: (random_variable arity output?)
  (-> Arity Scenario)
  (do [! random.monad]
    [register (# ! each (|>> (n.% arity) ++) random.nat)]
    (in [(not (n.= 0 register))
         (synthesis.variable/local register)
         (if (n.= arity register)
           {analysis.#Reference (reference.local 1)}
           {analysis.#Reference (reference.foreign register)})])))

(def: (random_constant output?)
  Scenario
  (do [! random.monad]
    [module (random.unicode 1)
     short (random.unicode 1)]
    (in [true
         (synthesis.constant [module short])
         {analysis.#Reference (reference.constant [module short])}])))

(def: (random_reference arity output?)
  (-> Arity Scenario)
  (random.either (..random_variable arity output?)
                 (..random_constant output?)))

(def: (random_case arity random_value output?)
  (-> Arity Scenario Scenario)
  (do [! random.monad]
    [bit_test random.bit
     i64_test random.nat
     f64_test random.frac
     text_test (random.unicode 1)
     [loop?_input expected_input actual_input] (random_value false)
     [loop?_output expected_output actual_output] (random_value output?)
     lefts (|> random.nat (# ! each (n.% 10)))
     right? random.bit
     .let [side|member (if right?
                         {.#Right lefts}
                         {.#Left lefts})]]
    (in [(and loop?_input
              loop?_output)
         (synthesis.branch/case [expected_input
                                 ($_ synthesis.path/alt
                                     (synthesis.path/then expected_output)
                                     (synthesis.path/seq (synthesis.path/bit bit_test)
                                                         (synthesis.path/then expected_output))
                                     (synthesis.path/seq (synthesis.path/i64 (.i64 i64_test))
                                                         (synthesis.path/then expected_output))
                                     (synthesis.path/seq (synthesis.path/f64 f64_test)
                                                         (synthesis.path/then expected_output))
                                     (synthesis.path/seq (synthesis.path/text text_test)
                                                         (synthesis.path/then expected_output))
                                     (synthesis.path/seq (synthesis.path/bind (++ arity))
                                                         (synthesis.path/then expected_output))
                                     ($_ synthesis.path/seq
                                         (synthesis.path/side side|member)
                                         (synthesis.path/bind (++ arity))
                                         (synthesis.path/then expected_output))
                                     (if right?
                                       ($_ synthesis.path/seq
                                           (synthesis.path/member side|member)
                                           (synthesis.path/bind (++ arity))
                                           (synthesis.path/then expected_output)) 
                                       ($_ synthesis.path/seq
                                           (synthesis.path/member side|member)
                                           (synthesis.path/bind (++ arity))
                                           synthesis.path/pop
                                           (synthesis.path/then expected_output))))])
         {analysis.#Case actual_input
                         [[analysis.#when (analysis.pattern/unit)
                           analysis.#then actual_output]
                          (list [analysis.#when (analysis.pattern/bit bit_test)
                                 analysis.#then actual_output]
                                [analysis.#when (analysis.pattern/nat (.nat i64_test))
                                 analysis.#then actual_output]
                                [analysis.#when (analysis.pattern/frac f64_test)
                                 analysis.#then actual_output]
                                [analysis.#when (analysis.pattern/text text_test)
                                 analysis.#then actual_output]
                                [analysis.#when {analysis.#Bind 2}
                                 analysis.#then actual_output]
                                [analysis.#when (analysis.pattern/variant
                                                 [analysis.#lefts lefts
                                                  analysis.#right? right?
                                                  analysis.#value {analysis.#Bind 2}])
                                 analysis.#then actual_output]
                                [analysis.#when (analysis.pattern/tuple
                                                 (list#composite (list.repeated lefts (analysis.pattern/unit))
                                                                 (if right?
                                                                   (list (analysis.pattern/unit) {analysis.#Bind 2})
                                                                   (list {analysis.#Bind 2} (analysis.pattern/unit)))))
                                 analysis.#then actual_output])]}])))

(def: (random_let arity random_value output?)
  (-> Arity Scenario Scenario)
  (do [! random.monad]
    [[loop?_input expected_input actual_input] (random_value false)
     [loop?_output expected_output actual_output] (random_value output?)]
    (in [(and loop?_input
              loop?_output)
         (synthesis.branch/let [expected_input
                                (++ arity)
                                expected_output])
         {analysis.#Case actual_input
                         [[analysis.#when {analysis.#Bind 2}
                           analysis.#then actual_output]
                          (list)]}])))

(def: (random_if random_value output?)
  (-> Scenario Scenario)
  (do [! random.monad]
    [[loop?_test expected_test actual_test] (random_value false)
     [loop?_then expected_then actual_then] (random_value output?)
     [loop?_else expected_else actual_else] (random_value output?)
     flip? random.bit]
    (in [(and loop?_test
              loop?_then
              loop?_else)
         (synthesis.branch/if [expected_test
                               expected_then
                               expected_else])
         (if flip?
           {analysis.#Case actual_test
                           [[analysis.#when (analysis.pattern/bit false)
                             analysis.#then actual_else]
                            (list [analysis.#when (analysis.pattern/bit true)
                                   analysis.#then actual_then])]}
           {analysis.#Case actual_test
                           [[analysis.#when (analysis.pattern/bit true)
                             analysis.#then actual_then]
                            (list [analysis.#when (analysis.pattern/bit false)
                                   analysis.#then actual_else])]})])))

(def: (random_get random_value output?)
  (-> Scenario Scenario)
  (do [! random.monad]
    [lefts (|> random.nat (# ! each (n.% 10)))
     right? random.bit
     [loop?_record expected_record actual_record] (random_value false)]
    (in [loop?_record
         (synthesis.branch/get [(list (if right?
                                        {.#Right lefts}
                                        {.#Left lefts}))
                                expected_record])
         {analysis.#Case actual_record
                         [[analysis.#when (analysis.pattern/tuple
                                           (list#composite (list.repeated lefts (analysis.pattern/unit))
                                                           (if right?
                                                             (list (analysis.pattern/unit) {analysis.#Bind 2})
                                                             (list {analysis.#Bind 2} (analysis.pattern/unit)))))
                           analysis.#then {analysis.#Reference (reference.local 2)}]
                          (list)]}])))

(def: (random_branch arity random_value output?)
  (-> Arity Scenario Scenario)
  (random.either (random.either (..random_case arity random_value output?)
                                (..random_let arity random_value output?))
                 (random.either (..random_if random_value output?)
                                (..random_get random_value output?))))

(def: (random_again arity random_value output?)
  (-> Arity Scenario Scenario)
  (do [! random.monad]
    [resets (random.list arity (random_value false))]
    (in [true
         (synthesis.loop/again (list#each (|>> product.right product.left) resets))
         (analysis.apply [{analysis.#Reference (case arity
                                                 1 (reference.local 0)
                                                 _ (reference.foreign 0))}
                          (list#each (|>> product.right product.right) resets)])])))

(def: (random_scope arity output?)
  (-> Arity Scenario)
  (do [! random.monad]
    [resets (random.list arity (..random_variable arity output?))
     [_ expected_output actual_output] (..random_nat output?)]
    (in [(list#mix (function (_ new old)
                     (and new old))
                   true
                   (list#each product.left resets))
         (synthesis.loop/scope
          [synthesis.#start (++ arity)
           synthesis.#inits (list#each (|>> product.right product.left) resets)
           synthesis.#iteration expected_output])
         (analysis.apply [(..n_abstraction arity actual_output)
                          (list#each (|>> product.right product.right) resets)])])))

(def: (random_loop arity random_value output?)
  (-> Arity Scenario Scenario)
  (if output?
    ($_ random.either
        (..random_again arity random_value output?)
        (..random_scope arity output?)
        )
    (..random_scope arity output?)))

(def: (random_abstraction' output?)
  Scenario
  (do [! random.monad]
    [[loop?_output expected_output actual_output] (..random_nat output?)
     arity (|> random.nat (# ! each (|>> (n.% 5) ++)))
     .let [environment ($_ list#composite
                           (list#each (|>> {variable.#Foreign})
                                      (list.indices arity))
                           (list {variable.#Local 1}))]]
    (in [true
         (synthesis.function/abstraction
          [synthesis.#environment environment
           synthesis.#arity 1
           synthesis.#body (synthesis.loop/scope
                            [synthesis.#start 1
                             synthesis.#inits (list)
                             synthesis.#iteration expected_output])])
         {analysis.#Function environment
                             actual_output}])))

(def: (random_apply random_value output?)
  (-> Scenario Scenario)
  (do [! random.monad]
    [[loop?_abstraction expected_abstraction actual_abstraction] (..random_nat output?)
     arity (|> random.nat (# ! each (|>> (n.% 5) ++)))
     inputs (random.list arity (random_value false))]
    (in [(list#mix (function (_ new old)
                     (and new old))
                   loop?_abstraction
                   (list#each product.left inputs))
         (synthesis.function/apply [expected_abstraction
                                    (list#each (|>> product.right product.left) inputs)])
         (analysis.apply [actual_abstraction
                          (list#each (|>> product.right product.right) inputs)])])))

(def: (random_function random_value output?)
  (-> Scenario Scenario)
  (if output?
    (..random_apply random_value output?)
    ($_ random.either
        (..random_abstraction' output?)
        (..random_apply random_value output?)
        )))

(def: (random_control arity random_value output?)
  (-> Arity Scenario Scenario)
  ($_ random.either
      (..random_branch arity random_value output?)
      (..random_loop arity random_value output?)
      (..random_function random_value output?)
      ))

(def: (random_extension random_value output?)
  (-> Scenario Scenario)
  (do [! random.monad]
    [name (random.unicode 1)
     [loop?_first expected_first actual_first] (random_value false)
     [loop?_second expected_second actual_second] (random_value false)
     [loop?_third expected_third actual_third] (random_value false)]
    (in [(and loop?_first
              loop?_second
              loop?_third)
         {synthesis.#Extension name (list expected_first expected_second expected_third)}
         {analysis.#Extension name (list actual_first actual_second actual_third)}])))

(def: (random_body arity)
  (-> Arity Scenario)
  (function (random_value output?)
    (random.rec
     (function (_ _)
       ($_ random.either
           (..random_primitive output?)
           (..random_structure random_value output?)
           (..random_reference arity output?)
           (..random_control arity random_value output?)
           (..random_extension random_value output?))))))

(def: random_abstraction
  (Random [Synthesis Analysis])
  (do [! random.monad]
    [arity (|> random.nat (# ! each (|>> (n.% 5) ++)))
     [loop? expected_body actual_body] (random_body arity true)]
    (in [(..n_function loop? arity expected_body)
         (..n_abstraction arity actual_body)])))

(def: abstraction
  Test
  (do random.monad
    [[expected input] ..random_abstraction]
    (_.cover [/.abstraction]
             (|> input
                 (//.phase archive.empty)
                 (phase.result [///bundle.empty synthesis.init])
                 (!expect (^multi {try.#Success actual}
                                  (# synthesis.equivalence = expected actual)))))))

(def: application
  Test
  (do [! random.monad]
    [arity (|> random.nat (# ! each (|>> (n.% 10) (n.max 1))))
     funcA //primitive.primitive
     argsA (random.list arity //primitive.primitive)]
    (_.cover [/.apply]
             (and (|> (analysis.apply [funcA argsA])
                      (//.phase archive.empty)
                      (phase.result [///bundle.empty synthesis.init])
                      (!expect (^multi (^ {try.#Success (synthesis.function/apply [funcS argsS])})
                                       (and (//primitive.corresponds? funcA funcS)
                                            (list.every? (product.uncurried //primitive.corresponds?)
                                                         (list.zipped/2 argsA argsS))))))
                  (|> (analysis.apply [funcA (list)])
                      (//.phase archive.empty)
                      (phase.result [///bundle.empty synthesis.init])
                      (!expect (^multi {try.#Success funcS}
                                       (//primitive.corresponds? funcA funcS))))))))

(def: .public test
  Test
  (<| (_.covering /._)
      ($_ _.and
          ..abstraction
          ..application
          )))
