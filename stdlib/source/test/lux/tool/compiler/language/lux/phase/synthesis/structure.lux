(.using
 [lux "*"
  [abstract
   ["[0]" monad {"+" do}]]
  [data
   ["%" text/format {"+" format}]]
  ["r" math/random {"+" Random}]
  ["_" test {"+" Test}]
  [control
   ["[0]" pipe]
   ["[0]" try]]
  [data
   ["[0]" bit ("[1]#[0]" equivalence)]
   ["[0]" product]
   [number
    ["n" nat]]
   [collection
    ["[0]" list]]]
  [meta
   ["[0]" symbol]]]
 ["[0]" // "_"
  ["[1][0]" primitive]]
 [\\
  ["[0]" / "_"
   ["/[1]" //
    ["/[1]" // "_"
     [extension
      ["[1][0]" bundle]]
     ["/[1]" //
      ["[1][0]" analysis {"+" Analysis}]
      ["[1][0]" synthesis {"+" Synthesis}]
      [///
       ["[0]" phase]
       [meta
        ["[0]" archive]]]]]]]])

(def: variant
  Test
  (do [! r.monad]
    [size (|> r.nat (# ! each (|>> (n.% 10) (n.+ 2))))
     tagA (|> r.nat (# ! each (n.% size)))
     .let [right? (n.= (-- size) tagA)
           lefts (if right?
                   (-- tagA)
                   tagA)]
     memberA //primitive.primitive]
    (_.property "Can synthesize variants."
      (|> (////analysis.variant [lefts right? memberA])
          (//.phase archive.empty)
          (phase.result [///bundle.empty ////synthesis.init])
          (pipe.case
            (pattern {try.#Success (////synthesis.variant [leftsS right?S valueS])})
            (let [tagS (if right?S (++ leftsS) leftsS)]
              (and (n.= tagA tagS)
                   (|> tagS (n.= (-- size)) (bit#= right?S))
                   (//primitive.corresponds? memberA valueS)))
            
            _
            false)))))

(def: tuple
  Test
  (do [! r.monad]
    [size (|> r.nat (# ! each (|>> (n.% 10) (n.max 2))))
     membersA (r.list size //primitive.primitive)]
    (_.property "Can synthesize tuple."
      (|> (////analysis.tuple membersA)
          (//.phase archive.empty)
          (phase.result [///bundle.empty ////synthesis.init])
          (pipe.case
            (pattern {try.#Success (////synthesis.tuple membersS)})
            (and (n.= size (list.size membersS))
                 (list.every? (product.uncurried //primitive.corresponds?)
                              (list.zipped_2 membersA membersS)))

            _
            false)))))

(def: .public test
  Test
  (<| (_.context (%.symbol (symbol ////synthesis.#Structure)))
      (all _.and
           ..variant
           ..tuple
           )))
