(.using
 [lux {"-" structure loop function}
  ["_" test (.only Test)]
  [abstract
   [monad (.only do)]]
  [control
   ["[0]" try]
   ["[0]" exception]]
  [data
   [number
    ["n" nat]]
   [collection
    ["[0]" list ("[1]#[0]" functor)]]]
  [math
   ["[0]" random (.only Random) ("[1]#[0]" monad)]]]
 [\\
  ["[0]" /
   [////
    ["[0]" analysis (.only Environment)]
    ["/[1]" synthesis (.only Member Path Synthesis)]
    [///
     [arity (.only Arity)]
     ["[0]" reference (.only Constant)
      ["[0]" variable (.only Register Variable)]]]]]])

(type: (Scenario a)
  (-> Register Arity Register (Random [Register [a a]])))

(def: (primitive offset arity next)
  (Scenario Synthesis)
  (`` (all random.either
           (~~ (template [<synthesis> <random>]
                 [(do [! random.monad]
                    [example (# ! each (|>> <synthesis>) <random>)]
                    (in [next
                         [example
                          example]]))]

                 [//.bit random.bit]
                 [//.i64 (# ! each .i64 random.nat)]
                 [//.f64 random.frac]
                 [//.text (random.unicode 1)]
                 ))
           )))

(def: (constant offset arity next)
  (Scenario Constant)
  (do random.monad
    [name (random.and (random.unicode 1)
                      (random.unicode 1))]
    (in [next
         [name
          name]])))

(def: (variable offset arity next)
  (Scenario Variable)
  (let [local (do [! random.monad]
                [register (# ! each (|>> (n.% arity) ++) random.nat)]
                (in [next
                     [{variable.#Local (/.register_optimization offset register)}
                      {variable.#Local register}]]))]
    (case offset
      0 local
      _ (all random.either
             local
             (do [! random.monad]
               [foreign (# ! each (n.% offset) random.nat)]
               (in [next
                    [{variable.#Local foreign}
                     {variable.#Foreign foreign}]]))))))

(def: (reference offset arity next)
  (Scenario Synthesis)
  (`` (all random.either
           (~~ (template [<tag> <random>]
                 [(do [! random.monad]
                    [[next [exampleE exampleA]] (<random> offset arity next)]
                    (in [next
                         [(<tag> exampleE)
                          (<tag> exampleA)]]))]

                 [//.constant ..constant]
                 [//.variable ..variable]
                 )))))

(def: (structure offset arity next)
  (Scenario Synthesis)
  (all random.either
       (do [! random.monad]
         [lefts random.nat
          right? random.bit
          [next [valueE valueA]] (..reference offset arity next)]
         (in [next
              [(//.variant
                [analysis.#lefts lefts
                 analysis.#right? right?
                 analysis.#value valueE])
               (//.variant
                [analysis.#lefts lefts
                 analysis.#right? right?
                 analysis.#value valueA])]]))
       (do [! random.monad]
         [[next [leftE leftA]] (..reference offset arity next)
          [next [rightE rightA]] (..reference offset arity next)]
         (in [next
              [(//.tuple (list leftE rightE))
               (//.tuple (list leftA rightA))]]))
       ))

(def: path
  (Scenario Path)
  (let [pattern (is (Scenario Path)
                    (.function (again offset arity next)
                      (`` (all random.either
                               (random#in [next
                                           [//.path/pop
                                            //.path/pop]])
                               (~~ (template [<path> <random>]
                                     [(do [! random.monad]
                                        [example (# ! each (|>> <path>) <random>)]
                                        (in [next
                                             [example
                                              example]]))]

                                     [//.path/bit random.bit]
                                     [//.path/i64 (# ! each .i64 random.nat)]
                                     [//.path/f64 random.frac]
                                     [//.path/text (random.unicode 1)]
                                     ))
                               (~~ (template [<path>]
                                     [(do [! random.monad]
                                        [example (# ! each (|>> <path>)
                                                    (random.or random.nat
                                                               random.nat))]
                                        (in [next
                                             [example
                                              example]]))]

                                     [//.path/side]
                                     [//.path/member]
                                     ))
                               (random#in [(++ next)
                                           [(//.path/bind (/.register_optimization offset next))
                                            (//.path/bind next)]])
                               ))))
        sequential (is (Scenario Path)
                       (.function (again offset arity next)
                         (do random.monad
                           [[next [patternE patternA]] (pattern offset arity next)
                            [next [bodyE bodyA]] (..reference offset arity next)]
                           (in [next
                                [(//.path/seq patternE (//.path/then bodyE))
                                 (//.path/seq patternA (//.path/then bodyA))]]))))]
    (.function (again offset arity next)
      (do random.monad
        [[next [leftE leftA]] (sequential offset arity next)
         [next [rightE rightA]] (sequential offset arity next)]
        (in [next
             [(//.path/alt leftE rightE)
              (//.path/alt leftA rightA)]])))))

(def: (branch offset arity next)
  (Scenario Synthesis)
  (let [random_member (is (Random Member)
                          (random.or random.nat
                                     random.nat))]
    (all random.either
         (all random.either
              (do [! random.monad]
                [[next [inputE inputA]] (..reference offset arity next)
                 [next [bodyE bodyA]] (..reference offset arity next)]
                (in [next
                     [(//.branch/let [inputE (/.register_optimization offset next) bodyE])
                      (//.branch/let [inputA next bodyA])]]))
              (do [! random.monad]
                [[next [testE testA]] (..reference offset arity next)
                 [next [thenE thenA]] (..reference offset arity next)
                 [next [elseE elseA]] (..reference offset arity next)]
                (in [next
                     [(//.branch/if [testE thenE elseE])
                      (//.branch/if [testA thenA elseA])]])))
         (all random.either
              (do [! random.monad]
                [[next [recordE recordA]] (..reference offset arity next)
                 path_length (# ! each (|>> (n.% 5) ++) random.nat)
                 path (random.list path_length random_member)]
                (in [next
                     [(//.branch/get [path recordE])
                      (//.branch/get [path recordA])]]))
              (do [! random.monad]
                [[next [inputE inputA]] (..reference offset arity next)
                 [next [pathE pathA]] (..path offset arity next)]
                (in [next
                     [(//.branch/case [inputE pathE])
                      (//.branch/case [inputA pathA])]])))
         )))

(def: (loop offset arity next)
  (Scenario Synthesis)
  (all random.either
       (do random.monad
         [[next [firstE firstA]] (..reference offset arity next)
          [next [secondE secondA]] (..reference offset arity next)
          [next [iterationE iterationA]] (..reference offset arity next)]
         (in [next
              [(//.loop/scope
                [//.#start (/.register_optimization offset next)
                 //.#inits (list firstE secondE)
                 //.#iteration iterationE])
               (//.loop/scope
                [//.#start next
                 //.#inits (list firstA secondA)
                 //.#iteration iterationA])]]))
       ))

(def: (function offset arity next)
  (Scenario Synthesis)
  (all random.either
       (do [! random.monad]
         [[next [firstE firstA]] (..variable offset arity next)
          [next [secondE secondA]] (..variable offset arity next)
          arity (# ! each (n.max 1) random.nat)
          [next [bodyE bodyA]] (..primitive 0 arity next)]
         (in [next
              [(//.function/abstraction
                [//.#environment (list firstE secondE)
                 //.#arity arity
                 //.#body bodyE])
               (//.function/abstraction
                [//.#environment (list firstA secondA)
                 //.#arity arity
                 //.#body bodyA])]]))
       ))

(def: (control offset arity next)
  (Scenario Synthesis)
  (all random.either
       (..branch offset arity next)
       (..loop offset arity next)
       (..function offset arity next)
       ))

(def: (extension offset arity next)
  (Scenario Synthesis)
  (do random.monad
    [name (random.unicode 10)
     [next [firstE firstA]] (..reference offset arity next)
     [next [secondE secondA]] (..reference offset arity next)
     [next [thirdE thirdA]] (..reference offset arity next)]
    (in [next
         [{//.#Extension name (list firstE secondE thirdE)}
          {//.#Extension name (list firstA secondA thirdA)}]])))

(def: (scenario offset arity next)
  (Scenario Synthesis)
  (all random.either
       (..primitive offset arity next)
       (..structure offset arity next)
       (..reference offset arity next)
       (..control offset arity next)
       (..extension offset arity next)
       ))

(def: .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (do [! random.monad]
             [expected_offset (# ! each (|>> (n.% 5) (n.+ 2)) random.nat)
              arity (# ! each (|>> (n.% 5) ++) random.nat)
              expected_inits (|> random.nat
                                 (# ! each (|>> .i64 //.i64))
                                 (random.list arity))
              [_ [expected iteration]] (..scenario expected_offset arity 0)]
             (_.coverage [/.Transform /.optimization /.register_optimization]
               (case (/.optimization true expected_offset expected_inits
                                     [//.#environment (|> expected_offset
                                                          list.indices
                                                          (list#each (|>> {variable.#Local})))
                                      //.#arity arity
                                      //.#body iteration])
                 (pattern {.#Some (//.loop/scope [actual_offset actual_inits
                                                  actual])})
                 (and (n.= expected_offset
                           actual_offset)
                      (# (list.equivalence //.equivalence) =
                         expected_inits
                         actual_inits)
                      (# //.equivalence = expected actual))
                 
                 _
                 false)))
           )))
