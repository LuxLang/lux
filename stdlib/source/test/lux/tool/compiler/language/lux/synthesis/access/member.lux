(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" hash]]]
   [data
    ["[0]" bit ("[1]#[0]" equivalence)]
    ["[0]" text ("[1]#[0]" equivalence)]]
   [math
    ["[0]" random {"+" Random}]]]]
 [\\library
  ["[0]" /]])

(def: .public random
  (Random /.Member)
  ($_ random.and
      random.nat
      random.bit
      ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Member])
      (do [! random.monad]
        [left ..random
         right  ..random]
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec /.equivalence ..random))
            (_.for [/.hash]
                   ($hash.spec /.hash ..random))
            
            (_.cover [/.format]
                     (bit#= (# /.equivalence = left right)
                            (text#= (/.format left) (/.format right))))
            ))))
