(.module:
  [lux (#- i64 int primitive)
   [abstract
    ["." monad (#+ do)]]
   [data
    ["%" text/format (#+ format)]
    ["." name]]
   ["r" math/random (#+ Random)]
   ["_" test (#+ Test)]
   [control
    pipe
    [io (#+ IO)]
    ["." try]
    [concurrency
     ["." atom]]]
   [data
    ["." product]]
   ["." type ("#\." equivalence)]
   [macro
    ["." code]]]
  [////
   [analysis
    ["_." primitive]]]
  {1
   ["." /
    ["///#" //// #_
     [analysis
      ["#." scope]
      ["#." type]]
     [////
      ["." phase]
      [meta
       ["." archive]]]]]})

(template [<name> <success> <failure>]
  [(def: (<name> procedure params output-type)
     (-> Text (List Code) Type Bit)
     (|> (////scope.with-scope ""
           (////type.with-type output-type
             (_primitive.phase archive.empty (` ((~ (code.text procedure)) (~+ params))))))
         (phase.run _primitive.state)
         (case> (#try.Success _)
                <success>

                (#try.Failure _)
                <failure>)))]

  [check-success+ true false]
  [check-failure+ false true]
  )

(def: primitive
  (Random [Type Code])
  (r.filter (|>> product.left (is? Any) not) _primitive.primitive))

(def: lux
  Test
  (do r.monad
    [[primT primC] ..primitive
     [antiT antiC] (|> ..primitive
                       (r.filter (|>> product.left (type\= primT) not)))]
    ($_ _.and
        (_.test "Can test for reference equality."
                (check-success+ "lux is" (list primC primC) Bit))
        (_.test "Reference equality must be done with elements of the same type."
                (check-failure+ "lux is" (list primC antiC) Bit))
        (_.test "Can 'try' risky IO computations."
                (check-success+ "lux try"
                                (list (` ("lux io error" "YOLO")))
                                (type (Either Text primT))))
        )))

(def: i64
  Test
  (do {! r.monad}
    [subjectC (|> r.nat (\ ! map code.nat))
     signedC (|> r.int (\ ! map code.int))
     paramC (|> r.nat (\ ! map code.nat))]
    ($_ _.and
        (_.test "i64 'and'."
                (check-success+ "lux i64 and" (list paramC subjectC) Nat))
        (_.test "i64 'or'."
                (check-success+ "lux i64 or" (list paramC subjectC) Nat))
        (_.test "i64 'xor'."
                (check-success+ "lux i64 xor" (list paramC subjectC) Nat))
        (_.test "i64 left-shift."
                (check-success+ "lux i64 left-shift" (list paramC subjectC) Nat))
        (_.test "i64 logical-right-shift."
                (check-success+ "lux i64 logical-right-shift" (list paramC subjectC) Nat))
        (_.test "i64 arithmetic-right-shift."
                (check-success+ "lux i64 arithmetic-right-shift" (list paramC signedC) Int))
        (_.test "i64 equivalence."
                (check-success+ "lux i64 =" (list paramC subjectC) Bit))
        (_.test "i64 addition."
                (check-success+ "lux i64 +" (list paramC subjectC) Int))
        (_.test "i64 subtraction."
                (check-success+ "lux i64 -" (list paramC subjectC) Int))
        )))

(def: int
  Test
  (do {! r.monad}
    [subjectC (|> r.int (\ ! map code.int))
     paramC (|> r.int (\ ! map code.int))]
    ($_ _.and
        (_.test "Can multiply integers."
                (check-success+ "lux i64 *" (list paramC subjectC) Int))
        (_.test "Can divide integers."
                (check-success+ "lux i64 /" (list paramC subjectC) Int))
        (_.test "Can calculate remainder of integers."
                (check-success+ "lux i64 %" (list paramC subjectC) Int))
        (_.test "Can compare integers."
                (check-success+ "lux i64 <" (list paramC subjectC) Bit))
        (_.test "Can convert integer to text."
                (check-success+ "lux i64 char" (list subjectC) Text))
        (_.test "Can convert integer to fraction."
                (check-success+ "lux i64 f64" (list subjectC) Frac))
        )))

(def: frac
  Test
  (do {! r.monad}
    [subjectC (|> r.safe-frac (\ ! map code.frac))
     paramC (|> r.safe-frac (\ ! map code.frac))
     encodedC (|> r.safe-frac (\ ! map (|>> %.frac code.text)))]
    ($_ _.and
        (_.test "Can add frac numbers."
                (check-success+ "lux f64 +" (list paramC subjectC) Frac))
        (_.test "Can subtract frac numbers."
                (check-success+ "lux f64 -" (list paramC subjectC) Frac))
        (_.test "Can multiply frac numbers."
                (check-success+ "lux f64 *" (list paramC subjectC) Frac))
        (_.test "Can divide frac numbers."
                (check-success+ "lux f64 /" (list paramC subjectC) Frac))
        (_.test "Can calculate remainder of frac numbers."
                (check-success+ "lux f64 %" (list paramC subjectC) Frac))
        (_.test "Can test equivalence of frac numbers."
                (check-success+ "lux f64 =" (list paramC subjectC) Bit))
        (_.test "Can compare frac numbers."
                (check-success+ "lux f64 <" (list paramC subjectC) Bit))
        (_.test "Can obtain minimum frac number."
                (check-success+ "lux f64 min" (list) Frac))
        (_.test "Can obtain maximum frac number."
                (check-success+ "lux f64 max" (list) Frac))
        (_.test "Can obtain smallest frac number."
                (check-success+ "lux f64 smallest" (list) Frac))
        (_.test "Can convert frac number to integer."
                (check-success+ "lux f64 i64" (list subjectC) Int))
        (_.test "Can convert frac number to text."
                (check-success+ "lux f64 encode" (list subjectC) Text))
        (_.test "Can convert text to frac number."
                (check-success+ "lux f64 decode" (list encodedC) (type (Maybe Frac))))
        )))

(def: text
  Test
  (do {! r.monad}
    [subjectC (|> (r.unicode 5) (\ ! map code.text))
     paramC (|> (r.unicode 5) (\ ! map code.text))
     replacementC (|> (r.unicode 5) (\ ! map code.text))
     fromC (|> r.nat (\ ! map code.nat))
     toC (|> r.nat (\ ! map code.nat))]
    ($_ _.and
        (_.test "Can test text equivalence."
                (check-success+ "lux text =" (list paramC subjectC) Bit))
        (_.test "Compare texts in lexicographical order."
                (check-success+ "lux text <" (list paramC subjectC) Bit))
        (_.test "Can concatenate one text to another."
                (check-success+ "lux text concat" (list subjectC paramC) Text))
        (_.test "Can find the index of a piece of text inside a larger one that (may) contain it."
                (check-success+ "lux text index" (list fromC paramC subjectC) (type (Maybe Nat))))
        (_.test "Can query the size/length of a text."
                (check-success+ "lux text size" (list subjectC) Nat))
        (_.test "Can obtain the character code of a text at a given index."
                (check-success+ "lux text char" (list fromC subjectC) Nat))
        (_.test "Can clip a piece of text between 2 indices."
                (check-success+ "lux text clip" (list fromC toC subjectC) Text))
        )))

(def: io
  Test
  (do {! r.monad}
    [logC (|> (r.unicode 5) (\ ! map code.text))
     exitC (|> r.int (\ ! map code.int))]
    ($_ _.and
        (_.test "Can log messages to standard output."
                (check-success+ "lux io log" (list logC) Any))
        (_.test "Can throw a run-time error."
                (check-success+ "lux io error" (list logC) Nothing))
        (_.test "Can query the current time (as milliseconds since epoch)."
                (check-success+ "lux io current-time" (list) Int))
        )))

(def: #export test
  Test
  (<| (_.context (name.module (name-of /._)))
      ($_ _.and
          ..lux
          ..i64
          ..int
          ..frac
          ..text
          ..io
          )))
