(.using
 [lux (.except i64 int primitive)
  [abstract
   ["[0]" monad (.only do)]]
  [data
   ["%" text/format (.only format)]]
  ["r" math/random (.only Random)]
  ["_" test (.only Test)]
  [control
   [io (.only IO)]
   ["[0]" pipe]
   ["[0]" try]
   [concurrency
    ["[0]" atom]]]
  [data
   ["[0]" product]]
  ["[0]" type (.open: "[1]#[0]" equivalence)]
  [macro
   ["[0]" code]]
  [meta
   ["[0]" symbol]]]
 [////
  [analysis
   ["_[0]" primitive]]]
 [\\
  ["[0]" / (.only)
   ["///[1]" ////
    [analysis
     ["[1][0]" scope]
     ["[1][0]" type]]
    [////
     ["[0]" phase]
     [meta
      ["[0]" archive]]]]]])

(with_template [<name> <success> <failure>]
  [(def: (<name> procedure params output_type)
     (-> Text (List Code) Type Bit)
     (|> (////scope.with_scope ""
           (////type.with_type output_type
             (_primitive.phase archive.empty (` ((~ (code.text procedure)) (~+ params))))))
         (phase.result _primitive.state)
         (pipe.case
           {try.#Success _}
           <success>

           {try.#Failure _}
           <failure>)))]

  [check_success+ true false]
  [check_failure+ false true]
  )

(def: primitive
  (Random [Type Code])
  (r.only (|>> product.left (same? Any) not) _primitive.primitive))

(def: lux
  Test
  (do r.monad
    [[primT primC] ..primitive
     [antiT antiC] (|> ..primitive
                       (r.only (|>> product.left (type#= primT) not)))]
    (all _.and
         (_.property "Can test for reference equality."
           (check_success+ "lux is" (list primC primC) Bit))
         (_.property "Reference equality must be done with elements of the same type."
           (check_failure+ "lux is" (list primC antiC) Bit))
         (_.property "Can 'try' risky IO computations."
           (check_success+ "lux try"
                           (list (` ("lux io error" "YOLO")))
                           (type (Either Text primT))))
         )))

(def: i64
  Test
  (do [! r.monad]
    [subjectC (|> r.nat (at ! each code.nat))
     signedC (|> r.int (at ! each code.int))
     paramC (|> r.nat (at ! each code.nat))]
    (all _.and
         (_.property "i64 'and'."
           (check_success+ "lux i64 and" (list paramC subjectC) Nat))
         (_.property "i64 'or'."
           (check_success+ "lux i64 or" (list paramC subjectC) Nat))
         (_.property "i64 'xor'."
           (check_success+ "lux i64 xor" (list paramC subjectC) Nat))
         (_.property "i64 left-shift."
           (check_success+ "lux i64 left-shift" (list paramC subjectC) Nat))
         (_.property "i64 logical-right-shift."
           (check_success+ "lux i64 logical-right-shift" (list paramC subjectC) Nat))
         (_.property "i64 arithmetic-right-shift."
           (check_success+ "lux i64 arithmetic-right-shift" (list paramC signedC) Int))
         (_.property "i64 equivalence."
           (check_success+ "lux i64 =" (list paramC subjectC) Bit))
         (_.property "i64 addition."
           (check_success+ "lux i64 +" (list paramC subjectC) Int))
         (_.property "i64 subtraction."
           (check_success+ "lux i64 -" (list paramC subjectC) Int))
         )))

(def: int
  Test
  (do [! r.monad]
    [subjectC (|> r.int (at ! each code.int))
     paramC (|> r.int (at ! each code.int))]
    (all _.and
         (_.property "Can multiply integers."
           (check_success+ "lux i64 *" (list paramC subjectC) Int))
         (_.property "Can divide integers."
           (check_success+ "lux i64 /" (list paramC subjectC) Int))
         (_.property "Can calculate remainder of integers."
           (check_success+ "lux i64 %" (list paramC subjectC) Int))
         (_.property "Can compare integers."
           (check_success+ "lux i64 <" (list paramC subjectC) Bit))
         (_.property "Can convert integer to text."
           (check_success+ "lux i64 char" (list subjectC) Text))
         (_.property "Can convert integer to fraction."
           (check_success+ "lux i64 f64" (list subjectC) Frac))
         )))

(def: frac
  Test
  (do [! r.monad]
    [subjectC (|> r.safe_frac (at ! each code.frac))
     paramC (|> r.safe_frac (at ! each code.frac))
     encodedC (|> r.safe_frac (at ! each (|>> %.frac code.text)))]
    (all _.and
         (_.property "Can add frac numbers."
           (check_success+ "lux f64 +" (list paramC subjectC) Frac))
         (_.property "Can subtract frac numbers."
           (check_success+ "lux f64 -" (list paramC subjectC) Frac))
         (_.property "Can multiply frac numbers."
           (check_success+ "lux f64 *" (list paramC subjectC) Frac))
         (_.property "Can divide frac numbers."
           (check_success+ "lux f64 /" (list paramC subjectC) Frac))
         (_.property "Can calculate remainder of frac numbers."
           (check_success+ "lux f64 %" (list paramC subjectC) Frac))
         (_.property "Can test equivalence of frac numbers."
           (check_success+ "lux f64 =" (list paramC subjectC) Bit))
         (_.property "Can compare frac numbers."
           (check_success+ "lux f64 <" (list paramC subjectC) Bit))
         (_.property "Can obtain minimum frac number."
           (check_success+ "lux f64 min" (list) Frac))
         (_.property "Can obtain maximum frac number."
           (check_success+ "lux f64 max" (list) Frac))
         (_.property "Can obtain smallest frac number."
           (check_success+ "lux f64 smallest" (list) Frac))
         (_.property "Can convert frac number to integer."
           (check_success+ "lux f64 i64" (list subjectC) Int))
         (_.property "Can convert frac number to text."
           (check_success+ "lux f64 encode" (list subjectC) Text))
         (_.property "Can convert text to frac number."
           (check_success+ "lux f64 decode" (list encodedC) (type (Maybe Frac))))
         )))

(def: text
  Test
  (do [! r.monad]
    [subjectC (|> (r.unicode 5) (at ! each code.text))
     paramC (|> (r.unicode 5) (at ! each code.text))
     replacementC (|> (r.unicode 5) (at ! each code.text))
     fromC (|> r.nat (at ! each code.nat))
     toC (|> r.nat (at ! each code.nat))]
    (all _.and
         (_.property "Can test text equivalence."
           (check_success+ "lux text =" (list paramC subjectC) Bit))
         (_.property "Compare texts in lexicographical order."
           (check_success+ "lux text <" (list paramC subjectC) Bit))
         (_.property "Can concatenate one text to another."
           (check_success+ "lux text concat" (list subjectC paramC) Text))
         (_.property "Can find the index of a piece of text inside a larger one that (may) contain it."
           (check_success+ "lux text index" (list fromC paramC subjectC) (type (Maybe Nat))))
         (_.property "Can query the size/length of a text."
           (check_success+ "lux text size" (list subjectC) Nat))
         (_.property "Can obtain the character code of a text at a given index."
           (check_success+ "lux text char" (list fromC subjectC) Nat))
         (_.property "Can clip a piece of text between 2 indices."
           (check_success+ "lux text clip" (list fromC toC subjectC) Text))
         )))

(def: io
  Test
  (do [! r.monad]
    [logC (|> (r.unicode 5) (at ! each code.text))
     exitC (|> r.int (at ! each code.int))]
    (all _.and
         (_.property "Can log messages to standard output."
           (check_success+ "lux io log" (list logC) Any))
         (_.property "Can throw a run-time error."
           (check_success+ "lux io error" (list logC) Nothing))
         (_.property "Can query the current time (as milliseconds since epoch)."
           (check_success+ "lux io current-time" (list) Int))
         )))

(def: .public test
  Test
  (<| (_.context (symbol.module (symbol /._)))
      (all _.and
           ..lux
           ..i64
           ..int
           ..frac
           ..text
           ..io
           )))
