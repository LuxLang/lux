(.module:
  [lux (#- primitive)
   ["@" target]
   [abstract
    ["." monad (#+ do)]]
   [data
    ["%" text/format (#+ format)]
    ["." name]]
   ["r" math/random (#+ Random) ("#\." monad)]
   ["_" test (#+ Test)]
   [control
    pipe
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]]
   [macro
    ["." code]]]
  [\\
   ["." /
    ["/#" //
     ["#." type]
     ["/#" // #_
      [extension
       ["." bundle]
       ["#." analysis]]
      ["/#" // #_
       ["." version]
       ["#." analysis (#+ Analysis Operation)
        [macro (#+ Expander)]
        [evaluation (#+ Eval)]]
       [///
        ["." phase]
        [meta
         ["." archive]]]]]]]])

(def: #export (expander macro inputs state)
  Expander
  (#try.Failure "NOPE"))

(def: #export (eval archive count type expression)
  Eval
  (function (_ state)
    (#try.Failure "NO!")))

(def: #export phase
  ////analysis.Phase
  (//.phase ..expander))

(def: #export state
  ////analysis.State+
  [(///analysis.bundle ..eval bundle.empty)
   (////analysis.state (////analysis.info version.version @.jvm))])

(def: #export primitive
  (Random [Type Code])
  (`` ($_ r.either
          (~~ (template [<type> <code_wrapper> <value_gen>]
                [(r.and (r\wrap <type>) (r\map <code_wrapper> <value_gen>))]

                [Any  code.tuple (r.list 0 (r\wrap (' [])))]
                [Bit  code.bit   r.bit]
                [Nat  code.nat   r.nat]
                [Int  code.int   r.int]
                [Rev  code.rev   r.rev]
                [Frac code.frac  r.frac]
                [Text code.text  (r.unicode 5)]
                )))))

(exception: (wrong_inference {expected Type} {inferred Type})
  (exception.report
   ["Expected" (%.type expected)]
   ["Inferred" (%.type inferred)]))

(def: (infer expected_type analysis)
  (-> Type (Operation Analysis) (Try Analysis))
  (|> analysis
      //type.with_inference
      (phase.run ..state)
      (case> (#try.Success [inferred_type output])
             (if (is? expected_type inferred_type)
               (#try.Success output)
               (exception.throw wrong_inference [expected_type inferred_type]))

             (#try.Failure error)
             (#try.Failure error))))

(def: #export test
  (<| (_.context (name.module (name_of /._)))
      (`` ($_ _.and
              (_.test (%.name (name_of #////analysis.Unit))
                      (|> (infer Any (..phase archive.empty (' [])))
                          (case> (^ (#try.Success (#////analysis.Primitive (#////analysis.Unit output))))
                                 (is? [] output)

                                 _
                                 false)))
              (~~ (template [<type> <tag> <random> <constructor>]
                    [(do r.monad
                       [sample <random>]
                       (_.test (%.name (name_of <tag>))
                               (|> (infer <type> (..phase archive.empty (<constructor> sample)))
                                   (case> (#try.Success (#////analysis.Primitive (<tag> output)))
                                          (is? sample output)

                                          _
                                          false))))]

                    [Bit  #////analysis.Bit  r.bit         code.bit]
                    [Nat  #////analysis.Nat  r.nat         code.nat]
                    [Int  #////analysis.Int  r.int         code.int]
                    [Rev  #////analysis.Rev  r.rev         code.rev]
                    [Frac #////analysis.Frac r.frac        code.frac]
                    [Text #////analysis.Text (r.unicode 5) code.text]
                    ))))))
