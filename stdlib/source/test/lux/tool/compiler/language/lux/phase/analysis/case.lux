(.module:
  [lux #*
   [abstract ["." monad (#+ do)]]
   [data
    ["%" text/format (#+ format)]
    ["." name ("#@." equivalence)]]
   ["r" math/random (#+ Random) ("#@." monad)]
   ["_" test (#+ Test)]
   [control
    pipe]
   [data
    ["." product]
    ["." maybe]
    ["." text ("#@." equivalence)]
    [number
     ["n" nat]]
    [collection
     ["." list ("#@." monad)]
     ["." set]]]
   ["." type
    ["." check]]
   [macro
    ["." code]]]
  [//
   ["_." primitive]
   ["_." structure]]
  {1
   ["." /
    ["/#" //
     ["#." module]
     ["#." type]
     ["/#" // #_
      ["/#" //
       ["#." analysis (#+ Analysis Variant Tag Operation)]
       [///
        ["." phase]
        [meta
         ["." archive]]]]]]]})

(def: (exhaustive-weaving branchings)
  (-> (List (List Code)) (List (List Code)))
  (case branchings
    #.Nil
    #.Nil

    (#.Cons head+ #.Nil)
    (list@map (|>> list) head+)

    (#.Cons head+ tail++)
    (do list.monad
      [tail+ (exhaustive-weaving tail++)
       head head+]
      (wrap (#.Cons head tail+)))))

(def: #export (exhaustive-branches allow-literals? variantTC inputC)
  (-> Bit (List [Code Code]) Code (Random (List Code)))
  (case inputC
    [_ (#.Bit _)]
    (r@wrap (list (' #0) (' #1)))

    (^template [<tag> <gen> <wrapper>]
      [_ (<tag> _)]
      (if allow-literals?
        (do {@ r.monad}
          [?sample (r.maybe <gen>)]
          (case ?sample
            (#.Some sample)
            (do @
              [else (exhaustive-branches allow-literals? variantTC inputC)]
              (wrap (list& (<wrapper> sample) else)))

            #.None
            (wrap (list (' _)))))
        (r@wrap (list (' _)))))
    ([#.Nat  r.nat         code.nat]
     [#.Int  r.int         code.int]
     [#.Rev  r.rev         code.rev]
     [#.Frac r.frac        code.frac]
     [#.Text (r.unicode 5) code.text])
    
    (^ [_ (#.Tuple (list))])
    (r@wrap (list (' [])))

    [_ (#.Tuple members)]
    (do {@ r.monad}
      [member-wise-patterns (monad.map @ (exhaustive-branches allow-literals? variantTC) members)]
      (wrap (|> member-wise-patterns
                exhaustive-weaving
                (list@map code.tuple))))

    (^ [_ (#.Record (list))])
    (r@wrap (list (' {})))

    [_ (#.Record kvs)]
    (do {@ r.monad}
      [#let [ks (list@map product.left kvs)
             vs (list@map product.right kvs)]
       member-wise-patterns (monad.map @ (exhaustive-branches allow-literals? variantTC) vs)]
      (wrap (|> member-wise-patterns
                exhaustive-weaving
                (list@map (|>> (list.zip/2 ks) code.record)))))

    (^ [_ (#.Form (list [_ (#.Tag _)] _))])
    (do {@ r.monad}
      [bundles (monad.map @
                          (function (_ [_tag _code])
                            (do @
                              [v-branches (exhaustive-branches allow-literals? variantTC _code)]
                              (wrap (list@map (function (_ pattern) (` ((~ _tag) (~ pattern))))
                                              v-branches))))
                          variantTC)]
      (wrap (list@join bundles)))

    _
    (r@wrap (list))
    ))

(def: #export (input variant-tags record-tags primitivesC)
  (-> (List Code) (List Code) (List Code) (Random Code))
  (r.rec
   (function (_ input)
     ($_ r.either
         (r@map product.right _primitive.primitive)
         (do {@ r.monad}
           [choice (|> r.nat (:: @ map (n.% (list.size variant-tags))))
            #let [choiceT (maybe.assume (list.nth choice variant-tags))
                  choiceC (maybe.assume (list.nth choice primitivesC))]]
           (wrap (` ((~ choiceT) (~ choiceC)))))
         (do {@ r.monad}
           [size (|> r.nat (:: @ map (n.% 3)))
            elems (r.list size input)]
           (wrap (code.tuple elems)))
         (r@wrap (code.record (list.zip/2 record-tags primitivesC)))
         ))))

(def: (branch body pattern)
  (-> Code Code [Code Code])
  [pattern body])

(def: #export test
  (<| (_.context (name.module (name-of /._)))
      (do {@ r.monad}
        [module-name (r.unicode 5)
         variant-name (r.unicode 5)
         record-name (|> (r.unicode 5) (r.filter (|>> (text@= variant-name) not)))
         size (|> r.nat (:: @ map (|>> (n.% 10) (n.max 2))))
         variant-tags (|> (r.set text.hash size (r.unicode 5)) (:: @ map set.to-list))
         record-tags (|> (r.set text.hash size (r.unicode 5)) (:: @ map set.to-list))
         primitivesTC (r.list size _primitive.primitive)
         #let [primitivesT (list@map product.left primitivesTC)
               primitivesC (list@map product.right primitivesTC)
               code-tag (|>> [module-name] code.tag)
               variant-tags+ (list@map code-tag variant-tags)
               record-tags+ (list@map code-tag record-tags)
               variantTC (list.zip/2 variant-tags+ primitivesC)]
         inputC (input variant-tags+ record-tags+ primitivesC)
         [outputT outputC] (r.filter (|>> product.left (is? Any) not)
                                     _primitive.primitive)
         #let [analyse-pm (function (_ branches)
                            (|> (/.case _primitive.phase branches archive.empty inputC)
                                (//type.with-type outputT)
                                ////analysis.with-scope
                                (do phase.monad
                                  [_ (//module.declare-tags variant-tags false
                                                            (#.Named [module-name variant-name]
                                                                     (type.variant primitivesT)))
                                   _ (//module.declare-tags record-tags false
                                                            (#.Named [module-name record-name]
                                                                     (type.tuple primitivesT)))])
                                (//module.with-module 0 module-name)))]
         exhaustive-patterns (exhaustive-branches true variantTC inputC)
         #let [exhaustive-branchesC (list@map (branch outputC)
                                              exhaustive-patterns)]]
        ($_ _.and
            (_.test "Will reject empty pattern-matching (no branches)."
                    (|> (analyse-pm (list))
                        _structure.check-fails))
            (_.test "Can analyse exhaustive pattern-matching."
                    (|> (analyse-pm exhaustive-branchesC)
                        _structure.check-succeeds))
            (let [non-exhaustive-branchesC (list.take (dec (list.size exhaustive-branchesC))
                                                      exhaustive-branchesC)]
              (_.test "Will reject non-exhaustive pattern-matching."
                      (|> (analyse-pm non-exhaustive-branchesC)
                          _structure.check-fails)))
            (do @
              [redundant-patterns (exhaustive-branches false variantTC inputC)
               redundancy-idx (|> r.nat (:: @ map (n.% (list.size redundant-patterns))))
               #let [redundant-branchesC (<| (list@map (branch outputC))
                                             list.concat
                                             (list (list.take redundancy-idx redundant-patterns)
                                                   (list (maybe.assume (list.nth redundancy-idx redundant-patterns)))
                                                   (list.drop redundancy-idx redundant-patterns)))]]
              (_.test "Will reject redundant pattern-matching."
                      (|> (analyse-pm redundant-branchesC)
                          _structure.check-fails)))
            (do @
              [[heterogeneousT heterogeneousC] (r.filter (|>> product.left (check.checks? outputT) not)
                                                         _primitive.primitive)
               heterogeneous-idx (|> r.nat (:: @ map (n.% (list.size exhaustive-patterns))))
               #let [heterogeneous-branchesC (list.concat (list (list.take heterogeneous-idx exhaustive-branchesC)
                                                                (list (let [[_pattern _body] (maybe.assume (list.nth heterogeneous-idx exhaustive-branchesC))]
                                                                        [_pattern heterogeneousC]))
                                                                (list.drop (inc heterogeneous-idx) exhaustive-branchesC)))]]
              (_.test "Will reject pattern-matching if the bodies of the branches do not all have the same type."
                      (|> (analyse-pm heterogeneous-branchesC)
                          _structure.check-fails)))
            ))))
