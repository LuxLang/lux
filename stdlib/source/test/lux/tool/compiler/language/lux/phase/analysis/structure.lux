(.module:
  [lux #*
   [abstract ["." monad (#+ do)]]
   [data
    ["%" text/format (#+ format)]
    ["." name]]
   ["r" math/random (#+ Random) ("#@." monad)]
   ["_" test (#+ Test)]
   [control
    pipe
    ["." try]]
   [data
    ["." bit ("#@." equivalence)]
    ["." product]
    ["." maybe]
    ["." text]
    [number
     ["n" nat]]
    [collection
     ["." list ("#@." functor)]
     ["." set]]]
   ["." type
    ["." check]]
   [macro
    ["." code]]]
  [//
   ["_." primitive]]
  {1
   ["." /
    ["/#" //
     ["#." module]
     ["#." type]
     ["/#" // #_
      ["/#" //
       ["#." analysis (#+ Analysis Variant Tag Operation)]
       [///
        ["." phase]
        [meta
         ["." archive]]]]]]]})

(template [<name> <on-success> <on-error>]
  [(def: #export <name>
     (All [a] (-> (Operation a) Bit))
     (|>> (phase.run _primitive.state)
          (case> (#try.Success _)
                 <on-success>

                 _
                 <on-error>)))]

  [check-succeeds true  false]
  [check-fails    false true]
  )

(def: (check-sum' tag size variant)
  (-> Tag Nat (Variant Analysis) Bit)
  (let [expected//right? (n.= (dec size) tag)
        expected//lefts (if expected//right?
                          (dec tag)
                          tag)
        actual//right? (get@ #////analysis.right? variant)
        actual//lefts (get@ #////analysis.lefts variant)]
    (and (n.= expected//lefts
              actual//lefts)
         (bit@= expected//right?
                actual//right?))))

(def: (check-sum type tag size analysis)
  (-> Type Tag Nat (Operation Analysis) Bit)
  (|> analysis
      (//type.with-type type)
      (phase.run _primitive.state)
      (case> (^ (#try.Success (////analysis.variant variant)))
             (check-sum' tag size variant)

             _
             false)))

(def: (with-tags module tags type)
  (All [a] (-> Text (List //module.Tag) Type (Operation a) (Operation [Module a])))
  (|>> (do phase.monad
         [_ (//module.declare-tags tags false type)])
       (//module.with-module 0 module)))

(def: (check-variant module tags expectedT variantT tag analysis)
  (-> Text (List //module.Tag) Type Type Tag (Operation Analysis) Bit)
  (|> analysis
      (with-tags module tags variantT)
      (//type.with-type expectedT)
      (phase.run _primitive.state)
      (case> (^ (#try.Success [_ (////analysis.variant variant)]))
             (check-sum' tag (list.size tags) variant)

             _
             false)))

(def: (correct-size? size)
  (-> Nat (-> Analysis Bit))
  (|>> (case> (^ (////analysis.tuple elems))
              (|> elems
                  list.size
                  (n.= size))
              
              _
              false)))

(def: (check-record module tags expectedT recordT size analysis)
  (-> Text (List //module.Tag) Type Type Nat (Operation Analysis) Bit)
  (|> analysis
      (with-tags module tags recordT)
      (//type.with-type expectedT)
      (phase.run _primitive.state)
      (case> (#try.Success [_ productA])
             (correct-size? size productA)

             _
             false)))

(def: sum
  (do {@ r.monad}
    [size (|> r.nat (:: @ map (|>> (n.% 10) (n.max 2))))
     choice (|> r.nat (:: @ map (n.% size)))
     primitives (r.list size _primitive.primitive)
     +choice (|> r.nat (:: @ map (n.% (inc size))))
     [_ +valueC] _primitive.primitive
     #let [variantT (type.variant (list@map product.left primitives))
           [valueT valueC] (maybe.assume (list.nth choice primitives))
           +size (inc size)
           +primitives (list.concat (list (list.take choice primitives)
                                          (list [(#.Parameter 1) +valueC])
                                          (list.drop choice primitives)))
           [+valueT +valueC] (maybe.assume (list.nth +choice +primitives))
           +variantT (type.variant (list@map product.left +primitives))]]
    (<| (_.context (%.name (name-of /.sum)))
        ($_ _.and
            (_.test "Can analyse."
                    (check-sum variantT choice size
                               (/.sum _primitive.phase choice archive.empty valueC)))
            (_.test "Can analyse through bound type-vars."
                    (|> (do phase.monad
                          [[_ varT] (//type.with-env check.var)
                           _ (//type.with-env
                               (check.check varT variantT))]
                          (//type.with-type varT
                            (/.sum _primitive.phase choice archive.empty valueC)))
                        (phase.run _primitive.state)
                        (case> (^ (#try.Success (////analysis.variant variant)))
                               (check-sum' choice size variant)

                               _
                               false)))
            (_.test "Cannot analyse through unbound type-vars."
                    (|> (do phase.monad
                          [[_ varT] (//type.with-env check.var)]
                          (//type.with-type varT
                            (/.sum _primitive.phase choice archive.empty valueC)))
                        check-fails))
            (_.test "Can analyse through existential quantification."
                    (|> (//type.with-type (type.ex-q 1 +variantT)
                          (/.sum _primitive.phase +choice archive.empty +valueC))
                        check-succeeds))
            (_.test "Can analyse through universal quantification."
                    (let [check-outcome (if (not (n.= choice +choice))
                                          check-succeeds
                                          check-fails)]
                      (|> (//type.with-type (type.univ-q 1 +variantT)
                            (/.sum _primitive.phase +choice archive.empty +valueC))
                          check-outcome)))
            ))))

(def: product
  (do {@ r.monad}
    [size (|> r.nat (:: @ map (|>> (n.% 10) (n.max 2))))
     primitives (r.list size _primitive.primitive)
     choice (|> r.nat (:: @ map (n.% size)))
     [_ +valueC] _primitive.primitive
     #let [tupleT (type.tuple (list@map product.left primitives))
           [singletonT singletonC] (|> primitives (list.nth choice) maybe.assume)
           +primitives (list.concat (list (list.take choice primitives)
                                          (list [(#.Parameter 1) +valueC])
                                          (list.drop choice primitives)))
           +tupleT (type.tuple (list@map product.left +primitives))]]
    (<| (_.context (%.name (name-of /.product)))
        ($_ _.and
            (_.test "Can analyse."
                    (|> (//type.with-type tupleT
                          (/.product archive.empty _primitive.phase (list@map product.right primitives)))
                        (phase.run _primitive.state)
                        (case> (#try.Success tupleA)
                               (correct-size? size tupleA)

                               _
                               false)))
            (_.test "Can infer."
                    (|> (//type.with-inference
                          (/.product archive.empty _primitive.phase (list@map product.right primitives)))
                        (phase.run _primitive.state)
                        (case> (#try.Success [_type tupleA])
                               (and (check.checks? tupleT _type)
                                    (correct-size? size tupleA))

                               _
                               false)))
            (_.test "Can analyse singleton."
                    (|> (//type.with-type singletonT
                          (_primitive.phase archive.empty (` [(~ singletonC)])))
                        check-succeeds))
            (_.test "Can analyse through bound type-vars."
                    (|> (do phase.monad
                          [[_ varT] (//type.with-env check.var)
                           _ (//type.with-env
                               (check.check varT (type.tuple (list@map product.left primitives))))]
                          (//type.with-type varT
                            (/.product archive.empty _primitive.phase (list@map product.right primitives))))
                        (phase.run _primitive.state)
                        (case> (#try.Success tupleA)
                               (correct-size? size tupleA)

                               _
                               false)))
            (_.test "Can analyse through existential quantification."
                    (|> (//type.with-type (type.ex-q 1 +tupleT)
                          (/.product archive.empty _primitive.phase (list@map product.right +primitives)))
                        check-succeeds))
            (_.test "Cannot analyse through universal quantification."
                    (|> (//type.with-type (type.univ-q 1 +tupleT)
                          (/.product archive.empty _primitive.phase (list@map product.right +primitives)))
                        check-fails))
            ))))

(def: variant
  (do {@ r.monad}
    [size (|> r.nat (:: @ map (|>> (n.% 10) (n.max 2))))
     tags (|> (r.set text.hash size (r.unicode 5)) (:: @ map set.to-list))
     choice (|> r.nat (:: @ map (n.% size)))
     other-choice (|> r.nat (:: @ map (n.% size)) (r.filter (|>> (n.= choice) not)))
     primitives (r.list size _primitive.primitive)
     module-name (r.unicode 5)
     type-name (r.unicode 5)
     #let [with-name (|>> (#.Named [module-name type-name]))
           varT (#.Parameter 1)
           primitivesT (list@map product.left primitives)
           [choiceT choiceC] (maybe.assume (list.nth choice primitives))
           [other-choiceT other-choiceC] (maybe.assume (list.nth other-choice primitives))
           monoT (type.variant primitivesT)
           polyT (|> (type.variant (list.concat (list (list.take choice primitivesT)
                                                      (list varT)
                                                      (list.drop (inc choice) primitivesT))))
                     (type.univ-q 1))
           choice-tag (maybe.assume (list.nth choice tags))
           other-choice-tag (maybe.assume (list.nth other-choice tags))]]
    (<| (_.context (%.name (name-of /.tagged-sum)))
        ($_ _.and
            (_.test "Can infer."
                    (|> (/.tagged-sum _primitive.phase [module-name choice-tag] archive.empty choiceC)
                        (check-variant module-name tags
                                       monoT (with-name monoT)
                                       choice)))
            (_.test "Inference retains universal quantification when type-vars are not bound."
                    (|> (/.tagged-sum _primitive.phase [module-name other-choice-tag] archive.empty other-choiceC)
                        (check-variant module-name tags
                                       polyT (with-name polyT)
                                       other-choice)))
            (_.test "Can specialize."
                    (|> (//type.with-type monoT
                          (/.tagged-sum _primitive.phase [module-name other-choice-tag] archive.empty other-choiceC))
                        (check-variant module-name tags
                                       monoT (with-name polyT)
                                       other-choice)))
            (_.test "Specialization when type-vars get bound."
                    (|> (/.tagged-sum _primitive.phase [module-name choice-tag] archive.empty choiceC)
                        (check-variant module-name tags
                                       monoT (with-name polyT)
                                       choice)))
            ))))

(def: record
  (do {@ r.monad}
    [size (|> r.nat (:: @ map (|>> (n.% 10) (n.max 2))))
     tags (|> (r.set text.hash size (r.unicode 5)) (:: @ map set.to-list))
     primitives (r.list size _primitive.primitive)
     module-name (r.unicode 5)
     type-name (r.unicode 5)
     choice (|> r.nat (:: @ map (n.% size)))
     #let [varT (#.Parameter 1)
           tagsC (list@map (|>> [module-name] code.tag) tags)
           primitivesT (list@map product.left primitives)
           primitivesC (list@map product.right primitives)
           monoT (#.Named [module-name type-name] (type.tuple primitivesT))
           recordC (list.zip2 tagsC primitivesC)
           polyT (|> (type.tuple (list.concat (list (list.take choice primitivesT)
                                                    (list varT)
                                                    (list.drop (inc choice) primitivesT))))
                     (type.univ-q 1)
                     (#.Named [module-name type-name]))]]
    (<| (_.context (%.name (name-of /.record)))
        (_.test "Can infer."
                (|> (/.record archive.empty _primitive.phase recordC)
                    (check-record module-name tags monoT monoT size))))))

(def: #export test
  Test
  (<| (_.context (name.module (name-of /._)))
      ($_ _.and
          ..sum
          ..product
          ..variant
          ..record
          )))
