(.require
 [library
  [lux (.except)
   ["_" test (.only Test)]
   ["[0]" static]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["<>" parser]
    ["[0]" pipe]
    ["[0]" try]
    ["[0]" exception (.only exception)]
    ["[0]" function]
    ["[0]" maybe]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" nat]
     ["i" int]
     ["f" frac]
     ["r" rev]]]
   [meta
    ["[0]" symbol (.use "[1]#[0]" equivalence)]
    [macro
     ["[0]" template]]
    ["[0]" configuration
     ["$[1]" \\test]]]
   [tool
    [compiler
     [reference (.only Constant)
      [variable (.only)]]]]]]
 ["[0]" \\parser]
 [\\library
  ["[0]" / (.only)
   [//
    [phase
     ["[0]" extension]]
    [///
     ["[0]" phase]
     ["[0]" version]]]]]
 ["[0]" /
  ["[1][0]" complex]
  ["[1][0]" inference]
  ["[1][0]" macro]
  ["[1][0]" module]
  ["[1][0]" pattern]
  ["[1][0]" scope]
  ["[1][0]" simple]
  ["[1][0]" type]
  ["[1][0]" coverage]
  [////
   ["[1][0]" reference (.only)
    ["[2][0]" variable]]
   [///
    [meta
     ["[1][0]" symbol]
     ["[0]" location
      ["[2][1]" /]
      ["[1]" \\library (.use "[1]#[0]" equivalence)]]]]]])

(def !expect
  (template (_ <expectation> <computation>)
    [(case <computation>
       <expectation>
       true

       _
       false)]))

(def constant
  (Random Constant)
  (random.and (random.unicode 10)
              (random.unicode 10)))

(def \\parser
  Test
  (<| (_.covering \\parser._)
      (_.for [\\parser.Parser])
      (do [! random.monad]
        []
        (`` (all _.and
                 (do [! random.monad]
                   [expected (at ! each (|>> /.bit) random.bit)]
                   (_.coverage [\\parser.result \\parser.any]
                     (|> (list expected)
                         (\\parser.result \\parser.any)
                         (pipe.case
                           {try.#Success actual}
                           (at /.equivalence = expected actual)

                           {try.#Failure _}
                           false))))
                 (,, (with_template [<query> <check> <random> <analysis> <=>]
                       [(do [! random.monad]
                          [expected <random>]
                          (_.coverage [<query>]
                            (|> (list (<analysis> expected))
                                (\\parser.result <query>)
                                (pipe.case
                                  {try.#Success actual}
                                  (<=> expected actual)

                                  {try.#Failure _}
                                  false))))
                        (do [! random.monad]
                          [expected <random>]
                          (_.coverage [<check>]
                            (|> (list (<analysis> expected))
                                (\\parser.result (<check> expected))
                                (!expect {try.#Success _}))))]
                       
                       [\\parser.bit \\parser.this_bit random.bit /.bit bit#=]
                       [\\parser.nat \\parser.this_nat random.nat /.nat n.=]
                       [\\parser.int \\parser.this_int random.int /.int i.=]
                       [\\parser.frac \\parser.this_frac random.safe_frac /.frac f.=]
                       [\\parser.rev \\parser.this_rev random.rev /.rev r.=]
                       [\\parser.text \\parser.this_text (random.unicode 10) /.text text#=]
                       [\\parser.local \\parser.this_local random.nat /.local n.=]
                       [\\parser.foreign \\parser.this_foreign random.nat /.foreign n.=]
                       [\\parser.constant \\parser.this_constant ..constant /.constant symbol#=]
                       ))
                 (do [! random.monad]
                   [expected random.bit]
                   (_.coverage [\\parser.tuple]
                     (|> (list (/.tuple (list (/.bit expected))))
                         (\\parser.result (\\parser.tuple \\parser.bit))
                         (pipe.case
                           {try.#Success actual}
                           (bit#= expected actual)

                           {try.#Failure _}
                           false))))
                 (do [! random.monad]
                   [dummy random.bit]
                   (_.coverage [\\parser.end?]
                     (and (|> (\\parser.result \\parser.end? (list))
                              (!expect {try.#Success #1}))
                          (|> (\\parser.result (do <>.monad
                                                 [verdict \\parser.end?
                                                  _ \\parser.bit]
                                                 (in verdict))
                                               (list (/.bit dummy)))
                              (!expect {try.#Success #0})))))
                 (do [! random.monad]
                   [dummy random.bit]
                   (_.coverage [\\parser.end]
                     (and (|> (\\parser.result \\parser.end (list))
                              (!expect {try.#Success _}))
                          (|> (\\parser.result \\parser.end (list (/.bit dummy)))
                              (!expect {try.#Failure _})))))
                 (do [! random.monad]
                   [expected random.bit]
                   (_.coverage [\\parser.cannot_parse]
                     (and (|> (list (/.bit expected))
                              (\\parser.result \\parser.nat)
                              (pipe.case
                                {try.#Success _}
                                false

                                {try.#Failure error}
                                (exception.match? \\parser.cannot_parse error)))
                          (|> (list)
                              (\\parser.result \\parser.bit)
                              (pipe.case
                                {try.#Success _}
                                false

                                {try.#Failure error}
                                (exception.match? \\parser.cannot_parse error))))))
                 (do [! random.monad]
                   [expected random.bit]
                   (_.coverage [\\parser.unconsumed_input]
                     (|> (list (/.bit expected) (/.bit expected))
                         (\\parser.result \\parser.bit)
                         (pipe.case
                           {try.#Success _}
                           false

                           {try.#Failure error}
                           (exception.match? \\parser.unconsumed_input error)))))
                 )))))

(def (random_branch random)
  (All (_ a) (-> (Random a) (Random (/.Branch' a))))
  (all random.and
       /pattern.random
       random
       ))

(def (random_match multiplicity random)
  (All (_ a) (-> Nat (Random a) (Random (/.Match' a))))
  (all random.and
       (..random_branch random)
       (random.list multiplicity (..random_branch random))
       ))

(def .public (random multiplicity)
  (-> Nat (Random /.Analysis))
  (<| random.rec
      (function (_ random))
      (let [random|case (all random.and
                             random
                             (..random_match multiplicity random)
                             )
            random|function (all random.and
                                 (random.list multiplicity random)
                                 random
                                 )
            random|apply (all random.and
                              random
                              random
                              )
            random|extension (all random.and
                                  (random.lower_case 1)
                                  (random.list multiplicity random)
                                  )])
      (all random.or
           /simple.random
           (/complex.random multiplicity random)
           /reference.random
           random|case
           random|function
           random|apply
           random|extension
           )))

(def test|simple
  Test
  (do random.monad
    [bit random.bit
     nat random.nat
     int random.int
     rev random.rev
     frac random.frac
     text (random.lower_case 1)]
    (`` (all _.and
             (_.coverage [/.unit]
               (case (/.unit)
                 (pattern (/.unit))
                 true
                 
                 _
                 false))
             (,, (with_template [<tag> <expected>]
                   [(_.coverage [<tag>]
                      (case (<tag> <expected>)
                        (pattern (<tag> actual))
                        (same? <expected> actual)
                        
                        _
                        false))]

                   [/.bit bit]
                   [/.nat nat]
                   [/.int int]
                   [/.rev rev]
                   [/.frac frac]
                   [/.text text]))
             ))))

(def test|complex
  Test
  (do random.monad
    [expected_left (..random 2)
     expected_right (..random 2)
     expected_lefts random.nat
     expected_right? random.bit]
    (all _.and
         (_.coverage [/.variant]
           (let [expected (if expected_right?
                            expected_right
                            expected_left)]
             (case (/.variant [expected_lefts expected_right? expected])
               (pattern (/.variant [actual_lefts actual_right? actual]))
               (and (same? expected_lefts actual_lefts)
                    (same? expected_right? actual_right?)
                    (same? expected actual))

               _
               false)))
         (_.coverage [/.tuple]
           (case (/.tuple (list expected_left expected_right))
             (pattern (/.tuple (list actual_left actual_right)))
             (and (same? expected_left actual_left)
                  (same? expected_right actual_right))

             _
             false))
         )))

(def test|reference
  Test
  (do random.monad
    [expected_register random.nat
     expected_constant (/symbol.random 1 1)
     expected_variable /variable.random]
    (`` (all _.and
             (,, (with_template [<tag> <expected>]
                   [(_.coverage [<tag>]
                      (case (<tag> <expected>)
                        (pattern (<tag> actual))
                        (same? <expected> actual)

                        _
                        false))]

                   [/.local expected_register]
                   [/.foreign expected_register]
                   [/.constant expected_constant]
                   [/.variable expected_variable]
                   ))
             ))))

(def tagged?
  (template (_ <tag> <it>)
    [(case <it>
       {<tag> _}
       true

       _
       false)]))

(def test|reification
  Test
  (do random.monad
    [expected_abstraction (random.only (|>> (..tagged? /.#Apply) not)
                                       (..random 2))
     expected_parameter/0 (..random 2)
     expected_parameter/1 (..random 2)]
    (all _.and
         (_.coverage [/.reified /.reification]
           (case (|> [expected_abstraction (list expected_parameter/0 expected_parameter/1)]
                     /.reified
                     /.reification)
             (pattern [actual_abstraction (list actual_parameter/0 actual_parameter/1)])
             (and (same? expected_abstraction actual_abstraction)
                  (same? expected_parameter/0 actual_parameter/0)
                  (same? expected_parameter/1 actual_parameter/1))

             _
             false))
         (_.coverage [/.no_op]
           (case (/.no_op expected_parameter/0)
             (pattern (/.no_op actual))
             (same? expected_parameter/0 actual)

             _
             false))
         )))

(def test|case
  Test
  (do random.monad
    [expected_input (..random 2)
     expected_match (random_match 2 (..random 2))]
    (all _.and
         (_.coverage [/.case]
           (case (/.case [expected_input expected_match])
             (pattern (/.case [actual_input actual_match]))
             (and (same? expected_input actual_input)
                  (same? expected_match actual_match))

             _
             false))
         )))

(with_expansions [<id> (static.random_nat)
                  <exception> (template.symbol ["exception_" <id>])]
  (exception <exception>)

  (def test|phase
    Test
    (do random.monad
      [version/0 random.nat
       host/0 (random.lower_case 5)
       version/1 random.nat
       host/1 (random.lower_case 5)
       expected_error (random.lower_case 10)
       location/0 /location.random
       location/1 /location.random
       configuration ($configuration.random 5)
       .let [state/0 (has .#location location/0
                          (/.state (/.info version/0 host/0 configuration)))
             state/1 (has .#location location/1
                          (/.state (/.info version/1 host/1 configuration)))]]
      (all _.and
           (_.coverage [/.set_state]
             (|> (do phase.monad
                   [pre (extension.read function.identity)
                    _ (/.set_state state/1)
                    post (extension.read function.identity)]
                   (in (and (same? state/0 pre)
                            (same? state/1 post))))
                 (phase.result [extension.#bundle extension.empty
                                extension.#state state/0])
                 (try.else false)))
           (_.coverage [/.failure]
             (|> (/.failure expected_error)
                 (phase.result [extension.#bundle extension.empty
                                extension.#state state/0])
                 (pipe.case
                   {try.#Failure actual_error}
                   (and (text.contains? expected_error actual_error)
                        (text.contains? (location.format location/0) actual_error))

                   _
                   false)))
           (_.coverage [/.except]
             (|> (/.except <exception> [])
                 (phase.result [extension.#bundle extension.empty
                                extension.#state state/0])
                 (pipe.case
                   {try.#Failure actual_error}
                   (and (text.contains? (exception.error <exception> []) actual_error)
                        (text.contains? (location.format location/0) actual_error))

                   _
                   false)))
           (_.coverage [/.with_exception]
             (|> (/.failure expected_error)
                 (/.with_exception <exception> [])
                 (phase.result [extension.#bundle extension.empty
                                extension.#state state/0])
                 (pipe.case
                   {try.#Failure actual_error}
                   (and (text.contains? expected_error actual_error)
                        (text.contains? (exception.error <exception> []) actual_error)
                        (text.contains? (location.format location/0) actual_error))

                   _
                   false)))
           (_.coverage [/.assertion]
             (and (|> (/.assertion <exception> [] false)
                      (phase.result [extension.#bundle extension.empty
                                     extension.#state state/0])
                      (pipe.case
                        {try.#Failure actual_error}
                        (and (text.contains? (exception.error <exception> []) actual_error)
                             (text.contains? (location.format location/0) actual_error))

                        _
                        false))
                  (|> (/.assertion <exception> [] true)
                      (phase.result [extension.#bundle extension.empty
                                     extension.#state state/0])
                      (pipe.case
                        {try.#Success _}
                        true

                        _
                        false))))
           ))))

(def test|state
  Test
  (do random.monad
    [version random.nat
     host (random.lower_case 5)

     expected_module (random.lower_case 10)
     dummy_module (random.lower_case 11)

     location /location.random
     
     expected_file (random.lower_case 12)
     expected_code (random.lower_case 13)

     configuration ($configuration.random 5)
     .let [state (has .#location location
                      (/.state (/.info version host configuration)))]]
    (all _.and
         (_.coverage [/.info]
           (let [it (/.info version host configuration)]
             (and (text#= (version.format version)
                          (the .#version it))
                  (same? host
                         (the .#target it))
                  (..tagged? .#Build (the .#mode it))
                  (same? configuration (the .#configuration it)))))
         (_.coverage [/.state]
           (let [info (/.info version host configuration)
                 it (/.state info)]
             (and (same? info
                         (the .#info it))
                  (same? location.dummy
                         (the .#location it))
                  (..tagged? .#None (the .#current_module it))
                  (..tagged? .#None (the .#expected it))
                  (list.empty? (the .#modules it))
                  (list.empty? (the .#scopes it))
                  (list.empty? (the [.#type_context .#var_bindings] it))
                  (case (the .#source it)
                    [location 0 ""]
                    (same? location.dummy location)

                    _
                    false))))
         (_.coverage [/.set_current_module]
           (|> (do phase.monad
                 [_ (/.set_current_module expected_module)]
                 (extension.read (|>> (the .#current_module) (maybe.else ""))))
               (phase.result [extension.#bundle extension.empty
                              extension.#state state])
               (pipe.case
                 {try.#Success actual}
                 (same? expected_module actual)

                 _
                 false)))
         (_.coverage [/.with_current_module]
           (let [current_module (extension.read (|>> (the .#current_module) (maybe.else "")))]
             (|> (do phase.monad
                   [_ (/.set_current_module expected_module)
                    pre current_module
                    mid (/.with_current_module dummy_module
                          current_module)
                    post current_module]
                   (in (and (same? expected_module pre)
                            (same? dummy_module mid)
                            (same? expected_module post))))
                 (phase.result [extension.#bundle extension.empty
                                extension.#state state])
                 (try.else false))))
         (_.coverage [/.location /.set_location]
           (let [expected (/.location expected_file)]
             (|> (do phase.monad
                   [_ (/.set_location expected)]
                   (extension.read (the .#location)))
                 (phase.result [extension.#bundle extension.empty
                                extension.#state state])
                 (pipe.case
                   {try.#Success actual}
                   (same? expected actual)

                   _
                   false))))
         (_.coverage [/.with_location]
           (let [expected (/.location expected_file)
                 dummy (/.location expected_code)
                 location (extension.read (the .#location))]
             (|> (do phase.monad
                   [_ (/.set_location expected)
                    pre location
                    mid (/.with_location dummy
                          location)
                    post location]
                   (in (and (same? expected pre)
                            (same? dummy mid)
                            (same? expected post))))
                 (phase.result [extension.#bundle extension.empty
                                extension.#state state])
                 (try.else false))))
         (_.coverage [/.source /.set_source_code]
           (let [expected (/.source expected_file expected_code)]
             (|> (do phase.monad
                   [_ (/.set_source_code expected)]
                   (extension.read (the .#source)))
                 (phase.result [extension.#bundle extension.empty
                                extension.#state state])
                 (pipe.case
                   {try.#Success actual}
                   (same? expected actual)

                   _
                   false))))
         (_.coverage [/.with_source_code]
           (let [expected (/.source expected_file expected_code)
                 dummy (/.source expected_code expected_file)
                 source (extension.read (the .#source))]
             (|> (do phase.monad
                   [_ (/.set_source_code expected)
                    pre source
                    mid (/.with_source_code dummy
                          source)
                    post source]
                   (in (and (same? expected pre)
                            (same? dummy mid)
                            (same? expected post))))
                 (phase.result [extension.#bundle extension.empty
                                extension.#state state])
                 (try.else false))))
         )))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Analysis])
      (do random.monad
        [left (..random 2)
         right (..random 2)]
        (all _.and
             (_.for [/.equivalence]
                    ($equivalence.spec /.equivalence (..random 2)))
             
             ..test|simple
             ..test|complex
             ..test|reference
             (_.for [/.Reification]
                    ..test|reification)
             (_.for [/.Branch /.Branch' /.Match /.Match']
                    ..test|case)
             (_.for [/.Operation /.Phase /.Handler /.Bundle]
                    ..test|phase)
             (_.for [/.State+]
                    ..test|state)
             (_.coverage [/.format]
               (bit#= (at /.equivalence = left right)
                      (text#= (/.format left) (/.format right))))

             /complex.test
             /inference.test
             /macro.test
             /module.test
             /pattern.test
             /scope.test
             /simple.test
             /type.test
             /coverage.test

             ..\\parser
             ))))
