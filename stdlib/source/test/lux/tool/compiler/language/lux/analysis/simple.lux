(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [data
    ["[0]" bit (.open: "[1]#[0]" equivalence)]
    ["[0]" text (.open: "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random) (.open: "[1]#[0]" monad)]
    [number
     ["f" frac]]]]]
 [\\library
  ["[0]" /]])

(def: .public random
  (Random /.Simple)
  (all random.or
       (random#in [])
       random.bit
       random.nat
       random.int
       random.rev
       (random.only (|>> f.not_a_number? not) random.frac)
       (random.lower_case 5)
       ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Simple])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))
           
           (do random.monad
             [left ..random
              right ..random]
             (_.coverage [/.format]
               (bit#= (at /.equivalence = left right)
                      (text#= (/.format left) (/.format right)))))
           )))
