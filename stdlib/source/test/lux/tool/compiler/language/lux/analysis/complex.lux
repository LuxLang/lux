(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" hash]]]
   [data
    ["[0]" bit ("[1]#[0]" equivalence)]
    ["[0]" text ("[1]#[0]" equivalence)
     ["%" format {"+" format}]]]
   [math
    ["[0]" random {"+" Random} ("[1]#[0]" monad)]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" /]])

(def: test|tag
  Test
  (do [! random.monad]
    [multiplicity (# ! each (n.max 2) random.nat)
     tag (# ! each (n.% multiplicity) random.nat)
     lefts random.nat
     right? random.bit]
    ($_ _.and
        (_.cover [/.tag /.lefts]
                 (and (|> lefts
                          (/.tag right?)
                          (/.lefts right?)
                          (n.= lefts))
                      (|> tag
                          (/.lefts right?)
                          (/.tag right?)
                          (n.= tag))))
        (_.cover [/.choice]
                 (let [[lefts right?] (/.choice multiplicity tag)]
                   (if right?
                     (n.= (-- tag) lefts)
                     (n.= tag lefts))))
        )))

(def: .public (random multiplicity it)
  (All (_ a)
    (-> Nat (Random a) (Random (/.Complex a))))
  ($_ random.or
      ($_ random.and
          (random#each (n.% (-- multiplicity)) random.nat)
          random.bit
          it)
      (random.list multiplicity it)
      ))

(def: .public test
  Test
  (let [random (..random 3 random.nat)]
    (<| (_.covering /._)
        (_.for [/.Complex /.Variant /.Tuple])
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec (/.equivalence n.equivalence) random))
            (_.for [/.hash]
                   ($hash.spec (/.hash n.hash) random))

            (_.for [/.Tag]
                   ..test|tag)
            
            (do random.monad
              [left random
               right random]
              (_.cover [/.format]
                       (bit#= (# (/.equivalence n.equivalence) = left right)
                              (text#= (/.format %.nat left) (/.format %.nat right)))))
            ))))
