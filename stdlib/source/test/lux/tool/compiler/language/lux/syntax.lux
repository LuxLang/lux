(.using
  [lux "*"
   [abstract/monad {"+" do}]
   [data
    ["%" text/format {"+" format}]
    [number
     ["n" nat]]]
   ["r" math/random {"+" Random} ("[1]#[0]" monad)]
   ["_" test {"+" Test}]
   [control
    ["[0]" try]
    [parser
     ["l" text]]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list]
     ["[0]" dictionary {"+" Dictionary}]]]
   [macro
    ["[0]" code]]
   [meta
    ["[0]" location]
    ["[0]" symbol]]]
  [\\
   ["[0]" /]])

(def: symbol_part^
  (Random Text)
  (do [! r.monad]
    [size (|> r.nat (# ! each (|>> (n.% 20) (n.max 1))))]
    (r.ascii/lower_alpha size)))

(def: symbol^
  (Random Symbol)
  (r.and symbol_part^ symbol_part^))

(def: code^
  (Random Code)
  (let [numeric^ (: (Random Code)
                    ($_ r.either
                        (|> r.bit (r#each code.bit))
                        (|> r.nat (r#each code.nat))
                        (|> r.int (r#each code.int))
                        (|> r.rev (r#each code.rev))
                        (|> r.safe_frac (r#each code.frac))))
        textual^ (: (Random Code)
                    ($_ r.either
                        (do r.monad
                          [size (|> r.nat (r#each (n.% 20)))]
                          (|> (r.ascii/upper_alpha size) (r#each code.text)))
                        (|> symbol^ (r#each code.symbol))
                        (|> symbol^ (r#each code.tag))))
        simple^ (: (Random Code)
                   ($_ r.either
                       numeric^
                       textual^))]
    (r.rec
     (function (_ code^)
       (let [multi^ (do r.monad
                      [size (|> r.nat (r#each (n.% 3)))]
                      (r.list size code^))
             composite^ (: (Random Code)
                           ($_ r.either
                               (|> multi^ (r#each code.form))
                               (|> multi^ (r#each code.tuple))
                               (do r.monad
                                 [size (|> r.nat (r#each (n.% 3)))]
                                 (|> (r.list size (r.and code^ code^))
                                     (r#each code.record)))))]
         ($_ r.either
             simple^
             composite^))))))

(def: code
  Test
  (do [! r.monad]
    [sample code^]
    ($_ _.and
        (_.test "Can parse Lux code."
                (case (let [source_code (%.code sample)]
                        (/.parse "" (dictionary.empty text.hash) (text.size source_code)
                                 [location.dummy 0 source_code]))
                  {.#Left error}
                  false

                  {.#Right [_ parsed]}
                  (# code.equivalence = parsed sample)))
        (do !
          [other code^]
          (_.test "Can parse multiple Lux code nodes."
                  (let [source_code (format (%.code sample) " " (%.code other))
                        source_code//size (text.size source_code)]
                    (case (/.parse "" (dictionary.empty text.hash) source_code//size
                                   [location.dummy 0 source_code])
                      {.#Left error}
                      false

                      {.#Right [remaining =sample]}
                      (case (/.parse "" (dictionary.empty text.hash) source_code//size
                                     remaining)
                        {.#Left error}
                        false

                        {.#Right [_ =other]}
                        (and (# code.equivalence = sample =sample)
                             (# code.equivalence = other =other)))))))
        )))

(def: comment_text^
  (Random Text)
  (let [char_gen (|> r.nat (r.only (|>> (n.= (`` (char (~~ (static text.new_line))))) not)))]
    (do r.monad
      [size (|> r.nat (r#each (n.% 20)))]
      (r.text char_gen size))))

(def: comment^
  (Random Text)
  (do r.monad
    [comment comment_text^]
    (in (format "... " comment text.new_line))))

(def: comments
  Test
  (do r.monad
    [sample code^
     comment comment^]
    ($_ _.and
        (_.test "Can handle comments."
                (case (let [source_code (format comment (%.code sample))
                            source_code//size (text.size source_code)]
                        (/.parse "" (dictionary.empty text.hash) source_code//size
                                 [location.dummy 0 source_code]))
                  {.#Left error}
                  false

                  {.#Right [_ parsed]}
                  (# code.equivalence = parsed sample)))
        )))

(def: .public test
  Test
  (<| (_.context (symbol.module (symbol /._)))
      ($_ _.and
          ..code
          ..comments
          )))
