(.module:
  [lux #*
   [abstract/monad (#+ do)]
   [data
    ["%" text/format (#+ format)]
    ["." name]
    [number
     ["n" nat]]]
   ["r" math/random (#+ Random) ("#\." monad)]
   ["_" test (#+ Test)]
   [control
    ["." try]
    [parser
     ["l" text]]]
   [data
    ["." text]
    [collection
     ["." list]
     ["." dictionary (#+ Dictionary)]]]
   [macro
    ["." code]]
   [meta
    ["." location]]]
  [\\
   ["." /]])

(def: name_part^
  (Random Text)
  (do {! r.monad}
    [size (|> r.nat (\ ! map (|>> (n.% 20) (n.max 1))))]
    (r.ascii/lower_alpha size)))

(def: name^
  (Random Name)
  (r.and name_part^ name_part^))

(def: code^
  (Random Code)
  (let [numeric^ (: (Random Code)
                    ($_ r.either
                        (|> r.bit (r\map code.bit))
                        (|> r.nat (r\map code.nat))
                        (|> r.int (r\map code.int))
                        (|> r.rev (r\map code.rev))
                        (|> r.safe_frac (r\map code.frac))))
        textual^ (: (Random Code)
                    ($_ r.either
                        (do r.monad
                          [size (|> r.nat (r\map (n.% 20)))]
                          (|> (r.ascii/upper_alpha size) (r\map code.text)))
                        (|> name^ (r\map code.identifier))
                        (|> name^ (r\map code.tag))))
        simple^ (: (Random Code)
                   ($_ r.either
                       numeric^
                       textual^))]
    (r.rec
     (function (_ code^)
       (let [multi^ (do r.monad
                      [size (|> r.nat (r\map (n.% 3)))]
                      (r.list size code^))
             composite^ (: (Random Code)
                           ($_ r.either
                               (|> multi^ (r\map code.form))
                               (|> multi^ (r\map code.tuple))
                               (do r.monad
                                 [size (|> r.nat (r\map (n.% 3)))]
                                 (|> (r.list size (r.and code^ code^))
                                     (r\map code.record)))))]
         ($_ r.either
             simple^
             composite^))))))

(def: code
  Test
  (do {! r.monad}
    [sample code^]
    ($_ _.and
        (_.test "Can parse Lux code."
                (case (let [source_code (%.code sample)]
                        (/.parse "" (dictionary.new text.hash) (text.size source_code)
                                 [location.dummy 0 source_code]))
                  (#.Left error)
                  false

                  (#.Right [_ parsed])
                  (\ code.equivalence = parsed sample)))
        (do !
          [other code^]
          (_.test "Can parse multiple Lux code nodes."
                  (let [source_code (format (%.code sample) " " (%.code other))
                        source_code//size (text.size source_code)]
                    (case (/.parse "" (dictionary.new text.hash) source_code//size
                                   [location.dummy 0 source_code])
                      (#.Left error)
                      false

                      (#.Right [remaining =sample])
                      (case (/.parse "" (dictionary.new text.hash) source_code//size
                                     remaining)
                        (#.Left error)
                        false

                        (#.Right [_ =other])
                        (and (\ code.equivalence = sample =sample)
                             (\ code.equivalence = other =other)))))))
        )))

(def: comment_text^
  (Random Text)
  (let [char_gen (|> r.nat (r.only (|>> (n.= (`` (char (~~ (static text.new_line))))) not)))]
    (do r.monad
      [size (|> r.nat (r\map (n.% 20)))]
      (r.text char_gen size))))

(def: comment^
  (Random Text)
  (do r.monad
    [comment comment_text^]
    (in (format "## " comment text.new_line))))

(def: comments
  Test
  (do r.monad
    [sample code^
     comment comment^]
    ($_ _.and
        (_.test "Can handle comments."
                (case (let [source_code (format comment (%.code sample))
                            source_code//size (text.size source_code)]
                        (/.parse "" (dictionary.new text.hash) source_code//size
                                 [location.dummy 0 source_code]))
                  (#.Left error)
                  false

                  (#.Right [_ parsed])
                  (\ code.equivalence = parsed sample)))
        )))

(def: #export test
  Test
  (<| (_.context (name.module (name_of /._)))
      ($_ _.and
          ..code
          ..comments
          )))
