(.module:
  [lux (#- primitive)
   [abstract ["." monad (#+ do)]]
   [control
    [pipe (#+ case>)]
    ["." try]]
   [data
    ["%" text/format (#+ format)]
    ["." name]
    [number
     ["n" nat]]
    [collection
     ["." list]]]
   ["r" math/random (#+ Random) ("#\." monad)]
   ["_" test (#+ Test)]]
  [\\
   ["." / #_
    ["/#" //
     ["/#" // #_
      [extension
       ["#." bundle]]
      ["/#" //
       ["#." analysis (#+ Analysis)]
       ["#." synthesis (#+ Synthesis)]
       [///
        ["." phase]
        [meta
         ["." archive]]]]]]]])

(def: .public primitive
  (Random Analysis)
  (do r.monad
    [primitive (: (Random ////analysis.Primitive)
                  ($_ r.or
                      (in [])
                      r.bit
                      r.nat
                      r.int
                      r.rev
                      r.frac
                      (r.unicode 5)))]
    (in (#////analysis.Primitive primitive))))

(def: .public (corresponds? analysis synthesis)
  (-> Analysis Synthesis Bit)
  (`` (case [analysis synthesis]
        (~~ (template [<analysis> <post_analysis> <synthesis> <post_synthesis>]
              [[(#////analysis.Primitive (<analysis> expected))
                (#////synthesis.Primitive (<synthesis> actual))]
               (same? (|> expected <post_analysis>)
                      (|> actual <post_synthesis>))]

              [#////analysis.Unit (:as Text) #////synthesis.Text (|>)]
              [#////analysis.Bit  (|>) #////synthesis.Bit (|>)]
              [#////analysis.Nat  .i64 #////synthesis.I64 .i64]
              [#////analysis.Int  .i64 #////synthesis.I64 .i64]
              [#////analysis.Rev  .i64 #////synthesis.I64 .i64]
              [#////analysis.Frac (|>) #////synthesis.F64 (|>)]
              [#////analysis.Text (|>) #////synthesis.Text (|>)]
              ))

        (^ [(////analysis.tuple expected)
            (////synthesis.tuple actual)])
        (and (n.= (list.size expected)
                  (list.size actual))
             (list.every? (function (_ [expected actual])
                            (corresponds? expected actual))
                          (list.zipped/2 expected actual)))
        
        _
        false)))

(def: .public test
  Test
  (<| (_.context (%.name (name_of #////synthesis.Primitive)))
      (`` ($_ _.and
              (~~ (template [<analysis> <synthesis> <generator>]
                    [(do r.monad
                       [expected <generator>]
                       (_.test (%.name (name_of <synthesis>))
                               (|> (#////analysis.Primitive (<analysis> expected))
                                   (//.phase archive.empty)
                                   (phase.result [///bundle.empty ////synthesis.init])
                                   (case> (#try.Success (#////synthesis.Primitive (<synthesis> actual)))
                                          (same? expected actual)

                                          _
                                          false))))]

                    [#////analysis.Unit #////synthesis.Text (r\in ////synthesis.unit)]
                    [#////analysis.Bit  #////synthesis.Bit  r.bit]
                    [#////analysis.Nat  #////synthesis.I64  (r\map .i64 r.nat)]
                    [#////analysis.Int  #////synthesis.I64  (r\map .i64 r.int)]
                    [#////analysis.Rev  #////synthesis.I64  (r\map .i64 r.rev)]
                    [#////analysis.Frac #////synthesis.F64  r.frac]
                    [#////analysis.Text #////synthesis.Text (r.unicode 5)]))))))
