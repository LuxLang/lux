(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" hash]]]
   [data
    ["[0]" bit (.open: "[1]#[0]" equivalence)]
    ["[0]" text (.open: "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]]]]
 [\\library
  ["[0]" /]])

(def: .public random
  (Random /.Side)
  (all random.and
       random.nat
       random.bit
       ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Side])
      (do [! random.monad]
        [left ..random
         right  ..random]
        (all _.and
             (_.for [/.equivalence]
                    ($equivalence.spec /.equivalence ..random))
             (_.for [/.hash]
                    ($hash.spec /.hash ..random))
             
             (_.coverage [/.format]
               (bit#= (at /.equivalence = left right)
                      (text#= (/.format left) (/.format right))))
             ))))
