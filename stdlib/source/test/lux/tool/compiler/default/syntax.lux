(.module:
  [lux #*
   data/text/format
   [abstract/monad (#+ do)]
   ["r" math/random (#+ Random) ("#@." monad)]
   ["_" test (#+ Test)]
   [data
    ["." error]
    ["." text
     ["l" lexer]]
    [collection
     ["." list]
     ["." dictionary (#+ Dictionary)]]]
   [macro
    ["." code]]]
  {1
   ["." /]})

(def: default-cursor
  Cursor
  {#.module ""
   #.line   0
   #.column 0})

(def: name-part^
  (Random Text)
  (do r.monad
    [#let [digits "0123456789"
           delimiters (format "()[]{}#." /.text-delimiter)
           space (format " " text.new-line)
           invalid-range (format digits delimiters space)
           char-gen (|> r.nat
                        (:: @ map (|>> (n/% 256) (n/max 1)))
                        (r.filter (function (_ sample)
                                    (not (text.contains? (text.from-code sample)
                                                         invalid-range)))))]
     size (|> r.nat (:: @ map (|>> (n/% 20) (n/max 1))))]
    (r.text char-gen size)))

(def: name^
  (Random Name)
  (r.and name-part^ name-part^))

(def: code^
  (Random Code)
  (let [numeric^ (: (Random Code)
                    ($_ r.either
                        (|> r.bit (r@map code.bit))
                        (|> r.nat (r@map code.nat))
                        (|> r.int (r@map code.int))
                        (|> r.rev (r@map code.rev))
                        (|> r.frac (r@map code.frac))))
        textual^ (: (Random Code)
                    ($_ r.either
                        (do r.monad
                          [size (|> r.nat (r@map (n/% 20)))]
                          (|> (r.unicode size) (r@map code.text)))
                        (|> name^ (r@map code.identifier))
                        (|> name^ (r@map code.tag))))
        simple^ (: (Random Code)
                   ($_ r.either
                       numeric^
                       textual^))]
    (r.rec
     (function (_ code^)
       (let [multi^ (do r.monad
                      [size (|> r.nat (r@map (n/% 3)))]
                      (r.list size code^))
             composite^ (: (Random Code)
                           ($_ r.either
                               (|> multi^ (r@map code.form))
                               (|> multi^ (r@map code.tuple))
                               (do r.monad
                                 [size (|> r.nat (r@map (n/% 3)))]
                                 (|> (r.list size (r.and code^ code^))
                                     (r@map code.record)))))]
         ($_ r.either
             simple^
             composite^))))))

(def: code
  Test
  (do r.monad
    [sample code^]
    ($_ _.and
        (_.test "Can parse Lux code."
                (case (let [source-code (%code sample)]
                        (/.parse "" (dictionary.new text.hash) (text.size source-code)
                                 [default-cursor 0 source-code]))
                  (#error.Failure error)
                  false

                  (#error.Success [_ parsed])
                  (:: code.equivalence = parsed sample)))
        (do @
          [other code^]
          (_.test "Can parse Lux multiple code nodes."
                  (let [source-code (format (%code sample) " " (%code other))
                        source-code//size (text.size source-code)]
                    (case (/.parse "" (dictionary.new text.hash) source-code//size
                                   [default-cursor 0 source-code])
                      (#error.Failure error)
                      false

                      (#error.Success [remaining =sample])
                      (case (/.parse "" (dictionary.new text.hash) source-code//size
                                     remaining)
                        (#error.Failure error)
                        false

                        (#error.Success [_ =other])
                        (and (:: code.equivalence = sample =sample)
                             (:: code.equivalence = other =other)))))))
        )))

(def: comment-text^
  (Random Text)
  (let [char-gen (|> r.nat (r.filter (|>> (n/= (`` (char (~~ (static text.new-line))))) not)))]
    (do r.monad
      [size (|> r.nat (r@map (n/% 20)))]
      (r.text char-gen size))))

(def: comment^
  (Random Text)
  (do r.monad
    [comment comment-text^]
    (wrap (format "## " comment text.new-line))))

(def: comments
  Test
  (do r.monad
    [sample code^
     comment comment^]
    ($_ _.and
        (_.test "Can handle comments."
                (case (let [source-code (format comment (%code sample))
                            source-code//size (text.size source-code)]
                        (/.parse "" (dictionary.new text.hash) source-code//size
                                 [default-cursor 0 source-code]))
                  (#error.Failure error)
                  false

                  (#error.Success [_ parsed])
                  (:: code.equivalence = parsed sample)))
        )))

(def: #export test
  Test
  ($_ _.and
      ..code
      ..comments
      ))
