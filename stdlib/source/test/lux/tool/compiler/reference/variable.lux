(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" hash]]]
   [data
    ["[0]" text ("[1]#[0]" equivalence)]]
   [math
    ["[0]" random {"+" Random}]]]]
 [\\library
  ["[0]" /]])

(def: .public random
  (Random /.Variable)
  ($_ random.or
      random.nat
      random.nat
      ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Variable])
      (do [! random.monad]
        [register random.nat]
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec /.equivalence ..random))
            (_.for [/.hash]
                   ($hash.spec /.hash ..random))
            (_.cover [/.self]
                     (case (/.self)
                       (^ (/.self)) true
                       _ false))
            (_.cover [/.self?]
                     (/.self? (/.self)))
            (_.for [/.Register]
                   (_.cover [/.format]
                            (not (text#= (/.format {/.#Local register})
                                         (/.format {/.#Foreign register})))))
            ))))
