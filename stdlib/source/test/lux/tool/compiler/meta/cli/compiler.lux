(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try ("[1]#[0]" functor)]
    ["<>" parser
     ["<[0]>" text]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [meta
    ["[0]" symbol
     ["$[1]" \\test]]]]]
 [\\library
  ["[0]" /]])

(def: .public random
  (Random /.Compiler)
  (do [! random.monad]
    [definition ($symbol.random 1 1)
     amount (# ! each (n.% 5) random.nat)
     parameters (random.list amount (random.lower_case 2))]
    (in [/.#definition definition
         /.#parameters parameters])))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Compiler])
      (do [! random.monad]
        [expected ..random]
        (all _.and
             (_.for [/.equivalence]
                    ($equivalence.spec /.equivalence ..random))

             (_.coverage [/.format /.parser]
               (|> expected
                   /.format
                   (<text>.result /.parser)
                   (try#each (# /.equivalence = expected))
                   (try.else false)))
             ))))
