(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]]
   [control
    ["[0]" try]
    ["[0]" exception]
    [concurrency
     ["[0]" async {"+" Async} ("[1]#[0]" monad)]]]
   [math
    ["[0]" random]]
   [world
    ["[0]" file]]]]
 [\\library
  ["[0]" /]]
 ["$[0]" /// "_"
  ["[1][0]" context]])

(`` (implementation: (bad it)
      (-> (file.System Async) (file.System Async))

      (~~ (template [<name>]
            [(def: <name>
               (# it <name>))]

            [separator]
            [file?]
            [directory?]
            [modify]
            [write]
            [append]
            [move]
            [directory_files]
            [sub_directories]
            [file_size]
            [last_modified]
            [can_execute?]
            [read]
            [delete]
            ))

      (def: (make_directory path)
        (async#in {try.#Failure ""}))
      ))

(def: .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [.let [/ "/"
               fs (file.mock /)]
         context $///context.random
         @module random.nat]
        ($_ _.and
            (in (do async.monad
                  [pre/0 (# fs directory? (/.path fs context @module))
                   pre/1 (/.enabled? fs context @module)
                   outcome (/.enable! fs context @module)
                   post/0 (# fs directory? (/.path fs context @module))
                   post/1 (/.enabled? fs context @module)]
                  (_.cover' [/.path /.enabled? /.enable!]
                            (and (not pre/0)
                                 (not pre/1)
                                 
                                 (case outcome
                                   {try.#Success _} true
                                   {try.#Failure _} false)
                                 
                                 post/0
                                 post/1))))
            (in (do async.monad
                  [pre/0 (# fs directory? (/.path fs context @module))
                   pre/1 (/.enabled? fs context @module)
                   outcome (/.enable! (..bad fs) context @module)
                   post/0 (# fs directory? (/.path fs context @module))
                   post/1 (/.enabled? fs context @module)]
                  (_.cover' [/.cannot_enable]
                            (and (not pre/0)
                                 (not pre/1)
                                 
                                 (case outcome
                                   {try.#Success _}
                                   false
                                   
                                   {try.#Failure error}
                                   (exception.match? /.cannot_enable error))
                                 
                                 (not post/0)
                                 (not post/1)))))
            ))))
