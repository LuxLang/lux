(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try (.open: "[1]#[0]" functor)]]
   [data
    ["[0]" text (.open: "[1]#[0]" equivalence)]
    ["[0]" binary
     ["[1]" \\format]
     ["<[1]>" \\parser]]]
   [math
    ["[0]" random (.only Random) (.open: "[1]#[0]" monad)]]]]
 [\\library
  ["[0]" /]])

(def: random_module_state
  (Random Module_State)
  (all random.or
       (random#in [])
       (random#in [])
       (random#in [])
       ))

(def: .public (random imports)
  (-> Nat (Random /.Descriptor))
  (all random.and
       (random.lower_case 1)
       (random.lower_case 1)
       random.nat
       ..random_module_state
       (random.set text.hash imports (random.lower_case 2))
       ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Descriptor])
      (do random.monad
        [expected (..random 5)])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence (..random 1)))

           (_.for [/.Module]
                  (_.coverage [/.runtime]
                    (text#= "" /.runtime)))
           (_.coverage [/.writer /.parser]
             (|> expected
                 (binary.result /.writer)
                 (<binary>.result /.parser)
                 (try#each (|>> (at /.equivalence = (has /.#state {.#Cached} expected))))
                 (try.else false)))
           )))
