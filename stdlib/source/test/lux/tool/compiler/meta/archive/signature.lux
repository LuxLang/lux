(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try (.open: "[1]#[0]" functor)]
    [parser
     ["<[0]>" binary]]]
   [data
    ["[0]" bit (.open: "[1]#[0]" equivalence)]
    ["[0]" text (.open: "[1]#[0]" equivalence)]
    [format
     ["[0]F" binary]]]
   [math
    ["[0]" random (.only Random)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" ////
  ["[1][0]" version]])

(def: .public random
  (Random /.Signature)
  (all random.and
       (all random.and
            (random.upper_case 1)
            (random.lower_case 1))
       ////version.random
       ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Signature])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))
           
           (do random.monad
             [left ..random
              right ..random]
             (_.coverage [/.description]
               (bit#= (at /.equivalence = left right)
                      (text#= (/.description left) (/.description right)))))
           (do random.monad
             [expected ..random]
             (_.coverage [/.writer /.parser]
               (|> expected
                   (binaryF.result /.writer)
                   (<binary>.result /.parser)
                   (try#each (at /.equivalence = expected))
                   (try.else false))))
           )))
