(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try ("[1]#[0]" functor)]
    [parser
     ["<[0]>" binary]]]
   [data
    ["[0]" bit ("[1]#[0]" equivalence)]
    ["[0]" text ("[1]#[0]" equivalence)]
    [format
     ["[0]F" binary]]]
   [math
    ["[0]" random {"+" Random}]]]]
 [\\library
  ["[0]" /]]
 ["[0]" //// "_"
  ["[1][0]" version]])

(def: .public random
  (Random /.Signature)
  ($_ random.and
      ($_ random.and
          (random.ascii/upper 1)
          (random.ascii/lower 1))
      ////version.random
      ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Signature])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))
          
          (do random.monad
            [left ..random
             right ..random]
            (_.cover [/.description]
                     (bit#= (# /.equivalence = left right)
                            (text#= (/.description left) (/.description right)))))
          (do random.monad
            [expected ..random]
            (_.cover [/.writer /.parser]
                     (|> expected
                         (binaryF.result /.writer)
                         (<binary>.result /.parser)
                         (try#each (# /.equivalence = expected))
                         (try.else false))))
          )))
