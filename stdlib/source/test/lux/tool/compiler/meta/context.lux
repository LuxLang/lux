(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]]
   [data
    ["[0]" text]
    [collection
     ["[0]" set]
     ["[0]" list ("[1]#[0]" functor)]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" /]])

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Context /.Extension])
      (do [! random.monad]
        [target (random.ascii/lower 1)]
        ($_ _.and
            (_.cover [/.js /.jvm /.lua /.python /.ruby]
                     (let [contexts (list (/.js target)
                                          (/.jvm target)
                                          (/.lua target)
                                          (/.python target)
                                          (/.ruby target))
                           maximum (list.size contexts)]
                       (`` (and (~~ (template [<amount> <slot>]
                                      [(|> contexts
                                           (list#each (value@ <slot>))
                                           (set.of_list text.hash)
                                           set.size
                                           (n.= <amount>))]

                                      [maximum /.#host]
                                      [maximum /.#host_module_extension]
                                      [maximum /.#artifact_extension]
                                      [1 /.#target]
                                      ))))))
            ))))
