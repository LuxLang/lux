(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]]
   [control
    [pipe {"+" case>}]
    ["[0]" try ("[1]#[0]" functor)]
    ["<>" parser
     ["<[0]>" cli]]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list ("[1]#[0]" monoid monad)]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" /]])

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Service /.service])
      (let [(^open "list#[0]") (list.equivalence text.equivalence)])
      (do [! random.monad]
        [amount (# ! each (|>> (n.% 5) ++) random.nat)
         sources (random.list amount (random.ascii/lower 1))
         host_dependencies (random.list amount (random.ascii/lower 2))
         libraries (random.list amount (random.ascii/lower 3))
         target (random.ascii/lower 4)
         module (random.ascii/lower 5)
         .let [compilation' ($_ list#composite
                                (list#conjoint (list#each (|>> (list "--source")) sources))
                                (list#conjoint (list#each (|>> (list "--host_dependency")) host_dependencies))
                                (list#conjoint (list#each (|>> (list "--library")) libraries))
                                (list "--target" target)
                                (list "--module" module))
               export ($_ list#composite
                          (list#conjoint (list#each (|>> (list "--source")) sources))
                          (list "--target" target))]]
        ($_ _.and
            (_.for [/.Compilation]
                   (`` ($_ _.and
                           (~~ (template [<type> <slot> <?>]
                                 [(_.cover [<type>]
                                           (|> (list& "build" compilation')
                                               (<cli>.result /.service)
                                               (try#each (|>> (case> {/.#Compilation it}
                                                                     (|> it
                                                                         (value@ <slot>)
                                                                         <?>)
                                                                     
                                                                     _
                                                                     false)))
                                               (try.else false)))]

                                 [/.Source /.#sources (list#= sources)]
                                 [/.Host_Dependency /.#host_dependencies (list#= host_dependencies)]
                                 [/.Library /.#libraries (list#= libraries)]
                                 [/.Target /.#target (same? target)]
                                 [/.Module /.#module (same? module)]
                                 ))
                           )))
            (_.cover [/.Interpretation]
                     (`` (and (~~ (template [<slot> <?>]
                                    [(|> (list& "repl" compilation')
                                         (<cli>.result /.service)
                                         (try#each (|>> (case> {/.#Interpretation it}
                                                               (|> it
                                                                   (value@ <slot>)
                                                                   <?>)
                                                               
                                                               _
                                                               false)))
                                         (try.else false))]

                                    [/.#sources (list#= sources)]
                                    [/.#host_dependencies (list#= host_dependencies)]
                                    [/.#libraries (list#= libraries)]
                                    [/.#target (same? target)]
                                    [/.#module (same? module)]
                                    )))))
            (_.cover [/.Export]
                     (`` (and (~~ (template [<side> <?>]
                                    [(|> (list& "export" export)
                                         (<cli>.result /.service)
                                         (try#each (|>> (case> {/.#Export it}
                                                               (|> it
                                                                   <side>
                                                                   <?>)
                                                               
                                                               _
                                                               false)))
                                         (try.else false))]

                                    [product.left (list#= sources)]
                                    [product.right (same? target)]
                                    )))))
            (_.cover [/.target]
                     (`` (and (~~ (template [<it>]
                                    [(same? target (/.target <it>))]

                                    [{/.#Compilation [/.#sources sources
                                                      /.#host_dependencies host_dependencies
                                                      /.#libraries libraries
                                                      /.#target target
                                                      /.#module module]}]
                                    [{/.#Interpretation [/.#sources sources
                                                         /.#host_dependencies host_dependencies
                                                         /.#libraries libraries
                                                         /.#target target
                                                         /.#module module]}]
                                    [{/.#Export [sources target]}]
                                    )))))
            ))))
