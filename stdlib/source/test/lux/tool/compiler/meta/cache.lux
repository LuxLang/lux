(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]]
   [control
    ["[0]" try]
    [concurrency
     ["[0]" async]]]
   [math
    ["[0]" random]]
   [world
    ["[0]" file]]]]
 [\\library
  ["[0]" /]]
 ["[0]" / "_"
  ["[1][0]" archive]
  ["[1][0]" module]
  ["[1][0]" artifact]
  ["$/[1]" // "_"
   ["[1][0]" context]]])

(def: .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [.let [/ "/"
               fs (file.mock /)]
         context $//context.random]
        ($_ _.and
            (in (do [! async.monad]
                  [pre/0 (# fs directory? (/.path fs context))
                   pre/1 (/.enabled? fs context)
                   outcome (/.enable! ! fs context)
                   post/0 (# fs directory? (/.path fs context))
                   post/1 (/.enabled? fs context)]
                  (_.cover' [/.path /.enabled? /.enable!]
                            (and (not pre/0)
                                 (not pre/1)
                                 
                                 (case outcome
                                   {try.#Success _} true
                                   {try.#Failure _} false)
                                 
                                 post/0
                                 post/1))))

            /archive.test
            /module.test
            /artifact.test
            ))))
