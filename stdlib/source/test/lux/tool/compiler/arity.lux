(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" bit ("[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" /]])

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Arity])
      (do [! random.monad]
        [arity (# ! each (n.% 3) random.nat)]
        (all _.and
             (_.coverage [/.nullary?]
               (bit#= (n.= 0 arity) (/.nullary? arity)))
             (_.coverage [/.unary?]
               (bit#= (n.= 1 arity) (/.unary? arity)))
             (_.coverage [/.multiary?]
               (bit#= (n.>= 2 arity) (/.multiary? arity)))
             ))))
