... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]
   [data
    ["[0]" text (.only)
     ["[0]" character]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)
      ["[0]" property]]
     ["[0]" set]]]
   [logic
    ["[0]" bit]]
   ["[0]" type (.only)
    ["[0]" check]]
   [math
    ["[0]" random (.use "[1]#[0]" monad)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]
   [error
    ["[0]" try]]
   [meta
    ["[0]" module]]]]
 [\\library
  ["[0]" /]])

(expansion.let [,each_simple (these [/.bit /.Bit]
                                    [/.decimal /.Decimal]
                                    [/.text /.Text]
                                    [/.tag /.Tag]
                                    [/.slot /.Slot]
                                    [/.macro /.Macro]
                                    [/.eval /.Eval])
                ,each_complex (these [/.i64 /.I64]
                                     [/.list /.List])
                ,each_integer (these [/.natural /.Natural]
                                     [/.integer /.Integer]
                                     [/.revolution /.Revolution])
                ,each_2 (these [/.sum /.Sum]
                               [/.product /.Product]
                               [/.function /.Function]
                               [/.array /.Array])
                ,each (these ,each_simple
                             ,each_complex
                             ,each_integer)
                ,each_name (template.with [,name ,type]
                             [,name]
                             
                             [,each
                              ,each_2])
                ,each_type (template.with [,name ,type]
                             [,type]
                             
                             [,each])]
  (the .public test
    Test
    (<| (_.covering /._)
        (do [! random.monad]
          [.let [unique (set.of_list text.hash)
                 random_simple (`` (all random.either
                                        (,, (template.with [,name ,type]
                                              [(random#pure ,type)]
                                              
                                              [,each_simple]))
                                        ))]
           left random_simple
           right random_simple])
        (_.for [/.Identity])
        (`` (all _.and
                 (<| (_.for [,each_name])
                     (let [expected_amount (list.size (list ,each_name))])
                     (all _.and
                          (,, (template.with [,slot]
                                [(_.coverage [,slot]
                                   (|> (list ,each_name)
                                       (list#each (its ,slot))
                                       unique
                                       set.size
                                       (n.= expected_amount)))]

                                [[/.#alias]
                                 [/.#name]]))))
                 (_.coverage [,each_type]
                   (let [every_type (list ,each_type)]
                     (list.every? (function (_ expected)
                                    (list.every? (function (_ actual)
                                                   (bit.= (same? expected actual)
                                                          (type.= expected actual)))
                                                 every_type))
                                  every_type)))
                 (_.coverage [(,, (template.with [,name ,type]
                                    [,type]
                                    
                                    [,each_2]))]
                   (and (,, (template.with [,name_0 ,type_0]
                              [(`` (and (,, (template.with [,name_1 ,type_1]
                                              [(and (bit.= (same? ,type_0 ,type_1)
                                                           (type.= (,type_0 left right)
                                                                   (,type_1 left right))))]
                                              
                                              [,each_2]))))]
                              
                              [,each_2]))))
                 (_.coverage [/.each_name /.each_type]
                   (set.= (set.empty text.hash)
                          (set.intersection (unique (property.keys /.each_name))
                                            (unique (property.keys (property.lacks "eval" /.each_type))))))
                 (_.coverage [/.Eval']
                   (check.< (.type# "eval") /.Eval'))
                 (,, (template.with [,type_in_library ,type_in_compiler ,labels]
                       [(`` (_.coverage [,type_in_compiler
                                         (,, (template.spliced ,labels))]
                              (check.< ,type_in_library ,type_in_compiler)))]

                       [[.Type /.Type [/.#Nominal /.#Parameter /.#Variable /.#Opaque /.#Quantification /.#Reification /.#Named]]
                        [.Code /.Code [/.#Bit /.#Natural /.#Integer /.#Revolution /.#Decimal /.#Text /.#Name /.#Form /.#Variant /.#Tuple]]
                        [.Info /.Info [/.#target /.#version /.#mode /.#configuration]]
                        [.Global /.Global [/.#Definition /.#Alias /.#Default]]
                        [.Module /.Module [/.#module_hash /.#module_aliases /.#definitions /.#imports /.#module_state]]
                        [.Bindings /.Bindings [/.#counter /.#mappings]]
                        [.Scope /.Scope [/.#locals /.#captured]]
                        [.Type_Context /.Type_Context [/.#ex_counter /.#var_counter /.#var_bindings]]
                        [.Lux /.Lux [/.#info /.#source /.#provenance
                                     /.#current_module /.#modules /.#scopes
                                     /.#type_context /.#expected /.#seed
                                     /.#eval]]

                        [.Definition /.Definition []]
                        [.Default /.Default []]
                        [.Alias /.Alias []]
                        [.Label /.Label []]
                        [.Provenance /.Provenance []]
                        [.Name /.Name []]
                        
                        [character.Character /.Character []]
                        [module.Name /.Name_Of_Module []]]))
                 ))))
  )
