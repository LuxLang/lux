... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]
   [data
    ["[0]" bit]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)
      ["[0]" property]]
     ["[0]" set]]]
   ["[0]" type]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(expansion.let [,each_simple (these [/.bit /.Bit]
                                    [/.decimal /.Decimal]
                                    [/.text /.Text]
                                    [/.tag /.Tag]
                                    [/.slot /.Slot]
                                    [/.macro /.Macro])
                ,each_complex (these [/.i64 /.I64]
                                     [/.list /.List])
                ,each_integer (these [/.natural /.Natural]
                                     [/.integer /.Integer]
                                     [/.revolution /.Revolution])
                ,each (these ,each_simple
                             ,each_complex
                             ,each_integer)
                ,each_name (template.with [,name ,type]
                             [,name]
                             
                             ,each
                             )
                ,each_type (template.with [,name ,type]
                             [,type]
                             
                             ,each
                             )]
  (the .public test
    Test
    (<| (_.covering /._)
        (do [! random.monad]
          [.let [every_pair (list ,each)
                 expected_amount (list.size every_pair)
                 unique (set.of_list text.hash)]])
        (_.for [/.Identity])
        (all _.and
             (<| (_.for [,each_name])
                 (`` (all _.and
                          (,, (template.with [,slot]
                                [(_.coverage [,slot]
                                   (|> (list ,each_name)
                                       (list#each (its ,slot))
                                       unique
                                       set.size
                                       (n.= expected_amount)))]

                                [/.#alias]
                                [/.#name]
                                )))))
             (_.coverage [,each_type]
               (let [every_type (list ,each_type)]
                 (list.every? (function (_ expected)
                                (list.every? (function (_ actual)
                                               (bit.= (same? expected actual)
                                                      (type.= expected actual)))
                                             every_type))
                              every_type)))
             (_.coverage [/.each_name]
               (and (set.= (unique (list#each (its /.#alias) (list ,each_name)))
                           (unique (property.keys /.each_name)))
                    (set.= (unique (list#each (its /.#name) (list ,each_name)))
                           (unique (property.values /.each_name)))))
             )))
  )
