... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" state]
    ["[0]" try]]
   [data
    ["[0]" bit]]
   [math
    ["[0]" random]]
   [macro
    ["[0]" template]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" integer]
    ["[0]" float]
    ["[0]" long]
    ["[0]" double]
    ["[0]" utf8]
    [//
     [type
      ["[0]" box]
      ["[0]" descriptor (.only)
       ["[1]T" \\test]]]
     [encoding
      [name
       ["[0]" internal]]]]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [])
      (all _.and
           (<| (_.for [/.Resource
                       /.functor /.monad])
               (`` (all _.and
                        (,, (template.with [,resource ,= ,random]
                              [(do !
                                 [left_value ,random
                                  right_value ,random]
                                 (_.coverage [,resource]
                                   (when [((,resource left_value) /.empty)
                                          ((,resource right_value) /.empty)]
                                     [{try.#Success [left_pool _]}
                                      {try.#Success [right_pool _]}]
                                     (bit.= (,= left_value
                                                right_value)
                                            (/.= left_pool
                                                 right_pool))
                                     
                                     _
                                     false)))]

                              [/.integer integer.= integer.random]
                              [/.float float.= float.random]
                              [/.long long.= long.random]
                              [/.double double.= double.random]
                              [/.utf8 utf8.= utf8.random]
                              ))
                        (do !
                          [left_value utf8.random
                           right_value utf8.random]
                          (_.coverage [/.string]
                            (when [((/.string left_value) /.empty)
                                   ((/.string right_value) /.empty)]
                              [{try.#Success [left_pool _]}
                               {try.#Success [right_pool _]}]
                              (bit.= (utf8.= left_value
                                             right_value)
                                     (/.= left_pool
                                          right_pool))
                              
                              _
                              false)))
                        )))
           (do !
             [left_value (by ! each internal.name box.random)
              right_value (by ! each internal.name box.random)]
             (_.coverage [/.class]
               (when [((/.class left_value) /.empty)
                      ((/.class right_value) /.empty)]
                 [{try.#Success [left_pool _]}
                  {try.#Success [right_pool _]}]
                 (bit.= (internal.= left_value
                                    right_value)
                        (/.= left_pool
                             right_pool))
                 
                 _
                 false)))
           (do !
             [left_value descriptorT.random
              right_value descriptorT.random]
             (_.coverage [/.descriptor]
               (when [((/.descriptor left_value) /.empty)
                      ((/.descriptor right_value) /.empty)]
                 [{try.#Success [left_pool _]}
                  {try.#Success [right_pool _]}]
                 (bit.= (descriptor.= left_value
                                      right_value)
                        (/.= left_pool
                             right_pool))
                 
                 _
                 false)))
           (<| (_.for [/.Member
                       /.#name /.#descriptor])
               (all _.and
                    (do !
                      [left_name utf8.random
                       right_name utf8.random

                       left_descriptor descriptorT.random
                       right_descriptor descriptorT.random]
                      (_.coverage [/.name_and_type]
                        (when [((/.name_and_type [left_name left_descriptor]) /.empty)
                               ((/.name_and_type [right_name right_descriptor]) /.empty)]
                          [{try.#Success [left_pool _]}
                           {try.#Success [right_pool _]}]
                          (bit.= (and (utf8.= left_name
                                              right_name)
                                      (descriptor.= left_descriptor
                                                    right_descriptor))
                                 (/.= left_pool
                                      right_pool))
                          
                          _
                          false)))
                    (do !
                      [class box.random

                       left_name utf8.random
                       right_name utf8.random

                       left_descriptor descriptorT.random
                       right_descriptor descriptorT.random]
                      (_.coverage [/.field]
                        (when [((/.field class [left_name left_descriptor]) /.empty)
                               ((/.field class [right_name right_descriptor]) /.empty)]
                          [{try.#Success [left_pool _]}
                           {try.#Success [right_pool _]}]
                          (bit.= (and (utf8.= left_name
                                              right_name)
                                      (descriptor.= left_descriptor
                                                    right_descriptor))
                                 (/.= left_pool
                                      right_pool))
                          
                          _
                          false)))
                    ))
           )))
