... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [function
    ["?" predicate]]
   [data
    ["[0]" text (.only)
     ["?[1]" \\projection]]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor monoid)]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" // (.only)
    ["[0]" box]
    ["[0]" category]
    ["[0]" signature]
    [//
     [encoding
      [name
       ["[0]" internal]]]]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [expected_class box.random
         expected_parameter box.random
         expected_variable (random.lower_cased 1)])
      (`` (all _.and
               (,, (template.with [,name ,type]
                     [(_.coverage [,name]
                        (|> ,type
                            //.signature
                            signature.signature
                            (?text.value ,name)
                            (try#each (//.= ,type))
                            (try.else false)))]

                     [/.void //.void]

                     [/.boolean //.boolean]
                     [/.byte //.byte]
                     [/.short //.short]
                     [/.int //.int]
                     [/.long //.long]
                     [/.float //.float]
                     [/.double //.double]
                     [/.char //.char]
                     
                     [/.wildcard //.wildcard]
                     ))
               (let [types (stack //.boolean
                                  //.byte //.short //.int //.long
                                  //.float //.double
                                  //.char)]
                 (all _.and
                      (_.coverage [/.primitive]
                        (stack.every? (function (_ type)
                                        (|> type
                                            //.signature
                                            signature.signature
                                            (?text.value /.primitive)
                                            (try#each (//.= type))
                                            (try.else false)))
                                      types))
                      (_.coverage [/.primitive?]
                        (stack.every? (|>> /.primitive?
                                           (match? {.#Some _}))
                                      types))
                      (_.coverage [/.array]
                        (and (stack.every? (function (_ type)
                                             (let [type (//.array type)]
                                               (|> type
                                                   //.signature
                                                   signature.signature
                                                   (?text.value /.array)
                                                   (try#each (//.= type))
                                                   (try.else false))))
                                           types)
                             (stack.every? (function (_ type)
                                             (let [type (//.array (//.array type))]
                                               (|> type
                                                   //.signature
                                                   signature.signature
                                                   (?text.value /.array)
                                                   (try#each (//.= type))
                                                   (try.else false))))
                                           types)))
                      (_.coverage [/.array?]
                        (and (stack.every? (|>> //.array
                                                /.array?
                                                (match? {.#Some _}))
                                           types)
                             (stack.every? (|>> //.array
                                                //.array
                                                /.array?
                                                (match? {.#Some _}))
                                           types)))
                      ))
               (_.coverage [/.wildcard?]
                 (|> //.wildcard
                     /.wildcard?
                     (match? {.#Some _})))
               (let [parameter (//.class (stack) expected_parameter)
                     type (//.class (stack parameter) expected_class)]
                 (all _.and
                      (_.coverage [/.class]
                        (|> type
                            //.signature
                            signature.signature
                            (?text.value /.class)
                            (try#each (//.= type))
                            (try.else false)))
                      (_.coverage [/.class_name]
                        (|> expected_class
                            internal.name
                            internal.value
                            (?text.value /.class_name)
                            (try#each (text.= expected_class))
                            (try.else false)))
                      (_.coverage [/.read_class]
                        (let [[[actual_parameters] actual_class] (/.read_class type)]
                          (and (text.= expected_class actual_class)
                               (by (stack.equivalence //.=) = (stack parameter) actual_parameters))))
                      (_.coverage [/.class?]
                        (|> type
                            /.class?
                            (match? {.#Some _})))
                      (,, (template.with [,name ,type]
                            [(_.coverage [,name]
                               (|> type
                                   ,type
                                   ,name
                                   (maybe#each (//.= type))
                                   (maybe.else false)))]

                            [/.lower? //.lower]
                            [/.upper? //.upper]
                            ))
                      ))
               (let [type (//.var expected_variable)]
                 (all _.and
                      (_.coverage [/.var']
                        (|> type
                            //.signature
                            signature.signature
                            (?text.value /.var')
                            (try#each (text.= expected_variable))
                            (try.else false)))
                      (_.coverage [/.var]
                        (|> type
                            //.signature
                            signature.signature
                            (?text.value /.var)
                            (try#each (//.= type))
                            (try.else false)))
                      (_.coverage [/.var?]
                        (|> type
                            /.var?
                            (maybe#each (text.= expected_variable))
                            (maybe.else false)))
                      (_.coverage [/.name]
                        (|> type
                            /.name
                            (text.= expected_variable)))
                      (_.coverage [/.var_name]
                        (|> expected_variable
                            (?text.value /.var_name)
                            (try#each (text.= expected_variable))
                            (try.else false)))))
               (let [class (//.class (stack) expected_class)
                     objects (is (Stack //.Object)
                                 (stack (//.array class)
                                        class))
                     parameters (is (Stack //.Object)
                                    (stack#composite objects
                                                     (stack (//.var expected_variable)
                                                            //.wildcard
                                                            (//.lower class)
                                                            (//.upper class))))
                     values (is (Stack //.Value)
                                (stack#composite parameters
                                                 (stack //.boolean
                                                        //.byte
                                                        //.short
                                                        //.int
                                                        //.long
                                                        //.float
                                                        //.double
                                                        //.char)))
                     returns (is (Stack //.Return)
                                 (stack#composite values
                                                  (stack //.void)))]
                 (all _.and
                      (,, (template.with [,name ,types]
                            [(_.coverage [,name]
                               (stack.every? (function (_ type)
                                               (|> type
                                                   //.signature
                                                   signature.signature
                                                   (?text.value ,name)
                                                   (try#each (//.= (as //.Type type)))
                                                   (try.else false)))
                                             ,types))]

                            [/.object objects]
                            [/.parameter parameters]
                            [/.value values]
                            [/.return returns]
                            ))
                      (,, (template.with [,name ,types]
                            [(_.coverage [,name]
                               (stack.every? (|>> ,name
                                                  (match? {.#Some _}))
                                             ,types))]

                            [/.object? objects]
                            [/.parameter? parameters]
                            ))
                      ))
               ))))
