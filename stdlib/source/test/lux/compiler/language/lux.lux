... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except global)
   [abstract
    [equality (.only Equality)]
    ["[0]" monad]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]]
   [data
    ["[0]" maybe]
    ["[0]" sum]
    ["[0]" product]
    ["[0]" text]
    ["[0]" binary
     ["![1]" \\injection]
     ["?[1]" \\projection]]
    [collection
     ["[0]" list]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" monad)]
    [number
     [/64
      ["[0]" natural]]]]
   ["[0]" type (.only)
    ["[1]T" \\test]]
   [meta
    ["[0]" version]
    ["[0]" name (.only)
     ["[1]T" \\test]]]
   [compiler
    [meta
     [archive
      ["[0]" key]
      ["[0]" signature]]]
    [language
     [lux
      ["[0]" analysis]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" syntax]
  ["[1][0]" analysis]
  ["[1][0]" synthesis]
  ["[1][0]" translation]
  ["[1][0]" phase
   ... ["[1][0]" analysis]
   ... ["[1][0]" synthesis]
   ]])

(the any_equality
  (Equality Any)
  (implementation
   (the (= _ _)
     true)))

(the definition_equality
  (Equality Definition)
  (all product.equality
       type.equality
       (maybe.equality (product.equality analysis.equality
                                         (maybe.equality analysis.equality)))
       ..any_equality
       ))

(the definition
  (Random Definition)
  (monad.let random.monad
    [type (typeT.random 1)]
    (pure [type {.:None} []])))

(the global_equality
  (Equality Global)
  (all sum.equality
       name.equality
       ..definition_equality
       ))

(the global
  (Random Global)
  (all random.or
       (nameT.random 1 1)
       ..definition
       ))

(the module_state_equality
  (Equality Module_State)
  (all sum.equality
       ..any_equality
       ..any_equality
       ..any_equality
       ))

(the module_state
  (Random Module_State)
  (all random.or
       (random:pure [])
       (random:pure [])
       (random:pure [])
       ))

(the module_equality
  (Equality Module)
  (all product.equality
       natural.equality
       (list.equality (product.equality text.equality text.equality))
       (list.equality (all product.equality text.equality bit.equality global_equality))
       (list.equality text.equality)
       ..module_state_equality
       ))

(the module
  (Random Module)
  (all random.and
       random.natural
       (random.list 1 (random.and (random.upper_cased 2) (random.upper_cased 3)))
       (random.list 4 (all random.and (random.upper_cased 5) random.bit ..global))
       (random.list 6 (random.upper_cased 7))
       ..module_state
       ))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [expected ..module])
      (all _.and
           (_.coverage [/.as_binary /.of_binary]
             (|> expected
                 (!binary.value /.as_binary)
                 (?binary.value /.of_binary)
                 (try:each (by module_equality = (has .:module_state {.:Cached} expected)))
                 (try.else false)))
           (_.coverage [/.key]
             (let [it (key.signature /.key)]
               (and (let [[expected_module _] (name /._)
                          [actual_module actual_proper] (its signature.:name it)]
                      (and (text.= expected_module actual_module)))
                    (identical? version.latest (its signature.:version it)))))

           /syntax.test
           /analysis.test
           /synthesis.test
           /translation.test
           /phase.test
           )))
