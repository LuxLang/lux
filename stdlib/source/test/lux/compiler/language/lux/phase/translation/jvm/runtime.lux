... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" io]]
   [error
    ["[0]" try]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["[0]" natural]]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" check]]
   [test
    ["_" property (.only Test)]]
   [data
    ["[0]" text]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" host]
    [////
     ["[0]" phase]
     ["[0]" synthesis]
     ["[0]" translation]]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [module (random.lower_cased 1)])
      (_.for [/.Byte_Code /.Definition /.Anchor /.Value

              /.Expression])
      (`` (all _.and
               (,, (template.with [</> <//>]
                     [(_.coverage [</>]
                        (check.< </> <//>))]

                     [[/.State translation.State]
                      [/.Operation translation.Operation]
                      [/.Phase translation.Phase]
                      [/.Handler translation.Handler]
                      [/.Bundle translation.Bundle]
                      [/.Extender translation.Extender]
                      [/.Host translation.Host]]))
               (_.coverage [/.translation]
                 (let [[_ host] (io.value host.host)
                       state (is /.State
                                 (translation.state host module))]
                   (|> (monad.let try.monad
                         [_ (phase.value state
                                         (monad.let phase.monad
                                           [_ (translation.set_buffer translation.empty_buffer)]
                                           /.translation))]
                         (pure true))
                       (try.else false))))
               (_.coverage [/.Declaration]
                 (check.< /.Declaration /.Definition))
               (_.coverage [/.id]
                 (natural.= natural.zero /.id))
               (_.coverage [/.unit]
                 (io.value (monad.let io.monad
                             [[class_loader host] host.host]
                             (pure (when (by host evaluate [{.#None} /.unit])
                                     {try.#Success actual}
                                     (text.= synthesis.unit (as (-> Any Text) actual))
                                     
                                     {try.#Failure error}
                                     false)))))
               ))))
