... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" io]]
   [error
    ["[0]" try (.use "[1]#[0]" functor)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" /64]]]
   [compiler
    [meta
     ["[0]" archive]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [///
    [constant
     ["[0]" arity]]
    [//
     ["[0]" abstract]
     [///
      ["[0]" jvm (.only)
       ["[0]" host]
       ["[0]" runtime]
       ["[0]" value]
       ["[0]" complex
        ["[1]T" \\test]]
       [///
        ["[0]" extension]
        [//
         ["[0]" phase]
         ["[0]" synthesis]
         ["[0]" translation]]]]]]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [module (random.lower_cased 1)

         expected_i64 random.i64
         dummy_i64 (random.only (|>> (/64.= expected_i64) not)
                                random.i64)

         .let [extender (is extension.Extender
                            (function (_ _)
                              (undefined)))
               next (jvm.translate extender complexT.lux)
               @ [module 0 0]]])
      (all _.and
           (_.coverage [/.closure /.variables
                        /.get /.put]
             (|> (monad.let try.monad
                   [[_ archive] (archive.reserve "" archive.empty)
                    [_ archive] (archive.reserve module archive)
                    .let [[_ host] (io.value host.host)
                          state (is runtime.State
                                    (translation.state host module))]]
                   (<| (phase.value state)
                       (monad.let phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          .let [term (is synthesis.Term
                                         (<| (synthesis.abstraction @)
                                             [(list) 1]
                                             (synthesis.abstraction @)
                                             [(list (synthesis.local @ 1)) 1]
                                             (synthesis.foreign @ 0)))]
                          it (next archive term)]
                         (pure (|> it
                                   [{.#None}]
                                   (by host evaluate)
                                   (try#each (function (_ it)
                                               (let [it (as (-> Any (-> I64 I64 I64))
                                                            it)
                                                     it' (it expected_i64)]
                                                 (identical? expected_i64
                                                             (it' dummy_i64)))))
                                   (try.else false))))))
                 (try.else false)))
           )))
