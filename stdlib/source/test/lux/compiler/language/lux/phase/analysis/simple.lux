... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" pipe]]
   [error
    ["[0]" try]]
   [data
    ["[0]" product]]
   [math
    ["[0]" random]]
   [macro
    ["[0]" template]]
   ["[0]" type]
   [meta
    ["[0]" configuration
     ["$[1]" \\test]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [///
    ["[1][0]" extension]
    [//
     ["[1][0]" analysis (.only Analysis Operation)
      ["[2][0]" type]
      ["[2][0]" module]]
     [///
      ["[1][0]" phase (.use "[1]#[0]" functor)]]]]]])

(the (analysis state module type it ?)
  (-> Lux Text Type (Operation Analysis) (-> Analysis Bit) Bit)
  (and (|> it
           (/type.with type)
           (/module.with 0 module)
           (/phase#each product.right)
           (/phase.value [/extension.#bundle /extension.empty
                          /extension.#state state])
           (pipe.when
             {try.#Success analysis}
             (? analysis)

             _
             false))
       (|> it
           (/type.with .Nothing)
           (/module.with 0 module)
           (/phase#each product.right)
           (/phase.value [/extension.#bundle /extension.empty
                          /extension.#state state])
           (pipe.when
             {try.#Failure error}
             true

             _
             false))
       (|> it
           /type.inferring
           (/module.with 0 module)
           (/phase#each product.right)
           (/phase.value [/extension.#bundle /extension.empty
                          /extension.#state state])
           (pipe.when
             {try.#Success [inferred analysis]}
             (and (type.= type inferred)
                  (? analysis))

             _
             false))))

(the analysis?
  (template.macro (_ <type> <tag>)
    [(is (-> <type> Analysis Bit)
         (function (_ expected)
           (|>> (pipe.when
                  (<tag> actual)
                  (identical? expected actual)

                  _
                  false))))]))

(the .public test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [version random.natural
         host (random.lower_cased 1)
         module (random.lower_cased 2)
         configuration ($configuration.random 5)
         .let [state (/analysis.state (/analysis.info version host configuration))]]
        (`` (all _.and
                 (_.coverage [/.unit]
                   (..analysis state module .Any /.unit
                     (|>> (pipe.when
                            (/analysis.unit)
                            true
                            
                            _
                            false))))
                 (,, (template.with [<analysis> <type> <random> <tag>]
                       [(monad.let !
                          [sample <random>]
                          (_.coverage [<analysis>]
                            (..analysis state module <type> (<analysis> sample)
                              ((..analysis? <type> <tag>) sample))))]

                       [[/.bit .Bit random.bit /analysis.bit]
                        [/.natural .Natural random.natural /analysis.natural]
                        [/.integer .Integer random.integer /analysis.integer]
                        [/.revolution .Revolution random.revolution /analysis.revolution]
                        [/.decimal .Decimal random.decimal /analysis.decimal]
                        [/.text .Text (random.unicode 1) /analysis.text]]))
                 )))))
