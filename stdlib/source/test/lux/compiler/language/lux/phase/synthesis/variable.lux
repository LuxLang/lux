... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try]]
   [data
    ["[0]" product]
    [number
     ["n" natural]]
    [collection
     ["[0]" stack (.use "[1]:[0]" functor mix)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    ["[0]" random (.only Random)]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [test
    ["_" property (.only Test)]]]]
 [\\
  ["[0]" /
   [////
    ["[0]" analysis]
    ["[0]" synthesis (.only Side Member Path Synthesis)]
    [///
     [reference
      ["[0]" variable]]]]]])

(the !expect
  (template.macro (_ <pattern> <value>)
    (when <value>
      <pattern>
      true
      
      _
      false)))

(every Context
  [#redundants Natural
   #necessary (Dictionary Natural Natural)])

(every (Scenario a)
  (-> Context (Random [a a])))

(template.with [<name> <synthesis> <random>]
  [(the (<name> context)
     (Scenario Synthesis)
     (monad.let [! random.monad]
       [value <random>]
       (pure [(<synthesis> value)
              (<synthesis> value)])))]

  [[bit_scenario synthesis.bit random.bit]
   [i64_scenario synthesis.i64 (by ! each .i64 random.natural)]
   [f64_scenario synthesis.f64 random.decimal]
   [text_scenario synthesis.text (random.unicode 1)]])

(the (primitive_scenario context)
  (Scenario Synthesis)
  (random.either (random.either (..bit_scenario context)
                                (..i64_scenario context))
                 (random.either (..f64_scenario context)
                                (..text_scenario context))))

(the (with_redundancy scenario context)
  (-> (Scenario Synthesis) (Scenario Synthesis))
  (monad.let [! random.monad]
    [redundant? random.bit]
    (if redundant?
        (monad.let !
          [let? random.bit
           [expected_input actual_input] (..primitive_scenario context)
           .let [fake_register (n.+ (its #redundants context)
                                    (dictionary.size (its #necessary context)))]
           [expected_output actual_output] (scenario (revised #redundants ++ context))]
          (pure [(synthesis.when [expected_input
                                  {synthesis.#Seq {synthesis.#Pop}
                                                  {synthesis.#Then expected_output}}])
                 (if let?
                     (synthesis.let [actual_input fake_register actual_output])
                     (synthesis.when [actual_input
                                      {synthesis.#Seq {synthesis.#Bind fake_register}
                                                      {synthesis.#Seq {synthesis.#Pop}
                                                                      {synthesis.#Then actual_output}}}]))]))
        (scenario context))))

(the (variant_scenario scenario context)
  (-> (Scenario Synthesis) (Scenario Synthesis))
  (monad.let [! random.monad]
    [lefts random.natural
     right? random.bit
     [expected input] (scenario context)]
    (pure [(synthesis.variant [lefts right? expected])
           (synthesis.variant [lefts right? input])])))

(the (tuple_scenario context)
  (Scenario Synthesis)
  (let [registers (dictionary.entries (its #necessary context))]
    (by random.monad pure
        [(synthesis.tuple (stack:each (|>> product.left synthesis.local) registers))
         (synthesis.tuple (stack:each (|>> product.right synthesis.local) registers))])))

(the (structure_scenario context)
  (Scenario Synthesis)
  (random.either (..variant_scenario (..with_redundancy ..tuple_scenario) context)
                 (..tuple_scenario context)))

(the (let_scenario scenario context)
  (-> (Scenario Synthesis) (Scenario Synthesis))
  (monad.let random.monad
    [_ (pure [])
     [expected_input actual_input] (scenario context)
     .let [real_register (dictionary.size (its #necessary context))
           fake_register (n.+ (its #redundants context)
                              (dictionary.size (its #necessary context)))]
     [expected_output actual_output] (scenario (revised #necessary (dictionary.has real_register fake_register) context))]
    (pure [(synthesis.let [expected_input real_register expected_output])
           (synthesis.let [actual_input fake_register actual_output])])))

(the (if_scenario scenario context)
  (-> (Scenario Synthesis) (Scenario Synthesis))
  (monad.let random.monad
    [_ (pure [])
     [expected_test actual_test] (scenario context)
     [expected_then actual_then] (scenario context)
     [expected_else actual_else] (scenario context)]
    (pure [(synthesis.if [expected_test
                          expected_then
                          expected_else])
           (synthesis.if [actual_test
                          actual_then
                          actual_else])])))

(the random_member
  (Random Member)
  (monad.let random.monad
    [lefts random.natural
     right? random.bit]
    (pure (if right?
              {.#Right lefts}
              {.#Left lefts}))))

(the (get_scenario scenario context)
  (-> (Scenario Synthesis) (Scenario Synthesis))
  (monad.let [! random.monad]
    [length (by ! each (|>> (n.% 5) ++) random.natural)
     path (random.stack length ..random_member)
     [expected_record actual_record] (scenario context)]
    (pure [(synthesis.get [path expected_record])
           (synthesis.get [path actual_record])])))

(the random_side
  (Random Side)
  ..random_member)

(the (path_scenario scenario context)
  (-> (Scenario Synthesis) (Scenario Path))
  (`` (all random.either
           (all random.either
                (monad.let [! random.monad]
                  [_ (pure [])
                   [expected_then actual_then] (scenario context)]
                  (pure [{synthesis.#Seq {synthesis.#Pop}
                                         {synthesis.#Then expected_then}}
                         {synthesis.#Seq {synthesis.#Pop}
                                         {synthesis.#Then actual_then}}]))
                (monad.let [! random.monad]
                  [_ (pure [])
                   .let [real_register (dictionary.size (its #necessary context))
                         fake_register (n.+ (its #redundants context)
                                            (dictionary.size (its #necessary context)))]
                   [expected_then actual_then] (scenario (revised #necessary (dictionary.has real_register fake_register) context))]
                  (pure [{synthesis.#Seq {synthesis.#Bind real_register}
                                         {synthesis.#Seq {synthesis.#Pop}
                                                         {synthesis.#Then expected_then}}}
                         {synthesis.#Seq {synthesis.#Bind fake_register}
                                         {synthesis.#Seq {synthesis.#Pop}
                                                         {synthesis.#Then actual_then}}}])))
           (all random.either
                (,, (template.with [<tag> <random>]
                      [(monad.let [! random.monad]
                         [test <random>
                          [expected_then actual_then] (scenario context)]
                         (pure [{synthesis.#Seq {synthesis.#Test {<tag> test}}
                                                {synthesis.#Then expected_then}}
                                {synthesis.#Seq {synthesis.#Test {<tag> test}}
                                                {synthesis.#Then actual_then}}]))]

                      [[synthesis.#Bit random.bit]
                       [synthesis.#I64 (by ! each .i64 random.natural)]
                       [synthesis.#F64 random.decimal]
                       [synthesis.#Text (random.unicode 1)]])))
           (all random.either
                (monad.let [! random.monad]
                  [side ..random_side
                   [expected_next actual_next] (path_scenario scenario context)]
                  (pure [{synthesis.#Seq {synthesis.#Access {synthesis.#Side side}}
                                         expected_next}
                         {synthesis.#Seq {synthesis.#Access {synthesis.#Side side}}
                                         actual_next}]))
                (monad.let [! random.monad]
                  [member ..random_member
                   [expected_next actual_next] (path_scenario scenario context)]
                  (pure [{synthesis.#Seq {synthesis.#Access {synthesis.#Member member}}
                                         expected_next}
                         {synthesis.#Seq {synthesis.#Access {synthesis.#Member member}}
                                         actual_next}])))
           (monad.let [! random.monad]
             [_ (pure [])
              [expected_left actual_left] (path_scenario scenario context)
              [expected_right actual_right] (path_scenario scenario context)]
             (pure [{synthesis.#Alt expected_left expected_right}
                    {synthesis.#Alt actual_left actual_right}]))
           )))

(the (when_scenario scenario context)
  (-> (Scenario Synthesis) (Scenario Synthesis))
  (monad.let [! random.monad]
    [_ (pure [])
     [expected_input actual_input] (scenario context)
     [expected_path actual_path] (..path_scenario scenario context)]
    (pure [(synthesis.when [expected_input expected_path])
           (synthesis.when [actual_input actual_path])])))

(the (branch_scenario scenario context)
  (-> (Scenario Synthesis) (Scenario Synthesis))
  (all random.either
       (..let_scenario scenario context)
       (..if_scenario scenario context)
       (..get_scenario scenario context)
       (..when_scenario scenario context)
       ))

(the scope_arity 5)

(the (scope_scenario scenario context)
  (-> (Scenario Synthesis) (Scenario Synthesis))
  (monad.let [! random.monad]
    [_ (pure [])
     .let [real_start (dictionary.size (its #necessary context))
           fake_start (n.+ (its #redundants context)
                           real_start)]
     inits (random.stack ..scope_arity (scenario context))
     [expected_iteration actual_iteration] (scenario (revised #necessary
                                                              (function (_ necessary)
                                                                (stack:mix (function (_ [idx _] context)
                                                                             (dictionary.has (n.+ real_start idx)
                                                                                             (n.+ fake_start idx)
                                                                                             context))
                                                                           necessary
                                                                           (stack.enumeration inits)))
                                                              context))]
    (pure [(synthesis.scope [real_start (stack:each product.left inits) expected_iteration])
           (synthesis.scope [fake_start (stack:each product.right inits) actual_iteration])])))

(the (again_scenario scenario context)
  (-> (Scenario Synthesis) (Scenario Synthesis))
  (monad.let [! random.monad]
    [_ (pure [])
     resets (random.stack ..scope_arity (scenario context))]
    (pure [(synthesis.again (stack:each product.left resets))
           (synthesis.again (stack:each product.right resets))])))

(the (loop_scenario scenario context)
  (-> (Scenario Synthesis) (Scenario Synthesis))
  (all random.either
       (..scope_scenario scenario context)
       (..again_scenario scenario context)
       ))

(the (abstraction_scenario scenario context)
  (-> (Scenario Synthesis) (Scenario Synthesis))
  (monad.let [! random.monad]
    [_ (pure [])
     .let [registers (dictionary.entries (its #necessary context))
           expected_environment (stack:each (|>> product.left {variable.#Local}) registers)
           actual_environment (stack:each (|>> product.right {variable.#Local}) registers)]
     [expected_body actual_body] (..primitive_scenario context)]
    (pure [(synthesis.abstraction [expected_environment 1 expected_body])
           (synthesis.abstraction [actual_environment 1 actual_body])])))

(the (reification_scenario scenario context)
  (-> (Scenario Synthesis) (Scenario Synthesis))
  (monad.let [! random.monad]
    [abstraction (by ! each (|>> synthesis.constant)
                     (random.and (random.unicode 1)
                                 (random.unicode 1)))
     inputs (random.stack ..scope_arity (scenario context))]
    (pure [(synthesis.reification [abstraction (stack:each product.left inputs)])
           (synthesis.reification [abstraction (stack:each product.right inputs)])])))

(the (function_scenario scenario context)
  (-> (Scenario Synthesis) (Scenario Synthesis))
  (all random.either
       (..abstraction_scenario scenario context)
       (..reification_scenario scenario context)
       ))

(the (control_scenario scenario context)
  (-> (Scenario Synthesis) (Scenario Synthesis))
  (all random.either
       (..branch_scenario scenario context)
       (..loop_scenario scenario context)
       (..function_scenario scenario context)
       ))

(the (scenario context)
  (Scenario Synthesis)
  (all random.either
       (..primitive_scenario context)
       (..structure_scenario context)
       (..control_scenario (..with_redundancy
                             (..control_scenario
                              (..with_redundancy
                                ..structure_scenario)))
                           context)
       ))

(the default
  Context
  [#redundants 0
   #necessary (dictionary.empty n.hash)])

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (monad.let random.monad
             [[expected input] (..scenario ..default)]
             (_.coverage [/.optimization]
               (|> (/.optimization input)
                   (!expect (^.multi {try.#Success actual}
                                     (by synthesis.equivalence = expected actual))))))
           )))
