... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io]]
   [error
    ["[0]" try (.use "[1]#[0]" functor)]]
   ["[0]" function]
   [data
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]
     ["[0]" i64]]]
   [compiler
    [meta
     ["[0]" archive]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [field
    [constant
     ["[0]" arity]]]
   ["[0]" // (.only)
    ["[0]" host]
    ["[0]" runtime]
    [///
     ["[0]" extension]
     [//
      ["[0]" phase]
      ["[0]" synthesis]
      ["[0]" translation]]]]]]
 ["[0]" /
  ["[1][0]" abstract]
  ["[1][0]" method]
  [field
   [constant
    ["[0]T" arity]]
   ["[0]T" variable]]
  [//
   ["[0]T" complex]]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [module (random.lower_cased 1)

         expected_bit random.bit
         expected_i64 random.i64

         .let [extender (is extension.Extender
                            (function (_ _)
                              (undefined)))
               next (//.translate extender complexT.lux)
               @ [module 0 0]]

         arity (by ! each (|>> (n.% (n.- 1 arity.maximum))
                               (n.+ 2))
                   random.natural)
         inner_arity (by ! each (|>> (n.% (n.- 1 arity))
                                     (n.+ 1))
                         random.natural)])
      (all _.and
           (_.coverage [/.abstraction]
             (|> (do try.monad
                   [[_ archive] (archive.reserve "" archive.empty)
                    [_ archive] (archive.reserve module archive)
                    .let [[_ host] (io.value host.host)
                          state (is runtime.State
                                    (translation.state host module))]]
                   (<| (phase.value state)
                       (do phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          it (/.abstraction next archive
                                            [(list) 1 (synthesis.i64 @ expected_i64)])]
                         (in (|> it
                                 [{.#None}]
                                 (by host evaluate)
                                 (try#each (|>> (as (-> [] I64))
                                                (function.on [])
                                                (i64.= expected_i64)))
                                 (try.else false))))))
                 (try.else false)))
           (_.coverage [/.reification]
             (let [exact_arity!
                   (|> (do try.monad
                         [[_ archive] (archive.reserve "" archive.empty)
                          [_ archive] (archive.reserve module archive)
                          .let [[_ host] (io.value host.host)
                                state (is runtime.State
                                          (translation.state host module))]]
                         (<| (phase.value state)
                             (do phase.monad
                               [_ (translation.set_buffer translation.empty_buffer)
                                it (/.reification next archive
                                                  [(synthesis.abstraction @ [(list) arity (synthesis.i64 @ expected_i64)])
                                                   (list.repeated arity (synthesis.bit @ expected_bit))])]
                               (in (|> it
                                       [{.#None}]
                                       (by host evaluate)
                                       (try#each (|>> (as I64)
                                                      (i64.= expected_i64)))
                                       (try.else false))))))
                       (try.else false))

                   multiple_applications!
                   (|> (do try.monad
                         [[_ archive] (archive.reserve "" archive.empty)
                          [_ archive] (archive.reserve module archive)
                          .let [[_ host] (io.value host.host)
                                state (is runtime.State
                                          (translation.state host module))]]
                         (<| (phase.value state)
                             (do phase.monad
                               [_ (translation.set_buffer translation.empty_buffer)
                                .let [outer_arity (n.- inner_arity arity)

                                      inner_abstraction (is synthesis.Term
                                                            (<| (synthesis.abstraction @)
                                                                [(list) inner_arity
                                                                 (synthesis.i64 @ expected_i64)]))
                                      outer_abstraction (is synthesis.Term
                                                            (<| (synthesis.abstraction @)
                                                                [(list) outer_arity
                                                                 inner_abstraction]))
                                      outer_application (is synthesis.Term
                                                            (<| (synthesis.reification @)
                                                                [outer_abstraction
                                                                 (list.repeated outer_arity (synthesis.bit @ expected_bit))]))
                                      inner_application (is synthesis.Term
                                                            (<| (synthesis.reification @)
                                                                [outer_application
                                                                 (list.repeated inner_arity (synthesis.bit @ expected_bit))]))]
                                it (next archive inner_application)]
                               (in (|> it
                                       [{.#None}]
                                       (by host evaluate)
                                       (try#each (|>> (as I64)
                                                      (i64.= expected_i64)))
                                       (try.else false))))))
                       (try.else false))]
               (and exact_arity!
                    multiple_applications!)))

           /abstract.test
           /method.test
           arityT.test
           variableT.test
           )))
