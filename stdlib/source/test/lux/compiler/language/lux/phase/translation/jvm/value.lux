... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io]]
   [error
    ["[0]" try]]
   [data
    ["[0]" bit]
    ["[0]" text]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" integer]
     ["[0]" decimal]]]
   [macro
    ["[0]" template]]
   [target
    [jvm
     ["//" bytecode]
     ["[0]" type]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" host]
    ["[0]" primitive]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_bit random.bit
         expected_i64 random.i64
         expected_f64 random.unit_decimal
         expected_text (random.lower_cased 1)])
      (`` (all _.and
               (_.coverage [/.field]
                 (not (text.empty? /.field)))
               (_.coverage [/.boxed /.primitive]
                 (and (,, (template.with [<constructor> <expected> <lux_type> <=> <jvm_type>]
                            [(io.value (do io.monad
                                         [[class_loader host] host.host]
                                         (in (when (by host evaluate [{.#None}
                                                                      (all //.composite
                                                                           (<constructor> <expected>)
                                                                           (/.primitive <jvm_type>)
                                                                           (/.boxed <jvm_type>)
                                                                           )])
                                               {try.#Success actual}
                                               (<=> <expected> (as (-> Any <lux_type>) actual))
                                               
                                               {try.#Failure error}
                                               false))))]

                            [primitive.bit expected_bit Bit bit.= type.boolean]
                            [primitive.i64 expected_i64 Integer integer.= type.long]
                            [primitive.f64 expected_f64 Decimal decimal.= type.double]
                            ))))
               ))))
