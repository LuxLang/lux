... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except i64 integer)
   [abstract
    [monad (.only do)]]
   ["r" math/random (.only Random)]
   [control
    [io (.only IO)]
    ["[0]" pipe]]
   [error
    ["[0]" try]]
   [concurrency
    ["[0]" atom]]
   [data
    ["[0]" product]]
   [macro
    ["[0]" template]]
   ["[0]" type]
   [meta
    ["[0]" code]
    ["[0]" name]]
   [test
    ["_" property (.only Test)]]]]
 [////
  [analysis
   ["_[0]" primitive]]]
 [\\
  ["[0]" / (.only)
   ["///[1]" ////
    [analysis
     ["[1][0]" scope]
     ["[1][0]" type]]
    [////
     ["[0]" phase]
     [meta
      ["[0]" archive]]]]]])

(template.with [<name> <success> <failure>]
  [(the (<name> procedure params output_type)
     (-> Text (List Code) Type Bit)
     (|> (////scope.with_scope ""
           (////type.with_type output_type
             (_primitive.phase archive.empty (` ((, (code.text procedure)) (,* params))))))
         (phase.value _primitive.state)
         (pipe.when
           {try.#Success _}
           <success>

           {try.#Failure _}
           <failure>)))]

  [check_success+ true false]
  [check_failure+ false true]
  )

(the primitive
  (Random [Type Code])
  (r.only (|>> product.left (same? Any) not) _primitive.primitive))

(the lux
  Test
  (do r.monad
    [[primT primC] ..primitive
     [antiT antiC] (|> ..primitive
                       (r.only (|>> product.left (type.= primT) not)))]
    (all _.and
         (_.test "Can test for reference equality."
           (check_success+ (` .is?#) (list primC primC) Bit))
         (_.test "Reference equality must be done with elements of the same type."
           (check_failure+ (` .is?#) (list primC antiC) Bit))
         (_.test "Can 'try' risky IO computations."
           (check_success+ (` .try#)
                           (list (` (.error# "YOLO")))
                           (type (Either Text primT))))
         )))

(the i64
  Test
  (do [! r.monad]
    [subjectC (|> r.natural (by ! each code.natural))
     signedC (|> r.integer (by ! each code.integer))
     paramC (|> r.natural (by ! each code.natural))]
    (all _.and
         (_.test "i64 'and'."
           (check_success+ (name .i64_and#) (list paramC subjectC) Natural))
         (_.test "i64 'or'."
           (check_success+ (name .i64_or#) (list paramC subjectC) Natural))
         (_.test "i64 'xor'."
           (check_success+ (name .i64_xor#) (list paramC subjectC) Natural))
         (_.test "i64 left-shift."
           (check_success+ (name .i64_left#) (list paramC subjectC) Natural))
         (_.test "i64 logical-right-shift."
           (check_success+ "lux i64 logical-right-shift" (list paramC subjectC) Natural))
         (_.test "i64 arithmetic-right-shift."
           (check_success+ "lux i64 arithmetic-right-shift" (list paramC signedC) Integer))
         (_.test "i64 equivalence."
           (check_success+ (name .i64_=#) (list paramC subjectC) Bit))
         (_.test "i64 addition."
           (check_success+ (name .i64_+#) (list paramC subjectC) Integer))
         (_.test "i64 subtraction."
           (check_success+ (name .i64_-#) (list paramC subjectC) Integer))
         )))

(the integer
  Test
  (do [! r.monad]
    [subjectC (|> r.integer (by ! each code.integer))
     paramC (|> r.integer (by ! each code.integer))]
    (all _.and
         (_.test "Can multiply integers."
           (check_success+ (name .int_*#) (list paramC subjectC) Integer))
         (_.test "Can divide integers."
           (check_success+ (name .int_/#) (list paramC subjectC) Integer))
         (_.test "Can calculate remainder of integers."
           (check_success+ (name .int_%#) (list paramC subjectC) Integer))
         (_.test "Can compare integers."
           (check_success+ (name .int_<#) (list paramC subjectC) Bit))
         (_.test "Can convert integer to text."
           (check_success+ (name .int_char#) (list subjectC) Text))
         (_.test "Can convert integer to decimal."
           (check_success+ (name .int_f64#) (list subjectC) Decimal))
         )))

(the decimal
  Test
  (do [! r.monad]
    [subjectC (|> r.unit_decimal (by ! each code.decimal))
     paramC (|> r.unit_decimal (by ! each code.decimal))]
    (all _.and
         (_.test "Can add decimal numbers."
           (check_success+ (name .f64_+#) (list paramC subjectC) Decimal))
         (_.test "Can subtract decimal numbers."
           (check_success+ (name .f64_-#) (list paramC subjectC) Decimal))
         (_.test "Can multiply decimal numbers."
           (check_success+ (name .f64_*#) (list paramC subjectC) Decimal))
         (_.test "Can divide decimal numbers."
           (check_success+ (name .f64_/#) (list paramC subjectC) Decimal))
         (_.test "Can calculate remainder of decimal numbers."
           (check_success+ (name .f64_%#) (list paramC subjectC) Decimal))
         (_.test "Can test equivalence of decimal numbers."
           (check_success+ (name .f64_=#) (list paramC subjectC) Bit))
         (_.test "Can compare decimal numbers."
           (check_success+ (name .f64_<#) (list paramC subjectC) Bit))
         (_.test "Can convert decimal number to integer."
           (check_success+ (name .f64_int#) (list subjectC) Integer))
         )))

(the text
  Test
  (do [! r.monad]
    [subjectC (|> (r.unicode 5) (by ! each code.text))
     paramC (|> (r.unicode 5) (by ! each code.text))
     replacementC (|> (r.unicode 5) (by ! each code.text))
     fromC (|> r.natural (by ! each code.natural))
     toC (|> r.natural (by ! each code.natural))]
    (all _.and
         (_.test "Can test text equivalence."
           (check_success+ (name .text_=#) (list paramC subjectC) Bit))
         (_.test "Compare texts in lexicographical order."
           (check_success+ (name .text_<#) (list paramC subjectC) Bit))
         (_.test "Can concatenate one text to another."
           (check_success+ (name .text_composite#) (list subjectC paramC) Text))
         (_.test "Can find the index of a piece of text inside a larger one that (may) contain it."
           (check_success+ (name .text_index#) (list fromC paramC subjectC) (type (Maybe Natural))))
         (_.test "Can query the size/length of a text."
           (check_success+ (name .text_size#) (list subjectC) Natural))
         (_.test "Can obtain the character code of a text at a given index."
           (check_success+ (name .text_char#) (list fromC subjectC) Natural))
         (_.test "Can clip a piece of text between 2 indices."
           (check_success+ (name .text_clip#) (list fromC toC subjectC) Text))
         )))

(the io
  Test
  (do [! r.monad]
    [logC (|> (r.unicode 5) (by ! each code.text))
     exitC (|> r.integer (by ! each code.integer))]
    (all _.and
         (_.test "Can log messages to standard output."
           (check_success+ (name .log!#) (list logC) Any))
         (_.test "Can throw a run-time error."
           (check_success+ (name .error#) (list logC) Nothing))
         )))

(the .public test
  Test
  (<| (_.context (name.module (name /._)))
      (all _.and
           ..lux
           ..i64
           ..integer
           ..decimal
           ..text
           ..io
           )))
