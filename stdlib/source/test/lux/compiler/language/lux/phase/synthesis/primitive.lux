... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except primitive)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" pipe]]
   [error
    ["[0]" try]]
   [data
    ["%" text/injection]
    [number
     [/64
      ["n" natural]]]
    [collection
     ["[0]" list]]]
   ["r" math/random (.only Random) (.use "[1]#[0]" monad)]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" name]]
   [test
    ["_" property (.only Test)]]]]
 [\\
  ["[0]" /
   ["/[1]" // (.only)
    ["/[1]" //
     [extension
      ["[1][0]" bundle]]
     ["/[1]" // (.only)
      ["[1][0]" analysis (.only Analysis)]
      ["[1][0]" synthesis (.only Synthesis)]
      [///
       ["[0]" phase]
       [meta
        ["[0]" archive]]]]]]]])

(the .public primitive
  (Random Analysis)
  (do r.monad
    [primitive (is (Random ////analysis.Primitive)
                   (all r.or
                        (pure [])
                        r.bit
                        r.natural
                        r.integer
                        r.revolution
                        r.decimal
                        (r.unicode 5)))]
    (pure {////analysis.#Primitive primitive})))

(the .public (corresponds? analysis synthesis)
  (-> Analysis Synthesis Bit)
  (`` (when [analysis synthesis]
        (,, (template.with [<analysis> <post_analysis> <synthesis> <post_synthesis>]
              [[{////analysis.#Primitive {<analysis> expected}}
                {////synthesis.#Primitive {<synthesis> actual}}]
               (same? (|> expected <post_analysis>)
                      (|> actual <post_synthesis>))]

              [[////analysis.#Unit (as Text) ////synthesis.#Text (|>)]
               [////analysis.#Bit  (|>) ////synthesis.#Bit (|>)]
               [////analysis.#Natural  .i64 ////synthesis.#I64 .i64]
               [////analysis.#Integer  .i64 ////synthesis.#I64 .i64]
               [////analysis.#Revolution  .i64 ////synthesis.#I64 .i64]
               [////analysis.#Decimal  (|>) ////synthesis.#F64 (|>)]
               [////analysis.#Text (|>) ////synthesis.#Text (|>)]]))

        [(////analysis.tuple expected)
         (////synthesis.tuple actual)]
        (and (n.= (list.size expected)
                  (list.size actual))
             (list.every? (function (_ [expected actual])
                            (corresponds? expected actual))
                          (list.zipped_2 expected actual)))
        
        _
        false)))

(the .public test
  Test
  (<| (_.context (name.as_text (name ////synthesis.#Primitive)))
      (`` (all _.and
               (,, (template.with [<analysis> <synthesis> <translator>]
                     [(do r.monad
                        [expected <translator>]
                        (_.test (name.as_text (name <synthesis>))
                          (|> {////analysis.#Primitive {<analysis> expected}}
                              (//.phase archive.empty)
                              (phase.value [///bundle.empty ////synthesis.init])
                              (pipe.when
                                {try.#Success {////synthesis.#Primitive {<synthesis> actual}}}
                                (same? expected actual)

                                _
                                false))))]

                     [[////analysis.#Unit ////synthesis.#Text (r#in ////synthesis.unit)]
                      [////analysis.#Bit ////synthesis.#Bit r.bit]
                      [////analysis.#Natural ////synthesis.#I64 (r#each .i64 r.natural)]
                      [////analysis.#Integer ////synthesis.#I64 (r#each .i64 r.integer)]
                      [////analysis.#Revolution ////synthesis.#I64 (r#each .i64 r.revolution)]
                      [////analysis.#Decimal ////synthesis.#F64 r.decimal]
                      [////analysis.#Text ////synthesis.#Text (r.unicode 5)]]))))))
