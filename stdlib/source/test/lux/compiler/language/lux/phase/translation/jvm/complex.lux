... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" io]]
   [error
    ["[0]" try]]
   [data
    ["[0]" maybe]
    ["[0]" text]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" /64]
     ["i[0]" /32
      ["[1]" integer]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" provenance]]
   [compiler
    [language
     [lux
      ["[0]" synthesis]]]
    [meta
     ["[0]" archive]]]
   [test
    ["_" property (.only Test)]]
   [target
    ["[0]" jvm
     ["[1]" bytecode]]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" // (.only)
    ["[0]" host]
    ["[0]" runtime]
    ["[0]" primitive]
    [///
     ["[0]" extension]
     [//
      ["[0]" phase]
      ["[0]" translation]]]]]])

(every Variant/3
  (Or Bit (I64 Any) Text))

(every Tuple/3
  (And Bit (I64 Any) Text))

(the .public lux
  Lux
  [.:info [.:target ""
           .:version ""
           .:mode {.:Build}
           .:configuration (list)]
   .:source [provenance.dummy 0 ""]
   .:provenance provenance.dummy
   .:current_module {.:None}
   .:modules (list)
   .:scopes (stack)
   .:type_context [.:there_exists 0
                   .:for_all (list)]
   .:expected {.:None}
   .:seed 0
   .:eval (as_expected [])])

(the test_of_runtime
  Test
  (<| (monad.let [! random.monad]
        [module (random.lower_cased 1)

         expected_bit random.bit
         expected_i64 random.i64
         expected_text (random.upper_cased 2)

         .let [extender (is extension.Extender
                            (function (_ _)
                              (undefined)))
               phase (//.translate extender ..lux)]

         lefts random.natural
         right? random.bit])
      (all _.and
           (_.coverage [runtime.variant
                        runtime.when
                        runtime.is_left
                        runtime.is_right]
             (|> (monad.let try.monad
                   [.let [[_ host] (io.value host.host)
                          state (is runtime.State
                                    (translation.state host module))]]
                   (<| (phase.value state)
                       (monad.let phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          _ runtime.translation
                          .let [lefts (|> lefts .integer i/32.of jvm.int)
                                right? (if right?
                                           runtime.is_right
                                           runtime.is_left)]]
                         (pure (when (by host evaluate [{.:None} (all jvm.composite
                                                                      lefts
                                                                      right?
                                                                      (primitive.i64 expected_i64)
                                                                      runtime.variant
                                                                      lefts
                                                                      right?
                                                                      runtime.when)])
                                 {try.:Success actual}
                                 (/64.= expected_i64 (as (-> Any I64) actual))
                                 
                                 {try.:Failure error}
                                 false)))))
                 (try.else false)))
           (_.coverage [runtime.left_of_tuple]
             (and (|> (monad.let try.monad
                        [.let [[_ host] (io.value host.host)
                               state (is runtime.State
                                         (translation.state host module))]]
                        (<| (phase.value state)
                            (monad.let phase.monad
                              [_ (translation.set_buffer translation.empty_buffer)
                               _ runtime.translation
                               it (/.tuple phase archive.empty
                                           (list (synthesis.bit provenance.dummy expected_bit)
                                                 (synthesis.i64 provenance.dummy expected_i64)
                                                 (synthesis.text provenance.dummy expected_text)))]
                              (pure (when (by host evaluate [{.:None} (all jvm.composite
                                                                           it
                                                                           (|> +0 i/32.of jvm.int)
                                                                           runtime.left_of_tuple)])
                                      {try.:Success actual}
                                      (bit.= expected_bit (as (-> Any Bit) actual))
                                      
                                      {try.:Failure error}
                                      false)))))
                      (try.else false))
                  (|> (monad.let try.monad
                        [.let [[_ host] (io.value host.host)
                               state (is runtime.State
                                         (translation.state host module))]]
                        (<| (phase.value state)
                            (monad.let phase.monad
                              [_ (translation.set_buffer translation.empty_buffer)
                               _ runtime.translation
                               it (/.tuple phase archive.empty
                                           (list (synthesis.bit provenance.dummy expected_bit)
                                                 (synthesis.i64 provenance.dummy expected_i64)
                                                 (synthesis.text provenance.dummy expected_text)))]
                              (pure (when (by host evaluate [{.:None} (all jvm.composite
                                                                           it
                                                                           (|> +1 i/32.of jvm.int)
                                                                           runtime.left_of_tuple)])
                                      {try.:Success actual}
                                      (/64.= expected_i64 (as (-> Any I64) actual))
                                      
                                      {try.:Failure error}
                                      false)))))
                      (try.else false))))
           (_.coverage [runtime.right_of_tuple]
             (and (|> (monad.let try.monad
                        [.let [[_ host] (io.value host.host)
                               state (is runtime.State
                                         (translation.state host module))]]
                        (<| (phase.value state)
                            (monad.let phase.monad
                              [_ (translation.set_buffer translation.empty_buffer)
                               _ runtime.translation
                               it (/.tuple phase archive.empty
                                           (list (synthesis.bit provenance.dummy expected_bit)
                                                 (synthesis.i64 provenance.dummy expected_i64)))]
                              (pure (when (by host evaluate [{.:None} (all jvm.composite
                                                                           it
                                                                           (|> +0 i/32.of jvm.int)
                                                                           runtime.right_of_tuple)])
                                      {try.:Success actual}
                                      (/64.= expected_i64 (as (-> Any I64) actual))
                                      
                                      {try.:Failure error}
                                      false)))))
                      (try.else false))
                  (|> (monad.let try.monad
                        [.let [[_ host] (io.value host.host)
                               state (is runtime.State
                                         (translation.state host module))]]
                        (<| (phase.value state)
                            (monad.let phase.monad
                              [_ (translation.set_buffer translation.empty_buffer)
                               _ runtime.translation
                               it (/.tuple phase archive.empty
                                           (list (synthesis.bit provenance.dummy expected_bit)
                                                 (synthesis.i64 provenance.dummy expected_i64)
                                                 (synthesis.text provenance.dummy expected_text)))]
                              (pure (when (by host evaluate [{.:None} (all jvm.composite
                                                                           it
                                                                           (|> +1 i/32.of jvm.int)
                                                                           runtime.right_of_tuple)])
                                      {try.:Success actual}
                                      (text.= expected_text (as (-> Any Text) actual))
                                      
                                      {try.:Failure error}
                                      false)))))
                      (try.else false))))
           (_.coverage [runtime.none]
             (|> (monad.let try.monad
                   [.let [[_ host] (io.value host.host)
                          state (is runtime.State
                                    (translation.state host module))]]
                   (<| (phase.value state)
                       (monad.let phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          _ runtime.translation]
                         (pure (when (by host evaluate [{.:None} runtime.none])
                                 {try.:Success actual}
                                 (by (maybe.equality text.equality) =
                                     {.:None}
                                     (as (-> Any (Maybe Text)) actual))
                                 
                                 {try.:Failure error}
                                 false)))))
                 (try.else false)))
           (_.coverage [runtime.some]
             (|> (monad.let try.monad
                   [.let [[_ host] (io.value host.host)
                          state (is runtime.State
                                    (translation.state host module))]]
                   (<| (phase.value state)
                       (monad.let phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          _ runtime.translation]
                         (pure (when (by host evaluate [{.:None} (all jvm.composite
                                                                      runtime.unit
                                                                      runtime.some)])
                                 {try.:Success actual}
                                 (by (maybe.equality text.equality) =
                                     {.:Some synthesis.unit}
                                     (as (-> Any (Maybe Text)) actual))
                                 
                                 {try.:Failure error}
                                 false)))))
                 (try.else false)))
           )))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [module (random.lower_cased 1)

         expected_bit random.bit
         expected_i64 random.i64
         expected_text (random.upper_cased 2)

         .let [extender (is extension.Extender
                            (function (_ _)
                              (undefined)))
               phase (//.translate extender ..lux)]])
      (all _.and
           (_.coverage [/.variant]
             (`` (and (,, (template.with [<lefts> <right?> <synthesis> <expected> <=>]
                            [(|> (monad.let try.monad
                                   [.let [[_ host] (io.value host.host)
                                          state (is runtime.State
                                                    (translation.state host module))]]
                                   (<| (phase.value state)
                                       (monad.let phase.monad
                                         [_ (translation.set_buffer translation.empty_buffer)
                                          _ runtime.translation
                                          it (/.variant phase archive.empty
                                                        [<lefts> <right?> (<synthesis> provenance.dummy <expected>)])]
                                         (pure (when (by host evaluate [{.:None} it])
                                                 {try.:Success actual}
                                                 (when (as (-> Any Variant/3) actual)
                                                   {<lefts> <right?> actual}
                                                   (<=> <expected> actual)

                                                   _
                                                   false)
                                                 
                                                 {try.:Failure error}
                                                 false)))))
                                 (try.else false))]

                            [[0 0b synthesis.bit expected_bit bit.=]
                             [1 0b synthesis.i64 expected_i64 /64.=]
                             [1 1b synthesis.text expected_text text.=]])))))
           (_.coverage [/.tuple]
             (|> (monad.let try.monad
                   [.let [[_ host] (io.value host.host)
                          state (is runtime.State
                                    (translation.state host module))]]
                   (<| (phase.value state)
                       (monad.let phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          it (/.tuple phase archive.empty
                                      (list (synthesis.bit provenance.dummy expected_bit)
                                            (synthesis.i64 provenance.dummy expected_i64)
                                            (synthesis.text provenance.dummy expected_text)))]
                         (pure (when (by host evaluate [{.:None} it])
                                 {try.:Success actual}
                                 (let [[actual_bit actual_i64 actual_text] (as (-> Any Tuple/3) actual)]
                                   (and (bit.= expected_bit actual_bit)
                                        (/64.= expected_i64 actual_i64)
                                        (text.= expected_text actual_text)))
                                 
                                 {try.:Failure error}
                                 false)))))
                 (try.else false)))

           ..test_of_runtime
           )))
