... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" io]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" /64]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" provenance]]
   [compiler
    [language
     [lux
      ["[0]" synthesis]]]
    [meta
     ["[0]" archive]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" // (.only)
    ["[0]" host]
    ["[0]" runtime]
    [///
     ["[0]" extension]
     [//
      ["[0]" phase]
      ["[0]" translation]]]]]])

(every Variant/3
  (Or Bit (I64 Any) Text))

(every Tuple/3
  (And Bit (I64 Any) Text))

(the .public lux
  Lux
  [.#info [.#target ""
           .#version ""
           .#mode {.#Build}
           .#configuration (list)]
   .#source [provenance.dummy 0 ""]
   .#provenance provenance.dummy
   .#current_module {.#None}
   .#modules (list)
   .#scopes (stack)
   .#type_context [.#ex_counter 0
                   .#var_counter 0
                   .#var_bindings (list)]
   .#expected {.#None}
   .#seed 0
   .#eval (as_expected [])])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [module (random.lower_cased 1)

         expected_bit random.bit
         expected_i64 random.i64
         expected_text (random.upper_cased 2)

         .let [extender (is extension.Extender
                            (function (_ _)
                              (undefined)))
               phase (//.translate extender ..lux)]])
      (all _.and
           (_.coverage [/.variant]
             (`` (and (,, (template.with [<lefts> <right?> <synthesis> <expected> <=>]
                            [(|> (monad.let try.monad
                                   [.let [[_ host] (io.value host.host)
                                          state (is runtime.State
                                                    (translation.state host module))]]
                                   (<| (phase.value state)
                                       (monad.let phase.monad
                                         [_ (translation.set_buffer translation.empty_buffer)
                                          _ runtime.translation
                                          it (/.variant phase archive.empty
                                                        [<lefts> <right?> (<synthesis> provenance.dummy <expected>)])]
                                         (pure (when (by host evaluate [{.#None} it])
                                                 {try.#Success actual}
                                                 (when (as (-> Any Variant/3) actual)
                                                   {<lefts> <right?> actual}
                                                   (<=> <expected> actual)

                                                   _
                                                   false)
                                                 
                                                 {try.#Failure error}
                                                 false)))))
                                 (try.else false))]

                            [[0 0b synthesis.bit expected_bit bit.=]
                             [1 0b synthesis.i64 expected_i64 /64.=]
                             [1 1b synthesis.text expected_text text.=]])))))
           (_.coverage [/.tuple]
             (|> (monad.let try.monad
                   [.let [[_ host] (io.value host.host)
                          state (is runtime.State
                                    (translation.state host module))]]
                   (<| (phase.value state)
                       (monad.let phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          it (/.tuple phase archive.empty
                                      (list (synthesis.bit provenance.dummy expected_bit)
                                            (synthesis.i64 provenance.dummy expected_i64)
                                            (synthesis.text provenance.dummy expected_text)))]
                         (pure (when (by host evaluate [{.#None} it])
                                 {try.#Success actual}
                                 (let [[actual_bit actual_i64 actual_text] (as (-> Any Tuple/3) actual)]
                                   (and (bit.= expected_bit actual_bit)
                                        (/64.= expected_i64 actual_i64)
                                        (text.= expected_text actual_text)))
                                 
                                 {try.#Failure error}
                                 false)))))
                 (try.else false)))
           )))
