... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try) (.use "[1]:[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    ["[0]" random]]
   ["[0]" macro]
   ["[0]" type (.only)
    ["[0]" check]]
   [meta
    ["[0]" code]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.only)
    [//
     ["[1][0]" extension (.only)
      ["[1]/[0]" analysis
       ["[1]" lux]]]
     [//
      ["[1][0]" analysis (.only)
       [evaluation (.only Eval)]
       ["[2][0]" macro]
       ["[2][0]" scope]
       ["[2][0]" module]
       ["[2][0]" coverage]
       ["[2][0]" type (.only)
        ["$[1]" \\test]]
       ["[2][0]" inference
        ["$[1]" \\test]]]
      [///
       ["[1][0]" phase (.use "[1]:[0]" monad)]
       [meta
        ["[0]" archive]]]]]]]])

(the (eval archive type term)
  Eval
  (//phase:pure []))

(the (expander macro inputs state)
  //macro.Expander
  {try.:Success ((macro.function macro) inputs state)})

(the analysis
  //analysis.Phase
  (//.phase ..expander))

(the test|tuple
  Test
  (monad.let [! random.monad]
    [lux $//type.random_state
     .let [state [//extension.:bundle (//extension/analysis.bundle ..eval)
                  //extension.:state lux]]
     module/0 (random.lower_cased 1)
     name/0 (by ! each (|>> [module/0]) (random.lower_cased 2))
     [input/0 simple/0] $//inference.simple_parameter
     [input/1 simple/1] $//inference.simple_parameter
     [input/2 simple/2] $//inference.simple_parameter
     $binding/0 (by ! each code.local (random.lower_cased 3))
     $binding/1 (by ! each code.local (random.lower_cased 4))
     $binding/2 (by ! each code.local (random.lower_cased 5))]
    (all _.and
         (_.coverage [/.tuple]
           (let [tuple? (is (-> Type Type Bit)
                            (function (_ :input: :expected:)
                              (and (|> :input:
                                       /.tuple
                                       (check.value check.fresh_context)
                                       (try:each (|>> product.right (type.= :expected:)))
                                       (try.else false))
                                   (|> (monad.let check.monad
                                         [[@var :var:] check.var
                                          _ (check.check :var: :input:)]
                                         (/.tuple :var:))
                                       (check.value check.fresh_context)
                                       (try:each (|>> product.right (type.= :expected:)))
                                       (try.else false)))))]
             (and (tuple? input/0
                          (type.anonymous input/0))
                  (tuple? (Tuple input/0 input/1 input/2)
                          (Tuple input/0 input/1 input/2))
                  (tuple? {.:Named name/0 (Tuple input/0 input/1 input/2)}
                          (Tuple input/0 input/1 input/2))
                  (tuple? (for_any (_ a b c) (Tuple input/0 input/1 input/2))
                          (Tuple (for_any (_ a b c) input/0)
                                 (for_any (_ a b c) input/1)
                                 (for_any (_ a b c) input/2)))
                  (tuple? (type ((for_any (_ a b c) (Tuple a b c)) input/0 input/1 input/2))
                          (Tuple input/0 input/1 input/2))
                  (|> (monad.let check.monad
                        [[@var :var:] check.var
                         _ (check.bind (for_any (_ a b c) (Tuple a b c)) @var)]
                        (/.tuple (type (:var: input/0 input/1 input/2))))
                      (check.value check.fresh_context)
                      (try:each (|>> product.right (type.= (Tuple input/0 input/1 input/2))))
                      (try.else false))
                  (|> (monad.let check.monad
                        [[@0 :0:] check.existential
                         [@1 :1:] check.existential
                         [_ :tuple:] (/.tuple (for_some (_ a b c) (Tuple a input/1 c)))
                         context check.context
                         _ (check.with context)
                         _ (check.check (Tuple :0: input/1 :1:) :tuple:)
                         _ (check.with context)
                         _ (check.check :tuple: (Tuple :0: input/1 :1:))]
                        (pure true))
                      (check.value check.fresh_context)
                      (try.else false)))))
         (_.coverage [/.non_tuple]
           (and (|> (monad.let check.monad
                      [[@var :var:] check.var
                       _ (/.tuple :var:)]
                      (pure false))
                    (check.value check.fresh_context)
                    (exception.else (text.contains? (its exception.:label /.non_tuple))))
                (|> (monad.let check.monad
                      [[@var :var:] check.var
                       _ (/.tuple (type (:var: input/0 input/1 input/2)))]
                      (pure false))
                    (check.value check.fresh_context)
                    (exception.else (text.contains? (its exception.:label /.non_tuple))))
                (|> (monad.let check.monad
                      [_ (/.tuple (type (input/0 input/1 input/2)))]
                      (pure false))
                    (check.value check.fresh_context)
                    (exception.else (text.contains? (its exception.:label /.non_tuple))))
                (|> (monad.let check.monad
                      [[@var :var:] check.var
                       _ (check.bind input/0 @var)
                       _ (/.tuple (type (:var: input/1 input/2)))]
                      (pure false))
                    (check.value check.fresh_context)
                    (exception.else (text.contains? (its exception.:label /.non_tuple))))))
         )))

(the (test|when lux [module/0 name/0] [input/0 simple/0] [input/1 simple/1] [input/2 simple/2] [$binding/0 $binding/1 $binding/2] [output/0 body/0] [output/1 body/1] [bit/0 natural/0])
  (-> Lux Name [Type Code] [Type Code] [Type Code] [Code Code Code] [Type Code] [Type Code] [Bit Natural] Bit)
  (let [state [//extension.:bundle (//extension/analysis.bundle ..eval)
               //extension.:state lux]
        when? (is (-> Code (Stack [Code Code]) Bit)
                  (function (_ input branches)
                    (|> (monad.let //phase.monad
                          [analysis (|> (/.when ..analysis branches archive.empty input)
                                        (//type.with output/0))]
                          (pure true))
                        //scope.with
                        (//module.with 0 module/0)
                        (//phase:each (|>> product.right product.right))
                        (//phase.value state)
                        (try.else false))))

        body_types_mismatch!
        (and (not (when? (code.bit bit/0) (stack [(` 0b) body/1]
                                                 [(` 1b) body/1])))
             (not (when? (code.bit bit/0) (stack [(` 0b) body/0]
                                                 [(` 1b) body/1]))))

        input_types_mismatch!
        (and (not (when? (code.natural natural/0) (stack [(` 0b) body/0]
                                                         [(` 1b) body/0])))
             (not (when? (code.bit bit/0) (stack [(code.natural natural/0) body/0]
                                                 [$binding/0 body/0]))))

        handles_singletons!
        (and (when? simple/0 (stack [(` [(, $binding/0)]) body/0]))
             (when? simple/0 (stack [(` [(, simple/0)]) body/0]
                                    [(` [(, $binding/0)]) body/0]))
             (when? (code.bit bit/0) (stack [(` [0b]) body/0]
                                            [(` [1b]) body/0])))

        can_infer_body!
        (|> (monad.let //phase.monad
              [[:actual: analysis] (|> (code.bit bit/0)
                                       (/.when ..analysis
                                         (stack [(` 0b) body/0]
                                                [(` 1b) body/0])
                                         archive.empty)
                                       //type.inferring)]
              (pure (type.= output/0 :actual:)))
            //scope.with
            (//module.with 0 module/0)
            (//phase:each (|>> product.right product.right))
            (//phase.value state)
            (try.else false))

        ensures_consistent_bodies!
        (|> (monad.let //phase.monad
              [[:actual: analysis] (|> (code.bit bit/0)
                                       (/.when ..analysis
                                         (stack [(` 0b) body/0]
                                                [(` 1b) body/1])
                                         archive.empty)
                                       //type.inferring)]
              (pure false))
            //scope.with
            (//module.with 0 module/0)
            (//phase:each (|>> product.right product.right))
            (//phase.value state)
            (try.else true))]
    (and body_types_mismatch!
         input_types_mismatch!
         handles_singletons!
         can_infer_body!
         ensures_consistent_bodies!

         (when? (` [])
                (stack [(` []) body/0]))
         (when? (` [])
                (stack [$binding/0 body/0]))

         (when? (code.bit bit/0) (stack [(` 0b) body/0]
                                        [(` 1b) body/0]))
         (when? (code.bit bit/0) (stack [(` 1b) body/0]
                                        [(` 0b) body/0]))

         (when? simple/0 (stack [$binding/0 body/0]))
         (when? simple/0 (stack [simple/0 body/0]
                                [$binding/0 body/0]))
         
         (when? (` [(, simple/0) (, simple/1) (, simple/2)])
                (stack [$binding/0 body/0]))
         (when? (` [(, simple/0) (, simple/1) (, simple/2)])
                (stack [(` [(, $binding/0) (, $binding/1)]) body/0]))
         (when? (` [(, simple/0) (, simple/1) (, simple/2)])
                (stack [(` [(, simple/0) (, simple/1) (, simple/2)]) body/0]
                       ... 000
                       [(` [(, $binding/0) (, simple/1) (, simple/2)]) body/0]
                       ... 001
                       [(` [(, simple/0) (, $binding/1) (, simple/2)]) body/0]
                       ... 010
                       [(` [(, $binding/0) (, $binding/1) (, simple/2)]) body/0]
                       ... 011
                       [(` [(, simple/0) (, simple/1) (, $binding/2)]) body/0]
                       ... 100
                       [(` [(, $binding/0) (, simple/1) (, $binding/2)]) body/0]
                       ... 101
                       [(` [(, simple/0) (, $binding/1) (, $binding/2)]) body/0]
                       ... 110
                       [(` [(, $binding/0) (, $binding/1) (, $binding/2)]) body/0]
                       ... 111
                       )))))

(the (test|redundancy lux [module/0 name/0] [input/0 simple/0] [input/1 simple/1] [input/2 simple/2] [$binding/0 $binding/1 $binding/2] [output/0 body/0] bit/0)
  (-> Lux Name [Type Code] [Type Code] [Type Code] [Code Code Code] [Type Code] Bit Bit)
  (let [state [//extension.:bundle (//extension/analysis.bundle ..eval)
               //extension.:state lux]
        redundant? (is (-> Code (Stack [Code Code]) Bit)
                       (function (_ input branches)
                         (|> (monad.let //phase.monad
                               [analysis (|> (/.when ..analysis branches archive.empty input)
                                             (//type.with output/0))]
                               (pure true))
                             //scope.with
                             (//module.with 0 module/0)
                             (//phase:each (|>> product.right product.right))
                             (//phase.value state)
                             (exception.else (text.contains? (its exception.:label //coverage.redundancy))))))]
    (and (redundant? (` [])
                     (stack [(` []) body/0]
                            [(` []) body/0]))
         (redundant? (` [])
                     (stack [$binding/0 body/0]
                            [$binding/0 body/0]))
         (redundant? (code.bit bit/0) (stack [(` 0b) body/0]
                                             [(` 1b) body/0]
                                             [(` 0b) body/0]))
         (redundant? (code.bit bit/0) (stack [(` 0b) body/0]
                                             [(` 1b) body/0]
                                             [(` 1b) body/0]))
         (redundant? (code.bit bit/0) (stack [(` 0b) body/0]
                                             [(` 1b) body/0]
                                             [$binding/0 body/0]))
         (redundant? simple/0 (stack [$binding/0 body/0]
                                     [$binding/0 body/0]))
         (redundant? simple/0 (stack [simple/0 body/0]
                                     [$binding/0 body/0]
                                     [$binding/0 body/0]))
         (redundant? simple/0 (stack [$binding/0 body/0]
                                     [simple/0 body/0]))
         (redundant? (` [(, simple/0) (, simple/1) (, simple/2)])
                     (stack [$binding/0 body/0]
                            [$binding/0 body/0]))
         (redundant? (` [(, simple/0) (, simple/1) (, simple/2)])
                     (stack [(` [(, $binding/0) (, $binding/1)]) body/0]
                            [(` [(, $binding/0) (, $binding/1)]) body/0]))
         (redundant? (` [(, simple/0) (, simple/1) (, simple/2)])
                     (stack [(` [(, $binding/0) (, $binding/1)]) body/0]
                            [$binding/0 body/0]))
         (redundant? (` [(, simple/0) (, simple/1) (, simple/2)])
                     (stack [$binding/0 body/0]
                            [(` [(, $binding/0) (, $binding/1)]) body/0])))))

(the (test|variant lux [module/0 name/0] [input/0 simple/0] [input/1 simple/1] [input/2 simple/2] [$binding/0 $binding/1 $binding/2] [output/0 body/0] [output/1 body/1] [bit/0 natural/0])
  (-> Lux Name [Type Code] [Type Code] [Type Code] [Code Code Code] [Type Code] [Type Code] [Bit Natural] Bit)
  (let [state [//extension.:bundle (//extension/analysis.bundle ..eval)
               //extension.:state lux]
        
        tag/0 (code.as_text $binding/0)
        tag/1 (code.as_text $binding/1)
        tag/2 (code.as_text $binding/2)

        tags/* (stack tag/0 tag/1 tag/2)
        :variant: {.:Named [module/0 name/0] (type.variant (stack input/0 input/1 input/2))}

        tag/0 (code.name [module/0 tag/0])
        tag/1 (code.name [module/0 tag/1])
        tag/2 (code.name [module/0 tag/2])
        
        variant? (is (-> Code (Stack [Code Code]) Bit)
                     (function (_ input branches)
                       (|> (monad.let //phase.monad
                             [_ (//module.declare_labels false tags/* false :variant:)
                              analysis (|> (/.when ..analysis branches archive.empty input)
                                           (//type.with output/0))]
                             (pure true))
                           //scope.with
                           (//module.with 0 module/0)
                           (//phase:each (|>> product.right product.right))
                           (//phase.value state)
                           (try.else false))))

        can_bind!
        (and (variant? (` {(, tag/0) (, simple/0)})
                       (stack [$binding/0 body/0]))
             (variant? (` {(, tag/1) (, simple/1)})
                       (stack [$binding/0 body/0]))
             (variant? (` {(, tag/2) (, simple/2)})
                       (stack [$binding/0 body/0])))

        can_bind_variant!
        (variant? (` {(, tag/0) (, simple/0)})
                  (stack [(` {(, tag/0) (, $binding/0)}) body/0]
                         [(` {(, tag/1) (, $binding/1)}) body/0]
                         [(` {(, tag/2) (, $binding/2)}) body/0]))

        can_bind_sum!
        (variant? (` {(, tag/0) (, simple/0)})
                  (stack [(` {0b (, $binding/0)}) body/0]
                         [(` {1 0b (, $binding/1)}) body/0]
                         [(` {1 1b (, $binding/2)}) body/0]))

        can_check_exhaustiveness!
        (variant? (` {(, tag/0) (, simple/0)})
                  (stack [(` {(, tag/0) (, simple/0)}) body/0]
                         [(` {(, tag/0) (, $binding/0)}) body/0]

                         [(` {(, tag/1) (, simple/1)}) body/0]
                         [(` {(, tag/1) (, $binding/1)}) body/0]

                         [(` {(, tag/2) (, simple/2)}) body/0]
                         [(` {(, tag/2) (, $binding/2)}) body/0]))

        can_bind_partial_variant!
        (variant? (` {(, tag/0) (, simple/0)})
                  (stack [(` {(, tag/0) (, $binding/0)}) body/0]
                         [(` {1b (, $binding/1)}) body/0]))]
    (and can_bind!
         can_bind_variant!
         can_bind_sum!
         can_check_exhaustiveness!
         can_bind_partial_variant!
         )))

(the (test|record lux [module/0 name/0] [input/0 simple/0] [input/1 simple/1] [input/2 simple/2] [$binding/0 $binding/1 $binding/2] [output/0 body/0] [output/1 body/1] [bit/0 natural/0])
  (-> Lux Name [Type Code] [Type Code] [Type Code] [Code Code Code] [Type Code] [Type Code] [Bit Natural] Bit)
  (let [state [//extension.:bundle (//extension/analysis.bundle ..eval)
               //extension.:state lux]
        
        slot/0 (code.as_text $binding/0)
        slot/1 (code.as_text $binding/1)
        slot/2 (code.as_text $binding/2)

        slots/* (stack slot/0 slot/1 slot/2)
        :record: {.:Named [module/0 name/0] (type.tuple (stack input/0 input/1 input/2))}

        slot/0 (code.name [module/0 slot/0])
        slot/1 (code.name [module/0 slot/1])
        slot/2 (code.name [module/0 slot/2])
        
        record? (is (-> Code (Stack [Code Code]) Bit)
                    (function (_ input branches)
                      (|> (monad.let //phase.monad
                            [_ (//module.declare_labels true slots/* false :record:)
                             analysis (|> (/.when ..analysis branches archive.empty input)
                                          (//type.with output/0))]
                            (pure true))
                          //scope.with
                          (//module.with 0 module/0)
                          (//phase:each (|>> product.right product.right))
                          (//phase.value state)
                          (try.else false))))

        can_bind!
        (record? (` [(, slot/0) (, simple/0)
                     (, slot/1) (, simple/1)
                     (, slot/2) (, simple/2)])
                 (stack [$binding/0 body/0]))

        can_bind_record!
        (record? (` [(, slot/0) (, simple/0)
                     (, slot/1) (, simple/1)
                     (, slot/2) (, simple/2)])
                 (stack [(` [(, slot/0) (, $binding/0)
                             (, slot/1) (, $binding/1)
                             (, slot/2) (, $binding/2)]) body/0]))

        can_bind_tuple!
        (record? (` [(, slot/0) (, simple/0)
                     (, slot/1) (, simple/1)
                     (, slot/2) (, simple/2)])
                 (stack [(` [(, $binding/0) (, $binding/1) (, $binding/2)]) body/0]))

        can_deduce_record!
        (record? (` [(, simple/0)
                     (, simple/1)
                     (, simple/2)])
                 (stack [(` [(, slot/0) (, $binding/0)
                             (, slot/1) (, $binding/1)
                             (, slot/2) (, $binding/2)]) body/0]))

        can_check_exhaustiveness!
        (record? (` [(, slot/0) (, simple/0)
                     (, slot/1) (, simple/1)
                     (, slot/2) (, simple/2)])
                 (stack [(` [(, slot/0) (, simple/0)
                             (, slot/1) (, simple/1)
                             (, slot/2) (, simple/2)]) body/0]
                        ... 000
                        [(` [(, slot/0) (, $binding/0)
                             (, slot/1) (, simple/1)
                             (, slot/2) (, simple/2)]) body/0]
                        ... 001
                        [(` [(, slot/0) (, simple/0)
                             (, slot/1) (, $binding/1)
                             (, slot/2) (, simple/2)]) body/0]
                        ... 010
                        [(` [(, slot/0) (, $binding/0)
                             (, slot/1) (, $binding/1)
                             (, slot/2) (, simple/2)]) body/0]
                        ... 011
                        [(` [(, slot/0) (, simple/0)
                             (, slot/1) (, simple/1)
                             (, slot/2) (, $binding/2)]) body/0]
                        ... 100
                        [(` [(, slot/0) (, $binding/0)
                             (, slot/1) (, simple/1)
                             (, slot/2) (, $binding/2)]) body/0]
                        ... 101
                        [(` [(, slot/0) (, simple/0)
                             (, slot/1) (, $binding/1)
                             (, slot/2) (, $binding/2)]) body/0]
                        ... 110
                        [(` [(, slot/0) (, $binding/0)
                             (, slot/1) (, $binding/1)
                             (, slot/2) (, $binding/2)]) body/0]
                        ... 111
                        ))

        cannot_repeat_slot!
        (not (record? (` [(, slot/0) (, simple/0)
                          (, slot/1) (, simple/1)
                          (, slot/2) (, simple/2)])
                      (stack [(` [(, slot/0) (, $binding/0)
                                  (, slot/1) (, $binding/1)
                                  (, slot/2) (, $binding/2)
                                  (, slot/2) (, $binding/2)]) body/0])))

        cannot_omit_slot!
        (not (record? (` [(, slot/0) (, simple/0)
                          (, slot/1) (, simple/1)
                          (, slot/2) (, simple/2)])
                      (stack [(` [(, slot/0) (, $binding/0)
                                  (, slot/1) (, $binding/1)]) body/0])))

        can_bind_partial_tuple!
        (record? (` [(, slot/0) (, simple/0)
                     (, slot/1) (, simple/1)
                     (, slot/2) (, simple/2)])
                 (stack [(` [(, $binding/0) (, $binding/1)]) body/0]))]
    (and can_bind!
         can_bind_record!
         can_bind_tuple!
         can_deduce_record!
         can_check_exhaustiveness!
         cannot_repeat_slot!
         cannot_omit_slot!
         can_bind_partial_tuple!)))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [lux $//type.random_state
         .let [state [//extension.:bundle (//extension/analysis.bundle ..eval)
                      //extension.:state lux]]
         module/0 (random.lower_cased 1)
         name/0 (random.lower_cased 2)
         [input/0 simple/0] $//inference.simple_parameter
         [input/1 simple/1] $//inference.simple_parameter
         [input/2 simple/2] $//inference.simple_parameter
         [output/0 body/0] $//inference.simple_parameter
         [output/1 body/1] (random.only (|>> product.left (identical? output/0) not)
                                        $//inference.simple_parameter)
         $binding/0 (by ! each code.local (random.lower_cased 3))
         $binding/1 (by ! each code.local (random.lower_cased 4))
         $binding/2 (by ! each code.local (random.lower_cased 5))
         extension/0 (by ! each code.text (random.lower_cased 6))
         bit/0 random.bit
         natural/0 random.natural]
        (all _.and
             (_.coverage [/.when]
               (and (test|when lux [module/0 name/0] [input/0 simple/0] [input/1 simple/1] [input/2 simple/2] [$binding/0 $binding/1 $binding/2] [output/0 body/0] [output/1 body/1] [bit/0 natural/0])
                    (test|redundancy lux [module/0 name/0] [input/0 simple/0] [input/1 simple/1] [input/2 simple/1] [$binding/0 $binding/1 $binding/2] [output/0 body/0] [bit/0])
                    (test|variant lux [module/0 name/0] [input/0 simple/0] [input/1 simple/1] [input/2 simple/2] [$binding/0 $binding/1 $binding/2] [output/0 body/0] [output/1 body/1] [bit/0 natural/0])
                    (test|record lux [module/0 name/0] [input/0 simple/0] [input/1 simple/1] [input/2 simple/2] [$binding/0 $binding/1 $binding/2] [output/0 body/0] [output/1 body/1] [bit/0 natural/0])))
             (_.coverage [/.empty_branches]
               (|> (monad.let //phase.monad
                     [analysis (|> (/.when ..analysis (stack) archive.empty simple/0)
                                   (//type.with output/0))]
                     (pure false))
                   //scope.with
                   (//module.with 0 module/0)
                   (//phase:each (|>> product.right product.right))
                   (//phase.value state)
                   (exception.else (text.contains? (its exception.:label /.empty_branches)))))
             (_.coverage [/.non_exhaustive]
               (let [non_exhaustive? (is (-> (Stack [Code Code]) Bit)
                                         (function (_ branches)
                                           (|> (monad.let //phase.monad
                                                 [analysis (|> (/.when ..analysis branches archive.empty simple/0)
                                                               (//type.with output/0))]
                                                 (pure false))
                                               //scope.with
                                               (//module.with 0 module/0)
                                               (//phase:each (|>> product.right product.right))
                                               (//phase.value state)
                                               (exception.else (text.contains? (its exception.:label /.non_exhaustive))))))]
                 (and (non_exhaustive? (stack [simple/0 body/0]))
                      (not (non_exhaustive? (stack [simple/0 body/0]
                                                   [$binding/0 body/0]))))))
             (_.coverage [/.invalid]
               (let [invalid? (is (-> (Stack [Code Code]) Bit)
                                  (function (_ branches)
                                    (|> (monad.let //phase.monad
                                          [analysis (|> (/.when ..analysis branches archive.empty simple/0)
                                                        (//type.with output/0))]
                                          (pure false))
                                        //scope.with
                                        (//module.with 0 module/0)
                                        (//phase:each (|>> product.right product.right))
                                        (//phase.value state)
                                        (exception.else (text.contains? (its exception.:label /.invalid))))))]
                 (and (invalid? (stack [(` ((, extension/0) (, $binding/0) (, $binding/1) (, $binding/2)))
                                        body/0]))
                      (invalid? (stack [(` {(, extension/0) (, $binding/0) (, $binding/1) (, $binding/2)})
                                        body/0]))
                      (invalid? (stack [(` {[] (, $binding/0) (, $binding/1) (, $binding/2)})
                                        body/0])))))
             (_.coverage [/.sum_has_no_case]
               (let [tag/0 (code.as_text $binding/0)
                     tag/1 (code.as_text $binding/1)
                     tag/2 (code.as_text $binding/2)

                     tags/* (stack tag/0 tag/1 tag/2)
                     :variant: {.:Named [module/0 name/0] (type.variant (stack input/0 input/1 input/2))}

                     tag/0 (code.name [module/0 tag/0])
                     tag/1 (code.name [module/0 tag/1])
                     tag/2 (code.name [module/0 tag/2])]
                 (|> (monad.let //phase.monad
                       [_ (//module.declare_labels false tags/* false :variant:)
                        analysis (|> (` {(, tag/0) (, simple/0)})
                                     (/.when ..analysis
                                       (stack [(` {0b (, $binding/0)}) body/0]
                                              [(` {1 0b (, $binding/1)}) body/0]
                                              [(` {2 0b (, $binding/2)}) body/0]
                                              [(` {2 1b (, $binding/2)}) body/0])
                                       archive.empty)
                                     (//type.with output/0))]
                       (pure false))
                     //scope.with
                     (//module.with 0 module/0)
                     (//phase:each (|>> product.right product.right))
                     (//phase.value state)
                     (exception.else (text.contains? (its exception.:label /.sum_has_no_case))))))
             (_.coverage [/.mismatch]
               (let [slot/0 (code.as_text $binding/0)
                     slot/1 (code.as_text $binding/1)
                     slot/2 (code.as_text $binding/2)

                     slots/* (stack slot/0 slot/1 slot/2)
                     :record: {.:Named [module/0 name/0] (type.tuple (stack input/0 input/1 input/2))}

                     slot/0 (code.name [module/0 slot/0])
                     slot/1 (code.name [module/0 slot/1])
                     slot/2 (code.name [module/0 slot/2])]
                 (and (|> (monad.let //phase.monad
                            [analysis (|> (` (, simple/0))
                                          (/.when ..analysis
                                            (stack [(` {0b (, $binding/0)}) body/0]
                                                   [(` {1 0b (, $binding/1)}) body/0]
                                                   [(` {1 1b (, $binding/2)}) body/0])
                                            archive.empty)
                                          (//type.with output/0))]
                            (pure false))
                          //scope.with
                          (//module.with 0 module/0)
                          (//phase:each (|>> product.right product.right))
                          (//phase.value state)
                          (exception.else (text.contains? (its exception.:label /.mismatch))))
                      (|> (monad.let //phase.monad
                            [_ (//module.declare_labels true slots/* false :record:)
                             analysis (|> (` (, simple/0))
                                          (/.when ..analysis
                                            (stack [(` [(, slot/0) (, $binding/0)
                                                        (, slot/1) (, $binding/1)
                                                        (, slot/2) (, $binding/2)]) body/0])
                                            archive.empty)
                                          (//type.with output/0))]
                            (pure false))
                          //scope.with
                          (//module.with 0 module/0)
                          (//phase:each (|>> product.right product.right))
                          (//phase.value state)
                          (exception.else (text.contains? (its exception.:label /.mismatch)))))))
             
             ..test|tuple
             ))))
