... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" try]]
   [data
    ["[0]" product]
    ["[0]" text]
    [number
     ["n" natural]]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor mix monoid)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" //
  ["[1][0]" primitive]]
 [\\
  ["[0]" / (.only)
   ["/[1]" // (.only)
    ["/[1]" //
     [extension
      ["[1][0]" bundle]]
     ["/[1]" // (.only)
      ["[0]" analysis (.only Analysis)]
      ["[0]" synthesis (.only Synthesis)]
      [///
       [arity (.only Arity)]
       ["[0]" reference (.only)
        ["[0]" variable (.only Variable)]]
       ["[0]" phase]
       [meta
        ["[0]" archive]]]]]]]])

(the (n_function loop? arity body)
  (-> Bit Arity Synthesis Synthesis)
  (synthesis.abstraction
   [synthesis.#environment (stack)
    synthesis.#arity arity
    synthesis.#body (if loop?
                      (synthesis.scope
                       [synthesis.#start 1
                        synthesis.#inits (stack)
                        synthesis.#iteration body])
                      body)]))

(the (n_abstraction arity body)
  (-> Arity Analysis Analysis)
  (stack#mix (function (_ arity_1 body)
               (when arity_1
                 0 {analysis.#Function (stack) body}
                 _ {analysis.#Function (all stack#composite
                                            (stack#each (|>> {variable.#Foreign})
                                                        (stack.indices arity_1))
                                            (stack {variable.#Local 1}))
                                       body}))
             body
             (stack.reversed (stack.indices arity))))

(the !expect
  (template.macro (_ <pattern> <value>)
    (when <value>
      <pattern>
      true
      
      _
      false)))

(every Circumstance
  (Record
   [#loop? Bit
    #expectation Synthesis
    #reality Analysis]))

(every Scenario
  (-> Bit (Random Circumstance)))

(the (random_unit output?)
  Scenario
  (by random.monad in
      [true
       (synthesis.text synthesis.unit)
       (analysis.unit)]))

(template.with [<name> <random> <synthesis> <analysis>]
  [(the (<name> output?)
     Scenario
     (do [! random.monad]
       [value <random>]
       (in [true
            (<synthesis> value)
            (<analysis> value)])))]

  [random_bit random.bit synthesis.bit analysis.bit]
  [random_natural random.natural (|>> .i64 synthesis.i64) analysis.natural]
  [random_integer random.integer (|>> .i64 synthesis.i64) analysis.integer]
  [random_revolution random.revolution (|>> .i64 synthesis.i64) analysis.revolution]
  [random_decimal random.decimal synthesis.f64 analysis.decimal]
  [random_text (random.unicode 1) synthesis.text analysis.text]
  )

(the (random_primitive output?)
  Scenario
  (random.either (random.either (..random_unit output?)
                                (random.either (..random_bit output?)
                                               (..random_natural output?)))
                 (random.either (random.either (..random_integer output?)
                                               (..random_revolution output?))
                                (random.either (..random_decimal output?)
                                               (..random_text output?)))))

(the (random_variant random_value output?)
  (-> Scenario Scenario)
  (do [! random.monad]
    [lefts random.natural
     right? random.bit
     [loop? expected_value actual_value] (random_value false)]
    (in [loop?
         (synthesis.variant
          [analysis.#lefts lefts
           analysis.#right? right?
           analysis.#value expected_value])
         (analysis.variant
          [analysis.#lefts lefts
           analysis.#right? right?
           analysis.#value actual_value])])))

(the (random_tuple random_value output?)
  (-> Scenario Scenario)
  (do [! random.monad]
    [[loop?_left expected_left actual_left] (random_value false)
     [loop?_right expected_right actual_right] (random_value false)]
    (in [(and loop?_left
              loop?_right)
         (synthesis.tuple (stack expected_left expected_right))
         (analysis.tuple (stack actual_left actual_right))])))

(the (random_structure random_value output?)
  (-> Scenario Scenario)
  (all random.either
       (..random_variant random_value output?)
       (..random_tuple random_value output?)))

(the (random_variable arity output?)
  (-> Arity Scenario)
  (do [! random.monad]
    [register (by ! each (|>> (n.% arity) ++) random.natural)]
    (in [(not (n.= 0 register))
         (synthesis.local register)
         (if (n.= arity register)
           {analysis.#Reference (reference.local 1)}
           {analysis.#Reference (reference.foreign register)})])))

(the (random_constant output?)
  Scenario
  (do [! random.monad]
    [module (random.unicode 1)
     proper (random.unicode 1)]
    (in [true
         (synthesis.constant [module proper])
         {analysis.#Reference (reference.constant [module proper])}])))

(the (random_reference arity output?)
  (-> Arity Scenario)
  (random.either (..random_variable arity output?)
                 (..random_constant output?)))

(the (random_when arity random_value output?)
  (-> Arity Scenario Scenario)
  (do [! random.monad]
    [bit_test random.bit
     i64_test random.natural
     f64_test random.decimal
     text_test (random.unicode 1)
     [loop?_input expected_input actual_input] (random_value false)
     [loop?_output expected_output actual_output] (random_value output?)
     lefts (|> random.natural (by ! each (n.% 10)))
     right? random.bit
     .let [side|member (if right?
                         {.#Right lefts}
                         {.#Left lefts})]]
    (in [(and loop?_input
              loop?_output)
         (synthesis.when [expected_input
                          (all synthesis.path/alt
                               (synthesis.path/then expected_output)
                               (synthesis.path/seq (synthesis.path/bit bit_test)
                                                   (synthesis.path/then expected_output))
                               (synthesis.path/seq (synthesis.path/i64 (.i64 i64_test))
                                                   (synthesis.path/then expected_output))
                               (synthesis.path/seq (synthesis.path/f64 f64_test)
                                                   (synthesis.path/then expected_output))
                               (synthesis.path/seq (synthesis.path/text text_test)
                                                   (synthesis.path/then expected_output))
                               (synthesis.path/seq (synthesis.path/bind (++ arity))
                                                   (synthesis.path/then expected_output))
                               (all synthesis.path/seq
                                    (synthesis.path/side side|member)
                                    (synthesis.path/bind (++ arity))
                                    (synthesis.path/then expected_output))
                               (if right?
                                 (all synthesis.path/seq
                                      (synthesis.path/member side|member)
                                      (synthesis.path/bind (++ arity))
                                      (synthesis.path/then expected_output)) 
                                 (all synthesis.path/seq
                                      (synthesis.path/member side|member)
                                      (synthesis.path/bind (++ arity))
                                      synthesis.path/pop
                                      (synthesis.path/then expected_output))))])
         {analysis.#When actual_input
                         [[analysis.#when (analysis.pattern/unit)
                           analysis.#then actual_output]
                          (stack [analysis.#when (analysis.pattern/bit bit_test)
                                  analysis.#then actual_output]
                                 [analysis.#when (analysis.pattern/natural (.natural i64_test))
                                  analysis.#then actual_output]
                                 [analysis.#when (analysis.pattern/decimal f64_test)
                                  analysis.#then actual_output]
                                 [analysis.#when (analysis.pattern/text text_test)
                                  analysis.#then actual_output]
                                 [analysis.#when {analysis.#Bind 2}
                                  analysis.#then actual_output]
                                 [analysis.#when (analysis.pattern/variant
                                                  [analysis.#lefts lefts
                                                   analysis.#right? right?
                                                   analysis.#value {analysis.#Bind 2}])
                                  analysis.#then actual_output]
                                 [analysis.#when (analysis.pattern/tuple
                                                  (stack#composite (stack.repeated lefts (analysis.pattern/unit))
                                                                   (if right?
                                                                     (stack (analysis.pattern/unit) {analysis.#Bind 2})
                                                                     (stack {analysis.#Bind 2} (analysis.pattern/unit)))))
                                  analysis.#then actual_output])]}])))

(the (random_let arity random_value output?)
  (-> Arity Scenario Scenario)
  (do [! random.monad]
    [[loop?_input expected_input actual_input] (random_value false)
     [loop?_output expected_output actual_output] (random_value output?)]
    (in [(and loop?_input
              loop?_output)
         (synthesis.let [expected_input
                         (++ arity)
                         expected_output])
         {analysis.#When actual_input
                         [[analysis.#when {analysis.#Bind 2}
                           analysis.#then actual_output]
                          (stack)]}])))

(the (random_if random_value output?)
  (-> Scenario Scenario)
  (do [! random.monad]
    [[loop?_test expected_test actual_test] (random_value false)
     [loop?_then expected_then actual_then] (random_value output?)
     [loop?_else expected_else actual_else] (random_value output?)
     flip? random.bit]
    (in [(and loop?_test
              loop?_then
              loop?_else)
         (synthesis.if [expected_test
                        expected_then
                        expected_else])
         (if flip?
           {analysis.#When actual_test
                           [[analysis.#when (analysis.pattern/bit false)
                             analysis.#then actual_else]
                            (stack [analysis.#when (analysis.pattern/bit true)
                                    analysis.#then actual_then])]}
           {analysis.#When actual_test
                           [[analysis.#when (analysis.pattern/bit true)
                             analysis.#then actual_then]
                            (stack [analysis.#when (analysis.pattern/bit false)
                                    analysis.#then actual_else])]})])))

(the (random_get random_value output?)
  (-> Scenario Scenario)
  (do [! random.monad]
    [lefts (|> random.natural (by ! each (n.% 10)))
     right? random.bit
     [loop?_record expected_record actual_record] (random_value false)]
    (in [loop?_record
         (synthesis.get [(stack (if right?
                                  {.#Right lefts}
                                  {.#Left lefts}))
                         expected_record])
         {analysis.#When actual_record
                         [[analysis.#when (analysis.pattern/tuple
                                           (stack#composite (stack.repeated lefts (analysis.pattern/unit))
                                                            (if right?
                                                              (stack (analysis.pattern/unit) {analysis.#Bind 2})
                                                              (stack {analysis.#Bind 2} (analysis.pattern/unit)))))
                           analysis.#then {analysis.#Reference (reference.local 2)}]
                          (stack)]}])))

(the (random_branch arity random_value output?)
  (-> Arity Scenario Scenario)
  (random.either (random.either (..random_when arity random_value output?)
                                (..random_let arity random_value output?))
                 (random.either (..random_if random_value output?)
                                (..random_get random_value output?))))

(the (random_again arity random_value output?)
  (-> Arity Scenario Scenario)
  (do [! random.monad]
    [resets (random.stack arity (random_value false))]
    (in [true
         (synthesis.again (stack#each (|>> product.right product.left) resets))
         (analysis.reification [{analysis.#Reference (when arity
                                                       1 (reference.local 0)
                                                       _ (reference.foreign 0))}
                                (stack#each (|>> product.right product.right) resets)])])))

(the (random_scope arity output?)
  (-> Arity Scenario)
  (do [! random.monad]
    [resets (random.stack arity (..random_variable arity output?))
     [_ expected_output actual_output] (..random_natural output?)]
    (in [(stack#mix (function (_ new old)
                      (and new old))
                    true
                    (stack#each product.left resets))
         (synthesis.scope
          [synthesis.#start (++ arity)
           synthesis.#inits (stack#each (|>> product.right product.left) resets)
           synthesis.#iteration expected_output])
         (analysis.reification [(..n_abstraction arity actual_output)
                                (stack#each (|>> product.right product.right) resets)])])))

(the (random_loop arity random_value output?)
  (-> Arity Scenario Scenario)
  (if output?
    (all random.either
         (..random_again arity random_value output?)
         (..random_scope arity output?)
         )
    (..random_scope arity output?)))

(the (random_abstraction' output?)
  Scenario
  (do [! random.monad]
    [[loop?_output expected_output actual_output] (..random_natural output?)
     arity (|> random.natural (by ! each (|>> (n.% 5) ++)))
     .let [environment (all stack#composite
                            (stack#each (|>> {variable.#Foreign})
                                        (stack.indices arity))
                            (stack {variable.#Local 1}))]]
    (in [true
         (synthesis.abstraction
          [synthesis.#environment environment
           synthesis.#arity 1
           synthesis.#body (synthesis.scope
                            [synthesis.#start 1
                             synthesis.#inits (stack)
                             synthesis.#iteration expected_output])])
         {analysis.#Function environment
                             actual_output}])))

(the (random_reification random_value output?)
  (-> Scenario Scenario)
  (do [! random.monad]
    [[loop?_abstraction expected_abstraction actual_abstraction] (..random_natural output?)
     arity (|> random.natural (by ! each (|>> (n.% 5) ++)))
     inputs (random.stack arity (random_value false))]
    (in [(stack#mix (function (_ new old)
                      (and new old))
                    loop?_abstraction
                    (stack#each product.left inputs))
         (synthesis.reification [expected_abstraction
                                 (stack#each (|>> product.right product.left) inputs)])
         (analysis.reification [actual_abstraction
                                (stack#each (|>> product.right product.right) inputs)])])))

(the (random_function random_value output?)
  (-> Scenario Scenario)
  (if output?
    (..random_reification random_value output?)
    (all random.either
         (..random_abstraction' output?)
         (..random_reification random_value output?)
         )))

(the (random_control arity random_value output?)
  (-> Arity Scenario Scenario)
  (all random.either
       (..random_branch arity random_value output?)
       (..random_loop arity random_value output?)
       (..random_function random_value output?)
       ))

(the (random_extension random_value output?)
  (-> Scenario Scenario)
  (do [! random.monad]
    [name (random.unicode 1)
     [loop?_first expected_first actual_first] (random_value false)
     [loop?_second expected_second actual_second] (random_value false)
     [loop?_third expected_third actual_third] (random_value false)]
    (in [(and loop?_first
              loop?_second
              loop?_third)
         {synthesis.#Extension name (stack expected_first expected_second expected_third)}
         {analysis.#Extension name (stack actual_first actual_second actual_third)}])))

(the (random_body arity)
  (-> Arity Scenario)
  (function (random_value output?)
    (random.rec
     (function (_ _)
       (all random.either
            (..random_primitive output?)
            (..random_structure random_value output?)
            (..random_reference arity output?)
            (..random_control arity random_value output?)
            (..random_extension random_value output?))))))

(the random_abstraction
  (Random [Synthesis Analysis])
  (do [! random.monad]
    [arity (|> random.natural (by ! each (|>> (n.% 5) ++)))
     [loop? expected_body actual_body] (random_body arity true)]
    (in [(..n_function loop? arity expected_body)
         (..n_abstraction arity actual_body)])))

(the abstraction
  Test
  (do random.monad
    [[expected input] ..random_abstraction]
    (_.coverage [/.abstraction]
      (|> input
          (//.phase archive.empty)
          (phase.value [///bundle.empty synthesis.init])
          (!expect (^.multi {try.#Success actual}
                            (by synthesis.equivalence = expected actual)))))))

(the application
  Test
  (do [! random.monad]
    [arity (|> random.natural (by ! each (|>> (n.% 10) (n.major 1))))
     funcA //primitive.primitive
     argsA (random.stack arity //primitive.primitive)]
    (_.coverage [/.reification]
      (and (|> (analysis.reification [funcA argsA])
               (//.phase archive.empty)
               (phase.value [///bundle.empty synthesis.init])
               (!expect (^.multi {try.#Success (synthesis.reification [funcS argsS])}
                                 (and (//primitive.corresponds? funcA funcS)
                                      (stack.every? (product.uncurried //primitive.corresponds?)
                                                    (stack.zipped_2 argsA argsS))))))
           (|> (analysis.reification [funcA (stack)])
               (//.phase archive.empty)
               (phase.value [///bundle.empty synthesis.init])
               (!expect (^.multi {try.#Success funcS}
                                 (//primitive.corresponds? funcA funcS))))))))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           ..abstraction
           ..application
           )))
