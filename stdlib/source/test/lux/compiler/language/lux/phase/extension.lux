... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [control
    ["[0]" pipe]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" dictionary]
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [/////
    ["[0]" phase]
    [meta
     ["[0]" archive]]]]])

(the .public random
  (Random (/.Extension Natural))
  (all random.and
       (random.lower_cased 5)
       (random.list 2 random.natural)
       ))

(the test|state
  Test
  (monad.let [! random.monad]
    [state random.integer
     dummy (random.only (|>> (i.= state) not)
                        random.integer)]
    (all _.and
         (_.coverage [/.read]
           (|> (is (/.Operation Integer Natural Natural Text)
                   (/.read %.integer))
               (by phase.functor each (text.= (%.integer state)))
               (phase.value [/.#bundle /.empty
                             /.#state state])
               (try.else false)))
         (_.coverage [/.update]
           (|> (is (/.Operation Integer Natural Natural Text)
                   (monad.let phase.monad
                     [_ (/.update ++)]
                     (/.read %.integer)))
               (by phase.functor each (text.= (%.integer (++ state))))
               (phase.value [/.#bundle /.empty
                             /.#state state])
               (try.else false)))
         (_.coverage [/.temporary]
           (|> (is (/.Operation Integer Natural Natural Text)
                   (monad.let phase.monad
                     [|state'| (/.temporary ++ (/.read %.integer))
                      |state| (/.read %.integer)]
                     (pure (text |state'| " " |state|))))
               (by phase.functor each (text.= (text (%.integer (++ state)) " " (%.integer state))))
               (phase.value [/.#bundle /.empty
                             /.#state state])
               (try.else false)))
         (_.coverage [/.localized]
           (|> (is (/.Operation Integer Natural Natural Text)
                   (monad.let phase.monad
                     [|state| (/.localized %.integer
                                           (function (_ _ old) (++ old))
                                           (text.enclosed ["<" ">"])
                                           (/.read %.integer))
                      |state'| (/.read %.integer)]
                     (pure (text |state'| " " |state|))))
               (by phase.functor each (text.= (text (%.integer (i.+ +2 state))
                                                    " " (%.integer (i.+ +1 state)))))
               (phase.value [/.#bundle /.empty
                             /.#state state])
               (try.else false))))
    ))

(the extender
  /.Extender
  (|>> as_expected))

(the handler/0
  (/.Handler Integer Natural Natural)
  (function (_ @self phase archive inputs)
    (by phase.monad pure (list#mix n.+ 0 inputs))))

(the handler/1
  (/.Handler Integer Natural Natural)
  (function (_ @self phase archive inputs)
    (by phase.monad pure (list#mix n.x 1 inputs))))

(the test|name
  Test
  (monad.let [! random.monad]
    [state random.integer
     extension (random.lower_cased 1)
     left random.natural
     right random.natural]
    (all _.and
         (_.coverage [/.cannot_overwrite]
           (|> (monad.let phase.monad
                 [_ (/.install extender extension handler/0)]
                 (/.install extender extension handler/1))
               (phase.value [/.#bundle /.empty
                             /.#state state])
               (pipe.when
                 {try.#Failure error}
                 (exception.is? /.cannot_overwrite error)

                 _
                 false)))
         (_.coverage [/.unknown]
           (|> (/.reification archive.empty (function (_ archive input)
                                              (by phase.monad pure (++ input)))
                              [extension (list left right)])
               (phase.value [/.#bundle /.empty
                             /.#state state])
               (pipe.when
                 {try.#Failure error}
                 (exception.is? /.unknown error)

                 _
                 false)))
         )))

(the test|bundle
  Test
  (let [phase (is (/.Phase Integer Natural Natural)
                  (function (_ archive input)
                    (by phase.monad pure (++ input))))]
    (monad.let [! random.monad]
      [state random.integer

       extension (random.lower_cased 1)
       left random.natural
       right random.natural]
      (all _.and
           (_.coverage [/.empty]
             (dictionary.empty? /.empty))
           (<| (_.for [/.Extender /.Handler])
               (all _.and
                    (_.coverage [/.install /.reification]
                      (|> (monad.let phase.monad
                            [_ (/.install extender extension handler/0)]
                            (/.reification archive.empty phase [extension (list left right)]))
                          (by phase.functor each (n.= (n.+ left right)))
                          (phase.value [/.#bundle /.empty
                                        /.#state state])
                          (try.else false)))
                    (_.coverage [/.Phase]
                      (let [handler (is (/.Handler Integer Natural Natural)
                                        (function (_ @self phase archive inputs)
                                          (let [! phase.monad]
                                            (|> inputs
                                                (list.each' ! (phase archive))
                                                (by ! each (list#mix n.+ 0))))))]
                        (|> (monad.let phase.monad
                              [_ (/.install extender extension handler)]
                              (/.reification archive.empty phase [extension (list left right)]))
                            (by phase.functor each (n.= (n.+ (++ left) (++ right))))
                            (phase.value [/.#bundle /.empty
                                          /.#state state])
                            (try.else false))))
                    (_.coverage [/.with]
                      (|> (monad.let phase.monad
                            [_ (/.with extender (dictionary.of_list text.hash (list [extension handler/1])))]
                            (/.reification archive.empty (function (_ archive input)
                                                           (by phase.monad pure (++ input)))
                                           [extension (list left right)]))
                          (by phase.functor each (n.= (n.x left right)))
                          (phase.value [/.#bundle /.empty
                                        /.#state state])
                          (try.else false)))
                    (_.for [/.Name]
                           ..test|name)
                    ))
           ))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Extension])
      (monad.let [! random.monad]
        [state random.integer
         dummy (random.only (|>> (i.= state) not)
                            random.integer)
         expected random.natural
         expected_error (random.lower_cased 1)]
        (all _.and
             (_.for [/.equivalence]
                    (equivalenceT.spec (/.equivalence n.equivalence) ..random))
             (_.for [/.hash]
                    (hashT.spec (/.hash n.hash) ..random))
             
             (<| (_.for [/.Operation])
                 (all _.and
                      (_.coverage [/.lifted]
                        (and (|> (is (/.Operation Integer Natural Natural Natural)
                                     (/.lifted (monad.let phase.monad
                                                 []
                                                 (pure expected))))
                                 (by phase.functor each (same? expected))
                                 (phase.value [/.#bundle /.empty
                                               /.#state state])
                                 (try.else false))
                             (|> (is (/.Operation Integer Natural Natural Natural)
                                     (/.lifted (phase.of_try {try.#Failure expected_error})))
                                 (phase.value [/.#bundle /.empty
                                               /.#state state])
                                 (pipe.when
                                   {try.#Failure actual_error}
                                   (same? expected_error actual_error)

                                   _
                                   false))))
                      (_.coverage [/.up]
                        (|> (monad.let phase.monad
                              []
                              (pure expected))
                            (is (/.Operation Integer Natural Natural Natural))
                            /.up
                            (is (phase.Operation Integer Natural))
                            (by phase.functor each (same? expected))
                            (phase.value state)
                            (try.else false)))
                      ))
             (_.for [/.State]
                    ..test|state)
             (_.for [/.Bundle]
                    ..test|bundle)
             ))))
