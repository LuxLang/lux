... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equality
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [control
    ["[0]" pipe]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" dictionary]
     ["[0]" list (.use "[1]:[0]" mix)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [test
    ["_" property (.only Test)]]
   [compiler
    ["@[0]" type]]]]
 [\\library
  ["[0]" / (.only)
   [///
    ["[0]" phase]
    [///
     [meta
      ["[0]" archive]]]]]])

(the .public random
  (Random (@type.Extension Natural))
  (all random.and
       (random.and (random.upper_cased 5)
                   (random.lower_cased 5))
       (random.list 2 random.natural)
       ))

(the extender
  /.Extender
  (|>> as_expected))

(the handler/0
  (/.Handler Integer Natural Natural)
  (function (_ phase archive inputs)
    (by phase.monad pure (list:mix n.+ 0 inputs))))

(the handler/1
  (/.Handler Integer Natural Natural)
  (function (_ phase archive inputs)
    (by phase.monad pure (list:mix n.x 1 inputs))))

(the test|bundle
  Test
  (let [phase (is (phase.Phase Integer Natural Natural)
                  (function (_ archive input)
                    (by phase.monad pure (++ input))))]
    (monad.let [! random.monad]
      []
      (all _.and
           (_.coverage [/.empty]
             (dictionary.empty? /.empty))
           ))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [@type.Extension
              @type.:name @type.:parameters])
      (monad.let [! random.monad]
        []
        (all _.and
             (_.for [/.equality]
                    (equalityT.spec (/.equality n.equality) ..random))
             (_.for [/.hash]
                    (hashT.spec (/.hash n.hash) ..random))
             
             (_.for [/.Bundle]
                    ..test|bundle)
             ))))
