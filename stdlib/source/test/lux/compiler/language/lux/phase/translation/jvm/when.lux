... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" io]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]]
   [data
    [collection
     ["[0]" list (.use "[1]:[0]" monoid functor)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" /64 (.only)
      ["n" natural]]]]
   [compiler
    [meta
     ["[0]" archive]]]
   [test
    ["_" property (.only Test)]]
   [target
    ["[0]" jvm
     ["[1]" bytecode]]]
   [logic
    ["[0]" bit]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" // (.only)
    ["[0]" host]
    ["[0]" runtime]
    ["[0]" primitive]
    [///
     ["[0]" extension]
     [//
      ["[0]" phase]
      ["[0]" translation]
      ["[0]" synthesis (.only)
       ["[0]" access (.only)
        ["[0]" member (.only Member)]
        ["[0]" side (.only Side)]]]]]]]]
 [//
  ["[0]T" complex]])

(the if_test
  Test
  (monad.let [! random.monad]
    [module (random.lower_cased 1)

     expected_bit random.bit
     expected_i64 random.i64
     dummy_i64 (random.only (|>> (/64.= expected_i64) not)
                            random.i64)

     .let [extender (is extension.Extender
                        (function (_ _)
                          (undefined)))
           next (//.translate extender complexT.lux)
           @ [module 0 0]]]
    (_.coverage [/.if]
      (|> (monad.let try.monad
            [[_ archive] (archive.reserve "" archive.empty)
             [_ archive] (archive.reserve module archive)
             .let [[_ host] (io.value host.host)
                   state (is runtime.State
                             (translation.state host module))
                   [then else] (if expected_bit
                                   [expected_i64 dummy_i64]
                                   [dummy_i64 expected_i64])]]
            (<| (phase.value state)
                (monad.let phase.monad
                  [_ (translation.set_buffer translation.empty_buffer)
                   it (/.if next archive
                            [(synthesis.bit @ expected_bit)
                             (synthesis.i64 @ then)
                             (synthesis.i64 @ else)])]
                  (pure (|> it
                            [{.:None}]
                            (by host evaluate)
                            (try:each (|>> (as (-> Any I64))
                                           (/64.= expected_i64)))
                            (try.else false))))))
          (try.else false)))))

(the exec_test
  Test
  (monad.let [! random.monad]
    [module (random.lower_cased 1)

     expected_bit random.bit
     expected_i64 random.i64
     dummy_i64 (random.only (|>> (/64.= expected_i64) not)
                            random.i64)

     .let [extender (is extension.Extender
                        (function (_ _)
                          (undefined)))
           next (//.translate extender complexT.lux)
           @ [module 0 0]]]
    (_.coverage [/.exec]
      (|> (monad.let try.monad
            [[_ archive] (archive.reserve "" archive.empty)
             [_ archive] (archive.reserve module archive)
             .let [[_ host] (io.value host.host)
                   state (is runtime.State
                             (translation.state host module))]]
            (<| (phase.value state)
                (monad.let phase.monad
                  [_ (translation.set_buffer translation.empty_buffer)
                   it (/.exec next archive
                        [(synthesis.i64 @ dummy_i64)
                         (synthesis.i64 @ expected_i64)])]
                  (pure (|> it
                            [{.:None}]
                            (by host evaluate)
                            (try:each (|>> (as (-> Any I64))
                                           (/64.= expected_i64)))
                            (try.else false))))))
          (try.else false)))))

(the let_test
  Test
  (monad.let [! random.monad]
    [module (random.lower_cased 1)

     expected_i64 random.i64
     register (by ! each (n.% 10) random.natural)

     .let [extender (is extension.Extender
                        (function (_ _)
                          (undefined)))
           next (//.translate extender complexT.lux)
           @ [module 0 0]]]
    (_.coverage [/.let]
      (|> (monad.let try.monad
            [[_ archive] (archive.reserve "" archive.empty)
             [_ archive] (archive.reserve module archive)
             .let [[_ host] (io.value host.host)
                   state (is runtime.State
                             (translation.state host module))]]
            (<| (phase.value state)
                (monad.let phase.monad
                  [_ (translation.set_buffer translation.empty_buffer)
                   it (/.let next archive
                        [register (synthesis.i64 @ expected_i64)
                         (synthesis.local @ register)])]
                  (pure (|> it
                            [{.:None}]
                            (by host evaluate)
                            (try:each (|>> (as (-> Any I64))
                                           (/64.= expected_i64)))
                            (try.else false))))))
          (try.else false)))))

(the the_test
  Test
  (monad.let [! random.monad]
    [module (random.lower_cased 1)
     expected_i64 random.i64
     dummy_i64 (random.only (|>> (/64.= expected_i64) not)
                            random.i64)

     .let [extender (is extension.Extender
                        (function (_ _)
                          (undefined)))
           next (//.translate extender complexT.lux)
           @ [module 0 0]]

     .let [siblings (by ! each (|>> (n.% 5) ++) random.natural)]
     left_siblings siblings
     right_siblings siblings
     .let [inner_size (++ (all n.+ left_siblings right_siblings))]
     inner_member (by ! each (n.% inner_size) random.natural)
     nested_choice random.bit]
    (_.coverage [/.its]
      (|> (monad.let try.monad
            [[_ archive] (archive.reserve "" archive.empty)
             [_ archive] (archive.reserve module archive)
             .let [[_ host] (io.value host.host)
                   state (is runtime.State
                             (translation.state host module))]
             .let [middle_tuple (all list:composite
                                     (list.repeated left_siblings (synthesis.i64 @ dummy_i64))
                                     (list (synthesis.i64 @ expected_i64))
                                     (list.repeated right_siblings (synthesis.i64 @ dummy_i64)))
                   middle_access (is Member
                                     [left_siblings 0b])
                   
                   right_tuple (all list:composite
                                    (list.repeated left_siblings (synthesis.i64 @ dummy_i64))
                                    (list (synthesis.i64 @ expected_i64)))
                   right_access (is Member
                                    [(-- left_siblings) 1b])

                   [nested_tuple nested_access] (is [(List synthesis.Term) Member]
                                                    (if nested_choice
                                                        [middle_tuple middle_access]
                                                        [right_tuple right_access]))
                   nested_tuple (is (List synthesis.Term)
                                    (all list:composite
                                         (list.repeated right_siblings (synthesis.i64 @ dummy_i64))
                                         (list (synthesis.tuple @ nested_tuple))))]
             middle! (<| (phase.value state)
                         (monad.let phase.monad
                           [_ (translation.set_buffer translation.empty_buffer)
                            _ runtime.translation
                            it (/.its next archive
                                      [(list middle_access)
                                       (synthesis.tuple @ middle_tuple)])]
                           (pure (|> it
                                     [{.:None}]
                                     (by host evaluate)
                                     (try:each (|>> (as (-> Any I64))
                                                    (/64.= expected_i64)))
                                     (try.else false)))))
             right! (<| (phase.value state)
                        (monad.let phase.monad
                          [_ (translation.set_buffer translation.empty_buffer)
                           _ runtime.translation
                           it (/.its next archive
                                     [(list right_access)
                                      (synthesis.tuple @ right_tuple)])]
                          (pure (|> it
                                    [{.:None}]
                                    (by host evaluate)
                                    (try:each (|>> (as (-> Any I64))
                                                   (/64.= expected_i64)))
                                    (try.else false)))))
             nested! (<| (phase.value state)
                         (monad.let phase.monad
                           [_ (translation.set_buffer translation.empty_buffer)
                            _ runtime.translation
                            it (/.its next archive
                                      [(list [(-- right_siblings) 1b]
                                             nested_access)
                                       (synthesis.tuple @ nested_tuple)])]
                           (pure (|> it
                                     [{.:None}]
                                     (by host evaluate)
                                     (try:each (|>> (as (-> Any I64))
                                                    (/64.= expected_i64)))
                                     (try.else false)))))]
            (pure (and middle!
                       right!
                       nested!)))
          (try.else false)))))

(the when_test
  Test
  (monad.let [! random.monad]
    [module (random.lower_cased 1)
     expected_i64 random.i64
     dummy_i64 (random.only (|>> (/64.= expected_i64) not)
                            random.i64)

     .let [extender (is extension.Extender
                        (function (_ _)
                          (undefined)))
           next (//.translate extender complexT.lux)
           @ [module 0 0]]

     register (by ! each (n.% 10) random.natural)
     expected_bit random.bit
     expected_f64 random.unit_decimal
     expected_text (random.lower_cased 1)

     lefts (by ! each (n.% 10) random.natural)]
    (_.coverage [/.when]
      (|> (monad.let try.monad
            [[_ archive] (archive.reserve "" archive.empty)
             [_ archive] (archive.reserve module archive)
             .let [[_ host] (io.value host.host)
                   state (is runtime.State
                             (translation.state host module))]
             then! (<| (phase.value state)
                       (monad.let phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          _ runtime.translation
                          it (/.when next archive
                               [(synthesis.i64 @ dummy_i64)
                                {synthesis.:Then (synthesis.i64 @ expected_i64)}])]
                         (pure (|> it
                                   [{.:None}]
                                   (by host evaluate)
                                   (try:each (|>> (as (-> Any I64))
                                                  (/64.= expected_i64)))
                                   (try.else false)))))
             pop! (<| (phase.value state)
                      (monad.let phase.monad
                        [_ (translation.set_buffer translation.empty_buffer)
                         _ runtime.translation
                         it (/.when next archive
                              [(synthesis.i64 @ dummy_i64)
                               {synthesis.:And {synthesis.:Pop}
                                               {synthesis.:Then (synthesis.i64 @ expected_i64)}}])]
                        (pure (|> it
                                  [{.:None}]
                                  (by host evaluate)
                                  (try:each (|>> (as (-> Any I64))
                                                 (/64.= expected_i64)))
                                  (try.else false)))))
             bind! (<| (phase.value state)
                       (monad.let phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          _ runtime.translation
                          it (/.when next archive
                               [(synthesis.i64 @ expected_i64)
                                {synthesis.:And {synthesis.:Bind register}
                                                {synthesis.:Then (synthesis.local @ register)}}])]
                         (pure (|> it
                                   [{.:None}]
                                   (by host evaluate)
                                   (try:each (|>> (as (-> Any I64))
                                                  (/64.= expected_i64)))
                                   (try.else false)))))
             bit! (<| (phase.value state)
                      (monad.let phase.monad
                        [_ (translation.set_buffer translation.empty_buffer)
                         _ runtime.translation
                         it (/.when next archive
                              [(synthesis.bit @ expected_bit)
                               {synthesis.:Bit_Fork expected_bit
                                                    {synthesis.:Then (synthesis.i64 @ expected_i64)}
                                                    {.:Some {synthesis.:Then (synthesis.i64 @ dummy_i64)}}}])]
                        (pure (|> it
                                  [{.:None}]
                                  (by host evaluate)
                                  (try:each (|>> (as (-> Any I64))
                                                 (/64.= expected_i64)))
                                  (try.else false)))))
             i64! (<| (phase.value state)
                      (monad.let phase.monad
                        [_ (translation.set_buffer translation.empty_buffer)
                         _ runtime.translation
                         it (/.when next archive
                              [(synthesis.i64 @ dummy_i64)
                               {synthesis.:I64_Fork [[dummy_i64 {synthesis.:Then (synthesis.i64 @ expected_i64)}]
                                                     (list)]}])]
                        (pure (|> it
                                  [{.:None}]
                                  (by host evaluate)
                                  (try:each (|>> (as (-> Any I64))
                                                 (/64.= expected_i64)))
                                  (try.else false)))))
             f64! (<| (phase.value state)
                      (monad.let phase.monad
                        [_ (translation.set_buffer translation.empty_buffer)
                         _ runtime.translation
                         it (/.when next archive
                              [(synthesis.f64 @ expected_f64)
                               {synthesis.:F64_Fork [[expected_f64 {synthesis.:Then (synthesis.i64 @ expected_i64)}]
                                                     (list)]}])]
                        (pure (|> it
                                  [{.:None}]
                                  (by host evaluate)
                                  (try:each (|>> (as (-> Any I64))
                                                 (/64.= expected_i64)))
                                  (try.else false)))))
             text! (<| (phase.value state)
                       (monad.let phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          _ runtime.translation
                          it (/.when next archive
                               [(synthesis.text @ expected_text)
                                {synthesis.:Text_Fork [[expected_text {synthesis.:Then (synthesis.i64 @ expected_i64)}]
                                                       (list)]}])]
                         (pure (|> it
                                   [{.:None}]
                                   (by host evaluate)
                                   (try:each (|>> (as (-> Any I64))
                                                  (/64.= expected_i64)))
                                   (try.else false)))))
             alt! (<| (phase.value state)
                      (monad.let phase.monad
                        [_ (translation.set_buffer translation.empty_buffer)
                         _ runtime.translation
                         it (/.when next archive
                              [(synthesis.i64 @ dummy_i64)
                               {synthesis.:Or {synthesis.:I64_Fork [[expected_i64 {synthesis.:Then (synthesis.i64 @ expected_i64)}]
                                                                    (list)]}
                                              {synthesis.:Then (synthesis.i64 @ expected_i64)}}])]
                        (pure (|> it
                                  [{.:None}]
                                  (by host evaluate)
                                  (try:each (|>> (as (-> Any I64))
                                                 (/64.= expected_i64)))
                                  (try.else false)))))
             .let [access!|member (is (-> Member (List I64)
                                          Bit)
                                      (function (_ member tuple)
                                        (<| (try.else false)
                                            (phase.value state)
                                            (monad.let phase.monad
                                              [_ (translation.set_buffer translation.empty_buffer)
                                               _ runtime.translation
                                               it (/.when next archive
                                                    [(synthesis.tuple @ (list:each (|>> (synthesis.i64 @)) tuple))
                                                     {synthesis.:And {synthesis.:Access {access.:Member member}}
                                                                     {synthesis.:And {synthesis.:Bind register}
                                                                                     {synthesis.:Then (synthesis.local @ register)}}}])]
                                              (pure (|> it
                                                        [{.:None}]
                                                        (by host evaluate)
                                                        (try:each (|>> (as (-> Any I64))
                                                                       (/64.= expected_i64)))
                                                        (try.else false)))))))
                   access!|side (is (-> Side
                                        Bit)
                                    (function (_ [lefts right?])
                                      (<| (try.else false)
                                          (phase.value state)
                                          (monad.let phase.monad
                                            [_ (translation.set_buffer translation.empty_buffer)
                                             _ runtime.translation
                                             it (/.when next archive
                                                  [(synthesis.variant @ [lefts right? (synthesis.i64 @ expected_i64)])
                                                   {synthesis.:And {synthesis.:Access {access.:Side [lefts right?]}}
                                                                   {synthesis.:And {synthesis.:Bind register}
                                                                                   {synthesis.:Then (synthesis.local @ register)}}}])]
                                            (pure (|> it
                                                      [{.:None}]
                                                      (by host evaluate)
                                                      (try:each (|>> (as (-> Any I64))
                                                                     (/64.= expected_i64)))
                                                      (try.else false)))))))
                   access! (and (access!|member [lefts false] (list:composite (list.repeated lefts dummy_i64)
                                                                              (list expected_i64 dummy_i64)))
                                (access!|member [lefts true] (list:composite (list.repeated lefts dummy_i64)
                                                                             (list dummy_i64 expected_i64)))

                                (access!|side [lefts false])
                                (access!|side [lefts true]))]]
            (pure (and then!
                       pop!
                       bind!
                       bit!
                       i64!
                       f64!
                       text!
                       alt!
                       access!)))
          (try.else false)))))

(the test_of_stack
  Test
  (monad.let [! random.monad]
    [module (random.lower_cased 1)

     expected_bit random.bit
     expected_i64 random.i64]
    (_.coverage [runtime.stack
                 runtime.item
                 runtime.head_of_stack
                 runtime.tail_of_stack]
      (and (|> (monad.let try.monad
                 [.let [[_ host] (io.value host.host)]]
                 (<| (phase.value (translation.state host module))
                     (monad.let phase.monad
                       [_ (translation.set_buffer translation.empty_buffer)]
                       (pure (|> (all jvm.composite
                                      (primitive.bit expected_bit)
                                      (primitive.i64 expected_i64)
                                      runtime.stack
                                      (runtime.item runtime.head_of_stack))
                                 [{.:None}]
                                 (by host evaluate)
                                 (try:each (|>> (as (-> Any I64))
                                                (/64.= expected_i64)))
                                 (try.else false))))))
               (try.else false))
           (|> (monad.let try.monad
                 [.let [[_ host] (io.value host.host)]]
                 (<| (phase.value (translation.state host module))
                     (monad.let phase.monad
                       [_ (translation.set_buffer translation.empty_buffer)]
                       (pure (|> (all jvm.composite
                                      (primitive.bit expected_bit)
                                      (primitive.i64 expected_i64)
                                      runtime.stack
                                      (runtime.item runtime.tail_of_stack))
                                 [{.:None}]
                                 (by host evaluate)
                                 (try:each (|>> (as (-> Any Bit))
                                                (bit.= expected_bit)))
                                 (try.else false))))))
               (try.else false))
           ))))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           if_test
           exec_test
           let_test
           the_test
           when_test
           test_of_stack
           )))
