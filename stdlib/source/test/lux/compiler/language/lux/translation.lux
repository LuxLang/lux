... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" text]
    [collection
     ["[0]" sequence]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]
   [type
    ["[0]" check]]
   [macro
    ["^" pattern]
    ["[0]" template]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" phase (.only)
     ["[0]" extension]]
    [///
     [meta
      ["[0]" archive (.only)
       ["[0]" registry]
       ["[0]" unit]]]]]]]
 ["[0]" /
  ["[1][0]" script]])

(the dummy_host
  (/.Host Any Any)
  (implementation
   (the (evaluate _)
     {try.:Failure ""})
   (the (execute _)
     {try.:Failure ""})
   (the (define _ _ _)
     {try.:Failure ""})

   (the (ingest _ _)
     [])
   (the (re_learn _ _ _)
     {try.:Failure ""})
   (the (re_load _ _ _)
     {try.:Failure ""})))

(template.the (expected_evaluation ,it)
  [,it])

(template.the (expected_execution ,it)
  [(n.+ ,it ,it)])

(template.the (expected_definition ,it)
  [(n.x ,it ,it)])

(the trivial_host
  (/.Host Natural Natural)
  (implementation
   (the (evaluate [unit_id it])
     {try.:Success (expected_evaluation it)})
   (the (execute it)
     {try.:Success (expected_execution it)})
   (the (define _ _ [unit_id it])
     {try.:Success ["" (expected_definition it) it]})

   (the (ingest _ _)
     123,456,789)
   (the (re_learn _ _ _)
     {try.:Failure ""})
   (the (re_load _ _ _)
     {try.:Failure ""})))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [expected_module (random.lower_cased 1)
         expected_prefix (random.lower_cased 2)
         expected_anchor random.natural
         expected_artifact random.natural
         expected_registry_shift_0 random.natural
         expected_registry_shift_1 random.natural
         expected_expression random.natural
         expected_declaration random.natural
         expected_custom (random.lower_cased 3)])
      (`` (all _.and
               (,, (template.with [,it ,extension]
                     [(_.coverage [,it]
                        (check.< ,it ,extension))]

                     [[/.Operation phase.Operation]
                      [/.Phase phase.Phase]
                      
                      [/.Handler  extension.Handler]
                      [/.Bundle   extension.Bundle]
                      [/.Extender extension.Extender]]))

               (_.coverage [/.State
                            /.state]
                 (let [it (is (/.State Any Any Any)
                              (/.state ..dummy_host expected_module))]
                   (and (identical? expected_module (its /.:module it))
                        (when (its /.:anchor it) {.:None} true _ false)
                        (identical? ..dummy_host (its /.:host it))
                        (when (its /.:buffer it) {.:None} true _ false)
                        (identical? registry.empty (its /.:registry it))
                        (n.= 0 (its /.:registry_shift it))
                        (n.= 0 (its /.:counter it))
                        (when (its /.:context it) {.:None} true _ false)
                        (sequence.empty? (its /.:interim_artifacts it)))))
               (_.for [/.:module]
                      (all _.and
                           (_.coverage [/.enter_module /.module]
                             (|> (monad.let phase.monad
                                   [expected (/.name expected_prefix)
                                    _ (/.enter_module expected)
                                    actual /.module]
                                   (pure (identical? expected actual)))
                                 (phase.value (/.state ..dummy_host expected_module))
                                 (try.else false)))
                           (_.coverage [/.module_id]
                             (|> (monad.let try.monad
                                   [[expected_module_id archive] (archive.reserve expected_module archive.empty)
                                    actual_module_id (|> (/.module_id expected_module archive)
                                                         (phase.value (/.state ..dummy_host expected_module)))]
                                   (pure (n.= expected_module_id actual_module_id)))
                                 (try.else false)))
                           ))
               (_.for [/.:counter]
                      (all _.and
                           (_.coverage [/.next]
                             (|> (monad.let phase.monad
                                   [before /.next
                                    after /.next]
                                   (pure (n.= (++ before) after)))
                                 (phase.value (/.state ..dummy_host expected_module))
                                 (try.else false)))
                           (_.coverage [/.name]
                             (|> (monad.let phase.monad
                                   [it (/.name expected_prefix)]
                                   (pure (and (not (text.= expected_prefix it))
                                              (text.starts_with? expected_prefix it))))
                                 (phase.value (/.state ..dummy_host expected_module))
                                 (try.else false)))
                           ))
               (_.for [/.:anchor]
                      (all _.and
                           (_.coverage [/.with_anchor /.anchor]
                             (|> (/.with_anchor expected_anchor /.anchor)
                                 (phase.value (/.state ..dummy_host expected_module))
                                 (try:each (identical? expected_anchor))
                                 (try.else false)))
                           (_.coverage [/.no_anchor]
                             (|> /.anchor
                                 (phase.value (/.state ..dummy_host expected_module))
                                 (match? {try.:Failure /.no_anchor})))
                           ))
               (_.for [/.:buffer /.Buffer]
                      (all _.and
                           (_.coverage [/.empty_buffer]
                             (sequence.empty? /.empty_buffer))
                           (_.coverage [/.with_buffer /.buffer]
                             (|> (/.with_buffer /.buffer)
                                 (phase.value (/.state ..dummy_host expected_module))
                                 (try:each (identical? /.empty_buffer))
                                 (try.else false)))
                           (_.coverage [/.no_buffer]
                             (|> /.buffer
                                 (phase.value (/.state ..dummy_host expected_module))
                                 (match? {try.:Failure /.no_buffer})))
                           (_.coverage [/.set_buffer]
                             (|> (/.with_buffer
                                   (monad.let [! phase.monad]
                                     [before /.buffer
                                      _ (/.save! expected_artifact {.:None} [])
                                      after /.buffer
                                      [before' after'] (/.with_buffer
                                                         (monad.let !
                                                           [before' /.buffer
                                                            _ (/.set_buffer after)
                                                            after' /.buffer]
                                                           (pure [before' after'])))]
                                     (pure (and (identical? before before')
                                                (identical? after after')

                                                (identical? /.empty_buffer before)
                                                (not (identical? /.empty_buffer after))))))
                                 (phase.value (/.state ..dummy_host expected_module))
                                 (try.else false)))
                           ))
               (_.for [/.:context]
                      (all _.and
                           (_.coverage [/.with_context /.context]
                             (|> (monad.let try.monad
                                   [[expected_module_id archive] (archive.reserve expected_module archive.empty)
                                    [actual_module_id actual_artifact] (|> (/.with_context expected_artifact
                                                                             (/.context archive))
                                                                           (phase.value (/.state ..dummy_host expected_module)))]
                                   (pure (and (n.= expected_module_id actual_module_id)
                                              (n.= expected_artifact actual_artifact))))
                                 (try.else false)))
                           (_.coverage [/.no_context]
                             (|> (monad.let try.monad
                                   [[expected_module_id archive] (archive.reserve expected_module archive.empty)]
                                   (|> (/.context archive)
                                       (phase.value (/.state ..dummy_host expected_module))))
                                 (match? {try.:Failure /.no_context})))
                           (_.coverage [/.with_new_context]
                             (|> (monad.let try.monad
                                   [.let [every_dependency (set.empty unit.hash)]
                                    [expected_module_id archive] (archive.reserve expected_module archive.empty)]
                                   (|> (monad.let phase.monad
                                         [[expected_unit actual_unit] (/.with_new_context archive every_dependency
                                                                        (/.context archive))]
                                         (pure (by unit.equivalence = expected_unit actual_unit)))
                                       (phase.value (/.state ..dummy_host expected_module))))
                                 (try.else false)))
                           ))
               (_.for [/.:registry_shift]
                      (all _.and
                           (_.coverage [/.with_registry_shift]
                             (|> (/.with_registry_shift expected_registry_shift_0
                                   (/.with_registry_shift expected_registry_shift_1
                                     (phase.read (its /.:registry_shift))))
                                 (phase.value (/.state ..dummy_host expected_module))
                                 (try:each (n.= (n.+ expected_registry_shift_0 expected_registry_shift_1)))
                                 (try.else false)))
                           ))
               (<| (_.for [/.:registry])
                   (let [every_dependency (set.empty unit.hash)])
                   (all _.and
                        (_.coverage [/.learn_custom /.remember]
                          (|> (monad.let try.monad
                                [[expected_module_id archive] (archive.reserve expected_module archive.empty)]
                                (|> (monad.let phase.monad
                                      [expected_artifact_id (/.learn_custom every_dependency expected_custom)
                                       [actual_module_id actual_artifact_id] (/.remember archive [expected_module expected_custom])]
                                      (pure (and (n.= expected_module_id actual_module_id)
                                                 (n.= expected_artifact_id actual_artifact_id))))
                                    (phase.value (/.state ..dummy_host expected_module))))
                              (try.else false)))
                        (_.coverage [/.learn /.definition]
                          (|> (monad.let try.monad
                                [[expected_module_id archive] (archive.reserve expected_module archive.empty)]
                                (|> (monad.let phase.monad
                                      [expected_artifact_id (/.learn false every_dependency [expected_custom {.:None}])
                                       [[actual_module_id actual_artifact_id] definition] (/.definition archive [expected_module expected_custom])]
                                      (pure (and (n.= expected_module_id actual_module_id)
                                                 (n.= expected_artifact_id actual_artifact_id))))
                                    (phase.value (/.state ..dummy_host expected_module))))
                              (try.else false)))
                        (_.coverage [/.unknown_definition]
                          (and (|> (monad.let try.monad
                                     [[expected_module_id archive] (archive.reserve expected_module archive.empty)]
                                     (|> (/.remember archive [expected_module expected_custom])
                                         (phase.value (/.state ..dummy_host expected_module))))
                                   (match? (^.multi {try.:Failure it}
                                                    (exception.is? /.unknown_definition it))))
                               (|> (monad.let try.monad
                                     [[expected_module_id archive] (archive.reserve expected_module archive.empty)]
                                     (|> (/.definition archive [expected_module expected_custom])
                                         (phase.value (/.state ..dummy_host expected_module))))
                                   (match? (^.multi {try.:Failure it}
                                                    (exception.is? /.unknown_definition it))))))
                        (_.coverage [/.registry]
                          (|> (|> /.registry
                                  (phase.value (/.state ..dummy_host expected_module)))
                              (try:each (identical? registry.empty))
                              (try.else false)))
                        (_.coverage [/.set_registry]
                          (|> (monad.let try.monad
                                [[expected_module_id archive] (archive.reserve expected_module archive.empty)]
                                (|> (monad.let phase.monad
                                      [before /.registry
                                       expected_artifact_id (/.learn_custom every_dependency expected_custom)
                                       after /.registry
                                       _ (/.set_registry before)
                                       result /.registry]
                                      (pure (and (identical? before result)
                                                 (not (identical? before after)))))
                                    (phase.value (/.state ..dummy_host expected_module))))
                              (try.else false)))
                        ))
               (_.for [/.:host /.Host
                       /.ingest /.re_learn /.re_load]
                      (all _.and
                           (_.coverage [/.evaluate /.evaluate!]
                             (|> (/.evaluate! [{.:None} expected_expression])
                                 (phase.value (/.state ..trivial_host expected_module))
                                 (try:each (|>> (as (-> Any Natural))
                                                (n.= (..expected_evaluation expected_expression))))
                                 (try.else false)))
                           (_.coverage [/.execute /.execute!]
                             (|> (/.execute! expected_declaration)
                                 (phase.value (/.state ..trivial_host expected_module))
                                 (try:each (|>> (as (-> Any Natural))
                                                (n.= (..expected_execution expected_declaration))))
                                 (try.else false)))
                           (_.coverage [/.define /.define!]
                             (|> (/.define! [expected_artifact expected_artifact]
                                            {.:None}
                                            [{.:None} expected_expression])
                                 (phase.value (/.state ..trivial_host expected_module))
                                 (try:each (function (_ [name value declaration])
                                             (n.= (..expected_definition expected_expression)
                                                  (as (-> Any Natural) value))))
                                 (try.else false)))
                           (_.coverage [/.cannot_interpret]
                             (template.let [(cannot_interpret ,it)
                                            [(|> ,it
                                                 (phase.value (/.state ..dummy_host expected_module))
                                                 (match? (^.multi {try.:Failure it}
                                                                  (exception.is? /.cannot_interpret it))))]]
                               (and (cannot_interpret (/.evaluate! [{.:None} []]))
                                    (cannot_interpret (/.execute! []))
                                    (cannot_interpret (/.define! [expected_artifact expected_artifact]
                                                                 {.:None}
                                                                 [{.:None} []])))))
                           ))
               (_.for [/.:interim_artifacts]
                      (all _.and
                           (_.coverage [/.with_interim_artifacts]
                             (|> (monad.let try.monad
                                   [.let [every_dependency (set.empty unit.hash)]
                                    [expected_module_id archive] (archive.reserve expected_module archive.empty)]
                                   (|> (monad.let phase.monad
                                         [[artifacts expected_unit _] (<| (/.with_interim_artifacts archive)
                                                                          (/.with_new_context archive every_dependency)
                                                                          (pure []))]
                                         (pure (with (sequence.equivalence unit.equivalence)
                                                 (= (sequence.new expected_unit)
                                                    artifacts))))
                                       (phase.value (/.state ..dummy_host expected_module))))
                                 (try.else false)))
                           ))
               (_.coverage [/.save!]
                 (and (|> (/.with_buffer
                            (/.save! expected_artifact {.:None} []))
                          (phase.value (/.state ..dummy_host expected_module))
                          (match? {try.:Success []}))
                      (|> (/.save! expected_artifact {.:None} [])
                          (phase.value (/.state ..dummy_host expected_module))
                          (match? {try.:Failure /.no_buffer}))))
               (_.coverage [/.cannot_overwrite_output]
                 (|> (/.with_buffer
                       (monad.and phase.monad
                                  (/.save! expected_artifact {.:None} [])
                                  (/.save! expected_artifact {.:None} [])))
                     (phase.value (/.state ..dummy_host expected_module))
                     (match? (^.multi {try.:Failure it}
                                      (exception.is? /.cannot_overwrite_output it)))))

               /script.test
               ))))
