... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" pipe]
    ["[0]" try (.use "[1]:[0]" functor)]]
   [data
    ["[0]" product]]
   [math
    ["[0]" random (.only Random)]]
   ["[0]" type (.only)
    ["[0]" check]]
   [meta
    ["[0]" configuration
     ["$[1]" \\test]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.only)
    ["[2][0]" module]
    [//
     [phase
      ["[2][0]" extension]]
     [///
      ["[2][0]" phase (.use "[1]:[0]" functor)]]]]]])

(the .public random_state
  (Random Lux)
  (monad.let random.monad
    [version random.nat
     host (random.lower_cased 1)
     configuration ($configuration.random 5)]
    (pure (//.state (//.info version host configuration)))))

(the nominal
  (Random Type)
  (monad.let random.monad
    [name (random.lower_cased 1)]
    (pure {.:Nominal name (list)})))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [lux ..random_state
         .let [state [/extension.:bundle /extension.empty
                      /extension.:state lux]]
         expected ..nominal
         dummy (random.only (|>> (type.= expected) not)
                            ..nominal)
         module (random.lower_cased 1)]
        (all _.and
             (_.coverage [/.with /.inference]
               (and (|> (/.inference expected)
                        (/.with expected)
                        (/module.with 0 module)
                        (/phase:each product.right)
                        (/phase.value state)
                        (pipe.when
                          {try.:Success _} true
                          {try.:Failure _} false))
                    (|> (/.inference dummy)
                        (/.with expected)
                        (/module.with 0 module)
                        (/phase:each product.right)
                        (/phase.value state)
                        (pipe.when
                          {try.:Success _} false
                          {try.:Failure _} true))
                    (|> (/.inference expected)
                        (/.with dummy)
                        (/module.with 0 module)
                        (/phase:each product.right)
                        (/phase.value state)
                        (pipe.when
                          {try.:Success _} false
                          {try.:Failure _} true))))
             (_.coverage [/.inferring]
               (|> (/.inference expected)
                   /.inferring
                   (/module.with 0 module)
                   (/phase:each product.right)
                   (/phase.value state)
                   (try:each (|>> product.left (type.= expected)))
                   (try.else false)))
             (_.coverage [/.check]
               (|> (monad.let /phase.monad
                     [exT (/.check (monad.let check.monad
                                     [[id type] check.existential]
                                     (pure type)))]
                     (|> (/.inference exT)
                         (/.with exT)))
                   (/module.with 0 module)
                   (/phase:each product.right)
                   (/phase.value state)
                   (pipe.when
                     {try.:Success _} true
                     {try.:Failure _} false)))
             (_.coverage [/.existential /.existential?]
               (|> (monad.let /phase.monad
                     [:it: /.existential]
                     (pure (/.existential? :it:)))
                   (/module.with 0 module)
                   (/phase:each product.right)
                   (/phase.value state)
                   (try.else false)))
             (_.coverage [/.fresh]
               (and (|> (monad.let /phase.monad
                          [varT (/.check (monad.let check.monad
                                           [[id type] check.var]
                                           (pure type)))]
                          (|> (/.inference expected)
                              (/.with varT)))
                        (/module.with 0 module)
                        (/phase:each product.right)
                        (/phase.value state)
                        (pipe.when
                          {try.:Success _} true
                          {try.:Failure _} false))
                    (|> (monad.let /phase.monad
                          [varT (/.check (monad.let check.monad
                                           [[id type] check.var]
                                           (pure type)))]
                          (|> (/.inference expected)
                              (/.with varT)
                              /.fresh))
                        (/module.with 0 module)
                        (/phase:each product.right)
                        (/phase.value state)
                        (pipe.when
                          {try.:Success _} false
                          {try.:Failure _} true))))
             ))))
