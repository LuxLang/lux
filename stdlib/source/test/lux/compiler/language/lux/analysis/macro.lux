... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [error
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     [/64
      ["n" natural]]]]
   ["[0]" macro]
   ["[0]" meta (.only)
    ["[0]" code]
    ["[0]" configuration
     ["$[1]" \\test]]]
   [test
    ["_" property (.only Test)]]]]
 ["$" ///////
  [meta
   ["[1][0]" name]
   ["[1][0]" code]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" //]]])

(the random_state
  (Random Lux)
  (do random.monad
    [version random.natural
     host (random.lower_cased 1)
     configuration ($configuration.random 5)]
    (pure (//.state (//.info version host configuration)))))

(the (expander macro inputs state)
  /.Expander
  {try.#Success ((macro.function macro) inputs state)})

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Expander])
      (do [! random.monad]
        [multiplicity (by ! each (|>> (n.% 8) (n.+ 2))
                          random.natural)
         choice (by ! each (n.% multiplicity)
                    random.natural)
         expected_error (random.upper_cased 5)

         name ($name.random 2 2)
         mono $code.random
         poly (random.list multiplicity $code.random)

         lux ..random_state
         .let [singular (<| (as Macro)
                            (is Macro')
                            (function (_ inputs state)
                              (when (list.item choice inputs)
                                {try.#Success it}
                                {try.#Success [state (list it)]}

                                {try.#Failure _}
                                {try.#Failure expected_error})))
               multiple (<| (as Macro)
                            (is Macro')
                            (function (_ inputs state)
                              {try.#Success [state (|> inputs
                                                       (list.repeated multiplicity)
                                                       list#conjoint)]}))]])
      (all _.and
           (_.coverage [/.expansion]
             (|> (/.expansion ..expander name multiple (list mono))
                 (meta.value lux)
                 (try#each (by (list.equivalence code.equivalence) =
                               (list.repeated multiplicity mono)))
                 (try.else false)))
           (_.coverage [/.expansion_failed]
             (|> (/.expansion ..expander name singular (list))
                 (meta.value lux)
                 (pipe.when
                   {try.#Failure it}
                   (and (text.contains? expected_error it)
                        (text.contains? (its exception.#label /.expansion_failed) it))

                   _
                   false)))
           (_.coverage [/.single_expansion]
             (|> (/.single_expansion ..expander name singular poly)
                 (meta.value lux)
                 (try#each (code.= (|> poly (list.item choice) maybe.trusted)))
                 (try.else false)))
           (_.coverage [/.must_have_single_expansion]
             (|> (/.single_expansion ..expander name multiple (list mono))
                 (meta.value lux)
                 (pipe.when
                   {try.#Failure it}
                   (text.contains? (its exception.#label /.must_have_single_expansion) it)

                   _
                   false)))
           )))
