... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["[0]" pipe]
    ["[0]" maybe]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   ["[0]" function]
   [data
    ["[0]" text (.only)]
    [collection
     ["[0]" list (.only)
      ["?[1]" \\projection]]
     ["[0]" stack]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     [/64
      ["n" natural]
      ["i" integer]
      ["d" decimal]
      ["r" revolution]]]]
   [macro
    ["[0]" template]
    ["[0]" expansion]]
   [meta
    ["[0]" static]
    ["[0]" name (.only)
     ["/[1]" \\test]]
    ["[0]" provenance (.only)
     ["/[1]" \\test]]
    ["[0]" configuration
     ["$[1]" \\test]]]
   [compiler
    ["@[0]" type (.only Constant)]]
   [test
    ["_" property (.only Test)]]
   [type
    ["[0]" check]]]]
 ["[0]" \\projection]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" phase]
    [///
     ["[0]" version]]]]]
 ["[0]" /
  ["[1][0]" complex]
  ... ["[1][0]" inference]
  ... ["[1][0]" macro]
  ... ["[1][0]" module]
  ["[1][0]" pattern]
  ... ["[1][0]" scope]
  ["[1][0]" simple]
  ... ["[1][0]" type]
  ... ["[1][0]" coverage]
  [////
   ["[1][0]" reference (.only)
    ["[2][0]" variable]]]])

(the !expect
  (template.macro (_ <expectation> <computation>)
    [(when <computation>
       <expectation>
       true

       _
       false)]))

(the constant
  (Random Constant)
  (random.and (random.unicode 10)
              (random.unicode 10)))

(the \\projection
  Test
  (<| (_.covering \\projection._)
      (_.for [\\projection.Projection])
      (monad.let [! random.monad]
        []
        (`` (all _.and
                 (,, (template.with [<query> <check> <random> <analysis> <=>]
                       [(monad.let [! random.monad]
                          [expected <random>]
                          (_.coverage [<query>]
                            (|> <query>
                                (?list.value (list (<analysis> provenance.dummy expected)))
                                (pipe.when
                                  {try.#Success actual}
                                  (<=> expected actual)

                                  {try.#Failure _}
                                  false))))
                        (monad.let [! random.monad]
                          [expected <random>]
                          (_.coverage [<check>]
                            (|> (<check> expected)
                                (?list.value (list (<analysis> provenance.dummy expected)))
                                (!expect {try.#Success _}))))]
                       
                       [[\\projection.bit \\projection.this_bit random.bit /.bit bit.=]
                        [\\projection.natural \\projection.this_natural random.natural /.natural n.=]
                        [\\projection.integer \\projection.this_integer random.integer /.integer i.=]
                        [\\projection.decimal \\projection.this_decimal random.unit_decimal /.decimal d.=]
                        [\\projection.revolution \\projection.this_revolution random.revolution /.revolution r.=]
                        [\\projection.text \\projection.this_text (random.unicode 10) /.text text.=]
                        [\\projection.local \\projection.this_local random.natural /.local n.=]
                        [\\projection.foreign \\projection.this_foreign random.natural /.foreign n.=]
                        [\\projection.constant \\projection.this_constant ..constant /.constant name.=]]))
                 (monad.let [! random.monad]
                   [expected random.bit]
                   (_.coverage [\\projection.tuple]
                     (|> (\\projection.tuple \\projection.bit)
                         (?list.value (list (/.tuple provenance.dummy (list (/.bit provenance.dummy expected)))))
                         (pipe.when
                           {try.#Success actual}
                           (bit.= expected actual)

                           {try.#Failure _}
                           false))))
                 )))))

(the (random_branch random)
  (for_any (_ a)
    (-> (Random a)
        (Random (@type.Branch a))))
  (all random.and
       /pattern.random
       random
       ))

(the (random_match multiplicity random)
  (for_any (_ a)
    (-> Natural (Random a)
        (Random (@type.Match a))))
  (all random.and
       (..random_branch random)
       (random.list multiplicity (..random_branch random))
       ))

(the .public (random multiplicity)
  (-> Natural (Random /.Term))
  (<| random.rec
      (function (_ random))
      (let [random|when (all random.and
                             random
                             (..random_match multiplicity random)
                             )
            random|function (all random.and
                                 (random.list multiplicity random)
                                 random
                                 )
            random|reification (all random.and
                                    random
                                    random
                                    )
            random|extension (all random.and
                                  (/name.random 1 1)
                                  (random.list multiplicity random)
                                  )
            term (is (for_any (_ it)
                       (-> (Random it)
                           (Random (And Provenance it))))
                     (random.and /provenance.random))])
      (all random.or
           (term /simple.random)
           (term (/complex.random multiplicity random))
           (term /reference.random)
           (term random|when)
           (term random|function)
           (term random|reification)
           (term random|extension)
           )))

(the test|simple
  Test
  (monad.let random.monad
    [bit random.bit
     natural random.natural
     integer random.integer
     revolution random.revolution
     decimal random.decimal
     text (random.lower_cased 1)]
    (`` (all _.and
             (_.coverage [/.unit]
               (when (/.unit provenance.dummy)
                 (/.unit @)
                 true
                 
                 _
                 false))
             (,, (template.with [<tag> <expected>]
                   [(_.coverage [<tag>]
                      (when (<tag> provenance.dummy <expected>)
                        (<tag> @ actual)
                        (identical? <expected> actual)
                        
                        _
                        false))]

                   [[/.bit bit]
                    [/.natural natural]
                    [/.integer integer]
                    [/.revolution revolution]
                    [/.decimal decimal]
                    [/.text text]]))
             ))))

(the test|complex
  Test
  (monad.let random.monad
    [expected_left (..random 2)
     expected_right (..random 2)
     expected_lefts random.natural
     expected_right? random.bit]
    (all _.and
         (_.coverage [/.variant]
           (let [expected (if expected_right?
                              expected_right
                              expected_left)]
             (when (/.variant provenance.dummy [expected_lefts expected_right? expected])
               (/.variant @ [actual_lefts actual_right? actual])
               (and (identical? expected_lefts actual_lefts)
                    (identical? expected_right? actual_right?)
                    (identical? expected actual))

               _
               false)))
         (_.coverage [/.tuple]
           (when (/.tuple provenance.dummy (list expected_left expected_right))
             (/.tuple @ (list actual_left actual_right))
             (and (identical? expected_left actual_left)
                  (identical? expected_right actual_right))

             _
             false))
         )))

(the test|reference
  Test
  (monad.let random.monad
    [expected_register random.natural
     expected_constant (/name.random 1 1)
     expected_variable /variable.random]
    (`` (all _.and
             (,, (template.with [<tag> <expected>]
                   [(_.coverage [<tag>]
                      (when (<tag> provenance.dummy <expected>)
                        (<tag> @ actual)
                        (identical? <expected> actual)

                        _
                        false))]

                   [[/.local expected_register]
                    [/.foreign expected_register]
                    [/.constant expected_constant]
                    [/.variable expected_variable]]))
             ))))

(the tagged?
  (template.macro (_ <tag> <it>)
    [(when <it>
       {<tag> _}
       true

       _
       false)]))

(the test|reification
  Test
  (monad.let random.monad
    [expected_abstraction (random.only (|>> (..tagged? @type.#Application) not)
                                       (..random 2))
     expected_parameter/0 (..random 2)
     expected_parameter/1 (..random 2)]
    (all _.and
         (_.coverage [/.reified /.reification]
           (when (|> [expected_abstraction (list expected_parameter/0 expected_parameter/1)]
                     /.reified
                     /.reification)
             [actual_abstraction (list actual_parameter/0 actual_parameter/1)]
             (and (identical? expected_abstraction actual_abstraction)
                  (identical? expected_parameter/0 actual_parameter/0)
                  (identical? expected_parameter/1 actual_parameter/1))

             _
             false))
         )))

(the test|when
  Test
  (monad.let random.monad
    [expected_input (..random 2)
     expected_match (random_match 2 (..random 2))]
    (all _.and
         (_.coverage [@type.Branch
                      @type.#when @type.#then]
           (check.< /.Branch @type.Branch))
         (_.coverage [/.when]
           (when (/.when provenance.dummy [expected_input expected_match])
             (/.when @ [actual_input actual_match])
             (and (identical? expected_input actual_input)
                  (identical? expected_match actual_match))

             _
             false))
         )))

(expansion.let [<id> (static.random_natural)
                <exception> (template.name ["exception_" <id>])]
  (these (exception.the <exception>)

         (the test|phase
           Test
           (monad.let random.monad
             [version/0 random.natural
              host/0 (random.lower_cased 5)
              version/1 random.natural
              host/1 (random.lower_cased 5)
              expected_error (random.lower_cased 10)
              provenance/0 /provenance.random
              provenance/1 /provenance.random
              configuration ($configuration.random 5)
              .let [state/0 (has .#provenance provenance/0
                                 (/.state (/.info version/0 host/0 configuration)))
                    state/1 (has .#provenance provenance/1
                                 (/.state (/.info version/1 host/1 configuration)))]]
             (all _.and
                  (_.coverage [/.set_state]
                    (|> (monad.let phase.monad
                          [pre (phase.read function.identity)
                           _ (/.set_state state/1)
                           post (phase.read function.identity)]
                          (pure (and (identical? state/0 pre)
                                     (identical? state/1 post))))
                        (phase.value state/0)
                        (try.else false)))
                  (_.coverage [/.failure]
                    (|> (/.failure expected_error)
                        (phase.value state/0)
                        (pipe.when
                          {try.#Failure actual_error}
                          (and (text.contains? expected_error actual_error)
                               (text.contains? (provenance.as_text provenance/0) actual_error))

                          _
                          false)))
                  (_.coverage [/.except]
                    (|> (/.except <exception> [])
                        (phase.value state/0)
                        (pipe.when
                          {try.#Failure actual_error}
                          (and (text.contains? (exception.error <exception> []) actual_error)
                               (text.contains? (provenance.as_text provenance/0) actual_error))

                          _
                          false)))
                  (_.coverage [/.with_exception]
                    (|> (/.failure expected_error)
                        (/.with_exception <exception> [])
                        (phase.value state/0)
                        (pipe.when
                          {try.#Failure actual_error}
                          (and (text.contains? expected_error actual_error)
                               (text.contains? (exception.error <exception> []) actual_error)
                               (text.contains? (provenance.as_text provenance/0) actual_error))

                          _
                          false)))
                  (_.coverage [/.assertion]
                    (and (|> (/.assertion <exception> [] false)
                             (phase.value state/0)
                             (pipe.when
                               {try.#Failure actual_error}
                               (and (text.contains? (exception.error <exception> []) actual_error)
                                    (text.contains? (provenance.as_text provenance/0) actual_error))

                               _
                               false))
                         (|> (/.assertion <exception> [] true)
                             (phase.value state/0)
                             (pipe.when
                               {try.#Success _}
                               true

                               _
                               false))))
                  )))))

(the test|state
  Test
  (monad.let random.monad
    [version random.natural
     host (random.lower_cased 5)

     expected_module (random.lower_cased 10)
     dummy_module (random.lower_cased 11)

     provenance /provenance.random
     
     expected_file (random.lower_cased 12)
     expected_code (random.lower_cased 13)

     configuration ($configuration.random 5)
     .let [state (has .#provenance provenance
                      (/.state (/.info version host configuration)))]]
    (all _.and
         (_.coverage [/.info]
           (let [it (/.info version host configuration)]
             (and (text.= (version.as_text version)
                          (its .#version it))
                  (identical? host
                              (its .#target it))
                  (..tagged? .#Build (its .#mode it))
                  (identical? configuration (its .#configuration it)))))
         (_.coverage [/.state]
           (let [info (/.info version host configuration)
                 it (/.state info)]
             (and (identical? info
                              (its .#info it))
                  (identical? provenance.dummy
                              (its .#provenance it))
                  (..tagged? .#None (its .#current_module it))
                  (..tagged? .#None (its .#expected it))
                  (list.empty? (its .#modules it))
                  (stack.empty? (its .#scopes it))
                  (list.empty? (its [.#type_context .#for_all] it))
                  (when (its .#source it)
                    [provenance 0 ""]
                    (identical? provenance.dummy provenance)

                    _
                    false))))
         (_.coverage [/.set_current_module]
           (|> (monad.let phase.monad
                 [_ (/.set_current_module expected_module)]
                 (phase.read (|>> (its .#current_module) (maybe.else ""))))
               (phase.value state)
               (pipe.when
                 {try.#Success actual}
                 (identical? expected_module actual)

                 _
                 false)))
         (_.coverage [/.with_current_module]
           (let [current_module (phase.read (|>> (its .#current_module) (maybe.else "")))]
             (|> (monad.let phase.monad
                   [_ (/.set_current_module expected_module)
                    pre current_module
                    mid (/.with_current_module dummy_module
                          current_module)
                    post current_module]
                   (pure (and (identical? expected_module pre)
                              (identical? dummy_module mid)
                              (identical? expected_module post))))
                 (phase.value state)
                 (try.else false))))
         (_.coverage [/.set_provenance]
           (let [expected (provenance.new expected_file)]
             (|> (monad.let phase.monad
                   [_ (/.set_provenance expected)]
                   (phase.read (its .#provenance)))
                 (phase.value state)
                 (pipe.when
                   {try.#Success actual}
                   (identical? expected actual)

                   _
                   false))))
         (_.coverage [/.with_provenance]
           (let [expected (provenance.new expected_file)
                 dummy (provenance.new expected_code)
                 provenance (phase.read (its .#provenance))]
             (|> (monad.let phase.monad
                   [_ (/.set_provenance expected)
                    pre provenance
                    mid (/.with_provenance dummy
                          provenance)
                    post provenance]
                   (pure (and (identical? expected pre)
                              (identical? dummy mid)
                              (identical? expected post))))
                 (phase.value state)
                 (try.else false))))
         (_.coverage [/.source /.set_source_code]
           (let [expected (/.source expected_file expected_code)]
             (|> (monad.let phase.monad
                   [_ (/.set_source_code expected)]
                   (phase.read (its .#source)))
                 (phase.value state)
                 (pipe.when
                   {try.#Success actual}
                   (identical? expected actual)

                   _
                   false))))
         (_.coverage [/.with_source_code]
           (let [expected (/.source expected_file expected_code)
                 dummy (/.source expected_code expected_file)
                 source (phase.read (its .#source))]
             (|> (monad.let phase.monad
                   [_ (/.set_source_code expected)
                    pre source
                    mid (/.with_source_code dummy
                          source)
                    post source]
                   (pure (and (identical? expected pre)
                              (identical? dummy mid)
                              (identical? expected post))))
                 (phase.value state)
                 (try.else false))))
         )))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Term

              @type.Expression
              @type.#Simple
              @type.#Complex
              @type.#Reference
              @type.#When
              @type.#Abstraction
              @type.#Application
              @type.#Extension])
      (monad.let random.monad
        [left (..random 2)
         right (..random 2)]
        (all _.and
             (_.for [/.equivalence]
                    (equivalenceT.spec /.equivalence (..random 2)))
             
             ..test|simple
             ..test|complex
             ..test|reference
             (_.for [/.Reification]
                    ..test|reification)
             (_.for [/.Branch @type.Match]
                    ..test|when)
             (_.for [/.Operation /.Phase /.Handler /.Bundle]
                    ..test|phase)
             (_.for [/.State]
                    ..test|state)
             (_.coverage [/.as_text]
               (bit.= (by /.equivalence = left right)
                      (text.= (/.as_text left) (/.as_text right))))

             /complex.test
             ... /inference.test
             ... /macro.test
             ... /module.test
             /pattern.test
             ... /scope.test
             /simple.test
             ... /type.test
             ... /coverage.test

             ..\\projection
             ))))
