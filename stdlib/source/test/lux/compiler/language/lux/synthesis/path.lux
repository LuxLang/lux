... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" functor)]
     ["[0]" stack (.use "[1]:[0]" functor)]
     ["[0]" dictionary]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" /64 (.only)
      ["n" natural]
      ["[0]" decimal]]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [meta
    ["[0]" name (.only)
     ["[1]T" \\test]]
    ["[0]" provenance
     ["[1]T" \\test]]]
   [compiler
    ["@[0]" type (.only Environment Variable)]
    [language
     [lux
      ["[0]" phase (.only)
       ["[0]" extension]]]]]
   [test
    ["_" property (.only Test)]]
   [type
    ["[0]" check]]
   [aspect
    ["[0]" view]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" //]]])

(the .public test
  Test
  (<| (_.covering /._)
      (<| (monad.let [! random.monad]
            [expected_provenance provenanceT.random

             expected_right? random.bit
             expected_access random.natural
             expected_text (random.lower_cased 1)

             expected_register random.natural
             expected_item random.natural

             .let [random (/.random 1 random.natural)]
             left random
             right random])
          (_.for [/.Path /.random
                  /.:Pop /.:Bind
                  /.:Access /.:List
                  /.:Bit_Fork /.:I64_Fork /.:F64_Fork /.:Text_Fork
                  /.:Or /.:And
                  /.:Then

                  /.Fork

                  /.Road
                  /.:when /.:then])
          (`` (all _.and
                   (_.for [/.equivalence]
                          (equivalenceT.spec (/.equivalence n.equivalence) random))
                   (_.for [/.hash]
                          (hashT.spec (/.hash n.hash) random))
                   
                   (_.coverage [/.as_text]
                     (bit.= (by (/.equivalence n.equivalence) = left right)
                            (text.= (/.as_text (by n.base_10 as) left)
                                    (/.as_text (by n.base_10 as) right))))
                   
                   (,, (template.with [,path]
                         [(_.coverage [,path]
                            (when (is /.Path (,path expected_access expected_right?))
                              (,path actual_access actual_right?)
                              (and (identical? expected_access actual_access)
                                   (identical? expected_right? actual_right?))

                              else
                              false))]

                         [[/.side]
                          [/.member]]))
                   (,, (template.with [,path]
                         [(_.coverage [,path]
                            (when (is /.Path (,path expected_access))
                              (,path actual_access)
                              (identical? expected_access actual_access)

                              else
                              false))]

                         [[/.left_side]
                          [/.right_side]

                          [/.left_member]
                          [/.right_member]]))
                   (,, (template.with [,path]
                         [(let [expected_next (is (/.Path //.Term)
                                                  {/.:Then (//.text expected_provenance expected_text)})]
                            (_.coverage [,path]
                              (when (is (/.Path //.Term)
                                        (,path expected_access expected_next))
                                (,path actual_access actual_next)
                                (and (identical? expected_access actual_access)
                                     (identical? expected_next actual_next))

                                else
                                false)))]

                         [[/.simple_left_side]
                          [/.simple_right_side]]))
                   (_.coverage [/.item]
                     (when (is /.Path (/.item expected_item))
                       (/.item actual_item)
                       (identical? expected_item actual_item)

                       else
                       false))
                   (_.coverage [/.bind_top]
                     (let [expected_after (is /.Path (/.item expected_item))]
                       (when (is /.Path (/.bind_top expected_register expected_after))
                         (/.bind_top actual_register actual_after)
                         (and (identical? expected_register actual_register)
                              (identical? expected_after actual_after))

                         else
                         false)))
                   (_.coverage [/.multi_pop]
                     (let [expected_after (is /.Path (/.item expected_item))]
                       (when (is /.Path (/.multi_pop expected_after))
                         (/.multi_pop actual_after)
                         (identical? expected_after actual_after)

                         else
                         false)))
                   )))
      ))
