... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]
    ["[0]" name (.only)]]
   [test
    ["_" property (.only Test)]]
   [compiler
    ["@[0]" type]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" variable]]]
 ["[0]" /
  ["[1][0]" register]
  ["[1][0]" variable]])

(the constant
  (Random @type.Constant)
  (all random.and
       (random.upper_cased 5)
       (random.lower_cased 5)
       ))

(the .public random
  (Random @type.Reference)
  (all random.or
       /variable.random
       ..constant
       ))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [@type.Reference
              @type.#Constant_Reference @type.#Variable_Reference

              @type.Constant])
      (monad.let random.monad
        [expected_register random.natural
         expected_constant ..constant])
      (`` (all _.and
               (_.for [/.equivalence /.=]
                      (static.when (same? /.equivalence /.=)
                        (equivalenceT.spec /.equivalence ..random)))
               (_.for [/.hash]
                      (hashT.spec /.hash ..random))

               (,, (template.with [<tag>]
                     [(_.coverage [<tag>]
                        (when (<tag> expected_register)
                          (<tag> actual_register)
                          (n.= expected_register actual_register)

                          _
                          false))]

                     [[/.local]
                      [/.foreign]]))

               (_.coverage [/.variable /.self]
                 (and (by /.equivalence = (/.self) (/.variable (variable.self)))
                      (when (/.self)
                        (/.self)
                        true
                        
                        _
                        false)
                      (when (/.variable (variable.self))
                        (/.self)
                        true
                        
                        _
                        false)))
               (_.coverage [/.constant]
                 (when (/.constant expected_constant)
                   (/.constant actual_constant)
                   (name.= expected_constant actual_constant)

                   _
                   false))
               (_.coverage [/.as_text]
                 (and (text.= (/.as_text (/.local expected_register))
                              (variable.as_text {@type.#Local expected_register}))
                      (text.= (/.as_text (/.foreign expected_register))
                              (variable.as_text {@type.#Foreign expected_register}))
                      (text.= (/.as_text (/.constant expected_constant))
                              (name.as_text expected_constant))))
               
               /register.test
               /variable.test
               ))))
