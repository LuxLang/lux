... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list]
     ["[0]" set]
     ["[0]" sequence]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [meta
    ["[0]" configuration (.only)
     ["[1]T" \\test]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[1][0]" key]
   ["[1][0]" registry]
   ["[1][0]" signature]
   ["[1][0]" module (.only)
    ["[2][0]" document]
    ["[2][0]" descriptor]]]]
 ["$[0]" /
  ["[1][0]" signature]
  ["[1][0]" key]
  ["[1][0]" artifact]
  ["[1][0]" registry]
  ["[1][0]" module]
  ["[1][0]" unit]])

(the .public (descriptor module hash)
  (-> /descriptor.Module Natural
      /descriptor.Descriptor)
  [/descriptor.:name module
   /descriptor.:file (text module ".lux")
   /descriptor.:hash hash
   /descriptor.:state {.:Active}
   /descriptor.:references (set.empty text.hash)])

(the test|entry
  Test
  (monad.let random.monad
    [module/0 (random.lower_cased 1)
     module/1 (random.lower_cased 2)
     signature $/signature.random
     .let [version (its /signature.:version signature)]
     fake_version (random.only (|>> (n.= version) not) random.natural)
     content/0 random.natural
     content/1 (random.only (|>> (n.= content/0) not) random.natural)
     hash random.natural
     configuration (configurationT.random 1)
     other_configuration (random.only (|>> (by configuration.equality = configuration)
                                           not)
                                      (configurationT.random 1))
     .let [key (/key.key signature content/0)]]
    (all _.and
         (_.coverage [/.has /.find]
           (|> (monad.let try.monad
                 [[@module/0 archive] (/.reserve module/0 /.empty)
                  .let [entry [/.:module [/module.:id @module/0
                                          /module.:descriptor (..descriptor module/0 hash)
                                          /module.:document (/document.document key content/0)]
                               /.:output sequence.empty
                               /.:registry /registry.empty]]
                  archive (/.has module/0 entry archive)
                  entry' (/.find module/0 archive)]
                 (pure (identical? entry entry')))
               (try.else false)))
         (_.coverage [/.module_is_only_reserved]
           (|> (monad.let try.monad
                 [[@module/0 archive] (/.reserve module/0 /.empty)
                  entry' (/.find module/0 archive)]
                 (pure false))
               (exception.else (exception.is? /.module_is_only_reserved))))
         (_.coverage [/.cannot_replace_document]
           (|> (monad.let try.monad
                 [[@module/0 archive] (/.reserve module/0 /.empty)
                  .let [entry/0 [/.:module [/module.:id @module/0
                                            /module.:descriptor (..descriptor module/0 hash)
                                            /module.:document (/document.document key content/0)]
                                 /.:output sequence.empty
                                 /.:registry /registry.empty]
                        entry/1 [/.:module [/module.:id @module/0
                                            /module.:descriptor (..descriptor module/0 hash)
                                            /module.:document (/document.document key content/1)]
                                 /.:output sequence.empty
                                 /.:registry /registry.empty]]
                  archive (/.has module/0 entry/0 archive)
                  archive (/.has module/0 entry/1 archive)]
                 (pure false))
               (exception.else (exception.is? /.cannot_replace_document))))
         (_.coverage [/.module_must_be_reserved_before_it_can_be_added]
           (|> (monad.let try.monad
                 [.let [entry [/.:module [/module.:id 0
                                          /module.:descriptor (..descriptor module/0 hash)
                                          /module.:document (/document.document key content/0)]
                               /.:output sequence.empty
                               /.:registry /registry.empty]]
                  archive (/.has module/0 entry /.empty)]
                 (pure false))
               (exception.else (exception.is? /.module_must_be_reserved_before_it_can_be_added))))
         (_.coverage [/.archived?]
           (|> (monad.let try.monad
                 [[@module/0 archive] (/.reserve module/0 /.empty)
                  .let [pre (/.archived? archive module/0)
                        entry [/.:module [/module.:id @module/0
                                          /module.:descriptor (..descriptor module/0 hash)
                                          /module.:document (/document.document key content/0)]
                               /.:output sequence.empty
                               /.:registry /registry.empty]]
                  archive (/.has module/0 entry archive)
                  .let [post (/.archived? archive module/0)]]
                 (pure (and (not pre) post)))
               (try.else false)))
         (_.coverage [/.unknown_document]
           (and (|> (monad.let try.monad
                      [_ (/.id module/0 /.empty)]
                      (pure false))
                    (exception.else (exception.is? /.unknown_document)))
                (|> (monad.let try.monad
                      [_ (/.find module/0 /.empty)]
                      (pure false))
                    (exception.else (exception.is? /.unknown_document)))))
         (_.coverage [/.archived]
           (|> (monad.let try.monad
                 [[@module/0 archive] (/.reserve module/0 /.empty)
                  .let [pre (/.archived archive)
                        entry [/.:module [/module.:id @module/0
                                          /module.:descriptor (..descriptor module/0 hash)
                                          /module.:document (/document.document key content/0)]
                               /.:output sequence.empty
                               /.:registry /registry.empty]]
                  archive (/.has module/0 entry archive)
                  .let [post (/.archived archive)
                        (open "list:[0]") (list.equality text.equality)]]
                 (pure (and (list:= (list) pre)
                            (list:= (list module/0) post))))
               (try.else false)))
         (_.coverage [/.entries]
           (|> (monad.let try.monad
                 [[@module/0 archive] (/.reserve module/0 /.empty)
                  .let [pre (/.entries archive)
                        entry [/.:module [/module.:id @module/0
                                          /module.:descriptor (..descriptor module/0 hash)
                                          /module.:document (/document.document key content/0)]
                               /.:output sequence.empty
                               /.:registry /registry.empty]]
                  archive (/.has module/0 entry archive)]
                 (pure (and (list.empty? pre)
                            (when (/.entries archive)
                              (list [module/0' @module/0' entry'])
                              (and (identical? module/0 module/0')
                                   (identical? @module/0 @module/0')
                                   (when entry'
                                     {.:Some entry'}
                                     (identical? entry entry')

                                     else
                                     false))

                              _
                              false))))
               (try.else false)))
         (_.coverage [/.export /.import]
           (|> (monad.let try.monad
                 [[@module/0 archive] (/.reserve module/0 /.empty)
                  [@module/1 archive] (/.reserve module/1 archive)
                  .let [entry/0 [/.:module [/module.:id @module/0
                                            /module.:descriptor (..descriptor module/0 hash)
                                            /module.:document (/document.document key content/0)]
                                 /.:output sequence.empty
                                 /.:registry /registry.empty]
                        entry/1 [/.:module [/module.:id @module/1
                                            /module.:descriptor (..descriptor module/1 hash)
                                            /module.:document (/document.document key content/1)]
                                 /.:output sequence.empty
                                 /.:registry /registry.empty]]
                  archive (/.has module/0 entry/0 archive)
                  archive (/.has module/1 entry/1 archive)
                  .let [pre (/.reserved archive)]
                  archive (|> archive
                              (/.export version configuration)
                              (/.import version configuration))
                  .let [post (/.reserved archive)]]
                 (pure (set.= (set.of_list text.hash pre)
                              (set.of_list text.hash post))))
               (try.else false)))
         (_.coverage [/.version_mismatch]
           (|> (monad.let try.monad
                 [archive (|> /.empty
                              (/.export version configuration)
                              (/.import fake_version configuration))]
                 (pure false))
               (exception.else (exception.is? /.version_mismatch))))
         (_.coverage [/.configuration_mismatch]
           (|> (monad.let try.monad
                 [archive (|> /.empty
                              (/.export version configuration)
                              (/.import version other_configuration))]
                 (pure false))
               (exception.else (exception.is? /.configuration_mismatch))))
         (_.coverage [/.composite]
           (|> (monad.let try.monad
                 [[@module/0 archive] (/.reserve module/0 /.empty)
                  [@module/1 archive] (/.reserve module/1 archive)
                  .let [entry/0 [/.:module [/module.:id @module/0
                                            /module.:descriptor (..descriptor module/0 hash)
                                            /module.:document (/document.document key content/0)]
                                 /.:output sequence.empty
                                 /.:registry /registry.empty]
                        entry/1 [/.:module [/module.:id @module/1
                                            /module.:descriptor (..descriptor module/1 hash)
                                            /module.:document (/document.document key content/1)]
                                 /.:output sequence.empty
                                 /.:registry /registry.empty]]
                  archive (/.has module/0 entry/0 archive)
                  archive (/.has module/1 entry/1 archive)
                  .let [expected (set.of_list text.hash (/.reserved archive))
                        identity_to_the_left (/.composite /.empty archive)
                        identity_to_the_right (/.composite archive /.empty)
                        idempotence (/.composite archive archive)]]
                 (pure (and (and (set.= expected
                                        (set.of_list text.hash (/.reserved identity_to_the_left)))
                                 (set.= expected
                                        (set.of_list text.hash (/.archived identity_to_the_left))))
                            (and (set.= expected
                                        (set.of_list text.hash (/.reserved identity_to_the_right)))
                                 (set.= expected
                                        (set.of_list text.hash (/.archived identity_to_the_right))))
                            (set.= expected
                                   (set.of_list text.hash (/.reserved idempotence))))))
               (try.else false)))
         )))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let random.monad
        [module/0 (random.lower_cased 1)
         module/1 (random.lower_cased 2)
         signature $/signature.random
         content/0 random.natural
         content/1 (random.only (|>> (n.= content/0) not) random.natural)
         hash random.natural
         .let [key (/key.key signature content/0)]])
      (all _.and
           (<| (_.for [/.Archive])
               (all _.and
                    (_.coverage [/.empty]
                      (list.empty? (/.entries /.empty)))
                    (_.coverage [/.reserve /.id]
                      (|> (monad.let try.monad
                            [[@module/0 archive] (/.reserve module/0 /.empty)
                             [@module/1 archive] (/.reserve module/1 archive)
                             @module/0' (/.id module/0 archive)
                             @module/1' (/.id module/1 archive)]
                            (pure (and (identical? @module/0 @module/0')
                                       (identical? @module/1 @module/1'))))
                          (try.else false)))
                    (_.coverage [/.reserved]
                      (|> (monad.let try.monad
                            [[@module/0 archive] (/.reserve module/0 /.empty)
                             [@module/1 archive] (/.reserve module/1 archive)]
                            (pure (set.= (set.of_list text.hash (list module/0 module/1))
                                         (set.of_list text.hash (/.reserved archive)))))
                          (try.else false)))
                    (_.coverage [/.reservations]
                      (|> (monad.let try.monad
                            [[@module/0 archive] (/.reserve module/0 /.empty)
                             [@module/1 archive] (/.reserve module/1 archive)
                             .let [hash (product.hash text.hash n.hash)]]
                            (pure (set.= (set.of_list hash (list [module/0 @module/0] [module/1 @module/1]))
                                         (set.of_list hash (/.reservations archive)))))
                          (try.else false)))
                    (_.coverage [/.module_has_already_been_reserved]
                      (|> (monad.let try.monad
                            [[@module/0 archive] (/.reserve module/0 /.empty)
                             _ (/.reserve module/0 archive)]
                            (pure false))
                          (exception.else (exception.is? /.module_has_already_been_reserved))))
                    (_.coverage [/.reserved?]
                      (|> (monad.let try.monad
                            [[@module/0 archive] (/.reserve module/0 /.empty)]
                            (pure (and (/.reserved? archive module/0)
                                       (not (/.reserved? archive module/1)))))
                          (try.else false)))))
           (_.for [/.Entry
                   /.:module
                   /.:output /.Output
                   /.:registry]
                  ..test|entry)

           $/signature.test
           $/key.test
           $/artifact.test
           $/registry.test
           $/module.test
           $/unit.test
           )))
