... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [control
    ["[0]" pipe]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]]
   [data
    ["[0]" product]
    ["[0]" maybe]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" monoid monad)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" configuration (.only)
     ["$[1]" \\test]]]
   ["[0]" program
    ["<[1]>" \\projection]]
   [test
    ["_" property (.only Test)]]
   [aspect
    ["[0]" view]]]]
 [\\library
  ["[0]" / (.only)
   ["[1][0]" compiler (.only Compiler)]]]
 ["$[0]" /
  ["[1][0]" compiler]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Service
              /.:Compilation /.:Interpretation /.:Export
              
              /.service])
      (let [(open "list:[0]") (list.equality text.equality)
            (open "maybe:[0]") (maybe.equality text.equality)])
      (monad.let [! random.monad]
        [amount (by ! each (|>> (n.% 5) ++) random.natural)
         sources (random.list amount (random.lower_cased 1))
         host_dependencies (random.list amount (random.lower_cased 2))
         libraries (random.list amount (random.lower_cased 3))
         resource (random.lower_cased 4)
         target (random.lower_cased 5)
         module (random.lower_cased 6)
         program (random.lower_cased 7)
         compilers (random.list amount $/compiler.random)
         configuration ($configuration.random 5)
         .let [compilation' (all list:composite
                                 (list:conjoint (list:each (|>> (list "--host_dependency")) host_dependencies))
                                 (list:conjoint (list:each (|>> (list "--library")) libraries))
                                 (list:conjoint (list:each (|>> /compiler.as_text (list "--compiler")) compilers))
                                 (list:conjoint (list:each (|>> (list "--source")) sources))
                                 (list "--resources" resource
                                       "--target" target
                                       "--module" module
                                       "--configuration" (configuration.as_text configuration)))
               export (all list:composite
                           (list:conjoint (list:each (|>> (list "--source")) sources))
                           (list "--target" target))]]
        (all _.and
             (_.for [/.Compilation
                     /.:host_dependencies /.:libraries /.:compilers /.:sources /.:resources /.:target /.:module /.:program /.:configuration]
                    (`` (all _.and
                             (,, (template.with [<type> <slot> <?>]
                                   [(_.coverage [<type>]
                                      (|> /.service
                                          (<program>.value (view.as list.stack (list:composite (list "build") compilation')))
                                          (try:each (|>> (pipe.when
                                                           {/.:Compilation it}
                                                           (|> it
                                                               (its <slot>)
                                                               <?>)
                                                           
                                                           _
                                                           false)))
                                          (try.else false)))]

                                   [[/.Host_Dependency /.:host_dependencies (list:= host_dependencies)]
                                    [/.Library /.:libraries (list:= libraries)]
                                    [/compiler.Compiler /.:compilers (by (list.equality /compiler.equality) = compilers)]
                                    [/.Source /.:sources (list:= sources)]
                                    [/.Resource /.:resources (maybe:= {.:Some resource})]
                                    [/.Target /.:target (identical? target)]
                                    [/.Module /.:module (identical? module)]
                                    [configuration.Configuration /.:configuration (configuration.= configuration)]]))
                             )))
             (_.coverage [/.Interpretation]
               (`` (and (,, (template.with [<slot> <?>]
                              [(|> /.service
                                   (<program>.value (view.as list.stack (list:composite (list "repl") compilation')))
                                   (try:each (|>> (pipe.when
                                                    {/.:Interpretation it}
                                                    (|> it
                                                        (its <slot>)
                                                        <?>)
                                                    
                                                    _
                                                    false)))
                                   (try.else false))]

                              [[/.:host_dependencies (list:= host_dependencies)]
                               [/.:libraries (list:= libraries)]
                               [/.:compilers (by (list.equality /compiler.equality) = compilers)]
                               [/.:sources (list:= sources)]
                               [/.:resources (maybe:= {.:Some resource})]
                               [/.:target (identical? target)]
                               [/.:module (identical? module)]
                               [/.:configuration (configuration.= configuration)]])))))
             (_.coverage [/.Export]
               (`` (and (,, (template.with [<side> <?>]
                              [(|> /.service
                                   (<program>.value (view.as list.stack (list:composite (list "export") export)))
                                   (try:each (|>> (pipe.when
                                                    {/.:Export it}
                                                    (|> it
                                                        <side>
                                                        <?>)
                                                    
                                                    _
                                                    false)))
                                   (try.else false))]

                              [[product.left (list:= sources)]
                               [product.right (identical? target)]])))))
             (_.coverage [/.target]
               (`` (and (,, (template.with [<it>]
                              [(identical? target (/.target <it>))]

                              [[{/.:Compilation [/.:host_dependencies host_dependencies
                                                 /.:libraries libraries
                                                 /.:compilers compilers
                                                 /.:sources sources
                                                 /.:resources {.:Some resource}
                                                 /.:target target
                                                 /.:module module
                                                 /.:program {.:Some program}
                                                 /.:configuration configuration]}]
                               [{/.:Interpretation [/.:host_dependencies host_dependencies
                                                    /.:libraries libraries
                                                    /.:compilers compilers
                                                    /.:sources sources
                                                    /.:resources {.:Some resource}
                                                    /.:target target
                                                    /.:module module
                                                    /.:program {.:Some program}
                                                    /.:configuration configuration]}]
                               [{/.:Export [sources target]}]])))))
             (_.coverage [/.resources]
               (`` (and (,, (template.with [,expectation <it>]
                              [(by (maybe.equality text.equality) =
                                   ,expectation
                                   (/.resources <it>))]

                              [[{.:Some resource}
                                {/.:Compilation [/.:host_dependencies host_dependencies
                                                 /.:libraries libraries
                                                 /.:compilers compilers
                                                 /.:sources sources
                                                 /.:resources {.:Some resource}
                                                 /.:target target
                                                 /.:module module
                                                 /.:program {.:Some program}
                                                 /.:configuration configuration]}]
                               [{.:Some resource}
                                {/.:Interpretation [/.:host_dependencies host_dependencies
                                                    /.:libraries libraries
                                                    /.:compilers compilers
                                                    /.:sources sources
                                                    /.:resources {.:Some resource}
                                                    /.:target target
                                                    /.:module module
                                                    /.:program {.:Some program}
                                                    /.:configuration configuration]}]
                               [{.:None}
                                {/.:Export [sources target]}]])))))

             $/compiler.test
             ))))
