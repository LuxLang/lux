... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [error
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" product]
    ["[0]" text]
    ["[0]" binary
     ["[1]" \\injection]
     ["<[1]>" \\projection]]
    [collection
     ["[0]" sequence (.only Sequence)]
     ["[0]" set (.only Set)]
     ["[0]" list (.use "[1]#[0]" mix functor)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [macro
    ["[0]" template]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" unit]
    ["[0]" artifact (.only)
     ["[0]" category]
     ["[0]" definition]]]]])

(the tagged?
  (template.macro (_ <tag> <it>)
    [(when <it>
       {<tag> _}
       true
       
       _
       false)]))

(the random_dependency
  (Random unit.ID)
  (all random.and
       random.natural
       random.natural
       ))

(the (random_dependencies amount)
  (-> Natural (Random (Set unit.ID)))
  (random.set unit.hash amount ..random_dependency))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Registry])
      (do [! random.monad]
        [expected_name (random.lower_cased 5)
         mandatory? random.bit
         expected_dependencies (..random_dependencies 5)
         
         expected_amount (by ! each (n.% 10) random.natural)
         expected_names (|> (random.lower_cased 1)
                            (random.set text.hash expected_amount)
                            (by ! each set.as_list))]
        (`` (all _.and
                 (_.coverage [/.empty]
                   (|> /.empty
                       /.artifacts
                       sequence.size
                       (n.= 0)))
                 (_.coverage [/.resource]
                   (let [[@it registry] (/.resource mandatory? expected_dependencies /.empty)]
                     (when (sequence.as_list (/.artifacts registry))
                       (list [artifact actual_dependencies])
                       (and (same? @it (its artifact.#id artifact))
                            (same? mandatory? (its artifact.#mandatory? artifact))
                            (tagged? category.#Anonymous (its artifact.#category artifact))
                            (same? expected_dependencies actual_dependencies))

                       _
                       false)))
                 (,, (template.with [<new> <expected>' <query> <tag>]
                       [(_.coverage [<new> <query>]
                          (let [<expected> <expected>'
                                [@it registry] (<new> <expected> mandatory? expected_dependencies /.empty)]
                            (and (when (<query> registry)
                                   (list actual_name)
                                   (same? <expected> actual_name)

                                   _
                                   false)
                                 (when (sequence.as_list (/.artifacts registry))
                                   (list [artifact actual_dependencies])
                                   (and (same? @it (its artifact.#id artifact))
                                        (same? mandatory? (its artifact.#mandatory? artifact))
                                        (when (its artifact.#category artifact)
                                          {<tag> actual_name}
                                          (same? <expected> actual_name)

                                          _
                                          false)
                                        (same? expected_dependencies actual_dependencies))

                                   _
                                   false))))]

                       [/.definition (is definition.Definition [expected_name {.#None}]) /.definitions category.#Definition]
                       [/.custom expected_name /.customs category.#Custom]
                       ))
                 (_.coverage [/.id]
                   (and (,, (template.with [<new> <expected>' <name>]
                              [(let [<expected> <expected>'
                                     [@expected registry] (<new> <expected> mandatory? expected_dependencies /.empty)]
                                 (|> (/.id (<name> <expected>) registry)
                                     (maybe#each (same? @expected))
                                     (maybe.else false)))]

                              [/.definition (is definition.Definition [expected_name {.#None}]) product.left]
                              [/.custom expected_name |>]
                              ))))
                 (_.coverage [/.artifacts]
                   (and (,, (template.with [<new> <query> <equivalence> <$>]
                              [(let [expected/* (list#each <$> expected_names)
                                     [ids registry] (is [(Sequence artifact.ID) /.Registry]
                                                        (list#mix (function (_ expected [ids registry])
                                                                    (let [[@new registry] (<new> expected mandatory? expected_dependencies registry)]
                                                                      [(sequence.suffix @new ids) registry]))
                                                                  [sequence.empty /.empty]
                                                                  expected/*))
                                     it (/.artifacts registry)]
                                 (and (n.= expected_amount (sequence.size it))
                                      (list.every? (function (_ [@it [it dependencies]])
                                                     (same? @it (its artifact.#id it)))
                                                   (list.zipped_2 (sequence.as_list ids)
                                                                  (sequence.as_list it)))
                                      (by (list.equivalence <equivalence>) = expected/* (<query> registry))))]

                              [/.definition /.definitions definition.equivalence (is (-> Text definition.Definition)
                                                                                     (function (_ it)
                                                                                       [it {.#None}]))]
                              [/.custom /.customs text.equivalence (|>>)]
                              ))))
                 (_.coverage [/.as_binary /.of_binary]
                   (and (,, (template.with [<new> <expected>' <name>]
                              [(let [<expected> <expected>'
                                     [@expected before] (<new> <expected> mandatory? expected_dependencies /.empty)]
                                 (|> before
                                     (binary.value /.as_binary)
                                     (<binary>.value /.of_binary)
                                     (try#each (|>> (/.id (<name> <expected>))
                                                    (maybe#each (same? @expected))
                                                    (maybe.else false)))
                                     (try.else false)))]

                              [/.definition (is definition.Definition [expected_name {.#None}]) product.left]
                              [/.custom expected_name |>]
                              ))))
                 )))))
