... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future]]
   [control
    ["[0]" pipe]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]]
   [data
    ["[0]" product]
    [format
     ["[0]" tar]]
    ["[0]" binary (.only Binary)
     ["<[1]>" \\projection]]
    ["[0]" text (.only)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" sequence]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" expansion]]
   [world
    ["[0]" file]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" io
     ["[1]" context]]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [.let [/ .module_delimiter]
         source/0 (random.lower_cased 1)
         source/1 (random.lower_cased 2)
         target (random.lower_cased 3)

         .let [random_file (is (Random file.Path)
                               (by ! each (text.suffix io.lux_extension) (random.lower_cased 4)))]
         file/0' random_file
         .let [file/0 (text source/0 / file/0')]
         
         dir/0 (random.lower_cased 5)
         file/1' (by ! each (|>> (text dir/0 /)) random_file)
         .let [file/1 (text source/1 / file/1')]
         
         .let [random_content (is (Random Binary)
                                  (by ! each (|>> %.natural (by utf8.binary as)) random.natural))]
         content/0 random_content
         content/1 random_content]
        (all _.and
             (pure (monad.let [! future.monad]
                     [it (monad.let (try.with !)
                           [.let [fs (file.memory /)]
                            _ (by fs make_directory source/0)
                            _ (by fs write file/0 content/0)
                            
                            _ (by fs make_directory source/1)
                            _ (by fs make_directory (text source/1 / dir/0))
                            _ (by fs write file/1 content/1)

                            _ (by fs make_directory target)
                            library_tar (/.library fs (list source/0 source/1))
                            _ (/.export fs [(list source/0 source/1) target])
                            export_tar (by fs read (text target / /.file))
                            export_tar (by ! pure (<binary>.value tar.of_binary export_tar))]
                           (pure [library_tar export_tar]))]
                     (all unit.and
                          (unit.coverage [/.library /.mode /.ownership]
                            (|> it
                                (try:each (|>> product.left
                                               sequence.as_list
                                               (pipe.when
                                                 (list {tar.:Normal [actual_path/0 when/0 mode/0 ownership/0 actual_content/0]}
                                                       {tar.:Normal [actual_path/1 when/1 mode/1 ownership/1 actual_content/1]})
                                                 (expansion.let [<test> (and (and (text.= file/0' (tar.from_path actual_path/0))
                                                                                  (identical? /.mode mode/0)
                                                                                  (identical? /.ownership ownership/0)
                                                                                  (binary.= content/0 (tar.data actual_content/0)))
                                                                             (and (text.= file/1' (tar.from_path actual_path/1))
                                                                                  (identical? /.mode mode/1)
                                                                                  (identical? /.ownership ownership/1)
                                                                                  (binary.= content/1 (tar.data actual_content/1))))]
                                                   (or <test>
                                                       (let [[[actual_path/0 actual_content/0] [actual_path/1 actual_content/1]]
                                                             [[actual_path/1 actual_content/1] [actual_path/0 actual_content/0]]]
                                                         <test>)))
                                                 
                                                 _
                                                 false)))
                                (try.else false)))
                          (unit.coverage [/.export /.file]
                            (|> it
                                (try:each (|>> product.right
                                               sequence.as_list
                                               (pipe.when
                                                 (list {tar.:Normal [actual_path/0 _ _ _ actual_content/0]}
                                                       {tar.:Normal [actual_path/1 _ _ _ actual_content/1]})
                                                 (expansion.let [<test> (and (and (text.= file/0' (tar.from_path actual_path/0))
                                                                                  (binary.= content/0 (tar.data actual_content/0)))
                                                                             (and (text.= file/1' (tar.from_path actual_path/1))
                                                                                  (binary.= content/1 (tar.data actual_content/1))))]
                                                   (or <test>
                                                       (let [[[actual_path/0 actual_content/0] [actual_path/1 actual_content/1]]
                                                             [[actual_path/1 actual_content/1] [actual_path/0 actual_content/0]]]
                                                         <test>)))
                                                 
                                                 _
                                                 false)))
                                (try.else false)))
                          )))
             ))))
