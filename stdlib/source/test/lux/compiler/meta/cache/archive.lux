... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]]
   [data
    ["[0]" binary]
    [collection
     ["[0]" sequence]]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [meta
    ["[0]" configuration
     ["[1]T" \\test]]]
   [world
    ["[0]" file]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.only)
    ["/[1]" // (.only)
     ["[0]" archive (.only)
      ["[0]" signature]
      ["[0]" key]
      ["[0]" registry]
      ["[0]" module (.only)
       ["[0]" document]]]]]]]
 ["$" //
  [//
   ["[1][0]" archive (.only)
    ["[2][0]" signature]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [.let [/ "/"
               fs (file.memory /)]
         module/0 (random.lower_cased 1)
         module/1 (random.lower_cased 2)
         content/0 random.natural
         content/1 (random.only (|>> (n.= content/0) not) random.natural)
         hash random.natural
         signature $signature.random
         configuration (configurationT.random 1)
         .let [key (key.key signature content/0)
               [archive expected] (|> (monad.let try.monad
                                        [[@module/0 archive] (archive.reserve module/0 archive.empty)
                                         [@module/1 archive] (archive.reserve module/1 archive)
                                         .let [entry/0 [archive.:module [module.:id @module/0
                                                                         module.:descriptor ($archive.descriptor module/0 hash)
                                                                         module.:document (document.document key content/0)]
                                                        archive.:output sequence.empty
                                                        archive.:registry registry.empty]
                                               entry/1 [archive.:module [module.:id @module/1
                                                                         module.:descriptor ($archive.descriptor module/1 hash)
                                                                         module.:document (document.document key content/1)]
                                                        archive.:output sequence.empty
                                                        archive.:registry registry.empty]]
                                         archive (archive.has module/0 entry/0 archive)
                                         archive (archive.has module/1 entry/1 archive)]
                                        (pure [archive (archive.export ///.version configuration archive)]))
                                      try.trusted)]]
        (all _.and
             (_.test "TO-DO" true)
             ... (pure (monad.let [! future.monad]
             ...       [pre/0 (by fs file? (/.descriptor fs))
             ...        enabled? (//.enable! ! fs)
             ...        cached? (/.cache! fs configuration archive)
             ...        actual (by fs read (/.descriptor fs))
             ...        post/0 (by fs file? (/.descriptor fs))]
             ...       (unit.coverage [/.descriptor /.cache!]
             ...         (and (not pre/0)
             ...              (|> (monad.let try.monad
             ...                    [_ enabled?
             ...                     _ cached?]
             ...                    actual)
             ...                  (try:each (binary.= expected))
             ...                  (try.else false))
             ...              post/0))))
             ))))
