(.require
 [library
  [lux (.except)
   ["_" test (.only Test)]
   ["[0]" static]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.only)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list]]]
   [macro
    ["^" pattern]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" functor)]
    [number
     ["n" nat]]]
   ["[0]" meta (.only)
    ["[0]" location]
    ["[0]" symbol]
    ["[0]" code (.use "[1]#[0]" equivalence)
     ["<[1]>" \\parser]]]]]
 [\\library
  ["[0]" / (.only)
   [syntax (.only syntax)]
   ["[0]" template]]]
 ["[0]" /
  ["[1][0]" local]
  ["[1][0]" syntax]
  ["[1][0]" template]
  ["[1][0]" pattern]
  ["[1][0]" context]])

(def !expect
  (template (_ <pattern> <value>)
    [(case <value>
       <pattern> true
       _ false)]))

(def !global
  (template (_ <definition>)
    [(is [Text .Global]
         [(template.text [<definition>]) {.#Definition [true .Macro <definition>]}])]))

(def pow/2
  (syntax (_ [number <code>.any])
    (in (list (` (n.* (~ number) (~ number)))))))

(def pow/4
  (syntax (_ [number <code>.any])
    (in (list (` (..pow/2 (..pow/2 (~ number))))))))

(def repeated
  (syntax (_ [times <code>.nat
              token <code>.any])
    (in (list.repeated times token))))

(def fresh_symbol
  (syntax (_ [])
    (do meta.monad
      [g!fresh (/.symbol "fresh")]
      (in (list g!fresh)))))

(def random_lux
  (Random [Nat Text .Lux])
  (do [! random.monad]
    [seed random.nat
     symbol_prefix (random.upper_case 1)
     .let [macro_module (symbol.module (symbol /._))
           current_module (symbol.module (symbol .._))]]
    (in [seed
         symbol_prefix
         [.#info            [.#target ""
                             .#version ""
                             .#mode {.#Build}
                             .#configuration (list)]
          .#source          [location.dummy 0 ""]
          .#location         location.dummy
          .#current_module  {.#Some current_module}
          .#modules         (list [macro_module
                                   [.#module_hash        0
                                    .#module_aliases     (list)
                                    .#definitions        (is (List [Text .Global])
                                                             (list (!global /.log_single_expansion!)
                                                                   (!global /.log_expansion!)
                                                                   (!global /.log_full_expansion!)))
                                    .#imports            (list)
                                    .#module_state       {.#Active}]]
                                  [current_module
                                   [.#module_hash        0
                                    .#module_aliases     (list)
                                    .#definitions        (is (List [Text .Global])
                                                             (list (!global ..pow/2)
                                                                   (!global ..pow/4)
                                                                   (!global ..repeated)))
                                    .#imports            (list)
                                    .#module_state       {.#Active}]])
          .#scopes          (list)
          .#type_context    [.#ex_counter 0
                             .#var_counter 0
                             .#var_bindings (list)]
          .#expected        {.#None}
          .#seed            seed
          .#scope_type_vars (list)
          .#extensions      []
          .#eval            (as (-> Type Code (Meta Any)) [])
          .#host            []]])))

(def iterated
  (syntax (_ [cycle <code>.nat
              it <code>.any])
    (in (list (case cycle
                0 it
                _ (` (..iterated (~ (code.nat (-- cycle))) (~ it))))))))

(def test|expansion
  Test
  (do [! random.monad]
    [[seed symbol_prefix lux] ..random_lux

     pow/1 (at ! each code.nat random.nat)

     repetitions (at ! each (n.% 10) random.nat)
     .let [single_expansion (` (..pow/2 (..pow/2 (~ pow/1))))
           expansion (` (n.* (..pow/2 (~ pow/1))
                             (..pow/2 (~ pow/1))))
           full_expansion (` (n.* (n.* (~ pow/1) (~ pow/1))
                                  (n.* (~ pow/1) (~ pow/1))))]]
    (`` (all _.and
             (~~ (with_template [<expander> <logger> <expansion>]
                   [(_.coverage [<expander>]
                      (|> (<expander> (` (..pow/4 (~ pow/1))))
                          (meta.result lux)
                          (try#each (at (list.equivalence code.equivalence) =
                                        (list <expansion>)))
                          (try.else false)))

                    (_.coverage [<logger>]
                      (and (|> (/.single_expansion (` (<logger> "omit" (..pow/4 (~ pow/1)))))
                               (meta.result lux)
                               (try#each (at (list.equivalence code.equivalence) = (list)))
                               (try.else false))
                           (|> (/.single_expansion (` (<logger> (..pow/4 (~ pow/1)))))
                               (meta.result lux)
                               (try#each (at (list.equivalence code.equivalence) = (list <expansion>)))
                               (try.else false))))]

                   [/.single_expansion /.log_single_expansion! single_expansion]
                   [/.expansion        /.log_expansion!        expansion]
                   [/.full_expansion   /.log_full_expansion!   full_expansion]
                   ))
             (_.coverage [/.one_expansion]
               (bit#= (not (n.= 1 repetitions))
                      (|> (/.one_expansion (` (..repeated (~ (code.nat repetitions)) (~ pow/1))))
                          (meta.result lux)
                          (!expect {try.#Failure _}))))
             (_.coverage [/.final]
               (with_expansions [<expected> (static.random_nat)
                                 <cycles> (static.random code.nat
                                                         (random#each (|>> (n.% 5) ++) random.nat))
                                 <actual> (/.final (..iterated <cycles> <expected>))]
                 (case (' <actual>)
                   [_ {.#Nat actual}]
                   (n.= <expected> actual)

                   _
                   false)))
             (_.coverage [/.times]
               (with_expansions [<expected> (static.random_nat)
                                 <max> (static.random code.nat
                                                      (random#each (|>> (n.% 10) (n.+ 2)) random.nat))
                                 <cycles> (static.random code.nat
                                                         (random#each (|>> (n.% <max>) ++) random.nat))
                                 <actual> (/.times <cycles> (..iterated <max> <expected>))]
                 (let [expected_remaining (n.- <cycles> <max>)]
                   (case (` <actual>)
                     (^.` (..iterated (~ [_ {.#Nat actual_remaining}]) (~ [_ {.#Nat actual}])))
                     (and (n.= expected_remaining actual_remaining)
                          (n.= <expected> actual))

                     _
                     false))))
             ))))

(def sum
  (macro (_ tokens)
    (loop (again [tokens tokens
                  output 0])
      (case tokens
        {.#End}
        (at meta.monad in (list (code.nat output)))
        
        {.#Item [_ {.#Nat head}] tail}
        (again tail (n.+ head output))

        _
        (meta.failure "")))))

(def sum'
  (macro (_ tokens lux)
    ((/.function ..sum) tokens lux)))

(def .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (do [! random.monad]
             [[seed symbol_prefix lux] ..random_lux]
             (all _.and
                  (_.coverage [/.symbol]
                    (|> (/.symbol symbol_prefix)
                        (at meta.monad each %.code)
                        (meta.result lux)
                        (!expect (^.multi {try.#Success actual_symbol}
                                          (and (text.contains? symbol_prefix actual_symbol)
                                               (text.contains? (%.nat seed) actual_symbol))))))
                  (_.coverage [/.wrong_syntax_error]
                    (|> (/.single_expansion (` (/.log_single_expansion!)))
                        (meta.result lux)
                        (!expect (^.multi {try.#Failure error}
                                          (text.contains? (/.wrong_syntax_error (symbol /.log_single_expansion!))
                                                          error)))))
                  (_.coverage [/.with_symbols]
                    (with_expansions [<expected> (fresh_symbol)]
                      (|> (/.with_symbols [<expected>]
                            (at meta.monad in <expected>))
                          (meta.result lux)
                          (!expect (^.multi {try.#Success [_ {.#Symbol ["" actual]}]}
                                            (text.contains? (template.text [<expected>])
                                                            actual))))))
                  (_.coverage [/.function]
                    (with_expansions [n/0 (static.random_nat)
                                      n/1 (static.random_nat)
                                      n/1 (static.random_nat)]
                      (n.= (..sum n/0 n/1 n/1)
                           (..sum' n/0 n/1 n/1))))
                  ))

           ..test|expansion
           
           /local.test
           /syntax.test
           /template.test
           /pattern.test
           /context.test
           )))
