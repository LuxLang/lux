... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only Monad do)]]
   [control
    ["[0]" pipe]
    ["[0]" io (.only IO)]
    ["[0]" try (.only Try)]
    ["[0]" function]
    [concurrency
     ["[0]" async (.use "[1]#[0]" functor)]]]
   [data
    ["[0]" binary]
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection (.only format)]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" dictionary]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" nat]]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.only)
    [response (.only Response)]
    ["[0]" header]
    ["[1][0]" status]]]])

(the (verification ! expected response)
  (All (_ !)
    (-> (Monad !) Nat (! (Try (Response !)))
        (! Bit)))
  (do !
    [response response]
    (when response
      {try.#Success response}
      (|> response
          product.right
          (its //.#body)
          (function.on {.#None})
          (of ! each (|>> (pipe.do try.monad
                            []
                            [product.right (of utf8.codec projection)]
                            [(of nat.decimal projection)]
                            [(nat.= expected) in])
                          (try.else false))))
      
      {try.#Failure error}
      (in false))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Client])
      (do [! random.monad]
        [on_post random.nat
         on_get random.nat
         on_put random.nat
         on_patch random.nat
         on_delete random.nat
         on_head random.nat
         on_connect random.nat
         on_options random.nat
         on_trace random.nat
         num_headers (of ! each (nat.% 10) random.nat)
         headers (random.dictionary text.hash num_headers (random.lower_cased 3) (random.lower_cased 3))
         .let [mock (is (/.Client IO)
                        (implementation
                         (the (request method url headers data)
                           (io.io (let [value (when method
                                                {//.#Post} on_post
                                                {//.#Get} on_get
                                                {//.#Put} on_put
                                                {//.#Patch} on_patch
                                                {//.#Delete} on_delete
                                                {//.#Head} on_head
                                                {//.#Connect} on_connect
                                                {//.#Options} on_options
                                                {//.#Trace} on_trace)
                                        data (|> value
                                                 (of nat.decimal injection)
                                                 (of utf8.codec injection))]
                                    {try.#Success [//status.ok
                                                   [//.#headers headers
                                                    //.#body (function (_ ?wanted_bytes)
                                                               (io.io {try.#Success [(binary.size data)
                                                                                     data]}))]]})))))]]
        (with_expansions [<cases> (these [/.post on_post]
                                         [/.get on_get]
                                         [/.put on_put]
                                         [/.patch on_patch]
                                         [/.delete on_delete]
                                         [/.head on_head]
                                         [/.connect on_connect]
                                         [/.options on_options]
                                         [/.trace on_trace])]
          (`` (all _.and
                   (,, (with_template [<definition> <expected>]
                         [(_.coverage [<definition>]
                            (|> (<definition> "" header.empty {.#None} mock)
                                (verification io.monad <expected>)
                                io.run!))]

                         <cases>
                         ))
                   (_.coverage [/.headers]
                     (nat.= (dictionary.size headers)
                            (|> headers
                                dictionary.entries
                                /.headers
                                dictionary.size)))
                   (in (do [! async.monad]
                         [.let [mock (/.async mock)]
                          (,, (with_template [<definition> <expected>]
                                [<expected> (|> (<definition> "" header.empty {.#None} mock)
                                                (verification ! <expected>))]

                                <cases>))]
                         (unit.coverage [/.async]
                           (and (,, (with_template [<definition> <expected>]
                                      [<expected>]

                                      <cases>))))))
                   ))))))
