... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only Monad
                  do)]]
   [concurrency
    ["[0]" future]]
   [control
    ["[0]" pipe]
    ["[0]" io (.only IO)]]
   [error
    ["[0]" try (.only Try)]]
   ["[0]" function]
   [data
    ["[0]" binary]
    ["[0]" product]
    ["[0]" text (.only)
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list]
     ["[0]" dictionary]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" natural]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.only)
    [response (.only Response)]
    ["[0]" header]
    ["[1][0]" status]]]])

(the (verification ! expected response)
  (for_any (_ !)
    (-> (Monad !) Natural (! (Try (Response !)))
        (! Bit)))
  (do !
    [response response]
    (when response
      {try.#Success response}
      (|> response
          product.right
          (its //.#body)
          (function.on {.#None})
          (by ! each (|>> (pipe.do try.monad
                            []
                            [product.right (by utf8.binary of)]
                            [(by natural.base_10 of)]
                            [(natural.= expected) in])
                          (try.else false))))
      
      {try.#Failure error}
      (in false))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Client])
      (do [! random.monad]
        [on_post random.natural
         on_get random.natural
         on_put random.natural
         on_patch random.natural
         on_delete random.natural
         on_head random.natural
         on_connect random.natural
         on_options random.natural
         on_trace random.natural
         num_headers (by ! each (natural.% 10) random.natural)
         headers (random.dictionary text.hash num_headers (random.lower_cased 3) (random.lower_cased 3))
         .let [memory (is (/.Client IO)
                          (implementation
                           (the (request method url headers data)
                             (io.io (let [value (when method
                                                  {//.#Post} on_post
                                                  {//.#Get} on_get
                                                  {//.#Put} on_put
                                                  {//.#Patch} on_patch
                                                  {//.#Delete} on_delete
                                                  {//.#Head} on_head
                                                  {//.#Connect} on_connect
                                                  {//.#Options} on_options
                                                  {//.#Trace} on_trace)
                                          data (|> value
                                                   (by natural.base_10 as)
                                                   (by utf8.binary as))]
                                      {try.#Success [//status.ok
                                                     [//.#headers headers
                                                      //.#body (function (_ ?wanted_bytes)
                                                                 (io.io {try.#Success [(binary.size data)
                                                                                       data]}))]]})))))]]
        (expansion.let [<cases> (these [/.post on_post]
                                       [/.get on_get]
                                       [/.put on_put]
                                       [/.patch on_patch]
                                       [/.delete on_delete]
                                       [/.head on_head]
                                       [/.connect on_connect]
                                       [/.options on_options]
                                       [/.trace on_trace])]
          (`` (all _.and
                   (,, (template.with [<definition> <expected>]
                         [(_.coverage [<definition>]
                            (|> (<definition> "" header.empty {.#None} memory)
                                (verification io.monad <expected>)
                                io.value))]

                         <cases>
                         ))
                   (_.coverage [/.headers]
                     (natural.= (dictionary.size headers)
                                (|> headers
                                    dictionary.entries
                                    /.headers
                                    dictionary.size)))
                   (in (do [! future.monad]
                         [.let [memory (/.future memory)]
                          (,, (template.with [<definition> <expected>]
                                [<expected> (|> (<definition> "" header.empty {.#None} memory)
                                                (verification ! <expected>))]

                                <cases>))]
                         (unit.coverage [/.future]
                           (and (,, (template.with [<definition> <expected>]
                                      [<expected>]

                                      <cases>))))))
                   ))))))
