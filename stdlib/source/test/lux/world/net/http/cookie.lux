... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["|" pipe]]
   [error
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" dictionary]
     ["[0]" stack]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]]
   [macro
    ["[0]" template]]
   [time
    ["[0]" instant]
    ["[0]" duration]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public (random cookies)
  (-> (Stack (for_some (_ of) [(/.Cookie of) (Random of)]))
      (Random /.Jar))
  (when cookies
    (stack.partial [cookie random_value] tail)
    (do random.monad
      [value random_value
       jar (random tail)]
      (in (/.has cookie value jar)))

    (stack)
    (random#in /.empty)))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [name (random.upper_cased 1)
         fake_name (random.upper_cased 2)
         expected (random.lower_cased 1)
         .let [cookie (is (/.Cookie Text)
                          [/.#name name
                           /.#in (|>>)
                           /.#out (|>> {try.#Success})])
               fake_cookie (is (/.Cookie Text)
                               [/.#name fake_name
                                /.#in (|>>)
                                /.#out (|>> {try.#Success})])]

         duration duration.random
         instant instant.random
         domain (random.lower_cased 2)
         path (random.lower_cased 3)])
      (_.for [/.Cookie
              /.#name /.#in /.#out])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec /.equivalence (..random (stack [cookie (random.lower_cased 1)]))))
           (_.for [/.Jar]
                  (all _.and
                       (_.coverage [/.empty]
                         (dictionary.empty? /.empty))
                       (_.coverage [/.has /.value]
                         (|> /.empty
                             (/.has cookie expected)
                             (/.value cookie)
                             (try#each (text.= expected))
                             (try.else false)))
                       (_.coverage [/.unknown]
                         (|> /.empty
                             (/.has cookie expected)
                             (/.value fake_cookie)
                             (|.when
                               {try.#Success _} false
                               {try.#Failure _} true)))
                       ))
           (_.for [/.Attribute]
                  (`` (all _.and
                           (,, (template.with [<attribute> <value>]
                                 [(_.coverage [<attribute>]
                                    (|> /.empty
                                        (/.has (<attribute> <value> cookie) expected)
                                        (/.value cookie)
                                        (try#each (text.= expected))
                                        (try.else false)))]

                                 [/.expires instant]
                                 [/.max_age duration]
                                 [/.domain domain]
                                 [/.path path]
                                 ))
                           (,, (template.with [<attribute>]
                                 [(_.coverage [<attribute>]
                                    (|> /.empty
                                        (/.has (<attribute> cookie) expected)
                                        (/.value cookie)
                                        (try#each (text.= expected))
                                        (try.else false)))]

                                 [/.secure]
                                 [/.http_only]
                                 ))
                           (_.coverage [/.CSRF_Policy
                                        /.strict /.lax /.none /.same_site]
                             (let [uses_policy! (is (-> /.CSRF_Policy Bit)
                                                    (function (_ it)
                                                      (|> /.empty
                                                          (/.has (/.same_site it cookie) expected)
                                                          (/.value cookie)
                                                          (try#each (text.= expected))
                                                          (try.else false))))]
                               (and (uses_policy! /.strict)
                                    (uses_policy! /.lax)
                                    (uses_policy! /.none))))
                           )))
           )))
