... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only Monad
                  do)]]
   [concurrency
    ["[0]" future (.only Future)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]
     [encoding
      ["[0]" utf8 (.use "[1]#[0]" binary)]]]
    ["[0]" binary (.only Binary)
     ["[1]T" \\test]]
    [collection
     ["[0]" dictionary]]
    [format
     ["[0]" json (.use "[1]#[0]" format)
      ["?[1]" \\projection]
      ["[1]T" \\test]]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" natural]]]
   [macro
    ["[0]" template]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]
   [world
    ["[0]" environment
     ["?[1]" \\projection]]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.only)
    ["[0]" header]
    ["[0]" response]
    ["[0]" request (.only Request)]
    ["[0]" version
     ["[1]T" \\test]]
    ["[0]" status (.only)
     ["[1]T" \\test]]
    ["/[1]" // (.only)
     ["[0]" mime (.only)
      ["[1]T" \\test]]
     ["[0]" uri (.only)
      ["[0]" query]
      ["[0]" scheme (.only)
       ["[1]T" \\test]]
      ["[0]" port
       ["[1]T" \\test]]]]]]])

(the address
  (Random ///.Address)
  (all random.and
       (random.lower_cased 1)
       portT.random
       ))

(the identification
  (Random request.Identification)
  (all random.and
       ..address
       ..address
       ))

(the protocol
  (Random request.Protocol)
  (all random.and
       versionT.random
       schemeT.random
       ))

(the method
  (Random //.Method)
  (all random.either
       (random#pure {//.#Post})
       (random#pure {//.#Get})
       (random#pure {//.#Put})
       (random#pure {//.#Patch})
       (random#pure {//.#Delete})
       (random#pure {//.#Head})
       (random#pure {//.#Connect})
       (random#pure {//.#Options})
       (random#pure {//.#Trace})
       ))

(the resource
  (Random request.Resource)
  (all random.and
       ..method
       (random.lower_cased 2)
       ))

(the (message ! body)
  (for_any (_ !)
    (-> (Monad !) Binary
        (Random (//.Message !))))
  (all random.and
       (random#pure header.empty)
       (random#pure (function (_ _)
                      (by ! pure {try.#Success [(binary.size body) body]})))
       ))

(the data
  (Random [Natural Binary])
  (do random.monad
    [size (random#each (n.% 10) random.natural)
     data (random.upper_cased size)]
    (pure [size (utf8#as data)])))

(the (request !)
  (for_any (_ !)
    (-> (Monad !)
        (Random (request.Request !))))
  (all random.and
       ..identification
       ..protocol
       ..resource
       (do random.monad
         [[_ data] ..data]
         (message ! data))
       ))

(the scheme_test
  Test
  (<| (do [! random.monad]
        [expected_request (..request future.monad)
         expected_status statusT.random
         expected_mime mimeT.random
         [expected_data_size expected_data] ..data
         .let [expected_server (is /.Server
                                   (function (_ ! request)
                                     (by ! pure (response.content ! expected_status expected_mime expected_data))))]])
      (`` (all _.and
               (,, (template.with [<server> <scheme>]
                     [(pure (do [! future.monad]
                              [good_response (let [expected_request (has [request.#protocol request.#scheme] <scheme> expected_request)]
                                               (<server> expected_server ! expected_request))
                               good_body ((its [response.#message //.#body] good_response) {.#None})

                               bad_response (let [expected_request (has [request.#protocol request.#scheme] scheme.file expected_request)]
                                              (<server> expected_server ! expected_request))]
                              (unit.coverage [<server>]
                                (and (n.= expected_status
                                          (its response.#status good_response))
                                     (when good_body
                                       {try.#Success [actual_data_size actual_data]}
                                       (and (n.= expected_data_size actual_data_size)
                                            (binary.= expected_data actual_data))
                                       
                                       {try.#Failure error}
                                       false)

                                     (n.= status.not_found
                                          (its response.#status bad_response))
                                     ))))]

                     [/.http scheme.http]
                     [/.https scheme.https]
                     ))
               ))))

(the method_test
  Test
  (<| (do [! random.monad]
        [expected_request (..request future.monad)
         expected_status statusT.random
         expected_mime mimeT.random
         [expected_data_size expected_data] ..data
         .let [expected_server (is /.Server
                                   (function (_ ! request)
                                     (by ! pure (response.content ! expected_status expected_mime expected_data))))]])
      (`` (all _.and
               (,, (template.with [<server> <correct_method> <incorrect_method>]
                     [(pure (do [! future.monad]
                              [good_response (let [expected_request (has [request.#resource request.#method] {<correct_method>} expected_request)]
                                               (<server> expected_server ! expected_request))
                               good_body ((its [response.#message //.#body] good_response) {.#None})

                               bad_response (let [expected_request (has [request.#resource request.#method] {<incorrect_method>} expected_request)]
                                              (<server> expected_server ! expected_request))]
                              (unit.coverage [<server>]
                                (and (n.= expected_status
                                          (its response.#status good_response))
                                     (when good_body
                                       {try.#Success [actual_data_size actual_data]}
                                       (and (n.= expected_data_size actual_data_size)
                                            (binary.= expected_data actual_data))
                                       
                                       {try.#Failure error}
                                       false)

                                     (n.= status.not_found
                                          (its response.#status bad_response))
                                     ))))]

                     [/.get //.#Get //.#Trace]
                     [/.post //.#Post //.#Trace]
                     [/.put //.#Put //.#Trace]
                     [/.patch //.#Patch //.#Trace]
                     [/.delete //.#Delete //.#Trace]
                     [/.head //.#Head //.#Trace]
                     [/.connect //.#Connect //.#Trace]
                     [/.options //.#Options //.#Trace]
                     [/.trace //.#Trace //.#Get]
                     ))
               ))))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_request (..request future.monad)
         expected_status (random.only (|>> (same? status.not_found) not)
                                      statusT.random)
         expected_mime mimeT.random
         [expected_data_size expected_data] ..data
         .let [expected_server (is /.Server
                                   (function (_ ! request)
                                     (by ! pure (response.content ! expected_status expected_mime expected_data))))]])
      (_.for [/.Server])
      (`` (all _.and
               ..scheme_test
               ..method_test
               (do !
                 [bad_uri (random.upper_cased 2)
                  good_uri (random.upper_cased 3)]
                 (pure (do [! future.monad]
                         [good_response (let [expected_request (has [request.#resource request.#uri] good_uri expected_request)]
                                          (/.uri good_uri expected_server ! expected_request))
                          good_body ((its [response.#message //.#body] good_response) {.#None})

                          bad_response (let [expected_request (has [request.#resource request.#uri] bad_uri expected_request)]
                                         (/.uri good_uri expected_server ! expected_request))]
                         (unit.coverage [/.uri]
                           (and (n.= expected_status
                                     (its response.#status good_response))
                                (when good_body
                                  {try.#Success [actual_data_size actual_data]}
                                  (and (n.= expected_data_size actual_data_size)
                                       (binary.= expected_data actual_data))
                                  
                                  {try.#Failure error}
                                  false)

                                (n.= status.not_found
                                     (its response.#status bad_response))
                                )))))
               (pure (do [! future.monad]
                       [.let [server (is /.Server
                                         (/.or (/.http expected_server)
                                               (/.https expected_server)))]
                        http_response (server ! (has [request.#protocol request.#scheme] scheme.http expected_request))
                        http_body ((its [response.#message //.#body] http_response) {.#None})

                        https_response (server ! (has [request.#protocol request.#scheme] scheme.https expected_request))
                        https_body ((its [response.#message //.#body] https_response) {.#None})
                        
                        bad_response (server ! (has [request.#protocol request.#scheme] scheme.file expected_request))]
                       (unit.coverage [/.or]
                         (let [correct_http_status!
                               (n.= expected_status
                                    (its response.#status http_response))

                               correct_http_body!
                               (when http_body
                                 {try.#Success [actual_data_size actual_data]}
                                 (and (n.= expected_data_size actual_data_size)
                                      (binary.= expected_data actual_data))
                                 
                                 {try.#Failure error}
                                 false)

                               correct_https_status!
                               (n.= expected_status
                                    (its response.#status https_response))
                               
                               correct_https_body!
                               (when https_body
                                 {try.#Success [actual_data_size actual_data]}
                                 (and (n.= expected_data_size actual_data_size)
                                      (binary.= expected_data actual_data))
                                 
                                 {try.#Failure error}
                                 false)

                               not_found!
                               (n.= status.not_found
                                    (its response.#status bad_response))]
                           (and correct_http_status!
                                correct_http_body!

                                correct_https_status!
                                correct_https_body!

                                not_found!)))))
               (pure (do [! future.monad]
                       [.let [server (is (/.Server Future)
                                         (/.static (response.content ! expected_status expected_mime expected_data)))]
                        response (server ! (has [request.#protocol request.#scheme] scheme.http expected_request))
                        body ((its [response.#message //.#body] response) {.#None})]
                       (unit.coverage [/.static]
                         (and (n.= expected_status
                                   (its response.#status response))
                              (when body
                                {try.#Success [actual_data_size actual_data]}
                                (and (n.= expected_data_size actual_data_size)
                                     (binary.= expected_data actual_data))
                                
                                {try.#Failure error}
                                false)
                              ))))
               (do !
                 [path (random.upper_cased 4)
                  expected_property (random.lower_cased 5)
                  expected_value (random.lower_cased 6)
                  .let [uri (uri.uri scheme.http {.#None} path
                                     {.#Some (|> query.empty
                                                 (dictionary.has expected_property expected_value))}
                                     {.#None})]]
                 (pure (do [! future.monad]
                         [.let [server (is (/.Server Future)
                                           (/.query (?environment.property expected_property)
                                                    (function (_ actual_value)
                                                      (/.static (response.text ! actual_value)))))]
                          response (server ! (request.uri uri expected_request))
                          body ((its [response.#message //.#body] response) {.#None})]
                         (unit.coverage [/.query]
                           (and (n.= status.ok
                                     (its response.#status response))
                                (<| (try.else false)
                                    (do try.monad
                                      [[_ actual_value] body
                                       actual_value (utf8#of actual_value)]
                                      (pure (text.= expected_value actual_value))))
                                )))))
               (do !
                 [expected (random.lower_cased 7)]
                 (pure (do [! future.monad]
                         [.let [server (is (/.Server Future)
                                           (/.text (function (_ actual)
                                                     (/.static (response.text ! actual)))))]
                          response (server ! (request.text ! expected))
                          body ((its [response.#message //.#body] response) {.#None})]
                         (unit.coverage [/.text]
                           (and (n.= status.ok
                                     (its response.#status response))
                                (<| (try.else false)
                                    (do try.monad
                                      [[_ actual] body
                                       actual (utf8#of actual)]
                                      (pure (text.= expected actual))))
                                )))))
               (do !
                 [expected jsonT.random]
                 (pure (do [! future.monad]
                         [.let [server (is (/.Server Future)
                                           (/.json ?json.any
                                                   (function (_ actual)
                                                     (/.static (response.json ! actual)))))]
                          response (server ! (request.json ! expected))
                          body ((its [response.#message //.#body] response) {.#None})]
                         (unit.coverage [/.json]
                           (and (n.= status.ok
                                     (its response.#status response))
                                (<| (try.else false)
                                    (do try.monad
                                      [[_ actual] body
                                       actual (utf8#of actual)
                                       actual (json#of actual)]
                                      (pure (json.= expected actual))))
                                )))))
               (do !
                 [expected_property (random.lower_cased 8)
                  expected_value (random.lower_cased 9)]
                 (pure (do [! future.monad]
                         [.let [server (is (/.Server Future)
                                           (/.form (?environment.property expected_property)
                                                   (function (_ actual_value)
                                                     (/.static (response.text ! actual_value)))))]
                          response (server ! (request.form ! (|> query.empty
                                                                 (dictionary.has expected_property expected_value))))
                          body ((its [response.#message //.#body] response) {.#None})]
                         (unit.coverage [/.form]
                           (and (n.= status.ok
                                     (its response.#status response))
                                (<| (try.else false)
                                    (do try.monad
                                      [[_ actual_value] body
                                       actual_value (utf8#of actual_value)]
                                      (pure (text.= expected_value actual_value))))
                                )))))
               ))))
