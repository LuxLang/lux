... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]
    [concurrency
     ["[0]" async]]]
   [data
    ["[0]" product]
    ["[0]" binary (.use "[1]#[0]" equivalence)]
    ["[0]" color
     [rgb
      ["[1]T" \\test]]]
    ["[0]" text (.use "[1]#[0]" equivalence)
     [encoding
      ["[0]" utf8 (.use "[1]#[0]" format)]]]
    [format
     ["[0]" json (.use "[1]#[0]" format)
      ["[1]T" \\test]]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [meta
    [macro
     ["[0]" template]]]
   [web
    ["[0]" html]
    ["[0]" css (.only)
     ["[0]" selector]
     ["[0]" property]
     ["[0]" value]]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.only)
    ["[0]" header]
    ["[0]" status]
    [//
     ["[0]" mime (.use "[1]#[0]" equivalence)]]]]]
 [//
  ["[0]T" status]
  [//
   ["[0]T" mime]]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_status statusT.random
         expected_mime mimeT.random
         
         utf8_length (of ! each (n.% 10) random.nat)
         utf8 (random.upper_cased utf8_length)
         .let [utf8_data (utf8#injection utf8)]

         expected_url (of ! each (text.prefix "http://www.example.com/")
                          (random.upper_cased 1))

         .let [expected_html (html.html/5
                              (html.head (html.title (html.text utf8)))
                              (html.body (html.paragraph (list) (html.text utf8))))]
         expected_json jsonT.random
         color colorT.random
         .let [expected_css (css.rule selector.any
                                      (list [property.text_color
                                             (value.rgb color)]))]])
      (_.for [/.Response
              /.#message /.#status])
      (`` (all _.and
               (,, (template.with [<coverage> <response>
                                   <status>
                                   <content_length> <content_type>]
                     [(_.coverage [<coverage>]
                        (let [response <response>]
                          (and (same? <status> (its /.#status response))
                               (|> response
                                   (its [/.#message //.#headers])
                                   (header.one header.content_length)
                                   (try#each (n.= <content_length>))
                                   (try.else false))
                               (|> response
                                   (its [/.#message //.#headers])
                                   (header.one header.content_type)
                                   (try#each (mime#= <content_type>))
                                   (try.else false)))))]

                     [/.empty (/.empty async.monad expected_status) expected_status 0 mime.utf_8]
                     [/.not_found (/.not_found async.monad) status.not_found 0 mime.utf_8]
                     [/.content (/.content async.monad expected_status expected_mime utf8_data) expected_status utf8_length expected_mime]
                     [/.bad_request (/.bad_request async.monad utf8) status.bad_request utf8_length mime.utf_8]
                     [/.ok (/.ok async.monad expected_mime utf8_data) status.ok utf8_length expected_mime]
                     ))
               (_.coverage [/.temporary_redirect]
                 (let [response (/.temporary_redirect async.monad expected_url)]
                   (and (same? status.temporary_redirect (its /.#status response))
                        (|> response
                            (its [/.#message //.#headers])
                            (header.one header.location)
                            (try#each (text#= expected_url))
                            (try.else false)))))
               (in (do async.monad
                     [.let [response (/.text async.monad utf8)]
                      body ((its [/.#message //.#body] response) {.#None})]
                     (unit.coverage [/.text]
                       (and (same? status.ok (its /.#status response))
                            (|> response
                                (its [/.#message //.#headers])
                                (header.one header.content_length)
                                (try#each (n.= utf8_length))
                                (try.else false))
                            (|> response
                                (its [/.#message //.#headers])
                                (header.one header.content_type)
                                (try#each (mime#= mime.utf_8))
                                (try.else false))
                            (|> body
                                (try#each (|>> product.right
                                               (binary#= utf8_data)))
                                (try.else false))))))
               (in (do async.monad
                     [.let [response (/.html async.monad expected_html)
                            data (|> expected_html
                                     html.html
                                     utf8#injection)
                            length (binary.size data)]
                      body ((its [/.#message //.#body] response) {.#None})]
                     (unit.coverage [/.html]
                       (and (same? status.ok (its /.#status response))
                            (|> response
                                (its [/.#message //.#headers])
                                (header.one header.content_length)
                                (try#each (n.= length))
                                (try.else false))
                            (|> response
                                (its [/.#message //.#headers])
                                (header.one header.content_type)
                                (try#each (mime#= mime.html))
                                (try.else false))
                            (|> body
                                (try#each (|>> product.right
                                               (binary#= data)))
                                (try.else false))))))
               (in (do async.monad
                     [.let [response (/.json async.monad expected_json)
                            data (|> expected_json
                                     json#injection
                                     utf8#injection)
                            length (binary.size data)]
                      body ((its [/.#message //.#body] response) {.#None})]
                     (unit.coverage [/.json]
                       (and (same? status.ok (its /.#status response))
                            (|> response
                                (its [/.#message //.#headers])
                                (header.one header.content_length)
                                (try#each (n.= length))
                                (try.else false))
                            (|> response
                                (its [/.#message //.#headers])
                                (header.one header.content_type)
                                (try#each (mime#= mime.json))
                                (try.else false))
                            (|> body
                                (try#each (|>> product.right
                                               (binary#= data)))
                                (try.else false))))))
               (in (do async.monad
                     [.let [response (/.css async.monad expected_css)
                            data (|> expected_css
                                     css.css
                                     utf8#injection)
                            length (binary.size data)]
                      body ((its [/.#message //.#body] response) {.#None})]
                     (unit.coverage [/.css]
                       (and (same? status.ok (its /.#status response))
                            (|> response
                                (its [/.#message //.#headers])
                                (header.one header.content_length)
                                (try#each (n.= length))
                                (try.else false))
                            (|> response
                                (its [/.#message //.#headers])
                                (header.one header.content_type)
                                (try#each (mime#= mime.css))
                                (try.else false))
                            (|> body
                                (try#each (|>> product.right
                                               (binary#= data)))
                                (try.else false))))))
               ))))
