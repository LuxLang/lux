(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [data
    [collection
     ["[0]" list]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def .public random
  (Random /.Version)
  (all random.either
       (random#in /.v0_9)
       (random#in /.v1_0)
       (random#in /.v1_1)
       (random#in /.v2_0)
       ))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [])
      (_.for [/.Version])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec /.equivalence ..random))
           (_.for [/.hash]
                  (hashT.spec /.hash ..random))

           (_.coverage [/.v0_9 /.v1_0 /.v1_1 /.v2_0]
             (let [options (list /.v0_9 /.v1_0 /.v1_1 /.v2_0)
                   uniques (set.of_list /.hash options)]
               (n.= (list.size options)
                    (set.size uniques))))
           )))
