... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["|" pipe]
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" text]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["[0]" natural]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" cookie (.only Cookie)]
    [//
     ["[0]" mime]]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_content_length random.natural
         expected_content_type (random.either (random#in mime.javascript)
                                              (random#in mime.jpeg))
         expected_location (random.either (random#in "http://example.com/yolo")
                                          (random#in "http://example.com/meme"))
         header_name (random.lower_cased 1)
         expected_header_value (random.upper_cased 1)
         .let [header (is (/.Header Text)
                          [/.#name header_name
                           /.#in (|>>)
                           /.#out (|>> {try.#Success})])]])
      (all _.and
           (_.coverage [/.Headers /.empty /.unknown]
             (|> /.empty
                 (/.one header)
                 (|.when
                   {try.#Success _}
                   false

                   {try.#Failure error}
                   (exception.is? /.unknown error))))
           (_.coverage [/.Header /.#name /.#in /.#out
                        /.has /.one]
             (|> /.empty
                 (/.has header expected_header_value)
                 (/.one header)
                 (try#each (same? expected_header_value))
                 (try.else false)))
           (_.coverage [/.content_length]
             (|> /.empty
                 (/.has /.content_length expected_content_length)
                 (/.one /.content_length)
                 (try#each (natural.= expected_content_length))
                 (try.else false)))
           (_.coverage [/.content_type]
             (|> /.empty
                 (/.has /.content_type expected_content_type)
                 (/.one /.content_type)
                 (try#each (mime.= expected_content_type))
                 (try.else false)))
           (_.coverage [/.location]
             (|> /.empty
                 (/.has /.location expected_location)
                 (/.one /.location)
                 (try#each (text.= expected_location))
                 (try.else false)))
           (do !
             [name (random.upper_cased 1)
              expected_value (random.lower_cased 1)
              .let [cookie (is (Cookie Text)
                               [cookie.#name name
                                cookie.#in (|>>)
                                cookie.#out (|>> {try.#Success})])
                    expected_jar (|> cookie.empty
                                     (cookie.has cookie expected_value))]]
             (_.coverage [/.set_cookies]
               (|> /.empty
                   (/.has /.set_cookies expected_jar)
                   (/.one /.set_cookies)
                   (try#each (of cookie.equivalence = expected_jar))
                   (try.else false))))
           )))
