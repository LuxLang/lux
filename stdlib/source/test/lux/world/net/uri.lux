(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" text (.only)
     ["%" \\format]]]
   [math
    ["[0]" random (.only Random)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" scheme]
   ["[0]" query (.use "[1]#[0]" codec)]]]
 ["[0]" /
  ["[1][0]" encoding]
  ["[1][0]" scheme]
  ["[1][0]" port]
  ["[1][0]" path]
  ["[1][0]" query]])

(def user_info
  (Random Text)
  (do random.monad
    [name (random.upper_cased 1)
     password (random.upper_cased 2)]
    (in (/.user_info name password))))

(def authority
  (Random /.Authority)
  (all random.and
       (random.maybe ..user_info)
       (random.lower_cased 3)
       (random.maybe /port.random)
       ))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [scheme /scheme.random
         authority ..authority
         path (random.lower_cased 4)
         query (/query.random 5)
         fragment (random.lower_cased 6)])
      (_.for [/.URI])
      (all _.and
           (_.coverage [/.uri]
             (let [it (/.uri scheme {.#None} path {.#Some query} {.#None})]
               (and (text.contains? (scheme.name scheme) it)
                    (text.contains? path it)
                    (text.contains? (query#encoded query) it))))
           (_.coverage [/.Authority
                        /.#user /.#host /.#port
                        /.user_info]
             (let [it (/.uri scheme {.#Some authority} path {.#None} {.#None})]
               (and (text.contains? (scheme.name scheme) it)
                    (text.contains? path it)
                    (when (the /.#user authority)
                      {.#Some user}
                      (text.contains? user it)
                      
                      {.#None}
                      true)
                    (text.contains? (the /.#host authority) it)
                    (when (the /.#port authority)
                      {.#Some port}
                      (text.contains? (%.nat port) it)
                      
                      {.#None}
                      true))))
           (_.coverage [/.Fragment]
             (let [it (/.uri scheme {.#None} path {.#None} {.#Some fragment})]
               (and (text.contains? (scheme.name scheme) it)
                    (text.contains? path it)
                    (text.contains? fragment it))))

           /encoding.test
           /scheme.test
           /port.test
           /path.test
           /query.test
           )))
