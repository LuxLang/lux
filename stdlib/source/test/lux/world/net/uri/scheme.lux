... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" equality
     ["[1]T" \\test]]]
   [data
    [collection
     ["[0]" list]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" monad)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(expansion.let [<schemes/0> (these [/.about] [/.acap] [/.user_account] [/.anonymous_customer_reference] [/.attachment]
                                   [/.bitcoin] [/.blob]
                                   [/.calendar_access_protocol]
                                   [/.data] [/.dns] [/.dntp] [/.digital_object_identifier] [/.drm]
                                   [/.feed] [/.file] [/.finger] [/.fish] [/.fm] [/.ftp]
                                   [/.geo] [/.git]
                                   [/.http] [/.https])
                <schemes/1> (these [/.imap] [/.ipp] [/.ipps] [/.irc] [/.irc6] [/.ircs]
                                   [/.jar]
                                   [/.ldap] [/.ldaps]
                                   [/.magnet] [/.mail_to] [/.apache_maven]
                                   [/.pop]
                                   [/.sip] [/.sips] [/.sms] [/.snmp] [/.ssh] [/.stun] [/.stuns]
                                   [/.telephone_number] [/.turn] [/.turns]
                                   [/.xmpp])]
  (these (the .public random
           (Random /.Scheme)
           (`` (all random.either
                    (,, (template.with [<scheme>]
                          [(random:pure <scheme>)]

                          [<schemes/0>
                           <schemes/1>]))
                    )))

         (the options
           (List /.Scheme)
           (list <schemes/0>
                 <schemes/1>))

         (the .public test
           Test
           (<| (_.covering /._)
               (monad.let [! random.monad]
                 [expected ..random])
               (_.for [/.Scheme])
               (`` (all _.and
                        (_.for [/.equality /.=]
                               (static.when (identical? /.equality /.=)
                                 (equalityT.spec /.equality ..random)))
                        (_.for [/.hash]
                               (hashT.spec /.hash ..random))

                        (_.coverage [/.name /.scheme]
                          (|> expected
                              /.name
                              /.scheme
                              (by /.equality = expected)))
                        (_.coverage [(,, (template.with [<scheme>]
                                           [<scheme>]

                                           [<schemes/0>]))]
                          (let [uniques (set.of_list /.hash ..options)]
                            (n.= (list.size ..options)
                                 (set.size uniques))))
                        (_.coverage [(,, (template.with [<scheme>]
                                           [<scheme>]

                                           [<schemes/1>]))]
                          (let [uniques (set.of_list /.hash ..options)]
                            (n.= (list.size ..options)
                                 (set.size uniques))))
                        (,, (template.with [<original> <alias>]
                              [(_.coverage [<alias>]
                                 (by /.equality = <original> <alias>))]

                              [[/.acap /.application_configuration_access_protocol]

                               [/.dns /.domain_name_system]
                               [/.dntp /.direct_network_transfer_protocol]

                               [/.ftp /.file_transfer_protocol]

                               [/.http /.hypertext_transfer_protocol]
                               [/.https /.hypertext_transfer_protocol_secure]

                               [/.imap /.internet_message_access_protocol]
                               [/.ipp /.internet_printing_protocol]
                               [/.ipps /.internet_printing_protocol_secure]
                               [/.irc /.internet_relay_chat]
                               [/.ircs /.internet_relay_chat_secure]

                               [/.ldap /.lightweight_directory_access_protocol]
                               [/.ldaps /.lightweight_directory_access_protocol_secure]

                               [/.pop /.post_office_protocol]

                               [/.sip /.session_initiation_protocol]
                               [/.sips /.session_initiation_protocol_secure]
                               [/.sms /.short_message_service]
                               [/.snmp /.simple_network_management_protocol]
                               [/.ssh /.secure_shell_protocol]

                               [/.stun /.session_traversal_utilities_for_nat]
                               [/.stuns /.session_traversal_utilities_for_nat_secure]

                               [/.turn /.traversal_using_relays_around_nat]
                               [/.turns /.traversal_using_relays_around_nat_secure]

                               [/.xmpp /.extensible_messaging_and_presence_protocol]]))
                        ))))))
