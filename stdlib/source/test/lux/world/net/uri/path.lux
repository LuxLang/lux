(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [segments (of ! each (n.% 10) random.nat)
         segments (random.list segments (random.lower_cased 1))])
      (_.for [/.Path])
      (all _.and
           (_.coverage [/.path /.Segment /.separator]
             (let [path (/.path segments)]
               (when (list.size segments)
                 0 (text.empty? path)
                 _ (and (list.every? (function (_ it)
                                       (text.contains? it path))
                                     segments)
                        (text.contains? /.separator path)))))
           )))
