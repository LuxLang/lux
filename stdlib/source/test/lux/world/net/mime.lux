(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [\\specification
     ["[0]S" equivalence]
     ["[0]S" hash]]]
   [data
    ["[0]" text (.only)
     ["[0]" encoding (.only)
      ["[1]T" \\test]]]
    [collection
     ["[0]" list]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(with_expansions [<options> (these [/.aac]
                                   [/.abiword]
                                   [/.avi]
                                   [/.amazon_kindle_ebook]
                                   [/.binary]
                                   [/.bitmap]
                                   [/.bzip]
                                   [/.bzip2]
                                   [/.c_shell]
                                   [/.css]
                                   [/.csv]
                                   [/.microsoft_word]
                                   [/.microsoft_word_openxml]
                                   [/.ms_embedded_opentype_fonts]
                                   [/.epub]
                                   [/.ecmascript]
                                   [/.gif]
                                   [/.html]
                                   [/.icon]
                                   [/.icalendar]
                                   [/.jar]
                                   [/.jpeg]
                                   [/.javascript]
                                   [/.json]
                                   [/.midi]
                                   [/.mpeg]
                                   [/.apple_installer_package]
                                   [/.opendocument_presentation]
                                   [/.opendocument_spreadsheet]
                                   [/.opendocument_text]
                                   [/.ogg_audio]
                                   [/.ogg_video]
                                   [/.ogg]
                                   [/.opentype_font]
                                   [/.png]
                                   [/.pdf]
                                   [/.microsoft_powerpoint]
                                   [/.microsoft_powerpoint_openxml]
                                   [/.rar]
                                   [/.rtf]
                                   [/.bourne_shell]
                                   [/.svg]
                                   [/.flash]
                                   [/.tar]
                                   [/.tiff]
                                   [/.typescript]
                                   [/.truetype_font]
                                   [/.microsoft_visio]
                                   [/.wav]
                                   [/.webm_audio]
                                   [/.webm_video]
                                   [/.webp]
                                   [/.woff]
                                   [/.woff2]
                                   [/.xhtml]
                                   [/.microsoft_excel]
                                   [/.microsoft_excel_openxml]
                                   [/.xml]
                                   [/.xul]
                                   [/.zip]

                                   [/.audio_3gpp]
                                   [/.video_3gpp]
                                   [/.audio_3gpp2]
                                   [/.video_3gpp2]
                                   [/.compressed_7z]

                                   [/.utf_8])
                  <types> (with_template [<type>]
                            [<type>]
                            
                            <options>)]
  (def .public random
    (Random /.MIME)
    (`` (all random.either
             (,, (with_template [<type>]
                   [(random#in <type>)]
                   
                   <options>))
             )))
  
  (def .public test
    Test
    (<| (_.covering /._)
        (do [! random.monad]
          [expected ..random
           encoding encodingT.random])
        (_.for [/.MIME])
        (all _.and
             (_.for [/.equivalence]
                    (equivalenceS.spec /.equivalence ..random))
             (_.for [/.hash]
                    (hashS.spec /.hash ..random))

             (_.coverage [/.mime /.name]
               (|> expected
                   /.name
                   /.mime
                   (at /.equivalence = expected)))
             (_.coverage [<types>]
               (let [options (list <types>)
                     uniques (set.of_list /.hash options)]
                 (n.= (list.size options)
                      (set.size uniques))))
             (_.coverage [/.text]
               (|> (/.text encoding)
                   /.name
                   (text.contains? (encoding.name encoding))))
             )))
  )
