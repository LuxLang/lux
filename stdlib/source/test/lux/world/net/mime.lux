... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [data
    ["[0]" text (.only)
     ["[0]" encoding (.only)
      ["[1]T" \\test]]]
    [collection
     ["[0]" list]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(with_expansions [<randoms> (with_template [<name> <options>]
                              [(def <name>
                                 (Random /.MIME)
                                 (`` (all random.either
                                          (,, (with_template [<type>]
                                                [(random#in <type>)]
                                                
                                                <options>))
                                          )))]

                              [random/0 <options/0>]
                              [random/1 <options/1>]
                              [random/2 <options/2>]
                              [random/3 <options/3>]
                              )
                  <coverages> (with_template [<options>]
                                [(`` (_.coverage [(,, (with_template [<type>]
                                                        [<type>]
                                                        
                                                        <options>
                                                        ))]
                                       (let [uniques (set.of_list /.hash ..options)]
                                         (n.= (list.size ..options)
                                              (set.size uniques)))))]

                                [<options/0>]
                                [<options/1>]
                                [<options/2>]
                                [<options/3>]
                                )
                  <all_options> (with_template [<options>]
                                  [(is (List /.MIME)
                                       (let [options (is (-> Any (List /.MIME))
                                                         (function (_ _)
                                                           (list <options>)))]
                                         (options [])))]

                                  [<options/0>]
                                  [<options/1>]
                                  [<options/2>]
                                  [<options/3>]
                                  )
                  <options/0> (these [/.aac]
                                     [/.abiword]
                                     [/.avi]
                                     [/.amazon_kindle_ebook]
                                     [/.binary]
                                     [/.bitmap]
                                     [/.bzip]
                                     [/.bzip2]
                                     [/.c_shell]
                                     [/.css]
                                     [/.csv]
                                     [/.microsoft_word]
                                     [/.microsoft_word_openxml]
                                     [/.ms_embedded_opentype_fonts]
                                     [/.epub]
                                     [/.ecmascript]
                                     [/.gif]
                                     [/.html]
                                     [/.icon]
                                     [/.icalendar]
                                     [/.jar]
                                     [/.jpeg]
                                     [/.javascript]
                                     [/.json]
                                     [/.midi]
                                     [/.mpeg])
                  <options/1> (these [/.apple_installer_package]
                                     [/.opendocument_presentation]
                                     [/.opendocument_spreadsheet]
                                     [/.opendocument_text]
                                     [/.ogg_audio]
                                     [/.ogg_video]
                                     [/.ogg]
                                     [/.opentype_font]
                                     [/.png]
                                     [/.pdf]
                                     [/.microsoft_powerpoint]
                                     [/.microsoft_powerpoint_openxml]
                                     [/.rar]
                                     [/.rtf]
                                     [/.bourne_shell]
                                     [/.svg]
                                     [/.flash])
                  <options/2> (these [/.tar]
                                     [/.tiff]
                                     [/.typescript]
                                     [/.truetype_font]
                                     [/.microsoft_visio]
                                     [/.wav]
                                     [/.webm_audio]
                                     [/.webm_video]
                                     [/.webp]
                                     [/.woff]
                                     [/.woff2]
                                     [/.xhtml]
                                     [/.microsoft_excel]
                                     [/.microsoft_excel_openxml]
                                     [/.xml]
                                     [/.xul]
                                     [/.zip])
                  <options/3> (these [/.audio_3gpp]
                                     [/.video_3gpp]
                                     [/.audio_3gpp2]
                                     [/.video_3gpp2]
                                     [/.compressed_7z]

                                     [/.form]
                                     [/.multi_part_form]

                                     [/.utf_8])]
  (these <randoms>

         (def .public random
           (Random /.MIME)
           (all random.either
                ..random/0
                ..random/1
                ..random/2
                ))

         (def options
           (List /.MIME)
           (list.together (list <all_options>)))
         
         (def .public test
           Test
           (<| (_.covering /._)
               (do [! random.monad]
                 [expected ..random
                  encoding encodingT.random])
               (_.for [/.MIME])
               (all _.and
                    (_.for [/.equivalence]
                           (equivalenceT.spec /.equivalence ..random))
                    (_.for [/.hash]
                           (hashT.spec /.hash ..random))

                    (_.coverage [/.mime /.name]
                      (|> expected
                          /.name
                          /.mime
                          (of /.equivalence = expected)))
                    <coverages>
                    (_.coverage [/.text]
                      (|> (/.text encoding)
                          /.name
                          (text.contains? (encoding.name encoding))))
                    ))))
  )
