... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" binary (.only Binary)]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" monad)]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" //]]]
 [////
  [data
   ["$[0]" binary]]])

(the concern
  (Random [/.Concern (Predicate /.Concern)])
  (all random.either
       (random:pure [/.creation /.creation?])
       (random:pure [/.modification /.modification?])
       (random:pure [/.deletion /.deletion?])
       ))

(the concern::test
  Test
  (all _.and
       (_.coverage [/.creation /.creation?]
         (and (/.creation? /.creation)
              (not (/.creation? /.modification))
              (not (/.creation? /.deletion))))
       (_.coverage [/.modification /.modification?]
         (and (not (/.modification? /.creation))
              (/.modification? /.modification)
              (not (/.modification? /.deletion))))
       (_.coverage [/.deletion /.deletion?]
         (and (not (/.deletion? /.creation))
              (not (/.deletion? /.modification))
              (/.deletion? /.deletion)))
       (monad.let random.monad
         [left ..concern
          right (random.only (|>> (identical? left) not)
                             ..concern)
          .let [[left left?] left
                [right right?] right]]
         (_.coverage [/.and]
           (let [composition (/.and left right)]
             (and (left? composition)
                  (right? composition)))))
       (_.coverage [/.all]
         (and (/.creation? /.all)
              (/.modification? /.all)
              (/.deletion? /.all)))
       ))

(the exception
  Test
  (monad.let [! random.monad]
    [directory (random.alphabetic 5)
     .let [[fs watcher] (/.memory "/")]]
    (all _.and
         (pure (monad.let future.monad
                 [?concern (by watcher concern directory)
                  ?stop (by watcher stop directory)]
                 (unit.coverage [/.not_being_watched]
                   (and (when ?concern
                          {try.#Failure error}
                          (exception.is? /.not_being_watched error)

                          {try.#Success _}
                          false)
                        (when ?stop
                          {try.#Failure error}
                          (exception.is? /.not_being_watched error)

                          {try.#Success _}
                          false)))))
         )))

(the (no_events_prior_to_creation! fs watcher directory)
  (-> (//.System Future) (/.Watcher Future) //.Path (Future (Try Bit)))
  (monad.let [! (try.with future.monad)]
    [_ (by fs make_directory directory)
     _ (by watcher start /.all directory)]
    (|> (by watcher poll [])
        (by ! each list.empty?))))

(the (after_creation! fs watcher expected_path)
  (-> (//.System Future) (/.Watcher Future) //.Path
      (Future (Try Bit)))
  (monad.let (try.with future.monad)
    [_ (is (Future (Try Any))
           (//.make_file future.monad fs (binary.empty 0) expected_path))
     poll/pre (by watcher poll [])
     poll/post (by watcher poll [])]
    (pure (and (when poll/pre
                 (list [concern actual_path])
                 (and (text.= expected_path actual_path)
                      (and (/.creation? concern)
                           (not (/.modification? concern))
                           (not (/.deletion? concern))))

                 _
                 false)
               (list.empty? poll/post)))))

(the (after_modification! fs watcher data expected_path)
  (-> (//.System Future) (/.Watcher Future) Binary //.Path (Future (Try Bit)))
  (monad.let (try.with future.monad)
    [_ (future.after 1 {try.#Success "Delay to make sure the over_write time-stamp always changes."})
     _ (by fs write expected_path data)
     poll/2 (by watcher poll [])
     poll/2' (by watcher poll [])]
    (pure (and (when poll/2
                 (list [concern actual_path])
                 (and (text.= expected_path actual_path)
                      (and (not (/.creation? concern))
                           (/.modification? concern)
                           (not (/.deletion? concern))))

                 _
                 false)
               (list.empty? poll/2')))))

(the (after_deletion! fs watcher expected_path)
  (-> (//.System Future) (/.Watcher Future) //.Path (Future (Try Bit)))
  (monad.let (try.with future.monad)
    [_ (by fs delete expected_path)
     poll/3 (by watcher poll [])
     poll/3' (by watcher poll [])]
    (pure (and (when poll/3
                 (list [concern actual_path])
                 (and (not (/.creation? concern))
                      (not (/.modification? concern))
                      (/.deletion? concern))

                 _
                 false)
               (list.empty? poll/3')))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Watcher])
      (all _.and
           (_.for [/.Concern]
                  ..concern::test)
           ..exception

           (monad.let [! random.monad]
             [directory (random.alphabetic 5)
              .let [/ "/"
                    [fs watcher] (/.memory /)]
              expected_path (by ! each (|>> (text directory /))
                                (random.alphabetic 5))
              data ($binary.random 10)]
             (pure (monad.let [! future.monad]
                     [verdict (monad.let (try.with !)
                                [no_events_prior_to_creation!
                                 (..no_events_prior_to_creation! fs watcher directory)

                                 after_creation!
                                 (..after_creation! fs watcher expected_path)

                                 after_modification!
                                 (..after_modification! fs watcher data expected_path)

                                 after_deletion!
                                 (..after_deletion! fs watcher expected_path)]
                                (pure (and no_events_prior_to_creation!
                                           after_creation!
                                           after_modification!
                                           after_deletion!)))]
                     (unit.coverage [/.memory /.polling]
                       (try.else false verdict)))))
           (monad.let random.monad
             [directory (random.alphabetic 5)
              .let [/ "/"
                    [fs watcher] (/.memory /)]]
             (pure (monad.let future.monad
                     [started? (by watcher start /.all directory)]
                     (unit.coverage [/.cannot_poll_a_non_existent_directory]
                       (when started?
                         {try.#Success _}
                         false
                         
                         {try.#Failure error}
                         (exception.is? /.cannot_poll_a_non_existent_directory error))))))
           )))
