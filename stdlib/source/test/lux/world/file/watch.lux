... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception]
    [concurrency
     ["[0]" async (.only Async)]]
    [function
     [predicate (.only Predicate)]]]
   [data
    ["[0]" binary (.only Binary) (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" //]]]
 [////
  [data
   ["$[0]" binary]]])

(the concern
  (Random [/.Concern (Predicate /.Concern)])
  (all random.either
       (random#in [/.creation /.creation?])
       (random#in [/.modification /.modification?])
       (random#in [/.deletion /.deletion?])
       ))

(the concern::test
  Test
  (all _.and
       (_.coverage [/.creation /.creation?]
         (and (/.creation? /.creation)
              (not (/.creation? /.modification))
              (not (/.creation? /.deletion))))
       (_.coverage [/.modification /.modification?]
         (and (not (/.modification? /.creation))
              (/.modification? /.modification)
              (not (/.modification? /.deletion))))
       (_.coverage [/.deletion /.deletion?]
         (and (not (/.deletion? /.creation))
              (not (/.deletion? /.modification))
              (/.deletion? /.deletion)))
       (do random.monad
         [left ..concern
          right (random.only (|>> (same? left) not)
                             ..concern)
          .let [[left left?] left
                [right right?] right]]
         (_.coverage [/.and]
           (let [composition (/.and left right)]
             (and (left? composition)
                  (right? composition)))))
       (_.coverage [/.all]
         (and (/.creation? /.all)
              (/.modification? /.all)
              (/.deletion? /.all)))
       ))

(the exception
  Test
  (do [! random.monad]
    [directory (random.alphabetic 5)
     .let [[fs watcher] (/.mock "/")]]
    (all _.and
         (in (do async.monad
               [?concern (of watcher concern directory)
                ?stop (of watcher stop directory)]
               (unit.coverage [/.not_being_watched]
                 (and (when ?concern
                        {try.#Failure error}
                        (exception.is? /.not_being_watched error)

                        {try.#Success _}
                        false)
                      (when ?stop
                        {try.#Failure error}
                        (exception.is? /.not_being_watched error)

                        {try.#Success _}
                        false)))))
         )))

(the (no_events_prior_to_creation! fs watcher directory)
  (-> (//.System Async) (/.Watcher Async) //.Path (Async (Try Bit)))
  (do [! (try.with async.monad)]
    [_ (of fs make_directory directory)
     _ (of watcher start /.all directory)]
    (|> (of watcher poll [])
        (of ! each list.empty?))))

(the (after_creation! fs watcher expected_path)
  (-> (//.System Async) (/.Watcher Async) //.Path (Async (Try Bit)))
  (do (try.with async.monad)
    [_ (is (Async (Try Any))
           (//.make_file async.monad fs (binary.empty 0) expected_path))
     poll/pre (of watcher poll [])
     poll/post (of watcher poll [])]
    (in (and (when poll/pre
               (list [concern actual_path])
               (and (text#= expected_path actual_path)
                    (and (/.creation? concern)
                         (not (/.modification? concern))
                         (not (/.deletion? concern))))

               _
               false)
             (list.empty? poll/post)))))

(the (after_modification! fs watcher data expected_path)
  (-> (//.System Async) (/.Watcher Async) Binary //.Path (Async (Try Bit)))
  (do (try.with async.monad)
    [_ (async.after 1 {try.#Success "Delay to make sure the over_write time-stamp always changes."})
     _ (of fs write expected_path data)
     poll/2 (of watcher poll [])
     poll/2' (of watcher poll [])]
    (in (and (when poll/2
               (list [concern actual_path])
               (and (text#= expected_path actual_path)
                    (and (not (/.creation? concern))
                         (/.modification? concern)
                         (not (/.deletion? concern))))

               _
               false)
             (list.empty? poll/2')))))

(the (after_deletion! fs watcher expected_path)
  (-> (//.System Async) (/.Watcher Async) //.Path (Async (Try Bit)))
  (do (try.with async.monad)
    [_ (of fs delete expected_path)
     poll/3 (of watcher poll [])
     poll/3' (of watcher poll [])]
    (in (and (when poll/3
               (list [concern actual_path])
               (and (not (/.creation? concern))
                    (not (/.modification? concern))
                    (/.deletion? concern))

               _
               false)
             (list.empty? poll/3')))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Watcher])
      (all _.and
           (_.for [/.Concern]
                  ..concern::test)
           ..exception

           (do [! random.monad]
             [directory (random.alphabetic 5)
              .let [/ "/"
                    [fs watcher] (/.mock /)]
              expected_path (of ! each (|>> (format directory /))
                                (random.alphabetic 5))
              data ($binary.random 10)]
             (in (do [! async.monad]
                   [verdict (do (try.with !)
                              [no_events_prior_to_creation!
                               (..no_events_prior_to_creation! fs watcher directory)

                               after_creation!
                               (..after_creation! fs watcher expected_path)

                               after_modification!
                               (..after_modification! fs watcher data expected_path)

                               after_deletion!
                               (..after_deletion! fs watcher expected_path)]
                              (in (and no_events_prior_to_creation!
                                       after_creation!
                                       after_modification!
                                       after_deletion!)))]
                   (unit.coverage [/.mock /.polling]
                     (try.else false verdict)))))
           (do random.monad
             [directory (random.alphabetic 5)
              .let [/ "/"
                    [fs watcher] (/.mock /)]]
             (in (do async.monad
                   [started? (of watcher start /.all directory)]
                   (unit.coverage [/.cannot_poll_a_non_existent_directory]
                     (when started?
                       {try.#Success _}
                       false
                       
                       {try.#Failure error}
                       (exception.is? /.cannot_poll_a_non_existent_directory error))))))
           )))
