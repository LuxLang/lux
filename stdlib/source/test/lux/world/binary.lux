(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["r" math/random (#+ Random)]
   ["_" test (#+ Test)]
   [abstract
    ["." monad (#+ do)]
    {[0 #test]
     [/
      ["$." equivalence]]}]
   [data
    ["." error (#+ Error)]
    [number
     ["." i64]
     ["." nat]]
    [collection
     ["." list]]]]
  {1
   ["." / (#+ Binary)]})

(def: (succeed result)
  (-> (Error Bit) Bit)
  (case result
    (#error.Failure _)
    #0

    (#error.Success output)
    output))

(def: #export (binary size)
  (-> Nat (Random Binary))
  (let [output (/.create size)]
    (loop [idx 0]
      (if (n/< size idx)
        (do r.monad
          [byte r.nat]
          (exec (error.assume (/.write/8 idx byte output))
            (recur (inc idx))))
        (:: r.monad wrap output)))))

(def: (bits-io bytes read write value)
  (-> Nat (-> Nat Binary (Error Nat)) (-> Nat Nat Binary (Error Any)) Nat Bit)
  (let [binary (/.create bytes)
        cap (case bytes
              8 (dec 0)
              _ (|> 1 (i64.left-shift (n/* 8 bytes)) dec))
        capped-value (i64.and cap value)]
    (succeed
     (do error.monad
       [_ (write 0 value binary)
        output (read 0 binary)]
       (wrap (n/= capped-value output))))))

(def: #export test
  Test
  (<| (_.context (%.name (name-of /._)))
      (do r.monad
        [#let [gen-size (|> r.nat (:: @ map (|>> (n/% 100) (n/max 8))))]
         binary-size gen-size
         random-binary (binary binary-size)
         value r.nat
         #let [gen-idx (|> r.nat (:: @ map (n/% binary-size)))]
         [from to] (r.and gen-idx gen-idx)
         #let [[from to] [(n/min from to) (n/max from to)]]]
        ($_ _.and
            ($equivalence.spec /.equivalence (binary binary-size))
            (_.test "Can get size of binary."
                    (|> random-binary /.size (n/= binary-size)))
            (_.test "Can read/write 8-bit values."
                    (bits-io 1 /.read/8 /.write/8 value))
            (_.test "Can read/write 16-bit values."
                    (bits-io 2 /.read/16 /.write/16 value))
            (_.test "Can read/write 32-bit values."
                    (bits-io 4 /.read/32 /.write/32 value))
            (_.test "Can read/write 64-bit values."
                    (bits-io 8 /.read/64 /.write/64 value))
            (_.test "Can slice binaries."
                    (let [slice-size (|> to (n/- from) inc)
                          random-slice (error.assume (/.slice from to random-binary))
                          idxs (list.n/range 0 (dec slice-size))
                          reader (function (_ binary idx) (/.read/8 idx binary))]
                      (and (n/= slice-size (/.size random-slice))
                           (case [(monad.map error.monad (reader random-slice) idxs)
                                  (monad.map error.monad (|>> (n/+ from) (reader random-binary)) idxs)]
                             [(#error.Success slice-vals) (#error.Success binary-vals)]
                             (:: (list.equivalence nat.equivalence) = slice-vals binary-vals)

                             _
                             #0))))
            ))))
