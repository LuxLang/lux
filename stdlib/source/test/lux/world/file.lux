... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future)]
    ["[0]" atom (.only Atom)]]
   [control
    ["[0]" io (.only IO)]]
   [error
    ["[0]" try (.only Try) (.use "[1]:[0]" functor)]
    ["[0]" exception]]
   [function
    ["[0]" predicate]]
   [data
    ["[0]" maybe (.use "[1]:[0]" functor)]
    ["[0]" binary (.only Binary) (.use "[1]:[0]" monoid)
     ["$[1]" \\test]]
    ["[0]" text (.only)
     [encoding
      ["[0]" utf8 (.use "[1]:[0]" binary)]]]
    [collection
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" list (.use "[1]:[0]" monoid)]]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]]
   [time
    ["[0]" instant (.only Instant)]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 ["[0]" /
  ["[1][0]" watch]
  ["[1][0]" extension]]
 [\\library
  ["[0]" /]])

(the (for_path fs)
  (-> (IO (/.System Future))
      Test)
  (<| (_.for [/.Path])
      (monad.let [! random.monad]
        [parent (random.numeric 2)
         child (random.numeric 2)])
      pure
      (monad.let future.monad
        [fs (future.soon fs)]
        (all unit.and
             (unit.coverage [/.rooted]
               (let [path (/.rooted fs parent child)]
                 (and (text.starts_with? parent path)
                      (text.ends_with? child path))))
             (unit.coverage [/.parent]
               (|> (/.rooted fs parent child)
                   (/.parent fs)
                   (maybe:each (text.= parent))
                   (maybe.else false)))
             (unit.coverage [/.name]
               (|> (/.rooted fs parent child)
                   (/.name fs)
                   (text.= child)))
             ))))

(the (directory?&make_directory fs parent)
  (-> (/.System Future) /.Path
      (Future Bit))
  (monad.let future.monad
    [directory_pre! (by fs directory? parent)
     made? (by fs make_directory parent)
     directory_post! (by fs directory? parent)]
    (pure (and (not directory_pre!)
               (when made?
                 {try.:Success _} true
                 {try.:Failure _} false)
               directory_post!))))

(the (file?&write fs content path)
  (-> (/.System Future) Binary /.Path
      (Future Bit))
  (monad.let future.monad
    [file_pre! (by fs file? path)
     made? (by fs write path content)
     file_post! (by fs file? path)]
    (pure (and (not file_pre!)
               (when made?
                 {try.:Success _} true
                 {try.:Failure _} false)
               file_post!))))

(the (file_size&read&append fs expected_file_size content appendix path)
  (-> (/.System Future) Natural Binary Binary /.Path
      (Future Bit))
  (monad.let future.monad
    [pre_file_size (by fs file_size path)
     pre_content (by fs read path)
     appended? (by fs append path appendix)
     post_file_size (by fs file_size path)
     post_content (by fs read path)]
    (pure (<| (try.else false)
              (monad.let [! try.monad]
                [pre_file_size!
                 (by ! each (n.= expected_file_size) pre_file_size)
                 
                 pre_content!
                 (by ! each (binary.= content) pre_content)
                 
                 _ appended?

                 post_file_size!
                 (by ! each (n.= (n.x 2 expected_file_size)) post_file_size)
                 
                 post_content!
                 (by ! each (binary.= (binary:composite content appendix)) post_content)]
                (pure (and pre_file_size!
                           pre_content!
                           post_file_size!
                           post_content!)))))))

(the (modified?&last_modified fs expected_time path)
  (-> (/.System Future) Instant /.Path
      (Future Bit))
  (monad.let future.monad
    [modified? (by fs modify path expected_time)
     last_modified (by fs last_modified path)]
    (pure (<| (try.else false)
              (monad.let [! try.monad]
                [_ modified?]
                (by ! each (instant.= expected_time) last_modified))))))

(the (directory_files&sub_directories fs parent sub_dir child)
  (-> (/.System Future) /.Path /.Path /.Path
      (Future Bit))
  (let [sub_dir (/.rooted fs parent sub_dir)
        child (/.rooted fs parent child)]
    (monad.let future.monad
      [made_sub? (by fs make_directory sub_dir)
       directory_files (by fs directory_files parent)
       sub_directories (by fs sub_directories parent)
       .let [(open "list:[0]") (list.equality text.equality)]]
      (pure (<| (try.else false)
                (monad.let try.monad
                  [_ made_sub?]
                  (pure (and (|> directory_files
                                 (try:each (list:= (list child)))
                                 (try.else false))
                             (|> sub_directories
                                 (try:each (list:= (list sub_dir)))
                                 (try.else false))))))))))

(the (move&delete fs parent child alternate_child)
  (-> (/.System Future) /.Path Text Text
      (Future Bit))
  (let [origin (/.rooted fs parent child)
        destination (/.rooted fs parent alternate_child)]
    (monad.let [! future.monad]
      [moved? (by fs move origin destination)
       lost? (|> origin
                 (by fs file?)
                 (by ! each not))
       found? (by fs file? destination)
       deleted? (by fs delete destination)]
      (pure (<| (try.else false)
                (monad.let try.monad
                  [_ moved?
                   _ deleted?]
                  (pure (and lost?
                             found?))))))))

(the (for_system fs)
  (-> (IO (/.System Future))
      Test)
  (<| (monad.let [! random.monad]
        [parent (random.numeric 2)
         child (random.numeric 2)
         sub_dir (random.only (|>> (text.= child) not)
                              (random.numeric 2))
         alternate_child (random.only (predicate.and
                                       (|>> (text.= child) not)
                                       (|>> (text.= sub_dir) not))
                                      (random.numeric 2))
         expected_file_size (by ! each (|>> (n.% 10) ++) random.natural)
         content ($binary.random expected_file_size)
         appendix ($binary.random expected_file_size)
         expected_time instant.random])
      pure
      (monad.let [! future.monad]
        [fs (future.soon fs)
         .let [path (/.rooted fs parent child)]
         
         directory?&make_directory
         (..directory?&make_directory fs parent)

         file?&write
         (..file?&write fs content path)

         file_size&read&append
         (..file_size&read&append fs expected_file_size content appendix path)

         modified?&last_modified
         (..modified?&last_modified fs expected_time path)

         can_execute?
         (|> path
             (by fs can_execute?)
             (by ! each (|>> (try.else true) not)))

         directory_files&sub_directories
         (..directory_files&sub_directories fs parent sub_dir child)

         move&delete
         (..move&delete fs parent child alternate_child)])
      (unit.coverage [/.System
                      /.delimiter
                      /.file? /.directory?
                      /.make_directory /.directory_files /.sub_directories
                      /.file_size /.last_modified /.can_execute? /.read /.delete
                      /.modify /.write /.append /.move]
        (and directory?&make_directory
             file?&write
             file_size&read&append
             modified?&last_modified
             can_execute?
             directory_files&sub_directories
             move&delete))))

(the (make_directories&cannot_make_directory fs)
  (-> (IO (/.System Future))
      Test)
  (<| (monad.let [! random.monad]
        [dir/0 (random.numeric 2)
         dir/1 (random.numeric 2)
         dir/2 (random.numeric 2)])
      pure
      (monad.let [! future.monad]
        [fs (future.soon fs)
         .let [dir/1 (/.rooted fs dir/0 dir/1)
               dir/2 (/.rooted fs dir/1 dir/2)]
         pre_dir/0 (by fs directory? dir/0)
         pre_dir/1 (by fs directory? dir/1)
         pre_dir/2 (by fs directory? dir/2)
         made? (/.make_directories ! fs dir/2)
         post_dir/0 (by fs directory? dir/0)
         post_dir/1 (by fs directory? dir/1)
         post_dir/2 (by fs directory? dir/2)

         cannot_make_directory!/0 (/.make_directories ! fs "")
         cannot_make_directory!/1 (/.make_directories ! fs (by fs delimiter))])
      (all unit.and
           (unit.coverage [/.make_directories]
             (and (not pre_dir/0)
                  (not pre_dir/1)
                  (not pre_dir/2)
                  (when made?
                    {try.:Success _} true
                    {try.:Failure _} false)
                  post_dir/0
                  post_dir/1
                  post_dir/2))
           (unit.coverage [/.cannot_make_directory]
             (and (when cannot_make_directory!/0
                    {try.:Success _}
                    false
                    
                    {try.:Failure error}
                    (exception.is? /.cannot_make_directory error))
                  (when cannot_make_directory!/1
                    {try.:Success _}
                    false
                    
                    {try.:Failure error}
                    (exception.is? /.cannot_make_directory error))))
           )))

(the (make_file&cannot_make_file fs)
  (-> (IO (/.System Future))
      Test)
  (<| (monad.let [! random.monad]
        [file/0 (random.numeric 3)])
      pure
      (monad.let [! future.monad]
        [fs (future.soon fs)
         make_file!/0 (/.make_file ! fs (utf8:as file/0) file/0)
         make_file!/1 (/.make_file ! fs (utf8:as file/0) file/0)])
      (all unit.and
           (unit.coverage [/.make_file]
             (when make_file!/0
               {try.:Success _} true
               {try.:Failure error} false))
           (unit.coverage [/.cannot_make_file]
             (when make_file!/1
               {try.:Success _}
               false
               
               {try.:Failure error}
               (exception.is? /.cannot_make_file error)))
           )))

(the (for_utilities fs)
  (-> (IO (/.System Future))
      Test)
  (all _.and
       (..make_directories&cannot_make_directory fs)
       (..make_file&cannot_make_file fs)
       ))

(the (exists? fs)
  (-> (IO (/.System Future))
      Test)
  (<| (monad.let [! random.monad]
        [file (random.numeric 2)
         dir (random.only (|>> (text.= file) not)
                          (random.numeric 2))])
      pure
      (monad.let [! future.monad]
        [fs (future.soon fs)
         
         pre_file/0 (by fs file? file)
         pre_file/1 (/.exists? ! fs file)
         pre_dir/0 (by fs directory? dir)
         pre_dir/1 (/.exists? ! fs dir)

         made_file? (/.make_file ! fs (utf8:as file) file)
         made_dir? (by fs make_directory dir)

         post_file/0 (by fs file? file)
         post_file/1 (/.exists? ! fs file)
         post_dir/0 (by fs directory? dir)
         post_dir/1 (/.exists? ! fs dir)])
      (unit.coverage [/.exists?]
        (and (not pre_file/0)
             (not pre_file/1)
             (not pre_dir/0)
             (not pre_dir/1)

             (when made_file?
               {try.:Success _} true
               {try.:Failure _} false)
             (when made_dir?
               {try.:Success _} true
               {try.:Failure _} false)

             post_file/0
             post_file/1
             post_dir/0
             post_dir/1))))

(the .public (spec fs)
  (-> (IO (/.System Future))
      Test)
  (all _.and
       (..for_path fs)
       (..for_utilities fs)
       (..for_system fs)
       (..exists? fs)
       ))

(every Disk
  (Dictionary /.Path (Either [Instant Binary] (List Text))))

(the (file? disk @)
  (-> (Atom Disk)
      (-> /.Path (IO Bit)))
  (monad.let io.monad
    [disk (atom.read! disk)]
    (pure (when (dictionary.value @ disk)
            {try.:Success {.:Left _}} true
            {try.:Success {.:Right _}} false
            failure false))))

(the (directory? disk @)
  (-> (Atom Disk)
      (-> /.Path (IO Bit)))
  (monad.let io.monad
    [disk (atom.read! disk)]
    (pure (when (dictionary.value @ disk)
            {try.:Success {.:Left _}} false
            {try.:Success {.:Right _}} true
            failure false))))

(the (alert_parent! disk alert @)
  (-> (Atom Disk)
      (-> (List /.Path) (List /.Path))
      (-> /.Path (IO (Try Any))))
  (monad.let [! io.monad]
    [disk' (atom.read! disk)]
    (when (dictionary.value @ disk')
      {try.:Success {.:Right siblings}}
      (monad.let !
        [_ (atom.compare_and_swap! disk' (dictionary.has @ {.:Right (alert siblings)} disk') disk)]
        (pure {try.:Success []}))

      failure
      (pure {try.:Failure ""}))))

(the (write fs disk @ it)
  (-> (/.System Future) (Atom Disk)
      (-> /.Path Binary (IO (Try Any))))
  (monad.let [! io.monad]
    [now instant.now
     disk' (atom.read! disk)]
    (when (dictionary.value @ disk')
      (^.or {try.:Failure _}
            {try.:Success {.:Left _}})
      (monad.let !
        [_ (atom.compare_and_swap! disk' (dictionary.has @ {.:Left [now it]} disk') disk)]
        (when (/.parent fs @)
          {.:Some parent}
          (alert_parent! disk (list:composite (list @)) parent)

          {.:None}
          (pure {try.:Success []})))

      else
      (pure {try.:Failure ""}))))

(the (read disk @)
  (-> (Atom Disk)
      (-> /.Path (IO (Try Binary))))
  (monad.let io.monad
    [disk (atom.read! disk)]
    (pure (when (dictionary.value @ disk)
            {try.:Success {.:Left [_ it]}}
            {try.:Success it}

            failure
            {try.:Failure ""}))))

(the (delete fs disk @)
  (-> (/.System Future) (Atom Disk)
      (-> /.Path (IO (Try Any))))
  (monad.let [! io.monad]
    [disk' (atom.read! disk)]
    (when (dictionary.value @ disk')
      {try.:Success {.:Right children}}
      (if (list.empty? children)
          (monad.let !
            [_ (atom.compare_and_swap! disk' (dictionary.lacks @ disk') disk)]
            (pure {try.:Success []}))
          (pure {try.:Failure ""}))
      
      {try.:Success {.:Left [_ data]}}
      (monad.let !
        [_ (atom.compare_and_swap! disk' (dictionary.lacks @ disk') disk)]
        (when (/.parent fs @)
          {.:Some parent}
          (alert_parent! disk (list.only (|>> (text.= @) not)) parent)

          {.:None}
          (pure {try.:Success []})))

      failure
      (pure {try.:Failure ""}))))

(the (fs /)
  (-> Text
      (/.System IO))
  (let [disk (is (Atom Disk)
                 (atom.atom (dictionary.empty text.hash)))
        memory (/.memory /)]
    (implementation
     (the delimiter /)

     (the file? (..file? disk))
     (the directory? (..directory? disk))
     (the write (..write memory disk))
     (the read (..read disk))
     (the delete (..delete memory disk))

     (the (file_size @)
       (monad.let [! io.monad]
         [disk (atom.read! disk)]
         (pure (when (dictionary.value @ disk)
                 {try.:Success {.:Left [_ it]}}
                 {try.:Success (binary.size it)}

                 failure
                 {try.:Failure ""}))))
     (the (last_modified @)
       (monad.let [! io.monad]
         [disk (atom.read! disk)]
         (pure (when (dictionary.value @ disk)
                 {try.:Success {.:Left [it _]}}
                 {try.:Success it}

                 failure
                 {try.:Failure ""}))))
     (the (can_execute? @)
       (monad.let [! io.monad]
         [disk (atom.read! disk)]
         (pure (when (dictionary.value @ disk)
                 {try.:Success {.:Left _}}
                 {try.:Success false}

                 failure
                 {try.:Failure ""}))))

     (the (make_directory @)
       (monad.let [! io.monad]
         [disk' (atom.read! disk)]
         (when (dictionary.value @ disk')
           {try.:Failure _}
           (monad.let !
             [_ (atom.compare_and_swap! disk' (dictionary.has @ {.:Right (list)} disk') disk)]
             (when (/.parent memory @)
               {.:Some parent}
               (alert_parent! disk (list:composite (list @)) parent)

               {.:None}
               (pure {try.:Success []})))

           success
           (pure {try.:Failure ""}))))
     (the (directory_files @)
       (monad.let [! io.monad]
         [disk' (atom.read! disk)]
         (when (dictionary.value @ disk')
           {try.:Success {.:Right children}}
           (|> children
               (list.only' ! (..file? disk))
               (by ! each (|>> {try.:Success})))

           failure
           (pure {try.:Failure ""}))))
     (the (sub_directories @)
       (monad.let [! io.monad]
         [disk' (atom.read! disk)]
         (when (dictionary.value @ disk')
           {try.:Success {.:Right children}}
           (|> children
               (list.only' ! (..directory? disk))
               (by ! each (|>> {try.:Success})))

           failure
           (pure {try.:Failure ""}))))
     (the (append @ it)
       (monad.let [! io.monad]
         [now instant.now
          disk' (atom.read! disk)]
         (when (dictionary.value @ disk')
           {try.:Failure _}
           (..write memory disk @ it)
           
           {try.:Success {.:Left [_ old]}}
           (monad.let !
             [_ (atom.compare_and_swap! disk'
                                        (dictionary.has @ {.:Left [now (binary:composite old it)]} disk')
                                        disk)]
             (pure {try.:Success []}))

           else
           (pure {try.:Failure ""}))))
     (the (modify @ it)
       (monad.let [! io.monad]
         [disk' (atom.read! disk)]
         (when (dictionary.value @ disk')
           {try.:Success {.:Left [_ data]}}
           (monad.let !
             [_ (atom.compare_and_swap! disk' (dictionary.has @ {.:Left [it data]} disk') disk)]
             (pure {try.:Success []}))

           else
           (pure {try.:Failure ""}))))
     (the (move @ it)
       (monad.let [! (try.with io.monad)]
         [data (..read disk @)
          write (..write memory disk it data)]
         (..delete memory disk @)))
     )))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [/ (random.upper_cased 1)
         
         file (random.lower_cased 1)
         copy (random.lower_cased 2)
         
         content (by ! each utf8:as (random.unicode 1))]
        (all _.and
             (_.for [/.memory]
                    (..spec (io.io (/.memory /))))
             (_.for [/.future]
                    (..spec (io.io (/.future (..fs /)))))

             (pure (monad.let future.monad
                     [.let [fs (/.memory /)]
                      ? (by fs delete file)]
                     (unit.coverage [/.cannot_delete]
                       (when ?
                         {try.:Failure error}
                         (exception.is? /.cannot_delete error)

                         _
                         false))))
             (pure (monad.let future.monad
                     [.let [fs (/.memory /)]
                      ? (by fs read file)]
                     (unit.coverage [/.cannot_find_file]
                       (when ?
                         {try.:Failure error}
                         (exception.is? /.cannot_find_file error)

                         _
                         false))))
             (pure (monad.let future.monad
                     [.let [fs (/.memory /)]
                      ?/0 (by fs directory_files file)
                      ?/1 (by fs sub_directories file)]
                     (unit.coverage [/.cannot_find_directory]
                       (when [?/0 ?/1]
                         [{try.:Failure error/0} {try.:Failure error/1}]
                         (and (exception.is? /.cannot_find_directory error/0)
                              (exception.is? /.cannot_find_directory error/1))

                         _
                         false))))
             (pure (monad.let [! future.monad]
                     [.let [fs (/.memory /)]
                      it (monad.let (try.with !)
                           [_ (by fs write file content)
                            _ (is (Future (Try Any))
                                  (/.copy ! fs file copy))

                            expected (by fs read file)
                            actual (by fs read copy)]
                           (pure (binary.= expected actual)))]
                     (unit.coverage [/.copy]
                       (try.else false it))))
             
             /watch.test
             /extension.test
             ))))
