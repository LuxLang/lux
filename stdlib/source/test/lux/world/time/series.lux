(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" functor
     ["[1]T" \\test (.only Injection)]]
    ["[0]" mix
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["|" pipe]
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" set]
     ["[0]" sequence]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" functor)]
    [number
     ["n" nat]
     ["i" int]]]
   [world
    [time
     ["[0]" instant (.only Instant) (.use "[1]#[0]" order)]
     ["[0]" duration (.only Duration)]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" average]])

(def .public (random events it)
  (All (_ of)
    (-> Nat (Random of)
        (Random (/.Series of))))
  (do [! random.monad]
    [.let [duration (random.only duration.positive? random.duration)]
     offset (of ! each (duration.framed (duration.up 100 duration.normal_year))
                duration)
     .let [start (instant.after offset instant.epoch)]
     interval (of ! each (duration.framed duration.week)
                  duration)
     data (random.sequence events it)]
    (in [/.#start start
         /.#interval interval
         /.#data data])))

(def (injection start interval)
  (-> Instant Duration
      (Injection /.Series))
  (|>> sequence.sequence
       [/.#start start
        /.#interval interval
        /.#data]))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_size (of ! each (|>> (n.% 10) ++) random.nat)
         expected_series (..random expected_size random.nat)

         before random.nat
         after random.nat
         expected_start random.instant
         expected_interval random.duration

         window_size (of ! each (|>> (n.% expected_size) ++) random.nat)
         window_offset (of ! each (n.% (++ (n.- window_size expected_size))) random.nat)])
      (_.for [/.Series
              /.#start /.#interval /.#data])
      (`` (all _.and
               (_.for [/.equivalence]
                      (equivalenceT.spec (/.equivalence n.equivalence) (..random expected_size random.nat)))
               (_.for [/.mix]
                      (mixT.spec (..injection expected_start expected_interval) /.equivalence /.mix))
               (_.for [/.functor]
                      (functorT.spec (..injection expected_start expected_interval) /.equivalence /.functor))
               
               (_.coverage [/.size]
                 (n.= expected_size
                      (/.size expected_series)))
               (_.coverage [/.start /.end]
                 (instant#< (/.end expected_series)
                            (/.start expected_series)))
               (_.coverage [/.at]
                 (and (instant#= (/.at 0 expected_series)
                                 (/.start expected_series))
                      (instant#< (/.at (-- expected_size) expected_series)
                                 (/.start expected_series))))
               (,, (with_template [<event> <expected>]
                     [(_.coverage [<event>]
                        (|> (do try.monad
                              [.let [it [/.#start expected_start
                                         /.#interval expected_interval
                                         /.#data (sequence.sequence before after)]]
                               actual (<event> it)]
                              (in (same? <expected> actual)))
                            (try.else false)))]

                     [/.earliest before]
                     [/.latest after]
                     ))
               (_.coverage [/.empty]
                 (and (,, (with_template [<event> <expected>]
                            [(|> (do try.monad
                                   [.let [it [/.#start expected_start
                                              /.#interval expected_interval
                                              /.#data (sequence.sequence)]]]
                                   (<event> it))
                                 (|.when
                                   {try.#Failure error}
                                   (exception.match? /.empty error)
                                   
                                   _
                                   false))]

                            [/.earliest before]
                            [/.latest after]
                            ))))
               (_.coverage [/.window]
                 (|> (do try.monad
                       [it (/.window window_offset window_size expected_series)]
                       (in (n.= window_size (/.size it))))
                     (try.else false)))
               (_.coverage [/.window_goes_out_of_bounds]
                 (and (|> (/.window expected_size window_size expected_series)
                          (|.when
                            {try.#Failure error}
                            (exception.match? /.window_goes_out_of_bounds error)
                            
                            _
                            false))
                      (|> (/.window (++ window_offset) expected_size expected_series)
                          (|.when
                            {try.#Failure error}
                            (exception.match? /.window_goes_out_of_bounds error)
                            
                            _
                            false))))

               /average.test
               ))))
