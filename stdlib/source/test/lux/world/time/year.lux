... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [control
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]
     ["i" int]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.only)
    ["[1][0]" duration]
    ["[1][0]" instant]
    ["[1][0]" date]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Year])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec /.equivalence /.random))
           (_.for [/.order]
                  (orderT.spec /.order /.random))
           (_.for [/.format /.projection]
                  (formatT.spec /.equivalence /.format /.random))
           
           (do random.monad
             [expected random.int]
             (all _.and
                  (_.coverage [/.year]
                    (bit.= (i.= +0 expected)
                           (when (/.year expected)
                             {try.#Success _}
                             false

                             {try.#Failure _}
                             true)))
                  (_.coverage [/.value]
                    (when (/.year expected)
                      {try.#Success year}
                      (i.= expected (/.value year))

                      {try.#Failure _}
                      (i.= +0 expected)))
                  ))
           (_.coverage [/.there_is_no_year_0]
             (when (/.year +0)
               {try.#Success _}
               false

               {try.#Failure error}
               (exception.is? /.there_is_no_year_0 error)))
           (_.coverage [/.days]
             (n.= (.natural (//duration.ticks //duration.day //duration.normal_year))
                  /.days))
           (_.coverage [/.epoch]
             (of /.equivalence =
                 (//date.year (//instant.date //instant.epoch))
                 /.epoch))
           (_.for [/.Period]
                  (_.coverage [/.leap /.century /.era]
                    (n.= /.leap (n./ /.century /.era))))
           (let [leap (try.trusted (/.year (.int /.leap)))
                 century (try.trusted (/.year (.int /.century)))
                 era (try.trusted (/.year (.int /.era)))]
             (all _.and
                  (_.coverage [/.leap?]
                    (and (/.leap? leap)
                         (not (/.leap? century))
                         (/.leap? era)))
                  (_.coverage [/.leaps]
                    (and (i.= +1 (/.leaps leap))
                         (i.= (.int (n./ /.leap /.century))
                              (/.leaps century))
                         (i.= (++ (i.* +4 (-- (/.leaps century))))
                              (/.leaps era))))
                  ))
           (do random.monad
             [expected /.random
              actual (random.only (|>> (of /.equivalence = expected) not)
                                  /.random)]
             (_.coverage [/.random]
               (not (of /.equivalence = expected actual))))
           )))
