... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" enum
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]
    [function
     ["[0]" predicate]]]
   [data
    ["[0]" text
     ["?[1]" \\projection]]
    [collection
     ["[0]" set]
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [meta
    ["[0]" static]
    [macro
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" duration]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Month])
      (`` (all _.and
               (_.for [/.equivalence
                       /.=]
                      (static.when (same? /.equivalence /.=)
                        (equivalenceT.spec /.equivalence /.random)))
               (_.for [/.hash]
                      (hashT.spec /.hash /.random))
               (_.for [/.order]
                      (orderT.spec /.order /.random))
               (_.for [/.enum]
                      (enumT.spec /.enum /.random))
               (_.for [/.format]
                      (formatT.spec /.equivalence /.format /.random))

               (,, (template.with [<before> <current> <after>]
                     [(_.coverage [<current>]
                        (and (of /.equivalence = {<before>} (of /.enum pred {<current>}))
                             (of /.equivalence = {<after>} (of /.enum succ {<current>}))))]

                     [/.#December /.#January /.#February]
                     [/.#January /.#February /.#March]
                     [/.#February /.#March /.#April]
                     [/.#March /.#April /.#May]
                     [/.#April /.#May /.#June]
                     [/.#May /.#June /.#July]
                     [/.#June /.#July /.#August]
                     [/.#July /.#August /.#September]
                     [/.#August /.#September /.#October]
                     [/.#September /.#October /.#November]
                     [/.#October /.#November /.#December]
                     [/.#November /.#December /.#January]
                     ))
               (do random.monad
                 [expected /.random
                  invalid (random.only (predicate.or (n.< (/.number {/.#January}))
                                                     (n.> (/.number {/.#December})))
                                       random.natural)]
                 (all _.and
                      (_.coverage [/.number /.by_number]
                        (|> expected
                            /.number
                            /.by_number
                            (try#each (of /.equivalence = expected))
                            (try.else false)))
                      (_.coverage [/.invalid_month]
                        (when (/.by_number invalid)
                          {try.#Failure error}
                          (exception.is? /.invalid_month error)
                          
                          {try.#Success _}
                          false))
                      (_.coverage [/.year]
                        (let [all (list.size /.year)
                              uniques (set.size (set.of_list /.hash /.year))]
                          (and (n.= (/.number {/.#December})
                                    all)
                               (n.= all
                                    uniques))))
                      (_.coverage [/.days]
                        (let [expected (.natural (duration.ticks duration.day duration.normal_year))]
                          (|> /.year
                              (list#each /.days)
                              (list#mix n.+ 0)
                              (n.= expected))))
                      (_.coverage [/.leap_year_days]
                        (let [expected (.natural (duration.ticks duration.day duration.leap_year))]
                          (|> /.year
                              (list#each /.leap_year_days)
                              (list#mix n.+ 0)
                              (n.= expected))))
                      (do random.monad
                        [expected /.random]
                        (_.coverage [/.as_text /.projection]
                          (|> expected
                              /.as_text
                              (?text.value /.projection)
                              (try#each (of /.equivalence = expected))
                              (try.else false))))
                      (do random.monad
                        [expected /.random
                         actual (random.only (|>> (of /.equivalence = expected) not)
                                             /.random)]
                        (_.coverage [/.random]
                          (not (of /.equivalence = expected actual))))
                      ))))))
