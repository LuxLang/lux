(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" enum
     ["[1]T" \\test]]
    ["[0]" codec
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]
     ["i" int]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Duration])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec /.equivalence random.duration))
           (_.for [/.order]
                  (orderT.spec /.order random.duration))
           (_.for [/.enum]
                  (enumT.spec /.enum random.duration))
           (_.for [/.monoid]
                  (monoidT.spec /.equivalence /.monoid random.duration))
           (_.for [/.codec]
                  (codecT.spec /.equivalence /.codec random.duration))

           (do random.monad
             [duration random.duration]
             (_.coverage [/.of_millis /.millis]
               (|> duration /.millis /.of_millis (of /.equivalence = duration))))
           (do random.monad
             [.let [(open "#[0]") /.equivalence]
              expected random.duration
              parameter random.duration]
             (all _.and
                  (_.coverage [/.composite /.difference]
                    (|> expected (/.composite parameter) (/.difference parameter) (#= expected)))
                  (_.coverage [/.empty]
                    (|> expected (/.composite /.empty) (#= expected)))
                  (_.coverage [/.inverse]
                    (and (|> expected /.inverse /.inverse (#= expected))
                         (|> expected (/.composite (/.inverse expected)) (#= /.empty))))
                  (_.coverage [/.positive? /.negative? /.neutral?]
                    (or (bit#= (/.positive? expected)
                               (/.negative? (/.inverse expected)))
                        (bit#= (/.neutral? expected)
                               (/.neutral? (/.inverse expected)))))
                  ))
           (do random.monad
             [.let [(open "#[0]") /.equivalence]
              factor random.nat]
             (_.coverage [/.up /.down]
               (|> /.milli_second (/.up factor) (/.down factor) (#= /.milli_second))))
           (do [! random.monad]
             [.let [(open "#[0]") /.order
                    positive (|> random.duration
                                 (random.only (|>> (#= /.empty) not))
                                 (of ! each (function (_ duration)
                                              (if (/.positive? duration)
                                                duration
                                                (/.inverse duration)))))]
              sample positive
              frame positive]
             (`` (all _.and
                      (_.coverage [/.framed]
                        (let [sample' (/.framed frame sample)]
                          (and (#< frame sample')
                               (bit#= (#< frame sample)
                                      (#= sample sample')))))
                      (_.coverage [/.ticks]
                        (i.= +1 (/.ticks sample sample)))
                      (_.coverage [/.milli_second]
                        (#= /.empty (of /.enum pred /.milli_second)))
                      (,, (with_template [<factor> <big> <small>]
                            [(_.coverage [<big>]
                               (|> <big> (/.ticks <small>) (i.= <factor>)))]

                            [+1,000 /.second /.milli_second]
                            [+60 /.minute /.second]
                            [+60 /.hour /.minute]
                            [+24 /.day /.hour]

                            [+7 /.week /.day]
                            [+365 /.normal_year /.day]
                            [+366 /.leap_year /.day]
                            ))
                      )))
           )))
