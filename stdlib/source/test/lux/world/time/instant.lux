... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" enum
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [control
    ["[0]" function]
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" io]]
   [data
    ["[0]" text
     ["?[1]" \\projection]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [math
    ["[0]" random]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" duration (.only Duration)]
    ["[0]" day (.only Day) (.use "[1]#[0]" enum)]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Instant])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec /.equivalence /.random))
           (_.for [/.hash]
                  (hashT.spec /.hash /.random))
           (_.for [/.order]
                  (orderT.spec /.order /.random))
           (_.for [/.enum]
                  (enumT.spec /.enum /.random))
           (_.for [/.format]
                  (formatT.spec /.equivalence /.format /.random))

           (do random.monad
             [.let [(open "/#[0]") /.equivalence]
              expected /.random]
             (all _.and
                  (_.coverage [/.millis /.of_millis]
                    (|> expected /.millis /.of_millis (/#= expected)))
                  (_.coverage [/.relative /.absolute]
                    (|> expected /.relative /.absolute (/#= expected)))
                  (_.coverage [/.date /.time /.of_date_time]
                    (/#= expected
                         (/.of_date_time (/.date expected)
                                         (/.time expected))))
                  ))
           (do random.monad
             [.let [(open "/#[0]") /.equivalence
                    (open "duration#[0]") duration.equivalence]
              from /.random
              to /.random]
             (all _.and
                  (_.coverage [/.span]
                    (|> from (/.span from) (duration#= duration.empty)))
                  (_.coverage [/.before]
                    (|> from (/.before (/.span to from)) (/#= to)))
                  (_.coverage [/.after]
                    (|> from (/.after (/.span from to)) (/#= to)))
                  (_.coverage [/.epoch]
                    (duration#= (/.relative to)
                                (/.span /.epoch to)))
                  ))
           (do random.monad
             [.let [(open "/#[0]") /.order]
              it /.random]
             (all _.and
                  (_.coverage [/.first]
                    (not (/#< /.first it)))
                  (_.coverage [/.last]
                    (not (/#< it /.last)))
                  ))
           (do random.monad
             [instant /.random
              .let [d0 (/.day_of_week instant)]]
             (_.coverage [/.day_of_week]
               (let [apply (is (-> (-> Duration Duration) (-> Day Day) Nat Bit)
                               (function (_ polarity move steps)
                                 (let [day_shift (list#mix (function.constant move)
                                                           d0
                                                           (list.repeated steps []))
                                       instant_shift (|> instant
                                                         (/.after (polarity (duration.up steps duration.day)))
                                                         /.day_of_week)]
                                   (day#= day_shift
                                          instant_shift))))]
                 (and (apply function.identity day#succ 0)
                      (apply function.identity day#succ 1)
                      (apply function.identity day#succ 2)
                      (apply function.identity day#succ 3)
                      (apply function.identity day#succ 4)
                      (apply function.identity day#succ 5)
                      (apply function.identity day#succ 6)
                      (apply function.identity day#succ 7)

                      (apply duration.inverse day#pred 0)
                      (apply duration.inverse day#pred 1)
                      (apply duration.inverse day#pred 2)
                      (apply duration.inverse day#pred 3)
                      (apply duration.inverse day#pred 4)
                      (apply duration.inverse day#pred 5)
                      (apply duration.inverse day#pred 6)
                      (apply duration.inverse day#pred 7)))))
           (_.coverage [/.now]
             (when (try (io.value /.now))
               {try.#Success _}
               true
               
               {try.#Failure _}
               false))
           (do random.monad
             [expected /.random
              actual (random.only (|>> (of /.equivalence = expected) not) /.random)]
             (_.coverage [/.random]
               (not (of /.equivalence = expected actual))))
           (do random.monad
             [expected /.random]
             (_.coverage [/.as_text /.projection]
               (|> expected
                   /.as_text
                   (?text.value /.projection)
                   (try#each (of /.equivalence = expected))
                   (try.else false))))
           )))
