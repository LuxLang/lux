... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" enum
     ["[1]T" \\test]]
    ["[0]" codec
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" text
     ["%" \\format (.only format)]
     ["<[1]>" \\parser]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]
     ["i" int]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Date])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec /.equivalence random.date))
           (_.for [/.order]
                  (orderT.spec /.order random.date))
           (_.for [/.enum]
                  (enumT.spec /.enum random.date))
           (_.for [/.codec]
                  (codecT.spec /.equivalence /.codec random.date))

           (do random.monad
             [expected random.date]
             (_.coverage [/.date /.year /.month /.day_of_month]
               (|> (/.date (/.year expected)
                           (/.month expected)
                           (/.day_of_month expected))
                   (try#each (of /.equivalence = expected))
                   (try.else false))))
           (do random.monad
             [expected random.date]
             (_.coverage [/.invalid_day]
               (when (/.date (/.year expected)
                             (/.month expected)
                             (n.+ 31 (/.day_of_month expected)))
                 {try.#Failure error}
                 (exception.is? /.invalid_day error)
                 
                 {try.#Success _}
                 false)))
           (do random.monad
             [expected random.date]
             (_.coverage [/.days /.of_days]
               (|> expected
                   /.days
                   /.of_days
                   (of /.equivalence = expected))))
           (_.coverage [/.epoch]
             (|> /.epoch
                 /.days
                 (i.= +0)))
           (do random.monad
             [expected random.date]
             (_.coverage [/.parser]
               (|> (of /.codec encoded expected)
                   (<text>.value /.parser)
                   (try#each (of /.equivalence = expected))
                   (try.else false))))
           (do [! random.monad]
             [year (of ! each (|>> (n.% 10,000) ++)
                       random.nat)
              month (of ! each (|>> (n.% 10) (n.+ 13))
                        random.nat)
              day (of ! each (|>> (n.% 10) (n.+ 10))
                      random.nat)
              .let [input (format (%.nat year)
                                  "-" (%.nat month)
                                  "-" (%.nat day))]]
             (_.coverage [/.invalid_month]
               (when (<text>.value /.parser input)
                 {try.#Failure error}
                 (exception.is? /.invalid_month error)
                 
                 {try.#Success _}
                 false)))
           )))
