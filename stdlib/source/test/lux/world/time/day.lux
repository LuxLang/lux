(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" hash]]
    ["[0]" enum
     ["[1]T" \\test]]
    ["[0]" codec
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]
    [function
     ["[0]" predicate]]]
   [data
    [collection
     ["[0]" list]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def .public random
  (Random /.Day)
  (random.either (random.either (random.either (random#in {/.#Sunday})
                                               (random#in {/.#Monday}))
                                (random.either (random#in {/.#Tuesday})
                                               (random#in {/.#Wednesday})))
                 (random.either (random.either (random#in {/.#Thursday})
                                               (random#in {/.#Friday}))
                                (random#in {/.#Saturday}))))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Day])
      (do random.monad
        [expected ..random
         invalid (random.only (predicate.or (n.< (/.number {/.#Sunday}))
                                            (n.> (/.number {/.#Saturday})))
                              random.nat)])
      (`` (all _.and
               (_.for [/.equivalence]
                      (equivalenceT.spec /.equivalence ..random))
               (_.for [/.hash]
                      ($hash.spec /.hash ..random))
               (_.for [/.order]
                      (orderT.spec /.order ..random))
               (_.for [/.enum]
                      (enumT.spec /.enum ..random))
               (_.for [/.codec]
                      (codecT.spec /.equivalence /.codec ..random))

               (,, (with_template [<before> <current> <after>]
                     [(_.coverage [<current>]
                        (and (of /.equivalence = {<before>} (of /.enum pred {<current>}))
                             (of /.equivalence = {<after>} (of /.enum succ {<current>}))))]

                     [/.#Saturday /.#Sunday /.#Monday]
                     [/.#Sunday /.#Monday /.#Tuesday]
                     [/.#Monday /.#Tuesday /.#Wednesday]
                     [/.#Tuesday /.#Wednesday /.#Thursday]
                     [/.#Wednesday /.#Thursday /.#Friday]
                     [/.#Thursday /.#Friday /.#Saturday]
                     [/.#Friday /.#Saturday /.#Sunday]
                     ))
               (do random.monad
                 [not_a_day (random.upper_cased 1)]
                 (_.coverage [/.not_a_day_of_the_week]
                   (when (of /.codec decoded not_a_day)
                     {try.#Failure error}
                     (exception.match? /.not_a_day_of_the_week error)
                     
                     {try.#Success _}
                     false)))
               (_.coverage [/.number /.by_number]
                 (|> expected
                     /.number
                     /.by_number
                     (try#each (of /.equivalence = expected))
                     (try.else false)))
               (_.coverage [/.invalid_day]
                 (when (/.by_number invalid)
                   {try.#Failure error}
                   (exception.match? /.invalid_day error)
                   
                   {try.#Success _}
                   false))
               (_.coverage [/.week]
                 (let [all (list.size /.week)
                       uniques (set.size (set.of_list /.hash /.week))]
                   (and (n.= (/.number {/.#Saturday})
                             all)
                        (n.= all
                             uniques))))
               ))))
