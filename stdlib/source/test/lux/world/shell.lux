(.module:
  [lux #*
   ["_" test (#+ Test)]
   ["." debug]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]
    ["." io (#+ IO)]
    [concurrency
     ["." promise (#+ Promise)]]
    [security
     ["!" capability]]
    [parser
     ["." environment (#+ Environment)]]]
   [data
    ["." text ("#\." equivalence)]
    [collection
     ["." list]]]
   [math
    ["." random]
    [number
     ["n" nat]
     ["i" int]]]]
  {1
   ["." /
    [//
     [file (#+ Path)]]]}
  {[1 #spec]
   ["$." /]})

(exception: dead)

(def: (simulation [environment working_directory command arguments])
  (-> [Environment Path /.Command (List /.Argument)]
      (/.Simulation Bit))
  (structure
   (def: (on_read dead?)
     (if dead?
       (exception.throw ..dead [])
       (do try.monad
         [to_echo (try.from_maybe (list.head arguments))]
         (wrap [dead? to_echo]))))
   
   (def: (on_error dead?)
     (if dead?
       (exception.throw ..dead [])
       (exception.return [dead? ""])))
   
   (def: (on_write message dead?)
     (if dead?
       (exception.throw ..dead [])
       (#try.Success dead?)))

   (def: (on_destroy dead?)
     (if dead?
       (exception.throw ..dead [])
       (#try.Success true)))

   (def: (on_await dead?)
     (if dead?
       (exception.throw ..dead [])
       (#try.Success [true /.normal])))))

(def: (io_shell command oops input destruction exit)
  (-> /.Command Text Text Text /.Exit (/.Shell IO))
  (structure
   (def: execute
     ((debug.private /.can_execute)
      (function (_ [environment working_directory command arguments])
        (io.io
         (#try.Success
          (: (/.Process IO)
             (structure
              (def: read
                ((debug.private /.can_read)
                 (function (_ _)
                   (io.io (#try.Success command)))))
              (def: error
                ((debug.private /.can_read)
                 (function (_ _)
                   (io.io (#try.Success oops)))))
              (def: write
                ((debug.private /.can_write)
                 (function (_ message)
                   (io.io (#try.Failure message)))))
              (def: destroy
                ((debug.private /.can_destroy)
                 (function (_ _)
                   (io.io (#try.Failure destruction)))))
              (def: await
                ((debug.private /.can_wait)
                 (function (_ _)
                   (io.io (#try.Success exit))))))))))))))

(def: #export test
  Test
  (<| (_.covering /._)
      ($_ _.and
          (_.for [/.mock /.Simulation]
                 ($/.spec (/.mock (|>> ..simulation #try.Success)
                                  false)))
          (_.cover [/.error]
                   (not (i.= /.normal /.error)))
          (do random.monad
            [command (random.ascii/alpha 5)
             oops (random.ascii/alpha 5)
             input (random.ascii/alpha 5)
             destruction (random.ascii/alpha 5)
             exit random.int
             #let [shell (/.async (..io_shell command oops input destruction exit))]]
            (wrap (do {! promise.monad}
                    [verdict (do (try.with !)
                               [process (!.use (\ shell execute) [environment.empty "~" command (list)])
                                read (!.use (\ process read) [])
                                error (!.use (\ process error) [])
                                wrote! (do !
                                         [write (!.use (\ process write) [input])]
                                         (wrap (#try.Success (case write
                                                               (#try.Success _)
                                                               false
                                                               
                                                               (#try.Failure write)
                                                               (text\= input write)))))
                                destroyed! (do !
                                             [destroy (!.use (\ process destroy) [])]
                                             (wrap (#try.Success (case destroy
                                                                   (#try.Success _)
                                                                   false
                                                                   
                                                                   (#try.Failure destroy)
                                                                   (text\= destruction destroy)))))
                                await (!.use (\ process await) [])]
                               (wrap (and (text\= command read)
                                          (text\= oops error)
                                          wrote!
                                          destroyed!
                                          (i.= exit await))))]
                    (_.cover' [/.async /.Can_Write]
                              (try.default false verdict)))))
          )))
