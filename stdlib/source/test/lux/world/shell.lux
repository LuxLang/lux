(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]]
   [data
    [number
     ["n" nat]
     ["i" int]]
    [collection
     ["." list]]]]
  {1
   ["." /]}
  {[1 #spec]
   ["$." /]})

(exception: dead)

(def: (simulation [environment command arguments])
  (-> [/.Environment /.Command (List /.Argument)]
      (/.Simulation Bit))
  (structure
   (def: (on-read dead?)
     (if dead?
       (exception.throw ..dead [])
       (do try.monad
         [to-echo (try.from-maybe (list.head arguments))]
         (wrap [dead? to-echo]))))
   
   (def: (on-error dead?)
     (if dead?
       (exception.throw ..dead [])
       (exception.return [dead? ""])))
   
   (def: (on-write message dead?)
     (if dead?
       (exception.throw ..dead [])
       (#try.Success dead?)))

   (def: (on-destroy dead?)
     (if dead?
       (exception.throw ..dead [])
       (#try.Success true)))

   (def: (on-await dead?)
     (if dead?
       (exception.throw ..dead [])
       (#try.Success [true /.normal])))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.mock /.Simulation]
        ($/.spec (/.mock (|>> ..simulation #try.Success)
                         false)))))
