... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception]
    ["[0]" io (.only IO)]
    [concurrency
     ["[0]" async (.only Async) (.use "[1]#[0]" monad)]]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]
     ["i" int]]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" / (.only)
   [//
    [file (.only Path)]
    ["[0]" environment
     ["[1]" \\parser (.only Environment)]]]]])

(with_template [<name> <command> <type> <prep>]
  [(the <name>
     (-> <type> [Environment Path /.Command (List /.Argument)])
     (|>> <prep> list [environment.empty "~" <command>]))]

  [echo! "echo" Text (|>)]
  [sleep! "sleep" Nat %.nat]
  )

(the (can_wait! process)
  (-> (/.Process Async) unit.Test)
  (|> (of process await [])
      (async#each (|>> (try#each (i.= /.normal))
                       (try.else false)
                       (unit.coverage [/.Exit /.normal])))
      async#conjoint))

(the (can_read! expected process)
  (-> Text (/.Process Async) (Async Bit))
  (|> (of process read [])
      (async#each (|>> (try#each (text#= expected))
                       (try.else false)))))

(the (can_destroy! process)
  (-> (/.Process Async) (Async Bit))
  (do async.monad
    [?destroy (of process destroy [])
     ?await (of process await [])]
    (in (and (when ?destroy
               {try.#Success _}
               true
               
               {try.#Failure error}
               false)
             (when ?await
               {try.#Success _}
               false
               
               {try.#Failure error}
               true)))))

(with_expansions [<shell_coverage> (these [/.Command /.Argument])]
  (the .public (spec shell)
    (-> (/.Shell Async)
        Test)
    (<| (_.for [/.Shell
                /.execute
                
                /.Process
                /.read /.fail /.write /.destroy /.await])
        (do [! random.monad]
          [message (random.alphabetic 10)
           seconds (of ! each (|>> (n.% 5) (n.+ 5)) random.nat)]
          (in (do [! async.monad]
                [?echo (of shell execute (..echo! message))
                 ?sleep (of shell execute (..sleep! seconds))]
                (when [?echo ?sleep]
                  [{try.#Success echo} {try.#Success sleep}]
                  (do !
                    [can_read! (..can_read! message echo)
                     can_destroy! (..can_destroy! sleep)]
                    (all unit.and
                         (unit.coverage <shell_coverage>
                           (and can_read!
                                can_destroy!))
                         (..can_wait! echo)
                         ))
                  
                  _
                  (unit.coverage <shell_coverage>
                    false))))))))

(exception.the dead)

(the (mock [environment working_directory command arguments])
  (-> [Environment Path /.Command (List /.Argument)]
      (/.Mock Bit))
  (implementation
   (the (on_read dead?)
     (if dead?
       (exception.except ..dead [])
       (do try.monad
         [echo (try.of_maybe "" (list.head arguments))]
         (in [dead? echo]))))
   
   (the (on_fail dead?)
     (if dead?
       (exception.except ..dead [])
       {try.#Success [dead? ""]}))
   
   (the (on_write message dead?)
     (if dead?
       (exception.except ..dead [])
       {try.#Success dead?}))

   (the (on_destroy dead?)
     (if dead?
       (exception.except ..dead [])
       {try.#Success true}))

   (the (on_await dead?)
     (if dead?
       (exception.except ..dead [])
       {try.#Success [true /.normal]}))))

(the (io_shell command oops input destruction exit)
  (-> /.Command Text Text Text /.Exit (/.Shell IO))
  (implementation
   (the (execute [environment working_directory command arguments])
     (<| io.io
         {try.#Success}
         (is (/.Process IO))
         (implementation
          (the (read _)
            (io.io {try.#Success command}))
          (the (fail _)
            (io.io {try.#Success oops}))
          (the (write message)
            (io.io {try.#Failure message}))
          (the (destroy _)
            (io.io {try.#Failure destruction}))
          (the (await _)
            (io.io {try.#Success exit})))))))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (_.for [/.Mock /.mock
                   /.on_read /.on_fail /.on_write /.on_destroy /.on_await

                   /.async]
                  (..spec (/.async (/.mock (|>> ..mock {try.#Success})
                                           false))))
           (_.coverage [/.error]
             (not (i.= /.normal /.error)))
           (do random.monad
             [command (random.alphabetic 5)
              oops (random.alphabetic 5)
              input (random.alphabetic 5)
              destruction (random.alphabetic 5)
              exit random.int
              .let [shell (/.async (..io_shell command oops input destruction exit))]]
             (in (do [! async.monad]
                   [verdict (do (try.with !)
                              [process (of shell execute [environment.empty "~" command (list)])
                               read (of process read [])
                               failure (of process fail [])
                               wrote! (do !
                                        [write (of process write input)]
                                        (in {try.#Success (when write
                                                            {try.#Success _}
                                                            false
                                                            
                                                            {try.#Failure write}
                                                            (text#= input write))}))
                               destroyed! (do !
                                            [destroy (of process destroy [])]
                                            (in {try.#Success (when destroy
                                                                {try.#Success _}
                                                                false
                                                                
                                                                {try.#Failure destroy}
                                                                (text#= destruction destroy))}))
                               await (of process await [])]
                              (in (and (text#= command read)
                                       (text#= oops failure)
                                       wrote!
                                       destroyed!
                                       (i.= exit await))))]
                   (unit.coverage [/.Shell]
                     (try.else false verdict)))))
           )))
