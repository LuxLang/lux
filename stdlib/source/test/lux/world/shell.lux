(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [control
     ["." try (#+ Try)]
     ["." exception (#+ exception:)]
     ["." io (#+ IO)]
     [concurrency
      ["." async (#+ Async)]]
     [parser
      ["." environment (#+ Environment)]]]
    [data
     ["." text ("#\." equivalence)]
     [collection
      ["." list]]]
    [math
     ["." random]
     [number
      ["n" nat]
      ["i" int]]]]]
  [\\library
   ["." /
    [//
     [file (#+ Path)]]]]
  [\\specification
   ["$." /]])

(exception: dead)

(def: (mock [environment working_directory command arguments])
  (-> [Environment Path /.Command (List /.Argument)]
      (/.Mock Bit))
  (implementation
   (def: (on_read dead?)
     (if dead?
       (exception.except ..dead [])
       (do try.monad
         [to_echo (try.of_maybe (list.head arguments))]
         (in [dead? to_echo]))))
   
   (def: (on_error dead?)
     (if dead?
       (exception.except ..dead [])
       (exception.return [dead? ""])))
   
   (def: (on_write message dead?)
     (if dead?
       (exception.except ..dead [])
       (#try.Success dead?)))

   (def: (on_destroy dead?)
     (if dead?
       (exception.except ..dead [])
       (#try.Success true)))

   (def: (on_await dead?)
     (if dead?
       (exception.except ..dead [])
       (#try.Success [true /.normal])))))

(def: (io_shell command oops input destruction exit)
  (-> /.Command Text Text Text /.Exit (/.Shell IO))
  (implementation
   (def: (execute [environment working_directory command arguments])
     (<| io.io
         #try.Success
         (: (/.Process IO))
         (implementation
          (def: (read _)
            (io.io (#try.Success command)))
          (def: (error _)
            (io.io (#try.Success oops)))
          (def: (write message)
            (io.io (#try.Failure message)))
          (def: (destroy _)
            (io.io (#try.Failure destruction)))
          (def: (await _)
            (io.io (#try.Success exit))))))))

(def: #export test
  Test
  (<| (_.covering /._)
      ($_ _.and
          (_.for [/.async /.mock /.Mock]
                 ($/.spec (/.async (/.mock (|>> ..mock #try.Success)
                                           false))))
          (_.cover [/.error]
                   (not (i.= /.normal /.error)))
          (do random.monad
            [command (random.ascii/alpha 5)
             oops (random.ascii/alpha 5)
             input (random.ascii/alpha 5)
             destruction (random.ascii/alpha 5)
             exit random.int
             #let [shell (/.async (..io_shell command oops input destruction exit))]]
            (in (do {! async.monad}
                  [verdict (do (try.with !)
                             [process (\ shell execute [environment.empty "~" command (list)])
                              read (\ process read [])
                              error (\ process error [])
                              wrote! (do !
                                       [write (\ process write input)]
                                       (in (#try.Success (case write
                                                           (#try.Success _)
                                                           false
                                                           
                                                           (#try.Failure write)
                                                           (text\= input write)))))
                              destroyed! (do !
                                           [destroy (\ process destroy [])]
                                           (in (#try.Success (case destroy
                                                               (#try.Success _)
                                                               false
                                                               
                                                               (#try.Failure destroy)
                                                               (text\= destruction destroy)))))
                              await (\ process await [])]
                             (in (and (text\= command read)
                                      (text\= oops error)
                                      wrote!
                                      destroyed!
                                      (i.= exit await))))]
                  (_.cover' [/.Shell]
                            (try.else false verdict)))))
          )))
