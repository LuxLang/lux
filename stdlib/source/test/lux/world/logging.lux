... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    [concurrency
     ["[0]" async (.only Async) (.use "[1]#[0]" monad)]]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format]]]
   [math
    ["[0]" random (.only Random)]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" console]]]])

(the mock
  (console.Mock Text)
  (implementation
   (the (on_read _)
     {try.#Failure ""})
   (the (on_read_line feed)
     (when (text.split_by text.\n feed)
       {.#Some [line rest]}
       {try.#Success [rest line]}

       {.#None}
       {try.#Failure ""}))
   (the (on_write line state)
     {try.#Success (%.format state line)})
   (the (on_close _)
     {try.#Failure ""})))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_message (random.upper_cased 3)
         expected_appendix (random.lower_cased 3)
         expected_instant random.instant])
      (_.for [/.Logger])
      (`` (all _.and
               (let [console (console.async (console.mock ..mock ""))
                     it (/.console console)]
                 (in (do async.monad
                       [logged? (of it log expected_message)
                        actual_message (of console read_line [])]
                       (unit.coverage [/.console /.log]
                         (when [logged? actual_message]
                           [{try.#Success _}
                            {try.#Success actual_message}]
                           (text#= expected_message actual_message)

                           _
                           false)))))
               (,, (with_template [<level>]
                     [(let [console (console.async (console.mock ..mock ""))
                            it (/.console console)]
                        (in (do async.monad
                              [logged? (<level> expected_message it)
                               actual_message (of console read_line [])]
                              (unit.coverage [<level>]
                                (when [logged? actual_message]
                                  [{try.#Success _}
                                   {try.#Success actual_message}]
                                  (and (not (text#= expected_message actual_message))
                                       (text.contains? expected_message actual_message))

                                  _
                                  false)))))]

                     [/.error]
                     [/.warn]
                     [/.info]
                     [/.debug]
                     ))
               (let [console (console.async (console.mock ..mock ""))
                     it (is (/.Logger Async)
                            (/.with (text.suffix expected_appendix)
                              (/.console console)))]
                 (in (do async.monad
                       [logged? (of it log expected_message)
                        actual_message (of console read_line [])]
                       (unit.coverage [/.with]
                         (when [logged? actual_message]
                           [{try.#Success _}
                            {try.#Success actual_message}]
                           (text#= (text.suffix expected_appendix expected_message)
                                   actual_message)

                           _
                           false)))))
               (let [console (console.async (console.mock ..mock ""))
                     it (is (/.Logger Async)
                            (/.timed async.monad
                                     (function (_ _)
                                       (async#in expected_instant))
                                     (/.console console)))]
                 (in (do async.monad
                       [logged? (of it log expected_message)
                        actual_message (of console read_line [])]
                       (unit.coverage [/.timed]
                         (when [logged? actual_message]
                           [{try.#Success _}
                            {try.#Success actual_message}]
                           (and (text.contains? expected_message
                                                actual_message)
                                (text.contains? (%.instant expected_instant)
                                                actual_message))

                           _
                           false)))))
               ))))
