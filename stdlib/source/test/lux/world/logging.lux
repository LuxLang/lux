... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [concurrency
    ["[0]" future (.only Future) (.use "[1]#[0]" monad)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    ["[0]" random (.only Random)]]
   [macro
    ["[0]" template]]
   [time
    ["[0]" instant]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" console]]]])

(the memory
  (console.Memory Text)
  (implementation
   (the (on_read _)
     {try.#Failure ""})
   (the (on_read_line feed)
     (when (text.split_by text.\n feed)
       {.#Some [line rest]}
       {try.#Success [rest line]}

       {.#None}
       {try.#Failure ""}))
   (the (on_write line state)
     {try.#Success (text state line)})
   (the (on_close _)
     {try.#Failure ""})))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_message (random.upper_cased 3)
         expected_appendix (random.lower_cased 3)
         expected_instant instant.random])
      (_.for [/.Logger])
      (`` (all _.and
               (let [console (console.future (console.memory ..memory ""))
                     it (/.console console)]
                 (pure (do future.monad
                         [logged? (by it log expected_message)
                          actual_message (by console read_line [])]
                         (unit.coverage [/.console /.log]
                           (when [logged? actual_message]
                             [{try.#Success _}
                              {try.#Success actual_message}]
                             (text.= expected_message actual_message)

                             _
                             false)))))
               (,, (template.with [<level>]
                     [(let [console (console.future (console.memory ..memory ""))
                            it (/.console console)]
                        (pure (do future.monad
                                [logged? (<level> expected_message it)
                                 actual_message (by console read_line [])]
                                (unit.coverage [<level>]
                                  (when [logged? actual_message]
                                    [{try.#Success _}
                                     {try.#Success actual_message}]
                                    (and (not (text.= expected_message actual_message))
                                         (text.contains? expected_message actual_message))

                                    _
                                    false)))))]

                     [[/.error]
                      [/.warn]
                      [/.info]
                      [/.debug]]))
               (let [console (console.future (console.memory ..memory ""))
                     it (is (/.Logger Future)
                            (/.with (text.suffix expected_appendix)
                              (/.console console)))]
                 (pure (do future.monad
                         [logged? (by it log expected_message)
                          actual_message (by console read_line [])]
                         (unit.coverage [/.with]
                           (when [logged? actual_message]
                             [{try.#Success _}
                              {try.#Success actual_message}]
                             (text.= (text.suffix expected_appendix expected_message)
                                     actual_message)

                             _
                             false)))))
               (let [console (console.future (console.memory ..memory ""))
                     it (is (/.Logger Future)
                            (/.timed future.monad
                                     (function (_ _)
                                       (future#pure expected_instant))
                                     (/.console console)))]
                 (pure (do future.monad
                         [logged? (by it log expected_message)
                          actual_message (by console read_line [])]
                         (unit.coverage [/.timed]
                           (when [logged? actual_message]
                             [{try.#Success _}
                              {try.#Success actual_message}]
                             (and (text.contains? expected_message
                                                  actual_message)
                                  (text.contains? (instant.as_text expected_instant)
                                                  actual_message))

                             _
                             false)))))
               ))))
