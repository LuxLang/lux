(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." io]
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]]]
  {1
   ["." /]}
  {[1 #spec]
   ["$." /]})

(exception: dead)

(def: simulation
  (/.Simulation Bit)
  (structure
   (def: (on-read dead?)
     (if dead?
       (exception.throw ..dead [])
       (#try.Success [dead? (char "a")])))

   (def: (on-read-line dead?)
     (if dead?
       (exception.throw ..dead [])
       (#try.Success [dead? "YOLO"])))

   (def: (on-write message dead?)
     (if dead?
       (exception.throw ..dead [])
       (#try.Success dead?)))

   (def: (on-close dead?)
     (if dead?
       (exception.throw ..dead [])
       (#try.Success true)))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.mock /.Simulation]
        ($/.spec (io.io (/.mock ..simulation false))))))
