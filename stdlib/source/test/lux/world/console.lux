... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io (.only IO)]
    ["[0]" try (.only Try)]
    ["[0]" exception]
    [concurrency
     ["[0]" async (.only Async)]]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\injection (.only format)]]]
   [math
    ["[0]" random]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" /]])

(the .public (spec console)
  (-> (IO (/.Console Async))
      Test)
  (do random.monad
    [message (random.alphabetic 10)]
    (in (do async.monad
          [console (async.future console)
           ?write (of console write (format message text.new_line))
           ?read (of console read [])
           ?read_line (of console read_line [])
           ?close/good (of console close [])
           ?close/bad (of console close [])

           .let [can_write!
                 (when ?write
                   {try.#Success _}
                   true
                   
                   _
                   false)

                 can_read!
                 (when [?read ?read_line]
                   [{try.#Success _} {try.#Success _}]
                   true

                   _
                   false)

                 can_close!
                 (when [?close/good ?close/bad]
                   [{try.#Success _} {try.#Failure _}]
                   true
                   
                   _
                   false)]]
          (unit.coverage [/.Console
                          /.read /.read_line /.write /.close]
            (and can_write!
                 can_read!
                 can_close!))))))

(exception.the dead)

(the mock
  (/.Mock [Bit Text])
  (implementation
   (the (on_read [dead? content])
     (do try.monad
       [char (try.of_maybe "" (text.char 0 content))
        [_ content] (try.of_maybe "" (text.split_at 1 content))]
       (if dead?
         (exception.except ..dead [])
         (in [[dead? content] char]))))

   (the (on_read_line [dead? content])
     (do try.monad
       [[line content] (try.of_maybe "" (text.split_by text.new_line content))]
       (if dead?
         (exception.except ..dead [])
         (in [[dead? content] line]))))

   (the (on_write message [dead? content])
     (if dead?
       (exception.except ..dead [])
       {try.#Success [dead? (format content message)]}))

   (the (on_close [dead? content])
     (if dead?
       (exception.except ..dead [])
       {try.#Success [true content]}))))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (_.for [/.Mock
                   /.on_read /.on_read_line /.on_write /.on_close

                   /.async /.mock]
                  (..spec (io.io (/.async (/.mock ..mock [false ""])))))
           (do random.monad
             [expected (random.alphabetic 10)
              .let [console (/.mock ..mock [false ""])]]
             (_.coverage [/.write_line]
               (io.run!
                (do io.monad
                  [?_ (/.write_line expected console)
                   ?actual (of console read_line [])]
                  (in (<| (try.else false)
                          (do try.monad
                            [_ ?_
                             actual ?actual]
                            (in (text#= expected actual)))))))))
           )))
