... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" target]
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future)]]
   [control
    ["[0]" io (.only IO)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception]]
   [data
    ["[0]" text (.only \n)
     ["%" \\injection]]]
   [math
    ["[0]" random]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" /]])

(the .public (spec console)
  (-> (IO (/.Console Future))
      Test)
  (monad.let random.monad
    [message (random.alphabetic 10)]
    (pure (monad.let future.monad
            [console (future.soon console)
             ?write (by console write (text message \n))
             ?read (by console read [])
             ?read_line (by console read_line [])
             ?close/good (by console close [])
             ?close/bad (by console close [])

             .let [can_write!
                   (when ?write
                     {try.:Success _}
                     true
                     
                     _
                     false)

                   can_read!
                   (when [?read ?read_line]
                     [{try.:Success _} {try.:Success _}]
                     true

                     _
                     false)

                   can_close!
                   (when [?close/good ?close/bad]
                     [{try.:Success _} {try.:Failure _}]
                     true
                     
                     _
                     false)]]
            (unit.coverage [/.Console
                            /.read /.read_line /.write /.close]
              (and can_write!
                   can_read!
                   can_close!))))))

(exception.the dead)

(the memory
  (/.Memory [Bit Text])
  (implementation
   (the (on_read [dead? content])
     (monad.let try.monad
       [character (try.of_maybe "" (text.character 0 content))
        [_ content] (try.of_maybe "" (text.split_at 1 content))]
       (if dead?
           (exception.except ..dead [])
           (pure [[dead? content] character]))))

   (the (on_read_line [dead? content])
     (monad.let try.monad
       [[line content] (try.of_maybe "" (text.split_by \n content))]
       (if dead?
           (exception.except ..dead [])
           (pure [[dead? content] line]))))

   (the (on_write message [dead? content])
     (if dead?
         (exception.except ..dead [])
         {try.:Success [dead? (text content message)]}))

   (the (on_close [dead? content])
     (if dead?
         (exception.except ..dead [])
         {try.:Success [true content]}))))

(the .public test
  Test
  (<| (_.covering /._)
      (`` (`` (all _.and
                   (,, (target.if [target.lua target.python]
                                  (,, (these))
                                  ... else
                                  (,, (these (_.coverage [/.default]
                                               true)))))
                   (_.for [/.Memory
                           /.on_read /.on_read_line /.on_write /.on_close

                           /.future /.memory]
                          (..spec (io.io (/.future (/.memory ..memory [false ""])))))
                   (monad.let random.monad
                     [expected (random.alphabetic 10)
                      .let [console (/.memory ..memory [false ""])]]
                     (_.coverage [/.write_line]
                       (io.value
                        (monad.let io.monad
                          [?_ (/.write_line expected console)
                           ?actual (by console read_line [])]
                          (pure (<| (try.else false)
                                    (monad.let try.monad
                                      [_ ?_
                                       actual ?actual]
                                      (pure (text.= expected actual)))))))))
                   )))))
