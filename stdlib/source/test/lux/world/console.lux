(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [control
     ["." io]
     ["." try (#+ Try)]
     ["." exception (#+ exception:)]]
    [data
     ["." text ("#\." equivalence)
      ["%" format (#+ format)]]]
    [math
     ["." random]]]]
  [\\library
   ["." /]]
  [\\specification
   ["$." /]])

(exception: dead)

(def: mock
  (/.Mock [Bit Text])
  (implementation
   (def: (on_read [dead? content])
     (do try.monad
       [char (try.from_maybe (text.nth 0 content))
        [_ content] (try.from_maybe (text.split 1 content))]
       (if dead?
         (exception.throw ..dead [])
         (wrap [[dead? content] char]))))

   (def: (on_read_line [dead? content])
     (do try.monad
       [[line content] (try.from_maybe (text.split_with text.new_line content))]
       (if dead?
         (exception.throw ..dead [])
         (wrap [[dead? content] line]))))

   (def: (on_write message [dead? content])
     (if dead?
       (exception.throw ..dead [])
       (#try.Success [dead? (format content message)])))

   (def: (on_close [dead? content])
     (if dead?
       (exception.throw ..dead [])
       (#try.Success [true content])))))

(def: #export test
  Test
  (<| (_.covering /._)
      ($_ _.and
          (_.for [/.async /.mock /.Mock]
                 ($/.spec (io.io (/.async (/.mock ..mock [false ""])))))
          (do random.monad
            [expected (random.ascii/alpha 10)
             #let [console (/.mock ..mock [false ""])]]
            (_.cover [/.write_line]
                     (io.run
                      (do io.monad
                        [?_ (/.write_line expected console)
                         ?actual (\ console read_line [])]
                        (wrap (<| (try.default false)
                                  (do try.monad
                                    [_ ?_
                                     actual ?actual]
                                    (wrap (text\= expected actual)))))))))
          )))
