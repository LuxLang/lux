(.require
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" order]
     ["$[0]" enum]
     ["$[0]" codec]]]
   [control
    ["[0]" pipe]
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" text (.only)
     ["%" \\format (.only format)]
     ["<[1]>" \\parser]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 ["[0]" /
  ["[1][0]" date]
  ["[1][0]" day]
  ["[1][0]" duration]
  ["[1][0]" instant]
  ["[1][0]" month]
  ["[1][0]" year]]
 [\\library
  ["[0]" / (.only)
   ["[0]" duration]]])

(def for_implementation
  Test
  (all _.and
       (_.for [/.equivalence]
              ($equivalence.spec /.equivalence random.time))
       (_.for [/.order]
              ($order.spec /.order random.time))
       (_.for [/.enum]
              ($enum.spec /.enum random.time))
       (_.for [/.codec]
              ($codec.spec /.equivalence /.codec random.time))))

(def for_clock
  Test
  (do [! random.monad]
    [expected random.time]
    (_.coverage [/.clock /.time]
      (|> expected
          /.clock
          /.time
          (try#each (at /.equivalence = expected))
          (try.else false)))))

(def for_ranges
  Test
  (do [! random.monad]
    [valid_hour (at ! each (|>> (n.% /.hours) (n.max 10)) random.nat)
     valid_minute (at ! each (|>> (n.% /.minutes) (n.max 10)) random.nat)
     valid_second (at ! each (|>> (n.% /.seconds) (n.max 10)) random.nat)
     valid_milli_second (at ! each (n.% /.milli_seconds) random.nat)

     .let [invalid_hour (|> valid_hour (n.+ /.hours))
           invalid_minute (|> valid_minute (n.+ /.minutes) (n.min 99))
           invalid_second (|> valid_second (n.+ /.seconds) (n.min 99))]]
    (`` (all _.and
             (,, (with_template [<cap> <exception> <prefix> <suffix> <valid> <invalid>]
                   [(_.coverage [<cap> <exception>]
                      (let [valid!
                            (|> <valid>
                                %.nat
                                (text.prefix <prefix>)
                                (text.suffix <suffix>)
                                (at /.codec decoded)
                                (pipe.case
                                  {try.#Success _} true
                                  {try.#Failure error} false))
                            
                            invalid!
                            (|> <invalid>
                                %.nat
                                (text.prefix <prefix>)
                                (text.suffix <suffix>)
                                (at /.codec decoded)
                                (pipe.case
                                  {try.#Success _}
                                  false
                                  
                                  {try.#Failure error}
                                  (exception.match? <exception> error)))]
                        (and valid!
                             invalid!)))]

                   [/.hours /.invalid_hour "" ":00:00.000" valid_hour invalid_hour]
                   [/.minutes /.invalid_minute "00:" ":00.000" valid_minute invalid_minute]
                   [/.seconds /.invalid_second "00:00:" ".000" valid_second invalid_second]
                   ))
             (_.coverage [/.milli_seconds]
               (|> valid_milli_second
                   %.nat
                   (format "00:00:00.")
                   (at /.codec decoded)
                   (pipe.case
                     {try.#Success _} true
                     {try.#Failure error} false)))
             ))))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Time])
      (do [! random.monad]
        [.let [day (.nat (duration.millis duration.day))]
         expected random.time

         out_of_bounds (at ! each (|>> /.millis (n.+ day))
                           random.time)]
        (`` (all _.and
                 ..for_implementation

                 (_.coverage [/.millis /.of_millis]
                   (|> expected
                       /.millis
                       /.of_millis
                       (try#each (at /.equivalence = expected))
                       (try.else false)))
                 (_.coverage [/.time_exceeds_a_day]
                   (case (/.of_millis out_of_bounds)
                     {try.#Success _}
                     false
                     
                     {try.#Failure error}
                     (exception.match? /.time_exceeds_a_day error)))
                 (_.coverage [/.midnight]
                   (|> /.midnight
                       /.millis
                       (n.= 0)))
                 (_.coverage [/.parser]
                   (|> expected
                       (at /.codec encoded)
                       (<text>.result /.parser)
                       (try#each (at /.equivalence = expected))
                       (try.else false)))
                 ..for_ranges
                 (_.for [/.Clock]
                        ..for_clock)

                 /date.test
                 /day.test
                 /duration.test
                 /instant.test
                 /month.test
                 /year.test
                 )))))
