... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["[0]" encoding (.only Encoding)]]
    [collection
     ["[0]" list]]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" /
  ["[1][0]" language]
  ["[1][0]" territory]]
 [\\library
  ["[0]" / (.only)
   ["[0]" language (.only Language)]
   ["[0]" territory (.only Territory)]]])

(the random_language
  (Random Language)
  (random.either (random#in language.afar)
                 (random#in language.zaza)))

(the random_territory
  (Random Territory)
  (random.either (random#in territory.afghanistan)
                 (random#in territory.zimbabwe)))

(the random_encoding
  (Random Encoding)
  (random.either (random#in encoding.ascii)
                 (random#in encoding.koi8_u)))

(the random_locale
  (Random /.Locale)
  (do random.monad
    [language ..random_language
     territory ..random_territory
     encoding ..random_encoding]
    (in (/.locale language {.#Some territory} {.#Some encoding}))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Locale])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec /.equivalence ..random_locale))
           (_.for [/.hash]
                  (do [! random.monad]
                    [fixed_language ..random_language
                     fixed_territory ..random_territory
                     fixed_encoding ..random_encoding]
                    (all _.and
                         (|> ..random_language
                             (of ! each (function (_ language)
                                          (/.locale language {.#Some fixed_territory} {.#Some fixed_encoding})))
                             (hashT.spec /.hash))
                         (|> ..random_territory
                             (of ! each (function (_ territory)
                                          (/.locale fixed_language {.#Some territory} {.#Some fixed_encoding})))
                             (hashT.spec /.hash))
                         (|> ..random_encoding
                             (of ! each (function (_ encoding)
                                          (/.locale fixed_language {.#Some fixed_territory} {.#Some encoding})))
                             (hashT.spec /.hash))
                         )))
           
           (do random.monad
             [language ..random_language
              territory ..random_territory
              encoding ..random_encoding
              .let [l_locale (/.locale language {.#None} {.#None})
                    lt_locale (/.locale language {.#Some territory} {.#None})
                    le_locale (/.locale language {.#None} {.#Some encoding})
                    lte_locale (/.locale language {.#Some territory} {.#Some encoding})]
              .let [language_check (and (text#= (language.code language)
                                                (/.code l_locale))
                                        (list.every? (|>> /.code (text.starts_with? (language.code language)))
                                                     (list lt_locale le_locale lte_locale)))
                    territory_check (list.every? (|>> /.code (text.contains? (territory.long_code territory)))
                                                 (list lt_locale lte_locale))
                    encoding_check (list.every? (|>> /.code (text.ends_with? (encoding.name encoding)))
                                                (list le_locale lte_locale))]]
             (_.coverage [/.locale /.code]
               (and language_check
                    territory_check
                    encoding_check)))
           
           /language.test
           /territory.test
           )))
