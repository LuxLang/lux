... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["//" projection (.use "[1]:[0]" monad)]
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future)]]
   [control
    ["[0]" pipe]
    ["[0]" io]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" maybe (.use "[1]:[0]" functor)]
    ["[0]" text]
    [collection
     ["[0]" dictionary]
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 ["[0]" \\projection (.only Environment)]
 [\\library
  ["[0]" / (.only)
   [//
    [file (.only Path)]]]])

(the .public (spec subject)
  (-> (/.Environment Future)
      Test)
  (monad.let random.monad
    [exit random.integer]
    (pure (monad.let [! future.monad]
            [environment (/.environment ! subject)]
            (unit.coverage [/.Environment

                            /.available_variables /.variable /.home /.directory /.exit]
              (and (not (dictionary.empty? environment))
                   (list.every? (|>> text.empty? not)
                                (dictionary.domain environment))
                   (not (text.empty? (by subject home)))
                   (not (text.empty? (by subject directory)))))))))

(the \\projection
  Test
  (<| (_.covering \\projection._)
      (_.for [\\projection.Environment \\projection.Projection])
      (all _.and
           (_.coverage [\\projection.empty]
             (dictionary.empty? \\projection.empty))
           (monad.let random.monad
             [expected random.natural]
             (_.coverage [\\projection.value]
               (|> (\\projection.value (//:pure expected) \\projection.empty)
                   (by try.functor each (n.= expected))
                   (try.else false))))
           (monad.let random.monad
             [property (random.alphabetic 1)
              expected (random.alphabetic 1)]
             (_.coverage [\\projection.Property \\projection.property]
               (|> \\projection.empty
                   (dictionary.has property expected)
                   (\\projection.value (\\projection.property property))
                   (by try.functor each (text.= expected))
                   (try.else false))))
           (monad.let random.monad
             [property (random.alphabetic 1)]
             (_.coverage [\\projection.unknown_property]
               (when (\\projection.value (\\projection.property property) \\projection.empty)
                 {try.:Success _}
                 false
                 
                 {try.:Failure error}
                 (exception.is? \\projection.unknown_property error))))
           )))

(the (environment env_size)
  (-> Natural (Random Environment))
  (random.dictionary text.hash env_size
                     (random.alphabetic 5)
                     (random.alphabetic 5)))

(the path
  (Random Path)
  (random.alphabetic 5))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [env_size (by ! each (|>> (n.% 10) ++) random.natural)
         environment (..environment env_size)
         home ..path
         directory ..path

         unknown (random.alphabetic 1)]
        (all _.and
             (_.for [/.memory /.future]
                    (..spec (/.future (/.memory environment home directory))))
             (_.coverage [/.environment]
               (let [it (/.memory environment home directory)]
                 (io.value
                  (monad.let io.monad
                    [actual (/.environment io.monad it)]
                    (pure (and (n.= (dictionary.size environment)
                                    (dictionary.size actual))
                               (|> actual
                                   dictionary.entries
                                   (list.every? (function (_ [key value])
                                                  (|> environment
                                                      (dictionary.value key)
                                                      (maybe:each (text.= value))
                                                      (maybe.else false)))))))))))
             (_.coverage [/.unknown_variable]
               (let [it (/.memory environment home directory)]
                 (|> unknown
                     (by it variable)
                     io.value
                     (pipe.when {try.:Success _}
                       false
                       
                       {try.:Failure error}
                       (exception.is? /.unknown_variable error)))))

             ..\\projection
             ))))
