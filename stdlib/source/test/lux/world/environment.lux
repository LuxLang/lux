(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["//" parser (.use "[1]#[0]" monad)]
    ["[0]" pipe]
    ["[0]" io]
    ["[0]" maybe (.use "[1]#[0]" functor)]
    ["[0]" try]
    ["[0]" exception]
    [concurrency
     ["[0]" async (.only Async)]]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)]
    [collection
     ["[0]" dictionary]
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 ["[0]" \\parser (.only Environment)]
 [\\library
  ["[0]" / (.only)
   [//
    [file (.only Path)]]]])

(def .public (spec subject)
  (-> (/.Environment Async)
      Test)
  (do random.monad
    [exit random.int]
    (in (do [! async.monad]
          [environment (/.environment ! subject)]
          (unit.coverage [/.Environment]
            (and (not (dictionary.empty? environment))
                 (list.every? (|>> text.empty? not)
                              (dictionary.keys environment))
                 (not (text.empty? (of subject home)))
                 (not (text.empty? (of subject directory)))))))))

(def \\parser
  Test
  (<| (_.covering \\parser._)
      (_.for [\\parser.Environment \\parser.Parser])
      (all _.and
           (_.coverage [\\parser.empty]
             (dictionary.empty? \\parser.empty))
           (do random.monad
             [expected random.nat]
             (_.coverage [\\parser.result]
               (|> (\\parser.result (//#in expected) \\parser.empty)
                   (of try.functor each (n.= expected))
                   (try.else false))))
           (do random.monad
             [property (random.alphabetic 1)
              expected (random.alphabetic 1)]
             (_.coverage [\\parser.Property \\parser.property]
               (|> \\parser.empty
                   (dictionary.has property expected)
                   (\\parser.result (\\parser.property property))
                   (of try.functor each (text#= expected))
                   (try.else false))))
           (do random.monad
             [property (random.alphabetic 1)]
             (_.coverage [\\parser.unknown_property]
               (when (\\parser.result (\\parser.property property) \\parser.empty)
                 {try.#Success _}
                 false
                 
                 {try.#Failure error}
                 (exception.match? \\parser.unknown_property error))))
           )))

(def (environment env_size)
  (-> Nat (Random Environment))
  (random.dictionary text.hash env_size
                     (random.alphabetic 5)
                     (random.alphabetic 5)))

(def path
  (Random Path)
  (random.alphabetic 5))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [env_size (of ! each (|>> (n.% 10) ++) random.nat)
         environment (..environment env_size)
         home ..path
         directory ..path

         unknown (random.alphabetic 1)]
        (all _.and
             (_.for [/.mock /.async]
                    (..spec (/.async (/.mock environment home directory))))
             (_.coverage [/.environment]
               (let [it (/.mock environment home directory)]
                 (io.run!
                  (do io.monad
                    [actual (/.environment io.monad it)]
                    (in (and (n.= (dictionary.size environment)
                                  (dictionary.size actual))
                             (|> actual
                                 dictionary.entries
                                 (list.every? (function (_ [key value])
                                                (|> environment
                                                    (dictionary.value key)
                                                    (maybe#each (text#= value))
                                                    (maybe.else false)))))))))))
             (_.coverage [/.unknown_environment_variable]
               (let [it (/.mock environment home directory)]
                 (|> unknown
                     (of it variable)
                     io.run!
                     (pipe.when {try.#Success _}
                       false
                       
                       {try.#Failure error}
                       (exception.match? /.unknown_environment_variable error)))))

             ..\\parser
             ))))
