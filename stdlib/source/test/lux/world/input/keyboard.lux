... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    [collection
     ["[0]" list]
     ["[0]" set (.only Set)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [meta
    [macro
     ["[0]" template]
     ["[0]" expansion]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(expansion.let [<groups> (these [keys/commands
                                 [/.back_space
                                  /.enter
                                  /.shift
                                  /.control
                                  /.alt
                                  /.caps_lock
                                  /.escape
                                  /.space
                                  /.page_up
                                  /.page_down
                                  /.end
                                  /.home
                                  /.delete
                                  /.num_lock
                                  /.scroll_lock
                                  /.print_screen
                                  /.insert
                                  /.windows

                                  /.left
                                  /.up
                                  /.right
                                  /.down]]
                                
                                [keys/letters
                                 [/.a
                                  /.b
                                  /.c
                                  /.d
                                  /.e
                                  /.f
                                  /.g
                                  /.h
                                  /.i
                                  /.j
                                  /.k
                                  /.l
                                  /.m
                                  /.n
                                  /.o
                                  /.p
                                  /.q
                                  /.r
                                  /.s
                                  /.t
                                  /.u
                                  /.v
                                  /.w
                                  /.x
                                  /.y
                                  /.z]]
                                
                                [keys/num_pad
                                 [/.num_pad_0
                                  /.num_pad_1
                                  /.num_pad_2
                                  /.num_pad_3
                                  /.num_pad_4
                                  /.num_pad_5
                                  /.num_pad_6
                                  /.num_pad_7
                                  /.num_pad_8
                                  /.num_pad_9]]

                                [keys/functions
                                 [/.f1
                                  /.f2
                                  /.f3
                                  /.f4
                                  /.f5
                                  /.f6
                                  /.f7
                                  /.f8
                                  /.f9
                                  /.f10
                                  /.f11
                                  /.f12
                                  /.f13
                                  /.f14
                                  /.f15
                                  /.f16
                                  /.f17
                                  /.f18
                                  /.f19
                                  /.f20
                                  /.f21
                                  /.f22
                                  /.f23
                                  /.f24]])]
  (these (the listing
           (List /.Key)
           (list.together (`` (list (,, (template.with [<definition> <keys>]
                                          [((is (-> Any (List /.Key))
                                                (function (_ _)
                                                  (`` (list (,, (template.spliced <keys>))))))
                                            [])]
                                          
                                          <groups>))))))

         (the catalogue
           (Set /.Key)
           (set.of_list n.hash ..listing))

         (the verdict
           (n.= (list.size ..listing)
                (set.size ..catalogue)))

         (template.with [<definition> <keys>]
           [(the <definition>
              Test
              (_.coverage <keys>
                ..verdict))]
           
           <groups>)

         (the .public random
           (Random /.Key)
           (let [count (list.size ..listing)]
             (do [! random.monad]
               [choice (of ! each (n.% count) random.nat)]
               (in (maybe.trusted (list.item choice ..listing))))))

         (the .public test
           Test
           (<| (_.covering /._)
               (_.for [/.Key])
               (`` (all _.and
                        (,, (template.with [<definition> <keys>]
                              [<definition>]
                              
                              <groups>))

                        (_.for [/.Press /.#input /.#pressed?]
                               (`` (all _.and
                                        (,, (template.with [<pressed?> <function>]
                                              [(do random.monad
                                                 [key ..random
                                                  .let [sample (<function> key)]]
                                                 (_.coverage [<function>]
                                                   (and (bit#= <pressed?> (its /.#pressed? sample))
                                                        (n.= key (its /.#input sample)))))]

                                              [#0 /.release]
                                              [#1 /.press]
                                              ))
                                        )))
                        ))))))
