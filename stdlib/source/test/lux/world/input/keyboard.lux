(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [data
    ["." bit ("#\." equivalence)]
    ["." maybe]
    [collection
     ["." list]
     ["." set (#+ Set)]]]
   [macro
    ["." template]]
   [math
    ["." random (#+ Random)]
    [number
     ["n" nat]]]]
  [\\
   ["." /]])

(with_expansions [<groups> (as_is [keys/commands
                                   [/.back_space
                                    /.enter
                                    /.shift
                                    /.control
                                    /.alt
                                    /.caps_lock
                                    /.escape
                                    /.space
                                    /.page_up
                                    /.page_down
                                    /.end
                                    /.home
                                    /.delete
                                    /.num_lock
                                    /.scroll_lock
                                    /.print_screen
                                    /.insert
                                    /.windows

                                    /.left
                                    /.up
                                    /.right
                                    /.down]]
                                  
                                  [keys/letters
                                   [/.a
                                    /.b
                                    /.c
                                    /.d
                                    /.e
                                    /.f
                                    /.g
                                    /.h
                                    /.i
                                    /.j
                                    /.k
                                    /.l
                                    /.m
                                    /.n
                                    /.o
                                    /.p
                                    /.q
                                    /.r
                                    /.s
                                    /.t
                                    /.u
                                    /.v
                                    /.w
                                    /.x
                                    /.y
                                    /.z]]
                                  
                                  [keys/num_pad
                                   [/.num_pad_0
                                    /.num_pad_1
                                    /.num_pad_2
                                    /.num_pad_3
                                    /.num_pad_4
                                    /.num_pad_5
                                    /.num_pad_6
                                    /.num_pad_7
                                    /.num_pad_8
                                    /.num_pad_9]]

                                  [keys/functions
                                   [/.f1
                                    /.f2
                                    /.f3
                                    /.f4
                                    /.f5
                                    /.f6
                                    /.f7
                                    /.f8
                                    /.f9
                                    /.f10
                                    /.f11
                                    /.f12
                                    /.f13
                                    /.f14
                                    /.f15
                                    /.f16
                                    /.f17
                                    /.f18
                                    /.f19
                                    /.f20
                                    /.f21
                                    /.f22
                                    /.f23
                                    /.f24]])]
  (def: listing
    (List /.Key)
    (list.concat (`` (list (~~ (template [<definition> <keys>]
                                 [((: (-> Any (List /.Key))
                                      (function (_ _)
                                        (`` (list (~~ (template.splice <keys>))))))
                                   [])]
                                 
                                 <groups>))))))

  (def: catalogue
    (Set /.Key)
    (set.from_list n.hash ..listing))

  (def: verdict
    (n.= (list.size ..listing)
         (set.size ..catalogue)))

  (template [<definition> <keys>]
    [(def: <definition>
       Test
       (_.cover <keys>
                ..verdict))]
    
    <groups>)

  (def: #export random
    (Random /.Key)
    (let [count (list.size ..listing)]
      (do {! random.monad}
        [choice (\ ! map (n.% count) random.nat)]
        (wrap (maybe.assume (list.nth choice ..listing))))))

  (def: #export test
    Test
    (<| (_.covering /._)
        (_.for [/.Key])
        (`` ($_ _.and
                (~~ (template [<definition> <keys>]
                      [<definition>]
                      
                      <groups>))

                (_.for [/.Press]
                       (`` ($_ _.and
                               (~~ (template [<pressed?> <function>]
                                     [(do random.monad
                                        [key ..random
                                         #let [sample (<function> key)]]
                                        (_.cover [<function>]
                                                 (and (bit\= <pressed?> (get@ #/.pressed? sample))
                                                      (n.= key (get@ #/.input sample)))))]

                                     [#0 /.release]
                                     [#1 /.press]
                                     ))
                               )))
                )))))
