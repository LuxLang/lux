(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [data
    ["." bit ("#\." equivalence)]
    ["." maybe]
    [collection
     ["." list]
     ["." set (#+ Set)]]]
   [math
    ["." random (#+ Random)]
    [number
     ["n" nat]]]]
  {1
   ["." /]})

(with_expansions [<keys> (as_is /.back_space
                                /.enter
                                /.shift
                                /.control
                                /.alt
                                /.caps_lock
                                /.escape
                                /.space
                                /.page_up
                                /.page_down
                                /.end
                                /.home

                                /.left
                                /.up
                                /.right
                                /.down
                                
                                /.a
                                /.b
                                /.c
                                /.d
                                /.e
                                /.f
                                /.g
                                /.h
                                /.i
                                /.j
                                /.k
                                /.l
                                /.m
                                /.n
                                /.o
                                /.p
                                /.q
                                /.r
                                /.s
                                /.t
                                /.u
                                /.v
                                /.w
                                /.x
                                /.y
                                /.z
                                
                                /.num_pad_0
                                /.num_pad_1
                                /.num_pad_2
                                /.num_pad_3
                                /.num_pad_4
                                /.num_pad_5
                                /.num_pad_6
                                /.num_pad_7
                                /.num_pad_8
                                /.num_pad_9

                                /.delete
                                /.num_lock
                                /.scroll_lock
                                /.print_screen
                                /.insert
                                /.windows

                                /.f1
                                /.f2
                                /.f3
                                /.f4
                                /.f5
                                /.f6
                                /.f7
                                /.f8
                                /.f9
                                /.f10
                                /.f11
                                /.f12
                                /.f13
                                /.f14
                                /.f15
                                /.f16
                                /.f17
                                /.f18
                                /.f19
                                /.f20
                                /.f21
                                /.f22
                                /.f23
                                /.f24)]
  (def: listing
    (List /.Key)
    (list <keys>))

  (def: catalogue
    (Set /.Key)
    (set.from_list n.hash ..listing))

  (def: #export random
    (Random /.Key)
    (let [count (list.size ..listing)]
      (do {! random.monad}
        [choice (\ ! map (n.% count) random.nat)]
        (wrap (maybe.assume (list.nth choice ..listing))))))

  (def: #export test
    Test
    (<| (_.covering /._)
        (_.for [/.Key])
        ($_ _.and
            (_.cover [<keys>]
                     (n.= (list.size ..listing)
                          (set.size ..catalogue)))

            (_.for [/.Press]
                   (`` ($_ _.and
                           (~~ (template [<pressed?> <function>]
                                 [(do random.monad
                                    [key ..random
                                     #let [sample (<function> key)]]
                                    (_.cover [<function>]
                                             (and (bit\= <pressed?> (get@ #/.pressed? sample))
                                                  (n.= key (get@ #/.input sample)))))]

                                 [#0 /.release]
                                 [#1 /.press]
                                 ))
                           )))
            ))))
