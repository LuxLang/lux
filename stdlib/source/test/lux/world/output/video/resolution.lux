(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]
      ["$." hash]]}]
   [data
    ["." maybe]
    [collection
     ["." list]
     ["." set (#+ Set)]]]
   [math
    ["." random (#+ Random)]
    [number
     ["n" nat]]]]
  {1
   ["." /]})

(with_expansions [<resolutions> (as_is /.svga
                                       /.wsvga
                                       /.xga
                                       /.xga+
                                       /.wxga/16:9
                                       /.wxga/5:3
                                       /.wxga/16:10
                                       /.sxga
                                       /.wxga+
                                       /.hd+
                                       /.wsxga+
                                       /.fhd
                                       /.wuxga
                                       /.wqhd
                                       /.uhd-4k)]
  (def: listing
    (List /.Resolution)
    (list <resolutions>))

  (def: catalogue
    (Set /.Resolution)
    (set.from_list /.hash ..listing))

  (def: #export random
    (Random /.Resolution)
    (let [count (list.size ..listing)]
      (do {! random.monad}
        [choice (\ ! map (n.% count) random.nat)]
        (wrap (maybe.assume (list.nth choice ..listing))))))

  (def: #export test
    Test
    (<| (_.covering /._)
        (_.for [/.Resolution])
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec /.equivalence ..random))
            (_.for [/.hash]
                   ($hash.spec /.hash ..random))

            (_.cover [<resolutions>]
                     (n.= (list.size ..listing)
                          (set.size ..catalogue)))
            ))))
