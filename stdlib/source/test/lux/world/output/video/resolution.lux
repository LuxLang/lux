... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["[0]" maybe]]
   [data
    [collection
     ["[0]" list]
     ["[0]" set (.only Set)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [meta
    [macro
     ["[0]" expansion]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(expansion.let [<resolutions> (these /.svga
                                     /.wsvga
                                     /.xga
                                     /.xga+
                                     /.wxga_16:9
                                     /.wxga_5:3
                                     /.wxga_16:10
                                     /.sxga
                                     /.wxga+
                                     /.hd+
                                     /.wsxga+
                                     /.fhd
                                     /.wuxga
                                     /.wqhd
                                     /.uhd_4k)]
  (these (the listing
           (List /.Resolution)
           (list <resolutions>))

         (the catalogue
           (Set /.Resolution)
           (set.of_list /.hash ..listing))

         (the .public random
           (Random /.Resolution)
           (let [count (list.size ..listing)]
             (do [! random.monad]
               [choice (of ! each (n.% count) random.nat)]
               (in (maybe.trusted (list.item choice ..listing))))))

         (the .public test
           Test
           (<| (_.covering /._)
               (_.for [/.Resolution])
               (`` (all _.and
                        (_.for [/.equivalence]
                               (equivalenceT.spec /.equivalence ..random))
                        (_.for [/.hash]
                               (hashT.spec /.hash ..random))

                        (_.coverage [<resolutions>]
                          (n.= (list.size ..listing)
                               (set.size ..catalogue)))
                        (,, (with_template [<slot>]
                              [(_.coverage [<slot>]
                                 (list.every? (|>> (its <slot>) (n.> 0)) ..listing))]

                              [/.#width]
                              [/.#height]
                              ))
                        ))))))
