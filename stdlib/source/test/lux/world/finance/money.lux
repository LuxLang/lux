(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [\\specification
     ["[0]S" equivalence]]
    ["[0]" order
     ["[1]T" \\test]]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.only)
     ["%" \\format]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" currency (.only Currency)]]]
 ["[0]" /
  ["[1][0]" currency]])

(def .public (random $ max_sub_units)
  (All (_ $)
    (-> (Currency $) Nat
        (Random (/.Money $))))
  (when max_sub_units
    0 (random#in (/.money $ max_sub_units))
    _ (random#each (|>> (n.% max_sub_units)
                        (/.money $))
                   random.nat)))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_amount random.nat

         expected_parameter (random.only (n.> 0) random.nat)
         expected_subject random.nat])
      (_.for [/.Money])
      (all _.and
           (_.for [/.equivalence /.=]
                  (equivalenceS.spec /.equivalence (..random currency.usd 1000,00)))
           (_.for [/.order /.<]
                  (orderT.spec /.order (..random currency.usd 1000,00)))
           
           (_.coverage [/.money /.currency /.amount]
             (let [it (/.money currency.usd expected_amount)]
               (and (same? currency.usd (/.currency it))
                    (same? expected_amount (/.amount it)))))
           (_.coverage [/.+ /.-]
             (let [parameter (/.money currency.usd expected_parameter)
                   subject (/.money currency.usd expected_subject)]
               (and (|> subject
                        (/.+ parameter)
                        (of /.equivalence = subject)
                        not)
                    (|> subject
                        (/.+ parameter)
                        (/.- parameter)
                        (maybe#each (of /.equivalence = subject))
                        (maybe.else false)))))
           (_.coverage [/.min]
             (let [expected_parameter (/.money currency.usd expected_parameter)
                   expected_subject (/.money currency.usd expected_subject)]
               (and (/.<= expected_parameter
                          (/.min expected_parameter expected_subject))
                    (/.<= expected_subject
                          (/.min expected_parameter expected_subject)))))
           (_.coverage [/.max]
             (let [expected_parameter (/.money currency.usd expected_parameter)
                   expected_subject (/.money currency.usd expected_subject)]
               (and (/.>= expected_parameter
                          (/.max expected_parameter expected_subject))
                    (/.>= expected_subject
                          (/.max expected_parameter expected_subject)))))
           (let [expected_parameter (/.money currency.usd expected_parameter)
                 expected_subject (/.money currency.usd expected_subject)]
             (all _.and
                  (_.coverage [/.>]
                    (bit#= (/.> expected_parameter expected_subject)
                           (/.< expected_subject expected_parameter)))
                  (_.coverage [/.<= /.>=]
                    (bit#= (/.<= expected_parameter expected_subject)
                           (/.>= expected_subject expected_parameter)))
                  ))
           (_.coverage [/.units /.sub_units]
             (let [expected (/.money currency.usd expected_amount)
                   actual (/.money currency.usd (n.+ (/.units expected)
                                                     (/.sub_units expected)))]
               (/.= expected actual)))
           (_.coverage [/.of_units /.of_sub_units]
             (let [expected (/.money currency.usd expected_amount)
                   actual (/.+ (/.of_units currency.usd (/.units expected))
                               (/.of_sub_units currency.usd (/.sub_units expected)))]
               (/.= expected actual)))
           (do !
             [it (..random currency.usd 1000,00)]
             (_.coverage [/.format]
               (and (text.starts_with? (%.nat (/.amount it))
                                       (text.replaced_once "." "" (/.format it)))
                    (text.ends_with? (currency.alphabetic_code (/.currency it))
                                     (/.format it)))))

           /currency.test
           )))
