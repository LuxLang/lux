(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [\\specification
     ["[0]S" equivalence]]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [///
    ["[0]" money (.only)
     ["[0]" currency (.only Currency)]]]]]
 [///
  ["[0]T" money]])

(def .public (random $ max_sub_units)
  (All (_ $)
    (-> (Currency $) Nat
        (Random (/.Session $))))
  (do random.monad
    [p0 (moneyT.random $ max_sub_units)
     p1 (moneyT.random $ max_sub_units)
     p2 (moneyT.random $ max_sub_units)
     p3 (moneyT.random $ max_sub_units)
     bullish? random.bit
     volume random.nat]
    (when (list.sorted money.< (list p0 p1 p2 p3))
      (list low bottom top high)
      (in [/.#open (if bullish?
                     bottom
                     top)
           /.#high high
           /.#low low
           /.#close (if bullish?
                      top
                      bottom)
           /.#volume volume])

      _
      (undefined))))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [before (..random currency.usd 1000,00)
         after (..random currency.usd 1000,00)])
      (_.for [/.Session /.Volume
              /.#open /.#high /.#low /.#close /.#volume])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceS.spec /.equivalence (..random currency.usd 1000,00)))
           
           (_.coverage [/.composite]
             (let [both (/.composite before after)]
               (and (money.= (the /.#open before)
                             (the /.#open both))
                    (and (money.>= (the /.#high before)
                                   (the /.#high both))
                         (money.>= (the /.#high after)
                                   (the /.#high both)))
                    (and (money.<= (the /.#low before)
                                   (the /.#low both))
                         (money.<= (the /.#low after)
                                   (the /.#low both)))
                    (money.= (the /.#close after)
                             (the /.#close both))
                    (and (n.>= (the /.#volume before)
                               (the /.#volume both))
                         (n.>= (the /.#volume after)
                               (the /.#volume both))))))
           (_.coverage [/.format]
             (bit#= (of /.equivalence =
                        before
                        after)
                    (text#= (/.format before)
                            (/.format after))))
           )))
