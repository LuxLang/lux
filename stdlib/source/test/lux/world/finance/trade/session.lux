... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" volume (.only)
     ["[1]T" \\test]]
    [//
     ["[0]" money (.only)
      ["[0]" currency (.only Currency)]
      ["[1]T" \\test]]]]]])

(the .public (random $ max_sub_units)
  (All (_ $)
    (-> (Currency $) Nat
        (Random (/.Session $))))
  (do [! random.monad]
    [p0 (moneyT.random $ max_sub_units)
     p1 (moneyT.random $ max_sub_units)
     p2 (moneyT.random $ max_sub_units)
     p3 (moneyT.random $ max_sub_units)
     bullish? random.bit
     volume (volumeT.random $ max_sub_units)]
    (when (list.sorted money.< (list p0 p1 p2 p3))
      (list low bottom top high)
      (in [/.#open (if bullish?
                     bottom
                     top)
           /.#high high
           /.#low low
           /.#close (if bullish?
                      top
                      bottom)
           /.#volume volume])

      _
      (undefined))))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [before (..random currency.usd 1000,00)
         after (..random currency.usd 1000,00)])
      (_.for [/.Session
              /.#open /.#high /.#low /.#close /.#volume])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec /.equivalence (..random currency.usd 1000,00)))
           
           (_.coverage [/.composite]
             (let [both (/.composite before after)]
               (and (money.= (its /.#open before)
                             (its /.#open both))
                    (and (money.>= (its /.#high before)
                                   (its /.#high both))
                         (money.>= (its /.#high after)
                                   (its /.#high both)))
                    (and (money.<= (its /.#low before)
                                   (its /.#low both))
                         (money.<= (its /.#low after)
                                   (its /.#low both)))
                    (money.= (its /.#close after)
                             (its /.#close both))
                    (and (n.>= (its [/.#volume volume.#in] before)
                               (its [/.#volume volume.#in] both))
                         (n.>= (its [/.#volume volume.#in] after)
                               (its [/.#volume volume.#in] both))

                         (money.>= (its [/.#volume volume.#out] before)
                                   (its [/.#volume volume.#out] both))
                         (money.>= (its [/.#volume volume.#out] after)
                                   (its [/.#volume volume.#out] both))))))
           (_.coverage [/.format]
             (bit#= (of /.equivalence =
                        before
                        after)
                    (text#= (/.format before)
                            (/.format after))))
           )))
