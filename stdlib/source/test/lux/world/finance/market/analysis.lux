(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [world
    [time
     ["[0]" instant (.use "[1]#[0]" equivalence)]
     ["[0]" duration (.use "[1]#[0]" equivalence)]
     ["[0]" series (.only)
      ["[1]T" \\test]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" accumulation_distribution]
  ["[1][0]" pivot_point]])

(def .public (spec random it)
  (All (_ from to)
    (-> (Random from) (/.Analysis from to)
        Test))
  (do random.monad
    [.let [expected_events 10]
     input (seriesT.random expected_events random)
     .let [output (it input)]]
    (all _.and
         (_.coverage [/.Analysis]
           (and (instant#= (the series.#start input)
                           (the series.#start output))
                (duration#= (the series.#interval input)
                            (the series.#interval output))
                (n.= (series.size input)
                     (series.size output))))
         )))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [])
      (all _.and
           /accumulation_distribution.test
           (/pivot_point.test spec)
           )))
