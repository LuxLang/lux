(.require
 [library
  [lux (.except Analysis)
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random (.only Random)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [// (.only Analysis)
    [///
     ["[0]" money (.only)
      ["[0]" currency]]
     [trade
      ["[0]" session (.only)
       ["[1]T" \\test]]]]]]])

(def .public (test spec)
  (-> (All (_ from to)
        (-> (Random from) (Analysis from to)
            Test))
      Test)
  (<| (_.covering /._)
      (do [! random.monad]
        [session (sessionT.random currency.usd 1000,00)])
      (all _.and
           (_.for [/.analysis]
                  (spec (sessionT.random currency.usd 1000,00)
                        /.analysis))
           
           (_.coverage [/.typical_price]
             (let [it (/.typical_price session)]
               (and (money.<= (the session.#high session)
                              it)
                    (money.>= (the session.#low session)
                              it))))
           (_.coverage [/.Central_Pivot_Range
                        /.#pivot_point /.#top_central /.#bottom_central

                        /.central_pivot_range]
             (let [it (/.central_pivot_range session)

                   pivot_is_typical!
                   (money.= (/.typical_price session)
                            (the /.#pivot_point it))

                   all_values_are_different!
                   (and (not (money.= (the /.#bottom_central it)
                                      (the /.#pivot_point it)))
                        (not (money.= (the /.#top_central it)
                                      (the /.#pivot_point it)))
                        (not (money.= (the /.#bottom_central it)
                                      (the /.#top_central it))))]
               (and pivot_is_typical!
                    all_values_are_different!)))
           )))
