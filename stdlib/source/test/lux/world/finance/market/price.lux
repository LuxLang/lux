... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [data
    ["[0]" bit]
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]
     ["i" integer]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [///
    ["[0]" money (.only)
     ["[0]" currency (.only Currency)]]]]]
 [///
  ["[0]T" money]])

(the .public (random $ max_sub_units)
  (for_any (_ $)
    (-> (Currency $) Natural
        (Random (/.Action $))))
  (do random.monad
    [from (moneyT.random $ max_sub_units)
     to (moneyT.random $ max_sub_units)]
    (in (/.action from to))))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [parameter (..random currency.usd 1000,00)
         subject (..random currency.usd 1000,00)

         from (moneyT.random currency.usd 1000,00)
         to (moneyT.random currency.usd 1000,00)

         not_free (moneyT.random currency.usd 1000,00)

         price (of ! each
                   (|>> i.abs .natural (money.money currency.usd))
                   random.integer)
         .let [positive (/.action (/.free currency.usd)
                                  price)
               negative (/.action price
                                  (/.free currency.usd))]])
      (_.for [/.Price /.Action])
      (all _.and
           (_.for [/.equivalence /.=]
                  (equivalenceT.spec /.equivalence (..random currency.usd 1000,00)))
           (_.for [/.order /.<]
                  (orderT.spec /.order (..random currency.usd 1000,00)))

           (_.coverage [/.free]
             (money.<= not_free
                       (/.free currency.usd)))
           (_.coverage [/.action /.currency /.movement]
             (let [it (/.action from to)]
               (and (same? currency.usd (/.currency it))
                    (i.= (integer (n.- (money.amount from) (money.amount to)))
                         (/.movement it)))))
           (_.coverage [/.+ /.-]
             (and (|> subject
                      (/.+ parameter)
                      (of /.equivalence = subject)
                      not)
                  (|> subject
                      (/.+ parameter)
                      (/.- parameter)
                      (of /.equivalence = subject))))
           (_.coverage [/.min]
             (and (/.<= parameter
                        (/.min parameter subject))
                  (/.<= subject
                        (/.min parameter subject))))
           (_.coverage [/.max]
             (and (/.>= parameter
                        (/.max parameter subject))
                  (/.>= subject
                        (/.max parameter subject))))
           (_.coverage [/.>]
             (bit.= (/.> parameter subject)
                    (/.< subject parameter)))
           (_.coverage [/.<= /.>=]
             (bit.= (/.<= parameter subject)
                    (/.>= subject parameter)))
           (_.coverage [/.units /.sub_units
                        /.of_units /.of_sub_units]
             (/.= subject
                  (/.+ (/.of_units currency.usd (/.units subject))
                       (/.of_sub_units currency.usd (/.sub_units subject)))))
           ... (do !
           ...   [it (..random currency.usd 1000,00)]
           ...   (_.coverage [/.injection]
           ...     (let [starts_with_quantity!
           ...           (text.starts_with? (%.integer (/.movement it))
           ...                              (text.replaced_once "." "" (/.injection it)))

           ...           ends_with_currency!
           ...           (text.ends_with? (currency.alphabetic_code (/.currency it))
           ...                            (/.injection it))]
           ...       (and starts_with_quantity!
           ...            ends_with_currency!))))
           (_.coverage [/.none]
             (and (not (/.< (/.none currency.usd)
                            positive))
                  (not (/.> (/.none currency.usd)
                            negative))))
           (_.coverage [/.maximum]
             (not (money.> (/.maximum currency.usd)
                           price)))
           )))
