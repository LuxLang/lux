... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [math
    ["[0]" random]
    [number
     [/64
      ["[0]" natural]
      ["[0]" decimal]]]]
   [test
    ["_" property (.only Test)]]
   [meta
    ["[0]" static]]
   [logic
    ["[0]" bit]]
   [macro
    ["[0]" expansion]]
   [data
    [collection
     ["[0]" list]
     ["[0]" set]]]]]
 ["[0]" /
  ["[1][0]" motion
   ["[1]/[0]" line]
   ["[1]/[0]" circle]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" // (.only)
    ["[0]" /1]]]])

(the margin_of_error
  +0.000,000,000,000,000,000,000,000,1)

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [.let [range 1,000,000
               random_scalar (/1.random range)
               random_vector (/.random range)]
         origin random_vector
         destination random_vector
         scale random_scalar

         proximity random_scalar])
      (all _.and
           (<| (_.for [/.Vector
                       /.#forward/backward /.#left/right])
               (all _.and
                    (_.for [/.equivalence /.=]
                           (static.when (same? /.equivalence /.=)
                             (equivalenceT.spec /.equivalence (/.random range))))

                    (_.coverage [/.+]
                      (/.= (/.+ origin destination)
                           (/.+ destination origin)))
                    (_.coverage [/.opposite]
                      (/.= /.origin
                           (/.+ destination
                                (/.opposite destination))))
                    (_.coverage [/.-]
                      (/.= (/.+ (/.opposite origin) destination)
                           (/.- origin destination)))
                    (_.coverage [/.dilation /.contraction]
                      (|> destination
                          (/.dilation scale)
                          (/.contraction scale)
                          (/.= destination)))
                    (_.coverage [/.origin]
                      (and (/.= destination
                                (/.+ /.origin destination))
                           (/.= /.origin
                                (/.dilation decimal.zero destination))))
                    (_.coverage [/.Orientation
                                 /.magnitude /.orientation
                                 /.polar]
                      (/.approximately? ..margin_of_error
                                        destination
                                        (/.polar (/.magnitude destination)
                                                 (/.orientation destination))))
                    (_.coverage [/.distance]
                      (and (decimal.= decimal.zero
                                      (/.distance destination destination))
                           (decimal.= (/.distance origin destination)
                                      (/.distance destination origin))))
                    (_.coverage [/.approximately?]
                      (let [limit (/.distance origin destination)]
                        (and (/.approximately? limit origin destination)
                             (bit.= (decimal.< limit proximity)
                                    (not (/.approximately? proximity origin destination))))))
                    ))
           (<| (_.for [//.Elasticity])
               (expansion.let [,*every_modulus (these /.tungsten
                                                      /.steel
                                                      /.copper
                                                      /.brass
                                                      /.aluminium
                                                      /.quartz)]
                 (_.coverage [,*every_modulus]
                   (let [every_option (list ,*every_modulus)
                         every_unique_option (set.of_list decimal.hash every_option)]
                     (natural.= (list.size every_option)
                                (set.size every_unique_option))))))
           
           /motion/line.test
           /motion/circle.test
           )))
