... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [math
    ["[0]" random]
    [number
     [/64
      ["[0]" natural]
      ["[0]" decimal]]]]
   [test
    ["_" property (.only Test)]]
   ["[0]" type
    ["[1]" check]]
   [macro
    ["[0]" expansion]]
   [data
    [collection
     ["[0]" list]
     ["[0]" set]]]]]
 ["[0]" /
  ["[1][0]" motion]]
 [\\library
  ["[0]" / (.only)
   ["[0]" //]]])

(the margin_of_error
  +0.000,000,000,000,000,000,000,000,1)

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [.let [range 1,000,000
               random (/.random range)]
         initial_time random
         final_time random

         initial_position random
         final_position random])
      (all _.and
           (<| (_.for [/.Dimension /.Vector
                       /.random])
               (all _.and
                    (_.coverage [/.equivalence /.=]
                      (and (identical? decimal.equivalence /.equivalence)
                           (identical? decimal.= /.=)))
                    
                    (_.coverage [/.forward /.backward]
                      (/.= /.forward
                           (/.opposite /.backward)))
                    (_.coverage [/.origin]
                      (decimal.= /.origin
                                 (/.opposite /.origin)))
                    (_.coverage [/.opposite]
                      (decimal.= /.origin
                                 (/.+ (/.opposite initial_position)
                                      initial_position)))
                    (_.coverage [/.+]
                      (and (decimal.= (/.+ initial_position
                                           final_position)
                                      (/.+ final_position
                                           initial_position))
                           (decimal.= initial_position
                                      (/.+ /.origin
                                           initial_position))))
                    (_.coverage [/.-]
                      (decimal.= (/.+ (/.opposite final_position)
                                      initial_position)
                                 (/.- final_position
                                      initial_position)))
                    (_.coverage [/.Time]
                      (type.< /.Dimension /.Time))
                    (_.coverage [/.Position]
                      (type.< /.Dimension /.Position))
                    ))
           (<| (_.for [/.Difference])
               (all _.and
                    (_.coverage [/.stasis]
                      (decimal.= final_time
                                 (/.stasis final_time)))
                    (_.coverage [/.difference]
                      (decimal.= final_position
                                 ((/.difference initial_position final_position) initial_position)))
                    (_.coverage [/.value]
                      (let [difference (/.value (/.difference initial_position final_position))]
                        (decimal.= final_position
                                   (decimal.+ difference initial_position))))
                    (<| (_.for [/.Interval])
                        (all _.and
                             (_.coverage [/.interval]
                               (decimal.= (decimal.opposite (/.value (/.interval initial_time final_time)))
                                          (/.value (/.interval final_time initial_time))))
                             ))
                    (<| (_.for [/.Displacement])
                        (all _.and
                             (_.coverage [/.displacement]
                               (decimal.= (decimal.opposite (/.value (/.displacement initial_position final_position)))
                                          (/.value (/.displacement final_position initial_position))))
                             ))
                    ))
           (<| (_.for [//.Elasticity])
               (expansion.let [,*every_modulus (these /.tungsten
                                                      /.steel
                                                      /.copper
                                                      /.brass
                                                      /.aluminium
                                                      /.quartz)]
                 (_.coverage [,*every_modulus]
                   (let [every_option (list ,*every_modulus)
                         every_unique_option (set.of_list decimal.hash every_option)]
                     (natural.= (list.size every_option)
                                (set.size every_unique_option))))))

           /motion.test
           )))
