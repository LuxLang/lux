... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [math
    ["[0]" random]
    [number
     [/64
      ["[0]" decimal]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" //]]])

(the margin_of_error
  +0.000,000,000,000,000,000,000,000,1)

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [.let [range 1,000,000
               random (//.random range)]
         initial_time random
         final_time random

         initial_position random
         final_position random])
      (all _.and
           (<| (_.for [/.Motion])
               (all _.and
                    (_.coverage [/.position]
                      (//.= initial_position
                            ((/.position /.uniform /.rest initial_position) final_time)))
                    (_.coverage [/.velocity]
                      (let [interval (//.interval final_time initial_time)
                            velocity (/.average_velocity interval
                                                         (//.displacement initial_position final_position))
                            acceleration (/.average_acceleration interval (//.difference /.rest velocity))]
                        ((decimal.approximately? ..margin_of_error)
                         velocity
                         ((/.velocity acceleration /.rest) (//.value interval)))))
                    ))
           (<| (_.for [/.Velocity])
               (all _.and
                    (_.coverage [/.rest]
                      (//.= initial_position
                            ((/.position /.uniform /.rest initial_position) final_time)))
                    (_.coverage [/.average_velocity]
                      (let [interval (//.interval final_time initial_time)
                            velocity (/.average_velocity interval
                                                         (//.displacement initial_position final_position))]
                        ((decimal.approximately? ..margin_of_error)
                         final_position
                         ((/.position /.uniform velocity initial_position) (//.value interval)))))
                    ))
           (<| (_.for [/.Acceleration])
               (all _.and
                    (_.coverage [/.uniform]
                      (//.= initial_position
                            ((/.position /.uniform /.rest initial_position) final_time)))
                    (_.coverage [/.average_acceleration]
                      (let [interval (//.interval final_time initial_time)
                            velocity (/.average_velocity interval
                                                         (//.displacement initial_position final_position))
                            acceleration (/.average_acceleration interval (//.difference /.rest velocity))

                            mid_point (decimal./ +2.0 (//.- initial_position final_position))
                            half_way (//.+ initial_position mid_point)]
                        ((decimal.approximately? ..margin_of_error)
                         half_way
                         ((/.position acceleration /.rest initial_position) (//.value interval)))))
                    ))
           )))
