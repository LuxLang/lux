... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future]]
   [control
    ["[0]" io (.only IO)]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" /]])

(/.capability (Can_Shift a)
  (can_shift [a Natural] [a Natural]))

(/.capability Can_IO
  (can_io [] (IO Natural)))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let random.monad
        [shift random.natural
         base random.natural
         .let [expected (n.+ shift base)]
         pass_through (random.ascii 1)]
        (_.for [/.Capability]
               (all _.and
                    (_.coverage [/.capability /.use]
                      (let [capability (..can_shift (function (_ [no_op raw])
                                                      [no_op (n.+ shift raw)]))
                            [untouched actual] (/.use capability [pass_through base])]
                        (and (same? pass_through untouched)
                             (n.= expected actual))))
                    (pure (let [capability (..can_io (function (_ _) (io.io expected)))]
                            (monad.let future.monad
                              [actual (/.use (/.future capability) [])]
                              (unit.coverage [/.future]
                                (n.= expected actual)))))
                    )))))
