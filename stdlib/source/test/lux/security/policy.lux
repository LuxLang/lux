... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [hash (.only Hash)]
    ["[0]" monad (.only)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]]
   [data
    ["[0]" text]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only Context Privacy Can_Conceal Can_Reveal Privilege Private)]])

(the (injection can_conceal)
  (for_any (_ label)
    (-> (Can_Conceal label) (Injection (for_any (_ value) (Private value label)))))
  can_conceal)

(the (comparison can_reveal)
  (for_any (_ label)
    (-> (Can_Reveal label) (Comparison (for_any (_ value) (Private value label)))))
  (function (_ == left right)
    (== (can_reveal left)
        (can_reveal right))))

(every Password
  (Private Text))

(every (Policy %)
  (Interface
   (is (Hash (Password %))
       &hash)

   (is (-> Text (Password %))
       password)

   (is (Privilege Privacy %)
       privilege)))

(the (policy _)
  (for_some (_ %)
    (-> Any
        (Policy %)))
  (/.with_policy
    (is (Context Privacy Policy)
        (function (_ (^.let privilege (open "%[0]")))
          (implementation
           (the &hash
             (implementation
              (the equivalence
                (implementation
                 (the (= expected actual)
                   (text.= (%#can_downgrade expected)
                           (%#can_downgrade actual)))))
              (the hash
                (|>> %#can_downgrade
                     (by text.hash hash)))))
           
           (the password
             %#can_upgrade)

           (the privilege
             privilege))))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Policy
              /.Can_Upgrade /.Can_Downgrade])
      (monad.let random.monad
        [.let [policy_0 (policy [])]
         raw_password (random.ascii 10)
         .let [password (by policy_0 password raw_password)]]
        (all _.and
             (_.for [/.Privacy /.Private /.Can_Conceal /.Can_Reveal
                     /.Safety /.Safe /.Can_Trust /.Can_Distrust]
                    (all _.and
                         (_.for [/.functor]
                                (functorT.spec (..injection (by policy_0 #can_upgrade)) (..comparison (by policy_0 #can_downgrade)) /.functor))
                         (_.for [/.monad]
                                (monadT.spec (..injection (by policy_0 #can_upgrade)) (..comparison (by policy_0 #can_downgrade)) /.monad))))

             (_.coverage [/.Privilege
                          /.#can_upgrade /.#can_downgrade

                          /.Context /.with_policy]
               (and (by policy_0 = password password)
                    (n.= (by text.hash hash raw_password)
                         (by policy_0 hash password))))
             (let [policy_1 (policy [])
                   delegate (/.delegation (by policy_0 #can_downgrade) (by policy_1 #can_upgrade))]
               (_.coverage [/.Delegation /.delegation]
                 (by policy_1 = (delegate password) (delegate password))))
             ))))
