(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    ["." meta]
    [control
     ["." try]
     ["." exception]
     [parser
      ["<.>" code]]]
    [data
     ["." text ("#\." equivalence)
      ["%" format]]
     [format
      ["md" markdown]]]
    ["." macro
     [syntax (#+ syntax:)]
     ["." template]
     ["." code]]]]
  [\\library
   ["." /]])

(syntax: (macro_error [macro <code>.any])
  (function (_ compiler)
    (case ((macro.expansion macro) compiler)
      (#try.Failure error)
      (#try.Success [compiler (list (code.text error))])
      
      (#try.Success _)
      (#try.Failure "OOPS!"))))

(syntax: (description [])
  (\ meta.monad map
     (|>> %.nat code.text list)
     meta.seed))

(template.with_locals [g!default]
  (with_expansions ['definition_description' (..description)
                    'sub_description' (..description)
                    'super_description' (..description)]
    (as_is (def: g!default
             Nat
             123)

           (/.documentation: /.documentation:
             'definition_description')

           (def: .public test
             Test
             (<| (_.covering /._)
                 ($_ _.and
                     (_.for [/.Definition]
                            ($_ _.and
                                (_.cover [/.default]
                                         (let [definition (`` (/.default (~~ (template.identifier [.._] [g!default]))))]
                                           (and (|> definition
                                                    (value@ #/.definition)
                                                    (text\= (template.text [g!default])))
                                                (|> definition
                                                    (value@ #/.documentation)
                                                    md.markdown
                                                    (text\= "")
                                                    not))))
                                (_.cover [/.documentation:]
                                         (and (|> ..documentation:
                                                  (value@ #/.definition)
                                                  (text\= (template.text [/.documentation:])))
                                              (|> ..documentation:
                                                  (value@ #/.documentation)
                                                  md.markdown
                                                  (text.contains? 'definition_description'))))
                                ))
                     (_.for [/.Module]
                            ($_ _.and
                                (_.cover [/.module /.documentation]
                                         (let [sub (`` (/.module /._
                                                                 (~~ (template.text ['sub_description']))
                                                                 []
                                                                 []))
                                               super (`` (/.module .._
                                                                   (~~ (template.text ['super_description']))
                                                                   [..documentation:]
                                                                   [sub]))]
                                           (and (text.contains? (template.text ['sub_description'])
                                                                (/.documentation sub))
                                                (text.contains? (/.documentation sub)
                                                                (/.documentation super))
                                                (text.contains? (template.text ['super_description'])
                                                                (/.documentation super))
                                                (text.contains? (md.markdown (value@ #/.documentation ..documentation:))
                                                                (/.documentation super)))))
                                ))
                     (_.cover [/.unqualified_identifier]
                              (`` (and (~~ (template [<example>]
                                             [(<| (text.contains? (value@ #exception.label /.unqualified_identifier))
                                                  macro_error
                                                  <example>)]

                                             [(/.default g!default)]
                                             [(/.documentation: g!default
                                                (~~ (template.text ['definition_description'])))]
                                             [(/.module g!default
                                                        ""
                                                        [..documentation:]
                                                        [sub])]
                                             )))))
                     )))))
  )
