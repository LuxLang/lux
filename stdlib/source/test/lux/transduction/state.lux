... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [data
    [collection
     ["[0]" list (.use "[1]:[0]" monad monoid)]
     ["[0]" dictionary]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" pure]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [quantity (by ! each (|>> (n.% 10) ++) random.natural)
         to_skip (by ! each (n.% quantity) random.natural)
         delimiter random.natural
         .let [bundle (is (Random (List Natural))
                          (|> random.natural
                              (random.only (|>> (n.= delimiter) not))
                              (random.set n.hash quantity)
                              (by ! each set.as_list)))]
         operands bundle
         replacements bundle
         bundles (|> bundle
                     (random.set (list.hash n.hash) quantity)
                     (by ! each set.as_list))])
      (_.for [/.Transduction
              /.:in /.:out /.:transduction
              
              /.With /.with])
      (all _.and
           (_.coverage [/.in_series /.pure]
             (n.= (list.mix n.+ 0 operands)
                  (/.in_series n.+ 0 (/.pure pure.nothing) list.mix operands)))
           (_.coverage [/.unique]
             (n.= (list.mix n.+ 0 operands)
                  (/.in_series n.+ 0 (/.unique n.hash) list.mix (list:composite operands operands))))
           (_.coverage [/.interposed]
             (n.= (list.mix n.+ 0 (list.interposed delimiter operands))
                  (/.in_series n.+ 0 (/.interposed delimiter) list.mix operands)))
           (_.coverage [/.new]
             (n.= (list.mix n.+ 0 (list.interposed delimiter operands))
                  (/.in_series n.+ 0
                               (/.new n.equivalence)
                               list.mix (|> operands
                                            (list.interposed delimiter)
                                            (list.interposed delimiter)))))
           (_.coverage [/.after]
             (n.= (list.mix n.+ 0 operands)
                  (/.in_series n.+ 0
                               (/.after quantity)
                               list.mix (list:composite operands operands))))
           (_.coverage [/.skipping]
             (n.= (list.mix n.+ 0 operands)
                  (/.in_series n.+ 0
                               (/.skipping to_skip)
                               list.mix (|> operands
                                            (list:each (list.repeated (++ to_skip)))
                                            list:conjoint))))
           (_.coverage [/.until]
             (n.= (list.mix n.+ 0 (|> operands
                                      (list.repeated (-- quantity))
                                      (list:each (list:composite (list delimiter)))
                                      list:conjoint))
                  (/.in_series n.+ 0
                               (/.until (n.= delimiter))
                               list.mix (|> operands
                                            (list.repeated quantity)
                                            (list.interposed (list delimiter))
                                            list:conjoint))))
           )))
