... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]
     ["[0]" dictionary]
     ["[0]" set]]]
   [concurrency
    ["[0]" future (.only Future)]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [.let [bundle (is (Random (List Natural))
                          (|> random.natural
                              (random.set n.hash 5)
                              (by ! each set.as_list)))]
         operands bundle
         replacements bundle
         bundles (|> bundle
                     (random.set (list.hash n.hash) 5)
                     (by ! each set.as_list))

         expected_size (by ! each (n.% 100) random.natural)
         parallelism (by ! each (n.% (++ expected_size)) random.natural)])
      (_.for [/.Transduction])
      (all _.and
           (_.coverage [/.in_series /.nothing]
             (n.= (list.mix n.+ 0 operands)
                  (/.in_series n.+ 0 /.nothing list.mix operands)))
           (_.coverage [/.each]
             (n.= (list.mix n.+ 0 (list#each ++ operands))
                  (/.in_series n.+ 0 (/.each ++) list.mix operands)))
           (_.coverage [/.only]
             (n.= (list.mix n.+ 0 (list.only n.even? operands))
                  (/.in_series n.+ 0 (/.only n.even?) list.mix operands)))
           (_.coverage [/.many]
             (n.= (list.mix n.+ 0 (list#conjoint bundles))
                  (/.in_series n.+ 0 (/.many list.mix) list.mix bundles)))
           (_.coverage [/.and /.maybe]
             (n.= (list.mix n.+ 0 (list.only n.even? operands))
                  (/.in_series n.+ 0
                               (all /.and
                                    (/.each (function (_ it)
                                              (if (n.even? it)
                                                  {.#Some it}
                                                  {.#None})))
                                    /.maybe)
                               list.mix operands)))
           (_.coverage [/.replaced]
             (n.= (list.mix n.+ 0 replacements)
                  (/.in_series n.+ 0
                               (/.replaced (|> (list.zipped_2 operands replacements)
                                               (dictionary.of_list n.hash)))
                               list.mix operands)))
           (<| (_.for [/.Parallelism])
               (all _.and
                    (_.coverage [/.none]
                      (n.= 0 /.none))
                    (_.coverage [/.suggestion]
                      (n.> /.none /.suggestion))
                    (pure (with n.addition
                            (let [it (list.indices expected_size)
                                  expected (/.in_series composite identity /.nothing list.mix it)]
                              (do future.monad
                                [actual (/.in_parallel parallelism n.addition /.nothing it)]
                                (unit.coverage [/.in_parallel]
                                  (n.= expected actual))))))
                    ))
           )))
