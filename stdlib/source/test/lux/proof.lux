... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [math
    ["[0]" random]]
   [test
    ["_" property (.only Test)]]
   [data
    ["[0]" product]]
   [error
    ["[0]" try]]]]
 [\\library
  ["[0]" /]])

(the _
  /.Identity
  (<| try.trusted
      (/.theorem (/.environment product.pair (is (for_any (_ left right)
                                                   (-> left right
                                                       [left right]))
                                                 (function (_ left right)
                                                   [left right]))
                                product.left (is (for_any (_ left right)
                                                   (-> [left right]
                                                       left))
                                                 (function (_ [left right])
                                                   left)))
                 (/.let [left right]
                   (/.= left
                        (product.left (product.pair left right))))
                 (all /.and
                      (/.=' (/.by /.identity)
                            (|> /.by_definition
                                (/.of (|> /.by_definition
                                          (/.of (/.by /.identity)
                                                /.by_reification)
                                          (/.of (/.by /.identity)
                                                /.by_reification))
                                      (all /.and
                                           /.by_reification
                                           (/.by_pattern_matching (/.with /.left_of_pair /.by))))))
                      /.qed))))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [])
      (all _.and
           (_.coverage [/.theorem]
             false)
           )))
