... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [data
    ["[0]" text]]
   [math
    ["[0]" random]]
   [test
    ["_" property (.only Test)]]]]
 ["/" \\library]
 ["!" \\theorem])

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (_.by_proof [.Bit]
                       [!.bit])
           
           (_.for [/.hash]
                  (hashT.spec /.hash random.bit))
           (_.for [/.disjunction]
                  (monoidT.spec /.equality /.disjunction random.bit))
           (_.for [/.conjunction]
                  (monoidT.spec /.equality /.conjunction random.bit))
           (_.for [/.text]
                  (formatT.spec /.equality /.text random.bit))

           (_.by_proof [/.equality /.=]
                       [!.equality
                        
                        !.complementation_of_=
                        !.not_equal])
           (_.by_proof [/.<]
                       [!.anti_reflexivity_of_<
                        !.asymmetry_of_<
                        !.totality_of_<

                        !.only_order
                        !.minimum])
           (_.by_proof [.if]
                       [!.if_false
                        !.if_true
                        !.if_not])
           (_.by_proof [.false
                        /.no /.off /.falsum]
                       [!.false])
           (_.by_proof [.true
                        /.yes /.on /.verum]
                       [!.true])
           (_.by_proof [.not]
                       [!.double_negation])
           (_.by_proof [.or]
                       [!.idempotence_of_or
                        !.complementation_of_or
                        
                        !.identity_of_or
                        !.annihilation_of_or
                        
                        !.commutativity_of_or
                        !.associativity_of_or

                        !.distributivity_of_or
                        !.negation_of_or

                        !.absorption_of_or])
           (_.by_proof [.and]
                       [!.idempotence_of_and
                        !.complementation_of_and
                        
                        !.identity_of_and
                        !.annihilation_of_and
                        
                        !.commutativity_of_and
                        !.associativity_of_and

                        !.distributivity_of_and
                        !.negation_of_and

                        !.absorption_of_and])
           (_.by_proof [/.xor]
                       [!.identity_of_xor
                        !.negation_by_xor

                        !.negation_in_xor
                        !.xor_is_an_involution
                        
                        !.non_idempotence_of_xor
                        !.complementation_of_xor

                        !.commutativity_of_xor
                        !.associativity_of_xor
                        !.distributivity_in_xor])
           (_.by_proof [/.if]
                       [!.principle_of_explosion
                        !.identity_of_if
                        
                        !.reflexivity_of_if
                        !.totality_of_if
                        !.complementation_of_if

                        !.contraposition
                        !.import_export
                        !.negation_of_if
                        !.or_if
                        !.necessity
                        !.commutativity_of_if
                        !.left_distributivity])
           
           (monad.let random.monad
             [left random.bit
              right random.bit]
             (_.coverage [/.as_text]
               (/.= (/.= left right)
                    (text.= (/.as_text left) (/.as_text right)))))
           )))
