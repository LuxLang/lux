... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [error
    ["[0]" try]]
   ["[0]" function]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    ["[0]" random]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 ["/" \\library]
 ["!" \\theorem])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [.Bit])
      (all _.and
           (_.for [/.hash]
                  (hashT.spec /.hash random.bit))
           (_.for [/.disjunction]
                  (monoidT.spec /.equivalence /.disjunction random.bit))
           (_.for [/.conjunction]
                  (monoidT.spec /.equivalence /.conjunction random.bit))
           (_.for [/.text]
                  (formatT.spec /.equivalence /.text random.bit))

           (_.by_proof [/.equivalence /.=]
                       (list (_.identity !.reflexivity_of_=)))
           (_.by_proof [.if]
                       (list (_.identity !.if_false)
                             (_.identity !.if_true)
                             (_.identity !.if_not)))
           (_.by_proof [.false
                        /.no /.off /.falsum]
                       (list (_.identity !.false_is_not_true)))
           (_.by_proof [.true
                        /.yes /.on /.verum]
                       (list (_.identity !.true_is_not_false)))
           (_.by_proof [.not]
                       (list (_.identity !.double_negation)))
           (_.by_proof [.or]
                       (list (_.identity !.idempotence_of_or)
                             (_.identity !.complementation_of_or)
                             
                             (_.identity !.identity_of_or)
                             (_.identity !.annihilation_of_or)
                             
                             (_.identity !.commutativity_of_or)
                             (_.identity !.associativity_of_or)

                             (_.identity !.distributivity_of_or)
                             (_.identity !.negation_of_or)

                             (_.identity !.absorption_of_or)))
           (_.by_proof [.and]
                       (list (_.identity !.idempotence_of_and)
                             (_.identity !.complementation_of_and)
                             
                             (_.identity !.identity_of_and)
                             (_.identity !.annihilation_of_and)
                             
                             (_.identity !.commutativity_of_and)
                             (_.identity !.associativity_of_and)

                             (_.identity !.distributivity_of_and)
                             (_.identity !.negation_of_and)

                             (_.identity !.absorption_of_and)))
           (_.by_proof [/.xor]
                       (list (_.identity !.identity_of_xor)
                             (_.identity !.negation_by_xor)

                             (_.identity !.negation_in_xor)
                             (_.identity !.xor_is_an_involution)
                             
                             (_.identity !.non_idempotence_of_xor)
                             (_.identity !.complementation_of_xor)

                             (_.identity !.commutativity_of_xor)
                             (_.identity !.associativity_of_xor)
                             (_.identity !.distributivity_in_xor)))
           (_.by_proof [/.if]
                       (list (_.identity !.principle_of_explosion)
                             (_.identity !.identity_of_if)
                             
                             (_.identity !.reflexivity_of_if)
                             (_.identity !.totality_of_if)
                             (_.identity !.complementation_of_if)

                             (_.identity !.contraposition)
                             (_.identity !.import_export)
                             (_.identity !.negation_of_if)
                             (_.identity !.or_if)
                             (_.identity !.necessity)
                             (_.identity !.commutativity_of_if)
                             (_.identity !.left_distributivity)))
           
           (monad.let random.monad
             [left random.bit
              right random.bit]
             (_.coverage [/.as_text]
               (/.= (/.= left right)
                    (text.= (/.as_text left) (/.as_text right)))))
           )))
