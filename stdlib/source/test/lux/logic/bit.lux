... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [error
    ["[0]" try]]
   ["[0]" function]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    ["[0]" random]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 ["/" \\library]
 ["!" \\theorem])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [.Bit])
      (monad.let random.monad
        [left random.bit
         right random.bit
         extra random.bit]
        (all _.and
             (_.for [/.hash]
                    (hashT.spec /.hash random.bit))
             (_.for [/.disjunction]
                    (monoidT.spec /.equivalence /.disjunction random.bit))
             (_.for [/.conjunction]
                    (monoidT.spec /.equivalence /.conjunction random.bit))
             (_.for [/.text]
                    (formatT.spec /.equivalence /.text random.bit))

             (_.coverage [/.equivalence /.=
                          !.reflexivity_of_=]
               (identical? /.equivalence /.=))
             (_.coverage [.if
                          !.if_false
                          !.if_true
                          !.if_not]
               true)
             (_.coverage [.false
                          !.false_is_not_true]
               true)
             (_.coverage [.true
                          !.true_is_not_false]
               true)
             (_.coverage [.not
                          !.double_negation]
               true)
             (_.coverage [.or
                          !.idempotence_of_or
                          !.complementation_of_or
                          
                          !.identity_of_or
                          !.annihilation_of_or
                          
                          !.commutativity_of_or
                          !.associativity_of_or

                          !.distributivity_of_or
                          !.negation_of_or

                          !.absorption_of_or]
               true)
             (_.coverage [.and
                          !.idempotence_of_and
                          !.complementation_of_and
                          
                          !.identity_of_and
                          !.annihilation_of_and
                          
                          !.commutativity_of_and
                          !.associativity_of_and

                          !.distributivity_of_and
                          !.negation_of_and

                          !.absorption_of_and]
               true)
             (_.coverage [/.xor
                          !.identity_by_xor
                          !.negation_by_xor

                          !.negation_in_xor
                          !.xor_is_an_involution
                          
                          !.non_idempotence_of_xor
                          !.complementation_of_xor

                          !.commutativity_of_xor
                          !.associativity_of_xor
                          !.distributivity_in_xor]
               true)
             (_.coverage [/.if
                          !.principle_of_explosion
                          !.identity_of_if
                          
                          !.reflexivity_of_if
                          !.totality_of_if
                          !.complementation_of_if

                          !.contraposition
                          !.import_export
                          !.negation_of_if
                          !.or_if
                          !.necessity
                          !.commutativity_of_if
                          !.left_distributivity]
               true)
             
             (_.coverage [/.no /.yes]
               (and (identical? false /.no)
                    (identical? true /.yes)))
             (_.coverage [/.off /.on]
               (and (identical? false /.off)
                    (identical? true /.on)))
             (_.coverage [/.falsum /.verum]
               (and (identical? false /.falsum)
                    (identical? true /.verum)))
             (_.coverage [/.as_text]
               (/.= (/.= left right)
                    (text.= (/.as_text left) (/.as_text right))))
             ))))
