... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [control
    ["|" pipe]
    ["[0]" maybe]
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    [collection
     ["[0]" list]
     ["[0]" set]
     ["[0]" sequence (.only Sequence sequence)]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["[0]" nat (.use "[1]#[0]" equivalence)]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]
  [//
   ["[0]" interval (.only)
    ["[1]T" \\test]]]])

(with_expansions [<options> (these /.chromatic

                                   /.major_pentatonic
                                   /.suspended_pentatonic
                                   /.blues_minor
                                   /.blues_major
                                   /.minor_pentatonic
                                   /.balinese
                                   /.chinese
                                   /.japanese_hirajoshi
                                   /.japanese_iwato
                                   /.japanese_in_sen

                                   /.blues
                                   /.augmented
                                   /.iberian
                                   /.mystic
                                   /.whole_tone

                                   /.harmonic_major
                                   /.harmonic_minor
                                   /.melodic_minor
                                   /.byzantine
                                   /.enigmatic
                                   /.hungarian
                                   /.neapolitan
                                   /.oriental
                                   /.romanian_minor
                                   /.spanish_gypsy
                                   /.persian
                                   /.arabic
                                   /.super_locrian
                                   /.hindu
                                   /.lydian_dominant
                                   /.major
                                   /.minor

                                   /.diminished
                                   /.bebop
                                   /.algerian
                                   /.eight_tone

                                   /.nine_tone
                                   )]
  (def .public random
    (Random /.Scale)
    (let [options (is (Sequence /.Scale)
                      (sequence <options>))
          amount (sequence.size options)]
      (do [! random.monad]
        [choice (of ! each (nat.% amount) random.nat)]
        (in (maybe.trusted (sequence.item choice options))))))
  
  (def .public test
    Test
    (<| (_.covering /._)
        (do [! random.monad]
          [expected ..random
           interval (random.only (|>> (nat.= interval.perfect_unison)
                                      not)
                                 intervalT.random)])
        (_.for [/.Scale])
        (`` (all _.and
                 (_.for [/.equivalence]
                        (equivalenceT.spec /.equivalence ..random))
                 (_.for [/.hash]
                        (hashT.spec /.hash ..random))

                 (_.coverage [/.size]
                   (nat.> 0 (/.size expected)))
                 (_.coverage [/.intervals /.scale]
                   (|> expected
                       /.intervals
                       /.scale
                       (try#each (of /.equivalence = expected))
                       (try.else false)))
                 (_.coverage [/.not_an_octave]
                   (|> expected
                       /.intervals
                       (list.partial interval)
                       /.scale
                       (|.when
                         {try.#Failure error}
                         (exception.match? /.not_an_octave error)

                         _
                         false)))
                 (_.coverage [/.has_perfect_unison]
                   (|> expected
                       /.intervals
                       (list.partial interval.perfect_unison)
                       /.scale
                       (|.when
                         {try.#Failure error}
                         (exception.match? /.has_perfect_unison error)

                         _
                         false)))
                 (_.coverage [<options>]
                   (let [options (is (List /.Scale)
                                     (list <options>))
                         uniques (set.of_list /.hash options)]
                     (nat#= (list.size options)
                            (set.size uniques))))
                 (,, (with_template [<original> <alternative>]
                       [(_.coverage [<alternative>]
                          (same? <original>
                                 <alternative>))]

                       [/.super_locrian /.dominant_altered]
                       [/.super_locrian /.diminished_whole_tone]

                       [/.diminished /.octatonic]
                       [/.suspended_pentatonic /.egyptian]
                       [/.minor /.ethiopian_geez]
                       [/.major /.ethiopian_ararai]
                       [/.mystic /.prometheus]
                       [/.melodic_minor /.hawaiian]
                       [/.blues_major /.japanese_yo]
                       ))
                 )))))
