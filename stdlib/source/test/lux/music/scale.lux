... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [control
    ["|" pipe]
    ["[0]" maybe]
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    [collection
     ["[0]" list]
     ["[0]" set]
     ["[0]" sequence (.only Sequence sequence)]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["[0]" natural]]]
   [meta
    [macro
     ["[0]" template]
     ["[0]" expansion]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]
  [//
   ["[0]" interval (.only)
    ["[1]T" \\test]]]])

(expansion.let [,bundles (these [[[/.chromatic]

                                  [/.major_pentatonic]
                                  [/.suspended_pentatonic]
                                  [/.blues_minor]
                                  [/.blues_major]
                                  [/.minor_pentatonic]
                                  [/.balinese]
                                  [/.chinese]
                                  [/.japanese_hirajoshi]
                                  [/.japanese_iwato]
                                  [/.japanese_in_sen]

                                  [/.blues]
                                  [/.augmented]
                                  [/.iberian]
                                  [/.mystic]
                                  [/.whole_tone]]]

                                [[[/.harmonic_major]
                                  [/.harmonic_minor]
                                  [/.melodic_minor]
                                  [/.byzantine]
                                  [/.enigmatic]
                                  [/.hungarian]
                                  [/.neapolitan]
                                  [/.oriental]
                                  [/.romanian_minor]
                                  [/.spanish_gypsy]
                                  [/.persian]
                                  [/.arabic]
                                  [/.super_locrian]
                                  [/.hindu]
                                  [/.lydian_dominant]
                                  [/.major]
                                  [/.minor]]]

                                [[[/.diminished]
                                  [/.bebop]
                                  [/.algerian]
                                  [/.eight_tone]

                                  [/.nine_tone]]]
                                )
                <degrees> (these /.tonic
                                 /.super_tonic
                                 /.mediant
                                 /.sub_dominant
                                 /.dominant
                                 /.sub_mediant
                                 /.leading
                                 )]
  (these (the all_options
           (List /.Scale)
           (`` (`` (`` (list.together (list (,, (template.with [,options]
                                                  [(is (List /.Scale)
                                                       (list (,, (expansion.let [,options' (template.spliced ,options)]
                                                                   (,, (template.with [,name]
                                                                         [,name]

                                                                         ,options'
                                                                         ))))))]
                                                  
                                                  ,bundles))))))))

         (the .public random
           (Random /.Scale)
           (let [options (is (Sequence /.Scale)
                             (sequence.of_list all_options))
                 amount (sequence.size options)]
             (do [! random.monad]
               [choice (of ! each (natural.% amount) random.natural)]
               (in (maybe.trusted (sequence.item choice options))))))
         
         (the .public test
           Test
           (<| (_.covering /._)
               (do [! random.monad]
                 [expected ..random
                  interval (random.only (|>> (natural.= interval.perfect_unison)
                                             not)
                                        intervalT.random)
                  motion random.integer])
               (all _.and
                    (<| (_.for [/.Scale])
                        (`` (all _.and
                                 (_.for [/.equivalence]
                                        (equivalenceT.spec /.equivalence ..random))
                                 (_.for [/.hash]
                                        (hashT.spec /.hash ..random))

                                 (_.coverage [/.degrees]
                                   (natural.> 0 (/.degrees expected)))
                                 (_.coverage [/.intervals /.scale]
                                   (|> expected
                                       /.intervals
                                       /.scale
                                       (try#each (of /.equivalence = expected))
                                       (try.else false)))
                                 (_.coverage [/.not_an_octave]
                                   (|> expected
                                       /.intervals
                                       (list.partial interval)
                                       /.scale
                                       (|.when
                                         {try.#Failure error}
                                         (exception.is? /.not_an_octave error)

                                         _
                                         false)))
                                 (_.coverage [/.has_perfect_unison]
                                   (|> expected
                                       /.intervals
                                       (list.partial interval.perfect_unison)
                                       /.scale
                                       (|.when
                                         {try.#Failure error}
                                         (exception.is? /.has_perfect_unison error)

                                         _
                                         false)))
                                 (,, (template.with [,options]
                                       [(`` (`` (_.coverage [(,, (expansion.let [,options' (template.spliced ,options)]
                                                                   (,, (template.with [,name]
                                                                         [,name]

                                                                         ,options'
                                                                         ))))]
                                                  (let [uniques (set.of_list /.hash ..all_options)]
                                                    (natural.= (list.size ..all_options)
                                                               (set.size uniques))))))]
                                       
                                       ,bundles))
                                 (,, (template.with [<original> <alternative>]
                                       [(_.coverage [<alternative>]
                                          (same? <original>
                                                 <alternative>))]

                                       [/.super_locrian /.dominant_altered]
                                       [/.super_locrian /.diminished_whole_tone]

                                       [/.diminished /.octatonic]
                                       [/.suspended_pentatonic /.egyptian]
                                       [/.minor /.ethiopian_geez]
                                       [/.major /.ethiopian_ararai]
                                       [/.mystic /.prometheus]
                                       [/.melodic_minor /.hawaiian]
                                       [/.blues_major /.japanese_yo]
                                       [/.byzantine /.double_harmonic]
                                       ))
                                 )))
                    (<| (_.for [/.Degree])
                        (`` (all _.and
                                 (_.coverage [<degrees>]
                                   (let [options (is (List /.Degree)
                                                     (list <degrees>))
                                         uniques (set.of_list natural.hash options)]
                                     (natural.= (list.size options)
                                                (set.size uniques))))
                                 (,, (template.with [<original> <alternative>]
                                       [(_.coverage [<alternative>]
                                          (same? <original>
                                                 <alternative>))]

                                       [/.leading /.sub_tonic]
                                       ))
                                 )))
                    (<| (_.for [/.Motion])
                        (`` (all _.and
                                 (_.coverage [/.null? /.step? /.skip?]
                                   (or (and (/.null? motion)
                                            (not (/.step? motion))
                                            (not (/.skip? motion)))
                                       (and (not (/.null? motion))
                                            (/.step? motion)
                                            (not (/.skip? motion)))
                                       (and (not (/.null? motion))
                                            (not (/.step? motion))
                                            (/.skip? motion))))
                                 (,, (template.with [<original> <alternative>]
                                       [(_.coverage [<alternative>]
                                          (same? <original>
                                                 <alternative>))]

                                       [/.step? /.conjunct?]
                                       [/.skip? /.leap?]
                                       [/.skip? /.disjunct?]
                                       ))
                                 )))
                    )))))
