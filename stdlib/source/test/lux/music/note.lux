... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]]
   [data
    [collection
     ["[0]" list]
     ["[0]" set]
     ["[0]" sequence (.only Sequence sequence)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" nat (.use "[1]#[0]" equivalence)]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(with_expansions [<options> (these /./64
                                   /./32
                                   /./16
                                   /./08
                                   /./04
                                   /./02
                                   /./01
                                   )]
  (these (the .public random
           (Random /.Value)
           (let [options (is (Sequence /.Value)
                             (sequence <options>))
                 amount (sequence.size options)]
             (do [! random.monad]
               [choice (of ! each (nat.% amount) random.nat)]
               (in (maybe.trusted (sequence.item choice options))))))
         
         (the .public test
           Test
           (<| (_.covering /._)
               (do [! random.monad]
                 [un_dotted (random.only (nat.> /./32)
                                         ..random)])
               (_.for [/.Tick /.Value /.Rest])
               (`` (all _.and
                        (_.coverage [<options>]
                          (let [options (is (List /.Value)
                                            (list <options>))
                                uniques (set.of_list nat.hash options)]
                            (nat#= (list.size options)
                                   (set.size uniques))))
                        (,, (with_template [<name> <previous>]
                              [(_.coverage [<name>]
                                 (nat.> (<previous> un_dotted)
                                        (<name> un_dotted)))]

                              [/.dot_1 |>]
                              [/.dot_2 /.dot_1]
                              [/.dot_3 /.dot_2]
                              ))
                        (_.coverage [/./03]
                          (list.every? (function (_ it)
                                         (nat.< it
                                                (/./03 it)))
                                       (list <options>)))
                        (_.coverage [/.Node
                                     /.#pitch /.#value]
                          true)
                        ))))))
