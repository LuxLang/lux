... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence (.only Equivalence)
     ["[1]T" \\test]]]
   [control
    ["[0]" maybe]]
   [data
    ["[0]" bit]
    ["[0]" text]
    [collection
     ["[0]" list]
     ["[0]" sequence (.only sequence)]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [macro
    ["[0]" template]
    ["[0]" expansion]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" interval (.only)
     ["[1]T" \\test]]
    ["[0]" pitch
     ["[1]T" \\test]]]]])

(the .public random
  (Random /.Chord)
  (let [options (sequence /.monad

                          /.power

                          /.major_triad /.minor_triad
                          /.augmented_triad /.diminished_triad
                          /.suspended_2 /.suspended_4

                          /.major_7th /.dominant_7th
                          /.minor_major_7th /.minor_7th
                          /.augmented_major_7th /.augmented_7th

                          /.dominant_9th /.dominant_minor_9th
                          /.minor_major_9th /.minor_9th
                          /.augmented_major_9th /.augmented_dominant_9th
                          )
        amount (sequence.size options)]
    (do [! random.monad]
      [choice (by ! each (n.% amount) random.natural)]
      (in (maybe.trusted (sequence.item choice options))))))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [left ..random
         right ..random
         interval intervalT.random
         pitch pitchT.random])
      (all _.and
           (<| (_.for [/.Chord])
               (`` (all _.and
                        (_.for [/.equivalence /.=]
                               (static.when (same? /.equivalence /.=)
                                 (equivalenceT.spec /.equivalence ..random)))

                        (_.coverage [/.injection]
                          (bit.= (by /.equivalence = left right)
                                 (text.= (/.injection left) (/.injection right))))
                        (_.coverage [/.size]
                          (n.> 0 (/.size left)))
                        (_.coverage [/.monad]
                          (n.= 1 (/.size /.monad)))
                        (_.coverage [/.power]
                          (n.= 2 (/.size /.power)))
                        (,, (template.with [<factors> <options>]
                              [(_.coverage <options>
                                 (loop (next [options (`` (list (,, (template.spliced <options>))))])
                                   (when options
                                     (list.partial head tail)
                                     (and (n.= <factors> (/.size head))
                                          (list.every? (|>> (by /.equivalence = head) not) tail)
                                          (next tail))
                                     
                                     (list)
                                     true)))]

                              [3 [/.major_triad /.minor_triad
                                  /.augmented_triad /.diminished_triad
                                  /.suspended_2 /.suspended_4]]
                              [4 [/.major_7th /.dominant_7th
                                  /.minor_major_7th /.minor_7th
                                  /.augmented_major_7th /.augmented_7th]]
                              [5 [/.dominant_9th /.dominant_minor_9th
                                  /.minor_major_9th /.minor_9th
                                  /.augmented_major_9th /.augmented_dominant_9th]]
                              ))
                        (_.coverage [/.poly]
                          (n.= (/.size (/.poly left right))
                               (n.+ (/.size left) (/.size right))))
                        (_.coverage [/.instance /.chord]
                          (|> left
                              (/.instance pitch)
                              /.chord
                              (by /.equivalence = left)))
                        (<| (_.for [/.Quality])
                            (all _.and
                                 (_.coverage [/.added]
                                   (n.= (++ (/.size left))
                                        (/.size (/.added interval left))))
                                 (_.coverage [/.major /.minor]
                                   (and (by /.equivalence =
                                            (/.added interval.major_3rd left)
                                            (/.major left))
                                        (by /.equivalence =
                                            (/.added interval.minor_3rd left)
                                            (/.minor left))))
                                 ))
                        )))
           (expansion.let [<factors> (these /.root
                                            /.third
                                            /.fifth
                                            /.sixth
                                            /.seventh
                                            /.ninth
                                            /.eleventh
                                            /.thirteenth
                                            )]
             (<| (_.for [/.Factor])
                 (`` (all _.and
                          (_.coverage [<factors>]
                            (let [options (is (List /.Factor)
                                              (list <factors>))
                                  uniques (set.of_list n.hash options)]
                              (n.= (list.size options)
                                   (set.size uniques))))
                          )))))))
