(.module:
  [lux #*
   [abstract/monad (#+ do)]
   [data
    [number
     ["n" nat]]
    [text
     ["%" format (#+ format)]]]
   [math
    ["r" random]]
   ["_" test (#+ Test)]]
  {1
   ["." / (#+ exception:)]})

(exception: an-exception)
(exception: another-exception)

(def: #export test
  (do r.monad
    [right r.nat
     wrong (r.filter (|>> (n.= right) not) r.nat)]
    (<| (_.context (%.name (name-of /.Exception)))
        ($_ _.and
            (_.test "Can catch exceptions."
                    (n.= right
                         (|> (/.throw an-exception [])
                             (/.catch an-exception (function (_ ex) right))
                             (/.otherwise (function (_ ex) wrong)))))
            (_.test "Can catch multiple exceptions."
                    (n.= right
                         (|> (/.throw another-exception [])
                             (/.catch an-exception (function (_ ex) wrong))
                             (/.catch another-exception (function (_ ex) right))
                             (/.otherwise (function (_ ex) wrong)))))
            (_.test "Can handle uncaught exceptions."
                    (n.= right
                         (|> (/.throw another-exception [])
                             (/.catch an-exception (function (_ ex) wrong))
                             (/.otherwise (function (_ ex) right)))))))))
