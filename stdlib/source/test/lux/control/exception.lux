(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" text (.open: "[1]#[0]" equivalence)
     ["%" format (.only format)]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" / (.only exception:)
   [//
    ["[0]" try (.only Try)]]]])

(exception: an_exception)
(exception: another_exception)

(def: label "YOLO")
(exception: (custom_exception [value Nat])
  (/.report label (%.nat value)))

(def: .public test
  Test
  (do [! random.monad]
    [expected random.nat
     wrong (|> random.nat (random.only (|>> (n.= expected) not)))
     assertion_succeeded? random.bit
     .let [report_element (# ! each %.nat random.nat)]
     field0 report_element
     value0 report_element
     field1 report_element
     value1 report_element]
    (<| (_.covering /._)
        (_.for [/.Exception])
        (all _.and
             (_.coverage [/.except]
               (case (/.except ..an_exception [])
                 {try.#Success _} false
                 {try.#Failure _} true))
             (_.coverage [/.error]
               (case (/.except ..an_exception [])
                 {try.#Success _}
                 false
                 
                 {try.#Failure message}
                 (text#= message (/.error ..an_exception []))))
             (_.coverage [/.match?]
               (/.match? ..an_exception
                         (/.error ..an_exception [])))
             (_.coverage [/.assertion]
               (case (/.assertion ..an_exception [] assertion_succeeded?)
                 {try.#Success _}
                 assertion_succeeded?
                 
                 {try.#Failure message}
                 (and (not assertion_succeeded?)
                      (text#= message (/.error ..an_exception [])))))
             (_.coverage [/.when]
               (and (n.= expected
                         (|> (/.except ..an_exception [])
                             (/.when ..an_exception (function (_ ex) expected))
                             (/.otherwise (function (_ ex) wrong))))
                    (n.= expected
                         (|> (/.except ..another_exception [])
                             (/.when ..an_exception (function (_ ex) wrong))
                             (/.when ..another_exception (function (_ ex) expected))
                             (/.otherwise (function (_ ex) wrong))))))
             (_.coverage [/.otherwise]
               (n.= expected
                    (|> (/.except ..another_exception [])
                        (/.when ..an_exception (function (_ ex) wrong))
                        (/.otherwise (function (_ ex) expected)))))
             (_.coverage [/.report]
               (let [report (/.report field0 value0
                                      field1 value1)]
                 (and (text.contains? field0 report)
                      (text.contains? value0 report)
                      (text.contains? field1 report)
                      (text.contains? value1 report))))
             (_.coverage [/.listing]
               (let [enumeration (/.listing %.text (list field0 value0 field1 value1))]
                 (and (text.contains? field0 enumeration)
                      (text.contains? value0 enumeration)
                      (text.contains? field1 enumeration)
                      (text.contains? value1 enumeration))))
             (_.coverage [/.with]
               (and (case (/.with ..an_exception [] {try.#Success expected})
                      {try.#Success actual} (n.= expected actual)
                      {try.#Failure _} false)
                    (case (/.with ..an_exception [] {try.#Failure ""})
                      {try.#Success _} false
                      {try.#Failure message} (text#= message (/.error ..an_exception [])))
                    (case (/.with ..an_exception []
                            (is (Try Nat)
                                (/.except ..another_exception [])))
                      {try.#Success _}
                      false
                      
                      {try.#Failure message}
                      (and (text.contains? (/.error ..an_exception []) message)
                           (text.contains? (/.error ..another_exception []) message)))))
             (_.coverage [/.exception:]
               (case (/.except ..custom_exception [expected])
                 {try.#Success _}
                 false
                 
                 {try.#Failure message}
                 (and (text.contains? ..label message)
                      (text.contains? (%.nat expected) message))))
             ))))
