(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [data
    [number
     ["n" nat]]
    ["." text ("#@." equivalence)
     ["%" format (#+ format)]]]
   [math
    ["." random]]
   ["_" test (#+ Test)]]
  {1
   ["." / (#+ exception:)
    [//
     ["." try (#+ Try)]]]})

(exception: an-exception)
(exception: another-exception)

(def: label "YOLO")
(exception: (custom-exception {value Nat})
  (/.report [label (%.nat value)]))

(def: #export test
  Test
  (do {@ random.monad}
    [expected random.nat
     wrong (|> random.nat (random.filter (|>> (n.= expected) not)))
     assertion-succeeded? random.bit
     #let [report-element (:: @ map %.nat random.nat)]
     field0 report-element
     value0 report-element
     field1 report-element
     value1 report-element]
    (<| (_.covering /._)
        (_.with-cover [/.Exception])
        ($_ _.and
            (_.cover [/.return]
                     (case (/.return expected)
                       (#try.Success actual) (n.= expected actual)
                       (#try.Failure _) false))
            (_.cover [/.throw]
                     (case (/.throw ..an-exception [])
                       (#try.Success _) false
                       (#try.Failure _) true))
            (_.cover [/.construct]
                     (case (/.throw ..an-exception [])
                       (#try.Success _)
                       false
                       
                       (#try.Failure message)
                       (text@= message (/.construct ..an-exception []))))
            (_.cover [/.match?]
                     (/.match? ..an-exception
                               (/.construct ..an-exception [])))
            (_.cover [/.assert]
                     (case (/.assert ..an-exception [] assertion-succeeded?)
                       (#try.Success _)
                       assertion-succeeded?
                       
                       (#try.Failure message)
                       (and (not assertion-succeeded?)
                            (text@= message (/.construct ..an-exception [])))))
            (_.cover [/.catch]
                     (and (n.= expected
                               (|> (/.throw ..an-exception [])
                                   (/.catch ..an-exception (function (_ ex) expected))
                                   (/.otherwise (function (_ ex) wrong))))
                          (n.= expected
                               (|> (/.throw ..another-exception [])
                                   (/.catch ..an-exception (function (_ ex) wrong))
                                   (/.catch ..another-exception (function (_ ex) expected))
                                   (/.otherwise (function (_ ex) wrong))))))
            (_.cover [/.otherwise]
                     (n.= expected
                          (|> (/.throw ..another-exception [])
                              (/.catch ..an-exception (function (_ ex) wrong))
                              (/.otherwise (function (_ ex) expected)))))
            (_.cover [/.report]
                     (let [report (/.report [field0 value0]
                                            [field1 value1])]
                       (and (text.contains? field0 report)
                            (text.contains? value0 report)
                            (text.contains? field1 report)
                            (text.contains? value1 report))))
            (_.cover [/.enumerate]
                     (let [enumeration (/.enumerate %.text (list field0 value0 field1 value1))]
                       (and (text.contains? field0 enumeration)
                            (text.contains? value0 enumeration)
                            (text.contains? field1 enumeration)
                            (text.contains? value1 enumeration))))
            (_.cover [/.with]
                     (and (case (/.with ..an-exception [] (#try.Success expected))
                            (#try.Success actual) (n.= expected actual)
                            (#try.Failure _) false)
                          (case (/.with ..an-exception [] (#try.Failure ""))
                            (#try.Success _) false
                            (#try.Failure message) (text@= message (/.construct ..an-exception [])))
                          (case (/.with ..an-exception []
                                  (: (Try Nat)
                                     (/.throw ..another-exception [])))
                            (#try.Success _)
                            false
                            
                            (#try.Failure message)
                            (and (text.contains? (/.construct ..an-exception []) message)
                                 (text.contains? (/.construct ..another-exception []) message)))))
            (_.cover [/.exception:]
                     (case (/.throw ..custom-exception [expected])
                       (#try.Success _)
                       false
                       
                       (#try.Failure message)
                       (and (text.contains? ..label message)
                            (text.contains? (%.nat expected) message))))
            ))))
