(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [equivalence (#+)]
    [hash (#+ Hash)]
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [control
    [security
     ["!" capability]]]
   [data
    ["." text ("#\." equivalence)]
    [number
     ["n" nat]]]
   [math
    ["." random]]]
  {1
   ["." / (#+ Context Privacy Can-Conceal Can-Reveal Privilege Private)]})

(def: (injection can-conceal)
  (All [label]
    (-> (Can-Conceal label) (Injection (All [value] (Private value label)))))
  (!.use can-conceal))

(def: (comparison can-reveal)
  (All [label]
    (-> (Can-Reveal label) (Comparison (All [value] (Private value label)))))
  (function (_ == left right)
    (== (!.use can-reveal left)
        (!.use can-reveal right))))

(type: Password (Private Text))

(signature: (Policy %)
  (: (Hash (Password %))
     &hash)

  (: (-> Text (Password %))
     password)

  (: (Privilege Privacy %)
     privilege))

(def: (policy _)
  (Ex [%] (-> Any (Policy %)))
  (/.with-policy
    (: (Context Privacy Policy)
       (function (_ (^@ privilege (^open "%\.")))
         (structure
          (def: &hash
            (structure
             (def: &equivalence
               (structure (def: (= reference sample)
                            (text\= (!.use %\can-downgrade reference)
                                    (!.use %\can-downgrade sample)))))
             (def: hash
               (|>> (!.use %\can-downgrade)
                    (:: text.hash hash)))))
          
          (def: password
            (!.use %\can-upgrade))

          (def: privilege
            privilege))))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.Policy
                     /.Can-Upgrade /.Can-Downgrade])
      (do random.monad
        [#let [policy-0 (policy [])]
         raw-password (random.ascii 10)
         #let [password (:: policy-0 password raw-password)]]
        ($_ _.and
            (_.with-cover [/.Privacy /.Private /.Can-Conceal /.Can-Reveal
                           /.Safety /.Safe /.Can-Trust /.Can-Distrust]
              ($_ _.and
                  (_.with-cover [/.functor]
                    ($functor.spec (..injection (:: policy-0 can-upgrade)) (..comparison (:: policy-0 can-downgrade)) /.functor))
                  (_.with-cover [/.apply]
                    ($apply.spec (..injection (:: policy-0 can-upgrade)) (..comparison (:: policy-0 can-downgrade)) /.apply))
                  (_.with-cover [/.monad]
                    ($monad.spec (..injection (:: policy-0 can-upgrade)) (..comparison (:: policy-0 can-downgrade)) /.monad))))

            (_.cover [/.Privilege /.Context /.with-policy]
                     (and (:: policy-0 = password password)
                          (n.= (:: text.hash hash raw-password)
                               (:: policy-0 hash password))))
            (let [policy-1 (policy [])
                  delegate (/.delegation (:: policy-0 can-downgrade) (:: policy-1 can-upgrade))]
              (_.cover [/.Delegation /.delegation]
                       (:: policy-1 = (delegate password) (delegate password))))
            ))))
