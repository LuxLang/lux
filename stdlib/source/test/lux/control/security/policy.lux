(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [hash (#+ Hash)]
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [control
    [security
     ["!" capability]]]
   [data
    ["." text ("#\." equivalence)]]
   [math
    ["." random]
    [number
     ["n" nat]]]]
  {1
   ["." / (#+ Context Privacy Can_Conceal Can_Reveal Privilege Private)]})

(def: (injection can_conceal)
  (All [label]
    (-> (Can_Conceal label) (Injection (All [value] (Private value label)))))
  (!.use can_conceal))

(def: (comparison can_reveal)
  (All [label]
    (-> (Can_Reveal label) (Comparison (All [value] (Private value label)))))
  (function (_ == left right)
    (== (!.use can_reveal left)
        (!.use can_reveal right))))

(type: Password (Private Text))

(signature: (Policy %)
  (: (Hash (Password %))
     &hash)

  (: (-> Text (Password %))
     password)

  (: (Privilege Privacy %)
     privilege))

(def: (policy _)
  (Ex [%] (-> Any (Policy %)))
  (/.with_policy
    (: (Context Privacy Policy)
       (function (_ (^@ privilege (^open "%\.")))
         (structure
          (def: &hash
            (structure
             (def: &equivalence
               (structure (def: (= reference sample)
                            (text\= (!.use %\can_downgrade reference)
                                    (!.use %\can_downgrade sample)))))
             (def: hash
               (|>> (!.use %\can_downgrade)
                    (\ text.hash hash)))))
          
          (def: password
            (!.use %\can_upgrade))

          (def: privilege
            privilege))))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Policy
              /.Can_Upgrade /.Can_Downgrade])
      (do random.monad
        [#let [policy_0 (policy [])]
         raw_password (random.ascii 10)
         #let [password (\ policy_0 password raw_password)]]
        ($_ _.and
            (_.for [/.Privacy /.Private /.Can_Conceal /.Can_Reveal
                    /.Safety /.Safe /.Can_Trust /.Can_Distrust]
                   ($_ _.and
                       (_.for [/.functor]
                              ($functor.spec (..injection (\ policy_0 can_upgrade)) (..comparison (\ policy_0 can_downgrade)) /.functor))
                       (_.for [/.apply]
                              ($apply.spec (..injection (\ policy_0 can_upgrade)) (..comparison (\ policy_0 can_downgrade)) /.apply))
                       (_.for [/.monad]
                              ($monad.spec (..injection (\ policy_0 can_upgrade)) (..comparison (\ policy_0 can_downgrade)) /.monad))))

            (_.cover [/.Privilege /.Context /.with_policy]
                     (and (\ policy_0 = password password)
                          (n.= (\ text.hash hash raw_password)
                               (\ policy_0 hash password))))
            (let [policy_1 (policy [])
                  delegate (/.delegation (\ policy_0 can_downgrade) (\ policy_1 can_upgrade))]
              (_.cover [/.Delegation /.delegation]
                       (\ policy_1 = (delegate password) (delegate password))))
            ))))
