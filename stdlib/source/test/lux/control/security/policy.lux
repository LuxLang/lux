(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [hash (.only Hash)]
    [monad (.only do)]
    [\\specification
     ["$[0]" functor (.only Injection Comparison)]
     ["$[0]" apply]
     ["$[0]" monad]]]
   [data
    ["[0]" text (.open: "[1]#[0]" equivalence)]]
   [macro
    ["^" pattern]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" / (.only Context Privacy Can_Conceal Can_Reveal Privilege Private)]])

(def (injection can_conceal)
  (All (_ label)
    (-> (Can_Conceal label) (Injection (All (_ value) (Private value label)))))
  can_conceal)

(def (comparison can_reveal)
  (All (_ label)
    (-> (Can_Reveal label) (Comparison (All (_ value) (Private value label)))))
  (function (_ == left right)
    (== (can_reveal left)
        (can_reveal right))))

(type: Password
  (Private Text))

(type: (Policy %)
  (Interface
   (is (Hash (Password %))
       &hash)

   (is (-> Text (Password %))
       password)

   (is (Privilege Privacy %)
       privilege)))

(def (policy _)
  (Ex (_ %) (-> Any (Policy %)))
  (/.with_policy
    (is (Context Privacy Policy)
        (function (_ (^.let privilege (open "%[0]")))
          (implementation
           (def &hash
             (implementation
              (def equivalence
                (implementation
                 (def (= reference sample)
                   (text#= (%#can_downgrade reference)
                           (%#can_downgrade sample)))))
              (def hash
                (|>> %#can_downgrade
                     (at text.hash hash)))))
           
           (def password
             %#can_upgrade)

           (def privilege
             privilege))))))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Policy
              /.Can_Upgrade /.Can_Downgrade])
      (do random.monad
        [.let [policy_0 (policy [])]
         raw_password (random.ascii 10)
         .let [password (at policy_0 password raw_password)]]
        (all _.and
             (_.for [/.Privacy /.Private /.Can_Conceal /.Can_Reveal
                     /.Safety /.Safe /.Can_Trust /.Can_Distrust]
                    (all _.and
                         (_.for [/.functor]
                                ($functor.spec (..injection (at policy_0 #can_upgrade)) (..comparison (at policy_0 #can_downgrade)) /.functor))
                         (_.for [/.apply]
                                ($apply.spec (..injection (at policy_0 #can_upgrade)) (..comparison (at policy_0 #can_downgrade)) /.apply))
                         (_.for [/.monad]
                                ($monad.spec (..injection (at policy_0 #can_upgrade)) (..comparison (at policy_0 #can_downgrade)) /.monad))))

             (_.coverage [/.Privilege /.Context /.with_policy]
               (and (at policy_0 = password password)
                    (n.= (at text.hash hash raw_password)
                         (at policy_0 hash password))))
             (let [policy_1 (policy [])
                   delegate (/.delegation (at policy_0 #can_downgrade) (at policy_1 #can_upgrade))]
               (_.coverage [/.Delegation /.delegation]
                 (at policy_1 = (delegate password) (delegate password))))
             ))))
