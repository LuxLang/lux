(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    [macro
     [syntax (.only syntax)]
     ["[0]" expansion]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def macro_error
  (syntax (_ [macro <code>.any])
    (function (_ compiler)
      (when ((expansion.complete macro) compiler)
        {try.#Failure error}
        {try.#Success [compiler (list (code.text error))]}
        
        {try.#Success _}
        {try.#Failure "OOPS!"}))))

(/.def (+ left right)
  (-> Nat Nat Nat)
  (n.+ left right))

(def .public test
  Test
  (do [! random.monad]
    [p0 random.nat
     p1 random.nat]
    (<| (_.covering /._)
        (all _.and
             (_.coverage [/.def]
               (n.= (n.+ p0 p1)
                    (+ left p0
                       right p1)))
             (_.coverage [/.duplicate_parameters]
               (text.contains? (the exception.#label /.duplicate_parameters)
                               (macro_error
                                (/.def .public (- _ _)
                                  (-> Nat (List Nat) Nat)
                                  (undefined)))))
             (_.coverage [/.invalid_parameters]
               (and (text.contains? (the exception.#label /.invalid_parameters)
                                    (macro_error
                                     (+ left p0)))
                    (text.contains? (the exception.#label /.invalid_parameters)
                                    (macro_error
                                     (+ right p1)))
                    (text.contains? (the exception.#label /.invalid_parameters)
                                    (macro_error
                                     (+ left p0
                                        right p1
                                        yolo p0)))
                    (text.contains? (the exception.#label /.invalid_parameters)
                                    (macro_error
                                     (+ left p0
                                        yolo p0)))))
             ))))
