(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    [\\specification
     ["$[0]" monad]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def injection
  (Injection /.Trampoline)
  (|>> /.return))

(def comparison
  (Comparison /.Trampoline)
  (function (_ == left right)
    (== (/.result left) (/.result right))))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Trampoline])
      (do [! random.monad]
        [expected random.nat
         left random.nat
         right random.nat])
      (all _.and
           (_.for [/.functor]
                  (functorT.spec ..injection ..comparison /.functor))
           (_.for [/.monad]
                  ($monad.spec ..injection ..comparison /.monad))
           
           (_.for [/.result]
                  (all _.and
                       (_.coverage [/.#Return /.return]
                         (|> (/.return expected)
                             /.result
                             (same? expected)))
                       (_.coverage [/.#Jump /.jump]
                         (with_expansions [<expected> (n.+ left right)]
                           (|> (/.jump (/.return <expected>))
                               /.result
                               (n.= <expected>))))
                       ))
           )))
