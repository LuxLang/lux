(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" /]])

(def: .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected random.nat])
      (all _.and
           (_.coverage [/.pre /.pre_condition_failed]
             (case (try (/.pre (n.even? expected)
                               true))
               {try.#Success output}
               output
               
               {try.#Failure error}
               (and (text.contains? (the exception.#label /.pre_condition_failed)
                                    error)
                    (not (n.even? expected)))))
           (_.coverage [/.post /.post_condition_failed]
             (case (try (/.post n.odd?
                                expected))
               {try.#Success actual}
               (same? expected actual)
               
               {try.#Failure error}
               (and (text.contains? (the exception.#label /.post_condition_failed)
                                    error)
                    (not (n.odd? expected)))))
           )))
