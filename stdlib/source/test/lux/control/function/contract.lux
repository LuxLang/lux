(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    [abstract
     [monad {"+" [do]}]]
    [control
     ["." try]
     ["." exception]]
    [data
     ["." text]]
    [math
     ["." random]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /]])

(def: .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected random.nat])
      ($_ _.and
          (_.cover [/.pre /.pre_condition_failed]
                   (case (try (/.pre (n.even? expected)
                                     true))
                     (#try.Success output)
                     output
                     
                     (#try.Failure error)
                     (and (text.contains? (value@ #exception.label /.pre_condition_failed)
                                          error)
                          (not (n.even? expected)))))
          (_.cover [/.post /.post_condition_failed]
                   (case (try (/.post n.odd?
                                      expected))
                     (#try.Success actual)
                     (same? expected actual)
                     
                     (#try.Failure error)
                     (and (text.contains? (value@ #exception.label /.post_condition_failed)
                                          error)
                          (not (n.odd? expected)))))
          )))
