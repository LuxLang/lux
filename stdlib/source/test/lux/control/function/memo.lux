(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [control
     ["." io (#+ IO)]
     ["." state (#+ State) ("#\." monad)]]
    [data
     ["." product]
     [collection
      ["." dictionary (#+ Dictionary)]
      ["." list ("#\." functor fold)]]]
    [math
     ["." random]
     [number
      ["n" nat]
      ["." i64]]]
    [time
     ["." instant]
     ["." duration (#+ Duration)]]]]
  [\\library
   ["." /
    ["/#" // #_
     ["#" mixin]]]])

(def: (fibonacci recur input)
  (/.Memo Nat Nat)
  (case input
    0 (state\in 0)
    1 (state\in 1)
    _ (do state.monad
        [output_1 (recur (n.- 1 input))
         output_2 (recur (n.- 2 input))]
        (in (n.+ output_1 output_2)))))

(def: (time function input)
  (All [i o] (-> (-> i o) i (IO [Duration o])))
  (do io.monad
    [before instant.now
     #let [output (function input)]
     after instant.now]
    (in [(instant.span before after)
         output])))

(def: milli_seconds
  (-> Duration Nat)
  (|>> (duration.query duration.milli_second) .nat))

## the wiggle room is there to account for GC pauses
## and other issues that might mess with duration
(def: wiggle_room
  Nat
  (i64.left_shifted 4 1))

(def: #export test
  Test
  (<| (_.covering /._)
      (do {! random.monad}
        [input (|> random.nat (\ ! map (|>> (n.% 5) (n.+ 21))))])
      (_.for [/.Memo])
      ($_ _.and
          (_.cover [/.closed /.none]
                   (io.run
                    (do io.monad
                      [#let [slow (/.none n.hash ..fibonacci)
                             fast (/.closed n.hash fibonacci)]
                       [slow_time slow_output] (..time slow input)
                       [fast_time fast_output] (..time fast input)
                       #let [same_output!
                             (n.= slow_output
                                  fast_output)

                             memo_is_faster!
                             (n.< (n.+ ..wiggle_room (milli_seconds slow_time))
                                  (milli_seconds fast_time))]]
                      (in (and same_output!
                               memo_is_faster!)))))
          (_.cover [/.open]
                   (io.run
                    (do io.monad
                      [#let [none (/.none n.hash ..fibonacci)
                             memory (dictionary.new n.hash)
                             open (/.open fibonacci)]
                       [none_time none_output] (..time none input)
                       [open_time [memory open_output]] (..time open [memory input])
                       [open_time/+1 _] (..time open [memory (inc input)])
                       #let [same_output!
                             (n.= none_output
                                  open_output)

                             memo_is_faster!
                             (n.< (n.+ ..wiggle_room (milli_seconds none_time))
                                  (milli_seconds open_time))

                             incrementalism_is_faster!
                             (n.< (n.+ ..wiggle_room (milli_seconds open_time))
                                  (milli_seconds open_time/+1))]]
                      (in (and same_output!
                               memo_is_faster!
                               incrementalism_is_faster!)))))
          (_.cover [/.memoization]
                   (let [memo (<| //.mixin
                                  (//.inherit /.memoization)
                                  (: (//.Mixin Nat (State (Dictionary Nat Nat) Nat))
                                     (function (factorial delegate recur input)
                                       (case input
                                         (^or 0 1) (\ state.monad in 1)
                                         _ (do state.monad
                                             [output' (recur (dec input))]
                                             (in (n.* input output')))))))
                         expected (|> (list.indices input)
                                      (list\map inc)
                                      (list\fold n.* 1))
                         actual (|> (memo input)
                                    (state.run (dictionary.new n.hash))
                                    product.right)]
                     (n.= expected actual)))
          )))
