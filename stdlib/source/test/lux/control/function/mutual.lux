(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" bit (.open: "[1]#[0]" equivalence)]
    [text
     ["%" format (.only format)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" /]])

(def: test_let
  Test
  (do [! random.monad]
    [sample (at ! each (n.% 10) random.nat)
     .let [expected (n.even? sample)]]
    (<| (_.coverage [/.let])
        (/.let [(even? number)
                (-> Nat Bit)
                (case number
                  0 true
                  _ (odd? (-- number)))

                (odd? number)
                (-> Nat Bit)
                (case number
                  0 false
                  _ (even? (-- number)))]
          (and (bit#= expected (even? sample))
               (bit#= (not expected) (odd? sample)))))))

(/.def:
  [(even? number)
   (-> Nat Bit)
   (case number
     0 true
     _ (odd? (-- number)))]

  [(odd? number)
   (-> Nat Bit)
   (case number
     0 false
     _ (even? (-- number)))])

(def: test_def
  Test
  (do [! random.monad]
    [sample (at ! each (n.% 10) random.nat)
     .let [expected (n.even? sample)]]
    (<| (_.coverage [/.def:])
        (and (bit#= expected (..even? sample))
             (bit#= (not expected) (..odd? sample))))))

(def: .public test
  Test
  (<| (_.covering /._)
      (all _.and
           ..test_let
           ..test_def
           )))
