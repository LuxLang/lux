(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [data
     ["." bit ("#\." equivalence)]
     [text
      ["%" format (#+ format)]]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /]])

(def: test_let
  Test
  (do {! random.monad}
    [sample (\ ! each (n.% 10) random.nat)
     .let [expected (n.even? sample)]]
    (<| (_.cover [/.let])
        (/.let [(even? number)
                (-> Nat Bit)
                (case number
                  0 true
                  _ (odd? (-- number)))

                (odd? number)
                (-> Nat Bit)
                (case number
                  0 false
                  _ (even? (-- number)))]
          (and (bit\= expected (even? sample))
               (bit\= (not expected) (odd? sample)))))))

(/.def:
  [(even? number)
   (-> Nat Bit)
   (case number
     0 true
     _ (odd? (-- number)))]

  [(odd? number)
   (-> Nat Bit)
   (case number
     0 false
     _ (even? (-- number)))])

(def: test_def
  Test
  (do {! random.monad}
    [sample (\ ! each (n.% 10) random.nat)
     .let [expected (n.even? sample)]]
    (<| (_.cover [/.def:])
        (and (bit\= expected (..even? sample))
             (bit\= (not expected) (..odd? sample))))))

(def: .public test
  Test
  (<| (_.covering /._)
      ($_ _.and
          ..test_let
          ..test_def
          )))
