... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    [macro
     [syntax (.only syntax)]
     ["[0]" expansion]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def macro_error
  (syntax (_ [macro <code>.any])
    (function (_ compiler)
      (when ((expansion.complete macro) compiler)
        {try.#Failure error}
        {try.#Success [compiler (list (code.text error))]}
        
        {try.#Success _}
        {try.#Failure "OOPS!"}))))

(/.def (+ left right extra)
  (-> Nat Nat (List Nat) Nat)
  (list#mix n.+ (n.+ left right) extra))

(def .public test
  Test
  (do [! random.monad]
    [p0 random.nat
     p1 random.nat
     p2 random.nat
     p3 random.nat
     p4 random.nat
     p5 random.nat]
    (<| (_.covering /._)
        (all _.and
             (_.coverage [/.def]
               (and (n.= (all n.+ p0 p1)
                         (+ p0 p1))
                    (n.= (all n.+ p0 p1 p2)
                         (+ p0 p1 p2))
                    (n.= (all n.+ p0 p1 p2 p3)
                         (+ p0 p1 p2 p3))
                    (n.= (all n.+ p0 p1 p2 p3 p4)
                         (+ p0 p1 p2 p3 p4))
                    (n.= (all n.+ p0 p1 p2 p3 p4 p5)
                         (+ p0 p1 p2 p3 p4 p5))))
             (_.coverage [/.duplicate_parameters]
               (text.contains? (its exception.#label /.duplicate_parameters)
                               (macro_error
                                (/.def .public (- _ _)
                                  (-> Nat (List Nat) Nat)
                                  (undefined)))))
             (_.coverage [/.must_have_rest_parameter]
               (text.contains? (its exception.#label /.must_have_rest_parameter)
                               (macro_error
                                (/.def .public (-)
                                  (-> Nat (List Nat) Nat)
                                  (undefined)))))
             ))))
