(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [equivalence (#+ Equivalence)]
     [predicate (#+ Predicate)]
     [monad (#+ do)]
     [\\specification
      ["$." monoid]]]
    [control
     ["." state (#+ State)]]
    [data
     ["." product]
     [collection
      ["." list ("#\." functor mix)]]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /]])

(def: .public test
  Test
  (<| (_.covering /._)
      (do {! random.monad}
        [input (|> random.nat (\ ! each (|>> (n.% 6) (n.+ 20))))
         dummy random.nat
         shift (|> random.nat (random.only (|>> (n.= dummy) not)))
         .let [equivalence (: (Equivalence (/.Mixin Nat Nat))
                              (implementation
                               (def: (= left right)
                                 (n.= ((/.fixed left) input)
                                      ((/.fixed right) input)))))
               generator (: (Random (/.Mixin Nat Nat))
                            (do !
                              [output random.nat]
                              (in (function (_ delegate recur input)
                                    output))))
               expected (|> (list.indices input)
                            (list\each ++)
                            (list\mix n.* 1))]])
      ($_ _.and
          (_.for [/.Mixin]
                 ($_ _.and
                     (_.for [/.monoid]
                            ($monoid.spec equivalence /.monoid generator))
                     
                     (_.cover [/.fixed]
                              (let [factorial (/.fixed
                                               (function (_ delegate recur input)
                                                 (case input
                                                   (^or 0 1) 1
                                                   _ (n.* input (recur (-- input))))))]
                                (n.= expected
                                     (factorial input))))
                     (_.cover [/.mixed]
                              (let [bottom (: (/.Mixin Nat Nat)
                                              (function (_ delegate recur input)
                                                (case input
                                                  (^or 0 1) 1
                                                  _ (delegate input))))
                                    multiplication (: (/.Mixin Nat Nat)
                                                      (function (_ delegate recur input)
                                                        (n.* input (recur (-- input)))))
                                    factorial (/.fixed (/.mixed bottom multiplication))]
                                (n.= expected
                                     (factorial input))))
                     (_.cover [/.nothing]
                              (let [loop (: (/.Mixin Nat Nat)
                                            (function (_ delegate recur input)
                                              (case input
                                                (^or 0 1) 1
                                                _ (n.* input (delegate (-- input))))))
                                    left (/.fixed (/.mixed /.nothing loop))
                                    right (/.fixed (/.mixed loop /.nothing))]
                                (and (n.= expected
                                          (left input))
                                     (n.= expected
                                          (right input)))))
                     (_.cover [/.advice]
                              (let [bottom (: (/.Mixin Nat Nat)
                                              (function (_ delegate recur input)
                                                1))
                                    bottom? (: (Predicate Nat)
                                               (function (_ input)
                                                 (case input
                                                   (^or 0 1) true
                                                   _ false)))
                                    multiplication (: (/.Mixin Nat Nat)
                                                      (function (_ delegate recur input)
                                                        (n.* input (recur (-- input)))))
                                    factorial (/.fixed (/.mixed (/.advice bottom? bottom)
                                                                multiplication))]
                                (n.= expected
                                     (factorial input))))
                     (_.cover [/.before]
                              (let [implant (: (-> Nat (State Nat []))
                                               (function (_ input)
                                                 (function (_ state)
                                                   [shift []])))
                                    meld (: (/.Mixin Nat (State Nat Nat))
                                            (function (_ delegate recur input)
                                              (function (_ state)
                                                [state (n.+ state input)])))
                                    function (/.fixed (/.mixed (/.before state.monad implant)
                                                               meld))]
                                (n.= (n.+ shift input)
                                     (|> input function (state.result dummy) product.right))))
                     (_.cover [/.after]
                              (let [implant (: (-> Nat Nat (State Nat []))
                                               (function (_ input output)
                                                 (function (_ state)
                                                   [shift []])))
                                    meld (: (/.Mixin Nat (State Nat Nat))
                                            (function (_ delegate recur input)
                                              (function (_ state)
                                                [state (n.+ state input)])))
                                    function (/.fixed (/.mixed (/.after state.monad implant)
                                                               meld))]
                                (n.= (n.+ dummy input)
                                     (|> input function (state.result dummy) product.right))))
                     ))
          (_.for [/.Recursive]
                 (_.cover [/.of_recursive]
                          (let [factorial (/.fixed
                                           (/.of_recursive
                                            (function (_ recur input)
                                              (case input
                                                (^or 0 1) 1
                                                _ (n.* input (recur (-- input)))))))]
                            (n.= expected
                                 (factorial input)))))
          )))
