(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random]
    [number
     ["i" int]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def !quadrance/2
  (template (_ m0 m1)
    [(i.+ (i.* m0 m0) (i.* m1 m1))]))

(def .public quadrance/2
  (/.inlined (_ m0 m1)
    (-> Int Int Int)
    (!quadrance/2 m0 m1)))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [.let [measurement (of ! each (i.% +1000) random.int)]
         m0 measurement
         m1 measurement])
      (all _.and
           (_.coverage [/.inlined]
             (i.= (..!quadrance/2 m0 m1)
                  (..quadrance/2 m0 m1)))
           )))
