(.module:
  [lux #*
   data/text/format
   ["_" test (#+ Test)]
   ["." function]
   [control
    [monad (#+ do)]]
   [math
    ["r" random (#+ Random)]]]
  {1
   ["." / (#+ Enum)]})

(def: #export (spec (^open "_@.") gen-sample)
  (All [a] (-> (Enum a) (Random a) Test))
  (do r.monad
    [sample gen-sample]
    (<| (_.context (%name (name-of /.Order)))
        ($_ _.and
            (_.test "Successor and predecessor are inverse functions."
                    (and (_@= (|> sample _@succ _@pred)
                              (function.identity sample))
                         (_@= (|> sample _@pred _@succ)
                              (function.identity sample))
                         (not (_@= (|> sample _@succ)
                                   (function.identity sample)))
                         (not (_@= (|> sample _@pred)
                                   (function.identity sample)))))
            ))))
