(.module:
  [lux #*
   [control
    [monad (#+ do)]]
   ["." function]
   [math
    ["r" random]]
   ["_" test (#+ Test)]]
  {1
   ["." / (#+ Functor)]})

(type: #export (Injection f)
  (All [a] (-> a (f a))))

(type: #export (Comparison f)
  (All [a]
    (-> (-> a a Bit)
        (-> (f a) (f a) Bit))))

(def: (identity (^open "_/.") injection comparison)
  (All [f] (-> (Functor f) (Injection f) (Comparison f) Test))
  (do r.monad
    [sample (:: @ map injection r.nat)]
    (_.test "Identity."
            ((comparison n/=)
             (_/map function.identity sample)
             sample))))

(def: (homomorphism (^open "_/.") injection comparison)
  (All [f] (-> (Functor f) (Injection f) (Comparison f) Test))
  (do r.monad
    [sample r.nat
     increase (:: @ map n/+ r.nat)]
    (_.test "Homomorphism."
            ((comparison n/=)
             (_/map increase (injection sample))
             (injection (increase sample))))))

(def: (composition (^open "_/.") injection comparison)
  (All [f] (-> (Functor f) (Injection f) (Comparison f) Test))
  (do r.monad
    [sample (:: @ map injection r.nat)
     increase (:: @ map n/+ r.nat)
     decrease (:: @ map n/- r.nat)]
    (_.test "Composition."
            ((comparison n/=)
             (|> sample (_/map increase) (_/map decrease))
             (|> sample (_/map (|>> increase decrease)))))))

(def: #export (laws functor injection comparison)
  (All [f] (-> (Functor f) (Injection f) (Comparison f) Test))
  (_.context "Functor laws."
             ($_ _.and
                 (..identity functor injection comparison)
                 (..homomorphism functor injection comparison)
                 (..composition functor injection comparison))))
