... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 ["/" \\library (.only)
  [//
   ["[0]" io (.only IO)]]]
 ["!" \\theorem]
 ["[0]" /
  ["[1][0]" dynamic]])

(the (injection value)
  (Injection (for_any (_ a r) (/.Scope r a)))
  (function (_ env)
    value))

(the comparison
  (Comparison (for_any (_ a r) (/.Scope r a)))
  (function (_ == left right)
    (== (/.value [] left) (/.value [] right))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Scope])
      (monad.let random.monad
        [sample random.natural
         factor random.natural]
        (all _.and
             (_.by_proof [/.functor]
                         [!.functor])
             (_.for [/.monad]
                    (monadT.spec ..injection ..comparison /.monad))

             (_.by_proof [/.value]
                         [!.value])
             (_.by_proof [/.context]
                         [!.context])
             (_.by_proof [/.local]
                         [!.local
                          !.identity_of_local
                          !.composition_of_local])
             (let [(open "io:[0]") io.monad]
               (_.coverage [/.With /.with /.lifted]
                 (|> (is (/.With Any IO Natural)
                         (monad.let (/.with io.monad)
                           [a (/.lifted (io:pure sample))
                            b (pure factor)]
                           (pure (n.x b a))))
                     (/.value [])
                     io.value
                     (n.= (n.x factor sample)))))

             /dynamic.test
             ))))
