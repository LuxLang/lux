... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" contract]
  ["[1][0]" memo]
  ["[1][0]" mixin]
  ["[1][0]" mutual]
  ["[1][0]" inline]
  ["[1][0]" predicate]
  ["[1][0]" variadic]
  ["[1][0]" named]
  ["[1][0]" trampoline]
  ["[1][0]" polymorphism
   ["[1]/[0]" type]
   ["[1]/[0]" predicate]
   ["[1]/[0]" context]
   ["[1]/[0]" subject]]])

(the .public test
  Test
  (do [! random.monad]
    [expected random.nat
     f0 (of ! each n.+ random.nat)
     f1 (of ! each n.* random.nat)
     dummy random.nat
     extra (|> random.nat (random.only (|>> (n.= expected) not)))]
    (<| (_.covering /._)
        (all _.and
             (let [equivalence (is (Equivalence (-> Nat Nat))
                                   (implementation
                                    (the (= left right)
                                      (n.= (left extra)
                                           (right extra)))))
                   generator (is (Random (-> Nat Nat))
                                 (of ! each n.- random.nat))]
               (_.for [/.monoid]
                      (monoidT.spec equivalence /.monoid generator)))
             
             (_.coverage [/.identity]
               (n.= expected
                    (/.identity expected)))
             (_.coverage [/.composite]
               (n.= (f0 (f1 expected))
                    ((/.composite f0 f1) expected)))
             (_.coverage [/.constant]
               (n.= expected
                    ((/.constant expected) dummy)))
             (_.coverage [/.flipped]
               (let [outcome ((/.flipped n.-) expected extra)]
                 (and (n.= (n.- extra expected)
                           outcome)
                      (not (n.= (n.- expected extra)
                                outcome)))))
             (_.coverage [/.on]
               (n.= (f0 extra)
                    (/.on extra f0)))

             /contract.test
             /memo.test
             /mixin.test
             /mutual.test
             /inline.test
             /predicate.test
             /variadic.test
             /named.test
             /trampoline.test
             /polymorphism/type.test
             /polymorphism/predicate.test
             /polymorphism/context.test
             /polymorphism/subject.test
             ))))
