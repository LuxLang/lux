(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [equivalence (#+ Equivalence)]
     [monad (#+ do)]
     [\\specification
      ["$." monoid]]]
    [data
     ["." text ("#!." equivalence)]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /]]
  ["." / #_
   ["#." contract]
   ["#." memo]
   ["#." mixin]
   ["#." mutual]])

(def: .public test
  Test
  (do {! random.monad}
    [expected random.nat
     f0 (\ ! map n.+ random.nat)
     f1 (\ ! map n.* random.nat)
     dummy random.nat
     extra (|> random.nat (random.only (|>> (n.= expected) not)))]
    (<| (_.covering /._)
        ($_ _.and
            (let [equivalence (: (Equivalence (-> Nat Nat))
                                 (implementation
                                  (def: (= left right)
                                    (n.= (left extra)
                                         (right extra)))))
                  generator (: (Random (-> Nat Nat))
                               (\ ! map n.- random.nat))]
              (_.for [/.monoid]
                     ($monoid.spec equivalence /.monoid generator)))
            
            (_.cover [/.identity]
                     (n.= expected
                          (/.identity expected)))
            (_.cover [/.compose]
                     (n.= (f0 (f1 expected))
                          ((/.compose f0 f1) expected)))
            (_.cover [/.constant]
                     (n.= expected
                          ((/.constant expected) dummy)))
            (_.cover [/.flipped]
                     (let [outcome ((/.flipped n.-) expected extra)]
                       (and (n.= (n.- extra expected)
                                 outcome)
                            (not (n.= (n.- expected extra)
                                      outcome)))))
            (_.cover [/.apply]
                     (n.= (f0 extra)
                          (/.apply extra f0)))

            /contract.test
            /memo.test
            /mixin.test
            /mutual.test
            ))))
