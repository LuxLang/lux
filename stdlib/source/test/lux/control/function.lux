(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]
    [monad (#+ do)]]
   [data
    ["." name]
    [number
     ["n" nat]]
    ["." text ("#@." equivalence)
     ["%" format (#+ format)]]]
   [math
    ["." random (#+ Random)]]
   ["_" test (#+ Test)]]
  ["." /// #_
   [abstract
    ["#." monoid]]]
  {1
   ["." /]})

(def: #export test
  Test
  (do {@ random.monad}
    [expected random.nat
     f0 (:: @ map n.+ random.nat)
     f1 (:: @ map n.* random.nat)
     dummy random.nat
     extra (|> random.nat (random.filter (|>> (n.= expected) not)))]
    (<| (_.context (name.module (name-of /._)))
        ($_ _.and
            (let [equivalence (: (Equivalence (-> Nat Nat))
                                 (structure
                                  (def: (= left right)
                                    (n.= (left extra)
                                         (right extra)))))
                  generator (: (Random (-> Nat Nat))
                               (:: @ map n.- random.nat))]
              (///monoid.spec equivalence /.monoid generator))
            
            (_.test (%.name (name-of /.identity))
                    (n.= expected
                         (/.identity expected)))
            (_.test (%.name (name-of /.compose))
                    (n.= (f0 (f1 expected))
                         ((/.compose f0 f1) expected)))
            (_.test (%.name (name-of /.constant))
                    (n.= expected
                         ((/.constant expected) dummy)))
            (_.test (%.name (name-of /.flip))
                    (let [outcome ((/.flip n.-) expected extra)]
                      (and (n.= (n.- extra expected)
                                outcome)
                           (not (n.= (n.- expected extra)
                                     outcome)))))
            (_.test (%.name (name-of /.apply))
                    (n.= (f0 extra)
                         (/.apply extra f0)))
            ))))
