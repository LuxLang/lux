(.using
 [library
  [lux (.full)
   ["_" test (.only Test)]
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]
    [\\specification
     ["$[0]" monoid]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" /]]
 ["[0]" / "_"
  ["[1][0]" contract]
  ["[1][0]" memo]
  ["[1][0]" mixin]
  ["[1][0]" mutual]
  ["[1][0]" inline]])

(def: .public test
  Test
  (do [! random.monad]
    [expected random.nat
     f0 (# ! each n.+ random.nat)
     f1 (# ! each n.* random.nat)
     dummy random.nat
     extra (|> random.nat (random.only (|>> (n.= expected) not)))]
    (<| (_.covering /._)
        (all _.and
             (let [equivalence (is (Equivalence (-> Nat Nat))
                                   (implementation
                                    (def: (= left right)
                                      (n.= (left extra)
                                           (right extra)))))
                   generator (is (Random (-> Nat Nat))
                                 (# ! each n.- random.nat))]
               (_.for [/.monoid]
                      ($monoid.spec equivalence /.monoid generator)))
             
             (_.coverage [/.identity]
               (n.= expected
                    (/.identity expected)))
             (_.coverage [/.composite]
               (n.= (f0 (f1 expected))
                    ((/.composite f0 f1) expected)))
             (_.coverage [/.constant]
               (n.= expected
                    ((/.constant expected) dummy)))
             (_.coverage [/.flipped]
               (let [outcome ((/.flipped n.-) expected extra)]
                 (and (n.= (n.- extra expected)
                           outcome)
                      (not (n.= (n.- expected extra)
                                outcome)))))
             (_.coverage [/.on]
               (n.= (f0 extra)
                    (/.on extra f0)))

             /contract.test
             /memo.test
             /mixin.test
             /mutual.test
             /inline.test
             ))))
