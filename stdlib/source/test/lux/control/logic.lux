... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]]
   [control
    ["[0]" try]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" natural]
     ["[0]" integer]
     ["[0]" revolution]
     ["[0]" decimal]]]
   [meta
    [macro
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

... https://en.wikipedia.org/wiki/Zebra_Puzzle
(every (Domain of)
  (-> (/.Term of)
      (/.Logic Any)))

(the (one_of values)
  (for_any (_ of)
    (-> (List of)
        (/.Logic of)))
  (function (_ context)
    (list#each (function (_ it)
                 [context it])
               values)))

(the (domain [head tail])
  (for_any (_ of)
    (-> [(/.Term of) (List (/.Term of))]
        (Domain of)))
  (function (_ it)
    (do /.monad
      [reference (one_of {.#Item [head tail]})]
      (/.= reference it))))

(every Color
  Text)

(template.with [<name>]
  [(the <name>
     (/.Term Color)
     (/.constant /.text (template.text [<name>])))]

  [yellow]
  [blue]
  [red]
  [ivory]
  [green]
  )

(the color
  (Domain Color)
  (domain [..yellow
           (list ..blue
                 ..red
                 ..ivory
                 ..green)]))

(every Nation
  Text)

(template.with [<name>]
  [(the <name>
     (/.Term Nation)
     (/.constant /.text (template.text [<name>])))]

  [norway]
  [ukraine]
  [england]
  [spain]
  [japan]
  )

(the nation
  (Domain Nation)
  (domain [..norway
           (list ..ukraine
                 ..england
                 ..spain
                 ..japan)]))

(every Drink
  Text)

(template.with [<name>]
  [(the <name>
     (/.Term Drink)
     (/.constant /.text (template.text [<name>])))]

  [water]
  [tea]
  [milk]
  [orange_juice]
  [coffee]
  )

(the drink
  (Domain Drink)
  (domain [..water
           (list ..tea
                 ..milk
                 ..orange_juice
                 ..coffee)]))

(every Smoke
  Text)

(template.with [<name>]
  [(the <name>
     (/.Term Smoke)
     (/.constant /.text (template.text [<name>])))]

  [kools]
  [chesterfield]
  [old_gold]
  [lucky_strike]
  [parliament]
  )

(the smoke
  (Domain Smoke)
  (domain [..kools
           (list ..chesterfield
                 ..old_gold
                 ..lucky_strike
                 ..parliament)]))

(every Pet
  Text)

(template.with [<name>]
  [(the <name>
     (/.Term Pet)
     (/.constant /.text (template.text [<name>])))]

  [fox]
  [horse]
  [snail]
  [dog]
  [zebra]
  )

(the pet
  (Domain Pet)
  (domain [..fox
           (list ..horse
                 ..snail
                 ..dog
                 ..zebra)]))

(the (domain_2 [head tail])
  (for_any (_ left right)
    (-> [[(/.Term left) (/.Term right)] (List [(/.Term left) (/.Term right)])]
        (-> [(/.Term left) (/.Term right)]
            (/.Logic Any))))
  (function (_ [left right])
    (do /.monad
      [[left_reference right_reference] (one_of {.#Item [head tail]})]
      (/.and (/.= left_reference left)
             (/.= right_reference right)))))

(every House
  (Record
   [#color (/.Term Color)
    #nation (/.Term Nation)
    #drink (/.Term Drink)
    #smoke (/.Term Smoke)
    #pet (/.Term Pet)]))

(the house
  (/.Logic House)
  (do /.monad
    [color (/.variable /.text)
     nation (/.variable /.text)
     drink (/.variable /.text)
     smoke (/.variable /.text)
     pet (/.variable /.text)]
    (in [#color color
         #nation nation
         #drink drink
         #smoke smoke
         #pet pet])))

(every Neighborhood
  (Record
   [#left_most House
    #left House
    #middle House
    #right House
    #right_most House]))

(the neighborhood
  (/.Logic Neighborhood)
  (do /.monad
    [left_most ..house
     left ..house
     middle ..house
     right ..house
     right_most ..house]
    (in [#left_most left_most
         #left left
         #middle middle
         #right right
         #right_most right_most])))

(every (Hint of)
  (-> House
      (/.Logic of)))

(the (member hood to_do)
  (for_any (_ of)
    (-> Neighborhood (Hint of)
        (/.Logic of)))
  (all /.or
       (to_do (its #left_most hood))
       (to_do (its #left hood))
       (to_do (its #middle hood))
       (to_do (its #right hood))
       (to_do (its #right_most hood))))

(template.with [,relation ,reference ,it]
  [(the (,relation hood ,reference ,it)
     (for_any (_ of)
       (-> Neighborhood (Hint of) (Hint of)
           (/.Logic of)))
     (`` (all /.or
              (,, (template.with [,left ,right]
                    [(all /.and
                          (left (its ,left hood))
                          (right (its ,right hood)))]

                    [#left_most #left]
                    [#left #middle]
                    [#middle #right]
                    [#right #right_most])))))]

  [left_of right left]
  [right_of left right]
  )

(the (next_to hood reference house)
  (for_any (_ of)
    (-> Neighborhood (Hint of) (Hint of)
        (/.Logic of)))
  (all /.or
       (left_of hood reference house)
       (right_of hood reference house)))

(the hint
  (template.macro (_ ,attribute ,value)
    [(|>> (its ,attribute)
          (/.= ,value))]))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [man/0 (random.upper_cased 1)
         man/1 (random.upper_cased 2)
         man/2 (random.upper_cased 3)

         woman/0 (random.lower_cased 1)
         woman/1 (random.lower_cased 2)
         woman/2 (random.lower_cased 3)

         .let [constant (/.constant /.text)
               man (domain [(constant man/0)
                            (list (constant man/1)
                                  (constant man/2))])
               woman (domain [(constant woman/0)
                              (list (constant woman/1)
                                    (constant woman/2))])
               likes (domain_2 [[(constant man/0) (constant woman/0)]
                                (list [(constant man/1) (constant woman/1)]
                                      [(constant man/2) (constant woman/2)])])
               fun (domain [(constant woman/2)
                            (list)])]

         expected random.natural
         .let [(open "list#[0]") (list.equivalence natural.equivalence)
               (open "/#[0]") /.monad]])
      (`` (all _.and
               (_.coverage [/.Logic
                            /.functor /.monad]
                 (and (when (/.values
                             (do /.monad
                               [expected_man (/.variable /.text)
                                expected_woman (/.variable /.text)
                                _ (man expected_man)
                                _ (woman expected_woman)
                                _ (likes [expected_man expected_woman])
                                _ (fun expected_woman)
                                expected_man (/.value expected_man)
                                expected_woman (/.value expected_woman)]
                               (in [expected_man expected_woman])))
                        (list [actual_man actual_woman])
                        (and (by /.text = man/2 actual_man)
                             (by /.text = woman/2 actual_woman))

                        _
                        false)
                      (|> (do [! /.monad]
                            [hood ..neighborhood
                             _ (member hood
                                       (function (_ house)
                                         (all /.and
                                              (/.= ..england (its #nation house))
                                              (/.= ..red (its #color house))
                                              )))
                             _ (member hood
                                       (function (_ house)
                                         (all /.and
                                              (/.= ..spain (its #nation house))
                                              (/.= ..dog (its #pet house))
                                              )))
                             _ (member hood
                                       (function (_ house)
                                         (all /.and
                                              (/.= ..green (its #color house))
                                              (/.= ..coffee (its #drink house))
                                              )))
                             _ (member hood
                                       (function (_ house)
                                         (all /.and
                                              (/.= ..ukraine (its #nation house))
                                              (/.= ..tea (its #drink house))
                                              )))
                             _ (right_of hood
                                         (hint #color ..ivory)
                                         (hint #color ..green))
                             _ (member hood
                                       (function (_ house)
                                         (all /.and
                                              (/.= ..old_gold (its #smoke house))
                                              (/.= ..snail (its #pet house))
                                              )))
                             _ (member hood
                                       (function (_ house)
                                         (all /.and
                                              (/.= ..yellow (its #color house))
                                              (/.= ..kools (its #smoke house))
                                              )))
                             _ (/.= ..milk (its [#middle #drink] hood))
                             _ (/.= ..norway (its [#left_most #nation] hood))
                             _ (next_to hood
                                        (hint #pet ..fox)
                                        (hint #smoke ..chesterfield))
                             _ (next_to hood
                                        (hint #pet ..horse)
                                        (hint #smoke ..kools))
                             _ (member hood
                                       (function (_ house)
                                         (all /.and
                                              (/.= ..lucky_strike (its #smoke house))
                                              (/.= ..orange_juice (its #drink house))
                                              )))
                             _ (member hood
                                       (function (_ house)
                                         (all /.and
                                              (/.= ..japan (its #nation house))
                                              (/.= ..parliament (its #smoke house))
                                              )))
                             _ (next_to hood
                                        (hint #color ..blue)
                                        (hint #nation ..norway))

                             expected_for_water (/.value ..norway)
                             expected_for_zebra (/.value ..japan)
                             
                             actual_for_water (member hood
                                                      (function (_ it)
                                                        (do !
                                                          [_ ((hint #drink ..water) it)]
                                                          (/.value (its #nation it)))))
                             actual_for_zebra (member hood
                                                      (function (_ it)
                                                        (do !
                                                          [_ ((hint #pet ..zebra) it)]
                                                          (/.value (its #nation it)))))]
                            (in (and (same? expected_for_water
                                            actual_for_water)
                                     (same? expected_for_zebra
                                            actual_for_zebra))))
                          /.values
                          list.head
                          (try.else false))))
               (,, (template.with [,name ,source]
                     [(_.coverage [,name]
                        (same? ,source ,name))]

                     [/.natural natural.equivalence]
                     [/.integer integer.equivalence]
                     [/.revolution revolution.equivalence]
                     [/.decimal decimal.equivalence]
                     [/.text text.equivalence]
                     ))
               (_.coverage [/.values]
                 (|> (/#in expected)
                     /.values
                     (list#= (list expected))))
               (_.coverage [/.failure]
                 (|> /.failure
                     /.values
                     (list#= (list))))
               (_.coverage [/.success]
                 (|> /.success
                     /.values
                     list.size
                     (natural.= 1)))
               (_.coverage [/.or]
                 (and (|> (/.or /.failure /.failure)
                          /.values
                          (list#= (list)))
                      (|> (/.or (/#in expected) /.failure)
                          /.values
                          (list#= (list expected)))
                      (|> (/.or /.failure (/#in expected))
                          /.values
                          (list#= (list expected)))
                      (|> (/.or (/#in expected) (/#in expected))
                          /.values
                          (list#= (list expected expected)))))
               (_.coverage [/.and]
                 (and (|> (/.and /.failure /.failure)
                          /.values
                          (list#= (list)))
                      (|> (/.and (/#in expected) /.failure)
                          /.values
                          (list#= (list)))
                      (|> (/.and /.failure (/#in expected))
                          /.values
                          (list#= (list)))
                      (|> (/.and (/#in expected) (/#in expected))
                          /.values
                          (list#= (list expected)))))
               (<| (_.for [/.Term /.Term'
                           /.#value /.#unified])
                   (all _.and
                        (_.coverage [/.constant /.value]
                          (|> (/.constant /.natural expected)
                              /.value
                              /.values
                              (list#= (list expected))))
                        (_.coverage [/.variable]
                          (|> (do /.monad
                                [it (/.variable /.natural)]
                                (/.value it))
                              /.values
                              (list#= (list))))
                        (_.coverage [/.=]
                          (|> (do /.monad
                                [it (/.variable /.natural)
                                 _ (/.= (/.constant /.natural expected) it)]
                                (/.value it))
                              /.values
                              (list#= (list expected))))
                        ))
               ))))
