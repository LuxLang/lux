(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    ["." monad (#+ do)]]
   [math
    ["." random (#+ Random)]]
   [control
    [pipe (#+ case>)]
    ["." try]
    ["." exception]
    ["<>" parser]]
   [data
    ["." bit]
    ["." name]
    ["." text]
    [number
     ["." i64]
     ["n" nat]
     ["." frac]]
    [collection
     ["." list ("#\." functor)]]]
   [tool
    [compiler
     [reference (#+)
      ["." variable (#+ Variable)]]
     [language
      [lux
       [analysis (#+ Environment)]
       ["." synthesis (#+ Synthesis)]]]]]]
  {1
   ["." /]})

(template: (!expect <pattern> <value>)
  (case <value>
    <pattern>
    true
    
    _
    false))

(def: random-constant
  (Random Name)
  (random.and (random.unicode 1)
              (random.unicode 1)))

(def: random-variable
  (Random Variable)
  (random.or random.nat
             random.nat))

(def: random-environment
  (Random (Environment Synthesis))
  (do {! random.monad}
    [size (:: ! map (n.% 5) random.nat)]
    (|> ..random-variable
        (:: ! map (|>> synthesis.variable))
        (random.list size))))

(def: simple
  Test
  (`` ($_ _.and
          (~~ (template [<query> <check> <random> <synthesis> <equivalence>]
                [(do {! random.monad}
                   [expected <random>
                    dummy (|> <random> (random.filter (|>> (:: <equivalence> = expected) not)))]
                   ($_ _.and
                       (_.cover [<query>]
                                (|> (/.run <query> (list (<synthesis> expected)))
                                    (!expect (^multi (#try.Success actual)
                                                     (:: <equivalence> = expected actual)))))
                       (_.cover [<check>]
                                (and (|> (/.run (<check> expected) (list (<synthesis> expected)))
                                         (!expect (#try.Success _)))
                                     (|> (/.run (<check> expected) (list (<synthesis> dummy)))
                                         (!expect (^multi (#try.Failure error)
                                                          (exception.match? /.cannot-parse error))))))))]

                [/.bit /.bit! random.bit synthesis.bit bit.equivalence]
                [/.i64 /.i64! (:: ! map .i64 random.nat) synthesis.i64 i64.equivalence]
                [/.f64 /.f64! random.safe-frac synthesis.f64 frac.equivalence]
                [/.text /.text! (random.unicode 1) synthesis.text text.equivalence]
                [/.local /.local! random.nat synthesis.variable/local n.equivalence]
                [/.foreign /.foreign! random.nat synthesis.variable/foreign n.equivalence]
                [/.constant /.constant! ..random-constant synthesis.constant name.equivalence]
                ))
          )))

(def: complex
  Test
  ($_ _.and
      (do {! random.monad}
        [expected-bit random.bit
         expected-i64 (:: ! map .i64 random.nat)
         expected-f64 random.safe-frac
         expected-text (random.unicode 1)]
        (_.cover [/.tuple]
                 (and (|> (/.run (/.tuple ($_ <>.and /.bit /.i64 /.f64 /.text))
                                 (list (synthesis.tuple (list (synthesis.bit expected-bit)
                                                              (synthesis.i64 expected-i64)
                                                              (synthesis.f64 expected-f64)
                                                              (synthesis.text expected-text)))))
                          (!expect (^multi (#try.Success [actual-bit actual-i64 actual-f64 actual-text])
                                           (and (:: bit.equivalence = expected-bit actual-bit)
                                                (:: i64.equivalence = expected-i64 actual-i64)
                                                (:: frac.equivalence = expected-f64 actual-f64)
                                                (:: text.equivalence = expected-text actual-text)))))
                      (|> (/.run (/.tuple ($_ <>.and /.bit /.i64 /.f64 /.text))
                                 (list (synthesis.text expected-text)))
                          (!expect (^multi (#try.Failure error)
                                           (exception.match? /.cannot-parse error)))))))
      (do {! random.monad}
        [arity random.nat
         expected-environment ..random-environment
         expected-body (random.unicode 1)]
        (_.cover [/.function]
                 (and (|> (/.run (/.function arity /.text)
                                 (list (synthesis.function/abstraction [expected-environment arity (synthesis.text expected-body)])))
                          (!expect (^multi (#try.Success [actual-environment actual-body])
                                           (and (:: (list.equivalence synthesis.equivalence) =
                                                    expected-environment
                                                    actual-environment)
                                                (:: text.equivalence = expected-body actual-body)))))
                      (|> (/.run (/.function arity /.text)
                                 (list (synthesis.text expected-body)))
                          (!expect (^multi (#try.Failure error)
                                           (exception.match? /.cannot-parse error)))))))
      (do {! random.monad}
        [arity random.nat
         expected-environment ..random-environment
         expected-body (random.unicode 1)]
        (_.cover [/.wrong-arity]
                 (|> (/.run (/.function (inc arity) /.text)
                            (list (synthesis.function/abstraction [expected-environment arity (synthesis.text expected-body)])))
                     (!expect (^multi (#try.Failure error)
                                      (exception.match? /.wrong-arity error))))))
      (do {! random.monad}
        [arity (:: ! map (|>> (n.% 10) inc) random.nat)
         expected-offset random.nat
         expected-inits (random.list arity random.bit)
         expected-body (random.unicode 1)]
        (_.cover [/.loop]
                 (and (|> (/.run (/.loop (<>.many /.bit) /.text)
                                 (list (synthesis.loop/scope [expected-offset
                                                              (list\map (|>> synthesis.bit) expected-inits)
                                                              (synthesis.text expected-body)])))
                          (!expect (^multi (#try.Success [actual-offset actual-inits actual-body])
                                           (and (:: n.equivalence = expected-offset actual-offset)
                                                (:: (list.equivalence bit.equivalence) =
                                                    expected-inits
                                                    actual-inits)
                                                (:: text.equivalence = expected-body actual-body)))))
                      (|> (/.run (/.loop (<>.many /.bit) /.text)
                                 (list (synthesis.text expected-body)))
                          (!expect (^multi (#try.Failure error)
                                           (exception.match? /.cannot-parse error)))))))
      ))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.Parser])
      ($_ _.and
          (do {! random.monad}
            [expected (:: ! map (|>> synthesis.i64) random.nat)]
            (_.cover [/.run /.any]
                     (|> (/.run /.any (list expected))
                         (!expect (^multi (#try.Success actual)
                                          (:: synthesis.equivalence = expected actual))))))
          (_.cover [/.empty-input]
                   (|> (/.run /.any (list))
                       (!expect (^multi (#try.Failure error)
                                        (exception.match? /.empty-input error)))))
          (do {! random.monad}
            [expected (:: ! map (|>> synthesis.i64) random.nat)]
            (_.cover [/.unconsumed-input]
                     (|> (/.run /.any (list expected expected))
                         (!expect (^multi (#try.Failure error)
                                          (exception.match? /.unconsumed-input error))))))
          (do {! random.monad}
            [dummy (:: ! map (|>> synthesis.i64) random.nat)]
            (_.cover [/.end! /.expected-empty-input]
                     (and (|> (/.run /.end! (list))
                              (!expect (#try.Success _)))
                          (|> (/.run /.end! (list dummy))
                              (!expect (^multi (#try.Failure error)
                                               (exception.match? /.expected-empty-input error)))))))
          (do {! random.monad}
            [dummy (:: ! map (|>> synthesis.i64) random.nat)]
            (_.cover [/.end?]
                     (and (|> (/.run /.end? (list))
                              (!expect (#try.Success #1)))
                          (|> (/.run (<>.before /.any /.end?) (list dummy))
                              (!expect (#try.Success #0))))))
          (_.with-cover [/.cannot-parse]
            ($_ _.and
                ..simple
                ..complex
                ))
          )))
