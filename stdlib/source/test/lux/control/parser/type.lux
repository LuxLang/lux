(.module:
  [library
   [lux (#- primitive)
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [control
     ["." try]
     ["." exception]]
    [data
     ["." name ("#\." equivalence)]
     [collection
      ["." list]]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]]]
    ["." type ("#\." equivalence)]]]
  [\\library
   ["." /
    ["/#" //]]])

(template: (!expect <pattern> <value>)
  [(case <value>
     <pattern>
     true
     
     _
     false)])

(def: primitive
  (Random Type)
  (|> (random.ascii/alpha_num 1)
      (\ random.monad map (function (_ name)
                            (#.Primitive name (list))))))

(def: matches
  Test
  (<| (_.for [/.types_do_not_match])
      (do {! random.monad}
        [expected ..primitive
         dummy (random.only (|>> (type\= expected) not)
                            ..primitive)])
      ($_ _.and
          (_.cover [/.exactly]
                   (and (|> (/.run (/.exactly expected) expected)
                            (!expect (#try.Success [])))
                        (|> (/.run (/.exactly expected) dummy)
                            (!expect (^multi (#try.Failure error)
                                             (exception.match? /.types_do_not_match error))))))
          (_.cover [/.sub]
                   (and (|> (/.run (/.sub expected) expected)
                            (!expect (#try.Success [])))
                        (|> (/.run (/.sub Any) expected)
                            (!expect (#try.Success [])))
                        (|> (/.run (/.sub expected) Nothing)
                            (!expect (#try.Success [])))
                        (|> (/.run (/.sub expected) dummy)
                            (!expect (^multi (#try.Failure error)
                                             (exception.match? /.types_do_not_match error))))))
          (_.cover [/.super]
                   (and (|> (/.run (/.super expected) expected)
                            (!expect (#try.Success [])))
                        (|> (/.run (/.super expected) Any)
                            (!expect (#try.Success [])))
                        (|> (/.run (/.super Nothing) expected)
                            (!expect (#try.Success [])))
                        (|> (/.run (/.super expected) dummy)
                            (!expect (^multi (#try.Failure error)
                                             (exception.match? /.types_do_not_match error))))))
          )))

(def: aggregate
  Test
  (do {! random.monad}
    [expected_left ..primitive
     expected_middle ..primitive
     expected_right ..primitive]
    (`` ($_ _.and
            (~~ (template [<parser> <exception> <good_constructor> <bad_constructor>]
                  [(_.cover [<parser> <exception>]
                            (and (|> (/.run (<parser> ($_ //.and /.any /.any /.any))
                                            (<good_constructor> (list expected_left expected_middle expected_right)))
                                     (!expect (^multi (#try.Success [actual_left actual_middle actual_right])
                                                      (and (type\= expected_left actual_left)
                                                           (type\= expected_middle actual_middle)
                                                           (type\= expected_right actual_right)))))
                                 (|> (/.run (<parser> ($_ //.and /.any /.any /.any))
                                            (<bad_constructor> (list expected_left expected_middle expected_right)))
                                     (!expect (^multi (#try.Failure error)
                                                      (exception.match? <exception> error))))))]

                  [/.variant /.not_variant type.variant type.tuple]
                  [/.tuple /.not_tuple type.tuple type.variant]
                  ))

            (_.cover [/.function /.not_function]
                     (and (|> (/.run (/.function ($_ //.and /.any /.any) /.any)
                                     (type.function (list expected_left expected_middle) expected_right))
                              (!expect (^multi (#try.Success [[actual_left actual_middle] actual_right])
                                               (and (type\= expected_left actual_left)
                                                    (type\= expected_middle actual_middle)
                                                    (type\= expected_right actual_right)))))
                          (|> (/.run (/.function ($_ //.and /.any /.any) /.any)
                                     (type.variant (list expected_left expected_middle expected_right)))
                              (!expect (^multi (#try.Failure error)
                                               (exception.match? /.not_function error))))))
            (_.cover [/.applied /.not_application]
                     (and (|> (/.run (/.applied ($_ //.and /.any /.any /.any))
                                     (type.application (list expected_middle expected_right) expected_left))
                              (!expect (^multi (#try.Success [actual_left actual_middle actual_right])
                                               (and (type\= expected_left actual_left)
                                                    (type\= expected_middle actual_middle)
                                                    (type\= expected_right actual_right)))))
                          (|> (/.run (/.applied ($_ //.and /.any /.any /.any))
                                     (type.variant (list expected_left expected_middle expected_right)))
                              (!expect (^multi (#try.Failure error)
                                               (exception.match? /.not_application error))))))
            ))))

(def: parameter
  Test
  (do random.monad
    [quantification ..primitive
     argument ..primitive
     not_parameter ..primitive
     parameter random.nat]
    ($_ _.and
        (_.cover [/.not_parameter]
                 (|> (/.run /.parameter not_parameter)
                     (!expect (^multi (#try.Failure error)
                                      (exception.match? /.not_parameter error)))))
        (_.cover [/.unknown_parameter]
                 (|> (/.run /.parameter (#.Parameter parameter))
                     (!expect (^multi (#try.Failure error)
                                      (exception.match? /.unknown_parameter error)))))
        (_.cover [/.with_extension]
                 (|> (/.run (<| (/.with_extension quantification)
                                (/.with_extension argument)
                                /.any)
                            not_parameter)
                     (!expect (^multi (#try.Success [quantification\\binding argument\\binding actual])
                                      (is? not_parameter actual)))))
        (_.cover [/.parameter]
                 (|> (/.run (<| (/.with_extension quantification)
                                (/.with_extension argument)
                                /.parameter)
                            (#.Parameter 0))
                     (!expect (#try.Success [quantification\\binding argument\\binding _]))))
        (_.cover [/.wrong_parameter]
                 (|> (/.run (<| (/.with_extension quantification)
                                (/.with_extension argument)
                                (/.parameter! 1))
                            (#.Parameter 0))
                     (!expect (^multi (#try.Failure error)
                                      (exception.match? /.wrong_parameter error)))))
        (_.cover [/.parameter!]
                 (|> (/.run (<| (/.with_extension quantification)
                                (/.with_extension argument)
                                (/.parameter! 0))
                            (#.Parameter 0))
                     (!expect (#try.Success [quantification\\binding argument\\binding _]))))
        )))

(def: polymorphic
  Test
  (do {! random.monad}
    [not_polymorphic ..primitive
     expected_inputs (\ ! map (|>> (n.% 10) inc) random.nat)]
    ($_ _.and
        (_.cover [/.not_polymorphic]
                 (and (|> (/.run (/.polymorphic /.any)
                                 not_polymorphic)
                          (!expect (^multi (#try.Failure error)
                                           (exception.match? /.not_polymorphic error))))
                      (|> (/.run (/.polymorphic /.any)
                                 (type.univ_q 0 not_polymorphic))
                          (!expect (^multi (#try.Failure error)
                                           (exception.match? /.not_polymorphic error))))))
        (_.cover [/.polymorphic]
                 (|> (/.run (/.polymorphic /.any)
                            (type.univ_q expected_inputs not_polymorphic))
                     (!expect (^multi (#try.Success [g!poly actual_inputs bodyT])
                                      (and (n.= expected_inputs (list.size actual_inputs))
                                           (is? not_polymorphic bodyT))))))
        )))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Parser])
      ($_ _.and
          (do {! random.monad}
            [expected ..primitive]
            (_.cover [/.run /.any]
                     (|> (/.run /.any expected)
                         (!expect (^multi (#try.Success actual)
                                          (type\= expected actual))))))
          (do {! random.monad}
            [expected ..primitive]
            (_.cover [/.peek /.unconsumed_input]
                     (and (|> (/.run (do //.monad
                                       [actual /.peek
                                        _ /.any]
                                       (in actual))
                                     expected)
                              (!expect (^multi (#try.Success actual)
                                               (type\= expected actual))))
                          (|> (/.run /.peek expected)
                              (!expect (^multi (#try.Failure error)
                                               (exception.match? /.unconsumed_input error)))))))
          (do {! random.monad}
            [expected ..primitive]
            (_.cover [/.empty_input]
                     (`` (and (~~ (template [<parser>]
                                    [(|> (/.run (do //.monad
                                                  [_ /.any]
                                                  <parser>)
                                                expected)
                                         (!expect (^multi (#try.Failure error)
                                                          (exception.match? /.empty_input error))))]

                                    [/.any]
                                    [/.peek]
                                    ))))))
          (do {! random.monad}
            [expected ..primitive]
            (_.cover [/.Env /.env /.fresh]
                     (|> (/.run (do //.monad
                                  [env /.env
                                   _ /.any]
                                  (in env))
                                expected)
                         (!expect (^multi (#try.Success environment)
                                          (is? /.fresh environment))))))
          (do {! random.monad}
            [expected ..primitive
             dummy (random.only (|>> (type\= expected) not)
                                ..primitive)]
            (_.cover [/.local]
                     (|> (/.run (do //.monad
                                  [_ /.any]
                                  (/.local (list expected)
                                           /.any))
                                dummy)
                         (!expect (^multi (#try.Success actual)
                                          (type\= expected actual))))))
          (do {! random.monad}
            [expected random.nat]
            (_.cover [/.existential /.not_existential]
                     (|> (/.run /.existential
                                (#.Ex expected))
                         (!expect (^multi (#try.Success actual)
                                          (n.= expected actual))))))
          (do {! random.monad}
            [expected_name (random.and (random.ascii/alpha_num 1)
                                       (random.ascii/alpha_num 1))
             expected_type ..primitive]
            (_.cover [/.named /.not_named]
                     (|> (/.run /.named
                                (#.Named expected_name expected_type))
                         (!expect (^multi (#try.Success [actual_name actual_type])
                                          (and (name\= expected_name actual_name)
                                               (type\= expected_type actual_type)))))))
          ..aggregate
          ..matches
          ..parameter
          ..polymorphic
          )))
