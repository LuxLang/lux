(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try]
    ["." exception]]
   [data
    ["." text ("#\." equivalence)]
    ["." name ("#\." equivalence)]
    [format
     ["." xml]]
    [number
     ["n" nat]]
    [collection
     ["." dictionary]
     ["." list]]]
   [math
    ["." random (#+ Random)]]
   [macro
    ["." template]]
   ["." type ("#\." equivalence)]]
  {1
   ["." /
    ["/#" // ("#\." monad)]]})

(template: (!expect <pattern> <value>)
  (case <value>
    <pattern>
    true
    
    _
    false))

(template: (!failure <exception> <cases>)
  (with_expansions [<<cases>> (template.splice <cases>)]
    (do {! random.monad}
      [expected (random.ascii/alpha 1)]
      (_.cover [<exception>]
               (`` (and (~~ (template [<parser> <input>]
                              [(|> (/.run <parser> <input>)
                                   (!expect (^multi (#try.Failure error)
                                                    (exception.match? <exception> error))))]

                              <<cases>>))))))))

(def: random_label
  (Random Name)
  (random.and (random.ascii/alpha 1)
              (random.ascii/alpha 1)))

(def: random_tag ..random_label)
(def: random_attribute ..random_label)

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Parser])
      ($_ _.and
          (do {! random.monad}
            [expected (random.ascii/alpha 1)]
            (_.cover [/.run /.text]
                     (|> (/.run /.text (#xml.Text expected))
                         (!expect (^multi (#try.Success actual)
                                          (text\= expected actual))))))
          (!failure /.unconsumed_inputs
                    [[(//\wrap expected)
                      (#xml.Text expected)]])
          (do {! random.monad}
            [expected (random.ascii/alpha 1)]
            (_.cover [/.ignore]
                     (|> (/.run /.ignore (#xml.Text expected))
                         (!expect (#try.Success [])))))
          (do {! random.monad}
            [expected ..random_tag]
            (_.cover [/.tag]
                     (|> (/.run (do //.monad
                                  [actual /.tag
                                   _ /.ignore]
                                  (wrap (name\= expected actual)))
                                (#xml.Node expected (dictionary.new name.hash) (list)))
                         (!expect (#try.Success #1)))))
          (do {! random.monad}
            [expected ..random_tag]
            (_.cover [/.node]
                     (|> (/.run (do //.monad
                                  [_ (/.node expected)]
                                  /.ignore)
                                (#xml.Node expected (dictionary.new name.hash) (list)))
                         (!expect (#try.Success [])))))
          (!failure /.wrong_tag
                    [[(/.node ["" expected])
                      (#xml.Node [expected ""] (dictionary.new name.hash) (list))]])
          (do {! random.monad}
            [expected_tag ..random_tag
             expected_attribute ..random_attribute
             expected_value (random.ascii/alpha 1)]
            (_.cover [/.attribute]
                     (|> (/.run (do //.monad
                                  [_ (/.node expected_tag)
                                   _ (/.attribute expected_attribute)]
                                  /.ignore)
                                (#xml.Node expected_tag
                                           (|> (dictionary.new name.hash)
                                               (dictionary.put expected_attribute expected_value))
                                           (list)))
                         (!expect (#try.Success [])))))
          (!failure /.unknown_attribute
                    [[(do //.monad
                        [_ (/.attribute ["" expected])]
                        /.ignore)
                      (#xml.Node [expected expected]
                                 (|> (dictionary.new name.hash)
                                     (dictionary.put [expected ""] expected))
                                 (list))]])
          (do {! random.monad}
            [expected ..random_tag]
            (_.cover [/.children]
                     (|> (/.run (do {! //.monad}
                                  [_ (/.node expected)]
                                  (/.children
                                   (do !
                                     [_ (/.node expected)]
                                     /.ignore)))
                                (#xml.Node expected
                                           (dictionary.new name.hash)
                                           (list (#xml.Node expected
                                                            (dictionary.new name.hash)
                                                            (list)))))
                         (!expect (#try.Success [])))))
          (!failure /.empty_input
                    [[(do //.monad
                        [_ /.ignore]
                        /.ignore)
                      (#xml.Text expected)]
                     [(do //.monad
                        [_ /.ignore]
                        /.text)
                      (#xml.Text expected)]
                     [(do //.monad
                        [_ /.ignore]
                        (/.node [expected expected]))
                      (#xml.Node [expected expected]
                                 (dictionary.new name.hash)
                                 (list))]
                     [(do //.monad
                        [_ /.ignore]
                        (/.node [expected expected]))
                      (#xml.Node [expected expected]
                                 (|> (dictionary.new name.hash)
                                     (dictionary.put [expected expected] expected))
                                 (list))]
                     [(do //.monad
                        [_ /.ignore]
                        (/.children
                         (/.node [expected expected])))
                      (#xml.Node [expected expected]
                                 (dictionary.new name.hash)
                                 (list (#xml.Node [expected expected]
                                                  (dictionary.new name.hash)
                                                  (list))))]])
          (!failure /.unexpected_input
                    [[/.text
                      (#xml.Node [expected expected] (dictionary.new name.hash) (list))]
                     [(do //.monad
                        [_ (/.node [expected expected])]
                        /.ignore)
                      (#xml.Text expected)]
                     [(do //.monad
                        [_ (/.attribute [expected expected])]
                        /.ignore)
                      (#xml.Text expected)]
                     [(do {! //.monad}
                        [_ (/.node [expected expected])]
                        (/.children
                         (do !
                           [_ (/.node [expected expected])]
                           /.ignore)))
                      (#xml.Text expected)]])
          (do {! random.monad}
            [#let [node (: (-> xml.Tag (List xml.XML) xml.XML)
                           (function (_ tag children)
                             (#xml.Node tag (dictionary.new name.hash) children)))]
             parent ..random_tag
             right ..random_tag
             wrong (random.filter (|>> (name\= right) not)
                                  ..random_tag)
             #let [parser (/.children
                           (do //.monad
                             [_ (/.somewhere (/.node right))
                              _ (//.some /.ignore)]
                             (wrap [])))]
             repetitions (\ ! map (n.% 10) random.nat)]
            ($_ _.and
                (_.cover [/.somewhere]
                         (|> (/.run parser
                                    (node parent
                                          (list.concat (list (list.repeat repetitions (node wrong (list)))
                                                             (list (node right (list)))
                                                             (list.repeat repetitions (node wrong (list)))))))
                             (!expect (#try.Success []))))
                (_.cover [/.nowhere]
                         (|> (/.run parser
                                    (node parent
                                          (list.repeat repetitions (node wrong (list)))))
                             (!expect (^multi (#try.Failure error)
                                              (exception.match? /.nowhere error)))))
                ))
          )))
