(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    [abstract
     [monad {"+" [do]}]]
    [control
     ["[0]" try]
     ["[0]" exception]]
    [data
     ["[0]" text ("[1]\[0]" equivalence)]
     [collection
      ["[0]" dictionary]]]
    [math
     ["[0]" random]
     [number
      ["n" nat]]]]]
  [\\library
   ["[0]" /
    ["/[1]" // ("[1]\[0]" monad)]]])

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Environment /.Parser])
      ($_ _.and
          (_.cover [/.empty]
                   (dictionary.empty? /.empty))
          (do random.monad
            [expected random.nat]
            (_.cover [/.result]
                     (|> (/.result (//\in expected) /.empty)
                         (\ try.functor each (n.= expected))
                         (try.else false))))
          (do random.monad
            [property (random.ascii/alpha 1)
             expected (random.ascii/alpha 1)]
            (_.cover [/.Property /.property]
                     (|> /.empty
                         (dictionary.has property expected)
                         (/.result (/.property property))
                         (\ try.functor each (text\= expected))
                         (try.else false))))
          (do random.monad
            [property (random.ascii/alpha 1)]
            (_.cover [/.unknown_property]
                     (case (/.result (/.property property) /.empty)
                       (#try.Success _)
                       false
                       
                       (#try.Failure error)
                       (exception.match? /.unknown_property error))))
          )))
