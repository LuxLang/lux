(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try]
    ["." exception]]
   [data
    ["." text ("#\." equivalence)]
    [number
     ["n" nat]]
    [collection
     ["." dictionary]]]
   [math
    ["." random]]]
  {1
   ["." /
    ["/#" // ("#\." monad)]]})

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.Parser])
      ($_ _.and
          (_.cover [/.empty]
                   (dictionary.empty? /.empty))
          (do random.monad
            [expected random.nat]
            (_.cover [/.run]
                     (|> (/.run (//\wrap expected) /.empty)
                         (\ try.functor map (n.= expected))
                         (try.default false))))
          (do random.monad
            [property (random.ascii/alpha 1)
             expected (random.ascii/alpha 1)]
            (_.cover [/.property]
                     (|> /.empty
                         (dictionary.put property expected)
                         (/.run (/.property property))
                         (\ try.functor map (text\= expected))
                         (try.default false))))
          (do random.monad
            [property (random.ascii/alpha 1)]
            (_.cover [/.unknown]
                     (case (/.run (/.property property) /.empty)
                       (#try.Success _)
                       false
                       
                       (#try.Failure error)
                       (exception.match? /.unknown error))))
          )))
