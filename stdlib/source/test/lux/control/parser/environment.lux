(.require
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)]
    [collection
     ["[0]" dictionary]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.use "[1]#[0]" monad)]]])

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Environment /.Parser])
      (all _.and
           (_.coverage [/.empty]
             (dictionary.empty? /.empty))
           (do random.monad
             [expected random.nat]
             (_.coverage [/.result]
               (|> (/.result (//#in expected) /.empty)
                   (at try.functor each (n.= expected))
                   (try.else false))))
           (do random.monad
             [property (random.alphabetic 1)
              expected (random.alphabetic 1)]
             (_.coverage [/.Property /.property]
               (|> /.empty
                   (dictionary.has property expected)
                   (/.result (/.property property))
                   (at try.functor each (text#= expected))
                   (try.else false))))
           (do random.monad
             [property (random.alphabetic 1)]
             (_.coverage [/.unknown_property]
               (case (/.result (/.property property) /.empty)
                 {try.#Success _}
                 false
                 
                 {try.#Failure error}
                 (exception.match? /.unknown_property error))))
           )))
