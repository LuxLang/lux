(.module:
  [lux #*
   [data
    ["." name]]
   ["M" abstract/monad (#+ Monad do)]
   ["_" test (#+ Test)]
   ["r" math/random]
   [control
    pipe
    ["." try]
    ["p" parser]]
   [data
    [number
     ["n" nat ("#@." decimal)]]
    ["." text ("#@." equivalence)]
    [collection
     ["." list]]]]
  {1
   ["." /]})

(def: #export test
  Test
  (<| (_.context (name.module (name-of /._)))
      (do r.monad
        [num-args (|> r.nat (:: @ map (n.% 10)))
         #let [gen-arg (:: @ map n@encode r.nat)]
         yes gen-arg
         #let [gen-ignore (r.filter (|>> (text@= yes) not)
                                    (r.unicode 5))]
         no gen-ignore
         pre-ignore (r.list 5 gen-ignore)
         post-ignore (r.list 5 gen-ignore)]
        ($_ _.and
            (_.test "Can read any argument."
                    (|> (/.run /.any (list yes))
                        (case> (#try.Failure _)
                               #0
                               
                               (#try.Success arg)
                               (text@= arg yes))))
            (_.test "Can test tokens."
                    (and (|> (/.run (/.this yes) (list yes))
                             (case> (#try.Failure _)
                                    #0

                                    (#try.Success _)
                                    #1))
                         (|> (/.run (/.this yes) (list no))
                             (case> (#try.Failure _)
                                    #1

                                    (#try.Success _)
                                    #0))))
            (_.test "Can use custom token parsers."
                    (|> (/.run (/.parse n@decode) (list yes))
                        (case> (#try.Failure _)
                               #0
                               
                               (#try.Success parsed)
                               (text@= (n@encode parsed)
                                       yes))))
            (_.test "Can query if there are any more inputs."
                    (and (|> (/.run /.end (list))
                             (case> (#try.Success []) #1 _ #0))
                         (|> (/.run (p.not /.end) (list yes))
                             (case> (#try.Success []) #0 _ #1))))
            (_.test "Can parse CLI input anywhere."
                    (|> (/.run (|> (/.somewhere (/.this yes))
                                   (p.before (p.some /.any)))
                               (list.concat (list pre-ignore (list yes) post-ignore)))
                        (case> (#try.Failure _)
                               #0

                               (#try.Success _)
                               #1)))
            ))))
