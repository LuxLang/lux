(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try]
    ["<>" parser]]
   [data
    [number
     ["n" nat ("#@." decimal)]]
    ["." text ("#@." equivalence)]
    [collection
     ["." list]]]
   [math
    ["." random]]]
  {1
   ["." /]})

(template: (!expect <pattern> <value>)
  (case <value>
    <pattern>
    true
    
    _
    false))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.Parser])
      (do {@ random.monad}
        [expected (:: @ map n@encode random.nat)
         #let [random-dummy (random.filter (|>> (text@= expected) not)
                                           (random.unicode 5))]
         dummy random-dummy
         short (random.unicode 1)
         long (random.unicode 2)
         pre-ignore (random.list 5 random-dummy)
         post-ignore (random.list 5 random-dummy)]
        ($_ _.and
            (_.cover [/.run /.any]
                     (|> (/.run /.any (list expected))
                         (!expect (^multi (#try.Success actual)
                                          (text@= expected actual)))))
            (_.cover [/.parse]
                     (|> (/.run (/.parse n@decode) (list expected))
                         (!expect (^multi (#try.Success actual)
                                          (text@= expected
                                                  (n@encode actual))))))
            (_.cover [/.this]
                     (and (|> (/.run (/.this expected) (list expected))
                              (!expect (#try.Success _)))
                          (|> (/.run (/.this expected) (list dummy))
                              (!expect (#try.Failure _)))))
            (_.cover [/.somewhere]
                     (|> (/.run (|> (/.somewhere (/.this expected))
                                    (<>.before (<>.some /.any)))
                                (list.concat (list pre-ignore (list expected) post-ignore)))
                         (!expect (#try.Success _))))
            (_.cover [/.end]
                     (and (|> (/.run /.end (list))
                              (!expect (#try.Success _)))
                          (|> (/.run (<>.not /.end) (list expected))
                              (!expect (#try.Failure _)))))
            (_.cover [/.named]
                     (|> (/.run (/.named dummy /.any) (list dummy expected))
                         (!expect (^multi (#try.Success actual)
                                          (text@= expected actual)))))
            (_.cover [/.parameter]
                     (and (|> (/.run (/.parameter [short long] /.any)
                                     (list short expected))
                              (!expect (^multi (#try.Success actual)
                                               (text@= expected actual))))
                          (|> (/.run (/.parameter [short long] /.any)
                                     (list long expected))
                              (!expect (^multi (#try.Success actual)
                                               (text@= expected actual))))
                          (|> (/.run (/.parameter [short long] /.any)
                                     (list dummy expected))
                              (!expect (#try.Failure _)))))
            ))))
