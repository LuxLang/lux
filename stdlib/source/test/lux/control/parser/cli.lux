(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["<>" parser]]
   [data
    ["[0]" text (.open: "[1]#[0]" equivalence)]
    [collection
     ["[0]" list]]]
   [macro
    ["^" pattern]]
   [math
    ["[0]" random]
    [number
     ["n" nat (.open: "[1]#[0]" decimal)]]]]]
 [\\library
  ["[0]" /]])

(def: !expect
  (template (_ <pattern> <value>)
    [(case <value>
       <pattern>
       true
       
       _
       false)]))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Parser])
      (do [! random.monad]
        [expected (at ! each n#encoded random.nat)
         .let [random_dummy (random.only (|>> (text#= expected) not)
                                         (random.unicode 5))]
         dummy random_dummy
         short (random.unicode 1)
         long (random.unicode 2)
         pre_ignore (random.list 5 random_dummy)
         post_ignore (random.list 5 random_dummy)]
        (all _.and
             (_.coverage [/.result /.any]
               (|> (/.result /.any (list expected))
                   (!expect (^.multi {try.#Success actual}
                                     (text#= expected actual)))))
             (_.coverage [/.parse]
               (|> (/.result (/.parse n#decoded) (list expected))
                   (!expect (^.multi {try.#Success actual}
                                     (text#= expected
                                             (n#encoded actual))))))
             (_.coverage [/.this]
               (and (|> (/.result (/.this expected) (list expected))
                        (!expect {try.#Success _}))
                    (|> (/.result (/.this expected) (list dummy))
                        (!expect {try.#Failure _}))))
             (_.coverage [/.somewhere]
               (|> (/.result (|> (/.somewhere (/.this expected))
                                 (<>.before (<>.some /.any)))
                             (list.together (list pre_ignore (list expected) post_ignore)))
                   (!expect {try.#Success _})))
             (_.coverage [/.end]
               (and (|> (/.result /.end (list))
                        (!expect {try.#Success _}))
                    (|> (/.result (<>.not /.end) (list expected))
                        (!expect {try.#Failure _}))))
             (_.coverage [/.named]
               (|> (/.result (/.named dummy /.any) (list dummy expected))
                   (!expect (^.multi {try.#Success actual}
                                     (text#= expected actual)))))
             (_.coverage [/.parameter]
               (and (|> (/.result (/.parameter [short long] /.any)
                                  (list short expected))
                        (!expect (^.multi {try.#Success actual}
                                          (text#= expected actual))))
                    (|> (/.result (/.parameter [short long] /.any)
                                  (list long expected))
                        (!expect (^.multi {try.#Success actual}
                                          (text#= expected actual))))
                    (|> (/.result (/.parameter [short long] /.any)
                                  (list dummy expected))
                        (!expect {try.#Failure _}))))
             ))))
