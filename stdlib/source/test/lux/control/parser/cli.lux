(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [control
     ["." try]
     ["<>" parser]]
    [data
     ["." text ("#\." equivalence)]
     [collection
      ["." list]]]
    [math
     ["." random]
     [number
      ["n" nat ("#\." decimal)]]]]]
  [\\library
   ["." /]])

(template: (!expect <pattern> <value>)
  [(case <value>
     <pattern>
     true
     
     _
     false)])

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Parser])
      (do {! random.monad}
        [expected (\ ! each n\encoded random.nat)
         .let [random_dummy (random.only (|>> (text\= expected) not)
                                         (random.unicode 5))]
         dummy random_dummy
         short (random.unicode 1)
         long (random.unicode 2)
         pre_ignore (random.list 5 random_dummy)
         post_ignore (random.list 5 random_dummy)]
        ($_ _.and
            (_.cover [/.result /.any]
                     (|> (/.result /.any (list expected))
                         (!expect (^multi (#try.Success actual)
                                          (text\= expected actual)))))
            (_.cover [/.parse]
                     (|> (/.result (/.parse n\decoded) (list expected))
                         (!expect (^multi (#try.Success actual)
                                          (text\= expected
                                                  (n\encoded actual))))))
            (_.cover [/.this]
                     (and (|> (/.result (/.this expected) (list expected))
                              (!expect (#try.Success _)))
                          (|> (/.result (/.this expected) (list dummy))
                              (!expect (#try.Failure _)))))
            (_.cover [/.somewhere]
                     (|> (/.result (|> (/.somewhere (/.this expected))
                                       (<>.before (<>.some /.any)))
                                   (list.together (list pre_ignore (list expected) post_ignore)))
                         (!expect (#try.Success _))))
            (_.cover [/.end]
                     (and (|> (/.result /.end (list))
                              (!expect (#try.Success _)))
                          (|> (/.result (<>.not /.end) (list expected))
                              (!expect (#try.Failure _)))))
            (_.cover [/.named]
                     (|> (/.result (/.named dummy /.any) (list dummy expected))
                         (!expect (^multi (#try.Success actual)
                                          (text\= expected actual)))))
            (_.cover [/.parameter]
                     (and (|> (/.result (/.parameter [short long] /.any)
                                        (list short expected))
                              (!expect (^multi (#try.Success actual)
                                               (text\= expected actual))))
                          (|> (/.result (/.parameter [short long] /.any)
                                        (list long expected))
                              (!expect (^multi (#try.Success actual)
                                               (text\= expected actual))))
                          (|> (/.result (/.parameter [short long] /.any)
                                        (list dummy expected))
                              (!expect (#try.Failure _)))))
            ))))
