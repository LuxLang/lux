(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test]]
    ["[0]" apply
     ["[1]T" \\test]]
    [\\specification
     ["$[0]" hash]]
    ["[0]" monoid
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["[0]" io (.use "[1]#[0]" monad)]
    ["[0]" pipe]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.use "[1]#[0]" monoid monad)]])

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [.Maybe
              .#None .#Some])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec (/.equivalence n.equivalence) (random.maybe random.nat)))
           (_.for [/.hash]
                  (|> random.nat
                      (of random.monad each (|>> {.#Some}))
                      ($hash.spec (/.hash n.hash))))
           (_.for [/.monoid]
                  (monoidT.spec (/.equivalence n.equivalence) /.monoid (random.maybe random.nat)))
           (_.for [/.functor]
                  (functorT.spec /#in /.equivalence /.functor))
           (_.for [/.apply]
                  (applyT.spec /#in /.equivalence /.apply))
           (_.for [/.monad]
                  (monadT.spec /#in /.equivalence /.monad))
           
           (do random.monad
             [left random.nat
              right random.nat
              .let [expected (n.+ left right)]]
             (let [lifted (/.lifted io.monad)]
               (_.coverage [/.with /.lifted]
                 (|> (io.run! (do (/.with io.monad)
                                [a (lifted (io#in left))
                                 b (in right)]
                                (in (n.+ a b))))
                     (pipe.when
                       {.#Some actual}
                       (n.= expected actual)

                       _
                       false)))))
           (do random.monad
             [default random.nat
              value random.nat]
             (_.coverage [/.else]
               (and (same? default (/.else default
                                           (is (Maybe Nat)
                                               {.#None})))

                    (same? value (/.else default
                                         {.#Some value})))))
           (do random.monad
             [value random.nat]
             (_.coverage [/.trusted]
               (same? value (/.trusted {.#Some value}))))
           (do random.monad
             [value random.nat]
             (_.coverage [/.list]
               (of (list.equivalence n.equivalence) =
                   (list value)
                   (/.list {.#Some value}))))
           (do random.monad
             [expected random.nat
              .let [(open "/#[0]") (/.equivalence n.equivalence)]]
             (_.coverage [/.when]
               (and (/#= {.#Some expected} (/.when true {.#Some expected}))
                    (/#= {.#None} (/.when false {.#Some expected})))))
           )))
