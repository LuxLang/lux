... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["f" frac]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(every (Shape @)
  (Record
   [#perimeter (/.Method @ [] Frac)
    #area (/.Method @ [] Frac)]))

(every Circle
  (Record
   [#radius Frac]))

(the circle
  (/.Class Shape Circle)
  [#perimeter (/.method
                (function (_ next again [this _])
                  (all f.* +2.0 f.pi (its #radius this))))
   #area (/.method
           (function (_ next again [this _])
             (let [radius (its #radius this)]
               (all f.* f.pi radius radius))))])

(every Square
  (Record
   [#side Frac]))

(the square
  (/.Class Shape Square)
  [#perimeter (/.method
                (function (_ next again [this _])
                  (all f.* +4.0 (its #side this))))
   #area (/.method
           (function (_ next again [this _])
             (let [side (its #side this)]
               (all f.* side side))))])

(the (scaled scalar)
  (-> Frac (/.Class Shape Frac)
      (/.Class Shape Frac))
  (|>> (/.override #perimeter
                   (function (_ next again [this input])
                     (all f.*
                          scalar
                          (next [this input]))))
       (/.override #area
                   (function (_ next again [this input])
                     (all f.*
                          scalar scalar
                          (next [this input]))))))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [radius random.safe_frac
         side random.safe_frac
         scale random.safe_frac])
      (_.for [/.Object])
      (all _.and
           (_.coverage [/.Class /.new /.class]
             (|> [#side side]
                 (/.new ..square)
                 (is (/.Object Shape Square))
                 /.class
                 (same? ..square)))
           (_.coverage [/.Method
                        /.#complete /.#partial
                        /.method /.on]
             (let [it (is (/.Object Shape Circle)
                          (/.new circle [#radius radius]))]
               (not (f.= (/.on #perimeter [] it)
                         (/.on #area [] it)))))
           (_.coverage [/.override]
             (and (f.= (/.on #perimeter [] (/.new ..square [#radius (f.* scale radius)]))
                       (/.on #perimeter [] (/.new (..scaled scale ..square) [#radius radius])))
                  (f.= (/.on #area [] (/.new ..square [#radius (f.* scale radius)]))
                       (/.on #area [] (/.new (..scaled scale ..square) [#radius radius])))))
           )))
