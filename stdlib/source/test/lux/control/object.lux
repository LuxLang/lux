... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]
     ["f" frac]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(every Shape
  (/.Class
   [#perimeter (/.Method [] Frac)
    #area (/.Method [] Frac)]))

(every Circle
  (Record
   [#radius Frac]))

(the circle
  (Shape Circle)
  [#perimeter (/.method
                (function (_ next again [this _])
                  (all f.* +2.0 f.pi (its #radius (/.state this)))))
   #area (/.method
           (function (_ next again [this _])
             (let [radius (its #radius (/.state this))]
               (all f.* f.pi radius radius))))])

(every Square
  (Record
   [#side Frac]))

(the square
  (Shape Square)
  [#perimeter (/.method
                (function (_ next again [this _])
                  (all f.* +4.0 (its #side (/.state this)))))
   #area (/.method
           (function (_ next again [this _])
             (let [side (its #side (/.state this))]
               (all f.* side side))))])

(the (scaled scalar)
  (-> Frac (Shape Frac)
      (Shape Frac))
  (|>> (/.override #perimeter
                   (function (_ next again [this input])
                     (all f.*
                          scalar
                          (next [this input]))))
       (/.override #area
                   (function (_ next again [this input])
                     (all f.*
                          scalar scalar
                          (next [this input]))))))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [.let [value (is (Random Frac)
                         (of ! each
                             (|>> (n.% 100) n.frac)
                             random.nat))]
         radius value
         side value
         scale value])
      (_.for [/.Class
              /.Instance /.Object])
      (all _.and
           (_.coverage [/.new /.class]
             (|> [#side side]
                 (/.new ..square)
                 (is (/.Object Shape Square))
                 /.class
                 (same? ..square)))
           (_.coverage [/.instance?]
             (and (|> [#side side]
                      (/.new ..square)
                      (is (/.Object Shape Square))
                      (/.instance? ..square))
                  (|> [#side side]
                      (/.new ..square)
                      (is (/.Object Shape Square))
                      (/.instance? ..circle)
                      not)))
           (_.coverage [/.state]
             (and (|> [#side side]
                      (/.new ..square)
                      (is (/.Object Shape Square))
                      /.state
                      (same? side))
                  (|> [#radius radius]
                      (/.new ..circle)
                      (is (/.Object Shape Circle))
                      /.state
                      (same? radius))))
           (_.coverage [/.Method
                        /.#complete /.#partial
                        
                        /.method /.on]
             (let [it (is (/.Object Shape Circle)
                          (/.new circle [#radius radius]))]
               (not (f.= (/.on #perimeter [] it)
                         (/.on #area [] it)))))
           (_.coverage [/.override]
             (and (f.= (/.on #perimeter [] (/.new ..square [#radius (f.* scale radius)]))
                       (/.on #perimeter [] (/.new (..scaled scale ..square) [#radius radius])))
                  (f.= (/.on #area [] (/.new ..square [#radius (f.* scale radius)]))
                       (/.on #area [] (/.new (..scaled scale ..square) [#radius radius])))))
           )))
