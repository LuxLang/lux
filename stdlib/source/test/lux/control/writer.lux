(.module:
  [lux #*
   ["_" test (#+ Test)]
   ["." io]
   [control
    [equivalence (#+ Equivalence)]
    [monoid (#+ Monoid)]
    [monad (#+ do)]
    {[0 #test]
     [/
      [".T" functor (#+ Injection Comparison)]
      [".T" apply]
      [".T" monad]]}]
   [data
    ["." product]
    ["." text ("#/." equivalence)
     format]]
   [math
    ["r" random]]]
  {1
   ["." / (#+ Writer)]})

(def: (injection monoid value)
  (All [w] (-> (Monoid w) (Injection (Writer w))))
  [(:: monoid identity) value])

(def: comparison
  (All [w] (Comparison (Writer w)))
  (function (_ == [_ left] [_ right])
    (== left right)))

(def: #export test
  Test
  (do r.monad
    [log (r.ascii 1)
     left r.nat
     right r.nat]
    (<| (_.context (%name (name-of /.Writer)))
        ($_ _.and
            (_.test "Can write any value."
                    (text/= log
                            (product.left (/.write log))))

            (functorT.laws (..injection text.monoid) ..comparison /.functor)
            (applyT.laws (..injection text.monoid) ..comparison (/.apply text.monoid))
            (monadT.laws (..injection text.monoid) ..comparison (/.monad text.monoid))
            
            (let [lift (/.lift text.monoid io.monad)
                  (^open "io/.") io.monad]
              (_.test "Can add writer functionality to any monad."
                      (|> (io.run (do (/.with-writer text.monoid io.monad)
                                    [a (lift (io/wrap left))
                                     b (wrap right)]
                                    (wrap (n/+ a b))))
                          product.right
                          (n/= (n/+ left right)))))
            ))))
