... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [monoid (.only Monoid)]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    ["[0]" monad (.only)
     ["[1]T" \\test]]]
   [control
    ["[0]" io]]
   [data
    ["[0]" text]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 ["/" \\library (.only Writer)]
 ["!" \\theorem])

(the (injection monoid value)
  (for_any (_ w)
    (-> (Monoid w)
        (Injection (Writer w))))
  [(by monoid identity)
   value])

(the comparison
  (for_any (_ w)
    (Comparison (Writer w)))
  (function (_ == [_ left] [_ right])
    (== left right)))

(the .public test
  Test
  (monad.let random.monad
    [trace (random.ascii 1)
     left random.natural
     right random.natural]
    (<| (_.covering /._)
        (_.for [/.Writer
                /.:trace /.:value])
        (all _.and
             (_.by_proof [/.functor]
                         (list (_.model !.functor)))
             (_.for [/.monad]
                    (monadT.spec (..injection text.monoid) ..comparison (/.monad text.monoid)))

             (_.by_proof [/.write]
                         (list (_.identity !.write)))
             (_.coverage [/.With /.with /.lifted]
               (let [lifted (/.lifted text.monoid io.monad)
                     (open "io:[0]") io.monad]
                 (|> (monad.let (/.with text.monoid io.monad)
                       [a (lifted (io:pure left))
                        b (pure right)]
                       (pure (n.+ a b)))
                     io.value
                     (its /.:value)
                     (n.= (n.+ left right)))))
             ))))
