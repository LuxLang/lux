... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]
    ["[0]" monad (.only Monad do)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Comparison)]]]
   [data
    ["[0]" product]
    [collection
     ["[0]" sequence (.only sequence)]]]
   [math
    ["[0]" random]
    [number
     ["[0]" natural]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the (comparison yield_equivalence)
  (for_any (_ yield)
    (-> (Equivalence yield)
        (Comparison (/.Stream yield))))
  (function (_ value_equivalence reference it)
    (let [[reference_yield reference_value] (/.sequence reference)
          [it_yield it_value] (/.sequence it)]
      (and (by (sequence.equivalence yield_equivalence) = reference_yield it_yield)
           (by value_equivalence = reference_value reference_value)))))

(the .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [_0 random.natural
         _1 random.natural
         _2 random.natural])
      (_.for [/.Stream])
      (all _.and
           (_.for [/.functor]
                  (functorT.spec (by /.monad in) (..comparison natural.equivalence) /.functor))
           (_.for [/.monad]
                  (monadT.spec (by /.monad in) (..comparison natural.equivalence) /.monad))

           (<| (_.for [/.sequence])
               (all _.and
                    (_.coverage [/.one]
                      (|> (do /.monad
                            [_ (/.one _1)

                             _ (/.one _2)
                             _ (/.one _2)]
                            (in []))
                          /.sequence
                          product.left
                          (by (sequence.equivalence natural.equivalence) =
                              (sequence _1
                                        _2 _2))))
                    (_.coverage [/.many]
                      (|> (do /.monad
                            [_ (/.many (list))
                             _ (/.many (list _1))
                             _ (/.many (list _2 _2))]
                            (in []))
                          /.sequence
                          product.left
                          (by (sequence.equivalence natural.equivalence) =
                              (sequence _1
                                        _2 _2))))
                    ))
           )))
