(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    [equivalence (#+ Equivalence)]
    {[0 #test]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [control
    ["." try (#+ Try)]
    [parser
     ["s" code]]]
   [data
    [number
     ["n" nat]]
    ["." text ("#;." equivalence)
     ["%" format (#+ format)]]
    [collection
     ["." list ("#;." functor)]]]
   [math
    ["r" random]]
   [macro
    ["." code]
    [syntax (#+ syntax:)]]]
  {1
   ["." / (#+ Parser)]})

(def: (should-fail expected input)
  (All [a] (-> Text (Try a) Bit))
  (case input
    (#try.Failure actual)
    (text;= expected actual)
    
    _
    #0))

(def: (enforced? parser input)
  (All [s] (-> (Parser s Any) s Bit))
  (case (/.run parser input)
    (#try.Success [_ []])
    #1

    _
    #0))

(def: (found? parser input)
  (All [s] (-> (Parser s Bit) s Bit))
  (case (/.run parser input)
    (#try.Success [_ #1])
    #1

    _
    #0))

(def: (fails? input)
  (All [a] (-> (Try a) Bit))
  (case input
    (#try.Failure _)
    #1

    _
    #0))

(syntax: (match pattern then input)
  (wrap (list (` (case (~ input)
                   (^ (#try.Success [(~' _) (~ pattern)]))
                   (~ then)

                   (~' _)
                   #0)))))

(def: combinators-0
  Test
  (do r.monad
    [expected0 r.nat
     variadic (:: @ map (|>> (n.max 1) (n.min 20)) r.nat)
     expected+ (r.list variadic r.nat)
     even0 (r.filter n.even? r.nat)
     odd0 (r.filter n.odd? r.nat)
     not0 r.bit]
    ($_ _.and
        (_.test "Can optionally succeed with some parser."
                (and (|> (list (code.nat expected0))
                         (/.run (/.maybe s.nat))
                         (match (#.Some actual)
                                (n.= expected0 actual)))
                     (|> (list (code.int (.int expected0)))
                         (/.run (/.maybe s.nat))
                         (match #.None
                                #1))))
        (_.test "Can apply a parser 0 or more times."
                (and (|> (list;map code.nat expected+)
                         (/.run (/.some s.nat))
                         (match actual
                                (:: (list.equivalence n.equivalence) = expected+ actual)))
                     (|> (list;map (|>> .int code.int) expected+)
                         (/.run (/.some s.nat))
                         (match #.Nil
                                #1))))
        (_.test "Can apply a parser 1 or more times."
                (and (|> (list;map code.nat expected+)
                         (/.run (/.many s.nat))
                         (match actual
                                (:: (list.equivalence n.equivalence) = expected+ actual)))
                     (|> (list (code.nat expected0))
                         (/.run (/.many s.nat))
                         (match (list actual)
                                (n.= expected0 actual)))
                     (|> (list;map (|>> .int code.int) expected+)
                         (/.run (/.many s.nat))
                         fails?)))
        (_.test "Can use either parser."
                (let [even (/.filter n.even? s.nat)
                      odd (/.filter n.odd? s.nat)]
                  (and (|> (list (code.nat even0))
                           (/.run (/.either even odd))
                           (match actual (n.= even0 actual)))
                       (|> (list (code.nat odd0))
                           (/.run (/.either even odd))
                           (match actual (n.= odd0 actual)))
                       (|> (list (code.bit not0))
                           (/.run (/.either even odd))
                           fails?))))
        (_.test "Can create the opposite/negation of any parser."
                (and (|> (list (code.nat expected0))
                         (/.run (/.not s.nat))
                         fails?)
                     (|> (list (code.bit not0))
                         (/.run (/.not s.nat))
                         (match [] #1))))
        )))

(def: combinators-1
  Test
  (do r.monad
    [failure (r.ascii 1)
     variadic (:: @ map (|>> (n.max 1) (n.min 20)) r.nat)
     times (:: @ map (n.% variadic) r.nat)
     expected+ (r.list variadic r.nat)
     separator (r.ascii 1)]
    ($_ _.and
        (_.test "Can fail at will."
                (|> (list)
                    (/.run (/.fail failure))
                    (should-fail failure)))
        (_.test "Can apply a parser N times."
                (and (|> (list;map code.nat expected+)
                         (/.run (/.exactly times s.nat))
                         (match actual
                                (:: (list.equivalence n.equivalence) =
                                    (list.take times expected+)
                                    actual)))
                     (|> (list;map code.nat expected+)
                         (/.run (/.exactly (inc variadic) s.nat))
                         fails?)))
        (_.test "Can apply a parser at-least N times."
                (and (|> (list;map code.nat expected+)
                         (/.run (/.at-least times s.nat))
                         (match actual
                                (:: (list.equivalence n.equivalence) =
                                    expected+
                                    actual)))
                     (|> (list;map code.nat expected+)
                         (/.run (/.at-least (inc variadic) s.nat))
                         fails?)))
        (_.test "Can apply a parser at-most N times."
                (and (|> (list;map code.nat expected+)
                         (/.run (/.at-most times s.nat))
                         (match actual
                                (:: (list.equivalence n.equivalence) =
                                    (list.take times expected+)
                                    actual)))
                     (|> (list;map code.nat expected+)
                         (/.run (/.at-most (inc variadic) s.nat))
                         (match actual
                                (:: (list.equivalence n.equivalence) =
                                    expected+
                                    actual)))))
        (_.test "Can apply a parser between N and M times."
                (and (|> (list;map code.nat expected+)
                         (/.run (/.between times variadic s.nat))
                         (match actual
                                (:: (list.equivalence n.equivalence) =
                                    expected+
                                    actual)))
                     (|> (list;map code.nat (list.take times expected+))
                         (/.run (/.between times variadic s.nat))
                         (match actual
                                (:: (list.equivalence n.equivalence) =
                                    (list.take times expected+)
                                    actual)))))
        (_.test "Can parse while taking separators into account."
                (|> (list.interpose (code.text separator) (list;map code.nat expected+))
                    (/.run (/.sep-by (s.this! (code.text separator)) s.nat))
                    (match actual
                           (:: (list.equivalence n.equivalence) =
                               expected+
                               actual))))
        (_.test "Can obtain the whole of the remaining input."
                (|> (list;map code.nat expected+)
                    (/.run /.remaining)
                    (match actual
                           (:: (list.equivalence code.equivalence) =
                               (list;map code.nat expected+)
                               actual))))
        )))

(def: (injection value)
  (Injection (All [a i] (Parser i a)))
  (:: /.monad wrap value))

(def: comparison
  (Comparison (All [a i] (Parser i a)))
  (function (_ == left right)
    (case [(/.run left []) (/.run right [])]
      [(#try.Success [_ left]) (#try.Success [_ right])]
      (== left right)

      _
      false)))

(def: #export test
  Test
  (do r.monad
    [assertion (r.ascii 1)]
    (<| (_.context (%.name (name-of /.Parser)))
        ($_ _.and
            ($functor.spec ..injection ..comparison /.functor)
            ($apply.spec ..injection ..comparison /.apply)
            ($monad.spec ..injection ..comparison /.monad)

            (_.test "Can make assertions while parsing."
                    (and (|> (list (code.bit #1) (code.int +123))
                             (/.run (/.assert assertion #1))
                             (match [] #1))
                         (|> (list (code.bit #1) (code.int +123))
                             (/.run (/.assert assertion #0))
                             fails?)))
            ..combinators-0
            ..combinators-1
            ))))
