(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    [equivalence (#+ Equivalence)]
    {[0 #spec]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [control
    ["." try (#+ Try)]
    [parser
     ["s" code]]]
   [data
    [number
     ["n" nat]]
    ["." text ("#\." equivalence)
     ["%" format (#+ format)]]
    [collection
     ["." list ("#\." functor)]]]
   [math
    ["." random]]
   [macro
    ["." code]
    [syntax (#+ syntax:)]]]
  {1
   ["." / (#+ Parser)]}
  ["." / #_
   ["#." analysis]
   ["#." binary]
   ["#." cli]
   ["#." code]
   ["#." environment]
   ["#." json]
   ["#." synthesis]
   ["#." text]
   ["#." tree]
   ["#." type]
   ["#." xml]])

(def: (should_fail expected input)
  (All [a] (-> Text (Try a) Bit))
  (case input
    (#try.Failure actual)
    (text\= expected actual)
    
    _
    #0))

(def: (enforced? parser input)
  (All [s] (-> (Parser s Any) s Bit))
  (case (/.run parser input)
    (#try.Success [_ []])
    #1

    _
    #0))

(def: (found? parser input)
  (All [s] (-> (Parser s Bit) s Bit))
  (case (/.run parser input)
    (#try.Success [_ #1])
    #1

    _
    #0))

(def: (fails? input)
  (All [a] (-> (Try a) Bit))
  (case input
    (#try.Failure _)
    #1

    _
    #0))

(syntax: (match pattern then input)
  (wrap (list (` (case (~ input)
                   (^ (#try.Success [(~' _) (~ pattern)]))
                   (~ then)

                   (~' _)
                   #0)))))

(def: combinators_0
  Test
  (do {! random.monad}
    [expected0 random.nat
     variadic (\ ! map (|>> (n.max 1) (n.min 20)) random.nat)
     expected+ (random.list variadic random.nat)
     even0 (random.filter n.even? random.nat)
     odd0 (random.filter n.odd? random.nat)
     not0 random.bit]
    ($_ _.and
        (_.cover [/.maybe]
                 (and (|> (list (code.nat expected0))
                          (/.run (/.maybe s.nat))
                          (match (#.Some actual)
                                 (n.= expected0 actual)))
                      (|> (list (code.int (.int expected0)))
                          (/.run (/.maybe s.nat))
                          (match #.None
                                 #1))))
        (_.cover [/.some]
                 (and (|> (list\map code.nat expected+)
                          (/.run (/.some s.nat))
                          (match actual
                                 (\ (list.equivalence n.equivalence) = expected+ actual)))
                      (|> (list\map (|>> .int code.int) expected+)
                          (/.run (/.some s.nat))
                          (match #.Nil
                                 #1))))
        (_.cover [/.many]
                 (and (|> (list\map code.nat expected+)
                          (/.run (/.many s.nat))
                          (match actual
                                 (\ (list.equivalence n.equivalence) = expected+ actual)))
                      (|> (list (code.nat expected0))
                          (/.run (/.many s.nat))
                          (match (list actual)
                                 (n.= expected0 actual)))
                      (|> (list\map (|>> .int code.int) expected+)
                          (/.run (/.many s.nat))
                          fails?)))
        (_.cover [/.filter]
                 (and (|> (list (code.nat even0))
                          (/.run (/.filter n.even? s.nat))
                          (match actual (n.= even0 actual)))
                      (|> (list (code.nat odd0))
                          (/.run (/.filter n.even? s.nat))
                          fails?)))
        (_.cover [/.and]
                 (let [even (/.filter n.even? s.nat)
                       odd (/.filter n.odd? s.nat)]
                   (and (|> (list (code.nat even0) (code.nat odd0))
                            (/.run (/.and even odd))
                            (match [left right]
                                   (and (n.= even0 left)
                                        (n.= odd0 right))))
                        (|> (list (code.nat odd0) (code.nat even0))
                            (/.run (/.and even odd))
                            fails?))))
        (_.cover [/.or]
                 (let [even (/.filter n.even? s.nat)
                       odd (/.filter n.odd? s.nat)]
                   (and (|> (list (code.nat even0))
                            (/.run (/.or even odd))
                            (match (#.Left actual) (n.= even0 actual)))
                        (|> (list (code.nat odd0))
                            (/.run (/.or even odd))
                            (match (#.Right actual) (n.= odd0 actual)))
                        (|> (list (code.bit not0))
                            (/.run (/.or even odd))
                            fails?))))
        (_.cover [/.either]
                 (let [even (/.filter n.even? s.nat)
                       odd (/.filter n.odd? s.nat)]
                   (and (|> (list (code.nat even0))
                            (/.run (/.either even odd))
                            (match actual (n.= even0 actual)))
                        (|> (list (code.nat odd0))
                            (/.run (/.either even odd))
                            (match actual (n.= odd0 actual)))
                        (|> (list (code.bit not0))
                            (/.run (/.either even odd))
                            fails?))))
        (_.cover [/.not]
                 (and (|> (list (code.nat expected0))
                          (/.run (/.not s.nat))
                          fails?)
                      (|> (list (code.bit not0))
                          (/.run (/.not s.nat))
                          (match [] #1))))
        )))

(def: combinators_1
  Test
  (do {! random.monad}
    [variadic (\ ! map (|>> (n.max 1) (n.min 20)) random.nat)
     times (\ ! map (n.% variadic) random.nat)
     expected random.nat
     wrong (|> random.nat (random.filter (|>> (n.= expected) not)))
     expected+ (random.list variadic random.nat)
     separator (random.ascii 1)]
    ($_ _.and
        (_.cover [/.exactly]
                 (and (|> (list\map code.nat expected+)
                          (/.run (/.exactly times s.nat))
                          (match actual
                                 (\ (list.equivalence n.equivalence) =
                                    (list.take times expected+)
                                    actual)))
                      (|> (list\map code.nat expected+)
                          (/.run (/.exactly (inc variadic) s.nat))
                          fails?)))
        (_.cover [/.at_least]
                 (and (|> (list\map code.nat expected+)
                          (/.run (/.at_least times s.nat))
                          (match actual
                                 (\ (list.equivalence n.equivalence) =
                                    expected+
                                    actual)))
                      (|> (list\map code.nat expected+)
                          (/.run (/.at_least (inc variadic) s.nat))
                          fails?)))
        (_.cover [/.at_most]
                 (and (|> (list\map code.nat expected+)
                          (/.run (/.at_most times s.nat))
                          (match actual
                                 (\ (list.equivalence n.equivalence) =
                                    (list.take times expected+)
                                    actual)))
                      (|> (list\map code.nat expected+)
                          (/.run (/.at_most (inc variadic) s.nat))
                          (match actual
                                 (\ (list.equivalence n.equivalence) =
                                    expected+
                                    actual)))))
        (_.cover [/.between]
                 (and (|> (list\map code.nat expected+)
                          (/.run (/.between times variadic s.nat))
                          (match actual
                                 (\ (list.equivalence n.equivalence) =
                                    expected+
                                    actual)))
                      (|> (list\map code.nat (list.take times expected+))
                          (/.run (/.between times variadic s.nat))
                          (match actual
                                 (\ (list.equivalence n.equivalence) =
                                    (list.take times expected+)
                                    actual)))))
        (_.cover [/.sep_by]
                 (|> (list.interpose (code.text separator) (list\map code.nat expected+))
                     (/.run (/.sep_by (s.this! (code.text separator)) s.nat))
                     (match actual
                            (\ (list.equivalence n.equivalence) =
                               expected+
                               actual))))
        (_.cover [/.remaining]
                 (|> (list\map code.nat expected+)
                     (/.run /.remaining)
                     (match actual
                            (\ (list.equivalence code.equivalence) =
                               (list\map code.nat expected+)
                               actual))))
        (_.cover [/.default]
                 (and (|> (/.run (/.default wrong (\ /.monad wrap expected)) (list))
                          (match actual (n.= expected actual)))
                      (|> (/.run (/.default expected (: (Parser (List Code) Nat)
                                                        (/.fail "yolo")))
                                 (list))
                          (match actual (n.= expected actual)))
                      ))
        )))

(def: combinators_2
  Test
  (do random.monad
    [expected random.nat
     even (random.filter n.even? random.nat)
     odd (random.filter n.odd? random.nat)
     #let [nat^ s.nat
           even^ (/.filter n.even? s.nat)
           odd^ (/.filter n.odd? s.nat)]]
    ($_ _.and
        (_.cover [/.rec]
                 (let [parser (/.rec (function (_ self)
                                       (/.either s.nat
                                                 (s.tuple self))))
                       level_0 (code.nat expected)
                       level_up (: (-> Code Code)
                                   (|>> list code.tuple))]
                   (and (|> (list level_0)
                            (/.run parser)
                            (match actual (n.= expected actual)))
                        (|> (list (level_up level_0))
                            (/.run parser)
                            (match actual (n.= expected actual)))
                        (|> (list (level_up (level_up level_0)))
                            (/.run parser)
                            (match actual (n.= expected actual))))))
        (_.cover [/.after]
                 (and (|> (/.run (/.after even^ s.nat)
                                 (list (code.nat even) (code.nat expected)))
                          (match actual (n.= expected actual)))
                      (|> (/.run (/.after even^ s.nat)
                                 (list (code.nat odd) (code.nat expected)))
                          fails?)))
        (_.cover [/.before]
                 (and (|> (/.run (/.before even^ s.nat)
                                 (list (code.nat expected) (code.nat even)))
                          (match actual (n.= expected actual)))
                      (|> (/.run (/.before even^ s.nat)
                                 (list (code.nat expected) (code.nat odd)))
                          fails?)))
        (_.cover [/.parses?]
                 (and (|> (/.run (/.parses? even^)
                                 (list (code.nat even)))
                          (match verdict verdict))
                      (|> (/.run (/.parses? even^)
                                 (list (code.nat odd)))
                          (match verdict (not verdict)))))
        (_.cover [/.parses]
                 (and (|> (/.run (/.parses even^)
                                 (list (code.nat even)))
                          (match [] true))
                      (|> (/.run (/.parses even^)
                                 (list (code.nat odd)))
                          fails?)))
        (_.cover [/.speculative]
                 (let [happy_path!
                       (|> (/.run (/.and (/.speculative even^) nat^)
                                  (list (code.nat even)))
                           (match [speculation actual]
                                  (and (n.= speculation actual)
                                       (n.= even actual))))

                       sad_path!
                       (|> (/.run (/.and (/.speculative even^) nat^)
                                  (list (code.nat odd)))
                           fails?)]
                   (and happy_path!
                        sad_path!)))
        (_.cover [/.codec]
                 (|> (/.run (/.codec n.decimal s.text)
                            (list (code.text (%.nat expected))))
                     (match actual (n.= expected actual))))
        )))

(def: injection
  (Injection (All [a i] (Parser i a)))
  (\ /.monad wrap))

(def: comparison
  (Comparison (All [a i] (Parser i a)))
  (function (_ == left right)
    (case [(/.run left []) (/.run right [])]
      [(#try.Success [_ left]) (#try.Success [_ right])]
      (== left right)

      _
      false)))

(def: #export test
  Test
  (do random.monad
    [expected random.nat
     failure (random.ascii 1)
     assertion (random.ascii 1)]
    (<| (_.covering /._)
        (_.for [/.Parser])
        ($_ _.and
            (_.for [/.functor]
                   ($functor.spec ..injection ..comparison /.functor))
            (_.for [/.apply]
                   ($apply.spec ..injection ..comparison /.apply))
            (_.for [/.monad]
                   ($monad.spec ..injection ..comparison /.monad))

            (_.cover [/.run]
                     (|> (/.run (\ /.monad wrap expected) (list))
                         (match actual (n.= expected actual))))
            (_.cover [/.fail]
                     (|> (list)
                         (/.run (/.fail failure))
                         (should_fail failure)))
            (_.cover [/.lift]
                     (and (|> (list)
                              (/.run (/.lift (#try.Success expected)))
                              (match actual (n.= expected actual)))
                          (|> (list)
                              (/.run (/.lift (#try.Failure failure)))
                              (should_fail failure))))
            (_.cover [/.assert]
                     (and (|> (list (code.bit #1) (code.int +123))
                              (/.run (/.assert assertion #1))
                              (match [] true))
                          (|> (list (code.bit #1) (code.int +123))
                              (/.run (/.assert assertion #0))
                              fails?)))
            ..combinators_0
            ..combinators_1
            ..combinators_2

            /analysis.test
            /binary.test
            /cli.test
            /code.test
            /environment.test
            /json.test
            /synthesis.test
            /text.test
            /tree.test
            /type.test
            /xml.test
            ))))
