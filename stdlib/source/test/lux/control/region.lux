... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]
    [apply (.only Apply)]
    ["[0]" enum]
    ["[0]" monad (.only Monad do)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    ["[0]" apply
     ["[1]T" \\test]]]
   [control
    ["[0]" try (.only Try)]]
   [data
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [meta
    [type (.only sharing)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only Region)
   [//
    ["[0]" thread (.only Thread)]
    ["[0]" exception (.only Exception)]]]])

(exception.the oops)

(the (success? it)
  (for_any (_ a) (-> (Try a) Bit))
  (when it
    {try.#Success _}
    true
    
    {try.#Failure _}
    false))

(the (throws? exception it)
  (for_any (_ e a) (-> (Exception e) (Try a) Bit))
  (when it
    {try.#Success _}
    false
    
    {try.#Failure error}
    (exception.is? exception error)))

(the (injection value)
  (Injection (for_any (_ a) (for_any (_ ! r) (Region r (Thread !) a))))
  (function (_ [region scope])
    (function (_ !)
      [scope
       {try.#Success value}])))

(the comparison
  (Comparison (for_any (_ a) (for_any (_ ! r) (Region r (Thread !) a))))
  (function (_ == left right)
    (when [(sharing [a]
             (is (Equivalence a)
                 ==)
             (is (Try a)
                 (thread.value (as_expected (/.value thread.monad left)))))
           (sharing [a]
             (is (Equivalence a)
                 ==)
             (is (Try a)
                 (thread.value (as_expected (/.value thread.monad right)))))]
      [{try.#Success left} {try.#Success right}]
      (== left right)

      _
      false)))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Region])
      (do [! random.monad]
        [expected_clean_ups (|> random.natural (by ! each (|>> (n.% 100) (n.major 1))))]
        (all _.and
             (_.for [/.functor]
                    (functorT.spec ..injection ..comparison (is (for_any (_ ! r)
                                                                  (Functor (Region r (thread.Thread !))))
                                                                (/.functor thread.functor))))
             (_.for [/.apply]
                    (applyT.spec ..injection ..comparison (is (for_any (_ ! r)
                                                                (Apply (Region r (thread.Thread !))))
                                                              (/.apply thread.monad))))
             (_.for [/.monad]
                    (monadT.spec ..injection ..comparison (is (for_any (_ ! r)
                                                                (Monad (Region r (thread.Thread !))))
                                                              (/.monad thread.monad))))
             
             (_.coverage [/.value]
               (thread.value
                (do [! thread.monad]
                  [clean_up_counter (thread.box 0)
                   .let [//@ !
                         count_clean_up (function (_ value)
                                          (do !
                                            [_ (thread.update! ++ clean_up_counter)]
                                            (in {try.#Success []})))]
                   outcome (/.value !
                                    (do [! (/.monad !)]
                                      [_ (monad.each ! (/.acquire! //@ count_clean_up)
                                                     (enum.range n.enum 1 expected_clean_ups))]
                                      (in [])))
                   actual_clean_ups (thread.read! clean_up_counter)]
                  (in (and (..success? outcome)
                           (n.= expected_clean_ups
                                actual_clean_ups))))))
             (_.coverage [/.failure]
               (thread.value
                (do [! thread.monad]
                  [clean_up_counter (thread.box 0)
                   .let [//@ !
                         count_clean_up (function (_ value)
                                          (do !
                                            [_ (thread.update! ++ clean_up_counter)]
                                            (in {try.#Success []})))]
                   outcome (/.value !
                                    (do [! (/.monad !)]
                                      [_ (monad.each ! (/.acquire! //@ count_clean_up)
                                                     (enum.range n.enum 1 expected_clean_ups))
                                       _ (/.failure //@ (exception.error ..oops []))]
                                      (in [])))
                   actual_clean_ups (thread.read! clean_up_counter)]
                  (in (and (..throws? ..oops outcome)
                           (n.= expected_clean_ups
                                actual_clean_ups))))))
             (_.coverage [/.except]
               (thread.value
                (do [! thread.monad]
                  [clean_up_counter (thread.box 0)
                   .let [//@ !
                         count_clean_up (function (_ value)
                                          (do !
                                            [_ (thread.update! ++ clean_up_counter)]
                                            (in {try.#Success []})))]
                   outcome (/.value !
                                    (do [! (/.monad !)]
                                      [_ (monad.each ! (/.acquire! //@ count_clean_up)
                                                     (enum.range n.enum 1 expected_clean_ups))
                                       _ (/.except //@ ..oops [])]
                                      (in [])))
                   actual_clean_ups (thread.read! clean_up_counter)]
                  (in (and (..throws? ..oops outcome)
                           (n.= expected_clean_ups
                                actual_clean_ups))))))
             (_.coverage [/.acquire! /.clean_up_error]
               (thread.value
                (do [! thread.monad]
                  [clean_up_counter (thread.box 0)
                   .let [//@ !
                         count_clean_up (function (_ value)
                                          (do !
                                            [_ (thread.update! ++ clean_up_counter)]
                                            (in (is (Try Any)
                                                    (exception.except ..oops [])))))]
                   outcome (/.value !
                                    (do [! (/.monad !)]
                                      [_ (monad.each ! (/.acquire! //@ count_clean_up)
                                                     (enum.range n.enum 1 expected_clean_ups))]
                                      (in [])))
                   actual_clean_ups (thread.read! clean_up_counter)]
                  (in (and (or (n.= 0 expected_clean_ups)
                               (..throws? /.clean_up_error outcome))
                           (n.= expected_clean_ups
                                actual_clean_ups))))))
             (_.coverage [/.lifted]
               (thread.value
                (do [! thread.monad]
                  [clean_up_counter (thread.box 0)
                   .let [//@ !]
                   outcome (/.value !
                                    (do (/.monad !)
                                      [_ (/.lifted //@ (thread.write! expected_clean_ups clean_up_counter))]
                                      (in [])))
                   actual_clean_ups (thread.read! clean_up_counter)]
                  (in (and (..success? outcome)
                           (n.= expected_clean_ups
                                actual_clean_ups))))))
             ))))
