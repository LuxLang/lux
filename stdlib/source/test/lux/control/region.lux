(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    ["." monad (#+ do)]]
   [control
    ["." try (#+ Try)]]
   [data
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list]]]
   [math
    ["r" random]]]
  {1
   ["." /
    [//
     ["." thread (#+ Thread)]
     ["ex" exception (#+ exception:)]]]})

(exception: oops)

(template [<name> <success> <error>]
  [(def: (<name> result)
     (All [a] (-> (Try a) Bit))
     (case result
       (#try.Success _)
       <success>
       
       (#try.Failure _)
       <error>))]

  [success? #1 #0]
  [failure? #0 #1]
  )

(def: #export test
  Test
  (<| (_.context (%.name (name-of /._)))
      (do r.monad
        [expected-clean-ups (|> r.nat (:: @ map (|>> (n/% 100) (n/max 1))))]
        ($_ _.and
            (_.test "Clean-up functions are always run when region execution is done."
                    (thread.run
                     (do thread.monad
                       [clean-up-counter (thread.box 0)
                        #let [@@ @
                              count-clean-up (function (_ value)
                                               (do @
                                                 [_ (thread.update inc clean-up-counter)]
                                                 (wrap (#try.Success []))))]
                        outcome (/.run @
                                       (do (/.monad @)
                                         [_ (monad.map @ (/.acquire @@ count-clean-up)
                                                       (list.n/range 1 expected-clean-ups))]
                                         (wrap [])))
                        actual-clean-ups (thread.read clean-up-counter)]
                       (wrap (and (success? outcome)
                                  (n/= expected-clean-ups
                                       actual-clean-ups))))))
            (_.test "Can clean-up despite errors."
                    (thread.run
                     (do thread.monad
                       [clean-up-counter (thread.box 0)
                        #let [@@ @
                              count-clean-up (function (_ value)
                                               (do @
                                                 [_ (thread.update inc clean-up-counter)]
                                                 (wrap (#try.Success []))))]
                        outcome (/.run @
                                       (do (/.monad @)
                                         [_ (monad.map @ (/.acquire @@ count-clean-up)
                                                       (list.n/range 1 expected-clean-ups))
                                          _ (/.throw @@ oops [])]
                                         (wrap [])))
                        actual-clean-ups (thread.read clean-up-counter)]
                       (wrap (and (failure? outcome)
                                  (n/= expected-clean-ups
                                       actual-clean-ups))))))
            (_.test "Errors can propagate from the cleaners."
                    (thread.run
                     (do thread.monad
                       [clean-up-counter (thread.box 0)
                        #let [@@ @
                              count-clean-up (function (_ value)
                                               (do @
                                                 [_ (thread.update inc clean-up-counter)]
                                                 (wrap (: (Try Any) (ex.throw oops [])))))]
                        outcome (/.run @
                                       (do (/.monad @)
                                         [_ (monad.map @ (/.acquire @@ count-clean-up)
                                                       (list.n/range 1 expected-clean-ups))]
                                         (wrap [])))
                        actual-clean-ups (thread.read clean-up-counter)]
                       (wrap (and (or (n/= 0 expected-clean-ups)
                                      (failure? outcome))
                                  (n/= expected-clean-ups
                                       actual-clean-ups))))))
            (_.test "Can lift operations."
                    (thread.run
                     (do thread.monad
                       [clean-up-counter (thread.box 0)
                        #let [@@ @]
                        outcome (/.run @
                                       (do (/.monad @)
                                         [_ (/.lift @@ (thread.write expected-clean-ups clean-up-counter))]
                                         (wrap [])))
                        actual-clean-ups (thread.read clean-up-counter)]
                       (wrap (and (success? outcome)
                                  (n/= expected-clean-ups
                                       actual-clean-ups))))))
            ))))
