(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [equivalence (#+ Equivalence)]
    [functor (#+ Functor)]
    [apply (#+ Apply)]
    ["." monad (#+ Monad do)]
    ["." enum]
    {[0 #spec]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [control
    ["." try (#+ Try)]]
   [data
    [number
     ["n" nat]]
    [collection
     ["." list]]]
   [math
    ["." random]]
   [type (#+ :share)]]
  {1
   ["." / (#+ Region)
    [//
     ["." thread (#+ Thread)]
     ["." exception (#+ Exception exception:)]]]})

(exception: oops)

(def: (success? result)
  (All [a] (-> (Try a) Bit))
  (case result
    (#try.Success _)
    true
    
    (#try.Failure _)
    false))

(def: (throws? exception result)
  (All [e a] (-> (Exception e) (Try a) Bit))
  (case result
    (#try.Success _)
    false
    
    (#try.Failure error)
    (exception.match? exception error)))

(def: (injection value)
  (Injection (All [a] (All [! r] (Region r (Thread !) a))))
  (function (_ [region scope])
    (function (_ !)
      [scope
       (#try.Success value)])))

(def: comparison
  (Comparison (All [a] (All [! r] (Region r (Thread !) a))))
  (function (_ == left right)
    (case [(:share [a]
                   {(Equivalence a)
                    ==}
                   {(Try a)
                    (thread.run (:assume (/.run thread.monad left)))})
           (:share [a]
                   {(Equivalence a)
                    ==}
                   {(Try a)
                    (thread.run (:assume (/.run thread.monad right)))})]
      [(#try.Success left) (#try.Success right)]
      (== left right)

      _
      false)))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.Region])
      (do {! random.monad}
        [expected-clean-ups (|> random.nat (\ ! map (|>> (n.% 100) (n.max 1))))]
        ($_ _.and
            (_.with-cover [/.functor]
              ($functor.spec ..injection ..comparison (: (All [! r]
                                                           (Functor (Region r (thread.Thread !))))
                                                         (/.functor thread.functor))))
            (_.with-cover [/.apply]
              ($apply.spec ..injection ..comparison (: (All [! r]
                                                         (Apply (Region r (thread.Thread !))))
                                                       (/.apply thread.monad))))
            (_.with-cover [/.monad]
              ($monad.spec ..injection ..comparison (: (All [! r]
                                                         (Monad (Region r (thread.Thread !))))
                                                       (/.monad thread.monad))))
            
            (_.cover [/.run]
                     (thread.run
                      (do {! thread.monad}
                        [clean-up-counter (thread.box 0)
                         #let [//@ !
                               count-clean-up (function (_ value)
                                                (do !
                                                  [_ (thread.update inc clean-up-counter)]
                                                  (wrap (#try.Success []))))]
                         outcome (/.run !
                                        (do {! (/.monad !)}
                                          [_ (monad.map ! (/.acquire //@ count-clean-up)
                                                        (enum.range n.enum 1 expected-clean-ups))]
                                          (wrap [])))
                         actual-clean-ups (thread.read clean-up-counter)]
                        (wrap (and (..success? outcome)
                                   (n.= expected-clean-ups
                                        actual-clean-ups))))))
            (_.cover [/.fail]
                     (thread.run
                      (do {! thread.monad}
                        [clean-up-counter (thread.box 0)
                         #let [//@ !
                               count-clean-up (function (_ value)
                                                (do !
                                                  [_ (thread.update inc clean-up-counter)]
                                                  (wrap (#try.Success []))))]
                         outcome (/.run !
                                        (do {! (/.monad !)}
                                          [_ (monad.map ! (/.acquire //@ count-clean-up)
                                                        (enum.range n.enum 1 expected-clean-ups))
                                           _ (/.fail //@ (exception.construct ..oops []))]
                                          (wrap [])))
                         actual-clean-ups (thread.read clean-up-counter)]
                        (wrap (and (..throws? ..oops outcome)
                                   (n.= expected-clean-ups
                                        actual-clean-ups))))))
            (_.cover [/.throw]
                     (thread.run
                      (do {! thread.monad}
                        [clean-up-counter (thread.box 0)
                         #let [//@ !
                               count-clean-up (function (_ value)
                                                (do !
                                                  [_ (thread.update inc clean-up-counter)]
                                                  (wrap (#try.Success []))))]
                         outcome (/.run !
                                        (do {! (/.monad !)}
                                          [_ (monad.map ! (/.acquire //@ count-clean-up)
                                                        (enum.range n.enum 1 expected-clean-ups))
                                           _ (/.throw //@ ..oops [])]
                                          (wrap [])))
                         actual-clean-ups (thread.read clean-up-counter)]
                        (wrap (and (..throws? ..oops outcome)
                                   (n.= expected-clean-ups
                                        actual-clean-ups))))))
            (_.cover [/.acquire /.clean-up-error]
                     (thread.run
                      (do {! thread.monad}
                        [clean-up-counter (thread.box 0)
                         #let [//@ !
                               count-clean-up (function (_ value)
                                                (do !
                                                  [_ (thread.update inc clean-up-counter)]
                                                  (wrap (: (Try Any)
                                                           (exception.throw ..oops [])))))]
                         outcome (/.run !
                                        (do {! (/.monad !)}
                                          [_ (monad.map ! (/.acquire //@ count-clean-up)
                                                        (enum.range n.enum 1 expected-clean-ups))]
                                          (wrap [])))
                         actual-clean-ups (thread.read clean-up-counter)]
                        (wrap (and (or (n.= 0 expected-clean-ups)
                                       (..throws? /.clean-up-error outcome))
                                   (n.= expected-clean-ups
                                        actual-clean-ups))))))
            (_.cover [/.lift]
                     (thread.run
                      (do {! thread.monad}
                        [clean-up-counter (thread.box 0)
                         #let [//@ !]
                         outcome (/.run !
                                        (do (/.monad !)
                                          [_ (/.lift //@ (thread.write expected-clean-ups clean-up-counter))]
                                          (wrap [])))
                         actual-clean-ups (thread.read clean-up-counter)]
                        (wrap (and (..success? outcome)
                                   (n.= expected-clean-ups
                                        actual-clean-ups))))))
            ))))
