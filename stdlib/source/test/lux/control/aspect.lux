(.require
 [library
  [lux (.except global)
   [abstract
    [monad (.only do)]]
   [control
    [function
     ["?" predicate]]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [meta
    ["[0]" symbol (.use "[1]#[0]" equivalence)]
    ["[0]" static]
    ["[0]" code]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def (double it)
  (/.Advice Nat)
  (n.+ it it))

(def can_double
  (Random Nat)
  (random.only (function (_ it)
                 (not (n.= it (double it))))
               random.nat))

(def global
  Nat
  (static.random code.nat ..can_double))

(def (triple it)
  (-> Nat Nat)
  (all n.+ it it it))

(def pre_double
  (/.Advice (-> Nat Nat))
  (/.before ..double))

(def after_aspect
  /.Aspect
  (list [(all ?.or
              (/.when_global (|>> (the /.#name)
                                  (symbol#= (symbol ..global))))
              (/.when_local ?.all))
         (symbol ..double)]))

(def before_aspect
  /.Aspect
  (list [(/.when_global (|>> (the /.#name)
                             (symbol#= (symbol ..triple))))
         (symbol ..pre_double)]))

(def this_module
  Text
  (let [[module _] (symbol .._)]
    module))

(def another_module
  Text
  (let [[module _] (symbol /._)]
    module))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [local ..can_double])
      (_.for [/.Aspect])
      (all _.and
           (_.for [/.with]
                  (all _.and
                       (_.for [/.Advice]
                              (_.for [/.Reference /.#name /.#type
                                      /.Scenario /.#Global /.#Local]
                                     (all _.and
                                          (_.coverage [/.Local]
                                            (n.= (double local)
                                                 (/.with ..after_aspect
                                                   local)))
                                          (_.coverage [/.Global]
                                            (n.= (double ..global)
                                                 (/.with ..after_aspect
                                                   ..global))))))
                       (_.coverage [/.before]
                         (n.= (triple (double local))
                              (/.with ..before_aspect
                                (triple local))))
                       ))
           (_.for [/.Join_Point /.#location /.#scenario
                   /.Point_Cut]
                  (all _.and
                       (_.coverage [/.when_local]
                         (and (n.= (triple (double local))
                                   (/.with (list [(/.when_local ?.all)
                                                  (symbol ..double)])
                                     (triple local)))
                              (n.= (triple local)
                                   (/.with (list [(/.when_local ?.none)
                                                  (symbol ..double)])
                                     (triple local)))))
                       (_.coverage [/.when_global]
                         (and (n.= (triple (double local))
                                   (/.with (list [(/.when_global ?.all)
                                                  (symbol ..pre_double)])
                                     (triple local)))
                              (n.= (triple local)
                                   (/.with (list [(/.when_global ?.none)
                                                  (symbol ..pre_double)])
                                     (triple local)))))
                       (_.coverage [/.when_module]
                         (and (n.= (triple (double local))
                                   (/.with (list [(?.and (/.when_module (text#= this_module))
                                                         (/.when_local ?.all))
                                                  (symbol ..double)])
                                     (triple local)))
                              (n.= (triple local)
                                   (/.with (list [(?.and (/.when_module (text#= another_module))
                                                         (/.when_local ?.all))
                                                  (symbol ..double)])
                                     (triple local)))))
                       (_.coverage [/.typed?]
                         (and (n.= (triple (double local))
                                   (/.with (list [(/.typed? Nat)
                                                  (symbol ..double)])
                                     (triple local)))
                              (n.= ((pre_double triple) local)
                                   (/.with (list [(/.typed? (-> Nat Nat))
                                                  (symbol ..pre_double)])
                                     (triple local)))))
                       ))
           )))
