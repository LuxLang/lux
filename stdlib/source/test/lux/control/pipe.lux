(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [data
    ["." identity]
    ["." name]
    [number
     ["n" nat]]
    ["." text ("#@." equivalence)
     ["%" format (#+ format)]]]
   [math
    ["r" random]]]
  {1
   ["." /]})

(def: #export test
  Test
  (<| (_.context (name.module (name-of /._)))
      (do r.monad
        [sample r.nat]
        ($_ _.and
            (do @
              [another r.nat]
              (_.test (%.name (name-of /.new>))
                      (n.= (inc another)
                           (|> sample
                               (n.* 3)
                               (n.+ 4)
                               (/.new> another [inc])))))
            (_.test (%.name (name-of /.let>))
                    (n.= (n.+ sample sample)
                         (|> sample
                             (/.let> x [(n.+ x x)]))))
            (_.test (%.name (name-of /.cond>))
                    (text@= (cond (n.= 0 sample) "zero"
                                  (n.even? sample) "even"
                                  "odd")
                            (|> sample
                                (/.cond> [(n.= 0)] [(/.new> "zero" [])]
                                         [n.even?] [(/.new> "even" [])]
                                         [(/.new> "odd" [])]))))
            (_.test (%.name (name-of /.if>))
                    (text@= (if (n.even? sample)
                              "even"
                              "odd")
                            (|> sample
                                (/.if> [n.even?]
                                       [(/.new> "even" [])]
                                       [(/.new> "odd" [])]))))
            (_.test (%.name (name-of /.when>))
                    (n.= (if (n.even? sample)
                           (n.* 2 sample)
                           sample)
                         (|> sample
                             (/.when> [n.even?]
                                      [(n.* 2)]))))
            (_.test (%.name (name-of /.loop>))
                    (n.= (n.* 10 sample)
                         (|> sample
                             (/.loop> [(n.= (n.* 10 sample)) not]
                                      [(n.+ sample)]))))
            (_.test (%.name (name-of /.do>))
                    (n.= (inc (n.+ 4 (n.* 3 sample)))
                         (|> sample
                             (/.do> identity.monad
                                    [(n.* 3)]
                                    [(n.+ 4)]
                                    [inc]))))
            (_.test (%.name (name-of /.exec>))
                    (n.= (n.* 10 sample)
                         (|> sample
                             (/.exec> [%.nat (format "sample = ") log!])
                             (n.* 10))))
            (_.test (%.name (name-of /.tuple>))
                    (let [[left middle right] (|> sample
                                                  (/.tuple> [inc]
                                                            [dec]
                                                            [%.nat]))]
                      (and (n.= (inc sample) left)
                           (n.= (dec sample) middle)
                           (text@= (%.nat sample) right))))
            (_.test (%.name (name-of /.case>))
                    (text@= (case (n.% 10 sample)
                              0 "zero"
                              1 "one"
                              2 "two"
                              3 "three"
                              4 "four"
                              5 "five"
                              6 "six"
                              7 "seven"
                              8 "eight"
                              9 "nine"
                              _ "???")
                            (|> sample
                                (n.% 10)
                                (/.case> 0 "zero"
                                         1 "one"
                                         2 "two"
                                         3 "three"
                                         4 "four"
                                         5 "five"
                                         6 "six"
                                         7 "seven"
                                         8 "eight"
                                         9 "nine"
                                         _ "???"))))
            ))))
