(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    ["." debug]
    [abstract
     [monad {"+" [do]}]]
    [data
     ["." identity]
     ["." text ("#\." equivalence)
      ["%" format {"+" [format]}]]]
    [math
     ["." random]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /]])

(def: .public test
  Test
  (<| (_.covering /._)
      (do {! random.monad}
        [sample random.nat]
        ($_ _.and
            (do !
              [another random.nat]
              (_.cover [/.new>]
                       (n.= (++ another)
                            (|> sample
                                (n.* 3)
                                (n.+ 4)
                                (/.new> another [++])))))
            (_.cover [/.let>]
                     (n.= (n.+ sample sample)
                          (|> sample
                              (/.let> x [(n.+ x x)]))))
            (_.cover [/.cond>]
                     (text\= (cond (n.= 0 sample) "zero"
                                   (n.even? sample) "even"
                                   "odd")
                             (|> sample
                                 (/.cond> [(n.= 0)] [(/.new> "zero" [])]
                                          [n.even?] [(/.new> "even" [])]
                                          [(/.new> "odd" [])]))))
            (_.cover [/.if>]
                     (text\= (if (n.even? sample)
                               "even"
                               "odd")
                             (|> sample
                                 (/.if> [n.even?]
                                        [(/.new> "even" [])]
                                        [(/.new> "odd" [])]))))
            (_.cover [/.when>]
                     (n.= (if (n.even? sample)
                            (n.* 2 sample)
                            sample)
                          (|> sample
                              (/.when> [n.even?]
                                       [(n.* 2)]))))
            (_.cover [/.loop>]
                     (n.= (n.* 10 sample)
                          (|> sample
                              (/.loop> [(n.= (n.* 10 sample)) not]
                                       [(n.+ sample)]))))
            (_.cover [/.do>]
                     (n.= (++ (n.+ 4 (n.* 3 sample)))
                          (|> sample
                              (/.do> identity.monad
                                     [(n.* 3)]
                                     [(n.+ 4)]
                                     [++]))))
            (_.cover [/.exec>]
                     (n.= (n.* 10 sample)
                          (|> sample
                              (/.exec> [%.nat (format "sample = ") debug.log!])
                              (n.* 10))))
            (_.cover [/.tuple>]
                     (let [[left middle right] (|> sample
                                                   (/.tuple> [++]
                                                             [--]
                                                             [%.nat]))]
                       (and (n.= (++ sample) left)
                            (n.= (-- sample) middle)
                            (text\= (%.nat sample) right))))
            (_.cover [/.case>]
                     (text\= (case (n.% 10 sample)
                               0 "zero"
                               1 "one"
                               2 "two"
                               3 "three"
                               4 "four"
                               5 "five"
                               6 "six"
                               7 "seven"
                               8 "eight"
                               9 "nine"
                               _ "???")
                             (|> sample
                                 (n.% 10)
                                 (/.case> 0 "zero"
                                          1 "one"
                                          2 "two"
                                          3 "three"
                                          4 "four"
                                          5 "five"
                                          6 "six"
                                          7 "seven"
                                          8 "eight"
                                          9 "nine"
                                          _ "???"))))
            ))))
