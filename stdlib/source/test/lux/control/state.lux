(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [control
    [pipe (#+ let>)]
    ["." io]]
   [data
    ["." product]
    [number
     ["n" nat]]
    [text
     ["%" format (#+ format)]]]
   [math
    ["." random]]]
  {1
   ["." / (#+ State)]})

(def: (with-conditions [state output] computation)
  (-> [Nat Nat] (State Nat Nat) Bit)
  (|> computation
      (/.run state)
      product.right
      (n.= output)))

(def: basics
  (do random.monad
    [state random.nat
     value random.nat]
    ($_ _.and
        (_.cover [/.State /.get]
                 (with-conditions [state state]
                   /.get))
        (_.cover [/.put]
                 (with-conditions [state value]
                   (do /.monad
                     [_ (/.put value)]
                     /.get)))
        (_.cover [/.update]
                 (with-conditions [state (n.* value state)]
                   (do /.monad
                     [_ (/.update (n.* value))]
                     /.get)))
        (_.cover [/.use]
                 (with-conditions [state (inc state)]
                   (/.use inc)))
        (_.cover [/.local]
                 (with-conditions [state (n.* value state)]
                   (/.local (n.* value)
                            /.get)))
        )))

(def: (injection value)
  (All [s] (Injection (State s)))
  (function (_ state)
    [state value]))

(def: (comparison init)
  (All [s] (-> s (Comparison (State s))))
  (function (_ == left right)
    (== (product.right (/.run init left))
        (product.right (/.run init right)))))

(def: structures
  Test
  (do random.monad
    [state random.nat
     value random.nat]
    ($_ _.and
        (_.with-cover [/.functor]
          ($functor.spec ..injection (..comparison state) /.functor))
        (_.with-cover [/.apply]
          ($apply.spec ..injection (..comparison state) /.apply))
        (_.with-cover [/.monad]
          ($monad.spec ..injection (..comparison state) /.monad))
        )))

(def: loops
  Test
  (do random.monad
    [limit (|> random.nat (:: @ map (n.% 10)))
     #let [condition (do /.monad
                       [state /.get]
                       (wrap (n.< limit state)))]]
    ($_ _.and
        (_.cover [/.while /.run]
                 (|> (/.while condition (/.update inc))
                     (/.run 0)
                     (let> [state' output']
                           (n.= limit state'))))
        (_.cover [/.do-while]
                 (|> (/.do-while condition (/.update inc))
                     (/.run 0)
                     (let> [state' output']
                           (or (n.= limit state')
                               (and (n.= 0 limit)
                                    (n.= 1 state'))))))
        )))

(def: monad-transformer
  Test
  (do random.monad
    [state random.nat
     left random.nat
     right random.nat]
    (let [(^open "io@.") io.monad]
      (_.cover [/.State' /.with /.lift /.run']
               (|> (: (/.State' io.IO Nat Nat)
                      (do (/.with io.monad)
                        [a (/.lift io.monad (io@wrap left))
                         b (wrap right)]
                        (wrap (n.+ a b))))
                   (/.run' state)
                   io.run
                   (let> [state' output']
                         (and (n.= state state')
                              (n.= (n.+ left right) output')))))
      )))

(def: #export test
  Test
  (<| (_.covering /._)
      ($_ _.and
          ..basics
          ..structures
          ..loops
          ..monad-transformer)))
