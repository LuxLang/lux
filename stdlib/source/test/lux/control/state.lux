(.module:
  [lux #*
   ["_" test (#+ Test)]
   ["." io]
   [abstract
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [control
    [pipe (#+ let>)]]
   [data
    ["." product]
    [text
     format]]
   [math
    ["r" random]]]
  {1
   ["." / (#+ State)]})

(def: (with-conditions [state output] computation)
  (-> [Nat Nat] (State Nat Nat) Bit)
  (|> computation
      (/.run state)
      product.right
      (n/= output)))

(def: basics
  (do r.monad
    [state r.nat
     value r.nat]
    ($_ _.and
        (_.test "Can get the state as a value."
                (with-conditions [state state]
                  /.get))
        (_.test "Can replace the state."
                (with-conditions [state value]
                  (do /.monad
                    [_ (/.put value)]
                    /.get)))
        (_.test "Can update the state."
                (with-conditions [state (n/* value state)]
                  (do /.monad
                    [_ (/.update (n/* value))]
                    /.get)))
        (_.test "Can use the state."
                (with-conditions [state (inc state)]
                  (/.use inc)))
        (_.test "Can use a temporary (local) state."
                (with-conditions [state (n/* value state)]
                  (/.local (n/* value)
                           /.get)))
        )))

(def: (injection value)
  (All [s] (Injection (State s)))
  (function (_ state) [state value]))

(def: (comparison init)
  (All [s] (-> s (Comparison (State s))))
  (function (_ == left right)
    (== (product.right (/.run init left))
        (product.right (/.run init right)))))

(def: structures
  Test
  (do r.monad
    [state r.nat
     value r.nat]
    ($_ _.and
        ($functor.spec ..injection (..comparison state) /.functor)
        ($apply.spec ..injection (..comparison state) /.apply)
        ($monad.spec ..injection (..comparison state) /.monad)
        )))

(def: loops
  Test
  (do r.monad
    [limit (|> r.nat (:: @ map (n/% 10)))
     #let [condition (do /.monad
                       [state /.get]
                       (wrap (n/< limit state)))]]
    ($_ _.and
        (_.test "'while' will only execute if the condition is #1."
                (|> (/.while condition (/.update inc))
                    (/.run 0)
                    (let> [state' output']
                          (n/= limit state'))))
        (_.test "'do-while' will execute at least once."
                (|> (/.do-while condition (/.update inc))
                    (/.run 0)
                    (let> [state' output']
                          (or (n/= limit state')
                              (and (n/= 0 limit)
                                   (n/= 1 state'))))))
        )))

(def: monad-transformer
  Test
  (do r.monad
    [state r.nat
     left r.nat
     right r.nat]
    (let [(^open "io;.") io.monad]
      (_.test "Can add state functionality to any monad."
              (|> (: (/.State' io.IO Nat Nat)
                     (do (/.with io.monad)
                       [a (/.lift io.monad (io;wrap left))
                        b (wrap right)]
                       (wrap (n/+ a b))))
                  (/.run' state)
                  io.run
                  (let> [state' output']
                        (and (n/= state state')
                             (n/= (n/+ left right) output')))))
      )))

(def: #export test
  Test
  (<| (_.context (%name (name-of /.State)))
      ($_ _.and
          (<| (_.context "Basics.")
              ..basics)
          (<| (_.context "Structures.")
              ..structures)
          (<| (_.context "Loops.")
              ..loops)
          (<| (_.context "Monad transformer.")
              ..monad-transformer))))
