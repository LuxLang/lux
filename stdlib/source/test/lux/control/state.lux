... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    ["[0]" apply
     ["[1]T" \\test]]]
   [control
    ["[0]" pipe]
    ["[0]" io]]
   [data
    ["[0]" product]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only State)]])

(the (with_conditions [state output] computation)
  (-> [Natural Natural] (State Natural Natural) Bit)
  (|> computation
      (/.value state)
      product.right
      (n.= output)))

(the basics
  (do random.monad
    [state random.natural
     value random.natural]
    (all _.and
         (_.coverage [/.State /.get]
           (with_conditions [state state]
             /.get))
         (_.coverage [/.put]
           (with_conditions [state value]
             (do /.monad
               [_ (/.put value)]
               /.get)))
         (_.coverage [/.update]
           (with_conditions [state (n.* value state)]
             (do /.monad
               [_ (/.update (n.* value))]
               /.get)))
         (_.coverage [/.use]
           (with_conditions [state (++ state)]
             (/.use ++)))
         (_.coverage [/.local]
           (with_conditions [state (n.* value state)]
             (/.local (n.* value)
                      /.get)))
         )))

(the (injection value)
  (for_any (_ s)
    (Injection (State s)))
  (function (_ state)
    [state value]))

(the (comparison init)
  (for_any (_ s)
    (-> s
        (Comparison (State s))))
  (function (_ == left right)
    (== (product.right (/.value init left))
        (product.right (/.value init right)))))

(the structures
  Test
  (do random.monad
    [state random.natural]
    (all _.and
         (_.for [/.functor]
                (functorT.spec ..injection (..comparison state) /.functor))
         (_.for [/.apply]
                (applyT.spec ..injection (..comparison state) /.apply))
         (_.for [/.monad]
                (monadT.spec ..injection (..comparison state) /.monad))
         )))

(the loops
  Test
  (do [! random.monad]
    [limit (|> random.natural (of ! each (n.% 10)))
     .let [condition (do /.monad
                       [state /.get]
                       (in (n.< limit state)))]]
    (all _.and
         (_.coverage [/.while /.value]
           (|> (/.while condition (/.update ++))
               (/.value 0)
               (pipe.let [state' output']
                 (n.= limit state'))))
         (_.coverage [/.do_while]
           (|> (/.do_while condition (/.update ++))
               (/.value 0)
               (pipe.let [state' output']
                 (or (n.= limit state')
                     (and (n.= 0 limit)
                          (n.= 1 state'))))))
         )))

(the monad_transformer
  Test
  (do random.monad
    [state random.natural
     left random.natural
     right random.natural]
    (let [(open "io#[0]") io.monad]
      (_.coverage [/.With /.with /.lifted /.value']
        (|> (is (/.With io.IO Natural Natural)
                (do (/.with io.monad)
                  [a (/.lifted io.monad (io#in left))
                   b (in right)]
                  (in (n.+ a b))))
            (/.value' state)
            io.value
            (pipe.let [state' output']
              (and (n.= state state')
                   (n.= (n.+ left right) output')))))
      )))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           ..basics
           ..structures
           ..loops
           ..monad_transformer
           )))
