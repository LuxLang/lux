(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]
    [\\specification
     ["$[0]" functor {"+" Injection Comparison}]
     ["$[0]" apply]
     ["$[0]" monad]]]
   [control
    ["[0]" pipe]
    ["[0]" io]]
   [data
    ["[0]" product]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" / {"+" State}]])

(def: (with_conditions [state output] computation)
  (-> [Nat Nat] (State Nat Nat) Bit)
  (|> computation
      (/.result state)
      product.right
      (n.= output)))

(def: basics
  (do random.monad
    [state random.nat
     value random.nat]
    (all _.and
         (_.cover [/.State /.get]
                  (with_conditions [state state]
                    /.get))
         (_.cover [/.put]
                  (with_conditions [state value]
                    (do /.monad
                      [_ (/.put value)]
                      /.get)))
         (_.cover [/.update]
                  (with_conditions [state (n.* value state)]
                    (do /.monad
                      [_ (/.update (n.* value))]
                      /.get)))
         (_.cover [/.use]
                  (with_conditions [state (++ state)]
                    (/.use ++)))
         (_.cover [/.local]
                  (with_conditions [state (n.* value state)]
                    (/.local (n.* value)
                             /.get)))
         )))

(def: (injection value)
  (All (_ s) (Injection (State s)))
  (function (_ state)
    [state value]))

(def: (comparison init)
  (All (_ s) (-> s (Comparison (State s))))
  (function (_ == left right)
    (== (product.right (/.result init left))
        (product.right (/.result init right)))))

(def: structures
  Test
  (do random.monad
    [state random.nat]
    (all _.and
         (_.for [/.functor]
                ($functor.spec ..injection (..comparison state) /.functor))
         (_.for [/.apply]
                ($apply.spec ..injection (..comparison state) /.apply))
         (_.for [/.monad]
                ($monad.spec ..injection (..comparison state) /.monad))
         )))

(def: loops
  Test
  (do [! random.monad]
    [limit (|> random.nat (# ! each (n.% 10)))
     .let [condition (do /.monad
                       [state /.get]
                       (in (n.< limit state)))]]
    (all _.and
         (_.cover [/.while /.result]
                  (|> (/.while condition (/.update ++))
                      (/.result 0)
                      (pipe.let [state' output']
                        (n.= limit state'))))
         (_.cover [/.do_while]
                  (|> (/.do_while condition (/.update ++))
                      (/.result 0)
                      (pipe.let [state' output']
                        (or (n.= limit state')
                            (and (n.= 0 limit)
                                 (n.= 1 state'))))))
         )))

(def: monad_transformer
  Test
  (do random.monad
    [state random.nat
     left random.nat
     right random.nat]
    (let [(open "io#[0]") io.monad]
      (_.cover [/.+State /.with /.lifted /.result']
               (|> (is (/.+State io.IO Nat Nat)
                       (do (/.with io.monad)
                         [a (/.lifted io.monad (io#in left))
                          b (in right)]
                         (in (n.+ a b))))
                   (/.result' state)
                   io.run!
                   (pipe.let [state' output']
                     (and (n.= state state')
                          (n.= (n.+ left right) output')))))
      )))

(def: .public test
  Test
  (<| (_.covering /._)
      (all _.and
           ..basics
           ..structures
           ..loops
           ..monad_transformer)))
