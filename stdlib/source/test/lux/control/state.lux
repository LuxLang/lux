... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]]
   [control
    ["[0]" pipe]
    ["[0]" io]]
   [data
    ["[0]" product]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 ["/" \\library (.only State)]
 ["!" \\theorem])

(the (with_conditions [state output] computation)
  (-> [Natural Natural] (State Natural Natural) Bit)
  (|> computation
      (/.value state)
      product.right
      (n.= output)))

(the basics
  (<| (monad.let random.monad
        [state random.natural
         value random.natural])
      (_.for [/.State])
      (all _.and
           (_.by_proof [/.value]
                       (list (_.proposition !.value)))
           (_.by_proof [/.state]
                       (list (_.proposition !.state)))
           (_.by_proof [/.as]
                       (list (_.proposition !.as)
                             (_.proposition !.identity_of_as)))
           (_.by_proof [/.put]
                       (list (_.proposition !.put)))
           (_.by_proof [/.update]
                       (list (_.proposition !.update)))
           (_.coverage [/.local]
             (with_conditions [state (n.x value state)]
               (/.local (n.x value)
                        /.state)))
           )))

(the (injection value)
  (for_any (_ s)
    (Injection (State s)))
  (function (_ state)
    [state value]))

(the (comparison init)
  (for_any (_ s)
    (-> s
        (Comparison (State s))))
  (function (_ == left right)
    (== (product.right (/.value init left))
        (product.right (/.value init right)))))

(the structures
  Test
  (monad.let random.monad
    [state random.natural]
    (all _.and
         (_.by_proof [/.functor]
                     (list (_.model !.functor)))
         (_.for [/.monad]
                (monadT.spec ..injection (..comparison state) /.monad))
         )))

(the loops
  Test
  (monad.let [! random.monad]
    [limit (|> random.natural (by ! each (n.% 10)))
     .let [condition (monad.let /.monad
                       [state /.state]
                       (pure (n.< limit state)))]]
    (all _.and
         (_.coverage [/.while]
           (|> (/.while condition (/.update ++))
               (/.value 0)
               (pipe.let [state' output']
                 (n.= limit state'))))
         (_.coverage [/.do_while]
           (|> (/.do_while condition (/.update ++))
               (/.value 0)
               (pipe.let [state' output']
                 (or (n.= limit state')
                     (and (n.= 0 limit)
                          (n.= 1 state'))))))
         )))

(the monad_transformer
  Test
  (monad.let random.monad
    [state random.natural
     left random.natural
     right random.natural]
    (let [(open "io:[0]") io.monad]
      (_.coverage [/.With /.with /.lifted /.value']
        (|> (is (/.With Natural io.IO Natural)
                (monad.let (/.with io.monad)
                  [a (/.lifted io.monad (io:pure left))
                   b (pure right)]
                  (pure (n.+ a b))))
            (/.value' state)
            io.value
            (pipe.let [state' output']
              (and (n.= state state')
                   (n.= (n.+ left right) output')))))
      )))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           ..basics
           ..structures
           ..loops
           ..monad_transformer
           )))
