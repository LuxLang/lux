(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]
      ["$." equivalence]]}]
   [control
    pipe
    ["." io]]
   [data
    ["." text ("#\." equivalence)]]
   [math
    ["." random (#+ Random)]
    [number
     ["n" nat]]]]
  {1
   ["." / (#+ Try)]})

(def: injection
  (Injection Try)
  (|>> #/.Success))

(def: comparison
  (Comparison Try)
  (function (_ ==)
    (\ (/.equivalence ==) =)))

(def: #export (try element)
  (All [a] (-> (Random a) (Random (Try a))))
  ($_ random.or
      (random.unicode 1)
      element))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Try])
      (do random.monad
        [expected random.nat
         alternative (|> random.nat (random.filter (|>> (n.= expected) not)))
         error (random.unicode 1)
         #let [(^open "io\.") io.monad]])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec (/.equivalence n.equivalence) (..try random.nat)))
          (_.for [/.functor]
                 ($functor.spec ..injection ..comparison /.functor))
          (_.for [/.apply]
                 ($apply.spec ..injection ..comparison /.apply))
          (_.for [/.monad]
                 ($monad.spec ..injection ..comparison /.monad))

          (_.cover [/.succeed]
                   (case (/.succeed expected)
                     (#/.Success actual)
                     (n.= expected actual)

                     _
                     false))
          (_.cover [/.fail]
                   (case (/.fail error)
                     (#/.Failure message)
                     (text\= error message)

                     _
                     false))
          (_.cover [/.assume]
                   (n.= expected
                        (/.assume (/.succeed expected))))
          (_.cover [/.from_maybe]
                   (case [(/.from_maybe (#.Some expected))
                          (/.from_maybe #.None)]
                     [(#/.Success actual) (#/.Failure _)]
                     (n.= expected actual)

                     _
                     false))
          (_.cover [/.to_maybe]
                   (case [(/.to_maybe (/.succeed expected))
                          (/.to_maybe (/.fail error))]
                     [(#.Some actual) #.None]
                     (n.= expected actual)

                     _
                     false))
          (_.cover [/.default]
                   (and (n.= expected
                             (/.default alternative (/.succeed expected)))
                        (n.= alternative
                             (/.default alternative (: (Try Nat)
                                                       (/.fail error))))))
          (_.cover [/.with /.lift]
                   (let [lift (/.lift io.monad)]
                     (|> (do (/.with io.monad)
                           [a (lift (io\wrap expected))
                            b (wrap alternative)]
                           (wrap (n.+ a b)))
                         io.run
                         (case> (#/.Success result)
                                (n.= (n.+ expected alternative)
                                     result)

                                _
                                false))))
          )))
