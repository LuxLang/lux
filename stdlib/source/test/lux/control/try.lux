(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do Monad)]
    {[0 #test]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]
      ["$." equivalence]]}]
   [control
    pipe
    ["." io]]
   [data
    ["%" text/format (#+ format)]
    [number
     ["." nat]]]
   [math
    ["r" random (#+ Random)]]]
  {1
   ["." / (#+ Try)]})

(def: injection
  (Injection Try)
  (|>> #/.Success))

(def: comparison
  (Comparison Try)
  (function (_ ==)
    (:: (/.equivalence ==) =)))

(def: #export (try element)
  (All [a] (-> (Random a) (Random (Try a))))
  ($_ r.or
      (r.unicode 1)
      element))

(def: #export test
  Test
  (<| (_.context (%.name (name-of /._)))
      ($_ _.and
          ($equivalence.spec (/.equivalence nat.equivalence) (..try r.nat))
          ($functor.spec ..injection ..comparison /.functor)
          ($apply.spec ..injection ..comparison /.apply)
          ($monad.spec ..injection ..comparison /.monad)
          (do r.monad
            [left r.nat
             right r.nat
             #let [expected (n/+ left right)
                   (^open "io@.") io.monad]]
            (_.test "Can add try functionality to any monad."
                    (let [lift (/.lift io.monad)]
                      (|> (do (/.with io.monad)
                            [a (lift (io@wrap left))
                             b (wrap right)]
                            (wrap (n/+ a b)))
                          io.run
                          (case> (#/.Success actual)
                                 (n/= expected actual)

                                 _
                                 false)))))
          )))
