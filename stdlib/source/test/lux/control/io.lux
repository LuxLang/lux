(.module:
  [lux #*
   data/text/format
   ["_" test (#+ Test)]
   ["r" math/random]
   [abstract
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]]
  {1
   ["." / (#+ IO)
    [//
     ["." function]]]})

(def: injection
  (Injection IO)
  (|>> /.io))

(def: comparison
  (Comparison IO)
  (function (_ == left right)
    (== (/.run left) (/.run right))))

(def: #export test
  Test
  (<| (_.context (%name (name-of /.IO)))
      (do r.monad
        [sample r.nat
         exit-code r.int]
        ($_ _.and
            ($functor.spec ..injection ..comparison /.functor)
            ($apply.spec ..injection ..comparison /.apply)
            ($monad.spec ..injection ..comparison /.monad)

            (_.test "Can execute computations designated as I/O computations."
                    (n/= sample (/.run (/.io sample))))
            (_.test "I/O operations won't execute unless they are explicitly run."
                    (exec (/.exit exit-code)
                      true))))))
