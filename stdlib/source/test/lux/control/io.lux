(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   ["r" math/random]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [data
    ["." name]
    [number
     ["n" nat]]]]
  {1
   ["." / (#+ IO)
    [//
     ["." function]]]})

(def: injection
  (Injection IO)
  (|>> /.io))

(def: comparison
  (Comparison IO)
  (function (_ == left right)
    (== (/.run left) (/.run right))))

(def: #export test
  Test
  (<| (_.context (name.module (name-of /._)))
      (do r.monad
        [sample r.nat
         exit-code r.int]
        ($_ _.and
            ($functor.spec ..injection ..comparison /.functor)
            ($apply.spec ..injection ..comparison /.apply)
            ($monad.spec ..injection ..comparison /.monad)

            (_.test (%.name (name-of /.run))
                    (n.= sample
                         (/.run (/.io sample))))
            (_.test (%.name (name-of /.exit))
                    (exec (/.exit exit-code)
                      true))))))
