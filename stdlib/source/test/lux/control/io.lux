(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]]
    [math
     ["." random]
     [number
      ["n" nat]]]]]
  [\\library
   ["." / (#+ IO)
    [//
     ["." function]]]])

(def: injection
  (Injection IO)
  (|>> /.io))

(def: comparison
  (Comparison IO)
  (function (_ == left right)
    (== (/.run left) (/.run right))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.IO])
      (do random.monad
        [sample random.nat
         exit_code random.int]
        ($_ _.and
            (_.for [/.functor]
                   ($functor.spec ..injection ..comparison /.functor))
            (_.for [/.apply]
                   ($apply.spec ..injection ..comparison /.apply))
            (_.for [/.monad]
                   ($monad.spec ..injection ..comparison /.monad))

            (_.cover [/.run /.io]
                     (n.= sample
                          (/.run (/.io sample))))
            ))))
