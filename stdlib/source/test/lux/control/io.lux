(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]
    [\\specification
     ["$[0]" functor {"+" Injection Comparison}]
     ["$[0]" apply]
     ["$[0]" monad]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" / {"+" IO}
   [//
    ["[0]" function]]]])

(def: injection
  (Injection IO)
  (|>> /.io))

(def: comparison
  (Comparison IO)
  (function (_ == left right)
    (== (/.run! left) (/.run! right))))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.IO])
      (do random.monad
        [sample random.nat
         exit_code random.int]
        (all _.and
             (_.for [/.functor]
                    ($functor.spec ..injection ..comparison /.functor))
             (_.for [/.apply]
                    ($apply.spec ..injection ..comparison /.apply))
             (_.for [/.monad]
                    ($monad.spec ..injection ..comparison /.monad))

             (_.coverage [/.run! /.io]
               (n.= sample
                    (/.run! (/.io sample))))
             ))))
