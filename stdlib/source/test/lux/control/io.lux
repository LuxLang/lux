(.module:
  [lux #*
   ["_" test (#+ Test)]
   [math
    ["." random]]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [data
    [number
     ["n" nat]]]]
  {1
   ["." / (#+ IO)
    [//
     ["." function]]]})

(def: injection
  (Injection IO)
  (|>> /.io))

(def: comparison
  (Comparison IO)
  (function (_ == left right)
    (== (/.run left) (/.run right))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.IO])
      (do random.monad
        [sample random.nat
         exit-code random.int]
        ($_ _.and
            (_.with-cover [/.functor]
              ($functor.spec ..injection ..comparison /.functor))
            (_.with-cover [/.apply]
              ($apply.spec ..injection ..comparison /.apply))
            (_.with-cover [/.monad]
              ($monad.spec ..injection ..comparison /.monad))

            (_.cover [/.run /.io]
                     (n.= sample
                          (/.run (/.io sample))))
            (_.cover [/.exit]
                     ## The /.exit is not actually executed because it would immediately
                     ## terminate the program/tests.
                     (exec (/.exit exit-code)
                       true))))))
