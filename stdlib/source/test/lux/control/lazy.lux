... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    ["[0]" apply
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["[0]" function]]
   [data
    ["[0]" product]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [meta
    [macro
     ["[0]" expansion]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only Lazy)]])

(the injection
  (Injection Lazy)
  (|>> /.lazy))

(the comparison
  (Comparison Lazy)
  (function (_ ==)
    (by (/.equivalence ==) =)))

(the .public lazy
  (for_any (_ a)
    (-> (Random a)
        (Random (Lazy a))))
  (by random.functor each (|>> /.lazy)))

(the .public test
  Test
  (expansion.let [<eager> (is [Natural Natural]
                              [(n.+ left right)
                               (n.* left right)])]
    (<| (_.covering /._)
        (do random.monad
          [left random.natural
           right random.natural
           .let [expected <eager>]]
          (_.for [/.Lazy]
                 (all _.and
                      (_.for [/.equivalence]
                             (equivalenceT.spec (/.equivalence n.equivalence) (..lazy random.natural)))
                      (_.for [/.functor]
                             (functorT.spec ..injection ..comparison /.functor))
                      (_.for [/.apply]
                             (applyT.spec ..injection ..comparison /.apply))
                      (_.for [/.monad]
                             (monadT.spec ..injection ..comparison /.monad))

                      (_.coverage [/.as_lazy]
                        (let [lazy (/.as_lazy (function.constant <eager>))
                              (open "_#=") (product.equivalence n.equivalence n.equivalence)]
                          (_#= expected
                               (/.value lazy))))
                      (_.coverage [/.lazy]
                        (let [lazy (/.lazy <eager>)
                              (open "_#=") (product.equivalence n.equivalence n.equivalence)]
                          (_#= expected
                               (/.value lazy))))

                      (_.coverage [/.value]
                        (let [lazy (/.lazy <eager>)]
                          (and (not (same? expected
                                           (/.value lazy)))
                               (same? (/.value lazy)
                                      (/.value lazy)))))
                      ))))))
