(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    [abstract
     [monad {"+" [do]}]
     [\\specification
      ["$[0]" functor {"+" [Injection Comparison]}]
      ["$[0]" apply]
      ["$[0]" monad]
      ["$[0]" equivalence]]]
    [data
     ["[0]" product]]
    [math
     ["[0]" random {"+" [Random]}]
     [number
      ["n" nat]]]]]
  [\\library
   ["[0]" / {"+" [Lazy]}]])

(def: injection
  (Injection Lazy)
  (|>> /.lazy))

(def: comparison
  (Comparison Lazy)
  (function (_ ==)
    (# (/.equivalence ==) =)))

(def: .public lazy
  (All (_ a) (-> (Random a) (Random (Lazy a))))
  (# random.functor each (|>> /.lazy)))

(def: .public test
  Test
  (with_expansions [<eager> (: [Nat Nat]
                               [(n.+ left right)
                                (n.* left right)])]
    (<| (_.covering /._)
        (do random.monad
          [left random.nat
           right random.nat
           .let [expected <eager>]]
          (_.for [/.Lazy]
                 ($_ _.and
                     (_.for [/.equivalence]
                            ($equivalence.spec (/.equivalence n.equivalence) (..lazy random.nat)))
                     (_.for [/.functor]
                            ($functor.spec ..injection ..comparison /.functor))
                     (_.for [/.apply]
                            ($apply.spec ..injection ..comparison /.apply))
                     (_.for [/.monad]
                            ($monad.spec ..injection ..comparison /.monad))

                     (_.cover [/.lazy]
                              (let [lazy (/.lazy <eager>)
                                    (^open "_#=") (product.equivalence n.equivalence n.equivalence)]
                                (_#= expected
                                     (/.value lazy))))

                     (_.cover [/.value]
                              (let [lazy (/.lazy <eager>)]
                                (and (not (same? expected
                                                 (/.value lazy)))
                                     (same? (/.value lazy)
                                            (/.value lazy)))))
                     ))))))
