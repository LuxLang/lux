(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]
      ["$." equivalence]]]
    [data
     ["." product]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." / (#+ Lazy)]])

(def: injection
  (Injection Lazy)
  (|>> /.lazy))

(def: comparison
  (Comparison Lazy)
  (function (_ ==)
    (\ (/.equivalence ==) =)))

(def: .public lazy
  (All [a] (-> (Random a) (Random (Lazy a))))
  (\ random.functor each (|>> /.lazy)))

(def: .public test
  Test
  (with_expansions [<eager> (: [Nat Nat]
                               [(n.+ left right)
                                (n.* left right)])]
    (<| (_.covering /._)
        (do random.monad
          [left random.nat
           right random.nat
           .let [expected <eager>]]
          (_.for [/.Lazy]
                 ($_ _.and
                     (_.for [/.equivalence]
                            ($equivalence.spec (/.equivalence n.equivalence) (..lazy random.nat)))
                     (_.for [/.functor]
                            ($functor.spec ..injection ..comparison /.functor))
                     (_.for [/.apply]
                            ($apply.spec ..injection ..comparison /.apply))
                     (_.for [/.monad]
                            ($monad.spec ..injection ..comparison /.monad))

                     (_.cover [/.lazy]
                              (let [lazy (/.lazy <eager>)
                                    (^open "\=") (product.equivalence n.equivalence n.equivalence)]
                                (\= expected
                                    (/.value lazy))))

                     (_.cover [/.value]
                              (let [lazy (/.lazy <eager>)]
                                (and (not (same? expected
                                                 (/.value lazy)))
                                     (same? (/.value lazy)
                                            (/.value lazy)))))
                     ))))))
