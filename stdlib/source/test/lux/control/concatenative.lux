(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]]
   [data
    ["[0]" sum]
    ["[0]" bit ("[1]#[0]" equivalence)]]
   [macro
    ["[0]" template]]
   [math
    ["[0]" random]
    [number
     ["n" nat]
     ["i" int]
     ["r" rev]
     ["f" frac]]]]]
 [\\library
  ["[0]" / {"+" word: => ||>}]])

(def: stack_shuffling
  Test
  (do random.monad
    [sample random.nat
     dummy random.nat]
    (`` (all _.and
             (_.cover [/.push]
                      (n.= sample
                           (||> (/.push sample))))
             (_.cover [/.drop]
                      (n.= sample
                           (||> (/.push sample)
                                (/.push dummy)
                                /.drop)))
             (_.cover [/.nip]
                      (n.= sample
                           (||> (/.push dummy)
                                (/.push sample)
                                /.nip)))
             (_.cover [/.dup]
                      (||> (/.push sample)
                           /.dup
                           /.n/=))
             (_.cover [/.swap]
                      (n.= sample
                           (||> (/.push sample)
                                (/.push dummy)
                                /.swap)))
             (_.cover [/.rotL]
                      (n.= sample
                           (||> (/.push sample)
                                (/.push dummy)
                                (/.push dummy)
                                /.rotL)))
             (_.cover [/.rotR]
                      (n.= sample
                           (||> (/.push dummy)
                                (/.push sample)
                                (/.push dummy)
                                /.rotR)))
             (_.cover [/.&&]
                      (let [[left right] (||> (/.push sample)
                                              (/.push dummy)
                                              /.&&)]
                        (and (n.= sample left)
                             (n.= dummy right))))
             (~~ (template [<function> <tag>]
                   [(_.cover [<function>]
                             ((sum.equivalence n.= n.=)
                              {<tag> sample}
                              (||> (/.push sample)
                                   <function>)))]

                   [/.||L .#Left]
                   [/.||R .#Right]))
             (_.cover [/.dip]
                      (n.= (++ sample)
                           (||> (/.push sample)
                                (/.push dummy)
                                (/.push (/.apply_1 ++))
                                /.dip
                                /.drop)))
             (_.cover [/.dip_2]
                      (n.= (++ sample)
                           (||> (/.push sample)
                                (/.push dummy)
                                (/.push dummy)
                                (/.push (/.apply_1 ++))
                                /.dip_2
                                /.drop /.drop)))
             ))))

(template: (!numerical <=> <generator> <only> <arithmetic> <order>)
  [(is Test
       (with_expansions [<arithmetic>' (template.spliced <arithmetic>)
                         <order>' (template.spliced <order>)]
         (do random.monad
           [parameter (|> <generator> (random.only <only>))
            subject <generator>]
           (`` (all _.and
                    (~~ (template [<concatenative> <functional>]
                          [(_.cover [<concatenative>]
                                    (<=> (<functional> parameter subject)
                                         (||> (/.push subject)
                                              (/.push parameter)
                                              <concatenative>)))]

                          <arithmetic>'))
                    (~~ (template [<concatenative> <functional>]
                          [(_.cover [<concatenative>]
                                    (bit#= (<functional> parameter subject)
                                           (||> (/.push subject)
                                                (/.push parameter)
                                                <concatenative>)))]

                          <order>'))
                    )))))])

(def: numerical
  Test
  (all _.and
       (!numerical n.= random.nat (|>> (n.= 0) not)
                   [[/.n/+  n.+] [/.n/-  n.-] [/.n/*  n.*]  [/.n//  n./] [/.n/%  n.%]]
                   [[/.n/=  n.=] [/.n/<  n.<] [/.n/<= n.<=] [/.n/>  n.>] [/.n/>= n.>=]])
       (!numerical i.= random.int (|>> (i.= +0) not)
                   [[/.i/+  i.+] [/.i/-  i.-] [/.i/*  i.*]  [/.i//  i./] [/.i/%  i.%]]
                   [[/.i/=  i.=] [/.i/<  i.<] [/.i/<= i.<=] [/.i/>  i.>] [/.i/>= i.>=]])
       (!numerical r.= random.rev (|>> (r.= .0) not)
                   [[/.r/+  r.+] [/.r/-  r.-] [/.r/*  r.*]  [/.r//  r./] [/.r/%  r.%]]
                   [[/.r/=  r.=] [/.r/<  r.<] [/.r/<= r.<=] [/.r/>  r.>] [/.r/>= r.>=]])
       (!numerical f.= random.safe_frac (|>> (f.= +0.0) not)
                   [[/.f/+  f.+] [/.f/-  f.-] [/.f/*  f.*]  [/.f//  f./] [/.f/%  f.%]]
                   [[/.f/=  f.=] [/.f/<  f.<] [/.f/<= f.<=] [/.f/>  f.>] [/.f/>= f.>=]])
       ))

(def: control_flow
  Test
  (do random.monad
    [choice random.bit
     sample random.nat
     start random.nat
     .let [distance 10
           |++| (is (/.=> [Nat] [Nat])
                    (/.apply_1 ++))
           |test| (is (/.=> [Nat] [Bit])
                      (/.apply_1 (|>> (n.- start) (n.< distance))))]]
    (all _.and
         (_.cover [/.call /.apply_1]
                  (n.= (++ sample)
                       (||> (/.push sample)
                            (/.push (/.apply_1 ++))
                            /.call)))
         (_.cover [/.apply_2]
                  (n.= (n.+ sample sample)
                       (||> (/.push sample)
                            (/.push sample)
                            (/.push (/.apply_2 n.+))
                            /.call)))
         (_.cover [/.apply_3]
                  (n.= (all n.+ sample sample sample)
                       (||> (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push (/.apply_3 (function (_ i0 i1 i2)
                                                 (all n.+ i0 i1 i2))))
                            /.call)))
         (_.cover [/.apply_4]
                  (n.= (all n.+ sample sample sample sample)
                       (||> (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push (/.apply_4 (function (_ i0 i1 i2 i3)
                                                 (all n.+ i0 i1 i2 i3))))
                            /.call)))
         (_.cover [/.apply_5]
                  (n.= (all n.+ sample sample sample sample sample)
                       (||> (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push (/.apply_5 (function (_ i0 i1 i2 i3 i4)
                                                 (all n.+ i0 i1 i2 i3 i4))))
                            /.call)))
         (_.cover [/.apply_6]
                  (n.= (all n.+ sample sample sample sample sample sample)
                       (||> (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push (/.apply_6 (function (_ i0 i1 i2 i3 i4 i5)
                                                 (all n.+ i0 i1 i2 i3 i4 i5))))
                            /.call)))
         (_.cover [/.apply_7]
                  (n.= (all n.+ sample sample sample sample sample sample sample)
                       (||> (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push (/.apply_7 (function (_ i0 i1 i2 i3 i4 i5 i6)
                                                 (all n.+ i0 i1 i2 i3 i4 i5 i6))))
                            /.call)))
         (_.cover [/.apply_8]
                  (n.= (all n.+ sample sample sample sample sample sample sample sample)
                       (||> (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push (/.apply_8 (function (_ i0 i1 i2 i3 i4 i5 i6 i7)
                                                 (all n.+ i0 i1 i2 i3 i4 i5 i6 i7))))
                            /.call)))
         (_.cover [/.apply]
                  (n.= (all n.+ sample sample sample sample sample sample sample sample sample)
                       (||> (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push sample)
                            (/.push ((/.apply 9) (function (_ i0 i1 i2 i3 i4 i5 i6 i7 i8)
                                                   (all n.+ i0 i1 i2 i3 i4 i5 i6 i7 i8))))
                            /.call)))
         (_.cover [/.if]
                  (n.= (if choice
                         (++ sample)
                         (-- sample))
                       (||> (/.push sample)
                            (/.push choice)
                            (/.push (/.apply_1 ++))
                            (/.push (/.apply_1 --))
                            /.if)))
         (_.cover [/.loop]
                  (n.= (n.+ distance start)
                       (||> (/.push start)
                            (/.push (is (/.=> [Nat] [Nat Bit])
                                        (|>> |++| /.dup |test|)))
                            /.loop)))
         (_.cover [/.while]
                  (n.= (n.+ distance start)
                       (||> (/.push start)
                            (/.push (is (/.=> [Nat] [Nat Bit])
                                        (|>> /.dup |test|)))
                            (/.push |++|)
                            /.while)))
         (_.cover [/.do]
                  (n.= (++ sample)
                       (||> (/.push sample)
                            (/.push (is (/.=> [] [Bit])
                                        (|>> (/.push false))))
                            (/.push |++|)
                            /.do /.while)))
         (_.cover [/.compose]
                  (n.= (++ (++ sample))
                       (||> (/.push sample)
                            (/.push |++|)
                            (/.push |++|)
                            /.compose
                            /.call)))
         (_.cover [/.partial]
                  (n.= (n.+ sample sample)
                       (||> (/.push sample)
                            (/.push sample)
                            (/.push (/.apply_2 n.+))
                            /.partial
                            /.call)))
         (_.cover [/.when]
                  (n.= (if choice
                         (++ sample)
                         sample)
                       (||> (/.push sample)
                            (/.push choice)
                            (/.push (/.apply_1 ++))
                            /.when)))
         (_.cover [/.?]
                  (n.= (if choice
                         (++ sample)
                         (-- sample))
                       (||> (/.push choice)
                            (/.push (++ sample))
                            (/.push (-- sample))
                            /.?)))
         )))

(word: square
  (=> [Nat] [Nat])

  /.dup
  (/.apply_2 n.*))

(def: definition
  Test
  (do random.monad
    [sample random.nat]
    (_.cover [/.word: /.=> /.||>]
             (n.= (n.* sample sample)
                  (||> (/.push sample)
                       ..square)))))

(def: .public test
  Test
  (<| (_.covering /._)
      (all _.and
           ..stack_shuffling
           ..numerical
           ..control_flow
           ..definition
           )))
