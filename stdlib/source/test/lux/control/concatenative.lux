... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" sum]
    ["[0]" bit]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]
      ["i" integer]
      ["r" revolution]
      ["d" decimal]]]]
   [macro
    ["[0]" template]
    ["[0]" expansion]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only =>)]])

(the stack_shuffling
  Test
  (do random.monad
    [sample random.natural
     dummy random.natural]
    (`` (all _.and
             (_.coverage [/.push]
               (n.= sample
                    (/.value (/.push sample))))
             (_.coverage [/.drop]
               (n.= sample
                    (/.value (|>> (/.push sample)
                                  (/.push dummy)
                                  /.drop))))
             (_.coverage [/.nip]
               (n.= sample
                    (/.value (|>> (/.push dummy)
                                  (/.push sample)
                                  /.nip))))
             (_.coverage [/.dup]
               (/.value (|>> (/.push sample)
                             /.dup
                             /.n/=)))
             (_.coverage [/.swap]
               (n.= sample
                    (/.value (|>> (/.push sample)
                                  (/.push dummy)
                                  /.swap))))
             (_.coverage [/.left_rotation]
               (n.= sample
                    (/.value (|>> (/.push sample)
                                  (/.push dummy)
                                  (/.push dummy)
                                  /.left_rotation))))
             (_.coverage [/.right_rotation]
               (n.= sample
                    (/.value (|>> (/.push dummy)
                                  (/.push sample)
                                  (/.push dummy)
                                  /.right_rotation))))
             (_.coverage [/.&&]
               (let [[left right] (/.value (|>> (/.push sample)
                                                (/.push dummy)
                                                /.&&))]
                 (and (n.= sample left)
                      (n.= dummy right))))
             (,, (template.with [<function> <tag>]
                   [(_.coverage [<function>]
                      ((sum.equivalence n.= n.=)
                       {<tag> sample}
                       (/.value (|>> (/.push sample)
                                     <function>))))]

                   [[/.left .#Left]
                    [/.right .#Right]]))
             (_.coverage [/.dip]
               (n.= (++ sample)
                    (/.value (|>> (/.push sample)
                                  (/.push dummy)
                                  (/.push (/.of_1 ++))
                                  /.dip
                                  /.drop))))
             (_.coverage [/.dip_2]
               (n.= (++ sample)
                    (/.value (|>> (/.push sample)
                                  (/.push dummy)
                                  (/.push dummy)
                                  (/.push (/.of_1 ++))
                                  /.dip_2
                                  /.drop /.drop))))
             ))))

(the !numerical
  (template.macro (_ <=> <generator> <only> <arithmetic> <order>)
    [(is Test
         (do random.monad
           [parameter (|> <generator> (random.only <only>))
            subject <generator>]
           (`` (all _.and
                    (,, (template.with [<concatenative> <functional>]
                          [(_.coverage [<concatenative>]
                             (<=> (<functional> parameter subject)
                                  (/.value (|>> (/.push subject)
                                                (/.push parameter)
                                                <concatenative>))))]

                          <arithmetic>))
                    (,, (template.with [<concatenative> <functional>]
                          [(_.coverage [<concatenative>]
                             (bit.= (<functional> parameter subject)
                                    (/.value (|>> (/.push subject)
                                                  (/.push parameter)
                                                  <concatenative>))))]

                          <order>))
                    ))))]))

(the numerical
  Test
  (all _.and
       (!numerical n.= random.natural (|>> (n.= 0) not)
                   [[/.n/+  n.+] [/.n/-  n.-] [/.n/x  n.x]  [/.n//  n./] [/.n/%  n.%]]
                   [[/.n/=  n.=] [/.n/<  n.<] [/.n/<= n.<=] [/.n/>  n.>] [/.n/>= n.>=]])
       (!numerical i.= random.integer (|>> (i.= +0) not)
                   [[/.i/+  i.+] [/.i/-  i.-] [/.i/x  i.x]  [/.i//  i./] [/.i/%  i.%]]
                   [[/.i/=  i.=] [/.i/<  i.<] [/.i/<= i.<=] [/.i/>  i.>] [/.i/>= i.>=]])
       (!numerical r.= random.revolution (|>> (r.= .0) not)
                   [[/.r/+  r.+] [/.r/-  r.-] [/.r/x  r.x]  [/.r//  r./] [/.r/%  r.%]]
                   [[/.r/=  r.=] [/.r/<  r.<] [/.r/<= r.<=] [/.r/>  r.>] [/.r/>= r.>=]])
       (!numerical d.= random.unit_decimal (|>> (d.= +0.0) not)
                   [[/.f/+  d.+] [/.f/-  d.-] [/.f/x  d.x]  [/.f//  d./] [/.f/%  d.%]]
                   [[/.f/=  d.=] [/.f/<  d.<] [/.f/<= d.<=] [/.f/>  d.>] [/.f/>= d.>=]])
       ))

(the control_flow
  Test
  (do random.monad
    [choice random.bit
     sample random.natural
     start random.natural
     .let [distance 10
           |++| (is (/.=> [Natural] [Natural])
                    (/.of_1 ++))
           |test| (is (/.=> [Natural] [Bit])
                      (/.of_1 (|>> (n.- start) (n.< distance))))]]
    (all _.and
         (_.coverage [/.call /.of_1]
           (n.= (++ sample)
                (/.value (|>> (/.push sample)
                              (/.push (/.of_1 ++))
                              /.call))))
         (_.coverage [/.of_2]
           (n.= (n.+ sample sample)
                (/.value (|>> (/.push sample)
                              (/.push sample)
                              (/.push (/.of_2 n.+))
                              /.call))))
         (_.coverage [/.of_3]
           (n.= (all n.+ sample sample sample)
                (/.value (|>> (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push (/.of_3 (function (_ i0 i1 i2)
                                                (all n.+ i0 i1 i2))))
                              /.call))))
         (_.coverage [/.of_4]
           (n.= (all n.+ sample sample sample sample)
                (/.value (|>> (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push (/.of_4 (function (_ i0 i1 i2 i3)
                                                (all n.+ i0 i1 i2 i3))))
                              /.call))))
         (_.coverage [/.of_5]
           (n.= (all n.+ sample sample sample sample sample)
                (/.value (|>> (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push (/.of_5 (function (_ i0 i1 i2 i3 i4)
                                                (all n.+ i0 i1 i2 i3 i4))))
                              /.call))))
         (_.coverage [/.of_6]
           (n.= (all n.+ sample sample sample sample sample sample)
                (/.value (|>> (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push (/.of_6 (function (_ i0 i1 i2 i3 i4 i5)
                                                (all n.+ i0 i1 i2 i3 i4 i5))))
                              /.call))))
         (_.coverage [/.of_7]
           (n.= (all n.+ sample sample sample sample sample sample sample)
                (/.value (|>> (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push (/.of_7 (function (_ i0 i1 i2 i3 i4 i5 i6)
                                                (all n.+ i0 i1 i2 i3 i4 i5 i6))))
                              /.call))))
         (_.coverage [/.of_8]
           (n.= (all n.+ sample sample sample sample sample sample sample sample)
                (/.value (|>> (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push (/.of_8 (function (_ i0 i1 i2 i3 i4 i5 i6 i7)
                                                (all n.+ i0 i1 i2 i3 i4 i5 i6 i7))))
                              /.call))))
         (_.coverage [/.of]
           (n.= (all n.+ sample sample sample sample sample sample sample sample sample)
                (/.value (|>> (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push sample)
                              (/.push ((/.of 9) (function (_ i0 i1 i2 i3 i4 i5 i6 i7 i8)
                                                  (all n.+ i0 i1 i2 i3 i4 i5 i6 i7 i8))))
                              /.call))))
         (_.coverage [/.if]
           (n.= (if choice
                    (++ sample)
                    (-- sample))
                (/.value (|>> (/.push sample)
                              (/.push choice)
                              (/.push (/.of_1 ++))
                              (/.push (/.of_1 --))
                              /.if))))
         (_.coverage [/.loop]
           (n.= (n.+ distance start)
                (/.value (|>> (/.push start)
                              (/.push (is (/.=> [Natural] [Natural Bit])
                                          (|>> |++| /.dup |test|)))
                              /.loop))))
         (_.coverage [/.while]
           (n.= (n.+ distance start)
                (/.value (|>> (/.push start)
                              (/.push (is (/.=> [Natural] [Natural Bit])
                                          (|>> /.dup |test|)))
                              (/.push |++|)
                              /.while))))
         (_.coverage [/.do]
           (n.= (++ sample)
                (/.value (|>> (/.push sample)
                              (/.push (is (/.=> [] [Bit])
                                          (|>> (/.push false))))
                              (/.push |++|)
                              /.do /.while))))
         (_.coverage [/.compose]
           (n.= (++ (++ sample))
                (/.value (|>> (/.push sample)
                              (/.push |++|)
                              (/.push |++|)
                              /.compose
                              /.call))))
         (_.coverage [/.partial]
           (n.= (n.+ sample sample)
                (/.value (|>> (/.push sample)
                              (/.push sample)
                              (/.push (/.of_2 n.+))
                              /.partial
                              /.call))))
         (_.coverage [/.?]
           (n.= (if choice
                    (++ sample)
                    (-- sample))
                (/.value (|>> (/.push choice)
                              (/.push (++ sample))
                              (/.push (-- sample))
                              /.?))))
         )))

(the square
  (=> [Natural] [Natural])
  (|>> /.dup
       (/.of_2 n.x)))

(the definition
  Test
  (do random.monad
    [sample random.natural]
    (_.coverage [/.=> /.value]
      (n.= (n.x sample sample)
           (/.value (|>> (/.push sample)
                         ..square))))))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           ..stack_shuffling
           ..numerical
           ..control_flow
           ..definition
           )))
