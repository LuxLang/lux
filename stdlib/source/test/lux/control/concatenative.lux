(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [data
    ["." sum]
    ["." name]
    ["." bit ("#\." equivalence)]]
   [macro
    ["." template]]
   [math
    ["." random]
    [number
     ["n" nat]
     ["i" int]
     ["r" rev]
     ["f" frac]]]]
  [\\
   ["." / (#+ word: => ||>)]])

(def: stack_shuffling
  Test
  (do random.monad
    [sample random.nat
     dummy random.nat]
    (`` ($_ _.and
            (_.cover [/.push]
                     (n.= sample
                          (||> (/.push sample))))
            (_.cover [/.drop]
                     (n.= sample
                          (||> (/.push sample)
                               (/.push dummy)
                               /.drop)))
            (_.cover [/.nip]
                     (n.= sample
                          (||> (/.push dummy)
                               (/.push sample)
                               /.nip)))
            (_.cover [/.dup]
                     (||> (/.push sample)
                          /.dup
                          /.n/=))
            (_.cover [/.swap]
                     (n.= sample
                          (||> (/.push sample)
                               (/.push dummy)
                               /.swap)))
            (_.cover [/.rotL]
                     (n.= sample
                          (||> (/.push sample)
                               (/.push dummy)
                               (/.push dummy)
                               /.rotL)))
            (_.cover [/.rotR]
                     (n.= sample
                          (||> (/.push dummy)
                               (/.push sample)
                               (/.push dummy)
                               /.rotR)))
            (_.cover [/.&&]
                     (let [[left right] (||> (/.push sample)
                                             (/.push dummy)
                                             /.&&)]
                       (and (n.= sample left)
                            (n.= dummy right))))
            (~~ (template [<function> <tag>]
                  [(_.cover [<function>]
                            ((sum.equivalence n.= n.=)
                             (<tag> sample)
                             (||> (/.push sample)
                                  <function>)))]

                  [/.||L #.Left]
                  [/.||R #.Right]))
            (_.cover [/.dip]
                     (n.= (inc sample)
                          (||> (/.push sample)
                               (/.push dummy)
                               (/.push (/.apply/1 inc))
                               /.dip
                               /.drop)))
            (_.cover [/.dip/2]
                     (n.= (inc sample)
                          (||> (/.push sample)
                               (/.push dummy)
                               (/.push dummy)
                               (/.push (/.apply/1 inc))
                               /.dip/2
                               /.drop /.drop)))
            ))))

(template: (!numerical <=> <generator> <filter> <arithmetic> <order>)
  (: Test
     (with_expansions [<arithmetic>' (template.splice <arithmetic>)
                       <order>' (template.splice <order>)]
       (do random.monad
         [parameter (|> <generator> (random.filter <filter>))
          subject <generator>]
         (`` ($_ _.and
                 (~~ (template [<concatenative> <functional>]
                       [(_.cover [<concatenative>]
                                 (<=> (<functional> parameter subject)
                                      (||> (/.push subject)
                                           (/.push parameter)
                                           <concatenative>)))]

                       <arithmetic>'))
                 (~~ (template [<concatenative> <functional>]
                       [(_.cover [<concatenative>]
                                 (bit\= (<functional> parameter subject)
                                        (||> (/.push subject)
                                             (/.push parameter)
                                             <concatenative>)))]

                       <order>'))
                 ))))))

(def: numerical
  Test
  ($_ _.and
      (!numerical n.= random.nat (|>> (n.= 0) not)
                  [[/.n/+  n.+] [/.n/-  n.-] [/.n/*  n.*]  [/.n//  n./] [/.n/%  n.%]]
                  [[/.n/=  n.=] [/.n/<  n.<] [/.n/<= n.<=] [/.n/>  n.>] [/.n/>= n.>=]])
      (!numerical i.= random.int (|>> (i.= +0) not)
                  [[/.i/+  i.+] [/.i/-  i.-] [/.i/*  i.*]  [/.i//  i./] [/.i/%  i.%]]
                  [[/.i/=  i.=] [/.i/<  i.<] [/.i/<= i.<=] [/.i/>  i.>] [/.i/>= i.>=]])
      (!numerical r.= random.rev (|>> (r.= .0) not)
                  [[/.r/+  r.+] [/.r/-  r.-] [/.r/*  r.*]  [/.r//  r./] [/.r/%  r.%]]
                  [[/.r/=  r.=] [/.r/<  r.<] [/.r/<= r.<=] [/.r/>  r.>] [/.r/>= r.>=]])
      (!numerical f.= random.safe_frac (|>> (f.= +0.0) not)
                  [[/.f/+  f.+] [/.f/-  f.-] [/.f/*  f.*]  [/.f//  f./] [/.f/%  f.%]]
                  [[/.f/=  f.=] [/.f/<  f.<] [/.f/<= f.<=] [/.f/>  f.>] [/.f/>= f.>=]])
      ))

(def: control_flow
  Test
  (do random.monad
    [choice random.bit
     sample random.nat
     start random.nat
     #let [distance 10
           |inc| (/.apply/1 inc)
           |test| (/.apply/1 (|>> (n.- start) (n.< distance)))]]
    ($_ _.and
        (_.cover [/.call /.apply/1]
                 (n.= (inc sample)
                      (||> (/.push sample)
                           (/.push (/.apply/1 inc))
                           /.call)))
        (_.cover [/.apply/2]
                 (n.= (n.+ sample sample)
                      (||> (/.push sample)
                           (/.push sample)
                           (/.push (/.apply/2 n.+))
                           /.call)))
        (_.cover [/.apply/3]
                 (n.= ($_ n.+ sample sample sample)
                      (||> (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push (/.apply/3 (function (_ i0 i1 i2)
                                                ($_ n.+ i0 i1 i2))))
                           /.call)))
        (_.cover [/.apply/4]
                 (n.= ($_ n.+ sample sample sample sample)
                      (||> (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push (/.apply/4 (function (_ i0 i1 i2 i3)
                                                ($_ n.+ i0 i1 i2 i3))))
                           /.call)))
        (_.cover [/.apply/5]
                 (n.= ($_ n.+ sample sample sample sample sample)
                      (||> (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push (/.apply/5 (function (_ i0 i1 i2 i3 i4)
                                                ($_ n.+ i0 i1 i2 i3 i4))))
                           /.call)))
        (_.cover [/.apply/6]
                 (n.= ($_ n.+ sample sample sample sample sample sample)
                      (||> (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push (/.apply/6 (function (_ i0 i1 i2 i3 i4 i5)
                                                ($_ n.+ i0 i1 i2 i3 i4 i5))))
                           /.call)))
        (_.cover [/.apply/7]
                 (n.= ($_ n.+ sample sample sample sample sample sample sample)
                      (||> (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push (/.apply/7 (function (_ i0 i1 i2 i3 i4 i5 i6)
                                                ($_ n.+ i0 i1 i2 i3 i4 i5 i6))))
                           /.call)))
        (_.cover [/.apply/8]
                 (n.= ($_ n.+ sample sample sample sample sample sample sample sample)
                      (||> (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push (/.apply/8 (function (_ i0 i1 i2 i3 i4 i5 i6 i7)
                                                ($_ n.+ i0 i1 i2 i3 i4 i5 i6 i7))))
                           /.call)))
        (_.cover [/.apply]
                 (n.= ($_ n.+ sample sample sample sample sample sample sample sample sample)
                      (||> (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push sample)
                           (/.push ((/.apply 9) (function (_ i0 i1 i2 i3 i4 i5 i6 i7 i8)
                                                  ($_ n.+ i0 i1 i2 i3 i4 i5 i6 i7 i8))))
                           /.call)))
        (_.cover [/.if]
                 (n.= (if choice
                        (inc sample)
                        (dec sample))
                      (||> (/.push sample)
                           (/.push choice)
                           (/.push (/.apply/1 inc))
                           (/.push (/.apply/1 dec))
                           /.if)))
        (_.cover [/.loop]
                 (n.= (n.+ distance start)
                      (||> (/.push start)
                           (/.push (|>> |inc| /.dup |test|))
                           /.loop)))
        (_.cover [/.while]
                 (n.= (n.+ distance start)
                      (||> (/.push start)
                           (/.push (|>> /.dup |test|))
                           (/.push |inc|)
                           /.while)))
        (_.cover [/.do]
                 (n.= (inc sample)
                      (||> (/.push sample)
                           (/.push (|>> (/.push false)))
                           (/.push |inc|)
                           /.do /.while)))
        (_.cover [/.compose]
                 (n.= (inc (inc sample))
                      (||> (/.push sample)
                           (/.push |inc|)
                           (/.push |inc|)
                           /.compose
                           /.call)))
        (_.cover [/.curry]
                 (n.= (n.+ sample sample)
                      (||> (/.push sample)
                           (/.push sample)
                           (/.push (/.apply/2 n.+))
                           /.curry
                           /.call)))
        (_.cover [/.when]
                 (n.= (if choice
                        (inc sample)
                        sample)
                      (||> (/.push sample)
                           (/.push choice)
                           (/.push (/.apply/1 inc))
                           /.when)))
        (_.cover [/.?]
                 (n.= (if choice
                        (inc sample)
                        (dec sample))
                      (||> (/.push choice)
                           (/.push (inc sample))
                           (/.push (dec sample))
                           /.?)))
        )))

(word: square
  (=> [Nat] [Nat])

  /.dup
  (/.apply/2 n.*))

(def: definition
  Test
  (do random.monad
    [sample random.nat]
    (_.cover [/.word: /.=> /.||>]
             (n.= (n.* sample sample)
                  (||> (/.push sample)
                       ..square)))))

(def: #export test
  Test
  (<| (_.covering /._)
      ($_ _.and
          ..stack_shuffling
          ..numerical
          ..control_flow
          ..definition
          )))
