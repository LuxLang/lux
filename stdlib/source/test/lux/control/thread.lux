(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    [abstract
     [monad {"+" [do]}]
     [\\specification
      ["$[0]" functor {"+" [Injection Comparison]}]
      ["$[0]" apply]
      ["$[0]" monad]]]
    [math
     ["[0]" random]
     [number
      ["n" nat]]]]]
  [\\library
   ["[0]" / {"+" [Thread]}
    [//
     ["[0]" io]]]])

(def: (injection value)
  (Injection (All (_ a !) (Thread ! a)))
  (\ /.monad in value))

(def: comparison
  (Comparison (All (_ a !) (Thread ! a)))
  (function (_ == left right)
    (== (/.result left) (/.result right))))

(def: .public test
  Test
  (do random.monad
    [sample random.nat
     factor random.nat]
    (<| (_.covering /._)
        ($_ _.and
            (_.for [/.Thread]
                   ($_ _.and
                       (_.cover [/.result]
                                (n.= sample
                                     (|> sample
                                         (\ /.monad in)
                                         /.result)))
                       (_.cover [/.io]
                                (n.= sample
                                     (|> sample
                                         (\ /.monad in)
                                         /.io
                                         io.run!)))
                       
                       (_.for [/.functor]
                              ($functor.spec ..injection ..comparison /.functor))
                       (_.for [/.apply]
                              ($apply.spec ..injection ..comparison /.apply))
                       (_.for [/.monad]
                              ($monad.spec ..injection ..comparison /.monad))
                       ))

            (_.for [/.Box /.box]
                   ($_ _.and
                       (_.cover [/.read!]
                                (n.= sample
                                     (/.result (: (All (_ !) (Thread ! Nat))
                                                  (do /.monad
                                                    [box (/.box sample)]
                                                    (/.read! box))))))

                       (_.cover [/.write!]
                                (n.= factor
                                     (/.result (: (All (_ !) (Thread ! Nat))
                                                  (do /.monad
                                                    [box (/.box sample)
                                                     _ (/.write! factor box)]
                                                    (/.read! box))))))

                       (_.cover [/.update!]
                                (n.= (n.* factor sample)
                                     (/.result (: (All (_ !) (Thread ! Nat))
                                                  (do /.monad
                                                    [box (/.box sample)
                                                     old (/.update! (n.* factor) box)]
                                                    (/.read! box))))))))
            ))))
