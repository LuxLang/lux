(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [data
    [number
     ["n" nat]]
    [text
     ["%" format (#+ format)]]]
   [math
    ["r" random]]]
  {1
   ["." / (#+ Thread)]})

(def: (injection value)
  (Injection (All [a !] (Thread ! a)))
  (:: /.monad wrap value))

(def: comparison
  (Comparison (All [a !] (Thread ! a)))
  (function (_ == left right)
    (== (/.run left) (/.run right))))

(def: #export test
  Test
  (do r.monad
    [original r.nat
     factor r.nat]
    (<| (_.context (%.name (name-of /.Thread)))
        ($_ _.and
            ($functor.spec ..injection ..comparison /.functor)
            ($apply.spec ..injection ..comparison /.apply)
            ($monad.spec ..injection ..comparison /.monad)
            
            (_.test "Can safely do mutation."
                    (n.= (n.* factor original)
                         (/.run (: (All [!] (Thread ! Nat))
                                   (do /.monad
                                     [box (/.box original)
                                      old (/.update (n.* factor) box)]
                                     (/.read box))))))
            ))))
