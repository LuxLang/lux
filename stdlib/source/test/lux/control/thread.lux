(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]]
    [math
     ["." random]
     [number
      ["n" nat]]]]]
  [\\library
   ["." / (#+ Thread)
    [//
     ["." io]]]])

(def: (injection value)
  (Injection (All [a !] (Thread ! a)))
  (\ /.monad in value))

(def: comparison
  (Comparison (All [a !] (Thread ! a)))
  (function (_ == left right)
    (== (/.run left) (/.run right))))

(def: #export test
  Test
  (do random.monad
    [sample random.nat
     factor random.nat]
    (<| (_.covering /._)
        ($_ _.and
            (_.for [/.Thread]
                   ($_ _.and
                       (_.cover [/.run]
                                (n.= sample
                                     (|> sample
                                         (\ /.monad in)
                                         /.run)))
                       (_.cover [/.io]
                                (n.= sample
                                     (|> sample
                                         (\ /.monad in)
                                         /.io
                                         io.run)))
                       
                       (_.for [/.functor]
                              ($functor.spec ..injection ..comparison /.functor))
                       (_.for [/.apply]
                              ($apply.spec ..injection ..comparison /.apply))
                       (_.for [/.monad]
                              ($monad.spec ..injection ..comparison /.monad))
                       ))

            (_.for [/.Box /.box]
                   ($_ _.and
                       (_.cover [/.read]
                                (n.= sample
                                     (/.run (: (All [!] (Thread ! Nat))
                                               (do /.monad
                                                 [box (/.box sample)]
                                                 (/.read box))))))

                       (_.cover [/.write]
                                (n.= factor
                                     (/.run (: (All [!] (Thread ! Nat))
                                               (do /.monad
                                                 [box (/.box sample)
                                                  _ (/.write factor box)]
                                                 (/.read box))))))

                       (_.cover [/.update]
                                (n.= (n.* factor sample)
                                     (/.run (: (All [!] (Thread ! Nat))
                                               (do /.monad
                                                 [box (/.box sample)
                                                  old (/.update (n.* factor) box)]
                                                 (/.read box))))))))
            ))))
