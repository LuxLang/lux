(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]
    [\\specification
     ["$[0]" functor {"+" Injection Comparison}]
     ["$[0]" apply]
     ["$[0]" monad]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" / {"+" Thread}
   [//
    ["[0]" io]]]])

(def: (injection value)
  (Injection (All (_ a !) (Thread ! a)))
  (# /.monad in value))

(def: comparison
  (Comparison (All (_ a !) (Thread ! a)))
  (function (_ == left right)
    (== (/.result left) (/.result right))))

(def: .public test
  Test
  (do random.monad
    [sample random.nat
     factor random.nat]
    (<| (_.covering /._)
        (all _.and
             (_.for [/.Thread]
                    (all _.and
                         (_.coverage [/.result]
                           (n.= sample
                                (|> sample
                                    (# /.monad in)
                                    /.result)))
                         (_.coverage [/.io]
                           (n.= sample
                                (|> sample
                                    (# /.monad in)
                                    /.io
                                    io.run!)))
                         
                         (_.for [/.functor]
                                ($functor.spec ..injection ..comparison /.functor))
                         (_.for [/.apply]
                                ($apply.spec ..injection ..comparison /.apply))
                         (_.for [/.monad]
                                ($monad.spec ..injection ..comparison /.monad))
                         ))

             (_.for [/.Box /.box]
                    (all _.and
                         (_.coverage [/.read!]
                           (n.= sample
                                (/.result (is (All (_ !) (Thread ! Nat))
                                              (do /.monad
                                                [box (/.box sample)]
                                                (/.read! box))))))

                         (_.coverage [/.write!]
                           (n.= factor
                                (/.result (is (All (_ !) (Thread ! Nat))
                                              (do /.monad
                                                [box (/.box sample)
                                                 _ (/.write! factor box)]
                                                (/.read! box))))))

                         (_.coverage [/.update!]
                           (n.= (n.* factor sample)
                                (/.result (is (All (_ !) (Thread ! Nat))
                                              (do /.monad
                                                [box (/.box sample)
                                                 [old new] (/.update! (n.* factor) box)]
                                                (in new))))))))
             ))))
