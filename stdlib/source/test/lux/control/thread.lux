... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    ["[0]" apply
     ["[1]T" \\test]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only Thread)
   [//
    ["[0]" io]]]])

(the (injection value)
  (Injection (for_any (_ a !) (Thread ! a)))
  (of /.monad in value))

(the comparison
  (Comparison (for_any (_ a !) (Thread ! a)))
  (function (_ == left right)
    (== (/.value left) (/.value right))))

(the .public test
  Test
  (do random.monad
    [sample random.nat
     factor random.nat]
    (<| (_.covering /._)
        (all _.and
             (_.for [/.Thread]
                    (all _.and
                         (_.coverage [/.value]
                           (n.= sample
                                (|> sample
                                    (of /.monad in)
                                    /.value)))
                         (_.coverage [/.io]
                           (n.= sample
                                (|> sample
                                    (of /.monad in)
                                    /.io
                                    io.run!)))
                         
                         (_.for [/.functor]
                                (functorT.spec ..injection ..comparison /.functor))
                         (_.for [/.apply]
                                (applyT.spec ..injection ..comparison /.apply))
                         (_.for [/.monad]
                                (monadT.spec ..injection ..comparison /.monad))
                         ))

             (_.for [/.Box /.box]
                    (all _.and
                         (_.coverage [/.read!]
                           (n.= sample
                                (/.value (is (for_any (_ !) (Thread ! Nat))
                                             (do /.monad
                                               [box (/.box sample)]
                                               (/.read! box))))))

                         (_.coverage [/.write!]
                           (n.= factor
                                (/.value (is (for_any (_ !) (Thread ! Nat))
                                             (do /.monad
                                               [box (/.box sample)
                                                _ (/.write! factor box)]
                                               (/.read! box))))))

                         (_.coverage [/.update!]
                           (n.= (n.* factor sample)
                                (/.value (is (for_any (_ !)
                                               (Thread ! Nat))
                                             (do /.monad
                                               [box (/.box sample)
                                                [old new] (/.update! (n.* factor) box)]
                                               (in new))))))))
             ))))
