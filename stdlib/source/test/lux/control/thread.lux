(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [data
    [number
     ["n" nat]]]
   [math
    ["." random]]]
  {1
   ["." / (#+ Thread)
    [//
     ["." io]]]})

(def: (injection value)
  (Injection (All [a !] (Thread ! a)))
  (:: /.monad wrap value))

(def: comparison
  (Comparison (All [a !] (Thread ! a)))
  (function (_ == left right)
    (== (/.run left) (/.run right))))

(def: #export test
  Test
  (do random.monad
    [sample random.nat
     factor random.nat]
    (<| (_.covering /._)
        ($_ _.and
            (_.with-cover [/.Thread]
              ($_ _.and
                  (_.cover [/.run]
                           (n.= sample
                                (|> sample
                                    (:: /.monad wrap)
                                    /.run)))
                  (_.cover [/.io]
                           (n.= sample
                                (|> sample
                                    (:: /.monad wrap)
                                    /.io
                                    io.run)))
                  
                  (_.with-cover [/.functor]
                    ($functor.spec ..injection ..comparison /.functor))
                  (_.with-cover [/.apply]
                    ($apply.spec ..injection ..comparison /.apply))
                  (_.with-cover [/.monad]
                    ($monad.spec ..injection ..comparison /.monad))
                  ))

            (_.with-cover [/.Box /.box]
              ($_ _.and
                  (_.cover [/.read]
                           (n.= sample
                                (/.run (: (All [!] (Thread ! Nat))
                                          (do /.monad
                                            [box (/.box sample)]
                                            (/.read box))))))

                  (_.cover [/.write]
                           (n.= factor
                                (/.run (: (All [!] (Thread ! Nat))
                                          (do /.monad
                                            [box (/.box sample)
                                             _ (/.write factor box)]
                                            (/.read box))))))

                  (_.cover [/.update]
                           (n.= (n.* factor sample)
                                (/.run (: (All [!] (Thread ! Nat))
                                          (do /.monad
                                            [box (/.box sample)
                                             old (/.update (n.* factor) box)]
                                            (/.read box))))))))
            ))))
