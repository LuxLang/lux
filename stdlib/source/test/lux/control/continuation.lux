(.module:
  [lux #*
   ["_" test (#+ Test)]
   [control
    [monad (#+ do)]
    {[0 #test]
     [/
      [".T" functor (#+ Injection Comparison)]
      [".T" apply]
      [".T" monad]]}]
   [data
    [number
     ["." nat]]
    [text
     format]
    [collection
     ["." list]]]
   [math
    ["r" random]]]
  {1
   ["." / (#+ Cont)]})

(def: injection
  (All [o] (Injection (All [i] (Cont i o))))
  (|>> /.pending))

(def: comparison
  (Comparison Cont)
  (function (_ == left right)
    (== (/.run left) (/.run right))))

(def: #export test
  Test
  (<| (_.context (%name (name-of /.Cont)))
      (do r.monad
        [sample r.nat
         #let [(^open "_;.") /.apply
               (^open "_;.") /.monad]
         elems (r.list 3 r.nat)]
        ($_ _.and
            (_.test "Can run continuations to compute their values."
                    (n/= sample (/.run (_;wrap sample))))

            (functorT.laws ..injection ..comparison /.functor)
            (applyT.laws ..injection ..comparison /.apply)
            (monadT.laws ..injection ..comparison /.monad)
            
            (_.test "Can use the current-continuation as a escape hatch."
                    (n/= (n/* 2 sample)
                         (/.run (do /.monad
                                  [value (/.call/cc
                                          (function (_ k)
                                            (do @
                                              [temp (k sample)]
                                              ## If this code where to run,
                                              ## the output would be
                                              ## (n/* 4 sample)
                                              (k temp))))]
                                  (wrap (n/* 2 value))))))

            (_.test "Can use the current-continuation to build a time machine."
                    (n/= (n/+ 100 sample)
                         (/.run (do /.monad
                                  [[restart [output idx]] (/.portal [sample 0])]
                                  (if (n/< 10 idx)
                                    (restart [(n/+ 10 output) (inc idx)])
                                    (wrap output))))))

            (_.test "Can use delimited continuations with shifting."
                    (let [(^open "_;.") /.monad
                          (^open "list;.") (list.equivalence nat.equivalence)
                          visit (: (-> (List Nat)
                                       (Cont (List Nat) (List Nat)))
                                   (function (visit xs)
                                     (case xs
                                       #.Nil
                                       (_;wrap #.Nil)

                                       (#.Cons x xs')
                                       (do /.monad
                                         [output (/.shift (function (_ k)
                                                            (do @
                                                              [tail (k xs')]
                                                              (wrap (#.Cons x tail)))))]
                                         (visit output)))))]
                      (list;= elems
                              (/.run (/.reset (visit elems))))))
            ))))
