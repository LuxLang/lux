(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    ["." monad (#+ Monad do)]
    {[0 #test]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [control
    ["." io (#+ IO)]]
   [data
    ["." product]
    [number
     ["n" nat]]
    [collection
     ["." list ("#@." functor)]]]
   [math
    ["." random]]]
  {1
   ["." /
    [//
     ["." atom (#+ Atom atom)]
     ["." promise]
     ["." frp (#+ Channel)]]]})

(def: injection
  (Injection /.STM)
  (:: /.monad wrap))

(def: comparison
  (Comparison /.STM)
  (function (_ == left right)
    (== (product.right (left (list)))
        (product.right (right (list))))))

(def: #export test
  Test
  (<| (_.covering /._)
      (do {@ random.monad}
        [dummy random.nat
         expected random.nat
         iterations-per-process (|> random.nat (:: @ map (n.% 100)))]
        ($_ _.and
            (_.with-cover [/.functor]
              ($functor.spec ..injection ..comparison /.functor))
            (_.with-cover [/.apply]
              ($apply.spec ..injection ..comparison /.apply))
            (_.with-cover [/.monad]
              ($monad.spec ..injection ..comparison /.monad))

            (wrap (do promise.monad
                    [actual (/.commit (:: /.monad wrap expected))]
                    (_.claim [/.commit]
                             (n.= expected actual))))
            (wrap (do promise.monad
                    [actual (/.commit (/.read (/.var expected)))]
                    (_.claim [/.Var /.var /.read]
                             (n.= expected actual))))
            (wrap (do promise.monad
                    [actual (let [box (/.var dummy)]
                              (/.commit (do /.monad
                                          [_ (/.write expected box)]
                                          (/.read box))))
                     verdict (let [box (/.var dummy)]
                               (/.commit (do /.monad
                                           [_ (/.write expected box)
                                            actual (/.read box)]
                                           (wrap (n.= expected actual)))))]
                    (_.claim [/.write]
                             (and (n.= expected actual)
                                  verdict))))
            (wrap (do promise.monad
                    [#let [box (/.var dummy)]
                     output (/.commit (do /.monad
                                        [_ (/.update (n.+ expected) box)]
                                        (/.read box)))]
                    (_.claim [/.update]
                             (n.= (n.+ expected dummy)
                                  output))))
            (wrap (do promise.monad
                    [#let [box (/.var dummy)
                           [follower sink] (io.run (/.follow box))]
                     _ (/.commit (/.write expected box))
                     _ (/.commit (/.update (n.* 2) box))
                     _ (promise.future (:: sink close))
                     _ (/.commit (/.update (n.* 3) box))
                     changes (frp.consume follower)]
                    (_.claim [/.follow]
                             (:: (list.equivalence n.equivalence) =
                                 (list expected (n.* 2 expected))
                                 changes))))
            (wrap (let [var (/.var 0)]
                    (do {@ promise.monad}
                      [_ (|> (list.repeat iterations-per-process [])
                             (list@map (function (_ _) (/.commit (/.update inc var))))
                             (monad.seq @))
                       cummulative (/.commit (/.read var))]
                      (_.claim [/.STM]
                               (n.= iterations-per-process
                                    cummulative)))))
            ))))
