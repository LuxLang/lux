(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     ["." monad (#+ Monad do)]
     [\\specification
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]]
    [control
     ["." io (#+ IO)]]
    [data
     ["." product]
     [collection
      ["." list ("#\." functor)]]]
    [math
     ["." random]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /
    [//
     ["." atom (#+ Atom atom)]
     ["." async]
     ["." frp (#+ Channel)]]]])

(def: injection
  (Injection /.STM)
  (\ /.monad in))

(def: comparison
  (Comparison /.STM)
  (function (_ == left right)
    (== (product.right (left (list)))
        (product.right (right (list))))))

(def: .public test
  Test
  (<| (_.covering /._)
      (do {! random.monad}
        [dummy random.nat
         expected random.nat
         iterations_per_process (|> random.nat (\ ! map (n.% 100)))]
        ($_ _.and
            (_.for [/.functor]
                   ($functor.spec ..injection ..comparison /.functor))
            (_.for [/.apply]
                   ($apply.spec ..injection ..comparison /.apply))
            (_.for [/.monad]
                   ($monad.spec ..injection ..comparison /.monad))

            (in (do async.monad
                  [actual (/.commit (\ /.monad in expected))]
                  (_.cover' [/.commit]
                            (n.= expected actual))))
            (in (do async.monad
                  [actual (/.commit (/.read (/.var expected)))]
                  (_.cover' [/.Var /.var /.read]
                            (n.= expected actual))))
            (in (do async.monad
                  [actual (let [box (/.var dummy)]
                            (/.commit (do /.monad
                                        [_ (/.write expected box)]
                                        (/.read box))))
                   verdict (let [box (/.var dummy)]
                             (/.commit (do /.monad
                                         [_ (/.write expected box)
                                          actual (/.read box)]
                                         (in (n.= expected actual)))))]
                  (_.cover' [/.write]
                            (and (n.= expected actual)
                                 verdict))))
            (in (do async.monad
                  [.let [box (/.var dummy)]
                   output (/.commit (do /.monad
                                      [_ (/.update (n.+ expected) box)]
                                      (/.read box)))]
                  (_.cover' [/.update]
                            (n.= (n.+ expected dummy)
                                 output))))
            (in (do async.monad
                  [.let [box (/.var dummy)
                         [follower sink] (io.run! (/.follow box))]
                   _ (/.commit (/.write expected box))
                   _ (/.commit (/.update (n.* 2) box))
                   _ (async.future (\ sink close))
                   _ (/.commit (/.update (n.* 3) box))
                   changes (frp.list follower)]
                  (_.cover' [/.follow]
                            (\ (list.equivalence n.equivalence) =
                               (list expected (n.* 2 expected))
                               changes))))
            (in (let [var (/.var 0)]
                  (do {! async.monad}
                    [_ (|> (list.repeated iterations_per_process [])
                           (list\map (function (_ _) (/.commit (/.update inc var))))
                           (monad.seq !))
                     cummulative (/.commit (/.read var))]
                    (_.cover' [/.STM]
                              (n.= iterations_per_process
                                   cummulative)))))
            ))))
