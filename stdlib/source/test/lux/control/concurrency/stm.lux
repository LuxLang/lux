(.module:
  [lux #*
   ["_" test (#+ Test)]
   ["M" abstract/monad (#+ do Monad)]
   [control
    ["." io (#+ IO)]]
   [data
    ["%" text/format (#+ format)]
    [number
     ["n" nat]]
    [collection
     ["." list ("#@." functor)]]]
   [math
    ["r" random]]]
  {1
   ["." /
    [//
     ["." atom (#+ Atom atom)]
     ["." process]
     ["." promise]
     ["." frp (#+ Channel)]]]})

(def: (read! channel)
  (All [a] (-> (Channel a) (IO (Atom (List a)))))
  (do io.monad
    [#let [output (atom (list))]
     _ (frp.listen (function (_ value)
                     ## TODO: Simplify when possible.
                     (do @
                       [_ (atom.update (|>> (#.Cons value)) output)]
                       (wrap [])))
                   channel)]
    (wrap output)))

(def: iterations-per-process Nat 100)

(def: #export test
  Test
  (do r.monad
    [_ (wrap [])]
    (<| (_.context (%.name (name-of /.STM)))
        ($_ _.and
            (wrap (do promise.monad
                    [output (/.commit (/.read (/.var 0)))]
                    (_.assert "Can read STM vars."
                              (n.= 0 output))))
            (wrap (do promise.monad
                    [#let [_var (/.var 0)]
                     output (/.commit (do /.monad
                                        [_ (/.write 5 _var)]
                                        (/.read _var)))]
                    (_.assert "Can write STM vars."
                              (n.= 5 output))))
            (wrap (do promise.monad
                    [#let [_var (/.var 5)]
                     output (/.commit (do /.monad
                                        [_ (/.update (n.* 3) _var)]
                                        (/.read _var)))]
                    (_.assert "Can update STM vars."
                              (n.= 15 output))))
            (wrap (do promise.monad
                    [#let [_var (/.var 0)
                           changes (io.run (read! (io.run (/.follow _var))))]
                     _ (/.commit (/.write 5 _var))
                     _ (/.commit (/.update (n.* 3) _var))
                     changes (promise.future (atom.read changes))]
                    (_.assert "Can follow all the changes to STM vars."
                              (:: (list.equivalence n.equivalence) =
                                  (list 5 15)
                                  (list.reverse changes)))))
            (wrap (let [_concurrency-var (/.var 0)]
                    (do promise.monad
                      [_ (|> process.parallelism
                             (list.n/range 1)
                             (list@map (function (_ _)
                                         (|> iterations-per-process
                                             (list.n/range 1)
                                             (M.map @ (function (_ _) (/.commit (/.update inc _concurrency-var)))))))
                             (M.seq @))
                       last-val (/.commit (/.read _concurrency-var))]
                      (_.assert "Can modify STM vars concurrently from multiple threads."
                                (|> process.parallelism
                                    (n.* iterations-per-process)
                                    (n.= last-val))))))))))
