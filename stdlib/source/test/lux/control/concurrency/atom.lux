(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract/monad (#+ do)]
   data/text/format
   [math
    ["r" random]]
   [control
    ["." io]]]
  {1
   ["." /]})

(def: #export test
  Test
  (<| (_.context (%name (name-of /.Atom)))
      (do r.monad
        [value r.nat
         swap-value r.nat
         set-value r.nat
         #let [box (/.atom value)]]
        ($_ _.and
            (_.test "Can obtain the value of an atom."
                    (n/= value (io.run (/.read box))))

            (_.test "Can swap the value of an atom."
                    (and (io.run (/.compare-and-swap value swap-value box))
                         (n/= swap-value (io.run (/.read box)))))

            (_.test "Can update the value of an atom."
                    (exec (io.run (/.update inc box))
                      (n/= (inc swap-value) (io.run (/.read box)))))

            (_.test "Can immediately set the value of an atom."
                    (exec (io.run (/.write set-value box))
                      (n/= set-value (io.run (/.read box)))))
            ))))
