... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (do random.monad
             [expected random.natural
              .let [box (/.atom expected)]]
             (_.coverage [/.Atom /.atom /.read!]
               (io.value
                (do io.monad
                  [actual (/.read! box)]
                  (in (same? expected actual))))))
           (do random.monad
             [target random.natural
              unknown (random.only (|>> (same? target) not) random.natural)
              expected random.natural
              .let [box (/.atom target)]]
             (_.coverage [/.compare_and_swap!]
               (io.value
                (do io.monad
                  [swapped_unknown? (/.compare_and_swap! unknown expected box)
                   swapped_target? (/.compare_and_swap! target expected box)
                   actual (/.read! box)]
                  (in (and (not swapped_unknown?)
                           swapped_target?
                           (same? expected actual)))))))
           (do random.monad
             [init random.natural
              shift random.natural
              .let [box (/.atom init)]]
             (_.coverage [/.update!]
               (io.value
                (do io.monad
                  [[pre post] (/.update! (n.+ shift) box)]
                  (in (and (same? init pre)
                           (n.= (n.+ shift init)
                                post)))))))
           (do random.monad
             [pre random.natural
              post random.natural
              .let [box (/.atom pre)]]
             (_.coverage [/.write!]
               (io.value
                (do io.monad
                  [old (/.write! post box)
                   new (/.read! box)]
                  (in (and (same? pre old)
                           (same? post new)))))))
           )))
