(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." io]]
   [data
    [number
     ["n" nat]]]
   [math
    ["." random]]]
  {1
   ["." /]})

(def: #export test
  Test
  (<| (_.covering /._)
      (do random.monad
        [value random.nat
         swap_value random.nat
         set_value random.nat
         #let [box (/.atom value)]]
        ($_ _.and
            (_.cover [/.Atom /.atom /.read]
                     (n.= value
                          (io.run (/.read box))))
            (_.cover [/.compare_and_swap]
                     (and (io.run (/.compare_and_swap value swap_value box))
                          (n.= swap_value
                               (io.run (/.read box)))))
            (_.cover [/.update]
                     (exec (io.run (/.update inc box))
                       (n.= (inc swap_value)
                            (io.run (/.read box)))))
            (_.cover [/.write]
                     (exec (io.run (/.write set_value box))
                       (n.= set_value
                            (io.run (/.read box)))))
            ))))
