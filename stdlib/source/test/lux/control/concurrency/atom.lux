(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." io]]
   [data
    [number
     ["n" nat]]]
   [math
    ["." random]]]
  {1
   ["." /]})

(def: #export test
  Test
  (<| (_.covering /._)
      (do random.monad
        [value random.nat
         swap-value random.nat
         set-value random.nat
         #let [box (/.atom value)]]
        ($_ _.and
            (_.cover [/.Atom /.atom /.read]
                     (n.= value
                          (io.run (/.read box))))
            (_.cover [/.compare-and-swap]
                     (and (io.run (/.compare-and-swap value swap-value box))
                          (n.= swap-value
                               (io.run (/.read box)))))
            (_.cover [/.update]
                     (exec (io.run (/.update inc box))
                       (n.= (inc swap-value)
                            (io.run (/.read box)))))
            (_.cover [/.write]
                     (exec (io.run (/.write set-value box))
                       (n.= set-value
                            (io.run (/.read box)))))
            ))))
