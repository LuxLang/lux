(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" atom (.only Atom)]
    ["[0]" async (.only Async Resolver) (.use "[1]#[0]" monad)]
    ["[0]" frp]
    ["[0]" actor]]]])

(def .public test
  Test
  (do [! random.monad]
    [left random.nat
     right random.nat]
    (<| (_.covering /._)
        (_.for [/.Agent])
        (all _.and
             (in (do async.monad
                   [agent (async.future
                           (actor.spawn! actor.default 0))
                    _ (async.future
                       (/.react! (frp.sequential 0 (list left right))
                                 (function (_ next current)
                                   (async#in {try.#Success (n.+ next current)}))
                                 agent))
                    _ (async.delay 1)
                    ?state (actor.request! actor.state agent)]
                   (unit.coverage [/.react!]
                     (when ?state
                       {try.#Success actual}
                       (n.= (n.+ left right)
                            actual)
                       
                       failure
                       false))))
             ))))
