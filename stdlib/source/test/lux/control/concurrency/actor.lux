(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract/monad (#+ do)]
   [control
    ["ex" exception]
    ["." io (#+ IO io)]]
   [data
    ["." error]
    [text
     format]]
   [math
    ["r" random]]]
  {1
   ["." / (#+ actor: message:)
    [//
     ["." promise ("#;." monad)]]]})

(actor: Counter
  Nat

  ((handle message state self)
   (do (error.with promise.monad)
     [#let [_ (log! "BEFORE")]
      output (message state self)
      #let [_ (log! "AFTER")]]
     (wrap output)))

  ((stop cause state)
   (promise;wrap (log! (if (ex.match? /.poisoned cause)
                         (format "Counter was poisoned: " (%n state))
                         cause)))))

(message: #export Counter
  (count! {increment Nat} state self Nat)
  (let [state' (n/+ increment state)]
    (promise;wrap (#error.Success [state' state']))))

(def: #export test
  Test
  (do r.monad
    [_ (wrap [])]
    (<| (_.context (%name (name-of /.Actor)))
        ($_ _.and
            (_.test "Can check if an actor is alive."
                    (io.run (do io.monad
                              [counter (new@Counter 0)]
                              (wrap (/.alive? counter)))))

            (_.test "Can poison actors."
                    (io.run (do io.monad
                              [counter (new@Counter 0)
                               poisoned? (/.poison counter)]
                              (wrap (and poisoned?
                                         (not (/.alive? counter)))))))
            
            (_.test "Cannot poison an already dead actor."
                    (io.run (do io.monad
                              [counter (new@Counter 0)
                               first-time (/.poison counter)
                               second-time (/.poison counter)]
                              (wrap (and first-time
                                         (not second-time))))))

            (:: r.monad wrap
                (do promise.monad
                  [result (do (error.with promise.monad)
                            [#let [counter (io.run (new@Counter 0))]
                             output-1 (count! 1 counter)
                             output-2 (count! 1 counter)
                             output-3 (count! 1 counter)]
                            (wrap (and (n/= 1 output-1)
                                       (n/= 2 output-2)
                                       (n/= 3 output-3))))]
                  (_.assert "Can send messages to actors."
                            (case result
                              (#error.Success outcome)
                              outcome

                              (#error.Failure error)
                              #0))))
            ))))
