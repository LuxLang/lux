(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]
    ["." io (#+ IO io)]]
   [data
    [number
     ["n" nat]]
    [text
     ["%" format (#+ format)]]]
   [math
    ["." random]]]
  {1
   ["." / (#+ actor: message:)
    [//
     ["." promise (#+ Promise Resolver) ("#@." monad)]]]})

(exception: got-wrecked)

(actor: counter
  Nat

  ((on-mail message state self)
   (message state self))

  ((on-stop cause state)
   (promise@wrap []))

  (message: (count! {increment Nat} state self Nat)
    (let [state' (n.+ increment state)]
      (promise@wrap (#try.Success [state' state']))))
  )

(def: (mailed? outcome)
  (-> (Try Any) Bit)
  (case outcome
    (#try.Success _) true
    (#try.Failure _) false))

(def: #export test
  Test
  (do random.monad
    [initial-state random.nat
     #let [as-mail (: (All [a] (-> (-> a a) (/.Mail a)))
                      (function (_ transform)
                        (function (_ state actor)
                          (|> state transform #try.Success promise@wrap))))
           inc! (: (/.Mail Nat) (as-mail inc))
           dec! (: (/.Mail Nat) (as-mail dec))]]
    (<| (_.covering /._)
        (_.with-cover [/.Actor])
        ($_ _.and
            (_.cover [/.alive?]
                     (io.run (do io.monad
                               [actor (/.spawn! /.default 0)]
                               (/.alive? actor))))
            
            (_.cover [/.poison!]
                     (let [poisoned-actors-die!
                           (io.run (do io.monad
                                     [actor (/.spawn! /.default 0)
                                      poisoned? (/.poison! actor)
                                      alive? (/.alive? actor)]
                                     (wrap (and (..mailed? poisoned?)
                                                (not alive?)))))

                           cannot-poison-more-than-once!
                           (io.run (do io.monad
                                     [actor (/.spawn! /.default 0)
                                      first-time? (/.poison! actor)
                                      second-time? (/.poison! actor)]
                                     (wrap (and (..mailed? first-time?)
                                                (not (..mailed? second-time?))))))]
                       (and poisoned-actors-die!
                            cannot-poison-more-than-once!)))

            (let [[read write] (: [(Promise Text) (Resolver Text)]
                                  (promise.promise []))]
              (wrap (do promise.monad
                      [_ (promise.future (do io.monad
                                           [actor (/.spawn! (: (/.Behavior Any Any)
                                                               {#/.on-init (|>>)
                                                                #/.on-mail (function (_ message state self)
                                                                             (message state self))
                                                                #/.on-stop (function (_ cause state)
                                                                             (promise.future (write cause)))})
                                                            [])]
                                           (/.poison! actor)))
                       _ (promise.wait 100)
                       result (promise.future (promise.poll read))]
                      (_.claim [/.poisoned]
                               (case result
                                 (#.Some error)
                                 (exception.match? /.poisoned error)

                                 #.None
                                 false)))))

            (wrap (do promise.monad
                    [sent? (promise.future (do io.monad
                                             [actor (/.spawn! /.default 0)
                                              sent? (/.mail! inc! actor)]
                                             (wrap (..mailed? sent?))))]
                    (_.claim [/.Behavior /.Mail
                              /.default /.spawn! /.mail!]
                             sent?)))

            (wrap (do promise.monad
                    [result (promise.future (do io.monad
                                              [counter (/.spawn! /.default 0)
                                               _ (/.poison! counter)]
                                              (/.mail! inc! counter)))]
                    (_.claim [/.dead]
                             (case result
                               (#try.Success outcome)
                               false

                               (#try.Failure error)
                               (exception.match? /.dead error)))))

            (let [die! (: (/.Mail Nat)
                          (function (_ state actor)
                            (promise@wrap (exception.throw ..got-wrecked []))))]
              (wrap (do promise.monad
                      [result (promise.future (do io.monad
                                                [actor (/.spawn! /.default initial-state)
                                                 sent? (/.mail! die! actor)
                                                 alive? (/.alive? actor)
                                                 obituary (/.obituary actor)]
                                                (wrap (#try.Success [actor sent? alive? obituary]))))]
                      (_.claim [/.Obituary /.obituary]
                               (case result
                                 (^ (#try.Success [actor sent? alive? (#.Some [error state (list single-pending-message)])]))
                                 (and (..mailed? sent?)
                                      (not alive?)
                                      (exception.match? ..got-wrecked error)
                                      (n.= initial-state state)
                                      (is? die! single-pending-message))

                                 _
                                 false)))))

            (wrap (do promise.monad
                    [counter (promise.future (/.spawn! ..counter 0))
                     result (do (try.with promise.monad)
                              [output-1 (/.tell! (count! 1) counter)
                               output-2 (/.tell! (count! 1) counter)
                               output-3 (/.tell! (count! 1) counter)]
                              (wrap (and (n.= 1 output-1)
                                         (n.= 2 output-2)
                                         (n.= 3 output-3))))]
                    (_.claim [/.actor: /.message: /.tell!]
                             (case result
                               (#try.Success outcome)
                               outcome

                               (#try.Failure error)
                               false))))

            (wrap (do promise.monad
                    [verdict (promise.future
                              (do io.monad
                                [anonymous (/.actor {Nat
                                                     initial-state}
                                                    ((on-mail message state self)
                                                     (message (inc state) self))

                                                    ((on-stop cause state)
                                                     (promise@wrap (exec (%.nat state)
                                                                     []))))
                                 sent/inc? (/.mail! inc! anonymous)
                                 sent/dec? (/.mail! dec! anonymous)
                                 poisoned? (/.poison! anonymous)
                                 obituary (/.obituary anonymous)]
                                (wrap (and (..mailed? sent/inc?)
                                           (..mailed? sent/dec?)
                                           (..mailed? poisoned?)
                                           (case obituary
                                             (^ (#.Some [error final-state (list)]))
                                             (and (exception.match? /.poisoned error)
                                                  (n.= (inc (inc initial-state))
                                                       final-state))
                                             
                                             _
                                             false)))))]
                    (_.claim [/.actor]
                             verdict)))
            ))))
