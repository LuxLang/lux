... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception]
    ["[0]" io (.only IO io)]]
   [data
    [collection
     ["[0]" list]
     ["[0]" sequence (.only Sequence)]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" atom (.only Atom)]
    ["[0]" async (.only Async Resolver) (.use "[1]#[0]" monad)]
    ["[0]" frp]]]])

(exception.the got_wrecked)

(the counter
  (/.Behavior Natural)
  (function (_ message state self)
    (message state self)))

(the (count! increment)
  (-> Natural (/.Message Natural Natural))
  (function (_ state self)
    (let [state' (n.+ increment state)]
      (async#in {try.#Success [state' state']}))))

(the (mailed? outcome)
  (-> (Try Any) Bit)
  (when outcome
    {try.#Success _} true
    {try.#Failure _} false))

(the .public test
  Test
  (do [! random.monad]
    [initial_state random.natural
     .let [as_mail (is (for_any (_ a)
                         (-> (-> a a)
                             (/.Mail a)))
                       (function (_ transform)
                         (function (_ state actor)
                           (|> state transform {try.#Success} async#in))))
           ++! (is (/.Mail Natural) (as_mail ++))
           --! (is (/.Mail Natural) (as_mail --))]]
    (<| (_.covering /._)
        (_.for [/.Actor])
        (all _.and
             (_.coverage [/.alive?]
               (io.value (do io.monad
                           [actor (/.spawn! /.default 0)]
                           (/.alive? actor))))
             
             (_.coverage [/.poison!]
               (let [poisoned_actors_die!
                     (io.value (do io.monad
                                 [actor (/.spawn! /.default 0)
                                  poisoned? (/.poison! actor)
                                  alive? (/.alive? actor)]
                                 (in (and (..mailed? poisoned?)
                                          (not alive?)))))

                     cannot_poison_more_than_once!
                     (io.value (do io.monad
                                 [actor (/.spawn! /.default 0)
                                  first_time? (/.poison! actor)
                                  second_time? (/.poison! actor)]
                                 (in (and (..mailed? first_time?)
                                          (not (..mailed? second_time?))))))]
                 (and poisoned_actors_die!
                      cannot_poison_more_than_once!)))

             (let [[read write] (is [(Async Text) (Resolver Text)]
                                    (async.async []))]
               (in (do async.monad
                     [_ (async.future (do io.monad
                                        [actor (/.spawn! (is (/.Behavior Any)
                                                             (function (_ message state self)
                                                               (do [! async.monad]
                                                                 [outcome (message state self)]
                                                                 (when outcome
                                                                   {try.#Failure cause}
                                                                   (do !
                                                                     [_ (async.future (write cause))]
                                                                     (in outcome))
                                                                   
                                                                   {try.#Success _}
                                                                   (in outcome)))))
                                                         [])]
                                        (/.poison! actor)))
                      _ (async.delay 100)
                      it (async.future (async.value read))]
                     (unit.coverage [/.poisoned]
                       (when it
                         {.#Some error}
                         (exception.is? /.poisoned error)

                         {.#None}
                         false)))))

             (in (do async.monad
                   [sent? (async.future (do io.monad
                                          [actor (/.spawn! /.default 0)
                                           sent? (/.mail! ++! actor)]
                                          (in (..mailed? sent?))))]
                   (unit.coverage [/.Behavior /.Mail
                                   /.default /.spawn! /.mail!]
                     sent?)))

             (in (do async.monad
                   [it (async.future (do io.monad
                                       [counter (/.spawn! /.default 0)
                                        _ (/.poison! counter)]
                                       (/.mail! ++! counter)))]
                   (unit.coverage [/.dead]
                     (when it
                       {try.#Success outcome}
                       false

                       {try.#Failure error}
                       (exception.is? /.dead error)))))

             (let [die! (is (/.Mail Natural)
                            (function (_ state actor)
                              (async#in (exception.except ..got_wrecked []))))]
               (in (do async.monad
                     [it (async.future (do io.monad
                                         [actor (/.spawn! /.default initial_state)
                                          sent? (/.mail! die! actor)
                                          alive? (/.alive? actor)
                                          obituary (/.obituary' actor)]
                                         (in {try.#Success [actor sent? alive? obituary]})))]
                     (unit.coverage [/.Obituary /.obituary']
                       (when it
                         {try.#Success [actor sent? alive? {.#Some [error state (list single_pending_message)]}]}
                         (and (..mailed? sent?)
                              (not alive?)
                              (exception.is? ..got_wrecked error)
                              (n.= initial_state state)
                              (same? die! single_pending_message))

                         _
                         false)))))

             (in (do async.monad
                   [counter (async.future (/.spawn! ..counter 0))
                    it (do (try.with async.monad)
                         [output_1 (/.request! (count! 1) counter)
                          output_2 (/.request! (count! 1) counter)
                          output_3 (/.request! (count! 1) counter)]
                         (in (and (n.= 1 output_1)
                                  (n.= 2 output_2)
                                  (n.= 3 output_3))))]
                   (unit.coverage [/.Message /.request!]
                     (when it
                       {try.#Success outcome}
                       outcome

                       {try.#Failure error}
                       false))))
             
             (do !
               [num_events (of ! each (|>> (n.% 10) ++) random.natural)
                events (random.list num_events random.natural)
                num_observations (of ! each (n.% num_events) random.natural)
                .let [expected (list.first num_observations events)
                      sink (is (Atom (Sequence Natural))
                               (atom.atom sequence.empty))]]
               (in (do async.monad
                     [agent (async.future
                             (do [! io.monad]
                               [agent (/.spawn! /.default 0)
                                _ (/.observe! (function (_ event stop)
                                                (function (_ events_seen self)
                                                  (async.future
                                                   (if (n.< num_observations events_seen)
                                                     (do !
                                                       [_ (atom.update! (sequence.suffix event) sink)]
                                                       (in {try.#Success (++ events_seen)}))
                                                     (do !
                                                       [_ stop]
                                                       (in {try.#Failure "YOLO"}))))))
                                              (frp.sequential 0 events)
                                              agent)]
                               (in agent)))
                      _ (/.obituary agent)
                      actual (async.future (atom.read! sink))]
                     (unit.coverage [/.Stop /.observe! /.obituary]
                       (of (list.equivalence n.equivalence) = expected (sequence.as_list actual))))))
             (in (do async.monad
                   [actor (async.future (/.spawn! /.default initial_state))
                    actual (/.request! /.state actor)]
                   (unit.coverage [/.state]
                     (<| (try.else false)
                         (do try.monad
                           [actual actual]
                           (in (same? initial_state actual)))))))
             (in (do async.monad
                   [actor (async.future (/.spawn! /.default initial_state))
                    before,after (/.request! (/.update ++) actor)
                    actual (/.request! /.state actor)]
                   (unit.coverage [/.update]
                     (<| (try.else false)
                         (do try.monad
                           [[before after] before,after
                            actual actual]
                           (in (and (n.= (++ before) after)
                                    (same? after actual))))))))
             (in (do async.monad
                   [actor (async.future (/.spawn! /.default initial_state))
                    before,after (/.request! (/.update ++) actor)
                    _ (/.request! (/.reset initial_state) actor)
                    actual (/.request! /.state actor)]
                   (unit.coverage [/.reset]
                     (<| (try.else false)
                         (do try.monad
                           [[before after] before,after
                            actual actual]
                           (in (and (n.= (++ before) after)
                                    (same? initial_state before)
                                    (same? initial_state actual))))))))
             (in (do async.monad
                   [actor (async.future (/.spawn! (/.validated (n.< initial_state) /.default)
                                                  initial_state))
                    before,after (/.request! (/.update --) actor)
                    actual (/.request! /.state actor)]
                   (unit.coverage [/.validated]
                     (<| (try.else false)
                         (do try.monad
                           [[before after] before,after
                            actual actual]
                           (in (and (n.= (-- before) after)
                                    (same? after actual))))))))
             (in (do async.monad
                   [actor (async.future (/.spawn! (/.validated (n.< initial_state) /.default)
                                                  initial_state))
                    before,after (/.request! (/.update ++) actor)
                    [cause_of_death state pending] (/.obituary actor)
                    actual (/.request! /.state actor)]
                   (unit.coverage [/.invalid]
                     (when [before,after actual]
                       [{try.#Success [before after]}
                        {try.#Failure afterwards}]
                       (and (n.= (++ before) after)
                            (exception.is? /.invalid cause_of_death)
                            (exception.is? /.dead afterwards))

                       _
                       false))))
             ))))
