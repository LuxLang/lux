(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    ["." exception (#+ exception:)]
    ["." io (#+ IO io)]]
   [data
    [number
     ["n" nat]]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list]
     ["." row (#+ Row)]]]
   [math
    ["." random]]]
  {1
   ["." / (#+ actor: message:)
    [//
     ["." atom (#+ Atom)]
     ["." promise (#+ Promise Resolver) ("#\." monad)]
     ["." frp]]]})

(exception: got_wrecked)

(actor: counter
  Nat

  ((on_mail message state self)
   (message state self))

  ((on_stop cause state)
   (promise\wrap []))

  (message: (count! {increment Nat} state self Nat)
    (let [state' (n.+ increment state)]
      (promise\wrap (#try.Success [state' state']))))
  )

(def: (mailed? outcome)
  (-> (Try Any) Bit)
  (case outcome
    (#try.Success _) true
    (#try.Failure _) false))

(def: #export test
  Test
  (do {! random.monad}
    [initial_state random.nat
     #let [as_mail (: (All [a] (-> (-> a a) (/.Mail a)))
                      (function (_ transform)
                        (function (_ state actor)
                          (|> state transform #try.Success promise\wrap))))
           inc! (: (/.Mail Nat) (as_mail inc))
           dec! (: (/.Mail Nat) (as_mail dec))]]
    (<| (_.covering /._)
        (_.for [/.Actor])
        ($_ _.and
            (_.cover [/.alive?]
                     (io.run (do io.monad
                               [actor (/.spawn! /.default 0)]
                               (/.alive? actor))))
            
            (_.cover [/.poison!]
                     (let [poisoned_actors_die!
                           (io.run (do io.monad
                                     [actor (/.spawn! /.default 0)
                                      poisoned? (/.poison! actor)
                                      alive? (/.alive? actor)]
                                     (wrap (and (..mailed? poisoned?)
                                                (not alive?)))))

                           cannot_poison_more_than_once!
                           (io.run (do io.monad
                                     [actor (/.spawn! /.default 0)
                                      first_time? (/.poison! actor)
                                      second_time? (/.poison! actor)]
                                     (wrap (and (..mailed? first_time?)
                                                (not (..mailed? second_time?))))))]
                       (and poisoned_actors_die!
                            cannot_poison_more_than_once!)))

            (let [[read write] (: [(Promise Text) (Resolver Text)]
                                  (promise.promise []))]
              (wrap (do promise.monad
                      [_ (promise.future (do io.monad
                                           [actor (/.spawn! (: (/.Behavior Any Any)
                                                               {#/.on_init (|>>)
                                                                #/.on_mail (function (_ message state self)
                                                                             (message state self))
                                                                #/.on_stop (function (_ cause state)
                                                                             (promise.future (write cause)))})
                                                            [])]
                                           (/.poison! actor)))
                       _ (promise.wait 100)
                       result (promise.future (promise.poll read))]
                      (_.cover' [/.poisoned]
                                (case result
                                  (#.Some error)
                                  (exception.match? /.poisoned error)

                                  #.None
                                  false)))))

            (wrap (do promise.monad
                    [sent? (promise.future (do io.monad
                                             [actor (/.spawn! /.default 0)
                                              sent? (/.mail! inc! actor)]
                                             (wrap (..mailed? sent?))))]
                    (_.cover' [/.Behavior /.Mail
                               /.default /.spawn! /.mail!]
                              sent?)))

            (wrap (do promise.monad
                    [result (promise.future (do io.monad
                                              [counter (/.spawn! /.default 0)
                                               _ (/.poison! counter)]
                                              (/.mail! inc! counter)))]
                    (_.cover' [/.dead]
                              (case result
                                (#try.Success outcome)
                                false

                                (#try.Failure error)
                                (exception.match? /.dead error)))))

            (let [die! (: (/.Mail Nat)
                          (function (_ state actor)
                            (promise\wrap (exception.throw ..got_wrecked []))))]
              (wrap (do promise.monad
                      [result (promise.future (do io.monad
                                                [actor (/.spawn! /.default initial_state)
                                                 sent? (/.mail! die! actor)
                                                 alive? (/.alive? actor)
                                                 obituary (/.obituary actor)]
                                                (wrap (#try.Success [actor sent? alive? obituary]))))]
                      (_.cover' [/.Obituary /.obituary]
                                (case result
                                  (^ (#try.Success [actor sent? alive? (#.Some [error state (list single_pending_message)])]))
                                  (and (..mailed? sent?)
                                       (not alive?)
                                       (exception.match? ..got_wrecked error)
                                       (n.= initial_state state)
                                       (is? die! single_pending_message))

                                  _
                                  false)))))

            (wrap (do promise.monad
                    [counter (promise.future (/.spawn! ..counter 0))
                     result (do (try.with promise.monad)
                              [output_1 (/.tell! (count! 1) counter)
                               output_2 (/.tell! (count! 1) counter)
                               output_3 (/.tell! (count! 1) counter)]
                              (wrap (and (n.= 1 output_1)
                                         (n.= 2 output_2)
                                         (n.= 3 output_3))))]
                    (_.cover' [/.Message /.actor: /.message: /.tell!]
                              (case result
                                (#try.Success outcome)
                                outcome

                                (#try.Failure error)
                                false))))

            (wrap (do promise.monad
                    [verdict (promise.future
                              (do io.monad
                                [anonymous (/.actor {Nat
                                                     initial_state}
                                                    ((on_mail message state self)
                                                     (message (inc state) self))

                                                    ((on_stop cause state)
                                                     (promise\wrap (exec (%.nat state)
                                                                     []))))
                                 sent/inc? (/.mail! inc! anonymous)
                                 sent/dec? (/.mail! dec! anonymous)
                                 poisoned? (/.poison! anonymous)
                                 obituary (/.obituary anonymous)]
                                (wrap (and (..mailed? sent/inc?)
                                           (..mailed? sent/dec?)
                                           (..mailed? poisoned?)
                                           (case obituary
                                             (^ (#.Some [error final_state (list poison_pill)]))
                                             (and (exception.match? /.poisoned error)
                                                  (n.= (inc (inc initial_state))
                                                       final_state))
                                             
                                             _
                                             false)))))]
                    (_.cover' [/.actor]
                              verdict)))
            
            (do !
              [num_events (\ ! map (|>> (n.% 10) inc) random.nat)
               events (random.list num_events random.nat)
               num_observations (\ ! map (n.% num_events) random.nat)
               #let [expected (list.take num_observations events)
                     sink (: (Atom (Row Nat))
                             (atom.atom row.empty))]]
              (wrap (do promise.monad
                      [agent (promise.future
                              (do {! io.monad}
                                [agent (/.actor {Nat 0})
                                 _ (/.observe (function (_ event stop)
                                                (function (_ events_seen self)
                                                  (promise.future
                                                   (if (n.< num_observations events_seen)
                                                     (do !
                                                       [_ (atom.update (row.add event) sink)]
                                                       (wrap (#try.Success (inc events_seen))))
                                                     (do !
                                                       [_ stop]
                                                       (wrap (#try.Failure "YOLO")))))))
                                              (frp.sequential 0 events)
                                              agent)]
                                (wrap agent)))
                       _ (/.await agent)
                       actual (promise.future (atom.read sink))]
                      (_.cover' [/.Stop /.observe /.await]
                                (\ (list.equivalence n.equivalence) = expected (row.to_list actual))))))
            ))))
