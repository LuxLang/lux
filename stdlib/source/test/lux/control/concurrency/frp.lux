(.module:
  [lux #*
   ["_" test (#+ Test)]
   ["." io (#+ IO io)]
   [control
    ["." monad (#+ do)]
    [concurrency
     ["." promise ("#;." monad)]
     ["." atom (#+ Atom atom)]]]
   [data
    [number
     ["." nat]]
    [collection
     ["." list ("#;." functor)]]]
   [math
    ["r" random]]]
  {1
   ["." / (#+ Channel)]})

(def: #export test
  Test
  (let [(^open "list;.") (list.equivalence nat.equivalence)]
    (do r.monad
      [inputs (r.list 5 r.nat)
       sample r.nat]
      ($_ _.and
          (wrap (do promise.monad
                  [output (|> inputs
                              (/.sequential 0)
                              (/.filter n/even?)
                              /.consume)]
                  (_.assert "Can filter a channel's elements."
                            (list;= (list.filter n/even? inputs)
                                    output))))
          (wrap (do promise.monad
                  [output (|> inputs
                              (/.sequential 0)
                              (:: /.functor map inc)
                              /.consume)]
                  (_.assert "Functor goes over every element in a channel."
                            (list;= (list;map inc inputs)
                                    output))))
          (wrap (do promise.monad
                  [output (/.consume (:: /.apply apply
                                         (/.sequential 0 (list inc))
                                         (/.sequential 0 (list sample))))]
                  (_.assert "Apply works over all channel values."
                            (list;= (list (inc sample))
                                    output))))
          (wrap (do promise.monad
                  [output (/.consume
                           (do /.monad
                             [f (/.from-promise (promise;wrap inc))
                              a (/.from-promise (promise;wrap sample))]
                             (wrap (f a))))]
                  (_.assert "Valid monad."
                            (list;= (list (inc sample))
                                    output))))
          ))))
