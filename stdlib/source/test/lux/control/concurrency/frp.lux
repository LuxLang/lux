... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    ["[0]" apply
     ["[1]T" \\test]]]
   [control
    ["[0]" try]
    ["[0]" exception]
    ["[0]" io (.only IO io)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" mix monoid)]
     ["[0]" sequence (.only Sequence)]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" async (.only Async) (.use "[1]#[0]" monad)]
    ["[0]" atom (.only Atom atom)]]]])

(the injection
  (Injection /.Channel)
  (|>> async.resolved
       /.of_async))

(the comparison
  (Comparison /.Channel)
  (function (_ == left right)
    (io.value
     (do io.monad
       [?left (async.value left)
        ?right (async.value right)]
       (in (when [?left ?right]
             [{.#Some {.#Some [left _]}}
              {.#Some {.#Some [right _]}}]
             (== left right)
             
             _
             false))))))

(the (take_amount amount_of_polls [channel sink])
  (for_any (_ a)
    (-> Natural [(/.Channel a) (/.Sink a)]
        (Async (List a))))
  (when amount_of_polls
    0 (do async.monad
        [_ (async.future (by sink close))]
        (in {.#End}))
    _ (do [! async.monad]
        [event channel]
        (when event
          {.#None}
          (in {.#End})

          {.#Some [head tail]}
          (by ! each (|>> {.#Item head})
              (take_amount (-- amount_of_polls) [channel sink]))))))

(the .public test
  Test
  (<| (_.covering /._)
      (let [(open "list#[0]") (list.equivalence n.equivalence)]
        (do [! random.monad]
          [inputs (random.list 5 random.natural)
           sample random.natural
           distinct/0 random.natural
           distinct/1 (|> random.natural (random.only (|>> (n.= distinct/0) not)))
           distinct/2 (|> random.natural (random.only (function (_ value)
                                                        (not (or (n.= distinct/0 value)
                                                                 (n.= distinct/1 value))))))
           shift random.natural]
          (all _.and
               (_.for [/.functor]
                      (functorT.spec ..injection ..comparison /.functor))
               (_.for [/.apply]
                      (applyT.spec ..injection ..comparison /.apply))
               (_.for [/.monad]
                      (monadT.spec ..injection ..comparison /.monad))

               (_.coverage [/.Channel /.Sink /.channel]
                 (when (io.value
                        (do (try.with io.monad)
                          [.let [[channel sink] (is [(/.Channel Natural) (/.Sink Natural)]
                                                    (/.channel []))]
                           _ (by sink feed sample)
                           _ (by sink close)]
                          (in channel)))
                   {try.#Success channel}
                   (io.value
                    (do io.monad
                      [?actual (async.value channel)]
                      (in (when ?actual
                            {.#Some {.#Some [actual _]}}
                            (n.= sample actual)
                            
                            _
                            false))))
                   
                   {try.#Failure error}
                   false))
               (_.coverage [/.already_closed]
                 (when (io.value
                        (do (try.with io.monad)
                          [.let [[channel sink] (is [(/.Channel Natural) (/.Sink Natural)]
                                                    (/.channel []))]
                           _ (by sink close)]
                          (by sink feed sample)))
                   {try.#Success _}
                   false
                   
                   {try.#Failure error}
                   (exception.is? /.already_closed error)))
               (in (do async.monad
                     [output (|> sample
                                 async.resolved
                                 /.of_async
                                 /.list)]
                     (unit.coverage [/.of_async /.list]
                       (list#= (list sample)
                               output))))
               (in (do async.monad
                     [output (|> inputs
                                 (/.sequential 0)
                                 /.list)]
                     (unit.coverage [/.sequential]
                       (list#= inputs
                               output))))
               (in (do async.monad
                     [output (|> inputs
                                 (/.sequential 0)
                                 (/.only n.even?)
                                 /.list)]
                     (unit.coverage [/.only]
                       (list#= (list.only n.even? inputs)
                               output))))
               (in (do [! async.monad]
                     [.let [[?signal !signal] (is [(async.Async Any) (async.Resolver Any)]
                                                  (async.async []))
                            sink (is (Atom (Sequence Natural))
                                     (atom.atom sequence.empty))]
                      _ (async.future (/.subscribe! (function (_ value)
                                                      (do [! io.monad]
                                                        [current (atom.read! sink)
                                                         _ (atom.update! (sequence.suffix value) sink)]
                                                        (if (n.< (list.size inputs)
                                                                 (++ (sequence.size current)))
                                                          (in {.#Some []})
                                                          (do !
                                                            [_ (!signal [])]
                                                            (in {.#None})))))
                                                    (/.sequential 0 (list#composite inputs inputs))))
                      _ ?signal
                      listened (|> sink
                                   atom.read!
                                   async.future
                                   (by ! each sequence.as_list))]
                     (unit.coverage [/.Subscriber /.subscribe!]
                       (list#= inputs listened))))
               (in (do async.monad
                     [actual (/.mix (function (_ input total)
                                      (async.resolved (n.+ input total)))
                                    0
                                    (/.sequential 0 inputs))]
                     (unit.coverage [/.mix]
                       (n.= (list#mix n.+ 0 inputs)
                            actual))))
               (in (do async.monad
                     [actual (|> inputs
                                 (/.sequential 0)
                                 (/.mixes (function (_ input total)
                                            (async.resolved (n.+ input total)))
                                          0)
                                 /.list)]
                     (unit.coverage [/.mixes]
                       (list#= (list.mixes n.+ 0 inputs)
                               actual))))
               (in (do async.monad
                     [actual (|> (list distinct/0 distinct/0 distinct/0
                                       distinct/1
                                       distinct/2 distinct/2)
                                 (/.sequential 0)
                                 (/.distinct n.equivalence)
                                 /.list)]
                     (unit.coverage [/.distinct]
                       (list#= (list distinct/0 distinct/1 distinct/2)
                               actual))))
               (do !
                 [polling_delay (by ! each (|>> (n.% 10) ++) random.natural)
                  amount_of_polls (by ! each (|>> (n.% 10) ++) random.natural)]
                 (all _.and
                      (in (do [! async.monad]
                            [actual (..take_amount amount_of_polls (/.poll polling_delay (is (IO Natural) (io.io sample))))
                             .let [correct_values!
                                   (list.every? (n.= sample) actual)
                                   
                                   enough_polls!
                                   (n.= amount_of_polls (list.size actual))]]
                            (unit.coverage [/.poll]
                              (and correct_values!
                                   enough_polls!))))
                      (in (do [! async.monad]
                            [actual (..take_amount amount_of_polls (/.periodic polling_delay))]
                            (unit.coverage [/.periodic]
                              (n.= amount_of_polls (list.size actual)))))))
               (in (do async.monad
                     [.let [max_iterations 10]
                      actual (|> [0 sample]
                                 (/.iterations (function (_ [iterations current])
                                                 (async.resolved
                                                  (if (n.< max_iterations iterations)
                                                    {.#Some [[(++ iterations) (n.+ shift current)]
                                                             current]}
                                                    {.#None}))))
                                 /.list)]
                     (unit.coverage [/.iterations]
                       (and (n.= max_iterations (list.size actual))
                            (list#= (list.mixes n.+ sample (list.repeated (-- max_iterations) shift))
                                    actual)))))
               )))))
