(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [control
    ["." try]
    ["." exception]
    ["." io (#+ IO io)]]
   [data
    [number
     ["n" nat]]
    [collection
     ["." list ("#\." fold monoid)]
     ["." row (#+ Row)]]]
   [math
    ["." random]]]
  {1
   ["." /
    [//
     ["." promise ("#\." monad)]
     ["." atom (#+ Atom atom)]]]})

(def: injection
  (Injection /.Channel)
  (|>> promise.resolved
       /.from-promise))

(def: comparison
  (Comparison /.Channel)
  (function (_ == left right)
    (io.run
     (do io.monad
       [?left (promise.poll left)
        ?right (promise.poll right)]
       (wrap (case [?left ?right]
               [(#.Some (#.Some [left _]))
                (#.Some (#.Some [right _]))]
               (== left right)
               
               _
               false))))))

(def: #export test
  Test
  (<| (_.covering /._)
      (let [(^open "list\.") (list.equivalence n.equivalence)]
        (do random.monad
          [inputs (random.list 5 random.nat)
           sample random.nat
           distint/0 random.nat
           distint/1 (|> random.nat (random.filter (|>> (n.= distint/0) not)))
           distint/2 (|> random.nat (random.filter (function (_ value)
                                                     (not (or (n.= distint/0 value)
                                                              (n.= distint/1 value))))))
           shift random.nat]
          ($_ _.and
              (_.with-cover [/.functor]
                ($functor.spec ..injection ..comparison /.functor))
              (_.with-cover [/.apply]
                ($apply.spec ..injection ..comparison /.apply))
              (_.with-cover [/.monad]
                ($monad.spec ..injection ..comparison /.monad))
              
              (_.cover [/.Channel /.Sink /.channel]
                       (case (io.run
                              (do (try.with io.monad)
                                [#let [[channel sink] (/.channel [])]
                                 _ (:: sink feed sample)
                                 _ (:: sink close)]
                                (wrap channel)))
                         (#try.Success channel)
                         (io.run
                          (do io.monad
                            [?actual (promise.poll channel)]
                            (wrap (case ?actual
                                    (#.Some (#.Some [actual _]))
                                    (n.= sample actual)
                                    
                                    _
                                    false))))
                         
                         (#try.Failure error)
                         false))
              (_.cover [/.channel-is-already-closed]
                       (case (io.run
                              (do (try.with io.monad)
                                [#let [[channel sink] (/.channel [])]
                                 _ (:: sink close)]
                                (:: sink feed sample)))
                         (#try.Success _)
                         false
                         
                         (#try.Failure error)
                         (exception.match? /.channel-is-already-closed error)))
              (wrap (do promise.monad
                      [output (|> sample
                                  promise.resolved
                                  /.from-promise
                                  /.consume)]
                      (_.cover' [/.from-promise /.consume]
                                (list\= (list sample)
                                        output))))
              (wrap (do promise.monad
                      [output (|> inputs
                                  (/.sequential 0)
                                  /.consume)]
                      (_.cover' [/.sequential]
                                (list\= inputs
                                        output))))
              (wrap (do promise.monad
                      [output (|> inputs
                                  (/.sequential 0)
                                  (/.filter n.even?)
                                  /.consume)]
                      (_.cover' [/.filter]
                                (list\= (list.filter n.even? inputs)
                                        output))))
              (wrap (do {! promise.monad}
                      [#let [sink (: (Atom (Row Nat))
                                     (atom.atom row.empty))
                             channel (/.sequential 0 (list\compose inputs inputs))]
                       _ (promise.future (/.subscribe (function (_ value)
                                                        (do {! io.monad}
                                                          [current (atom.read sink)]
                                                          (if (n.< (list.size inputs)
                                                                   (row.size current))
                                                            (do !
                                                              [_ (atom.update (row.add value) sink)]
                                                              (wrap (#.Some [])))
                                                            (wrap (#.Some [])))))
                                                      channel))
                       output (/.consume channel)
                       listened (|> sink
                                    atom.read
                                    promise.future
                                    (:: ! map row.to-list))]
                      (_.cover' [/.Subscriber /.subscribe]
                                (and (list\= inputs
                                             output)
                                     (list\= output
                                             listened)))))
              (wrap (do promise.monad
                      [actual (/.fold (function (_ input total)
                                        (promise.resolved (n.+ input total)))
                                      0
                                      (/.sequential 0 inputs))]
                      (_.cover' [/.fold]
                                (n.= (list\fold n.+ 0 inputs)
                                     actual))))
              (wrap (do promise.monad
                      [actual (|> inputs
                                  (/.sequential 0)
                                  (/.folds (function (_ input total)
                                             (promise.resolved (n.+ input total)))
                                           0)
                                  /.consume)]
                      (_.cover' [/.folds]
                                (list\= (list.folds n.+ 0 inputs)
                                        actual))))
              (wrap (do promise.monad
                      [actual (|> (list distint/0 distint/0 distint/0
                                        distint/1
                                        distint/2 distint/2)
                                  (/.sequential 0)
                                  (/.distinct n.equivalence)
                                  /.consume)]
                      (_.cover' [/.distinct]
                                (list\= (list distint/0 distint/1 distint/2)
                                        actual))))
              (let [polling-delay 10
                    wiggle-room (n.* 5 polling-delay)
                    amount-of-polls 5
                    total-delay (|> polling-delay
                                    (n.* amount-of-polls)
                                    (n.+ wiggle-room))]
                ($_ _.and
                    (wrap (do promise.monad
                            [#let [[channel sink] (/.poll polling-delay (: (IO Nat) (io.io sample)))]
                             _ (promise.schedule total-delay (io.io []))
                             _ (promise.future (:: sink close))
                             actual (/.consume channel)]
                            (_.cover' [/.poll]
                                      (and (list.every? (n.= sample) actual)
                                           (n.>= amount-of-polls (list.size actual))))))
                    (wrap (do promise.monad
                            [#let [[channel sink] (/.periodic polling-delay)]
                             _ (promise.schedule total-delay (io.io []))
                             _ (promise.future (:: sink close))
                             actual (/.consume channel)]
                            (_.cover' [/.periodic]
                                      (n.>= amount-of-polls (list.size actual)))))))
              (wrap (do promise.monad
                      [#let [max-iterations 10]
                       actual (|> [0 sample]
                                  (/.iterate (function (_ [iterations current])
                                               (promise.resolved
                                                (if (n.< max-iterations iterations)
                                                  (#.Some [[(inc iterations) (n.+ shift current)]
                                                           current])
                                                  #.None))))
                                  /.consume)]
                      (_.cover' [/.iterate]
                                (and (n.= max-iterations (list.size actual))
                                     (list\= (list.folds n.+ sample (list.repeat (dec max-iterations) shift))
                                             actual)))))
              )))))
