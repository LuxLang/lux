... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]]
   [control
    ["[0]" io]
    ["[0]" try]
    ["[0]" exception]]
   [math
    ["[0]" random]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" async]]]])

(the injection
  (Injection /.Process)
  (of /.monad in))

(the comparison
  (Comparison /.Process)
  (function (_ == left right)
    (io.value
     (do io.monad
       [?left (async.value left)
        ?right (async.value right)]
       (in (when [?left ?right]
             [{.#Some {try.#Success left}}
              {.#Some {try.#Success right}}]
             (== left right)
             
             _
             false))))))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected random.nat]
        (all _.and
             (_.for [/.Process]
                    (all _.and
                         (_.for [/.functor]
                                (functorT.spec ..injection ..comparison /.functor))
                         (_.for [/.monad]
                                (monadT.spec ..injection ..comparison /.monad))
                         ))
             (_.coverage [/.Channel /.Channel' /.Sink /.channel]
               ... This is already been tested for the FRP module.
               true)
             (in (do async.monad
                   [it (do /.monad
                         [.let [[channel sink] (/.channel [])]
                          _ (/.write expected sink)
                          [actual channel] (/.read channel)]
                         (in (same? expected actual)))]
                   (unit.coverage [/.read /.write]
                     (try.else false it))))
             (in (do async.monad
                   [it (do /.monad
                         [.let [[channel sink] (/.channel [])]
                          _ (/.close sink)
                          it (/.try (/.write expected sink))]
                         (in (when it
                               {try.#Failure _}
                               true

                               _
                               false)))]
                   (unit.coverage [/.close /.try]
                     (try.else false it))))
             (in (do async.monad
                   [it (do /.monad
                         [.let [[channel sink] (/.channel [])]
                          _ (/.close sink)
                          it (/.try (/.read channel))]
                         (in (when it
                               {try.#Failure error}
                               (exception.is? /.channel_has_been_closed error)

                               _
                               false)))]
                   (unit.coverage [/.channel_has_been_closed]
                     (try.else false it))))
             ))))
