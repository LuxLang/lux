... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]
    ["[0]" enum]]
   [control
    ["[0]" io]
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" exception]
    [concurrency
     ["[0]" async (.only Async)]
     ["[0]" atom (.only Atom)]]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]
     ["[0]" i64]]]
   [meta
    [type
     ["[0]" refinement]]
    [compiler
     ["@" target]]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" /]])

(def delay
  (for @.js (i64.left_shifted 4 1)
       (i64.left_shifted 3 1)))

(def semaphore
  Test
  (_.for [/.Semaphore]
         (all _.and
              (do [! random.monad]
                [initial_open_positions (|> random.nat (of ! each (|>> (n.% 10) (n.max 1))))
                 .let [semaphore (/.semaphore initial_open_positions)]]
                (in (do async.monad
                      [result (async.within ..delay (/.wait! semaphore))]
                      (unit.coverage [/.semaphore]
                        (when result
                          {.#Some _}
                          true

                          {.#None}
                          false)))))
              (do [! random.monad]
                [initial_open_positions (|> random.nat (of ! each (|>> (n.% 10) (n.max 1))))
                 .let [semaphore (/.semaphore initial_open_positions)]]
                (in (do [! async.monad]
                      [_ (monad.each ! /.wait! (list.repeated initial_open_positions semaphore))
                       result (async.within ..delay (/.wait! semaphore))]
                      (unit.coverage [/.wait!]
                        (when result
                          {.#Some _}
                          false

                          {.#None}
                          true)))))
              (do [! random.monad]
                [initial_open_positions (|> random.nat (of ! each (|>> (n.% 10) (n.max 1))))
                 .let [semaphore (/.semaphore initial_open_positions)]]
                (in (do [! async.monad]
                      [_ (monad.each ! /.wait! (list.repeated initial_open_positions semaphore))
                       .let [block (/.wait! semaphore)]
                       result/0 (async.within ..delay block)
                       open_positions (/.signal! semaphore)
                       result/1 (async.within ..delay block)]
                      (unit.coverage [/.signal!]
                        (when [result/0 result/1 open_positions]
                          [{.#None} {.#Some _} {try.#Success +0}]
                          true

                          _
                          false)))))
              (do [! random.monad]
                [initial_open_positions (|> random.nat (of ! each (|>> (n.% 10) (n.max 1))))
                 .let [semaphore (/.semaphore initial_open_positions)]]
                (in (do async.monad
                      [outcome (/.signal! semaphore)]
                      (unit.coverage [/.semaphore_is_maxed_out]
                        (when outcome
                          {try.#Failure error}
                          (exception.match? /.semaphore_is_maxed_out error)

                          _
                          false)))))
              )))

(def mutex
  Test
  (_.for [/.Mutex]
         (all _.and
              (do [! random.monad]
                [repetitions (|> random.nat (of ! each (|>> (n.% 100) (n.max 10))))
                 .let [resource (atom.atom "")
                       expected_As (text.together (list.repeated repetitions "A"))
                       expected_Bs (text.together (list.repeated repetitions "B"))
                       mutex (/.mutex [])
                       processA (<| (/.synchronize! mutex)
                                    io.io
                                    async.future
                                    (do [! io.monad]
                                      [_ (<| (monad.all !)
                                             (list.repeated repetitions)
                                             (atom.update! (|>> (format "A")) resource))]
                                      (in [])))
                       processB (<| (/.synchronize! mutex)
                                    io.io
                                    async.future
                                    (do [! io.monad]
                                      [_ (<| (monad.all !)
                                             (list.repeated repetitions)
                                             (atom.update! (|>> (format "B")) resource))]
                                      (in [])))]]
                (in (do async.monad
                      [_ processA
                       _ processB
                       .let [outcome (io.run! (atom.read! resource))]]
                      (unit.coverage [/.mutex /.synchronize!]
                        (or (text#= (format expected_As expected_Bs)
                                    outcome)
                            (text#= (format expected_Bs expected_As)
                                    outcome))))))
              )))

(def (waiter resource barrier id)
  (-> (Atom Text) /.Barrier Nat (Async Any))
  (do async.monad
    [_ (/.block! barrier)
     _ (async.future (atom.update! (|>> (format (%.nat id))) resource))]
    (in [])))

(def barrier
  Test
  (_.for [/.Barrier]
         (all _.and
              (do random.monad
                [raw random.nat]
                (_.coverage [/.Limit /.limit]
                  (when [raw (/.limit raw)]
                    [0 {.#None}]
                    true
                    
                    [_ {.#Some limit}]
                    (and (n.> 0 raw)
                         (n.= raw (refinement.value limit)))

                    _
                    false)))
              (do [! random.monad]
                [limit (of ! each (|>> (n.% 9) ++) random.nat)
                 .let [barrier (/.barrier (maybe.trusted (/.limit limit)))
                       resource (atom.atom "")]]
                (in (do [! async.monad]
                      [.let [suffix "_"
                             expected_ending (|> suffix
                                                 (list.repeated limit)
                                                 text.together)
                             expected_ids (enum.range n.enum 0 (-- limit))]
                       _ (|> expected_ids
                             (list#each (function (_ id)
                                          (exec
                                            (io.run! (atom.update! (|>> (format suffix)) resource))
                                            (waiter resource barrier id))))
                             (monad.all !))
                       .let [outcome (io.run! (atom.read! resource))]]
                      (unit.coverage [/.barrier /.block!]
                        (and (text.ends_with? expected_ending outcome)
                             (list.every? (function (_ id)
                                            (text.contains? (%.nat id) outcome))
                                          expected_ids))))))
              )))

(def .public test
  Test
  (<| (_.covering /._)
      (all _.and
           ..semaphore
           ..mutex
           ..barrier
           )))
