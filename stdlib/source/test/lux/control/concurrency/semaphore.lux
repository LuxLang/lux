(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    ["@" target]
    [abstract
     ["." monad (#+ do)]
     ["." enum]]
    [control
     ["." io]
     ["." try]
     ["." exception (#+ exception:)]
     [concurrency
      ["." promise (#+ Promise)]
      ["." atom (#+ Atom)]]]
    [data
     ["." maybe]
     ["." text ("#\." equivalence)
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor)]]]
    [math
     ["." random]
     [number
      ["n" nat]
      ["." i64]]]
    [type
     ["." refinement]]]]
  [\\library
   ["." /]])

(def: delay
  (for {@.js
        (i64.left_shift 4 1)}
       (i64.left_shift 3 1)))

(def: semaphore
  Test
  (_.for [/.Semaphore]
         ($_ _.and
             (do {! random.monad}
               [initial_open_positions (|> random.nat (\ ! map (|>> (n.% 10) (n.max 1))))
                #let [semaphore (/.semaphore initial_open_positions)]]
               (wrap (do promise.monad
                       [result (promise.time_out ..delay (/.wait semaphore))]
                       (_.cover' [/.semaphore]
                                 (case result
                                   (#.Some _)
                                   true

                                   #.None
                                   false)))))
             (do {! random.monad}
               [initial_open_positions (|> random.nat (\ ! map (|>> (n.% 10) (n.max 1))))
                #let [semaphore (/.semaphore initial_open_positions)]]
               (wrap (do {! promise.monad}
                       [_ (monad.map ! /.wait (list.repeat initial_open_positions semaphore))
                        result (promise.time_out ..delay (/.wait semaphore))]
                       (_.cover' [/.wait]
                                 (case result
                                   (#.Some _)
                                   false

                                   #.None
                                   true)))))
             (do {! random.monad}
               [initial_open_positions (|> random.nat (\ ! map (|>> (n.% 10) (n.max 1))))
                #let [semaphore (/.semaphore initial_open_positions)]]
               (wrap (do {! promise.monad}
                       [_ (monad.map ! /.wait (list.repeat initial_open_positions semaphore))
                        #let [block (/.wait semaphore)]
                        result/0 (promise.time_out ..delay block)
                        open_positions (/.signal semaphore)
                        result/1 (promise.time_out ..delay block)]
                       (_.cover' [/.signal]
                                 (case [result/0 result/1 open_positions]
                                   [#.None (#.Some _) (#try.Success +0)]
                                   true

                                   _
                                   false)))))
             (do {! random.monad}
               [initial_open_positions (|> random.nat (\ ! map (|>> (n.% 10) (n.max 1))))
                #let [semaphore (/.semaphore initial_open_positions)]]
               (wrap (do promise.monad
                       [outcome (/.signal semaphore)]
                       (_.cover' [/.semaphore_is_maxed_out]
                                 (case outcome
                                   (#try.Failure error)
                                   (exception.match? /.semaphore_is_maxed_out error)

                                   _
                                   false)))))
             )))

(def: mutex
  Test
  (_.for [/.Mutex]
         ($_ _.and
             (do {! random.monad}
               [repetitions (|> random.nat (\ ! map (|>> (n.% 100) (n.max 10))))
                #let [resource (atom.atom "")
                      expected_As (text.join_with "" (list.repeat repetitions "A"))
                      expected_Bs (text.join_with "" (list.repeat repetitions "B"))
                      mutex (/.mutex [])
                      processA (<| (/.synchronize mutex)
                                   io.io
                                   promise.future
                                   (do {! io.monad}
                                     [_ (<| (monad.seq !)
                                            (list.repeat repetitions)
                                            (atom.update (|>> (format "A")) resource))]
                                     (wrap [])))
                      processB (<| (/.synchronize mutex)
                                   io.io
                                   promise.future
                                   (do {! io.monad}
                                     [_ (<| (monad.seq !)
                                            (list.repeat repetitions)
                                            (atom.update (|>> (format "B")) resource))]
                                     (wrap [])))]]
               (wrap (do promise.monad
                       [_ processA
                        _ processB
                        #let [outcome (io.run (atom.read resource))]]
                       (_.cover' [/.mutex /.synchronize]
                                 (or (text\= (format expected_As expected_Bs)
                                             outcome)
                                     (text\= (format expected_Bs expected_As)
                                             outcome))))))
             )))

(def: (waiter resource barrier id)
  (-> (Atom Text) /.Barrier Nat (Promise Any))
  (do promise.monad
    [_ (/.block barrier)
     _ (promise.future (atom.update (|>> (format (%.nat id))) resource))]
    (wrap [])))

(def: barrier
  Test
  (_.for [/.Barrier]
         ($_ _.and
             (do random.monad
               [raw random.nat]
               (_.cover [/.Limit /.limit]
                        (case [raw (/.limit raw)]
                          [0 #.None]
                          true
                          
                          [_ (#.Some limit)]
                          (and (n.> 0 raw)
                               (n.= raw (refinement.un_refine limit)))

                          _
                          false)))
             (do {! random.monad}
               [limit (\ ! map (|>> (n.% 9) inc) random.nat)
                #let [barrier (/.barrier (maybe.assume (/.limit limit)))
                      resource (atom.atom "")]]
               (wrap (do {! promise.monad}
                       [#let [suffix "_"
                              expected_ending (|> suffix
                                                  (list.repeat limit)
                                                  (text.join_with ""))
                              expected_ids (enum.range n.enum 0 (dec limit))]
                        _ (|> expected_ids
                              (list\map (function (_ id)
                                          (exec (io.run (atom.update (|>> (format suffix)) resource))
                                            (waiter resource barrier id))))
                              (monad.seq !))
                        #let [outcome (io.run (atom.read resource))]]
                       (_.cover' [/.barrier /.block]
                                 (and (text.ends_with? expected_ending outcome)
                                      (list.every? (function (_ id)
                                                     (text.contains? (%.nat id) outcome))
                                                   expected_ids))))))
             )))

(def: #export test
  Test
  (<| (_.covering /._)
      ($_ _.and
          ..semaphore
          ..mutex
          ..barrier
          )))
