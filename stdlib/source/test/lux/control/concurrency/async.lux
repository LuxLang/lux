(.require
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" functor (.only Injection Comparison)]
     ["$[0]" apply]
     ["$[0]" monad]]]
   [control
    ["[0]" io]]
   [math
    ["[0]" random]
    [number
     ["n" nat]
     ["i" int]
     ["[0]" i64]]]
   [meta
    ["@" target]]
   [world
    [time
     ["[0]" instant]
     ["[0]" duration]]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" atom (.only Atom)]]]])

(def injection
  (Injection /.Async)
  /.resolved)

(def comparison
  (Comparison /.Async)
  (function (_ == left right)
    (io.run!
     (do io.monad
       [?left (/.value left)
        ?right (/.value right)]
       (in (case [?left ?right]
             [{.#Some left}
              {.#Some right}]
             (== left right)
             
             _
             false))))))

(def delay
  (for @.js (i64.left_shifted 4 1)
       (i64.left_shifted 3 1)))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [waiting_time (|> random.nat (at ! each (|>> (n.% ..delay) (n.+ ..delay))))
         expected random.nat
         dummy random.nat
         .let [not_dummy (|> random.nat (random.only (|>> (n.= dummy) not)))]
         leftE not_dummy
         rightE not_dummy]
        (all _.and
             (_.for [/.functor]
                    ($functor.spec ..injection ..comparison /.functor))
             (_.for [/.apply]
                    ($apply.spec ..injection ..comparison /.apply))
             (_.for [/.monad]
                    ($monad.spec ..injection ..comparison /.monad))
             
             (in (do /.monad
                   [.let [[async resolver] (is [(/.Async Nat) (/.Resolver Nat)]
                                               (/.async []))]
                    resolved? (/.future (resolver expected))
                    actual async]
                   (_.coverage' [/.Async /.Resolver /.async]
                     (and resolved?
                          (n.= expected actual)))))
             (in (do /.monad
                   [actual (/.resolved expected)]
                   (_.coverage' [/.resolved]
                     (n.= expected actual))))
             (in (do /.monad
                   [actual (/.future (io.io expected))]
                   (_.coverage' [/.future]
                     (n.= expected actual))))
             (in (do /.monad
                   [pre (/.future instant.now)
                    actual (/.schedule! waiting_time (io.io expected))
                    post (/.future instant.now)]
                   (_.coverage' [/.schedule!]
                     (and (n.= expected actual)
                          (i.>= (.int waiting_time)
                                (duration.millis (instant.span pre post)))))))
             (in (do /.monad
                   [pre (/.future instant.now)
                    _ (/.delay waiting_time)
                    post (/.future instant.now)]
                   (_.coverage' [/.delay]
                     (i.>= (.int waiting_time)
                           (duration.millis (instant.span pre post))))))
             (in (do /.monad
                   [[leftA rightA] (/.and (/.future (io.io leftE))
                                          (/.future (io.io rightE)))]
                   (_.coverage' [/.and]
                     (n.= (n.+ leftE rightE)
                          (n.+ leftA rightA)))))
             (in (do /.monad
                   [pre (/.future instant.now)
                    actual (/.after waiting_time expected)
                    post (/.future instant.now)]
                   (_.coverage' [/.after]
                     (and (n.= expected actual)
                          (i.>= (.int waiting_time)
                                (duration.millis (instant.span pre post)))))))
             (in (do /.monad
                   [?left (/.or (in leftE)
                                (/.after waiting_time dummy))
                    ?right (/.or (/.after waiting_time dummy)
                                 (in rightE))]
                   (_.coverage' [/.or]
                     (case [?left ?right]
                       [{.#Left leftA} {.#Right rightA}]
                       (n.= (n.+ leftE rightE)
                            (n.+ leftA rightA))

                       _
                       false))))
             (in (do /.monad
                   [leftA (/.either (in leftE)
                                    (/.after waiting_time dummy))
                    rightA (/.either (/.after waiting_time dummy)
                                     (in rightE))]
                   (_.coverage' [/.either]
                     (n.= (n.+ leftE rightE)
                          (n.+ leftA rightA)))))
             (in (do /.monad
                   [?actual (/.future (/.value (/.resolved expected)))
                    .let [[async resolver] (is [(/.Async Nat) (/.Resolver Nat)]
                                               (/.async []))]
                    ?never (/.future (/.value async))]
                   (_.coverage' [/.value]
                     (case [?actual ?never]
                       [{.#Some actual} {.#None}]
                       (n.= expected actual)

                       _
                       false))))
             (in (do /.monad
                   [yep (/.future (/.resolved? (/.resolved expected)))
                    .let [[async resolver] (is [(/.Async Nat) (/.Resolver Nat)]
                                               (/.async []))]
                    nope (/.future (/.resolved? async))]
                   (_.coverage' [/.resolved?]
                     (and yep
                          (not nope)))))
             (in (do /.monad
                   [?none (/.within 0 (/.after waiting_time dummy))
                    ?actual (/.within waiting_time (in expected))]
                   (_.coverage' [/.within]
                     (case [?none ?actual]
                       [{.#None} {.#Some actual}]
                       (n.= expected actual)

                       _
                       false))))
             (in (do /.monad
                   [.let [box (is (Atom Nat)
                                  (atom.atom dummy))]
                    _ (/.future (/.upon! (function (_ value)
                                           (atom.write! value box))
                                         (/.resolved expected)))
                    actual (/.future (atom.read! box))]
                   (_.coverage' [/.upon!]
                     (n.= expected actual))))
             ))))
