(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    ["@" target]
    [abstract
     [monad {"+" [do]}]
     [\\specification
      ["$[0]" functor {"+" [Injection Comparison]}]
      ["$[0]" apply]
      ["$[0]" monad]]]
    [control
     [pipe {"+" [case>]}]
     ["[0]" io]]
    [time
     ["[0]" instant]
     ["[0]" duration]]
    [math
     ["[0]" random]
     [number
      ["n" nat]
      ["i" int]
      ["[0]" i64]]]]]
  [\\library
   ["[0]" /
    [//
     ["[0]" atom {"+" [Atom]}]]]])

(def: injection
  (Injection /.Async)
  /.resolved)

(def: comparison
  (Comparison /.Async)
  (function (_ == left right)
    (io.run!
     (do io.monad
       [?left (/.value left)
        ?right (/.value right)]
       (in (case [?left ?right]
             [{#.Some left}
              {#.Some right}]
             (== left right)
             
             _
             false))))))

(def: delay
  (for [@.js
        (i64.left_shifted 4 1)]
       (i64.left_shifted 3 1)))

(def: .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [waiting_time (|> random.nat (\ ! each (|>> (n.% ..delay) (n.+ ..delay))))
         expected random.nat
         dummy random.nat
         .let [not_dummy (|> random.nat (random.only (|>> (n.= dummy) not)))]
         leftE not_dummy
         rightE not_dummy]
        ($_ _.and
            (_.for [/.functor]
                   ($functor.spec ..injection ..comparison /.functor))
            (_.for [/.apply]
                   ($apply.spec ..injection ..comparison /.apply))
            (_.for [/.monad]
                   ($monad.spec ..injection ..comparison /.monad))
            
            (in (do /.monad
                  [.let [[async resolver] (: [(/.Async Nat) (/.Resolver Nat)]
                                             (/.async []))]
                   resolved? (/.future (resolver expected))
                   actual async]
                  (_.cover' [/.Async /.Resolver /.async]
                            (and resolved?
                                 (n.= expected actual)))))
            (in (do /.monad
                  [actual (/.resolved expected)]
                  (_.cover' [/.resolved]
                            (n.= expected actual))))
            (in (do /.monad
                  [actual (/.future (io.io expected))]
                  (_.cover' [/.future]
                            (n.= expected actual))))
            (in (do /.monad
                  [pre (/.future instant.now)
                   actual (/.schedule! waiting_time (io.io expected))
                   post (/.future instant.now)]
                  (_.cover' [/.schedule!]
                            (and (n.= expected actual)
                                 (i.>= (.int waiting_time)
                                       (duration.millis (instant.span pre post)))))))
            (in (do /.monad
                  [pre (/.future instant.now)
                   _ (/.delay waiting_time)
                   post (/.future instant.now)]
                  (_.cover' [/.delay]
                            (i.>= (.int waiting_time)
                                  (duration.millis (instant.span pre post))))))
            (in (do /.monad
                  [[leftA rightA] (/.and (/.future (io.io leftE))
                                         (/.future (io.io rightE)))]
                  (_.cover' [/.and]
                            (n.= (n.+ leftE rightE)
                                 (n.+ leftA rightA)))))
            (in (do /.monad
                  [pre (/.future instant.now)
                   actual (/.after waiting_time expected)
                   post (/.future instant.now)]
                  (_.cover' [/.after]
                            (and (n.= expected actual)
                                 (i.>= (.int waiting_time)
                                       (duration.millis (instant.span pre post)))))))
            (in (do /.monad
                  [?left (/.or (in leftE)
                               (/.after waiting_time dummy))
                   ?right (/.or (/.after waiting_time dummy)
                                (in rightE))]
                  (_.cover' [/.or]
                            (case [?left ?right]
                              [{#.Left leftA} {#.Right rightA}]
                              (n.= (n.+ leftE rightE)
                                   (n.+ leftA rightA))

                              _
                              false))))
            (in (do /.monad
                  [leftA (/.either (in leftE)
                                   (/.after waiting_time dummy))
                   rightA (/.either (/.after waiting_time dummy)
                                    (in rightE))]
                  (_.cover' [/.either]
                            (n.= (n.+ leftE rightE)
                                 (n.+ leftA rightA)))))
            (in (do /.monad
                  [?actual (/.future (/.value (/.resolved expected)))
                   .let [[async resolver] (: [(/.Async Nat) (/.Resolver Nat)]
                                             (/.async []))]
                   ?never (/.future (/.value async))]
                  (_.cover' [/.value]
                            (case [?actual ?never]
                              [{#.Some actual} #.None]
                              (n.= expected actual)

                              _
                              false))))
            (in (do /.monad
                  [yep (/.future (/.resolved? (/.resolved expected)))
                   .let [[async resolver] (: [(/.Async Nat) (/.Resolver Nat)]
                                             (/.async []))]
                   nope (/.future (/.resolved? async))]
                  (_.cover' [/.resolved?]
                            (and yep
                                 (not nope)))))
            (in (do /.monad
                  [?none (/.within 0 (/.after waiting_time dummy))
                   ?actual (/.within waiting_time (in expected))]
                  (_.cover' [/.within]
                            (case [?none ?actual]
                              [#.None {#.Some actual}]
                              (n.= expected actual)

                              _
                              false))))
            (in (do /.monad
                  [.let [box (: (Atom Nat)
                                (atom.atom dummy))]
                   _ (/.future (/.upon! (function (_ value)
                                          (atom.write! value box))
                                        (/.resolved expected)))
                   actual (/.future (atom.read! box))]
                  (_.cover' [/.upon!]
                            (n.= expected actual))))
            ))))
