... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" int]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" input]
   ["[0]" output]
   ["[0]" match]
   ["[0]" body]
   ["[0]" pattern]
   ["[0]" clause]]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_bit random.bit
         expected_nat random.nat
         expected_int random.int
         other_int (random.only (|>> (int.= expected_int) not)
                                random.int)])
      (all _.and
           (_.coverage [pattern.item]
             (let [clause (all clause.or
                               (clause.clause (pattern.item (pattern.is (same? expected_int)))
                                              true)
                               (clause.clause pattern.any
                                              false))]
               (and (/.when (list expected_int other_int) clause)
                    (/.when (list other_int expected_int) clause)
                    (not (/.when (list other_int other_int) clause)))))
           (_.for [pattern.Zero]
                  (all _.and
                       (_.coverage [pattern.any]
                         (<| (/.when expected_int)
                             (clause.clause pattern.any true)))
                       (_.coverage [pattern.none]
                         (not (<| (/.when expected_int)
                                  (all clause.or
                                       (clause.clause pattern.none true)
                                       (clause.clause pattern.any false)))))
                       (_.coverage [pattern.is]
                         (<| (/.when expected_int)
                             (all clause.or
                                  (clause.clause (pattern.is (same? expected_int)) true)
                                  (clause.clause pattern.any false))))
                       ))
           (_.for [pattern.Succ]
                  (all _.and
                       (_.coverage [pattern.variable]
                         (<| (/.when expected_int)
                             (clause.clause pattern.variable
                                            (same? expected_int))))
                       (_.coverage [pattern.first]
                         (let [clause (all clause.or
                                           (clause.clause (pattern.first (same? expected_int))
                                                          (same? expected_int))
                                           (clause.clause pattern.any
                                                          false))]
                           (and (/.when (list expected_int other_int) clause)
                                (/.when (list other_int expected_int) clause)
                                (not (/.when (list other_int other_int) clause)))))
                       ))
           (_.coverage [/.when]
             (<| (/.when [other_int expected_int])
                 (clause.clause (all pattern.or
                                     (pattern.pair (pattern.int other_int) pattern.variable)
                                     (pattern.pair pattern.variable (pattern.int other_int)))
                                (same? expected_int))))
           )))
