... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" int]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" input]
   ["[0]" output]
   ["[0]" match]
   ["[0]" body]]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_bit random.bit
         expected_nat random.nat
         expected_int random.int
         other_int (random.only (|>> (int.= expected_int) not)
                                random.int)])
      (all _.and
           (_.coverage [/.item]
             (let [clause (all /.else
                               (/.clause (/.item (/.is (same? expected_int)))
                                         true)
                               (/.clause /.any
                                         false))]
               (and (/.when (list expected_int other_int) clause)
                    (/.when (list other_int expected_int) clause)
                    (not (/.when (list other_int other_int) clause)))))
           (_.for [/.Static]
                  (all _.and
                       (_.coverage [/.any]
                         (<| (/.when expected_int)
                             (/.clause /.any true)))
                       (_.coverage [/.none]
                         (not (<| (/.when expected_int)
                                  (all /.else
                                       (/.clause /.none true)
                                       (/.clause /.any false)))))
                       (_.coverage [/.is]
                         (<| (/.when expected_int)
                             (all /.else
                                  (/.clause (/.is (same? expected_int)) true)
                                  (/.clause /.any false))))
                       ))
           (_.for [/.Dynamic]
                  (all _.and
                       (_.coverage [/.variable]
                         (<| (/.when expected_int)
                             (/.clause /.variable
                                       (same? expected_int))))
                       (_.coverage [/.first]
                         (let [clause (all /.else
                                           (/.clause (/.first (same? expected_int))
                                                     (same? expected_int))
                                           (/.clause /.any
                                                     false))]
                           (and (/.when (list expected_int other_int) clause)
                                (/.when (list other_int expected_int) clause)
                                (not (/.when (list other_int other_int) clause)))))
                       ))
           (_.coverage [/.when]
             (<| (/.when [other_int expected_int])
                 (/.clause (all /.or
                                (/.pair (/.int other_int) /.variable)
                                (/.pair /.variable (/.int other_int)))
                           (same? expected_int))))
           )))
