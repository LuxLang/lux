... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" integer]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_integer random.integer
         other_integer (random.only (|>> (integer.= expected_integer) not)
                                    random.integer)])
      (all _.and
           (_.coverage [/.item]
             (let [clause (all /.else
                               (/.clause (/.item (/.is (same? expected_integer)))
                                         true)
                               (/.clause /.any
                                         false))]
               (and (/.when (list expected_integer other_integer) clause)
                    (/.when (list other_integer expected_integer) clause)
                    (not (/.when (list other_integer other_integer) clause)))))
           (_.for [/.Static]
                  (all _.and
                       (_.coverage [/.any]
                         (<| (/.when expected_integer)
                             (/.clause /.any true)))
                       (_.coverage [/.none]
                         (not (<| (/.when expected_integer)
                                  (all /.else
                                       (/.clause /.none true)
                                       (/.clause /.any false)))))
                       (_.coverage [/.is]
                         (<| (/.when expected_integer)
                             (all /.else
                                  (/.clause (/.is (same? expected_integer)) true)
                                  (/.clause /.any false))))
                       ))
           (_.for [/.Dynamic]
                  (all _.and
                       (_.coverage [/.variable]
                         (<| (/.when expected_integer)
                             (/.clause /.variable
                                       (same? expected_integer))))
                       (_.coverage [/.first]
                         (let [clause (all /.else
                                           (/.clause (/.first (same? expected_integer))
                                                     (same? expected_integer))
                                           (/.clause /.any
                                                     false))]
                           (and (/.when (list expected_integer other_integer) clause)
                                (/.when (list other_integer expected_integer) clause)
                                (not (/.when (list other_integer other_integer) clause)))))
                       ))
           (_.coverage [/.when]
             (<| (/.when [other_integer expected_integer])
                 (/.clause (all /.or
                                (/.pair (/.integer other_integer) /.variable)
                                (/.pair /.variable (/.integer other_integer)))
                           (same? expected_integer))))
           )))
