(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]
    [\\specification
     ["$[0]" functor {"+" Injection Comparison}]
     ["$[0]" apply]
     ["$[0]" monad]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" / {"+" Reader}
   [//
    ["[0]" io {"+" IO}]]]])

(def: (injection value)
  (Injection (All (_ a r) (Reader r a)))
  (function (_ env)
    value))

(def: comparison
  (Comparison (All (_ a r) (Reader r a)))
  (function (_ == left right)
    (== (/.result [] left) (/.result [] right))))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Reader])
      (do random.monad
        [sample random.nat
         factor random.nat]
        ($_ _.and
            (_.for [/.functor]
                   ($functor.spec ..injection ..comparison /.functor))
            (_.for [/.apply]
                   ($apply.spec ..injection ..comparison /.apply))
            (_.for [/.monad]
                   ($monad.spec ..injection ..comparison /.monad))

            (_.cover [/.result /.read]
                     (n.= sample
                          (/.result sample /.read)))
            (_.cover [/.local]
                     (n.= (n.* factor sample)
                          (/.result sample (/.local (n.* factor) /.read))))
            (let [(open "io#[0]") io.monad]
              (_.cover [/.with /.lifted]
                       (|> (: (/.Reader Any (IO Nat))
                              (do (/.with io.monad)
                                [a (/.lifted (io#in sample))
                                 b (in factor)]
                                (in (n.* b a))))
                           (/.result [])
                           io.run!
                           (n.= (n.* factor sample)))))))))
