(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" functor (.only Injection Comparison)]
     ["$[0]" apply]
     ["$[0]" monad]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" / (.only Reader)
   [//
    ["[0]" io (.only IO)]]]])

(def: (injection value)
  (Injection (All (_ a r) (Reader r a)))
  (function (_ env)
    value))

(def: comparison
  (Comparison (All (_ a r) (Reader r a)))
  (function (_ == left right)
    (== (/.result [] left) (/.result [] right))))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Reader])
      (do random.monad
        [sample random.nat
         factor random.nat]
        (all _.and
             (_.for [/.functor]
                    ($functor.spec ..injection ..comparison /.functor))
             (_.for [/.apply]
                    ($apply.spec ..injection ..comparison /.apply))
             (_.for [/.monad]
                    ($monad.spec ..injection ..comparison /.monad))

             (_.coverage [/.result /.read]
               (n.= sample
                    (/.result sample /.read)))
             (_.coverage [/.local]
               (n.= (n.* factor sample)
                    (/.result sample (/.local (n.* factor) /.read))))
             (let [(open "io#[0]") io.monad]
               (_.coverage [/.with /.lifted]
                 (|> (is (/.Reader Any (IO Nat))
                         (do (/.with io.monad)
                           [a (/.lifted (io#in sample))
                            b (in factor)]
                           (in (n.* b a))))
                     (/.result [])
                     io.run!
                     (n.= (n.* factor sample)))))))))
