(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [data
    [number
     ["n" nat]]]
   [math
    ["." random]]]
  {1
   ["." / (#+ Reader)
    [//
     ["." io (#+ IO)]]]})

(def: (injection value)
  (Injection (All [a r] (Reader r a)))
  (function (_ env)
    value))

(def: comparison
  (Comparison (All [a r] (Reader r a)))
  (function (_ == left right)
    (== (/.run [] left) (/.run [] right))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.Reader])
      (do random.monad
        [sample random.nat
         factor random.nat]
        ($_ _.and
            (_.with-cover [/.functor]
              ($functor.spec ..injection ..comparison /.functor))
            (_.with-cover [/.apply]
              ($apply.spec ..injection ..comparison /.apply))
            (_.with-cover [/.monad]
              ($monad.spec ..injection ..comparison /.monad))

            (_.cover [/.run /.ask]
                     (n.= sample
                          (/.run sample /.ask)))
            (_.cover [/.local]
                     (n.= (n.* factor sample)
                          (/.run sample (/.local (n.* factor) /.ask))))
            (let [(^open "io@.") io.monad]
              (_.cover [/.with /.lift]
                       (|> (: (/.Reader Any (IO Nat))
                              (do (/.with io.monad)
                                [a (/.lift (io@wrap sample))
                                 b (wrap factor)]
                                (wrap (n.* b a))))
                           (/.run [])
                           io.run
                           (n.= (n.* factor sample)))))))))
