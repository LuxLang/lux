(.module:
  [lux #*
   ["." io (#+ IO)]
   ["_" test (#+ Test)]
   [control
    [monad (#+ do)]
    {[0 #test]
     [/
      [".T" functor (#+ Injection Comparison)]
      [".T" apply]
      [".T" monad]]}]
   [data
    [text
     format]]
   [math
    ["r" random]]]
  {1
   ["." / (#+ Reader)]})

(def: (injection value)
  (Injection (All [a r] (Reader r a)))
  (function (_ env)
    value))

(def: comparison
  (Comparison (All [a r] (Reader r a)))
  (function (_ == left right)
    (== (/.run [] left) (/.run [] right))))

(def: #export test
  Test
  (<| (_.context (%name (name-of /.Reader)))
      (do r.monad
        [sample r.nat
         factor r.nat]
        ($_ _.and
            (_.test "Can query the environment."
                    (n/= sample
                         (/.run sample /.ask)))
            (_.test "Can modify an environment locally."
                    (n/= (n/* factor sample)
                         (/.run sample (/.local (n/* factor) /.ask))))
            (functorT.laws ..injection ..comparison /.functor)
            (applyT.laws ..injection ..comparison /.apply)
            (monadT.laws ..injection ..comparison /.monad)
            
            (let [(^open "io/.") io.monad]
              (_.test "Can add reader functionality to any monad."
                      (|> (: (/.Reader Any (IO Nat))
                             (do (/.with-reader io.monad)
                               [a (/.lift (io/wrap sample))
                                b (wrap factor)]
                               (wrap (n/* b a))))
                          (/.run [])
                          io.run
                          (n/= (n/* factor sample)))))))))
