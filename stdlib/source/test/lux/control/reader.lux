(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [data
    ["." name]
    [number
     ["n" nat]]
    [text
     ["%" format (#+ format)]]]
   [math
    ["r" random]]]
  {1
   ["." / (#+ Reader)
    [//
     ["." io (#+ IO)]]]})

(def: (injection value)
  (Injection (All [a r] (Reader r a)))
  (function (_ env)
    value))

(def: comparison
  (Comparison (All [a r] (Reader r a)))
  (function (_ == left right)
    (== (/.run [] left) (/.run [] right))))

(def: #export test
  Test
  (<| (_.context (name.module (name-of /._)))
      (do r.monad
        [sample r.nat
         factor r.nat]
        ($_ _.and
            ($functor.spec ..injection ..comparison /.functor)
            ($apply.spec ..injection ..comparison /.apply)
            ($monad.spec ..injection ..comparison /.monad)

            (_.test (%.name (name-of /.ask))
                    (n.= sample
                         (/.run sample /.ask)))
            (_.test (%.name (name-of /.local))
                    (n.= (n.* factor sample)
                         (/.run sample (/.local (n.* factor) /.ask))))
            (let [(^open "io@.") io.monad]
              (_.test (%.name (name-of /.with))
                      (|> (: (/.Reader Any (IO Nat))
                             (do (/.with io.monad)
                               [a (/.lift (io@wrap sample))
                                b (wrap factor)]
                               (wrap (n.* b a))))
                          (/.run [])
                          io.run
                          (n.= (n.* factor sample)))))))))
