... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]]
   [error
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]]
   [data
    ["[0]" text]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [meta
    ["[0]" provenance]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" code]
  ["[1][0]" provenance]
  ["[1][0]" name]
  ["[1][0]" configuration]
  ["[1][0]" version]
  ["[1][0]" static]
  ["[1][0]" extension]
  ["[1][0]" label]
  ["[1][0]" binding]
  ["[1][0]" module (.only)
   ["[1]/[0]" import]]])

(the !expect
  (template.macro (_ <pattern> <value>)
    [(when <value>
       <pattern> true
       _ false)]))

(the compiler_related
  Test
  (do random.monad
    [target (random.upper_cased 1)
     version (random.upper_cased 1)
     source_code (random.upper_cased 1)
     expected_current_module (random.upper_cased 1)
     nominal_type (random.upper_cased 1)
     expected_seed random.natural
     expected random.natural
     dummy (random.only (|>> (n.= expected) not) random.natural)
     configuration_feature (random.upper_cased 1)
     configuration_value (random.upper_cased 1)
     .let [configuration (list [configuration_feature configuration_value])
           expected_lux (is Lux
                            [.#info [.#target target
                                     .#version version
                                     .#mode {.#Build}
                                     .#configuration configuration]
                             .#source [provenance.dummy 0 source_code]
                             .#provenance provenance.dummy
                             .#current_module {.#Some expected_current_module}
                             .#modules (list)
                             .#scopes (stack)
                             .#type_context [.#ex_counter 0
                                             .#var_counter 0
                                             .#var_bindings (list)]
                             .#expected {.#Some {.#Nominal nominal_type (list)}}
                             .#seed expected_seed
                             .#eval (as_expected [])])]]
    (all _.and
         (_.coverage [/.value]
           (|> (by /.monad pure expected)
               (/.value expected_lux)
               (!expect (^.multi {try.#Success actual}
                                 (n.= expected actual)))))
         (_.coverage [/.value']
           (|> (by /.monad pure expected)
               (/.value' expected_lux)
               (!expect (^.multi {try.#Success [actual_lux actual]}
                                 (and (same? expected_lux actual_lux)
                                      (n.= expected actual))))))
         (_.coverage [/.compiler_state]
           (|> /.compiler_state
               (/.value expected_lux)
               (!expect (^.multi {try.#Success actual_lux}
                                 (same? expected_lux actual_lux)))))
         (_.coverage [/.version]
           (|> /.version
               (/.value expected_lux)
               (!expect (^.multi {try.#Success it}
                                 (same? version it)))))
         (_.coverage [/.configuration]
           (|> /.configuration
               (/.value expected_lux)
               (!expect (^.multi {try.#Success it}
                                 (same? configuration it)))))
         )))

(the error_handling
  Test
  (do random.monad
    [target (random.upper_cased 1)
     version (random.upper_cased 1)
     source_code (random.upper_cased 1)
     expected_current_module (random.upper_cased 1)
     nominal_type (random.upper_cased 1)
     expected_seed random.natural
     expected random.natural
     dummy (random.only (|>> (n.= expected) not) random.natural)
     expected_error (random.upper_cased 1)
     .let [expected_lux (is Lux
                            [.#info [.#target target
                                     .#version version
                                     .#mode {.#Build}
                                     .#configuration (list)]
                             .#source [provenance.dummy 0 source_code]
                             .#provenance provenance.dummy
                             .#current_module {.#Some expected_current_module}
                             .#modules (list)
                             .#scopes (stack)
                             .#type_context [.#ex_counter 0
                                             .#var_counter 0
                                             .#var_bindings (list)]
                             .#expected {.#Some {.#Nominal nominal_type (list)}}
                             .#seed expected_seed
                             .#eval (as_expected [])])]]
    (all _.and
         (_.coverage [/.failure]
           (|> (/.failure expected_error)
               (is (Meta Any))
               (/.value expected_lux)
               (!expect (^.multi {try.#Failure actual_error}
                                 (text.= (provenance.with provenance.dummy expected_error)
                                         actual_error)))))
         (_.coverage [/.assertion]
           (and (|> (/.assertion expected_error true)
                    (is (Meta Any))
                    (/.value expected_lux)
                    (!expect {try.#Success []}))
                (|> (/.assertion expected_error false)
                    (/.value expected_lux)
                    (!expect (^.multi {try.#Failure actual_error}
                                      (text.= expected_error actual_error))))))
         (_.coverage [/.either]
           (and (|> (/.either (by /.monad pure expected)
                              (is (Meta Natural)
                                  (/.failure expected_error)))
                    (/.value expected_lux)
                    (!expect (^.multi {try.#Success actual}
                                      (n.= expected actual))))
                (|> (/.either (is (Meta Natural)
                                  (/.failure expected_error))
                              (by /.monad pure expected))
                    (/.value expected_lux)
                    (!expect (^.multi {try.#Success actual}
                                      (n.= expected actual))))
                (|> (/.either (is (Meta Natural)
                                  (/.failure expected_error))
                              (is (Meta Natural)
                                  (/.failure expected_error)))
                    (/.value expected_lux)
                    (!expect (^.multi {try.#Failure actual_error}
                                      (text.= (provenance.with provenance.dummy expected_error)
                                              actual_error))))
                (|> (/.either (by /.monad pure expected)
                              (by /.monad pure dummy))
                    (/.value expected_lux)
                    (!expect (^.multi {try.#Success actual}
                                      (n.= expected actual))))
                ))
         (_.coverage [/.or]
           (and (|> (/.or (by /.monad pure expected)
                          (is (Meta Natural)
                              (/.failure expected_error)))
                    (/.value expected_lux)
                    (!expect (^.multi {try.#Success {.#Left actual}}
                                      (n.= expected actual))))
                (|> (/.or (is (Meta Natural)
                              (/.failure expected_error))
                          (by /.monad pure expected))
                    (/.value expected_lux)
                    (!expect (^.multi {try.#Success {.#Right actual}}
                                      (n.= expected actual))))
                (|> (/.or (is (Meta Natural)
                              (/.failure expected_error))
                          (is (Meta Natural)
                              (/.failure expected_error)))
                    (/.value expected_lux)
                    (!expect (^.multi {try.#Failure actual_error}
                                      (text.= (provenance.with provenance.dummy expected_error)
                                              actual_error))))
                (|> (/.or (by /.monad pure expected)
                          (by /.monad pure dummy))
                    (/.value expected_lux)
                    (!expect (^.multi {try.#Success {.#Left actual}}
                                      (n.= expected actual))))
                ))
         (_.coverage [/.and]
           (and (|> (/.and (by /.monad pure expected)
                           (is (Meta Natural)
                               (/.failure expected_error)))
                    (/.value expected_lux)
                    (!expect {try.#Failure _}))
                (|> (/.and (is (Meta Natural)
                               (/.failure expected_error))
                           (by /.monad pure expected))
                    (/.value expected_lux)
                    (!expect {try.#Failure _}))
                (|> (/.and (is (Meta Natural)
                               (/.failure expected_error))
                           (is (Meta Natural)
                               (/.failure expected_error)))
                    (/.value expected_lux)
                    (!expect {try.#Failure _}))
                (|> (/.and (by /.monad pure expected)
                           (by /.monad pure dummy))
                    (/.value expected_lux)
                    (!expect (^.multi {try.#Success [actual actual_dummy]}
                                      (and (same? expected actual)
                                           (same? dummy actual_dummy)))))
                ))
         (_.coverage [/.try]
           (and (|> (/.try (/.failure expected_error))
                    (/.value expected_lux)
                    (!expect (^.multi {try.#Success {try.#Failure actual_error}}
                                      (text.= (provenance.with provenance.dummy expected_error)
                                              actual_error))))
                (|> (/.try (by /.monad pure expected))
                    (/.value expected_lux)
                    (!expect (^.multi {try.#Success {try.#Success actual}}
                                      (same? expected actual))))))
         )))

(the random_provenance
  (Random Provenance)
  (all random.and
       (random.upper_cased 1)
       random.natural
       random.natural))

(the context_related
  (do [! random.monad]
    [target (random.upper_cased 1)
     version (random.upper_cased 1)
     source_code (random.upper_cased 1)
     expected_current_module (random.upper_cased 1)
     expected_type (by ! each (function (_ name)
                                {.#Nominal name (list)})
                       (random.upper_cased 1))
     expected_seed random.natural
     expected random.natural
     dummy (random.only (|>> (n.= expected) not) random.natural)
     expected_provenance ..random_provenance
     .let [type_context [.#ex_counter 0
                         .#var_counter 0
                         .#var_bindings (list)]
           expected_lux (is (-> (Maybe Type)
                                Lux)
                            (function (_ expected)
                              (is Lux
                                  [.#info [.#target target
                                           .#version version
                                           .#mode {.#Build}
                                           .#configuration (list)]
                                   .#source [provenance.dummy 0 source_code]
                                   .#provenance expected_provenance
                                   .#current_module {.#Some expected_current_module}
                                   .#modules (list)
                                   .#scopes (stack)
                                   .#type_context type_context
                                   .#expected expected
                                   .#seed expected_seed
                                   .#eval (as_expected [])])))]]
    (all _.and
         (_.coverage [/.target]
           (|> /.target
               (/.value (expected_lux {.#Some expected_type}))
               (try#each (same? target))
               (try.else false)))
         (_.coverage [/.seed]
           (|> (do /.monad
                 [pre /.seed
                  post /.seed]
                 (pure [pre post]))
               (/.value (expected_lux {.#Some expected_type}))
               (!expect (^.multi {try.#Success [actual_pre actual_post]}
                                 (and (n.= expected_seed actual_pre)
                                      (n.= (++ expected_seed) actual_post))))))
         (_.coverage [/.provenance]
           (|> /.provenance
               (/.value (expected_lux {.#Some expected_type}))
               (!expect (^.multi {try.#Success actual_provenance}
                                 (same? expected_provenance actual_provenance)))))
         (_.coverage [/.expected_type]
           (|> /.expected_type
               (/.value (expected_lux {.#Some expected_type}))
               (!expect (^.multi {try.#Success actual_type}
                                 (same? expected_type actual_type)))))
         (_.coverage [/.not_expecting_any_type]
           (|> /.expected_type
               (/.value (expected_lux {.#None}))
               (!expect (^.multi {try.#Failure error}
                                 (same? /.not_expecting_any_type error)))))
         (_.coverage [.Type_Context
                      .#ex_counter .#var_counter .#var_bindings

                      /.type_context]
           (|> /.type_context
               (/.value (expected_lux {.#Some expected_type}))
               (try#each (same? type_context))
               (try.else false)))
         )))

(the injection
  (Injection Meta)
  (by /.monad pure))

(the (comparison init)
  (-> Lux (Comparison Meta))
  (function (_ == left right)
    (when [(/.value init left)
           (/.value init right)]
      [{try.#Success left} {try.#Success right}]
      (== left right)

      _
      false)))

(`` (`` (the .public test
          Test
          (<| (_.covering /._)
              (_.for [.Meta .Lux
                      .#info .#source .#provenance .#current_module
                      .#modules .#scopes .#type_context .#expected
                      .#seed .#eval])
              (all _.and
                   (do [! random.monad]
                     [target (random.upper_cased 1)
                      version (random.upper_cased 1)
                      source_code (random.upper_cased 1)
                      expected_current_module (random.upper_cased 1)
                      expected_type (by ! each (function (_ name)
                                                 {.#Nominal name (list)})
                                        (random.upper_cased 1))
                      expected_seed random.natural
                      expected random.natural
                      dummy (random.only (|>> (n.= expected) not) random.natural)
                      expected_provenance ..random_provenance
                      .let [expected_lux (is Lux
                                             [.#info [.#target target
                                                      .#version version
                                                      .#mode {.#Build}
                                                      .#configuration (list)]
                                              .#source [expected_provenance 0 source_code]
                                              .#provenance expected_provenance
                                              .#current_module {.#Some expected_current_module}
                                              .#modules (list)
                                              .#scopes (stack)
                                              .#type_context [.#ex_counter 0
                                                              .#var_counter 0
                                                              .#var_bindings (list)]
                                              .#expected {.#Some expected_type}
                                              .#seed expected_seed
                                              .#eval (as_expected [])])]]
                     (all _.and
                          (_.for [/.functor]
                                 (functorT.spec ..injection (..comparison expected_lux) /.functor))
                          (_.for [/.monad]
                                 (monadT.spec ..injection (..comparison expected_lux) /.monad))

                          (do random.monad
                            [expected_value random.natural
                             expected_error (random.upper_cased 1)]
                            (_.coverage [/.of_try]
                              (and (|> expected_error
                                       {try.#Failure}
                                       (is (Try Natural))
                                       /.of_try
                                       (/.value expected_lux)
                                       (!expect (^.multi {try.#Failure actual}
                                                         (text.= (provenance.with expected_provenance expected_error)
                                                                 actual))))
                                   (|> expected_value
                                       {try.#Success}
                                       (is (Try Natural))
                                       /.of_try
                                       (/.value expected_lux)
                                       (!expect (^.multi {try.#Success actual}
                                                         (same? expected_value actual)))))))
                          
                          ..compiler_related
                          ..error_handling
                          ..context_related
                          ))
                   
                   /code.test
                   /provenance.test
                   /name.test
                   /configuration.test
                   /version.test
                   /static.test
                   /extension.test
                   /label.test
                   /binding.test
                   /module.test
                   /module/import.test
                   )))))
