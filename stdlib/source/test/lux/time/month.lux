(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     ["." predicate]
     [\\specification
      ["$." equivalence]
      ["$." hash]
      ["$." order]
      ["$." enum]
      ["$." codec]]]
    [control
     ["." try ("#\." functor)]
     ["." exception]]
    [data
     [collection
      ["." set]
      ["." list ("#\." functor fold)]]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /
    [//
     ["." duration]]]])

(def: #export random
  (Random /.Month)
  (let [december (/.number #/.December)]
    (|> random.nat
        (\ random.monad map (|>> (n.% december) inc))
        (random.one (|>> /.by_number try.to_maybe)))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Month])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))
          (_.for [/.hash]
                 ($hash.spec /.hash ..random))
          (_.for [/.order]
                 ($order.spec /.order ..random))
          (_.for [/.enum]
                 ($enum.spec /.enum ..random))
          (_.for [/.codec]
                 ($codec.spec /.equivalence /.codec ..random))

          (do random.monad
            [expected ..random
             invalid (random.filter (predicate.unite (n.< (/.number #/.January))
                                                     (n.> (/.number #/.December)))
                                    random.nat)]
            ($_ _.and
                (_.cover [/.number /.by_number]
                         (|> expected
                             /.number
                             /.by_number
                             (try\map (\ /.equivalence = expected))
                             (try.default false)))
                (_.cover [/.invalid_month]
                         (case (/.by_number invalid)
                           (#try.Failure error)
                           (exception.match? /.invalid_month error)
                           
                           (#try.Success _)
                           false))
                (_.cover [/.year]
                         (let [all (list.size /.year)
                               uniques (set.size (set.from_list /.hash /.year))]
                           (and (n.= (/.number #/.December)
                                     all)
                                (n.= all
                                     uniques))))
                (_.cover [/.days]
                         (let [expected (.nat (duration.query duration.day duration.normal_year))]
                           (|> /.year
                               (list\map /.days)
                               (list\fold n.+ 0)
                               (n.= expected))))
                (_.cover [/.leap_year_days]
                         (let [expected (.nat (duration.query duration.day duration.leap_year))]
                           (|> /.year
                               (list\map /.leap_year_days)
                               (list\fold n.+ 0)
                               (n.= expected))))
                (do random.monad
                  [not_a_month (random.ascii/upper 1)]
                  (_.cover [/.not_a_month_of_the_year]
                           (case (\ /.codec decode not_a_month)
                             (#try.Failure error)
                             (exception.match? /.not_a_month_of_the_year error)
                             
                             (#try.Success _)
                             false)))
                )))))
