(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]
      ["$." order]
      ["$." monoid]
      ["$." codec]]}]
   [data
    [number
     ["n" nat]
     ["i" int]]]
   [math
    ["." random (#+ Random)]]]
  {1
   ["." / (#+ Duration)]})

(def: #export duration
  (Random Duration)
  (\ random.monad map /.from_millis random.int))

(def: #export test
  Test
  (<| (_.context (%.name (name_of /._)))
      ($_ _.and
          ($equivalence.spec /.equivalence ..duration)
          ($order.spec /.order ..duration)
          ($monoid.spec /.equivalence /.monoid ..duration)
          ($codec.spec /.equivalence /.codec ..duration)

          (do random.monad
            [millis random.int]
            (_.test "Can convert from/to milliseconds."
                    (|> millis /.from_millis /.to_millis (i.= millis))))
          (do {! random.monad}
            [sample (|> duration (\ ! map (/.frame /.day)))
             frame duration
             factor (|> random.nat (\ ! map (|>> (n.% 10) (n.max 1))))
             #let [(^open "/\.") /.order]]
            ($_ _.and
                (_.test "Can scale a duration."
                        (|> sample (/.scale_up factor) (/.query sample) (i.= (.int factor))))
                (_.test "Scaling a duration by one does not change it."
                        (|> sample (/.scale_up 1) (/\= sample)))
                (_.test "Merging a duration with it's opposite yields an empty duration."
                        (|> sample (/.merge (/.inverse sample)) (/\= /.empty)))))
          )))
