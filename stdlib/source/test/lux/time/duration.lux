(.module:
  [lux #*
   data/text/format
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #test]
     [/
      ["$." equivalence]
      ["$." order]
      ["$." monoid]
      ["$." codec]]}]
   [data
    ["E" error]]
   [math
    ["r" random (#+ Random)]]]
  {1
   ["." / (#+ Duration)]})

(def: #export duration
  (Random Duration)
  (|> r.int (:: r.monad map /.from-millis)))

(def: #export test
  Test
  (<| (_.context (%name (name-of /._)))
      ($_ _.and
          ($equivalence.spec /.equivalence ..duration)
          ($order.spec /.order ..duration)
          ($monoid.spec /.equivalence /.monoid ..duration)
          ## TODO; Uncomment ASAP
          ## ($codec.spec /.equivalence /.codec ..duration)

          (do r.monad
            [millis r.int]
            (_.test "Can convert from/to milliseconds."
                    (|> millis /.from-millis /.to-millis (i/= millis))))
          (do r.monad
            [sample (|> duration (:: @ map (/.frame /.day)))
             frame duration
             factor (|> r.nat (:: @ map (|>> (n/% 10) (n/max 1))))
             #let [(^open "/@.") /.order]]
            ($_ _.and
                (_.test "Can scale a duration."
                        (|> sample (/.scale-up factor) (/.query sample) (i/= (.int factor))))
                (_.test "Scaling a duration by one does not change it."
                        (|> sample (/.scale-up 1) (/@= sample)))
                (_.test "Merging a duration with it's opposite yields an empty duration."
                        (|> sample (/.merge (/.inverse sample)) (/@= /.empty)))))
          )))
