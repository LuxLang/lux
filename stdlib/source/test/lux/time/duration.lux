... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" enum
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equality
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]]
   [data
    ["[0]" text
     ["?[1]" \\projection]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Duration])
      (all _.and
           (_.for [/.equality
                   /.=]
                  (static.when (identical? /.equality /.=)
                    (equalityT.spec /.equality /.random)))
           (_.for [/.order
                   /.< /.<= /.> /.>=
                   /.minor /.major]
                  (orderT.spec /.order /.random))
           (_.for [/.enum]
                  (enumT.spec /.enum /.random))
           (_.for [/.monoid]
                  (monoidT.spec /.equality /.monoid /.random))
           (_.for [/.text]
                  (formatT.spec /.equality /.text /.random))

           (monad.let random.monad
             [duration /.random]
             (_.coverage [/.of_millis /.millis]
               (|> duration /.millis /.of_millis (by /.equality = duration))))
           (monad.let random.monad
             [expected /.random
              parameter /.random]
             (all _.and
                  (_.coverage [/.+ /.-]
                    (|> expected (/.+ parameter) (/.- parameter) (/.= expected)))
                  (_.coverage [/.empty]
                    (|> expected (/.+ /.empty) (/.= expected)))
                  (_.coverage [/.inverse]
                    (and (|> expected /.inverse /.inverse (/.= expected))
                         (|> expected (/.+ (/.inverse expected)) (/.= /.empty))))
                  (_.coverage [/.positive? /.negative? /.neutral?]
                    (or (bit.= (/.positive? expected)
                               (/.negative? (/.inverse expected)))
                        (bit.= (/.neutral? expected)
                               (/.neutral? (/.inverse expected)))))
                  
                  ))
           (monad.let random.monad
             [factor random.natural]
             (_.coverage [/.up /.down]
               (|> /.milli_second (/.up factor) (/.down factor) (/.= /.milli_second))))
           (monad.let [! random.monad]
             [.let [(open "/:[0]") /.order
                    positive (|> /.random
                                 (random.only (|>> (/.= /.empty) not))
                                 (by ! each (function (_ duration)
                                              (if (/.positive? duration)
                                                  duration
                                                  (/.inverse duration)))))]
              sample positive
              frame positive]
             (`` (all _.and
                      (_.coverage [/.%]
                        (let [sample' (/.% frame sample)]
                          (and (/:< frame sample')
                               (bit.= (/:< frame sample)
                                      (/.= sample sample')))))
                      (_.coverage [/.ticks]
                        (i.= +1 (/.ticks sample sample)))
                      (_.coverage [/.milli_second]
                        (/.= /.empty (by /.enum pred /.milli_second)))
                      (,, (template.with [<factor> <big> <small>]
                            [(_.coverage [<big>]
                               (|> <big> (/.ticks <small>) (i.= <factor>)))]

                            [[+1,000 /.second /.milli_second]
                             [+60 /.minute /.second]
                             [+60 /.hour /.minute]
                             [+24 /.day /.hour]

                             [+7 /.week /.day]
                             [+365 /.normal_year /.day]
                             [+366 /.leap_year /.day]]))
                      )))
           (monad.let random.monad
             [expected /.random]
             (_.coverage [/.as_text /.of_text]
               (|> expected
                   /.as_text
                   (?text.value /.of_text)
                   (try:each (by /.equality = expected))
                   (try.else false))))
           (monad.let random.monad
             [expected /.random
              actual (random.only (|>> (by /.equality = expected) not)
                                  /.random)]
             (_.coverage [/.random]
               (not (by /.equality = expected actual))))
           )))
