... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equality
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]
    ["[0]" exception]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.only)
    ["[1][0]" duration]
    ["[1][0]" instant]
    ["[1][0]" date]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Year])
      (all _.and
           (_.for [/.equality
                   /.=]
                  (static.when (identical? /.equality /.=)
                    (equalityT.spec /.equality /.random)))
           (_.for [/.order
                   /.< /.<= /.> /.>=
                   /.minor /.major]
                  (orderT.spec /.order /.random))
           (_.for [/.text
                   /.as_text /.of_text]
                  (static.when (identical? /.as_text (by /.text as))
                    (formatT.spec /.equality /.text /.random)))
           
           (monad.let random.monad
             [expected /.random]
             (`` (all _.and
                      (_.coverage [/.value /.year]
                        (|> expected
                            /.value
                            /.year
                            (try:each (/.= expected))
                            (try.else false)))
                      (,, (template.with [,start ,path ,exception]
                            [(_.coverage [,start ,exception]
                               (when (/.year (`` (|> ,start (,, (template.spliced ,path)))))
                                 {try.:Failure error}
                                 (exception.is? ,exception error)

                                 else
                                 false))]

                            [[/.invalid [] /.there_is_no_year_0]
                             [/.first [/.value --] /.beyond_limits]
                             [/.last [/.value ++] /.beyond_limits]]))
                      )))
           (_.coverage [/.days]
             (n.= (.natural (//duration.ticks //duration.day //duration.normal_year))
                  /.days))
           (_.coverage [/.epoch]
             (by /.equality =
                 (//date.year (//instant.date //instant.epoch))
                 /.epoch))
           (_.for [/.Period]
                  (_.coverage [/.leap /.century /.era]
                    (n.= /.leap (n./ /.century /.era))))
           (let [leap (try.trusted (/.year (.integer /.leap)))
                 century (try.trusted (/.year (.integer /.century)))
                 era (try.trusted (/.year (.integer /.era)))]
             (all _.and
                  (_.coverage [/.leap?]
                    (and (/.leap? leap)
                         (not (/.leap? century))
                         (/.leap? era)))
                  (_.coverage [/.leaps]
                    (and (i.= +1 (/.leaps leap))
                         (i.= (.integer (n./ /.leap /.century))
                              (/.leaps century))
                         (i.= (++ (i.x +4 (-- (/.leaps century))))
                              (/.leaps era))))
                  ))
           (monad.let random.monad
             [expected /.random
              actual (random.only (|>> (by /.equality = expected) not)
                                  /.random)]
             (_.coverage [/.random]
               (not (by /.equality = expected actual))))
           )))
