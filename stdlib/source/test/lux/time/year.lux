(.using
 [library
  [lux (.full)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" order]
     ["$[0]" codec]]]
   [control
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" bit ("[1]#[0]" equivalence)]
    [text
     ["%" format (.only format)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]
     ["i" int]]]]]
 [\\library
  ["[0]" /
   ["/[1]" //
    ["[1][0]" duration]
    ["[1][0]" instant]
    ["[1][0]" date]]]])

(def: .public random
  (Random /.Year)
  (random.one (|>> /.year try.maybe) random.int))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Year])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))
           (_.for [/.order]
                  ($order.spec /.order ..random))
           (_.for [/.codec /.parser]
                  ($codec.spec /.equivalence /.codec ..random))
           
           (do random.monad
             [expected random.int]
             (all _.and
                  (_.coverage [/.year]
                    (bit#= (i.= +0 expected)
                           (case (/.year expected)
                             {try.#Success _}
                             false

                             {try.#Failure _}
                             true)))
                  (_.coverage [/.value]
                    (case (/.year expected)
                      {try.#Success year}
                      (i.= expected (/.value year))

                      {try.#Failure _}
                      (i.= +0 expected)))
                  ))
           (_.coverage [/.there_is_no_year_0]
             (case (/.year +0)
               {try.#Success _}
               false

               {try.#Failure error}
               (exception.match? /.there_is_no_year_0 error)))
           (_.coverage [/.days]
             (n.= (.nat (//duration.ticks //duration.day //duration.normal_year))
                  /.days))
           (_.coverage [/.epoch]
             (# /.equivalence =
                (//date.year (//instant.date //instant.epoch))
                /.epoch))
           (_.for [/.Period]
                  (_.coverage [/.leap /.century /.era]
                    (n.= /.leap (n./ /.century /.era))))
           (let [leap (try.trusted (/.year (.int /.leap)))
                 century (try.trusted (/.year (.int /.century)))
                 era (try.trusted (/.year (.int /.era)))]
             (all _.and
                  (_.coverage [/.leap?]
                    (and (/.leap? leap)
                         (not (/.leap? century))
                         (/.leap? era)))
                  (_.coverage [/.leaps]
                    (and (i.= +1 (/.leaps leap))
                         (i.= (.int (n./ /.leap /.century))
                              (/.leaps century))
                         (i.= (++ (i.* +4 (-- (/.leaps century))))
                              (/.leaps era))))
                  ))
           )))
