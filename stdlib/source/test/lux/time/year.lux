... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [error
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]
     ["i" integer]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.only)
    ["[1][0]" duration]
    ["[1][0]" instant]
    ["[1][0]" date]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Year])
      (all _.and
           (_.for [/.equivalence
                   /.=]
                  (static.when (same? /.equivalence /.=)
                    (equivalenceT.spec /.equivalence /.random)))
           (_.for [/.order
                   /.< /.<= /.> /.>=
                   /.minor /.major]
                  (orderT.spec /.order /.random))
           (_.for [/.text
                   /.as_text /.of_text]
                  (static.when (same? /.as_text (by /.text as))
                    (formatT.spec /.equivalence /.text /.random)))
           
           (do random.monad
             [expected /.random]
             (`` (all _.and
                      (_.coverage [/.value /.year]
                        (|> expected
                            /.value
                            /.year
                            (try#each (/.= expected))
                            (try.else false)))
                      (,, (template.with [,start ,path ,exception]
                            [(_.coverage [,start ,exception]
                               (when (/.year (`` (|> ,start (,, (template.spliced ,path)))))
                                 {try.#Failure error}
                                 (exception.is? ,exception error)

                                 else
                                 false))]

                            [/.invalid [] /.there_is_no_year_0]
                            [/.first [/.value --] /.beyond_limits]
                            [/.last [/.value ++] /.beyond_limits]
                            ))
                      )))
           (_.coverage [/.days]
             (n.= (.natural (//duration.ticks //duration.day //duration.normal_year))
                  /.days))
           (_.coverage [/.epoch]
             (by /.equivalence =
                 (//date.year (//instant.date //instant.epoch))
                 /.epoch))
           (_.for [/.Period]
                  (_.coverage [/.leap /.century /.era]
                    (n.= /.leap (n./ /.century /.era))))
           (let [leap (try.trusted (/.year (.integer /.leap)))
                 century (try.trusted (/.year (.integer /.century)))
                 era (try.trusted (/.year (.integer /.era)))]
             (all _.and
                  (_.coverage [/.leap?]
                    (and (/.leap? leap)
                         (not (/.leap? century))
                         (/.leap? era)))
                  (_.coverage [/.leaps]
                    (and (i.= +1 (/.leaps leap))
                         (i.= (.integer (n./ /.leap /.century))
                              (/.leaps century))
                         (i.= (++ (i.x +4 (-- (/.leaps century))))
                              (/.leaps era))))
                  ))
           (do random.monad
             [expected /.random
              actual (random.only (|>> (by /.equivalence = expected) not)
                                  /.random)]
             (_.coverage [/.random]
               (not (by /.equivalence = expected actual))))
           )))
