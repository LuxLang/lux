(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    [\spec
     ["$." equivalence]
     ["$." order]
     ["$." enum]
     ["$." codec]]]
   [control
    ["." try]
    ["." exception]]
   [math
    ["." random (#+ Random) ("#\." monad)]]]
  [\\
   ["." /]])

(def: #export random
  (Random /.Day)
  (random.either (random.either (random.either (random\wrap #/.Sunday)
                                               (random\wrap #/.Monday))
                                (random.either (random\wrap #/.Tuesday)
                                               (random\wrap #/.Wednesday)))
                 (random.either (random.either (random\wrap #/.Thursday)
                                               (random\wrap #/.Friday))
                                (random\wrap #/.Saturday))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Day])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))
          (_.for [/.order]
                 ($order.spec /.order ..random))
          (_.for [/.enum]
                 ($enum.spec /.enum ..random))
          (_.for [/.codec]
                 ($codec.spec /.equivalence /.codec ..random))

          (do random.monad
            [not_a_day (random.ascii/upper 1)]
            (_.cover [/.not_a_day_of_the_week]
                     (case (\ /.codec decode not_a_day)
                       (#try.Failure error)
                       (exception.match? /.not_a_day_of_the_week error)
                       
                       (#try.Success _)
                       false)))
          )))
