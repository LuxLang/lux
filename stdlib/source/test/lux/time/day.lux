(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]
      ["$." order]
      ["$." enum]
      ["$." codec]]]
    [control
     ["." try]
     ["." exception]]
    [math
     ["." random (#+ Random) ("#\." monad)]]]]
  [\\library
   ["." /]])

(def: #export random
  (Random /.Day)
  (random.either (random.either (random.either (random\in #/.Sunday)
                                               (random\in #/.Monday))
                                (random.either (random\in #/.Tuesday)
                                               (random\in #/.Wednesday)))
                 (random.either (random.either (random\in #/.Thursday)
                                               (random\in #/.Friday))
                                (random\in #/.Saturday))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Day])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))
          (_.for [/.order]
                 ($order.spec /.order ..random))
          (_.for [/.enum]
                 ($enum.spec /.enum ..random))
          (_.for [/.codec]
                 ($codec.spec /.equivalence /.codec ..random))

          (do random.monad
            [not_a_day (random.ascii/upper 1)]
            (_.cover [/.not_a_day_of_the_week]
                     (case (\ /.codec decode not_a_day)
                       (#try.Failure error)
                       (exception.match? /.not_a_day_of_the_week error)
                       
                       (#try.Success _)
                       false)))
          )))
