... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" enum
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [function
    ["[0]" predicate]]
   [data
    ["[0]" text
     ["?[1]" \\projection]]
    [collection
     ["[0]" list]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" natural]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public random
  (Random /.Day)
  (random.either (random.either (random.either (random#in {/.#Sunday})
                                               (random#in {/.#Monday}))
                                (random.either (random#in {/.#Tuesday})
                                               (random#in {/.#Wednesday})))
                 (random.either (random.either (random#in {/.#Thursday})
                                               (random#in {/.#Friday}))
                                (random#in {/.#Saturday}))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Day])
      (do random.monad
        [expected ..random
         invalid (random.only (predicate.or (n.< (/.number {/.#Sunday}))
                                            (n.> (/.number {/.#Saturday})))
                              random.natural)])
      (`` (all _.and
               (_.for [/.equivalence
                       /.=]
                      (static.when (same? /.equivalence /.=)
                        (equivalenceT.spec /.equivalence ..random)))
               (_.for [/.hash]
                      (hashT.spec /.hash ..random))
               (_.for [/.order
                       /.< /.<= /.> /.>=
                       /.minor /.major]
                      (orderT.spec /.order ..random))
               (_.for [/.enum]
                      (enumT.spec /.enum ..random))
               (_.for [/.format]
                      (formatT.spec /.equivalence /.format ..random))

               (,, (template.with [<before> <current> <after>]
                     [(_.coverage [<current>]
                        (and (by /.equivalence = {<before>} (by /.enum pred {<current>}))
                             (by /.equivalence = {<after>} (by /.enum succ {<current>}))))]

                     [/.#Saturday /.#Sunday /.#Monday]
                     [/.#Sunday /.#Monday /.#Tuesday]
                     [/.#Monday /.#Tuesday /.#Wednesday]
                     [/.#Tuesday /.#Wednesday /.#Thursday]
                     [/.#Wednesday /.#Thursday /.#Friday]
                     [/.#Thursday /.#Friday /.#Saturday]
                     [/.#Friday /.#Saturday /.#Sunday]
                     ))
               (_.coverage [/.number /.by_number]
                 (|> expected
                     /.number
                     /.by_number
                     (try#each (by /.equivalence = expected))
                     (try.else false)))
               (_.coverage [/.invalid_day]
                 (when (/.by_number invalid)
                   {try.#Failure error}
                   (exception.is? /.invalid_day error)
                   
                   {try.#Success _}
                   false))
               (_.coverage [/.week]
                 (let [all (list.size /.week)
                       uniques (set.size (set.of_list /.hash /.week))]
                   (and (n.= (/.number {/.#Saturday})
                             all)
                        (n.= all
                             uniques))))
               (do random.monad
                 [expected /.random]
                 (_.coverage [/.as_text /.projection]
                   (|> expected
                       /.as_text
                       (?text.value /.projection)
                       (try#each (by /.equivalence = expected))
                       (try.else false))))
               (do random.monad
                 [expected /.random
                  actual (random.only (|>> (by /.equivalence = expected) not)
                                      /.random)]
                 (_.coverage [/.random]
                   (not (by /.equivalence = expected actual))))
               ))))
