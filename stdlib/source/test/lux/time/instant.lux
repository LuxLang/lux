(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do Monad)]
    {[0 #spec]
     [/
      ["$." equivalence]
      ["$." order]
      ["$." enum]
      ["$." codec]]}]
   [control
    ["." try]]
   [data
    ["." text]
    [number
     ["i" int]]]
   [math
    ["." random (#+ Random)]]
   [time
    ["@d" duration]
    ["@date" date]]]
  [//
   ["_." duration]]
  {1
   ["." / (#+ Instant)]})

(def: #export instant
  (Random Instant)
  (\ random.monad map /.from_millis random.int))

(def: #export test
  Test
  (<| (_.context (%.name (name_of /._)))
      ($_ _.and
          ($equivalence.spec /.equivalence ..instant)
          ($order.spec /.order ..instant)
          ($enum.spec /.enum ..instant)
          ($codec.spec /.equivalence /.codec ..instant)

          (do random.monad
            [millis random.int]
            (_.test "Can convert from/to milliseconds."
                    (|> millis /.from_millis /.to_millis (i.= millis))))
          (do random.monad
            [sample instant
             span _duration.duration
             #let [(^open "@/.") /.equivalence
                   (^open "@d/.") @d.equivalence]]
            ($_ _.and
                (_.test "The span of a instant and itself has an empty duration."
                        (|> sample (/.span sample) (@d/= @d.empty)))
                (_.test "Can shift a instant by a duration."
                        (|> sample (/.shift span) (/.span sample) (@d/= span)))
                (_.test "Can obtain the time-span between the epoch and an instant."
                        (|> sample /.relative /.absolute (@/= sample)))
                (_.test "All instants are relative to the epoch."
                        (|> /.epoch (/.shift (/.relative sample)) (@/= sample)))))
          )))
