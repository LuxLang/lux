(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" order]
     ["$[0]" enum]
     ["$[0]" codec]]]
   [control
    ["[0]" function]
    ["[0]" try]
    ["[0]" io]]
   [data
    [collection
     ["[0]" list ("[1]#[0]" mix)]]]
   [math
    ["[0]" random]]
   [time
    ["[0]" duration (.only Duration)]
    ["[0]" day (.only Day) ("[1]#[0]" enum)]]]]
 [\\library
  ["[0]" /]])

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Instant])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence random.instant))
           (_.for [/.order]
                  ($order.spec /.order random.instant))
           (_.for [/.enum]
                  ($enum.spec /.enum random.instant))
           (_.for [/.codec]
                  ($codec.spec /.equivalence /.codec random.instant))

           (do random.monad
             [.let [(open "#[0]") /.equivalence]
              expected random.instant]
             (all _.and
                  (_.coverage [/.millis /.of_millis]
                    (|> expected /.millis /.of_millis (#= expected)))
                  (_.coverage [/.relative /.absolute]
                    (|> expected /.relative /.absolute (#= expected)))
                  (_.coverage [/.date /.time /.of_date_time]
                    (#= expected
                        (/.of_date_time (/.date expected)
                                        (/.time expected))))
                  ))
           (do random.monad
             [.let [(open "#[0]") /.equivalence
                    (open "duration#[0]") duration.equivalence]
              from random.instant
              to random.instant]
             (all _.and
                  (_.coverage [/.span]
                    (|> from (/.span from) (duration#= duration.empty)))
                  (_.coverage [/.after]
                    (|> from (/.after (/.span from to)) (#= to)))
                  (_.coverage [/.epoch]
                    (duration#= (/.relative to)
                                (/.span /.epoch to)))
                  ))
           (do random.monad
             [instant random.instant
              .let [d0 (/.day_of_week instant)]]
             (_.coverage [/.day_of_week]
               (let [apply (is (-> (-> Duration Duration) (-> Day Day) Nat Bit)
                               (function (_ polarity move steps)
                                 (let [day_shift (list#mix (function.constant move)
                                                           d0
                                                           (list.repeated steps []))
                                       instant_shift (|> instant
                                                         (/.after (polarity (duration.up steps duration.day)))
                                                         /.day_of_week)]
                                   (day#= day_shift
                                          instant_shift))))]
                 (and (apply function.identity day#succ 0)
                      (apply function.identity day#succ 1)
                      (apply function.identity day#succ 2)
                      (apply function.identity day#succ 3)
                      (apply function.identity day#succ 4)
                      (apply function.identity day#succ 5)
                      (apply function.identity day#succ 6)
                      (apply function.identity day#succ 7)

                      (apply duration.inverse day#pred 0)
                      (apply duration.inverse day#pred 1)
                      (apply duration.inverse day#pred 2)
                      (apply duration.inverse day#pred 3)
                      (apply duration.inverse day#pred 4)
                      (apply duration.inverse day#pred 5)
                      (apply duration.inverse day#pred 6)
                      (apply duration.inverse day#pred 7)))))
           (_.coverage [/.now]
             (case (try (io.run! /.now))
               {try.#Success _}
               true
               
               {try.#Failure _}
               false))
           )))
