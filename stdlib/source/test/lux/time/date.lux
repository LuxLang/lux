... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" enum
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equality
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]
     ["?[1]" \\projection]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [meta
    ["[0]" static]
    ["[0]" code]]
   [macro
    ["[0]" expansion]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" instant]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Date])
      (all _.and
           (_.for [/.equality /.=]
                  (static.when (identical? /.equality /.=) 
                    (equalityT.spec /.equality /.random)))
           (_.for [/.order
                   /.< /.<= /.> /.>=
                   /.minor /.major]
                  (orderT.spec /.order /.random))
           (_.for [/.enum]
                  (enumT.spec /.enum /.random))
           (_.for [/.text]
                  (formatT.spec /.equality /.text /.random))

           (monad.let random.monad
             [expected /.random]
             (_.coverage [/.date /.year /.month /.day_of_month]
               (|> (/.date (/.year expected)
                           (/.month expected)
                           (/.day_of_month expected))
                   (try:each (by /.equality = expected))
                   (try.else false))))
           (monad.let random.monad
             [expected /.random]
             (_.coverage [/.invalid_day]
               (when (/.date (/.year expected)
                             (/.month expected)
                             (n.+ 31 (/.day_of_month expected)))
                 {try.:Failure error}
                 (exception.is? /.invalid_day error)
                 
                 {try.:Success _}
                 false)))
           (monad.let random.monad
             [expected /.random]
             (_.coverage [/.as_days /.of_days]
               (|> expected
                   /.as_days
                   /.of_days
                   (by /.equality = expected))))
           (_.coverage [/.epoch]
             (|> /.epoch
                 /.as_days
                 (i.= +0)))
           (monad.let [! random.monad]
             [year (by ! each (|>> (n.% 10,000) ++)
                       random.natural)
              month (by ! each (|>> (n.% 10) (n.+ 13))
                        random.natural)
              day (by ! each (|>> (n.% 10) (n.+ 10))
                      random.natural)
              .let [input (text (%.natural year)
                                "-" (%.natural month)
                                "-" (%.natural day))]]
             (_.coverage [/.invalid_month]
               (when (?text.value /.of_text input)
                 {try.:Failure error}
                 (exception.is? /.invalid_month error)
                 
                 {try.:Success _}
                 false)))
           (monad.let random.monad
             [expected /.random]
             (_.coverage [/.as_text /.of_text]
               (|> expected
                   /.as_text
                   (?text.value /.of_text)
                   (try:each (by /.equality = expected))
                   (try.else false))))
           (monad.let random.monad
             [expected /.random
              actual (random.only (|>> (by /.equality = expected) not)
                                  /.random)]
             (_.coverage [/.random]
               (not (by /.equality = expected actual))))
           (expansion.let [,expectation (static.random (|>> /.as_text
                                                            code.text)
                                                       /.random)]
             (_.coverage [/.literal]
               (text.= ,expectation
                       (/.as_text (/.literal ,expectation)))))
           )))
