... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]
    ["[0]" io]
    [concurrency
     ["[0]" atom]]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]
    [format
     [json (.only JSON)]
     [xml (.only XML)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [ratio (.only Ratio)]]]
   [meta
    ["[0]" type]
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    [macro
     [syntax (.only syntax)]
     ["[0]" expansion]]
    [compiler
     ["@" target]]]
   [world
    [time (.only Time)
     [instant (.only Instant)]
     [date (.only Date)]
     [duration (.only Duration)]
     [month (.only Month)]
     [day (.only Day)]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["$[0]" //
  [data
   [format
    ["[1][0]" json]
    ["[1][0]" xml]]]
  [math
   [number
    ["[1][0]" ratio]]]
  [meta
   ["[1][0]" code]
   ["[1][0]" location]
   ["[1][0]" symbol]
   ["[1][0]" type]]])

(def can_represent_simple_types
  (Random Bit)
  (do random.monad
    [sample_bit random.bit
     sample_int random.int
     sample_frac random.frac
     sample_text (random.upper_cased 10)
     sample_nat random.nat
     sample_rev random.rev]
    (in (`` (and (,, (with_template [<type> <format> <sample>]
                       [(|> (/.representation <type> <sample>)
                            (try#each (text#= (<format> <sample>)))
                            (try.else false))]

                       [Bit %.bit sample_bit]
                       [Nat %.nat sample_nat]
                       [Int %.int sample_int]
                       [Rev %.rev sample_rev]
                       [Frac %.frac sample_frac]
                       [Text %.text sample_text]))
                 )))))

(def can_represent_structure_types
  (Random Bit)
  (do random.monad
    [sample_bit random.bit
     sample_int random.int
     sample_frac random.frac]
    (in (`` (and (when (/.representation (type.literal [Bit Int Frac])
                                         [sample_bit sample_int sample_frac])
                   {try.#Success actual}
                   (text#= (format "[" (%.bit sample_bit)
                                   " " (%.int sample_int)
                                   " " (%.frac sample_frac)
                                   "]")
                           actual)

                   {try.#Failure error}
                   false)
                 ... TODO: Uncomment after switching from the old (tag+last?) to the new (lefts+right?) representation for variants 
                 ... (,, (with_template [<lefts> <right?> <value> <format>]
                 ...       [(|> (/.representation (type.literal (Or Bit Int Frac))
                 ...                         (is (Or Bit Int Frac)
                 ...                            (<lefts> <right?> <value>)))
                 ...            (try#each (text#= (format "(" (%.nat <lefts>)
                 ...                                     " " (%.bit <right?>)
                 ...                                     " " (<format> <value>) ")")))
                 ...            (try.else false))]

                 ...       [0 #0 sample_bit %.bit]
                 ...       [1 #0 sample_int %.int]
                 ...       [1 #1 sample_frac %.frac]
                 ...       ))
                 )))))

(def can_represent_complex_types
  (Random Bit)
  (do random.monad
    [sample_ratio $//ratio.random
     sample_symbol ($//symbol.random 5 5)
     sample_location $//location.random
     sample_type ($//type.random 0)
     sample_code $//code.random
     sample_xml $//xml.random
     sample_json $//json.random]
    (in (`` (and (,, (with_template [<type> <format> <sample>]
                       [(|> (/.representation <type> <sample>)
                            (try#each (text#= (<format> <sample>)))
                            (try.else false))]

                       [Ratio %.ratio sample_ratio]
                       [Symbol %.symbol sample_symbol]
                       [Location %.location sample_location]
                       [Code %.code sample_code]
                       [Type %.type sample_type]
                       [XML %.xml sample_xml]
                       [JSON %.json sample_json]))
                 )))))

(def can_represent_time_types
  (Random Bit)
  (do random.monad
    [sample_instant random.instant
     sample_duration random.duration
     sample_date random.date
     sample_month random.month
     sample_time random.time
     sample_day random.day]
    (in (`` (and (,, (with_template [<type> <format> <sample>]
                       [(|> (/.representation <type> <sample>)
                            (try#each (text#= (<format> <sample>)))
                            (try.else false))]

                       [Instant %.instant sample_instant]
                       [Duration %.duration sample_duration]
                       [Date %.date sample_date]
                       [Month %.month sample_month]
                       [Time %.time sample_time]
                       [Day %.day sample_day]))
                 )))))

(def representation
  Test
  (do random.monad
    [sample_bit random.bit
     sample_nat random.nat
     sample_int random.int
     sample_frac random.frac

     can_represent_simple_types! ..can_represent_simple_types
     can_represent_structure_types! ..can_represent_structure_types
     can_represent_complex_types! ..can_represent_complex_types
     can_represent_time_types! ..can_represent_time_types]
    (all _.and
         (_.coverage [/.representation]
           (`` (and can_represent_simple_types!
                    can_represent_structure_types!
                    can_represent_complex_types!
                    can_represent_time_types!
                    
                    (|> (/.representation .Any sample_frac)
                        (try#each (text#= "[]"))
                        (try.else false))
                    (|> (/.representation (type.literal (List Nat)) (is (List Nat) (list sample_nat)))
                        (try#each (text#= (%.list %.nat (list sample_nat))))
                        (try.else false))
                    (,, (with_template [<sample>]
                          [(|> (/.representation (type.literal (Maybe Nat)) (is (Maybe Nat) <sample>))
                               (try#each (text#= (%.maybe %.nat <sample>)))
                               (try.else false))]
                          
                          [{.#Some sample_nat}]
                          [{.#None}]
                          ))
                    )))
         (_.coverage [/.cannot_represent_value]
           (when (/.representation (-> Nat Nat) (|>>))
             {try.#Success representation}
             false

             {try.#Failure error}
             (exception.match? /.cannot_represent_value error)))
         )))

(def inspection
  Test
  (do random.monad
    [sample_bit random.bit
     sample_int random.int
     sample_frac random.frac
     sample_text (random.upper_cased 10)]
    (_.coverage [/.inspection]
      (`` (and (,, (with_template [<format> <sample>]
                     [(text#= (<format> <sample>) (/.inspection <sample>))]

                     [%.bit sample_bit]
                     [%.int sample_int]
                     [%.frac sample_frac]
                     [%.text sample_text]
                     ))
               (text#= (|> (list sample_bit sample_int sample_frac sample_text)
                           (is (List Any))
                           (list#each /.inspection)
                           (text.interposed " ")
                           (text.enclosed ["[" "]"]))
                       (/.inspection [sample_bit sample_int sample_frac sample_text]))
               )))))

(def macro_error
  (syntax (_ [macro <code>.any])
    (function (_ compiler)
      (when ((expansion.complete macro) compiler)
        {try.#Failure error}
        {try.#Success [compiler (list (code.text error))]}
        
        {try.#Success _}
        {try.#Failure "OOPS!"}))))

(type My_Text
  Text)

(for @.jvm (these (ffi.import java/lang/String
                    "[1]::[0]")

                  (ffi.import java/io/ByteArrayOutputStream
                    "[1]::[0]"
                    (new [])
                    (toString [] java/lang/String))

                  (ffi.import java/io/OutputStream
                    "[1]::[0]")

                  (ffi.import java/io/PrintStream
                    "[1]::[0]"
                    (new [java/io/OutputStream]))

                  (ffi.import java/lang/System
                    "[1]::[0]"
                    ("static" out java/io/PrintStream)
                    ("static" setOut [java/io/PrintStream] void))

                  (def system_output
                    java/io/PrintStream
                    (io.run! (java/lang/System::out))))
     @.js (these (ffi.import console
                   "[1]::[0]"
                   ("static" log (-> Text Any))))
     @.python (these (ffi.import io/StringIO
                       "[1]::[0]"
                       (new [])
                       (getvalue [] Text))

                     (ffi.import sys
                       "[1]::[0]"
                       ("static" stdout io/StringIO)))
     ... else
     (these))

(def with_out
  (template (_ <body>)
    [(for @.jvm (ffi.synchronized ..system_output
                  (let [buffer (java/io/ByteArrayOutputStream::new)
                        _ (java/lang/System::setOut (java/io/PrintStream::new buffer))
                        output <body>
                        _ (java/lang/System::setOut ..system_output)]
                    [(ffi.of_string (java/io/ByteArrayOutputStream::toString buffer))
                     output]))
          @.js (let [old (io.run! (console::log))
                     buffer (atom.atom "")
                     _ (io.run! (console::log (function (_ it)
                                                (io.run! (atom.write! (format it text.\n) buffer)))))
                     output <body>
                     _ (io.run! (console::log old))]
                 [(io.run! (atom.read! buffer))
                  output])
          @.python (let [old (io.run! (sys::stdout))
                         buffer (io/StringIO::new [])
                         _ (io.run! (sys::stdout buffer))
                         output <body>
                         _ (io.run! (sys::stdout old))]
                     [(io/StringIO::getvalue buffer)
                      output])
          @.lua [""
                 <body>]
          @.ruby [""
                  <body>])]))

(def .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [expected_message (random.lower_cased 5)]
        (all _.and
             ..inspection
             ..representation
             (_.coverage [/.hole /.type_hole]
               (let [error (is My_Text (..macro_error (/.hole)))]
                 (and (exception.match? /.type_hole error)
                      (text.contains? (%.type My_Text) error))))
             (do random.monad
               [foo (random.upper_cased 10)
                bar random.nat
                baz random.bit]
               (_.coverage [/.here]
                 (with_expansions [<no_parameters> (for @.js (,, (these))
                                                        (,, (these (/.here))))]
                   (`` (exec
                         <no_parameters>
                         (/.here foo
                                 [bar %.nat])
                         true)))))
             (_.coverage [/.unknown_local_binding]
               (exception.match? /.unknown_local_binding
                                 (..macro_error (/.here yolo))))
             (_.coverage [/.private]
               (exec
                 (is (/.private /.Inspector)
                     /.inspection)
                 true))
             (_.coverage [/.log!]
               (let [[actual_message _] (with_out
                                          (/.log! expected_message))]
                 (text#= (format expected_message text.\n)
                         actual_message)))
             ))))
