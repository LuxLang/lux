... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]
    ["[0]" io]
    [concurrency
     ["[0]" atom]]]
   [data
    ["[0]" bit]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" frac (.only Frac)]]]
   [meta
    ["[0]" location]
    ["[0]" symbol]
    ["[0]" type]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro
     ["[0]" syntax]
     ["[0]" expansion]
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["$[0]" //
  [math
   [number
    ["[1][0]" frac]]]
  [meta
   ["[1][0]" code]
   ["[1][0]" location]
   ["[1][0]" symbol]
   ["[1][0]" type]]])

(the can_represent_simple_types
  (Random Bit)
  (do random.monad
    [sample_bit random.bit
     sample_int random.int
     sample_decimal random.decimal
     sample_text (random.upper_cased 10)
     sample_natural random.natural
     sample_rev random.rev]
    (in (`` (and (,, (template.with [<type> <injection> <sample>]
                       [(|> (/.representation <type> <sample>)
                            (try#each (text.= (<injection> <sample>)))
                            (try.else false))]

                       [Bit bit.as_text sample_bit]
                       [Natural %.natural sample_natural]
                       [Int %.int sample_int]
                       [Rev %.rev sample_rev]
                       [Decimal %.decimal sample_decimal]
                       [Text %.text sample_text]))
                 )))))

(the can_represent_structure_types
  (Random Bit)
  (do random.monad
    [sample_bit random.bit
     sample_int random.int
     sample_decimal random.decimal]
    (in (`` (and (when (/.representation (type [Bit Int Decimal])
                                         [sample_bit sample_int sample_decimal])
                   {try.#Success actual}
                   (text.= (%.message "[" (bit.as_text sample_bit)
                                      " " (%.int sample_int)
                                      " " (%.decimal sample_decimal)
                                      "]")
                           actual)

                   {try.#Failure error}
                   false)
                 ... TODO: Uncomment after switching from the old (tag+last?) to the new (lefts+right?) representation for variants 
                 ... (,, (template.with [<lefts> <right?> <value> <injection>]
                 ...       [(|> (/.representation (type (Or Bit Int Decimal))
                 ...                         (is (Or Bit Int Decimal)
                 ...                            (<lefts> <right?> <value>)))
                 ...            (try#each (text.= (%.message "(" (%.natural <lefts>)
                 ...                                     " " (bit.as_text <right?>)
                 ...                                     " " (<injection> <value>) ")")))
                 ...            (try.else false))]

                 ...       [0 #0 sample_bit bit.as_text]
                 ...       [1 #0 sample_int %.int]
                 ...       [1 #1 sample_decimal %.decimal]
                 ...       ))
                 )))))

(the can_represent_complex_types
  (Random Bit)
  (do random.monad
    [sample_frac $//frac.random
     sample_symbol ($//symbol.random 5 5)
     sample_location $//location.random
     sample_type ($//type.random 0)
     sample_code $//code.random]
    (in (`` (and (,, (template.with [<type> <injection> <sample>]
                       [(|> (/.representation <type> <sample>)
                            (try#each (text.= (<injection> <sample>)))
                            (try.else false))]

                       [Frac frac.as_text sample_frac]
                       [Symbol symbol.as_text sample_symbol]
                       [Location location.as_text sample_location]
                       [Code code.as_text sample_code]
                       [Type type.as_text sample_type]))
                 )))))

(the representation
  Test
  (do random.monad
    [sample_bit random.bit
     sample_natural random.natural
     sample_int random.int
     sample_decimal random.decimal

     can_represent_simple_types! ..can_represent_simple_types
     can_represent_structure_types! ..can_represent_structure_types
     can_represent_complex_types! ..can_represent_complex_types]
    (all _.and
         (_.coverage [/.representation]
           (`` (and can_represent_simple_types!
                    can_represent_structure_types!
                    can_represent_complex_types!
                    
                    (|> (/.representation .Any sample_decimal)
                        (try#each (text.= "[]"))
                        (try.else false))
                    (|> (/.representation (type (List Natural)) (is (List Natural) (list sample_natural)))
                        (try#each (text.= (%.list %.natural (list sample_natural))))
                        (try.else false))
                    (,, (template.with [<sample>]
                          [(|> (/.representation (type (Maybe Natural)) (is (Maybe Natural) <sample>))
                               (try#each (text.= (%.maybe %.natural <sample>)))
                               (try.else false))]
                          
                          [{.#Some sample_natural}]
                          [{.#None}]
                          ))
                    )))
         (_.coverage [/.cannot_represent_value]
           (when (/.representation (-> Natural Natural) (|>>))
             {try.#Success representation}
             false

             {try.#Failure error}
             (exception.is? /.cannot_represent_value error)))
         )))

(the inspection
  Test
  (do random.monad
    [sample_bit random.bit
     sample_int random.int
     sample_decimal random.decimal
     sample_text (random.upper_cased 10)]
    (_.coverage [/.inspection]
      (`` (and (,, (template.with [<injection> <sample>]
                     [(text.= (<injection> <sample>) (/.inspection <sample>))]

                     [bit.as_text sample_bit]
                     [%.int sample_int]
                     [%.decimal sample_decimal]
                     [%.text sample_text]
                     ))
               (text.= (|> (list sample_bit sample_int sample_decimal sample_text)
                           (is (List Any))
                           (list#each /.inspection)
                           (text.interposed " ")
                           (text.enclosed ["[" "]"]))
                       (/.inspection [sample_bit sample_int sample_decimal sample_text]))
               )))))

(the macro_error
  (syntax.macro (_ [macro <code>.any])
    (function (_ compiler)
      (when ((expansion.complete macro) compiler)
        {try.#Failure error}
        {try.#Success [compiler (list (code.text error))]}
        
        {try.#Success _}
        {try.#Failure "OOPS!"}))))

(every My_Text
  Text)

(for .jvm (these (ffi.import java/lang/String
                   "[1]::[0]")

                 (ffi.import java/io/ByteArrayOutputStream
                   "[1]::[0]"
                   (new [])
                   (toString [] java/lang/String))

                 (ffi.import java/io/OutputStream
                   "[1]::[0]")

                 (ffi.import java/io/PrintStream
                   "[1]::[0]"
                   (new [java/io/OutputStream]))

                 (ffi.import java/lang/System
                   "[1]::[0]"
                   ("static" out java/io/PrintStream)
                   ("static" setOut [java/io/PrintStream] void))

                 (the system_output
                   java/io/PrintStream
                   (io.value (java/lang/System::out))))
     .js (these (ffi.import console
                  "[1]::[0]"
                  ("static" log (-> Text Any))))
     .python (these (ffi.import io/StringIO
                      "[1]::[0]"
                      (new [])
                      (getvalue [] Text))

                    (ffi.import sys
                      "[1]::[0]"
                      ("static" stdout io/StringIO)))
     ... else
     (these))

(the with_out
  (template.macro (_ ,body)
    [(for .jvm (ffi.synchronized ..system_output
                 (let [buffer (java/io/ByteArrayOutputStream::new [])
                       _ (java/lang/System::setOut [(java/io/PrintStream::new [buffer])])
                       output ,body
                       _ (java/lang/System::setOut [..system_output])]
                   [(ffi.of_string (java/io/ByteArrayOutputStream::toString [] buffer))
                    output]))
          .js (let [old (io.value (console::log))
                    buffer (atom.atom "")
                    _ (io.value (console::log (function (_ it)
                                                (io.value (atom.write! (%.message it text.\n) buffer)))))
                    output ,body
                    _ (io.value (console::log old))]
                [(io.value (atom.read! buffer))
                 output])
          .python (let [old (io.value (sys::stdout))
                        buffer (io/StringIO::new [])
                        _ (io.value (sys::stdout buffer))
                        output ,body
                        _ (io.value (sys::stdout old))]
                    [(io/StringIO::getvalue [] buffer)
                     output])
          .lua [""
                ,body]
          .ruby [""
                 ,body])]))

(the .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [expected_message (random.lower_cased 5)]
        (all _.and
             ..inspection
             ..representation
             (_.coverage [/.hole /.type_hole]
               (let [error (is My_Text (..macro_error (/.hole)))]
                 (and (exception.is? /.type_hole error)
                      (text.contains? (type.as_text My_Text) error))))
             (do random.monad
               [foo (random.upper_cased 10)
                bar random.natural
                baz random.bit]
               (_.coverage [/.here]
                 (expansion.let [<no_parameters> (for .js (,, (these))
                                                      (,, (these (/.here))))]
                   (`` (exec
                         <no_parameters>
                         (/.here foo
                                 [bar %.natural])
                         true)))))
             (_.coverage [/.unknown_local_binding]
               (exception.is? /.unknown_local_binding
                              (..macro_error (/.here yolo))))
             (_.coverage [/.private]
               (exec
                 (is (/.private /.Inspector)
                     /.inspection)
                 true))
             (_.coverage [/.log!]
               (let [[actual_message _] (with_out
                                          (/.log! expected_message))]
                 (text.= (%.message expected_message text.\n)
                         actual_message)))
             ))))
