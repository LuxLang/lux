(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      [functor
       ["$." contravariant]]]]
    [data
     ["." bit ("#\." equivalence)]]
    [math
     ["." random]
     [number
      ["." nat]]]]]
  [\\library
   ["." / (#+ Hash)
    [//
     [equivalence (#+ Equivalence)]]]])

(def: #export test
  Test
  (do random.monad
    [leftN random.nat
     rightN random.nat
     .let [hash (: (Equivalence (/.Hash Nat))
                   (implementation
                    (def: (= (^open "left\.") (^open "right\."))
                      (and (bit\= (left\= (left\hash leftN) (left\hash leftN))
                                  (right\= (right\hash leftN) (right\hash leftN)))
                           (bit\= (left\= (left\hash rightN) (left\hash rightN))
                                  (right\= (right\hash rightN) (right\hash rightN)))
                           (bit\= (left\= (left\hash leftN) (left\hash rightN))
                                  (right\= (right\hash leftN) (right\hash rightN)))))))]]
    (<| (_.covering /._)
        ($_ _.and
            (_.for [/.functor]
                   ($contravariant.spec hash nat.hash /.functor))
            ))))
