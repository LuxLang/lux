... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]
    [functor
     ["[0]" contravariant
      ["[1]T" \\test]]]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only Hash)
   [//
    [equivalence (.only Equivalence)]]]])

(def .public (spec (open "/#[0]") random)
  (All (_ of)
    (-> (/.Hash of) (Random of)
        Test))
  (do random.monad
    [parameter random
     subject random]
    (all _.and
         (_.for [/.equivalence]
                (equivalenceT.spec /#equivalence random))
         (_.coverage [/.Hash /.hash]
           (if (/#= parameter subject)
             (nat.= (/#hash parameter) (/#hash subject))
             true))
         )))

(def .public test
  Test
  (do random.monad
    [leftN random.nat
     rightN random.nat
     .let [hash (is (Equivalence (/.Hash Nat))
                    (implementation
                     (def (= (open "left#[0]") (open "right#[0]"))
                       (and (bit#= (left#= (left#hash leftN) (left#hash leftN))
                                   (right#= (right#hash leftN) (right#hash leftN)))
                            (bit#= (left#= (left#hash rightN) (left#hash rightN))
                                   (right#= (right#hash rightN) (right#hash rightN)))
                            (bit#= (left#= (left#hash leftN) (left#hash rightN))
                                   (right#= (right#hash leftN) (right#hash rightN)))))))]]
    (<| (_.covering /._)
        (all _.and
             (_.for [/.functor]
                    (contravariantT.spec hash nat.hash /.functor))
             ))))
