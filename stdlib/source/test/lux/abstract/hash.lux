(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [data
    ["." bit ("#@." equivalence)]
    [number
     ["n" nat]
     ["i" int]]]
   [math
    ["." random]]]
  {1
   ["." /]})

(def: #export test
  Test
  (do random.monad
    [left random.nat
     right random.int
     other-left random.nat
     other-right random.int]
    (<| (_.covering /._)
        ($_ _.and
            (_.cover [/.product]
                     (and (n.= (:: (/.product n.hash i.hash) hash [left right])
                               (n.* (:: n.hash hash left)
                                    (:: i.hash hash right)))
                          (bit@= (:: (/.product n.hash i.hash) = [left right] [left right])
                                 (and (:: n.hash = left left)
                                      (:: i.hash = right right)))
                          (bit@= (:: (/.product n.hash i.hash) = [left right] [other-left other-right])
                                 (and (:: n.hash = left other-left)
                                      (:: i.hash = right other-right)))))
            ))))
