(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(type (Effect input output value)
  (-> input [output value]))

(def monad
  (/.Monad Effect)
  (implementation
   (def (in it)
     (function (_ input)
       [input it]))

   (def (then $ @)
     (function (_ pre)
       (let [[interim input] (@ pre)]
         (($ input) interim))))))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Monad])
      (do random.monad
        [left random.nat
         right random.nat
         .let [expected (n.+ left right)]])
      (all _.and
           (_.coverage [/.do]
             (let [it (is (Effect [] [] Nat)
                          (/.do ..monad
                            [left' (in left)
                             right' (in right)]
                            (in (n.+ left right))))
                   [_ actual] (it [])]
               (n.= expected actual)))
           )))
