(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    [abstract
     [functor {"+" [Functor]}]
     [apply {"+" [Apply]}]
     [monad {"+" [Monad do]}]
     [\\specification
      ["$[0]" functor {"+" [Injection Comparison]}]
      ["$[0]" apply]
      ["$[0]" monad]]]
    [data
     [collection
      ["[0]" list ("[1]\[0]" functor)]]]
    [math
     ["[0]" random]]]]
  [\\library
   ["[0]" /]])

(def: injection
  (Injection (/.Free List))
  (|>> {/.#Pure}))

(def: (interpret free)
  (All (_ a) (-> (/.Free List a) (List a)))
  (case free
    {/.#Pure value}
    (list value)
    
    {/.#Effect effect}
    (|> effect
        (list\each interpret)
        list.together)))

(def: comparison
  (Comparison (/.Free List))
  (function (_ == left right)
    (\ (list.equivalence ==) =
       (..interpret left)
       (..interpret right))))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Free])
      ($_ _.and
          (_.for [/.functor]
                 ($functor.spec ..injection ..comparison (: (Functor (/.Free List))
                                                            (/.functor list.functor))))
          (_.for [/.apply]
                 ($apply.spec ..injection ..comparison (: (Apply (/.Free List))
                                                          (/.apply list.functor))))
          (_.for [/.monad]
                 ($monad.spec ..injection ..comparison (: (Monad (/.Free List))
                                                          (/.monad list.functor))))
          )))
