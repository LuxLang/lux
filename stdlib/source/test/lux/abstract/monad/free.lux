(.require
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    ["[0]" monad (.only Monad do)]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    ["[0]" apply
     ["[1]T" \\test]]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    ["[0]" random]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def injection
  (Injection (/.Free List))
  (|>> {/.#Pure}))

(def (interpret free)
  (All (_ of)
    (-> (/.Free List of)
        (List of)))
  (when free
    {/.#Pure value}
    (list value)
    
    {/.#Impure effect}
    (|> effect
        (list#each interpret)
        list.together)))

(def comparison
  (Comparison (/.Free List))
  (function (_ == left right)
    (of (list.equivalence ==) =
        (..interpret left)
        (..interpret right))))

(def .public (test spec)
  (-> (All (_ !)
        (-> (Injection !) (Comparison !) (Monad !)
            Test))
      Test)
  (<| (_.covering /._)
      (_.for [/.Free
              /.#Pure /.#Impure])
      (all _.and
           (_.for [/.functor]
                  (functorT.spec ..injection ..comparison (is (Functor (/.Free List))
                                                              (/.functor list.functor))))
           (_.for [/.apply]
                  (applyT.spec ..injection ..comparison (is (Apply (/.Free List))
                                                            (/.apply list.functor))))
           (_.for [/.monad]
                  (spec ..injection ..comparison (is (/.Monad (/.Free List))
                                                     (/.monad list.functor))))
           )))
