(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [functor (#+ Functor)]
    [apply (#+ Apply)]
    [monad (#+ Monad do)]
    {[0 #test]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]}]
   [data
    [collection
     ["." list ("#@." functor)]]]
   [math
    ["." random]]]
  {1
   ["." /]})

(def: injection
  (Injection (/.Free List))
  (|>> #/.Pure))

(def: (interpret free)
  (All [a] (-> (/.Free List a) (List a)))
  (case free
    (#/.Pure value)
    (list value)
    
    (#/.Effect effect)
    (|> effect
        (list@map interpret)
        list.concat)))

(def: comparison
  (Comparison (/.Free List))
  (function (_ == left right)
    (:: (list.equivalence ==) =
        (..interpret left)
        (..interpret right))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.with-cover [/.Free])
      ($_ _.and
          (_.with-cover [/.functor]
            ($functor.spec ..injection ..comparison (: (Functor (/.Free List))
                                                       (/.functor list.functor))))
          (_.with-cover [/.apply]
            ($apply.spec ..injection ..comparison (: (Apply (/.Free List))
                                                     (/.apply list.functor))))
          (_.with-cover [/.monad]
            ($monad.spec ..injection ..comparison (: (Monad (/.Free List))
                                                     (/.monad list.functor))))
          )))
