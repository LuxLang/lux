(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [functor (#+ Functor)]
     [apply (#+ Apply)]
     [monad (#+ Monad do)]
     [\\specification
      ["$." functor (#+ Injection Comparison)]
      ["$." apply]
      ["$." monad]]]
    [data
     [collection
      ["." list ("#\." functor)]]]
    [math
     ["." random]]]]
  [\\library
   ["." /]])

(def: injection
  (Injection (/.Free List))
  (|>> #/.Pure))

(def: (interpret free)
  (All [a] (-> (/.Free List a) (List a)))
  (case free
    (#/.Pure value)
    (list value)
    
    (#/.Effect effect)
    (|> effect
        (list\map interpret)
        list.together)))

(def: comparison
  (Comparison (/.Free List))
  (function (_ == left right)
    (\ (list.equivalence ==) =
       (..interpret left)
       (..interpret right))))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Free])
      ($_ _.and
          (_.for [/.functor]
                 ($functor.spec ..injection ..comparison (: (Functor (/.Free List))
                                                            (/.functor list.functor))))
          (_.for [/.apply]
                 ($apply.spec ..injection ..comparison (: (Apply (/.Free List))
                                                          (/.apply list.functor))))
          (_.for [/.monad]
                 ($monad.spec ..injection ..comparison (: (Monad (/.Free List))
                                                          (/.monad list.functor))))
          )))
