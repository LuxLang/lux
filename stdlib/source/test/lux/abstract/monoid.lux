(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" nat]
     ["[0]" int]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    [equivalence (.only Equivalence)]]]])

(def .public test
  Test
  (do random.monad
    [natL random.nat
     natR random.nat
     intL random.int
     intR random.int]
    (<| (_.covering /._)
        (all _.and
             (_.coverage [/.and]
               (let [[natLR intLR] (of (/.and nat.addition int.multiplication) composite
                                       [natL intL] [natR intR])]
                 (and (nat.= (of nat.addition composite natL natR)
                             natLR)
                      (int.= (of int.multiplication composite intL intR)
                             intLR))))
             ))))

(def .public (spec (open "/#[0]") (open "/#[0]") gen_sample)
  (All (_ of)
    (-> (Equivalence of) (/.Monoid of) (Random of)
        Test))
  (do random.monad
    [sample gen_sample
     left gen_sample
     mid gen_sample
     right gen_sample]
    (<| (_.for [/.Monoid])
        (all _.and
             (_.coverage [/.identity]
               (let [left_identity!
                     (/#= sample
                          (/#composite /#identity sample))
                     
                     right_identity!
                     (/#= sample
                          (/#composite sample /#identity))]
                 (and left_identity!
                      right_identity!)))
             (_.coverage [/.composite]
               (let [associativity!
                     (/#= (/#composite left (/#composite mid right))
                          (/#composite (/#composite left mid) right))]
                 (and associativity!)))
             ))))
