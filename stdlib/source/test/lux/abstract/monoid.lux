(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" nat]
     ["[0]" int]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    [equivalence (.only Equivalence)]]]])

(def .public test
  Test
  (do random.monad
    [natL random.nat
     natR random.nat
     intL random.int
     intR random.int]
    (<| (_.covering /._)
        (all _.and
             (_.coverage [/.and]
               (let [[natLR intLR] (at (/.and nat.addition int.multiplication) composite
                                       [natL intL] [natR intR])]
                 (and (nat.= (at nat.addition composite natL natR)
                             natLR)
                      (int.= (at int.multiplication composite intL intR)
                             intLR))))
             ))))
