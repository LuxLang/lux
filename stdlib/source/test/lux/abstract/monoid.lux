(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [math
     ["." random (#+ Random)]
     [number
      ["." nat]
      ["." int]]]]]
  [\\library
   ["." /
    [//
     [equivalence (#+ Equivalence)]]]])

(def: .public test
  Test
  (do random.monad
    [natL random.nat
     natR random.nat
     intL random.int
     intR random.int]
    (<| (_.covering /._)
        ($_ _.and
            (_.cover [/.compose]
                     (let [[natLR intLR] (\ (/.compose nat.addition int.multiplication) compose
                                            [natL intL] [natR intR])]
                       (and (nat.= (\ nat.addition compose natL natR)
                                   natLR)
                            (int.= (\ int.multiplication compose intL intR)
                                   intLR))))
            ))))
