... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" order]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["[0]" pipe]]
   [data
    [collection
     ["[0]" set]
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [meta
    ["[0]" static]
    [macro
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only Interval)]]
 [//
  ["[0]T" enum]])

(the .public (spec (open "/#[0]") random)
  (for_any (_ of)
    (-> (/.Interval of) (Random of)
        Test))
  (<| (_.for [/.Interval])
      (do random.monad
        [sample random
         .let [no_value_is_lesser_than_the_minimum!
               (order.> /#order /#minimum sample)

               no_value_is_greater_than_the_maximum!
               (/#< /#maximum sample)]]
        (all _.and
             (_.for [/.enum]
                    (enumT.spec /#enum random))

             (_.coverage [/.minimum /.maximum]
               (and no_value_is_lesser_than_the_minimum!
                    no_value_is_greater_than_the_maximum!))
             ))))


(template.with [<name> <cmp>]
  [(the .public <name>
     (Random (Interval Natural))
     (do random.monad
       [minimum random.natural
        maximum (random.only (|>> (n.= minimum) not)
                             random.natural)]
       (if (<cmp> maximum minimum)
         (in (/.between n.enum minimum maximum))
         (in (/.between n.enum maximum minimum)))))]

  [inner n.<]
  [outer n.>]
  )

(the .public singleton
  (Random (Interval Natural))
  (do random.monad
    [point random.natural]
    (in (/.singleton n.enum point))))

(the .public interval
  (Random (Interval Natural))
  (all random.either
       ..inner
       ..outer
       ..singleton))

(the types
  Test
  (do random.monad
    [inner ..inner
     outer ..outer
     singleton ..singleton]
    (all _.and
         (_.coverage [/.inner?]
           (/.inner? inner))
         (_.coverage [/.outer?]
           (/.outer? outer))
         (_.coverage [/.singleton /.singleton?]
           (/.singleton? singleton))
         )))

(the boundaries
  Test
  (do random.monad
    [minimum random.natural
     maximum random.natural
     .let [interval (/.between n.enum minimum maximum)]]
    (all _.and
         (_.coverage [/.between /.within?]
           (and (/.within? interval minimum)
                (/.within? interval maximum)))
         (_.coverage [/.starts_with?]
           (/.starts_with? minimum interval))
         (_.coverage [/.ends_with?]
           (/.ends_with? maximum interval))
         (_.coverage [/.borders?]
           (and (/.borders? interval minimum)
                (/.borders? interval maximum)))
         )))

(the union
  Test
  (do random.monad
    [some_interval ..interval
     left_inner ..inner
     right_inner ..inner
     left_singleton ..singleton
     right_singleton ..singleton
     left_outer ..outer
     right_outer ..outer]
    (all _.and
         (_.test "The union of an interval to itself yields the same interval."
           (/.= some_interval (/.union some_interval some_interval)))
         (_.test "The union of 2 inner intervals is another inner interval."
           (/.inner? (/.union left_inner right_inner)))
         (_.test "The union of 2 outer intervals yields an inner interval when their complements don't overlap, and an outer when they do."
           (if (/.overlaps? (/.complement left_outer) (/.complement right_outer))
             (/.outer? (/.union left_outer right_outer))
             (/.inner? (/.union left_outer right_outer))))
         )))

(the intersection
  Test
  (do random.monad
    [some_interval ..interval
     left_inner ..inner
     right_inner ..inner
     left_singleton ..singleton
     right_singleton ..singleton
     left_outer ..outer
     right_outer ..outer]
    (all _.and
         (_.test "The intersection of an interval to itself yields the same interval."
           (/.= some_interval (/.intersection some_interval some_interval)))
         (_.test "The intersection of 2 inner intervals yields an inner interval when they overlap, and an outer when they don't."
           (if (/.overlaps? left_inner right_inner)
             (/.inner? (/.intersection left_inner right_inner))
             (/.outer? (/.intersection left_inner right_inner))))
         (_.test "The intersection of 2 outer intervals is another outer interval."
           (/.outer? (/.intersection left_outer right_outer)))
         )))

(the complement
  Test
  (do random.monad
    [some_interval ..interval]
    (all _.and
         (_.test "The complement of a complement is the same as the original."
           (/.= some_interval (|> some_interval /.complement /.complement)))
         (_.test "The complement of an interval does not overlap it."
           (not (/.overlaps? some_interval (/.complement some_interval))))
         )))

(the provenance
  Test
  (do [! random.monad]
    [[l m r] (|> (random.set n.hash 3 random.natural)
                 (by ! each (|>> set.list
                                 (list.sorted n.<)
                                 (pipe.when
                                   (list b t1 t2)
                                   [b t1 t2]

                                   _
                                   (undefined)))))
     .let [left (/.singleton n.enum l)
           right (/.singleton n.enum r)]]
    (all _.and
         (_.coverage [/.precedes? /.succeeds?]
           (and (/.precedes? right left)
                (/.succeeds? left right)))
         (_.coverage [/.before? /.after?]
           (and (/.before? m left)
                (/.after? m right)))
         )))

(the touch
  Test
  (do [! random.monad]
    [[b t1 t2] (|> (random.set n.hash 3 random.natural)
                   (by ! each (|>> set.list
                                   (list.sorted n.<)
                                   (pipe.when
                                     (list b t1 t2)
                                     [b t1 t2]

                                     _
                                     (undefined)))))
     .let [integer_left (/.between n.enum t1 t2)
           integer_right (/.between n.enum b t1)]]
    (all _.and
         (_.coverage [/.meets?]
           (/.meets? integer_left integer_right))
         (_.coverage [/.touches?]
           (/.touches? integer_left integer_right))
         (_.coverage [/.starts?]
           (/.starts? (/.between n.enum b t2)
                      (/.between n.enum b t1)))
         (_.coverage [/.finishes?]
           (/.finishes? (/.between n.enum b t2)
                        (/.between n.enum t1 t2)))
         )))

(the nested
  Test
  (do [! random.monad]
    [some_interval ..interval
     [x0 x1 x2 x3] (|> (random.set n.hash 4 random.natural)
                       (by ! each (|>> set.list
                                       (list.sorted n.<)
                                       (pipe.when
                                         (list x0 x1 x2 x3)
                                         [x0 x1 x2 x3]

                                         _
                                         (undefined)))))]
    (all _.and
         (_.test "Every interval is nested into itself."
           (/.nested? some_interval some_interval))
         (let [small_inner (/.between n.enum x1 x2)
               large_inner (/.between n.enum x0 x3)]
           (_.test "Inner intervals can be nested inside one another."
             (and (/.nested? large_inner small_inner)
                  (not (/.nested? small_inner large_inner)))))
         (let [small_outer (/.between n.enum x2 x1)
               large_outer (/.between n.enum x3 x0)]
           (_.test "Outer intervals can be nested inside one another."
             (and (/.nested? small_outer large_outer)
                  (not (/.nested? large_outer small_outer)))))
         (let [left_inner (/.between n.enum x0 x1)
               right_inner (/.between n.enum x2 x3)
               outer (/.between n.enum x0 x3)]
           (_.test "Inners can be nested inside outers."
             (and (/.nested? outer left_inner)
                  (/.nested? outer right_inner))))
         )))

(the overlap
  Test
  (do [! random.monad]
    [some_interval ..interval
     [x0 x1 x2 x3] (|> (random.set n.hash 4 random.natural)
                       (by ! each (|>> set.list
                                       (list.sorted n.<)
                                       (pipe.when
                                         (list x0 x1 x2 x3)
                                         [x0 x1 x2 x3]

                                         _
                                         (undefined)))))]
    (all _.and
         (_.test "No interval overlaps with itself."
           (not (/.overlaps? some_interval some_interval)))
         (let [left_inner (/.between n.enum x0 x2)
               right_inner (/.between n.enum x1 x3)]
           (_.test "Inner intervals can overlap one another."
             (and (/.overlaps? left_inner right_inner)
                  (/.overlaps? right_inner left_inner))))
         (let [left_inner (/.between n.enum x0 x2)
               right_inner (/.between n.enum x1 x3)
               outer (/.between n.enum x1 x2)]
           (_.test "Inners can overlap outers."
             (and (/.overlaps? outer left_inner)
                  (/.overlaps? outer right_inner))))
         )))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (_.for [/.equivalence /.=]
                  (static.when (same? /.equivalence /.=)
                    (equivalenceT.spec /.equivalence ..interval)))
           
           ..types
           ..boundaries
           (_.for [/.union]
                  ..union)
           (_.for [/.intersection]
                  ..intersection)
           (_.for [/.complement]
                  ..complement)
           ..provenance
           ..touch
           (_.for [/.nested?]
                  ..nested)
           (_.for [/.overlaps?]
                  ..overlap)
           )))
