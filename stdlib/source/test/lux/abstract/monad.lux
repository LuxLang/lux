(.module:
  [lux #*
   ["_" test (#+ Test)]
   [data
    ["." identity (#+ Identity)]
    [collection
     ["." list ("#\." functor fold)]]]
   [math
    ["." random]
    [number
     ["n" nat]]]]
  {1
   ["." / (#+ Monad do)]})

(def: #export test
  Test
  (do random.monad
    [mono random.nat
     poly (random.list 10 random.nat)]
    (<| (_.covering /._)
        ($_ _.and
            (_.cover [/.do]
                     (n.= (inc mono)
                          (: (Identity Nat)
                             (/.do identity.monad
                               [sample (wrap mono)]
                               (wrap (inc sample))))))
            (_.cover [/.bind]
                     (n.= (inc mono)
                          (: (Identity Nat)
                             (/.bind identity.monad
                                     (|>> inc (\ identity.monad wrap))
                                     (\ identity.monad wrap mono)))))
            (_.cover [/.seq]
                     (\ (list.equivalence n.equivalence) =
                        (list\map inc poly)
                        (|> poly
                            (list\map (|>> inc (\ identity.monad wrap)))
                            (: (List (Identity Nat)))
                            (/.seq identity.monad)
                            (: (Identity (List Nat))))))
            (_.cover [/.map]
                     (\ (list.equivalence n.equivalence) =
                        (list\map inc poly)
                        (|> poly
                            (/.map identity.monad (|>> inc (\ identity.monad wrap)))
                            (: (Identity (List Nat))))))
            (_.cover [/.filter]
                     (\ (list.equivalence n.equivalence) =
                        (list.filter n.even? poly)
                        (|> poly
                            (/.filter identity.monad (|>> n.even? (\ identity.monad wrap)))
                            (: (Identity (List Nat))))))
            (_.cover [/.fold]
                     (n.= (list\fold n.+ 0 poly)
                          (|> poly
                              (/.fold identity.monad
                                      (function (_ part whole)
                                        (\ identity.monad wrap
                                           (n.+ part whole)))
                                      0)
                              (: (Identity Nat)))))
            ))))
