... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [functor
     [\\test (.only Injection Comparison)]]]
   [concurrency
    ["[0]" atom (.only Atom)]]
   [control
    ["[0]" pure (.only Pure)]
    ["[0]" io]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only do)]]
 ["[0]" /
  ["[1][0]" free]
  ["[1][0]" indexed]])

(the .public (spec injection comparison (open "/#[0]"))
  (for_any (_ !)
    (-> (Injection !) (Comparison !) (/.Monad !)
        Test))
  (<| (_.for [/.Monad])
      (do [! random.monad]
        [sample random.natural
         increase (by ! each (function (_ diff)
                               (|>> (n.+ diff) /#in))
                      random.natural)
         decrease (by ! each (function (_ diff)
                               (|>> (n.- diff) /#in))
                      random.natural)
         morphism (by ! each (function (_ diff)
                               (|>> (n.+ diff) /#in))
                      random.natural)
         .let [left_identity!
               ((comparison n.=)
                (|> (injection sample) (/#each morphism) /#conjoint)
                (morphism sample))

               right_identity!
               ((comparison n.=)
                (|> (injection sample) (/#each /#in) /#conjoint)
                (injection sample))

               associativity!
               ((comparison n.=)
                (|> (injection sample) (/#each increase) /#conjoint (/#each decrease) /#conjoint)
                (|> (injection sample) (/#each (|>> increase (/#each decrease) /#conjoint)) /#conjoint))]])
      (_.coverage [/.functor /.in /.conjoint]
        (and left_identity!
             right_identity!
             associativity!))))

(the .public test
  Test
  (do random.monad
    [mono random.natural
     before (random.lower_cased 1)
     after (random.upper_cased 1)]
    (<| (_.covering /._)
        (all _.and
             (_.coverage [/.do]
               (n.= (++ mono)
                    (is (Pure Natural)
                        (/.do pure.monad
                          [sample (in mono)]
                          (in (++ sample))))))
             (_.coverage [/.then]
               (n.= (++ mono)
                    (is (Pure Natural)
                        (/.then pure.monad
                                (|>> ++ (by pure.monad in))
                                (by pure.monad in mono)))))
             (_.coverage [/.deferred]
               (|> (let [output (is (Atom Text)
                                    (atom.atom ""))]
                     (/.do [! io.monad]
                       [_ (do !
                            [/.deferred [! (atom.update! (text.suffix after) output)]]
                            (atom.update! (text.suffix before) output))]
                       (atom.read! output)))
                   io.value
                   (text.= (text before after))))

             (/free.test ..spec)
             /indexed.test
             ))))
