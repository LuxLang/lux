... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [functor
     [\\test (.only Injection Comparison)]]]
   [data
    ["[0]" identity (.only Identity)]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only do)]]
 ["[0]" /
  ["[1][0]" free]
  ["[1][0]" indexed]])

(def .public (spec injection comparison (open "/#[0]"))
  (All (_ !)
    (-> (Injection !) (Comparison !) (/.Monad !)
        Test))
  (<| (_.for [/.Monad])
      (do [! random.monad]
        [sample random.nat
         increase (of ! each (function (_ diff)
                               (|>> (n.+ diff) /#in))
                      random.nat)
         decrease (of ! each (function (_ diff)
                               (|>> (n.- diff) /#in))
                      random.nat)
         morphism (of ! each (function (_ diff)
                               (|>> (n.+ diff) /#in))
                      random.nat)
         .let [left_identity!
               ((comparison n.=)
                (|> (injection sample) (/#each morphism) /#conjoint)
                (morphism sample))

               right_identity!
               ((comparison n.=)
                (|> (injection sample) (/#each /#in) /#conjoint)
                (injection sample))

               associativity!
               ((comparison n.=)
                (|> (injection sample) (/#each increase) /#conjoint (/#each decrease) /#conjoint)
                (|> (injection sample) (/#each (|>> increase (/#each decrease) /#conjoint)) /#conjoint))]])
      (_.coverage [/.functor /.in /.conjoint]
        (and left_identity!
             right_identity!
             associativity!))))

(def .public test
  Test
  (do random.monad
    [mono random.nat
     poly (random.list 10 random.nat)]
    (<| (_.covering /._)
        (all _.and
             (_.coverage [/.do]
               (n.= (++ mono)
                    (is (Identity Nat)
                        (/.do identity.monad
                          [sample (in mono)]
                          (in (++ sample))))))
             (_.coverage [/.then]
               (n.= (++ mono)
                    (is (Identity Nat)
                        (/.then identity.monad
                                (|>> ++ (of identity.monad in))
                                (of identity.monad in mono)))))
             (_.coverage [/.all]
               (of (list.equivalence n.equivalence) =
                   (list#each ++ poly)
                   (|> poly
                       (list#each (|>> ++ (of identity.monad in)))
                       (is (List (Identity Nat)))
                       (/.all identity.monad)
                       (is (Identity (List Nat))))))
             (_.coverage [/.each]
               (of (list.equivalence n.equivalence) =
                   (list#each ++ poly)
                   (|> poly
                       (/.each identity.monad (|>> ++ (of identity.monad in)))
                       (is (Identity (List Nat))))))
             (_.coverage [/.only]
               (of (list.equivalence n.equivalence) =
                   (list.only n.even? poly)
                   (|> poly
                       (/.only identity.monad (|>> n.even? (of identity.monad in)))
                       (is (Identity (List Nat))))))
             (_.coverage [/.mix]
               (n.= (list#mix n.+ 0 poly)
                    (|> poly
                        (/.mix identity.monad
                               (function (_ part whole)
                                 (of identity.monad in
                                     (n.+ part whole)))
                               0)
                        (is (Identity Nat)))))

             (/free.test ..spec)
             /indexed.test
             ))))
