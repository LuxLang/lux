... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    ["[0]" monad]]
   ["[0]" function]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["[0]" natural]]]]
   [test
    ["_" property (.only Test)]]
   [data
    ["[0]" product]]]]
 [\\library
  ["[0]" /]])

(every .public (Specification it)
  (-> it
      Test))

(the .public (specification_of_functor concrete random
                                       functor)
  (for_any (_ it)
    (-> (for_any (_ parameter|return)
          (-> (it parameter|return parameter|return)
              (-> parameter|return parameter|return)))
        (Random (it Natural Natural))
        (Specification (/.Functor it))))
  (<| (monad.let [! random.monad]
        [cause random.natural
         it random])
      (_.for [/.Functor])
      (_.coverage [/.each]
        (let [it' (by functor each
                      function.identity
                      function.identity
                      it)
              
              satisfaction_of_identity!
              (by natural.equivalence =
                  ((concrete it) cause)
                  ((concrete it') cause))

              before_0 (is (Change Natural)
                           ++)
              before_1 (is (Change Natural)
                           (natural.x 2))

              after_0 (is (Change Natural)
                          --)
              after_1 (is (Change Natural)
                          (natural.x 3))
              
              left
              (by functor each
                  (|>> before_0 before_1)
                  (|>> after_1 after_0)
                  it)

              right
              (<| (by functor each
                      before_0
                      after_0)
                  (by functor each
                      before_1
                      after_1)
                  it)
              
              satisfaction_of_composition!
              (by natural.equivalence =
                  ((concrete left) cause)
                  ((concrete right) cause))]
          (and satisfaction_of_identity!
               satisfaction_of_composition!)))))

(the (left_0 it)
  (for_any (_ it to_ignore)
    (-> (Or to_ignore it)
        it))
  (when it
    {.:Left it} (undefined)
    {.:Right it} it))

(the (left_0' it)
  (for_any (_ it)
    (-> it
        (Or Nothing it)))
  {.:Right it})

(the (right_0 it)
  (for_any (_ it to_ignore)
    (-> (Or it to_ignore)
        it))
  (when it
    {.:Left it} it
    {.:Right it} (undefined)))

(the (right_0' it)
  (for_any (_ it)
    (-> it
        (Or it Nothing)))
  {.:Left it})

(the (co_association _0|_1|_2)
  (for_any (_ _0 _1 _2)
    (-> (Either _0 (Either _1 _2))
        (Either (Either _0 _1) _2)))
  (when _0|_1|_2
    {.:Left _0}
    {.:Left {.:Left _0}}

    {.:Right {.:Left _1}}
    {.:Left {.:Right _1}}

    {.:Right {.:Right _2}}
    {.:Right _2}))

(the (co_association' _0|_1|_2)
  (for_any (_ _0 _1 _2)
    (-> (Either (Either _0 _1) _2)
        (Either _0 (Either _1 _2))))
  (when _0|_1|_2
    {.:Left {.:Left _0}}
    {.:Left _0}

    {.:Left {.:Right _1}}
    {.:Right {.:Left _1}}
    
    {.:Right _2}
    {.:Right {.:Right _2}}))

(the .public (specification_of_co_cartesian concrete random
                                            functor
                                            cartesian)
  (for_any (_ it)
    (-> (for_any (_ parameter|return)
          (-> (it parameter|return parameter|return)
              (-> parameter|return parameter|return)))
        (Random (it Natural Natural))
        (/.Functor it)
        (Specification (/.Co_Cartesian it))))
  (<| (monad.let [! random.monad]
        [cause random.natural
         it random])
      (_.for [/.Co_Cartesian])
      (all _.and
           (_.coverage [/.when_left]
             (let [satisfaction_of_identity!
                   (by natural.equivalence =
                       (right_0 ((concrete (by cartesian when_left it)) {.:Left cause}))
                       (right_0 ((concrete (by functor each ..right_0 ..right_0' it)) {.:Left cause})))

                   satisfaction_of_association!
                   (by natural.equivalence =
                       (right_0 ((concrete (by cartesian when_left it))
                                 {.:Left cause}))
                       (right_0 ((concrete (by functor each ..co_association ..co_association'
                                               (by cartesian when_left (by cartesian when_left it))))
                                 {.:Left cause})))]
               (and satisfaction_of_identity!
                    satisfaction_of_association!)))
           (_.coverage [/.when_right]
             (let [satisfaction_of_identity!
                   (by natural.equivalence =
                       (left_0 ((concrete (by cartesian when_right it)) {.:Right cause}))
                       (left_0 ((concrete (by functor each ..left_0 ..left_0' it)) {.:Right cause})))

                   satisfaction_of_association!
                   (by natural.equivalence =
                       (left_0 ((concrete (by cartesian when_right it))
                                {.:Right cause}))
                       (left_0 ((concrete (by functor each ..co_association' ..co_association
                                              (by cartesian when_right (by cartesian when_right it))))
                                {.:Right cause})))]
               (and satisfaction_of_identity!
                    satisfaction_of_association!)))
           )))

(the (left_1 [_ it])
  (for_any (_ it)
    (-> (And Any it)
        it))
  it)

(the (left_1' it)
  (for_any (_ it)
    (-> it
        (And Any it)))
  [[] it])

(the (right_1 [it _])
  (for_any (_ it)
    (-> (And it Any)
        it))
  it)

(the (right_1' it)
  (for_any (_ it)
    (-> it
        (And it Any)))
  [it []])

(the (association [_0 [_1 _2]])
  (for_any (_ _0 _1 _2)
    (-> (And _0 (And _1 _2))
        (And (And _0 _1) _2)))
  [[_0 _1] _2])

(the (association' [[_0 _1] _2])
  (for_any (_ _0 _1 _2)
    (-> (And (And _0 _1) _2)
        (And _0 (And _1 _2))))
  [_0 [_1 _2]])

(the .public (specification_of_cartesian concrete random
                                         functor
                                         cartesian)
  (for_any (_ it)
    (-> (for_any (_ parameter|return)
          (-> (it parameter|return parameter|return)
              (-> parameter|return parameter|return)))
        (Random (it Natural Natural))
        (/.Functor it)
        (Specification (/.Cartesian it))))
  (<| (monad.let [! random.monad]
        [cause random.natural
         it random])
      (_.for [/.Cartesian])
      (all _.and
           (_.coverage [/.in_left]
             (let [satisfaction_of_identity!
                   (by natural.equivalence =
                       (product.left ((concrete (by cartesian in_left it)) [cause []]))
                       (product.left ((concrete (by functor each ..right_1 ..right_1' it)) [cause []])))

                   satisfaction_of_association!
                   (by natural.equivalence =
                       (product.left ((concrete (by cartesian in_left it))
                                      [cause [[] []]]))
                       (product.left ((concrete (by functor each ..association ..association'
                                                    (by cartesian in_left (by cartesian in_left it))))
                                      [cause [[] []]])))]
               (and satisfaction_of_identity!
                    satisfaction_of_association!)))
           (_.coverage [/.in_right]
             (let [satisfaction_of_identity!
                   (by natural.equivalence =
                       (product.right ((concrete (by cartesian in_right it)) [[] cause]))
                       (product.right ((concrete (by functor each ..left_1 ..left_1' it)) [[] cause])))

                   satisfaction_of_association!
                   (by natural.equivalence =
                       (product.right ((concrete (by cartesian in_right it))
                                       [[[] []] cause]))
                       (product.right ((concrete (by functor each ..association' ..association
                                                     (by cartesian in_right (by cartesian in_right it))))
                                       [[[] []] cause])))]
               (and satisfaction_of_identity!
                    satisfaction_of_association!)))
           )))
