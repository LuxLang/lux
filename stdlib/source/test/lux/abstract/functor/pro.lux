... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   ["[0]" function]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" natural]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(every .public (Specification it)
  (-> it
      Test))

(the .public (specification concrete random
                            functor)
  (for_any (_ it)
    (-> (-> (it Natural Natural)
            (-> Natural Natural))
        (Random (it Natural Natural))
        (Specification (/.Functor it))))
  (<| (do [! random.monad]
        [cause random.natural
         it random])
      (_.for [/.Functor])
      (_.coverage [/.each]
        (let [it' (by functor each
                      function.identity
                      function.identity
                      it)
              
              identity!
              (by natural.equivalence =
                  ((concrete it) cause)
                  ((concrete it') cause))

              before_0 (is (Change Natural)
                           ++)
              before_1 (is (Change Natural)
                           (natural.* 2))

              after_0 (is (Change Natural)
                          --)
              after_1 (is (Change Natural)
                          (natural.* 3))
              
              left
              (by functor each
                  (|>> before_0 before_1)
                  (|>> after_1 after_0)
                  it)

              right
              (<| (by functor each
                      before_0
                      after_0)
                  (by functor each
                      before_1
                      after_1)
                  it)
              
              composite!
              (by natural.equivalence =
                  ((concrete left) cause)
                  ((concrete right) cause))]
          (and identity!
               composite!)))))
