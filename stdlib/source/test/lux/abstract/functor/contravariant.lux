(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [control
    ["[0]" function]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def .public test
  Test
  (<| (_.covering /._)
      (_.in_parallel (list))))

(def .public (spec equivalence value it)
  (All (_ ! of)
    (-> (Equivalence (! of)) (! of) (/.Functor !)
        Test))
  (do random.monad
    [sample random.nat]
    (<| (_.for [/.Functor])
        (all _.and
             (_.coverage [/.each]
               (let [law_of_identity!
                     (of equivalence =
                         (of it each function.identity value)
                         value)]
                 (and law_of_identity!)))
             ))))
