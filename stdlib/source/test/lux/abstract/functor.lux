(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" state]
    ["[0]" function]]
   [data
    ["[0]" identity]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [meta
    ["@" target]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" \\polytypic]
 [\\library
  ["[0]" / (.only Functor)]])

(for @.old (these)
     (these (def maybe_functor
              (Functor .Maybe)
              (\\polytypic.functor .Maybe))

            (def list_functor
              (Functor .List)
              (\\polytypic.functor .List))

            (def state_functor
              (All (_ state)
                (Functor (state.State state)))
              (\\polytypic.functor state.State))

            (def identity_functor
              (Functor identity.Identity)
              (\\polytypic.functor identity.Identity))))

(def \\polytypic
  Test
  (<| (_.covering \\polytypic._)
      (_.coverage [\\polytypic.functor]
        true)))

(def .public test
  Test
  (do random.monad
    [left random.nat
     right random.nat
     shift random.nat]
    (<| (_.covering /._)
        (all _.and
             (_.coverage [/.Or /.sum]
               (and (when (of (/.sum maybe.functor list.functor) each
                              (n.+ shift)
                              {.#Left {.#Some left}})
                      {.#Left {.#Some actual}}
                      (n.= (n.+ shift left) actual)

                      _
                      false)
                    (when (of (/.sum maybe.functor list.functor) each
                              (n.+ shift)
                              {.#Right (list right)})
                      {.#Right (list actual)}
                      (n.= (n.+ shift right) actual)

                      _
                      false)))
             (_.coverage [/.And /.product]
               (when (of (/.product maybe.functor list.functor) each
                         (n.+ shift)
                         [{.#Some left} (list right)])
                 [{.#Some actualL} (list actualR)]
                 (and (n.= (n.+ shift left) actualL)
                      (n.= (n.+ shift right) actualR))

                 _
                 false))
             (_.coverage [/.Then /.composite]
               (when (of (/.composite maybe.functor list.functor) each
                         (n.+ shift)
                         {.#Some (list left)})
                 {.#Some (list actual)}
                 (n.= (n.+ shift left) actual)

                 _
                 false))

             ..\\polytypic
             ))))

(type .public (Injection !)
  (All (_ of)
    (-> of
        (! of))))

(type .public (Comparison !)
  (All (_ of)
    (-> (Equivalence of)
        (Equivalence (! of)))))

(def .public (spec injection comparison functor)
  (All (_ !)
    (-> (Injection !) (Comparison !) (Functor !)
        Test))
  (<| (do [! random.monad]
        [sample random.nat
         increase (of ! each n.+ random.nat)
         decrease (of ! each n.- random.nat)])
      (_.for [/.Functor])
      (_.coverage [/.each]
        (let [(open "/#[0]") functor
              
              identity!
              ((comparison n.=)
               (/#each function.identity (injection sample))
               (injection sample))

              homomorphism!
              ((comparison n.=)
               (/#each increase (injection sample))
               (injection (increase sample)))

              composition!
              ((comparison n.=)
               (|> (injection sample)
                   (/#each increase)
                   (/#each decrease))
               (|> (injection sample)
                   (/#each (|>> increase decrease))))]
          (and identity!
               homomorphism!
               composition!)))))
