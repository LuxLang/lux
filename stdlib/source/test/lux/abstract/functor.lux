... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["//" algorithm]
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" writer]
    ["[0]" scope]
    ["[0]" state]
    ["[0]" function]
    ["[0]" pure]]
   [data
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" \\polytypic]
 [\\library
  ["[0]" / (.only Functor)]])

(the (either left right)
  (for_any (_ of)
    (-> of of
        of))
  right)

(the pure_functor
  (<| (is (Functor pure.Pure))
      (is (Functor //.Variable))
      (all either
           pure.functor
           (\\polytypic.functor pure.Pure)
           /.variable
           )))

(the maybe_functor
  (<| (is (Functor .Maybe))
      (is (Functor (//.Sum (//.Constant Any) //.Variable)))
      (all either
           maybe.functor
           (\\polytypic.functor .Maybe)
           (/.sum /.constant
                  /.variable)
           )))

(the writer_functor
  (<| (is (Functor (writer.Writer Text)))
      (is (Functor (//.Product (//.Constant Text) //.Variable)))
      (all either
           writer.functor
           (\\polytypic.functor writer.Writer)
           (/.product /.constant
                      /.variable)
           )))

(the scope_functor
  (<| (is (for_any (_ scope)
            (Functor (scope.Scope scope))))
      (is (for_any (_ scope)
            (Functor (/.Function scope //.Variable))))
      (all either
           scope.functor
           (\\polytypic.functor scope.Scope)
           (/.function /.variable)
           )))

(the state_functor
  (for_any (_ state)
    (Functor (state.State state)))
  (is (for_any (_ state)
        (Functor (/.Function state (//.Product (//.Constant state) //.Variable))))
      (all either
           state.functor
           (\\polytypic.functor state.State)
           (/.function (/.product /.constant
                                  /.variable))
           )))

(the list_functor
  (Functor .List)
  (is (Functor (//.Recursive (for_any (_ self)
                               (//.Sum (//.Constant Any)
                                       (//.Product //.Variable self)))))
      (all either
           list.functor
           (\\polytypic.functor .List)
           (/.recursive
            (function (_ it)
              (/.sum /.constant
                     (/.product /.variable it))))
           )))

(the \\polytypic
  Test
  (<| (_.covering \\polytypic._)
      (_.coverage [\\polytypic.functor]
        true)))

(the .public test
  Test
  (do random.monad
    [left random.natural
     right random.natural
     shift random.natural]
    (<| (_.covering /._)
        (all _.and
             (_.coverage [/.sum]
               (and (when (of (/.sum maybe.functor list.functor) each
                              (n.+ shift)
                              {.#Left {.#Some left}})
                      {.#Left {.#Some actual}}
                      (n.= (n.+ shift left) actual)

                      _
                      false)
                    (when (of (/.sum maybe.functor list.functor) each
                              (n.+ shift)
                              {.#Right (list right)})
                      {.#Right (list actual)}
                      (n.= (n.+ shift right) actual)

                      _
                      false)))
             (_.coverage [/.product]
               (when (of (/.product maybe.functor list.functor) each
                         (n.+ shift)
                         [{.#Some left} (list right)])
                 [{.#Some actualL} (list actualR)]
                 (and (n.= (n.+ shift left) actualL)
                      (n.= (n.+ shift right) actualR))

                 _
                 false))
             (_.coverage [/.Then /.composite]
               (when (of (/.composite maybe.functor list.functor) each
                         (n.+ shift)
                         {.#Some (list left)})
                 {.#Some (list actual)}
                 (n.= (n.+ shift left) actual)

                 _
                 false))

             ..\\polytypic
             ))))

(every .public (Injection !)
  (for_any (_ of)
    (-> of
        (! of))))

(every .public (Comparison !)
  (for_any (_ of)
    (-> (Equivalence of)
        (Equivalence (! of)))))

(the .public (spec injection comparison functor)
  (for_any (_ !)
    (-> (Injection !) (Comparison !) (Functor !)
        Test))
  (<| (do [! random.monad]
        [sample random.natural
         increase (of ! each n.+ random.natural)
         decrease (of ! each n.- random.natural)])
      (_.for [/.Functor])
      (_.coverage [/.each]
        (let [(open "/#[0]") functor
              
              identity!
              ((comparison n.=)
               (/#each function.identity (injection sample))
               (injection sample))

              homomorphism!
              ((comparison n.=)
               (/#each increase (injection sample))
               (injection (increase sample)))

              composition!
              ((comparison n.=)
               (|> (injection sample)
                   (/#each increase)
                   (/#each decrease))
               (|> (injection sample)
                   (/#each (|>> increase decrease))))]
          (and identity!
               homomorphism!
               composition!)))))
