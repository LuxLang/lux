(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract/monad (#+ do)]
   [data
    [text
     ["%" format (#+ format)]]]
   [math
    ["r" random (#+ Random)]]]
  {1
   ["." / (#+ Number)
    [//
     ["." order (#+ Order)]]]})

(def: #export (spec (^@ order (^open "/@.")) (^open "/@.") gen-sample)
  (All [a] (-> (Order a) (Number a) (Random a) Test))
  (do r.monad
    [#let [non-zero (r.filter (function (_ sample)
                                (|> sample (/@+ sample) (/@= sample) not))
                              gen-sample)]
     parameter non-zero
     subject non-zero]
    (<| (_.context (%.name (name-of /.Number)))
        ($_ _.and
            (_.test "Addition and subtraction are inverse functions."
                    (|> subject (/@+ parameter) (/@- parameter) (/@= subject)))
            (_.test "Multiplication and division are inverse functions."
                    (|> subject (/@* parameter) (/@/ parameter) (/@= subject)))
            (_.test "Modulus fills all the information division misses."
                    (let [modulus (/@% parameter subject)
                          multiple (/@- modulus subject)
                          factor (/@/ parameter multiple)]
                      (|> parameter (/@* factor) (/@+ modulus) (/@= subject))))
            (_.test "Negation flips the sign of a number and mimics subtraction."
                    (let [unsigned? (/@= (/@signum parameter)
                                         (/@signum (/@negate parameter)))]
                      (or unsigned?
                          (/@= (/@+ (/@negate parameter) subject)
                               (/@- parameter subject)))))
            (_.test "The absolute value is always positive."
                    (let [unsigned? (/@= parameter
                                         (/@negate parameter))]
                      (if unsigned?
                        (/@= subject (/@abs subject))
                        (order.>= order subject (/@abs subject)))))
            ))))
