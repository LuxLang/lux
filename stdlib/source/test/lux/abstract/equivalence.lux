(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract/monad (#+ do)]
   [data
    ["." bit ("#@." equivalence)]
    [text
     ["%" format (#+ format)]]
    [number
     ["n" nat]
     ["i" int]]]
   [math
    ["r" random (#+ Random)]]]
  {1
   ["." / (#+ Equivalence)]})

(def: #export test
  Test
  (do r.monad
    [leftN r.nat
     rightN r.nat
     leftI r.int
     rightI r.int]
    (<| (_.context (%.name (name-of /._)))
        ($_ _.and
            (_.test (%.name (name-of /.sum))
                    (let [equivalence (/.sum n.equivalence i.equivalence)]
                      (and (bit@= (:: n.equivalence = leftN leftN)
                                  (:: equivalence = (#.Left leftN) (#.Left leftN)))
                           (bit@= (:: n.equivalence = leftN rightN)
                                  (:: equivalence = (#.Left leftN) (#.Left rightN)))
                           (bit@= (:: i.equivalence = leftI leftI)
                                  (:: equivalence = (#.Right leftI) (#.Right leftI)))
                           (bit@= (:: i.equivalence = leftI rightI)
                                  (:: equivalence = (#.Right leftI) (#.Right rightI))))))
            (_.test (%.name (name-of /.product))
                    (let [equivalence (/.product n.equivalence i.equivalence)]
                      (and (bit@= (and (:: n.equivalence = leftN leftN)
                                       (:: i.equivalence = leftI leftI))
                                  (:: equivalence = [leftN leftI] [leftN leftI]))
                           (bit@= (and (:: n.equivalence = leftN rightN)
                                       (:: i.equivalence = leftI rightI))
                                  (:: equivalence = [leftN leftI] [rightN rightI])))))))))

(def: #export (spec (^open "_@.") generator)
  (All [a] (-> (Equivalence a) (Random a) Test))
  (do r.monad
    [left generator
     right generator]
    (<| (_.context (%.name (name-of /.Equivalence)))
        ($_ _.and
            (_.test "Reflexivity."
                    (_@= left left))
            (_.test "Symmetry."
                    (if (_@= left right)
                      (_@= right left)
                      (not (_@= right left))))))))
