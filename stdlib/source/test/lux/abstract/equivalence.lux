(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     [functor
      ["$[0]" contravariant]]]]
   [data
    ["[0]" bit (.open: "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]
     ["i" int]]]]]
 [\\library
  ["[0]" / (.only Equivalence)]])

(def: .public test
  Test
  (do random.monad
    [leftN random.nat
     rightN random.nat
     leftI random.int
     rightI random.int
     sample random.nat
     different (|> random.nat (random.only (|>> (n.= sample) not)))
     .let [equivalence (is (Equivalence (Equivalence Nat))
                           (implementation
                            (def: (= left right)
                              (and (bit#= (at left = leftN leftN)
                                          (at right = leftN leftN))
                                   (bit#= (at left = rightN rightN)
                                          (at right = rightN rightN))
                                   (bit#= (at left = leftN rightN)
                                          (at right = leftN rightN))))))]]
    (<| (_.covering /._)
        (all _.and
             (_.for [/.functor]
                    ($contravariant.spec equivalence n.equivalence /.functor))
             (_.coverage [/.rec]
               (let [equivalence (is (Equivalence (List Nat))
                                     (/.rec (function (_ equivalence)
                                              (implementation
                                               (def: (= left right)
                                                 (case [left right]
                                                   [{.#End} {.#End}]
                                                   true

                                                   [{.#Item leftH lefT} {.#Item rightH rightT}]
                                                   (and (n.= leftH rightH)
                                                        (at equivalence = lefT rightT))

                                                   _
                                                   false))))))]
                 (and (at equivalence = (list sample sample) (list sample sample))
                      (not (at equivalence = (list sample sample) (list sample)))
                      (not (at equivalence = (list sample sample) (list different different))))))
             ))))
