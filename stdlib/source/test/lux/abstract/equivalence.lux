(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      [functor
       ["$." contravariant]]]}]
   [data
    ["." bit ("#\." equivalence)]
    [number
     ["n" nat]
     ["i" int]]]
   [math
    ["." random (#+ Random)]]]
  {1
   ["." / (#+ Equivalence)]})

(def: #export test
  Test
  (do random.monad
    [leftN random.nat
     rightN random.nat
     leftI random.int
     rightI random.int
     sample random.nat
     different (|> random.nat (random.filter (|>> (n.= sample) not)))
     #let [equivalence (: (Equivalence (Equivalence Nat))
                          (structure
                           (def: (= left right)
                             (and (bit\= (\ left = leftN leftN)
                                         (\ right = leftN leftN))
                                  (bit\= (\ left = rightN rightN)
                                         (\ right = rightN rightN))
                                  (bit\= (\ left = leftN rightN)
                                         (\ right = leftN rightN))))))]]
    (<| (_.covering /._)
        ($_ _.and
            (_.with-cover [/.functor]
              ($contravariant.spec equivalence n.equivalence /.functor))
            (_.cover [/.sum]
                     (let [equivalence (/.sum n.equivalence i.equivalence)]
                       (and (bit\= (\ n.equivalence = leftN leftN)
                                   (\ equivalence = (#.Left leftN) (#.Left leftN)))
                            (bit\= (\ n.equivalence = leftN rightN)
                                   (\ equivalence = (#.Left leftN) (#.Left rightN)))
                            (bit\= (\ i.equivalence = leftI leftI)
                                   (\ equivalence = (#.Right leftI) (#.Right leftI)))
                            (bit\= (\ i.equivalence = leftI rightI)
                                   (\ equivalence = (#.Right leftI) (#.Right rightI))))))
            (_.cover [/.product]
                     (let [equivalence (/.product n.equivalence i.equivalence)]
                       (and (bit\= (and (\ n.equivalence = leftN leftN)
                                        (\ i.equivalence = leftI leftI))
                                   (\ equivalence = [leftN leftI] [leftN leftI]))
                            (bit\= (and (\ n.equivalence = leftN rightN)
                                        (\ i.equivalence = leftI rightI))
                                   (\ equivalence = [leftN leftI] [rightN rightI])))))
            (_.cover [/.rec]
                     (let [equivalence (: (Equivalence (List Nat))
                                          (/.rec (function (_ equivalence)
                                                   (structure
                                                    (def: (= left right)
                                                      (case [left right]
                                                        [#.Nil #.Nil]
                                                        true

                                                        [(#.Cons leftH lefT) (#.Cons rightH rightT)]
                                                        (and (n.= leftH rightH)
                                                             (\ equivalence = lefT rightT))

                                                        _
                                                        false))))))]
                       (and (\ equivalence = (list sample sample) (list sample sample))
                            (not (\ equivalence = (list sample sample) (list sample)))
                            (not (\ equivalence = (list sample sample) (list different different))))))
            ))))
