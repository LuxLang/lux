(.require
 [library
  [lux (.except Variant Record)
   [abstract
    [monad (.only do)]
    [functor
     ["[0]" contravariant
      ["[1]T" \\test]]]]
   [control
    ["[0]" maybe]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]
     ["i" int]]]
   [meta
    [compiler
     ["@" target]]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" \\polytypic]
 [\\library
  ["[0]" /]])

(def .public (spec (open "/#[0]") random)
  (All (_ of)
    (-> (/.Equivalence of) (Random of)
        Test))
  (do random.monad
    [left random
     right random]
    (<| (_.for [/.Equivalence])
        (_.coverage [/.=]
          (let [reflexivity!
                (/#= left left)

                symmetry!
                (bit#= (/#= left right)
                       (/#= right left))]
            (and reflexivity!
                 symmetry!
                 ))))))

(type Variant
  (.Variant
   {#Case_0 Bit}
   {#Case_1 Int}
   {#Case_2 Frac}))

(type Recursive
  (Rec Recursive
    (.Variant
     {#Number Frac}
     {#Addition Frac Recursive})))

(type Record
  (.Record
   [#bit Bit
    #int Int
    #frac Frac
    #text Text
    #maybe (Maybe Int)
    #list (List Int)
    #variant Variant
    #tuple [Int Frac Text]
    #recursive Recursive]))

(def gen_recursive
  (Random Recursive)
  (random.rec (function (_ gen_recursive)
                (random.or random.safe_frac
                           (random.and random.safe_frac
                                       gen_recursive)))))

(def random
  (Random Record)
  (do [! random.monad]
    [size (of ! each (n.% 2) random.nat)
     .let [gen_int (|> random.int (of ! each (|>> i.abs (i.% +1,000,000))))]]
    (all random.and
         random.bit
         gen_int
         random.safe_frac
         (random.unicode size)
         (random.maybe gen_int)
         (random.list size gen_int)
         (all random.or
              random.bit
              gen_int
              random.safe_frac)
         (all random.and
              gen_int
              random.safe_frac
              (random.unicode size))
         gen_recursive)))

(for @.old (these)
     (these (def equivalence
              (/.Equivalence ..Record)
              (\\polytypic.equivalence ..Record))))

(def \\polytypic
  Test
  (<| (_.covering \\polytypic._)
      (_.for [\\polytypic.equivalence]
             (for @.old (_.test "PLACEHOLDER" true)
                  (..spec ..equivalence ..random)))))

(def .public test
  Test
  (do random.monad
    [leftN random.nat
     rightN random.nat
     leftI random.int
     rightI random.int
     sample random.nat
     different (|> random.nat (random.only (|>> (n.= sample) not)))
     .let [equivalence (is (/.Equivalence (/.Equivalence Nat))
                           (implementation
                            (def (= left right)
                              (and (bit#= (of left = leftN leftN)
                                          (of right = leftN leftN))
                                   (bit#= (of left = rightN rightN)
                                          (of right = rightN rightN))
                                   (bit#= (of left = leftN rightN)
                                          (of right = leftN rightN))))))]]
    (<| (_.covering /._)
        (all _.and
             (_.for [/.functor]
                    (contravariantT.spec equivalence n.equivalence /.functor))
             (_.coverage [/.rec]
               (let [equivalence (is (/.Equivalence (List Nat))
                                     (/.rec (function (_ equivalence)
                                              (implementation
                                               (def (= left right)
                                                 (when [left right]
                                                   [{.#End} {.#End}]
                                                   true

                                                   [{.#Item leftH lefT} {.#Item rightH rightT}]
                                                   (and (n.= leftH rightH)
                                                        (of equivalence = lefT rightT))

                                                   _
                                                   false))))))]
                 (and (of equivalence = (list sample sample) (list sample sample))
                      (not (of equivalence = (list sample sample) (list sample)))
                      (not (of equivalence = (list sample sample) (list different different))))))

             ..\\polytypic
             ))))
