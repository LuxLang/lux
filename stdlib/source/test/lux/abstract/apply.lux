(.module:
  [library
   [lux #*
    [abstract
     [monad (#+ do)]]
    [data
     ["." maybe]
     [collection
      ["." list]]]
    [math
     ["." random]
     [number
      ["n" nat]]]
    ["_" test (#+ Test)]]]
  [\\library
   ["." / (#+ Apply)]])

(def: .public test
  Test
  (do random.monad
    [left random.nat
     right random.nat]
    (<| (_.covering /._)
        ($_ _.and
            (_.cover [/.compose]
                     (let [expected (n.+ left right)]
                       (case (\ (/.compose maybe.monad maybe.apply list.apply) apply
                                (#.Some (list (n.+ left)))
                                (#.Some (list right)))
                         (^ (#.Some (list actual)))
                         (n.= expected actual)

                         _
                         false)))
            ))))
