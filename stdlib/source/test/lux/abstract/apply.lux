(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [data
    ["." maybe]
    [number
     ["n" nat]]
    [collection
     ["." list]]]
   [math
    ["." random]]
   ["_" test (#+ Test)]]
  {1
   ["." / (#+ Apply)]})

(def: #export test
  Test
  (do random.monad
    [left random.nat
     right random.nat]
    (<| (_.covering /._)
        ($_ _.and
            (_.cover [/.compose]
                     (let [expected (n.+ left right)]
                       (case (:: (/.compose maybe.monad maybe.apply list.apply) apply
                                 (#.Some (list (n.+ left)))
                                 (#.Some (list right)))
                         (^ (#.Some (list actual)))
                         (n.= expected actual)

                         _
                         false)))
            ))))
