(.module:
  [lux #*
   [abstract/monad (#+ do)]
   [data
    [number
     ["n" nat]]]
   [control
    ["." function]]
   [math
    ["." random]]
   ["_" test (#+ Test)]]
  {1
   ["." / (#+ Apply)]}
  [//
   [functor (#+ Injection Comparison)]])

(def: (identity injection comparison (^open "_@."))
  (All [f] (-> (Injection f) (Comparison f) (Apply f) Test))
  (do random.monad
    [sample (:: @ map injection random.nat)]
    (_.test "Identity."
            ((comparison n.=)
             (_@apply (injection function.identity) sample)
             sample))))

(def: (homomorphism injection comparison (^open "_@."))
  (All [f] (-> (Injection f) (Comparison f) (Apply f) Test))
  (do random.monad
    [sample random.nat
     increase (:: @ map n.+ random.nat)]
    (_.test "Homomorphism."
            ((comparison n.=)
             (_@apply (injection increase) (injection sample))
             (injection (increase sample))))))

(def: (interchange injection comparison (^open "_@."))
  (All [f] (-> (Injection f) (Comparison f) (Apply f) Test))
  (do random.monad
    [sample random.nat
     increase (:: @ map n.+ random.nat)]
    (_.test "Interchange."
            ((comparison n.=)
             (_@apply (injection increase) (injection sample))
             (_@apply (injection (function (_ f) (f sample))) (injection increase))))))

(def: (composition injection comparison (^open "_@."))
  (All [f] (-> (Injection f) (Comparison f) (Apply f) Test))
  (do random.monad
    [sample random.nat
     increase (:: @ map n.+ random.nat)
     decrease (:: @ map n.- random.nat)]
    (_.test "Composition."
            ((comparison n.=)
             (_$ _@apply
                 (injection function.compose)
                 (injection increase)
                 (injection decrease)
                 (injection sample))
             ($_ _@apply
                 (injection increase)
                 (injection decrease)
                 (injection sample))))))

(def: #export (spec injection comparison apply)
  (All [f] (-> (Injection f) (Comparison f) (Apply f) Test))
  (_.with-cover [/.Apply]
    ($_ _.and
        (..identity injection comparison apply)
        (..homomorphism injection comparison apply)
        (..interchange injection comparison apply)
        (..composition injection comparison apply)
        )))
