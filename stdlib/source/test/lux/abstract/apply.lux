(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" function]]
   [data
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [meta
    ["[0]" type]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 [//
  ["[0]T" functor (.only Injection Comparison)]])

(def .public test
  Test
  (do random.monad
    [left random.nat
     right random.nat]
    (<| (_.covering /._)
        (all _.and
             (_.coverage [/.composite]
               (let [expected (n.+ left right)]
                 (when (of (/.composite maybe.monad maybe.apply list.apply) on
                           {.#Some (list right)}
                           {.#Some (list (n.+ left))})
                   {.#Some (list actual)}
                   (n.= expected actual)

                   _
                   false)))
             ))))

(def .public (spec injection comparison it)
  (All (_ !)
    (-> (Injection !) (Comparison !) (/.Apply !)
        Test))
  (<| (_.for [/.Apply])
      (type.let [:$/1: (-> Nat Nat)])
      (do [! random.monad]
        [sample random.nat
         increase (is (Random :$/1:)
                      (of ! each n.+ random.nat))
         decrease (is (Random :$/1:)
                      (of ! each n.- random.nat))])
      (all _.and
           (_.for [/.functor]
                  (functorT.spec injection comparison (the /.functor it)))

           (_.coverage [/.on]
             (let [(open "/#[0]") it

                   identity!
                   ((comparison n.=)
                    (/#on (injection sample)
                          (injection function.identity))
                    (injection sample))

                   homomorphism!
                   ((comparison n.=)
                    (/#on (injection sample) (injection increase))
                    (injection (increase sample)))
                   
                   interchange!
                   ((comparison n.=) (/#on (injection sample) (injection increase))
                    (/#on (injection increase) (injection (is (-> (-> Nat Nat)
                                                                  Nat)
                                                              (function (_ f) (f sample))))))
                   
                   composition!
                   ((comparison n.=)
                    (|> (injection (is (-> :$/1: :$/1: :$/1:)
                                       function.composite))
                        (/#on (injection increase))
                        (/#on (injection decrease))
                        (/#on (injection sample)))
                    (/#on (/#on (injection sample)
                                (injection increase))
                          (injection decrease)))]
               (and identity!
                    homomorphism!
                    interchange!
                    composition!)))
           )))
