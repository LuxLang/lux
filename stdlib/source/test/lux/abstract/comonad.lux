(.module:
  [lux #*
   [abstract
    [monad (#+ do)]]
   [data
    ["." identity (#+ Identity)]]
   [math
    ["." random]
    [number
     ["n" nat]]]
   ["_" test (#+ Test)]]
  [\\
   ["." /]])

(def: #export test
  Test
  (do random.monad
    [sample random.nat]
    (<| (_.covering /._)
        ($_ _.and
            (_.cover [/.be]
                     (n.= (inc sample)
                          (: (Identity Nat)
                             (/.be identity.comonad
                               [value (unwrap sample)]
                               (unwrap (inc value))))))
            ))))
