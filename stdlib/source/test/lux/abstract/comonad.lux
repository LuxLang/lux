(.module:
  [library
   [lux #*
    [abstract
     [monad (#+ do)]]
    [data
     ["." identity (#+ Identity)]]
    [math
     ["." random]
     [number
      ["n" nat]]]
    ["_" test (#+ Test)]]]
  [\\library
   ["." /]])

(def: .public test
  Test
  (do random.monad
    [sample random.nat]
    (<| (_.covering /._)
        ($_ _.and
            (_.cover [/.be]
                     (n.= (++ sample)
                          (: (Identity Nat)
                             (/.be identity.comonad
                               [value (out sample)]
                               (out (++ value))))))
            ))))
