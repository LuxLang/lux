... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]]
   [control
    ["[0]" pure (.only Pure)]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (monad.let random.monad
    [sample random.natural]
    (<| (_.covering /._)
        (all _.and
             (_.coverage [/.let]
               (n.= (++ sample)
                    (is (Pure Natural)
                        (/.let pure.comonad
                          [value (this sample)]
                          (this (++ value))))))
             ))))

(the .public (spec injection comparison it)
  (for_any (_ !)
    (-> (Injection !) (Comparison !) (/.CoMonad !)
        Test))
  (<| (_.for [/.CoMonad])
      (monad.let [! random.monad]
        [.let [(open "/:[0]") it]
         sample random.natural
         increase (by ! each (function (_ diff)
                               (|>> /:this (n.+ diff)))
                      random.natural)
         decrease (by ! each (function (_ diff)
                               (|>> /:this (n.- diff)))
                      random.natural)
         morphism (by ! each (function (_ diff)
                               (|>> /:this (n.+ diff)))
                      random.natural)
         .let [start (injection sample)
               == (comparison n.=)]])
      (all _.and
           (_.for [/.functor]
                  (functorT.spec injection comparison (its /.functor it)))

           (_.coverage [/.disjoint /.this]
             (let [left_identity!
                   (n.= (morphism start)
                        (|> start /:disjoint (/:each morphism) /:this))
                   
                   right_identity!
                   (== start
                       (|> start /:disjoint (/:each /:this)))
                   
                   associativity!
                   (== (|> start /:disjoint (/:each (|>> /:disjoint (/:each increase) decrease)))
                       (|> start /:disjoint (/:each increase) /:disjoint (/:each decrease)))]
               (and left_identity!
                    right_identity!
                    associativity!)))
           )))
