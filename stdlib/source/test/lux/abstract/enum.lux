... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" order
     ["[1]T" \\test]]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (let [limit (is (Random Nat)
                  (of random.monad each (n.% 20) random.nat))]
    (do random.monad
      [start limit
       end limit
       .let [[start end] (if (n.< end start)
                           [start end]
                           [end start])
             range (/.range n.enum start end)]]
      (<| (_.covering /._)
          (all _.and
               (_.coverage [/.range]
                 (let [expected_size (|> end (n.- start) ++)
                       expected_start? (|> range list.head (maybe#each (n.= start)) (maybe.else false))
                       expected_end? (|> range list.last (maybe#each (n.= end)) (maybe.else false))
                       can_be_backwards? (of (list.equivalence n.equivalence) =
                                             (/.range n.enum start end)
                                             (list.reversed (/.range n.enum end start)))
                       every_element_is_a_successor? (when range
                                                       {.#Item head tail}
                                                       (|> (list#mix (function (_ next [verdict prev])
                                                                       [(and verdict
                                                                             (n.= next (of n.enum succ prev)))
                                                                        next])
                                                                     [true head]
                                                                     tail)
                                                           product.left)
                                                       
                                                       {.#End}
                                                       false)]
                   (and (n.= expected_size (list.size range))
                        expected_start?
                        expected_end?
                        can_be_backwards?
                        every_element_is_a_successor?)))
               )))))

(the .public (spec (open "/#[0]") random)
  (All (_ of)
    (-> (/.Enum of) (Random of)
        Test))
  (do random.monad
    [sample random]
    (<| (_.for [/.Enum])
        (all _.and
             (_.for [/.order]
                    (orderT.spec /#order random))
             
             (_.coverage [/.succ /.pred]
               (and (/#= (|> sample /#succ /#pred)
                         sample)
                    (/#= (|> sample /#pred /#succ)
                         sample)
                    (not (/#= (/#succ sample)
                              sample))
                    (not (/#= (/#pred sample)
                              sample))))
             ))))
