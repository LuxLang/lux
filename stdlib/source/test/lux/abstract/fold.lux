(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [data
    [number
     ["n" nat]]
    [text
     ["%" format (#+ format)]]
    [collection
     ["." list]]]
   [math
    ["." random]]]
  [//
   [functor (#+ Injection Comparison)]]
  {1
   ["." / (#+ Fold)]})

(def: #export (spec injection comparison (^open "/@."))
  (All [f] (-> (Injection f) (Comparison f) (Fold f) Test))
  (do random.monad
    [subject random.nat
     parameter random.nat]
    (_.cover [/.Fold]
             (n.= (/@fold n.+ parameter (injection subject))
                  (n.+ parameter subject)))))

(def: #export test
  Test
  (do random.monad
    [samples (random.list 10 random.nat)]
    (<| (_.covering /._)
        ($_ _.and
            (_.cover [/.with-monoid]
                     (n.= (:: list.fold fold (:: n.addition compose) (:: n.addition identity) samples)
                          (/.with-monoid n.addition list.fold samples)))
            ))))
