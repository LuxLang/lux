(.module:
  [library
   [lux "*"
    ["_" test {"+" Test}]
    [abstract
     [functor {"+" Functor}]
     [comonad {"+" CoMonad}]
     [\\specification
      ["$[0]" functor {"+" Injection Comparison}]
      ["$[0]" comonad]]]
    [control
     ["//" continuation]]
    [data
     [collection
      ["[0]" list]
      ["[0]" sequence {"+" Sequence} ("[1]#[0]" comonad)]]]
    [math
     ["[0]" random]]]]
  [\\library
   ["[0]" /]])

(def: (injection value)
  (Injection (/.CoFree Sequence))
  [value (sequence#each injection (sequence.repeated value))])

(def: (interpret [head tail])
  (All (_ a) (-> (/.CoFree Sequence a) (Sequence a)))
  (|> tail
      (sequence#each (# (/.comonad sequence.functor) out))
      [head]
      //.pending))

(def: comparison
  (Comparison (/.CoFree Sequence))
  (function (_ == left right)
    (# (list.equivalence ==) =
       (sequence.first 100 (..interpret left))
       (sequence.first 100 (..interpret right)))))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.CoFree])
      ($_ _.and
          (_.for [/.functor]
                 ($functor.spec ..injection ..comparison (: (Functor (/.CoFree Sequence))
                                                            (/.functor sequence.functor))))
          (_.for [/.comonad]
                 ($comonad.spec ..injection ..comparison (: (CoMonad (/.CoFree Sequence))
                                                            (/.comonad sequence.functor))))
          )))
