(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [functor (#+ Functor)]
    [comonad (#+ CoMonad)]
    {[0 #spec]
     [/
      ["$." functor (#+ Injection Comparison)]
      ["$." comonad]]}]
   [control
    ["//" continuation]]
   [data
    [collection
     ["." list]
     ["." sequence (#+ Sequence) ("#\." comonad)]]]
   [math
    ["." random]]]
  {1
   ["." /]})

(def: (injection value)
  (Injection (/.CoFree Sequence))
  [value (sequence\map injection (sequence.repeat value))])

(def: (interpret [head tail])
  (All [a] (-> (/.CoFree Sequence a) (Sequence a)))
  (|> tail
      (sequence\map (\ (/.comonad sequence.functor) unwrap))
      [head]
      //.pending))

(def: comparison
  (Comparison (/.CoFree Sequence))
  (function (_ == left right)
    (\ (list.equivalence ==) =
       (sequence.take 100 (..interpret left))
       (sequence.take 100 (..interpret right)))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.CoFree])
      ($_ _.and
          (_.for [/.functor]
                 ($functor.spec ..injection ..comparison (: (Functor (/.CoFree Sequence))
                                                            (/.functor sequence.functor))))
          (_.for [/.comonad]
                 ($comonad.spec ..injection ..comparison (: (CoMonad (/.CoFree Sequence))
                                                            (/.comonad sequence.functor))))
          )))
