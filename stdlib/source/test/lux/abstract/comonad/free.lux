(.require
 [library
  [lux (.except)
   [abstract
    [comonad (.only CoMonad)]
    ["[0]" functor (.only Functor)
     ["[1]T" \\test (.only Injection Comparison)]]
    [\\specification
     ["$[0]" comonad]]]
   [control
    ["//" continuation]]
   [data
    [collection
     ["[0]" list]
     ["[0]" stream (.only Stream) (.use "[1]#[0]" comonad)]]]
   [math
    ["[0]" random]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def (injection value)
  (Injection (/.Free Stream))
  [value (stream#each injection (stream.repeated value))])

(def (interpret [head tail])
  (All (_ a) (-> (/.Free Stream a) (Stream a)))
  (|> tail
      (stream#each (of (/.comonad stream.functor) out))
      [head]
      //.pending))

(def comparison
  (Comparison (/.Free Stream))
  (function (_ == left right)
    (of (list.equivalence ==) =
        (stream.first 100 (..interpret left))
        (stream.first 100 (..interpret right)))))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Free])
      (all _.and
           (_.for [/.functor]
                  (functorT.spec ..injection ..comparison (is (Functor (/.Free Stream))
                                                              (/.functor stream.functor))))
           (_.for [/.comonad]
                  ($comonad.spec ..injection ..comparison (is (CoMonad (/.Free Stream))
                                                              (/.comonad stream.functor))))
           )))
