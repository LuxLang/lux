... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [comonad (.only CoMonad)]
    ["[0]" functor (.only Functor)
     ["[1]T" \\test (.only Injection Comparison)]]
    ["[0]" comonad
     ["[1]T" \\test]]]
   [function
    ["//" continuation]]
   [data
    [collection
     ["[0]" list]
     ["[0]" stream (.only Stream) (.use "[1]:[0]" comonad)]]]
   [math
    ["[0]" random]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the (injection value)
  (Injection (/.Free Stream))
  [value (stream:each injection (stream.repeated value))])

(the (interpret [head tail])
  (for_any (_ a)
    (-> (/.Free Stream a)
        (Stream a)))
  (|> tail
      (stream:each (by (/.comonad stream.functor) this))
      [head]
      //.pending))

(the comparison
  (Comparison (/.Free Stream))
  (function (_ == left right)
    (by (list.equivalence ==) =
        (stream.first 100 (..interpret left))
        (stream.first 100 (..interpret right)))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Free])
      (all _.and
           (_.for [/.functor]
                  (functorT.spec ..injection ..comparison (is (Functor (/.Free Stream))
                                                              (/.functor stream.functor))))
           (_.for [/.comonad]
                  (comonadT.spec ..injection ..comparison (is (CoMonad (/.Free Stream))
                                                              (/.comonad stream.functor))))
           )))
