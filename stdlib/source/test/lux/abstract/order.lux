(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [data
    [number
     ["n" nat]]]
   [math
    ["." random (#+ Random)]]]
  {1
   ["." / (#+ Order)]})

(def: #export test
  Test
  (<| (_.covering /._)
      (do random.monad
        [left random.nat
         right (|> random.nat (random.filter (|>> (n.= left) not)))])
      ($_ _.and
          (_.cover [/.Choice /.min /.max]
                   (n.< (/.max n.order left right)
                        (/.min n.order left right)))
          )))

(def: #export (spec (^open "/@.") generator)
  (All [a] (-> (Order a) (Random a) Test))
  (<| (_.with-cover [/.Order])
      (do random.monad
        [parameter generator
         subject generator])
      ($_ _.and
          (_.test "Values are either ordered, or they are equal. All options are mutually exclusive."
                  (cond (/@< parameter subject)
                        (not (or (/@< subject parameter)
                                 (/@= parameter subject)))

                        (/@< subject parameter)
                        (not (/@= parameter subject))

                        ## else
                        (/@= parameter subject))))))
