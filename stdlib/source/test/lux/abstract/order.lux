(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      [functor
       ["$." contravariant]]]}]
   [data
    ["." bit ("#\." equivalence)]]
   [math
    ["." random (#+ Random)]
    [number
     ["n" nat]]]]
  {1
   ["." /
    [//
     [equivalence (#+ Equivalence)]]]})

(def: #export test
  Test
  (<| (_.covering /._)
      (do random.monad
        [left random.nat
         right (|> random.nat (random.filter (|>> (n.= left) not)))
         #let [equivalence (: (Equivalence (/.Order Nat))
                              (implementation
                               (def: (= leftO rightO)
                                 (and (bit\= (\ leftO < left left)
                                             (\ rightO < left left))
                                      (bit\= (\ leftO < right right)
                                             (\ rightO < right right))
                                      (bit\= (\ leftO < left right)
                                             (\ rightO < left right))))))]])
      ($_ _.and
          (_.for [/.functor]
                 ($contravariant.spec equivalence n.order /.functor))
          (_.cover [/.Choice /.min /.max]
                   (n.< (/.max n.order left right)
                        (/.min n.order left right)))
          (_.cover [/.Comparison /.>]
                   (not (bit\= (n.< left right)
                               (/.> n.order left right))))
          (_.cover [/.<=]
                   (and (/.<= n.order left left)
                        (/.<= n.order right right)
                        (bit\= (\ n.order < left right)
                               (/.<= n.order left right))))
          (_.cover [/.>=]
                   (and (/.>= n.order left left)
                        (/.>= n.order right right)
                        (bit\= (/.> n.order left right)
                               (/.>= n.order left right))))
          )))
