(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     [functor
      ["$[0]" contravariant]]]]
   [data
    ["[0]" bit (.open: "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" / (.only)
   [//
    [equivalence (.only Equivalence)]]]])

(def .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [left random.nat
         right (|> random.nat (random.only (|>> (n.= left) not)))
         .let [equivalence (is (Equivalence (/.Order Nat))
                               (implementation
                                (def (= leftO rightO)
                                  (and (bit#= (at leftO < left left)
                                              (at rightO < left left))
                                       (bit#= (at leftO < right right)
                                              (at rightO < right right))
                                       (bit#= (at leftO < left right)
                                              (at rightO < left right))))))]])
      (all _.and
           (_.for [/.functor]
                  ($contravariant.spec equivalence n.order /.functor))
           (_.coverage [/.Choice /.min /.max]
             (n.< (/.max n.order left right)
                  (/.min n.order left right)))
           (_.coverage [/.Comparison /.>]
             (not (bit#= (n.< left right)
                         (/.> n.order left right))))
           (_.coverage [/.<=]
             (and (/.<= n.order left left)
                  (/.<= n.order right right)
                  (bit#= (at n.order < left right)
                         (/.<= n.order left right))))
           (_.coverage [/.>=]
             (and (/.>= n.order left left)
                  (/.>= n.order right right)
                  (bit#= (/.> n.order left right)
                         (/.>= n.order left right))))
           )))
