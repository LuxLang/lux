... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [functor
     ["[0]" contravariant
      ["[1]T" \\test]]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    [equivalence (.only Equivalence)]]]])

(def .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [left random.nat
         right (|> random.nat (random.only (|>> (n.= left) not)))
         .let [equivalence (is (Equivalence (/.Order Nat))
                               (implementation
                                (def (= leftO rightO)
                                  (and (bit#= (of leftO < left left)
                                              (of rightO < left left))
                                       (bit#= (of leftO < right right)
                                              (of rightO < right right))
                                       (bit#= (of leftO < left right)
                                              (of rightO < left right))))))]])
      (all _.and
           (_.for [/.functor]
                  (contravariantT.spec equivalence n.order /.functor))
           (_.coverage [/.Choice /.min /.max]
             (n.< (/.max n.order left right)
                  (/.min n.order left right)))
           (_.coverage [/.Comparison /.>]
             (not (bit#= (n.< left right)
                         (/.> n.order left right))))
           (_.coverage [/.<=]
             (and (/.<= n.order left left)
                  (/.<= n.order right right)
                  (bit#= (of n.order < left right)
                         (/.<= n.order left right))))
           (_.coverage [/.>=]
             (and (/.>= n.order left left)
                  (/.>= n.order right right)
                  (bit#= (/.> n.order left right)
                         (/.>= n.order left right))))
           )))

(def .public (spec (open "/#[0]") random)
  (All (_ of)
    (-> (/.Order of) (Random of)
        Test))
  (<| (_.for [/.Order])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec /#equivalence random))
           
           (do random.monad
             [parameter random
              subject random
              .let [equal_or_ordered!
                    (let [equal!
                          (/#= parameter subject)

                          ordered!
                          (or (and (/#< parameter subject)
                                   (not (/#< subject parameter)))
                              (and (/#< subject parameter)
                                   (not (/#< parameter subject))))]
                      (bit#= equal! (not ordered!)))]

              subject (random.only (|>> (/#= parameter) not)
                                   random)
              extra (random.only (function (_ value)
                                   (not (or (/#= parameter value)
                                            (/#= subject value))))
                                 random)
              .let [transitive_property!
                    (if (/#< parameter subject)
                      (let [greater? (and (/#< subject extra)
                                          (/#< parameter extra))
                            lesser? (and (/#< extra parameter)
                                         (/#< extra subject))
                            in_between? (and (/#< parameter extra)
                                             (/#< extra subject))]
                        (or greater?
                            lesser?
                            in_between?))
                      ... (/#< subject parameter)
                      (let [greater? (and (/#< extra subject)
                                          (/#< extra parameter))
                            lesser? (and (/#< parameter extra)
                                         (/#< subject extra))
                            in_between? (and (/#< subject extra)
                                             (/#< extra parameter))]
                        (or greater?
                            lesser?
                            in_between?)))]]
             (_.coverage [/.<]
               (and equal_or_ordered!
                    transitive_property!)))
           )))
