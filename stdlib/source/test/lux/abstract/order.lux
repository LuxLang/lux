... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    [functor
     ["[0]" contravariant
      ["[1]T" \\test]]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]
   [macro
    ["[0]" template]]]]
 [\\library
  ["[0]" / (.only)
   [//
    [equivalence (.only Equivalence)]]]])

... https://en.wikipedia.org/wiki/Preorder#Definition
(template.the (is_pre ,<~ ,>~
                      ,0 ,1 ,2)
  [(and (bit.= (,<~ ,0 ,1)
               (,>~ ,1 ,0))
        (equivalenceT.reflexivity ,<~
                                  ,0)
        (equivalenceT.transitivity ,<~
                                   ,0 ,1 ,2))])

... https://en.wikipedia.org/wiki/Partially_ordered_set
(template.the (partial ,<= ,>=
                       ,=
                       ,0 ,1 ,2
                       ,*additionally)
  [(_.coverage [,<= ,>=]
     (`` (and (..is_pre ,<= ,>=
                        ,0 ,1 ,2)
              (let [... https://en.wikipedia.org/wiki/Antisymmetric_relation
                    anti_symmetry
                    (|> (and (,<= ,0 ,1)
                             (,<= ,1 ,0))
                        (bit.implies (,= ,0 ,1)))]
                (and anti_symmetry))
              (,, (template.spliced ,*additionally)))))])

(template.the (strict ,< ,>
                      ,0 ,1 ,2)
  [(_.coverage [,< ,>]
     (and (bit.= (,< ,0 ,1)
                 (,> ,1 ,0))
          (equivalenceT.transitivity ,<
                                     ,0 ,1 ,2)
          (let [... https://en.wikipedia.org/wiki/Reflexive_relation#Irreflexive_relation
                anti_reflexivity
                (not (,< ,0 ,0))

                ... https://en.wikipedia.org/wiki/Antisymmetric_relation
                anti_symmetry
                (|> (,< ,0 ,1)
                    (bit.implies (not (,< ,1 ,0))))]
            (and anti_reflexivity
                 anti_symmetry))))])

(template.the (strict_partial ,< ,> ,<= ,>=
                              ,=
                              ,0 ,1 ,2)
  [(all _.and
        (..partial ,<= ,>=
                   ,=
                   ,0 ,1 ,2
                   [])
        (..strict ,< ,>
                  ,0 ,1 ,2))])

... https://en.wikipedia.org/wiki/Total_order
(template.the (total ,<= ,>=
                     ,=
                     ,0 ,1 ,2)
  [(..partial ,<= ,>=
              ,=
              ,0 ,1 ,2
              [(let [... https://en.wikipedia.org/wiki/Connected_relation
                     connectivity
                     (or (,<= ,0 ,1)
                         (,<= ,1 ,0))]
                 (and connectivity))])])

(template.the .public (strict_total ,implementation ,< ,> ,<= ,>=
                                    ,=
                                    ,0 ,1 ,2)
  [(all _.and
        (<| (_.for [,implementation])
            (_.coverage [/.Order
                         /.equivalence /.<]
              (and (same? ,<
                          (by ,implementation <))
                   (same? ,=
                          (by ,implementation =)))))
        (..total ,<= ,>=
                 ,=
                 ,0 ,1 ,2)
        (..strict ,< ,>
                  ,0 ,1 ,2))])

(template.the .public (choice' ,choice
                               ,=
                               ,random)
  [(<| (let [random ,random])
       (monad.let random.monad
         [it_0 random
          it_1 random
          it_2 random])
       (_.coverage [,choice]
         (and (equivalenceT.commutativity ,choice
                                          ,=
                                          it_0 it_1)
              (monoidT.associativity ,choice
                                     ,=
                                     it_0 it_1 it_2)
              (let [... https://en.wikipedia.org/wiki/Idempotence
                    idempotence
                    (,= it_0
                        (,choice it_0 it_0))

                    selection
                    (or (,= it_0
                            (,choice it_0 it_1))
                        (,= it_1
                            (,choice it_0 it_1)))]
                (and idempotence
                     selection)))))])

(template.the .public (choice ,monoid ,choice ,identity
                              ,=
                              ,random)
  [(all _.and
        (monoidT.monoid ,monoid ,choice ,identity
                        ,=
                        ,random)
        (..choice' ,choice
                   ,=
                   ,random)
        )])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let random.monad
        [left random.natural
         right (|> random.natural (random.only (|>> (n.= left) not)))
         .let [equivalence (is (Equivalence (/.Order Natural))
                               (implementation
                                (the (= leftO rightO)
                                  (and (bit.= (by leftO < left left)
                                              (by rightO < left left))
                                       (bit.= (by leftO < right right)
                                              (by rightO < right right))
                                       (bit.= (by leftO < left right)
                                              (by rightO < left right))))))]])
      (all _.and
           (_.for [/.functor]
                  (contravariantT.spec equivalence n.order /.functor))

           (_.coverage [/.boundary]
             (bit.= (by n.order < left right)
                    ((/.boundary n.order left) right)))
           (_.coverage [/.Choice /.minor /.major]
             (n.< (/.major n.order left right)
                  (/.minor n.order left right)))
           (_.coverage [/.Comparison /.>]
             (not (bit.= (n.< left right)
                         (/.> n.order left right))))
           (_.coverage [/.<=]
             (and (/.<= n.order left left)
                  (/.<= n.order right right)
                  (bit.= (by n.order < left right)
                         (/.<= n.order left right))))
           (_.coverage [/.>=]
             (and (/.>= n.order left left)
                  (/.>= n.order right right)
                  (bit.= (/.> n.order left right)
                         (/.>= n.order left right))))
           )))

(the .public (spec (open "/#[0]") random)
  (for_any (_ it)
    (-> (/.Order it) (Random it)
        Test))
  (<| (_.for [/.Order /.for])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec /#equivalence random))
           
           (monad.let random.monad
             [parameter random
              subject random
              .let [equal_or_ordered!
                    (let [equal!
                          (/#= parameter subject)

                          ordered!
                          (or (and (/#< parameter subject)
                                   (not (/#< subject parameter)))
                              (and (/#< subject parameter)
                                   (not (/#< parameter subject))))]
                      (bit.= equal! (not ordered!)))]

              subject (random.only (|>> (/#= parameter) not)
                                   random)
              extra (random.only (function (_ value)
                                   (not (or (/#= parameter value)
                                            (/#= subject value))))
                                 random)
              .let [[maximum minimum] (if (/#< parameter subject)
                                          [parameter subject]
                                          [subject parameter])

                    transitive_property!
                    (let [greater? (and (/#< maximum extra)
                                        (/#< minimum extra))
                          lesser? (and (/#< extra maximum)
                                       (/#< extra minimum))
                          in_between? (and (/#< maximum extra)
                                           (/#< extra minimum))]
                      (or greater?
                          lesser?
                          in_between?))]]
             (_.coverage [/.<]
               (and equal_or_ordered!
                    transitive_property!)))
           )))
