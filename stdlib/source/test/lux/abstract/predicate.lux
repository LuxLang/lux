(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [equivalence (#+ Equivalence)]
    [monad (#+ do)]
    {[0 #spec]
     [/
      [functor
       ["." contravariant]]]}]
   [control
    ["." function]]
   [data
    ["." bit ("#@." equivalence)]
    [number
     ["n" nat]]
    [collection
     ["." list]]]
   [math
    ["." random (#+ Random)]]]
  ["." // #_
   ["#." monoid]]
  {1
   ["." /]})

(def: (multiple? factor)
  (-> Nat (/.Predicate Nat))
  (case factor
    0 (function.constant false)
    _ (|>> (n.% factor) (n.= 0))))

(def: #export test
  Test
  (<| (_.covering /._)
      (do {@ random.monad}
        [sample random.nat
         samples (random.list 10 random.nat)
         #let [equivalence (: (Equivalence (/.Predicate Nat))
                              (structure
                               (def: (= left right)
                                 (bit@= (left sample)
                                        (right sample)))))]])
      (_.with-cover [/.Predicate])
      ($_ _.and
          (_.with-cover [/.functor]
            (contravariant.spec equivalence (multiple? 2) /.functor))
          (let [generator (: (Random (/.Predicate Nat))
                             (|> random.nat
                                 (random.filter (|>> (n.= 0) not))
                                 (:: @ map multiple?)))]
            ($_ _.and
                (_.with-cover [/.union]
                  (//monoid.spec equivalence /.union generator))
                (_.with-cover [/.intersection]
                  (//monoid.spec equivalence /.intersection generator))))
          
          (_.cover [/.none]
                   (bit@= false (/.none sample)))
          (_.cover [/.all]
                   (bit@= true (/.all sample)))
          (_.cover [/.unite]
                   (bit@= (/.all sample)
                          ((/.unite /.none /.all) sample)))
          (_.cover [/.intersect]
                   (bit@= (/.none sample)
                          ((/.intersect /.none /.all) sample)))
          (_.cover [/.complement]
                   (and (not (bit@= (/.none sample)
                                    ((/.complement /.none) sample)))
                        (not (bit@= (/.all sample)
                                    ((/.complement /.all) sample)))))
          (_.cover [/.difference]
                   (let [/2? (multiple? 2)
                         /3? (multiple? 3)]
                     (bit@= (and (/2? sample)
                                 (not (/3? sample)))
                            ((/.difference /3? /2?) sample))))
          (_.cover [/.rec]
                   (let [even? (multiple? 2)
                         any-even? (: (/.Predicate (List Nat))
                                      (/.rec (function (_ recur)
                                               (function (_ values)
                                                 (case values
                                                   #.Nil
                                                   false

                                                   (#.Cons head tail)
                                                   (or (even? head)
                                                       (recur tail)))))))]
                     (bit@= (list.any? even? samples)
                            (any-even? samples))))
          )))
