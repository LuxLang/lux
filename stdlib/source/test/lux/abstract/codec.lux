(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]]
   [data
    ["[0]" bit (.open: "[1]#[0]" equivalence)]
    [format
     ["[0]" json (.only JSON)]]]
   [math
    ["[0]" random (.only Random)]]]]
 [\\library
  ["[0]" / (.only Codec)
   [//
    [equivalence (.only Equivalence)]]]])

(def: json
  (Codec JSON Bit)
  (let [field "value"]
    (implementation
     (def: encoded
       (|>> {json.#Boolean}
            [field]
            list
            json.object))
     (def: decoded
       (json.boolean_field field)))))

(def: codec
  (Codec Text Bit)
  (/.composite json.codec ..json))

(def: .public test
  Test
  (do random.monad
    [expected random.bit]
    (<| (_.covering /._)
        (_.coverage [/.composite]
          (case (|> expected (# ..codec encoded) (# ..codec decoded))
            {try.#Success actual}
            (bit#= expected actual)
            
            {try.#Failure error}
            false)))))
