(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    [abstract
     [monad {"+" [do]}]]
    [control
     ["[0]" try]]
    [data
     ["[0]" bit ("[1]\[0]" equivalence)]
     [format
      ["[0]" json {"+" [JSON]}]]]
    [math
     ["[0]" random {"+" [Random]}]]]]
  [\\library
   ["[0]" / {"+" [Codec]}
    [//
     [equivalence {"+" [Equivalence]}]]]])

(def: json
  (Codec JSON Bit)
  (let [field "value"]
    (implementation
     (def: encoded
       (|>> {json.#Boolean}
            [field]
            list
            json.object))
     (def: decoded
       (json.boolean_field field)))))

(def: codec
  (Codec Text Bit)
  (/.composite json.codec ..json))

(def: .public test
  Test
  (do random.monad
    [expected random.bit]
    (<| (_.covering /._)
        (_.cover [/.composite]
                 (case (|> expected (\ ..codec encoded) (\ ..codec decoded))
                   {try.#Success actual}
                   (bit\= expected actual)
                   
                   {try.#Failure error}
                   false)))))
