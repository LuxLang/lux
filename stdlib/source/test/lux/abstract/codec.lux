(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract/monad (#+ do)]
   [data
    text/format
    ["." error]]
   [math
    ["r" random (#+ Random)]]]
  {1
   ["." / (#+ Codec)
    [//
     [equivalence (#+ Equivalence)]]]})

(def: #export (spec (^open "/@.") (^open "/@.") generator)
  (All [m a] (-> (Equivalence a) (Codec m a) (Random a) Test))
  (do r.monad
    [expected generator]
    (<| (_.context (%name (name-of /.Codec)))
        (_.test "Isomorphism."
                (case (|> expected /@encode /@decode)
                  (#error.Success actual)
                  (/@= expected actual)
                  
                  (#error.Failure error)
                  false)))))
