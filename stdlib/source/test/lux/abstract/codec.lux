(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [control
     ["." try]]
    [data
     ["." bit ("#\." equivalence)]
     [format
      ["." json (#+ JSON)]]]
    [math
     ["." random (#+ Random)]]]]
  [\\library
   ["." / (#+ Codec)
    [//
     [equivalence (#+ Equivalence)]]]])

(def: json
  (Codec JSON Bit)
  (let [field "value"]
    (implementation
     (def: encode
       (|>> #json.Boolean
            [field]
            list
            json.object))
     (def: decode
       (json.boolean_field field)))))

(def: codec
  (Codec Text Bit)
  (/.composite json.codec ..json))

(def: .public test
  Test
  (do random.monad
    [expected random.bit]
    (<| (_.covering /._)
        (_.cover [/.composite]
                 (case (|> expected (\ ..codec encode) (\ ..codec decode))
                   (#try.Success actual)
                   (bit\= expected actual)
                   
                   (#try.Failure error)
                   false)))))
