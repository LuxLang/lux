(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract/monad (#+ do)]
   [control
    ["." try]]
   [data
    ["." bit ("#@." equivalence)]
    [format
     ["." json (#+ JSON)]]]
   [math
    ["." random (#+ Random)]]]
  {1
   ["." / (#+ Codec)
    [//
     [equivalence (#+ Equivalence)]]]})

(def: json
  (Codec JSON Bit)
  (let [field "value"]
    (structure
     (def: encode
       (|>> #json.Boolean
            [field]
            list
            (json.object)))
     (def: decode
       (json.get-boolean field)))))

(def: codec
  (Codec Text Bit)
  (/.compose json.codec ..json))

(def: #export test
  Test
  (do random.monad
    [expected random.bit]
    (<| (_.covering /._)
        (_.cover [/.compose]
                 (case (|> expected (:: ..codec encode) (:: ..codec decode))
                   (#try.Success actual)
                   (bit@= expected actual)
                   
                   (#try.Failure error)
                   false)))))

(def: #export (spec (^open "/@.") (^open "/@.") generator)
  (All [m a] (-> (Equivalence a) (Codec m a) (Random a) Test))
  (do random.monad
    [expected generator]
    (_.with-cover [/.Codec]
      (_.test "Isomorphism."
              (case (|> expected /@encode /@decode)
                (#try.Success actual)
                (/@= expected actual)
                
                (#try.Failure _)
                false)))))
