(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]]]
    [control
     ["." try ("#\." functor)]
     [parser
      ["<.>" code]]]
    [math
     ["." random (#+ Random)]]]]
  [\\library
   ["." /]])

(def: .public random
  (Random /.Variable)
  (random.ascii/alpha 10))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Variable])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (do random.monad
            [expected ..random]
            (_.cover [/.format /.parser]
                     (|> (list (/.format expected))
                         (<code>.run /.parser)
                         (try\map (\ /.equivalence = expected))
                         (try.else false))))
          )))
