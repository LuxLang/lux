(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    [\spec
     ["$." equivalence]]]
   [control
    ["." try ("#\." functor)]
    [parser
     ["<.>" code]]]
   [math
    ["." random (#+ Random)]]]
  [\\
   ["." /]])

(def: #export random
  (Random /.Variable)
  (random.ascii/alpha 10))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Variable])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (do random.monad
            [expected ..random]
            (_.cover [/.format /.parser]
                     (|> (list (/.format expected))
                         (<code>.run /.parser)
                         (try\map (\ /.equivalence = expected))
                         (try.default false))))
          )))
