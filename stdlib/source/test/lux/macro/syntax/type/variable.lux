(.using
 [library
  [lux "*"
   ["_" test {"+" Test}]
   [abstract
    [monad {"+" do}]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try ("[1]#[0]" functor)]
    [parser
     ["<[0]>" code]]]
   [math
    ["[0]" random {"+" Random}]]]]
 [\\library
  ["[0]" /]])

(def: .public random
  (Random /.Variable)
  (random.alphabetic 10))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Variable])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))

           (do random.monad
             [expected ..random]
             (_.coverage [/.format /.parser]
               (|> (list (/.format expected))
                   (<code>.result /.parser)
                   (try#each (# /.equivalence = expected))
                   (try.else false))))
           )))
