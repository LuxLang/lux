(.require
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]
    [parser
     ["<[0]>" code]]]
   [math
    ["[0]" random (.only Random)]]]]
 [\\library
  ["[0]" /]])

(def .public random
  (Random /.Variable)
  (random.alphabetic 10))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Variable])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))

           (do random.monad
             [expected ..random]
             (_.coverage [/.format /.parser]
               (|> (list (/.format expected))
                   (<code>.result /.parser)
                   (try#each (at /.equivalence = expected))
                   (try.else false))))
           )))
