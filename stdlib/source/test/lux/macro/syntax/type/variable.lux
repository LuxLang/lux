(.module:
  [library
   [lux "*"
    ["_" test {"+" Test}]
    [abstract
     [monad {"+" do}]
     [\\specification
      ["$[0]" equivalence]]]
    [control
     ["[0]" try ("[1]#[0]" functor)]
     [parser
      ["<[0]>" code]]]
    [math
     ["[0]" random {"+" Random}]]]]
  [\\library
   ["[0]" /]])

(def: .public random
  (Random /.Variable)
  (random.ascii/alpha 10))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Variable])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (do random.monad
            [expected ..random]
            (_.cover [/.format /.parser]
                     (|> (list (/.format expected))
                         (<code>.result /.parser)
                         (try#each (# /.equivalence = expected))
                         (try.else false))))
          )))
