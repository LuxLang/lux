(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try]
    ["<>" parser
     ["<.>" code]]]
   [math
    ["." random (#+ Random)]]
   [macro
    ["." code ("#\." equivalence)]]]
  {1
   ["." /]}
  ["$." //// #_
   ["#." code]])

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Check])
      (do random.monad
        [type $////code.random
         value $////code.random]
        (_.cover [/.write /.parser]
                 (case (<code>.run /.parser
                                   (list (/.write {#/.type type
                                                   #/.value value})))
                   (#try.Failure _)
                   false
                   
                   (#try.Success check)
                   (and (code\= type (get@ #/.type check))
                        (code\= value (get@ #/.value check))))))))
