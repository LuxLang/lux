(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]]}]
   [control
    ["." try]
    [parser
     ["<.>" code]]]
   [math
    ["." random (#+ Random)]
    [number
     ["n" nat]]]]
  {1
   ["." /]})

(def: #export random
  (Random /.Declaration)
  (let [word (random.ascii/alpha 10)]
    ($_ random.and
        word
        (do {! random.monad}
          [size (\ ! map (n.% 10) random.nat)]
          (random.list size word))
        )))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Declaration])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (do random.monad
            [expected ..random]
            (_.cover [/.write /.parser]
                     (case (<code>.run /.parser
                                       (list (/.write expected)))
                       (#try.Failure _)
                       false
                       
                       (#try.Success actual)
                       (\ /.equivalence = expected actual)))))))
