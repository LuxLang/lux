(.module:
  [lux #*
   ["_" test (#+ Test)]
   [math
    ["." random (#+ Random)]]
   [abstract
    [monad (#+ do)]
    [equivalence (#+ Equivalence)]]
   [control
    [pipe (#+ case>)]
    ["." try]
    ["<>" parser
     ["<c>" code]]]
   [data
    ["." product]
    ["." bit ("#\." equivalence)]
    ["." name]
    ["." text]
    [number
     ["n" nat]]
    [collection
     ["." list]]]
   [macro
    ["." code]]]
  {1
   ["." /
    ["#." reader]
    ["#." writer]]}
  ["." /// #_
   ["#." code]]
  ["." / #_
   ["#." check]
   ["#." definition]
   ["#." export]])

(def: annotations-equivalence
  (Equivalence /.Annotations)
  (list.equivalence
   (product.equivalence name.equivalence
                        code.equivalence)))

(def: random-text
  (Random Text)
  (random.ascii/alpha 10))

(def: random-name
  (Random Name)
  (random.and ..random-text ..random-text))

(def: random-annotations
  (Random /.Annotations)
  (do {! random.monad}
    [size (\ ! map (|>> (n.% 3)) random.nat)]
    (random.list size (random.and random-name
                                  ///code.random))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.covering /reader._)
      (_.covering /writer._)
      ($_ _.and
          (_.for [/.Annotations]
                 ($_ _.and
                     (do random.monad
                       [expected ..random-annotations]
                       (_.cover [/reader.annotations /writer.annotations]
                                (|> expected
                                    /writer.annotations list
                                    (<c>.run /reader.annotations)
                                    (case> (#try.Success actual)
                                           (\ ..annotations-equivalence = expected actual)
                                           
                                           (#try.Failure error)
                                           false))))
                     (_.cover [/.empty-annotations]
                              (|> /.empty-annotations
                                  /writer.annotations list
                                  (<c>.run /reader.annotations)
                                  (case> (#try.Success actual)
                                         (\ ..annotations-equivalence = /.empty-annotations actual)
                                         
                                         (#try.Failure error)
                                         false)))
                     ))
          (do {! random.monad}
            [size (\ ! map (|>> (n.% 3)) random.nat)
             expected (random.list size ..random-text)]
            (_.cover [/.Type-Var /reader.type-variables /writer.type-variables]
                     (|> expected
                         /writer.type-variables
                         (<c>.run /reader.type-variables)
                         (case> (#try.Success actual)
                                (\ (list.equivalence text.equivalence) = expected actual)
                                
                                (#try.Failure error)
                                false))))
          (do {! random.monad}
            [size (\ ! map (|>> (n.% 3)) random.nat)
             expected (: (Random /.Declaration)
                         (random.and ..random-text
                                     (random.list size ..random-text)))]
            (_.cover [/.Declaration /reader.declaration /writer.declaration]
                     (|> expected
                         /writer.declaration list
                         (<c>.run /reader.declaration)
                         (case> (#try.Success actual)
                                (let [equivalence (product.equivalence text.equivalence
                                                                       (list.equivalence text.equivalence))]
                                  (\ equivalence = expected actual))
                                
                                (#try.Failure error)
                                false))))
          (do {! random.monad}
            [expected (: (Random /.Typed-Input)
                         (random.and ///code.random
                                     ///code.random))]
            (_.cover [/.Typed-Input /reader.typed-input /writer.typed-input]
                     (|> expected
                         /writer.typed-input list
                         (<c>.run /reader.typed-input)
                         (case> (#try.Success actual)
                                (let [equivalence (product.equivalence code.equivalence code.equivalence)]
                                  (\ equivalence = expected actual))
                                
                                (#try.Failure error)
                                false))))

          /check.test
          /definition.test
          /export.test
          )))
