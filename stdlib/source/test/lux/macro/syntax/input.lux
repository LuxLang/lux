(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]]]
    [control
     ["." try]
     [parser
      ["<.>" code]]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /]]
  ["$." /// #_
   ["#." code]])

(def: .public random
  (Random /.Input)
  ($_ random.and
      $///code.random
      $///code.random
      ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Input])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (do random.monad
            [expected ..random]
            (_.cover [/.format /.parser]
                     (case (<code>.run /.parser
                                       (list (/.format expected)))
                       (#try.Failure _)
                       false
                       
                       (#try.Success actual)
                       (\ /.equivalence = expected actual)))))))
