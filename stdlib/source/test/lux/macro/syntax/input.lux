(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    [abstract
     [monad {"+" [do]}]
     [\\specification
      ["$[0]" equivalence]]]
    [control
     ["[0]" try]
     [parser
      ["<[0]>" code]]]
    [data
     [collection
      ["[0]" list]]]
    [math
     ["[0]" random {"+" [Random]}]
     [number
      ["n" nat]]]]]
  [\\library
   ["[0]" /]]
  ["$[0]" /// "_"
   ["[1][0]" code]])

(def: .public random
  (Random /.Input)
  ($_ random.and
      $///code.random
      $///code.random
      ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Input])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (do random.monad
            [expected ..random]
            (_.cover [/.format /.parser]
                     (case (<code>.result /.parser (list (/.format (list expected))))
                       {#try.Failure _}
                       false
                       
                       {#try.Success actual}
                       (\ (list.equivalence /.equivalence) = (list expected) actual)))))))
