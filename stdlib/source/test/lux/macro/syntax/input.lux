(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try]
    [parser
     ["<[0]>" code]]]
   [data
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" /]]
 ["$[0]" ///
  ["[1][0]" code]])

(def .public random
  (Random /.Input)
  (all random.and
       $///code.random
       $///code.random
       ))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Input])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))

           (do random.monad
             [expected ..random]
             (_.coverage [/.format /.parser]
               (case (<code>.result /.parser (list (/.format (list expected))))
                 {try.#Failure _}
                 false
                 
                 {try.#Success actual}
                 (at (list.equivalence /.equivalence) = (list expected) actual)))))))
