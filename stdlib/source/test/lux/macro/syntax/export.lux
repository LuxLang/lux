(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [control
     ["." maybe]
     ["." try ("#\." functor)]
     [parser
      ["<.>" code]]]
    [macro
     ["." code ("#\." equivalence)]]
    [math
     ["." random (#+ Random)]
     [number
      ["n" nat]]]]]
  [\\library
   ["." /]])

(def: export
  (Random [(Maybe Code) Nat])
  ($_ random.and
      (|> random.bit
          (\ random.monad map code.bit)
          random.maybe)
      random.nat))

(def: .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [[expected_export_policy expected_un_exported] ..export]
        (_.cover [/.parser /.default_policy]
                 (|> (case expected_export_policy
                       (#.Some expected_export_policy)
                       (list expected_export_policy (code.nat expected_un_exported))

                       #.None
                       (list (code.nat expected_un_exported)))
                     (<code>.result (/.parser <code>.nat))
                     (try\map (function (_ [actual_export_policy actual_un_exported])
                                (|> expected_export_policy
                                    (maybe.else /.default_policy)
                                    (code\= actual_export_policy)
                                    (and (n.= expected_un_exported actual_un_exported)))))
                     (try.else false))))))
