(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]]]
    [control
     ["." try]
     ["." exception]
     ["<>" parser
      ["<.>" code]]]
    [math
     ["." random (#+ Random)]]
    [macro
     ["." code ("#\." equivalence)]]
    [meta
     ["." location]]]]
  [\\library
   ["." /]]
  ["$."// #_
   ["#." check]
   ["#." annotations]
   ["#/" // #_
    ["#." code]]])

(def: .public random
  (Random /.Definition)
  ($_ random.and
      (random.ascii/alpha 5)
      (random.or $//check.random
                 $///code.random)
      $//annotations.random
      random.bit
      ))

(def: compiler
  [#.info            [#.target  "FAKE"
                      #.version "0.0.0"
                      #.mode    #.Build]
   #.source          [location.dummy 0 ""]
   #.location        location.dummy
   #.current_module  #.None
   #.modules         (list)
   #.scopes          (list)
   #.type_context    [#.ex_counter 0
                      #.var_counter 0
                      #.var_bindings (list)]
   #.expected        #.None
   #.seed            0
   #.scope_type_vars (list)
   #.extensions      []
   #.eval            (:as (-> Type Code (Meta Any)) [])
   #.host            []])

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Definition])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (do random.monad
            [expected ..random
             
             type $///code.random
             untyped_value $///code.random]
            ($_ _.and
                (_.cover [/.format /.parser]
                         (case (<code>.result (/.parser compiler)
                                              (list (/.format expected)))
                           (#try.Failure error)
                           false
                           
                           (#try.Success actual)
                           (\ /.equivalence = expected actual)))
                (_.cover [/.typed]
                         (let [expected (with@ #/.value (#.Left [type untyped_value]) expected)]
                           (case (<code>.result (/.typed compiler)
                                                (list (/.format expected)))
                             (#try.Failure error)
                             false
                             
                             (#try.Success actual)
                             (\ /.equivalence = expected actual))))
                (_.cover [/.lacks_type]
                         (let [expected (with@ #/.value (#.Right untyped_value) expected)]
                           (case (<code>.result (/.typed compiler)
                                                (list (/.format expected)))
                             (#try.Failure error)
                             (exception.match? /.lacks_type error)
                             
                             (#try.Success actual)
                             false)))
                )))
      ))
