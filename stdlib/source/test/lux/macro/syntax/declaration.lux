(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try]
    [parser
     ["<[0]>" code]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" /]])

(def: .public random
  (Random /.Declaration)
  (let [word (random.alphabetic 10)]
    (all random.and
         word
         (do [! random.monad]
           [size (# ! each (n.% 10) random.nat)]
           (random.list size word))
         )))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Declaration])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))

           (do random.monad
             [expected ..random]
             (_.coverage [/.format /.parser]
               (case (<code>.result /.parser
                                    (list (/.format expected)))
                 {try.#Failure _}
                 false
                 
                 {try.#Success actual}
                 (# /.equivalence = expected actual)))))))
