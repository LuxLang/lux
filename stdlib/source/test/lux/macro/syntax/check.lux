(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]]]
    [control
     ["." try]
     ["<>" parser
      ["<.>" code]]]
    [math
     ["." random (#+ Random)]]
    [macro
     ["." code ("#\." equivalence)]]]]
  [\\library
   ["." /]]
  ["$." /// #_
   ["#." code]])

(def: .public random
  (Random /.Check)
  ($_ random.and
      $///code.random
      $///code.random
      ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Check])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (do random.monad
            [[type value] ..random]
            (_.cover [/.format /.parser]
                     (case (<code>.result /.parser
                                          (list (/.format [#/.type type
                                                           #/.value value])))
                       (#try.Failure _)
                       false
                       
                       (#try.Success check)
                       (and (code\= type (value@ #/.type check))
                            (code\= value (value@ #/.value check)))))))))
