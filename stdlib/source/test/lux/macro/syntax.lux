... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" projection (.use "[1]#[0]" monad)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text]]
   [math
    ["[0]" random]
    [number
     ["n" natural (.use "[1]#[0]" base_10)]]]
   [macro
    ["^" pattern]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]
     ["[1]T" \\test]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" check]
  ["[1][0]" declaration]
  ["[1][0]" definition]
  ["[1][0]" export]
  ["[1][0]" input]
  ["[1][0]" type
   ["[1]/[0]" variable]]])

(the +/3
  (/.macro (_ [a <code>.any
               b <code>.any
               c <code>.any])
    (in (stack (` (all n.+ (, a) (, b) (, c)))))))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (do random.monad
             [x random.natural
              y random.natural
              z random.natural]
             (_.coverage [/.macro]
               (n.= (all n.+ x y z)
                    (+/3 x y z))))
           (do [! random.monad]
             [expected_code codeT.random
              expected_error (by ! each n#as random.natural)]
             (_.coverage [/.self_documenting]
               (|> (<code>.value (/.self_documenting expected_code (projection.failure expected_error))
                                 (stack))
                   (match? (^.multi {try.#Failure actual_error}
                                    (and (text.contains? (code.as_text expected_code)
                                                         actual_error)
                                         (text.contains? expected_error
                                                         actual_error)))))))

           /check.test
           /declaration.test
           /definition.test
           /export.test
           /input.test
           /type/variable.test
           )))
