... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" projection (.use "[1]:[0]" monad)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list
      ["?[1]" \\projection]]]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural (.use "[1]:[0]" base_10)]]]]
   [macro
    ["^" pattern]
    ["[0]" expansion]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]
     ["[1]T" \\test]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(expansion.let [,*inputs (these [a ?list.any
                                 b ?list.any
                                 c ?list.any])
                ,*body (these (pure (list (` (all n.+ (, a) (, b) (, c))))))]
  (these (the +/3
           (/.macro (_ ,*inputs)
             ,*body))
         (/.the (the_+/3 ,*inputs)
           ,*body)))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [x random.natural
         y random.natural
         z random.natural])
      (all _.and
           (_.coverage [/.macro]
             (n.= (all n.+ x y z)
                  (+/3 x y z)))
           (_.coverage [/.the]
             (n.= (+/3 x y z)
                  (the_+/3 x y z)))
           (monad.let [! random.monad]
             [expected_code codeT.random
              expected_error (by ! each n:as random.natural)]
             (_.coverage [/.self_documenting]
               (|> (/.self_documenting expected_code (projection.failure expected_error))
                   (?list.value (list))
                   (match? (^.multi {try.:Failure actual_error}
                                    (and (text.contains? (code.as_text expected_code)
                                                         actual_error)
                                         (text.contains? expected_error
                                                         actual_error)))))))
           )))
