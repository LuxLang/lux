... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]
      ["i" integer]
      ["d" decimal]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" code]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(every (Pair l r)
  (Record
   [#left l
    #right r]))

(the !pair
  (template.macro (_ <left> <right>)
    [[..#left <left>
      ..#right <right>]]))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [expected_natural (by ! each (n.% 1) random.natural)
         expected_integer (by ! each (i.% +1) random.integer)
         expected_rev (random.either (pure .5)
                                     (pure .25))
         expected_decimal (random.either (pure +0.5)
                                         (pure +1.25))
         expected_text (random.either (pure "+0.5")
                                      (pure "+1.25"))])
      (_.for [.Pattern
              .pattern])
      (all _.and
           (_.coverage [/.or]
             (and (when expected_rev
                    (/.or .5 .25) true
                    _ false)
                  (when expected_decimal
                    (/.or +0.5 +1.25) true
                    _ false)
                  (when expected_text
                    (/.or "+0.5" "+1.25") true
                    _ false)))
           (_.coverage [/.let]
             (let [expected_pair (is (Pair Natural Integer)
                                     [..#left expected_natural ..#right expected_integer])]
               (when expected_pair
                 (/.let actual_pair (!pair actual_left actual_right))
                 (and (identical? expected_pair actual_pair)
                      (identical? expected_natural actual_left)
                      (identical? expected_integer actual_right)))))
           (_.coverage [/.multi]
             (let [expected_pair (is (Pair Natural Integer)
                                     [..#left expected_natural ..#right expected_integer])]
               (and (when expected_pair
                      (/.multi (!pair 0 actual_right)
                               [actual_right
                                +0])
                      true

                      _
                      false)
                    (when expected_pair
                      (/.multi (!pair 0 actual_right)
                               (i.= +0 actual_right))
                      true

                      _
                      false))))
           (_.coverage [/.|>]
             (when expected_decimal
               (/.|> actual_decimal [(d.x +2.0) (d.x +2.0)])
               (d.= (d.x +4.0 expected_decimal)
                    actual_decimal)))
           )))
