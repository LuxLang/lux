(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    codec
    [monad (#+ do)]
    [equivalence (#+ Equivalence)
     {[0 #poly]
      ["poly/equivalence" /]}]
    {[0 #spec]
     [/
      ["$." equivalence]
      ["$." codec]]}]
   [control
    pipe
    ["." try]
    ["p" parser
     ## TODO: Get rid of this import ASAP
     [json (#+)]]]
   [data
    ["." bit]
    ["." maybe]
    ["." text
     ["%" format (#+ format)]]
    [number
     ["n" nat]
     ["." frac]]
    [format
     [json (#+)
      {[0 #poly]
       ["." /]}]]
    [collection
     [row (#+ row)]
     ["d" dictionary]
     ["." list]]]
   [macro
    [poly (#+ derived:)]]
   [type
    ["." unit]]
   [math
    ["." random (#+ Random)]]
   [time
    ["ti" instant]
    ["tda" date]
    ## ["tdu" duration]
    ]]
  [test
   [lux
    [time
     ["_." instant]
     ## ["_." duration]
     ["_." date]]]])

(type: Variant
  (#Bit Bit)
  (#Text Text)
  (#Frac Frac))

(type: #rec Recursive
  (#Number Frac)
  (#Addition Frac Recursive))

(type: Record
  {#bit Bit
   #frac Frac
   #text Text
   #maybe (Maybe Frac)
   #list (List Frac)
   #dictionary (d.Dictionary Text Frac)
   #variant Variant
   #tuple [Bit Text Frac]
   #recursive Recursive
   ## #instant ti.Instant
   ## #duration tdu.Duration
   #date tda.Date
   #grams (unit.Qty unit.Gram)})

(def: gen-recursive
  (Random Recursive)
  (random.rec
   (function (_ gen-recursive)
     (random.or random.safe-frac
                (random.and random.safe-frac
                            gen-recursive)))))

(def: qty
  (All [unit] (Random (unit.Qty unit)))
  (|> random.int (\ random.monad map unit.in)))

(def: gen-record
  (Random Record)
  (do {! random.monad}
    [size (\ ! map (n.% 2) random.nat)]
    ($_ random.and
        random.bit
        random.safe-frac
        (random.unicode size)
        (random.maybe random.safe-frac)
        (random.list size random.safe-frac)
        (random.dictionary text.hash size (random.unicode size) random.safe-frac)
        ($_ random.or random.bit (random.unicode size) random.safe-frac)
        ($_ random.and random.bit (random.unicode size) random.safe-frac)
        ..gen-recursive
        ## _instant.instant
        ## _duration.duration
        _date.date
        ..qty
        )))

(derived: equivalence
  (poly/equivalence.equivalence Record))

(derived: codec
  (/.codec Record))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.codec]
             ($codec.spec ..equivalence ..codec ..gen-record))))
