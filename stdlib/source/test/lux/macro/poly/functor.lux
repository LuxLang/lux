(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   [abstract
    [monad (#+ do)]
    [functor
     {[0 #poly]
      ["." /]}]]
   ["r" math/random (#+ Random)]
   ["_" test (#+ Test)]
   [control
    ["." state]]
   [data
    ["." identity]]
   [macro
    [poly (#+ derived:)]]])

(derived: maybe_functor (/.functor .Maybe))
(derived: list_functor (/.functor .List))
(derived: state_functor (/.functor state.State))
(derived: identity_functor (/.functor identity.Identity))

(def: #export test
  Test
  (<| (_.context (%.name (name_of /._)))
      (_.test "Can derive functors automatically."
              true)))
