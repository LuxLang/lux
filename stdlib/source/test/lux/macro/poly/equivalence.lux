(.module:
  [lux #*
   data/text/format
   ["r" math/random (#+ Random)]
   ["_" test (#+ Test)]
   [abstract/monad (#+ do)]
   [abstract
    [equivalence (#+ Equivalence)]]
   [data
    ["." bit]
    ["." maybe]
    [number
     ["." int ("#@." number)]]
    ["." text]
    [collection
     ["." list]]]
   ["." macro
    [poly (#+ derived:)]]]
  {1
   ["." /]})

(type: Variant
  (#Case0 Bit)
  (#Case1 Int)
  (#Case2 Frac))

(type: #rec Recursive
  (#Number Frac)
  (#Addition Frac Recursive))

(type: Record
  {#bit Bit
   #int Int
   #frac Frac
   #text Text
   #maybe (Maybe Int)
   #list (List Int)
   #variant Variant
   #tuple [Int Frac Text]
   #recursive Recursive})

(def: gen-recursive
  (r.Random Recursive)
  (r.rec (function (_ gen-recursive)
           (r.or r.frac
                 (r.and r.frac gen-recursive)))))

(def: gen-record
  (r.Random Record)
  (do r.monad
    [size (:: @ map (n/% 2) r.nat)
     #let [gen-int (|> r.int (:: @ map (|>> int@abs (i/% +1,000,000))))]]
    ($_ r.and
        r.bit
        gen-int
        r.frac
        (r.unicode size)
        (r.maybe gen-int)
        (r.list size gen-int)
        ($_ r.or r.bit gen-int r.frac)
        ($_ r.and gen-int r.frac (r.unicode size))
        gen-recursive)))

(derived: equivalence (/.equivalence Record))

(def: #export test
  Test
  (<| (_.context (%name (name-of /._)))
      (do r.monad
        [sample gen-record
         #let [(^open "/@.") ..equivalence]]
        (_.test "Every instance equals itself."
                (/@= sample sample)))))
