(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   [math
    ["." random (#+ Random)]]
   [abstract
    [monad (#+ do)]
    [equivalence (#+ Equivalence)
     {[0 #poly]
      ["." /]}]]
   [data
    ["." bit]
    ["." maybe]
    [number
     ["n" nat]
     ["i" int]]
    ["." text]
    [collection
     ["." list]]]
   [macro
    [poly (#+ derived:)]]])

(type: Variant
  (#Case0 Bit)
  (#Case1 Int)
  (#Case2 Frac))

(type: #rec Recursive
  (#Number Frac)
  (#Addition Frac Recursive))

(type: Record
  {#bit Bit
   #int Int
   #frac Frac
   #text Text
   #maybe (Maybe Int)
   #list (List Int)
   #variant Variant
   #tuple [Int Frac Text]
   #recursive Recursive})

(def: gen-recursive
  (Random Recursive)
  (random.rec (function (_ gen-recursive)
                (random.or random.safe-frac
                           (random.and random.safe-frac
                                       gen-recursive)))))

(def: gen-record
  (Random Record)
  (do {! random.monad}
    [size (:: ! map (n.% 2) random.nat)
     #let [gen-int (|> random.int (:: ! map (|>> i.abs (i.% +1,000,000))))]]
    ($_ random.and
        random.bit
        gen-int
        random.safe-frac
        (random.unicode size)
        (random.maybe gen-int)
        (random.list size gen-int)
        ($_ random.or
            random.bit
            gen-int
            random.safe-frac)
        ($_ random.and
            gen-int
            random.safe-frac
            (random.unicode size))
        gen-recursive)))

(derived: equivalence
  (/.equivalence Record))

(def: #export test
  Test
  (<| (_.context (%.name (name-of /._)))
      (do random.monad
        [sample gen-record
         #let [(^open "/@.") ..equivalence]]
        (_.test "Every instance equals itself."
                (/@= sample sample)))))
