... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.only)
      ["?[1]" \\projection]]]]
   [math
    [number
     [/64
      ["n" natural]]]
    ["[0]" random]]
   [macro
    ["[0]" syntax]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" static]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(use "code_list:[0]" (list.equivalence code.equivalence))

(syntax.the (dup [times <code>.natural
                  what ?list.any])
  (when times
    0 (pure (list what))
    _ (let [it (` (..dup (, (code.natural (-- times))) (, what)))]
        (pure (list it it)))))

(the .public test
  Test
  (<| (_.covering /._)
      (`` (all _.and
               (,, (template.with [<expansion> <inner> <0> <1>]
                     [(_.coverage [<expansion>]
                        (and (<| static.expansion
                                 (monad.let meta.monad
                                   [it (<expansion> (` (..dup 0 <inner>)))]
                                   (pure (list (code.bit (code_list:= <0>
                                                                      it))))))
                             (<| static.expansion
                                 (monad.let meta.monad
                                   [it (<expansion> (` (..dup 1 <inner>)))]
                                   (pure (list (code.bit (code_list:= <1>
                                                                      it))))))))]

                     [[/.single   []           (list (` [])) (list (` (..dup 0 [])) (` (..dup 0 [])))]
                      [/.complete []           (list (` [])) (list (` []) (` []))]
                      [/.total    (..dup 0 []) (list (` [])) (list (` []) (` []))]]))
               (_.coverage [/.one]
                 (<| static.expansion
                     (monad.let meta.monad
                       [it (/.one (` (..dup 0 [])))]
                       (pure (list (code.bit (code.= (` [])
                                                     it)))))))
               (_.coverage [/.cannot_expand_to_more_than_1]
                 (<| static.expansion
                     (monad.let meta.monad
                       [it (meta.try (/.one (` (..dup 1 []))))]
                       (pure (list (code.bit (when it
                                               {try.#Failure error}
                                               (text.= /.cannot_expand_to_more_than_1 error)
                                               
                                               {try.#Success _}
                                               false)))))))
               (_.coverage [/.log_single!]
                 (exec
                   (,, (/.log_single! "omit" (..dup 0 [])))
                   (,, (/.log_single! (..dup 0 [])))
                   true))
               (_.coverage [/.log_complete!]
                 (exec
                   (,, (/.log_complete! "omit" (..dup 1 [])))
                   (,, (/.log_complete! (..dup 1 [])))
                   true))
               (_.coverage [/.log_total!]
                 (exec
                   (,, (/.log_total! "omit" (..dup 1 (..dup 0 []))))
                   (,, (/.log_total! (..dup 1 (..dup 0 []))))
                   true))
               (monad.let random.monad
                 [left random.natural
                  right random.natural
                  .let [expected (n.+ left right)]]
                 (_.coverage [/.let]
                   (/.let [<operands> (these left right)]
                     (n.= expected
                          (n.+ <operands>)))))
               ))))
