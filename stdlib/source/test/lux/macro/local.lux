(.require
 [library
  [lux (.except with)
   ["_" test (.only Test)]
   ["[0]" meta]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception]
    ["<>" parser (.only)
     ["<[0]>" code]]]
   [data
    [text
     ["%" \\format]]
    [collection
     ["[0]" list]
     [dictionary
      ["[0]" plist]]]]
   ["[0]" macro (.only)
    [syntax (.only syntax)]
    ["[0]" code]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" /]])

(/.let [!pow/2 (template (_ <scalar>)
                 [(n.* <scalar> <scalar>)])]
  (def pow/2
    (-> Nat Nat)
    (|>> !pow/2)))

(def macro_error
  (syntax (_ [macro <code>.any])
    (function (_ compiler)
      (case ((macro.expansion macro) compiler)
        {try.#Failure error}
        {try.#Success [compiler (list (code.text error))]}
        
        {try.#Success _}
        {try.#Failure "OOPS!"}))))

(def (constant output)
  (-> Code Macro)
  ("lux macro"
   (function (_ inputs lux)
     {try.#Success [lux (list output)]})))

(def with
  (syntax (_ [name (<code>.tuple (<>.and <code>.text <code>.text))
              constant <code>.any
              pre_remove <code>.bit
              body <code>.any])
    (macro.with_symbols [g!output]
      (do meta.monad
        [pop! (/.push (list [name (..constant constant)]))
         [module short] (meta.normal name)
         _ (if pre_remove
             (let [remove_macro! (is (-> .Module .Module)
                                     (revised .#definitions (plist.lacks short)))]
               (function (_ lux)
                 {try.#Success [(revised .#modules (plist.revised module remove_macro!) lux)
                                []]}))
             (in []))]
        (let [pre_expansion (` (let [(~ g!output) (~ body)]
                                 (exec (~ pop!)
                                   (~ g!output))))]
          (if pre_remove
            (macro.full_expansion pre_expansion)
            (in (list pre_expansion))))))))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected random.nat]
        (all _.and
             (_.coverage [/.push]
               (..with ["" "actual"] expected #0
                 (n.= expected (..actual))))
             (_.coverage [/.unknown_module]
               (exception.match? /.unknown_module
                                 (..macro_error
                                  (..with ["123yolo456" "actual"] expected #0
                                    (n.= expected (..actual))))))
             (_.coverage [/.cannot_shadow_definition]
               (exception.match? /.cannot_shadow_definition
                                 (..macro_error
                                  (..with ["" "with"] expected #0
                                    (n.= expected (..actual))))))
             (_.coverage [/.unknown_definition]
               (exception.match? /.unknown_definition
                                 (<| ..macro_error
                                     (..with ["" "actual"] expected #1)
                                     (n.= expected (..actual)))))
             (do !
               [scalar random.nat]
               (_.coverage [/.let]
                 (let [can_use_with_statements!
                       (n.= (all n.* scalar scalar)
                            (..pow/2 scalar))]
                   (and can_use_with_statements!
                        (/.let [pow/3 (template (_ <scalar>)
                                        [(all n.* <scalar> <scalar> <scalar>)])
                                pow/9 (template (_ <scalar>)
                                        [(pow/3 (pow/3 <scalar>))])]
                          (let [can_use_with_expressions!
                                (n.= (all n.* scalar scalar scalar)
                                     (pow/3 scalar))

                                can_refer!
                                (n.= (all n.*
                                          scalar scalar scalar
                                          scalar scalar scalar
                                          scalar scalar scalar)
                                     (pow/9 scalar))

                                can_shadow!
                                (let [pow/3 (function (_ scalar)
                                              (all n.+ scalar scalar scalar))]
                                  (n.= (all n.+ scalar scalar scalar)
                                       (pow/3 scalar)))]
                            (and can_use_with_expressions!
                                 can_refer!
                                 can_shadow!)))
                        ))))
             ))))
