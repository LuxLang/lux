... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except with)
   [abstract
    [monad (.only do)]
    ["<>" projection]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" stack
      ["[0]" property]]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   ["[0]" macro (.only)
    ["[0]" syntax]
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" binding]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(/.let [!pow/2 (template.macro (_ <scalar>)
                 [(n.* <scalar> <scalar>)])]
  (the pow/2
    (-> Natural
        Natural)
    (|>> !pow/2)))

(the macro_error
  (syntax.macro (_ [macro <code>.any])
    (function (_ compiler)
      (when ((expansion.complete macro) compiler)
        {try.#Failure error}
        {try.#Success [compiler (list (code.text error))]}
        
        {try.#Success _}
        {try.#Failure "OOPS!"}))))

(the (constant output)
  (-> Code
      Old_Macro)
  (macro.macro
    (function (_ inputs lux)
      {try.#Success [lux (stack output)]})))

(the with
  (syntax.old_macro (_ [name (<code>.tuple (<>.and <code>.text <code>.text))
                        constant <code>.any
                        pre_remove <code>.bit
                        body <code>.any])
                    (macro.with_names ['output]
                      (do meta.monad
                        [pop! (/.push (list [name (..constant constant)]))
                         [module proper] (binding.normal name)
                         _ (if pre_remove
                             (let [remove_macro! (is (-> .Module
                                                         .Module)
                                                     (revised .#definitions (property.lacks proper)))]
                               (function (_ lux)
                                 {try.#Success [(revised .#modules (property.revised module remove_macro!) lux)
                                                []]}))
                             (in []))]
                        (let [pre_expansion (` (let [(, 'output) (, body)]
                                                 (exec
                                                   (, pop!)
                                                   (, 'output))))]
                          (if pre_remove
                            (expansion.total pre_expansion)
                            (in (stack pre_expansion))))))))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected random.natural]
        (all _.and
             (_.coverage [/.push]
               (..with ["" "actual"] expected #0
                 (n.= expected (..actual))))
             (_.coverage [/.unknown_module]
               (exception.is? /.unknown_module
                              (..macro_error
                               (..with ["123yolo456" "actual"] expected #0
                                 (n.= expected (..actual))))))
             (_.coverage [/.cannot_shadow_definition]
               (exception.is? /.cannot_shadow_definition
                              (..macro_error
                               (..with ["" "with"] expected #0
                                 (n.= expected (..actual))))))
             (_.coverage [/.unknown_definition]
               (exception.is? /.unknown_definition
                              (<| ..macro_error
                                  (..with ["" "actual"] expected #1)
                                  (n.= expected (..actual)))))
             (do !
               [scalar random.natural]
               (_.coverage [/.let /.with]
                 (let [can_use_with_statements!
                       (n.= (all n.* scalar scalar)
                            (..pow/2 scalar))]
                   (and can_use_with_statements!
                        (/.let [pow/3 (template.macro (_ <scalar>)
                                        [(all n.* <scalar> <scalar> <scalar>)])
                                pow/9 (template.macro (_ <scalar>)
                                        [(pow/3 (pow/3 <scalar>))])]
                          (let [can_use_with_expressions!
                                (n.= (all n.* scalar scalar scalar)
                                     (pow/3 scalar))

                                can_refer!
                                (n.= (all n.*
                                          scalar scalar scalar
                                          scalar scalar scalar
                                          scalar scalar scalar)
                                     (pow/9 scalar))

                                can_shadow!
                                (let [pow/3 (function (_ scalar)
                                              (all n.+ scalar scalar scalar))]
                                  (n.= (all n.+ scalar scalar scalar)
                                       (pow/3 scalar)))]
                            (and can_use_with_expressions!
                                 can_refer!
                                 can_shadow!)))
                        ))))
             ))))
