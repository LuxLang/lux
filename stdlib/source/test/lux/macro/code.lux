(.module:
  [lux #*
   ["_" test (#+ Test)]
   [math
    ["." random (#+ Random) ("#@." monad)]]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]]}]
   [control
    ["." try (#+ Try)]]
   [data
    ["." product]
    ["." text]
    [number
     ["n" nat]]
    [collection
     ["." list ("#@." functor)]]]
   [tool
    [compiler
     [language
      [lux
       ["." syntax]]]]]]
  {1
   ["." /]})

(def: random-text
  (Random Text)
  (random.ascii/alpha 10))

(def: random-name
  (Random Name)
  (random.and ..random-text ..random-text))

(def: (random-sequence random)
  (All [a] (-> (Random a) (Random (List a))))
  (do {@ random.monad}
    [size (|> random.nat (:: @ map (n.% 3)))]
    (random.list size random)))

(def: (random-record random)
  (All [a] (-> (Random a) (Random (List [a a]))))
  (do {@ random.monad}
    [size (|> random.nat (:: @ map (n.% 3)))]
    (random.list size (random.and random random))))

(def: random
  (Random Code)
  (random.rec
   (function (_ random)
     ($_ random.either
         (random@map /.bit random.bit)
         (random@map /.nat random.nat)
         (random@map /.int random.int)
         (random@map /.rev random.rev)
         (random@map /.frac random.safe-frac)
         (random@map /.text ..random-text)
         (random@map /.identifier ..random-name)
         (random@map /.tag ..random-name)
         (random@map /.form (..random-sequence random))
         (random@map /.tuple (..random-sequence random))
         (random@map /.record (..random-record random))
         ))))

(def: (read source-code)
  (-> Text (Try Code))
  (let [parse (syntax.parse ""
                            syntax.no-aliases
                            (text.size source-code))
        start (: Source
                 [.dummy-cursor 0 source-code])]
    (case (parse start)
      (#.Left [end error])
      (#try.Failure error)
      
      (#.Right [end lux-code])
      (#try.Success lux-code))))

(def: (replace-simulation [original substitute])
  (-> [Code Code] (Random [Code Code]))
  (random.rec
   (function (_ replace-simulation)
     (let [for-sequence (: (-> (-> (List Code) Code) (Random [Code Code]))
                           (function (_ to-code)
                             (do {@ random.monad}
                               [parts (..random-sequence replace-simulation)]
                               (wrap [(to-code (list@map product.left parts))
                                      (to-code (list@map product.right parts))]))))]
       ($_ random.either
           (random@wrap [original substitute])
           (do {@ random.monad}
             [sample (random.filter (|>> (:: /.equivalence = original) not)
                                    ($_ random.either
                                        (random@map /.bit random.bit)
                                        (random@map /.nat random.nat)
                                        (random@map /.int random.int)
                                        (random@map /.rev random.rev)
                                        (random@map /.frac random.safe-frac)
                                        (random@map /.text ..random-text)
                                        (random@map /.identifier ..random-name)
                                        (random@map /.tag ..random-name)))]
             (wrap [sample sample]))
           (for-sequence /.form)
           (for-sequence /.tuple)
           (do {@ random.monad}
             [parts (..random-sequence replace-simulation)]
             (wrap [(/.record (let [parts' (list@map product.left parts)]
                                (list.zip2 parts' parts')))
                    (/.record (let [parts' (list@map product.right parts)]
                                (list.zip2 parts' parts')))]))
           )))))

(def: #export test
  Test
  (<| (_.covering /._)
      ($_ _.and
          (_.with-cover [/.equivalence]
            ($equivalence.spec /.equivalence ..random))
          (_.with-cover [/.to-text]
            (`` ($_ _.and
                    (~~ (template [<coverage> <random> <tag>]
                          [(do {@ random.monad}
                             [value <random>]
                             (_.cover [<coverage>]
                                      (and (case (..read (/.to-text (<coverage> value)))
                                             (#try.Success lux-code)
                                             (:: /.equivalence =
                                                 lux-code
                                                 (<coverage> value))
                                             
                                             (#try.Failure error)
                                             false)
                                           (:: /.equivalence =
                                               [.dummy-cursor (<tag> value)]
                                               (<coverage> value)))))]

                          [/.bit random.bit #.Bit]
                          [/.nat random.nat #.Nat]
                          [/.int random.int #.Int]
                          [/.rev random.rev #.Rev]
                          [/.frac random.safe-frac #.Frac]
                          [/.text ..random-text #.Text]
                          [/.tag ..random-name #.Tag]
                          [/.identifier ..random-name #.Identifier]
                          [/.form (..random-sequence ..random) #.Form]
                          [/.tuple (..random-sequence ..random) #.Tuple]
                          [/.record (..random-record ..random) #.Record]
                          ))
                    (~~ (template [<coverage> <random> <tag>]
                          [(do {@ random.monad}
                             [value <random>]
                             (_.cover [<coverage>]
                                      (and (case (..read (/.to-text (<coverage> value)))
                                             (#try.Success lux-code)
                                             (:: /.equivalence =
                                                 lux-code
                                                 (<coverage> value))
                                             
                                             (#try.Failure error)
                                             false)
                                           (:: /.equivalence =
                                               [.dummy-cursor (<tag> ["" value])]
                                               (<coverage> value)))
                                      ))]

                          [/.local-tag        ..random-text #.Tag]
                          [/.local-identifier ..random-text #.Identifier]
                          )))))
          (do {@ random.monad}
            [[original substitute] (random.and ..random ..random)
             [sample expected] (..replace-simulation [original substitute])]
            (_.cover [/.replace]
                     (:: /.equivalence =
                         expected
                         (/.replace original substitute sample))))
          )))
