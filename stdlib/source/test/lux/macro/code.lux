(.module:
  [lux #*
   data/text/format
   [control/monad (#+ do)]
   ["r" math/random (#+ Random)]
   ["_" test (#+ Test)]
   [data
    ["." text ("#@." equivalence)]]]
  {1
   ["." /]})

(def: #export test
  Test
  (`` ($_ _.and
          (~~ (do-template [<expr> <text>]
                [(_.test (format "Can produce Code node: " <text>)
                         (and (text@= <text> (/.to-text <expr>))
                              (:: /.equivalence = <expr> <expr>)))]

                [(/.bit #1)                                  "#1"]
                [(/.bit #0)                                  "#0"]
                [(/.nat 123)                                 "123"]
                [(/.int +123)                                "+123"]
                [(/.frac +123.0)                             "+123.0"]
                [(/.text "1234")                             (format text.double-quote "1234" text.double-quote)]
                [(/.local-tag "lol")                         "#lol"]
                [(/.tag ["yolo" "lol"])                      "#yolo.lol"]
                [(/.local-identifier "lol")                  "lol"]
                [(/.identifier ["yolo" "lol"])               "yolo.lol"]
                [(/.form (list (/.bit #1) (/.int +123)))     "(#1 +123)"]
                [(/.tuple (list (/.bit #1) (/.int +123)))    "[#1 +123]"]
                [(/.record (list [(/.bit #1) (/.int +123)])) "{#1 +123}"]
                )))))
