(.module:
  [lux #*
   data/text/format
   [abstract/monad (#+ do)]
   ["r" math/random (#+ Random)]
   ["_" test (#+ Test)]
   [data
    ["." text ("#@." equivalence)]]]
  {1
   ["." /]})

(def: #export test
  Test
  (<| (_.context (%name (name-of /._)))
      (do r.monad
        [bit r.bit
         nat r.nat
         int r.int
         rev r.rev
         above (:: @ map (i/% +100) r.int)
         below (:: @ map (i/% +100) r.int)
         #let [frac (|> below
                        (i// +100)
                        .int-to-frac
                        (f/+ (.int-to-frac above))
                        (f/* -1.0))]
         text (r.ascii 10)
         short (r.ascii/alpha 10)
         module (r.ascii/alpha 10)
         #let [name [module short]]]
        (`` ($_ _.and
                (~~ (template [<desc> <code> <text>]
                      [(let [code <code>]
                         (_.test (format "Can produce " <desc> " code node.")
                                 (and (text@= <text> (/.to-text code))
                                      (:: /.equivalence = code code))))]

                      ["bit"              (/.bit bit)                                 (%b bit)]
                      ["nat"              (/.nat nat)                                 (%n nat)]
                      ["int"              (/.int int)                                 (%i int)]
                      ["rev"              (/.rev rev)                                 (%r rev)]
                      ["frac"             (/.frac frac)                               (%f frac)]
                      ["text"             (/.text text)                               (%t text)]
                      ["local-ltag"       (/.local-tag short)                         (format "#" short)]
                      ["lag"              (/.tag [module short])                      (format "#" (%name name))]
                      ["local-identifier" (/.local-identifier short)                  short]
                      ["identifier"       (/.identifier [module short])               (%name name)]
                      ["form"             (/.form (list (/.bit bit) (/.int int)))     (format "(" (%b bit) " " (%i int) ")")]
                      ["tuple"            (/.tuple (list (/.bit bit) (/.int int)))    (format "[" (%b bit) " " (%i int) "]")]
                      ["record"           (/.record (list [(/.bit bit) (/.int int)])) (format "{" (%b bit) " " (%i int) "}")]
                      )))))))
