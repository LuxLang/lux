... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" bit]
    [collection
     ["[0]" stack]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" natural]]]
   [macro
    ["[0]" syntax]
    ["[0]" expansion]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(/.let [(!pow/2 <scalar>)
        [(natural.* <scalar> <scalar>)]]
  (the pow/2
    (-> Natural Natural)
    (|>> !pow/2)))

(the macro_error
  (syntax.macro (_ [macro <code>.any])
    (function (_ compiler)
      (when ((expansion.complete macro) compiler)
        {try.#Failure error}
        {try.#Success [compiler (list (code.text error))]}
        
        {try.#Success _}
        {try.#Failure "OOPS!"}))))

(the !n/+
  (/.macro (_ <left> <right>)
    [(natural.+ <left> <right>)]))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [left random.natural
         mid random.natural
         right random.natural]
        (expansion.let [<module> (these [.5 -4 +3 2 #1 #0 c b "a"])
                        <module>' ".5-4+32#1#0cba"
                        <proper> (these ["a" b c #0 #1 2 +3 -4 .5])
                        <proper>' "abc#0#12+3-4.5"]
          (all _.and
               (do random.monad
                 [left random.natural
                  right random.natural]
                 (_.coverage [/.macro]
                   (natural.= (natural.+ left right)
                              (!n/+ left right))))
               (_.coverage [/.with]
                 (let [bits (`` (stack (,, (/.with [_]
                                             [true]

                                             [0] [1] [2]
                                             ))))]
                   (and (natural.= 3 (stack.size bits))
                        (stack.every? (bit.= true) bits))))
               (_.coverage [/.spliced]
                 (by (stack.equivalence natural.equivalence) =
                     (stack left mid right)
                     (`` (stack (,, (/.spliced [left mid right]))))))
               (_.coverage [/.amount]
                 (when (/.amount [left mid right])
                   3 true
                   _ false))
               (_.coverage [/.text]
                 (when (/.text <proper>)
                   <proper>' true
                   _ false))
               (_.coverage [/.name]
                 (and (when (`` (name (,, (/.name <proper>))))
                        ["" <proper>'] true
                        _ false)
                      (when (`` (name (,, (/.name <module> <proper>))))
                        [<module>' <proper>'] true
                        _ false)
                      ))
               (_.coverage [/.with_locals]
                 (/.with_locals [var0 var1]
                   (let [var0 left
                         var1 right]
                     (and (natural.= left var0)
                          (natural.= right var1)))))
               (do !
                 [scalar random.natural]
                 (_.coverage [/.let]
                   (let [can_use_with_statements!
                         (natural.= (all natural.* scalar scalar)
                                    (..pow/2 scalar))]
                     (and can_use_with_statements!
                          (/.let [(pow/3 <scalar>)
                                  [(all natural.* <scalar> <scalar> <scalar>)]

                                  (pow/9 <scalar>)
                                  [(pow/3 (pow/3 <scalar>))]]
                            (let [can_use_with_expressions!
                                  (natural.= (all natural.* scalar scalar scalar)
                                             (pow/3 scalar))

                                  can_refer!
                                  (natural.= (all natural.*
                                                  scalar scalar scalar
                                                  scalar scalar scalar
                                                  scalar scalar scalar)
                                             (pow/9 scalar))

                                  can_shadow!
                                  (let [pow/3 (function (_ scalar)
                                                (all natural.+ scalar scalar scalar))]
                                    (natural.= (all natural.+ scalar scalar scalar)
                                               (pow/3 scalar)))]
                              (and can_use_with_expressions!
                                   can_refer!
                                   can_shadow!)))
                          ))))
               (_.coverage [/.irregular_arguments]
                 (/.let [(arity/3 <0> <1> <2>)
                         [""]]
                   (exception.is? /.irregular_arguments
                                  (macro_error (arity/3 "a" "b")))))
               )))
      ))
