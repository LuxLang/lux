... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [data
    ["[0]" text]
    ["[0]" binary (.only)
     ["![1]" \\injection]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" datum (.only)
     ["[2][1]" \\test]]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [before /.random
         datum datum.random])
      (_.for [/.Stack /.random])
      (all _.and
           (_.for [/.equivalence /.=]
                  (static.when (identical? /.equivalence /.=)
                    (equivalenceT.spec /.equivalence /.random)))
           
           (_.coverage [/.empty /.catch]
             (not (/.= /.empty /.catch)))
           (_.coverage [/.push /.pop]
             (let [stack (/.push datum before)
                   
                   push_matters!
                   (not (/.= before stack))

                   stack (/.pop datum stack)

                   pop_matters!
                   (/.= before stack)]
               (and push_matters!
                    pop_matters!)))
           (_.coverage [/.major]
             (let [after (/.push datum before)]
               (identical? after (/.major after before))))
           (monad.let [! random.monad]
             [sample_0 /.random
              sample_1 /.random]
             (_.coverage [/.as_binary]
               (bit.= (/.= sample_0
                           sample_1)
                      (binary.= (!binary.value /.as_binary sample_0)
                                (!binary.value /.as_binary sample_1)))))
           (monad.let [! random.monad]
             [sample_0 /.random]
             (_.coverage [/.length]
               (n.= /.length
                    (binary.size (!binary.value /.as_binary sample_0)))))
           (monad.let [! random.monad]
             [sample_0 /.random
              sample_1 /.random]
             (_.coverage [/.as_text]
               (bit.= (/.= sample_0
                           sample_1)
                      (text.= (/.as_text sample_0)
                              (/.as_text sample_1)))))
           )))
