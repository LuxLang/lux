(.module:
  [lux (#- Type type)
   ["." host (#+ import:)]
   [abstract/monad (#+ do)]
   [control
    ["." io (#+ IO)]
    ["." try (#+ Try)]
    [concurrency
     ["." atom]]
    [security
     ["!" capability]]]
   [data
    [binary (#+ Binary)]
    [number
     ["i" int]]
    ["." text
     ["%" format (#+ format)]]
    [format
     [".F" binary]]
    [collection
     ["." array]
     ["." dictionary]
     ["." row]]]
   [world
    ["." file (#+ File)]]
   [math
    ["." random (#+ Random) ("#@." monad)]]
   ["_" test (#+ Test)]]
  {1
   ["." / #_
    ["#." loader (#+ Library)]
    ["#." version]
    ["#." modifier ("#@." monoid)]
    ["#." field]
    ["#." method]
    ["#." class]
    ["#." attribute
     ["#/." code]]
    ["#." constant
     ["#/." pool]]
    [encoding
     ["#." name]]
    ["#." instruction
     ["#/." condition (#+ Environment)]]
    ["#." type (#+ Type)
     [category (#+ Value)]]]})

## (def: (write-class! name bytecode)
##   (-> Text Binary (IO Text))
##   (let [file-path (format name ".class")]
##     (do io.monad
##       [outcome (do (try.with @)
##                  [file (: (IO (Try (File IO)))
##                           (file.get-file io.monad file.system file-path))]
##                  (!.use (:: file over-write) bytecode))]
##       (wrap (case outcome
##               (#try.Success definition)
##               (format "Wrote: " (%.text file-path))

##               (#try.Failure error)
##               error)))))

(import: #long java/lang/String)

(import: #long java/lang/reflect/Method
  (invoke [java/lang/Object [java/lang/Object]] #try java/lang/Object))

(import: #long (java/lang/Class c)
  (getDeclaredMethod [java/lang/String [(java/lang/Class [? < java/lang/Object])]] java/lang/reflect/Method))

(import: #long java/lang/Object
  (getClass [] (java/lang/Class java/lang/Object))
  (toString [] java/lang/String))

(import: #long java/lang/Long
  (#static TYPE (java/lang/Class java/lang/Long)))

(def: class-name
  (Random Text)
  (do random.monad
    [super-package (random.ascii/lower-alpha 10)
     package (random.ascii/lower-alpha 10)
     name (random.ascii/upper-alpha 10)]
    (wrap (format super-package
                  /name.external-separator package
                  /name.external-separator name))))

(def: type
  (Random (Type Value))
  (random.rec
   (function (_ type)
     ($_ random.either
         (random@wrap /type.boolean)
         (random@wrap /type.byte)
         (random@wrap /type.short)
         (random@wrap /type.int)
         (random@wrap /type.long)
         (random@wrap /type.float)
         (random@wrap /type.double)
         (random@wrap /type.char)
         (random@map (function (_ name) (/type.class name (list))) ..class-name)
         (random@map /type.array type)
         ))))

(def: field
  (Random [Text (Type Value)])
  ($_ random.and
      (random.ascii/lower-alpha 10)
      ..type
      ))

(def: (get-method name class)
  (-> Text (java/lang/Class java/lang/Object) java/lang/reflect/Method)
  (java/lang/Class::getDeclaredMethod name
                                      (host.array (java/lang/Class java/lang/Object) 0)
                                      class))

(def: $Long (/type.class "java.lang.Long" (list)))
(def: $Object (/type.class "java.lang.Object" (list)))

(def: method
  Test
  (do random.monad
    [class-name ..class-name
     method-name (random.ascii/upper-alpha 10)
     expected random.int
     #let [inputsJT (list)
           outputJT $Object]]
    (_.test "Can compile a method."
            (let [bytecode (|> (/class.class /version.v6_0 /class.public
                                             (/name.internal class-name)
                                             (/name.internal "java.lang.Object")
                                             (list)
                                             (list)
                                             (list (/method.method ($_ /modifier@compose
                                                                       /method.public
                                                                       /method.static)
                                                                   method-name
                                                                   (/type.method [inputsJT outputJT (list)])
                                                                   (list)
                                                                   (do /instruction.monad
                                                                     [_ (/instruction.ldc/long (/constant.long expected))
                                                                      _ (/instruction.invokestatic $Long "valueOf"
                                                                                                   (/type.method [(list /type.long) $Long (list)]))]
                                                                     /instruction.areturn)))
                                             (row.row))
                               (binaryF.run /class.writer))
                  loader (/loader.memory (/loader.new-library []))]
              (case (do try.monad
                      [_ (/loader.define class-name bytecode loader)
                       class (io.run (/loader.load class-name loader))
                       method (host.try (get-method method-name class))
                       output (java/lang/reflect/Method::invoke (host.null) (host.array java/lang/Object 0) method)]
                      (wrap (:coerce Int output)))
                (#try.Success actual)
                (i.= expected actual)
                
                (#try.Failure error)
                false)))))

(def: class
  Test
  (do random.monad
    [class-name ..class-name
     [field0 type0] ..field
     [field1 type1] ..field
     #let [input (/class.class /version.v6_0 /class.public
                               (/name.internal class-name)
                               (/name.internal "java.lang.Object")
                               (list (/name.internal "java.io.Serializable")
                                     (/name.internal "java.lang.Runnable"))
                               (list (/field.field /field.public field0 type0 (row.row))
                                     (/field.field /field.public field1 type1 (row.row)))
                               (list)
                               (row.row))
           bytecode (binaryF.run /class.writer input)
           loader (/loader.memory (/loader.new-library []))]]
    ($_ _.and
        (_.test "Can generate a class."
                (case (do try.monad
                        [_ (/loader.define class-name bytecode loader)]
                        (io.run (/loader.load class-name loader)))
                  (#try.Success definition)
                  true
                  
                  (#try.Failure _)
                  false))
        )))

(def: #export test
  Test
  (<| (_.context (%.name (name-of .._)))
      ($_ _.and
          ..class
          ..method
          )))
