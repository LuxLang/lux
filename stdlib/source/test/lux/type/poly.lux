... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" try]]
   ["[0]" function]
   [data
    ["[0]" bit]
    ["[0]" text]
    ["[0]" product]]
   [math
    ["[0]" random]
    [number
     ["[0]" natural]
     ["[0]" integer]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]
    ["[0]" syntax]]
   ["[0]" type
    ["?[1]" \\projection]]
   ["[0]" meta (.only)
    ["[0]" static]
    ["[0]" code (.only)
     ["?[1]" \\projection]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(every (Constant of)
  (-> of
      of))

(the expansion_error
  (syntax.macro (_ [it ?code.any])
    (do meta.monad
      [it (meta.try (expansion.single it))]
      (when it
        {try.#Success _}
        (meta.failure "")

        {try.#Failure error}
        (in (stack (code.text error)))))))

(the (sum left right)
  (for_any (_ left right)
    (-> (Constant left) (Constant right)
        (Constant (Or left right))))
  (function (_ it)
    (when it
      {#0 it} {#0 (left it)}
      {#1 it} {#1 (right it)})))

(the (product left right)
  (for_any (_ left right)
    (-> (Constant left) (Constant right)
        (Constant (And left right))))
  (function (_ it)
    [(left (product.left it))
     (right (product.right it))]))

(expansion.let [<bit> (static.random_bit)
                <natural> (static.random_natural)
                <integer> (static.random_integer)]
  (these (the constant
           (/.macro
             (` ..Constant)
             [/.#sum (/.flat [/.#on_each (` |>)
                              /.#on_both (` ..sum)
                              /.#on_whole (` |>)])
              /.#product (/.nested (` ..product))
              /.#function /.not_applicable
              /.#reification {.#None}
              /.#recursive (function (_ code ['*self body]) {try.#Failure ""})
              /.#recursion {.#None}
              /.#any {.#Some (` function.identity)}
              /.#polymorphic {.#None}
              /.#parameter {.#None}
              /.#specializations (stack [Bit (` (function.constant <bit>))]
                                        [Natural (` (function.constant <natural>))])]))

         (the .public test
           Test
           (<| (_.covering /._)
               (do [! random.monad]
                 [])
               (_.for [/.Polytypic
                       /.#sum /.#product /.#function
                       /.#reification /.#recursive
                       /.#recursion /.#any
                       /.#polymorphic /.#parameter
                       /.#specializations])
               (all _.and
                    (_.coverage [/.macro]
                      (and (bit.= <bit> ((constant Bit) (not <bit>)))
                           (natural.= <natural> ((constant Natural) (++ <natural>)))
                           (integer.= <integer> ((constant Integer) <integer>))))
                    (_.coverage [/.not_applicable /.impossible]
                      (|> (..expansion_error (constant (-> Natural Integer)))
                          (text.contains? /.impossible)))
                    (<| (_.for [/.Complex
                                /.#Nested /.#Flat])
                        (all _.and
                             (_.coverage [/.nested]
                               (let [[actual_left actual_right] ((constant (And Bit Natural)) [(not <bit>) (++ <natural>)])]
                                 (and (bit.= <bit> actual_left)
                                      (natural.= <natural> actual_right))))
                             (_.coverage [/.Flat
                                          /.#on_each /.#on_both /.#on_whole

                                          /.flat]
                               (let [constant (..constant (Or Bit Natural))]
                                 (and (when (constant {#0 (not <bit>)})
                                        {#0 actual}
                                        (bit.= <bit> actual)

                                        else
                                        false)
                                      (when (constant {#1 (++ <natural>)})
                                        {#1 actual}
                                        (natural.= <natural> actual)

                                        else
                                        false))))
                             ))
                    ))))
  )
