(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    [abstract
     [monad {"+" [do]}]]
    [control
     ["[0]" try]
     ["[0]" exception]]
    [data
     ["[0]" text ("[1]\[0]" equivalence)
      ["%" format {"+" [format]}]]]
    [math
     ["[0]" random {"+" [Random]}]
     [number
      ["n" nat]]]]]
  [\\library
   ["[0]" /]])

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Dynamic])
      (do random.monad
        [expected random.nat]
        ($_ _.and
            (_.cover [/.:dynamic /.:static]
                     (case (/.:static Nat (/.:dynamic expected))
                       (#try.Success actual)
                       (n.= expected actual)
                       
                       (#try.Failure _)
                       false))
            (_.cover [/.wrong_type]
                     (case (/.:static Text (/.:dynamic expected))
                       (#try.Success actual)
                       false
                       
                       (#try.Failure error)
                       (exception.match? /.wrong_type error)))
            (_.cover [/.format]
                     (case (/.format (/.:dynamic expected))
                       (#try.Success actual)
                       (text\= (%.nat expected) actual)
                       
                       (#try.Failure _)
                       false))
            ))))
