(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try]
    ["." exception]]
   [data
    ["." text ("#\." equivalence)
     ["%" format (#+ format)]]]
   [math
    ["." random (#+ Random)]
    [number
     ["n" nat]]]]
  {1
   ["." /]})

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Dynamic])
      (do random.monad
        [expected random.nat]
        ($_ _.and
            (_.cover [/.:dynamic /.:check]
                     (case (/.:check Nat (/.:dynamic expected))
                       (#try.Success actual)
                       (n.= expected actual)
                       
                       (#try.Failure _)
                       false))
            (_.cover [/.wrong_type]
                     (case (/.:check Text (/.:dynamic expected))
                       (#try.Success actual)
                       false
                       
                       (#try.Failure error)
                       (exception.match? /.wrong_type error)))
            (_.cover [/.format]
                     (case (/.format (/.:dynamic expected))
                       (#try.Success actual)
                       (text\= (%.nat expected) actual)
                       
                       (#try.Failure _)
                       false))
            ))))
