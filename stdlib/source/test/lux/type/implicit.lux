(.module:
  [lux #*
   ["%" data/text/format]
   ["_" test (#+ Test)]
   [abstract
    [equivalence (#+)]
    [functor (#+)]
    [monad (#+ do)]
    ["." enum]]
   [data
    ["." bit ("#\." equivalence)]
    [number
     ["n" nat]]
    [collection
     ["." list]]]
   [math
    ["." random (#+ Random)]]]
  {1
   ["." /]})

(def: #export test
  Test
  (<| (_.context (%.name (name-of /._)))
      (do {! random.monad}
        [#let [digit (:: ! map (n.% 10) random.nat)]
         left digit
         right digit
         #let [start (n.min left right)
               end (n.max left right)]]
        ($_ _.and
            (_.test "Can automatically select first-order structures."
                    (let [(^open "list\.") (list.equivalence n.equivalence)]
                      (and (bit\= (:: n.equivalence = left right)
                                  (/.::: = left right))
                           (list\= (:: list.functor map inc (enum.range n.enum start end))
                                   (/.::: map inc (enum.range n.enum start end))))))
            (_.test "Can automatically select second-order structures."
                    (/.::: =
                      (enum.range n.enum start end)
                      (enum.range n.enum start end)))
            (_.test "Can automatically select third-order structures."
                    (let [lln (/.::: map (enum.range n.enum start)
                                (enum.range n.enum start end))]
                      (/.::: = lln lln)))
            ))))
