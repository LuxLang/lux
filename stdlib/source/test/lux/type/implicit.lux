(.module:
  [lux #*
   ["%" data/text/format]
   ["_" test (#+ Test)]
   [abstract
    [equivalence (#+)]
    [functor (#+)]
    [monad (#+ do)]]
   [data
    ["." bit ("#@." equivalence)]
    [number
     ["n" nat]]
    [collection
     ["." list]]]
   [math
    ["." random (#+ Random)]]]
  {1
   ["." /]})

(def: #export test
  Test
  (<| (_.context (%.name (name-of /._)))
      (do {@ random.monad}
        [#let [digit (:: @ map (n.% 10) random.nat)]
         left digit
         right digit
         #let [start (n.min left right)
               end (n.max left right)]]
        ($_ _.and
            (_.test "Can automatically select first-order structures."
                    (let [(^open "list@.") (list.equivalence n.equivalence)]
                      (and (bit@= (:: n.equivalence = left right)
                                  (/.::: = left right))
                           (list@= (:: list.functor map inc (list.n/range start end))
                                   (/.::: map inc (list.n/range start end))))))
            (_.test "Can automatically select second-order structures."
                    (/.::: =
                      (list.n/range start end)
                      (list.n/range start end)))
            (_.test "Can automatically select third-order structures."
                    (let [lln (/.::: map (list.n/range start)
                                (list.n/range start end))]
                      (/.::: = lln lln)))
            ))))
