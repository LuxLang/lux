... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" equality
     ["[1]T" \\test]]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" monad)]]
   [macro
    ["[0]" expansion]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" //]]])

(every (Generalized_Record foo bar baz)
  (Record
   [:foo foo
    :bar bar
    :baz baz]))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (expansion.let [random_type (these (static.random //.code
                                                             (all random.either
                                                                  (random:pure Bit)
                                                                  (random:pure Natural)
                                                                  (random:pure Integer)
                                                                  (random:pure Revolution)
                                                                  (random:pure Decimal)
                                                                  (random:pure Text))))
                           parameter random_type
                           return random_type

                           foo random_type
                           bar random_type
                           baz random_type]
             (let [(open "//:[0]") //.equality]
               (all _.and
                    (_.coverage [/.member]
                      (and (//.= Any (/.member .:None [parameter]))
                           (//.= parameter (/.member .:Some [parameter]))))
                    (_.coverage [/.only]
                      (and (//.= foo
                                 (/.only [foo bar baz] [..:foo]))
                           (//.= bar
                                 (/.only [foo bar baz] [..:bar]))
                           (//.= baz
                                 (/.only [foo bar baz] [..:baz]))

                           (//.= (And foo bar)
                                 (/.only [foo bar baz] [..:foo ..:bar]))
                           (//.= (And foo baz)
                                 (/.only [foo bar baz] [..:foo ..:baz]))
                           (//.= (And bar baz)
                                 (/.only [foo bar baz] [..:bar ..:baz]))))
                    (_.coverage [/.except]
                      (and (//.= (And bar baz)
                                 (/.except [foo bar baz] [..:foo]))
                           (//.= (And foo baz)
                                 (/.except [foo bar baz] [..:bar]))
                           (//.= (And foo bar)
                                 (/.except [foo bar baz] [..:baz]))

                           (//.= baz
                                 (/.except [foo bar baz] [..:foo ..:bar]))
                           (//.= bar
                                 (/.except [foo bar baz] [..:foo ..:baz]))
                           (//.= foo
                                 (/.except [foo bar baz] [..:bar ..:baz]))))
                    )))
           )))
