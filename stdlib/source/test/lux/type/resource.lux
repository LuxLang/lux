(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["r" math/random (#+ Random)]
   ["_" test (#+ Test)]
   [abstract
    [monad
     [indexed (#+ do)]]]
   [control
    ["." io]]
   [data
    [number
     ["n" nat]]]]
  {1
   ["." / (#+ Res)]})

(def: #export test
  Test
  (<| (_.context (%.name (name-of /._)))
      ($_ _.and
          (_.test "Can produce and consume keys in an ordered manner."
                  (<| (n.= (n.+ 123 456))
                      io.run
                      /.run-sync
                      (do /.sync
                        [res|left (/.ordered-sync 123)
                         res|right (/.ordered-sync 456)
                         right (/.read-sync res|right)
                         left (/.read-sync res|left)]
                        (wrap (n.+ left right)))))
          (_.test "Can exchange commutative keys."
                  (<| (n.= (n.+ 123 456))
                      io.run
                      /.run-sync
                      (do /.sync
                        [res|left (/.commutative-sync 123)
                         res|right (/.commutative-sync 456)
                         _ (/.exchange-sync [1 0])
                         left (/.read-sync res|left)
                         right (/.read-sync res|right)]
                        (wrap (n.+ left right)))))
          (_.test "Can group and un-group keys."
                  (<| (n.= (n.+ 123 456))
                      io.run
                      /.run-sync
                      (do /.sync
                        [res|left (/.commutative-sync 123)
                         res|right (/.commutative-sync 456)
                         _ (/.group-sync 2)
                         _ (/.un-group-sync 2)
                         right (/.read-sync res|right)
                         left (/.read-sync res|left)]
                        (wrap (n.+ left right)))))
          )))
