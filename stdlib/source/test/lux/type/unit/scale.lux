... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except natural)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]
     ["i" integer]
     ["[0]" fraction]]]
   [macro
    ["[0]" syntax]
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" code]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" //]]])

(the natural
  (syntax.macro (_ [])
    (by meta.monad each
        (|>> code.natural list)
        meta.seed)))

(expansion.let [<from> (..natural)
                <factor> (..natural)
                <to> (n.* <factor> <from>)]
  (these (the how (/.scale [fraction.#denominator <from>
                            fraction.#numerator <to>]))
         (the How (/.type how))

         (the how::from <from>)
         (the how::to <to>))
  )

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Scale
              /.up /.down /.fraction])
      (do [! random.monad]
        [small (|> random.integer
                   (by ! each (i.% +1,000))
                   (by ! each (by //.meter in)))
         large (|> random.integer
                   (by ! each (i.% +1,000))
                   (by ! each (i.* +1,000,000,000))
                   (by ! each (by //.meter in)))
         .let [(open "meter#[0]") (is (Equivalence (//.Measure Any //.Meter))
                                      //.equivalence)]
         unscaled (|> random.integer
                      (by ! each (|>> (i.% +1,000)
                                      (i.* (.integer how::to))
                                      (by //.meter in))))]
        (`` (all _.and
                 (,, (template.with [<type> <scale>]
                       [(_.coverage [<type> <scale>]
                          (|> small
                              (by <scale> up)
                              (is (//.Measure <type> //.Meter))
                              (by <scale> down)
                              (is (//.Measure Any //.Meter))
                              (meter#= small)))]

                       [/.Kilo /.kilo]
                       [/.Mega /.mega]
                       [/.Giga /.giga]
                       ))
                 (,, (template.with [<type> <scale>]
                       [(_.coverage [<type> <scale>]
                          (|> large
                              (by <scale> up)
                              (is (//.Measure <type> //.Meter))
                              (by <scale> down)
                              (is (//.Measure Any //.Meter))
                              (meter#= large)))]

                       [/.Milli /.milli]
                       [/.Micro /.micro]
                       [/.Nano /.nano]
                       ))
                 (_.coverage [/.re_scaled]
                   (|> large (is (//.Measure Any //.Meter))
                       (by /.kilo up) (is (//.Measure /.Kilo //.Meter))
                       (/.re_scaled /.kilo /.milli) (is (//.Measure /.Milli //.Meter))
                       (/.re_scaled /.milli /.kilo) (is (//.Measure /.Kilo //.Meter))
                       (by /.kilo down) (is (//.Measure Any //.Meter))
                       (meter#= large)))
                 (_.coverage [/.scale /.type]
                   (and (|> unscaled
                            (by ..how up)
                            (is (//.Measure How //.Meter))
                            (by ..how down)
                            (meter#= unscaled))
                        (fraction.= [fraction.#denominator ..how::from
                                     fraction.#numerator ..how::to]
                                    (by ..how fraction))))
                 )))))
