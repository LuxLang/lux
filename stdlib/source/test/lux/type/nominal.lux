... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   ["[0]" macro (.only)
    ["[0]" syntax]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" name]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(template.with_locals ['Foo 'Bar]
  (these (template.with [<syntax> <meta>]
           [(the <syntax>
              (syntax.macro (_ [])
                (do meta.monad
                  [frame <meta>]
                  (in (list (` (name (, (code.name (its /.#name frame))))))))))]

           [current /.current]
           [specific (/.specific (`` (name (,, (template.name [.._] ['Foo])))))]
           )

         (/.every ('Foo a)
           Text

           (/.every ('Bar a)
             Natural

             (the .public test
               Test
               (<| (_.covering /._)
                   (_.for [/.every])
                   (do random.monad
                     [expected_foo (random.lower_cased 5)
                      expected_bar random.natural]
                     (all _.and
                          (_.coverage [/.abstraction]
                            (and (exec (is ('Foo Text)
                                           (/.abstraction 'Foo expected_foo))
                                   true)
                                 (exec (is ('Bar Text)
                                           (/.abstraction expected_bar))
                                   true)))
                          (_.coverage [/.reification]
                            (and (|> expected_foo
                                     (/.abstraction 'Foo)
                                     (is ('Foo Bit))
                                     (/.reification 'Foo)
                                     (text.= expected_foo))
                                 (|> (/.abstraction expected_bar)
                                     (is ('Bar Bit))
                                     /.reification
                                     (n.= expected_bar))))
                          (_.coverage [/.transmutation]
                            (and (exec (|> expected_foo
                                           (/.abstraction 'Foo)
                                           (is ('Foo .Old_Macro))
                                           (/.transmutation 'Foo)
                                           (is ('Foo .Lux)))
                                   true)
                                 (exec (|> (/.abstraction expected_bar)
                                           (is ('Bar .Old_Macro))
                                           /.transmutation
                                           (is ('Bar .Lux)))
                                   true)))
                          (_.for [/.Frame
                                  /.#name /.#type_vars /.#abstraction /.#reification]
                                 (all _.and
                                      (_.coverage [/.current]
                                        (name.= (`` (name (,, (template.name [.._] ['Bar]))))
                                                (..current)))
                                      (_.coverage [/.specific]
                                        (name.= (`` (name (,, (template.name [.._] ['Foo]))))
                                                (..specific)))
                                      ))
                          ))))))))
