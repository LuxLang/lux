... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]
    ["[0]" exception]]
   [data
    [collection
     ["[0]" stack]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["[0]" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public (test random_type)
  (-> (Random Type)
      Test)
  (<| (_.covering /._)
      (monad.let random.monad
        [expected_0 random_type
         expected_1 random_type
         .let [variable_0 0
               variable_1 (++ variable_0)
               variable_2 (++ variable_1)]])
      (all _.and
           (<| (_.for [/.Binding])
               (all _.and
                    (_.coverage [/.un_bound]
                      (when (/.un_bound)
                        (/.un_bound)
                        true

                        else
                        false))
                    (_.coverage [/.bound]
                      (when (/.bound expected_0)
                        (/.bound actual)
                        (identical? expected_0 actual)

                        else
                        false))
                    ))
           (<| (_.for [/.Environment])
               (all _.and
                    (_.coverage [/.empty]
                      (when /.empty
                        (list)
                        true

                        else
                        false))
                    (<| (_.for [/.Query])
                        (all _.and
                             (_.coverage [/.its]
                               (when (|> (list (/.un_bound))
                                         (/.its variable_0))
                                 {try.:Success (/.un_bound)}
                                 true

                                 else
                                 false))
                             (_.coverage [/.bound?]
                               (and (try.else false (try:each not (/.bound? variable_0 (list (/.un_bound)))))
                                    (try.else false (/.bound? variable_0 (list (/.bound expected_0))))))
                             ))
                    (<| (_.for [/.Change])
                        (all _.and
                             (_.coverage [/.new]
                               (when (monad.let try.monad
                                       [it (|> (list (/.un_bound))
                                               (/.new variable_0 expected_0))]
                                       (/.its variable_0 it))
                                 {try.:Success (/.bound actual)}
                                 (identical? expected_0 actual)

                                 else
                                 false))
                             (_.coverage [/.cannot_bind_again]
                               (when (monad.let try.monad
                                       [it (|> (list (/.un_bound))
                                               (/.new variable_0 expected_0))]
                                       (/.new variable_0 expected_0 it))
                                 {try.:Failure error}
                                 (exception.is? /.cannot_bind_again error)

                                 else
                                 false))
                             (_.coverage [/.type]
                               (<| (try.else false)
                                   (monad.let try.monad
                                     [it (|> (list (/.un_bound))
                                             (/.new variable_0 expected_0))
                                      actual (/.type variable_0 it)]
                                     (pure (identical? expected_0 actual)))))
                             (_.coverage [/.changed]
                               (<| (try.else false)
                                   (monad.let try.monad
                                     [it (|> (list (/.un_bound))
                                             (/.new variable_0 expected_0))
                                      it (/.changed variable_0 (/.bound expected_1) it)
                                      actual (/.type variable_0 it)]
                                     (pure (identical? expected_1 actual)))))
                             ))
                    ))
           (<| (_.for [/.Ring])
               (let [(open "stack:[0]") (stack.equality natural.equality)])
               (all _.and
                    (_.coverage [/.ring]
                      (<| (try.else false)
                          (monad.let try.monad
                            [it (|> (list (/.un_bound))
                                    (/.ring variable_0))]
                            (pure (stack:= (stack variable_0) it)))))
                    (_.coverage [/.two]
                      (<| (try.else false)
                          (monad.let try.monad
                            [it (|> (list (/.un_bound) (/.un_bound))
                                    (/.two variable_0 variable_1))
                             ring_01 (/.ring variable_0 it)
                             ring_10 (/.ring variable_1 it)]
                            (pure (and (stack:= (stack variable_1 variable_0) ring_01)
                                       (stack:= (stack variable_0 variable_1) ring_10))))))
                    (_.coverage [/.binding]
                      (and (when (monad.let try.monad
                                   [it (|> (list (/.un_bound) (/.un_bound))
                                           (/.two variable_0 variable_1))]
                                   (/.binding variable_0 it))
                             {try.:Success (/.un_bound)}
                             true

                             else
                             false)
                           (when (monad.let try.monad
                                   [it (|> (list (/.un_bound))
                                           (/.changed variable_0 (/.bound expected_0)))]
                                   (/.binding variable_0 it))
                             {try.:Success (/.bound actual)}
                             (identical? expected_0 actual)

                             else
                             false)))
                    (_.coverage [/.not_bound]
                      (when (monad.let try.monad
                              [it (|> (list (/.un_bound) (/.un_bound))
                                      (/.two variable_0 variable_1))]
                              (/.type variable_0 it))
                        {try.:Failure error}
                        (exception.is? /.not_bound error)

                        else
                        false))
                    (_.coverage [/.three]
                      (<| (try.else false)
                          (monad.let try.monad
                            [it (|> (list (/.un_bound) (/.un_bound) (/.un_bound))
                                    (/.two variable_0 variable_1))
                             it (/.three variable_2 variable_1 variable_0 it)
                             ring_021 (/.ring variable_0 it)
                             ring_210 (/.ring variable_2 it)
                             ring_102 (/.ring variable_1 it)]
                            (pure (and (stack:= (stack variable_1 variable_2 variable_0) ring_021)
                                       (stack:= (stack variable_0 variable_1 variable_2) ring_210)
                                       (stack:= (stack variable_2 variable_0 variable_1) ring_102))))))
                    ))
           )))
