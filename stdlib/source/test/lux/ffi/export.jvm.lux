... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["[0]" debug]
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\injection]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number (.only hex)
     ["[0]" i64]
     ["[0]" int (.use "[1]#[0]" equivalence)]
     ["[0]" dec (.use "[1]#[0]" equivalence)]]]
   ["[0]" meta (.only)
    ["[0]" static]
    ["[0]" code]
    [macro
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" //]]])

(the expected_boolean (//.as_boolean (static.random_bit)))
(the expected_byte (//.as_byte (static.random_int)))
(the expected_short (//.as_short (static.random_int)))
(the expected_int (//.as_int (static.random_int)))
(the expected_long (//.as_long (static.random_int)))
(the expected_char (//.as_char (static.random_int)))
(the expected_float (//.as_float (static.random_dec)))
(the expected_double (//.as_double (static.random_dec)))
(the expected_string (//.as_string (static.random code.text (random.lower_cased 2))))

(`` (`` (/.export Primitives
          ... Constants
          (actual_boolean boolean ..expected_boolean)
          (actual_byte byte ..expected_byte)
          (actual_short short ..expected_short)
          (actual_int int ..expected_int)
          (actual_long long ..expected_long)
          (actual_char char ..expected_char)
          (actual_float float ..expected_float)
          (actual_double double ..expected_double)

          ... Methods
          (,, (with_template [<type> <+>]
                [(((,, (template.symbol [<type> "_method"]))
                   [left <type>
                    right <type>])
                  <type>
                  ((,, (template.symbol [//._] ["as_" <type>]))
                   (<+> ((,, (template.symbol [//._] ["of_" <type>])) left)
                        ((,, (template.symbol [//._] ["of_" <type>])) right))))]

                [boolean and]
                [byte int.+]
                [short int.+]
                [int int.+]
                [long int.+]
                [char int.+]
                [float dec.+]
                [double dec.+]
                ))
          )))

(`` (`` (//.import Primitives
          "[1]::[0]"
          ("read_only" "static" actual_boolean boolean)
          ("read_only" "static" actual_byte byte)
          ("read_only" "static" actual_short short)
          ("read_only" "static" actual_int int)
          ("read_only" "static" actual_long long)
          ("read_only" "static" actual_char char)
          ("read_only" "static" actual_float float)
          ("read_only" "static" actual_double double)

          (,, (with_template [<type>]
                [("static" (,, (template.symbol [<type> "_method"])) [<type> <type>] <type>)]

                [boolean]
                [byte]
                [short]
                [int]
                [long]
                [char]
                [float]
                [double]
                ))
          )))

(/.export Objects
  (actual_string java/lang/String ..expected_string)

  ((string_method [left java/lang/String right java/lang/String])
   java/lang/String
   (//.as_string (%.message (//.of_string left) (//.of_string right))))

  (([a] left [left a right a]) a left)
  (([a] right [left a right a]) a right))

(//.import Objects
  "[1]::[0]"
  ("read_only" "static" actual_string java/lang/String)

  ("static" string_method [java/lang/String java/lang/String] java/lang/String)
  
  ("static" [a] left [a a] a)
  ("static" [a] right [a a] a))

(the tiny_int
  (Random Int)
  (random#each (|>> (i64.and (hex "F")) .int)
               random.nat))

(the tiny_dec
  (Random Dec)
  (random#each (|>> (i64.and (hex "FFFF"))
                    .int
                    int.dec)
               random.nat))

(`` (`` (the .public test
          Test
          (<| (_.covering /._)
              (do [! random.monad]
                [(,, (with_template [<type> <as> <random>]
                       [(,, (template.symbol [left_ <type>])) (of ! each (|>> <as>) <random>)
                        (,, (template.symbol [right_ <type>])) (of ! each (|>> <as>) <random>)]

                       [boolean //.as_boolean random.bit]
                       [byte //.as_byte ..tiny_int]
                       [short //.as_short ..tiny_int]
                       [int //.as_int ..tiny_int]
                       [long //.as_long ..tiny_int]
                       [char //.as_char ..tiny_int]
                       [float //.as_float ..tiny_dec]
                       [double //.as_double ..tiny_dec]
                       [string //.as_string (random.lower_cased 1)]
                       ))]
                (all _.and
                     (_.coverage [/.export]
                       (and (bit#= (//.of_boolean ..expected_boolean) (//.of_boolean (Primitives::actual_boolean)))
                            (int#= (//.of_byte ..expected_byte) (//.of_byte (Primitives::actual_byte)))
                            (int#= (//.of_short ..expected_short) (//.of_short (Primitives::actual_short)))
                            (int#= (//.of_int ..expected_int) (//.of_int (Primitives::actual_int)))
                            (int#= (//.of_long ..expected_long) (//.of_long (Primitives::actual_long)))
                            (int#= (//.of_char ..expected_char) (//.of_char (Primitives::actual_char)))
                            (dec#= (//.of_float ..expected_float) (//.of_float (Primitives::actual_float)))
                            (dec#= (//.of_double ..expected_double) (//.of_double (Primitives::actual_double)))

                            (,, (with_template [<=> <+> <type>]
                                  [(with_expansions [<left> (template.symbol ["left_" <type>])
                                                     <right> (template.symbol ["right_" <type>])
                                                     <of> (template.symbol [//._] ["of_" <type>])
                                                     <method> (template.symbol ["Primitives::" <type> "_method"])]
                                     (<=> (<+> (<of> <left>) (<of> <right>))
                                          (<of> (<method> [<left> <right>]))))]

                                  [bit#= and boolean]
                                  [int#= int.+ byte]
                                  [int#= int.+ short]
                                  [int#= int.+ int]
                                  [int#= int.+ long]
                                  [int#= int.+ char]
                                  [dec#= dec.+ float]
                                  [dec#= dec.+ double]
                                  ))

                            (text#= (//.of_string ..expected_string) (//.of_string (Objects::actual_string)))
                            
                            (text#= (%.message (//.of_string left_string) (//.of_string right_string))
                                    (//.of_string (Objects::string_method [left_string right_string])))

                            (text#= (//.of_string left_string)
                                    (//.of_string (Objects::left [left_string right_string])))
                            (text#= (//.of_string right_string)
                                    (//.of_string (Objects::right [left_string right_string])))
                            (int#= (//.of_long left_long)
                                   (//.of_long (Objects::left [left_long right_long])))
                            (int#= (//.of_long right_long)
                                   (//.of_long (Objects::right [left_long right_long])))
                            ))
                     ))))))
