... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" debug]
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    ["[0]" number (.only)
     ["[0]" /64 (.only)
      ["[0]" integer]
      ["[0]" decimal]]]]
   [macro
    ["[0]" template]
    ["[0]" expansion]]
   ["[0]" meta (.only)
    ["[0]" static]
    ["[0]" code]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" //]]])

(the expected_boolean (//.as_boolean (static.random_bit)))
(the expected_byte (//.as_byte (static.random_integer)))
(the expected_short (//.as_short (static.random_integer)))
(the expected_int (//.as_int (static.random_integer)))
(the expected_long (//.as_long (static.random_integer)))
(the expected_char (//.as_char (static.random_integer)))
(the expected_float (//.as_float (static.random_decimal)))
(the expected_double (//.as_double (static.random_decimal)))
(the expected_string (//.as_string (static.random code.text (random.lower_cased 2))))

(`` (`` (/.export Primitives
                  ... Constants
                  (actual_boolean boolean ..expected_boolean)
                  (actual_byte byte ..expected_byte)
                  (actual_short short ..expected_short)
                  (actual_int int ..expected_int)
                  (actual_long long ..expected_long)
                  (actual_char char ..expected_char)
                  (actual_float float ..expected_float)
                  (actual_double double ..expected_double)

                  ... Methods
                  (,, (template.with [<type> <+>]
                        [(((,, (template.name [<type> "_method"]))
                           [left <type>
                            right <type>])
                          <type>
                          ((,, (template.name [//._] ["as_" <type>]))
                           (<+> ((,, (template.name [//._] ["of_" <type>])) left)
                                ((,, (template.name [//._] ["of_" <type>])) right))))]

                        [[boolean and]
                         [byte integer.+]
                         [short integer.+]
                         [int integer.+]
                         [long integer.+]
                         [char integer.+]
                         [float decimal.+]
                         [double decimal.+]]))
                  )))

(`` (`` (//.import Primitives
                   "[1]::[0]"
                   ("read_only" "static" actual_boolean boolean)
                   ("read_only" "static" actual_byte byte)
                   ("read_only" "static" actual_short short)
                   ("read_only" "static" actual_int int)
                   ("read_only" "static" actual_long long)
                   ("read_only" "static" actual_char char)
                   ("read_only" "static" actual_float float)
                   ("read_only" "static" actual_double double)

                   (,, (template.with [<type>]
                         [("static" (,, (template.name [<type> "_method"])) [<type> <type>] <type>)]

                         [[boolean]
                          [byte]
                          [short]
                          [int]
                          [long]
                          [char]
                          [float]
                          [double]]))
                   )))

(//.import java/lang/Long
           "[1]::[0]")

(//.import java/lang/String
           "[1]::[0]")

(/.export Objects
          (actual_string java/lang/String ..expected_string)

          ((string_method [left java/lang/String right java/lang/String])
           java/lang/String
           (//.as_string (text (//.of_string left) (//.of_string right))))

          (([a] left [left a right a]) a left)
          (([a] right [left a right a]) a right))

(//.import Objects
           "[1]::[0]"
           ("read_only" "static" actual_string java/lang/String)

           ("static" string_method [java/lang/String java/lang/String] java/lang/String)
           
           ("static" [a] left [a a] a)
           ("static" [a] right [a a] a))

(the tiny_integer
  (Random Integer)
  (random#each (|>> (/64.and (number.base_16 "F")) .integer)
               random.natural))

(the tiny_decimal
  (Random Decimal)
  (random#each (|>> (/64.and (number.base_16 "FFFF"))
                    .integer
                    integer.decimal)
               random.natural))

(`` (`` (the .public test
          Test
          (<| (_.covering /._)
              (do [! random.monad]
                [(,, (template.with [<type> <as> <random>]
                       [(,, (template.name [left_ <type>])) (by ! each (|>> <as>) <random>)
                        (,, (template.name [right_ <type>])) (by ! each (|>> <as>) <random>)]

                       [[boolean //.as_boolean random.bit]
                        [byte //.as_byte ..tiny_integer]
                        [short //.as_short ..tiny_integer]
                        [int //.as_int ..tiny_integer]
                        [long //.as_long ..tiny_integer]
                        [char //.as_char ..tiny_integer]
                        [float //.as_float ..tiny_decimal]
                        [double //.as_double ..tiny_decimal]
                        [string //.as_string (random.lower_cased 1)]]))]
                (all _.and
                     (_.coverage [/.export]
                       (and (bit.= (//.of_boolean ..expected_boolean) (//.of_boolean (Primitives::actual_boolean)))
                            (integer.= (//.of_byte ..expected_byte) (//.of_byte (Primitives::actual_byte)))
                            (integer.= (//.of_short ..expected_short) (//.of_short (Primitives::actual_short)))
                            (integer.= (//.of_int ..expected_int) (//.of_int (Primitives::actual_int)))
                            (integer.= (//.of_long ..expected_long) (//.of_long (Primitives::actual_long)))
                            (integer.= (//.of_char ..expected_char) (//.of_char (Primitives::actual_char)))
                            (decimal.= (//.of_float ..expected_float) (//.of_float (Primitives::actual_float)))
                            (decimal.= (//.of_double ..expected_double) (//.of_double (Primitives::actual_double)))

                            (,, (template.with [<=> <+> <type>]
                                  [(expansion.let [<left> (template.name ["left_" <type>])
                                                   <right> (template.name ["right_" <type>])
                                                   <of> (template.name [//._] ["of_" <type>])
                                                   <method> (template.name ["Primitives::" <type> "_method"])]
                                     (<=> (<+> (<of> <left>) (<of> <right>))
                                          (<of> (<method> [<left> <right>]))))]

                                  [[bit.= and boolean]
                                   [integer.= integer.+ byte]
                                   [integer.= integer.+ short]
                                   [integer.= integer.+ int]
                                   [integer.= integer.+ long]
                                   [integer.= integer.+ char]
                                   [decimal.= decimal.+ float]
                                   [decimal.= decimal.+ double]]))

                            (text.= (//.of_string ..expected_string) (//.of_string (Objects::actual_string)))
                            
                            (text.= (text (//.of_string left_string) (//.of_string right_string))
                                    (//.of_string (Objects::string_method [left_string right_string])))

                            (text.= (//.of_string left_string)
                                    (//.of_string (as (-> Any java/lang/String) (Objects::left [left_string right_string]))))
                            (text.= (//.of_string right_string)
                                    (//.of_string (as (-> Any java/lang/String) (Objects::right [left_string right_string]))))
                            (integer.= (//.of_long left_long)
                                       (//.of_long (as (-> Any java/lang/Long) (Objects::left [left_long right_long]))))
                            (integer.= (//.of_long right_long)
                                       (//.of_long (as (-> Any java/lang/Long) (Objects::right [left_long right_long]))))
                            ))
                     ))))))
