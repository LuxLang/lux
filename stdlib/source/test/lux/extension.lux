(.module:
  [lux #*
   ["@" target
    ["." jvm]]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try]
    ["<>" parser
     ["<c>" code]
     ["<a>" analysis]
     ["<s>" synthesis]]]
   [data
    ["." text ("#@." equivalence)
     ["%" format (#+ format)]]
    [collection
     ["." row]]]
   [tool
    [compiler
     ["." phase]
     [language
      [lux
       ["." analysis]
       ["." synthesis]
       ["." directive]
       [phase
        [analysis
         ["." type]]]]]]]
   ["_" test (#+ Test)]]
  {1
   ["." / (#+ analysis: synthesis: generation: directive:)]})

(def: my-analysis "my analysis")
(def: my-synthesis "my synthesis")
(def: my-generation "my generation")
(def: my-directive "my directive")

## Generation
(for {@.old
      (as-is)}
     
     (as-is (analysis: (..my-generation self phase archive {parameters (<>.some <c>.any)})
              (do phase.monad
                [_ (type.infer .Text)]
                (wrap (#analysis.Extension self (list)))))

            (synthesis: (..my-generation self phase archive {parameters (<>.some <a>.any)})
              (do phase.monad
                []
                (wrap (#synthesis.Extension self (list)))))
            ))

(for {@.old
      (as-is)

      @.jvm
      (as-is (generation: (..my-generation self phase archive {parameters (<>.some <s>.any)})
               (do phase.monad
                 []
                 (wrap (row.row (#jvm.Constant (#jvm.LDC (#jvm.String self))))))))})

(for {@.old
      (as-is)}
     
     (as-is (analysis: (..my-analysis self phase archive {parameters (<>.some <c>.any)})
              (do phase.monad
                [_ (type.infer .Text)]
                (wrap (#analysis.Primitive (#analysis.Text self)))))

            ## Synthesis
            (analysis: (..my-synthesis self phase archive {parameters (<>.some <c>.any)})
              (do phase.monad
                [_ (type.infer .Text)]
                (wrap (#analysis.Extension self (list)))))

            (synthesis: (..my-synthesis self phase archive {parameters (<>.some <a>.any)})
              (do phase.monad
                []
                (wrap (synthesis.text self))))
            
            ## Directive
            (directive: (..my-directive self phase archive {parameters (<>.some <c>.any)})
              (do phase.monad
                [#let [_ (log! (format "Successfully installed directive " (%.text self) "!"))]]
                (wrap directive.no-requirements)))

            (`` ((~~ (static ..my-directive))))
            ))

(def: #export test
  Test
  (<| (_.covering /._)
      (`` ($_ _.and
              (~~ (template [<macro> <extension>]
                    [(_.cover [<macro>]
                              (for {@.old
                                    false}
                                   (text@= (`` ((~~ (static <extension>))))
                                           <extension>)))]

                    [/.analysis: ..my-analysis]
                    [/.synthesis: ..my-synthesis]
                    [/.generation: ..my-generation]))
              (_.cover [/.directive:]
                       true)
              ))))
