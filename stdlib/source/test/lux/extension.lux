(.module:
  [lux #*
   ["@" target]
   [abstract
    [monad (#+ do)]]
   [control
    ["<>" parser
     ["<c>" code]
     ["<a>" analysis]]]
   [data
    ["." text ("#@." equivalence)
     ["%" format (#+ format)]]]
   [tool
    [compiler
     ["." analysis]
     ["." synthesis]
     ["." directive]
     [phase
      [analysis
       ["." type]]]]]
   ["_" test (#+ Test)]]
  {1
   ["." / (#+ analysis: synthesis: directive:)]})

(def: my-extension "example YOLO")

(`` (for {(~~ (static @.old))
          (as-is)}
         (as-is (analysis: (..my-extension self phase {parameters (<>.some <c>.any)})
                  (do @
                    [_ (type.infer .Text)]
                    (wrap (#analysis.Extension self (list)))))

                (synthesis: (..my-extension self phase {parameters (<>.some <a>.any)})
                  (wrap (synthesis.text self)))

                (directive: (..my-extension self phase {parameters (<>.some <c>.any)})
                  (do @
                    [#let [_ (log! (format "directive: " (%.text self)))]]
                    (wrap directive.no-requirements)))

                ("example YOLO")
                )))

(def: #export test
  Test
  (<| (_.context (%.name (name-of /._)))
      (_.test "Can define and use analysis & synthesis extensions."
              (`` (for {(~~ (static @.old))
                        false}
                       (text@= ("example YOLO")
                               "example YOLO"))))))
