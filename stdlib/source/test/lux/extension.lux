(.module:
  [lux #*
   ["@" target
    ["." jvm]]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try]
    ["<>" parser
     ["<c>" code]
     ["<a>" analysis]]]
   [data
    ["." text ("#@." equivalence)
     ["%" format (#+ format)]]]
   [tool
    [compiler
     [language
      [lux
       ["." analysis]
       ["." synthesis]
       ["." directive]
       [phase
        [analysis
         ["." type]]]]]]]
   ["_" test (#+ Test)]]
  {1
   ["." / (#+ analysis: synthesis: generation: directive:)]})

(def: my-analysis "my analysis")
(def: my-synthesis "my synthesis")
(def: my-generation "my generation")
(def: my-directive "my directive")

(`` (for {(~~ (static @.old))
          (as-is)

          (~~ (static @.jvm))
          (as-is (generation: (..my-generation self phase {parameters (<>.some <a>.any)})
                   (#try.Success (#jvm.Constant (#jvm.LDC (#jvm.String Text))))))}
         (as-is (analysis: (..my-analysis self phase {parameters (<>.some <c>.any)})
                  (do @
                    [_ (type.infer .Text)]
                    (wrap (#analysis.Text self))))

                ## Synthesis
                (analysis: (..my-synthesis self phase {parameters (<>.some <c>.any)})
                  (do @
                    [_ (type.infer .Text)]
                    (wrap (#analysis.Extension self (list)))))

                (synthesis: (..my-synthesis self phase {parameters (<>.some <a>.any)})
                  (wrap (synthesis.text self)))
                
                ## Generation
                (analysis: (..my-generation self phase {parameters (<>.some <c>.any)})
                  (do @
                    [_ (type.infer .Text)]
                    (wrap (#analysis.Extension self (list)))))

                (synthesis: (..my-generation self phase {parameters (<>.some <a>.any)})
                  (wrap (#synthesis.Extension self (list))))

                ## Directive
                (directive: (..my-directive self phase {parameters (<>.some <c>.any)})
                  (do @
                    [#let [_ (log! (format "Successfully installed directive " (%.text self) "!"))]]
                    (wrap directive.no-requirements)))

                (`` ((~~ (static ..my-directive))))
                )))

(def: #export test
  Test
  (<| (_.context (%.name (name-of /._)))
      ($_ _.and
          (_.test "Can define and use analysis extensions."
                  (`` (for {(~~ (static @.old))
                            false}
                           (text@= ((~~ (static ..my-analysis)))
                                   ..my-analysis))))
          (_.test "Can define and use synthesis extensions."
                  (`` (for {(~~ (static @.old))
                            false}
                           (text@= ((~~ (static ..my-synthesis)))
                                   ..my-synthesis))))
          (_.test "Can define and use generation extensions."
                  (`` (for {(~~ (static @.old))
                            false}
                           (text@= ((~~ (static ..my-generation)))
                                   ..my-generation))))
          )))
