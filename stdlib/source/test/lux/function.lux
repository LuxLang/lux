... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equality (.only Equality)]
    ["[0]" monad]
    ["[0]" monoid
     ["[1]T" \\test]]
    [functor
     ["[0]" pro (.only)
      ["[1]T" \\test]]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 ["/" \\library]
 ["!" \\theorem]
 ["[0]" /
  ["[1][0]" continuation]
  ["[1][0]" contract]
  ["[1][0]" memo]
  ["[1][0]" mixin]
  ["[1][0]" mutual]
  ["[1][0]" inline]
  ["[1][0]" predicate]
  ["[1][0]" variadic]
  ["[1][0]" named]
  ["[1][0]" trampoline]
  ["[1][0]" poly
   ["[1]/[0]" type]
   ["[1]/[0]" morph
    ["[1]/[0]" aspect]
    ["[1]/[0]" type]
    ["[1]/[0]" predicate]
    ["[1]/[0]" context]
    ["[1]/[0]" subject]
    ["[1]/[0]" implicit]
    ["[1]/[0]" object]]]])

(the .public test
  Test
  (monad.let [! random.monad]
    [it random.natural]
    (<| (_.covering /._)
        (all _.and
             (let [equality (is (Equality (-> Natural Natural))
                                (implementation
                                 (the (= left right)
                                   (n.= (left it)
                                        (right it)))))
                   generator (is (Random (-> Natural Natural))
                                 (by ! each n.- random.natural))]
               (_.for [/.monoid]
                      (monoidT.spec equality /.monoid generator)))

             (_.by_proof [.function]
                         [!.intermediation])
             (_.by_proof [/.identity]
                         [!.identity])
             (_.by_proof [/.composite]
                         [!.composite
                          !.left_identity
                          !.right_identity])
             (_.by_proof [/.constant]
                         [!.constant])
             (_.by_proof [/.in_reverse]
                         [!.in_reverse
                          !.double_reversal])
             (_.by_proof [/.of]
                         [!.of])
             (_.by_proof [/.curried]
                         [!.curried_is_inverse_of_uncurried])
             (_.by_proof [/.uncurried]
                         [!.uncurried_is_inverse_of_curried])
             (_.by_proof [/.or]
                         [!.left_or
                          !.right_or
                          !.identity_by_or
                          !.double_reversal_of_or])
             (_.by_proof [/.and]
                         [!.and
                          !.identity_by_and])
             (<| (_.for [/.Function])
                 (let [as_function (is (for_any (_ parameter|return)
                                         (-> (/.Function parameter|return parameter|return)
                                             (-> parameter|return parameter|return)))
                                       (function (_ it cause)
                                         (it cause)))
                       random (is (Random (/.Function Natural Natural))
                                  (pure ++))])
                 (all _.and
                      (_.for [/.functor]
                             ((as (-> (type_of proT.specification_of_functor)
                                      ((type_of proT.specification_of_functor) /.Function))
                                  proT.specification_of_functor)
                              as_function
                              random
                              /.functor))
                      (_.for [/.co_cartesian]
                             ((as (-> (type_of proT.specification_of_co_cartesian)
                                      ((type_of proT.specification_of_co_cartesian) /.Function))
                                  proT.specification_of_co_cartesian)
                              as_function
                              random
                              /.functor
                              /.co_cartesian))
                      (_.for [/.cartesian]
                             ((as (-> (type_of proT.specification_of_cartesian)
                                      ((type_of proT.specification_of_cartesian) /.Function))
                                  proT.specification_of_cartesian)
                              as_function
                              random
                              /.functor
                              /.cartesian))
                      ))

             /continuation.test
             /contract.test
             /memo.test
             /mixin.test
             /mutual.test
             /inline.test
             /predicate.test
             /variadic.test
             /named.test
             /trampoline.test
             /poly/type.test
             
             /poly/morph/aspect.test
             /poly/morph/type.test
             /poly/morph/predicate.test
             /poly/morph/context.test
             /poly/morph/subject.test
             /poly/morph/implicit.test
             /poly/morph/object.test
             ))))
