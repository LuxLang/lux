... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["d" dec]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the margin_of_error
  +0.0000001)

(the (symmetry forward backward angle)
  (-> (-> /.Angle Dec) (-> Dec /.Angle) /.Angle Bit)
  (let [normal (|> angle forward backward)]
    (|> normal forward backward (d.approximately? ..margin_of_error normal))))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (do [! random.monad]
             [.let [~= (d.approximately? ..margin_of_error)]
              angle (|> random.safe_dec (of ! each (d.* /.tau)))]
             (all _.and
                  (_.coverage [/.sin /.asin]
                    (..symmetry /.sin /.asin angle))
                  (_.coverage [/.cos /.acos]
                    (..symmetry /.cos /.acos angle))
                  (_.coverage [/.tan /.atan]
                    (..symmetry /.tan /.atan angle))
                  (_.coverage [/.tau]
                    (and (and (~= +0.0 (/.sin /.tau))
                              (~= +1.0 (/.cos /.tau)))
                         (and (~= +0.0 (/.sin (d./ +2.0 /.tau)))
                              (~= -1.0 (/.cos (d./ +2.0 /.tau))))
                         (and (~= +1.0 (/.sin (d./ +4.0 /.tau)))
                              (~= +0.0 (/.cos (d./ +4.0 /.tau))))
                         (and (~= -1.0 (/.sin (d.* +3.0 (d./ +4.0 /.tau))))
                              (~= +0.0 (/.cos (d.* +3.0 (d./ +4.0 /.tau)))))
                         (let [x2+y2 (d.+ (d.pow +2.0 (/.sin angle))
                                          (d.pow +2.0 (/.cos angle)))]
                           (~= +1.0 x2+y2))))
                  (_.coverage [/.pi]
                    (~= (d./ +2.0 /.tau)
                        /.pi))
                  ))
           (do [! random.monad]
             [x (of ! each (|>> (d.* +10.0) d.abs) random.safe_dec)
              y (of ! each (|>> (d.* +10.0) d.abs) random.safe_dec)]
             (_.coverage [/.hypotenuse]
               (let [h (/.hypotenuse x y)]
                 (and (d.>= x h)
                      (d.>= y h)))))
           (do [! random.monad]
             [.let [~= (d.approximately? ..margin_of_error)
                    tau/4 (d./ +4.0 /.tau)]
              x (of ! each (d.* tau/4) random.safe_dec)
              y (of ! each (d.* tau/4) random.safe_dec)]
             (_.coverage [/.atan_2]
               (let [expected (/.atan_2 x y)
                     actual (if (d.> +0.0 x)
                              (/.atan (d./ x y))
                              (if (d.< +0.0 y)
                                (d.- /.pi (/.atan (d./ x y)))
                                (d.+ /.pi (/.atan (d./ x y)))))]
                 (and (~= expected actual)
                      (~= tau/4 (/.atan_2 +0.0 (d.abs y)))
                      (~= (d.opposite tau/4) (/.atan_2 +0.0 (d.opposite (d.abs y))))
                      (d.not_a_number? (/.atan_2 +0.0 +0.0))))))
           )))
