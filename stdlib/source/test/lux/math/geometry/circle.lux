... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["d" decimal]]]
   [meta
    [macro
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the margin_of_error
  +0.0000001)

(the (symmetry forward backward angle)
  (-> (-> /.Angle Decimal) (-> Decimal /.Angle) /.Angle Bit)
  (let [normal (|> angle
                   forward
                   backward)]
    (|> normal
        forward
        backward
        (d.approximately? ..margin_of_error normal))))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (do [! random.monad]
             [.let [~= (d.approximately? ..margin_of_error)]
              angle (|> random.unit_decimal (of ! each (d.* /.tau)))]
             (`` (all _.and
                      (,, (template.with [,short ,arc_short
                                          ,long ,arc_long]
                            [(_.coverage [,short ,arc_short
                                          ,long ,arc_long]
                               (and (..symmetry ,short ,arc_short angle)
                                    (alias? ,short ,long)
                                    (alias? ,arc_short ,arc_long)))]

                            [/.sin /.asin
                             /.sine /.arc_sine]
                            [/.cos /.acos
                             /.co_sine /.arc_co_sine]
                            [/.tan /.atan
                             /.tangent /.arc_tangent]
                            [/.cot /.acot
                             /.co_tangent /.arc_co_tangent]
                            [/.sec /.asec
                             /.secant /.arc_secant]
                            [/.csc /.acsc
                             /.co_secant /.arc_co_secant]))
                      (_.coverage [/.tau]
                        (and (and (~= +0.0 (/.sin /.tau))
                                  (~= +1.0 (/.cos /.tau)))
                             (and (~= +0.0 (/.sin (d./ +2.0 /.tau)))
                                  (~= -1.0 (/.cos (d./ +2.0 /.tau))))
                             (and (~= +1.0 (/.sin (d./ +4.0 /.tau)))
                                  (~= +0.0 (/.cos (d./ +4.0 /.tau))))
                             (and (~= -1.0 (/.sin (d.* +3.0 (d./ +4.0 /.tau))))
                                  (~= +0.0 (/.cos (d.* +3.0 (d./ +4.0 /.tau)))))
                             (let [x2+y2 (d.+ (d.pow +2.0 (/.sin angle))
                                              (d.pow +2.0 (/.cos angle)))]
                               (~= +1.0 x2+y2))))
                      (_.coverage [/.pi]
                        (~= (d./ +2.0 /.tau)
                            /.pi))
                      )))
           (do [! random.monad]
             [x (of ! each (|>> (d.* +10.0) d.abs) random.unit_decimal)
              y (of ! each (|>> (d.* +10.0) d.abs) random.unit_decimal)]
             (_.coverage [/.hypotenuse]
               (let [h (/.hypotenuse x y)]
                 (and (d.>= x h)
                      (d.>= y h)))))
           (do [! random.monad]
             [.let [~= (d.approximately? ..margin_of_error)
                    tau/4 (d./ +4.0 /.tau)]
              x (of ! each (d.* tau/4) random.unit_decimal)
              y (of ! each (d.* tau/4) random.unit_decimal)]
             (_.coverage [/.atan_2
                          /.arc_tangent_2]
               (and (let [expected (/.atan_2 x y)
                          actual (if (d.> +0.0 x)
                                   (/.atan (d./ x y))
                                   (if (d.< +0.0 y)
                                     (d.- /.pi (/.atan (d./ x y)))
                                     (d.+ /.pi (/.atan (d./ x y)))))]
                      (and (~= expected actual)
                           (~= tau/4 (/.atan_2 +0.0 (d.abs y)))
                           (~= (d.opposite tau/4) (/.atan_2 +0.0 (d.opposite (d.abs y))))
                           (d.not_a_number? (/.atan_2 +0.0 +0.0))))
                    (alias? /.atan_2 /.arc_tangent_2))))
           (<| (_.for [/.Angle])
               (`` (all _.and
                        (,, (template.with [,factor ,unit]
                              [(_.coverage [,unit]
                                 (d.approximately? ..margin_of_error /.tau (d.* ,factor ,unit)))]

                              [+1.0 /.turn]
                              [/.tau /.radian]
                              [+360.0 /.degree]
                              [+400.0 /.gradian]
                              ))
                        )))
           )))
