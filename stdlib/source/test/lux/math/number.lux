... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [control
    ["[0]" try]]
   [data
    ["[0]" text]]
   [meta
    ["[0]" static]
    ["[0]" code]
    [macro
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["n" nat]
   ["i" int]
   ["r" rev]
   ["f" frac]]]
 ["[0]" /
  ["[1][0]" i8]
  ["[1][0]" i16]
  ["[1][0]" i32]
  ["[1][0]" i64]
  ["[1][0]" nat]
  ["[1][0]" int]
  ["[1][0]" rev]
  ["[1][0]" frac]
  ["[1][0]" ratio]
  ["[1][0]" complex]])

(def without_commas
  (-> Text
      Text)
  (text.replaced "," ""))

(def with_commas
  (-> Text
      Text)
  (|>> (text.replaced "." ".,")
       (text.replaced "+" "+,")
       (text.replaced "-" "-,")))

(def .public test
  Test
  (<| (_.covering /._)
      (with_expansions
        [<nat> (static.random_nat)
         <int> (static.random_int)
         <rev> (static.random_rev)
         <frac> (static.random_frac)])
      (`` (all _.and
               (,, (with_template [<short> <long>]
                     [(_.coverage [<short> <long>]
                        (`` (and (,, (with_template [<=> <number>]
                                       [(with_expansions [<codec> (template.symbol [<=>] [<long>])]
                                          (and (with_expansions [<it> (static.literal (|>> (of <codec> encoded)
                                                                                           code.text)
                                                                                      <number>)]
                                                 (when (of <codec> decoded <it>)
                                                   {try.#Success actual}
                                                   (and (<=> (<short> <it>) actual)
                                                        (<=> (<short> <it>) <number>))

                                                   {try.#Failure error}
                                                   false))
                                               (with_expansions [<it> (static.literal (|>> (of <codec> encoded)
                                                                                           ..with_commas
                                                                                           (text.suffix ",")
                                                                                           code.text)
                                                                                      <number>)]
                                                 (when (of <codec> decoded (..without_commas <it>))
                                                   {try.#Success actual}
                                                   (and (<=> (<short> <it>) actual)
                                                        (<=> (<short> <it>) <number>))

                                                   {try.#Failure error}
                                                   false))))]

                                       [n.= <nat>]
                                       [i.= <int>]
                                       [r.= <rev>]
                                       [f.= <frac>]
                                       ))
                                 (same? <short> <long>))))]

                     [/.dec /.decimal]
                     [/.bin /.binary]
                     [/.oct /.octal]
                     [/.hexadecimal /.hex]
                     ))
               (_.coverage [/.dec /.decimal]
                 (and (,, (with_template [<codec>]
                            [(and (with_expansions [<it> (static.literal (|>> (of <codec> encoded)
                                                                              code.text)
                                                                         <frac>)]
                                    (when (of <codec> decoded <it>)
                                      {try.#Success actual}
                                      (and (f.= (/.dec <it>) actual)
                                           (f.= (/.dec <it>) <frac>))

                                      {try.#Failure error}
                                      false))
                                  (with_expansions [<it> (static.literal (|>> (of <codec> encoded)
                                                                              ..with_commas
                                                                              code.text)
                                                                         <frac>)]
                                    (when (of <codec> decoded (..without_commas <it>))
                                      {try.#Success actual}
                                      (and (f.= (/.dec <it>) actual)
                                           (f.= (/.dec <it>) <frac>))

                                      {try.#Failure error}
                                      false)))]

                            [f.degree]
                            [f.percentage]
                            [f.permille]
                            [f.permyriad]
                            ))))

               /i8.test
               /i16.test
               /i32.test
               /i64.test
               /nat.test
               /int.test
               /rev.test
               /frac.test
               /ratio.test
               /complex.test
               ))))
