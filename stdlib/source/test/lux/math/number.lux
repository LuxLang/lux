(.require
 [library
  [lux (.except)
   [control
    ["[0]" try]]
   [data
    ["[0]" text]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["n" nat]
   ["i" int]
   ["r" rev]
   ["f" frac]]]
 ["[0]" /
  ["[1][0]" i8]
  ["[1][0]" i16]
  ["[1][0]" i32]
  ["[1][0]" i64]
  ["[1][0]" nat]
  ["[1][0]" int]
  ["[1][0]" rev]
  ["[1][0]" frac]
  ["[1][0]" ratio]
  ["[1][0]" complex]])

(def clean_commas
  (-> Text Text)
  (text.replaced "," ""))

(def .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (_.coverage [/.bin]
             (`` (and (,, (with_template [<=> <codec> <number>]
                            [(when (at <codec> decoded (..clean_commas <number>))
                               {try.#Success actual}
                               (<=> (/.bin <number>) actual)

                               {try.#Failure error}
                               false)]

                            [n.= n.binary "11,00,10,01"]

                            [i.= i.binary "+11,00,10,01"]
                            [i.= i.binary "-11,00,10,01"]

                            [r.= r.binary ".11,00,10,01"]

                            [f.= f.binary "+11,00.10,01"]
                            [f.= f.binary "-11,00.10,01"]
                            )))))
           (_.coverage [/.oct]
             (`` (and (,, (with_template [<=> <codec> <number>]
                            [(when (at <codec> decoded (..clean_commas <number>))
                               {try.#Success actual}
                               (<=> (/.oct <number>) actual)

                               {try.#Failure error}
                               false)]

                            [n.= n.octal "615,243"]

                            [i.= i.octal "+615,243"]
                            [i.= i.octal "-615,243"]

                            [r.= r.octal ".615,243"]

                            [f.= f.octal "+61,52.43"]
                            [f.= f.octal "-61,52.43"]
                            )))))
           (_.coverage [/.hex]
             (`` (and (,, (with_template [<=> <codec> <number>]
                            [(when (at <codec> decoded (..clean_commas <number>))
                               {try.#Success actual}
                               (<=> (/.hex <number>) actual)

                               {try.#Failure error}
                               false)]

                            [n.= n.hex "dead,BEEF"]

                            [i.= i.hex "+dead,BEEF"]
                            [i.= i.hex "-dead,BEEF"]

                            [r.= r.hex ".dead,BEEF"]

                            [f.= f.hex "+dead,BE.EF"]
                            [f.= f.hex "-dead,BE.EF"]
                            )))))

           /i8.test
           /i16.test
           /i32.test
           /i64.test
           /nat.test
           /int.test
           /rev.test
           /frac.test
           /ratio.test
           /complex.test
           )))
