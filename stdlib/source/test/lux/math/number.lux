... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [control
    ["[0]" try]]
   [data
    ["[0]" text]]
   [math
    ["[0]" random]]
   [meta
    ["[0]" static]
    ["[0]" code]
    [macro
     ["[0]" template]
     ["[0]" expansion]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["n" natural]
   ["i" int]
   ["r" rev]
   ["d" decimal]]]
 ["[0]" /
  ["[1][0]" i8]
  ["[1][0]" i16]
  ["[1][0]" i32]
  ["[1][0]" i64]
  ["[1][0]" natural]
  ["[1][0]" int]
  ["[1][0]" rev]
  ["[1][0]" decimal]
  ["[1][0]" frac]
  ["[1][0]" complex]
  ["[1][0]" rational]])

(the without_commas
  (-> Text
      Text)
  (text.replaced "," ""))

(the with_commas
  (-> Text
      Text)
  (|>> (text.replaced "." ".,")
       (text.replaced "+" "+,")
       (text.replaced "-" "-,")))

(the .public test
  Test
  (<| (_.covering /._)
      (expansion.let [<natural> (static.random_natural)
                      <int> (static.random_int)
                      <rev> (static.random_rev)
                      <decimal> (static.random_decimal)
                      <safe_decimal> (static.random code.decimal random.safe_decimal)])
      (`` (all _.and
               ... (,, (template.with [<short> <long>]
               ...       [(_.coverage [<short> <long>]
               ...          (`` (and (,, (template.with [<=> <number>]
               ...                         [(expansion.let [<format> (template.symbol [<=>] [<long>])]
               ...                            (and (expansion.let [<it> (static.literal (|>> (of <format> injection)
               ...                                                                           code.text)
               ...                                                                      <number>)]
               ...                                   (when (of <format> projection <it>)
               ...                                     {try.#Success actual}
               ...                                     (and (<=> (<short> <it>) actual)
               ...                                          (<=> (<short> <it>) <number>))

               ...                                     {try.#Failure error}
               ...                                     false))
               ...                                 (expansion.let [<it> (static.literal (|>> (of <format> injection)
               ...                                                                           ..with_commas
               ...                                                                           (text.suffix ",")
               ...                                                                           code.text)
               ...                                                                      <number>)]
               ...                                   (when (of <format> projection (..without_commas <it>))
               ...                                     {try.#Success actual}
               ...                                     (and (<=> (<short> <it>) actual)
               ...                                          (<=> (<short> <it>) <number>))

               ...                                     {try.#Failure error}
               ...                                     false))))]

               ...                         [n.= <natural>]
               ...                         [i.= <int>]
               ...                         [r.= <rev>]
               ...                         [d.= <decimal>]
               ...                         ))
               ...                   (same? <short> <long>))))]

               ...       [/.dec /.decimal]
               ...       [/.bin /.binary]
               ...       [/.oct /.octal]
               ...       [/.hex /.hexadecimal]
               ...       ))
               ... (_.coverage [/.base_02]
               ...   (same? /.bin /.base_02))
               ... (_.coverage [/.base_08]
               ...   (same? /.oct /.base_08))
               ... (_.coverage [/.base_10]
               ...   (same? /.decimal /.base_10))
               ... (_.coverage [/.base_16]
               ...   (same? /.hex /.base_16))
               ... (_.coverage [/.decimal]
               ...   (and (,, (template.with [<format>]
               ...              [(and (expansion.let [<it> (static.literal (|>> (of <format> injection)
               ...                                                              code.text)
               ...                                                         <safe_decimal>)]
               ...                      (when (of <format> projection <it>)
               ...                        {try.#Success actual}
               ...                        (and (d.approximately? +0.0000000000001 (/.decimal <it>) actual)
               ...                             (d.approximately? +0.0000000000001 (/.decimal <it>) <safe_decimal>))

               ...                        {try.#Failure error}
               ...                        false))
               ...                    (expansion.let [<it> (static.literal (|>> (of <format> injection)
               ...                                                              ..with_commas
               ...                                                              code.text)
               ...                                                         <safe_decimal>)]
               ...                      (when (of <format> projection (..without_commas <it>))
               ...                        {try.#Success actual}
               ...                        (and (d.approximately? +0.0000000000001 (/.decimal <it>) actual)
               ...                             (d.approximately? +0.0000000000001 (/.decimal <it>) <safe_decimal>))

               ...                        {try.#Failure error}
               ...                        false)))]

               ...              [d.degree]
               ...              [d.percentage]
               ...              [d.permille]
               ...              [d.permyriad]
               ...              ))))

               /i8.test
               /i16.test
               /i32.test
               /i64.test
               /natural.test
               /int.test
               /rev.test
               /decimal.test
               /frac.test
               /complex.test
               /rational.test
               ))))
