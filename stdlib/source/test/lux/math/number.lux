... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [test
    ["_" property (.only Test)]]
   [meta
    ["[0]" static]]
   [macro
    ["[0]" expansion]]
   [math
    [number
     [/64
      ["[0]" natural]
      ["[0]" integer]
      ["[0]" revolution]
      ["[0]" decimal]]]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" digit]
  ["[1][0]" base]
  ["[1][0]" signum]
  ["[0]" /08
   ["[1]/[0]" natural]
   ["[1]/[0]" integer]]
  ["[0]" /16
   ["[1]/[0]" natural]
   ["[1]/[0]" integer]]
  ["[0]" /32
   ["[1]/[0]" natural]
   ["[1]/[0]" integer]]
  ["[0]" /64]
  ["[1][0]" big]
  ["[0]" /128]])

(expansion.let [,natural (static.random_natural)
                ,integer (static.random_integer)
                ,revolution (static.random_revolution)
                ,decimal (static.random_decimal)]
  (the .public test
    Test
    (<| (_.covering /._)
        (all _.and
             (expansion.let [,natural_02 (static.text (by natural.base_02 as ,natural))
                             ,integer_02 (static.text (by integer.base_02 as ,integer))
                             ,revolution_02 (static.text (by revolution.base_02 as ,revolution))
                             ,decimal_02 (static.text (by decimal.base_02 as ,decimal))]
               (_.coverage [/.base_02]
                 (and (natural.= ,natural (/.base_02 ,natural_02))
                      (integer.= ,integer (/.base_02 ,integer_02))
                      (revolution.= ,revolution (/.base_02 ,revolution_02))
                      (decimal.= ,decimal (/.base_02 ,decimal_02)))))
             (expansion.let [,natural_08 (static.text (by natural.base_08 as ,natural))
                             ,integer_08 (static.text (by integer.base_08 as ,integer))
                             ,revolution_08 (static.text (by revolution.base_08 as ,revolution))
                             ,decimal_08 (static.text (by decimal.base_08 as ,decimal))]
               (_.coverage [/.base_08]
                 (and (natural.= ,natural (/.base_08 ,natural_08))
                      (integer.= ,integer (/.base_08 ,integer_08))
                      (revolution.= ,revolution (/.base_08 ,revolution_08))
                      (decimal.= ,decimal (/.base_08 ,decimal_08)))))
             (expansion.let [,natural_16 (static.text (by natural.base_16 as ,natural))
                             ,integer_16 (static.text (by integer.base_16 as ,integer))
                             ,revolution_16 (static.text (by revolution.base_16 as ,revolution))
                             ,decimal_16 (static.text (by decimal.base_16 as ,decimal))]
               (_.coverage [/.base_16]
                 (and (natural.= ,natural (/.base_16 ,natural_16))
                      (integer.= ,integer (/.base_16 ,integer_16))
                      (revolution.= ,revolution (/.base_16 ,revolution_16))
                      (decimal.= ,decimal (/.base_16 ,decimal_16)))))
             (expansion.let [,natural_10 (static.text (by natural.base_10 as ,natural))
                             ,integer_10 (static.text (by integer.base_10 as ,integer))
                             ,revolution_10 (static.text (by revolution.base_10 as ,revolution))
                             ,decimal_10 (static.text (by decimal.base_10 as ,decimal))

                             ,decimal_as_degree (static.text (by decimal.degree as ,decimal))
                             ,decimal_as_gradian (static.text (by decimal.gradian as ,decimal))
                             ,decimal_as_per_cent (static.text (by decimal.per_cent as ,decimal))
                             ,decimal_as_per_mille (static.text (by decimal.per_mille as ,decimal))
                             ,decimal_as_per_myriad (static.text (by decimal.per_myriad as ,decimal))]
               (_.coverage [/.base_10]
                 (and (natural.= ,natural (/.base_10 ,natural_10))
                      (integer.= ,integer (/.base_10 ,integer_10))
                      (revolution.= ,revolution (/.base_10 ,revolution_10))
                      (decimal.= ,decimal (/.base_10 ,decimal_10))

                      (decimal.= ,decimal (/.base_10 ,decimal_as_degree))
                      (decimal.= ,decimal (/.base_10 ,decimal_as_gradian))
                      (decimal.= ,decimal (/.base_10 ,decimal_as_per_cent))
                      (decimal.= ,decimal (/.base_10 ,decimal_as_per_mille))
                      (decimal.= ,decimal (/.base_10 ,decimal_as_per_myriad)))))
             
             /digit.test
             /base.test
             /signum.test
             
             /08/natural.test
             /08/integer.test

             /16/natural.test
             /16/integer.test

             /32/natural.test
             /32/integer.test
             
             /64.test

             /big.test
             /128.test
             ))))
