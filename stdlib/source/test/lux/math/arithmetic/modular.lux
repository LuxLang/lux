... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [function
    ["[0]" predicate]]
   [data
    ["[0]" product]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["i" integer]]]]
   [macro
    ["[0]" template]]
   ["[0]" type]
   [test
    ["_" property (.only Test)]]]]
 [///
  ["//T" modulus]]
 [\\library
  ["[0]" / (.only)
   [///
    ["//" modulus]]]])

(the .public (random modulus)
  (for_any (_ %)
    (-> (//.Modulus %)
        (Random (/.Modulo %))))
  (by random.monad each
      (/.modulo modulus)
      random.integer))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Modulo])
      (monad.let random.monad
        [param:% (//T.random +1,000,000)
         param (..random param:%)

         subject:% (random.only (predicate.and (|>> //.divisor (i.> +2))
                                               (|>> (//.= param:%) not))
                                (//T.random +1,000,000))
         subject (..random subject:%)
         another (..random subject:%)]
        (`` (all _.and
                 (_.for [/.equivalence /.=]
                        (equivalenceT.spec /.equivalence (..random subject:%)))
                 (_.for [/.order /.<]
                        (orderT.spec /.order (..random subject:%)))
                 (,, (template.with [<composite> <monoid>]
                       [(_.for [<monoid> <composite>]
                               (monoidT.spec /.equivalence (<monoid> subject:%) (..random subject:%)))]
                       
                       [[/.+ /.addition]
                        [/.x /.multiplication]]))
                 (_.for [/.text]
                        (formatT.spec /.equivalence (/.text subject:%) (..random subject:%)))

                 (_.coverage [/.incorrect_modulus]
                   (when (|> param
                             (by (/.text param:%) as)
                             (by (/.text subject:%) of))
                     {try.:Failure error}
                     (exception.is? /.incorrect_modulus error)
                     
                     {try.:Success _}
                     false))
                 (_.coverage [/.modulus]
                   (and (type.= (type_of (/.modulus subject))
                                (type_of (/.modulus subject)))
                        (not (type.= (type_of (/.modulus subject))
                                     (type_of (/.modulus param))))))
                 (_.coverage [/.modulo /.value]
                   (/.= subject
                        (/.modulo (/.modulus subject) (/.value subject))))
                 (_.coverage [/.>]
                   (bit.= (/.> another subject)
                          (/.< subject another)))
                 (_.coverage [/.<= /.>=]
                   (bit.= (/.<= another subject)
                          (/.>= subject another)))
                 (_.coverage [/.-]
                   (let [zero (/.modulo (/.modulus subject) +0)]
                     (and (/.= zero
                               (/.- subject subject))
                          (/.= subject
                               (/.- zero subject)))))
                 (_.coverage [/.inverse]
                   (let [one (/.modulo (/.modulus subject) +1)
                         co_prime? (i.co_prime? (//.divisor (/.modulus subject))
                                                (/.value subject))]
                     (when (/.inverse subject)
                       {.:Some subject^-1}
                       (and co_prime?
                            (|> subject
                                (/.x subject^-1)
                                (/.= one)))
                       
                       {.:None}
                       (not co_prime?))))
                 (_.coverage [/.adapter]
                   (<| (try.else false)
                       (monad.let try.monad
                         [copy:% (//.modulus (//.divisor subject:%))
                          adapt (/.adapter subject:% copy:%)]
                         (pure (|> subject
                                   /.value
                                   (/.modulo copy:%)
                                   adapt
                                   (/.= subject))))))
                 (_.coverage [/.moduli_are_not_equal]
                   (when (/.adapter subject:% param:%)
                     {try.:Failure error}
                     (exception.is? /.moduli_are_not_equal error)
                     
                     {try.:Success _}
                     false))
                 )))))
