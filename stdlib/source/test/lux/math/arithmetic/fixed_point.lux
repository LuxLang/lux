... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [error
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public (random @)
  (for_any (_ @)
    (-> (/.Point @)
        (Random (/.Fixed @))))
  (monad.let [! random.monad]
    [units (by ! each (i.% +1,000) random.integer)
     sub_units random.revolution]
    (pure (/.fixed @ units sub_units))))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [candidate_point random.natural
         expected_point (by ! each (n.% (++ /.maximum)) random.natural)
         .let [@ (try.trusted (/.point expected_point))]
         expected (..random @)
         parameter (..random @)
         subject (..random @)])
      (all _.and
           (<| (_.for [/.Point])
               (all _.and
                    (_.coverage [/.point /.location]
                      (|> (/.point expected_point)
                          (try#each (|>> /.location
                                         (same? expected_point)))
                          (try.else false)))
                    (_.coverage [/.maximum /.point_exceeds_maximum]
                      (when (/.point candidate_point)
                        {try.#Success it}
                        (n.<= /.maximum candidate_point)
                        
                        {try.#Failure error}
                        (and (n.> /.maximum candidate_point)
                             (exception.is? /.point_exceeds_maximum error))))
                    ))
           (<| (_.for [/.Fixed])
               (all _.and
                    (_.for [/.equivalence /.=]
                           (equivalenceT.spec (/.equivalence @) (..random @)))
                    (_.for [/.order /.<]
                           (orderT.spec (/.order @) (..random @)))

                    (_.coverage [/.fixed /.units /.sub_units]
                      (/.= @
                           expected
                           (/.fixed @ (/.units @ expected) (/.sub_units @ expected))))
                    (_.coverage [/.of_integer /.of_revolution]
                      (/.= @
                           expected
                           (/.+ @
                                (/.of_integer @ (/.units @ expected))
                                (/.of_revolution @ (/.sub_units @ expected)))))

                    (_.coverage [/.>]
                      (bit.= (/.> @ parameter subject)
                             (/.< @ subject parameter)))
                    (_.coverage [/.<= /.>=]
                      (bit.= (/.<= @ parameter subject)
                             (/.>= @ subject parameter)))
                    
                    (_.coverage [/.+]
                      (let [has_identity!
                            (and (|> subject
                                     (/.+ @ (/.of_integer @ +0))
                                     (/.= @ subject))
                                 (|> (/.of_integer @ +0)
                                     (/.+ @ subject)
                                     (/.= @ subject)))

                            is_commutative!
                            (/.= @
                                 (/.+ @ parameter subject)
                                 (/.+ @ subject parameter))]
                        (and has_identity!
                             is_commutative!)))
                    (_.coverage [/.-]
                      (let [cancellation!
                            (and (/.= @
                                      (/.of_integer @ +0)
                                      (/.- @ expected expected))
                                 (/.= @
                                      (/.of_revolution @ .0)
                                      (/.- @ expected expected)))

                            symmetry!
                            (and (|> subject
                                     (/.+ @ parameter)
                                     (/.- @ parameter)
                                     (/.= @ subject))
                                 (|> subject
                                     (/.- @ parameter)
                                     (/.+ @ parameter)
                                     (/.= @ subject)))]
                        (and cancellation!
                             symmetry!)))
                    (_.coverage [/.x]
                      (let [has_identity!
                            (|> subject
                                (/.x @ (/.of_integer @ +1))
                                (/.= @ subject))

                            zero_absorption!
                            (|> subject
                                (/.x @ (/.of_integer @ +0))
                                (/.= @ (/.of_integer @ +0)))

                            is_commutative!
                            (/.= @
                                 (/.x @ parameter subject)
                                 (/.x @ subject parameter))]
                        (and has_identity!
                             zero_absorption!
                             is_commutative!)))
                    (_.coverage [/./]
                      (/.= @
                           (/.of_integer @ +1)
                           (/./ @ expected expected)))

                    (_.coverage [/.as_text]
                      (let [it (/.as_text @ expected)]
                        (and (text.contains? (%.integer (/.units @ expected))
                                             it)
                             (text.contains? (%.revolution (/.sub_units @ expected))
                                             it))))
                    ))
           )))
