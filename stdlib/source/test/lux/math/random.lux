... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    ["[0]" monad (.only)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try]]
   [data
    ["[0]" sum]
    ["[0]" product]
    ["[0]" text (.only)
     ["[0]" unicode
      ["[1]" set]]]
    [collection
     ["[0]" list]
     ["[0]" stack]
     ["[0]" array]
     ["[0]" queue]
     ["[0]" set]
     ["[0]" dictionary]]]
   [logic
    ["[0]" bit]]
   [math
    [number
     ["[0]" /64 (.only)
      ["[0]" natural]
      ["[0]" integer]
      ["[0]" revolution]
      ["[0]" decimal]
      ["[0]" fraction]
      ["[0]" complex]]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" refinement]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only Random)]])

(the injection
  (Injection Random)
  (by /.monad pure))

(the (comparison increase,seed)
  (-> /.PCG_32
      (Comparison Random))
  (function (_ == left right)
    (|> (monad.let /.monad
          [left left
           right right]
          (pure (== left right)))
        (/.value /.pcg_32 increase,seed)
        product.right)))

(the (distinct equivalence random)
  (for_any (_ a)
    (-> (Equivalence a) (Random a)
        (Random Bit)))
  (monad.let /.monad
    [reference random
     example (/.only (|>> (by equivalence = reference) not)
                     random)]
    (pure (not (by equivalence = reference example)))))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let /.monad
        [increase,seed (is (Random /.PCG_32)
                           (/.and /.natural /.natural))
         .let [[increase seed] increase,seed]])
      (_.for [/.Random])
      (`` (all _.and
               (_.for [/.functor]
                      (functorT.spec ..injection (..comparison increase,seed) /.functor))
               (_.for [/.monad]
                      (monadT.spec ..injection (..comparison increase,seed) /.monad))

               (_.coverage [/.value]
                 (|> (pure true)
                     (/.value /.pcg_32 increase,seed)
                     product.right))
               
               (monad.let /.monad
                 [? (distinct (maybe.equivalence natural.equivalence) (/.maybe /.natural))]
                 (_.coverage [/.maybe]
                   ?))

               (monad.let /.monad
                 [predicate (/.either (pure natural.even?)
                                      (pure natural.odd?))
                  sample (/.only predicate /.natural)]
                 (_.coverage [/.only]
                   (predicate sample)))

               (monad.let /.monad
                 [predicate (/.either (pure natural.even?)
                                      (pure natural.odd?))
                  sample (/.one (function (_ it)
                                  (if (predicate it)
                                      {.:Some it}
                                      {.:None}))
                                /.natural)]
                 (_.coverage [/.one]
                   (predicate sample)))
               
               (,, (template.with [<random> <equivalence>]
                     [(monad.let /.monad
                        [? (distinct <equivalence> <random>)]
                        (_.coverage [<random>]
                          ?))]

                     [[/.bit bit.equivalence]
                      [/.i64 /64.equivalence]
                      [/.natural natural.equivalence]
                      [/.integer integer.equivalence]
                      [/.revolution revolution.equivalence]

                      [/.fraction fraction.equivalence]
                      [/.complex complex.equivalence]]))
               (monad.let /.monad
                 [? (distinct decimal.equivalence (/.only decimal.number? /.decimal))]
                 (_.coverage [/.decimal]
                   ?))
               (monad.let /.monad
                 [it /.unit_decimal]
                 (_.coverage [/.unit_decimal]
                   (and (decimal.>= +0.0 it)
                        (decimal.<= +1.0 it))))
               (monad.let /.monad
                 [it /.safe_decimal]
                 (_.coverage [/.safe_decimal]
                   (not (decimal.not_a_number? it))))
               
               (,, (template.with [<random>]
                     [(monad.let /.monad
                        [? (distinct text.equivalence (<random> 1))]
                        (_.coverage [<random>]
                          ?))]

                     [[/.unicode]
                      [/.ascii]
                      [/.alphabetic]
                      [/.alpha_numeric]
                      [/.numeric]
                      [/.upper_cased]
                      [/.lower_cased]]))
               (monad.let /.monad
                 [? (distinct natural.equivalence (/.character unicode.character))]
                 (_.coverage [/.character]
                   ?))
               (monad.let /.monad
                 [? (distinct text.equivalence (/.text (/.character unicode.character) 1))]
                 (_.coverage [/.text]
                   ?))

               (,, (template.with [<random> <equivalence>]
                     [(monad.let /.monad
                        [? (distinct (<equivalence> natural.equivalence)
                                     (<random> 2 /.natural))]
                        (_.coverage [<random>]
                          ?))]

                     [[/.list list.equivalence]
                      [/.stack stack.equivalence]
                      [/.array array.equivalence]
                      [/.queue queue.equivalence]]))
               (monad.let /.monad
                 [? (distinct set.equivalence
                              (/.set natural.hash 2 /.natural))]
                 (_.coverage [/.set]
                   ?))
               (monad.let /.monad
                 [? (distinct (dictionary.equivalence natural.equivalence)
                              (/.dictionary natural.hash 2 /.natural /.natural))]
                 (_.coverage [/.dictionary]
                   ?))
               (monad.let /.monad
                 [? (distinct (stack.equivalence natural.equivalence)
                              (is (Random (Stack Natural))
                                  (/.rec (function (_ it)
                                           (/.or (pure [])
                                                 (/.and /.natural
                                                        it))))))]
                 (_.coverage [/.rec]
                   ?))
               
               (,, (template.with [<random> <equivalence>]
                     [(monad.let /.monad
                        [? (distinct (<equivalence> natural.equivalence natural.equivalence)
                                     (<random> /.natural /.natural))]
                        (_.coverage [<random>]
                          ?))]

                     [[/.or sum.equivalence]
                      [/.and product.equivalence]]))
               (monad.let /.monad
                 [? (distinct natural.equivalence
                              (/.either /.natural /.natural))]
                 (_.coverage [/.either]
                   ?))
               (monad.let [! /.monad]
                 [it (/.try (monad.let !
                              [it /.natural]
                              (pure (if (natural.even? it)
                                        {try.:Success it}
                                        {try.:Failure ""}))))]
                 (_.coverage [/.try]
                   (natural.even? it)))

               (_.for [/.PRNG]
                      (all _.and
                           (,, (template.with [,extra <prng> <seed>]
                                 [(`` (_.coverage [(,, (template.spliced ,extra)) <prng>]
                                        (|> (distinct natural.equivalence /.natural)
                                            (/.value <prng> <seed>)
                                            product.right)))]

                                 [[[/.PCG_32 /.:increase /.:seed] /.pcg_32 increase,seed]
                                  [[/.Xoroshiro_128+ /.:seed_0 /.:seed_1] /.xoroshiro_128+ increase,seed]
                                  [[/.Split_Mix_64] /.split_mix_64 (.natural seed)]]))
                           (_.coverage [/.prng]
                             (|> (distinct natural.equivalence /.natural)
                                 (/.value (/.prng ++ (|>> .i64)) seed)
                                 product.right))
                           ))
               ))))
