... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" functor)]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["[0]" natural]
      ["[0]" decimal]]]]
   [test
    ["_" property (.only Test)]]
   [macro
    ["[0]" expansion]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [])
      (expansion.let [,every_natural (these /.degree /.gradian /.per_cent /.per_mille /.per_myriad)
                      ,every_decimal (these /.radian /.turn)
                      ,every_unit (these ,every_natural ,every_decimal)])
      (_.for [/.Unit
              ,every_unit])
      (all _.and
           (_.coverage [/.#factor]
             (let [values (is (List (for_some (_ it) (/.Unit it)))
                              (list ,every_unit))]
               (natural.= (list.size values)
                          (set.size (set.union (set.of_list decimal.hash (list:each (|>> (its /.#factor) natural.decimal) (list ,every_natural)))
                                               (set.of_list decimal.hash (list:each (its /.#factor) (list ,every_decimal))))))))
           (_.coverage [/.#suffix]
             (let [values (is (List (for_some (_ it) (/.Unit it)))
                              (list ,every_unit))]
               (natural.= (list.size values)
                          (set.size (set.of_list text.hash (list:each (its /.#suffix) values))))))
           )
      ))
