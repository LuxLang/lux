... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]
    [functor
     ["[0]" contravariant
      ["[1]T" \\test]]]]
   [data
    ["[0]" bit]
    [collection
     ["[0]" list]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]
      ["r" revolution]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only Fuzzy)
   ["/[1]" //
    ["[1]" continuous]]]])

(the trivial
  Test
  (do random.monad
    [sample random.revolution]
    (all _.and
         (_.coverage [/.empty]
           (r.= //.false (/.empty sample)))
         (_.coverage [/.full]
           (r.= //.true (/.full sample)))
         )))

(the simple
  Test
  (do [! random.monad]
    [sample random.revolution
     
     threshold_0 (by ! each (r.% .5)
                     random.revolution)
     threshold_1 (by ! each (|>> (r.% .5) (r.+ .5))
                     random.revolution)

     .let [minimum (r.minor threshold_0 threshold_1)
           maximum (r.major threshold_0 threshold_1)]]
    (all _.and
         (_.coverage [/.gradient]
           (let [ascending!
                 (let [set (/.gradient minimum maximum)]
                   (and (r.= //.false (set minimum))
                        (r.= //.true (set maximum))
                        (let [membership (set sample)]
                          (if (r.<= minimum sample)
                              (r.= //.false membership)
                              
                              (r.>= maximum sample)
                              (r.= //.true membership)

                              (r.> //.false membership)))))

                 descending!
                 (let [set (/.gradient maximum minimum)]
                   (and (r.= //.true (set minimum))
                        (r.= //.false (set maximum))
                        (let [membership (set sample)]
                          (if (r.<= minimum sample)
                              (r.= //.true membership)
                              
                              (r.>= maximum sample)
                              (r.= //.false membership)

                              (r.> //.false membership)))))]
             (and ascending!
                  descending!)))
         (_.coverage [/.membership]
           (let [set (/.gradient minimum maximum)]
             (r.= (set sample)
                  (/.membership set sample))))
         )))

(the composition
  Test
  (do [! random.monad]
    [sample random.revolution
     
     [minimum middle_minimum middle_maximum maximum]
     (|> random.revolution
         (random.set r.hash 4)
         (by ! each (|>> set.as_list (list.sorted r.<)))
         (random.one (function (_ thresholds)
                       (when thresholds
                         (list threshold_0 threshold_1 threshold_2 threshold_3)
                         {.#Some [threshold_0 threshold_1 threshold_2 threshold_3]}

                         _
                         {.#None}))))

     .let [minimum_set (/.gradient minimum middle_minimum)
           maximum_set (/.gradient middle_maximum maximum)]]
    (all _.and
         (_.coverage [/.union]
           (let [set (/.gradient minimum maximum)]
             (and (r.= (/.membership set sample)
                       (/.membership (/.union /.empty set) sample))
                  (r.= (/.membership /.full sample)
                       (/.membership (/.union /.full set) sample))

                  (r.>= (/.membership minimum_set sample)
                        (/.membership (/.union minimum_set maximum_set) sample))
                  (r.>= (/.membership maximum_set sample)
                        (/.membership (/.union minimum_set maximum_set) sample)))))
         (_.coverage [/.intersection]
           (let [set (/.gradient minimum maximum)]
             (and (r.= (/.membership /.empty sample)
                       (/.membership (/.intersection /.empty set) sample))
                  (r.= (/.membership set sample)
                       (/.membership (/.intersection /.full set) sample))

                  (r.<= (/.membership minimum_set sample)
                        (/.membership (/.intersection minimum_set maximum_set) sample))
                  (r.<= (/.membership maximum_set sample)
                        (/.membership (/.intersection minimum_set maximum_set) sample)))))
         (_.coverage [/.complement]
           (let [set (/.gradient minimum maximum)

                 trivial!
                 (and (r.= (/.membership /.full sample)
                           (/.membership (/.complement /.empty) sample))
                      (r.= (/.membership /.empty sample)
                           (/.membership (/.complement /.full) sample)))

                 common!
                 (and (r.>= (/.membership set sample)
                            (/.membership (/.union set (/.complement set)) sample))
                      (r.<= (/.membership set sample)
                            (/.membership (/.intersection set (/.complement set)) sample)))

                 de_morgan!
                 (and (r.= (/.membership (/.complement (/.union minimum_set maximum_set))
                                         sample)
                           (/.membership (/.intersection (/.complement minimum_set) (/.complement maximum_set))
                                         sample))
                      (r.= (/.membership (/.complement (/.intersection minimum_set maximum_set))
                                         sample)
                           (/.membership (/.union (/.complement minimum_set) (/.complement maximum_set))
                                         sample)))]
             (and trivial!
                  common!
                  de_morgan!)))
         (_.coverage [/.difference]
           (let [set (/.gradient minimum maximum)]
             (and (r.= (/.membership set sample)
                       (/.membership (/.difference /.empty set) sample))
                  (r.= (/.membership /.empty sample)
                       (/.membership (/.difference /.full set) sample))

                  (r.<= (/.membership maximum_set sample)
                        (/.membership (/.difference minimum_set maximum_set) sample))
                  (r.<= (/.membership minimum_set sample)
                        (/.membership (/.difference minimum_set maximum_set) sample)))))
         )))

(the geometric
  Test
  (<| (_.covering /._)
      (_.for [/.Fuzzy])
      (do [! random.monad]
        [sample random.revolution

         [minimum middle_minimum middle_maximum maximum]
         (|> random.revolution
             (random.set r.hash 4)
             (by ! each (|>> set.as_list (list.sorted r.<)))
             (random.one (function (_ thresholds)
                           (when thresholds
                             (list threshold_0 threshold_1 threshold_2 threshold_3)
                             {.#Some [threshold_0 threshold_1 threshold_2 threshold_3]}

                             _
                             {.#None}))))]
        (all _.and
             (_.coverage [/.triangle]
               (let [reference (/.triangle minimum middle_minimum maximum)

                     irrelevant_order!
                     (list.every? (function (_ set)
                                    (r.= (/.membership reference sample)
                                         (/.membership set sample)))
                                  (list (/.triangle minimum maximum middle_minimum)
                                        (/.triangle middle_minimum minimum maximum)
                                        (/.triangle middle_minimum maximum minimum)
                                        (/.triangle maximum minimum middle_minimum)
                                        (/.triangle maximum middle_minimum minimum)))

                     middle_maximum!
                     (r.= //.true (/.membership reference middle_minimum))

                     boundary_minima!
                     (and (r.= //.false (/.membership reference minimum))
                          (r.= //.false (/.membership reference maximum)))

                     inside_range!
                     (bit.= (r.> //.false (/.membership reference sample))
                            (and (r.> minimum sample)
                                 (r.< maximum sample)))

                     outside_range!
                     (bit.= (r.= //.false (/.membership reference sample))
                            (or (r.<= minimum sample)
                                (r.>= maximum sample)))]
                 (and irrelevant_order!
                      middle_maximum!
                      boundary_minima!
                      inside_range!
                      outside_range!)))
             (_.coverage [/.trapezoid]
               (let [reference (/.trapezoid minimum middle_minimum middle_maximum maximum)

                     irrelevant_order!
                     (list.every? (function (_ set)
                                    (r.= (/.membership reference sample)
                                         (/.membership set sample)))
                                  (let [r0 minimum
                                        r1 middle_minimum
                                        r2 middle_maximum
                                        r3 maximum]
                                    (list (/.trapezoid r0 r1 r2 r3)
                                          (/.trapezoid r0 r1 r3 r2)
                                          (/.trapezoid r0 r2 r1 r3)
                                          (/.trapezoid r0 r2 r3 r1)
                                          (/.trapezoid r0 r3 r1 r2)
                                          (/.trapezoid r0 r3 r2 r1)
                                          
                                          (/.trapezoid r1 r0 r2 r3)
                                          (/.trapezoid r1 r0 r3 r2)
                                          (/.trapezoid r1 r2 r0 r3)
                                          (/.trapezoid r1 r2 r3 r0)
                                          (/.trapezoid r1 r3 r0 r2)
                                          (/.trapezoid r1 r3 r2 r0)

                                          (/.trapezoid r2 r0 r1 r3)
                                          (/.trapezoid r2 r0 r3 r1)
                                          (/.trapezoid r2 r1 r0 r3)
                                          (/.trapezoid r2 r1 r3 r0)
                                          (/.trapezoid r2 r3 r0 r1)
                                          (/.trapezoid r2 r3 r1 r0)

                                          (/.trapezoid r3 r0 r1 r2)
                                          (/.trapezoid r3 r0 r2 r1)
                                          (/.trapezoid r3 r1 r0 r2)
                                          (/.trapezoid r3 r1 r2 r0)
                                          (/.trapezoid r3 r2 r0 r1)
                                          (/.trapezoid r3 r2 r1 r0)
                                          )))

                     middle_maxima!
                     (and (r.= //.true (/.membership reference middle_minimum))
                          (r.= //.true (/.membership reference middle_maximum)))

                     boundary_minima!
                     (and (r.= //.false (/.membership reference minimum))
                          (r.= //.false (/.membership reference maximum)))

                     inside_range!
                     (bit.= (r.> //.false (/.membership reference sample))
                            (and (r.> minimum sample)
                                 (r.< maximum sample)))

                     outside_range!
                     (bit.= (r.= //.false (/.membership reference sample))
                            (or (r.<= minimum sample)
                                (r.>= maximum sample)))


                     inside_inner_range!
                     (bit.= (r.= //.true (/.membership reference sample))
                            (and (r.<= middle_maximum sample)
                                 (r.>= middle_minimum sample)))]
                 (and irrelevant_order!
                      middle_maxima!
                      boundary_minima!
                      inside_range!
                      outside_range!
                      inside_inner_range!)))
             ))))

(the discrete
  Test
  (do random.monad
    [threshold random.natural
     .let [under? (n.< threshold)
           set (set.of_list n.hash (list threshold))]
     sample random.natural]
    (all _.and
         (_.coverage [/.of_predicate]
           (bit.= (r.= //.true (/.membership (/.of_predicate under?) sample))
                  (under? sample)))
         (_.coverage [/.of_set]
           (and (r.= //.true (/.membership (/.of_set set) threshold))
                (bit.= (r.= //.true (/.membership (/.of_set set) sample))
                       (set.member? set sample))))
         )))

(the gradient
  (Random [[Revolution Revolution] (Fuzzy Revolution)])
  (do random.monad
    [sample random.revolution
     
     threshold_0 random.revolution
     threshold_1 random.revolution

     .let [minimum (r.minor threshold_0 threshold_1)
           maximum (r.major threshold_0 threshold_1)]]
    (pure [[minimum maximum]
           (/.gradient minimum maximum)])))

(the threshold
  Test
  (do random.monad
    [[_ set] ..gradient
     threshold random.revolution
     sample random.revolution]
    (all _.and
         (_.coverage [/.predicate]
           (bit.= (not ((/.predicate threshold set) sample))
                  (r.< threshold (/.membership set sample))))
         (_.coverage [/.cut]
           (bit.= (r.= //.false (/.membership (/.cut threshold set) sample))
                  (r.< threshold (/.membership set sample))))
         )))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Fuzzy])
      (do random.monad
        [sample random.revolution
         [_ fuzzy] ..gradient
         .let [equivalence (is (Equivalence (/.Fuzzy Revolution))
                               (implementation
                                (the (= left right)
                                  (r.= (left sample)
                                       (right sample)))))]]
        (all _.and
             (_.for [/.functor]
                    (contravariantT.spec equivalence fuzzy /.functor))
             
             ..trivial
             ..simple
             ..composition
             ..geometric
             ..discrete
             ..threshold
             ))))
