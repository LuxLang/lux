... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [math
    ["[0]" random]
    [number
     ["r" rev]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [left random.rev
         mid random.rev
         right random.rev]
        (`` (all _.and
                 (,, (with_template [<monoid>]
                       [(_.for [<monoid>]
                               (monoidT.spec r.= <monoid> random.rev))]
                       
                       [/.disjunction]
                       [/.conjunction]
                       ))
                 
                 (_.coverage [/.true /.false]
                   (let [true=max!
                         (r.= /.false (++ /.true))

                         false=min!
                         (r.= /.true (-- /.false))]
                     (and true=max!
                          false=min!)))
                 (_.coverage [/.or]
                   (let [identity!
                         (r.= left (/.or /.false left))

                         annihilation!
                         (r.= /.true (/.or /.true left))
                         
                         idempotence!
                         (r.= left (/.or left left))

                         associativity!
                         (r.= (all /.or left mid right)
                              (.left /.or left mid right))]
                     (and identity!
                          annihilation!
                          idempotence!
                          associativity!
                          (let [l|r (/.or left right)]
                            (and (r.>= left l|r)
                                 (r.>= right l|r))))))
                 (_.coverage [/.and]
                   (let [identity!
                         (r.= left (/.and /.true left))

                         annihilation!
                         (r.= /.false (/.and /.false left))
                         
                         idempotence!
                         (r.= left (/.and left left))

                         associativity!
                         (r.= (all /.and left mid right)
                              (.left /.and left mid right))]
                     (and identity!
                          annihilation!
                          idempotence!
                          associativity!
                          (let [l&r (/.and left right)]
                            (and (r.<= left l&r)
                                 (r.<= right l&r))))))
                 (_.coverage [/.not]
                   (let [inverses!
                         (and (r.= /.false (/.not /.true))
                              (r.= /.true (/.not /.false)))

                         double_negation!
                         (r.= left (/.not (/.not left)))

                         de_morgan!
                         (and (r.= (/.not (/.or left right))
                                   (/.and (/.not left) (/.not right)))
                              (r.= (/.not (/.and left right))
                                   (/.or (/.not left) (/.not right))))]
                     (and inverses!
                          double_negation!
                          de_morgan!)))
                 (_.coverage [/.implies]
                   (let [modus_tollens!
                         (r.= (/.implies right left)
                              (/.implies (/.not left) (/.not right)))]
                     (and modus_tollens!)))
                 (_.coverage [/.=]
                   (let [trivial!
                         (and (r.= /.true (/.= /.true /.true))
                              (r.= /.true (/.= /.false /.false))

                              (r.= /.false (/.= /.true /.false)))

                         common!
                         (and (r.>= left
                                    (/.= left left))
                              (r.>= right
                                    (/.= right right)))]
                     (and trivial!
                          common!)))
                 )))))
