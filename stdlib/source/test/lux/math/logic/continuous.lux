(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    [abstract
     [monad {"+" [do]}]
     [\\specification
      ["$." monoid]]]
    [math
     ["." random]
     [number
      ["r" rev]]]]]
  [\\library
   ["." /]])

(def: .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [left random.rev
         mid random.rev
         right random.rev]
        (`` ($_ _.and
                (~~ (template [<monoid>]
                      [(_.for [<monoid>]
                              ($monoid.spec r.= <monoid> random.rev))]
                      
                      [/.disjunction]
                      [/.conjunction]
                      ))
                
                (_.cover [/.true /.false]
                         (let [true=max!
                               (r.= /.false (++ /.true))

                               false=min!
                               (r.= /.true (-- /.false))]
                           (and true=max!
                                false=min!)))
                (_.cover [/.or]
                         (let [identity!
                               (r.= left (/.or /.false left))

                               annihilation!
                               (r.= /.true (/.or /.true left))
                               
                               idempotence!
                               (r.= left (/.or left left))

                               associativity!
                               (r.= ($_ /.or left mid right)
                                    (_$ /.or left mid right))]
                           (and identity!
                                annihilation!
                                idempotence!
                                associativity!
                                (let [l|r (/.or left right)]
                                  (and (r.>= left l|r)
                                       (r.>= right l|r))))))
                (_.cover [/.and]
                         (let [identity!
                               (r.= left (/.and /.true left))

                               annihilation!
                               (r.= /.false (/.and /.false left))
                               
                               idempotence!
                               (r.= left (/.and left left))

                               associativity!
                               (r.= ($_ /.and left mid right)
                                    (_$ /.and left mid right))]
                           (and identity!
                                annihilation!
                                idempotence!
                                associativity!
                                (let [l&r (/.and left right)]
                                  (and (r.<= left l&r)
                                       (r.<= right l&r))))))
                (_.cover [/.not]
                         (let [inverses!
                               (and (r.= /.false (/.not /.true))
                                    (r.= /.true (/.not /.false)))

                               double_negation!
                               (r.= left (/.not (/.not left)))

                               de_morgan!
                               (and (r.= (/.not (/.or left right))
                                         (/.and (/.not left) (/.not right)))
                                    (r.= (/.not (/.and left right))
                                         (/.or (/.not left) (/.not right))))]
                           (and inverses!
                                double_negation!
                                de_morgan!)))
                (_.cover [/.implies]
                         (let [modus_tollens!
                               (r.= (/.implies right left)
                                    (/.implies (/.not left) (/.not right)))]
                           (and modus_tollens!)))
                (_.cover [/.=]
                         (let [trivial!
                               (and (r.= /.true (/.= /.true /.true))
                                    (r.= /.true (/.= /.false /.false))

                                    (r.= /.false (/.= /.true /.false)))

                               common!
                               (and (r.>= left
                                          (/.= left left))
                                    (r.>= right
                                          (/.= right right)))]
                           (and trivial!
                                common!)))
                )))))
