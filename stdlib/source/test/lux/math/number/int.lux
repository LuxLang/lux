... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" enum
     ["[1]T" \\test]]
    ["[0]" interval
     ["[1]T" \\test]]
    ["[0]" codec
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]
    ["[0]" arithmetic
     ["[1]T" \\test]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["n" nat]
    ["f" frac]
    ["[0]" i64]]]])

(def signature
  Test
  (`` (all _.and
           (_.for [/.equivalence /.=]
                  (equivalenceT.spec /.equivalence random.int))
           (_.for [/.hash]
                  (hashT.spec /.hash random.int))
           (_.for [/.order /.<]
                  (orderT.spec /.order random.int))
           (_.for [/.enum]
                  (enumT.spec /.enum random.int))
           (_.for [/.interval]
                  (intervalT.spec /.interval random.int))
           (,, (with_template [<monoid>]
                 [(_.for [<monoid>]
                         (monoidT.spec /.equivalence <monoid> random.int))]
                 
                 [/.addition]
                 [/.multiplication]

                 [/.minimum]
                 [/.maximum]
                 ))
           (,, (with_template [<codec>]
                 [(_.for [<codec>]
                         (codecT.spec /.equivalence <codec> random.int))]

                 [/.binary] [/.octal] [/.decimal] [/.hex]
                 ))
           (_.coverage [/.base_02]
             (same? /.binary /.base_02))
           (_.coverage [/.base_08]
             (same? /.octal /.base_08))
           (_.coverage [/.base_10]
             (same? /.decimal /.base_10))
           (_.coverage [/.base_16]
             (same? /.hex /.base_16))
           (_.for [/.arithmetic]
                  (arithmeticT.spec /.equivalence /.arithmetic random.int))
           )))

(def predicate
  Test
  (do [! random.monad]
    [sample random.int]
    (all _.and
         (_.coverage [/.negative?]
           (bit#= (/.negative? sample)
                  (/.< +0 sample)))
         (_.coverage [/.positive?]
           (bit#= (/.positive? sample)
                  (/.> +0 sample)))
         (_.coverage [/.zero?]
           (bit#= (/.zero? sample)
                  (/.= +0 sample)))
         (_.coverage [/.even? /.odd?]
           (bit#= (/.even? sample)
                  (not (/.odd? sample))))
         )))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [.Int])
      (let [(open "/#[0]") /.interval])
      (all _.and
           (do random.monad
             [sample random.int
              left random.int
              right random.int]
             (all _.and
                  (_.coverage [/.+]
                    (and (/.= (/.+ left right)
                              (/.+ right left))
                         (/.= sample (/.+ +0 sample))))
                  (_.coverage [/.-]
                    (and (/.= +0 (/.- sample sample))
                         (/.= sample (/.- +0 sample))
                         (/.= (/.opposite sample)
                              (/.- sample +0))
                         (/.= /#bottom
                              (/.- /#bottom +0))))
                  (_.coverage [/.*]
                    (and (/.= (/.* left right)
                              (/.* right left))
                         (/.= sample (/.* +1 sample))
                         (/.= /#bottom
                              (/.* -1 /#bottom))))
                  (_.coverage [/./]
                    (and (/.= +1 (/./ sample sample))
                         (/.= sample (/./ +1 sample))
                         (/.= /#bottom
                              (/./ -1 /#bottom))))
                  (_.coverage [/.abs]
                    (bit#= (/.> sample (/.abs sample))
                           (/.negative? sample)))
                  (_.coverage [/.signum]
                    (/.= (/.abs sample)
                         (/.* (/.signum sample) sample)))
                  (_.coverage [/.min]
                    (and (/.= (/.min left right)
                              (/.min right left))
                         (/.= sample
                              (/.min /#top sample))
                         (/.= /#bottom
                              (/.min /#bottom sample))))
                  (_.coverage [/.max]
                    (and (/.= (/.max left right)
                              (/.max right left))
                         (/.= /#top
                              (/.max /#top sample))
                         (/.= sample
                              (/.max /#bottom sample))))
                  ))
           (do random.monad
             [left random.int
              right random.int]
             (all _.and
                  (_.coverage [/.>]
                    (bit#= (/.> left right)
                           (/.< right left)))
                  (_.coverage [/.<= /.>=]
                    (bit#= (/.<= left right)
                           (/.>= right left)))
                  ))
           (do random.monad
             [left (random.only (|>> (/.= +0) not)
                                random.int)
              right random.int]
             (all _.and
                  (_.coverage [/.%]
                    (let [rem (/.% left right)
                          div (|> right (/.- rem) (/./ left))]
                      (/.= right
                           (|> div (/.* left) (/.+ rem)))))
                  (_.coverage [/./%]
                    (let [[div rem] (/./% left right)]
                      (and (/.= div (/./ left right))
                           (/.= rem (/.% left right)))))
                  (_.coverage [/.mod]
                    (and (/.= (/.signum left)
                              (/.signum (/.mod left right)))
                         (/.= (/.signum right)
                              (/.signum (/.% left right)))
                         (if (/.= (/.signum left) (/.signum right))
                           (/.= (/.% left right)
                                (/.mod left right))
                           (or (and (/.= +0 (/.% left right))
                                    (/.= +0 (/.mod left right)))
                               (/.= (/.+ left (/.% left right))
                                    (/.mod left right))))))
                  ))
           (do [! random.monad]
             [.let [random (|> random.int
                               (of ! each (/.% +1,000))
                               (random.only (|>> (/.= +0) not)))]
              left random
              right random]
             (all _.and
                  (_.coverage [/.gcd]
                    (let [gcd (/.gcd left right)]
                      (and (/.= +0 (/.% gcd left))
                           (/.= +0 (/.% gcd right)))))
                  (_.coverage [/.extended_gcd]
                    (let [[[left_k right_k] gcd] (/.extended_gcd left right)

                          same_gcd!
                          (/.= gcd
                               (/.gcd left right))
                          
                          bezout_identity!
                          (/.= gcd
                               (/.+ (/.* left_k left)
                                    (/.* right_k right)))]
                      (and same_gcd!
                           bezout_identity!)))
                  (_.coverage [/.co_prime?]
                    (bit#= (/.= +1 (/.gcd left right))
                           (/.co_prime? left right)))
                  (_.coverage [/.lcm]
                    (let [lcm (/.lcm left right)]
                      (and (/.= +0 (/.% left lcm))
                           (/.= +0 (/.% right lcm)))))
                  ))
           (do random.monad
             [expected random.int]
             (_.coverage [/.opposite]
               (let [subtraction!
                     (/.= +0 (/.+ (/.opposite expected) expected))

                     inverse!
                     (|> expected /.opposite /.opposite (/.= expected))]
                 (and subtraction!
                      inverse!))))
           (do [! random.monad]
             [expected (of ! each (/.% +1,000,000) random.int)
              sample random.int]
             (_.coverage [/.frac]
               (and (|> expected /.frac f.int (/.= expected))
                    (f.number? (/.frac sample)))))
           (do [! random.monad]
             [pattern random.int
              idx (of ! each (n.% i64.width) random.nat)]
             (_.coverage [/.right_shifted]
               (let [nullity!
                     (/.= pattern (/.right_shifted 0 pattern))

                     idempotency!
                     (/.= pattern (/.right_shifted i64.width pattern))

                     sign_mask (i64.left_shifted (-- i64.width) 1)
                     mantissa_mask (-- (i64.left_shifted (n.- idx i64.width) 1))
                     co_mantissa_mask (i64.not mantissa_mask)

                     sign_preservation!
                     (/.= (i64.and sign_mask pattern)
                          (i64.and sign_mask (/.right_shifted idx pattern)))

                     mantissa_parity!
                     (/.= (i64.and mantissa_mask (i64.right_shifted idx pattern))
                          (i64.and mantissa_mask (/.right_shifted idx pattern)))

                     co_mantissa_disparity!
                     (or (n.= 0 idx)
                         (and (/.= +0 (i64.and co_mantissa_mask (i64.right_shifted idx pattern)))
                              (/.= (if (/.< +0 pattern)
                                     (.int co_mantissa_mask)
                                     +0)
                                   (i64.and co_mantissa_mask (/.right_shifted idx pattern)))))]
                 (and nullity!
                      idempotency!
                      sign_preservation!
                      mantissa_parity!
                      co_mantissa_disparity!
                      ))))

           ..predicate
           ..signature
           )))
