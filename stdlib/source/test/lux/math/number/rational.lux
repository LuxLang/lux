... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]
    ["[0]" try]]
   [data
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" functor)]
    ["[0]" arithmetic
     ["[1]T" \\test]]]
   [meta
    ["[0]" static]
    [macro
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["n" natural]
    ["i" integer]
    ["d" decimal]]]])

(the .public random
  (Random /.Rational)
  (random#each /.normal
               (random.and (random#each (i.% +1,000,000) random.integer)
                           (random#each (n.% 1,000,000) random.natural))))

(the (identical? reference exemplar)
  (-> /.Rational /.Rational
      Bit)
  (and (i.= (its /.#numerator reference)
            (its /.#numerator exemplar))
       (n.= (its /.#denominator reference)
            (its /.#denominator exemplar))))

(the (normal? it)
  (-> /.Rational
      Bit)
  (identical? it (/.normal it)))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Rational
              /.#numerator /.#denominator])
      (do random.monad
        [expected ..random])
      (`` (all _.and
               (_.for [/.equivalence /.=]
                      (static.when (same? /.equivalence /.=)
                        (equivalenceT.spec /.equivalence ..random)))
               (_.for [/.order /.<]
                      (static.when (same? (of /.order <) /.<)
                        (orderT.spec /.order ..random)))
               (,, (template.with [<composite> <monoid>]
                     [(_.for [<monoid> <composite>]
                             (monoidT.spec /.equivalence <monoid> ..random))]

                     [/.+ /.addition]
                     [/.* /.multiplication]
                     ))
               (_.for [/.format]
                      (formatT.spec /.equivalence /.format ..random))
               (_.for [/.arithmetic]
                      (arithmeticT.spec /.equivalence /.arithmetic ..random))

               (_.coverage [/.Number /.Q]
                 (and (alias? /.Rational /.Number)
                      (alias? /.Rational /.Q)))
               (_.coverage [/.as_text]
                 (alias? (of /.format injection)
                         /.as_text))
               (_.coverage [/.zero]
                 (and (/.= expected (/.+ /.zero expected))
                      (/.= expected (/.- /.zero expected))
                      
                      (/.= /.zero (/.* /.zero expected))
                      (/.= /.infinity (/./ /.zero expected))))
               (_.coverage [/.one]
                 (and (/.= expected (/.* /.one expected))
                      (/.= expected (/./ /.one expected))))
               (_.coverage [/.infinity]
                 (and (/.= /.infinity (/./ /.zero /.one))

                      (/.= /.infinity (/.+ /.infinity expected))
                      (/.= /.infinity (/.- /.infinity expected))
                      
                      (/.= /.infinity (/.* /.infinity expected))
                      (/.= /.zero (/./ /.infinity expected))))
               (_.coverage [/.indeterminate]
                 (and (/.= /.indeterminate expected)

                      (/.= (/.+ /.indeterminate expected)
                           (/.- /.indeterminate expected))
                      
                      (/.= (/.* /.indeterminate expected)
                           (/./ /.indeterminate expected))))
               (_.coverage [/.finite?]
                 (and (/.finite? expected)
                      (not (/.finite? /.infinity))))
               (_.coverage [/.determinate?]
                 (and (/.determinate? expected)
                      (not (/.determinate? /.indeterminate))))
               (_.coverage [/.whole /.partial]
                 (/.= expected
                      (/.+ (/.whole expected)
                           (/.partial expected))))
               (_.coverage [/.positive? /.negative?]
                 (bit.= (/.positive? expected)
                        (not (/.negative? expected))))
               (_.coverage [/.positive]
                 (alias? /.one /.positive))
               (_.coverage [/.negative]
                 (and (not (/.= /.positive /.negative))
                      (/.= /.positive (/.* /.negative /.negative))))
               (_.coverage [/.opposite]
                 (and (not (/.= /.positive (/.opposite expected)))
                      (/.= expected (/.opposite (/.opposite expected)))))
               (_.coverage [/.decimal]
                 (let [margin_of_error +0.000,000,000,000,1]
                   (and (d.approximately? margin_of_error
                                          (/.decimal (/.whole expected))
                                          (d.whole (/.decimal expected)))
                        (d.approximately? margin_of_error
                                          (/.decimal (/.partial expected))
                                          (d.partial (/.decimal expected))))))
               
               (do random.monad
                 [denom/0 random.natural
                  denom/1 random.natural]
                 (_.coverage [/.rational]
                   (/.= (/.rational +0 denom/0)
                        (/.rational +0 denom/1))))
               (do [! random.monad]
                 [before_normal (random.and random.integer
                                            random.natural)]
                 (_.coverage [/.normal]
                   (or (normal? before_normal)
                       (let [it (/.normal before_normal)]
                         (and (normal? it)
                              (/.= before_normal it))))))
               (do random.monad
                 [numerator random.integer
                  denominator (random.only (|>> (n.= 1) not)
                                           random.natural)]
                 (_.coverage [/.integer]
                   (let [only_numerator!
                         (|> (/.rational numerator)
                             /.integer
                             (maybe#each (i.= numerator))
                             (maybe.else false))

                         denominator_1!
                         (|> (/.rational numerator 1)
                             /.integer
                             (maybe#each (i.= numerator))
                             (maybe.else false))

                         with_denominator!
                         (when (/.integer (/.rational numerator (.natural denominator)))
                           {try.#Success factor}
                           (and (i.= +0 (i.% (.integer denominator) numerator))
                                (i.= numerator (i.* factor (.integer denominator))))
                           
                           {try.#Failure _}
                           (not (i.= +0 (i.% (.integer denominator) numerator))))]
                     (and only_numerator!
                          denominator_1!
                          with_denominator!))))
               (_.coverage [/.not_an_integer]
                 (or (|> (/.partial expected)
                         /.integer
                         (try.is? /.not_an_integer))
                     (and (/.= /.zero (/.partial expected))
                          (/.= expected (/.whole expected)))))
               (do random.monad
                 [sample ..random]
                 (all _.and
                      (_.coverage [/.-]
                        (and (/.= (/.rational +0) (/.- sample sample))
                             (/.= sample (/.- (/.rational +0) sample))))
                      (_.coverage [/./]
                        (and (/.= (/.rational +1) (/./ sample sample))
                             (/.= sample (/./ (/.rational +1) sample))))
                      (_.coverage [/.reciprocal]
                        (/.= (/.rational +1)
                             (/.* sample (/.reciprocal sample))))
                      ))
               (do random.monad
                 [left (random.only (|>> (/.= (/.rational +0)) not)
                                    ..random)
                  right ..random]
                 (_.coverage [/.%]
                   (let [rem (/.% left right)
                         div (|> right (/.- rem) (/./ left))]
                     (and (/.= right
                               (|> div (/.* left) (/.+ rem)))
                          (when (/.integer div)
                            {try.#Success _} true
                            {try.#Failure _} false)))))
               (do random.monad
                 [left ..random
                  right ..random]
                 (all _.and
                      (_.coverage [/.>]
                        (bit.= (/.> left right)
                               (/.< right left)))
                      (_.coverage [/.<= /.>=]
                        (bit.= (/.<= left right)
                               (/.>= right left)))
                      ))
               ))))
