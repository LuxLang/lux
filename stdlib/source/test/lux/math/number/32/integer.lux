... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [data
    ["[0]" binary (.only)
     ["![1]" \\injection]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Integer /.Number
              /.random])
      (monad.let [! random.monad]
        [expected_0 /.random
         expected_1 /.random])
      (all _.and
           (_.for [/.equivalence /.=]
                  (static.when (identical? /.equivalence /.=)
                    (equivalenceT.spec /.equivalence /.random)))
           (_.for [/.hash]
                  (hashT.spec /.hash /.random))
           (_.for [/.order
                   /.< /.<= /.> /.>=
                   /.minor /.major]
                  (orderT.spec /.order /.random))
           
           (_.coverage [/.maximum]
             (or (by /.order < /.maximum expected_0)
                 (/.= /.maximum expected_0)))
           (_.coverage [/.minimum]
             (or (by /.order < expected_0 /.minimum)
                 (/.= expected_0 /.minimum)))
           (_.coverage [/.valid?]
             (and (/.valid? (/.as /.minimum))
                  (/.valid? (++ (/.as /.minimum)))
                  (not (/.valid? (-- (/.as /.minimum))))

                  (/.valid? (/.as /.maximum))
                  (/.valid? (-- (/.as /.maximum)))
                  (not (/.valid? (++ (/.as /.maximum))))))
           (_.coverage [/.of /.as]
             (|> expected_0
                 /.as
                 /.of
                 (/.= expected_0)))
           (_.coverage [/.-]
             (|> (/.- expected_0 expected_0)
                 /.as
                 (i.= +0)))
           (_.coverage [/.+]
             (let [zero (/.- expected_0 expected_0)
                   left (/.+ expected_0 zero)
                   right (/.+ zero expected_0)]
               (/.= left right)))
           
           (_.coverage [/.as_binary]
             (bit.= (/.= expected_0
                         expected_1)
                    (binary.= (!binary.value /.as_binary expected_0)
                              (!binary.value /.as_binary expected_1))))
           (_.coverage [/.size]
             (n.= /.size (binary.size (!binary.value /.as_binary expected_0))))
           )))
