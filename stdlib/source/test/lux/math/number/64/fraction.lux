... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equality
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" mix)]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" functor)]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]
   ["[0]" function]
   [aspect
    ["[0]" case]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["n" natural]
    ["i" integer]
    ["d" decimal]
    [///
     ["[0]" unit]]]]])

(the .public random
  (Random /.Fraction)
  (let [part (is (Random Natural)
                 (random:each (n.% 1,000) random.natural))]
    (monad.let random.monad
      [numerator part
       denominator part]
      (pure (/.new denominator numerator)))))

(the unit
  Test
  (`` (all _.and
           (,, (template.with [,format <as> <of> ,unit]
                 [(let [threshold (|> (its unit.:factor ,unit)
                                      (case.some /.natural)
                                      /.reciprocal)]
                    (all _.and
                         (_.for [,format]
                                (formatT.spec (/.approximately? threshold) ,format
                                              ..random))
                         (monad.let [! random.monad]
                           [expected ..random
                            .let [change_of_scale!
                                  (|> expected
                                      <as>
                                      (by /.equality = expected)
                                      not)

                                  iso_morphism!
                                  (|> expected
                                      <as>
                                      <of>
                                      (by /.equality = expected))]]
                           (_.coverage [<as> <of>]
                             (and change_of_scale!
                                  iso_morphism!)))
                         ))]

                 [[/.degree /.as_degree /.of_degree unit.degree]
                  [/.gradian /.as_gradian /.of_gradian unit.gradian]
                  [/.per_cent /.as_per_cent /.of_per_cent unit.per_cent]
                  [/.per_mille /.as_per_mille /.of_per_mille unit.per_mille]
                  [/.per_myriad /.as_per_myriad /.of_per_myriad unit.per_myriad]]))
           )))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Number
              /.module])
      (monad.let random.monad
        [expected ..random

         it_0 ..random
         it_1 ..random])
      (`` (all _.and
               (_.for [/.equality /.=]
                      (static.when (identical? /.equality /.=)
                        (equalityT.spec /.equality ..random)))
               (_.for [/.order /.<]
                      (static.when (identical? (by /.order <) /.<)
                        (orderT.spec /.order ..random)))
               (,, (template.with [<composite> <monoid>]
                     [(_.for [<monoid> <composite>]
                             (static.when (identical? <composite> (by <monoid> composite))
                               (monoidT.spec /.equality <monoid> ..random)))]

                     [[/.+ /.addition]
                      [/.x /.multiplication]

                      [/.minor /.minimum]
                      [/.major /.maximum]]))
               (_.for [/.text /.as_text]
                      (static.when (identical? /.as_text
                                               (by /.text as))
                        (formatT.spec /.equality /.text ..random)))

               (_.coverage [/.Fraction /.Q+]
                 (and (identical? /.Number /.Fraction)
                      (identical? /.Number /.Q+)))
               (_.coverage [/.approximately?]
                 (and (bit.= (/.approximately? /.zero it_0 it_1)
                             (/.= it_0 it_1))
                      (/.approximately? (/.major it_0 it_1) it_0 it_1)
                      (or (not (/.approximately? (/.minor it_0 it_1) it_0 it_1))
                          (/.= it_0 it_1))))
               (_.coverage [/.delimiter]
                 (text.contains? /.delimiter
                                 (/.as_text expected)))
               (_.coverage [/.zero]
                 (and (/.= expected (/.+ /.zero expected))
                      (/.= expected (/.- /.zero expected))
                      
                      (/.= /.zero (/.x /.zero expected))
                      (/.= /.infinity (/./ /.zero expected))))
               (_.coverage [/.one]
                 (and (not (/.= expected (/.+ /.one expected)))
                      (/.= expected (/.x /.one expected))
                      (/.= expected (/./ /.one expected))))
               (_.coverage [/.infinity]
                 (and (/.= /.infinity (/./ /.zero /.one))

                      (/.= /.infinity (/.+ /.infinity expected))
                      (/.= /.infinity (/.- expected /.infinity))
                      (/.= /.zero (/.- /.infinity expected))
                      
                      (/.= /.infinity (/.x /.infinity expected))
                      (/.= /.zero (/./ /.infinity expected))))
               (_.coverage [/.indeterminate]
                 (and (/.= /.indeterminate (/.reciprocal /.indeterminate))
                      (/.~ /.indeterminate expected)
                      
                      (/.= /.indeterminate (/.+ /.indeterminate expected))
                      (/.= /.indeterminate (/.- /.indeterminate expected))
                      (/.= /.indeterminate (/.- expected /.indeterminate))
                      
                      (/.= /.indeterminate (/.x /.indeterminate expected))
                      (/.= /.indeterminate (/./ /.indeterminate expected))
                      (/.= /.indeterminate (/./ expected /.indeterminate))))
               (_.coverage [/.whole /.partial]
                 (/.= expected
                      (/.+ (/.whole expected)
                           (/.partial expected))))
               (_.coverage [/.natural]
                 (|> (/.whole expected)
                     (case.if /.natural)
                     (function.or (function.constant false)
                                  (|>> (case.some /.natural)
                                       (/.+ (/.partial expected))
                                       (/.= expected)))))
               (_.coverage [/.decimal]
                 (let [margin_of_error +0.000,000,000,000,1]
                   (and (d.approximately? margin_of_error
                                          (/.decimal (/.whole expected))
                                          (d.whole (/.decimal expected)))
                        (d.approximately? margin_of_error
                                          (/.decimal (/.partial expected))
                                          (d.partial (/.decimal expected))))))
               (monad.let random.monad
                 [_0 random.natural
                  _1 random.natural]
                 (_.coverage [/.new]
                   (and (/.= (/.new _0 0)
                             (/.new _1 0))
                        (/.= (/.new 0 _0)
                             (/.new 0 _1)))))
               (monad.let [! random.monad]
                 [sample ..random
                  power (by ! each (i.% +10)
                            random.integer)]
                 (all _.and
                      (_.coverage [/.-]
                        (and (/.= /.zero
                                  (/.- sample sample))
                             (/.= sample
                                  (/.- /.zero sample))))
                      (_.coverage [/./]
                        (and (/.= /.one (/./ sample sample))
                             (/.= sample (/./ /.one sample))))
                      (_.coverage [/.reciprocal]
                        (/.= /.one
                             (/.x sample (/.reciprocal sample))))
                      (_.coverage [/.Exponent /.^]
                        (and (/.= /.one (/.^ +0 sample))
                             (/.= sample (/.^ +1 sample))
                             (/.= (/.reciprocal sample)
                                  (/.^ -1 sample))
                             (/.= (/.reciprocal (/.^ power sample))
                                  (/.^ (i.opposite power) sample))
                             (if (i.< +0 power)
                                 (/.= (list:mix /.x /.one (list.repeated (.natural (i.opposite power)) sample))
                                      (/.reciprocal (/.^ power sample)))
                                 (/.= (list:mix /.x /.one (list.repeated (.natural power) sample))
                                      (/.^ power sample)))))
                      ))
               (monad.let random.monad
                 [left (random.only (|>> (/.= /.zero) not)
                                    ..random)
                  right ..random]
                 (_.coverage [/.%]
                   (let [rem (/.% left right)
                         div (|> right
                                 (/.- rem)
                                 (/./ left))]
                     (and (/.= right
                               (|> div (/.x left) (/.+ rem)))
                          (when (case.if /.natural div)
                            {.:Right _}
                            true
                            
                            else
                            false)))))
               (monad.let random.monad
                 [left ..random
                  right ..random]
                 (all _.and
                      (_.coverage [/.>]
                        (bit.= (/.> left right)
                               (/.< right left)))
                      (_.coverage [/.<= /.>=]
                        (bit.= (/.<= left right)
                               (/.>= right left)))
                      ))
               (monad.let random.monad
                 [expected ..random
                  origin ..random]
                 (_.coverage [/.inversion]
                   (and (/.= (/.reciprocal expected)
                             (/.inversion /.one expected))
                        (/.= expected
                             (/.inversion expected expected))
                        (|> expected
                            (/.inversion origin)
                            (/.inversion origin)
                            (/.= expected))
                        (/.= (/.x expected expected)
                             (/.inversion expected /.one)))))
               (_.coverage [/.numerator /.denominator]
                 (/.= expected
                      (/.new (/.denominator expected)
                             (/.numerator expected))))
               (_.coverage [/.excess]
                 (let [origin it_0
                       it it_1]
                   (and (bit.= (/.< origin it)
                               (/.> (/.- origin it) (/.excess origin it)))
                        (/.= /.zero
                             (/.excess it it))
                        (/.= origin
                             (/.excess (/.+ origin it) it)))))

               ..unit
               ))))
