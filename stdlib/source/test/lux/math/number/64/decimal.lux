... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    ["[0]" monad]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equality
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]]
   [macro
    ["[0]" template]
    ["[0]" expansion]]
   [test
    ["_" property (.only Test)]]
   [data
    ["[0]" text]]
   ["[0]" target]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["n" natural]
    ["i" integer]
    ["r" revolution]
    [//
     ["[0]" /64]
     [//
      ["[0]" unit]]]]]])

(the (positive range)
  (-> Natural
      (Random Decimal))
  (by random.monad each
      (|>> (n.% (++ range))
           n.decimal
           (/./ (n.decimal range)))
      random.natural))

(the (random range)
  (-> Natural
      (Random Decimal))
  (monad.let random.monad
    [magnitude (..positive range)
     positive? random.bit]
    (pure (if positive?
              magnitude
              (/.opposite magnitude)))))

(the constant
  Test
  (monad.let random.monad
    [sample random.unit_decimal]
    (all _.and
         (_.coverage [/.biggest]
           (/.<= /.biggest sample))
         (_.coverage [/.positive_infinity]
           (/.< /.positive_infinity sample))
         (_.coverage [/.smallest]
           (bit.= (/.positive? sample)
                  (/.>= /.smallest sample)))
         (_.coverage [/.negative_infinity]
           (/.> /.negative_infinity sample))
         (_.coverage [/.not_a_number /.not_a_number?]
           (and (/.not_a_number? /.not_a_number)
                (not (or (/.= /.not_a_number sample)
                         (/.not_a_number? sample)))))
         )))

(the predicate
  Test
  (monad.let [! random.monad]
    [sample (..random 1,000,000)
     shift (by ! each /.absolute (..random 1,000,000))]
    (all _.and
         (_.coverage [/.negative?]
           (bit.= (/.negative? sample)
                  (/.< +0.0 sample)))
         (_.coverage [/.positive?]
           (bit.= (/.positive? sample)
                  (/.> +0.0 sample)))
         (_.coverage [/.zero?]
           (bit.= (/.zero? sample)
                  (/.= +0.0 sample)))
         (_.coverage [/.approximately?]
           (and (/.approximately? /.smallest sample sample)
                (/.approximately? (/.+ +1.0 shift) sample (/.+ shift sample))))
         (_.coverage [/.number?]
           (and (not (/.number? /.not_a_number))
                (not (/.number? /.positive_infinity))
                (not (/.number? /.negative_infinity))
                (/.number? sample)))
         )))

(the conversion
  Test
  (all _.and
       (monad.let [! random.monad]
         [expected (by ! each (n.% 1,000,000) random.natural)]
         (_.coverage [/.natural]
           (|> expected n.decimal /.natural (n.= expected))))
       (monad.let [! random.monad]
         [expected (by ! each (i.% +1,000,000) random.integer)]
         (_.coverage [/.integer]
           (|> expected i.decimal /.integer (i.= expected))))
       (monad.let [! random.monad]
         [expected (by ! each (|>> (/64.<< 52) .revolution)
                       random.natural)]
         (_.coverage [/.revolution]
           (|> expected r.decimal /.revolution (r.= expected))))
       ))

(the signature
  Test
  (`` (all _.and
           (_.for [/.equality]
                  (equalityT.spec /.equality random.unit_decimal))
           (_.for [/.hash]
                  (hashT.spec /.hash random.decimal))
           (_.for [/.order /.<]
                  (orderT.spec /.order random.unit_decimal))
           (,, (template.with [<composite> <monoid>]
                 [(_.for [<monoid> <composite>]
                         (monoidT.spec (/.approximately? +0.000001) <monoid>
                                       (..random 1,000,000)))]

                 [[/.+ /.addition]
                  [/.x /.multiplication]

                  [/.minor /.minimum]
                  [/.major /.maximum]]))
           (,, (template.with [<format>]
                 [(_.for [<format>]
                         (formatT.spec /.equality <format> random.unit_decimal))]

                 [[/.base_02]
                  [/.base_08]
                  [/.base_10]
                  [/.base_16]]))
           (monad.let random.monad
             [it random.safe_decimal]
             (all _.and
                  (_.coverage [/.delimiter]
                    (and (text.contains? /.delimiter (by /.base_02 as it))
                         (text.contains? /.delimiter (by /.base_08 as it))
                         (text.contains? /.delimiter (by /.base_10 as it))
                         (text.contains? /.delimiter (by /.base_16 as it))))
                  (_.coverage [/.delimiter_for_exponentiation]
                    (and (text.contains? /.delimiter_for_exponentiation (by /.base_02 as it))
                         (text.contains? /.delimiter_for_exponentiation (by /.base_08 as it))
                         (text.contains? /.delimiter_for_exponentiation (by /.base_10 as it))
                         (text.contains? /.delimiter_for_exponentiation (by /.base_16 as it))))))
           (,, (template.with [<format> ,unit]
                 [(_.for [<format>]
                         (let [threshold (/./ (n.decimal (its unit.:factor ,unit)) +1.0)]
                           (formatT.spec (/.approximately? threshold) <format>
                                         (..random (its unit.:factor ,unit)))))]

                 [[/.degree unit.degree]
                  [/.gradian unit.gradian]
                  [/.per_cent unit.per_cent]
                  [/.per_mille unit.per_mille]
                  [/.per_myriad unit.per_myriad]]))
           )))

(target.if target.jvm
           (ffi.the java/lang/Double
             "[1]:[0]"
             ("static" doubleToRawLongBits [double] long)
             ("static" longBitsToDouble [long] double))

           ... else
           (these))

(the margin_of_error
  +0.0000001)

(the test|math
  Test
  (all _.and
       (monad.let [! random.monad]
         [sample (|> random.unit_decimal (by ! each (/.x +1000.0)))]
         (all _.and
              (_.coverage [/.ceil]
                (let [ceil'd (/.ceil sample)]
                  (and (|> ceil'd /.integer i.decimal (/.= ceil'd))
                       (/.>= sample ceil'd)
                       (/.<= +1.0 (/.- sample ceil'd)))))
              (_.coverage [/.floor]
                (let [floor'd (/.floor sample)]
                  (and (|> floor'd /.integer i.decimal (/.= floor'd))
                       (/.<= sample floor'd)
                       (/.<= +1.0 (/.- floor'd sample)))))
              (_.coverage [/.round]
                (let [round'd (/.round sample)]
                  (and (|> round'd /.integer i.decimal (/.= round'd))
                       (/.<= +1.0 (/.absolute (/.- sample round'd))))))
              (_.coverage [/.root_2]
                (let [sample (/.absolute sample)]
                  (|> sample
                      /.root_2
                      (/.^ +2.0)
                      (/.approximately? ..margin_of_error sample))))
              (_.coverage [/.root_3]
                (|> sample
                    /.root_3
                    (/.^ +3.0)
                    (/.approximately? ..margin_of_error sample)))
              ))
       (monad.let [! random.monad]
         [.let [~= (/.approximately? ..margin_of_error)]
          sample (by ! each (/.x +10.0) random.unit_decimal)
          power (by ! each (|>> (n.% 10) ++ n.decimal) random.natural)]
         (all _.and
              (_.coverage [/.exp /.log]
                (|> sample /.exp /.log (/.approximately? +0.000000000000001 sample)))
              (_.coverage [/.e]
                (~= +1.0 (/.log /.e)))
              (_.coverage [/.^ /.log_by]
                (let [sample (/.absolute sample)]
                  (|> sample
                      (/.^ power)
                      (/.log_by sample)
                      (~= power))))
              ))
       (monad.let [! random.monad]
         [of (by ! each (|>> (n.% 10) ++) random.natural)]
         (_.coverage [/.factorial]
           (and (n.= 1 (/.factorial 0))
                (|> (/.factorial of) (n.% of) (n.= 0)))))
       ))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [.Decimal .F64 .Double])
      (monad.let random.monad
        [expected random.safe_decimal])
      (`` (all _.and
               (_.coverage [/.Number]
                 (identical? .Decimal /.Number))
               (_.coverage [/.=]
                 (and (not (/.= /.not_a_number /.not_a_number))
                      (with /.equality
                        (= /.not_a_number /.not_a_number))))
               (_.coverage [/.zero]
                 (/.= expected (/.+ /.zero expected)))
               (_.coverage [/.positive_one]
                 (/.= expected (/.x /.positive_one expected)))
               (_.coverage [/.negative_one]
                 (/.= (/.opposite /.positive_one)
                      /.negative_one))
               (_.coverage [/.reciprocal]
                 (/.approximately? ..margin_of_error
                                   /.positive_one 
                                   (/.x expected (/.reciprocal expected))))
               (_.coverage [/.partial]
                 (/.= (r.decimal (/.revolution expected))
                      (/.partial expected)))
               (_.coverage [/.whole]
                 (let [expected (/.% +1.0e+18 expected)]
                   (/.= (i.decimal (/.integer expected))
                        (/.whole expected))))
               (monad.let random.monad
                 [left random.unit_decimal
                  right random.unit_decimal]
                 (all _.and
                      (_.coverage [/.>]
                        (bit.= (/.> left right)
                               (/.< right left)))
                      (_.coverage [/.<= /.>=]
                        (bit.= (/.<= left right)
                               (/.>= right left)))
                      ))
               (monad.let random.monad
                 [sample random.unit_decimal]
                 (all _.and
                      (_.coverage [/.-]
                        (and (/.= +0.0 (/.- sample sample))
                             (/.= sample (/.- +0.0 sample))
                             (/.= (/.opposite sample)
                                  (/.- sample +0.0))))
                      (_.coverage [/./]
                        (and (/.= +1.0 (/./ sample sample))
                             (/.= sample (/./ +1.0 sample))))
                      (_.coverage [/.absolute]
                        (bit.= (/.> sample (/.absolute sample))
                               (/.negative? sample)))
                      (_.coverage [/.signum]
                        (/.= (/.absolute sample)
                             (/.x (/.signum sample) sample)))
                      ))
               (monad.let random.monad
                 [left (random.only (|>> (/.= +0.0) not)
                                    (..random 1,000,000))
                  right (..random 1,000,000)]
                 (all _.and
                      (_.coverage [/.%]
                        (let [rem (/.% left right)
                              div (|> right (/.- rem) (/./ left))]
                          (/.approximately? +0.0000000001
                                            right
                                            (|> div (/.x left) (/.+ rem)))))
                      (_.coverage [/./%]
                        (let [[div rem] (/./% left right)]
                          (and (/.= div (/./ left right))
                               (/.= rem (/.% left right)))))
                      (_.coverage [/.modulo]
                        (or (and (/.= +0.0 (/.% left right))
                                 (/.= +0.0 (/.modulo left right)))
                            (and (/.= (/.signum left)
                                      (/.signum (/.modulo left right)))
                                 (/.= (/.signum right)
                                      (/.signum (/.% left right)))
                                 (if (/.= (/.signum left) (/.signum right))
                                     (/.= (/.% left right)
                                          (/.modulo left right))
                                     (/.= (/.+ left (/.% left right))
                                          (/.modulo left right))))))
                      ))
               (target.if target.jvm
                          (all _.and
                               (let [test (is (-> Decimal Bit)
                                              (function (_ value)
                                                (n.= (.natural (ffi.of_long (java/lang/Double:doubleToRawLongBits [(ffi.as_double value)])))
                                                     (/.bits value))))]
                                 (monad.let random.monad
                                   [sample random.decimal]
                                   (_.coverage [/.bits]
                                     (and (test sample)
                                          (test /.biggest)
                                          (test /.smallest)
                                          (test /.not_a_number)
                                          (test /.positive_infinity)
                                          (test /.negative_infinity)))))
                               (monad.let random.monad
                                 [sample random.i64]
                                 (_.coverage [/.of_bits]
                                   (let [expected (ffi.of_double (java/lang/Double:longBitsToDouble [(ffi.as_long sample)]))
                                         actual (/.of_bits sample)]
                                     (or (/.= expected actual)
                                         (and (/.not_a_number? expected)
                                              (/.not_a_number? actual))))))
                               )

                          ... else
                          (let [test (is (-> Decimal Bit)
                                         (function (_ expected)
                                           (let [actual (|> expected /.bits /.of_bits)]
                                             (or (/.= expected actual)
                                                 (and (/.not_a_number? expected)
                                                      (/.not_a_number? actual))))))]
                            (monad.let random.monad
                              [sample random.decimal]
                              (_.coverage [/.bits /.of_bits]
                                (and (test sample)
                                     (test /.biggest)
                                     (test /.smallest)
                                     (test /.not_a_number)
                                     (test /.positive_infinity)
                                     (test /.negative_infinity))))))
               (monad.let random.monad
                 [expected random.unit_decimal]
                 (_.coverage [/.opposite]
                   (let [subtraction!
                         (/.= +0.0 (/.+ (/.opposite expected) expected))

                         inverse!
                         (|> expected /.opposite /.opposite (/.= expected))]
                     (and subtraction!
                          inverse!))))
               (,, (template.with [<as> <of> ,unit]
                     [(monad.let [! random.monad]
                        [expected (random.only (|>> /.zero? not)
                                               (..random (its unit.:factor ,unit)))
                         .let [threshold (/./ (n.decimal (its unit.:factor ,unit)) +1.0)

                               change_of_scale!
                               (|> expected
                                   <as>
                                   (/.approximately? threshold expected)
                                   not)

                               iso_morphism!
                               (|> expected
                                   <as>
                                   <of>
                                   (/.approximately? threshold expected))]]
                        (_.coverage [<as> <of>]
                          (and change_of_scale!
                               iso_morphism!)))]

                     [[/.as_degree /.of_degree unit.degree]
                      [/.as_gradian /.of_gradian unit.gradian]
                      [/.as_per_cent /.of_per_cent unit.per_cent]
                      [/.as_per_mille /.of_per_mille unit.per_mille]
                      [/.as_per_myriad /.of_per_myriad unit.per_myriad]]))

               ..constant
               ..predicate
               ..conversion
               ..signature
               ..test|math
               ))))
