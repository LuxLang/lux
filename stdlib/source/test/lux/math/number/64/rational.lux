... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equality
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" mix)]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" functor)]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]
   [aspect
    ["[0]" case (.only)
     ["[1]T" \\test]]]
   ["[0]" type
    ["[1]" check]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["n" natural]
    ["i" integer]
    ["d" decimal]
    ["[0]" fraction]
    [//
     ["[0]" big
      ["[1]" rational]]
     [//
      ["[0]" unit]]]]]])

(the .public random
  (Random /.Rational)
  (monad.let random.monad
    [numerator (random:each (i.% +1,000)
                            random.integer)
     denominator (random:each (|>> (n.% 1,000) ++)
                              random.natural)]
    (pure (/.new denominator numerator))))

(the unit
  Test
  (`` (all _.and
           (,, (template.with [,format <as> <of> ,unit]
                 [(let [threshold (|> (its unit.:factor ,unit)
                                      .integer
                                      (case.some /.integer)
                                      /.reciprocal)]
                    (all _.and
                         (_.for [,format]
                                (formatT.spec (/.approximately? threshold) ,format
                                              ..random))
                         (monad.let [! random.monad]
                           [expected ..random
                            .let [change_of_scale!
                                  (|> expected
                                      <as>
                                      (by /.equality = expected)
                                      not)

                                  iso_morphism!
                                  (|> expected
                                      <as>
                                      <of>
                                      (by /.equality = expected))]]
                           (_.coverage [<as> <of>]
                             (and change_of_scale!
                                  iso_morphism!)))
                         ))]

                 [[/.degree /.as_degree /.of_degree unit.degree]
                  [/.gradian /.as_gradian /.of_gradian unit.gradian]
                  [/.per_cent /.as_per_cent /.of_per_cent unit.per_cent]
                  [/.per_mille /.as_per_mille /.of_per_mille unit.per_mille]
                  [/.per_myriad /.as_per_myriad /.of_per_myriad unit.per_myriad]]))
           )))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Rational
              /.module])
      (monad.let random.monad
        [expected ..random

         it_0 ..random
         it_1 ..random])
      (`` (all _.and
               (_.for [/.equality /.=]
                      (static.when (identical? /.equality /.=)
                        (equalityT.spec /.equality ..random)))
               (_.for [/.~]
                      (equalityT.spec /.~ ..random))
               (_.for [/.order /.<]
                      (static.when (identical? (by /.order <) /.<)
                        (orderT.spec /.order ..random)))
               (,, (template.with [<composite> <monoid>]
                     [(_.for [<monoid> <composite>]
                             (static.when (identical? <composite> (by <monoid> composite))
                               (monoidT.spec /.equality <monoid> ..random)))]

                     [[/.+ /.addition]
                      [/.x /.multiplication]

                      [/.minor /.minimum]
                      [/.major /.maximum]]))
               (_.for [/.text]
                      (formatT.spec /.equality /.text ..random))
               (_.for [/.integer]
                      (caseT.specification /.integer
                                           [/.equality
                                            ..random]
                                           [i.equality
                                            random.integer]))

               (_.coverage [/.Number /.Q]
                 (and (identical? /.Rational /.Number)
                      (identical? /.Rational /.Q)))
               (_.coverage [/.approximately?]
                 (and (/.approximately? /.infinity it_0 it_1)
                      (/.approximately? (/.absolute expected) it_0 it_0)
                      (bit.= (/.approximately? /.zero it_0 it_1)
                             (/.= it_0 it_1))
                      (bit.= (/.approximately? (/.absolute expected) it_0 it_1)
                             (/.approximately? (/.absolute expected) it_1 it_0))
                      (/.approximately? (/.- (/.minor it_0 it_1) (/.major it_0 it_1))
                                        it_0
                                        it_1)))
               (_.coverage [/.delimiter]
                 (text.contains? /.delimiter
                                 (by /.text as expected)))
               (_.coverage [/.zero]
                 (and (/.= expected (/.+ /.zero expected))
                      (/.= expected (/.- /.zero expected))
                      
                      (/.= /.zero (/.x /.zero expected))
                      (/.= /.infinity (/./ /.zero expected))))
               (_.coverage [/.neutral?]
                 (and (/.neutral? /.zero)
                      (bit.= (/.= /.zero expected)
                             (/.neutral? expected))))
               (_.coverage [/.positive_one]
                 (and (/.= expected (/.x /.positive_one expected))
                      (/.= expected (/./ /.positive_one expected))))
               (_.coverage [/.smallest]
                 (or (not (big.< (case.some big.small /.smallest)
                                 (case.some big.small (/.absolute expected))))
                     (/.= /.zero expected)))
               (_.coverage [/.most_positive]
                 (or (not (big.> (case.some big.small /.most_positive)
                                 (case.some big.small expected)))
                     (/.= /.infinity expected)))
               (_.coverage [/.most_negative]
                 (not (big.< (case.some big.small /.most_negative)
                             (case.some big.small expected))))
               (_.coverage [/.infinity]
                 (and (/.= /.infinity (/./ /.zero /.positive_one))

                      (/.= /.infinity (/.+ /.infinity expected))
                      (/.= /.infinity (/.- /.infinity expected))
                      
                      (/.= /.infinity (/.x /.infinity expected))
                      (/.= /.zero (/./ /.infinity expected))))
               (_.coverage [/.indeterminate]
                 (and (/.= /.indeterminate (/.reciprocal /.indeterminate))
                      (/.~ /.indeterminate expected)
                      
                      (/.= /.indeterminate (/.+ /.indeterminate expected))
                      (/.= /.indeterminate (/.- /.indeterminate expected))
                      (/.= /.indeterminate (/.- expected /.indeterminate))
                      
                      (/.= /.indeterminate (/.x /.indeterminate expected))
                      (/.= /.indeterminate (/./ /.indeterminate expected))
                      (/.= /.indeterminate (/./ expected /.indeterminate))))
               (_.coverage [/.absolute]
                 (/.>= expected (/.absolute expected)))
               (_.coverage [/.signum]
                 (and (/.= (/.absolute expected)
                           (/.x (/.signum expected)
                                expected))
                      (/.= expected
                           (/.x (/.signum expected)
                                (/.absolute expected)))))
               (_.coverage [/.whole /.partial]
                 (/.= expected
                      (/.+ (/.whole expected)
                           (/.partial expected))))
               (_.coverage [/.positive? /.negative?]
                 (bit.= (/.positive? expected)
                        (not (/.negative? expected))))
               (_.coverage [/.negative_one]
                 (and (not (/.= /.positive_one /.negative_one))
                      (/.= /.positive_one (/.x /.negative_one /.negative_one))))
               (_.coverage [/.opposite]
                 (and (not (/.= /.positive_one (/.opposite expected)))
                      (/.= expected (/.opposite (/.opposite expected)))))
               (_.coverage [/.decimal]
                 (let [margin_of_error +0.000,000,000,001]
                   (and (d.approximately? margin_of_error
                                          (/.decimal (/.whole expected))
                                          (d.whole (/.decimal expected)))
                        (d.approximately? margin_of_error
                                          (/.decimal (/.partial expected))
                                          (d.partial (/.decimal expected))))))
               
               (monad.let random.monad
                 [_0 random.natural
                  _1 random.natural

                  _0' random.integer
                  _1' random.integer]
                 (_.coverage [/.new]
                   (and (/.~ (/.new _0 +0)
                             (/.new _1 +0))
                        (/.= (/.new 0 _0')
                             (/.new 0 _1')))))
               (monad.let [! random.monad]
                 [sample ..random
                  power (by ! each (i.% +10)
                            random.integer)]
                 (all _.and
                      (_.coverage [/.-]
                        (and (/.= /.zero (/.- sample sample))
                             (/.= sample (/.- /.zero sample))))
                      (_.coverage [/./]
                        (and (/.= /.positive_one (/./ sample sample))
                             (/.= sample (/./ /.positive_one sample))))
                      (_.coverage [/.reciprocal]
                        (/.= /.positive_one
                             (/.x sample (/.reciprocal sample))))
                      (_.coverage [/.Exponent]
                        (type.< fraction.Exponent /.Exponent))
                      (_.coverage [/.^]
                        (and (/.= /.positive_one (/.^ +0 sample))
                             (/.= sample (/.^ +1 sample))
                             (/.= (/.reciprocal sample)
                                  (/.^ -1 sample))
                             (/.= (/.reciprocal (/.^ power sample))
                                  (/.^ (i.opposite power) sample))
                             (if (i.< +0 power)
                                 (/.= (list:mix /.x /.positive_one (list.repeated (.natural (i.opposite power)) sample))
                                      (/.reciprocal (/.^ power sample)))
                                 (/.= (list:mix /.x /.positive_one (list.repeated (.natural power) sample))
                                      (/.^ power sample)))))
                      ))
               (monad.let random.monad
                 [left (random.only (|>> (/.= /.zero) not)
                                    ..random)
                  right ..random]
                 (_.coverage [/.%]
                   (let [rem (/.% left right)
                         div (|> right (/.- rem) (/./ left))]
                     (and (/.= right
                               (|> div (/.x left) (/.+ rem)))
                          (when (case.if /.integer div)
                            {.:Right _}
                            true
                            
                            else
                            false)))))
               (monad.let random.monad
                 [left ..random
                  right ..random]
                 (all _.and
                      (_.coverage [/.>]
                        (bit.= (/.> left right)
                               (/.< right left)))
                      (_.coverage [/.<= /.>=]
                        (bit.= (/.<= left right)
                               (/.>= right left)))
                      ))
               (monad.let random.monad
                 [expected ..random
                  origin ..random]
                 (_.coverage [/.inversion]
                   (and (/.= (/.reciprocal expected)
                             (/.inversion /.positive_one expected))
                        (/.= expected
                             (/.inversion expected expected))
                        (|> expected
                            (/.inversion origin)
                            (/.inversion origin)
                            (/.= expected))
                        (/.= (/.x expected expected)
                             (/.inversion expected /.positive_one)))))
               (_.coverage [/.numerator /.denominator]
                 (/.= expected
                      (/.new (/.denominator expected)
                             (/.numerator expected))))

               ..unit
               ))))
