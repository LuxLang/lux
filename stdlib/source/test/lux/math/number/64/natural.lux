... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" enum
     ["[1]T" \\test]]
    ["[0]" interval
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["d" decimal]]]])

(the signature
  Test
  (`` (all _.and
           (_.for [/.equivalence /.=]
                  (static.when (same? /.equivalence /.=)
                    (equivalenceT.spec /.equivalence random.natural)))
           (_.for [/.hash]
                  (hashT.spec /.hash random.natural))
           (_.for [/.order /.<]
                  (orderT.spec /.order random.natural))
           (_.for [/.enum]
                  (enumT.spec /.enum random.natural))
           (_.for [/.interval]
                  (intervalT.spec /.interval random.natural))
           (,, (template.with [<composite> <monoid>]
                 [(_.for [<monoid> <composite>]
                         (static.when (same? <composite> (by <monoid> composite))
                           (monoidT.spec /.equivalence <monoid> random.natural)))]
                 
                 [[/.+ /.addition]
                  [/.x /.multiplication]

                  [/.minor /.minimum]
                  [/.major /.maximum]]))
           (,, (template.with [<format>]
                 [(monad.let [! random.monad]
                    [.let [limit (|> (by /.interval maximum)
                                     (by <format> as)
                                     text.size
                                     ++)]
                     expected_size (by ! each (/.% limit) random.natural)]
                    (_.for [<format> /.padded]
                           (all _.and
                                (formatT.spec /.equivalence <format> random.natural)
                                (formatT.spec /.equivalence (/.padded expected_size <format>) random.natural)
                                )))]

                 [[/.base_02]
                  [/.base_08]
                  [/.base_10]
                  [/.base_16]]))
           )))

(the predicate
  Test
  (monad.let [! random.monad]
    [sample random.natural]
    (all _.and
         (_.coverage [/.even? /.odd?]
           (bit.= (/.even? sample)
                  (not (/.odd? sample))))
         )))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [.Natural])
      (monad.let [! random.monad]
        [expected random.natural
         origin random.natural])
      (all _.and
           (_.coverage [.Nat .N /.Number]
             (and (alias? .Natural .Nat)
                  (alias? .Natural .N)
                  (alias? .Natural /.Number)))
           (_.coverage [/.zero]
             (and (/.= expected (/.+ /.zero expected))
                  (/.= expected (/.- /.zero expected))
                  
                  (/.= /.zero (/.x /.zero expected))))
           (_.coverage [/.one]
             (and (not (/.= expected (/.+ /.one expected)))
                  (/.= expected (/.x /.one expected))
                  (/.= expected (/./ /.one expected))))
           (monad.let !
             [sample random.natural
              power (by ! each (/.% 10)
                        random.natural)]
             (all _.and
                  (_.coverage [/.-]
                    (and (/.= 0 (/.- sample sample))
                         (/.= sample (/.- 0 sample))))
                  (_.coverage [/.opposite]
                    (and (/.= /.zero
                              (/.+ (/.opposite sample)
                                   sample))
                         (/.= (/.- origin
                                   sample)
                              (/.+ (/.opposite origin)
                                   sample))
                         (/.= (/.- (/.opposite origin)
                                   sample)
                              (/.+ origin
                                   sample))))
                  (monad.let !
                    [origin (by ! each (/.% /.infinity) random.natural)
                     it (by ! each (/.% /.infinity) random.natural)]
                    (_.coverage [/.excess]
                      (and (/.= /.zero
                                (/.excess it it))
                           (/.= origin
                                (/.excess (/.+ origin it) it)))))
                  (_.coverage [/./]
                    (and (/.= 1 (/./ sample sample))
                         (/.= sample (/./ 1 sample))))
                  (_.coverage [/.Exponent /.^]
                    (and (/.= 1 (/.^ 0 sample))
                         (/.= sample (/.^ 1 sample))
                         (/.= (list#mix /.x 1 (list.repeated power sample))
                              (/.^ power sample))))
                  ))
           (monad.let random.monad
             [left random.natural
              right random.natural]
             (all _.and
                  (_.coverage [/.>]
                    (bit.= (/.> left right)
                           (/.< right left)))
                  (_.coverage [/.<= /.>=]
                    (bit.= (/.<= left right)
                           (/.>= right left)))
                  ))
           (monad.let random.monad
             [left (random.only (|>> (/.= 0) not)
                                random.natural)
              right random.natural]
             (all _.and
                  (_.coverage [/.%]
                    (let [rem (/.% left right)
                          div (|> right (/.- rem) (/./ left))]
                      (/.= right
                           (|> div (/.x left) (/.+ rem)))))
                  (_.coverage [/./%]
                    (let [[div rem] (/./% left right)]
                      (and (/.= div (/./ left right))
                           (/.= rem (/.% left right)))))
                  ))
           (monad.let !
             [.let [random (by ! each (|>> (/.% 1,000) ++) random.natural)]
              left random
              right random]
             (all _.and
                  (_.coverage [/.lcm /.least_common_multiple
                               /.multiple?]
                    (and (/.= /.zero
                              (/.lcm /.zero expected))
                         (/.= (/.lcm right left)
                              (/.lcm left right))
                         (and (/.multiple? left (/.lcm left right))
                              (/.multiple? right (/.lcm left right)))
                         (alias? /.lcm /.least_common_multiple)))
                  (_.coverage [/.gcd /.greatest_common_divisor
                               /.divisor?]
                    (and (/.= expected
                              (/.gcd /.zero expected))
                         (/.= (/.gcd right left)
                              (/.gcd left right))
                         (and (/.divisor? left (/.gcd left right))
                              (/.divisor? right (/.gcd left right)))
                         (alias? /.gcd /.greatest_common_divisor)))
                  (_.coverage [/.co_prime?]
                    (and (bit.= (/.co_prime? expected expected)
                                (/.= /.one expected))
                         (bit.= (/.= /.one (/.gcd left right))
                                (/.co_prime? left right))))
                  (monad.let !
                    [range (by ! each (/.% 100) random.natural)]
                    (_.coverage [/.prime?]
                      (let [candidates (|> range
                                           list.indices
                                           (list.only /.prime?))]
                        (and (bit.= (/.= /.zero range)
                                    (list.empty? candidates))
                             (list.every? (function (_ it)
                                            (let [co_prime_with_others!
                                                  (list.every? (function (_ factor)
                                                                 (or (/.co_prime? it factor)
                                                                     ... 0 x x = x x 0
                                                                     (/.= /.zero factor)
                                                                     (/.= /.zero it)
                                                                     
                                                                     (/.= it factor)))
                                                               candidates)

                                                  no_multiple_is_prime!
                                                  (list.every? (function (_ factor)
                                                                 (or (not (/.prime? (/.x factor it)))
                                                                     ... 0 x x = x x 0
                                                                     (/.= /.zero factor)
                                                                     (/.= /.zero it)
                                                                     ... 1 x x = x x 1
                                                                     (/.= /.one factor)
                                                                     (/.= /.one it)))
                                                               candidates)]
                                              (and co_prime_with_others!
                                                   no_multiple_is_prime!)))
                                          candidates)))))
                  ))
           (monad.let !
             [expected (by ! each (/.% 1,000,000) random.natural)
              sample random.natural]
             (_.coverage [/.decimal]
               (and (|> expected /.decimal d.natural (/.= expected))
                    (d.number? (/.decimal sample)))))
           (_.coverage [/.reflection]
             (and (/.= (/.opposite expected)
                       (/.reflection /.zero expected))
                  (/.= expected
                       (/.reflection expected expected))
                  (|> expected
                      (/.reflection origin)
                      (/.reflection origin)
                      (/.= expected))
                  (/.= (/.+ expected expected)
                       (/.reflection expected /.zero))))
           (_.coverage [/.infinity]
             (and (and (/.= /.infinity (/.opposite /.infinity))
                       (not (/.= /.zero /.infinity)))
                  (and (/.= /.zero (/.+ /.infinity /.infinity))
                       (|> expected
                           (/.+ /.infinity)
                           (/.+ /.infinity)
                           (/.= expected)))
                  (/.= (/.reflection /.zero expected)
                       (/.reflection /.infinity expected))))

           ..predicate
           ..signature
           )))
