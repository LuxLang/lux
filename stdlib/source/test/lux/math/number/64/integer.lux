... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" enum
     ["[1]T" \\test]]
    ["[0]" interval
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["n" natural]
    ["d" decimal]
    [//
     ["[0]" /64]]]]])

(the signature
  Test
  (`` (all _.and
           (_.for [/.equivalence /.=]
                  (static.when (same? /.equivalence /.=)
                    (equivalenceT.spec /.equivalence random.integer)))
           (_.for [/.hash]
                  (hashT.spec /.hash random.integer))
           (_.for [/.order /.<]
                  (orderT.spec /.order random.integer))
           (_.for [/.enum]
                  (enumT.spec /.enum random.integer))
           (_.for [/.interval]
                  (intervalT.spec /.interval random.integer))
           (,, (template.with [<composite> <monoid>]
                 [(_.for [<monoid> <composite>]
                         (static.when (same? <composite> (by <monoid> composite))
                           (monoidT.spec /.equivalence <monoid> random.integer)))]
                 
                 [[/.+ /.addition]
                  [/.x /.multiplication]

                  [/.minor /.minimum]
                  [/.major /.maximum]]))
           (,, (template.with [<format>]
                 [(_.for [<format>]
                         (formatT.spec /.equivalence <format> random.integer))]

                 [[/.base_02]
                  [/.base_08]
                  [/.base_10]
                  [/.base_16]]))
           )))

(the predicate
  Test
  (monad.let [! random.monad]
    [sample random.integer]
    (all _.and
         (_.coverage [/.negative?]
           (bit.= (/.negative? sample)
                  (/.< +0 sample)))
         (_.coverage [/.positive?]
           (bit.= (/.positive? sample)
                  (/.> +0 sample)))
         (_.coverage [/.zero?]
           (bit.= (/.zero? sample)
                  (/.= +0 sample)))
         (_.coverage [/.even? /.odd?]
           (bit.= (/.even? sample)
                  (not (/.odd? sample))))
         )))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [.Integer])
      (let [(open "/#[0]") /.interval])
      (monad.let [! random.monad]
        [expected random.integer
         origin random.integer])
      (all _.and
           (_.coverage [.Int .Z]
             (and (alias? .Integer .Int)
                  (alias? .Integer .Z)))
           (monad.let [! random.monad]
             [sample random.integer
              left random.integer
              right random.integer
              power (by ! each (n.% 10)
                        random.natural)]
             (all _.and
                  (_.coverage [/.-]
                    (and (/.= +0 (/.- sample sample))
                         (/.= sample (/.- +0 sample))
                         (/.= (/.opposite sample)
                              (/.- sample +0))
                         (/.= /#minimum
                              (/.- /#minimum +0))))
                  (_.coverage [/./]
                    (and (/.= +1 (/./ sample sample))
                         (/.= sample (/./ +1 sample))
                         (/.= /#minimum
                              (/./ -1 /#minimum))))
                  (_.coverage [/.absolute]
                    (bit.= (/.> sample (/.absolute sample))
                           (/.negative? sample)))
                  (_.coverage [/.signum]
                    (/.= (/.absolute sample)
                         (/.x (/.signum sample) sample)))
                  (_.coverage [/.^]
                    (and (/.= +1 (/.^ 0 sample))
                         (/.= sample (/.^ 1 sample))
                         (/.= (list#mix /.x +1 (list.repeated power sample))
                              (/.^ power sample))))
                  ))
           (monad.let random.monad
             [left random.integer
              right random.integer]
             (all _.and
                  (_.coverage [/.>]
                    (bit.= (/.> left right)
                           (/.< right left)))
                  (_.coverage [/.<= /.>=]
                    (bit.= (/.<= left right)
                           (/.>= right left)))
                  ))
           (monad.let random.monad
             [left (random.only (|>> (/.= +0) not)
                                random.integer)
              right random.integer]
             (all _.and
                  (_.coverage [/.%]
                    (let [rem (/.% left right)
                          div (|> right (/.- rem) (/./ left))]
                      (/.= right
                           (|> div (/.x left) (/.+ rem)))))
                  (_.coverage [/./%]
                    (let [[div rem] (/./% left right)]
                      (and (/.= div (/./ left right))
                           (/.= rem (/.% left right)))))
                  (_.coverage [/.mod]
                    (and (/.= (/.signum left)
                              (/.signum (/.mod left right)))
                         (/.= (/.signum right)
                              (/.signum (/.% left right)))
                         (if (/.= (/.signum left) (/.signum right))
                             (/.= (/.% left right)
                                  (/.mod left right))
                             (or (and (/.= +0 (/.% left right))
                                      (/.= +0 (/.mod left right)))
                                 (/.= (/.+ left (/.% left right))
                                      (/.mod left right))))))
                  ))
           (monad.let [! random.monad]
             [.let [random (|> random.integer
                               (by ! each (|>> (/.% +1,000) /.absolute))
                               (random.only (/.> +0)))]
              left random
              right random]
             (all _.and
                  (_.coverage [/.lcm /.least_common_multiple]
                    (and (let [lcm (/.lcm left right)]
                           (and (/.= +0 (/.% left lcm))
                                (/.= +0 (/.% right lcm))))
                         (alias? /.lcm /.least_common_multiple)))
                  (_.coverage [/.gcd /.greatest_common_divisor]
                    (and (let [gcd (/.gcd left right)]
                           (and (/.= +0 (/.% gcd left))
                                (/.= +0 (/.% gcd right))))
                         (alias? /.gcd /.greatest_common_divisor)))
                  (_.coverage [/.extended_gcd]
                    (let [[[left_k right_k] gcd] (/.extended_gcd left right)

                          same_gcd!
                          (/.= gcd
                               (/.gcd left right))
                          
                          bezout_identity!
                          (/.= gcd
                               (/.+ (/.x left_k left)
                                    (/.x right_k right)))]
                      (and same_gcd!
                           bezout_identity!)))
                  (_.coverage [/.co_prime?]
                    (bit.= (/.= +1 (/.gcd left right))
                           (/.co_prime? left right)))
                  (_.coverage [/.multiple?]
                    (and (/.multiple? left
                                      (/.least_common_multiple left right))
                         (/.multiple? right
                                      (/.least_common_multiple left right))))
                  (_.coverage [/.divisor?]
                    (and (/.divisor? left
                                     (/.greatest_common_divisor left right))
                         (/.divisor? right
                                     (/.greatest_common_divisor left right))))
                  ))
           (monad.let random.monad
             [expected random.integer]
             (_.coverage [/.opposite]
               (let [subtraction!
                     (/.= +0 (/.+ (/.opposite expected) expected))

                     inverse!
                     (|> expected /.opposite /.opposite (/.= expected))]
                 (and subtraction!
                      inverse!))))
           (monad.let [! random.monad]
             [expected (by ! each (/.% +1,000,000) random.integer)
              sample random.integer]
             (_.coverage [/.decimal]
               (and (|> expected /.decimal d.integer (/.= expected))
                    (d.number? (/.decimal sample)))))
           (monad.let [! random.monad]
             [pattern random.integer
              idx (by ! each (n.% /64.width) random.natural)]
             (_.coverage [/.>>]
               (let [nullity!
                     (/.= pattern (/.>> 0 pattern))

                     idempotency!
                     (/.= pattern (/.>> /64.width pattern))

                     sign_mask (/64.<< (-- /64.width) 1)
                     mantissa_mask (-- (/64.<< (n.- idx /64.width) 1))
                     co_mantissa_mask (/64.not mantissa_mask)

                     sign_preservation!
                     (/.= (/64.and sign_mask pattern)
                          (/64.and sign_mask (/.>> idx pattern)))

                     mantissa_parity!
                     (/.= (/64.and mantissa_mask (/64.>> idx pattern))
                          (/64.and mantissa_mask (/.>> idx pattern)))

                     co_mantissa_disparity!
                     (or (n.= 0 idx)
                         (and (/.= +0 (/64.and co_mantissa_mask (/64.>> idx pattern)))
                              (/.= (if (/.< +0 pattern)
                                       (.integer co_mantissa_mask)
                                       +0)
                                   (/64.and co_mantissa_mask (/.>> idx pattern)))))]
                 (and nullity!
                      idempotency!
                      sign_preservation!
                      mantissa_parity!
                      co_mantissa_disparity!
                      ))))
           (_.coverage [/.reflection]
             (and (/.= (/.opposite expected)
                       (/.reflection /.zero expected))
                  (/.= expected
                       (/.reflection expected expected))
                  (|> expected
                      (/.reflection origin)
                      (/.reflection origin)
                      (/.= expected))
                  (/.= (/.+ expected expected)
                       (/.reflection expected /.zero))))
           (_.coverage [/.infinity]
             (and (and (/.= /.infinity (/.opposite /.infinity))
                       (not (/.= /.zero /.infinity)))
                  (and (/.= /.zero (/.+ /.infinity /.infinity))
                       (|> expected
                           (/.+ /.infinity)
                           (/.+ /.infinity)
                           (/.= expected)))
                  (/.= (/.reflection /.zero expected)
                       (/.reflection /.infinity expected))))

           ..predicate
           ..signature
           )))
