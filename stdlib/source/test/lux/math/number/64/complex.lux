... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equality
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]]
   [data
    [collection
     ["[0]" list (.use "[1]:[0]" functor)]]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" functor)]
    [geometry
     ["[0]" circle]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["n" natural]
    ["i" integer]
    ["d" decimal]]]])

... This margin of error is necessary because floating-point arithmetic is not exact.
(the margin_of_error
  +0.000,000,000,1)

(the dimension
  (Random Decimal)
  (let [side_range +1,000
        full_range (i.x side_range side_range)]
    (|> random.integer
        (random:each (|>> (i.% full_range)
                          i.decimal
                          (d./ (i.decimal side_range)))))))

(the .public random
  (Random /.Complex)
  (monad.let random.monad
    [real ..dimension
     imaginary ..dimension]
    (pure (/.complex real imaginary))))

(the angle
  (Random /.Complex)
  (by random.monad each
      (|>> d.absolute
           (d.x circle.tau)
           (/.polar +1.0))
      random.unit_decimal))

(the construction
  Test
  (monad.let random.monad
    [real ..dimension
     imaginary ..dimension]
    (all _.and
         (_.coverage [/.complex]
           (and (let [r+i (/.complex real imaginary)]
                  (and (d.= real (its /.:real r+i))
                       (d.= imaginary (its /.:imaginary r+i))))
                (let [r+i (/.complex real)]
                  (and (d.= real (its /.:real r+i))
                       (d.= +0.0 (its /.:imaginary r+i))))))
         (_.coverage [/.approximately?]
           (/.approximately? ..margin_of_error
                             (/.complex real imaginary)
                             (/.complex real imaginary)))
         (_.coverage [/.not_a_number?]
           (and (/.not_a_number? (/.complex d.not_a_number imaginary))
                (/.not_a_number? (/.complex real d.not_a_number))))
         )))

(the constant
  Test
  (monad.let random.monad
    [sample ..random
     dimension ..dimension]
    (all _.and
         (_.coverage [/.zero]
           (/.= /.zero (/.x /.zero sample)))
         (_.coverage [/.positive_one]
           (/.= sample (/.x /.positive_one sample)))
         (_.coverage [/.negative_one]
           (and (/.= /.zero
                     (/.+ sample
                          (/.x /.negative_one sample)))
                (/.= sample (/.x /.negative_one (/.x /.negative_one sample)))))
         (_.coverage [/.i]
           (and (/.= (/.complex +0.0 dimension)
                     (/.x /.i (/.complex dimension)))
                (/.= (/.x /.negative_one sample)
                     (/.x /.i (/.x /.i sample)))))
         )))

(the absolute_value&argument
  Test
  (monad.let random.monad
    [real ..dimension
     imaginary ..dimension]
    (all _.and
         (_.coverage [/.absolute]
           (let [normal!
                 (let [r+i (/.complex real imaginary)]
                   (and (d.>= (d.absolute real) (/.absolute r+i))
                        (d.>= (d.absolute imaginary) (/.absolute r+i))))

                 not_a_number!
                 (and (d.not_a_number? (/.absolute (/.complex d.not_a_number imaginary)))
                      (d.not_a_number? (/.absolute (/.complex real d.not_a_number))))

                 infinity!
                 (and (d.= d.positive_infinity (/.absolute (/.complex d.positive_infinity imaginary)))
                      (d.= d.positive_infinity (/.absolute (/.complex real d.positive_infinity)))
                      (d.= d.positive_infinity (/.absolute (/.complex d.negative_infinity imaginary)))
                      (d.= d.positive_infinity (/.absolute (/.complex real d.negative_infinity))))]
             (and normal!
                  not_a_number!
                  infinity!)))
         ... https://en.wikipedia.org/wiki/Argument_(complex_analysis)#Identities
         (_.coverage [/.argument]
           (let [sample (/.complex real imaginary)]
             (or (/.= /.zero sample)
                 (/.approximately? ..margin_of_error
                                   sample
                                   (/.x' (/.absolute sample)
                                         (/.exp (/.x /.i (/.complex (/.argument sample)))))))))
         )))

(the number
  Test
  (monad.let random.monad
    [x ..random
     y ..random
     factor ..dimension]
    (all _.and
         (_.coverage [/.+]
           (let [z (/.+ y x)]
             (and (/.= z
                       (/.complex (d.+ (its /.:real y)
                                       (its /.:real x))
                                  (d.+ (its /.:imaginary y)
                                       (its /.:imaginary x)))))))
         (_.coverage [/.-]
           (let [normal!
                 (let [z (/.- y x)]
                   (and (/.= z
                             (/.complex (d.- (its /.:real y)
                                             (its /.:real x))
                                        (d.- (its /.:imaginary y)
                                             (its /.:imaginary x))))))

                 inverse!
                 (and (|> x (/.+ y) (/.- y) (/.approximately? ..margin_of_error x))
                      (|> x (/.- y) (/.+ y) (/.approximately? ..margin_of_error x)))]
             (and normal!
                  inverse!)))
         (_.coverage [/.x /./]
           (|> x
               (/.x y)
               (/./ y)
               (/.approximately? ..margin_of_error x)))
         (_.coverage [/.x' /./']
           (|> x
               (/.x' factor)
               (/./' factor)
               (/.approximately? ..margin_of_error x)))
         (_.coverage [/.%]
           (let [rem (/.% y x)
                 quotient (|> x (/.- rem) (/./ y))
                 floored (|> quotient
                             (revised /.:real d.floor)
                             (revised /.:imaginary d.floor))]
             (/.approximately? +0.000000000001
                               x
                               (|> quotient (/.x y) (/.+ rem)))))
         )))

(the conjugate&reciprocal&signum&negation
  Test
  (monad.let random.monad
    [x ..random]
    (all _.and
         (_.coverage [/.conjugate]
           (let [cx (/.conjugate x)]
             (and (d.= (its /.:real x)
                       (its /.:real cx))
                  (d.= (d.opposite (its /.:imaginary x))
                       (its /.:imaginary cx)))))
         (_.coverage [/.reciprocal]
           (let [reciprocal!
                 (|> x (/.x (/.reciprocal x)) (/.approximately? ..margin_of_error /.positive_one))
                 
                 own_inverse!
                 (|> x /.reciprocal /.reciprocal (/.approximately? ..margin_of_error x))]
             (and reciprocal!
                  own_inverse!)))
         (_.coverage [/.signum]
           ... Absolute value of signum is always root_2(2), 1 or 0.
           (let [signum_absolute (|> x /.signum /.absolute)]
             (or (d.= +0.0 signum_absolute)
                 (d.= +1.0 signum_absolute)
                 (d.= (d.^ +0.5 +2.0) signum_absolute))))
         (_.coverage [/.opposite]
           (let [own_inverse!
                 (let [there (/.opposite x)
                       back_again (/.opposite there)]
                   (and (not (/.= there x))
                        (/.= back_again x)))

                 absolute!
                 (d.= (/.absolute x)
                      (/.absolute (/.opposite x)))]
             (and own_inverse!
                  absolute!)))
         )))

(the (trigonometric_symmetry? forward backward angle)
  (-> (-> /.Complex /.Complex) (-> /.Complex /.Complex) /.Complex
      Bit)
  (let [normal (|> angle forward backward)]
    (|> normal
        forward
        backward
        (/.approximately? ..margin_of_error normal))))

(the trigonometry
  Test
  (monad.let [! random.monad]
    [angle ..angle]
    (all _.and
         (_.coverage [/.sin /.asin]
           (trigonometric_symmetry? /.sin /.asin angle))
         (_.coverage [/.cos /.acos]
           (trigonometric_symmetry? /.cos /.acos angle))
         (_.coverage [/.tan /.atan]
           (trigonometric_symmetry? /.tan /.atan angle))
         )))

(the hyperbolic
  Test
  (monad.let [! random.monad]
    [angle ..angle]
    (all _.and
         (_.coverage [/.sinh]
           (/.approximately? ..margin_of_error
                             (|> angle (/.x /.i) /.sin (/.x /.i) (/.x /.negative_one))
                             (/.sinh angle)))
         (_.coverage [/.cosh]
           (/.approximately? ..margin_of_error
                             (|> angle (/.x /.i) /.cos)
                             (/.cosh angle)))
         (_.coverage [/.tanh]
           (/.approximately? ..margin_of_error
                             (|> angle (/.x /.i) /.tan (/.x /.i) (/.x /.negative_one))
                             (/.tanh angle)))
         )))

(the exponentiation&logarithm
  Test
  (monad.let random.monad
    [it ..random]
    (all _.and
         (_.coverage [/.^ /.root_2]
           (|> it
               /.root_2
               (/.^ (/.complex +2.0))
               (/.approximately? ..margin_of_error it)))
         (_.coverage [/.^']
           (|> it
               (/.^' +0.5)
               (/.^' +2.0)
               (/.approximately? ..margin_of_error it)))
         (_.coverage [/.log /.exp]
           (|> it
               /.log
               /.exp
               (/.approximately? ..margin_of_error it)))
         )))

(the root
  Test
  (monad.let [! random.monad]
    [sample ..random
     degree (|> random.natural (by ! each (|>> (n.major 1) (n.% 5))))]
    (_.coverage [/.roots]
      (|> sample
          (/.roots degree)
          (list:each (/.^' (|> degree .integer i.decimal)))
          (list.every? (/.approximately? ..margin_of_error sample))))))

(the polar
  Test
  (monad.let [! random.monad]
    [it ..random]
    (all _.and
         (_.coverage [/.magnitude]
           (d.>= +0.0 (/.magnitude it)))
         (_.coverage [/.phase]
           (and (d.>= (d.x -1.0 circle.pi) (/.phase it))
                (d.<= circle.pi (/.phase it))))
         (_.coverage [/.polar]
           (/.approximately? ..margin_of_error
                             it
                             (/.polar (/.magnitude it) (/.phase it))))
         )))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Number
              /.:imaginary /.:real])
      (all _.and
           (_.for [/.= /.equality]
                  (equalityT.spec /.equality ..random))
           (_.for [/.text]
                  (formatT.spec /.equality /.text ..random))

           (_.coverage [/.Complex /.C]
             (and (identical? /.Number /.Complex)
                  (identical? /.Number /.C)))
           ..construction
           ..constant
           ..absolute_value&argument
           ..number
           ..conjugate&reciprocal&signum&negation
           ..trigonometry
           ..hyperbolic
           ..exponentiation&logarithm
           ..root
           ..polar
           )))
