(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [math
    ["[0]" random (.only Random)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" //
    ["i" int]
    ["[1][0]" i64]]]])

(def .public random
  (Random /.I16)
  (of random.functor each /.i16 random.i64))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.I16])
      (do [! random.monad]
        [.let [limit (|> (-- /.width)
                         //i64.mask
                         .int
                         ++)]
         expected (of ! each (i.% limit) random.int)]
        (all _.and
             (_.for [/.equivalence]
                    (equivalenceT.spec /.equivalence ..random))
             
             (_.coverage [/.i16 /.i64 /.width]
               (let [actual (|> expected .i64 /.i16 /.i64)]
                 (of //i64.equivalence = expected actual)))
             ))))
