(.module:
  [library
   [lux "*"
    ["_" test {"+" Test}]
    [abstract
     [monad {"+" do}]
     [\\specification
      ["$[0]" equivalence]]]
    [math
     ["[0]" random {"+" Random}]]]]
  [\\library
   ["[0]" /
    ["/[1]" // "_"
     ["i" int]
     ["[1][0]" i64]]]])

(def: .public random
  (Random /.I16)
  (# random.functor each /.i16 random.i64))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [/.I16])
      (do [! random.monad]
        [.let [limit (|> (-- /.width)
                         //i64.mask
                         .int
                         ++)]
         expected (# ! each (i.% limit) random.int)]
        ($_ _.and
            (_.for [/.equivalence]
                   ($equivalence.spec /.equivalence ..random))
            
            (_.cover [/.i16 /.i64 /.width]
                     (let [actual (|> expected .i64 /.i16 /.i64)]
                       (# //i64.equivalence = expected actual)))
            ))))
