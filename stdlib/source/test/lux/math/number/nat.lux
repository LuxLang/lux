(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]
      ["$." hash]
      ["$." order]
      ["$." enum]
      ["$." interval]
      ["$." monoid]
      ["$." codec]]]
    [data
     ["." bit ("#\." equivalence)]]
    [math
     ["." random]]]]
  [\\library
   ["." /
    [//
     ["f" frac]]]])

(def: signature
  Test
  (`` ($_ _.and
          (_.for [/.equivalence /.=]
                 ($equivalence.spec /.equivalence random.nat))
          (_.for [/.hash]
                 ($hash.spec /.hash random.nat))
          (_.for [/.order /.<]
                 ($order.spec /.order random.nat))
          (_.for [/.enum]
                 ($enum.spec /.enum random.nat))
          (_.for [/.interval]
                 ($interval.spec /.interval random.nat))
          (~~ (template [<composite> <monoid>]
                [(_.for [<monoid> <composite>]
                        ($monoid.spec /.equivalence <monoid> random.nat))]
                
                [/.+ /.addition]
                [/.* /.multiplication]

                [/.min /.minimum]
                [/.max /.maximum]
                ))
          (~~ (template [<codec>]
                [(_.for [<codec>]
                        ($codec.spec /.equivalence <codec> random.nat))]

                [/.binary] [/.octal] [/.decimal] [/.hex]
                ))
          )))

(def: predicate
  Test
  (do {! random.monad}
    [sample random.nat]
    ($_ _.and
        (_.cover [/.even? /.odd?]
                 (bit\= (/.even? sample)
                        (not (/.odd? sample))))
        )))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [.Nat])
      ($_ _.and
          (do random.monad
            [sample random.nat]
            ($_ _.and
                (_.cover [/.-]
                         (and (/.= 0 (/.- sample sample))
                              (/.= sample (/.- 0 sample))))
                (_.cover [/./]
                         (and (/.= 1 (/./ sample sample))
                              (/.= sample (/./ 1 sample))))
                ))
          (do random.monad
            [left random.nat
             right random.nat]
            ($_ _.and
                (_.cover [/.>]
                         (bit\= (/.> left right)
                                (/.< right left)))
                (_.cover [/.<= /.>=]
                         (bit\= (/.<= left right)
                                (/.>= right left)))
                ))
          (do random.monad
            [left (random.only (|>> (/.= 0) not)
                               random.nat)
             right random.nat]
            ($_ _.and
                (_.cover [/.%]
                         (let [rem (/.% left right)
                               div (|> right (/.- rem) (/./ left))]
                           (/.= right
                                (|> div (/.* left) (/.+ rem)))))
                (_.cover [/./%]
                         (let [[div rem] (/./% left right)]
                           (and (/.= div (/./ left right))
                                (/.= rem (/.% left right)))))
                ))
          (do {! random.monad}
            [.let [random (\ ! each (|>> (/.% 1,000) ++) random.nat)]
             left random
             right random]
            ($_ _.and
                (_.cover [/.gcd]
                         (let [gcd (/.gcd left right)]
                           (and (/.= 0 (/.% gcd left))
                                (/.= 0 (/.% gcd right)))))
                (_.cover [/.co_prime?]
                         (bit\= (/.= 1 (/.gcd left right))
                                (/.co_prime? left right)))
                (_.cover [/.lcm]
                         (let [lcm (/.lcm left right)]
                           (and (/.= 0 (/.% left lcm))
                                (/.= 0 (/.% right lcm)))))
                ))
          (do {! random.monad}
            [expected (\ ! each (/.% 1,000,000) random.nat)
             sample random.nat]
            (_.cover [/.frac]
                     (and (|> expected /.frac f.nat (/.= expected))
                          (f.number? (/.frac sample)))))

          ..predicate
          ..signature
          )))
