... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    [monad (.only do)]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" codec
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]
    ["[0]" arithmetic
     ["[1]T" \\test]]]
   [meta
    [macro
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [// (.except)
    ["n" nat]
    ["i" int]
    ["r" rev]
    ["[0]" i64]]]])

(the random
  (Random Frac)
  (of random.monad each (|>> (i.% +1,000,000) i.frac) random.int))

(the constant
  Test
  (do random.monad
    [sample random.safe_frac]
    (all _.and
         (_.coverage [/.biggest]
           (/.<= /.biggest sample))
         (_.coverage [/.positive_infinity]
           (/.< /.positive_infinity sample))
         (_.coverage [/.smallest]
           (bit#= (/.positive? sample)
                  (/.>= /.smallest sample)))
         (_.coverage [/.negative_infinity]
           (/.> /.negative_infinity sample))
         (_.coverage [/.not_a_number /.not_a_number?]
           (and (/.not_a_number? /.not_a_number)
                (not (or (/.= /.not_a_number sample)
                         (/.not_a_number? sample)))))
         )))

(the predicate
  Test
  (do [! random.monad]
    [sample ..random
     shift (of ! each /.abs ..random)]
    (all _.and
         (_.coverage [/.negative?]
           (bit#= (/.negative? sample)
                  (/.< +0.0 sample)))
         (_.coverage [/.positive?]
           (bit#= (/.positive? sample)
                  (/.> +0.0 sample)))
         (_.coverage [/.zero?]
           (bit#= (/.zero? sample)
                  (/.= +0.0 sample)))
         (_.coverage [/.approximately?]
           (and (/.approximately? /.smallest sample sample)
                (/.approximately? (/.+ +1.0 shift) sample (/.+ shift sample))))
         (_.coverage [/.number?]
           (and (not (/.number? /.not_a_number))
                (not (/.number? /.positive_infinity))
                (not (/.number? /.negative_infinity))
                (/.number? sample)))
         )))

(the conversion
  Test
  (all _.and
       (do [! random.monad]
         [expected (of ! each (n.% 1,000,000) random.nat)]
         (_.coverage [/.nat]
           (|> expected n.frac /.nat (n.= expected))))
       (do [! random.monad]
         [expected (of ! each (i.% +1,000,000) random.int)]
         (_.coverage [/.int]
           (|> expected i.frac /.int (i.= expected))))
       (do [! random.monad]
         [expected (of ! each (|>> (i64.left_shifted 52) .rev)
                       random.nat)]
         (_.coverage [/.rev]
           (|> expected r.frac /.rev (r.= expected))))
       ))

(the signature
  Test
  (`` (all _.and
           (_.for [/.equivalence /.=]
                  (equivalenceT.spec /.equivalence random.safe_frac))
           (_.for [/.hash]
                  (hashT.spec /.hash random.frac))
           (_.for [/.order /.<]
                  (orderT.spec /.order random.safe_frac))
           (,, (with_template [<composite> <monoid>]
                 [(_.for [<monoid> <composite>]
                         (monoidT.spec /.equivalence <monoid> ..random))]

                 [/.+ /.addition]
                 [/.* /.multiplication]

                 [/.min /.minimum]
                 [/.max /.maximum]
                 ))
           (,, (with_template [<codec>]
                 [(_.for [<codec>]
                         (codecT.spec /.equivalence <codec> random.safe_frac))]

                 [/.binary] [/.octal] [/.decimal] [/.hex]
                 ))
           (,, (with_template [<codec>]
                 [(_.for [<codec>]
                         (codecT.spec (/.approximately? +0.0000000000001) <codec> random.safe_frac))]

                 [/.degree] [/.percentage] [/.permille] [/.permyriad]
                 ))
           (_.coverage [/.base_02]
             (same? /.binary /.base_02))
           (_.coverage [/.base_08]
             (same? /.octal /.base_08))
           (_.coverage [/.base_10]
             (same? /.decimal /.base_10))
           (_.coverage [/.base_16]
             (same? /.hex /.base_16))
           (_.for [/.arithmetic]
                  (arithmeticT.spec /.equivalence /.arithmetic random.safe_frac))
           )))

(with_expansions [<jvm> (these (ffi.import java/lang/Double
                                 "[1]::[0]"
                                 ("static" doubleToRawLongBits [double] long)
                                 ("static" longBitsToDouble [long] double)))]
  (for .old (these <jvm>)
       .jvm (these <jvm>)
       (these)))

(the margin_of_error
  +0.0000001)

(the test|math
  Test
  (all _.and
       (do [! random.monad]
         [sample (|> random.safe_frac (of ! each (/.* +1000.0)))]
         (all _.and
              (_.coverage [/.ceil]
                (let [ceil'd (/.ceil sample)]
                  (and (|> ceil'd /.int i.frac (/.= ceil'd))
                       (/.>= sample ceil'd)
                       (/.<= +1.0 (/.- sample ceil'd)))))
              (_.coverage [/.floor]
                (let [floor'd (/.floor sample)]
                  (and (|> floor'd /.int i.frac (/.= floor'd))
                       (/.<= sample floor'd)
                       (/.<= +1.0 (/.- floor'd sample)))))
              (_.coverage [/.round]
                (let [round'd (/.round sample)]
                  (and (|> round'd /.int i.frac (/.= round'd))
                       (/.<= +1.0 (/.abs (/.- sample round'd))))))
              (_.coverage [/.root_2]
                (let [sample (/.abs sample)]
                  (|> sample
                      /.root_2
                      (/.pow +2.0)
                      (/.approximately? ..margin_of_error sample))))
              (_.coverage [/.root_3]
                (|> sample
                    /.root_3
                    (/.pow +3.0)
                    (/.approximately? ..margin_of_error sample)))
              ))
       (do [! random.monad]
         [.let [~= (/.approximately? ..margin_of_error)]
          sample (of ! each (/.* +10.0) random.safe_frac)
          power (of ! each (|>> (n.% 10) ++ n.frac) random.nat)]
         (all _.and
              (_.coverage [/.exp /.log]
                (|> sample /.exp /.log (/.approximately? +0.000000000000001 sample)))
              (_.coverage [/.e]
                (~= +1.0 (/.log /.e)))
              (_.coverage [/.pow /.log_by]
                (let [sample (/.abs sample)]
                  (|> sample
                      (/.pow power)
                      (/.log_by sample)
                      (~= power))))
              ))
       (do [! random.monad]
         [of (of ! each (|>> (n.% 10) ++) random.nat)]
         (_.coverage [/.factorial]
           (and (n.= 1 (/.factorial 0))
                (|> (/.factorial of) (n.% of) (n.= 0)))))
       ))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [.Frac .F64 .Double])
      (`` (all _.and
               (do random.monad
                 [left random.safe_frac
                  right random.safe_frac]
                 (all _.and
                      (_.coverage [/.>]
                        (bit#= (/.> left right)
                               (/.< right left)))
                      (_.coverage [/.<= /.>=]
                        (bit#= (/.<= left right)
                               (/.>= right left)))
                      ))
               (do random.monad
                 [sample random.safe_frac]
                 (all _.and
                      (_.coverage [/.-]
                        (and (/.= +0.0 (/.- sample sample))
                             (/.= sample (/.- +0.0 sample))
                             (/.= (/.opposite sample)
                                  (/.- sample +0.0))))
                      (_.coverage [/./]
                        (and (/.= +1.0 (/./ sample sample))
                             (/.= sample (/./ +1.0 sample))))
                      (_.coverage [/.abs]
                        (bit#= (/.> sample (/.abs sample))
                               (/.negative? sample)))
                      (_.coverage [/.signum]
                        (/.= (/.abs sample)
                             (/.* (/.signum sample) sample)))
                      ))
               (do random.monad
                 [left (random.only (|>> (/.= +0.0) not)
                                    ..random)
                  right ..random]
                 (all _.and
                      (_.coverage [/.%]
                        (let [rem (/.% left right)
                              div (|> right (/.- rem) (/./ left))]
                          (/.= right
                               (|> div (/.* left) (/.+ rem)))))
                      (_.coverage [/./%]
                        (let [[div rem] (/./% left right)]
                          (and (/.= div (/./ left right))
                               (/.= rem (/.% left right)))))
                      (_.coverage [/.mod]
                        (or (and (/.= +0.0 (/.% left right))
                                 (/.= +0.0 (/.mod left right)))
                            (and (/.= (/.signum left)
                                      (/.signum (/.mod left right)))
                                 (/.= (/.signum right)
                                      (/.signum (/.% left right)))
                                 (if (/.= (/.signum left) (/.signum right))
                                   (/.= (/.% left right)
                                        (/.mod left right))
                                   (/.= (/.+ left (/.% left right))
                                        (/.mod left right))))))
                      ))
               (with_expansions [<jvm> (all _.and
                                            (let [test (is (-> Frac Bit)
                                                           (function (_ value)
                                                             (n.= (.nat (ffi.of_long (java/lang/Double::doubleToRawLongBits [(ffi.as_double value)])))
                                                                  (/.bits value))))]
                                              (do random.monad
                                                [sample random.frac]
                                                (_.coverage [/.bits]
                                                  (and (test sample)
                                                       (test /.biggest)
                                                       (test /.smallest)
                                                       (test /.not_a_number)
                                                       (test /.positive_infinity)
                                                       (test /.negative_infinity)))))
                                            (do random.monad
                                              [sample random.i64]
                                              (_.coverage [/.of_bits]
                                                (let [expected (ffi.of_double (java/lang/Double::longBitsToDouble [(ffi.as_long sample)]))
                                                      actual (/.of_bits sample)]
                                                  (or (/.= expected actual)
                                                      (and (/.not_a_number? expected)
                                                           (/.not_a_number? actual))))))
                                            )]
                 (for .old <jvm>
                      .jvm <jvm>
                      (let [test (is (-> Frac Bit)
                                     (function (_ expected)
                                       (let [actual (|> expected /.bits /.of_bits)]
                                         (or (/.= expected actual)
                                             (and (/.not_a_number? expected)
                                                  (/.not_a_number? actual))))))]
                        (do random.monad
                          [sample random.frac]
                          (_.coverage [/.bits /.of_bits]
                            (and (test sample)
                                 (test /.biggest)
                                 (test /.smallest)
                                 (test /.not_a_number)
                                 (test /.positive_infinity)
                                 (test /.negative_infinity)))))))
               (do random.monad
                 [expected random.safe_frac]
                 (_.coverage [/.opposite]
                   (let [subtraction!
                         (/.= +0.0 (/.+ (/.opposite expected) expected))

                         inverse!
                         (|> expected /.opposite /.opposite (/.= expected))]
                     (and subtraction!
                          inverse!))))
               (,, (with_template [<as> <of>]
                     [(do [! random.monad]
                        [expected random.safe_frac]
                        (_.coverage [<as> <of>]
                          (and (|> expected
                                   <as>
                                   (/.approximately? +0.0000000000001 expected)
                                   not)
                               (|> expected
                                   <as>
                                   <of>
                                   (/.approximately? +0.0000000000001 expected)))))]

                     [/.as_degree /.of_degree]
                     [/.as_percentage /.of_percentage]
                     [/.as_permille /.of_permille]
                     [/.as_permyriad /.of_permyriad]
                     ))

               ..constant
               ..predicate
               ..conversion
               ..signature
               ..test|math
               ))))
