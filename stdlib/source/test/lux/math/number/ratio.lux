(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]
    {[0 #spec]
     [/
      ["$." equivalence]
      ["$." order]
      ["$." monoid]
      ["$." codec]]}]
   [data
    ["." bit ("#\." equivalence)]
    ["." maybe ("#\." functor)]]
   [math
    ["." random (#+ Random)]]]
  {1
   ["." /
    [//
     ["n" nat ("#\." equivalence)]]]})

(def: part
  (Random Nat)
  (\ random.monad map
     (|>> (n.% 1,000,000) (n.max 1))
     random.nat))

(def: #export random
  (Random /.Ratio)
  (do random.monad
    [numerator ..part
     denominator (random.filter (|>> (n.= 0) not)
                                ..part)]
    (wrap (/.ratio numerator denominator))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Ratio])
      (`` ($_ _.and
              (_.for [/.equivalence /.=]
                     ($equivalence.spec /.equivalence ..random))
              (_.for [/.order /.<]
                     ($order.spec /.order ..random))
              (~~ (template [<compose> <monoid>]
                    [(_.for [<monoid> <compose>]
                            ($monoid.spec /.equivalence <monoid> ..random))]

                    [/.+ /.addition]
                    [/.* /.multiplication]
                    ))
              (_.for [/.codec]
                     ($codec.spec /.equivalence /.codec ..random))

              (do random.monad
                [#let [(^open "\.") /.equivalence]
                 denom/0 ..part
                 denom/1 ..part]
                (_.cover [/.ratio]
                         (\= (/.ratio 0 denom/0)
                             (/.ratio 0 denom/1))))
              (do random.monad
                [numerator ..part
                 denominator (random.filter (|>> (n\= 1) not)
                                            ..part)]
                (_.cover [/.nat]
                         (let [only_numerator!
                               (|> (/.ratio numerator)
                                   /.nat
                                   (maybe\map (n\= numerator))
                                   (maybe.default false))

                               denominator_1!
                               (|> (/.ratio numerator 1)
                                   /.nat
                                   (maybe\map (n\= numerator))
                                   (maybe.default false))

                               with_denominator!
                               (case (/.nat (/.ratio numerator denominator))
                                 (#.Some factor)
                                 (and (n.= 0 (n.% denominator numerator))
                                      (n.= numerator (n.* factor denominator)))
                                 
                                 #.None
                                 (not (n.= 0 (n.% denominator numerator))))]
                           (and only_numerator!
                                denominator_1!
                                with_denominator!))))
              (do random.monad
                [sample ..random]
                ($_ _.and
                    (_.cover [/.-]
                             (and (/.= (/.ratio 0) (/.- sample sample))
                                  (/.= sample (/.- (/.ratio 0) sample))))
                    (_.cover [/./]
                             (and (/.= (/.ratio 1) (/./ sample sample))
                                  (/.= sample (/./ (/.ratio 1) sample))))
                    (_.cover [/.reciprocal]
                             (/.= (/.ratio 1)
                                  (/.* sample (/.reciprocal sample))))
                    ))
              (do random.monad
                [left (random.filter (|>> (/.= (/.ratio 0)) not)
                                     ..random)
                 right ..random]
                (_.cover [/.%]
                         (let [rem (/.% left right)
                               div (|> right (/.- rem) (/./ left))]
                           (and (/.= right
                                     (|> div (/.* left) (/.+ rem)))
                                (case (/.nat div)
                                  (#.Some _) true
                                  #.None false)))))
              (do random.monad
                [left ..random
                 right ..random]
                ($_ _.and
                    (_.cover [/.>]
                             (bit\= (/.> left right)
                                    (/.< right left)))
                    (_.cover [/.<= /.>=]
                             (bit\= (/.<= left right)
                                    (/.>= right left)))
                    ))
              ))))
