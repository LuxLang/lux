... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equality
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" mix)]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" functor)]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]
   [aspect
    ["[0]" case]]
   ["[0]" type
    ["[1]" check]]]]
 [//
  ["[0]T" fraction]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" natural]
    ["[0]" integer]
    [//
     ["[0]" /64
      ["[1]/[0]" natural]
      ["[1]/[0]" integer]
      ["[1]/[0]" fraction]
      ["[1]/[0]" rational (.only)
       ["[1]T" \\test]]]
     [//
      ["[0]" unit]]]]]])

(the unit
  Test
  (`` (all _.and
           (,, (template.with [,format <as> <of> ,unit]
                 [(let [threshold (|> (its unit.:factor ,unit)
                                      .integer
                                      (case.some integer.small)
                                      (case.some /.integer)
                                      /.reciprocal)]
                    (all _.and
                         (_.for [,format]
                                (formatT.spec (/.approximately? threshold) ,format
                                              (/.random 2)))
                         (monad.let [! random.monad]
                           [expected (/.random 2)
                            .let [change_of_scale!
                                  (|> expected
                                      <as>
                                      (by /.equality = expected)
                                      not)

                                  iso_morphism!
                                  (|> expected
                                      <as>
                                      <of>
                                      (by /.equality = expected))]]
                           (_.coverage [<as> <of>]
                             (and change_of_scale!
                                  iso_morphism!)))
                         ))]

                 [[/.degree /.as_degree /.of_degree unit.degree]
                  [/.gradian /.as_gradian /.of_gradian unit.gradian]
                  [/.per_cent /.as_per_cent /.of_per_cent unit.per_cent]
                  [/.per_mille /.as_per_mille /.of_per_mille unit.per_mille]
                  [/.per_myriad /.as_per_myriad /.of_per_myriad unit.per_myriad]]))
           )))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Number
              /.random])
      (monad.let [! random.monad]
        [digits (by ! each (|>> (/64/natural.% 3) ++) random.natural)
         expected (/.random digits)

         it_0 (/.random digits)
         it_1 (/.random digits)
         it_2 (/.random digits)

         expected_integer (integer.random digits)
         expected_small /64/rationalT.random])
      (all _.and
           (equalityT.specification /.equality /.=
                                    (/.random digits))
           (orderT.strict_total /.order /.< /.> /.<= /.>=
                                /.=
                                it_0 it_1 it_2)
           (orderT.choice' /.minor
                           /.=
                           (/.random digits))
           (orderT.choice' /.major
                           /.=
                           (/.random digits))
           (fractionT.addition /.addition /.+ /.zero /.-
                               /.=
                               (/.random digits))
           (fractionT.multiplication /.multiplication /.x /.positive_one /./
                                     /.= /.+ /.zero
                                     (/.random digits))
           (fractionT.ratio /.new /.numerator /.denominator
                            /.zero /.infinity integer.zero natural.zero
                            /.= integer.= natural.=
                            (/.random digits) (integer.random 2) (natural.random 2))
           
           (_.for [/.text]
                  (formatT.spec /.equality /.text (/.random 2)))

           (_.coverage [/.Rational /.Q]
             (and (identical? /.Rational /.Number)
                  (identical? /.Q /.Number)))
           (_.coverage [/.approximately?]
             (and (/.approximately? /.infinity it_0 it_1)
                  (/.approximately? (/.absolute expected) it_0 it_0)
                  (bit.= (/.approximately? /.zero it_0 it_1)
                         (/.= it_0 it_1))
                  (bit.= (/.approximately? (/.absolute expected) it_0 it_1)
                         (/.approximately? (/.absolute expected) it_1 it_0))
                  (/.approximately? (/.- (/.minor it_0 it_1) (/.major it_0 it_1))
                                    it_0
                                    it_1)))
           (_.coverage [/.delimiter]
             (text.contains? /.delimiter
                             (by /.text as expected)))
           (_.coverage [/.neutral?]
             (and (/.neutral? /.zero)
                  (bit.= (/.= /.zero expected)
                         (/.neutral? expected))))
           (_.coverage [/.infinity]
             (and (/.= /.infinity (/./ /.zero expected))

                  (/.= /.infinity (/./ /.zero /.positive_one))

                  (/.= /.infinity (/.+ /.infinity expected))
                  (/.= /.infinity (/.- /.infinity expected))
                  
                  (/.= /.infinity (/.x /.infinity expected))
                  (/.= /.zero (/./ /.infinity expected))))
           (_.coverage [/.indeterminate]
             (and (/.= /.indeterminate (/.reciprocal /.indeterminate))
                  (/.~ /.indeterminate expected)
                  
                  (/.= /.indeterminate (/.+ /.indeterminate expected))
                  (/.= /.indeterminate (/.- /.indeterminate expected))
                  (/.= /.indeterminate (/.- expected /.indeterminate))
                  
                  (/.= /.indeterminate (/.x /.indeterminate expected))
                  (/.= /.indeterminate (/./ /.indeterminate expected))
                  (/.= /.indeterminate (/./ expected /.indeterminate))))
           (_.coverage [/.absolute]
             (/.>= expected (/.absolute expected)))
           (_.coverage [/.signum]
             (and (/.= (/.absolute expected)
                       (/.x (/.signum expected)
                            expected))
                  (/.= expected
                       (/.x (/.signum expected)
                            (/.absolute expected)))))
           (_.coverage [/.whole /.partial]
             (or (/.= /.infinity expected)
                 (/.= /.indeterminate expected)
                 (/.= expected
                      (/.+ (/.whole expected)
                           (/.partial expected)))))
           (_.coverage [/.positive? /.negative?]
             (bit.= (/.positive? expected)
                    (not (/.negative? expected))))
           (_.coverage [/.negative_one]
             (and (not (/.= /.positive_one /.negative_one))
                  (/.= /.positive_one (/.x /.negative_one /.negative_one))))
           (_.coverage [/.opposite]
             (and (not (/.= /.positive_one (/.opposite expected)))
                  (/.= expected (/.opposite (/.opposite expected)))))
           
           (monad.let [! random.monad]
             [sample (/.random 2)
              power (by ! each (/64/integer.% +10)
                        random.integer)]
             (all _.and
                  (_.coverage [/.reciprocal]
                    (/.= /.positive_one
                         (/.x sample (/.reciprocal sample))))
                  (_.coverage [/.Exponent]
                    (type.< /64/fraction.Exponent /.Exponent))
                  (_.coverage [/.^]
                    (and (/.= /.positive_one (/.^ +0 sample))
                         (/.= sample (/.^ +1 sample))
                         (/.= (/.reciprocal sample)
                              (/.^ -1 sample))
                         (/.= (/.reciprocal (/.^ power sample))
                              (/.^ (/64/integer.opposite power) sample))
                         (if (/64/integer.< +0 power)
                             (/.= (list:mix /.x /.positive_one (list.repeated (.natural (/64/integer.opposite power)) sample))
                                  (/.reciprocal (/.^ power sample)))
                             (/.= (list:mix /.x /.positive_one (list.repeated (.natural power) sample))
                                  (/.^ power sample)))))
                  ))
           (monad.let random.monad
             [left (random.only (|>> (/.= /.zero)
                                     not)
                                (/.random 2))
              right (/.random 2)]
             (_.coverage [/.%]
               (let [rem (/.% left right)
                     div (|> right (/.- rem) (/./ left))]
                 (and (/.= right
                           (|> div (/.x left) (/.+ rem)))
                      (when (case.if /.integer div)
                        {.:Right _}
                        true
                        
                        else
                        false)))))
           (monad.let random.monad
             [expected (/.random 2)
              origin (/.random 2)]
             (_.coverage [/.inversion]
               (and (/.= (/.reciprocal expected)
                         (/.inversion /.positive_one expected))
                    (/.= expected
                         (/.inversion expected expected))
                    (|> expected
                        (/.inversion origin)
                        (/.inversion origin)
                        (/.= expected))
                    (/.= (/.x expected expected)
                         (/.inversion expected /.positive_one)))))
           (_.coverage [/.integer]
             (when (|> expected_integer
                       (case.some /.integer)
                       (case.if /.integer))
               {.:Right actual}
               (integer.= expected_integer actual)

               else
               false))
           (_.coverage [/.small]
             (when (|> expected_small
                       (case.some /.small)
                       (case.if /.small))
               {.:Right actual}
               (/64/rational.= expected_small actual)

               else
               false))

           ..unit
           )))
