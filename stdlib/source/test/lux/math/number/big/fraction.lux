... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [control
    ["[0]" maybe (.use "[1]:[0]" functor)]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]]
   [data
    ["[0]" sum]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" mix)]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" functor)]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]
   [aspect
    ["[0]" case]]
   ["[0]" function]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["n" natural]
    [//
     ["[0]" /64
      ["[1]/[0]" natural]
      ["i" integer]
      ["d" decimal]]
     [//
      ["[0]" unit]]]]]])

(the unit
  Test
  (`` (all _.and
           (,, (template.with [,format <as> <of> ,unit]
                 [(let [threshold (|> (its unit.:factor ,unit)
                                      (case.some n.small)
                                      (case.some /.natural)
                                      /.reciprocal)]
                    (all _.and
                         (_.for [,format]
                                (formatT.spec (/.approximately? threshold) ,format
                                              (/.random 2)))
                         (monad.let [! random.monad]
                           [expected (/.random 2)
                            .let [change_of_scale!
                                  (|> expected
                                      <as>
                                      (by /.equivalence = expected)
                                      not)

                                  iso_morphism!
                                  (|> expected
                                      <as>
                                      <of>
                                      (by /.equivalence = expected))]]
                           (_.coverage [<as> <of>]
                             (and change_of_scale!
                                  iso_morphism!)))
                         ))]

                 [[/.degree /.as_degree /.of_degree unit.degree]
                  [/.gradian /.as_gradian /.of_gradian unit.gradian]
                  [/.per_cent /.as_per_cent /.of_per_cent unit.per_cent]
                  [/.per_mille /.as_per_mille /.of_per_mille unit.per_mille]
                  [/.per_myriad /.as_per_myriad /.of_per_myriad unit.per_myriad]]))
           )))

... https://en.wikipedia.org/wiki/Specification_(technical_standard)
... https://en.wikipedia.org/wiki/Addition#Properties
(template.the .public (addition ,monoid ,+ ,zero ,-
                                ,=
                                ,random)
  [(<| (let [random ,random])
       (monad.let random.monad
         [it_0 random
          it_1 random
          it_2 random])
       (all _.and
            (monoidT.monoid ,monoid ,+ ,zero
                            ,=
                            ,random)
            (_.coverage [,zero ,+ ,-]
              (monoidT.is_commutative_group ,+ ,zero ,-
                                            ,=
                                            it_0 it_1 it_2))
            ))])

... https://en.wikipedia.org/wiki/Multiplication#Properties
(template.the .public (multiplication ,monoid ,x ,one ,/
                                      ,= ,+ ,zero
                                      ,random)
  [(<| (let [random ,random])
       (monad.let random.monad
         [it_0 random
          it_1 random
          it_2 random])
       (all _.and
            (monoidT.monoid ,monoid ,+ ,zero
                            ,=
                            ,random)
            (_.coverage [,zero ,one ,x ,/]
              (and (monoidT.is_commutative_group ,x ,one ,/
                                                 ,=
                                                 it_0 it_1 it_2)
                   (let [... https://en.wikipedia.org/wiki/Distributive_property
                         distributivity
                         (,= (,x it_0 (,+ it_1 it_2))
                             (,+ (,x it_0 it_1)
                                 (,x it_0 it_2)))

                         ... https://en.wikipedia.org/wiki/Absorbing_element
                         absorption
                         (,= ,zero
                             (,x ,zero it_0))]
                     (and distributivity
                          absorption))))))])

(template.the .public (ratio ,new ,numerator ,denominator
                             ,zero ,infinity ,numerator:zero ,denominator:zero
                             ,= ,numerator:= ,denominator:=
                             ,random ,random_numerator ,random_denominator)
  [(let [random ,random
         random_denominator ,random_denominator
         random_numerator ,random_numerator]
     (all _.and
          (monad.let random.monad
            [denominator (random.only (|>> (,denominator:= ,denominator:zero) not)
                                      random_denominator)
             numerator (random.only (|>> (,numerator:= ,numerator:zero) not)
                                    random_numerator)]
            (_.coverage [,new]
              (and (,= ,zero
                       (,new denominator ,numerator:zero))
                   (,= ,infinity
                       (,new ,denominator:zero numerator)))))
          (monad.let random.monad
            [it random]
            (_.coverage [,numerator ,denominator]
              (,= it
                  (,new (,denominator it)
                        (,numerator it)))))
          ))])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Fraction
              /.random])
      (monad.let [! random.monad]
        [digits (by ! each (/64/natural.% 3) random.natural)
         expected (/.random digits)

         it_0 (/.random digits)
         it_1 (/.random digits)
         it_2 (/.random digits)])
      (all _.and
           (equivalenceT.specification /.equivalence /.=
                                       (/.random digits))
           (orderT.strict_total /.order /.< /.> /.<= /.>=
                                /.=
                                it_0 it_1 it_2)
           (orderT.choice /.minimum /.minor /.infinity
                          /.=
                          (/.random digits))
           (orderT.choice /.maximum /.major /.zero
                          /.=
                          (/.random digits))
           (..addition /.addition /.+ /.zero /.-
                       /.=
                       (/.random digits))
           (..multiplication /.multiplication /.x /.one /./
                             /.= /.+ /.zero
                             (/.random digits))
           (..ratio /.new /.numerator /.denominator
                    /.zero /.infinity n.zero n.zero
                    /.= n.= n.=
                    (/.random digits) (n.random 2) (n.random 2))
           
           (_.for [/.text /.as_text]
                  (static.when (identical? /.as_text
                                           (by /.text as))
                    (formatT.spec /.equivalence /.text (/.random 2))))

           (_.coverage [/.Number /.Q+]
             (and (identical? /.Fraction /.Number)
                  (identical? /.Fraction /.Q+)))
           (_.coverage [/.approximately?]
             (and (bit.= (/.approximately? /.zero it_0 it_1)
                         (/.= it_0 it_1))
                  (/.approximately? (/.major it_0 it_1) it_0 it_1)
                  (or (not (/.approximately? (/.minor it_0 it_1) it_0 it_1))
                      (/.= it_0 it_1))))
           (_.coverage [/.infinity]
             (and (/.= /.infinity (/./ /.zero expected))

                  (/.= /.infinity (/./ /.zero /.one))

                  (/.= /.infinity (/.+ /.infinity expected))
                  (/.= /.infinity (/.- expected /.infinity))
                  (/.= /.zero (/.- /.infinity expected))
                  
                  (/.= /.infinity (/.x /.infinity expected))
                  (/.= /.zero (/./ /.infinity expected))))
           (_.coverage [/.indeterminate]
             (and (/.= /.indeterminate expected)

                  (/.= (/.+ /.indeterminate expected)
                       (/.- /.indeterminate expected))
                  
                  (/.= (/.x /.indeterminate expected)
                       (/./ /.indeterminate expected))))
           (_.coverage [/.whole /.partial]
             (or (/.= /.infinity expected)
                 (/.= /.indeterminate expected)
                 (/.= expected
                      (/.+ (/.whole expected)
                           (/.partial expected)))))
           (_.coverage [/.natural]
             (or (/.= /.infinity expected)
                 (/.= /.indeterminate expected)
                 (|> (/.whole expected)
                     (case.if /.natural)
                     (sum.either (function.constant false)
                                 (|>> (case.some /.natural)
                                      (/.+ (/.partial expected))
                                      (/.= expected))))))
           (monad.let [! random.monad]
             [sample (/.random 2)
              power (by ! each (i.% +10)
                        random.integer)]
             (all _.and
                  (_.coverage [/.reciprocal]
                    (/.= /.one
                         (/.x sample (/.reciprocal sample))))
                  (_.coverage [/.Exponent /.^]
                    (and (/.= /.one (/.^ +0 sample))
                         (/.= sample (/.^ +1 sample))
                         (/.= (/.reciprocal sample)
                              (/.^ -1 sample))
                         (/.= (/.reciprocal (/.^ power sample))
                              (/.^ (i.opposite power) sample))
                         (if (i.< +0 power)
                             (/.= (list:mix /.x /.one (list.repeated (.natural (i.opposite power)) sample))
                                  (/.reciprocal (/.^ power sample)))
                             (/.= (list:mix /.x /.one (list.repeated (.natural power) sample))
                                  (/.^ power sample)))))
                  ))
           (monad.let random.monad
             [left (random.only (|>> (/.= /.zero) not)
                                (/.random 2))
              right (/.random 2)]
             (_.coverage [/.%]
               (let [rem (/.% left right)
                     div (|> right
                             (/.- rem)
                             (/./ left))]
                 (and (/.= right
                           (|> div (/.x left) (/.+ rem)))
                      (when (case.if /.natural div)
                        {.:Right _}
                        true
                        
                        else
                        false)))))
           (monad.let random.monad
             [expected (/.random 2)
              origin (/.random 2)]
             (_.coverage [/.inversion]
               (let [reciprocal_is!
                     (/.= (/.reciprocal expected)
                          (/.inversion /.one expected))

                     with_respect_to_self!
                     (/.= expected
                          (/.inversion expected expected))

                     is_involution!
                     (|> expected
                         (/.inversion origin)
                         (/.inversion origin)
                         (/.= expected))

                     double!
                     (/.= (/.x expected expected)
                          (/.inversion expected /.one))]
                 (and reciprocal_is!
                      with_respect_to_self!
                      is_involution!
                      double!))))
           (_.coverage [/.excess]
             (let [origin it_0
                   it it_1]
               (and (bit.= (/.< origin it)
                           (/.> (/.- origin it) (/.excess origin it)))
                    (/.= /.zero
                         (/.excess it it))
                    (/.= origin
                         (/.excess (/.+ origin it) it)))))

           ..unit
           )))
