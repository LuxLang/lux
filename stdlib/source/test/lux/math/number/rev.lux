(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]
     [\\specification
      ["$." equivalence]
      ["$." hash]
      ["$." order]
      ["$." enum]
      ["$." interval]
      ["$." monoid]
      ["$." codec]]]
    [data
     ["." bit ("#\." equivalence)]]
    [math
     ["." random]]]]
  [\\library
   ["." /
    [// (#+ hex)
     ["n" nat]
     ["f" frac]
     ["." i64 ("#\." hash)]]]])

(def: signature
  Test
  (`` ($_ _.and
          (_.for [/.equivalence /.=]
                 ($equivalence.spec /.equivalence random.rev))
          (_.for [/.hash]
                 ($hash.spec /.hash random.rev))
          (_.for [/.order /.<]
                 ($order.spec /.order random.rev))
          (_.for [/.enum]
                 ($enum.spec /.enum random.rev))
          (_.for [/.interval]
                 ($interval.spec /.interval random.rev))
          (~~ (template [<compose> <monoid>]
                [(_.for [<monoid> <compose>]
                        ($monoid.spec /.equivalence <monoid> random.rev))]

                [/.+ /.addition]

                [/.min /.minimum]
                [/.max /.maximum]
                ))
          (~~ (template [<codec>]
                [(_.for [<codec>]
                        ($codec.spec /.equivalence <codec> random.rev))]

                [/.binary] [/.octal] [/.decimal] [/.hex]
                ))
          )))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [.Rev])
      (`` ($_ _.and
              (~~ (template [<half> <whole>]
                    [(_.cover [<half>]
                              (/.= <whole>
                                   (/.+ <half> <half>)))]

                    [/./2 .0]
                    [/./4 /./2]
                    [/./8 /./4]
                    [/./16 /./8]
                    [/./32 /./16]
                    [/./64 /./32]
                    [/./128 /./64]
                    [/./256 /./128]
                    [/./512 /./256]
                    [/./1024 /./512]
                    [/./2048 /./1024]
                    [/./4096 /./2048]
                    ))
              (do random.monad
                [sample random.rev]
                (_.cover [/.-]
                         (and (/.= .0 (/.- sample sample))
                              (/.= sample (/.- .0 sample)))))
              (do {! random.monad}
                [left random.rev
                 right random.rev]
                (_.cover [/.*]
                         (and (/.< left (/.* left right))
                              (/.< right (/.* left right)))))
              (do {! random.monad}
                [#let [dividend (\ ! map (i64.and (hex "FFFF"))
                                   random.rev)
                       divisor (\ ! map (|>> (i64.and (hex "F"))
                                             (i64.or (hex "1"))
                                             (i64.right_rotated 8)
                                             .rev)
                                  random.nat)]
                 dividend (random.only (/.> .0) dividend)
                 divisor/0 divisor
                 divisor/1 (random.only (|>> (/.= divisor/0) not)
                                        divisor)
                 scale (\ ! map (|>> (n.% 10) inc)
                          random.nat)]
                ($_ _.and
                    (_.cover [/./]
                             (bit\= (/.< divisor/0 divisor/1)
                                    (/.> (/./ divisor/0 dividend) (/./ divisor/1 dividend))))
                    (_.cover [/.%]
                             (\ i64.equivalence =
                                (.i64 (n.% (.nat divisor/0) (.nat dividend)))
                                (.i64 (/.% divisor/0 dividend))))
                    (_.cover [/.up /.down]
                             (let [symmetry!
                                   (|> dividend
                                       (/.up scale)
                                       (/.down scale)
                                       (/.= dividend))

                                   discrete_division!
                                   (/.= (/.% (.rev scale) dividend)
                                        (/.- (|> dividend
                                                 (/.down scale)
                                                 (/.up scale))
                                             dividend))]
                               (and symmetry!
                                    discrete_division!)))
                    (_.cover [/.ratio]
                             (|> dividend
                                 (/.up scale)
                                 (/.ratio dividend)
                                 (n.= scale)))
                    ))
              (do {! random.monad}
                [dividend random.rev
                 divisor (random.only (|>> (/.= .0) not)
                                      random.rev)]
                (_.cover [/./%]
                         (let [[quotient remainder] (/./% divisor dividend)]
                           (and (/.= (/./ divisor dividend) quotient)
                                (/.= (/.% divisor dividend) remainder)))))
              (do random.monad
                [left random.rev
                 right random.rev]
                ($_ _.and
                    (_.cover [/.>]
                             (bit\= (/.> left right)
                                    (/.< right left)))
                    (_.cover [/.<= /.>=]
                             (bit\= (/.<= left right)
                                    (/.>= right left)))
                    ))
              (do random.monad
                [sample random.nat]
                (_.cover [/.reciprocal]
                         (/.= (/.reciprocal sample)
                              (|> sample /.reciprocal .nat /.reciprocal .nat /.reciprocal))))
              (do {! random.monad}
                [expected (\ ! map (|>> f.abs (f.% +1.0))
                             random.safe_frac)
                 sample random.rev]
                (_.cover [/.frac]
                         (and (|> expected f.rev /.frac (f.= expected))
                              (f.number? (/.frac sample)))))

              ..signature
              ))))
