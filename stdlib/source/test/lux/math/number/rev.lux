... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" enum
     ["[1]T" \\test]]
    ["[0]" interval
     ["[1]T" \\test]]
    ["[0]" codec
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [// (.only hex)
    ["n" nat]
    ["f" frac]
    ["[0]" i64 (.use "[1]#[0]" hash)]]]])

(def signature
  Test
  (`` (all _.and
           (_.for [/.equivalence /.=]
                  (equivalenceT.spec /.equivalence random.rev))
           (_.for [/.hash]
                  (hashT.spec /.hash random.rev))
           (_.for [/.order /.<]
                  (orderT.spec /.order random.rev))
           (_.for [/.enum]
                  (enumT.spec /.enum random.rev))
           (_.for [/.interval]
                  (intervalT.spec /.interval random.rev))
           (,, (with_template [<composite> <monoid>]
                 [(_.for [<monoid> <composite>]
                         (monoidT.spec /.equivalence <monoid> random.rev))]

                 [/.+ /.addition]

                 [/.min /.minimum]
                 [/.max /.maximum]
                 ))
           (,, (with_template [<codec>]
                 [(_.for [<codec>]
                         (codecT.spec /.equivalence <codec> random.rev))]

                 [/.binary] [/.octal] [/.decimal] [/.hex]
                 ))
           (_.coverage [/.arithmetic]
             (and (same? /.+ (of /.arithmetic +))
                  (same? /.- (of /.arithmetic -))
                  (same? /.* (of /.arithmetic *))
                  (same? /./ (of /.arithmetic /))))
           )))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [.Rev])
      (`` (all _.and
               (,, (with_template [<half> <whole>]
                     [(_.coverage [<half>]
                        (/.= <whole>
                             (/.+ <half> <half>)))]

                     [/./1 (-- /./1)]
                     [/./2 .0]
                     [/./4 /./2]
                     [/./8 /./4]
                     [/./16 /./8]
                     [/./32 /./16]
                     [/./64 /./32]
                     [/./128 /./64]
                     [/./256 /./128]
                     [/./512 /./256]
                     [/./1024 /./512]
                     [/./2048 /./1024]
                     [/./4096 /./2048]
                     ))
               (do random.monad
                 [sample random.rev]
                 (_.coverage [/.-]
                   (and (/.= .0 (/.- sample sample))
                        (/.= sample (/.- .0 sample)))))
               (do [! random.monad]
                 [left random.rev
                  right random.rev]
                 (_.coverage [/.*]
                   (and (/.< left (/.* left right))
                        (/.< right (/.* left right)))))
               (do [! random.monad]
                 [.let [dividend (of ! each (i64.and (hex "FFFF"))
                                     random.rev)
                        divisor (of ! each (|>> (i64.and (hex "F"))
                                                (i64.or (hex "1"))
                                                (i64.right_rotated 8)
                                                .rev)
                                    random.nat)]
                  dividend (random.only (/.> .0) dividend)
                  divisor/0 divisor
                  divisor/1 (random.only (|>> (/.= divisor/0) not)
                                         divisor)
                  scale (of ! each (|>> (n.% 10) ++)
                            random.nat)]
                 (all _.and
                      (_.coverage [/./]
                        (bit#= (/.< divisor/0 divisor/1)
                               (/.> (/./ divisor/0 dividend) (/./ divisor/1 dividend))))
                      (_.coverage [/.%]
                        (of i64.equivalence =
                            (.i64 (n.% (.nat divisor/0) (.nat dividend)))
                            (.i64 (/.% divisor/0 dividend))))
                      (_.coverage [/.up /.down]
                        (let [symmetry!
                              (|> dividend
                                  (/.up scale)
                                  (/.down scale)
                                  (/.= dividend))

                              discrete_division!
                              (/.= (/.% (.rev scale) dividend)
                                   (/.- (|> dividend
                                            (/.down scale)
                                            (/.up scale))
                                        dividend))]
                          (and symmetry!
                               discrete_division!)))
                      (_.coverage [/.ratio]
                        (|> dividend
                            (/.up scale)
                            (/.ratio dividend)
                            (n.= scale)))
                      ))
               (do [! random.monad]
                 [dividend random.rev
                  divisor (random.only (|>> (/.= .0) not)
                                       random.rev)]
                 (_.coverage [/./%]
                   (let [[quotient remainder] (/./% divisor dividend)]
                     (and (/.= (/./ divisor dividend) quotient)
                          (/.= (/.% divisor dividend) remainder)))))
               (do random.monad
                 [left random.rev
                  right random.rev]
                 (all _.and
                      (_.coverage [/.>]
                        (bit#= (/.> left right)
                               (/.< right left)))
                      (_.coverage [/.<= /.>=]
                        (bit#= (/.<= left right)
                               (/.>= right left)))
                      ))
               (do random.monad
                 [sample random.nat]
                 (_.coverage [/.reciprocal]
                   (/.= (/.reciprocal sample)
                        (|> sample /.reciprocal .nat /.reciprocal .nat /.reciprocal))))
               (do [! random.monad]
                 [expected (of ! each (|>> f.abs (f.% +1.0))
                               random.safe_frac)
                  sample random.rev]
                 (_.coverage [/.frac]
                   (and (|> expected f.rev /.frac (f.= expected))
                        (f.number? (/.frac sample)))))

               ..signature
               ))))
