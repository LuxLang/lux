... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [function
    ["[0]" predicate]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" natural]
  ["[1][0]" integer]
  ["[1][0]" fraction]
  ["[1][0]" rational]])

(the (size minimum maximum)
  (-> Natural Natural
      (Random Natural))
  (|> random.natural
      (by random.monad each
          (|>> (n.% (++ maximum))
               (n.major minimum)))))

(the .public random
  (Random /.Number)
  (do [! random.monad]
    [size (by ! each (n.% 1,000) random.natural)]
    (when size
      0 (pure /.zero)
      _ (do [! random.monad]
          [idx (|> random.natural (by ! each (n.% size)))]
          (pure (/.with_one idx /.zero))))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Number])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec /.equivalence ..random))

           (do [! random.monad]
             [size (by ! each (|>> (n.% 1,000) ++) random.natural)
              idx (by ! each (n.% size) random.natural)
              sample ..random
              left ..random
              right ..random]
             (all _.and
                  (_.coverage [/.bit /.with_one]
                    (and (|> /.zero
                             (/.bit idx)
                             not)
                         (|> /.zero
                             (/.with_one idx)
                             (/.bit idx))))
                  (_.coverage [/.with_zero]
                    (|> /.zero
                        (/.with_one idx)
                        (/.with_zero idx)
                        (/.bit idx)
                        not))
                  (_.coverage [/.with_flipped]
                    (and (|> /.zero (/.with_flipped idx) (/.bit idx))
                         (|> /.zero (/.with_flipped idx) (/.with_flipped idx) (/.bit idx) not)))
                  (_.coverage [/.not]
                    (or (same? /.zero sample)
                        (and (not (by /.equivalence = sample (/.not sample)))
                             (by /.equivalence = sample (/.not (/.not sample))))))
                  (_.coverage [/.xor]
                    (with /.equivalence
                      (and (= /.zero
                              (/.xor sample sample))
                           (= (/.xor left right)
                              (/.xor right left)))))
                  (_.coverage [/.or]
                    (and (by /.equivalence = sample (/.or sample sample))
                         (by /.equivalence =
                             (/.or left right)
                             (/.or right left))))
                  (_.coverage [/.and]
                    (and (by /.equivalence = sample (/.and sample sample))
                         (by /.equivalence =
                             (/.and left right)
                             (/.and right left))))
                  (_.coverage [/.zero]
                    (with /.equivalence
                      (and (= /.zero (/.not /.zero))
                           (= sample (/.xor /.zero sample))
                           (= sample (/.or /.zero sample))
                           (= /.zero (/.and /.zero sample)))))

                  /natural.test
                  /integer.test
                  /fraction.test
                  /rational.test
                  )))))
