... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" set]]]
   [logic
    ["[0]" bit]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     [/64
      ["[0]" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the random
  (Random /.Signum)
  (random.either (random#pure /.positive)
                 (random#pure /.negative)))

(expansion.let [,each (these /.positive /.negative)]
  (the .public test
    Test
    (<| (_.covering /._)
        (do [! random.monad]
          [it ..random])
        (_.for [/.Signum
                ,each])
        (`` (all _.and
                 (,, (template.with [,slot ,hash]
                       [(_.coverage [,slot]
                          (let [each (list ,each)
                                each_unique (|> each
                                                (list#each (its ,slot))
                                                (set.of_list ,hash))]
                            (natural.= (list.size each)
                                       (set.size each_unique))))]

                       [[/.#character text.hash]
                        [/.#value bit.hash]]))
                 (_.coverage [/.Value /.x]
                   (and (bit.= (its /.#value /.negative)
                               (/.x (its /.#value /.positive)
                                    (its /.#value /.negative)))
                        (bit.= (its /.#value /.positive)
                               (/.x (its /.#value it)
                                    (its /.#value it)))))
                 )))))
