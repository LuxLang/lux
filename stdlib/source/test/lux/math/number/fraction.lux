... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except identical?)
   [abstract
    [monad (.only do)]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [error
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" bit]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" functor)]
    ["[0]" arithmetic
     ["[1]T" \\test]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["n" natural]
    ["i" integer]
    ["d" decimal]
    [//
     ["[0]" unit]]]]])

(the .public random
  (Random /.Fraction)
  (let [part (is (Random Natural)
                 (random#each (n.% 1,000,000) random.natural))]
    (|> (random.and part
                    part)
        (random#each /.normal)
        (random.only /.finite?))))

(the (identical? reference exemplar)
  (-> /.Fraction /.Fraction
      Bit)
  (and (n.= (its /.#numerator reference)
            (its /.#numerator exemplar))
       (n.= (its /.#denominator reference)
            (its /.#denominator exemplar))))

(the (normal? it)
  (-> /.Fraction
      Bit)
  (identical? it (/.normal it)))

(the unit
  Test
  (`` (all _.and
           (,, (template.with [,format <as> <of> ,unit]
                 [(let [threshold (|> (its unit.#factor ,unit)
                                      /.fraction
                                      /.reciprocal)]
                    (all _.and
                         (_.for [,format]
                                (formatT.spec (/.approximately threshold) ,format
                                              ..random))
                         (do [! random.monad]
                           [expected ..random
                            .let [change_of_scale!
                                  (|> expected
                                      <as>
                                      (by /.equivalence = expected)
                                      not)

                                  iso_morphism!
                                  (|> expected
                                      <as>
                                      <of>
                                      (by /.equivalence = expected))]]
                           (_.coverage [<as> <of>]
                             (and change_of_scale!
                                  iso_morphism!)))
                         ))]

                 [/.degree /.as_degree /.of_degree unit.degree]
                 [/.gradian /.as_gradian /.of_gradian unit.gradian]
                 [/.per_cent /.as_per_cent /.of_per_cent unit.per_cent]
                 [/.per_mille /.as_per_mille /.of_per_mille unit.per_mille]
                 [/.per_myriad /.as_per_myriad /.of_per_myriad unit.per_myriad]
                 ))
           )))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Fraction
              /.#numerator /.#denominator])
      (do random.monad
        [expected ..random

         it_0 ..random
         it_1 ..random])
      (`` (all _.and
               (_.for [/.equivalence /.=]
                      (static.when (same? /.equivalence /.=)
                        (equivalenceT.spec /.equivalence ..random)))
               (_.for [/.order /.<]
                      (static.when (same? (by /.order <) /.<)
                        (orderT.spec /.order ..random)))
               (,, (template.with [<composite> <monoid>]
                     [(_.for [<monoid> <composite>]
                             (static.when (same? <composite> (by <monoid> composite))
                               (monoidT.spec /.equivalence <monoid> ..random)))]

                     [/.+ /.addition]
                     [/.* /.multiplication]

                     [/.minor /.minimum]
                     [/.major /.maximum]
                     ))
               (_.for [/.text /.as_text]
                      (static.when (same? /.as_text
                                          (by /.text as))
                        (formatT.spec /.equivalence /.text ..random)))
               (_.for [/.arithmetic]
                      (arithmeticT.spec /.equivalence /.arithmetic ..random))

               (_.coverage [/.Number /.Q+]
                 (and (alias? /.Fraction /.Number)
                      (alias? /.Fraction /.Q+)))
               (_.coverage [/.approximately]
                 (and (bit.= (by (/.approximately /.zero) = it_0 it_1)
                             (/.= it_0 it_1))
                      (by (/.approximately (/.major it_0 it_1)) = it_0 it_1)
                      (or (not (by (/.approximately (/.minor it_0 it_1)) = it_0 it_1))
                          (/.= it_0 it_1))))
               (_.coverage [/.delimiter]
                 (text.contains? /.delimiter
                                 (/.as_text expected)))
               (_.coverage [/.zero]
                 (and (/.= expected (/.+ /.zero expected))
                      (/.= expected (/.- /.zero expected))
                      
                      (/.= /.zero (/.* /.zero expected))
                      (/.= /.infinity (/./ /.zero expected))))
               (_.coverage [/.one]
                 (and (not (/.= expected (/.+ /.one expected)))
                      (/.= expected (/.* /.one expected))
                      (/.= expected (/./ /.one expected))))
               (_.coverage [/.smallest]
                 (not (/.< /.smallest expected)))
               (_.coverage [/.biggest]
                 (not (/.> /.biggest expected)))
               (_.coverage [/.infinity]
                 (and (/.= /.infinity (/./ /.zero /.one))

                      (/.= /.infinity (/.+ /.infinity expected))
                      (/.= /.infinity (/.- /.infinity expected))
                      
                      (/.= /.infinity (/.* /.infinity expected))
                      (/.= /.zero (/./ /.infinity expected))))
               (_.coverage [/.indeterminate]
                 (and (/.= /.indeterminate expected)

                      (/.= (/.+ /.indeterminate expected)
                           (/.- /.indeterminate expected))
                      
                      (/.= (/.* /.indeterminate expected)
                           (/./ /.indeterminate expected))))
               (_.coverage [/.finite?]
                 (and (/.finite? expected)
                      (not (/.finite? /.infinity))))
               (_.coverage [/.determinate?]
                 (and (/.determinate? expected)
                      (not (/.determinate? /.indeterminate))))
               (_.coverage [/.whole /.partial]
                 (/.= expected
                      (/.+ (/.whole expected)
                           (/.partial expected))))
               (_.coverage [/.natural]
                 (|> (/.natural (/.whole expected))
                     (try#each (|>> /.fraction
                                    (/.+ (/.partial expected))
                                    (/.= expected)))
                     (try.else false)))
               (_.coverage [/.not_a_natural]
                 (or (|> (/.partial expected)
                         /.natural
                         (try.is? /.not_a_natural))
                     (and (/.= /.zero (/.partial expected))
                          (/.= expected (/.whole expected)))))
               (_.coverage [/.decimal]
                 (let [margin_of_error +0.000,000,000,001]
                   (and (by (d.approximately margin_of_error) =
                            (/.decimal (/.whole expected))
                            (d.whole (/.decimal expected)))
                        (by (d.approximately margin_of_error) =
                            (/.decimal (/.partial expected))
                            (d.partial (/.decimal expected))))))
               (do random.monad
                 [denom/0 random.natural
                  denom/1 random.natural]
                 (_.coverage [/.fraction]
                   (/.= (/.fraction 0 denom/0)
                        (/.fraction 0 denom/1))))
               (do [! random.monad]
                 [before_normal (random.and random.natural
                                            random.natural)]
                 (_.coverage [/.normal]
                   (or (normal? before_normal)
                       (let [it (/.normal before_normal)]
                         (and (normal? it)
                              (/.= before_normal it))))))
               (do random.monad
                 [numerator random.natural
                  denominator (random.only (|>> (n.= 1) not)
                                           random.natural)]
                 (_.coverage [/.natural]
                   (let [only_numerator!
                         (|> (/.fraction numerator)
                             /.natural
                             (maybe#each (n.= numerator))
                             (maybe.else false))

                         denominator_1!
                         (|> (/.fraction numerator 1)
                             /.natural
                             (maybe#each (n.= numerator))
                             (maybe.else false))

                         with_denominator!
                         (when (/.natural (/.fraction numerator denominator))
                           {try.#Success factor}
                           (and (n.= 0 (n.% denominator numerator))
                                (n.= numerator (n.* factor denominator)))
                           
                           {try.#Failure _}
                           (not (n.= 0 (n.% denominator numerator))))]
                     (and only_numerator!
                          denominator_1!
                          with_denominator!))))
               (do [! random.monad]
                 [sample ..random
                  power (by ! each (i.% +10)
                            random.integer)]
                 (all _.and
                      (_.coverage [/.-]
                        (and (/.= (/.fraction 0) (/.- sample sample))
                             (/.= sample (/.- (/.fraction 0) sample))))
                      (_.coverage [/./]
                        (and (/.= (/.fraction 1) (/./ sample sample))
                             (/.= sample (/./ (/.fraction 1) sample))))
                      (_.coverage [/.reciprocal]
                        (/.= (/.fraction 1)
                             (/.* sample (/.reciprocal sample))))
                      (_.coverage [/.^]
                        (and (/.= /.one (/.^ +0 sample))
                             (/.= sample (/.^ +1 sample))
                             (/.= (/.reciprocal sample)
                                  (/.^ -1 sample))
                             (/.= (/.reciprocal (/.^ power sample))
                                  (/.^ (i.opposite power) sample))
                             (if (i.< +0 power)
                                 (/.= (list#mix /.* /.one (list.repeated (.natural (i.opposite power)) sample))
                                      (/.reciprocal (/.^ power sample)))
                                 (/.= (list#mix /.* /.one (list.repeated (.natural power) sample))
                                      (/.^ power sample)))))
                      ))
               (do random.monad
                 [left (random.only (|>> (/.= (/.fraction 0)) not)
                                    ..random)
                  right ..random]
                 (_.coverage [/.%]
                   (let [rem (/.% left right)
                         div (|> right (/.- rem) (/./ left))]
                     (and (/.= right
                               (|> div (/.* left) (/.+ rem)))
                          (when (/.natural div)
                            {try.#Success _} true
                            {try.#Failure _} false)))))
               (do random.monad
                 [left ..random
                  right ..random]
                 (all _.and
                      (_.coverage [/.>]
                        (bit.= (/.> left right)
                               (/.< right left)))
                      (_.coverage [/.<= /.>=]
                        (bit.= (/.<= left right)
                               (/.>= right left)))
                      ))

               ..unit
               ))))
