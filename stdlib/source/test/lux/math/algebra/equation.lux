... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [math
    ["[0]" random]
    [arithmetic
     [infix (.only infix)]]
    [number
     [/64
      ["[0]" integer]
      ["[0]" decimal]]]]
   [test
    ["_" property (.only Test)]]
   [control
    ["[0]" state]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" formula (.only Formula)]]]])

(the force_=_mass_x_acceleration
  (/.Function [Formula Formula])
  (formula.new (monad.let state.monad
                 [force (formula.variable "force")
                  mass (formula.variable "mass")
                  acceleration (formula.variable "acceleration")]
                 (pure [force
                        [mass acceleration]
                        (infix [force /.= [mass formula.x acceleration]])]))))

(the force
  (/.function (let [[force [mass acceleration] it] force_=_mass_x_acceleration]
                [force (list mass acceleration) it])))

(the mass
  (/.function (let [[force [mass acceleration] it] force_=_mass_x_acceleration
                    it (|> it
                           (/./ acceleration)
                           /.in_reverse)]
                [mass (list acceleration force) it])))

(the acceleration
  (/.function (let [[force [mass acceleration] it] force_=_mass_x_acceleration
                    it (|> it
                           (/./ mass)
                           /.in_reverse)]
                [acceleration (list mass force) it])))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [.let [scalar (by ! each
                          (|>> (integer.% +1,000,000)
                               integer.decimal)
                          random.integer)]
         expected_mass scalar
         expected_acceleration scalar])
      (all _.and
           (_.coverage [/.function]
             (and (|> (force expected_mass expected_acceleration)
                      (mass expected_acceleration)
                      (decimal.= expected_mass))
                  (|> (force expected_mass expected_acceleration)
                      (acceleration expected_mass)
                      (decimal.= expected_acceleration))))
           )))
