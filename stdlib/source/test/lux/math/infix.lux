(.module:
  [lux #*
   data/text/format
   [abstract/monad (#+ do)]
   ["r" math/random]
   ["_" test (#+ Test)]
   [data
    ["." bit ("#@." equivalence)]]]
  {1
   ["." /
    ["." //]]})

(def: #export test
  Test
  (<| (_.context (%name (name-of /.infix)))
      (do r.monad
        [subject r.nat
         parameter r.nat
         extra r.nat
         angle r.frac]
        ($_ _.and
            (_.test "Constant values don't change."
                    (n/= subject
                         (/.infix subject)))
            (_.test "Can call binary functions."
                    (n/= (//.n/gcd parameter subject)
                         (/.infix [subject //.n/gcd parameter])))
            (_.test "Can call unary functions."
                    (f/= (//.sin angle)
                         (/.infix [//.sin angle])))
            (_.test "Can use regular syntax in the middle of infix code."
                    (n/= (//.n/gcd extra (n/* parameter subject))
                         (/.infix [(n/* parameter subject) //.n/gcd extra])))
            (_.test "Can use non-numerical functions/macros as operators."
                    (bit@= (and (n/< parameter subject) (n/< extra parameter))
                           (/.infix [[subject n/< parameter] and [parameter n/< extra]])))
            (_.test "Can combine bit operations in special ways via special keywords."
                    (and (bit@= (and (n/< parameter subject) (n/< extra parameter))
                                (/.infix [#and subject n/< parameter n/< extra]))
                         (bit@= (and (n/< parameter subject) (n/> extra parameter))
                                (/.infix [#and subject n/< parameter n/> extra]))))
            ))))
