(.module:
  [lux #*
   ["%" data/text/format (#+ format)]
   ["_" test (#+ Test)]
   ["r" math/random]
   [abstract/monad (#+ do)]
   [control
    ["." try]]
   [data
    ["." product]
    ["." bit ("#@." equivalence)]
    [number
     ["i" int]]]
   ["." type ("#@." equivalence)]]
  {1
   ["." /]})

(def: %3 (/.modulus +3))
(`` (type: Mod3 (~~ (:of %3))))

(def: modulusR
  (r.Random Int)
  (|> r.int
      (:: r.monad map (i.% +1000))
      (r.filter (|>> (i.= +0) not))))

(def: valueR
  (r.Random Int)
  (|> r.int (:: r.monad map (i.% +1000))))

(def: (modR modulus)
  (All [m] (-> (/.Modulus m) (r.Random [Int (/.Mod m)])))
  (do r.monad
    [raw valueR]
    (wrap [raw (/.mod modulus raw)])))

(def: value
  (All [m] (-> (/.Mod m) Int))
  (|>> /.un-mod product.left))

(def: (comparison m/? i/?)
  (All [m]
    (-> (-> (/.Mod m) (/.Mod m) Bit)
        (-> Int Int Bit)
        (-> (/.Mod m) (/.Mod m) Bit)))
  (function (_ param subject)
    (bit@= (m/? param subject)
           (i/? (value param)
                (value subject)))))

(def: (arithmetic modulus m/! i/!)
  (All [m]
    (-> (/.Modulus m)
        (-> (/.Mod m) (/.Mod m) (/.Mod m))
        (-> Int Int Int)
        (-> (/.Mod m) (/.Mod m) Bit)))
  (function (_ param subject)
    (|> (i/! (value param)
             (value subject))
        (/.mod modulus)
        (/.= (m/! param subject)))))

(def: #export test
  Test
  (<| (_.context (%.name (name-of /.Mod)))
      (do r.monad
        [_normalM modulusR
         _alternativeM (|> modulusR (r.filter (|>> (i.= _normalM) not)))
         #let [normalM (|> _normalM /.from-int try.assume)
               alternativeM (|> _alternativeM /.from-int try.assume)]
         [_param param] (modR normalM)
         [_subject subject] (modR normalM)
         #let [copyM (|> normalM /.to-int /.from-int try.assume)]]
        ($_ _.and
            (_.test "Every modulus has a unique type, even if the numeric value is the same as another."
                    (and (type@= (:of normalM)
                                 (:of normalM))
                         (not (type@= (:of normalM)
                                      (:of alternativeM)))
                         (not (type@= (:of normalM)
                                      (:of copyM)))))
            (_.test "Can extract the original integer from the modulus."
                    (i.= _normalM
                         (/.to-int normalM)))
            (_.test "Can compare mod'ed values."
                    (and (/.= subject subject)
                         ((comparison /.= i.=) param subject)
                         ((comparison /.< i.<) param subject)
                         ((comparison /.<= i.<=) param subject)
                         ((comparison /.> i.>) param subject)
                         ((comparison /.>= i.>=) param subject)))
            (_.test "Mod'ed values are ordered."
                    (and (bit@= (/.< param subject)
                                (not (/.>= param subject)))
                         (bit@= (/.> param subject)
                                (not (/.<= param subject)))
                         (bit@= (/.= param subject)
                                (not (or (/.< param subject)
                                         (/.> param subject))))))
            (_.test "Can do arithmetic."
                    (and ((arithmetic normalM /.+ i.+) param subject)
                         ((arithmetic normalM /.- i.-) param subject)
                         ((arithmetic normalM /.* i.*) param subject)))
            (_.test "Can sometimes find multiplicative inverse."
                    (case (/.inverse subject)
                      (#.Some subject^-1)
                      (|> subject
                          (/.* subject^-1)
                          (/.= (/.mod normalM +1)))
                      
                      #.None
                      true))
            (_.test "Can encode/decode to text."
                    (let [(^open "mod/.") (/.codec normalM)]
                      (case (|> subject mod/encode mod/decode)
                        (#try.Success output)
                        (/.= subject output)

                        (#try.Failure error)
                        false)))
            (_.test "Can equalize 2 moduli if they are equal."
                    (case (/.equalize (/.mod normalM _subject)
                                      (/.mod copyM _param))
                      (#try.Success paramC)
                      (/.= param paramC)

                      (#try.Failure error)
                      false))
            (_.test "Cannot equalize 2 moduli if they are the different."
                    (case (/.equalize (/.mod normalM _subject)
                                      (/.mod alternativeM _param))
                      (#try.Success paramA)
                      false

                      (#try.Failure error)
                      true))
            (_.test "All numbers are congruent to themselves."
                    (/.congruent? normalM _subject _subject))
            (_.test "If 2 numbers are congruent under a modulus, then they must also be equal under the same modulus."
                    (bit@= (/.congruent? normalM _param _subject)
                           (/.= param subject)))
            ))))
