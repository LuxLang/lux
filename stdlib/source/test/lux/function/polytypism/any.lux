... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" try]]
   [function
    ["[0]" predicate]]
   [data
    ["[0]" bit]
    [collection
     ["[0]" stack]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [macro
    ["[0]" template]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" //]]])

(the any
  (/.Algorithm Stack)
  (is (/.Algorithm (//.Recursive
                    (for_any (_ recursion)
                      (//.Sum (//.Constant [])
                              (//.Product //.Variable recursion)))))
      (/.recursive
       (function (_ it)
         (/.sum /.constant
                (/.product /.variable
                           it))))))

(the .public test
  Test
  (do [! random.monad]
    [.let [natural (is (Random Natural)
                       (by ! each (n.% 1,000,000) random.natural))
           even (is (Random Natural)
                    (by ! each (n.x 2) natural))
           odd (is (Random Natural)
                   (by ! each (n.+ 1) even))]
     even_0 even
     even_1 even
     odd_0 odd]
    (<| (_.covering /._)
        (_.for [/.Algorithm])
        (all _.and
             (_.coverage [/.constant /.variable
                          /.sum /.product
                          /.recursive]
               (`` (and (,, (template.with [,stack]
                              [(let [it (is (Stack Natural)
                                            ,stack)]
                                 (when [(stack.example n.odd? it)
                                        (..any n.odd? it)]
                                   [{try.#Success expected} {try.#Success actual}]
                                   (same? expected actual)

                                   [{try.#Failure expected} {try.#Failure actual}]
                                   true

                                   _
                                   false))]

                              [(stack even_0 even_1 odd_0)]
                              [(stack even_0 odd_0 even_1)]
                              [(stack odd_0 even_0 even_1)]
                              [(stack even_0 even_1 even_0)]
                              )))))
             (_.coverage [/.none]
               (and (when (/.constant predicate.all [])
                      {try.#Failure /.none}
                      true

                      _
                      false)
                    (when (/.variable predicate.none odd_0)
                      {try.#Failure /.none}
                      true

                      _
                      false)))
             ))))
