... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    ["[0]" monad]
    ["[0]" monoid
     ["[1]T" \\test]]
    [functor
     ["[0]" contravariant
      ["[1]T" \\test]]]]
   ["[0]" function]
   [data
    [collection
     ["[0]" stack]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 ["/" \\library]
 ["!" \\theorem])

(the (multiple? factor)
  (-> Natural (/.Predicate Natural))
  (when factor
    0 (function.constant false)
    _ (|>> (n.% factor) (n.= 0))))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [sample random.natural
         samples (random.stack 10 random.natural)
         .let [equivalence (is (Equivalence (/.Predicate Natural))
                               (implementation
                                (the (= left right)
                                  (bit.= (left sample)
                                         (right sample)))))]])
      (_.for [/.Predicate])
      (all _.and
           (_.for [/.functor]
                  (contravariantT.spec equivalence (multiple? 2) /.functor))
           (let [generator (is (Random (/.Predicate Natural))
                               (|> random.natural
                                   (random.only (|>> (n.= 0) not))
                                   (by ! each multiple?)))]
             (all _.and
                  (_.for [/.union]
                         (monoidT.spec equivalence /.union generator))
                  (_.for [/.intersection]
                         (monoidT.spec equivalence /.intersection generator))))
           
           (_.by_proof [/.none]
                       (list (_.proposition !.none)))
           (_.by_proof [/.all]
                       (list (_.proposition !.all)))
           (_.by_proof [/.or]
                       (list (_.proposition !.or_none)
                             (_.proposition !.<_or_left)
                             (_.proposition !.<_or_right)))
           (_.by_proof [/.and]
                       (list (_.proposition !.and_all)
                             (_.proposition !.<_and_left)
                             (_.proposition !.<_and_right)))
           (_.by_proof [/.complement /.not]
                       (list (_.proposition !.double_negation)
                             (_.proposition !.not_none)
                             (_.proposition !.not_all)))
           (_.by_proof [/.difference /.-]
                       (list (_.proposition !.difference_of_none)
                             (_.proposition !.difference_of_all)
                             (_.proposition !.difference_of_self)))
           (_.coverage [/.rec]
             (let [even? (multiple? 2)
                   any_even? (is (/.Predicate (Stack Natural))
                                 (/.rec (function (_ again)
                                          (function (_ values)
                                            (when values
                                              {.:Empty}
                                              false

                                              {.:Top head tail}
                                              (or (even? head)
                                                  (again tail)))))))]
               (bit.= (stack.any? even? samples)
                      (any_even? samples))))
           (monad.let [! random.monad]
             [expected random.natural
              .let [not_expected (++ expected)]]
             (_.coverage [/.if]
               (and (identical? expected (/.if []
                                               /.all
                                               expected
                                               
                                               /.none
                                               not_expected
                                               
                                               not_expected))
                    (identical? expected (/.if []
                                               /.none
                                               not_expected
                                               
                                               /.all
                                               expected
                                               
                                               not_expected))
                    (identical? expected (/.if []
                                               /.none
                                               not_expected
                                               
                                               expected)))))
           )))
