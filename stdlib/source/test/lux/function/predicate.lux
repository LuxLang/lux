... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    ["[0]" monad]
    ["[0]" monoid
     ["[1]T" \\test]]
    [functor
     ["[0]" contravariant
      ["[1]T" \\test]]]]
   ["[0]" function]
   [data
    [collection
     ["[0]" stack]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the (multiple? factor)
  (-> Natural (/.Predicate Natural))
  (when factor
    0 (function.constant false)
    _ (|>> (n.% factor) (n.= 0))))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [sample random.natural
         samples (random.stack 10 random.natural)
         .let [equivalence (is (Equivalence (/.Predicate Natural))
                               (implementation
                                (the (= left right)
                                  (bit.= (left sample)
                                         (right sample)))))]])
      (_.for [/.Predicate])
      (all _.and
           (_.for [/.functor]
                  (contravariantT.spec equivalence (multiple? 2) /.functor))
           (let [generator (is (Random (/.Predicate Natural))
                               (|> random.natural
                                   (random.only (|>> (n.= 0) not))
                                   (by ! each multiple?)))]
             (all _.and
                  (_.for [/.union]
                         (monoidT.spec equivalence /.union generator))
                  (_.for [/.intersection]
                         (monoidT.spec equivalence /.intersection generator))))
           
           (_.coverage [/.none]
             (bit.= false (/.none sample)))
           (_.coverage [/.all]
             (bit.= true (/.all sample)))
           (_.coverage [/.or]
             (bit.= (/.all sample)
                    ((/.or /.none /.all) sample)))
           (_.coverage [/.and]
             (bit.= (/.none sample)
                    ((/.and /.none /.all) sample)))
           (_.coverage [/.complement]
             (and (bit.= (not (/.none sample))
                         ((/.complement /.none) sample))
                  (bit.= (not (/.all sample))
                         ((/.complement /.all) sample))))
           (_.coverage [/.not]
             (identical? /.complement /.not))
           (_.coverage [/.difference]
             (let [/2? (multiple? 2)
                   /3? (multiple? 3)]
               (bit.= (and (/2? sample)
                           (not (/3? sample)))
                      ((/.difference /3? /2?) sample))))
           (_.coverage [/.rec]
             (let [even? (multiple? 2)
                   any_even? (is (/.Predicate (Stack Natural))
                                 (/.rec (function (_ again)
                                          (function (_ values)
                                            (when values
                                              {.#Empty}
                                              false

                                              {.#Top head tail}
                                              (or (even? head)
                                                  (again tail)))))))]
               (bit.= (stack.any? even? samples)
                      (any_even? samples))))
           )))
