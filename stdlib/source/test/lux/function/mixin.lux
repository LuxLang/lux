... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equality (.only Equality)]
    ["[0]" monad]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [control
    ["[0]" state (.only State)]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]:[0]" functor mix)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [input (|> random.natural (by ! each (|>> (n.% 6) (n.+ 20))))
         dummy random.natural
         shift (|> random.natural (random.only (|>> (n.= dummy) not)))
         .let [equality (is (Equality (/.Mixin Natural Natural))
                            (implementation
                             (the (= left right)
                               (n.= ((/.fixed left) input)
                                    ((/.fixed right) input)))))
               generator (is (Random (/.Mixin Natural Natural))
                             (monad.let !
                               [output random.natural]
                               (pure (function (_ delegate again input)
                                       output))))
               expected (|> (list.domain input)
                            (list:each ++)
                            (list:mix n.x 1))]])
      (all _.and
           (_.for [/.Mixin]
                  (all _.and
                       (_.for [/.monoid]
                              (monoidT.spec equality /.monoid generator))
                       
                       (_.coverage [/.fixed]
                         (let [factorial (/.fixed
                                          (function (_ delegate again input)
                                            (when input
                                              (^.or 0 1) 1
                                              _ (n.x input (again (-- input))))))]
                           (n.= expected
                                (factorial input))))
                       (_.coverage [/.mixed]
                         (let [minimum (is (/.Mixin Natural Natural)
                                           (function (_ delegate again input)
                                             (when input
                                               (^.or 0 1) 1
                                               _ (delegate input))))
                               multiplication (is (/.Mixin Natural Natural)
                                                  (function (_ delegate again input)
                                                    (n.x input (again (-- input)))))
                               factorial (/.fixed (/.mixed minimum multiplication))]
                           (n.= expected
                                (factorial input))))
                       (_.coverage [/.nothing]
                         (let [loop (is (/.Mixin Natural Natural)
                                        (function (_ delegate again input)
                                          (when input
                                            (^.or 0 1) 1
                                            _ (n.x input (delegate (-- input))))))
                               left (/.fixed (/.mixed /.nothing loop))
                               right (/.fixed (/.mixed loop /.nothing))]
                           (and (n.= expected
                                     (left input))
                                (n.= expected
                                     (right input)))))
                       (_.coverage [/.advice]
                         (let [minimum (is (/.Mixin Natural Natural)
                                           (function (_ delegate again input)
                                             1))
                               minimum? (is (Predicate Natural)
                                            (function (_ input)
                                              (when input
                                                (^.or 0 1) true
                                                _ false)))
                               multiplication (is (/.Mixin Natural Natural)
                                                  (function (_ delegate again input)
                                                    (n.x input (again (-- input)))))
                               factorial (/.fixed (/.mixed (/.advice minimum? minimum)
                                                           multiplication))]
                           (n.= expected
                                (factorial input))))
                       (_.coverage [/.before]
                         (let [implant (is (-> Natural (State Natural []))
                                           (function (_ input)
                                             (function (_ state)
                                               [shift []])))
                               meld (is (/.Mixin Natural (State Natural Natural))
                                        (function (_ delegate again input)
                                          (function (_ state)
                                            [state (n.+ state input)])))
                               function (/.fixed (/.mixed (/.before state.monad implant)
                                                          meld))]
                           (n.= (n.+ shift input)
                                (|> input function (state.value dummy) product.right))))
                       (_.coverage [/.after]
                         (let [implant (is (-> Natural Natural (State Natural []))
                                           (function (_ input output)
                                             (function (_ state)
                                               [shift []])))
                               meld (is (/.Mixin Natural (State Natural Natural))
                                        (function (_ delegate again input)
                                          (function (_ state)
                                            [state (n.+ state input)])))
                               function (/.fixed (/.mixed (/.after state.monad implant)
                                                          meld))]
                           (n.= (n.+ dummy input)
                                (|> input function (state.value dummy) product.right))))
                       ))
           (_.for [/.Recursive]
                  (_.coverage [/.of_recursive]
                    (let [factorial (/.fixed
                                     (/.of_recursive
                                      (function (_ again input)
                                        (when input
                                          (^.or 0 1) 1
                                          _ (n.x input (again (-- input)))))))]
                      (n.= expected
                           (factorial input)))))
           )))
