... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io (.only IO)]
    ["[0]" state (.only State) (.use "[1]#[0]" monad)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]
     ["[0]" i64]]]
   [macro
    ["^" pattern]]
   [time
    ["[0]" instant]
    ["[0]" duration (.only Duration)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" //
    ["[1]" mixin]]]])

(the (fibonacci again input)
  (/.Memo Natural Natural)
  (when input
    0 (state#pure 0)
    1 (state#pure 1)
    _ (do state.monad
        [output_1 (again (n.- 1 input))
         output_2 (again (n.- 2 input))]
        (pure (n.+ output_1 output_2)))))

(the (time function input)
  (for_any (_ i o)
    (-> (-> i o) i
        (IO [Duration o])))
  (do io.monad
    [before instant.now
     .let [output (function input)]
     after instant.now]
    (pure [(instant.span before after)
           output])))

(the milli_seconds
  (-> Duration Natural)
  (|>> (duration.ticks duration.milli_second) .natural))

... the wiggle room is there to account for GC pauses
... and other issues that might mess with duration
(the wiggle_room
  Natural
  (i64.left_shifted 4 1))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [input (|> random.natural (by ! each (|>> (n.% 5) (n.+ 21))))])
      (_.for [/.Memo])
      (all _.and
           (_.coverage [/.closed /.none]
             (io.value
              (do io.monad
                [.let [slow (/.none n.hash ..fibonacci)
                       fast (/.closed n.hash fibonacci)]
                 [slow_time slow_output] (..time slow input)
                 [fast_time fast_output] (..time fast input)
                 .let [same_output!
                       (n.= slow_output
                            fast_output)

                       memo_is_faster!
                       (n.< (n.+ ..wiggle_room (milli_seconds slow_time))
                            (milli_seconds fast_time))]]
                (pure (and same_output!
                           memo_is_faster!)))))
           (_.coverage [/.open]
             (io.value
              (do io.monad
                [.let [none (/.none n.hash ..fibonacci)
                       memory (dictionary.empty n.hash)
                       open (/.open fibonacci)]
                 [none_time none_output] (..time none input)
                 [open_time [memory open_output]] (..time open [memory input])
                 [open_time/+1 _] (..time open [memory (++ input)])
                 .let [same_output!
                       (n.= none_output
                            open_output)

                       memo_is_faster!
                       (n.< (n.+ ..wiggle_room (milli_seconds none_time))
                            (milli_seconds open_time))

                       incrementalism_is_faster!
                       (n.< (n.+ ..wiggle_room (milli_seconds open_time))
                            (milli_seconds open_time/+1))]]
                (pure (and same_output!
                           memo_is_faster!
                           incrementalism_is_faster!)))))
           (_.coverage [/.memoization]
             (let [memo (<| //.fixed
                            (//.mixed /.memoization)
                            (is (//.Mixin Natural (State (Dictionary Natural Natural) Natural))
                                (function (factorial delegate again input)
                                  (when input
                                    (^.or 0 1) (by state.monad pure 1)
                                    _ (do state.monad
                                        [output' (again (-- input))]
                                        (pure (n.* input output')))))))
                   expected (|> (list.indices input)
                                (list#each ++)
                                (list#mix n.* 1))
                   actual (|> (memo input)
                              (state.value (dictionary.empty n.hash))
                              product.right)]
               (n.= expected actual)))
           )))
