... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    [functor
     [\\test (.only Injection Comparison)]]]
   [data
    [collection
     ["[0]" stack]]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]
   [function
    [poly
     ["//" type]]]]]
 [\\library
  ["[0]" / (.only Mix)]])

(the .public test
  Test
  (monad.let random.monad
    [samples (random.stack 10 random.natural)
     initial random.natural
     left random.natural
     right random.natural]
    (<| (_.covering /._)
        (all _.and
             (_.coverage [/.with_monoid]
               (n.= (by stack.mix mix (by n.addition composite) (by n.addition identity) samples)
                    (/.with_monoid n.addition stack.mix samples)))
             (_.coverage [/.constant]
               (n.= initial
                    (/.constant n.+ initial left)))
             (_.coverage [/.variable]
               (n.= (n.+ initial left)
                    (/.variable n.+ initial left)))
             (_.coverage [/.sum]
               (and (n.= (n.+ initial left)
                         ((/.sum /.variable
                                 /.variable)
                          n.+ initial {.:Left left}))
                    (n.= (n.+ initial right)
                         ((/.sum /.variable
                                 /.variable)
                          n.+ initial {.:Right right}))))
             (_.coverage [/.product]
               (n.= (all n.+ initial left right)
                    ((/.product /.variable
                                /.variable)
                     n.+ initial [left right])))
             (_.coverage [/.recursive]
               (n.= (all n.+ initial left right)
                    ((<| (is (/.Mix (//.Recursive (for_any (_ self)
                                                    (//.Sum (//.Constant Any)
                                                            (//.Product //.Variable self))))))
                         /.recursive
                         (function (_ next))
                         (/.sum /.constant
                                (/.product /.variable next)))
                     n.+ initial (stack left right))))
             ))))

(the .public (spec injection comparison (open "/:[0]"))
  (for_any (_ !)
    (-> (Injection !) (Comparison !) (/.Mix !)
        Test))
  (monad.let random.monad
    [subject random.natural
     parameter random.natural]
    (<| (_.for [/.Mix])
        (_.coverage [/.mix]
          (n.= (/:mix n.+ parameter (injection subject))
               (n.+ parameter subject))))))
