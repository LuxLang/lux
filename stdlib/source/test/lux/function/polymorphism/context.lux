... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" scope (.use "[1]#[0]" monad)]]
   [data
    [collection
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["i" integer]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(/.the .public (arbitrary _ negative zero positive)
  [(for_any (_ value))]
  Integer
  [value value value]
  value
  
  (scope#pure zero)

  (/.method (arbitrary next negative zero positive)
    (i.> +0)
    (scope#pure positive))

  (/.method (arbitrary next negative zero positive)
    (i.< +0)
    (scope#pure negative))
  )

(/.layer positive)
(/.layer negative)

(/.the .public (layered _ negative zero positive)
  [(for_any (_ value))]
  /.Context
  [value value value]
  value
  
  (scope#pure zero)

  (/.method (layered next negative zero positive)
    (/.active? ..positive)
    (scope#pure positive))

  (/.method (layered next negative zero positive)
    (/.active? ..negative)
    (scope#pure negative))
  )

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [negative random.natural
         zero random.natural
         positive random.natural
         choice random.integer])
      (all _.and
           (_.coverage [/.the /.method]
             (|> (arbitrary negative zero positive)
                 (scope.value choice)
                 (same? (if (i.> +0 choice) positive
                            (i.< +0 choice) negative
                            ... else
                            zero))))
           (_.coverage [/.altered]
             (|> (arbitrary negative zero positive)
                 (/.altered (i.x -1))
                 (scope.value choice)
                 (same? (if (i.> +0 choice) negative
                            (i.< +0 choice) positive
                            ... else
                            zero))))
           (_.for [/.Context]
                  (all _.and
                       (_.coverage [/.empty]
                         (|> (layered negative zero positive)
                             (scope.value /.empty)
                             (same? zero)))
                       (_.coverage [/.with]
                         (and (|> (layered negative zero positive)
                                  (/.with ..positive)
                                  (scope.value /.empty)
                                  (same? positive))
                              (|> (layered negative zero positive)
                                  (/.with ..negative)
                                  (scope.value /.empty)
                                  (same? negative))))
                       (_.coverage [/.without]
                         (|> (layered negative zero positive)
                             (/.without ..positive)
                             (/.with ..positive)
                             (scope.value /.empty)
                             (same? zero)))))
           (_.for [/.Layer /.layer]
                  (all _.and
                       (_.coverage [/.active?]
                         (|> (do scope.monad
                               [it scope.read]
                               (pure (/.active? ..positive it)))
                             (/.with ..positive)
                             (scope.value /.empty)))
                       (_.coverage [/.inactive?]
                         (|> (do scope.monad
                               [it scope.read]
                               (pure (/.inactive? ..negative it)))
                             (/.with ..positive)
                             (scope.value /.empty)))
                       ))
           )))
