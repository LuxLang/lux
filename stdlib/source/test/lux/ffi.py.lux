... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io]]
   [math
    ["[0]" random]
    [number
     [/64
      ["i" integer]]]]
   [macro
    ["[0]" template]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["$[0]" /
  ["[1][0]" export]])

(/.import os
          "[1]::[0]"
          ("static" R_OK /.Integer)
          ("static" W_OK /.Integer))

(the .public test
  Test
  (do [! random.monad]
    [boolean random.bit
     integer random.integer
     float random.decimal
     string (random.lower_cased 1)]
    (<| (_.covering /._)
        (`` (all _.and
                 (,, (template.with [<type> <sample>]
                       [(_.coverage [<type>]
                          (exec
                            (is <type> <sample>)
                            true))]

                       [/.Boolean boolean]
                       [/.Integer integer]
                       [/.Float float]
                       [/.String string]
                       ))
                 (_.for [/.Object]
                        (all _.and
                             (,, (template.with [<type>]
                                   [(_.coverage [<type>]
                                      (exec
                                        (|> []
                                            (as <type>)
                                            (is (for_some (_ a) (/.Object a))))
                                        true))]

                                   [/.None]
                                   [/.Dict]
                                   ))))
                 (_.coverage [/.Function /.function]
                   (exec
                     (|> (/.function (_ [input/0 Natural])
                           Integer
                           (.integer input/0))
                         (is /.Function)
                         (is (for_some (_ a) (/.Object a))))
                     true))
                 (_.coverage [/.import]
                   (and (i.= (io.value (os::R_OK))
                             (io.value (os::R_OK)))
                        (not (i.= (io.value (os::W_OK))
                                  (io.value (os::R_OK))))))

                 $/export.test
                 )))))
