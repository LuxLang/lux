... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    ["[0]" random (.only Random)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" // (.use "[1]#[0]" functor)
    ["[0]" static]
    ["[0]" symbol]
    ["[0]" code]
    [macro
     ["[0]" expansion]
     ["[0]" template]]]]])

(expansion.let [,label_0 (static.random_nat)
                ,label_1 (static.random_int)
                
                ,tag_0 (template.symbol ["tag_" ,label_0])
                ,tag_1 (template.symbol ["tag_" ,label_1])
                
                ,slot_0 (template.symbol ["slot_" ,label_0])
                ,slot_1 (template.symbol ["slot_" ,label_1])

                ,type_0 (template.symbol ["type_" ,label_0])
                ,type_1 (template.symbol ["type_" ,label_1])]
  (these (every ,type_0
           (Variant
            {,tag_0 Bit}
            {,tag_1 Nat}))

         (every ,type_1
           (Record
            [,slot_0 Bit
             ,slot_1 Nat]))

         (the (as_symbol it)
           (-> Symbol
               Code)
           (` (.symbol (, (code.symbol it)))))

         (the singular
           Test
           (all _.and
                (_.coverage [/.tag]
                  (and (static.expansion
                        (do //.monad
                          [it (/.tag (symbol ,tag_0))]
                          (in (list (code.bit (same? (as Label ,tag_0) it))))))
                       (static.expansion
                        (do //.monad
                          [it (/.tag (symbol ,tag_1))]
                          (in (list (code.bit (same? (as Label ,tag_1) it))))))))
                (_.coverage [/.slot]
                  (and (static.expansion
                        (do //.monad
                          [it (/.slot (symbol ,slot_0))]
                          (in (list (code.bit (same? (as Label ,slot_0) it))))))
                       (static.expansion
                        (do //.monad
                          [it (/.slot (symbol ,slot_1))]
                          (in (list (code.bit (same? (as Label ,slot_1) it))))))))))

         (the plural
           Test
           (let [= (list.equivalence symbol.equivalence)
                 [this_module _] (symbol .._)]
             (all _.and
                  (_.coverage [/.tags]
                    (= (list [this_module (symbol.short (symbol ,tag_0))]
                             [this_module (symbol.short (symbol ,tag_1))])
                       (`` (list (,, (static.expansion
                                      (//#each (list#each ..as_symbol)
                                               (/.tags (symbol ,type_0)))))))))
                  (_.coverage [/.slots]
                    (= (list [this_module (symbol.short (symbol ,slot_0))]
                             [this_module (symbol.short (symbol ,slot_1))])
                       (`` (list (,, (static.expansion
                                      (//#each (list#each ..as_symbol)
                                               (/.slots (symbol ,type_1)))))))))
                  )))

         (the .public test
           Test
           (<| (_.covering /._)
               (do [! random.monad]
                 [])
               (all _.and
                    ..singular
                    ..plural
                    )))))
