... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]
     ["[0]" stack (.use "[1]#[0]" functor monoid)]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" type]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" // (.use "[1]#[0]" functor)
    ["[0]" static]
    ["[0]" name]
    ["[0]" code]
    ["[0]" provenance]]]])

(expansion.let [,label_0 (static.random_natural)
                ,label_1 (static.random_integer)
                
                ,tag_0 (template.name ["tag_" ,label_0])
                ,tag_1 (template.name ["tag_" ,label_1])
                
                ,slot_0 (template.name ["slot_" ,label_0])
                ,slot_1 (template.name ["slot_" ,label_1])

                ,type_0 (template.name ["type_" ,label_0])
                ,type_1 (template.name ["type_" ,label_1])]
  (these (every ,type_0
           (Variant
            {,tag_0 Bit}
            {,tag_1 Natural}))

         (every ,type_1
           (Record
            [,slot_0 Bit
             ,slot_1 Natural]))

         (the (as_name it)
           (-> Name
               Code)
           (` (.name (, (code.name it)))))

         (the singular
           Test
           (<| (_.for [.Label])
               (all _.and
                    (_.coverage [.Tag /.tag]
                      (and (static.expansion
                            (do //.monad
                              [it (/.tag (name ,tag_0))]
                              (in (list (code.bit (same? (as (-> Tag Label) ,tag_0) it))))))
                           (static.expansion
                            (do //.monad
                              [it (/.tag (name ,tag_1))]
                              (in (list (code.bit (same? (as (-> Tag Label) ,tag_1) it))))))))
                    (_.coverage [.Slot /.slot]
                      (and (static.expansion
                            (do //.monad
                              [it (/.slot (name ,slot_0))]
                              (in (list (code.bit (same? (as (-> Slot Label) ,slot_0) it))))))
                           (static.expansion
                            (do //.monad
                              [it (/.slot (name ,slot_1))]
                              (in (list (code.bit (same? (as (-> Slot Label) ,slot_1) it)))))))))))

         (the plural
           Test
           (let [= (list.equivalence name.equivalence)
                 [this_module _] (name .._)]
             (all _.and
                  (_.coverage [/.tags]
                    (= (list [this_module (name.proper (name ,tag_0))]
                             [this_module (name.proper (name ,tag_1))])
                       (`` (list (,, (static.expansion
                                      (//#each (list#each ..as_name)
                                               (/.tags (name ,type_0)))))))))
                  (_.coverage [/.slots]
                    (= (list [this_module (name.proper (name ,slot_0))]
                             [this_module (name.proper (name ,slot_1))])
                       (`` (list (,, (static.expansion
                                      (//#each (list#each ..as_name)
                                               (/.slots (name ,type_1)))))))))
                  )))

         (the label_related
           Test
           (do [! random.monad]
             [current_module (random.upper_cased 1)
              label_module (random.upper_cased 2)

              name_0 (random.upper_cased 3)
              name_1 (random.upper_cased 4)

              .let [random_tag (by ! each (|>> [label_module])
                                   (random.upper_cased 1))
                    random_labels (is (-> Natural
                                          (Random [Text (Stack Text)]))
                                      (function (_ size)
                                        (do !
                                          [head (random.lower_cased size)]
                                          (|> (random.lower_cased size)
                                              (random.only (|>> (text.= head) not))
                                              (random.set text.hash 3)
                                              (by ! each (|>> set.as_list list.as_stack))
                                              (random.and (in head))))))]
              tags_0 (random_labels 5)
              tags_1 (random_labels 6)
              .let [type_0 {.#Named [label_module name_1] {.#Nominal name_0 (list)}}
                    type_1 {.#Named [label_module name_1] {.#Nominal name_1 (list)}}

                    expected_lux
                    (is Lux
                        [.#info [.#target ""
                                 .#version ""
                                 .#mode {.#Build}
                                 .#configuration (list)]
                         .#source [provenance.dummy 0 ""]
                         .#provenance provenance.dummy
                         .#current_module {.#Some current_module}
                         .#modules (list [current_module
                                          [.#module_hash 0
                                           .#module_aliases (list)
                                           .#definitions (list)
                                           .#imports (list label_module)
                                           .#module_state {.#Active}]]
                                         [label_module
                                          [.#module_hash 0
                                           .#module_aliases (list)
                                           .#definitions (all list#composite
                                                              (list [name_0 [true {.#Definition [.Type type_0]}]]
                                                                    [name_1 [true {.#Definition [.Type type_1]}]])
                                                              (let [cohort (is (Stack Name)
                                                                               (stack#each (|>> [label_module])
                                                                                           {.#Top tags_0}))
                                                                    last (-- (stack.size cohort))
                                                                    right? (n.= last)
                                                                    lefts (is (-> Natural Natural)
                                                                              (function (_ index)
                                                                                (if (right? index)
                                                                                    (-- index)
                                                                                    index)))]
                                                                (|> {.#Top tags_0}
                                                                    stack.enumeration
                                                                    (stack#each (function (_ [index proper])
                                                                                  [proper [true {.#Definition [.Tag
                                                                                                               (|> [{.#Some [(lefts index) (right? index) (list.of_stack cohort)]} type_0]
                                                                                                                   (as (-> Label .Tag)))]}]]))
                                                                    list.of_stack))
                                                              (let [cohort (is (Stack Name)
                                                                               (stack#each (|>> [label_module])
                                                                                           {.#Top tags_1}))
                                                                    last (-- (stack.size cohort))
                                                                    right? (n.= last)
                                                                    lefts (is (-> Natural Natural)
                                                                              (function (_ index)
                                                                                (if (right? index)
                                                                                    (-- index)
                                                                                    index)))]
                                                                (|> {.#Top tags_1}
                                                                    stack.enumeration
                                                                    (stack#each (function (_ [index proper])
                                                                                  [proper [true {.#Definition [.Slot
                                                                                                               (|> [{.#Some [(lefts index) (right? index) (list.of_stack cohort)]} type_1]
                                                                                                                   (as (-> Label .Slot)))]}]]))
                                                                    list.of_stack)))
                                           .#imports (list)
                                           .#module_state {.#Active}]])
                         .#scopes (stack)
                         .#type_context [.#ex_counter 0
                                         .#var_counter 0
                                         .#var_bindings (list)]
                         .#expected {.#None}
                         .#seed 0
                         .#eval (as_expected [])])]]
             (all _.and
                  (_.coverage [/.every_slot]
                    (let [equivalence (list.equivalence
                                       (product.equivalence
                                        (list.equivalence name.equivalence)
                                        type.equivalence))]
                      (|> (/.every_slot label_module)
                          (//.value expected_lux)
                          (try#each (by equivalence = (list [(list#each (|>> [label_module])
                                                                        (list.of_stack {.#Top tags_1}))
                                                             type_1])))
                          (try.else false))))
                  )))

         (the .public test
           Test
           (<| (_.covering /._)
               (do [! random.monad]
                 [])
               (all _.and
                    ..singular
                    ..plural
                    ..label_related
                    )))
         ))
