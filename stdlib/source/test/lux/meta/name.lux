... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]
    ["[0]" expansion]]
   [meta
    ["[0]" static]
    ["[0]" code]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public (random module_size proper_size)
  (-> Natural Natural
      (Random Name))
  (random.and (random.alphabetic module_size)
              (random.alphabetic proper_size)))

(the .public (relative module proper_size)
  (-> Text Natural
      (Random Name))
  (monad.let [! random.monad]
    [relative? random.bit
     proper (random.alphabetic proper_size)]
    (if relative?
        (monad.let !
          [in_prelude? random.bit]
          (pure [(if in_prelude?
                     .prelude
                     "")
                 proper]))
        (pure [module proper]))))

(expansion.let [<yes> (static.random (|>> %.natural code.local)
                                     random.natural)
                <no> (static.random (|>> %.integer code.local)
                                    random.integer)]
  (these (the <yes>
           Natural
           (static.random_natural))
         
         (the .public test
           Test
           (<| (_.covering /._)
               (monad.let [! random.monad]
                 [ ... First Name
                  sizeM1 (|> random.natural (by ! each (n.% 100)))
                  sizeS1 (|> random.natural (by ! each (|>> (n.% 100) (n.major 1))))
                  (^.let name1 [module1 proper1]) (..random sizeM1 sizeS1)
                  ... Second Name
                  sizeM2 (|> random.natural (by ! each (n.% 100)))
                  sizeS2 (|> random.natural (by ! each (|>> (n.% 100) (n.major 1))))
                  (^.let name2 [module2 proper2]) (..random sizeM2 sizeS2)])
               (_.for [.Name])
               (all _.and
                    (_.for [/.equivalence /.=]
                           (static.when (same? /.equivalence /.=)
                             (equivalenceT.spec /.equivalence (..random sizeM1 sizeS1))))
                    (_.for [/.hash]
                           (|> (random.ascii 1)
                               (by ! each (|>> [""]))
                               (hashT.spec /.hash)))
                    (_.for [/.order
                            /.< /.<= /.> /.>=
                            /.minor /.major]
                           (orderT.spec /.order (..random sizeM1 sizeS1)))
                    (_.for [/.absolute]
                           (formatT.spec /.equivalence /.absolute (..relative module1 sizeS1)))
                    (_.for [/.relative]
                           (formatT.spec /.equivalence (/.relative module1) (..relative module1 sizeS1)))

                    (_.coverage [/.delimiter]
                      (let [it (by /.absolute as name1)]
                        (if (text.empty? module1)
                            (same? proper1 it)
                            (text.contains? /.delimiter it))))
                    (_.coverage [/.module /.proper]
                      (and (same? module1 (/.module name1))
                           (same? proper1 (/.proper name1))))
                    (_.coverage [/.of]
                      (expansion.let [<yes>' (static.literal code.name
                                                             (let [[module _] (name .._)
                                                                   [_ proper] (name <yes>)]
                                                               [module proper]))]
                        (/.= (name <yes>') (/.of <yes>'))))
                    (_.coverage [.name]
                      (and (/.= [.prelude "yolo"] (.name .yolo))
                           (/.= ["test/lux/meta/name" "yolo"] (.name ..yolo))
                           (/.= ["" "yolo"] (.name yolo))
                           (/.= ["library/lux/test" "yolo"] (.name library/lux/test.yolo))))
                    (_.coverage [/.as_text]
                      (same? (by /.absolute as)
                             /.as_text))
                    )))))
