... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" bit]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" functor)]
    [number
     ["n" natural]]]
   ["[0]" meta (.only)
    ["[0]" static]
    ["[0]" location]
    ["[0]" name]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["^" pattern]
   ["[0]" syntax]
   ["[0]" template]
   ["[0]" expansion]]]
 ["[0]" /
  ["[1][0]" context]
  ["[1][0]" expansion]
  ["[1][0]" local]
  ["[1][0]" syntax]
  ["[1][0]" template]
  ["[1][0]" pattern]
  ["[1][0]" vocabulary]])

(the !expect
  (template.macro (_ <pattern> <value>)
    [(when <value>
       <pattern> true
       _ false)]))

(the !global
  (template.macro (_ <definition>)
    [(is [Text [Bit .Global]]
         [(template.text [<definition>]) [true {.#Definition [.Macro <definition>]}]])]))

(the pow/2
  (syntax.macro (_ [number <code>.any])
    (in (list (` (n.* (, number) (, number)))))))

(the pow/4
  (syntax.macro (_ [number <code>.any])
    (in (list (` (..pow/2 (..pow/2 (, number))))))))

(the repeated
  (syntax.macro (_ [times <code>.natural
                    token <code>.any])
    (in (list.repeated times token))))

(the fresh_name
  (syntax.macro (_ [])
    (do meta.monad
      ['fresh (/.name "fresh")]
      (in (list 'fresh)))))

(the random_lux
  (Random [Natural Text .Lux])
  (do [! random.monad]
    [seed random.natural
     name_prefix (random.upper_cased 1)
     .let [macro_module (name.module (name expansion._))
           current_module (name.module (name .._))]]
    (in [seed
         name_prefix
         [.#info            [.#target ""
                             .#version ""
                             .#mode {.#Build}
                             .#configuration (list)]
          .#source          [location.dummy 0 ""]
          .#location         location.dummy
          .#current_module  {.#Some current_module}
          .#modules         (list [macro_module
                                   [.#module_hash    0
                                    .#module_aliases (list)
                                    .#definitions    (is (List [Text [Bit .Global]])
                                                         (list (!global expansion.log_single!)
                                                               (!global expansion.log_complete!)
                                                               (!global expansion.log_total!)))
                                    .#imports        (list)
                                    .#module_state   {.#Active}]]
                                  [current_module
                                   [.#module_hash    0
                                    .#module_aliases (list)
                                    .#definitions    (is (List [Text [Bit .Global]])
                                                         (list (!global ..pow/2)
                                                               (!global ..pow/4)
                                                               (!global ..repeated)))
                                    .#imports        (list)
                                    .#module_state   {.#Active}]])
          .#scopes          (list)
          .#type_context    [.#ex_counter 0
                             .#var_counter 0
                             .#var_bindings (list)]
          .#expected        {.#None}
          .#seed            seed
          .#scope_type_vars (list)
          .#extensions      []
          .#eval            (as (-> Type Code (Meta Any)) [])
          .#host            []]])))

(the iterated
  (syntax.macro (_ [cycle <code>.natural
                    it <code>.any])
    (in (list (when cycle
                0 it
                _ (` (..iterated (, (code.natural (-- cycle))) (, it))))))))

(the test|expansion
  Test
  (do [! random.monad]
    [[seed name_prefix lux] ..random_lux

     pow/1 (by ! each code.natural random.natural)

     repetitions (by ! each (n.% 10) random.natural)
     .let [single_expansion (` (..pow/2 (..pow/2 (, pow/1))))
           expansion (` (n.* (..pow/2 (, pow/1))
                             (..pow/2 (, pow/1))))
           full_expansion (` (n.* (n.* (, pow/1) (, pow/1))
                                  (n.* (, pow/1) (, pow/1))))]]
    (`` (all _.and
             ... (,, (template.with [<expander> <logger> <expansion>]
             ...       [(_.coverage [<expander>]
             ...          (|> (<expander> (` (..pow/4 (, pow/1))))
             ...              (meta.value lux)
             ...              (try#each (by (list.equivalence code.equivalence) =
             ...                            (list <expansion>)))
             ...              (try.else false)))

             ...        (_.coverage [<logger>]
             ...          (and (|> (expansion.single (` (<logger> "omit" (..pow/4 (, pow/1)))))
             ...                   (meta.value lux)
             ...                   (try#each (by (list.equivalence code.equivalence) = (list)))
             ...                   (try.else false))
             ...               (|> (expansion.single (` (<logger> (..pow/4 (, pow/1)))))
             ...                   (meta.value lux)
             ...                   (try#each (by (list.equivalence code.equivalence) = (list <expansion>)))
             ...                   (try.else false))))]

             ...       [expansion.single   expansion.log_single!   single_expansion]
             ...       [expansion.complete expansion.log_complete! expansion]
             ...       [expansion.total    expansion.log_total!    full_expansion]
             ...       ))
             ... (_.coverage [expansion.one]
             ...   (bit.= (not (n.= 1 repetitions))
             ...          (|> (expansion.one (` (..repeated (, (code.natural repetitions)) (, pow/1))))
             ...              (meta.value lux)
             ...              (!expect {try.#Failure _}))))
             (_.coverage [/.final]
               (expansion.let [<expected> (static.random_natural)
                               <cycles> (static.random code.natural
                                                       (random#each (|>> (n.% 5) ++) random.natural))
                               <actual> (/.final (..iterated <cycles> <expected>))]
                 (when (' <actual>)
                   [_ {.#Natural actual}]
                   (n.= <expected> actual)

                   _
                   false)))
             (_.coverage [/.times]
               (expansion.let [<expected> (static.random_natural)
                               <max> (static.random code.natural
                                                    (random#each (|>> (n.% 10) (n.+ 2)) random.natural))
                               <cycles> (static.random code.natural
                                                       (random#each (|>> (n.% <max>) ++) random.natural))
                               <actual> (/.times <cycles> (..iterated <max> <expected>))]
                 (let [expected_remaining (n.- <cycles> <max>)]
                   (when (` <actual>)
                     (^.` (..iterated (^., [_ {.#Natural actual_remaining}]) (^., [_ {.#Natural actual}])))
                     (and (n.= expected_remaining actual_remaining)
                          (n.= <expected> actual))

                     _
                     false))))
             ))))

(the sum
  (macro (_ tokens)
    (loop (again [tokens tokens
                  output 0])
      (when tokens
        {.#End}
        (by meta.monad in (list (code.natural output)))
        
        {.#Item [_ {.#Natural head}] tail}
        (again tail (n.+ head output))

        _
        (meta.failure "")))))

(the sum'
  (macro (_ tokens lux)
    ((/.function ..sum) tokens lux)))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (do [! random.monad]
             [[seed name_prefix lux] ..random_lux]
             (all _.and
                  (_.coverage [/.name]
                    (|> (/.name name_prefix)
                        (by meta.monad each code.as_text)
                        (meta.value lux)
                        (!expect (^.multi {try.#Success actual_name}
                                          (and (text.contains? name_prefix actual_name)
                                               (text.contains? (%.natural seed) actual_name))))))
                  (_.coverage [/.with_names]
                    (expansion.let [<expected> (fresh_name)]
                      (|> (/.with_names [<expected>]
                            (by meta.monad in <expected>))
                          (meta.value lux)
                          (!expect (^.multi {try.#Success [_ {.#Name ["" actual]}]}
                                            (text.contains? (template.text [<expected>])
                                                            actual))))))
                  (_.coverage [/.function]
                    (expansion.let [n/0 (static.random_natural)
                                    n/1 (static.random_natural)
                                    n/1 (static.random_natural)]
                      (n.= (..sum n/0 n/1 n/1)
                           (..sum' n/0 n/1 n/1))))
                  (_.coverage [/.macro]
                    (|> ..sum
                        /.function
                        /.macro
                        (is Macro)
                        (same? ..sum)))
                  ))

           ..test|expansion

           /context.test
           /expansion.test
           /local.test
           /syntax.test
           /template.test
           /pattern.test
           /vocabulary.test
           )))
