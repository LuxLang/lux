(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [control
     ["." try (#+ Try)]]
    [data
     ["." product]
     ["." bit]
     ["." name ("#\." equivalence)]
     ["." text]
     [collection
      ["." list ("#\." functor)]]]
    [macro
     ["." code ("#\." equivalence)]]
    [math
     ["." random (#+ Random)]
     [number
      ["." nat]
      ["." int]
      ["." rev]
      ["." frac]]]]]
  [///
   [macro
    ["_." code]]]
  [\\library
   ["." /]])

(def: random_key
  (Random Name)
  (random.and (random.ascii/alpha 1)
              (random.ascii/alpha 1)))

(def: (random_sequence random)
  (All [a] (-> (Random a) (Random (List a))))
  (do {! random.monad}
    [size (|> random.nat (\ ! map (nat.% 3)))]
    (random.list size random)))

(def: (random_record random)
  (All [a] (-> (Random a) (Random (List [a a]))))
  (do {! random.monad}
    [size (|> random.nat (\ ! map (nat.% 3)))]
    (random.list size (random.and random random))))

(template: (!expect <pattern> <value>)
  (case <value>
    <pattern> true
    _ false))

(def: (annotation key value)
  (-> Name Code /.Annotation)
  (code.record (list [(code.tag key)
                      value])))

(def: typed_value
  Test
  (do {! random.monad}
    [key ..random_key]
    (`` ($_ _.and
            (~~ (template [<definition> <random> <constructor> <equivalence>]
                  [(do {! random.monad}
                     [expected <random>]
                     (_.cover [<definition>]
                              (|> expected <constructor>
                                  (..annotation key)
                                  (<definition> key)
                                  (!expect (^multi (#.Some actual)
                                                   (\ <equivalence> = expected actual))))))]

                  [/.bit random.bit code.bit bit.equivalence]
                  [/.nat random.nat code.nat nat.equivalence]
                  [/.int random.int code.int int.equivalence]
                  [/.rev random.rev code.rev rev.equivalence]
                  [/.frac random.safe_frac code.frac frac.equivalence]
                  [/.text (random.ascii/alpha 1) code.text text.equivalence]
                  [/.identifier ..random_key code.identifier name.equivalence]
                  [/.tag ..random_key code.tag name.equivalence]
                  [/.form (..random_sequence _code.random) code.form (list.equivalence code.equivalence)]
                  [/.tuple (..random_sequence _code.random) code.tuple (list.equivalence code.equivalence)]
                  [/.record (..random_record _code.random) code.record (list.equivalence (product.equivalence code.equivalence code.equivalence))]
                  ))
            ))))

(def: flag
  Test
  (do {! random.monad}
    [key ..random_key]
    (`` ($_ _.and
            (do !
              [dummy (random.filter (|>> (name\= key) not)
                                    ..random_key)
               expected random.bit]
              (_.cover [/.flagged?]
                       (and (|> expected code.bit
                                (..annotation key)
                                (/.flagged? key)
                                (\ bit.equivalence = expected))
                            (not (|> expected code.bit
                                     (..annotation dummy)
                                     (/.flagged? key))))))
            (~~ (template [<definition> <tag>]
                  [(do !
                     [expected random.bit]
                     (_.cover [<definition>]
                              (and (|> expected code.bit
                                       (..annotation (name_of <tag>))
                                       <definition>
                                       (\ bit.equivalence = expected))
                                   (not (|> expected code.bit
                                            (..annotation key)
                                            <definition>)))))]

                  [/.implementation? #.implementation?]
                  [/.recursive_type? #.type-rec?]
                  [/.signature? #.sig?]
                  ))
            ))))

(def: arguments
  Test
  (do {! random.monad}
    [key ..random_key]
    (`` ($_ _.and
            (~~ (template [<definition> <tag>]
                  [(do !
                     [expected (random.list 5 (random.ascii/alpha 1))]
                     (_.cover [<definition>]
                              (and (|> expected (list\map code.text) code.tuple
                                       (..annotation (name_of <tag>))
                                       <definition>
                                       (\ (list.equivalence text.equivalence) = expected))
                                   (|> expected (list\map code.text) code.tuple
                                       (..annotation key)
                                       <definition>
                                       (\ (list.equivalence text.equivalence) = (list))))))]

                  [/.function_arguments #.func-args]
                  [/.type_arguments #.type-args]
                  ))
            ))))

(def: #export test
  Test
  (<| (_.covering /._)
      (_.for [/.Annotation])
      (do {! random.monad}
        [key ..random_key]
        ($_ _.and
            (do !
              [expected _code.random]
              (_.cover [/.value]
                       (|> expected
                           (..annotation key)
                           (/.value key)
                           (!expect (^multi (#.Some actual)
                                            (code\= expected actual))))))
            
            ..typed_value
            
            (do !
              [expected (random.ascii/alpha 10)]
              (_.cover [/.documentation]
                       (and (not (|> expected code.text
                                     (..annotation key)
                                     /.documentation
                                     (!expect (^multi (#.Some actual)
                                                      (\ text.equivalence = expected actual)))))
                            (|> expected code.text
                                (..annotation (name_of #.doc))
                                /.documentation
                                (!expect (^multi (#.Some actual)
                                                 (\ text.equivalence = expected actual)))))))

            ..flag
            ..arguments
            ))))
