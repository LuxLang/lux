(.require
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [meta
    ["[0]" code
     ["<[1]>" \\parser]]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" check]
  ["[1][0]" declaration]
  ["[1][0]" definition]
  ["[1][0]" export]
  ["[1][0]" input]
  ["[1][0]" type
   ["[1]/[0]" variable]]])

(def +/3
  (/.syntax (_ [a <code>.any
                b <code>.any
                c <code>.any])
    (in (list (` (all n.+ (, a) (, b) (, c)))))))

(def .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (do random.monad
             [x random.nat
              y random.nat
              z random.nat]
             (_.coverage [/.syntax]
               (n.= (all n.+ x y z)
                    (+/3 x y z)))) 

           /check.test
           /declaration.test
           /definition.test
           /export.test
           /input.test
           /type/variable.test
           )))
