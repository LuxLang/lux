(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try]]
   [data
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [meta
    ["[0]" code
     ["<[1]>" \\parser]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["$[0]" ////
  ["[1][0]" code]])

(def .public random
  (Random /.Input)
  (all random.and
       $////code.random
       $////code.random
       ))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Input])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))

           (do random.monad
             [expected ..random]
             (_.coverage [/.format /.parser]
               (when (<code>.result /.parser (list (/.format (list expected))))
                 {try.#Failure _}
                 false
                 
                 {try.#Success actual}
                 (of (list.equivalence /.equivalence) = (list expected) actual)))))))
