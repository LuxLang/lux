(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["<>" parser]
    ["[0]" try]]
   [math
    ["[0]" random (.only Random)]]
   [meta
    ["[0]" code (.use "[1]#[0]" equivalence)
     ["<[1]>" \\parser]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["$[0]" ////
  ["[1][0]" code]])

(def .public random
  (Random /.Check)
  (all random.and
       $////code.random
       $////code.random
       ))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Check])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))

           (do random.monad
             [[type value] ..random]
             (_.coverage [/.format /.parser]
               (case (<code>.result /.parser
                                    (list (/.format [/.#type type
                                                     /.#value value])))
                 {try.#Failure _}
                 false
                 
                 {try.#Success check}
                 (and (code#= type (the /.#type check))
                      (code#= value (the /.#value check)))))))))
