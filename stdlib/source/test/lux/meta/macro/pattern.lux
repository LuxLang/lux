... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]
     ["i" int]
     ["f" frac]]]
   [meta
    ["[0]" code]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(type (Pair l r)
  (Record
   [#left l
    #right r]))

(def !pair
  (template (_ <left> <right>)
    [[..#left <left>
      ..#right <right>]]))

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_nat (of ! each (n.% 1) random.nat)
         expected_int (of ! each (i.% +1) random.int)
         expected_rev (random.either (in .5)
                                     (in .25))
         expected_frac (random.either (in +0.5)
                                      (in +1.25))
         expected_text (random.either (in "+0.5")
                                      (in "+1.25"))]
        (all _.and
             (do [! random.monad]
               [sample (of ! each (n.% 5) random.nat)]
               (_.coverage [/.with_template]
                 (when sample
                   (/.with_template [<case>]
                     [<case> true])
                   ([0] [1] [2] [3] [4])

                   _
                   false)))
             (_.coverage [/.or]
               (and (/.when expected_rev
                      (/.or .5 .25) true
                      _ false)
                    (/.when expected_frac
                      (/.or +0.5 +1.25) true
                      _ false)
                    (/.when expected_text
                      (/.or "+0.5" "+1.25") true
                      _ false)))
             (_.coverage [/.let]
               (let [expected_pair (is (Pair Nat Int)
                                       [..#left expected_nat ..#right expected_int])]
                 (/.when expected_pair
                   (/.let actual_pair (!pair actual_left actual_right))
                   (and (/.same? expected_pair actual_pair)
                        (/.same? expected_nat actual_left)
                        (/.same? expected_int actual_right)))))
             (_.coverage [/.multi]
               (let [expected_pair (is (Pair Nat Int)
                                       [..#left expected_nat ..#right expected_int])]
                 (and (/.when expected_pair
                        (/.multi (!pair 0 actual_right)
                                 [actual_right
                                  +0])
                        true

                        _
                        false)
                      (/.when expected_pair
                        (/.multi (!pair 0 actual_right)
                                 (i.= +0 actual_right))
                        true

                        _
                        false))))
             (_.coverage [/.|>]
               (when expected_frac
                 (/.|> actual_frac [(f.* +2.0) (f.* +2.0)])
                 (f.= (f.* +4.0 expected_frac)
                      actual_frac)))
             (_.coverage [/.`]
               (when (code.text expected_text)
                 (/.` "+0.5") true
                 (/.` "+1.25") true
                 _ false))
             ))))
