... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" product]
    ["[0]" bit]
    ["[0]" text]
    [collection
     ["[0]" list]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [meta
    ["[0]" location]
    ["[0]" name]
    ["[0]" type]
    [macro
     ["^" pattern]
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" //]]]
 ["[0]" /
  ["[1][0]" local]])

(the !expect
  (template.macro (_ <pattern> <value>)
    [(when <value>
       <pattern> true
       _ false)]))

(the module_related
  Test
  (do random.monad
    [target (random.upper_cased 1)
     version (random.upper_cased 1)
     source_code (random.upper_cased 1)
     expected_current_module (random.upper_cased 1)
     imported_module_name (random.only (|>> (text.= expected_current_module) not)
                                       (random.upper_cased 1))
     nominal_type (random.upper_cased 1)
     expected_seed random.natural
     expected random.natural
     dummy (random.only (|>> (n.= expected) not) random.natural)
     expected_proper (random.upper_cased 1)
     dummy_module (random.only (function (_ module)
                                 (not (or (text.= expected_current_module module)
                                          (text.= imported_module_name module))))
                               (random.upper_cased 1))
     .let [imported_module [.#module_hash        0
                            .#module_aliases     (list)
                            .#definitions        (list)
                            .#imports            (list)
                            .#module_state       {.#Active}]
           expected_module [.#module_hash        0
                            .#module_aliases     (list)
                            .#definitions        (list)
                            .#imports            (list imported_module_name)
                            .#module_state       {.#Active}]
           expected_modules (list [expected_current_module
                                   expected_module]
                                  [imported_module_name
                                   imported_module])
           expected_lux [.#info            [.#target target
                                            .#version version
                                            .#mode {.#Build}
                                            .#configuration (list)]
                         .#source          [location.dummy 0 source_code]
                         .#location         location.dummy
                         .#current_module  {.#Some expected_current_module}
                         .#modules         expected_modules
                         .#scopes          (list)
                         .#type_context    [.#ex_counter 0
                                            .#var_counter 0
                                            .#var_bindings (list)]
                         .#expected        {.#Some {.#Nominal nominal_type (list)}}
                         .#seed            expected_seed
                         .#scope_type_vars (list)
                         .#extensions      []
                         .#eval            (as (-> Type Code (Meta Any)) [])
                         .#host            []]]]
    (all _.and
         (_.coverage [/.normal]
           (and (|> (/.normal ["" expected_proper])
                    (//.value expected_lux)
                    (!expect (^.multi {try.#Success [actual_module actual_proper]}
                                      (and (text.= expected_current_module actual_module)
                                           (same? expected_proper actual_proper)))))
                (|> (/.normal [dummy_module expected_proper])
                    (//.value expected_lux)
                    (!expect (^.multi {try.#Success [actual_module actual_proper]}
                                      (and (text.= dummy_module actual_module)
                                           (same? expected_proper actual_proper)))))))
         )))

(the random_location
  (Random Location)
  (all random.and
       (random.upper_cased 1)
       random.natural
       random.natural
       ))

(the definition_related
  Test
  (do [! random.monad]
    [expected_current_module (random.upper_cased 1)
     expected_macro_module (random.only (|>> (text.= expected_current_module) not)
                                        (random.upper_cased 1))
     expected_proper (random.upper_cased 1)
     expected_type (by ! each (function (_ name)
                                {.#Nominal name (list)})
                       (random.upper_cased 1))
     expected_value (random.either (in .the)
                                   (in .macro))
     expected_default (random.upper_cased 2)
     .let [expected_lux
           (is (-> Bit (Maybe Type)
                   [(List [Text [Bit .Global]])
                    (List [Text [Bit .Global]])
                    Lux])
               (function (_ exported? def_type)
                 (let [current_globals (is (List [Text [Bit .Global]])
                                           (list [expected_proper
                                                  [false {.#Alias [expected_macro_module expected_proper]}]]))
                       macro_globals (is (List [Text [Bit .Global]])
                                         (when def_type
                                           {.#Some def_type}
                                           (list [expected_proper
                                                  [exported? {.#Definition [def_type expected_value]}]]
                                                 [expected_default
                                                  [exported? {.#Default [def_type expected_value]}]])

                                           {.#None}
                                           (list)))]
                   [current_globals
                    macro_globals
                    [.#info            [.#target ""
                                        .#version ""
                                        .#mode {.#Build}
                                        .#configuration (list)]
                     .#source          [location.dummy 0 ""]
                     .#location         location.dummy
                     .#current_module  {.#Some expected_current_module}
                     .#modules         (list [expected_current_module
                                              [.#module_hash        0
                                               .#module_aliases     (list)
                                               .#definitions        current_globals
                                               .#imports            (list)
                                               .#module_state       {.#Active}]]
                                             [expected_macro_module
                                              [.#module_hash        0
                                               .#module_aliases     (list)
                                               .#definitions        macro_globals
                                               .#imports            (list)
                                               .#module_state       {.#Active}]])
                     .#scopes          (list)
                     .#type_context    [.#ex_counter 0
                                        .#var_counter 0
                                        .#var_bindings (list)]
                     .#expected        {.#None}
                     .#seed            0
                     .#scope_type_vars (list)
                     .#extensions      []
                     .#eval            (as (-> Type Code (Meta Any)) [])
                     .#host            []]])))]]
    (all _.and
         (_.coverage [.Global
                      .#Definition .#Alias .#Default

                      .Default
                      .Alias /.globals]
           (let [[current_globals macro_globals expected_lux]
                 (expected_lux true {.#Some .Macro})

                 current_globals!
                 (|> (/.globals expected_current_module)
                     (//.value expected_lux)
                     (!expect (^.multi {try.#Success actual_globals}
                                       (same? current_globals actual_globals))))

                 macro_globals!
                 (|> (/.globals expected_macro_module)
                     (//.value expected_lux)
                     (!expect (^.multi {try.#Success actual_globals}
                                       (same? macro_globals actual_globals))))]
             (and current_globals!
                  macro_globals!)))
         (_.coverage [.Definition /.definitions]
           (let [[current_globals macro_globals expected_lux]
                 (expected_lux true {.#Some .Macro})]
             (and (|> (/.definitions expected_current_module)
                      (//.value expected_lux)
                      (!expect (^.multi {try.#Success actual_definitions}
                                        (n.= 0 (list.size actual_definitions)))))
                  (|> (/.definitions expected_macro_module)
                      (//.value expected_lux)
                      (!expect (^.multi {try.#Success actual_definitions}
                                        (n.= 1 (list.size actual_definitions)))))
                  )))
         (_.coverage [/.exports]
           (and (let [[current_globals macro_globals expected_lux]
                      (expected_lux true {.#Some .Macro})]
                  (and (|> (/.exports expected_current_module)
                           (//.value expected_lux)
                           (!expect (^.multi {try.#Success actual_definitions}
                                             (n.= 0 (list.size actual_definitions)))))
                       (|> (/.exports expected_macro_module)
                           (//.value expected_lux)
                           (!expect (^.multi {try.#Success actual_definitions}
                                             (n.= 1 (list.size actual_definitions)))))
                       ))
                (let [[current_globals macro_globals expected_lux]
                      (expected_lux false {.#Some .Macro})]
                  (and (|> (/.exports expected_current_module)
                           (//.value expected_lux)
                           (!expect (^.multi {try.#Success actual_definitions}
                                             (n.= 0 (list.size actual_definitions)))))
                       (|> (/.exports expected_macro_module)
                           (//.value expected_lux)
                           (!expect (^.multi {try.#Success actual_definitions}
                                             (n.= 0 (list.size actual_definitions)))))
                       ))))
         )))

(the search_related
  Test
  (do [! random.monad]
    [expected_exported? random.bit
     expected_current_module (random.upper_cased 1)
     expected_macro_module (random.only (|>> (text.= expected_current_module) not)
                                        (random.upper_cased 1))
     expected_proper (random.upper_cased 1)
     expected_type (by ! each (function (_ name)
                                {.#Nominal name (list)})
                       (random.upper_cased 1))
     expected_value (random.either (in .the)
                                   (in .macro))
     .let [expected_lux
           (is (-> Bit (Maybe Type)
                   [(List [Text [Bit .Global]])
                    (List [Text [Bit .Global]])
                    Lux])
               (function (_ exported? def_type)
                 (let [current_globals (is (List [Text [Bit .Global]])
                                           (list [expected_proper
                                                  [false {.#Alias [expected_macro_module expected_proper]}]]))
                       macro_globals (is (List [Text [Bit .Global]])
                                         (when def_type
                                           {.#Some def_type}
                                           (list [expected_proper
                                                  [exported? {.#Definition [def_type expected_value]}]])

                                           {.#None}
                                           (list)))]
                   [current_globals
                    macro_globals
                    [.#info            [.#target ""
                                        .#version ""
                                        .#mode {.#Build}
                                        .#configuration (list)]
                     .#source          [location.dummy 0 ""]
                     .#location         location.dummy
                     .#current_module  {.#Some expected_current_module}
                     .#modules         (list [expected_current_module
                                              [.#module_hash        0
                                               .#module_aliases     (list)
                                               .#definitions        current_globals
                                               .#imports            (list)
                                               .#module_state       {.#Active}]]
                                             [expected_macro_module
                                              [.#module_hash        0
                                               .#module_aliases     (list)
                                               .#definitions        macro_globals
                                               .#imports            (list)
                                               .#module_state       {.#Active}]])
                     .#scopes          (list)
                     .#type_context    [.#ex_counter 0
                                        .#var_counter 0
                                        .#var_bindings (list)]
                     .#expected        {.#None}
                     .#seed            0
                     .#scope_type_vars (list)
                     .#extensions      []
                     .#eval            (as (-> Type Code (Meta Any)) [])
                     .#host            []]])))]]
    (all _.and
         (_.coverage [/.export]
           (and (let [[current_globals macro_globals expected_lux]
                      (expected_lux true {.#Some expected_type})]
                  (|> (/.export [expected_macro_module expected_proper])
                      (//.value expected_lux)
                      (!expect {try.#Success _})))
                (let [[current_globals macro_globals expected_lux]
                      (expected_lux false {.#Some expected_type})]
                  (|> (/.export [expected_macro_module expected_proper])
                      (//.value expected_lux)
                      (!expect {try.#Failure _})))))
         (_.coverage [/.macro
                      /.not_a_macro]
           (let [same_module!
                 (let [[current_globals macro_globals expected_lux]
                       (expected_lux true {.#Some .Macro})]
                   (|> (/.macro [expected_macro_module expected_proper])
                       (//.value expected_lux)
                       (!expect (^.multi {try.#Success actual_value}
                                         (same? expected_value actual_value)))))

                 not_macro!
                 (let [[current_globals macro_globals expected_lux]
                       (expected_lux true {.#Some expected_type})]
                   (|> (/.macro [expected_macro_module expected_proper])
                       (//.value expected_lux)
                       (!expect {try.#Failure /.not_a_macro})))

                 not_found!
                 (let [[current_globals macro_globals expected_lux]
                       (expected_lux true {.#None})]
                   (|> (/.macro [expected_macro_module expected_proper])
                       (//.value expected_lux)
                       (!expect {try.#Failure _})))

                 aliasing!
                 (let [[current_globals macro_globals expected_lux]
                       (expected_lux true {.#Some .Macro})]
                   (|> (/.macro [expected_current_module expected_proper])
                       (//.value expected_lux)
                       (!expect (^.multi {try.#Success actual_value}
                                         (same? expected_value actual_value)))))]
             (and same_module!
                  not_macro!
                  not_found!
                  aliasing!)))
         (_.coverage [/.de_aliased]
           (let [[current_globals macro_globals expected_lux]
                 (expected_lux true {.#Some .Macro})]
             (and (|> (/.de_aliased [expected_macro_module expected_proper])
                      (//.value expected_lux)
                      (try#each (name.= [expected_macro_module expected_proper]))
                      (try.else false))
                  (|> (/.de_aliased [expected_current_module expected_proper])
                      (//.value expected_lux)
                      (try#each (name.= [expected_macro_module expected_proper]))
                      (try.else false)))))
         (_.coverage [/.definition]
           (let [[current_globals macro_globals expected_lux]
                 (expected_lux expected_exported? {.#Some expected_type})

                 definition!
                 (|> (/.definition [expected_macro_module expected_proper])
                     (//.value expected_lux)
                     (!expect (^.multi {try.#Success [actual_exported? {.#Definition [actual_type actual_value]}]}
                                       (and (bit.= expected_exported? actual_exported?)
                                            (same? expected_type actual_type)
                                            (same? (as Any expected_value) actual_value)))))

                 alias!
                 (|> (/.definition [expected_current_module expected_proper])
                     (//.value expected_lux)
                     (!expect (^.multi {try.#Success [.false {.#Alias [actual_module actual_proper]}]}
                                       (and (same? expected_macro_module actual_module)
                                            (same? expected_proper actual_proper)))))]
             (and definition!
                  alias!)))
         (_.coverage [/.definition_type]
           (let [[current_globals macro_globals expected_lux]
                 (expected_lux expected_exported? {.#Some expected_type})

                 definition!
                 (|> (/.definition_type [expected_macro_module expected_proper])
                     (//.value expected_lux)
                     (!expect (^.multi {try.#Success actual_type}
                                       (same? expected_type actual_type))))

                 alias!
                 (|> (/.definition_type [expected_current_module expected_proper])
                     (//.value expected_lux)
                     (!expect (^.multi {try.#Success actual_type}
                                       (same? expected_type actual_type))))]
             (and definition!
                  alias!)))
         (_.coverage [/.type_definition]
           (let [[current_globals macro_globals expected_lux]
                 (expected_lux expected_exported? {.#Some .Type})

                 definition!
                 (|> (/.type_definition [expected_macro_module expected_proper])
                     (//.value expected_lux)
                     (!expect (^.multi {try.#Success actual_value}
                                       (same? (as .Type expected_value) actual_value))))

                 alias!
                 (|> (/.type_definition [expected_current_module expected_proper])
                     (//.value expected_lux)
                     (!expect (^.multi {try.#Success actual_value}
                                       (same? (as .Type expected_value) actual_value))))]
             (and definition!
                  alias!)))
         )))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           ..module_related
           ..definition_related
           ..search_related

           /local.test
           )))
