... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]
    ["<>" projection]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]]
   [data
    ["[0]" text (.only)
     ["<[1]>" \\projection]]
    [collection
     ["[0]" list (.use "[1]:[0]" monoid)
      ["?[1]" \\projection]]]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" monad)]]
   [macro
    ["[0]" syntax]
    ["[0]" expansion]]
   ["[0]" meta (.only)
    ["[0]" static]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public (random amount)
  (-> Natural (Random /.Configuration))
  (when amount
    0 (random:pure /.empty)
    _ (monad.let [! random.monad]
        [feature (random.upper_cased amount)
         value (random.lower_cased amount)]
        (by ! each (|>> (list:composite (list [feature value])))
            (random (-- amount))))))

(syntax.the (failure [it ?list.any])
  (function (_ lux)
    (when (expansion.complete it lux)
      {try.:Failure error}
      {try.:Success [lux (list (code.text error))]}
      
      {try.:Success _}
      {try.:Failure ""})))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Configuration])
      (monad.let [! random.monad]
        [expected (..random 5)]
        (all _.and
             (_.for [/.equivalence /.=]
                    (static.when (identical? /.equivalence /.=)
                      (equivalenceT.spec /.equivalence (..random 5))))
             (_.for [/.monoid]
                    (monoidT.spec /.equivalence /.monoid (..random 5)))

             (_.coverage [/.empty]
               (list.empty? /.empty))
             (_.coverage [/.as_text /.of_text]
               (|> expected
                   /.as_text
                   (<text>.value /.of_text)
                   (try:each (by /.equivalence = expected))
                   (try.else false)))
             (_.coverage [/.for]
               (and (and (/.for ["left" "<<<"
                                 "right" ">>>"]
                                true
                                ... else
                                false)
                         (/.for ["left" "<<<"]
                                true
                                ... else
                                false)
                         (/.for ["right" ">>>"]
                                true
                                ... else
                                false))
                    (and (/.for ["yolo" ""]
                                false
                                ... else
                                true)
                         (/.for ["left" "yolo"]
                                false
                                ... else
                                true))))
             (_.coverage [/.of]
               (and (text.= "<<<" (/.of "left"))
                    (text.= ">>>" (/.of "right"))))
             ))))
