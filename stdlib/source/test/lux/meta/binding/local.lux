... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    ["[0]" monad]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.only)
      ["[0]" property]]
     ["[0]" stack]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]]
   ["[0]" type]
   [meta
    ["[0]" provenance]]
   [test
    ["_" property (.only Test)]]
   [aspect
    ["[0]" view]]
   [compiler
    ["@[0]" type]]]]
 [\\library
  ["[0]" / (.only)
   ["//[1]" ///]]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Name])
      (monad.let [! random.monad]
        [current_module (random.upper_cased 1)
         [name_0 name_1 name_2 name_3 name_4] (|> (random.upper_cased 1)
                                                  (random.set text.hash 5)
                                                  (by ! each (|>> set.as_list (view.as list.stack)))
                                                  (random.one (function (_ values)
                                                                (when values
                                                                  (stack name_0 name_1 name_2 name_3 name_4)
                                                                  {.:Some [name_0 name_1 name_2 name_3 name_4]}

                                                                  _
                                                                  {.:None}))))
         .let [type_0 {.:Nominal name_0 (list)}
               type_1 {.:Nominal name_1 (list)}
               type_2 {.:Nominal name_2 (list)}
               type_3 {.:Nominal name_3 (list)}
               type_4 {.:Nominal name_4 (list)}

               globals (is (property.List [Bit .Global])
                           (list [name_4
                                  [false {@type.:Definition [type_4 {.:None} []]}]]))

               scopes (stack [.:locals [.:counter 1
                                        .:mappings (list [name_3 [type_3 3]])]
                              .:captured [.:counter 0
                                          .:mappings (list)]]
                             [.:locals [.:counter 2
                                        .:mappings (list [name_1 [type_1 1]]
                                                         [name_2 [type_2 2]])]
                              .:captured [.:counter 0
                                          .:mappings (list)]]
                             [.:locals [.:counter 1
                                        .:mappings (list [name_0 [type_0 0]])]
                              .:captured [.:counter 0
                                          .:mappings (list)]])]
         .let [expected_lux
               (is Lux
                   [.:info [.:target ""
                            .:version ""
                            .:mode {.:Build}
                            .:configuration (list)]
                    .:source [provenance.dummy 0 ""]
                    .:provenance provenance.dummy
                    .:current_module {.:Some current_module}
                    .:modules (list [current_module
                                     [.:module_hash 0
                                      .:module_aliases (list)
                                      .:definitions globals
                                      .:imports (list)
                                      .:module_state {.:Active}]])
                    .:scopes scopes
                    .:type_context [.:there_exists 0
                                    .:for_all (list)]
                    .:expected {.:None}
                    .:seed 0
                    .:eval (as_expected [])])]]
        (all _.and
             (_.coverage [.Scope
                          .:locals .:captured

                          /.all]
               (let [equivalence (is (Equivalence (Stack (List [Text Type])))
                                     (stack.equivalence
                                      (list.equivalence
                                       (product.equivalence
                                        text.equivalence
                                        type.equivalence))))]
                 (|> /.all
                     (///.value expected_lux)
                     (try:each (by equivalence = (stack (list [name_3 type_3])
                                                        (list [name_1 type_1]
                                                              [name_2 type_2])
                                                        (list [name_0 type_0]))))
                     (try.else false))))
             (_.coverage [/.type]
               (and (|> (/.type name_0)
                        (///.value expected_lux)
                        (try:each (by type.equivalence = type_0))
                        (try.else false))
                    (|> (/.type name_1)
                        (///.value expected_lux)
                        (try:each (by type.equivalence = type_1))
                        (try.else false))
                    (|> (/.type name_2)
                        (///.value expected_lux)
                        (try:each (by type.equivalence = type_2))
                        (try.else false))
                    (|> (/.type name_3)
                        (///.value expected_lux)
                        (try:each (by type.equivalence = type_3))
                        (try.else false))))
             ))))
