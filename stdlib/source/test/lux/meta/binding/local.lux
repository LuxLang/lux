... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" stack]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]]
   ["[0]" type]
   [meta
    ["[0]" provenance]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["//[1]" ///]]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [current_module (random.upper_cased 1)
         [name_0 name_1 name_2 name_3 name_4] (|> (random.upper_cased 1)
                                                  (random.set text.hash 5)
                                                  (by ! each set.stack)
                                                  (random.one (function (_ values)
                                                                (when values
                                                                  (stack name_0 name_1 name_2 name_3 name_4)
                                                                  {.#Some [name_0 name_1 name_2 name_3 name_4]}

                                                                  _
                                                                  {.#None}))))
         .let [type_0 {.#Nominal name_0 (stack)}
               type_1 {.#Nominal name_1 (stack)}
               type_2 {.#Nominal name_2 (stack)}
               type_3 {.#Nominal name_3 (stack)}
               type_4 {.#Nominal name_4 (stack)}

               globals (is (Stack [Text [Bit .Global]])
                           (stack [name_4
                                   [false {.#Definition [type_4 []]}]]))

               scopes (stack [.#scope_name (stack)
                              .#inner_scopes 0
                              .#locals [.#counter 1
                                        .#mappings (stack [name_3 [type_3 3]])]
                              .#captured [.#counter 0
                                          .#mappings (stack)]]
                             [.#scope_name (stack)
                              .#inner_scopes 0
                              .#locals [.#counter 2
                                        .#mappings (stack [name_1 [type_1 1]]
                                                          [name_2 [type_2 2]])]
                              .#captured [.#counter 0
                                          .#mappings (stack)]]
                             [.#scope_name (stack)
                              .#inner_scopes 0
                              .#locals [.#counter 1
                                        .#mappings (stack [name_0 [type_0 0]])]
                              .#captured [.#counter 0
                                          .#mappings (stack)]])]
         .let [expected_lux
               (is Lux
                   [.#info            [.#target ""
                                       .#version ""
                                       .#mode {.#Build}
                                       .#configuration (stack)]
                    .#source          [provenance.dummy 0 ""]
                    .#provenance      provenance.dummy
                    .#current_module  {.#Some current_module}
                    .#modules         (stack [current_module
                                              [.#module_hash        0
                                               .#module_aliases     (stack)
                                               .#definitions        globals
                                               .#imports            (stack)
                                               .#module_state       {.#Active}]])
                    .#scopes          scopes
                    .#type_context    [.#ex_counter 0
                                       .#var_counter 0
                                       .#var_bindings (stack)]
                    .#expected        {.#None}
                    .#seed            0
                    .#scope_type_vars (stack)
                    .#extensions      []
                    .#eval            (as (-> Type Code (Meta Any)) [])
                    .#host            []])]]
        (all _.and
             (_.coverage [.Scope
                          .#scope_name .#inner_scopes .#locals .#captured

                          /.all]
               (let [equivalence (is (Equivalence (Stack (Stack [Text Type])))
                                     (stack.equivalence
                                      (stack.equivalence
                                       (product.equivalence
                                        text.equivalence
                                        type.equivalence))))]
                 (|> /.all
                     (///.value expected_lux)
                     (try#each (by equivalence = (stack (stack [name_3 type_3])
                                                        (stack [name_1 type_1]
                                                               [name_2 type_2]))))
                     (try.else false))))
             (_.coverage [/.type]
               (and (|> (/.type name_0)
                        (///.value expected_lux)
                        (try#each (by type.equivalence = type_0))
                        (try.else false))
                    (|> (/.type name_1)
                        (///.value expected_lux)
                        (try#each (by type.equivalence = type_1))
                        (try.else false))
                    (|> (/.type name_2)
                        (///.value expected_lux)
                        (try#each (by type.equivalence = type_2))
                        (try.else false))
                    (|> (/.type name_3)
                        (///.value expected_lux)
                        (try#each (by type.equivalence = type_3))
                        (try.else false))))
             ))))
