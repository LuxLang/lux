... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except symbol type)
   [abstract
    ["[0]" monad (.only do)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    ["[0]" apply
     ["[1]T" \\test]]]
   [control
    ["[0]" pipe]
    ["[0]" function]
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" equivalence)]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" nat]]]
   [meta
    [macro
     ["^" pattern]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.use "[1]#[0]" equivalence)]]])

... TODO: Remove the following 3 definitions ASAP. //.type already exists...
(the short
  (Random Text)
  (random.unicode 10))

(the symbol
  (Random Symbol)
  (random.and ..short ..short))

(the (type' num_vars)
  (-> Nat (Random Type))
  (random.rec
   (function (_ again)
     (let [pairG (random.and again again)
           quantifiedG (random.and (random#in (list)) (type' (++ num_vars)))
           random_pair (random.either (random.either (random#each (|>> {.#Sum}) pairG)
                                                     (random#each (|>> {.#Product}) pairG))
                                      (random.either (random#each (|>> {.#Function}) pairG)
                                                     (random#each (|>> {.#Apply}) pairG)))
           random_id (let [random_id (random.either (random#each (|>> {.#Var}) random.nat)
                                                    (random#each (|>> {.#Opaque}) random.nat))]
                       (when num_vars
                         0 random_id
                         _ (random.either (random#each (|>> (n.% num_vars) (n.* 2) ++ {.#Parameter}) random.nat)
                                          random_id)))
           random_quantified (random.either (random#each (|>> {.#Universal}) quantifiedG)
                                            (random#each (|>> {.#Existential}) quantifiedG))]
       (all random.either
            (random#each (|>> {.#Nominal}) (random.and ..short (random#in (list))))
            random_pair
            random_id
            random_quantified
            (random#each (|>> {.#Named}) (random.and ..symbol (type' 0)))
            )))))

(the type
  (Random Type)
  (..type' 0))

(the (valid_type? type)
  (-> Type Bit)
  (when type
    {.#Nominal name params}
    (list.every? valid_type? params)
    
    {.#Opaque id}
    true

    (^.with_template [<tag>]
      [{<tag> left right}
       (and (valid_type? left)
            (valid_type? right))])
    ([.#Sum] [.#Product] [.#Function])

    {.#Named name type'}
    (valid_type? type')

    _
    false))

(the injection
  (Injection (for_any (_ a) (/.Check a)))
  (of /.monad in))

(the comparison
  (Comparison (for_any (_ a) (/.Check a)))
  (function (_ == left right)
    (when [(/.value /.fresh_context left) (/.value /.fresh_context right)]
      [{try.#Success left} {try.#Success right}]
      (== left right)

      _
      false)))

(the polymorphism
  Test
  (all _.and
       (_.for [/.functor]
              (functorT.spec ..injection ..comparison /.functor))
       (_.for [/.apply]
              (applyT.spec ..injection ..comparison /.apply))
       (_.for [/.monad]
              (monadT.spec ..injection ..comparison /.monad))
       ))

(the (nominal_type parameters)
  (-> Nat (Random Type))
  (do random.monad
    [nominal (random.upper_cased 3)
     parameters (random.list parameters (nominal_type (-- parameters)))]
    (in {.#Nominal nominal parameters})))

(the clean_type
  (Random Type)
  (nominal_type 2))

(exception.the yolo)

(the error_handling
  Test
  (do random.monad
    [left ..clean_type
     right ..clean_type
     ex random.nat]
    (all _.and
         (do random.monad
           [expected (random.upper_cased 10)]
           (_.coverage [/.failure]
             (when (/.value /.fresh_context
                            (is (/.Check Any)
                                (/.failure expected)))
               {try.#Success _} false
               {try.#Failure actual} (same? expected actual))))
         (do random.monad
           [expected (random.upper_cased 10)]
           (_.coverage [/.assertion]
             (and (when (/.value /.fresh_context
                                 (is (/.Check Any)
                                     (/.assertion expected true)))
                    {try.#Success _} true
                    {try.#Failure actual} false)
                  (when (/.value /.fresh_context (/.assertion expected false))
                    {try.#Success _} false
                    {try.#Failure actual} (same? expected actual)))))
         (_.coverage [/.except]
           (when (/.value /.fresh_context
                          (is (/.Check Any)
                              (/.except ..yolo [])))
             {try.#Success _} false
             {try.#Failure error} (exception.is? ..yolo error)))
         (let [scenario (is (-> (-> Text Bit) Type Type Bit)
                            (function (_ ? <left> <right>)
                              (and (|> (/.check <left> <right>)
                                       (is (/.Check Any))
                                       (/.value /.fresh_context)
                                       (pipe.when {try.#Failure error} (? error)
                                         {try.#Success _} false))
                                   (|> (/.check <right> <left>)
                                       (is (/.Check Any))
                                       (/.value /.fresh_context)
                                       (pipe.when {try.#Failure error} (? error)
                                         {try.#Success _} false)))))]
           (all _.and
                (_.coverage [/.type_check_failed]
                  (let [scenario (scenario (exception.is? /.type_check_failed))]
                    (and (scenario (Tuple left right) left)
                         (scenario (Tuple left right) (Or left right))
                         (scenario (Tuple left right) (-> left right))
                         (scenario (Tuple left right) {.#Opaque ex})

                         (scenario (Or left right) left)
                         (scenario (Or left right) (-> left right))
                         (scenario (Or left right) {.#Opaque ex})

                         (scenario (-> left right) left)
                         (scenario (-> left right) {.#Opaque ex})

                         (scenario {.#Opaque ex} left)
                         )))
                (_.coverage [/.invalid_type_application]
                  (let [scenario (scenario (text.contains? (its exception.#label /.invalid_type_application)))]
                    (scenario {.#Apply left right} left)))))
         )))

(the var
  Test
  (<| (_.for [/.Var])
      (all _.and
           (_.coverage [/.var]
             (when (/.value /.fresh_context
                            (do /.monad
                              [[var_id var_type] /.var]
                              (in (//#= var_type {.#Var var_id}))))
               {try.#Success verdict} verdict
               {try.#Failure error} false))
           (do random.monad
             [nominal (random.upper_cased 10)]
             (_.coverage [/.bind]
               (when (/.value /.fresh_context
                              (do /.monad
                                [[var_id var_type] /.var
                                 _ (/.bind {.#Nominal nominal (list)}
                                           var_id)]
                                (in true)))
                 {try.#Success _} true
                 {try.#Failure error} false)))
           (do random.monad
             [nominal (random.upper_cased 10)]
             (_.coverage [/.bound?]
               (and (|> (do /.monad
                          [[var_id var_type] /.var
                           pre (/.bound? var_id)
                           _ (/.bind {.#Nominal nominal (list)}
                                     var_id)
                           post (/.bound? var_id)]
                          (in (and (not pre)
                                   post)))
                        (/.value /.fresh_context)
                        (try.else false))
                    (|> (do /.monad
                          [[var_id var/0] /.var
                           pre (/.bound? var_id)
                           [_ var/1] /.var
                           _ (/.check var/0 var/1)
                           post (/.bound? var_id)]
                          (in (and (not pre)
                                   (not post))))
                        (/.value /.fresh_context)
                        (try.else false)))))
           (do random.monad
             [nominal (random.upper_cased 10)]
             (_.coverage [/.cannot_rebind_var]
               (when (/.value /.fresh_context
                              (do /.monad
                                [[var_id var_type] /.var
                                 _ (/.bind {.#Nominal nominal (list)}
                                           var_id)]
                                (/.bind {.#Nominal nominal (list)}
                                        var_id)))
                 {try.#Success _}
                 false
                 
                 {try.#Failure error}
                 (exception.is? /.cannot_rebind_var error))))
           (do random.monad
             [nominal (random.upper_cased 10)
              var_id random.nat]
             (_.coverage [/.unknown_type_var]
               (when (/.value /.fresh_context
                              (/.bind {.#Nominal nominal (list)}
                                      var_id))
                 {try.#Success _}
                 false
                 
                 {try.#Failure error}
                 (exception.is? /.unknown_type_var error))))
           (do random.monad
             [nominal (random.upper_cased 10)
              .let [expected {.#Nominal nominal (list)}]]
             (_.coverage [/.peek]
               (and (|> (do /.monad
                          [[var_id var_type] /.var]
                          (/.peek var_id))
                        (/.value /.fresh_context)
                        (pipe.when {try.#Success {.#None}} true
                          _ false))
                    (|> (do /.monad
                          [[var_id var/0] /.var
                           [_ var/1] /.var
                           _ (/.check var/0 var/1)]
                          (/.peek var_id))
                        (/.value /.fresh_context)
                        (pipe.when {try.#Success {.#None}} true
                          _ false))
                    (|> (do /.monad
                          [[var_id var_type] /.var
                           _ (/.bind expected var_id)]
                          (/.peek var_id))
                        (/.value /.fresh_context)
                        (pipe.when {try.#Success {.#Some actual}}
                          (same? expected actual)
                          
                          _
                          false)))))
           (do random.monad
             [nominal (random.upper_cased 10)
              .let [expected {.#Nominal nominal (list)}]]
             (_.coverage [/.read]
               (when (/.value /.fresh_context
                              (do /.monad
                                [[var_id var_type] /.var
                                 _ (/.bind expected var_id)]
                                (/.read var_id)))
                 {try.#Success actual}
                 (same? expected actual)
                 
                 _
                 false)))
           (do random.monad
             [nominal (random.upper_cased 10)
              .let [expected {.#Nominal nominal (list)}]]
             (_.coverage [/.unbound_type_var]
               (when (/.value /.fresh_context
                              (do /.monad
                                [[var_id var_type] /.var]
                                (/.read var_id)))
                 {try.#Failure error}
                 (exception.is? /.unbound_type_var error)

                 _
                 false)))
           )))

(the context
  Test
  (all _.and
       (_.coverage [/.fresh_context]
         (and (n.= 0 (its .#var_counter /.fresh_context))
              (n.= 0 (its .#ex_counter /.fresh_context))
              (list.empty? (its .#var_bindings /.fresh_context))))
       (_.coverage [/.context]
         (and (when (/.value /.fresh_context /.context)
                {try.#Success actual}
                (same? /.fresh_context actual)
                
                {try.#Failure error}
                false)
              (when (/.value /.fresh_context
                             (do /.monad
                               [_ /.var]
                               /.context))
                {try.#Success actual}
                (and (n.= 1 (its .#var_counter actual))
                     (n.= 0 (its .#ex_counter actual))
                     (n.= 1 (list.size (its .#var_bindings actual))))
                
                {try.#Failure error}
                false)))
       (_.coverage [/.existential]
         (when (/.value /.fresh_context
                        (do /.monad
                          [_ /.existential]
                          /.context))
           {try.#Success actual}
           (and (n.= 0 (its .#var_counter actual))
                (n.= 1 (its .#ex_counter actual))
                (n.= 0 (list.size (its .#var_bindings actual))))
           
           {try.#Failure error}
           false))
       ))

(the succeeds?
  (for_any (_ a) (-> (/.Check a) Bit))
  (|>> (/.value /.fresh_context)
       (pipe.when {try.#Success _}
         true

         {try.#Failure error}
         false)))

(the fails?
  (for_any (_ a) (-> (/.Check a) Bit))
  (|>> ..succeeds?
       not))

(the nominal
  (Random Type)
  (do random.monad
    [name (random.upper_cased 10)]
    (in {.#Nominal name (list)})))

(the (non_twins = random)
  (for_any (_ a) (-> (-> a a Bit) (Random a) (Random [a a])))
  (do random.monad
    [left random
     right (random.only (|>> (= left) not) random)]
    (in [left right])))

(.every Super
  (for_some (_ sub) [Text sub]))

(.every Sub
  (Super Bit))

(the (handles_nominal_types! name/0 name/1 parameter/0 parameter/1)
  (-> Text Text Type Type Bit)
  (let [names_matter!
        (and (..succeeds? (/.check {.#Nominal name/0 (list)}
                                   {.#Nominal name/0 (list)}))
             (..fails? (/.check {.#Nominal name/0 (list)}
                                {.#Nominal name/1 (list)})))

        parameters_matter!
        (and (..succeeds? (/.check {.#Nominal name/0 (list parameter/0)}
                                   {.#Nominal name/0 (list parameter/0)}))
             (..fails? (/.check {.#Nominal name/0 (list parameter/0)}
                                {.#Nominal name/0 (list parameter/1)})))

        covariant_parameters!
        (and (..succeeds? (/.check {.#Nominal name/0 (list Super)}
                                   {.#Nominal name/0 (list Sub)}))
             (..fails? (/.check {.#Nominal name/0 (list Sub)}
                                {.#Nominal name/0 (list Super)})))]
    (and names_matter!
         parameters_matter!
         covariant_parameters!)))

(with_template [<assertion> <combinator>]
  [(the (<assertion> name/0 name/1)
     (-> Text Text Bit)
     (let [pair/0 {<combinator> {.#Nominal name/0 (list)} {.#Nominal name/0 (list)}}
           pair/1 {<combinator> {.#Nominal name/1 (list)} {.#Nominal name/1 (list)}}
           
           invariant!
           (and (..succeeds? (/.check pair/0 pair/0))
                (..fails? (/.check pair/0 pair/1)))

           super_pair {<combinator> Super Super}
           sub_pair {<combinator> Sub Sub}
           
           covariant!
           (and (..succeeds? (/.check super_pair sub_pair))
                (..fails? (/.check sub_pair super_pair)))]
       (and invariant!
            covariant!)))]

  [handles_products! .#Product]
  [handles_sums! .#Sum]
  )

(the (handles_function_variance! nominal)
  (-> Type Bit)
  (let [functions_have_contravariant_inputs!
        (..succeeds? (/.check {.#Function Sub nominal} {.#Function Super nominal}))
        
        functions_have_covariant_outputs!
        (..succeeds? (/.check {.#Function nominal Super} {.#Function nominal Sub}))]
    (and functions_have_contravariant_inputs!
         functions_have_covariant_outputs!)))

(the (verdict check)
  (for_any (_ _) (-> (/.Check _) (/.Check Bit)))
  (function (_ context)
    {try.#Success [context (when (check context)
                             {try.#Success _}
                             true

                             {try.#Failure _}
                             false)]}))

(the (build_ring tail_size)
  (-> Nat (/.Check [Type (List Type) Type]))
  (do [! /.monad]
    [[id/head var/head] /.var
     var/tail+ (monad.each ! (function (_ _)
                               (do !
                                 [[id/T var/tail] /.var]
                                 (in var/tail)))
                           (list.repeated tail_size /.var))
     var/last (monad.mix ! (function (_ var/next var/prev)
                             (do !
                               [_ (/.check var/prev var/next)]
                               (in var/next)))
                         var/head
                         var/tail+)
     _ (/.check var/last var/head)]
    (in [var/head var/tail+ var/last])))

(the (handles_var_rings! tail_size nominal/0 nominal/1)
  (-> Nat Type Type Bit)
  (let [can_create_rings_of_variables!
        (succeeds? (..build_ring tail_size))

        can_bind_rings_of_variables!
        (succeeds? (do [! /.monad]
                     [[var/head var/tail+ var/last] (..build_ring tail_size)
                      _ (/.check var/head nominal/0)
                      failures (monad.each ! (|>> (/.check nominal/1) ..verdict) (list.partial var/head var/tail+))
                      successes (monad.each ! (|>> (/.check nominal/0) ..verdict) (list.partial var/head var/tail+))]
                     (/.assertion "" (and (list.every? (bit#= false) failures)
                                          (list.every? (bit#= true) successes)))))

        can_merge_multiple_rings_of_variables!
        (succeeds? (do [! /.monad]
                     [[var/head/0 var/tail+/0 var/last/0] (..build_ring tail_size)
                      [var/head/1 var/tail+/1 var/last/1] (..build_ring tail_size)
                      _ (/.check var/head/0 var/head/1)
                      _ (/.check var/head/0 nominal/0)
                      .let [all_variables (list#composite (list.partial var/head/0 var/tail+/0)
                                                          (list.partial var/head/1 var/tail+/1))]
                      failures (monad.each ! (|>> (/.check nominal/1) ..verdict) all_variables)
                      successes (monad.each ! (|>> (/.check nominal/0) ..verdict) all_variables)]
                     (/.assertion "" (and (list.every? (bit#= false) failures)
                                          (list.every? (bit#= true) successes)))))]
    (and can_create_rings_of_variables!
         can_bind_rings_of_variables!
         can_merge_multiple_rings_of_variables!)))

(the (handles_vars! nominal)
  (-> Type Bit)
  (let [vars_check_against_themselves!
        (succeeds? (do /.monad
                     [[id var] /.var]
                     (/.check var var)))

        can_bind_vars_by_checking_against_them!
        (and (succeeds? (do /.monad
                          [[id var] /.var]
                          (/.check var nominal)))
             (succeeds? (do /.monad
                          [[id var] /.var]
                          (/.check nominal var))))

        cannot_rebind!
        (fails? (do /.monad
                  [[id var] /.var
                   _ (/.check var nominal)]
                  (/.check var ..Sub)))

        bound_vars_check_against_their_bound_types!
        (and (succeeds? (do /.monad
                          [[id var] /.var
                           _ (/.check var nominal)]
                          (/.check nominal var)))
             (succeeds? (do /.monad
                          [[id var] /.var
                           _ (/.check var ..Super)]
                          (/.check var ..Sub)))
             (succeeds? (do /.monad
                          [[id var] /.var
                           _ (/.check var ..Sub)]
                          (/.check ..Super var)))

             (fails? (do /.monad
                       [[id var] /.var
                        _ (/.check var ..Super)]
                       (/.check ..Sub var)))
             (fails? (do /.monad
                       [[id var] /.var
                        _ (/.check var ..Sub)]
                       (/.check var ..Super))))]
    (and vars_check_against_themselves!
         can_bind_vars_by_checking_against_them!
         cannot_rebind!
         bound_vars_check_against_their_bound_types!)))

(the handles_existentials!
  Bit
  (let [existentials_always_match_themselves!
        (..succeeds? (do /.monad
                       [[_ single] /.existential]
                       (/.check single single)))

        existentials_never_match_each_other!
        (..fails? (do /.monad
                    [[_ left] /.existential
                     [_ right] /.existential]
                    (/.check left right)))]
    (and existentials_always_match_themselves!
         existentials_never_match_each_other!)))

(the (handles_quantification! nominal)
  (-> Type Bit)
  (let [universals_satisfy_themselves!
        (..succeeds? (/.check (.type (for_any (_ a) (Maybe a)))
                              (.type (for_any (_ a) (Maybe a)))))

        existentials_satisfy_themselves!
        (..succeeds? (/.check (.type (for_some (_ a) (Maybe a)))
                              (.type (for_some (_ a) (Maybe a)))))

        universals_satisfy_particulars!
        (..succeeds? (/.check (.type (Maybe nominal))
                              (.type (for_any (_ a) (Maybe a)))))

        particulars_do_not_satisfy_universals!
        (..fails? (/.check (.type (for_any (_ a) (Maybe a)))
                           (.type (Maybe nominal))))

        particulars_satisfy_existentials!
        (..succeeds? (/.check (.type (for_some (_ a) (Maybe a)))
                              (.type (Maybe nominal))))

        existentials_do_not_satisfy_particulars!
        (..fails? (/.check (.type (Maybe nominal))
                           (.type (for_some (_ a) (Maybe a)))))]
    (and universals_satisfy_themselves!
         existentials_satisfy_themselves!

         universals_satisfy_particulars!
         particulars_do_not_satisfy_universals!
         
         particulars_satisfy_existentials!
         existentials_do_not_satisfy_particulars!
         )))

(the (handles_ultimates! nominal)
  (-> Type Bit)
  (let [any_is_the_ultimate_super_type!
        (and (..succeeds? (/.check Any nominal))
             (..fails? (/.check nominal Any)))

        nothing_is_the_ultimate_sub_type!
        (and (..succeeds? (/.check nominal Nothing))
             (..fails? (/.check Nothing nominal)))

        ultimates_check_themselves!
        (and (..succeeds? (/.check Any Any))
             (..succeeds? (/.check Nothing Nothing)))]
    (and any_is_the_ultimate_super_type!
         nothing_is_the_ultimate_sub_type!
         ultimates_check_themselves!)))

(the (names_do_not_affect_types! left_name right_name nominal)
  (-> Symbol Symbol Type Bit)
  (and (..succeeds? (/.check {.#Named left_name Any} nominal))
       (..succeeds? (/.check Any {.#Named right_name nominal}))
       (..succeeds? (/.check {.#Named left_name Any} {.#Named right_name nominal}))))

... TODO: Test all the crazy corner cases from /.check_apply
(the (handles_application! nominal/0 nominal/1)
  (-> Type Type Bit)
  (let [types_flow_through!
        (and (..succeeds? (/.check (.type ((for_any (_ a) a) nominal/0))
                                   nominal/0))
             (..succeeds? (/.check nominal/0
                                   (.type ((for_any (_ a) a) nominal/0))))

             (..succeeds? (/.check (.type ((for_some (_ a) a) nominal/0))
                                   nominal/0))
             (..succeeds? (/.check nominal/0
                                   (.type ((for_some (_ a) a) nominal/0)))))

        multiple_parameters!
        (and (..succeeds? (/.check (.type ((for_any (_ a b) [a b]) nominal/0 nominal/1))
                                   (.type [nominal/0 nominal/1])))
             (..succeeds? (/.check (.type [nominal/0 nominal/1])
                                   (.type ((for_any (_ a b) [a b]) nominal/0 nominal/1))))
             
             (..succeeds? (/.check (.type ((for_some (_ a b) [a b]) nominal/0 nominal/1))
                                   (.type [nominal/0 nominal/1])))
             (..succeeds? (/.check (.type [nominal/0 nominal/1])
                                   (.type ((for_some (_ a b) [a b]) nominal/0 nominal/1)))))]
    (and types_flow_through!
         multiple_parameters!)))

(the check
  Test
  (do [! random.monad]
    [nominal ..nominal
     [name/0 name/1] (..non_twins text#= (random.upper_cased 10))
     [parameter/0 parameter/1] (..non_twins //#= ..nominal)
     left_name ..symbol
     right_name ..symbol
     ring_tail_size (of ! each (n.% 10) random.nat)]
    (_.coverage [/.check]
      (and (..handles_nominal_types! name/0 name/1 parameter/0 parameter/1)
           (..handles_products! name/0 name/1)
           (..handles_sums! name/0 name/1)
           (..handles_function_variance! nominal)
           (..handles_vars! nominal)
           (..handles_var_rings! ring_tail_size parameter/0 parameter/1)
           ..handles_existentials!
           (..handles_quantification! nominal)
           (..handles_ultimates! nominal)
           (..handles_application! parameter/0 parameter/1)
           (..names_do_not_affect_types! left_name right_name nominal)
           ))))

(the dirty_type
  (Random (-> Type Type))
  (random.rec
   (function (_ dirty_type)
     (`` (all random.either
              (random#each (function (_ id)
                             (function.constant {.#Opaque id}))
                           random.nat)
              (do random.monad
                [module (random.upper_cased 10)
                 short (random.upper_cased 10)
                 anonymousT dirty_type]
                (in (function (_ holeT)
                      {.#Named [module short] (anonymousT holeT)})))
              (,, (with_template [<tag>]
                    [(do random.monad
                       [leftT dirty_type
                        rightT dirty_type]
                       (in (function (_ holeT)
                             {<tag> (leftT holeT) (rightT holeT)})))]

                    [.#Sum]
                    [.#Product]
                    [.#Function]
                    [.#Apply]
                    ))
              (do [! random.monad]
                [name (random.upper_cased 10)
                 parameterT dirty_type]
                (in (function (_ holeT)
                      {.#Nominal name (list (parameterT holeT))})))
              (,, (with_template [<tag>]
                    [(do [! random.monad]
                       [funcT dirty_type
                        argT dirty_type
                        body random.nat]
                       (in (function (_ holeT)
                             {<tag> (list (funcT holeT) (argT holeT))
                                    {.#Parameter body}})))]

                    [.#Universal]
                    [.#Existential]
                    ))
              )))))

(the clean
  Test
  (do random.monad
    [type_shape ..dirty_type]
    (_.coverage [/.clean]
      (and (|> (do /.monad
                 [[var_id varT] /.var
                  cleanedT (/.clean (list) (type_shape varT))]
                 (in (//#= (type_shape varT)
                           cleanedT)))
               (/.value /.fresh_context)
               (try.else false))
           (|> (do /.monad
                 [[var_id varT] /.var
                  [_ replacementT] /.existential
                  _ (/.check varT replacementT)
                  cleanedT (/.clean (list) (type_shape varT))]
                 (in (//#= (type_shape replacementT)
                           cleanedT)))
               (/.value /.fresh_context)
               (try.else false))
           ))))

(the for_subsumption|ultimate
  (Random Bit)
  (do random.monad
    [example ..clean_type]
    (in (and (/.subsumed? .Any example)
             (not (/.subsumed? example .Any))
             
             (/.subsumed? example .Nothing)
             (not (/.subsumed? .Nothing example))
             ))))

(the for_subsumption|nominal
  (Random Bit)
  (do random.monad
    [nominal (random.upper_cased 10)
     example ..clean_type]
    (in (and (/.subsumed? {.#Nominal nominal (list)}
                          {.#Nominal nominal (list)})
             (/.subsumed? {.#Nominal nominal (list .Any)}
                          {.#Nominal nominal (list example)})
             (not (/.subsumed? {.#Nominal nominal (list example)}
                               {.#Nominal nominal (list .Any)}))
             (/.subsumed? {.#Nominal nominal (list example)}
                          {.#Nominal nominal (list .Nothing)})
             (not (/.subsumed? {.#Nominal nominal (list .Nothing)}
                               {.#Nominal nominal (list example)}))
             ))))

(the for_subsumption|sum
  (Random Bit)
  (do random.monad
    [left ..clean_type
     right ..clean_type]
    (in (and (/.subsumed? {.#Sum .Any .Any}
                          {.#Sum left right})
             (not (/.subsumed? {.#Sum left right}
                               {.#Sum .Any .Any}))
             (/.subsumed? {.#Sum left right}
                          {.#Sum .Nothing .Nothing})
             (not (/.subsumed? {.#Sum .Nothing .Nothing}
                               {.#Sum left right}))
             ))))

(the for_subsumption|product
  (Random Bit)
  (do random.monad
    [left ..clean_type
     right ..clean_type]
    (in (and (/.subsumed? {.#Product .Any .Any}
                          {.#Product left right})
             (not (/.subsumed? {.#Product left right}
                               {.#Product .Any .Any}))
             (/.subsumed? {.#Product left right}
                          {.#Product .Nothing .Nothing})
             (not (/.subsumed? {.#Product .Nothing .Nothing}
                               {.#Product left right}))
             ))))

(the for_subsumption|function
  (Random Bit)
  (do random.monad
    [left ..clean_type
     right ..clean_type]
    (in (and (/.subsumed? {.#Function .Nothing .Any}
                          {.#Function left right})
             (not (/.subsumed? {.#Function left right}
                               {.#Function .Nothing .Any}))
             (not (/.subsumed? {.#Function .Any .Nothing}
                               {.#Function left right}))
             ))))

(with_template [<tag> <name>]
  [(the <name>
     (Random Bit)
     (do random.monad
       [id random.nat
        example ..clean_type]
       (in (not (or (/.subsumed? {<tag> id} example)
                    (/.subsumed? example {<tag> id}))))))]

  [.#Var for_subsumption|variable]
  [.#Opaque for_subsumption|existential]
  )

(the for_subsumption|quantification+application
  (Random Bit)
  (do random.monad
    [example ..clean_type]
    (in (and (and (/.subsumed? (.type (List example)) (.type (for_any (_ a) (List a))))
                  (not (/.subsumed? (.type (for_any (_ a) (List a))) (.type (List example)))))
             (and (/.subsumed? (.type (for_some (_ a) (List a))) (.type (List example)))
                  (not (/.subsumed? (.type (List example)) (.type (for_some (_ a) (List a))))))))))

(the for_subsumption|named
  (Random Bit)
  (do random.monad
    [module (random.upper_cased 10)
     short (random.upper_cased 10)
     example ..clean_type]
    (in (and (/.subsumed? {.#Named [module short] example}
                          example)
             (/.subsumed? example
                          {.#Named [module short] example})
             ))))

(the for_subsumption
  Test
  (do random.monad
    [for_subsumption|ultimate ..for_subsumption|ultimate
     for_subsumption|nominal ..for_subsumption|nominal
     for_subsumption|sum ..for_subsumption|sum
     for_subsumption|product ..for_subsumption|product
     for_subsumption|function ..for_subsumption|function
     for_subsumption|variable ..for_subsumption|variable
     for_subsumption|existential ..for_subsumption|existential
     for_subsumption|quantification+application ..for_subsumption|quantification+application
     for_subsumption|named ..for_subsumption|named]
    (_.coverage [/.subsumed?]
      (and for_subsumption|ultimate
           for_subsumption|nominal
           for_subsumption|sum
           for_subsumption|product
           for_subsumption|function
           for_subsumption|variable
           for_subsumption|existential
           for_subsumption|quantification+application
           for_subsumption|named
           ))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Check])
      (all _.and
           ..polymorphism
           (do random.monad
             [expected random.nat]
             (_.coverage [/.value]
               (when (/.value /.fresh_context
                              (of /.monad in expected))
                 {try.#Success actual} (same? expected actual)
                 {try.#Failure error} false)))
           ..error_handling
           ..var
           ..context
           ..check
           ..clean
           ..for_subsumption
           )))
