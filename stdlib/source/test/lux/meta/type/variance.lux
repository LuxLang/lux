(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random (.only Random)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.only)
    ["[1][0]" check]]]])

(type Super
  (Ex (_ sub) [Text sub]))

(type Sub
  (Super Bit))

(def .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (_.coverage [/.Co]
             (and (//check.subsumes? (type_literal (/.Co Super)) (type_literal (/.Co Sub)))
                  (not (//check.subsumes? (type_literal (/.Co Sub)) (type_literal (/.Co Super))))))
           (_.coverage [/.Contra]
             (and (//check.subsumes? (type_literal (/.Contra Sub)) (type_literal (/.Contra Super)))
                  (not (//check.subsumes? (type_literal (/.Contra Super)) (type_literal (/.Contra Sub))))))
           (_.coverage [/.In]
             (and (//check.subsumes? (type_literal (/.In Super)) (type_literal (/.In Super)))
                  (//check.subsumes? (type_literal (/.In Sub)) (type_literal (/.In Sub)))
                  (not (//check.subsumes? (type_literal (/.In Sub)) (type_literal (/.In Super))))
                  (not (//check.subsumes? (type_literal (/.In Super)) (type_literal (/.In Sub))))))
           )))
