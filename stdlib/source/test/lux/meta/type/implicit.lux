... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only)]
    [functor (.only)]
    [monoid (.only)]
    [monad (.only do)]
    ["[0]" enum]]
   [data
    ["[0]" bit]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(/.implicitly n.multiplication)

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [.let [digit (of ! each (n.% 10) random.natural)]
         left digit
         right digit
         .let [start (n.min left right)
               end (n.max left right)]

         left random.natural
         right random.natural]
        (all _.and
             ... (_.coverage [/.any]
             ...   (let [first_order!
             ...         (let [(open "list#[0]") (list.equivalence n.equivalence)]
             ...           (and (bit.= (of n.equivalence = left right)
             ...                       (/.any = left right))
             ...                (list#= (of list.functor each ++ (enum.range n.enum start end))
             ...                        (/.any each ++ (enum.range n.enum start end)))))

             ...         second_order!
             ...         (/.any =
             ...                (enum.range n.enum start end)
             ...                (enum.range n.enum start end))

             ...         third_order!
             ...         (let [lln (/.any each (enum.range n.enum start)
             ...                          (enum.range n.enum start end))]
             ...           (/.any = lln lln))]
             ...     (and first_order!
             ...          second_order!
             ...          third_order!)))
             (_.coverage [/.with]
               (/.with [n.addition]
                 (n.= (of n.addition composite left right)
                      (/.any composite left right))))
             (_.coverage [/.implicitly]
               (n.= (of n.multiplication composite left right)
                    (/.any composite left right)))
             ))))
