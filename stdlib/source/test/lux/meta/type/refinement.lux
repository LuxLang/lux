... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" monad)]
    [function
     [predicate (.only Predicate)]]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def _refiner
  (/.refiner (n.> 123)))

(def _type
  (/.type _refiner))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Refined])
      (do [! random.monad]
        [raw random.nat
         modulus (of ! each (|>> (n.% 10) (n.+ 2)) random.nat)
         .let [predicate (is (Predicate Nat)
                             (|>> (n.% modulus) (n.= 0)))]
         total_raws (of ! each (|>> (n.% 20) ++) random.nat)
         raws (random.list total_raws random.nat)]
        (all _.and
             (_.for [/.Refiner]
                    (all _.and
                         (_.coverage [/.refiner]
                           (when (/.refiner predicate raw)
                             {.#Some refined}
                             (predicate raw)
                             
                             {.#None}
                             (not (predicate raw))))
                         (_.coverage [/.predicate]
                           (|> (/.refiner predicate modulus)
                               (maybe#each (|>> /.predicate (same? predicate)))
                               (maybe.else false)))
                         ))
             (_.coverage [/.value]
               (|> (/.refiner predicate modulus)
                   (maybe#each (|>> /.value (n.= modulus)))
                   (maybe.else false)))
             (_.coverage [/.lifted]
               (and (|> (/.refiner predicate modulus)
                        (maybe#each (/.lifted (n.+ modulus)))
                        maybe#conjoint
                        (maybe#each (|>> /.value (n.= (n.+ modulus modulus))))
                        (maybe.else false))
                    (|> (/.refiner predicate modulus)
                        (maybe#each (/.lifted (n.+ (++ modulus))))
                        maybe#conjoint
                        (maybe#each (|>> /.value (n.= (n.+ modulus (++ modulus)))))
                        (maybe.else false)
                        not)))
             (_.coverage [/.only]
               (let [expected (list.only predicate raws)
                     actual (/.only (/.refiner predicate) raws)]
                 (and (n.= (list.size expected)
                           (list.size actual))
                      (of (list.equivalence n.equivalence) =
                          expected
                          (list#each /.value actual)))))
             (_.coverage [/.partition]
               (let [expected (list.only predicate raws)
                     [actual alternative] (/.partition (/.refiner predicate) raws)]
                 (and (n.= (list.size expected)
                           (list.size actual))
                      (n.= (n.- (list.size expected) total_raws)
                           (list.size alternative))
                      (of (list.equivalence n.equivalence) =
                          expected
                          (list#each /.value actual)))))
             (_.coverage [/.type]
               (exec (is (Maybe .._type)
                         (.._refiner raw))
                 true))
             ))))
