(.require
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" order]
     ["$[0]" enum]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["i" int]]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" scale]])

(with_template [<name> <type> <unit>]
  [(def (<name> range)
     (-> Nat (Random (/.Measure Any <type>)))
     (|> random.int
         (at random.monad each (i.% (.int range)))
         (random.only (|>> (i.= +0) not))
         (at random.monad each (at <unit> in))))]

  [meter /.Meter /.meter]
  [second /.Second /.second]
  )

(def polymorphism
  Test
  (all _.and
       (_.for [/.equivalence]
              ($equivalence.spec /.equivalence (..meter 1,000)))
       (_.for [/.order]
              ($order.spec /.order (..meter 1,000)))
       (_.for [/.enum]
              ($enum.spec /.enum (..meter 1,000)))
       ))

(def what (/.unit []))
(def What (/.type what))

(def unit
  Test
  (do random.monad
    [expected random.int]
    (_.for [/.Unit]
           (`` (all _.and
                    (~~ (with_template [<type> <unit>]
                          [(_.coverage [<type> <unit>]
                             (|> expected
                                 (at <unit> in)
                                 (at <unit> out)
                                 (i.= expected)))]

                          [/.Gram /.gram]
                          [/.Meter /.meter]
                          [/.Litre /.litre]
                          [/.Second /.second]
                          ))
                    (_.coverage [/.measure /.number]
                      (|> expected
                          /.measure
                          /.number
                          (i.= expected)))
                    (_.coverage [/.unit /.type]
                      (|> expected
                          (at ..what in)
                          (is (/.Measure Any What))
                          (at ..what out)
                          (i.= expected)))
                    )))))

(def arithmetic
  Test
  (do random.monad
    [.let [zero (at /.meter in +0)
           (open "meter#[0]") (is (Equivalence (/.Measure Any /.Meter))
                                  /.equivalence)]
     left (random.only (|>> (meter#= zero) not) (..meter 1,000))
     right (..meter 1,000)
     extra (..second 1,000)]
    (`` (all _.and
             (~~ (with_template [<q> <i>]
                   [(_.coverage [<q>]
                      (i.= (<i> (at /.meter out left) (at /.meter out right))
                           (at /.meter out (<q> left right))))]

                   [/.+ i.+]
                   [/.- i.-]
                   ))
             (_.coverage [/.*]
               (let [expected (i.* (at /.meter out left) (at /.meter out right))
                     actual (/.number (is (/.Measure Any [/.Meter /.Meter])
                                          (/.* left right)))]
                 (i.= expected actual)))
             (_.coverage [/./]
               (|> right
                   (/.* left)
                   (/./ left)
                   (meter#= right)))
             ))))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Measure])
      (all _.and
           ..polymorphism
           ..unit
           ..arithmetic

           /scale.test
           )))
