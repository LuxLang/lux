... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]
    ["[0]" enum
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["i" integer]]]
   [meta
    ["[0]" static]
    ["[0]" code]
    [macro
     ["[0]" expansion]
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" scale]])

(template.with [<name> <type> <unit>]
  [(the (<name> range)
     (-> Natural (Random (/.Measure Any <type>)))
     (|> random.integer
         (of random.monad each (i.% (.integer range)))
         (random.only (|>> (i.= +0) not))
         (of random.monad each (of <unit> in))))]

  [meter /.Meter /.meter]
  [second /.Second /.second]
  )

(the polymorphism
  Test
  (all _.and
       (_.for [/.equivalence /.=]
              (static.when (same? /.equivalence /.=)
                (equivalenceT.spec /.equivalence (..meter 1,000))))
       (_.for [/.order]
              (orderT.spec /.order (..meter 1,000)))
       (_.for [/.enum]
              (enumT.spec /.enum (..meter 1,000)))
       ))

(expansion.let [<descriptor> (static.random code.text
                                            (random.upper_cased 1))]
  (these (the what (/.unit <descriptor>))
         (the What (/.type what))

         (the unit
           Test
           (do random.monad
             [expected random.integer]
             (_.for [/.Unit
                     /.in /.out /.injection]
                    (`` (all _.and
                             (,, (template.with [<type> <unit>]
                                   [(_.coverage [<type> <unit>]
                                      (and (|> expected
                                               (of <unit> in)
                                               (of <unit> out)
                                               (i.= expected))
                                           (let [it (|> expected
                                                        (of <unit> in)
                                                        (of <unit> injection))]
                                             (and (not (text.= (%.integer expected) it))
                                                  (text.starts_with? (%.integer expected) it)))))]

                                   [/.Gram /.gram]
                                   [/.Meter /.meter]
                                   [/.Litre /.litre]
                                   [/.Second /.second]
                                   ))
                             (_.coverage [/.measure /.number]
                               (|> expected
                                   /.measure
                                   /.number
                                   (i.= expected)))
                             (_.coverage [/.unit /.type]
                               (and (|> expected
                                        (of ..what in)
                                        (is (/.Measure Any What))
                                        (of ..what out)
                                        (i.= expected))
                                    (let [it (|> expected
                                                 (of ..what in)
                                                 (of ..what injection))]
                                      (and (text.contains? (%.integer expected) it)
                                           (text.contains? <descriptor> it)))))
                             )))))))

(the arithmetic
  Test
  (do random.monad
    [.let [zero (of /.meter in +0)
           (open "meter#[0]") (is (Equivalence (/.Measure Any /.Meter))
                                  /.equivalence)]
     left (random.only (|>> (meter#= zero) not) (..meter 1,000))
     right (..meter 1,000)
     extra (..second 1,000)]
    (`` (all _.and
             (,, (template.with [<q> <i>]
                   [(_.coverage [<q>]
                      (i.= (<i> (of /.meter out left) (of /.meter out right))
                           (of /.meter out (<q> left right))))]

                   [/.+ i.+]
                   [/.- i.-]
                   ))
             (_.coverage [/.*]
               (let [expected (i.* (of /.meter out left) (of /.meter out right))
                     actual (/.number (is (/.Measure Any [/.Meter /.Meter])
                                          (/.* left right)))]
                 (i.= expected actual)))
             (_.coverage [/./]
               (|> right
                   (/.* left)
                   (/./ left)
                   (meter#= right)))
             ))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Measure])
      (all _.and
           ..polymorphism
           ..unit
           ..arithmetic

           /scale.test
           )))
