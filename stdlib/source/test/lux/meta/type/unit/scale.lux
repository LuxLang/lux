... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]
     ["i" int]
     ["[0]" ratio (.use "[1]#[0]" equivalence)]]]
   ["[0]" meta (.only)
    ["[0]" code]
    [macro
     [syntax (.only syntax)]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" //]]])

(def natural
  (syntax (_ [])
    (of meta.monad each
        (|>> code.nat list)
        meta.seed)))

(with_expansions [<from> (..natural)
                  <factor> (..natural)
                  <to> (n.* <factor> <from>)]
  (def how (/.scale [ratio.#denominator <from>
                     ratio.#numerator <to>]))
  (def How (/.type how))

  (def how::from <from>)
  (def how::to <to>)
  )

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Scale])
      (do [! random.monad]
        [small (|> random.int
                   (of ! each (i.% +1,000))
                   (of ! each (of //.meter in)))
         large (|> random.int
                   (of ! each (i.% +1,000))
                   (of ! each (i.* +1,000,000,000))
                   (of ! each (of //.meter in)))
         .let [(open "meter#[0]") (is (Equivalence (//.Measure Any //.Meter))
                                      //.equivalence)]
         unscaled (|> random.int
                      (of ! each (|>> (i.% +1,000)
                                      (i.* (.int how::to))
                                      (of //.meter in))))]
        (`` (all _.and
                 (,, (with_template [<type> <scale>]
                       [(_.coverage [<type> <scale>]
                          (|> small
                              (of <scale> up)
                              (is (//.Measure <type> //.Meter))
                              (of <scale> down)
                              (is (//.Measure Any //.Meter))
                              (meter#= small)))]

                       [/.Kilo /.kilo]
                       [/.Mega /.mega]
                       [/.Giga /.giga]
                       ))
                 (,, (with_template [<type> <scale>]
                       [(_.coverage [<type> <scale>]
                          (|> large
                              (of <scale> up)
                              (is (//.Measure <type> //.Meter))
                              (of <scale> down)
                              (is (//.Measure Any //.Meter))
                              (meter#= large)))]

                       [/.Milli /.milli]
                       [/.Micro /.micro]
                       [/.Nano /.nano]
                       ))
                 (_.coverage [/.re_scaled]
                   (|> large (is (//.Measure Any //.Meter))
                       (of /.kilo up) (is (//.Measure /.Kilo //.Meter))
                       (/.re_scaled /.kilo /.milli) (is (//.Measure /.Milli //.Meter))
                       (/.re_scaled /.milli /.kilo) (is (//.Measure /.Kilo //.Meter))
                       (of /.kilo down) (is (//.Measure Any //.Meter))
                       (meter#= large)))
                 (_.coverage [/.scale /.type]
                   (and (|> unscaled
                            (of ..how up)
                            (is (//.Measure How //.Meter))
                            (of ..how down)
                            (meter#= unscaled))
                        (ratio#= [ratio.#denominator ..how::from
                                  ratio.#numerator ..how::to]
                                 (of ..how ratio))))
                 )))))
