... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    ["[0]" macro (.only)
     [syntax (.only syntax)]
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(template.with_locals [g!Foo g!Bar]
  (these (with_template [<syntax> <meta>]
           [(def <syntax>
              (syntax (_ [])
                (do meta.monad
                  [frame <meta>]
                  (in (list (code.text (the /.#name frame)))))))]

           [current /.current]
           [specific (/.specific (template.text [g!Foo]))]
           )

         (/.def (g!Foo a)
           Text

           (/.def (g!Bar a)
             Nat

             (def .public test
               Test
               (<| (_.covering /._)
                   (_.for [/.def])
                   (do random.monad
                     [expected_foo (random.lower_cased 5)
                      expected_bar random.nat]
                     (all _.and
                          (_.coverage [/.abstraction]
                            (and (exec (is (g!Foo Text)
                                           (/.abstraction g!Foo expected_foo))
                                   true)
                                 (exec (is (g!Bar Text)
                                           (/.abstraction expected_bar))
                                   true)))
                          (_.coverage [/.representation]
                            (and (|> expected_foo
                                     (/.abstraction g!Foo)
                                     (is (g!Foo Bit))
                                     (/.representation g!Foo)
                                     (text#= expected_foo))
                                 (|> (/.abstraction expected_bar)
                                     (is (g!Bar Bit))
                                     /.representation
                                     (n.= expected_bar))))
                          (_.coverage [/.transmutation]
                            (and (exec (|> expected_foo
                                           (/.abstraction g!Foo)
                                           (is (g!Foo .Macro))
                                           (/.transmutation g!Foo)
                                           (is (g!Foo .Lux)))
                                   true)
                                 (exec (|> (/.abstraction expected_bar)
                                           (is (g!Bar .Macro))
                                           /.transmutation
                                           (is (g!Bar .Lux)))
                                   true)))
                          (_.for [/.Frame
                                  /.#name /.#type_vars /.#abstraction /.#representation]
                                 (all _.and
                                      (_.coverage [/.current]
                                        (text#= (template.text [g!Bar])
                                                (..current)))
                                      (_.coverage [/.specific]
                                        (text#= (template.text [g!Foo])
                                                (..specific)))
                                      ))
                          ))))))))
