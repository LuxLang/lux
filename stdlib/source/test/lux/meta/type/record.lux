... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except symbol)
   [abstract
    ["[0]" monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["<>" projection]
    ["[0]" pipe]
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)]
    [collection
     ["[0]" list]
     ["[0]" array]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" nat]]]
   [meta
    ["[0]" symbol (.use "[1]#[0]" equivalence)]
    ["[0]" code (.use "[1]#[0]" equivalence)]
    ["[0]" static]
    [macro
     ["^" pattern]
     ["[0]" expansion]
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.use "[1]#[0]" equivalence)]]])

(every (Generalized_Record foo bar baz)
  (Record
   [#foo foo
    #bar bar
    #baz baz]))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (expansion.let [random_type (these (static.random //.code
                                                             (all random.either
                                                                  (random#in Bit)
                                                                  (random#in Nat)
                                                                  (random#in Int)
                                                                  (random#in Rev)
                                                                  (random#in Dec)
                                                                  (random#in Text))))
                           parameter random_type
                           return random_type

                           foo random_type
                           bar random_type
                           baz random_type]
             (let [(open "//#[0]") //.equivalence]
               (all _.and
                    (_.coverage [/.member]
                      (and (//#= Any (/.member .#None [parameter]))
                           (//#= parameter (/.member .#Some [parameter]))))
                    (_.coverage [/.only]
                      (and (//#= foo
                                 (/.only [foo bar baz] [..#foo]))
                           (//#= bar
                                 (/.only [foo bar baz] [..#bar]))
                           (//#= baz
                                 (/.only [foo bar baz] [..#baz]))

                           (//#= (And foo bar)
                                 (/.only [foo bar baz] [..#foo ..#bar]))
                           (//#= (And foo baz)
                                 (/.only [foo bar baz] [..#foo ..#baz]))
                           (//#= (And bar baz)
                                 (/.only [foo bar baz] [..#bar ..#baz]))))
                    (_.coverage [/.except]
                      (and (//#= (And bar baz)
                                 (/.except [foo bar baz] [..#foo]))
                           (//#= (And foo baz)
                                 (/.except [foo bar baz] [..#bar]))
                           (//#= (And foo bar)
                                 (/.except [foo bar baz] [..#baz]))

                           (//#= baz
                                 (/.except [foo bar baz] [..#foo ..#bar]))
                           (//#= bar
                                 (/.except [foo bar baz] [..#foo ..#baz]))
                           (//#= foo
                                 (/.except [foo bar baz] [..#bar ..#baz]))))
                    )))
           )))
