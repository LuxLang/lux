... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.`` (.`` (.using
           [library
            [lux (.except)
             ["[0]" debug]
             [abstract
              [monad (.only do)]
              ["<>" projection]]
             [error
              ["[0]" try (.use "[1]#[0]" functor)]]
             [data
              ["[0]" product]
              ["[0]" binary (.only)
               ["[1]F" \\injection]]
              ["[0]" text (.only)
               ["%" \\injection]]
              [collection
               ["[0]" sequence]
               ["[0]" list (.use "[1]#[0]" functor)]]]
             [math
              ["[0]" random]
              [number
               ["n" natural]]]
             [macro
              ["[0]" template]]
             ["[0]" meta (.only)
              ["[0]" provenance]
              ["[0]" code
               ["<[1]>" \\projection]]]
             [target
              ["[0]" js]
              ["[0]" python]
              ["[0]" lua]
              ["[0]" ruby]
              ["[0]" php]
              (.,, (.for .jvm (.,, (.these ["[0]" jvm
                                            ["[1]" bytecode]
                                            ["[0]" class]
                                            ["[0]" version]
                                            [encoding
                                             [name
                                              ["[0]" internal]]]]))
                         (.,, (.these))))]
             [compiler
              [meta
               [archive
                ["[0]" unit]]]
              [language
               [lux
                ["[0]" phase]
                ["[0]" translation]
                ["[0]" declaration]
                ["[0]" analysis (.only)
                 ["[0]" type]
                 ["<[1]>" \\projection]]
                ["[0]" synthesis (.only)
                 ["<[1]>" \\projection]]
                [phase
                 [translation
                  (.,, (.for .jvm (.,, (.these ["[0]" jvm
                                                ["[1]/[0]" runtime]]))
                             (.,, (.these))))]]]]]
             [test
              ["_" property (.only Test)]]]]
           [\\library
            ["[0]" / (.only analysis synthesis translation declaration)]])))

... Analysis
(the my_analysis
  Analysis
  (analysis (_ phase archive [pass_through <code>.any])
    (phase archive pass_through)))

... Synthesis
(the my_synthesis|synthesis
  Synthesis
  (synthesis (_ phase archive [pass_through <analysis>.any])
    (phase archive pass_through)))

(the my_synthesis
  Analysis
  (analysis (_ phase archive [parameters (<>.some <code>.any)])
    (let [! phase.monad]
      (|> parameters
          (list.each' ! (phase archive))
          (by ! each (|>> {analysis.#Extension (name ..my_synthesis|synthesis)}
                          [provenance.dummy]
                          (is analysis.Term)))))))

... Translation
(the my_translation|translation
  Translation
  (translation (_ phase archive [pass_through <synthesis>.any])
    (phase archive pass_through)))

(the my_translation|synthesis
  Synthesis
  (synthesis (_ phase archive [parameters (<>.some <analysis>.any)])
    (let [! phase.monad]
      (|> parameters
          (list.each' ! (phase archive))
          (by ! each (|>> {synthesis.#Extension (name ..my_translation|translation)}
                          [provenance.dummy]
                          (is synthesis.Term)))))))

(the my_translation
  Analysis
  (analysis (_ phase archive [parameters (<>.some <code>.any)])
    (let [! phase.monad]
      (|> parameters
          (list.each' ! (phase archive))
          (by ! each (|>> {analysis.#Extension (name ..my_translation|synthesis)}
                          [provenance.dummy]
                          (is analysis.Term)))))))

(the dummy_translation|translation
  Translation
  (translation (_ phase archive [])
    (let [[_ self] (name ..dummy_translation)]
      (by phase.monad in
          (for .jvm (jvm.string self)
               .js (js.string self)
               .python (python.unicode self)
               .lua (lua.string self)
               .ruby (ruby.string self)
               .php (php.string self))))))

(the dummy_translation|synthesis
  Synthesis
  (synthesis (_ phase archive [])
    (by phase.monad in (is synthesis.Term
                           [provenance.dummy {synthesis.#Extension (name ..dummy_translation|translation) (list)}]))))

(the dummy_translation
  Analysis
  (analysis (_ phase archive [])
    (by phase.monad in (is analysis.Term
                           [provenance.dummy {analysis.#Extension (name ..dummy_translation|synthesis) (list)}]))))

... Declaration
(the my_declaration
  Declaration
  (declaration (_ phase archive [expression <code>.any])
    (do [! phase.monad]
      [.let [[_ self] (name ..my_declaration)]
       analysis_phase declaration.analysis
       expressionA (<| declaration.of_analysis
                       (type.expecting .Any)
                       (analysis_phase archive expression))

       lux (declaration.of_analysis meta.compiler_state)

       synthesis_phase declaration.synthesis
       expressionS (declaration.of_synthesis
                    (synthesis_phase lux archive expressionA))

       translation_phase declaration.translation
       expressionG (declaration.of_translation
                    (translation_phase lux archive expressionS))
       
       _ (declaration.of_translation
          (translation.with_new_context archive unit.none
            (do !
              [[module_id artifact_id] (translation.context archive)
               .let [commentary (text "Successfully installed declaration " (%.text self) "!")]]
              (translation.save! artifact_id {.#None}
                                 (for .jvm (let [$class (jvm/runtime.class_name [module_id artifact_id])]
                                             (<| [$class]
                                                 (try.else (binary.empty 0))
                                                 (try#each (binaryF.value class.as_binary))
                                                 (class.class version.v6_0 class.public
                                                   (internal.name $class)
                                                   {.#None}
                                                   (internal.name "java.lang.Object")
                                                   (list)
                                                   (list)
                                                   (list)
                                                   (list))))
                                      .js (js.comment commentary
                                            (js.; (js.string commentary)))
                                      .python (python.comment commentary
                                                (python.; (python.string commentary)))
                                      .lua (lua.comment commentary
                                             (lua.; expressionG))
                                      .ruby (ruby.comment commentary
                                              (ruby.; (ruby.string commentary))))))))]
      (in declaration.no_requirements))))

(..my_declaration (n.* 2 3))


(the .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [expected random.natural]
        (`` (all _.and
                 (,, (template.with [<macro> <extension>]
                       [(_.coverage [<macro>]
                          (n.= expected
                               (<extension> expected)))]

                       [/.analysis ..my_analysis]
                       [/.synthesis ..my_synthesis]))
                 (_.coverage [/.translation]
                   (and (n.= expected
                             (..my_translation expected))
                        (let [[_ expected] (name ..dummy_translation)]
                          (text.= expected
                                  (..dummy_translation)))))
                 (_.coverage [/.declaration]
                   true)
                 )))))
