... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.`` (.`` (.require
           [library
            [lux (.except)
             ["[0]" debug]
             [abstract
              ["[0]" monad (.only do)]]
             [control
              ["<>" parser]
              ["[0]" try (.use "[1]#[0]" functor)]]
             [data
              ["[0]" product]
              ["[0]" binary (.only)
               ["[1]F" \\format]]
              ["[0]" text (.use "[1]#[0]" equivalence)
               ["%" \\format (.only format)]]
              [collection
               ["[0]" sequence]
               ["[0]" list (.use "[1]#[0]" functor)]]]
             [math
              ["[0]" random]
              [number
               ["n" nat]]]
             ["[0]" meta (.only)
              ["[0]" location]
              ["[0]" code
               ["<[1]>" \\parser]]
              [compiler
               ["@" target (.only)
                ["[0]" js]
                ["[0]" python]
                ["[0]" lua]
                ["[0]" ruby]
                ["[0]" php]
                ["[0]" scheme]
                (.,, (.for "JVM" (.,, (.these ["[0]" jvm
                                               ["[1]" bytecode]
                                               ["[0]" class]
                                               ["[0]" version]
                                               [encoding
                                                ["[0]" name]]]))
                           (.,, (.these))))]
               [meta
                [archive
                 ["[0]" unit]]]
               [language
                [lux
                 ["[0]" phase]
                 ["[0]" translation]
                 ["[0]" declaration]
                 ["[0]" analysis (.only)
                  ["[0]" type]
                  ["<[1]>" \\parser]]
                 ["[0]" synthesis (.only)
                  ["<[1]>" \\parser]]
                 [phase
                  [translation
                   (.,, (.for "JVM" (.,, (.these ["[0]" jvm
                                                  ["[1]/[0]" runtime]]))
                              (.,, (.these))))]]]]]]
             [test
              ["_" property (.only Test)]]]]
           [\\library
            ["[0]" / (.only analysis synthesis translation declaration)]])))

... Translation
(for @.old
     (these)
     
     (these
      ... Analysis
      (def my_analysis
        Analysis
        (analysis (_ phase archive [pass_through <code>.any])
          (phase archive pass_through)))

      ... Synthesis
      (def my_synthesis|synthesis
        Synthesis
        (synthesis (_ phase archive [pass_through <analysis>.any])
          (phase archive pass_through)))

      (def my_synthesis
        Analysis
        (analysis (_ phase archive [parameters (<>.some <code>.any)])
          (let [! phase.monad]
            (|> parameters
                (monad.each ! (phase archive))
                (of ! each (|>> (is (List analysis.Analysis))
                                {analysis.#Extension (symbol ..my_synthesis|synthesis)}
                                [location.dummy]
                                (is analysis.Analysis)))))))

      ... Translation
      (def my_translation|translation
        Translation
        (translation (_ phase archive [pass_through <synthesis>.any])
          (phase archive pass_through)))

      (def my_translation|synthesis
        Synthesis
        (synthesis (_ phase archive [parameters (<>.some <analysis>.any)])
          (let [! phase.monad]
            (|> parameters
                (monad.each ! (phase archive))
                (of ! each (|>> {synthesis.#Extension (symbol ..my_translation|translation)}
                                [location.dummy]
                                (is synthesis.Synthesis)))))))

      (def my_translation
        Analysis
        (analysis (_ phase archive [parameters (<>.some <code>.any)])
          (let [! phase.monad]
            (|> parameters
                (monad.each ! (phase archive))
                (of ! each (|>> (is (List analysis.Analysis))
                                {analysis.#Extension (symbol ..my_translation|synthesis)}
                                [location.dummy]
                                (is analysis.Analysis)))))))

      (def dummy_translation|translation
        Translation
        (translation (_ phase archive [])
          (let [[_ self] (symbol ..dummy_translation)]
            (of phase.monad in
                (for @.jvm (jvm.string self)
                     @.js (js.string self)
                     @.python (python.unicode self)
                     @.lua (lua.string self)
                     @.ruby (ruby.string self)
                     @.php (php.string self)
                     @.scheme (scheme.string self))))))

      (def dummy_translation|synthesis
        Synthesis
        (synthesis (_ phase archive [])
          (of phase.monad in (is synthesis.Synthesis
                                 [location.dummy {synthesis.#Extension (symbol ..dummy_translation|translation) (list)}]))))

      (def dummy_translation
        Analysis
        (analysis (_ phase archive [])
          (of phase.monad in (is analysis.Analysis
                                 [location.dummy {analysis.#Extension (symbol ..dummy_translation|synthesis) (list)}]))))

      ... Declaration
      (def my_declaration
        Declaration
        (declaration (_ phase archive [expression <code>.any])
          (do [! phase.monad]
            [.let [[_ self] (symbol ..my_declaration)]
             analysis_phase declaration.analysis
             expressionA (<| declaration.of_analysis
                             (type.expecting .Any)
                             (analysis_phase archive expression))

             lux (declaration.of_analysis meta.compiler_state)

             synthesis_phase declaration.synthesis
             expressionS (declaration.of_synthesis
                          (synthesis_phase lux archive expressionA))

             translation_phase declaration.translation
             expressionG (declaration.of_translation
                          (translation_phase lux archive expressionS))
             
             _ (declaration.of_translation
                (translation.with_new_context archive unit.none
                  (do !
                    [[module_id artifact_id] (translation.context archive)
                     .let [commentary (format "Successfully installed declaration " (%.text self) "!")]
                     _ (translation.save! artifact_id {.#None}
                                          (for @.jvm (let [$class (jvm/runtime.class_name [module_id artifact_id])]
                                                       (<| [$class]
                                                           (try.else (binary.empty 0))
                                                           (try#each (binaryF.result class.format))
                                                           (class.class version.v6_0 class.public
                                                             (name.internal $class)
                                                             {.#None}
                                                             (name.internal "java.lang.Object")
                                                             (list)
                                                             (list)
                                                             (list)
                                                             (list))))
                                               @.js (js.comment commentary
                                                      (js.statement (js.string commentary)))
                                               @.python (python.comment commentary
                                                          (python.statement (python.string commentary)))
                                               @.lua (lua.comment commentary
                                                       (lua.statement expressionG))
                                               @.ruby (ruby.comment commentary
                                                        (ruby.statement (ruby.string commentary)))))]
                    (translation.log! commentary))))]
            (in declaration.no_requirements))))

      (..my_declaration (n.* 2 3))
      ))

(def .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [expected random.nat]
        (`` (all _.and
                 (,, (with_template [<macro> <extension>]
                       [(_.coverage [<macro>]
                          (for @.old false
                               (n.= expected
                                    (<extension> expected))))]

                       [/.analysis ..my_analysis]
                       [/.synthesis ..my_synthesis]))
                 (_.coverage [/.translation]
                   (for @.old false
                        (and (n.= expected
                                  (..my_translation expected))
                             (let [[_ expected] (symbol ..dummy_translation)]
                               (text#= expected
                                       (..dummy_translation))))))
                 (_.coverage [/.declaration]
                   true)
                 )))))
