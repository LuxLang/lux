... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [meta
    ["[0]" static]
    ["[0]" code]
    [macro
     ["^" pattern]
     ["[0]" expansion]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public (random module_size short_size)
  (-> Nat Nat
      (Random Symbol))
  (random.and (random.alphabetic module_size)
              (random.alphabetic short_size)))

(the .public (relative module short_size)
  (-> Text Nat
      (Random Symbol))
  (do [! random.monad]
    [relative? random.bit
     short (random.alphabetic short_size)]
    (if relative?
      (do !
        [in_prelude? random.bit]
        (in [(if in_prelude?
               .prelude
               "")
             short]))
      (in [module short]))))

(expansion.let [<yes> (static.random (|>> %.nat code.local)
                                     random.nat)
                <no> (static.random (|>> %.int code.local)
                                    random.int)]
  (these (the <yes>
           Nat
           (static.random_nat))
         
         (the .public test
           Test
           (<| (_.covering /._)
               (do [! random.monad]
                 [ ... First Symbol
                  sizeM1 (|> random.nat (of ! each (n.% 100)))
                  sizeS1 (|> random.nat (of ! each (|>> (n.% 100) (n.max 1))))
                  (^.let symbol1 [module1 short1]) (..random sizeM1 sizeS1)
                  ... Second Symbol
                  sizeM2 (|> random.nat (of ! each (n.% 100)))
                  sizeS2 (|> random.nat (of ! each (|>> (n.% 100) (n.max 1))))
                  (^.let symbol2 [module2 short2]) (..random sizeM2 sizeS2)])
               (_.for [.Symbol])
               (all _.and
                    (_.for [/.equivalence]
                           (equivalenceT.spec /.equivalence (..random sizeM1 sizeS1)))
                    (_.for [/.hash]
                           (|> (random.ascii 1)
                               (of ! each (|>> [""]))
                               (hashT.spec /.hash)))
                    (_.for [/.order]
                           (orderT.spec /.order (..random sizeM1 sizeS1)))
                    (_.for [/.absolute]
                           (formatT.spec /.equivalence /.absolute (..relative module1 sizeS1)))
                    (_.for [/.relative]
                           (formatT.spec /.equivalence (/.relative module1) (..relative module1 sizeS1)))

                    (_.coverage [/.separator]
                      (let [it (of /.absolute injection symbol1)]
                        (if (text.empty? module1)
                          (same? short1 it)
                          (text.contains? /.separator it))))
                    (_.coverage [/.module /.short]
                      (and (same? module1 (/.module symbol1))
                           (same? short1 (/.short symbol1))))
                    (_.coverage [/.of]
                      (expansion.let [<yes>' (static.literal code.symbol
                                                             (let [[module _] (symbol .._)
                                                                   [_ short] (symbol <yes>)]
                                                               [module short]))]
                        (/.= (symbol <yes>') (/.of <yes>'))))
                    (_.coverage [.symbol]
                      (and (/.= [.prelude "yolo"] (.symbol .yolo))
                           (/.= ["test/lux/meta/symbol" "yolo"] (.symbol ..yolo))
                           (/.= ["" "yolo"] (.symbol yolo))
                           (/.= ["library/lux/test" "yolo"] (.symbol library/lux/test.yolo))))
                    )))))
