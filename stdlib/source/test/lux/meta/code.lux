... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except local global)
   [abstract
    [monad (.only do)]
    ["<>" projection]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [error
    ["[0]" try (.only Try)]]
   ["[0]" function]
   [data
    ["[0]" bit]
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)
      ["?[1]" \\projection]]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     [/64
      ["[0]" natural]
      ["[0]" integer]
      ["[0]" revolution]
      ["[0]" decimal]]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [meta
    ["[0]" name]
    ["[0]" provenance]
    ["[0]" static]]
   [compiler
    [language
     [lux
      ["[0]" syntax]]]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" \\projection]
 [\\library
  ["[0]" /]])

(the !expect
  (template.macro (_ <pattern> <value>)
    [(when <value>
       <pattern>
       true
       
       _
       false)]))

(the local
  (Random Text)
  (random.lower_cased 1))

(the global
  (Random Name)
  (all random.and
       (random.lower_cased 1)
       (random.lower_cased 1)
       ))

(the any_name
  (Random Name)
  (all random.either
       (random#each (|>> [""])
                    ..local)
       ..global
       ))

(the \\projection
  Test
  (<| (_.covering \\projection._)
      (_.for [\\projection.Projection])
      (`` (all _.and
               (,, (template.with [<query> <check> <random> <code> <equivalence>]
                     [(do [! random.monad]
                        [expected <random>
                         dummy (|> <random> (random.only (|>> (by <equivalence> = expected) not)))]
                        (all _.and
                             (_.coverage [<query>]
                               (|> <query>
                                   (?list.value (list (<code> expected)))
                                   (!expect (^.multi {try.#Success actual}
                                                     (by <equivalence> = expected actual)))))
                             (_.coverage [<check>]
                               (and (|> (<check> expected)
                                        (?list.value (list (<code> expected)))
                                        (!expect {try.#Success _}))
                                    (|> (<check> expected)
                                        (?list.value (list (<code> dummy)))
                                        (!expect {try.#Failure _}))))
                             ))]

                     [[\\projection.bit \\projection.this_bit random.bit /.bit bit.equivalence]
                      [\\projection.natural \\projection.this_natural random.natural /.natural natural.equivalence]
                      [\\projection.integer \\projection.this_integer random.integer /.integer integer.equivalence]
                      [\\projection.revolution \\projection.this_revolution random.revolution /.revolution revolution.equivalence]
                      [\\projection.decimal \\projection.this_decimal random.unit_decimal /.decimal decimal.equivalence]
                      [\\projection.text \\projection.this_text (random.unicode 1) /.text text.equivalence]
                      [\\projection.local \\projection.this_local ..local /.local text.equivalence]
                      [\\projection.global \\projection.this_global ..global /.name name.equivalence]
                      [\\projection.name \\projection.this_name ..any_name /.name name.equivalence]]))
               (,, (template.with [<query> <code>]
                     [(do [! random.monad]
                        [expected_left random.natural
                         expected_right random.integer]
                        (_.coverage [<query>]
                          (|> (?list.value (list (<code> (list (/.natural expected_left)
                                                               (/.integer expected_right))))
                                           (<query> (<>.and \\projection.natural \\projection.integer)))
                              (!expect (^.multi {try.#Success [actual_left actual_right]}
                                                (and (by natural.equivalence = expected_left actual_left)
                                                     (by integer.equivalence = expected_right actual_right)))))))]

                     [[\\projection.form /.form]
                      [\\projection.variant /.variant]
                      [\\projection.tuple /.tuple]]))
               (do [! random.monad]
                 [expected_local random.natural
                  expected_global random.integer]
                 (_.coverage [\\projection.locally]
                   (|> (?list.value (list (/.integer expected_global))
                                    (<>.and (\\projection.locally (list (/.natural expected_local)) \\projection.natural)
                                            \\projection.integer))
                       (!expect (^.multi {try.#Success [actual_local actual_global]}
                                         (and (by natural.equivalence = expected_local actual_local)
                                              (by integer.equivalence = expected_global actual_global)))))))
               (do [! random.monad]
                 [expected (by ! each /.bit random.bit)]
                 (_.coverage [\\projection.not]
                   (and (|> (?list.value (list expected) (\\projection.not \\projection.natural))
                            (!expect (^.multi {try.#Success actual}
                                              (same? expected actual))))
                        (|> (?list.value (list expected) (\\projection.not \\projection.bit))
                            (!expect {try.#Failure _})))))
               ))))

(the random_text
  (Random Text)
  (random.alphabetic 10))

(the here
  (let [[module proper] (name .._)]
    module))

(the random_name
  (Random Name)
  (random.and (random.either ..random_text
                             (random#pure ..here))
              ..random_text))

(the (random_list random)
  (for_any (_ of)
    (-> (Random of)
        (Random (List of))))
  (do [! random.monad]
    [size (|> random.natural (by ! each (natural.% 3)))]
    (random.list size random)))

(the .public random
  (Random Code)
  (random.rec
   (function (_ random)
     (all random.either
          (random#each /.bit random.bit)
          (random#each /.natural random.natural)
          (random#each /.integer random.integer)
          (random#each /.revolution random.revolution)
          (random#each /.decimal random.unit_decimal)
          (random#each /.text ..random_text)
          (random#each /.name ..random_name)
          (random#each /.form (..random_list random))
          (random#each /.variant (..random_list random))
          (random#each /.tuple (..random_list random))
          ))))

(the (read source_code)
  (-> Text (Try Code))
  (let [parse (syntax.parse source_code
                            ..here
                            syntax.no_aliases)
        start (is Source
                  [provenance.dummy 0 source_code])]
    (when (parse start)
      {.#Left [end error]}
      {try.#Failure error}
      
      {.#Right [end lux_code]}
      {try.#Success lux_code})))

(the (replacement_simulation [original substitute])
  (-> [Code Code] (Random [Code Code]))
  (random.rec
   (function (_ replacement_simulation)
     (let [for_list (is (-> (-> (List Code) Code) (Random [Code Code]))
                        (function (_ to_code)
                          (random.only (|>> product.left (by /.equivalence = original) not)
                                       (do [! random.monad]
                                         [parts (..random_list replacement_simulation)]
                                         (pure [(to_code (list#each product.left parts))
                                                (to_code (list#each product.right parts))])))))]
       (all random.either
            (random#pure [original substitute])
            (do [! random.monad]
              [sample (random.only (|>> (by /.equivalence = original) not)
                                   (all random.either
                                        (random#each /.bit random.bit)
                                        (random#each /.natural random.natural)
                                        (random#each /.integer random.integer)
                                        (random#each /.revolution random.revolution)
                                        (random#each /.decimal random.unit_decimal)
                                        (random#each /.text ..random_text)
                                        (random#each /.name ..random_name)))]
              (pure [sample sample]))
            (for_list /.form)
            (for_list /.variant)
            (for_list /.tuple)
            )))))

(the (for_format format)
  (-> (text.Injection Code)
      Test)
  (`` (all _.and
           (,, (template.with [<coverage> <random> ,tag]
                 [(do [! random.monad]
                    [expected <random>]
                    (_.coverage [<coverage>]
                      (and (when (..read (format (<coverage> expected)))
                             {try.#Success actual}
                             (by /.equivalence =
                                 actual
                                 (<coverage> expected))
                             
                             {try.#Failure error}
                             false)
                           (by /.equivalence =
                               (|> expected [provenance.dummy] {,tag})
                               (<coverage> expected)))))]

                 [[/.bit random.bit .#Bit]
                  [/.natural random.natural .#Natural]
                  [/.integer random.integer .#Integer]
                  [/.revolution random.revolution .#Revolution]
                  [/.decimal random.unit_decimal .#Decimal]
                  [/.text ..random_text .#Text]
                  [/.name ..random_name .#Name]
                  [/.form (..random_list ..random) .#Form]
                  [/.variant (..random_list ..random) .#Variant]
                  [/.tuple (..random_list ..random) .#Tuple]]))
           (,, (template.with [<coverage> <random> <tag>]
                 [(do [! random.monad]
                    [expected <random>]
                    (_.coverage [<coverage>]
                      (and (when (..read (format (<coverage> expected)))
                             {try.#Success actual}
                             (by /.equivalence =
                                 actual
                                 (<coverage> expected))
                             
                             {try.#Failure error}
                             false)
                           (by /.equivalence =
                               {<tag> provenance.dummy ["" expected]}
                               (<coverage> expected)))
                      ))]

                 [[/.local ..random_text .#Name]])))))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (_.for [/.equivalence /.=]
                  (static.when (same? /.equivalence /.=)
                    (equivalenceT.spec /.equivalence ..random)))
           
           (_.for [/.absolute /.as_text]
                  (static.when (same? /.absolute /.as_text)
                    (..for_format /.absolute)))
           (_.for [/.relative]
                  (..for_format (/.relative ..here)))
           
           (do [! random.monad]
             [[original substitute] (random.only (function (_ [original substitute])
                                                   (not (by /.equivalence = original substitute)))
                                                 (random.and ..random ..random))
              [sample expected] (random.only (function (_ [sample expected])
                                               (not (by /.equivalence = sample expected)))
                                             (..replacement_simulation [original substitute]))]
             (_.coverage [/.replaced]
               (by /.equivalence =
                   expected
                   (/.replaced original substitute sample))))

           ..\\projection
           )))
