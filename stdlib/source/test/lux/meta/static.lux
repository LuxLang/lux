... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [math
    ["[0]" random (.use "[1]#[0]" functor)]
    [number
     ["n" nat]
     ["i" int]
     ["r" rev]
     ["f" frac]]]
   ["[0]" meta (.only)
    ["[0]" code]
    [compiler
     ["@" target]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def .public test
  Test
  (<| (_.covering /._)
      (for @.old (_.test "PLACEHOLDER" true))
      (_.for [meta.eval])
      (`` (all _.and
               (,, (with_template [<static> <random> <=> <+> <tag>]
                     [(_.coverage [<static> <random>]
                        (with_expansions [<left> (<random>)
                                          <right> (<random>)
                                          <l+r> (<static> (<+> <left> <right>))]
                          (when (' <l+r>)
                            [_ {<tag> l+r}]
                            (<=> l+r (<+> <left> <right>))

                            _
                            false)))]

                     [/.bit /.random_bit bit#= and .#Bit]
                     [/.nat /.random_nat n.= n.+ .#Nat]
                     [/.int /.random_int i.= i.+ .#Int]
                     [/.rev /.random_rev r.= r.+ .#Rev]
                     ))
               (_.coverage [/.frac /.random_frac]
                 (with_expansions [<left> (/.random_frac)
                                   <right> (/.random_frac)
                                   <l+r> (/.frac (f.+ <left> <right>))]
                   (when (' <l+r>)
                     [_ {.#Frac l+r}]
                     (or (f.= l+r (f.+ <left> <right>))
                         (and (f.not_a_number? l+r)
                              (f.not_a_number? (f.+ <left> <right>))
                              (or (f.not_a_number? <left>)
                                  (f.not_a_number? <right>))))

                     _
                     false)))
               (_.coverage [/.text /.random]
                 (with_expansions [<left> (/.random code.text (random.alpha_numeric 1))
                                   <right> (/.random code.text (random.alpha_numeric 1))
                                   <l+r> (/.text (format <left> <right>))]
                   (when (' <l+r>)
                     [_ {.#Text l+r}]
                     (text#= l+r (format <left> <right>))

                     _
                     false)))
               (_.coverage [/.randoms]
                 (with_expansions [<amount> (/.random code.nat
                                                      (random#each (|>> (n.% 10) ++) random.nat))
                                   l/* (/.randoms code.nat (random.list <amount> random.nat))]
                   (and (n.= <amount> (list.size (list l/*)))
                        (n.= (list#mix n.+ 0 (list l/*))
                             (all n.+ l/*)))))
               (_.coverage [/.literal]
                 (with_expansions [<left> (/.random code.text (random.alpha_numeric 1))
                                   <right> (/.random code.text (random.alpha_numeric 1))
                                   <l+r> (/.literal code.text (format <left> <right>))]
                   (when (' <l+r>)
                     [_ {.#Text l+r}]
                     (text#= l+r (format <left> <right>))

                     _
                     false)))
               (_.coverage [/.literals]
                 (with_expansions [l/0 (/.random_nat)
                                   l/1 (/.random_nat)
                                   l/2 (/.random_nat)
                                   l/* (/.literals code.nat (list l/0 l/1 l/2))]
                   (n.= (all n.+ l/0 l/1 l/2)
                        (all n.+ l/*))))
               (_.coverage [/.if]
                 (with_expansions [<?> (/.random_bit)
                                   <then> (/.random_nat)
                                   <else> (/.random_nat)]
                   (n.= (if <?> <then> <else>)
                        (/.if <?> <then> <else>))))
               (_.coverage [/.cond]
                 (with_expansions [<?> (/.random_bit)
                                   <then> (/.random_nat)
                                   <else> (/.random_nat)
                                   <never> (/.random_frac)]
                   (n.= (if <?> <then> <else>)
                        (/.cond <?> <then>
                                (not <?>) <else>
                                ... never
                                <never>))))
               (_.coverage [/.when]
                 (with_expansions [<0> (/.random_nat)
                                   <1> (/.random_nat)
                                   <2> (/.random_nat)]
                   (and (n.= (all n.+ <0> <1>)
                             (`` (all n.+ <0> <1> (,, (/.when false <2>)))))
                        (n.= (all n.+ <0> <1> <2>)
                             (`` (all n.+ <0> <1> (,, (/.when true <2>))))))))
               (_.coverage [/.seed]
                 (not (n.= (/.seed)
                           (/.seed))))
               ))))
