(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    [\\specification
     ["$[0]" monad]]]
   [control
    ["[0]" pipe]
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]
     ["i" int]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    [meta
     ["[0]" archive]]]]])

(def (injection value)
  (All (_ s) (Injection (/.Operation s)))
  (function (_ state)
    {try.#Success [state value]}))

(def (comparison init)
  (All (_ s) (-> s (Comparison (/.Operation s))))
  (function (_ == left right)
    (when [(/.result init left)
           (/.result init right)]
      [{try.#Success left}
       {try.#Success right}]
      (== left right)

      _
      false)))

(exception.def oops)

(def test|error
  Test
  (do [! random.monad]
    [state random.nat
     expected random.int
     expected_error (random.lower_cased 1)]
    (all _.and
         (_.coverage [/.failure]
           (|> (/.failure expected_error)
               (/.result state)
               (pipe.when {try.#Failure actual_error}
                 (same? expected_error actual_error)

                 _
                 false)))
         (_.coverage [/.of_try]
           (and (|> (/.of_try {try.#Failure expected_error})
                    (/.result state)
                    (pipe.when {try.#Failure actual_error}
                      (same? expected_error actual_error)

                      _
                      false))
                (|> (/.of_try {try.#Success expected})
                    (of /.functor each (same? expected))
                    (/.result state)
                    (try.else false))))
         (_.coverage [/.except]
           (|> (/.except ..oops [])
               (/.result state)
               (pipe.when {try.#Failure error}
                 (exception.match? ..oops error)

                 _
                 false)))
         (_.coverage [/.assertion]
           (and (|> (/.assertion ..oops [] false)
                    (/.result state)
                    (pipe.when {try.#Failure error}
                      (exception.match? ..oops error)

                      _
                      false))
                (|> (/.assertion ..oops [] true)
                    (/.result state)
                    (pipe.when {try.#Success _}
                      true

                      _
                      false))))
         )))

(def test|state
  Test
  (do [! random.monad]
    [state random.nat
     dummy random.nat
     expected random.int]
    (all _.and
         (_.coverage [/.state]
           (|> /.state
               (of /.functor each (same? state))
               (/.result state)
               (try.else false)))
         (_.coverage [/.with]
           (|> (do /.monad
                 [_ (/.with state)]
                 /.state)
               (of /.functor each (same? state))
               (/.result dummy)
               (try.else false)))
         (_.coverage [/.sub]
           (|> (/.sub [(of n.hex encoded)
                       (function (_ new old)
                         (|> new (of n.hex decoded) (try.else dummy)))]
                      (do /.monad
                        [state/hex /.state]
                        (in (|> state
                                (of n.hex encoded)
                                (text#= state/hex)))))
               (/.result' state)
               (pipe.when {try.#Success [state' verdict]}
                 (and verdict
                      (n.= state state'))

                 _
                 false)))
         )))

(def test|operation
  Test
  (do [! random.monad]
    [state random.nat
     expected random.int]
    (all _.and
         (_.for [/.functor]
                (functorT.spec ..injection (..comparison state) /.functor))
         (_.for [/.monad]
                ($monad.spec ..injection (..comparison state) /.monad))

         (_.coverage [/.result]
           (|> (of /.monad in expected)
               (/.result state)
               (pipe.when {try.#Success actual}
                 (same? expected actual)

                 _
                 false)))
         (_.coverage [/.result']
           (|> (of /.monad in expected)
               (/.result' state)
               (pipe.when {try.#Success [state' actual]}
                 (and (same? state state')
                      (same? expected actual))

                 _
                 false)))
         ..test|state
         ..test|error
         )))

(def test|phase
  Test
  (do [! random.monad]
    [state/0 random.nat
     state/1 random.rev
     expected random.int]
    (all _.and
         (_.coverage [/.identity]
           (|> (/.identity archive.empty expected)
               (/.result state/0)
               (try#each (same? expected))
               (try.else false)))
         (_.coverage [/.composite]
           (let [phase (/.composite (is (/.Phase Nat Int Frac)
                                        (function (_ archive input)
                                          (of /.monad in (i.frac input))))
                                    (is (/.Phase Rev Frac Text)
                                        (function (_ archive input)
                                          (of /.monad in (%.frac input)))))]
             (|> (phase archive.empty expected)
                 (/.result' [state/0 state/1])
                 (pipe.when {try.#Success [[state/0' state/1'] actual]}
                   (and (text#= (%.frac (i.frac expected)) actual)
                        (same? state/0 state/0')
                        (same? state/1 state/1'))

                   _
                   false))))
         )))

(def .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (_.for [/.Operation]
                  ..test|operation)
           (_.for [/.Phase]
                  ..test|phase)
           )))
