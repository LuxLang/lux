(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def .public random
  (Random /.Version)
  random.nat)

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Version])
      (do [! random.monad]
        [this ..random
         that ..random]
        (`` (all _.and
                 (_.coverage [/.format]
                   (bit#= (nat.= this that)
                          (text#= (/.format this) (/.format that))))
                 (,, (with_template [<level>]
                       [(_.coverage [<level>]
                          (text.contains? (%.nat (<level> this))
                                          (/.format this)))]

                       [/.patch]
                       [/.minor]
                       [/.major]))
                 )))))
