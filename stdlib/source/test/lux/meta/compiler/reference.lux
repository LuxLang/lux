... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\injection]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [meta
    ["[0]" symbol (.use "[1]#[0]" equivalence)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" variable]]]
 ["[0]" /
  ["[1][0]" register]
  ["[1][0]" variable]])

(the constant
  (Random /.Constant)
  (all random.and
       (random.upper_cased 5)
       (random.lower_cased 5)
       ))

(the .public random
  (Random /.Reference)
  (all random.or
       /variable.random
       ..constant
       ))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Reference
              /.#Constant /.#Variable

              /.Constant])
      (do random.monad
        [expected_register random.nat
         expected_constant ..constant])
      (`` (all _.and
               (_.for [/.equivalence]
                      (equivalenceT.spec /.equivalence ..random))
               (_.for [/.hash]
                      (hashT.spec /.hash ..random))

               (,, (with_template [<tag>]
                     [(_.coverage [<tag>]
                        (when (<tag> expected_register)
                          (<tag> actual_register)
                          (n.= expected_register actual_register)

                          _
                          false))]

                     [/.local]
                     [/.foreign]
                     ))

               (_.coverage [/.variable /.self]
                 (and (of /.equivalence = (/.self) (/.variable (variable.self)))
                      (when (/.self)
                        (/.self)
                        true
                        
                        _
                        false)
                      (when (/.variable (variable.self))
                        (/.self)
                        true
                        
                        _
                        false)))
               (_.coverage [/.constant]
                 (when (/.constant expected_constant)
                   (/.constant actual_constant)
                   (symbol#= expected_constant actual_constant)

                   _
                   false))
               (_.coverage [/.format]
                 (and (text#= (/.format (/.local expected_register))
                              (variable.format {variable.#Local expected_register}))
                      (text#= (/.format (/.foreign expected_register))
                              (variable.format {variable.#Foreign expected_register}))
                      (text#= (/.format (/.constant expected_constant))
                              (%.symbol expected_constant))))
               
               /register.test
               /variable.test
               ))))
