(.require
 [library
  [lux (.except Type)
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random (.only Random)]]
   [meta
    [target
     [jvm
      ["[0]" type (.only Type) (.use "[1]#[0]" equivalence)
       [category (.only Primitive Array Class)]]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [])
      (all _.and
           (_.coverage [/.frac /.text]
             (not (type#= /.frac /.text)))
           (_.coverage [/.value /.error]
             (not (type#= /.value /.error)))
           (_.coverage [/.lefts]
             (exec
               (is (Type Primitive)
                   /.lefts)
               true))
           (_.coverage [/.right?]
             (exec
               (is (Type Class)
                   /.right?)
               true))
           (_.coverage [/.variant /.tuple]
             (type#= /.variant /.tuple))
           (_.coverage [/.stack]
             (exec
               (is (Type Array)
                   /.stack)
               true))
           )))
