... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io]
    ["[0]" try]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" i64 (.use "[1]#[0]" equivalence)]]]
   [meta
    ["[0]" location]
    [macro
     ["[0]" template]]
    [compiler
     [language
      [lux
       ["[0]" synthesis]]]
     [meta
      ["[0]" archive]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" // (.only)
    ["[0]" host]
    ["[0]" runtime]
    [///
     ["[0]" extension]
     [//
      ["[0]" phase]
      ["[0]" translation]]]]]])

(every Variant/3
  (Or Bit (I64 Any) Text))

(every Tuple/3
  (And Bit (I64 Any) Text))

(the .public lux
  Lux
  [.#info            [.#target ""
                      .#version ""
                      .#mode {.#Build}
                      .#configuration (list)]
   .#source          [location.dummy 0 ""]
   .#location        location.dummy
   .#current_module  {.#None}
   .#modules         (list)
   .#scopes          (list)
   .#type_context    [.#ex_counter 0
                      .#var_counter 0
                      .#var_bindings (list)]
   .#expected        {.#None}
   .#seed            0
   .#scope_type_vars (list)
   .#extensions      []
   .#eval            (as (-> Type Code (Meta Any)) [])
   .#host            []])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [module (random.lower_cased 1)

         expected_bit random.bit
         expected_i64 random.i64
         expected_text (random.upper_cased 2)

         .let [extender (is extension.Extender
                            (function (_ _)
                              (undefined)))
               phase (//.translate extender ..lux)]])
      (all _.and
           (_.coverage [/.variant]
             (`` (and (,, (template.with [<lefts> <right?> <synthesis> <expected> <=>]
                            [(|> (do try.monad
                                   [.let [[_ host] (io.value host.host)
                                          state (is runtime.State
                                                    (translation.state host module))]]
                                   (<| (phase.value state)
                                       (do phase.monad
                                         [_ (translation.set_buffer translation.empty_buffer)
                                          _ runtime.translation
                                          it (/.variant phase archive.empty
                                                        [<lefts> <right?> (<synthesis> location.dummy <expected>)])]
                                         (in (when (of host evaluate [{.#None} it])
                                               {try.#Success actual}
                                               (when (as Variant/3 actual)
                                                 {<lefts> <right?> actual}
                                                 (<=> <expected> actual)

                                                 _
                                                 false)
                                               
                                               {try.#Failure error}
                                               false)))))
                                 (try.else false))]

                            [0 #0 synthesis.bit expected_bit bit#=]
                            [1 #0 synthesis.i64 expected_i64 i64#=]
                            [1 #1 synthesis.text expected_text text#=]
                            )))))
           (_.coverage [/.tuple]
             (|> (do try.monad
                   [.let [[_ host] (io.value host.host)
                          state (is runtime.State
                                    (translation.state host module))]]
                   (<| (phase.value state)
                       (do phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          it (/.tuple phase archive.empty
                                      (list (synthesis.bit location.dummy expected_bit)
                                            (synthesis.i64 location.dummy expected_i64)
                                            (synthesis.text location.dummy expected_text)))]
                         (in (when (of host evaluate [{.#None} it])
                               {try.#Success actual}
                               (let [[actual_bit actual_i64 actual_text] (as Tuple/3 actual)]
                                 (and (bit#= expected_bit actual_bit)
                                      (i64#= expected_i64 actual_i64)
                                      (text#= expected_text actual_text)))
                               
                               {try.#Failure error}
                               false)))))
                 (try.else false)))
           )))
