... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" function]
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\format]]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [meta
    ["[0]" code]
    ["[0]" macro]
    ["[0]" symbol
     ["$[1]" \\test]]
    ["[0]" type (.use "[1]#[0]" equivalence)
     ["$[1]" \\test]
     ["[0]" check]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.only)
    [//
     ["[1][0]" extension (.only)
      ["[1]/[0]" analysis
       ["[1]" lux]]]
     [//
      ["[1][0]" analysis (.only Analysis)
       [evaluation (.only Eval)]
       ["[2][0]" macro]
       ["[2][0]" module]
       ["[2][0]" type (.only)
        ["$[1]" \\test]]
       ["[2][0]" inference
        ["$[1]" \\test]]]
      [///
       ["[1][0]" phase (.use "[1]#[0]" monad)]
       [meta
        ["[0]" archive]]]]]]]])

(the (eval archive type term)
  Eval
  (//phase#in []))

(the (expander macro inputs state)
  //macro.Expander
  {try.#Success ((macro.function macro) inputs state)})

(the analysis
  //analysis.Phase
  (//.phase ..expander))

(the test|function
  Test
  (do [! random.monad]
    [lux $//type.random_state
     .let [state [//extension.#bundle (//extension/analysis.bundle ..eval)
                  //extension.#state lux]]
     input/0 ($type.random 0)
     input/1 ($type.random 0)
     function/0 (random.lower_cased 1)
     function/1 (random.lower_cased 2)
     argument/0 (random.lower_cased 3)
     argument/1 (random.lower_cased 4)
     module/0 (random.lower_cased 5)
     [output/0 term/0] $//inference.simple_parameter
     [output/1 term/1] (random.only (|>> product.left (same? output/0) not)
                                    $//inference.simple_parameter)
     name/0 ($symbol.random 1 1)
     .let [$function/0 (code.local function/0)
           $function/1 (code.local function/1)
           $argument/0 (code.local argument/0)
           $argument/1 (code.local argument/1)]]
    (all _.and
         ... (_.coverage [/.function]
         ...   (let [function?' (is (-> Type Code (-> [(List Analysis) Analysis] Bit) Bit)
         ...                        (function (_ function_type output_term ?)
         ...                          (|> (do //phase.monad
         ...                                [analysis (|> (/.function ..analysis function/0 argument/0 archive.empty
         ...                                                output_term)
         ...                                              (//type.expecting function_type))]
         ...                                (in (when analysis
         ...                                      {//analysis.#Function it}
         ...                                      (? it)

         ...                                      _
         ...                                      false)))
         ...                              (//module.with 0 module/0)
         ...                              (//phase#each product.right)
         ...                              (//phase.value state)
         ...                              (try.else false))))
         ...         function? (is (-> Type Code Bit)
         ...                       (function (_ function_type output_term)
         ...                         (function?' function_type output_term (function.constant true))))
         ...         inferring? (is (-> Type Code Bit)
         ...                        (function (_ :expected: term)
         ...                          (|> (do //phase.monad
         ...                                [[:actual: analysis] (|> (/.function ..analysis function/0 argument/0 archive.empty
         ...                                                           term)
         ...                                                         //type.inferring)]
         ...                                (in (when analysis
         ...                                      {//analysis.#Function [actual_env actual_body]}
         ...                                      (type#= :expected: :actual:)

         ...                                      _
         ...                                      false)))
         ...                              (//module.with 0 module/0)
         ...                              (//phase#each product.right)
         ...                              (//phase.value state)
         ...                              (try.else false))))]
         ...     (and (function? (-> input/0 output/0) term/0)
         ...          (function? (-> input/0 input/0) $argument/0)

         ...          (function? {.#Named name/0 (-> input/0 output/0)} term/0)
         
         ...          (function? (All (_ a) (-> a a)) $argument/0)
         ...          (function? (Ex (_ a) (-> a a)) $argument/0)
         ...          (function? (Ex (_ a) (-> input/0 a)) term/0)
         ...          (function? (Ex (_ a) (-> a a)) term/0)
         ...          (function? (Rec self (-> input/0 self)) $function/0)

         ...          (function? (type ((All (_ a) (-> a a)) output/0)) term/0)
         ...          (not (function? (type ((All (_ a) (-> a a)) output/1)) term/0))

         ...          (function? (type ((Ex (_ a) (-> a a)) output/0)) term/0)
         ...          (not (function? (type ((Ex (_ a) (-> a a)) output/1)) term/0))

         ...          (function?' (-> input/0 input/1 input/0) (` ([(, $function/1) (, $argument/1)] (, $argument/0)))
         ...                      (function (_ [outer body])
         ...                        (and (list.empty? outer)
         ...                             (when body
         ...                               {//analysis.#Function [inner body]}
         ...                               (n.= 1 (list.size inner))

         ...                               _
         ...                               false))))
         ...          (function?' (-> input/0 input/1 input/1) (` ([(, $function/1) (, $argument/1)] (, $argument/1)))
         ...                      (function (_ [outer body])
         ...                        (and (list.empty? outer)
         ...                             (when body
         ...                               {//analysis.#Function [inner body]}
         ...                               (n.= 0 (list.size inner))

         ...                               _
         ...                               false))))

         ...          (|> (do //phase.monad
         ...                [[@var :var:] (//type.check check.var)
         ...                 _ (//type.check (check.check :var: (-> input/0 output/0)))
         ...                 analysis (|> (/.function ..analysis function/0 argument/0 archive.empty
         ...                                term/0)
         ...                              (//type.expecting :var:))]
         ...                (in (when analysis
         ...                      {//analysis.#Function [actual_env actual_body]}
         ...                      true

         ...                      _
         ...                      false)))
         ...              (//module.with 0 module/0)
         ...              (//phase#each product.right)
         ...              (//phase.value state)
         ...              (try.else false))
         
         ...          (inferring? (All (_ a) (-> a output/0)) term/0)
         ...          (inferring? (All (_ a) (-> a a)) $argument/0)
         ...          (inferring? (All (_ @0) (-> @0 @0 (And .Bit @0)))
         ...                      (` ([(, $function/1) (, $argument/1)]
         ...                          [(.is?# (, $argument/0) (, $argument/1))
         ...                           (, $argument/1)]))))))
         (_.coverage [/.cannot_analyse]
           (|> (do //phase.monad
                 [analysis (|> (/.function ..analysis function/0 argument/0 archive.empty
                                 term/1)
                               (//type.expecting (-> input/0 output/0)))]
                 (in (when analysis
                       {//analysis.#Function [actual_env actual_body]}
                       true

                       _
                       false)))
               (//module.with 0 module/0)
               (//phase#each product.right)
               (//phase.value state)
               (exception.otherwise (text.contains? (its exception.#label /.cannot_analyse)))))
         )))

(the test|apply
  Test
  (do [! random.monad]
    [lux $//type.random_state
     .let [state [//extension.#bundle (//extension/analysis.bundle ..eval)
                  //extension.#state lux]]
     [input/0 term/0] $//inference.simple_parameter
     [input/1 term/1] (random.only (|>> product.left (same? input/0) not)
                                   $//inference.simple_parameter)
     output/0 ($type.random 0)
     module/0 (random.lower_cased 1)]
    (all _.and
         ... (_.coverage [/.apply]
         ...   (let [reification? (is (-> Type (List Code) Type Bit)
         ...                          (function (_ :abstraction: terms :expected:)
         ...                            (|> (do //phase.monad
         ...                                  [[:actual: analysis] (|> (/.apply ..analysis terms
         ...                                                                    :abstraction:
         ...                                                                    (//analysis.unit)
         ...                                                                    archive.empty
         ...                                                                    (' []))
         ...                                                           //type.inferring)]
         ...                                  (in (and (check.subsumed? :expected: :actual:)
         ...                                           (when analysis
         ...                                             {//analysis.#Apply _}
         ...                                             true

         ...                                             _
         ...                                             false))))
         ...                                (//module.with 0 module/0)
         ...                                (//phase#each product.right)
         ...                                (//phase.value state)
         ...                                (try.else false))))]
         ...     (and (reification? (-> input/0 input/1 output/0) (list term/0 term/1) output/0)
         ...          (reification? (-> input/0 input/1 output/0) (list term/0) (-> input/1 output/0))
         ...          (reification? (All (_ a) (-> a a)) (list term/0) input/0)
         ...          (reification? (All (_ a) (-> a a a)) (list term/0) (-> input/0 input/0))
         ...          (reification? (All (_ a) (-> input/0 a)) (list term/0) .Nothing)
         ...          (reification? (All (_ a b) (-> a b a)) (list term/0) (All (_ b) (-> b input/0)))
         ...          (reification? (Ex (_ a) (-> a input/0)) (list (` (.error# ""))) input/0)
         ...          (reification? (Ex (_ a) (-> input/0 a)) (list term/0) .Any))))
         (_.coverage [/.cannot_apply]
           (|> (do //phase.monad
                 [_ (|> (/.apply ..analysis (list term/1 term/0)
                                 (-> input/0 input/1 output/0)
                                 (//analysis.unit)
                                 archive.empty
                                 (' []))
                        (//type.expecting output/0))]
                 (in false))
               (//module.with 0 module/0)
               (//phase#each product.right)
               (//phase.value state)
               (exception.otherwise (text.contains? (its exception.#label /.cannot_apply)))))
         )))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           ..test|function
           ..test|apply
           )))
