... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" maybe (.use "[1]#[0]" functor)]
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [meta
    ["[0]" type
     ["$[1]" \\test]]
    [macro
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.only)
    [//
     [phase
      ["[1][0]" extension]]
     [///
      ["[1][0]" phase (.use "[1]#[0]" monad)]
      [reference
       ["[1][0]" variable (.only Register Variable)]]]]]]]
 ["$[0]" //
  ["[1][0]" type]])

(template.with [<name> <tag>]
  [(the (<name> expected_type expected_register [actual_type actual_var])
     (-> Type Register [Type Variable] Bit)
     (and (same? expected_type actual_type)
          (when actual_var
            {<tag> actual_register}
            (n.= expected_register actual_register)
            
            _
            false)))]

  [local? //variable.#Local]
  [foreign? //variable.#Foreign]
  )

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [lux $//type.random_state
         .let [state [//extension.#bundle //extension.empty
                      //extension.#state lux]]
         name/0 (random.lower_cased 1)
         name/1 (random.lower_cased 2)
         type/0 ($type.random 0)
         type/1 ($type.random 0)]
        (all _.and
             (_.coverage [/.variable]
               (|> (/.variable name/0)
                   /.with
                   (//phase.value state)
                   (try#each (|>> product.right
                                  (pipe.when
                                    {.#None} true
                                    {.#Some _} false)))
                   (try.else false)))
             (_.coverage [/.with_local]
               (|> (/.with_local [name/0 type/0]
                     (/.variable name/0))
                   /.with
                   (//phase.value state)
                   (try#each (|>> product.right
                                  (maybe#each (..local? type/0 0))
                                  (maybe.else false)))
                   (try.else false)))
             (_.coverage [/.next]
               (|> (<| (do [! //phase.monad]
                         [register/0 /.next])
                       (/.with_local [name/0 type/0])
                       (do !
                         [var/0 (/.variable name/0)])
                       (do !
                         [register/1 /.next])
                       (/.with_local [name/1 type/1])
                       (do !
                         [var/1 (/.variable name/1)])
                       (in (do maybe.monad
                             [var/0 var/0
                              var/1 var/1]
                             (in [[register/0 var/0] [register/1 var/1]]))))
                   /.with
                   (//phase.value state)
                   (try#each (|>> product.right
                                  (maybe#each (function (_ [[register/0 var/0] [register/1 var/1]])
                                                (and (..local? type/0 register/0 var/0)
                                                     (..local? type/1 register/1 var/1))))
                                  (maybe.else false)))
                   (try.else false)))
             (_.coverage [/.no_scope]
               (and (|> (/.with_local [name/0 type/0]
                          (//phase#in false))
                        (//phase.value state)
                        (exception.else (exception.is? /.no_scope)))
                    (|> (do //phase.monad
                          [_ /.next]
                          (in false))
                        (//phase.value state)
                        (exception.else (exception.is? /.no_scope)))))
             (_.coverage [/.reset]
               (and (|> /.next
                        (/.with_local [name/0 type/0])
                        /.with
                        (//phase.value state)
                        (try#each (|>> product.right
                                       (n.= 1)))
                        (try.else false))
                    (|> /.next
                        /.reset
                        (/.with_local [name/0 type/0])
                        /.with
                        (//phase.value state)
                        (try#each (|>> product.right
                                       (n.= 0)))
                        (try.else false))))
             (_.coverage [/.drained]
               (|> (function (_ [bundle state])
                     {try.#Success [[bundle (has .#scopes (list) state)]
                                    false]})
                   (/.with_local [name/0 type/0])
                   /.with
                   (//phase#each product.right)
                   (//phase.value state)
                   (exception.else (exception.is? /.drained))))
             (_.coverage [/.with]
               (|> (<| /.with
                       (/.with_local [name/0 type/0])
                       (do //phase.monad
                         [var/0' (/.variable name/0)
                          [scope/1 var/0''] (/.with (/.variable name/0))]
                         (<| //phase.of_try
                             (try.of_maybe "")
                             (do maybe.monad
                               [var/0' var/0'
                                var/0'' var/0'']
                               (in [var/0' scope/1 var/0''])))))
                   (//phase.value state)
                   (try#each (function (_ [scope/0 var/0' scope/1 var/0''])
                               (and (local? type/0 0 var/0')
                                    (n.= 0 (list.size (its [.#locals .#mappings] scope/0)))
                                    (n.= 0 (list.size (its [.#captured .#mappings] scope/0)))

                                    (foreign? type/0 0 var/0'')
                                    (n.= 0 (list.size (its [.#locals .#mappings] scope/1)))
                                    (n.= 1 (list.size (its [.#captured .#mappings] scope/1))))))
                   (try.else false)))
             (_.coverage [/.environment]
               (let [(open "list#[0]") (list.equivalence //variable.equivalence)]
                 (and (|> (<| /.with
                              (/.with_local [name/0 type/0])
                              (/.with_local [name/1 type/1])
                              (do //phase.monad
                                [[scope/1 _] (/.with (in []))]
                                (in (/.environment scope/1))))
                          (//phase.value state)
                          (try#each (|>> product.right
                                         (list#= (list))))
                          (try.else false))
                      (|> (<| /.with
                              (do [! //phase.monad]
                                [register/0 /.next])
                              (/.with_local [name/0 type/0])
                              (/.with_local [name/1 type/1])
                              (do !
                                [[scope/1 _] (/.with (/.variable name/0))]
                                (in [register/0 (/.environment scope/1)])))
                          (//phase.value state)
                          (try#each (function (_ [_ [register/0 environment]])
                                      (list#= (list {//variable.#Local register/0})
                                              environment)))
                          (try.else false))
                      (|> (<| /.with
                              (do [! //phase.monad]
                                [register/0 /.next])
                              (/.with_local [name/0 type/0])
                              (do [! //phase.monad]
                                [register/1 /.next])
                              (/.with_local [name/1 type/1])
                              (do [! //phase.monad]
                                [[scope/1 _] (/.with (do !
                                                       [_ (/.variable name/1)
                                                        _ (/.variable name/0)]
                                                       (in [])))]
                                (in [register/0 register/1 (/.environment scope/1)])))
                          (//phase.value state)
                          (try#each (function (_ [_ [register/0 register/1 environment]])
                                      (list#= (list {//variable.#Local register/1}
                                                    {//variable.#Local register/0})
                                              environment)))
                          (try.else false)))))
             ))))
