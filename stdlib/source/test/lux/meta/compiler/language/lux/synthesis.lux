... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" bit]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]
     ["[0]" i64]
     ["[0]" dec]]]
   [meta
    ["[0]" symbol]
    [macro
     ["^" pattern]
     ["[0]" template]]
    [compiler
     [reference (.only)
      ["[0]" variable (.only Variable)]]
     [language
      [lux
       [analysis (.only Environment)]
       ["[0]" synthesis (.only Synthesis)]]]]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" \\projection]
 ["[0]" /
  ["[1][0]" simple]
  ["[1][0]" access]])

(the !expect
  (template.macro (_ <pattern> <value>)
    [(when <value>
       <pattern>
       true
       
       _
       false)]))

(the random_constant
  (Random Symbol)
  (random.and (random.unicode 1)
              (random.unicode 1)))

(the random_variable
  (Random Variable)
  (random.or random.nat
             random.nat))

(the random_environment
  (Random (Environment Synthesis))
  (do [! random.monad]
    [size (of ! each (n.% 5) random.nat)]
    (|> ..random_variable
        (of ! each (|>> synthesis.variable))
        (random.list size))))

(the simple
  Test
  (`` (all _.and
           (,, (template.with [<query> <check> <random> <synthesis> <equivalence>]
                 [(do [! random.monad]
                    [expected <random>
                     dummy (|> <random> (random.only (|>> (of <equivalence> = expected) not)))]
                    (all _.and
                         (_.coverage [<query>]
                           (|> (\\projection.value <query> (list (<synthesis> expected)))
                               (!expect (^.multi {try.#Success actual}
                                                 (of <equivalence> = expected actual)))))
                         (_.coverage [<check>]
                           (and (|> (\\projection.value (<check> expected) (list (<synthesis> expected)))
                                    (!expect {try.#Success _}))
                                (|> (\\projection.value (<check> expected) (list (<synthesis> dummy)))
                                    (!expect (^.multi {try.#Failure error}
                                                      (exception.is? \\projection.cannot_parse error))))))
                         ))]

                 [\\projection.bit \\projection.this_bit random.bit synthesis.bit bit.equivalence]
                 [\\projection.i64 \\projection.this_i64 random.i64 synthesis.i64 i64.equivalence]
                 [\\projection.f64 \\projection.this_f64 random.safe_dec synthesis.f64 dec.equivalence]
                 [\\projection.text \\projection.this_text (random.unicode 1) synthesis.text text.equivalence]
                 [\\projection.local \\projection.this_local random.nat synthesis.local n.equivalence]
                 [\\projection.foreign \\projection.this_foreign random.nat synthesis.foreign n.equivalence]
                 [\\projection.constant \\projection.this_constant ..random_constant synthesis.constant symbol.equivalence]
                 ))
           )))

(the complex
  Test
  (all _.and
       (do [! random.monad]
         [expected_bit random.bit
          expected_i64 random.i64
          expected_f64 random.safe_dec
          expected_text (random.unicode 1)]
         (_.coverage [\\projection.tuple]
           (and (|> (\\projection.value (\\projection.tuple (all <>.and \\projection.bit \\projection.i64 \\projection.f64 \\projection.text))
                                        (list (synthesis.tuple (list (synthesis.bit expected_bit)
                                                                     (synthesis.i64 expected_i64)
                                                                     (synthesis.f64 expected_f64)
                                                                     (synthesis.text expected_text)))))
                    (!expect (^.multi {try.#Success [actual_bit actual_i64 actual_f64 actual_text]}
                                      (and (of bit.equivalence = expected_bit actual_bit)
                                           (of i64.equivalence = expected_i64 actual_i64)
                                           (of dec.equivalence = expected_f64 actual_f64)
                                           (of text.equivalence = expected_text actual_text)))))
                (|> (\\projection.value (\\projection.tuple (all <>.and \\projection.bit \\projection.i64 \\projection.f64 \\projection.text))
                                        (list (synthesis.text expected_text)))
                    (!expect (^.multi {try.#Failure error}
                                      (exception.is? \\projection.cannot_parse error)))))))
       (do [! random.monad]
         [arity random.nat
          expected_environment ..random_environment
          expected_body (random.unicode 1)]
         (_.coverage [\\projection.function]
           (and (|> (\\projection.value (\\projection.function arity \\projection.text)
                                        (list (synthesis.abstraction [expected_environment arity (synthesis.text expected_body)])))
                    (!expect (^.multi {try.#Success [actual_environment actual_body]}
                                      (and (of (list.equivalence synthesis.equivalence) =
                                               expected_environment
                                               actual_environment)
                                           (of text.equivalence = expected_body actual_body)))))
                (|> (\\projection.value (\\projection.function arity \\projection.text)
                                        (list (synthesis.text expected_body)))
                    (!expect (^.multi {try.#Failure error}
                                      (exception.is? \\projection.cannot_parse error)))))))
       (do [! random.monad]
         [arity random.nat
          expected_environment ..random_environment
          expected_body (random.unicode 1)]
         (_.coverage [\\projection.wrong_arity]
           (|> (\\projection.value (\\projection.function (++ arity) \\projection.text)
                                   (list (synthesis.abstraction [expected_environment arity (synthesis.text expected_body)])))
               (!expect (^.multi {try.#Failure error}
                                 (exception.is? \\projection.wrong_arity error))))))
       (do [! random.monad]
         [arity (of ! each (|>> (n.% 10) ++) random.nat)
          expected_offset random.nat
          expected_inits (random.list arity random.bit)
          expected_body (random.unicode 1)]
         (_.coverage [\\projection.loop]
           (and (|> (\\projection.value (\\projection.loop (<>.many \\projection.bit) \\projection.text)
                                        (list (synthesis.scope [expected_offset
                                                                (list#each (|>> synthesis.bit) expected_inits)
                                                                (synthesis.text expected_body)])))
                    (!expect (^.multi {try.#Success [actual_offset actual_inits actual_body]}
                                      (and (of n.equivalence = expected_offset actual_offset)
                                           (of (list.equivalence bit.equivalence) =
                                               expected_inits
                                               actual_inits)
                                           (of text.equivalence = expected_body actual_body)))))
                (|> (\\projection.value (\\projection.loop (<>.many \\projection.bit) \\projection.text)
                                        (list (synthesis.text expected_body)))
                    (!expect (^.multi {try.#Failure error}
                                      (exception.is? \\projection.cannot_parse error)))))))
       ))

(the \\projection
  Test
  (<| (_.covering \\projection._)
      (_.for [\\projection.Projection])
      (all _.and
           (do [! random.monad]
             [expected (of ! each (|>> synthesis.i64) random.i64)]
             (_.coverage [\\projection.value \\projection.any]
               (|> (\\projection.value \\projection.any (list expected))
                   (!expect (^.multi {try.#Success actual}
                                     (of synthesis.equivalence = expected actual))))))
           (_.coverage [\\projection.empty_input]
             (|> (\\projection.value \\projection.any (list))
                 (!expect (^.multi {try.#Failure error}
                                   (exception.is? \\projection.empty_input error)))))
           (do [! random.monad]
             [expected (of ! each (|>> synthesis.i64) random.i64)]
             (_.coverage [\\projection.unconsumed_input]
               (|> (\\projection.value \\projection.any (list expected expected))
                   (!expect (^.multi {try.#Failure error}
                                     (exception.is? \\projection.unconsumed_input error))))))
           (do [! random.monad]
             [dummy (of ! each (|>> synthesis.i64) random.i64)]
             (_.coverage [\\projection.end \\projection.expected_empty_input]
               (and (|> (\\projection.value \\projection.end (list))
                        (!expect {try.#Success _}))
                    (|> (\\projection.value \\projection.end (list dummy))
                        (!expect (^.multi {try.#Failure error}
                                          (exception.is? \\projection.expected_empty_input error)))))))
           (do [! random.monad]
             [dummy (of ! each (|>> synthesis.i64) random.i64)]
             (_.coverage [\\projection.end?]
               (and (|> (\\projection.value \\projection.end? (list))
                        (!expect {try.#Success .true}))
                    (|> (\\projection.value (<>.before \\projection.any \\projection.end?) (list dummy))
                        (!expect {try.#Success .false})))))
           (_.for [\\projection.cannot_parse]
                  (all _.and
                       ..simple
                       ..complex
                       ))
           )))

(the .public test
  Test
  (all _.and
       ..\\projection

       /simple.test
       /access.test
       ))
