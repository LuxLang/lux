... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]]
   [data
    ["[0]" text]
    [collection
     ["[0]" stack]
     ["[0]" sequence]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" phase]
    [///
     [meta
      [archive
       ["[0]" registry]]]]]]]
 ["[0]" /
  ["[1][0]" script]])

(the dummy_host
  (/.Host Any Any)
  (implementation
   (the (evaluate _)
     {try.#Failure ""})
   (the (execute _)
     {try.#Failure ""})
   (the (define _ _ _)
     {try.#Failure ""})

   (the (ingest _ _)
     [])
   (the (re_learn _ _ _)
     {try.#Failure ""})
   (the (re_load _ _ _)
     {try.#Failure ""})))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_module (random.lower_cased 1)
         expected_prefix (random.lower_cased 2)])
      (all _.and
           (_.coverage [/.Host
                        /.evaluate /.execute /.define /.ingest /.re_learn /.re_load]
             true)
           (_.coverage [/.Operation /.Phase]
             true)
           (_.for [/.State
                   /.#anchor /.#host /.#buffer
                   /.#registry /.#registry_shift
                   /.#context /.#interim_artifacts]
                  (all _.and
                       (_.coverage [/.state]
                         (let [it (is (/.State Any Any Any)
                                      (/.state ..dummy_host expected_module))]
                           (and (same? expected_module (its /.#module it))
                                (when (its /.#anchor it) {.#None} true _ false)
                                (same? ..dummy_host (its /.#host it))
                                (when (its /.#buffer it) {.#None} true _ false)
                                (same? registry.empty (its /.#registry it))
                                (n.= 0 (its /.#registry_shift it))
                                (n.= 0 (its /.#counter it))
                                (when (its /.#context it) {.#None} true _ false)
                                (stack.empty? (its /.#interim_artifacts it)))))
                       (_.for [/.#module]
                              (all _.and
                                   (_.coverage [/.enter_module /.module]
                                     (|> (do phase.monad
                                           [expected (/.name expected_prefix)
                                            _ (/.enter_module expected)
                                            actual /.module]
                                           (in (same? expected actual)))
                                         (phase.value (/.state ..dummy_host expected_module))
                                         (try.else false)))
                                   ))
                       (_.for [/.#counter]
                              (all _.and
                                   (_.coverage [/.next]
                                     (|> (do phase.monad
                                           [before /.next
                                            after /.next]
                                           (in (n.= (++ before) after)))
                                         (phase.value (/.state ..dummy_host expected_module))
                                         (try.else false)))
                                   (_.coverage [/.name]
                                     (|> (do phase.monad
                                           [it (/.name expected_prefix)]
                                           (in (and (not (text.= expected_prefix it))
                                                    (text.starts_with? expected_prefix it))))
                                         (phase.value (/.state ..dummy_host expected_module))
                                         (try.else false)))
                                   ))
                       ))
           (_.for [/.Buffer]
                  (all _.and
                       (_.coverage [/.empty_buffer]
                         (sequence.empty? /.empty_buffer))
                       ))

           /script.test
           )))
