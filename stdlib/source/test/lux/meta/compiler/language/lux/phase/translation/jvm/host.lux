... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io]
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]]
   [meta
    [compiler
     [target
      [jvm
       ["[0]" bytecode]]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected (random.upper_cased 1)])
      (all _.and
           (_.coverage [/.host]
             (io.value (do io.monad
                         [[class_loader host] /.host]
                         (in (when (of host evaluate [{.#None} (bytecode.string expected)])
                               {try.#Success actual}
                               (text#= expected (as Text actual))
                               
                               {try.#Failure error}
                               false)))))
           (_.coverage [/.invalid_value]
             (io.value (do io.monad
                         [[class_loader host] /.host]
                         (in (when (of host evaluate [{.#None} bytecode.aconst_null])
                               {try.#Success _}
                               false
                               
                               {try.#Failure error}
                               (exception.is? /.invalid_value error))))))
           (_.coverage [/.cannot_load]
             (io.value (do io.monad
                         [[class_loader host] /.host]
                         (in (when (of host evaluate [{.#None} (all bytecode.composite
                                                                    bytecode.lconst_0
                                                                    bytecode.lconst_0
                                                                    bytecode.ldiv
                                                                    bytecode.pop2
                                                                    (bytecode.string expected)
                                                                    )])
                               {try.#Success _}
                               false
                               
                               {try.#Failure error}
                               (exception.is? /.cannot_load error))))))
           )))
