... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["%" text/injection]]
   ["r" math/random (.only Random)]
   [control
    ["[0]" pipe]
    ["[0]" try]]
   [data
    ["[0]" bit]
    ["[0]" product]
    [number
     ["n" natural]]
    [collection
     ["[0]" list]]]
   [meta
    ["[0]" symbol]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" //
  ["[1][0]" primitive]]
 [\\
  ["[0]" /
   ["/[1]" // (.only)
    ["/[1]" //
     [extension
      ["[1][0]" bundle]]
     ["/[1]" // (.only)
      ["[1][0]" analysis (.only Analysis)]
      ["[1][0]" synthesis (.only Synthesis)]
      [///
       ["[0]" phase]
       [meta
        ["[0]" archive]]]]]]]])

(the variant
  Test
  (do [! r.monad]
    [size (|> r.natural (of ! each (|>> (n.% 10) (n.+ 2))))
     tagA (|> r.natural (of ! each (n.% size)))
     .let [right? (n.= (-- size) tagA)
           lefts (if right?
                   (-- tagA)
                   tagA)]
     memberA //primitive.primitive]
    (_.test "Can synthesize variants."
      (|> (////analysis.variant [lefts right? memberA])
          (//.phase archive.empty)
          (phase.value [///bundle.empty ////synthesis.init])
          (pipe.when
            {try.#Success (////synthesis.variant [leftsS right?S valueS])}
            (let [tagS (if right?S (++ leftsS) leftsS)]
              (and (n.= tagA tagS)
                   (|> tagS (n.= (-- size)) (bit.= right?S))
                   (//primitive.corresponds? memberA valueS)))
            
            _
            false)))))

(the tuple
  Test
  (do [! r.monad]
    [size (|> r.natural (of ! each (|>> (n.% 10) (n.max 2))))
     membersA (r.list size //primitive.primitive)]
    (_.test "Can synthesize tuple."
      (|> (////analysis.tuple membersA)
          (//.phase archive.empty)
          (phase.value [///bundle.empty ////synthesis.init])
          (pipe.when
            {try.#Success (////synthesis.tuple membersS)}
            (and (n.= size (list.size membersS))
                 (list.every? (product.uncurried //primitive.corresponds?)
                              (list.zipped_2 membersA membersS)))

            _
            false)))))

(the .public test
  Test
  (<| (_.context (symbol.as_text (symbol ////synthesis.#Structure)))
      (all _.and
           ..variant
           ..tuple
           )))
