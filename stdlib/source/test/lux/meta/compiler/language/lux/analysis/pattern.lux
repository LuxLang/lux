... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [data
    ["[0]" bit]
    ["[0]" text]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" //
  ["[1][0]" simple]
  ["[1][0]" complex]])

(the .public random
  (Random /.Pattern)
  (random.rec
   (function (_ random)
     (all random.or
          //simple.random
          (//complex.random 4 random)
          random.natural
          ))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Pattern])
      (do random.monad
        [expected_register random.natural
         expected_bit random.bit
         expected_natural random.natural
         expected_int random.int
         expected_rev random.rev
         expected_dec random.dec
         expected_text (random.lower_cased 2)

         expected_lefts random.natural
         expected_right? random.bit

         left ..random
         right ..random])
      (`` (all _.and
               (_.for [/.equivalence]
                      (equivalenceT.spec /.equivalence ..random))
               
               (_.coverage [/.injection]
                 (bit.= (of /.equivalence = left right)
                        (text.= (/.injection left) (/.injection right))))
               (_.coverage [/.unit]
                 (when (/.unit)
                   (/.unit)
                   true

                   _
                   false))
               (,, (with_template [<tag> <value>]
                     [(_.coverage [<tag>]
                        (when (<tag> <value>)
                          (<tag> actual)
                          (same? <value> actual)

                          _
                          false))]

                     [/.bind expected_register]
                     [/.bit expected_bit]
                     [/.natural expected_natural]
                     [/.int expected_int]
                     [/.rev expected_rev]
                     [/.dec expected_dec]
                     [/.text expected_text]
                     ))
               (_.coverage [/.variant]
                 (when (/.variant [expected_lefts expected_right? (/.text expected_text)])
                   (/.variant [actual_lefts actual_right? (/.text actual_text)])
                   (and (same? expected_lefts actual_lefts)
                        (same? expected_right? actual_right?)
                        (same? expected_text actual_text))

                   _
                   false))
               (_.coverage [/.tuple]
                 (when (/.tuple (list (/.bit expected_bit)
                                      (/.natural expected_natural)
                                      (/.int expected_int)
                                      (/.rev expected_rev)
                                      (/.dec expected_dec)
                                      (/.text expected_text)))
                   (/.tuple (list (/.bit actual_bit)
                                  (/.natural actual_natural)
                                  (/.int actual_int)
                                  (/.rev actual_rev)
                                  (/.dec actual_dec)
                                  (/.text actual_text)))
                   (and (same? expected_bit actual_bit)
                        (same? expected_natural actual_natural)
                        (same? expected_int actual_int)
                        (same? expected_rev actual_rev)
                        (same? expected_dec actual_dec)
                        (same? expected_text actual_text))

                   _
                   false))
               ))))
