... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [lux (.except)
  [abstract/monad (.only do)]
  [data
   ["%" text/injection]
   [number
    ["n" natural]]]
  ["r" math/random (.only Random) (.use "[1]#[0]" monad)]
  [control
   ["[0]" try]
   [projection
    ["l" text]]]
  [data
   ["[0]" text]
   [collection
    ["[0]" list]
    ["[0]" dictionary (.only Dictionary)]]]
  [meta
   ["[0]" code]
   ["[0]" location]
   ["[0]" symbol]]
  [test
   ["_" property (.only Test)]]]
 [\\
  ["[0]" /]])

(the symbol_part^
  (Random Text)
  (do [! r.monad]
    [size (|> r.natural (of ! each (|>> (n.% 20) (n.max 1))))]
    (r.lower_case_alpha size)))

(the symbol^
  (Random Symbol)
  (r.and symbol_part^ symbol_part^))

(the code^
  (Random Code)
  (let [numeric^ (is (Random Code)
                     (all r.either
                          (|> r.bit (r#each code.bit))
                          (|> r.natural (r#each code.natural))
                          (|> r.int (r#each code.int))
                          (|> r.rev (r#each code.rev))
                          (|> r.safe_dec (r#each code.dec))))
        textual^ (is (Random Code)
                     (all r.either
                          (do r.monad
                            [size (|> r.natural (r#each (n.% 20)))]
                            (|> (r.upper_case_alpha size) (r#each code.text)))
                          (|> symbol^ (r#each code.symbol))
                          (|> symbol^ (r#each code.tag))))
        simple^ (is (Random Code)
                    (all r.either
                         numeric^
                         textual^))]
    (r.rec
     (function (_ code^)
       (let [multi^ (do r.monad
                      [size (|> r.natural (r#each (n.% 3)))]
                      (r.list size code^))
             composite^ (is (Random Code)
                            (all r.either
                                 (|> multi^ (r#each code.form))
                                 (|> multi^ (r#each code.tuple))
                                 (do r.monad
                                   [size (|> r.natural (r#each (n.% 3)))]
                                   (|> (r.list size (r.and code^ code^))
                                       (r#each code.record)))))]
         (all r.either
              simple^
              composite^))))))

(the code
  Test
  (do [! r.monad]
    [sample code^]
    (all _.and
         (_.test "Can parse Lux code."
           (when (let [source_code (code.as_text sample)]
                   (/.parse "" (dictionary.empty text.hash) (text.size source_code)
                            [location.dummy 0 source_code]))
             {.#Left error}
             false

             {.#Right [_ parsed]}
             (of code.equivalence = parsed sample)))
         (do !
           [other code^]
           (_.test "Can parse multiple Lux code nodes."
             (let [source_code (%.message (code.as_text sample) " " (code.as_text other))
                   source_code//size (text.size source_code)]
               (when (/.parse "" (dictionary.empty text.hash) source_code//size
                              [location.dummy 0 source_code])
                 {.#Left error}
                 false

                 {.#Right [remaining =sample]}
                 (when (/.parse "" (dictionary.empty text.hash) source_code//size
                                remaining)
                   {.#Left error}
                   false

                   {.#Right [_ =other]}
                   (and (of code.equivalence = sample =sample)
                        (of code.equivalence = other =other)))))))
         )))

(the comment_text^
  (Random Text)
  (let [char_gen (|> r.natural (r.only (|>> (n.= (`` (char (,, (static text.new_line))))) not)))]
    (do r.monad
      [size (|> r.natural (r#each (n.% 20)))]
      (r.text char_gen size))))

(the comment^
  (Random Text)
  (do r.monad
    [comment comment_text^]
    (in (%.message "... " comment text.new_line))))

(the comments
  Test
  (do r.monad
    [sample code^
     comment comment^]
    (all _.and
         (_.test "Can handle comments."
           (when (let [source_code (%.message comment (code.as_text sample))
                       source_code//size (text.size source_code)]
                   (/.parse "" (dictionary.empty text.hash) source_code//size
                            [location.dummy 0 source_code]))
             {.#Left error}
             false

             {.#Right [_ parsed]}
             (of code.equivalence = parsed sample)))
         )))

(the .public test
  Test
  (<| (_.context (symbol.module (symbol /._)))
      (all _.and
           ..code
           ..comments
           )))
