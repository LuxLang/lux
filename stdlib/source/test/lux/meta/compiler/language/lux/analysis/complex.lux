(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def test|tag
  Test
  (do [! random.monad]
    [multiplicity (of ! each (n.max 2) random.nat)
     tag (of ! each (n.% multiplicity) random.nat)
     lefts random.nat
     right? random.bit]
    (all _.and
         (_.coverage [/.tag /.lefts]
           (and (|> lefts
                    (/.tag right?)
                    (/.lefts right?)
                    (n.= lefts))
                (|> tag
                    (/.lefts right?)
                    (/.tag right?)
                    (n.= tag))))
         (_.coverage [/.choice]
           (let [[lefts right?] (/.choice multiplicity tag)]
             (if right?
               (n.= (-- tag) lefts)
               (n.= tag lefts))))
         )))

(def .public (random multiplicity it)
  (All (_ a)
    (-> Nat (Random a) (Random (/.Complex a))))
  (all random.or
       (all random.and
            (random#each (n.% (-- multiplicity)) random.nat)
            random.bit
            it)
       (random.list multiplicity it)
       ))

(def .public test
  Test
  (let [random (..random 3 random.nat)]
    (<| (_.covering /._)
        (_.for [/.Complex /.Variant /.Tuple])
        (all _.and
             (_.for [/.equivalence]
                    (equivalenceT.spec (/.equivalence n.equivalence) random))
             (_.for [/.hash]
                    (hashT.spec (/.hash n.hash) random))

             (_.for [/.Tag]
                    ..test|tag)
             
             (do random.monad
               [left random
                right random]
               (_.coverage [/.format]
                 (bit#= (of (/.equivalence n.equivalence) = left right)
                        (text#= (/.format %.nat left) (/.format %.nat right)))))
             ))))
