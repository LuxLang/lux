... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [hash (.only Hash)]
    ["[0]" monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" sum]
    ["[0]" text]
    [number
     ["n" nat]
     ["[0]" int]
     ["[0]" rev]
     ["[0]" dec]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix monoid)]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" //
  ["[1][0]" primitive]]
 [\\
  ["[0]" / (.only)
   ["/[1]" // (.only)
    ["/[1]" //
     [extension
      ["[1][0]" bundle]]
     ["/[1]" // (.only)
      ["[0]" analysis (.only Branch Match Analysis)]
      ["[0]" synthesis (.only Path Synthesis)]
      [///
       ["[1][0]" reference (.only)
        [variable (.only Register)]]
       ["[0]" phase]
       [meta
        ["[0]" archive]]]]]]]])

(the masking_test
  Test
  (do [! random.monad]
    [maskedA //primitive.primitive
     temp (|> random.nat (of ! each (n.% 100)))
     .let [maskA (analysis.when
                   [maskedA
                    [[{analysis.#Bind temp}
                      {analysis.#Reference (////reference.local temp)}]
                     (list)]])]]
    (_.coverage [/.synthesize_masking]
      (|> maskA
          (//.phase archive.empty)
          (phase.value [///bundle.empty synthesis.init])
          (try#each (//primitive.corresponds? maskedA))
          (try.default false)))))

(the let_test
  Test
  (do random.monad
    [registerA random.nat
     inputA //primitive.primitive
     outputA //primitive.primitive
     .let [letA (analysis.when
                  [inputA
                   [[{analysis.#Bind registerA}
                     outputA]
                    (list)]])]]
    (_.coverage [/.synthesize_let]
      (|> letA
          (//.phase archive.empty)
          (phase.value [///bundle.empty synthesis.init])
          (pipe.when
            {try.#Success (synthesis.let [inputS registerS outputS])}
            (and (n.= registerA registerS)
                 (//primitive.corresponds? inputA inputS)
                 (//primitive.corresponds? outputA outputS))

            _
            false)))))

(the if_test
  Test
  (do random.monad
    [then|else random.bit
     inputA //primitive.primitive
     thenA //primitive.primitive
     elseA //primitive.primitive
     .let [thenB (is Branch
                     [{analysis.#Simple {analysis.#Bit true}}
                      thenA])
           elseB (is Branch
                     [{analysis.#Simple {analysis.#Bit false}}
                      elseA])
           ifA (if then|else
                 (analysis.when [inputA [thenB (list elseB)]])
                 (analysis.when [inputA [elseB (list thenB)]]))]]
    (_.coverage [/.synthesize_if]
      (|> ifA
          (//.phase archive.empty)
          (phase.value [///bundle.empty synthesis.init])
          (pipe.when
            {try.#Success (synthesis.if [inputS thenS elseS])}
            (and (//primitive.corresponds? inputA inputS)
                 (//primitive.corresponds? thenA thenS)
                 (//primitive.corresponds? elseA elseS))

            _
            false)))))

(the random_member
  (Random synthesis.Member)
  (do [! random.monad]
    [lefts (|> random.nat (of ! each (n.% 10)))
     right? random.bit]
    (in (if right?
          {.#Right lefts}
          {.#Left lefts}))))

(the random_path
  (Random (analysis.Tuple synthesis.Member))
  (do [! random.monad]
    [size_1 (|> random.nat (of ! each (|>> (n.% 10) ++)))]
    (random.list size_1 ..random_member)))

(the (get_pattern path)
  (-> (analysis.Tuple synthesis.Member)
      (Random [analysis.Pattern Register]))
  (do random.monad
    [@member random.nat]
    (in [(list#mix (function (_ member inner)
                     (when member
                       {.#Left lefts}
                       (analysis.pattern/tuple
                        (list#composite (list.repeated lefts (analysis.pattern/unit))
                                        (list inner (analysis.pattern/unit))))
                       
                       {.#Right lefts}
                       (analysis.pattern/tuple
                        (list#composite (list.repeated (++ lefts) (analysis.pattern/unit))
                                        (list inner)))))
                   {analysis.#Bind @member}
                   (list.reversed path))
         @member])))

(the get_test
  Test
  (do [! random.monad]
    [recordA (|> random.nat
                 (of ! each (|>> analysis.nat))
                 (random.list 10)
                 (of ! each (|>> analysis.tuple)))
     pathA ..random_path
     [pattern @member] (get_pattern pathA)
     .let [getA (analysis.when [recordA [[pattern
                                          {analysis.#Reference (////reference.local @member)}]
                                         (list)]])]]
    (_.coverage [/.synthesize_get]
      (|> getA
          (//.phase archive.empty)
          (phase.value [///bundle.empty synthesis.init])
          (pipe.when
            {try.#Success (synthesis.get [pathS recordS])}
            (and (of (list.equivalence (sum.equivalence n.= n.=)) = pathA pathS)
                 (//primitive.corresponds? recordA recordS))

            _
            false)))))

(the random_bit
  (Random [Path Match])
  (do [! random.monad]
    [test random.bit
     then random.nat
     else random.nat]
    (in [{synthesis.#Alt {synthesis.#Seq (synthesis.path/bit test)
                                         {synthesis.#Then (synthesis.i64 (.i64 then))}}
                         {synthesis.#Seq (synthesis.path/bit (not test))
                                         {synthesis.#Then (synthesis.i64 (.i64 else))}}}
         [[analysis.#when (analysis.pattern/bit test)
           analysis.#then (analysis.nat then)]
          (list [analysis.#when (analysis.pattern/bit (not test))
                 analysis.#then (analysis.nat else)])]])))

(the (random_five hash random_element)
  (All (_ a) (-> (Hash a) (Random a) (Random [a a a a a])))
  (|> random_element
      (random.set hash 5)
      (of random.monad each (|>> set.list
                                 (pipe.when
                                   (list s0 s1 s2 s3 s4)
                                   [s0 s1 s2 s3 s4]

                                   _
                                   (undefined))))))

(with_template [<name> <hash> <random> <path> <synthesis> <pattern> <analysis>]
  [(the <name>
     (Random [Path Match])
     (do [! random.monad]
       [[test/0 test/1 test/2 test/3 test/4] (random_five <hash> <random>)
        [body/0 body/1 body/2 body/3 body/4] (random_five <hash> <random>)]
       (in [(all {synthesis.#Alt}
                 {synthesis.#Seq (<path> test/0) {synthesis.#Then (<synthesis> body/0)}}
                 {synthesis.#Seq (<path> test/1) {synthesis.#Then (<synthesis> body/1)}}
                 {synthesis.#Seq (<path> test/2) {synthesis.#Then (<synthesis> body/2)}}
                 {synthesis.#Seq (<path> test/3) {synthesis.#Then (<synthesis> body/3)}}
                 {synthesis.#Seq (<path> test/4) {synthesis.#Then (<synthesis> body/4)}})
            [[analysis.#when (<pattern> test/0) analysis.#then (<analysis> body/0)]
             (list [analysis.#when (<pattern> test/1) analysis.#then (<analysis> body/1)]
                   [analysis.#when (<pattern> test/2) analysis.#then (<analysis> body/2)]
                   [analysis.#when (<pattern> test/3) analysis.#then (<analysis> body/3)]
                   [analysis.#when (<pattern> test/4) analysis.#then (<analysis> body/4)])]])))]

  [random_nat n.hash random.nat (|>> .i64 synthesis.path/i64) (|>> .i64 synthesis.i64) analysis.pattern/nat analysis.nat]
  [random_int int.hash random.int (|>> .i64 synthesis.path/i64) (|>> .i64 synthesis.i64) analysis.pattern/int analysis.int]
  [random_rev rev.hash random.rev (|>> .i64 synthesis.path/i64) (|>> .i64 synthesis.i64) analysis.pattern/rev analysis.rev]
  [random_dec dec.hash random.dec synthesis.path/f64 synthesis.f64 analysis.pattern/dec analysis.dec]
  [random_text text.hash (random.unicode 1) synthesis.path/text synthesis.text analysis.pattern/text analysis.text]
  )

(the random_simple
  (all random.either
       ..random_bit
       ..random_nat
       ..random_int
       ..random_rev
       ..random_dec
       ..random_text
       ))

(the random_variant
  (Random [Path Match])
  (do [! random.monad]
    [[lefts/0 lefts/1 lefts/2 lefts/3 lefts/4] (random_five n.hash random.nat)
     [value/0 value/1 value/2 value/3 value/4] (random_five text.hash (random.unicode 1))
     last_is_right? random.bit
     [body/0 body/1 body/2 body/3 body/4] (random_five dec.hash random.dec)
     .let [path (is (-> Nat Bit Text Dec Path)
                    (function (_ lefts right? value body)
                      (all {synthesis.#Seq}
                           (synthesis.path/side (if right?
                                                  {.#Right lefts}
                                                  {.#Left lefts}))
                           (synthesis.path/text value)
                           {synthesis.#Then (synthesis.f64 body)})))
           branch (is (-> Nat Bit Text Dec Branch)
                      (function (_ lefts right? value body)
                        [analysis.#when (analysis.pattern/variant [analysis.#lefts lefts
                                                                   analysis.#right? right?
                                                                   analysis.#value (analysis.pattern/text value)])
                         analysis.#then (analysis.dec body)]))]]
    (in [(all {synthesis.#Alt}
              (path lefts/0 false value/0 body/0)
              (path lefts/1 false value/1 body/1)
              (path lefts/2 false value/2 body/2)
              (path lefts/3 false value/3 body/3)
              (path lefts/4 last_is_right? value/4 body/4))
         [(branch lefts/0 false value/0 body/0)
          (list (branch lefts/1 false value/1 body/1)
                (branch lefts/2 false value/2 body/2)
                (branch lefts/3 false value/3 body/3)
                (branch lefts/4 last_is_right? value/4 body/4))]])))

(the random_tuple
  (Random [Path Match])
  (do [! random.monad]
    [mid_size (of ! each (n.% 4) random.nat)

     value/first (random.unicode 1)
     value/mid (random.list mid_size (random.unicode 1))
     value/last (random.unicode 1)

     body/first random.dec
     body/mid (random.list mid_size random.dec)
     body/last random.dec
     .let [path (is (-> Nat Bit Text Dec Path)
                    (function (_ lefts right? value body)
                      (if right?
                        (all {synthesis.#Seq}
                             (synthesis.path/member (if right?
                                                      {.#Right lefts}
                                                      {.#Left lefts}))
                             (synthesis.path/text value)
                             {synthesis.#Then (synthesis.f64 body)})
                        (all {synthesis.#Seq}
                             (synthesis.path/member (if right?
                                                      {.#Right lefts}
                                                      {.#Left lefts}))
                             (synthesis.path/text value)
                             {synthesis.#Pop}
                             {synthesis.#Then (synthesis.f64 body)}))))
           branch (is (-> Nat Bit Text Dec Branch)
                      (function (_ lefts right? value body)
                        [analysis.#when (if right?
                                          (analysis.pattern/tuple (list#composite (list.repeated (++ lefts) (analysis.pattern/unit))
                                                                                  (list (analysis.pattern/text value))))
                                          (analysis.pattern/tuple (all list#composite
                                                                       (list.repeated lefts (analysis.pattern/unit))
                                                                       (list (analysis.pattern/text value)
                                                                             (analysis.pattern/unit)))))
                         analysis.#then (analysis.dec body)]))]]
    (in [(list#mix (function (_ left right)
                     {synthesis.#Alt left right})
                   (path (++ mid_size) true value/last body/last)
                   (|> (list.zipped_2 value/mid body/mid)
                       {.#Item [value/first body/first]}
                       list.enumeration
                       (list#each (function (_ [lefts' [value body]])
                                    (path lefts' false value body)))
                       list.reversed))
         [(branch 0 false value/first body/first)
          (list#composite (|> (list.zipped_2 value/mid body/mid)
                              list.enumeration
                              (list#each (function (_ [lefts' [value body]])
                                           (branch (++ lefts') false value body))))
                          (list (branch (++ mid_size) true value/last body/last)))]])))

(the random_complex
  (all random.either
       ..random_variant
       ..random_tuple
       ))

(the random_when
  (all random.either
       ..random_simple
       ..random_complex
       ))

(the when_test
  Test
  (do [! random.monad]
    [expected_input (of ! each (|>> .i64 synthesis.i64) random.nat)
     [expected_path match] ..random_when]
    (_.coverage [/.synthesize_when]
      (|> (/.synthesize_when //.phase archive.empty expected_input match)
          (phase.value [///bundle.empty synthesis.init])
          (pipe.when
            {try.#Success (synthesis.when [actual_input actual_path])}
            (and (of synthesis.equivalence = expected_input actual_input)
                 (of synthesis.path_equivalence = expected_path actual_path))

            _
            false)))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.synthesize])
      (all _.and
           ..masking_test
           ..let_test
           ..if_test
           ..get_test
           ..when_test
           )))
