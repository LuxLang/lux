... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io]
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" function]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid functor)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" i64 (.use "[1]#[0]" equivalence)]
     ["n" nat]]]
   [meta
    ["[0]" location]
    [compiler
     [meta
      ["[0]" archive]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" // (.only)
    ["[0]" host]
    ["[0]" runtime]
    [///
     ["[0]" extension]
     [//
      ["[0]" phase]
      ["[0]" translation]
      ["[0]" synthesis (.only)
       ["[0]" access (.only)
        ["[0]" member (.only Member)]
        ["[0]" side (.only Side)]]]]]]]]
 [//
  ["[0]T" complex]])

(def if_test
  Test
  (do [! random.monad]
    [module (random.lower_cased 1)

     expected_bit random.bit
     expected_i64 random.i64
     dummy_i64 (random.only (|>> (i64#= expected_i64) not)
                            random.i64)

     .let [extender (is extension.Extender
                        (function (_ _)
                          (undefined)))
           next (//.translate extender complexT.lux)
           @ [module 0 0]]]
    (_.coverage [/.if]
      (|> (do try.monad
            [[_ archive] (archive.reserve "" archive.empty)
             [_ archive] (archive.reserve module archive)
             .let [[_ host] (io.run! host.host)
                   state (is runtime.State
                             (translation.state host module))
                   [then else] (if expected_bit
                                 [expected_i64 dummy_i64]
                                 [dummy_i64 expected_i64])]]
            (<| (phase.result state)
                (do phase.monad
                  [_ (translation.set_buffer translation.empty_buffer)
                   it (/.if next archive
                            [(synthesis.bit @ expected_bit)
                             (synthesis.i64 @ then)
                             (synthesis.i64 @ else)])]
                  (in (|> it
                          [{.#None}]
                          (of host evaluate)
                          (try#each (|>> (as I64)
                                         (i64#= expected_i64)))
                          (try.else false))))))
          (try.else false)))))

(def exec_test
  Test
  (do [! random.monad]
    [module (random.lower_cased 1)

     expected_bit random.bit
     expected_i64 random.i64
     dummy_i64 (random.only (|>> (i64#= expected_i64) not)
                            random.i64)

     .let [extender (is extension.Extender
                        (function (_ _)
                          (undefined)))
           next (//.translate extender complexT.lux)
           @ [module 0 0]]]
    (_.coverage [/.exec]
      (|> (do try.monad
            [[_ archive] (archive.reserve "" archive.empty)
             [_ archive] (archive.reserve module archive)
             .let [[_ host] (io.run! host.host)
                   state (is runtime.State
                             (translation.state host module))]]
            (<| (phase.result state)
                (do phase.monad
                  [_ (translation.set_buffer translation.empty_buffer)
                   it (/.exec next archive
                        [(synthesis.i64 @ dummy_i64)
                         (synthesis.i64 @ expected_i64)])]
                  (in (|> it
                          [{.#None}]
                          (of host evaluate)
                          (try#each (|>> (as I64)
                                         (i64#= expected_i64)))
                          (try.else false))))))
          (try.else false)))))

(def let_test
  Test
  (do [! random.monad]
    [module (random.lower_cased 1)

     expected_i64 random.i64
     register (of ! each (n.% 10) random.nat)

     .let [extender (is extension.Extender
                        (function (_ _)
                          (undefined)))
           next (//.translate extender complexT.lux)
           @ [module 0 0]]]
    (_.coverage [/.let]
      (|> (do try.monad
            [[_ archive] (archive.reserve "" archive.empty)
             [_ archive] (archive.reserve module archive)
             .let [[_ host] (io.run! host.host)
                   state (is runtime.State
                             (translation.state host module))]]
            (<| (phase.result state)
                (do phase.monad
                  [_ (translation.set_buffer translation.empty_buffer)
                   it (/.let next archive
                        [[register (synthesis.i64 @ expected_i64)]
                         (synthesis.local @ register)])]
                  (in (|> it
                          [{.#None}]
                          (of host evaluate)
                          (try#each (|>> (as I64)
                                         (i64#= expected_i64)))
                          (try.else false))))))
          (try.else false)))))

(def the_test
  Test
  (do [! random.monad]
    [module (random.lower_cased 1)
     expected_i64 random.i64
     dummy_i64 (random.only (|>> (i64#= expected_i64) not)
                            random.i64)

     .let [extender (is extension.Extender
                        (function (_ _)
                          (undefined)))
           next (//.translate extender complexT.lux)
           @ [module 0 0]]

     .let [siblings (of ! each (|>> (n.% 5) ++) random.nat)]
     left_siblings siblings
     right_siblings siblings
     .let [inner_size (++ (all n.+ left_siblings right_siblings))]
     inner_member (of ! each (n.% inner_size) random.nat)
     nested_choice random.bit]
    (_.coverage [/.its]
      (|> (do try.monad
            [[_ archive] (archive.reserve "" archive.empty)
             [_ archive] (archive.reserve module archive)
             .let [[_ host] (io.run! host.host)
                   state (is runtime.State
                             (translation.state host module))]
             .let [middle_tuple (all list#composite
                                     (list.repeated left_siblings (synthesis.i64 @ dummy_i64))
                                     (list (synthesis.i64 @ expected_i64))
                                     (list.repeated right_siblings (synthesis.i64 @ dummy_i64)))
                   middle_access (is Member
                                     [left_siblings #0])
                   
                   right_tuple (all list#composite
                                    (list.repeated left_siblings (synthesis.i64 @ dummy_i64))
                                    (list (synthesis.i64 @ expected_i64)))
                   right_access (is Member
                                    [(-- left_siblings) #1])

                   [nested_tuple nested_access] (is [(List synthesis.Term) Member]
                                                    (if nested_choice
                                                      [middle_tuple middle_access]
                                                      [right_tuple right_access]))
                   nested_tuple (is (List synthesis.Term)
                                    (all list#composite
                                         (list.repeated right_siblings (synthesis.i64 @ dummy_i64))
                                         (list (synthesis.tuple @ nested_tuple))))]
             middle! (<| (phase.result state)
                         (do phase.monad
                           [_ (translation.set_buffer translation.empty_buffer)
                            _ runtime.translation
                            it (/.its next archive
                                      [(list middle_access)
                                       (synthesis.tuple @ middle_tuple)])]
                           (in (|> it
                                   [{.#None}]
                                   (of host evaluate)
                                   (try#each (|>> (as I64)
                                                  (i64#= expected_i64)))
                                   (try.else false)))))
             right! (<| (phase.result state)
                        (do phase.monad
                          [_ (translation.set_buffer translation.empty_buffer)
                           _ runtime.translation
                           it (/.its next archive
                                     [(list right_access)
                                      (synthesis.tuple @ right_tuple)])]
                          (in (|> it
                                  [{.#None}]
                                  (of host evaluate)
                                  (try#each (|>> (as I64)
                                                 (i64#= expected_i64)))
                                  (try.else false)))))
             nested! (<| (phase.result state)
                         (do phase.monad
                           [_ (translation.set_buffer translation.empty_buffer)
                            _ runtime.translation
                            it (/.its next archive
                                      [(list [(-- right_siblings) #1]
                                             nested_access)
                                       (synthesis.tuple @ nested_tuple)])]
                           (in (|> it
                                   [{.#None}]
                                   (of host evaluate)
                                   (try#each (|>> (as I64)
                                                  (i64#= expected_i64)))
                                   (try.else false)))))]
            (in (and middle!
                     right!
                     nested!)))
          (try.else false)))))

(def when_test
  Test
  (do [! random.monad]
    [module (random.lower_cased 1)
     expected_i64 random.i64
     dummy_i64 (random.only (|>> (i64#= expected_i64) not)
                            random.i64)

     .let [extender (is extension.Extender
                        (function (_ _)
                          (undefined)))
           next (//.translate extender complexT.lux)
           @ [module 0 0]]

     register (of ! each (n.% 10) random.nat)
     expected_bit random.bit
     expected_f64 random.safe_frac
     expected_text (random.lower_cased 1)

     lefts (of ! each (n.% 10) random.nat)]
    (_.coverage [/.when]
      (|> (do try.monad
            [[_ archive] (archive.reserve "" archive.empty)
             [_ archive] (archive.reserve module archive)
             .let [[_ host] (io.run! host.host)
                   state (is runtime.State
                             (translation.state host module))]
             then! (<| (phase.result state)
                       (do phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          _ runtime.translation
                          it (/.when next archive
                               [(synthesis.i64 @ dummy_i64)
                                {synthesis.#Then (synthesis.i64 @ expected_i64)}])]
                         (in (|> it
                                 [{.#None}]
                                 (of host evaluate)
                                 (try#each (|>> (as I64)
                                                (i64#= expected_i64)))
                                 (try.else false)))))
             pop! (<| (phase.result state)
                      (do phase.monad
                        [_ (translation.set_buffer translation.empty_buffer)
                         _ runtime.translation
                         it (/.when next archive
                              [(synthesis.i64 @ dummy_i64)
                               {synthesis.#Seq
                                {synthesis.#Pop}
                                {synthesis.#Then (synthesis.i64 @ expected_i64)}}])]
                        (in (|> it
                                [{.#None}]
                                (of host evaluate)
                                (try#each (|>> (as I64)
                                               (i64#= expected_i64)))
                                (try.else false)))))
             bind! (<| (phase.result state)
                       (do phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          _ runtime.translation
                          it (/.when next archive
                               [(synthesis.i64 @ expected_i64)
                                {synthesis.#Seq
                                 {synthesis.#Bind register}
                                 {synthesis.#Then (synthesis.local @ register)}}])]
                         (in (|> it
                                 [{.#None}]
                                 (of host evaluate)
                                 (try#each (|>> (as I64)
                                                (i64#= expected_i64)))
                                 (try.else false)))))
             bit! (<| (phase.result state)
                      (do phase.monad
                        [_ (translation.set_buffer translation.empty_buffer)
                         _ runtime.translation
                         it (/.when next archive
                              [(synthesis.bit @ expected_bit)
                               {synthesis.#Bit_Fork expected_bit
                                                    {synthesis.#Then (synthesis.i64 @ expected_i64)}
                                                    {.#Some {synthesis.#Then (synthesis.i64 @ dummy_i64)}}}])]
                        (in (|> it
                                [{.#None}]
                                (of host evaluate)
                                (try#each (|>> (as I64)
                                               (i64#= expected_i64)))
                                (try.else false)))))
             i64! (<| (phase.result state)
                      (do phase.monad
                        [_ (translation.set_buffer translation.empty_buffer)
                         _ runtime.translation
                         it (/.when next archive
                              [(synthesis.i64 @ dummy_i64)
                               {synthesis.#I64_Fork [[dummy_i64 {synthesis.#Then (synthesis.i64 @ expected_i64)}]
                                                     (list)]}])]
                        (in (|> it
                                [{.#None}]
                                (of host evaluate)
                                (try#each (|>> (as I64)
                                               (i64#= expected_i64)))
                                (try.else false)))))
             f64! (<| (phase.result state)
                      (do phase.monad
                        [_ (translation.set_buffer translation.empty_buffer)
                         _ runtime.translation
                         it (/.when next archive
                              [(synthesis.f64 @ expected_f64)
                               {synthesis.#F64_Fork [[expected_f64 {synthesis.#Then (synthesis.i64 @ expected_i64)}]
                                                     (list)]}])]
                        (in (|> it
                                [{.#None}]
                                (of host evaluate)
                                (try#each (|>> (as I64)
                                               (i64#= expected_i64)))
                                (try.else false)))))
             text! (<| (phase.result state)
                       (do phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          _ runtime.translation
                          it (/.when next archive
                               [(synthesis.text @ expected_text)
                                {synthesis.#Text_Fork [[expected_text {synthesis.#Then (synthesis.i64 @ expected_i64)}]
                                                       (list)]}])]
                         (in (|> it
                                 [{.#None}]
                                 (of host evaluate)
                                 (try#each (|>> (as I64)
                                                (i64#= expected_i64)))
                                 (try.else false)))))
             alt! (<| (phase.result state)
                      (do phase.monad
                        [_ (translation.set_buffer translation.empty_buffer)
                         _ runtime.translation
                         it (/.when next archive
                              [(synthesis.i64 @ dummy_i64)
                               {synthesis.#Alt
                                {synthesis.#I64_Fork [[expected_i64 {synthesis.#Then (synthesis.i64 @ expected_i64)}]
                                                      (list)]}
                                {synthesis.#Then (synthesis.i64 @ expected_i64)}}])]
                        (in (|> it
                                [{.#None}]
                                (of host evaluate)
                                (try#each (|>> (as I64)
                                               (i64#= expected_i64)))
                                (try.else false)))))
             .let [access!|member (is (-> Member (List I64)
                                          Bit)
                                      (function (_ member tuple)
                                        (<| (try.else false)
                                            (phase.result state)
                                            (do phase.monad
                                              [_ (translation.set_buffer translation.empty_buffer)
                                               _ runtime.translation
                                               it (/.when next archive
                                                    [(synthesis.tuple @ (list#each (|>> (synthesis.i64 @)) tuple))
                                                     {synthesis.#Seq
                                                      {synthesis.#Access {access.#Member member}}
                                                      {synthesis.#Seq
                                                       {synthesis.#Bind register}
                                                       {synthesis.#Then (synthesis.local @ register)}}}])]
                                              (in (|> it
                                                      [{.#None}]
                                                      (of host evaluate)
                                                      (try#each (|>> (as I64)
                                                                     (i64#= expected_i64)))
                                                      (try.else false)))))))
                   access!|side (is (-> Side
                                        Bit)
                                    (function (_ [lefts right?])
                                      (<| (try.else false)
                                          (phase.result state)
                                          (do phase.monad
                                            [_ (translation.set_buffer translation.empty_buffer)
                                             _ runtime.translation
                                             it (/.when next archive
                                                  [(synthesis.variant @ [lefts right? (synthesis.i64 @ expected_i64)])
                                                   {synthesis.#Seq
                                                    {synthesis.#Access {access.#Side [lefts right?]}}
                                                    {synthesis.#Seq
                                                     {synthesis.#Bind register}
                                                     {synthesis.#Then (synthesis.local @ register)}}}])]
                                            (in (|> it
                                                    [{.#None}]
                                                    (of host evaluate)
                                                    (try#each (|>> (as I64)
                                                                   (i64#= expected_i64)))
                                                    (try.else false)))))))
                   access! (and (access!|member [lefts false] (list#composite (list.repeated lefts dummy_i64)
                                                                              (list expected_i64 dummy_i64)))
                                (access!|member [lefts true] (list#composite (list.repeated lefts dummy_i64)
                                                                             (list dummy_i64 expected_i64)))

                                (access!|side [lefts false])
                                (access!|side [lefts true]))]]
            (in (and then!
                     pop!
                     bind!
                     bit!
                     i64!
                     f64!
                     text!
                     alt!
                     access!)))
          (try.else false)))))

(def .public test
  Test
  (<| (_.covering /._)
      (all _.and
           if_test
           exec_test
           let_test
           the_test
           when_test
           )))
