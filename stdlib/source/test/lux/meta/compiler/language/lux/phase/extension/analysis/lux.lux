(.require
 [library
  [lux (.except i64 int)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["%" text/format (.only format)]]
   ["r" math/random (.only Random)]
   [control
    [io (.only IO)]
    ["[0]" pipe]
    ["[0]" try]
    [concurrency
     ["[0]" atom]]]
   [data
    ["[0]" product]]
   [meta
    ["[0]" code]
    ["[0]" symbol]
    ["[0]" type (.use "[1]#[0]" equivalence)]]
   [test
    ["_" property (.only Test)]]]]
 [////
  [analysis
   ["_[0]" primitive]]]
 [\\
  ["[0]" / (.only)
   ["///[1]" ////
    [analysis
     ["[1][0]" scope]
     ["[1][0]" type]]
    [////
     ["[0]" phase]
     [meta
      ["[0]" archive]]]]]])

(with_template [<name> <success> <failure>]
  [(def (<name> procedure params output_type)
     (-> Text (List Code) Type Bit)
     (|> (////scope.with_scope ""
           (////type.with_type output_type
             (_primitive.phase archive.empty (` ((, (code.text procedure)) (,* params))))))
         (phase.result _primitive.state)
         (pipe.when
           {try.#Success _}
           <success>

           {try.#Failure _}
           <failure>)))]

  [check_success+ true false]
  [check_failure+ false true]
  )

(def primitive
  (Random [Type Code])
  (r.only (|>> product.left (same? Any) not) _primitive.primitive))

(def lux
  Test
  (do r.monad
    [[primT primC] ..primitive
     [antiT antiC] (|> ..primitive
                       (r.only (|>> product.left (type#= primT) not)))]
    (all _.and
         (_.test "Can test for reference equality."
           (check_success+ (` .is?#) (list primC primC) Bit))
         (_.test "Reference equality must be done with elements of the same type."
           (check_failure+ (` .is?#) (list primC antiC) Bit))
         (_.test "Can 'try' risky IO computations."
           (check_success+ (` .try#)
                           (list (` (.error# "YOLO")))
                           (type_literal (Either Text primT))))
         )))

(def i64
  Test
  (do [! r.monad]
    [subjectC (|> r.nat (of ! each code.nat))
     signedC (|> r.int (of ! each code.int))
     paramC (|> r.nat (of ! each code.nat))]
    (all _.and
         (_.test "i64 'and'."
           (check_success+ (symbol .i64_and#) (list paramC subjectC) Nat))
         (_.test "i64 'or'."
           (check_success+ (symbol .i64_or#) (list paramC subjectC) Nat))
         (_.test "i64 'xor'."
           (check_success+ (symbol .i64_xor#) (list paramC subjectC) Nat))
         (_.test "i64 left-shift."
           (check_success+ (symbol .i64_left#) (list paramC subjectC) Nat))
         (_.test "i64 logical-right-shift."
           (check_success+ "lux i64 logical-right-shift" (list paramC subjectC) Nat))
         (_.test "i64 arithmetic-right-shift."
           (check_success+ "lux i64 arithmetic-right-shift" (list paramC signedC) Int))
         (_.test "i64 equivalence."
           (check_success+ (symbol .i64_=#) (list paramC subjectC) Bit))
         (_.test "i64 addition."
           (check_success+ (symbol .i64_+#) (list paramC subjectC) Int))
         (_.test "i64 subtraction."
           (check_success+ (symbol .i64_-#) (list paramC subjectC) Int))
         )))

(def int
  Test
  (do [! r.monad]
    [subjectC (|> r.int (of ! each code.int))
     paramC (|> r.int (of ! each code.int))]
    (all _.and
         (_.test "Can multiply integers."
           (check_success+ (symbol .int_*#) (list paramC subjectC) Int))
         (_.test "Can divide integers."
           (check_success+ (symbol .int_/#) (list paramC subjectC) Int))
         (_.test "Can calculate remainder of integers."
           (check_success+ (symbol .int_%#) (list paramC subjectC) Int))
         (_.test "Can compare integers."
           (check_success+ (symbol .int_<#) (list paramC subjectC) Bit))
         (_.test "Can convert integer to text."
           (check_success+ (symbol .int_char#) (list subjectC) Text))
         (_.test "Can convert integer to fraction."
           (check_success+ (symbol .int_f64#) (list subjectC) Frac))
         )))

(def frac
  Test
  (do [! r.monad]
    [subjectC (|> r.safe_frac (of ! each code.frac))
     paramC (|> r.safe_frac (of ! each code.frac))
     encodedC (|> r.safe_frac (of ! each (|>> %.frac code.text)))]
    (all _.and
         (_.test "Can add frac numbers."
           (check_success+ (symbol .f64_+#) (list paramC subjectC) Frac))
         (_.test "Can subtract frac numbers."
           (check_success+ (symbol .f64_-#) (list paramC subjectC) Frac))
         (_.test "Can multiply frac numbers."
           (check_success+ (symbol .f64_*#) (list paramC subjectC) Frac))
         (_.test "Can divide frac numbers."
           (check_success+ (symbol .f64_/#) (list paramC subjectC) Frac))
         (_.test "Can calculate remainder of frac numbers."
           (check_success+ (symbol .f64_%#) (list paramC subjectC) Frac))
         (_.test "Can test equivalence of frac numbers."
           (check_success+ (symbol .f64_=#) (list paramC subjectC) Bit))
         (_.test "Can compare frac numbers."
           (check_success+ (symbol .f64_<#) (list paramC subjectC) Bit))
         (_.test "Can convert frac number to integer."
           (check_success+ (symbol .f64_int#) (list subjectC) Int))
         (_.test "Can convert frac number to text."
           (check_success+ (symbol .f64_encoded#) (list subjectC) Text))
         (_.test "Can convert text to frac number."
           (check_success+ (symbol .f64_decoded#) (list encodedC) (type_literal (Maybe Frac))))
         )))

(def text
  Test
  (do [! r.monad]
    [subjectC (|> (r.unicode 5) (of ! each code.text))
     paramC (|> (r.unicode 5) (of ! each code.text))
     replacementC (|> (r.unicode 5) (of ! each code.text))
     fromC (|> r.nat (of ! each code.nat))
     toC (|> r.nat (of ! each code.nat))]
    (all _.and
         (_.test "Can test text equivalence."
           (check_success+ (symbol .text_=#) (list paramC subjectC) Bit))
         (_.test "Compare texts in lexicographical order."
           (check_success+ (symbol .text_<#) (list paramC subjectC) Bit))
         (_.test "Can concatenate one text to another."
           (check_success+ (symbol .text_composite#) (list subjectC paramC) Text))
         (_.test "Can find the index of a piece of text inside a larger one that (may) contain it."
           (check_success+ (symbol .text_index#) (list fromC paramC subjectC) (type_literal (Maybe Nat))))
         (_.test "Can query the size/length of a text."
           (check_success+ (symbol .text_size#) (list subjectC) Nat))
         (_.test "Can obtain the character code of a text at a given index."
           (check_success+ (symbol .text_char#) (list fromC subjectC) Nat))
         (_.test "Can clip a piece of text between 2 indices."
           (check_success+ (symbol .text_clip#) (list fromC toC subjectC) Text))
         )))

(def io
  Test
  (do [! r.monad]
    [logC (|> (r.unicode 5) (of ! each code.text))
     exitC (|> r.int (of ! each code.int))]
    (all _.and
         (_.test "Can log messages to standard output."
           (check_success+ (symbol .log!#) (list logC) Any))
         (_.test "Can throw a run-time error."
           (check_success+ (symbol .error#) (list logC) Nothing))
         )))

(def .public test
  Test
  (<| (_.context (symbol.module (symbol /._)))
      (all _.and
           ..lux
           ..i64
           ..int
           ..frac
           ..text
           ..io
           )))
