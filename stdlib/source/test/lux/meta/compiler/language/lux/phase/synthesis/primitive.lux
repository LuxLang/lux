... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except primitive)
   [abstract ["[0]" monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" try]]
   [data
    ["%" text/injection]
    [number
     ["n" nat]]
    [collection
     ["[0]" list]]]
   ["r" math/random (.only Random) (.use "[1]#[0]" monad)]
   [meta
    ["[0]" symbol]]
   [test
    ["_" property (.only Test)]]]]
 [\\
  ["[0]" /
   ["/[1]" // (.only)
    ["/[1]" //
     [extension
      ["[1][0]" bundle]]
     ["/[1]" // (.only)
      ["[1][0]" analysis (.only Analysis)]
      ["[1][0]" synthesis (.only Synthesis)]
      [///
       ["[0]" phase]
       [meta
        ["[0]" archive]]]]]]]])

(the .public primitive
  (Random Analysis)
  (do r.monad
    [primitive (is (Random ////analysis.Primitive)
                   (all r.or
                        (in [])
                        r.bit
                        r.nat
                        r.int
                        r.rev
                        r.dec
                        (r.unicode 5)))]
    (in {////analysis.#Primitive primitive})))

(the .public (corresponds? analysis synthesis)
  (-> Analysis Synthesis Bit)
  (`` (when [analysis synthesis]
        (,, (with_template [<analysis> <post_analysis> <synthesis> <post_synthesis>]
              [[{////analysis.#Primitive {<analysis> expected}}
                {////synthesis.#Primitive {<synthesis> actual}}]
               (same? (|> expected <post_analysis>)
                      (|> actual <post_synthesis>))]

              [////analysis.#Unit (as Text) ////synthesis.#Text (|>)]
              [////analysis.#Bit  (|>) ////synthesis.#Bit (|>)]
              [////analysis.#Nat  .i64 ////synthesis.#I64 .i64]
              [////analysis.#Int  .i64 ////synthesis.#I64 .i64]
              [////analysis.#Rev  .i64 ////synthesis.#I64 .i64]
              [////analysis.#Dec  (|>) ////synthesis.#F64 (|>)]
              [////analysis.#Text (|>) ////synthesis.#Text (|>)]
              ))

        [(////analysis.tuple expected)
         (////synthesis.tuple actual)]
        (and (n.= (list.size expected)
                  (list.size actual))
             (list.every? (function (_ [expected actual])
                            (corresponds? expected actual))
                          (list.zipped_2 expected actual)))
        
        _
        false)))

(the .public test
  Test
  (<| (_.context (%.symbol (symbol ////synthesis.#Primitive)))
      (`` (all _.and
               (,, (with_template [<analysis> <synthesis> <translator>]
                     [(do r.monad
                        [expected <translator>]
                        (_.test (%.symbol (symbol <synthesis>))
                          (|> {////analysis.#Primitive {<analysis> expected}}
                              (//.phase archive.empty)
                              (phase.value [///bundle.empty ////synthesis.init])
                              (pipe.when
                                {try.#Success {////synthesis.#Primitive {<synthesis> actual}}}
                                (same? expected actual)

                                _
                                false))))]

                     [////analysis.#Unit ////synthesis.#Text (r#in ////synthesis.unit)]
                     [////analysis.#Bit  ////synthesis.#Bit  r.bit]
                     [////analysis.#Nat  ////synthesis.#I64  (r#each .i64 r.nat)]
                     [////analysis.#Int  ////synthesis.#I64  (r#each .i64 r.int)]
                     [////analysis.#Rev  ////synthesis.#I64  (r#each .i64 r.rev)]
                     [////analysis.#Dec  ////synthesis.#F64  r.dec]
                     [////analysis.#Text ////synthesis.#Text (r.unicode 5)]))))))
