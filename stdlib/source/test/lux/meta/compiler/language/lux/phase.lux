... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.`` (.`` (.require
           [library
            [lux (.except)
             [abstract
              ["[0]" monad (.only do)
               ["[1]T" \\test]]
              ["[0]" functor
               ["[1]T" \\test (.only Injection Comparison)]]]
             [control
              ["[0]" pipe]
              ["[0]" try (.use "[1]#[0]" functor)]
              ["[0]" exception]]
             [data
              ["[0]" text (.use "[1]#[0]" equivalence)
               ["%" \\injection (.only format)]]]
             [math
              ["[0]" random]
              [number
               ["n" nat]
               ["i" int]]]
             [test
              ["_" property (.only Test)]]]]
           [\\library
            ["[0]" / (.only)
             [////
              [meta
               ["[0]" archive]]]]]
           [/
            [translation
             (.,, (.for .jvm (.,, (.these ["[0]" jvm
                                           ["[1]/[0]" host]
                                           ["[1]/[0]" primitive]
                                           ["[1]/[0]" type]
                                           ["[1]/[0]" value]
                                           ["[1]/[0]" runtime]
                                           ["[1]/[0]" complex]
                                           ["[1]/[0]" function]
                                           ["[1]/[0]" reference]
                                           ["[1]/[0]" loop]
                                           ["[1]/[0]" when]]))
                        ... .js (.,, (.these ["[1]/[0]" js]))
                        ... .lua (.,, (.these ["[1]/[0]" lua]))
                        ... .python (.,, (.these ["[1]/[0]" python]))
                        ... .ruby (.,, (.these ["[1]/[0]" ruby]))
                        (.,, (.these))))]])))

(the (injection value)
  (All (_ of)
    (Injection (/.Operation of)))
  (function (_ state)
    {try.#Success [state value]}))

(the (comparison init)
  (All (_ of)
    (-> of
        (Comparison (/.Operation of))))
  (function (_ == left right)
    (when [(/.value init left)
           (/.value init right)]
      [{try.#Success left}
       {try.#Success right}]
      (== left right)

      _
      false)))

(exception.the oops)

(the test|error
  Test
  (do [! random.monad]
    [state random.nat
     expected random.int
     expected_error (random.lower_cased 1)]
    (all _.and
         (_.coverage [/.failure]
           (|> (/.failure expected_error)
               (/.value state)
               (pipe.when {try.#Failure actual_error}
                 (same? expected_error actual_error)

                 _
                 false)))
         (_.coverage [/.of_try]
           (and (|> (/.of_try {try.#Failure expected_error})
                    (/.value state)
                    (pipe.when {try.#Failure actual_error}
                      (same? expected_error actual_error)

                      _
                      false))
                (|> (/.of_try {try.#Success expected})
                    (of /.functor each (same? expected))
                    (/.value state)
                    (try.else false))))
         (_.coverage [/.except]
           (|> (/.except ..oops [])
               (/.value state)
               (pipe.when {try.#Failure error}
                 (exception.is? ..oops error)

                 _
                 false)))
         (_.coverage [/.assertion]
           (and (|> (/.assertion ..oops [] false)
                    (/.value state)
                    (pipe.when {try.#Failure error}
                      (exception.is? ..oops error)

                      _
                      false))
                (|> (/.assertion ..oops [] true)
                    (/.value state)
                    (pipe.when {try.#Success _}
                      true

                      _
                      false))))
         )))

(the test|state
  Test
  (do [! random.monad]
    [state random.nat
     dummy random.nat
     expected random.int]
    (all _.and
         (_.coverage [/.state]
           (|> /.state
               (of /.functor each (same? state))
               (/.value state)
               (try.else false)))
         (_.coverage [/.with]
           (|> (do /.monad
                 [_ (/.with state)]
                 /.state)
               (of /.functor each (same? state))
               (/.value dummy)
               (try.else false)))
         (_.coverage [/.sub]
           (|> (/.sub [(of n.hex injection)
                       (function (_ new old)
                         (|> new (of n.hex projection) (try.else dummy)))]
                      (do /.monad
                        [state/hex /.state]
                        (in (|> state
                                (of n.hex injection)
                                (text#= state/hex)))))
               (/.value' state)
               (pipe.when {try.#Success [state' verdict]}
                 (and verdict
                      (n.= state state'))

                 _
                 false)))
         )))

(the test|operation
  Test
  (do [! random.monad]
    [state random.nat
     expected random.int]
    (all _.and
         (_.for [/.functor]
                (functorT.spec ..injection (..comparison state) /.functor))
         (_.for [/.monad]
                (monadT.spec ..injection (..comparison state) /.monad))

         (_.coverage [/.value]
           (|> (of /.monad in expected)
               (/.value state)
               (pipe.when {try.#Success actual}
                 (same? expected actual)

                 _
                 false)))
         (_.coverage [/.value']
           (|> (of /.monad in expected)
               (/.value' state)
               (pipe.when {try.#Success [state' actual]}
                 (and (same? state state')
                      (same? expected actual))

                 _
                 false)))
         ..test|state
         ..test|error
         )))

(the test|phase
  Test
  (do [! random.monad]
    [state/0 random.nat
     state/1 random.rev
     expected random.int]
    (all _.and
         (_.coverage [/.identity]
           (|> (/.identity archive.empty expected)
               (/.value state/0)
               (try#each (same? expected))
               (try.else false)))
         (_.coverage [/.composite]
           (let [phase (/.composite (is (/.Phase Nat Int Dec)
                                        (function (_ archive input)
                                          (of /.monad in (i.dec input))))
                                    (is (/.Phase Rev Dec Text)
                                        (function (_ archive input)
                                          (of /.monad in (%.dec input)))))]
             (|> (phase archive.empty expected)
                 (/.value' [state/0 state/1])
                 (pipe.when {try.#Success [[state/0' state/1'] actual]}
                   (and (text#= (%.dec (i.dec expected)) actual)
                        (same? state/0 state/0')
                        (same? state/1 state/1'))

                   _
                   false))))
         )))

(the .public test
  Test
  (`` (`` (<| (_.covering /._)
              (all _.and
                   (_.for [/.Operation]
                          ..test|operation)
                   (_.for [/.Phase]
                          ..test|phase)

                   (,, (.for .jvm (,, (.these jvm/host.test
                                              jvm/primitive.test
                                              jvm/type.test
                                              jvm/value.test
                                              jvm/runtime.test
                                              jvm/complex.test
                                              jvm/function.test
                                              jvm/reference.test
                                              jvm/loop.test
                                              jvm/when.test))
                             ... .js (,, (.these ["[1]/[0]" js]))
                             ... .lua (,, (.these ["[1]/[0]" lua]))
                             ... .python (,, (.these ["[1]/[0]" python]))
                             ... .ruby (,, (.these ["[1]/[0]" ruby]))
                             (,, (.these))))
                   )))))
