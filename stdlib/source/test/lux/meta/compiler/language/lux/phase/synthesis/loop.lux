... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except structure loop function)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception]]
   [data
    [number
     ["n" nat]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]]
   [test
    ["_" property (.only Test)]]]]
 [\\
  ["[0]" /
   [////
    ["[0]" analysis (.only Environment)]
    ["/[1]" synthesis (.only Member Path Synthesis)]
    [///
     [arity (.only Arity)]
     ["[0]" reference (.only Constant)
      ["[0]" variable (.only Register Variable)]]]]]])

(every (Scenario a)
  (-> Register Arity Register (Random [Register [a a]])))

(the (primitive offset arity next)
  (Scenario Synthesis)
  (`` (all random.either
           (,, (with_template [<synthesis> <random>]
                 [(do [! random.monad]
                    [example (of ! each (|>> <synthesis>) <random>)]
                    (in [next
                         [example
                          example]]))]

                 [//.bit random.bit]
                 [//.i64 (of ! each .i64 random.nat)]
                 [//.f64 random.frac]
                 [//.text (random.unicode 1)]
                 ))
           )))

(the (constant offset arity next)
  (Scenario Constant)
  (do random.monad
    [name (random.and (random.unicode 1)
                      (random.unicode 1))]
    (in [next
         [name
          name]])))

(the (variable offset arity next)
  (Scenario Variable)
  (let [local (do [! random.monad]
                [register (of ! each (|>> (n.% arity) ++) random.nat)]
                (in [next
                     [{variable.#Local (/.register_optimization offset register)}
                      {variable.#Local register}]]))]
    (when offset
      0 local
      _ (all random.either
             local
             (do [! random.monad]
               [foreign (of ! each (n.% offset) random.nat)]
               (in [next
                    [{variable.#Local foreign}
                     {variable.#Foreign foreign}]]))))))

(the (reference offset arity next)
  (Scenario Synthesis)
  (`` (all random.either
           (,, (with_template [<tag> <random>]
                 [(do [! random.monad]
                    [[next [exampleE exampleA]] (<random> offset arity next)]
                    (in [next
                         [(<tag> exampleE)
                          (<tag> exampleA)]]))]

                 [//.constant ..constant]
                 [//.variable ..variable]
                 )))))

(the (structure offset arity next)
  (Scenario Synthesis)
  (all random.either
       (do [! random.monad]
         [lefts random.nat
          right? random.bit
          [next [valueE valueA]] (..reference offset arity next)]
         (in [next
              [(//.variant
                [analysis.#lefts lefts
                 analysis.#right? right?
                 analysis.#value valueE])
               (//.variant
                [analysis.#lefts lefts
                 analysis.#right? right?
                 analysis.#value valueA])]]))
       (do [! random.monad]
         [[next [leftE leftA]] (..reference offset arity next)
          [next [rightE rightA]] (..reference offset arity next)]
         (in [next
              [(//.tuple (list leftE rightE))
               (//.tuple (list leftA rightA))]]))
       ))

(the path
  (Scenario Path)
  (let [pattern (is (Scenario Path)
                    (.function (again offset arity next)
                      (`` (all random.either
                               (random#in [next
                                           [//.path/pop
                                            //.path/pop]])
                               (,, (with_template [<path> <random>]
                                     [(do [! random.monad]
                                        [example (of ! each (|>> <path>) <random>)]
                                        (in [next
                                             [example
                                              example]]))]

                                     [//.path/bit random.bit]
                                     [//.path/i64 (of ! each .i64 random.nat)]
                                     [//.path/f64 random.frac]
                                     [//.path/text (random.unicode 1)]
                                     ))
                               (,, (with_template [<path>]
                                     [(do [! random.monad]
                                        [example (of ! each (|>> <path>)
                                                     (random.or random.nat
                                                                random.nat))]
                                        (in [next
                                             [example
                                              example]]))]

                                     [//.path/side]
                                     [//.path/member]
                                     ))
                               (random#in [(++ next)
                                           [(//.path/bind (/.register_optimization offset next))
                                            (//.path/bind next)]])
                               ))))
        sequential (is (Scenario Path)
                       (.function (again offset arity next)
                         (do random.monad
                           [[next [patternE patternA]] (pattern offset arity next)
                            [next [bodyE bodyA]] (..reference offset arity next)]
                           (in [next
                                [(//.path/seq patternE (//.path/then bodyE))
                                 (//.path/seq patternA (//.path/then bodyA))]]))))]
    (.function (again offset arity next)
      (do random.monad
        [[next [leftE leftA]] (sequential offset arity next)
         [next [rightE rightA]] (sequential offset arity next)]
        (in [next
             [(//.path/alt leftE rightE)
              (//.path/alt leftA rightA)]])))))

(the (branch offset arity next)
  (Scenario Synthesis)
  (let [random_member (is (Random Member)
                          (random.or random.nat
                                     random.nat))]
    (all random.either
         (all random.either
              (do [! random.monad]
                [[next [inputE inputA]] (..reference offset arity next)
                 [next [bodyE bodyA]] (..reference offset arity next)]
                (in [next
                     [(//.let [inputE (/.register_optimization offset next) bodyE])
                      (//.let [inputA next bodyA])]]))
              (do [! random.monad]
                [[next [testE testA]] (..reference offset arity next)
                 [next [thenE thenA]] (..reference offset arity next)
                 [next [elseE elseA]] (..reference offset arity next)]
                (in [next
                     [(//.if [testE thenE elseE])
                      (//.if [testA thenA elseA])]])))
         (all random.either
              (do [! random.monad]
                [[next [recordE recordA]] (..reference offset arity next)
                 path_length (of ! each (|>> (n.% 5) ++) random.nat)
                 path (random.list path_length random_member)]
                (in [next
                     [(//.get [path recordE])
                      (//.get [path recordA])]]))
              (do [! random.monad]
                [[next [inputE inputA]] (..reference offset arity next)
                 [next [pathE pathA]] (..path offset arity next)]
                (in [next
                     [(//.when [inputE pathE])
                      (//.when [inputA pathA])]])))
         )))

(the (loop offset arity next)
  (Scenario Synthesis)
  (all random.either
       (do random.monad
         [[next [firstE firstA]] (..reference offset arity next)
          [next [secondE secondA]] (..reference offset arity next)
          [next [iterationE iterationA]] (..reference offset arity next)]
         (in [next
              [(//.scope
                [//.#start (/.register_optimization offset next)
                 //.#inits (list firstE secondE)
                 //.#iteration iterationE])
               (//.scope
                [//.#start next
                 //.#inits (list firstA secondA)
                 //.#iteration iterationA])]]))
       ))

(the (function offset arity next)
  (Scenario Synthesis)
  (all random.either
       (do [! random.monad]
         [[next [firstE firstA]] (..variable offset arity next)
          [next [secondE secondA]] (..variable offset arity next)
          arity (of ! each (n.max 1) random.nat)
          [next [bodyE bodyA]] (..primitive 0 arity next)]
         (in [next
              [(//.abstraction
                [//.#environment (list firstE secondE)
                 //.#arity arity
                 //.#body bodyE])
               (//.abstraction
                [//.#environment (list firstA secondA)
                 //.#arity arity
                 //.#body bodyA])]]))
       ))

(the (control offset arity next)
  (Scenario Synthesis)
  (all random.either
       (..branch offset arity next)
       (..loop offset arity next)
       (..function offset arity next)
       ))

(the (extension offset arity next)
  (Scenario Synthesis)
  (do random.monad
    [name (random.unicode 10)
     [next [firstE firstA]] (..reference offset arity next)
     [next [secondE secondA]] (..reference offset arity next)
     [next [thirdE thirdA]] (..reference offset arity next)]
    (in [next
         [{//.#Extension name (list firstE secondE thirdE)}
          {//.#Extension name (list firstA secondA thirdA)}]])))

(the (scenario offset arity next)
  (Scenario Synthesis)
  (all random.either
       (..primitive offset arity next)
       (..structure offset arity next)
       (..reference offset arity next)
       (..control offset arity next)
       (..extension offset arity next)
       ))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (do [! random.monad]
             [expected_offset (of ! each (|>> (n.% 5) (n.+ 2)) random.nat)
              arity (of ! each (|>> (n.% 5) ++) random.nat)
              expected_inits (|> random.nat
                                 (of ! each (|>> .i64 //.i64))
                                 (random.list arity))
              [_ [expected iteration]] (..scenario expected_offset arity 0)]
             (_.coverage [/.Transform /.optimization /.register_optimization]
               (when (/.optimization true expected_offset expected_inits
                                     [//.#environment (|> expected_offset
                                                          list.indices
                                                          (list#each (|>> {variable.#Local})))
                                      //.#arity arity
                                      //.#body iteration])
                 {.#Some (//.scope [actual_offset actual_inits
                                    actual])}
                 (and (n.= expected_offset
                           actual_offset)
                      (of (list.equivalence //.equivalence) =
                          expected_inits
                          actual_inits)
                      (of //.equivalence = expected actual))
                 
                 _
                 false)))
           )))
