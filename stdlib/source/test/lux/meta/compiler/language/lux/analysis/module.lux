(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)]
    [collection
     ["[0]" list]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   ["[0]" meta (.only)
    ["[0]" configuration
     ["$[1]" \\test]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" // (.only)
    [////
     ["[2][0]" phase]]]]])

(def random_state
  (Random Lux)
  (do random.monad
    [version random.nat
     host (random.lower_cased 1)
     configuration ($configuration.random 5)]
    (in (//.state (//.info version host configuration)))))

(def nominal
  (Random Type)
  (do random.monad
    [name (random.lower_cased 1)]
    (in {.#Nominal name (list)})))

(def (new? hash it)
  (-> Nat .Module Bit)
  (and (same? hash (the .#module_hash it))
       (list.empty? (the .#module_aliases it))
       (list.empty? (the .#definitions it))
       (list.empty? (the .#imports it))
       (when (the .#module_state it)
         {.#Active}
         true
         
         _
         false)))

(def test|module
  Test
  (do [! random.monad]
    [state ..random_state
     name (random.lower_cased 1)
     hash random.nat
     expected_import (random.lower_cased 2)
     expected_alias (random.lower_cased 3)]
    (all _.and
         (_.coverage [/.empty]
           (..new? hash (/.empty hash)))
         (_.coverage [/.create]
           (|> (do /phase.monad
                 [_ (/.create hash name)]
                 (meta.module name))
               (/phase.result state)
               (try#each (..new? hash))
               (try.else false)))
         (_.coverage [/.exists?]
           (|> (do /phase.monad
                 [pre (/.exists? name)
                  _ (/.create hash name)
                  post (/.exists? name)]
                 (in (and (not pre) post)))
               (/phase.result state)
               (try.else false)))
         (_.coverage [/.with]
           (|> (do /phase.monad
                 [[it _] (/.with hash name
                           (in []))]
                 (in it))
               (/phase.result state)
               (try#each (..new? hash))
               (try.else false)))
         (_.coverage [/.import]
           (`` (and (,, (with_template [<expected>]
                          [(|> (do [! /phase.monad]
                                 [_ (/.create hash expected_import)
                                  [it ?] (/.with hash name
                                           (do !
                                             [_ (if <expected>
                                                  (/.import expected_import)
                                                  (in []))]
                                             (meta.imported? expected_import)))]
                                 (in ?))
                               (/phase.result state)
                               (try#each (bit#= <expected>))
                               (try.else false))]

                          [false]
                          [true])))))
         (_.coverage [/.alias]
           (|> (do [! /phase.monad]
                 [_ (/.create hash expected_import)
                  [it _] (/.with hash name
                           (do !
                             [_ (/.import expected_import)]
                             (/.alias expected_alias expected_import)))]
                 (in it))
               (/phase.result state)
               (try#each (|>> (the .#module_aliases)
                              (pipe.when
                                (list [actual_alias actual_import])
                                (and (same? expected_alias actual_alias)
                                     (same? expected_import actual_import))

                                _
                                false)))
               (try.else false)))
         )))

(def test|state
  Test
  (do [! random.monad]
    [state ..random_state
     name (random.lower_cased 1)
     hash random.nat]
    (`` (all _.and
             (,, (with_template [<set> <query> <not/0> <not/1>]
                   [(_.coverage [<set> <query>]
                      (|> (do [! /phase.monad]
                            [[it ?] (/.with hash name
                                      (do !
                                        [_ (<set> name)
                                         ? (<query> name)
                                         ~0 (<not/0> name)
                                         ~1 (<not/1> name)]
                                        (in (and ? (not ~0) (not ~1)))))]
                            (in ?))
                          (/phase.result state)
                          (try.else false)))]

                   [/.set_active   /.active?   /.compiled? /.cached?]
                   [/.set_compiled /.compiled? /.cached?   /.active?]
                   [/.set_cached   /.cached?   /.active?   /.compiled?]
                   ))
             (_.coverage [/.can_only_change_state_of_active_module]
               (and (,, (with_template [<pre> <post>]
                          [(|> (/.with hash name
                                 (do /phase.monad
                                   [_ (<pre> name)]
                                   (<post> name)))
                               (/phase.result state)
                               (pipe.when
                                 {try.#Success _}
                                 false
                                 
                                 {try.#Failure error}
                                 (text.contains? (the exception.#label /.can_only_change_state_of_active_module) error)))]

                          [/.set_compiled /.set_active]
                          [/.set_compiled /.set_compiled]
                          [/.set_compiled /.set_cached]
                          [/.set_cached /.set_active]
                          [/.set_cached /.set_compiled]
                          [/.set_cached /.set_cached]
                          ))))
             (_.coverage [/.unknown_module]
               (and (,, (with_template [<set>]
                          [(|> (<set> name)
                               (/phase.result state)
                               (pipe.when
                                 {try.#Success _}
                                 false
                                 
                                 {try.#Failure error}
                                 (text.contains? (the exception.#label /.unknown_module) error)))]

                          [/.set_active]
                          [/.set_compiled]
                          [/.set_cached]
                          ))))
             ))))

(def test|definition
  Test
  (do [! random.monad]
    [state ..random_state
     module_name (random.lower_cased 1)
     hash random.nat
     def_name (random.lower_cased 2)
     alias_name (random.lower_cased 3)

     public? random.bit
     def_type ..nominal
     arity (of ! each (|>> (n.% 10) ++) random.nat)
     labels|head (random.lower_cased 1)
     labels|tail (|> (random.lower_cased 1)
                     (random.only (|>> (text#= labels|head) not))
                     (random.set text.hash (-- arity))
                     (of ! each set.list))
     index (of ! each (n.% arity) random.nat)
     .let [definition {.#Definition [public? def_type []]}
           alias {.#Alias [module_name def_name]}]]
    (all _.and
         (_.coverage [/.define]
           (`` (and (,, (with_template [<global>]
                          [(|> (/.with hash module_name
                                 (/.define def_name <global>))
                               (/phase.result state)
                               (pipe.when
                                 {try.#Success _} true
                                 {try.#Failure _} false))]

                          [definition]
                          [{.#Type [public? def_type {.#Left [labels|head labels|tail]}]}]
                          [{.#Type [public? def_type {.#Right [labels|head labels|tail]}]}]
                          [{.#Tag [public? def_type (list.partial labels|head labels|tail) index]}]
                          [{.#Slot [public? def_type (list.partial labels|head labels|tail) index]}]))
                    (|> (/.with hash module_name
                          (do /phase.monad
                            [_ (/.define def_name definition)]
                            (/.define alias_name alias)))
                        (/phase.result state)
                        (pipe.when
                          {try.#Success _} true
                          {try.#Failure _} false)))))
         (_.coverage [/.cannot_define_more_than_once]
           (`` (and (,, (with_template [<global>]
                          [(|> (/.with hash module_name
                                 (do /phase.monad
                                   [_ (/.define def_name <global>)]
                                   (/.define def_name <global>)))
                               (/phase.result state)
                               (pipe.when
                                 {try.#Success _} false
                                 {try.#Failure _} true))]

                          [{.#Definition [public? def_type []]}]
                          [{.#Type [public? def_type {.#Left [labels|head labels|tail]}]}]
                          [{.#Type [public? def_type {.#Right [labels|head labels|tail]}]}]
                          [{.#Tag [public? def_type (list.partial labels|head labels|tail) index]}]
                          [{.#Slot [public? def_type (list.partial labels|head labels|tail) index]}]))
                    (|> (/.with hash module_name
                          (do /phase.monad
                            [_ (/.define def_name definition)
                             _ (/.define alias_name alias)]
                            (/.define alias_name alias)))
                        (/phase.result state)
                        (pipe.when
                          {try.#Success _} false
                          {try.#Failure _} true)))))
         )))

(def .public test
  Test
  (<| (_.covering /._)
      (all _.and
           ..test|module
           ..test|state
           ..test|definition
           )))
