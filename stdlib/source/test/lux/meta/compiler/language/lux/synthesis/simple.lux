(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]
     ["$[0]" hash]]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def .public random
  (Random /.Simple)
  (all random.or
       random.bit
       random.i64
       random.frac
       (random.lower_cased 1)
       ))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Simple])
      (do [! random.monad]
        [left ..random
         right ..random]
        (all _.and
             (_.for [/.equivalence]
                    ($equivalence.spec /.equivalence ..random))
             (_.for [/.hash]
                    ($hash.spec /.hash ..random))

             (_.coverage [/.format]
               (bit#= (text#= (/.format left) (/.format right))
                      (at /.equivalence = left right)))
             ))))
