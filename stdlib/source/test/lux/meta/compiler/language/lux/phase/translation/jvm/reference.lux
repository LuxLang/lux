... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io]
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monoid)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["[0]" i64 (.use "[1]#[0]" equivalence)]
     ["n" nat]]]
   [meta
    ["[0]" location]
    [compiler
     [meta
      ["[0]" archive]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" // (.only)
    ["[0]" host]
    ["[0]" runtime]
    ["[0]" function]
    [///
     ["[0]" extension]
     [//
      ["[0]" phase]
      ["[0]" synthesis]
      ["[0]" translation]]]]]]
 [//
  ["[0]T" complex]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [module (random.lower_cased 1)

         expected random.i64
         dummy (random.only (|>> (i64#= expected) not) random.i64)

         .let [extender (is extension.Extender
                            (function (_ _)
                              (undefined)))
               next (//.translate extender complexT.lux)
               @ [module 0 0]]

         before (of ! each (n.% 8) random.nat)
         after (of ! each (n.% 8) random.nat)
         .let [arity (++ (n.+ before after))
               local (++ before)]])
      (all _.and
           (_.coverage [/.variable]
             (|> (do try.monad
                   [[_ archive] (archive.reserve "" archive.empty)
                    [_ archive] (archive.reserve module archive)
                    .let [[_ host] (io.run! host.host)
                          state (is runtime.State
                                    (translation.state host module))]]
                   (<| (phase.value state)
                       (do phase.monad
                         [_ (translation.set_buffer translation.empty_buffer)
                          it (next archive (<| (synthesis.apply @)
                                               [(<| (synthesis.abstraction @)
                                                    [(list) arity (synthesis.local @ local)])
                                                (all list#composite
                                                     (list.repeated before (synthesis.i64 @ dummy))
                                                     (list (synthesis.i64 @ expected))
                                                     (list.repeated after (synthesis.i64 @ dummy)))]))]
                         (in (|> it
                                 [{.#None}]
                                 (of host evaluate)
                                 (try#each (|>> (as I64)
                                                (i64#= expected)))
                                 (try.else false))))))
                 (try.else false)))
           )))
