... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" text]
    ["[0]" binary
     ["[1]" \\injection]
     ["<[1]>" \\projection]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the random_module_state
  (Random Module_State)
  (all random.or
       (random#in [])
       (random#in [])
       (random#in [])
       ))

(the .public (random imports)
  (-> Natural (Random /.Descriptor))
  (all random.and
       (random.lower_cased 1)
       (random.lower_cased 1)
       random.natural
       ..random_module_state
       (random.set text.hash imports (random.lower_cased 2))
       ))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Descriptor
              /.#name /.#file /.#hash /.#state /.#references])
      (do random.monad
        [expected (..random 5)])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec /.equivalence (..random 1)))

           (_.for [/.Module]
                  (_.coverage [/.runtime]
                    (text.= "" /.runtime)))
           (_.coverage [/.injection /.projection]
             (|> expected
                 (binary.value /.injection)
                 (<binary>.value /.projection)
                 (try#each (|>> (of /.equivalence = (has /.#state {.#Cached} expected))))
                 (try.else false)))
           )))
