(.require
 [library
  [lux (.except)
   [abstract
    [\\specification
     ["$[0]" equivalence]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def random_definition
  (Random /.Definition)
  (all random.and
       (random.lower_cased 1)
       (random.maybe
        (all random.and
             random.nat
             random.nat
             random.nat
             ))
       ))

(def .public random
  (Random /.Category)
  (all random.or
       (random#in [])
       ..random_definition
       (random.lower_cased 2)
       (random.lower_cased 3)
       (random.lower_cased 4)
       (random.lower_cased 5)
       (random.lower_cased 6)
       ))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Category])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))
           )))
