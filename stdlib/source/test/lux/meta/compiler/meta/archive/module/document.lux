... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" binary
     ["[1]F" \\format]
     ["<[1]>" \\projection]]]
   [math
    ["[0]" random]
    [number
     ["[0]" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [///
    ["[1][0]" signature (.use "[1]#[0]" equivalence)]
    ["[1][0]" key]]]]
 ["[0]" ///
  ["[1][0]" signature]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Document])
      (do random.monad
        [signature/0 ///signature.random
         signature/1 (random.only (|>> (/signature#= signature/0) not)
                                  ///signature.random)
         .let [key/0 (/key.key signature/0 0)
               key/1 (/key.key signature/1 0)]
         expected random.nat]
        (all _.and
             (_.coverage [/.document /.content]
               (|> expected
                   (/.document key/0)
                   (/.content key/0)
                   (try#each (same? expected))
                   (try.else false)))
             (_.coverage [/.signature]
               (|> expected
                   (/.document key/0)
                   /.signature
                   (same? signature/0)))
             (_.coverage [/.marked?]
               (and (|> expected
                        (/.document key/0)
                        (/.marked? key/0)
                        (pipe.when
                          {try.#Success it} true
                          {try.#Failure error} false))
                    (|> expected
                        (/.document key/0)
                        (/.marked? key/1)
                        (pipe.when
                          {try.#Success it} false
                          {try.#Failure error} true))))
             (_.coverage [/.invalid_signature]
               (and (|> expected
                        (/.document key/0)
                        (/.content key/1)
                        (pipe.when
                          {try.#Success it}
                          false
                          
                          {try.#Failure error}
                          (exception.is? /.invalid_signature error)))
                    (|> expected
                        (/.document key/0)
                        (/.marked? key/1)
                        (pipe.when
                          {try.#Success it}
                          false
                          
                          {try.#Failure error}
                          (exception.is? /.invalid_signature error)))))
             (_.coverage [/.format /.projection]
               (|> expected
                   (/.document key/0)
                   (binaryF.value (/.format binaryF.nat))
                   (<binary>.value (/.projection key/0 <binary>.nat))
                   (pipe.when
                     {try.#Success it}
                     (and (/signature#= signature/0 (/.signature it))
                          (|> it
                              (/.content key/0)
                              (try#each (nat.= expected))
                              (try.else false)))
                     
                     {try.#Failure error}
                     false)))
             ))))
