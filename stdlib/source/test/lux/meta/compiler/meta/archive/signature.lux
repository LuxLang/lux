(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [\\specification
     ["$[0]" equivalence]]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)]
    ["[0]" binary
     ["[1]F" \\format]
     ["<[1]>" \\parser]]]
   [math
    ["[0]" random (.only Random)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" ////
  ["[1][0]" version]])

(def .public random
  (Random /.Signature)
  (all random.and
       (all random.and
            (random.upper_cased 1)
            (random.lower_cased 1))
       ////version.random
       ))

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Signature])
      (all _.and
           (_.for [/.equivalence]
                  ($equivalence.spec /.equivalence ..random))
           
           (do random.monad
             [left ..random
              right ..random]
             (_.coverage [/.description]
               (bit#= (at /.equivalence = left right)
                      (text#= (/.description left) (/.description right)))))
           (do random.monad
             [expected ..random]
             (_.coverage [/.format /.parser]
               (|> expected
                   (binaryF.result /.format)
                   (<binary>.result /.parser)
                   (try#each (at /.equivalence = expected))
                   (try.else false))))
           )))
