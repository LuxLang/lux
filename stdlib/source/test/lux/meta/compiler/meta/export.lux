... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" try (.use "[1]#[0]" functor)]
    [concurrency
     ["[0]" async]]]
   [data
    ["[0]" product]
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    [format
     ["[0]" tar]]
    ["[0]" binary (.only Binary) (.use "[1]#[0]" equivalence)
     ["<[1]>" \\projection]]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" sequence]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [world
    ["[0]" file]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" io
     ["[1]" context]]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [.let [/ .module_separator]
         source/0 (random.lower_cased 1)
         source/1 (random.lower_cased 2)
         target (random.lower_cased 3)

         .let [random_file (is (Random file.Path)
                               (of ! each (text.suffix io.lux_extension) (random.lower_cased 4)))]
         file/0' random_file
         .let [file/0 (%.message source/0 / file/0')]
         
         dir/0 (random.lower_cased 5)
         file/1' (of ! each (|>> (%.message dir/0 /)) random_file)
         .let [file/1 (%.message source/1 / file/1')]
         
         .let [random_content (is (Random Binary)
                                  (of ! each (|>> %.nat (of utf8.format injection)) random.nat))]
         content/0 random_content
         content/1 random_content]
        (all _.and
             (in (do [! async.monad]
                   [it (do (try.with !)
                         [.let [fs (file.mock /)]
                          _ (of fs make_directory source/0)
                          _ (of fs write file/0 content/0)
                          
                          _ (of fs make_directory source/1)
                          _ (of fs make_directory (%.message source/1 / dir/0))
                          _ (of fs write file/1 content/1)

                          _ (of fs make_directory target)
                          library_tar (/.library fs (list source/0 source/1))
                          _ (/.export fs [(list source/0 source/1) target])
                          export_tar (of fs read (%.message target / /.file))
                          export_tar (of ! in (<binary>.value tar.projection export_tar))]
                         (in [library_tar export_tar]))]
                   (all unit.and
                        (unit.coverage [/.library /.mode /.ownership]
                          (|> it
                              (try#each (|>> product.left
                                             sequence.list
                                             (pipe.when
                                               (list {tar.#Normal [actual_path/0 when/0 mode/0 ownership/0 actual_content/0]}
                                                     {tar.#Normal [actual_path/1 when/1 mode/1 ownership/1 actual_content/1]})
                                               (with_expansions [<test> (and (and (text#= file/0' (tar.from_path actual_path/0))
                                                                                  (same? /.mode mode/0)
                                                                                  (same? /.ownership ownership/0)
                                                                                  (binary#= content/0 (tar.data actual_content/0)))
                                                                             (and (text#= file/1' (tar.from_path actual_path/1))
                                                                                  (same? /.mode mode/1)
                                                                                  (same? /.ownership ownership/1)
                                                                                  (binary#= content/1 (tar.data actual_content/1))))]
                                                 (or <test>
                                                     (let [[[actual_path/0 actual_content/0] [actual_path/1 actual_content/1]]
                                                           [[actual_path/1 actual_content/1] [actual_path/0 actual_content/0]]]
                                                       <test>)))
                                               
                                               _
                                               false)))
                              (try.else false)))
                        (unit.coverage [/.export /.file]
                          (|> it
                              (try#each (|>> product.right
                                             sequence.list
                                             (pipe.when
                                               (list {tar.#Normal [actual_path/0 _ _ _ actual_content/0]}
                                                     {tar.#Normal [actual_path/1 _ _ _ actual_content/1]})
                                               (with_expansions [<test> (and (and (text#= file/0' (tar.from_path actual_path/0))
                                                                                  (binary#= content/0 (tar.data actual_content/0)))
                                                                             (and (text#= file/1' (tar.from_path actual_path/1))
                                                                                  (binary#= content/1 (tar.data actual_content/1))))]
                                                 (or <test>
                                                     (let [[[actual_path/0 actual_content/0] [actual_path/1 actual_content/1]]
                                                           [[actual_path/1 actual_content/1] [actual_path/0 actual_content/0]]]
                                                       <test>)))
                                               
                                               _
                                               false)))
                              (try.else false)))
                        )))
             ))))
