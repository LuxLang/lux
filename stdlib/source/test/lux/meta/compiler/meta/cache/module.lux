... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception]
    [concurrency
     ["[0]" async (.only Async) (.use "[1]#[0]" monad)]]]
   [math
    ["[0]" random]]
   [meta
    [macro
     ["[0]" template]]]
   [world
    ["[0]" file]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(`` (the (bad it)
      (-> (file.System Async) (file.System Async))
      (implementation
       (,, (template.with [<name>]
             [(the <name>
                (by it <name>))]

             [delimiter]
             [file?]
             [directory?]
             [modify]
             [write]
             [append]
             [move]
             [directory_files]
             [sub_directories]
             [file_size]
             [last_modified]
             [can_execute?]
             [read]
             [delete]
             ))

       (the (make_directory path)
         (async#in {try.#Failure ""}))
       )))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [@module random.natural]
        (all _.and
             (in (do [! async.monad]
                   [.let [/ "/"
                          fs (file.mock /)]
                    pre/0 (by fs directory? (/.path fs @module))
                    pre/1 (/.enabled? fs @module)
                    outcome (/.enable! ! fs @module)
                    post/0 (by fs directory? (/.path fs @module))
                    post/1 (/.enabled? fs @module)]
                   (unit.coverage [/.path /.enabled? /.enable!]
                     (and (not pre/0)
                          (not pre/1)
                          
                          (when outcome
                            {try.#Success _} true
                            {try.#Failure _} false)
                          
                          post/0
                          post/1))))
             (in (do [! async.monad]
                   [.let [/ "/"
                          fs (file.mock /)]
                    pre/0 (by fs directory? (/.path fs @module))
                    pre/1 (/.enabled? fs @module)
                    outcome (/.enable! ! (..bad fs) @module)
                    post/0 (by fs directory? (/.path fs @module))
                    post/1 (/.enabled? fs @module)]
                   (unit.coverage [/.cannot_enable]
                     (and (not pre/0)
                          (not pre/1)
                          
                          (when outcome
                            {try.#Success _}
                            false
                            
                            {try.#Failure error}
                            (exception.is? /.cannot_enable error))
                          
                          (not post/0)
                          (not post/1)))))
             ))))
