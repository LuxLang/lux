... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" dictionary]
     ["[0]" set (.use "[1]#[0]" equivalence)]]]
   [math
    ["[0]" random (.only Random)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [module/0 (random.lower_cased 1)
         module/1 (random.lower_cased 2)
         module/2 (random.lower_cased 3)])
      (all _.and
           (<| (_.for [/.Ancestry])
               (all _.and
                    (_.coverage [/.fresh]
                      (set.empty? /.fresh))
                    ))
           (<| (_.for [/.Graph])
               (all _.and
                    (_.coverage [/.empty]
                      (dictionary.empty? /.empty))
                    (_.coverage [/.modules]
                      (let [expected (set.of_list text.hash (list module/0 module/1 module/2))
                            actual (|> /.empty
                                       (dictionary.has module/0 /.fresh)
                                       (dictionary.has module/1 /.fresh)
                                       (dictionary.has module/2 /.fresh)
                                       /.modules
                                       (set.of_list text.hash))]
                        (set#= expected actual)))
                    ))
           (<| (_.for [/.Dependency])
               (all _.and
                    (_.coverage [/.graph]
                      (let [expected (set.of_list text.hash (list module/0 module/1 module/2))
                            actual (|> (/.graph (list [module/0 /.fresh]
                                                      [module/1 /.fresh]
                                                      [module/2 /.fresh]))
                                       /.modules
                                       (set.of_list text.hash))]
                        (set#= expected actual)))
                    ))
           (<| (_.for [/.Order])
               (all _.and
                    (_.coverage [/.load_order]
                      false)
                    ))
           )))
