... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["<>" projection]]
   [control
    ["[0]" pipe]
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid monad)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" configuration (.only)
     ["$[1]" \\test]]]
   ["[0]" program
    ["<[1]>" \\projection]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[1][0]" compiler (.only Compiler)]]]
 ["$[0]" /
  ["[1][0]" compiler]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Service
              /.#Compilation /.#Interpretation /.#Export
              
              /.service])
      (let [(open "list#[0]") (list.equivalence text.equivalence)])
      (do [! random.monad]
        [amount (by ! each (|>> (n.% 5) ++) random.natural)
         sources (random.list amount (random.lower_cased 1))
         host_dependencies (random.list amount (random.lower_cased 2))
         libraries (random.list amount (random.lower_cased 3))
         target (random.lower_cased 4)
         module (random.lower_cased 5)
         program (random.lower_cased 6)
         compilers (random.list amount $/compiler.random)
         configuration ($configuration.random 5)
         .let [compilation' (all list#composite
                                 (list#conjoint (list#each (|>> (list "--host_dependency")) host_dependencies))
                                 (list#conjoint (list#each (|>> (list "--library")) libraries))
                                 (list#conjoint (list#each (|>> /compiler.as_text (list "--compiler")) compilers))
                                 (list#conjoint (list#each (|>> (list "--source")) sources))
                                 (list "--target" target
                                       "--module" module
                                       "--configuration" (configuration.as_text configuration)))
               export (all list#composite
                           (list#conjoint (list#each (|>> (list "--source")) sources))
                           (list "--target" target))]]
        (all _.and
             (_.for [/.Compilation
                     /.#host_dependencies /.#libraries /.#compilers /.#sources /.#target /.#module /.#program /.#configuration]
                    (`` (all _.and
                             (,, (template.with [<type> <slot> <?>]
                                   [(_.coverage [<type>]
                                      (|> (list.partial "build" compilation')
                                          (<program>.value /.service)
                                          (try#each (|>> (pipe.when
                                                           {/.#Compilation it}
                                                           (|> it
                                                               (its <slot>)
                                                               <?>)
                                                           
                                                           _
                                                           false)))
                                          (try.else false)))]

                                   [/.Host_Dependency /.#host_dependencies (list#= host_dependencies)]
                                   [/.Library /.#libraries (list#= libraries)]
                                   [/compiler.Compiler /.#compilers (by (list.equivalence /compiler.equivalence) = compilers)]
                                   [/.Source /.#sources (list#= sources)]
                                   [/.Target /.#target (same? target)]
                                   [/.Module /.#module (same? module)]
                                   [configuration.Configuration /.#configuration (configuration.= configuration)]
                                   ))
                             )))
             (_.coverage [/.Interpretation]
               (`` (and (,, (template.with [<slot> <?>]
                              [(|> (list.partial "repl" compilation')
                                   (<program>.value /.service)
                                   (try#each (|>> (pipe.when
                                                    {/.#Interpretation it}
                                                    (|> it
                                                        (its <slot>)
                                                        <?>)
                                                    
                                                    _
                                                    false)))
                                   (try.else false))]

                              [/.#host_dependencies (list#= host_dependencies)]
                              [/.#libraries (list#= libraries)]
                              [/.#compilers (by (list.equivalence /compiler.equivalence) = compilers)]
                              [/.#sources (list#= sources)]
                              [/.#target (same? target)]
                              [/.#module (same? module)]
                              [/.#configuration (configuration.= configuration)]
                              )))))
             (_.coverage [/.Export]
               (`` (and (,, (template.with [<side> <?>]
                              [(|> (list.partial "export" export)
                                   (<program>.value /.service)
                                   (try#each (|>> (pipe.when
                                                    {/.#Export it}
                                                    (|> it
                                                        <side>
                                                        <?>)
                                                    
                                                    _
                                                    false)))
                                   (try.else false))]

                              [product.left (list#= sources)]
                              [product.right (same? target)]
                              )))))
             (_.coverage [/.target]
               (`` (and (,, (template.with [<it>]
                              [(same? target (/.target <it>))]

                              [{/.#Compilation [/.#host_dependencies host_dependencies
                                                /.#libraries libraries
                                                /.#compilers compilers
                                                /.#sources sources
                                                /.#target target
                                                /.#module module
                                                /.#program {.#Some program}
                                                /.#configuration configuration]}]
                              [{/.#Interpretation [/.#host_dependencies host_dependencies
                                                   /.#libraries libraries
                                                   /.#compilers compilers
                                                   /.#sources sources
                                                   /.#target target
                                                   /.#module module
                                                   /.#program {.#Some program}
                                                   /.#configuration configuration]}]
                              [{/.#Export [sources target]}]
                              )))))

             $/compiler.test
             ))))
