... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [control
    [function
     ["?" predicate]]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [meta
    ["[0]" static]
    [macro
     ["[0]" expansion]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" category]
   ["[0]" box]
   ["[0]" descriptor]
   ["[0]" reflection]
   ["[0]" signature]]]
 ["[0]" /
  ["[1][0]" box]
  ["[1][0]" category]
  ["[1][0]" descriptor]
  ["[1][0]" reflection]
  ["[1][0]" signature]])

(<| (expansion.let [,*descriptor_primitives (these descriptor.boolean
                                                   descriptor.byte
                                                   descriptor.short
                                                   descriptor.int
                                                   descriptor.long
                                                   descriptor.float
                                                   descriptor.double
                                                   descriptor.char)
                    ,*reflection_primitives (these reflection.boolean
                                                   reflection.byte
                                                   reflection.short
                                                   reflection.int
                                                   reflection.long
                                                   reflection.float
                                                   reflection.double
                                                   reflection.char)
                    ,*signature_primitives (these signature.boolean
                                                  signature.byte
                                                  signature.short
                                                  signature.int
                                                  signature.long
                                                  signature.float
                                                  signature.double
                                                  signature.char)
                    ,*primitives (these /.boolean
                                        /.byte
                                        /.short
                                        /.int
                                        /.long
                                        /.float
                                        /.double
                                        /.char)
                    ,*simple (these /.void
                                    ,*primitives)
                    ,*boxes (these box.boolean
                                   box.byte
                                   box.short
                                   box.int
                                   box.long
                                   box.float
                                   box.double
                                   box.char)])
    (these (the random_class
             (Random (/.Type category.Class))
             (let [boxes (list ,*boxes)
                   boxes_amount (list.size boxes)]
               (do [! random.monad]
                 [choice (of ! each (n.% boxes_amount) random.natural)
                  choice (random.try (in (list.item choice boxes)))]
                 (in (/.class (list) choice)))))
           (the .public random
             (Random (/.Type category.Value))
             (let [primitives (is (List (/.Type category.Primitive))
                                  (list ,*primitives))
                   primitives_amount (list.size primitives)

                   boxes (list ,*boxes)
                   boxes_amount (list.size boxes)]
               (all random.either
                    (do [! random.monad]
                      [choice (of ! each (n.% primitives_amount) random.natural)]
                      (random.try (in (list.item choice primitives))))
                    ..random_class))))
    (the .public test
      Test
      (<| (_.covering /._)
          (do [! random.monad]
            [argument_0 ..random
             argument_1 ..random
             name (random.lower_cased 2)
             return (is (Random (/.Type category.Return))
                        (all random.either
                             (in /.void)
                             ..random))
             expected_class ..random_class])
          (_.for [/.Type])
          (all _.and
               (_.for [/.equivalence /.=]
                      (static.when (same? /.equivalence /.=)
                        (equivalenceT.spec /.equivalence ..random)))
               (_.for [/.hash]
                      (hashT.spec /.hash ..random))

               (_.coverage [,*simple]
                 (let [options (is (List (/.Type category.Return))
                                   (list ,*simple))
                       uniques (set.of_list /.hash options)]
                   (n.= (list.size options)
                        (set.size uniques))))

               (_.coverage [/.descriptor]
                 (set.= (set.of_list descriptor.hash (list ,*descriptor_primitives))
                        (set.of_list descriptor.hash (list#each /.descriptor (list ,*primitives)))))
               (_.coverage [/.reflection]
                 (set.= (set.of_list reflection.hash (list ,*reflection_primitives))
                        (set.of_list reflection.hash (list#each /.reflection (list ,*primitives)))))
               (_.coverage [/.signature]
                 (set.= (set.of_list signature.hash (list ,*signature_primitives))
                        (set.of_list signature.hash (list#each /.signature (list ,*primitives)))))
               
               (_.coverage [/.class]
                 (let [options (is (List (/.Type category.Class))
                                   (list#each (/.class (list)) (list ,*boxes)))
                       uniques (set.of_list /.hash options)]
                   (n.= (list.size options)
                        (set.size uniques))))
               (_.coverage [/.declaration /.as_class]
                 (let [expected (is (List (/.Type category.Class))
                                    (list#each (|>> (/.declaration (list)) /.as_class) (list ,*boxes)))
                       actual (is (List (/.Type category.Class))
                                  (list#each (/.class (list)) (list ,*boxes)))]
                   (of (list.equivalence /.equivalence) =
                       expected
                       actual)))
               (_.coverage [/.lower /.upper]
                 (not (/.= (/.lower expected_class)
                           (/.upper expected_class))))
               (_.coverage [/.wildcard]
                 (and (not (/.= (/.lower expected_class)
                                /.wildcard))
                      (not (/.= (/.upper expected_class)
                                /.wildcard))))
               (_.coverage [/.array]
                 (and (let [options (is (List (/.Type category.Array))
                                        (list#each (|>> (/.class (list)) /.array)
                                                   (list ,*boxes)))
                            uniques (set.of_list /.hash options)]
                        (n.= (list.size options)
                             (set.size uniques)))
                      (let [single (list#each (|>> (/.class (list)) /.array) (list ,*boxes))
                            double (list#each /.array single)]
                        (not (of (list.equivalence /.equivalence) =
                                 single
                                 double)))))

               /box.test
               /category.test
               /descriptor.test
               /reflection.test
               /signature.test
               ))))
