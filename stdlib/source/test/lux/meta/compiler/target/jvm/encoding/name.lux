... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" text]]
   [math
    ["[0]" random (.only Random)]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 [///
  [type
   ["[0]" box]]])

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.External /.Internal])
      (do [! random.monad]
        [expected box.random])
      (all _.and
           (_.coverage [/.external /.internal]
             (|> expected
                 /.internal
                 /.external
                 (text.= expected)))
           (_.coverage [/.read]
             (|> expected
                 /.internal
                 /.read
                 (text.= expected)
                 not))
           (_.coverage [/.safe]
             (|> expected
                 /.safe
                 (text.= expected)))
           (_.coverage [/.external_delimiter /.internal_delimiter]
             (and (and (|> expected
                           /.safe
                           (text.contains? /.external_delimiter))
                       (|> expected
                           /.safe
                           (text.contains? /.internal_delimiter)
                           not))
                  (and (|> expected
                           /.internal
                           /.read
                           (text.contains? /.external_delimiter)
                           not)
                       (|> expected
                           /.internal
                           /.read
                           (text.contains? /.internal_delimiter)))))
           (_.coverage [/.qualified]
             (let [actual (/.qualified .prelude expected)]
               (and (not (text.= expected actual))
                    (text.contains? /.external_delimiter actual)
                    (not (text.contains? /.internal_delimiter actual)))))
           )))
