... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [control
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" binary (.only)
     ["![1]" \\injection]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" functor)]
    [number
     ["n" natural]
     ["i" integer]]]
   [meta
    ["[0]" static]
    [macro
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(template.with [,name ,type ,constructor ,minimum ,maximum]
  [(the ,name
     (Random ,type)
     (let [negative (++ (/.value ,minimum))
           positive (-- (/.value ,maximum))
           range (-- (i.- negative positive))]
       (|> random.integer
           (random#each (|>> (i.% range)
                             (i.+ negative)))
           (random.one ,constructor))))]

  [random_s1 /.S1 /.s1 /.minimum/1 /.maximum/1]
  [random_s2 /.S2 /.s2 /.minimum/2 /.maximum/2]
  [random_s4 /.S4 /.s4 /.minimum/4 /.maximum/4]
  )

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Signed])
      (do [! random.monad]
        [expected_s1 ..random_s1
         expected_s2 ..random_s2
         expected_s4 ..random_s4])
      (all _.and
           (_.for [/.equivalence /.=]
                  (static.when (same? /.equivalence /.=)
                    (all _.and
                         (equivalenceT.spec /.equivalence ..random_s1)
                         (equivalenceT.spec /.equivalence ..random_s2)
                         (equivalenceT.spec /.equivalence ..random_s4)
                         )))
           (_.for [/.order]
                  (all _.and
                       (orderT.spec /.order ..random_s1)
                       (orderT.spec /.order ..random_s2)
                       (orderT.spec /.order ..random_s4)
                       ))
           
           (<| (_.for [/.S1])
               (all _.and
                    (_.coverage [/.minimum/1 /.maximum/1]
                      (of /.order < /.maximum/1 /.minimum/1))
                    (_.coverage [/.s1 /.value]
                      (|> expected_s1
                          /.value
                          /.s1
                          (try#each (/.= expected_s1))
                          (try.else false)))
                    (_.coverage [/.-/1]
                      (let [zero (/.-/1 expected_s1 expected_s1)]
                        (|> zero
                            (try#each (|>> /.value
                                           (i.= +0)))
                            (try.else false))))
                    (_.coverage [/.+/1]
                      (<| (try.else false)
                          (do try.monad
                            [zero (/.-/1 expected_s1 expected_s1)
                             left (/.+/1 expected_s1 zero)
                             right (/.+/1 zero expected_s1)]
                            (in (/.= left right)))))
                    ))
           (<| (_.for [/.S2])
               (all _.and
                    (_.coverage [/.minimum/2 /.maximum/2]
                      (of /.order < /.maximum/2 /.minimum/2))
                    (_.coverage [/.s2 /.value]
                      (|> expected_s2
                          /.value
                          /.s2
                          (try#each (/.= expected_s2))
                          (try.else false)))
                    (_.coverage [/.-/2]
                      (let [zero (/.-/2 expected_s2 expected_s2)]
                        (|> zero
                            (try#each (|>> /.value
                                           (i.= +0)))
                            (try.else false))))
                    (_.coverage [/.+/2]
                      (<| (try.else false)
                          (do try.monad
                            [zero (/.-/2 expected_s2 expected_s2)
                             left (/.+/2 expected_s2 zero)
                             right (/.+/2 zero expected_s2)]
                            (in (/.= left right)))))
                    ))
           (<| (_.for [/.S4])
               (all _.and
                    (_.coverage [/.minimum/4 /.maximum/4]
                      (of /.order < /.maximum/4 /.minimum/4))
                    (_.coverage [/.s4 /.value]
                      (|> expected_s4
                          /.value
                          /.s4
                          (try#each (/.= expected_s4))
                          (try.else false)))
                    (_.coverage [/.-/4]
                      (let [zero (/.-/4 expected_s4 expected_s4)]
                        (|> zero
                            (try#each (|>> /.value
                                           (i.= +0)))
                            (try.else false))))
                    (_.coverage [/.+/4]
                      (<| (try.else false)
                          (do try.monad
                            [zero (/.-/4 expected_s4 expected_s4)
                             left (/.+/4 expected_s4 zero)
                             right (/.+/4 zero expected_s4)]
                            (in (/.= left right)))))
                    ))

           (_.coverage [/.value_exceeds_the_scope]
             (and (exception.failure? /.value_exceeds_the_scope (/.+/1 /.minimum/1 /.minimum/1))
                  (exception.failure? /.value_exceeds_the_scope (/.+/1 /.maximum/1 /.maximum/1))

                  (exception.failure? /.value_exceeds_the_scope (/.+/2 /.minimum/2 /.minimum/2))
                  (exception.failure? /.value_exceeds_the_scope (/.+/2 /.maximum/2 /.maximum/2))

                  (exception.failure? /.value_exceeds_the_scope (/.+/4 /.minimum/4 /.minimum/4))
                  (exception.failure? /.value_exceeds_the_scope (/.+/4 /.maximum/4 /.maximum/4))))

           (_.coverage [/.lifted/2]
             (|> expected_s1
                 /.lifted/2
                 /.value
                 (i.= (/.value expected_s1))))
           (_.coverage [/.lifted/4]
             (|> expected_s2
                 /.lifted/4
                 /.value
                 (i.= (/.value expected_s2))))

           (_.coverage [/.bytes/1 /.bytes/2 /.bytes/4]
             (and (n.= /.bytes/2 (n.+ /.bytes/1 /.bytes/1))
                  (n.= /.bytes/4 (n.+ /.bytes/2 /.bytes/2))))
           (_.coverage [/.injection/1 /.injection/2 /.injection/4]
             (and (n.= /.bytes/1 (binary.size (!binary.value /.injection/1 expected_s1)))
                  (n.= /.bytes/2 (binary.size (!binary.value /.injection/2 expected_s2)))
                  (n.= /.bytes/4 (binary.size (!binary.value /.injection/4 expected_s4)))))
           )))
