... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]]
   [control
    [function
     ["?" predicate]]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [meta
    ["[0]" static]
    [macro
     ["[0]" expansion]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" category]
    ["[0]" box]
    [//
     [encoding
      [name
       ["[0]" internal]]]]]]])

(<| (expansion.let [,*primitives (these /.boolean
                                        /.byte
                                        /.short
                                        /.int
                                        /.long
                                        /.float
                                        /.double
                                        /.char)
                    ,*simple (these /.void
                                    ,*primitives)
                    ,*objects (these /.var
                                     /.wildcard)
                    ,*boxes (these box.boolean
                                   box.byte
                                   box.short
                                   box.int
                                   box.long
                                   box.float
                                   box.double
                                   box.char)])
    (these (the .public random
             (Random (/.Descriptor category.Value))
             (let [primitives (is (List (/.Descriptor category.Primitive))
                                  (list ,*primitives))
                   primitives_amount (list.size primitives)

                   boxes (list ,*boxes)
                   boxes_amount (list.size boxes)]
               (all random.either
                    (do [! random.monad]
                      [choice (by ! each (n.% primitives_amount) random.natural)]
                      (random.try (in (list.item choice primitives))))
                    (do [! random.monad]
                      [choice (by ! each (n.% boxes_amount) random.natural)
                       choice (random.try (in (list.item choice boxes)))]
                      (in (/.class choice)))))))
    (the .public test
      Test
      (<| (_.covering /._)
          (do [! random.monad]
            [argument_0 ..random
             argument_1 ..random
             return (is (Random (/.Descriptor category.Return))
                        (all random.either
                             (in /.void)
                             ..random))])
          (_.for [/.Descriptor])
          (all _.and
               (_.for [/.equivalence /.=]
                      (static.when (same? /.equivalence /.=)
                        (equivalenceT.spec /.equivalence ..random)))
               (_.for [/.hash]
                      (hashT.spec /.hash ..random))

               (_.coverage [,*simple]
                 (let [options (is (List (/.Descriptor category.Return))
                                   (list ,*simple))
                       uniques (set.of_list /.hash options)]
                   (n.= (list.size options)
                        (set.size uniques))))
               (_.coverage [,*objects]
                 (let [options (is (List (/.Descriptor category.Return))
                                   (list ,*objects))
                       uniques (set.of_list /.hash options)]
                   (n.= 1
                        (set.size uniques))))
               (_.coverage [/.descriptor]
                 (let [options (is (List (/.Descriptor category.Return))
                                   (all list#composite
                                        (list ,*simple)
                                        (list#each /.class (list ,*boxes))))
                       uniques (set.of_list /.hash options)]
                   (n.= (list.size options)
                        (set.size uniques))))
               
               (_.coverage [/.class]
                 (let [options (is (List (/.Descriptor category.Class))
                                   (list#each /.class (list ,*boxes)))
                       uniques (set.of_list /.hash options)]
                   (n.= (list.size options)
                        (set.size uniques))))
               (_.coverage [/.class_name]
                 (let [options (list#each (|>> /.class /.class_name internal.external) (list ,*boxes))
                       uniques (set.of_list text.hash options)]
                   (n.= (list.size options)
                        (set.size uniques))))
               (_.coverage [/.class_prefix /.class_suffix]
                 (|> (list ,*boxes)
                     (list#each (|>> /.class /.descriptor))
                     (list.every? (?.and (text.starts_with? /.class_prefix)
                                         (text.ends_with? /.class_suffix)))))
               (_.coverage [/.declaration /.as_class]
                 (let [expected (is (List (/.Descriptor category.Class))
                                    (list#each (|>> /.declaration /.as_class) (list ,*boxes)))
                       actual (is (List (/.Descriptor category.Class))
                                  (list#each /.class (list ,*boxes)))]
                   (by (list.equivalence /.equivalence) =
                       expected
                       actual)))
               (_.coverage [/.lower]
                 (let [options (is (List (/.Descriptor category.Parameter))
                                   (list#each (|>> /.class /.lower) (list ,*boxes)))
                       uniques (set.of_list /.hash options)]
                   (n.= 1
                        (set.size uniques))))
               (_.coverage [/.upper]
                 (let [options (is (List (/.Descriptor category.Parameter))
                                   (list#each (|>> /.class /.upper) (list ,*boxes)))
                       uniques (set.of_list /.hash options)]
                   (n.= (list.size options)
                        (set.size uniques))))
               (_.coverage [/.array]
                 (and (let [options (is (List (/.Descriptor category.Array))
                                        (list#each (|>> /.class /.array) (list ,*boxes)))
                            uniques (set.of_list /.hash options)]
                        (n.= (list.size options)
                             (set.size uniques)))
                      (let [single (list#each (|>> /.class /.array) (list ,*boxes))
                            double (list#each /.array single)]
                        (not (by (list.equivalence /.equivalence) =
                                 single
                                 double)))))
               (_.coverage [/.array_prefix]
                 (|> (list ,*boxes)
                     (list#each (|>> /.class /.array /.descriptor))
                     (list.every? (text.starts_with? /.array_prefix))))
               (_.coverage [/.method]
                 (let [it (/.method [(list argument_0 argument_1) return])]
                   (and (text.contains? (/.descriptor argument_0)
                                        (/.descriptor it))
                        (text.contains? (/.descriptor argument_1)
                                        (/.descriptor it))
                        (text.contains? (/.descriptor return)
                                        (/.descriptor it)))))
               ))))
