... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["[0]" try]]
   [data
    ["[0]" bit]
    ["[0]" binary (.only)
     ["![1]" \\injection]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [/////
    ["[0]" type (.only)
     ["[1]T" \\test]]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [input_0 typeT.random
         input_1 typeT.random
         output_0 typeT.random])
      (_.for [/.Registry /.random])
      (all _.and
           (_.for [/.equivalence /.=]
                  (static.when (same? /.equivalence /.=)
                    (equivalenceT.spec /.equivalence /.random)))
           
           (_.coverage [/.static /.virtual]
             (<| (try.else false)
                 (do try.monad
                   [.let [method (type.method [(list) (list input_0 input_1) output_0 (list)])]
                    static (/.static method)
                    virtual (/.virtual method)]
                   (in (not (/.= static virtual))))))
           (_.coverage [/.has]
             (<| (try.else false)
                 (do try.monad
                   [.let [method (type.method [(list) (list input_0 input_1) output_0 (list)])]
                    static (/.static method)
                    virtual (/.virtual method)]
                   (in (same? virtual (/.has static virtual))))))
           (do [! random.monad]
             [sample_0 /.random
              sample_1 /.random]
             (_.coverage [/.as_binary]
               (bit.= (/.= sample_0
                           sample_1)
                      (binary.= (!binary.value /.as_binary sample_0)
                                (!binary.value /.as_binary sample_1)))))
           (do [! random.monad]
             [sample_0 /.random]
             (_.coverage [/.length]
               (n.= /.length
                    (binary.size (!binary.value /.as_binary sample_0)))))
           )))
