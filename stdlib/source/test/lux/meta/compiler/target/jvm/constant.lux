... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [data
    ["[0]" bit]
    ["[0]" binary (.only)
     ["![1]" \\injection]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [meta
    ["[0]" static]
    [macro
     ["^" pattern]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" tag]
  ["[1][0]" utf8]
  ["[1][0]" class]
  ["[1][0]" name_and_type]
  ["[1][0]" reference]
  ["[1][0]" integer]
  ["[1][0]" float]
  ["[1][0]" long]
  ["[1][0]" double]
  ["[1][0]" string]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [sample_0 /.random
         sample_1 /.random])
      (_.for [/.Constant /.random
              /.#UTF8 /.#Integer /.#Float /.#Long
              /.#Double /.#Class /.#String /.#Field
              /.#Method /.#Interface_Method /.#Name_And_Type])
      (all _.and
           (_.for [/.equivalence /.=]
                  (static.when (same? /.equivalence /.=)
                    (equivalenceT.spec /.equivalence /.random)))

           (_.coverage [/.as_binary]
             (bit.= (/.= sample_0
                         sample_1)
                    (binary.= (!binary.value /.as_binary sample_0)
                              (!binary.value /.as_binary sample_1))))

           (_.coverage [/.size /.single /.double]
             (let [example sample_0]
               (or (bit.= (n.= /.single (/.size example))
                          (match? (^.or {/.#UTF8 _} {/.#Integer _} {/.#Float _}
                                        {/.#Class _} {/.#String _} {/.#Field _}
                                        {/.#Method _} {/.#Interface_Method _} {/.#Name_And_Type _})
                                  example))
                   (bit.= (n.= /.double (/.size example))
                          (match? (^.or {/.#Long _} {/.#Double _}) example)))))

           /tag.test
           /utf8.test
           /class.test
           /name_and_type.test
           /reference.test
           /integer.test
           /float.test
           /long.test
           /double.test
           /string.test
           )))
