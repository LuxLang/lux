... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    [monad (.only do)]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["[0]" pipe]
    ["[0]" function]
    ["[0]" maybe (.use "[1]#[0]" functor)]
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.only \n) (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" nat]
     ["i" int]
     ["f" frac]
     ["[0]" i64]]]
   [meta
    ["[0]" static]
    [macro
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

... http://www.lua.org/manual/5.3/manual.html#pdf-load
(ffi.import (load [Text] "?" (-> Any Any)))

(def (expression ??? it)
  (-> (-> Any Bit) /.Expression Bit)
  (|> it
      /.code
      (format "return ")
      ..load
      (maybe#each (|>> (function.on []) ???))
      (maybe.else false)))

(def test|literal
  Test
  (do [! random.monad]
    [boolean random.bit
     int random.int
     float random.frac
     string (random.upper_cased 5)]
    (all _.and
         (_.coverage [/.nil]
           (|> /.nil
               /.code
               ..load
               (pipe.when
                 {.#None} true
                 {.#Some _} false)))
         (_.coverage [/.boolean]
           (expression (|>> (as Bit) (bit#= boolean))
                       (/.boolean boolean)))
         (_.coverage [/.int]
           (expression (|>> (as Int) (i.= int))
                       (/.int int)))
         (_.coverage [/.float]
           (expression (|>> (as Frac) (f.= float))
                       (/.float float)))
         (_.coverage [/.string]
           (expression (|>> (as Text) (text#= string))
                       (/.string string)))
         )))

(def test|boolean
  Test
  (do [! random.monad]
    [left random.bit
     right random.bit]
    (`` (all _.and
             (,, (with_template [</> <lux>]
                   [(_.coverage [</>]
                      (let [expected (<lux> left right)]
                        (expression (|>> (as Bit) (bit#= expected))
                                    (</> (/.boolean left) (/.boolean right)))))]

                   [/.or .or]
                   [/.and .and]
                   ))
             (_.coverage [/.not]
               (expression (|>> (as Bit) (bit#= (not left)))
                           (/.not (/.boolean left))))
             ))))

(with_template [<bits>]
  [(`` (def (,, (template.symbol [int_ <bits>]))
         (Random Int)
         (let [mask (|> 1 (i64.left_shifted (-- <bits>)) --)]
           (random#each (|>> (i64.and mask) .int) random.nat))))]

  [16]
  [32]
  )

(def test|int
  Test
  (do [! random.monad]
    [left random.int
     right random.int
     shift (of ! each (n.% 65) random.nat)

     parameter (random.only (|>> (i.= +0) not)
                            random.int)
     subject random.int]
    (`` (all _.and
             (,, (with_template [</> <lux>]
                   [(_.coverage [</>]
                      (let [expected (<lux> left right)]
                        (expression (|>> (as Int) (i.= expected))
                                    (</> (/.int left) (/.int right)))))]

                   [/.bit_or i64.or]
                   [/.bit_xor i64.xor]
                   [/.bit_and i64.and]
                   ))
             (_.coverage [/.opposite]
               (expression (|>> (as Int) (i.= (i.- left +0)))
                           (/.opposite (/.int left))))
             (_.coverage [/.bit_shl]
               (let [expected (i64.left_shifted shift left)]
                 (expression (|>> (as Int) (i.= expected))
                             (/.bit_shl (/.int (.int shift))
                                        (/.int left)))))
             (_.coverage [/.bit_shr]
               (let [expected (i64.right_shifted shift left)]
                 (expression (|>> (as Int) (i.= expected))
                             (/.bit_shr (/.int (.int shift))
                                        (/.int left)))))
             (_.coverage [/.//]
               (let [expected (if (or (i.= (i.signum parameter) (i.signum subject))
                                      (i.= +0 (i.% parameter subject)))
                                (i./ parameter subject)
                                (-- (i./ parameter subject)))]
                 (expression (|>> (as Int) (i.= expected))
                             (/.// (/.int parameter) (/.int subject)))))
             ))))

(def test|float
  Test
  (do [! random.monad]
    [parameter (random.only (|>> (f.= +0.0) not)
                            random.safe_frac)
     subject random.safe_frac]
    (`` (all _.and
             (,, (with_template [</> <lux> <pre>]
                   [(_.coverage [</>]
                      (let [expected (<lux> (<pre> parameter) (<pre> subject))]
                        (expression (|>> (as Frac) (f.= expected))
                                    (</> (/.float (<pre> parameter)) (/.float (<pre> subject))))))]

                   [/.+ f.+ |>]
                   [/.- f.- |>]
                   [/.* f.* |>]
                   [/./ f./ |>]
                   [/.% f.mod |>]
                   [/.^ f.pow f.abs]
                   ))
             (,, (with_template [</> <lux>]
                   [(_.coverage [</>]
                      (let [expected (<lux> parameter subject)]
                        (expression (|>> (as Bit) (bit#= expected))
                                    (</> (/.float parameter) (/.float subject)))))]

                   [/.<  f.<]
                   [/.<= f.<=]
                   [/.>  f.>]
                   [/.>= f.>=]
                   [/.=  f.=]
                   ))
             ))))

(def test|string
  Test
  (do random.monad
    [left (random.lower_cased 8)
     right (random.lower_cased 8)
     .let [expected (format left right)]]
    (all _.and
         (_.coverage [/.concat]
           (expression (|>> (as Text) (text#= expected))
                       (|> (/.string left)
                           (/.concat (/.string right)))))
         )))

(def test|array
  Test
  (do [! random.monad]
    [size (of ! each (|>> (n.% 10) ++) random.nat)
     index (of ! each (n.% size) random.nat)
     items (random.list size random.safe_frac)
     .let [expected (|> items
                        (list.item index)
                        maybe.trusted)]]
    (all _.and
         (_.coverage [/.array /.item]
           (and (expression (|>> (as Frac) (f.= expected))
                            (/.item (/.int (.int (++ index)))
                                    (/.array (list#each /.float items))))
                (expression (|>> (as Bit))
                            (|> (/.array (list#each /.float items))
                                (/.item (/.int (.int (++ size))))
                                (/.= /.nil)))))
         (_.coverage [/.length]
           (expression (|>> (as Int) (i.= (.int size)))
                       (/.length (/.array (list#each /.float items)))))
         )))

(def test|table
  Test
  (do [! random.monad]
    [expected random.safe_frac
     dummy (random.only (|>> (f.= expected) not)
                        random.safe_frac)

     size (of ! each (|>> (n.% 10) ++) random.nat)
     index (of ! each (n.% size) random.nat)
     items (random.list size random.safe_frac)

     $self (of ! each /.var (random.lower_cased 10))
     $table (of ! each /.var (random.lower_cased 11))
     $arg (of ! each /.var (random.lower_cased 12))
     field (random.upper_cased 5)
     non_field (random.only (|>> (text#= field) not)
                            (random.upper_cased 5))
     method (random.upper_cased 6)]
    (all _.and
         (_.coverage [/.table /.its]
           (and (expression (|>> (as Frac) (f.= expected))
                            (/.its field (/.table (list [field (/.float expected)]))))
                (expression (|>> (as Bit))
                            (|> (/.table (list [field (/.float expected)]))
                                (/.its non_field)
                                (/.= /.nil)))))
         (_.coverage [/.do /.function]
           (expression (|>> (as Frac) (f.= expected))
                       (|> (all /.then
                                (/.local/1 $table (/.table (list [field (/.float expected)])))
                                (/.function (/.its method $table) (list $self $arg)
                                  (/.if (/.= (/.float dummy) $arg)
                                    (/.return (/.its field $self))
                                    (/.return $arg)))
                                (/.return (/.do method (list (/.float dummy)) $table)))
                           (/.closure (list))
                           (/.apply (list)))))
         )))

(def test|computation
  Test
  (do [! random.monad]
    [test random.bit
     then random.safe_frac
     else random.safe_frac

     boolean random.bit
     int random.int
     float random.frac
     string (random.upper_cased 5)

     comment (random.upper_cased 10)]
    (all _.and
         ..test|boolean
         ..test|int
         ..test|float
         ..test|string
         ..test|array
         ..test|table
         (_.coverage [/.type/1]
           (and (expression (|>> (as Text) (text#= "boolean"))
                            (/.type/1 (/.boolean boolean)))
                (expression (|>> (as Text) (text#= "number"))
                            (/.type/1 (/.int int)))
                (expression (|>> (as Text) (text#= "number"))
                            (/.type/1 (/.float float)))
                (expression (|>> (as Text) (text#= "string"))
                            (/.type/1 (/.string string)))
                (expression (|>> (as Text) (text#= "nil"))
                            (/.type/1 /.nil))
                (expression (|>> (as Text) (text#= "table"))
                            (/.type/1 (/.table (list [string (/.float float)]))))
                (expression (|>> (as Text) (text#= "table"))
                            (/.type/1 (/.array (list (/.boolean boolean)
                                                     (/.float float)
                                                     (/.string string)))))
                ))
         (_.coverage [/.require/1]
           (expression (|>> (as Int) (i.= (i.abs int)))
                       (|> (/.require/1 (/.string "math"))
                           (/.its "abs")
                           (/.apply (list (/.int int))))))
         (_.coverage [/.comment]
           (expression (|>> (as Frac) (f.= then))
                       (/.comment comment
                         (/.float then))))
         )))

(def test|expression
  Test
  (`` (all _.and
           (_.for [/.Literal]
                  ..test|literal)
           (_.for [/.Computation]
                  ..test|computation)
           )))

(def test/var
  Test
  (do [! random.monad]
    [float/0 random.safe_frac
     float/1 random.safe_frac
     float/2 random.safe_frac
     foreign (random.lower_cased 10)
     local (random.only (|>> (text#= foreign) not)
                        (random.lower_cased 10))
     .let [$foreign (/.var foreign)
           $local (/.var local)]]
    (all _.and
         (_.coverage [/.var]
           (expression (|>> (as Frac) (f.= float/0))
                       (|> (/.return $foreign)
                           (/.closure (list $foreign))
                           (/.apply (list (/.float float/0))))))
         (_.coverage [/.let]
           (expression (|>> (as Frac) (f.= float/1))
                       (|> (all /.then
                                (/.let (list $local) (/.float float/1))
                                (/.return $local))
                           (/.closure (list $foreign))
                           (/.apply (list (/.float float/0))))))
         (_.coverage [/.local/1]
           (expression (|>> (as Frac) (f.= float/1))
                       (|> (all /.then
                                (/.local/1 $local (/.float float/1))
                                (/.return $local))
                           (/.closure (list $foreign))
                           (/.apply (list (/.float float/0))))))
         (_.coverage [/.local]
           (expression (|>> (as Frac) (f.= float/1))
                       (|> (all /.then
                                (/.local (list $local))
                                (/.set (list $local) (/.float float/1))
                                (/.return $local))
                           (/.closure (list $foreign))
                           (/.apply (list (/.float float/0))))))
         )))

(def test/location
  Test
  (do [! random.monad]
    [float/0 random.safe_frac
     float/1 random.safe_frac
     int/0 ..int_16
     $foreign (of ! each /.var (random.lower_cased 10))
     $arg/0 (of ! each /.var (random.lower_cased 11))
     $arg/1 (of ! each /.var (random.lower_cased 12))
     field (random.upper_cased 10)]
    (all _.and
         (_.coverage [/.set]
           (expression (|>> (as Frac) (f.= (f.+ float/0 float/0)))
                       (|> (all /.then
                                (/.set (list $foreign) (/.+ $foreign $foreign))
                                (/.return $foreign))
                           (/.closure (list $foreign))
                           (/.apply (list (/.float float/0))))))
         (_.coverage [/.multi]
           (and (expression (|>> (as Frac) (f.= float/0))
                            (|> (all /.then
                                     (/.set (list $arg/0 $arg/1) (/.multi (list (/.float float/0) (/.float float/1))))
                                     (/.return $arg/0))
                                (/.closure (list))
                                (/.apply (list))))
                (expression (|>> (as Frac) (f.= float/1))
                            (|> (all /.then
                                     (/.set (list $arg/0 $arg/1) (/.multi (list (/.float float/0) (/.float float/1))))
                                     (/.return $arg/1))
                                (/.closure (list))
                                (/.apply (list))))))
         (_.coverage [/.Access]
           (and (expression (|>> (as Frac) (f.= (f.+ float/0 float/0)))
                            (let [@ (/.item (/.int +1) $foreign)]
                              (|> (all /.then
                                       (/.set (list $foreign) (/.array (list $foreign)))
                                       (/.set (list @) (/.+ @ @))
                                       (/.return @))
                                  (/.closure (list $foreign))
                                  (/.apply (list (/.float float/0))))))
                (expression (|>> (as Frac) (f.= (f.+ float/0 float/0)))
                            (let [@ (/.its field $foreign)]
                              (|> (all /.then
                                       (/.set (list $foreign) (/.table (list [field $foreign])))
                                       (/.set (list @) (/.+ @ @))
                                       (/.return @))
                                  (/.closure (list $foreign))
                                  (/.apply (list (/.float float/0))))))))
         (_.for [/.Var]
                ..test/var)
         )))

(def test|label
  Test
  (do [! random.monad]
    [input ..int_16

     full_iterations (of ! each (|>> (n.% 20) ++) random.nat)
     expected_iterations (of ! each (|>> (n.% full_iterations) .int) random.nat)

     $input (of ! each /.var (random.lower_cased 10))
     $output (of ! each /.var (random.lower_cased 11))
     $index (of ! each /.var (random.lower_cased 12))

     @loop (of ! each /.label (random.lower_cased 13))
     
     .let [expected (i.* expected_iterations input)
           expected_iterations (/.int expected_iterations)]]
    (all _.and
         (_.coverage [/.break]
           (let [=for_in (expression (|>> (as Int) (i.= expected))
                                     (|> (all /.then
                                              (/.local/1 $output (/.int +0))
                                              (/.for_in (list $index $input) (/.ipairs/1 (/.array (list.repeated full_iterations $input)))
                                                        (all /.then
                                                             (/.when (/.> expected_iterations $index)
                                                               /.break)
                                                             (/.set (list $output) (/.+ $input $output))))
                                              (/.return $output))
                                         (/.closure (list $input))
                                         (/.apply (list (/.int input)))))
                 
                 full_iterations (/.int (.int full_iterations))
                 =while (expression (|>> (as Int) (i.= expected))
                                    (|> (all /.then
                                             (/.local/1 $index (/.int +0))
                                             (/.local/1 $output (/.int +0))
                                             (/.while (/.< full_iterations $index)
                                                      (all /.then
                                                           (/.when (/.= expected_iterations $index)
                                                             /.break)
                                                           (/.set (list $output) (/.+ $input $output))
                                                           (/.set (list $index) (/.+ (/.int +1) $index))
                                                           ))
                                             (/.return $output))
                                        (/.closure (list $input))
                                        (/.apply (list (/.int input)))))
                 =repeat (expression (|>> (as Int) (i.= expected))
                                     (|> (all /.then
                                              (/.local/1 $index (/.int +0))
                                              (/.local/1 $output (/.int +0))
                                              (/.repeat (/.= full_iterations $index)
                                                        (all /.then
                                                             (/.when (/.= expected_iterations $index)
                                                               /.break)
                                                             (/.set (list $output) (/.+ $input $output))
                                                             (/.set (list $index) (/.+ (/.int +1) $index))
                                                             ))
                                              (/.return $output))
                                         (/.closure (list $input))
                                         (/.apply (list (/.int input)))))
                 =for_step (expression (|>> (as Int) (i.= expected))
                                       (|> (all /.then
                                                (/.local/1 $output (/.int +0))
                                                (/.for_step $index (/.int +0) full_iterations (/.int +1)
                                                            (all /.then
                                                                 (/.when (/.= expected_iterations $index)
                                                                   /.break)
                                                                 (/.set (list $output) (/.+ $input $output))))
                                                (/.return $output))
                                           (/.closure (list $input))
                                           (/.apply (list (/.int input)))))]
             (and =while
                  =repeat
                  =for_step
                  =for_in)))
         (_.coverage [/.label /.set_label /.go_to]
           (expression (|>> (as Int) (i.= expected))
                       (|> (all /.then
                                (/.local/1 $index (/.int +0))
                                (/.local/1 $output (/.int +0))
                                (/.set_label @loop)
                                (/.if (/.< expected_iterations $index)
                                  (all /.then
                                       (/.set (list $output) (/.+ $input $output))
                                       (/.set (list $index) (/.+ (/.int +1) $index))
                                       (/.go_to @loop))
                                  (/.return $output)))
                           (/.closure (list $input))
                           (/.apply (list (/.int input))))))
         )))

(def test|loop
  Test
  (do [! random.monad]
    [input ..int_16
     iterations (of ! each (n.% 10) random.nat)
     .let [$input (/.var "input")
           $output (/.var "output")
           $index (/.var "index")
           expected (i.* (.int iterations) input)]]
    (all _.and
         (_.coverage [/.while]
           (expression (|>> (as Int) (i.= expected))
                       (|> (all /.then
                                (/.local/1 $index (/.int +0))
                                (/.local/1 $output (/.int +0))
                                (/.while (/.< (/.int (.int iterations)) $index)
                                         (all /.then
                                              (/.set (list $output) (/.+ $input $output))
                                              (/.set (list $index) (/.+ (/.int +1) $index))
                                              ))
                                (/.return $output))
                           (/.closure (list $input))
                           (/.apply (list (/.int input))))))
         (_.coverage [/.repeat]
           (expression (|>> (as Int) (i.= expected))
                       (|> (all /.then
                                (/.local/1 $index (/.int +0))
                                (/.local/1 $output (/.int +0))
                                (/.repeat (/.= (/.int (.int iterations)) $index)
                                          (all /.then
                                               (/.set (list $output) (/.+ $input $output))
                                               (/.set (list $index) (/.+ (/.int +1) $index))
                                               ))
                                (/.return $output))
                           (/.closure (list $input))
                           (/.apply (list (/.int input))))))
         (_.coverage [/.for_step]
           (expression (|>> (as Int) (i.= expected))
                       (|> (all /.then
                                (/.local/1 $output (/.int +0))
                                (/.for_step $index (/.int +0) (/.int (.int (-- iterations))) (/.int +1)
                                            (/.set (list $output) (/.+ $input $output)))
                                (/.return $output))
                           (/.closure (list $input))
                           (/.apply (list (/.int input))))))
         (_.coverage [/.for_in /.ipairs/1]
           (expression (|>> (as Int) (i.= expected))
                       (|> (all /.then
                                (/.local/1 $output (/.int +0))
                                (/.for_in (list $index $input) (/.ipairs/1 (/.array (list.repeated iterations $input)))
                                          (/.set (list $output) (/.+ $input $output)))
                                (/.return $output))
                           (/.closure (list $input))
                           (/.apply (list (/.int input))))))
         (_.for [/.Label]
                ..test|label)
         )))

(def test|exception
  Test
  (do [! random.monad]
    [expected random.safe_frac
     dummy (random.only (|>> (f.= expected) not)
                        random.safe_frac)
     $verdict (of ! each /.var (random.lower_cased 10))
     $outcome (of ! each /.var (random.lower_cased 11))]
    (all _.and
         (_.coverage [/.pcall/1]
           (expression (|>> (as Frac) (f.= expected))
                       (|> (all /.then
                                (/.let (list $verdict $outcome) (/.pcall/1 (/.closure (list)
                                                                                      (/.return (/.float expected)))))
                                (/.if $verdict
                                  (/.return $outcome)
                                  (/.return (/.float dummy))))
                           (/.closure (list))
                           (/.apply (list)))))
         (_.coverage [/.error/1]
           (expression (|>> (as Frac) (f.= expected))
                       (|> (all /.then
                                (/.let (list $verdict $outcome) (/.pcall/1 (/.closure (list)
                                                                                      (all /.then
                                                                                           (/.statement (/.error/1 (/.float expected)))
                                                                                           (/.return (/.float dummy))))))
                                (/.if $verdict
                                  (/.return (/.float dummy))
                                  (/.return $outcome)))
                           (/.closure (list))
                           (/.apply (list)))))
         (_.coverage [/.error/2]
           (expression (|>> (as Frac) (f.= expected))
                       (|> (all /.then
                                (/.let (list $verdict $outcome) (/.pcall/1 (/.closure (list)
                                                                                      (all /.then
                                                                                           (/.statement (/.error/2 (/.float expected) (/.int +2)))
                                                                                           (/.return (/.float dummy))))))
                                (/.if $verdict
                                  (/.return (/.float dummy))
                                  (/.return $outcome)))
                           (/.closure (list))
                           (/.apply (list)))))
         )))

(def test|function
  Test
  (do [! random.monad]
    [float/0 random.safe_frac
     iterations (of ! each (n.% 10) random.nat)
     $self (of ! each /.var (random.lower_cased 1))
     $arg/0 (of ! each /.var (random.lower_cased 2))
     field (random.lower_cased 3)
     $class (of ! each /.var (random.upper_cased 4))]
    (all _.and
         (_.coverage [/.closure /.return]
           (expression (|>> (as Frac) (f.= float/0))
                       (/.apply (list)
                                (/.closure (list) (/.return (/.float float/0))))))
         (_.coverage [/.local_function]
           (expression (|>> (as Int) .nat (n.= iterations))
                       (|> (all /.then
                                (/.local_function $self (list $arg/0)
                                                  (/.if (/.< (/.int (.int iterations)) $arg/0)
                                                    (/.return (/.apply (list (/.+ (/.int +1) $arg/0)) $self))
                                                    (/.return $arg/0)))
                                (/.return (/.apply (list (/.int +0)) $self)))
                           (/.closure (list))
                           (/.apply (list)))))
         (do [! random.monad]
           [float/0 random.safe_frac
            float/1 random.safe_frac
            float/2 random.safe_frac
            $arg/0 (of ! each /.var (random.lower_cased 10))
            $arg/1 (of ! each /.var (random.lower_cased 11))
            $arg/2 (of ! each /.var (random.lower_cased 12))]
           (`` (all _.and
                    (_.coverage [/.apply]
                      (expression (|>> (as Frac) (f.= (all f.+ float/0 float/1 float/2)))
                                  (/.apply (list (/.float float/0)
                                                 (/.float float/1)
                                                 (/.float float/2))
                                           (/.closure (list $arg/0 $arg/1 $arg/2) (/.return (all /.+ $arg/0 $arg/1 $arg/2))))))
                    )))
         )))

(def test|branching
  Test
  (do [! random.monad]
    [float/0 random.safe_frac
     float/1 random.safe_frac
     ??? random.bit]
    (all _.and
         (_.coverage [/.if]
           (expression (|>> (as Frac) (f.= (if ??? float/0 float/1)))
                       (|> (/.if (/.boolean ???)
                             (/.return (/.float float/0))
                             (/.return (/.float float/1)))
                           (/.closure (list))
                           (/.apply (list)))))
         (_.coverage [/.when]
           (expression (|>> (as Frac) (f.= (if ??? float/0 float/1)))
                       (|> (all /.then
                                (/.when (/.boolean ???)
                                  (/.return (/.float float/0)))
                                (/.return (/.float float/1)))
                           (/.closure (list))
                           (/.apply (list)))))
         )))

(def test|binding
  Test
  (all _.and
       ..test|function
       (_.for [/.Location]
              ..test/location)
       ))

(def test|control
  Test
  (all _.and
       ..test|branching
       ..test|loop
       ..test|exception
       ))

(def test|statement
  Test
  (do [! random.monad]
    [float/0 random.safe_frac
     float/1 random.safe_frac
     $arg/0 (of ! each /.var (random.lower_cased 10))
     $arg/1 (of ! each /.var (random.lower_cased 11))]
    (`` (all _.and
             (_.coverage [/.statement /.then /.print/1]
               (expression (|>> (as Frac) (f.= float/0))
                           (|> (all /.then
                                    (/.statement (/.print/1 $arg/0))
                                    (/.return $arg/0))
                               (/.closure (list $arg/0))
                               (/.apply (list (/.float float/0))))))
             ..test|binding
             ..test|control
             ))))

(def .public test
  Test
  (do [! random.monad]
    [.let [random (of ! each /.int random.int)]
     expected random.int]
    (<| (_.covering /._)
        (_.for [/.Code /.code])
        (`` (all _.and
                 (_.for [/.equivalence]
                        (equivalenceT.spec /.equivalence random))
                 (_.for [/.hash]
                        (hashT.spec /.hash random))
                 
                 (_.coverage [/.manual]
                   (expression (|>> (as Int) (i.= expected))
                               (/.manual (/.code (/.int expected)))))
                 (_.for [/.Expression]
                        ..test|expression)
                 (_.for [/.Statement]
                        ..test|statement)
                 )))))
