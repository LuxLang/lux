... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Type Label int)
   ["[0]" ffi (.only import)]
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" function]
    ["[0]" io]
    ["[0]" maybe]
    ["[0]" try]
    [concurrency
     ["[0]" atom]]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]
    ["[0]" binary
     ["[1]" \\format]]
    [collection
     ["[0]" array]
     ["[0]" dictionary]
     ["[0]" set]
     ["[0]" sequence]
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" nat]
     ["i" int]
     ["d" dec]
     ["[0]" i32 (.only I32)]
     ["[0]" i64]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /
   ["[1][0]" loader (.only Library)]
   ["[1][0]" version]
   ["[1][0]" modifier (.use "[1]#[0]" monoid)]
   ["[1][0]" field]
   ["[1][0]" method (.only Method)]
   ["[1][0]" class]
   ["[1][0]" attribute (.only)
    ["[1]/[0]" code]]
   ["[1][0]" constant (.only)
    ["[1]/[0]" pool (.only Resource)]]
   [encoding
    ["[1][0]" name]
    ["[1][0]" signed]
    ["[1][0]" unsigned]]
   ["[1]" bytecode (.only Label Bytecode)
    ["[1][0]" instruction]]
   ["[1][0]" type (.only Type)
    ["[0]" category (.only Value Object Class)]]]])

(the method_modifier
  (all /modifier#composite
       /method.public
       /method.static))

(import java/lang/Boolean
  "[1]::[0]")

(import java/lang/Byte
  "[1]::[0]")

(import java/lang/Short
  "[1]::[0]")

(import java/lang/Integer
  "[1]::[0]")

(import java/lang/Long
  "[1]::[0]")

(import java/lang/Float
  "[1]::[0]")

(import java/lang/Double
  "[1]::[0]")

(import java/lang/Character
  "[1]::[0]")

(import java/lang/String
  "[1]::[0]")

(import java/lang/reflect/Method
  "[1]::[0]"
  (invoke [java/lang/Object [java/lang/Object]] "try" java/lang/Object))

(import (java/lang/Class c)
  "[1]::[0]"
  (getDeclaredMethod [java/lang/String [(java/lang/Class [? < java/lang/Object])]] java/lang/reflect/Method))

(import java/lang/Object
  "[1]::[0]")

(the class_name
  (Random Text)
  (do random.monad
    [super_package (random.lower_cased 10)
     package (random.lower_cased 10)
     name (random.upper_cased 10)]
    (in (format super_package
                /name.external_separator package
                /name.external_separator name))))

(the (get_method name class)
  (-> Text (java/lang/Class java/lang/Object) java/lang/reflect/Method)
  (java/lang/Class::getDeclaredMethod [(ffi.as_string name)
                                       (ffi.array (java/lang/Class java/lang/Object) 0)]
                                      class))

(the $Object (/type.class "java.lang.Object" (list)))

(the (bytecode test bytecode)
  (-> (-> Any Bit) (Bytecode Any) (Random Bit))
  (do random.monad
    [class_name ..class_name
     method_name (random.upper_cased 10)]
    (in (when (do try.monad
                [class (/class.class /version.v6_0 /class.public
                         (/name.internal class_name)
                         {.#None}
                         (/name.internal "java.lang.Object")
                         (list)
                         (list)
                         (list (/method.method ..method_modifier
                                 method_name
                                 false (/type.method [(list) (list) ..$Object (list)])
                                 (list)
                                 {.#Some (do /.monad
                                           [_ bytecode]
                                           /.areturn)}))
                         (list))
                 .let [bytecode (binary.value /class.format class)
                       loader (/loader.memory (/loader.new_library []))]
                 _ (/loader.define class_name bytecode loader)
                 class (io.run! (/loader.load class_name loader))
                 method (try (get_method method_name class))]
                (java/lang/reflect/Method::invoke [(ffi.null) (ffi.array java/lang/Object 0)] method))
          {try.#Success actual}
          (test actual)
          
          {try.#Failure error}
          false))))

(every (Primitive a)
  (Record
   [#unboxed (Type category.Return)
    #boxed (Type category.Class)
    #wrap (Bytecode Any)
    #random (Random a)
    #literal (-> a (Bytecode Any))]))

(the $Boolean
  (/type.class "java.lang.Boolean" (list)))
(the $Boolean::wrap
  (/.invokestatic ..$Boolean "valueOf" (/type.method [(list) (list /type.boolean) ..$Boolean (list)])))
(the $Boolean::random (as (Random java/lang/Boolean) random.bit))
(the !false (|> 0 .i64 i32.i32 /.int))
(the !true (|> 1 .i64 i32.i32 /.int))
(the ($Boolean::literal value)
  (-> java/lang/Boolean (Bytecode Any))
  (if (as Bit value)
    ..!true
    ..!false))
(the $Boolean::primitive
  (Primitive java/lang/Boolean)
  [#unboxed /type.boolean
   #boxed ..$Boolean
   #wrap ..$Boolean::wrap
   #random ..$Boolean::random
   #literal ..$Boolean::literal])

(the $Byte
  (/type.class "java.lang.Byte" (list)))
(the $Byte::wrap
  (/.invokestatic ..$Byte "valueOf" (/type.method [(list) (list /type.byte) ..$Byte (list)])))
(the $Byte::random
  (Random java/lang/Byte)
  (of random.monad each (|>> (as java/lang/Long) ffi.long_to_byte) random.int))
(the $Byte::literal
  (-> java/lang/Byte (Bytecode Any))
  (|>> ffi.byte_to_long (as I64) i32.i32 /.int))
(the $Byte::primitive
  (Primitive java/lang/Byte)
  [#unboxed /type.byte
   #boxed ..$Byte
   #wrap ..$Byte::wrap
   #random ..$Byte::random
   #literal ..$Byte::literal])

(the $Short
  (/type.class "java.lang.Short" (list)))
(the $Short::wrap
  (/.invokestatic ..$Short "valueOf" (/type.method [(list) (list /type.short) ..$Short (list)])))
(the $Short::random
  (Random java/lang/Short)
  (of random.monad each (|>> (as java/lang/Long) ffi.long_to_short) random.int))
(the $Short::literal
  (-> java/lang/Short (Bytecode Any))
  (|>> ffi.short_to_long (as I64) i32.i32 /.int))
(the $Short::primitive
  (Primitive java/lang/Short)
  [#unboxed /type.short
   #boxed ..$Short
   #wrap ..$Short::wrap
   #random ..$Short::random
   #literal ..$Short::literal])

(the $Integer
  (/type.class "java.lang.Integer" (list)))
(the $Integer::wrap
  (/.invokestatic ..$Integer "valueOf" (/type.method [(list) (list /type.int) ..$Integer (list)])))
(the $Integer::random
  (Random java/lang/Integer)
  (of random.monad each (|>> (as java/lang/Long) ffi.long_to_int) random.int))
(the $Integer::literal
  (-> java/lang/Integer (Bytecode Any))
  (|>> ffi.int_to_long (as I64) i32.i32 /.int))
(the $Integer::primitive
  (Primitive java/lang/Integer)
  [#unboxed /type.int
   #boxed ..$Integer
   #wrap ..$Integer::wrap
   #random ..$Integer::random
   #literal ..$Integer::literal])

(the $Long (/type.class "java.lang.Long" (list)))
(the $Long::wrap (/.invokestatic ..$Long "valueOf" (/type.method [(list) (list /type.long) ..$Long (list)])))
(the $Long::random (as (Random java/lang/Long) random.int))
(the $Long::literal (-> java/lang/Long (Bytecode Any)) (|>> (as Int) /.long))
(the $Long::primitive
  (Primitive java/lang/Long)
  [#unboxed /type.long
   #boxed ..$Long
   #wrap ..$Long::wrap
   #random ..$Long::random
   #literal ..$Long::literal])

(the $Float (/type.class "java.lang.Float" (list)))
(the $Float::wrap (/.invokestatic ..$Float "valueOf" (/type.method [(list) (list /type.float) ..$Float (list)])))
(the $Float::random
  (Random java/lang/Float)
  (of random.monad each
      (|>> (as java/lang/Double) ffi.double_to_float)
      random.dec))
(the $Float::literal /.float)
(the valid_float
  (Random java/lang/Float)
  (random.only (|>> ffi.float_to_double (as Dec) d.not_a_number? not)
               ..$Float::random))
(the $Float::primitive
  (Primitive java/lang/Float)
  [#unboxed /type.float
   #boxed ..$Float
   #wrap ..$Float::wrap
   #random ..valid_float
   #literal ..$Float::literal])

(the $Double (/type.class "java.lang.Double" (list)))
(the $Double::wrap (/.invokestatic ..$Double "valueOf" (/type.method [(list) (list /type.double) ..$Double (list)])))
(the $Double::random (as (Random java/lang/Double) random.dec))
(the $Double::literal
  (-> java/lang/Double (Bytecode Any))
  (|>> (as Dec) /.double))
(the valid_double
  (Random java/lang/Double)
  (random.only (|>> (as Dec) d.not_a_number? not)
               ..$Double::random))
(the $Double::primitive
  (Primitive java/lang/Double)
  [#unboxed /type.double
   #boxed ..$Double
   #wrap ..$Double::wrap
   #random ..valid_double
   #literal ..$Double::literal])

(the $Character
  (/type.class "java.lang.Character" (list)))
(the $Character::wrap
  (/.invokestatic ..$Character "valueOf" (/type.method [(list) (list /type.char) ..$Character (list)])))
(the $Character::random
  (Random java/lang/Character)
  (of random.monad each (|>> (as java/lang/Long) ffi.long_to_int ffi.int_to_char) random.int))
(the $Character::literal
  (-> java/lang/Character (Bytecode Any))
  (|>> ffi.char_to_long (as I64) i32.i32 /.int))
(the $Character::primitive
  (Primitive java/lang/Character)
  [#unboxed /type.char
   #boxed ..$Character
   #wrap ..$Character::wrap
   #random ..$Character::random
   #literal ..$Character::literal])

(the $String
  (/type.class "java.lang.String" (list)))

(the $String::random
  (as (Random java/lang/String)
      (random.alphabetic 10)))

(the $String::literal
  (-> java/lang/String (Bytecode Any))
  (|>> (as Text) /.string))

(the $String::primitive
  (Primitive java/lang/String)
  [#unboxed ..$String
   #boxed ..$String
   #wrap /.nop
   #random ..$String::random
   #literal ..$String::literal])

(with_template [<name> <bits> <type> <push> <wrap> <message> <to_long> <signed>]
  [(the <name>
     Test
     (do [! random.monad]
       [expected (of ! each (i64.and (i64.mask <bits>)) random.nat)]
       (<| (_.lifted <message>)
           (..bytecode (for .old
                            (|>> (as <type>) <to_long> ("jvm leq" expected))
                            
                            .jvm
                            (|>> (as <type>) <to_long> .jvm_object_cast# (.jvm_long_=# (.jvm_object_cast# (as java/lang/Long expected))))))
           (do /.monad
             [_ (<push> (|> expected .int <signed> try.trusted))]
             <wrap>))))]

  [byte 7 java/lang/Byte /.bipush ..$Byte::wrap "BIPUSH" ffi.byte_to_long /signed.s1]
  [short 15 java/lang/Short /.sipush ..$Short::wrap "SIPUSH" ffi.short_to_long /signed.s2]
  )

(with_template [<name> <type>]
  [(the <name>
     (template (_ <old_extension> <new_extension>)
       [(is (-> <type> <type> <type>)
            (function (_ parameter subject)
              (for .old
                   (<old_extension> subject parameter)
                   
                   .jvm
                   (.jvm_object_cast#
                    (<new_extension> (.jvm_object_cast# parameter)
                                     (.jvm_object_cast# subject))))))]))]

  [int/2 java/lang/Integer]
  [long/2 java/lang/Long]
  [float/2 java/lang/Float]
  [double/2 java/lang/Double]
  )

(the int+long/2
  (template (_ <old_extension> <new_extension>)
    [(is (-> java/lang/Integer java/lang/Long java/lang/Long)
         (function (_ parameter subject)
           (for .old
                (<old_extension> subject parameter)
                
                .jvm
                (.jvm_object_cast#
                 (<new_extension> (.jvm_object_cast# parameter)
                                  (.jvm_object_cast# subject))))))]))

(the int
  Test
  (let [int (is (-> java/lang/Integer (Bytecode Any) (Random Bit))
                (function (_ expected bytecode)
                  (<| (..bytecode (for .old
                                       (|>> (as java/lang/Integer) ("jvm ieq" expected))
                                       
                                       .jvm
                                       (|>> (as java/lang/Integer) .jvm_object_cast# (.jvm_int_=# (.jvm_object_cast# expected)))))
                      (do /.monad
                        [_ bytecode]
                        ..$Integer::wrap))))
        unary (is (-> (-> java/lang/Integer java/lang/Integer) (Bytecode Any) (Random Bit))
                  (function (_ reference instruction)
                    (do random.monad
                      [subject ..$Integer::random]
                      (int (reference subject)
                           (do /.monad
                             [_ (..$Integer::literal subject)]
                             instruction)))))
        binary (is (-> (-> java/lang/Integer java/lang/Integer java/lang/Integer)
                       (Bytecode Any)
                       (Random Bit))
                   (function (_ reference instruction)
                     (do random.monad
                       [parameter ..$Integer::random
                        subject ..$Integer::random]
                       (int (reference parameter subject)
                            (do /.monad
                              [_ (..$Integer::literal subject)
                               _ (..$Integer::literal parameter)]
                              instruction)))))
        shift (is (-> (-> java/lang/Integer java/lang/Integer java/lang/Integer) (Bytecode Any) (Random Bit))
                  (function (_ reference instruction)
                    (do [! random.monad]
                      [parameter (of ! each (|>> (n.% 32) .int (as java/lang/Long) ffi.long_to_int) random.nat)
                       subject ..$Integer::random]
                      (int (reference parameter subject)
                           (do /.monad
                             [_ (..$Integer::literal subject)
                              _ (..$Integer::literal parameter)]
                             instruction)))))
        literal (all _.and
                     (_.lifted "ICONST_M1" (int (ffi.long_to_int (as java/lang/Long -1)) /.iconst_m1))
                     (_.lifted "ICONST_0" (int (ffi.long_to_int (as java/lang/Long +0)) /.iconst_0))
                     (_.lifted "ICONST_1" (int (ffi.long_to_int (as java/lang/Long +1)) /.iconst_1))
                     (_.lifted "ICONST_2" (int (ffi.long_to_int (as java/lang/Long +2)) /.iconst_2))
                     (_.lifted "ICONST_3" (int (ffi.long_to_int (as java/lang/Long +3)) /.iconst_3))
                     (_.lifted "ICONST_4" (int (ffi.long_to_int (as java/lang/Long +4)) /.iconst_4))
                     (_.lifted "ICONST_5" (int (ffi.long_to_int (as java/lang/Long +5)) /.iconst_5))
                     (_.lifted "LDC_W/INTEGER"
                               (do random.monad
                                 [expected ..$Integer::random]
                                 (int expected (..$Integer::literal expected)))))
        arithmetic (all _.and
                        (_.lifted "IADD" (binary (int/2 "jvm iadd" .jvm_int_+#) /.iadd))
                        (_.lifted "ISUB" (binary (int/2 "jvm isub" .jvm_int_-#) /.isub))
                        (_.lifted "IMUL" (binary (int/2 "jvm imul" .jvm_int_*#) /.imul))
                        (_.lifted "IDIV" (binary (int/2 "jvm idiv" .jvm_int_/#) /.idiv))
                        (_.lifted "IREM" (binary (int/2 "jvm irem" .jvm_int_%#) /.irem))
                        (_.lifted "INEG" (unary (function (_ value)
                                                  ((int/2 "jvm isub" .jvm_int_-#)
                                                   value
                                                   (ffi.long_to_int (as java/lang/Long +0))))
                                                /.ineg)))
        bitwise (all _.and
                     (_.lifted "IAND" (binary (int/2 "jvm iand" .jvm_int_and#) /.iand))
                     (_.lifted "IOR" (binary (int/2 "jvm ior" .jvm_int_or#) /.ior))
                     (_.lifted "IXOR" (binary (int/2 "jvm ixor" .jvm_int_xor#) /.ixor))
                     (_.lifted "ISHL" (shift (int/2 "jvm ishl" .jvm_int_shl#) /.ishl))
                     (_.lifted "ISHR" (shift (int/2 "jvm ishr" .jvm_int_shr#) /.ishr))
                     (_.lifted "IUSHR" (shift (int/2 "jvm iushr" .jvm_int_ushr#) /.iushr)))]
    (all _.and
         (<| (_.context "literal")
             literal)
         (<| (_.context "arithmetic")
             arithmetic)
         (<| (_.context "bitwise")
             bitwise)
         )))

(the long
  Test
  (let [long (is (-> java/lang/Long (Bytecode Any) (Random Bit))
                 (function (_ expected bytecode)
                   (<| (..bytecode (for .old
                                        (|>> (as Int) (i.= expected))
                                        
                                        .jvm
                                        (|>> (as java/lang/Long) .jvm_object_cast# (.jvm_long_=# (.jvm_object_cast# expected)))))
                       (do /.monad
                         [_ bytecode]
                         ..$Long::wrap))))
        unary (is (-> (-> java/lang/Long java/lang/Long) (Bytecode Any) (Random Bit))
                  (function (_ reference instruction)
                    (do random.monad
                      [subject ..$Long::random]
                      (long (reference subject)
                            (do /.monad
                              [_ (..$Long::literal subject)]
                              instruction)))))
        binary (is (-> (-> java/lang/Long java/lang/Long java/lang/Long) (Bytecode Any) (Random Bit))
                   (function (_ reference instruction)
                     (do random.monad
                       [parameter ..$Long::random
                        subject ..$Long::random]
                       (long (reference parameter subject)
                             (do /.monad
                               [_ (..$Long::literal subject)
                                _ (..$Long::literal parameter)]
                               instruction)))))
        shift (is (-> (-> java/lang/Integer java/lang/Long java/lang/Long) (Bytecode Any) (Random Bit))
                  (function (_ reference instruction)
                    (do [! random.monad]
                      [parameter (of ! each (|>> (n.% 64) (as java/lang/Long)) random.nat)
                       subject ..$Long::random]
                      (long (reference (ffi.long_to_int parameter) subject)
                            (do /.monad
                              [_ (..$Long::literal subject)
                               _ (..$Integer::literal (ffi.long_to_int parameter))]
                              instruction)))))
        literal (all _.and
                     (_.lifted "LCONST_0" (long (as java/lang/Long +0) /.lconst_0))
                     (_.lifted "LCONST_1" (long (as java/lang/Long +1) /.lconst_1))
                     (_.lifted "LDC2_W/LONG"
                               (do random.monad
                                 [expected ..$Long::random]
                                 (long expected (..$Long::literal expected)))))
        arithmetic (all _.and
                        (_.lifted "LADD" (binary (long/2 "jvm ladd" .jvm_long_+#) /.ladd))
                        (_.lifted "LSUB" (binary (long/2 "jvm lsub" .jvm_long_-#) /.lsub))
                        (_.lifted "LMUL" (binary (long/2 "jvm lmul" .jvm_long_*#) /.lmul))
                        (_.lifted "LDIV" (binary (long/2 "jvm ldiv" .jvm_long_/#) /.ldiv))
                        (_.lifted "LREM" (binary (long/2 "jvm lrem" .jvm_long_%#) /.lrem))
                        (_.lifted "LNEG" (unary (function (_ value)
                                                  ((long/2 "jvm lsub" .jvm_long_-#)
                                                   value
                                                   (as java/lang/Long +0)))
                                                /.lneg)))
        bitwise (all _.and
                     (_.lifted "LAND" (binary (long/2 "jvm land" .jvm_long_and#) /.land))
                     (_.lifted "LOR" (binary (long/2 "jvm lor" .jvm_long_or#) /.lor))
                     (_.lifted "LXOR" (binary (long/2 "jvm lxor" .jvm_long_xor#) /.lxor))
                     (_.lifted "LSHL" (shift (int+long/2 "jvm lshl" .jvm_long_shl#) /.lshl))
                     (_.lifted "LSHR" (shift (int+long/2 "jvm lshr" .jvm_long_shr#) /.lshr))
                     (_.lifted "LUSHR" (shift (int+long/2 "jvm lushr" .jvm_long_ushr#) /.lushr)))
        comparison (_.lifted "LCMP"
                             (do random.monad
                               [expected ..$Long::random
                                actual ..$Long::random
                                .let [expected (cond (i.= (as Int expected) (as Int actual))
                                                     (as java/lang/Long +0)

                                                     (i.> (as Int expected) (as Int actual))
                                                     (as java/lang/Long +1)

                                                     ... (i.< (as Int expected) (as Int actual))
                                                     (as java/lang/Long -1))]]
                               (<| (..bytecode (for .old
                                                    (|>> (as Int) (i.= expected))
                                                    
                                                    .jvm
                                                    (|>> (as java/lang/Long) .jvm_object_cast# (.jvm_long_=# (.jvm_object_cast# expected)))))
                                   (do /.monad
                                     [_ (..$Long::literal actual)
                                      _ (..$Long::literal expected)
                                      _ /.lcmp
                                      _ /.i2l]
                                     ..$Long::wrap))))]
    (all _.and
         (<| (_.context "literal")
             literal)
         (<| (_.context "arithmetic")
             arithmetic)
         (<| (_.context "bitwise")
             bitwise)
         (<| (_.context "comparison")
             comparison)
         )))

(the float
  Test
  (let [float (is (-> java/lang/Float (Bytecode Any) (Random Bit))
                  (function (_ expected bytecode)
                    (<| (..bytecode (for .old
                                         (function (_ actual)
                                           (or (|> actual (as java/lang/Float) ("jvm feq" expected))
                                               (and (d.not_a_number? (as Dec (ffi.float_to_double expected)))
                                                    (d.not_a_number? (as Dec (ffi.float_to_double (as java/lang/Float actual)))))))
                                         
                                         .jvm
                                         (function (_ actual)
                                           (or (|> actual (as java/lang/Float) .jvm_object_cast# (.jvm_float_=# (.jvm_object_cast# expected)))
                                               (and (d.not_a_number? (as Dec (ffi.float_to_double expected)))
                                                    (d.not_a_number? (as Dec (ffi.float_to_double (as java/lang/Float actual)))))))))
                        (do /.monad
                          [_ bytecode]
                          ..$Float::wrap))))
        unary (is (-> (-> java/lang/Float java/lang/Float)
                      (Bytecode Any)
                      (Random Bit))
                  (function (_ reference instruction)
                    (do random.monad
                      [subject ..$Float::random]
                      (float (reference subject)
                             (do /.monad
                               [_ (..$Float::literal subject)]
                               instruction)))))
        binary (is (-> (-> java/lang/Float java/lang/Float java/lang/Float)
                       (Bytecode Any)
                       (Random Bit))
                   (function (_ reference instruction)
                     (do random.monad
                       [parameter ..$Float::random
                        subject ..$Float::random]
                       (float (reference parameter subject)
                              (do /.monad
                                [_ (..$Float::literal subject)
                                 _ (..$Float::literal parameter)]
                                instruction)))))
        literal (all _.and
                     (_.lifted "FCONST_0" (float (ffi.double_to_float (as java/lang/Double +0.0)) /.fconst_0))
                     (_.lifted "FCONST_1" (float (ffi.double_to_float (as java/lang/Double +1.0)) /.fconst_1))
                     (_.lifted "FCONST_2" (float (ffi.double_to_float (as java/lang/Double +2.0)) /.fconst_2))
                     (_.lifted "LDC_W/FLOAT"
                               (do random.monad
                                 [expected ..$Float::random]
                                 (float expected (..$Float::literal expected)))))
        arithmetic (all _.and
                        (_.lifted "FADD" (binary (float/2 "jvm fadd" .jvm_float_+#) /.fadd))
                        (_.lifted "FSUB" (binary (float/2 "jvm fsub" .jvm_float_-#) /.fsub))
                        (_.lifted "FMUL" (binary (float/2 "jvm fmul" .jvm_float_*#) /.fmul))
                        (_.lifted "FDIV" (binary (float/2 "jvm fdiv" .jvm_float_/#) /.fdiv))
                        (_.lifted "FREM" (binary (float/2 "jvm frem" .jvm_float_%#) /.frem))
                        (_.lifted "FNEG" (unary (function (_ value)
                                                  ((float/2 "jvm fsub" .jvm_float_-#)
                                                   value
                                                   (ffi.double_to_float (as java/lang/Double +0.0))))
                                                /.fneg)))
        comparison (is (-> (Bytecode Any) (-> java/lang/Float java/lang/Float Bit) (Random Bit))
                       (function (_ instruction standard)
                         (do random.monad
                           [.let [valid_float (random.only (|>> ffi.float_to_double (as Dec) d.not_a_number? not)
                                                           ..$Float::random)]
                            expected valid_float
                            actual valid_float
                            .let [expected_result (if (for .old
                                                           ("jvm feq" expected actual)
                                                           
                                                           .jvm
                                                           (.jvm_float_=# (.jvm_object_cast# expected) (.jvm_object_cast# actual)))
                                                    +0
                                                    (if (standard expected actual)
                                                      +1
                                                      -1))]]
                           (<| (..bytecode (|>> (as Int) (i.= expected_result)))
                               (do /.monad
                                 [_ (..$Float::literal actual)
                                  _ (..$Float::literal expected)
                                  _ instruction
                                  _ /.i2l]
                                 ..$Long::wrap)))))
        comparison_standard (is (-> java/lang/Float java/lang/Float Bit)
                                (function (_ expected actual)
                                  (for .old
                                       ("jvm fgt" actual expected)
                                       
                                       .jvm
                                       (.jvm_float_<# (.jvm_object_cast# actual) (.jvm_object_cast# expected)))))
        comparison (all _.and
                        (_.lifted "FCMPL" (comparison /.fcmpl comparison_standard))
                        (_.lifted "FCMPG" (comparison /.fcmpg comparison_standard)))]
    (all _.and
         (<| (_.context "literal")
             literal)
         (<| (_.context "arithmetic")
             arithmetic)
         (<| (_.context "comparison")
             comparison)
         )))

(the double
  Test
  (let [double (is (-> java/lang/Double (Bytecode Any) (Random Bit))
                   (function (_ expected bytecode)
                     (<| (..bytecode (for .old
                                          (function (_ actual)
                                            (or (|> actual (as java/lang/Double) ("jvm deq" expected))
                                                (and (d.not_a_number? (as Dec expected))
                                                     (d.not_a_number? (as Dec actual)))))
                                          
                                          .jvm
                                          (function (_ actual)
                                            (or (|> actual (as java/lang/Double) .jvm_object_cast# (.jvm_double_=# (.jvm_object_cast# expected)))
                                                (and (d.not_a_number? (as Dec expected))
                                                     (d.not_a_number? (as Dec actual)))))))
                         (do /.monad
                           [_ bytecode]
                           ..$Double::wrap))))
        unary (is (-> (-> java/lang/Double java/lang/Double) (Bytecode Any) (Random Bit))
                  (function (_ reference instruction)
                    (do random.monad
                      [subject ..$Double::random]
                      (double (reference subject)
                              (do /.monad
                                [_ (..$Double::literal subject)]
                                instruction)))))
        binary (is (-> (-> java/lang/Double java/lang/Double java/lang/Double) (Bytecode Any) (Random Bit))
                   (function (_ reference instruction)
                     (do random.monad
                       [parameter ..$Double::random
                        subject ..$Double::random]
                       (double (reference parameter subject)
                               (do /.monad
                                 [_ (..$Double::literal subject)
                                  _ (..$Double::literal parameter)]
                                 instruction)))))
        literal (all _.and
                     (_.lifted "DCONST_0" (double (as java/lang/Double +0.0) /.dconst_0))
                     (_.lifted "DCONST_1" (double (as java/lang/Double +1.0) /.dconst_1))
                     (_.lifted "LDC2_W/DOUBLE"
                               (do random.monad
                                 [expected ..$Double::random]
                                 (double expected (..$Double::literal expected)))))
        arithmetic (all _.and
                        (_.lifted "DADD" (binary (double/2 "jvm dadd" .jvm_double_+#) /.dadd))
                        (_.lifted "DSUB" (binary (double/2 "jvm dsub" .jvm_double_-#) /.dsub))
                        (_.lifted "DMUL" (binary (double/2 "jvm dmul" .jvm_double_*#) /.dmul))
                        (_.lifted "DDIV" (binary (double/2 "jvm ddiv" .jvm_double_/#) /.ddiv))
                        (_.lifted "DREM" (binary (double/2 "jvm drem" .jvm_double_%#) /.drem))
                        (_.lifted "DNEG" (unary (function (_ value)
                                                  ((double/2 "jvm dsub" .jvm_double_-#)
                                                   value
                                                   (as java/lang/Double +0.0)))
                                                /.dneg)))
        comparison (is (-> (Bytecode Any) (-> java/lang/Double java/lang/Double Bit) (Random Bit))
                       (function (_ instruction standard)
                         (do random.monad
                           [expected ..valid_double
                            actual ..valid_double
                            .let [expected_result (if (for .old
                                                           ("jvm deq" expected actual)
                                                           
                                                           .jvm
                                                           (.jvm_double_=# (.jvm_object_cast# expected) (.jvm_object_cast# actual)))
                                                    +0
                                                    (if (standard expected actual)
                                                      +1
                                                      -1))]]
                           (<| (..bytecode (|>> (as Int) (i.= expected_result)))
                               (do /.monad
                                 [_ (..$Double::literal actual)
                                  _ (..$Double::literal expected)
                                  _ instruction
                                  _ /.i2l]
                                 ..$Long::wrap)))))
        ... https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.dcmp_op
        comparison_standard (is (-> java/lang/Double java/lang/Double Bit)
                                (function (_ expected actual)
                                  (for .old
                                       ("jvm dgt" actual expected)
                                       
                                       .jvm
                                       (.jvm_double_<# (.jvm_object_cast# actual) (.jvm_object_cast# expected)))))
        comparison (all _.and
                        (_.lifted "DCMPL" (comparison /.dcmpl comparison_standard))
                        (_.lifted "DCMPG" (comparison /.dcmpg comparison_standard)))]
    (all _.and
         (<| (_.context "literal")
             literal)
         (<| (_.context "arithmetic")
             arithmetic)
         (<| (_.context "comparison")
             comparison)
         )))

(the primitive
  Test
  (all _.and
       (<| (_.context "byte")
           ..byte)
       (<| (_.context "short")
           ..short)
       (<| (_.context "int")
           ..int)
       (<| (_.context "long")
           ..long)
       (<| (_.context "float")
           ..float)
       (<| (_.context "double")
           ..double)
       ))

(the object
  Test
  (let [!object (is (Bytecode Any)
                    (do /.monad
                      [_ (/.new ..$Object)
                       _ /.dup]
                      (/.invokespecial ..$Object "<init>" (/type.method [(list) (list) /type.void (list)]))))]
    (all _.and
         (<| (_.lifted "ACONST_NULL")
             (..bytecode (|>> (as Bit) not))
             (do /.monad
               [_ /.aconst_null
                _ (/.instanceof ..$String)]
               ..$Boolean::wrap))
         (<| (_.lifted "INSTANCEOF")
             (do random.monad
               [value ..$String::random])
             (..bytecode (|>> (as Bit)))
             (do /.monad
               [_ (/.string (as Text value))
                _ (/.instanceof ..$String)]
               ..$Boolean::wrap))
         (<| (_.lifted "NEW & CHECKCAST")
             (..bytecode (|>> (as Bit)))
             (do /.monad
               [_ !object
                _ (/.checkcast ..$Object)
                _ (/.instanceof ..$Object)]
               ..$Boolean::wrap))
         (<| (_.lifted "MONITORENTER & MONITOREXIT")
             (do random.monad
               [value ..$String::random])
             (..bytecode (|>> (as Bit)))
             (do /.monad
               [_ (/.string (as Text value))
                _ /.dup _ /.monitorenter
                _ /.dup _ /.monitorexit
                _ (/.instanceof ..$String)]
               ..$Boolean::wrap))
         )))

(the method
  Test
  (all _.and
       (<| (_.lifted "INVOKESTATIC")
           (do random.monad
             [expected (random.only (|>> (as Dec) d.not_a_number? not)
                                    ..$Double::random)])
           (..bytecode (for .old
                            (|>> (as java/lang/Double) ("jvm deq" expected))
                            
                            .jvm
                            (|>> (as java/lang/Double) .jvm_object_cast# (.jvm_double_=# (.jvm_object_cast# expected)))))
           (do /.monad
             [_ (/.double (as Dec expected))]
             (/.invokestatic ..$Double "valueOf" (/type.method [(list) (list /type.double) ..$Double (list)]))))
       (<| (_.lifted "INVOKEVIRTUAL")
           (do random.monad
             [expected ..$Double::random])
           (..bytecode (|>> (as Bit) (bit#= (d.not_a_number? (as Dec expected)))))
           (do /.monad
             [_ (/.double (as Dec expected))
              _ ..$Double::wrap
              _ (/.invokevirtual ..$Double "isNaN" (/type.method [(list) (list) /type.boolean (list)]))]
             ..$Boolean::wrap))
       (<| (_.lifted "INVOKESPECIAL")
           (do random.monad
             [expected (random.only (|>> (as Dec) d.not_a_number? not)
                                    ..$Double::random)])
           (..bytecode (for .old
                            (|>> (as java/lang/Double) ("jvm deq" expected))
                            
                            .jvm
                            (|>> (as java/lang/Double) .jvm_object_cast# (.jvm_double_=# (.jvm_object_cast# expected)))))
           (do /.monad
             [_ (/.new ..$Double)
              _ /.dup
              _ (/.double (as Dec expected))]
             (/.invokespecial ..$Double "<init>" (/type.method [(list) (list /type.double) /type.void (list)]))))
       (<| (_.lifted "INVOKEINTERFACE")
           (do random.monad
             [subject ..$String::random])
           (..bytecode (|>> (as Nat) (n.= (text.size (as Text subject)))))
           (do /.monad
             [_ (/.string (as Text subject))
              _ (/.invokeinterface (/type.class "java.lang.CharSequence" (list)) "length" (/type.method [(list) (list) /type.int (list)]))
              _ /.i2l]
             ..$Long::wrap))
       ))

(the field
  Test
  (do random.monad
    [class_name ..class_name
     part0 ..$Long::random
     part1 ..$Long::random
     .let [expected (is java/lang/Long
                        (for .old
                             ("jvm ladd" part0 part1)
                             
                             .jvm
                             (.jvm_object_cast#
                              (.jvm_long_+# (.jvm_object_cast# part0) (.jvm_object_cast# part1)))))
           $Self (/type.class class_name (list))
           class_field "class_field"
           object_field "object_field"
           constructor "<init>"
           constructor::type (/type.method [(list) (list /type.long) /type.void (list)])
           static_method "static_method"
           bytecode (|> (/class.class /version.v6_0 /class.public
                          (/name.internal class_name)
                          {.#None}
                          (/name.internal "java.lang.Object")
                          (list)
                          (list (/field.field /field.static class_field false /type.long (sequence.sequence))
                                (/field.field /field.public object_field false /type.long (sequence.sequence)))
                          (list (/method.method /method.private
                                  constructor
                                  false constructor::type
                                  (list)
                                  {.#Some (do /.monad
                                            [_ /.aload_0
                                             _ (/.invokespecial ..$Object constructor (/type.method [(list) (list) /type.void (list)]))
                                             _ (..$Long::literal part0)
                                             _ (/.putstatic $Self class_field /type.long)
                                             _ /.aload_0
                                             _ /.lload_1
                                             _ (/.putfield $Self object_field /type.long)]
                                            /.return)})
                                (/method.method (all /modifier#composite
                                                     /method.public
                                                     /method.static)
                                  static_method
                                  false (/type.method [(list) (list) ..$Long (list)])
                                  (list)
                                  {.#Some (do /.monad
                                            [_ (/.new $Self)
                                             _ /.dup
                                             _ (..$Long::literal part1)
                                             _ (/.invokespecial $Self constructor constructor::type)
                                             _ (/.getfield $Self object_field /type.long)
                                             _ (/.getstatic $Self class_field /type.long)
                                             _ /.ladd
                                             _ ..$Long::wrap]
                                            /.areturn)}))
                          (list))
                        try.trusted
                        (binary.value /class.format))
           loader (/loader.memory (/loader.new_library []))]]
    (_.test "PUTSTATIC & PUTFIELD & GETFIELD & GETSTATIC"
      (when (do try.monad
              [_ (/loader.define class_name bytecode loader)
               class (io.run! (/loader.load class_name loader))
               method (try (get_method static_method class))
               output (java/lang/reflect/Method::invoke [(ffi.null) (ffi.array java/lang/Object 0)] method)]
              (in (as Int output)))
        {try.#Success actual}
        (i.= (as Int expected) (as Int actual))

        {try.#Failure error}
        false))))

(the array
  Test
  (let [!length (is (-> Nat (Bytecode Any))
                    (function (_ size)
                      (do /.monad
                        [_ ($Long::literal (as java/lang/Long size))]
                        /.l2i)))
        ?length (is (Bytecode Any)
                    (do /.monad
                      [_ /.arraylength]
                      /.i2l))
        length (is (-> Nat (Bytecode Any) (Random Bit))
                   (function (_ size constructor)
                     (<| (..bytecode (|>> (as Nat) (n.= size)))
                         (do /.monad
                           [_ (!length size)
                            _ constructor
                            _ ?length]
                           $Long::wrap))))
        write_and_read (is (All (_ a)
                             (-> Nat (Bytecode Any)
                                 a (-> a (Bytecode Any))
                                 [(Bytecode Any) (Bytecode Any) (Bytecode Any)]
                                 (-> a Any Bit)
                                 (Random Bit)))
                           (function (_ size constructor value literal [*store *load *wrap] test)
                             (let [!index ($Integer::literal (ffi.long_to_int (as java/lang/Long +0)))]
                               (<| (..bytecode (test value))
                                   (do /.monad
                                     [_ (!length size)
                                      _ constructor
                                      _ /.dup _ !index _ (literal value) _ *store
                                      _ /.dup _ !index _ *load]
                                     *wrap)))))
        array (is (All (_ a)
                    (-> (Bytecode Any) (Random a) (-> a (Bytecode Any))
                        [(Bytecode Any) (Bytecode Any) (Bytecode Any)]
                        (-> a Any Bit)
                        Test))
                  (function (_ constructor random literal [*store *load *wrap] test)
                    (do [! random.monad]
                      [size (of ! each (|>> (n.% 1024) (n.max 1)) random.nat)
                       value random]
                      (all _.and
                           (<| (_.lifted "length")
                               (length size constructor))
                           (<| (_.lifted "write and read")
                               (write_and_read size constructor value literal [*store *load *wrap] test))))))]
    (all _.and
         (_.context "boolean"
                    (array (/.newarray /instruction.t_boolean) $Boolean::random $Boolean::literal [/.bastore /.baload $Boolean::wrap]
                           (function (_ expected) (|>> (as Bit) (bit#= (as Bit expected))))))
         (_.context "byte"
                    (array (/.newarray /instruction.t_byte) $Byte::random $Byte::literal [/.bastore /.baload $Byte::wrap]
                           (function (_ expected)
                             (for .old
                                  (|>> (as java/lang/Byte) ffi.byte_to_long ("jvm leq" (ffi.byte_to_long expected)))
                                  
                                  .jvm
                                  (|>> (as java/lang/Byte) ffi.byte_to_long .jvm_object_cast# (.jvm_long_=# (.jvm_object_cast# (ffi.byte_to_long (as java/lang/Byte expected)))))))))
         (_.context "short"
                    (array (/.newarray /instruction.t_short) $Short::random $Short::literal [/.sastore /.saload $Short::wrap]
                           (function (_ expected)
                             (for .old
                                  (|>> (as java/lang/Short) ffi.short_to_long ("jvm leq" (ffi.short_to_long expected)))
                                  
                                  .jvm
                                  (|>> (as java/lang/Short) ffi.short_to_long .jvm_object_cast# (.jvm_long_=# (.jvm_object_cast# (ffi.short_to_long (as java/lang/Short expected)))))))))
         (_.context "int"
                    (array (/.newarray /instruction.t_int) $Integer::random $Integer::literal [/.iastore /.iaload $Integer::wrap]
                           (function (_ expected)
                             (for .old
                                  (|>> (as java/lang/Integer) ("jvm ieq" (as java/lang/Integer expected)))
                                  
                                  .jvm
                                  (|>> (as java/lang/Integer) .jvm_object_cast# (.jvm_int_=# (.jvm_object_cast# (as java/lang/Integer expected))))))))
         (_.context "long"
                    (array (/.newarray /instruction.t_long) $Long::random $Long::literal [/.lastore /.laload $Long::wrap]
                           (function (_ expected)
                             (for .old
                                  (|>> (as java/lang/Long) ("jvm leq" expected))
                                  
                                  .jvm
                                  (|>> (as java/lang/Long) .jvm_object_cast# (.jvm_long_=# (.jvm_object_cast# (as java/lang/Long expected))))))))
         (_.context "float"
                    (array (/.newarray /instruction.t_float) ..valid_float $Float::literal [/.fastore /.faload $Float::wrap]
                           (function (_ expected)
                             (for .old
                                  (|>> (as java/lang/Float) ("jvm feq" expected))
                                  
                                  .jvm
                                  (|>> (as java/lang/Float) .jvm_object_cast# (.jvm_float_=# (.jvm_object_cast# (as java/lang/Float expected))))))))
         (_.context "double"
                    (array (/.newarray /instruction.t_double) ..valid_double $Double::literal [/.dastore /.daload $Double::wrap]
                           (function (_ expected)
                             (for .old
                                  (|>> (as java/lang/Double) ("jvm deq" expected))
                                  
                                  .jvm
                                  (|>> (as java/lang/Double) .jvm_object_cast# (.jvm_double_=# (.jvm_object_cast# (as java/lang/Double expected))))))))
         (_.context "char"
                    (array (/.newarray /instruction.t_char) $Character::random $Character::literal [/.castore /.caload $Character::wrap]
                           (function (_ expected)
                             (for .old
                                  (|>> (as java/lang/Character) ("jvm ceq" expected))
                                  
                                  .jvm
                                  (|>> (as java/lang/Character) .jvm_object_cast# (.jvm_char_=# (.jvm_object_cast# (as java/lang/Character expected))))))))
         (_.context "object"
                    (array (/.anewarray ..$String) $String::random $String::literal [/.aastore /.aaload /.nop]
                           (function (_ expected) (|>> (as Text) (text#= (as Text expected))))))
         (<| (_.context "multi")
             (do [! random.monad]
               [.let [size (is (Random Nat)
                               (of ! each (|>> (n.% 5) (n.+ 1))
                                   random.nat))]
                dimensions size
                sizesH size
                sizesT (random.list (-- dimensions) size)
                .let [type (loop (again [dimensions dimensions
                                         type (is (Type Object)
                                                  ..$Object)])
                             (when dimensions
                               0 type
                               _ (again (-- dimensions) (/type.array type))))]]
               (<| (_.lifted "MULTIANEWARRAY")
                   (..bytecode (|>> (as Nat) (n.= sizesH)))
                   (do [! /.monad]
                     [_ (monad.each ! (|>> (as java/lang/Long) ffi.long_to_int ..$Integer::literal)
                                    {.#Item sizesH sizesT})
                      _ (/.multianewarray type (|> dimensions /unsigned.u1 try.trusted))
                      _ ?length]
                     $Long::wrap))))
         )))

(the !::=
  (template (_ <type> <old> <new>)
    [(is (-> <type> Any Bit)
         (function (_ expected)
           (for .old
                (|>> (as <type>) (<old> expected))
                
                .jvm
                (|>> (as <type>) .jvm_object_cast# (<new> (.jvm_object_cast# (as <type> expected)))))))]))

(the conversion
  Test
  (let [conversion (is (All (_ a z)
                         (-> (Primitive a) (Primitive z) (Bytecode Any) (-> a z) (-> z Any Bit) (Random Bit)))
                       (function (_ from to instruction convert test)
                         (do random.monad
                           [input (its #random from)
                            .let [expected (convert input)]]
                           (..bytecode (test expected)
                                       (do /.monad
                                         [_ ((its #literal from) input)
                                          _ instruction]
                                         (its #wrap to))))))
        int::= (!::= java/lang/Integer "jvm ieq" .jvm_int_=#)
        long::= (!::= java/lang/Long "jvm leq" .jvm_long_=#)
        float::= (!::= java/lang/Float "jvm feq" .jvm_float_=#)
        double::= (!::= java/lang/Double "jvm deq" .jvm_double_=#)]
    (all _.and
         (<| (_.context "int")
             (all _.and
                  (_.lifted "I2L" (conversion ..$Integer::primitive ..$Long::primitive /.i2l (|>> ffi.int_to_long) long::=))
                  (_.lifted "I2F" (conversion ..$Integer::primitive ..$Float::primitive /.i2f (|>> ffi.int_to_float) float::=))
                  (_.lifted "I2D" (conversion ..$Integer::primitive ..$Double::primitive /.i2d (|>> ffi.int_to_double) double::=))
                  (_.lifted "I2B" (conversion ..$Integer::primitive ..$Byte::primitive /.i2b (|>> ffi.int_to_byte)
                                              (function (_ expected)
                                                (for .old
                                                     (|>> (as java/lang/Byte) ffi.byte_to_long ("jvm leq" (ffi.byte_to_long expected)))
                                                     
                                                     .jvm
                                                     (|>> (as java/lang/Byte) ffi.byte_to_long .jvm_object_cast# (.jvm_long_=# (.jvm_object_cast# (ffi.byte_to_long (as java/lang/Byte expected)))))))))
                  (_.lifted "I2C" (conversion ..$Integer::primitive ..$Character::primitive /.i2c (|>> ffi.int_to_char)
                                              (!::= java/lang/Character "jvm ceq" .jvm_char_=#)))
                  (_.lifted "I2S" (conversion ..$Integer::primitive ..$Short::primitive /.i2s (|>> ffi.int_to_short)
                                              (function (_ expected)
                                                (for .old
                                                     (|>> (as java/lang/Short) ffi.short_to_long ("jvm leq" (ffi.short_to_long expected)))
                                                     
                                                     .jvm
                                                     (|>> (as java/lang/Short) ffi.short_to_long .jvm_object_cast# (.jvm_long_=# (.jvm_object_cast# (ffi.short_to_long (as java/lang/Short expected)))))))))))
         (<| (_.context "long")
             (all _.and
                  (_.lifted "L2I" (conversion ..$Long::primitive ..$Integer::primitive /.l2i (|>> ffi.long_to_int) int::=))
                  (_.lifted "L2F" (conversion ..$Long::primitive ..$Float::primitive /.l2f (|>> ffi.long_to_float) float::=))
                  (_.lifted "L2D" (conversion ..$Long::primitive ..$Double::primitive /.l2d (|>> ffi.long_to_double) double::=))))
         (<| (_.context "float")
             (all _.and
                  (_.lifted "F2I" (conversion ..$Float::primitive ..$Integer::primitive /.f2i (|>> ffi.float_to_int) int::=))
                  (_.lifted "F2L" (conversion ..$Float::primitive ..$Long::primitive /.f2l (|>> ffi.float_to_long) long::=))
                  (_.lifted "F2D" (conversion ..$Float::primitive ..$Double::primitive /.f2d (|>> ffi.float_to_double) double::=))))
         (<| (_.context "double")
             (all _.and
                  (_.lifted "D2I" (conversion ..$Double::primitive ..$Integer::primitive /.d2i (|>> ffi.double_to_int) int::=))
                  (_.lifted "D2L" (conversion ..$Double::primitive ..$Long::primitive /.d2l (|>> ffi.double_to_long) long::=))
                  (_.lifted "D2F" (conversion ..$Double::primitive ..$Float::primitive /.d2f (|>> ffi.double_to_float) float::=))))
         )))

(the value
  Test
  (all _.and
       (<| (_.context "primitive")
           ..primitive)
       (<| (_.context "object")
           ..object)
       (<| (_.context "method")
           ..method)
       (<| (_.context "field")
           ..field)
       (<| (_.context "array")
           ..array)
       (<| (_.context "conversion")
           ..conversion)
       ))

(the registry
  Test
  (let [store_and_load (is (All (_ a)
                             (-> (Random a) (-> a (Bytecode Any)) (Bytecode Any)
                                 [(-> Nat (Bytecode Any)) (-> Nat (Bytecode Any))]
                                 (-> a (-> Any Bit))
                                 (Random Bit)))
                           (function (_ random_value literal *wrap [store load] test)
                             (do [! random.monad]
                               [expected random_value
                                register (of ! each (n.% 128) random.nat)]
                               (<| (..bytecode (test expected))
                                   (do /.monad
                                     [_ (literal expected)
                                      _ (store register)
                                      _ (load register)]
                                     *wrap)))))]
    (all _.and
         (<| (_.context "int")
             (let [test (!::= java/lang/Integer "jvm ieq" .jvm_int_=#)]
               (all _.and
                    (_.lifted "ISTORE_0/ILOAD_0"
                              (store_and_load ..$Integer::random ..$Integer::literal ..$Integer::wrap [(function.constant /.istore_0) (function.constant /.iload_0)] test))
                    (_.lifted "ISTORE_1/ILOAD_1"
                              (store_and_load ..$Integer::random ..$Integer::literal ..$Integer::wrap [(function.constant /.istore_1) (function.constant /.iload_1)] test))
                    (_.lifted "ISTORE_2/ILOAD_2"
                              (store_and_load ..$Integer::random ..$Integer::literal ..$Integer::wrap [(function.constant /.istore_2) (function.constant /.iload_2)] test))
                    (_.lifted "ISTORE_3/ILOAD_3"
                              (store_and_load ..$Integer::random ..$Integer::literal ..$Integer::wrap [(function.constant /.istore_3) (function.constant /.iload_3)] test))
                    (_.lifted "ISTORE/ILOAD"
                              (store_and_load ..$Integer::random ..$Integer::literal ..$Integer::wrap [/.istore /.iload] test))
                    (_.lifted "IINC"
                              (do [! random.monad]
                                [base ..$Byte::random
                                 increment (of ! each (|>> (n.% 100) /unsigned.u1 try.trusted)
                                               random.nat)
                                 .let [expected (is java/lang/Long
                                                    (for .old
                                                         ("jvm ladd"
                                                          (ffi.byte_to_long base)
                                                          (.int (/unsigned.value increment)))
                                                         
                                                         .jvm
                                                         (.jvm_object_cast#
                                                          (.jvm_long_+# (.jvm_object_cast# (ffi.byte_to_long base))
                                                                        (.jvm_object_cast# (as java/lang/Long (/unsigned.value increment)))))))]]
                                (..bytecode (|>> (as Int) (i.= (as Int expected)))
                                            (do /.monad
                                              [_ (..$Byte::literal base)
                                               _ /.istore_0
                                               _ (/.iinc 0 increment)
                                               _ /.iload_0
                                               _ /.i2l]
                                              ..$Long::wrap)))))))
         (<| (_.context "long")
             (let [test (!::= java/lang/Long "jvm leq" .jvm_long_=#)]
               (all _.and
                    (_.lifted "LSTORE_0/LLOAD_0"
                              (store_and_load ..$Long::random ..$Long::literal ..$Long::wrap [(function.constant /.lstore_0) (function.constant /.lload_0)] test))
                    (_.lifted "LSTORE_1/LLOAD_1"
                              (store_and_load ..$Long::random ..$Long::literal ..$Long::wrap [(function.constant /.lstore_1) (function.constant /.lload_1)] test))
                    (_.lifted "LSTORE_2/LLOAD_2"
                              (store_and_load ..$Long::random ..$Long::literal ..$Long::wrap [(function.constant /.lstore_2) (function.constant /.lload_2)] test))
                    (_.lifted "LSTORE_3/LLOAD_3"
                              (store_and_load ..$Long::random ..$Long::literal ..$Long::wrap [(function.constant /.lstore_3) (function.constant /.lload_3)] test))
                    (_.lifted "LSTORE/LLOAD"
                              (store_and_load ..$Long::random ..$Long::literal ..$Long::wrap [/.lstore /.lload] test)))))
         (<| (_.context "float")
             (let [test (!::= java/lang/Float "jvm feq" .jvm_float_=#)]
               (all _.and
                    (_.lifted "FSTORE_0/FLOAD_0"
                              (store_and_load ..valid_float ..$Float::literal ..$Float::wrap [(function.constant /.fstore_0) (function.constant /.fload_0)] test))
                    (_.lifted "FSTORE_1/FLOAD_1"
                              (store_and_load ..valid_float ..$Float::literal ..$Float::wrap [(function.constant /.fstore_1) (function.constant /.fload_1)] test))
                    (_.lifted "FSTORE_2/FLOAD_2"
                              (store_and_load ..valid_float ..$Float::literal ..$Float::wrap [(function.constant /.fstore_2) (function.constant /.fload_2)] test))
                    (_.lifted "FSTORE_3/FLOAD_3"
                              (store_and_load ..valid_float ..$Float::literal ..$Float::wrap [(function.constant /.fstore_3) (function.constant /.fload_3)] test))
                    (_.lifted "FSTORE/FLOAD"
                              (store_and_load ..valid_float ..$Float::literal ..$Float::wrap [/.fstore /.fload] test)))))
         (<| (_.context "double")
             (let [test (!::= java/lang/Double "jvm deq" .jvm_double_=#)]
               (all _.and
                    (_.lifted "DSTORE_0/DLOAD_0"
                              (store_and_load ..valid_double ..$Double::literal ..$Double::wrap [(function.constant /.dstore_0) (function.constant /.dload_0)] test))
                    (_.lifted "DSTORE_1/DLOAD_1"
                              (store_and_load ..valid_double ..$Double::literal ..$Double::wrap [(function.constant /.dstore_1) (function.constant /.dload_1)] test))
                    (_.lifted "DSTORE_2/DLOAD_2"
                              (store_and_load ..valid_double ..$Double::literal ..$Double::wrap [(function.constant /.dstore_2) (function.constant /.dload_2)] test))
                    (_.lifted "DSTORE_3/DLOAD_3"
                              (store_and_load ..valid_double ..$Double::literal ..$Double::wrap [(function.constant /.dstore_3) (function.constant /.dload_3)] test))
                    (_.lifted "DSTORE/DLOAD"
                              (store_and_load ..valid_double ..$Double::literal ..$Double::wrap [/.dstore /.dload] test)))))
         (<| (_.context "object")
             (let [test (is (-> java/lang/String Any Bit)
                            (function (_ expected actual)
                              (|> actual (as Text) (text#= (as Text expected)))))]
               (all _.and
                    (_.lifted "ASTORE_0/ALOAD_0"
                              (store_and_load ..$String::random ..$String::literal /.nop [(function.constant /.astore_0) (function.constant /.aload_0)] test))
                    (_.lifted "ASTORE_1/ALOAD_1"
                              (store_and_load ..$String::random ..$String::literal /.nop [(function.constant /.astore_1) (function.constant /.aload_1)] test))
                    (_.lifted "ASTORE_2/ALOAD_2"
                              (store_and_load ..$String::random ..$String::literal /.nop [(function.constant /.astore_2) (function.constant /.aload_2)] test))
                    (_.lifted "ASTORE_3/ALOAD_3"
                              (store_and_load ..$String::random ..$String::literal /.nop [(function.constant /.astore_3) (function.constant /.aload_3)] test))
                    (_.lifted "ASTORE/ALOAD"
                              (store_and_load ..$String::random ..$String::literal /.nop [/.astore /.aload] test)))))
         )))

(the stack
  Test
  (do random.monad
    [expected/1 $String::random
     .let [object_test (is (-> Any Bit)
                           (|>> (as Text) (text#= (as Text expected/1))))]
     dummy/1 $String::random
     .let [single (all _.and
                       (<| (_.lifted "DUP & POP")
                           (..bytecode object_test)
                           (do /.monad
                             [_ ($String::literal expected/1)
                              _ /.dup]
                             /.pop))
                       (<| (_.lifted "DUP_X1 & POP2")
                           (..bytecode object_test)
                           (do /.monad
                             [_ ($String::literal dummy/1)
                              _ ($String::literal expected/1)
                              _ /.dup_x1]
                             /.pop2))
                       (<| (_.lifted "DUP_X2")
                           (..bytecode object_test)
                           (do /.monad
                             [_ ($String::literal dummy/1)
                              _ ($String::literal dummy/1)
                              _ ($String::literal expected/1)
                              _ /.dup_x2
                              _ /.pop2]
                             /.pop))
                       (<| (_.lifted "SWAP")
                           (..bytecode object_test)
                           (do /.monad
                             [_ ($String::literal dummy/1)
                              _ ($String::literal expected/1)
                              _ /.swap]
                             /.pop))
                       )]
     expected/2 $Long::random
     .let [long_test (is (-> Any Bit)
                         (|>> (as Int) (i.= (as Int expected/2))))]
     dummy/2 $Long::random
     .let [double (all _.and
                       (<| (_.lifted "DUP2")
                           (..bytecode long_test)
                           (do /.monad
                             [_ ($Long::literal expected/2)
                              _ /.dup2
                              _ /.pop2]
                             ..$Long::wrap))
                       (<| (_.lifted "DUP2_X1")
                           (..bytecode long_test)
                           (do /.monad
                             [_ ($String::literal dummy/1)
                              _ ($Long::literal expected/2)
                              _ /.dup2_x1
                              _ /.pop2
                              _ /.pop]
                             ..$Long::wrap))
                       (<| (_.lifted "DUP2_X2")
                           (..bytecode long_test)
                           (do /.monad
                             [_ ($Long::literal dummy/2)
                              _ ($Long::literal expected/2)
                              _ /.dup2_x2
                              _ /.pop2
                              _ /.pop2]
                             ..$Long::wrap))
                       )]]
    (all _.and
         (<| (_.context "single")
             single)
         (<| (_.context "double")
             double)
         )))

(the resource
  Test
  (all _.and
       (<| (_.context "registry")
           ..registry)
       (<| (_.context "stack")
           ..stack)
       ))

(the return
  Test
  (let [primitive_return (is (All (_ a) (-> (Primitive a) (Bytecode Any) (Maybe (-> a (Bytecode Any))) (-> a Any Bit) (Random Bit)))
                             (function (_ primitive return substitute test)
                               (do random.monad
                                 [class_name ..class_name
                                  primitive_method_name (random.upper_cased 10)
                                  .let [primitive_method_type (/type.method [(list) (list) (its #unboxed primitive) (list)])]
                                  object_method_name (|> (random.upper_cased 10)
                                                         (random.only (|>> (text#= primitive_method_name) not)))
                                  expected (its #random primitive)
                                  .let [$Self (/type.class class_name (list))]]
                                 (in (when (do try.monad
                                             [class (/class.class /version.v6_0 /class.public
                                                      (/name.internal class_name)
                                                      {.#None}
                                                      (/name.internal "java.lang.Object")
                                                      (list)
                                                      (list)
                                                      (list (/method.method ..method_modifier
                                                              primitive_method_name
                                                              false primitive_method_type
                                                              (list)
                                                              {.#Some (do /.monad
                                                                        [_ ((its #literal primitive) expected)]
                                                                        return)})
                                                            (/method.method ..method_modifier
                                                              object_method_name
                                                              false (/type.method [(list) (list) (its #boxed primitive) (list)])
                                                              (list)
                                                              {.#Some (do /.monad
                                                                        [_ (/.invokestatic $Self primitive_method_name primitive_method_type)
                                                                         _ (when substitute
                                                                             {.#None}
                                                                             (in [])

                                                                             {.#Some substitute}
                                                                             (substitute expected))
                                                                         _ (its #wrap primitive)]
                                                                        /.areturn)}))
                                                      (list))
                                              .let [bytecode (binary.value /class.format class)
                                                    loader (/loader.memory (/loader.new_library []))]
                                              _ (/loader.define class_name bytecode loader)
                                              class (io.run! (/loader.load class_name loader))
                                              method (try (get_method object_method_name class))]
                                             (java/lang/reflect/Method::invoke [(ffi.null) (ffi.array java/lang/Object 0)] method))
                                       {try.#Success actual}
                                       (test expected actual)

                                       {try.#Failure error}
                                       false)
                                     ))))]
    (all _.and
         (_.lifted "IRETURN" (primitive_return ..$Integer::primitive /.ireturn {.#None} (!::= java/lang/Integer "jvm ieq" .jvm_int_=#)))
         (_.lifted "LRETURN" (primitive_return ..$Long::primitive /.lreturn {.#None} (!::= java/lang/Long "jvm leq" .jvm_long_=#)))
         (_.lifted "FRETURN" (primitive_return ..$Float::primitive /.freturn {.#None} (!::= java/lang/Float "jvm feq" .jvm_float_=#)))
         (_.lifted "DRETURN" (primitive_return ..$Double::primitive /.dreturn {.#None} (!::= java/lang/Double "jvm deq" .jvm_double_=#)))
         (_.lifted "ARETURN" (primitive_return ..$String::primitive /.areturn {.#None} (function (_ expected actual) (text#= (as Text expected) (as Text actual)))))
         (_.lifted "RETURN" (primitive_return (is (Primitive java/lang/String)
                                                  [#unboxed /type.void
                                                   #boxed ..$String
                                                   #wrap /.nop
                                                   #random ..$String::random
                                                   #literal (function.constant /.nop)])
                                              /.return
                                              {.#Some ..$String::literal}
                                              (function (_ expected actual) (text#= (as Text expected) (as Text actual)))))
         )))

(the branching
  Test
  (do random.monad
    [expected ..$Long::random
     dummy ..$Long::random
     .let [if! (is (-> (-> Label (Bytecode Any)) (Bytecode Any) (Random Bit))
                   (function (_ instruction prelude)
                     (<| (..bytecode ((!::= java/lang/Long "jvm leq" .jvm_long_=#) expected))
                         (do /.monad
                           [@then /.new_label
                            @end /.new_label
                            _ prelude
                            _ (instruction @then)
                            _ (..$Long::literal dummy)
                            _ (/.goto @end)
                            _ (/.set_label @then)
                            _ (..$Long::literal expected)
                            _ (/.set_label @end)]
                           ..$Long::wrap))))
           comparison_against_zero (all _.and
                                        (_.lifted "IFEQ" (if! /.ifeq /.iconst_0))
                                        (_.lifted "IFNE" (if! /.ifne /.iconst_1))
                                        (_.lifted "IFLT" (if! /.iflt /.iconst_m1))
                                        (_.lifted "IFLE" (if! /.ifle /.iconst_0))
                                        (_.lifted "IFGT" (if! /.ifgt /.iconst_1))
                                        (_.lifted "IFGE" (if! /.ifge /.iconst_0)))
           null_test (all _.and
                          (_.lifted "IFNULL" (if! /.ifnull /.aconst_null))
                          (_.lifted "IFNONNULL" (if! /.ifnonnull (/.string ""))))]
     expected ..$Integer::random
     actual (|> ..$Integer::random
                (random.only (|>> ((!::= java/lang/Integer "jvm ieq" .jvm_int_=#) expected) not)))
     .let [[lesser greater] (if (for .old
                                     ("jvm ilt" expected actual)
                                     
                                     .jvm
                                     (.jvm_int_<# (.jvm_object_cast# actual) (.jvm_object_cast# expected)))
                              [expected actual]
                              [actual expected])
           int_comparison (all _.and
                               (_.lifted "IF_ICMPEQ" (if! /.if_icmpeq (do /.monad [_ (..$Integer::literal expected)] /.dup)))
                               (_.lifted "IF_ICMPNE" (if! /.if_icmpne (do /.monad [_ (..$Integer::literal expected)] (..$Integer::literal actual))))
                               (_.lifted "IF_ICMPLT" (if! /.if_icmplt (do /.monad [_ (..$Integer::literal lesser)] (..$Integer::literal greater))))
                               (_.lifted "IF_ICMPLE" (if! /.if_icmple (do /.monad [_ (..$Integer::literal lesser)] (..$Integer::literal greater))))
                               (_.lifted "IF_ICMPGT" (if! /.if_icmpgt (do /.monad [_ (..$Integer::literal greater)] (..$Integer::literal lesser))))
                               (_.lifted "IF_ICMPGE" (if! /.if_icmpge (do /.monad [_ (..$Integer::literal greater)] (..$Integer::literal lesser)))))
           new_object (is (Bytecode Any)
                          (do /.monad
                            [_ (/.new ..$Object)
                             _ /.dup]
                            (/.invokespecial ..$Object "<init>" (/type.method [(list) (list) /type.void (list)]))))
           reference_comparison (all _.and
                                     (_.lifted "IF_ACMPEQ" (if! /.if_acmpeq (do /.monad [_ new_object] /.dup)))
                                     (_.lifted "IF_ACMPNE" (if! /.if_acmpne (do /.monad [_ new_object] new_object)))
                                     )]]
    (all _.and
         comparison_against_zero
         null_test
         int_comparison
         reference_comparison
         )))

(the jump
  Test
  (do random.monad
    [expected ..$Long::random
     dummy ..$Long::random
     .let [jump (is (-> (-> Label (Bytecode Any)) (Random Bit))
                    (function (_ goto)
                      (<| (..bytecode ((!::= java/lang/Long "jvm leq" .jvm_long_=#) expected))
                          (do /.monad
                            [@skipped /.new_label
                             @value /.new_label
                             @end /.new_label
                             _ (goto @value)
                             _ (/.set_label @skipped)
                             _ (..$Long::literal dummy)
                             _ (goto @end)
                             _ (/.set_label @value)
                             _ (..$Long::literal expected)
                             _ (/.set_label @end)]
                            ..$Long::wrap))))]]
    (all _.and
         (_.lifted "GOTO" (jump /.goto))
         (_.lifted "GOTO_W" (jump /.goto_w)))))

(the switch
  Test
  (all _.and
       (<| (_.lifted "TABLESWITCH")
           (do [! random.monad]
             [expected ..$Long::random
              dummy ..$Long::random
              minimum (of ! each (|>> (n.% 100) .int /signed.s4 try.trusted)
                          random.nat)
              afterwards (of ! each (n.% 10) random.nat)])
           (..bytecode ((!::= java/lang/Long "jvm leq" .jvm_long_=#) expected))
           (do /.monad
             [@right /.new_label
              @wrong /.new_label
              @return /.new_label
              _ (/.bipush (|> minimum /signed.value .int /signed.s1 try.trusted))
              _ (/.tableswitch minimum @wrong [@right (list.repeated afterwards @wrong)])
              _ (/.set_label @wrong)
              _ (..$Long::literal dummy)
              _ (/.goto @return)
              _ (/.set_label @right)
              _ (..$Long::literal expected)
              _ (/.set_label @return)]
             ..$Long::wrap))
       (<| (_.lifted "LOOKUPSWITCH")
           (do [! random.monad]
             [options (of ! each (|>> (n.% 10) (n.+ 1))
                          random.nat)
              choice (of ! each (n.% options) random.nat)
              options (|> random.int
                          (of ! each (|>> (as java/lang/Long) ffi.long_to_int ffi.int_to_long (as Int)))
                          (random.set i.hash options)
                          (of ! each set.list))
              .let [choice (maybe.trusted (list.item choice options))]
              expected ..$Long::random
              dummy ..$Long::random])
           (..bytecode ((!::= java/lang/Long "jvm leq" .jvm_long_=#) expected))
           (do /.monad
             [@right /.new_label
              @wrong /.new_label
              @return /.new_label
              _ (..$Integer::literal (ffi.long_to_int (as java/lang/Long choice)))
              _ (/.lookupswitch @wrong (list#each (function (_ option)
                                                    [(|> option /signed.s4 try.trusted)
                                                     (if (i.= choice option) @right @wrong)])
                                                  options))
              _ (/.set_label @wrong)
              _ (..$Long::literal dummy)
              _ (/.goto @return)
              _ (/.set_label @right)
              _ (..$Long::literal expected)
              _ (/.set_label @return)]
             ..$Long::wrap))
       ))

(the exception
  Test
  (do random.monad
    [expected ..$Long::random
     dummy ..$Long::random
     exception ..$String::random]
    (<| (_.lifted "ATHROW")
        (..bytecode ((!::= java/lang/Long "jvm leq" .jvm_long_=#) expected))
        (do /.monad
          [.let [$Exception (/type.class "java.lang.Exception" (list))]
           @skipped /.new_label
           @try /.new_label
           @handler /.new_label
           @return /.new_label
           _ (/.try @try @handler @handler $Exception)
           _ (/.set_label @try)
           _ (/.new $Exception)
           _ /.dup
           _ (..$String::literal exception)
           _ (/.invokespecial $Exception "<init>" (/type.method [(list) (list ..$String) /type.void (list)]))
           _ /.athrow
           _ (/.set_label @skipped)
           _ (..$Long::literal dummy)
           _ (/.goto @return)
           _ (/.set_label @handler)
           _ /.pop
           _ (..$Long::literal expected)
           _ (/.set_label @return)]
          ..$Long::wrap))))

(the code
  Test
  (all _.and
       (<| (_.context "return")
           ..return)
       (<| (_.context "branching")
           ..branching)
       (<| (_.context "jump")
           ..jump)
       (<| (_.context "switch")
           ..switch)
       (<| (_.context "exception")
           ..exception)
       ))

(the instruction
  Test
  (all _.and
       (<| (_.context "value")
           ..value)
       (<| (_.context "resource")
           ..resource)
       (<| (_.context "code")
           ..code)
       ))

(the inheritance
  Test
  (do random.monad
    [abstract_class ..class_name
     interface_class (|> ..class_name
                         (random.only (|>> (text#= abstract_class) not)))
     concrete_class (|> ..class_name
                        (random.only (function (_ class)
                                       (not (or (text#= abstract_class class)
                                                (text#= interface_class class))))))
     part0 ..$Long::random
     part1 ..$Long::random
     part2 ..$Long::random
     fake_part2 ..$Long::random
     part3 ..$Long::random
     part4 ..$Long::random
     .let [expected (all i.+
                         (as Int part0)
                         (as Int part1)
                         (as Int part2)
                         (as Int part3)
                         (as Int part4))
           $Concrete (/type.class concrete_class (list))
           $Abstract (/type.class abstract_class (list))
           $Interface (/type.class interface_class (list))

           constructor::type (/type.method [(list) (list) /type.void (list)])
           method::type (/type.method [(list) (list) /type.long (list)])

           inherited_method "inherited_method"
           overriden_method "overriden_method"
           abstract_method "abstract_method"
           interface_method "interface_method"
           virtual_method "virtual_method"
           static_method "static_method"

           method (is (-> Text java/lang/Long (Resource Method))
                      (function (_ name value)
                        (/method.method /method.public
                          name
                          false method::type
                          (list)
                          {.#Some (do /.monad
                                    [_ (..$Long::literal value)]
                                    /.lreturn)})))

           interface_bytecode (|> (/class.class /version.v6_0 (all /modifier#composite /class.public /class.abstract /class.interface)
                                    (/name.internal interface_class)
                                    {.#None}
                                    (/name.internal "java.lang.Object")
                                    (list)
                                    (list)
                                    (list (/method.method (all /modifier#composite /method.public /method.abstract)
                                            interface_method false method::type (list) {.#None}))
                                    (list))
                                  try.trusted
                                  (binary.value /class.format))
           abstract_bytecode (|> (/class.class /version.v6_0 (all /modifier#composite /class.public /class.abstract)
                                   (/name.internal abstract_class)
                                   {.#None}
                                   (/name.internal "java.lang.Object")
                                   (list)
                                   (list)
                                   (list (/method.method /method.public
                                           "<init>"
                                           false constructor::type
                                           (list)
                                           {.#Some (do /.monad
                                                     [_ /.aload_0
                                                      _ (/.invokespecial ..$Object "<init>" constructor::type)]
                                                     /.return)})
                                         (method inherited_method part0)
                                         (method overriden_method fake_part2)
                                         (/method.method (all /modifier#composite /method.public /method.abstract)
                                           abstract_method false method::type (list) {.#None}))
                                   (list))
                                 try.trusted
                                 (binary.value /class.format))
           invoke (is (-> (Type Class) Text (Bytecode Any))
                      (function (_ class method)
                        (do /.monad
                          [_ /.aload_0]
                          (/.invokevirtual class method method::type))))
           concrete_bytecode (|> (/class.class /version.v6_0 /class.public
                                   (/name.internal concrete_class)
                                   {.#None}
                                   (/name.internal abstract_class)
                                   (list (/name.internal interface_class))
                                   (list)
                                   (list (/method.method /method.public
                                           "<init>"
                                           false constructor::type
                                           (list)
                                           {.#Some (do /.monad
                                                     [_ /.aload_0
                                                      _ (/.invokespecial $Abstract "<init>" constructor::type)]
                                                     /.return)})
                                         (method virtual_method part1)
                                         (method overriden_method part2)
                                         (method abstract_method part3)
                                         (method interface_method part4)
                                         (/method.method (all /modifier#composite
                                                              /method.public
                                                              /method.static)
                                           static_method
                                           false (/type.method [(list) (list) ..$Long (list)])
                                           (list)
                                           {.#Some (do /.monad
                                                     [_ (/.new $Concrete)
                                                      _ /.dup
                                                      _ (/.invokespecial $Concrete "<init>" constructor::type)
                                                      _ /.astore_0
                                                      _ (invoke $Abstract inherited_method)
                                                      _ (invoke $Concrete virtual_method)
                                                      _ /.ladd
                                                      _ (invoke $Abstract overriden_method)
                                                      _ /.ladd
                                                      _ /.aload_0 _ (/.invokeinterface $Interface interface_method method::type)
                                                      _ /.ladd
                                                      _ (invoke $Abstract abstract_method)
                                                      _ /.ladd
                                                      _ ..$Long::wrap]
                                                     /.areturn)}))
                                   (list))
                                 try.trusted
                                 (binary.value /class.format))
           loader (/loader.memory (/loader.new_library []))]]
    (_.test "Class & interface inheritance"
      (when (do try.monad
              [_ (/loader.define abstract_class abstract_bytecode loader)
               _ (/loader.define interface_class interface_bytecode loader)
               _ (/loader.define concrete_class concrete_bytecode loader)
               class (io.run! (/loader.load concrete_class loader))
               method (try (get_method static_method class))
               output (java/lang/reflect/Method::invoke [(ffi.null) (ffi.array java/lang/Object 0)] method)]
              (in (as Int output)))
        {try.#Success actual}
        (i.= (as Int expected) (as Int actual))

        {try.#Failure error}
        false))))

(the .public test
  Test
  (<| (_.covering .._)
      (all _.and
           (<| (_.context "instruction")
               ..instruction)
           (<| (_.context "inheritance")
               ..inheritance)
           )))
