... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [meta
    ["[0]" provenance]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["/[1]" //]]]
 ["[0]" /
  ["[1][0]" import]])

(the !expect
  (template.macro (_ <pattern> <value>)
    [(when <value>
       <pattern> true
       _ false)]))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (_.for [/.Name]
                  (_.coverage [/.runtime]
                    (text.empty? /.runtime)))
           (monad.let random.monad
             [target (random.upper_cased 1)
              version (random.upper_cased 1)
              source_code (random.upper_cased 1)
              expected_current_module (random.upper_cased 1)
              imported_module_name (random.only (|>> (text.= expected_current_module) not)
                                                (random.upper_cased 1))
              nominal_type (random.upper_cased 1)
              expected_seed random.natural
              expected random.natural
              dummy (random.only (|>> (n.= expected) not) random.natural)
              dummy_module (random.only (function (_ module)
                                          (not (or (text.= expected_current_module module)
                                                   (text.= imported_module_name module))))
                                        (random.upper_cased 1))
              .let [imported_module [.#module_hash 0
                                     .#module_aliases (list)
                                     .#definitions (list)
                                     .#imports (list)
                                     .#module_state {.#Active}]
                    expected_module [.#module_hash 0
                                     .#module_aliases (list)
                                     .#definitions (list)
                                     .#imports (list imported_module_name)
                                     .#module_state {.#Active}]
                    expected_modules (list [expected_current_module
                                            expected_module]
                                           [imported_module_name
                                            imported_module])
                    expected_lux_minus_module (is Lux
                                                  [.#info [.#target target
                                                           .#version version
                                                           .#mode {.#Build}
                                                           .#configuration (list)]
                                                   .#source [provenance.dummy 0 source_code]
                                                   .#provenance provenance.dummy
                                                   .#current_module {.#None}
                                                   .#modules expected_modules
                                                   .#scopes (stack)
                                                   .#type_context [.#there_exists 0
                                                                   .#for_all (list)]
                                                   .#expected {.#Some {.#Nominal nominal_type (list)}}
                                                   .#seed expected_seed
                                                   .#eval (as_expected [])])
                    expected_lux (has .#current_module {.#Some expected_current_module}
                                      expected_lux_minus_module)]]
             (<| (_.for [.Module
                         .#module_hash .#module_aliases .#definitions .#imports .#module_state])
                 (all _.and
                      (_.coverage [/.current]
                        (|> /.current
                            (//.value expected_lux)
                            (!expect (^.multi {try.#Success [actual_current_module actual_module]}
                                              (and (text.= expected_current_module actual_current_module)
                                                   (same? expected_module actual_module))))))
                      (_.coverage [/.current_name]
                        (|> /.current_name
                            (//.value expected_lux)
                            (!expect (^.multi {try.#Success actual_current_module}
                                              (text.= expected_current_module actual_current_module)))))
                      (_.coverage [/.by_name]
                        (|> (/.by_name expected_current_module)
                            (//.value expected_lux)
                            (!expect (^.multi {try.#Success actual_module}
                                              (same? expected_module actual_module)))))
                      (_.coverage [/.exists?]
                        (and (|> (/.exists? expected_current_module)
                                 (//.value expected_lux)
                                 (!expect {try.#Success .true}))
                             (|> (/.exists? dummy_module)
                                 (//.value expected_lux)
                                 (!expect {try.#Success .false}))))
                      (_.coverage [/.all]
                        (|> /.all
                            (//.value expected_lux)
                            (!expect (^.multi {try.#Success actual_modules}
                                              (same? expected_modules actual_modules)))))
                      )))
           
           /import.test
           )))
