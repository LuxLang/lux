... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equality
     ["[1]T" \\test]]]
   [data
    ["[0]" text]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["[0]" natural]]]]
   [meta
    ["[0]" static]
    ["[0]" code]
    ["[0]" module]]
   [test
    ["_" property (.only Test)]]
   [compiler
    ["@[0]" type]]
   [type
    ["[0]" check]]]]
 [\\library
  ["[0]" /]])

(the .public random
  (Random Provenance)
  (all random.and
       (random.alphabetic 10)
       random.natural
       random.natural
       ))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [.Provenance
              .:module .:line .:column])
      (all _.and
           (_.for [/.equality /.=]
                  (static.when (identical? /.equality /.=)
                    (equalityT.spec /.equality ..random)))

           (_.coverage [@type.Provenance]
             (check.< .Provenance @type.Provenance))
           (_.coverage [/.here]
             (not (by /.equality = (/.here) (/.here))))
           (monad.let random.monad
             [provenance ..random
              error (random.alphabetic 10)]
             (_.coverage [/.as_text /.with]
               (let [located_error (/.with provenance error)]
                 (and (text.contains? (/.as_text provenance)
                                      located_error)
                      (text.contains? error
                                      located_error)))))
           (monad.let random.monad
             [expected_module (random.alphabetic 10)]
             (_.coverage [/.new]
               (and (identical? expected_module (its .:module (/.new expected_module)))
                    (natural.= natural.zero (its .:line (/.new expected_module)))
                    (natural.= natural.zero (its .:column (/.new expected_module))))))
           (_.coverage [/.dummy]
             (/.= (/.new module.runtime) /.dummy))
           )))
