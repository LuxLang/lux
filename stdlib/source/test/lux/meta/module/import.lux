... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   ["[0]" meta (.only)
    ["[0]" provenance]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let random.monad
        [target (random.upper_cased 1)
         version (random.upper_cased 1)
         source_code (random.upper_cased 1)
         expected_current_module (random.upper_cased 1)
         imported_module_name (random.only (|>> (text.= expected_current_module) not)
                                           (random.upper_cased 1))
         nominal_type (random.upper_cased 1)
         expected_seed random.natural
         expected random.natural
         dummy (random.only (|>> (n.= expected) not) random.natural)
         dummy_module (random.only (function (_ module)
                                     (not (or (text.= expected_current_module module)
                                              (text.= imported_module_name module))))
                                   (random.upper_cased 1))
         .let [imported_module [.#module_hash 0
                                .#module_aliases (list)
                                .#definitions (list)
                                .#imports (list)
                                .#module_state {.#Active}]
               expected_module [.#module_hash 0
                                .#module_aliases (list)
                                .#definitions (list)
                                .#imports (list imported_module_name)
                                .#module_state {.#Active}]
               expected_modules (list [expected_current_module
                                       expected_module]
                                      [imported_module_name
                                       imported_module])
               expected_lux (is Lux
                                [.#info [.#target target
                                         .#version version
                                         .#mode {.#Build}
                                         .#configuration (list)]
                                 .#source [provenance.dummy 0 source_code]
                                 .#provenance provenance.dummy
                                 .#current_module {.#Some expected_current_module}
                                 .#modules expected_modules
                                 .#scopes (stack)
                                 .#type_context [.#there_exists 0
                                                 .#for_all (list)]
                                 .#expected {.#Some {.#Nominal nominal_type (list)}}
                                 .#seed expected_seed
                                 .#eval (as_expected [])])]]
        (all _.and
             (_.coverage [/.all]
               (and (|> (/.all expected_current_module)
                        (meta.value expected_lux)
                        (try#each (by (list.equivalence text.equivalence) =
                                      (list imported_module_name)))
                        (try.else false))
                    (|> (/.all imported_module_name)
                        (meta.value expected_lux)
                        (try#each (by (list.equivalence text.equivalence) =
                                      (list)))
                        (try.else false))))
             (_.coverage [/.by?]
               (|> (/.by? imported_module_name expected_current_module)
                   (meta.value expected_lux)
                   (try.else false)))
             (_.coverage [/.current?]
               (|> (/.current? imported_module_name)
                   (meta.value expected_lux)
                   (try.else false)))
             ))))
