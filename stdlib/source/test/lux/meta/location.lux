(.module:
  [library
   [lux "*"
    ["_" test {"+" [Test]}]
    [abstract
     [monad {"+" [do]}]
     [\\specification
      ["$[0]" equivalence]]]
    [data
     ["[0]" text]]
    [math
     ["[0]" random {"+" [Random]}]]]]
  [\\library
   ["[0]" /]]
  ["$[0]" /// "_"
   [macro
    ["[1][0]" code]]])

(def: .public random
  (Random Location)
  ($_ random.and
      (random.ascii/alpha 10)
      random.nat
      random.nat
      ))

(def: .public test
  Test
  (<| (_.covering /._)
      (_.for [.Location])
      ($_ _.and
          (_.for [/.equivalence]
                 ($equivalence.spec /.equivalence ..random))

          (_.cover [/.here]
                   (not (\ /.equivalence = (/.here) (/.here))))
          (do random.monad
            [location ..random
             error (random.ascii/alpha 10)]
            (_.cover [/.format /.with]
                     (let [located_error (/.with location error)]
                       (and (text.contains? (/.format location)
                                            located_error)
                            (text.contains? error
                                            located_error)))))
          (do random.monad
            [[location _] $///code.random]
            (_.cover [/.dummy]
                     (\ /.equivalence = /.dummy location)))
          )))
