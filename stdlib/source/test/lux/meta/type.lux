... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except symbol)
   [abstract
    ["[0]" monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["<>" parser]
    ["[0]" pipe]
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list]
     ["[0]" array]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" nat]]]
   [meta
    ["[0]" symbol (.use "[1]#[0]" equivalence)]
    ["[0]" code (.use "[1]#[0]" equivalence)]
    ["[0]" static]
    [macro
     ["^" pattern]]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" \\parser]
 [\\library
  ["[0]" / (.use "[1]#[0]" equivalence)]]
 ["[0]" /
  ["[1][0]" nominal]
  ["[1][0]" check]
  ["[1][0]" dynamic]
  ["[1][0]" implicit]
  ["[1][0]" quotient]
  ["[1][0]" refinement]
  ["[1][0]" linear]
  ["[1][0]" unit]
  ["[1][0]" variance]
  ["[1][0]" poly]
  ["[1][0]" row]
  ["[1][0]" brand]])

(the !expect
  (template (_ <pattern> <value>)
    [(when <value>
       <pattern>
       true
       
       _
       false)]))

(the nominal
  (Random Type)
  (|> (random.alpha_numeric 1)
      (of random.monad each (function (_ name)
                              {.#Nominal name (list)}))))

(the test|matches
  Test
  (<| (_.for [\\parser.types_do_not_match])
      (do [! random.monad]
        [expected ..nominal
         dummy (random.only (|>> (/#= expected) not)
                            ..nominal)])
      (all _.and
           (_.coverage [\\parser.exactly]
             (and (|> (\\parser.value (\\parser.exactly expected) expected)
                      (!expect {try.#Success []}))
                  (|> (\\parser.value (\\parser.exactly expected) dummy)
                      (!expect (^.multi {try.#Failure error}
                                        (exception.is? \\parser.types_do_not_match error))))))
           (_.coverage [\\parser.sub]
             (and (|> (\\parser.value (\\parser.sub expected) expected)
                      (!expect {try.#Success []}))
                  (|> (\\parser.value (\\parser.sub Any) expected)
                      (!expect {try.#Success []}))
                  (|> (\\parser.value (\\parser.sub expected) Nothing)
                      (!expect {try.#Success []}))
                  (|> (\\parser.value (\\parser.sub expected) dummy)
                      (!expect (^.multi {try.#Failure error}
                                        (exception.is? \\parser.types_do_not_match error))))))
           (_.coverage [\\parser.super]
             (and (|> (\\parser.value (\\parser.super expected) expected)
                      (!expect {try.#Success []}))
                  (|> (\\parser.value (\\parser.super expected) Any)
                      (!expect {try.#Success []}))
                  (|> (\\parser.value (\\parser.super Nothing) expected)
                      (!expect {try.#Success []}))
                  (|> (\\parser.value (\\parser.super expected) dummy)
                      (!expect (^.multi {try.#Failure error}
                                        (exception.is? \\parser.types_do_not_match error))))))
           )))

(the test|aggregate
  Test
  (do [! random.monad]
    [expected_left ..nominal
     expected_middle ..nominal
     expected_right ..nominal]
    (`` (all _.and
             (,, (with_template [<parser> <exception> <good_constructor> <bad_constructor>]
                   [(_.coverage [<parser> <exception>]
                      (and (|> (\\parser.value (<parser> (all <>.and \\parser.any \\parser.any \\parser.any))
                                               (<good_constructor> (list expected_left expected_middle expected_right)))
                               (!expect (^.multi {try.#Success [actual_left actual_middle actual_right]}
                                                 (and (/#= expected_left actual_left)
                                                      (/#= expected_middle actual_middle)
                                                      (/#= expected_right actual_right)))))
                           (|> (\\parser.value (<parser> (all <>.and \\parser.any \\parser.any \\parser.any))
                                               (<bad_constructor> (list expected_left expected_middle expected_right)))
                               (!expect (^.multi {try.#Failure error}
                                                 (exception.is? <exception> error))))))]

                   [\\parser.variant \\parser.not_variant /.variant /.tuple]
                   [\\parser.tuple \\parser.not_tuple /.tuple /.variant]
                   ))

             (_.coverage [\\parser.function \\parser.not_function]
               (and (|> (\\parser.value (\\parser.function (all <>.and \\parser.any \\parser.any) \\parser.any)
                                        (/.function (list expected_left expected_middle) expected_right))
                        (!expect (^.multi {try.#Success [[actual_left actual_middle] actual_right]}
                                          (and (/#= expected_left actual_left)
                                               (/#= expected_middle actual_middle)
                                               (/#= expected_right actual_right)))))
                    (|> (\\parser.value (\\parser.function (all <>.and \\parser.any \\parser.any) \\parser.any)
                                        (/.variant (list expected_left expected_middle expected_right)))
                        (!expect (^.multi {try.#Failure error}
                                          (exception.is? \\parser.not_function error))))))
             (_.coverage [\\parser.applied \\parser.not_application]
               (and (|> (\\parser.value (\\parser.applied (all <>.and \\parser.any \\parser.any \\parser.any))
                                        (/.application (list expected_middle expected_right) expected_left))
                        (!expect (^.multi {try.#Success [actual_left actual_middle actual_right]}
                                          (and (/#= expected_left actual_left)
                                               (/#= expected_middle actual_middle)
                                               (/#= expected_right actual_right)))))
                    (|> (\\parser.value (\\parser.applied (all <>.and \\parser.any \\parser.any \\parser.any))
                                        (/.variant (list expected_left expected_middle expected_right)))
                        (!expect (^.multi {try.#Failure error}
                                          (exception.is? \\parser.not_application error))))))
             ))))

(the test|parameter
  Test
  (do random.monad
    [quantification ..nominal
     argument ..nominal
     not_parameter ..nominal
     parameter random.nat]
    (all _.and
         (_.coverage [\\parser.not_parameter]
           (|> (\\parser.value \\parser.parameter not_parameter)
               (!expect (^.multi {try.#Failure error}
                                 (exception.is? \\parser.not_parameter error)))))
         (_.coverage [\\parser.unknown_parameter]
           (|> (\\parser.value \\parser.parameter {.#Parameter parameter})
               (!expect (^.multi {try.#Failure error}
                                 (exception.is? \\parser.unknown_parameter error)))))
         (_.coverage [\\parser.with_extension]
           (|> (\\parser.value (<| (\\parser.with_extension quantification)
                                   (\\parser.with_extension argument)
                                   \\parser.any)
                               not_parameter)
               (!expect (^.multi {try.#Success [quantification::binding argument::binding actual]}
                                 (same? not_parameter actual)))))
         (_.coverage [\\parser.parameter]
           (|> (\\parser.value (<| (\\parser.with_extension quantification)
                                   (\\parser.with_extension argument)
                                   \\parser.parameter)
                               {.#Parameter 0})
               (!expect {try.#Success [quantification::binding argument::binding _]})))
         (_.coverage [\\parser.argument]
           (let [argument? (is (-> Nat Nat Bit)
                               (function (_ @ expected)
                                 (|> (\\parser.value (<| (\\parser.with_extension quantification)
                                                         (\\parser.with_extension argument)
                                                         (\\parser.with_extension quantification)
                                                         (\\parser.with_extension argument)
                                                         (do <>.monad
                                                           [env \\parser.env
                                                            _ \\parser.any]
                                                           (in (\\parser.argument env @))))
                                                     not_parameter)
                                     (!expect (^.multi {try.#Success [_ _ _ _ actual]}
                                                       (n.= expected actual))))))]
             (and (argument? 0 2)
                  (argument? 1 3)
                  (argument? 2 0))))
         (_.coverage [\\parser.wrong_parameter]
           (|> (\\parser.value (<| (\\parser.with_extension quantification)
                                   (\\parser.with_extension argument)
                                   (\\parser.this_parameter 1))
                               {.#Parameter 0})
               (!expect (^.multi {try.#Failure error}
                                 (exception.is? \\parser.wrong_parameter error)))))
         (_.coverage [\\parser.this_parameter]
           (|> (\\parser.value (<| (\\parser.with_extension quantification)
                                   (\\parser.with_extension argument)
                                   (\\parser.this_parameter 0))
                               {.#Parameter 0})
               (!expect {try.#Success [quantification::binding argument::binding _]})))
         )))

(the test|polymorphic
  Test
  (do [! random.monad]
    [not_polymorphic ..nominal
     expected_inputs (of ! each (|>> (n.% 10) ++) random.nat)]
    (all _.and
         (_.coverage [\\parser.not_polymorphic]
           (and (|> (\\parser.value (\\parser.polymorphic \\parser.any)
                                    not_polymorphic)
                    (!expect (^.multi {try.#Failure error}
                                      (exception.is? \\parser.not_polymorphic error))))
                (|> (\\parser.value (\\parser.polymorphic \\parser.any)
                                    (/.univ_q 0 not_polymorphic))
                    (!expect (^.multi {try.#Failure error}
                                      (exception.is? \\parser.not_polymorphic error))))))
         (_.coverage [\\parser.polymorphic]
           (|> (\\parser.value (\\parser.polymorphic \\parser.any)
                               (/.univ_q expected_inputs not_polymorphic))
               (!expect (^.multi {try.#Success [g!poly actual_inputs bodyT]}
                                 (and (n.= expected_inputs (list.size actual_inputs))
                                      (same? not_polymorphic bodyT))))))
         )))

(the test|recursive
  Test
  (do random.monad
    [expected ..nominal]
    (all _.and
         (_.coverage [\\parser.recursive]
           (|> (type (Rec @ expected))
               (\\parser.value (\\parser.recursive \\parser.any))
               (!expect (^.multi {try.#Success [@self actual]}
                                 (/#= expected actual)))))
         (_.coverage [\\parser.recursive_self]
           (|> (type (Rec @ @))
               (\\parser.value (\\parser.recursive \\parser.recursive_self))
               (!expect (^.multi {try.#Success [@expected @actual]}
                                 (same? @expected @actual)))))
         (_.coverage [\\parser.recursive_call]
           (|> (type (All (self input) (self input)))
               (\\parser.value (\\parser.polymorphic \\parser.recursive_call))
               (!expect {try.#Success [@self inputs ???]})))
         (_.coverage [\\parser.not_recursive]
           (and (|> expected
                    (\\parser.value (\\parser.recursive \\parser.any))
                    (!expect (^.multi {try.#Failure error}
                                      (exception.is? \\parser.not_recursive error))))
                (|> expected
                    (\\parser.value \\parser.recursive_self)
                    (!expect (^.multi {try.#Failure error}
                                      (exception.is? \\parser.not_recursive error))))))
         )))

(the \\parser
  Test
  (<| (_.covering \\parser._)
      (_.for [\\parser.Parser])
      (all _.and
           (do [! random.monad]
             [expected ..nominal]
             (_.coverage [\\parser.value \\parser.any]
               (|> (\\parser.value \\parser.any expected)
                   (!expect (^.multi {try.#Success actual}
                                     (/#= expected actual))))))
           (do [! random.monad]
             [expected ..nominal]
             (_.coverage [\\parser.next \\parser.unconsumed_input]
               (and (|> (\\parser.value (do <>.monad
                                          [actual \\parser.next
                                           _ \\parser.any]
                                          (in actual))
                                        expected)
                        (!expect (^.multi {try.#Success actual}
                                          (/#= expected actual))))
                    (|> (\\parser.value \\parser.next expected)
                        (!expect (^.multi {try.#Failure error}
                                          (exception.is? \\parser.unconsumed_input error)))))))
           (do [! random.monad]
             [expected ..nominal]
             (_.coverage [\\parser.empty_input]
               (`` (and (,, (with_template [<parser>]
                              [(|> (\\parser.value (do <>.monad
                                                     [_ \\parser.any]
                                                     <parser>)
                                                   expected)
                                   (!expect (^.multi {try.#Failure error}
                                                     (exception.is? \\parser.empty_input error))))]

                              [\\parser.any]
                              [\\parser.next]
                              ))))))
           (do [! random.monad]
             [expected ..nominal]
             (_.coverage [\\parser.Env \\parser.env \\parser.fresh]
               (|> (\\parser.value (do <>.monad
                                     [env \\parser.env
                                      _ \\parser.any]
                                     (in env))
                                   expected)
                   (!expect (^.multi {try.#Success environment}
                                     (same? \\parser.fresh environment))))))
           (do [! random.monad]
             [expected ..nominal
              dummy (random.only (|>> (/#= expected) not)
                                 ..nominal)]
             (_.coverage [\\parser.local]
               (|> (\\parser.value (do <>.monad
                                     [_ \\parser.any]
                                     (\\parser.local (list expected)
                                                     \\parser.any))
                                   dummy)
                   (!expect (^.multi {try.#Success actual}
                                     (/#= expected actual))))))
           (do [! random.monad]
             [expected random.nat]
             (_.coverage [\\parser.existential \\parser.not_existential]
               (|> (\\parser.value \\parser.existential
                                   {.#Opaque expected})
                   (!expect (^.multi {try.#Success actual}
                                     (n.= expected actual))))))
           (do [! random.monad]
             [expected_name (random.and (random.alpha_numeric 1)
                                        (random.alpha_numeric 1))
              expected_type ..nominal]
             (_.coverage [\\parser.named \\parser.not_named]
               (|> (\\parser.value \\parser.named
                                   {.#Named expected_name expected_type})
                   (!expect (^.multi {try.#Success [actual_name actual_type]}
                                     (and (symbol#= expected_name actual_name)
                                          (/#= expected_type actual_type)))))))
           ..test|aggregate
           ..test|matches
           ..test|parameter
           ..test|polymorphic
           ..test|recursive
           )))

(the short
  (Random Text)
  (do [! random.monad]
    [size (|> random.nat (of ! each (n.% 10)))]
    (random.unicode size)))

(the symbol
  (Random Symbol)
  (random.and ..short ..short))

(the (random' parameters)
  (-> Nat (Random Type))
  (random.rec
   (function (_ again)
     (let [pairG (random.and again again)
           un_parameterized (is (Random Type)
                                (all random.either
                                     (random#each (|>> {.#Nominal}) (random.and ..short (random.list 0 again)))
                                     (random#each (|>> {.#Nominal}) (random.and ..short (random.list 1 again)))
                                     (random#each (|>> {.#Nominal}) (random.and ..short (random.list 2 again)))
                                     (random#each (|>> {.#Sum}) pairG)
                                     (random#each (|>> {.#Product}) pairG)
                                     (random#each (|>> {.#Function}) pairG)
                                     ))]
       (when parameters
         0 un_parameterized
         _ (|> random.nat
               (random#each (|>> (n.% parameters) {.#Parameter}))
               (random.either un_parameterized)))))))

(the .public (random parameters)
  (-> Nat (Random Type))
  (all random.either
       (random#each (/.univ_q parameters) (random' parameters))
       (random#each (/.ex_q parameters) (random' parameters))
       ))

(the (generalized_function _ _)
  (All (_ parameter return)
    (-> parameter parameter
        return))
  (undefined))

(every (Generalized_Record foo bar baz)
  (Record
   [#foo foo
    #bar bar
    #baz baz]))

(the .public test
  Test
  (<| (_.covering /._)
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec /.equivalence (..random 0)))
           
           (do [! random.monad]
             [anonymousT (random.only (|>> (pipe.when {.#Named _ _} false
                                             _ true))
                                      (..random 0))
              symbol/0 ..symbol
              symbol/1 ..symbol
              .let [namedT {.#Named symbol/0 anonymousT}
                    aliasedT {.#Named symbol/1 namedT}]]
             (all _.and
                  (_.coverage [/.de_aliased]
                    (of /.equivalence = namedT (/.de_aliased aliasedT)))
                  (_.coverage [/.anonymous]
                    (of /.equivalence = anonymousT (/.anonymous aliasedT)))))
           (do [! random.monad]
             [size (|> random.nat (of ! each (n.% 3)))
              members (|> (..random 0)
                          (random.only (function (_ type)
                                         (when type
                                           (^.or {.#Sum _} {.#Product _})
                                           false

                                           _
                                           true)))
                          (list.repeated size)
                          (monad.all !))
              .let [(open "/#[0]") /.equivalence
                    (open "list#[0]") (list.equivalence /.equivalence)]]
             (`` (all _.and
                      (,, (with_template [<ctor> <dtor> <unit>]
                            [(_.coverage [<ctor> <dtor>]
                               (let [flat (|> members <ctor> <dtor>)]
                                 (or (list#= members flat)
                                     (and (list#= (list) members)
                                          (list#= (list <unit>) flat)))))]

                            [/.variant /.flat_variant Nothing]
                            [/.tuple   /.flat_tuple   Any]
                            ))
                      )))
           (_.coverage [/.applied]
             (and (<| (maybe.else false)
                      (do maybe.monad
                        [partial (/.applied (list Bit) Ann)
                         full (/.applied (list Int) partial)]
                        (in (of /.equivalence = full {.#Product Bit Int}))))
                  (|> (/.applied (list Bit) Text)
                      (pipe.when
                        {.#None}
                        true
                        
                        _
                        false))))
           (do [! random.monad]
             [size (|> random.nat (of ! each (n.% 3)))
              members (monad.all ! (list.repeated size (..random 0)))
              extra (|> (..random 0)
                        (random.only (function (_ type)
                                       (when type
                                         (^.or {.#Function _} {.#Apply _})
                                         false

                                         _
                                         true))))
              .let [(open "/#[0]") /.equivalence
                    (open "list#[0]") (list.equivalence /.equivalence)]]
             (all _.and
                  (_.coverage [/.function /.flat_function]
                    (let [[inputs output] (|> (/.function members extra) /.flat_function)]
                      (and (list#= members inputs)
                           (/#= extra output))))
                  (_.coverage [/.application /.flat_application]
                    (let [[tfunc tparams] (|> extra (/.application members) /.flat_application)]
                      (n.= (list.size members) (list.size tparams))))
                  ))
           (do [! random.monad]
             [size (|> random.nat (of ! each (|>> (n.% 3) ++)))
              body_type (|> (..random 0)
                            (random.only (function (_ type)
                                           (when type
                                             (^.or {.#Universal _} {.#Existential _})
                                             false

                                             _
                                             true))))
              .let [(open "/#[0]") /.equivalence]]
             (`` (all _.and
                      (,, (with_template [<ctor> <dtor>]
                            [(_.coverage [<ctor> <dtor>]
                               (let [[flat_size flat_body] (|> body_type (<ctor> size) <dtor>)]
                                 (and (n.= size flat_size)
                                      (/#= body_type flat_body))))]

                            [/.univ_q /.flat_univ_q]
                            [/.ex_q   /.flat_ex_q]
                            ))
                      (_.coverage [/.quantified?]
                        (and (not (/.quantified? body_type))
                             (|> body_type (/.univ_q size) /.quantified?)
                             (|> body_type (/.ex_q size) /.quantified?)))
                      )))
           (do [! random.monad]
             [depth (|> random.nat (of ! each (|>> (n.% 3) ++)))
              element_type (|> (..random 0)
                               (random.only (function (_ type)
                                              (when type
                                                {.#Nominal name (list element_type)}
                                                (not (text#= array.nominal name))

                                                _
                                                true))))
              .let [(open "/#[0]") /.equivalence]]
             (all _.and
                  (_.coverage [/.array /.flat_array]
                    (let [[flat_depth flat_element] (|> element_type (/.array depth) /.flat_array)]
                      (and (n.= depth flat_depth)
                           (/#= element_type flat_element))))
                  (_.coverage [/.array?]
                    (and (not (/.array? element_type))
                         (/.array? (/.array depth element_type))))
                  ))
           (_.coverage [/.by_example]
             (let [example (is (Maybe Nat)
                               {.#None})]
               (/#= (type (List Nat))
                    (/.by_example [a]
                      (is (Maybe a)
                          example)
                      (List a)))))
           (do random.monad
             [sample random.nat]
             (_.coverage [/.log!]
               (exec
                 (/.log! sample)
                 true)))
           (do random.monad
             [left random.nat
              right (random.lower_cased 1)
              .let [left,right [left right]]]
             (_.coverage [/.as]
               (|> left,right
                   (/.as [l r] (And l r) (Or l r))
                   (/.as [l r] (Or l r) (And l r))
                   (same? left,right))))
           (do random.monad
             [expected random.nat]
             (_.coverage [/.sharing]
               (n.= expected
                    (/.sharing [a]
                      (is (I64 a)
                          expected)
                      (is (I64 a)
                          (.i64 expected))))))
           (do random.monad
             [expected_left random.nat
              expected_right random.nat]
             (_.coverage [/.let]
               (let [[actual_left actual_right]
                     (is (/.let [side /.Nat]
                           [side side])
                         [expected_left expected_right])]
                 (and (same? expected_left actual_left)
                      (same? expected_right actual_right)))))
           (do random.monad
             [.let [(open "/#[0]") /.equivalence]
              left (..random 0)
              right (..random 0)]
             (all _.and
                  (_.coverage [/.code]
                    (bit#= (/#= left right)
                           (code#= (/.code left) (/.code right))))
                  (_.coverage [/.absolute_format]
                    (bit#= (/#= left right)
                           (text#= (/.absolute_format left) (/.absolute_format right))))
                  ))
           (with_expansions [random_type (these (static.random /.code
                                                               (all random.either
                                                                    (random#in Bit)
                                                                    (random#in Nat)
                                                                    (random#in Int)
                                                                    (random#in Rev)
                                                                    (random#in Frac)
                                                                    (random#in Rev))))
                             parameter random_type
                             return random_type

                             foo random_type
                             bar random_type
                             baz random_type]
             (let [(open "/#[0]") /.equivalence]
               (all _.and
                    (_.coverage [/.member]
                      (and (/#= Any (/.member .#None [parameter]))
                           (/#= parameter (/.member .#Some [parameter]))))
                    (_.coverage [/.parameters]
                      (/#= (And parameter parameter)
                           (/.parameters ..generalized_function [parameter return])))
                    (_.coverage [/.return]
                      (/#= return
                           (/.return ..generalized_function [parameter return])))
                    (_.coverage [/.only]
                      (and (/#= foo
                                (/.only [foo bar baz] [..#foo]))
                           (/#= bar
                                (/.only [foo bar baz] [..#bar]))
                           (/#= baz
                                (/.only [foo bar baz] [..#baz]))

                           (/#= (And foo bar)
                                (/.only [foo bar baz] [..#foo ..#bar]))
                           (/#= (And foo baz)
                                (/.only [foo bar baz] [..#foo ..#baz]))
                           (/#= (And bar baz)
                                (/.only [foo bar baz] [..#bar ..#baz]))))
                    (_.coverage [/.except]
                      (and (/#= (And bar baz)
                                (/.except [foo bar baz] [..#foo]))
                           (/#= (And foo baz)
                                (/.except [foo bar baz] [..#bar]))
                           (/#= (And foo bar)
                                (/.except [foo bar baz] [..#baz]))

                           (/#= baz
                                (/.except [foo bar baz] [..#foo ..#bar]))
                           (/#= bar
                                (/.except [foo bar baz] [..#foo ..#baz]))
                           (/#= foo
                                (/.except [foo bar baz] [..#bar ..#baz]))))
                    )))
           ... (_.coverage [.type]
           ...   (and (when (type [expected/0 expected/1])
           ...          {.#Product actual/0 actual/1}
           ...          (and (same? expected/0 actual/0)
           ...               (same? expected/1 actual/1))

           ...          _
           ...          false)
           ...        (when (type (/.Or expected/0 expected/1))
           ...          {.#Sum actual/0 actual/1}
           ...          (and (same? expected/0 actual/0)
           ...               (same? expected/1 actual/1))

           ...          _
           ...          false)
           ...        (when (type (-> expected/0 expected/1))
           ...          {.#Function actual/0 actual/1}
           ...          (and (same? expected/0 actual/0)
           ...               (same? expected/1 actual/1))

           ...          _
           ...          false)
           ...        (when (type (expected/0 expected/1))
           ...          {.#Apply actual/1 actual/0}
           ...          (and (same? expected/0 actual/0)
           ...               (same? expected/1 actual/1))

           ...          _
           ...          false)))

           ..\\parser

           /nominal.test
           /check.test
           /dynamic.test
           /implicit.test
           /quotient.test
           /refinement.test
           /linear.test
           /unit.test
           /variance.test
           /poly.test
           /row.test
           /brand.test
           )))
