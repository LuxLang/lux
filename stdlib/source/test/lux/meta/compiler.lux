(.`` (.`` (.require
           [library
            [lux (.except)
             [abstract
              [monad (.only do)]]
             [math
              ["[0]" random (.only Random)]]
             [meta
              [compiler
               ["@" target]]]
             [test
              ["_" property (.only Test)]]]]
           [\\library
            ["[0]" /]]
           ["[0]" /
            ["[1][0]" arity]
            ["[1][0]" version]
            ["[1][0]" reference]
            ["[1][0]" language
             ["[1]/[0]" lux]]
            ["[1][0]" meta]
            ["[1][0]" target (.only)
             (.,, (.for "{old}" (.,, (.these ["[1]/[0]" jvm]))
                        "JVM" (.,, (.these ["[1]/[0]" jvm]))
                        "JavaScript" (.,, (.these ["[1]/[0]" js]))
                        "Lua" (.,, (.these ["[1]/[0]" lua]))
                        "Python" (.,, (.these ["[1]/[0]" python]))
                        "Ruby" (.,, (.these ["[1]/[0]" ruby]))
                        (.,, (.these))))]])))

(`` (`` (def .public test
          Test
          (<| (_.covering /._)
              (do [! random.monad]
                [])
              (all _.and
                   (_.coverage [/.Code /.Parameter /.Input]
                     true)

                   /arity.test
                   /version.test
                   /reference.test
                   
                   /language/lux.test

                   /meta.test

                   /target.test
                   (,, (for @.jvm (,, (these /target/jvm.test))
                            @.old (,, (these /target/jvm.test))
                            @.js (,, (these /target/js.test))
                            @.lua (,, (these /target/lua.test))
                            @.python (,, (these /target/python.test))
                            @.ruby (,, (these /target/ruby.test))))
                   )))))
