... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [control
    ["|" pipe]
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" atom (.only Atom)]
    ["[0]" future]
    ["[0]" frp]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [expected random.natural
         shift (random.only (n.> 0) random.natural)])
      (all _.and
           (_.coverage [/.Constructor /.event]
             (let [left (is (/.Constructor Natural)
                            (/.event (|>>)))
                   right (is (/.Constructor Natural)
                             (/.event (|>>)))]
               (not (identical? left right))))
           (_.coverage [/.Event /.event?]
             (let [left (is (/.Constructor Natural)
                            (/.event (|>>)))
                   right (is (/.Constructor Natural)
                             (/.event (|>>)))]
               (`` (and (,, (template.with [<correct> <incorrect>]
                              [(|> (<correct> expected)
                                   (/.event? <correct>)
                                   (maybe#each (identical? expected))
                                   (maybe.else false))
                               (|> (<correct> expected)
                                   (/.event? <incorrect>)
                                   (|.when
                                     {.#None} true
                                     {.#Some _} false))]

                              [[left right]
                               [right left]]))))))
           ... (pure (let [increase (is (/.Constructor Any)
           ...                        (/.event (|>>)))
           ...           decrease (is (/.Constructor Any)
           ...                        (/.event (|>>)))
           ...           counter (is (Atom Natural)
           ...                       (atom.atom expected))
           ...           [events feed!] (is [(frp.Channel /.Event) (frp.Sink /.Event)]
           ...                              (frp.channel []))
           ...           scenario/+ (<| (/.scenario events increase expected)
           ...                          (function (_ _ so_far)
           ...                            (monad.let future.monad
           ...                              [[old new] (future.soon (atom.update! (n.+ shift) counter))]
           ...                              (pure new))))
           ...           scenario/- (<| (/.scenario events decrease expected)
           ...                          (function (_ _ so_far)
           ...                            (monad.let future.monad
           ...                              [[old new] (future.soon (atom.update! (n.- shift) counter))]
           ...                              (pure new))))]
           ...       (monad.let future.monad
           ...         [_ (future.soon (by feed! feed (increase [])))
           ...          _ (future.soon (by feed! feed (increase [])))
           ...          _ (future.soon (by feed! feed (decrease [])))
           ...          _ (future.soon (by feed! close))
           ...          scenario/+ scenario/+
           ...          scenario/- scenario/-
           ...          count (future.soon (atom.read! counter))]
           ...         (unit.coverage [/.scenario]
           ...           (and (n.= (all n.+ shift expected) count)
           ...                (n.= (all n.+ shift shift expected) scenario/+)
           ...                (n.= (all n.+ shift expected) scenario/-))))))
           )))
