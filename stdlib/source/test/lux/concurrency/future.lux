... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]]
   [control
    ["[0]" io]]
   [math
    ["[0]" random]
    [number
     ["[0]" /64 (.only)
      ["n" natural]
      ["i" integer]]]]
   [time
    ["[0]" instant]
    ["[0]" duration]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" atom (.only Atom)]]]])

(the injection
  (Injection /.Future)
  /.resolved)

(the comparison
  (Comparison /.Future)
  (function (_ == left right)
    (io.value
     (do io.monad
       [?left (/.value left)
        ?right (/.value right)]
       (pure (when [?left ?right]
               [{.#Some left}
                {.#Some right}]
               (== left right)
               
               _
               false))))))

(the delay
  (for .js
       (/64.<< 4 1)

       ... else
       (/64.<< 3 1)))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [waiting_time (|> random.natural (by ! each (|>> (n.% ..delay) (n.+ ..delay))))
         expected random.natural
         dummy random.natural
         .let [not_dummy (|> random.natural (random.only (|>> (n.= dummy) not)))]
         leftE not_dummy
         rightE not_dummy]
        (all _.and
             (_.for [/.functor]
                    (functorT.spec ..injection ..comparison /.functor))
             (_.for [/.monad]
                    (monadT.spec ..injection ..comparison /.monad))
             
             (pure (do /.monad
                     [.let [[future resolver] (is [(/.Future Natural) (/.Resolver Natural)]
                                                  (/.future []))]
                      resolved? (/.soon (resolver expected))
                      actual future]
                     (unit.coverage [/.Future /.Resolver /.future]
                       (and resolved?
                            (n.= expected actual)))))
             (pure (do /.monad
                     [actual (/.resolved expected)]
                     (unit.coverage [/.resolved]
                       (n.= expected actual))))
             (pure (do /.monad
                     [actual (/.soon (io.io expected))]
                     (unit.coverage [/.soon]
                       (n.= expected actual))))
             (pure (do /.monad
                     [pre (/.soon instant.now)
                      actual (/.schedule! waiting_time (io.io expected))
                      post (/.soon instant.now)]
                     (unit.coverage [/.schedule!]
                       (and (n.= expected actual)
                            (i.>= (.integer waiting_time)
                                  (duration.millis (instant.span pre post)))))))
             (pure (do /.monad
                     [pre (/.soon instant.now)
                      _ (/.delay waiting_time)
                      post (/.soon instant.now)]
                     (unit.coverage [/.delay]
                       (i.>= (.integer waiting_time)
                             (duration.millis (instant.span pre post))))))
             (pure (do /.monad
                     [[leftA rightA] (/.and (/.soon (io.io leftE))
                                            (/.soon (io.io rightE)))]
                     (unit.coverage [/.and]
                       (n.= (n.+ leftE rightE)
                            (n.+ leftA rightA)))))
             (pure (do /.monad
                     [pre (/.soon instant.now)
                      actual (/.after waiting_time expected)
                      post (/.soon instant.now)]
                     (unit.coverage [/.after]
                       (and (n.= expected actual)
                            (i.>= (.integer waiting_time)
                                  (duration.millis (instant.span pre post)))))))
             (pure (do /.monad
                     [?left (/.or (pure leftE)
                                  (/.after waiting_time dummy))
                      ?right (/.or (/.after waiting_time dummy)
                                   (pure rightE))]
                     (unit.coverage [/.or]
                       (when [?left ?right]
                         [{.#Left leftA} {.#Right rightA}]
                         (n.= (n.+ leftE rightE)
                              (n.+ leftA rightA))

                         _
                         false))))
             (pure (do /.monad
                     [leftA (/.either (pure leftE)
                                      (/.after waiting_time dummy))
                      rightA (/.either (/.after waiting_time dummy)
                                       (pure rightE))]
                     (unit.coverage [/.either]
                       (n.= (n.+ leftE rightE)
                            (n.+ leftA rightA)))))
             (pure (do /.monad
                     [?actual (/.soon (/.value (/.resolved expected)))
                      .let [[future resolver] (is [(/.Future Natural) (/.Resolver Natural)]
                                                  (/.future []))]
                      ?never (/.soon (/.value future))]
                     (unit.coverage [/.value]
                       (when [?actual ?never]
                         [{.#Some actual} {.#None}]
                         (n.= expected actual)

                         _
                         false))))
             (pure (do /.monad
                     [yep (/.soon (/.resolved? (/.resolved expected)))
                      .let [[future resolver] (is [(/.Future Natural) (/.Resolver Natural)]
                                                  (/.future []))]
                      nope (/.soon (/.resolved? future))]
                     (unit.coverage [/.resolved?]
                       (and yep
                            (not nope)))))
             (pure (do /.monad
                     [?none (/.within 0 (/.after waiting_time dummy))
                      ?actual (/.within waiting_time (pure expected))]
                     (unit.coverage [/.within]
                       (when [?none ?actual]
                         [{.#None} {.#Some actual}]
                         (n.= expected actual)

                         _
                         false))))
             (pure (do /.monad
                     [.let [box (is (Atom Natural)
                                    (atom.atom dummy))]
                      _ (/.soon (/.upon! (function (_ value)
                                           (atom.write! value box))
                                         (/.resolved expected)))
                      actual (/.soon (atom.read! box))]
                     (unit.coverage [/.upon!]
                       (n.= expected actual))))
             ))))
