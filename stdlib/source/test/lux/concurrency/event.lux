... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io]]
   [error
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [loop_name (by ! each %.natural random.natural)
         error (by ! each %.natural random.natural)
         expected_events (by ! each (n.% 10) random.natural)]
        (all _.and
             (_.coverage [/.loop]
               (and (let [[schedule! value] (/.loop loop_name)]
                      (io.value (do [! io.monad]
                                  [_ (|> (pure [])
                                         (list.repeated expected_events)
                                         (list.each' ! (schedule! 0)))
                                   events_processed value]
                                  (pure (|> events_processed
                                            (try#each (n.= expected_events))
                                            (try.else false))))))
                    (let [[schedule! value] (/.loop loop_name)]
                      (io.value (do [! io.monad]
                                  [_ (|> (do !
                                           [_ (pure [])]
                                           (schedule! 0 (pure [])))
                                         (list.repeated expected_events)
                                         (list.each' ! (schedule! 0)))
                                   events_processed value]
                                  (pure (|> events_processed
                                            (try#each (n.= (n.* 2 expected_events)))
                                            (try.else false))))))))
             (_.coverage [/.already_started]
               (let [[schedule! value] (/.loop loop_name)]
                 (io.value (do io.monad
                             [events_processed value
                              failure value]
                             (pure (and (|> events_processed
                                            (try#each (n.= 0))
                                            (try.else false))
                                        (when failure
                                          {try.#Failure error}
                                          (and (exception.is? /.already_started error)
                                               (text.contains? loop_name error))
                                          
                                          _
                                          false)))))))
             (_.coverage [/.error_during_execution]
               (let [[schedule! value] (/.loop loop_name)]
                 (io.value (do io.monad
                             [_ (schedule! 0 (io.io (halt! error)))
                              failure value]
                             (pure (when failure
                                     {try.#Failure error}
                                     (and (exception.is? /.error_during_execution error)
                                          (text.contains? loop_name error)
                                          (text.contains? error error))
                                     
                                     _
                                     false))))))
             ))))
