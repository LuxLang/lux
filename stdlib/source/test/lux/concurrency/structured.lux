... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]]
   [control
    ["[0]" io (.use "[1]:[0]" monad)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" maybe (.use "[1]:[0]" functor)]
    [collection
     ["[0]" list (.use "[1]:[0]" functor)]]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]
   [logic
    ["[0]" bit]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" atom (.only Atom)]
    ["[0]" future]]]])

(the injection
  (Injection /.Future)
  (by /.monad pure))

(the comparison
  (Comparison /.Future)
  (function (_ == left right)
    (io.value
     (monad.let io.monad
       [?left (future.value (/.future left))
        ?right (future.value (/.future right))]
       (pure (when [?left ?right]
               [{.:Some {.:Some left}}
                {.:Some {.:Some right}}]
               (== left right)
               
               _
               false))))))

(the (action _)
  (-> [] [(Atom Bit) (/.Action Any)])
  (let [completed? (is (Atom Bit)
                       (atom.atom false))]
    [completed?
     (function (_ it)
       (monad.let io.monad
         [? (/.pending? it)]
         (if ?
             (monad.let io.monad
               [_ (atom.write! true completed?)]
               (pure {.:Some []}))
             (io:pure {.:Some []}))))]))

(the .public test
  Test
  (monad.let [! random.monad]
    [short (by ! each (|>> (n.% 10) ++) random.natural)
     long (by ! each (|>> (n.% 2) ++ (n.x 50)) random.natural)
     leftE random.natural
     rightE random.natural

     in_parallel (by ! each (|>> (n.% 10) (n.+ 2)) random.natural)]
    (<| (_.covering /._)
        (_.for [/.Future])
        (all _.and
             (_.for [/.functor]
                    (functorT.spec ..injection ..comparison /.functor))
             (_.for [/.monad]
                    (monadT.spec ..injection ..comparison /.monad))

             (pure (monad.let future.monad
                     [leftA (<| /.future
                                (by /.monad pure leftE))]
                     (unit.coverage [/.future]
                       (|> leftA
                           (maybe:each (identical? leftE))
                           (maybe.else false)))))
             (pure (monad.let future.monad
                     [? (<| /.future
                            /.with_scope
                            (function (_ scope))
                            (/.schedule! scope short (function (_ _) (io:pure {.:Some true}))))]
                     (unit.coverage [/.schedule!]
                       (maybe.else false ?))))
             (<| (_.for [/.Scope])
                 (all _.and
                      (pure (monad.let future.monad
                              [? (<| /.future
                                     /.with_scope
                                     (function (_ scope))
                                     (/.schedule! scope short (function (_ _)
                                                                (monad.let io.monad
                                                                  [? (/.close! scope)]
                                                                  (pure {.:Some ?})))))]
                              (unit.coverage [/.close!]
                                (with (maybe.equality bit.equality)
                                  (= {.:None} ?)))))
                      (pure (monad.let future.monad
                              [? (<| /.future
                                     /.with_scope
                                     (function (_ scope))
                                     (/.schedule! scope short (function (_ _)
                                                                (monad.let io.monad
                                                                  [? (/.closed? scope)]
                                                                  (pure {.:Some (not ?)})))))]
                              (unit.coverage [/.closed?]
                                (maybe.else false ?))))
                      ))
             (pure (monad.let future.monad
                     [_ (<| /.future
                            /.with_scope
                            (function (_ scope))
                            (/.soon scope (function (_ _) (io:pure {.:Some true}))))]
                     (unit.coverage [/.soon]
                       true)))
             (pure (monad.let future.monad
                     [_ (<| /.future
                            /.with_scope
                            (function (_ scope))
                            (/.after scope short []))]
                     (unit.coverage [/.after]
                       true)))
             (pure (monad.let future.monad
                     [_ (<| /.future
                            /.with_scope
                            (function (_ scope))
                            (/.delay scope short))]
                     (unit.coverage [/.delay]
                       true)))
             (pure (monad.let future.monad
                     [.let [all_cancelled (is (Atom Natural)
                                              (atom.atom 0))
                            [done? done!] (is [(future.Future []) (future.Resolver [])]
                                              (future.future []))
                            scope (<| /.with_scope
                                      (function (_ scope))
                                      (list.complete /.monad)
                                      (list:each (function (_ _)
                                                   (/.schedule! scope long
                                                                (function (_ it)
                                                                  (monad.let [! io.monad]
                                                                    [? (/.cancelled? it)]
                                                                    (if ?
                                                                        (monad.let !
                                                                          [[before after] (atom.update! ++ all_cancelled)
                                                                           _ (if (n.= in_parallel after)
                                                                                 (done! [])
                                                                                 (pure false))]
                                                                          (pure {.:Some []}))
                                                                        (io:pure {.:Some []})))))))
                                      (list.repeated in_parallel []))
                            _ (io.value (/.cancel! scope))]
                      _ (/.future scope)
                      _ done?
                      all_cancelled (future.soon (atom.read! all_cancelled))]
                     (unit.coverage [/.with_scope]
                       (n.= in_parallel all_cancelled))))
             
             (_.coverage [/.pending?]
               (io.value (/.pending? (<| /.with_scope
                                         (function (_ scope))
                                         (/.schedule! scope long (function (_ _) (io:pure {.:Some []})))))))
             (_.coverage [/.completed?]
               (io.value (/.completed? (by /.monad pure []))))
             (pure (monad.let future.monad
                     [.let [[done? done!] (is [(future.Future Bit) (future.Resolver Bit)]
                                              (future.future []))
                            it (<| /.with_scope
                                   (function (_ scope))
                                   (/.schedule! scope long)
                                   (function (_ it)
                                     (monad.let io.monad
                                       [pre (/.cancel! it)
                                        post (/.cancelled? it)
                                        _ (done! (and pre post))]
                                       (pure {.:Some []}))))]
                      _ (/.future it)
                      ? done?]
                     (unit.coverage [/.cancel! /.cancelled?]
                       ?)))
             (pure (monad.let future.monad
                     [.let [[done? done!] (is [(future.Future Bit) (future.Resolver Bit)]
                                              (future.future []))

                            [@not_completed action] (..action [])
                            to_cancel (<| /.with_scope
                                          (function (_ scope))
                                          (/.schedule! scope long)
                                          (function (_ it)
                                            (monad.let [! io.monad]
                                              [pre (/.cancel! it)
                                               _ (done! pre)]
                                              (pure {.:None}))))]
                      cancelled! done?
                      .let [confirmed! (io.value (/.cancelled? to_cancel))]
                      _ (/.future to_cancel)
                      not_completed! (future.soon (io:each not (atom.read! @not_completed)))

                      .let [[@completed action] (..action [])
                            to_complete (<| /.with_scope
                                            (function (_ scope))
                                            (/.schedule! scope long action))]
                      _ (/.future to_complete)
                      completed! (future.soon (atom.read! @completed))]
                     (unit.coverage [/.Action]
                       (and cancelled!
                            confirmed!
                            not_completed!
                            completed!))))

             (pure (monad.let future.monad
                     [left&right (/.future (with /.monad
                                             (/.and (pure leftE) (pure rightE))))]
                     (unit.coverage [/.and]
                       (<| (maybe.else false)
                           (monad.let maybe.monad
                             [[leftA rightA] left&right]
                             (pure (and (identical? leftE leftA)
                                        (identical? rightE rightA))))))))
             (pure (monad.let [! future.monad]
                     [left (/.future (with /.monad
                                       (/.or (pure leftE) (pure rightE))))
                      right (let [left (<| /.with_scope
                                           (function (_ scope))
                                           (/.schedule! scope long (function (_ _) (io:pure {.:Some leftE}))))]
                              (monad.let !
                                [_ (future.soon (/.cancel! left))]
                                (/.future (/.or left (by /.monad pure rightE)))))]
                     (unit.coverage [/.or]
                       (when [left right]
                         [{.:Some {.:Left leftA}}
                          {.:Some {.:Right rightA}}]
                         (and (identical? leftE leftA)
                              (identical? rightE rightA))

                         _
                         false))))
             (pure (monad.let [! future.monad]
                     [left (/.future (with /.monad
                                       (/.either (pure leftE) (pure rightE))))
                      right (let [left (<| /.with_scope
                                           (function (_ scope))
                                           (/.schedule! scope long (function (_ _) (io:pure {.:Some leftE}))))]
                              (monad.let !
                                [_ (future.soon (/.cancel! left))]
                                (/.future (/.either left (by /.monad pure rightE)))))]
                     (unit.coverage [/.either]
                       (when [left right]
                         [{.:Some leftA}
                          {.:Some rightA}]
                         (and (identical? leftE leftA)
                              (identical? rightE rightA))

                         _
                         false))))
             ))))
