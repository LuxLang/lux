... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]]
   [control
    ["[0]" io]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [math
    ["[0]" random]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" future]]]])

(the injection
  (Injection /.Process)
  (by /.monad pure))

(the comparison
  (Comparison /.Process)
  (function (_ == left right)
    (io.value
     (monad.let io.monad
       [?left (future.value left)
        ?right (future.value right)]
       (pure (when [?left ?right]
               [{.#Some {try.#Success left}}
                {.#Some {try.#Success right}}]
               (== left right)
               
               _
               false))))))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [expected random.natural]
        (all _.and
             (_.for [/.Process]
                    (all _.and
                         (_.for [/.functor]
                                (functorT.spec ..injection ..comparison /.functor))
                         (_.for [/.monad]
                                (monadT.spec ..injection ..comparison /.monad))
                         ))
             (_.coverage [/.Channel /.Channel' /.Sink /.channel]
               ... This is already been tested for the FRP module.
               true)
             (pure (monad.let future.monad
                     [it (monad.let /.monad
                           [.let [[channel sink] (/.channel [])]
                            _ (/.write expected sink)
                            [actual channel] (/.read channel)]
                           (pure (identical? expected actual)))]
                     (unit.coverage [/.read /.write]
                       (try.else false it))))
             (pure (monad.let future.monad
                     [it (monad.let /.monad
                           [.let [[channel sink] (/.channel [])]
                            _ (/.close sink)
                            it (/.try (/.write expected sink))]
                           (pure (when it
                                   {try.#Failure _}
                                   true

                                   _
                                   false)))]
                     (unit.coverage [/.close /.try]
                       (try.else false it))))
             (pure (monad.let future.monad
                     [it (monad.let /.monad
                           [.let [[channel sink] (/.channel [])]
                            _ (/.close sink)
                            it (/.try (/.read channel))]
                           (pure (when it
                                   {try.#Failure error}
                                   (exception.is? /.channel_has_been_closed error)

                                   _
                                   false)))]
                     (unit.coverage [/.channel_has_been_closed]
                       (try.else false it))))
             ))))
