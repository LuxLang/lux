... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" io (.only IO io)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception]]
   [data
    [collection
     ["[0]" list]
     ["[0]" sequence (.only Sequence)]]]
   [math
    ["[0]" random]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]
    ["[0]" unit]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" atom (.only Atom)]
    ["[0]" future (.only Future Resolver) (.use "[1]:[0]" monad)]
    ["[0]" frp]]]])

(exception.the got_wrecked)

(the counter
  (/.Behavior Natural)
  (function (_ message state self)
    (message state self)))

(the (count! increment)
  (-> Natural (/.Message Natural Natural))
  (function (_ state self)
    (let [state' (n.+ increment state)]
      (future:pure {try.:Success [state' state']}))))

(the (mailed? outcome)
  (-> (Try Any) Bit)
  (when outcome
    {try.:Success _} true
    {try.:Failure _} false))

(the .public test
  Test
  (monad.let [! random.monad]
    [initial_state random.natural
     .let [as_mail (is (for_any (_ a)
                         (-> (-> a a)
                             (/.Mail a)))
                       (function (_ transform)
                         (function (_ state actor)
                           (|> state transform {try.:Success} future:pure))))
           ++! (is (/.Mail Natural) (as_mail ++))
           --! (is (/.Mail Natural) (as_mail --))]]
    (<| (_.covering /._)
        (_.for [/.Actor])
        (all _.and
             (_.coverage [/.alive?]
               (io.value (monad.let io.monad
                           [actor (/.spawn! /.default 0)]
                           (/.alive? actor))))
             
             (_.coverage [/.poison!]
               (let [poisoned_actors_die!
                     (io.value (monad.let io.monad
                                 [actor (/.spawn! /.default 0)
                                  poisoned? (/.poison! actor)
                                  alive? (/.alive? actor)]
                                 (pure (and (..mailed? poisoned?)
                                            (not alive?)))))

                     cannot_poison_more_than_once!
                     (io.value (monad.let io.monad
                                 [actor (/.spawn! /.default 0)
                                  first_time? (/.poison! actor)
                                  second_time? (/.poison! actor)]
                                 (pure (and (..mailed? first_time?)
                                            (not (..mailed? second_time?))))))]
                 (and poisoned_actors_die!
                      cannot_poison_more_than_once!)))

             (let [[read write] (is [(Future Text) (Resolver Text)]
                                    (future.future []))]
               (pure (monad.let future.monad
                       [_ (future.soon (monad.let io.monad
                                         [actor (/.spawn! (is (/.Behavior Any)
                                                              (function (_ message state self)
                                                                (monad.let [! future.monad]
                                                                  [outcome (message state self)]
                                                                  (when outcome
                                                                    {try.:Failure cause}
                                                                    (monad.let !
                                                                      [_ (future.soon (write cause))]
                                                                      (pure outcome))
                                                                    
                                                                    {try.:Success _}
                                                                    (pure outcome)))))
                                                          [])]
                                         (/.poison! actor)))
                        _ (future.delay 100)
                        it (future.soon (future.value read))]
                       (unit.coverage [/.poisoned]
                         (when it
                           {.:Some error}
                           (exception.is? /.poisoned error)

                           {.:None}
                           false)))))

             (pure (monad.let future.monad
                     [sent? (future.soon (monad.let io.monad
                                           [actor (/.spawn! /.default 0)
                                            sent? (/.mail! ++! actor)]
                                           (pure (..mailed? sent?))))]
                     (unit.coverage [/.Behavior /.Mail
                                     /.default /.spawn! /.mail!]
                       sent?)))

             (pure (monad.let future.monad
                     [it (future.soon (monad.let io.monad
                                        [counter (/.spawn! /.default 0)
                                         _ (/.poison! counter)]
                                        (/.mail! ++! counter)))]
                     (unit.coverage [/.dead]
                       (when it
                         {try.:Success outcome}
                         false

                         {try.:Failure error}
                         (exception.is? /.dead error)))))

             (let [die! (is (/.Mail Natural)
                            (function (_ state actor)
                              (future:pure (exception.except ..got_wrecked []))))]
               (pure (monad.let future.monad
                       [it (future.soon (monad.let io.monad
                                          [actor (/.spawn! /.default initial_state)
                                           sent? (/.mail! die! actor)
                                           alive? (/.alive? actor)
                                           obituary (/.obituary' actor)]
                                          (pure {try.:Success [actor sent? alive? obituary]})))]
                       (unit.coverage [/.Obituary /.obituary']
                         (when it
                           {try.:Success [actor sent? alive? {.:Some [error state (list single_pending_message)]}]}
                           (and (..mailed? sent?)
                                (not alive?)
                                (exception.is? ..got_wrecked error)
                                (n.= initial_state state)
                                (identical? die! single_pending_message))

                           _
                           false)))))

             (pure (monad.let future.monad
                     [counter (future.soon (/.spawn! ..counter 0))
                      it (monad.let (try.with future.monad)
                           [output_1 (/.request! (count! 1) counter)
                            output_2 (/.request! (count! 1) counter)
                            output_3 (/.request! (count! 1) counter)]
                           (pure (and (n.= 1 output_1)
                                      (n.= 2 output_2)
                                      (n.= 3 output_3))))]
                     (unit.coverage [/.Message /.request!]
                       (when it
                         {try.:Success outcome}
                         outcome

                         {try.:Failure error}
                         false))))
             
             (monad.let !
               [num_events (by ! each (|>> (n.% 10) ++) random.natural)
                events (random.list num_events random.natural)
                num_observations (by ! each (n.% num_events) random.natural)
                .let [expected (list.first num_observations events)
                      sink (is (Atom (Sequence Natural))
                               (atom.atom sequence.empty))]]
               (pure (monad.let future.monad
                       [agent (future.soon
                               (monad.let [! io.monad]
                                 [agent (/.spawn! /.default 0)
                                  _ (/.observe! (function (_ event stop)
                                                  (function (_ events_seen self)
                                                    (future.soon
                                                     (if (n.< num_observations events_seen)
                                                         (monad.let !
                                                           [_ (atom.update! (sequence.suffix event) sink)]
                                                           (pure {try.:Success (++ events_seen)}))
                                                         (monad.let !
                                                           [_ stop]
                                                           (pure {try.:Failure "YOLO"}))))))
                                                (frp.sequential 0 events)
                                                agent)]
                                 (pure agent)))
                        _ (/.obituary agent)
                        actual (future.soon (atom.read! sink))]
                       (unit.coverage [/.Stop /.observe! /.obituary]
                         (by (list.equivalence n.equivalence) =
                             expected
                             (sequence.as_list actual))))))
             (pure (monad.let future.monad
                     [actor (future.soon (/.spawn! /.default initial_state))
                      actual (/.request! /.state actor)]
                     (unit.coverage [/.state]
                       (<| (try.else false)
                           (monad.let try.monad
                             [actual actual]
                             (pure (identical? initial_state actual)))))))
             (pure (monad.let future.monad
                     [actor (future.soon (/.spawn! /.default initial_state))
                      before,after (/.request! (/.update ++) actor)
                      actual (/.request! /.state actor)]
                     (unit.coverage [/.update]
                       (<| (try.else false)
                           (monad.let try.monad
                             [[before after] before,after
                              actual actual]
                             (pure (and (n.= (++ before) after)
                                        (identical? after actual))))))))
             (pure (monad.let future.monad
                     [actor (future.soon (/.spawn! /.default initial_state))
                      before,after (/.request! (/.update ++) actor)
                      _ (/.request! (/.reset initial_state) actor)
                      actual (/.request! /.state actor)]
                     (unit.coverage [/.reset]
                       (<| (try.else false)
                           (monad.let try.monad
                             [[before after] before,after
                              actual actual]
                             (pure (and (n.= (++ before) after)
                                        (identical? initial_state before)
                                        (identical? initial_state actual))))))))
             (pure (monad.let future.monad
                     [actor (future.soon (/.spawn! (/.validated (n.< initial_state) /.default)
                                                   initial_state))
                      before,after (/.request! (/.update --) actor)
                      actual (/.request! /.state actor)]
                     (unit.coverage [/.validated]
                       (<| (try.else false)
                           (monad.let try.monad
                             [[before after] before,after
                              actual actual]
                             (pure (and (n.= (-- before) after)
                                        (identical? after actual))))))))
             (pure (monad.let future.monad
                     [actor (future.soon (/.spawn! (/.validated (n.< initial_state) /.default)
                                                   initial_state))
                      before,after (/.request! (/.update ++) actor)
                      [cause_of_death state pending] (/.obituary actor)
                      actual (/.request! /.state actor)]
                     (unit.coverage [/.invalid]
                       (when [before,after actual]
                         [{try.:Success [before after]}
                          {try.:Failure afterwards}]
                         (and (n.= (++ before) after)
                              (exception.is? /.invalid cause_of_death)
                              (exception.is? /.dead afterwards))

                         _
                         false))))
             ))))
