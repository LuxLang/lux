... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]]
   [control
    ["[0]" io]]
   [math
    ["[0]" random]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the injection
  (Injection /.Computation)
  (|>> /.var /.mutations))

(the comparison
  (Comparison /.Computation)
  (function (_ == left right)
    (io.value
     (monad.let io.monad
       [left (/.value left)
        right (/.value right)]
       (pure (== left right))))))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [expected random.natural
         .let [dummy (++ expected)]

         expected_right random.unit_decimal])
      (all _.and
           (_.for [/.Var]
                  (all _.and
                       (_.coverage [/.var /.mutations /.value]
                         (|> expected
                             /.var
                             /.mutations
                             /.value
                             io.value
                             (same? expected)))
                       (_.coverage [/.mutate!]
                         (let [it (/.var dummy)]
                           (io.value (monad.let io.monad
                                       [before (/.value (/.mutations it))
                                        _ (/.mutate! expected it)
                                        after (/.value (/.mutations it))]
                                       (pure (and (same? dummy before)
                                                  (same? expected after)))))))
                       ))
           (_.for [/.Computation]
                  (all _.and
                       (_.for [/.functor]
                              (functorT.spec ..injection ..comparison /.functor))
                       
                       (_.coverage [/.or]
                         (let [left (/.var dummy)
                               right (/.var expected_right)
                               l,r (/.or (/.mutations left) (/.mutations right))]
                           (io.value (monad.let io.monad
                                       [_ (/.mutate! expected left)
                                        left'|right' (/.value l,r)]
                                       (pure (when left'|right'
                                               {.#Left left'}
                                               (same? expected left')
                                               
                                               {.#Right right'}
                                               false))))))
                       (_.coverage [/.and]
                         (let [left (/.var dummy)
                               right (/.var expected_right)
                               l,r (/.and (/.mutations left) (/.mutations right))]
                           (io.value (monad.let io.monad
                                       [_ (/.mutate! expected left)
                                        [left' right'] (/.value l,r)]
                                       (pure (and (same? expected left')
                                                  (same? expected_right right')))))))
                       (_.coverage [/.either]
                         (let [left (/.var dummy)
                               right (/.var dummy)
                               l,r (/.either (/.mutations left) (/.mutations right))]
                           (io.value (monad.let io.monad
                                       [_ (/.mutate! expected right)
                                        actual (/.value l,r)]
                                       (pure (same? expected actual))))))
                       ))
           )))
