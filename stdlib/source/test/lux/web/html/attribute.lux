... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]]
   ["[0]" function]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]
    ["[0]" expansion]]
   [type
    ["[0]" check]]
   [world
    [net
     ["[0]" mime]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" capitalization]
  ["[1][0]" completion]
  ["[1][0]" decoding]
  ["[1][0]" text_direction]
  ["[1][0]" drag]
  ["[1][0]" enter]
  ["[1][0]" input_mode]
  ["[1][0]" pre_load]
  ["[1][0]" referrer_policy]
  ["[1][0]" relationship]
  ["[1][0]" role]
  ["[1][0]" sandbox]
  ["[1][0]" shape]
  ["[1][0]" source]
  ["[1][0]" target]
  ["[1][0]" pragma]
  ["[1][0]" type
   ["[1]/[0]" button]
   ["[1]/[0]" input]
   ["[1]/[0]" numbering]
   ["[1]/[0]" script]]])

(expansion.let [,bundles (these [[[/.accept]
                                  [/.access_key]
                                  [/.action]
                                  [/.cite]
                                  [/.data]
                                  [/.form_action]
                                  [/.href]
                                  [/.poster]
                                  [/.source]
                                  [/.allow]
                                  [/.alt]
                                  [/.content]
                                  [/.direction_name]
                                  [/.item_property]
                                  [/.label]
                                  [/.name]]]

                                [[[/.placeholder]
                                  [/.title]
                                  [/.value]
                                  [/.async]
                                  [/.auto_play]
                                  [/.checked]
                                  [/.controls]
                                  [/.default]
                                  [/.defer]
                                  [/.disabled]
                                  [/.download]
                                  [/.form_no_validate]
                                  [/.is_map]
                                  [/.loop]
                                  [/.multiple]
                                  [/.muted]
                                  [/.no_validate]]]

                                [[[/.open]
                                  [/.plays_inline]
                                  [/.read_only]
                                  [/.required]
                                  [/.reversed]
                                  [/.selected]
                                  [/.spell_check]
                                  [/.translate]
                                  [/.auto_capitalize]
                                  [/.auto_complete]
                                  [/.capture]
                                  [/.class]
                                  [/.columns]
                                  [/.column_span]
                                  [/.max_length]
                                  [/.min_length]
                                  [/.rows]
                                  [/.row_span]]]
                                
                                [[[/.size]
                                  [/.span]
                                  [/.step]
                                  [/.height]
                                  [/.width]
                                  [/.content_editable]
                                  [/.coordinates]
                                  [/.cross_origin]
                                  [/.date_time]
                                  [/.decoding]
                                  [/.text_direction]
                                  [/.draggable]
                                  [/.encoding_type]
                                  [/.form_encoding_type]
                                  [/.type]
                                  [/.enter_key_hint]
                                  [/.for]]]

                                [[[/.form]
                                  [/.id]
                                  [/.list]
                                  [/.form_target]
                                  [/.target]
                                  [/.hidden]
                                  [/.high]
                                  [/.low]
                                  [/.max]
                                  [/.min]
                                  [/.optimum]
                                  [/.href_language]
                                  [/.language]
                                  [/.source_language]
                                  [/.http_equivalent]
                                  [/.integrity]
                                  [/.input_mode]
                                  [/.track_kind]
                                  [/.loading]
                                  [/.media]]]
                                
                                [[[/.method]
                                  [/.pattern]
                                  [/.ping]
                                  [/.pre_load]
                                  [/.referrer_policy]
                                  [/.relationship]
                                  [/.role]
                                  [/.sandbox]
                                  [/.scope]
                                  [/.shape]
                                  [/.sizes]
                                  [/.source_set]
                                  [/.start]
                                  [/.tab_index]
                                  [/.style]
                                  [/.use_map]
                                  [/.wrap]]]
                                )]
  (these (the all_options
           (List (for_some (_ it) (/.Name it)))
           (`` (`` (`` (list#conjoint (list (,, (template.with [,options]
                                                  [(is (List (for_some (_ it) (/.Name it)))
                                                       (list (,, (expansion.let [,options' (template.spliced ,options)]
                                                                   (,, (template.with [,name]
                                                                         [,name]

                                                                         [,options']))))))]
                                                  
                                                  [,bundles]))))))))

         (the .public test
           Test
           (<| (_.covering /._)
               (do [! random.monad]
                 [])
               (_.for [/.Name
                       /.#label /.#as
                       /.Injection])
               (`` (all _.and
                        (,, (template.with [,options]
                              [(`` (`` (_.coverage [(,, (expansion.let [,options' (template.spliced ,options)]
                                                          (,, (template.with [,name]
                                                                [,name]

                                                                [,options']))))]
                                         (let [uniques (|> ..all_options
                                                           (list#each (its /.#label))
                                                           (is (List Text))
                                                           (set.of_list text.hash))]
                                           (n.= (list.size ..all_options)
                                                (set.size uniques))))))]
                              
                              [,bundles]))
                        (,, (template.with [,type ,terms]
                              [(<| (_.for [,type])
                                   (`` (_.coverage [(,, (template.spliced ,terms))]
                                         (let [options (list (,, (template.spliced ,terms)))
                                               uniques (set.of_list text.hash options)]
                                           (n.= (list.size options)
                                                (set.size uniques))))))]
                              
                              [[/.Capture [/.user /.environment]]
                               [/.Editable [/.is_editable /.not_editable /.only_plain_text]]
                               [/.Cross_Origin [/.anonymous /.use_credentials]]
                               [/.Hidden [/.forever /.until_found]]
                               [/.Track_Kind [/.subtitles /.captions /.descriptions /.chapters /.metadata]]
                               [/.Loading [/.eager /.lazy]]
                               [/.Method [/.post /.get /.dialog]]
                               [/.Scope [/.row /.column /.row_group /.column_group]]
                               [/.Wrap [/.hard /.soft /.off]]]))
                        ... Same attribute name, but for different attributes.
                        (,, (template.with [,terms]
                              [(`` (_.coverage [(,, (template.spliced ,terms))]
                                     (let [options (|> (list (,, (template.spliced ,terms)))
                                                       (is (List (for_some (_ it) (/.Name it))))
                                                       (list#each (its /.#label))
                                                       (is (List Text)))
                                           uniques (set.of_list text.hash options)]
                                       (and (n.> 1 (list.size options))
                                            (n.= 1 (set.size uniques))))))]
                              
                              [[[/.button_type /.input_type /.script_type /.numbering_type]]]))

                        (_.coverage [/.hyper_link]
                          (same? /.href /.hyper_link))

                        (_.coverage [/.minimum_column_span /.maximum_column_span]
                          (n.< /.maximum_column_span /.minimum_column_span))

                        (,, (template.with [,terms]
                              [(<| (do !
                                     [value (random.upper_cased 2)])
                                   (`` (_.coverage [(,, (template.spliced ,terms))]
                                         (let [options (|> (list (,, (template.spliced ,terms)))
                                                           (list#each (|>> (function.of value)
                                                                           (by /.integrity #as)
                                                                           (maybe.else ""))))
                                               uniques (set.of_list text.hash options)]
                                           (n.= (list.size options)
                                                (set.size uniques))))))]
                              
                              [[[/.sha_256 /.sha_384 /.sha_512]]]))

                        (,, (template.with [,terms]
                              [(<| (do !
                                     [value (random.upper_cased 2)])
                                   (`` (_.coverage [(,, (template.spliced ,terms))]
                                         (let [options (|> (list (,, (template.spliced ,terms)))
                                                           (list#each mime.name))
                                               uniques (set.of_list text.hash options)]
                                           (n.= (list.size options)
                                                (set.size uniques))))))]
                              
                              [[[/.audio /.application /.video /.image /.text /.font]]]))

                        (<| (_.for [/.Attribute
                                    /.#name /.#value
                                    /.Attributes])
                            (_.coverage [/.empty]
                              (list.empty? /.empty)))

                        (_.coverage [/.Regular_Expression]
                          (check.< /.Regular_Expression Text))
                        
                        /capitalization.test
                        /completion.test
                        /decoding.test
                        /text_direction.test
                        /drag.test
                        /enter.test
                        /input_mode.test
                        /pre_load.test
                        /referrer_policy.test
                        /relationship.test
                        /role.test
                        /sandbox.test
                        /shape.test
                        /source.test
                        /target.test
                        /pragma.test

                        /type/button.test
                        /type/input.test
                        /type/numbering.test
                        /type/script.test
                        ))))
         ))
