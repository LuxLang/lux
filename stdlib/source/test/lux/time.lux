... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" enum
     ["[1]T" \\test]]
    ["[0]" format
     ["[1]T" \\test]]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" order
     ["[1]T" \\test]]]
   [control
    ["[0]" pipe]]
   [error
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]
     ["?[1]" \\projection]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" /
  ["[1][0]" date]
  ["[1][0]" day]
  ["[1][0]" duration]
  ["[1][0]" instant]
  ["[1][0]" month]
  ["[1][0]" year]
  ["[1][0]" solar]]
 [\\library
  ["[0]" / (.only)
   ["[0]" duration]
   ["[0]" instant]]])

(the for_clock
  Test
  (monad.let [! random.monad]
    [expected /.random]
    (all _.and
         (_.coverage [/.clock /.time]
           (|> expected
               /.clock
               /.time
               (try#each (by /.equivalence = expected))
               (try.else false)))
         (let [expected (/.clock expected)]
           (`` (all _.and
                    (,, (template.with [<limit> <slot>]
                          [(_.coverage [<slot>]
                             (n.< <limit> (its <slot> expected)))]

                          [[0024 /.#hour]
                           [0060 /.#minute]
                           [0060 /.#second]
                           [1000 /.#milli_second]])))))
         )))

(the for_ranges
  Test
  (monad.let [! random.monad]
    [valid_hour (by ! each (|>> (n.% /.hours) (n.major 10)) random.natural)
     valid_minute (by ! each (|>> (n.% /.minutes) (n.major 10)) random.natural)
     valid_second (by ! each (|>> (n.% /.seconds) (n.major 10)) random.natural)
     valid_milli_second (by ! each (n.% /.milli_seconds) random.natural)

     .let [invalid_hour (|> valid_hour (n.+ /.hours))
           invalid_minute (|> valid_minute (n.+ /.minutes) (n.minor 99))
           invalid_second (|> valid_second (n.+ /.seconds) (n.minor 99))]]
    (`` (all _.and
             (,, (template.with [<cap> <exception> <prefix> <suffix> <valid> <invalid>]
                   [(_.coverage [<cap> <exception>]
                      (let [valid!
                            (|> <valid>
                                %.natural
                                (text.prefix <prefix>)
                                (text.suffix <suffix>)
                                (by /.text of)
                                (pipe.when
                                  {try.#Success _} true
                                  {try.#Failure error} false))
                            
                            invalid!
                            (|> <invalid>
                                %.natural
                                (text.prefix <prefix>)
                                (text.suffix <suffix>)
                                (by /.text of)
                                (pipe.when
                                  {try.#Success _}
                                  false
                                  
                                  {try.#Failure error}
                                  (exception.is? <exception> error)))]
                        (and valid!
                             invalid!)))]

                   [[/.hours /.invalid_hour "" ":00:00.000" valid_hour invalid_hour]
                    [/.minutes /.invalid_minute "00:" ":00.000" valid_minute invalid_minute]
                    [/.seconds /.invalid_second "00:00:" ".000" valid_second invalid_second]]))
             (_.coverage [/.milli_seconds]
               (|> valid_milli_second
                   %.natural
                   (text "00:00:00.")
                   (by /.text of)
                   (pipe.when
                     {try.#Success _} true
                     {try.#Failure error} false)))
             ))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Time])
      (monad.let [! random.monad]
        [.let [day (.natural (duration.millis duration.day))]
         expected /.random

         out_of_bounds (by ! each (|>> /.millis (n.+ day))
                           /.random)]
        (`` (all _.and
                 (_.for [/.equivalence /.=]
                        (static.when (same? /.equivalence /.=)
                          (equivalenceT.spec /.equivalence /.random)))
                 (_.for [/.order
                         /.< /.<= /.> /.>=
                         /.minor /.major]
                        (orderT.spec /.order /.random))
                 (_.for [/.enum]
                        (enumT.spec /.enum /.random))
                 (_.for [/.text]
                        (formatT.spec /.equivalence /.text /.random))

                 (_.coverage [/.millis /.of_millis]
                   (|> expected
                       /.millis
                       /.of_millis
                       (try#each (by /.equivalence = expected))
                       (try.else false)))
                 (_.coverage [/.time_exceeds_a_day]
                   (when (/.of_millis out_of_bounds)
                     {try.#Success _}
                     false
                     
                     {try.#Failure error}
                     (exception.is? /.time_exceeds_a_day error)))
                 (_.coverage [/.midnight]
                   (|> /.midnight
                       /.millis
                       (n.= 0)))
                 (monad.let random.monad
                   [expected /.random]
                   (_.coverage [/.as_text /.of_text]
                     (|> expected
                         /.as_text
                         (?text.value /.of_text)
                         (try#each (by /.equivalence = expected))
                         (try.else false))))
                 (monad.let random.monad
                   [expected /.random
                    actual (random.only (|>> (by /.equivalence = expected) not)
                                        /.random)]
                   (_.coverage [/.random]
                     (not (by /.equivalence = expected actual))))
                 ..for_ranges
                 (_.for [/.Clock]
                        ..for_clock)

                 /date.test
                 /day.test
                 /duration.test
                 /instant.test
                 /month.test
                 /year.test
                 /solar.test
                 )))))
