(.require
 [library
  [lux (.except function)
   [test
    ["_" property (.only Test)]]]]
 ["[0]" /
  ["[1][0]" concatenative]
  ["[1][0]" concurrency
   ["[1]/[0]" actor]
   ["[1]/[0]" agent]
   ["[1]/[0]" atom]
   ["[1]/[0]" frp]
   ["[1]/[0]" thread]
   ["[1]/[0]" async]
   ["[1]/[0]" semaphore]
   ["[1]/[0]" stm]
   ["[1]/[0]" event]
   ["[1]/[0]" cps]
   ["[1]/[0]" incremental]
   ["[1]/[0]" structured]
   ["[1]/[0]" behavioral]]
  ["[1][0]" continuation]
  ["[1][0]" exception]
  ["[1][0]" function]
  ["[1][0]" io]
  ["[1][0]" lazy]
  ["[1][0]" maybe]
  ["[1][0]" parser]
  ["[1][0]" pipe]
  ["[1][0]" reader]
  ["[1][0]" region]
  ["[1][0]" remember]
  [security
   ["[1][0]" policy]
   ["[1][0]" capability]]
  ["[1][0]" state]
  ["[1][0]" thread]
  ["[1][0]" try]
  ["[1][0]" writer]])

(def concurrency
  Test
  (all _.and
       /concurrency/actor.test
       /concurrency/agent.test
       /concurrency/atom.test
       /concurrency/frp.test
       /concurrency/thread.test
       /concurrency/async.test
       /concurrency/semaphore.test
       /concurrency/stm.test
       /concurrency/event.test
       /concurrency/cps.test
       /concurrency/incremental.test
       /concurrency/structured.test
       /concurrency/behavioral.test
       ))

(def security
  Test
  (all _.and
       /policy.test
       /capability.test
       ))

(def .public test
  Test
  (all _.and
       /concatenative.test
       ..concurrency
       /continuation.test
       /exception.test
       /function.test
       /io.test
       /lazy.test
       /maybe.test
       /parser.test
       /pipe.test
       /reader.test
       /region.test
       /remember.test
       ..security
       /state.test
       /thread.test
       /try.test
       /writer.test
       ))
