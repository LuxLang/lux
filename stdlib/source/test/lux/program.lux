... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["<>" projection]]
   [control
    ["[0]" io]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list]
     ["[0]" stack]]]
   [math
    ["[0]" random]
    [number
     ["n" natural (.use "[1]#[0]" base_10)]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [meta
    ["[0]" code
     ["<[1]>" \\projection]]]
   [test
    ["_" property (.only Test)]]]]
 ["[0]" \\projection]
 [\\library
  ["[0]" /]])

(the !expect
  (template.macro (_ <pattern> <value>)
    [(when <value>
       <pattern>
       true
       
       _
       false)]))

(the \\projection
  Test
  (<| (_.covering \\projection._)
      (_.for [\\projection.Projection])
      (do [! random.monad]
        [expected (by ! each n#as random.natural)
         .let [random_dummy (random.only (|>> (text.= expected) not)
                                         (random.unicode 5))]
         dummy random_dummy
         short (random.unicode 1)
         long (random.unicode 2)
         pre_ignore (random.stack 5 random_dummy)
         post_ignore (random.stack 5 random_dummy)]
        (all _.and
             (_.coverage [\\projection.value \\projection.any]
               (|> (\\projection.value \\projection.any (stack expected))
                   (!expect (^.multi {try.#Success actual}
                                     (text.= expected actual)))))
             (_.coverage [\\projection.parse]
               (|> (\\projection.value (\\projection.parse n#of) (stack expected))
                   (!expect (^.multi {try.#Success actual}
                                     (text.= expected
                                             (n#as actual))))))
             (_.coverage [\\projection.this]
               (and (|> (\\projection.value (\\projection.this expected) (stack expected))
                        (!expect {try.#Success _}))
                    (|> (\\projection.value (\\projection.this expected) (stack dummy))
                        (!expect {try.#Failure _}))))
             (_.coverage [\\projection.somewhere]
               (|> (\\projection.value (|> (\\projection.somewhere (\\projection.this expected))
                                           (<>.before (<>.some \\projection.any)))
                                       (stack.together (stack pre_ignore (stack expected) post_ignore)))
                   (!expect {try.#Success _})))
             (_.coverage [\\projection.end]
               (and (|> (\\projection.value \\projection.end (stack))
                        (!expect {try.#Success _}))
                    (|> (\\projection.value (<>.not \\projection.end) (stack expected))
                        (!expect {try.#Failure _}))))
             (_.coverage [\\projection.named]
               (|> (\\projection.value (\\projection.named dummy \\projection.any) (stack dummy expected))
                   (!expect (^.multi {try.#Success actual}
                                     (text.= expected actual)))))
             (_.coverage [\\projection.parameter]
               (and (|> (\\projection.value (\\projection.parameter [short long] \\projection.any)
                                            (stack short expected))
                        (!expect (^.multi {try.#Success actual}
                                          (text.= expected actual))))
                    (|> (\\projection.value (\\projection.parameter [short long] \\projection.any)
                                            (stack long expected))
                        (!expect (^.multi {try.#Success actual}
                                          (text.= expected actual))))
                    (|> (\\projection.value (\\projection.parameter [short long] \\projection.any)
                                            (stack dummy expected))
                        (!expect {try.#Failure _}))))
             ))))

(the .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [inputs (random.list 5 (random.upper_cased 5))]
        (all _.and
             (_.coverage [/.Program /.program]
               (let [(open "list#[0]") (list.equivalence text.equivalence)]
                 (and (let [outcome ((is /.Program
                                         (/.program all_arguments
                                           (io.io (list.of_stack all_arguments))))
                                     (list.as_stack inputs))]
                        (list#= inputs
                                (as (List Text) (io.value outcome))))
                      (let [outcome ((is /.Program
                                         (/.program [arg/0 \\projection.any
                                                     arg/1 \\projection.any
                                                     arg/2 \\projection.any
                                                     arg/3 \\projection.any
                                                     arg/4 \\projection.any]
                                           (io.io (list arg/4 arg/3 arg/2 arg/1 arg/0))))
                                     (list.as_stack inputs))]
                        (list#= (list.reversed inputs)
                                (as (List Text) (io.value outcome))))
                      (let [outcome ((is /.Program
                                         (/.program [all_arguments (<>.many \\projection.any)]
                                           (io.io all_arguments)))
                                     (list.as_stack inputs))]
                        (list#= inputs
                                (as (List Text) (io.value outcome))))
                      (when (try ((is /.Program
                                      (/.program [arg/0 \\projection.any
                                                  arg/1 \\projection.any
                                                  arg/2 \\projection.any
                                                  arg/3 \\projection.any]
                                        (io.io [])))
                                  (list.as_stack inputs)))
                        {try.#Success _}
                        false
                        
                        {try.#Failure _}
                        true)
                      )))

             ..\\projection
             ))))
