... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only)
     ["[1]T" \\test]]
    ["[0]" functor
     ["[1]T" \\test (.only Injection Comparison)]]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["|" pipe]
    ["[0]" io]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]
   [data
    ["[0]" sum]]]]
 [\\library
  ["[0]" / (.only Try)]])

(the injection
  (Injection Try)
  (|>> {/.#Success}))

(the comparison
  (Comparison Try)
  (function (_ ==)
    (by (/.equivalence ==) =)))

(the .public (attempt element)
  (for_any (_ a)
    (-> (Random a)
        (Random (Try a))))
  (all random.or
       (random.unicode 1)
       element))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Try
              /.#Failure /.#Success])
      (monad.let [! random.monad]
        [expected random.natural
         alternative (|> random.natural (random.only (|>> (n.= expected) not)))
         error (random.unicode 1)
         .let [(open "io:[0]") io.monad]])
      (all _.and
           (_.for [/.equivalence]
                  (equivalenceT.spec (/.equivalence n.equivalence) (..attempt random.natural)))
           (_.for [/.functor]
                  (functorT.spec ..injection ..comparison /.functor))
           (_.for [/.monad]
                  (monadT.spec ..injection ..comparison /.monad))

           (_.coverage [/.trusted]
             (n.= expected
                  (/.trusted {/.#Success expected})))
           (_.coverage [/.of_maybe]
             (when [(/.of_maybe error {.#Some expected})
                    (/.of_maybe error {.#None})]
               [{/.#Success actual} {/.#Failure actual_error}]
               (and (n.= expected actual)
                    (identical? error actual_error))

               _
               false))
           (_.coverage [/.maybe]
             (when [(/.maybe {/.#Success expected})
                    (/.maybe (is (/.Try Natural) {/.#Failure error}))]
               [{.#Some actual} {.#None}]
               (n.= expected actual)

               _
               false))
           (_.coverage [/.else]
             (and (n.= expected
                       (/.else alternative {/.#Success expected}))
                  (n.= alternative
                       (/.else alternative (is (Try Natural) {/.#Failure error})))))
           (_.coverage [/.if]
             (`` (and (,, (template.with [<scenario>]
                            [(by (/.equivalence n.equivalence) =
                                 <scenario>
                                 (/.if true <scenario>))]

                            [[{/.#Success expected}]
                             [{/.#Failure error}]]))
                      (by (/.equivalence n.equivalence) =
                          (/.if false {/.#Success expected})
                          (/.if false {/.#Failure error})))))
           (_.coverage [/.With /.with /.lifted]
             (let [lifted (/.lifted io.monad)]
               (|> (monad.let (/.with io.monad)
                     [a (lifted (io:pure expected))
                      b (pure alternative)]
                     (pure (n.+ a b)))
                   io.value
                   (|.when
                     {/.#Success it}
                     (n.= (n.+ expected alternative)
                          it)

                     _
                     false))))
           (_.coverage [/.or]
             (and (when (/.or {/.#Success expected}
                              {/.#Success alternative})
                    {/.#Success actual}
                    (identical? expected actual)

                    {/.#Failure error}
                    false)
                  (when (/.or {/.#Failure error}
                              {/.#Success alternative})
                    {/.#Success actual}
                    (identical? alternative actual)

                    {/.#Failure error}
                    false)))
           (_.coverage [/.as /.is?]
             (let [wrong_error (by n.base_10 as (static.random_natural))
                   expected_error (by i.base_10 as (static.random_integer))]
               (and (|> {/.#Failure wrong_error}
                        (/.as expected_error)
                        (/.is? expected_error))
                    (|> {/.#Failure wrong_error}
                        (/.is? expected_error)
                        not))))
           (monad.let [! random.monad]
             [expected_left random.natural
              expected_right random.integer
              expected_error (random.unicode 1)]
             (all _.and
                  (_.coverage [/.as_either]
                    (with (sum.equivalence n.equivalence i.equivalence)
                      (and (= {.#Left expected_left}
                              (/.as_either expected_left {/.#Failure expected_error}))
                           (= {.#Right expected_right}
                              (/.as_either expected_left {/.#Success expected_right})))))
                  (_.coverage [/.of_either]
                    (with (/.equivalence i.equivalence)
                      (and (= {/.#Failure expected_error}
                              (/.of_either expected_error {.#Left expected_left}))
                           (= {/.#Success expected_right}
                              (/.of_either expected_error {.#Right expected_right})))))))
           )))
