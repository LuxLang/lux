... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]
     ["i" integer]
     ["r" revolution]
     ["d" decimal]
     ["[0]" fraction (.only Fraction)]
     ["[0]" complex (.only Complex)]]]
   [meta
    [macro
     ["[0]" template]
     ["[0]" expansion]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 ["[0]" /
  ["[1][0]" modulus]
  ["[1][0]" number]
  ["[1][0]" random]
  ["[1][0]" unit]
  ["[1][0]" logic
   ["[1]/[0]" continuous]
   ["[1]/[0]" fuzzy]]
  ["[1][0]" arithmetic
   ["[1]/[0]" infix]
   ["[1]/[0]" modular]
   ["[1]/[0]" saturation]
   ["[1]/[0]" fixed_point]]
  ["[1][0]" geometry
   ["[1]/[0]" circle]
   ["[1]/[0]" hyperbola]]])

(the fraction/0
  Fraction
  [fraction.#numerator 0 fraction.#denominator 1])

(the complex/0
  Complex
  [complex.#real +0.0 complex.#imaginary +0.0])

(the .public test
  Test
  (<| (_.covering /._)
      (do random.monad
        [parameterN (random.only (|>> (n.= 0) not) random.natural)
         subjectN random.natural

         parameterI (random.only (|>> (i.= +0) not) random.integer)
         subjectI random.integer

         parameterR (random.only (|>> (r.= .0) not) random.revolution)
         subjectR random.revolution

         parameterF (random.only (|>> (d.= +0.0) not) random.unit_decimal)
         subjectF random.unit_decimal

         parameter/ (random.only (|>> (fraction.= fraction/0) not) random.fraction)
         subject/ random.fraction

         parameterC (random.only (|>> (complex.= complex/0) not) random.complex)
         subjectC random.complex])
      (`` (all _.and
               (,, (template.with [</> <scenarios>']
                     [(_.coverage [</>]
                        (expansion.let [<scenarios> (template.spliced <scenarios>')]
                          (`` (and (,, (template.with [<=> <//> <parameter> <subject>]
                                         [(<=> (<//> <parameter> <subject>)
                                               (</> <parameter> <subject>))]
                                         
                                         <scenarios>))))))]

                     [/.+ [[n.= n.+ parameterN subjectN]
                           [i.= i.+ parameterI subjectI]
                           [r.= r.+ parameterR subjectR]
                           [d.= d.+ parameterF subjectF]
                           [fraction.= fraction.+ parameter/ subject/]
                           [complex.= complex.+ parameterC subjectC]]]
                     [/.- [[n.= n.- parameterN subjectN]
                           [i.= i.- parameterI subjectI]
                           [r.= r.- parameterR subjectR]
                           [d.= d.- parameterF subjectF]
                           [fraction.= fraction.- parameter/ subject/]
                           [complex.= complex.- parameterC subjectC]]]
                     [/.* [[n.= n.* parameterN subjectN]
                           [i.= i.* parameterI subjectI]
                           [r.= r.* parameterR subjectR]
                           [d.= d.* parameterF subjectF]
                           [fraction.= fraction.* parameter/ subject/]
                           [complex.= complex.* parameterC subjectC]]]
                     [/./ [[n.= n./ parameterN subjectN]
                           [i.= i./ parameterI subjectI]
                           [r.= r./ parameterR subjectR]
                           [d.= d./ parameterF subjectF]
                           [fraction.= fraction./ parameter/ subject/]
                           [complex.= complex./ parameterC subjectC]]]
                     [/.% [[n.= n.% parameterN subjectN]
                           [i.= i.% parameterI subjectI]
                           [r.= r.% parameterR subjectR]
                           [d.= d.% parameterF subjectF]
                           [fraction.= fraction.% parameter/ subject/]
                           [complex.= complex.% parameterC subjectC]]]
                     ))
               (,, (template.with [</> <scenarios>']
                     [(_.coverage [</>]
                        (expansion.let [<scenarios> (template.spliced <scenarios>')]
                          (`` (and (,, (template.with [<//> <parameter> <subject>]
                                         [(bit.= (<//> <parameter> <subject>)
                                                 (</> <parameter> <subject>))]
                                         
                                         <scenarios>))))))]

                     [/.= [[n.= parameterN subjectN]
                           [i.= parameterI subjectI]
                           [r.= parameterR subjectR]
                           [d.= parameterF subjectF]
                           [fraction.= parameter/ subject/]
                           [complex.= parameterC subjectC]]]
                     [/.< [[n.< parameterN subjectN]
                           [i.< parameterI subjectI]
                           [r.< parameterR subjectR]
                           [d.< parameterF subjectF]
                           [fraction.< parameter/ subject/]]]
                     [/.<= [[n.<= parameterN subjectN]
                            [i.<= parameterI subjectI]
                            [r.<= parameterR subjectR]
                            [d.<= parameterF subjectF]
                            [fraction.<= parameter/ subject/]]]
                     [/.> [[n.> parameterN subjectN]
                           [i.> parameterI subjectI]
                           [r.> parameterR subjectR]
                           [d.> parameterF subjectF]
                           [fraction.> parameter/ subject/]]]
                     [/.>= [[n.>= parameterN subjectN]
                            [i.>= parameterI subjectI]
                            [r.>= parameterR subjectR]
                            [d.>= parameterF subjectF]
                            [fraction.>= parameter/ subject/]]]
                     ))

               /modulus.test
               /number.test
               /random.test
               /unit.test
               
               /logic/continuous.test
               /logic/fuzzy.test
               
               /arithmetic/infix.test
               /arithmetic/modular.test
               /arithmetic/saturation.test
               /arithmetic/fixed_point.test

               /geometry/circle.test
               /geometry/hyperbola.test
               ))))
