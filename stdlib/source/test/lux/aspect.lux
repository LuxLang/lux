... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]]
   ["[0]" function]
   [data
    ["[0]" bit]
    ["[0]" product]
    [collection
     ["[0]" list]
     ["[0]" stack]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["[0]" natural]
      ["[0]" integer]
      ["[0]" decimal]]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" view (.only)
    ["[2][1]" \\test]]
   ["[0]" case (.only)
    ["[2][1]" \\test]]
   ["[0]" property (.only)
    ["[2][1]" \\test]]
   ["[0]" member (.only)
    ["[2][1]" \\test]]]])

(the sign
  (property.Property Integer Bit)
  (property.property (integer.>= +0)
                     (function (has [sign mantissa])
                       ((is (Change Integer)
                            (if sign
                                function.identity
                                integer.opposite))
                        (integer.absolute mantissa)))))

(the list_as_stack
  (for_any (_ it)
    (view.View (List it) (Stack it)))
  (view.view list.as_stack
             list.of_stack))

(the whole
  (case.Case Decimal Integer)
  (case.case (function (_ it)
               (let [case (decimal.whole it)]
                 (if (decimal.= it case)
                     {.#Right (decimal.integer it)}
                     {.#Left it})))
             integer.decimal))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected random.integer
         other random.natural])
      (all _.and
           (/property.specification ..sign
                                    integer.equivalence bit.equivalence
                                    random.integer random.bit)
           (do [! random.monad]
             [size (by ! each (natural.% 10) random.natural)]
             (/view.specification ..list_as_stack
                                  (list.equivalence natural.equivalence)
                                  (stack.equivalence natural.equivalence)
                                  
                                  (random.list size random.natural)
                                  (random.stack size random.natural)))
           (/case.specification ..whole
                                decimal.equivalence integer.equivalence
                                (by ! each (decimal.x +1,000,000.0) random.unit_decimal)
                                (by ! each (integer.% +1,000,000) random.integer))

           /view.test
           /case.test
           /property.test
           /member.test
           )))
