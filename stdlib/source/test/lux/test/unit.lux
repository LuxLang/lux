... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" monad)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" expansion]]
   [meta
    ["[0]" static]
    ["[0]" name]
    ["[0]" code]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" tally (.only Tally)]]]])

(the (verify expected_message/0 expected_message/1 successes failures [tally message])
  (-> Text Text Natural Natural [Tally Text] Bit)
  (and (text.contains? expected_message/0 message)
       (text.contains? expected_message/1 message)
       (n.= successes (its tally.#successes tally))
       (n.= failures (its tally.#failures tally))))

(expansion.let [expected_message/0 (static.random (|>> %.natural code.text) random.natural)
                expected_message/1 (static.random (|>> %.integer code.text) random.integer)
                <context> (static.random (|>> %.revolution code.text) random.revolution)
                <success?> (static.random code.bit random.bit)]
  (these (the .public dummy_target
           (static.random_natural))

         (the .public test
           Test
           (<| random:pure
               (/.covering /._)
               (/.for [/.Test])
               (all /.and
                    (monad.let future.monad
                      [[success_tally success_message] (/.success expected_message/0)]
                      (/.coverage [/.success]
                        (and (text.contains? (%.text expected_message/0) success_message)
                             (n.= 1 (its tally.#successes success_tally))
                             (n.= 0 (its tally.#failures success_tally)))))
                    (monad.let future.monad
                      [[failure_tally failure_message] (/.failure expected_message/0)]
                      (/.coverage [/.failure]
                        (and (text.contains? expected_message/0 failure_message)
                             (n.= 0 (its tally.#successes failure_tally))
                             (n.= 1 (its tally.#failures failure_tally)))))
                    (monad.let future.monad
                      [[success_tally success_message] (/.test expected_message/0 true)
                       [failure_tally failure_message] (/.test expected_message/0 false)]
                      (/.coverage [/.test]
                        (and (text.contains? expected_message/0 success_message)
                             (text.contains? expected_message/0 failure_message)
                             (and (n.= 1 (its tally.#successes success_tally))
                                  (n.= 0 (its tally.#successes failure_tally)))
                             (and (n.= 0 (its tally.#failures success_tally))
                                  (n.= 1 (its tally.#failures failure_tally))))))
                    (monad.let future.monad
                      [tt (/.and (/.test expected_message/0 true)
                                 (/.test expected_message/1 true))
                       ff (/.and (/.test expected_message/0 false)
                                 (/.test expected_message/1 false))
                       tf (/.and (/.test expected_message/0 true)
                                 (/.test expected_message/1 false))
                       ft (/.and (/.test expected_message/0 false)
                                 (/.test expected_message/1 true))]
                      (/.coverage [/.and]
                        (and (..verify expected_message/0 expected_message/1 2 0 tt)
                             (..verify expected_message/0 expected_message/1 0 2 ff)
                             (..verify expected_message/0 expected_message/1 1 1 tf)
                             (..verify expected_message/0 expected_message/1 1 1 ft))))
                    (monad.let future.monad
                      [[tally _] (/.covering .._ (/.test "" true))]
                      (/.coverage [/.covering]
                        (set.member? (its tally.#expected tally) (name ..dummy_target))))
                    (monad.let future.monad
                      [[not_covering _] (/.covering .._ (/.test "" true))
                       [covering _] (/.covering .._ (/.coverage [..dummy_target] true))]
                      (/.coverage [/.coverage]
                        (and (and (set.member? (its tally.#expected not_covering) (name ..dummy_target))
                                  (not (set.member? (its tally.#actual not_covering) (name ..dummy_target))))
                             (and (set.member? (its tally.#expected covering) (name ..dummy_target))
                                  (set.member? (its tally.#actual covering) (name ..dummy_target))))))
                    (monad.let future.monad
                      [[reference_tally reference_message] (/.test expected_message/0 <success?>)
                       [context_tally context_message] (/.context <context>
                                                                  (/.test expected_message/0 <success?>))]
                      (/.coverage [/.context]
                        (and (set.= (its tally.#expected context_tally)
                                    (its tally.#expected reference_tally))
                             (set.= (its tally.#actual context_tally)
                                    (its tally.#actual reference_tally))
                             (n.= (its tally.#successes context_tally)
                                  (its tally.#successes reference_tally))
                             (n.= (its tally.#failures context_tally)
                                  (its tally.#failures reference_tally))
                             (text.contains? (%.text <context>) context_message)
                             (not (text.contains? (%.text <context>) reference_message)))))
                    (monad.let future.monad
                      [[reference_tally reference_message] (/.test expected_message/0 <success?>)
                       [context_tally context_message] (<| (/.for [..dummy_target])
                                                           (/.test expected_message/0 <success?>))]
                      (/.coverage [/.for]
                        (and (set.= (its tally.#expected reference_tally)
                                    (its tally.#expected context_tally))
                             (not (set.= (its tally.#actual reference_tally)
                                         (its tally.#actual context_tally)))
                             (n.= (its tally.#successes reference_tally)
                                  (its tally.#successes context_tally))
                             (n.= (its tally.#failures reference_tally)
                                  (its tally.#failures context_tally))
                             (not (text.contains? (name.as_text (name ..dummy_target)) reference_message))
                             (text.contains? (name.as_text (name ..dummy_target)) context_message))))
                    )))))
