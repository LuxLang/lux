... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [concurrency
    ["[0]" future]
    ["[0]" atom (.only Atom)]]
   [control
    ["[0]" io]]
   [error
    ["[0]" exception]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" stack]
     ["[0]" set]]]
   [math
    ["[0]" random]
    [number
     ["n" natural]]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" unit]
    ["[0]" tally (.only Tally)]]]])

(the (verify expected_message/0 expected_message/1 successes failures [tally message])
  (-> Text Text Natural Natural [Tally Text] Bit)
  (and (text.contains? expected_message/0 message)
       (text.contains? expected_message/1 message)
       (n.= successes (its tally.#successes tally))
       (n.= failures (its tally.#failures tally))))

(the seed
  /.Test
  (do [! random.monad]
    [seed random.natural
     .let [[read write] (is [(future.Future Natural) (future.Resolver Natural)]
                            (future.future []))]
     pre (<| (/.seed seed)
             (do !
               [sample random.natural
                .let [wrote? (io.value (write sample))]]
               (/.test "" wrote?)))
     post (<| (/.seed seed)
              (do !
                [actual random.natural]
                (in (do future.monad
                      [expected read]
                      (unit.test "" (n.= expected actual))))))]
    (in (do future.monad
          [[pre_tally pre_message] pre
           [post_tally post_message] post]
          (unit.coverage [/.seed]
            (and (and (n.= 1 (its tally.#successes pre_tally))
                      (n.= 0 (its tally.#failures pre_tally)))
                 (and (n.= 1 (its tally.#successes post_tally))
                      (n.= 0 (its tally.#failures post_tally)))))))))

(the times
  /.Test
  (all /.and
       (do [! random.monad]
         [times_unit_test (/.times 0 /.ignore_success (/.test "" true))]
         (in (do future.monad
               [[tally error] times_unit_test]
               (unit.coverage [/.must_try_test_at_least_once]
                 (and (text.contains? (its exception.#label /.must_try_test_at_least_once) error)
                      (n.= 0 (its tally.#successes tally))
                      (n.= 1 (its tally.#failures tally)))))))
       (do [! random.monad]
         [expected (by ! each (|>> (n.% 10) ++) random.natural)
          .let [counter (is (Atom Natural)
                            (atom.atom 0))]
          times_unit_test (<| (/.times expected /.ignore_success)
                              (do !
                                [_ (in [])
                                 .let [_ (io.value (atom.update! ++ counter))]]
                                (/.test "" true)))]
         (in (do future.monad
               [[tally error] times_unit_test
                actual (future.soon (atom.read! counter))]
               (unit.coverage [/.times]
                 (and (n.= expected actual)
                      (n.= 1 (its tally.#successes tally))
                      (n.= 0 (its tally.#failures tally)))))))
       (/.coverage [/.Success_Policy /.ignore_success /.announce_success]
         (and (not /.ignore_success)
              /.announce_success))
       ))

(the in_parallel
  /.Test
  (all /.and
       (do [! random.monad]
         [expected (by ! each (|>> (n.% 10) ++) random.natural)
          .let [counter (is (Atom Natural)
                            (atom.atom 0))]
          unit_test (<| /.in_parallel
                        (stack.repeated expected)
                        (is /.Test)
                        (do !
                          [_ (in [])
                           .let [_ (io.value (atom.update! ++ counter))]]
                          (/.test "" true)))]
         (in (do future.monad
               [[tally error] unit_test
                actual (future.soon (atom.read! counter))]
               (unit.coverage [/.in_parallel]
                 (and (n.= expected actual)
                      (n.= expected (its tally.#successes tally))
                      (n.= 0 (its tally.#failures tally)))))))
       (do [! random.monad]
         [expected (by ! each (|>> (n.% 10) ++) random.natural)
          .let [counter (is (Atom Natural)
                            (atom.atom 0))]
          unit_test (<| /.in_parallel
                        (stack.repeated expected)
                        (is /.Test)
                        (do !
                          [_ (in [])
                           .let [_ (undefined)
                                 _ (io.value (atom.update! ++ counter))]]
                          (/.test "" true)))]
         (in (do future.monad
               [[tally error] unit_test
                actual (future.soon (atom.read! counter))]
               (unit.coverage [/.error_during_execution]
                 (let [correct_error! (text.contains? (its exception.#label /.error_during_execution) error)
                       no_complete_run! (n.= 0 actual)
                       no_successes! (n.= 0 (its tally.#successes tally))
                       ran_all_tests! (n.= expected (its tally.#failures tally))]
                   (and correct_error!
                        no_complete_run!
                        no_successes!
                        ran_all_tests!))))))
       ))

(the .public dummy_target
  "YOLO")

(the coverage
  /.Test
  (all /.and
       (do random.monad
         [not_covering (/.test "" true)
          covering (/.covering .._ (/.test "" true))]
         (in (do future.monad
               [[not_covering _] not_covering
                [covering _] covering]
               (unit.coverage [/.covering]
                 (and (and (set.empty? (its tally.#expected not_covering))
                           (set.empty? (its tally.#actual not_covering)))
                      (and (not (set.empty? (its tally.#expected covering)))
                           (set.empty? (its tally.#actual covering))))))))
       (do random.monad
         [not_covering (/.covering .._ (/.test "" true))
          covering (/.covering .._ (/.coverage [..dummy_target] true))]
         (in (do future.monad
               [[not_covering _] not_covering
                [covering _] covering]
               (unit.coverage [/.coverage]
                 (and (and (not (set.empty? (its tally.#expected not_covering)))
                           (not (set.member? (its tally.#actual not_covering) (name ..dummy_target))))
                      (and (not (set.empty? (its tally.#expected covering)))
                           (set.member? (its tally.#actual covering) (name ..dummy_target))))))))
       (do random.monad
         [not_covering (/.covering .._ (/.test "" true))
          covering (/.covering .._ (/.for [..dummy_target] (/.test "" true)))]
         (in (do future.monad
               [[not_covering _] not_covering
                [covering _] covering]
               (unit.coverage [/.for]
                 (and (and (not (set.empty? (its tally.#expected not_covering)))
                           (not (set.member? (its tally.#actual not_covering) (name ..dummy_target))))
                      (and (not (set.empty? (its tally.#expected covering)))
                           (set.member? (its tally.#actual covering) (name ..dummy_target))))))))
       ))

(the .public test
  /.Test
  (<| (/.covering /._)
      (/.for [/.Test])
      (do [! random.monad]
        [expected_context (random.lower_cased 5)
         expected_message/0 (random.only (|>> (text.= expected_context) not)
                                         (random.lower_cased 5))
         expected_message/1 (random.only (|>> (text.= expected_message/0) not)
                                         (random.lower_cased 5))]
        (all /.and
             (/.for [/.Seed]
                    seed)
             (do !
               [success_unit_test (/.test expected_message/0 true)
                failure_unit_test (/.test expected_message/0 false)]
               (in (do future.monad
                     [[success_tally success_message] success_unit_test
                      [failure_tally failure_message] failure_unit_test]
                     (unit.coverage [/.test]
                       (and (text.ends_with? (%.text expected_message/0) success_message)
                            (text.ends_with? (%.text expected_message/0) failure_message)
                            (and (n.= 1 (its tally.#successes success_tally))
                                 (n.= 0 (its tally.#successes failure_tally)))
                            (and (n.= 0 (its tally.#failures success_tally))
                                 (n.= 1 (its tally.#failures failure_tally))))))))
             (do !
               [tt (/.and (/.test expected_message/0 true)
                          (/.test expected_message/1 true))
                ff (/.and (/.test expected_message/0 false)
                          (/.test expected_message/1 false))
                tf (/.and (/.test expected_message/0 true)
                          (/.test expected_message/1 false))
                ft (/.and (/.test expected_message/0 false)
                          (/.test expected_message/1 true))]
               (in (do future.monad
                     [tt tt
                      ff ff
                      tf tf
                      ft ft]
                     (unit.coverage [/.and]
                       (and (..verify expected_message/0 expected_message/1 2 0 tt)
                            (..verify expected_message/0 expected_message/1 0 2 ff)
                            (..verify expected_message/0 expected_message/1 1 1 tf)
                            (..verify expected_message/0 expected_message/1 1 1 ft))))))
             (do !
               [success_unit_test (/.context expected_context (/.test expected_message/0 true))
                failure_unit_test (/.context expected_context (/.test expected_message/0 false))]
               (in (do future.monad
                     [[success_tally success_message] success_unit_test
                      [failure_tally failure_message] failure_unit_test]
                     (unit.coverage [/.context]
                       (and (and (text.contains? expected_context success_message)
                                 (text.contains? expected_message/0 success_message))
                            (and (text.contains? expected_context failure_message)
                                 (text.contains? expected_message/0 failure_message))
                            (and (n.= 1 (its tally.#successes success_tally))
                                 (n.= 0 (its tally.#failures success_tally)))
                            (and (n.= 0 (its tally.#successes failure_tally))
                                 (n.= 1 (its tally.#failures failure_tally))))))))
             (do !
               [success_unit_test (/.success expected_message/0)]
               (in (do future.monad
                     [[success_tally success_message] success_unit_test]
                     (unit.coverage [/.success]
                       (and (text.contains? expected_message/0 success_message)
                            (n.= 1 (its tally.#successes success_tally))
                            (n.= 0 (its tally.#failures success_tally)))))))
             (do !
               [failure_unit_test (/.failure expected_message/0)]
               (in (do future.monad
                     [[failure_tally failure_message] failure_unit_test]
                     (unit.coverage [/.failure]
                       (and (text.contains? expected_message/0 failure_message)
                            (n.= 0 (its tally.#successes failure_tally))
                            (n.= 1 (its tally.#failures failure_tally)))))))
             ..times
             ..in_parallel
             ..coverage
             ))))
