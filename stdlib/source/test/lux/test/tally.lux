(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    [collection
     ["[0]" set (.use "[1]#[0]" equivalence)]]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [meta
    ["[0]" symbol]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]]
 [///
  [meta
   ["[0]T" symbol]]])

(def .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Tally])
      (do [! random.monad]
        [left (symbolT.random 1 1)
         right (symbolT.random 2 2)
         expected_successes random.nat
         expected_failures random.nat])
      (all _.and
           (_.coverage [/.empty]
             (and (n.= 0 (the /.#successes /.empty))
                  (n.= 0 (the /.#failures /.empty))
                  (n.= 0 (set.size (the /.#expected /.empty)))
                  (n.= 0 (set.size (the /.#actual /.empty)))))
           (_.coverage [/.success /.#successes]
             (and (n.= 1 (the /.#successes /.success))
                  (n.= 0 (the /.#failures /.success))
                  (n.= 0 (set.size (the /.#expected /.success)))
                  (n.= 0 (set.size (the /.#actual /.success)))))
           (_.coverage [/.failure /.#failures]
             (and (n.= 0 (the /.#successes /.failure))
                  (n.= 1 (the /.#failures /.failure))
                  (n.= 0 (set.size (the /.#expected /.failure)))
                  (n.= 0 (set.size (the /.#actual /.failure)))))
           (_.coverage [/.failed?]
             (and (/.failed? /.failure)
                  (not (/.failed? /.success))))
           (_.coverage [/.and /.#expected /.#actual]
             (and (let [it (/.and /.success /.success)]
                    (and (n.= 2 (the /.#successes it))
                         (n.= 0 (the /.#failures it))))
                  (let [it (/.and /.failure /.failure)]
                    (and (n.= 0 (the /.#successes it))
                         (n.= 2 (the /.#failures it))))
                  (let [it (/.and /.success /.failure)]
                    (and (n.= 1 (the /.#successes it))
                         (n.= 1 (the /.#failures it))))
                  (let [custom [/.#successes expected_successes
                                /.#failures expected_failures
                                /.#expected (set.of_list symbol.hash (list left))
                                /.#actual (set.of_list symbol.hash (list right))]]
                    (and (let [it (/.and /.success custom)]
                           (and (n.= (++ expected_successes) (the /.#successes it))
                                (n.= expected_failures (the /.#failures it))
                                (set#= (the /.#expected custom) (the /.#expected it))
                                (set#= (the /.#actual custom) (the /.#actual it))))
                         (let [it (/.and custom /.failure)]
                           (and (n.= expected_successes (the /.#successes it))
                                (n.= (++ expected_failures) (the /.#failures it))
                                (set#= (the /.#expected custom) (the /.#expected it))
                                (set#= (the /.#actual custom) (the /.#actual it))))))))
           )))
