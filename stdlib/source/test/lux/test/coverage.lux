... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" set]
     ["[0]" list
      ["?[1]" \\projection]]]]
   [math
    ["[0]" random (.only Random)]]
   [macro
    ["[0]" syntax]
    ["[0]" template]
    ["[0]" expansion]]
   [meta
    ["[0]" name]
    ["[0]" static]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(syntax.the (macro_error [macro ?list.any])
  (function (_ compiler)
    (when ((expansion.complete macro) compiler)
      {try.:Failure error}
      {try.:Success [compiler (list (code.text error))]}
      
      {try.:Success _}
      {try.:Failure "OOPS!"})))

(template.with_locals ['defined 'un_defined]
  (these (the .public 'defined
           Natural
           (static.random_natural))
         
         (the .public test
           Test
           (<| (_.covering /._)
               (_.for [/.Coverage])
               (monad.let [! random.monad]
                 [module (random.upper_cased 1)
                  first (random.lower_cased 2)
                  second (random.lower_cased 3)
                  dummy (random.lower_cased 4)])
               (all _.and
                    (`` (_.coverage [/.of]
                          (and (let [[module _] (name .._)
                                     [_ proper] (name 'defined)]
                                 (name.= [module proper]
                                         (/.of (,, (template.name [.._] ['defined])))))
                               (exec
                                 (macro_error (/.of (,, (template.name [.._] ['un_defined]))))
                                 true))))
                    (_.coverage [/.as_text /.of_text]
                      (let [it (/.of_text module (/.as_text (list first second)))]
                        (and (set.member? it [module first])
                             (set.member? it [module second])
                             (not (set.member? it [module dummy])))))
                    )))))
