(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]]
   [data
    [collection
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]]
   [meta
    ["[0]" symbol (.use "[1]#[0]" equivalence)]
    ["[0]" static]
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    [macro
     [syntax (.only syntax)]
     ["[0]" template]
     ["[0]" expansion]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def macro_error
  (syntax (_ [macro <code>.any])
    (function (_ compiler)
      (when ((expansion.complete macro) compiler)
        {try.#Failure error}
        {try.#Success [compiler (list (code.text error))]}
        
        {try.#Success _}
        {try.#Failure "OOPS!"}))))

(template.with_locals [g!defined g!un_defined]
  (these (def .public g!defined
           Nat
           (static.random_nat))
         
         (def .public test
           Test
           (<| (_.covering /._)
               (_.for [/.Coverage])
               (do [! random.monad]
                 [module (random.upper_cased 1)
                  first (random.lower_cased 2)
                  second (random.lower_cased 3)
                  dummy (random.lower_cased 4)])
               (all _.and
                    (`` (_.coverage [/.of]
                          (and (let [[module _] (symbol .._)
                                     [_ short] (symbol g!defined)]
                                 (symbol#= [module short]
                                           (/.of (,, (template.symbol [.._] [g!defined])))))
                               (exec
                                 (macro_error (/.of (,, (template.symbol [.._] [g!un_defined]))))
                                 true))))
                    (_.coverage [/.encoded /.decoded]
                      (let [it (/.decoded module (/.encoded (list first second)))]
                        (and (set.member? it [module first])
                             (set.member? it [module second])
                             (not (set.member? it [module dummy])))))
                    )))))
