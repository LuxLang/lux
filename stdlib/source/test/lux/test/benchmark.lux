... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" order]]
   [control
    ["[0]" io (.only IO)]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]
     ["f" frac]]]
   [world
    [time
     ["[0]" duration]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the (fibonacci it)
  (-> Nat
      Nat)
  (when it
    0 0
    1 1
    _ (n.+ (fibonacci (n.- 1 it))
           (fibonacci (n.- 2 it)))))

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [times (of ! each (n.% 10) random.nat)

         .let [computation (is (IO Nat)
                               (io.io (fibonacci 32)))]])
      (all _.and
           (_.coverage [/.time]
             (io.run!
              (do io.monad
                [duration (/.time computation)]
                (in (duration.positive? duration)))))
           (<| (_.for [/.Benchmark
                       /.#times /.#minimum /.#maximum /.#average])
               (all _.and
                    (_.coverage [/.test]
                      (io.run!
                       (do io.monad
                         [it (/.test times computation)
                          .let [performed_exact_number_of_times!
                                (n.= times (its /.#times it))]]
                         (in (and performed_exact_number_of_times!
                                  (when times
                                    0 (and (duration.neutral? (its /.#minimum it))
                                           (duration.neutral? (its /.#maximum it))
                                           (duration.neutral? (its /.#average it)))
                                    _ (and (duration.positive? (its /.#minimum it))
                                           (duration.positive? (its /.#maximum it))
                                           (duration.positive? (its /.#average it))

                                           (order.<= duration.order
                                                     (its /.#maximum it)
                                                     (its /.#minimum it))
                                           (order.<= duration.order
                                                     (its /.#maximum it)
                                                     (its /.#average it))
                                           (order.>= duration.order
                                                     (its /.#minimum it)
                                                     (its /.#average it)))))))))
                    ))
           )))
