... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equality
     ["[1]T" \\test]]
    ["[0]" hash
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" text]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" functor)]
    [number
     [/64
      ["n" natural]
      ["i" integer]
      ["d" decimal]]]]
   [meta
    ["[0]" static]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(the .public value
  (Random /.Value)
  (random:each (|>> (n.% /.limit) /.value)
               random.natural))

(the .public random
  (Random /.RGB)
  (monad.let random.monad
    [red ..value
     green ..value
     blue ..value]
    (pure (/.rgb red green blue))))

(the scale
  (-> Natural
      Decimal)
  (|>> .integer
       i.decimal))

(the square
  (-> Decimal
      Decimal)
  (d.^ +2.0))

(the square_root
  (-> Decimal
      Decimal)
  (d.^ +0.5))

(the (distance/3 from to)
  (-> /.RGB /.RGB
      Decimal)
  (square_root
   (all d.+
        (|> (scale (/.red to)) (d.- (scale (/.red from))) square)
        (|> (scale (/.green to)) (d.- (scale (/.green from))) square)
        (|> (scale (/.blue to)) (d.- (scale (/.blue from))) square))))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [expected_value ..value
         expected ..random

         expected_red ..value
         expected_green ..value
         expected_blue ..value

         colorful (random.only (function (_ it)
                                 (and (|> it (distance/3 /.black) (d.>= +100.0))
                                      (|> it (distance/3 /.white) (d.>= +100.0))))
                               ..random)
         ratio (random.only (d.>= +0.5)
                            random.unit_decimal)

         left ..random
         right ..random])
      (all _.and
           (_.for [/.Value]
                  (all _.and
                       (_.coverage [/.least]
                         (n.>= /.least
                               expected_value))
                       (_.coverage [/.most]
                         (n.<= /.most
                               expected_value))
                       (_.coverage [/.value?]
                         (and (/.value? expected_value)
                              (not (/.value? (++ /.most)))
                              (not (/.value? (-- /.least)))))
                       (_.coverage [/.value]
                         (|> expected_value
                             /.value
                             (n.= expected_value)))
                       (_.coverage [/.limit]
                         (|> /.limit
                             /.value
                             (n.= /.limit)
                             not))
                       ))
           (_.for [/.RGB]
                  (all _.and
                       (_.for [/.equality /.=]
                              (static.when (identical? /.equality /.=)
                                (equalityT.spec /.equality ..random)))
                       (_.for [/.hash]
                              (hashT.spec /.hash ..random))
                       (_.for [/.addition]
                              (monoidT.spec /.equality /.addition ..random))
                       (_.for [/.subtraction]
                              (monoidT.spec /.equality /.subtraction ..random))

                       (_.coverage [/.rgb
                                    /.red /.green /.blue]
                         (let [it (/.rgb expected_red expected_green expected_blue)]
                           (and (n.= expected_red
                                     (/.red it))
                                (n.= expected_green
                                     (/.green it))
                                (n.= expected_blue
                                     (/.blue it)))))
                       (_.coverage [/.complement]
                         (let [~expected (/.complement expected)]
                           (and (not (/.= expected ~expected))
                                (/.= expected (/.complement ~expected)))))
                       (_.coverage [/.black /.white]
                         (and (by /.equality = /.white (/.complement /.black))
                              (by /.equality = /.black (/.complement /.white))))

                       (_.coverage [/.interpolated]
                         (and (d.<= (distance/3 /.black colorful)
                                    (distance/3 /.black (/.interpolated /.black ratio colorful)))
                              (d.<= (distance/3 /.white colorful)
                                    (distance/3 /.white (/.interpolated /.white ratio colorful)))))
                       (_.coverage [/.darker /.brighter]
                         (and (d.<= (distance/3 /.black colorful)
                                    (distance/3 /.black (/.darker ratio colorful)))
                              (d.<= (distance/3 /.white colorful)
                                    (distance/3 /.white (/.brighter ratio colorful)))))
                       (_.coverage [/.as_text]
                         (bit.= (by /.equality = left right)
                                (text.= (/.as_text left) (/.as_text right))))
                       ))
           )))
