... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [data
    ["[0]" bit]
    ["[0]" text]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" natural]
     ["d" decimal]]]
   [meta
    ["[0]" static]
    [macro
     ["[0]" template]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    ["[0]" rgb]
    ["[0]" hsb]]]]
 [//
  ["[0]T" rgb]])

(template.with [<name> <as> <of>]
  [(the <name>
     (Random /.Value)
     (let [range (d.natural (<as> +1.0))]
       (|> random.natural
           (random#each (|>> (n.% range)
                             n.decimal
                             <of>
                             /.value)))))]

  [degree d.as_degree d.of_degree]
  [percentage d.as_percentage d.of_percentage]
  )

(the .public value
  (Random /.Value)
  (random#each /.value random.unit_decimal))

(the .public random
  (Random /.HSL)
  (do random.monad
    [hue ..degree
     saturation ..percentage
     luminance ..percentage]
    (in (/.hsl hue saturation luminance))))

(the rgb_error_margin
  +1.8)

(the .public test
  Test
  (<| (_.covering /._)
      (do [! random.monad]
        [expected_value ..value
         expected_rgb rgbT.random
         expected_hsl ..random

         possible_value (random.only (|>> d.not_a_number? not)
                                     random.decimal)

         mediocre (|> ..random
                      (random.only (|>> (its /.#saturation)
                                        ((function (_ it)
                                           (and (d.>= +0.25 it)
                                                (d.<= +0.75 it)))))))
         ratio (|> random.unit_decimal (random.only (d.>= +0.5)))
         .let [delta +0.000000001]

         left ..random
         right ..random])
      (all _.and
           (_.for [/.Value]
                  (all _.and
                       (_.coverage [/.value?]
                         (and (/.value? expected_value)
                              (not (/.value? (d.+ delta /.most)))
                              (not (/.value? (d.- delta /.least)))))
                       (_.coverage [/.value]
                         (if (/.value? possible_value)
                           (|> possible_value
                               /.value
                               (d.= possible_value))
                           (or (d.= /.least (/.value possible_value))
                               (d.= /.most (/.value possible_value)))))
                       (_.coverage [/.least]
                         (and (d.< /.most
                                   /.least)
                              (/.value? /.least)
                              (/.value? (d.+ delta /.least))
                              (not (/.value? (d.- delta /.least)))))
                       (_.coverage [/.most]
                         (and (d.> /.least
                                   /.most)
                              (/.value? /.most)
                              (/.value? (d.- delta /.most))
                              (not (/.value? (d.+ delta /.most)))))
                       ))
           (_.for [/.HSL
                   /.#hue /.#saturation /.#luminance]
                  (`` (all _.and
                           (_.for [/.equivalence /.=]
                                  (static.when (same? /.equivalence /.=)
                                    (equivalenceT.spec /.equivalence ..random)))

                           (_.coverage [/.hsl]
                             (|> (/.hsl (its /.#hue expected_hsl)
                                        (its /.#saturation expected_hsl)
                                        (its /.#luminance expected_hsl))
                                 (by /.equivalence = expected_hsl)))
                           (_.coverage [/.of_rgb /.rgb]
                             (|> expected_rgb
                                 /.of_rgb
                                 /.rgb
                                 (by rgb.equivalence = expected_rgb)))

                           (_.coverage [/.saturated]
                             (d.> (its /.#saturation mediocre)
                                  (its /.#saturation (/.saturated ratio mediocre))))
                           (_.coverage [/.un_saturated]
                             (d.< (its /.#saturation mediocre)
                                  (its /.#saturation (/.un_saturated ratio mediocre))))
                           (_.coverage [/.gray_scale]
                             (let [gray'ed (/.gray_scale mediocre)]
                               (and (d.= +0.0
                                         (its /.#saturation gray'ed))
                                    (|> (its /.#luminance gray'ed)
                                        (d.- (its /.#luminance mediocre))
                                        d.abs
                                        (d.<= ..rgb_error_margin)))))
                           (_.coverage [/.injection]
                             (bit.= (by /.equivalence = left right)
                                    (text.= (/.injection left) (/.injection right))))
                           )))
           )))
