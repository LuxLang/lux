... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.`` (.`` (.using
           [library
            [lux (.except)
             [abstract
              ["[0]" monad]]
             [error
              ["[0]" try]]
             [data
              ["[0]" text]]
             [logic
              ["[0]" bit]]
             [math
              ["[0]" random (.only Random)]
              [number
               [/64
                ["[0]" natural]
                ["[0]" decimal]]]]
             [macro
              ["[0]" template]]
             [test
              ["_" property (.only Test)]]]]
           [\\library
            ["[0]" /]]
           ["$[0]" /
            ["[1][0]" export]
            (.,, (.for .js (.,, (.these ["[1][0]" node_js]))
                       (.,, (.these))))])))

(/.the Uint8Array
  "[1]:[0]")

... On Nashorn
(/.the java/lang/String
  "[1]:[0]"
  (new [Uint8Array /.String])
  (getBytes [/.String] Uint8Array))

... On Node
(/.the Buffer
  "[1]:[0]"
  ("static" from [/.String /.String] Buffer)
  (toString [/.String] /.String))

... On the browser
(/.the TextEncoder
  "[1]:[0]"
  (new [/.String])
  (encode [/.String] Uint8Array))

(/.the TextDecoder
  "[1]:[0]"
  (new [/.String])
  (decode [Uint8Array] /.String))

(the .public test
  Test
  (monad.let [! random.monad]
    [boolean random.bit
     number (by ! each (|>> (natural.% 100) natural.decimal) random.natural)
     string (random.ascii 5)
     function (by ! each (function (_ shift)
                           (is (-> Natural Natural)
                               (natural.+ shift)))
                  random.natural)
     ... I64s get compiled as JavaScript objects with a specific structure.
     object random.natural]
    (<| (_.covering /._)
        (`` (all _.and
                 (,, (template.with [<type> <value>]
                       [(_.coverage [<type>]
                          (exec
                            (is <type> <value>)
                            true))]

                       [[/.Boolean boolean]
                        [/.Number number]
                        [/.String string]]))
                 (_.for [/.Object]
                        (all _.and
                             (,, (template.with [<type>]
                                   [(_.coverage [<type>]
                                      (exec
                                        (is (for_some (_ a) (/.Object a))
                                            (is <type>
                                                (as_expected [])))
                                        true))]

                                   [[/.Function]
                                    [/.Symbol]
                                    [/.Null]
                                    [/.Undefined]]))
                             ))
                 (_.coverage [/.null]
                   (exec
                     (is Natural (/.null []))
                     (is Text (/.null []))
                     (is (for_any (_ a) (-> a a)) (/.null []))
                     true))
                 (_.coverage [/.null?]
                   (and (/.null? (/.null []))
                        (not (/.null? 0))
                        (not (/.null? "0"))
                        (not (/.null? (|>>)))))
                 (_.coverage [/.global]
                   (|> (/.global /.Function [parseFloat])
                       .js_object_null?#
                       not))
                 (_.coverage [/.function]
                   (|> (/.function (_ [input/0 Natural])
                         Integer
                         (.integer input/0))
                       .js_object_null?#
                       not))
                 (_.coverage [/.on_browser? /.on_node_js? /.on_nashorn?]
                   (and (or /.on_nashorn?
                            /.on_node_js?
                            /.on_browser?)
                        (bit.= /.on_nashorn?
                               (not (or /.on_node_js?
                                        /.on_browser?)))
                        (bit.= /.on_node_js?
                               (not (or /.on_nashorn?
                                        /.on_browser?)))
                        (bit.= /.on_browser?
                               (not (or /.on_nashorn?
                                        /.on_node_js?)))))
                 (_.coverage [/.type_of]
                   (and (text.= "boolean" (/.type_of boolean))
                        (text.= "number" (/.type_of number))
                        (text.= "string" (/.type_of string))
                        (text.= "function" (/.type_of function))
                        (text.= "object" (/.type_of object))))
                 (_.coverage [/.the]
                   (let [encoding "utf8"]
                     (text.= string
                             (if /.on_nashorn?
                                 (let [binary (|> string
                                                  (as java/lang/String)
                                                  (java/lang/String:getBytes [encoding]))]
                                   (|> (java/lang/String:new [binary encoding])
                                       (as Text)))
                                 
                                 /.on_node_js?
                                 (|> (Buffer:from [string encoding])
                                     (Buffer:toString [encoding]))
                                 
                                 ... On the browser
                                 (let [binary (|> (TextEncoder:new [encoding])
                                                  (TextEncoder:encode [string]))]
                                   (|> (TextDecoder:new [encoding])
                                       (TextDecoder:decode [binary])))
                                 ))))
                 (_.coverage [/.undefined /.undefined?]
                   (and (not (/.undefined? number))
                        (/.undefined? (/.undefined))))
                 (_.coverage [/.object]
                   (let [it (/.object
                              "my_boolean" boolean
                              "my_number" number
                              "my_string" string
                              "my_function" function
                              "my_object" object
                              "my_undefined" (/.undefined))]
                     (and (identical? boolean (.js_object_get# "my_boolean" it))
                          (identical? number (.js_object_get# "my_number" it))
                          (identical? string (.js_object_get# "my_string" it))
                          (identical? function (.js_object_get# "my_function" it))
                          (identical? object (.js_object_get# "my_object" it))
                          (identical? (/.undefined) (.js_object_get# "my_undefined" it))
                          (/.undefined? (.js_object_get# "my_yolo" it)))))

                 $/export.test
                 $/node_js.test
                 )))))
