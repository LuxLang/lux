... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Alias)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" projection (.use "[1]#[0]" monad)]
    ["[0]" io]
    ["[0]" maybe]]
   [data
    ["[0]" product]
    ["[0]" text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]
    [macro (.only with_symbols)
     ["[0]" syntax]
     ["[0]" template]
     ["[0]" expansion]]]]])

(nominal.every .public (Object brand) Any)

(template.with [<name>]
  [(expansion.let [<brand> (template.symbol [<name> "'"])]
     (nominal.every .public <brand> Any)
     (every .public <name>
       (..Object <brand>)))]

  [Null]
  [Function]
  )

(template.with [<name> <type>]
  [(every .public <name>
     <type>)]

  [Boolean Bit]
  [Integer Int]
  [Float   Dec]
  [String  Text]
  )

(every Nullable
  [Bit Code])

(the nullable
  (Projection Nullable)
  (let [token (' "?")]
    (<| (<>.and (<>.parses? (<code>.this token)))
        (<>.after (<>.not (<code>.this token)))
        <code>.any)))

(every Alias
  Text)

(the alias
  (Projection Alias)
  (<>.after (<code>.this (' "as")) <code>.local))

(every Field
  [Bit Text (Maybe Alias) Nullable])

(the static!
  (Projection Any)
  (<code>.this (' "static")))

(the field
  (Projection Field)
  (<code>.form (all <>.and
                    (<>.parses? ..static!)
                    <code>.local
                    (<>.maybe ..alias)
                    ..nullable)))

(the constant
  (Projection Field)
  (<code>.form (all <>.and
                    (<>#in true)
                    <code>.local
                    (<>.maybe ..alias)
                    ..nullable)))

(every Common_Method
  (Record
   [#name Text
    #alias (Maybe Alias)
    #inputs (List Nullable)
    #io? Bit
    #try? Bit
    #output Nullable]))

(every Static_Method Common_Method)
(every Virtual_Method Common_Method)

(every Method
  (Variant
   {#Static Static_Method}
   {#Virtual Virtual_Method}))

(the common_method
  (Projection Common_Method)
  (all <>.and
       <code>.local
       (<>.maybe ..alias)
       (<code>.tuple (<>.some ..nullable))
       (<>.parses? (<code>.this (' "io")))
       (<>.parses? (<code>.this (' "try")))
       ..nullable))

(the static_method
  (<>.after ..static! ..common_method))

(the method
  (Projection Method)
  (<code>.form (<>.or ..static_method
                      ..common_method)))

(every Member
  (Variant
   {#Field Field}
   {#Method Method}))

(the member
  (Projection Member)
  (all <>.or
       ..field
       ..method
       ))

(the input_variables
  (-> (List Nullable) (List [Bit Code]))
  (|>> list.enumeration
       (list#each (function (_ [idx [nullable? type]])
                    [nullable? (|> idx %.natural code.local)]))))

(the (nullable_type [nullable? type])
  (-> Nullable Code)
  (if nullable?
    (` (.Maybe (, type)))
    type))

(the (with_null g!temp [nullable? input])
  (-> Code [Bit Code] Code)
  (if nullable?
    (` (when (, input)
         {.#Some (, g!temp)}
         (, g!temp)

         {.#Null}
         ("php object null")))
    input))

(the (without_null g!temp [nullable? outputT] output)
  (-> Code Nullable Code Code)
  (if nullable?
    (` (let [(, g!temp) (, output)]
         (if ("php object null?" (, g!temp))
           {.#None}
           {.#Some (, g!temp)})))
    (` (let [(, g!temp) (, output)]
         (if (not ("php object null?" (, g!temp)))
           (, g!temp)
           (.panic! "Null is an invalid value!"))))))

(every Import
  (Variant
   {#Class Text (Maybe Alias) Text (List Member)}
   {#Function Static_Method}
   {#Constant Field}))

(the import
  (Projection Import)
  (all <>.or
       (all <>.and
            <code>.local
            (<>.maybe ..alias)
            (<>.else ["" (list)]
                     (<code>.tuple (<>.and <code>.text
                                           (<>.some member)))))
       (<code>.form ..common_method)
       ..constant
       ))

(the (with_io with? without)
  (-> Bit Code Code)
  (if with?
    (` (io.io (, without)))
    without))

(the (io_type io? rawT)
  (-> Bit Code Code)
  (if io?
    (` (io.IO (, rawT)))
    rawT))

(the (with_try with? without_try)
  (-> Bit Code Code)
  (if with?
    (` (..try (, without_try)))
    without_try))

(the (try_type try? rawT)
  (-> Bit Code Code)
  (if try?
    (` (.Either .Text (, rawT)))
    rawT))

(the (make_function g!method g!temp source inputsT io? try? outputT)
  (-> Code Code Code (List Nullable) Bit Bit Nullable Code)
  (let [g!inputs (input_variables inputsT)]
    (` (the ((, g!method)
             [(,* (list#each product.right g!inputs))])
         (-> [(,* (list#each nullable_type inputsT))]
             (, (|> (nullable_type outputT)
                    (try_type try?)
                    (io_type io?))))
         (as_expected
          (, (<| (with_io io?)
                 (with_try try?)
                 (without_null g!temp outputT)
                 (` ("php apply"
                     (as ..Function (, source))
                     (,* (list#each (with_null g!temp) g!inputs)))))))))))

(the .public import
  (syntax.macro (_ [import ..import])
    (with_symbols [g!temp]
      (when import
        {#Class [class alias format members]}
        (with_symbols [g!object]
          (let [qualify (is (-> Text Code)
                            (function (_ member_name)
                              (|> format
                                  (text.replaced "[1]" (maybe.else class alias))
                                  (text.replaced "[0]" member_name)
                                  code.local)))
                g!type (code.local (maybe.else class alias))
                class_import (` ("php constant" (, (code.text class))))]
            (in (list.partial (` (every (, g!type)
                                   (..Object (Nominal (, (code.text class))))))
                              (list#each (function (_ member)
                                           (when member
                                             {#Field [static? field alias fieldT]}
                                             (let [g!field (qualify (maybe.else field alias))]
                                               (if static?
                                                 (` (the (, g!field)
                                                      (syntax.macro ((, g!field) [])
                                                        (of meta.monad (,' in)
                                                            (list (` (.as (, (nullable_type fieldT))
                                                                          ("php constant" (, (code.text (%.message class "::" field)))))))))))
                                                 (` (the ((, g!field) (, g!object))
                                                      (-> (, g!type)
                                                          (, (nullable_type fieldT)))
                                                      (as_expected
                                                       (, (without_null g!temp fieldT (` ("php object get" (, (code.text field))
                                                                                          (as (..Object .Any) (, g!object)))))))))))
                                             
                                             {#Method method}
                                             (when method
                                               {#Static [method alias inputsT io? try? outputT]}
                                               (..make_function (qualify (maybe.else method alias))
                                                                g!temp
                                                                (` ("php object get" (, (code.text method))
                                                                    (as (..Object .Any)
                                                                        ("php constant" (, (code.text (%.message class "::" method)))))))
                                                                inputsT
                                                                io?
                                                                try?
                                                                outputT)
                                               
                                               {#Virtual [method alias inputsT io? try? outputT]}
                                               (let [g!inputs (input_variables inputsT)]
                                                 (` (the ((, (qualify (maybe.else method alias)))
                                                          [(,* (list#each product.right g!inputs))]
                                                          (, g!object))
                                                      (-> [(,* (list#each nullable_type inputsT))]
                                                          (, g!type)
                                                          (, (|> (nullable_type outputT)
                                                                 (try_type try?)
                                                                 (io_type io?))))
                                                      (as_expected
                                                       (, (<| (with_io io?)
                                                              (with_try try?)
                                                              (without_null g!temp outputT)
                                                              (` ("php object do"
                                                                  (, (code.text method))
                                                                  (, g!object)
                                                                  (,* (list#each (with_null g!temp) g!inputs)))))))))))))
                                         members)))))
        
        {#Function [name alias inputsT io? try? outputT]}
        (let [imported (` ("php constant" (, (code.text name))))]
          (in (list (..make_function (code.local (maybe.else name alias))
                                     g!temp
                                     imported
                                     inputsT
                                     io?
                                     try?
                                     outputT))))

        {#Constant [_ name alias fieldT]}
        (let [imported (` ("php constant" (, (code.text name))))
              g!name (code.local (maybe.else name alias))]
          (in (list (` (the (, g!name)
                         (syntax.macro ((, g!name) [])
                           (of meta.monad (,' in)
                               (list (` (.as (, (nullable_type fieldT)) (, imported)))))))))))
        ))))
