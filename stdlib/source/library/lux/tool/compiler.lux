(.using
 [library
  [lux (.except Module Code)
   [control
    ["<>" parser (.only)]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only exception:)]]
   [data
    ["[0]" text]
    ["[0]" binary (.only Binary)
     [\\format (.only Writer)]
     ["<[1]>" \\parser (.only Parser)]]]
   [world
    ["[0]" file (.only Path)]]]]
 [/
  [meta
   ["[0]" archive (.only Output Archive)
    [key (.only Key)]
    [module
     [descriptor (.only Descriptor Module)]
     [document (.only Document)]]]]])

(type: .public Code
  Text)

(type: .public Parameter
  Text)

(type: .public Input
  (Record
   [#module Module
    #file Path
    #hash Nat
    #code Code]))

(type: .public (Compilation s d o)
  (Record
   [#dependencies (List Module)
    #process (-> s Archive
                 (Try [s (Either (Compilation s d o)
                                 (archive.Entry d))]))]))

(type: .public (Compiler s d o)
  (-> Input (Compilation s d o)))

(type: .public Custom
  (Ex (_ state document object)
    [state
     (Key document)
     (Writer document)
     (Parser document)
     (-> Input (Try (Compilation state document object)))]))

(type: .public (Instancer s d o)
  (-> (Key d) (List Parameter) (Compiler s d o)))

(exception: .public (cannot_compile [module Module])
  (exception.report
   "Module" module))
