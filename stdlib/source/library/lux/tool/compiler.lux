(.module:
  [library
   [lux {"-" [Module Code]}
    [control
     ["." try {"+" [Try]}]
     ["." exception {"+" [exception:]}]]
    [data
     [binary {"+" [Binary]}]
     ["." text]
     [collection
      ["." row {"+" [Row]}]]]
    [world
     ["." file {"+" [Path]}]]]]
  [/
   [meta
    ["." archive {"+" [Output Archive]}
     [key {"+" [Key]}]
     [descriptor {"+" [Descriptor Module]}]
     [document {"+" [Document]}]]]])

(type: .public Code
  Text)

(type: .public Parameter
  Text)

(type: .public Input
  (Record
   [#module Module
    #file Path
    #hash Nat
    #code Code]))

(type: .public (Compilation s d o)
  (Record
   [#dependencies (List Module)
    #process (-> s Archive
                 (Try [s (Either (Compilation s d o)
                                 [Descriptor (Document d) Output])]))]))

(type: .public (Compiler s d o)
  (-> Input (Compilation s d o)))

(type: .public (Instancer s d o)
  (-> (Key d) (List Parameter) (Compiler s d o)))

(exception: .public (cannot_compile {module Module})
  (exception.report
   ["Module" module]))
