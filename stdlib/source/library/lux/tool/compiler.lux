(.using
 [library
  [lux {"-" Module Code}
   [control
    ["[0]" try {"+" Try}]
    ["[0]" exception {"+" exception:}]]
   [data
    [binary {"+" Binary}]
    ["[0]" text]]
   [world
    ["[0]" file {"+" Path}]]]]
 [/
  [meta
   ["[0]" archive {"+" Output Archive}
    [key {"+" Key}]
    [module
     [descriptor {"+" Descriptor Module}]
     [document {"+" Document}]]]]])

(type: .public Code
  Text)

(type: .public Parameter
  Text)

(type: .public Input
  (Record
   [#module Module
    #file Path
    #hash Nat
    #code Code]))

(type: .public (Compilation s d o)
  (Record
   [#dependencies (List Module)
    #process (-> s Archive
                 (Try [s (Either (Compilation s d o)
                                 (archive.Entry Any))]))]))

(type: .public (Compiler s d o)
  (-> Input (Compilation s d o)))

(type: .public Custom
  (Ex (_ state document object)
    (-> (List Text) (Try [state (Compiler state document object)]))))

(type: .public (Instancer s d o)
  (-> (Key d) (List Parameter) (Compiler s d o)))

(exception: .public (cannot_compile [module Module])
  (exception.report
   ["Module" module]))
