(.using
 [library
  [lux (.except parameter)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]]
   [control
    ["<>" parser
     ["<[0]>" text (.only Parser)]]]
   [data
    ["[0]" product]
    ["[0]" text
     ["%" format]]
    [collection
     ["[0]" list ("[1]#[0]" functor)]]]
   [math
    [number (.only hex)]]
   [meta
    ["[0]" symbol]]]])

(type: .public Compiler
  (Record
   [#definition Symbol
    #parameters (List Text)]))

(def: .public equivalence
  (Equivalence Compiler)
  (all product.equivalence
       symbol.equivalence
       (list.equivalence text.equivalence)
       ))

(template [<ascii> <name>]
  [(def: <name>
     Text
     (text.of_char (hex <ascii>)))]

  ["02" start]
  ["03" end]
  )

(def: parameter
  (-> Text Text)
  (text.enclosed [..start ..end]))

(def: .public (format [[module short] parameters])
  (%.Format Compiler)
  (%.format (..parameter module) (..parameter short)
            (text.together (list#each ..parameter parameters))))

(def: .public parser
  (Parser Compiler)
  (let [parameter (is (Parser Text)
                      (<| (<>.after (<text>.this ..start))
                          (<>.before (<text>.this ..end))
                          (<text>.slice (<text>.many! (<text>.none_of! ..end)))))]
    (do <>.monad
      [module parameter
       short parameter
       parameters (<>.some parameter)]
      (in [[module short] parameters]))))
