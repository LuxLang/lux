(.using
 [library
  [lux {"-" Module Source}
   [control
    [pipe {"+" case>}]
    ["<>" parser
     ["<[0]>" cli {"+" Parser}]]]
   [tool
    [compiler
     [meta
      [archive
       [module
        ["[0]" descriptor]]]]]]
   [world
    [file {"+" Path}]]]])

(type: .public Source
  Path)

(type: .public Host_Dependency
  Path)

(type: .public Library
  Path)

(type: .public Target
  Path)

(type: .public Module
  descriptor.Module)

(type: .public Compilation
  (Record
   [#sources (List Source)
    #host_dependencies (List Host_Dependency)
    #libraries (List Library)
    #target Target
    #module Module]))

(type: .public Interpretation
  ..Compilation)

(type: .public Export
  [(List Source) Target])

(type: .public Service
  (Variant
   {#Compilation Compilation}
   {#Interpretation Interpretation}
   {#Export Export}))

(template [<name> <long> <type>]
  [(def: <name>
     (Parser <type>)
     (<cli>.named <long> <cli>.any))]

  [source_parser "--source" Source]
  [host_dependency_parser "--host_dependency" Host_Dependency]
  [library_parser "--library" Library]
  [target_parser "--target" Target]
  [module_parser "--module" Module]
  )

(def: .public service
  (Parser Service)
  ($_ <>.or
      (<>.after (<cli>.this "build")
                ($_ <>.and
                    (<>.some ..source_parser)
                    (<>.some ..host_dependency_parser)
                    (<>.some ..library_parser)
                    ..target_parser
                    ..module_parser))
      (<>.after (<cli>.this "repl")
                ($_ <>.and
                    (<>.some ..source_parser)
                    (<>.some ..host_dependency_parser)
                    (<>.some ..library_parser)
                    ..target_parser
                    ..module_parser))
      (<>.after (<cli>.this "export")
                ($_ <>.and
                    (<>.some ..source_parser)
                    ..target_parser))
      ))

(def: .public target
  (-> Service Target)
  (|>> (case> (^or {#Compilation [sources host_dependencies libraries target module]}
                   {#Interpretation [sources host_dependencies libraries target module]}
                   {#Export [sources target]})
              target)))
