(.using
 [library
  [lux {"-" Module Source}
   [abstract
    [monad {"+" do}]
    [equivalence {"+" Equivalence}]]
   [control
    [pipe {"+" case>}]
    ["<>" parser
     ["<[0]>" cli {"+" Parser}]
     ["<[0]>" text]]]
   [data
    ["[0]" product]
    ["[0]" text
     ["%" format]]
    [collection
     ["[0]" list ("[1]#[0]" functor)]]]
   [math
    [number {"+" hex}]]
   [meta
    ["[0]" symbol]
    ["[0]" configuration {"+" Configuration}]]
   [tool
    [compiler
     [meta
      [archive
       [module
        ["[0]" descriptor]]]]]]
   [world
    [file {"+" Path}]]]]
 ["[0]" / "_"
  ["[1][0]" compiler {"+" Compiler}]])

(type: .public Host_Dependency
  Path)

(type: .public Library
  Path)

(type: .public Source
  Path)

(type: .public Target
  Path)

(type: .public Module
  descriptor.Module)

(type: .public Compilation
  (Record
   [#host_dependencies (List Host_Dependency)
    #libraries (List Library)
    #compilers (List Compiler)
    #sources (List Source)
    #target Target
    #module Module
    #configuration Configuration]))

(type: .public Interpretation
  ..Compilation)

(type: .public Export
  [(List Source) Target])

(type: .public Service
  (Variant
   {#Compilation Compilation}
   {#Interpretation Interpretation}
   {#Export Export}))

(template [<name> <long> <type> <parser>]
  [(def: <name>
     (Parser <type>)
     (<cli>.named <long> <parser>))]

  [host_dependency_parser "--host_dependency" Host_Dependency <cli>.any]
  [library_parser "--library" Library <cli>.any]
  [compiler_parser "--compiler" Compiler (<text>.then /compiler.parser <cli>.any)]
  [source_parser "--source" Source <cli>.any]
  [target_parser "--target" Target <cli>.any]
  [module_parser "--module" Module <cli>.any]
  [configuration_parser "--configuration" Configuration (<text>.then configuration.parser <cli>.any)]
  )

(def: .public service
  (Parser Service)
  (let [compilation (: (Parser Compilation)
                       ($_ <>.and
                           (<>.some ..host_dependency_parser)
                           (<>.some ..library_parser)
                           (<>.some ..compiler_parser)
                           (<>.some ..source_parser)
                           ..target_parser
                           ..module_parser
                           (<>.else configuration.empty ..configuration_parser)))]
    ($_ <>.or
        (<>.after (<cli>.this "build")
                  compilation)
        (<>.after (<cli>.this "repl")
                  compilation)
        (<>.after (<cli>.this "export")
                  ($_ <>.and
                      (<>.some ..source_parser)
                      ..target_parser))
        )))

(def: .public target
  (-> Service Target)
  (|>> (case> (^or {#Compilation [host_dependencies libraries compilers sources target module]}
                   {#Interpretation [host_dependencies libraries compilers sources target module]}
                   {#Export [sources target]})
              target)))
