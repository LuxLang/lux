(.module:
  [library
   [lux (#- Module)
    [control
     ["<>" parser
      ["<b>" binary (#+ Parser)]]]
    [data
     ["." text]
     [collection
      [set (#+ Set)]]
     [format
      ["." binary (#+ Writer)]]]
    [world
     [file (#+ Path)]]]]
  [//
   ["." artifact (#+ Registry)]])

(type: .public Module
  Text)

(type: .public Descriptor
  (Record
   {#name Module
    #file Path
    #hash Nat
    #state Module_State
    #references (Set Module)
    #registry Registry}))

(def: .public writer
  (Writer Descriptor)
  ($_ binary.and
      binary.text
      binary.text
      binary.nat
      binary.any
      (binary.set binary.text)
      artifact.writer
      ))

(def: .public parser
  (Parser Descriptor)
  ($_ <>.and
      <b>.text
      <b>.text
      <b>.nat
      (\ <>.monad in #.Cached)
      (<b>.set text.hash <b>.text)
      artifact.parser
      ))
