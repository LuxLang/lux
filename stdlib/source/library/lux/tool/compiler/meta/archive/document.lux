(.module:
  [library
   [lux (#- Module)
    [abstract
     [monad (#+ do)]]
    [control
     ["." try (#+ Try)]
     ["." exception (#+ exception:)]
     ["<>" parser
      [binary (#+ Parser)]]]
    [data
     [collection
      ["." dictionary (#+ Dictionary)]]
     [format
      ["." binary (#+ Writer)]]]
    [type (#+ :sharing)
     abstract]]]
  [//
   ["." signature (#+ Signature)]
   ["." key (#+ Key)]
   [descriptor (#+ Module)]])

(exception: .public (invalid_signature {expected Signature} {actual Signature})
  (exception.report
   ["Expected" (signature.description expected)]
   ["Actual" (signature.description actual)]))

(abstract: .public (Document d)
  {}
  
  {#signature Signature
   #content d}

  (def: .public (read key document)
    (All [d] (-> (Key d) (Document Any) (Try d)))
    (let [[document//signature document//content] (:representation document)]
      (if (\ signature.equivalence =
             (key.signature key)
             document//signature)
        (#try.Success (:sharing [e]
                                (Key e)
                                key
                                
                                e
                                (:expected document//content)))
        (exception.except ..invalid_signature [(key.signature key)
                                               document//signature]))))

  (def: .public (write key content)
    (All [d] (-> (Key d) d (Document d)))
    (:abstraction {#signature (key.signature key)
                   #content content}))

  (def: .public (check key document)
    (All [d] (-> (Key d) (Document Any) (Try (Document d))))
    (do try.monad
      [_ (..read key document)]
      (in (:expected document))))

  (def: .public signature
    (-> (Document Any) Signature)
    (|>> :representation (get@ #signature)))

  (def: .public (writer content)
    (All [d] (-> (Writer d) (Writer (Document d))))
    (let [writer (binary.and signature.writer
                             content)]
      (|>> :representation writer)))

  (def: .public parser
    (All [d] (-> (Parser d) (Parser (Document d))))
    (|>> (<>.and signature.parser)
         (\ <>.monad map (|>> :abstraction))))
  )
