(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" pipe]
    ["[0]" maybe (.use "[1]#[0]" functor)]
    ["[0]" exception (.only exception)]]
   [data
    ["[0]" product]
    ["[0]" binary
     ["[1]" \\format (.only Format)]
     ["<[1]>" \\parser (.only Parser)]]
    ["[0]" text (.only)
     ["%" \\format]]
    [collection
     [set (.only Set)]
     ["[0]" list]
     ["[0]" sequence (.only Sequence) (.use "[1]#[0]" functor mix)]
     ["[0]" dictionary (.only Dictionary)]]]
   [macro
    ["^" pattern]]
   [type
    [primitive (.except)]]]]
 ["[0]" //
  ["[0]" unit]
  ["[1]" artifact (.only Artifact ID)
   ["[2][0]" category (.only Category)]]])

(primitive .public Registry
  (Record
   [#artifacts (Sequence [Artifact (Set unit.ID)])
    #resolver (Dictionary Text [ID (Maybe //category.Definition)])])

  (def .public empty
    Registry
    (abstraction [#artifacts sequence.empty
                  #resolver (dictionary.empty text.hash)]))

  (def .public artifacts
    (-> Registry (Sequence [Artifact (Set unit.ID)]))
    (|>> representation (the #artifacts)))

  (def next
    (-> Registry ID)
    (|>> ..artifacts sequence.size))

  (def .public (resource mandatory? dependencies registry)
    (-> Bit (Set unit.ID) Registry [ID Registry])
    (let [id (..next registry)]
      [id
       (|> registry
           representation
           (revised #artifacts (sequence.suffix [[//.#id id
                                                  //.#category {//category.#Anonymous}
                                                  //.#mandatory? mandatory?]
                                                 dependencies]))
           abstraction)]))

  (with_template [<tag> <create> <fetch> <type> <name> <+resolver>]
    [(def .public (<create> it mandatory? dependencies registry)
       (-> <type> Bit (Set unit.ID) Registry [ID Registry])
       (let [id (..next registry)]
         [id
          (|> registry
              representation
              (revised #artifacts (sequence.suffix [[//.#id id
                                                     //.#category {<tag> it}
                                                     //.#mandatory? mandatory?]
                                                    dependencies]))
              (revised #resolver (dictionary.has (<name> it) [id (is (Maybe //category.Definition) <+resolver>)]))
              abstraction)]))

     (def .public (<fetch> registry)
       (-> Registry (List <type>))
       (|> registry
           representation
           (the #artifacts)
           sequence.list
           (list.all (|>> product.left
                          (the //.#category)
                          (pipe.case
                            {<tag> it} {.#Some it}
                            _ {.#None})))))]

    [//category.#Definition definition definitions //category.Definition
     product.left {.#Some it}]
    [//category.#Analyser analyser analysers Text |> {.#None}]
    [//category.#Synthesizer synthesizer synthesizers Text |> {.#None}]
    [//category.#Generator generator generators Text |> {.#None}]
    [//category.#Declaration declaration declarations Text |> {.#None}]
    [//category.#Custom custom customs Text |> {.#None}]
    )

  (def .public (find_definition name registry)
    (-> Text Registry (Maybe [ID (Maybe //category.Definition)]))
    (|> (representation registry)
        (the #resolver)
        (dictionary.value name)))

  (def .public (id name registry)
    (-> Text Registry (Maybe ID))
    (maybe#each product.left (find_definition name registry)))

  (def .public format
    (Format Registry)
    (let [definition (is (Format //category.Definition)
                         (all binary.and
                              binary.text
                              (binary.maybe
                               (all binary.and
                                    binary.nat
                                    binary.nat
                                    binary.nat
                                    ))
                              ))
          category (is (Format Category)
                       (function (_ value)
                         (case value
                           (^.with_template [<nat> <tag> <format>]
                             [{<tag> value}
                              ((binary.and binary.nat <format>) [<nat> value])])
                           ([0 //category.#Anonymous binary.any]
                            [1 //category.#Definition definition]
                            [2 //category.#Analyser binary.text]
                            [3 //category.#Synthesizer binary.text]
                            [4 //category.#Generator binary.text] 
                            [5 //category.#Declaration binary.text]
                            [6 //category.#Custom binary.text]))))
          mandatory? binary.bit
          dependency (is (Format unit.ID)
                         (binary.and binary.nat binary.nat))
          dependencies (is (Format (Set unit.ID))
                           (binary.set dependency))
          artifacts (is (Format (Sequence [Category Bit (Set unit.ID)]))
                        (binary.sequence_64 (all binary.and category mandatory? dependencies)))]
      (|>> representation
           (the #artifacts)
           (sequence#each (function (_ [it dependencies])
                            [(the //.#category it)
                             (the //.#mandatory? it)
                             dependencies]))
           artifacts)))

  (exception .public (invalid_category [tag Nat])
    (exception.report
     "Tag" (%.nat tag)))

  (def .public parser
    (Parser Registry)
    (let [definition (is (Parser //category.Definition)
                         (all <>.and
                              <binary>.text
                              (<binary>.maybe
                               (all <>.and
                                    <binary>.nat
                                    <binary>.nat
                                    <binary>.nat
                                    ))
                              ))
          category (is (Parser Category)
                       (do [! <>.monad]
                         [tag <binary>.nat]
                         (case tag
                           (^.with_template [<nat> <tag> <parser>]
                             [<nat>
                              (at ! each (|>> {<tag>}) <parser>)])
                           ([0 //category.#Anonymous <binary>.any]
                            [1 //category.#Definition definition]
                            [2 //category.#Analyser <binary>.text]
                            [3 //category.#Synthesizer <binary>.text]
                            [4 //category.#Generator <binary>.text]
                            [5 //category.#Declaration <binary>.text]
                            [6 //category.#Custom <binary>.text])
                           
                           _ (<>.failure (exception.error ..invalid_category [tag])))))
          mandatory? <binary>.bit
          dependency (is (Parser unit.ID)
                         (<>.and <binary>.nat <binary>.nat))
          dependencies (is (Parser (Set unit.ID))
                           (<binary>.set unit.hash dependency))]
      (|> (<binary>.sequence_64 (all <>.and category mandatory? dependencies))
          (at <>.monad each (sequence#mix (function (_ [category mandatory? dependencies] registry)
                                            (product.right
                                             (case category
                                               {//category.#Anonymous}
                                               (..resource mandatory? dependencies registry)

                                               (^.with_template [<tag> <create>]
                                                 [{<tag> name}
                                                  (<create> name mandatory? dependencies registry)])
                                               ([//category.#Definition ..definition]
                                                [//category.#Analyser ..analyser]
                                                [//category.#Synthesizer ..synthesizer]
                                                [//category.#Generator ..generator]
                                                [//category.#Declaration ..declaration]
                                                [//category.#Custom ..custom])
                                               )))
                                          ..empty)))))
  )
