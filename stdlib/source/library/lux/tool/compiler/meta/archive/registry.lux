(.using
 [library
  [lux "*"
   [abstract
    [monad {"+" do}]]
   [control
    [pipe {"+" case>}]
    ["[0]" exception {"+" exception:}]
    ["<>" parser
     ["<[0]>" binary {"+" Parser}]]]
   [data
    ["[0]" product]
    ["[0]" text
     ["%" format {"+" format}]]
    [collection
     [set {"+" Set}]
     ["[0]" list]
     ["[0]" sequence {"+" Sequence} ("[1]#[0]" functor mix)]
     ["[0]" dictionary {"+" Dictionary}]]
    [format
     ["[0]" binary {"+" Writer}]]]
   [type
    abstract]]]
 ["[0]" // "_"
  ["[1]" artifact {"+" Dependency Artifact ID}
   ["[2][0]" category {"+" Category}]]])

(abstract: .public Registry
  (Record
   [#artifacts (Sequence [Artifact (Set Dependency)])
    #resolver (Dictionary Text ID)])

  (def: .public empty
    Registry
    (:abstraction [#artifacts sequence.empty
                   #resolver (dictionary.empty text.hash)]))

  (def: .public artifacts
    (-> Registry (Sequence [Artifact (Set Dependency)]))
    (|>> :representation (value@ #artifacts)))

  (def: next
    (-> Registry ID)
    (|>> ..artifacts sequence.size))

  (def: .public (resource mandatory? dependencies registry)
    (-> Bit (Set Dependency) Registry [ID Registry])
    (let [id (..next registry)]
      [id
       (|> registry
           :representation
           (revised@ #artifacts (sequence.suffix [[//.#id id
                                                   //.#category {//category.#Anonymous}
                                                   //.#mandatory? mandatory?]
                                                  dependencies]))
           :abstraction)]))

  (template [<tag> <create> <fetch>]
    [(def: .public (<create> name mandatory? dependencies registry)
       (-> Text Bit (Set Dependency) Registry [ID Registry])
       (let [id (..next registry)]
         [id
          (|> registry
              :representation
              (revised@ #artifacts (sequence.suffix [[//.#id id
                                                      //.#category {<tag> name}
                                                      //.#mandatory? mandatory?]
                                                     dependencies]))
              (revised@ #resolver (dictionary.has name id))
              :abstraction)]))

     (def: .public (<fetch> registry)
       (-> Registry (List Text))
       (|> registry
           :representation
           (value@ #artifacts)
           sequence.list
           (list.all (|>> product.left
                          (value@ //.#category)
                          (case> {<tag> name} {.#Some name}
                                 _ {.#None})))))]

    [//category.#Definition definition definitions]
    [//category.#Analyser analyser analysers]
    [//category.#Synthesizer synthesizer synthesizers]
    [//category.#Generator generator generators]
    [//category.#Directive directive directives]
    [//category.#Custom custom customs]
    )

  (def: .public (remember name registry)
    (-> Text Registry (Maybe ID))
    (|> (:representation registry)
        (value@ #resolver)
        (dictionary.value name)))

  (def: .public writer
    (Writer Registry)
    (let [category (: (Writer Category)
                      (function (_ value)
                        (case value
                          (^template [<nat> <tag> <writer>]
                            [{<tag> value}
                             ((binary.and binary.nat <writer>) [<nat> value])])
                          ([0 //category.#Anonymous binary.any]
                           [1 //category.#Definition binary.text]
                           [2 //category.#Analyser binary.text]
                           [3 //category.#Synthesizer binary.text]
                           [4 //category.#Generator binary.text] 
                           [5 //category.#Directive binary.text]
                           [6 //category.#Custom binary.text]))))
          mandatory? binary.bit
          dependency (: (Writer Dependency)
                        (binary.and binary.nat binary.nat))
          dependencies (: (Writer (Set Dependency))
                          (binary.set dependency))
          artifacts (: (Writer (Sequence [Category Bit (Set Dependency)]))
                       (binary.sequence/64 ($_ binary.and category mandatory? dependencies)))]
      (|>> :representation
           (value@ #artifacts)
           (sequence#each (function (_ [it dependencies])
                            [(value@ //.#category it)
                             (value@ //.#mandatory? it)
                             dependencies]))
           artifacts)))

  (exception: .public (invalid_category [tag Nat])
    (exception.report
     ["Tag" (%.nat tag)]))

  (def: .public parser
    (Parser Registry)
    (let [category (: (Parser Category)
                      (do [! <>.monad]
                        [tag <binary>.nat]
                        (case tag
                          (^template [<nat> <tag> <parser>]
                            [<nat>
                             (# ! each (|>> {<tag>}) <parser>)])
                          ([0 //category.#Anonymous <binary>.any]
                           [1 //category.#Definition <binary>.text]
                           [2 //category.#Analyser <binary>.text]
                           [3 //category.#Synthesizer <binary>.text]
                           [4 //category.#Generator <binary>.text]
                           [5 //category.#Directive <binary>.text]
                           [6 //category.#Custom <binary>.text])
                          
                          _ (<>.failure (exception.error ..invalid_category [tag])))))
          mandatory? <binary>.bit
          dependency (: (Parser Dependency)
                        (<>.and <binary>.nat <binary>.nat))
          dependencies (: (Parser (Set Dependency))
                          (<binary>.set //.dependency_hash dependency))]
      (|> (<binary>.sequence/64 ($_ <>.and category mandatory? dependencies))
          (# <>.monad each (sequence#mix (function (_ [category mandatory? dependencies] registry)
                                           (product.right
                                            (case category
                                              {//category.#Anonymous}
                                              (..resource mandatory? dependencies registry)

                                              (^template [<tag> <create>]
                                                [{<tag> name}
                                                 (<create> name mandatory? dependencies registry)])
                                              ([//category.#Definition ..definition]
                                               [//category.#Analyser ..analyser]
                                               [//category.#Synthesizer ..synthesizer]
                                               [//category.#Generator ..generator]
                                               [//category.#Directive ..directive]
                                               [//category.#Custom ..custom])
                                              )))
                                         ..empty)))))
  )
