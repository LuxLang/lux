(.using
 [library
  [lux "*"
   [abstract
    [monad {"+" do}]]
   [control
    ["[0]" try {"+" Try}]
    ["[0]" exception {"+" exception:}]
    ["<>" parser
     [binary {"+" Parser}]]]
   [data
    [collection
     ["[0]" dictionary {"+" Dictionary}]]
    [format
     ["[0]" binary {"+" Writer}]]]
   [type {"+" :sharing}
    abstract]]]
 [///
  ["[0]" signature {"+" Signature} ("[1]#[0]" equivalence)]
  ["[0]" key {"+" Key}]])

(exception: .public (invalid_signature [expected Signature
                                        actual Signature])
  (exception.report
   ["Expected" (signature.description expected)]
   ["Actual" (signature.description actual)]))

(abstract: .public (Document d)
  (Record
   [#signature Signature
    #content d])

  (def: .public (content key document)
    (All (_ d) (-> (Key d) (Document Any) (Try d)))
    (let [[document//signature document//content] (:representation document)]
      (if (# signature.equivalence =
             (key.signature key)
             document//signature)
        {try.#Success (:sharing [e]
                                (Key e)
                                key
                                
                                e
                                (:expected document//content))}
        (exception.except ..invalid_signature [(key.signature key)
                                               document//signature]))))

  (def: .public (document key content)
    (All (_ d) (-> (Key d) d (Document d)))
    (:abstraction [#signature (key.signature key)
                   #content content]))

  (def: .public (marked? key document)
    (All (_ d) (-> (Key d) (Document Any) (Try (Document d))))
    (do try.monad
      [_ (..content key document)]
      (in (:expected document))))

  (def: .public signature
    (-> (Document Any) Signature)
    (|>> :representation (the #signature)))

  (def: .public (writer content)
    (All (_ d) (-> (Writer d) (Writer (Document d))))
    (let [writer ($_ binary.and
                     signature.writer
                     content)]
      (|>> :representation writer)))

  (def: .public (parser key it)
    (All (_ d) (-> (Key d) (Parser d) (Parser (Document d))))
    (do <>.monad
      [actual signature.parser
       .let [expected (key.signature key)]
       _ (if (signature#= expected actual)
           (in [])
           (<>.lifted (exception.except ..invalid_signature [expected actual])))
       it it]
      (in (:abstraction [actual it]))))
  )
