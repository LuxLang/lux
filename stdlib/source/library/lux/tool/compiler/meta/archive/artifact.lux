(.using
  [library
   [lux "*"
    [abstract
     [monad {"+" do}]]
    [control
     [pipe {"+" case>}]
     ["[0]" exception {"+" exception:}]
     ["<>" parser
      ["<[0]>" binary {"+" Parser}]]]
    [data
     ["[0]" product]
     ["[0]" text
      ["%" format {"+" format}]]
     [collection
      ["[0]" list]
      ["[0]" sequence {"+" Sequence} ("[1]#[0]" functor mix)]
      ["[0]" dictionary {"+" Dictionary}]]
     [format
      ["[0]" binary {"+" Writer}]]]
    [type
     abstract]]])

(type: .public ID
  Nat)

(type: .public Category
  (Variant
   {#Anonymous}
   {#Definition Text}
   {#Analyser Text}
   {#Synthesizer Text}
   {#Generator Text}
   {#Directive Text}
   {#Custom Text}))

(type: .public Artifact
  (Record
   [#id ID
    #category Category]))

(abstract: .public Registry
  (Record
   [#artifacts (Sequence Artifact)
    #resolver (Dictionary Text ID)])

  (def: .public empty
    Registry
    (:abstraction [#artifacts sequence.empty
                   #resolver (dictionary.empty text.hash)]))

  (def: .public artifacts
    (-> Registry (Sequence Artifact))
    (|>> :representation (value@ #artifacts)))

  (def: next
    (-> Registry ID)
    (|>> ..artifacts sequence.size))

  (def: .public (resource registry)
    (-> Registry [ID Registry])
    (let [id (..next registry)]
      [id
       (|> registry
           :representation
           (revised@ #artifacts (sequence.suffix [#id id
                                                  #category {#Anonymous}]))
           :abstraction)]))

  (template [<tag> <create> <fetch>]
    [(def: .public (<create> name registry)
       (-> Text Registry [ID Registry])
       (let [id (..next registry)]
         [id
          (|> registry
              :representation
              (revised@ #artifacts (sequence.suffix [#id id
                                                     #category {<tag> name}]))
              (revised@ #resolver (dictionary.has name id))
              :abstraction)]))

     (def: .public (<fetch> registry)
       (-> Registry (List Text))
       (|> registry
           :representation
           (value@ #artifacts)
           sequence.list
           (list.all (|>> (value@ #category)
                          (case> {<tag> name} {.#Some name}
                                 _ {.#None})))))]

    [#Definition definition definitions]
    [#Analyser analyser analysers]
    [#Synthesizer synthesizer synthesizers]
    [#Generator generator generators]
    [#Directive directive directives]
    [#Custom custom customs]
    )

  (def: .public (remember name registry)
    (-> Text Registry (Maybe ID))
    (|> (:representation registry)
        (value@ #resolver)
        (dictionary.value name)))

  (def: .public writer
    (Writer Registry)
    (let [category (: (Writer Category)
                      (function (_ value)
                        (case value
                          (^template [<nat> <tag> <writer>]
                            [{<tag> value}
                             ((binary.and binary.nat <writer>) [<nat> value])])
                          ([0 #Anonymous binary.any]
                           [1 #Definition binary.text]
                           [2 #Analyser binary.text]
                           [3 #Synthesizer binary.text]
                           [4 #Generator binary.text] 
                           [5 #Directive binary.text]
                           [6 #Custom binary.text]))))
          artifacts (: (Writer (Sequence Category))
                       (binary.sequence/64 category))]
      (|>> :representation
           (value@ #artifacts)
           (sequence#each (value@ #category))
           artifacts)))

  (exception: .public (invalid_category [tag Nat])
    (exception.report
     ["Tag" (%.nat tag)]))

  (def: .public parser
    (Parser Registry)
    (let [category (: (Parser Category)
                      (do [! <>.monad]
                        [tag <binary>.nat]
                        (case tag
                          (^template [<nat> <tag> <parser>]
                            [<nat>
                             (# ! each (|>> {<tag>}) <parser>)])
                          ([0 #Anonymous <binary>.any]
                           [1 #Definition <binary>.text]
                           [2 #Analyser <binary>.text]
                           [3 #Synthesizer <binary>.text]
                           [4 #Generator <binary>.text]
                           [5 #Directive <binary>.text]
                           [6 #Custom <binary>.text])
                          
                          _ (<>.failure (exception.error ..invalid_category [tag])))))]
      (|> (<binary>.sequence/64 category)
          (# <>.monad each (sequence#mix (function (_ artifact registry)
                                           (product.right
                                            (case artifact
                                              {#Anonymous}
                                              (..resource registry)

                                              (^template [<tag> <create>]
                                                [{<tag> name}
                                                 (<create> name registry)])
                                              ([#Definition ..definition]
                                               [#Analyser ..analyser]
                                               [#Synthesizer ..synthesizer]
                                               [#Generator ..generator]
                                               [#Directive ..directive]
                                               [#Custom ..custom])
                                              )))
                                         ..empty)))))
  )
