(.module:
  [library
   [lux #*
    [abstract
     [monad (#+ do)]]
    [control
     [pipe (#+ case>)]
     ["." exception (#+ exception:)]
     ["<>" parser
      ["<.>" binary (#+ Parser)]]]
    [data
     ["." product]
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list]
      ["." row (#+ Row) ("#\." functor fold)]
      ["." dictionary (#+ Dictionary)]]
     [format
      ["." binary (#+ Writer)]]]
    [type
     abstract]]])

(type: .public ID
  Nat)

(type: .public Category
  #Anonymous
  (#Definition Text)
  (#Analyser Text)
  (#Synthesizer Text)
  (#Generator Text)
  (#Directive Text)
  (#Custom Text))

(type: .public Artifact
  {#id ID
   #category Category})

(abstract: .public Registry
  {}
  
  {#artifacts (Row Artifact)
   #resolver (Dictionary Text ID)}

  (def: .public empty
    Registry
    (:abstraction {#artifacts row.empty
                   #resolver (dictionary.empty text.hash)}))

  (def: .public artifacts
    (-> Registry (Row Artifact))
    (|>> :representation (get@ #artifacts)))

  (def: next
    (-> Registry ID)
    (|>> ..artifacts row.size))

  (def: .public (resource registry)
    (-> Registry [ID Registry])
    (let [id (..next registry)]
      [id
       (|> registry
           :representation
           (update@ #artifacts (row.add {#id id
                                         #category #Anonymous}))
           :abstraction)]))

  (template [<tag> <create> <fetch>]
    [(def: .public (<create> name registry)
       (-> Text Registry [ID Registry])
       (let [id (..next registry)]
         [id
          (|> registry
              :representation
              (update@ #artifacts (row.add {#id id
                                            #category (<tag> name)}))
              (update@ #resolver (dictionary.has name id))
              :abstraction)]))

     (def: .public (<fetch> registry)
       (-> Registry (List Text))
       (|> registry
           :representation
           (get@ #artifacts)
           row.list
           (list.all (|>> (get@ #category)
                          (case> (<tag> name) (#.Some name)
                                 _ #.None)))))]

    [#Definition definition definitions]
    [#Analyser analyser analysers]
    [#Synthesizer synthesizer synthesizers]
    [#Generator generator generators]
    [#Directive directive directives]
    [#Custom custom customs]
    )

  (def: .public (remember name registry)
    (-> Text Registry (Maybe ID))
    (|> (:representation registry)
        (get@ #resolver)
        (dictionary.value name)))

  (def: .public writer
    (Writer Registry)
    (let [category (: (Writer Category)
                      (function (_ value)
                        (case value
                          (^template [<nat> <tag> <writer>]
                            [(<tag> value) ((binary.and binary.nat <writer>) [<nat> value])])
                          ([0 #Anonymous binary.any]
                           [1 #Definition binary.text]
                           [2 #Analyser binary.text]
                           [3 #Synthesizer binary.text]
                           [4 #Generator binary.text] 
                           [5 #Directive binary.text]
                           [6 #Custom binary.text]))))
          artifacts (: (Writer (Row Category))
                       (binary.row/64 category))]
      (|>> :representation
           (get@ #artifacts)
           (row\map (get@ #category))
           artifacts)))

  (exception: .public (invalid_category {tag Nat})
    (exception.report
     ["Tag" (%.nat tag)]))

  (def: .public parser
    (Parser Registry)
    (let [category (: (Parser Category)
                      (do {! <>.monad}
                        [tag <binary>.nat]
                        (case tag
                          (^template [<nat> <tag> <parser>]
                            [<nat> (\ ! map (|>> <tag>) <parser>)])
                          ([0 #Anonymous <binary>.any]
                           [1 #Definition <binary>.text]
                           [2 #Analyser <binary>.text]
                           [3 #Synthesizer <binary>.text]
                           [4 #Generator <binary>.text]
                           [5 #Directive <binary>.text]
                           [6 #Custom <binary>.text])
                          
                          _ (<>.failure (exception.error ..invalid_category [tag])))))]
      (|> (<binary>.row/64 category)
          (\ <>.monad map (row\fold (function (_ artifact registry)
                                      (product.right
                                       (case artifact
                                         #Anonymous
                                         (..resource registry)

                                         (^template [<tag> <create>]
                                           [(<tag> name)
                                            (<create> name registry)])
                                         ([#Definition ..definition]
                                          [#Analyser ..analyser]
                                          [#Synthesizer ..synthesizer]
                                          [#Generator ..generator]
                                          [#Directive ..directive]
                                          [#Custom ..custom])
                                         )))
                                    ..empty)))))
  )
