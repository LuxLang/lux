(.using
 [library
  [lux (.except Definition)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["[0]" maybe]]
   [data
    ["[0]" product]
    ["[0]" text (.open: "[1]#[0]" equivalence)]]
   [macro
    ["^" pattern]]
   [math
    [number
     ["[0]" nat]]]]]
 [/////
  [arity (.only Arity)]])

(type: .public Definition
  [Text (Maybe [Arity [Nat Nat]])])

(def: .public definition_equivalence
  (Equivalence Definition)
  (all product.equivalence
       text.equivalence
       (maybe.equivalence (all product.equivalence
                               nat.equivalence
                               nat.equivalence
                               nat.equivalence
                               ))
       ))

(type: .public Category
  (Variant
   {#Anonymous}
   {#Definition Definition}
   {#Analyser Text}
   {#Synthesizer Text}
   {#Generator Text}
   {#Directive Text}
   {#Custom Text}))

(implementation: .public equivalence
  (Equivalence Category)
  
  (def: (= left right)
    (case [left right]
      [{#Anonymous} {#Anonymous}]
      true

      [{#Definition left} {#Definition right}]
      (# definition_equivalence = left right)
      
      (^.template [<tag>]
        [[{<tag> left} {<tag> right}]
         (text#= left right)])
      ([#Analyser]
       [#Synthesizer]
       [#Generator]
       [#Directive]
       [#Custom])

      _
      false)))
