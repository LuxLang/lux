(.require
 [library
  [lux (.except Definition)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["[0]" maybe]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" equivalence)]]
   [macro
    ["^" pattern]]
   [math
    [number
     ["[0]" nat]]]]]
 [/////
  [arity (.only Arity)]])

(type .public Definition
  [Text (Maybe [Arity [Nat Nat]])])

(def .public definition_equivalence
  (Equivalence Definition)
  (all product.equivalence
       text.equivalence
       (maybe.equivalence (all product.equivalence
                               nat.equivalence
                               nat.equivalence
                               nat.equivalence
                               ))
       ))

(type .public Category
  (Variant
   {#Anonymous}
   {#Definition Definition}
   {#Analyser Text}
   {#Synthesizer Text}
   {#Generator Text}
   {#Declaration Text}
   {#Custom Text}))

(def .public equivalence
  (Equivalence Category)
  (implementation
   (def (= left right)
     (case [left right]
       [{#Anonymous} {#Anonymous}]
       true

       [{#Definition left} {#Definition right}]
       (at definition_equivalence = left right)
       
       (^.with_template [<tag>]
         [[{<tag> left} {<tag> right}]
          (text#= left right)])
       ([#Analyser]
        [#Synthesizer]
        [#Generator]
        [#Declaration]
        [#Custom])

       _
       false))))
