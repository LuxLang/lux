(.using
 [library
  [lux "*"
   [abstract
    [equivalence {"+" Equivalence}]]
   [control
    ["<>" parser
     ["<[0]>" binary {"+" Parser}]]]
   [data
    ["[0]" product]
    ["[0]" text
     ["%" format {"+" format}]]
    [format
     ["[0]" binary {"+" Writer}]]]
   [math
    [number
     ["[0]" nat]]]
   [meta
    ["[0]" symbol]]]]
 [////
  ["[0]" version {"+" Version}]])

(type: .public Signature
  (Record
   [#name Symbol
    #version Version]))

(def: .public equivalence
  (Equivalence Signature)
  ($_ product.equivalence
      symbol.equivalence
      nat.equivalence))

(def: .public (description signature)
  (-> Signature Text)
  (format (%.symbol (the #name signature)) " " (version.format (the #version signature))))

(def: .public writer
  (Writer Signature)
  ($_ binary.and
      (binary.and binary.text binary.text)
      binary.nat))

(def: .public parser
  (Parser Signature)
  ($_ <>.and
      (<>.and <binary>.text <binary>.text)
      <binary>.nat))
