(.module:
  [library
   [lux #*
    [abstract
     [equivalence (#+ Equivalence)]]
    [control
     ["<>" parser
      ["<b>" binary (#+ Parser)]]]
    [data
     ["." product]
     ["." name]
     ["." text
      ["%" format (#+ format)]]
     [format
      ["." binary (#+ Writer)]]]
    [math
     [number
      ["." nat]]]]]
  [////
   [version (#+ Version)]])

(type: .public Signature
  {#name Name
   #version Version})

(def: .public equivalence
  (Equivalence Signature)
  (product.equivalence name.equivalence nat.equivalence))

(def: .public (description signature)
  (-> Signature Text)
  (format (%.name (get@ #name signature)) " " (%.nat (get@ #version signature))))

(def: .public writer
  (Writer Signature)
  (binary.and (binary.and binary.text binary.text)
              binary.nat))

(def: .public parser
  (Parser Signature)
  (<>.and (<>.and <b>.text <b>.text)
          <b>.nat))
