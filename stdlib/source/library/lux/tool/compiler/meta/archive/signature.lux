(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["<>" parser]]
   [data
    ["[0]" product]
    ["[0]" binary
     ["[1]" \\format (.only Writer)]
     ["<[1]>" \\parser (.only Parser)]]
    ["[0]" text (.only)
     ["%" \\format (.only format)]]]
   [math
    [number
     ["[0]" nat]]]
   [meta
    ["[0]" symbol]]]]
 [////
  ["[0]" version (.only Version)]])

(type .public Signature
  (Record
   [#name Symbol
    #version Version]))

(def .public equivalence
  (Equivalence Signature)
  (all product.equivalence
       symbol.equivalence
       nat.equivalence))

(def .public (description signature)
  (-> Signature Text)
  (format (%.symbol (the #name signature)) " " (version.format (the #version signature))))

(def .public writer
  (Writer Signature)
  (all binary.and
       (binary.and binary.text binary.text)
       binary.nat))

(def .public parser
  (Parser Signature)
  (all <>.and
       (<>.and <binary>.text <binary>.text)
       <binary>.nat))
