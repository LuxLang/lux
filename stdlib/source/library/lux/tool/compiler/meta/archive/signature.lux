(.using
  [library
   [lux "*"
    [abstract
     [equivalence {"+" Equivalence}]]
    [control
     ["<>" parser
      ["<b>" binary {"+" Parser}]]]
    [data
     ["[0]" product]
     ["[0]" text
      ["%" format {"+" format}]]
     [format
      ["[0]" binary {"+" Writer}]]]
    [math
     [number
      ["[0]" nat]]]
    [meta
     ["[0]" symbol]]]]
  [////
   [version {"+" Version}]])

(type: .public Signature
  (Record
   [#name Symbol
    #version Version]))

(def: .public equivalence
  (Equivalence Signature)
  (product.equivalence symbol.equivalence nat.equivalence))

(def: .public (description signature)
  (-> Signature Text)
  (format (%.symbol (value@ #name signature)) " " (%.nat (value@ #version signature))))

(def: .public writer
  (Writer Signature)
  (binary.and (binary.and binary.text binary.text)
              binary.nat))

(def: .public parser
  (Parser Signature)
  (<>.and (<>.and <b>.text <b>.text)
          <b>.nat))
