(.using
 [library
  [lux (.full)
   [type (.only sharing)]
   [abstract
    ["[0]" monad (.only Monad do)]]
   [control
    ["[0]" try (.only Try)]]
   [data
    [binary (.only Binary)]
    ["[0]" product]
    [text
     ["%" format (.only format)]
     [encoding 
      ["[0]" utf8]]]
    [collection
     ["[0]" sequence]
     ["[0]" set (.only Set)]
     ["[0]" list ("[1]#[0]" functor)]]]]]
 ["[0]" // (.only Packager)
  [//
   ["[0]" archive (.only Output)
    ["[0]" artifact]
    ["[0]" unit]
    ["[0]" module
     ["[0]" descriptor]]]
   ["[0]" cache "_"
    [dependency
     ["[1]/[0]" module]
     ["[1]/[0]" artifact]]]
   ["[0]" io "_"
    ["[1]" archive]]
   [//
    [language
     ["$" lux]]]]])

(def: (write_module necessary_dependencies sequence [module_id output] so_far)
  (All (_ directive)
    (-> (Set unit.ID) (-> directive directive directive) [module.ID Output] directive
        (Try directive)))
  (|> output
      sequence.list
      (list.all (function (_ [artifact_id custom content])
                  (if (set.member? necessary_dependencies [module_id artifact_id])
                    {.#Some content}
                    {.#None})))
      (monad.mix try.monad
                 (function (_ content so_far)
                   (|> content
                       (# utf8.codec decoded)
                       (# try.monad each
                          (|>> as_expected
                               (sharing [directive]
                                        directive
                                        so_far
                                        
                                        directive)
                               (sequence so_far)))))
                 so_far)))

(def: .public (package header code sequence scope)
  (All (_ directive)
    (-> directive
        (-> directive Text)
        (-> directive directive directive)
        (-> directive directive)
        Packager))
  (function (package host_dependencies archive program)
    (do [! try.monad]
      [.let [necessary_dependencies (cache/artifact.necessary_dependencies archive)]
       order (cache/module.load_order $.key archive)]
      (|> order
          (list#each (function (_ [module [module_id entry]])
                       [module_id (the archive.#output entry)]))
          (monad.mix ! (..write_module necessary_dependencies sequence) header)
          (# ! each (|>> scope
                         code
                         (# utf8.codec encoded)
                         {.#Left}))))))
