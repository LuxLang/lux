(.module:
  [library
   [lux "*"
    [type {"+" [:sharing]}]
    [abstract
     ["." monad {"+" [Monad do]}]]
    [control
     ["." try {"+" [Try]}]]
    [data
     [binary {"+" [Binary]}]
     ["." product]
     [text
      ["%" format {"+" [format]}]
      [encoding 
       ["." utf8]]]
     [collection
      ["." row]
      ["." list ("#\." functor)]]]]]
  [program
   [compositor
    ["." static {"+" [Static]}]]]
  ["." // {"+" [Packager]}
   [//
    ["." archive {"+" [Output]}
     ["." descriptor]
     ["." artifact]]
    [cache
     ["." dependency]]
    ["." io "_"
     ["#" archive]]
    [//
     [language
      ["$" lux
       [generation {"+" [Context]}]]]]]])

(def: (write_module sequence [module output] so_far)
  (All (_ directive)
    (-> (-> directive directive directive) [archive.ID Output] directive
        (Try directive)))
  (|> output
      row.list
      (list\each (|>> product.right product.right))
      (monad.mix try.monad
                 (function (_ content so_far)
                   (|> content
                       (\ utf8.codec decoded)
                       (\ try.monad each
                          (|>> :expected
                               (:sharing [directive]
                                         directive
                                         so_far
                                         
                                         directive)
                               (sequence so_far)))))
                 so_far)))

(def: .public (package header code sequence scope)
  (All (_ directive)
    (-> directive
        (-> directive Text)
        (-> directive directive directive)
        (-> directive directive)
        Packager))
  (function (package host_dependencies archive program)
    (do {! try.monad}
      [order (dependency.load_order $.key archive)]
      (|> order
          (list\each (function (_ [module [module_id [descriptor document output]]])
                       [module_id output]))
          (monad.mix ! (..write_module sequence) header)
          (\ ! each (|>> scope code (\ utf8.codec encoded)))))))
