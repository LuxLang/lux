(.module:
  [library
   [lux "*"
    [type {"+" [:sharing]}]
    [abstract
     ["[0]" monad {"+" [Monad do]}]]
    [control
     ["[0]" try {"+" [Try]}]]
    [data
     [binary {"+" [Binary]}]
     ["[0]" product]
     [text
      ["%" format {"+" [format]}]
      [encoding 
       ["[0]" utf8]]]
     [collection
      ["[0]" row]
      ["[0]" list ("[1]#[0]" functor)]]]]]
  [program
   [compositor
    ["[0]" static {"+" [Static]}]]]
  ["[0]" // {"+" [Packager]}
   [//
    ["[0]" archive {"+" [Output]}
     ["[0]" descriptor]
     ["[0]" artifact]]
    [cache
     ["[0]" dependency]]
    ["[0]" io "_"
     ["[1]" archive]]
    [//
     [language
      ["$" lux
       [generation {"+" [Context]}]]]]]])

(def: (write_module sequence [module output] so_far)
  (All (_ directive)
    (-> (-> directive directive directive) [archive.ID Output] directive
        (Try directive)))
  (|> output
      row.list
      (list#each (|>> product.right product.right))
      (monad.mix try.monad
                 (function (_ content so_far)
                   (|> content
                       (# utf8.codec decoded)
                       (# try.monad each
                          (|>> :expected
                               (:sharing [directive]
                                         directive
                                         so_far
                                         
                                         directive)
                               (sequence so_far)))))
                 so_far)))

(def: .public (package header code sequence scope)
  (All (_ directive)
    (-> directive
        (-> directive Text)
        (-> directive directive directive)
        (-> directive directive)
        Packager))
  (function (package host_dependencies archive program)
    (do [! try.monad]
      [order (dependency.load_order $.key archive)]
      (|> order
          (list#each (function (_ [module [module_id [descriptor document output]]])
                       [module_id output]))
          (monad.mix ! (..write_module sequence) header)
          (# ! each (|>> scope code (# utf8.codec encoded)))))))
