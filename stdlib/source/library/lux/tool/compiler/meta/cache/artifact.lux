(.using
 [library
  [lux (.full)
   [target (.only Target)]
   [control
    [try (.only Try)]
    [concurrency
     ["[0]" async (.only Async)]]]
   [data
    [binary (.only Binary)]
    [text
     ["%" format (.only format)]]]
   [world
    ["[0]" file]]]]
 ["[0]" // "_"
  ["[1][0]" module]
  [//
   ["[0]" context (.only Context)]
   [archive
    ["[0]" module]
    ["[0]" artifact]]]])

(def: .public (path fs context @module @artifact)
  (All (_ !)
    (-> (file.System !) Context module.ID artifact.ID file.Path))
  (format (//module.path fs context @module)
          (# fs separator)
          (%.nat @artifact)
          (the context.#artifact_extension context)))

(def: .public (cache fs context @module @artifact)
  (All (_ !)
    (-> (file.System !) Context module.ID artifact.ID (! (Try Binary))))
  (# fs read (..path fs context @module @artifact)))

(def: .public (cache! fs context @module @artifact content)
  (All (_ !)
    (-> (file.System !) Context module.ID artifact.ID Binary (! (Try Any))))
  (# fs write (..path fs context @module @artifact) content))
