(.using
 [library
  [lux "*"
   ["@" target {"+" Target}]
   [abstract
    ["[0]" monad {"+" Monad do}]]
   [control
    ["[0]" try {"+" Try}]
    [concurrency
     ["[0]" async {"+" Async} ("[1]#[0]" monad)]]
    ["<>" parser
     ["<[0]>" binary {"+" Parser}]]]
   [data
    [binary {"+" Binary}]
    ["[0]" product]
    ["[0]" text ("[1]#[0]" equivalence)
     ["%" format {"+" format}]]
    [collection
     [set {"+" Set}]
     ["[0]" list ("[1]#[0]" mix)]
     ["[0]" dictionary {"+" Dictionary}]
     ["[0]" sequence {"+" Sequence}]]]
   [macro
    ["^" pattern]]
   [meta
    ["[0]" configuration {"+" Configuration}]
    ["[0]" version]]
   [world
    ["[0]" file]]]]
 ["[0]" //
  ["[1][0]" context]
  ["/[1]" //
   [import {"+" Import}]
   ["[0]" context {"+" Context}]
   ["[0]" archive {"+" Output Archive}
    [key {"+" Key}]
    ["[0]" registry {"+" Registry}]
    ["[0]" unit]
    ["[0]" artifact {"+" Artifact}
     ["[0]" category {"+" Category}]]
    ["[0]" module
     ["[0]" descriptor {"+" Descriptor}]
     ["[0]" document {"+" Document}]]]
   ["[0]" cache
    ["[1]/[0]" archive]
    ["[1]/[0]" module]
    ["[1]/[0]" purge {"+" Cache Purge}]
    ["[0]" dependency "_"
     ["[1]" module]]]
   [// {"+" Custom}
    [language
     ["$" lux
      ["[0]" analysis]
      ["[0]" synthesis]
      ["[0]" generation]
      ["[0]" directive]
      ["[1]/[0]" program]]]]]])

(def: (module_parser key parser)
  (All (_ document)
    (-> (Key document) (Parser document) (Parser (module.Module document))))
  ($_ <>.and
      <binary>.nat
      descriptor.parser
      (document.parser key parser)))

(def: (parser key parser)
  (All (_ document)
    (-> (Key document) (Parser document) (Parser [(module.Module document) Registry])))
  ($_ <>.and
      (..module_parser key parser)
      registry.parser))

(def: (fresh_analysis_state host configuration)
  (-> Target Configuration .Lux)
  (analysis.state (analysis.info version.latest host configuration)))

(def: (analysis_state host configuration archive)
  (-> Target Configuration Archive (Try .Lux))
  (do [! try.monad]
    [modules (is (Try (List [descriptor.Module .Module]))
                 (monad.each ! (function (_ module)
                                 (do !
                                   [entry (archive.find module archive)
                                    content (|> entry
                                                (the [archive.#module module.#document])
                                                (document.content $.key))]
                                   (in [module content])))
                             (archive.archived archive)))]
    (in (has .#modules modules (fresh_analysis_state host configuration)))))

(type: Definitions (Dictionary Text Any))
(type: Analysers (Dictionary Text analysis.Handler))
(type: Synthesizers (Dictionary Text synthesis.Handler))
(type: Generators (Dictionary Text generation.Handler))
(type: Directives (Dictionary Text directive.Handler))

(type: Bundles
  [Analysers
   Synthesizers
   Generators
   Directives])

(def: empty_bundles
  Bundles
  [(dictionary.empty text.hash)
   (dictionary.empty text.hash)
   (dictionary.empty text.hash)
   (dictionary.empty text.hash)])

(def: (loaded_document extension host @module expected actual document)
  (All (_ expression directive)
    (-> Text (generation.Host expression directive) module.ID (Sequence [Artifact (Set unit.ID)]) (Dictionary Text Binary) (Document .Module)
        (Try [(Document .Module) Bundles Output])))
  (do [! try.monad]
    [[definitions bundles] (is (Try [Definitions Bundles Output])
                               (loop (again [input (sequence.list expected)
                                             definitions (is Definitions
                                                             (dictionary.empty text.hash))
                                             bundles ..empty_bundles
                                             output (is Output sequence.empty)])
                                 (let [[analysers synthesizers generators directives] bundles]
                                   (case input
                                     {.#Item [[[@artifact artifact_category mandatory_artifact?] artifact_dependencies] input']}
                                     (case (do !
                                             [data (try.of_maybe (dictionary.value (format (%.nat @artifact) extension) actual))
                                              .let [context [@module @artifact]
                                                    directive (# host ingest context data)]]
                                             (case artifact_category
                                               {category.#Anonymous}
                                               (do !
                                                 [.let [output (sequence.suffix [@artifact {.#None} data] output)]
                                                  _ (# host re_learn context {.#None} directive)]
                                                 (in [definitions
                                                      [analysers
                                                       synthesizers
                                                       generators
                                                       directives]
                                                      output]))
                                               
                                               {category.#Definition [name function_artifact]}
                                               (let [output (sequence.suffix [@artifact {.#None} data] output)]
                                                 (if (text#= $/program.name name)
                                                   (in [definitions
                                                        [analysers
                                                         synthesizers
                                                         generators
                                                         directives]
                                                        output])
                                                   (do !
                                                     [value (# host re_load context {.#None} directive)]
                                                     (in [(dictionary.has name value definitions)
                                                          [analysers
                                                           synthesizers
                                                           generators
                                                           directives]
                                                          output]))))

                                               {category.#Analyser extension}
                                               (do !
                                                 [.let [output (sequence.suffix [@artifact {.#None} data] output)]
                                                  value (# host re_load context {.#None} directive)]
                                                 (in [definitions
                                                      [(dictionary.has extension (as analysis.Handler value) analysers)
                                                       synthesizers
                                                       generators
                                                       directives]
                                                      output]))

                                               {category.#Synthesizer extension}
                                               (do !
                                                 [.let [output (sequence.suffix [@artifact {.#None} data] output)]
                                                  value (# host re_load context {.#None} directive)]
                                                 (in [definitions
                                                      [analysers
                                                       (dictionary.has extension (as synthesis.Handler value) synthesizers)
                                                       generators
                                                       directives]
                                                      output]))

                                               {category.#Generator extension}
                                               (do !
                                                 [.let [output (sequence.suffix [@artifact {.#None} data] output)]
                                                  value (# host re_load context {.#None} directive)]
                                                 (in [definitions
                                                      [analysers
                                                       synthesizers
                                                       (dictionary.has extension (as generation.Handler value) generators)
                                                       directives]
                                                      output]))

                                               {category.#Directive extension}
                                               (do !
                                                 [.let [output (sequence.suffix [@artifact {.#None} data] output)]
                                                  value (# host re_load context {.#None} directive)]
                                                 (in [definitions
                                                      [analysers
                                                       synthesizers
                                                       generators
                                                       (dictionary.has extension (as directive.Handler value) directives)]
                                                      output]))

                                               {category.#Custom name}
                                               (do !
                                                 [.let [output (sequence.suffix [@artifact {.#Some name} data] output)]
                                                  _ (# host re_learn context {.#Some name} directive)]
                                                 (in [definitions
                                                      [analysers
                                                       synthesizers
                                                       generators
                                                       directives]
                                                      output]))))
                                       {try.#Success [definitions' bundles' output']}
                                       (again input' definitions' bundles' output')

                                       failure
                                       failure)
                                     
                                     {.#End}
                                     {try.#Success [definitions bundles output]}))))
     content (document.content $.key document)
     definitions (monad.each ! (function (_ [def_name def_global])
                                 (case def_global
                                   (^.template [<tag>]
                                     [{<tag> payload}
                                      (in [def_name {<tag> payload}])])
                                   ([.#Alias]
                                    [.#Tag]
                                    [.#Slot])
                                   
                                   {.#Definition [exported? type _]}
                                   (|> definitions
                                       (dictionary.value def_name)
                                       try.of_maybe
                                       (# ! each (|>> [exported? type]
                                                      {.#Definition}
                                                      [def_name])))

                                   {.#Type [exported? _ labels]}
                                   (|> definitions
                                       (dictionary.value def_name)
                                       try.of_maybe
                                       (# ! each (function (_ def_value)
                                                   [def_name {.#Type [exported? (as .Type def_value) labels]}])))))
                             (the .#definitions content))]
    (in [(document.document $.key (has .#definitions definitions content))
         bundles])))

(def: (load_definitions fs context @module host_environment entry)
  (All (_ expression directive)
    (-> (file.System Async) Context module.ID (generation.Host expression directive)
        (archive.Entry .Module)
        (Async (Try [(archive.Entry .Module) Bundles]))))
  (do (try.with async.monad)
    [actual (is (Async (Try (Dictionary Text Binary)))
                (cache/module.artifacts async.monad fs context @module))
     .let [expected (registry.artifacts (the archive.#registry entry))]
     [document bundles output] (|> (the [archive.#module module.#document] entry)
                                   (loaded_document (the context.#artifact_extension context) host_environment @module expected actual)
                                   async#in)]
    (in [(|> entry
             (has [archive.#module module.#document] document)
             (has archive.#output output))
         bundles])))

(def: pseudo_module
  Text
  "(Lux Caching System)")

(def: (cache_parser customs)
  (-> (List Custom) (Parser [(module.Module Any) Registry]))
  (case (for @.old (as (List (Custom Any Any Any))
                       customs)
             customs)
    {.#End}
    (..parser $.key $.parser)
    
    {.#Item [custom_state custom_key custom_format custom_parser custom_compiler] tail}
    ($_ <>.either
        (..parser custom_key custom_parser)
        (cache_parser tail)
        )))

(def: (valid_cache customs fs context import contexts [module_name @module])
  (-> (List Custom) (file.System Async) Context Import (List //.Context)
      [descriptor.Module module.ID]
      (Async (Try Cache)))
  (with_expansions [<cache> (these module_name @module module registry)]
    (do [! (try.with async.monad)]
      [data (is (Async (Try Binary))
                (cache/module.cache fs context @module))
       [module registry] (async#in (<binary>.result (..cache_parser customs) data))]
      (if (text#= descriptor.runtime module_name)
        (in [true <cache>])
        (do !
          [input (//context.read fs ..pseudo_module import contexts (the context.#host_module_extension context) module_name)]
          (in [(cache/purge.valid? (the module.#descriptor module) input) <cache>]))))))

(def: (pre_loaded_caches customs fs context import contexts archive)
  (-> (List Custom) (file.System Async) Context Import (List //.Context) Archive
      (Async (Try (List Cache))))
  (do [! (try.with async.monad)]
    [... TODO: Stop needing to wrap this expression in an unnecessary "do" expression.
     it (|> archive
            archive.reservations
            (monad.each ! (..valid_cache customs fs context import contexts)))]
    (in it)))

(def: (load_order archive pre_loaded_caches)
  (-> Archive (List Cache)
      (Try (dependency.Order .Module)))
  (|> pre_loaded_caches
      (monad.mix try.monad
                 (function (_ [_ [module @module |module| registry]] archive)
                   (archive.has module
                                [archive.#module |module|
                                 archive.#output (is Output sequence.empty)
                                 archive.#registry registry]
                                archive))
                 archive)
      (# try.monad each (dependency.load_order $.key))
      (# try.monad conjoint)))

(def: (loaded_caches host_environment fs context purge load_order)
  (All (_ expression directive)
    (-> (generation.Host expression directive) (file.System Async) Context
        Purge (dependency.Order .Module)
        (Async (Try (List [[descriptor.Module (archive.Entry .Module)] Bundles])))))
  (do [! (try.with async.monad)]
    [... TODO: Stop needing to wrap this expression in an unnecessary "do" expression.
     it (|> load_order
            (list.only (|>> product.left (dictionary.key? purge) not))
            (monad.each ! (function (_ [module_name [@module entry]])
                            (do !
                              [[entry bundles] (..load_definitions fs context @module host_environment entry)]
                              (in [[module_name entry]
                                   bundles])))))]
    (in it)))

(def: (load_every_reserved_module customs configuration host_environment fs context import contexts archive)
  (All (_ expression directive)
    (-> (List Custom) Configuration (generation.Host expression directive) (file.System Async) Context Import (List //.Context) Archive
        (Async (Try [Archive .Lux Bundles]))))
  (do [! (try.with async.monad)]
    [pre_loaded_caches (..pre_loaded_caches customs fs context import contexts archive)
     load_order (async#in (load_order archive pre_loaded_caches))
     .let [purge (cache/purge.purge pre_loaded_caches load_order)]
     _ (|> purge
           dictionary.entries
           (monad.each ! (|>> product.right (cache/purge.purge! fs context))))
     loaded_caches (..loaded_caches host_environment fs context purge load_order)]
    (async#in
     (do [! try.monad]
       [archive (monad.mix !
                           (function (_ [[module entry] _bundle] archive)
                             (archive.has module entry archive))
                           archive
                           loaded_caches)
        analysis_state (..analysis_state (the context.#host context) configuration archive)]
       (in [archive
            analysis_state
            (list#mix (function (_ [_ [+analysers +synthesizers +generators +directives]]
                                   [analysers synthesizers generators directives])
                        [(dictionary.merged +analysers analysers)
                         (dictionary.merged +synthesizers synthesizers)
                         (dictionary.merged +generators generators)
                         (dictionary.merged +directives directives)])
                      ..empty_bundles
                      loaded_caches)])))))

(def: .public (thaw customs configuration host_environment fs context import contexts)
  (All (_ expression directive)
    (-> (List Custom) Configuration (generation.Host expression directive) (file.System Async) Context Import (List //.Context)
        (Async (Try [Archive .Lux Bundles]))))
  (do async.monad
    [binary (# fs read (cache/archive.descriptor fs context))]
    (case binary
      {try.#Success binary}
      (do (try.with async.monad)
        [archive (async#in (archive.import ///.version binary))]
        (..load_every_reserved_module customs configuration host_environment fs context import contexts archive))
      
      {try.#Failure error}
      (in {try.#Success [archive.empty
                         (fresh_analysis_state (the context.#host context) configuration)
                         ..empty_bundles]}))))
