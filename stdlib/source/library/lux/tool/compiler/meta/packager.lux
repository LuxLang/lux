(.using
 [library
  [lux "*"
   [control
    [try {"+" Try}]]
   [data
    [binary {"+" Binary}]
    ["[0]" product]
    [collection
     [dictionary {"+" Dictionary}]
     ["[0]" sequence]
     ["[0]" list ("[1]#[0]" functor)]]]
   [world
    ["[0]" file]]]]
 [//
  ["[0]" cache "_"
   ["[1]/[0]" module]]
  ["[0]" archive {"+" Archive}
   ["[0]" descriptor]
   ["[0]" artifact]
   ["[0]" registry]]
  [//
   [language
    [lux
     [generation {"+" Context}]]]]])

(type: .public Packager
  (-> (Dictionary file.Path Binary)
      Archive
      Context
      (Try (Either Binary
                   (List [Text Binary])))))

(type: .public Order
  (List [archive.ID (List artifact.ID)]))

(def: .public order
  (-> cache/module.Order Order)
  (list#each (function (_ [module [module_id [descriptor document]]])
               (|> descriptor
                   (value@ descriptor.#registry)
                   registry.artifacts
                   sequence.list
                   (list#each (|>> product.left (value@ artifact.#id)))
                   [module_id]))))
