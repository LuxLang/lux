(.module:
  [library
   [lux #*
    [control
     [try (#+ Try)]]
    [data
     [binary (#+ Binary)]
     [collection
      [dictionary (#+ Dictionary)]
      ["." row]
      ["." list ("#\." functor)]]]
    [world
     ["." file]]]]
  [//
   [cache
    ["." dependency]]
   ["." archive (#+ Archive)
    ["." descriptor]
    ["." artifact]]
   [//
    [language
     [lux
      [generation (#+ Context)]]]]])

(type: .public Packager
  (-> (Dictionary file.Path Binary)
      Archive
      Context
      (Try Binary)))

(type: .public Order
  (List [archive.ID (List artifact.ID)]))

(def: .public order
  (-> dependency.Order Order)
  (list\map (function (_ [module [module_id [descriptor document]]])
              (|> descriptor
                  (value@ #descriptor.registry)
                  artifact.artifacts
                  row.list
                  (list\map (|>> (value@ #artifact.id)))
                  [module_id]))))
