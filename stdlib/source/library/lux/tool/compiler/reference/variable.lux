(.module:
  [library
   [lux #*
    [abstract
     [equivalence (#+ Equivalence)]
     [hash (#+ Hash)]]
    [control
     [pipe (#+ case>)]]
    [data
     [text
      ["%" format (#+ Format)]]]
    [math
     [number
      ["n" nat]
      ["i" int]]]]])

(type: #export Register
  Nat)

(type: #export Variable
  (#Local Register)
  (#Foreign Register))

(implementation: #export equivalence
  (Equivalence Variable)
  
  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag>]
        [[(<tag> reference') (<tag> sample')]
         (n.= reference' sample')])
      ([#Local] [#Foreign])

      _
      #0)))

(implementation: #export hash
  (Hash Variable)
  
  (def: &equivalence
    ..equivalence)
  
  (def: hash
    (|>> (case> (^template [<factor> <tag>]
                  [(<tag> register)
                   ($_ n.* <factor>
                       (\ n.hash hash register))])
                ([2 #Local]
                 [3 #Foreign])))))

(template: #export (self)
  (#..Local 0))

(def: #export self?
  (-> Variable Bit)
  (|>> (case> (^ (..self))
              true

              _
              false)))

(def: #export format
  (Format Variable)
  (|>> (case> (#Local local)
              (%.format "+" (%.nat local))
              
              (#Foreign foreign)
              (%.format "-" (%.nat foreign)))))
