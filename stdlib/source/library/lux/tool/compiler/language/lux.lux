(.module:
  [library
   [lux "*"
    [control
     ["<>" parser
      ["<b>" binary {"+" [Parser]}]]]
    [data
     [format
      ["_" binary {"+" [Writer]}]]]]]
  ["." / "_"
   ["#." version]
   [phase
    [analysis
     ["." module]]]
   [///
    [meta
     [archive
      ["." signature]
      ["." key {"+" [Key]}]]]]])

... TODO: Remove #module_hash, #imports & #module_state ASAP.
... TODO: Not just from this parser, but from the lux.Module type.
(def: .public writer
  (Writer .Module)
  (let [definition (: (Writer Definition)
                      ($_ _.and _.bit _.type _.code _.any))
        labels (: (Writer [Text (List Text)])
                  (_.and _.text (_.list _.text)))
        global_type (: (Writer [Bit Type (Either [Text (List Text)]
                                                 [Text (List Text)])])
                       ($_ _.and _.bit _.type (_.or labels labels)))
        global_label (: (Writer .Label)
                        ($_ _.and _.bit _.type (_.list _.text) _.nat))
        name (: (Writer Name)
                (_.and _.text _.text))
        alias (: (Writer Alias)
                 (_.and _.text _.text))
        global (: (Writer Global)
                  ($_ _.or
                      definition
                      global_type
                      global_label
                      global_label
                      alias))]
    ($_ _.and
        ... #module_hash
        _.nat
        ... #module_aliases
        (_.list alias)
        ... #definitions
        (_.list (_.and _.text global))
        ... #imports
        (_.list _.text)
        ... #module_annotations
        (_.maybe _.code)
        ... #module_state
        _.any)))

(def: .public parser
  (Parser .Module)
  (let [definition (: (Parser Definition)
                      ($_ <>.and <b>.bit <b>.type <b>.code <b>.any))
        labels (: (Parser [Text (List Text)])
                  (<>.and <b>.text (<b>.list <b>.text)))
        global_type (: (Parser [Bit Type (Either [Text (List Text)]
                                                 [Text (List Text)])])
                       ($_ <>.and <b>.bit <b>.type (<b>.or labels labels)))
        global_label (: (Parser .Label)
                        ($_ <>.and <b>.bit <b>.type (<b>.list <b>.text) <b>.nat))
        name (: (Parser Name)
                (<>.and <b>.text <b>.text))
        alias (: (Parser Alias)
                 (<>.and <b>.text <b>.text))
        global (: (Parser Global)
                  ($_ <b>.or
                      definition
                      global_type
                      global_label
                      global_label
                      alias))]
    ($_ <>.and
        ... #module_hash
        <b>.nat
        ... #module_aliases
        (<b>.list alias)
        ... #definitions
        (<b>.list (<>.and <b>.text global))
        ... #imports
        (<b>.list <b>.text)
        ... #module_annotations
        (<b>.maybe <b>.code)
        ... #module_state
        (\ <>.monad in #.Cached))))

(def: .public key
  (Key .Module)
  (key.key [#signature.name (name_of ..compiler)
            #signature.version /version.version]
           (module.empty 0)))
