(.require
 [library
  [lux (.except)
   [control
    ["<>" parser]]
   [data
    ["[0]" binary
     ["_" \\format (.only Format)]
     ["<[1]>" \\parser (.only Parser)]]]
   [meta
    ["[0]" version]]]]
 ["[0]" /
  [analysis
   ["[0]" module]]
  [///
   [meta
    [archive
     ["[0]" signature]
     ["[0]" key (.only Key)]]]]])

... TODO: Remove #module_hash, #imports & #module_state ASAP.
... TODO: Not just from this parser, but from the lux.Module type.
(def .public format
  (Format .Module)
  (let [definition (is (Format Definition)
                       (all _.and _.bit _.type _.any))
        labels (is (Format [Text (List Text)])
                   (_.and _.text (_.list _.text)))
        global_type (is (Format [Bit Type (Either [Text (List Text)]
                                                  [Text (List Text)])])
                        (all _.and _.bit _.type (_.or labels labels)))
        global_label (is (Format .Label)
                         (all _.and _.bit _.type (_.list _.text) _.nat))
        alias (is (Format Alias)
                  (_.and _.text _.text))
        global (is (Format Global)
                   (all _.or
                        definition
                        global_type
                        global_label
                        global_label
                        alias))]
    (all _.and
         ... #module_hash
         _.nat
         ... #module_aliases
         (_.list alias)
         ... #definitions
         (_.list (_.and _.text global))
         ... #imports
         (_.list _.text)
         ... #module_state
         _.any)))

(def .public parser
  (Parser .Module)
  (let [definition (is (Parser Definition)
                       (all <>.and
                            <binary>.bit
                            <binary>.type
                            <binary>.any))
        labels (is (Parser [Text (List Text)])
                   (all <>.and
                        <binary>.text
                        (<binary>.list <binary>.text)))
        global_type (is (Parser [Bit Type (Either [Text (List Text)]
                                                  [Text (List Text)])])
                        (all <>.and
                             <binary>.bit
                             <binary>.type
                             (<binary>.or labels labels)))
        global_label (is (Parser .Label)
                         (all <>.and
                              <binary>.bit
                              <binary>.type
                              (<binary>.list <binary>.text)
                              <binary>.nat))
        alias (is (Parser Alias)
                  (all <>.and
                       <binary>.text
                       <binary>.text))
        global (is (Parser Global)
                   (all <binary>.or
                        definition
                        global_type
                        global_label
                        global_label
                        alias))]
    (all <>.and
         ... #module_hash
         <binary>.nat
         ... #module_aliases
         (<binary>.list alias)
         ... #definitions
         (<binary>.list (<>.and <binary>.text global))
         ... #imports
         (<binary>.list <binary>.text)
         ... #module_state
         (at <>.monad in {.#Cached}))))

(def .public key
  (Key .Module)
  (key.key [signature.#name (symbol ..compiler)
            signature.#version version.latest]
           (module.empty 0)))
