(.using
 [library
  [lux "*"
   [control
    ["<>" parser
     ["<[0]>" binary {"+" Parser}]]]
   [data
    [format
     ["_" binary {"+" Writer}]]]
   [meta
    ["[0]" version]]]]
 ["[0]" / "_"
  [analysis
   ["[0]" module]]
  [///
   [meta
    [archive
     ["[0]" signature]
     ["[0]" key {"+" Key}]]]]])

... TODO: Remove #module_hash, #imports & #module_state ASAP.
... TODO: Not just from this parser, but from the lux.Module type.
(def: .public writer
  (Writer .Module)
  (let [definition (is (Writer Definition)
                       ($_ _.and _.bit _.type _.any))
        labels (is (Writer [Text (List Text)])
                   (_.and _.text (_.list _.text)))
        global_type (is (Writer [Bit Type (Either [Text (List Text)]
                                                  [Text (List Text)])])
                        ($_ _.and _.bit _.type (_.or labels labels)))
        global_label (is (Writer .Label)
                         ($_ _.and _.bit _.type (_.list _.text) _.nat))
        alias (is (Writer Alias)
                  (_.and _.text _.text))
        global (is (Writer Global)
                   ($_ _.or
                       definition
                       global_type
                       global_label
                       global_label
                       alias))]
    ($_ _.and
        ... #module_hash
        _.nat
        ... #module_aliases
        (_.list alias)
        ... #definitions
        (_.list (_.and _.text global))
        ... #imports
        (_.list _.text)
        ... #module_state
        _.any)))

(def: .public parser
  (Parser .Module)
  (let [definition (is (Parser Definition)
                       ($_ <>.and
                           <binary>.bit
                           <binary>.type
                           <binary>.any))
        labels (is (Parser [Text (List Text)])
                   ($_ <>.and
                       <binary>.text
                       (<binary>.list <binary>.text)))
        global_type (is (Parser [Bit Type (Either [Text (List Text)]
                                                  [Text (List Text)])])
                        ($_ <>.and
                            <binary>.bit
                            <binary>.type
                            (<binary>.or labels labels)))
        global_label (is (Parser .Label)
                         ($_ <>.and
                             <binary>.bit
                             <binary>.type
                             (<binary>.list <binary>.text)
                             <binary>.nat))
        alias (is (Parser Alias)
                  ($_ <>.and
                      <binary>.text
                      <binary>.text))
        global (is (Parser Global)
                   ($_ <binary>.or
                       definition
                       global_type
                       global_label
                       global_label
                       alias))]
    ($_ <>.and
        ... #module_hash
        <binary>.nat
        ... #module_aliases
        (<binary>.list alias)
        ... #definitions
        (<binary>.list (<>.and <binary>.text global))
        ... #imports
        (<binary>.list <binary>.text)
        ... #module_state
        (# <>.monad in {.#Cached}))))

(def: .public key
  (Key .Module)
  (key.key [signature.#name (symbol ..compiler)
            signature.#version version.latest]
           (module.empty 0)))
