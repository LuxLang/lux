(.module:
  [library
   [lux #*
    [abstract
     ["." monad (#+ do)]]
    [control
     ["." function]
     ["." try]
     ["<>" parser
      ["<s>" synthesis (#+ Parser)]]]
    [data
     ["." product]
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." dictionary]
      ["." set]
      ["." list ("#\." functor fold)]]]
    [math
     [number
      ["f" frac]]]
    ["@" target
     ["_" php (#+ Expression)]]]]
  ["." //// #_
   ["/" bundle]
   ["/#" // #_
    ["." extension]
    [generation
     [extension (#+ Nullary Unary Binary Trinary
                    nullary unary binary trinary)]
     ["." reference]
     ["//" php #_
      ["#." runtime (#+ Operation Phase Handler Bundle Generator)]
      ["#." case]]]
    [//
     ["." synthesis (#+ %synthesis)]
     ["." generation]
     [///
      ["#" phase]]]]])

(def: #export (custom [parser handler])
  (All [s]
    (-> [(Parser s)
         (-> Text (Generator s))]
        Handler))
  (function (_ extension_name phase archive input)
    (case (<s>.run parser input)
      (#try.Success input')
      (handler extension_name phase archive input')

      (#try.Failure error)
      (/////.throw extension.invalid_syntax [extension_name %synthesis input]))))

(template: (!unary function)
  (|>> list _.apply/* (|> (_.constant function))))

## TODO: Get rid of this ASAP
(def: lux::syntax_char_case!
  (..custom [($_ <>.and
                 <s>.any
                 <s>.any
                 (<>.some (<s>.tuple ($_ <>.and
                                         (<s>.tuple (<>.many <s>.i64))
                                         <s>.any))))
             (function (_ extension_name phase archive [input else conditionals])
               (do {! /////.monad}
                 [inputG (phase archive input)
                  [[context_module context_artifact] elseG] (generation.with_new_context archive
                                                              (phase archive else))
                  @input (\ ! map _.var (generation.gensym "input"))
                  conditionalsG (: (Operation (List [Expression Expression]))
                                   (monad.map ! (function (_ [chars branch])
                                                  (do !
                                                    [branchG (phase archive branch)]
                                                    (wrap [(|> chars
                                                               (list\map (|>> .int _.int (_.=== @input)))
                                                               (list\fold (function (_ clause total)
                                                                            (if (is? _.null total)
                                                                              clause
                                                                              (_.or clause total)))
                                                                          _.null))
                                                           branchG])))
                                              conditionals))
                  #let [foreigns (|> conditionals
                                     (list\map (|>> product.right synthesis.path/then //case.dependencies))
                                     (list& (//case.dependencies (synthesis.path/then else)))
                                     list.concat
                                     (set.from_list _.hash)
                                     set.to_list)
                        @expression (_.constant (reference.artifact [context_module context_artifact]))
                        directive (_.define_function @expression (list& (_.parameter @input) (list\map _.reference foreigns))
                                                     (list\fold (function (_ [test then] else)
                                                                  (_.if test (_.return then) else))
                                                                (_.return elseG)
                                                                conditionalsG))]
                  _ (generation.execute! directive)
                  _ (generation.save! context_artifact directive)]
                 (wrap (_.apply/* (list& inputG foreigns) @expression))))]))

(def: lux_procs
  Bundle
  (|> /.empty
      (/.install "syntax char case!" lux::syntax_char_case!)
      (/.install "is" (binary (product.uncurry _.===)))
      (/.install "try" (unary //runtime.lux//try))
      ))

(def: (left_shift [parameter subject])
  (Binary Expression)
  (_.bit_shl (_.% (_.int +64) parameter) subject))

(def: i64_procs
  Bundle
  (<| (/.prefix "i64")
      (|> /.empty
          (/.install "and" (binary (product.uncurry _.bit_and)))
          (/.install "or" (binary (product.uncurry _.bit_or)))
          (/.install "xor" (binary (product.uncurry _.bit_xor)))
          (/.install "left-shift" (binary ..left_shift))
          (/.install "right-shift" (binary (product.uncurry //runtime.i64//right_shift)))
          (/.install "=" (binary (product.uncurry _.==)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "+" (binary (product.uncurry //runtime.i64//+)))
          (/.install "-" (binary (product.uncurry //runtime.i64//-)))
          (/.install "*" (binary (product.uncurry //runtime.i64//*)))
          (/.install "/" (binary (function (_ [parameter subject])
                                   (_.intdiv/2 [subject parameter]))))
          (/.install "%" (binary (product.uncurry _.%)))
          (/.install "f64" (unary (_./ (_.float +1.0))))
          (/.install "char" (unary //runtime.i64//char))
          )))

(def: (f64//% [parameter subject])
  (Binary Expression)
  (_.fmod/2 [subject parameter]))

(def: (f64//encode subject)
  (Unary Expression)
  (_.number_format/2 [subject (_.int +17)]))

(def: f64_procs
  Bundle
  (<| (/.prefix "f64")
      (|> /.empty
          (/.install "=" (binary (product.uncurry _.==)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "+" (binary (product.uncurry _.+)))
          (/.install "-" (binary (product.uncurry _.-)))
          (/.install "*" (binary (product.uncurry _.*)))
          (/.install "/" (binary (product.uncurry _./)))
          (/.install "%" (binary ..f64//%))
          (/.install "i64" (unary _.intval/1))
          (/.install "encode" (unary ..f64//encode))
          (/.install "decode" (unary //runtime.f64//decode)))))

(def: (text//clip [paramO extraO subjectO])
  (Trinary Expression)
  (//runtime.text//clip paramO extraO subjectO))

(def: (text//index [startO partO textO])
  (Trinary Expression)
  (//runtime.text//index textO partO startO))

(def: text_procs
  Bundle
  (<| (/.prefix "text")
      (|> /.empty
          (/.install "=" (binary (product.uncurry _.==)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "concat" (binary (product.uncurry (function.flip _.concat))))
          (/.install "index" (trinary ..text//index))
          (/.install "size" (unary //runtime.text//size))
          (/.install "char" (binary (product.uncurry //runtime.text//char)))
          (/.install "clip" (trinary ..text//clip))
          )))

(def: io_procs
  Bundle
  (<| (/.prefix "io")
      (|> /.empty
          (/.install "log" (unary //runtime.io//log!))
          (/.install "error" (unary //runtime.io//throw!)))))

(def: #export bundle
  Bundle
  (<| (/.prefix "lux")
      (|> /.empty
          (dictionary.merge lux_procs)
          (dictionary.merge i64_procs)
          (dictionary.merge f64_procs)
          (dictionary.merge text_procs)
          (dictionary.merge io_procs))))
