(.module:
  [library
   [lux (#- Type)
    [abstract
     ["." monad]]
    [data
     [number
      ["n" nat]]
     [collection
      ["." list ("#\." functor)]
      ["." row]]]
    [target
     [jvm
      ["." field (#+ Field)]
      ["_" bytecode (#+ Label Bytecode) ("#\." monad)]
      [type (#+ Type)
       [category (#+ Class)]]
      [constant
       [pool (#+ Resource)]]]]]]
  ["." / #_
   ["#." count]
   ["/#" //
    ["/#" // #_
     [constant
      ["#." arity]]
     ["//#" /// #_
      ["#." reference]
      [//////
       ["." arity (#+ Arity)]
       [reference
        [variable (#+ Register)]]]]]]])

(def: #export (initial amount)
  (-> Nat (Bytecode Any))
  ($_ _.compose
      (|> _.aconst_null
          (list.repeat amount)
          (monad.seq _.monad))
      (_\in [])))

(def: #export (get class register)
  (-> (Type Class) Register (Bytecode Any))
  (//.get class (/////reference.partial_name register)))

(def: #export (put class register value)
  (-> (Type Class) Register (Bytecode Any) (Bytecode Any))
  (//.put /////reference.partial_name class register value))

(def: #export variables
  (-> Arity (List (Resource Field)))
  (|>> (n.- ///arity.minimum) (//.variables /////reference.partial_name)))

(def: #export (new arity)
  (-> Arity (Bytecode Any))
  (if (arity.multiary? arity)
    ($_ _.compose
        /count.initial
        (initial (n.- ///arity.minimum arity)))
    (_\in [])))
