(.using
 [library
  [lux (.except case let if)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" exception (.only exception:)]]
   [data
    ["[0]" text (.only)
     ["%" format (.only format)]]
    [collection
     ["[0]" list (.open: "[1]#[0]" functor mix monoid)]
     ["[0]" set]]]
   [macro
    ["^" pattern]]
   [math
    [number
     ["n" nat]]]
   [target
    ["_" common_lisp (.only Expression Var/1)]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Generator)]
  ["[1][0]" reference]
  ["[1][0]" primitive]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    ["[1][0]" synthesis
     ["[1]/[0]" case]]
    ["/[1]" //
     ["[1][0]" synthesis (.only Member Synthesis Path)]
     ["[1][0]" generation]
     ["//[1]" ///
      [reference
       ["[1][0]" variable (.only Register)]]
      ["[1][0]" phase (.open: "[1]#[0]" monad)]
      [meta
       [archive (.only Archive)]]]]]]])

(def: .public register
  (-> Register Var/1)
  (|>> (///reference.local //reference.system) as_expected))

(def: .public capture
  (-> Register Var/1)
  (|>> (///reference.foreign //reference.system) as_expected))

(def: .public (let expression archive [valueS register bodyS])
  (Generator [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueG (expression archive valueS)
     bodyG (expression archive bodyS)]
    (in (_.let (list [(..register register) valueG])
          (list bodyG)))))

(def: .public (if expression archive [testS thenS elseS])
  (Generator [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [testG (expression archive testS)
     thenG (expression archive thenS)
     elseG (expression archive elseS)]
    (in (_.if testG thenG elseG))))

(def: .public (get expression archive [pathP valueS])
  (Generator [(List Member) Synthesis])
  (do ///////phase.monad
    [valueG (expression archive valueS)]
    (in (list#mix (function (_ side source)
                    (.let [method (.case side
                                    (^.with_template [<side> <accessor>]
                                      [(<side> lefts)
                                       (<accessor> (_.int (.int lefts)))])
                                    ([.#Left //runtime.tuple//left]
                                     [.#Right //runtime.tuple//right]))]
                      (method source)))
                  valueG
                  pathP))))

(def: @savepoint (_.var "lux_pm_savepoint"))
(def: @cursor (_.var "lux_pm_cursor"))
(def: @temp (_.var "lux_pm_temp"))
(def: @variant (_.var "lux_pm_variant"))

(def: (push! value)
  (-> (Expression Any) (Expression Any))
  (_.setq @cursor (_.cons/2 [value @cursor])))

(def: pop!
  (Expression Any)
  (_.setq @cursor (_.cdr/1 @cursor)))

(def: peek
  (Expression Any)
  (_.car/1 @cursor))

(def: save!
  (Expression Any)
  (_.setq @savepoint (_.cons/2 [@cursor @savepoint])))

(def: restore!
  (List (Expression Any))
  (list (_.setq @cursor (_.car/1 @savepoint))
        (_.setq @savepoint (_.cdr/1 @savepoint))))

(def: (multi_pop! pops)
  (-> Nat (Expression Any))
  (_.setq @cursor (_.nthcdr/2 [(_.int (.int pops)) @cursor])))

(with_template [<name> <flag> <prep>]
  [(def: (<name> @fail simple? idx next!)
     (-> _.Tag Bit Nat (Maybe (Expression Any)) (Expression Any))
     (.let [<failure_condition> (_.eq/2 [@variant @temp])]
       (_.let (list [@variant ..peek])
         (list.partial (_.setq @temp (|> idx <prep> .int _.int (//runtime.sum//get @variant <flag>)))
                       (.if simple?
                         (_.when <failure_condition>
                                 (_.go @fail))
                         (_.if <failure_condition>
                           (_.go @fail)
                           (..push! @temp)))
                       (.case next!
                         {.#Some next!}
                         (list next!)
                         
                         {.#None}
                         (list))))))]

  [left_choice  _.nil         (<|)]
  [right_choice (_.string "") ++]
  )

(def: (alternation @otherwise pre! post!)
  (-> _.Tag (Expression Any) (Expression Any) (Expression Any))
  (_.tagbody (all list#composite
                  (list ..save!
                        pre!
                        @otherwise)
                  ..restore!
                  (list post!))))

(def: (pattern_matching' expression archive)
  (Generator [Var/1 _.Tag _.Tag Path])
  (function (again [$output @done @fail pathP])
    (.case pathP
      (pattern (/////synthesis.path/then bodyS))
      (at ///////phase.monad each
          (function (_ outputV)
            (_.progn (list (_.setq $output outputV)
                           (_.go @done))))
          (expression archive bodyS))

      {/////synthesis.#Pop}
      (///////phase#in ..pop!)

      {/////synthesis.#Bind register}
      (///////phase#in (_.setq (..register register) ..peek))

      {/////synthesis.#Bit_Fork when thenP elseP}
      (do [! ///////phase.monad]
        [then! (again [$output @done @fail thenP])
         else! (.case elseP
                 {.#Some elseP}
                 (again [$output @done @fail elseP])

                 {.#None}
                 (in (_.go @fail)))]
        (in (.if when
              (_.if ..peek
                then!
                else!)
              (_.if ..peek
                else!
                then!))))

      (^.with_template [<tag> <format> <=>]
        [{<tag> item}
         (do [! ///////phase.monad]
           [clauses (monad.each ! (function (_ [match then])
                                    (do !
                                      [then! (again [$output @done @fail then])]
                                      (in [(<=> [(|> match <format>)
                                                 ..peek])
                                           then!])))
                                {.#Item item})]
           (in (list#mix (function (_ [when then] else)
                           (_.if when then else))
                         (_.go @fail)
                         clauses)))])
      ([/////synthesis.#I64_Fork //primitive.i64 _.=/2]
       [/////synthesis.#F64_Fork //primitive.f64 _.=/2]
       [/////synthesis.#Text_Fork //primitive.text _.string=/2])

      (^.with_template [<complex> <simple> <choice>]
        [(pattern (<complex> idx))
         (///////phase#in (<choice> @fail false idx {.#None}))

         (pattern (<simple> idx nextP))
         (|> nextP
             [$output @done @fail] again
             (at ///////phase.monad each (|>> {.#Some} (<choice> @fail true idx))))])
      ([/////synthesis.side/left  /////synthesis.simple_left_side  ..left_choice]
       [/////synthesis.side/right /////synthesis.simple_right_side ..right_choice])

      (pattern (/////synthesis.member/left 0))
      (///////phase#in (..push! (_.elt/2 [..peek (_.int +0)])))
      
      (^.with_template [<pm> <getter>]
        [(pattern (<pm> lefts))
         (///////phase#in (|> ..peek (<getter> (_.int (.int lefts))) ..push!))])
      ([/////synthesis.member/left  //runtime.tuple//left]
       [/////synthesis.member/right //runtime.tuple//right])

      (pattern (/////synthesis.!multi_pop nextP))
      (.let [[extra_pops nextP'] (////synthesis/case.count_pops nextP)]
        (do ///////phase.monad
          [next! (again [$output @done @fail nextP'])]
          (///////phase#in (_.progn (list (..multi_pop! (n.+ 2 extra_pops))
                                          next!)))))

      (pattern (/////synthesis.path/alt preP postP))
      (do [! ///////phase.monad]
        [@otherwise (at ! each (|>> %.nat (format "lux_case_otherwise") _.tag) /////generation.next)
         pre! (again [$output @done @otherwise preP])
         post! (again [$output @done @fail postP])]
        (in (..alternation @otherwise pre! post!)))

      (pattern (/////synthesis.path/seq preP postP))
      (do ///////phase.monad
        [pre! (again [$output @done @fail preP])
         post! (again [$output @done @fail postP])]
        (in (_.progn (list pre! post!)))))))

(def: (pattern_matching $output expression archive pathP)
  (-> Var/1 (Generator Path))
  (do [! ///////phase.monad]
    [@done (at ! each (|>> %.nat (format "lux_case_done") _.tag) /////generation.next)
     @fail (at ! each (|>> %.nat (format "lux_case_fail") _.tag) /////generation.next)
     pattern_matching! (pattern_matching' expression archive [$output @done @fail pathP])]
    (in (_.tagbody
         (list pattern_matching!
               @fail
               (_.error/1 (_.string ////synthesis/case.pattern_matching_error))
               @done)))))

(def: .public (case expression archive [valueS pathP])
  (Generator [Synthesis Path])
  (do [! ///////phase.monad]
    [initG (expression archive valueS)
     $output (at ! each (|>> %.nat (format "lux_case_output") _.var) /////generation.next)
     pattern_matching! (pattern_matching $output expression archive pathP)
     .let [storage (|> pathP
                       ////synthesis/case.storage
                       (the ////synthesis/case.#bindings)
                       set.list
                       (list#each (function (_ register)
                                    [(..register register)
                                     _.nil])))]]
    (in (_.let (list.partial [@cursor (_.list/* (list initG))]
                             [@savepoint (_.list/* (list))]
                             [@temp _.nil]
                             [$output _.nil]
                             storage)
          (list pattern_matching!
                $output)))))
