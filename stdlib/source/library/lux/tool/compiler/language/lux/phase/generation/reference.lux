(.using
 [library
  [lux {"-" local}
   ["@" target]
   [data
    [text
     ["%" format (.only format)]]]
   [meta
    ["[0]" version]]]]
 ["[0]" //// "_"
  ["[1][0]" generation]
  ["//[1]" /// "_"
   ["[0]" phase ("[1]#[0]" monad)]
   ["[0]" reference (.only Reference)
    ["[0]" variable (.only Register Variable)]]
   [meta
    [archive (.only Archive)
     ["[0]" unit]]]]])

... This universe constant is for languages where one can't just turn all compiled definitions
... into the local variables of some scoping function.
(def: .public universe
  (for @.lua
       ... In the case of Lua, there is a limit of 200 locals in a function's scope.
       (not ("lua script universe"))

       @.ruby
       ... Cannot make all definitions be local variables because of limitations with JRuby.
       (not ("ruby script universe"))

       @.php
       ... Cannot make all definitions be local variables because of limitations with PHP itself.
       (not ("php script universe"))

       @.scheme
       ... Cannot make all definitions be local variables because of limitations with Kawa.
       (not ("scheme script universe"))
       #0))

(def: universe_label
  Text
  (with_expansions [<label> (format "u" (%.nat (if ..universe 1 0)))]
    (for @.lua <label>
         @.ruby <label>
         @.php <label>
         @.scheme <label>
         "")))

(def: .public (artifact [module artifact])
  (-> unit.ID Text)
  (format "l" (%.nat version.latest)
          ..universe_label
          "m" (%.nat module)
          "a" (%.nat artifact)))

(type: .public (System expression)
  (Interface
   (is (-> Text expression)
       constant')
   (is (-> Text expression)
       variable')))

(def: .public (constant system archive name)
  (All (_ anchor expression directive)
    (-> (System expression) Archive Symbol
        (////generation.Operation anchor expression directive expression)))
  (phase#each (|>> ..artifact (# system constant'))
              (////generation.remember archive name)))

(template [<sigil> <name>]
  [(def: .public (<name> system)
     (All (_ expression)
       (-> (System expression)
           (-> Register expression)))
     (|>> %.nat (format <sigil>) (# system variable')))]

  ["f" foreign]
  ["l" local]
  )

(def: .public (variable system variable)
  (All (_ expression)
    (-> (System expression) Variable expression))
  (case variable
    {variable.#Local register}
    (..local system register)
    
    {variable.#Foreign register}
    (..foreign system register)))

(def: .public (reference system archive reference)
  (All (_ anchor expression directive)
    (-> (System expression) Archive Reference (////generation.Operation anchor expression directive expression)))
  (case reference
    {reference.#Constant value}
    (..constant system archive value)
    
    {reference.#Variable value}
    (phase#in (..variable system value))))
