(.using
 [library
  [lux "*"
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" maybe ("[1]#[0]" monad)]]
   [data
    [collection
     ["[0]" list]]]
   [macro
    ["^" pattern]]
   [math
    [number
     ["n" nat]]]]]
 [////
  ["[0]" analysis (.only Environment)
   ["[1]/[0]" complex]]
  ["/" synthesis (.only Path Abstraction Synthesis)]
  [///
   [arity (.only Arity)]
   ["[0]" reference
    ["[0]" variable (.only Register Variable)]]]])

(type: .public (Transform a)
  (-> a (Maybe a)))

(def: .public (register_optimization offset)
  (-> Register (-> Register Register))
  (|>> -- (n.+ offset)))

(def: (path_optimization body_optimization offset)
  (-> (Transform Synthesis) Register (Transform Path))
  (function (again path)
    (case path
      {/.#Bind register}
      {.#Some {/.#Bind (register_optimization offset register)}}

      (^.template [<tag>]
        [{<tag> left right}
         (do maybe.monad
           [left' (again left)
            right' (again right)]
           (in {<tag> left' right'}))])
      ([/.#Alt] [/.#Seq])

      {/.#Bit_Fork when then else}
      (do [! maybe.monad]
        [then (again then)
         else (case else
                {.#Some else}
                (# ! each (|>> {.#Some}) (again else))

                {.#None}
                (in {.#None}))]
        (in {/.#Bit_Fork when then else}))
      
      (^.template [<tag>]
        [{<tag> [[test then] elses]}
         (do [! maybe.monad]
           [then (again then)
            elses (monad.each ! (function (_ [else_test else_then])
                                  (do !
                                    [else_then (again else_then)]
                                    (in [else_test else_then])))
                              elses)]
           (in {<tag> [[test then] elses]}))])
      ([/.#I64_Fork]
       [/.#F64_Fork]
       [/.#Text_Fork])
      
      {/.#Then body}
      (|> body
          body_optimization
          (maybe#each (|>> {/.#Then})))

      _
      {.#Some path})))

(def: (body_optimization true_loop? offset scope_environment arity expr)
  (-> Bit Register (Environment Synthesis) Arity (Transform Synthesis))
  (loop (again [return? true
                expr expr])
    (case expr
      {/.#Simple _}
      {.#Some expr}

      {/.#Structure structure}
      (case structure
        {analysis/complex.#Variant variant}
        (do maybe.monad
          [value' (|> variant (the analysis/complex.#value) (again false))]
          (in (|> variant
                  (has analysis/complex.#value value')
                  /.variant)))
        
        {analysis/complex.#Tuple tuple}
        (|> tuple
            (monad.each maybe.monad (again false))
            (maybe#each (|>> /.tuple))))

      {/.#Reference reference}
      (case reference
        (pattern {reference.#Variable (variable.self)})
        (if true_loop?
          {.#None}
          {.#Some expr})
        
        (pattern (reference.constant constant))
        {.#Some expr}

        (pattern (reference.local register))
        {.#Some {/.#Reference (reference.local (register_optimization offset register))}}

        (pattern (reference.foreign register))
        (if true_loop?
          (list.item register scope_environment)
          {.#Some expr}))

      (pattern (/.branch/case [input path]))
      (do maybe.monad
        [input' (again false input)
         path' (path_optimization (again return?) offset path)]
        (in (|> path' [input'] /.branch/case)))

      (pattern (/.branch/exec [this that]))
      (do maybe.monad
        [this (again false this)
         that (again return? that)]
        (in (/.branch/exec [this that])))

      (pattern (/.branch/let [input register body]))
      (do maybe.monad
        [input' (again false input)
         body' (again return? body)]
        (in (/.branch/let [input' (register_optimization offset register) body'])))

      (pattern (/.branch/if [input then else]))
      (do maybe.monad
        [input' (again false input)
         then' (again return? then)
         else' (again return? else)]
        (in (/.branch/if [input' then' else'])))

      (pattern (/.branch/get [path record]))
      (do maybe.monad
        [record (again false record)]
        (in (/.branch/get [path record])))

      (pattern (/.loop/scope scope))
      (do [! maybe.monad]
        [inits' (|> scope
                    (the /.#inits)
                    (monad.each ! (again false)))
         iteration' (again return? (the /.#iteration scope))]
        (in (/.loop/scope [/.#start (|> scope (the /.#start) (register_optimization offset))
                           /.#inits inits'
                           /.#iteration iteration'])))

      (pattern (/.loop/again args))
      (|> args
          (monad.each maybe.monad (again false))
          (maybe#each (|>> /.loop/again)))

      (pattern (/.function/abstraction [environment arity body]))
      (do [! maybe.monad]
        [environment' (monad.each ! (again false) environment)]
        (in (/.function/abstraction [environment' arity body])))
      
      (pattern (/.function/apply [abstraction arguments]))
      (do [! maybe.monad]
        [arguments' (monad.each ! (again false) arguments)]
        (with_expansions [<application> (these (do !
                                                 [abstraction' (again false abstraction)]
                                                 (in (/.function/apply [abstraction' arguments']))))]
          (case abstraction
            (pattern {/.#Reference {reference.#Variable (variable.self)}})
            (if (and return?
                     (n.= arity (list.size arguments)))
              (in (/.loop/again arguments'))
              (if true_loop?
                {.#None}
                <application>))
            
            _
            <application>)))

      ... TODO: Stop relying on this custom code.
      (pattern {/.#Extension ["lux syntax char case!" (partial_list input else matches)]})
      (if return?
        (do [! maybe.monad]
          [input (again false input)
           matches (monad.each !
                               (function (_ match)
                                 (case match
                                   (pattern {/.#Structure {analysis/complex.#Tuple (list when then)}})
                                   (do !
                                     [when (again false when)
                                      then (again return? then)]
                                     (in {/.#Structure {analysis/complex.#Tuple (list when then)}}))

                                   _
                                   (again false match)))
                               matches)
           else (again return? else)]
          (in {/.#Extension ["lux syntax char case!" (partial_list input else matches)]}))
        {.#None})

      {/.#Extension [name args]}
      (|> args
          (monad.each maybe.monad (again false))
          (maybe#each (|>> [name] {/.#Extension}))))))

(def: .public (optimization true_loop? offset inits functionS)
  (-> Bit Register (List Synthesis) Abstraction (Maybe [Register (List Synthesis) Synthesis]))
  (|> (the /.#body functionS)
      (body_optimization true_loop? offset (the /.#environment functionS) (the /.#arity functionS))
      (maybe#each (|>> [offset inits]))))
