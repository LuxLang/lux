(.using
 [library
  [lux {"-" Type Label type}
   [data
    [collection
     ["[0]" list]]]
   [math
    [number
     ["n" nat]]]
   [target
    [jvm
     ["[0]" modifier {"+" Modifier} ("[1]#[0]" monoid)]
     ["[0]" method {"+" Method}]
     ["_" bytecode {"+" Label Bytecode}]
     [constant
      [pool {"+" Resource}]]
     ["[0]" type {"+" Type}
      ["[0]" category {"+" Class}]]]]]]
 ["[0]" //
  ["//[1]" /// "_"
   ["[0]" runtime]
   ["[1][0]" type]
   [//////
    [arity {"+" Arity}]
    [meta
     [archive
      ["[0]" unit]]]]]])

(def: .public name "impl")

(def: .public (type :it: arity)
  (-> (Type Class) Arity (Type category.Method))
  (type.method [(list)
                (list& :it: (list.repeated arity ////type.value))
                ////type.value
                (list)]))

(def: modifier
  ($_ modifier#composite
      method.static
      //.modifier
      ))

(def: .public (method :it: arity @begin body)
  (-> (Type Class) Arity Label (Bytecode Any) (Resource Method))
  (method.method ..modifier
                 ..name
                 #0 (..type :it: arity)
                 (list)
                 {.#Some ($_ _.composite
                             (_.set_label @begin)
                             body
                             (_.when_continuous _.areturn)
                             )}))

(def: .public (call :it: arity)
  (-> (Type Class) Arity (Bytecode Any))
  (_.invokestatic :it: ..name (..type :it: arity)))
