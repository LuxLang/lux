(.module:
  [library
   [lux "*"
    [abstract
     [monad {"+" [do]}]]]]
  ["[0]" / "_"
   [runtime {"+" [Phase]}]
   ["[1][0]" primitive]
   ["[1][0]" structure]
   ["[1][0]" reference]
   ["[1][0]" function]
   ["[1][0]" case]
   ["[1][0]" loop]
   ["//[1]" /// "_"
    ["[1][0]" extension]
    [//
     ["[0]" synthesis]
     [///
      ["[0]" reference]
      ["[1]" phase ("[1]\[0]" monad)]]]]])

(def: .public (generate archive synthesis)
  Phase
  (case synthesis
    (^template [<tag> <generator>]
      [(^ (<tag> value))
       (///\in (<generator> value))])
    ([synthesis.bit  /primitive.bit]
     [synthesis.i64  /primitive.i64]
     [synthesis.f64  /primitive.f64]
     [synthesis.text /primitive.text])

    (^ (synthesis.variant variantS))
    (/structure.variant generate archive variantS)

    (^ (synthesis.tuple members))
    (/structure.tuple generate archive members)

    (#synthesis.Reference reference)
    (case reference
      (#reference.Variable variable)
      (/reference.variable archive variable)
      
      (#reference.Constant constant)
      (/reference.constant archive constant))

    (^ (synthesis.branch/case [valueS pathS]))
    (/case.case generate archive [valueS pathS])

    (^ (synthesis.branch/let [inputS register bodyS]))
    (/case.let generate archive [inputS register bodyS])

    (^ (synthesis.branch/if [conditionS thenS elseS]))
    (/case.if generate archive [conditionS thenS elseS])

    (^ (synthesis.branch/get [path recordS]))
    (/case.get generate archive [path recordS])

    (^ (synthesis.loop/scope scope))
    (/loop.scope generate archive scope)

    (^ (synthesis.loop/recur updates))
    (/loop.recur generate archive updates)

    (^ (synthesis.function/abstraction abstraction))
    (/function.abstraction generate archive abstraction)

    (^ (synthesis.function/apply application))
    (/function.apply generate archive application)

    (#synthesis.Extension extension)
    (///extension.apply archive generate extension)
    ))
