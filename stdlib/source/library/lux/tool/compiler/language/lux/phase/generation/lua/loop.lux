(.require
 [library
  [lux (.except Label Scope)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    [text
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" set]]]
   [math
    [number
     ["n" nat]]]
   [meta
    [target
     ["_" lua (.only Var Expression Label Statement)]]]]]
 ["[0]" //
  [runtime (.only Operation Phase Phase! Generator Generator!)]
  ["[1][0]" case]
  ["/[1]" //
   ["[1][0]" reference]
   ["//[1]" ///
    ["[0]"synthesis (.only Scope Synthesis)]
    ["[1][0]" generation]
    ["//[1]" ///
     ["[1][0]" phase]
     [meta
      [archive (.only Archive)]
      ["[0]" cache
       [dependency
        ["[1]" artifact]]]]
     [reference
      [variable (.only Register)]]]]]])

(def @scope
  (-> Nat Label)
  (|>> %.nat (format "scope") _.label))

(def (setup initial? offset bindings as_expression? body)
  (-> Bit Register (List Expression) Bit Statement Statement)
  (let [variables (|> bindings
                      list.enumeration
                      (list#each (|>> product.left (n.+ offset) //case.register)))]
    (if as_expression?
      body
      (all _.then
           (if initial?
             (_.let variables (_.multi bindings))
             (_.set variables (_.multi bindings)))
           body))))

(def .public (scope! statement expression archive as_expression? [start initsS+ bodyS])
  ... (Generator! (Scope Synthesis))
  (-> Phase! Phase Archive Bit (Scope Synthesis)
      (Operation [(List Expression) Statement]))
  (case initsS+
    ... function/false/non-independent loop
    {.#End}
    (|> bodyS
        (statement expression archive)
        (at ///////phase.monad each (|>> [(list)])))

    ... true loop
    _
    (do [! ///////phase.monad]
      [@scope (at ! each ..@scope /////generation.next)
       initsO+ (monad.each ! (expression archive) initsS+)
       body! (/////generation.with_anchor [start @scope]
               (statement expression archive bodyS))]
      (in [initsO+
           (..setup true start initsO+ as_expression?
                    (all _.then
                         (_.set_label @scope)
                         body!))]))))

(def .public (scope statement expression archive [start initsS+ bodyS])
  (-> Phase! (Generator (Scope Synthesis)))
  (case initsS+
    ... function/false/non-independent loop
    {.#End}
    (expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [dependencies (cache.dependencies archive bodyS)
       [[artifact_module artifact_id] [initsO+ scope!]] (/////generation.with_new_context archive dependencies
                                                          (scope! statement expression archive true [start initsS+ bodyS]))
       .let [@loop (_.var (///reference.artifact [artifact_module artifact_id]))
             locals (|> initsO+
                        list.enumeration
                        (list#each (|>> product.left (n.+ start) //case.register)))
             [declaration instantiation] (is [Statement Expression]
                                             (case (|> (synthesis.path/then bodyS)
                                                       //case.dependencies
                                                       (set.of_list _.hash)
                                                       (set.difference (set.of_list _.hash locals))
                                                       set.list)
                                               {.#End}
                                               [(_.function @loop locals
                                                  scope!)
                                                @loop]

                                               foreigns
                                               (let [@context (_.var (format (_.code @loop) "_context"))]
                                                 [(_.function @context foreigns
                                                    (all _.then
                                                         (<| (_.local_function @loop locals)
                                                             scope!)
                                                         (_.return @loop)
                                                         ))
                                                  (_.apply foreigns @context)])))]
       _ (/////generation.execute! declaration)
       _ (/////generation.save! artifact_id {.#None} declaration)]
      (in (_.apply initsO+ instantiation)))))

(def .public (again! statement expression archive argsS+)
  (Generator! (List Synthesis))
  (do [! ///////phase.monad]
    [[offset @scope] /////generation.anchor
     argsO+ (monad.each ! (expression archive) argsS+)]
    (in (..setup false offset argsO+ false (_.go_to @scope)))))
