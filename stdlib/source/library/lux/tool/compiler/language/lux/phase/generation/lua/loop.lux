(.module:
  [library
   [lux (#- Scope)
    [abstract
     ["." monad (#+ do)]]
    [data
     ["." product]
     [text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor)]
      ["." set]]]
    [math
     [number
      ["n" nat]]]
    [target
     ["_" lua (#+ Var Expression Label Statement)]]]]
  ["." // #_
   [runtime (#+ Operation Phase Phase! Generator Generator!)]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["//#" /// #_
     ["."synthesis (#+ Scope Synthesis)]
     ["#." generation]
     ["//#" /// #_
      ["#." phase]
      [meta
       [archive (#+ Archive)]]
      [reference
       [variable (#+ Register)]]]]]])

(def: @scope
  (-> Nat Label)
  (|>> %.nat (format "scope") _.label))

(def: (setup initial? offset bindings as_expression? body)
  (-> Bit Register (List Expression) Bit Statement Statement)
  (let [variables (|> bindings
                      list.enumeration
                      (list\map (|>> product.left (n.+ offset) //case.register)))]
    (if as_expression?
      body
      ($_ _.then
          (if initial?
            (_.let variables (_.multi bindings))
            (_.set variables (_.multi bindings)))
          body))))

(def: #export (scope! statement expression archive as_expression? [start initsS+ bodyS])
  ## (Generator! (Scope Synthesis))
  (-> Phase! Phase Archive Bit (Scope Synthesis)
      (Operation [(List Expression) Statement]))
  (case initsS+
    ## function/false/non-independent loop
    #.Nil
    (|> bodyS
        (statement expression archive)
        (\ ///////phase.monad map (|>> [(list)])))

    ## true loop
    _
    (do {! ///////phase.monad}
      [@scope (\ ! map ..@scope /////generation.next)
       initsO+ (monad.map ! (expression archive) initsS+)
       body! (/////generation.with_anchor [start @scope]
               (statement expression archive bodyS))]
      (wrap [initsO+
             (..setup true start initsO+ as_expression?
                      ($_ _.then
                          (_.set_label @scope)
                          body!))]))))

(def: #export (scope statement expression archive [start initsS+ bodyS])
  (-> Phase! (Generator (Scope Synthesis)))
  (case initsS+
    ## function/false/non-independent loop
    #.Nil
    (expression archive bodyS)

    ## true loop
    _
    (do {! ///////phase.monad}
      [[[artifact_module artifact_id] [initsO+ scope!]] (/////generation.with_new_context archive
                                                          (scope! statement expression archive true [start initsS+ bodyS]))
       #let [@loop (_.var (///reference.artifact [artifact_module artifact_id]))
             locals (|> initsO+
                        list.enumeration
                        (list\map (|>> product.left (n.+ start) //case.register)))
             [directive instantiation] (: [Statement Expression]
                                          (case (|> (synthesis.path/then bodyS)
                                                    //case.dependencies
                                                    (set.from_list _.hash)
                                                    (set.difference (set.from_list _.hash locals))
                                                    set.to_list)
                                            #.Nil
                                            [(_.function @loop locals
                                               scope!)
                                             @loop]

                                            foreigns
                                            (let [@context (_.var (format (_.code @loop) "_context"))]
                                              [(_.function @context foreigns
                                                 ($_ _.then
                                                     (<| (_.local_function @loop locals)
                                                         scope!)
                                                     (_.return @loop)
                                                     ))
                                               (|> @context (_.apply/* foreigns))])))]
       _ (/////generation.execute! directive)
       _ (/////generation.save! artifact_id #.None directive)]
      (wrap (|> instantiation (_.apply/* initsO+))))))

(def: #export (recur! statement expression archive argsS+)
  (Generator! (List Synthesis))
  (do {! ///////phase.monad}
    [[offset @scope] /////generation.anchor
     argsO+ (monad.map ! (expression archive) argsS+)]
    (wrap (..setup false offset argsO+ false (_.go_to @scope)))))
