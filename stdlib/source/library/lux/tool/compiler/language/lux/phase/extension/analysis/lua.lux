(.using
 [library
  [lux "*"
   ["[0]" ffi]
   [abstract
    ["[0]" monad {"+" do}]]
   [control
    ["<>" parser
     ["<[0]>" code {"+" Parser}]]]
   [data
    [collection
     ["[0]" array {"+" Array}]
     ["[0]" dictionary]
     ["[0]" list]]]
   ["[0]" type
    ["[0]" check]]
   ["@" target
    ["_" lua]]]]
 [//
  ["/" lux {"+" custom}]
  [//
   ["[0]" bundle]
   [///
    ["[0]" analysis {"+" Analysis Operation Phase Handler Bundle}
     ["[1]/[0]" type]]
    [///
     ["[0]" phase]]]]])

(def: Nil
  (for [@.lua ffi.Nil]
       Any))

(def: Object
  (for [@.lua (type (ffi.Object Any))]
       Any))

(def: Function
  (for [@.lua ffi.Function]
       Any))

(def: array::new
  Handler
  (custom
   [<code>.any
    (function (_ extension phase archive lengthC)
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [lengthA (analysis/type.expecting Nat
                                              (phase archive lengthC))
             _ (analysis/type.inference (type (Array :var:)))]
            (in {analysis.#Extension extension (list lengthA)}))))]))

(def: array::length
  Handler
  (custom
   [<code>.any
    (function (_ extension phase archive arrayC)
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [arrayA (analysis/type.expecting (type (Array :var:))
                                             (phase archive arrayC))
             _ (analysis/type.inference Nat)]
            (in {analysis.#Extension extension (list arrayA)}))))]))

(def: array::read
  Handler
  (custom
   [(<>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [indexA (analysis/type.expecting Nat
                                             (phase archive indexC))
             arrayA (analysis/type.expecting (type (Array :var:))
                                             (phase archive arrayC))
             _ (analysis/type.inference :var:)]
            (in {analysis.#Extension extension (list indexA arrayA)}))))]))

(def: array::write
  Handler
  (custom
   [($_ <>.and <code>.any <code>.any <code>.any)
    (function (_ extension phase archive [indexC valueC arrayC])
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [indexA (analysis/type.expecting Nat
                                             (phase archive indexC))
             valueA (analysis/type.expecting :var:
                                             (phase archive valueC))
             arrayA (analysis/type.expecting (type (Array :var:))
                                             (phase archive arrayC))
             _ (analysis/type.inference (type (Array :var:)))]
            (in {analysis.#Extension extension (list indexA valueA arrayA)}))))]))

(def: array::delete
  Handler
  (custom
   [($_ <>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [indexA (analysis/type.expecting Nat
                                             (phase archive indexC))
             arrayA (analysis/type.expecting (type (Array :var:))
                                             (phase archive arrayC))
             _ (analysis/type.inference (type (Array :var:)))]
            (in {analysis.#Extension extension (list indexA arrayA)}))))]))

(def: bundle::array
  Bundle
  (<| (bundle.prefix "array")
      (|> bundle.empty
          (bundle.install "new" array::new)
          (bundle.install "length" array::length)
          (bundle.install "read" array::read)
          (bundle.install "write" array::write)
          (bundle.install "delete" array::delete)
          )))

(def: object::get
  Handler
  (custom
   [($_ <>.and <code>.text <code>.any)
    (function (_ extension phase archive [fieldC objectC])
      (do phase.monad
        [objectA (analysis/type.expecting ..Object
                                          (phase archive objectC))
         _ (analysis/type.inference .Any)]
        (in {analysis.#Extension extension (list (analysis.text fieldC)
                                                 objectA)})))]))

(def: object::do
  Handler
  (custom
   [($_ <>.and <code>.text <code>.any (<code>.tuple (<>.some <code>.any)))
    (function (_ extension phase archive [methodC objectC inputsC])
      (do [! phase.monad]
        [objectA (analysis/type.expecting ..Object
                                          (phase archive objectC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.expecting Any)) inputsC)
         _ (analysis/type.inference .Any)]
        (in {analysis.#Extension extension (list& (analysis.text methodC)
                                                  objectA
                                                  inputsA)})))]))

(def: bundle::object
  Bundle
  (<| (bundle.prefix "object")
      (|> bundle.empty
          (bundle.install "get" object::get)
          (bundle.install "do" object::do)
          (bundle.install "nil" (/.nullary ..Nil))
          (bundle.install "nil?" (/.unary Any Bit))
          )))

(template [<name> <fromT> <toT>]
  [(def: <name>
     Handler
     (custom
      [<code>.any
       (function (_ extension phase archive inputC)
         (do [! phase.monad]
           [inputA (analysis/type.expecting (type <fromT>)
                                            (phase archive inputC))
            _ (analysis/type.inference (type <toT>))]
           (in {analysis.#Extension extension (list inputA)})))]))]

  [utf8::encode Text (array.Array (I64 Any))]
  [utf8::decode (array.Array (I64 Any)) Text]
  )

(def: bundle::utf8
  Bundle
  (<| (bundle.prefix "utf8")
      (|> bundle.empty
          (bundle.install "encode" utf8::encode)
          (bundle.install "decode" utf8::decode)
          )))

(def: lua::constant
  Handler
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.inference Any)]
        (in {analysis.#Extension extension (list (analysis.text name))})))]))

(def: lua::apply
  Handler
  (custom
   [($_ <>.and <code>.any (<code>.tuple (<>.some <code>.any)))
    (function (_ extension phase archive [abstractionC inputsC])
      (do [! phase.monad]
        [abstractionA (analysis/type.expecting ..Function
                                               (phase archive abstractionC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.expecting Any)) inputsC)
         _ (analysis/type.inference Any)]
        (in {analysis.#Extension extension (list& abstractionA inputsA)})))]))

(def: lua::power
  Handler
  (custom
   [($_ <>.and <code>.any <code>.any)
    (function (_ extension phase archive [powerC baseC])
      (do [! phase.monad]
        [powerA (analysis/type.expecting Frac
                                         (phase archive powerC))
         baseA (analysis/type.expecting Frac
                                        (phase archive baseC))
         _ (analysis/type.inference Frac)]
        (in {analysis.#Extension extension (list powerA baseA)})))]))

(def: lua::import
  Handler
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.inference ..Object)]
        (in {analysis.#Extension extension (list (analysis.text name))})))]))

(def: lua::function
  Handler
  (custom
   [($_ <>.and <code>.nat <code>.any)
    (function (_ extension phase archive [arity abstractionC])
      (do phase.monad
        [.let [inputT (type.tuple (list.repeated arity Any))]
         abstractionA (analysis/type.expecting (-> inputT Any)
                                               (phase archive abstractionC))
         _ (analysis/type.inference ..Function)]
        (in {analysis.#Extension extension (list (analysis.nat arity)
                                                 abstractionA)})))]))

(def: .public bundle
  Bundle
  (<| (bundle.prefix "lua")
      (|> bundle.empty
          (dictionary.merged bundle::array)
          (dictionary.merged bundle::object)
          (dictionary.merged bundle::utf8)

          (bundle.install "constant" lua::constant)
          (bundle.install "apply" lua::apply)
          (bundle.install "power" lua::power)
          (bundle.install "import" lua::import)
          (bundle.install "function" lua::function)
          (bundle.install "script universe" (/.nullary .Bit))
          )))
