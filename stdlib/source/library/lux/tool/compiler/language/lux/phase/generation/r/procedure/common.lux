(.module:
  lux
  (lux (control [library
                 [monad {"+" do}]]
                ["ex" exception {"+" exception:}]
                ["p" parser])
       (data ["e" error]
             [text]
             text/format
             [number]
             (coll [list "list/" Functor<List>]
                   (dictionary ["dict" unordered {"+" Dict}])))
       [macro {"+" with_symbols}]
       (macro [code]
              ["s" syntax {"+" syntax:}])
       [host])
  (luxc ["&" lang]
        (lang ["la" analysis]
              ["ls" synthesis]
              (host [r {"+" Expression}])))
  [///]
  (/// ["[0]T" runtime]
       ["[0]T" case]
       ["[0]T" function]
       ["[0]T" loop]))

... [Types]
(type: .public Translator
  (-> ls.Synthesis (Meta Expression)))

(type: .public Proc
  (-> Translator (List ls.Synthesis) (Meta Expression)))

(type: .public Bundle
  (Dict Text Proc))

(syntax: (Vector [size <code>.nat
                  elemT <code>.any])
  (in (list (` [(~+ (list.repeated size elemT))]))))

(type: .public Nullary (-> (Vector +0 Expression) Expression))
(type: .public Unary   (-> (Vector +1 Expression) Expression))
(type: .public Binary  (-> (Vector +2 Expression) Expression))
(type: .public Trinary (-> (Vector +3 Expression) Expression))
(type: .public Variadic (-> (List Expression) Expression))

... [Utils]
(def: .public (install name unnamed)
  (-> Text (-> Text Proc)
      (-> Bundle Bundle))
  (dict.has name (unnamed name)))

(def: .public (prefix prefix bundle)
  (-> Text Bundle Bundle)
  (|> bundle
      dict.entries
      (list/each (function (_ [key val]) [(format prefix " " key) val]))
      (dict.from_list text.Hash<Text>)))

(def: (wrong_arity proc expected actual)
  (-> Text Nat Nat Text)
  (format "Wrong number of arguments for " (%t proc) "\n"
          "Expected: " (|> expected .int %i) "\n"
          "  Actual: " (|> actual .int %i)))

(syntax: (arity: [name s.local_symbol
                  arity s.nat])
  (with_symbols [g!_ g!proc g!name g!translate g!inputs]
    (do [@ macro.monad]
      [g!input+ (monad.all @ (list.repeated arity (macro.symbol "input")))]
      (in (list (` (def: .public ((~ (code.local_symbol name)) (~ g!proc))
                     (-> (-> (..Vector (~ (code.nat arity)) Expression) Expression)
                         (-> Text ..Proc))
                     (function ((~ g!_) (~ g!name))
                       (function ((~ g!_) (~ g!translate) (~ g!inputs))
                         (case (~ g!inputs)
                           (^ (list (~+ g!input+)))
                           (do macro.Monad<Meta>
                             [(~+ (|> g!input+
                                      (list/each (function (_ g!input)
                                                   (list g!input (` ((~ g!translate) (~ g!input))))))
                                      list.together))]
                             ((~' in) ((~ g!proc) [(~+ g!input+)])))

                           (~' _)
                           (macro.failure (wrong_arity (~ g!name) +1 (list.size (~ g!inputs))))))))))))))

(arity: nullary +0)
(arity: unary +1)
(arity: binary +2)
(arity: trinary +3)

(def: .public (variadic proc)
  (-> Variadic (-> Text Proc))
  (function (_ proc_name)
    (function (_ translate inputsS)
      (do [@ macro.Monad<Meta>]
        [inputsI (monad.each @ translate inputsS)]
        (in (proc inputsI))))))

... [Procedures]
... [[Lux]]
(def: (lux//is [leftO rightO])
  Binary
  (r.apply (list leftO rightO)
           (r.global "identical")))

(def: (lux//if [testO thenO elseO])
  Trinary
  (caseT.translate_if testO thenO elseO))

(def: (lux//try riskyO)
  Unary
  (runtimeT.lux//try riskyO))

(exception: .public (Wrong_Syntax [message Text])
  message)

(def: .public (wrong_syntax procedure args)
  (-> Text (List ls.Synthesis) Text)
  (format "Procedure: " procedure "\n"
          "Arguments: " (%code (code.tuple args))))

(def: lux//loop
  (-> Text Proc)
  (function (_ proc_name)
    (function (_ translate inputsS)
      (case (s.result inputsS ($_ p.and s.nat (s.tuple (p.many s.any)) s.any))
        {e.#Success [offset initsS+ bodyS]}
        (loopT.translate_loop translate offset initsS+ bodyS)

        {e.#Error error}
        (&.throw Wrong_Syntax (wrong_syntax proc_name inputsS)))
      )))

(def: lux//again
  (-> Text Proc)
  (function (_ proc_name)
    (function (_ translate inputsS)
      (loopT.translate_again translate inputsS))))

(def: lux_procs
  Bundle
  (|> (dict.empty text.Hash<Text>)
      (install "is" (binary lux//is))
      (install "try" (unary lux//try))
      (install "if" (trinary lux//if))
      (install "loop" lux//loop)
      (install "again" lux//again)
      ))

... [[Bits]]
(template [<name> <op>]
  [(def: (<name> [subjectO paramO])
     Binary
     (<op> paramO subjectO))]
  
  [bit//and runtimeT.bit//and]
  [bit//or  runtimeT.bit//or]
  [bit//xor runtimeT.bit//xor]
  )

(template [<name> <op>]
  [(def: (<name> [subjectO paramO])
     Binary
     (<op> (runtimeT.int64_low paramO) subjectO))]

  [bit//left_shifted             runtimeT.bit//left_shifted]
  [bit//arithmetic_right_shifted runtimeT.bit//arithmetic_right_shifted]
  [bit//logical_right_shifted    runtimeT.bit//logical_right_shifted]
  )

(def: bit_procs
  Bundle
  (<| (prefix "bit")
      (|> (dict.empty text.Hash<Text>)
          (install "and" (binary bit//and))
          (install "or" (binary bit//or))
          (install "xor" (binary bit//xor))
          (install "left-shift" (binary bit//left_shifted))
          (install "logical-right-shift" (binary bit//logical_right_shifted))
          (install "arithmetic-right-shift" (binary bit//arithmetic_right_shifted))
          )))

... [[Numbers]]
(host.import: java/lang/Double
  ("static" MIN_VALUE Double)
  ("static" MAX_VALUE Double))

(template [<name> <const> <encode>]
  [(def: (<name> _)
     Nullary
     (<encode> <const>))]

  [frac//smallest Double::MIN_VALUE            r.float]
  [frac//min      (f/* -1.0 Double::MAX_VALUE) r.float]
  [frac//max      Double::MAX_VALUE            r.float]
  )

(template [<name> <op>]
  [(def: (<name> [subjectO paramO])
     Binary
     (|> subjectO (<op> paramO)))]

  [int//add        runtimeT.int//+]
  [int//sub        runtimeT.int//-]
  [int//mul        runtimeT.int//*]
  [int//div        runtimeT.int///]
  [int//rem        runtimeT.int//%]
  )

(template [<name> <op>]
  [(def: (<name> [subjectO paramO])
     Binary
     (<op> paramO subjectO))]

  [frac//add r.+]
  [frac//sub r.-]
  [frac//mul r.*]
  [frac//div r./]
  [frac//rem r.%%]
  [frac//=   r.=]
  [frac//<   r.<]

  [text//=   r.=]
  [text//<   r.<]
  )

(template [<name> <cmp>]
  [(def: (<name> [subjectO paramO])
     Binary
     (<cmp> paramO subjectO))]

  [int//= runtimeT.int//=]
  [int//< runtimeT.int//<]
  )

(def: (apply1 func)
  (-> Expression (-> Expression Expression))
  (function (_ value)
    (r.apply (list value) func)))

(def: int//char (|>> runtimeT.int64_low (apply1 (r.global "intToUtf8"))))

(def: int_procs
  Bundle
  (<| (prefix "int")
      (|> (dict.empty text.Hash<Text>)
          (install "+" (binary int//add))
          (install "-" (binary int//sub))
          (install "*" (binary int//mul))
          (install "/" (binary int//div))
          (install "%" (binary int//rem))
          (install "=" (binary int//=))
          (install "<" (binary int//<))
          (install "to-frac" (unary runtimeT.int//float))
          (install "char" (unary int//char)))))

(def: (frac//encode value)
  (-> Expression Expression)
  (r.apply (list (r.string "%f") value) (r.global "sprintf")))

(def: frac_procs
  Bundle
  (<| (prefix "frac")
      (|> (dict.empty text.Hash<Text>)
          (install "+" (binary frac//add))
          (install "-" (binary frac//sub))
          (install "*" (binary frac//mul))
          (install "/" (binary frac//div))
          (install "%" (binary frac//rem))
          (install "=" (binary frac//=))
          (install "<" (binary frac//<))
          (install "smallest" (nullary frac//smallest))
          (install "min" (nullary frac//min))
          (install "max" (nullary frac//max))
          (install "to-int" (unary (apply1 (r.global "as.integer"))))
          (install "encode" (unary frac//encode))
          (install "decode" (unary runtimeT.frac//decode)))))

... [[Text]]
(def: (text//concat [subjectO paramO])
  Binary
  (r.apply (list subjectO paramO) (r.global "paste0")))

(def: (text//char [subjectO paramO])
  Binary
  (runtimeT.text//char subjectO paramO))

(def: (text//clip [subjectO paramO extraO])
  Trinary
  (runtimeT.text//clip subjectO paramO extraO))

(def: (text//index [textO partO startO])
  Trinary
  (runtimeT.text//index textO partO startO))

(def: text_procs
  Bundle
  (<| (prefix "text")
      (|> (dict.empty text.Hash<Text>)
          (install "=" (binary text//=))
          (install "<" (binary text//<))
          (install "concat" (binary text//concat))
          (install "index" (trinary text//index))
          (install "size" (unary (|>> (apply1 (r.global "nchar")) runtimeT.int//from_float)))
          (install "char" (binary text//char))
          (install "clip" (trinary text//clip))
          )))

... [[IO]]
(def: (io//exit input)
  Unary
  (r.apply_kw (list)
              (list ["status" (runtimeT.int//float input)])
              (r.global "quit")))

(def: (void code)
  (-> Expression Expression)
  (r.block (r.then code runtimeT.unit)))

(def: io_procs
  Bundle
  (<| (prefix "io")
      (|> (dict.empty text.Hash<Text>)
          (install "log" (unary (|>> r.print ..void)))
          (install "error" (unary r.stop))
          (install "exit" (unary io//exit))
          (install "current-time" (nullary (function (_ _)
                                             (runtimeT.io//current_time! runtimeT.unit)))))))

... [Bundles]
(def: .public procedures
  Bundle
  (<| (prefix "lux")
      (|> lux_procs
          (dict.merged bit_procs)
          (dict.merged int_procs)
          (dict.merged frac_procs)
          (dict.merged text_procs)
          (dict.merged io_procs)
          )))
