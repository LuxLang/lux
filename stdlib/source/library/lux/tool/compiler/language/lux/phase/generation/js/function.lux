(.module:
  [library
   [lux {"-" [Variant Tuple function]}
    [abstract
     ["[0]" monad {"+" [do]}]]
    [data
     ["[0]" product]
     [text
      ["%" format {"+" [format]}]]
     [collection
      ["[0]" list ("[1]\[0]" functor mix)]]]
    [target
     ["_" js {"+" [Expression Computation Var Statement]}]]]]
  ["[0]" // "_"
   ["[1][0]" runtime {"+" [Operation Phase Phase! Generator]}]
   ["[1][0]" reference]
   ["[1][0]" case]
   ["/[1]" // "_"
    ["[1][0]" reference]
    ["//[1]" /// "_"
     [analysis {"+" [Variant Tuple Abstraction Application Analysis]}]
     [synthesis {"+" [Synthesis]}]
     ["[1][0]" generation {"+" [Context]}]
     ["//[1]" /// "_"
      [arity {"+" [Arity]}]
      ["[1][0]" phase ("[1]\[0]" monad)]
      [reference
       [variable {"+" [Register Variable]}]]]]]])

(def: .public (apply expression archive [functionS argsS+])
  (Generator (Application Synthesis))
  (do [! ///////phase.monad]
    [functionO (expression archive functionS)
     argsO+ (monad.each ! (expression archive) argsS+)]
    (in (_.apply/* functionO argsO+))))

(def: capture
  (-> Register Var)
  (|>> (///reference.foreign //reference.system) :expected))

(def: (with_closure @self inits body!)
  (-> Var (List Expression) Statement [Statement Expression])
  (case inits
    {.#End}
    [(_.function! @self (list) body!)
     @self]

    _
    [(_.function! @self
                  (|> (list.enumeration inits)
                      (list\each (|>> product.left ..capture)))
                  (_.return (_.function @self (list) body!)))
     (_.apply/* @self inits)]))

(def: @curried
  (_.var "curried"))

(def: input
  (|>> ++ //case.register))

(def: @@arguments
  (_.var "arguments"))

(def: (@scope function_name)
  (-> Context Text)
  (format (///reference.artifact function_name) "_scope"))

(def: .public (function statement expression archive [environment arity bodyS])
  (-> Phase! (Generator (Abstraction Synthesis)))
  (do [! ///////phase.monad]
    [[function_name body!] (/////generation.with_new_context archive
                             (do !
                               [scope (\ ! each ..@scope
                                         (/////generation.context archive))]
                               (/////generation.with_anchor [1 scope]
                                 (statement expression archive bodyS))))
     .let [arityO (|> arity .int _.i32)
           @num_args (_.var "num_args")
           @scope (..@scope function_name)
           @self (_.var (///reference.artifact function_name))
           apply_poly (.function (_ args func)
                        (|> func (_.do "apply" (list _.null args))))
           initialize_self! (_.define (//case.register 0) @self)
           initialize! (list\mix (.function (_ post pre!)
                                   ($_ _.then
                                       pre!
                                       (_.define (..input post) (_.at (_.i32 (.int post)) @@arguments))))
                                 initialize_self!
                                 (list.indices arity))]
     environment (monad.each ! (expression archive) environment)
     .let [[definition instantiation] (with_closure @self environment
                                        ($_ _.then
                                            (_.define @num_args (_.the "length" @@arguments))
                                            (_.cond (list [(|> @num_args (_.= arityO))
                                                           ($_ _.then
                                                               initialize!
                                                               (_.with_label (_.label @scope)
                                                                 (_.do_while (_.boolean true)
                                                                             body!)))]
                                                          [(|> @num_args (_.> arityO))
                                                           (let [arity_inputs (|> (_.array (list))
                                                                                  (_.the "slice")
                                                                                  (_.do "call" (list @@arguments (_.i32 +0) arityO)))
                                                                 extra_inputs (|> (_.array (list))
                                                                                  (_.the "slice")
                                                                                  (_.do "call" (list @@arguments arityO)))]
                                                             (_.return (|> @self
                                                                           (apply_poly arity_inputs)
                                                                           (apply_poly extra_inputs))))])
                                                    ... (|> @num_args (_.< arityO))
                                                    (let [all_inputs (|> (_.array (list))
                                                                         (_.the "slice")
                                                                         (_.do "call" (list @@arguments)))]
                                                      ($_ _.then
                                                          (_.define @curried all_inputs)
                                                          (_.return (_.closure (list)
                                                                               (let [@missing all_inputs]
                                                                                 (_.return (apply_poly (_.do "concat" (list @missing) @curried)
                                                                                                       @self))))))))
                                            ))]
     _ (/////generation.execute! definition)
     _ (/////generation.save! (product.right function_name) {.#None} definition)]
    (in instantiation)))
