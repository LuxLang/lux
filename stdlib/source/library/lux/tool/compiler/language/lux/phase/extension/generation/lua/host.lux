(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" function]]
   [data
    [collection
     ["[0]" dictionary]
     ["[0]" list]]
    [text
     ["%" \\format (.only format)]]]
   [target
    ["_" lua (.only Var Expression)]]]]
 ["[0]" //
  ["[1][0]" common (.only custom)]
  ["//[1]" ///
   ["/" bundle]
   ["/[1]" //
    ["[0]" extension]
    [generation
     [extension (.only Nullary Unary Binary Trinary
                       nullary unary binary trinary)]
     ["[0]" reference]
     ["//" lua
      ["[1][0]" runtime (.only Operation Phase Handler Bundle
                               with_vars)]]]
    ["/[1]" //
     ["[0]" generation]
     [synthesis
      ["<s>" \\parser (.only Parser)]]
     ["//[1]" ///
      ["[1][0]" phase]]]]]])

(def array::new
  (Unary Expression)
  (|>> ["n"] list _.table))

(def array::length
  (Unary Expression)
  (_.the "n"))

(def (array::read [indexG arrayG])
  (Binary Expression)
  (_.item (_.+ (_.int +1) indexG) arrayG))

(def (array::write [indexG valueG arrayG])
  (Trinary Expression)
  (//runtime.array//write indexG valueG arrayG))

(def (array::delete [indexG arrayG])
  (Binary Expression)
  (//runtime.array//write indexG _.nil arrayG))

(def array
  Bundle
  (<| (/.prefix "array")
      (|> /.empty
          (/.install "new" (unary array::new))
          (/.install "length" (unary array::length))
          (/.install "read" (binary array::read))
          (/.install "write" (trinary array::write))
          (/.install "delete" (binary array::delete))
          )))

(def object::get
  Handler
  (custom
   [(all <>.and <s>.text <s>.any)
    (function (_ extension phase archive [fieldS objectS])
      (do ////////phase.monad
        [objectG (phase archive objectS)]
        (in (_.the fieldS objectG))))]))

(def object::do
  Handler
  (custom
   [(all <>.and <s>.text <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [methodS objectS inputsS])
      (do [! ////////phase.monad]
        [objectG (phase archive objectS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.do methodS inputsG objectG))))]))

(with_template [<!> <?> <unit>]
  [(def <!> (Nullary Expression) (function.constant <unit>))
   (def <?> (Unary Expression) (_.= <unit>))]

  [object::nil object::nil? _.nil]
  )

(def object
  Bundle
  (<| (/.prefix "object")
      (|> /.empty
          (/.install "get" object::get)
          (/.install "do" object::do)
          (/.install "nil" (nullary object::nil))
          (/.install "nil?" (unary object::nil?))
          )))

(def $input
  (_.var "input"))

(def utf8::encode
  (custom
   [<s>.any
    (function (_ extension phase archive inputS)
      (do [! ////////phase.monad]
        [inputG (phase archive inputS)]
        (in (<| (_.apply (list inputG))
                (_.closure (list $input))
                (_.return (_.apply (list (_.apply (list $input (_.int +1) (_.length $input))
                                                  (_.var "string.byte")))
                                   (_.var "table.pack")))))))]))

(def utf8::decode
  (custom
   [<s>.any
    (function (_ extension phase archive inputS)
      (do [! ////////phase.monad]
        [inputG (phase archive inputS)]
        (in (_.apply (list (_.apply (list inputG)
                                    (_.var "table.unpack")))
                     (_.var "string.char")))))]))

(def utf8
  Bundle
  (<| (/.prefix "utf8")
      (|> /.empty
          (/.install "encode" utf8::encode)
          (/.install "decode" utf8::decode)
          )))

(def lua::constant
  (custom
   [<s>.text
    (function (_ extension phase archive name)
      (at ////////phase.monad in (_.var name)))]))

(def lua::apply
  (custom
   [(all <>.and <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [abstractionS inputsS])
      (do [! ////////phase.monad]
        [abstractionG (phase archive abstractionS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.apply inputsG abstractionG))))]))

(def lua::power
  (custom
   [(all <>.and <s>.any <s>.any)
    (function (_ extension phase archive [powerS baseS])
      (do [! ////////phase.monad]
        [powerG (phase archive powerS)
         baseG (phase archive baseS)]
        (in (_.^ powerG baseG))))]))

(def lua::import
  (custom
   [<s>.text
    (function (_ extension phase archive module)
      (at ////////phase.monad in
          (_.require/1 (_.string module))))]))

(def lua::function
  (custom
   [(all <>.and <s>.i64 <s>.any)
    (function (_ extension phase archive [arity abstractionS])
      (do [! ////////phase.monad]
        [abstractionG (phase archive abstractionS)
         .let [variable (is (-> Text (Operation Var))
                            (|>> generation.symbol
                                 (at ! each _.var)))]
         g!inputs (monad.each ! (function (_ _)
                                  (variable "input"))
                              (list.repeated (.nat arity) []))]
        (in (<| (_.closure g!inputs)
                _.return
                (case (.nat arity)
                  0 (_.apply (list //runtime.unit) abstractionG)
                  1 (_.apply g!inputs abstractionG)
                  _ (_.apply (list (_.array g!inputs)) abstractionG))))))]))

(def .public bundle
  Bundle
  (<| (/.prefix "lua")
      (|> /.empty
          (dictionary.composite ..array)
          (dictionary.composite ..object)
          (dictionary.composite ..utf8)

          (/.install "constant" lua::constant)
          (/.install "apply" lua::apply)
          (/.install "power" lua::power)
          (/.install "import" lua::import)
          (/.install "function" lua::function)
          (/.install "script universe" (nullary (function.constant (_.boolean reference.universe))))
          )))
