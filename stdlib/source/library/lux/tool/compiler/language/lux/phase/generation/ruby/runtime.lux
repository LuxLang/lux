(.module:
  [library
   [lux "*"
    ["." meta]
    [abstract
     ["." monad {"+" [do]}]]
    [control
     ["." function]
     ["<>" parser
      ["<.>" code]]]
    [data
     ["." product]
     ["." text ("#\." hash)
      ["%" format {"+" [format]}]
      [encoding
       ["." utf8]]]
     [collection
      ["." list ("#\." functor)]
      ["." row]]]
    ["." macro
     [syntax {"+" [syntax:]}]
     ["." code]]
    [math
     [number {"+" [hex]}
      ["." i64]]]
    ["@" target
     ["_" ruby {"+" [Expression LVar Computation Literal Statement]}]]]]
  ["." /// "_"
   ["#." reference]
   ["//#" /// "_"
    ["$" version]
    ["#." synthesis {"+" [Synthesis]}]
    ["#." generation]
    ["//#" ///
     ["#." phase]
     [reference
      [variable {"+" [Register]}]]
     [meta
      [archive {"+" [Output Archive]}
       ["." artifact {"+" [Registry]}]]]]]])

(template [<name> <base>]
  [(type: .public <name>
     (<base> Register Expression Statement))]

  [Operation /////generation.Operation]
  [Phase /////generation.Phase]
  [Handler /////generation.Handler]
  [Bundle /////generation.Bundle]
  )

(type: .public (Generator i)
  (-> Phase Archive i (Operation Expression)))

(type: .public Phase!
  (-> Phase Archive Synthesis (Operation Statement)))

(type: .public (Generator! i)
  (-> Phase! Phase Archive i (Operation Statement)))

(def: .public unit
  (_.string /////synthesis.unit))

(def: (flag value)
  (-> Bit Literal)
  (if value
    ..unit
    _.nil))

(def: (feature name definition)
  (-> LVar (-> LVar Statement) Statement)
  (definition name))

(syntax: .public (with_vars [vars (<code>.tuple (<>.some <code>.local_identifier))
                             body <code>.any])
  (do [! meta.monad]
    [ids (monad.all ! (list.repeated (list.size vars) meta.seed))]
    (in (list (` (let [(~+ (|> vars
                               (list.zipped/2 ids)
                               (list\each (function (_ [id var])
                                            (list (code.local_identifier var)
                                                  (` (_.local (~ (code.text (format "v" (%.nat id)))))))))
                               list.together))]
                   (~ body)))))))

(def: module_id
  0)

(syntax: (runtime: [declaration (<>.or <code>.local_identifier
                                       (<code>.form (<>.and <code>.local_identifier
                                                            (<>.some <code>.local_identifier))))
                    code <code>.any])
  (do meta.monad
    [runtime_id meta.seed]
    (macro.with_identifiers [g!_]
      (let [runtime (code.local_identifier (///reference.artifact [..module_id runtime_id]))
            runtime_name (` (_.local (~ (code.text (%.code runtime)))))]
        (case declaration
          (#.Left name)
          (macro.with_identifiers [g!_]
            (let [g!name (code.local_identifier name)]
              (in (list (` (def: .public (~ g!name) LVar (~ runtime_name)))
                        (` (def: (~ (code.local_identifier (format "@" name)))
                             Statement
                             (..feature (~ runtime_name)
                                        (function ((~ g!_) (~ g!name))
                                          (_.set (list (~ g!name)) (~ code))))))))))
          
          (#.Right [name inputs])
          (macro.with_identifiers [g!_]
            (let [g!name (code.local_identifier name)
                  inputsC (list\each code.local_identifier inputs)
                  inputs_typesC (list\each (function.constant (` _.Expression))
                                           inputs)]
              (in (list (` (def: .public ((~ g!name) (~+ inputsC))
                             (-> (~+ inputs_typesC) Computation)
                             (_.apply/* (list (~+ inputsC)) (~ runtime_name))))
                        
                        (` (def: (~ (code.local_identifier (format "@" name)))
                             Statement
                             (..feature (~ runtime_name)
                                        (function ((~ g!_) (~ g!_))
                                          (..with_vars [(~+ inputsC)]
                                            (_.function (~ g!_) (list (~+ inputsC))
                                              (~ code))))))))))))))))

(def: tuple_size
  (_.the "length"))

(def: last_index
  (|>> ..tuple_size (_.- (_.int +1))))

(with_expansions [<recur> (as_is ($_ _.then
                                     (_.set (list lefts) (_.- last_index_right lefts))
                                     (_.set (list tuple) (_.item last_index_right tuple))))]
  (runtime: (tuple//left lefts tuple)
    (with_vars [last_index_right]
      (<| (_.while (_.bool true))
          ($_ _.then
              (_.set (list last_index_right) (..last_index tuple))
              (_.if (_.> lefts last_index_right)
                ... No need for recursion
                (_.return (_.item lefts tuple))
                ... Needs recursion
                <recur>)))))

  (runtime: (tuple//right lefts tuple)
    (with_vars [last_index_right right_index]
      (<| (_.while (_.bool true))
          ($_ _.then
              (_.set (list last_index_right) (..last_index tuple))
              (_.set (list right_index) (_.+ (_.int +1) lefts))
              (_.cond (list [(_.= last_index_right right_index)
                             (_.return (_.item right_index tuple))]
                            [(_.> last_index_right right_index)
                             ... Needs recursion.
                             <recur>])
                      (_.return (_.array_range right_index (..tuple_size tuple) tuple)))
              )))))

(def: .public variant_tag_field "_lux_tag")
(def: .public variant_flag_field "_lux_flag")
(def: .public variant_value_field "_lux_value")

(runtime: (sum//make tag last? value)
  (_.return (_.hash (list [(_.string ..variant_tag_field) tag]
                          [(_.string ..variant_flag_field) last?]
                          [(_.string ..variant_value_field) value]))))

(def: .public (variant tag last? value)
  (-> Nat Bit Expression Computation)
  (sum//make (_.int (.int tag)) (..flag last?) value))

(def: .public none
  Computation
  (..variant 0 #0 ..unit))

(def: .public some
  (-> Expression Computation)
  (..variant 1 #1))

(def: .public left
  (-> Expression Computation)
  (..variant 0 #0))

(def: .public right
  (-> Expression Computation)
  (..variant 1 #1))

(runtime: (sum//get sum wantsLast wantedTag)
  (let [no_match! (_.return _.nil)
        sum_tag (_.item (_.string ..variant_tag_field) sum)
        sum_flag (_.item (_.string ..variant_flag_field) sum)
        sum_value (_.item (_.string ..variant_value_field) sum)
        is_last? (_.= ..unit sum_flag)
        test_recursion! (_.if is_last?
                          ... Must recurse.
                          ($_ _.then
                              (_.set (list wantedTag) (_.- sum_tag wantedTag))
                              (_.set (list sum) sum_value))
                          no_match!)]
    (<| (_.while (_.bool true))
        (_.cond (list [(_.= sum_tag wantedTag)
                       (_.if (_.= wantsLast sum_flag)
                         (_.return sum_value)
                         test_recursion!)]

                      [(_.< wantedTag sum_tag)
                       test_recursion!]

                      [(_.= ..unit wantsLast)
                       (_.return (sum//make (_.- wantedTag sum_tag) sum_flag sum_value))])

                no_match!))))

(def: runtime//adt
  Statement
  ($_ _.then
      @tuple//left
      @tuple//right
      @sum//make
      @sum//get
      ))

(runtime: (lux//try risky)
  (with_vars [error value]
    (_.begin ($_ _.then
                 (_.set (list value) (_.apply_lambda/* (list ..unit) risky))
                 (_.return (..right value)))
             (list [(list) error
                    (_.return (..left (_.the "message" error)))]))))

(runtime: (lux//program_args raw)
  (with_vars [tail head]
    ($_ _.then
        (_.set (list tail) ..none)
        (<| (_.for_in head raw)
            (_.set (list tail) (..some (_.array (list head tail)))))
        (_.return tail))))

(def: runtime//lux
  Statement
  ($_ _.then
      @lux//try
      @lux//program_args
      ))

(def: i64//+limit (_.manual "+0x7FFFFFFFFFFFFFFF"))
(def: i64//-limit (_.manual "-0x8000000000000000"))
(def: i64//+iteration (_.manual "+0x10000000000000000"))
(def: i64//-iteration (_.manual "-0x10000000000000000"))
(def: i64//+cap (_.manual "+0x8000000000000000"))
(def: i64//-cap (_.manual "-0x8000000000000001"))

(runtime: (i64//64 input)
  (with_vars [temp]
    (`` (<| (~~ (template [<scenario> <iteration> <cap> <entrance>]
                  [(_.if (|> input <scenario>)
                     ($_ _.then
                         (_.set (list temp) (_.% <iteration> input))
                         (_.return (_.? (|> temp <scenario>)
                                        (|> temp (_.- <cap>) (_.+ <entrance>))
                                        temp))))]

                  [(_.> ..i64//+limit) ..i64//+iteration ..i64//+cap ..i64//-limit]
                  [(_.< ..i64//-limit) ..i64//-iteration ..i64//-cap ..i64//+limit]
                  ))
            (_.return input)))))

(runtime: i64//nat_top
  (|> (_.int +1)
      (_.bit_shl (_.int +64))
      (_.- (_.int +1))))

(def: as_nat
  (_.% (_.manual "0x10000000000000000")))

(runtime: (i64//left_shifted param subject)
  (_.return (|> subject
                (_.bit_shl (_.% (_.int +64) param))
                ..i64//64)))

(runtime: (i64//right_shifted param subject)
  ($_ _.then
      (_.set (list param) (_.% (_.int +64) param))
      (_.return (_.? (_.= (_.int +0) param)
                     subject
                     (|> subject
                         ..as_nat
                         (_.bit_shr param))))))

(template [<runtime> <host>]
  [(runtime: (<runtime> left right)
     (_.return (..i64//64 (<host> (..as_nat left) (..as_nat right)))))]

  [i64//and _.bit_and]
  [i64//or _.bit_or]
  [i64//xor _.bit_xor]
  )

(runtime: (i64//division parameter subject)
  (let [extra (_.do "remainder" (list parameter) subject)]
    (_.return (|> subject
                  (_.- extra)
                  (_./ parameter)))))

(def: runtime//i64
  Statement
  ($_ _.then
      @i64//64
      @i64//nat_top
      @i64//left_shifted
      @i64//right_shifted
      @i64//and
      @i64//or
      @i64//xor
      @i64//division
      ))

(runtime: (f64//decode inputG)
  (with_vars [@input @temp]
    ($_ _.then
        (_.set (list @input) inputG)
        (_.set (list @temp) (_.do "to_f" (list) @input))
        (_.if ($_ _.or
                  (_.not (_.= (_.float +0.0) @temp))
                  (_.= (_.string "0") @input)
                  (_.= (_.string ".0") @input)
                  (_.= (_.string "0.0") @input))
          (_.return (..some @temp))
          (_.return ..none)))))

(def: runtime//f64
  Statement
  ($_ _.then
      @f64//decode
      ))

(runtime: (text//index subject param start)
  (with_vars [idx]
    ($_ _.then
        (_.set (list idx) (|> subject (_.do "index" (list param start))))
        (_.if (_.= _.nil idx)
          (_.return ..none)
          (_.return (..some idx))))))

(def: (within? top value)
  (-> Expression Expression Computation)
  (_.and (|> value (_.>= (_.int +0)))
         (|> value (_.< top))))

(runtime: (text//clip offset length text)
  (_.if (_.= (_.int +0) length)
    (_.return (_.string ""))
    (_.return (_.array_range offset (_.+ offset (_.- (_.int +1) length)) text))))

(runtime: (text//char idx text)
  (_.if (|> idx (within? (_.the "length" text)))
    (_.return (|> text (_.array_range idx idx) (_.do "ord" (list))))
    (_.statement (_.raise (_.string "[Lux Error] Cannot get char from text.")))))

(def: runtime//text
  Statement
  ($_ _.then
      @text//index
      @text//clip
      @text//char
      ))

(runtime: (array//write idx value array)
  ($_ _.then
      (_.set (list (_.item idx array)) value)
      (_.return array)))

(def: runtime//array
  Statement
  ($_ _.then
      @array//write
      ))

(def: runtime
  Statement
  ($_ _.then
      runtime//adt
      runtime//lux
      runtime//i64
      runtime//f64
      runtime//text
      runtime//array
      ))

(def: .public generate
  (Operation [Registry Output])
  (do ///////phase.monad
    [_ (/////generation.execute! ..runtime)
     _ (/////generation.save! ..module_id #.None ..runtime)]
    (in [(|> artifact.empty
             artifact.resource
             product.right)
         (row.row [..module_id
                   #.None
                   (|> ..runtime
                       _.code
                       (\ utf8.codec encoded))])])))
