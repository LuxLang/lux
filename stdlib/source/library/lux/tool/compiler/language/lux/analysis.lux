(.module:
  [library
   [lux {"-" [Tuple Variant nat int rev]}
    [abstract
     [equivalence {"+" [Equivalence]}]
     [hash {"+" [Hash]}]
     [monad {"+" [do]}]]
    [control
     ["." function]
     ["." maybe]
     ["." try]
     ["." exception {"+" [Exception]}]]
    [data
     ["." product]
     ["." bit ("#\." equivalence)]
     ["." text ("#\." equivalence)
      ["%" format {"+" [Format format]}]]
     [collection
      ["." list ("#\." functor mix)]]]
    [math
     [number
      ["n" nat]
      ["i" int]
      ["r" rev]
      ["f" frac]]]
    [meta
     ["." location]]]]
  [//
   [phase
    ["." extension {"+" [Extension]}]]
   [///
    [arity {"+" [Arity]}]
    [version {"+" [Version]}]
    ["." phase]
    ["." reference {"+" [Reference]}
     ["." variable {"+" [Register Variable]}]]]])

(type: .public Primitive
  (.Variant
   #Unit
   (#Bit Bit)
   (#Nat Nat)
   (#Int Int)
   (#Rev Rev)
   (#Frac Frac)
   (#Text Text)))

(type: .public Tag
  Nat)

(type: .public (Variant a)
  (Record
   [#lefts Nat
    #right? Bit
    #value a]))

(def: .public (tag lefts right?)
  (-> Nat Bit Nat)
  (if right?
    (++ lefts)
    lefts))

(def: (lefts tag right?)
  (-> Nat Bit Nat)
  (if right?
    (-- tag)
    tag))

(def: .public (choice options pick)
  (-> Nat Nat [Nat Bit])
  (let [right? (n.= (-- options) pick)]
    [(..lefts pick right?)
     right?]))

(type: .public (Tuple a)
  (List a))

(type: .public (Composite a)
  (.Variant
   (#Variant (Variant a))
   (#Tuple (Tuple a))))

(type: .public Pattern
  (Rec Pattern
    (.Variant
     (#Simple Primitive)
     (#Complex (Composite Pattern))
     (#Bind Register))))

(type: .public (Branch' e)
  (Record
   [#when Pattern
    #then e]))

(type: .public (Match' e)
  [(Branch' e) (List (Branch' e))])

(type: .public (Environment a)
  (List a))

(type: .public Analysis
  (Rec Analysis
    (.Variant
     (#Primitive Primitive)
     (#Structure (Composite Analysis))
     (#Reference Reference)
     (#Case Analysis (Match' Analysis))
     (#Function (Environment Analysis) Analysis)
     (#Apply Analysis Analysis)
     (#Extension (Extension Analysis)))))

(type: .public Branch
  (Branch' Analysis))

(type: .public Match
  (Match' Analysis))

(implementation: primitive_equivalence
  (Equivalence Primitive)

  (def: (= reference sample)
    (case [reference sample]
      [#Unit #Unit]
      true
      
      (^template [<tag> <=>]
        [[(<tag> reference) (<tag> sample)]
         (<=> reference sample)])
      ([#Bit bit\=]
       [#Nat n.=]
       [#Int i.=]
       [#Rev r.=]
       [#Frac f.=]
       [#Text text\=])
      
      _
      false)))

(implementation: .public (composite_equivalence (^open "/\."))
  (All (_ a) (-> (Equivalence a) (Equivalence (Composite a))))
  
  (def: (= reference sample)
    (case [reference sample]
      [(#Variant [reference_lefts reference_right? reference_value])
       (#Variant [sample_lefts sample_right? sample_value])]
      (and (n.= reference_lefts sample_lefts)
           (bit\= reference_right? sample_right?)
           (/\= reference_value sample_value))
      
      [(#Tuple reference) (#Tuple sample)]
      (\ (list.equivalence /\=) = reference sample)

      _
      false)))

(implementation: .public (composite_hash super)
  (All (_ a) (-> (Hash a) (Hash (Composite a))))

  (def: &equivalence
    (..composite_equivalence (\ super &equivalence)))
  
  (def: (hash value)
    (case value
      (#Variant [lefts right? value])
      ($_ n.* 2
          (\ n.hash hash lefts)
          (\ bit.hash hash right?)
          (\ super hash value))
      
      (#Tuple members)
      ($_ n.* 3
          (\ (list.hash super) hash members))
      )))

(implementation: pattern_equivalence
  (Equivalence Pattern)

  (def: (= reference sample)
    (case [reference sample]
      [(#Simple reference) (#Simple sample)]
      (\ primitive_equivalence = reference sample)
      
      [(#Complex reference) (#Complex sample)]
      (\ (composite_equivalence =) = reference sample)

      [(#Bind reference) (#Bind sample)]
      (n.= reference sample)

      _
      false)))

(implementation: (branch_equivalence equivalence)
  (-> (Equivalence Analysis) (Equivalence Branch))

  (def: (= [reference_pattern reference_body] [sample_pattern sample_body])
    (and (\ pattern_equivalence = reference_pattern sample_pattern)
         (\ equivalence = reference_body sample_body))))

(implementation: .public equivalence
  (Equivalence Analysis)

  (def: (= reference sample)
    (case [reference sample]
      [(#Primitive reference) (#Primitive sample)]
      (\ primitive_equivalence = reference sample)

      [(#Structure reference) (#Structure sample)]
      (\ (composite_equivalence =) = reference sample)

      [(#Reference reference) (#Reference sample)]
      (\ reference.equivalence = reference sample)

      [(#Case [reference_analysis reference_match])
       (#Case [sample_analysis sample_match])]
      (and (= reference_analysis sample_analysis)
           (\ (list.equivalence (branch_equivalence =)) = (#.Item reference_match) (#.Item sample_match)))

      [(#Function [reference_environment reference_analysis])
       (#Function [sample_environment sample_analysis])]
      (and (= reference_analysis sample_analysis)
           (\ (list.equivalence =) = reference_environment sample_environment))

      [(#Apply [reference_input reference_abstraction])
       (#Apply [sample_input sample_abstraction])]
      (and (= reference_input sample_input)
           (= reference_abstraction sample_abstraction))

      [(#Extension reference) (#Extension sample)]
      (\ (extension.equivalence =) = reference sample)

      _
      false)))

(template [<name> <tag>]
  [(template: .public (<name> content)
     [(<tag> content)])]

  [control/case #..Case]
  )

(template: .public (unit)
  [(#..Primitive #..Unit)])

(template [<name> <tag>]
  [(template: .public (<name> value)
     [(#..Primitive (<tag> value))])]

  [bit  #..Bit]
  [nat  #..Nat]
  [int  #..Int]
  [rev  #..Rev]
  [frac #..Frac]
  [text #..Text]
  )

(type: .public (Abstraction c)
  [(Environment c) Arity c])

(type: .public (Application c)
  [c (List c)])

(def: (last? size tag)
  (-> Nat Tag Bit)
  (n.= (-- size) tag))

(template: .public (no_op value)
  [(|> 1 #variable.Local #reference.Variable #..Reference
       (#..Function (list))
       (#..Apply value))])

(def: .public (apply [abstraction inputs])
  (-> (Application Analysis) Analysis)
  (list\mix (function (_ input abstraction')
              (#Apply input abstraction'))
            abstraction
            inputs))

(def: .public (application analysis)
  (-> Analysis (Application Analysis))
  (loop [abstraction analysis
         inputs (list)]
    (case abstraction
      (#Apply input next)
      (recur next (#.Item input inputs))

      _
      [abstraction inputs])))

(template [<name> <tag>]
  [(template: .public (<name> content)
     [(.<| #..Reference
           <tag>
           content)])]

  [variable         #reference.Variable]
  [constant         #reference.Constant]

  [variable/local   reference.local]
  [variable/foreign reference.foreign]
  )

(template [<name> <tag>]
  [(template: .public (<name> content)
     [(.<| #..Complex
           <tag>
           content)])]

  [pattern/variant #..Variant]
  [pattern/tuple   #..Tuple]
  )

(template [<name> <tag>]
  [(template: .public (<name> content)
     [(.<| #..Structure
           <tag>
           content)])]

  [variant #..Variant]
  [tuple   #..Tuple]
  )

(template: .public (pattern/unit)
  [(#..Simple #..Unit)])

(template [<name> <tag>]
  [(template: .public (<name> content)
     [(#..Simple (<tag> content))])]
  
  [pattern/bit  #..Bit]
  [pattern/nat  #..Nat]
  [pattern/int  #..Int]
  [pattern/rev  #..Rev]
  [pattern/frac #..Frac]
  [pattern/text #..Text]
  )

(template: .public (pattern/bind register)
  [(#..Bind register)])

(def: .public (%analysis analysis)
  (Format Analysis)
  (case analysis
    (#Primitive primitive)
    (case primitive
      #Unit
      "[]"

      (^template [<tag> <format>]
        [(<tag> value)
         (<format> value)])
      ([#Bit %.bit]
       [#Nat %.nat]
       [#Int %.int]
       [#Rev %.rev]
       [#Frac %.frac]
       [#Text %.text]))
    
    (#Structure structure)
    (case structure
      (#Variant [lefts right? value])
      (format "(" (%.nat lefts) " " (%.bit right?) " " (%analysis value) ")")
      
      (#Tuple members)
      (|> members
          (list\each %analysis)
          (text.interposed " ")
          (text.enclosed ["[" "]"])))
    
    (#Reference reference)
    (reference.format reference)
    
    (#Case analysis match)
    "{?}"
    
    (#Function environment body)
    (|> (%analysis body)
        (format " ")
        (format (|> environment
                    (list\each %analysis)
                    (text.interposed " ")
                    (text.enclosed ["[" "]"])))
        (text.enclosed ["(" ")"]))
    
    (#Apply _)
    (|> analysis
        ..application
        #.Item
        (list\each %analysis)
        (text.interposed " ")
        (text.enclosed ["(" ")"]))
    
    (#Extension name parameters)
    (|> parameters
        (list\each %analysis)
        (text.interposed " ")
        (format (%.text name) " ")
        (text.enclosed ["(" ")"]))))

(template [<special> <general>]
  [(type: .public <special>
     (<general> .Lux Code Analysis))]

  [State+    extension.State]
  [Operation extension.Operation]
  [Phase     extension.Phase]
  [Handler   extension.Handler]
  [Bundle    extension.Bundle]
  )

(def: .public (with_source_code source action)
  (All (_ a) (-> Source (Operation a) (Operation a)))
  (function (_ [bundle state])
    (let [old_source (value@ #.source state)]
      (case (action [bundle (with@ #.source source state)])
        (#try.Success [[bundle' state'] output])
        (#try.Success [[bundle' (with@ #.source old_source state')]
                       output])

        (#try.Failure error)
        (#try.Failure error)))))

(def: fresh_bindings
  (All (_ k v) (Bindings k v))
  [#.counter 0
   #.mappings (list)])

(def: fresh_scope
  Scope
  [#.name     (list)
   #.inner    0
   #.locals   fresh_bindings
   #.captured fresh_bindings])

(def: .public (with_scope action)
  (All (_ a) (-> (Operation a) (Operation [Scope a])))
  (function (_ [bundle state])
    (case (action [bundle (revised@ #.scopes (|>> (#.Item fresh_scope)) state)])
      (#try.Success [[bundle' state'] output])
      (case (value@ #.scopes state')
        (#.Item head tail)
        (#try.Success [[bundle' (with@ #.scopes tail state')]
                       [head output]])

        #.End
        (#try.Failure "Impossible error: Drained scopes!"))

      (#try.Failure error)
      (#try.Failure error))))

(def: scope_reset
  (List Scope)
  (list fresh_scope))

(def: .public (without_scopes action)
  (All (_ a) (-> (Operation a) (Operation a)))
  (function (_ [bundle state])
    (case (action [bundle (with@ #.scopes ..scope_reset state)])
      (#try.Success [[bundle' state'] output])
      (#try.Success [[bundle' (with@ #.scopes (value@ #.scopes state) state')]
                     output])

      (#try.Failure error)
      (#try.Failure error))))

(def: .public (with_current_module name)
  (All (_ a) (-> Text (Operation a) (Operation a)))
  (extension.localized (value@ #.current_module)
                       (with@ #.current_module)
                       (function.constant (#.Some name))))

(def: .public (with_location location action)
  (All (_ a) (-> Location (Operation a) (Operation a)))
  (if (text\= "" (product.left location))
    action
    (function (_ [bundle state])
      (let [old_location (value@ #.location state)]
        (case (action [bundle (with@ #.location location state)])
          (#try.Success [[bundle' state'] output])
          (#try.Success [[bundle' (with@ #.location old_location state')]
                         output])

          (#try.Failure error)
          (#try.Failure error))))))

(def: (locate_error location error)
  (-> Location Text Text)
  (format (%.location location) text.new_line
          error))

(def: .public (failure error)
  (-> Text Operation)
  (function (_ [bundle state])
    (#try.Failure (locate_error (value@ #.location state) error))))

(def: .public (except exception parameters)
  (All (_ e) (-> (Exception e) e Operation))
  (..failure (exception.error exception parameters)))

(def: .public (assertion exception parameters condition)
  (All (_ e) (-> (Exception e) e Bit (Operation Any)))
  (if condition
    (\ phase.monad in [])
    (..except exception parameters)))

(def: .public (failure' error)
  (-> Text (phase.Operation Lux))
  (function (_ state)
    (#try.Failure (locate_error (value@ #.location state) error))))

(def: .public (except' exception parameters)
  (All (_ e) (-> (Exception e) e (phase.Operation Lux)))
  (..failure' (exception.error exception parameters)))

(def: .public (with_stack exception message action)
  (All (_ e o) (-> (Exception e) e (Operation o) (Operation o)))
  (function (_ bundle,state)
    (case (exception.with exception message
            (action bundle,state))
      (#try.Success output)
      (#try.Success output)
      
      (#try.Failure error)
      (let [[bundle state] bundle,state]
        (#try.Failure (locate_error (value@ #.location state) error))))))

(def: .public (install state)
  (-> .Lux (Operation Any))
  (function (_ [bundle _])
    (#try.Success [[bundle state]
                   []])))

(template [<name> <type> <field> <value>]
  [(def: .public (<name> value)
     (-> <type> (Operation Any))
     (extension.update (with@ <field> <value>)))]

  [set_source_code    Source   #.source         value]
  [set_current_module Text     #.current_module (#.Some value)]
  [set_location       Location #.location       value]
  )

(def: .public (location file)
  (-> Text Location)
  [file 1 0])

(def: .public (source file code)
  (-> Text Text Source)
  [(location file) 0 code])

(def: dummy_source
  Source
  [location.dummy 0 ""])

(def: type_context
  Type_Context
  [#.ex_counter 0
   #.var_counter 0
   #.var_bindings (list)])

(def: .public (info version host)
  (-> Version Text Info)
  [#.target host
   #.version (%.nat version)
   #.mode #.Build])

(def: .public (state info)
  (-> Info Lux)
  [#.info            info
   #.source          ..dummy_source
   #.location        location.dummy
   #.current_module  #.None
   #.modules         (list)
   #.scopes          (list)
   #.type_context    ..type_context
   #.expected        #.None
   #.seed            0
   #.scope_type_vars (list)
   #.extensions      []
   #.eval            (:as (-> Type Code (Meta Any)) [])
   #.host            []])
