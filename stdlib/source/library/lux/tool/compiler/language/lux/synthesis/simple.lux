(.using
 [library
  [lux "*"
   [abstract
    [equivalence {"+" Equivalence}]
    [hash {"+" Hash}]]
   [control
    [pipe {"+" case>}]]
   [data
    ["[0]" bit ("[1]#[0]" equivalence)]
    ["[0]" text ("[1]#[0]" equivalence)
     ["%" format]]]
   [math
    [number
     ["[0]" i64]
     ["n" nat]
     ["i" int]
     ["f" frac]]]]])

(type: .public Simple
  (Variant
   {#Bit Bit}
   {#I64 (I64 Any)}
   {#F64 Frac}
   {#Text Text}))

(def: .public (format it)
  (%.Format Simple)
  (case it
    (^template [<pattern> <format>]
      [{<pattern> value}
       (<format> value)])
    ([#Bit  %.bit]
     [#F64  %.frac]
     [#Text %.text])
    
    {#I64 value}
    (%.int (.int value))))

(implementation: .public equivalence
  (Equivalence Simple)
  
  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag> <eq> <format>]
        [[{<tag> reference'} {<tag> sample'}]
         (<eq> reference' sample')])
      ([#Bit  bit#=  %.bit]
       [#F64  f.=    %.frac]
       [#Text text#= %.text])

      [{#I64 reference'} {#I64 sample'}]
      (i.= (.int reference') (.int sample'))

      _
      false)))

(implementation: .public hash
  (Hash Simple)

  (def: &equivalence ..equivalence)

  (def: hash
    (|>> (case> (^template [<factor> <tag> <hash>]
                  [{<tag> value'}
                   (n.* <factor>  (# <hash> hash value'))])
                ([2 #Bit  bit.hash]
                 [3 #F64  f.hash]
                 [5 #Text text.hash]
                 [7 #I64  i64.hash])))))
