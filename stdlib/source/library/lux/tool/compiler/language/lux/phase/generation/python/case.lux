(.module:
  [library
   [lux (#- case let if)
    [abstract
     ["." monad (#+ do)]]
    [data
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor fold)]
      ["." set]]]
    [math
     [number
      ["n" nat]
      ["i" int]]]
    [target
     ["_" python (#+ Expression SVar Statement)]]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Generator Phase! Generator!)]
   ["#." reference]
   ["#." primitive]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     [synthesis
      ["." case]]
     ["/#" // #_
      ["#." synthesis (#+ Member Synthesis Path)]
      ["#." generation]
      ["//#" /// #_
       [reference
        ["#." variable (#+ Register)]]
       ["#." phase ("#\." monad)]
       [meta
        [archive (#+ Archive)]]]]]]])

(def: .public (gensym prefix)
  (-> Text (Operation SVar))
  (///////phase\map (|>> %.nat (format prefix) _.var)
                    /////generation.next))

(def: .public register
  (-> Register SVar)
  (|>> (///reference.local //reference.system) :assume))

(def: .public capture
  (-> Register SVar)
  (|>> (///reference.foreign //reference.system) :assume))

(def: .public (let expression archive [valueS register bodyS])
  (Generator [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueO (expression archive valueS)
     bodyO (expression archive bodyS)]
    ... TODO: Find some way to do 'let' without paying the price of the closure.
    (in (_.apply/* (_.lambda (list (..register register))
                             bodyO)
                   (list valueO)))))

(def: .public (let! statement expression archive [valueS register bodyS])
  (Generator! [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueO (expression archive valueS)
     bodyO (statement expression archive bodyS)]
    (in ($_ _.then
            (_.set (list (..register register)) valueO)
            bodyO))))

(def: .public (if expression archive [testS thenS elseS])
  (Generator [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [testO (expression archive testS)
     thenO (expression archive thenS)
     elseO (expression archive elseS)]
    (in (_.? testO thenO elseO))))

(def: .public (if! statement expression archive [testS thenS elseS])
  (Generator! [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [test! (expression archive testS)
     then! (statement expression archive thenS)
     else! (statement expression archive elseS)]
    (in (_.if test!
          then!
          else!))))

(def: .public (get expression archive [pathP valueS])
  (Generator [(List Member) Synthesis])
  (do ///////phase.monad
    [valueO (expression archive valueS)]
    (in (list\fold (function (_ side source)
                     (.let [method (.case side
                                     (^template [<side> <accessor>]
                                       [(<side> lefts)
                                        (<accessor> (_.int (.int lefts)))])
                                     ([#.Left //runtime.tuple::left]
                                      [#.Right //runtime.tuple::right]))]
                       (method source)))
                   valueO
                   (list.reversed pathP)))))

(def: @savepoint (_.var "lux_pm_savepoint"))
(def: @cursor (_.var "lux_pm_cursor"))
(def: @temp (_.var "lux_pm_temp"))

(def: (push! value)
  (-> (Expression Any) (Statement Any))
  (_.statement (|> @cursor (_.do "append" (list value)))))

(def: peek_and_pop
  (Expression Any)
  (|> @cursor (_.do "pop" (list))))

(def: pop!
  (Statement Any)
  (_.statement ..peek_and_pop))

(def: peek
  (Expression Any)
  (_.item (_.int -1) @cursor))

(def: save!
  (Statement Any)
  (.let [cursor (_.slice_from (_.int +0) @cursor)]
    (_.statement (|> @savepoint (_.do "append" (list cursor))))))

(def: restore!
  (Statement Any)
  (_.set (list @cursor) (|> @savepoint (_.do "pop" (list)))))

(def: fail_pm! _.break)

(def: (multi_pop! pops)
  (-> Nat (Statement Any))
  (_.delete (_.slice_from (_.int (i.* -1 (.int pops))) @cursor)))

(template [<name> <flag> <prep>]
  [(def: (<name> simple? idx)
     (-> Bit Nat (Statement Any))
     ($_ _.then
         (_.set (list @temp) (|> idx <prep> .int _.int (//runtime.sum::get ..peek <flag>)))
         (.if simple?
           (_.when (_.= _.none @temp)
                   fail_pm!)
           (_.if (_.= _.none @temp)
             fail_pm!
             (..push! @temp))
           )))]

  [left_choice  _.none        (<|)]
  [right_choice (_.string "") inc]
  )

(def: (with_looping in_closure? g!once body!)
  (-> Bit SVar (Statement Any) (Statement Any))
  (.if in_closure?
    (_.while (_.bool true)
             body!
             #.None)
    ($_ _.then
        (_.set (list g!once) (_.bool true))
        (_.while g!once
                 ($_ _.then
                     (_.set (list g!once) (_.bool false))
                     body!)
                 (#.Some _.continue)))))

(def: (alternation in_closure? g!once pre! post!)
  (-> Bit SVar (Statement Any) (Statement Any) (Statement Any))
  ($_ _.then
      (..with_looping in_closure? g!once
        ($_ _.then
            ..save!
            pre!))
      ..restore!
      post!))

(def: (primitive_pattern_matching recur pathP)
  (-> (-> Path (Operation (Statement Any)))
      (-> Path (Operation (Maybe (Statement Any)))))
  (.case pathP
    (#/////synthesis.Bit_Fork when thenP elseP)
    (do {! ///////phase.monad}
      [then! (recur thenP)
       else! (.case elseP
               (#.Some elseP)
               (recur elseP)

               #.None
               (in ..fail_pm!))]
      (in (#.Some (.if when
                    (_.if ..peek
                      then!
                      else!)
                    (_.if ..peek
                      else!
                      then!)))))

    (^template [<tag> <format>]
      [(<tag> item)
       (do {! ///////phase.monad}
         [clauses (monad.map ! (function (_ [match then])
                                 (\ ! map
                                    (|>> [(_.= (|> match <format>)
                                               ..peek)])
                                    (recur then)))
                             (#.Item item))]
         (in (#.Some (_.cond clauses
                             ..fail_pm!))))])
    ([#/////synthesis.I64_Fork (<| //primitive.i64 .int)]
     [#/////synthesis.F64_Fork (<| //primitive.f64)]
     [#/////synthesis.Text_Fork (<| //primitive.text)])

    _
    (\ ///////phase.monad in #.None)))

(def: (pattern_matching' in_closure? statement expression archive)
  (-> Bit Phase! Phase Archive Path (Operation (Statement Any)))
  (function (recur pathP)
    (do {! ///////phase.monad}
      [?output (primitive_pattern_matching recur pathP)]
      (.case ?output
        (#.Some output)
        (in output)

        #.None
        (.case pathP
          (#/////synthesis.Then bodyS)
          (statement expression archive bodyS)

          #/////synthesis.Pop
          (///////phase\in ..pop!)

          (#/////synthesis.Bind register)
          (///////phase\in (_.set (list (..register register)) ..peek))

          (^template [<complex> <simple> <choice>]
            [(^ (<complex> idx))
             (///////phase\in (<choice> false idx))

             (^ (<simple> idx nextP))
             (|> nextP
                 recur
                 (///////phase\map (_.then (<choice> true idx))))])
          ([/////synthesis.side/left  /////synthesis.simple_left_side  ..left_choice]
           [/////synthesis.side/right /////synthesis.simple_right_side ..right_choice])

          (^ (/////synthesis.member/left 0))
          (///////phase\in (|> ..peek (_.item (_.int +0)) ..push!))
          
          (^template [<pm> <getter>]
            [(^ (<pm> lefts))
             (///////phase\in (|> ..peek (<getter> (_.int (.int lefts))) ..push!))])
          ([/////synthesis.member/left  //runtime.tuple::left]
           [/////synthesis.member/right //runtime.tuple::right])

          (^ (/////synthesis.!bind_top register thenP))
          (do !
            [then! (recur thenP)]
            (///////phase\in ($_ _.then
                                 (_.set (list (..register register)) ..peek_and_pop)
                                 then!)))

          (^ (/////synthesis.!multi_pop nextP))
          (.let [[extra_pops nextP'] (case.count_pops nextP)]
            (do !
              [next! (recur nextP')]
              (///////phase\in ($_ _.then
                                   (..multi_pop! (n.+ 2 extra_pops))
                                   next!))))

          (^ (/////synthesis.path/seq preP postP))
          (do !
            [pre! (recur preP)
             post! (recur postP)]
            (in (_.then pre! post!)))

          (^ (/////synthesis.path/alt preP postP))
          (do !
            [pre! (recur preP)
             post! (recur postP)
             g!once (..gensym "once")]
            (in (..alternation in_closure? g!once pre! post!)))

          _
          (undefined))))))

(def: (pattern_matching in_closure? statement expression archive pathP)
  (-> Bit Phase! Phase Archive Path (Operation (Statement Any)))
  (do ///////phase.monad
    [pattern_matching! (pattern_matching' in_closure? statement expression archive pathP)
     g!once (..gensym "once")]
    (in ($_ _.then
            (..with_looping in_closure? g!once
              pattern_matching!)
            (_.raise (_.Exception/1 (_.string case.pattern_matching_error)))))))

(def: .public dependencies
  (-> Path (List SVar))
  (|>> case.storage
       (get@ #case.dependencies)
       set.list
       (list\map (function (_ variable)
                   (.case variable
                     (#///////variable.Local register)
                     (..register register)
                     
                     (#///////variable.Foreign register)
                     (..capture register))))))

(def: .public (case! in_closure? statement expression archive [valueS pathP])
  (-> Bit (Generator! [Synthesis Path]))
  (do ///////phase.monad
    [stack_init (expression archive valueS)
     pattern_matching! (pattern_matching in_closure? statement expression archive pathP)]
    (in ($_ _.then
            (_.set (list @cursor) (_.list (list stack_init)))
            (_.set (list @savepoint) (_.list (list)))
            pattern_matching!
            ))))

(def: .public (case statement expression archive [valueS pathP])
  (-> Phase! (Generator [Synthesis Path]))
  (do ///////phase.monad
    [[[case_module case_artifact] pattern_matching!] (/////generation.with_new_context archive
                                                       (case! true statement expression archive [valueS pathP]))
     .let [@case (_.var (///reference.artifact [case_module case_artifact]))
           @dependencies+ (..dependencies (/////synthesis.path/seq (/////synthesis.path/then valueS)
                                                                   pathP))
           directive (_.def @case @dependencies+
                            pattern_matching!)]
     _ (/////generation.execute! directive)
     _ (/////generation.save! case_artifact #.None directive)]
    (in (_.apply/* @case @dependencies+))))
