(.module:
  [library
   [lux #*
    [abstract
     [monad (#+ do)]]
    [control
     ["." function]
     ["." try]]
    [type
     ["." check (#+ Check)]]
    ["." meta]]]
  ["." /// #_
   ["#." extension]
   [//
    ["/" analysis (#+ Operation)]
    [///
     ["#" phase]]]])

(def: .public (with_type expected)
  (All [a] (-> Type (Operation a) (Operation a)))
  (///extension.localized (get@ #.expected) (set@ #.expected)
                          (function.constant (#.Some expected))))

(def: .public (with_env action)
  (All [a] (-> (Check a) (Operation a)))
  (function (_ (^@ stateE [bundle state]))
    (case (action (get@ #.type_context state))
      (#try.Success [context' output])
      (#try.Success [[bundle (set@ #.type_context context' state)]
                     output])

      (#try.Failure error)
      ((/.failure error) stateE))))

(def: .public with_fresh_env
  (All [a] (-> (Operation a) (Operation a)))
  (///extension.localized (get@ #.type_context) (set@ #.type_context)
                          (function.constant check.fresh_context)))

(def: .public (infer actualT)
  (-> Type (Operation Any))
  (do ///.monad
    [expectedT (///extension.lifted meta.expected_type)]
    (with_env
      (check.check expectedT actualT))))

(def: .public (with_inference action)
  (All [a] (-> (Operation a) (Operation [Type a])))
  (do ///.monad
    [[_ varT] (..with_env
                check.var)
     output (with_type varT
              action)
     knownT (..with_env
              (check.clean varT))]
    (in [knownT output])))
