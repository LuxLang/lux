(.using
  [library
   [lux "*"
    [abstract
     [monad {"+" do}]]
    [control
     ["[0]" function]
     ["[0]" try]]
    [type
     ["[0]" check {"+" Check}]]
    ["[0]" meta]]]
  ["[0]" /// "_"
   ["[1][0]" extension]
   [//
    ["/" analysis {"+" Operation}]
    [///
     ["[1]" phase]]]])

(def: .public (with_type expected)
  (All (_ a) (-> Type (Operation a) (Operation a)))
  (///extension.localized (value@ .#expected) (with@ .#expected)
                          (function.constant {.#Some expected})))

(def: .public (with_env action)
  (All (_ a) (-> (Check a) (Operation a)))
  (function (_ (^@ stateE [bundle state]))
    (case (action (value@ .#type_context state))
      {try.#Success [context' output]}
      {try.#Success [[bundle (with@ .#type_context context' state)]
                     output]}

      {try.#Failure error}
      ((/.failure error) stateE))))

(def: .public with_fresh_env
  (All (_ a) (-> (Operation a) (Operation a)))
  (///extension.localized (value@ .#type_context) (with@ .#type_context)
                          (function.constant check.fresh_context)))

(def: .public (infer actualT)
  (-> Type (Operation Any))
  (do ///.monad
    [expectedT (///extension.lifted meta.expected_type)]
    (with_env
      (check.check expectedT actualT))))

(def: .public (with_inference action)
  (All (_ a) (-> (Operation a) (Operation [Type a])))
  (do ///.monad
    [[_ varT] (..with_env
                check.var)
     output (with_type varT
              action)
     knownT (..with_env
              (check.clean varT))]
    (in [knownT output])))
