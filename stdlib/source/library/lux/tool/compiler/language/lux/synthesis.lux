(.module:
  [library
   [lux (#- i64 Scope)
    [abstract
     [monad (#+ do)]
     [equivalence (#+ Equivalence)]
     [hash (#+ Hash)]]
    [control
     [pipe (#+ case>)]
     ["." exception (#+ exception:)]]
    [data
     ["." sum]
     ["." product]
     ["." maybe]
     ["." bit ("#\." equivalence)]
     ["." text ("#\." equivalence)
      ["%" format (#+ Format format)]]
     [collection
      ["." list ("#\." functor)]
      ["." dictionary (#+ Dictionary)]]]
    [math
     [number
      ["." i64]
      ["n" nat]
      ["i" int]
      ["f" frac]]]]]
  [//
   ["." analysis (#+ Environment Composite Analysis)]
   [phase
    ["." extension (#+ Extension)]]
   [///
    [arity (#+ Arity)]
    ["." phase]
    ["." reference (#+ Reference)
     ["." variable (#+ Register Variable)]]]])

(type: .public Resolver
  (Dictionary Variable Variable))

(type: .public State
  {#locals Nat
   ## https://en.wikipedia.org/wiki/Currying
   #currying? Bit})

(def: .public fresh_resolver
  Resolver
  (dictionary.empty variable.hash))

(def: .public init
  State
  {#locals 0
   #currying? false})

(type: .public Primitive
  (#Bit Bit)
  (#I64 (I64 Any))
  (#F64 Frac)
  (#Text Text))

(type: .public Side
  (Either Nat Nat))

(type: .public Member
  (Either Nat Nat))

(type: .public Access
  (#Side Side)
  (#Member Member))

(type: .public (Fork value next)
  [[value next] (List [value next])])

(type: .public (Path' s)
  #Pop
  (#Access Access)
  (#Bind Register)
  (#Bit_Fork Bit (Path' s) (Maybe (Path' s)))
  (#I64_Fork (Fork (I64 Any) (Path' s)))
  (#F64_Fork (Fork Frac (Path' s)))
  (#Text_Fork (Fork Text (Path' s)))
  (#Alt (Path' s) (Path' s))
  (#Seq (Path' s) (Path' s))
  (#Then s))

(type: .public (Abstraction' s)
  {#environment (Environment s)
   #arity Arity
   #body s})

(type: .public (Apply' s)
  {#function s
   #arguments (List s)})

(type: .public (Branch s)
  (#Let s Register s)
  (#If s s s)
  (#Get (List Member) s)
  (#Case s (Path' s)))

(type: .public (Scope s)
  {#start Register
   #inits (List s)
   #iteration s})

(type: .public (Loop s)
  (#Scope (Scope s))
  (#Recur (List s)))

(type: .public (Function s)
  (#Abstraction (Abstraction' s))
  (#Apply s (List s)))

(type: .public (Control s)
  (#Branch (Branch s))
  (#Loop (Loop s))
  (#Function (Function s)))

(type: .public #rec Synthesis
  (#Primitive Primitive)
  (#Structure (Composite Synthesis))
  (#Reference Reference)
  (#Control (Control Synthesis))
  (#Extension (Extension Synthesis)))

(template [<special> <general>]
  [(type: .public <special>
     (<general> ..State Analysis Synthesis))]

  [State+    extension.State]
  [Operation extension.Operation]
  [Phase     extension.Phase]
  [Handler   extension.Handler]
  [Bundle    extension.Bundle]
  )

(type: .public Path
  (Path' Synthesis))

(def: .public path/pop
  Path
  #Pop)

(template [<name> <kind>]
  [(template: .public (<name> content)
     [(.<| #..Access
           <kind>
           content)])]

  [path/side   #..Side]
  [path/member #..Member]
  )

(template [<name> <kind> <side>]
  [(template: .public (<name> content)
     [(.<| #..Access
           <kind>
           <side>
           content)])]

  [side/left    #..Side   #.Left]
  [side/right   #..Side   #.Right]
  [member/left  #..Member #.Left]
  [member/right #..Member #.Right]
  )

(template [<name> <tag>]
  [(template: .public (<name> content)
     [(<tag> content)])]

  [path/bind #..Bind]
  [path/then #..Then]
  )

(template [<name> <tag>]
  [(template: .public (<name> left right)
     [(<tag> [left right])])]

  [path/alt  #..Alt]
  [path/seq  #..Seq]
  )

(type: .public Abstraction
  (Abstraction' Synthesis))

(type: .public Apply
  (Apply' Synthesis))

(def: .public unit Text "")

(template [<with> <query> <tag> <type>]
  [(def: .public (<with> value)
     (-> <type> (All [a] (-> (Operation a) (Operation a))))
     (extension.temporary (set@ <tag> value)))

   (def: .public <query>
     (Operation <type>)
     (extension.read (get@ <tag>)))]

  [with_locals    locals    #locals    Nat]
  [with_currying? currying? #currying? Bit]
  )

(def: .public with_new_local
  (All [a] (-> (Operation a) (Operation a)))
  (<<| (do phase.monad
         [locals ..locals])
       (..with_locals (inc locals))))

(template [<name> <tag>]
  [(template: .public (<name> content)
     [(#..Primitive (<tag> content))])]

  [bit  #..Bit]
  [i64  #..I64]
  [f64  #..F64]
  [text #..Text]
  )

(template [<name> <tag>]
  [(template: .public (<name> content)
     [(<| #..Structure
          <tag>
          content)])]

  [variant #analysis.Variant]
  [tuple   #analysis.Tuple]
  )

(template [<name> <tag>]
  [(template: .public (<name> content)
     [(.<| #..Reference
           <tag>
           content)])]

  [variable         reference.variable]
  [constant         reference.constant]
  [variable/local   reference.local]
  [variable/foreign reference.foreign]
  )

(template [<name> <family> <tag>]
  [(template: .public (<name> content)
     [(.<| #..Control
           <family>
           <tag>
           content)])]

  [branch/case          #..Branch   #..Case]
  [branch/let           #..Branch   #..Let]
  [branch/if            #..Branch   #..If]
  [branch/get           #..Branch   #..Get]

  [loop/recur           #..Loop     #..Recur]
  [loop/scope           #..Loop     #..Scope]

  [function/abstraction #..Function #..Abstraction]
  [function/apply       #..Function #..Apply]
  )

(def: .public (%path' %then value)
  (All [a] (-> (Format a) (Format (Path' a))))
  (case value
    #Pop
    "_"

    (#Bit_Fork when then else)
    (format "(?"
            " " (%.bit when) " " (%path' %then then)
            (case else
              (#.Some else)
              (format " " (%.bit (not when)) " " (%path' %then else))

              #.None
              "")
            ")")
    
    (^template [<tag> <format>]
      [(<tag> item)
       (|> (#.Item item)
           (list\map (function (_ [test then])
                       (format (<format> test) " " (%path' %then then))))
           (text.join_with " ")
           (text.enclosed ["(? " ")"]))])
    ([#I64_Fork (|>> .int %.int)]
     [#F64_Fork %.frac]
     [#Text_Fork %.text])
    
    (#Access access)
    (case access
      (#Side side)
      (case side
        (#.Left lefts)
        (format "(" (%.nat lefts) " #0" ")")
        
        (#.Right lefts)
        (format "(" (%.nat lefts) " #1" ")"))
      
      (#Member member)
      (case member
        (#.Left lefts)
        (format "[" (%.nat lefts) " #0" "]")
        
        (#.Right lefts)
        (format "[" (%.nat lefts) " #1" "]")))
    
    (#Bind register)
    (format "(@ " (%.nat register) ")")
    
    (#Alt left right)
    (format "(Variant " (%path' %then left) " " (%path' %then right) ")")
    
    (#Seq left right)
    (format "(Tuple " (%path' %then left) " " (%path' %then right) ")")
    
    (#Then then)
    (|> (%then then)
        (text.enclosed ["(! " ")"]))))

(def: .public (%synthesis value)
  (Format Synthesis)
  (case value
    (#Primitive primitive)
    (case primitive
      (^template [<pattern> <format>]
        [(<pattern> value)
         (<format> value)])
      ([#Bit  %.bit]
       [#F64  %.frac]
       [#Text %.text])
      
      (#I64 value)
      (%.int (.int value)))

    (#Structure structure)
    (case structure
      (#analysis.Variant [lefts right? content])
      (|> (%synthesis content)
          (format (%.nat lefts) " " (%.bit right?) " ")
          (text.enclosed ["(" ")"]))
      
      (#analysis.Tuple members)
      (|> members
          (list\map %synthesis)
          (text.join_with " ")
          (text.enclosed ["[" "]"])))

    (#Reference reference)
    (reference.format reference)

    (#Control control)
    (case control
      (#Function function)
      (case function
        (#Abstraction [environment arity body])
        (let [environment' (|> environment
                               (list\map %synthesis)
                               (text.join_with " ")
                               (text.enclosed ["[" "]"]))]
          (|> (format environment' " " (%.nat arity) " " (%synthesis body))
              (text.enclosed ["(#function " ")"])))
        
        (#Apply func args)
        (|> args
            (list\map %synthesis)
            (text.join_with " ")
            (format (%synthesis func) " ")
            (text.enclosed ["(" ")"])))

      (#Branch branch)
      (case branch
        (#Let input register body)
        (|> (format (%.nat register) " " (%synthesis input) " " (%synthesis body))
            (text.enclosed ["(#let " ")"]))
        
        (#If test then else)
        (|> (format (%synthesis test) " " (%synthesis then) " " (%synthesis else))
            (text.enclosed ["(#if " ")"]))

        (#Get members record)
        (|> (format (%.list (%path' %synthesis)
                            (list\map (|>> #Member #Access) members))
                    " " (%synthesis record))
            (text.enclosed ["(#get " ")"]))
        
        (#Case input path)
        (|> (format (%synthesis input) " " (%path' %synthesis path))
            (text.enclosed ["(#case " ")"])))
      
      (#Loop loop)
      (case loop
        (#Scope scope)
        (|> (format (%.nat (get@ #start scope))
                    " " (|> (get@ #inits scope)
                            (list\map %synthesis)
                            (text.join_with " ")
                            (text.enclosed ["[" "]"]))
                    " " (%synthesis (get@ #iteration scope)))
            (text.enclosed ["(#loop " ")"]))
        
        (#Recur args)
        (|> args
            (list\map %synthesis)
            (text.join_with " ")
            (text.enclosed ["(#recur " ")"]))))

    (#Extension [name args])
    (|> (list\map %synthesis args)
        (text.join_with " ")
        (format (%.text name) " ")
        (text.enclosed ["(" ")"]))))

(def: .public %path
  (Format Path)
  (%path' %synthesis))

(implementation: .public primitive_equivalence
  (Equivalence Primitive)
  
  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag> <eq> <format>]
        [[(<tag> reference') (<tag> sample')]
         (<eq> reference' sample')])
      ([#Bit  bit\=  %.bit]
       [#F64  f.=    %.frac]
       [#Text text\= %.text])

      [(#I64 reference') (#I64 sample')]
      (i.= (.int reference') (.int sample'))

      _
      false)))

(implementation: primitive_hash
  (Hash Primitive)

  (def: &equivalence ..primitive_equivalence)

  (def: hash
    (|>> (case> (^template [<tag> <hash>]
                  [(<tag> value')
                   (\ <hash> hash value')])
                ([#Bit  bit.hash]
                 [#F64  f.hash]
                 [#Text text.hash]
                 [#I64  i64.hash])))))

(def: side_equivalence
  (Equivalence Side)
  (sum.equivalence n.equivalence n.equivalence))

(def: member_equivalence
  (Equivalence Member)
  (sum.equivalence n.equivalence n.equivalence))

(def: member_hash
  (Hash Member)
  (sum.hash n.hash n.hash))

(implementation: .public access_equivalence
  (Equivalence Access)
  
  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag> <equivalence>]
        [[(<tag> reference) (<tag> sample)]
         (\ <equivalence> = reference sample)])
      ([#Side ..side_equivalence]
       [#Member ..member_equivalence])

      _
      false)))

(implementation: access_hash
  (Hash Access)

  (def: &equivalence ..access_equivalence)
  
  (def: (hash value)
    (let [sub_hash (sum.hash n.hash n.hash)]
      (case value
        (^template [<tag>]
          [(<tag> value)
           (\ sub_hash hash value)])
        ([#Side]
         [#Member])))))

(implementation: .public (path'_equivalence equivalence)
  (All [a] (-> (Equivalence a) (Equivalence (Path' a))))

  (def: (= reference sample)
    (case [reference sample]
      [#Pop #Pop]
      true

      [(#Bit_Fork reference_when reference_then reference_else)
       (#Bit_Fork sample_when sample_then sample_else)]
      (and (bit\= reference_when sample_when)
           (= reference_then sample_then)
           (\ (maybe.equivalence =) = reference_else sample_else))

      (^template [<tag> <equivalence>]
        [[(<tag> reference_item)
          (<tag> sample_item)]
         (\ (list.equivalence (product.equivalence <equivalence> =)) =
            (#.Item reference_item)
            (#.Item sample_item))])
      ([#I64_Fork i64.equivalence]
       [#F64_Fork f.equivalence]
       [#Text_Fork text.equivalence])
      
      (^template [<tag> <equivalence>]
        [[(<tag> reference') (<tag> sample')]
         (\ <equivalence> = reference' sample')])
      ([#Access ..access_equivalence]
       [#Then   equivalence])
      
      [(#Bind reference') (#Bind sample')]
      (n.= reference' sample')

      (^template [<tag>]
        [[(<tag> leftR rightR) (<tag> leftS rightS)]
         (and (= leftR leftS)
              (= rightR rightS))])
      ([#Alt]
       [#Seq])

      _
      false)))

(implementation: (path'_hash super)
  (All [a] (-> (Hash a) (Hash (Path' a))))

  (def: &equivalence
    (..path'_equivalence (\ super &equivalence)))
  
  (def: (hash value)
    (case value
      #Pop
      2

      (#Access access)
      (n.* 3 (\ ..access_hash hash access))

      (#Bind register)
      (n.* 5 (\ n.hash hash register))

      (#Bit_Fork when then else)
      ($_ n.* 7
          (\ bit.hash hash when)
          (hash then)
          (\ (maybe.hash (path'_hash super)) hash else))

      (^template [<factor> <tag> <hash>]
        [(<tag> item)
         (let [case_hash (product.hash <hash>
                                       (path'_hash super))
               item_hash (product.hash case_hash (list.hash case_hash))]
           (n.* <factor> (\ item_hash hash item)))])
      ([11 #I64_Fork i64.hash]
       [13 #F64_Fork f.hash]
       [17 #Text_Fork text.hash])

      (^template [<factor> <tag>]
        [(<tag> fork)
         (let [recur_hash (path'_hash super)
               fork_hash (product.hash recur_hash recur_hash)]
           (n.* <factor> (\ fork_hash hash fork)))])
      ([19 #Alt]
       [23 #Seq])

      (#Then body)
      (n.* 29 (\ super hash body))
      )))

(implementation: (branch_equivalence (^open "\."))
  (All [a] (-> (Equivalence a) (Equivalence (Branch a))))

  (def: (= reference sample)
    (case [reference sample]
      [(#Let [reference_input reference_register reference_body])
       (#Let [sample_input sample_register sample_body])]
      (and (\= reference_input sample_input)
           (n.= reference_register sample_register)
           (\= reference_body sample_body))

      [(#If [reference_test reference_then reference_else])
       (#If [sample_test sample_then sample_else])]
      (and (\= reference_test sample_test)
           (\= reference_then sample_then)
           (\= reference_else sample_else))
      
      [(#Get [reference_path reference_record])
       (#Get [sample_path sample_record])]
      (and (\ (list.equivalence ..member_equivalence) = reference_path sample_path)
           (\= reference_record sample_record))
      
      [(#Case [reference_input reference_path])
       (#Case [sample_input sample_path])]
      (and (\= reference_input sample_input)
           (\ (path'_equivalence \=) = reference_path sample_path))
      
      _
      false)))

(implementation: (branch_hash super)
  (All [a] (-> (Hash a) (Hash (Branch a))))

  (def: &equivalence
    (..branch_equivalence (\ super &equivalence)))
  
  (def: (hash value)
    (case value
      (#Let [input register body])
      ($_ n.* 2
          (\ super hash input)
          (\ n.hash hash register)
          (\ super hash body))

      (#If [test then else])
      ($_ n.* 3
          (\ super hash test)
          (\ super hash then)
          (\ super hash else))
      
      (#Get [path record])
      ($_ n.* 5
          (\ (list.hash ..member_hash) hash path)
          (\ super hash record))
      
      (#Case [input path])
      ($_ n.* 7
          (\ super hash input)
          (\ (..path'_hash super) hash path))
      )))

(implementation: (loop_equivalence (^open "\."))
  (All [a] (-> (Equivalence a) (Equivalence (Loop a))))

  (def: (= reference sample)
    (case [reference sample]
      [(#Scope [reference_start reference_inits reference_iteration])
       (#Scope [sample_start sample_inits sample_iteration])]
      (and (n.= reference_start sample_start)
           (\ (list.equivalence \=) = reference_inits sample_inits)
           (\= reference_iteration sample_iteration))

      [(#Recur reference) (#Recur sample)]
      (\ (list.equivalence \=) = reference sample)
      
      _
      false)))

(implementation: (loop_hash super)
  (All [a] (-> (Hash a) (Hash (Loop a))))

  (def: &equivalence
    (..loop_equivalence (\ super &equivalence)))
  
  (def: (hash value)
    (case value
      (#Scope [start inits iteration])
      ($_ n.* 2
          (\ n.hash hash start)
          (\ (list.hash super) hash inits)
          (\ super hash iteration))

      (#Recur resets)
      ($_ n.* 3
          (\ (list.hash super) hash resets))
      )))

(implementation: (function_equivalence (^open "\."))
  (All [a] (-> (Equivalence a) (Equivalence (Function a))))

  (def: (= reference sample)
    (case [reference sample]
      [(#Abstraction [reference_environment reference_arity reference_body])
       (#Abstraction [sample_environment sample_arity sample_body])]
      (and (\ (list.equivalence \=) = reference_environment sample_environment)
           (n.= reference_arity sample_arity)
           (\= reference_body sample_body))
      
      [(#Apply [reference_abstraction reference_arguments])
       (#Apply [sample_abstraction sample_arguments])]
      (and (\= reference_abstraction sample_abstraction)
           (\ (list.equivalence \=) = reference_arguments sample_arguments))
      
      _
      false)))

(implementation: (function_hash super)
  (All [a] (-> (Hash a) (Hash (Function a))))

  (def: &equivalence
    (..function_equivalence (\ super &equivalence)))
  
  (def: (hash value)
    (case value
      (#Abstraction [environment arity body])
      ($_ n.* 2
          (\ (list.hash super) hash environment)
          (\ n.hash hash arity)
          (\ super hash body))
      
      (#Apply [abstraction arguments])
      ($_ n.* 3
          (\ super hash abstraction)
          (\ (list.hash super) hash arguments))
      )))

(implementation: (control_equivalence (^open "\."))
  (All [a] (-> (Equivalence a) (Equivalence (Control a))))

  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag> <equivalence>]
        [[(<tag> reference) (<tag> sample)]
         (\ (<equivalence> \=) = reference sample)])
      ([#Branch ..branch_equivalence]
       [#Loop ..loop_equivalence]
       [#Function ..function_equivalence])
      
      _
      false)))

(implementation: (control_hash super)
  (All [a] (-> (Hash a) (Hash (Control a))))

  (def: &equivalence
    (..control_equivalence (\ super &equivalence)))

  (def: (hash value)
    (case value
      (^template [<factor> <tag> <hash>]
        [(<tag> value)
         (n.* <factor> (\ (<hash> super) hash value))])
      ([2 #Branch ..branch_hash]
       [3 #Loop ..loop_hash]
       [5 #Function ..function_hash])
      )))

(implementation: .public equivalence
  (Equivalence Synthesis)
  
  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag> <equivalence>]
        [[(<tag> reference') (<tag> sample')]
         (\ <equivalence> = reference' sample')])
      ([#Primitive ..primitive_equivalence]
       [#Structure (analysis.composite_equivalence =)]
       [#Reference reference.equivalence]
       [#Control (control_equivalence =)]
       [#Extension (extension.equivalence =)])

      _
      false)))

(def: .public path_equivalence
  (Equivalence Path)
  (path'_equivalence equivalence))

(implementation: .public hash
  (Hash Synthesis)

  (def: &equivalence ..equivalence)

  (def: (hash value)
    (let [recur_hash [..equivalence hash]]
      (case value
        (^template [<tag> <hash>]
          [(<tag> value)
           (\ <hash> hash value)])
        ([#Primitive ..primitive_hash]
         [#Structure (analysis.composite_hash recur_hash)]
         [#Reference reference.hash]
         [#Control (..control_hash recur_hash)]
         [#Extension (extension.hash recur_hash)])))))

(template: .public (!bind_top register thenP)
  [($_ ..path/seq
       (#..Bind register)
       #..Pop
       thenP)])

(template: .public (!multi_pop nextP)
  [($_ ..path/seq
       #..Pop
       #..Pop
       nextP)])

## TODO: There are sister patterns to the simple side checks for tuples.
## These correspond to the situation where tuple members are accessed
## and bound to variables, but those variables are never used, so they
## become POPs.
## After re-implementing unused-variable-elimination, must add those
## pattern-optimizations again, since a lot of BINDs will become POPs
## and thus will result in useless code being generated.
(template [<name> <side>]
  [(template: .public (<name> idx nextP)
     [($_ ..path/seq
          (<side> idx)
          #..Pop
          nextP)])]

  [simple_left_side ..side/left]
  [simple_right_side ..side/right]
  )
