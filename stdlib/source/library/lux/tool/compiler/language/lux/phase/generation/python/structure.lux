(.module:
  [library
   [lux {"-" [Variant Tuple]}
    [abstract
     ["[0]" monad {"+" [do]}]]
    [target
     ["_" python {"+" [Expression]}]]]]
  ["[0]" // "_"
   ["[1][0]" runtime {"+" [Operation Phase Generator]}]
   ["[1][0]" primitive]
   ["///[1]" //// "_"
    [analysis {"+" [Variant Tuple]}]
    ["[1][0]" synthesis {"+" [Synthesis]}]
    ["//[1]" /// "_"
     ["[1][0]" phase ("[1]\[0]" monad)]]]])

(def: .public (tuple generate archive elemsS+)
  (Generator (Tuple Synthesis))
  (case elemsS+
    #.End
    (///////phase\in (//primitive.text /////synthesis.unit))

    (#.Item singletonS #.End)
    (generate archive singletonS)

    _
    (|> elemsS+
        (monad.each ///////phase.monad (generate archive))
        (///////phase\each _.list))))

(def: .public (variant generate archive [lefts right? valueS])
  (Generator (Variant Synthesis))
  (let [tag (if right?
              (++ lefts)
              lefts)]
    (///////phase\each (//runtime.variant tag right?)
                       (generate archive valueS))))
