(.module:
  [library
   [lux #*
    [abstract
     ["." monad (#+ do)]]
    [target
     ["_" python (#+ Expression)]]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Generator)]
   ["#." primitive]
   ["///#" //// #_
    [analysis (#+ Variant Tuple)]
    ["#." synthesis (#+ Synthesis)]
    ["//#" /// #_
     ["#." phase ("#\." monad)]]]])

(def: #export (tuple generate archive elemsS+)
  (Generator (Tuple Synthesis))
  (case elemsS+
    #.End
    (///////phase\in (//primitive.text /////synthesis.unit))

    (#.Item singletonS #.End)
    (generate archive singletonS)

    _
    (|> elemsS+
        (monad.map ///////phase.monad (generate archive))
        (///////phase\map _.list))))

(def: #export (variant generate archive [lefts right? valueS])
  (Generator (Variant Synthesis))
  (let [tag (if right?
              (inc lefts)
              lefts)]
    (///////phase\map (//runtime.variant tag right?)
                      (generate archive valueS))))
