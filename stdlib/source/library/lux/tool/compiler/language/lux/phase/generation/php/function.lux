(.module:
  [library
   [lux (#- Global function)
    [abstract
     ["." monad (#+ do)]]
    [control
     pipe]
    [data
     ["." product]
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor fold)]]]
    [target
     ["_" php (#+ Var Global Expression Argument Label Statement)]]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Phase! Generator)]
   ["#." reference]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["//#" /// #_
     [analysis (#+ Variant Tuple Abstraction Application Analysis)]
     [synthesis (#+ Synthesis)]
     ["#." generation (#+ Context)]
     ["//#" /// #_
      [arity (#+ Arity)]
      ["#." phase ("#\." monad)]
      [reference
       [variable (#+ Register Variable)]]]]]])

(def: #export (apply expression archive [functionS argsS+])
  (Generator (Application Synthesis))
  (do {! ///////phase.monad}
    [functionG (expression archive functionS)
     argsG+ (monad.map ! (expression archive) argsS+)]
    (in (_.apply/*' argsG+ functionG))))

(def: capture
  (-> Register Var)
  (|>> (///reference.foreign //reference.system) :assume))

(def: input
  (|>> inc //case.register))

(def: (@scope function_name)
  (-> Context Label)
  (_.label (format (///reference.artifact function_name) "_scope")))

(def: (with_closure inits @selfG @selfL body!)
  (-> (List Expression) Global Var Statement [Statement Expression])
  (case inits
    #.End
    [($_ _.then
         (_.set! @selfL (_.closure (list (_.reference @selfL)) (list) body!))
         (_.set! @selfG @selfL))
     @selfG]

    _
    (let [@inits (|> (list.enumeration inits)
                     (list\map (|>> product.left ..capture)))]
      [(_.set! @selfG (_.closure (list) (list\map _.parameter @inits)
                                 ($_ _.then
                                     (_.set! @selfL (_.closure (list& (_.reference @selfL) (list\map _.reference @inits))
                                                               (list)
                                                               body!))
                                     (_.return @selfL))))
       (_.apply/* inits @selfG)])))

(def: #export (function statement expression archive [environment arity bodyS])
  (-> Phase! (Generator (Abstraction Synthesis)))
  (do {! ///////phase.monad}
    [[function_name body!] (/////generation.with_new_context archive
                             (do !
                               [@scope (\ ! map ..@scope
                                          (/////generation.context archive))]
                               (/////generation.with_anchor [1 @scope]
                                 (statement expression archive bodyS))))
     closureG+ (monad.map ! (expression archive) environment)
     .let [@curried (_.var "curried")
           arityG (|> arity .int _.int)
           @num_args (_.var "num_args")
           @scope (..@scope function_name)
           @selfG (_.global (///reference.artifact function_name))
           @selfL (_.var (///reference.artifact function_name))
           initialize_self! (_.set! (//case.register 0) @selfL)
           initialize! (list\fold (.function (_ post pre!)
                                    ($_ _.then
                                        pre!
                                        (_.set! (..input post) (_.item (|> post .int _.int) @curried))))
                                  initialize_self!
                                  (list.indices arity))]
     .let [[definition instantiation] (..with_closure closureG+ @selfG @selfL
                                        ($_ _.then
                                            (_.set! @num_args (_.func_num_args/0 []))
                                            (_.set! @curried (_.func_get_args/0 []))
                                            (_.cond (list [(|> @num_args (_.=== arityG))
                                                           ($_ _.then
                                                               initialize!
                                                               (_.set_label @scope)
                                                               body!)]
                                                          [(|> @num_args (_.> arityG))
                                                           (let [arity_inputs (_.array_slice/3 [@curried (_.int +0) arityG])
                                                                 extra_inputs (_.array_slice/2 [@curried arityG])
                                                                 next (_.call_user_func_array/2 [@selfL arity_inputs])]
                                                             (_.return (_.call_user_func_array/2 [next extra_inputs])))])
                                                    ## (|> @num_args (_.< arityG))
                                                    (let [@missing (_.var "missing")]
                                                      (_.return (<| (_.closure (list (_.reference @selfL) (_.reference @curried)) (list))
                                                                    ($_ _.then
                                                                        (_.set! @missing (_.func_get_args/0 []))
                                                                        (_.return (_.call_user_func_array/2 [@selfL (_.array_merge/+ @curried (list @missing))])))))))
                                            ))]
     _ (/////generation.execute! definition)
     _ (/////generation.save! (product.right function_name) definition)]
    (in instantiation)))
