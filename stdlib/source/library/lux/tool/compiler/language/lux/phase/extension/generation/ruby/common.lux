(.using
 [library
  [lux "*"
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" function]
    ["[0]" try]
    ["<>" parser
     ["<s>" synthesis (.only Parser)]]]
   [data
    ["[0]" product]
    ["[0]" text
     ["%" format (.only format)]]
    [collection
     ["[0]" dictionary]
     ["[0]" list ("[1]#[0]" functor mix)]]]
   [macro
    ["^" pattern]]
   [math
    [number
     ["f" frac]]]
   [target
    ["_" ruby (.only Expression Statement)]]]]
 ["[0]" //// "_"
  ["/" bundle]
  ["/[1]" // "_"
   ["[0]" extension]
   [generation
    [extension (.only Nullary Unary Binary Trinary
                      nullary unary binary trinary)]
    ["//" ruby "_"
     ["[1][0]" runtime (.only Operation Phase Phase! Handler Bundle Generator)]
     ["[1][0]" primitive]
     ["[1][0]" structure]
     ["[1][0]" reference]
     ["[1][0]" function]
     ["[1][0]" case]
     ["[1][0]" loop]]]
   [//
    ["[0]" synthesis (.only %synthesis)]
    ["[0]" generation]
    [///
     ["[1]" phase ("[1]#[0]" monad)]]]]])

(def: .public (custom [parser handler])
  (All (_ s)
    (-> [(Parser s)
         (-> Text (Generator s))]
        Handler))
  (function (_ extension_name phase archive input)
    (case (<s>.result parser input)
      {try.#Success input'}
      (handler extension_name phase archive input')

      {try.#Failure error}
      (/////.except extension.invalid_syntax [extension_name %synthesis input]))))

(def: .public (statement expression archive synthesis)
  Phase!
  (case synthesis
    ... TODO: Get rid of this ASAP
    {synthesis.#Extension "lux syntax char case!" parameters}
    (do /////.monad
      [body (expression archive synthesis)]
      (in (as Statement
              body)))
    
    (^.template [<tag>]
      [(pattern (<tag> value))
       (/////#each _.return (expression archive synthesis))])
    ([synthesis.bit]
     [synthesis.i64]
     [synthesis.f64]
     [synthesis.text]
     [synthesis.variant]
     [synthesis.tuple]
     [synthesis.branch/get]
     [synthesis.function/apply])

    (^.template [<tag>]
      [(pattern {<tag> value})
       (/////#each _.return (expression archive synthesis))])
    ([synthesis.#Reference]
     [synthesis.#Extension])

    (pattern (synthesis.branch/case case))
    (//case.case! false statement expression archive case)

    (^.template [<tag> <generator>]
      [(pattern (<tag> value))
       (<generator> statement expression archive value)])
    ([synthesis.branch/exec //case.exec!]
     [synthesis.branch/let //case.let!]
     [synthesis.branch/if //case.if!]
     [synthesis.loop/scope //loop.scope!]
     [synthesis.loop/again //loop.again!])

    (pattern (synthesis.function/abstraction abstraction))
    (/////#each _.return (//function.function statement expression archive abstraction))
    ))

... TODO: Get rid of this ASAP
(def: lux::syntax_char_case!
  (..custom [(all <>.and
                  <s>.any
                  <s>.any
                  (<>.some (<s>.tuple (all <>.and
                                           (<s>.tuple (<>.many <s>.i64))
                                           <s>.any))))
             (function (_ extension_name phase archive [input else conditionals])
               (do [! /////.monad]
                 [inputG (phase archive input)
                  else! (statement phase archive else)
                  @input (# ! each _.local (generation.symbol "input"))
                  conditionals! (is (Operation (List [Expression Statement]))
                                    (monad.each ! (function (_ [chars branch])
                                                    (do !
                                                      [branch! (statement phase archive branch)]
                                                      (in [(|> chars
                                                               (list#each (|>> .int _.int (_.= @input)))
                                                               (list#mix (function (_ clause total)
                                                                           (if (same? _.nil total)
                                                                             clause
                                                                             (_.or clause total)))
                                                                         _.nil))
                                                           branch!])))
                                                conditionals))
                  ... .let [closure (_.lambda {.#None} (list @input)
                  ...                         (list#mix (function (_ [test then] else)
                  ...                                     (_.if test (_.return then) else))
                  ...                                   (_.return else!)
                  ...                                   conditionals!))]
                  ]
                 ... (in (_.apply_lambda (list inputG) closure))
                 (in (<| (as Expression)
                         (is Statement)
                         (all _.then
                              (_.set (list @input) inputG)
                              (list#mix (function (_ [test then!] else!)
                                          (_.if test then! else!))
                                        else!
                                        conditionals!))))))]))

(def: lux_procs
  Bundle
  (|> /.empty
      (/.install "syntax char case!" lux::syntax_char_case!)
      (/.install "is" (binary (function (_ [reference subject])
                                (_.do "equal?" (list reference) {.#None} subject))))
      (/.install "try" (unary //runtime.lux//try))))

(def: i64_procs
  Bundle
  (<| (/.prefix "i64")
      (|> /.empty
          (/.install "and" (binary (product.uncurried //runtime.i64##and)))
          (/.install "or" (binary (product.uncurried //runtime.i64##or)))
          (/.install "xor" (binary (product.uncurried //runtime.i64##xor)))
          (/.install "left-shift" (binary (product.uncurried //runtime.i64##left_shifted)))
          (/.install "right-shift" (binary (product.uncurried //runtime.i64##right_shifted)))
          
          (/.install "<" (binary (product.uncurried _.<)))
          (/.install "=" (binary (product.uncurried _.=)))
          (/.install "+" (binary (product.uncurried //runtime.i64##+)))
          (/.install "-" (binary (product.uncurried //runtime.i64##-)))
          (/.install "*" (binary (product.uncurried //runtime.i64##*)))
          (/.install "/" (binary (product.uncurried //runtime.i64##/)))
          (/.install "%" (binary (function (_ [parameter subject])
                                   (_.do "remainder" (list parameter) {.#None} subject))))
          
          (/.install "f64" (unary (_./ (_.float +1.0))))
          (/.install "char" (unary //runtime.i64##char))
          )))

(def: f64_procs
  Bundle
  (<| (/.prefix "f64")
      (|> /.empty
          (/.install "+" (binary (product.uncurried _.+)))
          (/.install "-" (binary (product.uncurried _.-)))
          (/.install "*" (binary (product.uncurried _.*)))
          (/.install "/" (binary (product.uncurried _./)))
          (/.install "%" (binary (function (_ [parameter subject])
                                   (_.do "remainder" (list parameter) {.#None} subject))))
          (/.install "=" (binary (product.uncurried _.=)))
          (/.install "<" (binary (product.uncurried _.<)))
          (/.install "i64" (unary (_.do "floor" (list) {.#None})))
          (/.install "encode" (unary (_.do "to_s" (list) {.#None})))
          (/.install "decode" (unary //runtime.f64//decode)))))

(def: (text//char [subjectO paramO])
  (Binary Expression)
  (//runtime.text//char subjectO paramO))

(def: (text//clip [paramO extraO subjectO])
  (Trinary Expression)
  (//runtime.text//clip paramO extraO subjectO))

(def: (text//index [startO partO textO])
  (Trinary Expression)
  (//runtime.text//index textO partO startO))

(def: text_procs
  Bundle
  (<| (/.prefix "text")
      (|> /.empty
          (/.install "=" (binary (product.uncurried _.=)))
          (/.install "<" (binary (product.uncurried _.<)))
          (/.install "concat" (binary (product.uncurried (function.flipped _.+))))
          (/.install "index" (trinary text//index))
          (/.install "size" (unary (_.the "length")))
          (/.install "char" (binary (product.uncurried //runtime.text//char)))
          (/.install "clip" (trinary text//clip))
          )))

(def: (io//log! messageG)
  (Unary Expression)
  (|> (_.print/2 messageG (_.string text.new_line))
      (_.or //runtime.unit)))

(def: io//error!
  (Unary Expression)
  _.raise)

(def: io_procs
  Bundle
  (<| (/.prefix "io")
      (|> /.empty
          (/.install "log" (unary ..io//log!))
          (/.install "error" (unary ..io//error!))
          )))

(def: .public bundle
  Bundle
  (<| (/.prefix "lux")
      (|> lux_procs
          (dictionary.composite ..i64_procs)
          (dictionary.composite ..f64_procs)
          (dictionary.composite ..text_procs)
          (dictionary.composite ..io_procs)
          )))
