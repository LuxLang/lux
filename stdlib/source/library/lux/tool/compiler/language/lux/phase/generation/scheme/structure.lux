(.using
 [library
  [lux (.full)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    [collection
     ["[0]" list]]]
   [target
    ["_" scheme (.only Expression)]]]]
 ["[0]" // "_"
  ["[1][0]" runtime (.only Operation Phase Generator)]
  ["[1][0]" primitive]
  ["///[1]" //// "_"
   [analysis (.only Variant Tuple)]
   ["[1][0]" synthesis (.only Synthesis)]
   ["//[1]" /// "_"
    ["[1][0]" phase ("[1]#[0]" monad)]]]])

(def: .public (tuple expression archive elemsS+)
  (Generator (Tuple Synthesis))
  (case elemsS+
    {.#End}
    (///////phase#in (//primitive.text /////synthesis.unit))

    {.#Item singletonS {.#End}}
    (expression archive singletonS)

    _
    (|> elemsS+
        (monad.each ///////phase.monad (expression archive))
        (///////phase#each _.vector/*))))

(def: .public (variant expression archive [lefts right? valueS])
  (Generator (Variant Synthesis))
  (let [tag (if right?
              (++ lefts)
              lefts)]
    (///////phase#each (|>> [tag right?] //runtime.variant)
                       (expression archive valueS))))
