(.module:
  [library
   [lux #*
    [abstract
     ["." monad (#+ do)]]
    [data
     [collection
      ["." list]]]
    [target
     ["_" scheme (#+ Expression)]]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Generator)]
   ["#." primitive]
   ["///#" //// #_
    [analysis (#+ Variant Tuple)]
    ["#." synthesis (#+ Synthesis)]
    ["//#" /// #_
     ["#." phase ("#\." monad)]]]])

(def: .public (tuple expression archive elemsS+)
  (Generator (Tuple Synthesis))
  (case elemsS+
    #.End
    (///////phase\in (//primitive.text /////synthesis.unit))

    (#.Item singletonS #.End)
    (expression archive singletonS)

    _
    (|> elemsS+
        (monad.each ///////phase.monad (expression archive))
        (///////phase\each _.vector/*))))

(def: .public (variant expression archive [lefts right? valueS])
  (Generator (Variant Synthesis))
  (let [tag (if right?
              (++ lefts)
              lefts)]
    (///////phase\each (|>> [tag right?] //runtime.variant)
                       (expression archive valueS))))
