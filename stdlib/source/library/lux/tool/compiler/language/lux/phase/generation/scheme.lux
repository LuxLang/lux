(.using
  [library
   [lux "*"
    [abstract
     [monad {"+" do}]]
    [target
     ["_" scheme]]]]
  ["[0]" / "_"
   [runtime {"+" Phase}]
   ["[1][0]" primitive]
   ["[1][0]" structure]
   ["[1][0]" reference]
   ["[1][0]" case]
   ["[1][0]" loop]
   ["[1][0]" function]
   ["/[1]" // "_"
    ["[1][0]" reference]
    ["/[1]" // "_"
     ["[1][0]" extension]
     ["/[1]" // "_"
      [analysis {"+" }]
      ["[1][0]" synthesis]
      ["//[1]" /// "_"
       ["[1][0]" phase ("[1]#[0]" monad)]
       [reference {"+"}
        [variable {"+"}]]]]]]])

(def: .public (generate archive synthesis)
  Phase
  (case synthesis
    (^template [<tag> <generator>]
      [(^ (<tag> value))
       (//////phase#in (<generator> value))])
    ([////synthesis.bit  /primitive.bit]
     [////synthesis.i64  /primitive.i64]
     [////synthesis.f64  /primitive.f64]
     [////synthesis.text /primitive.text])

    {////synthesis.#Reference value}
    (//reference.reference /reference.system archive value)

    (^template [<tag> <generator>]
      [(^ (<tag> value))
       (<generator> generate archive value)])
    ([////synthesis.variant /structure.variant]
     [////synthesis.tuple /structure.tuple]
     [////synthesis.branch/let /case.let]
     [////synthesis.branch/if /case.if]
     [////synthesis.branch/get /case.get]
     [////synthesis.function/apply /function.apply]

     [////synthesis.branch/case /case.case]
     [////synthesis.loop/scope /loop.scope]
     [////synthesis.loop/again /loop.again]
     [////synthesis.function/abstraction /function.function])

    {////synthesis.#Extension extension}
    (///extension.apply archive generate extension)
    ))
