(.using
  [library
   [lux {"-" Type type}
    [data
     [collection
      ["[0]" list ("[1]#[0]" functor)]]]
    [target
     [jvm
      ["[0]" method {"+" Method}]
      ["_" bytecode {"+" Bytecode}]
      [constant
       [pool {"+" Resource}]]
      ["[0]" type {"+" Type}
       ["[0]" category {"+" Class}]]]]]]
  ["[0]" //
   ["[1][0]" new]
   ["/[1]" // "_"
    [field
     [variable
      ["[1][0]" foreign]]]
    ["/[1]" // "_"
     ["[1][0]" reference]
     [////
      [analysis {"+" Environment}]
      [synthesis {"+" Synthesis}]
      [///
       ["[0]" arity {"+" Arity}]]]]]])

(def: .public name "reset")

(def: .public (type class)
  (-> (Type Class) (Type category.Method))
  (type.method [(list) (list) class (list)]))

(def: (current_environment class)
  (-> (Type Class) (Environment Synthesis) (List (Bytecode Any)))
  (|>> list.size
       list.indices
       (list#each (///foreign.get class))))

(def: .public (method class environment arity)
  (-> (Type Class) (Environment Synthesis) Arity (Resource Method))
  (method.method //.modifier ..name
                 #0 (..type class)
                 (list)
                 {.#Some ($_ _.composite
                             (if (arity.multiary? arity)
                               (//new.instance' (..current_environment class environment) class environment arity)
                               ////reference.this)
                             _.areturn)}))
