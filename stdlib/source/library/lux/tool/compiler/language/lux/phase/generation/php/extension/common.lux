(.using
 [library
  [lux (.full)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" function]]
   [data
    ["[0]" product]
    ["[0]" text]
    [number
     ["f" frac]]
    [collection
     ["[0]" dictionary]]]
   [target
    ["_" php (.only Expression)]]]]
 ["[0]" /// "_"
  ["[1][0]" runtime (.only Operation Phase Handler Bundle)]
  ["[1][0]" primitive]
  [//
   [extension (.only Nullary Unary Binary Trinary
                     nullary unary binary trinary)]
   [//
    [extension
     ["[0]" bundle]]]]])

(def: lux_procs
  Bundle
  (|> bundle.empty
      (bundle.install "is" (binary (product.uncurried _.=)))
      (bundle.install "try" (unary ///runtime.lux//try))))

(def: i64_procs
  Bundle
  (<| (bundle.prefix "i64")
      (|> bundle.empty
          (bundle.install "and" (binary (product.uncurried _.bit_and)))
          (bundle.install "or" (binary (product.uncurried _.bit_or)))
          (bundle.install "xor" (binary (product.uncurried _.bit_xor)))
          (bundle.install "left-shift" (binary (product.uncurried _.bit_shl)))
          (bundle.install "logical-right-shift" (binary (product.uncurried ///runtime.i64//logic_right_shift)))
          (bundle.install "arithmetic-right-shift" (binary (product.uncurried _.bit_shr)))
          (bundle.install "=" (binary (product.uncurried _.=)))
          (bundle.install "+" (binary (product.uncurried _.+)))
          (bundle.install "-" (binary (product.uncurried _.-)))
          )))

(def: int_procs
  Bundle
  (<| (bundle.prefix "int")
      (|> bundle.empty
          (bundle.install "<" (binary (product.uncurried _.<)))
          (bundle.install "*" (binary (product.uncurried _.*)))
          (bundle.install "/" (binary (product.uncurried _./)))
          (bundle.install "%" (binary (product.uncurried _.%)))
          (bundle.install "frac" (unary _.floatval/1))
          (bundle.install "char" (unary _.chr/1)))))

(def: frac_procs
  Bundle
  (<| (bundle.prefix "frac")
      (|> bundle.empty
          (bundle.install "+" (binary (product.uncurried _.+)))
          (bundle.install "-" (binary (product.uncurried _.-)))
          (bundle.install "*" (binary (product.uncurried _.*)))
          (bundle.install "/" (binary (product.uncurried _./)))
          (bundle.install "%" (binary (product.uncurried _.%)))
          (bundle.install "=" (binary (product.uncurried _.=)))
          (bundle.install "<" (binary (product.uncurried _.<)))
          (bundle.install "int" (unary _.intval/1))
          (bundle.install "encode" (unary _.strval/1))
          (bundle.install "decode" (unary (|>> _.floatval/1 ///runtime.some)))
          )))

(def: (text//index [startO partO textO])
  (Trinary (Expression Any))
  (///runtime.text//index textO partO startO))

(def: text_procs
  Bundle
  (<| (bundle.prefix "text")
      (|> bundle.empty
          (bundle.install "=" (binary (product.uncurried _.=)))
          (bundle.install "<" (binary (product.uncurried _.<)))
          (bundle.install "concat" (binary (product.uncurried _.concat)))
          (bundle.install "index" (trinary text//index))
          (bundle.install "size" (unary _.strlen/1))
          (bundle.install "char" (binary (function (text//char [text idx])
                                           (|> text (_.item idx) _.ord/1))))
          (bundle.install "clip" (trinary (function (text//clip [from to text])
                                            (_.substr/3 [text from (_.- from to)]))))
          )))

(def: io_procs
  Bundle
  (<| (bundle.prefix "io")
      (|> bundle.empty
          (bundle.install "log" (unary (|>> (_.concat (_.string text.new_line)) _.print/1)))
          (bundle.install "error" (unary ///runtime.io//throw!))
          (bundle.install "exit" (unary _.exit/1))
          (bundle.install "current-time" (nullary (|>> _.time/0 (_.* (_.int +1,000))))))))

(def: .public bundle
  Bundle
  (<| (bundle.prefix "lux")
      (|> lux_procs
          (dictionary.composite i64_procs)
          (dictionary.composite int_procs)
          (dictionary.composite frac_procs)
          (dictionary.composite text_procs)
          (dictionary.composite io_procs)
          )))
