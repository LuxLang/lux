(.module:
  lux
  (lux (control [library
                 [monad {"+" [do]}]])
       (data [text]
             text/format
             (coll [list "list/" Functor<List>]
                   (dictionary ["dict" unordered {"+" [Dict]}])))
       [macro "macro/" Monad<Meta>])
  (luxc ["&" lang]
        (lang ["la" analysis]
              ["ls" synthesis]
              (host [ruby {"+" [Ruby Expression Statement]}])))
  [///]
  (/// ["[0]T" runtime])
  (// ["@" common]))

... (template [<name> <lua>]
...   [(def: (<name> _) @.Nullary <lua>)]

...   [lua//nil      "nil"]
...   [lua//table    "{}"]
...   )

... (def: (lua//global proc translate inputs)
...   (-> Text @.Proc)
...   (case inputs
...     (^ (list [_ {#.Text name}]))
...     (do macro.Monad<Meta>
...       []
...       (in name))

...     _
...     (&.throw @.Wrong_Syntax (@.wrong_syntax proc inputs))))

... (def: (lua//call proc translate inputs)
...   (-> Text @.Proc)
...   (case inputs
...     (^ (list& functionS argsS+))
...     (do [@ macro.Monad<Meta>]
...       [functionO (translate functionS)
...        argsO+ (monad.each @ translate argsS+)]
...       (in (lua.apply functionO argsO+)))

...     _
...     (&.throw @.Wrong_Syntax (@.wrong_syntax proc inputs))))

... (def: lua_procs
...   @.Bundle
...   (|> (dict.empty text.Hash<Text>)
...       (@.install "nil" (@.nullary lua//nil))
...       (@.install "table" (@.nullary lua//table))
...       (@.install "global" lua//global)
...       (@.install "call" lua//call)))

... (def: (table//call proc translate inputs)
...   (-> Text @.Proc)
...   (case inputs
...     (^ (list& tableS [_ {#.Text field}] argsS+))
...     (do [@ macro.Monad<Meta>]
...       [tableO (translate tableS)
...        argsO+ (monad.each @ translate argsS+)]
...       (in (lua.method field tableO argsO+)))

...     _
...     (&.throw @.Wrong_Syntax (@.wrong_syntax proc inputs))))

... (def: (table//get [fieldO tableO])
...   @.Binary
...   (runtimeT.lua//get tableO fieldO))

... (def: (table//set [fieldO valueO tableO])
...   @.Trinary
...   (runtimeT.lua//set tableO fieldO valueO))

... (def: table_procs
...   @.Bundle
...   (<| (@.prefix "table")
...       (|> (dict.empty text.Hash<Text>)
...           (@.install "call" table//call)
...           (@.install "get" (@.binary table//get))
...           (@.install "set" (@.trinary table//set)))))

(def: .public procedures
  @.Bundle
  (<| (@.prefix "lua")
      (dict.empty text.Hash<Text>)
      ... (|> lua_procs
      ...     (dict.merged table_procs))
      ))
