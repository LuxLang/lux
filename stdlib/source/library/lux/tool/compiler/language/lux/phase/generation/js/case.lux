(.module:
  [library
   [lux (#- case let if)
    [abstract
     ["." monad (#+ do)]]
    [data
     ["." maybe]
     ["." text]
     [collection
      ["." list ("#\." functor fold)]]]
    [math
     [number
      ["n" nat]]]
    [target
     ["_" js (#+ Expression Computation Var Statement)]]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Phase! Generator Generator!)]
   ["#." reference]
   ["#." primitive]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     ["#." synthesis #_
      ["#/." case]]
     ["/#" // #_
      ["#." synthesis (#+ Member Synthesis Path)]
      ["//#" /// #_
       [reference
        [variable (#+ Register)]]
       ["#." phase ("#\." monad)]
       [meta
        [archive (#+ Archive)]]]]]]])

(def: .public register
  (-> Register Var)
  (|>> (///reference.local //reference.system) :assume))

(def: .public (let expression archive [valueS register bodyS])
  (Generator [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueO (expression archive valueS)
     bodyO (expression archive bodyS)]
    ... TODO: Find some way to do 'let' without paying the price of the closure.
    (in (_.apply/* (_.closure (list (..register register))
                              (_.return bodyO))
                   (list valueO)))))

(def: .public (let! statement expression archive [valueS register bodyS])
  (Generator! [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueO (expression archive valueS)
     bodyO (statement expression archive bodyS)]
    (in ($_ _.then
            (_.define (..register register) valueO)
            bodyO))))

(def: .public (if expression archive [testS thenS elseS])
  (Generator [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [testO (expression archive testS)
     thenO (expression archive thenS)
     elseO (expression archive elseS)]
    (in (_.? testO thenO elseO))))

(def: .public (if! statement expression archive [testS thenS elseS])
  (Generator! [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [testO (expression archive testS)
     thenO (statement expression archive thenS)
     elseO (statement expression archive elseS)]
    (in (_.if testO
          thenO
          elseO))))

(def: .public (get expression archive [pathP valueS])
  (Generator [(List Member) Synthesis])
  (do ///////phase.monad
    [valueO (expression archive valueS)]
    (in (list\fold (function (_ side source)
                     (.let [method (.case side
                                     (^template [<side> <accessor>]
                                       [(<side> lefts)
                                        (<accessor> (_.i32 (.int lefts)))])
                                     ([#.Left  //runtime.tuple//left]
                                      [#.Right //runtime.tuple//right]))]
                       (method source)))
                   valueO
                   (list.reversed pathP)))))

(def: @savepoint (_.var "lux_pm_cursor_savepoint"))
(def: @cursor (_.var "lux_pm_cursor"))
(def: @temp (_.var "lux_pm_temp"))

(def: (push_cursor! value)
  (-> Expression Statement)
  (_.statement (|> @cursor (_.do "push" (list value)))))

(def: peek_and_pop_cursor
  Expression
  (|> @cursor (_.do "pop" (list))))

(def: pop_cursor!
  Statement
  (_.statement ..peek_and_pop_cursor))

(def: length
  (|>> (_.the "length")))

(def: last_index
  (|>> ..length (_.- (_.i32 +1))))

(def: peek_cursor
  Expression
  (|> @cursor (_.at (last_index @cursor))))

(def: save_cursor!
  Statement
  (.let [cursor (|> @cursor (_.do "slice" (list)))]
    (_.statement (|> @savepoint (_.do "push" (list cursor))))))

(def: restore_cursor!
  Statement
  (_.set @cursor (|> @savepoint (_.do "pop" (list)))))

(def: fail_pm! _.break)

(def: (multi_pop_cursor! pops)
  (-> Nat Statement)
  (.let [popsJS (_.i32 (.int pops))]
    (_.statement (|> @cursor (_.do "splice" (list (|> @cursor ..length (_.- popsJS))
                                                  popsJS))))))

(template [<name> <flag> <prep>]
  [(def: (<name> simple? idx)
     (-> Bit Nat Statement)
     ($_ _.then
         (_.set @temp (|> idx <prep> .int _.i32 (//runtime.sum//get ..peek_cursor <flag>)))
         (.if simple?
           (_.when (_.= _.null @temp)
                   ..fail_pm!)
           (_.if (_.= _.null @temp)
             ..fail_pm!
             (push_cursor! @temp)))))]

  [left_choice  _.null        (<|)]
  [right_choice (_.string "") inc]
  )

(def: (alternation pre! post!)
  (-> Statement Statement Statement)
  ($_ _.then
      (_.do_while (_.boolean false)
                  ($_ _.then
                      ..save_cursor!
                      pre!))
      ($_ _.then
          ..restore_cursor!
          post!)))

(def: (optimized_pattern_matching recur pathP)
  (-> (-> Path (Operation Statement))
      (-> Path (Operation (Maybe Statement))))
  (.case pathP
    (^template [<simple> <choice>]
      [(^ (<simple> idx nextP))
       (|> nextP
           recur
           (\ ///////phase.monad map (|>> (_.then (<choice> true idx)) #.Some)))])
    ([/////synthesis.simple_left_side  ..left_choice]
     [/////synthesis.simple_right_side ..right_choice])

    (^ (/////synthesis.member/left 0))
    (///////phase\in (#.Some (push_cursor! (_.at (_.i32 +0) ..peek_cursor))))

    ... Extra optimization
    (^ (/////synthesis.path/seq
        (/////synthesis.member/left 0)
        (/////synthesis.!bind_top register thenP)))
    (do ///////phase.monad
      [then! (recur thenP)]
      (in (#.Some ($_ _.then
                      (_.define (..register register) (_.at (_.i32 +0) ..peek_cursor))
                      then!))))

    ... Extra optimization
    (^template [<pm> <getter>]
      [(^ (/////synthesis.path/seq
           (<pm> lefts)
           (/////synthesis.!bind_top register thenP)))
       (do ///////phase.monad
         [then! (recur thenP)]
         (in (#.Some ($_ _.then
                         (_.define (..register register) (<getter> (_.i32 (.int lefts)) ..peek_cursor))
                         then!))))])
    ([/////synthesis.member/left  //runtime.tuple//left]
     [/////synthesis.member/right //runtime.tuple//right])

    (^ (/////synthesis.!bind_top register thenP))
    (do ///////phase.monad
      [then! (recur thenP)]
      (in (#.Some ($_ _.then
                      (_.define (..register register) ..peek_and_pop_cursor)
                      then!))))

    (^ (/////synthesis.!multi_pop nextP))
    (.let [[extra_pops nextP'] (////synthesis/case.count_pops nextP)]
      (do ///////phase.monad
        [next! (recur nextP')]
        (in (#.Some ($_ _.then
                        (multi_pop_cursor! (n.+ 2 extra_pops))
                        next!)))))

    _
    (///////phase\in #.None)))

(def: (pattern_matching' statement expression archive)
  (-> Phase! Phase Archive
      (-> Path (Operation Statement)))
  (function (recur pathP)
    (do ///////phase.monad
      [outcome (optimized_pattern_matching recur pathP)]
      (.case outcome
        (#.Some outcome)
        (in outcome)

        #.None
        (.case pathP
          (#/////synthesis.Then bodyS)
          (statement expression archive bodyS)

          #/////synthesis.Pop
          (///////phase\in pop_cursor!)

          (#/////synthesis.Bind register)
          (///////phase\in (_.define (..register register) ..peek_cursor))

          (#/////synthesis.Bit_Fork when thenP elseP)
          (do {! ///////phase.monad}
            [then! (recur thenP)
             else! (.case elseP
                     (#.Some elseP)
                     (recur elseP)

                     #.None
                     (in ..fail_pm!))]
            (in (.if when
                  (_.if ..peek_cursor
                    then!
                    else!)
                  (_.if ..peek_cursor
                    else!
                    then!))))

          (#/////synthesis.I64_Fork item)
          (do {! ///////phase.monad}
            [clauses (monad.map ! (function (_ [match then])
                                    (do !
                                      [then! (recur then)]
                                      (in [(//runtime.i64//= (//primitive.i64 (.int match))
                                                             ..peek_cursor)
                                           then!])))
                                (#.Item item))]
            (in (_.cond clauses ..fail_pm!)))

          (^template [<tag> <format>]
            [(<tag> item)
             (do {! ///////phase.monad}
               [cases (monad.map ! (function (_ [match then])
                                     (\ ! map (|>> [(list (<format> match))]) (recur then)))
                                 (#.Item item))]
               (in (_.switch ..peek_cursor
                             cases
                             (#.Some ..fail_pm!))))])
          ([#/////synthesis.F64_Fork //primitive.f64]
           [#/////synthesis.Text_Fork //primitive.text])

          (^template [<complex> <choice>]
            [(^ (<complex> idx))
             (///////phase\in (<choice> false idx))])
          ([/////synthesis.side/left  ..left_choice]
           [/////synthesis.side/right ..right_choice])

          (^template [<pm> <getter>]
            [(^ (<pm> lefts))
             (///////phase\in (push_cursor! (<getter> (_.i32 (.int lefts)) ..peek_cursor)))])
          ([/////synthesis.member/left  //runtime.tuple//left]
           [/////synthesis.member/right //runtime.tuple//right])

          (^template [<tag> <combinator>]
            [(^ (<tag> leftP rightP))
             (do ///////phase.monad
               [left! (recur leftP)
                right! (recur rightP)]
               (in (<combinator> left! right!)))])
          ([/////synthesis.path/seq _.then]
           [/////synthesis.path/alt ..alternation]))))))

(def: (pattern_matching statement expression archive pathP)
  (-> Phase! Phase Archive Path (Operation Statement))
  (do ///////phase.monad
    [pattern_matching! (pattern_matching' statement expression archive pathP)]
    (in ($_ _.then
            (_.do_while (_.boolean false)
                        pattern_matching!)
            (_.throw (_.string ////synthesis/case.pattern_matching_error))))))

(def: .public (case! statement expression archive [valueS pathP])
  (Generator! [Synthesis Path])
  (do ///////phase.monad
    [stack_init (expression archive valueS)
     pattern_matching! (pattern_matching statement expression archive pathP)]
    (in ($_ _.then
            (_.declare @temp)
            (_.define @cursor (_.array (list stack_init)))
            (_.define @savepoint (_.array (list)))
            pattern_matching!))))

(def: .public (case statement expression archive [valueS pathP])
  (-> Phase! (Generator [Synthesis Path]))
  (do ///////phase.monad
    [pattern_matching! (..case! statement expression archive [valueS pathP])]
    (in (_.apply/* (_.closure (list) pattern_matching!) (list)))))
