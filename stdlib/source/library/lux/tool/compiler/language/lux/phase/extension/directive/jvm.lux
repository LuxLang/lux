(.using
 [library
  [lux {"-" Type Definition Primitive}
   ["[0]" ffi {"+" import:}]
   [abstract
    ["[0]" monad {"+" do}]]
   [control
    [pipe {"+" case>}]
    ["[0]" try {"+" Try} ("[1]#[0]" functor)]
    ["<>" parser ("[1]#[0]" monad)
     ["<[0]>" code {"+" Parser}]
     ["<[0]>" text]]]
   [data
    [binary {"+" Binary}]
    ["[0]" product]
    [text
     ["%" format {"+" format}]]
    [collection
     ["[0]" list ("[1]#[0]" functor mix)]
     ["[0]" dictionary]
     ["[0]" sequence]]
    ["[0]" format "_"
     ["[1]" binary]]]
   [macro
    ["[0]" template]]
   [math
    [number
     ["[0]" i32]]]
   [target
    [jvm
     ["_" bytecode {"+" Bytecode}]
     ["[0]" modifier {"+" Modifier} ("[1]#[0]" monoid)]
     ["[0]" attribute]
     ["[0]" field]
     ["[0]" version]
     ["[0]" method {"+" Method}]
     ["[0]" class]
     ["[0]" constant
      ["[0]" pool {"+" Resource}]]
     [encoding
      ["[0]" name {"+" External}]]
     ["[0]" type {"+" Type Constraint Argument Typed}
      [category {"+" Void Value Return Primitive Object Class Array Var Parameter}]
      ["[0]T" lux {"+" Mapping}]
      ["[0]" signature]
      ["[0]" reflection]
      ["[0]" descriptor {"+" Descriptor}]
      ["[0]" parser]]]]
   [tool
    [compiler
     ["[0]" phase]
     [meta
      [archive {"+" Archive}
       ["[0]" artifact]
       ["[0]" unit]]]
     [language
      [lux
       ["[0]" synthesis]
       ["[0]" generation]
       ["[0]" directive {"+" Handler Bundle}]
       ["[0]" analysis
        ["[0]A" type]]
       [phase
        [generation
         [jvm
          ["[0]" runtime {"+" Anchor Definition Extender}]]]
        ["[0]" extension
         ["[0]" bundle]
         [analysis
          ["[0]" jvm]]
         [directive
          ["/" lux]]]]]]]]
   [type
    ["[0]" check {"+" Check}]]]])

(type: Operation
  (directive.Operation Anchor (Bytecode Any) Definition))

(def: signature (|>> type.signature signature.signature))
(def: reflection (|>> type.reflection reflection.reflection))

(type: Declaration
  [Text (List (Type Var))])

(def: declaration
  (Parser Declaration)
  (<code>.form (<>.and <code>.text (<>.some jvm.var))))

(def: method_privacy
  (-> ffi.Privacy (Modifier method.Method))
  (|>> (case> {ffi.#PublicP} method.public
              {ffi.#PrivateP} method.private
              {ffi.#ProtectedP} method.protected
              {ffi.#DefaultP} modifier.empty)))

(def: visibility
  (Parser (Modifier field.Field))
  (`` ($_ <>.either
          (~~ (template [<label> <modifier>]
                [(<>.after (<code>.text! <label>) (<>#in <modifier>))]

                ["public" field.public]
                ["private" field.private]
                ["protected" field.protected]
                ["default" modifier.empty])))))

(def: inheritance
  (Parser (Modifier class.Class))
  (`` ($_ <>.either
          (~~ (template [<label> <modifier>]
                [(<>.after (<code>.text! <label>) (<>#in <modifier>))]

                ["final" class.final]
                ["abstract" class.abstract]
                ["default" modifier.empty])))))

(def: state
  (Parser (Modifier field.Field))
  (`` ($_ <>.either
          (~~ (template [<label> <modifier>]
                [(<>.after (<code>.text! <label>) (<>#in <modifier>))]

                ["volatile" field.volatile]
                ["final" field.final]
                ["default" modifier.empty])))))

(type: Annotation Any)

(def: annotation
  (Parser Annotation)
  <code>.any)

(def: field_type
  (Parser (Type Value))
  (<text>.then parser.value <code>.text))

(type: Constant
  [Text (List Annotation) (Type Value) Code])

(def: constant
  (Parser Constant)
  (<| <code>.form
      (<>.after (<code>.text! "constant"))
      ($_ <>.and
          <code>.text
          (<code>.tuple (<>.some ..annotation))
          ..field_type
          <code>.any
          )))

(type: Variable
  [Text (Modifier field.Field) (Modifier field.Field) (List Annotation) (Type Value)])

(def: variable
  (Parser Variable)
  (<| <code>.form
      (<>.after (<code>.text! "variable"))
      ($_ <>.and
          <code>.text
          ..visibility
          ..state
          (<code>.tuple (<>.some ..annotation))
          ..field_type
          )))

(type: Field
  (Variant
   {#Constant Constant}
   {#Variable Variable}))

(def: field
  (Parser Field)
  ($_ <>.or
      ..constant
      ..variable
      ))

(type: Method_Definition
  (Variant
   {#Constructor (jvm.Constructor Code)}
   {#Virtual_Method (jvm.Virtual_Method Code)}
   {#Static_Method (jvm.Static_Method Code)}
   {#Overriden_Method (jvm.Overriden_Method Code)}
   {#Abstract_Method (jvm.Abstract_Method Code)}))

(def: method
  (Parser Method_Definition)
  ($_ <>.or
      jvm.constructor_definition
      jvm.virtual_method_definition
      jvm.static_method_definition
      jvm.overriden_method_definition
      jvm.abstract_method_definition
      ))

(def: $Object
  (Type Class)
  (type.class "java.lang.Object" (list)))

(def: constant::modifier
  (Modifier field.Field)
  ($_ modifier#composite
      field.public
      field.static
      field.final))

(def: (field_definition field)
  (-> Field (Resource field.Field))
  (case field
    ... TODO: Handle annotations.
    {#Constant [name annotations type value]}
    (case value
      (^template [<tag> <type> <constant>]
        [[_ {<tag> value}]
         (do pool.monad
           [constant (`` (|> value (~~ (template.spliced <constant>))))
            attribute (attribute.constant constant)]
           (field.field ..constant::modifier name <type> true (sequence.sequence attribute)))])
      ([.#Bit type.boolean [(case> #0 +0 #1 +1) .i64 i32.i32 constant.integer pool.integer]]
       [.#Int type.byte [.i64 i32.i32 constant.integer pool.integer]]
       [.#Int type.short [.i64 i32.i32 constant.integer pool.integer]]
       [.#Int type.int [.i64 i32.i32 constant.integer pool.integer]]
       [.#Int type.long [constant.long pool.long]]
       [.#Frac type.float [ffi.double_to_float constant.float pool.float]]
       [.#Frac type.double [constant.double pool.double]]
       [.#Nat type.char [.i64 i32.i32 constant.integer pool.integer]]
       [.#Text (type.class "java.lang.String" (list)) [pool.string]]
       )

      ... TODO: Tighten this pattern-matching so this catch-all clause isn't necessary.
      _
      (undefined))

    ... TODO: Handle annotations.
    {#Variable [name visibility state annotations type]}
    (field.field (modifier#composite visibility state)
                 name type true sequence.empty)))

(def: (method_definition archive supers [mapping selfT] [analyse synthesize generate])
  (-> Archive
      (List (Type Class))
      [Mapping .Type]
      [analysis.Phase
       synthesis.Phase
       (generation.Phase Anchor (Bytecode Any) Definition)]
      (-> Method_Definition (Operation synthesis.Synthesis)))
  (function (_ methodC)
    (do phase.monad
      [methodA (: (Operation analysis.Analysis)
                  (directive.lifted_analysis
                   (case methodC
                     {#Constructor method}
                     (jvm.analyse_constructor_method analyse archive selfT mapping method)

                     {#Virtual_Method method}
                     (jvm.analyse_virtual_method analyse archive selfT mapping method)
                     
                     {#Static_Method method}
                     (jvm.analyse_static_method analyse archive mapping method)
                     
                     {#Overriden_Method method}
                     (jvm.analyse_overriden_method analyse archive selfT mapping supers method)

                     {#Abstract_Method method}
                     (jvm.analyse_abstract_method analyse archive method))))]
      (directive.lifted_synthesis
       (synthesize archive methodA)))))

(def: class_name
  (|>> parser.read_class product.left name.internal))

(def: (mock_class [name parameters] super interfaces fields methods modifier)
  (-> Declaration (Type Class) (List (Type Class))
      (List (Resource field.Field)) (List (Resource method.Method)) (Modifier class.Class)
      (Try [External Binary]))
  (let [signature (signature.inheritance (list#each type.signature parameters)
                                         (type.signature super)
                                         (list#each type.signature interfaces))]
    (try#each (|>> (format.result class.writer)
                   [name])
              (class.class version.v6_0
                           ($_ modifier#composite
                               class.public
                               modifier)
                           (name.internal name)
                           {.#Some signature}
                           (..class_name super)
                           (list#each ..class_name interfaces)
                           fields
                           methods
                           sequence.empty))))

(def: (mock_value valueT)
  (-> (Type Value) (Bytecode Any))
  (case (type.primitive? valueT)
    {.#Left classT}
    _.aconst_null
    
    {.#Right primitiveT}
    (cond (# type.equivalence = type.long primitiveT)
          _.lconst_0

          (# type.equivalence = type.float primitiveT)
          _.fconst_0

          (# type.equivalence = type.double primitiveT)
          _.dconst_0

          ... type.boolean type.byte type.short type.int type.char
          _.iconst_0)))

(def: (mock_return returnT)
  (-> (Type Return) (Bytecode Any))
  (case (type.void? returnT)
    {.#Right returnT}
    _.return

    {.#Left valueT}
    ($_ _.composite
        (mock_value valueT)
        (case (type.primitive? valueT)
          {.#Left classT}
          _.areturn
          
          {.#Right primitiveT}
          (cond (# type.equivalence = type.long primitiveT)
                _.lreturn

                (# type.equivalence = type.float primitiveT)
                _.freturn

                (# type.equivalence = type.double primitiveT)
                _.dreturn

                ... type.boolean type.byte type.short type.int type.char
                _.ireturn)))))

(def: constructor_name
  "<init>")

(def: (mock_method super method)
  (-> (Type Class) ..Method_Definition (Resource method.Method))
  (case method
    {#Constructor [privacy strict_floating_point? annotations variables exceptions
                   self arguments constructor_arguments
                   body]}
    (method.method ($_ modifier#composite
                       (..method_privacy privacy)
                       (if strict_floating_point?
                         method.strict
                         modifier.empty))
                   ..constructor_name
                   (type.method [variables (list#each product.right arguments) type.void exceptions])
                   (list)
                   {.#Some ($_ _.composite
                               (_.aload 0)
                               (|> constructor_arguments
                                   (list#each (|>> product.left ..mock_value))
                                   (monad.all _.monad))
                               (|> (type.method [(list) (list#each product.left constructor_arguments) type.void (list)])
                                   (_.invokespecial super ..constructor_name))
                               _.return
                               )})

    {#Overriden_Method [super name strict_floating_point? annotations variables
                        self arguments return exceptions
                        body]}
    (method.method ($_ modifier#composite
                       method.public
                       (if strict_floating_point?
                         method.strict
                         modifier.empty))
                   name
                   (type.method [variables (list#each product.right arguments) return exceptions])
                   (list)
                   {.#Some (..mock_return return)})

    {#Virtual_Method [name privacy final? strict_floating_point? annotations variables
                      self arguments return exceptions
                      body]}
    (method.method ($_ modifier#composite
                       (..method_privacy privacy)
                       (if strict_floating_point?
                         method.strict
                         modifier.empty)
                       (if final?
                         method.final
                         modifier.empty))
                   name
                   (type.method [variables (list#each product.right arguments) return exceptions])
                   (list)
                   {.#Some (..mock_return return)})

    {#Static_Method [name privacy strict_floating_point? annotations
                     variables arguments return exceptions
                     body]}
    (method.method ($_ modifier#composite
                       method.static
                       (..method_privacy privacy)
                       (if strict_floating_point?
                         method.strict
                         modifier.empty))
                   name
                   (type.method [variables (list#each product.right arguments) return exceptions])
                   (list)
                   {.#Some (..mock_return return)})

    {#Abstract_Method [name privacy annotations
                       variables arguments return exceptions]}
    (method.method ($_ modifier#composite
                       method.abstract
                       (..method_privacy privacy))
                   name
                   (type.method [variables (list#each product.right arguments) return exceptions])
                   (list)
                   {.#None})
    ))

(def: (mock declaration super interfaces inheritance fields methods)
  (-> Declaration
      (Type Class) (List (Type Class))
      (Modifier class.Class) (List ..Field) (List ..Method_Definition)
      (Try [External Binary]))
  (mock_class declaration super interfaces
              (list#each ..field_definition fields)
              (list#each (..mock_method super) methods)
              inheritance))

(template [<name> <type> <parser>]
  [(def: <name>
     (Parser <type>)
     (do [! <>.monad]
       [raw <code>.text]
       (<>.lifted (<text>.result <parser> raw))))]

  [class_declaration [External (List (Type Var))] parser.declaration']
  )

(def: (save_class! name bytecode)
  (-> Text Binary (Operation Any))
  (directive.lifted_generation
   (do [! phase.monad]
     [.let [artifact [name bytecode]]
      artifact_id (generation.learn_custom name unit.none)
      _ (generation.execute! artifact)
      _ (generation.save! artifact_id {.#Some name} artifact)
      _ (generation.log! (format "JVM Class " name))]
     (in []))))

(def: jvm::class
  (Handler Anchor (Bytecode Any) Definition)
  (/.custom
   [($_ <>.and
        ..class_declaration
        jvm.class
        (<code>.tuple (<>.some jvm.class))
        ..inheritance
        (<code>.tuple (<>.some ..annotation))
        (<code>.tuple (<>.some ..field))
        (<code>.tuple (<>.some ..method)))
    (function (_ extension phase archive
                 [class_declaration
                  super
                  interfaces
                  inheritance
                  ... TODO: Handle annotations.
                  annotations
                  fields
                  methods])
      (do [! phase.monad]
        [.let [[name parameters] class_declaration
               type_declaration (signature.inheritance (list#each type.signature parameters)
                                                       (type.signature super)
                                                       (list#each type.signature interfaces))]
         mock (<| phase.lifted
                  (..mock class_declaration
                          super
                          interfaces
                          inheritance
                          fields
                          methods))
         ... Necessary for reflection to work properly during analysis.
         _ (directive.lifted_generation
            (generation.execute! mock))
         parameters (directive.lifted_analysis
                     (typeA.check (jvm.parameter_types parameters)))
         .let [mapping (list#mix (function (_ [parameterJ parameterT] mapping)
                                   (dictionary.has (parser.name parameterJ) parameterT mapping))
                                 luxT.fresh
                                 parameters)]
         superT (directive.lifted_analysis
                 (typeA.check (luxT.check (luxT.class mapping) (..signature super))))
         interfaceT+ (directive.lifted_analysis
                      (typeA.check (monad.each check.monad
                                               (|>> ..signature (luxT.check (luxT.class mapping)))
                                               interfaces)))
         state (extension.lifted phase.state)
         .let [selfT {.#Primitive name (list#each product.right parameters)}]
         methods (monad.each ! (..method_definition archive (list& super interfaces) [mapping selfT]
                                                    [(value@ [directive.#analysis directive.#phase] state)
                                                     (value@ [directive.#synthesis directive.#phase] state)
                                                     (value@ [directive.#generation directive.#phase] state)])
                             methods)
         bytecode (<| (# ! each (format.result class.writer))
                      phase.lifted
                      (class.class version.v6_0
                                   ($_ modifier#composite
                                       class.public
                                       inheritance)
                                   (name.internal name)
                                   {.#Some type_declaration}
                                   (..class_name super)
                                   (list#each ..class_name interfaces)
                                   (list#each ..field_definition fields)
                                   (list) ... (list#each ..method_definition methods)
                                   sequence.empty))
         _ (..save_class! name bytecode)]
        (in directive.no_requirements)))]))

(def: (method_declaration (^open "/[0]"))
  (-> (jvm.Method_Declaration Code) (Resource Method))
  (let [type (type.method [/#type_variables /#arguments /#return /#exceptions])]
    (method.method ($_ modifier#composite
                       method.public
                       method.abstract)
                   /#name
                   type
                   (list)
                   {.#None})))

(def: jvm::class::interface
  (Handler Anchor (Bytecode Any) Definition)
  (/.custom
   [($_ <>.and
        ..class_declaration
        (<code>.tuple (<>.some jvm.class))
        ... TODO: Handle annotations.
        (<code>.tuple (<>.some ..annotation))
        (<>.some jvm.method_declaration))
    (function (_ extension_name phase archive [[name parameters] supers annotations method_declarations])
      (directive.lifted_generation
       (do [! phase.monad]
         [bytecode (<| (# ! each (format.result class.writer))
                       phase.lifted
                       (class.class version.v6_0
                                    ($_ modifier#composite
                                        class.public
                                        class.abstract
                                        class.interface)
                                    (name.internal name)
                                    {.#Some (signature.inheritance (list#each type.signature parameters)
                                                                   (type.signature $Object)
                                                                   (list#each type.signature supers))}
                                    (name.internal "java.lang.Object")
                                    (list#each ..class_name supers)
                                    (list)
                                    (list#each ..method_declaration method_declarations)
                                    sequence.empty))
          artifact_id (generation.learn_custom name unit.none)
          .let [artifact [name bytecode]]
          _ (generation.execute! artifact)
          _ (generation.save! artifact_id {.#Some name} artifact)
          _ (generation.log! (format "JVM Interface " (%.text name)))]
         (in directive.no_requirements))))]))

(import: java/lang/ClassLoader)

(def: .public (bundle class_loader extender)
  (-> java/lang/ClassLoader Extender (Bundle Anchor (Bytecode Any) Definition))
  (<| (bundle.prefix "jvm")
      (|> bundle.empty
          (dictionary.has "class" jvm::class)
          (dictionary.has "class interface" ..jvm::class::interface)
          )))
