(.using
 [library
  [lux (.except Type Definition Primitive)
   ["[0]" ffi (.only import:)]
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" try (.only Try) (.open: "[1]#[0]" functor)]
    ["[0]" exception]
    ["<>" parser (.open: "[1]#[0]" monad)
     ["<[0]>" code (.only Parser)]
     ["<[0]>" text]
     ["<[0]>" synthesis]]]
   [data
    [binary (.only Binary)]
    ["[0]" product]
    [text
     ["%" format (.only format)]]
    [collection
     ["[0]" list (.open: "[1]#[0]" functor mix)]
     ["[0]" dictionary]
     ["[0]" sequence]
     ["[0]" set (.only Set)]]
    ["[0]" format
     ["[1]" binary]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [math
    [number
     ["n" nat]
     ["[0]" i32]]]
   [target
    [jvm
     ["_" bytecode (.only Bytecode) (.open: "[1]#[0]" monad)]
     ["[0]" modifier (.only Modifier) (.open: "[1]#[0]" monoid)]
     ["[0]" attribute]
     ["[0]" field]
     ["[0]" version]
     ["[0]" method (.only Method)]
     ["[0]" class]
     ["[0]" constant (.only)
      ["[0]" pool (.only Resource)]]
     [encoding
      ["[0]" name (.only External)]]
     ["[0]" type (.only Type Constraint Argument Typed)
      [category (.only Void Value Return Primitive Object Class Array Var Parameter)]
      ["[0]T" lux (.only Mapping)]
      ["[0]" signature]
      ["[0]" reflection]
      ["[0]" descriptor (.only Descriptor)]
      ["[0]" parser]]]]
   [tool
    [compiler
     ["[0]" phase]
     [reference
      [variable (.only Register)]]
     [meta
      [archive (.only Archive)
       ["[0]" artifact]
       ["[0]" unit]]
      ["[0]" cache
       [dependency
        ["[1]" artifact]]]]
     [language
      [lux
       ["[0]" synthesis (.only Synthesis)]
       ["[0]" generation]
       ["[0]" directive (.only Handler Bundle)]
       ["[0]" analysis (.only Analysis)
        ["[0]A" type]
        ["[0]A" scope]]
       [phase
        [generation
         [jvm
          ["[0]" runtime (.only Anchor Definition Extender)]
          ["[0]" value]]]
        ["[0]" extension (.only)
         ["[0]" bundle]
         [analysis
          ["[0]" jvm]]
         [generation
          [jvm
           ["[0]" host]]]
         [directive
          ["/" lux]]]]]]]]
   [type
    ["[0]" check (.only Check)]]]])

(type: Operation
  (directive.Operation Anchor (Bytecode Any) Definition))

(def: signature (|>> type.signature signature.signature))
(def: reflection (|>> type.reflection reflection.reflection))

(type: Declaration
  [Text (List (Type Var))])

(def: declaration
  (Parser Declaration)
  (<code>.form (<>.and <code>.text (<>.some jvm.var))))

(def: method_privacy
  (-> ffi.Privacy (Modifier method.Method))
  (|>> (pipe.case
         {ffi.#PublicP} method.public
         {ffi.#PrivateP} method.private
         {ffi.#ProtectedP} method.protected
         {ffi.#DefaultP} modifier.empty)))

(def: visibility'
  (<text>.Parser (Modifier field.Field))
  (`` (all <>.either
           (~~ (template [<label> <modifier>]
                 [(<>.after (<text>.this <label>) (<>#in <modifier>))]

                 ["public" field.public]
                 ["private" field.private]
                 ["protected" field.protected]
                 ["default" modifier.empty])))))

(def: visibility
  (Parser (Modifier field.Field))
  (<text>.then ..visibility' <code>.text))

(def: inheritance
  (Parser (Modifier class.Class))
  (`` (all <>.either
           (~~ (template [<label> <modifier>]
                 [(<>.after (<code>.this_text <label>) (<>#in <modifier>))]

                 ["final" class.final]
                 ["abstract" class.abstract]
                 ["default" modifier.empty])))))

(def: state
  (Parser (Modifier field.Field))
  (`` (all <>.either
           (~~ (template [<label> <modifier>]
                 [(<>.after (<code>.this_text <label>) (<>#in <modifier>))]

                 ["volatile" field.volatile]
                 ["final" field.final]
                 ["default" modifier.empty])))))

(type: Annotation Any)

(def: annotation
  (Parser Annotation)
  <code>.any)

(def: field_type
  (Parser (Type Value))
  (<text>.then parser.value <code>.text))

(type: Constant
  [Text (List Annotation) (Type Value) Code])

(def: constant
  (Parser Constant)
  (<| <code>.form
      (<>.after (<code>.this_text "constant"))
      (all <>.and
           <code>.text
           (<code>.tuple (<>.some ..annotation))
           ..field_type
           <code>.any
           )))

(type: Variable
  [Text (Modifier field.Field) (Modifier field.Field) Bit (List Annotation) (Type Value)])

(def: variable
  (Parser Variable)
  (<| <code>.form
      (<>.after (<code>.this_text "variable"))
      (all <>.and
           <code>.text
           ..visibility
           ..state
           (<>.parses? (<code>.this_text jvm.static_tag))
           (<code>.tuple (<>.some ..annotation))
           ..field_type
           )))

(type: Field
  (Variant
   {#Constant Constant}
   {#Variable Variable}))

(def: field
  (Parser Field)
  (all <>.or
       ..constant
       ..variable
       ))

(type: (Method_Definition a)
  (Variant
   {#Constructor (jvm.Constructor a)}
   {#Virtual_Method (jvm.Virtual_Method a)}
   {#Static_Method (jvm.Static_Method a)}
   {#Overriden_Method (jvm.Overriden_Method a)}
   {#Abstract_Method (jvm.Abstract_Method a)}))

(def: method
  (Parser (Method_Definition Code))
  (all <>.or
       jvm.constructor_definition
       jvm.virtual_method_definition
       jvm.static_method_definition
       jvm.overriden_method_definition
       jvm.abstract_method_definition
       ))

(def: $Object
  (Type Class)
  (type.class "java.lang.Object" (list)))

(def: constant::modifier
  (Modifier field.Field)
  (all modifier#composite
       field.public
       field.static
       field.final))

(def: (field_definition field)
  (-> Field (Resource field.Field))
  (case field
    ... TODO: Handle annotations.
    {#Constant [name annotations type value]}
    (case value
      (^.template [<tag> <type> <constant>]
        [[_ {<tag> value}]
         (do pool.monad
           [constant (`` (|> value (~~ (template.spliced <constant>))))
            attribute (attribute.constant constant)]
           (field.field ..constant::modifier name #1 <type> (sequence.sequence attribute)))])
      ([.#Bit type.boolean [(pipe.case #0 +0 #1 +1) .i64 i32.i32 constant.integer pool.integer]]
       [.#Int type.byte [.i64 i32.i32 constant.integer pool.integer]]
       [.#Int type.short [.i64 i32.i32 constant.integer pool.integer]]
       [.#Int type.int [.i64 i32.i32 constant.integer pool.integer]]
       [.#Int type.long [constant.long pool.long]]
       [.#Frac type.float [ffi.double_to_float constant.float pool.float]]
       [.#Frac type.double [constant.double pool.double]]
       [.#Nat type.char [.i64 i32.i32 constant.integer pool.integer]]
       [.#Text (type.class "java.lang.String" (list)) [pool.string]]
       )

      ... TODO: Tighten this pattern-matching so this catch-all clause isn't necessary.
      _
      (undefined))

    ... TODO: Handle annotations.
    {#Variable [name visibility state static? annotations type]}
    (field.field (all modifier#composite
                      (if static?
                        field.static
                        modifier.empty)
                      visibility
                      state)
                 name #1 type sequence.empty)))

(def: annotation_parameter_synthesis
  (<synthesis>.Parser (jvm.Annotation_Parameter Synthesis))
  (<synthesis>.tuple (<>.and <synthesis>.text <synthesis>.any)))

(def: annotation_synthesis
  (<synthesis>.Parser (jvm.Annotation Synthesis))
  (<synthesis>.tuple (<>.and <synthesis>.text (<>.some ..annotation_parameter_synthesis))))

(template [<name> <type> <text>]
  [(def: <name>
     (<synthesis>.Parser (Type <type>))
     (<text>.then <text> <synthesis>.text))]

  [value_type_synthesis Value parser.value]
  [class_type_synthesis Class parser.class]
  [var_type_synthesis Var parser.var]
  [return_type_synthesis Return parser.return]
  )

(def: argument_synthesis
  (<synthesis>.Parser Argument)
  (<synthesis>.tuple (<>.and <synthesis>.text ..value_type_synthesis)))

(def: input_synthesis
  (<synthesis>.Parser (Typed Synthesis))
  (<synthesis>.tuple (<>.and ..value_type_synthesis <synthesis>.any)))

(def: (method_body arity)
  (-> Nat (<synthesis>.Parser Synthesis))
  (<| (<>#each (function (_ [env offset inits it]) it))
      (<synthesis>.function 1)
      (<synthesis>.loop (<>.exactly 0 <synthesis>.any))
      <synthesis>.tuple
      (all <>.either
           (<| (<>.after (<synthesis>.this_text ""))
               (<>#each (host.hidden_method_body arity))
               <synthesis>.any)
           <synthesis>.any)))

(def: constructor_synthesis
  (<synthesis>.Parser (jvm.Constructor Synthesis))
  (<| <synthesis>.tuple
      (<>.after (<synthesis>.this_text jvm.constructor_tag))
      (all <>.and
           (<text>.then jvm.visibility' <synthesis>.text)
           <synthesis>.bit
           (<synthesis>.tuple (<>.some ..annotation_synthesis))
           (<synthesis>.tuple (<>.some ..var_type_synthesis))
           (<synthesis>.tuple (<>.some ..class_type_synthesis))
           <synthesis>.text
           (do <>.monad
             [args (<synthesis>.tuple (<>.some ..argument_synthesis))]
             (all <>.and
                  (in args)
                  (<synthesis>.tuple (<>.some ..input_synthesis))
                  (..method_body (list.size args))))
           )))

(def: overriden_method_synthesis
  (<synthesis>.Parser (jvm.Overriden_Method Synthesis))
  (<| <synthesis>.tuple
      (<>.after (<synthesis>.this_text jvm.overriden_tag))
      (all <>.and
           ..class_type_synthesis
           <synthesis>.text
           <synthesis>.bit
           (<synthesis>.tuple (<>.some ..annotation_synthesis))
           (<synthesis>.tuple (<>.some ..var_type_synthesis))
           <synthesis>.text
           (do <>.monad
             [args (<synthesis>.tuple (<>.some ..argument_synthesis))]
             (all <>.and
                  (in args)
                  ..return_type_synthesis
                  (<synthesis>.tuple (<>.some ..class_type_synthesis))
                  (..method_body (list.size args))))
           )))

(def: virtual_method_synthesis
  (<synthesis>.Parser (jvm.Virtual_Method Synthesis))
  (<| <synthesis>.tuple
      (<>.after (<synthesis>.this_text jvm.virtual_tag))
      (all <>.and
           <synthesis>.text
           (<text>.then jvm.visibility' <synthesis>.text)
           <synthesis>.bit
           <synthesis>.bit
           (<synthesis>.tuple (<>.some ..annotation_synthesis))
           (<synthesis>.tuple (<>.some ..var_type_synthesis))
           <synthesis>.text
           (do <>.monad
             [args (<synthesis>.tuple (<>.some ..argument_synthesis))]
             (all <>.and
                  (in args)
                  ..return_type_synthesis
                  (<synthesis>.tuple (<>.some ..class_type_synthesis))
                  (..method_body (list.size args))))
           )))

(def: static_method_synthesis
  (<synthesis>.Parser (jvm.Static_Method Synthesis))
  (<| <synthesis>.tuple
      (<>.after (<synthesis>.this_text jvm.static_tag))
      (all <>.and
           <synthesis>.text
           (<text>.then jvm.visibility' <synthesis>.text)
           <synthesis>.bit
           (<synthesis>.tuple (<>.some ..annotation_synthesis))
           (<synthesis>.tuple (<>.some ..var_type_synthesis))
           (do <>.monad
             [args (<synthesis>.tuple (<>.some ..argument_synthesis))]
             (all <>.and
                  (in args)
                  ..return_type_synthesis
                  (<synthesis>.tuple (<>.some ..class_type_synthesis))
                  (..method_body (list.size args))))
           )))

(def: abstract_method_synthesis
  (<synthesis>.Parser (jvm.Abstract_Method Synthesis))
  (<| <synthesis>.tuple
      (<>.after (<synthesis>.this_text jvm.abstract_tag))
      (all <>.and
           <synthesis>.text
           (<text>.then jvm.visibility' <synthesis>.text)
           (<synthesis>.tuple (<>.some ..annotation_synthesis))
           (<synthesis>.tuple (<>.some ..var_type_synthesis))
           (<synthesis>.tuple (<>.some ..argument_synthesis))
           ..return_type_synthesis
           (<synthesis>.tuple (<>.some ..class_type_synthesis))
           )))

(def: method_synthesis
  (<synthesis>.Parser (Method_Definition Synthesis))
  (all <>.or
       ..constructor_synthesis
       ..virtual_method_synthesis
       ..static_method_synthesis
       ..overriden_method_synthesis
       ..abstract_method_synthesis
       ))

(def: composite
  (-> (List (Bytecode Any)) (Bytecode Any))
  (|>> list.reversed
       (list#mix _.composite (_#in []))))

(def: constructor_name
  "<init>")

(def: (method_argument lux_register argumentT jvm_register)
  (-> Register (Type Value) Register [Register (Bytecode Any)])
  (case (type.primitive? argumentT)
    {.#Left argumentT}
    [(n.+ 1 jvm_register)
     (if (n.= lux_register jvm_register)
       (_#in [])
       (all _.composite
            (_.aload jvm_register)
            (_.astore lux_register)))]
    
    {.#Right argumentT}
    (template.let [(wrap_primitive <shift> <load> <type>)
                   [[(n.+ <shift> jvm_register)
                     (all _.composite
                          (<load> jvm_register)
                          (value.wrap <type>)
                          (_.astore lux_register))]]]
      (`` (cond (~~ (template [<shift> <load> <type>]
                      [(# type.equivalence = <type> argumentT)
                       (wrap_primitive <shift> <load> <type>)]

                      [1 _.iload type.boolean]
                      [1 _.iload type.byte]
                      [1 _.iload type.short]
                      [1 _.iload type.int]
                      [1 _.iload type.char]
                      [1 _.fload type.float]
                      [2 _.lload type.long]))

                ... (# type.equivalence = type.double argumentT)
                (wrap_primitive 2 _.dload type.double))))))

(def: .public (method_arguments offset types)
  (-> Nat (List (Type Value)) (Bytecode Any))
  (|> types
      list.enumeration
      (list#mix (function (_ [lux_register type] [jvm_register before])
                  (let [[jvm_register' after] (method_argument (n.+ offset lux_register) type jvm_register)]
                    [jvm_register' (all _.composite before after)]))
                (is [Register (Bytecode Any)] [offset (_#in [])]))
      product.right))

(def: (constructor_method_generation archive super_class method)
  (-> Archive (Type Class) (jvm.Constructor Synthesis) (Operation (Resource Method)))
  (<| (let [[privacy strict_floating_point? annotations method_tvars exceptions
             self arguments constructor_argumentsS
             bodyS] method])
      (do [! phase.monad]
        [generate directive.generation])
      directive.lifted_generation
      (do !
        [constructor_argumentsG (monad.each ! (|>> product.right (generate archive))
                                            constructor_argumentsS)
         bodyG (generate archive bodyS)
         .let [[super_name super_vars] (parser.read_class super_class)
               super_constructorT (type.method [(list)
                                                (list#each product.left constructor_argumentsS)
                                                type.void
                                                (list)])
               argumentsT (list#each product.right arguments)]]
        (in (method.method (all modifier#composite
                                (..method_privacy privacy)
                                (if strict_floating_point?
                                  method.strict
                                  modifier.empty))
                           ..constructor_name
                           #1 (type.method [method_tvars argumentsT type.void exceptions])
                           (list)
                           {.#Some (all _.composite
                                        (_.aload 0)
                                        (..composite constructor_argumentsG)
                                        (_.invokespecial super_class ..constructor_name super_constructorT)
                                        (method_arguments 1 argumentsT)
                                        bodyG
                                        _.return
                                        )})))))

(def: (method_return returnT)
  (-> (Type Return) (Bytecode Any))
  (case (type.void? returnT)
    {.#Right returnT}
    _.return

    {.#Left returnT}
    (case (type.primitive? returnT)
      {.#Left returnT}
      (case (type.class? returnT)
        {.#Some class_name}
        (all _.composite
             (_.checkcast returnT)
             _.areturn)

        {.#None}
        _.areturn)
      
      {.#Right returnT}
      (template.let [(unwrap_primitive <return> <type>)
                     [(all _.composite
                           (value.unwrap <type>)
                           <return>)]]
        (`` (cond (~~ (template [<return> <type>]
                        [(# type.equivalence = <type> returnT)
                         (unwrap_primitive <return> <type>)]

                        [_.ireturn type.boolean]
                        [_.ireturn type.byte]
                        [_.ireturn type.short]
                        [_.ireturn type.int]
                        [_.ireturn type.char]
                        [_.freturn type.float]
                        [_.lreturn type.long]))

                  ... (# type.equivalence = type.double returnT)
                  (unwrap_primitive _.dreturn type.double)))))))

(def: (overriden_method_generation archive method)
  (-> Archive (jvm.Overriden_Method Synthesis) (Operation (Resource Method)))
  (do [! phase.monad]
    [.let [[super method_name strict_floating_point? annotations
            method_tvars self arguments returnJ exceptionsJ
            bodyS] method]
     generate directive.generation]
    (directive.lifted_generation
     (do !
       [bodyG (generate archive bodyS)
        .let [argumentsT (list#each product.right arguments)]]
       (in (method.method (all modifier#composite
                               method.public
                               (if strict_floating_point?
                                 method.strict
                                 modifier.empty))
                          method_name
                          #1 (type.method [method_tvars argumentsT returnJ exceptionsJ])
                          (list)
                          {.#Some (all _.composite
                                       (method_arguments 1 argumentsT)
                                       bodyG
                                       (method_return returnJ))}))))))

(def: (virtual_method_generation archive method)
  (-> Archive (jvm.Virtual_Method Synthesis) (Operation (Resource Method)))
  (do [! phase.monad]
    [.let [[method_name privacy final? strict_floating_point? annotations method_tvars
            self arguments returnJ exceptionsJ
            bodyS] method]
     generate directive.generation]
    (directive.lifted_generation
     (do !
       [bodyG (generate archive bodyS)
        .let [argumentsT (list#each product.right arguments)]]
       (in (method.method (all modifier#composite
                               (..method_privacy privacy)
                               (if strict_floating_point?
                                 method.strict
                                 modifier.empty)
                               (if final?
                                 method.final
                                 modifier.empty))
                          method_name
                          #1 (type.method [method_tvars argumentsT returnJ exceptionsJ])
                          (list)
                          {.#Some (all _.composite
                                       (method_arguments 1 argumentsT)
                                       bodyG
                                       (method_return returnJ))}))))))

(def: (static_method_generation archive method)
  (-> Archive (jvm.Static_Method Synthesis) (Operation (Resource Method)))
  (do [! phase.monad]
    [.let [[method_name privacy strict_floating_point? annotations method_tvars
            arguments returnJ exceptionsJ
            bodyS] method]
     generate directive.generation]
    (directive.lifted_generation
     (do !
       [bodyG (generate archive bodyS)
        .let [argumentsT (list#each product.right arguments)]]
       (in (method.method (all modifier#composite
                               (..method_privacy privacy)
                               method.static
                               (if strict_floating_point?
                                 method.strict
                                 modifier.empty))
                          method_name
                          #1 (type.method [method_tvars argumentsT returnJ exceptionsJ])
                          (list)
                          {.#Some (all _.composite
                                       (method_arguments 0 argumentsT)
                                       bodyG
                                       (method_return returnJ))}))))))

(def: (abstract_method_generation method)
  (-> (jvm.Abstract_Method Synthesis) (Resource Method))
  (let [[name privacy annotations variables
         arguments return exceptions] method]
    (method.method (all modifier#composite
                        (..method_privacy privacy)
                        method.abstract)
                   name
                   #1 (type.method [variables (list#each product.right arguments) return exceptions])
                   (list)
                   {.#None})))

(def: (method_generation archive super_class method)
  (-> Archive (Type Class) (Method_Definition Synthesis) (Operation (Resource Method)))
  (case method
    {#Constructor method}
    (..constructor_method_generation archive super_class method)
    
    {#Overriden_Method method}
    (..overriden_method_generation archive method)
    
    {#Virtual_Method method}
    (..virtual_method_generation archive method)
    
    {#Static_Method method}
    (..static_method_generation archive method)

    {#Abstract_Method method}
    (# phase.monad in (..abstract_method_generation method))))

(def: (method_definition archive super interfaces [mapping selfT] [analyse synthesize generate])
  (-> Archive
      (Type Class)
      (List (Type Class))
      [Mapping .Type]
      [analysis.Phase
       synthesis.Phase
       (generation.Phase Anchor (Bytecode Any) Definition)]
      (-> (Method_Definition Code) (Operation [(Set unit.ID) (Resource Method)])))
  (function (_ methodC)
    (do phase.monad
      [methodA (is (Operation Analysis)
                   (directive.lifted_analysis
                    (case methodC
                      {#Constructor method}
                      (jvm.analyse_constructor_method analyse archive selfT mapping method)

                      {#Virtual_Method method}
                      (jvm.analyse_virtual_method analyse archive selfT mapping method)
                      
                      {#Static_Method method}
                      (jvm.analyse_static_method analyse archive mapping method)
                      
                      {#Overriden_Method method}
                      (jvm.analyse_overriden_method analyse archive selfT mapping (partial_list super interfaces) method)

                      {#Abstract_Method method}
                      (jvm.analyse_abstract_method analyse archive method))))
       methodS (is (Operation Synthesis)
                   (directive.lifted_synthesis
                    (synthesize archive methodA)))
       dependencies (directive.lifted_generation
                     (cache.dependencies archive methodS))
       methodS' (|> methodS
                    list
                    (<synthesis>.result ..method_synthesis)
                    phase.lifted)
       methodG (method_generation archive super methodS')]
      (in [dependencies methodG]))))

(def: class_name
  (|>> parser.read_class product.left name.internal))

(def: (mock_class [name parameters] super interfaces fields methods modifier)
  (-> Declaration (Type Class) (List (Type Class))
      (List (Resource field.Field)) (List (Resource method.Method)) (Modifier class.Class)
      (Try [External Binary]))
  (let [signature (signature.inheritance (list#each type.signature parameters)
                                         (type.signature super)
                                         (list#each type.signature interfaces))]
    (try#each (|>> (format.result class.writer)
                   [name])
              (class.class version.v6_0
                           (all modifier#composite
                                class.public
                                modifier)
                           (name.internal name)
                           {.#Some signature}
                           (..class_name super)
                           (list#each ..class_name interfaces)
                           fields
                           methods
                           sequence.empty))))

(def: (mock_value valueT)
  (-> (Type Value) (Bytecode Any))
  (case (type.primitive? valueT)
    {.#Left classT}
    _.aconst_null
    
    {.#Right primitiveT}
    (cond (# type.equivalence = type.long primitiveT)
          _.lconst_0

          (# type.equivalence = type.float primitiveT)
          _.fconst_0

          (# type.equivalence = type.double primitiveT)
          _.dconst_0

          ... type.boolean type.byte type.short type.int type.char
          _.iconst_0)))

(def: (mock_return returnT)
  (-> (Type Return) (Bytecode Any))
  (case (type.void? returnT)
    {.#Right returnT}
    _.return

    {.#Left valueT}
    (all _.composite
         (mock_value valueT)
         (case (type.primitive? valueT)
           {.#Left classT}
           _.areturn
           
           {.#Right primitiveT}
           (cond (# type.equivalence = type.long primitiveT)
                 _.lreturn

                 (# type.equivalence = type.float primitiveT)
                 _.freturn

                 (# type.equivalence = type.double primitiveT)
                 _.dreturn

                 ... type.boolean type.byte type.short type.int type.char
                 _.ireturn)))))

(def: (mock_method super method)
  (-> (Type Class) (Method_Definition Code) (Resource method.Method))
  (case method
    {#Constructor [privacy strict_floating_point? annotations variables exceptions
                   self arguments constructor_arguments
                   body]}
    (method.method (all modifier#composite
                        (..method_privacy privacy)
                        (if strict_floating_point?
                          method.strict
                          modifier.empty))
                   ..constructor_name
                   #1 (type.method [variables (list#each product.right arguments) type.void exceptions])
                   (list)
                   {.#Some (all _.composite
                                (_.aload 0)
                                (|> constructor_arguments
                                    (list#each (|>> product.left ..mock_value))
                                    (monad.all _.monad))
                                (|> (type.method [(list) (list#each product.left constructor_arguments) type.void (list)])
                                    (_.invokespecial super ..constructor_name))
                                _.return
                                )})

    {#Overriden_Method [super name strict_floating_point? annotations variables
                        self arguments return exceptions
                        body]}
    (method.method (all modifier#composite
                        method.public
                        (if strict_floating_point?
                          method.strict
                          modifier.empty))
                   name
                   #1 (type.method [variables (list#each product.right arguments) return exceptions])
                   (list)
                   {.#Some (..mock_return return)})

    {#Virtual_Method [name privacy final? strict_floating_point? annotations variables
                      self arguments return exceptions
                      body]}
    (method.method (all modifier#composite
                        (..method_privacy privacy)
                        (if strict_floating_point?
                          method.strict
                          modifier.empty)
                        (if final?
                          method.final
                          modifier.empty))
                   name
                   #1 (type.method [variables (list#each product.right arguments) return exceptions])
                   (list)
                   {.#Some (..mock_return return)})

    {#Static_Method [name privacy strict_floating_point? annotations
                     variables arguments return exceptions
                     body]}
    (method.method (all modifier#composite
                        method.static
                        (..method_privacy privacy)
                        (if strict_floating_point?
                          method.strict
                          modifier.empty))
                   name
                   #1 (type.method [variables (list#each product.right arguments) return exceptions])
                   (list)
                   {.#Some (..mock_return return)})

    {#Abstract_Method [name privacy annotations
                       variables arguments return exceptions]}
    (method.method (all modifier#composite
                        method.abstract
                        (..method_privacy privacy))
                   name
                   #1 (type.method [variables (list#each product.right arguments) return exceptions])
                   (list)
                   {.#None})
    ))

(def: (mock declaration super interfaces inheritance fields methods)
  (-> Declaration
      (Type Class) (List (Type Class))
      (Modifier class.Class) (List ..Field) (List (Method_Definition Code))
      (Try [External Binary]))
  (mock_class declaration super interfaces
              (list#each ..field_definition fields)
              (list#each (..mock_method super) methods)
              inheritance))

(template [<name> <type> <parser>]
  [(def: <name>
     (Parser <type>)
     (do [! <>.monad]
       [raw <code>.text]
       (<>.lifted (<text>.result <parser> raw))))]

  [class_declaration [External (List (Type Var))] parser.declaration']
  )

(def: (save_class! name bytecode dependencies)
  (-> Text Binary (Set unit.ID) (Operation Any))
  (directive.lifted_generation
   (do [! phase.monad]
     [.let [artifact [name bytecode]]
      artifact_id (generation.learn_custom name dependencies)
      _ (generation.execute! artifact)
      _ (generation.save! artifact_id {.#Some name} artifact)
      _ (generation.log! (format "JVM Class " name))]
     (in []))))

(def: jvm::class
  (Handler Anchor (Bytecode Any) Definition)
  (/.custom
   [(all <>.and
         ..class_declaration
         jvm.class
         (<code>.tuple (<>.some jvm.class))
         ..inheritance
         (<code>.tuple (<>.some ..annotation))
         (<code>.tuple (<>.some ..field))
         (<code>.tuple (<>.some ..method)))
    (function (_ extension phase archive
                 [class_declaration
                  super
                  interfaces
                  inheritance
                  ... TODO: Handle annotations.
                  annotations
                  fields
                  methods])
      (do [! phase.monad]
        [.let [[name parameters] class_declaration
               type_declaration (signature.inheritance (list#each type.signature parameters)
                                                       (type.signature super)
                                                       (list#each type.signature interfaces))]
         mock (<| phase.lifted
                  (..mock class_declaration
                          super
                          interfaces
                          inheritance
                          fields
                          methods))
         ... Necessary for reflection to work properly during analysis.
         _ (directive.lifted_generation
            (generation.execute! mock))
         parameters (directive.lifted_analysis
                     (typeA.check (jvm.parameter_types parameters)))
         .let [mapping (list#mix (function (_ [parameterJ parameterT] mapping)
                                   (dictionary.has (parser.name parameterJ) parameterT mapping))
                                 luxT.fresh
                                 parameters)
               selfT {.#Primitive name (list#each product.right parameters)}]
         state (extension.lifted phase.state)
         methods (monad.each ! (..method_definition archive super interfaces [mapping selfT]
                                                    [(the [directive.#analysis directive.#phase] state)
                                                     (the [directive.#synthesis directive.#phase] state)
                                                     (the [directive.#generation directive.#phase] state)])
                             methods)
         .let [all_dependencies (cache.all (list#each product.left methods))]
         bytecode (<| (# ! each (format.result class.writer))
                      phase.lifted
                      (class.class version.v6_0
                                   (all modifier#composite
                                        class.public
                                        inheritance)
                                   (name.internal name)
                                   {.#Some type_declaration}
                                   (..class_name super)
                                   (list#each ..class_name interfaces)
                                   (list#each ..field_definition fields)
                                   (list#each product.right methods)
                                   sequence.empty))
         _ (..save_class! name bytecode all_dependencies)]
        (in directive.no_requirements)))]))

(def: (method_declaration (open "/[0]"))
  (-> (jvm.Method_Declaration Code) (Resource Method))
  (let [type (type.method [/#type_variables /#arguments /#return /#exceptions])]
    (method.method (all modifier#composite
                        method.public
                        method.abstract)
                   /#name
                   #1 type
                   (list)
                   {.#None})))

(def: jvm::class::interface
  (Handler Anchor (Bytecode Any) Definition)
  (/.custom
   [(all <>.and
         ..class_declaration
         (<code>.tuple (<>.some jvm.class))
         ... TODO: Handle annotations.
         (<code>.tuple (<>.some ..annotation))
         (<>.some jvm.method_declaration))
    (function (_ extension_name phase archive [[name parameters] supers annotations method_declarations])
      (directive.lifted_generation
       (do [! phase.monad]
         [bytecode (<| (# ! each (format.result class.writer))
                       phase.lifted
                       (class.class version.v6_0
                                    (all modifier#composite
                                         class.public
                                         class.abstract
                                         class.interface)
                                    (name.internal name)
                                    {.#Some (signature.inheritance (list#each type.signature parameters)
                                                                   (type.signature $Object)
                                                                   (list#each type.signature supers))}
                                    (name.internal "java.lang.Object")
                                    (list#each ..class_name supers)
                                    (list)
                                    (list#each ..method_declaration method_declarations)
                                    sequence.empty))
          artifact_id (generation.learn_custom name unit.none)
          .let [artifact [name bytecode]]
          _ (generation.execute! artifact)
          _ (generation.save! artifact_id {.#Some name} artifact)
          _ (generation.log! (format "JVM Interface " (%.text name)))]
         (in directive.no_requirements))))]))

(import: java/lang/ClassLoader
  "[1]::[0]")

(def: .public (bundle class_loader extender)
  (-> java/lang/ClassLoader Extender (Bundle Anchor (Bytecode Any) Definition))
  (<| (bundle.prefix "jvm")
      (|> bundle.empty
          (dictionary.has "class" jvm::class)
          (dictionary.has "class interface" ..jvm::class::interface)
          )))
