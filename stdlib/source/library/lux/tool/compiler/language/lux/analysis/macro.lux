(.using
 [library
  [lux "*"
   [abstract
    [monad {"+" do}]]
   [control
    ["[0]" try {"+" Try}]
    ["[0]" exception {"+" exception:}]]
   [data
    ["[0]" text
     ["%" format {"+" format}]]]
   ["[0]" meta]]]
 [/////
  ["[0]" phase]])

(exception: .public (expansion_failed [macro Symbol
                                       inputs (List Code)
                                       error Text])
  (exception.report
   ["Macro" (%.symbol macro)]
   ["Inputs" (exception.listing %.code inputs)]
   ["Error" error]))

(exception: .public (must_have_single_expansion [macro Symbol
                                                 inputs (List Code)
                                                 outputs (List Code)])
  (exception.report
   ["Macro" (%.symbol macro)]
   ["Inputs" (exception.listing %.code inputs)]
   ["Outputs" (exception.listing %.code outputs)]))

(type: .public Expander
  (-> Macro (List Code) Lux (Try (Try [Lux (List Code)]))))

(def: .public (expansion expander name macro inputs)
  (-> Expander Symbol Macro (List Code) (Meta (List Code)))
  (function (_ state)
    (do try.monad
      [output (expander macro inputs state)]
      (case output
        {try.#Failure error}
        ((meta.failure (exception.error ..expansion_failed [name inputs error])) state)

        _
        output))))

(def: .public (single_expansion expander name macro inputs)
  (-> Expander Symbol Macro (List Code) (Meta Code))
  (do meta.monad
    [expansion (..expansion expander name macro inputs)]
    (case expansion
      (^ (list single))
      (in single)

      _
      (meta.failure (exception.error ..must_have_single_expansion [name inputs expansion])))))
