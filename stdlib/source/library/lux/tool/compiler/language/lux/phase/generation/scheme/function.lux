(.module:
  [library
   [lux (#- function)
    [abstract
     ["." monad (#+ do)]]
    [control
     pipe]
    [data
     ["." product]
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor fold)]]]
    [target
     ["_" scheme (#+ Expression Computation Var)]]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Generator)]
   ["#." reference]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["//#" /// #_
     [analysis (#+ Variant Tuple Abstraction Application Analysis)]
     [synthesis (#+ Synthesis)]
     ["#." generation (#+ Context)]
     ["//#" /// #_
      [arity (#+ Arity)]
      ["#." phase ("#\." monad)]
      [reference
       [variable (#+ Register Variable)]]]]]])

(def: #export (apply expression archive [functionS argsS+])
  (Generator (Application Synthesis))
  (do {! ///////phase.monad}
    [functionO (expression archive functionS)
     argsO+ (monad.map ! (expression archive) argsS+)]
    (wrap (_.apply/* argsO+ functionO))))

(def: capture
  (-> Register Var)
  (|>> (///reference.foreign //reference.system) :assume))

(def: (with_closure inits function_definition)
  (-> (List Expression) Computation (Operation Computation))
  (///////phase\wrap
   (case inits
     #.Nil
     function_definition

     _
     (|> function_definition
         (_.lambda [(|> (list.enumeration inits)
                        (list\map (|>> product.left ..capture)))
                    #.None])
         (_.apply/* inits)))))

(def: @curried (_.var "curried"))
(def: @missing (_.var "missing"))

(def: input
  (|>> inc //case.register))

(def: #export (function expression archive [environment arity bodyS])
  (Generator (Abstraction Synthesis))
  (do {! ///////phase.monad}
    [[function_name bodyO] (/////generation.with_new_context archive
                             (do !
                               [@self (\ ! map (|>> ///reference.artifact _.var)
                                         (/////generation.context archive))]
                               (/////generation.with_anchor @self
                                 (expression archive bodyS))))
     closureO+ (monad.map ! (expression archive) environment)
     #let [arityO (|> arity .int _.int)
           apply_poly (.function (_ args func)
                        (_.apply/2 (_.var "apply") func args))
           @num_args (_.var "num_args")
           @self (_.var (///reference.artifact function_name))]]
    (with_closure closureO+
      (_.letrec (list [@self (_.lambda [(list) (#.Some @curried)]
                                       (_.let (list [@num_args (_.length/1 @curried)])
                                         (<| (_.if (|> @num_args (_.=/2 arityO))
                                               (<| (_.let (list [(//case.register 0) @self]))
                                                   (_.let_values (list [[(|> (list.indices arity)
                                                                             (list\map ..input))
                                                                         #.None]
                                                                        (_.apply/2 (_.var "apply") (_.var "values") @curried)]))
                                                   bodyO))
                                             (_.if (|> @num_args (_.>/2 arityO))
                                               (let [arity_args (//runtime.slice (_.int +0) arityO @curried)
                                                     output_func_args (//runtime.slice arityO
                                                                                       (|> @num_args (_.-/2 arityO))
                                                                                       @curried)]
                                                 (_.begin (list (|> @self
                                                                    (apply_poly arity_args)
                                                                    (apply_poly output_func_args))))))
                                             ## (|> @num_args (_.</2 arityO))
                                             (_.lambda [(list) (#.Some @missing)]
                                                       (|> @self
                                                           (apply_poly (_.append/2 @curried @missing)))))
                                         ))])
                @self))))
