(.module:
  [library
   [lux {"-" [Type]}
    [abstract
     ["[0]" monad {"+" [do]}]]
    [control
     ["[0]" maybe]
     ["[0]" try]
     ["[0]" exception {"+" [exception:]}]
     ["<>" parser
      ["<t>" text]
      ["<s>" synthesis {"+" [Parser]}]]]
    [data
     ["[0]" product]
     ["[0]" text ("[1]\[0]" equivalence)
      ["%" format {"+" [format]}]]
     [number
      ["[0]" i32]]
     [collection
      ["[0]" list ("[1]\[0]" monad)]
      ["[0]" dictionary {"+" [Dictionary]}]
      ["[0]" set]
      ["[0]" row]]
     ["[0]" format "_"
      ["[1]" binary]]]
    [target
     [jvm
      ["[0]" version]
      ["[0]" modifier ("[1]\[0]" monoid)]
      ["[0]" method {"+" [Method]}]
      ["[0]" class {"+" [Class]}]
      [constant
       [pool {"+" [Resource]}]]
      [encoding
       ["[0]" name]]
      ["_" bytecode {"+" [Label Bytecode]} ("[1]\[0]" monad)
       ["__" instruction {"+" [Primitive_Array_Type]}]]
      ["[0]" type {"+" [Type Typed Argument]}
       ["[0]" category {"+" [Void Value' Value Return' Return Primitive Object Array Var Parameter]}]
       ["[0]" box]
       ["[0]" reflection]
       ["[0]" signature]
       ["[0]" parser]]]]]]
  ["[0]" // "_"
   [common {"+" [custom]}]
   ["///[1]" //// "_"
    [generation
     [extension {"+" [Nullary Unary Binary Trinary Variadic
                      nullary unary binary trinary variadic]}]
     ["///" jvm
      ["[1][0]" runtime {"+" [Operation Bundle Phase Handler]}]
      ["[1][0]" reference]
      [function
       [field
        [variable
         ["[0]" foreign]]]]]]
    [extension
     ["[1][0]" bundle]
     [analysis
      ["/" jvm]]]
    ["/[1]" // "_"
     [analysis {"+" [Environment]}]
     ["[1][0]" synthesis {"+" [Synthesis Path %synthesis]}]
     ["[1][0]" generation]
     [///
      ["[1]" phase]
      [reference
       ["[1][0]" variable {"+" [Variable]}]]
      [meta
       ["[0]" archive {"+" [Archive]}]]]]]])

(template [<name> <0> <1>]
  [(def: <name>
     (Bytecode Any)
     ($_ _.composite
         <0>
         <1>))]

  [l2s _.l2i _.i2s]
  [l2b _.l2i _.i2b]
  [l2c _.l2i _.i2c]
  )

(template [<conversion> <name>]
  [(def: (<name> inputG)
     (Unary (Bytecode Any))
     (if (same? _.nop <conversion>)
       inputG
       ($_ _.composite
           inputG
           <conversion>)))]
  
  [_.d2f conversion::double_to_float]
  [_.d2i conversion::double_to_int]
  [_.d2l conversion::double_to_long]
  [_.f2d conversion::float_to_double]
  [_.f2i conversion::float_to_int]
  [_.f2l conversion::float_to_long]
  [_.i2b conversion::int_to_byte]
  [_.i2c conversion::int_to_char]
  [_.i2d conversion::int_to_double]
  [_.i2f conversion::int_to_float]
  [_.i2l conversion::int_to_long]
  [_.i2s conversion::int_to_short]
  [_.l2d conversion::long_to_double]
  [_.l2f conversion::long_to_float]
  [_.l2i conversion::long_to_int]
  [..l2s conversion::long_to_short]
  [..l2b conversion::long_to_byte]
  [..l2c conversion::long_to_char]
  [_.i2b conversion::char_to_byte]
  [_.i2s conversion::char_to_short]
  [_.nop conversion::char_to_int]
  [_.i2l conversion::char_to_long]
  [_.i2l conversion::byte_to_long]
  [_.i2l conversion::short_to_long]
  )

(def: bundle::conversion
  Bundle
  (<| (/////bundle.prefix "conversion")
      (|> (: Bundle /////bundle.empty)
          (/////bundle.install "double-to-float" (unary conversion::double_to_float))
          (/////bundle.install "double-to-int" (unary conversion::double_to_int))
          (/////bundle.install "double-to-long" (unary conversion::double_to_long))
          (/////bundle.install "float-to-double" (unary conversion::float_to_double))
          (/////bundle.install "float-to-int" (unary conversion::float_to_int))
          (/////bundle.install "float-to-long" (unary conversion::float_to_long))
          (/////bundle.install "int-to-byte" (unary conversion::int_to_byte))
          (/////bundle.install "int-to-char" (unary conversion::int_to_char))
          (/////bundle.install "int-to-double" (unary conversion::int_to_double))
          (/////bundle.install "int-to-float" (unary conversion::int_to_float))
          (/////bundle.install "int-to-long" (unary conversion::int_to_long))
          (/////bundle.install "int-to-short" (unary conversion::int_to_short))
          (/////bundle.install "long-to-double" (unary conversion::long_to_double))
          (/////bundle.install "long-to-float" (unary conversion::long_to_float))
          (/////bundle.install "long-to-int" (unary conversion::long_to_int))
          (/////bundle.install "long-to-short" (unary conversion::long_to_short))
          (/////bundle.install "long-to-byte" (unary conversion::long_to_byte))
          (/////bundle.install "long-to-char" (unary conversion::long_to_char))
          (/////bundle.install "char-to-byte" (unary conversion::char_to_byte))
          (/////bundle.install "char-to-short" (unary conversion::char_to_short))
          (/////bundle.install "char-to-int" (unary conversion::char_to_int))
          (/////bundle.install "char-to-long" (unary conversion::char_to_long))
          (/////bundle.install "byte-to-long" (unary conversion::byte_to_long))
          (/////bundle.install "short-to-long" (unary conversion::short_to_long))
          )))

(template [<name> <op>]
  [(def: (<name> [xG yG])
     (Binary (Bytecode Any))
     ($_ _.composite
         xG
         yG
         <op>))]

  [int::+ _.iadd]
  [int::- _.isub]
  [int::* _.imul]
  [int::/ _.idiv]
  [int::% _.irem]
  [int::and _.iand]
  [int::or _.ior]
  [int::xor _.ixor]
  [int::shl _.ishl]
  [int::shr _.ishr]
  [int::ushr _.iushr]
  
  [long::+ _.ladd]
  [long::- _.lsub]
  [long::* _.lmul]
  [long::/ _.ldiv]
  [long::% _.lrem]
  [long::and _.land]
  [long::or _.lor]
  [long::xor _.lxor]
  [long::shl _.lshl]
  [long::shr _.lshr]
  [long::ushr _.lushr]

  [float::+ _.fadd]
  [float::- _.fsub]
  [float::* _.fmul]
  [float::/ _.fdiv]
  [float::% _.frem]
  
  [double::+ _.dadd]
  [double::- _.dsub]
  [double::* _.dmul]
  [double::/ _.ddiv]
  [double::% _.drem]
  )

(def: $Boolean (type.class box.boolean (list)))
(def: falseG (_.getstatic ..$Boolean "FALSE" ..$Boolean))
(def: trueG (_.getstatic ..$Boolean "TRUE" ..$Boolean))

(template [<name> <op>]
  [(def: (<name> [xG yG])
     (Binary (Bytecode Any))
     (do _.monad
       [@then _.new_label
        @end _.new_label]
       ($_ _.composite
           xG
           yG
           (<op> @then)
           falseG
           (_.goto @end)
           (_.set_label @then)
           trueG
           (_.set_label @end))))]

  [int::= _.if_icmpeq]
  [int::< _.if_icmplt]

  [char::= _.if_icmpeq]
  [char::< _.if_icmplt]
  )

(template [<name> <op> <reference>]
  [(def: (<name> [xG yG])
     (Binary (Bytecode Any))
     (do _.monad
       [@then _.new_label
        @end _.new_label]
       ($_ _.composite
           xG
           yG
           <op>
           (_.int (i32.i32 (.i64 <reference>)))
           (_.if_icmpeq @then)
           falseG
           (_.goto @end)
           (_.set_label @then)
           trueG
           (_.set_label @end))))]

  [long::= _.lcmp +0]
  [long::< _.lcmp -1]
  
  [float::= _.fcmpg +0]
  [float::< _.fcmpg -1]

  [double::= _.dcmpg +0]
  [double::< _.dcmpg -1]
  )

(def: bundle::int
  Bundle
  (<| (/////bundle.prefix (reflection.reflection reflection.int))
      (|> (: Bundle /////bundle.empty)
          (/////bundle.install "+" (binary int::+))
          (/////bundle.install "-" (binary int::-))
          (/////bundle.install "*" (binary int::*))
          (/////bundle.install "/" (binary int::/))
          (/////bundle.install "%" (binary int::%))
          (/////bundle.install "=" (binary int::=))
          (/////bundle.install "<" (binary int::<))
          (/////bundle.install "and" (binary int::and))
          (/////bundle.install "or" (binary int::or))
          (/////bundle.install "xor" (binary int::xor))
          (/////bundle.install "shl" (binary int::shl))
          (/////bundle.install "shr" (binary int::shr))
          (/////bundle.install "ushr" (binary int::ushr))
          )))

(def: bundle::long
  Bundle
  (<| (/////bundle.prefix (reflection.reflection reflection.long))
      (|> (: Bundle /////bundle.empty)
          (/////bundle.install "+" (binary long::+))
          (/////bundle.install "-" (binary long::-))
          (/////bundle.install "*" (binary long::*))
          (/////bundle.install "/" (binary long::/))
          (/////bundle.install "%" (binary long::%))
          (/////bundle.install "=" (binary long::=))
          (/////bundle.install "<" (binary long::<))
          (/////bundle.install "and" (binary long::and))
          (/////bundle.install "or" (binary long::or))
          (/////bundle.install "xor" (binary long::xor))
          (/////bundle.install "shl" (binary long::shl))
          (/////bundle.install "shr" (binary long::shr))
          (/////bundle.install "ushr" (binary long::ushr))
          )))

(def: bundle::float
  Bundle
  (<| (/////bundle.prefix (reflection.reflection reflection.float))
      (|> (: Bundle /////bundle.empty)
          (/////bundle.install "+" (binary float::+))
          (/////bundle.install "-" (binary float::-))
          (/////bundle.install "*" (binary float::*))
          (/////bundle.install "/" (binary float::/))
          (/////bundle.install "%" (binary float::%))
          (/////bundle.install "=" (binary float::=))
          (/////bundle.install "<" (binary float::<))
          )))

(def: bundle::double
  Bundle
  (<| (/////bundle.prefix (reflection.reflection reflection.double))
      (|> (: Bundle /////bundle.empty)
          (/////bundle.install "+" (binary double::+))
          (/////bundle.install "-" (binary double::-))
          (/////bundle.install "*" (binary double::*))
          (/////bundle.install "/" (binary double::/))
          (/////bundle.install "%" (binary double::%))
          (/////bundle.install "=" (binary double::=))
          (/////bundle.install "<" (binary double::<))
          )))

(def: bundle::char
  Bundle
  (<| (/////bundle.prefix (reflection.reflection reflection.char))
      (|> (: Bundle /////bundle.empty)
          (/////bundle.install "=" (binary char::=))
          (/////bundle.install "<" (binary char::<))
          )))

(template [<name> <category> <parser>]
  [(def: .public <name>
     (Parser (Type <category>))
     (<t>.then <parser> <s>.text))]

  [var Var parser.var]
  [class category.Class parser.class]
  [object Object parser.object]
  [value Value parser.value]
  [return Return parser.return]
  )

(exception: .public (not_an_object_array {arrayJT (Type Array)})
  (exception.report
   ["JVM Type" (|> arrayJT type.signature signature.signature)]))

(def: .public object_array
  (Parser (Type Object))
  (do <>.monad
    [arrayJT (<t>.then parser.array <s>.text)]
    (case (parser.array? arrayJT)
      (#.Some elementJT)
      (case (parser.object? elementJT)
        (#.Some elementJT)
        (in elementJT)

        #.None
        (<>.failure (exception.error ..not_an_object_array arrayJT)))
      
      #.None
      (undefined))))

(def: (primitive_array_length_handler jvm_primitive)
  (-> (Type Primitive) Handler)
  (..custom
   [<s>.any
    (function (_ extension_name generate archive arrayS)
      (do //////.monad
        [arrayG (generate archive arrayS)]
        (in ($_ _.composite
                arrayG
                (_.checkcast (type.array jvm_primitive))
                _.arraylength))))]))

(def: array::length::object
  Handler
  (..custom
   [($_ <>.and ..object_array <s>.any)
    (function (_ extension_name generate archive [elementJT arrayS])
      (do //////.monad
        [arrayG (generate archive arrayS)]
        (in ($_ _.composite
                arrayG
                (_.checkcast (type.array elementJT))
                _.arraylength))))]))

(def: (new_primitive_array_handler jvm_primitive)
  (-> Primitive_Array_Type Handler)
  (..custom
   [<s>.any
    (function (_ extension_name generate archive [lengthS])
      (do //////.monad
        [lengthG (generate archive lengthS)]
        (in ($_ _.composite
                lengthG
                (_.newarray jvm_primitive)))))]))

(def: array::new::object
  Handler
  (..custom
   [($_ <>.and ..object <s>.any)
    (function (_ extension_name generate archive [objectJT lengthS])
      (do //////.monad
        [lengthG (generate archive lengthS)]
        (in ($_ _.composite
                lengthG
                (_.anewarray objectJT)))))]))

(def: (read_primitive_array_handler jvm_primitive loadG)
  (-> (Type Primitive) (Bytecode Any) Handler)
  (..custom
   [($_ <>.and <s>.any <s>.any)
    (function (_ extension_name generate archive [idxS arrayS])
      (do //////.monad
        [arrayG (generate archive arrayS)
         idxG (generate archive idxS)]
        (in ($_ _.composite
                arrayG
                (_.checkcast (type.array jvm_primitive))
                idxG
                loadG))))]))

(def: array::read::object
  Handler
  (..custom
   [($_ <>.and ..object_array <s>.any <s>.any)
    (function (_ extension_name generate archive [elementJT idxS arrayS])
      (do //////.monad
        [arrayG (generate archive arrayS)
         idxG (generate archive idxS)]
        (in ($_ _.composite
                arrayG
                (_.checkcast (type.array elementJT))
                idxG
                _.aaload))))]))

(def: (write_primitive_array_handler jvm_primitive storeG)
  (-> (Type Primitive) (Bytecode Any) Handler)
  (..custom
   [($_ <>.and <s>.any <s>.any <s>.any)
    (function (_ extension_name generate archive [idxS valueS arrayS])
      (do //////.monad
        [arrayG (generate archive arrayS)
         idxG (generate archive idxS)
         valueG (generate archive valueS)]
        (in ($_ _.composite
                arrayG
                (_.checkcast (type.array jvm_primitive))
                _.dup
                idxG
                valueG
                storeG))))]))

(def: array::write::object
  Handler
  (..custom
   [($_ <>.and ..object_array <s>.any <s>.any <s>.any)
    (function (_ extension_name generate archive [elementJT idxS valueS arrayS])
      (do //////.monad
        [arrayG (generate archive arrayS)
         idxG (generate archive idxS)
         valueG (generate archive valueS)]
        (in ($_ _.composite
                arrayG
                (_.checkcast (type.array elementJT))
                _.dup
                idxG
                valueG
                _.aastore))))]))

(def: bundle::array
  Bundle
  (<| (/////bundle.prefix "array")
      (|> /////bundle.empty
          (dictionary.merged (<| (/////bundle.prefix "length")
                                 (|> /////bundle.empty
                                     (/////bundle.install (reflection.reflection reflection.boolean) (primitive_array_length_handler type.boolean))
                                     (/////bundle.install (reflection.reflection reflection.byte) (primitive_array_length_handler type.byte))
                                     (/////bundle.install (reflection.reflection reflection.short) (primitive_array_length_handler type.short))
                                     (/////bundle.install (reflection.reflection reflection.int) (primitive_array_length_handler type.int))
                                     (/////bundle.install (reflection.reflection reflection.long) (primitive_array_length_handler type.long))
                                     (/////bundle.install (reflection.reflection reflection.float) (primitive_array_length_handler type.float))
                                     (/////bundle.install (reflection.reflection reflection.double) (primitive_array_length_handler type.double))
                                     (/////bundle.install (reflection.reflection reflection.char) (primitive_array_length_handler type.char))
                                     (/////bundle.install "object" array::length::object))))
          (dictionary.merged (<| (/////bundle.prefix "new")
                                 (|> /////bundle.empty
                                     (/////bundle.install (reflection.reflection reflection.boolean) (new_primitive_array_handler __.t_boolean))
                                     (/////bundle.install (reflection.reflection reflection.byte) (new_primitive_array_handler __.t_byte))
                                     (/////bundle.install (reflection.reflection reflection.short) (new_primitive_array_handler __.t_short))
                                     (/////bundle.install (reflection.reflection reflection.int) (new_primitive_array_handler __.t_int))
                                     (/////bundle.install (reflection.reflection reflection.long) (new_primitive_array_handler __.t_long))
                                     (/////bundle.install (reflection.reflection reflection.float) (new_primitive_array_handler __.t_float))
                                     (/////bundle.install (reflection.reflection reflection.double) (new_primitive_array_handler __.t_double))
                                     (/////bundle.install (reflection.reflection reflection.char) (new_primitive_array_handler __.t_char))
                                     (/////bundle.install "object" array::new::object))))
          (dictionary.merged (<| (/////bundle.prefix "read")
                                 (|> /////bundle.empty
                                     (/////bundle.install (reflection.reflection reflection.boolean) (read_primitive_array_handler type.boolean _.baload))
                                     (/////bundle.install (reflection.reflection reflection.byte) (read_primitive_array_handler type.byte _.baload))
                                     (/////bundle.install (reflection.reflection reflection.short) (read_primitive_array_handler type.short _.saload))
                                     (/////bundle.install (reflection.reflection reflection.int) (read_primitive_array_handler type.int _.iaload))
                                     (/////bundle.install (reflection.reflection reflection.long) (read_primitive_array_handler type.long _.laload))
                                     (/////bundle.install (reflection.reflection reflection.float) (read_primitive_array_handler type.float _.faload))
                                     (/////bundle.install (reflection.reflection reflection.double) (read_primitive_array_handler type.double _.daload))
                                     (/////bundle.install (reflection.reflection reflection.char) (read_primitive_array_handler type.char _.caload))
                                     (/////bundle.install "object" array::read::object))))
          (dictionary.merged (<| (/////bundle.prefix "write")
                                 (|> /////bundle.empty
                                     (/////bundle.install (reflection.reflection reflection.boolean) (write_primitive_array_handler type.boolean _.bastore))
                                     (/////bundle.install (reflection.reflection reflection.byte) (write_primitive_array_handler type.byte _.bastore))
                                     (/////bundle.install (reflection.reflection reflection.short) (write_primitive_array_handler type.short _.sastore))
                                     (/////bundle.install (reflection.reflection reflection.int) (write_primitive_array_handler type.int _.iastore))
                                     (/////bundle.install (reflection.reflection reflection.long) (write_primitive_array_handler type.long _.lastore))
                                     (/////bundle.install (reflection.reflection reflection.float) (write_primitive_array_handler type.float _.fastore))
                                     (/////bundle.install (reflection.reflection reflection.double) (write_primitive_array_handler type.double _.dastore))
                                     (/////bundle.install (reflection.reflection reflection.char) (write_primitive_array_handler type.char _.castore))
                                     (/////bundle.install "object" array::write::object))))
          )))

(def: (object::null _)
  (Nullary (Bytecode Any))
  _.aconst_null)

(def: (object::null? objectG)
  (Unary (Bytecode Any))
  (do _.monad
    [@then _.new_label
     @end _.new_label]
    ($_ _.composite
        objectG
        (_.ifnull @then)
        ..falseG
        (_.goto @end)
        (_.set_label @then)
        ..trueG
        (_.set_label @end))))

(def: (object::synchronized [monitorG exprG])
  (Binary (Bytecode Any))
  ($_ _.composite
      monitorG
      _.dup
      _.monitorenter
      exprG
      _.swap
      _.monitorexit))

(def: (object::throw exceptionG)
  (Unary (Bytecode Any))
  ($_ _.composite
      exceptionG
      _.athrow))

(def: $Class (type.class "java.lang.Class" (list)))
(def: $String (type.class "java.lang.String" (list)))

(def: object::class
  Handler
  (..custom
   [<s>.text
    (function (_ extension_name generate archive [class])
      (do //////.monad
        []
        (in ($_ _.composite
                (_.string class)
                (_.invokestatic ..$Class "forName" (type.method [(list ..$String) ..$Class (list)]))))))]))

(def: object::instance?
  Handler
  (..custom
   [($_ <>.and <s>.text <s>.any)
    (function (_ extension_name generate archive [class objectS])
      (do //////.monad
        [objectG (generate archive objectS)]
        (in ($_ _.composite
                objectG
                (_.instanceof (type.class class (list)))
                (_.invokestatic ..$Boolean "valueOf" (type.method [(list type.boolean) ..$Boolean (list)]))))))]))

(def: reflection
  (All (_ category)
    (-> (Type (<| Return' Value' category)) Text))
  (|>> type.reflection reflection.reflection))

(def: object::cast
  Handler
  (..custom
   [($_ <>.and <s>.text <s>.text <s>.any)
    (function (_ extension_name generate archive [from to valueS])
      (do //////.monad
        [valueG (generate archive valueS)]
        (in (`` (cond (~~ (template [<object> <type> <unwrap>]
                            [(and (text\= (..reflection <type>)
                                          from)
                                  (text\= <object>
                                          to))
                             (let [$<object> (type.class <object> (list))]
                               ($_ _.composite
                                   valueG
                                   (_.invokestatic $<object> "valueOf" (type.method [(list <type>) $<object> (list)]))))

                             (and (text\= <object>
                                          from)
                                  (text\= (..reflection <type>)
                                          to))
                             (let [$<object> (type.class <object> (list))]
                               ($_ _.composite
                                   valueG
                                   (_.checkcast $<object>)
                                   (_.invokevirtual $<object> <unwrap> (type.method [(list) <type> (list)]))))]
                            
                            [box.boolean type.boolean "booleanValue"]
                            [box.byte    type.byte    "byteValue"]
                            [box.short   type.short   "shortValue"]
                            [box.int     type.int     "intValue"]
                            [box.long    type.long    "longValue"]
                            [box.float   type.float   "floatValue"]
                            [box.double  type.double  "doubleValue"]
                            [box.char    type.char    "charValue"]))
                      ... else
                      valueG)))))]))

(def: bundle::object
  Bundle
  (<| (/////bundle.prefix "object")
      (|> (: Bundle /////bundle.empty)
          (/////bundle.install "null" (nullary object::null))
          (/////bundle.install "null?" (unary object::null?))
          (/////bundle.install "synchronized" (binary object::synchronized))
          (/////bundle.install "throw" (unary object::throw))
          (/////bundle.install "class" object::class)
          (/////bundle.install "instance?" object::instance?)
          (/////bundle.install "cast" object::cast)
          )))

(def: primitives
  (Dictionary Text (Type Primitive))
  (|> (list [(reflection.reflection reflection.boolean) type.boolean]
            [(reflection.reflection reflection.byte) type.byte]
            [(reflection.reflection reflection.short) type.short]
            [(reflection.reflection reflection.int) type.int]
            [(reflection.reflection reflection.long) type.long]
            [(reflection.reflection reflection.float) type.float]
            [(reflection.reflection reflection.double) type.double]
            [(reflection.reflection reflection.char) type.char])
      (dictionary.from_list text.hash)))

(def: get::static
  Handler
  (..custom
   [($_ <>.and <s>.text <s>.text <s>.text)
    (function (_ extension_name generate archive [class field unboxed])
      (do //////.monad
        [.let [$class (type.class class (list))]]
        (case (dictionary.value unboxed ..primitives)
          (#.Some primitive)
          (in (_.getstatic $class field primitive))
          
          #.None
          (in (_.getstatic $class field (type.class unboxed (list)))))))]))

(def: unitG (_.string //////synthesis.unit))

(def: put::static
  Handler
  (..custom
   [($_ <>.and <s>.text <s>.text <s>.text <s>.any)
    (function (_ extension_name generate archive [class field unboxed valueS])
      (do //////.monad
        [valueG (generate archive valueS)
         .let [$class (type.class class (list))]]
        (case (dictionary.value unboxed ..primitives)
          (#.Some primitive)
          (in ($_ _.composite
                  valueG
                  (_.putstatic $class field primitive)
                  ..unitG))
          
          #.None
          (in ($_ _.composite
                  valueG
                  (_.checkcast $class)
                  (_.putstatic $class field $class)
                  ..unitG)))))]))

(def: get::virtual
  Handler
  (..custom
   [($_ <>.and <s>.text <s>.text <s>.text <s>.any)
    (function (_ extension_name generate archive [class field unboxed objectS])
      (do //////.monad
        [objectG (generate archive objectS)
         .let [$class (type.class class (list))
               getG (case (dictionary.value unboxed ..primitives)
                      (#.Some primitive)
                      (_.getfield $class field primitive)
                      
                      #.None
                      (_.getfield $class field (type.class unboxed (list))))]]
        (in ($_ _.composite
                objectG
                (_.checkcast $class)
                getG))))]))

(def: put::virtual
  Handler
  (..custom
   [($_ <>.and <s>.text <s>.text <s>.text <s>.any <s>.any)
    (function (_ extension_name generate archive [class field unboxed valueS objectS])
      (do //////.monad
        [valueG (generate archive valueS)
         objectG (generate archive objectS)
         .let [$class (type.class class (list))
               putG (case (dictionary.value unboxed ..primitives)
                      (#.Some primitive)
                      (_.putfield $class field primitive)
                      
                      #.None
                      (let [$unboxed (type.class unboxed (list))]
                        ($_ _.composite
                            (_.checkcast $unboxed)
                            (_.putfield $class field $unboxed))))]]
        (in ($_ _.composite
                objectG
                (_.checkcast $class)
                _.dup
                valueG
                putG))))]))

(type: Input (Typed Synthesis))

(def: input
  (Parser Input)
  (<s>.tuple (<>.and ..value <s>.any)))

(def: (generate_input generate archive [valueT valueS])
  (-> Phase Archive Input (Operation (Typed (Bytecode Any))))
  (do //////.monad
    [valueG (generate archive valueS)]
    (case (type.primitive? valueT)
      (#.Right valueT)
      (in [valueT valueG])
      
      (#.Left valueT)
      (in [valueT ($_ _.composite
                      valueG
                      (_.checkcast valueT))]))))

(def: (prepare_output outputT)
  (-> (Type Return) (Bytecode Any))
  (case (type.void? outputT)
    (#.Right outputT)
    ..unitG
    
    (#.Left outputT)
    (\ _.monad in [])))

(def: invoke::static
  Handler
  (..custom
   [($_ <>.and ..class <s>.text ..return (<>.some ..input))
    (function (_ extension_name generate archive [class method outputT inputsTS])
      (do [! //////.monad]
        [inputsTG (monad.each ! (generate_input generate archive) inputsTS)]
        (in ($_ _.composite
                (monad.each _.monad product.right inputsTG)
                (_.invokestatic class method (type.method [(list\each product.left inputsTG) outputT (list)]))
                (prepare_output outputT)))))]))

(template [<name> <invoke>]
  [(def: <name>
     Handler
     (..custom
      [($_ <>.and ..class <s>.text ..return <s>.any (<>.some ..input))
       (function (_ extension_name generate archive [class method outputT objectS inputsTS])
         (do [! //////.monad]
           [objectG (generate archive objectS)
            inputsTG (monad.each ! (generate_input generate archive) inputsTS)]
           (in ($_ _.composite
                   objectG
                   (_.checkcast class)
                   (monad.each _.monad product.right inputsTG)
                   (<invoke> class method (type.method [(list\each product.left inputsTG) outputT (list)]))
                   (prepare_output outputT)))))]))]

  [invoke::virtual _.invokevirtual]
  [invoke::special _.invokespecial]
  [invoke::interface _.invokeinterface]
  )

(def: invoke::constructor
  Handler
  (..custom
   [($_ <>.and ..class (<>.some ..input))
    (function (_ extension_name generate archive [class inputsTS])
      (do [! //////.monad]
        [inputsTG (monad.each ! (generate_input generate archive) inputsTS)]
        (in ($_ _.composite
                (_.new class)
                _.dup
                (monad.each _.monad product.right inputsTG)
                (_.invokespecial class "<init>" (type.method [(list\each product.left inputsTG) type.void (list)]))))))]))

(def: bundle::member
  Bundle
  (<| (/////bundle.prefix "member")
      (|> (: Bundle /////bundle.empty)
          (dictionary.merged (<| (/////bundle.prefix "get")
                                 (|> (: Bundle /////bundle.empty)
                                     (/////bundle.install "static" get::static)
                                     (/////bundle.install "virtual" get::virtual))))
          (dictionary.merged (<| (/////bundle.prefix "put")
                                 (|> (: Bundle /////bundle.empty)
                                     (/////bundle.install "static" put::static)
                                     (/////bundle.install "virtual" put::virtual))))
          (dictionary.merged (<| (/////bundle.prefix "invoke")
                                 (|> (: Bundle /////bundle.empty)
                                     (/////bundle.install "static" invoke::static)
                                     (/////bundle.install "virtual" invoke::virtual)
                                     (/////bundle.install "special" invoke::special)
                                     (/////bundle.install "interface" invoke::interface)
                                     (/////bundle.install "constructor" invoke::constructor))))
          )))

(def: annotation_parameter
  (Parser (/.Annotation_Parameter Synthesis))
  (<s>.tuple (<>.and <s>.text <s>.any)))

(def: annotation
  (Parser (/.Annotation Synthesis))
  (<s>.tuple (<>.and <s>.text (<>.some ..annotation_parameter))))

(def: argument
  (Parser Argument)
  (<s>.tuple (<>.and <s>.text ..value)))

(def: overriden_method_definition
  (Parser [(Environment Synthesis) (/.Overriden_Method Synthesis)])
  (<s>.tuple (do <>.monad
               [_ (<s>.text! /.overriden_tag)
                ownerT ..class
                name <s>.text
                strict_fp? <s>.bit
                annotations (<s>.tuple (<>.some ..annotation))
                vars (<s>.tuple (<>.some ..var))
                self_name <s>.text
                arguments (<s>.tuple (<>.some ..argument))
                returnT ..return
                exceptionsT (<s>.tuple (<>.some ..class))
                [environment body] (<s>.function 1
                                     (<s>.tuple <s>.any))]
               (in [environment
                    [ownerT name
                     strict_fp? annotations vars
                     self_name arguments returnT exceptionsT
                     body]]))))

(def: (normalize_path normalize)
  (-> (-> Synthesis Synthesis)
      (-> Path Path))
  (function (recur path)
    (case path
      (^ (//////synthesis.path/then bodyS))
      (//////synthesis.path/then (normalize bodyS))

      (^template [<tag>]
        [(^ (<tag> leftP rightP))
         (<tag> (recur leftP) (recur rightP))])
      ([#//////synthesis.Alt]
       [#//////synthesis.Seq])

      (^template [<tag>]
        [(^ (<tag> value))
         path])
      ([#//////synthesis.Pop]
       [#//////synthesis.Bind]
       [#//////synthesis.Access])

      _
      (undefined))))

(def: (normalize_method_body mapping)
  (-> (Dictionary Variable Variable) Synthesis Synthesis)
  (function (recur body)
    (case body
      (^template [<tag>]
        [(^ (<tag> value))
         body])
      ([#//////synthesis.Primitive]
       [//////synthesis.constant])

      (^ (//////synthesis.variant [lefts right? sub]))
      (//////synthesis.variant [lefts right? (recur sub)])

      (^ (//////synthesis.tuple members))
      (//////synthesis.tuple (list\each recur members))

      (^ (//////synthesis.variable var))
      (|> mapping
          (dictionary.value var)
          (maybe.else var)
          //////synthesis.variable)

      (^ (//////synthesis.branch/case [inputS pathS]))
      (//////synthesis.branch/case [(recur inputS) (normalize_path recur pathS)])

      (^ (//////synthesis.branch/let [inputS register outputS]))
      (//////synthesis.branch/let [(recur inputS) register (recur outputS)])

      (^ (//////synthesis.branch/if [testS thenS elseS]))
      (//////synthesis.branch/if [(recur testS) (recur thenS) (recur elseS)])

      (^ (//////synthesis.branch/get [path recordS]))
      (//////synthesis.branch/get [path (recur recordS)])

      (^ (//////synthesis.loop/scope [offset initsS+ bodyS]))
      (//////synthesis.loop/scope [offset (list\each recur initsS+) (recur bodyS)])

      (^ (//////synthesis.loop/recur updatesS+))
      (//////synthesis.loop/recur (list\each recur updatesS+))

      (^ (//////synthesis.function/abstraction [environment arity bodyS]))
      (//////synthesis.function/abstraction [(list\each (function (_ local)
                                                          (case local
                                                            (^ (//////synthesis.variable local))
                                                            (|> mapping
                                                                (dictionary.value local)
                                                                (maybe.else local)
                                                                //////synthesis.variable)

                                                            _
                                                            local))
                                                        environment)
                                             arity
                                             bodyS])

      (^ (//////synthesis.function/apply [functionS inputsS+]))
      (//////synthesis.function/apply [(recur functionS) (list\each recur inputsS+)])

      (#//////synthesis.Extension [name inputsS+])
      (#//////synthesis.Extension [name (list\each recur inputsS+)]))))

(def: $Object
  (type.class "java.lang.Object" (list)))

(def: (anonymous_init_method env)
  (-> (Environment Synthesis) (Type category.Method))
  (type.method [(list.repeated (list.size env) ..$Object)
                type.void
                (list)]))

(def: (with_anonymous_init class env super_class inputsTG)
  (-> (Type category.Class) (Environment Synthesis) (Type category.Class) (List (Typed (Bytecode Any))) (Resource Method))
  (let [store_capturedG (|> env
                            list.size
                            list.indices
                            (monad.each _.monad (.function (_ register)
                                                  ($_ _.composite
                                                      (_.aload 0)
                                                      (_.aload (++ register))
                                                      (_.putfield class (///reference.foreign_name register) $Object)))))]
    (method.method method.public "<init>" (anonymous_init_method env)
                   (list)
                   (#.Some ($_ _.composite
                               (_.aload 0)
                               (monad.each _.monad product.right inputsTG)
                               (_.invokespecial super_class "<init>" (type.method [(list\each product.left inputsTG) type.void (list)]))
                               store_capturedG
                               _.return)))))

(def: (anonymous_instance generate archive class env)
  (-> Phase Archive (Type category.Class) (Environment Synthesis) (Operation (Bytecode Any)))
  (do [! //////.monad]
    [captureG+ (monad.each ! (generate archive) env)]
    (in ($_ _.composite
            (_.new class)
            _.dup
            (monad.all _.monad captureG+)
            (_.invokespecial class "<init>" (anonymous_init_method env))))))

(def: (returnG returnT)
  (-> (Type Return) (Bytecode Any))
  (case (type.void? returnT)
    (#.Right returnT)
    _.return

    (#.Left returnT)
    (case (type.primitive? returnT)
      (#.Left returnT)
      ($_ _.composite
          (_.checkcast returnT)
          _.areturn)
      
      (#.Right returnT)
      (cond (or (\ type.equivalence = type.boolean returnT)
                (\ type.equivalence = type.byte returnT)
                (\ type.equivalence = type.short returnT)
                (\ type.equivalence = type.int returnT)
                (\ type.equivalence = type.char returnT))
            _.ireturn

            (\ type.equivalence = type.long returnT)
            _.lreturn

            (\ type.equivalence = type.float returnT)
            _.freturn

            ... (\ type.equivalence = type.double returnT)
            _.dreturn))))

(def: class::anonymous
  Handler
  (..custom
   [($_ <>.and
        ..class
        (<s>.tuple (<>.some ..class))
        (<s>.tuple (<>.some ..input))
        (<s>.tuple (<>.some ..overriden_method_definition)))
    (function (_ extension_name generate archive [super_class super_interfaces
                                                  inputsTS
                                                  overriden_methods])
      (do [! //////.monad]
        [[context _] (//////generation.with_new_context archive (in []))
         .let [[module_id artifact_id] context
               anonymous_class_name (///runtime.class_name context)
               class (type.class anonymous_class_name (list))
               total_environment (|> overriden_methods
                                     ... Get all the environments.
                                     (list\each product.left)
                                     ... Combine them.
                                     list\conjoint
                                     ... Remove duplicates.
                                     (set.from_list //////synthesis.hash)
                                     set.list)
               global_mapping (|> total_environment
                                  ... Give them names as "foreign" variables.
                                  list.enumeration
                                  (list\each (function (_ [id capture])
                                               [capture (#//////variable.Foreign id)]))
                                  (dictionary.from_list //////variable.hash))
               normalized_methods (list\each (function (_ [environment
                                                           [ownerT name
                                                            strict_fp? annotations vars
                                                            self_name arguments returnT exceptionsT
                                                            body]])
                                               (let [local_mapping (|> environment
                                                                       list.enumeration
                                                                       (list\each (function (_ [foreign_id capture])
                                                                                    [(#//////variable.Foreign foreign_id)
                                                                                     (|> global_mapping
                                                                                         (dictionary.value capture)
                                                                                         maybe.trusted)]))
                                                                       (dictionary.from_list //////variable.hash))]
                                                 [ownerT name
                                                  strict_fp? annotations vars
                                                  self_name arguments returnT exceptionsT
                                                  (normalize_method_body local_mapping body)]))
                                             overriden_methods)]
         inputsTI (monad.each ! (generate_input generate archive) inputsTS)
         method_definitions (monad.each ! (function (_ [ownerT name
                                                        strict_fp? annotations vars
                                                        self_name arguments returnT exceptionsT
                                                        bodyS])
                                            (do !
                                              [bodyG (//////generation.with_context artifact_id
                                                       (generate archive bodyS))]
                                              (in (method.method ($_ modifier\composite
                                                                     method.public
                                                                     method.final
                                                                     (if strict_fp?
                                                                       method.strict
                                                                       modifier\identity))
                                                                 name
                                                                 (type.method [(list\each product.right arguments)
                                                                               returnT
                                                                               exceptionsT])
                                                                 (list)
                                                                 (#.Some ($_ _.composite
                                                                             bodyG
                                                                             (returnG returnT)))))))
                                        normalized_methods)
         bytecode (<| (\ ! each (format.result class.writer))
                      //////.lifted
                      (class.class version.v6_0 ($_ modifier\composite class.public class.final)
                                   (name.internal anonymous_class_name)
                                   (name.internal (..reflection super_class))
                                   (list\each (|>> ..reflection name.internal) super_interfaces)
                                   (foreign.variables total_environment)
                                   (list& (..with_anonymous_init class total_environment super_class inputsTI)
                                          method_definitions)
                                   (row.row)))
         _ (//////generation.execute! [anonymous_class_name bytecode])
         _ (//////generation.save! (%.nat artifact_id) [anonymous_class_name bytecode])]
        (anonymous_instance generate archive class total_environment)))]))

(def: bundle::class
  Bundle
  (<| (/////bundle.prefix "class")
      (|> (: Bundle /////bundle.empty)
          (/////bundle.install "anonymous" class::anonymous)
          )))

(def: .public bundle
  Bundle
  (<| (/////bundle.prefix "jvm")
      (|> ..bundle::conversion
          (dictionary.merged ..bundle::int)
          (dictionary.merged ..bundle::long)
          (dictionary.merged ..bundle::float)
          (dictionary.merged ..bundle::double)
          (dictionary.merged ..bundle::char)
          (dictionary.merged ..bundle::array)
          (dictionary.merged ..bundle::object)
          (dictionary.merged ..bundle::member)
          (dictionary.merged ..bundle::class)
          )))
