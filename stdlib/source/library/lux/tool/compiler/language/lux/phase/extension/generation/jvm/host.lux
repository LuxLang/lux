(.using
 [library
  [lux (.except Type Primitive)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" maybe (.open: "[1]#[0]" functor)]
    ["[0]" exception (.only exception:)]
    ["<>" parser (.only)
     ["<[0]>" synthesis (.only Parser)]]]
   [data
    ["[0]" product]
    [binary
     ["[0]" \\format]]
    ["[0]" text (.open: "[1]#[0]" equivalence)
     ["%" \\format]
     ["<[1]>" \\parser]]
    [collection
     ["[0]" list (.open: "[1]#[0]" monad mix monoid)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" set (.only Set)]
     ["[0]" sequence]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [math
    [number
     ["n" nat]
     ["[0]" i32]]]
   [target
    [jvm
     ["[0]" version]
     ["[0]" modifier (.open: "[1]#[0]" monoid)]
     ["[0]" method (.only Method)]
     ["[0]" class (.only Class)]
     [constant
      [pool (.only Resource)]]
     [encoding
      ["[0]" name]]
     ["_" bytecode (.only Bytecode) (.open: "[1]#[0]" monad)
      ["__" instruction (.only Primitive_Array_Type)]]
     ["[0]" type (.only Type Typed Argument)
      ["[0]" category (.only Void Value' Value Return' Return Primitive Object Array Var Parameter)]
      ["[0]" box]
      ["[0]" reflection]
      ["[0]" signature]
      ["[0]" parser]]]]]]
 ["[0]" //
  [common (.only custom)]
  ["///[1]" ////
   [generation
    [extension (.only Nullary Unary Binary Trinary Variadic
                      nullary unary binary trinary variadic)]
    ["///" jvm (.only)
     ["[1][0]" runtime (.only Operation Bundle Phase Handler)]
     ["[1][0]" reference]
     ["[1][0]" value]
     [function
      [field
       [variable
        ["[0]" foreign]]]]]]
   [extension
    ["[1][0]" bundle]
    [analysis
     ["/" jvm]]]
   ["/[1]" //
    ["[1][0]" synthesis (.only Synthesis Path %synthesis)]
    ["[1][0]" generation]
    [analysis (.only Environment)
     ["[0]" complex]]
    [///
     ["[1]" phase]
     ["[1][0]" reference (.only)
      ["[2][0]" variable (.only Variable Register)]]
     [meta
      ["[0]" archive (.only Archive)
       ["[0]" artifact]
       ["[0]" unit]]
      ["[0]" cache
       [dependency
        ["[1]/[0]" artifact]]]]]]]])

(with_template [<name> <0>]
  [(def: <name>
     (Bytecode Any)
     (all _.composite
          _.l2i
          <0>))]

  [l2s _.i2s]
  [l2b _.i2b]
  [l2c _.i2c]
  )

(with_template [<conversion> <name>]
  [(def: (<name> inputG)
     (Unary (Bytecode Any))
     (if (same? _.nop <conversion>)
       inputG
       (all _.composite
            inputG
            <conversion>)))]
  
  [_.d2f conversion::double_to_float]
  [_.d2i conversion::double_to_int]
  [_.d2l conversion::double_to_long]
  
  [_.f2d conversion::float_to_double]
  [_.f2i conversion::float_to_int]
  [_.f2l conversion::float_to_long]
  
  [_.i2b conversion::int_to_byte]
  [_.i2c conversion::int_to_char]
  [_.i2d conversion::int_to_double]
  [_.i2f conversion::int_to_float]
  [_.i2l conversion::int_to_long]
  [_.i2s conversion::int_to_short]
  
  [_.l2d conversion::long_to_double]
  [_.l2f conversion::long_to_float]
  [_.l2i conversion::long_to_int]
  [..l2s conversion::long_to_short]
  [..l2b conversion::long_to_byte]
  [..l2c conversion::long_to_char]
  
  [_.i2b conversion::char_to_byte]
  [_.i2s conversion::char_to_short]
  [_.nop conversion::char_to_int]
  [_.i2l conversion::char_to_long]
  
  [_.i2l conversion::byte_to_long]
  
  [_.i2l conversion::short_to_long]
  )

(def: bundle::conversion
  Bundle
  (<| (/////bundle.prefix "conversion")
      (|> (is Bundle /////bundle.empty)
          (/////bundle.install "double-to-float" (unary conversion::double_to_float))
          (/////bundle.install "double-to-int" (unary conversion::double_to_int))
          (/////bundle.install "double-to-long" (unary conversion::double_to_long))
          
          (/////bundle.install "float-to-double" (unary conversion::float_to_double))
          (/////bundle.install "float-to-int" (unary conversion::float_to_int))
          (/////bundle.install "float-to-long" (unary conversion::float_to_long))
          
          (/////bundle.install "int-to-byte" (unary conversion::int_to_byte))
          (/////bundle.install "int-to-char" (unary conversion::int_to_char))
          (/////bundle.install "int-to-double" (unary conversion::int_to_double))
          (/////bundle.install "int-to-float" (unary conversion::int_to_float))
          (/////bundle.install "int-to-long" (unary conversion::int_to_long))
          (/////bundle.install "int-to-short" (unary conversion::int_to_short))
          
          (/////bundle.install "long-to-double" (unary conversion::long_to_double))
          (/////bundle.install "long-to-float" (unary conversion::long_to_float))
          (/////bundle.install "long-to-int" (unary conversion::long_to_int))
          (/////bundle.install "long-to-short" (unary conversion::long_to_short))
          (/////bundle.install "long-to-byte" (unary conversion::long_to_byte))
          (/////bundle.install "long-to-char" (unary conversion::long_to_char))
          
          (/////bundle.install "char-to-byte" (unary conversion::char_to_byte))
          (/////bundle.install "char-to-short" (unary conversion::char_to_short))
          (/////bundle.install "char-to-int" (unary conversion::char_to_int))
          (/////bundle.install "char-to-long" (unary conversion::char_to_long))
          
          (/////bundle.install "byte-to-long" (unary conversion::byte_to_long))
          
          (/////bundle.install "short-to-long" (unary conversion::short_to_long))
          )))

(with_template [<name> <op>]
  [(def: (<name> [parameter! subject!])
     (Binary (Bytecode Any))
     (all _.composite
          subject!
          parameter!
          <op>))]

  [int::+ _.iadd]
  [int::- _.isub]
  [int::* _.imul]
  [int::/ _.idiv]
  [int::% _.irem]
  [int::and _.iand]
  [int::or _.ior]
  [int::xor _.ixor]
  [int::shl _.ishl]
  [int::shr _.ishr]
  [int::ushr _.iushr]
  
  [long::+ _.ladd]
  [long::- _.lsub]
  [long::* _.lmul]
  [long::/ _.ldiv]
  [long::% _.lrem]
  [long::and _.land]
  [long::or _.lor]
  [long::xor _.lxor]
  [long::shl _.lshl]
  [long::shr _.lshr]
  [long::ushr _.lushr]

  [float::+ _.fadd]
  [float::- _.fsub]
  [float::* _.fmul]
  [float::/ _.fdiv]
  [float::% _.frem]
  
  [double::+ _.dadd]
  [double::- _.dsub]
  [double::* _.dmul]
  [double::/ _.ddiv]
  [double::% _.drem]
  )

(def: $Boolean (type.class box.boolean (list)))
(def: falseG (_.getstatic ..$Boolean "FALSE" ..$Boolean))
(def: trueG (_.getstatic ..$Boolean "TRUE" ..$Boolean))

(with_template [<name> <op>]
  [(def: (<name> [reference subject])
     (Binary (Bytecode Any))
     (do _.monad
       [@then _.new_label
        @end _.new_label]
       (all _.composite
            subject
            reference
            (<op> @then)
            falseG
            (_.goto @end)
            (_.set_label @then)
            trueG
            (_.set_label @end))))]

  [int::= _.if_icmpeq]
  [int::< _.if_icmplt]

  [char::= _.if_icmpeq]
  [char::< _.if_icmplt]
  )

(with_template [<name> <op> <reference>]
  [(def: (<name> [reference subject])
     (Binary (Bytecode Any))
     (do _.monad
       [@then _.new_label
        @end _.new_label]
       (all _.composite
            subject
            reference
            <op>
            (_.int (i32.i32 (.i64 <reference>)))
            (_.if_icmpeq @then)
            falseG
            (_.goto @end)
            (_.set_label @then)
            trueG
            (_.set_label @end))))]

  [long::= _.lcmp +0]
  [long::< _.lcmp -1]
  
  [float::= _.fcmpg +0]
  [float::< _.fcmpg -1]

  [double::= _.dcmpg +0]
  [double::< _.dcmpg -1]
  )

(def: bundle::int
  Bundle
  (<| (/////bundle.prefix (reflection.reflection reflection.int))
      (|> (is Bundle /////bundle.empty)
          (/////bundle.install "+" (binary int::+))
          (/////bundle.install "-" (binary int::-))
          (/////bundle.install "*" (binary int::*))
          (/////bundle.install "/" (binary int::/))
          (/////bundle.install "%" (binary int::%))
          (/////bundle.install "=" (binary int::=))
          (/////bundle.install "<" (binary int::<))
          (/////bundle.install "and" (binary int::and))
          (/////bundle.install "or" (binary int::or))
          (/////bundle.install "xor" (binary int::xor))
          (/////bundle.install "shl" (binary int::shl))
          (/////bundle.install "shr" (binary int::shr))
          (/////bundle.install "ushr" (binary int::ushr))
          )))

(def: bundle::long
  Bundle
  (<| (/////bundle.prefix (reflection.reflection reflection.long))
      (|> (is Bundle /////bundle.empty)
          (/////bundle.install "+" (binary long::+))
          (/////bundle.install "-" (binary long::-))
          (/////bundle.install "*" (binary long::*))
          (/////bundle.install "/" (binary long::/))
          (/////bundle.install "%" (binary long::%))
          (/////bundle.install "=" (binary long::=))
          (/////bundle.install "<" (binary long::<))
          (/////bundle.install "and" (binary long::and))
          (/////bundle.install "or" (binary long::or))
          (/////bundle.install "xor" (binary long::xor))
          (/////bundle.install "shl" (binary long::shl))
          (/////bundle.install "shr" (binary long::shr))
          (/////bundle.install "ushr" (binary long::ushr))
          )))

(def: bundle::float
  Bundle
  (<| (/////bundle.prefix (reflection.reflection reflection.float))
      (|> (is Bundle /////bundle.empty)
          (/////bundle.install "+" (binary float::+))
          (/////bundle.install "-" (binary float::-))
          (/////bundle.install "*" (binary float::*))
          (/////bundle.install "/" (binary float::/))
          (/////bundle.install "%" (binary float::%))
          (/////bundle.install "=" (binary float::=))
          (/////bundle.install "<" (binary float::<))
          )))

(def: bundle::double
  Bundle
  (<| (/////bundle.prefix (reflection.reflection reflection.double))
      (|> (is Bundle /////bundle.empty)
          (/////bundle.install "+" (binary double::+))
          (/////bundle.install "-" (binary double::-))
          (/////bundle.install "*" (binary double::*))
          (/////bundle.install "/" (binary double::/))
          (/////bundle.install "%" (binary double::%))
          (/////bundle.install "=" (binary double::=))
          (/////bundle.install "<" (binary double::<))
          )))

(def: bundle::char
  Bundle
  (<| (/////bundle.prefix (reflection.reflection reflection.char))
      (|> (is Bundle /////bundle.empty)
          (/////bundle.install "=" (binary char::=))
          (/////bundle.install "<" (binary char::<))
          )))

(with_template [<name> <category> <parser>]
  [(def: .public <name>
     (Parser (Type <category>))
     (<text>.then <parser> <synthesis>.text))]

  [var Var parser.var]
  [class category.Class parser.class]
  [object Object parser.object]
  [value Value parser.value]
  [return Return parser.return]
  )

(def: reflection
  (All (_ category)
    (-> (Type (<| Return' Value' category)) Text))
  (|>> type.reflection reflection.reflection))

(def: signature
  (All (_ category)
    (-> (Type category) Text))
  (|>> type.signature signature.signature))

(exception: .public (not_an_object_array [arrayJT (Type Array)])
  (exception.report
   "JVM Type" (..signature arrayJT)))

(def: .public object_array
  (Parser (Type Object))
  (do <>.monad
    [arrayJT (<text>.then parser.array <synthesis>.text)]
    (case (parser.array? arrayJT)
      {.#Some elementJT}
      (case (parser.object? elementJT)
        {.#Some elementJT}
        (in elementJT)

        {.#None}
        (<>.failure (exception.error ..not_an_object_array [arrayJT])))
      
      {.#None}
      (undefined))))

(def: (primitive_array_length_handler jvm_primitive)
  (-> (Type Primitive) Handler)
  (..custom
   [<synthesis>.any
    (function (_ extension_name generate archive arrayS)
      (do //////.monad
        [arrayG (generate archive arrayS)]
        (in (all _.composite
                 arrayG
                 (_.checkcast (type.array jvm_primitive))
                 _.arraylength))))]))

(def: array::length::object
  Handler
  (..custom
   [(all <>.and ..object_array <synthesis>.any)
    (function (_ extension_name generate archive [elementJT arrayS])
      (do //////.monad
        [arrayG (generate archive arrayS)]
        (in (all _.composite
                 arrayG
                 (_.checkcast (type.array elementJT))
                 _.arraylength))))]))

(def: (new_primitive_array_handler jvm_primitive)
  (-> Primitive_Array_Type Handler)
  (..custom
   [<synthesis>.any
    (function (_ extension_name generate archive [lengthS])
      (do //////.monad
        [lengthG (generate archive lengthS)]
        (in (all _.composite
                 lengthG
                 (_.newarray jvm_primitive)))))]))

(def: array::new::object
  Handler
  (..custom
   [(all <>.and ..object <synthesis>.any)
    (function (_ extension_name generate archive [objectJT lengthS])
      (do //////.monad
        [lengthG (generate archive lengthS)]
        (in (all _.composite
                 lengthG
                 (_.anewarray objectJT)))))]))

(def: (read_primitive_array_handler jvm_primitive loadG)
  (-> (Type Primitive) (Bytecode Any) Handler)
  (..custom
   [(all <>.and <synthesis>.any <synthesis>.any)
    (function (_ extension_name generate archive [idxS arrayS])
      (do //////.monad
        [arrayG (generate archive arrayS)
         idxG (generate archive idxS)]
        (in (all _.composite
                 arrayG
                 (_.checkcast (type.array jvm_primitive))
                 idxG
                 loadG))))]))

(def: array::read::object
  Handler
  (..custom
   [(all <>.and ..object_array <synthesis>.any <synthesis>.any)
    (function (_ extension_name generate archive [elementJT idxS arrayS])
      (do //////.monad
        [arrayG (generate archive arrayS)
         idxG (generate archive idxS)]
        (in (all _.composite
                 arrayG
                 (_.checkcast (type.array elementJT))
                 idxG
                 _.aaload))))]))

(def: (write_primitive_array_handler jvm_primitive storeG)
  (-> (Type Primitive) (Bytecode Any) Handler)
  (..custom
   [(all <>.and <synthesis>.any <synthesis>.any <synthesis>.any)
    (function (_ extension_name generate archive [idxS valueS arrayS])
      (do //////.monad
        [arrayG (generate archive arrayS)
         idxG (generate archive idxS)
         valueG (generate archive valueS)]
        (in (all _.composite
                 arrayG
                 (_.checkcast (type.array jvm_primitive))
                 _.dup
                 idxG
                 valueG
                 storeG))))]))

(def: array::write::object
  Handler
  (..custom
   [(all <>.and ..object_array <synthesis>.any <synthesis>.any <synthesis>.any)
    (function (_ extension_name generate archive [elementJT idxS valueS arrayS])
      (do //////.monad
        [arrayG (generate archive arrayS)
         idxG (generate archive idxS)
         valueG (generate archive valueS)]
        (in (all _.composite
                 arrayG
                 (_.checkcast (type.array elementJT))
                 _.dup
                 idxG
                 valueG
                 _.aastore))))]))

(def: bundle::array
  Bundle
  (<| (/////bundle.prefix "array")
      (|> /////bundle.empty
          (dictionary.composite (<| (/////bundle.prefix "length")
                                    (|> /////bundle.empty
                                        (/////bundle.install (reflection.reflection reflection.boolean) (primitive_array_length_handler type.boolean))
                                        (/////bundle.install (reflection.reflection reflection.byte) (primitive_array_length_handler type.byte))
                                        (/////bundle.install (reflection.reflection reflection.short) (primitive_array_length_handler type.short))
                                        (/////bundle.install (reflection.reflection reflection.int) (primitive_array_length_handler type.int))
                                        (/////bundle.install (reflection.reflection reflection.long) (primitive_array_length_handler type.long))
                                        (/////bundle.install (reflection.reflection reflection.float) (primitive_array_length_handler type.float))
                                        (/////bundle.install (reflection.reflection reflection.double) (primitive_array_length_handler type.double))
                                        (/////bundle.install (reflection.reflection reflection.char) (primitive_array_length_handler type.char))
                                        (/////bundle.install "object" array::length::object))))
          (dictionary.composite (<| (/////bundle.prefix "new")
                                    (|> /////bundle.empty
                                        (/////bundle.install (reflection.reflection reflection.boolean) (new_primitive_array_handler __.t_boolean))
                                        (/////bundle.install (reflection.reflection reflection.byte) (new_primitive_array_handler __.t_byte))
                                        (/////bundle.install (reflection.reflection reflection.short) (new_primitive_array_handler __.t_short))
                                        (/////bundle.install (reflection.reflection reflection.int) (new_primitive_array_handler __.t_int))
                                        (/////bundle.install (reflection.reflection reflection.long) (new_primitive_array_handler __.t_long))
                                        (/////bundle.install (reflection.reflection reflection.float) (new_primitive_array_handler __.t_float))
                                        (/////bundle.install (reflection.reflection reflection.double) (new_primitive_array_handler __.t_double))
                                        (/////bundle.install (reflection.reflection reflection.char) (new_primitive_array_handler __.t_char))
                                        (/////bundle.install "object" array::new::object))))
          (dictionary.composite (<| (/////bundle.prefix "read")
                                    (|> /////bundle.empty
                                        (/////bundle.install (reflection.reflection reflection.boolean) (read_primitive_array_handler type.boolean _.baload))
                                        (/////bundle.install (reflection.reflection reflection.byte) (read_primitive_array_handler type.byte _.baload))
                                        (/////bundle.install (reflection.reflection reflection.short) (read_primitive_array_handler type.short _.saload))
                                        (/////bundle.install (reflection.reflection reflection.int) (read_primitive_array_handler type.int _.iaload))
                                        (/////bundle.install (reflection.reflection reflection.long) (read_primitive_array_handler type.long _.laload))
                                        (/////bundle.install (reflection.reflection reflection.float) (read_primitive_array_handler type.float _.faload))
                                        (/////bundle.install (reflection.reflection reflection.double) (read_primitive_array_handler type.double _.daload))
                                        (/////bundle.install (reflection.reflection reflection.char) (read_primitive_array_handler type.char _.caload))
                                        (/////bundle.install "object" array::read::object))))
          (dictionary.composite (<| (/////bundle.prefix "write")
                                    (|> /////bundle.empty
                                        (/////bundle.install (reflection.reflection reflection.boolean) (write_primitive_array_handler type.boolean _.bastore))
                                        (/////bundle.install (reflection.reflection reflection.byte) (write_primitive_array_handler type.byte _.bastore))
                                        (/////bundle.install (reflection.reflection reflection.short) (write_primitive_array_handler type.short _.sastore))
                                        (/////bundle.install (reflection.reflection reflection.int) (write_primitive_array_handler type.int _.iastore))
                                        (/////bundle.install (reflection.reflection reflection.long) (write_primitive_array_handler type.long _.lastore))
                                        (/////bundle.install (reflection.reflection reflection.float) (write_primitive_array_handler type.float _.fastore))
                                        (/////bundle.install (reflection.reflection reflection.double) (write_primitive_array_handler type.double _.dastore))
                                        (/////bundle.install (reflection.reflection reflection.char) (write_primitive_array_handler type.char _.castore))
                                        (/////bundle.install "object" array::write::object))))
          )))

(def: (object::null _)
  (Nullary (Bytecode Any))
  _.aconst_null)

(def: (object::null? objectG)
  (Unary (Bytecode Any))
  (do _.monad
    [@then _.new_label
     @end _.new_label]
    (all _.composite
         objectG
         (_.ifnull @then)
         ..falseG
         (_.goto @end)
         (_.set_label @then)
         ..trueG
         (_.set_label @end))))

(def: (object::synchronized [monitorG exprG])
  (Binary (Bytecode Any))
  (all _.composite
       monitorG
       _.dup
       _.monitorenter
       exprG
       _.swap
       _.monitorexit))

(def: (object::throw exceptionG)
  (Unary (Bytecode Any))
  (all _.composite
       exceptionG
       _.athrow))

(def: $Class (type.class "java.lang.Class" (list)))
(def: $String (type.class "java.lang.String" (list)))

(def: object::class
  Handler
  (..custom
   [<synthesis>.text
    (function (_ extension_name generate archive [class])
      (do //////.monad
        []
        (in (all _.composite
                 (_.string class)
                 (_.invokestatic ..$Class "forName" (type.method [(list) (list ..$String) ..$Class (list)]))))))]))

(def: object::instance?
  Handler
  (..custom
   [(all <>.and <synthesis>.text <synthesis>.any)
    (function (_ extension_name generate archive [class objectS])
      (do //////.monad
        [objectG (generate archive objectS)]
        (in (all _.composite
                 objectG
                 (_.instanceof (type.class class (list)))
                 (///value.wrap type.boolean)))))]))

(def: object::cast
  Handler
  (..custom
   [(all <>.and <synthesis>.text <synthesis>.text <synthesis>.any)
    (function (_ extension_name generate archive [from to valueS])
      (do //////.monad
        [valueG (generate archive valueS)]
        (in (`` (cond (~~ (with_template [<object> <type>]
                            [(and (text#= (..reflection <type>) from)
                                  (text#= <object> to))
                             (all _.composite
                                  valueG
                                  (///value.wrap <type>))

                             (and (text#= <object> from)
                                  (text#= (..reflection <type>) to))
                             (all _.composite
                                  valueG
                                  (///value.unwrap <type>))]
                            
                            [box.boolean type.boolean]
                            [box.byte    type.byte]
                            [box.short   type.short]
                            [box.int     type.int]
                            [box.long    type.long]
                            [box.char    type.char]
                            [box.float   type.float]
                            [box.double  type.double]))
                      ... else
                      valueG)))))]))

(def: bundle::object
  Bundle
  (<| (/////bundle.prefix "object")
      (|> (is Bundle /////bundle.empty)
          (/////bundle.install "null" (nullary object::null))
          (/////bundle.install "null?" (unary object::null?))
          (/////bundle.install "synchronized" (binary object::synchronized))
          (/////bundle.install "throw" (unary object::throw))
          (/////bundle.install "class" object::class)
          (/////bundle.install "instance?" object::instance?)
          (/////bundle.install "cast" object::cast)
          )))

(def: get::static
  Handler
  (..custom
   [(all <>.and <synthesis>.text <synthesis>.text ..value)
    (function (_ extension_name generate archive [class field :unboxed:])
      (at //////.monad in (_.getstatic (type.class class (list)) field :unboxed:)))]))

(def: unitG
  (_.string //////synthesis.unit))

(def: put::static
  Handler
  (..custom
   [(all <>.and <synthesis>.text <synthesis>.text ..value <synthesis>.any)
    (function (_ extension_name generate archive [class field :unboxed: valueS])
      (do //////.monad
        [valueG (generate archive valueS)]
        (in (all _.composite
                 valueG
                 (case (parser.object? :unboxed:)
                   {.#Some :unboxed:}
                   (_.checkcast :unboxed:)
                   
                   {.#None}
                   (_#in []))
                 (_.putstatic (type.class class (list)) field :unboxed:)
                 ..unitG))))]))

(def: get::virtual
  Handler
  (..custom
   [(all <>.and <synthesis>.text <synthesis>.text ..value <synthesis>.any)
    (function (_ extension_name generate archive [class field :unboxed: objectS])
      (do //////.monad
        [objectG (generate archive objectS)
         .let [:class: (type.class class (list))
               getG (_.getfield :class: field :unboxed:)]]
        (in (all _.composite
                 objectG
                 (_.checkcast :class:)
                 getG))))]))

(def: put::virtual
  Handler
  (..custom
   [(all <>.and <synthesis>.text <synthesis>.text ..value <synthesis>.any <synthesis>.any)
    (function (_ extension_name generate archive [class field :unboxed: valueS objectS])
      (do //////.monad
        [valueG (generate archive valueS)
         objectG (generate archive objectS)
         .let [:class: (type.class class (list))
               putG (case (parser.object? :unboxed:)
                      {.#Some :unboxed:}
                      (all _.composite
                           (_.checkcast :unboxed:)
                           (_.putfield :class: field :unboxed:))
                      
                      {.#None}
                      (_.putfield :class: field :unboxed:))]]
        (in (all _.composite
                 objectG
                 (_.checkcast :class:)
                 _.dup
                 valueG
                 putG))))]))

(type: Input
  (Typed Synthesis))

(def: input
  (Parser Input)
  (<synthesis>.tuple (<>.and ..value <synthesis>.any)))

(def: (generate_input generate archive [valueT valueS])
  (-> Phase Archive Input (Operation (Typed (Bytecode Any))))
  (do //////.monad
    [valueG (generate archive valueS)]
    (case (type.primitive? valueT)
      {.#Right valueT}
      (in [valueT valueG])
      
      {.#Left valueT}
      (in [valueT (all _.composite
                       valueG
                       (_.checkcast valueT))]))))

(def: (prepare_output outputT)
  (-> (Type Return) (Bytecode Any))
  (case (type.void? outputT)
    {.#Right outputT}
    ..unitG
    
    {.#Left outputT}
    (_#in [])))

(def: invoke::static
  Handler
  (..custom
   [(all <>.and ..class <synthesis>.text ..return (<>.some ..input))
    (function (_ extension_name generate archive [class method outputT inputsTS])
      (do [! //////.monad]
        [inputsTG (monad.each ! (generate_input generate archive) inputsTS)]
        (in (all _.composite
                 (monad.each _.monad product.right inputsTG)
                 (_.invokestatic class method (type.method [(list) (list#each product.left inputsTG) outputT (list)]))
                 (prepare_output outputT)))))]))

(with_template [<check_cast?> <name> <invoke>]
  [(def: <name>
     Handler
     (..custom
      [(all <>.and ..class <synthesis>.text ..return <synthesis>.any (<>.some ..input))
       (function (_ extension_name generate archive [class method outputT objectS inputsTS])
         (do [! //////.monad]
           [objectG (generate archive objectS)
            inputsTG (monad.each ! (generate_input generate archive) inputsTS)]
           (in (all _.composite
                    objectG
                    (if <check_cast?>
                      (_.checkcast class)
                      (_#in []))
                    (monad.each _.monad product.right inputsTG)
                    (<invoke> class method (type.method [(list) (list#each product.left inputsTG) outputT (list)]))
                    (prepare_output outputT)))))]))]

  [#1 invoke::virtual _.invokevirtual]
  [#0 invoke::special _.invokespecial]
  [#1 invoke::interface _.invokeinterface]
  )

(def: invoke::constructor
  Handler
  (..custom
   [(all <>.and ..class (<>.some ..input))
    (function (_ extension_name generate archive [class inputsTS])
      (do [! //////.monad]
        [inputsTG (monad.each ! (generate_input generate archive) inputsTS)]
        (in (all _.composite
                 (_.new class)
                 _.dup
                 (monad.each _.monad product.right inputsTG)
                 (_.invokespecial class "<init>" (type.method [(list) (list#each product.left inputsTG) type.void (list)]))))))]))

(def: bundle::member
  Bundle
  (<| (/////bundle.prefix "member")
      (|> (is Bundle /////bundle.empty)
          (dictionary.composite (<| (/////bundle.prefix "get")
                                    (|> (is Bundle /////bundle.empty)
                                        (/////bundle.install "static" get::static)
                                        (/////bundle.install "virtual" get::virtual))))
          (dictionary.composite (<| (/////bundle.prefix "put")
                                    (|> (is Bundle /////bundle.empty)
                                        (/////bundle.install "static" put::static)
                                        (/////bundle.install "virtual" put::virtual))))
          (dictionary.composite (<| (/////bundle.prefix "invoke")
                                    (|> (is Bundle /////bundle.empty)
                                        (/////bundle.install "static" invoke::static)
                                        (/////bundle.install "virtual" invoke::virtual)
                                        (/////bundle.install "special" invoke::special)
                                        (/////bundle.install "interface" invoke::interface)
                                        (/////bundle.install "constructor" invoke::constructor))))
          )))

(def: annotation_parameter
  (Parser (/.Annotation_Parameter Synthesis))
  (<synthesis>.tuple (<>.and <synthesis>.text <synthesis>.any)))

(def: annotation
  (Parser (/.Annotation Synthesis))
  (<synthesis>.tuple (<>.and <synthesis>.text (<>.some ..annotation_parameter))))

(def: argument
  (Parser Argument)
  (<synthesis>.tuple (<>.and <synthesis>.text ..value)))

(def: .public (hidden_method_body arity body)
  (-> Nat Synthesis Synthesis)
  (with_expansions [<oops> (panic! (%.format (%.nat arity) " " (//////synthesis.%synthesis body)))]
    (case [arity body]
      (^.or [0 _]
            [1 _])
      body
      
      (pattern [2 {//////synthesis.#Control {//////synthesis.#Branch {//////synthesis.#Let _ 2 (//////synthesis.tuple (list _ hidden))}}}])
      hidden
      
      [_ {//////synthesis.#Control {//////synthesis.#Branch {//////synthesis.#Case _ path}}}]
      (loop (again [path (is Path path)])
        (case path
          {//////synthesis.#Seq _ next}
          (again next)
          
          (pattern {//////synthesis.#Then (//////synthesis.tuple (list _ hidden))})
          hidden
          
          _
          <oops>))

      _
      <oops>)))

(def: (without_fake_parameter#path without_fake_parameter)
  (-> (-> Synthesis Synthesis)
      (-> Path Path))
  (function (again it)
    (case it
      (^.or {//////synthesis.#Pop}
            {//////synthesis.#Access _})
      it
      
      {//////synthesis.#Bind it}
      {//////synthesis.#Bind (-- it)}
      
      {//////synthesis.#Bit_Fork when then else}
      {//////synthesis.#Bit_Fork when
                                 (again then)
                                 (maybe#each again else)}

      (^.with_template [<tag>]
        [{<tag> [head tail]}
         {<tag> [(revised //////synthesis.#then again head)
                 (list#each (revised //////synthesis.#then again) tail)]}])
      ([//////synthesis.#I64_Fork]
       [//////synthesis.#F64_Fork]
       [//////synthesis.#Text_Fork])
      
      (^.with_template [<tag>]
        [{<tag> left right}
         {<tag> (again left) (again right)}])
      ([//////synthesis.#Seq]
       [//////synthesis.#Alt])
      
      {//////synthesis.#Then it}
      {//////synthesis.#Then (without_fake_parameter it)})))

(def: .public (without_fake_parameter it)
  (-> Synthesis Synthesis)
  (case it
    {//////synthesis.#Simple _}
    it
    
    {//////synthesis.#Structure it}
    {//////synthesis.#Structure
     (case it
       {complex.#Variant it}
       {complex.#Variant (revised complex.#value without_fake_parameter it)}

       {complex.#Tuple it}
       {complex.#Tuple (list#each without_fake_parameter it)})}
    
    {//////synthesis.#Reference it}
    {//////synthesis.#Reference
     (case it
       {//////reference.#Variable it}
       {//////reference.#Variable
        (case it
          {//////variable.#Local it}
          {//////variable.#Local (-- it)}
          
          {//////variable.#Foreign _}
          it)}
       
       {//////reference.#Constant _}
       it)}
    
    {//////synthesis.#Control it}
    {//////synthesis.#Control
     (case it
       {//////synthesis.#Branch it}
       {//////synthesis.#Branch
        (case it
          {//////synthesis.#Exec before after}
          {//////synthesis.#Exec (without_fake_parameter before)
                                 (without_fake_parameter after)}
          
          {//////synthesis.#Let value register body}
          {//////synthesis.#Let (without_fake_parameter value)
                                (-- register)
                                (without_fake_parameter body)}
          
          {//////synthesis.#If when then else}
          {//////synthesis.#If (without_fake_parameter when)
                               (without_fake_parameter then)
                               (without_fake_parameter else)}
          
          {//////synthesis.#Get members record}
          {//////synthesis.#Get members
                                (without_fake_parameter record)}
          
          {//////synthesis.#Case value path}
          {//////synthesis.#Case (without_fake_parameter value)
                                 (without_fake_parameter#path without_fake_parameter path)})}
       
       {//////synthesis.#Loop it}
       {//////synthesis.#Loop
        (case it
          {//////synthesis.#Scope [//////synthesis.#start start
                                   //////synthesis.#inits inits
                                   //////synthesis.#iteration iteration]}
          {//////synthesis.#Scope [//////synthesis.#start (-- start)
                                   //////synthesis.#inits (list#each without_fake_parameter inits)
                                   //////synthesis.#iteration iteration]}
          
          {//////synthesis.#Again _}
          it)}
       
       {//////synthesis.#Function it}
       {//////synthesis.#Function
        (case it
          {//////synthesis.#Abstraction [//////synthesis.#environment environment
                                         //////synthesis.#arity arity
                                         //////synthesis.#body body]}
          {//////synthesis.#Abstraction [//////synthesis.#environment (list#each without_fake_parameter environment)
                                         //////synthesis.#arity arity
                                         //////synthesis.#body body]}
          
          {//////synthesis.#Apply [//////synthesis.#function function
                                   //////synthesis.#arguments arguments]}
          {//////synthesis.#Apply [//////synthesis.#function (without_fake_parameter function)
                                   //////synthesis.#arguments (list#each without_fake_parameter arguments)]})})}

    {//////synthesis.#Extension name parameters}
    {//////synthesis.#Extension name (list#each without_fake_parameter parameters)}))

(def: overriden_method_definition
  (Parser [(Environment Synthesis) (/.Overriden_Method Synthesis)])
  (<synthesis>.tuple (do <>.monad
                       [_ (<synthesis>.this_text /.overriden_tag)
                        ownerT ..class
                        name <synthesis>.text
                        strict_fp? <synthesis>.bit
                        annotations (<synthesis>.tuple (<>.some ..annotation))
                        vars (<synthesis>.tuple (<>.some ..var))
                        self_name <synthesis>.text
                        arguments (<synthesis>.tuple (<>.some ..argument))
                        returnT ..return
                        exceptionsT (<synthesis>.tuple (<>.some ..class))
                        [environment _ _ body] (<| (<synthesis>.function 1)
                                                   (<synthesis>.loop (<>.exactly 0 <synthesis>.any))
                                                   <synthesis>.tuple
                                                   (<>.after <synthesis>.any)
                                                   <synthesis>.any)
                        .let [arity (list.size arguments)]]
                       (in [environment
                            [ownerT name
                             strict_fp? annotations vars
                             self_name arguments returnT exceptionsT
                             (<| (..hidden_method_body arity)
                                 (case arity
                                   0 (without_fake_parameter body)
                                   _ body))]]))))

(def: (normalize_path normalize)
  (-> (-> Synthesis Synthesis)
      (-> Path Path))
  (function (again path)
    (case path
      (pattern (//////synthesis.path/then bodyS))
      (//////synthesis.path/then (normalize bodyS))

      (^.with_template [<tag>]
        [(pattern {<tag> leftP rightP})
         {<tag> (again leftP) (again rightP)}])
      ([//////synthesis.#Alt]
       [//////synthesis.#Seq])

      (^.with_template [<tag>]
        [{<tag> _}
         path])
      ([//////synthesis.#Pop]
       [//////synthesis.#Bind]
       [//////synthesis.#Access])

      {//////synthesis.#Bit_Fork when then else}
      {//////synthesis.#Bit_Fork when (again then) (maybe#each again else)}

      (^.with_template [<tag>]
        [{<tag> [[exampleH nextH] tail]}
         {<tag> [[exampleH (again nextH)]
                 (list#each (function (_ [example next])
                              [example (again next)])
                            tail)]}])
      ([//////synthesis.#I64_Fork]
       [//////synthesis.#F64_Fork]
       [//////synthesis.#Text_Fork]))))

(type: Mapping
  (Dictionary Synthesis Variable))

(def: (normalize_method_body mapping)
  (-> Mapping Synthesis Synthesis)
  (function (again body)
    (case body
      (^.with_template [<tag>]
        [(pattern <tag>)
         body])
      ([{//////synthesis.#Simple _}]
       [(//////synthesis.constant _)])

      (pattern (//////synthesis.variant [lefts right? sub]))
      (//////synthesis.variant [lefts right? (again sub)])

      (pattern (//////synthesis.tuple members))
      (//////synthesis.tuple (list#each again members))

      (pattern (//////synthesis.variable var))
      (|> mapping
          (dictionary.value body)
          (maybe.else var)
          //////synthesis.variable)

      (pattern (//////synthesis.branch/case [inputS pathS]))
      (//////synthesis.branch/case [(again inputS) (normalize_path again pathS)])

      (pattern (//////synthesis.branch/exec [this that]))
      (//////synthesis.branch/exec [(again this) (again that)])

      (pattern (//////synthesis.branch/let [inputS register outputS]))
      (//////synthesis.branch/let [(again inputS) register (again outputS)])

      (pattern (//////synthesis.branch/if [testS thenS elseS]))
      (//////synthesis.branch/if [(again testS) (again thenS) (again elseS)])

      (pattern (//////synthesis.branch/get [path recordS]))
      (//////synthesis.branch/get [path (again recordS)])

      (pattern (//////synthesis.loop/scope [offset initsS+ bodyS]))
      (//////synthesis.loop/scope [offset (list#each again initsS+) (again bodyS)])

      (pattern (//////synthesis.loop/again updatesS+))
      (//////synthesis.loop/again (list#each again updatesS+))

      (pattern (//////synthesis.function/abstraction [environment arity bodyS]))
      (//////synthesis.function/abstraction [(list#each (function (_ captured)
                                                          (case captured
                                                            (pattern (//////synthesis.variable var))
                                                            (|> mapping
                                                                (dictionary.value captured)
                                                                (maybe.else var)
                                                                //////synthesis.variable)

                                                            _
                                                            captured))
                                                        environment)
                                             arity
                                             bodyS])

      (pattern (//////synthesis.function/apply [functionS inputsS+]))
      (//////synthesis.function/apply [(again functionS) (list#each again inputsS+)])

      {//////synthesis.#Extension [name inputsS+]}
      {//////synthesis.#Extension [name (list#each again inputsS+)]})))

(def: $Object
  (type.class "java.lang.Object" (list)))

(def: (anonymous_init_method env inputsTI)
  (-> (Environment Synthesis) (List (Typed (Bytecode Any))) (Type category.Method))
  (type.method [(list)
                (list.repeated (n.+ (list.size inputsTI) (list.size env)) ..$Object)
                type.void
                (list)]))

(def: (with_anonymous_init class env super_class inputsTG)
  (-> (Type category.Class) (Environment Synthesis) (Type category.Class) (List (Typed (Bytecode Any))) (Resource Method))
  (let [inputs_offset (list.size inputsTG)
        inputs! (|> inputsTG
                    list.enumeration
                    (list#each (function (_ [register [type term]])
                                 (let [then! (case (type.primitive? type)
                                               {.#Right type}
                                               (///value.unwrap type)
                                               
                                               {.#Left type}
                                               (_.checkcast type))]
                                   (all _.composite
                                        (_.aload (++ register))
                                        then!))))
                    list.reversed
                    (list#mix _.composite (_#in [])))
        store_captured! (|> env
                            list.size
                            list.indices
                            (monad.each _.monad (.function (_ register)
                                                  (all _.composite
                                                       (_.aload 0)
                                                       (_.aload (n.+ inputs_offset (++ register)))
                                                       (_.putfield class (///reference.foreign_name register) $Object)))))]
    (method.method method.public "<init>"
                   #1 (anonymous_init_method env inputsTG)
                   (list)
                   {.#Some (all _.composite
                                (_.aload 0)
                                inputs!
                                (_.invokespecial super_class "<init>" (type.method [(list) (list#each product.left inputsTG) type.void (list)]))
                                store_captured!
                                _.return)})))

(def: (anonymous_instance generate archive class env inputsTI)
  (-> Phase Archive (Type category.Class) (Environment Synthesis) (List (Typed (Bytecode Any))) (Operation (Bytecode Any)))
  (do [! //////.monad]
    [captureG+ (monad.each ! (generate archive) env)]
    (in (all _.composite
             (_.new class)
             _.dup
             (|> inputsTI
                 (list#each product.right)
                 list.reversed
                 (list#mix _.composite (_#in [])))
             (monad.all _.monad captureG+)
             (_.invokespecial class "<init>" (anonymous_init_method env inputsTI))))))

(def: (returnG returnT)
  (-> (Type Return) (Bytecode Any))
  (case (type.void? returnT)
    {.#Right returnT}
    _.return

    {.#Left returnT}
    (case (type.primitive? returnT)
      {.#Left returnT}
      (case (type.class? returnT)
        {.#Some class_name}
        (all _.composite
             (_.checkcast returnT)
             _.areturn)

        {.#None}
        _.areturn)
      
      {.#Right returnT}
      (template.let [(unwrap_primitive <return> <type>)
                     [(all _.composite
                           (///value.unwrap <type>)
                           <return>)]]
        (`` (cond (~~ (with_template [<return> <type>]
                        [(at type.equivalence = <type> returnT)
                         (unwrap_primitive <return> <type>)]

                        [_.ireturn type.boolean]
                        [_.ireturn type.byte]
                        [_.ireturn type.short]
                        [_.ireturn type.int]
                        [_.ireturn type.char]
                        [_.freturn type.float]
                        [_.lreturn type.long]))

                  ... (at type.equivalence = type.double returnT)
                  (unwrap_primitive _.dreturn type.double)))))))

(def: (method_dependencies archive method)
  (-> Archive (/.Overriden_Method Synthesis) (Operation (Set unit.ID)))
  (let [[_super _name _strict_fp? _annotations
         _t_vars _this _arguments _return _exceptions
         bodyS] method]
    (cache/artifact.dependencies archive bodyS)))

(def: (anonymous_dependencies archive inputsTS overriden_methods)
  (-> Archive (List Input) (List [(Environment Synthesis) (/.Overriden_Method Synthesis)])
      (Operation (Set unit.ID)))
  (do [! //////.monad]
    [all_input_dependencies (monad.each ! (|>> product.right (cache/artifact.dependencies archive)) inputsTS)
     all_closure_dependencies (|> overriden_methods
                                  (list#each product.left)
                                  list.together
                                  (monad.each ! (cache/artifact.dependencies archive)))
     all_method_dependencies (monad.each ! (|>> product.right (method_dependencies archive)) overriden_methods)]
    (in (cache/artifact.all (all list#composite
                                 all_input_dependencies
                                 all_closure_dependencies
                                 all_method_dependencies)))))

(def: (prepare_argument lux_register argumentT jvm_register)
  (-> Register (Type Value) Register [Register (Bytecode Any)])
  (case (type.primitive? argumentT)
    {.#Left argumentT}
    [(n.+ 1 jvm_register)
     (if (n.= lux_register jvm_register)
       (_#in [])
       (all _.composite
            (_.aload jvm_register)
            (_.astore lux_register)))]
    
    {.#Right argumentT}
    (template.let [(wrap_primitive <shift> <load> <type>)
                   [[(n.+ <shift> jvm_register)
                     (all _.composite
                          (<load> jvm_register)
                          (///value.wrap <type>)
                          (_.astore lux_register))]]]
      (`` (cond (~~ (with_template [<shift> <load> <type>]
                      [(at type.equivalence = <type> argumentT)
                       (wrap_primitive <shift> <load> <type>)]

                      [1 _.iload type.boolean]
                      [1 _.iload type.byte]
                      [1 _.iload type.short]
                      [1 _.iload type.int]
                      [1 _.iload type.char]
                      [1 _.fload type.float]
                      [2 _.lload type.long]))

                ... (at type.equivalence = type.double argumentT)
                (wrap_primitive 2 _.dload type.double))))))

(def: .public (prepare_arguments offset types)
  (-> Nat (List (Type Value)) (Bytecode Any))
  (|> types
      list.enumeration
      (list#mix (function (_ [lux_register type] [jvm_register before])
                  (let [[jvm_register' after] (prepare_argument (n.+ offset lux_register) type jvm_register)]
                    [jvm_register'
                     (all _.composite
                          before
                          after)]))
                (is [Register (Bytecode Any)]
                    [offset
                     (_#in [])]))
      product.right))

(def: (normalized_method global_mapping [environment method])
  (-> Mapping [(Environment Synthesis) (/.Overriden_Method Synthesis)]
      (/.Overriden_Method Synthesis))
  (let [[ownerT name strict_fp? annotations vars self_name arguments returnT exceptionsT body] method
        local_mapping (|> environment
                          list.enumeration
                          (list#each (function (_ [foreign_id capture])
                                       [(//////synthesis.variable/foreign foreign_id)
                                        (|> global_mapping
                                            (dictionary.value capture)
                                            maybe.trusted)]))
                          (dictionary.of_list //////synthesis.hash))]
    [ownerT name
     strict_fp? annotations vars
     self_name arguments returnT exceptionsT
     (normalize_method_body local_mapping body)]))

(def: (total_environment overriden_methods)
  (-> (List [(Environment Synthesis) (/.Overriden_Method Synthesis)])
      (List Synthesis))
  (|> overriden_methods
      ... Get all the environments.
      (list#each product.left)
      ... Combine them.
      list#conjoint
      ... Remove duplicates.
      (set.of_list //////synthesis.hash)
      set.list))

(def: (global_mapping total_environment)
  (-> (List Synthesis) Mapping)
  (|> total_environment
      ... Give them names as "foreign" variables.
      list.enumeration
      (list#each (function (_ [id capture])
                   [capture {//////variable.#Foreign id}]))
      (dictionary.of_list //////synthesis.hash)))

(def: (method_definition phase archive artifact_id method)
  (-> Phase Archive artifact.ID (/.Overriden_Method Synthesis) (Operation (Resource Method)))
  (let [[ownerT name strict_fp? annotations vars self_name arguments returnT exceptionsT bodyS] method]
    (do //////.monad
      [bodyG (//////generation.with_context artifact_id
               (phase archive bodyS))
       .let [argumentsT (list#each product.right arguments)
             methodT (type.method [vars argumentsT returnT exceptionsT])]]
      (in (method.method (all modifier#composite
                              method.public
                              method.final
                              (if strict_fp?
                                method.strict
                                modifier#identity))
                         name
                         #1 methodT
                         (list)
                         {.#Some (all _.composite
                                      (prepare_arguments 1 argumentsT)
                                      bodyG
                                      (returnG returnT))})))))

(def: class::anonymous
  Handler
  (..custom
   [(all <>.and
         ..class
         (<synthesis>.tuple (<>.some ..class))
         (<synthesis>.tuple (<>.some ..input))
         (<synthesis>.tuple (<>.some ..overriden_method_definition)))
    (function (_ extension_name generate archive [super_class
                                                  super_interfaces
                                                  inputsTS
                                                  overriden_methods])
      (do [! //////.monad]
        [all_dependencies (anonymous_dependencies archive inputsTS overriden_methods)
         [context _] (//////generation.with_new_context archive all_dependencies (in []))
         .let [[module_id artifact_id] context
               anonymous_class_name (///runtime.class_name context)
               class (type.class anonymous_class_name (list))
               total_environment (..total_environment overriden_methods)
               global_mapping (..global_mapping total_environment)]
         inputsTI (monad.each ! (generate_input generate archive) inputsTS)
         methods! (|> overriden_methods
                      (list#each (normalized_method global_mapping))
                      (monad.each ! (method_definition generate archive artifact_id)))
         bytecode (<| (at ! each (\\format.result class.writer))
                      //////.lifted
                      (class.class version.v6_0 (all modifier#composite class.public class.final)
                                   (name.internal anonymous_class_name)
                                   {.#None}
                                   (name.internal (..reflection super_class))
                                   (list#each (|>> ..reflection name.internal) super_interfaces)
                                   (foreign.variables total_environment)
                                   (list.partial (..with_anonymous_init class total_environment super_class inputsTI)
                                                 methods!)
                                   (sequence.sequence)))
         .let [artifact [anonymous_class_name bytecode]]
         _ (//////generation.execute! artifact)
         _ (//////generation.save! artifact_id {.#None} artifact)]
        (anonymous_instance generate archive class total_environment inputsTI)))]))

(def: bundle::class
  Bundle
  (<| (/////bundle.prefix "class")
      (|> (is Bundle /////bundle.empty)
          (/////bundle.install "anonymous" class::anonymous)
          )))

(def: .public bundle
  Bundle
  (<| (/////bundle.prefix "jvm")
      (|> ..bundle::conversion
          (dictionary.composite ..bundle::int)
          (dictionary.composite ..bundle::long)
          (dictionary.composite ..bundle::float)
          (dictionary.composite ..bundle::double)
          (dictionary.composite ..bundle::char)
          (dictionary.composite ..bundle::array)
          (dictionary.composite ..bundle::object)
          (dictionary.composite ..bundle::member)
          (dictionary.composite ..bundle::class)
          )))
