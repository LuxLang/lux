(.using
 [library
  [lux "*"
   [abstract
    [monad {"+" do}]]
   [control
    ["[0]" exception {"+" exception:}]]
   [macro
    ["^" pattern]]
   [target
    ["_" php]]]]
 ["[0]" / "_"
  [runtime {"+" Phase Phase!}]
  ["[1][0]" primitive]
  ["[1][0]" structure]
  ["[1][0]" reference]
  ["[1][0]" case]
  ["[1][0]" loop]
  ["[1][0]" function]
  ["/[1]" // "_"
   ["[1][0]" reference]
   ["/[1]" // "_"
    ["[1][0]" extension]
    ["/[1]" // "_"
     [analysis {"+" }]
     ["[1][0]" synthesis]
     ["//[1]" /// "_"
      ["[1][0]" phase ("[1]#[0]" monad)]
      [reference {"+"}
       [variable {"+"}]]]]]]])

(def: (statement expression archive synthesis)
  Phase!
  (case synthesis
    (^.template [<tag>]
      [(pattern (<tag> value))
       (//////phase#each _.return (expression archive synthesis))])
    ([////synthesis.bit]
     [////synthesis.i64]
     [////synthesis.f64]
     [////synthesis.text]
     [////synthesis.variant]
     [////synthesis.tuple]
     [////synthesis.branch/get]
     [////synthesis.function/apply])

    (^.template [<tag>]
      [(pattern {<tag> value})
       (//////phase#each _.return (expression archive synthesis))])
    ([////synthesis.#Reference]
     [////synthesis.#Extension])

    (pattern (////synthesis.branch/case case))
    (/case.case! statement expression archive case)

    (^.template [<tag> <generator>]
      [(pattern (<tag> value))
       (<generator> statement expression archive value)])
    ([////synthesis.branch/let /case.let!]
     [////synthesis.branch/if /case.if!]
     [////synthesis.loop/scope /loop.scope!]
     [////synthesis.loop/again /loop.again!])

    (pattern (////synthesis.function/abstraction abstraction))
    (//////phase#each _.return (/function.function statement expression archive abstraction))
    ))

(exception: .public cannot_recur_as_an_expression)

(def: .public (expression archive synthesis)
  Phase
  (case synthesis
    (^.template [<tag> <generator>]
      [(pattern (<tag> value))
       (//////phase#in (<generator> value))])
    ([////synthesis.bit  /primitive.bit]
     [////synthesis.i64  /primitive.i64]
     [////synthesis.f64  /primitive.f64]
     [////synthesis.text /primitive.text])

    {////synthesis.#Reference value}
    (//reference.reference /reference.system archive value)

    (^.template [<tag> <generator>]
      [(pattern (<tag> value))
       (<generator> expression archive value)])
    ([////synthesis.variant /structure.variant]
     [////synthesis.tuple /structure.tuple]
     [////synthesis.branch/let /case.let]
     [////synthesis.branch/if /case.if]
     [////synthesis.branch/get /case.get]
     [////synthesis.function/apply /function.apply])

    (^.template [<tag> <generator>]
      [(pattern (<tag> value))
       (<generator> statement expression archive value)])
    ([////synthesis.branch/case /case.case]
     [////synthesis.loop/scope /loop.scope]
     [////synthesis.function/abstraction /function.function])

    (pattern (////synthesis.loop/again _))
    (//////phase.except ..cannot_recur_as_an_expression [])

    {////synthesis.#Extension extension}
    (///extension.apply archive expression extension)))

(def: .public generate
  Phase
  ..expression)
