(.module:
  [library
   [lux #*
    [abstract
     [monad (#+ do)]]
    [control
     ["." exception (#+ exception:)]]
    [target
     ["_" php]]]]
  ["." / #_
   [runtime (#+ Phase Phase!)]
   ["#." primitive]
   ["#." structure]
   ["#." reference]
   ["#." case]
   ["#." loop]
   ["#." function]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     ["#." extension]
     ["/#" // #_
      [analysis (#+)]
      ["#." synthesis]
      ["//#" /// #_
       ["#." phase ("#\." monad)]
       [reference (#+)
        [variable (#+)]]]]]]])

(def: (statement expression archive synthesis)
  Phase!
  (case synthesis
    (^template [<tag>]
      [(^ (<tag> value))
       (//////phase\map _.return (expression archive synthesis))])
    ([////synthesis.bit]
     [////synthesis.i64]
     [////synthesis.f64]
     [////synthesis.text]
     [////synthesis.variant]
     [////synthesis.tuple]
     [#////synthesis.Reference]
     [////synthesis.branch/get]
     [////synthesis.function/apply]
     [#////synthesis.Extension])

    (^ (////synthesis.branch/case case))
    (/case.case! statement expression archive case)

    (^template [<tag> <generator>]
      [(^ (<tag> value))
       (<generator> statement expression archive value)])
    ([////synthesis.branch/let /case.let!]
     [////synthesis.branch/if /case.if!]
     [////synthesis.loop/scope /loop.scope!]
     [////synthesis.loop/recur /loop.recur!])

    (^ (////synthesis.function/abstraction abstraction))
    (//////phase\map _.return (/function.function statement expression archive abstraction))
    ))

(exception: #export cannot-recur-as-an-expression)

(def: #export (expression archive synthesis)
  Phase
  (case synthesis
    (^template [<tag> <generator>]
      [(^ (<tag> value))
       (//////phase\in (<generator> value))])
    ([////synthesis.bit  /primitive.bit]
     [////synthesis.i64  /primitive.i64]
     [////synthesis.f64  /primitive.f64]
     [////synthesis.text /primitive.text])

    (#////synthesis.Reference value)
    (//reference.reference /reference.system archive value)

    (^template [<tag> <generator>]
      [(^ (<tag> value))
       (<generator> expression archive value)])
    ([////synthesis.variant /structure.variant]
     [////synthesis.tuple /structure.tuple]
     [////synthesis.branch/let /case.let]
     [////synthesis.branch/if /case.if]
     [////synthesis.branch/get /case.get]
     [////synthesis.function/apply /function.apply])

    (^template [<tag> <generator>]
      [(^ (<tag> value))
       (<generator> statement expression archive value)])
    ([////synthesis.branch/case /case.case]
     [////synthesis.loop/scope /loop.scope]
     [////synthesis.function/abstraction /function.function])

    (^ (////synthesis.loop/recur _))
    (//////phase.except ..cannot-recur-as-an-expression [])

    (#////synthesis.Extension extension)
    (///extension.apply archive expression extension)))

(def: #export generate
  Phase
  ..expression)
