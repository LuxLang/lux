(.module:
  [library
   [lux {"-" [Scope]}
    [abstract
     ["[0]" monad {"+" [do]}]]
    [data
     ["[0]" product]
     ["[0]" text
      ["%" format {"+" [format]}]]
     [collection
      ["[0]" list ("[1]\[0]" functor)]
      ["[0]" set {"+" [Set]}]]]
    [math
     [number
      ["n" nat]]]
    [target
     ["_" scheme]]]]
  ["[0]" // "_"
   [runtime {"+" [Operation Phase Generator]}]
   ["[1][0]" case]
   ["/[1]" // "_"
    ["[1][0]" reference]
    ["/[1]" // "_"
     [synthesis
      ["[0]" case]]
     ["/[1]" // "_"
      ["[0]"synthesis {"+" [Scope Synthesis]}]
      ["[1][0]" generation]
      ["//[1]" /// "_"
       ["[1][0]" phase]
       [meta
        [archive {"+" [Archive]}]]
       [reference
        [variable {"+" [Register]}]]]]]]])

(def: @scope
  (_.var "scope"))

(def: .public (scope expression archive [start initsS+ bodyS])
  (Generator (Scope Synthesis))
  (case initsS+
    ... function/false/non-independent loop
    #.End
    (expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [initsO+ (monad.each ! (expression archive) initsS+)
       bodyO (/////generation.with_anchor @scope
               (expression archive bodyS))]
      (in (_.letrec (list [@scope (_.lambda [(|> initsS+
                                                 list.enumeration
                                                 (list\each (|>> product.left (n.+ start) //case.register)))
                                             #.None]
                                            bodyO)])
                    (_.apply/* initsO+ @scope))))))

(def: .public (recur expression archive argsS+)
  (Generator (List Synthesis))
  (do [! ///////phase.monad]
    [@scope /////generation.anchor
     argsO+ (monad.each ! (expression archive) argsS+)]
    (in (_.apply/* argsO+ @scope))))
