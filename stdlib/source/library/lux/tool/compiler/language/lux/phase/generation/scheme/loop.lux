(.require
 [library
  [lux (.except Scope)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" set (.only Set)]]]
   [math
    [number
     ["n" nat]]]
   [target
    ["_" scheme]]]]
 ["[0]" //
  [runtime (.only Operation Phase Generator)]
  ["[1][0]" case]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    [synthesis
     ["[0]" case]]
    ["/[1]" //
     ["[0]" synthesis (.only Scope Synthesis)]
     ["[1][0]" generation]
     ["//[1]" ///
      ["[1][0]" phase]
      [meta
       [archive (.only Archive)]]
      [reference
       [variable (.only Register)]]]]]]])

(def @scope
  (_.var "scope"))

(def .public (scope expression archive [start initsS+ bodyS])
  (Generator (Scope Synthesis))
  (case initsS+
    ... function/false/non-independent loop
    {.#End}
    (expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [initsO+ (monad.each ! (expression archive) initsS+)
       bodyO (/////generation.with_anchor @scope
               (expression archive bodyS))]
      (in (_.letrec (list [@scope (_.lambda [(|> initsS+
                                                 list.enumeration
                                                 (list#each (|>> product.left (n.+ start) //case.register)))
                                             {.#None}]
                                            bodyO)])
                    (_.apply initsO+ @scope))))))

(def .public (again expression archive argsS+)
  (Generator (List Synthesis))
  (do [! ///////phase.monad]
    [@scope /////generation.anchor
     argsO+ (monad.each ! (expression archive) argsS+)]
    (in (_.apply argsO+ @scope))))
