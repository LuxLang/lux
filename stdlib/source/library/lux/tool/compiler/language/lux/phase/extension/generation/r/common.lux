(.module:
  [library
   [lux #*
    [abstract
     ["." monad (#+ do)]]
    [control
     ["." function]
     ["." try]
     ["<>" parser
      ["<s>" synthesis (#+ Parser)]]]
    [data
     ["." product]
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." dictionary]
      ["." set]
      ["." list ("#\." functor fold)]]]
    [math
     [number
      ["f" frac]]]
    ["@" target
     ["_" r (#+ Expression)]]]]
  ["." //// #_
   ["/" bundle]
   ["/#" // #_
    ["." extension]
    [generation
     [extension (#+ Nullary Unary Binary Trinary
                    nullary unary binary trinary)]
     ["." reference]
     ["//" r #_
      ["#." runtime (#+ Operation Phase Handler Bundle Generator)]
      ["#." case]]]
    [//
     ["." synthesis (#+ %synthesis)]
     ["." generation]
     [///
      ["#" phase]]]]])

(def: #export (custom [parser handler])
  (All [s]
    (-> [(Parser s)
         (-> Text (Generator s))]
        Handler))
  (function (_ extension_name phase archive input)
    (case (<s>.run parser input)
      (#try.Success input')
      (handler extension_name phase archive input')

      (#try.Failure error)
      (/////.throw extension.invalid_syntax [extension_name %synthesis input]))))

## (template: (!unary function)
##   (|>> list _.apply/* (|> (_.constant function))))

## ## ## TODO: Get rid of this ASAP
## ## (def: lux::syntax_char_case!
## ##   (..custom [($_ <>.and
## ##                  <s>.any
## ##                  <s>.any
## ##                  (<>.some (<s>.tuple ($_ <>.and
## ##                                          (<s>.tuple (<>.many <s>.i64))
## ##                                          <s>.any))))
## ##              (function (_ extension_name phase archive [input else conditionals])
## ##                (do {! /////.monad}
## ##                  [@input (\ ! map _.var (generation.gensym "input"))
## ##                   inputG (phase archive input)
## ##                   elseG (phase archive else)
## ##                   conditionalsG (: (Operation (List [Expression Expression]))
## ##                                    (monad.map ! (function (_ [chars branch])
## ##                                                   (do !
## ##                                                     [branchG (phase archive branch)]
## ##                                                     (wrap [(|> chars (list\map (|>> .int _.int (_.=/2 @input))) _.or)
## ##                                                            branchG])))
## ##                                               conditionals))]
## ##                  (wrap (_.let (list [@input inputG])
## ##                          (list (list\fold (function (_ [test then] else)
## ##                                             (_.if test then else))
## ##                                           elseG
## ##                                           conditionalsG))))))]))

## (def: lux_procs
##   Bundle
##   (|> /.empty
##       ## (/.install "syntax char case!" lux::syntax_char_case!)
##       (/.install "is" (binary _.eq/2))
##       ## (/.install "try" (unary //runtime.lux//try))
##       ))

## ## (def: (capped operation parameter subject)
## ##   (-> (-> Expression Expression Expression)
## ##       (-> Expression Expression Expression))
## ##   (//runtime.i64//64 (operation parameter subject)))

(def: i64_procs
  Bundle
  (<| (/.prefix "i64")
      (|> /.empty
          ## (/.install "and" (binary _.logand/2))
          ## (/.install "or" (binary _.logior/2))
          ## (/.install "xor" (binary _.logxor/2))
          ## (/.install "left-shift" (binary _.ash/2))
          ## (/.install "right-shift" (binary (product.uncurry //runtime.i64//right_shift)))
          ## (/.install "=" (binary _.=/2))
          ## (/.install "<" (binary _.</2))
          ## (/.install "+" (binary _.+/2))
          ## (/.install "-" (binary _.-/2))
          ## (/.install "*" (binary _.*/2))
          ## (/.install "/" (binary _.floor/2))
          ## (/.install "%" (binary _.rem/2))
          ## (/.install "f64" (unary (_.//2 (_.float +1.0))))
          (/.install "char" (unary (|>> //runtime.i64_low _.intToUtf8/1)))
          )))

## (def: f64_procs
##   Bundle
##   (<| (/.prefix "f64")
##       (|> /.empty
##           ## (/.install "=" (binary (product.uncurry _.=/2)))
##           ## (/.install "<" (binary (product.uncurry _.</2)))
##           ## (/.install "+" (binary (product.uncurry _.+/2)))
##           ## (/.install "-" (binary (product.uncurry _.-/2)))
##           ## (/.install "*" (binary (product.uncurry _.*/2)))
##           ## (/.install "/" (binary (product.uncurry _.//2)))
##           ## (/.install "%" (binary (product.uncurry _.rem/2)))
##           ## (/.install "i64" (unary _.truncate/1))
##           (/.install "encode" (unary _.write-to-string/1))
##           ## (/.install "decode" (unary //runtime.f64//decode))
##           )))

## (def: (text//index [offset sub text])
##   (Trinary (Expression Any))
##   (//runtime.text//index offset sub text))

## (def: (text//clip [offset length text])
##   (Trinary (Expression Any))
##   (//runtime.text//clip offset length text))

## (def: (text//char [index text])
##   (Binary (Expression Any))
##   (_.char-code/1 (_.char/2 [text index])))

(def: text_procs
  Bundle
  (<| (/.prefix "text")
      (|> /.empty
          ## (/.install "=" (binary _.string=/2))
          ## (/.install "<" (binary (product.uncurry _.string<?/2)))
          (/.install "concat" (binary _.paste/2))
          ## (/.install "index" (trinary ..text//index))
          ## (/.install "size" (unary _.length/1))
          ## (/.install "char" (binary ..text//char))
          ## (/.install "clip" (trinary ..text//clip))
          )))

## (def: (io//log! message)
##   (Unary (Expression Any))
##   (_.progn (list (_.write-line/1 message)
##                  //runtime.unit)))

## (def: io_procs
##   Bundle
##   (<| (/.prefix "io")
##       (|> /.empty
##           (/.install "log" (unary ..io//log!))
##           (/.install "error" (unary _.error/1))
##           )))

(def: #export bundle
  Bundle
  (<| (/.prefix "lux")
      (|> /.empty
          ## (dictionary.merge lux_procs)
          (dictionary.merge i64_procs)
          ## (dictionary.merge f64_procs)
          (dictionary.merge text_procs)
          ## (dictionary.merge io_procs)
          )))
