(.using
 [library
  [lux "*"
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" maybe ("[1]#[0]" functor)]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only exception:)]]
   [data
    ["[0]" product]
    ["[0]" text
     ["%" format]]
    [collection
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" list ("[1]#[0]" functor mix)]
     ["[0]" set]]]
   [macro
    ["^" pattern]]
   [math
    [number
     ["n" nat]]]]]
 [////
  ["[0]" analysis
   ["[1]/[0]" complex]]
  ["/" synthesis (.only Path Synthesis)
   ["[1][0]" access]]
  [///
   [arity (.only Arity)]
   ["[0]" reference
    ["[0]" variable (.only Register Variable)]]]])

(def: (prune redundant register)
  (-> Register Register Register)
  (if (n.> redundant register)
    (-- register)
    register))

(type: (Remover a)
  (-> Register (-> a a)))

(def: (remove_local_from_path remove_local redundant)
  (-> (Remover Synthesis) (Remover Path))
  (function (again path)
    (case path
      {/.#Seq {/.#Bind register}
              post}
      (if (n.= redundant register)
        (again post)
        {/.#Seq {/.#Bind (if (n.> redundant register)
                           (-- register)
                           register)}
                (again post)})

      (^.or {/.#Seq {/.#Access {/access.#Member member}}
                    {/.#Seq {/.#Bind register}
                            post}}
            ... This alternative form should never occur in practice.
            ... Yet, it is "technically" possible to construct it.
            {/.#Seq {/.#Seq {/.#Access {/access.#Member member}}
                            {/.#Bind register}}
                    post})
      (if (n.= redundant register)
        (again post)
        {/.#Seq {/.#Access {/access.#Member member}}
                {/.#Seq {/.#Bind (if (n.> redundant register)
                                   (-- register)
                                   register)}
                        (again post)}})

      (^.template [<tag>]
        [{<tag> left right}
         {<tag> (again left) (again right)}])
      ([/.#Seq]
       [/.#Alt])

      {/.#Bit_Fork when then else}
      {/.#Bit_Fork when (again then) (maybe#each again else)}

      (^.template [<tag>]
        [{<tag> [[test then] tail]}
         {<tag> [[test (again then)]
                 (list#each (function (_ [test' then'])
                              [test' (again then')])
                            tail)]}])
      ([/.#I64_Fork]
       [/.#F64_Fork]
       [/.#Text_Fork])
      
      (^.or {/.#Pop}
            {/.#Access _})
      path

      {/.#Bind register}
      (undefined)
      
      {/.#Then then}
      {/.#Then (remove_local redundant then)}
      )))

(def: (remove_local_from_variable redundant variable)
  (Remover Variable)
  (case variable
    {variable.#Local register}
    {variable.#Local (..prune redundant register)}
    
    {variable.#Foreign register}
    variable))

(def: (remove_local redundant)
  (Remover Synthesis)
  (function (again synthesis)
    (case synthesis
      {/.#Simple _}
      synthesis
      
      {/.#Structure structure}
      {/.#Structure (case structure
                      {analysis/complex.#Variant [lefts right value]}
                      {analysis/complex.#Variant [lefts right (again value)]}
                      
                      {analysis/complex.#Tuple tuple}
                      {analysis/complex.#Tuple (list#each again tuple)})}
      
      {/.#Reference reference}
      (case reference
        {reference.#Variable variable}
        (/.variable (..remove_local_from_variable redundant variable))

        {reference.#Constant constant}
        synthesis)
      
      {/.#Control control}
      {/.#Control (case control
                    {/.#Branch branch}
                    {/.#Branch (case branch
                                 {/.#Exec this that}
                                 {/.#Exec (again this)
                                          (again that)}
                                 
                                 {/.#Let input register output}
                                 {/.#Let (again input)
                                         (..prune redundant register)
                                         (again output)}
                                 
                                 {/.#If test then else}
                                 {/.#If (again test) (again then) (again else)}
                                 
                                 {/.#Get path record}
                                 {/.#Get path (again record)}
                                 
                                 {/.#Case input path}
                                 {/.#Case (again input) (remove_local_from_path remove_local redundant path)})}
                    
                    {/.#Loop loop}
                    {/.#Loop (case loop
                               {/.#Scope [start inits iteration]}
                               {/.#Scope [(..prune redundant start)
                                          (list#each again inits)
                                          (again iteration)]}
                               
                               {/.#Again resets}
                               {/.#Again (list#each again resets)})}

                    {/.#Function function}
                    {/.#Function (case function
                                   {/.#Abstraction [environment arity body]}
                                   {/.#Abstraction [(list#each again environment)
                                                    arity
                                                    body]}

                                   {/.#Apply abstraction inputs}
                                   {/.#Apply (again abstraction) (list#each again inputs)})})}
      
      {/.#Extension name inputs}
      {/.#Extension name (list#each again inputs)})))

(type: Redundancy
  (Dictionary Register Bit))

(def: initial
  Redundancy
  (dictionary.empty n.hash))

(def: redundant! true)
(def: necessary! false)

(def: (extended offset amount redundancy)
  (-> Register Nat Redundancy [(List Register) Redundancy])
  (let [extension (|> amount list.indices (list#each (n.+ offset)))]
    [extension
     (list#mix (function (_ register redundancy)
                 (dictionary.has register ..necessary! redundancy))
               redundancy
               extension)]))

(def: (default arity)
  (-> Arity Redundancy)
  (product.right (..extended 0 (++ arity) ..initial)))

(type: (Optimization a)
  (-> [Redundancy a] (Try [Redundancy a])))

(def: (list_optimization optimization)
  (All (_ a) (-> (Optimization a) (Optimization (List a))))
  (function (again [redundancy values])
    (case values
      {.#End}
      {try.#Success [redundancy
                     values]}

      {.#Item head tail}
      (do try.monad
        [[redundancy head] (optimization [redundancy head])
         [redundancy tail] (again [redundancy tail])]
        (in [redundancy
             {.#Item head tail}])))))

(template [<name>]
  [(exception: .public (<name> [register Register])
     (exception.report
      "Register" (%.nat register)))]

  [redundant_declaration]
  [unknown_register]
  )

(def: (declare register redundancy)
  (-> Register Redundancy (Try Redundancy))
  (case (dictionary.value register redundancy)
    {.#None}
    {try.#Success (dictionary.has register ..redundant! redundancy)}
    
    {.#Some _}
    (exception.except ..redundant_declaration [register])))

(def: (observe register redundancy)
  (-> Register Redundancy (Try Redundancy))
  (case (dictionary.value register redundancy)
    {.#None}
    (exception.except ..unknown_register [register])
    
    {.#Some _}
    {try.#Success (dictionary.has register ..necessary! redundancy)}))

(def: (format redundancy)
  (%.Format Redundancy)
  (|> redundancy
      dictionary.entries
      (list#each (function (_ [register redundant?])
                   (%.format (%.nat register) ": " (%.bit redundant?))))
      (text.interposed ", ")))

(def: (path_optimization optimization)
  (-> (Optimization Synthesis) (Optimization Path))
  (function (again [redundancy path])
    (case path
      (^.or {/.#Pop}
            {/.#Access _})
      {try.#Success [redundancy
                     path]}

      {/.#Bit_Fork when then else}
      (do [! try.monad]
        [[redundancy then] (again [redundancy then])
         [redundancy else] (case else
                             {.#Some else}
                             (# ! each
                                (function (_ [redundancy else])
                                  [redundancy {.#Some else}])
                                (again [redundancy else]))

                             {.#None}
                             (in [redundancy {.#None}]))]
        (in [redundancy {/.#Bit_Fork when then else}]))
      
      (^.template [<tag> <type>]
        [{<tag> [[test then] elses]}
         (do [! try.monad]
           [[redundancy then] (again [redundancy then])
            [redundancy elses] (..list_optimization (is (Optimization [<type> Path])
                                                        (function (_ [redundancy [else_test else_then]])
                                                          (do !
                                                            [[redundancy else_then] (again [redundancy else_then])]
                                                            (in [redundancy [else_test else_then]]))))
                                                    [redundancy elses])]
           (in [redundancy {<tag> [[test then] elses]}]))])
      ([/.#I64_Fork I64]
       [/.#F64_Fork Frac]
       [/.#Text_Fork Text])
      
      {/.#Bind register}
      (do try.monad
        [redundancy (..declare register redundancy)]
        (in [redundancy
             path]))
      
      {/.#Alt left right}
      (do try.monad
        [[redundancy left] (again [redundancy left])
         [redundancy right] (again [redundancy right])]
        (in [redundancy {/.#Alt left right}]))
      
      {/.#Seq pre post}
      (do try.monad
        [.let [baseline (|> redundancy
                            dictionary.keys
                            (set.of_list n.hash))]
         [redundancy pre] (again [redundancy pre])
         .let [bindings (|> redundancy
                            dictionary.keys
                            (set.of_list n.hash)
                            (set.difference baseline))]
         [redundancy post] (again [redundancy post])
         .let [redundants (|> redundancy
                              dictionary.entries
                              (list.only (function (_ [register redundant?])
                                           (and (set.member? bindings register)
                                                redundant?)))
                              (list#each product.left))]]
        (in [(list#mix dictionary.lacks redundancy (set.list bindings))
             (|> redundants
                 (list.sorted n.>)
                 (list#mix (..remove_local_from_path ..remove_local) {/.#Seq pre post}))]))

      {/.#Then then}
      (do try.monad
        [[redundancy then] (optimization [redundancy then])]
        (in [redundancy {/.#Then then}]))
      )))

(def: (optimization' [redundancy synthesis])
  (Optimization Synthesis)
  (with_expansions [<no_op> (these {try.#Success [redundancy
                                                  synthesis]})]
    (case synthesis
      {/.#Simple _}
      <no_op>
      
      {/.#Structure structure}
      (case structure
        {analysis/complex.#Variant [lefts right value]}
        (do try.monad
          [[redundancy value] (optimization' [redundancy value])]
          (in [redundancy
               {/.#Structure {analysis/complex.#Variant [lefts right value]}}]))
        
        {analysis/complex.#Tuple tuple}
        (do try.monad
          [[redundancy tuple] (..list_optimization optimization' [redundancy tuple])]
          (in [redundancy
               {/.#Structure {analysis/complex.#Tuple tuple}}])))
      
      {/.#Reference reference}
      (case reference
        {reference.#Variable variable}
        (case variable
          {variable.#Local register}
          (do try.monad
            [redundancy (..observe register redundancy)]
            <no_op>)
          
          {variable.#Foreign register}
          <no_op>)

        {reference.#Constant constant}
        <no_op>)
      
      {/.#Control control}
      (case control
        {/.#Branch branch}
        (case branch
          {/.#Exec this that}
          (do try.monad
            [[redundancy this] (optimization' [redundancy this])
             [redundancy that] (optimization' [redundancy that])]
            (in [redundancy
                 (/.branch/exec [this that])]))
          
          {/.#Let input register output}
          (do try.monad
            [[redundancy input] (optimization' [redundancy input])
             redundancy (..declare register redundancy)
             [redundancy output] (optimization' [redundancy output])
             .let [redundant? (|> redundancy
                                  (dictionary.value register)
                                  (maybe.else ..necessary!))]]
            (in [(dictionary.lacks register redundancy)
                 {/.#Control {/.#Branch (if redundant?
                                          {/.#Exec input (..remove_local register output)}
                                          {/.#Let input register output})}}]))
          
          {/.#If test then else}
          (do try.monad
            [[redundancy test] (optimization' [redundancy test])
             [redundancy then] (optimization' [redundancy then])
             [redundancy else] (optimization' [redundancy else])]
            (in [redundancy
                 {/.#Control {/.#Branch {/.#If test then else}}}]))
          
          {/.#Get path record}
          (do try.monad
            [[redundancy record] (optimization' [redundancy record])]
            (in [redundancy
                 {/.#Control {/.#Branch {/.#Get path record}}}]))
          
          {/.#Case input path}
          (do try.monad
            [[redundancy input] (optimization' [redundancy input])
             [redundancy path] (..path_optimization optimization' [redundancy path])]
            (in [redundancy
                 {/.#Control {/.#Branch {/.#Case input path}}}])))
        
        {/.#Loop loop}
        (case loop
          {/.#Scope [start inits iteration]}
          (do try.monad
            [[redundancy inits] (..list_optimization optimization' [redundancy inits])
             .let [[extension redundancy] (..extended start (list.size inits) redundancy)]
             [redundancy iteration] (optimization' [redundancy iteration])]
            (in [(list#mix dictionary.lacks redundancy extension)
                 {/.#Control {/.#Loop {/.#Scope [start inits iteration]}}}]))
          
          {/.#Again resets}
          (do try.monad
            [[redundancy resets] (..list_optimization optimization' [redundancy resets])]
            (in [redundancy
                 {/.#Control {/.#Loop {/.#Again resets}}}])))

        {/.#Function function}
        (case function
          {/.#Abstraction [environment arity body]}
          (do [! try.monad]
            [[redundancy environment] (..list_optimization optimization' [redundancy environment])
             [_ body] (optimization' [(..default arity) body])]
            (in [redundancy
                 {/.#Control {/.#Function {/.#Abstraction [environment arity body]}}}]))
          
          {/.#Apply abstraction inputs}
          (do try.monad
            [[redundancy abstraction] (optimization' [redundancy abstraction])
             [redundancy inputs] (..list_optimization optimization' [redundancy inputs])]
            (in [redundancy
                 {/.#Control {/.#Function {/.#Apply abstraction inputs}}}]))))
      
      {/.#Extension name inputs}
      (do try.monad
        [[redundancy inputs] (..list_optimization optimization' [redundancy inputs])]
        (in [redundancy
             {/.#Extension name inputs}])))))

(def: .public optimization
  (-> Synthesis (Try Synthesis))
  (|>> [..initial]
       optimization'
       (# try.monad each product.right)))
