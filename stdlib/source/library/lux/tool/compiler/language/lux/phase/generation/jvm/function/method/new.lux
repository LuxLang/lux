(.module:
  [library
   [lux (#- Type type)
    [abstract
     ["." monad (#+ do)]]
    [data
     [number
      ["n" nat]]
     [collection
      ["." list]]]
    [target
     [jvm
      ["." field (#+ Field)]
      ["." method (#+ Method)]
      ["_" bytecode (#+ Bytecode)]
      ["." constant
       [pool (#+ Resource)]]
      [type (#+ Type)
       ["." category (#+ Class Value Return)]]]]
    [tool
     [compiler
      [meta
       ["." archive (#+ Archive)]]]]]]
  ["." //
   ["#." init]
   ["#." implementation]
   ["/#" // #_
    [field
     [constant
      ["#." arity]]
     [variable
      ["#." foreign]
      ["#." partial]]]
    ["/#" // #_
     [runtime (#+ Operation Phase)]
     ["#." value]
     ["#." reference]
     [////
      [analysis (#+ Environment)]
      [synthesis (#+ Synthesis)]
      [///
       ["." arity (#+ Arity)]
       ["." phase]]]]]])

(def: .public (instance' foreign_setup class environment arity)
  (-> (List (Bytecode Any)) (Type Class) (Environment Synthesis) Arity (Bytecode Any))
  ($_ _.compose
      (_.new class)
      _.dup
      (monad.seq _.monad foreign_setup)
      (///partial.new arity)
      (_.invokespecial class //init.name (//init.type environment arity))))

(def: .public (instance generate archive class environment arity)
  (-> Phase Archive (Type Class) (Environment Synthesis) Arity (Operation (Bytecode Any)))
  (do {! phase.monad}
    [foreign* (monad.map ! (generate archive) environment)]
    (in (instance' foreign* class environment arity))))

(def: .public (method class environment arity)
  (-> (Type Class) (Environment Synthesis) Arity (Resource Method))
  (let [after_this (: (-> Nat Nat)
                      (n.+ 1))
        environment_size (list.size environment)
        after_environment (: (-> Nat Nat)
                             (|>> after_this (n.+ environment_size)))
        after_arity (: (-> Nat Nat)
                       (|>> after_environment (n.+ 1)))]
    (method.method //.modifier //init.name
                   (//init.type environment arity)
                   (list)
                   (#.Some ($_ _.compose
                               ////reference.this
                               (//init.super environment_size arity)
                               (monad.map _.monad (function (_ register)
                                                    (///foreign.put class register (_.aload (after_this register))))
                                          (list.indices environment_size))
                               (monad.map _.monad (function (_ register)
                                                    (///partial.put class register (_.aload (after_arity register))))
                                          (list.indices (n.- ///arity.minimum arity)))
                               _.areturn)))))
