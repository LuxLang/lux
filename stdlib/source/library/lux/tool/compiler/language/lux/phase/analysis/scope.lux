(.module:
  [library
   [lux #*
    [abstract
     monad]
    [control
     ["." try]
     ["." exception (#+ exception:)]]
    [data
     ["." text ("#\." equivalence)]
     ["." maybe ("#\." monad)]
     ["." product]
     [collection
      ["." list ("#\." functor fold monoid)]
      [dictionary
       ["." plist]]]]]]
  ["." /// #_
   ["#." extension]
   [//
    ["/" analysis (#+ Operation Phase)]
    [///
     [reference
      ["." variable (#+ Register Variable)]]
     ["#" phase]]]])

(type: Local (Bindings Text [Type Register]))
(type: Foreign (Bindings Text [Type Variable]))

(def: (local? name scope)
  (-> Text Scope Bit)
  (|> scope
      (get@ [#.locals #.mappings])
      (plist.contains? name)))

(def: (local name scope)
  (-> Text Scope (Maybe [Type Variable]))
  (|> scope
      (get@ [#.locals #.mappings])
      (plist.get name)
      (maybe\map (function (_ [type value])
                   [type (#variable.Local value)]))))

(def: (captured? name scope)
  (-> Text Scope Bit)
  (|> scope
      (get@ [#.captured #.mappings])
      (plist.contains? name)))

(def: (captured name scope)
  (-> Text Scope (Maybe [Type Variable]))
  (loop [idx 0
         mappings (get@ [#.captured #.mappings] scope)]
    (case mappings
      (#.Item [_name [_source_type _source_ref]] mappings')
      (if (text\= name _name)
        (#.Some [_source_type (#variable.Foreign idx)])
        (recur (inc idx) mappings'))

      #.End
      #.None)))

(def: (reference? name scope)
  (-> Text Scope Bit)
  (or (local? name scope)
      (captured? name scope)))

(def: (reference name scope)
  (-> Text Scope (Maybe [Type Variable]))
  (case (..local name scope)
    (#.Some type)
    (#.Some type)

    _
    (..captured name scope)))

(def: #export (find name)
  (-> Text (Operation (Maybe [Type Variable])))
  (///extension.lift
   (function (_ state)
     (let [[inner outer] (|> state
                             (get@ #.scopes)
                             (list.split_with (|>> (reference? name) not)))]
       (case outer
         #.End
         (#.Right [state #.None])

         (#.Item top_outer _)
         (let [[ref_type init_ref] (maybe.default (undefined)
                                                  (..reference name top_outer))
               [ref inner'] (list\fold (: (-> Scope [Variable (List Scope)] [Variable (List Scope)])
                                          (function (_ scope ref+inner)
                                            [(#variable.Foreign (get@ [#.captured #.counter] scope))
                                             (#.Item (update@ #.captured
                                                              (: (-> Foreign Foreign)
                                                                 (|>> (update@ #.counter inc)
                                                                      (update@ #.mappings (plist.put name [ref_type (product.left ref+inner)]))))
                                                              scope)
                                                     (product.right ref+inner))]))
                                       [init_ref #.End]
                                       (list.reverse inner))
               scopes (list\compose inner' outer)]
           (#.Right [(set@ #.scopes scopes state)
                     (#.Some [ref_type ref])]))
         )))))

(exception: #export cannot_create_local_binding_without_a_scope)
(exception: #export invalid_scope_alteration)

(def: #export (with_local [name type] action)
  (All [a] (-> [Text Type] (Operation a) (Operation a)))
  (function (_ [bundle state])
    (case (get@ #.scopes state)
      (#.Item head tail)
      (let [old_mappings (get@ [#.locals #.mappings] head)
            new_var_id (get@ [#.locals #.counter] head)
            new_head (update@ #.locals
                              (: (-> Local Local)
                                 (|>> (update@ #.counter inc)
                                      (update@ #.mappings (plist.put name [type new_var_id]))))
                              head)]
        (case (///.run' [bundle (set@ #.scopes (#.Item new_head tail) state)]
                        action)
          (#try.Success [[bundle' state'] output])
          (case (get@ #.scopes state')
            (#.Item head' tail')
            (let [scopes' (#.Item (set@ #.locals (get@ #.locals head) head')
                                  tail')]
              (#try.Success [[bundle' (set@ #.scopes scopes' state')]
                             output]))

            _
            (exception.except ..invalid_scope_alteration []))

          (#try.Failure error)
          (#try.Failure error)))

      _
      (exception.except ..cannot_create_local_binding_without_a_scope []))
    ))

(template [<name> <val_type>]
  [(def: <name>
     (Bindings Text [Type <val_type>])
     {#.counter 0
      #.mappings (list)})]

  [init_locals   Nat]
  [init_captured Variable]
  )

(def: (scope parent_name child_name)
  (-> (List Text) Text Scope)
  {#.name     (list& child_name parent_name)
   #.inner    0
   #.locals   init_locals
   #.captured init_captured})

(def: #export (with_scope name action)
  (All [a] (-> Text (Operation a) (Operation a)))
  (function (_ [bundle state])
    (let [parent_name (case (get@ #.scopes state)
                        #.End
                        (list)
                        
                        (#.Item top _)
                        (get@ #.name top))]
      (case (action [bundle (update@ #.scopes
                                     (|>> (#.Item (scope parent_name name)))
                                     state)])
        (#try.Success [[bundle' state'] output])
        (#try.Success [[bundle' (update@ #.scopes
                                         (|>> list.tail (maybe.default (list)))
                                         state')]
                       output])

        (#try.Failure error)
        (#try.Failure error)))
    ))

(exception: #export cannot_get_next_reference_when_there_is_no_scope)

(def: #export next_local
  (Operation Register)
  (///extension.lift
   (function (_ state)
     (case (get@ #.scopes state)
       (#.Item top _)
       (#try.Success [state (get@ [#.locals #.counter] top)])

       #.End
       (exception.except ..cannot_get_next_reference_when_there_is_no_scope [])))))

(def: (ref_to_variable ref)
  (-> Ref Variable)
  (case ref
    (#.Local register)
    (#variable.Local register)
    
    (#.Captured register)
    (#variable.Foreign register)))

(def: #export (environment scope)
  (-> Scope (List Variable))
  (|> scope
      (get@ [#.captured #.mappings])
      (list\map (function (_ [_ [_ ref]]) (ref_to_variable ref)))))
