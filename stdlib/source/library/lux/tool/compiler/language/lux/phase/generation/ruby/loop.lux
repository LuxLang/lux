(.using
  [library
   [lux {"-" Scope symbol}
    [abstract
     ["[0]" monad {"+" do}]]
    [data
     ["[0]" product]
     ["[0]" text
      ["%" format {"+" format}]]
     [collection
      ["[0]" list ("[1]#[0]" functor mix)]
      ["[0]" set]]]
    [math
     [number
      ["n" nat]]]
    [target
     ["_" ruby {"+" Expression LVar Statement}]]]]
  ["[0]" // "_"
   [runtime {"+" Operation Phase Generator Phase! Generator!}]
   ["[1][0]" case]
   ["/[1]" // "_"
    ["[1][0]" reference]
    ["/[1]" // "_"
     [synthesis
      ["[0]" case]]
     ["/[1]" // "_"
      ["[0]" synthesis {"+" Scope Synthesis}]
      ["[1][0]" generation]
      ["//[1]" /// "_"
       ["[1][0]" phase]
       [reference
        ["[1][0]" variable {"+" Register}]]]]]]])

(def: (setup offset bindings body)
  (-> Register (List Expression) Statement Statement)
  (let [variables (|> bindings
                      list.enumeration
                      (list#each (|>> product.left (n.+ offset) //case.register)))]
    ($_ _.then
        (_.set variables (_.multi bindings))
        body)))

(def: symbol
  (_.symbol "lux_continue"))

(def: .public with_scope
  (-> Statement Statement)
  (_.while (_.bool true)))

(def: .public (scope! statement expression archive [start initsS+ bodyS])
  (Generator! (Scope Synthesis))
  (case initsS+
    ... function/false/non-independent loop
    {.#End}
    (statement expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [initsO+ (monad.each ! (expression archive) initsS+)
       body! (/////generation.with_anchor start
               (statement expression archive bodyS))]
      (in (<| (..setup start initsO+)
              ..with_scope
              body!)))))

(def: .public (scope statement expression archive [start initsS+ bodyS])
  (-> Phase! (Generator (Scope Synthesis)))
  (case initsS+
    ... function/false/non-independent loop
    {.#End}
    (expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [body! (scope! statement expression archive [start initsS+ bodyS])]
      (in (|> body!
              [(list)] (_.lambda {.#None})
              (_.apply_lambda/* (list)))))))

(def: .public (again! statement expression archive argsS+)
  (Generator! (List Synthesis))
  (do [! ///////phase.monad]
    [offset /////generation.anchor
     @temp (//case.symbol "lux_again_values")
     argsO+ (monad.each ! (expression archive) argsS+)
     .let [re_binds (|> argsO+
                        list.enumeration
                        (list#each (function (_ [idx _])
                                     (_.item (_.int (.int idx)) @temp))))]]
    (in ($_ _.then
            (_.set (list @temp) (_.array argsO+))
            (..setup offset re_binds
                     _.next)))))
