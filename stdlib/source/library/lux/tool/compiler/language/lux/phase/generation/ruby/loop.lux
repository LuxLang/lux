(.module:
  [library
   [lux (#- Scope)
    [abstract
     ["." monad (#+ do)]]
    [data
     ["." product]
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor fold)]
      ["." set]]]
    [math
     [number
      ["n" nat]]]
    [target
     ["_" ruby (#+ Expression LVar Statement)]]]]
  ["." // #_
   [runtime (#+ Operation Phase Generator Phase! Generator!)]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     [synthesis
      ["." case]]
     ["/#" // #_
      ["." synthesis (#+ Scope Synthesis)]
      ["#." generation]
      ["//#" /// #_
       ["#." phase]
       [reference
        ["#." variable (#+ Register)]]]]]]])

(def: (setup offset bindings body)
  (-> Register (List Expression) Statement Statement)
  (|> bindings
      list.enumeration
      (list\map (function (_ [register value])
                  (_.set (list (//case.register (n.+ offset register)))
                         value)))
      list.reversed
      (list\fold _.then body)))

(def: symbol
  (_.symbol "lux_continue"))

(def: #export with_scope
  (-> Statement Statement)
  (_.while (_.bool true)))

(def: #export (scope! statement expression archive [start initsS+ bodyS])
  (Generator! (Scope Synthesis))
  (case initsS+
    ## function/false/non-independent loop
    #.End
    (statement expression archive bodyS)

    ## true loop
    _
    (do {! ///////phase.monad}
      [initsO+ (monad.map ! (expression archive) initsS+)
       body! (/////generation.with_anchor start
               (statement expression archive bodyS))]
      (in (<| (..setup start initsO+)
              ..with_scope
              body!)))))

(def: #export (scope statement expression archive [start initsS+ bodyS])
  (-> Phase! (Generator (Scope Synthesis)))
  (case initsS+
    ## function/false/non-independent loop
    #.End
    (expression archive bodyS)

    ## true loop
    _
    (do {! ///////phase.monad}
      [body! (scope! statement expression archive [start initsS+ bodyS])]
      (in (|> body!
              (_.lambda #.None (list))
              (_.apply_lambda/* (list)))))))

(def: #export (recur! statement expression archive argsS+)
  (Generator! (List Synthesis))
  (do {! ///////phase.monad}
    [offset /////generation.anchor
     @temp (//case.gensym "lux_recur_values")
     argsO+ (monad.map ! (expression archive) argsS+)
     #let [re_binds (|> argsO+
                        list.enumeration
                        (list\map (function (_ [idx _])
                                    (_.item (_.int (.int idx)) @temp))))]]
    (in ($_ _.then
            (_.set (list @temp) (_.array argsO+))
            (..setup offset re_binds
                     _.next)))))
