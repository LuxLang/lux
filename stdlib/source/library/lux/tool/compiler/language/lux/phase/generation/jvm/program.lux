(.module:
  [library
   [lux (#- Definition)
    [abstract
     [monad (#+ do)]]
    [control
     ["." try]]
    [data
     [collection
      ["." row]]
     ["." format #_
      ["#" binary]]]
    [target
     [jvm
      ["_" bytecode (#+ Bytecode)]
      ["." modifier (#+ Modifier) ("#\." monoid)]
      ["." method (#+ Method)]
      ["." version]
      ["." class (#+ Class)]
      [encoding
       ["." name]]
      ["." type
       ["." reflection]]]]]]
  ["." //
   ["#." runtime (#+ Definition)]
   ["#." function/abstract]])

(def: .public class
  "LuxProgram")

(def: ^Object
  (type.class "java.lang.Object" (list)))

(def: ^String
  (type.class "java.lang.String" (list)))

(def: ^Args
  (type.array ^String))

(def: main::type (type.method [(list ..^Args) type.void (list)]))

(def: main::modifier
  (Modifier Method)
  ($_ modifier\compose
      method.public
      method.static
      method.strict
      ))

(def: program::modifier
  (Modifier Class)
  ($_ modifier\compose
      class.public
      class.final
      ))

(def: nil //runtime.none_injection)

(def: amount_of_inputs
  (Bytecode Any)
  ($_ _.compose
      _.aload_0
      _.arraylength))

(def: decrease
  (Bytecode Any)
  ($_ _.compose
      _.iconst_1
      _.isub))

(def: head
  (Bytecode Any)
  ($_ _.compose
      _.dup
      _.aload_0
      _.swap
      _.aaload
      _.swap
      _.dup_x2
      _.pop))

(def: pair
  (Bytecode Any)
  ($_ _.compose
      _.iconst_2
      (_.anewarray ^Object)
      _.dup_x1
      _.swap
      _.iconst_0
      _.swap
      _.aastore
      _.dup_x1
      _.swap
      _.iconst_1
      _.swap
      _.aastore))

(def: cons //runtime.right_injection)

(def: input_list
  (Bytecode Any)
  (do _.monad
    [@loop _.new_label
     @end _.new_label]
    ($_ _.compose
        ..nil
        ..amount_of_inputs
        (_.set_label @loop)
        ..decrease
        _.dup
        (_.iflt @end)
        ..head
        ..pair
        ..cons
        _.swap
        (_.goto @loop)
        (_.set_label @end)
        _.pop)))

(def: feed_inputs
  //runtime.apply)

(def: run_io
  (Bytecode Any)
  ($_ _.compose
      (_.checkcast //function/abstract.class)
      _.aconst_null
      //runtime.apply))

(def: .public (program program)
  (-> (Bytecode Any) Definition)
  (let [super_class (|> ..^Object type.reflection reflection.reflection name.internal)
        main (method.method ..main::modifier "main" ..main::type
                            (list)
                            (#.Some ($_ _.compose
                                        program
                                        ..input_list
                                        ..feed_inputs
                                        ..run_io
                                        _.return)))]
    [..class
     (<| (format.run class.writer)
         try.assumed
         (class.class version.v6_0
                      ..program::modifier
                      (name.internal ..class)
                      super_class
                      (list)
                      (list)
                      (list main)
                      (row.row)))]))
