(.using
 [library
  [lux {"-" Definition}
   [abstract
    [monad {"+" do}]]
   [control
    ["[0]" try]]
   [data
    [collection
     ["[0]" sequence]]
    ["[0]" format "_"
     ["[1]" binary]]]
   [target
    [jvm
     ["_" bytecode {"+" Bytecode}]
     ["[0]" modifier {"+" Modifier} ("[1]#[0]" monoid)]
     ["[0]" method {"+" Method}]
     ["[0]" version]
     ["[0]" class {"+" Class}]
     [encoding
      ["[0]" name]]
     ["[0]" type
      ["[0]" reflection]]]]
   [tool
    [compiler
     [language
      [lux
       [program {"+" Program}]]]
     [meta
      [archive
       ["[0]" unit]]]]]]]
 ["[0]" //
  ["[1][0]" runtime {"+" Definition}]
  ["[1][0]" function/abstract]])

(def: ^Object
  (type.class "java.lang.Object" (list)))

(def: ^String
  (type.class "java.lang.String" (list)))

(def: ^Args
  (type.array ^String))

(def: main::type
  (type.method [(list) (list ..^Args) type.void (list)]))

(def: main::modifier
  (Modifier Method)
  ($_ modifier#composite
      method.public
      method.static
      method.strict
      ))

(def: program::modifier
  (Modifier Class)
  ($_ modifier#composite
      class.public
      class.final
      ))

(def: list:end
  //runtime.none_injection)

(def: amount_of_inputs
  (Bytecode Any)
  ($_ _.composite
      _.aload_0
      _.arraylength))

(def: decrease
  (Bytecode Any)
  ($_ _.composite
      _.iconst_1
      _.isub))

(def: head
  (Bytecode Any)
  ($_ _.composite
      _.dup
      _.aload_0
      _.swap
      _.aaload
      _.swap
      _.dup_x2
      _.pop))

(def: pair
  (Bytecode Any)
  (let [empty_pair ($_ _.composite
                       _.iconst_2
                       (_.anewarray ^Object)
                       )
        set_side! (is (-> (Bytecode Any) (Bytecode Any))
                      (function (_ index)
                        ($_ _.composite
                            ... ?P
                            _.dup_x1  ... P?P
                            _.swap    ... PP?
                            index     ... PP?I
                            _.swap    ... PPI?
                            _.aastore ... P
                            )))]
    ($_ _.composite
        ... RL
        empty_pair ... RLP
        (set_side! _.iconst_0) ... RP
        (set_side! _.iconst_1) ... P
        )))

(def: list:item //runtime.right_injection)

(def: input_list
  (Bytecode Any)
  (do _.monad
    [@loop _.new_label
     @end _.new_label]
    ($_ _.composite
        ..list:end
        ..amount_of_inputs
        (_.set_label @loop)
        ..decrease
        _.dup
        (_.iflt @end)
        ..head
        ..pair
        ..list:item
        _.swap
        (_.goto @loop)
        (_.set_label @end)
        _.pop)))

(def: feed_inputs
  //runtime.apply)

(def: run_io
  (Bytecode Any)
  ($_ _.composite
      (_.checkcast //function/abstract.class)
      //runtime.unit
      //runtime.apply))

(def: .public (program artifact_name context program)
  (-> (-> unit.ID Text) (Program (Bytecode Any) Definition))
  (let [super_class (|> ..^Object type.reflection reflection.reflection name.internal)
        main (method.method ..main::modifier "main"
                            #0 ..main::type
                            (list)
                            {.#Some ($_ _.composite
                                        program
                                        ..input_list
                                        ..feed_inputs
                                        ..run_io
                                        _.return)})
        class (artifact_name context)]
    [class
     (<| (format.result class.writer)
         try.trusted
         (class.class version.v6_0
                      ..program::modifier
                      (name.internal class)
                      {.#None}
                      super_class
                      (list)
                      (list)
                      (list main)
                      (sequence.sequence)))]))
