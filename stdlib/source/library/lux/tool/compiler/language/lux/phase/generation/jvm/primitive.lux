(.module:
  [library
   [lux {"-" [i64]}
    ["." ffi {"+" [import:]}]
    [abstract
     [monad {"+" [do]}]]
    [target
     [jvm
      ["_" bytecode {"+" [Bytecode]}]
      ["." type]
      [encoding
       ["." signed]]]]]]
  ["." // "_"
   ["#." runtime]])

(def: $Boolean (type.class "java.lang.Boolean" (list)))
(def: $Long (type.class "java.lang.Long" (list)))
(def: $Double (type.class "java.lang.Double" (list)))

(def: .public (bit value)
  (-> Bit (Bytecode Any))
  (_.getstatic $Boolean (if value "TRUE" "FALSE") $Boolean))

(def: wrap_i64
  (_.invokestatic $Long "valueOf" (type.method [(list type.long) $Long (list)])))

(def: .public (i64 value)
  (-> (I64 Any) (Bytecode Any))
  (case (.int value)
    (^template [<int> <instruction>]
      [<int>
       (do _.monad
         [_ <instruction>]
         ..wrap_i64)])
    ([+0 _.lconst_0]
     [+1 _.lconst_1])

    (^template [<int> <instruction>]
      [<int>
       (do _.monad
         [_ <instruction>
          _ _.i2l]
         ..wrap_i64)])
    ([-1 _.iconst_m1]
     ... [+0 _.iconst_0]
     ... [+1 _.iconst_1]
     [+2 _.iconst_2]
     [+3 _.iconst_3]
     [+4 _.iconst_4]
     [+5 _.iconst_5])

    value
    (case (signed.s1 value)
      (#try.Success value)
      (do _.monad
        [_ (_.bipush value)
         _ _.i2l]
        ..wrap_i64)

      (#try.Failure _)
      (case (signed.s2 value)
        (#try.Success value)
        (do _.monad
          [_ (_.sipush value)
           _ _.i2l]
          ..wrap_i64)

        (#try.Failure _)
        (do _.monad
          [_ (_.long value)]
          ..wrap_i64)))))

(def: wrap_f64
  (_.invokestatic $Double "valueOf" (type.method [(list type.double) $Double (list)])))

(import: java/lang/Double
  ("static" doubleToRawLongBits "manual" [double] int))

(def: .public (f64 value)
  (-> Frac (Bytecode Any))
  (case value
    (^template [<int> <instruction>]
      [<int>
       (do _.monad
         [_ <instruction>]
         ..wrap_f64)])
    ([+1.0 _.dconst_1])

    (^template [<int> <instruction>]
      [<int>
       (do _.monad
         [_ <instruction>
          _ _.f2d]
         ..wrap_f64)])
    ([+2.0 _.fconst_2])

    (^template [<int> <instruction>]
      [<int>
       (do _.monad
         [_ <instruction>
          _ _.i2d]
         ..wrap_f64)])
    ([-1.0 _.iconst_m1]
     ... [+0.0 _.iconst_0]
     ... [+1.0 _.iconst_1]
     [+2.0 _.iconst_2]
     [+3.0 _.iconst_3]
     [+4.0 _.iconst_4]
     [+5.0 _.iconst_5])
    
    _
    (let [constantI (if (i.= ..d0_bits
                             (java/lang/Double::doubleToRawLongBits (:as java/lang/Double value)))
                      _.dconst_0
                      (_.double value))]
      (do _.monad
        [_ constantI]
        ..wrap_f64))))

(def: .public text
  _.string)
