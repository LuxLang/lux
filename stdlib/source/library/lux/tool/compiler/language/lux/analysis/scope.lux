(.require
 [library
  [lux (.except local with)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" monad)]
    ["[0]" try]
    ["[0]" exception (.only exception:)]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)]
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix monoid)]
     [dictionary
      ["[0]" plist]]]]]]
 ["/" // (.only Environment Operation Phase)
  [//
   [phase
    ["[0]" extension]]
   [///
    ["[0]" phase]
    [reference
     ["[0]" variable (.only Register Variable)]]]]])

(type: Local
  (Bindings Text [Type Register]))

(type: Foreign
  (Bindings Text [Type Variable]))

(def (local? name scope)
  (-> Text Scope Bit)
  (|> scope
      (the [.#locals .#mappings])
      (plist.contains? name)))

(def (local name scope)
  (-> Text Scope (Maybe [Type Variable]))
  (|> scope
      (the [.#locals .#mappings])
      (plist.value name)
      (maybe#each (function (_ [type value])
                    [type {variable.#Local value}]))))

(def (captured? name scope)
  (-> Text Scope Bit)
  (|> scope
      (the [.#captured .#mappings])
      (plist.contains? name)))

(def (captured name scope)
  (-> Text Scope (Maybe [Type Variable]))
  (loop (again [idx 0
                mappings (the [.#captured .#mappings] scope)])
    (case mappings
      {.#Item [_name [_source_type _source_ref]] mappings'}
      (if (text#= name _name)
        {.#Some [_source_type {variable.#Foreign idx}]}
        (again (++ idx) mappings'))

      {.#End}
      {.#None})))

(def (reference? name scope)
  (-> Text Scope Bit)
  (or (local? name scope)
      (captured? name scope)))

(def (reference name scope)
  (-> Text Scope (Maybe [Type Variable]))
  (case (..local name scope)
    {.#Some type}
    {.#Some type}

    _
    (..captured name scope)))

(def .public (variable name)
  (-> Text (Operation (Maybe [Type Variable])))
  (extension.lifted
   (function (_ state)
     (let [[inner outer] (|> state
                             (the .#scopes)
                             (list.split_when (|>> (reference? name))))]
       (case outer
         {.#End}
         {.#Right [state {.#None}]}

         {.#Item top_outer _}
         (let [[ref_type init_ref] (maybe.else (undefined)
                                               (..reference name top_outer))
               [ref inner'] (list#mix (is (-> Scope [Variable (List Scope)] [Variable (List Scope)])
                                          (function (_ scope ref+inner)
                                            [{variable.#Foreign (the [.#captured .#counter] scope)}
                                             {.#Item (revised .#captured
                                                              (is (-> Foreign Foreign)
                                                                  (|>> (revised .#counter ++)
                                                                       (revised .#mappings (plist.has name [ref_type (product.left ref+inner)]))))
                                                              scope)
                                                     (product.right ref+inner)}]))
                                      [init_ref {.#End}]
                                      (list.reversed inner))
               scopes (list#composite inner' outer)]
           {.#Right [(has .#scopes scopes state)
                     {.#Some [ref_type ref]}]})
         )))))

(exception: .public no_scope)
(exception: .public drained)

(def .public (with_local [name type] action)
  (All (_ a) (-> [Text Type] (Operation a) (Operation a)))
  (function (_ [bundle state])
    (case (the .#scopes state)
      {.#Item head tail}
      (let [old_mappings (the [.#locals .#mappings] head)
            new_var_id (the [.#locals .#counter] head)
            new_head (revised .#locals
                              (is (-> Local Local)
                                  (|>> (revised .#counter ++)
                                       (revised .#mappings (plist.has name [type new_var_id]))))
                              head)]
        (case (phase.result' [bundle (has .#scopes {.#Item new_head tail} state)]
                             action)
          {try.#Success [[bundle' state'] output]}
          (case (the .#scopes state')
            {.#Item head' tail'}
            (let [scopes' {.#Item (has .#locals (the .#locals head) head')
                                  tail'}]
              {try.#Success [[bundle' (has .#scopes scopes' state')]
                             output]})

            _
            (exception.except ..drained []))

          {try.#Failure error}
          {try.#Failure error}))

      _
      (exception.except ..no_scope []))))

(def empty
  Scope
  (let [bindings (is Bindings
                     [.#counter 0
                      .#mappings (list)])]
    [.#name     (list)
     .#inner    0
     .#locals   bindings
     .#captured bindings]))

(def .public (reset action)
  (All (_ a) (-> (Operation a) (Operation a)))
  (function (_ [bundle state])
    (case (action [bundle (has .#scopes (list ..empty) state)])
      {try.#Success [[bundle' state'] output]}
      {try.#Success [[bundle' (has .#scopes (the .#scopes state) state')]
                     output]}

      failure
      failure)))

(def .public (with action)
  (All (_ a) (-> (Operation a) (Operation [Scope a])))
  (function (_ [bundle state])
    (case (action [bundle (revised .#scopes (|>> {.#Item ..empty}) state)])
      {try.#Success [[bundle' state'] output]}
      (case (the .#scopes state')
        {.#Item head tail}
        {try.#Success [[bundle' (has .#scopes tail state')]
                       [head output]]}

        {.#End}
        (exception.except ..drained []))

      {try.#Failure error}
      {try.#Failure error})))

(def .public next
  (Operation Register)
  (extension.lifted
   (function (_ state)
     (case (the .#scopes state)
       {.#Item top _}
       {try.#Success [state (the [.#locals .#counter] top)]}

       {.#End}
       (exception.except ..no_scope [])))))

(def .public environment
  (-> Scope (Environment Variable))
  (|>> (the [.#captured .#mappings])
       (list#each (function (_ [_ [_ ref]]) ref))))
