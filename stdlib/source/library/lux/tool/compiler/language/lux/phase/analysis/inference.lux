(.module:
  [library
   [lux #*
    [abstract
     [monad (#+ do)]]
    [control
     ["." exception (#+ exception:)]]
    [data
     ["." maybe]
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor)]]]
    [math
     [number
      ["n" nat]]]
    ["." type
     ["." check]]
    ["." meta]]]
  ["." // #_
   ["#." type]
   ["/#" // #_
    ["#." extension]
    [//
     ["/" analysis (#+ Tag Analysis Operation Phase)]
     [///
      ["#" phase ("#\." monad)]
      [meta
       [archive (#+ Archive)]]]]]])

(exception: .public (variant_tag_out_of_bounds {size Nat} {tag Tag} {type Type})
  (exception.report
   ["Tag" (%.nat tag)]
   ["Variant size" (%.int (.int size))]
   ["Variant type" (%.type type)]))

(exception: .public (cannot_infer {type Type} {args (List Code)})
  (exception.report
   ["Type" (%.type type)]
   ["Arguments" (exception.listing %.code args)]))

(exception: .public (cannot_infer_argument {inferred Type} {argument Code})
  (exception.report
   ["Inferred Type" (%.type inferred)]
   ["Argument" (%.code argument)]))

(exception: .public (smaller_variant_than_expected {expected Nat} {actual Nat})
  (exception.report
   ["Expected" (%.int (.int expected))]
   ["Actual" (%.int (.int actual))]))

(template [<name>]
  [(exception: .public (<name> {type Type})
     (%.type type))]

  [not_a_variant_type]
  [not_a_record_type]
  [invalid_type_application]
  )

(def: (replace parameter_idx replacement type)
  (-> Nat Type Type Type)
  (case type
    (#.Primitive name params)
    (#.Primitive name (list\map (replace parameter_idx replacement) params))

    (^template [<tag>]
      [(<tag> left right)
       (<tag> (replace parameter_idx replacement left)
              (replace parameter_idx replacement right))])
    ([#.Sum]
     [#.Product]
     [#.Function]
     [#.Apply])
    
    (#.Parameter idx)
    (if (n.= parameter_idx idx)
      replacement
      type)

    (^template [<tag>]
      [(<tag> env quantified)
       (<tag> (list\map (replace parameter_idx replacement) env)
              (replace (n.+ 2 parameter_idx) replacement quantified))])
    ([#.UnivQ]
     [#.ExQ])
    
    _
    type))

(def: (named_type location id)
  (-> Location Nat Type)
  (let [name (format "{New Type " (%.location location) " " (%.nat id) "}")]
    (#.Primitive name (list))))

(def: new_named_type
  (Operation Type)
  (do ///.monad
    [location (///extension.lift meta.location)
     [ex_id _] (//type.with_env check.existential)]
    (in (named_type location ex_id))))

## Type-inference works by applying some (potentially quantified) type
## to a sequence of values.
## Function types are used for this, although inference is not always
## done for function application (alternative uses may be records and
## tagged variants).
## But, so long as the type being used for the inference can be treated
## as a function type, this method of inference should work.
(def: .public (general archive analyse inferT args)
  (-> Archive Phase Type (List Code) (Operation [Type (List Analysis)]))
  (case args
    #.End
    (do ///.monad
      [_ (//type.infer inferT)]
      (in [inferT (list)]))
    
    (#.Item argC args')
    (case inferT
      (#.Named name unnamedT)
      (general archive analyse unnamedT args)

      (#.UnivQ _)
      (do ///.monad
        [[var_id varT] (//type.with_env check.var)]
        (general archive analyse (maybe.assume (type.applied (list varT) inferT)) args))

      (#.ExQ _)
      (do {! ///.monad}
        [[var_id varT] (//type.with_env check.var)
         output (general archive analyse
                         (maybe.assume (type.applied (list varT) inferT))
                         args)
         bound? (//type.with_env
                  (check.bound? var_id))
         _ (if bound?
             (in [])
             (do !
               [newT new_named_type]
               (//type.with_env
                 (check.check varT newT))))]
        (in output))

      (#.Apply inputT transT)
      (case (type.applied (list inputT) transT)
        (#.Some outputT)
        (general archive analyse outputT args)

        #.None
        (/.except ..invalid_type_application inferT))

      ## Arguments are inferred back-to-front because, by convention,
      ## Lux functions take the most important arguments *last*, which
      ## means that the most information for doing proper inference is
      ## located in the last arguments to a function call.
      ## By inferring back-to-front, a lot of type-annotations can be
      ## avoided in Lux code, since the inference algorithm can piece
      ## things together more easily.
      (#.Function inputT outputT)
      (do ///.monad
        [[outputT' args'A] (general archive analyse outputT args')
         argA (<| (/.with_stack ..cannot_infer_argument [inputT argC])
                  (//type.with_type inputT)
                  (analyse archive argC))]
        (in [outputT' (list& argA args'A)]))

      (#.Var infer_id)
      (do ///.monad
        [?inferT' (//type.with_env (check.read infer_id))]
        (case ?inferT'
          (#.Some inferT')
          (general archive analyse inferT' args)

          _
          (/.except ..cannot_infer [inferT args])))

      _
      (/.except ..cannot_infer [inferT args]))
    ))

(def: (substitute_bound target sub)
  (-> Nat Type Type Type)
  (function (recur base)
    (case base
      (#.Primitive name parameters)
      (#.Primitive name (list\map recur parameters))

      (^template [<tag>]
        [(<tag> left right)
         (<tag> (recur left) (recur right))])
      ([#.Sum] [#.Product] [#.Function] [#.Apply])
      
      (#.Parameter index)
      (if (n.= target index)
        sub
        base)

      (^template [<tag>]
        [(<tag> environment quantified)
         (<tag> (list\map recur environment) quantified)])
      ([#.UnivQ] [#.ExQ])

      _
      base)))

## Turns a record type into the kind of function type suitable for inference.
(def: (record' target originalT inferT)
  (-> Nat Type Type (Operation Type))
  (case inferT
    (#.Named name unnamedT)
    (record' target originalT unnamedT)

    (^template [<tag>]
      [(<tag> env bodyT)
       (do ///.monad
         [bodyT+ (record' (n.+ 2 target) originalT bodyT)]
         (in (<tag> env bodyT+)))])
    ([#.UnivQ]
     [#.ExQ])

    (#.Apply inputT funcT)
    (case (type.applied (list inputT) funcT)
      (#.Some outputT)
      (record' target originalT outputT)

      #.None
      (/.except ..invalid_type_application inferT))

    (#.Product _)
    (///\in (|> inferT
                (type.function (type.flat_tuple inferT))
                (substitute_bound target originalT)))

    _
    (/.except ..not_a_record_type inferT)))

(def: .public (record inferT)
  (-> Type (Operation Type))
  (record' (n.- 2 0) inferT inferT))

## Turns a variant type into the kind of function type suitable for inference.
(def: .public (variant tag expected_size inferT)
  (-> Nat Nat Type (Operation Type))
  (loop [depth 0
         currentT inferT]
    (case currentT
      (#.Named name unnamedT)
      (do ///.monad
        [unnamedT+ (recur depth unnamedT)]
        (in unnamedT+))

      (^template [<tag>]
        [(<tag> env bodyT)
         (do ///.monad
           [bodyT+ (recur (inc depth) bodyT)]
           (in (<tag> env bodyT+)))])
      ([#.UnivQ]
       [#.ExQ])

      (#.Sum _)
      (let [cases (type.flat_variant currentT)
            actual_size (list.size cases)
            boundary (dec expected_size)]
        (cond (or (n.= expected_size actual_size)
                  (and (n.> expected_size actual_size)
                       (n.< boundary tag)))
              (case (list.item tag cases)
                (#.Some caseT)
                (///\in (if (n.= 0 depth)
                          (type.function (list caseT) currentT)
                          (let [replace' (replace (|> depth dec (n.* 2)) inferT)]
                            (type.function (list (replace' caseT))
                              (replace' currentT)))))

                #.None
                (/.except ..variant_tag_out_of_bounds [expected_size tag inferT]))
              
              (n.< expected_size actual_size)
              (/.except ..smaller_variant_than_expected [expected_size actual_size])

              (n.= boundary tag)
              (let [caseT (type.variant (list.drop boundary cases))]
                (///\in (if (n.= 0 depth)
                          (type.function (list caseT) currentT)
                          (let [replace' (replace (|> depth dec (n.* 2)) inferT)]
                            (type.function (list (replace' caseT))
                              (replace' currentT))))))
              
              ## else
              (/.except ..variant_tag_out_of_bounds [expected_size tag inferT])))

      (#.Apply inputT funcT)
      (case (type.applied (list inputT) funcT)
        (#.Some outputT)
        (variant tag expected_size outputT)

        #.None
        (/.except ..invalid_type_application inferT))

      _
      (/.except ..not_a_variant_type inferT))))
