(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" function]
    ["[0]" try]]
   [data
    ["[0]" text (.only)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list]]]
   [math
    [number
     ["n" nat]]]
   ["[0]" meta (.only)
    [macro
     ["^" pattern]]
    [type
     ["[0]" check (.only Check)]]]]]
 ["/" // (.only Operation)
  [//
   [phase
    ["[0]" extension]]
   [///
    ["[0]" phase]]]])

(def .public (check action)
  (All (_ a) (-> (Check a) (Operation a)))
  (function (_ (^.let stateE [bundle state]))
    (case (action (the .#type_context state))
      {try.#Success [context' output]}
      {try.#Success [[bundle (has .#type_context context' state)]
                     output]}

      {try.#Failure error}
      ((/.failure error) stateE))))

(def prefix
  (format (%.symbol (symbol ..type)) "#"))

(def .public (existential? type)
  (-> Type Bit)
  (case type
    {.#Primitive actual {.#End}}
    (text.starts_with? ..prefix actual)

    _
    false))

(def (existential' module id)
  (-> Text Nat Type)
  {.#Primitive (format ..prefix module "#" (%.nat id)) (list)})

(def .public existential
  (Operation Type)
  (do phase.monad
    [module (extension.lifted meta.current_module_name)
     id (extension.lifted meta.seed)]
    (in (..existential' module id))))

(def .public (expecting expected)
  (All (_ a) (-> Type (Operation a) (Operation a)))
  (extension.localized (the .#expected) (has .#expected)
                       (function.constant {.#Some expected})))

(def .public fresh
  (All (_ a) (-> (Operation a) (Operation a)))
  (extension.localized (the .#type_context) (has .#type_context)
                       (function.constant check.fresh_context)))

(def .public (inference actualT)
  (-> Type (Operation Any))
  (do phase.monad
    [module (extension.lifted meta.current_module_name)
     expectedT (extension.lifted meta.expected_type)]
    (..check (check.check expectedT actualT)
             ... (do [! check.monad]
             ...   [pre check.context
             ...    it (check.check expectedT actualT)
             ...    post check.context
             ...    .let [pre#var_counter (the .#var_counter pre)]]
             ...   (if (n.< (the .#var_counter post)
             ...            pre#var_counter)
             ...     (do !
             ...       [.let [new! (is (-> [Nat (Maybe Type)] (Maybe Nat))
             ...                      (function (_ [id _])
             ...                        (if (n.< id pre#var_counter)
             ...                          {.#Some id}
             ...                          {.#None})))
             ...              new_vars (|> post
             ...                           (the .#var_bindings)
             ...                           (list.all new!))]
             ...        _ (monad.each ! (function (_ @new)
             ...                          (do !
             ...                            [:new: (check.try (check.identity new_vars @new))]
             ...                            (case :new:
             ...                              {try.#Success :new:}
             ...                              (in :new:)
             
             ...                              {try.#Failure error}
             ...                              (do !
             ...                                [[id _] check.existential
             ...                                 .let [:new: (..existential' module id)]
             ...                                 _ (check.bind :new: @new)]
             ...                                (in :new:)))))
             ...                      new_vars)
             ...        expectedT' (check.clean new_vars expectedT)
             ...        _ (check.with pre)]
             ...       (check.check expectedT' actualT))
             ...     (in it)))
             )))

(def .public (with_var it)
  (All (_ a)
    (-> (-> [check.Var Type] (Operation a))
        (Operation a)))
  (do phase.monad
    [@it,:it: (..check check.var)
     it (it @it,:it:)
     .let [[@it :it:] @it,:it:]
     _ (..check (check.forget! @it))]
    (in it)))

(def .public (inferring action)
  (All (_ a) (-> (Operation a) (Operation [Type a])))
  (<| ..with_var
      (function (_ [@it :it:]))
      (do phase.monad
        [it (..expecting :it: action)
         :it: (..check (check.identity (list) @it))]
        (in [:it: it]))))
