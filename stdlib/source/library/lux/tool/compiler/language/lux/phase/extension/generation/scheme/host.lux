(.module:
  [library
   [lux #*
    [abstract
     ["." monad (#+ do)]]
    [control
     ["." function]
     ["<>" parser
      ["<s>" synthesis (#+ Parser)]]]
    [data
     [collection
      ["." dictionary]
      ["." list]]
     [text
      ["%" format (#+ format)]]]
    [target
     ["_" scheme (#+ Var Expression)]]]]
  ["." // #_
   ["#." common (#+ custom)]
   ["//#" /// #_
    ["/" bundle]
    ["/#" // #_
     ["." extension]
     [generation
      [extension (#+ Nullary Unary Binary Trinary
                     nullary unary binary trinary)]
      ["." reference]
      ["//" scheme #_
       ["#." runtime (#+ Operation Phase Handler Bundle
                         with_vars)]]]
     ["/#" // #_
      ["." generation]
      ["//#" /// #_
       ["#." phase]]]]]])

(def: (array::new size)
  (Unary Expression)
  (_.make-vector/2 size _.nil))

(def: array::length
  (Unary Expression)
  _.vector-length/1)

(def: (array::read [indexG arrayG])
  (Binary Expression)
  (_.vector-ref/2 arrayG indexG))

(def: (array::write [indexG valueG arrayG])
  (Trinary Expression)
  (//runtime.array//write indexG valueG arrayG))

(def: (array::delete [indexG arrayG])
  (Binary Expression)
  (//runtime.array//write indexG _.nil arrayG))

(def: array
  Bundle
  (<| (/.prefix "array")
      (|> /.empty
          (/.install "new" (unary array::new))
          (/.install "length" (unary array::length))
          (/.install "read" (binary array::read))
          (/.install "write" (trinary array::write))
          (/.install "delete" (binary array::delete))
          )))

(template [<!> <?> <unit>]
  [(def: <!> (Nullary Expression) (function.constant <unit>))
   (def: <?> (Unary Expression) (_.eq?/2 <unit>))]

  [object::nil object::nil? _.nil]
  )

(def: object
  Bundle
  (<| (/.prefix "object")
      (|> /.empty
          (/.install "nil" (nullary object::nil))
          (/.install "nil?" (unary object::nil?))
          )))

(def: scheme::constant
  (custom
   [<s>.text
    (function (_ extension phase archive name)
      (do ////////phase.monad
        []
        (in (_.var name))))]))

(def: scheme::apply
  (custom
   [($_ <>.and <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [abstractionS inputsS])
      (do {! ////////phase.monad}
        [abstractionG (phase archive abstractionS)
         inputsG (monad.map ! (phase archive) inputsS)]
        (in (_.apply/* inputsG abstractionG))))]))

(def: #export bundle
  Bundle
  (<| (/.prefix "scheme")
      (|> /.empty
          (dictionary.merge ..array)
          (dictionary.merge ..object)

          (/.install "constant" scheme::constant)
          (/.install "apply" scheme::apply)
          (/.install "script universe" (nullary (function.constant (_.bool reference.universe))))
          )))
