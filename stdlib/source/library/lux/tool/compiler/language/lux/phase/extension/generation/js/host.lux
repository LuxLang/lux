(.module:
  [library
   [lux "*"
    [abstract
     ["[0]" monad {"+" do}]]
    [control
     ["[0]" function]
     ["<>" parser
      ["<s>" synthesis {"+" Parser}]]]
    [data
     [collection
      ["[0]" dictionary]
      ["[0]" list]]]
    [target
     ["_" js {"+" Var Expression}]]]]
  ["[0]" // "_"
   ["[1][0]" common {"+" custom}]
   ["//[1]" /// "_"
    ["/" bundle]
    ["/[1]" // "_"
     ["[0]" extension]
     [generation
      [extension {"+" Nullary Unary Binary Trinary
                  nullary unary binary trinary}]
      ["//" js "_"
       ["[1][0]" runtime {"+" Operation Phase Handler Bundle
                          with_vars}]]]
     ["/[1]" // "_"
      ["[0]" generation]
      ["//[1]" /// "_"
       ["[1][0]" phase]]]]]])

(def: array::new
  (Unary Expression)
  (|>> (_.the //runtime.i64_low_field) list (_.new (_.var "Array"))))

(def: array::length
  (Unary Expression)
  (|>> (_.the "length") //runtime.i64//of_number))

(def: (array::read [indexG arrayG])
  (Binary Expression)
  (_.at (_.the //runtime.i64_low_field indexG)
        arrayG))

(def: (array::write [indexG valueG arrayG])
  (Trinary Expression)
  (//runtime.array//write indexG valueG arrayG))

(def: (array::delete [indexG arrayG])
  (Binary Expression)
  (//runtime.array//delete indexG arrayG))

(def: array
  Bundle
  (<| (/.prefix "array")
      (|> /.empty
          (/.install "new" (unary array::new))
          (/.install "length" (unary array::length))
          (/.install "read" (binary array::read))
          (/.install "write" (trinary array::write))
          (/.install "delete" (binary array::delete))
          )))

(def: object::new
  (custom
   [($_ <>.and <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [constructorS inputsS])
      (do [! ////////phase.monad]
        [constructorG (phase archive constructorS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.new constructorG inputsG))))]))

(def: object::get
  Handler
  (custom
   [($_ <>.and <s>.text <s>.any)
    (function (_ extension phase archive [fieldS objectS])
      (do ////////phase.monad
        [objectG (phase archive objectS)]
        (in (_.the fieldS objectG))))]))

(def: object::do
  Handler
  (custom
   [($_ <>.and <s>.text <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [methodS objectS inputsS])
      (do [! ////////phase.monad]
        [objectG (phase archive objectS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.do methodS inputsG objectG))))]))

(template [<!> <?> <unit>]
  [(def: <!> (Nullary Expression) (function.constant <unit>))
   (def: <?> (Unary Expression) (_.= <unit>))]

  [object::null object::null? _.null]
  [object::undefined object::undefined? _.undefined]
  )

(def: object
  Bundle
  (<| (/.prefix "object")
      (|> /.empty
          (/.install "new" object::new)
          (/.install "get" object::get)
          (/.install "do" object::do)
          (/.install "null" (nullary object::null))
          (/.install "null?" (unary object::null?))
          (/.install "undefined" (nullary object::undefined))
          (/.install "undefined?" (unary object::undefined?))
          )))

(def: js::constant
  (custom
   [<s>.text
    (function (_ extension phase archive name)
      (# ////////phase.monad in (_.var name)))]))

(def: js::apply
  (custom
   [($_ <>.and <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [abstractionS inputsS])
      (do [! ////////phase.monad]
        [abstractionG (phase archive abstractionS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.apply/* abstractionG inputsG))))]))

(def: js::function
  (custom
   [($_ <>.and <s>.i64 <s>.any)
    (function (_ extension phase archive [arity abstractionS])
      (do [! ////////phase.monad]
        [abstractionG (phase archive abstractionS)
         .let [variable (: (-> Text (Operation Var))
                           (|>> generation.identifier
                                (# ! each _.var)))]
         g!inputs (monad.each ! (function (_ _) (variable "input"))
                              (list.repeated (.nat arity) []))
         g!abstraction (variable "abstraction")]
        (in (_.closure g!inputs
                       ($_ _.then
                           (_.define g!abstraction abstractionG)
                           (_.return (case (.nat arity)
                                       0 (_.apply/1 g!abstraction //runtime.unit)
                                       1 (_.apply/* g!abstraction g!inputs)
                                       _ (_.apply/1 g!abstraction (_.array g!inputs)))))))))]))

(def: .public bundle
  Bundle
  (<| (/.prefix "js")
      (|> /.empty
          (dictionary.merged ..array)
          (dictionary.merged ..object)

          (/.install "constant" js::constant)
          (/.install "apply" js::apply)
          (/.install "type-of" (unary _.type_of))
          (/.install "function" js::function)
          )))
