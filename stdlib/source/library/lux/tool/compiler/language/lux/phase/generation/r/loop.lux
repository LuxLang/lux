(.module:
  [library
   [lux (#- Scope)
    [abstract
     ["." monad (#+ do)]]
    [data
     ["." product]
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor)]
      ["." set (#+ Set)]]]
    [math
     [number
      ["n" nat]]]
    [target
     ["_" r]]]]
  ["." // #_
   [runtime (#+ Operation Phase Generator)]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     [synthesis
      ["." case]]
     ["/#" // #_
      ["."synthesis (#+ Scope Synthesis)]
      ["#." generation]
      ["//#" /// #_
       ["#." phase]
       [meta
        [archive (#+ Archive)]]
       [reference
        [variable (#+ Register)]]]]]]])

(def: .public (scope expression archive [offset initsS+ bodyS])
  (Generator (Scope Synthesis))
  (case initsS+
    ... function/false/non-independent loop
    #.End
    (expression archive bodyS)

    ... true loop
    _
    (do {! ///////phase.monad}
      [$scope (\ ! each _.var (/////generation.identifier "loop_scope"))
       initsO+ (monad.each ! (expression archive) initsS+)
       bodyO (/////generation.with_anchor $scope
               (expression archive bodyS))]
      (in (_.block
           ($_ _.then
               (_.set! $scope
                       (_.function (|> initsS+
                                       list.size
                                       list.indices
                                       (list\each (|>> (n.+ offset) //case.register)))
                         bodyO))
               (_.apply initsO+ $scope)))))))

(def: .public (recur expression archive argsS+)
  (Generator (List Synthesis))
  (do {! ///////phase.monad}
    [$scope /////generation.anchor
     argsO+ (monad.each ! (expression archive) argsS+)]
    (in (_.apply argsO+ $scope))))
