(.using
  [library
   [lux {"-" Scope}
    [abstract
     ["[0]" monad {"+" do}]]
    [data
     ["[0]" product]
     [text
      ["%" format {"+" format}]]
     [collection
      ["[0]" list ("[1]#[0]" functor mix)]
      ["[0]" set]]]
    [math
     [number
      ["n" nat]]]
    [target
     ["_" python {"+" Expression SVar Statement}]]]]
  ["[0]" // "_"
   [runtime {"+" Operation Phase Generator Phase! Generator!}]
   ["[1][0]" case]
   ["/[1]" // "_"
    ["[1][0]" reference]
    ["/[1]" // "_"
     [synthesis
      ["[0]" case]]
     ["/[1]" // "_"
      ["[0]" synthesis {"+" Scope Synthesis}]
      ["[1][0]" generation]
      ["//[1]" /// "_"
       ["[1][0]" phase]
       [meta
        [archive
         ["[0]" dependency]]]
       [reference
        ["[1][0]" variable {"+" Register}]]]]]]])

(def: (setup offset bindings body)
  (-> Register (List (Expression Any)) (Statement Any) (Statement Any))
  (|> bindings
      list.enumeration
      (list#each (function (_ [register value])
                   (_.set (list (//case.register (n.+ offset register)))
                          value)))
      list.reversed
      (list#mix _.then body)))

(def: .public (set_scope body!)
  (-> (Statement Any) (Statement Any))
  (_.while (_.bool true)
           body!
           {.#None}))

(def: .public (scope! statement expression archive [start initsS+ bodyS])
  (Generator! (Scope Synthesis))
  (case initsS+
    ... function/false/non-independent loop
    {.#End}
    (statement expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [initsO+ (monad.each ! (expression archive) initsS+)
       body! (/////generation.with_anchor start
               (statement expression archive bodyS))]
      (in (<| (..setup start initsO+)
              ..set_scope
              body!)))))

(def: .public (scope statement expression archive [start initsS+ bodyS])
  (-> Phase! (Generator (Scope Synthesis)))
  (case initsS+
    ... function/false/non-independent loop
    {.#End}
    (expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [dependencies (dependency.dependencies archive bodyS)
       initsO+ (monad.each ! (expression archive) initsS+)
       [[loop_module loop_artifact] body!] (/////generation.with_new_context archive dependencies
                                             (/////generation.with_anchor start
                                               (statement expression archive bodyS)))
       .let [@loop (_.var (///reference.artifact [loop_module loop_artifact]))
             locals (|> initsS+
                        list.enumeration
                        (list#each (|>> product.left (n.+ start) //case.register)))
             actual_loop (<| (_.def @loop locals)
                             ..set_scope
                             body!)
             [directive instantiation] (: [(Statement Any) (Expression Any)]
                                          (case (|> (synthesis.path/then bodyS)
                                                    //case.dependencies
                                                    (set.of_list _.hash)
                                                    (set.difference (set.of_list _.hash locals))
                                                    set.list)
                                            {.#End}
                                            [actual_loop
                                             @loop]

                                            foreigns
                                            [(_.def @loop foreigns
                                                    ($_ _.then
                                                        actual_loop
                                                        (_.return @loop)
                                                        ))
                                             (_.apply/* @loop foreigns)]))]
       _ (/////generation.execute! directive)
       _ (/////generation.save! loop_artifact {.#None} directive)]
      (in (_.apply/* instantiation initsO+)))))

(def: .public (again! statement expression archive argsS+)
  (Generator! (List Synthesis))
  (do [! ///////phase.monad]
    [offset /////generation.anchor
     @temp (//case.symbol "lux_again_values")
     argsO+ (monad.each ! (expression archive) argsS+)
     .let [re_binds (|> argsO+
                        list.enumeration
                        (list#each (function (_ [idx _])
                                     (_.item (_.int (.int idx)) @temp))))]]
    (in ($_ _.then
            (_.set (list @temp) (_.list argsO+))
            (..setup offset re_binds
                     _.continue)))))
