(.using
 [library
  [lux (.except Scope)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    [text
     ["%" format (.only format)]]
    [collection
     ["[0]" list (.open: "[1]#[0]" functor)]]]
   [math
    [number
     ["n" nat]]]
   [target
    ["_" common_lisp (.only Expression)]]]]
 ["[0]" //
  [runtime (.only Operation Phase Generator)]
  ["[1][0]" case]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    [synthesis
     ["[0]" case]]
    ["/[1]" //
     ["[0]"synthesis (.only Scope Synthesis)]
     ["[1][0]" generation]
     ["//[1]" ///
      ["[1][0]" phase]
      [meta
       [archive (.only Archive)]]
      [reference
       [variable (.only Register)]]]]]]])

(def: .public (scope expression archive [start initsS+ bodyS])
  (Generator (Scope Synthesis))
  (case initsS+
    ... function/false/non-independent loop
    {.#End}
    (expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [@scope (# ! each (|>> %.nat (format "loop_scope") _.tag) /////generation.next)
       @output (# ! each (|>> %.nat (format "loop_output") _.var) /////generation.next)
       initsG+ (monad.each ! (expression archive) initsS+)
       bodyG (/////generation.with_anchor [@scope start]
               (expression archive bodyS))]
      ... TODO: There is a bug in the way the variables are updated. Do a _.multiple_value_setq instead.
      (in (_.let (|> initsG+
                     list.enumeration
                     (list#each (function (_ [idx init])
                                  [(|> idx (n.+ start) //case.register)
                                   init]))
                     (partial_list [@output _.nil]))
            (list (_.tagbody (list @scope
                                   (_.setq @output bodyG)))
                  @output))))))

(def: .public (again expression archive argsS+)
  (Generator (List Synthesis))
  (do [! ///////phase.monad]
    [[tag offset] /////generation.anchor
     argsO+ (monad.each ! (expression archive) argsS+)
     .let [bindings (|> argsO+
                        list.enumeration
                        (list#each (|>> product.left (n.+ offset) //case.register))
                        _.args)]]
    (in (_.progn (list (_.multiple_value_setq bindings (_.values/* argsO+))
                       (_.go tag))))))
