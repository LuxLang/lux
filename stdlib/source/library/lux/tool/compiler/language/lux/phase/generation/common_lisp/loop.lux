(.module:
  [library
   [lux (#- Scope)
    [abstract
     ["." monad (#+ do)]]
    [data
     ["." product]
     [text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor)]]]
    [math
     [number
      ["n" nat]]]
    [target
     ["_" common_lisp (#+ Expression)]]]]
  ["." // #_
   [runtime (#+ Operation Phase Generator)]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     [synthesis
      ["." case]]
     ["/#" // #_
      ["."synthesis (#+ Scope Synthesis)]
      ["#." generation]
      ["//#" /// #_
       ["#." phase]
       [meta
        [archive (#+ Archive)]]
       [reference
        [variable (#+ Register)]]]]]]])

(def: #export (scope expression archive [start initsS+ bodyS])
  (Generator (Scope Synthesis))
  (case initsS+
    ## function/false/non-independent loop
    #.End
    (expression archive bodyS)

    ## true loop
    _
    (do {! ///////phase.monad}
      [@scope (\ ! map (|>> %.nat (format "loop_scope") _.tag) /////generation.next)
       @output (\ ! map (|>> %.nat (format "loop_output") _.var) /////generation.next)
       initsG+ (monad.map ! (expression archive) initsS+)
       bodyG (/////generation.with_anchor [@scope start]
               (expression archive bodyS))]
      (in (_.let (|> initsG+
                     list.enumeration
                     (list\map (function (_ [idx init])
                                 [(|> idx (n.+ start) //case.register)
                                  init]))
                     (list& [@output _.nil]))
            (list (_.tagbody (list @scope
                                   (_.setq @output bodyG)))
                  @output))))))

(def: #export (recur expression archive argsS+)
  (Generator (List Synthesis))
  (do {! ///////phase.monad}
    [[tag offset] /////generation.anchor
     argsO+ (monad.map ! (expression archive) argsS+)
     .let [bindings (|> argsO+
                        list.enumeration
                        (list\map (|>> product.left (n.+ offset) //case.register))
                        _.args)]]
    (in (_.progn (list (_.multiple_value_setq bindings (_.values/* argsO+))
                       (_.go tag))))))
