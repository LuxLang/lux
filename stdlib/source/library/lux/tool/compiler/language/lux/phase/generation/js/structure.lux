(.module:
  [library
   [lux {"-" [Variant Tuple]}
    [abstract
     ["." monad {"+" [do]}]]
    [target
     ["_" js {"+" [Expression]}]]]]
  ["." // "_"
   ["#." runtime {"+" [Operation Phase Generator]}]
   ["#." primitive]
   ["///#" //// "_"
    [analysis {"+" [Variant Tuple]}]
    ["#." synthesis {"+" [Synthesis]}]
    ["//#" ///
     ["#." phase ("#\." monad)]]]])

(def: .public (tuple generate archive elemsS+)
  (Generator (Tuple Synthesis))
  (case elemsS+
    #.End
    (///////phase\in //runtime.unit)

    (#.Item singletonS #.End)
    (generate archive singletonS)

    _
    (do [! ///////phase.monad]
      [elemsT+ (monad.each ! (generate archive) elemsS+)]
      (in (_.array elemsT+)))))

(def: .public (variant generate archive [lefts right? valueS])
  (Generator (Variant Synthesis))
  (let [tag (if right?
              (++ lefts)
              lefts)]
    (///////phase\each (//runtime.variant (_.i32 (.int tag))
                                          (//runtime.flag right?))
                       (generate archive valueS))))
