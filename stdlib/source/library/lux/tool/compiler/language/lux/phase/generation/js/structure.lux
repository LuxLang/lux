(.using
 [library
  [lux (.except Variant Tuple)
   [abstract
    ["[0]" monad (.only do)]]
   [target
    ["_" js (.only Expression)]]]]
 ["[0]" // "_"
  ["[1][0]" runtime (.only Operation Phase Generator)]
  ["[1][0]" primitive]
  ["///[1]" //// "_"
   ["[1][0]" synthesis (.only Synthesis)]
   [analysis
    [complex (.only Variant Tuple)]]
   ["//[1]" ///
    ["[1][0]" phase ("[1]#[0]" monad)]]]])

(def: .public (tuple generate archive elemsS+)
  (Generator (Tuple Synthesis))
  (case elemsS+
    {.#End}
    (///////phase#in //runtime.unit)

    {.#Item singletonS {.#End}}
    (generate archive singletonS)

    _
    (do [! ///////phase.monad]
      [elemsT+ (monad.each ! (generate archive) elemsS+)]
      (in (_.array elemsT+)))))

(def: .public (variant generate archive [lefts right? valueS])
  (Generator (Variant Synthesis))
  (///////phase#each (//runtime.variant (_.i32 (.int lefts))
                                        (//runtime.flag right?))
                     (generate archive valueS)))
