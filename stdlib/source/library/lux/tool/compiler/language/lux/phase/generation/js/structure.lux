(.using
  [library
   [lux {"-" Variant Tuple}
    [abstract
     ["[0]" monad {"+" do}]]
    [target
     ["_" js {"+" Expression}]]]]
  ["[0]" // "_"
   ["[1][0]" runtime {"+" Operation Phase Generator}]
   ["[1][0]" primitive]
   ["///[1]" //// "_"
    [analysis {"+" Variant Tuple}]
    ["[1][0]" synthesis {"+" Synthesis}]
    ["//[1]" ///
     ["[1][0]" phase ("[1]#[0]" monad)]]]])

(def: .public (tuple generate archive elemsS+)
  (Generator (Tuple Synthesis))
  (case elemsS+
    {.#End}
    (///////phase#in //runtime.unit)

    {.#Item singletonS {.#End}}
    (generate archive singletonS)

    _
    (do [! ///////phase.monad]
      [elemsT+ (monad.each ! (generate archive) elemsS+)]
      (in (_.array elemsT+)))))

(def: .public (variant generate archive [lefts right? valueS])
  (Generator (Variant Synthesis))
  (let [tag (if right?
              (++ lefts)
              lefts)]
    (///////phase#each (//runtime.variant (_.i32 (.int tag))
                                          (//runtime.flag right?))
                       (generate archive valueS))))
