(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" exception (.only exception)]]
   [data
    [text
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list]]]
   [macro
    ["^" pattern]]
   [math
    [number
     ["n" nat]]]
   ["[0]" meta (.only)
    ["[0]" code]
    ["[0]" location]]]]
 ["[0]" /
  ["[1][0]" simple]
  ["[1][0]" complex]
  ["[1][0]" reference]
  ["[1][0]" case]
  ["[1][0]" function]
  ["/[1]" //
   ["[1][0]" extension]
   ["/[1]" //
    ["/" analysis (.only Analysis Operation Phase)
     ["[1][0]" macro (.only Expander)]
     ["[1][0]" type]]
    [///
     ["//" phase]
     ["[0]" reference]
     [meta
      [archive (.only Archive)]]]]]])

(exception .public (invalid [syntax Code])
  (exception.report
   "Syntax" (%.code syntax)))

(def variant_analysis
  (template (_ analysis archive tag values)
    ... (-> Phase Archive Symbol (List Code) (Operation Analysis))
    [(case values
       (pattern (list value))
       (/complex.variant analysis tag archive value)

       _
       (/complex.variant analysis tag archive (code.tuple values)))]))

(def sum_analysis
  (template (_ analysis archive lefts right? values)
    ... (-> Phase Archive Nat Bit (List Code) (Operation Analysis))
    [(case values
       (pattern (list value))
       (/complex.sum analysis lefts right? archive value)

       _
       (/complex.sum analysis lefts right? archive (code.tuple values)))]))

(def case_analysis
  (template (_ analysis archive input branches code)
    ... (-> Phase Archive Code (List Code) Code (Operation Analysis))
    [(case (list.pairs branches)
       {.#Some branches}
       (/case.case analysis branches archive input)

       {.#None}
       (//.except ..invalid [code]))]))

(def apply_analysis
  (template (_ expander analysis archive functionC argsC+)
    ... (-> Expander Phase Archive Code (List Code) (Operation Analysis))
    [(do [! //.monad]
       [[functionT functionA] (/type.inferring
                               (analysis archive functionC))]
       (case functionA
         (pattern (/.constant def_name))
         (do !
           [?macro (//extension.lifted (meta.macro def_name))]
           (case ?macro
             {.#Some macro}
             (do !
               [expansion (//extension.lifted (/macro.single_expansion expander def_name macro argsC+))]
               (analysis archive expansion))

             _
             (/function.apply analysis argsC+ functionT functionA archive functionC)))

         _
         (/function.apply analysis argsC+ functionT functionA archive functionC)))]))

(def .public (phase expander)
  (-> Expander Phase)
  (function (analysis archive code)
    (<| (let [[location code'] code])
        ... The location must be set in the state for the sake
        ... of having useful error messages.
        (/.with_location location)
        (case code
          (^.with_template [<tag> <analyser>]
            [[_ {<tag> value}]
             (<analyser> value)])
          ([.#Symbol /reference.reference]
           [.#Text /simple.text]
           [.#Nat  /simple.nat]
           [.#Bit  /simple.bit]
           [.#Frac /simple.frac]
           [.#Int  /simple.int]
           [.#Rev  /simple.rev])

          (^.` [(~+ elems)])
          (/complex.record analysis archive elems)

          (^.` {(~ [_ {.#Symbol tag}]) (~+ values)})
          (..variant_analysis analysis archive tag values)

          (^.` ({(~+ branches)} (~ input)))
          (..case_analysis analysis archive input branches code)

          (^.` ([(~ [_ {.#Symbol ["" function_name]}]) (~ [_ {.#Symbol ["" arg_name]}])] (~ body)))
          (/function.function analysis function_name arg_name archive body)

          (^.` ((~ [_ {.#Text extension_name}]) (~+ extension_args)))
          (//extension.apply archive analysis [extension_name extension_args])

          (^.` ((~ functionC) (~+ argsC+)))
          (..apply_analysis expander analysis archive functionC argsC+)

          (^.` {(~ [_ {.#Nat lefts}]) (~ [_ {.#Bit right?}]) (~+ values)})
          (..sum_analysis analysis archive lefts right? values)

          _
          (//.except ..invalid [code])))))
