(.using
 [library
  [lux "*"
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" function]
    ["[0]" try]
    ["<>" parser
     ["<s>" synthesis (.only Parser)]]]
   [data
    ["[0]" product]
    ["[0]" text
     ["%" format (.only format)]]
    [collection
     ["[0]" dictionary]
     ["[0]" list ("[1]#[0]" functor mix)]]]
   [macro
    ["^" pattern]]
   [math
    [number
     ["f" frac]]]
   ["@" target
    ["_" lua (.only Expression Statement)]]]]
 ["[0]" //// "_"
  ["/" bundle]
  ["/[1]" // "_"
   ["[0]" extension]
   [generation
    [extension (.only Nullary Unary Binary Trinary
                      nullary unary binary trinary)]
    ["//" lua "_"
     ["[1][0]" runtime (.only Operation Phase Phase! Handler Bundle Generator)]
     ["[1][0]" primitive]
     ["[1][0]" structure]
     ["[1][0]" reference]
     ["[1][0]" case]
     ["[1][0]" loop]
     ["[1][0]" function]]]
   [//
    ["[0]" synthesis (.only %synthesis)]
    ["[0]" generation]
    [///
     ["[1]" phase ("[1]#[0]" monad)]]]]])

(def: .public (custom [parser handler])
  (All (_ s)
    (-> [(Parser s)
         (-> Text (Generator s))]
        Handler))
  (function (_ extension_name phase archive input)
    (case (<s>.result parser input)
      {try.#Success input'}
      (handler extension_name phase archive input')

      {try.#Failure error}
      (/////.except extension.invalid_syntax [extension_name %synthesis input]))))

(template: (!unary function)
  [(|>> list _.apply (|> (_.var function)))])

(def: .public (statement expression archive synthesis)
  Phase!
  (case synthesis
    ... TODO: Get rid of this ASAP
    {synthesis.#Extension "lux syntax char case!" parameters}
    (do /////.monad
      [body (expression archive synthesis)]
      (in (as Statement body)))
    
    (^.template [<tag>]
      [(pattern (<tag> value))
       (/////#each _.return (expression archive synthesis))])
    ([synthesis.bit]
     [synthesis.i64]
     [synthesis.f64]
     [synthesis.text]
     [synthesis.variant]
     [synthesis.tuple]
     [synthesis.branch/get]
     [synthesis.function/apply])

    (^.template [<tag>]
      [(pattern {<tag> value})
       (/////#each _.return (expression archive synthesis))])
    ([synthesis.#Reference]
     [synthesis.#Extension])

    (pattern (synthesis.branch/case case))
    (//case.case! statement expression archive case)

    (pattern (synthesis.branch/exec it))
    (//case.exec! statement expression archive it)

    (pattern (synthesis.branch/let let))
    (//case.let! statement expression archive let)

    (pattern (synthesis.branch/if if))
    (//case.if! statement expression archive if)

    (pattern (synthesis.loop/scope scope))
    (do /////.monad
      [[inits scope!] (//loop.scope! statement expression archive false scope)]
      (in scope!))

    (pattern (synthesis.loop/again updates))
    (//loop.again! statement expression archive updates)

    (pattern (synthesis.function/abstraction abstraction))
    (/////#each _.return (//function.function statement expression archive abstraction))
    ))

... TODO: Get rid of this ASAP
(def: lux::syntax_char_case!
  (..custom [(all <>.and
                  <s>.any
                  <s>.any
                  (<>.some (<s>.tuple (all <>.and
                                           (<s>.tuple (<>.many <s>.i64))
                                           <s>.any))))
             (function (_ extension_name phase archive [input else conditionals])
               (|> conditionals
                   (list#each (function (_ [chars branch])
                                {synthesis.#Seq (case chars
                                                  {.#End}
                                                  {synthesis.#Pop}
                                                  
                                                  {.#Item head tail}
                                                  {synthesis.#I64_Fork
                                                   [head {synthesis.#Pop}]
                                                   (list#each (function (_ char)
                                                                [char {synthesis.#Pop}])
                                                              tail)})
                                                {synthesis.#Then branch}}))
                   list.reversed
                   (list#mix (function (_ pre post)
                               {synthesis.#Alt pre post})
                             {synthesis.#Then else})
                   [input]
                   (//case.case! statement phase archive)
                   (# /////.monad each (|>> (as Expression)))))]))

(def: lux_procs
  Bundle
  (|> /.empty
      (/.install "syntax char case!" lux::syntax_char_case!)
      (/.install "is" (binary (product.uncurried _.=)))
      (/.install "try" (unary //runtime.lux//try))))

(def: i64_procs
  Bundle
  (<| (/.prefix "i64")
      (|> /.empty
          (/.install "and" (binary (product.uncurried _.bit_and)))
          (/.install "or" (binary (product.uncurried _.bit_or)))
          (/.install "xor" (binary (product.uncurried _.bit_xor)))
          (/.install "left-shift" (binary (product.uncurried //runtime.i64//left_shifted)))
          (/.install "right-shift" (binary (product.uncurried //runtime.i64//right_shifted)))
          (/.install "=" (binary (product.uncurried _.=)))
          (/.install "+" (binary (product.uncurried _.+)))
          (/.install "-" (binary (product.uncurried _.-)))
          (/.install "<" (binary (product.uncurried _.<)))
          (/.install "*" (binary (product.uncurried _.*)))
          (/.install "/" (binary (product.uncurried //runtime.i64//division)))
          (/.install "%" (binary (product.uncurried //runtime.i64//remainder)))
          (/.install "f64" (unary (_./ (_.float +1.0))))
          (/.install "char" (unary (function (_ it) (_.apply (list it) (_.var "utf8.char")))))
          )))

(def: f64//decode
  (Unary Expression)
  (|>> list _.apply (|> (_.var "tonumber")) _.return (_.closure (list)) //runtime.lux//try))

(def: f64_procs
  Bundle
  (<| (/.prefix "f64")
      (|> /.empty
          (/.install "+" (binary (product.uncurried _.+)))
          (/.install "-" (binary (product.uncurried _.-)))
          (/.install "*" (binary (product.uncurried _.*)))
          (/.install "/" (binary (product.uncurried _./)))
          (/.install "%" (binary (product.uncurried (function (_ parameter subject) (_.apply (list subject parameter) (_.var "math.fmod"))))))
          (/.install "=" (binary (product.uncurried _.=)))
          (/.install "<" (binary (product.uncurried _.<)))
          (/.install "i64" (unary (!unary "math.floor")))
          (/.install "encode" (unary (function (_ it) (_.apply (list (_.string "%.17g") it) (_.var "string.format")))))
          (/.install "decode" (unary ..f64//decode)))))

(def: (text//char [paramO subjectO])
  (Binary Expression)
  (//runtime.text//char (_.+ (_.int +1) paramO) subjectO))

(def: (text//clip [paramO extraO subjectO])
  (Trinary Expression)
  (//runtime.text//clip subjectO paramO extraO))

(def: (text//index [startO partO textO])
  (Trinary Expression)
  (//runtime.text//index textO partO startO))

(def: text_procs
  Bundle
  (<| (/.prefix "text")
      (|> /.empty
          (/.install "=" (binary (product.uncurried _.=)))
          (/.install "<" (binary (product.uncurried _.<)))
          (/.install "concat" (binary (product.uncurried (function.flipped _.concat))))
          (/.install "index" (trinary ..text//index))
          (/.install "size" (unary //runtime.text//size))
          ... TODO: Use version below once the Lua compiler becomes self-hosted.
          ... (/.install "size" (unary (for @.lua (!unary "utf8.len")
          ...                               (!unary "string.len"))))
          (/.install "char" (binary ..text//char))
          (/.install "clip" (trinary ..text//clip))
          )))

(def: (io//log! messageO)
  (Unary Expression)
  (|> (_.apply (list messageO) (_.var "print"))
      (_.or //runtime.unit)))

(def: io_procs
  Bundle
  (<| (/.prefix "io")
      (|> /.empty
          (/.install "log" (unary ..io//log!))
          (/.install "error" (unary (!unary "error"))))))

(def: .public bundle
  Bundle
  (<| (/.prefix "lux")
      (|> lux_procs
          (dictionary.composite i64_procs)
          (dictionary.composite f64_procs)
          (dictionary.composite text_procs)
          (dictionary.composite io_procs)
          )))
