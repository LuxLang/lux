(.using
 [library
  [lux {"-" Label function}
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    [text
     ["%" format (.only format)]]
    [collection
     ["[0]" list ("[1]#[0]" functor mix)]]]
   [target
    ["_" lua (.only Var Expression Label Statement)]]]]
 ["[0]" // "_"
  ["[1][0]" runtime (.only Operation Phase Phase! Generator)]
  ["[1][0]" reference]
  ["[1][0]" case]
  ["/[1]" // "_"
   ["[1][0]" reference]
   ["//[1]" /// "_"
    [analysis (.only Abstraction Reification Analysis)]
    [synthesis (.only Synthesis)]
    ["[1][0]" generation]
    ["//[1]" /// "_"
     [arity (.only Arity)]
     ["[1][0]" phase ("[1]#[0]" monad)]
     [meta
      [archive
       ["[0]" unit]]
      ["[0]" cache "_"
       [dependency
        ["[1]" artifact]]]]
     [reference
      [variable (.only Register Variable)]]]]]])

(def: .public (apply expression archive [functionS argsS+])
  (Generator (Reification Synthesis))
  (do [! ///////phase.monad]
    [functionO (expression archive functionS)
     argsO+ (monad.each ! (expression archive) argsS+)]
    (in (_.apply argsO+ functionO))))

(def: capture
  (-> Register Var)
  (|>> (///reference.foreign //reference.system) as_expected))

(def: (with_closure inits @self @args body!)
  (-> (List Expression) Var (List Var) Statement [Statement Expression])
  (case inits
    {.#End}
    [(_.function @self @args body!)
     @self]

    _
    (let [@inits (|> (list.enumeration inits)
                     (list#each (|>> product.left ..capture)))]
      [(_.function @self @inits
         (all _.then
              (_.local_function @self @args body!)
              (_.return @self)))
       (_.apply inits @self)])))

(def: input
  (|>> ++ //case.register))

(def: (@scope function_name)
  (-> unit.ID Label)
  (_.label (format (///reference.artifact function_name) "_scope")))

(def: .public (function statement expression archive [environment arity bodyS])
  (-> Phase! (Generator (Abstraction Synthesis)))
  (do [! ///////phase.monad]
    [dependencies (cache.dependencies archive bodyS)
     [function_name body!] (/////generation.with_new_context archive dependencies
                             (do !
                               [@scope (# ! each ..@scope
                                          (/////generation.context archive))]
                               (/////generation.with_anchor [1 @scope]
                                 (statement expression archive bodyS))))
     closureO+ (monad.each ! (expression archive) environment)
     .let [@curried (_.var "curried")
           arityO (|> arity .int _.int)
           @num_args (_.var "num_args")
           @scope (..@scope function_name)
           @self (_.var (///reference.artifact function_name))
           initialize_self! (_.local/1 (//case.register 0) @self)
           initialize! (list#mix (.function (_ post pre!)
                                   (all _.then
                                        pre!
                                        (_.local/1 (..input post) (_.item (|> post ++ .int _.int) @curried))))
                                 initialize_self!
                                 (list.indices arity))
           pack (|>> (list) _.array)
           unpack (is (-> Expression Expression)
                      (.function (_ it)
                        (_.apply (list it) (_.var "table.unpack"))))
           @var_args (_.var "...")]
     .let [[definition instantiation] (with_closure closureO+ @self (list @var_args)
                                        (all _.then
                                             (_.local/1 @curried (pack @var_args))
                                             (_.local/1 @num_args (_.length @curried))
                                             (<| (_.if (|> @num_args (_.= arityO))
                                                   (all _.then
                                                        initialize!
                                                        (_.set_label @scope)
                                                        body!))
                                                 (_.if (|> @num_args (_.> arityO))
                                                   (let [arity_inputs (_.apply (list @curried
                                                                                     (_.int +1)
                                                                                     arityO
                                                                                     (_.int +1)
                                                                                     (_.array (list)))
                                                                               (_.var "table.move"))
                                                         extra_inputs (_.apply (list @curried
                                                                                     (_.+ (_.int +1) arityO)
                                                                                     @num_args
                                                                                     (_.int +1)
                                                                                     (_.array (list)))
                                                                               (_.var "table.move"))]
                                                     (_.return (|> @self
                                                                   (_.apply (list (unpack arity_inputs)))
                                                                   (_.apply (list (unpack extra_inputs)))))))
                                                 ... (|> @num_args (_.< arityO))
                                                 (_.return (_.closure (list @var_args)
                                                                      (let [@extra_args (_.var "extra_args")]
                                                                        (all _.then
                                                                             (_.local/1 @extra_args (pack @var_args))
                                                                             (_.return (_.apply (list (unpack (_.apply (list @extra_args
                                                                                                                             (_.int +1)
                                                                                                                             (_.length @extra_args)
                                                                                                                             (_.+ (_.int +1) @num_args)
                                                                                                                             (_.apply (list @curried
                                                                                                                                            (_.int +1)
                                                                                                                                            @num_args
                                                                                                                                            (_.int +1)
                                                                                                                                            (_.array (list)))
                                                                                                                                      (_.var "table.move")))
                                                                                                                       (_.var "table.move"))))
                                                                                                @self)))))))
                                             ))]
     _ (/////generation.execute! definition)
     _ (/////generation.save! (product.right function_name) {.#None} definition)]
    (in instantiation)))
