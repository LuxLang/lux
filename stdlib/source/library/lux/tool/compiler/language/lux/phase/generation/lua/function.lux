(.using
  [library
   [lux {"-" Tuple Variant function}
    [abstract
     ["[0]" monad {"+" do}]]
    [control
     pipe]
    [data
     ["[0]" product]
     [text
      ["%" format {"+" format}]]
     [collection
      ["[0]" list ("[1]#[0]" functor mix)]]]
    [target
     ["_" lua {"+" Var Expression Label Statement}]]]]
  ["[0]" // "_"
   ["[1][0]" runtime {"+" Operation Phase Phase! Generator}]
   ["[1][0]" reference]
   ["[1][0]" case]
   ["/[1]" // "_"
    ["[1][0]" reference]
    ["//[1]" /// "_"
     [analysis {"+" Variant Tuple Abstraction Application Analysis}]
     [synthesis {"+" Synthesis}]
     ["[1][0]" generation {"+" Context}]
     ["//[1]" /// "_"
      [arity {"+" Arity}]
      ["[1][0]" phase ("[1]#[0]" monad)]
      [reference
       [variable {"+" Register Variable}]]]]]])

(def: .public (apply expression archive [functionS argsS+])
  (Generator (Application Synthesis))
  (do [! ///////phase.monad]
    [functionO (expression archive functionS)
     argsO+ (monad.each ! (expression archive) argsS+)]
    (in (_.apply/* argsO+ functionO))))

(def: capture
  (-> Register Var)
  (|>> (///reference.foreign //reference.system) :expected))

(def: (with_closure inits @self @args body!)
  (-> (List Expression) Var (List Var) Statement [Statement Expression])
  (case inits
    {.#End}
    [(_.function @self @args body!)
     @self]

    _
    (let [@inits (|> (list.enumeration inits)
                     (list#each (|>> product.left ..capture)))]
      [(_.function @self @inits
         ($_ _.then
             (_.local_function @self @args body!)
             (_.return @self)))
       (_.apply/* inits @self)])))

(def: input
  (|>> ++ //case.register))

(def: (@scope function_name)
  (-> Context Label)
  (_.label (format (///reference.artifact function_name) "_scope")))

(def: .public (function statement expression archive [environment arity bodyS])
  (-> Phase! (Generator (Abstraction Synthesis)))
  (do [! ///////phase.monad]
    [[function_name body!] (/////generation.with_new_context archive
                             (do !
                               [@scope (# ! each ..@scope
                                          (/////generation.context archive))]
                               (/////generation.with_anchor [1 @scope]
                                 (statement expression archive bodyS))))
     closureO+ (monad.each ! (expression archive) environment)
     .let [@curried (_.var "curried")
           arityO (|> arity .int _.int)
           @num_args (_.var "num_args")
           @scope (..@scope function_name)
           @self (_.var (///reference.artifact function_name))
           initialize_self! (_.local/1 (//case.register 0) @self)
           initialize! (list#mix (.function (_ post pre!)
                                   ($_ _.then
                                       pre!
                                       (_.local/1 (..input post) (_.item (|> post ++ .int _.int) @curried))))
                                 initialize_self!
                                 (list.indices arity))
           pack (|>> (list) _.array)
           unpack (_.apply/1 (_.var "table.unpack"))
           @var_args (_.var "...")]
     .let [[definition instantiation] (with_closure closureO+ @self (list @var_args)
                                        ($_ _.then
                                            (_.local/1 @curried (pack @var_args))
                                            (_.local/1 @num_args (_.length @curried))
                                            (_.cond (list [(|> @num_args (_.= arityO))
                                                           ($_ _.then
                                                               initialize!
                                                               (_.set_label @scope)
                                                               body!)]
                                                          [(|> @num_args (_.> arityO))
                                                           (let [arity_inputs (_.apply/5 (_.var "table.move")
                                                                                         @curried
                                                                                         (_.int +1)
                                                                                         arityO
                                                                                         (_.int +1)
                                                                                         (_.array (list)))
                                                                 extra_inputs (_.apply/5 (_.var "table.move")
                                                                                         @curried
                                                                                         (_.+ (_.int +1) arityO)
                                                                                         @num_args
                                                                                         (_.int +1)
                                                                                         (_.array (list)))]
                                                             (_.return (|> @self
                                                                           (_.apply/* (list (unpack arity_inputs)))
                                                                           (_.apply/* (list (unpack extra_inputs))))))])
                                                    ... (|> @num_args (_.< arityO))
                                                    (_.return (_.closure (list @var_args)
                                                                         (let [@extra_args (_.var "extra_args")]
                                                                           ($_ _.then
                                                                               (_.local/1 @extra_args (pack @var_args))
                                                                               (_.return (|> (_.array (list))
                                                                                             (_.apply/5 (_.var "table.move")
                                                                                                        @curried
                                                                                                        (_.int +1)
                                                                                                        @num_args
                                                                                                        (_.int +1))
                                                                                             (_.apply/5 (_.var "table.move")
                                                                                                        @extra_args
                                                                                                        (_.int +1)
                                                                                                        (_.length @extra_args)
                                                                                                        (_.+ (_.int +1) @num_args))
                                                                                             unpack
                                                                                             (_.apply/1 @self))))))))
                                            ))]
     _ (/////generation.execute! definition)
     _ (/////generation.save! (product.right function_name) {.#None} definition)]
    (in instantiation)))
