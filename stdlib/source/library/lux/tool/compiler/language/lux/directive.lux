(.module:
  [library
   [lux (#- Module)
    [abstract
     [monad (#+ do)]]
    [control
     ["." try]]
    [data
     [collection
      ["." list ("#\." monoid)]]]]]
  [//
   ["." analysis]
   ["." synthesis]
   ["." generation]
   [phase
    ["." extension]]
   [///
    ["." phase]
    [meta
     [archive
      [descriptor (#+ Module)]]]]])

(type: .public (Component state phase)
  (Record
   {#state state
    #phase phase}))

(type: .public (State anchor expression directive)
  (Record
   {#analysis (Component analysis.State+
                         analysis.Phase)
    #synthesis (Component synthesis.State+
                          synthesis.Phase)
    #generation (Component (generation.State+ anchor expression directive)
                           (generation.Phase anchor expression directive))}))

(type: .public Import
  (Record
   {#module Module
    #alias Text}))

(type: .public Requirements
  (Record
   {#imports (List Import)
    #referrals (List Code)}))

(def: .public no_requirements
  Requirements
  {#imports (list)
   #referrals (list)})

(def: .public (merge_requirements left right)
  (-> Requirements Requirements Requirements)
  {#imports (list\composite (value@ #imports left) (value@ #imports right))
   #referrals (list\composite (value@ #referrals left) (value@ #referrals right))})

(template [<special> <general>]
  [(type: .public (<special> anchor expression directive)
     (<general> (..State anchor expression directive) Code Requirements))]

  [State+    extension.State]
  [Operation extension.Operation]
  [Phase     extension.Phase]
  [Handler   extension.Handler]
  [Bundle    extension.Bundle]
  )

(template [<name> <component> <phase>]
  [(def: .public <name>
     (All (_ anchor expression directive)
       (Operation anchor expression directive <phase>))
     (function (_ [bundle state])
       (#try.Success [[bundle state] (value@ [<component> #..phase] state)])))]

  [analysis   #..analysis   analysis.Phase]
  [synthesis  #..synthesis  synthesis.Phase]
  [generation #..generation (generation.Phase anchor expression directive)]
  )

(template [<name> <component> <operation>]
  [(def: .public <name>
     (All (_ anchor expression directive output)
       (-> (<operation> output)
           (Operation anchor expression directive output)))
     (|>> (phase.sub [(value@ [<component> #..state])
                      (with@ [<component> #..state])])
          extension.lifted))]

  [lifted_analysis   #..analysis   analysis.Operation]
  [lifted_synthesis  #..synthesis  synthesis.Operation]
  [lifted_generation #..generation (generation.Operation anchor expression directive)]
  )

(def: .public (set_current_module module)
  (All (_ anchor expression directive)
    (-> Module (Operation anchor expression directive Any)))
  (do phase.monad
    [_ (..lifted_analysis
        (analysis.set_current_module module))]
    (..lifted_generation
     (generation.enter_module module))))
