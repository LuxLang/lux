(.module:
  [library
   [lux (#- Type Definition case false true try)
    [abstract
     ["." monad (#+ do)]
     ["." enum]]
    [control
     ["." try]]
    [data
     [binary (#+ Binary)]
     [collection
      ["." list ("#\." functor)]
      ["." row]]
     ["." format #_
      ["#" binary]]
     [text
      ["%" format (#+ format)]]]
    [math
     [number
      ["n" nat]
      ["." i32]
      ["." i64]]]
    [target
     ["." jvm #_
      ["_" bytecode (#+ Label Bytecode)]
      ["." modifier (#+ Modifier) ("#\." monoid)]
      ["." field (#+ Field)]
      ["." method (#+ Method)]
      ["#/." version]
      ["." class (#+ Class)]
      ["." constant
       [pool (#+ Resource)]]
      [encoding
       ["." name]]
      ["." type (#+ Type)
       ["." category (#+ Return' Value')]
       ["." reflection]]]]]]
  ["." // #_
   ["#." type]
   ["#." value]
   ["#." function #_
    ["#" abstract]
    [field
     [constant
      ["#/." arity]]
     [variable
      [partial
       ["#/." count]]]]]
   ["//#" /// #_
    [//
     ["." version]
     ["." synthesis]
     ["." generation]
     [///
      ["#" phase]
      [arity (#+ Arity)]
      [reference
       [variable (#+ Register)]]
      [meta
       [io (#+ lux_context)]
       [archive (#+ Archive)]]]]]])

(type: .public Byte_Code Binary)

(type: .public Definition [Text Byte_Code])

(type: .public Anchor [Label Register])

(template [<name> <base>]
  [(type: .public <name>
     (<base> Anchor (Bytecode Any) Definition))]

  [Operation generation.Operation]
  [Phase generation.Phase]
  [Handler generation.Handler]
  [Bundle generation.Bundle]
  )

(type: .public (Generator i)
  (-> Phase Archive i (Operation (Bytecode Any))))

(type: .public Host
  (generation.Host (Bytecode Any) Definition))

(def: .public (class_name [module id])
  (-> generation.Context Text)
  (format lux_context
          "/" (%.nat version.version)
          "/" (%.nat module)
          "/" (%.nat id)))

(def: artifact_id
  0)

(def: .public class
  (type.class (%.nat ..artifact_id) (list)))

(def: procedure
  (-> Text (Type category.Method) (Bytecode Any))
  (_.invokestatic ..class))

(def: modifier
  (Modifier Method)
  ($_ modifier\compose
      method.public
      method.static
      method.strict
      ))

(def: this
  (Bytecode Any)
  _.aload_0)

(def: .public (get index)
  (-> (Bytecode Any) (Bytecode Any))
  ($_ _.compose
      index
      _.aaload))

(def: (set! index value)
  (-> (Bytecode Any) (Bytecode Any) (Bytecode Any))
  ($_ _.compose
      ## A
      _.dup ## AA
      index ## AAI
      value ## AAIV
      _.aastore ## A
      ))

(def: .public unit (_.string synthesis.unit))

(def: variant::name "variant")
(def: variant::type (type.method [(list) (list //type.tag //type.flag //type.value) //type.variant (list)]))
(def: .public variant (..procedure ..variant::name ..variant::type))

(def: variant_tag _.iconst_0)
(def: variant_last? _.iconst_1)
(def: variant_value _.iconst_2)

(def: variant::method
  (let [new_variant ($_ _.compose
                        _.iconst_3
                        (_.anewarray //type.value))
        $tag ($_ _.compose
                 _.iload_0
                 (//value.wrap type.int))
        $last? _.aload_1
        $value _.aload_2]
    (method.method ..modifier ..variant::name
                   ..variant::type
                   (list)
                   (#.Some ($_ _.compose
                               new_variant ## A[3]
                               (..set! ..variant_tag $tag) ## A[3]
                               (..set! ..variant_last? $last?) ## A[3]
                               (..set! ..variant_value $value) ## A[3]
                               _.areturn)))))

(def: .public left_flag _.aconst_null)
(def: .public right_flag ..unit)

(def: .public left_injection
  (Bytecode Any)
  ($_ _.compose
      _.iconst_0
      ..left_flag
      _.dup2_x1
      _.pop2
      ..variant))

(def: .public right_injection
  (Bytecode Any)
  ($_ _.compose
      _.iconst_1
      ..right_flag
      _.dup2_x1
      _.pop2
      ..variant))

(def: .public some_injection ..right_injection)

(def: .public none_injection
  (Bytecode Any)
  ($_ _.compose
      _.iconst_0
      ..left_flag
      ..unit
      ..variant))

(def: (risky $unsafe)
  (-> (Bytecode Any) (Bytecode Any))
  (do _.monad
    [@try _.new_label
     @handler _.new_label]
    ($_ _.compose
        (_.try @try @handler @handler //type.error)
        (_.set_label @try)
        $unsafe
        ..some_injection
        _.areturn
        (_.set_label @handler)
        ..none_injection
        _.areturn
        )))

(def: decode_frac::name "decode_frac")
(def: decode_frac::type (type.method [(list) (list //type.text) //type.variant (list)]))
(def: .public decode_frac (..procedure ..decode_frac::name ..decode_frac::type))

(def: decode_frac::method
  (method.method ..modifier ..decode_frac::name
                 ..decode_frac::type
                 (list)
                 (#.Some
                  (..risky
                   ($_ _.compose
                       _.aload_0
                       (_.invokestatic //type.frac "parseDouble" (type.method [(list) (list //type.text) type.double (list)]))
                       (//value.wrap type.double)
                       )))))

(def: .public log!
  (Bytecode Any)
  (let [^PrintStream (type.class "java.io.PrintStream" (list))
        ^System (type.class "java.lang.System" (list))
        out (_.getstatic ^System "out" ^PrintStream)
        print_type (type.method [(list) (list //type.value) type.void (list)])
        print! (function (_ method) (_.invokevirtual ^PrintStream method print_type))]
    ($_ _.compose
        out (_.string "LUX LOG: ") (print! "print")
        out _.swap (print! "println"))))

(def: exception_constructor (type.method [(list) (list //type.text) type.void (list)]))
(def: (illegal_state_exception message)
  (-> Text (Bytecode Any))
  (let [^IllegalStateException (type.class "java.lang.IllegalStateException" (list))]
    ($_ _.compose
        (_.new ^IllegalStateException)
        _.dup
        (_.string message)
        (_.invokespecial ^IllegalStateException "<init>" ..exception_constructor))))

(def: failure::type
  (type.method [(list) (list) type.void (list)]))

(def: (failure name message)
  (-> Text Text (Resource Method))
  (method.method ..modifier name
                 ..failure::type
                 (list)
                 (#.Some
                  ($_ _.compose
                      (..illegal_state_exception message)
                      _.athrow))))

(def: pm_failure::name "pm_failure")
(def: .public pm_failure (..procedure ..pm_failure::name ..failure::type))

(def: pm_failure::method
  (..failure ..pm_failure::name "Invalid expression for pattern-matching."))

(def: .public stack_head _.iconst_0)
(def: .public stack_tail _.iconst_1)

(def: push::name "push")
(def: push::type (type.method [(list) (list //type.stack //type.value) //type.stack (list)]))
(def: .public push (..procedure ..push::name ..push::type))

(def: push::method
  (method.method ..modifier ..push::name
                 ..push::type
                 (list)
                 (#.Some
                  (let [new_stack_frame! ($_ _.compose
                                             _.iconst_2
                                             (_.anewarray //type.value))
                        $head _.aload_1
                        $tail _.aload_0]
                    ($_ _.compose
                        new_stack_frame!
                        (..set! ..stack_head $head)
                        (..set! ..stack_tail $tail)
                        _.areturn)))))

(def: case::name "case")
(def: case::type (type.method [(list) (list //type.variant //type.tag //type.flag) //type.value (list)]))
(def: .public case (..procedure ..case::name ..case::type))

(def: case::method
  (method.method ..modifier ..case::name ..case::type
                 (list)
                 (#.Some
                  (do _.monad
                    [@loop _.new_label
                     @perfect_match! _.new_label
                     @tags_match! _.new_label
                     @maybe_nested _.new_label
                     @mismatch! _.new_label
                     .let [::tag ($_ _.compose
                                     (..get ..variant_tag)
                                     (//value.unwrap type.int))
                           ::last? (..get ..variant_last?)
                           ::value (..get ..variant_value)

                           $variant _.aload_0
                           $tag _.iload_1
                           $last? _.aload_2

                           not_found _.aconst_null

                           update_$tag _.isub
                           update_$variant ($_ _.compose
                                               $variant ::value
                                               (_.checkcast //type.variant)
                                               _.astore_0)
                           recur (: (-> Label (Bytecode Any))
                                    (function (_ @loop_start)
                                      ($_ _.compose
                                          ## tag, sumT
                                          update_$variant ## tag, sumT
                                          update_$tag ## sub_tag
                                          (_.goto @loop_start))))
                           
                           super_nested_tag ($_ _.compose
                                                ## tag, sumT
                                                _.swap ## sumT, tag
                                                _.isub)
                           super_nested ($_ _.compose
                                            ## tag, sumT
                                            super_nested_tag ## super_tag
                                            $variant ::last? ## super_tag, super_last
                                            $variant ::value ## super_tag, super_last, super_value
                                            ..variant)]]
                    ($_ _.compose
                        $tag
                        (_.set_label @loop)
                        $variant ::tag
                        _.dup2 (_.if_icmpeq @tags_match!)
                        _.dup2 (_.if_icmpgt @maybe_nested)
                        $last? (_.ifnull @mismatch!) ## tag, sumT
                        super_nested ## super_variant
                        _.areturn
                        (_.set_label @tags_match!) ## tag, sumT
                        $last? ## tag, sumT, wants_last?
                        $variant ::last? ## tag, sumT, wants_last?, is_last?
                        (_.if_acmpeq @perfect_match!) ## tag, sumT
                        (_.set_label @maybe_nested) ## tag, sumT
                        $variant ::last? ## tag, sumT, last?
                        (_.ifnull @mismatch!) ## tag, sumT
                        (recur @loop)
                        (_.set_label @perfect_match!) ## tag, sumT
                        ## _.pop2
                        $variant ::value
                        _.areturn
                        (_.set_label @mismatch!) ## tag, sumT
                        ## _.pop2
                        not_found
                        _.areturn
                        )))))

(def: projection_type (type.method [(list) (list //type.tuple //type.offset) //type.value (list)]))

(def: left_projection::name "left")
(def: .public left_projection (..procedure ..left_projection::name ..projection_type))

(def: right_projection::name "right")
(def: .public right_projection (..procedure ..right_projection::name ..projection_type))

(def: projection::method2
  [(Resource Method) (Resource Method)]
  (let [$tuple _.aload_0
        $tuple::size ($_ _.compose
                         $tuple _.arraylength)

        $lefts _.iload_1

        $last_right ($_ _.compose
                        $tuple::size _.iconst_1 _.isub)

        update_$lefts ($_ _.compose
                          $lefts $last_right _.isub
                          _.istore_1)
        update_$tuple ($_ _.compose
                          $tuple $last_right _.aaload (_.checkcast //type.tuple)
                          _.astore_0)
        recur (: (-> Label (Bytecode Any))
                 (function (_ @loop)
                   ($_ _.compose
                       update_$lefts
                       update_$tuple
                       (_.goto @loop))))

        left_projection::method
        (method.method ..modifier ..left_projection::name ..projection_type
                       (list)
                       (#.Some
                        (do _.monad
                          [@loop _.new_label
                           @recursive _.new_label
                           .let [::left ($_ _.compose
                                            $lefts _.aaload)]]
                          ($_ _.compose
                              (_.set_label @loop)
                              $lefts $last_right (_.if_icmpge @recursive)
                              $tuple ::left
                              _.areturn
                              (_.set_label @recursive)
                              ## Recursive
                              (recur @loop)))))

        right_projection::method
        (method.method ..modifier ..right_projection::name ..projection_type
                       (list)
                       (#.Some
                        (do _.monad
                          [@loop _.new_label
                           @not_tail _.new_label
                           @slice _.new_label
                           .let [$right ($_ _.compose
                                            $lefts
                                            _.iconst_1
                                            _.iadd)
                                 $::nested ($_ _.compose
                                               $tuple _.swap _.aaload)
                                 super_nested ($_ _.compose
                                                  $tuple
                                                  $right
                                                  $tuple::size
                                                  (_.invokestatic (type.class "java.util.Arrays" (list)) "copyOfRange"
                                                                  (type.method [(list) (list //type.tuple //type.index //type.index) //type.tuple (list)])))]]
                          ($_ _.compose
                              (_.set_label @loop)
                              $last_right $right
                              _.dup2 (_.if_icmpne @not_tail)
                              ## _.pop
                              $::nested
                              _.areturn
                              (_.set_label @not_tail)
                              (_.if_icmpgt @slice)
                              ## Must recurse
                              (recur @loop)
                              (_.set_label @slice)
                              super_nested
                              _.areturn))))]
    [left_projection::method
     right_projection::method]))

(def: .public apply::name "apply")

(def: .public (apply::type arity)
  (-> Arity (Type category.Method))
  (type.method [(list) (list.repeat arity //type.value) //type.value (list)]))

(def: .public apply
  (_.invokevirtual //function.class ..apply::name (..apply::type 1)))

(def: try::name "try")
(def: try::type (type.method [(list) (list //function.class) //type.variant (list)]))
(def: .public try (..procedure ..try::name ..try::type))

(def: false _.iconst_0)
(def: true _.iconst_1)

(def: try::method
  (method.method ..modifier ..try::name ..try::type
                 (list)
                 (#.Some
                  (do _.monad
                    [@try _.new_label
                     @handler _.new_label
                     .let [$unsafe ..this
                           unit _.aconst_null

                           ^StringWriter (type.class "java.io.StringWriter" (list))
                           string_writer ($_ _.compose
                                             (_.new ^StringWriter)
                                             _.dup
                                             (_.invokespecial ^StringWriter "<init>" (type.method [(list) (list) type.void (list)])))

                           ^PrintWriter (type.class "java.io.PrintWriter" (list))
                           print_writer ($_ _.compose
                                            ## WTW
                                            (_.new ^PrintWriter) ## WTWP
                                            _.dup_x1 ## WTPWP
                                            _.swap   ## WTPPW
                                            ..true   ## WTPPWZ
                                            (_.invokespecial ^PrintWriter "<init>" (type.method [(list) (list (type.class "java.io.Writer" (list)) type.boolean) type.void (list)]))
                                            ## WTP
                                            )]]
                    ($_ _.compose
                        (_.try @try @handler @handler //type.error)
                        (_.set_label @try)
                        $unsafe unit ..apply
                        ..right_injection _.areturn
                        (_.set_label @handler) ## T
                        string_writer          ## TW
                        _.dup_x1               ## WTW
                        print_writer           ## WTP
                        (_.invokevirtual //type.error "printStackTrace" (type.method [(list) (list ^PrintWriter) type.void (list)])) ## W
                        (_.invokevirtual ^StringWriter "toString" (type.method [(list) (list) //type.text (list)])) ## S
                        ..left_injection _.areturn
                        )))))

(def: reflection
  (All [category]
    (-> (Type (<| Return' Value' category)) Text))
  (|>> type.reflection reflection.reflection))

(def: ^Object (type.class "java.lang.Object" (list)))

(def: generate_runtime
  (Operation Any)
  (let [class (..reflection ..class)
        modifier (: (Modifier Class)
                    ($_ modifier\compose
                        class.public
                        class.final))
        bytecode (<| (format.run class.writer)
                     try.assumed
                     (class.class jvm/version.v6_0
                                  modifier
                                  (name.internal class)
                                  (name.internal (..reflection ^Object)) (list)
                                  (list)
                                  (let [[left_projection::method right_projection::method] projection::method2]
                                    (list ..decode_frac::method
                                          ..variant::method

                                          ..pm_failure::method

                                          ..push::method
                                          ..case::method
                                          left_projection::method
                                          right_projection::method

                                          ..try::method))
                                  (row.row)))]
    (do ////.monad
      [_ (generation.execute! [class bytecode])]
      (generation.save! ..artifact_id #.None [class bytecode]))))

(def: generate_function
  (Operation Any)
  (let [apply::method+ (|> (enum.range n.enum
                                       (inc //function/arity.minimum)
                                       //function/arity.maximum)
                           (list\map (function (_ arity)
                                       (method.method method.public ..apply::name (..apply::type arity)
                                                      (list)
                                                      (#.Some
                                                       (let [previous_inputs (|> arity
                                                                                 list.indices
                                                                                 (monad.map _.monad _.aload))]
                                                         ($_ _.compose
                                                             previous_inputs
                                                             (_.invokevirtual //function.class ..apply::name (..apply::type (dec arity)))
                                                             (_.checkcast //function.class)
                                                             (_.aload arity)
                                                             (_.invokevirtual //function.class ..apply::name (..apply::type //function/arity.minimum))
                                                             _.areturn))))))
                           (list& (method.method (modifier\compose method.public method.abstract)
                                                 ..apply::name (..apply::type //function/arity.minimum)
                                                 (list)
                                                 #.None)))
        <init>::method (method.method method.public "<init>" //function.init
                                      (list)
                                      (#.Some
                                       (let [$partials _.iload_1]
                                         ($_ _.compose
                                             ..this
                                             (_.invokespecial ^Object "<init>" (type.method [(list) (list) type.void (list)]))
                                             ..this
                                             $partials
                                             (_.putfield //function.class //function/count.field //function/count.type)
                                             _.return))))
        modifier (: (Modifier Class)
                    ($_ modifier\compose
                        class.public
                        class.abstract))
        class (..reflection //function.class)
        partial_count (: (Resource Field)
                         (field.field (modifier\compose field.public field.final)
                                      //function/count.field
                                      //function/count.type
                                      (row.row)))
        bytecode (<| (format.run class.writer)
                     try.assumed
                     (class.class jvm/version.v6_0
                                  modifier
                                  (name.internal class)
                                  (name.internal (..reflection ^Object)) (list)
                                  (list partial_count)
                                  (list& <init>::method apply::method+)
                                  (row.row)))]
    (do ////.monad
      [_ (generation.execute! [class bytecode])]
      (generation.save! //function.artifact_id #.None [class bytecode]))))

(def: .public generate
  (Operation Any)
  (do ////.monad
    [_ ..generate_runtime]
    ..generate_function))

(def: .public forge_label
  (Operation Label)
  (let [shift (n./ 4 i64.width)]
    ## This shift is done to avoid the possibility of forged labels
    ## to be in the range of the labels that are generated automatically
    ## during the evaluation of Bytecode expressions.
    (\ ////.monad map (i64.left_shifted shift) generation.next)))
