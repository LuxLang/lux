(.using
 [library
  [lux "*"
   [abstract
    ["[0]" monad {"+" do}]]
   [control
    pipe
    ["[0]" try]
    ["[0]" exception {"+" exception:}]]
   [data
    ["[0]" text ("[1]#[0]" equivalence)
     ["%" format {"+" format}]]
    [collection
     ["[0]" list ("[1]#[0]" mix functor)]
     [dictionary
      ["[0]" plist]]]]
   ["[0]" meta]]]
 ["[0]" /// "_"
  ["[1][0]" extension]
  [//
   ["/" analysis {"+" Operation}]
   [///
    ["[1]" phase]]]])

(type: .public Tag Text)

(exception: .public (unknown_module [module Text])
  (exception.report
   ["Module" module]))

(template [<name>]
  [(exception: .public (<name> [tags (List Text)
                                owner Type])
     (exception.report
      ["Tags" (text.interposed " " tags)]
      ["Type" (%.type owner)]))]

  [cannot_declare_tags_for_unnamed_type]
  [cannot_declare_tags_for_foreign_type]
  )

(exception: .public (cannot_define_more_than_once [name Symbol
                                                   already_existing Global])
  (exception.report
   ["Definition" (%.symbol name)]
   ["Original" (case already_existing
                 {.#Alias alias}
                 (format "alias " (%.symbol alias))
                 
                 {.#Definition definition}
                 (format "definition " (%.symbol name))

                 {.#Type _}
                 (format "type " (%.symbol name))

                 {.#Tag _}
                 (format "tag " (%.symbol name))

                 {.#Slot _}
                 (format "slot " (%.symbol name)))]))

(exception: .public (can_only_change_state_of_active_module [module Text
                                                             state Module_State])
  (exception.report
   ["Module" module]
   ["Desired state" (case state
                      {.#Active}   "Active"
                      {.#Compiled} "Compiled"
                      {.#Cached}   "Cached")]))

(def: .public (empty hash)
  (-> Nat Module)
  [.#module_hash        hash
   .#module_aliases     (list)
   .#definitions        (list)
   .#imports            (list)
   .#module_state       {.#Active}])

(def: .public (import module)
  (-> Text (Operation Any))
  (///extension.lifted
   (do ///.monad
     [self_name meta.current_module_name]
     (function (_ state)
       {try.#Success [(revised@ .#modules
                                (plist.revised self_name (revised@ .#imports (function (_ current)
                                                                               (if (list.any? (text#= module)
                                                                                              current)
                                                                                 current
                                                                                 {.#Item module current}))))
                                state)
                      []]}))))

(def: .public (alias alias module)
  (-> Text Text (Operation Any))
  (///extension.lifted
   (do ///.monad
     [self_name meta.current_module_name]
     (function (_ state)
       {try.#Success [(revised@ .#modules
                                (plist.revised self_name (revised@ .#module_aliases (: (-> (List [Text Text]) (List [Text Text]))
                                                                                       (|>> {.#Item [alias module]}))))
                                state)
                      []]}))))

(def: .public (exists? module)
  (-> Text (Operation Bit))
  (///extension.lifted
   (function (_ state)
     (|> state
         (value@ .#modules)
         (plist.value module)
         (case> {.#Some _} #1 {.#None} #0)
         [state] {try.#Success}))))

(def: .public (define name definition)
  (-> Text Global (Operation Any))
  (///extension.lifted
   (do ///.monad
     [self_name meta.current_module_name
      self meta.current_module]
     (function (_ state)
       (case (plist.value name (value@ .#definitions self))
         {.#None}
         {try.#Success [(revised@ .#modules
                                  (plist.has self_name
                                             (revised@ .#definitions
                                                       (: (-> (List [Text Global]) (List [Text Global]))
                                                          (|>> {.#Item [name definition]}))
                                                       self))
                                  state)
                        []]}

         {.#Some already_existing}
         ((/.except' ..cannot_define_more_than_once [[self_name name] already_existing]) state))))))

(def: .public (create hash name)
  (-> Nat Text (Operation Any))
  (///extension.lifted
   (function (_ state)
     {try.#Success [(revised@ .#modules
                              (plist.has name (..empty hash))
                              state)
                    []]})))

(def: .public (with_module hash name action)
  (All (_ a) (-> Nat Text (Operation a) (Operation [Module a])))
  (do ///.monad
    [_ (create hash name)
     output (/.with_current_module name
              action)
     module (///extension.lifted (meta.module name))]
    (in [module output])))

(template [<setter> <asker> <tag>]
  [(def: .public (<setter> module_name)
     (-> Text (Operation Any))
     (///extension.lifted
      (function (_ state)
        (case (|> state (value@ .#modules) (plist.value module_name))
          {.#Some module}
          (let [active? (case (value@ .#module_state module)
                          {.#Active} #1
                          _          #0)]
            (if active?
              {try.#Success [(revised@ .#modules
                                       (plist.has module_name (with@ .#module_state {<tag>} module))
                                       state)
                             []]}
              ((/.except' can_only_change_state_of_active_module [module_name {<tag>}])
               state)))

          {.#None}
          ((/.except' unknown_module module_name) state)))))
   
   (def: .public (<asker> module_name)
     (-> Text (Operation Bit))
     (///extension.lifted
      (function (_ state)
        (case (|> state (value@ .#modules) (plist.value module_name))
          {.#Some module}
          {try.#Success [state
                         (case (value@ .#module_state module)
                           {<tag>} #1
                           _       #0)]}

          {.#None}
          ((/.except' unknown_module module_name) state)))))]

  [set_active   active?   .#Active]
  [set_compiled compiled? .#Compiled]
  [set_cached   cached?   .#Cached]
  )

(def: (hash module_name)
  (-> Text (Operation Nat))
  (///extension.lifted
   (function (_ state)
     (case (|> state (value@ .#modules) (plist.value module_name))
       {.#Some module}
       {try.#Success [state (value@ .#module_hash module)]}

       {.#None}
       ((/.except' unknown_module module_name) state)))))

(def: .public (declare_tags record? tags exported? type)
  (-> Bit (List Tag) Bit Type (Operation Any))
  (do [! ///.monad]
    [self_name (///extension.lifted meta.current_module_name)
     [type_module type_name] (case type
                               {.#Named type_name _}
                               (in type_name)

                               _
                               (/.except ..cannot_declare_tags_for_unnamed_type [tags type]))
     _ (///.assertion cannot_declare_tags_for_foreign_type [tags type]
                      (text#= self_name type_module))]
    (monad.each ! (function (_ [index short])
                    (..define short
                              (if record?
                                {.#Slot [exported? type tags index]}
                                {.#Tag [exported? type tags index]})))
                (list.enumeration tags))))
