(.using
  [library
   [lux {"-" Scope}
    [abstract
     ["[0]" monad {"+" do}]]
    [data
     ["[0]" product]
     ["[0]" text
      ["%" format {"+" format}]]
     [collection
      ["[0]" list ("[1]#[0]" functor mix)]
      ["[0]" set {"+" Set}]]]
    [math
     [number
      ["n" nat]]]
    [target
     ["_" php {"+" Var Expression Label Statement}]]]]
  ["[0]" // "_"
   [runtime {"+" Operation Phase Phase! Generator Generator!}]
   ["[1][0]" case]
   ["/[1]" // "_"
    ["[1][0]" reference]
    ["/[1]" // "_"
     [synthesis
      ["[0]" case]]
     ["/[1]" // "_"
      ["[0]"synthesis {"+" Scope Synthesis}]
      ["[1][0]" generation]
      ["//[1]" /// "_"
       ["[1][0]" phase]
       [meta
        [archive {"+" Archive}]]
       [reference
        [variable {"+" Register}]]]]]]])

(def: @scope
  (-> Nat Label)
  (|>> %.nat (format "scope") _.label))

(def: (setup offset bindings body)
  (-> Register (List Expression) Statement Statement)
  (|> bindings
      list.enumeration
      (list#each (function (_ [register value])
                   (let [variable (//case.register (n.+ offset register))]
                     (_.set! variable value))))
      list.reversed
      (list#mix _.then body)))

(def: .public (scope! statement expression archive [start initsS+ bodyS])
  (Generator! (Scope Synthesis))
  (case initsS+
    ... function/false/non-independent loop
    {.#End}
    (statement expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [@scope (# ! each ..@scope /////generation.next)
       initsO+ (monad.each ! (expression archive) initsS+)
       body! (/////generation.with_anchor [start @scope]
               (statement expression archive bodyS))]
      (in (..setup start initsO+
                   ($_ _.then
                       (_.set_label @scope)
                       body!))))))

(def: .public (scope statement expression archive [start initsS+ bodyS])
  (-> Phase! (Generator (Scope Synthesis)))
  (case initsS+
    ... function/false/non-independent loop
    {.#End}
    (expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [[[loop_module loop_artifact] scope!] (/////generation.with_new_context archive
                                              (..scope! statement expression archive [start initsS+ bodyS]))
       .let [locals (|> initsS+
                        list.enumeration
                        (list#each (|>> product.left (n.+ start) //case.register _.parameter)))
             @loop (_.constant (///reference.artifact [loop_module loop_artifact]))
             loop_variables (set.of_list _.hash (list#each product.right locals))
             referenced_variables (: (-> Synthesis (Set Var))
                                     (|>> synthesis.path/then
                                          //case.dependencies
                                          (set.of_list _.hash)))
             [directive instantiation] (: [Statement Expression]
                                          (case (|> (list#each referenced_variables initsS+)
                                                    (list#mix set.union (referenced_variables bodyS))
                                                    (set.difference loop_variables)
                                                    set.list)
                                            {.#End}
                                            [(_.define_function @loop (list) scope!)
                                             @loop]

                                            foreigns
                                            [(<| (_.define_function @loop (list#each _.parameter foreigns))
                                                 (_.return (_.closure (list#each _.parameter foreigns) (list) scope!)))
                                             (_.apply/* foreigns @loop)]))]
       _ (/////generation.execute! directive)
       _ (/////generation.save! loop_artifact directive)]
      (in (_.apply/* (list) instantiation)))))

(def: @temp
  (_.var "lux_again_values"))

(def: .public (again! statement expression archive argsS+)
  (Generator! (List Synthesis))
  (do [! ///////phase.monad]
    [[offset @scope] /////generation.anchor
     argsO+ (monad.each ! (expression archive) argsS+)]
    (in ($_ _.then
            (_.set! @temp (_.array/* argsO+))
            (..setup offset
                     (|> argsO+
                         list.enumeration
                         (list#each (function (_ [idx _])
                                      (_.item (_.int (.int idx)) @temp))))
                     (_.go_to @scope))))))
