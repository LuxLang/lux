(.module:
  [library
   [lux (#- Scope)
    [abstract
     ["." monad (#+ do)]]
    [data
     ["." product]
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor fold)]
      ["." set (#+ Set)]]]
    [math
     [number
      ["n" nat]]]
    [target
     ["_" php (#+ Var Expression Label Statement)]]]]
  ["." // #_
   [runtime (#+ Operation Phase Phase! Generator Generator!)]
   ["#." case]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     [synthesis
      ["." case]]
     ["/#" // #_
      ["."synthesis (#+ Scope Synthesis)]
      ["#." generation]
      ["//#" /// #_
       ["#." phase]
       [meta
        [archive (#+ Archive)]]
       [reference
        [variable (#+ Register)]]]]]]])

(def: @scope
  (-> Nat Label)
  (|>> %.nat (format "scope") _.label))

(def: (setup offset bindings body)
  (-> Register (List Expression) Statement Statement)
  (|> bindings
      list.enumeration
      (list\map (function (_ [register value])
                  (let [variable (//case.register (n.+ offset register))]
                    (_.set! variable value))))
      list.reversed
      (list\fold _.then body)))

(def: #export (scope! statement expression archive [start initsS+ bodyS])
  (Generator! (Scope Synthesis))
  (case initsS+
    ## function/false/non-independent loop
    #.End
    (statement expression archive bodyS)

    ## true loop
    _
    (do {! ///////phase.monad}
      [@scope (\ ! map ..@scope /////generation.next)
       initsO+ (monad.map ! (expression archive) initsS+)
       body! (/////generation.with_anchor [start @scope]
               (statement expression archive bodyS))]
      (in (..setup start initsO+
                   ($_ _.then
                       (_.set_label @scope)
                       body!))))))

(def: #export (scope statement expression archive [start initsS+ bodyS])
  (-> Phase! (Generator (Scope Synthesis)))
  (case initsS+
    ## function/false/non-independent loop
    #.End
    (expression archive bodyS)

    ## true loop
    _
    (do {! ///////phase.monad}
      [[[loop_module loop_artifact] scope!] (/////generation.with_new_context archive
                                              (..scope! statement expression archive [start initsS+ bodyS]))
       #let [locals (|> initsS+
                        list.enumeration
                        (list\map (|>> product.left (n.+ start) //case.register _.parameter)))
             @loop (_.constant (///reference.artifact [loop_module loop_artifact]))
             loop_variables (set.of_list _.hash (list\map product.right locals))
             referenced_variables (: (-> Synthesis (Set Var))
                                     (|>> synthesis.path/then
                                          //case.dependencies
                                          (set.of_list _.hash)))
             [directive instantiation] (: [Statement Expression]
                                          (case (|> (list\map referenced_variables initsS+)
                                                    (list\fold set.union (referenced_variables bodyS))
                                                    (set.difference loop_variables)
                                                    set.to_list)
                                            #.End
                                            [(_.define_function @loop (list) scope!)
                                             @loop]

                                            foreigns
                                            [(<| (_.define_function @loop (list\map _.parameter foreigns))
                                                 (_.return (_.closure (list\map _.parameter foreigns) (list) scope!)))
                                             (_.apply/* foreigns @loop)]))]
       _ (/////generation.execute! directive)
       _ (/////generation.save! loop_artifact directive)]
      (in (_.apply/* (list) instantiation)))))

(def: @temp
  (_.var "lux_recur_values"))

(def: #export (recur! statement expression archive argsS+)
  (Generator! (List Synthesis))
  (do {! ///////phase.monad}
    [[offset @scope] /////generation.anchor
     argsO+ (monad.map ! (expression archive) argsS+)]
    (in ($_ _.then
            (_.set! @temp (_.array/* argsO+))
            (..setup offset
                     (|> argsO+
                         list.enumeration
                         (list\map (function (_ [idx _])
                                     (_.nth (_.int (.int idx)) @temp))))
                     (_.go_to @scope))))))
