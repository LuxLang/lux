(.using
 [library
  [lux (.except Scope)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.open: "[1]#[0]" functor mix)]
     ["[0]" set (.only Set)]]]
   [math
    [number
     ["n" nat]]]
   [target
    ["_" php (.only Var Expression Label Statement)]]]]
 ["[0]" //
  [runtime (.only Operation Phase Phase! Generator Generator!)]
  ["[1][0]" case]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    [synthesis
     ["[0]" case]]
    ["/[1]" //
     ["[0]" synthesis (.only Scope Synthesis)]
     ["[1][0]" generation]
     ["//[1]" ///
      ["[1][0]" phase]
      [meta
       [archive (.only Archive)]]
      [reference
       [variable (.only Register)]]]]]]])

(def: @scope
  (-> Nat Label)
  (|>> %.nat (format "scope") _.label))

(def: (setup offset bindings body)
  (-> Register (List Expression) Statement Statement)
  ... TODO: There is a bug in the way the variables are updated. Do it like it's done in either JS or Lua.
  (|> bindings
      list.enumeration
      (list#each (function (_ [register value])
                   (let [variable (//case.register (n.+ offset register))]
                     (_.set! variable value))))
      list.reversed
      (list#mix _.then body)))

(def: .public (scope! statement expression archive [start initsS+ bodyS])
  (Generator! (Scope Synthesis))
  (case initsS+
    ... function/false/non-independent loop
    {.#End}
    (statement expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [@scope (at ! each ..@scope /////generation.next)
       initsO+ (monad.each ! (expression archive) initsS+)
       body! (/////generation.with_anchor [start @scope]
               (statement expression archive bodyS))]
      (in (..setup start initsO+
                   (all _.then
                        (_.set_label @scope)
                        body!))))))

(def: .public (scope statement expression archive [start initsS+ bodyS])
  (-> Phase! (Generator (Scope Synthesis)))
  (case initsS+
    ... function/false/non-independent loop
    {.#End}
    (expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [[[loop_module loop_artifact] scope!] (/////generation.with_new_context archive
                                              (..scope! statement expression archive [start initsS+ bodyS]))
       .let [locals (|> initsS+
                        list.enumeration
                        (list#each (|>> product.left (n.+ start) //case.register _.parameter)))
             @loop (_.constant (///reference.artifact [loop_module loop_artifact]))
             loop_variables (set.of_list _.hash (list#each product.right locals))
             referenced_variables (is (-> Synthesis (Set Var))
                                      (|>> synthesis.path/then
                                           //case.dependencies
                                           (set.of_list _.hash)))
             [directive instantiation] (is [Statement Expression]
                                           (case (|> (list#each referenced_variables initsS+)
                                                     (list#mix set.union (referenced_variables bodyS))
                                                     (set.difference loop_variables)
                                                     set.list)
                                             {.#End}
                                             [(_.define_function @loop (list) scope!)
                                              @loop]

                                             foreigns
                                             [(<| (_.define_function @loop (list#each _.parameter foreigns))
                                                  (_.return (_.closure (list#each _.parameter foreigns) (list) scope!)))
                                              (_.apply foreigns @loop)]))]
       _ (/////generation.execute! directive)
       _ (/////generation.save! loop_artifact directive)]
      (in (_.apply (list) instantiation)))))

... TODO: Stop using a constant hard-coded variable. Generate a new one each time.
(def: @temp
  (_.var "lux_again_values"))

(def: .public (again! statement expression archive argsS+)
  (Generator! (List Synthesis))
  (do [! ///////phase.monad]
    [[offset @scope] /////generation.anchor
     argsO+ (monad.each ! (expression archive) argsS+)]
    (in (all _.then
             (_.set! @temp (_.array/* argsO+))
             (..setup offset
                      (|> argsO+
                          list.enumeration
                          (list#each (function (_ [idx _])
                                       (_.item (_.int (.int idx)) @temp))))
                      (_.go_to @scope))))))
