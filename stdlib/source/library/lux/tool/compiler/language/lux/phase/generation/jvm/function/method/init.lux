(.using
 [library
  [lux {"-" Type type}
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" try]]
   [data
    [collection
     ["[0]" list ("[1]#[0]" monoid functor)]]]
   [math
    [number
     ["n" nat]]]
   [target
    [jvm
     ["_" bytecode {"+" Bytecode}]
     ["[0]" method {"+" Method}]
     [encoding
      ["[0]" signed]]
     [constant
      [pool {"+" Resource}]]
     ["[0]" type {"+" Type}
      ["[0]" category {"+" Class Value}]]]]]]
 ["[0]" //
  ["[1][0]" implementation]
  ["/[1]" // "_"
   ["[1][0]" abstract]
   [field
    [constant
     ["[1][0]" arity]]
    [variable
     ["[1][0]" foreign]
     ["[1][0]" partial]]]
   ["/[1]" // "_"
    ["[1][0]" type]
    ["[1][0]" reference]
    [////
     [analysis {"+" Environment}]
     [synthesis {"+" Synthesis}]
     [///
      ["[0]" arity {"+" Arity}]
      [reference
       [variable {"+" Register}]]]]]]])

(def: .public name "<init>")

(def: (partials arity)
  (-> Arity (List (Type Value)))
  (list.repeated (-- arity) ////type.value))

(def: .public (type environment arity)
  (-> (Environment Synthesis) Arity (Type category.Method))
  (type.method [(list)
                (list#composite (///foreign.closure environment)
                                (if (arity.multiary? arity)
                                  (list& ///arity.type (..partials arity))
                                  (list)))
                type.void
                (list)]))

(def: no_partials
  (|> +0
      signed.s1
      try.trusted
      _.bipush))

(def: .public (super environment_size arity)
  (-> Nat Arity (Bytecode Any))
  (let [arity_register (++ environment_size)]
    ($_ _.composite
        (if (arity.unary? arity)
          ..no_partials
          (_.iload arity_register))
        (_.invokespecial ///abstract.class ..name ///abstract.init))))

(def: (store_all amount put offset)
  (-> Nat
      (-> Register (Bytecode Any) (Bytecode Any))
      (-> Register Register)
      (Bytecode Any))
  (|> (list.indices amount)
      (list#each (function (_ register)
                   (put register
                        (_.aload (offset register)))))
      (monad.all _.monad)))

(def: .public (method class environment arity)
  (-> (Type Class) (Environment Synthesis) Arity (Resource Method))
  (let [environment_size (list.size environment)
        offset_foreign (: (-> Register Register)
                          (n.+ 1))
        offset_arity (: (-> Register Register)
                        (|>> offset_foreign (n.+ environment_size)))
        offset_partial (: (-> Register Register)
                          (|>> offset_arity (n.+ 1)))]
    (method.method //.modifier ..name
                   (..type environment arity)
                   (list)
                   {.#Some ($_ _.composite
                               ////reference.this
                               (..super environment_size arity)
                               (store_all environment_size (///foreign.put class) offset_foreign)
                               (store_all (-- arity) (///partial.put class) offset_partial)
                               _.return)})))
