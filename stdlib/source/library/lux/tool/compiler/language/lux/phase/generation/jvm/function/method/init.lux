(.using
 [library
  [lux (.except Type type)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" try]]
   [data
    [collection
     ["[0]" list (.open: "[1]#[0]" monoid functor)]]]
   [math
    [number
     ["n" nat]]]
   [target
    [jvm
     ["_" bytecode (.only Bytecode)]
     ["[0]" method (.only Method)]
     [encoding
      ["[0]" signed]]
     [constant
      [pool (.only Resource)]]
     ["[0]" type (.only Type)
      ["[0]" category (.only Class Value)]]]]]]
 ["[0]" // (.only)
  ["[1][0]" implementation]
  ["/[1]" //
   ["[1][0]" abstract]
   [field
    [constant
     ["[1][0]" arity]]
    [variable
     ["[1][0]" foreign]
     ["[1][0]" partial]]]
   ["/[1]" //
    ["[1][0]" type]
    ["[1][0]" reference]
    [////
     [analysis (.only Environment)]
     [synthesis (.only Synthesis)]
     [///
      ["[0]" arity (.only Arity)]
      [reference
       [variable (.only Register)]]]]]]])

(def: .public name "<init>")

(def: (partials arity)
  (-> Arity (List (Type Value)))
  (list.repeated (-- arity) ////type.value))

(def: .public (type environment arity)
  (-> (Environment Synthesis) Arity (Type category.Method))
  (type.method [(list)
                (list#composite (///foreign.closure environment)
                                (if (arity.multiary? arity)
                                  (partial_list ///arity.type (..partials arity))
                                  (list)))
                type.void
                (list)]))

(def: no_partials
  (|> +0
      signed.s1
      try.trusted
      _.bipush))

(def: .public (super environment_size arity)
  (-> Nat Arity (Bytecode Any))
  (let [arity_register (++ environment_size)]
    (all _.composite
         (if (arity.unary? arity)
           ..no_partials
           (_.iload arity_register))
         (_.invokespecial ///abstract.class ..name ///abstract.init))))

(def: (store_all amount put offset)
  (-> Nat
      (-> Register (Bytecode Any) (Bytecode Any))
      (-> Register Register)
      (Bytecode Any))
  (|> (list.indices amount)
      (list#each (function (_ register)
                   (put register
                        (_.aload (offset register)))))
      (monad.all _.monad)))

(def: .public (method class environment arity)
  (-> (Type Class) (Environment Synthesis) Arity (Resource Method))
  (let [environment_size (list.size environment)
        offset_foreign (is (-> Register Register)
                           (n.+ 1))
        offset_arity (is (-> Register Register)
                         (|>> offset_foreign (n.+ environment_size)))
        offset_partial (is (-> Register Register)
                           (|>> offset_arity (n.+ 1)))]
    (method.method //.modifier ..name
                   #0 (..type environment arity)
                   (list)
                   {.#Some (all _.composite
                                ////reference.this
                                (..super environment_size arity)
                                (store_all environment_size (///foreign.put class) offset_foreign)
                                (store_all (-- arity) (///partial.put class) offset_partial)
                                _.return)})))
