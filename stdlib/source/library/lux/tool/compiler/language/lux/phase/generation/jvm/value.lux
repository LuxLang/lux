(.module:
  [library
   [lux {"-" Type type}
    [target
     [jvm
      ["_" bytecode {"+" Bytecode}]
      ["[0]" type {"+" Type} ("[1]#[0]" equivalence)
       [category {"+" Primitive}]
       ["[0]" box]]]]]])

(def: .public field "value")

(template [<name> <boolean> <byte> <short> <int> <long> <float> <double> <char>]
  [(def: (<name> type)
     (-> (Type Primitive) Text)
     (`` (cond (~~ (template [<type> <output>]
                     [(type#= <type> type) <output>]
                     
                     [type.boolean <boolean>]
                     [type.byte    <byte>]
                     [type.short   <short>]
                     [type.int     <int>]
                     [type.long    <long>]
                     [type.float   <float>]
                     [type.double  <double>]
                     [type.char    <char>]))
               ... else
               (undefined))))]

  [primitive_wrapper
   box.boolean box.byte box.short box.int
   box.long box.float box.double box.char]
  [primitive_unwrap
   "booleanValue" "byteValue" "shortValue" "intValue"
   "longValue" "floatValue" "doubleValue" "charValue"]
  )

(def: .public (wrap type)
  (-> (Type Primitive) (Bytecode Any))
  (let [wrapper (type.class (primitive_wrapper type) (list))]
    (_.invokestatic wrapper "valueOf"
                    (type.method [(list) (list type) wrapper (list)]))))

(def: .public (unwrap type)
  (-> (Type Primitive) (Bytecode Any))
  (let [wrapper (type.class (primitive_wrapper type) (list))]
    ($_ _.composite
        (_.checkcast wrapper)
        (_.invokevirtual wrapper (primitive_unwrap type) (type.method [(list) (list) type (list)])))))
