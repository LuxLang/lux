(.module:
  [library
   [lux (#- case let if)
    [abstract
     ["." monad (#+ do)]]
    [data
     ["." product]
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor mix)]
      ["." set]]]
    [math
     [number
      ["i" int]]]
    [target
     ["_" php (#+ Expression Var Statement)]]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Phase! Generator Generator!)]
   ["#." reference]
   ["#." primitive]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     ["#." synthesis #_
      ["#/." case]]
     ["/#" // #_
      ["#." synthesis (#+ Member Synthesis Path)]
      ["#." generation]
      ["//#" /// #_
       [reference
        ["#." variable (#+ Register)]]
       ["#." phase ("#\." monad)]
       [meta
        [archive (#+ Archive)]]]]]]])

(def: .public register
  (-> Register Var)
  (|>> (///reference.local //reference.system) :expected))

(def: .public capture
  (-> Register Var)
  (|>> (///reference.foreign //reference.system) :expected))

(def: .public (let expression archive [valueS register bodyS])
  (Generator [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueG (expression archive valueS)
     bodyG (expression archive bodyS)]
    (in (|> bodyG
            (list (_.set (..register register) valueG))
            _.array/*
            (_.item (_.int +1))))))

(def: .public (let! statement expression archive [valueS register bodyS])
  (Generator! [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueO (expression archive valueS)
     body! (statement expression archive bodyS)]
    (in ($_ _.then
            (_.set! (..register register) valueO)
            body!))))

(def: .public (if expression archive [testS thenS elseS])
  (Generator [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [testG (expression archive testS)
     thenG (expression archive thenS)
     elseG (expression archive elseS)]
    (in (_.? testG thenG elseG))))

(def: .public (if! statement expression archive [testS thenS elseS])
  (Generator! [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [test! (expression archive testS)
     then! (statement expression archive thenS)
     else! (statement expression archive elseS)]
    (in (_.if test!
          then!
          else!))))

(def: .public (get expression archive [pathP valueS])
  (Generator [(List Member) Synthesis])
  (do ///////phase.monad
    [valueG (expression archive valueS)]
    (in (list\mix (function (_ side source)
                    (.let [method (.case side
                                    (^template [<side> <accessor>]
                                      [(<side> lefts)
                                       (<accessor> (_.int (.int lefts)))])
                                    ([#.Left //runtime.tuple//left]
                                     [#.Right //runtime.tuple//right]))]
                      (method source)))
                  valueG
                  (list.reversed pathP)))))

(def: @savepoint (_.var "lux_pm_savepoint"))
(def: @cursor (_.var "lux_pm_cursor"))
(def: @temp (_.var "lux_pm_temp"))

(def: (push! value)
  (-> Expression Statement)
  (_.; (_.array_push/2 [@cursor value])))

(def: peek_and_pop
  Expression
  (_.array_pop/1 @cursor))

(def: pop!
  Statement
  (_.; ..peek_and_pop))

(def: peek
  Expression
  (_.item (|> @cursor _.count/1 (_.- (_.int +1)))
          @cursor))

(def: save!
  Statement
  (.let [cursor (_.array_slice/2 [@cursor (_.int +0)])]
    (_.; (_.array_push/2 [@savepoint cursor]))))

(def: restore!
  Statement
  (_.set! @cursor (_.array_pop/1 @savepoint)))

(def: fail! _.break)

(def: (multi_pop! pops)
  (-> Nat Statement)
  (_.; (_.array_splice/3 [@cursor
                          (_.int +0)
                          (_.int (i.* -1 (.int pops)))])))

(template [<name> <flag> <prep>]
  [(def: (<name> simple? idx)
     (-> Bit Nat Statement)
     ($_ _.then
         (_.set! @temp (|> idx <prep> .int _.int (//runtime.sum//get ..peek <flag>)))
         (.if simple?
           (_.when (_.is_null/1 @temp)
                   fail!)
           (_.if (_.is_null/1 @temp)
             fail!
             (..push! @temp)))))]

  [left_choice  _.null        (<|)]
  [right_choice (_.string "") ++]
  )

(def: (alternation pre! post!)
  (-> Statement Statement Statement)
  ($_ _.then
      (_.do_while (_.bool false)
                  ($_ _.then
                      ..save!
                      pre!))
      ($_ _.then
          ..restore!
          post!)))

(def: (pattern_matching' statement expression archive)
  (Generator! Path)
  (function (recur pathP)
    (.case pathP
      (#/////synthesis.Then bodyS)
      (statement expression archive bodyS)

      #/////synthesis.Pop
      (///////phase\in ..pop!)

      (#/////synthesis.Bind register)
      (///////phase\in (_.set! (..register register) ..peek))

      (#/////synthesis.Bit_Fork when thenP elseP)
      (do {! ///////phase.monad}
        [then! (recur thenP)
         else! (.case elseP
                 (#.Some elseP)
                 (recur elseP)

                 #.None
                 (in ..fail!))]
        (in (.if when
              (_.if ..peek
                then!
                else!)
              (_.if ..peek
                else!
                then!))))

      (^template [<tag> <format>]
        [(<tag> item)
         (do {! ///////phase.monad}
           [clauses (monad.each ! (function (_ [match then])
                                    (do !
                                      [then! (recur then)]
                                      (in [(_.=== (|> match <format>)
                                                  ..peek)
                                           then!])))
                                (#.Item item))]
           (in (_.cond clauses ..fail!)))])
      ([#/////synthesis.I64_Fork //primitive.i64]
       [#/////synthesis.F64_Fork //primitive.f64]
       [#/////synthesis.Text_Fork //primitive.text])

      (^template [<complex> <simple> <choice>]
        [(^ (<complex> idx))
         (///////phase\in (<choice> false idx))

         (^ (<simple> idx nextP))
         (|> nextP
             recur
             (\ ///////phase.monad each (_.then (<choice> true idx))))])
      ([/////synthesis.side/left  /////synthesis.simple_left_side  ..left_choice]
       [/////synthesis.side/right /////synthesis.simple_right_side ..right_choice])

      (^ (/////synthesis.member/left 0))
      (///////phase\in (|> ..peek (_.item (_.int +0)) ..push!))
      
      (^template [<pm> <getter>]
        [(^ (<pm> lefts))
         (///////phase\in (|> ..peek (<getter> (_.int (.int lefts))) ..push!))])
      ([/////synthesis.member/left  //runtime.tuple//left]
       [/////synthesis.member/right //runtime.tuple//right])

      (^ (/////synthesis.!bind_top register thenP))
      (do ///////phase.monad
        [then! (recur thenP)]
        (///////phase\in ($_ _.then
                             (_.set! (..register register) ..peek_and_pop)
                             then!)))

      ... (^ (/////synthesis.!multi_pop nextP))
      ... (.let [[extra_pops nextP'] (////synthesis/case.count_pops nextP)]
      ...   (do ///////phase.monad
      ...     [next! (recur nextP')]
      ...     (///////phase\in ($_ _.then
      ...                    (..multi_pop! (n.+ 2 extra_pops))
      ...                    next!))))

      (^template [<tag> <combinator>]
        [(^ (<tag> preP postP))
         (do ///////phase.monad
           [pre! (recur preP)
            post! (recur postP)]
           (in (<combinator> pre! post!)))])
      ([/////synthesis.path/seq _.then]
       [/////synthesis.path/alt ..alternation]))))

(def: (pattern_matching statement expression archive pathP)
  (Generator! Path)
  (do ///////phase.monad
    [iteration! (pattern_matching' statement expression archive pathP)]
    (in ($_ _.then
            (_.do_while (_.bool false)
                        iteration!)
            (_.throw (_.new (_.constant "Exception") (list (_.string ////synthesis/case.pattern_matching_error))))))))

(def: .public dependencies
  (-> Path (List Var))
  (|>> ////synthesis/case.storage
       (value@ #////synthesis/case.dependencies)
       set.list
       (list\each (function (_ variable)
                    (.case variable
                      (#///////variable.Local register)
                      (..register register)
                      
                      (#///////variable.Foreign register)
                      (..capture register))))))

(def: .public (case! statement expression archive [valueS pathP])
  (Generator! [Synthesis Path])
  (do ///////phase.monad
    [stack_init (expression archive valueS)
     pattern_matching! (pattern_matching statement expression archive pathP)]
    (in ($_ _.then
            (_.set! @cursor (_.array/* (list stack_init)))
            (_.set! @savepoint (_.array/* (list)))
            pattern_matching!))))

(def: .public (case statement expression archive [valueS pathP])
  (-> Phase! (Generator [Synthesis Path]))
  (do {! ///////phase.monad}
    [[[case_module case_artifact] case!] (/////generation.with_new_context archive
                                           (case! statement expression archive [valueS pathP]))
     .let [@case (_.constant (///reference.artifact [case_module case_artifact]))
           @dependencies+ (..dependencies (/////synthesis.path/seq (/////synthesis.path/then valueS)
                                                                   pathP))
           directive (_.define_function @case (list\each _.parameter @dependencies+) case!)]
     _ (/////generation.execute! directive)
     _ (/////generation.save! case_artifact directive)]
    (in (_.apply/* @dependencies+ @case))))
