(.require
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]]
   [data
    [collection
     ["[0]" array (.only Array)]
     ["[0]" dictionary]
     ["[0]" list]]]
   [macro
    ["[0]" code
     ["<[1]>" \\parser (.only Parser)]]]
   ["[0]" type (.only)
    ["[0]" check]]
   ["@" target (.only)
    ["_" php]]]]
 [//
  ["/" lux (.only custom)]
  [//
   ["[0]" bundle]
   [//
    ["[0]" analysis
     ["[1]/[0]" type]]
    [//
     ["[0]" analysis (.only Analysis Operation Phase Handler Bundle)]
     [///
      ["[0]" phase]]]]]])

(def array::new
  Handler
  (custom
   [<code>.any
    (function (_ extension phase archive lengthC)
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [lengthA (analysis/type.with_type Nat
                       (phase archive lengthC))
             _ (analysis/type.infer (type_literal (Array :var:)))]
            (in {analysis.#Extension extension (list lengthA)}))))]))

(def array::length
  Handler
  (custom
   [<code>.any
    (function (_ extension phase archive arrayC)
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [arrayA (analysis/type.with_type (type_literal (Array :var:))
                      (phase archive arrayC))
             _ (analysis/type.infer Nat)]
            (in {analysis.#Extension extension (list arrayA)}))))]))

(def array::read
  Handler
  (custom
   [(<>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [indexA (analysis/type.with_type Nat
                      (phase archive indexC))
             arrayA (analysis/type.with_type (type_literal (Array :var:))
                      (phase archive arrayC))
             _ (analysis/type.infer :var:)]
            (in {analysis.#Extension extension (list indexA arrayA)}))))]))

(def array::write
  Handler
  (custom
   [(all <>.and <code>.any <code>.any <code>.any)
    (function (_ extension phase archive [indexC valueC arrayC])
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [indexA (analysis/type.with_type Nat
                      (phase archive indexC))
             valueA (analysis/type.with_type :var:
                      (phase archive valueC))
             arrayA (analysis/type.with_type (type_literal (Array :var:))
                      (phase archive arrayC))
             _ (analysis/type.infer (type_literal (Array :var:)))]
            (in {analysis.#Extension extension (list indexA valueA arrayA)}))))]))

(def array::delete
  Handler
  (custom
   [(all <>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [indexA (analysis/type.with_type Nat
                      (phase archive indexC))
             arrayA (analysis/type.with_type (type_literal (Array :var:))
                      (phase archive arrayC))
             _ (analysis/type.infer (type_literal (Array :var:)))]
            (in {analysis.#Extension extension (list indexA arrayA)}))))]))

(def bundle::array
  Bundle
  (<| (bundle.prefix "array")
      (|> bundle.empty
          (bundle.install "new" array::new)
          (bundle.install "length" array::length)
          (bundle.install "read" array::read)
          (bundle.install "write" array::write)
          (bundle.install "delete" array::delete)
          )))

(def Null
  (for @.php ffi.Null
       Any))

(def Object
  (for @.php (type_literal (ffi.Object Any))
       Any))

(def Function
  (for @.php ffi.Function
       Any))

(def object::new
  Handler
  (custom
   [(all <>.and <code>.text (<>.some <code>.any))
    (function (_ extension phase archive [constructor inputsC])
      (do [! phase.monad]
        [inputsA (monad.each ! (|>> (phase archive) (analysis/type.with_type Any)) inputsC)
         _ (analysis/type.infer .Any)]
        (in {analysis.#Extension extension (list.partial (analysis.text constructor) inputsA)})))]))

(def object::get
  Handler
  (custom
   [(all <>.and <code>.text <code>.any)
    (function (_ extension phase archive [fieldC objectC])
      (do phase.monad
        [objectA (analysis/type.with_type ..Object
                   (phase archive objectC))
         _ (analysis/type.infer .Any)]
        (in {analysis.#Extension extension (list (analysis.text fieldC)
                                                 objectA)})))]))

(def object::do
  Handler
  (custom
   [(all <>.and <code>.text <code>.any (<>.some <code>.any))
    (function (_ extension phase archive [methodC objectC inputsC])
      (do [! phase.monad]
        [objectA (analysis/type.with_type ..Object
                   (phase archive objectC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.with_type Any)) inputsC)
         _ (analysis/type.infer .Any)]
        (in {analysis.#Extension extension (list.partial (analysis.text methodC)
                                                         objectA
                                                         inputsA)})))]))

(def bundle::object
  Bundle
  (<| (bundle.prefix "object")
      (|> bundle.empty
          (bundle.install "new" object::new)
          (bundle.install "get" object::get)
          (bundle.install "do" object::do)
          (bundle.install "null" (/.nullary ..Null))
          (bundle.install "null?" (/.unary Any Bit))
          )))

(def php::constant
  Handler
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.infer Any)]
        (in {analysis.#Extension extension (list (analysis.text name))})))]))

(def php::apply
  Handler
  (custom
   [(all <>.and <code>.any (<>.some <code>.any))
    (function (_ extension phase archive [abstractionC inputsC])
      (do [! phase.monad]
        [abstractionA (analysis/type.with_type ..Function
                        (phase archive abstractionC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.with_type Any)) inputsC)
         _ (analysis/type.infer Any)]
        (in {analysis.#Extension extension (list.partial abstractionA inputsA)})))]))

(def php::pack
  Handler
  (custom
   [(all <>.and <code>.any <code>.any)
    (function (_ extension phase archive [formatC dataC])
      (do [! phase.monad]
        [formatA (analysis/type.with_type Text
                   (phase archive formatC))
         dataA (analysis/type.with_type (type_literal (Array (I64 Any)))
                 (phase archive dataC))
         _ (analysis/type.infer Text)]
        (in {analysis.#Extension extension (list formatA dataA)})))]))

(def .public bundle
  Bundle
  (<| (bundle.prefix "php")
      (|> bundle.empty
          (dictionary.composite bundle::array)
          (dictionary.composite bundle::object)

          (bundle.install "constant" php::constant)
          (bundle.install "apply" php::apply)
          (bundle.install "pack" php::pack)
          (bundle.install "script universe" (/.nullary .Bit))
          )))
