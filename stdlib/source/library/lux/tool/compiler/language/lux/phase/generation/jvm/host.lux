(.module:
  [library
   [lux {"-" [Definition]}
    ["." ffi {"+" [import: do_to object]}]
    [abstract
     [monad {"+" [do]}]]
    [control
     pipe
     ["." try {"+" [Try]}]
     ["." exception {"+" [exception:]}]
     ["." io {"+" [IO io]}]
     [concurrency
      ["." atom {"+" [Atom atom]}]]]
    [data
     [binary {"+" [Binary]}]
     ["." product]
     ["." text ("#\." hash)
      ["%" format {"+" [format]}]]
     [collection
      ["." array]
      ["." dictionary {"+" [Dictionary]}]
      ["." row]]
     ["." format "_"
      ["#" binary]]]
    [target
     [jvm
      ["." loader {"+" [Library]}]
      ["_" bytecode {"+" [Bytecode]}]
      ["." modifier {"+" [Modifier]} ("#\." monoid)]
      ["." field {"+" [Field]}]
      ["." method {"+" [Method]}]
      ["." version]
      ["." class {"+" [Class]}]
      ["." encoding "_"
       ["#/." name]]
      ["." type
       ["." descriptor]]]]
    [tool
     [compiler
      ["." name]]]]]
  ["." // "_"
   ["#." runtime {"+" [Definition]}]]
  )

(import: java/lang/reflect/Field
  (get ["?" java/lang/Object] "try" "?" java/lang/Object))

(import: (java/lang/Class a)
  (getField [java/lang/String] "try" java/lang/reflect/Field))

(import: java/lang/Object
  (getClass [] (java/lang/Class java/lang/Object)))

(import: java/lang/ClassLoader)

(def: value::field "value")
(def: value::type (type.class "java.lang.Object" (list)))
(def: value::modifier ($_ modifier\composite field.public field.final field.static))

(def: init::type (type.method [(list) type.void (list)]))
(def: init::modifier ($_ modifier\composite method.public method.static method.strict))

(exception: .public (cannot_load {class Text} {error Text})
  (exception.report
   ["Class" class]
   ["Error" error]))

(exception: .public (invalid_field {class Text} {field Text} {error Text})
  (exception.report
   ["Class" class]
   ["Field" field]
   ["Error" error]))

(exception: .public (invalid_value {class Text})
  (exception.report
   ["Class" class]))

(def: (class_value class_name class)
  (-> Text (java/lang/Class java/lang/Object) (Try Any))
  (case (java/lang/Class::getField ..value::field class)
    (#try.Success field)
    (case (java/lang/reflect/Field::get #.None field)
      (#try.Success ?value)
      (case ?value
        (#.Some value)
        (#try.Success value)
        
        #.None
        (exception.except ..invalid_value [class_name]))
      
      (#try.Failure error)
      (exception.except ..cannot_load [class_name error]))
    
    (#try.Failure error)
    (exception.except ..invalid_field [class_name ..value::field error])))

(def: class_path_separator
  ".")

(def: (evaluate! library loader eval_class valueG)
  (-> Library java/lang/ClassLoader Text (Bytecode Any) (Try [Any Definition]))
  (let [bytecode_name (text.replaced class_path_separator .module_separator eval_class)
        bytecode (class.class version.v6_0
                              class.public
                              (encoding/name.internal bytecode_name)
                              (encoding/name.internal "java.lang.Object") (list)
                              (list (field.field ..value::modifier ..value::field ..value::type (row.row)))
                              (list (method.method ..init::modifier "<clinit>" ..init::type
                                                   (list)
                                                   (#.Some
                                                    ($_ _.composite
                                                        valueG
                                                        (_.putstatic (type.class bytecode_name (list)) ..value::field ..value::type)
                                                        _.return))))
                              (row.row))]
    (io.run! (do {! (try.with io.monad)}
               [bytecode (\ ! each (format.result class.writer)
                            (io.io bytecode))
                _ (loader.store eval_class bytecode library)
                class (loader.load eval_class loader)
                value (\ io.monad in (class_value eval_class class))]
               (in [value
                    [eval_class bytecode]])))))

(def: (execute! library loader temp_label [class_name class_bytecode])
  (-> Library java/lang/ClassLoader Text Definition (Try Any))
  (io.run! (do (try.with io.monad)
             [existing_class? (|> (atom.read! library)
                                  (\ io.monad each (function (_ library)
                                                     (dictionary.key? library class_name)))
                                  (try.lifted io.monad)
                                  (: (IO (Try Bit))))
              _ (if existing_class?
                  (in [])
                  (loader.store class_name class_bytecode library))]
             (loader.load class_name loader))))

(def: (define! library loader [module name] valueG)
  (-> Library java/lang/ClassLoader Name (Bytecode Any) (Try [Text Any Definition]))
  (let [class_name (format (text.replaced .module_separator class_path_separator module)
                           class_path_separator (name.normal name)
                           "___" (%.nat (text\hash name)))]
    (do try.monad
      [[value definition] (evaluate! library loader class_name valueG)]
      (in [class_name value definition]))))

(def: .public host
  (IO //runtime.Host)
  (io (let [library (loader.new_library [])
            loader (loader.memory library)]
        (: //runtime.Host
           (implementation
            (def: (evaluate! temp_label valueG)
              (let [eval_class (|> temp_label name.normal (text.replaced " " "$"))]
                (\ try.monad each product.left
                   (..evaluate! library loader eval_class valueG))))
            
            (def: execute!
              (..execute! library loader))
            
            (def: define!
              (..define! library loader)))))))
