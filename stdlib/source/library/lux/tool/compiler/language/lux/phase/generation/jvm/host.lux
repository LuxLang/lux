(.require
 [library
  [lux (.except Definition)
   ["[0]" ffi (.only import do_to object)]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only exception)]
    ["[0]" io (.only IO io)]
    [concurrency
     ["[0]" atom (.only Atom atom)]]]
   [data
    ["[0]" product]
    [binary (.only Binary)
     ["[0]" \\format]]
    ["[0]" text (.use "[1]#[0]" hash)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" array]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" sequence]]]
   [target
    [jvm
     ["_" bytecode (.only Bytecode)]
     ["[0]" loader (.only Library)]
     ["[0]" modifier (.only Modifier) (.use "[1]#[0]" monoid)]
     ["[0]" field (.only Field)]
     ["[0]" method (.only Method)]
     ["[0]" version]
     ["[0]" class (.only Class)]
     ["[0]" encoding
      ["[1]/[0]" name]]
     ["[0]" type (.only)
      ["[0]" descriptor]]]]
   [tool
    [compiler
     [meta
      [io (.only lux_context)]
      [archive
       ["[0]" unit]]]]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Definition)]
  ["[1][0]" type]
  ["[1][0]" value]]
 )

(import java/lang/reflect/Field
  "[1]::[0]"
  (get ["?" java/lang/Object] "try" "?" java/lang/Object))

(import (java/lang/Class a)
  "[1]::[0]"
  (getField [java/lang/String] "try" java/lang/reflect/Field))

(import java/lang/Object
  "[1]::[0]"
  (getClass [] (java/lang/Class java/lang/Object)))

(import java/lang/ClassLoader
  "[1]::[0]")

(def value::modifier (all modifier#composite field.public field.final field.static))

(def init::type (type.method [(list) (list) type.void (list)]))
(def init::modifier (all modifier#composite method.public method.static method.strict))

(exception .public (cannot_load [class Text
                                 error Text])
  (exception.report
   "Class" class
   "Error" error))

(exception .public (invalid_field [class Text
                                   field Text
                                   error Text])
  (exception.report
   "Class" class
   "Field" field
   "Error" error))

(exception .public (invalid_value [class Text])
  (exception.report
   "Class" class))

(def (class_value class_name class)
  (-> Text (java/lang/Class java/lang/Object) (Try Any))
  (case (java/lang/Class::getField //value.field class)
    {try.#Success field}
    (case (java/lang/reflect/Field::get {.#None} field)
      {try.#Success ?value}
      (case ?value
        {.#Some value}
        {try.#Success value}
        
        {.#None}
        (exception.except ..invalid_value [class_name]))
      
      {try.#Failure error}
      (exception.except ..cannot_load [class_name error]))
    
    {try.#Failure error}
    (exception.except ..invalid_field [class_name //value.field error])))

(def class_path_separator
  ".")

(def (evaluate! library loader eval_class [@it valueG])
  (-> Library java/lang/ClassLoader Text [(Maybe unit.ID) (Bytecode Any)] (Try [Any Definition]))
  (let [bytecode_name (text.replaced class_path_separator .module_separator eval_class)
        :value: (case @it
                  {.#Some @it}
                  (type.class (//runtime.class_name @it) (list))

                  {.#None}
                  //type.value)
        bytecode (class.class version.v6_0
                   class.public
                   (encoding/name.internal bytecode_name)
                   {.#None}
                   (encoding/name.internal "java.lang.Object") (list)
                   (list (field.field ..value::modifier //value.field #0 :value: (sequence.sequence)))
                   (list (method.method ..init::modifier "<clinit>"
                                        #0 ..init::type
                                        (list)
                                        {.#Some
                                         (all _.composite
                                              valueG
                                              (_.putstatic (type.class bytecode_name (list)) //value.field :value:)
                                              _.return)}))
                   (sequence.sequence))]
    (io.run! (do [! (try.with io.monad)]
               [bytecode (at ! each (\\format.result class.format)
                             (io.io bytecode))
                _ (loader.store eval_class bytecode library)
                class (loader.load eval_class loader)
                value (at io.monad in (class_value eval_class class))]
               (in [value
                    [eval_class bytecode]])))))

(def (execute! library loader [class_name class_bytecode])
  (-> Library java/lang/ClassLoader Definition (Try Any))
  (io.run! (do (try.with io.monad)
             [existing_class? (|> (atom.read! library)
                                  (at io.monad each (function (_ library)
                                                      (dictionary.key? library class_name)))
                                  (try.lifted io.monad)
                                  (is (IO (Try Bit))))
              _ (if existing_class?
                  (in [])
                  (loader.store class_name class_bytecode library))]
             (loader.load class_name loader))))

(def (define! library loader context custom @it,valueG)
  (-> Library java/lang/ClassLoader unit.ID (Maybe Text) [(Maybe unit.ID) (Bytecode Any)] (Try [Text Any Definition]))
  (let [class_name (maybe.else (//runtime.class_name context)
                               custom)]
    (do try.monad
      [[value definition] (evaluate! library loader class_name @it,valueG)]
      (in [class_name value definition]))))

(def .public host
  (IO [java/lang/ClassLoader //runtime.Host])
  (io (let [library (loader.new_library [])
            loader (loader.memory library)]
        [loader
         (is //runtime.Host
             (implementation
              (def (evaluate context @it,valueG)
                (at try.monad each product.left
                    (..evaluate! library loader (format "E" (//runtime.class_name context)) @it,valueG)))
              
              (def execute
                (..execute! library loader))
              
              (def define
                (..define! library loader))

              (def (ingest context bytecode)
                [(//runtime.class_name context) bytecode])

              (def (re_learn context custom [_ bytecode])
                (io.run! (loader.store (maybe.else (//runtime.class_name context) custom) bytecode library)))
              
              (def (re_load context custom [declaration_name bytecode])
                (io.run!
                 (do (try.with io.monad)
                   [.let [class_name (maybe.else (//runtime.class_name context)
                                                 custom)]
                    _ (loader.store class_name bytecode library)
                    class (loader.load class_name loader)]
                   (at io.monad in (..class_value class_name class)))))
              ))])))
