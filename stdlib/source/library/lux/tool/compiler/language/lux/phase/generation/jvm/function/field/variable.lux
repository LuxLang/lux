(.module:
  [library
   [lux {"-" [Type type]}
    [data
     [collection
      ["." list ("#\." functor)]
      ["." row]]]
    [target
     [jvm
      ["." modifier {"+" [Modifier]} ("#\." monoid)]
      ["." field {"+" [Field]}]
      ["_" bytecode {"+" [Bytecode]}]
      [type {"+" [Type]}
       [category {"+" [Value Class]}]]
      [constant
       [pool {"+" [Resource]}]]]]]]
  ["." //// "_"
   ["#." type]
   ["#." reference]
   [//////
    [reference
     [variable {"+" [Register]}]]]])

(def: .public type ////type.value)

(def: .public (get class name)
  (-> (Type Class) Text (Bytecode Any))
  ($_ _.composite
      ////reference.this
      (_.getfield class name ..type)
      ))

(def: .public (put naming class register value)
  (-> (-> Register Text) (Type Class) Register (Bytecode Any) (Bytecode Any))
  ($_ _.composite
      ////reference.this
      value
      (_.putfield class (naming register) ..type)))

(def: modifier
  (Modifier Field)
  ($_ modifier\composite
      field.private
      field.final
      ))

(def: .public (variable name type)
  (-> Text (Type Value) (Resource Field))
  (field.field ..modifier name type (row.row)))

(def: .public (variables naming amount)
  (-> (-> Register Text) Nat (List (Resource Field)))
  (|> amount
      list.indices
      (list\each (function (_ register)
                   (..variable (naming register) ..type)))))
