(.module:
  [library
   [lux #*
    [abstract
     ["." monad (#+ do)]]
    [control
     ["." exception (#+ exception:)]]
    [data
     [text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." fold monoid)]]]
    ["." meta]]]
  ["." // #_
   ["#." extension]
   ["#." analysis
    ["#/." type]]
   ["/#" // #_
    ["/" directive (#+ Phase)]
    ["#." analysis
     ["#/." macro (#+ Expander)]]
    [///
     ["//" phase]
     [reference (#+)
      [variable (#+)]]]]])

(exception: .public (not_a_directive {code Code})
  (exception.report
   ["Directive" (%.code code)]))

(exception: .public (invalid_macro_call {code Code})
  (exception.report
   ["Code" (%.code code)]))

(exception: .public (macro_was_not_found {name Name})
  (exception.report
   ["Name" (%.name name)]))

(with_expansions [<lux_def_module> (as_is [|form_location| (#.Form (list& [|text_location| (#.Text "lux def module")] annotations))])]
  (def: .public (phase expander)
    (-> Expander Phase)
    (let [analyze (//analysis.phase expander)]
      (function (recur archive code)
        (case code
          (^ [_ (#.Form (list& [_ (#.Text name)] inputs))])
          (//extension.apply archive recur [name inputs])

          (^ [_ (#.Form (list& macro inputs))])
          (do {! //.monad}
            [expansion (/.lift_analysis
                        (do !
                          [macroA (//analysis/type.with_type Macro
                                    (analyze archive macro))]
                          (case macroA
                            (^ (///analysis.constant macro_name))
                            (do !
                              [?macro (//extension.lift (meta.macro macro_name))
                               macro (case ?macro
                                       (#.Some macro)
                                       (in macro)
                                       
                                       #.None
                                       (//.except ..macro_was_not_found macro_name))]
                              (//extension.lift (///analysis/macro.expand expander macro_name macro inputs)))
                            
                            _
                            (//.except ..invalid_macro_call code))))]
            (case expansion
              (^ (list& <lux_def_module> referrals))
              (|> (recur archive <lux_def_module>)
                  (\ ! map (update@ #/.referrals (list\compose referrals))))

              _
              (|> expansion
                  (monad.map ! (recur archive))
                  (\ ! map (list\fold /.merge_requirements /.no_requirements)))))

          _
          (//.except ..not_a_directive code))))))
