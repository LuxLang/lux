(.require
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]]
   [data
    [collection
     ["[0]" array]
     ["[0]" dictionary]
     ["[0]" list]]]
   [macro
    ["[0]" code
     ["<[1]>" \\parser (.only Parser)]]]
   [meta
    ["[0]" type (.only)
     ["[0]" check]]]
   ["@" target (.only)
    ["_" python]]]]
 [//
  ["/" lux (.only custom)]
  [//
   ["[0]" bundle]
   [///
    ["[0]" analysis (.only Analysis Operation Phase Handler Bundle)
     ["[1]/[0]" type]]
    [///
     ["[0]" phase]]]]])

(def array::new
  Handler
  (custom
   [<code>.any
    (function (_ extension phase archive lengthC)
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [lengthA (analysis/type.expecting Nat
                                              (phase archive lengthC))
             _ (analysis/type.inference (type_literal (array.Array' :read: :write:)))]
            (in {analysis.#Extension extension (list lengthA)}))))]))

(def array::length
  Handler
  (custom
   [<code>.any
    (function (_ extension phase archive arrayC)
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [arrayA (analysis/type.expecting (type_literal (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference Nat)]
            (in {analysis.#Extension extension (list arrayA)}))))]))

(def array::read
  Handler
  (custom
   [(<>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (analysis/type.expecting Nat
                                             (phase archive indexC))
             arrayA (analysis/type.expecting (type_literal (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference :read:)]
            (in {analysis.#Extension extension (list indexA arrayA)}))))]))

(def array::write
  Handler
  (custom
   [(all <>.and <code>.any <code>.any <code>.any)
    (function (_ extension phase archive [indexC valueC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (analysis/type.expecting Nat
                                             (phase archive indexC))
             valueA (analysis/type.expecting :write:
                                             (phase archive valueC))
             arrayA (analysis/type.expecting (type_literal (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference (type_literal (array.Array' :read: :write:)))]
            (in {analysis.#Extension extension (list indexA valueA arrayA)}))))]))

(def array::delete
  Handler
  (custom
   [(all <>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (analysis/type.expecting Nat
                                             (phase archive indexC))
             arrayA (analysis/type.expecting (type_literal (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference (type_literal (array.Array' :read: :write:)))]
            (in {analysis.#Extension extension (list indexA arrayA)}))))]))

(def bundle::array
  Bundle
  (<| (bundle.prefix "array")
      (|> bundle.empty
          (bundle.install "new" array::new)
          (bundle.install "length" array::length)
          (bundle.install "read" array::read)
          (bundle.install "write" array::write)
          (bundle.install "delete" array::delete)
          )))

(def None
  (for @.python ffi.None
       Any))

(def Object
  (for @.python (type_literal (ffi.Object Any))
       Any))

(def Function
  (for @.python ffi.Function
       Any))

(def Dict
  (for @.python ffi.Dict
       Any))

(def object::get
  Handler
  (custom
   [(all <>.and <code>.text <code>.any)
    (function (_ extension phase archive [fieldC objectC])
      (do phase.monad
        [objectA (analysis/type.expecting ..Object
                                          (phase archive objectC))
         _ (analysis/type.inference .Any)]
        (in {analysis.#Extension extension (list (analysis.text fieldC)
                                                 objectA)})))]))

(def object::do
  Handler
  (custom
   [(all <>.and <code>.text <code>.any (<code>.tuple (<>.some <code>.any)))
    (function (_ extension phase archive [methodC objectC inputsC])
      (do [! phase.monad]
        [objectA (analysis/type.expecting ..Object
                                          (phase archive objectC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.expecting Any)) inputsC)
         _ (analysis/type.inference .Any)]
        (in {analysis.#Extension extension (list.partial (analysis.text methodC)
                                                         objectA
                                                         inputsA)})))]))

(def bundle::object
  Bundle
  (<| (bundle.prefix "object")
      (|> bundle.empty
          (bundle.install "get" object::get)
          (bundle.install "do" object::do)
          (bundle.install "none" (/.nullary ..None))
          (bundle.install "none?" (/.unary Any Bit))
          )))

(def python::constant
  Handler
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.inference Any)]
        (in {analysis.#Extension extension (list (analysis.text name))})))]))

(def python::import
  Handler
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.inference ..Object)]
        (in {analysis.#Extension extension (list (analysis.text name))})))]))

(def python::apply
  Handler
  (custom
   [(all <>.and <code>.any (<code>.tuple (<>.some <code>.any)))
    (function (_ extension phase archive [abstractionC inputsC])
      (do [! phase.monad]
        [abstractionA (analysis/type.expecting ..Function
                                               (phase archive abstractionC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.expecting Any)) inputsC)
         _ (analysis/type.inference Any)]
        (in {analysis.#Extension extension (list.partial abstractionA inputsA)})))]))

(def python::function
  Handler
  (custom
   [(all <>.and <code>.nat <code>.any)
    (function (_ extension phase archive [arity abstractionC])
      (do phase.monad
        [.let [inputT (type.tuple (list.repeated arity Any))]
         abstractionA (analysis/type.expecting (-> inputT Any)
                                               (phase archive abstractionC))
         _ (analysis/type.inference ..Function)]
        (in {analysis.#Extension extension (list (analysis.nat arity)
                                                 abstractionA)})))]))

(def python::exec
  Handler
  (custom
   [(all <>.and <code>.any <code>.any)
    (function (_ extension phase archive [codeC globalsC])
      (do phase.monad
        [codeA (analysis/type.expecting Text
                                        (phase archive codeC))
         globalsA (analysis/type.expecting ..Dict
                                           (phase archive globalsC))
         _ (analysis/type.inference .Any)]
        (in {analysis.#Extension extension (list codeA globalsA)})))]))

(def .public bundle
  Bundle
  (<| (bundle.prefix "python")
      (|> bundle.empty
          (dictionary.composite bundle::array)
          (dictionary.composite bundle::object)

          (bundle.install "constant" python::constant)
          (bundle.install "import" python::import)
          (bundle.install "apply" python::apply)
          (bundle.install "function" python::function)
          (bundle.install "exec" python::exec)
          )))
