(.module:
  [library
   [lux (#- case let if)
    [abstract
     ["." monad (#+ do)]]
    [data
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor fold)]
      ["." set]]]
    [target
     ["_" lua (#+ Expression Var Statement)]]]]
  ["." // #_
   ["#." runtime (#+ Operation Phase Phase! Generator Generator!)]
   ["#." reference]
   ["#." primitive]
   ["/#" // #_
    ["#." reference]
    ["/#" // #_
     ["#." synthesis #_
      ["#/." case]]
     ["/#" // #_
      ["#." synthesis (#+ Member Synthesis Path)]
      ["#." generation]
      ["//#" /// #_
       [reference
        ["#." variable (#+ Register)]]
       ["#." phase ("#\." monad)]
       [meta
        [archive (#+ Archive)]]]]]]])

(def: #export register
  (-> Register Var)
  (|>> (///reference.local //reference.system) :assume))

(def: #export capture
  (-> Register Var)
  (|>> (///reference.foreign //reference.system) :assume))

(def: #export (let expression archive [valueS register bodyS])
  (Generator [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueO (expression archive valueS)
     bodyO (expression archive bodyS)]
    ## TODO: Find some way to do 'let' without paying the price of the closure.
    (wrap (|> bodyO
              _.return
              (_.closure (list (..register register)))
              (_.apply/* (list valueO))))))

(def: #export (let! statement expression archive [valueS register bodyS])
  (Generator! [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueO (expression archive valueS)
     bodyO (statement expression archive bodyS)]
    (wrap ($_ _.then
              (_.local/1 (..register register) valueO)
              bodyO))))

(def: #export (get expression archive [pathP valueS])
  (Generator [(List Member) Synthesis])
  (do ///////phase.monad
    [valueO (expression archive valueS)]
    (wrap (list\fold (function (_ side source)
                       (.let [method (.case side
                                       (^template [<side> <accessor>]
                                         [(<side> lefts)
                                          (<accessor> (_.int (.int lefts)))])
                                       ([#.Left  //runtime.tuple//left]
                                        [#.Right //runtime.tuple//right]))]
                         (method source)))
                     valueO
                     (list.reverse pathP)))))

(def: #export (if expression archive [testS thenS elseS])
  (Generator [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [testO (expression archive testS)
     thenO (expression archive thenS)
     elseO (expression archive elseS)]
    (wrap (|> (_.if testO
                (_.return thenO)
                (_.return elseO))
              (_.closure (list))
              (_.apply/* (list))))))

(def: #export (if! statement expression archive [testS thenS elseS])
  (Generator! [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [testO (expression archive testS)
     thenO (statement expression archive thenS)
     elseO (statement expression archive elseS)]
    (wrap (_.if testO
            thenO
            elseO))))

(def: @savepoint (_.var "lux_pm_savepoint"))
(def: @cursor (_.var "lux_pm_cursor"))
(def: @temp (_.var "lux_pm_temp"))

(def: (push! value)
  (-> Expression Statement)
  (_.statement (|> (_.var "table.insert") (_.apply/* (list @cursor value)))))

(def: peek_and_pop
  Expression
  (|> (_.var "table.remove") (_.apply/* (list @cursor))))

(def: pop!
  Statement
  (_.statement ..peek_and_pop))

(def: peek
  Expression
  (_.nth (_.length @cursor) @cursor))

(def: save!
  Statement
  (_.statement (|> (_.var "table.insert")
                   (_.apply/* (list @savepoint
                                    (_.apply/* (list @cursor
                                                     (_.int +1)
                                                     (_.length @cursor)
                                                     (_.int +1)
                                                     (_.table (list)))
                                               (_.var "table.move")))))))

(def: restore!
  Statement
  (_.set (list @cursor) (|> (_.var "table.remove") (_.apply/* (list @savepoint)))))

(def: fail! _.break)

(template [<name> <flag> <prep>]
  [(def: (<name> simple? idx)
     (-> Bit Nat Statement)
     ($_ _.then
         (_.set (list @temp) (|> idx <prep> .int _.int (//runtime.sum//get ..peek <flag>)))
         (.if simple?
           (_.when (_.= _.nil @temp)
                   fail!)
           (_.if (_.= _.nil @temp)
             fail!
             (..push! @temp)))))]

  [left_choice  _.nil         (<|)]
  [right_choice (_.string "") inc]
  )

(def: (alternation pre! post!)
  (-> Statement Statement Statement)
  ($_ _.then
      (_.while (_.bool true)
               ($_ _.then
                   ..save!
                   pre!))
      ($_ _.then
          ..restore!
          post!)))

(def: (pattern_matching' statement expression archive)
  (-> Phase! Phase Archive Path (Operation Statement))
  (function (recur pathP)
    (.case pathP
      (#/////synthesis.Then bodyS)
      (statement expression archive bodyS)

      #/////synthesis.Pop
      (///////phase\wrap ..pop!)

      (#/////synthesis.Bind register)
      (///////phase\wrap (_.local/1 (..register register) ..peek))

      (#/////synthesis.Bit_Fork when thenP elseP)
      (do {! ///////phase.monad}
        [then! (recur thenP)
         else! (.case elseP
                 (#.Some elseP)
                 (recur elseP)

                 #.None
                 (wrap ..fail!))]
        (wrap (.if when
                (_.if ..peek
                  then!
                  else!)
                (_.if ..peek
                  else!
                  then!))))

      (^template [<tag> <format>]
        [(<tag> cons)
         (do {! ///////phase.monad}
           [clauses (monad.map ! (function (_ [match then])
                                   (do !
                                     [then! (recur then)]
                                     (wrap [(_.= (|> match <format>)
                                                 ..peek)
                                            then!])))
                               (#.Cons cons))]
           (wrap (_.cond clauses ..fail!)))])
      ([#/////synthesis.I64_Fork (<| _.int .int)]
       [#/////synthesis.F64_Fork _.float]
       [#/////synthesis.Text_Fork _.string])

      (^template [<complex> <simple> <choice>]
        [(^ (<complex> idx))
         (///////phase\wrap (<choice> false idx))

         (^ (<simple> idx nextP))
         (///////phase\map (_.then (<choice> true idx)) (recur nextP))])
      ([/////synthesis.side/left  /////synthesis.simple_left_side  ..left_choice]
       [/////synthesis.side/right /////synthesis.simple_right_side ..right_choice])

      (^ (/////synthesis.member/left 0))
      (///////phase\wrap (|> ..peek (_.nth (_.int +1)) ..push!))
      
      (^template [<pm> <getter>]
        [(^ (<pm> lefts))
         (///////phase\wrap (|> ..peek (<getter> (_.int (.int lefts))) ..push!))])
      ([/////synthesis.member/left  //runtime.tuple//left]
       [/////synthesis.member/right //runtime.tuple//right])

      (^ (/////synthesis.!bind_top register thenP))
      (do ///////phase.monad
        [then! (recur thenP)]
        (///////phase\wrap ($_ _.then
                               (_.local/1 (..register register) ..peek_and_pop)
                               then!)))

      (^template [<tag> <combinator>]
        [(^ (<tag> preP postP))
         (do ///////phase.monad
           [pre! (recur preP)
            post! (recur postP)]
           (wrap (<combinator> pre! post!)))])
      ([/////synthesis.path/seq _.then]
       [/////synthesis.path/alt ..alternation]))))

(def: (pattern_matching statement expression archive pathP)
  (-> Phase! Phase Archive Path (Operation Statement))
  (do ///////phase.monad
    [pattern_matching! (pattern_matching' statement expression archive pathP)]
    (wrap ($_ _.then
              (_.while (_.bool true)
                       pattern_matching!)
              (_.statement (|> (_.var "error") (_.apply/* (list (_.string ////synthesis/case.pattern_matching_error)))))))))

(def: #export dependencies
  (-> Path (List Var))
  (|>> ////synthesis/case.storage
       (get@ #////synthesis/case.dependencies)
       set.to_list
       (list\map (function (_ variable)
                   (.case variable
                     (#///////variable.Local register)
                     (..register register)
                     
                     (#///////variable.Foreign register)
                     (..capture register))))))

(def: #export (case! statement expression archive [valueS pathP])
  (Generator! [Synthesis Path])
  (do ///////phase.monad
    [stack_init (expression archive valueS)
     pattern_matching! (pattern_matching statement expression archive pathP)]
    (wrap ($_ _.then
              (_.local (list @temp))
              (_.local/1 @cursor (_.array (list stack_init)))
              (_.local/1 @savepoint (_.array (list)))
              pattern_matching!))))

(def: #export (case statement expression archive [valueS pathP])
  (-> Phase! (Generator [Synthesis Path]))
  (|> [valueS pathP]
      (..case! statement expression archive)
      (\ ///////phase.monad map
         (|>> (_.closure (list))
              (_.apply/* (list))))))
