(.using
 [library
  [lux (.except function)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    pipe]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" format (.only format)]]
    [collection
     ["[0]" list (.open: "[1]#[0]" functor mix)]]]
   [target
    ["_" r (.only Expression SVar)]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Generator)]
  ["[1][0]" reference]
  ["[1][0]" case]
  ["/[1]" //
   ["[1][0]" reference]
   ["//[1]" ///
    [analysis (.only Variant Tuple Abstraction Application Analysis)]
    [synthesis (.only Synthesis)]
    ["[1][0]" generation (.only Context)]
    ["//[1]" ///
     [arity (.only Arity)]
     ["[1][0]" phase (.open: "[1]#[0]" monad)]
     [reference
      [variable (.only Register Variable)]]
     [meta
      [archive
       ["[0]" artifact]]]]]]])

(def: .public (apply expression archive [functionS argsS+])
  (Generator (Application Synthesis))
  (do [! ///////phase.monad]
    [functionO (expression archive functionS)
     argsO+ (monad.each ! (expression archive) argsS+)]
    (in (_.apply argsO+ functionO))))

(def: (with_closure function_id $function inits function_definition)
  (-> artifact.ID SVar (List Expression) Expression (Operation Expression))
  (case inits
    {.#End}
    (do ///////phase.monad
      [_ (/////generation.execute! function_definition)
       _ (/////generation.save! (%.nat function_id)
                                function_definition)]
      (in $function))

    _
    (do ///////phase.monad
      [.let [closure_definition (_.set! $function
                                        (_.function (|> inits
                                                        list.size
                                                        list.indices
                                                        (list#each //case.capture))
                                          (all _.then
                                               function_definition
                                               $function)))]
       _ (/////generation.execute! closure_definition)
       _ (/////generation.save! (%.nat function_id) closure_definition)]
      (in (_.apply inits $function)))))

(def: $curried (_.var "curried"))
(def: $missing (_.var "missing"))

(def: (input_declaration register)
  (-> Register Expression)
  (_.set! (|> register ++ //case.register)
          (|> $curried (_.item (|> register ++ .int _.int)))))

(def: .public (function expression archive [environment arity bodyS])
  (Generator (Abstraction Synthesis))
  (do [! ///////phase.monad]
    [[[function_module function_artifact] bodyO] (/////generation.with_new_context archive
                                                   (do !
                                                     [$self (at ! each (|>> ///reference.artifact _.var)
                                                                (/////generation.context archive))]
                                                     (/////generation.with_anchor $self
                                                       (expression archive bodyS))))
     closureO+ (monad.each ! (expression archive) environment)
     .let [arityO (|> arity .int _.int)
           $num_args (_.var "num_args")
           $self (_.var (///reference.artifact [function_module function_artifact]))
           apply_poly (.function (_ args func)
                        (_.apply (list func args) (_.var "do.call")))]]
    (with_closure function_artifact $self closureO+
      (_.set! $self (_.function (list _.var_args)
                      (all _.then
                           (_.set! $curried (_.list (list _.var_args)))
                           (_.set! $num_args (_.length $curried))
                           (_.cond (list [(|> $num_args (_.= arityO))
                                          (all _.then
                                               (_.set! (//case.register 0) $self)
                                               (|> arity
                                                   list.indices
                                                   (list#each input_declaration)
                                                   (list#mix _.then bodyO)))]
                                         [(|> $num_args (_.> arityO))
                                          (let [arity_args (_.slice (_.int +1) arityO $curried)
                                                output_func_args (_.slice (|> arityO (_.+ (_.int +1)))
                                                                          $num_args
                                                                          $curried)]
                                            (|> $self
                                                (apply_poly arity_args)
                                                (apply_poly output_func_args)))])
                                   ... (|> $num_args (_.< arityO))
                                   (let [$missing (_.var "missing")]
                                     (_.function (list _.var_args)
                                       (all _.then
                                            (_.set! $missing (_.list (list _.var_args)))
                                            (|> $self
                                                (apply_poly (_.apply (list $curried $missing)
                                                                     (_.var "append"))))))))))))
    ))
