(.module:
  [library
   [lux {"-" [Location]}
    ["[0]" meta]
    [abstract
     ["[0]" monad {"+" [do]}]]
    [control
     ["[0]" function]
     ["<>" parser
      ["<[0]>" code]]]
    [data
     ["[0]" product]
     ["[0]" text ("[1]#[0]" hash)
      ["%" format {"+" [format]}]
      [encoding
       ["[0]" utf8]]]
     [collection
      ["[0]" list ("[1]#[0]" functor)]
      ["[0]" row]]]
    ["[0]" macro
     [syntax {"+" [syntax:]}]
     ["[0]" code]]
    [math
     [number {"+" [hex]}
      ["[0]" i64]]]
    ["@" target
     ["_" lua {"+" [Expression Location Var Computation Literal Label Statement]}]]]]
  ["[0]" /// "_"
   ["[1][0]" reference]
   ["//[1]" /// "_"
    ["[1][0]" synthesis {"+" [Synthesis]}]
    ["[1][0]" generation]
    ["//[1]" ///
     ["[1][0]" phase]
     [reference
      [variable {"+" [Register]}]]
     [meta
      [archive {"+" [Output Archive]}
       ["[0]" artifact {"+" [Registry]}]]]]]])

(template [<name> <base>]
  [(type: .public <name>
     (<base> [Register Label] Expression Statement))]

  [Operation /////generation.Operation]
  [Phase /////generation.Phase]
  [Handler /////generation.Handler]
  [Bundle /////generation.Bundle]
  )

(type: .public (Generator i)
  (-> Phase Archive i (Operation Expression)))

(type: .public Phase!
  (-> Phase Archive Synthesis (Operation Statement)))

(type: .public (Generator! i)
  (-> Phase! Phase Archive i (Operation Statement)))

(def: .public unit
  (_.string /////synthesis.unit))

(def: (flag value)
  (-> Bit Literal)
  (if value
    ..unit
    _.nil))

(def: .public variant_tag_field "_lux_tag")
(def: .public variant_flag_field "_lux_flag")
(def: .public variant_value_field "_lux_value")

(def: (variant' tag last? value)
  (-> Expression Expression Expression Literal)
  (_.table (list [..variant_tag_field tag]
                 [..variant_flag_field last?]
                 [..variant_value_field value])))

(def: .public (variant tag last? value)
  (-> Nat Bit Expression Literal)
  (variant' (_.int (.int tag))
            (flag last?)
            value))

(def: .public none
  Literal
  (..variant 0 #0 ..unit))

(def: .public some
  (-> Expression Literal)
  (..variant 1 #1))

(def: .public left
  (-> Expression Literal)
  (..variant 0 #0))

(def: .public right
  (-> Expression Literal)
  (..variant 1 #1))

(def: (feature name definition)
  (-> Var (-> Var Statement) Statement)
  (definition name))

(syntax: .public (with_vars [vars (<code>.tuple (<>.some <code>.local_identifier))
                             body <code>.any])
  (do [! meta.monad]
    [ids (monad.all ! (list.repeated (list.size vars) meta.seed))]
    (in (list (` (let [(~+ (|> vars
                               (list.zipped/2 ids)
                               (list#each (function (_ [id var])
                                            (list (code.local_identifier var)
                                                  (` (_.var (~ (code.text (format "v" (%.nat id)))))))))
                               list.together))]
                   (~ body)))))))

(def: module_id
  0)

(syntax: (runtime: [declaration (<>.or <code>.local_identifier
                                       (<code>.form (<>.and <code>.local_identifier
                                                            (<>.some <code>.local_identifier))))
                    code <code>.any])
  (do meta.monad
    [runtime_id meta.seed]
    (macro.with_identifiers [g!_]
      (let [runtime (code.local_identifier (///reference.artifact [..module_id runtime_id]))
            runtime_name (` (_.var (~ (code.text (%.code runtime)))))]
        (case declaration
          {.#Left name}
          (macro.with_identifiers [g!_]
            (let [g!name (code.local_identifier name)]
              (in (list (` (def: .public (~ g!name)
                             Var
                             (~ runtime_name)))
                        
                        (` (def: (~ (code.local_identifier (format "@" name)))
                             Statement
                             (..feature (~ runtime_name)
                                        (function ((~ g!_) (~ g!name))
                                          (_.set (~ g!name) (~ code))))))))))
          
          {.#Right [name inputs]}
          (macro.with_identifiers [g!_]
            (let [g!name (code.local_identifier name)
                  inputsC (list#each code.local_identifier inputs)
                  inputs_typesC (list#each (function.constant (` _.Expression))
                                           inputs)]
              (in (list (` (def: .public ((~ g!name) (~+ inputsC))
                             (-> (~+ inputs_typesC) Computation)
                             (_.apply/* (list (~+ inputsC)) (~ runtime_name))))
                        
                        (` (def: (~ (code.local_identifier (format "@" name)))
                             Statement
                             (..feature (~ runtime_name)
                                        (function ((~ g!_) (~ g!_))
                                          (..with_vars [(~+ inputsC)]
                                            (_.function (~ g!_) (list (~+ inputsC))
                                              (~ code))))))))))))))))

(def: (item index table)
  (-> Expression Expression Location)
  (_.item (_.+ (_.int +1) index) table))

(def: last_index
  (|>> _.length (_.- (_.int +1))))

(with_expansions [<recur> (as_is ($_ _.then
                                     (_.set (list lefts) (_.- last_index_right lefts))
                                     (_.set (list tuple) (..item last_index_right tuple))))]
  (runtime: (tuple//left lefts tuple)
    (with_vars [last_index_right]
      (<| (_.while (_.bool true))
          ($_ _.then
              (_.local/1 last_index_right (..last_index tuple))
              (_.if (_.> lefts last_index_right)
                ... No need for recursion
                (_.return (..item lefts tuple))
                ... Needs recursion
                <recur>)))))

  (runtime: (tuple//right lefts tuple)
    (with_vars [last_index_right right_index]
      (<| (_.while (_.bool true))
          ($_ _.then
              (_.local/1 last_index_right (..last_index tuple))
              (_.local/1 right_index (_.+ (_.int +1) lefts))
              (_.cond (list [(_.= last_index_right right_index)
                             (_.return (..item right_index tuple))]
                            [(_.> last_index_right right_index)
                             ... Needs recursion.
                             <recur>])
                      (_.return (_.apply/* (list tuple
                                                 (_.+ (_.int +1) right_index)
                                                 (_.length tuple)
                                                 (_.int +1)
                                                 (_.array (list)))
                                           (_.var "table.move"))))
              )))))

(runtime: (sum//get sum wants_last wanted_tag)
  (let [no_match! (_.return _.nil)
        sum_tag (_.the ..variant_tag_field sum)
        sum_flag (_.the ..variant_flag_field sum)
        sum_value (_.the ..variant_value_field sum)
        is_last? (_.= ..unit sum_flag)
        extact_match! (_.return sum_value)
        test_recursion! (_.if is_last?
                          ... Must recurse.
                          ($_ _.then
                              (_.set (list wanted_tag) (_.- sum_tag wanted_tag))
                              (_.set (list sum) sum_value))
                          no_match!)
        extrac_sub_variant! (_.return (variant' (_.- wanted_tag sum_tag) sum_flag sum_value))]
    (<| (_.while (_.bool true))
        (_.cond (list [(_.= sum_tag wanted_tag)
                       (_.if (_.= wants_last sum_flag)
                         extact_match!
                         test_recursion!)]
                      [(_.< wanted_tag sum_tag)
                       test_recursion!]
                      [(_.= ..unit wants_last)
                       extrac_sub_variant!])
                no_match!))))

(def: runtime//adt
  Statement
  ($_ _.then
      @tuple//left
      @tuple//right
      @sum//get
      ))

(runtime: (lux//try risky)
  (with_vars [success value]
    ($_ _.then
        (_.let (list success value) (|> risky (_.apply/* (list ..unit))
                                        _.return (_.closure (list))
                                        list _.apply/* (|> (_.var "pcall"))))
        (_.if success
          (_.return (..right value))
          (_.return (..left value))))))

(runtime: (lux//program_args raw)
  (with_vars [tail head idx]
    ($_ _.then
        (_.let (list tail) ..none)
        (<| (_.for_step idx (_.length raw) (_.int +1) (_.int -1))
            (_.set (list tail) (..some (_.array (list (_.item idx raw)
                                                      tail)))))
        (_.return tail))))

(def: runtime//lux
  Statement
  ($_ _.then
      @lux//try
      @lux//program_args
      ))

(def: cap_shift
  (_.% (_.int +64)))

(runtime: (i64//left_shifted param subject)
  (_.return (_.bit_shl (..cap_shift param) subject)))

(runtime: (i64//right_shifted param subject)
  (let [mask (|> (_.int +1)
                 (_.bit_shl (_.- param (_.int +64)))
                 (_.- (_.int +1)))]
    ($_ _.then
        (_.set (list param) (..cap_shift param))
        (_.return (|> subject
                      (_.bit_shr param)
                      (_.bit_and mask))))))

(runtime: (i64//division param subject)
  (with_vars [floored]
    ($_ _.then
        (_.local/1 floored (_.// param subject))
        (let [potentially_floored? (_.< (_.int +0) floored)
              inexact? (|> subject
                           (_.% param)
                           (_.= (_.int +0))
                           _.not)]
          (_.if (_.and potentially_floored?
                       inexact?)
            (_.return (_.+ (_.int +1) floored))
            (_.return floored))))))

(runtime: (i64//remainder param subject)
  (_.return (_.- (|>  subject (..i64//division param) (_.* param))
                 subject)))

(def: runtime//i64
  Statement
  ($_ _.then
      @i64//left_shifted
      @i64//right_shifted
      @i64//division
      @i64//remainder
      ))

(def: (find_byte_index subject param start)
  (-> Expression Expression Expression Expression)
  (_.apply/4 (_.var "string.find") subject param start (_.bool #1)))

(def: (char_index subject byte_index)
  (-> Expression Expression Expression)
  (|> byte_index
      (_.apply/3 (_.var "utf8.len") subject (_.int +1))))

(def: (byte_index subject char_index)
  (-> Expression Expression Expression)
  (|> char_index
      (_.+ (_.int +1))
      (_.apply/2 (_.var "utf8.offset") subject)))

(def: lux_index
  (-> Expression Expression)
  (_.- (_.int +1)))

... TODO: Remove this once the Lua compiler becomes self-hosted.
(def: on_rembulan?
  (_.= (_.string "Lua 5.3")
       (_.var "_VERSION")))

(runtime: (text//index subject param start)
  (with_expansions [<rembulan> ($_ _.then
                                   (_.local/1 byte_index (|> start
                                                             (_.+ (_.int +1))
                                                             (..find_byte_index subject param)))
                                   (_.if (_.= _.nil byte_index)
                                     (_.return ..none)
                                     (_.return (..some (..lux_index byte_index)))))
                    <normal> ($_ _.then
                                 (_.local/1 byte_index (|> start
                                                           (..byte_index subject)
                                                           (..find_byte_index subject param)))
                                 (_.if (_.= _.nil byte_index)
                                   (_.return ..none)
                                   (_.return (..some (|> byte_index
                                                         (..char_index subject)
                                                         ..lux_index)))))]
    (with_vars [byte_index]
      (for [@.lua <normal>]
           (_.if ..on_rembulan?
             <rembulan>
             <normal>)))))

(runtime: (text//clip text offset length)
  (with_expansions [<rembulan> (_.return (_.apply/3 (_.var "string.sub") text (_.+ (_.int +1) offset) (_.+ offset length)))
                    <normal> (_.return (_.apply/3 (_.var "string.sub")
                                                  text
                                                  (..byte_index text offset)
                                                  (|> (_.+ offset length)
                                                      ... (_.+ (_.int +1))
                                                      (..byte_index text)
                                                      (_.- (_.int +1)))))]
    (for [@.lua <normal>]
         (_.if ..on_rembulan?
           <rembulan>
           <normal>))))

(runtime: (text//size subject)
  (with_expansions [<rembulan> (_.return (_.apply/1 (_.var "string.len") subject))
                    <normal> (_.return (_.apply/1 (_.var "utf8.len") subject))]
    (for [@.lua <normal>]
         (_.if ..on_rembulan?
           <rembulan>
           <normal>))))

(runtime: (text//char idx text)
  (with_expansions [<rembulan> (with_vars [char]
                                 ($_ _.then
                                     (_.local/1 char (_.apply/* (list text idx)
                                                                (_.var "string.byte")))
                                     (_.if (_.= _.nil char)
                                       (_.statement (_.error/1 (_.string "[Lux Error] Cannot get char from text.")))
                                       (_.return char))))
                    <normal> (with_vars [offset char]
                               ($_ _.then
                                   (_.local/1 offset (_.apply/2 (_.var "utf8.offset") text idx))
                                   (_.if (_.= _.nil offset)
                                     (_.statement (_.error/1 (_.string "[Lux Error] Cannot get char from text.")))
                                     (_.return (_.apply/2 (_.var "utf8.codepoint") text offset)))))]
    (for [@.lua <normal>]
         (_.if ..on_rembulan?
           <rembulan>
           <normal>))))

(def: runtime//text
  Statement
  ($_ _.then
      @text//index
      @text//clip
      @text//size
      @text//char
      ))

(runtime: (array//write idx value array)
  ($_ _.then
      (_.set (list (..item idx array)) value)
      (_.return array)))

(def: runtime//array
  Statement
  ($_ _.then
      @array//write
      ))

(def: runtime
  Statement
  ($_ _.then
      ..runtime//adt
      ..runtime//lux
      ..runtime//i64
      ..runtime//text
      ..runtime//array
      ))

(def: .public generate
  (Operation [Registry Output])
  (do ///////phase.monad
    [_ (/////generation.execute! ..runtime)
     _ (/////generation.save! ..module_id {.#None} ..runtime)]
    (in [(|> artifact.empty
             artifact.resource
             product.right)
         (row.row [..module_id
                   {.#None}
                   (|> ..runtime
                       _.code
                       (# utf8.codec encoded))])])))
