(.using
 [library
  [lux (.except Label Location)
   ["[0]" meta]
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" function]
    ["<>" parser (.only)
     ["<[0]>" code]]]
   [data
    ["[0]" product]
    ["[0]" text (.open: "[1]#[0]" hash)
     ["%" format (.only format)]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list (.open: "[1]#[0]" functor)]
     ["[0]" sequence]]]
   ["[0]" macro (.only)
    [syntax (.only syntax)]
    ["[0]" code]]
   [math
    [number (.only hex)
     ["[0]" i64]]]
   ["@" target (.only)
    ["_" lua (.only Expression Location Var Computation Literal Label Statement)]]]]
 ["[0]" ///
  ["[1][0]" reference]
  ["//[1]" ///
   ["[1][0]" synthesis (.only Synthesis)]
   ["[1][0]" generation]
   ["//[1]" /// (.only)
    ["[1][0]" phase]
    [reference
     [variable (.only Register)]]
    [meta
     [archive (.only Output Archive)
      ["[0]" registry (.only Registry)]
      ["[0]" unit]]]]]])

(with_template [<name> <base>]
  [(type: .public <name>
     (<base> [Register Label] Expression Statement))]

  [Operation /////generation.Operation]
  [Phase /////generation.Phase]
  [Handler /////generation.Handler]
  [Bundle /////generation.Bundle]
  )

(type: .public (Generator i)
  (-> Phase Archive i (Operation Expression)))

(type: .public Phase!
  (-> Phase Archive Synthesis (Operation Statement)))

(type: .public (Generator! i)
  (-> Phase! Phase Archive i (Operation Statement)))

(def: .public unit
  (_.string /////synthesis.unit))

(def: (flag value)
  (-> Bit Literal)
  (if value
    ..unit
    _.nil))

(def: .public variant_tag_field "_lux_tag")
(def: .public variant_flag_field "_lux_flag")
(def: .public variant_value_field "_lux_value")

(def: (variant' tag last? value)
  (-> Expression Expression Expression Literal)
  (_.table (list [..variant_tag_field tag]
                 [..variant_flag_field last?]
                 [..variant_value_field value])))

(def: .public (variant tag last? value)
  (-> Nat Bit Expression Literal)
  (variant' (_.int (.int tag))
            (flag last?)
            value))

(def: .public left
  (-> Expression Literal)
  (..variant 0 #0))

(def: .public right
  (-> Expression Literal)
  (..variant 0 #1))

(def: .public none
  Literal
  (..left ..unit))

(def: .public some
  (-> Expression Literal)
  ..right)

(def: (feature name definition)
  (-> Var (-> Var Statement) Statement)
  (definition name))

(def: .public with_vars
  (syntax (_ [vars (<code>.tuple (<>.some <code>.local))
              body <code>.any])
    (do [! meta.monad]
      [ids (monad.all ! (list.repeated (list.size vars) meta.seed))]
      (in (list (` (let [(~+ (|> vars
                                 (list.zipped_2 ids)
                                 (list#each (function (_ [id var])
                                              (list (code.local var)
                                                    (` (_.var (~ (code.text (format "v" (%.nat id)))))))))
                                 list.together))]
                     (~ body))))))))

(def: module_id
  0)

(def: runtime:
  (syntax (_ [declaration (<>.or <code>.local
                                 (<code>.form (<>.and <code>.local
                                                      (<>.some <code>.local))))
              code <code>.any])
    (do meta.monad
      [runtime_id meta.seed]
      (macro.with_symbols [g!_]
        (let [runtime (code.local (///reference.artifact [..module_id runtime_id]))
              runtime_name (` (_.var (~ (code.text (%.code runtime)))))]
          (case declaration
            {.#Left name}
            (macro.with_symbols [g!_]
              (let [g!name (code.local name)]
                (in (list (` (def: .public (~ g!name)
                               Var
                               (~ runtime_name)))
                          
                          (` (def: (~ (code.local (format "@" name)))
                               Statement
                               (..feature (~ runtime_name)
                                          (function ((~ g!_) (~ g!name))
                                            (_.set (~ g!name) (~ code))))))))))
            
            {.#Right [name inputs]}
            (macro.with_symbols [g!_]
              (let [g!name (code.local name)
                    inputsC (list#each code.local inputs)
                    inputs_typesC (list#each (function.constant (` _.Expression))
                                             inputs)]
                (in (list (` (def: .public ((~ g!name) (~+ inputsC))
                               (-> (~+ inputs_typesC) Computation)
                               (_.apply (list (~+ inputsC)) (~ runtime_name))))
                          
                          (` (def: (~ (code.local (format "@" name)))
                               Statement
                               (..feature (~ runtime_name)
                                          (function ((~ g!_) (~ g!_))
                                            (..with_vars [(~+ inputsC)]
                                              (_.function (~ g!_) (list (~+ inputsC))
                                                (~ code)))))))))))))))))

(def: (item index table)
  (-> Expression Expression Location)
  (_.item (_.+ (_.int +1) index) table))

(def: last_index
  (|>> _.length (_.- (_.int +1))))

(with_expansions [<recur> (these (all _.then
                                      (_.set (list lefts) (_.- last_index_right lefts))
                                      (_.set (list tuple) (..item last_index_right tuple))))]
  (runtime: (tuple//left lefts tuple)
    (with_vars [last_index_right]
      (<| (_.while (_.boolean true))
          (all _.then
               (_.local/1 last_index_right (..last_index tuple))
               (_.if (_.> lefts last_index_right)
                 ... No need for recursion
                 (_.return (..item lefts tuple))
                 ... Needs recursion
                 <recur>)))))

  (runtime: (tuple//right lefts tuple)
    (with_vars [last_index_right right_index]
      (<| (_.while (_.boolean true))
          (all _.then
               (_.local/1 last_index_right (..last_index tuple))
               (_.local/1 right_index (_.+ (_.int +1) lefts))
               (<| (_.if (_.= last_index_right right_index)
                     (_.return (..item right_index tuple)))
                   (_.if (_.> last_index_right right_index)
                     ... Needs recursion.
                     <recur>)
                   (_.return (_.apply (list tuple
                                            (_.+ (_.int +1) right_index)
                                            (_.length tuple)
                                            (_.int +1)
                                            (_.array (list)))
                                      (_.var "table.move"))))
               )))))

(runtime: (sum//get sum expected::right? expected::lefts)
  (let [mismatch! (_.return _.nil)
        actual::lefts (_.the ..variant_tag_field sum)
        actual::right? (_.the ..variant_flag_field sum)
        actual::value (_.the ..variant_value_field sum)
        recur! (all _.then
                    (_.set (list expected::lefts) (|> expected::lefts
                                                      (_.- actual::lefts)
                                                      (_.- (_.int +1))))
                    (_.set (list sum) actual::value))]
    (<| (_.while (_.boolean true))
        (_.if (_.= expected::lefts actual::lefts)
          (_.if (_.= expected::right? actual::right?)
            (_.return actual::value)
            mismatch!))
        (_.if (_.< expected::lefts actual::lefts)
          (_.if (_.= ..unit actual::right?)
            recur!
            mismatch!))
        (_.if (_.= ..unit expected::right?)
          (_.return (variant' (|> actual::lefts
                                  (_.- expected::lefts)
                                  (_.- (_.int +1)))
                              actual::right?
                              actual::value)))
        mismatch!)))

(def: runtime//adt
  Statement
  (all _.then
       @tuple//left
       @tuple//right
       @sum//get
       ))

(runtime: (lux//try risky)
  (with_vars [success value]
    (all _.then
         (_.let (list success value) (|> risky (_.apply (list ..unit))
                                         _.return (_.closure (list))
                                         list _.apply (|> (_.var "pcall"))))
         (_.if success
           (_.return (..right value))
           (_.return (..left value))))))

(runtime: (lux//program_args raw)
  (with_vars [tail head idx]
    (all _.then
         (_.let (list tail) ..none)
         (<| (_.for_step idx (_.length raw) (_.int +1) (_.int -1))
             (_.set (list tail) (..some (_.array (list (_.item idx raw)
                                                       tail)))))
         (_.return tail))))

(def: runtime//lux
  Statement
  (all _.then
       @lux//try
       @lux//program_args
       ))

(def: cap_shift
  (_.% (_.int +64)))

(runtime: (i64//left_shifted param subject)
  (_.return (_.bit_shl (..cap_shift param) subject)))

(runtime: (i64//right_shifted param subject)
  (let [mask (|> (_.int +1)
                 (_.bit_shl (_.- param (_.int +64)))
                 (_.- (_.int +1)))]
    (all _.then
         (_.set (list param) (..cap_shift param))
         (_.return (|> subject
                       (_.bit_shr param)
                       (_.bit_and mask))))))

(runtime: (i64//division param subject)
  (with_vars [floored]
    (all _.then
         (_.local/1 floored (_.// param subject))
         (let [potentially_floored? (_.< (_.int +0) floored)
               inexact? (|> subject
                            (_.% param)
                            (_.= (_.int +0))
                            _.not)]
           (_.if (_.and potentially_floored?
                        inexact?)
             (_.return (_.+ (_.int +1) floored))
             (_.return floored))))))

(runtime: (i64//remainder param subject)
  (_.return (_.- (|>  subject (..i64//division param) (_.* param))
                 subject)))

(def: runtime//i64
  Statement
  (all _.then
       @i64//left_shifted
       @i64//right_shifted
       @i64//division
       @i64//remainder
       ))

(def: (find_byte_index subject param start)
  (-> Expression Expression Expression Expression)
  (_.apply (list subject param start (_.boolean #1))
           (_.var "string.find")))

(def: (char_index subject byte_index)
  (-> Expression Expression Expression)
  (_.apply (list subject (_.int +1) byte_index)
           (_.var "utf8.len")))

(def: (byte_index subject char_index)
  (-> Expression Expression Expression)
  (_.apply (list subject (_.+ (_.int +1) char_index)) (_.var "utf8.offset")))

(def: lux_index
  (-> Expression Expression)
  (_.- (_.int +1)))

... TODO: Remove this once the Lua compiler becomes self-hosted.
(def: on_rembulan?
  (_.= (_.string "Lua 5.3")
       (_.var "_VERSION")))

(runtime: (text//index subject param start)
  (with_expansions [<rembulan> (all _.then
                                    (_.local/1 byte_index (|> start
                                                              (_.+ (_.int +1))
                                                              (..find_byte_index subject param)))
                                    (_.if (_.= _.nil byte_index)
                                      (_.return ..none)
                                      (_.return (..some (..lux_index byte_index)))))
                    <normal> (all _.then
                                  (_.local/1 byte_index (|> start
                                                            (..byte_index subject)
                                                            (..find_byte_index subject param)))
                                  (_.if (_.= _.nil byte_index)
                                    (_.return ..none)
                                    (_.return (..some (|> byte_index
                                                          (..char_index subject)
                                                          ..lux_index)))))]
    (with_vars [byte_index]
      (for @.lua <normal>
           (_.if ..on_rembulan?
             <rembulan>
             <normal>)))))

(runtime: (text//clip text offset length)
  (with_expansions [<rembulan> (_.return (_.apply (list text (_.+ (_.int +1) offset) (_.+ offset length))
                                                  (_.var "string.sub")))
                    <normal> (_.return (_.apply (list text
                                                      (..byte_index text offset)
                                                      (|> (_.+ offset length)
                                                          ... (_.+ (_.int +1))
                                                          (..byte_index text)
                                                          (_.- (_.int +1))))
                                                (_.var "string.sub")))]
    (for @.lua <normal>
         (_.if ..on_rembulan?
           <rembulan>
           <normal>))))

(runtime: (text//size subject)
  (with_expansions [<rembulan> (_.return (_.apply (list subject) (_.var "string.len")))
                    <normal> (_.return (_.apply (list subject) (_.var "utf8.len")))]
    (for @.lua <normal>
         (_.if ..on_rembulan?
           <rembulan>
           <normal>))))

(runtime: (text//char idx text)
  (with_expansions [<rembulan> (with_vars [char]
                                 (all _.then
                                      (_.local/1 char (_.apply (list text idx)
                                                               (_.var "string.byte")))
                                      (_.if (_.= _.nil char)
                                        (_.statement (_.error/1 (_.string "[Lux Error] Cannot get char from text.")))
                                        (_.return char))))
                    <normal> (with_vars [offset char]
                               (all _.then
                                    (_.local/1 offset (_.apply (list text idx) (_.var "utf8.offset")))
                                    (_.if (_.= _.nil offset)
                                      (_.statement (_.error/1 (_.string "[Lux Error] Cannot get char from text.")))
                                      (_.return (_.apply (list text offset) (_.var "utf8.codepoint"))))))]
    (for @.lua <normal>
         (_.if ..on_rembulan?
           <rembulan>
           <normal>))))

(def: runtime//text
  Statement
  (all _.then
       @text//index
       @text//clip
       @text//size
       @text//char
       ))

(runtime: (array//write idx value array)
  (all _.then
       (_.set (list (..item idx array)) value)
       (_.return array)))

(def: runtime//array
  Statement
  (all _.then
       @array//write
       ))

(def: runtime
  Statement
  (all _.then
       ..runtime//adt
       ..runtime//lux
       ..runtime//i64
       ..runtime//text
       ..runtime//array
       ))

(def: .public generate
  (Operation [Registry Output])
  (do ///////phase.monad
    [_ (/////generation.execute! ..runtime)
     _ (/////generation.save! ..module_id {.#None} ..runtime)]
    (in [(|> registry.empty
             (registry.resource true unit.none)
             product.right)
         (sequence.sequence [..module_id
                             {.#None}
                             (|> ..runtime
                                 _.code
                                 (at utf8.codec encoded))])])))
