(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only exception)]]
   [data
    ["[0]" product]
    [text
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]]]
 [////
  [meta
   ["[0]" archive (.only Archive)
    ["[0]" registry (.only Registry)]
    ["[0]" unit]
    [module
     ["[0]" descriptor]]]]])

(type .public (Program expression declaration)
  (-> unit.ID expression declaration))

(def .public name
  Text
  "")

(exception .public (cannot_find_program [modules (List descriptor.Module)])
  (exception.report
   "Modules" (exception.listing %.text modules)))

(def .public (context archive)
  (-> Archive (Try unit.ID))
  (do [! try.monad]
    [registries (|> archive
                    archive.archived
                    (monad.each !
                                (function (_ module)
                                  (do !
                                    [id (archive.id module archive)
                                     [_module output registry] (archive.find module archive)]
                                    (in [[module id] registry])))))]
    (case (list.one (function (_ [[module module_id] registry])
                      (do maybe.monad
                        [program_id (registry.id ..name registry)]
                        (in [module_id program_id])))
                    registries)
      {.#Some program_context}
      (in program_context)
      
      {.#None}
      (|> registries
          (list#each (|>> product.left product.left))
          (exception.except ..cannot_find_program)))))
