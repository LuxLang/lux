(.module:
  [library
   [lux (#- Type type)
    [abstract
     ["." monad (#+ do)]]
    [control
     ["." try]]
    [data
     [number
      ["n" nat]
      ["i" int]
      ["." i32]]
     [collection
      ["." list ("#\." monoid functor)]]]
    [target
     [jvm
      ["_" bytecode (#+ Label Bytecode) ("#\." monad)]
      ["." method (#+ Method)]
      [constant
       [pool (#+ Resource)]]
      [encoding
       ["." signed]]
      ["." type (#+ Type)
       ["." category (#+ Class)]]]]]]
  ["." //
   ["#." reset]
   ["#." implementation]
   ["#." init]
   ["/#" // #_
    ["#." abstract]
    [field
     [constant
      ["#." arity]]
     [variable
      ["#." partial
       ["#/." count]]
      ["#." foreign]]]
    ["/#" // #_
     ["#." runtime]
     ["#." value]
     ["#." reference]
     [////
      [analysis (#+ Environment)]
      [synthesis (#+ Synthesis)]
      [///
       [arity (#+ Arity)]
       [reference
        [variable (#+ Register)]]]]]]])

(def: (increment by)
  (-> Nat (Bytecode Any))
  ($_ _.compose
      (<| _.int .i64 by)
      _.iadd))

(def: (inputs offset amount)
  (-> Register Nat (Bytecode Any))
  ($_ _.compose
      (|> amount
          list.indices
          (monad.map _.monad (|>> (n.+ offset) _.aload)))
      (_\in [])
      ))

(def: (apply offset amount)
  (-> Register Nat (Bytecode Any))
  (let [arity (n.min amount ///arity.maximum)]
    ($_ _.compose
        (_.checkcast ///abstract.class)
        (..inputs offset arity)
        (_.invokevirtual ///abstract.class ////runtime.apply::name (////runtime.apply::type arity))
        (if (n.> ///arity.maximum amount)
          (apply (n.+ ///arity.maximum offset)
                 (n.- ///arity.maximum amount))
          (_\in []))
        )))

(def: this_offset 1)

(def: .public (method class environment function_arity @begin body apply_arity)
  (-> (Type Class) (Environment Synthesis) Arity Label (Bytecode Any) Arity (Resource Method))
  (let [num_partials (dec function_arity)
        over_extent (i.- (.int apply_arity)
                         (.int function_arity))]
    (method.method //.modifier ////runtime.apply::name
                   (////runtime.apply::type apply_arity)
                   (list)
                   (#.Some (case num_partials
                             0 ($_ _.compose
                                   ////reference.this
                                   (..inputs ..this_offset apply_arity)
                                   (_.invokevirtual class //implementation.name (//implementation.type function_arity))
                                   _.areturn)
                             _ (do _.monad
                                 [@default _.new_label
                                  @labelsH _.new_label
                                  @labelsT (|> _.new_label
                                               (list.repeated (dec num_partials))
                                               (monad.seq _.monad))
                                  .let [cases (|> (list\compose (#.Item [@labelsH @labelsT])
                                                                (list @default))
                                                  list.enumeration
                                                  (list\map (function (_ [stage @case])
                                                              (let [current_partials (|> (list.indices stage)
                                                                                         (list\map (///partial.get class))
                                                                                         (monad.seq _.monad))
                                                                    already_partial? (n.> 0 stage)
                                                                    exact_match? (i.= over_extent (.int stage))
                                                                    has_more_than_necessary? (i.> over_extent (.int stage))]
                                                                ($_ _.compose
                                                                    (_.set_label @case)
                                                                    (cond exact_match?
                                                                          ($_ _.compose
                                                                              ////reference.this
                                                                              (if already_partial?
                                                                                (_.invokevirtual class //reset.name (//reset.type class))
                                                                                (_\in []))
                                                                              current_partials
                                                                              (..inputs ..this_offset apply_arity)
                                                                              (_.invokevirtual class //implementation.name (//implementation.type function_arity))
                                                                              _.areturn)
                                                                          
                                                                          has_more_than_necessary?
                                                                          (let [arity_inputs (|> function_arity (n.- stage))
                                                                                additional_inputs (|> apply_arity (n.- arity_inputs))]
                                                                            ($_ _.compose
                                                                                ////reference.this
                                                                                (_.invokevirtual class //reset.name (//reset.type class))
                                                                                current_partials
                                                                                (..inputs ..this_offset arity_inputs)
                                                                                (_.invokevirtual class //implementation.name (//implementation.type function_arity))
                                                                                (apply (n.+ ..this_offset arity_inputs) additional_inputs)
                                                                                _.areturn))

                                                                          ... (i.< over_extent (.int stage))
                                                                          (let [current_environment (|> (list.indices (list.size environment))
                                                                                                        (list\map (///foreign.get class))
                                                                                                        (monad.seq _.monad))
                                                                                missing_partials (|> _.aconst_null
                                                                                                     (list.repeated (|> num_partials (n.- apply_arity) (n.- stage)))
                                                                                                     (monad.seq _.monad))]
                                                                            ($_ _.compose
                                                                                (_.new class)
                                                                                _.dup
                                                                                current_environment
                                                                                ///partial/count.value
                                                                                (..increment apply_arity)
                                                                                current_partials
                                                                                (..inputs ..this_offset apply_arity)
                                                                                missing_partials
                                                                                (_.invokevirtual class //init.name (//init.type environment function_arity))
                                                                                _.areturn)))))))
                                                  (monad.seq _.monad))]]
                                 ($_ _.compose
                                     ///partial/count.value
                                     (_.tableswitch (try.assumed (signed.s4 +0)) @default [@labelsH @labelsT])
                                     cases)))))))
