(.module:
  [library
   [lux "*"
    [abstract
     [monad {"+" do}]]
    [data
     [text
      ["%" format {"+" format}]]]
    [target
     [jvm
      ["_" bytecode {"+" Bytecode}]
      ["[0]" type]
      [encoding
       ["[0]" unsigned]]]]]]
  ["[0]" // "_"
   ["[1][0]" runtime {"+" Operation}]
   ["[1][0]" value]
   ["[1][0]" type]
   ["//[1]" /// "_"
    [//
     ["[0]" generation]
     [///
      ["[1]" phase ("operation#[0]" monad)]
      [reference
       ["[0]" variable {"+" Register Variable}]]
      [meta
       [archive {"+" Archive}]]]]]])

(def: .public this
  (Bytecode Any)
  _.aload_0)

(template [<name> <prefix>]
  [(def: .public <name>
     (-> Register Text)
     (|>> %.nat (format <prefix>)))]

  [foreign_name "f"]
  [partial_name "p"]
  )

(def: (foreign archive variable)
  (-> Archive Register (Operation (Bytecode Any)))
  (do [! ////.monad]
    [bytecode_name (# ! each //runtime.class_name
                      (generation.context archive))]
    (in ($_ _.composite
            ..this
            (_.getfield (type.class bytecode_name (list))
                        (..foreign_name variable)
                        //type.value)))))

(def: .public (variable archive variable)
  (-> Archive Variable (Operation (Bytecode Any)))
  (case variable
    {variable.#Local variable}
    (operation#in (_.aload variable))
    
    {variable.#Foreign variable}
    (..foreign archive variable)))

(def: .public (constant archive name)
  (-> Archive Name (Operation (Bytecode Any)))
  (do [! ////.monad]
    [bytecode_name (# ! each //runtime.class_name
                      (generation.remember archive name))]
    (in (_.getstatic (type.class bytecode_name (list)) //value.field //type.value))))
