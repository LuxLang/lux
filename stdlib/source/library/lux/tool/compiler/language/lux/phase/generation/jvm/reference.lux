(.module:
  [library
   [lux #*
    [abstract
     [monad (#+ do)]]
    [data
     [text
      ["%" format (#+ format)]]]
    [target
     [jvm
      ["_" bytecode (#+ Bytecode)]
      ["." type]
      [encoding
       ["." unsigned]]]]]]
  ["." // #_
   ["#." runtime (#+ Operation)]
   ["#." value]
   ["#." type]
   ["//#" /// #_
    [//
     ["." generation]
     [///
      ["#" phase ("operation\." monad)]
      [reference
       ["." variable (#+ Register Variable)]]
      [meta
       [archive (#+ Archive)]]]]]])

(def: #export this
  (Bytecode Any)
  _.aload_0)

(template [<name> <prefix>]
  [(def: #export <name>
     (-> Register Text)
     (|>> %.nat (format <prefix>)))]

  [foreign_name "f"]
  [partial_name "p"]
  )

(def: (foreign archive variable)
  (-> Archive Register (Operation (Bytecode Any)))
  (do {! ////.monad}
    [bytecode_name (\ ! map //runtime.class_name
                      (generation.context archive))]
    (in ($_ _.compose
            ..this
            (_.getfield (type.class bytecode_name (list))
                        (..foreign_name variable)
                        //type.value)))))

(def: #export (variable archive variable)
  (-> Archive Variable (Operation (Bytecode Any)))
  (case variable
    (#variable.Local variable)
    (operation\in (_.aload variable))
    
    (#variable.Foreign variable)
    (..foreign archive variable)))

(def: #export (constant archive name)
  (-> Archive Name (Operation (Bytecode Any)))
  (do {! ////.monad}
    [bytecode_name (\ ! map //runtime.class_name
                      (generation.remember archive name))]
    (in (_.getstatic (type.class bytecode_name (list)) //value.field //type.value))))
