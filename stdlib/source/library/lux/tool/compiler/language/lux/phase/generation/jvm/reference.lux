(.using
 [library
  [lux "*"
   [abstract
    [monad (.only do)]]
   [data
    [text
     ["%" format (.only format)]]]
   [target
    [jvm
     ["_" bytecode (.only Bytecode)]
     ["[0]" type]
     [encoding
      ["[0]" unsigned]]]]]]
 ["[0]" // "_"
  ["[1][0]" runtime (.only Operation)]
  ["[1][0]" value]
  ["[1][0]" type]
  ["//[1]" /// "_"
   [//
    ["[0]" generation]
    [///
     ["[1]" phase ("operation#[0]" monad)]
     [reference
      ["[0]" variable (.only Register Variable)]]
     [meta
      [archive (.only Archive)]]]]]])

(def: .public this
  (Bytecode Any)
  _.aload_0)

(template [<name> <prefix>]
  [(def: .public <name>
     (-> Register Text)
     (|>> %.nat (format <prefix>)))]

  [foreign_name "f"]
  [partial_name "p"]
  )

(def: (foreign archive variable)
  (-> Archive Register (Operation (Bytecode Any)))
  (do [! ////.monad]
    [bytecode_name (# ! each //runtime.class_name
                      (generation.context archive))]
    (in (all _.composite
             ..this
             (_.getfield (type.class bytecode_name (list))
                         (..foreign_name variable)
                         //type.value)))))

(def: .public (variable archive variable)
  (-> Archive Variable (Operation (Bytecode Any)))
  (case variable
    {variable.#Local variable}
    (operation#in (_.aload variable))
    
    {variable.#Foreign variable}
    (..foreign archive variable)))

(def: .public (constant archive name)
  (-> Archive Symbol (Operation (Bytecode Any)))
  (do ////.monad
    [[@definition |abstraction|] (generation.definition archive name)
     .let [:definition: (type.class (//runtime.class_name @definition) (list))]]
    (in (case |abstraction|
          {.#Some [_ {.#Some [expected_arity @abstraction]}]}
          (let [:abstraction: (type.class (//runtime.class_name @abstraction) (list))]
            (_.getstatic :definition: //value.field :abstraction:))
          
          _
          (_.getstatic :definition: //value.field //type.value)))))
