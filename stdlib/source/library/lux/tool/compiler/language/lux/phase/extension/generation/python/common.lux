(.module:
  [library
   [lux #*
    [abstract
     ["." monad (#+ do)]]
    [control
     ["." function]
     ["." try]
     ["<>" parser
      ["<s>" synthesis (#+ Parser)]]]
    [data
     ["." product]
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." dictionary]
      ["." list ("#\." functor fold)]]]
    [math
     [number
      ["f" frac]]]
    [target
     ["_" python (#+ Expression)]]]]
  ["." //// #_
   ["/" bundle]
   ["/#" // #_
    ["." extension]
    [generation
     [extension (#+ Nullary Unary Binary Trinary
                    nullary unary binary trinary)]
     ["//" python #_
      ["#." runtime (#+ Operation Phase Handler Bundle Generator)]]]
    [//
     [synthesis (#+ %synthesis)]
     ["." generation]
     [///
      ["#" phase]]]]])

(def: #export (custom [parser handler])
  (All [s]
    (-> [(Parser s)
         (-> Text (Generator s))]
        Handler))
  (function (_ extension_name phase archive input)
    (case (<s>.run parser input)
      (#try.Success input')
      (handler extension_name phase archive input')

      (#try.Failure error)
      (/////.throw extension.invalid_syntax [extension_name %synthesis input]))))

## TODO: Get rid of this ASAP
(def: lux::syntax_char_case!
  (..custom [($_ <>.and
                 <s>.any
                 <s>.any
                 (<>.some (<s>.tuple ($_ <>.and
                                         (<s>.tuple (<>.many <s>.i64))
                                         <s>.any))))
             (function (_ extension_name phase archive [input else conditionals])
               (do {! /////.monad}
                 [inputG (phase archive input)
                  elseG (phase archive else)
                  @input (\ ! map _.var (generation.gensym "input"))
                  conditionalsG (: (Operation (List [(Expression Any)
                                                     (Expression Any)]))
                                   (monad.map ! (function (_ [chars branch])
                                                  (do !
                                                    [branchG (phase archive branch)]
                                                    (wrap [(|> chars
                                                               (list\map (|>> .int _.int (_.= @input)))
                                                               (list\fold (function (_ clause total)
                                                                            (if (is? _.none total)
                                                                              clause
                                                                              (_.or clause total)))
                                                                          _.none))
                                                           branchG])))
                                              conditionals))
                  #let [closure (_.lambda (list @input)
                                          (list\fold (function (_ [test then] else)
                                                       (_.? test then else))
                                                     elseG
                                                     conditionalsG))]]
                 (wrap (_.apply/* closure (list inputG)))))]))

(def: lux_procs
  Bundle
  (|> /.empty
      (/.install "syntax char case!" lux::syntax_char_case!)
      (/.install "is" (binary (product.uncurry _.is)))
      (/.install "try" (unary //runtime.lux::try))))

(def: (capped operation parameter subject)
  (-> (-> (Expression Any) (Expression Any) (Expression Any))
      (-> (Expression Any) (Expression Any) (Expression Any)))
  (//runtime.i64::64 (operation parameter subject)))

(def: i64_procs
  Bundle
  (<| (/.prefix "i64")
      (|> /.empty
          (/.install "and" (binary (product.uncurry //runtime.i64::and)))
          (/.install "or" (binary (product.uncurry //runtime.i64::or)))
          (/.install "xor" (binary (product.uncurry //runtime.i64::xor)))
          (/.install "left-shift" (binary (product.uncurry //runtime.i64::left_shift)))
          (/.install "right-shift" (binary (product.uncurry //runtime.i64::right_shift)))
          
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "+" (binary (product.uncurry (..capped _.+))))
          (/.install "-" (binary (product.uncurry (..capped _.-))))
          (/.install "*" (binary (product.uncurry (..capped _.*))))
          (/.install "/" (binary (product.uncurry //runtime.i64::division)))
          (/.install "%" (binary (product.uncurry //runtime.i64::remainder)))
          (/.install "f64" (unary _.float/1))
          (/.install "char" (unary //runtime.i64::char))
          )))

(def: f64_procs
  Bundle
  (<| (/.prefix "f64")
      (|> /.empty
          (/.install "+" (binary (product.uncurry _.+)))
          (/.install "-" (binary (product.uncurry _.-)))
          (/.install "*" (binary (product.uncurry _.*)))
          (/.install "/" (binary (product.uncurry //runtime.f64::/)))
          (/.install "%" (binary (function (_ [parameter subject])
                                   (|> (_.__import__/1 (_.unicode "math"))
                                       (_.do "fmod" (list subject parameter))))))
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "i64" (unary _.int/1))
          (/.install "encode" (unary _.repr/1))
          (/.install "decode" (unary //runtime.f64::decode)))))

(def: (text::clip [paramO extraO subjectO])
  (Trinary (Expression Any))
  (//runtime.text::clip paramO extraO subjectO))

(def: (text::index [startO partO textO])
  (Trinary (Expression Any))
  (//runtime.text::index startO partO textO))

(def: text_procs
  Bundle
  (<| (/.prefix "text")
      (|> /.empty
          (/.install "=" (binary (product.uncurry _.=)))
          (/.install "<" (binary (product.uncurry _.<)))
          (/.install "concat" (binary (product.uncurry (function.flip _.+))))
          (/.install "index" (trinary ..text::index))
          (/.install "size" (unary _.len/1))
          (/.install "char" (binary (product.uncurry //runtime.text::char)))
          (/.install "clip" (trinary ..text::clip))
          )))

(def: io_procs
  Bundle
  (<| (/.prefix "io")
      (|> /.empty
          (/.install "log" (unary //runtime.io::log!))
          (/.install "error" (unary //runtime.io::throw!)))))

(def: #export bundle
  Bundle
  (<| (/.prefix "lux")
      (|> lux_procs
          (dictionary.merge i64_procs)
          (dictionary.merge f64_procs)
          (dictionary.merge text_procs)
          (dictionary.merge io_procs)
          )))
