(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" function]]
   [data
    ["[0]" text (.only)
     ["%" \\format]]
    [collection
     ["[0]" dictionary]
     ["[0]" list]]]
   [target
    ["_" python (.only Expression SVar)]]]]
 ["[0]" //
  ["[1][0]" common (.only custom)]
  ["//[1]" ///
   ["/" bundle]
   ["/[1]" //
    ["[0]" extension]
    [generation
     [extension (.only Nullary Unary Binary Trinary
                       nullary unary binary trinary)]
     ["//" python
      ["[1][0]" runtime (.only Operation Phase Handler Bundle
                               with_vars)]]]
    ["/[1]" //
     ["[0]" generation]
     [synthesis
      ["<s>" \\parser (.only Parser)]]
     ["//[1]" ///
      ["[1][0]" phase]]]]]])

(def: (array::new size)
  (Unary (Expression Any))
  (|> (list _.none)
      _.list
      (_.* size)))

(def: array::length
  (Unary (Expression Any))
  (|>> _.len/1 //runtime.i64::64))

(def: (array::read [indexG arrayG])
  (Binary (Expression Any))
  (_.item indexG arrayG))

(def: (array::write [indexG valueG arrayG])
  (Trinary (Expression Any))
  (//runtime.array::write indexG valueG arrayG))

(def: (array::delete [indexG arrayG])
  (Binary (Expression Any))
  (//runtime.array::write indexG _.none arrayG))

(def: array
  Bundle
  (<| (/.prefix "array")
      (|> /.empty
          (/.install "new" (unary array::new))
          (/.install "length" (unary array::length))
          (/.install "read" (binary array::read))
          (/.install "write" (trinary array::write))
          (/.install "delete" (binary array::delete))
          )))

(def: object::get
  Handler
  (custom
   [(all <>.and <s>.text <s>.any)
    (function (_ extension phase archive [fieldS objectS])
      (do ////////phase.monad
        [objectG (phase archive objectS)]
        (in (_.the fieldS objectG))))]))

(def: object::do
  Handler
  (custom
   [(all <>.and <s>.text <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [methodS objectS inputsS])
      (do [! ////////phase.monad]
        [objectG (phase archive objectS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.do methodS inputsG objectG))))]))

(with_template [<!> <?> <unit>]
  [(def: <!> (Nullary (Expression Any)) (function.constant <unit>))
   (def: <?> (Unary (Expression Any)) (_.= <unit>))]

  [object::none object::none? _.none]
  )

(def: object
  Bundle
  (<| (/.prefix "object")
      (|> /.empty
          (/.install "get" object::get)
          (/.install "do" object::do)
          (/.install "none" (nullary object::none))
          (/.install "none?" (unary object::none?))
          )))

(def: python::constant
  (custom
   [<s>.text
    (function (_ extension phase archive name)
      (do ////////phase.monad
        []
        (in (_.var name))))]))

(def: python::import
  (custom
   [<s>.text
    (function (_ extension phase archive module)
      (do ////////phase.monad
        []
        (in (_.apply (list (_.string module)) (_.var "__import__")))))]))

(def: python::apply
  (custom
   [(all <>.and <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [abstractionS inputsS])
      (do [! ////////phase.monad]
        [abstractionG (phase archive abstractionS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.apply inputsG abstractionG))))]))

(def: python::function
  (custom
   [(all <>.and <s>.i64 <s>.any)
    (function (_ extension phase archive [arity abstractionS])
      (do [! ////////phase.monad]
        [abstractionG (phase archive abstractionS)
         .let [variable (is (-> Text (Operation SVar))
                            (|>> generation.symbol
                                 (at ! each _.var)))]
         g!inputs (monad.each ! (function (_ _) (variable "input"))
                              (list.repeated (.nat arity) []))]
        (in (_.lambda g!inputs
                      (case (.nat arity)
                        0 (_.apply (list //runtime.unit) abstractionG)
                        1 (_.apply g!inputs abstractionG)
                        _ (_.apply (list (_.list g!inputs)) abstractionG))))))]))

(def: python::exec
  (custom
   [(all <>.and <s>.any <s>.any)
    (function (_ extension phase archive [codeS globalsS])
      (do [! ////////phase.monad]
        [codeG (phase archive codeS)
         globalsG (phase archive globalsS)]
        (in (//runtime.lux::exec codeG globalsG))))]))

(def: .public bundle
  Bundle
  (<| (/.prefix "python")
      (|> /.empty
          (dictionary.composite ..array)
          (dictionary.composite ..object)

          (/.install "constant" python::constant)
          (/.install "import" python::import)
          (/.install "apply" python::apply)
          (/.install "function" python::function)
          (/.install "exec" python::exec)
          )))
