(.module:
  [library
   [lux #*
    [abstract
     ["." monad (#+ do)]]
    [control
     ["." function]
     ["<>" parser
      ["<s>" synthesis (#+ Parser)]]]
    [data
     [collection
      ["." dictionary]
      ["." list]]]
    [target
     ["_" python (#+ Expression SVar)]]]]
  ["." // #_
   ["#." common (#+ custom)]
   ["//#" /// #_
    ["/" bundle]
    ["/#" // #_
     ["." extension]
     [generation
      [extension (#+ Nullary Unary Binary Trinary
                     nullary unary binary trinary)]
      ["//" python #_
       ["#." runtime (#+ Operation Phase Handler Bundle
                         with_vars)]]]
     ["/#" // #_
      ["." generation]
      ["//#" /// #_
       ["#." phase]]]]]])

(def: (array::new size)
  (Unary (Expression Any))
  (|> (list _.none)
      _.list
      (_.* size)))

(def: array::length
  (Unary (Expression Any))
  (|>> _.len/1 //runtime.i64::64))

(def: (array::read [indexG arrayG])
  (Binary (Expression Any))
  (_.item indexG arrayG))

(def: (array::write [indexG valueG arrayG])
  (Trinary (Expression Any))
  (//runtime.array::write indexG valueG arrayG))

(def: (array::delete [indexG arrayG])
  (Binary (Expression Any))
  (//runtime.array::write indexG _.none arrayG))

(def: array
  Bundle
  (<| (/.prefix "array")
      (|> /.empty
          (/.install "new" (unary array::new))
          (/.install "length" (unary array::length))
          (/.install "read" (binary array::read))
          (/.install "write" (trinary array::write))
          (/.install "delete" (binary array::delete))
          )))

(def: object::get
  Handler
  (custom
   [($_ <>.and <s>.text <s>.any)
    (function (_ extension phase archive [fieldS objectS])
      (do ////////phase.monad
        [objectG (phase archive objectS)]
        (in (_.the fieldS objectG))))]))

(def: object::do
  Handler
  (custom
   [($_ <>.and <s>.text <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [methodS objectS inputsS])
      (do {! ////////phase.monad}
        [objectG (phase archive objectS)
         inputsG (monad.map ! (phase archive) inputsS)]
        (in (_.do methodS inputsG objectG))))]))

(template [<!> <?> <unit>]
  [(def: <!> (Nullary (Expression Any)) (function.constant <unit>))
   (def: <?> (Unary (Expression Any)) (_.= <unit>))]

  [object::none object::none? _.none]
  )

(def: object
  Bundle
  (<| (/.prefix "object")
      (|> /.empty
          (/.install "get" object::get)
          (/.install "do" object::do)
          (/.install "none" (nullary object::none))
          (/.install "none?" (unary object::none?))
          )))

(def: python::constant
  (custom
   [<s>.text
    (function (_ extension phase archive name)
      (do ////////phase.monad
        []
        (in (_.var name))))]))

(def: python::import
  (custom
   [<s>.text
    (function (_ extension phase archive module)
      (do ////////phase.monad
        []
        (in (_.apply/* (_.var "__import__") (list (_.string module))))))]))

(def: python::apply
  (custom
   [($_ <>.and <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [abstractionS inputsS])
      (do {! ////////phase.monad}
        [abstractionG (phase archive abstractionS)
         inputsG (monad.map ! (phase archive) inputsS)]
        (in (_.apply/* abstractionG inputsG))))]))

(def: python::function
  (custom
   [($_ <>.and <s>.i64 <s>.any)
    (function (_ extension phase archive [arity abstractionS])
      (do {! ////////phase.monad}
        [abstractionG (phase archive abstractionS)
         .let [variable (: (-> Text (Operation SVar))
                           (|>> generation.identifier
                                (\ ! map _.var)))]
         g!inputs (monad.map ! (function (_ _) (variable "input"))
                             (list.repeated (.nat arity) []))]
        (in (_.lambda g!inputs
                      (case (.nat arity)
                        0 (_.apply/1 abstractionG //runtime.unit)
                        1 (_.apply/* abstractionG g!inputs)
                        _ (_.apply/1 abstractionG (_.list g!inputs)))))))]))

(def: python::exec
  (custom
   [($_ <>.and <s>.any <s>.any)
    (function (_ extension phase archive [codeS globalsS])
      (do {! ////////phase.monad}
        [codeG (phase archive codeS)
         globalsG (phase archive globalsS)]
        (in (//runtime.lux::exec codeG globalsG))))]))

(def: .public bundle
  Bundle
  (<| (/.prefix "python")
      (|> /.empty
          (dictionary.merged ..array)
          (dictionary.merged ..object)

          (/.install "constant" python::constant)
          (/.install "import" python::import)
          (/.install "apply" python::apply)
          (/.install "function" python::function)
          (/.install "exec" python::exec)
          )))
