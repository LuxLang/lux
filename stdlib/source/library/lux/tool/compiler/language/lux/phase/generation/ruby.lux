(.using
  [library
   [lux "*"
    [abstract
     [monad {"+" do}]]
    [control
     ["[0]" exception {"+" exception:}]]
    [target
     ["_" ruby]]]]
  ["[0]" / "_"
   [runtime {"+" Phase Phase!}]
   ["[1][0]" primitive]
   ["[1][0]" structure]
   ["[1][0]" reference]
   ["[1][0]" function]
   ["[1][0]" case]
   ["[1][0]" loop]
   ["/[1]" // "_"
    ["[1][0]" reference]
    ["/[1]" // "_"
     ["[1][0]" extension
      [generation
       [ruby
        ["[1]/[0]" common]]]]
     ["/[1]" // "_"
      [analysis {"+" }]
      ["[1][0]" synthesis]
      ["//[1]" /// "_"
       ["[1][0]" phase ("[1]#[0]" monad)]
       [reference {"+" }
        [variable {"+" }]]]]]]])

(exception: .public cannot_recur_as_an_expression)

(def: (expression archive synthesis)
  Phase
  (case synthesis
    (^template [<tag> <generator>]
      [(^ (<tag> value))
       (//////phase#in (<generator> value))])
    ([////synthesis.bit  /primitive.bit]
     [////synthesis.i64  /primitive.i64]
     [////synthesis.f64  /primitive.f64]
     [////synthesis.text /primitive.text])

    (^template [<tag> <generator>]
      [(^ (<tag> value))
       (<generator> expression archive value)])
    ([////synthesis.variant /structure.variant]
     [////synthesis.tuple /structure.tuple]
     
     [////synthesis.branch/let /case.let]
     [////synthesis.branch/if /case.if]
     [////synthesis.branch/get /case.get]
     
     [////synthesis.function/apply /function.apply])

    (^template [<tag> <generator>]
      [(^ (<tag> value))
       (<generator> ///extension/common.statement expression archive value)])
    ([////synthesis.branch/case /case.case]
     [////synthesis.loop/scope /loop.scope]
     [////synthesis.function/abstraction /function.function])

    (^ (////synthesis.loop/again _))
    (//////phase.except ..cannot_recur_as_an_expression [])

    {////synthesis.#Reference value}
    (//reference.reference /reference.system archive value)

    {////synthesis.#Extension extension}
    (///extension.apply archive expression extension)))

(def: .public generate
  Phase
  ..expression)
