(.using
 [library
  [lux "*"
   ["[0]" ffi]
   [abstract
    ["[0]" monad {"+" do}]]
   [control
    ["<>" parser
     ["<c>" code {"+" Parser}]]]
   [data
    [collection
     ["[0]" array {"+" Array}]
     ["[0]" dictionary]
     ["[0]" list]]]
   ["[0]" type
    ["[0]" check]]
   ["@" target
    ["_" scheme]]]]
 [//
  ["/" lux {"+" custom}]
  [//
   ["[0]" bundle]
   [//
    ["[0]" analysis "_"
     ["[1]/[0]" type]]
    [//
     ["[0]" analysis {"+" Analysis Operation Phase Handler Bundle}]
     [///
      ["[0]" phase]]]]]])

(def: array::new
  Handler
  (custom
   [<c>.any
    (function (_ extension phase archive lengthC)
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [lengthA (analysis/type.with_type Nat
                       (phase archive lengthC))
             _ (analysis/type.infer (type (Array :var:)))]
            (in {analysis.#Extension extension (list lengthA)}))))]))

(def: array::length
  Handler
  (custom
   [<c>.any
    (function (_ extension phase archive arrayC)
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [arrayA (analysis/type.with_type (type (Array :var:))
                      (phase archive arrayC))
             _ (analysis/type.infer Nat)]
            (in {analysis.#Extension extension (list arrayA)}))))]))

(def: array::read
  Handler
  (custom
   [(<>.and <c>.any <c>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [indexA (analysis/type.with_type Nat
                      (phase archive indexC))
             arrayA (analysis/type.with_type (type (Array :var:))
                      (phase archive arrayC))
             _ (analysis/type.infer :var:)]
            (in {analysis.#Extension extension (list indexA arrayA)}))))]))

(def: array::write
  Handler
  (custom
   [(all <>.and <c>.any <c>.any <c>.any)
    (function (_ extension phase archive [indexC valueC arrayC])
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [indexA (analysis/type.with_type Nat
                      (phase archive indexC))
             valueA (analysis/type.with_type :var:
                      (phase archive valueC))
             arrayA (analysis/type.with_type (type (Array :var:))
                      (phase archive arrayC))
             _ (analysis/type.infer (type (Array :var:)))]
            (in {analysis.#Extension extension (list indexA valueA arrayA)}))))]))

(def: array::delete
  Handler
  (custom
   [(all <>.and <c>.any <c>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [indexA (analysis/type.with_type Nat
                      (phase archive indexC))
             arrayA (analysis/type.with_type (type (Array :var:))
                      (phase archive arrayC))
             _ (analysis/type.infer (type (Array :var:)))]
            (in {analysis.#Extension extension (list indexA arrayA)}))))]))

(def: bundle::array
  Bundle
  (<| (bundle.prefix "array")
      (|> bundle.empty
          (bundle.install "new" array::new)
          (bundle.install "length" array::length)
          (bundle.install "read" array::read)
          (bundle.install "write" array::write)
          (bundle.install "delete" array::delete)
          )))

(def: Nil
  (for @.scheme ffi.Nil
       Any))

(def: Function
  (for @.scheme ffi.Function
       Any))

(def: bundle::object
  Bundle
  (<| (bundle.prefix "object")
      (|> bundle.empty
          (bundle.install "nil" (/.nullary ..Nil))
          (bundle.install "nil?" (/.unary Any Bit))
          )))

(def: scheme::constant
  Handler
  (custom
   [<c>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.infer Any)]
        (in {analysis.#Extension extension (list (analysis.text name))})))]))

(def: scheme::apply
  Handler
  (custom
   [(all <>.and <c>.any (<>.some <c>.any))
    (function (_ extension phase archive [abstractionC inputsC])
      (do [! phase.monad]
        [abstractionA (analysis/type.with_type ..Function
                        (phase archive abstractionC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.with_type Any)) inputsC)
         _ (analysis/type.infer Any)]
        (in {analysis.#Extension extension (partial_list abstractionA inputsA)})))]))

(def: .public bundle
  Bundle
  (<| (bundle.prefix "scheme")
      (|> bundle.empty
          (dictionary.composite bundle::array)
          (dictionary.composite bundle::object)

          (bundle.install "constant" scheme::constant)
          (bundle.install "apply" scheme::apply)
          (bundle.install "script universe" (/.nullary .Bit))
          )))
