(.module:
  [library
   [lux "*"
    [abstract
     [monad {"+" [do]}]]
    [control
     ["[0]" exception {"+" [exception:]}]]
    [target
     ["_" lua]]]]
  ["[0]" / "_"
   [runtime {"+" [Phase]}]
   ["[1][0]" primitive]
   ["[1][0]" structure]
   ["[1][0]" reference]
   ["[1][0]" case]
   ["[1][0]" loop]
   ["[1][0]" function]
   ["/[1]" // "_"
    ["[1][0]" reference]
    ["/[1]" // "_"
     ["[1][0]" extension
      [generation
       [lua
        ["[1]/[0]" common]]]]
     ["/[1]" // "_"
      [analysis {"+" []}]
      ["[0]" synthesis]
      ["//[1]" /// "_"
       ["[1][0]" phase ("[1]\[0]" monad)]
       [reference {"+" []}
        [variable {"+" []}]]]]]]])

(exception: .public cannot_recur_as_an_expression)

(def: (expression archive synthesis)
  Phase
  (case synthesis
    (^template [<tag> <generator>]
      [(^ (<tag> value))
       (//////phase\in (<generator> value))])
    ([synthesis.bit  /primitive.bit]
     [synthesis.i64  /primitive.i64]
     [synthesis.f64  /primitive.f64]
     [synthesis.text /primitive.text])

    (^ (synthesis.variant variantS))
    (/structure.variant expression archive variantS)

    (^ (synthesis.tuple members))
    (/structure.tuple expression archive members)

    {synthesis.#Reference value}
    (//reference.reference /reference.system archive value)

    (^ (synthesis.branch/case case))
    (/case.case ///extension/common.statement expression archive case)

    (^ (synthesis.branch/let let))
    (/case.let expression archive let)

    (^ (synthesis.branch/if if))
    (/case.if expression archive if)

    (^ (synthesis.branch/get get))
    (/case.get expression archive get)

    (^ (synthesis.loop/scope scope))
    (/loop.scope ///extension/common.statement expression archive scope)

    (^ (synthesis.loop/recur updates))
    (//////phase.except ..cannot_recur_as_an_expression [])

    (^ (synthesis.function/abstraction abstraction))
    (/function.function ///extension/common.statement expression archive abstraction)

    (^ (synthesis.function/apply application))
    (/function.apply expression archive application)

    {synthesis.#Extension extension}
    (///extension.apply archive expression extension)))

(def: .public generate
  Phase
  ..expression)
