(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser
     ["<[0]>" code (.only Parser)]]]
   [data
    [collection
     ["[0]" array]
     ["[0]" dictionary]
     ["[0]" list]]]
   ["[0]" type
    ["[0]" check]]
   ["@" target
    ["_" ruby]]]]
 [//
  ["/" lux (.only custom)]
  [//
   ["[0]" bundle]
   [///
    ["[0]" analysis (.only Analysis Operation Phase Handler Bundle)
     ["[1]/[0]" type]]
    [///
     ["[0]" phase]]]]])

(def: array::new
  Handler
  (custom
   [<code>.any
    (function (_ extension phase archive lengthC)
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [lengthA (<| (analysis/type.expecting Nat)
                         (phase archive lengthC))
             _ (analysis/type.inference (type (array.Array' :read: :write:)))]
            (in {analysis.#Extension extension (list lengthA)}))))]))

(def: array::length
  Handler
  (custom
   [<code>.any
    (function (_ extension phase archive arrayC)
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [arrayA (<| (analysis/type.expecting (type (array.Array' :read: :write:)))
                        (phase archive arrayC))
             _ (analysis/type.inference Nat)]
            (in {analysis.#Extension extension (list arrayA)}))))]))

(def: array::read
  Handler
  (custom
   [(<>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (<| (analysis/type.expecting Nat)
                        (phase archive indexC))
             arrayA (<| (analysis/type.expecting (type (array.Array' :read: :write:)))
                        (phase archive arrayC))
             _ (analysis/type.inference :read:)]
            (in {analysis.#Extension extension (list indexA arrayA)}))))]))

(def: array::write
  Handler
  (custom
   [(all <>.and <code>.any <code>.any <code>.any)
    (function (_ extension phase archive [indexC valueC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (<| (analysis/type.expecting Nat)
                        (phase archive indexC))
             valueA (<| (analysis/type.expecting :write:)
                        (phase archive valueC))
             arrayA (<| (analysis/type.expecting (type (array.Array' :read: :write:)))
                        (phase archive arrayC))
             _ (analysis/type.inference (type (array.Array' :read: :write:)))]
            (in {analysis.#Extension extension (list indexA valueA arrayA)}))))]))

(def: array::delete
  Handler
  (custom
   [(all <>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (<| (analysis/type.expecting Nat)
                        (phase archive indexC))
             arrayA (<| (analysis/type.expecting (type (array.Array' :read: :write:)))
                        (phase archive arrayC))
             _ (analysis/type.inference (type (array.Array' :read: :write:)))]
            (in {analysis.#Extension extension (list indexA arrayA)}))))]))

(def: bundle::array
  Bundle
  (<| (bundle.prefix "array")
      (|> bundle.empty
          (bundle.install "new" array::new)
          (bundle.install "length" array::length)
          (bundle.install "read" array::read)
          (bundle.install "write" array::write)
          (bundle.install "delete" array::delete)
          )))

(def: Nil
  (for @.ruby ffi.Nil
       Any))

(def: Object
  (for @.ruby (type (ffi.Object Any))
       Any))

(def: Function
  (for @.ruby ffi.Function
       Any))

(def: object::get
  Handler
  (custom
   [(all <>.and <code>.text <code>.any)
    (function (_ extension phase archive [fieldC objectC])
      (do phase.monad
        [objectA (<| (analysis/type.expecting ..Object)
                     (phase archive objectC))
         _ (analysis/type.inference .Any)]
        (in {analysis.#Extension extension (list (analysis.text fieldC)
                                                 objectA)})))]))

(def: object::do
  Handler
  (custom
   [(all <>.and <code>.text <code>.any (<code>.tuple (<>.some <code>.any)))
    (function (_ extension phase archive [methodC objectC inputsC])
      (do [! phase.monad]
        [objectA (<| (analysis/type.expecting ..Object)
                     (phase archive objectC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.expecting Any)) inputsC)
         _ (analysis/type.inference .Any)]
        (in {analysis.#Extension extension (list.partial (analysis.text methodC)
                                                         objectA
                                                         inputsA)})))]))

(def: bundle::object
  Bundle
  (<| (bundle.prefix "object")
      (|> bundle.empty
          (bundle.install "get" object::get)
          (bundle.install "do" object::do)
          (bundle.install "nil" (/.nullary ..Nil))
          (bundle.install "nil?" (/.unary Any Bit))
          )))

(def: ruby::constant
  Handler
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.inference Any)]
        (in {analysis.#Extension extension (list (analysis.text name))})))]))

(def: ruby::apply
  Handler
  (custom
   [(all <>.and <code>.any (<code>.tuple (<>.some <code>.any)))
    (function (_ extension phase archive [abstractionC inputsC])
      (do [! phase.monad]
        [abstractionA (<| (analysis/type.expecting ..Function)
                          (phase archive abstractionC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.expecting Any)) inputsC)
         _ (analysis/type.inference Any)]
        (in {analysis.#Extension extension (list.partial abstractionA inputsA)})))]))

(def: ruby::import
  Handler
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.inference Bit)]
        (in {analysis.#Extension extension (list (analysis.text name))})))]))

(def: .public bundle
  Bundle
  (<| (bundle.prefix "ruby")
      (|> bundle.empty
          (dictionary.composite bundle::array)
          (dictionary.composite bundle::object)

          (bundle.install "constant" ruby::constant)
          (bundle.install "apply" ruby::apply)
          (bundle.install "import" ruby::import)
          (bundle.install "script universe" (/.nullary .Bit))
          )))
