(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only Format)]]]
   [macro
    ["^" pattern]]
   [math
    [number
     ["n" nat]
     ["i" int]
     ["r" rev]
     ["f" frac]]]]])

(type .public Simple
  (Variant
   {#Unit}
   {#Bit Bit}
   {#Nat Nat}
   {#Int Int}
   {#Rev Rev}
   {#Frac Frac}
   {#Text Text}))

(def .public equivalence
  (Equivalence Simple)
  (implementation
   (def (= reference sample)
     (case [reference sample]
       [{#Unit} {#Unit}]
       true
       
       (^.with_template [<tag> <=>]
         [[{<tag> reference} {<tag> sample}]
          (<=> reference sample)])
       ([#Bit bit#=]
        [#Nat n.=]
        [#Int i.=]
        [#Rev r.=]
        [#Frac f.=]
        [#Text text#=])
       
       _
       false))))

(def .public (format it)
  (Format Simple)
  (case it
    {#Unit}
    "[]"

    (^.with_template [<tag> <format>]
      [{<tag> value}
       (<format> value)])
    ([#Bit %.bit]
     [#Nat %.nat]
     [#Int %.int]
     [#Rev %.rev]
     [#Frac %.frac]
     [#Text %.text])))
