(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]]
   [data
    ["[0]" bit ("[1]#[0]" equivalence)]
    ["[0]" text ("[1]#[0]" equivalence)
     ["%" format (.only Format)]]]
   [macro
    ["^" pattern]]
   [math
    [number
     ["n" nat]
     ["i" int]
     ["r" rev]
     ["f" frac]]]]])

(type: .public Simple
  (Variant
   {#Unit}
   {#Bit Bit}
   {#Nat Nat}
   {#Int Int}
   {#Rev Rev}
   {#Frac Frac}
   {#Text Text}))

(implementation: .public equivalence
  (Equivalence Simple)

  (def: (= reference sample)
    (case [reference sample]
      [{#Unit} {#Unit}]
      true
      
      (^.template [<tag> <=>]
        [[{<tag> reference} {<tag> sample}]
         (<=> reference sample)])
      ([#Bit bit#=]
       [#Nat n.=]
       [#Int i.=]
       [#Rev r.=]
       [#Frac f.=]
       [#Text text#=])
      
      _
      false)))

(def: .public (format it)
  (Format Simple)
  (case it
    {#Unit}
    "[]"

    (^.template [<tag> <format>]
      [{<tag> value}
       (<format> value)])
    ([#Bit %.bit]
     [#Nat %.nat]
     [#Int %.int]
     [#Rev %.rev]
     [#Frac %.frac]
     [#Text %.text])))
