(.module:
  [library
   [lux "*"
    [abstract
     [monad {"+" do}]]
    [control
     ["[0]" io {"+" IO}]
     ["[0]" try {"+" Try}]]
    [data
     [binary {"+" Binary}]
     [text
      ["%" format {"+" format}]]]
    [world
     ["[0]" file {"+" File}]]]])

(def: extension ".class")

(def: .public (write_class! name bytecode)
  (-> Text Binary (IO Text))
  (let [file_path (format name ..extension)]
    (do io.monad
      [outcome (do (try.with @)
                 [file (: (IO (Try (File IO)))
                          (file.get_file io.monad file.default file_path))]
                 (# file over_write bytecode))]
      (in (case outcome
            {try.#Success definition}
            file_path

            {try.#Failure error}
            error)))))
