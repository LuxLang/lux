(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io (.only IO)]
    ["[0]" try (.only Try)]]
   [data
    [binary (.only Binary)]
    [text
     ["%" \\format (.only format)]]]
   [world
    ["[0]" file (.only File)]]]])

(def extension ".class")

(def .public (write_class! name bytecode)
  (-> Text Binary (IO Text))
  (let [file_path (format name ..extension)]
    (do io.monad
      [outcome (do (try.with @)
                 [file (is (IO (Try (File IO)))
                           (file.get_file io.monad file.default file_path))]
                 (at file over_write bytecode))]
      (in (case outcome
            {try.#Success definition}
            file_path

            {try.#Failure error}
            error)))))
