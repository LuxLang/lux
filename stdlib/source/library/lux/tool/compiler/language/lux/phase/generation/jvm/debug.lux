(.module:
  [library
   [lux #*
    [abstract
     [monad (#+ do)]]
    [control
     ["." io (#+ IO)]
     ["." try (#+ Try)]]
    [data
     [binary (#+ Binary)]
     [text
      ["%" format (#+ format)]]]
    [world
     ["." file (#+ File)]]]])

(def: extension ".class")

(def: #export (write-class! name bytecode)
  (-> Text Binary (IO Text))
  (let [file-path (format name ..extension)]
    (do io.monad
      [outcome (do (try.with @)
                 [file (: (IO (Try (File IO)))
                          (file.get-file io.monad file.default file-path))]
                 (\ file over-write bytecode))]
      (wrap (case outcome
              (#try.Success definition)
              file-path

              (#try.Failure error)
              error)))))
