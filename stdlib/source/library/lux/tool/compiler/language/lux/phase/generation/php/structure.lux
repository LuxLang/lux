(.module:
  [library
   [lux "*"
    [abstract
     ["[0]" monad {"+" [do]}]]
    [data
     [collection
      ["[0]" list]]]
    [target
     ["_" php {"+" [Expression]}]]]]
  ["[0]" // "_"
   ["[1][0]" runtime {"+" [Operation Phase Generator]}]
   ["[1][0]" primitive]
   ["///[1]" //// "_"
    [analysis {"+" [Variant Tuple]}]
    ["[1][0]" synthesis {"+" [Synthesis]}]
    ["//[1]" /// "_"
     ["[1][0]" phase ("[1]\[0]" monad)]]]])

(def: .public (tuple expression archive elemsS+)
  (Generator (Tuple Synthesis))
  (case elemsS+
    #.End
    (///////phase\in (//primitive.text /////synthesis.unit))

    {#.Item singletonS #.End}
    (expression archive singletonS)

    _
    (let [size (_.int (.int (list.size elemsS+)))]
      (|> elemsS+
          (monad.each ///////phase.monad (expression archive))
          (///////phase\each (|>> _.array/*
                                  (//runtime.tuple//make size)))))))

(def: .public (variant expression archive [lefts right? valueS])
  (Generator (Variant Synthesis))
  (let [tag (if right?
              (++ lefts)
              lefts)]
    (///////phase\each (//runtime.variant tag right?)
                       (expression archive valueS))))
