(.module:
  [library
   [lux #*
    [abstract
     ["." monad (#+ do)]]
    [control
     ["." function]]
    [data
     ["." product]
     [number
      ["f" frac]]
     [collection
      ["." dictionary]]]
    [target
     ["_" common_lisp (#+ Expression)]]]]
  ["." /// #_
   ["#." runtime (#+ Operation Phase Handler Bundle)]
   ["#." primitive]
   [//
    [extension (#+ Nullary Unary Binary Trinary
                   nullary unary binary trinary)]
    [//
     [extension
      ["." bundle]]]]])

(def: lux_procs
  Bundle
  (|> bundle.empty
      (bundle.install "is" (binary (product.uncurry _.eq)))
      (bundle.install "try" (unary ///runtime.lux//try))))

(def: (i64//left_shift [paramG subjectG])
  (Binary (Expression Any))
  (_.ash (_.rem (_.int +64) paramG) subjectG))

(def: (i64//arithmetic_right_shift [paramG subjectG])
  (Binary (Expression Any))
  (_.ash (|> paramG (_.rem (_.int +64)) (_.* (_.int -1)))
         subjectG))

(def: (i64//logic_right_shift [paramG subjectG])
  (Binary (Expression Any))
  (///runtime.i64//logic_right_shift (_.rem (_.int +64) paramG) subjectG))

(def: i64_procs
  Bundle
  (<| (bundle.prefix "i64")
      (|> bundle.empty
          (bundle.install "and" (binary (product.uncurry _.logand)))
          (bundle.install "or" (binary (product.uncurry _.logior)))
          (bundle.install "xor" (binary (product.uncurry _.logxor)))
          (bundle.install "left-shift" (binary i64//left_shift))
          (bundle.install "logical-right-shift" (binary i64//logic_right_shift))
          (bundle.install "arithmetic-right-shift" (binary i64//arithmetic_right_shift))
          (bundle.install "=" (binary (product.uncurry _.=)))
          (bundle.install "<" (binary (product.uncurry _.<)))
          (bundle.install "+" (binary (product.uncurry _.+)))
          (bundle.install "-" (binary (product.uncurry _.-)))
          (bundle.install "*" (binary (product.uncurry _.*)))
          (bundle.install "/" (binary (product.uncurry _.floor)))
          (bundle.install "%" (binary (product.uncurry _.rem)))
          (bundle.install "f64" (unary (function (_ value)
                                         (_.coerce/2 [value (_.symbol "double-float")]))))
          (bundle.install "char" (unary (|>> _.code_char/1 _.string/1)))
          )))

(def: f64_procs
  Bundle
  (<| (bundle.prefix "f64")
      (|> bundle.empty
          (bundle.install "+" (binary (product.uncurry _.+)))
          (bundle.install "-" (binary (product.uncurry _.-)))
          (bundle.install "*" (binary (product.uncurry _.*)))
          (bundle.install "/" (binary (product.uncurry _./)))
          (bundle.install "%" (binary (product.uncurry _.mod)))
          (bundle.install "=" (binary (product.uncurry _.=)))
          (bundle.install "<" (binary (product.uncurry _.<)))
          (bundle.install "i64" (unary _.floor/1))
          (bundle.install "encode" (unary _.write_to_string/1))
          (bundle.install "decode" (unary (let [@temp (_.var "temp")]
                                            (function (_ input)
                                              (_.let (list [@temp (_.read_from_string/1 input)])
                                                (_.if (_.equal (_.symbol "DOUBLE-FLOAT")
                                                               (_.type_of/1 @temp))
                                                  (///runtime.some @temp)
                                                  ///runtime.none)))))))))

(def: (text//< [paramG subjectG])
  (Binary (Expression Any))
  (|> (_.string< paramG subjectG)
      _.null/1
      _.not/1))

(def: (text//clip [paramO extraO subjectO])
  (Trinary (Expression Any))
  (///runtime.text//clip subjectO paramO extraO))

(def: (text//index [startO partO textO])
  (Trinary (Expression Any))
  (///runtime.text//index textO partO startO))

(def: text_procs
  Bundle
  (<| (bundle.prefix "text")
      (|> bundle.empty
          (bundle.install "=" (binary (product.uncurry _.string=)))
          (bundle.install "<" (binary text//<))
          (bundle.install "concat" (binary _.concatenate/2|string))
          (bundle.install "index" (trinary text//index))
          (bundle.install "size" (unary _.length/1))
          (bundle.install "char" (binary (|>> _.char/2 _.char_int/1)))
          (bundle.install "clip" (trinary text//clip))
          )))

(def: (void code)
  (-> (Expression Any) (Expression Any))
  ($_ _.progn
      code
      ///runtime.unit))

(def: io_procs
  Bundle
  (<| (bundle.prefix "io")
      (|> bundle.empty
          (bundle.install "log" (unary (|>> _.print/1 ..void)))
          (bundle.install "error" (unary _.error/1))
          )))

(def: #export bundle
  Bundle
  (<| (bundle.prefix "lux")
      (|> lux_procs
          (dictionary.merge i64_procs)
          (dictionary.merge f64_procs)
          (dictionary.merge text_procs)
          (dictionary.merge io_procs)
          )))
