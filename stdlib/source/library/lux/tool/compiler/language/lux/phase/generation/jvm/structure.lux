(.using
 [library
  [lux {"-" Variant Tuple}
   [abstract
    ["[0]" monad {"+" do}]]
   [control
    ["[0]" try]]
   [data
    [collection
     ["[0]" list]]]
   [math
    [number
     ["[0]" i32]]]
   [target
    [jvm
     ["_" bytecode {"+" Bytecode}]
     ["[0]" type]
     [encoding
      ["[0]" signed]]]]]]
 ["[0]" // "_"
  ["[1][0]" runtime {"+" Operation Phase Generator}]
  ["[1][0]" primitive]
  ["///[1]" //// "_"
   ["[1][0]" synthesis {"+" Synthesis}]
   [analysis
    [composite {"+" Variant Tuple}]]
   [///
    ["[0]" phase]]]])

(def: $Object
  (type.class "java.lang.Object" (list)))

(def: .public (tuple phase archive membersS)
  (Generator (Tuple Synthesis))
  (case membersS
    {.#End}
    (# phase.monad in //runtime.unit)

    {.#Item singletonS {.#End}}
    (phase archive singletonS)

    _
    (do [! phase.monad]
      [membersI (|> membersS
                    list.enumeration
                    (monad.each ! (function (_ [idx member])
                                    (do !
                                      [memberI (phase archive member)]
                                      (in (do _.monad
                                            [_ _.dup
                                             _ (_.int (.i64 idx))
                                             _ memberI]
                                            _.aastore))))))]
      (in (do [! _.monad]
            [_ (_.int (.i64 (list.size membersS)))
             _ (_.anewarray $Object)]
            (monad.all ! membersI))))))

(def: .public (lefts lefts)
  (-> Nat (Bytecode Any))
  (case lefts
    0 _.iconst_0
    1 _.iconst_1
    2 _.iconst_2
    3 _.iconst_3
    4 _.iconst_4
    5 _.iconst_5
    _ (case (signed.s1 (.int lefts))
        {try.#Success value}
        (_.bipush value)

        {try.#Failure _}
        (case (signed.s2 (.int lefts))
          {try.#Success value}
          (_.sipush value)

          {try.#Failure _}
          (_.int (.i64 lefts))))))

(def: .public (right? right?)
  (-> Bit (Bytecode Any))
  (if right?
    //runtime.right_right?
    //runtime.left_right?))

(def: .public (variant phase archive [lefts right? valueS])
  (Generator (Variant Synthesis))
  (do phase.monad
    [valueI (phase archive valueS)]
    (in (do _.monad
          [_ (..lefts lefts)
           _ (..right? right?)
           _ valueI]
          (_.invokestatic //runtime.class "variant"
                          (type.method [(list)
                                        (list type.int $Object $Object)
                                        (type.array $Object)
                                        (list)]))))))
