(.module:
  [library
   [lux "*"
    [abstract
     ["[0]" monad {"+" do}]]
    [data
     [number
      ["[0]" i32]]
     [collection
      ["[0]" list]]]
    [target
     [jvm
      ["_" bytecode {"+" Bytecode}]
      ["[0]" type]
      [encoding
       ["[0]" signed]]]]]]
  ["[0]" // "_"
   ["[1][0]" runtime {"+" Operation Phase Generator}]
   ["[1][0]" primitive]
   ["///[1]" //// "_"
    [analysis {"+" Variant Tuple}]
    ["[1][0]" synthesis {"+" Synthesis}]
    [///
     ["[0]" phase]]]])

(def: $Object
  (type.class "java.lang.Object" (list)))

(def: .public (tuple generate archive membersS)
  (Generator (Tuple Synthesis))
  (case membersS
    {.#End}
    (# phase.monad in //runtime.unit)

    {.#Item singletonS {.#End}}
    (generate archive singletonS)

    _
    (do [! phase.monad]
      [membersI (|> membersS
                    list.enumeration
                    (monad.each ! (function (_ [idx member])
                                    (do !
                                      [memberI (generate archive member)]
                                      (in (do _.monad
                                            [_ _.dup
                                             _ (_.int (.i64 idx))
                                             _ memberI]
                                            _.aastore))))))]
      (in (do [! _.monad]
            [_ (_.int (.i64 (list.size membersS)))
             _ (_.anewarray $Object)]
            (monad.all ! membersI))))))

(def: .public (tag lefts right?)
  (-> Nat Bit (Bytecode Any))
  (case (if right?
          (.++ lefts)
          lefts)
    0 _.iconst_0
    1 _.iconst_1
    2 _.iconst_2
    3 _.iconst_3
    4 _.iconst_4
    5 _.iconst_5
    tag (case (signed.s1 (.int tag))
          {try.#Success value}
          (_.bipush value)

          {try.#Failure _}
          (case (signed.s2 (.int tag))
            {try.#Success value}
            (_.sipush value)

            {try.#Failure _}
            (_.int (.i64 tag))))))

(def: .public (flag right?)
  (-> Bit (Bytecode Any))
  (if right?
    //runtime.right_flag
    //runtime.left_flag))

(def: .public (variant generate archive [lefts right? valueS])
  (Generator (Variant Synthesis))
  (do phase.monad
    [valueI (generate archive valueS)]
    (in (do _.monad
          [_ (..tag lefts right?)
           _ (..flag right?)
           _ valueI]
          (_.invokestatic //runtime.class "variant"
                          (type.method [(list type.int $Object $Object)
                                        (type.array $Object)
                                        (list)]))))))
