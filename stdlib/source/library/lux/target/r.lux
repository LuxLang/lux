(.module:
  [library
   [lux {"-" [Code or and list if function cond not int]}
    [control
     [pipe {"+" [case> cond> new>]}]
     ["[0]" function]
     ["[0]" maybe ("[1]\[0]" functor)]
     [parser
      ["<[0]>" code]]]
    [data
     ["[0]" text
      ["%" format {"+" [format]}]]
     [collection
      ["[0]" list ("[1]\[0]" functor mix)]]]
    [macro
     [syntax {"+" [syntax:]}]
     ["[0]" template]
     ["[0]" code]]
    [math
     [number
      ["f" frac]]]
    [type
     abstract]]])

(abstract: .public (Code kind)
  Text

  (template [<type> <super>+]
    [(with_expansions [<kind> (template.identifier [<type> "'"])]
       (abstract: .public (<kind> kind) Any)
       (`` (type: .public <type> (|> Any <kind> (~~ (template.spliced <super>+))))))]
    
    [Expression [Code]]
    )

  (template [<type> <super>+]
    [(with_expansions [<kind> (template.identifier [<type> "'"])]
       (abstract: .public (<kind> kind) Any)
       (`` (type: .public (<type> <brand>) (|> <brand> <kind> (~~ (template.spliced <super>+))))))]
    
    [Var [Expression' Code]]
    )

  (template [<var> <kind>]
    [(abstract: .public <kind> Any)
     (type: .public <var> (Var <kind>))]

    [SVar Single]
    [PVar Poly]
    )

  (def: .public var
    (-> Text SVar)
    (|>> :abstraction))
  
  (def: .public var_args
    PVar
    (:abstraction "..."))

  (def: .public manual
    (-> Text Code)
    (|>> :abstraction))
  
  (def: .public code
    (-> (Code Any) Text)
    (|>> :representation))

  (def: (self_contained code)
    (-> Text Expression)
    (:abstraction
     (format "(" code ")")))

  (def: nested_new_line
    (format text.new_line text.tab))

  (def: nested
    (-> Text Text)
    (|>> (text.replaced text.new_line ..nested_new_line)
         (format ..nested_new_line)))

  (def: (_block expression)
    (-> Text Text)
    (format "{" (nested expression) text.new_line "}"))

  (def: .public (block expression)
    (-> Expression Expression)
    (:abstraction
     (format "{"
             (..nested (:representation expression))
             text.new_line "}")))

  (template [<name> <r>]
    [(def: .public <name>
       Expression
       (:abstraction <r>))]

    [null "NULL"]
    [n/a "NA"]
    )

  (template [<name>]
    [(def: .public <name> Expression n/a)]

    [not_available]
    [not_applicable]
    [no_answer]
    )

  (def: .public bool
    (-> Bit Expression)
    (|>> (case> #0 "FALSE"
                #1 "TRUE")
         :abstraction))

  (def: .public int
    (-> Int Expression)
    (|>> %.int :abstraction))

  (def: .public float
    (-> Frac Expression)
    (|>> (cond> [(f.= f.positive_infinity)]
                [(new> "1.0/0.0" [])]
                
                [(f.= f.negative_infinity)]
                [(new> "-1.0/0.0" [])]
                
                [(f.= f.not_a_number)]
                [(new> "0.0/0.0" [])]
                
                ... else
                [%.frac])
         ..self_contained))

  (def: safe
    (-> Text Text)
    (`` (|>> (~~ (template [<find> <replace>]
                   [(text.replaced <find> <replace>)]

                   ["\" "\\"]
                   ["|" "\|"]
                   [text.alarm "\a"]
                   [text.back_space "\b"]
                   [text.tab "\t"]
                   [text.new_line "\n"]
                   [text.carriage_return "\r"]
                   [text.double_quote (format "\" text.double_quote)]
                   ))
             )))

  (def: .public string
    (-> Text Expression)
    (|>> ..safe %.text :abstraction))

  (def: .public (slice from to list)
    (-> Expression Expression Expression Expression)
    (..self_contained
     (format (:representation list)
             "[" (:representation from) ":" (:representation to) "]")))

  (def: .public (slice_from from list)
    (-> Expression Expression Expression)
    (..self_contained
     (format (:representation list)
             "[-1"  ":-" (:representation from) "]")))

  (def: .public (apply args func)
    (-> (List Expression) Expression Expression)
    (let [func (:representation func)
          spacing (|> " "
                      (list.repeated (text.size func))
                      text.together)]
      (:abstraction
       (format func "("
               (|> args
                   (list\each ..code)
                   (text.interposed (format "," text.new_line))
                   ..nested)
               ")"))))

  (template [<name> <function>]
    [(def: .public (<name> members)
       (-> (List Expression) Expression)
       (..apply members (..var <function>)))]

    [vector "c"]
    [list   "list"]
    )

  (def: .public named_list
    (-> (List [Text Expression]) Expression)
    (|>> (list\each (.function (_ [key value])
                      (:abstraction (format key "=" (:representation value)))))
         ..list))

  (def: .public (apply_kw args kw_args func)
    (-> (List Expression) (List [Text Expression]) Expression Expression)
    (..self_contained
     (format (:representation func)
             (format "("
                     (text.interposed "," (list\each ..code args)) ","
                     (text.interposed "," (list\each (.function (_ [key val])
                                                       (format key "=" (:representation val)))
                                                     kw_args))
                     ")"))))

  (syntax: (arity_inputs [arity <code>.nat])
    (in (case arity
          0 (.list)
          _ (|> arity
                list.indices
                (list\each (|>> %.nat code.local_identifier))))))

  (syntax: (arity_types [arity <code>.nat])
    (in (list.repeated arity (` ..Expression))))

  (template [<arity> <function>+]
    [(with_expansions [<apply> (template.identifier ["apply/" <arity>])
                       <inputs> (arity_inputs <arity>)
                       <types> (arity_types <arity>)
                       <definitions> (template.spliced <function>+)]
       (def: .public (<apply> function [<inputs>])
         (-> Expression [<types>] Expression)
         (..apply (.list <inputs>) function))

       (template [<function>]
         [(`` (def: .public (~~ (template.identifier [<function> "/" <arity>]))
                (-> [<types>] Expression)
                (<apply> (..var <function>))))]

         <definitions>))]

    [0
     [["commandArgs"]]]
    [1
     [["intToUtf8"]]]
    [2
     [["paste"]]]
    )

  (def: .public as::integer
    (-> Expression Expression)
    (..apply/1 (..var "as.integer")))

  (def: .public (item idx list)
    (-> Expression Expression Expression)
    (..self_contained
     (format (:representation list) "[[" (:representation idx) "]]")))

  (def: .public (if test then else)
    (-> Expression Expression Expression Expression)
    (:abstraction
     (format "if(" (:representation test) ")"
             " " (.._block (:representation then))
             " else " (.._block (:representation else)))))

  (def: .public (when test then)
    (-> Expression Expression Expression)
    (:abstraction
     (format "if(" (:representation test) ") {"
             (.._block (:representation then))
             text.new_line "}")))

  (def: .public (cond clauses else)
    (-> (List [Expression Expression]) Expression Expression)
    (list\mix (.function (_ [test then] next)
                (if test then next))
              else
              (list.reversed clauses)))

  (template [<name> <op>]
    [(def: .public (<name> param subject)
       (-> Expression Expression Expression)
       (..self_contained
        (format (:representation subject)
                " " <op> " "
                (:representation param))))]

    [=       "=="]
    [<       "<"]
    [<=      "<="]
    [>       ">"]
    [>=      ">="]
    [+       "+"]
    [-       "-"]
    [*       "*"]
    [/       "/"]
    [%%      "%%"]
    [**      "**"]
    [or      "||"]
    [and     "&&"]
    )

  (template [<name> <func>]
    [(def: .public (<name> param subject)
       (-> Expression Expression Expression)
       (..apply (.list subject param) (..var <func>)))]

    [bit_or   "bitwOr"]
    [bit_and  "bitwAnd"]
    [bit_xor  "bitwXor"]
    [bit_shl  "bitwShiftL"]
    [bit_ushr "bitwShiftR"]
    )

  (def: .public (bit_not subject)
    (-> Expression Expression)
    (..apply (.list subject) (..var "bitwNot")))

  (template [<name> <op>]
    [(def: .public <name>
       (-> Expression Expression)
       (|>> :representation (format <op>) ..self_contained))]

    [not    "!"]
    [negate "-"]
    )
  
  (def: .public (length list)
    (-> Expression Expression)
    (..apply (.list list) (..var "length")))

  (def: .public (range from to)
    (-> Expression Expression Expression)
    (..self_contained
     (format (:representation from) ":" (:representation to))))

  (def: .public (function inputs body)
    (-> (List (Ex (_ k) (Var k))) Expression Expression)
    (let [args (|> inputs (list\each ..code) (text.interposed ", "))]
      (..self_contained
       (format "function(" args ") "
               (.._block (:representation body))))))

  (def: .public (try body warning error finally)
    (-> Expression (Maybe Expression) (Maybe Expression) (Maybe Expression) Expression)
    (let [optional (: (-> Text (Maybe Expression) (-> Text Text) Text)
                      (.function (_ parameter value preparation)
                        (|> value
                            (maybe\each (|>> :representation preparation (format ", " parameter " = ")))
                            (maybe.else ""))))]
      (..self_contained
       (format "tryCatch("
               (.._block (:representation body))
               (optional "warning" warning function.identity)
               (optional "error" error function.identity)
               (optional "finally" finally .._block)
               ")"))))

  (def: .public (while test body)
    (-> Expression Expression Expression)
    (..self_contained
     (format "while (" (:representation test) ") "
             (.._block (:representation body)))))

  (def: .public (for_in var inputs body)
    (-> SVar Expression Expression Expression)
    (..self_contained
     (format "for (" (:representation var) " in " (:representation inputs) ")"
             (.._block (:representation body)))))

  (template [<name> <keyword>]
    [(def: .public (<name> message)
       (-> Expression Expression)
       (..apply (.list message) (..var <keyword>)))]

    [stop  "stop"]
    [print "print"]
    )

  (def: .public (set! var value)
    (-> SVar Expression Expression)
    (..self_contained
     (format (:representation var) " <- " (:representation value))))

  (def: .public (set_item! idx value list)
    (-> Expression Expression SVar Expression)
    (..self_contained
     (format (:representation list) "[[" (:representation idx) "]] <- " (:representation value))))

  (def: .public (then pre post)
    (-> Expression Expression Expression)
    (:abstraction
     (format (:representation pre)
             text.new_line
             (:representation post))))
  )
