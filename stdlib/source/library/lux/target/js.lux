(.module:
  [library
   [lux (#- Location Code or and function if cond undefined for comment not int try)
    [control
     [pipe (#+ case>)]]
    [data
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor fold)]]]
    [macro
     ["." template]]
    [math
     [number
      ["i" int]
      ["f" frac]]]
    [type
     abstract]]])

(def: expression
  (text.enclosed ["(" ")"]))

(def: element
  (text.enclosed ["[" "]"]))

(def: nest
  (-> Text Text)
  (|>> (format text.new_line)
       (text.replace_all text.new_line (format text.new_line text.tab))))

(abstract: #export (Code brand)
  Text

  (def: #export code
    (-> (Code Any) Text)
    (|>> :representation))

  (template [<type> <super>+]
    [(with_expansions [<brand> (template.identifier [<type> "'"])]
       (abstract: (<brand> brand) Any)
       (`` (type: #export <type> (|> Any <brand> (~~ (template.spliced <super>+))))))]
    
    [Expression [Code]]
    [Computation [Expression' Code]]
    [Location [Computation' Expression' Code]]
    [Statement [Code]]
    )

  (template [<type> <super>+]
    [(with_expansions [<brand> (template.identifier [<type> "'"])]
       (abstract: #export <brand> Any)
       (`` (type: #export <type> (|> <brand> (~~ (template.spliced <super>+))))))]

    [Var [Location' Computation' Expression' Code]]
    [Access [Location' Computation' Expression' Code]]
    [Literal [Computation' Expression' Code]]
    [Loop [Statement' Code]]
    [Label [Code]]
    )

  (template [<name> <literal>]
    [(def: #export <name> Literal (:abstraction <literal>))]

    [null "null"]
    [undefined "undefined"]
    )

  (def: #export boolean
    (-> Bit Literal)
    (|>> (case>
          #0 "false"
          #1 "true")
         :abstraction))

  (def: #export (number value)
    (-> Frac Literal)
    (:abstraction
     (.cond (f.not_a_number? value)
            "NaN"

            (f.= f.positive_infinity value)
            "Infinity"
            
            (f.= f.negative_infinity value)
            "-Infinity"

            ## else
            (|> value %.frac ..expression))))

  (def: safe
    (-> Text Text)
    (`` (|>> (~~ (template [<replace> <find>]
                   [(text.replace_all <find> <replace>)]

                   ["\\" "\"]
                   ["\t" text.tab]
                   ["\v" text.vertical_tab]
                   ["\0" text.null]
                   ["\b" text.back_space]
                   ["\f" text.form_feed]
                   ["\n" text.new_line]
                   ["\r" text.carriage_return]
                   [(format "\" text.double_quote)
                    text.double_quote]
                   ))
             )))

  (def: #export string
    (-> Text Literal)
    (|>> ..safe
         (text.enclosed [text.double_quote text.double_quote])
         :abstraction))

  (def: argument_separator ", ")
  (def: field_separator ": ")
  (def: statement_suffix ";")

  (def: #export array
    (-> (List Expression) Computation)
    (|>> (list\map ..code)
         (text.join_with ..argument_separator)
         ..element
         :abstraction))

  (def: #export var
    (-> Text Var)
    (|>> :abstraction))

  (def: #export (at index array_or_object)
    (-> Expression Expression Access)
    (:abstraction (format (:representation array_or_object) (..element (:representation index)))))

  (def: #export (the field object)
    (-> Text Expression Access)
    (:abstraction (format (:representation object) "." field)))

  (def: #export (apply/* function inputs)
    (-> Expression (List Expression) Computation)
    (|> inputs
        (list\map ..code)
        (text.join_with ..argument_separator)
        ..expression
        (format (:representation function))
        :abstraction))

  (def: #export (do method inputs object)
    (-> Text (List Expression) Expression Computation)
    (apply/* (..the method object) inputs))

  (def: #export object
    (-> (List [Text Expression]) Computation)
    (|>> (list\map (.function (_ [key val])
                     (format (:representation (..string key)) ..field_separator (:representation val))))
         (text.join_with ..argument_separator)
         (text.enclosed ["{" "}"])
         ..expression
         :abstraction))

  (def: #export (, pre post)
    (-> Expression Expression Computation)
    (|> (format (:representation pre) ..argument_separator (:representation post))
        ..expression
        :abstraction))

  (def: #export (then pre post)
    (-> Statement Statement Statement)
    (:abstraction (format (:representation pre)
                          text.new_line
                          (:representation post))))

  (def: block
    (-> Statement Text)
    (let [close (format text.new_line "}")]
      (|>> :representation
           ..nest
           (text.enclosed ["{"
                           close]))))

  (def: #export (function! name inputs body)
    (-> Var (List Var) Statement Statement)
    (|> body
        ..block
        (format "function " (:representation name)
                (|> inputs
                    (list\map ..code)
                    (text.join_with ..argument_separator)
                    ..expression)
                " ")
        :abstraction))

  (def: #export (function name inputs body)
    (-> Var (List Var) Statement Computation)
    (|> (..function! name inputs body)
        :representation
        ..expression
        :abstraction))

  (def: #export (closure inputs body)
    (-> (List Var) Statement Computation)
    (|> body
        ..block
        (format "function"
                (|> inputs
                    (list\map ..code)
                    (text.join_with ..argument_separator)
                    ..expression)
                " ")
        ..expression
        :abstraction))

  (template [<name> <op>]
    [(def: #export (<name> param subject)
       (-> Expression Expression Computation)
       (|> (format (:representation subject) " " <op> " " (:representation param))
           ..expression
           :abstraction))]

    [=  "==="]
    [<  "<"]
    [<= "<="]
    [>  ">"]
    [>= ">="]
    
    [+  "+"]
    [-  "-"]
    [*  "*"]
    [/  "/"]
    [%  "%"]

    [left_shift "<<"]
    [arithmetic_right_shift ">>"]
    [logic_right_shift ">>>"]

    [or      "||"]
    [and     "&&"]
    [bit_xor "^"]
    [bit_or  "|"]
    [bit_and "&"]
    )

  (template [<name> <prefix>]
    [(def: #export <name>
       (-> Expression Computation)
       (|>> :representation (text.prefix <prefix>) ..expression :abstraction))]

    [not "!"]
    [bit_not "~"]
    [negate "-"]
    )

  (template [<name> <input> <format>]
    [(def: #export (<name> value)
       {#.doc "A 32-bit integer expression."}
       (-> <input> Computation)
       (:abstraction (..expression (format (<format> value) "|0"))))]

    [to_i32 Expression :representation]
    [i32 Int %.int]
    )

  (def: #export (int value)
    (-> Int Literal)
    (:abstraction (.if (i.< +0 value)
                    (%.int value)
                    (%.nat (.nat value)))))

  (def: #export (? test then else)
    (-> Expression Expression Expression Computation)
    (|> (format (:representation test)
                " ? " (:representation then)
                " : " (:representation else))
        ..expression
        :abstraction))

  (def: #export type_of
    (-> Expression Computation)
    (|>> :representation
         (format "typeof ")
         ..expression
         :abstraction))

  (def: #export (new constructor inputs)
    (-> Expression (List Expression) Computation)
    (|> (format "new " (:representation constructor)
                (|> inputs
                    (list\map ..code)
                    (text.join_with ..argument_separator)
                    ..expression))
        ..expression
        :abstraction))

  (def: #export statement
    (-> Expression Statement)
    (|>> :representation (text.suffix ..statement_suffix) :abstraction))

  (def: #export use_strict
    Statement
    (:abstraction (format text.double_quote "use strict" text.double_quote ..statement_suffix)))

  (def: #export (declare name)
    (-> Var Statement)
    (:abstraction (format "var " (:representation name) ..statement_suffix)))

  (def: #export (define name value)
    (-> Var Expression Statement)
    (:abstraction (format "var " (:representation name) " = " (:representation value) ..statement_suffix)))

  (def: #export (set' name value)
    (-> Location Expression Expression)
    (:abstraction (..expression (format (:representation name) " = " (:representation value)))))

  (def: #export (set name value)
    (-> Location Expression Statement)
    (:abstraction (format (:representation name) " = " (:representation value) ..statement_suffix)))

  (def: #export (throw message)
    (-> Expression Statement)
    (:abstraction (format "throw " (:representation message) ..statement_suffix)))

  (def: #export (return value)
    (-> Expression Statement)
    (:abstraction (format "return " (:representation value) ..statement_suffix)))

  (def: #export (delete' value)
    (-> Location Expression)
    (:abstraction (format "delete " (:representation value))))

  (def: #export (delete value)
    (-> Location Statement)
    (:abstraction (format (:representation (delete' value)) ..statement_suffix)))

  (def: #export (if test then! else!)
    (-> Expression Statement Statement Statement)
    (:abstraction (format "if(" (:representation test) ") "
                          (..block then!)
                          " else "
                          (..block else!))))

  (def: #export (when test then!)
    (-> Expression Statement Statement)
    (:abstraction (format "if(" (:representation test) ") "
                          (..block then!))))

  (def: #export (while test body)
    (-> Expression Statement Loop)
    (:abstraction (format "while(" (:representation test) ") "
                          (..block body))))

  (def: #export (do_while test body)
    (-> Expression Statement Loop)
    (:abstraction (format "do " (..block body)
                          " while(" (:representation test) ")" ..statement_suffix)))

  (def: #export (try body [exception catch])
    (-> Statement [Var Statement] Statement)
    (:abstraction (format "try "
                          (..block body)
                          " catch(" (:representation exception) ") "
                          (..block catch))))

  (def: #export (for var init condition update iteration)
    (-> Var Expression Expression Expression Statement Loop)
    (:abstraction (format "for(" (:representation (..define var init))
                          " " (:representation condition)
                          ..statement_suffix " " (:representation update)
                          ")"
                          (..block iteration))))

  (def: #export label
    (-> Text Label)
    (|>> :abstraction))

  (def: #export (with_label label loop)
    (-> Label Loop Statement)
    (:abstraction (format (:representation label) ": " (:representation loop))))

  (template [<keyword> <0> <1>]
    [(def: #export <0>
       Statement
       (:abstraction (format <keyword> ..statement_suffix)))

     (def: #export (<1> label)
       (-> Label Statement)
       (:abstraction (format <keyword> " " (:representation label) ..statement_suffix)))]

    ["break"    break    break_at]
    ["continue" continue continue_at]
    )

  (template [<name> <js>]
    [(def: #export <name>
       (-> Location Expression)
       (|>> :representation
            (text.suffix <js>)
            :abstraction))]

    [++ "++"]
    [-- "--"]
    )

  (def: #export (comment commentary on)
    (All [kind] (-> Text (Code kind) (Code kind)))
    (:abstraction (format "/* "  commentary " */" " " (:representation on))))

  (def: #export (switch input cases default)
    (-> Expression (List [(List Literal) Statement]) (Maybe Statement) Statement)
    (:abstraction (format "switch (" (:representation input) ") "
                          (|> (format (|> cases
                                          (list\map (.function (_ [when then])
                                                      (format (|> when
                                                                  (list\map (|>> :representation (text.enclosed ["case " ":"])))
                                                                  (text.join_with text.new_line))
                                                              (..nest (:representation then)))))
                                          (text.join_with text.new_line))
                                      text.new_line
                                      (case default
                                        (#.Some default)
                                        (format "default:"
                                                (..nest (:representation default)))
                                        
                                        #.None ""))
                              :abstraction
                              ..block))))
  )

(def: #export (cond clauses else!)
  (-> (List [Expression Statement]) Statement Statement)
  (list\fold (.function (_ [test then!] next!)
               (..if test then! next!))
             else!
             (list.reverse clauses)))

(template [<apply> <arg>+ <type>+ <function>+]
  [(`` (def: #export (<apply> function)
         (-> Expression (~~ (template.spliced <type>+)) Computation)
         (.function (_ (~~ (template.spliced <arg>+)))
           (..apply/* function (list (~~ (template.spliced <arg>+)))))))

   (`` (template [<definition> <function>]
         [(def: #export <definition> (<apply> (..var <function>)))]

         (~~ (template.spliced <function>+))))]

  [apply/1 [_0] [Expression]
   [[not_a_number? "isNaN"]]]

  [apply/2 [_0 _1] [Expression Expression]
   []]

  [apply/3 [_0 _1 _2] [Expression Expression Expression]
   []]
  )
