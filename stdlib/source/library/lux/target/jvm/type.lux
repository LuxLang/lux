(.module:
  [library
   [lux {"-" [Type int char]}
    [abstract
     [equivalence {"+" [Equivalence]}]
     [hash {"+" [Hash]}]]
    [control
     ["[0]" maybe]]
    [data
     ["[0]" text
      ["%" format {"+" [Format]}]]
     [collection
      ["[0]" list ("[1]\[0]" functor)]]]
    [math
     [number
      ["n" nat]]]
    [type
     abstract]]]
  ["[0]" // "_"
   [encoding
    ["[1][0]" name {"+" [External]}]]]
  ["[0]" / "_"
   [category {"+" [Void Value' Value Return' Return Method Primitive Object Class Array Var Parameter Declaration]}]
   ["[1][0]" signature {"+" [Signature]}]
   ["[1][0]" descriptor {"+" [Descriptor]}]
   ["[1][0]" reflection {"+" [Reflection]}]])

(abstract: .public (Type category)
  {}
  
  [(Signature category) (Descriptor category) (Reflection category)]

  (type: .public Argument
    [Text (Type Value)])

  (type: .public (Typed a)
    [(Type Value) a])

  (type: .public Constraint
    (Record
     [#name Text
      #super_class (Type Class)
      #super_interfaces (List (Type Class))]))
  
  (template [<name> <style>]
    [(def: .public (<name> type)
       (All (_ category) (-> (Type category) (<style> category)))
       (let [[signature descriptor reflection] (:representation type)]
         <name>))]

    [signature Signature]
    [descriptor Descriptor]
    )

  (def: .public (reflection type)
    (All (_ category)
      (-> (Type (<| Return' Value' category))
          (Reflection (<| Return' Value' category))))
    (let [[signature descriptor reflection] (:representation type)]
      reflection))

  (template [<category> <name> <signature> <descriptor> <reflection>]
    [(def: .public <name>
       (Type <category>)
       (:abstraction [<signature> <descriptor> <reflection>]))]

    [Void void /signature.void /descriptor.void /reflection.void]
    [Primitive boolean /signature.boolean /descriptor.boolean /reflection.boolean]
    [Primitive byte /signature.byte /descriptor.byte /reflection.byte]
    [Primitive short /signature.short /descriptor.short /reflection.short]
    [Primitive int /signature.int /descriptor.int /reflection.int]
    [Primitive long /signature.long /descriptor.long /reflection.long]
    [Primitive float /signature.float /descriptor.float /reflection.float]
    [Primitive double /signature.double /descriptor.double /reflection.double]
    [Primitive char /signature.char /descriptor.char /reflection.char]
    )

  (def: .public (array type)
    (-> (Type Value) (Type Array))
    (:abstraction
     [(/signature.array (..signature type))
      (/descriptor.array (..descriptor type))
      (/reflection.array (..reflection type))]))

  (def: .public (class name parameters)
    (-> External (List (Type Parameter)) (Type Class))
    (:abstraction
     [(/signature.class name (list\each ..signature parameters))
      (/descriptor.class name)
      (/reflection.class name)]))

  (def: .public (declaration name variables)
    (-> External (List (Type Var)) (Type Declaration))
    (:abstraction
     [(/signature.declaration name (list\each ..signature variables))
      (/descriptor.declaration name)
      (/reflection.declaration name)]))

  (def: .public (as_class type)
    (-> (Type Declaration) (Type Class))
    (:abstraction
     (let [[signature descriptor reflection] (:representation type)]
       [(/signature.as_class signature)
        (/descriptor.as_class descriptor)
        (/reflection.as_class reflection)])))

  (def: .public wildcard
    (Type Parameter)
    (:abstraction
     [/signature.wildcard
      /descriptor.wildcard
      /reflection.wildcard]))

  (def: .public (var name)
    (-> Text (Type Var))
    (:abstraction
     [(/signature.var name)
      /descriptor.var
      /reflection.var]))

  (def: .public (lower bound)
    (-> (Type Class) (Type Parameter))
    (:abstraction
     (let [[signature descriptor reflection] (:representation bound)]
       [(/signature.lower signature)
        (/descriptor.lower descriptor)
        (/reflection.lower reflection)])))

  (def: .public (upper bound)
    (-> (Type Class) (Type Parameter))
    (:abstraction
     (let [[signature descriptor reflection] (:representation bound)]
       [(/signature.upper signature)
        (/descriptor.upper descriptor)
        (/reflection.upper reflection)])))

  (def: .public (method [type_variables inputs output exceptions])
    (-> [(List (Type Var))
         (List (Type Value))
         (Type Return)
         (List (Type Class))]
        (Type Method))
    (:abstraction
     [(/signature.method [(list\each ..signature type_variables)
                          (list\each ..signature inputs)
                          (..signature output)
                          (list\each ..signature exceptions)])
      (/descriptor.method [(list\each ..descriptor inputs)
                           (..descriptor output)])
      (:expected ..void)]))

  (implementation: .public equivalence
    (All (_ category) (Equivalence (Type category)))

    (def: (= parameter subject)
      (\ /signature.equivalence =
         (..signature parameter)
         (..signature subject))))

  (implementation: .public hash
    (All (_ category) (Hash (Type category)))

    (def: &equivalence ..equivalence)
    (def: hash (|>> ..signature (\ /signature.hash hash))))

  (def: .public (primitive? type)
    (-> (Type Value) (Either (Type Object)
                             (Type Primitive)))
    (if (`` (or (~~ (template [<type>]
                      [(\ ..equivalence = (: (Type Value) <type>) type)]
                      
                      [..boolean]
                      [..byte]
                      [..short]
                      [..int]
                      [..long]
                      [..float]
                      [..double]
                      [..char]))))
      (|> type (:as (Type Primitive)) #.Right)
      (|> type (:as (Type Object)) #.Left)))

  (def: .public (void? type)
    (-> (Type Return) (Either (Type Value)
                              (Type Void)))
    (if (`` (or (~~ (template [<type>]
                      [(\ ..equivalence = (: (Type Return) <type>) type)]
                      
                      [..void]))))
      (|> type (:as (Type Void)) #.Right)
      (|> type (:as (Type Value)) #.Left)))
  )

(def: .public (class? type)
  (-> (Type Value) (Maybe External))
  (let [repr (|> type ..descriptor /descriptor.descriptor)]
    (if (and (text.starts_with? /descriptor.class_prefix repr)
             (text.ends_with? /descriptor.class_suffix repr))
      (let [prefix_size (text.size /descriptor.class_prefix)
            suffix_size (text.size /descriptor.class_suffix)
            name_size (|> (text.size repr)
                          (n.- prefix_size)
                          (n.- suffix_size))]
        (|> repr
            (text.clip prefix_size name_size)
            (\ maybe.monad each (|>> //name.internal //name.external))))
      #.None)))

(def: .public format
  (All (_ a) (Format (Type a)))
  (|>> ..signature /signature.signature))
