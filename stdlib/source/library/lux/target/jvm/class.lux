(.module:
  [library
   [lux {"-" public private}
    [abstract
     [equivalence {"+" Equivalence}]
     ["[0]" monad {"+" do}]]
    [control
     ["[0]" state]
     ["[0]" try {"+" Try}]]
    [data
     ["[0]" product]
     [format
      ["[0]F" binary {"+" Writer} ("[1]#[0]" monoid)]]
     [collection
      ["[0]" sequence {"+" Sequence}]]]]]
  ["[0]" // "_"
   ["[1][0]" modifier {"+" Modifier modifiers:}]
   ["[1][0]" version {"+" Version Minor Major}]
   ["[1][0]" magic {"+" Magic}]
   ["[1][0]" index {"+" Index}]
   ["[1][0]" attribute {"+" Attribute}]
   ["[1][0]" field {"+" Field}]
   ["[1][0]" method {"+" Method}]
   [encoding
    ["[1][0]" unsigned]
    ["[1][0]" name {"+" Internal}]]
   ["[1][0]" constant {"+" Constant}
    ["[1]/[0]" pool {"+" Pool Resource}]]])

(type: .public Class
  (Rec Class
    (Record
     [#magic Magic
      #minor_version Minor
      #major_version Major
      #constant_pool Pool
      #modifier (Modifier Class)
      #this (Index //constant.Class)
      #super (Index //constant.Class)
      #interfaces (Sequence (Index //constant.Class))
      #fields (Sequence Field)
      #methods (Sequence Method)
      #attributes (Sequence Attribute)])))

(modifiers: Class
  ["0001" public]
  ["0010" final]
  ["0020" super]
  ["0200" interface]
  ["0400" abstract]
  ["1000" synthetic]
  ["2000" annotation]
  ["4000" enum]
  )

(def: .public equivalence
  (Equivalence Class)
  ($_ product.equivalence
      //unsigned.equivalence
      //unsigned.equivalence
      //unsigned.equivalence
      //constant/pool.equivalence
      //modifier.equivalence
      //index.equivalence
      //index.equivalence
      (sequence.equivalence //index.equivalence)
      (sequence.equivalence //field.equivalence)
      (sequence.equivalence //method.equivalence)
      (sequence.equivalence //attribute.equivalence)))

(def: (install_classes this super interfaces)
  (-> Internal Internal (List Internal)
      (Resource [(Index //constant.Class) (Index //constant.Class) (Sequence (Index //constant.Class))]))
  (do [! //constant/pool.monad]
    [@this (//constant/pool.class this)
     @super (//constant/pool.class super)
     @interfaces (: (Resource (Sequence (Index //constant.Class)))
                    (monad.mix ! (function (_ interface @interfaces)
                                   (do !
                                     [@interface (//constant/pool.class interface)]
                                     (in (sequence.suffix @interface @interfaces))))
                               sequence.empty
                               interfaces))]
    (in [@this @super @interfaces])))

(def: .public (class version modifier
                     this super interfaces
                     fields methods attributes)
  (-> Major (Modifier Class)
      Internal Internal (List Internal)
      (List (Resource Field))
      (List (Resource Method))
      (Sequence Attribute)
      (Try Class))
  (do try.monad
    [[pool [@this @super @interfaces] =fields =methods]
     (<| (state.result' //constant/pool.empty)
         (do //constant/pool.monad
           [classes (install_classes this super interfaces)
            =fields (monad.all //constant/pool.monad fields)
            =methods (monad.all //constant/pool.monad methods)]
           (in [classes =fields =methods])))]
    (in [#magic //magic.code
         #minor_version //version.default_minor
         #major_version version
         #constant_pool pool
         #modifier modifier
         #this @this
         #super @super
         #interfaces @interfaces
         #fields (sequence.of_list =fields)
         #methods (sequence.of_list =methods)
         #attributes attributes])))

(def: .public (writer class)
  (Writer Class)
  (`` ($_ binaryF#composite
          (~~ (template [<writer> <slot>]
                [(<writer> (value@ <slot> class))]

                [//magic.writer #magic]
                [//version.writer #minor_version]
                [//version.writer #major_version]
                [//constant/pool.writer #constant_pool]
                [//modifier.writer #modifier]
                [//index.writer #this]
                [//index.writer #super]))
          (~~ (template [<writer> <slot>]
                [((binaryF.sequence/16 <writer>) (value@ <slot> class))]

                [//index.writer #interfaces]
                [//field.writer #fields]
                [//method.writer #methods]
                [//attribute.writer #attributes]
                ))
          )))
