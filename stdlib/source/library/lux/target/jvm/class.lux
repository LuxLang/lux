(.using
 [library
  [lux (.except Type public private)
   [abstract
    [equivalence (.only Equivalence)]
    ["[0]" monad (.only do)]]
   [control
    ["[0]" state]
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    [format
     ["[0]F" binary (.only Writer) (.open: "[1]#[0]" monoid)]]
    [collection
     ["[0]" sequence (.only Sequence)]]]]]
 ["[0]" //
  ["[1][0]" modifier (.only Modifier modifiers:)]
  ["[1][0]" version (.only Version Minor Major)]
  ["[1][0]" magic (.only Magic)]
  ["[1][0]" index (.only Index)]
  ["[1][0]" attribute (.only Attribute)]
  ["[1][0]" field (.only Field)]
  ["[1][0]" method (.only Method)]
  [encoding
   ["[1][0]" unsigned]
   ["[1][0]" name (.only Internal)]]
  ["[1][0]" type (.only Type)
   [category (.only Inheritance)]
   ["[2][0]" signature (.only Signature)]]
  ["[1][0]" constant (.only Constant)
   ["[2][0]" pool (.only Pool Resource)]]])

(type: .public Class
  (Rec Class
    (Record
     [#magic Magic
      #minor_version Minor
      #major_version Major
      #constant_pool Pool
      #modifier (Modifier Class)
      #this (Index //constant.Class)
      #super (Index //constant.Class)
      #interfaces (Sequence (Index //constant.Class))
      #fields (Sequence Field)
      #methods (Sequence Method)
      #attributes (Sequence Attribute)])))

(modifiers: Class
  ["0001" public]
  ["0010" final]
  ["0020" super]
  ["0200" interface]
  ["0400" abstract]
  ["1000" synthetic]
  ["2000" annotation]
  ["4000" enum]
  )

(def: .public equivalence
  (Equivalence Class)
  (all product.equivalence
       //unsigned.equivalence
       //unsigned.equivalence
       //unsigned.equivalence
       //pool.equivalence
       //modifier.equivalence
       //index.equivalence
       //index.equivalence
       (sequence.equivalence //index.equivalence)
       (sequence.equivalence //field.equivalence)
       (sequence.equivalence //method.equivalence)
       (sequence.equivalence //attribute.equivalence)))

(def: (install_classes this super interfaces)
  (-> Internal Internal (List Internal)
      (Resource [(Index //constant.Class) (Index //constant.Class) (Sequence (Index //constant.Class))]))
  (do [! //pool.monad]
    [@this (//pool.class this)
     @super (//pool.class super)
     @interfaces (is (Resource (Sequence (Index //constant.Class)))
                     (monad.mix ! (function (_ interface @interfaces)
                                    (do !
                                      [@interface (//pool.class interface)]
                                      (in (sequence.suffix @interface @interfaces))))
                                sequence.empty
                                interfaces))]
    (in [@this @super @interfaces])))

(def: .public (class version modifier
                     this signature super interfaces
                     fields methods attributes)
  (-> Major (Modifier Class)
      Internal (Maybe (Signature Inheritance)) Internal (List Internal)
      (List (Resource Field))
      (List (Resource Method))
      (Sequence Attribute)
      (Try Class))
  (do try.monad
    [[pool [@this @super @interfaces] =fields =methods @signature]
     (<| (state.result' //pool.empty)
         (do [! //pool.monad]
           [classes (install_classes this super interfaces)
            =fields (monad.all ! fields)
            =methods (monad.all ! methods)
            @signature (case signature
                         {.#Some signature}
                         (at ! each (|>> {.#Some}) (//attribute.signature signature))

                         {.#None}
                         (in {.#None}))]
           (in [classes =fields =methods @signature])))]
    (in [#magic //magic.code
         #minor_version //version.default_minor
         #major_version version
         #constant_pool pool
         #modifier modifier
         #this @this
         #super @super
         #interfaces @interfaces
         #fields (sequence.of_list =fields)
         #methods (sequence.of_list =methods)
         #attributes (case @signature
                       {.#Some @signature}
                       (sequence.suffix @signature attributes)

                       {.#None}
                       attributes)])))

(def: .public (writer class)
  (Writer Class)
  (`` (all binaryF#composite
           (~~ (with_template [<writer> <slot>]
                 [(<writer> (the <slot> class))]

                 [//magic.writer #magic]
                 [//version.writer #minor_version]
                 [//version.writer #major_version]
                 [//pool.writer #constant_pool]
                 [//modifier.writer #modifier]
                 [//index.writer #this]
                 [//index.writer #super]))
           (~~ (with_template [<writer> <slot>]
                 [((binaryF.sequence_16 <writer>) (the <slot> class))]

                 [//index.writer #interfaces]
                 [//field.writer #fields]
                 [//method.writer #methods]
                 [//attribute.writer #attributes]
                 ))
           )))
