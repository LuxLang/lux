... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Type
                public private)
   [abstract
    [equivalence (.only Equivalence)]
    ["[0]" monad]]
   [control
    ["[0]" state]]
   [error
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    ["[0]" binary
     ["[1]F" \\injection (.only Injection) (.use "[1]#[0]" monoid)]]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid)]
     ["[0]" sequence (.only Sequence)]]]
   [macro
    ["[0]" template]]
   [math
    [number
     ["[0]" /16
      ["[1]" natural]]
     ["[0]" /32
      ["[1]" natural]]]]]]
 ["[0]" //
  ["[1][0]" modifier (.only Modifier modifiers)]
  ["[1][0]" version (.only Version Minor Major)]
  ["[1][0]" magic (.only Magic)]
  ["[1][0]" index (.only Index)]
  ["[1][0]" attribute (.only Attribute)]
  ["[1][0]" field (.only Field)]
  ["[1][0]" method (.only Method)]
  [encoding
   [name
    ["[0]" internal]]]
  ["[1][0]" type (.only Type)
   [category (.only Inheritance)]
   ["[2][0]" signature (.only Signature)]]
  ["[1][0]" constant (.only Constant)
   ["[0]" class]
   ["[2][0]" pool (.only Pool Resource)]]])

(every .public Class
  (Rec Class
    (Record
     [#magic Magic
      #minor_version Minor
      #major_version Major
      #constant_pool Pool
      #modifier (Modifier Class)
      #this (Index class.Class)
      #super (Index class.Class)
      #interfaces (Sequence (Index class.Class))
      #fields (Sequence Field)
      #methods (Sequence Method)
      #attributes (Sequence Attribute)])))

(modifiers
 Class
 ["0001" public]
 ["0010" final]
 ["0020" super]
 ["0200" interface]
 ["0400" abstract]
 ["1000" synthetic]
 ["2000" annotation]
 ["4000" enum]
 )

(the .public equivalence
  (Equivalence Class)
  (all product.equivalence
       /32.equivalence
       /16.equivalence
       /16.equivalence
       //pool.equivalence
       //modifier.equivalence
       //index.equivalence
       //index.equivalence
       (sequence.equivalence //index.equivalence)
       (sequence.equivalence //field.equivalence)
       (sequence.equivalence //method.equivalence)
       (sequence.equivalence //attribute.equivalence)
       ))

(alias [=]
       ..equivalence)

(the (install_classes this super interfaces)
  (-> internal.Name internal.Name (List internal.Name)
      (Resource [(Index class.Class) (Index class.Class) (Sequence (Index class.Class))]))
  (monad.let [! //pool.monad]
    [@this (//pool.class this)
     @super (//pool.class super)
     @interfaces (is (Resource (Sequence (Index class.Class)))
                     (list.mix' ! (function (_ interface @interfaces)
                                    (monad.let !
                                      [@interface (//pool.class interface)]
                                      (pure (sequence.suffix @interface @interfaces))))
                                sequence.empty
                                interfaces))]
    (pure [@this @super @interfaces])))

(the .public (class version modifier
                    this signature super interfaces
                    fields methods attributes)
  (-> Major (Modifier Class)
      internal.Name (Maybe (Signature Inheritance)) internal.Name (List internal.Name)
      (List (Resource Field))
      (List (Resource Method))
      (List (Resource Attribute))
      (Try Class))
  (monad.let try.monad
    [[pool [@this @super @interfaces] fields methods attributes @signature]
     (<| (state.value' //pool.empty)
         (monad.let [! //pool.monad]
           [classes (install_classes this super interfaces)
            fields (list.complete ! fields)
            methods (list.complete ! methods)
            attributes (list.complete ! attributes)
            @signature (when signature
                         {.#Some signature}
                         (by ! each (|>> {.#Some}) (//attribute.signature signature))

                         {.#None}
                         (pure {.#None}))]
           (pure [classes fields methods attributes @signature])))]
    (pure [#magic //magic.code
           #minor_version //version.default_minor
           #major_version version
           #constant_pool pool
           #modifier modifier
           #this @this
           #super @super
           #interfaces @interfaces
           #fields (sequence.of_list fields)
           #methods (sequence.of_list methods)
           #attributes (sequence.of_list (when @signature
                                           {.#Some @signature}
                                           (list#composite (list @signature) attributes)

                                           {.#None}
                                           attributes))])))

(the .public (as_binary class)
  (Injection Class)
  (`` (all binaryF#composite
           (,, (template.with [<injection> <slot>]
                 [(<injection> (its <slot> class))]

                 [[//magic.as_binary #magic]
                  [//version.as_binary #minor_version]
                  [//version.as_binary #major_version]
                  [//pool.as_binary #constant_pool]
                  [//modifier.as_binary #modifier]
                  [//index.as_binary #this]
                  [//index.as_binary #super]]))
           (,, (template.with [<injection> <slot>]
                 [((binaryF.sequence_16 <injection>) (its <slot> class))]

                 [[//index.as_binary #interfaces]
                  [//field.as_binary #fields]
                  [//method.as_binary #methods]
                  [//attribute.as_binary #attributes]]))
           )))
