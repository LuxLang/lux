... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Stack stack
                Type static has)
   [abstract
    [monoid (.only Monoid)]
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [macro
    ["[0]" template]]
   [math
    [number
     ["[0]" /16
      ["[1]" natural]]]]]]
 [/
  ["/[0]" limit (.only Limit)
   ["/[0]" stack (.only Stack)]
   ["/[0]" registry (.only Registry)]]
  [///
   [type (.only Type)
    [category (.only Method)]]]])

(every .public Environment
  (Record
   [:limit Limit
    :stack (Maybe Stack)]))

(template.with [<name> <limit>]
  [(the .public (<name> type)
     (-> (Type Method)
         Environment)
     [:limit (<limit> type)
      :stack {.:Some /stack.empty}])]

  [[static /limit.static]
   [virtual /limit.virtual]])

(every .public Condition
  (-> Environment
      (Try Environment)))

(the .public monoid
  (Monoid Condition)
  (implementation
   (the identity
     (|>> {try.:Success}))

   (the (composite left right)
     (function (_ environment)
       (monad.let try.monad
         [environment (left environment)]
         (right environment))))))

(exception.the .public discontinuity)

(the .public (stack environment)
  (-> Environment
      (Try Stack))
  (when (its ..:stack environment)
    {.:Some stack}
    {try.:Success stack}

    {.:None}
    (exception.except ..discontinuity [])))

(the .public discontinue
  (-> Environment
      Environment)
  (.has ..:stack {.:None}))

(exception.the .public (mismatched_stacks [expected actual])
  (Exception [Stack Stack])
  (exception.report
   (list ["Expected" (/stack.as_text expected)]
         ["Actual" (/stack.as_text actual)])))

(the .public (continue expected environment)
  (-> Stack Environment
      (Try [Stack Environment]))
  (when (its ..:stack environment)
    {.:Some actual}
    (if (by /stack.equality = expected actual)
        {try.:Success [actual environment]}
        (exception.except ..mismatched_stacks [expected actual]))

    {.:None}
    {try.:Success [expected (.has ..:stack {.:Some expected} environment)]}))

(the .public (consumes amount)
  (-> /16.Number
      Condition)
  ... TODO: Revisit this definition once lenses/optics have been implemented,
  ... since it can probably be simplified with them.
  (function (_ environment)
    (monad.let try.monad
      [previous (..stack environment)]
      (pure (.has ..:stack {.:Some (/stack.pop amount previous)}
                  environment)))))

(the .public (produces amount)
  (-> /16.Number
      Condition)
  (function (_ environment)
    (monad.let try.monad
      [previous (..stack environment)
       .let [current (/stack.push amount previous)
             limit (|> environment
                       (its [..:limit /limit.:stack])
                       (/stack.major current))]]
      (pure (|> environment
                (.has ..:stack {.:Some current})
                (.has [..:limit /limit.:stack] limit))))))

(the .public (has registry)
  (-> Registry
      Condition)
  (|>> (revised [..:limit /limit.:registry] (/registry.has registry))
       {try.:Success}))
