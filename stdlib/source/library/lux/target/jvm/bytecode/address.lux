... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]
    ["[0]" order (.only Order)]]
   [error
    ["[0]" try (.only Try)]]
   [data
    ["[0]" text]
    ["[0]" binary
     ["[1]" \\injection]]]
   [math
    [number
     ["n" natural]]]
   [type
    ["[0]" nominal]]]]
 [//
  ["[0]" jump]
  [//
   [encoding
    ["[0]" unsigned]
    ["[0]" signed (.only S4)]]]])

(the Reification unsigned.U2)
(the Distance unsigned.U2)

(nominal.every .public Address
  Reification

  (the .public value
    (-> Address
        Reification)
    (|>> nominal.reification))

  (the .public start
    Address
    (|> 0
        unsigned.u2
        try.trusted
        nominal.abstraction))

  (the .public (move distance)
    (-> Distance Address
        (Try Address))
    (|>> nominal.reification
         (unsigned.+/2 distance)
         (by try.functor each (|>> nominal.abstraction))))

  (the with_sign
    (-> Address
        (Try S4))
    (|>> nominal.reification
         unsigned.value
         .integer
         signed.s4))

  (the .public (jump from to)
    (-> Address Address
        (Try jump.Big))
    (do try.monad
      [from (with_sign from)
       to (with_sign to)]
      (signed.-/4 from to)))

  (the .public equivalence
    (Equivalence Address)
    (implementation
     (the (= expected actual)
       (by unsigned.equivalence =
           (nominal.reification expected)
           (nominal.reification actual)))))

  (alias [=]
         ..equivalence)

  (the .public order
    (Order Address)
    (implementation
     (the equivalence ..equivalence)
     (the (< expected actual)
       (n.< (|> expected nominal.reification unsigned.value)
            (|> actual nominal.reification unsigned.value)))))

  (order.for [] ..Address ..order)

  (the .public as_binary
    (binary.Injection Address)
    (|>> nominal.reification
         unsigned.as_binary/2))

  (the .public as_text
    (text.Injection Address)
    (|>> nominal.reification
         unsigned.value
         (by n.base_10 as)))
  )
