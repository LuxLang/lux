... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]
    ["[0]" order (.only Order)]]
   [error
    ["[0]" try (.only Try)]]
   [data
    ["[0]" text]
    ["[0]" binary
     ["[1]" \\injection]]]
   [math
    [number
     ["n" natural]
     [natural
      ["[0]" /16]]
     [integer
      ["[0]" /32]]]]
   [type
    ["[0]" nominal]]]]
 [//
  ["[0]" jump]])

(the Reification /16.Number)
(the Distance /16.Number)

(the .public length
  /16.size)

(nominal.every .public Address
  Reification

  (the .public value
    (-> Address
        Reification)
    (|>> nominal.as))

  (the .public start
    Address
    (|> 0
        /16.of
        nominal.of))

  (the .public (move distance)
    (-> Distance Address
        Address)
    (|>> nominal.as
         (/16.+ distance)
         nominal.of))

  (the with_sign
    (-> Address
        /32.Number)
    (|>> nominal.as
         /16.as
         .integer
         /32.of))

  (the .public (jump from to)
    (-> Address Address
        jump.Big)
    (/32.- (with_sign from)
           (with_sign to)))

  (the .public equivalence
    (Equivalence Address)
    (implementation
     (the (= expected actual)
       (by /16.equivalence =
           (nominal.as expected)
           (nominal.as actual)))))

  (alias [=]
         ..equivalence)

  (the .public order
    (Order Address)
    (implementation
     (the equivalence ..equivalence)
     (the (< expected actual)
       (/16.< (nominal.as expected)
              (nominal.as actual)))))

  (order.for [] ..Address ..order)

  (the .public as_binary
    (binary.Injection Address)
    (|>> nominal.as
         /16.as_binary))

  (the .public as_text
    (text.Injection Address)
    (|>> nominal.as
         /16.as
         (by n.base_10 as)))
  )
