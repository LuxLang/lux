(.using
  [library
   [lux {"-" Type static}
    [abstract
     [monad {"+" do}]
     [equivalence {"+" Equivalence}]]
    [control
     ["[0]" try {"+" Try}]]
    [data
     ["[0]" product]
     ["[0]" format "_"
      ["[1]" binary {"+" Writer} ("[1]#[0]" monoid)]]]
    [math
     [number
      ["n" nat]]]]]
  ["[0]" / "_"
   ["[1][0]" stack {"+" Stack}]
   ["[1][0]" registry {"+" Registry}]
   [////
    [type {"+" Type}
     [category {"+" Method}]]]])

(type: .public Limit
  (Record
   [#stack Stack
    #registry Registry]))

(template [<name> <registry>]
  [(def: .public (<name> type)
     (-> (Type Method) (Try Limit))
     (do try.monad
       [registry (<registry> type)]
       (in [#stack /stack.empty
            #registry registry])))]

  [static /registry.static]
  [virtual /registry.virtual]
  )

(def: .public length
  ($_ n.+
      ... u2 max_stack;
      /stack.length
      ... u2 max_locals;
      /registry.length))

(def: .public equivalence
  (Equivalence Limit)
  ($_ product.equivalence
      /stack.equivalence
      /registry.equivalence
      ))

(def: .public (writer limit)
  (Writer Limit)
  ($_ format#composite
      (/stack.writer (value@ #stack limit))
      (/registry.writer (value@ #registry limit))
      ))
