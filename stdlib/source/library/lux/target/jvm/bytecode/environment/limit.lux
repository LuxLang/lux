(.module:
  [library
   [lux (#- Type static)
    [abstract
     [monad (#+ do)]
     [equivalence (#+ Equivalence)]]
    [control
     ["." try (#+ Try)]]
    [data
     ["." product]
     ["." format #_
      ["#" binary (#+ Writer) ("#\." monoid)]]]
    [math
     [number
      ["n" nat]]]]]
  ["." / #_
   ["#." stack (#+ Stack)]
   ["#." registry (#+ Registry)]
   [////
    [type (#+ Type)
     [category (#+ Method)]]]])

(type: #export Limit
  {#stack Stack
   #registry Registry})

(template [<name> <registry>]
  [(def: #export (<name> type)
     (-> (Type Method) (Try Limit))
     (do try.monad
       [registry (<registry> type)]
       (in {#stack /stack.empty
            #registry registry})))]

  [static /registry.static]
  [virtual /registry.virtual]
  )

(def: #export length
  ($_ n.+
      ## u2 max_stack;
      /stack.length
      ## u2 max_locals;
      /registry.length))

(def: #export equivalence
  (Equivalence Limit)
  ($_ product.equivalence
      /stack.equivalence
      /registry.equivalence
      ))

(def: #export (writer limit)
  (Writer Limit)
  ($_ format\compose
      (/stack.writer (get@ #stack limit))
      (/registry.writer (get@ #registry limit))
      ))
