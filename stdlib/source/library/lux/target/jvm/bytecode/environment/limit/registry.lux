(.module:
  [library
   [lux {"-" [Type for static]}
    [abstract
     ["[0]" equivalence {"+" [Equivalence]}]]
    [control
     ["[0]" try {"+" [Try]} ("[1]\[0]" functor)]]
    [data
     [format
      [binary {"+" [Writer]}]]
     [collection
      ["[0]" list ("[1]\[0]" functor mix)]]]
    [math
     [number
      ["n" nat]]]
    [type
     abstract]]]
  ["[0]" ///// "_"
   [encoding
    ["[1][0]" unsigned {"+" [U1 U2]}]]
   ["[1][0]" type {"+" [Type]}
    [category {"+" [Method]}]
    ["[1]/[0]" parser]]])

(type: .public Register
  U1)

(def: normal 1)
(def: wide 2)

(abstract: .public Registry
  {}
  
  U2

  (def: .public registry
    (-> U2 Registry)
    (|>> :abstraction))

  (def: (minimal type)
    (-> (Type Method) Nat)
    (let [[type_variables inputs output exceptions] (/////type/parser.method type)]
      (|> inputs
          (list\each (function (_ input)
                       (if (or (same? /////type.long input)
                               (same? /////type.double input))
                         ..wide
                         ..normal)))
          (list\mix n.+ 0))))

  (template [<start> <name>]
    [(def: .public <name>
       (-> (Type Method) (Try Registry))
       (|>> ..minimal
            (n.+ <start>)
            /////unsigned.u2
            (try\each ..registry)))]

    [0 static]
    [1 virtual]
    )

  (def: .public equivalence
    (Equivalence Registry)
    (\ equivalence.functor each
       (|>> :representation)
       /////unsigned.equivalence))

  (def: .public writer
    (Writer Registry)
    (|>> :representation /////unsigned.writer/2))

  (def: .public (has needed)
    (-> Registry Registry Registry)
    (|>> :representation
         (/////unsigned.max/2 (:representation needed))
         :abstraction))

  (template [<name> <extra>]
    [(def: .public <name>
       (-> Register Registry)
       (let [extra (|> <extra> /////unsigned.u2 try.trusted)]
         (|>> /////unsigned.lifted/2
              (/////unsigned.+/2 extra)
              try.trusted
              :abstraction)))]

    [for ..normal]
    [for_wide ..wide]
    )
  )

(def: .public length
  /////unsigned.bytes/2)
