... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Stack stack)
   [abstract
    ["[0]" equivalence (.only Equivalence)]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try (.only Try)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    ["[0]" binary
     ["[1]" \\injection]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]]]
 [//
  [datum (.only Datum)]
  [////
   [encoding
    ["[0]" unsigned (.only U2)]]]])

(nominal.every .public Stack
  U2

  (template.with [<datums> <name>]
    [(the .public <name>
       Stack
       (|> <datums>
           unsigned.u2
           maybe.trusted
           nominal.abstraction))]

    [0 empty]
    [1 catch]
    )

  (the .public equivalence
    (Equivalence Stack)
    (by equivalence.functor each
        (|>> nominal.representation)
        unsigned.equivalence))

  (alias [=]
         ..equivalence)

  (the .public as_binary
    (binary.Injection Stack)
    (|>> nominal.representation
         unsigned.as_binary/2))

  (the stack
    (-> U2
        Stack)
    (|>> nominal.abstraction))

  (template.with [<op> <name>]
    [(the .public (<name> amount)
       (-> Datum Stack
           (Try Stack))
       (|>> nominal.representation
            (<op> amount)
            (by try.functor each ..stack)))]

    [unsigned.+/2 push]
    [unsigned.-/2 pop]
    )

  (the .public (major left right)
    (-> Stack Stack
        Stack)
    (nominal.abstraction
     (unsigned.major/2 (nominal.representation left)
                       (nominal.representation right))))

  (the .public as_text
    (text.Injection Stack)
    (|>> nominal.representation
         unsigned.value
         %.natural))
  )

(the .public length
  unsigned.bytes/2)

(the .public random
  (Random Stack)
  (all random.either
       (random#in ..empty)
       (random#in ..catch)
       ))
