... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except #Integer)
   [abstract
    [equivalence (.only Equivalence)]]
   [data
    ["[0]" sum]
    ["[0]" text]
    ["[0]" binary
     ["[1]" \\injection (.only Injection) (.use "[1]#[0]" monoid)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]
    ["[0]" template]
    ["[0]" expansion]]]]
 [/
  ["[0]" tag]
  ["[0]" utf8 (.only UTF8)]
  ["[0]" class (.only Class)]
  ["[0]" name_and_type (.only Name_And_Type)]
  ["[0]" reference (.only Reference)]
  ["[0]" integer]
  ["[0]" float]
  ["[0]" long]
  ["[0]" double]
  ["[0]" string]
  [//
   [type
    ["[0]" category]]]])

(every .public Constant
  (Variant
   {#UTF8 UTF8}
   {#Integer integer.Integer}
   {#Float float.Float}
   {#Long long.Long}
   {#Double double.Double}
   {#Class Class}
   {#String string.String}
   {#Field (Reference category.Value)}
   {#Method (Reference category.Method)}
   {#Interface_Method (Reference category.Method)}
   {#Name_And_Type (Name_And_Type Any)}))

(the .public single
  Natural
  1)

(the .public double
  Natural
  (n.+ ..single ..single))

(the .public (size constant)
  (-> Constant
      Natural)
  (when constant
    (^.or {#Long _}
          {#Double _})
    ..double

    _
    ..single))

(the .public equivalence
  (Equivalence Constant)
  (all sum.equivalence
       ... #UTF8
       text.equivalence
       ... #Integer
       integer.equivalence
       ... #Float
       float.equivalence
       ... #Long
       long.equivalence
       ... #Double
       double.equivalence
       ... #Class
       class.equivalence
       ... #String
       string.equivalence
       ... #Field
       reference.equivalence
       ... #Method
       reference.equivalence
       ... #Interface_Method
       reference.equivalence
       ... #Name_And_Type
       name_and_type.equivalence
       ))

(alias [=]
       ..equivalence)

(the .public random
  (Random Constant)
  (all random.or
       (random.lower_cased 1)
       integer.random
       float.random
       long.random
       double.random
       class.random
       string.random
       reference.random
       reference.random
       reference.random
       name_and_type.random
       ))

(the .public as_binary
  (Injection Constant)
  (expansion.let [<constants> (these [#UTF8             tag.utf8             utf8.as_binary]
                                     [#Integer          tag.integer          integer.as_binary]
                                     [#Float            tag.float            float.as_binary]
                                     [#Long             tag.long             long.as_binary]
                                     [#Double           tag.double           double.as_binary]
                                     [#Class            tag.class            class.as_binary]
                                     [#String           tag.string           string.as_binary]
                                     [#Field            tag.field            reference.as_binary]
                                     [#Method           tag.method           reference.as_binary]
                                     [#Interface_Method tag.interface_method reference.as_binary]
                                     [#Name_And_Type    tag.name_and_type    name_and_type.as_binary]
                                     ... TODO: Method_Handle
                                     ... TODO: Method_Type
                                     ... TODO: Invoke_Dynamic
                                     )]
    (function (_ value)
      (`` (when value
            (,, (template.with [<case> <tag> <injection>]
                  [{<case> value}
                   (binary#composite (tag.as_binary <tag>)
                                     (<injection> value))]

                  [<constants>]))
            )))))
