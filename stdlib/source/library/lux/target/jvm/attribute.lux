(.module:
  [library
   [lux (#- Info Code)
    [abstract
     [monad (#+ do)]
     ["." equivalence (#+ Equivalence)]]
    [control
     ["." try]
     ["." exception (#+ exception:)]]
    [data
     ["." sum]
     ["." product]
     [format
      [".F" binary (#+ Writer)]]]
    [math
     [number
      ["n" nat]]]]]
  ["." // #_
   ["#." index (#+ Index)]
   [encoding
    ["#." unsigned (#+ U2 U4)]]
   ["#." constant (#+ UTF8 Class Value)
    ["#/." pool (#+ Pool Resource)]]]
  ["." / #_
   ["#." constant (#+ Constant)]
   ["#." code]])

(type: .public (Info about)
  {#name (Index UTF8)
   #length U4
   #info about})

(def: .public (info_equivalence Equivalence<about>)
  (All [about]
    (-> (Equivalence about)
        (Equivalence (Info about))))
  ($_ product.equivalence
      //index.equivalence
      //unsigned.equivalence
      Equivalence<about>))

(def: (info_writer writer)
  (All [about]
    (-> (Writer about)
        (Writer (Info about))))
  (function (_ [name length info])
    (let [[nameS nameT] (//index.writer name)
          [lengthS lengthT] (//unsigned.writer/4 length)
          [infoS infoT] (writer info)]
      [($_ n.+ nameS lengthS infoS)
       (|>> nameT lengthT infoT)])))

(with_expansions [<Code> (as_is (/code.Code Attribute))]
  (type: .public #rec Attribute
    (#Constant (Info (Constant Any)))
    (#Code (Info <Code>)))

  (type: .public Code
    <Code>)
  )

(def: .public equivalence
  (Equivalence Attribute)
  (equivalence.rec
   (function (_ equivalence)
     ($_ sum.equivalence
         (info_equivalence /constant.equivalence)
         (info_equivalence (/code.equivalence equivalence))))))

(def: common_attribute_length
  ($_ n.+
      ... u2 attribute_name_index;
      //unsigned.bytes/2
      ... u4 attribute_length;
      //unsigned.bytes/4
      ))

(def: (length attribute)
  (-> Attribute Nat)
  (case attribute
    (^template [<tag>]
      [(<tag> [name length info])
       (|> length //unsigned.value (n.+ ..common_attribute_length))])
    ([#Constant] [#Code])))

... TODO: Inline ASAP
(def: (constant' @name index)
  (-> (Index UTF8) (Constant Any) Attribute)
  (#Constant {#name @name
              #length (|> /constant.length //unsigned.u4 try.assumed)
              #info index}))

(def: .public (constant index)
  (-> (Constant Any) (Resource Attribute))
  (do //constant/pool.monad
    [@name (//constant/pool.utf8 "ConstantValue")]
    (in (constant' @name index))))

... TODO: Inline ASAP
(def: (code' @name specification)
  (-> (Index UTF8) Code Attribute)
  (#Code {#name @name
          ... https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.3
          #length (|> specification
                      (/code.length ..length)
                      //unsigned.u4
                      try.assumed)
          #info specification}))

(def: .public (code specification)
  (-> Code (Resource Attribute))
  (do //constant/pool.monad
    [@name (//constant/pool.utf8 "Code")]
    (in (code' @name specification))))

(def: .public (writer value)
  (Writer Attribute)
  (case value
    (#Constant attribute)
    ((info_writer /constant.writer) attribute)
    
    (#Code attribute)
    ((info_writer (/code.writer writer)) attribute)))
