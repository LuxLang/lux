(.module:
  [library
   [lux (#- int char)
    [abstract
     [equivalence (#+ Equivalence)]]
    [data
     ["." text ("#\." equivalence)
      ["%" format (#+ format)]]]
    [type
     abstract]]]
  ["." // #_
   [category (#+ Void Value Return Method Primitive Object Class Array Var Parameter Declaration)]
   ["#." descriptor]
   [//
    [encoding
     ["#." name (#+ External)]]]])

(abstract: #export (Reflection category)
  Text

  (def: #export reflection
    (-> (Reflection Any) Text)
    (|>> :representation))

  (implementation: #export equivalence
    (All [category] (Equivalence (Reflection category)))
    
    (def: (= parameter subject)
      (text\= (:representation parameter) (:representation subject))))

  (template [<category> <name> <reflection>]
    [(def: #export <name>
       (Reflection <category>)
       (:abstraction <reflection>))]

    [Void void "void"]
    [Primitive boolean "boolean"]
    [Primitive byte "byte"]
    [Primitive short "short"]
    [Primitive int "int"]
    [Primitive long "long"]
    [Primitive float "float"]
    [Primitive double "double"]
    [Primitive char "char"]
    )

  (def: #export class
    (-> External (Reflection Class))
    (|>> :abstraction))

  (def: #export (declaration name)
    (-> External (Reflection Declaration))
    (:transmutation (..class name)))

  (def: #export as_class
    (-> (Reflection Declaration) (Reflection Class))
    (|>> :transmutation))

  (def: #export (array element)
    (-> (Reflection Value) (Reflection Array))
    (let [element' (:representation element)
          elementR (`` (cond (text.starts_with? //descriptor.array_prefix element')
                             element'
                             
                             (~~ (template [<primitive> <descriptor>]
                                   [(\ ..equivalence = <primitive> element)
                                    (//descriptor.descriptor <descriptor>)]

                                   [..boolean //descriptor.boolean]
                                   [..byte //descriptor.byte]
                                   [..short //descriptor.short]
                                   [..int //descriptor.int]
                                   [..long //descriptor.long]
                                   [..float //descriptor.float]
                                   [..double //descriptor.double]
                                   [..char //descriptor.char]))

                             (|> element'
                                 //descriptor.class
                                 //descriptor.descriptor
                                 (text.replace_all //name.internal_separator
                                                   //name.external_separator))))]
      (|> elementR
          (format //descriptor.array_prefix)
          :abstraction)))

  (template [<name> <category>]
    [(def: #export <name>
       (Reflection <category>)
       (:transmutation
        (..class "java.lang.Object")))]

    [var Var]
    [wildcard Parameter]
    )

  (def: #export (lower reflection)
    (-> (Reflection Class) (Reflection Parameter))
    ..wildcard)

  (def: #export upper
    (-> (Reflection Class) (Reflection Parameter))
    (|>> :transmutation))
  )
