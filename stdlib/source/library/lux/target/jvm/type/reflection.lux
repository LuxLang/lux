(.using
 [library
  [lux {"-" Primitive int char}
   [abstract
    [equivalence {"+" Equivalence}]]
   [data
    ["[0]" text ("[1]#[0]" equivalence)
     ["%" format {"+" format}]]]
   [type
    [abstract "*"]]]]
 ["[0]" // "_"
  [category {"+" Void Value Return Method Primitive Object Class Array Var Parameter Declaration}]
  ["[1][0]" descriptor]
  [//
   [encoding
    ["[1][0]" name {"+" External}]]]])

(abstract: .public (Reflection category)
  Text

  (def: .public reflection
    (-> (Reflection Any) Text)
    (|>> representation))

  (implementation: .public equivalence
    (All (_ category) (Equivalence (Reflection category)))
    
    (def: (= parameter subject)
      (text#= (representation parameter) (representation subject))))

  (template [<category> <name> <reflection>]
    [(def: .public <name>
       (Reflection <category>)
       (abstraction <reflection>))]

    [Void void "void"]
    [Primitive boolean "boolean"]
    [Primitive byte "byte"]
    [Primitive short "short"]
    [Primitive int "int"]
    [Primitive long "long"]
    [Primitive float "float"]
    [Primitive double "double"]
    [Primitive char "char"]
    )

  (def: .public class
    (-> External (Reflection Class))
    (|>> abstraction))

  (def: .public (declaration name)
    (-> External (Reflection Declaration))
    (transmutation (..class name)))

  (def: .public as_class
    (-> (Reflection Declaration) (Reflection Class))
    (|>> transmutation))

  (def: .public (array element)
    (-> (Reflection Value) (Reflection Array))
    (let [element' (representation element)
          elementR (`` (cond (text.starts_with? //descriptor.array_prefix element')
                             element'
                             
                             (~~ (template [<primitive> <descriptor>]
                                   [(# ..equivalence = <primitive> element)
                                    (//descriptor.descriptor <descriptor>)]

                                   [..boolean //descriptor.boolean]
                                   [..byte //descriptor.byte]
                                   [..short //descriptor.short]
                                   [..int //descriptor.int]
                                   [..long //descriptor.long]
                                   [..float //descriptor.float]
                                   [..double //descriptor.double]
                                   [..char //descriptor.char]))

                             (|> element'
                                 //descriptor.class
                                 //descriptor.descriptor
                                 (text.replaced //name.internal_separator
                                                //name.external_separator))))]
      (|> elementR
          (format //descriptor.array_prefix)
          abstraction)))

  (template [<name> <category>]
    [(def: .public <name>
       (Reflection <category>)
       (transmutation
        (..class "java.lang.Object")))]

    [var Var]
    [wildcard Parameter]
    )

  (def: .public (lower reflection)
    (-> (Reflection Parameter) (Reflection Parameter))
    ..wildcard)

  (def: .public upper
    (-> (Reflection Parameter) (Reflection Parameter))
    (|>> transmutation))
  )
