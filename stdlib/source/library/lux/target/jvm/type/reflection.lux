... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Declaration Parameter)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]]]
 ["[0]" //
  [category (.only Void Value Return Method Primitive Object Class Array Var Parameter Declaration)]
  ["[1][0]" descriptor]
  [//
   [encoding
    [name
     ["[0]" external]
     ["[0]" internal]]]]])

(nominal.every .public (Reflection category)
  Text

  (the .public reflection
    (for_any (_ category)
      (-> (Reflection category)
          Text))
    (|>> nominal.reification))

  (the .public equivalence
    (for_any (_ category)
      (Equivalence (Reflection category)))
    (implementation
     (the (= parameter subject)
       (text.= (nominal.reification parameter)
               (nominal.reification subject)))))

  (alias [=]
         ..equivalence)

  (the .public hash
    (for_any (_ category)
      (Hash (Reflection category)))
    (implementation
     (the equivalence
       ..equivalence)
     (the hash
       (|>> nominal.reification
            (by text.hash hash)))))

  (template.with [<category> <name> <reflection>]
    [(the .public <name>
       (Reflection <category>)
       (nominal.abstraction <reflection>))]

    [Void void "void"]
    [Primitive boolean "boolean"]
    [Primitive byte "byte"]
    [Primitive short "short"]
    [Primitive int "int"]
    [Primitive long "long"]
    [Primitive float "float"]
    [Primitive double "double"]
    [Primitive char "char"]
    )

  (the .public class
    (-> external.Name
        (Reflection Class))
    (|>> nominal.abstraction))

  (the .public (declaration name)
    (-> external.Name
        (Reflection Declaration))
    (nominal.transmutation (..class name)))

  (the .public as_class
    (-> (Reflection Declaration)
        (Reflection Class))
    (|>> nominal.transmutation))

  (the .public (array element)
    (-> (Reflection Value)
        (Reflection Array))
    (let [element' (nominal.reification element)
          elementR (`` (if (text.starts_with? //descriptor.array_prefix element')
                         element'
                         
                         (,, (template.with [<primitive> <descriptor>]
                               [(by ..equivalence = <primitive> element)
                                (//descriptor.descriptor <descriptor>)]

                               [..boolean //descriptor.boolean]
                               [..byte //descriptor.byte]
                               [..short //descriptor.short]
                               [..int //descriptor.int]
                               [..long //descriptor.long]
                               [..float //descriptor.float]
                               [..double //descriptor.double]
                               [..char //descriptor.char]))

                         ... else
                         (|> element'
                             //descriptor.class
                             //descriptor.descriptor
                             (text.replaced internal.delimiter
                                            external.delimiter))))]
      (|> elementR
          (text //descriptor.array_prefix)
          nominal.abstraction)))

  (template.with [<name> <category>]
    [(the .public <name>
       (Reflection <category>)
       (nominal.transmutation
        (..class "java.lang.Object")))]

    [var Var]
    [wildcard Parameter]
    )

  (the .public (lower reflection)
    (-> (Reflection Parameter)
        (Reflection Parameter))
    ..wildcard)

  (the .public upper
    (-> (Reflection Parameter)
        (Reflection Parameter))
    (|>> nominal.transmutation))
  )
