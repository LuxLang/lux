(.using
 [library
  [lux (.except Primitive int char type parameter)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception (.only exception:)]
    ["<>" parser ("[1]#[0]" monad)
     ["<[0]>" text (.only Parser)]]]
   [data
    ["[0]" product]
    ["[0]" text ("[1]#[0]" equivalence)
     ["%" format (.only format)]]
    [collection
     ["[0]" array]
     ["[0]" dictionary (.only Dictionary)]]]
   [type
    [primitive "*"]
    ["[0]" check (.only Check) ("[1]#[0]" monad)]]]]
 ["[0]" //
  [category (.only Void Value Return Method Primitive Object Class Array Var Parameter)]
  ["[1][0]" descriptor]
  ["[1][0]" signature]
  ["[1][0]" reflection]
  ["[1][0]" parser]
  ["[1][0]" box]
  ["/[1]" // "_"
   [encoding
    ["[1][0]" name]]]])

(template [<name>]
  [(primitive: .public (<name> class) Any)]

  [Lower] [Upper]
  )

(type: .public Mapping
  (Dictionary Text Type))

(def: .public fresh
  Mapping
  (dictionary.empty text.hash))

(exception: .public (unknown_var [var Text])
  (exception.report
   "Var" (%.text var)))

(def: void
  (Parser (Check Type))
  (<>.after //parser.void
            (<>#in (check#in .Any))))

(template [<name> <parser> <reflection>]
  [(def: <name>
     (Parser (Check Type))
     (<>.after <parser>
               (<>#in (check#in {.#Primitive (//reflection.reflection <reflection>) {.#End}}))))]

  [boolean //parser.boolean //reflection.boolean]
  [byte //parser.byte //reflection.byte]
  [short //parser.short //reflection.short]
  [int //parser.int //reflection.int]
  [long //parser.long //reflection.long]
  [float //parser.float //reflection.float]
  [double //parser.double //reflection.double]
  [char //parser.char //reflection.char]
  )

(template [<name> <parser> <box>]
  [(def: <name>
     (Parser (Check Type))
     (<>.after <parser>
               (<>#in (check#in {.#Primitive <box> {.#End}}))))]

  [boxed_boolean //parser.boolean //box.boolean]
  [boxed_byte //parser.byte //box.byte]
  [boxed_short //parser.short //box.short]
  [boxed_int //parser.int //box.int]
  [boxed_long //parser.long //box.long]
  [boxed_float //parser.float //box.float]
  [boxed_double //parser.double //box.double]
  [boxed_char //parser.char //box.char]
  )

(def: primitive
  (Parser (Check Type))
  (all <>.either
       ..boolean
       ..byte
       ..short
       ..int
       ..long
       ..float
       ..double
       ..char
       ))

(def: boxed_primitive
  (Parser (Check Type))
  (all <>.either
       ..boxed_boolean
       ..boxed_byte
       ..boxed_short
       ..boxed_int
       ..boxed_long
       ..boxed_float
       ..boxed_double
       ..boxed_char
       ))

(def: wildcard
  (Parser (Check Type))
  (<>.after //parser.wildcard
            (<>#in (check#each product.right
                               check.existential))))

(def: (var mapping)
  (-> Mapping (Parser (Check Type)))
  (do <>.monad
    [var //parser.var']
    (in (case (dictionary.value var mapping)
          {.#None}
          (check.except ..unknown_var [var])
          
          {.#Some type}
          (check#in type)))))

(def: (class' parameter)
  (-> (Parser (Check Type)) (Parser (Check Type)))
  (|> (do <>.monad
        [name //parser.class_name
         parameters (|> (<>.some parameter)
                        (<>.after (<text>.this //signature.parameters_start))
                        (<>.before (<text>.this //signature.parameters_end))
                        (<>.else (list)))]
        (in (do [! check.monad]
              [parameters (monad.all ! parameters)]
              (in {.#Primitive name parameters}))))
      (<>.after (<text>.this //descriptor.class_prefix))
      (<>.before (<text>.this //descriptor.class_suffix))))

(template [<name> <prefix> <constructor>]
  [(def: <name>
     (-> (Parser (Check Type)) (Parser (Check Type)))
     (|> (<>.after (<text>.this <prefix>))
         ... TODO: Re-enable Lower and Upper, instead of using the simplified limit.
         ... (<>#each (check#each (|>> <ctor> .type)))
         ))]

  [lower //signature.lower_prefix ..Lower]
  [upper //signature.upper_prefix ..Upper]
  )

(def: (parameter mapping)
  (-> Mapping (Parser (Check Type)))
  (<>.rec
   (function (_ parameter)
     (let [class (..class' parameter)]
       (all <>.either
            (..var mapping)
            ..wildcard
            (..lower class)
            (..upper class)
            class
            )))))

(def: .public class
  (-> Mapping (Parser (Check Type)))
  (|>> ..parameter ..class'))

(def: array
  (-> (Parser (Check Type)) (Parser (Check Type)))
  (|>> (<>#each (check#each (function (_ elementT)
                              (case elementT
                                {.#Primitive name {.#End}}
                                (if (`` (or (~~ (template [<reflection>]
                                                  [(text#= (//reflection.reflection <reflection>) name)]

                                                  [//reflection.boolean]
                                                  [//reflection.byte]
                                                  [//reflection.short]
                                                  [//reflection.int]
                                                  [//reflection.long]
                                                  [//reflection.float]
                                                  [//reflection.double]
                                                  [//reflection.char]))))
                                  {.#Primitive (|> name //reflection.class //reflection.array //reflection.reflection) {.#End}}
                                  (|> elementT array.Array .type))

                                _
                                (|> elementT array.Array .type)))))
       (<>.after (<text>.this //descriptor.array_prefix))))

(def: .public (type mapping)
  (-> Mapping (Parser (Check Type)))
  (<>.rec
   (function (_ type)
     (all <>.either
          ..primitive
          (parameter mapping)
          (..array type)
          ))))

(def: .public (boxed_type mapping)
  (-> Mapping (Parser (Check Type)))
  (<>.rec
   (function (_ type)
     (all <>.either
          ..boxed_primitive
          (parameter mapping)
          (..array type)
          ))))

(def: .public (return mapping)
  (-> Mapping (Parser (Check Type)))
  (all <>.either
       ..void
       (..type mapping)
       ))

(def: .public (boxed_return mapping)
  (-> Mapping (Parser (Check Type)))
  (all <>.either
       ..void
       (..boxed_type mapping)
       ))

(def: .public (check operation input)
  (All (_ a) (-> (Parser (Check a)) Text (Check a)))
  (case (<text>.result operation input)
    {try.#Success check}
    check
    
    {try.#Failure error}
    (check.failure error)))
