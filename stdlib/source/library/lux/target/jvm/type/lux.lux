... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Parameter Array
                type)
   [abstract
    [monad (.only do)]
    ["<>" projection (.use "[1]#[0]" monad)]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]
     ["<[1]>" \\projection (.only Projection)]]
    [collection
     ["[0]" array]
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" dictionary (.only Dictionary)]]]
   [macro
    ["[0]" template]]
   ["[0]" type (.only)
    ["[0]" nominal]
    ["[0]" check (.only Check) (.use "[1]#[0]" monad)]]]]
 ["[0]" // (.only)
  [category (.only Void Value Return Method Primitive Object Class Array Var Parameter)]
  ["[1][0]" descriptor]
  ["[1][0]" signature]
  ["[1][0]" reflection]
  ["[1][0]" projection]
  ["[1][0]" box]])

(template.with [<name>]
  [(nominal.every .public (<name> class) Any)]

  [[Lower]
   [Upper]])

(.every .public Mapping
  (Dictionary Text Type))

(the .public fresh
  Mapping
  (dictionary.empty text.hash))

(exception.the .public (unknown_var var)
  (Exception Text)
  (exception.report
   (list ["Var" (%.text var)])))

(the void
  (Projection (Check Type))
  (<>.after //projection.void
            (<>#pure (check#pure .Any))))

(template.with [<name> <projection> <reflection>]
  [(the <name>
     (Projection (Check Type))
     (<>.after <projection>
               (<>#pure (check#pure {.#Nominal (//reflection.reflection <reflection>) (list)}))))]

  [[boolean //projection.boolean //reflection.boolean]
   [byte //projection.byte //reflection.byte]
   [short //projection.short //reflection.short]
   [int //projection.int //reflection.int]
   [long //projection.long //reflection.long]
   [float //projection.float //reflection.float]
   [double //projection.double //reflection.double]
   [char //projection.char //reflection.char]])

(template.with [<name> <projection> <box>]
  [(the <name>
     (Projection (Check Type))
     (<>.after <projection>
               (<>#pure (check#pure {.#Nominal <box> (list)}))))]

  [[boxed_boolean //projection.boolean //box.boolean]
   [boxed_byte //projection.byte //box.byte]
   [boxed_short //projection.short //box.short]
   [boxed_int //projection.int //box.int]
   [boxed_long //projection.long //box.long]
   [boxed_float //projection.float //box.float]
   [boxed_double //projection.double //box.double]
   [boxed_char //projection.char //box.char]])

(the primitive
  (Projection (Check Type))
  (all <>.either
       ..boolean
       ..byte
       ..short
       ..int
       ..long
       ..float
       ..double
       ..char
       ))

(the boxed_primitive
  (Projection (Check Type))
  (all <>.either
       ..boxed_boolean
       ..boxed_byte
       ..boxed_short
       ..boxed_int
       ..boxed_long
       ..boxed_float
       ..boxed_double
       ..boxed_char
       ))

(the wildcard
  (Projection (Check Type))
  (<>.after //projection.wildcard
            (<>#pure (check#each product.right
                                 check.existential))))

(the (var mapping)
  (-> Mapping
      (Projection (Check Type)))
  (do <>.monad
    [var //projection.var']
    (pure (when (dictionary.value var mapping)
            {try.#Success type}
            (check#pure type)

            failure
            (check.except ..unknown_var [var])))))

(the (class' parameter)
  (-> (Projection (Check Type))
      (Projection (Check Type)))
  (|> (do <>.monad
        [name //projection.class_name
         parameters (|> (<>.some parameter)
                        (<>.after (<text>.this //signature.parameters_start))
                        (<>.before (<text>.this //signature.parameters_end))
                        (<>.else (list)))]
        (pure (do [! check.monad]
                [parameters (list.complete ! parameters)]
                (pure {.#Nominal name (list#each (|>> [.co_variant]) parameters)}))))
      (<>.after (<text>.this //descriptor.class_prefix))
      (<>.before (<text>.this //descriptor.class_suffix))))

(template.with [<name> <prefix> <constructor>]
  [(the <name>
     (-> (Projection (Check Type))
         (Projection (Check Type)))
     (|> (<>.after (<text>.this <prefix>))
         ... TODO: Re-enable Lower and Upper, instead of using the simplified limit.
         ... (<>#each (check#each (|>> <constructor> .type)))
         ))]

  [[lower //signature.lower_prefix ..Lower]
   [upper //signature.upper_prefix ..Upper]])

(the (parameter mapping)
  (-> Mapping
      (Projection (Check Type)))
  (<>.rec
   (function (_ parameter)
     (let [class (..class' parameter)]
       (all <>.either
            (..var mapping)
            ..wildcard
            (..lower class)
            (..upper class)
            class
            )))))

(the .public class
  (-> Mapping
      (Projection (Check Type)))
  (|>> ..parameter ..class'))

(the array
  (-> (Projection (Check Type))
      (Projection (Check Type)))
  (|>> (<>#each (check#each (function (_ elementT)
                              (when elementT
                                {.#Nominal name (list)}
                                (if (`` (or (,, (template.with [<reflection>]
                                                  [(text.= (//reflection.reflection <reflection>) name)]

                                                  [[//reflection.boolean]
                                                   [//reflection.byte]
                                                   [//reflection.short]
                                                   [//reflection.int]
                                                   [//reflection.long]
                                                   [//reflection.float]
                                                   [//reflection.double]
                                                   [//reflection.char]]))))
                                    {.#Nominal (|> name //reflection.class //reflection.array //reflection.reflection) (list)}
                                    (|> elementT .Array .type))

                                _
                                (|> elementT .Array .type)))))
       (<>.after (<text>.this //descriptor.array_prefix))))

(the .public (type mapping)
  (-> Mapping
      (Projection (Check Type)))
  (<>.rec
   (function (_ type)
     (all <>.either
          ..primitive
          (parameter mapping)
          (..array type)
          ))))

(the .public (boxed_type mapping)
  (-> Mapping
      (Projection (Check Type)))
  (<>.rec
   (function (_ type)
     (all <>.either
          ..boxed_primitive
          (parameter mapping)
          (..array type)
          ))))

(the .public (return mapping)
  (-> Mapping
      (Projection (Check Type)))
  (all <>.either
       ..void
       (..type mapping)
       ))

(the .public (boxed_return mapping)
  (-> Mapping
      (Projection (Check Type)))
  (all <>.either
       ..void
       (..boxed_type mapping)
       ))

(the .public (check operation input)
  (for_any (_ it)
    (-> (Projection (Check it)) Text
        (Check it)))
  (when (<text>.value operation input)
    {try.#Success check}
    check
    
    {try.#Failure error}
    (check.failure error)))
