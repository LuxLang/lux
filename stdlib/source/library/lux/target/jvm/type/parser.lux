(.module:
  [library
   [lux (#- Type int char primitive)
    [abstract
     [monad (#+ do)]]
    [control
     ["." try]
     ["." function]
     ["<>" parser ("#\." monad)
      ["<.>" text (#+ Parser)]]]
    [data
     ["." product]
     [text
      ["%" format (#+ format)]]
     [collection
      ["." list]]]]]
  ["." // (#+ Type)
   [category (#+ Void Value Return Method Primitive Object Class Array Var Parameter Declaration)]
   ["#." signature]
   ["#." descriptor]
   ["." // #_
    [encoding
     ["#." name (#+ External)]]]])

(template [<category> <name> <signature> <type>]
  [(def: .public <name>
     (Parser (Type <category>))
     (<>.after (<text>.this (//signature.signature <signature>))
               (<>\in <type>)))]

  [Void void //signature.void //.void]
  [Primitive boolean //signature.boolean //.boolean]
  [Primitive byte //signature.byte //.byte]
  [Primitive short //signature.short //.short]
  [Primitive int //signature.int //.int]
  [Primitive long //signature.long //.long]
  [Primitive float //signature.float //.float]
  [Primitive double //signature.double //.double]
  [Primitive char //signature.char //.char]
  [Parameter wildcard //signature.wildcard //.wildcard]
  )

(def: .public primitive
  (Parser (Type Primitive))
  ($_ <>.either
      ..boolean
      ..byte
      ..short
      ..int
      ..long
      ..float
      ..double
      ..char
      ))

(def: var/head
  (format "abcdefghijklmnopqrstuvwxyz"
          "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          "_"))

(def: var/tail
  (format var/head
          "0123456789$"))

(def: class/set
  (format var/tail //name.internal_separator))

(template [<type> <name> <head> <tail> <adapter>]
  [(def: .public <name>
     (Parser <type>)
     (\ <>.functor map <adapter>
        (<text>.slice (<text>.and! (<text>.one_of! <head>)
                                   (<text>.some! (<text>.one_of! <tail>))))))]

  [External class_name class/set  class/set  (|>> //name.internal //name.external)]
  [Text     var_name   var/head   var/tail   function.identity]
  )

(def: .public var'
  (Parser Text)
  (|> ..var_name
      (<>.after (<text>.this //signature.var_prefix))
      (<>.before (<text>.this //descriptor.class_suffix))))

(def: .public var
  (Parser (Type Var))
  (<>\map //.var ..var'))

(def: .public var?
  (-> (Type Value) (Maybe Text))
  (|>> //.signature
       //signature.signature
       (<text>.run ..var')
       try.maybe))

(def: .public name
  (-> (Type Var) Text)
  (|>> //.signature
       //signature.signature
       (<text>.run ..var')
       try.assumed))

(template [<name> <prefix> <constructor>]
  [(def: <name>
     (-> (Parser (Type Class)) (Parser (Type Parameter)))
     (|>> (<>.after (<text>.this <prefix>))
          (<>\map <constructor>)))]

  [lower //signature.lower_prefix //.lower]
  [upper //signature.upper_prefix //.upper]
  )

(def: (class'' parameter)
  (-> (Parser (Type Parameter)) (Parser [External (List (Type Parameter))]))
  (|> (do <>.monad
        [name ..class_name
         parameters (|> (<>.some parameter)
                        (<>.after (<text>.this //signature.parameters_start))
                        (<>.before (<text>.this //signature.parameters_end))
                        (<>.else (list)))]
        (in [name parameters]))
      (<>.after (<text>.this //descriptor.class_prefix))
      (<>.before (<text>.this //descriptor.class_suffix))))

(def: class'
  (-> (Parser (Type Parameter)) (Parser (Type Class)))
  (|>> ..class''
       (\ <>.monad map (product.uncurry //.class))))

(def: .public parameter
  (Parser (Type Parameter))
  (<>.rec
   (function (_ parameter)
     (let [class (..class' parameter)]
       ($_ <>.either
           ..var
           ..wildcard
           (..lower class)
           (..upper class)
           class
           )))))

(def: .public array'
  (-> (Parser (Type Value)) (Parser (Type Array)))
  (|>> (<>.after (<text>.this //descriptor.array_prefix))
       (<>\map //.array)))

(def: .public class
  (Parser (Type Class))
  (..class' ..parameter))

(template [<name> <prefix> <constructor>]
  [(def: .public <name>
     (-> (Type Value) (Maybe (Type Class)))
     (|>> //.signature
          //signature.signature
          (<text>.run (<>.after (<text>.this <prefix>) ..class))
          try.maybe))]

  [lower? //signature.lower_prefix //.lower]
  [upper? //signature.upper_prefix //.upper]
  )

(def: .public read_class
  (-> (Type Class) [External (List (Type Parameter))])
  (|>> //.signature
       //signature.signature
       (<text>.run (..class'' ..parameter))
       try.assumed))

(def: .public value
  (Parser (Type Value))
  (<>.rec
   (function (_ value)
     ($_ <>.either
         ..primitive
         ..parameter
         (..array' value)
         ))))

(def: .public array
  (Parser (Type Array))
  (..array' ..value))

(def: .public object
  (Parser (Type Object))
  ($_ <>.either
      ..class
      ..array))

(def: inputs
  (|> (<>.some ..value)
      (<>.after (<text>.this //signature.arguments_start))
      (<>.before (<text>.this //signature.arguments_end))))

(def: .public return
  (Parser (Type Return))
  (<>.either ..void
             ..value))

(def: exception
  (Parser (Type Class))
  (|> (..class' ..parameter)
      (<>.after (<text>.this //signature.exception_prefix))))

(def: .public method
  (-> (Type Method)
      [(List (Type Var))
       (List (Type Value))
       (Type Return)
       (List (Type Class))])
  (let [parser (: (Parser [(List (Type Var))
                           (List (Type Value))
                           (Type Return)
                           (List (Type Class))])
                  ($_ <>.and
                      (|> (<>.some ..var)
                          (<>.after (<text>.this //signature.parameters_start))
                          (<>.before (<text>.this //signature.parameters_end))
                          (<>.else (list)))
                      ..inputs
                      ..return
                      (<>.some ..exception)))]
    (|>> //.signature
         //signature.signature
         (<text>.run parser)
         try.assumed)))

(template [<name> <category> <parser>]
  [(def: .public <name>
     (-> (Type Value) (Maybe <category>))
     (|>> //.signature
          //signature.signature
          (<text>.run <parser>)
          try.maybe))]

  [array? (Type Value)
   (do <>.monad
     [_ (<text>.this //descriptor.array_prefix)]
     ..value)]
  [class? [External (List (Type Parameter))]
   (..class'' ..parameter)]

  [primitive? (Type Primitive) ..primitive]
  [wildcard? (Type Parameter) ..wildcard]
  [parameter? (Type Parameter) ..parameter]
  [object? (Type Object) ..object]
  )

(def: .public declaration'
  (Parser [External (List (Type Var))])
  (|> (<>.and ..class_name
              (|> (<>.some ..var)
                  (<>.after (<text>.this //signature.parameters_start))
                  (<>.before (<text>.this //signature.parameters_end))
                  (<>.else (list))))
      (<>.after (<text>.this //descriptor.class_prefix))
      (<>.before (<text>.this //descriptor.class_suffix))))

(def: .public declaration
  (-> (Type Declaration) [External (List (Type Var))])
  (|>> //.signature
       //signature.signature
       (<text>.run ..declaration')
       try.assumed))
