(.using
 [library
  [lux (.except Primitive)
   [macro
    ["[0]" template]]
   [type
    [primitive (.except)]]]])

(primitive Void' Any)
(primitive .public (Value' kind) Any)
(primitive .public (Return' kind) Any)
(primitive .public Method Any)

(type: .public Return (<| Return' Any))
(type: .public Value (<| Return' Value' Any))
(type: .public Void (<| Return' Void'))

(primitive (Object' brand) Any)
(type: .public Object (<| Return' Value' Object' Any))

(primitive (Parameter' brand) Any)
(type: .public Parameter (<| Return' Value' Object' Parameter' Any))

(with_template [<parents> <child>]
  [(with_expansions [<raw> (template.symbol [<child> "'"])]
     (primitive <raw> Any)
     (type: .public <child>
       (`` (<| Return' Value' (~~ (template.spliced <parents>)) <raw>))))]

  [[] Primitive]
  [[Object' Parameter'] Var]
  [[Object' Parameter'] Class]
  [[Object' Parameter'] Array]
  )

(primitive .public Declaration Any)
(primitive .public Inheritance Any)
