(.using
  [library
   [lux {"-" Primitive}
    [macro
     ["[0]" template]]
    [type
     abstract]]])

(abstract: Void' Any)
(abstract: .public (Value' kind) Any)
(abstract: .public (Return' kind) Any)
(abstract: .public Method Any)

(type: .public Return (<| Return' Any))
(type: .public Value (<| Return' Value' Any))
(type: .public Void (<| Return' Void'))

(abstract: (Object' brand) Any)
(type: .public Object (<| Return' Value' Object' Any))

(abstract: (Parameter' brand) Any)
(type: .public Parameter (<| Return' Value' Object' Parameter' Any))

(template [<parents> <child>]
  [(with_expansions [<raw> (template.symbol [<child> "'"])]
     (abstract: <raw> Any)
     (type: .public <child>
       (`` (<| Return' Value' (~~ (template.spliced <parents>)) <raw>))))]

  [[] Primitive]
  [[Object' Parameter'] Var]
  [[Object' Parameter'] Class]
  [[Object'] Array]
  )

(abstract: .public Declaration Any)
(abstract: .public Inheritance Any)
