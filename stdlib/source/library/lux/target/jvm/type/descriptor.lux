... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Declaration Parameter Array)
   [abstract
    [equality (.only Equality)]
    [hash (.only Hash)]]
   [data
    ["[0]" maybe]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]:[0]" functor)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]]]
 ["[0]" //
  [category (.only Void Value Return Method Primitive Object Class Array Var Parameter Declaration)]
  ["/[1]" //
   [encoding
    [name
     ["[0]" external]
     ["[0]" internal]]]]])

(nominal.every .public (Descriptor category)
  Text

  (the .public descriptor
    (-> (Descriptor Any)
        Text)
    (|>> nominal.as))

  (template.with [<sigil> <category> <name>]
    [(the .public <name>
       (Descriptor <category>)
       (nominal.of <sigil>))]

    [["V" Void void]
     ["Z" Primitive boolean]
     ["B" Primitive byte]
     ["S" Primitive short]
     ["I" Primitive int]
     ["J" Primitive long]
     ["F" Primitive float]
     ["D" Primitive double]
     ["C" Primitive char]])

  (the .public class_prefix "L")
  (the .public class_suffix ";")

  (the .public class
    (-> external.Name
        (Descriptor Class))
    (|>> internal.name
         internal.value
         (text.enclosed [..class_prefix ..class_suffix])
         nominal.of))

  (the .public (declaration name)
    (-> external.Name
        (Descriptor Declaration))
    (nominal.transmutation (..class name)))

  (the .public as_class
    (-> (Descriptor Declaration)
        (Descriptor Class))
    (|>> nominal.transmutation))

  (template.with [<name> <category>]
    [(the .public <name>
       (Descriptor <category>)
       (nominal.transmutation
        (..class "java.lang.Object")))]

    [[var Var]
     [wildcard Parameter]])

  (the .public (lower _)
    (-> (Descriptor Parameter)
        (Descriptor Parameter))
    ..wildcard)

  (the .public upper
    (-> (Descriptor Parameter)
        (Descriptor Parameter))
    (|>> nominal.transmutation))
  
  (the .public array_prefix "[")

  (the .public array
    (-> (Descriptor Value)
        (Descriptor Array))
    (|>> nominal.as
         (text ..array_prefix)
         nominal.of))

  (the .public (method [inputs output])
    (-> [(List (Descriptor Value))
         (Descriptor Return)]
        (Descriptor Method))
    (nominal.of
     (text (|> inputs
               (list:each ..descriptor)
               text.together
               (text.enclosed ["(" ")"]))
           (nominal.as output))))

  (the .public equality
    (for_any (_ category)
      (Equality (Descriptor category)))
    (implementation
     (the (= parameter subject)
       (text.= (nominal.as parameter)
               (nominal.as subject)))))

  (alias [=]
         ..equality)

  (the .public hash
    (for_any (_ category)
      (Hash (Descriptor category)))
    (implementation
     (the equality
       ..equality)
     (the hash
       (|>> nominal.as
            (by text.hash hash)))))

  (the .public class_name
    (-> (Descriptor Object)
        internal.Name)
    (let [prefix_size (text.size ..class_prefix)
          suffix_size (text.size ..class_suffix)]
      (function (_ descriptor)
        (let [repr (nominal.as descriptor)]
          (if (text.starts_with? ..array_prefix repr)
              (internal.name repr)
              (|> repr
                  (text.clip prefix_size
                             (|> (text.size repr)
                                 (n.- prefix_size)
                                 (n.- suffix_size)))
                  (by maybe.monad each internal.name)
                  maybe.trusted))))))
  )
