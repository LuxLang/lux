(.using
 [library
  [lux {"-" Code}
   [abstract
    [equivalence {"+" Equivalence}]]
   [data
    ["[0]" product]
    ["[0]" binary {"+" Binary}]
    [format
     ["[0]F" binary {"+" Writer} ("[1]#[0]" monoid)]]
    [collection
     ["[0]" sequence {"+" Sequence} ("[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" nat]]]]]
 ["[0]" /// "_"
  [bytecode
   [environment
    ["[1][0]" limit {"+" Limit}]]]
  [encoding
   ["[1][0]" unsigned {"+" U2}]]]
 ["[0]" / "_"
  ["[1][0]" exception {"+" Exception}]])

(type: .public (Code Attribute)
  (Record
   [#limit Limit
    #code Binary
    #exception_table (Sequence Exception)
    #attributes (Sequence Attribute)]))

(def: .public (length length code)
  (All (_ Attribute) (-> (-> Attribute Nat) (Code Attribute) Nat))
  ($_ n.+
      ... u2 max_stack;
      ... u2 max_locals;
      ///limit.length
      ... u4 code_length;
      ///unsigned.bytes/4
      ... u1 code[code_length];
      (binary.size (the #code code))
      ... u2 exception_table_length;
      ///unsigned.bytes/2
      ... exception_table[exception_table_length];
      (|> code
          (the #exception_table)
          sequence.size
          (n.* /exception.length))
      ... u2 attributes_count;
      ///unsigned.bytes/2
      ... attribute_info attributes[attributes_count];
      (|> code
          (the #attributes)
          (sequence#each length)
          (sequence#mix n.+ 0))))

(def: .public (equivalence attribute_equivalence)
  (All (_ attribute)
    (-> (Equivalence attribute) (Equivalence (Code attribute))))
  ($_ product.equivalence
      ///limit.equivalence
      binary.equivalence
      (sequence.equivalence /exception.equivalence)
      (sequence.equivalence attribute_equivalence)
      ))

... https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.3
(def: .public (writer writer code)
  (All (_ Attribute) (-> (Writer Attribute) (Writer (Code Attribute))))
  ($_ binaryF#composite
      ... u2 max_stack;
      ... u2 max_locals;
      (///limit.writer (the #limit code))
      ... u4 code_length;
      ... u1 code[code_length];
      (binaryF.binary_32 (the #code code))
      ... u2 exception_table_length;
      ... exception_table[exception_table_length];
      ((binaryF.sequence_16 /exception.writer) (the #exception_table code))
      ... u2 attributes_count;
      ... attribute_info attributes[attributes_count];
      ((binaryF.sequence_16 writer) (the #attributes code))
      ))
