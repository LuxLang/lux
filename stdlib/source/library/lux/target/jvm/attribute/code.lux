(.module:
  [library
   [lux (#- Code)
    [abstract
     [equivalence (#+ Equivalence)]]
    [data
     ["." product]
     ["." binary (#+ Binary)]
     [format
      [".F" binary (#+ Writer) ("#\." monoid)]]
     [collection
      ["." row (#+ Row) ("#\." functor mix)]]]
    [math
     [number
      ["n" nat]]]]]
  ["." /// #_
   [bytecode
    [environment
     ["#." limit (#+ Limit)]]]
   [encoding
    ["#." unsigned (#+ U2)]]]
  ["." / #_
   ["#." exception (#+ Exception)]])

(type: .public (Code Attribute)
  (Record
   {#limit Limit
    #code Binary
    #exception_table (Row Exception)
    #attributes (Row Attribute)}))

(def: .public (length length code)
  (All [Attribute] (-> (-> Attribute Nat) (Code Attribute) Nat))
  ($_ n.+
      ... u2 max_stack;
      ... u2 max_locals;
      ///limit.length
      ... u4 code_length;
      ///unsigned.bytes/4
      ... u1 code[code_length];
      (binary.size (value@ #code code))
      ... u2 exception_table_length;
      ///unsigned.bytes/2
      ... exception_table[exception_table_length];
      (|> code
          (value@ #exception_table)
          row.size
          (n.* /exception.length))
      ... u2 attributes_count;
      ///unsigned.bytes/2
      ... attribute_info attributes[attributes_count];
      (|> code
          (value@ #attributes)
          (row\each length)
          (row\mix n.+ 0))))

(def: .public (equivalence attribute_equivalence)
  (All [attribute]
    (-> (Equivalence attribute) (Equivalence (Code attribute))))
  ($_ product.equivalence
      ///limit.equivalence
      binary.equivalence
      (row.equivalence /exception.equivalence)
      (row.equivalence attribute_equivalence)
      ))

... https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.3
(def: .public (writer writer code)
  (All [Attribute] (-> (Writer Attribute) (Writer (Code Attribute))))
  ($_ binaryF\composite
      ... u2 max_stack;
      ... u2 max_locals;
      (///limit.writer (value@ #limit code))
      ... u4 code_length;
      ... u1 code[code_length];
      (binaryF.binary/32 (value@ #code code))
      ... u2 exception_table_length;
      ... exception_table[exception_table_length];
      ((binaryF.row/16 /exception.writer) (value@ #exception_table code))
      ... u2 attributes_count;
      ... attribute_info attributes[attributes_count];
      ((binaryF.row/16 writer) (value@ #attributes code))
      ))
