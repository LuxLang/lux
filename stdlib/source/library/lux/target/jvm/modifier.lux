... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" equality (.only Equality)]
    ["[0]" monoid (.only Monoid)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" binary
     ["[1]F" \\injection (.only Injection)]]
    [collection
     ["[0]" list
      ["?[1]" \\projection]]]]
   [math
    ["[0]" number (.only)
     ["[0]" /16
      ["[1]" natural]]
     ["[0]" /64]]]
   [macro (.only with_names)
    ["[0]" syntax]
    ["[0]" template]]
   [type
    ["[0]" nominal]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]])

(the Reification /16.Number)

(nominal.every .public (Modifier it)
  Reification

  (the .public code
    (-> (Modifier Any)
        Reification)
    (|>> nominal.as))

  (the .public equality
    (for_any (_ it)
      (Equality (Modifier it)))
    (by equality.functor each ..code /16.equality))

  (alias [=]
         ..equality)

  (the !abstraction
    (template.macro (_ value)
      [(|> value
           /16.of
           nominal.of)]))

  (the !reification
    (template.macro (_ value)
      [(|> value
           nominal.as
           /16.as)]))

  (the .public (has? sub super)
    (for_any (_ it)
      (-> (Modifier it) (Modifier it)
          Bit))
    (let [sub (!reification sub)]
      (|> (!reification super)
          (/64.and sub)
          (by /64.equality = sub))))

  (the .public monoid
    (for_any (_ it)
      (Monoid (Modifier it)))
    (implementation
     (the identity
       (!abstraction
        (number.base_16 "0000")))
     
     (the (composite left right)
       (!abstraction
        (/64.or (!reification left)
                (!reification right))))))

  (the .public empty
    Modifier
    (by ..monoid identity))

  (the .public as_binary
    (for_any (_ it)
      (Injection (Modifier it)))
    (|>> nominal.as
         /16.as_binary))
  )

(syntax.the .public (modifiers [itT ?list.any
                                options (<>.many ?list.any)])
  (with_names ['modifier 'code]
    (pure (list (` (template.with [(, 'code) (, 'modifier)]
                     [(the (,' .public) (, 'modifier)
                        (..Modifier (, itT))
                        (|> (number.base_16 (, 'code))
                            /16.of
                            as_expected))]
                     
                     [(,* options)]))))))
