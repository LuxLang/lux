(.module:
  [library
   [lux "*"
    [abstract
     ["[0]" equivalence {"+" [Equivalence]}]
     ["[0]" monoid {"+" [Monoid]}]]
    [control
     ["[0]" try]
     ["<>" parser
      ["<[0]>" code]]]
    [data
     [format
      ["[0]F" binary {"+" [Writer]}]]]
    [macro {"+" [with_identifiers]}
     [syntax {"+" [syntax:]}]
     ["[0]" code]]
    [math
     ["[0]" number {"+" [hex]}
      ["[0]" i64]]]
    [type
     abstract]]]
  ["[0]" // "_"
   [encoding
    ["[1][0]" unsigned]]])

(abstract: .public (Modifier of)
  //unsigned.U2

  (def: .public code
    (-> (Modifier Any) //unsigned.U2)
    (|>> :representation))

  (implementation: .public equivalence
    (All (_ of) (Equivalence (Modifier of)))
    
    (def: (= reference sample)
      (# //unsigned.equivalence =
         (:representation reference)
         (:representation sample))))

  (template: (!wrap value)
    [(|> value
         //unsigned.u2
         try.trusted
         :abstraction)])

  (template: (!unwrap value)
    [(|> value
         :representation
         //unsigned.value)])

  (def: .public (has? sub super)
    (All (_ of) (-> (Modifier of) (Modifier of) Bit))
    (let [sub (!unwrap sub)]
      (|> (!unwrap super)
          (i64.and sub)
          (# i64.equivalence = sub))))

  (implementation: .public monoid
    (All (_ of) (Monoid (Modifier of)))

    (def: identity
      (!wrap (hex "0000")))
    
    (def: (composite left right)
      (!wrap (i64.or (!unwrap left) (!unwrap right)))))

  (def: .public empty
    Modifier
    (# ..monoid identity))

  (def: .public writer
    (All (_ of) (Writer (Modifier of)))
    (|>> :representation //unsigned.writer/2))

  (def: modifier
    (-> Nat Modifier)
    (|>> !wrap))
  )

(syntax: .public (modifiers: [ofT <code>.any
                              options (<>.many <code>.any)])
  (with_identifiers [g!modifier g!code]
    (in (list (` (template [(~ g!code) (~ g!modifier)]
                   [(def: (~' .public) (~ g!modifier)
                      (..Modifier (~ ofT))
                      ((~! ..modifier) ((~! number.hex) (~ g!code))))]
                   
                   (~+ options)))))))
