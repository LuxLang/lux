(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" equivalence (.only Equivalence)]
    ["[0]" monoid (.only Monoid)]]
   [control
    ["[0]" try]
    ["<>" parser (.only)
     ["<[0]>" code]]]
   [data
    [format
     ["[0]F" binary (.only Writer)]]]
   [macro (.only with_symbols)
    [syntax (.only syntax)]
    ["[0]" code]]
   [math
    ["[0]" number (.only hex)
     ["[0]" i64]]]
   [type
    [primitive (.except)]]]]
 ["[0]" //
  [encoding
   ["[1][0]" unsigned]]])

(primitive: .public (Modifier of)
  //unsigned.U2

  (def: .public code
    (-> (Modifier Any) //unsigned.U2)
    (|>> representation))

  (def: .public equivalence
    (All (_ of) (Equivalence (Modifier of)))
    (implementation
     (def: (= reference sample)
       (at //unsigned.equivalence =
           (representation reference)
           (representation sample)))))

  (def: !wrap
    (template (_ value)
      [(|> value
           //unsigned.u2
           try.trusted
           abstraction)]))

  (def: !unwrap
    (template (_ value)
      [(|> value
           representation
           //unsigned.value)]))

  (def: .public (has? sub super)
    (All (_ of) (-> (Modifier of) (Modifier of) Bit))
    (let [sub (!unwrap sub)]
      (|> (!unwrap super)
          (i64.and sub)
          (at i64.equivalence = sub))))

  (def: .public monoid
    (All (_ of) (Monoid (Modifier of)))
    (implementation
     (def: identity
       (!wrap (hex "0000")))
     
     (def: (composite left right)
       (!wrap (i64.or (!unwrap left) (!unwrap right))))))

  (def: .public empty
    Modifier
    (at ..monoid identity))

  (def: .public writer
    (All (_ of) (Writer (Modifier of)))
    (|>> representation //unsigned.writer/2))

  (def: modifier
    (-> Nat Modifier)
    (|>> !wrap))
  )

(def: .public modifiers:
  (syntax (_ [ofT <code>.any
              options (<>.many <code>.any)])
    (with_symbols [g!modifier g!code]
      (in (list (` (with_template [(~ g!code) (~ g!modifier)]
                     [(def: (~' .public) (~ g!modifier)
                        (..Modifier (~ ofT))
                        ((~! ..modifier) ((~! number.hex) (~ g!code))))]
                     
                     (~+ options))))))))
