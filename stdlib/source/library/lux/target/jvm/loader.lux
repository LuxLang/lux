(.require
 [library
  [lux (.except)
   ["@" target]
   ["[0]" ffi (.only import object do_to)]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only exception)]
    ["[0]" io (.only IO)]
    [concurrency
     ["[0]" atom (.only Atom)]]]
   [data
    ["[0]" binary (.only Binary)]
    ["[0]" text (.only)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" array]
     ["[0]" dictionary (.only Dictionary)]]]]])

(type .public Library
  (Atom (Dictionary Text Binary)))

(exception .public (already_stored [class Text])
  (exception.report
   "Class" class))

(exception .public (unknown [class Text])
  (exception.report
   "Class" class))

(exception .public (cannot_define [class Text
                                   error Text])
  (exception.report
   "Class" class
   "Error" error))

(import java/lang/Object
  "[1]::[0]"
  (getClass [] (java/lang/Class java/lang/Object)))

(import java/lang/String
  "[1]::[0]")

(import java/lang/reflect/Method
  "[1]::[0]"
  (invoke [java/lang/Object [java/lang/Object]] "try" java/lang/Object))

(import (java/lang/Class a)
  "[1]::[0]"
  (getDeclaredMethod [java/lang/String [(java/lang/Class [? < java/lang/Object])]] java/lang/reflect/Method))

(import java/lang/Integer
  "[1]::[0]"
  ("read_only" "static" TYPE (java/lang/Class java/lang/Integer)))

(import java/lang/reflect/AccessibleObject
  "[1]::[0]"
  (setAccessible [boolean] void))

(import java/lang/ClassLoader
  "[1]::[0]"
  (loadClass [java/lang/String]
             "io" "try" (java/lang/Class java/lang/Object)))

(with_expansions [<elemT> (these (java/lang/Class java/lang/Object))]
  (def java/lang/ClassLoader::defineClass
    java/lang/reflect/Method
    (let [signature (|> (ffi.array <elemT> 4)
                        (ffi.write! 0 (as <elemT>
                                          (ffi.class_for java/lang/String)))
                        (ffi.write! 1 (java/lang/Object::getClass (ffi.array byte 0)))
                        (ffi.write! 2 (as <elemT>
                                          (java/lang/Integer::TYPE)))
                        (ffi.write! 3 (as <elemT>
                                          (java/lang/Integer::TYPE))))]
      (do_to (java/lang/Class::getDeclaredMethod (ffi.as_string "defineClass")
                                                 signature
                                                 (ffi.class_for java/lang/ClassLoader))
        (java/lang/reflect/AccessibleObject::setAccessible true)))))

(def .public (define class_name bytecode loader)
  (-> Text Binary java/lang/ClassLoader (Try java/lang/Object))
  (let [signature (array.of_list (list (as java/lang/Object
                                           class_name)
                                       (as java/lang/Object
                                           bytecode)
                                       (as java/lang/Object
                                           (|> 0
                                               (as (Primitive "java.lang.Long"))
                                               ffi.long_to_int))
                                       (as java/lang/Object
                                           (|> bytecode
                                               binary.size
                                               (as (Primitive "java.lang.Long"))
                                               ffi.long_to_int))))]
    (java/lang/reflect/Method::invoke loader signature java/lang/ClassLoader::defineClass)))

(def .public (new_library _)
  (-> Any Library)
  (atom.atom (dictionary.empty text.hash)))

(def .public (memory library)
  (-> Library java/lang/ClassLoader)
  (with_expansions [<cast> (for @.old
                                (<|)
                                
                                @.jvm
                                "jvm object cast")]
    (<| <cast>
        (object [] java/lang/ClassLoader []
          []
          (java/lang/ClassLoader (findClass self [class_name java/lang/String])
                                 (java/lang/Class [? < java/lang/Object])
                                 "throws" [java/lang/ClassNotFoundException]
                                 (let [class_name (as Text class_name)
                                       classes (|> library atom.read! io.run!)]
                                   (case (dictionary.value class_name classes)
                                     {.#Some bytecode}
                                     (case (..define class_name bytecode (<| <cast> self))
                                       {try.#Success class}
                                       (as_expected class)

                                       {try.#Failure error}
                                       (panic! (exception.error ..cannot_define [class_name error])))

                                     {.#None}
                                     (panic! (exception.error ..unknown [class_name])))))))))

(def .public (store name bytecode library)
  (-> Text Binary Library (IO (Try Any)))
  (do [! io.monad]
    [library' (atom.read! library)]
    (if (dictionary.key? library' name)
      (in (exception.except ..already_stored name))
      (do !
        [_ (atom.update! (dictionary.has name bytecode) library)]
        (in {try.#Success []})))))

(def .public (load name loader)
  (-> Text java/lang/ClassLoader
      (IO (Try (java/lang/Class java/lang/Object))))
  (java/lang/ClassLoader::loadClass (ffi.as_string name) loader))
