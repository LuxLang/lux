(.module:
  [library
   [lux {"-" Type Primitive Label}
    [data
     [collection
      [row {"+" Row}]]]
    [target
     [jvm
      [type {"+" Type}
       ["[0]" category {"+" Primitive Class Value Method}]]]]]])

(type: .public Literal
  (Variant
   {#Boolean Bit}
   {#Int Int}
   {#Long Int}
   {#Double Frac}
   {#Char Nat}
   {#String Text}))

(type: .public Constant
  (Variant
   {#BIPUSH Int}
   
   {#SIPUSH Int}

   {#ICONST_M1}
   {#ICONST_0}
   {#ICONST_1}
   {#ICONST_2}
   {#ICONST_3}
   {#ICONST_4}
   {#ICONST_5}

   {#LCONST_0}
   {#LCONST_1}
   
   {#FCONST_0}
   {#FCONST_1}
   {#FCONST_2}
   
   {#DCONST_0}
   {#DCONST_1}
   
   {#ACONST_NULL}

   {#LDC Literal}))

(type: .public Int_Arithmetic
  (Variant
   {#IADD}
   {#ISUB}
   {#IMUL}
   {#IDIV}
   {#IREM}
   {#INEG}))

(type: .public Long_Arithmetic
  (Variant
   {#LADD}
   {#LSUB}
   {#LMUL}
   {#LDIV}
   {#LREM}
   {#LNEG}))

(type: .public Float_Arithmetic
  (Variant
   {#FADD}
   {#FSUB}
   {#FMUL}
   {#FDIV}
   {#FREM}
   {#FNEG}))

(type: .public Double_Arithmetic
  (Variant
   {#DADD}
   {#DSUB}
   {#DMUL}
   {#DDIV}
   {#DREM}
   {#DNEG}))

(type: .public Arithmetic
  (Variant
   {#Int_Arithmetic Int_Arithmetic}
   {#Long_Arithmetic Long_Arithmetic}
   {#Float_Arithmetic Float_Arithmetic}
   {#Double_Arithmetic Double_Arithmetic}))

(type: .public Int_Bitwise
  (Variant
   {#IOR}
   {#IXOR}
   {#IAND}
   {#ISHL}
   {#ISHR}
   {#IUSHR}))

(type: .public Long_Bitwise
  (Variant
   {#LOR}
   {#LXOR}
   {#LAND}
   {#LSHL}
   {#LSHR}
   {#LUSHR}))

(type: .public Bitwise
  (Variant
   {#Int_Bitwise Int_Bitwise}
   {#Long_Bitwise Long_Bitwise}))

(type: .public Conversion
  (Variant
   {#I2B}
   {#I2S}
   {#I2L}
   {#I2F}
   {#I2D}
   {#I2C}

   {#L2I}
   {#L2F}
   {#L2D}

   {#F2I}
   {#F2L}
   {#F2D}
   
   {#D2I}
   {#D2L}
   {#D2F}))

(type: .public Array
  (Variant
   {#ARRAYLENGTH}

   {#NEWARRAY (Type Primitive)}
   {#ANEWARRAY (Type category.Object)}

   {#BALOAD}
   {#BASTORE}

   {#SALOAD}
   {#SASTORE}

   {#IALOAD}
   {#IASTORE}

   {#LALOAD}
   {#LASTORE}

   {#FALOAD}
   {#FASTORE}

   {#DALOAD}
   {#DASTORE}
   
   {#CALOAD}
   {#CASTORE}

   {#AALOAD}
   {#AASTORE}))

(type: .public Object
  (Variant
   {#GETSTATIC (Type Class) Text (Type Value)}
   {#PUTSTATIC (Type Class) Text (Type Value)}

   {#NEW (Type Class)}
   
   {#INSTANCEOF (Type Class)}
   {#CHECKCAST (Type category.Object)}

   {#GETFIELD (Type Class) Text (Type Value)}
   {#PUTFIELD (Type Class) Text (Type Value)}
   
   {#INVOKEINTERFACE (Type Class) Text (Type Method)}
   {#INVOKESPECIAL (Type Class) Text (Type Method)}
   {#INVOKESTATIC (Type Class) Text (Type Method)}
   {#INVOKEVIRTUAL (Type Class) Text (Type Method)}))

(type: .public Register
  Nat)

(type: .public Local_Int
  (Variant
   {#ILOAD Register}
   {#ISTORE Register}))

(type: .public Local_Long
  (Variant
   {#LLOAD Register}
   {#LSTORE Register}))

(type: .public Local_Float
  (Variant
   {#FLOAD Register}
   {#FSTORE Register}))

(type: .public Local_Double
  (Variant
   {#DLOAD Register}
   {#DSTORE Register}))

(type: .public Local_Object
  (Variant
   {#ALOAD Register}
   {#ASTORE Register}))

(type: .public Local
  (Variant
   {#Local_Int Local_Int}
   {#IINC Register}
   {#Local_Long Local_Long}
   {#Local_Float Local_Float}
   {#Local_Double Local_Double}
   {#Local_Object Local_Object}))

(type: .public Stack
  (Variant
   {#DUP}
   {#DUP_X1}
   {#DUP_X2}
   {#DUP2}
   {#DUP2_X1}
   {#DUP2_X2}
   {#SWAP}
   {#POP}
   {#POP2}))

(type: .public Comparison
  (Variant
   {#LCMP}
   
   {#FCMPG}
   {#FCMPL}

   {#DCMPG}
   {#DCMPL}))

(type: .public Label
  Nat)

(type: .public (Branching label)
  (Variant
   {#IF_ICMPEQ label}
   {#IF_ICMPGE label}
   {#IF_ICMPGT label}
   {#IF_ICMPLE label}
   {#IF_ICMPLT label}
   {#IF_ICMPNE label}
   {#IFEQ label}
   {#IFNE label}
   {#IFGE label}
   {#IFGT label}
   {#IFLE label}
   {#IFLT label}

   {#TABLESWITCH Int Int label (List label)}
   {#LOOKUPSWITCH label (List [Int label])}

   {#IF_ACMPEQ label}
   {#IF_ACMPNE label}
   {#IFNONNULL label}
   {#IFNULL label}))

(type: .public (Exception label)
  (Variant
   {#Try label label label (Type Class)}
   {#ATHROW}))

(type: .public Concurrency
  (Variant
   {#MONITORENTER}
   {#MONITOREXIT}))

(type: .public Return
  (Variant
   {#RETURN}
   {#IRETURN}
   {#LRETURN}
   {#FRETURN}
   {#DRETURN}
   {#ARETURN}))

(type: .public (Control label)
  (Variant
   {#GOTO label}
   {#Branching (Branching label)}
   {#Exception (Exception label)}
   {#Concurrency Concurrency}
   {#Return Return}))

(type: .public (Instruction embedded label)
  (Variant
   {#NOP}
   {#Constant Constant}
   {#Arithmetic Arithmetic}
   {#Bitwise Bitwise}
   {#Conversion Conversion}
   {#Array Array}
   {#Object Object}
   {#Local Local}
   {#Stack Stack}
   {#Comparison Comparison}
   {#Control (Control label)}
   {#Embedded embedded}))

(type: .public (Bytecode embedded label)
  (Row (Instruction embedded label)))
