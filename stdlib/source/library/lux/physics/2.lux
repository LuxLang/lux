... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [math
    [number
     [/64
      ["/" decimal]]]
    [geometry
     ["[0]" circle]]]
   [macro
    ["[0]" template]]
   ["[0]" function (.only)
    [predicate (.only Predicate)]]
   [abstract
    [equivalence (.only Equivalence)]]
   [math
    ["[0]" random (.only Random)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]]]
 ["[0]" // (.only Scalar)
  ["[0]" /1 (.only)
   ["[1]/[0]" motion]]])

... https://en.wikipedia.org/wiki/Euclidean_vector
(every .public Vector
  (Record
   [#left/right /1.Vector
    #forward/backward /1.Vector]))

(the .public opposite
  (.Change Vector)
  (|>> (revised #left/right /1.opposite)
       (revised #forward/backward /1.opposite)))

(the .public forward
  Vector
  [#left/right /1.origin
   #forward/backward /1.forward])

(the .public backward
  Vector
  (opposite forward))

(the .public left
  Vector
  [#left/right /1.forward
   #forward/backward /1.origin])

(the .public right
  Vector
  (opposite left))

(the .public (random range)
  (-> Natural
      (Random Vector))
  (random.and (/1.random range)
              (/1.random range)))

(the .public (= reference it)
  (-> Vector
      (Predicate Vector))
  (and (/.= (its #left/right reference)
            (its #left/right it))
       (/.= (its #forward/backward reference)
            (its #forward/backward it))))

(the .public equivalence
  (Equivalence Vector)
  (implementation
   (the = ..=)))

(every .public Position
  Vector)

(the .public origin
  Position
  [#left/right /1.origin
   #forward/backward /1.origin])

(template.with [,vector ,scalar]
  [(the .public (,vector origin it)
     (-> Vector
         (.Change Vector))
     [#left/right (,scalar (its #left/right origin)
                           (its #left/right it))
      #forward/backward (,scalar (its #forward/backward origin)
                                 (its #forward/backward it))])]

  [[+ /.+]
   [- /.-]])

... https://en.wikipedia.org/wiki/Scaling_(geometry)
(template.with [,vector ,scalar]
  [(the .public (,vector scale)
     (-> /1.Vector
         (.Change Vector))
     (|>> (revised #left/right (,scalar scale))
          (revised #forward/backward (,scalar scale))))]

  [[dilation /.x]
   [contraction /./]])

... https://en.wikipedia.org/wiki/Dot_product
(the .public (* reference it)
  (-> Vector Vector
      Scalar)
  (/.+ (/.x (its #left/right reference)
            (its #left/right it))
       (/.x (its #forward/backward reference)
            (its #forward/backward it))))

... https://en.wikipedia.org/wiki/Cross_product
(the .public (x reference it)
  (-> Vector Vector
      /1.Vector)
  (/.- (/.x (its #forward/backward reference) (its #left/right it))
       (/.x (its #left/right reference) (its #forward/backward it))))

(every .public Orientation
  /1.Vector)

... https://en.wikipedia.org/wiki/Magnitude_(mathematics)
(the .public (magnitude it)
  (-> Vector
      /1.Vector)
  (/.root_2 (x it it)))

... https://en.wikipedia.org/wiki/Orientation_(geometry)
(the .public (orientation it)
  (-> Vector
      Orientation)
  (circle.arc_tangent_2 (its #forward/backward it)
                        (its #left/right it)))

(the .public (polar magnitude orientation)
  (-> /1.Vector Orientation
      Vector)
  (|> [#left/right (circle.sine orientation)
       #forward/backward (circle.co_sine orientation)]
      (dilation magnitude)))

(the .public (approximately? margin_of_error standard value)
  (-> /1.Vector Vector
      (Predicate Vector))
  (|> value
      (- standard)
      magnitude
      (/.<= margin_of_error)))

(the .public (distance from to)
  (-> Position Position
      /1.Vector)
  (magnitude (- from to)))

(every .public (Difference it)
  (.Change it))

(the .public value
  (-> (Difference Vector)
      Vector)
  (function.of ..origin))

(the .public (difference initial final)
  (-> Vector Vector
      (Difference Vector))
  (+ [#left/right (/.- (its #left/right initial)
                       (its #left/right final))
      #forward/backward (/.- (its #forward/backward initial)
                             (its #forward/backward final))]))

... https://en.wikipedia.org/wiki/Displacement_(geometry)
(every .public Displacement
  (Difference Position))

(the .public displacement
  ..difference)

(every .public Radius
  /1.Vector)

... https://en.wikipedia.org/wiki/Elastic_modulus
... https://en.wikipedia.org/wiki/Shear_modulus
(template.with [,value ,name]
  [(the .public ,name
     //.Elasticity
     ,value)]

  [[+14.0e+10 tungsten]
   [+08.4e+10 steel]
   [+04.2e+10 copper]
   [+03.5e+10 brass]
   [+02.5e+10 aluminium]
   [+02.6e+10 quartz]])

(comment
  ... https://en.wikipedia.org/wiki/Centripetal_force
  (every .public Centripetal_Acceleration
    /1.Vector)

  (the (square it)
    (.Change /1.Vector)
    (/.x it it))

  (the .public (centripetal_acceleration radius velocity)
    (-> Radius Velocity
        Centripetal_Acceleration)
    (/./ radius
         (square (magnitude velocity))))

  ... https://en.wikipedia.org/wiki/Frequency#Period_versus_frequency
  (every .public Period
    /1.Vector)

  (the .public (period radius velocity)
    (-> Radius Velocity
        Period)
    (|> (magnitude velocity)
        (/./ radius)
        (/.x circle.tau)))

  ... https://en.wikipedia.org/wiki/Angular_velocity
  (every .public Angular_Velocity
    /1.Vector)

  (the .public (angular_velocity period)
    (-> Period
        Angular_Velocity)
    (/./ period
         circle.tau))

  (every .public Speed
    /1.Vector)

  (the .public (speed radius angular_velocity)
    (-> Radius Angular_Velocity
        Speed)
    (/.x radius angular_velocity))

  ... https://en.wikipedia.org/wiki/Acceleration#Circular_motion
  (every .public Radial_Acceleration
    /1.Vector)

  (the .public (radial_acceleration radius velocity)
    (-> Radius Velocity
        Radial_Acceleration)
    (/1.opposite (centripetal_acceleration radius velocity)))
  )
