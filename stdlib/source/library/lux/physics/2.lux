... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [math
    [number
     [/64
      ["/" decimal]]]
    [geometry
     ["[0]" circle]]]
   [macro
    ["[0]" template]]
   ["[0]" function (.only)
    [predicate (.only Predicate)]]
   [abstract
    [equivalence (.only Equivalence)]]
   [math
    ["[0]" random (.only Random)]]]]
 [//
  ["[0]" /1]])

... https://en.wikipedia.org/wiki/Euclidean_vector
(every .public Vector
  (Record
   [#forward/backward /1.Dimension
    #left/right /1.Dimension]))

(the .public (random range)
  (-> Natural
      (Random Vector))
  (random.and (/1.random range)
              (/1.random range)))

(the .public (= reference it)
  (-> Vector
      (Predicate Vector))
  (and (/.= (its #forward/backward reference)
            (its #forward/backward it))
       (/.= (its #left/right reference)
            (its #left/right it))))

(the .public equivalence
  (Equivalence Vector)
  (implementation
   (the = ..=)))

(every .public Position
  Vector)

(the .public origin
  Position
  [#forward/backward /1.origin
   #left/right /1.origin])

(template.with [,vector ,scalar]
  [(the .public (,vector origin it)
     (-> Vector
         (.Change Vector))
     [#forward/backward (,scalar (its #forward/backward origin)
                                 (its #forward/backward it))
      #left/right (,scalar (its #left/right origin)
                           (its #left/right it))])]

  [[+ /.+]
   [- /.-]])

(the .public opposite
  (.Change Vector)
  (|>> (revised #forward/backward /.opposite)
       (revised #left/right /.opposite)))

(template.with [,vector ,scalar]
  [(the .public (,vector scale)
     (-> /1.Dimension
         (.Change Vector))
     (|>> (revised #forward/backward (,scalar scale))
          (revised #left/right (,scalar scale))))]

  [[x /.x]
   [/ /./]])

(every .public Orientation
  /1.Dimension)

(the (square it)
  (.Change /1.Dimension)
  (/.x it it))

... https://en.wikipedia.org/wiki/Magnitude_(mathematics)
(the .public (magnitude it)
  (-> Vector
      /1.Dimension)
  (/.root_2 (/.+ (square (its #forward/backward it))
                 (square (its #left/right it)))))

... https://en.wikipedia.org/wiki/Orientation_(geometry)
(the .public (orientation it)
  (-> Vector
      Orientation)
  (circle.arc_tangent_2 (its #forward/backward it)
                        (its #left/right it)))

(the .public (polar magnitude orientation)
  (-> /1.Dimension Orientation
      Vector)
  (|> [#forward/backward (circle.co_sine orientation)
       #left/right (circle.sine orientation)]
      (x magnitude)))

(the .public (approximately? margin_of_error standard value)
  (-> /1.Dimension Vector
      (Predicate Vector))
  (|> value
      (- standard)
      magnitude
      (/.<= margin_of_error)))

(the .public (distance from to)
  (-> Position Position
      /1.Dimension)
  (magnitude (- from to)))

(every .public (Difference it)
  (.Change it))

(the .public value
  (-> (Difference Vector)
      Vector)
  (function.of ..origin))

(the .public (difference initial final)
  (-> Vector Vector
      (Difference Vector))
  (+ [#forward/backward (/.- (its #forward/backward initial)
                             (its #forward/backward final))
      #left/right (/.- (its #left/right initial)
                       (its #left/right final))]))

... https://en.wikipedia.org/wiki/Displacement_(geometry)
(every .public Displacement
  (Difference Position))

(the .public displacement
  difference)

(every .public Velocity
  Vector)

(the .public (average_velocity interval displacement)
  (-> /1.Interval Displacement
      Velocity)
  (/ (/1.value interval)
     (..value displacement)))

(every .public Acceleration
  Vector)

(the .public (average_acceleration interval difference_in_velocity)
  (-> /1.Interval (/1.Difference Velocity)
      Acceleration)
  (/ (/1.value interval)
     (..value difference_in_velocity)))

(the .public (velocity acceleration initial)
  (-> Acceleration Velocity
      (/1.Variable Velocity))
  (function (_ time)
    (|> acceleration
        (x time)
        (+ initial))))

... https://en.wikipedia.org/wiki/Center_of_mass#Barycentric_coordinates
(the (center_of_mass left right)
  (-> Vector Vector
      Vector)
  (/ +2.0
     (+ left right)))

(the .public (position acceleration initial_velocity initial)
  (-> Acceleration Velocity Position
      (/1.Variable Position))
  (function (_ time)
    (let [velocity (center_of_mass initial_velocity
                                   (..velocity acceleration initial_velocity time))]
      (|> velocity
          (x time)
          (+ initial)))))

(every .public Radius
  /1.Dimension)

... https://en.wikipedia.org/wiki/Centripetal_force
(every .public Centripetal_Acceleration
  /1.Dimension)

(the .public (centripetal_acceleration radius velocity)
  (-> Radius Velocity
      Centripetal_Acceleration)
  (/./ radius
       (square (magnitude velocity))))

... https://en.wikipedia.org/wiki/Frequency#Period_versus_frequency
(every .public Period
  /1.Dimension)

(the .public (period radius velocity)
  (-> Radius Velocity
      Period)
  (|> (magnitude velocity)
      (/./ radius)
      (/.x circle.tau)))

... https://en.wikipedia.org/wiki/Angular_frequency
(every .public Angular_Speed
  /1.Dimension)

(the .public (angular_speed period)
  (-> Period
      Angular_Speed)
  (/./ period
       circle.tau))

(every .public Speed
  /1.Dimension)

(the .public (speed radius angular_speed)
  (-> Radius Angular_Speed
      Speed)
  (/.x radius angular_speed))

... https://en.wikipedia.org/wiki/Acceleration#Circular_motion
(every .public Radial_Acceleration
  /1.Dimension)

(the .public (radial_acceleration radius velocity)
  (-> Radius Velocity
      Radial_Acceleration)
  (/.opposite (centripetal_acceleration radius velocity)))

(every .public Mass
  /1.Dimension)

(every .public Force
  Vector)

(the .public (net_force acceleration mass)
  (-> Acceleration Mass
      Force)
  (x mass acceleration))

... (the law_2_of_newton
...   Algebra
...   (with_variables [net_force mass acceleration]
...     (= net_force
...        (x mass acceleration))))

(the .public gravitational_acceleration
  Acceleration
  [#forward/backward -9.8
   #left/right /1.origin])

(the .public gravitational_force
  (-> Mass
      Force)
  (net_force gravitational_acceleration))

... https://en.wikipedia.org/wiki/Friction
(every .public Static_Friction
  /1.Dimension)

(the .public (static_friction coefficient normal_force)
  (-> Static_Friction Force
      Force)
  (x coefficient normal_force))

(every .public Kinetic_Friction
  /1.Dimension)

(the .public (kinetic_friction coefficient normal_force)
  (-> Kinetic_Friction Force
      Force)
  (x coefficient normal_force))

(template.with [,static ,kinetic ,surface ,material]
  [(`` (the .public (,, (template.name ["static_friction_of_" ,material "_on_" ,surface]))
         Static_Friction
         ,static))

   (`` (the .public (,, (template.name ["kinetic_friction_of_" ,material "_on_" ,surface]))
         Kinetic_Friction
         ,static))]

  [[+1.00 +0.80 concrete rubber]
   [+0.78 +0.57 steel steel]
   [+0.61 +0.47 steel aluminium]
   [+0.53 +0.36 steel copper]
   [+0.94 +0.40 glass glass]
   [+0.14 +0.10 wet_snow waxed_wood]
   [+0.10 +0.03 ice ice]])
