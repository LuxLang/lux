... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [math
    [number
     [/64
      ["/" decimal]]]
    [geometry
     ["[0]" circle]]]
   [macro
    ["[0]" template]]
   ["[0]" function (.only)
    [predicate (.only Predicate)]]
   [abstract
    [equivalence (.only Equivalence)]]
   [math
    ["[0]" random (.only Random)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]]]
 [// (.only Scalar)
  ["[0]" /1]])

... https://en.wikipedia.org/wiki/Euclidean_vector
(every .public Vector
  (Record
   [#left/right /1.Vector
    #forward/backward /1.Vector]))

(the .public opposite
  (.Change Vector)
  (|>> (revised #left/right /1.opposite)
       (revised #forward/backward /1.opposite)))

(the .public forward
  Vector
  [#left/right /1.origin
   #forward/backward /1.forward])

(the .public backward
  Vector
  (opposite forward))

(the .public left
  Vector
  [#left/right /1.forward
   #forward/backward /1.origin])

(the .public right
  Vector
  (opposite left))

(the .public (random range)
  (-> Natural
      (Random Vector))
  (random.and (/1.random range)
              (/1.random range)))

(the .public (= reference it)
  (-> Vector
      (Predicate Vector))
  (and (/.= (its #left/right reference)
            (its #left/right it))
       (/.= (its #forward/backward reference)
            (its #forward/backward it))))

(the .public equivalence
  (Equivalence Vector)
  (implementation
   (the = ..=)))

(every .public Position
  Vector)

(the .public origin
  Position
  [#left/right /1.origin
   #forward/backward /1.origin])

(template.with [,vector ,scalar]
  [(the .public (,vector origin it)
     (-> Vector
         (.Change Vector))
     [#left/right (,scalar (its #left/right origin)
                           (its #left/right it))
      #forward/backward (,scalar (its #forward/backward origin)
                                 (its #forward/backward it))])]

  [[+ /.+]
   [- /.-]])

... https://en.wikipedia.org/wiki/Scaling_(geometry)
(template.with [,vector ,scalar]
  [(the .public (,vector scale)
     (-> /1.Vector
         (.Change Vector))
     (|>> (revised #left/right (,scalar scale))
          (revised #forward/backward (,scalar scale))))]

  [[dilation /.x]
   [contraction /./]])

(every .public Orientation
  /1.Vector)

... https://en.wikipedia.org/wiki/Cross_product
(the .public (x reference it)
  (-> Vector Vector
      /1.Vector)
  (/.+ (/.x (its #left/right reference) (its #forward/backward it))
       (/.x (its #forward/backward reference) (its #left/right it))))

... https://en.wikipedia.org/wiki/Magnitude_(mathematics)
(the .public (magnitude it)
  (-> Vector
      /1.Vector)
  (/.root_2 (x it it)))

... https://en.wikipedia.org/wiki/Orientation_(geometry)
(the .public (orientation it)
  (-> Vector
      Orientation)
  (circle.arc_tangent_2 (its #forward/backward it)
                        (its #left/right it)))

(the .public (polar magnitude orientation)
  (-> /1.Vector Orientation
      Vector)
  (|> [#left/right (circle.sine orientation)
       #forward/backward (circle.co_sine orientation)]
      (dilation magnitude)))

(the .public (approximately? margin_of_error standard value)
  (-> /1.Vector Vector
      (Predicate Vector))
  (|> value
      (- standard)
      magnitude
      (/.<= margin_of_error)))

(the .public (distance from to)
  (-> Position Position
      /1.Vector)
  (magnitude (- from to)))

(every .public (Difference it)
  (.Change it))

(the .public value
  (-> (Difference Vector)
      Vector)
  (function.of ..origin))

(the .public (difference initial final)
  (-> Vector Vector
      (Difference Vector))
  (+ [#left/right (/.- (its #left/right initial)
                       (its #left/right final))
      #forward/backward (/.- (its #forward/backward initial)
                             (its #forward/backward final))]))

... https://en.wikipedia.org/wiki/Displacement_(geometry)
(every .public Displacement
  (Difference Position))

(the .public displacement
  difference)

(every .public Velocity
  Vector)

(the .public (average_velocity interval displacement)
  (-> /1.Interval Displacement
      Velocity)
  ((contraction (/1.value interval)) (..value displacement)))

(every .public Acceleration
  Vector)

(the .public (average_acceleration interval difference_in_velocity)
  (-> /1.Interval (/1.Difference Velocity)
      Acceleration)
  ((contraction (/1.value interval)) (..value difference_in_velocity)))

(the .public (velocity acceleration initial)
  (-> Acceleration Velocity
      (/1.Variable Velocity))
  (function (_ time)
    (|> acceleration
        (dilation time)
        (+ initial))))

(the (average left right)
  (-> Vector Vector
      Vector)
  ((contraction +2.0) (+ left right)))

(the .public (position acceleration initial_velocity initial)
  (-> Acceleration Velocity Position
      (/1.Variable Position))
  (function (_ time)
    (let [velocity (average initial_velocity
                            (..velocity acceleration initial_velocity time))]
      (|> velocity
          (dilation time)
          (+ initial)))))

(every .public Radius
  /1.Vector)

... https://en.wikipedia.org/wiki/Centripetal_force
(every .public Centripetal_Acceleration
  /1.Vector)

(the (square it)
  (.Change /1.Vector)
  (/.x it it))

(the .public (centripetal_acceleration radius velocity)
  (-> Radius Velocity
      Centripetal_Acceleration)
  (/./ radius
       (square (magnitude velocity))))

... https://en.wikipedia.org/wiki/Frequency#Period_versus_frequency
(every .public Period
  /1.Vector)

(the .public (period radius velocity)
  (-> Radius Velocity
      Period)
  (|> (magnitude velocity)
      (/./ radius)
      (/.x circle.tau)))

... https://en.wikipedia.org/wiki/Angular_frequency
(every .public Angular_Speed
  /1.Vector)

(the .public (angular_speed period)
  (-> Period
      Angular_Speed)
  (/./ period
       circle.tau))

(every .public Speed
  /1.Vector)

(the .public (speed radius angular_speed)
  (-> Radius Angular_Speed
      Speed)
  (/.x radius angular_speed))

... https://en.wikipedia.org/wiki/Acceleration#Circular_motion
(every .public Radial_Acceleration
  /1.Vector)

(the .public (radial_acceleration radius velocity)
  (-> Radius Velocity
      Radial_Acceleration)
  (/1.opposite (centripetal_acceleration radius velocity)))

(every .public Mass
  Scalar)

(every .public Force
  Vector)

(the .public (net_force acceleration mass)
  (-> Acceleration Mass
      Force)
  ((dilation mass) acceleration))

... (the law_2_of_newton
...   Algebra
...   (with_variables [net_force mass acceleration]
...     (= net_force
...        (dilation mass acceleration))))

(the .public gravitational_acceleration
  Acceleration
  [#left/right /1.origin
   #forward/backward -9.8])

(the .public gravitational_force
  (-> Mass
      Force)
  (net_force gravitational_acceleration))

... https://en.wikipedia.org/wiki/Friction
(every .public Static_Friction
  /1.Vector)

(the .public (static_friction coefficient normal_force)
  (-> Static_Friction Force
      Force)
  ((dilation coefficient) normal_force))

(every .public Kinetic_Friction
  /1.Vector)

(the .public (kinetic_friction coefficient normal_force)
  (-> Kinetic_Friction Force
      Force)
  ((dilation coefficient) normal_force))

(template.with [,static ,kinetic ,surface ,material]
  [(`` (the .public (,, (template.name ["static_friction_of_" ,material "_on_" ,surface]))
         Static_Friction
         ,static))

   (`` (the .public (,, (template.name ["kinetic_friction_of_" ,material "_on_" ,surface]))
         Kinetic_Friction
         ,kinetic))]

  [[+1.00 +0.80 concrete rubber]
   [+0.78 +0.57 steel steel]
   [+0.61 +0.47 steel aluminium]
   [+0.53 +0.36 steel copper]
   [+0.94 +0.40 glass glass]
   [+0.14 +0.10 wet_snow waxed_wood]
   [+0.10 +0.03 ice ice]])

... https://en.wikipedia.org/wiki/Dot_product
(the .public (* reference it)
  (-> Vector Vector
      Scalar)
  (/.+ (/.x (its #left/right reference)
            (its #left/right it))
       (/.x (its #forward/backward reference)
            (its #forward/backward it))))

... https://en.wikipedia.org/wiki/Mechanical_energy
(every .public Mechanical_Energy
  Scalar)

... https://en.wikipedia.org/wiki/Kinetic_energy
(every .public Kinetic_Energy
  Mechanical_Energy)

(the .public (kinetic_energy mass velocity)
  (-> Mass Velocity
      Kinetic_Energy)
  (|> (x velocity velocity)
      (/.x mass)
      (/./ +2.0)))

... https://en.wikipedia.org/wiki/Work_(physics)
(every .public Work
  (Difference Mechanical_Energy))

(the .public (work force displacement)
  (-> Force Displacement
      Work)
  (/.+ (* force (value displacement))))

... https://en.wikipedia.org/wiki/Hooke%27s_law
... https://en.wikipedia.org/wiki/Stiffness
(every .public Stiffness
  Scalar)

... https://en.wikipedia.org/wiki/Spring_(device)
(the .public (spring stiffness displacement)
  (-> Stiffness Displacement
      Force)
  (opposite ((dilation stiffness) (value displacement))))

... https://en.wikipedia.org/wiki/Potential_energy
(every .public Potential_Energy
  Mechanical_Energy)

... https://en.wikipedia.org/wiki/Elastic_energy
(the .public (elastic_potential_energy stiffness displacement)
  (-> Stiffness Displacement
      Potential_Energy)
  (kinetic_energy stiffness (value displacement)))

(the .public (mechanical_energy kinetic_energy potential_energy)
  (-> Kinetic_Energy Potential_Energy
      Mechanical_Energy)
  (/.+ kinetic_energy potential_energy))

... https://en.wikipedia.org/wiki/Power_(physics)
(every .public Power
  Scalar)

(the .public (average_power interval work)
  (-> /1.Interval Work
      Power)
  (/./ (/1.value interval)
       (/1.value work)))

... https://en.wikipedia.org/wiki/Momentum
(every .public Momentum
  Vector)

(the .public (momentum mass velocity)
  (-> Mass Velocity
      Momentum)
  (dilation mass velocity))

... https://en.wikipedia.org/wiki/Impulse_(physics)
(every .public Impulse
  (Difference Momentum))

(the .public impulse
  (-> Momentum Momentum
      Impulse)
  ..difference)

... https://en.wikipedia.org/wiki/Particle
(every .public Particle
  (Record
   [#mass Mass
    #position Position]))

(every .public System
  (List Particle))

... https://en.wikipedia.org/wiki/Center_of_mass#Barycentric_coordinates
(the .public (center_of_mass system)
  (-> System
      Position)
  (when system
    (list)
    ..origin

    else
    (let [total_mass (|> system
                         (list#each (its #mass))
                         (list.mix /.+ +0.0))
          distribution (|> system
                           (list#each (function (_ it)
                                        (dilation (its #mass it)
                                                  (its #position it))))
                           (list.mix ..+ ..origin))]
      (contraction total_mass
                   distribution))))
