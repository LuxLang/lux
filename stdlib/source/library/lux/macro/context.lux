... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Stack global revised)
   [abstract
    [monad (.only do)]
    ["?" projection]]
   [error
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception (.only Exception)]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" list (.only)
      ["?[1]" \\projection]
      ["[0]" property]]
     ["[0]" stack]]]
   [type (.only sharing by_example)]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" name (.use "[1]#[0]" absolute)]
    ["[0]" binding]
    ["[0]" code (.only)
     ["?[1]" \\projection]]]]]
 ["[0]" // (.only)
  ["[0]" syntax (.only)
   ["[0]" export]]])

(the with_template' (.in_module# .prelude .with_template))
(the template#macro (.in_module# .prelude .template#macro))

(every .public Stack
  .Stack)

(.the Stack'
  (template#macro (_ value)
                  [[(Stack value)
                    Name]]))

(with_template' [<name> <type> <injection>]
  [(exception.the .public (<name> it)
     (Exception <type>)
     (exception.report
      (list ["Definition" (<injection> it)])))]

  [not_a_definition Name name#as]
  [not_a_global Name name#as]
  [not_a_module Text text.as_text]
  [no_example Name name#as]
  )

(.the (global it)
  (-> Name
      (Meta Any))
  (do meta.monad
    [.let [[@ expected_name] it]
     defs (binding.definitions @)]
    (when (list.one (function (_ [actual_name [exported? [type value]]])
                      (if (text.= expected_name actual_name)
                          {.#Some value}
                          {.#None}))
                    defs)
      {try.#Success it}
      (in it)
      
      {try.#Failure _}
      (meta.failure (exception.error ..not_a_definition [it])))))

(exception.the .public no_active_context)

(.the .public (peek' [_ context])
  (for_any (_ it)
    (-> (Stack' it)
        (Meta it)))
  (do meta.monad
    [stack (..global context)]
    (when (|> stack
              (as (-> Any (Stack Any)))
              stack.head)
      {try.#Success top}
      (in (as_expected top))
      
      {try.#Failure _}
      (meta.failure (exception.error ..no_active_context [])))))

(.the .public peek
  (syntax.macro (_ ['it (by ?.monad each code.name ?code.global)])
    (in (list (` (..peek' [(, 'it) (.name (, 'it))]))))))

(.the .public (search' ? [_ context])
  (for_any (_ it)
    (-> (Predicate it) (Stack' it)
        (Meta it)))
  (do meta.monad
    [stack (..global context)]
    (when (|> stack
              (as (-> Any (Stack Any)))
              (stack.example (as (-> Any (Predicate Any)) ?)))
      {try.#Success it}
      (in (as_expected it))
      
      {try.#Failure _}
      (meta.failure (exception.error ..no_example [context])))))

(.the .public search
  (syntax.macro (_ ['? ?list.any
                    'context (by ?.monad each code.name ?code.global)])
    (in (list (` (..search' (, '?) [(, 'context) (.name (, 'context))]))))))

(.the (alter on_definition [_ definition])
  (for_any (_ value)
    (-> (-> Name Definition (Try Definition)) (Stack' value)
        (Meta Any)))
  (function (_ lux)
    (let [[@ context] definition
          on_global (is (-> Global (Try Global))
                        (function (_ it)
                          (when it
                            {.#Definition it}
                            (try#each (|>> {.#Definition}) (on_definition definition it))
                            
                            _
                            (exception.except ..not_a_definition [definition]))))
          on_globals (is (-> (property.List [Bit Global]) (Try (property.List [Bit Global])))
                         (function (_ globals)
                           (when (property.value context globals)
                             {try.#Success [exported? global]}
                             (try#each (function (_ global)
                                         (property.has context [exported? global] globals))
                                       (on_global global))
                             
                             failure
                             (exception.except ..not_a_global [definition]))))
          on_module (is (-> Module (Try Module))
                        (function (_ module)
                          (try#each (function (_ globals)
                                      (has .#definitions globals module))
                                    (on_globals (its .#definitions module)))))
          on_lux (is (-> Lux (Try Lux))
                     (function (_ lux)
                       (when (property.value @ (its .#modules lux))
                         {try.#Success module}
                         (try#each (function (_ module)
                                     (|> lux
                                         (.revised .#modules (property.has @ module))
                                         (is Lux)))
                                   (on_module module))
                         
                         failure
                         (exception.except ..not_a_module [@]))))]
      (when (on_lux lux)
        {try.#Success it}
        {try.#Success [it []]}
        
        {try.#Failure error}
        ((meta.failure error) lux)))))

(.the .public (push' top)
  (for_any (_ value)
    (-> value (Stack' value)
        (Meta Any)))
  (alter (function (_ _ [type stack])
           (|> stack
               (as (-> Any (.Stack Any)))
               {.#Top top}
               (is (.Stack Any))
               [type]
               {try.#Success}))))

(.the .public push
  (syntax.macro (_ ['it ?list.any
                    'context (by ?.monad each code.name ?code.global)])
    (in (list (` (..push' (, 'it) [(, 'context) (.name (, 'context))]))))))

(.the .public (revised' ? !)
  (for_any (_ value)
    (-> (Maybe (Predicate value)) (-> value value) (Stack' value)
        (Meta Any)))
  (alter (function (_ @ [type stack])
           (let [stack (sharing [value]
                         (is (-> value value)
                             !)
                         (is (Stack value)
                             (as_expected stack)))]
             (when ?
               {.#Some ?}
               (do try.monad
                 [stack (loop (again [stack stack])
                          (when stack
                            (stack.partial top stack')
                            (if (? top)
                                (in (stack.partial (! top) stack'))
                                (do try.monad
                                  [stack' (again stack')]
                                  (in (stack.partial top stack'))))

                            _
                            (exception.except ..no_example [@])))]
                 (in [type stack]))
               
               {.#None}
               (when stack
                 (stack.partial top stack')
                 (|> stack'
                     (stack.partial (! top))
                     (is (.Stack Any))
                     [type]
                     {try.#Success})
                 
                 _
                 (exception.except ..no_example [@])))))))

(.the .public revised
  (syntax.macro (_ ['predicate ?list.any
                    'revision ?list.any
                    'context (by ?.monad each code.name ?code.global)])
    (in (list (` (..revised' (, 'predicate)
                             (, 'revision)
                             [(, 'context) (.name (, 'context))]))))))

(.the .public pop''
  (for_any (_ value)
    (-> (Stack' value)
        (Meta Any)))
  (alter (function (_ _ [type value])
           (|> value
               (as (-> Any (.Stack Any)))
               stack.tail
               (try.else value)
               [type]
               {try.#Success}))))

(.the .public pop'
  (syntax.macro (_ [expression? ?code.bit
                    context ?code.global])
    (do meta.monad
      [_ (..pop'' [(stack) context])]
      (in (if expression?
              (list (' []))
              (list))))))

(.the .public pop
  (syntax.macro (_ ['context (by ?.monad each code.name ?code.global)])
    (in (list (` (..pop'' [(, 'context) (.name (, 'context))]))))))

(.the .public def
  (syntax.macro (_ [.let [! ?.monad
                          ?local (by ! each code.local ?code.local)]

                    [export_$? $] (?code.tuple (export.with ?code.local))
                    [export_expression? 'expression] (?code.tuple (export.with ?local))
                    [export_declaration? 'declaration] (?code.tuple (export.with ?local))
                    
                    context_type ?list.any])
    (do [! meta.monad]
      [[@ _] module.current
       .let ['context (code.name [@ $])]]
      (//.with_names ['it 'body '_]
        (in (list (` (.the (, export_$?) (, (code.local $))
                       (..Stack (, context_type))
                       (stack)))
                  (` (.the (, export_expression?) ((, 'expression) (, 'it) (, 'body))
                       (-> (, context_type) Code
                           (Meta Code))
                       (do meta.monad
                         [(, '_) (..push (, 'it) (, 'context))]
                         ((,' in) (` (let [((,' ,') (, 'body)) ((,' ,) (, 'body))
                                           ((,' ,') (, '_)) (..pop' #1 (, 'context))]
                                       ((,' ,') (, 'body))))))))
                  (` (.the (, export_declaration?) ((, 'declaration) (, 'it) (, 'body))
                       (-> (, context_type) Code
                           (Meta (List Code)))
                       (do meta.monad
                         [(, '_) (..push (, 'it) (, 'context))]
                         ((,' in) (list (, 'body)
                                        (` (..pop' #0 (, 'context))))))))
                  ))))))
