(.module:
  [library
   [lux #*
    [abstract
     [equivalence (#+ Equivalence)]]
    [control
     ["<>" parser
      ["<.>" code (#+ Parser)]]]
    [data
     ["." product]]
    [macro
     ["." code]]]])

(type: #export Input
  {#.doc (doc "The common typed-argument syntax used by many macros.")}
  {#binding Code
   #type Code})

(def: #export equivalence
  (Equivalence Input)
  ($_ product.equivalence
      code.equivalence
      code.equivalence
      ))

(def: #export (format value)
  (-> Input Code)
  (code.record
   (list [(get@ #binding value)
          (get@ #type value)])))

(def: #export parser
  {#.doc "Parser for the common typed-argument syntax used by many macros."}
  (Parser Input)
  (<code>.record
   ($_ <>.and
       <code>.any
       <code>.any
       )))
