(.using
 [library
  [lux "*"
   [abstract
    [equivalence {"+" Equivalence}]]
   [control
    ["<>" parser
     ["<[0]>" code {"+" Parser}]]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list ("[1]#[0]" monad)]]]
   [macro
    ["[0]" code]]]])

(type: .public Input
  (Record
   [#binding Code
    #type Code]))

(def: .public equivalence
  (Equivalence Input)
  ($_ product.equivalence
      code.equivalence
      code.equivalence
      ))

(def: .public format
  (-> (List Input) Code)
  (|>> (list#each (function (_ value)
                    (list (the #binding value)
                          (the #type value))))
       list#conjoint
       code.tuple))

(def: .public parser
  (Parser (List Input))
  (<| <code>.tuple
      <>.some
      ($_ <>.and
          <code>.any
          <code>.any
          )))
