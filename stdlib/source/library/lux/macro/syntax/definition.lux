(.module:
  [library
   [lux {"-" Definition}
    [abstract
     [equivalence {"+" Equivalence}]
     [monad {"+" do}]]
    [control
     ["[0]" exception {"+" exception:}]
     ["<>" parser
      ["<[0]>" code {"+" Parser}]]]
    [data
     ["[0]" sum]
     ["[0]" product]
     ["[0]" bit]
     ["[0]" text
      ["%" format]]
     [collection
      ["[0]" list]]]
    ["[0]" macro
     ["[0]" code]]
    ["[0]" meta
     ["[0]" location]]]]
  ["[0]" //
   ["[1][0]" check {"+" Check}]])

(type: .public Definition
  (Record
   [#name Text
    #value (Either Check
                   Code)
    #export? Bit]))

(def: .public equivalence
  (Equivalence Definition)
  ($_ product.equivalence
      text.equivalence
      ($_ sum.equivalence
          //check.equivalence
          code.equivalence
          )
      bit.equivalence
      ))

(def: extension
  "lux def")

(def: dummy
  Code
  (` [.#module (~ (code.text (value@ .#module location.dummy)))
      .#line   (~ (code.nat (value@ .#line location.dummy)))
      .#column (~ (code.nat (value@ .#column location.dummy)))]))

(def: .public (format (^slots [#name #value #export?]))
  (-> Definition Code)
  (` ((~ (code.text ..extension))
      (~ (code.local_identifier #name))
      (~ (case #value
           {.#Left check}
           (//check.format check)

           {.#Right value}
           value))
      (~ (code.bit #export?)))))

(def: .public (parser compiler)
  (-> Lux (Parser Definition))
  (do [! <>.monad]
    [raw <code>.any
     me_raw (|> raw
                macro.full_expansion
                (meta.result compiler)
                <>.lifted)]
    (<| (<code>.local me_raw)
        <code>.form
        (<>.after (<code>.text! ..extension))
        ($_ <>.and
            <code>.local_identifier
            (<>.or //check.parser
                   <code>.any)
            <code>.bit
            ))))

(exception: .public (lacks_type [definition Definition])
  (exception.report
   ["Definition" (%.code (..format definition))]))

(def: .public (typed compiler)
  (-> Lux (Parser Definition))
  (do <>.monad
    [definition (..parser compiler)
     _ (case (value@ #value definition)
         {.#Left _}
         (in [])

         {.#Right _}
         (<>.lifted (exception.except ..lacks_type [definition])))]
    (in definition)))
