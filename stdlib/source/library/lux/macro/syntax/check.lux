(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [control
    ["<>" parser]]
   [data
    ["[0]" product]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\parser (.only Parser)]]]]])

(def extension
  "lux check")

(type .public Check
  (Record
   [#type Code
    #value Code]))

(def .public equivalence
  (Equivalence Check)
  (all product.equivalence
       code.equivalence
       code.equivalence
       ))

(def .public (format (open "_[0]"))
  (-> Check Code)
  (` ((, (code.text ..extension))
      (, _#type)
      (, _#value))))

(def .public parser
  (Parser Check)
  (<| <code>.form
      (<>.after (<code>.this_text ..extension))
      (<>.and <code>.any
              <code>.any)))
