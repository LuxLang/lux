(.module:
  [library
   [lux #*
    ["." meta]
    [abstract
     [equivalence (#+ Equivalence)]
     [monad (#+ do)]]
    [control
     ["." exception (#+ exception:)]
     ["<>" parser
      ["<.>" code (#+ Parser)]]]
    [data
     ["." product]]
    [macro
     ["." code]]]])

(def: extension
  "lux check")

(type: #export Check
  {#type Code
   #value Code})

(def: #export equivalence
  (Equivalence Check)
  ($_ product.equivalence
      code.equivalence
      code.equivalence
      ))

(def: #export (format (^slots [#type #value]))
  (-> Check Code)
  (` ((~ (code.text ..extension))
      (~ type)
      (~ value))))

(def: #export parser
  (Parser Check)
  (<| <code>.form
      (<>.after (<code>.text! ..extension))
      (<>.and <code>.any
              <code>.any)))
