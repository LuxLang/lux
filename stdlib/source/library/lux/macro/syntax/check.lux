(.using
 [library
  [lux (.except)
   ["[0]" meta]
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [control
    ["[0]" exception (.only exception:)]
    ["<>" parser (.only)
     ["<[0]>" code (.only Parser)]]]
   [data
    ["[0]" product]]
   [macro
    ["[0]" code]]]])

(def: extension
  "lux check")

(type: .public Check
  (Record
   [#type Code
    #value Code]))

(def: .public equivalence
  (Equivalence Check)
  (all product.equivalence
       code.equivalence
       code.equivalence
       ))

(def: .public (format (open "_[0]"))
  (-> Check Code)
  (` ((~ (code.text ..extension))
      (~ _#type)
      (~ _#value))))

(def: .public parser
  (Parser Check)
  (<| <code>.form
      (<>.after (<code>.this_text ..extension))
      (<>.and <code>.any
              <code>.any)))
