(.module:
  [library
   [lux "*"
    [abstract
     [equivalence {"+" [Equivalence]}]]
    [control
     ["<>" parser ("[1]\[0]" monad)
      ["<[0]>" code {"+" [Parser]}]]]
    [data
     ["[0]" product]
     ["[0]" text]
     [collection
      ["[0]" list ("[1]\[0]" functor)]]]
    [macro
     ["[0]" code]]]])

(type: .public Declaration
  (Record
   [#name Text
    #arguments (List Text)]))

(def: .public equivalence
  (Equivalence Declaration)
  ($_ product.equivalence
      text.equivalence
      (list.equivalence text.equivalence)
      ))

(def: .public parser
  (Parser Declaration)
  (<>.either (<>.and <code>.local_identifier
                     (<>\in (list)))
             (<code>.form (<>.and <code>.local_identifier
                                  (<>.some <code>.local_identifier)))))

(def: .public (format value)
  (-> Declaration Code)
  (let [g!name (code.local_identifier (value@ #name value))]
    (case (value@ #arguments value)
      #.End
      g!name
      
      arguments
      (` ((~ g!name) (~+ (list\each code.local_identifier arguments)))))))
