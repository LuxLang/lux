(.module:
  [library
   [lux #*
    [abstract
     [equivalence (#+ Equivalence)]]
    [control
     ["<>" parser ("#\." monad)
      ["<.>" code (#+ Parser)]]]
    [data
     ["." product]
     ["." text]
     [collection
      ["." list ("#\." functor)]]]
    [macro
     ["." code]]]])

(type: #export Declaration
  {#name Text
   #arguments (List Text)})

(def: #export equivalence
  (Equivalence Declaration)
  ($_ product.equivalence
      text.equivalence
      (list.equivalence text.equivalence)
      ))

(def: #export parser
  {#.doc (doc "A parser for declaration syntax."
              "Such as:"
              quux
              (foo bar baz))}
  (Parser Declaration)
  (<>.either (<>.and <code>.local_identifier
                     (<>\wrap (list)))
             (<code>.form (<>.and <code>.local_identifier
                                  (<>.some <code>.local_identifier)))))

(def: #export (format value)
  (-> Declaration Code)
  (let [g!name (code.local_identifier (get@ #name value))]
    (case (get@ #arguments value)
      #.Nil
      g!name
      
      arguments
      (` ((~ g!name) (~+ (list\map code.local_identifier arguments)))))))
