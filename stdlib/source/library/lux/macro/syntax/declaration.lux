(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["<>" parser (.use "[1]#[0]" monad)
     ["<[0]>" code (.only Parser)]]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [macro
    ["[0]" code]]]])

(type .public Declaration
  (Record
   [#name Text
    #arguments (List Text)]))

(def .public equivalence
  (Equivalence Declaration)
  (all product.equivalence
       text.equivalence
       (list.equivalence text.equivalence)
       ))

(def .public parser
  (Parser Declaration)
  (<>.either (<>.and <code>.local
                     (<>#in (list)))
             (<code>.form (<>.and <code>.local
                                  (<>.some <code>.local)))))

(def .public (format value)
  (-> Declaration Code)
  (let [g!name (code.local (the #name value))]
    (case (the #arguments value)
      {.#End}
      g!name
      
      arguments
      (` ((~ g!name) (~+ (list#each code.local arguments)))))))
