(.module:
  [library
   [lux #*
    [abstract
     [equivalence (#+ Equivalence)]]
    [control
     ["." function]
     ["<>" parser
      ["<.>" code (#+ Parser)]]]
    [data
     ["." product]
     ["." name]
     [collection
      ["." list ("#\." functor)]]]
    [macro
     ["." code]]]])

(type: #export Annotations
  {#.doc (doc "Definition/module annotations.")}
  (List [Name Code]))

(def: #export equivalence
  (Equivalence Annotations)
  (list.equivalence
   (product.equivalence name.equivalence
                        code.equivalence)))

(def: #export empty
  Annotations
  (list))

(def: #export format
  (-> Annotations Code)
  (let [entry (product.apply code.tag function.identity)]
    (|>> (list\map entry)
         code.record)))

(def: #export parser
  (Parser Annotations)
  (<code>.record
   (<>.some
    (<>.and <code>.tag
            <code>.any))))
