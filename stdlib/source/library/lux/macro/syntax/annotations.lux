(.module:
  [library
   [lux "*"
    [abstract
     [equivalence {"+" [Equivalence]}]]
    [control
     ["[0]" function]
     ["<>" parser
      ["<[0]>" code {"+" [Parser]}]]]
    [data
     ["[0]" product]
     ["[0]" name]
     [collection
      ["[0]" list ("[1]\[0]" functor)]]]
    [macro
     ["[0]" code]]]])

(type: .public Annotations
  (List [Name Code]))

(def: .public equivalence
  (Equivalence Annotations)
  (list.equivalence
   (product.equivalence name.equivalence
                        code.equivalence)))

(def: .public empty
  Annotations
  (list))

(def: .public format
  (-> Annotations Code)
  (let [entry (product.then code.tag function.identity)]
    (|>> (list\each entry)
         code.record)))

(def: .public parser
  (Parser Annotations)
  (<code>.record
   (<>.some
    (<>.and <code>.tag
            <code>.any))))
