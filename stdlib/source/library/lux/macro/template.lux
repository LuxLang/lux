... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text let local name with macro the)
   [abstract
    ["?" projection (.use "[1]#[0]" functor)]
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)
      ["?[1]" \\projection]]
     ["[0]" dictionary (.only Dictionary)]]]
   [logic
    ["[0]" bit]]
   [math
    [number
     [/64
      ["[0]" natural (.use "[1]#[0]" base_10)]
      ["[0]" integer (.use "[1]#[0]" base_10)]
      ["[0]" revolution (.use "[1]#[0]" base_10)]
      ["[0]" decimal (.use "[1]#[0]" base_10)]]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" code (.only)
     ["?[1]" \\projection (.only Projection)]]]]]
 ["[0]" // (.only)
  ["[0]" local]
  ["[0]" expansion]
  ["[0]" syntax (.only)
   ["[0]" export]]])

(.the .public macro
  (<| (.in_module# .prelude)
      template#macro))

(.the .public with
  (<| (.in_module# .prelude)
      with_template))

(.the .public spliced
  (syntax.macro (_ [parts (?code.tuple (?.some ?list.any))])
    (pure parts)))

(.the .public amount
  (syntax.macro (_ [parts (?code.tuple (?.some ?list.any))])
    (pure (list (code.natural (list.size parts))))))

(.the .public with_locals
  (syntax.macro (_ [locals (?code.tuple (?.some ?code.local))
                    body ?list.any])
    (monad.let [! meta.monad]
      ['locals (|> locals
                   (list#each //.name)
                   (list.complete !))]
      (pure (list (` (expansion.let [(,* (|> (list.zipped_2 locals 'locals)
                                             (list#each (function (_ [alias name])
                                                          (list (code.local alias) name)))
                                             list#conjoint))]
                       (, body))))))))

(.the (name_side module_side? projection)
  (-> Bit (Projection Name) (Projection Text))
  (monad.let ?.monad
    [[module proper] projection]
    (pure (if module_side?
              (when module
                "" proper
                _ module)
              proper))))

(.the (snippet module_side?)
  (-> Bit (Projection Text))
  (.let [full_name (..name_side module_side? ?code.name)]
    (all ?.either
         ?code.text
         (if module_side?
             full_name
             (?.either ?code.local
                       full_name))
         (?#each bit.as_text ?code.bit)
         (?#each natural#as ?code.natural)
         (?#each integer#as ?code.integer)
         (?#each revolution#as ?code.revolution)
         (?#each decimal#as ?code.decimal)
         )))

(.the (part module_side?)
  (-> Bit (Projection (List Text)))
  (?code.tuple (?.many (..snippet module_side?))))

(.the .public text
  (syntax.macro (_ [simple (..part false)])
    (pure (list (|> simple
                    (text.interposed "")
                    code.text)))))

(..with [<name> <simple> <complex>]
  [(.the .public <name>
     (syntax.macro (_ [name (?.or (?.and (..part true) (..part false))
                                  (..part false))])
       (pure (list (when name
                     {.#Left [simple complex]}
                     (<complex> [(text.interposed "" simple)
                                 (text.interposed "" complex)])
                     
                     {.#Right simple}
                     (|> simple
                         (text.interposed "")
                         <simple>))))))]

  [[name code.local code.name]])

(every Environment
  (Dictionary Text Code))

(.the (reified env template)
  (-> Environment Code Code)
  (`` (when template
        {.#Name _ ["" name]}
        (when (dictionary.value name env)
          {try.#Success substitute}
          substitute

          failure
          template)

        (,, (..with [<tag>]
              [{<tag> meta elems}
               {<tag> meta (list#each (reified env) elems)}]

              [[.#Form]
               [.#Variant]
               [.#Tuple]]
              ))

        _
        template)))

(every Local
  (Record
   [#name Text
    #parameters (List Text)
    #template (List Code)]))

(exception.the .public (irregular_arguments [expected actual])
  (Exception [Natural Natural])
  (exception.report
   (list ["Expected" (by natural.base_10 as expected)]
         ["Actual" (by natural.base_10 as actual)])))

(.the (as_macro (open "_[0]"))
  (-> Local
      Macro)
  (//.macro
    (function (_ inputs compiler)
      (.let [parameters_amount (list.size _#parameters)
             inputs_amount (list.size inputs)]
        (if (natural.= parameters_amount inputs_amount)
            (.let [environment (is Environment
                                   (|> (list.zipped_2 _#parameters inputs)
                                       (dictionary.of_list text.hash)))]
              {.#Right [compiler (list#each (..reified environment) _#template)]})
            (exception.except ..irregular_arguments [parameters_amount inputs_amount]))))))

(.the local
  (Projection Local)
  (monad.let ?.monad
    [[name parameters] (?code.form (?.and ?code.local
                                          (?.many ?code.local)))
     template (?code.tuple (?.some ?list.any))]
    (pure [#name name
           #parameters parameters
           #template template])))

... TODO: Get rid of this (and any local definitions it depends on) once the bootstrapping compiler is gone.
(.the .public let
  (syntax.macro (_ [locals (?code.tuple (?.some ..local))
                    body ?list.any])
    (monad.let meta.monad
      [[here_name _] module.current
       expression? (is (Meta Bit)
                       (function (_ lux)
                         {try.#Success [lux (when (its .#expected lux)
                                              {.#None}
                                              false

                                              {.#Some _}
                                              true)]}))
       'pop (local.push (list#each (function (_ local)
                                     [[here_name (its #name local)]
                                      (..as_macro local)])
                                   locals))]
      (if expression?
          (//.with_names ['body]
            (pure (list (` (.let [(, 'body) (, body)]
                             (exec
                               (, 'pop)
                               (, 'body)))))))
          (pure (list body
                      'pop))))))

(.the .public the
  (syntax.macro (_ [['export_policy 'name '*parameters] (export.with (?code.form (?.and ?list.any (?.some ?list.any))))
                    body ?list.any])
    (pure (list (` (.the (, 'export_policy) (, 'name)
                     (..macro ((, 'name) (,* '*parameters))
                       (, body))))))))
