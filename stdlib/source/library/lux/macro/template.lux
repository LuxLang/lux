... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text let local name macro with)
   [abstract
    [monad (.only do)]
    ["<>" projection (.use "[1]#[0]" functor)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" bit (.use "[1]#[0]" text)]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]
     ["[0]" stack (.use "[1]#[0]" monad)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["[0]" natural (.use "[1]#[0]" base_10)]
     ["[0]" integer (.use "[1]#[0]" base_10)]
     ["[0]" revolution (.use "[1]#[0]" base_10)]
     ["[0]" decimal (.use "[1]#[0]" base_10)]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]]]]
 ["[0]" // (.only)
  ["[0]" syntax]
  ["[0]" local]
  ["[0]" expansion]])

(the .public macro
  (<| (.in_module# .prelude)
      .template#macro))

(the .public with
  (<| (.in_module# .prelude)
      .with_template))

(the .public spliced
  (syntax.macro (_ [parts (<code>.tuple (<>.some <code>.any))])
    (in parts)))

(the .public amount
  (syntax.macro (_ [parts (<code>.tuple (<>.some <code>.any))])
    (in (stack (code.natural (stack.size parts))))))

(the .public with_locals
  (syntax.macro (_ [locals (<code>.tuple (<>.some <code>.local))
                    body <code>.any])
    (do [! meta.monad]
      ['locals (|> locals
                   (stack#each //.name)
                   (stack.all' !))]
      (in (stack (` (expansion.let [(,* (|> (stack.zipped_2 locals 'locals)
                                            (stack#each (function (_ [alias name])
                                                          (stack (code.local alias) name)))
                                            stack#conjoint))]
                      (, body))))))))

(the (name_side module_side? projection)
  (-> Bit (Projection Name) (Projection Text))
  (do <>.monad
    [[module proper] projection]
    (in (if module_side?
          (when module
            "" proper
            _ module)
          proper))))

(the (snippet module_side?)
  (-> Bit (Projection Text))
  (.let [full_name (..name_side module_side? <code>.name)]
    (all <>.either
         <code>.text
         (if module_side?
           full_name
           (<>.either <code>.local
                      full_name))
         (<>#each bit#as <code>.bit)
         (<>#each natural#as <code>.natural)
         (<>#each integer#as <code>.integer)
         (<>#each revolution#as <code>.revolution)
         (<>#each decimal#as <code>.decimal)
         )))

(the (part module_side?)
  (-> Bit (Projection (Stack Text)))
  (<code>.tuple (<>.many (..snippet module_side?))))

(the .public text
  (syntax.macro (_ [simple (..part false)])
    (in (stack (|> simple (text.interposed "") code.text)))))

(..with [<name> <simple> <complex>]
  [(the .public <name>
     (syntax.macro (_ [name (<>.or (<>.and (..part true) (..part false))
                                   (..part false))])
       (when name
         {.#Left [simple complex]}
         (in (stack (<complex> [(text.interposed "" simple)
                                (text.interposed "" complex)])))
         
         {.#Right simple}
         (in (stack (|> simple (text.interposed "") <simple>))))))]

  [name code.local code.name]
  )

(every Environment
  (Dictionary Text Code))

(the (applied env template)
  (-> Environment Code Code)
  (`` (when template
        [_ {.#Name "" name}]
        (when (dictionary.value name env)
          {try.#Success substitute}
          substitute

          failure
          template)

        (,, (..with [<tag>]
              [[meta {<tag> elems}]
               [meta {<tag> (stack#each (applied env) elems)}]]

              [.#Form]
              [.#Variant]
              [.#Tuple]))

        _
        template)))

(every Local
  (Record
   [#name Text
    #parameters (Stack Text)
    #template (Stack Code)]))

(exception.the .public (irregular_arguments [expected actual])
  (Exception [Natural Natural])
  (exception.report
   (list ["Expected" (by natural.base_10 as expected)]
         ["Actual" (by natural.base_10 as actual)])))

(the (as_macro (open "_[0]"))
  (-> Local
      Macro)
  (//.macro
    (function (_ inputs compiler)
      (.let [parameters_amount (stack.size _#parameters)
             inputs_amount (stack.size inputs)]
        (if (natural.= parameters_amount inputs_amount)
          (.let [environment (is Environment
                                 (|> (stack.zipped_2 _#parameters inputs)
                                     list.of_stack
                                     (dictionary.of_list text.hash)))]
            {.#Right [compiler (stack#each (..applied environment) _#template)]})
          (exception.except ..irregular_arguments [parameters_amount inputs_amount]))))))

(the local
  (Projection Local)
  (do <>.monad
    [[name parameters] (<code>.form (<>.and <code>.local
                                            (<>.many <code>.local)))
     template (<code>.tuple (<>.some <code>.any))]
    (in [#name name
         #parameters parameters
         #template template])))

... TODO: Get rid of this (and any local definitions it depends on) once the bootstrapping compiler is gone.
(the .public let
  (syntax.macro (_ [locals (<code>.tuple (<>.some ..local))
                    body <code>.any])
    (do meta.monad
      [[here_name _] module.current
       expression? (is (Meta Bit)
                       (function (_ lux)
                         {try.#Success [lux (when (its .#expected lux)
                                              {.#None}
                                              false

                                              {.#Some _}
                                              true)]}))
       'pop (local.push (stack#each (function (_ local)
                                      [[here_name (its #name local)]
                                       (..as_macro local)])
                                    locals))]
      (if expression?
        (//.with_names ['body]
          (in (stack (` (.let [(, 'body) (, body)]
                          (exec
                            (, 'pop)
                            (, 'body)))))))
        (in (stack body
                   'pop))))))
