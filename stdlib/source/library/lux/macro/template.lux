(.module:
  [library
   [lux {"-" let local macro}
    ["[0]" meta]
    [abstract
     ["[0]" monad {"+" do}]]
    [control
     ["[0]" try {"+" Try}]
     ["[0]" exception {"+" exception:}]
     ["<>" parser ("[1]#[0]" functor)
      ["<[0]>" code {"+" Parser}]]]
    [data
     ["[0]" bit ("[1]#[0]" codec)]
     ["[0]" text]
     [collection
      ["[0]" list ("[1]#[0]" monad)]
      ["[0]" dictionary {"+" Dictionary}]]]
    [math
     [number
      ["[0]" nat ("[1]#[0]" decimal)]
      ["[0]" int ("[1]#[0]" decimal)]
      ["[0]" rev ("[1]#[0]" decimal)]
      ["[0]" frac ("[1]#[0]" decimal)]]]]]
  ["[0]" //
   [syntax {"+" syntax:}]
   ["[0]" code]
   ["[0]" local]])

(syntax: .public (spliced [parts (<code>.tuple (<>.some <code>.any))])
  (in parts))

(syntax: .public (amount [parts (<code>.tuple (<>.some <code>.any))])
  (in (list (code.nat (list.size parts)))))

(syntax: .public (with_locals [locals (<code>.tuple (<>.some <code>.local_identifier))
                               body <code>.any])
  (do [! meta.monad]
    [g!locals (|> locals
                  (list#each //.identifier)
                  (monad.all !))]
    (in (list (` (.with_expansions [(~+ (|> (list.zipped/2 locals g!locals)
                                            (list#each (function (_ [name identifier])
                                                         (list (code.local_identifier name) (as_is identifier))))
                                            list#conjoint))]
                   (~ body)))))))

(def: (symbol_side module_side? parser)
  (-> Bit (Parser Symbol) (Parser Text))
  (do <>.monad
    [[module short] parser]
    (in (if module_side?
          (case module
            "" short
            _ module)
          short))))

(def: (snippet module_side?)
  (-> Bit (Parser Text))
  (.let [full_identifier (..symbol_side module_side? <code>.identifier)]
    ($_ <>.either
        <code>.text
        (if module_side?
          full_identifier
          (<>.either <code>.local_identifier
                     full_identifier))
        (<>#each bit#encoded <code>.bit)
        (<>#each nat#encoded <code>.nat)
        (<>#each int#encoded <code>.int)
        (<>#each rev#encoded <code>.rev)
        (<>#each frac#encoded <code>.frac)
        )))

(def: (part module_side?)
  (-> Bit (Parser (List Text)))
  (<code>.tuple (<>.many (..snippet module_side?))))

(syntax: .public (text [simple (..part false)])
  (in (list (|> simple (text.interposed "") code.text))))

(template [<name> <simple> <complex>]
  [(syntax: .public (<name> [name (<>.or (<>.and (..part true) (..part false))
                                         (..part false))])
     (case name
       {.#Left [simple complex]}
       (in (list (<complex> [(text.interposed "" simple)
                             (text.interposed "" complex)])))
       
       {.#Right simple}
       (in (list (|> simple (text.interposed "") <simple>)))))]

  [identifier code.local_identifier code.identifier]
  )

(type: Environment
  (Dictionary Text Code))

(def: (applied env template)
  (-> Environment Code Code)
  (case template
    [_ {.#Identifier "" name}]
    (case (dictionary.value name env)
      {.#Some substitute}
      substitute

      {.#None}
      template)

    (^template [<tag>]
      [[meta {<tag> elems}]
       [meta {<tag> (list#each (applied env) elems)}]])
    ([.#Form]
     [.#Variant]
     [.#Tuple])

    _
    template))

(type: Local
  (Record
   [#name Text
    #parameters (List Text)
    #template (List Code)]))

(exception: .public (irregular_arguments [expected Nat
                                          actual Nat])
  (exception.report
   ["Expected" (# nat.decimal encoded expected)]
   ["Actual" (# nat.decimal encoded actual)]))

(def: (macro (^slots [#parameters #template]))
  (-> Local Macro)
  ("lux macro"
   (function (_ inputs compiler)
     (.let [parameters_amount (list.size #parameters)
            inputs_amount (list.size inputs)]
       (if (nat.= parameters_amount inputs_amount)
         (.let [environment (: Environment
                               (|> (list.zipped/2 #parameters inputs)
                                   (dictionary.of_list text.hash)))]
           {.#Right [compiler (list#each (..applied environment) #template)]})
         (exception.except ..irregular_arguments [parameters_amount inputs_amount]))))))

(def: local
  (Parser Local)
  (do <>.monad
    [[name parameters] (<code>.form (<>.and <code>.local_identifier
                                            (<>.many <code>.local_identifier)))
     template (<code>.tuple (<>.some <code>.any))]
    (in [#name name
         #parameters parameters
         #template template])))

(syntax: .public (let [locals (<code>.tuple (<>.some ..local))
                       body <code>.any])
  (do meta.monad
    [here_name meta.current_module_name
     expression? (: (Meta Bit)
                    (function (_ lux)
                      {try.#Success [lux (case (value@ .#expected lux)
                                           {.#None}
                                           false

                                           {.#Some _}
                                           true)]}))
     g!pop (local.push (list#each (function (_ local)
                                    [[here_name (value@ #name local)]
                                     (..macro local)])
                                  locals))]
    (if expression?
      (//.with_identifiers [g!body]
        (in (list (` (.let [(~ g!body) (~ body)]
                       (exec (~ g!pop)
                         (~ g!body)))))))
      (in (list body
                g!pop)))))
