... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... [Not everything is an expression](https://codewords.recurse.com/issues/two/not-everything-is-an-expression)
(.using
 [library
  [lux (.except local the)
   [abstract
    ["?" projection (.use "[1]#[0]" functor)]
    ["[0]" monad]]
   [error
    ["[0]" exception (.only Exception)]]
   ["[0]" type (.only)
    ["[0]" nominal]]
   ["[0]" meta (.only)
    ["[0]" binding]
    ["[0]" code (.only)
     ["?[1]" \\projection (.only Projection)]]]]]
 ["[0]" // (.only)
  ["[0]" syntax (.only)
   ["[0]" export]]])

(exception.the .public (invalid_type [expected actual])
  (Exception [Type Type])
  (exception.report
   (list ["Expected" (type.absolute_text expected)]
         ["Actual" (type.absolute_text actual)])))

(.the local
  (Projection [Code Code])
  (?code.tuple (export.with (?#each code.local ?code.local))))

(.the .public the
  (syntax.macro (_ [[public|private@type type] ..local
                    [public|private@micro micro] ..local
                    [public|private@macro macro] ..local
                    [public|private@by_name by_name] ..local])
    (//.with_names ['_ 'type 'expression 'value]
      (pure (list (` (nominal.every (, public|private@type) (, type)
                       Macro

                       (.the (, public|private@micro) (, micro)
                         (-> Macro
                             (, type))
                         (|>> nominal.of))

                       (.the (, public|private@macro) (, macro)
                         (-> (, type)
                             Macro)
                         (|>> nominal.as))))

                  (` (.the (, public|private@by_name) ((, by_name) (, '_))
                       (-> Name
                           (Meta Macro))
                       (monad.let meta.monad
                         [[(, 'type) (, 'expression) (, 'value)] (binding.export (, '_))]
                         (if (by type.equivalence (,' =) (, type) (, 'type))
                             ((,' pure) ((, macro) (as (-> Any (, type)) (, 'value))))
                             (meta.failure (exception.error ..invalid_type [(, type) (, 'type)])))))))))))
