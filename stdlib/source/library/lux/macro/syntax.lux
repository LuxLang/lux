(.using
 [library
  [lux "*"
   ["[0]" meta]
   [abstract
    ["[0]" monad {"+" do}]]
   [control
    ["[0]" maybe]
    ["[0]" try]
    ["<>" parser
     ["</>" code {"+" Parser}]]]
   [data
    ["[0]" text ("[1]#[0]" monoid)]
    [collection
     ["[0]" list]]]
   [math
    [number
     ["[0]" nat]
     ["[0]" int]
     ["[0]" rev]
     ["[0]" frac]]]]]
 ["[0]" // {"+" with_symbols}
  ["[0]" code]]
 ["[0]" / "_"
  ["[1][0]" export]])

(def: (self_documenting binding parser)
  (All (_ a) (-> Code (Parser a) (Parser a)))
  (function (_ tokens)
    (case (parser tokens)
      {try.#Success [tokens output]}
      {try.#Success [tokens output]}
      
      {try.#Failure error}
      {try.#Failure (all text#composite
                         "Failed to parse: " (code.format binding) text.new_line
                         error)})))

(def: (un_paired pairs)
  (All (_ a) (-> (List [a a]) (List a)))
  (case pairs
    {.#End}                 {.#End}
    {.#Item [[x y] pairs']} (partial_list x y (un_paired pairs'))))

(def: syntax
  (Parser [Code [Text (Maybe Text) (List Code)] Code])
  (/export.parser
   (all <>.and
        (</>.form (all <>.and
                       </>.local
                       (<>.maybe </>.local)
                       (</>.tuple (<>.some </>.any))))
        </>.any)))

(macro: .public (syntax: tokens)
  (case (</>.result ..syntax tokens)
    {try.#Success [export_policy [name g!state args] body]}
    (with_symbols [g!tokens g!body g!error]
      (do [! meta.monad]
        [vars+parsers (case (list.pairs args)
                        {.#Some args}
                        (monad.each !
                                    (is (-> [Code Code] (Meta [Code Code]))
                                        (function (_ [var parser])
                                          (with_expansions [<default> (in [var
                                                                           (` ((~! ..self_documenting) (' (~ var))
                                                                               (~ parser)))])]
                                            (case var
                                              [_ {.#Symbol ["" _]}]
                                              <default>

                                              [_ {.#Symbol _}]
                                              (in [var parser])

                                              _
                                              <default>))))
                                    args)

                        _
                        (meta.failure "Syntax pattern expects pairs of bindings and code-parsers."))
         g!state (case g!state
                   {.#Some g!state}
                   (in (code.local g!state))

                   {.#None}
                   (//.symbol "g!state"))
         this_module meta.current_module_name
         .let [error_msg (code.text (//.wrong_syntax_error [this_module name]))]]
        (in (list (` (.macro: (~ export_policy) ((~ (code.symbol ["" name])) (~ g!tokens) (~ g!state))
                       (.case ((~! </>.result)
                               (is ((~! </>.Parser) (Meta (List Code)))
                                   ((~! do) (~! <>.monad)
                                    [(~+ (..un_paired vars+parsers))]
                                    ((~' in) (~ body))))
                               (~ g!tokens))
                         {try.#Success (~ g!body)}
                         ((~ g!body) (~ g!state))

                         {try.#Failure (~ g!error)}
                         {try.#Failure ((~! text.interposed) (~! text.new_line) (list (~ error_msg) (~ g!error)))})))))))
    
    {try.#Failure error}
    (meta.failure (//.wrong_syntax_error (symbol ..syntax:)))))
