... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except macro the)
   [abstract
    ["<>" projection (.use "[1]:[0]" functor)]
    ["[0]" monad]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text (.only \n)]
    [collection
     ["[0]" list (.use "[1]:[0]" monad)
      ["?[1]" \\projection]]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" code (.only)
     ["</>" \\projection (.only Projection)]]]]]
 [/
  ["[0]" export]
  ["[0]" // (.only with_names)
   ["[0]" expansion]]])

(.the .public (self_documenting binding projection)
  (for_any (_ it)
    (-> Code (Projection it)
        (Projection it)))
  (function (_ tokens)
    (when (projection tokens)
      {try.:Failure error}
      {try.:Failure (text "Failed to parse: " (code.absolute binding) \n
                          error)}

      success
      success)))

(.the syntaxP
  (Projection [[Text (Maybe Text) (List [Code Code])]
               Code])
  (all <>.and
       (</>.form (all <>.and
                      </>.local
                      (<>.maybe </>.local)
                      (</>.tuple (<>.some (<>.and ?list.any ?list.any)))))
       ?list.any))

(.the .public macro
  (.macro (_ tokens)
    (when (?list.value tokens ..syntaxP)
      {try.:Success [[name 'state args] body]}
      (with_names ['tokens 'body 'error]
        (monad.let [! meta.monad]
          [vars+projections (list.each' !
                                        (is (-> [Code Code] (Meta [Code Code]))
                                            (function (_ [var projection])
                                              (expansion.let [<default> (pure [var
                                                                               (` (..self_documenting (' (, var))
                                                                                                      (, projection)))])]
                                                (when var
                                                  {.:Name _ ["" _]}
                                                  <default>

                                                  {.:Name _ _}
                                                  (pure [var projection])

                                                  _
                                                  <default>))))
                                        args)
           'state (when 'state
                    {.:Some 'state}
                    (pure (code.local 'state))

                    {.:None}
                    (//.name "'state"))
           [this_module _] module.current
           .let ['name (code.name ["" name])]]
          (pure (list (` (.macro ((, 'name) (, 'tokens) (, 'state))
                           (.when (<| (?list.value (, 'tokens))
                                      (is (</>.Projection (Meta (List Code))))
                                      (monad.let <>.monad
                                        [(,* (|> vars+projections
                                                 (list:each (function (_ [left right])
                                                              (list left right)))
                                                 list:conjoint))]
                                        (.by <>.monad (,' pure)
                                             (is (Meta (List Code))
                                                 (, body)))))
                             {try.:Success (, 'body)}
                             ((, 'body) (, 'state))

                             {try.:Failure (, 'error)}
                             {try.:Failure (|> (, 'error)
                                               (list "Invalid syntax:")
                                               (text.interposed \n))})))))))
      
      {try.:Failure error}
      (meta.failure .wrong_syntax))))

(.the .public the
  (macro (_ [['export_policy 'name '*in_addition] (export.with (</>.form (all <>.and
                                                                              ?list.any
                                                                              (<>.some ?list.any))))
             'body ?list.any])
    (pure (list (` (.the (, 'export_policy) (, 'name)
                     (..macro ((, 'name) (,* '*in_addition))
                       (, 'body))))))))
