... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except macro)
   [abstract
    ["<>" projection]
    ["[0]" monad (.only do)]]
   [control
    ["[0]" try]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" stack]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" code (.only)
     ["</>" \\projection (.only Projection)]]]]]
 ["[0]" // (.only with_names)
  ["[0]" expansion]])

(the .public (self_documenting binding projection)
  (for_any (_ of)
    (-> Code (Projection of)
        (Projection of)))
  (function (_ tokens)
    (when (projection tokens)
      {try.#Failure error}
      {try.#Failure (all text#composite
                         "Failed to parse: " (code.absolute binding) text.new_line
                         error)}

      success
      success)))

(the (un_paired pairs)
  (for_any (_ a)
    (-> (Stack [a a])
        (Stack a)))
  (when pairs
    {.#Top [x y] pairs'}
    (stack.partial x y (un_paired pairs'))

    {.#Empty}
    {.#Empty}))

(the syntaxP
  (Projection [[Text (Maybe Text) (Stack Code)] Code])
  (all <>.and
       (</>.form (all <>.and
                      </>.local
                      (<>.maybe </>.local)
                      (</>.tuple (<>.some </>.any))))
       </>.any))

(the .public macro
  (.macro (_ tokens)
    (when (</>.value ..syntaxP tokens)
      {try.#Success [[name 'state args] body]}
      (with_names ['tokens 'body 'error]
        (do [! meta.monad]
          [vars+projections (when (stack.pairs args)
                              {try.#Success args}
                              (monad.each !
                                          (is (-> [Code Code] (Meta [Code Code]))
                                              (function (_ [var projection])
                                                (expansion.let [<default> (in [var
                                                                               (` (..self_documenting (' (, var))
                                                                                                      (, projection)))])]
                                                  (when var
                                                    [_ {.#Name ["" _]}]
                                                    <default>

                                                    [_ {.#Name _}]
                                                    (in [var projection])

                                                    _
                                                    <default>))))
                                          args)

                              _
                              (meta.failure .bindings_must_be_pairs))
           'state (when 'state
                    {.#Some 'state}
                    (in (code.local 'state))

                    {.#None}
                    (//.name "'state"))
           [this_module _] module.current
           .let ['name (code.name ["" name])]]
          (in (stack (` (.macro ((, 'name) (, 'tokens) (, 'state))
                          (.when (</>.value
                                  (is (</>.Projection (Meta (Stack Code)))
                                      (do <>.monad
                                        [(,* (..un_paired vars+projections))]
                                        (.by <>.monad (,' in)
                                             (is (Meta (Stack Code))
                                                 (, body)))))
                                  (, 'tokens))
                            {try.#Success (, 'body)}
                            ((, 'body) (, 'state))

                            {try.#Failure (, 'error)}
                            {try.#Failure (text.interposed text.new_line (stack "Invalid syntax:" (, 'error)))})))))))
      
      {try.#Failure error}
      (meta.failure .wrong_syntax))))
