(.module:
  [library
   [lux (#- nat int rev)
    [abstract
     [equivalence (#+ Equivalence)]]
    [data
     ["." product]
     ["." bit]
     ["." name]
     ["." text ("#\." monoid equivalence)]
     [collection
      ["." list ("#\." functor mix)]]]
    [math
     [number
      ["." nat]
      ["." int]
      ["." rev]
      ["." frac]]]
    [meta
     ["." location]]]])

... (type: (Code' w)
...   (#.Bit Bit)
...   (#.Nat Nat)
...   (#.Int Int)
...   (#.Rev Rev)
...   (#.Frac Frac)
...   (#.Text Text)
...   (#.Identifier Name)
...   (#.Tag Name)
...   (#.Form (List (w (Code' w))))
...   (#.Tuple (List (w (Code' w))))
...   (#.Record (List [(w (Code' w)) (w (Code' w))])))

... (type: Code
...   (Ann Location (Code' (Ann Location))))

(template [<name> <type> <tag>]
  [(def: .public (<name> x)
     (-> <type> Code)
     [location.dummy (<tag> x)])]
  
  [bit        Bit                #.Bit]
  [nat        Nat                #.Nat]
  [int        Int                #.Int]
  [rev        Rev                #.Rev]
  [frac       Frac               #.Frac]
  [text       Text               #.Text]
  [identifier Name               #.Identifier]
  [tag        Name               #.Tag]
  [form       (List Code)        #.Form]
  [tuple      (List Code)        #.Tuple]
  [record     (List [Code Code]) #.Record]
  )

(template [<name> <tag>]
  [(def: .public (<name> name)
     (-> Text Code)
     [location.dummy (<tag> ["" name])])]

  [local_identifier #.Identifier]
  [local_tag        #.Tag])

(implementation: .public equivalence
  (Equivalence Code)
  
  (def: (= x y)
    (case [x y]
      (^template [<tag> <eq>]
        [[[_ (<tag> x')] [_ (<tag> y')]]
         (\ <eq> = x' y')])
      ([#.Bit        bit.equivalence]
       [#.Nat        nat.equivalence]
       [#.Int        int.equivalence]
       [#.Rev        rev.equivalence]
       [#.Frac       frac.equivalence]
       [#.Text       text.equivalence]
       [#.Identifier name.equivalence]
       [#.Tag        name.equivalence])

      (^template [<tag>]
        [[[_ (<tag> xs')] [_ (<tag> ys')]]
         (\ (list.equivalence =) = xs' ys')])
      ([#.Form]
       [#.Tuple])

      [[_ (#.Record xs')] [_ (#.Record ys')]]
      (\ (list.equivalence (product.equivalence = =))
         = xs' ys')
      
      _
      false)))

(def: .public (format ast)
  (-> Code Text)
  (case ast
    (^template [<tag> <struct>]
      [[_ (<tag> value)]
       (\ <struct> encoded value)])
    ([#.Bit        bit.codec]
     [#.Nat        nat.decimal]
     [#.Int        int.decimal]
     [#.Rev        rev.decimal]
     [#.Frac       frac.decimal]
     [#.Identifier name.codec])

    [_ (#.Text value)]
    (text.format value)

    [_ (#.Tag name)]
    (text\compose  "#" (\ name.codec encoded name))

    (^template [<tag> <open> <close>]
      [[_ (<tag> members)]
       ($_ text\compose
           <open>
           (list\mix (function (_ next prev)
                       (let [next (format next)]
                         (if (text\= "" prev)
                           next
                           ($_ text\compose prev " " next))))
                     ""
                     members)
           <close>)])
    ([#.Form  "(" ")"]
     [#.Tuple "[" "]"])

    [_ (#.Record pairs)]
    ($_ text\compose
        "{"
        (list\mix (function (_ [left right] prev)
                    (let [next ($_ text\compose (format left) " " (format right))]
                      (if (text\= "" prev)
                        next
                        ($_ text\compose prev " " next))))
                  ""
                  pairs)
        "}")
    ))

(def: .public (replaced original substitute ast)
  (-> Code Code Code Code)
  (if (\ ..equivalence = original ast)
    substitute
    (case ast
      (^template [<tag>]
        [[location (<tag> parts)]
         [location (<tag> (list\map (replaced original substitute) parts))]])
      ([#.Form]
       [#.Tuple])

      [location (#.Record parts)]
      [location (#.Record (list\map (function (_ [left right])
                                      [(replaced original substitute left)
                                       (replaced original substitute right)])
                                    parts))]

      _
      ast)))
