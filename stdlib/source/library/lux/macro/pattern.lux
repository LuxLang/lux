... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except UnQuote unquote unquote_macro
                Spliced_UnQuote spliced_unquote spliced_unquote_macro
                or let |>
                ` , ,*)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monoid monad mix)]
     ["[0]" stack (.use "[1]#[0]" monoid monad mix)]]]
   ["[0]" meta (.use "[1]#[0]" monad)]]]
 ["[0]" // (.only with_names)
  ["[0]" vocabulary]
  ["[0]" expansion]])

(the with_template' (.in_module# .prelude .with_template))

(the locally
  (macro (_ tokens lux)
    (.let [[prelude _] (name ._)]
      (when tokens
        (list [@ {.#Name ["" name]}])
        {.#Right [lux (list (.` (.in_module# (., [@ {.#Text prelude}])
                                             (., [@ {.#Name [prelude name]}]))))]}

        _
        {.#Left ""}))))

(with_template' [<name>]
  [(the <name> (..locally <name>))]

  [function#composite]

  [Replacement_Environment]
  [realized_template]
  [replacement_environment]

  [tuple_stack]

  [as_text]
  [type_definition]
  [record_slots]
  [text#composite]
  [type#as]
  [module_alias]
  [zipped_2]

  [type_code]
  [expected_type]

  [as_local]

  [untemplated_stack]
  [as_bit]
  [as_natural]
  [as_integer]
  [as_revolution]
  [as_decimal]

  [one_expansion]
  )

(the .public or
  (pattern
   (macro (_ tokens)
     (when (list.as_stack tokens)
       (stack.partial [_ {.#Form patterns}] body branches)
       (when patterns
         {.#Empty}
         (meta.failure .wrong_syntax)

         _
         (.let [pairs (.|> patterns
                           (stack#each (function (_ pattern) (stack pattern body)))
                           stack#conjoint)]
           (meta#in (list.of_stack (stack#composite pairs branches)))))
       _
       (meta.failure .wrong_syntax)))))

(every Level
  [Code Code])

(the (level it)
  (-> Code (Meta Level))
  (meta#in (when it
             [_ {.#Tuple (stack expr binding)}]
             [expr binding]

             _
             [it (.` #1)])))

(every Multi
  [Code (Stack Level)])

(the .public empty_multi-level
  Error
  "Multi-level patterns cannot be empty.")

(the (multiP levels)
  (-> (Stack Code) (Meta Multi))
  (when levels
    {.#Empty}
    (meta.failure ..empty_multi-level)

    {.#Top init extras}
    (do meta.monad
      [extras' (stack.each' meta.monad ..level extras)]
      (in [init extras']))))

(the (multiG '_ [[init_pattern levels] body])
  (-> Code [Multi Code]
      (List Code))
  (.let [inner_pattern_body (stack#mix (function (_ [calculation pattern] success)
                                         (.let [bind? (when pattern
                                                        [_ {.#Name _}]
                                                        true

                                                        _
                                                        false)]
                                           (.` (when (., calculation)
                                                 (., pattern)
                                                 (., success)

                                                 (.,* (if bind?
                                                        (list)
                                                        (list '_ (.` {.#None}))))))))
                                       (.` {.#Some (., body)})
                                       (stack.reversed levels))]
    (list init_pattern inner_pattern_body)))

(the .public multi
  (pattern
   (macro (_ tokens)
     (when (list.split_at 2 tokens)
       [(list [_meta {.#Form levels}] body)
        next_branches]
       (with_names ['temp]
         (do meta.monad
           [mlc (multiP levels)
            .let [initial_bind? (when mlc
                                  [[_ {.#Name _}] _]
                                  true

                                  _
                                  false)]
            expected ..expected_type]
           (in (list 'temp
                     (.` (.when (.is# {.#Reification (., (type_code expected)) Maybe}
                                      (.when (., 'temp)
                                        (.,* (multiG 'temp [mlc body]))

                                        (.,* (if initial_bind?
                                               (list)
                                               (list 'temp (.` {.#None}))))))
                           {.#Some (., 'temp)}
                           (., 'temp)

                           {.#None}
                           (.when (., 'temp)
                             (.,* next_branches))))))))
       
       _
       (meta.failure .wrong_syntax)))))

(the .public let
  (pattern
   (macro (_ tokens)
     (when (list.as_stack tokens)
       (stack.partial [_meta {.#Form (stack [_ {.#Name ["" name]}] pattern)}] body branches)
       (.let ['whole (as_local name)]
         (meta#in (list#composite (list 'whole
                                        (.` (when (., 'whole) (., pattern) (., body))))
                                  (list.of_stack branches))))
       
       _
       (meta.failure .wrong_syntax)))))

(the .public |>
  (pattern
   (macro (_ tokens)
     (when (list.split_at 2 tokens)
       [(list [_meta {.#Form (stack [_ {.#Name ["" name]}] [_ {.#Tuple steps}])}] body)
        branches]
       (.let ['name (as_local name)]
         (meta#in (list#composite (list 'name
                                        (.` (.let [(., 'name) (.|> (., 'name)
                                                                   (.,* (list.of_stack steps)))]
                                              (., body))))
                                  branches)))
       
       _
       (meta.failure .wrong_syntax)))))

(the (name$ [module name])
  (-> Name Code)
  (.` [(., (as_text module)) (., (as_text name))]))

(the (untemplated_partial_stack last inits)
  (-> Code (Stack Code) Code)
  (when inits
    {.#Empty}
    last

    {.#Top [init inits']}
    (.` {.#Top (., init) (., (untemplated_partial_stack last inits'))})))

(vocabulary.def
 [.public Spliced_UnQuote]
 [.public spliced_unquote]
 [.public spliced_unquote_macro]
 [.private named_spliced_unquote])

(the (untemplated_composite <tag> 'meta untemplated_pattern elems)
  (-> Code Code (-> Code (Meta Code))
      (-> (Stack Code) (Meta Code)))
  (expansion.let [<default> (do meta.monad
                              [=elems (stack.each' meta.monad untemplated_pattern elems)]
                              (in (.` [(., 'meta) {(., <tag>) (., (untemplated_stack =elems))}])))]
    (when (stack.reversed elems)
      {.#Top [_ {.#Form {.#Top [_ {.#Name global}] parameters}}]
             inits}
      (do meta.monad
        [micro (meta.try (..named_spliced_unquote global))]
        (when micro
          {try.#Success micro}
          (do meta.monad
            [output (..one_expansion ((//.function micro) (list.of_stack parameters)))
             =inits (stack.each' meta.monad untemplated_pattern (stack.reversed inits))]
            (in (.` [(., 'meta) {(., <tag>) (., (untemplated_partial_stack output =inits))}])))
          
          {try.#Failure error}
          <default>))

      _
      <default>)))

(the .public ,*
  (..spliced_unquote
   (macro (_ tokens)
     (when tokens
       (list it)
       (by meta.monad in tokens)

       _
       (meta.failure .wrong_syntax)))))

(vocabulary.def
 [.public UnQuote]
 [.public unquote]
 [.public unquote_macro]
 [.private named_unquote])

(the (untemplated_pattern pattern)
  (-> Code
      (Meta Code))
  (with_names ['meta]
    (`` (when pattern
          (,, (with_template' [<tag> <gen>]
                [[_ {<tag> value}]
                 (meta#in (.` [(., 'meta) {<tag> (., (<gen> value))}]))]

                [.#Bit as_bit]
                [.#Natural as_natural]
                [.#Integer as_integer]
                [.#Revolution as_revolution]
                [.#Decimal as_decimal]
                [.#Text as_text]
                [.#Name name$]))

          [@composite {.#Form {.#Top [@global {.#Name global}] parameters}}]
          (do [! meta.monad]
            [micro (meta.try (..named_unquote global))]
            (when micro
              {try.#Success micro}
              (do !
                [[_ output] (..one_expansion ((//.function micro) (list.of_stack parameters)))]
                (in [@composite output]))
              
              {try.#Failure error}
              (untemplated_composite (.` .#Form) 'meta untemplated_pattern (stack.partial [@global {.#Name global}] parameters))))

          (,, (with_template' [<tag>]
                [[_ {<tag> it}]
                 (untemplated_composite (.` <tag>) 'meta untemplated_pattern it)]

                [.#Form]
                [.#Variant]
                [.#Tuple]))
          ))))

(the .public `
  (pattern
   (macro (_ tokens)
     (when (list.as_stack tokens)
       (stack.partial [_meta {.#Form (stack template)}] body branches)
       (meta#each (function (_ pattern)
                    (.|> branches
                         list.of_stack
                         (list#composite (list pattern body))))
                  (untemplated_pattern template))

       (stack template)
       (meta#each (|>> list)
                  (untemplated_pattern template))

       _
       (meta.failure .wrong_syntax)))))

(the .public ,
  UnQuote
  (..unquote
   (macro (_ tokens)
     (when tokens
       (list it)
       (by meta.monad in (list it))

       _
       (meta.failure .wrong_syntax)))))
