... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except or let |>)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try]]
   [function
    [predicate (.only Predicate)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monoid monad)]]]
   ["[0]" meta (.use "[1]#[0]" monad)]]]
 ["[0]" // (.only with_names)
  ["[0]" vocabulary]
  ["[0]" expansion]])

(the with_template (.in_module# .prelude with_template))

(with_template [<name>]
  [(the <name> (.in_module# .prelude <name>))]

  [[function#composite]

   [Replacement_Environment]
   [realized_template]
   [replacement_environment]

   [code#text]
   [type_definition]
   [text#composite]
   [module_alias]

   [type_code]
   [expected_type]

   [code#local]

   [code#bit]
   [code#natural]
   [code#integer]
   [code#revolution]
   [code#decimal]

   [one_expansion]
   [with_provenance]

   [?#value]
   [?#and]
   [?#form]
   [?#rest]
   [?#any]
   [?#name]
   [?#local]
   [?#tuple]])

(the .public or
  (pattern
   (macro (_ tokens)
     (when (.|> (all ?#and
                     (?#form ?#rest)
                     ?#any
                     ?#rest)
                (?#value tokens))
       {.#Some [patterns body branches]}
       (when patterns
         (list)
         (meta.failure .wrong_syntax)

         _
         (.let [pairs (.|> patterns
                           (list#each (function (_ pattern) (list pattern body)))
                           list#conjoint)]
           (meta#pure (list#composite pairs branches))))

       else
       (meta.failure .wrong_syntax)))))

(every Level
  [Code Code])

(the (level it)
  (-> Code
      Level)
  (when it
    {.#Tuple _ (list expr binding)}
    [expr binding]

    _
    [it (` 1b)]))

(the binding?
  (Predicate Code)
  (|>> (match? {.#Name _ _})))

(the ('multi '_ levels body)
  (-> Code (List Code) Code
      Code)
  (.|> levels
       list.in_reverse
       (list#each ..level)
       (list.mix (function (_ [calculation pattern] success)
                   (` (when (, calculation)
                        (, pattern)
                        (, success)

                        (,* (if (binding? pattern)
                                (list)
                                (list '_ (` {.#None})))))))
                 (` {.#Some (, body)}))))

(the .public multi
  (pattern
   (macro (_ tokens)
     (when (.|> (all ?#and
                     (?#form (?#and ?#any ?#rest))
                     ?#any
                     ?#rest)
                (?#value tokens))
       {.#Some [[init levels] body next_branches]}
       (with_names ['temp]
         (monad.let meta.monad
           [expected ..expected_type]
           (pure (list 'temp
                       (` (.when (.is# {.#Reification (, (type_code expected)) Maybe}
                                       (.when (, 'temp)
                                         (, init)
                                         (, ('multi 'temp levels body))

                                         (,* (if (binding? init)
                                                 (list)
                                                 (list 'temp (` {.#None}))))))
                            {.#Some (, 'temp)}
                            (, 'temp)

                            {.#None}
                            (.when (, 'temp)
                              (,* next_branches))))))))
       
       else
       (meta.failure .wrong_syntax)))))

(the .public let
  (pattern
   (macro (_ tokens)
     (when (.|> (all ?#and
                     (?#form (?#and ?#local ?#any))
                     ?#any
                     ?#rest)
                (?#value tokens))
       {.#Some [[name pattern] body branches]}
       (.let ['whole (code#local name)]
         (meta#pure (list#composite (list 'whole
                                          (` (when (, 'whole) (, pattern) (, body))))
                                    branches)))
       
       else
       (meta.failure .wrong_syntax)))))

(the .public |>
  (pattern
   (macro (_ tokens)
     (when (.|> (all ?#and
                     (?#form (?#and ?#local (?#tuple ?#rest)))
                     ?#any
                     ?#rest)
                (?#value tokens))
       {.#Some [[name steps] body branches]}
       (.let ['name (code#local name)]
         (meta#pure (list#composite (list 'name
                                          (` (.let [(, 'name) (.|> (, 'name)
                                                                   (,* steps))]
                                               (, body))))
                                    branches)))
       
       else
       (meta.failure .wrong_syntax)))))
