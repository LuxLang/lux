... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except local name function let)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" try]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" stack (.use "[1]#[0]" monoid monad)]]]
   ["[0]" meta (.only)
    ["[0]" code]
    ["[0]" provenance]
    ["[0]" name (.use "[1]#[0]" absolute)]
    ["[0]" binding]]]])

(the with_template' (.in_module# .prelude .with_template))

(the .public (single syntax)
  (-> Code
      (Meta (Stack Code)))
  (when syntax
    [_ {.#Form {.#Top [[_ {.#Name name}] args]}}]
    (do meta.monad
      [?macro (meta.try (binding.macro name))]
      (when ?macro
        {try.#Success macro}
        ((as Macro' macro) args)
        
        {try.#Failure _}
        (by meta.monad in (stack syntax))))

    _
    (by meta.monad in (stack syntax))))

(the .public (complete syntax)
  (-> Code
      (Meta (Stack Code)))
  (when syntax
    [_ {.#Form {.#Top [[_ {.#Name name}] args]}}]
    (do meta.monad
      [?macro (meta.try (binding.macro name))]
      (when ?macro
        {try.#Success macro}
        (do [! meta.monad]
          [top_level_complete ((as Macro' macro) args)]
          (|> top_level_complete
              (monad.each meta.monad complete)
              (by ! each stack#conjoint)))
        
        {try.#Failure _}
        (by meta.monad in (stack syntax))))

    _
    (by meta.monad in (stack syntax))))

(the .public (total syntax)
  (-> Code
      (Meta (Stack Code)))
  (when syntax
    [_ {.#Form {.#Top [[_ {.#Name name}] args]}}]
    (do meta.monad
      [?macro (meta.try (binding.macro name))]
      (when ?macro
        {try.#Success macro}
        (do meta.monad
          [complete ((as Macro' macro) args)
           complete' (monad.each meta.monad total complete)]
          (in (stack#conjoint complete')))
        
        {try.#Failure _}
        (do meta.monad
          [parts' (monad.each meta.monad total (stack.partial (code.name name) args))]
          (in (stack (code.form (stack#conjoint parts')))))))

    [_ {.#Form {.#Top [harg targs]}}]
    (do meta.monad
      [harg+ (total harg)
       targs+ (monad.each meta.monad total targs)]
      (in (stack (code.form (stack#composite harg+ (stack#conjoint (is (Stack (Stack Code)) targs+)))))))

    [_ {.#Variant members}]
    (do meta.monad
      [members' (monad.each meta.monad total members)]
      (in (stack (code.variant (stack#conjoint members')))))

    [_ {.#Tuple members}]
    (do meta.monad
      [members' (monad.each meta.monad total members)]
      (in (stack (code.tuple (stack#conjoint members')))))

    _
    (by meta.monad in (stack syntax))))

(the .public cannot_expand_to_more_than_1
  Error
  "Macro expanded to more than 1 element.")

(the .public (one token)
  (-> Code
      (Meta Code))
  (do meta.monad
    [token+ (..complete token)]
    (when token+
      (stack token')
      (in token')

      _
      (meta.failure ..cannot_expand_to_more_than_1))))

(with_template' [<macro> <func>]
  [(the .public <macro>
     (.let [[module _] (.name .._)
            [_ proper] (.name <macro>)
            macro_name [module proper]]
       (macro (_ tokens)
         (when (is (Maybe [Bit Code])
                   (when tokens
                     (stack [_ {.#Text "omit"}]
                            token)
                     {.#Some [true token]}

                     (stack token)
                     {.#Some [false token]}

                     _
                     {.#None}))
           {.#Some [omit? token]}
           (do meta.monad
             [provenance meta.provenance
              output (<func> token)
              .let [_ (.log!# (all text#composite
                                   (name#as macro_name) " " (provenance.as_text provenance)
                                   (|> output
                                       (stack#each (|>> code.absolute
                                                        (all text#composite text.\n text.\t)))
                                       text.together)
                                   text.\n))]]
             (in (if omit?
                   (stack)
                   output)))

           {.#None}
           (meta.failure .wrong_syntax)))))]

  [log_single!   ..single]
  [log_complete! ..complete]
  [log_total!    ..total]
  )

(the .public let
  (<| (.in_module# .prelude)
      .expansion#let))
