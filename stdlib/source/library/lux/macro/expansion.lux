... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except local name function let)
   [abstract
    [monad (.only do)]]
   [error (.only error)
    ["[0]" try]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid monad)]]]
   ["[0]" meta (.only)
    ["[0]" code]
    ["[0]" provenance]
    ["[0]" name (.use "[1]#[0]" absolute)]
    ["[0]" binding]]]])

(the .public (single syntax)
  (-> Code
      (Meta (List Code)))
  (when syntax
    {.#Form _ name,args}
    (when (list.as_stack name,args)
      {.#Top {.#Name _ name} args}
      (do meta.monad
        [?macro (meta.try (binding.macro name))]
        (when ?macro
          {try.#Success macro}
          ((as Macro' macro) (list.of_stack args))
          
          {try.#Failure _}
          (by meta.monad in (list syntax))))

      _
      (by meta.monad in (list syntax)))

    _
    (by meta.monad in (list syntax))))

(the .public (complete syntax)
  (-> Code
      (Meta (List Code)))
  (when syntax
    {.#Form _ name,args}
    (when (list.as_stack name,args)
      {.#Top {.#Name _ name} args}
      (do meta.monad
        [?macro (meta.try (binding.macro name))]
        (when ?macro
          {try.#Success macro}
          (do [! meta.monad]
            [top_level_complete ((as Macro' macro) (list.of_stack args))]
            (|> top_level_complete
                (list.each' meta.monad complete)
                (by ! each list#conjoint)))
          
          {try.#Failure _}
          (by meta.monad in (list syntax))))

      _
      (by meta.monad in (list syntax)))

    _
    (by meta.monad in (list syntax))))

(the .public (total syntax)
  (-> Code
      (Meta (List Code)))
  (when syntax
    {.#Form _ members}
    (when (list.as_stack members)
      {.#Top {.#Name _ name} args}
      (do meta.monad
        [?macro (meta.try (binding.macro name))]
        (when ?macro
          {try.#Success macro}
          (do meta.monad
            [complete ((as Macro' macro) (list.of_stack args))
             complete' (list.each' meta.monad total complete)]
            (in (list#conjoint complete')))
          
          {try.#Failure _}
          (do meta.monad
            [parts' (list.each' meta.monad total (list#composite (list (code.name name)) (list.of_stack args)))]
            (in (list (code.form (list#conjoint parts')))))))

      else
      (do meta.monad
        [members' (list.each' meta.monad total members)]
        (in (list (code.form (list#conjoint members'))))))

    {.#Variant _ members}
    (do meta.monad
      [members' (list.each' meta.monad total members)]
      (in (list (code.variant (list#conjoint members')))))

    {.#Tuple _ members}
    (do meta.monad
      [members' (list.each' meta.monad total members)]
      (in (list (code.tuple (list#conjoint members')))))

    _
    (by meta.monad in (list syntax))))

(the .public cannot_expand_to_more_than_1
  (error "Macro expanded to more than 1 element."))

(the .public (one token)
  (-> Code
      (Meta Code))
  (do meta.monad
    [token+ (..complete token)]
    (when token+
      (list token')
      (in token')

      _
      (meta.failure ..cannot_expand_to_more_than_1))))

(the with_template (.in_module# .prelude .with_template))

(with_template [<macro> <func>]
  [(the .public <macro>
     (.let [[module _] (.name .._)
            [_ proper] (.name <macro>)
            macro_name [module proper]]
       (macro (_ tokens)
         (when (is (Maybe [Bit Code])
                   (when tokens
                     (list {.#Text _ "omit"}
                           token)
                     {.#Some [true token]}

                     (list token)
                     {.#Some [false token]}

                     _
                     {.#None}))
           {.#Some [omit? token]}
           (do meta.monad
             [provenance meta.provenance
              output (<func> token)
              .let [_ (.log!# (text (name#as macro_name) " " (provenance.as_text provenance)
                                    (|> output
                                        (list#each (|>> code.absolute
                                                        (text text.\n text.\t)))
                                        text.together)
                                    text.\n))]]
             (in (if omit?
                     (list)
                     output)))

           {.#None}
           (meta.failure .wrong_syntax)))))]

  [log_single!   ..single]
  [log_complete! ..complete]
  [log_total!    ..total]
  )

(the .public let
  (<| (.in_module# .prelude)
      .expansion#let))
