... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Bindings Scope
                let the)
   ["[0]" debug]
   [abstract
    [monad (.only do)]
    ["?" projection]]
   [control
    ["[0]" scope (.only Scope)]
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [data
    [collection
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" list (.use "[1]#[0]" mix)
      ["?[1]" \\projection]]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" binding]
    ["[0]" name]
    ["[0]" code (.only)
     ["?[1]" \\projection]]]
   ["[0]" macro (.only)
    ["[0]" syntax (.only)
     ["[0]" export]]]
   ["[0]" type (.only)
    ["[0]" nominal]]]]
 ["[0]" /// (.only)
  ["[0]" mixin (.only Mixin)]])

... https://en.wikipedia.org/wiki/Subject-oriented_programming
(nominal.every Bindings
  (Dictionary Name (for_some (_ input output)
                     (Mixin input output)))

  (every .public Value
    (Scope Bindings))

  (.the .public value
    (for_any (_ it)
      (-> (Value it)
          it))
    (///.of (is Bindings
                (nominal.of
                 (dictionary.empty name.hash)))))

  (every .public (Method input output)
    (-> input
        (Value output)))

  (.the (method token default)
    (for_any (_ input output)
      (-> Name (Mixin input (Value output))
          (Method input output)))
    (function (_ input)
      (function (_ bindings)
        (|> bindings
            (nominal.as Bindings)
            (dictionary.value token)
            as_expected
            (is (Maybe (Mixin input output)))
            (type.sharing [input output]
              (is (Mixin input output)
                  default))
            (maybe#each (///.flipped mixin.mixed default))
            (maybe.else default)
            mixin.fixed
            (///.of input)
            (scope.value bindings)))))

  (.the (let' name value _ term)
    (for_any (_ input output term)
      (-> Name (Mixin input (Value output)) (Method input output) (Value term)
          (Value term)))
    (|>> (nominal.as Bindings)
         (dictionary.revised' name mixin.nothing
                              (function (_ old)
                                (if (same? mixin.nothing old)
                                    (as_expected value)
                                    (mixin.mixed (as_expected value) old))))
         (nominal.of Bindings)
         term))

  (.the .public let
    (syntax.macro (_ [bindings (?code.tuple (?.some (?.and ?code.name ?list.any)))
                      term ?list.any])
      (do [! meta.monad]
        [bindings (list.each' ! (function (_ [name value])
                                  (do !
                                    [name (binding.normal name)]
                                    (pure [name value])))
                              bindings)]
        (pure (list (list#mix (function (_ [name value] term)
                                (.let ['name (code.name name)]
                                  (` ((debug.private ..let')
                                      (name (, 'name))
                                      (, value)
                                      (, 'name)
                                      (, term)))))
                              term
                              (list.reversed bindings)))))))

  (.the .public the
    (syntax.macro (_ [[policy name input] (export.with (?code.form (?.and ?code.local ?list.any)))
                      type ?list.any
                      term ?list.any])
      (do meta.monad
        [[here _] module.current
         macro.with_names ['_ 'next]
         .let ['name (code.local name)]]
        (pure (list (` (.the (, policy) (, 'name)
                         (, type)
                         ((debug.private ..method)
                          [(, (code.text here)) (, (code.text name))]
                          (function ((, '_) (, 'next) (, 'name) (, input))
                            (, term))))))))))
  )
