... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Global
                #Local #provenance
                with local global)
   [abstract
    [monad (.only do)]
    ["?" projection]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)
      ["?[1]" \\projection]
      ["[0]" property]]
     ["[0]" stack (.use "[1]#[0]" mix)]]]
   ["[0]" macro (.only)
    ["^" pattern]
    ["[0]" syntax]
    ["[0]" template]]
   [type
    ["[0]" check]]
   ["[0]" meta (.only)
    [extension (.only analysis declaration)]
    ["[0]" binding]
    ["[0]" module]
    ["[0]" name]
    ["[0]" code (.only)
     ["?[1]" \\projection]]]
   [compiler
    [language
     [lux
      ["[0]" phase]
      ["[0]" declaration]
      ["[0]" analysis (.only)
       ["[0]A" module]
       ["[0]" type]]]]]]]
 ["[0]" /// (.only)
  [predicate (.only Predicate)]])

(every .public (Advice value)
  (-> value
      value))

(the .public (before pre)
  (for_any (_ input output)
    (-> (-> input input)
        (Advice (-> input output))))
  (function (_ it input)
    (it (pre input))))

(every .public (Reference name)
  (Record
   [#name name
    #type Type]))

(every .public Local
  (Reference Text))

(every .public Global
  (Reference Name))

(every .public Scenario
  (Variant
   {#Local Local}
   {#Global Global}))

(every .public Join_Point
  (Record
   [#provenance Provenance
    #scenario Scenario]))

(every .public Point_Cut
  (Predicate Join_Point))

(the .public (when_module ?)
  (-> (Predicate Text)
      Point_Cut)
  (|>> (its [#provenance .#module])
       ?))

(template.with [<type> <tag> <name>]
  [(the .public (<name> ?)
     (-> (Predicate <type>)
         Point_Cut)
     (function (_ it)
       (when (its #scenario it)
         {<tag> it}
         (? it)

         _
         false)))]

  [Local #Local when_local]
  [Global #Global when_global]
  )

(the .public (typed? expected)
  (-> Type
      Point_Cut)
  (function (_ it)
    (when (its #scenario it)
      (^.or {#Local [_ it]}
            {#Global [_ it]})
      (check.< expected it))))

(every .public Aspect
  (List [Point_Cut Name]))

(the (without_global [module proper])
  (-> Name
      (analysis.Operation Any))
  (function (_ lux)
    (let [without_global (is (Change (property.List [Bit .Global]))
                             (property.lacks proper))
          without_global (is (Change .Module)
                             (revised .#definitions without_global))
          without_global (is (Change (property.List .Module))
                             (property.revised module without_global))
          without_global (is (Change Lux)
                             (revised .#modules without_global))]
      {.#Right [(without_global lux)
                []]})))

(the (global_reference name)
  (-> Name
      (Meta [Bit .Global]))
  (do meta.monad
    [name (binding.normal name)
     [current_module_name _] module.current
     lux meta.compiler_state]
    (loop (again [[normal_module normal_proper] name])
      (when (is (Maybe [Bit .Global])
                (do maybe.monad
                  [it (|> lux
                          (its .#modules)
                          (property.value normal_module))]
                  (|> it
                      (its .#definitions)
                      (property.value normal_proper))))
        {.#Some [exported? it]}
        (when it
          {.#Definition [type value]}
          (if (or exported?
                  (text.= current_module_name normal_module))
              (in [exported? it])
              (meta.failure (text "Global is not an export: " (name.as_text name))))

          {.#Default [type value]}
          (if (or exported?
                  (text.= current_module_name normal_module))
              (in [exported? it])
              (meta.failure (text "Global is not an export: " (name.as_text name))))

          {.#Alias de_aliased}
          (again de_aliased))

        {.#None it}
        (meta.failure (text "Unknown global: " (name.as_text name)))))))

(the (with_cached_analysis name then)
  (for_any (_ it)
    (-> Name (-> [Code .Global] (analysis.Operation it))
        (analysis.Operation it)))
  (do phase.monad
    ['cache (macro.name "'cache")
     [exported? global] (global_reference name)
     .let [cache_name (code.as_text 'cache)]
     _ (moduleA.define cache_name [exported? global])
     it (then ['cache global])
     [current_module_name _] module.current
     _ (without_global [current_module_name cache_name])]
    (in it)))

(the (with_cached_analysis' name then)
  (for_any (_ anchor expression declaration it)
    (-> Name (-> [Code .Global] (declaration.Operation anchor expression declaration it))
        (declaration.Operation anchor expression declaration it)))
  (do phase.monad
    ['cache (declaration.of_analysis
             (macro.name "'cache"))
     [exported? global] (declaration.of_analysis
                         (global_reference name))
     .let [cache_name (code.as_text 'cache)]
     _ (declaration.of_analysis
        (moduleA.define cache_name [exported? global]))
     it (then ['cache global])
     [current_module_name _] (declaration.of_analysis
                              module.current)
     _ (declaration.of_analysis
        (without_global [current_module_name cache_name]))]
    (in it)))

(the (with_temporary_global [name new] then)
  (for_any (_ it)
    (-> [Name (-> .Global .Global)] (analysis.Operation it)
        (analysis.Operation it)))
  (do phase.monad
    [[exported? old] (global_reference name)
     _ (moduleA.override_definition name [exported? (new old)])
     it then
     _ (moduleA.override_definition name [exported? old])]
    (in it)))

(the (with_temporary_global' [name new] then)
  (for_any (_ anchor expression declaration it)
    (-> [Name (-> .Global .Global)] (declaration.Operation anchor expression declaration it)
        (declaration.Operation anchor expression declaration it)))
  (do phase.monad
    [[exported? old] (declaration.of_analysis
                      (global_reference name))
     _ (declaration.of_analysis
        (moduleA.override_definition name [exported? (new old)]))
     it then
     _ (declaration.of_analysis
        (moduleA.override_definition name [exported? old]))]
    (in it)))

(the (expression type term)
  (-> Type analysis.Term
      Analysis)
  (analysis (_ phase archive [])
    (do phase.monad
      [_ (type.inference type)]
      (in term))))

(the (with_cached_expression [type term] then)
  (for_any (_ it)
    (-> [Type analysis.Term]
        (-> (-> Code (analysis.Operation it))
            (analysis.Operation it))))
  (do phase.monad
    ['cache (macro.name "'cache")
     .let [cache_name (code.as_text 'cache)]
     _ (moduleA.define cache_name [false {.#Definition [Analysis (expression type term)]}])
     it (then 'cache)
     [current_module_name _] module.current
     _ (without_global [current_module_name cache_name])]
    (in it)))

(template.with [<name> <parameters> <scenario> ,extension ,term <advised>]
  [(the (<name> original aspect old)
     (-> Code Aspect .Global
         Analysis)
     (analysis (_ phase archive <parameters>)
       (do [! phase.monad]
         [[type term] (<| type.inferring
                          (with_temporary_global [(name ,extension) (///.constant old)])
                          (phase archive)
                          ,term)
          _ (type.inference type)
          provenance meta.provenance
          .let [join_point [#provenance provenance
                            #scenario {<scenario> [it type]}]]]
         (when (list.one (function (_ [point_cut advice])
                           (if (point_cut join_point)
                               {.#Some advice}
                               {.#None}))
                         aspect)
           {try.#Success advice}
           (<| (with_cached_expression [type term])
               (function (_ analysis))
               (with_temporary_global [(name ,extension) (///.constant old)])
               (phase archive)
               <advised>)
           
           {try.#Failure _}
           (in term)))))]

  [local [it ?code.local]
   #Local
   .local#
   (` (.local# (, (code.local it))))
   (` ((, (code.name advice)) ((, analysis))))]
  [global [quoted_module ?list.any
           it ?code.global]
   #Global
   .global#
   (` (.global# (, quoted_module) (, (code.name it))))
   (let [[advice_module _] advice]
     (` ((.global# (, (code.text advice_module)) (, (code.name advice)))
         ((, analysis)))))]
  )

(the with|analysis
  Analysis
  (analysis (_ phase archive [aspect ?list.any
                              body ?list.any])
    (do [! phase.monad]
      [aspect (meta.eval Aspect aspect)
       .let [aspect (as Aspect aspect)]]
      (list#mix (function (_ [original value] then)
                  (<| (with_cached_analysis original)
                      (function (_ ['original original_global]))
                      (with_temporary_global [original (|>> (value 'original aspect) [Analysis] {.#Definition})])
                      then))
                (phase archive body)
                (list [(name .local#) ..local]
                      [(name .global#) ..global])))))

(the with|declaration
  Declaration
  (declaration (_ phase archive [aspect ?list.any
                                 body ?list.any])
    (do [! phase.monad]
      [aspect (declaration.of_analysis
               (meta.eval Aspect aspect))
       .let [aspect (as Aspect aspect)]]
      (list#mix (function (_ [original value] then)
                  (<| (with_cached_analysis' original)
                      (function (_ ['original original_global]))
                      (with_temporary_global' [original (|>> (value 'original aspect) [Analysis] {.#Definition})])
                      then))
                (phase archive body)
                (list [(name .local#) ..local]
                      [(name .global#) ..global])))))

(the expression?
  (Meta Bit)
  (function (_ lux)
    {.#Right [lux
              (when (its .#expected lux)
                {.#Some _} true
                {.#None _} false)]}))

(the .public with
  (syntax.macro (_ [aspect ?list.any
                    body ?list.any])
    (do meta.monad
      [? ..expression?
       .let [[@ _] (name .._)
             <with> (if ?
                        (` ..with|analysis)
                        (` ..with|declaration))]]
      (in (list (` ((.in_module# (, (code.text @)) (, <with>))
                    (, aspect)
                    (, body))))))))
