... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except the stack)
   [abstract
    [monad (.only do)]
    ["?" projection (.use "[1]#[0]" monad)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" stack (.use "[1]#[0]" functor)]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" code (.only)
     ["?[1]" \\projection (.only Projection)]]]
   ["[0]" macro (.only with_names)
    ["[0]" context]
    ["[0]" syntax (.only)
     ["[0]" export]]]
   [type
    [implicit (.only any)]]]])

(every Polymorphism
  (Record
   [#name Text
    #export_policy Code
    #interface Code
    #method Code]))

(context.def
 [stack]
 [expression]
 [declaration]
 Polymorphism)

(.the .public the
  (syntax.macro (_ [[export_policy name parameters type methods]
                    (export.with
                      (all ?.and
                           ?code.local
                           (?code.tuple (?.many ?code.local))
                           ?code.any
                           (?.many ?code.any)))])
    (<| (do meta.monad
          [[@ _] module.current
           'interface (macro.name name)
           'method (macro.name name)])
        (with_names ['_ 'inputs])
        (..declaration [#name name #export_policy export_policy #interface 'interface #method 'method])
        (let [name (code.local name)
              parameters (list#each code.local parameters)])
        (` (these (every (, export_policy) (, 'interface)
                    (Interface
                     (is (for_any ((, '_) (,* parameters))
                           (, type))
                         (, 'method))))
                  (.the (, export_policy) (, name)
                    (syntax.macro ((, '_) [(, 'inputs) (?.many ?code.any)])
                      (by meta.monad (,' in)
                          (list (` (any (, 'method) ((,' .,*) (, 'inputs))))))))
                  (,* methods))))))

(.the method_declaration
  (Projection [Text (List Code)])
  (?.either (?code.form (?.and ?code.local (?.some ?code.any)))
            (?.and ?code.local (?#in (.list)))))

(.the .public method
  (syntax.macro (_ [[[name inputs] specialization body]
                    (all ?.and
                         ..method_declaration
                         (?code.tuple (?.many ?code.any))
                         ?code.any)])
    (do meta.monad
      [it (context.search (|>> (its #name) (text.= name)) ..stack)
       .let [name (code.local name)]]
      (with_names ['self]
        (in (list (` (.the (, (its #export_policy it)) (, 'self)
                       ((, (its #interface it)) (,* specialization))
                       (implementation
                        (.the ((, (its #method it)) (,* inputs))
                          (, body)))))))))))
