... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... Inspired by;
... "The Different Aspects of Monads and Mixins" by Bruno C. d. S. Oliveira

(.using
 [library
  [lux (.except open)
   [abstract
    [hash (.only Hash)]
    ["[0]" monad]]
   [control
    ["[0]" state (.only State)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" product]
    [collection
     ["[0]" dictionary (.only Dictionary)]]]
   ["[0]" type]]]
 ["[0]" //
  ["[1]" mixin (.only Mixin Recursive)]])

(the .public memoization
  (for_any (_ input output)
    (<| (Mixin input)
        (State (Dictionary input output))
        output))
  (function (_ delegate recur)
    (function (_ input)
      (monad.let [! state.monad]
        [memory state.get]
        (when (dictionary.value input memory)
          {try.#Success output}
          (pure output)

          failure
          (monad.let !
            [output (delegate input)
             _ (state.update (dictionary.has input output))]
            (pure output)))))))

(every .public (Memo input output)
  (<| (Recursive input)
      (State (Dictionary input output))
      output))

(the .public (open memo)
  (for_any (_ input output)
    (type.let [Memory (Dictionary input output)]
      (-> (Memo input output)
          (-> [Memory input]
              [Memory output]))))
  (let [memo (//.fixed (//.mixed ..memoization (//.of_recursive memo)))]
    (function (_ [memory input])
      (|> input memo (state.value memory)))))

(the .public (closed hash memo)
  (for_any (_ input output)
    (-> (Hash input) (Memo input output)
        (-> input
            output)))
  (let [memo (//.fixed (//.mixed ..memoization (//.of_recursive memo)))
        empty (dictionary.empty hash)]
    (|>> memo (state.value empty) product.right)))

(the .public (none hash memo)
  (for_any (_ input output)
    (-> (Hash input) (Memo input output)
        (-> input output)))
  (let [memo (//.fixed (//.of_recursive memo))
        empty (dictionary.empty hash)]
    (|>> memo (state.value empty) product.right)))
