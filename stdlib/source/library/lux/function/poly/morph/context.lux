... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Scope
                with the stack)
   [abstract
    ["?" projection (.use "[1]:[0]" monad)]
    ["[0]" hash]
    ["[0]" monad]]
   [control
    [scope (.only Scope)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" set (.only Set)]
     ["[0]" list (.use "[1]:[0]" functor monoid)
      ["?[1]" \\projection]]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" name]
    ["[0]" static]
    ["[0]" code (.only)
     ["?[1]" \\projection (.only Projection)]
     ["[0]" export]]]
   ["[0]" macro (.only with_names)
    ["[0]" context]
    ["[0]" expansion]
    ["[0]" template]
    ["[0]" syntax]]
   [type
    ["[0]" nominal]]]]
 [////
  ["//" mixin]
  ["[0]" predicate (.only Predicate)]])

(.the .public (altered alteration scope)
  (for_any (_ context value)
    (-> (-> context context) (Scope context value)
        (Scope context value)))
  (|>> alteration
       scope))

(expansion.let [<reification> Name]
  (nominal.every .public Layer
    <reification>

    (syntax.the .public (layer [[export_policy name] (export.with ?code.local)])
      (monad.let meta.monad
        [[@ _] module.current]
        (pure (list (` (.the (, export_policy) (, (code.local name))
                         Layer
                         (<| (as (-> <reification>
                                     Layer))
                             [(, (code.text @))
                              (, (code.text name))])))))))

    (every .public Context
      (Set Layer))

    (.the .public empty
      Context
      (set.empty (by hash.functor each (|>> nominal.as) name.hash)))
    ))

(template.with [<name> <change>]
  [(.the .public (<name> layer scope)
     (for_any (_ value)
       (-> Layer (Scope Context value)
           (Scope Context value)))
     (function (_ context)
       (scope (<change> layer context))))]

  [[with set.has]
   [without set.lacks]])

(.the .public (active? layer)
  (for_any (_ value)
    (-> Layer (Predicate Context)))
  (function (_ context)
    (set.member? context layer)))

(.the .public inactive?
  (for_any (_ value)
    (-> Layer (Predicate Context)))
  (|>> active? predicate.complement))

(every Polymorphism
  (Record
   [:function Text
    :quantifications (List Code)
    :context Code
    :inputs (List Code)
    :output Code
    :default Code
    :export_policy Code
    :scenarios (List Code)]))

(context.the
  [stack]
  [expression]
  [declaration]
  Polymorphism)

(every Signature
  (Record
   [:name Text
    :next Text
    :parameters (List Code)]))

(.the signature
  (Projection Signature)
  (?code.form
   (all ?.and
        ?code.local
        ?code.local
        (?.many ?list.any))))

(.the (quoted it)
  (-> Code Code)
  (` ((,' .,') (, it))))

(syntax.the .public (the [[export_policy signature] (export.with ..signature)
                          quantifications (?code.tuple (?.some ?list.any))
                          context ?list.any
                          inputs (?code.tuple (?.many ?list.any))
                          output ?list.any
                          default ?list.any
                          methods (?.some ?list.any)])
  (<| (with_names ['self '_ 'scenarios 'scenario 'mixin])
      (..declaration [:function (its :name signature)
                      :quantifications quantifications
                      :context context
                      :inputs inputs
                      :output output
                      :default default
                      :export_policy export_policy
                      :scenarios (.list)])
      (let [name (quoted (code.local (its :name signature)))
            next (quoted (code.local (its :next signature)))
            parameters (list:each quoted (its :parameters signature))
            [@ _] (.name .._)

            'self (quoted 'self)])
      (` (these (,* methods)

                (static.expansion
                 (monad.let meta.monad
                   [[(, '_) (, '_) (, '_) (, '_) (, '_) (, '_) (, '_) (, 'scenarios)]
                    (context.search' (|>> product.left
                                          (by text.equality (,' =) (, (code.text (its :name signature)))))
                                     [(.in_module# (, (code.text @)) ..stack)
                                      (name ..stack)])]
                   (by meta.monad (,' pure)
                       (list (` (.the (, export_policy) (, name)
                                  (, (quoted (` (<| (,* quantifications)
                                                    (-> (,* inputs)
                                                        (Scope (, context) (, output)))))))
                                  (let [(, (quoted 'mixin)) (is (, (quoted (` (<| (,* quantifications)
                                                                                  (-> [(,* inputs)] (Scope (, context) (, output)))))))
                                                                (//.fixed (all //.mixed
                                                                               ((,' .,*) (, 'scenarios))
                                                                               (is (, (quoted (` (<| (,* quantifications)
                                                                                                     (//.Mixin [(,* inputs)] (Scope (, context) (, output)))))))
                                                                                   (function ((, 'self) (, next) (, name) [(,* parameters)])
                                                                                     (, (quoted default))))
                                                                               )))]
                                    (, (when (its :parameters signature)
                                         (list _)
                                         (quoted 'mixin)

                                         _
                                         (` (function ((, name) (,* parameters))
                                              ((, (quoted 'mixin)) [(,* parameters)]))))))))))))
                ))))

(syntax.the .public (method [signature ..signature
                             predicate ?list.any
                             body ?list.any])
  (monad.let [! meta.monad]
    [.let [criterion (is (Predicate Polymorphism)
                         (|>> (its :function)
                              (text.= (its :name signature))))]
     it (context.search criterion ..stack)]
    (with_names ['self 'predicate 'parameters 'context '_ 'next 'again]
      (monad.let !
        [_ (context.revised {.:Some criterion}
                            (revised :scenarios (|>> (list:composite (list (` (let [(, 'predicate) (is (<| (,* (its :quantifications it))
                                                                                                           (Predicate (, (its :context it))))
                                                                                                       (, predicate))]
                                                                                (is (<| (,* (its :quantifications it))
                                                                                        (//.Mixin [(,* (its :inputs it))]
                                                                                                  (Scope (, (its :context it))
                                                                                                         (, (its :output it)))))
                                                                                    (function ((, '_) (, 'next) (, 'again) (, 'parameters) (, 'context))
                                                                                      (if ((, 'predicate) (, 'context))
                                                                                          ((, 'self) (, 'next) (, 'again) (, 'parameters) (, 'context))
                                                                                          ((, 'next) (, 'parameters) (, 'context)))))))))))
                            ..stack)]
        (pure (list (` (.the (, (its :export_policy it)) (, 'self)
                         (<| (,* (its :quantifications it))
                             (//.Mixin [(,* (its :inputs it))]
                                       (Scope (, (its :context it))
                                              (, (its :output it)))))
                         (function ((, 'self)
                                    (, (code.local (its :next signature)))
                                    (, (code.local (its :name signature)))
                                    [(,* (its :parameters signature))])
                           (, body))))))))))
