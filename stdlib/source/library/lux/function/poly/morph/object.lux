... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Object-oriented_programming
(.using
 [library
  [lux (.except every as)
   ["[0]" debug]
   [abstract
    ["?" projection]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [function
    ["[0]" mixin (.only Mixin)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)
      ["?[1]" \\projection]]]]
   ["[0]" macro (.only)
    ["[0]" template (.only with_locals)]
    ["[0]" syntax (.only)
     ["[0]" export]]]
   [type
    ["[0]" nominal]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["?[1]" \\projection]]]]])

... https://en.wikipedia.org/wiki/Instance_(computer_science)#Object-oriented_programming
(nominal.every .public (Instance interface state)
  (Record
   [#class (interface state)
    #state state])

  (the .public (object class state)
    (for_any (_ interface state)
      (-> (interface state) state
          (Instance interface state)))
    (nominal.of
     [#class class
      #state state]))

  (the .public class
    (for_any (_ interface state)
      (-> (Instance interface state)
          (interface state)))
    (|>> nominal.as
         (its #class)))

  (the .public state
    (for_any (_ interface state)
      (-> (Instance interface state)
          state))
    (|>> nominal.as
         (its #state)))
  )

(.every .public (Object interface)
  (for_some (_ state)
    (Instance interface state)))

... https://en.wikipedia.org/wiki/Interface_(object-oriented_programming)
(syntax.the .public (every [['export 'name '*parameters 'state]
                            (export.with
                              (?code.form (all ?.and
                                               ?list.any
                                               (?code.tuple (?.some ?list.any))
                                               ?list.any)))
                            '*record (?code.tuple (?.some (?.and ?list.any ?list.any)))])
  (pure (list (` (.every (, 'export) ((, 'name) (,* '*parameters) (, 'state))
                   (Record
                    [(,* (|> '*record
                             (list#each (function (_ ['member 'method])
                                          (list 'member
                                                (` ((, 'method) ((, 'name) (,* '*parameters)) (, 'state))))))
                             list#conjoint))]))))))

(the Complete
  (template.macro (_ input output interface state)
    [(-> [(Instance interface state) input]
         output)]))

(the Partial
  (template.macro (_ input output interface state)
    [(Mixin [(Instance interface state) input]
            output)]))

... https://en.wikipedia.org/wiki/Method_(computer_programming)
(.every .public (Method input output interface state)
  (Record
   [#complete (Complete input output interface state)
    #partial (Partial input output interface state)]))

(the .public (method partial)
  (for_any (_ interface state input output)
    (-> (Partial input output interface state)
        (Method input output interface state)))
  [#complete (mixin.fixed partial)
   #partial partial])

(the .public of
  (with_locals ['it]
    (template.macro (_ <method> <input> <it>)
      [(let ['it <it>]
         ((its [<method> ..#complete] (..class 'it))
          ['it <input>]))])))

... https://en.wikipedia.org/wiki/Method_overriding
(the Revision
  (template.macro (_ inner outer)
    [(-> (Change inner)
         (Change outer))]))

(the (override' revision partial class)
  (for_any (_ interface state input output)
    (-> (Revision (Method input output interface state)
                  (interface state))
        (Partial input output interface state)
        (Change (interface state))))
  (revision (function (_ method)
              (let [partial (mixin.mixed partial (its #partial method))]
                [#complete (mixin.fixed partial)
                 #partial partial]))
            class))

(the .public override
  (template.macro (_ <method> <partial> <class>)
    [((debug.private ..override') (.revised <method>) <partial> <class>)]))

(the .public (as class object)
  (for_any (_ interface state)
    (-> (interface state) (Object interface Any)
        (Maybe (Object interface state))))
  (if (identical? class (..class object))
      {.#Some (as_expected object)}
      {.#None}))
