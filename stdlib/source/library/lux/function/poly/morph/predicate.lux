... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Predicate_dispatch
(.using
 [library
  [lux (.except the stack)
   [abstract
    ["?" projection (.use "[1]#[0]" monad)]
    ["[0]" monad]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)
      ["?[1]" \\projection]]]]
   ["[0]" macro (.only with_names)
    ["[0]" context]
    ["[0]" syntax (.only)
     ["[0]" export]]]
   ["[0]" meta (.only)
    ["[0]" static]
    ["[0]" code (.only)
     ["?[1]" \\projection (.only Projection)]]]]]
 [////
  ["//" mixin]])

(every Polymorphism
  (Record
   [#function Text
    #quantifications (List Code)
    #inputs (List Code)
    #output Code
    #default Code
    #export_policy Code
    #scenarios (List Code)]))

(context.the
  [stack]
  [expression]
  [declaration]
  Polymorphism)

(every Signature
  (Record
   [#name Text
    #next Text
    #parameters (List Code)]))

(.the signature
  (Projection Signature)
  (?code.form
   (all ?.and
        ?code.local
        ?code.local
        (?.many ?list.any))))

(.the (quoted it)
  (-> Code Code)
  (` ((,' .,') (, it))))

(.the .public the
  (syntax.macro (_ [[export_policy signature quantifications inputs output default methods]
                    (export.with
                      (all ?.and
                           ..signature
                           (?code.tuple (?.some ?list.any))
                           (?code.tuple (?.many ?list.any))
                           ?list.any
                           ?list.any
                           (?.some ?list.any)))])
    (<| (with_names ['self '_ 'scenarios 'scenario 'mixin])
        (..declaration [#function (its #name signature)
                        #quantifications quantifications
                        #inputs inputs
                        #output output
                        #default default
                        #export_policy export_policy
                        #scenarios (.list)])
        (let [name (quoted (code.local (its #name signature)))
              next (quoted (code.local (its #next signature)))
              parameters (list#each quoted (its #parameters signature))
              [@ _] (.name .._)

              'self (quoted 'self)])
        (` (these (,* methods)

                  (static.expansion
                   (monad.let meta.monad
                     [[(, '_) (, '_) (, '_) (, '_) (, '_) (, '_) (, 'scenarios)]
                      (context.search' (|>> product.left
                                            (by text.equivalence (,' =) (, (code.text (its #name signature)))))
                                       [(.in_module# (, (code.text @)) ..stack)
                                        (name ..stack)])]
                     (by meta.monad (,' pure)
                         (list (` (.the (, export_policy) (, name)
                                    (, (quoted (` (<| (,* quantifications)
                                                      (-> (,* inputs) (, output))))))
                                    (let [(, (quoted 'mixin)) (is (, (quoted (` (<| (,* quantifications)
                                                                                    (-> [(,* inputs)] (, output))))))
                                                                  (//.fixed (all //.mixed
                                                                                 ((,' .,*) (, 'scenarios))
                                                                                 (is (, (quoted (` (<| (,* quantifications)
                                                                                                       (//.Mixin [(,* inputs)] (, output))))))
                                                                                     (function ((, 'self) (, next) (, name) [(,* parameters)])
                                                                                       (, (quoted default))))
                                                                                 )))]
                                      (, (when (its #parameters signature)
                                           (list _)
                                           (quoted 'mixin)

                                           _
                                           (` (function ((, name) (,* parameters))
                                                ((, (quoted 'mixin)) [(,* parameters)]))))))))))))
                  )))))

(.the .public method
  (syntax.macro (_ [[signature predicate body]
                    (all ?.and
                         ..signature
                         ?list.any
                         ?list.any)])
    (monad.let [! meta.monad]
      [.let [criterion (is (-> Polymorphism Bit)
                           (|>> (its #function)
                                (text.= (its #name signature))))]
       it (context.search criterion ..stack)]
      (with_names ['self]
        (monad.let !
          [_ (context.revised {.#Some criterion}
                              (revised #scenarios (|>> (list#composite (list (` (//.advice (function ((, 'self) [(,* (its #parameters signature))])
                                                                                             (, predicate))
                                                                                           (, 'self)))))))
                              ..stack)]
          (pure (list (` (.the (, (its #export_policy it)) (, 'self)
                           (<| (,* (its #quantifications it))
                               (//.Mixin [(,* (its #inputs it))] (, (its #output it))))
                           (function ((, 'self)
                                      (, (code.local (its #next signature)))
                                      (, (code.local (its #name signature)))
                                      [(,* (its #parameters signature))])
                             (, body)))))))))))
