... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Variadic_function
(.using
 [library
  [lux (.except the)
   [abstract
    [monad (.only do)]
    ["?" projection]]
   [error
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)
      ["?[1]" \\projection]]
     ["[0]" set]]]
   [math
    [number
     ["n" natural]]]
   [macro (.only with_names)
    ["[0]" syntax (.only)
     ["[0]" export]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" name]
    ["[0]" code (.only)
     ["?[1]" \\projection]]]]])

(exception.the .public (duplicate_parameters [definition parameters])
  (Exception [Name (List Text)])
  (exception.report
   (list ["Definition" (name.as_text definition)]
         ["Parameters" (list.as_text %.text parameters)])))

(exception.the .public (must_have_rest_parameter [definition])
  (Exception Name)
  (exception.report
   (list ["Definition" (name.as_text definition)])))

(.the .public the
  (syntax.macro (_ [[exported? [name parameters] type body]
                    (export.with (all ?.and
                                      (?code.form (?.and ?code.local (?.some ?code.local)))
                                      ?list.any
                                      ?list.any))])
    (do meta.monad
      [[here _] module.current]
      (if (n.= (list.size parameters)
               (set.size (set.of_list text.hash parameters)))
          (with_names ['function]
            (when (list.split_at 1 (list.reversed parameters))
              [(list &rest) mandatory]
              (let [mandatory (list#each code.local (list.reversed mandatory))
                    &rest (code.local &rest)]
                (in (list (` (.the (, exported?) ((, 'function) (,* mandatory) (, &rest))
                               (, type)
                               (, body)))
                          (` (.the (, exported?) (, (code.local name))
                               (syntax.macro ((, (code.local name)) [(,* (|> mandatory
                                                                             (list#each (function (_ parameter)
                                                                                          (list parameter (` ?list.any))))
                                                                             list#conjoint))
                                                                     (, &rest) (?.some ?list.any)])
                                 (by meta.monad (,' in)
                                     (list (` ((, 'function)
                                               (,* (list#each (|>> , ((,' .,)) `) mandatory))
                                               (list ((,' .,*) (, &rest)))))))))))))

              _
              (meta.failure (exception.error ..must_have_rest_parameter [[here name]]))))
          (meta.failure (exception.error ..duplicate_parameters [[here name] parameters]))))))
