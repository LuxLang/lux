... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Variadic_function
(.using
 [library
  [lux (.except argument ->)
   [abstract
    ["?" projection]
    [functor
     ["/" effect]]]
   [data
    [collection
     ["[0]" list (.use "[1]:[0]" monad)
      ["?[1]" \\projection]]]]
   [macro
    ["[0]" syntax]
    ["[0]" expansion]]]]
 ["[0]" // (.only)
  [poly
   ["[0]" type]]])

(every (Return return)
  (/.Effect [] return))

(every (Call' Argument
              argument return)
  (all /.Or
       (Return return)
       (Argument argument return)
       ))

(every (->' Call' Argument
            argument return
            it)
  (.-> (Call' Argument argument return it)
       it))

(every (Argument argument return)
  (/.Effect argument (->' Call' Argument argument return)))

(every Call
  (Call' ..Argument))

(every .public ->
  (->' ..Call' ..Argument))

(the (application function argument)
  (for_any (_ argument return it)
    (.-> (-> argument return it)
         (Call argument return it)
         it))
  (function argument))

(expansion.let [:Return (these 0 0b)
                :Argument (these 0 1b)]
  (these (the return
           (for_any (_ argument return)
             (Call argument return
                   return))
           {:Return [[] //.identity]})

         (the (argument it)
           (for_any (_ argument return)
             (.-> argument
                  (Call argument return
                        (-> argument
                            return))))
           {:Argument [[it] //.identity]})

         (the .public (new' return argument)
           (for_any (_ argument return return')
             (.-> (.-> return' return)
                  (.-> argument (Change return'))
                  return'
                  (-> argument
                      return)))
           (function (new total it)
             (when it
               {:Argument [it of]}
               (of (new (argument it total)))

               {:Return [_ of]}
               (of (return total)))))

         (the .public new
           (for_any (_ argument return)
             (.-> (.-> argument (Change return))
                  return
                  (-> argument
                      return)))
           (..new' //.identity))
         ))

(the (partial' argument function)
  (for_any (_ argument return)
    (.-> argument
         (Change (-> argument
                     return))))
  (per ..application
       function
       (..argument argument)))

(syntax.the .public (partial ['function ?list.any
                              '*argument (?.some ?list.any)])
  (pure (list (` (|> (, 'function)
                     (,* (list:each (function (_ 'argument)
                                      (` (..partial' (, 'argument))))
                                    '*argument)))))))

(syntax.the .public (of ['function ?list.any
                         '*argument (?.some ?list.any)])
  (pure (list (` (per ..application
                      (, 'function)
                      (,* (list:each (function (_ 'argument)
                                       (` (..argument (, 'argument))))
                                     '*argument))
                      ..return)))))
