... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Definition Declaration
                let the macro)
   [abstract
    [monad (.only do)]
    ["<>" projection (.use "[1]#[0]" monad)]]
   [error
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)
      ["?[1]" \\projection]]]]
   ["[0]" macro (.only)
    ["[0]" local]
    ["[0]" syntax (.only)
     ["[0]" declaration (.only Declaration)]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]]]]
 ["[0]" //])

(every Mutual
  (Record
   [#declaration Declaration
    #type Code
    #body Code]))

(.the mutual
  (Projection [Declaration Code Code])
  (all <>.and
       declaration.of_code
       ?list.any
       ?list.any
       ))

(.the (mutual_definition context 'context ['name mutual])
  (-> (List Code) Code [Code Mutual]
      Code)
  (` (function ((, 'name) (, 'context))
       (.let [[(,* context)] (, 'context)]
         (function (, (declaration.as_code (its #declaration mutual)))
           (, (its #body mutual)))))))

(.the (macro 'context 'self)
  (-> Code Code
      Macro)
  (<| (as (-> Macro' Macro))
      (function (_ parameters)
        (by meta.monad pure (list (` (((, 'self) (, 'context)) (,* parameters))))))))

(.the .public let
  (syntax.macro (_ [functions (<code>.tuple (<>.some ..mutual))
                    body ?list.any])
    (when functions
      (list)
      (pure (list body))
      
      (list mutual)
      (.let ['name (|> mutual (its [#declaration declaration.#name]) code.local)]
        (pure (list (` (.let [(, 'name) (is (, (its #type mutual))
                                            (function (, (declaration.as_code (its #declaration mutual)))
                                              (, (its #body mutual))))]
                         (, body))))))
      
      _
      (macro.with_names ['context 'output]
        (do [! meta.monad]
          [[here_name _] module.current
           hidden_names (list.each' ! (//.constant (macro.name "mutual_function#"))
                                    functions)
           .let [definitions (list#each (..mutual_definition hidden_names 'context)
                                        (list.zipped_2 hidden_names
                                                       functions))
                 context_types (list#each (function (_ mutual)
                                            (` (-> (, 'context) (, (its #type mutual)))))
                                          functions)
                 user_names (list#each (|>> (its [#declaration declaration.#name]) code.local)
                                       functions)]
           'pop (local.push (list#each (function (_ ['name mutual])
                                         [[here_name (its [#declaration declaration.#name] mutual)]
                                          (..macro 'context 'name)])
                                       (list.zipped_2 hidden_names
                                                      functions)))]
          (pure (list (` (.let [(, 'context) (is (Rec (, 'context)
                                                   [(,* context_types)])
                                                 [(,* definitions)])
                                [(,* user_names)] (.let [[(,* user_names)] (, 'context)]
                                                    [(,* (list#each (function (_ 'name)
                                                                      (` ((, 'name) (, 'context))))
                                                                    user_names))])
                                (, 'output) (, body)]
                           (exec (, 'pop)
                             (, 'output)))))))))))

(every Definition
  (Record
   [#export_policy Code
    #mutual Mutual]))

(.the definition
  (Projection Definition)
  (<code>.tuple (<>.either (<>.and ?list.any ..mutual)
                           (<>.and (<>#pure (` .private)) ..mutual))))

(.the .public the
  (syntax.macro (_ [functions (<>.many ..definition)])
    (when functions
      (list)
      (pure (list))
      
      (list definition)
      (.let [(open "_[0]") definition
             (open "_[0]") _#mutual]
        (pure (list (` (.the (, _#export_policy) (, (declaration.as_code _#declaration))
                         (, _#type)
                         (, _#body))))))
      
      _
      (macro.with_names ['context 'output]
        (do [! meta.monad]
          [[here_name _] module.current
           hidden_names (list.each' ! (//.constant (macro.name "mutual_function#"))
                                    functions)
           .let [definitions (list#each (..mutual_definition hidden_names 'context)
                                        (list.zipped_2 hidden_names
                                                       (list#each (its #mutual) functions)))
                 context_types (list#each (function (_ mutual)
                                            (` (-> (, 'context) (, (its [#mutual #type] mutual)))))
                                          functions)
                 user_names (list#each (|>> (its [#mutual #declaration declaration.#name]) code.local)
                                       functions)]
           'pop (local.push (list#each (function (_ ['name mutual])
                                         [[here_name (its [#mutual #declaration declaration.#name] mutual)]
                                          (..macro 'context 'name)])
                                       (list.zipped_2 hidden_names
                                                      functions)))]
          (pure (list (` (these (.the (, 'context)
                                  [(,* (list#each (its [#mutual #type]) functions))]
                                  (.let [(, 'context) (is (Rec (, 'context)
                                                            [(,* context_types)])
                                                          [(,* definitions)])
                                         [(,* user_names)] (, 'context)]
                                    [(,* (list#each (function (_ 'name)
                                                      (` ((, 'name) (, 'context))))
                                                    user_names))]))
                                (, 'pop)
                                (,* (list#each (function (_ mutual)
                                                 (.let ['name (|> mutual (its [#mutual #declaration declaration.#name]) code.local)]
                                                   (` (.the (, (its #export_policy mutual))
                                                        (, 'name)
                                                        (, (its [#mutual #type] mutual))
                                                        (.let [[(,* user_names)] (, 'context)]
                                                          (, 'name))))))
                                               functions)))))))))))
