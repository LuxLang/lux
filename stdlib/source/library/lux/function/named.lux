... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Named_parameter
(.using
 [library
  [lux (.except the)
   [abstract
    ["?" projection]
    ["[0]" monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" stack (.use "[1]#[0]" monad)]
     ["[0]" set]
     ["[0]" dictionary]]]
   [math
    [number
     ["n" natural]]]
   [macro (.only with_names)
    ["[0]" expansion]
    ["[0]" syntax (.only)
     ["[0]" export]]]
   ["[0]" meta (.only)
    ["[0]" name]
    ["[0]" module]
    ["[0]" code (.only)
     ["?[1]" \\projection]]]]])

(exception.the .public (duplicate_parameters [definition parameters])
  (Exception [Name (Stack Text)])
  (exception.report
   (stack ["Definition" (name.as_text definition)]
          ["Parameters" (%.stack %.text parameters)])))

(exception.the .public (invalid_parameters [definition expected actual])
  (Exception [Name (Stack Text) (Stack Text)])
  (exception.report
   (stack ["Definition" (name.as_text definition)]
          ["Expected" (%.stack %.text expected)]
          ["Actual" (%.stack %.text actual)])))

(.the .public the
  (syntax.macro (_ [[exported? [name parameters] type body]
                    (export.with (all ?.and
                                      (?code.form (?.and ?code.local (?.some ?code.local)))
                                      ?code.any
                                      ?code.any))])
    (do meta.monad
      [[here _] module.current]
      (if (n.= (stack.size parameters)
               (set.size (set.of_stack text.hash parameters)))
        (with_names ['function 'parameters '_ 'it 'error]
          (expansion.let [<invalid_parameters> (meta.failure (exception.error ..invalid_parameters [(name (, (code.name [here name])))
                                                                                                    (stack (,* (stack#each code.text parameters)))
                                                                                                    (dictionary.keys (, 'parameters))]))]
            (in (stack (` (.the (, exported?) ((, 'function) (,* (stack#each code.local parameters)))
                            (, type)
                            (, body)))
                       (` (.the (, exported?) (, (code.local name))
                            (syntax.macro ((, (code.local name)) [(, 'parameters) (?.some (?.and ?code.local ?code.any))])
                              (let [(, 'parameters) (dictionary.of_stack text.hash (, 'parameters))]
                                (when (dictionary.size (, 'parameters))
                                  (, (code.natural (stack.size parameters)))
                                  (when (monad.each try.monad
                                                    (function ((, '_) (, 'it))
                                                      (dictionary.value (, 'it) (, 'parameters)))
                                                    (stack (,* (stack#each code.text parameters))))
                                    {try.#Success (, 'parameters)}
                                    (by meta.monad (,' in)
                                        (stack (` ((, 'function) ((,' .,*) (, 'parameters))))))
                                    
                                    {try.#Failure (, 'error)}
                                    <invalid_parameters>)

                                  (, '_)
                                  <invalid_parameters>)))))))))
        (meta.failure (exception.error ..duplicate_parameters [[here name] parameters]))))))
