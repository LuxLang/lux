... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except and int)
   [fii (.only import)]
   [control
    [functor (.only Functor)]
    [apply (.only Apply)]
    [monad (.only Monad do)]
    ["ex" exception]
    ["[0]" try (.only Try)]
    ["[0]" io (.only IO)]
    [concurrency
     ["[0]" async (.only Async) (.use "[1]#[0]" monad)]]
    [security
     ["!" capability (.only capability)]]]
   [data
    ["[0]" product]
    [text
     ["%" \\format (.only format)]]]
   [world
    [net (.only URL)]]]]
 [//
  ["[0]" sql]]
 ["[0]" /
  ["[1][0]" input (.only Input)]
  ["[1][0]" output (.only Output)]])

(import java/lang/String)

(import java/sql/ResultSet
  (getRow [] "try" int)
  (next [] "try" boolean)
  (close [] "io" "try" void))

(import java/sql/Statement
  ("static" NO_GENERATED_KEYS int)
  ("static" RETURN_GENERATED_KEYS int)
  (getGeneratedKeys [] "try" java/sql/ResultSet)
  (close [] "io" "try" void))

(import java/sql/PreparedStatement
  (executeUpdate [] "io" "try" int)
  (executeQuery [] "io" "try" java/sql/ResultSet))

(import java/sql/Connection
  (prepareStatement [java/lang/String int] "try" java/sql/PreparedStatement)
  (isValid [int] "try" boolean)
  (close [] "io" "try" void))

(import java/sql/DriverManager
  ("static" getConnection [java/lang/String java/lang/String java/lang/String] "io" "try" java/sql/Connection))

(type .public Credentials
  (Record
   [#url      URL
    #user     Text
    #password Text]))

(type .public ID
  Int)

(type .public (Statement input)
  (Record
   [#sql sql.Statement
    #input (Input input)
    #value input]))

(with_template [<name> <forge> <output>]
  [(capability .public (<name> ! i)
     (<forge> (Statement i) (! (Try <output>))))]

  [Can_Execute can_execute Nat]
  [Can_Insert  can_insert  (List ID)]
  )

(capability .public (Can_Query ! i o)
  (can_query [(Statement i) (Output o)] (! (Try (List o)))))

(capability .public (Can_Close !)
  (can_close Any (! (Try Any))))

(type .public (DB !)
  (Interface
   (is (Can_Execute !)
       execute)
   (is (Can_Insert !)
       insert)
   (is (Can_Query !)
       query)
   (is (Can_Close !)
       close)))

(def (with_statement statement conn action)
  (All (_ i a)
    (-> (Statement i) java/sql/Connection
        (-> java/sql/PreparedStatement (IO (Try a)))
        (IO (Try a))))
  (do (try.with io.monad)
    [prepared (io.io (java/sql/Connection::prepareStatement (sql.sql (its #sql statement))
                                                            (java/sql/Statement::RETURN_GENERATED_KEYS)
                                                            conn))
     _ (io.io ((its #input statement) (its #value statement) [1 prepared]))
     result (action prepared)
     _ (java/sql/Statement::close prepared)]
    (in result)))

(def .public (async db)
  (-> (DB IO) (DB Async))
  (`` (implementation
       (,, (with_template [<name> <forge>]
             [(def <name> (<forge> (|>> (!.use (of db <name>)) async.future)))]
             
             [execute can_execute]
             [insert can_insert]
             [close can_close]
             [query can_query])))))

(def .public (connect creds)
  (-> Credentials (IO (Try (DB IO))))
  (do (try.with io.monad)
    [connection (java/sql/DriverManager::getConnection (its #url creds)
                                                       (its #user creds)
                                                       (its #password creds))]
    (in (is (DB IO)
            (implementation
             (def execute
               (..can_execute
                (function (execute statement)
                  (with_statement statement connection
                    (function (_ prepared)
                      (do (try.with io.monad)
                        [row_count (java/sql/PreparedStatement::executeUpdate prepared)]
                        (in (.nat row_count))))))))

             (def insert
               (..can_insert
                (function (insert statement)
                  (with_statement statement connection
                    (function (_ prepared)
                      (do (try.with io.monad)
                        [_ (java/sql/PreparedStatement::executeUpdate prepared)
                         result_set (io.io (java/sql/Statement::getGeneratedKeys prepared))]
                        (/output.rows /output.long result_set)))))))

             (def close
               (..can_close
                (function (close _)
                  (java/sql/Connection::close connection))))

             (def query
               (..can_query
                (function (query [statement output])
                  (with_statement statement connection
                    (function (_ prepared)
                      (do (try.with io.monad)
                        [result_set (java/sql/PreparedStatement::executeQuery prepared)]
                        (/output.rows output result_set)))))))
             )))))

(def .public (with_db creds action)
  (All (_ a)
    (-> Credentials
        (-> (DB IO) (IO (Try a)))
        (IO (Try a))))
  (do (try.with io.monad)
    [db (..connect creds)
     result (action db)
     _ (!.use (of db close) [])]
    (in result)))

(def .public (with_async_db creds action)
  (All (_ a)
    (-> Credentials
        (-> (DB Async) (Async (Try a)))
        (Async (Try a))))
  (do (try.with async.monad)
    [db (async.future (..connect creds))
     result (action (..async db))
     _ (async#in (io.run! (!.use (of db close) [])))]
    (in result)))
