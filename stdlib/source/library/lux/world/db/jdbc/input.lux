... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except and int)
   [ffi (.only import)]
   [control
    [functor (.only Contravariant)]
    [monad (.only Monad do)]
    ["[0]" try (.only Try)]
    ["[0]" io (.only IO)]]
   [world
    [binary (.only Binary)]
    [time
     ["[0]" instant (.only Instant)]]]]])

(import java/lang/String)

(with_template [<class>]
  [(import <class>
     (new [long]))]

  [java/sql/Date] [java/sql/Time] [java/sql/Timestamp]
  )

(`` (import java/sql/PreparedStatement
      (,, (with_template [<name> <type>]
            [(<name> [int <type>] "try" void)]

            [setBoolean boolean]

            [setByte byte]
            [setShort short]
            [setInt int]
            [setLong long]
            
            [setFloat float]
            [setDouble double]

            [setString java/lang/String]
            [setBytes [byte]]

            [setDate java/sql/Date]
            [setTime java/sql/Time]
            [setTimestamp java/sql/Timestamp]
            ))))

(every .public (Input a)
  (-> a [Nat java/sql/PreparedStatement]
      (Try [Nat java/sql/PreparedStatement])))

(the .public contravariant
  (Contravariant Input)
  (implementation
   (the (each f fb)
     (function (fa value circumstance)
       (fb (f value) circumstance)))))

(the .public (and pre post)
  (All (_ l r) (-> (Input l) (Input r) (Input [l r])))
  (function (_ [left right] context)
    (do try.monad
      [context (pre left context)]
      (post right context))))

(the .public (fail error)
  (All (_ a) (-> Text (Input a)))
  (function (_ value [idx context])
    {try.#Failure error}))

(the .public empty
  (Input Any)
  (function (_ value context)
    {try.#Success context}))

(with_template [<function> <type> <setter>]
  [(the .public <function>
     (Input <type>)
     (function (_ value [idx statement])
       (do try.monad
         [_ (<setter> (.int idx) value statement)]
         (in [(.++ idx) statement]))))]

  [boolean Bit java/sql/PreparedStatement::setBoolean]

  [byte   Int    java/sql/PreparedStatement::setByte]
  [short  Int    java/sql/PreparedStatement::setShort]
  [int    Int    java/sql/PreparedStatement::setInt]
  [long   Int    java/sql/PreparedStatement::setLong]

  [float  Frac   java/sql/PreparedStatement::setFloat]
  [double Frac   java/sql/PreparedStatement::setDouble]

  [string Text   java/sql/PreparedStatement::setString]
  [bytes  Binary java/sql/PreparedStatement::setBytes]
  )

(with_template [<function> <setter> <constructor>]
  [(the .public <function>
     (Input Instant)
     (function (_ value [idx statement])
       (do try.monad
         [_ (<setter> (.int idx)
                      (<constructor> (instant.millis value))
                      statement)]
         (in [(.++ idx) statement]))))]

  [date       java/sql/PreparedStatement::setDate      java/sql/Date::new]
  [time       java/sql/PreparedStatement::setTime      java/sql/Time::new]
  [time_stamp java/sql/PreparedStatement::setTimestamp java/sql/Timestamp::new]
  )
