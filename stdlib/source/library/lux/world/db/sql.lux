... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Source Definition
                function and or not int)
   [control
    [monad (.only do)]]
   [data
    [number
     ["i" int]]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [meta
    [macro
     ["[0]" template]]]
   ["[0]" type (.only)
    ["[0]" nominal]]]])

(the parenthesize
  (-> Text Text)
  (text.enclosed ["(" ")"]))

... Kind
(with_template [<declaration>]
  [(nominal.every .public <declaration> Any)]

  [Literal']
  [Column']
  [Placeholder']
  [(Value' kind)]
  
  [Function']
  
  [Condition']

  [Index']
  
  [Table']
  [View']
  [Source']
  [DB']
  
  [No_Limit] [With_Limit]
  [No_Offset] [With_Offset]
  [Order']
  [No_Order] [With_Order]
  [No_Group] [With_Group]
  [(Query' order group limit offset)]

  [Command']

  [No_Where] [With_Where] [Without_Where]
  [No_Having] [With_Having] [Without_Having]
  [(Action' where having kind)]
  
  [(Schema' kind)]
  [Definition']
  [(Statement' kind)]
  )

(every .public Alias
  Text)

(the .public no_alias Alias "")

(nominal.every .public (SQL kind)
  Text

  ... SQL
  (with_template [<declaration> <kind>]
    [(every .public <declaration>
       (SQL <kind>))]

    [Literal (Value' Literal')]
    [Column (Value' Column')]
    [Placeholder (Value' Placeholder')]
    [Value (Value' Any)]
    
    [Function Function']
    [Condition Condition']

    [Index Index']
    
    [Table Table']
    [View View']
    [Source Source']
    [DB DB']
    
    [Order Order']

    [(Schema kind) (Schema' kind)]
    
    [(Query where having order group limit offset) (Statement' (Action' where having (Query' order group limit offset)))]
    [(Command where having) (Statement' (Action' where having Command'))]
    [(Action where having kind) (Statement' (Action' where having kind))]

    [Definition (Statement' Definition')]
    [Statement (Statement' Any)]
    )

  (the Base_Query
    (type (Query No_Where No_Having No_Order No_Group No_Limit No_Offset)))
  
  (the Any_Query
    (type (Query Any Any Any Any Any Any)))

  ... Only use this function for debugging purposes.
  ... Do not use this function to actually execute SQL code.
  (the .public read
    (-> (SQL Any) Text)
    (|>> nominal.representation))

  (the .public (sql action)
    (-> Statement Text)
    (format (nominal.representation action) ";"))

  (the listing
    (-> (List (SQL Any)) Text)
    (|>> (list#each (|>> nominal.representation))
         (text.interposed ", ")))

  ... Value
  (the .public ? Placeholder (nominal.abstraction "?"))

  (the literal
    (-> Text Literal)
    (|>> nominal.abstraction))

  (the .public null Literal (..literal "NULL"))

  (the .public (int value)
    (-> Int Literal)
    (..literal (if (i.< +0 value)
                 (%.int value)
                 (%.nat (.nat value)))))

  (the .public function
    (-> Text Function)
    (|>> nominal.abstraction))

  (the .public (call function parameters)
    (-> Function (List Value) Value)
    (nominal.abstraction
     (format (nominal.representation function)
             (..parenthesize (..listing parameters)))))

  ... Condition
  (with_template [<name> <sql_op>]
    [(the .public (<name> reference it)
       (-> Value Value Condition)
       (nominal.abstraction
        (..parenthesize
         (format (nominal.representation it)
                 " " <sql_op> " "
                 (nominal.representation reference)))))]

    [=      "="]
    [<>     "<>"]
    [is?    "IS"]
    [>      ">"]
    [>=     ">="]
    [<      "<"]
    [<=     "<="]
    [like?  "LIKE"]
    [ilike? "ILIKE"]
    )

  (the .public (between from to it)
    (-> Value Value Value Condition)
    (nominal.abstraction
     (..parenthesize
      (format (nominal.representation it)
              " BETWEEN " (nominal.representation from)
              " AND " (nominal.representation to)))))

  (the .public (in options value)
    (-> (List Value) Value Condition)
    (nominal.abstraction
     (format (nominal.representation value)
             " IN "
             (..parenthesize (listing options)))))

  (with_template [<func_name> <sql_op>]
    [(the .public (<func_name> left right)
       (-> Condition Condition Condition)
       (nominal.abstraction
        (format (..parenthesize (nominal.representation left))
                " " <sql_op> " "
                (..parenthesize (nominal.representation right)))))]

    [and "AND"]
    [or  "OR"]
    )

  (with_template [<name> <type> <sql>]
    [(the .public <name>
       (-> <type> Condition)
       (|>> nominal.representation
            ..parenthesize
            (format <sql> " ")
            nominal.abstraction))]

    [not    Condition "NOT"]
    [exists Any_Query "EXISTS"]
    )

  ... Query
  (with_template [<name> <type> <decoration>]
    [(the .public <name>
       (-> <type> Source)
       (|>> nominal.representation
            <decoration>
            nominal.abstraction))]

    [from_table Table     (<|)]
    [from_view  View      (<|)]
    [from_query Any_Query ..parenthesize]
    )

  (with_template [<func_name> <op>]
    [(the .public (<func_name> columns source)
       (-> (List [Column Alias]) Source Base_Query)
       (nominal.abstraction
        (format <op>
                " "
                (when columns
                  {.#End}
                  "*"
                  
                  _
                  (|> columns
                      (list#each (.function (_ [column alias])
                                   (if (text#= ..no_alias alias)
                                     (nominal.representation column)
                                     (format (nominal.representation column) " AS " alias))))
                      (text.interposed ", ")))
                " FROM " (nominal.representation source))))]


    [select          "SELECT"]
    [select_distinct "SELECT DISTINCT"]
    )

  (with_template [<name> <join_text>]
    [(the .public (<name> table condition prev)
       (-> Table Condition Base_Query Base_Query)
       (nominal.abstraction
        (format (nominal.representation prev)
                " " <join_text> " "
                (nominal.representation table)
                " ON " (nominal.representation condition))))]

    [inner_join      "INNER JOIN"]
    [left_join       "LEFT JOIN"]
    [right_join      "RIGHT JOIN"]
    [full_outer_join "FULL OUTER JOIN"]
    )

  (with_template [<function> <sql_op>]
    [(the .public (<function> left right)
       (-> Any_Query Any_Query (Query Without_Where Without_Having No_Order No_Group No_Limit No_Offset))
       (nominal.abstraction
        (format (nominal.representation left)
                " " <sql_op> " "
                (nominal.representation right))))]

    [union     "UNION"]
    [union_all "UNION ALL"]
    [intersect "INTERSECT"]
    )

  (with_template [<name> <sql> <variables> <input> <output>]
    [(`` (the .public (<name> value query)
           (All (_ (,, (template.spliced <variables>)))
             (-> Nat <input> <output>))
           (nominal.abstraction
            (format (nominal.representation query)
                    " " <sql> " "
                    (%.nat value)))))]

    [limit "LIMIT" [where having order group offset]
     (Query where having order group No_Limit offset)
     (Query where having order group With_Limit offset)]

    [offset "OFFSET" [where having order group limit]
     (Query where having order group limit No_Offset)
     (Query where having order group limit With_Offset)]
    )

  (with_template [<name> <sql>]
    [(the .public <name>
       Order
       (nominal.abstraction <sql>))]

    [ascending  "ASC"]
    [descending "DESC"]
    )

  (the .public (order_by pairs query)
    (All (_ where having group limit offset)
      (-> (List [Value Order])
          (Query where having No_Order group limit offset)
          (Query where having With_Order group limit offset)))
    (when pairs
      {.#End}
      (|> query
          nominal.representation
          nominal.abstraction)
      
      _
      (nominal.abstraction
       (format (nominal.representation query)
               " ORDER BY "
               (|> pairs
                   (list#each (.function (_ [value order])
                                (format (nominal.representation value) " " (nominal.representation order))))
                   (text.interposed ", "))))))

  (the .public (group_by pairs query)
    (All (_ where having order limit offset)
      (-> (List Value)
          (Query where having order No_Group limit offset)
          (Query where having order With_Group limit offset)))
    (when pairs
      {.#End}
      (|> query nominal.representation nominal.abstraction)
      
      _
      (nominal.abstraction
       (format (nominal.representation query)
               " GROUP BY "
               (..listing pairs)))))

  ... Command
  (the .public (insert table columns rows)
    (-> Table (List Column) (List (List Value)) (Command Without_Where Without_Having))
    (nominal.abstraction
     (format "INSERT INTO " (nominal.representation table) " "
             (..parenthesize (..listing columns))
             " VALUES "
             (|> rows
                 (list#each (|>> ..listing ..parenthesize))
                 (text.interposed ", "))
             )))

  (the .public (update table pairs)
    (-> Table (List [Column Value]) (Command No_Where No_Having))
    (nominal.abstraction
     (format "UPDATE " (nominal.representation table)
             (when pairs
               {.#End}
               ""
               
               _
               (format " SET " (|> pairs
                                   (list#each (.function (_ [column value])
                                                (format (nominal.representation column) "=" (nominal.representation value))))
                                   (text.interposed ", ")))))))

  (the .public delete
    (-> Table (Command No_Where No_Having))
    (|>> nominal.representation
         (format "DELETE FROM ")
         nominal.abstraction))

  ... Action
  (the .public (where condition prev)
    (All (_ kind having)
      (-> Condition (Action No_Where having kind) (Action With_Where having kind)))
    (nominal.abstraction
     (format (nominal.representation prev)
             " WHERE "
             (nominal.representation condition))))

  (the .public (having condition prev)
    (All (_ where kind)
      (-> Condition (Action where No_Having kind) (Action where With_Having kind)))
    (nominal.abstraction
     (format (nominal.representation prev)
             " HAVING "
             (nominal.representation condition))))

  ... Schema
  (the .public type
    (-> Text (Schema Value))
    (|>> nominal.abstraction))
  
  (with_template [<name> <attr>]
    [(the .public (<name> attr)
       (-> (Schema Value) (Schema Value))
       (nominal.abstraction
        (format (nominal.representation attr) " " <attr>)))]

    [unique   "UNIQUE"]
    [not_null "NOT NULL"]
    [stored   "STORED"]
    )

  (the .public (default value attr)
    (-> Value (Schema Value) (Schema Value))
    (nominal.abstraction
     (format (nominal.representation attr) " DEFAULT " (nominal.representation value))))

  (the .public (define_column name type)
    (-> Column (Schema Value) (Schema Column))
    (nominal.abstraction
     (format (nominal.representation name) " " (nominal.representation type))))

  (the .public (auto_increment offset column)
    (-> Int (Schema Column) (Schema Column))
    (nominal.abstraction
     (format (nominal.representation column) " AUTO_INCREMENT=" (nominal.representation (..int offset)))))

  (the .public (create_table or_replace? table columns)
    (-> Bit Table (List (Schema Column)) Definition)
    (let [command (if or_replace?
                    "CREATE OR REPLACE TABLE"
                    "CREATE TABLE IF NOT EXISTS")]
      (nominal.abstraction
       (format command " " (nominal.representation table)
               (..parenthesize (..listing columns))))))

  (the .public (create_table_as table query)
    (-> Table Any_Query Definition)
    (nominal.abstraction
     (format "CREATE TABLE " (nominal.representation table) " AS " (nominal.representation query))))

  (with_template [<name> <sql>]
    [(the .public (<name> table)
       (-> Table Definition)
       (nominal.abstraction
        (format <sql> " TABLE " (nominal.representation table))))]
    
    [drop     "DROP"]
    [truncate "TRUNCATE"]
    )

  (the .public (add_column table column)
    (-> Table (Schema Column) Definition)
    (nominal.abstraction
     (format "ALTER TABLE " (nominal.representation table) " ADD " (nominal.representation column))))

  (the .public (drop_column table column)
    (-> Table Column Definition)
    (nominal.abstraction
     (format "ALTER TABLE " (nominal.representation table) " DROP COLUMN " (nominal.representation column))))

  (with_template [<name> <type>]
    [(the .public (<name> name)
       (-> Text <type>)
       (nominal.abstraction name))]

    [column Column]
    [table Table]
    [view View]
    [index Index]
    [db DB]
    )

  (with_template [<name> <type> <sql>]
    [(the .public <name>
       (-> <type> Definition)
       (|>> nominal.representation
            (format <sql> " ")
            nominal.abstraction))]

    [create_db  DB    "CREATE DATABASE"]
    [drop_db    DB    "DROP DATABASE"]
    [drop_view  View  "DROP VIEW"]
    )

  (with_template [<name> <sql>]
    [(the .public (<name> view query)
       (-> View Any_Query Definition)
       (nominal.abstraction
        (format <sql> " " (nominal.representation view) " AS " (nominal.representation query))))]

    [create_view            "CREATE VIEW"]
    [create_or_replace_view "CREATE OR REPLACE VIEW"]
    )

  (the .public (create_index index table unique? columns)
    (-> Index Table Bit (List Column) Definition)
    (nominal.abstraction
     (format "CREATE " (if unique? "UNIQUE" "") " INDEX " (nominal.representation index)
             " ON " (nominal.representation table) " " (..parenthesize (..listing columns)))))

  (the .public (with alias query body)
    (All (_ where having order group limit offset)
      (-> Table Any_Query
          (Query where having order group limit offset)
          (Query where having order group limit offset)))
    (nominal.abstraction
     (format "WITH " (nominal.representation alias)
             " AS " (..parenthesize (nominal.representation query))
             " " (nominal.representation body))))
  )
