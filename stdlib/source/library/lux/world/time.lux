... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]
    [enum (.only Enum)]
    [codec (.only Codec)]
    [monad (.only Monad do)]]
   [control
    ["<>" parser (.only)]
    ["[0]" pipe]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)
     ["<[1]>" \\parser (.only Parser)]]]
   [math
    [number
     ["n" nat (.use "[1]#[0]" decimal)]]]
   [meta
    [type
     ["[0]" nominal]]]]]
 [/
  ["[0]" duration (.only Duration)]])

(with_template [<name> <singular> <plural>]
  [(the .public <name>
     Nat
     (.nat (duration.ticks <singular> <plural>)))]

  [milli_seconds duration.milli_second duration.second]
  [seconds duration.second duration.minute]
  [minutes duration.minute duration.hour]
  [hours duration.hour duration.day]
  )

(the limit
  Nat
  (.nat (duration.millis duration.day)))

(exception.the .public (time_exceeds_a_day time)
  (Exception Nat)
  (exception.report
   (list ["Time (in milli-seconds)" (n#encoded time)]
         ["Maximum (in milli-seconds)" (n#encoded (-- limit))])))

(the separator ":")

(the section_parser
  (Parser Nat)
  (<>.codec n.decimal (<text>.exactly 2 <text>.decimal)))

(the millis_parser
  (Parser Nat)
  (<>.either (|> (<text>.at_most 3 <text>.decimal)
                 (<>.codec n.decimal)
                 (<>.after (<text>.this ".")))
             (of <>.monad in 0)))

(with_template [<maximum> <parser> <exception> <sub_parser>]
  [(exception.the .public (<exception> value)
     (Exception Nat)
     (exception.report
      (list ["Value" (n#encoded value)]
            ["Minimum" (n#encoded 0)]
            ["Maximum" (n#encoded (-- <maximum>))])))

   (the <parser>
     (Parser Nat)
     (do <>.monad
       [value <sub_parser>]
       (if (n.< <maximum> value)
         (in value)
         (<>.of_try (exception.except <exception> [value])))))]

  [..hours hour_parser invalid_hour ..section_parser]
  [..minutes minute_parser invalid_minute ..section_parser]
  [..seconds second_parser invalid_second ..section_parser]
  )

(nominal.every .public Time
  Nat

  (the .public midnight
    Time
    (nominal.abstraction 0))
  
  (the .public (of_millis milli_seconds)
    (-> Nat (Try Time))
    (if (n.< ..limit milli_seconds)
      {try.#Success (nominal.abstraction milli_seconds)}
      (exception.except ..time_exceeds_a_day [milli_seconds])))

  (the .public millis
    (-> Time Nat)
    (|>> nominal.representation))

  (the .public equivalence
    (Equivalence Time)
    (implementation
     (the (= param subject)
       (n.= (nominal.representation param)
            (nominal.representation subject)))))

  (the .public order
    (Order Time)
    (implementation
     (the equivalence ..equivalence)

     (the (< param subject)
       (n.< (nominal.representation param)
            (nominal.representation subject)))))

  (`` (the .public enum
        (Enum Time)
        (implementation
         (the order ..order)

         (the succ
           (|>> nominal.representation
                ++
                (n.% ..limit)
                nominal.abstraction))

         (the pred
           (|>> nominal.representation
                (pipe.when
                  0 ..limit
                  millis millis)
                --
                nominal.abstraction)))))

  (the .public parser
    (Parser Time)
    (let [millis (is (-> Duration Nat)
                     (|>> duration.millis .nat))
          hour (millis duration.hour)
          minute (millis duration.minute)
          second (millis duration.second)
          millis (millis duration.milli_second)]
      (do [! <>.monad]
        [utc_hour ..hour_parser
         _ (<text>.this ..separator)
         utc_minute ..minute_parser
         _ (<text>.this ..separator)
         utc_second ..second_parser
         utc_millis ..millis_parser]
        (in (nominal.abstraction
             (all n.+
                  (n.* utc_hour hour)
                  (n.* utc_minute minute)
                  (n.* utc_second second)
                  (n.* utc_millis millis)))))))
  )

(the (positive space duration)
  (-> Duration Duration Duration)
  (if (duration.negative? duration)
    (duration.composite space duration)
    duration))

(the (millis_format millis)
  (-> Nat Text)
  (cond (n.= 0 millis)   ""
        (n.< 10 millis)  (all text#composite ".00" (n#encoded millis))
        (n.< 100 millis) (all text#composite ".0" (n#encoded millis))
        ... (n.< 1,000 millis)
        (all text#composite "." (n#encoded millis))))

(every .public Clock
  (Record
   [#hour Nat
    #minute Nat
    #second Nat
    #milli_second Nat]))

(the .public (clock time)
  (-> Time Clock)
  (let [time (|> time ..millis .int duration.of_millis)
        [hours time] [(duration.ticks duration.hour time) (duration.framed duration.hour time)]
        [minutes time] [(duration.ticks duration.minute time) (duration.framed duration.minute time)]
        [seconds millis] [(duration.ticks duration.second time) (duration.framed duration.second time)]]
    [#hour (.nat hours)
     #minute (.nat minutes)
     #second (.nat seconds)
     #milli_second (|> millis
                       (..positive duration.second)
                       duration.millis
                       .nat)]))

(the .public (time clock)
  (-> Clock (Try Time))
  (|> (all duration.composite
           (duration.up (its #hour clock) duration.hour)
           (duration.up (its #minute clock) duration.minute)
           (duration.up (its #second clock) duration.second)
           (duration.of_millis (.int (its #milli_second clock))))
      duration.millis
      .nat
      ..of_millis))

(the (format time)
  (-> Time Text)
  (let [(open "_[0]") (..clock time)
        segment (of (n.padded 2 n.decimal) encoded)]
    (all text#composite
         (segment _#hour)
         ..separator (segment _#minute)
         ..separator (segment _#second)
         (..millis_format _#milli_second)
         )))

(the .public codec
  (Codec Text Time)
  (implementation
   (the encoded ..format)
   (the decoded (<text>.value ..parser))))
