... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    ["[0]" order (.only Order)]]
   [data
    [text
     ["%" \\format]]]
   [math
    [number
     ["n" nat]
     ["i" int]]]
   [meta
    [type
     ["[0]" nominal]]]]]
 [///
  ["[0]" money (.only Money)
   ["[0]" currency (.only Currency)]]])

(type .public (Price $)
  (Money $))

(def .public (free $)
  (All (_ $)
    (-> (Currency $)
        (Price $)))
  (money.money $ 0))

(def .public (maximum $)
  (All (_ $)
    (-> (Currency $)
        (Price $)))
  (money.money $ (of n.interval top)))

... https://en.wikipedia.org/wiki/Price_action_trading
(nominal.def .public (Action $)
  (Record
   [#currency (Currency $)
    #movement Int])

  (def .public (none $)
    (All (_ $)
      (-> (Currency $)
          (Action $)))
    (nominal.abstraction
     [#currency $
      #movement +0]))

  (def .public (action from to)
    (All (_ $)
      (-> (Price $) (Price $)
          (Action $)))
    (nominal.abstraction
     [#currency (money.currency from)
      #movement (.int (n.- (money.amount from)
                           (money.amount to)))]))

  (with_template [<*> <name>]
    [(def .public (<name> currency it)
       (All (_ $)
         (-> (Currency $) Int
             (Action $)))
       (nominal.abstraction
        [#currency currency
         #movement (<*> (.int (currency.sub_divisions currency))
                        it)]))]

    [i.* of_units]
    [i.% of_sub_units]
    )

  (with_template [<name> <slot> <type>]
    [(def .public <name>
       (All (_ $)
         (-> (Action $)
             <type>))
       (|>> nominal.representation
            (its <slot>)))]

    [currency #currency (Currency $)]
    [movement #movement Int]
    )

  (def .public order
    (All (_ $)
      (Order (Action $)))
    (of order.functor each
        ..movement
        i.order))

  (def .public <
    (All (_ $)
      (-> (Action $) (Action $)
          Bit))
    (of ..order <))

  (with_template [<name> <order>]
    [(def .public <name>
       (All (_ $)
         (-> (Action $) (Action $)
             Bit))
       (<order> order))]

    [<= order.<=]
    [> order.>]
    [>= order.>=]
    )

  (def .public equivalence
    (All (_ $)
      (Equivalence (Action $)))
    (of ..order equivalence))

  (def .public =
    (All (_ $)
      (-> (Action $) (Action $)
          Bit))
    (of ..equivalence =))

  (with_template [<p> <i>]
    [(def .public (<p> parameter subject)
       (All (_ $)
         (-> (Action $) (Action $)
             (Action $)))
       (let [parameter (nominal.representation parameter)
             subject (nominal.representation subject)]
         (nominal.abstraction
          [#currency (its #currency subject)
           #movement (<i> (its #movement parameter)
                          (its #movement subject))])))]

    [+ i.+]
    [- i.-]
    )

  (def too_negative
    (of i.interval bottom))

  (def .public (format it)
    (All (_ $)
      (%.Format (Action $)))
    (when (..movement it)
      ..too_negative
      (|> ..too_negative
          ++
          i.abs
          .nat
          ++
          (money.money (..currency it))
          money.format
          (%.format "-"))

      amount
      (let [-|+ (if (i.< +0 amount)
                  "-"
                  "+")]
        (|> (.nat (i.abs amount))
            (money.money (..currency it))
            money.format
            (%.format -|+)))))
  )

(with_template [<order> <name>]
  [(def .public (<name> left right)
     (All (_ $)
       (-> (Action $) (Action $)
           (Action $)))
     (if (<order> (..movement left)
                  (..movement right))
       right
       left))]

  [i.< min]
  [i.> max]
  )

(with_template [<*> <name>]
  [(def .public (<name> it)
     (All (_ $)
       (-> (Action $)
           Int))
     (<*> (.int (currency.sub_divisions (..currency it)))
          (..movement it)))]

  [i./ units]
  [i.% sub_units]
  )
