... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except open)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    [text (.only Injection)
     ["%" \\injection]]]
   [math
    [number
     ["n" nat]
     ["i" int]]]
   [meta
    [macro
     ["[0]" template]]]]]
 [//
  ["[0]" volume (.only Volume)]
  [//
   ["[0]" money (.only Money)
    [currency (.only Currency)]]
   [market
    [price (.only Price)]]]])

(every .public (Session $)
  (Record
   [#low (Price $)
    #to_bottom Nat
    #real_body Int
    #to_high Nat
    #volume (Volume $)]))

(the .public currency
  (for_any (_ $)
    (-> (Session $)
        (Currency $)))
  (|>> (its #low)
       money.currency))

... https://en.wikipedia.org/wiki/Open-high-low-close_chart
(the .public low
  (for_any (_ $)
    (-> (Session $)
        (Price $)))
  (its #low))

(the .public (bottom it)
  (for_any (_ $)
    (-> (Session $)
        (Price $)))
  (money.+ (..low it)
           (money.money (..currency it)
                        (its #to_bottom it))))

(the .public (top it)
  (for_any (_ $)
    (-> (Session $)
        (Price $)))
  (let [real_body (its #real_body it)]
    (money.+ (..bottom it)
             (money.money (..currency it)
                          (.nat (if (i.< +0 real_body)
                                  (i.opposite real_body)
                                  real_body))))))

(the .public (open it)
  (for_any (_ $)
    (-> (Session $)
        (Price $)))
  (if (i.< +0 (its #real_body it))
    (..top it)
    (..bottom it)))

(the .public (close it)
  (for_any (_ $)
    (-> (Session $)
        (Price $)))
  (if (i.< +0 (its #real_body it))
    (..bottom it)
    (..top it)))

(the .public (high it)
  (for_any (_ $)
    (-> (Session $)
        (Price $)))
  (money.+ (..top it)
           (money.money (..currency it)
                        (its #to_high it))))

(the .public equivalence
  (for_any (_ $)
    (Equivalence (Session $)))
  (all product.equivalence
       money.equivalence
       n.equivalence
       i.equivalence
       n.equivalence
       volume.equivalence
       ))

(alias [=]
       ..equivalence)

(the (size from to)
  (for_any (_ $)
    (-> (Price $) (Price $)
        Nat))
  (|> to
      (money.- from)
      (maybe#each money.amount)
      (maybe.else 0)))

(the (distance open close)
  (for_any (_ $)
    (-> (Price $) (Price $)
        Int))
  (if (money.> open close)
    (|> close
        (money.- open)
        (maybe#each money.amount)
        (maybe.else 0)
        .int)
    (|> open
        (money.- close)
        (maybe#each money.amount)
        (maybe.else 0)
        .int
        i.opposite)))

(template.with [<header> <name>]
  [(the <name> <header>)]

  ["O" open_header]
  ["H" high_header]
  ["L" low_header]
  ["C" close_header]
  ["V" volume_header]
  )

(the .public (injection it)
  (for_any (_ $)
    (Injection (Session $)))
  (`` (%.message (,, (template.with [<header> <field>]
                       [<header> ": " (money.injection (<field> it)) " | "]

                       [..open_header ..open]
                       [..high_header ..high]
                       [..low_header ..low]
                       [..close_header ..close]
                       ))
                 ..volume_header ": " (%.nat (its [#volume volume.#in] it)))))

(exception.the .public (invalid [open high low close volume])
  (for_any (_ $)
    (Exception [(Price $) (Price $) (Price $) (Price $) (Volume $)]))
  (exception.report
   (`` (list (,, (template.with [<header> <field>]
                   [[<header> (money.injection <field>)]]

                   [..open_header open]
                   [..high_header high]
                   [..low_header low]
                   [..close_header close]
                   ))
             [..volume_header (%.nat (its volume.#in volume))]))))

(the (between? [low high] it)
  (for_any (_ $)
    (-> [(Price $) (Price $)] (Price $)
        Bit))
  (and (money.>= low it)
       (money.<= high it)))

(the (valid? open high low close)
  (for_any (_ $)
    (-> (Price $) (Price $) (Price $) (Price $)
        Bit))
  (and (money.<= high low)
       (between? [low high] open)
       (between? [low high] close)))

(the .public (ohlc open high low close volume)
  (for_any (_ $)
    (-> (Price $) (Price $) (Price $) (Price $) (Volume $)
        (Try (Session $))))
  (if (valid? open high low close)
    (let [bottom (money.min open close)
          top (money.max open close)]
      {try.#Success
       [#low low
        #to_bottom (..size low bottom)
        #real_body (..distance open close)
        #to_high (..size top high)
        #volume volume]})
    (exception.except ..invalid [open high low close volume])))

(the .public (composite before after)
  (for_any (_ $)
    (-> (Session $) (Session $)
        (Session $)))
  (try.trusted
   (ohlc (..open before)
         (money.max (..high before) (..high after))
         (money.min (..low before) (..low after))
         (..close after)
         [volume.#in (n.+ (its [#volume volume.#in] before)
                          (its [#volume volume.#in] after))
          volume.#out (money.+ (its [#volume volume.#out] before)
                               (its [#volume volume.#out] after))])))
