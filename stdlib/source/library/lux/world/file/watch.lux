... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except all and)
   ["[0]" ffi (.only import)]
   [abstract
    [monad (.only do)]]
   [concurrency
    ["[0]" future (.only Future)]
    ["[0]" stm (.only STM Var)]]
   [control
    ["[0]" io (.only IO)]
    ["[0]" maybe]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" list (.use "[1]#[0]" functor monoid mix)]
     ["[0]" set]
     ["[0]" array]]]
   [math
    [number
     ["n" natural]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" type (.only)
    ["[0]" nominal]]
   [time
    ["[0]" instant (.only Instant)]]]]
 ["[0]" //])

(nominal.every .public Concern
  (Record
   [#creation Bit
    #modification Bit
    #deletion Bit])

  (the none
    Concern
    (nominal.of
     [#creation false
      #modification false
      #deletion false]))

  (template.with [<concern> <predicate> <event> <create> <modify> <delete>]
    [(the .public <concern>
       Concern
       (nominal.of
        [#creation <create>
         #modification <modify>
         #deletion <delete>]))

     (the .public <predicate>
       (Predicate Concern)
       (|>> nominal.as
            (its <event>)))]

    [creation creation? #creation
     true false false]
    [modification modification? #modification
     false true false]
    [deletion deletion? #deletion
     false false true]
    )

  (the .public (and left right)
    (-> Concern Concern
        Concern)
    (nominal.of
     [#creation (or (..creation? left) (..creation? right))
      #modification (or (..modification? left) (..modification? right))
      #deletion (or (..deletion? left) (..deletion? right))]))

  (the .public all
    Concern
    (.all ..and
          ..creation
          ..modification
          ..deletion
          ))
  )

(every .public (Watcher !)
  (Interface
   (is (-> Concern //.Path
           (! (Try Any)))
       start)
   (is (-> //.Path
           (! (Try Concern)))
       concern)
   (is (-> //.Path
           (! (Try Concern)))
       stop)
   (is (-> []
           (! (Try (List [Concern //.Path]))))
       poll)))

(template.with [<name>]
  [(exception.the .public (<name> path)
     (Exception //.Path)
     (exception.report
      (list ["Path" (%.text path)])))]

  [not_being_watched]
  [cannot_poll_a_non_existent_directory]
  )

(every File_Tracker
  (Dictionary //.Path Instant))

(every Directory_Tracker
  (Dictionary //.Path [Concern File_Tracker]))

(the (update_watch! new_concern path tracker)
  (-> Concern //.Path (Var Directory_Tracker)
      (STM Bit))
  (do [! stm.monad]
    [@tracker (stm.read tracker)]
    (when (dictionary.value path @tracker)
      {try.#Success [old_concern last_modified]}
      (do !
        [_ (stm.update (dictionary.has path [new_concern last_modified]) tracker)]
        (pure true))
      
      failure
      (pure false))))

(the (file_tracker fs directory)
  (-> (//.System Future) //.Path
      (Future (Try File_Tracker)))
  (do [! (try.with future.monad)]
    [files (by fs directory_files directory)]
    (list.mix' !
               (function (_ file tracker)
                 (do !
                   [last_modified (by fs last_modified file)]
                   (pure (dictionary.has file last_modified tracker))))
               (is File_Tracker
                   (dictionary.empty text.hash))
               files)))

(the (available_files fs directory)
  (-> (//.System Future) //.Path
      (Future (Try (List [//.Path Instant]))))
  (do [! (try.with future.monad)]
    [files (by fs directory_files directory)]
    (list.each' ! (function (_ file)
                    (|> file
                        (by fs last_modified)
                        (by ! each (|>> [file]))))
                files)))

(the (available_directory_changes fs [directory [the_concern file_tracker]])
  (-> (//.System Future) [//.Path [Concern File_Tracker]]
      (Future (Try [[//.Path [Concern File_Tracker]]
                    [(List [//.Path Instant])
                     (List [//.Path Instant Instant])
                     (List //.Path)]])))
  (do [! (try.with future.monad)]
    [current_files (..available_files fs directory)
     .let [creations (if (..creation? the_concern)
                         (list.only (|>> product.left (dictionary.key? file_tracker) not)
                                    current_files)
                         (list))
           available (|> current_files
                         (list#each product.left)
                         (set.of_list text.hash))
           deletions (if (..deletion? the_concern)
                         (|> (dictionary.entries file_tracker)
                             (list#each product.left)
                             (list.only (|>> (set.member? available) not)))
                         (list))
           modifications (list.all (function (_ [path current_modification])
                                     (do maybe.monad
                                       [previous_modification (dictionary.value path file_tracker)]
                                       (pure [path previous_modification current_modification])))
                                   current_files)]]
    (pure [[directory
            [the_concern
             (let [with_deletions (list#mix dictionary.lacks file_tracker deletions)
                   with_creations (list#mix (function (_ [path last_modified] tracker)
                                              (dictionary.has path last_modified tracker))
                                            with_deletions
                                            creations)
                   with_modifications (list#mix (function (_ [path previous_modification current_modification] tracker)
                                                  (dictionary.has path current_modification tracker))
                                                with_creations
                                                modifications)]
               with_modifications)]]
           [creations
            modifications
            deletions]])))

(the .public (polling fs)
  (-> (//.System Future)
      (Watcher Future))
  (let [tracker (is (Var Directory_Tracker)
                    (stm.var (dictionary.empty text.hash)))]
    (implementation
     (the (start new_concern path)
       (do [! future.monad]
         [exists? (by fs directory? path)]
         (if exists?
             (do !
               [updated? (stm.commit! (..update_watch! new_concern path tracker))]
               (if updated?
                   (pure {try.#Success []})
                   (do (try.with !)
                     [file_tracker (..file_tracker fs path)]
                     (do !
                       [_ (stm.commit! (stm.update (dictionary.has path [new_concern file_tracker]) tracker))]
                       (pure {try.#Success []})))))
             (pure (exception.except ..cannot_poll_a_non_existent_directory [path])))))
     (the (concern path)
       (stm.commit!
        (do stm.monad
          [@tracker (stm.read tracker)]
          (pure (when (dictionary.value path @tracker)
                  {try.#Success [it file_tracker]}
                  {try.#Success it}

                  failure
                  (exception.except ..not_being_watched [path]))))))
     (the (stop path)
       (stm.commit!
        (do [! stm.monad]
          [@tracker (stm.read tracker)]
          (when (dictionary.value path @tracker)
            {try.#Success [the_concern file_tracker]}
            (do !
              [_ (stm.update (dictionary.lacks path) tracker)]
              (pure {try.#Success the_concern}))

            failure
            (pure (exception.except ..not_being_watched [path]))))))
     (the (poll _)
       (do future.monad
         [@tracker (stm.commit! (stm.read tracker))]
         (do [! (try.with future.monad)]
           [changes (|> @tracker
                        dictionary.entries
                        (list.each' ! (..available_directory_changes fs)))
            _ (do future.monad
                [_ (stm.commit! (stm.write (|> changes
                                               (list#each product.left)
                                               (dictionary.of_list text.hash))
                                           tracker))]
                (pure {try.#Success []}))
            .let [[creations modifications deletions]
                  (is [(List [//.Path Instant])
                       (List [//.Path Instant Instant])
                       (List //.Path)]
                      (list#mix (function (_ [_ [creations modifications deletions]]
                                             [all_creations all_modifications all_deletions])
                                  [(list#composite creations all_creations)
                                   (list#composite modifications all_modifications)
                                   (list#composite deletions all_deletions)])
                                [(list) (list) (list)]
                                changes))]]
           (pure (.all list#composite
                       (list#each (|>> product.left [..creation]) creations)
                       (|> modifications
                           (list.only (function (_ [path previous_modification current_modification])
                                        (not (instant.= previous_modification current_modification))))
                           (list#each (|>> product.left [..modification])))
                       (list#each (|>> [..deletion]) deletions)
                       )))))
     )))

(the .public (memory delimiter)
  (-> Text
      [(//.System Future) (Watcher Future)])
  (let [fs (//.memory delimiter)]
    [fs
     (..polling fs)]))

(for .jvm
     (these (import java/lang/Object
                    "[1]::[0]")

            (import java/lang/String
                    "[1]::[0]")

            (import (java/util/List it)
                    "[1]::[0]"
                    (size [] int)
                    (get [int] it))

            (the (default_list it)
              (for_any (_ it)
                (-> (java/util/List it)
                    (List it)))
              (let [size (.natural (ffi.of_int (java/util/List::size [] it)))]
                (loop (again [idx 0
                              output (type.sharing [it]
                                       (is (java/util/List it)
                                           it)
                                       (is (List it)
                                           (list)))])
                  (if (n.< size idx)
                      (again (++ idx)
                             (list#composite output
                                             (list (as_expected (java/util/List::get [(ffi.as_int (.integer idx))] it)))))
                      output))))
            
            (import (java/nio/file/WatchEvent$Kind it)
                    "[1]::[0]")

            (import (java/nio/file/WatchEvent it)
                    "[1]::[0]"
                    (kind [] (java/nio/file/WatchEvent$Kind it)))

            (import java/nio/file/Watchable
                    "[1]::[0]")

            (import java/nio/file/Path
                    "[1]::[0]"
                    (register [java/nio/file/WatchService [(java/nio/file/WatchEvent$Kind [? < java/lang/Object])]] "io" "try" java/nio/file/WatchKey)
                    (toString [] java/lang/String))

            (import java/nio/file/StandardWatchEventKinds
                    "[1]::[0]"
                    ("read_only" "static" ENTRY_CREATE (java/nio/file/WatchEvent$Kind java/nio/file/Path))
                    ("read_only" "static" ENTRY_MODIFY (java/nio/file/WatchEvent$Kind java/nio/file/Path))
                    ("read_only" "static" ENTRY_DELETE (java/nio/file/WatchEvent$Kind java/nio/file/Path)))

            (the (default_event_concern event)
              (for_any (_ it)
                (-> (java/nio/file/WatchEvent it)
                    Concern))
              (let [kind (as (-> (java/nio/file/WatchEvent$Kind Any)
                                 (java/nio/file/WatchEvent$Kind java/nio/file/Path))
                             (java/nio/file/WatchEvent::kind [] event))]
                (if (same? (java/nio/file/StandardWatchEventKinds::ENTRY_CREATE)
                           kind)
                    ..creation
                    
                    (same? (java/nio/file/StandardWatchEventKinds::ENTRY_MODIFY)
                           kind)
                    ..modification
                    
                    (same? (java/nio/file/StandardWatchEventKinds::ENTRY_DELETE)
                           kind)
                    ..deletion
                    
                    ... else
                    ..none
                    )))

            (import java/nio/file/WatchKey
                    "[1]::[0]"
                    (reset [] "io" boolean)
                    (cancel [] "io" void)
                    (watchable [] java/nio/file/Watchable)
                    (pollEvents [] "io" (java/util/List (java/nio/file/WatchEvent ?))))

            (the default_key_concern
              (-> java/nio/file/WatchKey
                  (IO Concern))
              (|>> (java/nio/file/WatchKey::pollEvents [])
                   (by io.monad each (|>> ..default_list
                                          (list#each default_event_concern)
                                          (list#mix ..and ..none)))))

            (import java/nio/file/WatchService
                    "[1]::[0]"
                    (poll [] "io" "try" "?" java/nio/file/WatchKey))

            (import java/nio/file/FileSystem
                    "[1]::[0]"
                    (newWatchService [] "io" "try" java/nio/file/WatchService))

            (import java/nio/file/FileSystems
                    "[1]::[0]"
                    ("static" getDefault [] java/nio/file/FileSystem))

            (import java/io/File
                    "[1]::[0]"
                    (new [java/lang/String])
                    (toPath [] java/nio/file/Path))

            (every Watch_Event
              (java/nio/file/WatchEvent$Kind java/lang/Object))

            (the (default_start watch_events watcher path)
              (-> (List Watch_Event) java/nio/file/WatchService //.Path
                  (Future (Try java/nio/file/WatchKey)))
              (let [watch_events' (list#mix (function (_ [index watch_event] watch_events')
                                              (ffi.write! index watch_event watch_events'))
                                            (ffi.array (java/nio/file/WatchEvent$Kind java/lang/Object)
                                                       (list.size watch_events))
                                            (list.enumeration watch_events))]
                (future.soon
                 (java/nio/file/Path::register [watcher
                                                watch_events']
                                               (|> path ffi.as_string [] java/io/File::new (java/io/File::toPath []))))))

            (the (default_poll watcher)
              (-> java/nio/file/WatchService
                  (IO (Try (List [Concern //.Path]))))
              (loop (again [output (is (List [Concern //.Path])
                                       (list))])
                (do (try.with io.monad)
                  [?key (java/nio/file/WatchService::poll [] watcher)]
                  (when ?key
                    {.#Some key}
                    (do [! io.monad]
                      [valid? (java/nio/file/WatchKey::reset [] key)]
                      (if (ffi.of_boolean valid?)
                          (do !
                            [.let [path (|> key
                                            (java/nio/file/WatchKey::watchable [])
                                            (as (-> java/nio/file/Watchable java/nio/file/Path))
                                            (java/nio/file/Path::toString [])
                                            ffi.of_string
                                            (as (-> Text //.Path)))]
                             the_concern (..default_key_concern key)]
                            (again (list#composite output (list [the_concern path]))))
                          (again output)))
                    
                    {.#None}
                    (pure output)))))

            (the (watch_events concern)
              (-> Concern
                  (List Watch_Event))
              (.all list#composite
                    (if (..creation? concern)
                        (list (as (-> (java/nio/file/WatchEvent$Kind java/nio/file/Path) Watch_Event)
                                  (java/nio/file/StandardWatchEventKinds::ENTRY_CREATE)))
                        (list))
                    (if (..modification? concern)
                        (list (as (-> (java/nio/file/WatchEvent$Kind java/nio/file/Path) Watch_Event)
                                  (java/nio/file/StandardWatchEventKinds::ENTRY_MODIFY)))
                        (list))
                    (if (..deletion? concern)
                        (list (as (-> (java/nio/file/WatchEvent$Kind java/nio/file/Path) Watch_Event)
                                  (java/nio/file/StandardWatchEventKinds::ENTRY_DELETE)))
                        (list))
                    ))

            (the .public default
              (IO (Try (Watcher Future)))
              (do (try.with io.monad)
                [watcher (|> (java/nio/file/FileSystems::getDefault [])
                             (java/nio/file/FileSystem::newWatchService []))
                 .let [tracker (stm.var (is (Dictionary //.Path [Concern java/nio/file/WatchKey])
                                            (dictionary.empty text.hash)))

                       stop (is (-> //.Path (Future (Try Concern)))
                                (function (_ path)
                                  (do [! future.monad]
                                    [@tracker (stm.commit! (stm.read tracker))]
                                    (when (dictionary.value path @tracker)
                                      {try.#Success [the_concern key]}
                                      (do !
                                        [_ (future.soon
                                            (java/nio/file/WatchKey::cancel [] key))
                                         _ (stm.commit! (stm.update (dictionary.lacks path) tracker))]
                                        (pure {try.#Success the_concern}))

                                      failure
                                      (pure (exception.except ..not_being_watched [path]))))))]]
                (pure (is (Watcher Future)
                          (implementation
                           (the (start the_concern path)
                             (do future.monad
                               [?concern (stop path)]
                               (do (try.with future.monad)
                                 [key (..default_start (..watch_events (..and (try.else ..none ?concern)
                                                                              the_concern))
                                                       watcher
                                                       path)]
                                 (do future.monad
                                   [_ (stm.commit! (stm.update (dictionary.has path [the_concern key]) tracker))]
                                   (pure {try.#Success []})))))
                           (the (concern path)
                             (do future.monad
                               [@tracker (stm.commit! (stm.read tracker))]
                               (when (dictionary.value path @tracker)
                                 {try.#Success [it key]}
                                 (pure {try.#Success it})

                                 failure
                                 (pure (exception.except ..not_being_watched [path])))))
                           (the stop stop)
                           (the (poll _)
                             (future.soon (..default_poll watcher)))
                           )))))
            )

     ... else
     (these))
