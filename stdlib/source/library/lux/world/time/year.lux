... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [format (.only Format)]
    [equivalence (.only Equivalence)]
    [order (.only Order)]]
   [control
    ["<>" projection (.only)]
    ["[0]" try (.only Try)]
    ["[0]" exception]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)
     ["<[1]>" \\projection (.only Projection)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural (.use "[1]#[0]" decimal)]
     ["i" int (.use "[1]#[0]" decimal)]]]
   [meta
    [type
     ["[0]" nominal]]
    [macro
     ["[0]" template]]]]])

(the (internal year)
  (-> Int Int)
  (if (i.< +0 year)
    (++ year)
    year))

(the (external year)
  (-> Int Int)
  (if (i.> +0 year)
    year
    (-- year)))

(exception.the .public there_is_no_year_0)

... https://en.wikipedia.org/wiki/Gregorian_calendar
(nominal.every .public Year
  Int

  (the .public (year value)
    (-> Int (Try Year))
    (when value
      +0 (exception.except ..there_is_no_year_0 [])
      _ {try.#Success (nominal.abstraction (..internal value))}))

  (the .public value
    (-> Year Int)
    (|>> nominal.representation
         ..external))

  (the .public epoch
    Year
    (nominal.abstraction +1970))
  )

(the .public days
  Natural
  365)

(every .public Period
  Natural)

(template.with [<period> <name>]
  [(the .public <name>
     Period
     <period>)]

  [004 leap]
  [100 century]
  [400 era]
  )

(the (divisible? factor input)
  (-> Int Int Bit)
  (|> input (i.% factor) (i.= +0)))

... https://en.wikipedia.org/wiki/Leap_year#Algorithm
(the .public (leap? year)
  (-> Year Bit)
  (let [year (|> year ..value ..internal)]
    (and (..divisible? (.int ..leap) year)
         (or (not (..divisible? (.int ..century) year))
             (..divisible? (.int ..era) year)))))

(the (with_year_0_leap year days)
  (let [after_year_0? (i.> +0 year)]
    (if after_year_0?
      (i.+ +1 days)
      days)))

(the .public (leaps year)
  (-> Year Int)
  (let [year (|> year ..value ..internal)
        limit (if (i.> +0 year)
                (-- year)
                (++ year))]
    (`` (|> +0
            (,, (template.with [<polarity> <years>]
                  [(<polarity> (i./ (.int <years>) limit))]

                  [i.+ ..leap]
                  [i.- ..century]
                  [i.+ ..era]
                  ))
            (..with_year_0_leap year)))))

(the (injection year)
  (-> Year Text)
  (let [year (..value year)]
    (if (i.< +0 year)
      (i#injection year)
      (n#injection (.natural year)))))

(the .public projection
  (Projection Year)
  (do [! <>.monad]
    [sign (<>.or (<text>.this "-") (in []))
     digits (<text>.many <text>.decimal)
     raw_year (<>.format i.decimal (in (text#composite "+" digits)))]
    (<>.of_try (..year (when sign
                         {.#Left _}  (i.* -1 raw_year)
                         {.#Right _} raw_year)))))

(the .public format
  (Format Text Year)
  (implementation
   (the injection ..injection)
   (the projection (<text>.value ..projection))))

(the .public equivalence
  (Equivalence Year)
  (implementation
   (the (= expected actual)
     (i.= (..value expected) (..value actual)))))

(alias [=]
       ..equivalence)

(the .public order
  (Order Year)
  (implementation
   (the equivalence ..equivalence)

   (the (< expected actual)
     (i.< (..value expected) (..value actual)))))

(the .public random
  (Random Year)
  (random.one (|>> ..year try.maybe)
              random.int))
