(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]
    [enum (.only Enum)]
    [codec (.only Codec)]
    [monoid (.only Monoid)]
    [monad (.only do)]]
   [control
    ["<>" parser (.only)]
    ["[0]" try]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)
     ["<[1]>" \\parser (.only Parser)]]]
   [math
    [number
     ["i" int]
     ["[0]" nat (.use "[1]#[0]" decimal)]]]
   [meta
    [type
     ["[0]" nominal (.except def)]]]]]
 ["[0]" //
  ["[1][0]" year]])

(nominal.def .public Duration
  Int

  (def .public of_millis
    (-> Int Duration)
    (|>> abstraction))

  (def .public millis
    (-> Duration Int)
    (|>> representation))

  (with_template [<op> <name>]
    [(def .public (<name> param subject)
       (-> Duration Duration Duration)
       (abstraction (<op> (representation param) (representation subject))))]

    [i.+ composite]
    [i.% framed]
    )

  (with_template [<op> <name>]
    [(def .public (<name> scalar)
       (-> Nat Duration Duration)
       (|>> representation (<op> (.int scalar)) abstraction))]

    [i.* up]
    [i./ down]
    )

  (def .public inverse
    (-> Duration Duration)
    (|>> representation (i.* -1) abstraction))

  (def .public (ticks param subject)
    (-> Duration Duration Int)
    (i./ (representation param) (representation subject)))

  (def .public equivalence
    (Equivalence Duration)
    (implementation
     (def (= param subject)
       (i.= (representation param) (representation subject)))))

  (def .public order
    (Order Duration)
    (implementation
     (def equivalence ..equivalence)
     (def (< param subject)
       (i.< (representation param) (representation subject)))))

  (with_template [<op> <name>]
    [(def .public <name>
       (-> Duration Bit)
       (|>> representation (<op> +0)))]

    [i.> positive?]
    [i.< negative?]
    [i.= neutral?]
    )
  )

(def .public empty
  Duration
  (..of_millis +0))

(def .public milli_second
  Duration
  (..of_millis +1))

(with_template [<name> <scale> <base>]
  [(def .public <name>
     Duration
     (..up <scale> <base>))]

  [second  1,000 milli_second]
  [minute     60 second]
  [hour       60 minute]
  [day        24 hour]

  [week        7 day]
  [normal_year //year.days day]
  )

(def .public leap_year
  Duration
  (..composite ..day ..normal_year))

(def .public monoid
  (Monoid Duration)
  (implementation
   (def identity ..empty)
   (def composite ..composite)))

(with_template [<value> <definition>]
  [(def <definition> <value>)]

  ["D" day_suffix]
  ["h" hour_suffix]
  ["m" minute_suffix]
  ["s" second_suffix]
  ["ms" milli_second_suffix]

  ["+" positive_sign]
  ["-" negative_sign]
  )

(def (encoded duration)
  (if (of ..equivalence = ..empty duration)
    (all text#composite
         ..positive_sign
         (nat#encoded 0)
         ..milli_second_suffix)
    (let [signed? (negative? duration)
          [days time_left] [(ticks day duration) (framed day duration)]
          days (if signed?
                 (i.abs days)
                 days)
          time_left (if signed?
                      (..inverse time_left)
                      time_left)
          [hours time_left] [(ticks hour time_left) (framed hour time_left)]
          [minutes time_left] [(ticks minute time_left) (framed minute time_left)]
          [seconds time_left] [(ticks second time_left) (framed second time_left)]
          millis (..millis time_left)]
      (all text#composite
           (if signed? ..negative_sign ..positive_sign)
           (if (i.= +0 days) "" (text#composite (nat#encoded (.nat days)) ..day_suffix))
           (if (i.= +0 hours) "" (text#composite (nat#encoded (.nat hours)) ..hour_suffix))
           (if (i.= +0 minutes) "" (text#composite (nat#encoded (.nat minutes)) ..minute_suffix))
           (if (i.= +0 seconds) "" (text#composite (nat#encoded (.nat seconds)) ..second_suffix))
           (if (i.= +0 millis) "" (text#composite (nat#encoded (.nat millis)) ..milli_second_suffix))
           ))))

(def parser
  (Parser Duration)
  (let [section (is (-> Text Text (Parser Nat))
                    (function (_ suffix false_suffix)
                      (|> (<text>.many <text>.decimal)
                          (<>.codec nat.decimal)
                          (<>.before (when false_suffix
                                       "" (<text>.this suffix)
                                       _ (<>.after (<>.not (<text>.this false_suffix))
                                                   (<text>.this suffix))))
                          (<>.else 0))))]
    (do <>.monad
      [sign (<>.or (<text>.this ..negative_sign)
                   (<text>.this ..positive_sign))
       days (section ..day_suffix "")
       hours (section hour_suffix "")
       minutes (section ..minute_suffix ..milli_second_suffix)
       seconds (section ..second_suffix "")
       millis (section ..milli_second_suffix "")
       .let [span (|> ..empty
                      (..composite (..up days ..day))
                      (..composite (..up hours ..hour))
                      (..composite (..up minutes ..minute))
                      (..composite (..up seconds ..second))
                      (..composite (..up millis ..milli_second)))]]
      (in (when sign
            {.#Left _} (..inverse span)
            {.#Right _} span)))))

(def .public codec
  (Codec Text Duration)
  (implementation
   (def encoded ..encoded)
   (def decoded (<text>.result ..parser))))

(def .public (difference from to)
  (-> Duration Duration Duration)
  (|> from ..inverse (..composite to)))

(def .public enum
  (Enum Duration)
  (implementation
   (def order ..order)
   (def succ
     (..composite ..milli_second))
   (def pred
     (..composite (..inverse ..milli_second)))))
