... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]
    [enum (.only Enum)]
    [format (.only Format)]
    [monad (.only do)]]
   [control
    ["<>" projection (.only)]
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)
     ["<[1]>" \\projection (.only Projection)]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["n" nat (.use "[1]#[0]" decimal)]
     ["i" int]]]
   [meta
    [type
     ["[0]" nominal]]
    [macro
     ["[0]" expansion]]]]]
 ["[0]" //
  ["[1][0]" year (.only Year)]
  ["[1][0]" month (.only Month)]])

(the month_by_number
  (Dictionary Nat Month)
  (list#mix (function (_ month mapping)
              (dictionary.has (//month.number month) month mapping))
            (dictionary.empty n.hash)
            //month.year))

(the minimum_day
  1)

(the (month_days year month)
  (-> Year Month Nat)
  (if (//year.leap? year)
    (//month.leap_year_days month)
    (//month.days month)))

(the (invalid_day? year month day)
  (-> Year Month Nat Bit)
  (or (n.< ..minimum_day day)
      (n.> (..month_days year month) day)))

(exception.the .public (invalid_day [year month day])
  (Exception [Year Month Nat])
  (exception.report
   (list ["Value" (n#injection day)]
         ["Minimum" (n#injection ..minimum_day)]
         ["Maximum" (n#injection (..month_days year month))]
         ["Year" (of //year.format injection year)]
         ["Month" (n#injection (//month.number month))])))

(the separator
  "-")

(nominal.every .public Date
  (Record
   [#year Year
    #month Month
    #day Nat])

  (the .public (date year month day_of_month)
    (-> Year Month Nat (Try Date))
    (if (..invalid_day? year month day_of_month)
      (exception.except ..invalid_day [year month day_of_month])
      {try.#Success
       (nominal.abstraction
        [#year year
         #month month
         #day day_of_month])}))

  (the .public epoch
    Date
    (try.trusted
     (..date //year.epoch
             {//month.#January}
             ..minimum_day)))

  (with_template [<name> <type> <field>]
    [(the .public <name>
       (-> Date <type>)
       (|>> nominal.representation
            (its <field>)))]

    [year Year #year]
    [month Month #month]
    [day_of_month Nat #day]
    )

  (the .public equivalence
    (Equivalence Date)
    (implementation
     (the (= expected actual)
       (let [expected (nominal.representation expected)
             actual (nominal.representation actual)]
         (and (of //year.equivalence =
                  (its #year expected)
                  (its #year actual))
              (of //month.equivalence =
                  (its #month expected)
                  (its #month actual))
              (n.= (its #day expected)
                   (its #day actual)))))))

  (the .public order
    (Order Date)
    (implementation
     (the equivalence ..equivalence)
     
     (the (< reference it)
       (let [reference (nominal.representation reference)
             it (nominal.representation it)]
         (or (of //year.order <
                 (its #year reference)
                 (its #year it))
             (and (of //year.equivalence =
                      (its #year reference)
                      (its #year it))
                  (or (of //month.order <
                          (its #month reference)
                          (its #month it))
                      (and (of //month.order =
                               (its #month reference)
                               (its #month it))
                           (n.< (its #day reference)
                                (its #day it))))))))))
  )

(the section_projection
  (Projection Nat)
  (<>.format n.decimal (<text>.exactly 2 <text>.decimal)))

(the millis_projection
  (Projection Nat)
  (<>.either (|> (<text>.at_most 3 <text>.decimal)
                 (<>.format n.decimal)
                 (<>.after (<text>.this ".")))
             (of <>.monad in 0)))

(with_template [<minimum> <maximum> <projection> <exception>]
  [(exception.the .public (<exception> value)
     (Exception Nat)
     (exception.report
      (list ["Value" (n#injection value)]
            ["Minimum" (n#injection <minimum>)]
            ["Maximum" (n#injection <maximum>)])))

   (the <projection>
     (Projection Nat)
     (do <>.monad
       [value ..section_projection]
       (if (or (n.< <minimum> value)
               (n.> <maximum> value))
         (<>.of_try (exception.except <exception> [value]))
         (in value))))]

  [1 12 month_projection invalid_month]
  )

(the .public projection
  (Projection Date)
  (do <>.monad
    [utc_year //year.projection
     _ (<text>.this ..separator)
     utc_month ..month_projection
     _ (<text>.this ..separator)
     .let [month (maybe.trusted (dictionary.value utc_month ..month_by_number))]
     utc_day ..section_projection]
    (<>.of_try (..date utc_year month utc_day))))

(the (injection value)
  (-> Date Text)
  (let [segment (of (n.padded 2 n.decimal) injection)]
    (all text#composite
         (of //year.format injection (..year value))
         ..separator (segment (|> value ..month //month.number))
         ..separator (segment (..day_of_month value)))))

(the .public format
  (Format Text Date)
  (implementation
   (the injection ..injection)
   (the projection (<text>.value ..projection))))

(the days_per_leap
  (|> //year.days
      (n.* 4)
      (n.+ 1)))

(the days_per_century
  (let [leaps_per_century (n./ //year.leap
                               //year.century)]
    (|> //year.century
        (n.* //year.days)
        (n.+ leaps_per_century)
        (n.- 1))))

(the days_per_era
  (let [centuries_per_era (n./ //year.century
                               //year.era)]
    (|> centuries_per_era
        (n.* ..days_per_century)
        (n.+ 1))))

(the days_since_epoch
  (let [years::70 70
        leaps::70 (n./ //year.leap
                       years::70)
        days::70 (|> years::70
                     (n.* //year.days)
                     (n.+ leaps::70))
        ... The epoch is being calculated from March 1st, instead of January 1st.
        january_&_february (n.+ (//month.days {//month.#January})
                                (//month.days {//month.#February}))]
    (|> 0
        ... 1600/01/01
        (n.+ (n.* 4 days_per_era))
        ... 1900/01/01
        (n.+ (n.* 3 days_per_century))
        ... 1970/01/01
        (n.+ days::70)
        ... 1970/03/01
        (n.- january_&_february))))

(the first_month_of_civil_year 3)

(expansion.let [<pull> +3
                <push> +9]
  (these (the (internal_month civil_month)
           (-> Nat Int)
           (if (n.< ..first_month_of_civil_year civil_month)
             (i.+ <push> (.int civil_month))
             (i.- <pull> (.int civil_month))))

         (the (civil_month internal_month)
           (-> Int Nat)
           (.nat (if (i.< +10 internal_month)
                   (i.+ <pull> internal_month)
                   (i.- <push> internal_month))))))

(expansion.let [<up> +153
                <translation> +2
                <down> +5]
  (these (the day_of_year_from_month
           (-> Nat Int)
           (|>> ..internal_month
                (i.* <up>)
                (i.+ <translation>)
                (i./ <down>)))

         (the month_from_day_of_year
           (-> Int Nat)
           (|>> (i.* <down>)
                (i.+ <translation>)
                (i./ <up>)
                ..civil_month))))

(the last_era_leap_day
  (.int (-- ..days_per_leap)))

(the last_era_day
  (.int (-- ..days_per_era)))

(the (civil_year utc_month utc_year)
  (-> Nat Year Int)
  (let [... Coercing, because the year is already in external form.
        utc_year (as Int utc_year)]
    (if (n.< ..first_month_of_civil_year utc_month)
      (-- utc_year)
      utc_year)))

... http://howardhinnant.github.io/date_algorithms.html
(the .public (days date)
  (-> Date Int)
  (let [utc_month (|> date ..month //month.number)
        civil_year (..civil_year utc_month (..year date))
        era (|> (if (i.< +0 civil_year)
                  (i.- (.int (-- //year.era))
                       civil_year)
                  civil_year)
                (i./ (.int //year.era)))
        year_of_era (i.- (i.* (.int //year.era)
                              era)
                         civil_year)
        day_of_year (|> utc_month
                        ..day_of_year_from_month
                        (i.+ (.int (-- (..day_of_month date)))))
        day_of_era (|> day_of_year
                       (i.+ (i.* (.int //year.days) year_of_era))
                       (i.+ (i./ (.int //year.leap) year_of_era))
                       (i.- (i./ (.int //year.century) year_of_era)))]
    (|> (i.* (.int ..days_per_era) era)
        (i.+ day_of_era)
        (i.- (.int ..days_since_epoch)))))

... http://howardhinnant.github.io/date_algorithms.html
(the .public (of_days days)
  (-> Int Date)
  (let [days (i.+ (.int ..days_since_epoch) days)
        era (|> (if (i.< +0 days)
                  (i.- ..last_era_day days)
                  days)
                (i./ (.int ..days_per_era)))
        day_of_era (i.- (i.* (.int ..days_per_era) era) days)
        year_of_era (|> day_of_era
                        (i.- (i./ ..last_era_leap_day day_of_era))
                        (i.+ (i./ (.int ..days_per_century) day_of_era))
                        (i.- (i./ ..last_era_day day_of_era))
                        (i./ (.int //year.days)))
        year (i.+ (i.* (.int //year.era) era)
                  year_of_era)
        day_of_year (|> day_of_era
                        (i.- (i.* (.int //year.days) year_of_era))
                        (i.- (i./ (.int //year.leap) year_of_era))
                        (i.+ (i./ (.int //year.century) year_of_era)))
        month (..month_from_day_of_year day_of_year)
        day (|> day_of_year
                (i.- (..day_of_year_from_month month))
                (i.+ +1)
                .nat)
        year (if (n.< ..first_month_of_civil_year month)
               (++ year)
               year)]
    ... Coercing, because the year is already in internal form.
    (try.trusted
     (..date (as Year year)
             (maybe.trusted (dictionary.value month ..month_by_number))
             day))))

(the .public enum
  (Enum Date)
  (implementation
   (the order ..order)

   (the succ
     (|>> ..days ++ ..of_days))

   (the pred
     (|>> ..days -- ..of_days))))
