... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except nat)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [order (.only Order)]
    [enum (.only Enum)]
    [codec (.only Codec)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)]]
   [math
    [number
     ["n" nat]]]
   [meta
    [macro
     ["^" pattern]
     ["[0]" template]]]]])

(every .public Day
  (Variant
   {#Sunday}
   {#Monday}
   {#Tuesday}
   {#Wednesday}
   {#Thursday}
   {#Friday}
   {#Saturday}))

(the .public equivalence
  (Equivalence Day)
  (implementation
   (the (= expected actual)
     (when [expected actual]
       (^.with_template [<tag>]
         [[{<tag>} {<tag>}]
          true])
       ([#Sunday]
        [#Monday]
        [#Tuesday]
        [#Wednesday]
        [#Thursday]
        [#Friday]
        [#Saturday])

       _
       false))))

(the (nat day)
  (-> Day Nat)
  (when day
    (^.with_template [<nat> <day>]
      [{<day>} <nat>])
    ([0 #Sunday]
     [1 #Monday]
     [2 #Tuesday]
     [3 #Wednesday]
     [4 #Thursday]
     [5 #Friday]
     [6 #Saturday])))

(the .public order
  (Order Day)
  (implementation
   (the equivalence ..equivalence)
   
   (the (< reference it)
     (n.< (..nat reference) (..nat it)))))

(the .public enum
  (Enum Day)
  (implementation
   (the order ..order)
   
   (the (succ day)
     (when day
       {#Sunday}    {#Monday}
       {#Monday}    {#Tuesday}
       {#Tuesday}   {#Wednesday}
       {#Wednesday} {#Thursday}
       {#Thursday}  {#Friday}
       {#Friday}    {#Saturday}
       {#Saturday}  {#Sunday}))
   
   (the (pred day)
     (when day
       {#Monday}    {#Sunday}
       {#Tuesday}   {#Monday}
       {#Wednesday} {#Tuesday}
       {#Thursday}  {#Wednesday}
       {#Friday}    {#Thursday}
       {#Saturday}  {#Friday}
       {#Sunday}    {#Saturday}))))

(exception.the .public (not_a_day_of_the_week value)
  (Exception Text)
  (exception.report
   (list ["Value" (text.format value)])))

(the .public codec
  (Codec Text Day)
  (implementation
   (the (injection value)
     (when value
       (^.with_template [<tag>]
         [{<tag>}
          (text.replaced "#" "" (template.text [<tag>]))])
       ([..#Monday]
        [..#Tuesday]
        [..#Wednesday]
        [..#Thursday]
        [..#Friday]
        [..#Saturday]
        [..#Sunday])))
   (the (projection value)
     (when (text#composite "#" value)
       (^.with_template [<tag>]
         [(template.text [<tag>])
          {try.#Success {<tag>}}])
       ([..#Monday]
        [..#Tuesday]
        [..#Wednesday]
        [..#Thursday]
        [..#Friday]
        [..#Saturday]
        [..#Sunday])
       _ (exception.except ..not_a_day_of_the_week [value])))))

(the .public week
  (List Day)
  (list {#Sunday}
        {#Monday}
        {#Tuesday}
        {#Wednesday}
        {#Thursday}
        {#Friday}
        {#Saturday}))

(with_expansions [<pairs> (these [01 #Sunday]
                                 [02 #Monday]
                                 [03 #Tuesday]
                                 [04 #Wednesday]
                                 [05 #Thursday]
                                 [06 #Friday]
                                 [07 #Saturday])]
  (these (the .public (number day)
           (-> Day Nat)
           (when day
             (^.with_template [<number> <day>]
               [{<day>}
                <number>])
             (<pairs>)))

         (exception.the .public (invalid_day number)
           (Exception Nat)
           (exception.report
            (list ["Number" (of n.decimal injection number)]
                  ["Valid range" (.text_composite# (of n.decimal injection (..number {#Sunday}))
                                                   " ~ "
                                                   (of n.decimal injection (..number {#Saturday})))])))

         (the .public (by_number number)
           (-> Nat (Try Day))
           (when number
             (^.with_template [<number> <day>]
               [<number>
                {try.#Success {<day>}}])
             (<pairs>)
             
             _
             (exception.except ..invalid_day [number]))))
  )

(the .public hash
  (Hash Day)
  (implementation
   (the equivalence ..equivalence)
   (the (hash day)
     (when day
       (^.with_template [<prime> <day>]
         [{<day>}
          <prime>])
       ([02 #Sunday]
        [03 #Monday]
        [05 #Tuesday]
        [07 #Wednesday]
        [11 #Thursday]
        [13 #Friday]
        [17 #Saturday])))))
