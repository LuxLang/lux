... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except natural)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [order (.only Order)]
    [enum (.only Enum)]
    [format (.only Format)]]
   [control
    ["?" projection (.use "[1]#[0]" monad)]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)
     ["?[1]" \\projection (.only Projection)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural]]]
   [meta
    [macro
     ["[0]" template]
     ["[0]" expansion]]]]])

(every .public Day
  (Variant
   {#Sunday}
   {#Monday}
   {#Tuesday}
   {#Wednesday}
   {#Thursday}
   {#Friday}
   {#Saturday}))

(the .public equivalence
  (Equivalence Day)
  (implementation
   (the (= expected actual)
     (`` (when [expected actual]
           (,, (template.with [<tag>]
                 [[{<tag>} {<tag>}]
                  true]

                 [#Sunday]
                 [#Monday]
                 [#Tuesday]
                 [#Wednesday]
                 [#Thursday]
                 [#Friday]
                 [#Saturday]))

           _
           false)))))

(alias [=]
       ..equivalence)

(the (natural day)
  (-> Day Natural)
  (`` (when day
        (,, (template.with [<natural> <day>]
              [{<day>} <natural>]

              [0 #Sunday]
              [1 #Monday]
              [2 #Tuesday]
              [3 #Wednesday]
              [4 #Thursday]
              [5 #Friday]
              [6 #Saturday])))))

(the .public order
  (Order Day)
  (implementation
   (the equivalence ..equivalence)
   
   (the (< reference it)
     (n.< (..natural reference) (..natural it)))))

(the .public enum
  (Enum Day)
  (implementation
   (the order ..order)
   
   (the (succ day)
     (when day
       {#Sunday}    {#Monday}
       {#Monday}    {#Tuesday}
       {#Tuesday}   {#Wednesday}
       {#Wednesday} {#Thursday}
       {#Thursday}  {#Friday}
       {#Friday}    {#Saturday}
       {#Saturday}  {#Sunday}))
   
   (the (pred day)
     (when day
       {#Monday}    {#Sunday}
       {#Tuesday}   {#Monday}
       {#Wednesday} {#Tuesday}
       {#Thursday}  {#Wednesday}
       {#Friday}    {#Thursday}
       {#Saturday}  {#Friday}
       {#Sunday}    {#Saturday}))))

(the .public (as_text value)
  (text.Injection Day)
  (`` (when value
        (,, (template.with [<tag>]
              [{<tag>}
               (text.replaced "#" "" (template.text [<tag>]))]

              [..#Monday]
              [..#Tuesday]
              [..#Wednesday]
              [..#Thursday]
              [..#Friday]
              [..#Saturday]
              [..#Sunday])))))

(the .public projection
  (Projection Day)
  (`` (all ?.either
           (,, (template.with [,tag]
                 [(?.after (?text.this (text.replaced "#" "" (template.text [,tag])))
                           (?#in {,tag}))]

                 [..#Monday]
                 [..#Tuesday]
                 [..#Wednesday]
                 [..#Thursday]
                 [..#Friday]
                 [..#Saturday]
                 [..#Sunday]))
           )))

(the .public format
  (Format Text Day)
  (implementation
   (the injection ..as_text)
   (the projection (?text.value ..projection))))

(the .public week
  (List Day)
  (list {#Sunday}
        {#Monday}
        {#Tuesday}
        {#Wednesday}
        {#Thursday}
        {#Friday}
        {#Saturday}))

(expansion.let [<pairs> (these [01 #Sunday]
                               [02 #Monday]
                               [03 #Tuesday]
                               [04 #Wednesday]
                               [05 #Thursday]
                               [06 #Friday]
                               [07 #Saturday])]
  (these (the .public (number day)
           (-> Day Natural)
           (`` (when day
                 (,, (template.with [<number> <day>]
                       [{<day>}
                        <number>]

                       <pairs>)))))

         (exception.the .public (invalid_day number)
           (Exception Natural)
           (exception.report
            (list ["Number" (of n.base_10 injection number)]
                  ["Valid range" (.text_composite# (of n.base_10 injection (..number {#Sunday}))
                                                   " ~ "
                                                   (of n.base_10 injection (..number {#Saturday})))])))

         (the .public (by_number number)
           (-> Natural (Try Day))
           (`` (when number
                 (,, (template.with [<number> <day>]
                       [<number>
                        {try.#Success {<day>}}]

                       <pairs>))
                 
                 _
                 (exception.except ..invalid_day [number])))))
  )

(the .public hash
  (Hash Day)
  (implementation
   (the equivalence ..equivalence)
   (the (hash day)
     (`` (when day
           (,, (template.with [<prime> <day>]
                 [{<day>}
                  <prime>]

                 [02 #Sunday]
                 [03 #Monday]
                 [05 #Tuesday]
                 [07 #Wednesday]
                 [11 #Thursday]
                 [13 #Friday]
                 [17 #Saturday])))))))

(the .public random
  (Random Day)
  (let [(open "random#[0]") random.monad]
    (random.either (random.either (random#in {..#Sunday})
                                  (random.either (random#in {..#Monday})
                                                 (random#in {..#Tuesday})))
                   (random.either (random.either (random#in {..#Wednesday})
                                                 (random#in {..#Thursday}))
                                  (random.either (random#in {..#Friday})
                                                 (random#in {..#Saturday}))))))
