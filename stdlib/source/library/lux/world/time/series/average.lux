... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    [text
     ["%" \\format]]
    [collection
     ["[0]" sequence (.only Sequence) (.use "[1]#[0]" mix functor)]]]
   [math
    [number
     ["n" nat]
     ["d" dec]]]
   [meta
    [type (.only sharing)]]]]
 ["[0]" // (.only Series) (.use "[1]#[0]" mix)])

... https://en.wikipedia.org/wiki/Moving_average#Cumulative_average
(the .public cumulative
  (-> (Series Dec)
      (Series Dec))
  (revised //.#data
           (|>> (sequence#mix (function (_ event [[previous_summation previous_period] output])
                                (let [summation (d.+ previous_summation event)
                                      average (d./ previous_period summation)]
                                  [[summation (d.+ +1.0 previous_period)]
                                   (sequence.suffix average output)]))
                              [[+0.0 +1.0] (is (Sequence Dec)
                                               sequence.empty)])
                product.right)))

(exception.the .public (window_size_is_too_large [maximum actual])
  (Exception [Nat Nat])
  (exception.report
   (list ["Maximum" (%.nat maximum)]
         ["Actual" (%.nat actual)])))

(the .public (windows additional it)
  (All (_ of)
    (-> Nat (Series of)
        (Try (Series (Series of)))))
  (let [size (++ additional)
        maximum (//.size it)]
    (if (n.< size maximum)
      (exception.except ..window_size_is_too_large [maximum size])
      (let [limit (n.- size maximum)]
        (loop (again [offset 0
                      output (sharing [of]
                               (is (Series of)
                                   it)
                               (is (Sequence (Series of))
                                   sequence.empty))])
          (if (n.< limit offset)
            (do try.monad
              [current (//.window offset size it)]
              (again (++ offset)
                     (sequence.suffix current output)))
            {try.#Success (|> it
                              (has //.#data output)
                              (has //.#start (//.at size it)))}))))))

(every .public (Average of)
  (-> (Series of)
      of))

... https://en.wikipedia.org/wiki/Moving_average
(the .public (moving average additional it)
  (All (_ of)
    (-> (Average of) Nat (Series of)
        (Try (Series of))))
  (try#each (revised //.#data (sequence#each average))
            (windows additional it)))

... https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
... https://en.wikipedia.org/wiki/Exponential_smoothing
(every .public Factor
  (-> Nat
      Dec))

(the .public (simple_factor additional)
  Factor
  (d./ (n.dec (n.+ 2 additional))
       +2.0))

(the .public (exponential factor)
  (-> Factor
      (Average Dec))
  (function (_ it)
    (let [factor (factor (//.size it))
          ~factor (d.- factor +1.0)]
      (//#mix (is (-> Dec Dec
                      Dec)
                  (function (_ event previous)
                    (d.+ (d.* ~factor previous)
                         (d.* factor event))))
              +0.0
              it))))

... https://en.wikipedia.org/wiki/Moving_average#Simple_moving_average
(the .public (simple it)
  (Average Dec)
  (|> (its //.#data it)
      (sequence#mix d.+ +0.0)
      (d./ (n.dec (//.size it)))))

... https://en.wikipedia.org/wiki/Triangular_number
(the (summation_up_to maximum)
  (-> Nat
      Nat)
  (|> maximum
      (n.* (++ maximum))
      (n./ 2)))

... https://en.wikipedia.org/wiki/Moving_average#Weighted_moving_average
(the .public (weighted it)
  (Average Dec)
  (|> it
      (//#mix (function (_ sample [weight summation])
                [(d.+ +1.0 weight)
                 (|> sample (d.* weight) (d.+ summation))])
              [+1.0 +0.0])
      product.right
      (d./ (n.dec (summation_up_to (-- (//.size it)))))))
