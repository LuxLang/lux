... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [order (.only Order)]
    [enum (.only Enum)]
    [codec (.only Codec)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)]]
   [math
    [number
     ["n" nat]]]
   [meta
    [macro
     ["^" pattern]
     ["[0]" template]]]]])

(every .public Month
  (Variant
   {#January}
   {#February}
   {#March}
   {#April}
   {#May}
   {#June}
   {#July}
   {#August}
   {#September}
   {#October}
   {#November}
   {#December}))

(the .public equivalence
  (Equivalence Month)
  (implementation
   (the (= expected actual)
     (when [expected actual]
       (^.with_template [<tag>]
         [[{<tag>} {<tag>}]
          true])
       ([#January]
        [#February]
        [#March]
        [#April]
        [#May]
        [#June]
        [#July]
        [#August]
        [#September]
        [#October]
        [#November]
        [#December])

       _
       false))))

(with_expansions [<pairs> (these [01 #January]
                                 [02 #February]
                                 [03 #March]
                                 [04 #April]
                                 [05 #May]
                                 [06 #June]
                                 [07 #July]
                                 [08 #August]
                                 [09 #September]
                                 [10 #October]
                                 [11 #November]
                                 [12 #December])]
  (these (the .public (number month)
           (-> Month Nat)
           (when month
             (^.with_template [<number> <month>]
               [{<month>}
                <number>])
             (<pairs>)))

         (exception.the .public (invalid_month number)
           (Exception Nat)
           (exception.report
            (list ["Number" (of n.decimal encoded number)]
                  ["Valid range" (.text_composite# (of n.decimal encoded (..number {#January}))
                                                   " ~ "
                                                   (of n.decimal encoded (..number {#December})))])))

         (the .public (by_number number)
           (-> Nat (Try Month))
           (when number
             (^.with_template [<number> <month>]
               [<number>
                {try.#Success {<month>}}])
             (<pairs>)
             
             _
             (exception.except ..invalid_month [number]))))
  )

(the .public hash
  (Hash Month)
  (implementation
   (the equivalence ..equivalence)
   (the (hash month)
     (when month
       (^.with_template [<prime> <month>]
         [{<month>}
          <prime>])
       ([02 #January]
        [03 #February]
        [05 #March]
        [07 #April]
        [11 #May]
        [13 #June]
        [17 #July]
        [19 #August]
        [23 #September]
        [29 #October]
        [31 #November]
        [37 #December])))))

(the .public order
  (Order Month)
  (implementation
   (the equivalence ..equivalence)
   
   (the (< reference it)
     (n.< (..number reference)
          (..number it)))))

(the .public enum
  (Enum Month)
  (implementation
   (the order ..order)
   
   (the (succ month)
     (when month
       {#January}   {#February}
       {#February}  {#March}
       {#March}     {#April}
       {#April}     {#May}
       {#May}       {#June}
       {#June}      {#July}
       {#July}      {#August}
       {#August}    {#September}
       {#September} {#October}
       {#October}   {#November}
       {#November}  {#December}
       {#December}  {#January}))
   
   (the (pred month)
     (when month
       {#February}  {#January}
       {#March}     {#February}
       {#April}     {#March}
       {#May}       {#April}
       {#June}      {#May}
       {#July}      {#June}
       {#August}    {#July}
       {#September} {#August}
       {#October}   {#September}
       {#November}  {#October}
       {#December}  {#November}
       {#January}   {#December}))))

(the .public (days month)
  (-> Month Nat)
  (when month
    (^.with_template [<days> <month>]
      [{<month>}
       <days>])
    ([31 #January]
     [28 #February]
     [31 #March]
     
     [30 #April]
     [31 #May]
     [30 #June]
     
     [31 #July]
     [31 #August]
     [30 #September]
     
     [31 #October]
     [30 #November]
     [31 #December])))

(the .public (leap_year_days month)
  (-> Month Nat)
  (when month
    {#February} (++ (..days month))
    _ (..days month)))

(the .public year
  (List Month)
  (list {#January}
        {#February}
        {#March}
        {#April}
        {#May}
        {#June}
        {#July}
        {#August}
        {#September}
        {#October}
        {#November}
        {#December}))

(exception.the .public (not_a_month_of_the_year value)
  (Exception Text)
  (exception.report
   (list ["Value" (text.format value)])))

(the .public codec
  (Codec Text Month)
  (implementation
   (the (encoded value)
     (when value
       (^.with_template [<tag>]
         [{<tag>}
          (text.replaced "#" "" (template.text [<tag>]))])
       ([..#January]
        [..#February]
        [..#March]
        [..#April]
        [..#May]
        [..#June]
        [..#July]
        [..#August]
        [..#September]
        [..#October]
        [..#November]
        [..#December])))
   (the (decoded value)
     (when (text#composite "#" value)
       (^.with_template [<tag>]
         [(template.text [<tag>])
          {try.#Success {<tag>}}])
       ([..#January]
        [..#February]
        [..#March]
        [..#April]
        [..#May]
        [..#June]
        [..#July]
        [..#August]
        [..#September]
        [..#October]
        [..#November]
        [..#December])
       _ (exception.except ..not_a_month_of_the_year [value])))))
