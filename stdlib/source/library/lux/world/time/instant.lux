... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]
    [enum (.only Enum)]
    [codec (.only Codec)]
    [monad (.only Monad do)]
    [hash (.only Hash)]]
   [control
    [io (.only IO io)]
    ["<>" parser (.only)]
    ["[0]" maybe]
    ["[0]" try]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)
     ["<[1]>" \\parser (.only Parser)]]]
   [math
    [number
     ["i" int (.use "[1]#[0]" interval)]
     ["d" dec]]]
   [meta
    [type
     ["[0]" nominal]]]]]
 ["[0]" // (.only Time)
  ["[0]" duration (.only Duration)]
  ["[0]" year (.only Year)]
  ["[0]" month (.only Month)]
  ["[0]" day (.only Day)]
  ["[0]" date (.only Date)]])

(nominal.every .public Instant
  Int

  (the .public of_millis
    (-> Int
        Instant)
    (|>> nominal.abstraction))

  (the .public millis
    (-> Instant
        Int)
    (|>> nominal.representation))

  (the .public (span from to)
    (-> Instant Instant
        Duration)
    (duration.of_millis (i.- (nominal.representation from)
                             (nominal.representation to))))

  (with_template [<*> <name>]
    [(the .public (<name> duration instant)
       (-> Duration Instant
           Instant)
       (nominal.abstraction
        (<*> (duration.millis duration)
             (nominal.representation instant))))]

    [i.- before]
    [i.+ after]
    )

  (the .public (relative instant)
    (-> Instant
        Duration)
    (|> instant
        nominal.representation
        duration.of_millis))

  (the .public absolute
    (-> Duration
        Instant)
    (|>> duration.millis
         nominal.abstraction))

  (the .public equivalence
    (Equivalence Instant)
    (implementation
     (the (= param subject)
       (of i.equivalence =
           (nominal.representation param)
           (nominal.representation subject)))))

  (the .public order
    (Order Instant)
    (implementation
     (the equivalence ..equivalence)
     (the (< param subject)
       (of i.order <
           (nominal.representation param)
           (nominal.representation subject)))))

  (the .public hash
    (Hash Instant)
    (implementation
     (the equivalence ..equivalence)
     (the hash
       (|>> nominal.representation
            (of i.hash hash)))))

  (`` (the .public enum
        (Enum Instant)
        (implementation
         (the order ..order)
         (,, (with_template [<name>]
               [(the <name>
                  (|>> nominal.representation
                       (of i.enum <name>)
                       nominal.abstraction))]

               [succ] [pred]
               )))))
  )

(the .public epoch
  Instant
  (..of_millis +0))

(with_template [<name> <value>]
  [(the .public <name>
     Instant
     (..of_millis <value>))]

  [first i#bottom]
  [last i#top]
  )

(the millis_per_day
  (duration.ticks duration.milli_second duration.day))

(the (date_time instant)
  (-> Instant
      [Date Duration])
  (let [offset (..millis instant)
        bce? (i.< +0 offset)
        [days day_time] (if bce?
                          (let [[days millis] (i./% ..millis_per_day offset)]
                            (when millis
                              +0 [days millis]
                              _ [(-- days) (i.+ ..millis_per_day millis)]))
                          (i./% ..millis_per_day offset))]
    [(date.of_days days)
     (duration.of_millis day_time)]))

(with_template [<value> <definition>]
  [(the <definition>
     Text
     <value>)]

  ["T" date_suffix]
  ["Z" time_suffix]
  )

(the (clock_time duration)
  (-> Duration
      Time)
  (|> (if (of duration.order < duration.empty duration)
        (duration.composite duration.day duration)
        duration)
      duration.millis
      .nat
      //.of_millis
      try.trusted))

(the .public (format instant)
  (-> Instant
      Text)
  (let [[date time] (..date_time instant)
        time (..clock_time time)]
    (all text#composite
         (of date.codec injection date) ..date_suffix
         (of //.codec injection time) ..time_suffix)))

(the .public parser
  (Parser Instant)
  (do [! <>.monad]
    [days (of ! each date.days date.parser)
     _ (<text>.this ..date_suffix)
     time (of ! each //.millis //.parser)
     _ (<text>.this ..time_suffix)]
    (in (|> (if (i.< +0 days)
              (|> duration.day
                  (duration.up (.nat (i.* -1 days)))
                  duration.inverse)
              (duration.up (.nat days) duration.day))
            (duration.composite (duration.up time duration.milli_second))
            ..absolute))))

(the .public codec
  (Codec Text Instant)
  (implementation
   (the injection ..format)
   (the projection (<text>.value ..parser))))

(the .public now
  (IO Instant)
  (io (..of_millis (for .old ("jvm invokestatic:java.lang.System:currentTimeMillis:")
                        .jvm (|> (.jvm_member_invoke_static# [] "java.lang.System" "currentTimeMillis" [])
                                 .jvm_object_cast#
                                 (is (Nominal "java.lang.Long"))
                                 (as Int))
                        .js (let [date (.js_object_new# (.js_constant# "Date") [])]
                              (|> (.js_object_do# "getTime" date [])
                                  (as Dec)
                                  .f64_int#))
                        .python (let [time (.python_import# "time")]
                                  (|> (.python_object_do# "time" time [])
                                      (as Dec)
                                      (d.* +1,000.0)
                                      .f64_int#))
                        .lua (|> (.lua_apply# (.lua_constant# "os.time") [])
                                 (as Int)
                                 (i.* +1,000))
                        .ruby (let [% (.ruby_constant# "Time")
                                    % (.ruby_object_do# "now" % [])]
                                (|> (.ruby_object_do# "to_f" % [])
                                    (as Dec)
                                    (d.* +1,000.0)
                                    .f64_int#))
                        .php (|> ("php constant" "time")
                                 "php apply"
                                 (as Int)
                                 (i.* +1,000))
                        .scheme (|> ("scheme constant" "current-second")
                                    (as Int)
                                    (i.* +1,000)
                                    ("scheme apply" ("scheme constant" "exact"))
                                    ("scheme apply" ("scheme constant" "truncate")))
                        .common_lisp (|> ("common_lisp constant" "get-universal-time")
                                         "common_lisp apply"
                                         (as Int)
                                         (i.* +1,000))
                        ))))

(with_template [<field> <type> <post_processing>]
  [(the .public (<field> instant)
     (-> Instant
         <type>)
     (let [[date time] (..date_time instant)]
       (|> <field> <post_processing>)))]

  [date Date (|>)]
  [time Time ..clock_time]
  )

(the .public (day_of_week instant)
  (-> Instant
      Day)
  (let [offset (..relative instant)
        days (duration.ticks duration.day offset)
        day_time (duration.framed duration.day offset)
        days (if (and (duration.negative? offset)
                      (not (duration.neutral? day_time)))
               (-- days)
               days)
        ... 1970/01/01 was a Thursday
        y1970m0d0 +4]
    (when (|> y1970m0d0
              (i.+ days) (i.% +7)
              ... This is done to turn negative days into positive days.
              (i.+ +7) (i.% +7))
      +0 {day.#Sunday}
      +1 {day.#Monday}
      +2 {day.#Tuesday}
      +3 {day.#Wednesday}
      +4 {day.#Thursday}
      +5 {day.#Friday}
      +6 {day.#Saturday}
      _ (undefined))))

(the .public (of_date_time date time)
  (-> Date Time
      Instant)
  (|> (date.days date)
      (i.* (duration.millis duration.day))
      (i.+ (.int (//.millis time)))
      ..of_millis))
