... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]
    [monad (.only do)]]
   [algorithm
    [mix (.only Mix)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    [text
     ["%" \\injection]]
    [collection
     ["/" sequence (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" natural]]]
   [meta
    [type (.only sharing)]
    [macro
     ["[0]" template]]]]]
 [//
  ["[0]" duration (.only Duration)]
  ["[0]" instant (.only Instant) (.use "[1]#[0]" order)]])

(every .public (Series of)
  (Record
   [#start Instant
    #interval Duration
    #data (/.Sequence of)]))

(the .public (equivalence super)
  (for_any (_ of)
    (-> (Equivalence of)
        (Equivalence (Series of))))
  (all product.equivalence
       instant.equivalence
       duration.equivalence
       (/.equivalence super)
       ))

(the .public functor
  (Functor Series)
  (implementation
   (the (each $)
     (|>> (revised #data (/#each $))))))

(the .public mix
  (Mix Series)
  (implementation
   (the (mix $ init)
     (|>> (its #data)
          (/#mix $ init)))))

(the .public size
  (for_any (_ of)
    (-> (Series of)
        Natural))
  (|>> (its #data)
       /.size))

(the .public start
  (for_any (_ of)
    (-> (Series of)
        Instant))
  (its #start))

(the .public (end it)
  (for_any (_ of)
    (-> (Series of)
        Instant))
  (instant.after (duration.up (-- (/.size (its #data it)))
                              (its #interval it))
                 (its #start it)))

(the .public (at event it)
  (for_any (_ of)
    (-> Natural (Series of)
        Instant))
  (instant.after (duration.up event (its #interval it))
                 (its #start it)))

(exception.the .public empty)

(template.with [<index> <name>]
  [(the .public (<name> it)
     (for_any (_ of)
       (-> (Series of)
           (Try of)))
     (let [data (its #data it)]
       (when (/.size data)
         0 (exception.except ..empty [])
         @ (/.item <index> data))))]

  [(|> 0) first]
  [(-- @) last]
  )

(exception.the .public (window_goes_out_of_bounds [offset size max_size])
  (Exception [Natural Natural Natural])
  (exception.report
   (list ["From" (%.natural offset)]
         ["To" (%.natural (n.+ offset size))]
         ["Maximum" (%.natural max_size)])))

(the .public (window offset size it)
  (for_any (_ of)
    (-> Natural Natural (Series of)
        (Try (Series of))))
  (if (n.< (n.+ offset size)
           (..size it))
    (exception.except ..window_goes_out_of_bounds [offset size (..size it)])
    (let [input (its #data it)]
      (loop (again [item 0
                    output (sharing [of]
                             (is (/.Sequence of)
                                 input)
                             (is (/.Sequence of)
                                 /.empty))])
        (if (n.< size item)
          (do try.monad
            [it (/.item (n.+ offset item) input)]
            (again (++ item) (/.suffix it output)))
          {try.#Success (let [interval (its #interval it)]
                          [#start (instant.after (duration.up offset interval)
                                                 (its #start it))
                           #interval interval
                           #data output])})))))
