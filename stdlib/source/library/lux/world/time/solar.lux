... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io (.only IO) (.use "[1]#[0]" functor)]]
   [data
    [text
     ["%" \\injection (.only Injection)]]]
   [math
    [number
     ["n" nat]
     ["i" int]
     ["d" dec]]]
   [meta
    [type
     ["[0]" nominal]]
    [macro
     ["[0]" template]]]]]
 ["[0]" //
  ["[1]" instant]
  ["[0]" duration (.only Duration)]])

(every .public Zone
  Text)

(nominal.every .public Instant
  (Record
   [#utc //.Instant
    #zone Zone
    #offset Duration])

  (template.with [<name> <slot> <type>]
    [(the .public <name>
       (-> Instant <type>)
       (|>> nominal.representation
            (its <slot>)))]

    [universal #utc //.Instant]
    [zone #zone Zone]
    [offset #offset Duration]
    )

  (for .jvm (these (ffi.import java/lang/String
                     "[1]::[0]")
                   
                   (ffi.import java/util/TimeZone
                     "[1]::[0]"
                     ("static" getDefault [] "io" java/util/TimeZone)
                     (getID [] java/lang/String)
                     (getOffset [long] int))
                   )
       .js (these (ffi.import ResolvedOptions
                    "[1]::[0]"
                    (timeZone Text))

                  (ffi.import DateTimeFormat
                    "[1]::[0]"
                    (resolvedOptions [] ResolvedOptions))

                  (ffi.import Intl
                    "[1]::[0]"
                    ("static" DateTimeFormat [] "io" DateTimeFormat))

                  (ffi.import Date
                    "[1]::[0]"
                    (new [])
                    (getTimezoneOffset [] ffi.Number))
                  )
       .lua (these (ffi.import os/date
                     "[1]::[0]"
                     (hour Int)
                     (min Int))

                   (ffi.import os
                     "[1]::[0]"
                     ("static" date [Text] "io" os/date)))
       .python (these (ffi.import datetime/timedelta
                        "[1]::[0]")

                      (ffi.import datetime/timezone
                        "[1]::[0]")
                      
                      (ffi.import datetime/utcoffset
                        "[1]::[0]"
                        (total_seconds [] Dec))

                      (ffi.import datetime/datetime
                        "[1]::[0]"
                        (now [datetime/timezone] "io" datetime/datetime)
                        (utcoffset [] datetime/utcoffset)
                        (astimezone [] datetime/datetime)
                        (tzinfo datetime/timezone)
                        (tzname [] Text))

                      (ffi.import datetime
                        "[1]::[0]"
                        ("static" timedelta [Int] datetime/timedelta)
                        ("static" timezone [datetime/timedelta] datetime/timezone)
                        ("static" datetime datetime/datetime))
                      )
       .ruby (these (ffi.import "time" Time
                      "[2]/[1]::[0]"
                      ("static" now [] "io" Time)
                      (zone Text)
                      ("static" zone_offset [Text] "io" Int)))
       )

  (the .public local_zone
    (IO Zone)
    (do [! io.monad]
      [_ (in [])]
      (for .jvm (|> (java/util/TimeZone::getDefault [])
                    (io#each (|>> (java/util/TimeZone::getID [])
                                  ffi.of_string)))
           .js (|> (Intl::DateTimeFormat [])
                   (io#each (|>> (DateTimeFormat::resolvedOptions [])
                                 ResolvedOptions::timeZone)))
           .lua (in "")
           .python (do !
                     [it (datetime::datetime)]
                     (io#each (|>> (datetime/datetime::astimezone [])
                                   (datetime/datetime::tzname []))
                              (datetime/datetime::now [(datetime::timezone [(datetime::timedelta [+0])])]
                                                      it)))
           .ruby (|> (time/Time::now [])
                     (io#each time/Time::zone))
           )))

  (the .public now
    (IO Instant)
    (do [! io.monad]
      [_ (in [])]
      (for .jvm (do !
                  [zone (java/util/TimeZone::getDefault [])
                   utc //.now]
                  (in (nominal.abstraction
                       [#utc utc
                        #zone (ffi.of_string (java/util/TimeZone::getID [] zone))
                        #offset (|> zone
                                    (java/util/TimeZone::getOffset [(|> utc //.millis ffi.as_long)])
                                    ffi.of_int
                                    duration.of_millis)])))
           .js (do !
                 [zone ..local_zone
                  utc //.now]
                 (in (nominal.abstraction
                      [#utc utc
                       #zone zone
                       #offset (|> (Date::new [])
                                   (Date::getTimezoneOffset [])
                                   d.int
                                   (i.* -60,000)
                                   duration.of_millis)])))
           .lua (do !
                  [zone ..local_zone
                   univeral (os::date ["*t"])
                   solar (os::date ["!*t"])
                   utc //.now]
                  (in (nominal.abstraction
                       [#utc utc
                        #zone zone
                        #offset (|> (i.- (os/date::hour solar)
                                         (os/date::hour univeral))
                                    (i.* +60)
                                    (i.+ (i.- (os/date::min solar)
                                              (os/date::min univeral)))
                                    (i.* +60,000)
                                    duration.of_millis)])))
           .python (do !
                     [it (datetime::datetime)
                      tz_now (|> it
                                 (datetime/datetime::now [(datetime::timezone [(datetime::timedelta [+0])])])
                                 (of ! each (datetime/datetime::astimezone [])))
                      offset (|> it
                                 (datetime/datetime::now [(datetime/datetime::tzinfo tz_now)])
                                 (of ! each (|>> (datetime/datetime::utcoffset [])
                                                 (datetime/utcoffset::total_seconds [])
                                                 d.int
                                                 (i.* +1000)
                                                 duration.of_millis)))
                      utc //.now]
                     (in (nominal.abstraction
                          [#utc utc
                           #zone (datetime/datetime::tzname [] tz_now)
                           #offset offset])))
           .ruby (do !
                   [zone ..local_zone
                    seconds (time/Time::zone_offset [zone])
                    utc //.now]
                   (in (nominal.abstraction
                        [#utc utc
                         #zone zone
                         #offset (duration.of_millis (i.* +1000 seconds))])))
           )))

  (the (sign it)
    (-> Int Text)
    (if (i.< +0 it)
      "-"
      "+"))

  (the .public (injection it)
    (Injection Instant)
    (let [it (nominal.representation it)]
      (%.message (//.injection (//.after (its #offset it) (its #utc it)))
                 (let [hours (|> (its #offset it)
                                 (duration.ticks duration.hour))
                       minutes (|> (its #offset it)
                                   (duration.framed duration.hour)
                                   (duration.ticks duration.minute))
                       segment (|>> .nat
                                    (of (n.padded 2 n.decimal) injection))]
                   (%.message (sign hours) (segment (i.abs hours))
                              ":" (segment minutes))))))
  )
