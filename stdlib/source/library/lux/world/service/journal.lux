(.module:
  [library
   [lux #*
    [control
     [equivalence (#+ Equivalence)]
     [interval (#+ Interval)]
     [try (#+ Try)]
     [security
      ["!" capability (#+ capability:)]]]
    [data
     ["." text ("#\." equivalence)]]
    [time
     ["." instant (#+ Instant) ("#\." equivalence)]]]])

(type: .public (Entry a)
  {#what  a
   #why   Text
   #how   Text
   #who   Text
   #where Text
   #when  Instant})

(type: .public Range
  (Interval Instant))

(def: .public (range start end)
  (-> Instant Instant Range)
  (implementation
   (def: &enum instant.enum)
   (def: bottom start)
   (def: top end)))

(implementation: .public (equivalence (^open "_\."))
  (All [a] (-> (Equivalence a) (Equivalence (Entry a))))
  (def: (= reference sample)
    (and (_\= (get@ #what reference) (get@ #what sample))
         (text\= (get@ #why reference) (get@ #why sample))
         (text\= (get@ #how reference) (get@ #how sample))
         (text\= (get@ #who reference) (get@ #who sample))
         (text\= (get@ #where reference) (get@ #where sample))
         (instant\= (get@ #when reference) (get@ #when sample)))))

(capability: .public (Can_Write ! a)
  (can_write (Entry a) (! (Try Any))))

(capability: .public (Can_Read ! a)
  (can_read Range (! (Try (List (Entry a))))))

(type: .public (Journal ! a)
  {#can_write (Can_Write ! a)
   #can_read (Can_Read ! a)})
