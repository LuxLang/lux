(.module:
  [library
   [lux #*
    [control
     [equivalence (#+ Equivalence)]
     [interval (#+ Interval)]
     [try (#+ Try)]
     [security
      ["!" capability (#+ capability:)]]]
    [data
     ["." text ("#\." equivalence)]]
    [time
     ["." instant (#+ Instant) ("#\." equivalence)]]]])

(type: .public (Entry a)
  (Record
   [#what  a
    #why   Text
    #how   Text
    #who   Text
    #where Text
    #when  Instant]))

(type: .public Range
  (Interval Instant))

(def: .public (range start end)
  (-> Instant Instant Range)
  (implementation
   (def: &enum instant.enum)
   (def: bottom start)
   (def: top end)))

(implementation: .public (equivalence (^open "_\."))
  (All (_ a) (-> (Equivalence a) (Equivalence (Entry a))))
  (def: (= reference sample)
    (and (_\= (value@ #what reference) (value@ #what sample))
         (text\= (value@ #why reference) (value@ #why sample))
         (text\= (value@ #how reference) (value@ #how sample))
         (text\= (value@ #who reference) (value@ #who sample))
         (text\= (value@ #where reference) (value@ #where sample))
         (instant\= (value@ #when reference) (value@ #when sample)))))

(capability: .public (Can_Write ! a)
  (can_write (Entry a) (! (Try Any))))

(capability: .public (Can_Read ! a)
  (can_read Range (! (Try (List (Entry a))))))

(type: .public (Journal ! a)
  (Record
   [#can_write (Can_Write ! a)
    #can_read (Can_Read ! a)]))
