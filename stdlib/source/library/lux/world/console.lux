(.using
 [library
  [lux "*"
   ["@" target]
   ["[0]" ffi {"+" import:}]
   [abstract
    [monad {"+" do}]]
   [control
    ["[0]" maybe]
    ["[0]" try {"+" Try} ("[1]#[0]" functor)]
    ["[0]" exception {"+" exception:}]
    ["[0]" io {"+" IO io} ("[1]#[0]" functor)]
    [concurrency
     ["[0]" async {"+" Async} ("[1]#[0]" monad)]
     ["[0]" atom]]]
   [data
    ["[0]" text {"+" Char}
     ["%" format {"+" format}]]]]])

(type: .public (Console !)
  (Interface
   (: (-> [] (! (Try Char)))
      read)
   (: (-> [] (! (Try Text)))
      read_line)
   (: (-> Text (! (Try Any)))
      write)
   (: (-> [] (! (Try Any)))
      close)))

(def: .public (async console)
  (-> (Console IO) (Console Async))
  (`` (implementation
       (~~ (template [<capability>]
             [(def: <capability>
                (|>> (# console <capability>) async.future))]

             [read]
             [read_line]
             [write]
             [close])))))

(exception: .public cannot_close)

(with_expansions [<jvm> (as_is (import: java/lang/String
                                 "[1]::[0]")

                               (import: java/io/Console
                                 "[1]::[0]"
                                 (readLine [] "io" "try" java/lang/String))

                               (import: java/io/InputStream
                                 "[1]::[0]"
                                 (read [] "io" "try" int))

                               (import: java/io/PrintStream
                                 "[1]::[0]"
                                 (print [java/lang/String] "io" "try" void))

                               (import: java/lang/System
                                 "[1]::[0]"
                                 ("static" console [] "io" "?" java/io/Console)
                                 ("static" in java/io/InputStream)
                                 ("static" out java/io/PrintStream))

                               (exception: .public cannot_open)

                               (def: .public default
                                 (IO (Try (Console IO)))
                                 (do io.monad
                                   [?jvm_console (java/lang/System::console)]
                                   (case ?jvm_console
                                     {.#None}
                                     (in (exception.except ..cannot_open []))

                                     {.#Some jvm_console}
                                     (let [jvm_input (java/lang/System::in)
                                           jvm_output (java/lang/System::out)]
                                       (<| in
                                           {try.#Success}
                                           (: (Console IO)) ... TODO: Remove ASAP
                                           (implementation
                                            (def: (read _)
                                              (|> jvm_input
                                                  java/io/InputStream::read
                                                  (# (try.with io.monad) each (|>> ffi.of_int .nat))))
                                            
                                            (def: (read_line _)
                                              (io#each (try#each (|>> ffi.of_string))
                                                       (java/io/Console::readLine jvm_console)))
                                            
                                            (def: (write message)
                                              (java/io/PrintStream::print (ffi.as_string message) jvm_output))
                                            
                                            (def: close
                                              (|>> (exception.except ..cannot_close) in)))))))))]
  (for @.old (as_is <jvm>)
       @.jvm (as_is <jvm>)
       @.js (as_is (ffi.import: Buffer
                     "[1]::[0]"
                     (toString [] ffi.String))

                   (ffi.import: Readable_Stream
                     "[1]::[0]"
                     (read [] "?" Buffer)
                     (unshift "as" unshift|String [ffi.String] ffi.Boolean)
                     (unshift "as" unshift|Buffer [Buffer] ffi.Boolean))

                   (ffi.import: Writable_Stream
                     "[1]::[0]"
                     (write [ffi.String ffi.Function] ffi.Boolean)
                     (once [ffi.String ffi.Function] Any))

                   (ffi.import: process
                     "[1]::[0]"
                     ("static" stdout Writable_Stream)
                     ("static" stdin Readable_Stream))

                   (exception: .public cannot_read)

                   (template: (!read <type> <query>)
                     [(let [it (process::stdin)]
                        (case (Readable_Stream::read it)
                          {.#Some buffer}
                          (let [input (Buffer::toString buffer)]
                            (case (: (Maybe [<type> Text])
                                     <query>)
                              {.#Some [head tail]}
                              (exec
                                (Readable_Stream::unshift|String tail it)
                                (async#in {try.#Success head}))
                              
                              {.#None}
                              (exec
                                (Readable_Stream::unshift|Buffer buffer it)
                                (async#in (exception.except ..cannot_read [])))))

                          {.#None}
                          (async#in (exception.except ..cannot_read []))))])

                   (def: .public default
                     (Maybe (Console Async))
                     (if ffi.on_node_js?
                       {.#Some (implementation
                                (def: (read _)
                                  (!read Char (do maybe.monad
                                                [head (text.char 0 input)
                                                 [_ tail] (text.split_at 1 input)]
                                                (in [head tail]))))
                                
                                (def: (read_line _)
                                  (!read Text (text.split_by text.\n input)))
                                
                                (def: (write it)
                                  (let [[read! write!] (: [(async.Async (Try [])) (async.Resolver (Try []))]
                                                          (async.async []))]
                                    (exec
                                      (Writable_Stream::write it (ffi.function (_ []) Any (io.run! (write! {try.#Success []})))
                                                              (process::stdout))
                                      read!)))
                                
                                (def: close
                                  (|>> (exception.except ..cannot_close) async#in)))}
                       {.#None})))
       (as_is)))

(def: .public (write_line message console)
  (All (_ !) (-> Text (Console !) (! (Try Any))))
  (# console write (format message text.new_line)))

(type: .public (Mock s)
  (Interface
   (: (-> s (Try [s Char]))
      on_read)
   (: (-> s (Try [s Text]))
      on_read_line)
   (: (-> Text s (Try s))
      on_write)
   (: (-> s (Try s))
      on_close)))

(def: .public (mock mock init)
  (All (_ s) (-> (Mock s) s (Console IO)))
  (let [state (atom.atom init)]
    (`` (implementation
         (~~ (template [<method> <mock>]
               [(def: (<method> _)
                  (do [! io.monad]
                    [|state| (atom.read! state)]
                    (case (# mock <mock> |state|)
                      {try.#Success [|state| output]}
                      (do !
                        [_ (atom.write! |state| state)]
                        (in {try.#Success output}))
                      
                      {try.#Failure error}
                      (in {try.#Failure error}))))]

               [read on_read]
               [read_line on_read_line]
               ))

         (def: (write input)
           (do [! io.monad]
             [|state| (atom.read! state)]
             (case (# mock on_write input |state|)
               {try.#Success |state|}
               (do !
                 [_ (atom.write! |state| state)]
                 (in {try.#Success []}))
               
               {try.#Failure error}
               (in {try.#Failure error}))))

         (def: (close _)
           (do [! io.monad]
             [|state| (atom.read! state)]
             (case (# mock on_close |state|)
               {try.#Success |state|}
               (do !
                 [_ (atom.write! |state| state)]
                 (in {try.#Success []}))
               
               {try.#Failure error}
               (in {try.#Failure error}))))
         ))))
