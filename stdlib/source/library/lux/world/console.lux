... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["[0]" ffi (.only import)]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception]
    ["[0]" io (.only IO io) (.use "[1]#[0]" functor)]
    [concurrency
     ["[0]" async (.only Async) (.use "[1]#[0]" monad)]
     ["[0]" atom]]]
   [data
    ["[0]" text (.only)
     [char (.only Char)]
     ["%" \\format (.only format)]]]
   [meta
    [compiler
     ["@" target]]]]])

(type .public (Console !)
  (Interface
   (is (-> [] (! (Try Char)))
       read)
   (is (-> [] (! (Try Text)))
       read_line)
   (is (-> Text (! (Try Any)))
       write)
   (is (-> [] (! (Try Any)))
       close)))

(def .public (async console)
  (-> (Console IO) (Console Async))
  (`` (implementation
       (,, (with_template [<capability>]
             [(def <capability>
                (|>> (of console <capability>) async.future))]

             [read]
             [read_line]
             [write]
             [close]
             )))))

(exception.def .public cannot_close)

(with_expansions [<jvm> (these (import java/lang/String
                                 "[1]::[0]")

                               (import java/io/Console
                                 "[1]::[0]"
                                 (readLine [] "io" "try" java/lang/String))

                               (import java/io/InputStream
                                 "[1]::[0]"
                                 (read [] "io" "try" int))

                               (import java/io/PrintStream
                                 "[1]::[0]"
                                 (print [java/lang/String] "io" "try" void))

                               (import java/lang/System
                                 "[1]::[0]"
                                 ("static" console [] "io" "?" java/io/Console)
                                 ("read_only" "static" in java/io/InputStream)
                                 ("read_only" "static" out java/io/PrintStream))

                               (exception.def .public cannot_open)

                               (def .public default
                                 (IO (Try (Console IO)))
                                 (do io.monad
                                   [?jvm_console (java/lang/System::console)]
                                   (when ?jvm_console
                                     {.#None}
                                     (in (exception.except ..cannot_open []))

                                     {.#Some jvm_console}
                                     (let [jvm_input (java/lang/System::in)
                                           jvm_output (java/lang/System::out)]
                                       (<| in
                                           {try.#Success}
                                           (is (Console IO)) ... TODO: Remove ASAP
                                           (implementation
                                            (def (read _)
                                              (|> jvm_input
                                                  java/io/InputStream::read
                                                  (of (try.with io.monad) each (|>> ffi.of_int .nat))))
                                            
                                            (def (read_line _)
                                              (io#each (try#each (|>> ffi.of_string))
                                                       (java/io/Console::readLine jvm_console)))
                                            
                                            (def (write message)
                                              (java/io/PrintStream::print (ffi.as_string message) jvm_output))
                                            
                                            (def close
                                              (|>> (exception.except ..cannot_close) in)))))))))]
  (for @.old (these <jvm>)
       @.jvm (these <jvm>)
       @.js (these (ffi.import Buffer
                     "[1]::[0]"
                     (toString [] ffi.String))

                   (ffi.import Readable_Stream
                     "[1]::[0]"
                     (read [] "?" Buffer)
                     (unshift "as" unshift|String [ffi.String] ffi.Boolean)
                     (unshift "as" unshift|Buffer [Buffer] ffi.Boolean))

                   (ffi.import Writable_Stream
                     "[1]::[0]"
                     (write [ffi.String ffi.Function] ffi.Boolean)
                     (once [ffi.String ffi.Function] Any))

                   (ffi.import process
                     "[1]::[0]"
                     ("static" stdout Writable_Stream)
                     ("static" stdin Readable_Stream))

                   (exception.def .public cannot_read)

                   (def !read
                     (template (_ <type> <query>)
                       [(let [it (io.run! (process::stdin))]
                          (when (Readable_Stream::read it)
                            {.#Some buffer}
                            (let [input (Buffer::toString buffer)]
                              (when (is (Maybe [<type> Text])
                                        <query>)
                                {.#Some [head tail]}
                                (exec
                                  (Readable_Stream::unshift|String tail it)
                                  (async#in {try.#Success head}))
                                
                                {.#None}
                                (exec
                                  (Readable_Stream::unshift|Buffer buffer it)
                                  (async#in (exception.except ..cannot_read [])))))

                            {.#None}
                            (async#in (exception.except ..cannot_read []))))]))

                   (def .public default
                     (Maybe (Console Async))
                     (if ffi.on_node_js?
                       {.#Some (implementation
                                (def (read _)
                                  (!read Char (do maybe.monad
                                                [head (text.char 0 input)
                                                 [_ tail] (text.split_at 1 input)]
                                                (in [head tail]))))
                                
                                (def (read_line _)
                                  (!read Text (text.split_by text.\n input)))
                                
                                (def (write it)
                                  (let [[read! write!] (is [(async.Async (Try [])) (async.Resolver (Try []))]
                                                           (async.async []))]
                                    (exec
                                      (Writable_Stream::write it (ffi.function (_ []) Any (io.run! (write! {try.#Success []})))
                                                              (io.run! (process::stdout)))
                                      read!)))
                                
                                (def close
                                  (|>> (exception.except ..cannot_close) async#in)))}
                       {.#None})))
       (these)))

(def .public (write_line message console)
  (All (_ !) (-> Text (Console !) (! (Try Any))))
  (of console write (format message text.new_line)))

(type .public (Mock s)
  (Interface
   (is (-> s (Try [s Char]))
       on_read)
   (is (-> s (Try [s Text]))
       on_read_line)
   (is (-> Text s (Try s))
       on_write)
   (is (-> s (Try s))
       on_close)))

(def .public (mock mock init)
  (All (_ s) (-> (Mock s) s (Console IO)))
  (let [state (atom.atom init)]
    (`` (implementation
         (,, (with_template [<method> <mock>]
               [(def (<method> _)
                  (do [! io.monad]
                    [|state| (atom.read! state)]
                    (when (of mock <mock> |state|)
                      {try.#Success [|state| output]}
                      (do !
                        [_ (atom.write! |state| state)]
                        (in {try.#Success output}))
                      
                      {try.#Failure error}
                      (in {try.#Failure error}))))]

               [read on_read]
               [read_line on_read_line]
               ))

         (def (write input)
           (do [! io.monad]
             [|state| (atom.read! state)]
             (when (of mock on_write input |state|)
               {try.#Success |state|}
               (do !
                 [_ (atom.write! |state| state)]
                 (in {try.#Success []}))
               
               {try.#Failure error}
               (in {try.#Failure error}))))

         (def (close _)
           (do [! io.monad]
             [|state| (atom.read! state)]
             (when (of mock on_close |state|)
               {try.#Success |state|}
               (do !
                 [_ (atom.write! |state| state)]
                 (in {try.#Success []}))
               
               {try.#Failure error}
               (in {try.#Failure error}))))
         ))))
