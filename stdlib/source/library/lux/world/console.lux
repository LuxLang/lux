... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["[0]" ffi (.only import)]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception]
    ["[0]" io (.only IO io) (.use "[1]#[0]" functor)]
    [concurrency
     ["[0]" async (.only Async) (.use "[1]#[0]" monad)]
     ["[0]" atom]]]
   [data
    ["[0]" text (.only)
     [char (.only Char)]
     ["%" \\injection]]]
   [meta
    [macro
     ["[0]" expansion]]]]])

(every .public (Console !)
  (Interface
   (is (-> [] (! (Try Char)))
       read)
   (is (-> [] (! (Try Text)))
       read_line)
   (is (-> Text (! (Try Any)))
       write)
   (is (-> [] (! (Try Any)))
       close)))

(the .public (async console)
  (-> (Console IO) (Console Async))
  (`` (implementation
       (,, (with_template [<capability>]
             [(the <capability>
                (|>> (of console <capability>) async.future))]

             [read]
             [read_line]
             [write]
             [close]
             )))))

(exception.the .public cannot_close)

(expansion.let [<jvm> (these (import java/lang/String
                               "[1]::[0]")

                             (import java/io/Console
                               "[1]::[0]"
                               (readLine [] "io" "try" java/lang/String))

                             (import java/io/InputStream
                               "[1]::[0]"
                               (read [] "io" "try" int))

                             (import java/io/PrintStream
                               "[1]::[0]"
                               (print [java/lang/String] "io" "try" void))

                             (import java/lang/System
                               "[1]::[0]"
                               ("static" console [] "io" "?" java/io/Console)
                               ("read_only" "static" in java/io/InputStream)
                               ("read_only" "static" out java/io/PrintStream))

                             (exception.the .public cannot_open)

                             (the .public default
                               (IO (Try (Console IO)))
                               (do io.monad
                                 [?jvm_console (java/lang/System::console [])]
                                 (when ?jvm_console
                                   {.#None}
                                   (in (exception.except ..cannot_open []))

                                   {.#Some jvm_console}
                                   (let [jvm_input (java/lang/System::in)
                                         jvm_output (java/lang/System::out)]
                                     (<| in
                                         {try.#Success}
                                         (is (Console IO)) ... TODO: Remove ASAP
                                         (implementation
                                          (the (read _)
                                            (|> jvm_input
                                                (java/io/InputStream::read [])
                                                (of (try.with io.monad) each (|>> ffi.of_int .nat))))
                                          
                                          (the (read_line _)
                                            (io#each (try#each (|>> ffi.of_string))
                                                     (java/io/Console::readLine [] jvm_console)))
                                          
                                          (the (write message)
                                            (java/io/PrintStream::print [(ffi.as_string message)] jvm_output))
                                          
                                          (the close
                                            (|>> (exception.except ..cannot_close) in)))))))))]
  (for .old (these <jvm>)
       .jvm (these <jvm>)
       .js (these (ffi.import Buffer
                    "[1]::[0]"
                    (toString [] ffi.String))

                  (ffi.import Readable_Stream
                    "[1]::[0]"
                    (read [] "?" Buffer)
                    (unshift "as" unshift|String [ffi.String] ffi.Boolean)
                    (unshift "as" unshift|Buffer [Buffer] ffi.Boolean))

                  (ffi.import Writable_Stream
                    "[1]::[0]"
                    (write [ffi.String ffi.Function] ffi.Boolean)
                    (once [ffi.String ffi.Function] Any))

                  (ffi.import process
                    "[1]::[0]"
                    ("static" stdout Writable_Stream)
                    ("static" stdin Readable_Stream))

                  (exception.the .public cannot_read)

                  (the !read
                    (template (_ <type> <query>)
                      [(let [it (io.value (process::stdin))]
                         (when (Readable_Stream::read [] it)
                           {.#Some buffer}
                           (let [input (Buffer::toString [] buffer)]
                             (when (is (Maybe [<type> Text])
                                       <query>)
                               {.#Some [head tail]}
                               (exec
                                 (Readable_Stream::unshift|String [tail] it)
                                 (async#in {try.#Success head}))
                               
                               {.#None}
                               (exec
                                 (Readable_Stream::unshift|Buffer [buffer] it)
                                 (async#in (exception.except ..cannot_read [])))))

                           {.#None}
                           (async#in (exception.except ..cannot_read []))))]))

                  (the .public default
                    (Maybe (Console Async))
                    (if ffi.on_node_js?
                      {.#Some (implementation
                               (the (read _)
                                 (!read Char (do maybe.monad
                                               [head (text.char 0 input)
                                                [_ tail] (text.split_at 1 input)]
                                               (in [head tail]))))
                               
                               (the (read_line _)
                                 (!read Text (text.split_by text.\n input)))
                               
                               (the (write it)
                                 (let [[read! write!] (is [(async.Async (Try [])) (async.Resolver (Try []))]
                                                          (async.async []))]
                                   (exec
                                     (Writable_Stream::write [it (ffi.function (_ []) Any (io.value (write! {try.#Success []})))]
                                                             (io.value (process::stdout)))
                                     read!)))
                               
                               (the close
                                 (|>> (exception.except ..cannot_close) async#in)))}
                      {.#None})))
       (these)))

(the .public (write_line message console)
  (for_any (_ !) (-> Text (Console !) (! (Try Any))))
  (of console write (%.message message text.new_line)))

(every .public (Mock s)
  (Interface
   (is (-> s (Try [s Char]))
       on_read)
   (is (-> s (Try [s Text]))
       on_read_line)
   (is (-> Text s (Try s))
       on_write)
   (is (-> s (Try s))
       on_close)))

(the .public (mock mock init)
  (for_any (_ s)
    (-> (Mock s) s
        (Console IO)))
  (let [state (atom.atom init)]
    (`` (implementation
         (,, (with_template [<method> <mock>]
               [(the (<method> _)
                  (do [! io.monad]
                    [|state| (atom.read! state)]
                    (when (of mock <mock> |state|)
                      {try.#Success [|state| output]}
                      (do !
                        [_ (atom.write! |state| state)]
                        (in {try.#Success output}))
                      
                      {try.#Failure error}
                      (in {try.#Failure error}))))]

               [read on_read]
               [read_line on_read_line]
               ))

         (the (write input)
           (do [! io.monad]
             [|state| (atom.read! state)]
             (when (of mock on_write input |state|)
               {try.#Success |state|}
               (do !
                 [_ (atom.write! |state| state)]
                 (in {try.#Success []}))
               
               {try.#Failure error}
               (in {try.#Failure error}))))

         (the (close _)
           (do [! io.monad]
             [|state| (atom.read! state)]
             (when (of mock on_close |state|)
               {try.#Success |state|}
               (do !
                 [_ (atom.write! |state| state)]
                 (in {try.#Success []}))
               
               {try.#Failure error}
               (in {try.#Failure error}))))
         ))))
