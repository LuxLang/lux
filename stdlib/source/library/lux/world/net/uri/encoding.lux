... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Percent-encoding
(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     [character (.only Character)]]
    [collection
     ["[0]" set (.only Set)]]]
   [math
    [number
     ["[0]" natural]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]]])

(every .public URI_Encoded
  Text)

(expansion.let [<reserved> (these [" " "%20"]
                                  ["!" "%21"]
                                  ["#" "%23"]
                                  ["$" "%24"]
                                  ["%" "%25"]
                                  ["&" "%26"]
                                  ["'" "%27"]
                                  ["(" "%28"]
                                  [")" "%29"]
                                  ["*" "%2A"]
                                  ["+" "%2B"]
                                  ["," "%2C"]
                                  ["/" "%2F"]
                                  [":" "%3A"]
                                  [";" "%3B"]
                                  ["=" "%3D"]
                                  ["?" "%3F"]
                                  ["@" "%40"]
                                  ["[" "%5B"]
                                  ["]" "%5D"])]
  (these (the .public reserved
           (Set Character)
           (<| (set.of_list natural.hash)
               (`` (list (,, (template.with [<character> <encoding>]
                               [(character <character>)]
                               
                               <reserved>))))))
         
         (the .public (as_text input)
           (-> Text
               URI_Encoded)
           (let [size (text.size input)]
             (loop (again [index 0
                           slice_start 0
                           output ""])
               (if (natural.< size index)
                 (`` (when (.text_char# index input)
                       (,, (template.with [<character> <encoding>]
                             [(character <character>)
                              (let [index' (++ index)]
                                (again index'
                                       index'
                                       (.text_composite# output
                                                         (.text_clip# slice_start (natural.- slice_start index) input)
                                                         <encoding>)))]

                             <reserved>))
                       
                       _
                       (again (++ index)
                              slice_start
                              output)))
                 (.text_composite# output
                                   (.text_clip# slice_start (natural.- slice_start index) input)))))))
  )

(the escape
  (character "%"))

(exception.the (invalid it)
  (Exception URI_Encoded)
  (exception.report
   (list ["Value" (text.as_text it)])))

(the .public (of_text input)
  (-> URI_Encoded
      (Try Text))
  (let [size (text.size input)]
    (loop (again [index 0
                  slice_start 0
                  output ""])
      (if (natural.< size index)
        (`` (when (.text_char# index input)
              ..escape
              (let [encoding_start (++ index)
                    encoding_end (++ encoding_start)]
                (if (natural.< size encoding_end)
                  (do try.monad
                    [value (|> input
                               (.text_clip# encoding_start 2)
                               (by natural.hex of))
                     .let [index' (++ encoding_end)]]
                    (again index'
                           index'
                           (.text_composite# output
                                             (.text_clip# slice_start (natural.- slice_start index) input)
                                             (text.of_character value))))
                  (exception.except ..invalid [input])))
              
              _
              (again (++ index)
                     slice_start
                     output)))
        {try.#Success (|> input
                          (.text_clip# slice_start (natural.- slice_start index))
                          (.text_composite# output))}))))
