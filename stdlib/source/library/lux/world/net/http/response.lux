(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only Monad)]]
   [control
    ["[0]" try]
    [concurrency
     ["[0]" async (.only Async)]]]
   [data
    ["[0]" binary (.only Binary)]
    [text
     [encoding
      ["[0]" utf8]]]
    [format
     ["[0]" html]
     ["[0]" css (.only CSS)]
     ["[0]" json (.only JSON) (.use "[1]#[0]" codec)]]]]]
 ["[0]" // (.only Body Message)
  ["[0]" status (.only Status)]
  ["[0]" header]
  [// (.only URL)
   ["[0]" mime (.only MIME)]]])

(type .public (Response !)
  (Record
   [#status Status
    #message (Message !)]))

(def .public empty
  (All (_ !)
    (-> (Monad !) Status
        (Response !)))
  (function (_ ! status)
    [#status status
     #message [//.#headers (|> header.empty
                               (header.has header.content_length 0)
                               (header.has header.content_type mime.utf_8))
               //.#body (function (_ _)
                          (at ! in {try.#Success [0 (at utf8.codec encoded "")]}))]]))

(def .public (temporary_redirect ! to)
  (All (_ !)
    (-> (Monad !) URL
        (Response !)))
  (|> status.temporary_redirect
      (..empty !)
      (revised [#message //.#headers] (header.has header.location to))))

(def .public (not_found !)
  (All (_ !)
    (-> (Monad !)
        (Response !)))
  (..empty ! status.not_found))

(def .public (content ! status type data)
  (All (_ !)
    (-> (Monad !) Status MIME Binary
        (Response !)))
  (let [length (binary.size data)]
    [#status status
     #message [//.#headers (|> header.empty
                               (header.has header.content_length length)
                               (header.has header.content_type type))
               //.#body (function (_ _)
                          (at ! in {try.#Success [length data]}))]]))

(def .public (bad_request !)
  (All (_ !)
    (-> (Monad !) Text
        (Response !)))
  (|>> (at utf8.codec encoded)
       (content ! status.bad_request mime.utf_8)))

(def .public (ok !)
  (All (_ !)
    (-> (Monad !) MIME Binary
        (Response !)))
  (content ! status.ok))

(with_template [<name> <type> <mime> <pre>]
  [(def .public (<name> !)
     (All (_ !)
       (-> (Monad !) <type>
           (Response !)))
     (|>> <pre>
          (at utf8.codec encoded)
          (..ok ! <mime>)))]

  [text Text          mime.utf_8 (<|)]
  [html html.Document mime.html  html.html]
  [css  (CSS Any)     mime.css   css.css]
  [json JSON          mime.json  json#encoded]
  )
