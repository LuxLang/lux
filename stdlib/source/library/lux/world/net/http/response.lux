(.using
 [library
  [lux (.except static)
   [control
    [concurrency
     ["[0]" async]
     ["[0]" frp ("[1]#[0]" monad)]]]
   [data
    ["[0]" text
     ["[0]" encoding]]
    [format
     ["[0]" html]
     ["[0]" css (.only CSS)]
     ["[0]" context]
     ["[0]" json (.only JSON) ("[1]#[0]" codec)]]]
   ["[0]" io]
   [world
    ["[0]" binary (.only Binary)]]]]
 ["[0]" // (.only Status Body Response Server)
  ["[0]" status]
  ["[0]" mime (.only MIME)]
  ["[0]" header]
  [// (.only URL)]])

(def: .public (static response)
  (-> Response Server)
  (function (_ request)
    (async.resolved response)))

(def: .public empty
  (-> Status Response)
  (let [body (frp#in (# encoding.utf8 encoded ""))]
    (function (_ status)
      [status
       [//.#headers (|> context.empty
                        (header.content_length 0)
                        (header.content_type mime.utf_8))
        //.#body body]])))

(def: .public (temporary_redirect to)
  (-> URL Response)
  (let [[status message] (..empty status.temporary_redirect)]
    [status (revised //.#headers (header.location to) message)]))

(def: .public not_found
  Response
  (..empty status.not_found))

(def: .public (content status type data)
  (-> Status MIME Binary Response)
  [status
   [//.#headers (|> context.empty
                    (header.content_length (binary.size data))
                    (header.content_type type))
    //.#body (frp#in data)]])

(def: .public bad_request
  (-> Text Response)
  (|>> (# encoding.utf8 encoded) (content status.bad_request mime.utf_8)))

(def: .public ok
  (-> MIME Binary Response)
  (content status.ok))

(template [<name> <type> <mime> <pre>]
  [(def: .public <name>
     (-> <type> Response)
     (|>> <pre> (# encoding.utf8 encoded) (..ok <mime>)))]

  [text Text          mime.utf_8 (<|)]
  [html html.Document mime.html  html.html]
  [css  CSS           mime.css   css.css]
  [json JSON          mime.json  json#encoded]
  )
