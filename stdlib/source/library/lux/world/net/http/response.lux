(.module:
  [library
   [lux (#- static)
    [control
     [concurrency
      ["." async]
      ["." frp ("#\." monad)]]]
    [data
     ["." text
      ["." encoding]]
     [format
      ["." html]
      ["." css (#+ CSS)]
      ["." context]
      ["." json (#+ JSON) ("#\." codec)]]]
    ["." io]
    [world
     ["." binary (#+ Binary)]]]]
  ["." // (#+ Status Body Response Server)
   ["." status]
   ["." mime (#+ MIME)]
   ["." header]
   [// (#+ URL)]])

(def: #export (static response)
  (-> Response Server)
  (function (_ request)
    (async.resolved response)))

(def: #export empty
  (-> Status Response)
  (let [body (frp\in (\ encoding.utf8 encode ""))]
    (function (_ status)
      [status
       {#//.headers (|> context.empty
                        (header.content_length 0)
                        (header.content_type mime.utf_8))
        #//.body body}])))

(def: #export (temporary_redirect to)
  (-> URL Response)
  (let [[status message] (..empty status.temporary_redirect)]
    [status (update@ #//.headers (header.location to) message)]))

(def: #export not_found
  Response
  (..empty status.not_found))

(def: #export (content status type data)
  (-> Status MIME Binary Response)
  [status
   {#//.headers (|> context.empty
                    (header.content_length (binary.size data))
                    (header.content_type type))
    #//.body (frp\in data)}])

(def: #export bad_request
  (-> Text Response)
  (|>> (\ encoding.utf8 encode) (content status.bad_request mime.utf_8)))

(def: #export ok
  (-> MIME Binary Response)
  (content status.ok))

(template [<name> <type> <mime> <pre>]
  [(def: #export <name>
     (-> <type> Response)
     (|>> <pre> (\ encoding.utf8 encode) (..ok <mime>)))]

  [text Text          mime.utf_8 (<|)]
  [html html.Document mime.html  html.html]
  [css  CSS           mime.css   css.css]
  [json JSON          mime.json  json\encode]
  )
