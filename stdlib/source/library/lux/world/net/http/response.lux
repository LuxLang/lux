... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text)
   [abstract
    [monad (.only Monad)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" binary (.only Binary)]
    [text
     [encoding
      ["[0]" utf8]]]
    [format
     ["[0]" json (.only JSON) (.use "[1]#[0]" format)]]]
   [macro
    ["[0]" template]]
   [web
    ["[0]" html]
    ["[0]" css (.only CSS)]]]]
 ["[0]" // (.only Body Message)
  ["[0]" status (.only Status)]
  ["[0]" header]
  [// (.only URL)
   ["[0]" mime (.only MIME)]]])

(every .public (Response !)
  (Record
   [#status Status
    #message (Message !)]))

(the .public empty
  (for_any (_ !)
    (-> (Monad !) Status
        (Response !)))
  (function (_ ! status)
    [#status status
     #message [//.#headers (|> header.empty
                               (header.has header.content_length 0)
                               (header.has header.content_type mime.utf_8))
               //.#body (function (_ _)
                          (by ! pure {try.#Success [0 (by utf8.binary as "")]}))]]))

(the .public (temporary_redirect ! to)
  (for_any (_ !)
    (-> (Monad !) URL
        (Response !)))
  (|> status.temporary_redirect
      (..empty !)
      (revised [#message //.#headers] (header.has header.location to))))

(the .public (not_found !)
  (for_any (_ !)
    (-> (Monad !)
        (Response !)))
  (..empty ! status.not_found))

(the .public (content ! status type data)
  (for_any (_ !)
    (-> (Monad !) Status MIME Binary
        (Response !)))
  (let [length (binary.size data)]
    [#status status
     #message [//.#headers (|> header.empty
                               (header.has header.content_length length)
                               (header.has header.content_type type))
               //.#body (function (_ _)
                          (by ! pure {try.#Success [length data]}))]]))

(the .public (bad_request !)
  (for_any (_ !)
    (-> (Monad !) Text
        (Response !)))
  (|>> (by utf8.binary as)
       (content ! status.bad_request mime.utf_8)))

(the .public (ok !)
  (for_any (_ !)
    (-> (Monad !) MIME Binary
        (Response !)))
  (content ! status.ok))

(template.with [<name> <type> <mime> <pre>]
  [(the .public (<name> !)
     (for_any (_ !)
       (-> (Monad !) <type>
           (Response !)))
     (|>> <pre>
          (by utf8.binary as)
          (..ok ! <mime>)))]

  [text Text          mime.utf_8 (<|)]
  [html html.Document mime.html  html.html]
  [css  (CSS Any)     mime.css   css.css]
  [json JSON          mime.json  json#as]
  )
