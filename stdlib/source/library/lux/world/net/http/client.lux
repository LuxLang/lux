... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future)]]
   [control
    ["[0]" pipe]
    ["[0]" io (.only IO)]
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [error
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]]
   [data
    ["[0]" binary (.only Binary)]
    ["[0]" text]
    [collection
     ["[0]" dictionary]
     ["[0]" list (.use "[1]#[0]" mix)]
     ["[0]" array
      ["[1]" \\unsafe]]]]
   [math
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [macro
    ["[0]" syntax]
    ["[0]" template]
    ["[0]" expansion]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]]
 ["[0]" // (.only)
  [response (.only Response)]
  ["[0]" header (.only Headers)]
  [// (.only URL)
   [uri (.only URI)]]])

(every .public (Client !)
  (Interface
   (is (-> //.Method URL Headers (Maybe Binary)
           (! (Try (Response !))))
       request)))

(the method_function
  (syntax.macro (_ [[_ name] <code>.name])
    (pure (list (code.local (text.replaced "#" "" (text.lower_cased name)))))))

(template.with [<method>]
  [(expansion.let [<name> (method_function <method>)]
     (the .public (<name> url headers data client)
       (for_any (_ !)
         (-> URL Headers (Maybe Binary) (Client !)
             (! (Try (Response !)))))
       (by client request {<method>} url headers data)))]

  [[//.#Post]
   [//.#Get]
   [//.#Put]
   [//.#Patch]
   [//.#Delete]
   [//.#Head]
   [//.#Connect]
   [//.#Options]
   [//.#Trace]])

(the default_buffer_size
  (n.x 1,024 1,024))

(the empty_body
  [Natural Binary]
  [0 (binary.empty 0)])

(the (body_of data)
  (-> Binary
      [Natural Binary])
  [(binary.size data) data])

(the method_name
  (-> //.Method
      Text)
  (|>> (pipe.when
         {//.#Post} "POST"
         {//.#Get} "GET"
         {//.#Put} "PUT"
         {//.#Patch} "PATCH"
         {//.#Delete} "DELETE"
         {//.#Head} "HEAD"
         {//.#Connect} "CONNECT"
         {//.#Options} "OPTIONS"
         {//.#Trace} "TRACE")))

(for .jvm (these (ffi.import java/lang/String
                             "[1]::[0]")

                 (ffi.import java/lang/AutoCloseable
                             "[1]::[0]"
                             (close [] "io" "try" void))

                 (ffi.import java/io/InputStream
                             "[1]::[0]")

                 (ffi.import java/io/OutputStream
                             "[1]::[0]"
                             (flush [] "io" "try" void)
                             (write [[byte]] "io" "try" void))

                 (ffi.import java/net/URLConnection
                             "[1]::[0]"
                             (setDoOutput [boolean] "io" "try" void)
                             (setRequestProperty [java/lang/String java/lang/String] "io" "try" void)
                             (getInputStream [] "io" "try" java/io/InputStream)
                             (getOutputStream [] "io" "try" java/io/OutputStream)
                             (getHeaderFieldKey [int] "io" "try" "?" java/lang/String)
                             (getHeaderField [int] "io" "try" "?" java/lang/String))

                 (ffi.import java/net/HttpURLConnection
                             "[1]::[0]"
                             (setRequestMethod [java/lang/String] "io" "try" void)
                             (getResponseCode [] "io" "try" int))

                 (ffi.import java/net/URL
                             "[1]::[0]"
                             (new [java/lang/String])
                             (openConnection [] "io" "try" java/net/URLConnection))

                 (ffi.import java/io/BufferedInputStream
                             "[1]::[0]"
                             (new [java/io/InputStream])
                             (read [[byte] int int] "io" "try" int))

                 (the (default_body input)
                   (-> java/io/BufferedInputStream
                       (//.Body IO))
                   (|>> (maybe#each (|>> [true]))
                        (maybe.else [false ..default_buffer_size])
                        (pipe.when
                          [_ 0]
                          (monad.let (try.with io.monad)
                            [_ (java/lang/AutoCloseable::close [] input)]
                            (pure ..empty_body))

                          [partial? buffer_size]
                          (let [buffer (binary.empty buffer_size)]
                            (if partial?
                                (loop (again [so_far +0])
                                  (monad.let [! (try.with io.monad)]
                                    [.let [remaining (i.- so_far (.integer buffer_size))]
                                     bytes_read (by ! each (|>> ffi.of_int)
                                                    (java/io/BufferedInputStream::read [buffer (ffi.as_int so_far) (ffi.as_int remaining)] input))]
                                    (when bytes_read
                                      -1 (monad.let !
                                           [_ (java/lang/AutoCloseable::close [] input)]
                                           (pure [(.natural so_far) buffer]))
                                      +0 (again so_far)
                                      _ (if (i.= remaining bytes_read)
                                            (pure [buffer_size buffer])
                                            (again (i.+ bytes_read so_far))))))
                                (loop (again [so_far +0
                                              output (by binary.monoid identity)])
                                  (monad.let [! (try.with io.monad)]
                                    [.let [remaining (i.- so_far (.integer buffer_size))]
                                     bytes_read (by ! each (|>> ffi.of_int)
                                                    (java/io/BufferedInputStream::read [buffer (ffi.as_int so_far) (ffi.as_int remaining)] input))]
                                    (when bytes_read
                                      -1 (monad.let !
                                           [_ (java/lang/AutoCloseable::close [] input)]
                                           (when so_far
                                             +0 (pure (..body_of output))
                                             _ (|> buffer
                                                   (binary.slice 0 (.natural so_far))
                                                   (by try.functor each
                                                       (|>> (by binary.monoid composite output)
                                                            ..body_of))
                                                   (by io.monad pure))))
                                      +0 (again so_far output)
                                      _ (if (i.= remaining bytes_read)
                                            (again +0
                                                   (by binary.monoid composite output buffer))
                                            (again (i.+ bytes_read so_far)
                                                   output))))))))))

                 (the (default_headers connection)
                   (-> java/net/HttpURLConnection
                       (IO (Try Headers)))
                   (loop (again [index +0
                                 headers header.empty])
                     (monad.let [! (try.with io.monad)]
                       [?name (java/net/URLConnection::getHeaderFieldKey [(ffi.as_int index)] connection)]
                       (when ?name
                         {.#Some name}
                         (monad.let !
                           [?value (java/net/URLConnection::getHeaderField [(ffi.as_int index)] connection)]
                           (again (++ index)
                                  (dictionary.has (ffi.of_string name) (maybe.else "" (maybe#each (|>> ffi.of_string) ?value)) headers)))

                         {.#None}
                         (pure headers)))))

                 (the .public default
                   (Client IO)
                   (implementation
                    (the (request method url headers data)
                      (is (IO (Try (Response IO)))
                          (monad.let [! (try.with io.monad)]
                            [connection (|> url ffi.as_string [] java/net/URL::new (java/net/URL::openConnection []))
                             .let [connection (as (-> java/net/URLConnection java/net/HttpURLConnection)
                                                  connection)]
                             _ (java/net/HttpURLConnection::setRequestMethod [(ffi.as_string (..method_name method))] connection)
                             _ (list.each' ! (function (_ [name value])
                                               (java/net/URLConnection::setRequestProperty [(ffi.as_string name) (ffi.as_string value)] connection))
                                           (dictionary.entries headers))
                             _ (when data
                                 {.#Some data}
                                 (monad.let !
                                   [_ (java/net/URLConnection::setDoOutput [true] connection)
                                    stream (java/net/URLConnection::getOutputStream [] connection)
                                    _ (java/io/OutputStream::write [data] stream)
                                    _ (java/io/OutputStream::flush [] stream)
                                    _ (java/lang/AutoCloseable::close [] stream)]
                                   (pure []))
                                 
                                 {.#None}
                                 (pure []))
                             status (java/net/HttpURLConnection::getResponseCode [] connection)
                             headers (..default_headers connection)
                             input (|> connection
                                       (java/net/URLConnection::getInputStream [])
                                       (by ! each (|>> [] java/io/BufferedInputStream::new)))]
                            (pure [(.natural (ffi.of_int status))
                                   [//.#headers headers
                                    //.#body (..default_body input)]])))))))
     .python (these (ffi.import Dict
                                "[1]#[0]"
                                (setdefault [Text Text] Text))

                    (ffi.import (dict [] Dict))

                    (the headers_input
                      (-> Headers
                          Dict)
                      (|>> dictionary.entries
                           (list#mix (function (_ [header value] it)
                                       (exec
                                         (Dict#setdefault [header value] it)
                                         it))
                                     (..dict []))))

                    (the headers_output
                      (-> (Array (Array Text))
                          Headers)
                      (|>> (array.mix (function (_ _ header,value it)
                                        (dictionary.has (array.item 0 header,value)
                                                        (array.item 1 header,value)
                                                        it))
                                      header.empty)))

                    (ffi.import http/client/HTTPResponse
                                "[1]#[0]"
                                (status Natural)
                                (read ["?" Natural] "io" "try" Binary)
                                (getheaders [] "io" "try" (Array (Array Text))))

                    (ffi.import urllib/request/Request
                                "[1]#[0]")

                    (ffi.import urllib/request
                                "[1]#[0]"
                                ("static" Request [URL "?" Binary Dict "?" Any Bit Text] urllib/request/Request)
                                ("static" urlopen [urllib/request/Request] "io" "try" http/client/HTTPResponse))

                    (the (default_body input)
                      (-> http/client/HTTPResponse
                          (//.Body IO))
                      (let [! (try.with io.monad)]
                        (|>> (maybe#each (|>> [true]))
                             (maybe.else [false ..default_buffer_size])
                             (pipe.when
                               [_ 0]
                               (by ! pure ..empty_body)

                               [partial? buffer_size]
                               (monad.let !
                                 [it (http/client/HTTPResponse#read [(if partial?
                                                                         {.#Some buffer_size}
                                                                         {.#None})]
                                                                    input)]
                                 (pure (body_of it)))))))

                    (the .public default
                      (Client IO)
                      (implementation
                       (the (request method url headers data)
                         (is (IO (Try (Response IO)))
                             (monad.let [! (try.with io.monad)]
                               [.let [request (urllib/request#Request [url
                                                                       data
                                                                       (..headers_input headers)
                                                                       {.#None}
                                                                       false
                                                                       (..method_name method)])]
                                response (urllib/request#urlopen [request])
                                .let [status (http/client/HTTPResponse#status response)]
                                headers (by ! each ..headers_output
                                            (http/client/HTTPResponse#getheaders [] response))]
                               (pure [status
                                      [//.#headers headers
                                       //.#body (..default_body response)]])))
                         ))))
     (these))

(the .public (future client)
  (-> (Client IO)
      (Client Future))
  (implementation
   (the (request method url headers data)
     (|> (by client request method url headers data)
         future.soon
         (by future.monad each
             (try#each (function (_ [status message])
                         [status (revised //.#body (is (-> (//.Body IO) (//.Body Future))
                                                       (function (_ body)
                                                         (|>> body future.soon)))
                                          message)])))))))

(the .public headers
  (-> (List [Text Text])
      Headers)
  (dictionary.of_list text.hash))
