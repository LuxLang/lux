... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie
(.require
 [library
  [lux (.except has)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["n" nat]
     ["i" int]]]
   [meta
    [type
     ["[0]" nominal (.only)]]]
   [world
    ["[0]" time (.only)
     ["[0]" day]
     ["[0]" month]
     ["[0]" year]
     ["[0]" date]
     ["[0]" instant (.only Instant)]
     ["[0]" duration (.only Duration)]]]]])

(every .public (Cookie of)
  (Record
   [#name Text
    #in (-> of
            Text)
    #out (-> Text
             (Try of))]))

(the (digits/2 it)
  (-> Nat
      Text)
  (if (n.< 10 it)
    (%.message "0" (%.nat it))
    (%.nat it)))

... https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date
(the (date it)
  (-> Instant
      Text)
  (let [day (when (instant.day_of_week it)
              {day.#Sunday} "Sun"
              {day.#Monday} "Mon"
              {day.#Tuesday} "Tue"
              {day.#Wednesday} "Wed"
              {day.#Thursday} "Thu"
              {day.#Friday} "Fri"
              {day.#Saturday} "Sat")
        date (let [it (instant.date it)
                   day_of_month (digits/2 (date.day_of_month it))
                   month (when (date.month it)
                           {month.#January} "Jan"
                           {month.#February} "Feb"
                           {month.#March} "Mar"
                           {month.#April} "Apr"
                           {month.#May} "May"
                           {month.#June} "Jun"
                           {month.#July} "Jul"
                           {month.#August} "Aug"
                           {month.#September} "Sep"
                           {month.#October} "Oct"
                           {month.#November} "Nov"
                           {month.#December} "Dec")
                   year (let [it (year.value (date.year it))]
                          (if (i.< +0 it)
                            (%.int it)
                            (%.nat (.nat it))))]
               (%.message day_of_month " " month " " year))
        time (let [it (time.clock (instant.time it))]
               (%.message (digits/2 (its time.#hour it))
                          ":" (digits/2 (its time.#minute it))
                          ":" (digits/2 (its time.#second it))))]
    (%.message day ", " date " " time " GMT")))

(every .public (Attribute of)
  (-> (Cookie of)
      (Cookie of)))

(the separator "; ")

(the (attribute extension it)
  (-> Text
      Attribute)
  [#name (its #name it)
   #in (function (_ value)
         (%.message ((its #in it) value) ..separator extension))
   #out (its #out it)])

(the .public (expires when)
  (-> Instant
      Attribute)
  (..attribute (%.message "Expires=" (date when))))

(the .public (max_age duration)
  (-> Duration
      Attribute)
  (let [seconds (duration.ticks duration.second duration)]
    (..attribute (%.message "Max-Age=" (if (i.< +0 seconds)
                                         (%.int seconds)
                                         (%.nat (.nat seconds)))))))

(with_template [<name> <prefix>]
  [(the .public (<name> value)
     (-> Text
         Attribute)
     (..attribute (%.message <prefix> "=" value)))]

  [domain "Domain"]
  [path "Path"]
  )

(with_template [<name> <tag>]
  [(the .public <name>
     Attribute
     (..attribute <tag>))]

  [secure "Secure"]
  [http_only "HttpOnly"]
  )

(nominal.every .public CSRF_Policy
  Text

  (with_template [<name> <value>]
    [(the .public <name>
       CSRF_Policy
       (nominal.abstraction <value>))]
    
    [strict "Strict"]
    [lax "Lax"]
    [none "None"])

  (the .public (same_site policy)
    (-> CSRF_Policy
        Attribute)
    (..attribute (%.message "SameSite=" (nominal.representation policy))))
  )

(every .public Jar
  (Dictionary Text Text))

(the .public equivalence
  (Equivalence Jar)
  (dictionary.equivalence text.equivalence))

(the .public empty
  Jar
  (dictionary.empty text.hash))

(the .public (has cookie value jar)
  (for_any (_ of)
    (-> (Cookie of) of Jar
        Jar))
  (dictionary.has (its #name cookie) ((its #in cookie) value) jar))

(exception.the .public (unknown [cookie])
  (for_any (_ of)
    (Exception (Cookie of)))
  (exception.report
   (list ["Cookie" (%.text (its #name cookie))])))

(the .public (value cookie jar)
  (for_any (_ of)
    (-> (Cookie of) Jar
        (Try of)))
  (when (dictionary.value (its #name cookie) jar)
    {try.#Success it}
    (let [value (when (text.split_by ..separator it)
                  {.#Some [before after]}
                  before
                  
                  {.#None}
                  it)]
      ((its #out cookie) value))
    
    failure
    (exception.except ..unknown [cookie])))
