(.require
 [library
  [lux (.except)
   [control
    [monad (.only do)]
    ["[0]" try (.only Try)]
    ["p" parser (.use "[1]#[0]" monad)
     ["l" text (.only Parser)]]]
   [data
    [number
     ["i" int]]
    [text
     ["%" \\format (.only format)]]
    [format
     ["[0]" context (.only Context)]]
    [collection
     ["[0]" dictionary]]]
   [world
    [time
     ["[0]" duration (.only Duration)]]]]]
 ["[0]" // (.only Header)
  ["[0]" header]])

(type .public Directive
  (-> Text Text))

(def (directive extension)
  (-> Text Directive)
  (function (_ so_far)
    (format so_far "; " extension)))

(def .public (set name value)
  (-> Text Text Header)
  (header.has "Set-Cookie" (format name "=" value)))

(def .public (max_age duration)
  (-> Duration Directive)
  (let [seconds (duration.ticks duration.second duration)]
    (..directive (format "Max-Age=" (if (i.< +0 seconds)
                                      (%.int seconds)
                                      (%.nat (.nat seconds)))))))

(with_template [<name> <prefix>]
  [(def .public (<name> value)
     (-> Text Directive)
     (..directive (format <prefix> "=" value)))]

  [domain "Domain"]
  [path "Path"]
  )

(with_template [<name> <tag>]
  [(def .public <name>
     Directive
     (..directive <tag>))]

  [secure "Secure"]
  [http_only "HttpOnly"]
  )

(type .public CSRF_Policy
  (Variant
   {#Strict}
   {#Lax}))

(def .public (same_site policy)
  (-> CSRF_Policy Directive)
  (..directive (format "SameSite=" (case policy
                                     {#Strict} "Strict"
                                     {#Lax} "Lax"))))

(def (cookie context)
  (-> Context (Parser Context))
  (do p.monad
    [key (l.slice (l.many! (l.none_of! "=")))
     _ (l.this "=")
     value (l.slice (l.many! (l.none_of! ";")))]
    (in (dictionary.has key value context))))

(def (cookies context)
  (-> Context (Parser Context))
  (all p.either
       (do p.monad
         [context' (..cookie context)
          _ (l.this "; ")]
         (cookies context'))
       (p#in context)))

(def .public (get header)
  (-> Text (Try Context))
  (l.result header (..cookies context.empty)))
