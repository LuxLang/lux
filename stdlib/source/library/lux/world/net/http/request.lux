(.using
 [library
  [lux "*"
   [control
    pipe
    ["[0]" monad {"+" do}]
    ["[0]" maybe]
    ["[0]" try {"+" Try}]
    [concurrency
     ["[0]" async {"+" Async}]
     ["[0]" frp]]
    [parser
     ["<[0]>" json]]]
   [data
    ["[0]" number
     ["n" nat]]
    ["[0]" text
     ["[0]" encoding]]
    [format
     ["[0]" json {"+" JSON}]
     ["[0]" context {"+" Context Property}]]
    [collection
     ["[0]" list ("[1]#[0]" functor mix)]
     ["[0]" dictionary]]]
   [macro
    ["^" pattern]]
   [world
    ["[0]" binary {"+" Binary}]]]]
 ["[0]" // {"+" Body Response Server}
  ["[1][0]" response]
  ["[1][0]" query]
  ["[1][0]" cookie]])

(def: (merge inputs)
  (-> (List Binary) Binary)
  (let [[_ output] (try.trusted
                    (monad.mix try.monad
                               (function (_ input [offset output])
                                 (let [amount (binary.size input)]
                                   (# try.functor each (|>> [(n.+ amount offset)])
                                      (binary.copy amount 0 input offset output))))
                               [0 (|> inputs
                                      (list#each binary.size)
                                      (list#mix n.+ 0)
                                      binary.empty)]
                               inputs))]
    output))

(def: (read_text_body body)
  (-> Body (Async (Try Text)))
  (do async.monad
    [blobs (frp.list body)]
    (in (# encoding.utf8 decoded (merge blobs)))))

(def: failure (//response.bad_request ""))

(def: .public (json reader server)
  (All (_ a) (-> (<json>.Reader a) (-> a Server) Server))
  (function (_ (^.let request [identification protocol resource message]))
    (do async.monad
      [?raw (read_text_body (the //.#body message))]
      (case (do try.monad
              [raw ?raw
               content (# json.codec decoded raw)]
              (json.result content reader))
        {try.#Success input}
        (server input request)
        
        {try.#Failure error}
        (async.resolved ..failure)))))

(def: .public (text server)
  (-> (-> Text Server) Server)
  (function (_ (^.let request [identification protocol resource message]))
    (do async.monad
      [?raw (read_text_body (the //.#body message))]
      (case ?raw
        {try.#Success content}
        (server content request)
        
        {try.#Failure error}
        (async.resolved ..failure)))))

(def: .public (query property server)
  (All (_ a) (-> (Property a) (-> a Server) Server))
  (function (_ [identification protocol resource message])
    (let [full (the //.#uri resource)
          [uri query] (|> full
                          (text.split_by "?")
                          (maybe.else [full ""]))]
      (case (do try.monad
              [query (//query.parameters query)
               input (context.result query property)]
              (in [[identification protocol (has //.#uri uri resource) message]
                   input]))
        {try.#Success [request input]}
        (server input request)
        
        {try.#Failure error}
        (async.resolved ..failure)))))

(def: .public (form property server)
  (All (_ a) (-> (Property a) (-> a Server) Server))
  (function (_ (^.let request [identification protocol resource message]))
    (do async.monad
      [?body (read_text_body (the //.#body message))]
      (case (do try.monad
              [body ?body
               form (//query.parameters body)]
              (context.result form property))
        {try.#Success input}
        (server input request)
        
        {try.#Failure error}
        (async.resolved ..failure)))))

(def: .public (cookies property server)
  (All (_ a) (-> (Property a) (-> a Server) Server))
  (function (_ (^.let request [identification protocol resource message]))
    (case (do try.monad
            [cookies (|> (the //.#headers message)
                         (dictionary.value "Cookie")
                         (maybe.else "")
                         //cookie.get)]
            (context.result cookies property))
      {try.#Success input}
      (server input request)
      
      {try.#Failure error}
      (async.resolved ..failure))))
