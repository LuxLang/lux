(.require
 [library
  [lux (.except has)
   [control
    ["[0]" pipe]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\format]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["[0]" nat]]]]]
 [//
  ["[0]" mime (.only MIME)]
  ["[0]" cookie]
  [// (.only URL)]])

(type .public Headers
  (Dictionary Text Text))

(def .public empty
  Headers
  (dictionary.empty text.hash))

... https://developer.mozilla.org/en-US/docs/Glossary/HTTP_header
(type .public (Header of)
  (Record
   [#name Text
    #in (-> of Text)
    #out (-> Text (Try of))]))

(exception.def .public (unknown [name])
  (Exception Text)
  (exception.report
   (list ["Name" (%.text name)])))

(def .public (one header it)
  (All (_ of)
    (-> (Header of) Headers
        (Try of)))
  (when (dictionary.value (the #name header) it)
    {.#Some raw}
    ((the #out header) raw)
    
    {.#None}
    (exception.except ..unknown [(the #name header)])))

(def separator ",")

(def .public (has header value)
  (All (_ of)
    (-> (Header of) of Headers
        Headers))
  (dictionary.revised' (the #name header) ""
                       (|>> (pipe.when
                              ""
                              ((the #in header) value)
                              
                              previous
                              (%.format previous ..separator ((the #in header) value))))))

(def .public content_length
  (Header Nat)
  [#name "Content-Length"
   #in (at nat.decimal encoded)
   #out (at nat.decimal decoded)])

(def .public content_type
  (Header MIME)
  [#name "Content-Type"
   #in mime.name
   #out (|>> mime.mime {try.#Success})])

(def .public location
  (Header URL)
  [#name "Location"
   #in (|>>)
   #out (|>> {try.#Success})])

(def assignment "=")

(def .public set_cookies
  (Header cookie.Jar)
  [#name "Set-Cookie"
   #in (|>> dictionary.entries
            (list#mix (function (_ [name value] previous)
                        (when previous
                          "" (%.format name ..assignment value)
                          _ (%.format previous ..separator name ..assignment value)))
                      ""))
   #out (|>> (text.all_split_by ..separator)
             (list#mix (function (_ cookie jar)
                         (when (text.split_by ..assignment cookie)
                           {.#Some [name value]}
                           (dictionary.has name value jar)
                           
                           {.#None}
                           jar))
                       cookie.empty)
             {try.#Success})])
