... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except has)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" pipe]]
   [error
    ["[0]" try (.only Try) (.use "[1]#[0]" monad)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["[0]" natural]]]
   [macro
    ["[0]" expansion]]]]
 [//
  ["[0]" cookie]
  [// (.only URL)
   ["[0]" mime (.only MIME)]
   ["[0]" uri
    ["[1]" encoding]]]])

(every .public Headers
  (Dictionary Text Text))

(the .public empty
  Headers
  (dictionary.empty text.hash))

... https://developer.mozilla.org/en-US/docs/Glossary/HTTP_header
(every .public (Header it)
  (Record
   [#name Text
    #in (-> it Text)
    #out (-> Text (Try it))]))

(exception.the .public (unknown [name])
  (Exception Text)
  (exception.report
   (list ["Name" (%.text name)])))

(the .public (one header it)
  (for_any (_ it)
    (-> (Header it) Headers
        (Try it)))
  (when (dictionary.value (its #name header) it)
    {try.#Success raw}
    ((its #out header) raw)
    
    failure
    (exception.except ..unknown [(its #name header)])))

... https://en.wikipedia.org/wiki/Delimiter
(the delimiter ",")

(the .public (has header value)
  (for_any (_ it)
    (-> (Header it) it Headers
        Headers))
  (dictionary.revised' (its #name header) ""
                       (|>> (pipe.when
                              ""
                              ((its #in header) value)
                              
                              previous
                              (text previous ..delimiter ((its #in header) value))))))

(the .public content_length
  (Header Natural)
  [#name "Content-Length"
   #in (by natural.base_10 as)
   #out (by natural.base_10 of)])

(the .public content_type
  (Header MIME)
  [#name "Content-Type"
   #in mime.name
   #out (|>> mime.mime {try.#Success})])

(the .public location
  (Header URL)
  [#name "Location"
   #in (|>>)
   #out (|>> {try.#Success})])

(the assignment "=")

(the .public set_cookies
  (Header cookie.Jar)
  [#name "Set-Cookie"
   #in (|>> dictionary.entries
            (list#mix (function (_ [name value] previous)
                        (expansion.let [<key,value> (these (uri.as_text name) ..assignment value)]
                          (when previous
                            "" (text <key,value>)
                            _ (text previous ..delimiter <key,value>))))
                      ""))
   #out (|>> (text.all_split_by ..delimiter)
             (list.mix' try.monad
                        (function (_ cookie jar)
                          (when (text.split_by ..assignment cookie)
                            {.#Some [name value]}
                            (do try.monad
                              [name (uri.of_text name)]
                              (pure (dictionary.has name value jar)))
                            
                            {.#None}
                            (try#pure jar)))
                        cookie.empty))])
