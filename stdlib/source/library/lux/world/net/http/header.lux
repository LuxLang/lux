... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except has)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" try (.only Try) (.use "[1]#[0]" monad)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\format]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["[0]" nat]]]]]
 [//
  ["[0]" cookie]
  [// (.only URL)
   ["[0]" mime (.only MIME)]
   ["[0]" uri
    ["[1]" encoding]]]])

(every .public Headers
  (Dictionary Text Text))

(the .public empty
  Headers
  (dictionary.empty text.hash))

... https://developer.mozilla.org/en-US/docs/Glossary/HTTP_header
(every .public (Header of)
  (Record
   [#name Text
    #in (-> of Text)
    #out (-> Text (Try of))]))

(exception.the .public (unknown [name])
  (Exception Text)
  (exception.report
   (list ["Name" (%.text name)])))

(the .public (one header it)
  (All (_ of)
    (-> (Header of) Headers
        (Try of)))
  (when (dictionary.value (its #name header) it)
    {try.#Success raw}
    ((its #out header) raw)
    
    failure
    (exception.except ..unknown [(its #name header)])))

(the separator ",")

(the .public (has header value)
  (All (_ of)
    (-> (Header of) of Headers
        Headers))
  (dictionary.revised' (its #name header) ""
                       (|>> (pipe.when
                              ""
                              ((its #in header) value)
                              
                              previous
                              (%.format previous ..separator ((its #in header) value))))))

(the .public content_length
  (Header Nat)
  [#name "Content-Length"
   #in (of nat.decimal injection)
   #out (of nat.decimal projection)])

(the .public content_type
  (Header MIME)
  [#name "Content-Type"
   #in mime.name
   #out (|>> mime.mime {try.#Success})])

(the .public location
  (Header URL)
  [#name "Location"
   #in (|>>)
   #out (|>> {try.#Success})])

(the assignment "=")

(the .public set_cookies
  (Header cookie.Jar)
  [#name "Set-Cookie"
   #in (|>> dictionary.entries
            (list#mix (function (_ [name value] previous)
                        (with_expansions [<key,value> (these (uri.injection name) ..assignment value)]
                          (when previous
                            "" (%.format <key,value>)
                            _ (%.format previous ..separator <key,value>))))
                      ""))
   #out (|>> (text.all_split_by ..separator)
             (monad.mix try.monad
                        (function (_ cookie jar)
                          (when (text.split_by ..assignment cookie)
                            {.#Some [name value]}
                            (do try.monad
                              [name (uri.projection name)]
                              (in (dictionary.has name value jar)))
                            
                            {.#None}
                            (try#in jar)))
                        cookie.empty))])
