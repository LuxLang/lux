... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except has)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" pipe]]
   ["[0]" error (.only)
    ["[0]" try (.only Try) (.use "[1]:[0]" monad)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" binary
     ["[1]!" \\unsafe]]
    ["[0]" text (.only)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list (.use "[1]:[0]" mix)]
     ["[0]" dictionary (.only Dictionary)]]
    [format
     ["[0]" base64]]]
   [math
    [number
     ["[0]" /64 (.only)
      ["[0]" natural]]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]
   [aspect
    ["[0]" case]]]]
 [//
  ["[0]" cookie]
  [// (.only URL)
   ["[0]" mime (.only MIME)]
   ["[0]" uri
    ["[1]" encoding]]]])

(every .public Headers
  (Dictionary Text Text))

(the .public empty
  Headers
  (dictionary.empty text.hash))

... https://developer.mozilla.org/en-US/docs/Glossary/HTTP_header
(every .public (Header it)
  (Record
   [:name Text
    :in (text.Injection it)
    :out (-> Text (Try it))]))

(exception.the .public (unknown [name])
  (Exception Text)
  (exception.report
   (list ["Name" (%.text name)])))

(the .public (one header it)
  (for_any (_ it)
    (-> (Header it) Headers
        (Try it)))
  (when (dictionary.value (its :name header) it)
    {try.:Success raw}
    ((its :out header) raw)
    
    failure
    (exception.except ..unknown [(its :name header)])))

... https://en.wikipedia.org/wiki/Delimiter
(the delimiter ",")

(the .public (has header value)
  (for_any (_ it)
    (-> (Header it) it
        (Change Headers)))
  (dictionary.revised' (its :name header) ""
                       (|>> (pipe.when
                              ""
                              ((its :in header) value)
                              
                              previous
                              (text previous ..delimiter ((its :in header) value))))))

(the .public content_length
  (Header Natural)
  [:name "Content-Length"
   :in (by natural.base_10 as)
   :out (by natural.base_10 of)])

(the .public content_type
  (Header MIME)
  [:name "Content-Type"
   :in mime.name
   :out (|>> mime.mime {try.:Success})])

(the .public accept
  (Header MIME)
  [:name "Accept"
   :in mime.name
   :out (|>> mime.mime {try.:Success})])

(the .public user_agent
  (Header Text)
  [:name "User-Agent"
   :in (|>>)
   :out (|>> {try.:Success})])

(the .public location
  (Header URL)
  [:name "Location"
   :in (|>>)
   :out (|>> {try.:Success})])

... https://en.wikipedia.org/wiki/Basic_access_authentication
(every .public Credential
  (Record
   [:id Text
    :password Text]))

(the prefix_of_basic_authorization
  "Basic ")

(the separator_of_authorization
  ":")

(the .public basic_authorization
  (Header Credential)
  [:name "Authorization"
   :in (function (_ it)
         (|> (text (its :id it)
                   ..separator_of_authorization
                   (its :password it))
             (by utf8.binary as)
             (case.some base64.text)
             (text ..prefix_of_basic_authorization)))
   :out (function (_ it)
          (expansion.let [,*else (these else
                                        {try.:Failure error.not_valid})]
            (when (text.split_by ..prefix_of_basic_authorization it)
              {.:Some [text.empty id,password]}
              (when (case.if base64.text id,password)
                {.:Right id,password}
                (when (by utf8.binary of id,password)
                  {try.:Success id,password}
                  (when (text.split_by ..separator_of_authorization id,password)
                    {.:Some [id password]}
                    {try.:Success [:id id
                                   :password password]}

                    ,*else)
                  ,*else)
                ,*else)
              ,*else)))])

(the prefix_of_bearer_authorization
  "Bearer ")

(every .public Token
  Text)

(the .public bearer_authorization
  (Header Token)
  [:name "Authorization"
   :in (|>> (text ..prefix_of_bearer_authorization))
   :out (function (_ it)
          (when (text.split_by ..prefix_of_bearer_authorization it)
            {.:Some [text.empty token]}
            {try.:Success token}
            
            else
            {try.:Failure error.not_valid}))])

(the assignment "=")

(the .public set_cookies
  (Header cookie.Jar)
  [:name "Set-Cookie"
   :in (|>> dictionary.entries
            (list:mix (function (_ [name value] previous)
                        (expansion.let [<key,value> (these (uri.as_text name) ..assignment value)]
                          (when previous
                            "" (text <key,value>)
                            _ (text previous ..delimiter <key,value>))))
                      ""))
   :out (|>> (text.all_split_by ..delimiter)
             (list.mix' try.monad
                        (function (_ cookie jar)
                          (when (text.split_by ..assignment cookie)
                            {.:Some [name value]}
                            (monad.let try.monad
                              [name (uri.of_text name)]
                              (pure (dictionary.has name value jar)))
                            
                            {.:None}
                            (try:pure jar)))
                        cookie.empty))])
