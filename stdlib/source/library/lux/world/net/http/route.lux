(.module:
  [library
   [lux (#- or)
    [control
     [monad (#+ do)]
     ["." maybe]
     [concurrency
      ["." async]]]
    [data
     ["." text]
     [number
      ["n" nat]]]]]
  ["." // (#+ URI Server)
   ["#." status]
   ["#." response]])

(template [<scheme> <name>]
  [(def: .public (<name> server)
     (-> Server Server)
     (function (_ (^@ request [identification protocol resource message]))
       (case (value@ #//.scheme protocol)
         <scheme>
         (server request)

         _
         (async.resolved //response.not_found))))]

  [#//.HTTP  http]
  [#//.HTTPS https]
  )

(template [<method> <name>]
  [(def: .public (<name> server)
     (-> Server Server)
     (function (_ (^@ request [identification protocol resource message]))
       (case (value@ #//.method resource)
         <method>
         (server request)

         _
         (async.resolved //response.not_found))))]

  [#//.Get     get]
  [#//.Post    post]
  [#//.Put     put]
  [#//.Patch   patch]
  [#//.Delete  delete]
  [#//.Head    head]
  [#//.Connect connect]
  [#//.Options options]
  [#//.Trace   trace]
  )

(def: .public (uri path server)
  (-> URI Server Server)
  (function (_ [identification protocol resource message])
    (if (text.starts_with? path (value@ #//.uri resource))
      (server [identification
               protocol
               (revised@ #//.uri
                         (|>> (text.clip_since (text.size path)) maybe.trusted)
                         resource)
               message])
      (async.resolved //response.not_found))))

(def: .public (or primary alternative)
  (-> Server Server Server)
  (function (_ request)
    (do async.monad
      [response (primary request)
       .let [[status message] response]]
      (if (n.= //status.not_found status)
        (alternative request)
        (in response)))))
