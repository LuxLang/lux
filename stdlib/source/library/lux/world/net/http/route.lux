(.require
 [library
  [lux (.except or)
   [control
    [monad (.only do)]
    ["[0]" maybe]
    [concurrency
     ["[0]" async]]]
   [data
    ["[0]" text]
    [number
     ["n" nat]]]
   [meta
    [macro
     ["^" pattern]]]]]
 ["[0]" // (.only URI Server)
  ["[1][0]" status]
  ["[1][0]" response]])

(with_template [<scheme> <name>]
  [(def .public (<name> server)
     (-> Server Server)
     (function (_ (^.let request [identification protocol resource message]))
       (case (the //.#scheme protocol)
         {<scheme>}
         (server request)

         _
         (async.resolved //response.not_found))))]

  [//.#HTTP  http]
  [//.#HTTPS https]
  )

(with_template [<method> <name>]
  [(def .public (<name> server)
     (-> Server Server)
     (function (_ (^.let request [identification protocol resource message]))
       (case (the //.#method resource)
         {<method>}
         (server request)

         _
         (async.resolved //response.not_found))))]

  [//.#Get     get]
  [//.#Post    post]
  [//.#Put     put]
  [//.#Patch   patch]
  [//.#Delete  delete]
  [//.#Head    head]
  [//.#Connect connect]
  [//.#Options options]
  [//.#Trace   trace]
  )

(def .public (uri path server)
  (-> URI Server Server)
  (function (_ [identification protocol resource message])
    (if (text.starts_with? path (the //.#uri resource))
      (server [identification
               protocol
               (revised //.#uri
                        (|>> (text.clip_since (text.size path)) maybe.trusted)
                        resource)
               message])
      (async.resolved //response.not_found))))

(def .public (or primary alternative)
  (-> Server Server Server)
  (function (_ request)
    (do async.monad
      [response (primary request)
       .let [[status message] response]]
      (if (n.= //status.not_found status)
        (alternative request)
        (in response)))))
