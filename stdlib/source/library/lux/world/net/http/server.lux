... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except or static)
   [abstract
    ["[0]" monad (.only Monad
                        do)]]
   [control
    ["[0]" maybe]
    ["[0]" try (.only Try)]]
   [data
    ["[0]" text (.only)
     [encoding
      ["[0]" utf8 (.use "[1]#[0]" format)]]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" dictionary]]
    [format
     ["[0]" json (.only JSON) (.use "[1]#[0]" format)
      ["?[1]" \\projection]]]]
   [math
    [number
     ["n" natural]]]
   [meta
    [macro
     ["^" pattern]
     ["[0]" template]]]
   [world
    ["[0]" environment
     ["?[1]" \\projection]]]]]
 ["[0]" // (.only Body)
  ["[0]" status]
  ["[0]" cookie]
  ["[0]" request (.only Request)]
  ["[0]" response (.only Response)]
  [//
   [uri (.only URI)
    ["[0]" scheme]
    ["[0]" query (.use "[1]#[0]" format)]]]])

(every .public (Server !)
  (-> (Monad !) (Request !)
      (! (Response !))))

(template.with [<scheme> <name>]
  [(the .public (<name> server)
     (for_any (_ !)
       (-> (Server !)
           (Server !)))
     (function (_ ! request)
       (if (scheme.= <scheme> (its [request.#protocol request.#scheme] request))
         (server ! request)
         (of ! in (response.not_found !)))))]

  [scheme.http  http]
  [scheme.https https]
  )

(template.with [<method> <name>]
  [(the .public (<name> server)
     (for_any (_ !)
       (-> (Server !)
           (Server !)))
     (function (_ ! request)
       (when (its [request.#resource request.#method] request)
         {<method>}
         (server ! request)

         _
         (of ! in (response.not_found !)))))]

  [//.#Get     get]
  [//.#Post    post]
  [//.#Put     put]
  [//.#Patch   patch]
  [//.#Delete  delete]
  [//.#Head    head]
  [//.#Connect connect]
  [//.#Options options]
  [//.#Trace   trace]
  )

(the .public (uri path server)
  (for_any (_ !)
    (-> URI (Server !)
        (Server !)))
  (function (_ ! request)
    (if (text.starts_with? path (its [request.#resource request.#uri] request))
      (server ! (revised [request.#resource request.#uri]
                         (|>> (text.clip_since (text.size path))
                              maybe.trusted)
                         request))
      (of ! in (response.not_found !)))))

(the .public (or primary alternative)
  (for_any (_ !)
    (-> (Server !) (Server !)
        (Server !)))
  (function (_ ! request)
    (do !
      [response (primary ! request)
       .let [[status message] response]]
      (if (n.= status.not_found status)
        (alternative ! request)
        (in response)))))

(the .public (static response)
  (for_any (_ !)
    (-> (Response !)
        (Server !)))
  (function (_ ! request)
    (of ! in response)))

(the (body_text ! body)
  (for_any (_ !)
    (-> (Monad !) (Body !)
        (! (Try Text))))
  (do !
    [blob (body {.#None})]
    (in (do try.monad
          [[_ blob] blob]
          (utf8#projection blob)))))

(the (failure !)
  (for_any (_ !)
    (-> (Monad !)
        (Response !)))
  (response.bad_request ! ""))

(the .public (query projection server)
  (for_any (_ ! of)
    (-> (?environment.Projection of) (-> of (Server !))
        (Server !)))
  (function (_ ! request)
    (let [full (its [request.#resource request.#uri] request)
          [uri query] (|> full
                          (text.split_by "?")
                          (maybe.else [full ""]))]
      (when (do try.monad
              [query (query#projection query)
               input (?environment.value projection query)]
              (in [(has [request.#resource request.#uri] uri request)
                   input]))
        {try.#Success [request input]}
        (server input ! request)
        
        {try.#Failure error}
        (of ! in (..failure !))))))

(the .public (text server)
  (for_any (_ !)
    (-> (-> Text (Server !))
        (Server !)))
  (function (_ ! request)
    (do !
      [?raw (body_text ! (its [request.#message //.#body] request))]
      (when ?raw
        {try.#Success content}
        (server content ! request)
        
        {try.#Failure error}
        (of ! in (..failure !))))))

(the .public (form projection server)
  (for_any (_ ! of)
    (-> (?environment.Projection of) (-> of (Server !))
        (Server !)))
  (function (_ ! request)
    (do !
      [?body (body_text ! (its [request.#message //.#body] request))]
      (when (do try.monad
              [body ?body
               form (query#projection body)]
              (?environment.value projection form))
        {try.#Success input}
        (server input ! request)
        
        {try.#Failure error}
        (of ! in (..failure !))))))

(the .public (json projection server)
  (for_any (_ ! of)
    (-> (?json.Projection of) (-> of (Server !))
        (Server !)))
  (function (_ ! request)
    (do !
      [?raw (body_text ! (its [request.#message //.#body] request))]
      (when (do try.monad
              [raw ?raw
               content (json#projection raw)]
              (?json.value projection content))
        {try.#Success input}
        (server input ! request)
        
        {try.#Failure error}
        (of ! in (..failure !))))))
