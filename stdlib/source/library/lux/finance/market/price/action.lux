... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    ["[0]" order (.only Order)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    [number
     ["n" natural]
     ["i" integer]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]]]
 [// (.only Price)
  [///
   ["[0]" money (.only)
    ["[0]" currency (.only Currency)]]]])

... https://en.wikipedia.org/wiki/Price_action_trading
(nominal.every .public (Action $)
  (Record
   [#currency (Currency $)
    #ticks Integer])

  (the .public (none $)
    (for_any (_ $)
      (-> (Currency $)
          (Action $)))
    (nominal.abstraction
     [#currency $
      #ticks +0]))

  (the .public (action from to)
    (for_any (_ $)
      (-> (Price $) (Price $)
          (Action $)))
    (nominal.abstraction
     [#currency (money.currency from)
      #ticks (.integer (n.- (money.amount from)
                            (money.amount to)))]))

  (the .public absolute
    (for_any (_ $)
      (-> (Action $)
          (Action $)))
    (|>> nominal.representation
         (revised #ticks i.absolute)
         nominal.abstraction))

  (template.with [<*> <name>]
    [(the .public (<name> currency it)
       (for_any (_ $)
         (-> (Currency $) Integer
             (Action $)))
       (nominal.abstraction
        [#currency currency
         #ticks (<*> (.integer (currency.sub_divisions currency))
                     it)]))]

    [i.* of_units]
    [i.% of_sub_units]
    )

  (template.with [<name> <slot> <type>]
    [(the .public <name>
       (for_any (_ $)
         (-> (Action $)
             <type>))
       (|>> nominal.representation
            (its <slot>)))]

    [currency #currency (Currency $)]
    ... https://en.wikipedia.org/wiki/Commodity_tick
    [ticks #ticks Integer]
    )

  (the .public order
    (for_any (_ $)
      (Order (Action $)))
    (by order.functor each
        ..ticks
        i.order))

  (order.for [$] (Action $) ..order)

  (the .public equivalence
    (for_any (_ $)
      (Equivalence (Action $)))
    (by ..order equivalence))

  (alias [=]
         ..equivalence)

  (template.with [<p> <i>]
    [(the .public (<p> parameter subject)
       (for_any (_ $)
         (-> (Action $) (Action $)
             (Action $)))
       (let [parameter (nominal.representation parameter)
             subject (nominal.representation subject)]
         (nominal.abstraction
          [#currency (its #currency subject)
           #ticks (<i> (its #ticks parameter)
                       (its #ticks subject))])))]

    [+ i.+]
    [- i.-]
    )

  (the too_negative
    (by i.interval minimum))

  (the .public (as_text it)
    (for_any (_ $)
      (text.Injection (Action $)))
    (when (..ticks it)
      ..too_negative
      (|> ..too_negative
          ++
          i.abs
          .natural
          ++
          (money.money (..currency it))
          money.as_text
          (text "-"))

      amount
      (let [-|+ (if (i.< +0 amount)
                  "-"
                  "+")]
        (|> (.natural (i.abs amount))
            (money.money (..currency it))
            money.as_text
            (text -|+)))))
  )

(template.with [<*> <name>]
  [(the .public (<name> it)
     (for_any (_ $)
       (-> (Action $)
           Integer))
     (<*> (.integer (currency.sub_divisions (..currency it)))
          (..ticks it)))]

  [i./ units]
  [i.% sub_units]
  )
