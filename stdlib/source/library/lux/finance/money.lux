... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    ["[0]" order (.only Order)]
    [monoid (.only Monoid)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    [number
     ["n" natural]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]
   [meta
    ["[0]" static]]]]
 [/
  ["/" currency]])

(nominal.every .public (Money $)
  (Record
   [#currency (/.Currency $)
    #amount Natural])

  (the .public (money currency amount)
    (for_any (_ $)
      (-> (/.Currency $) Natural
          (Money $)))
    (nominal.abstraction
     [#currency currency
      #amount amount]))

  (template.with [<*> <name>]
    [(the .public (<name> currency it)
       (for_any (_ $)
         (-> (/.Currency $) Natural
             (Money $)))
       (money currency
              (<*> (/.sub_divisions currency)
                   it)))]

    [n.* of_units]
    [n.% of_sub_units]
    )

  (template.with [<name> <slot> <type>]
    [(the .public <name>
       (for_any (_ $)
         (-> (Money $)
             <type>))
       (|>> nominal.representation
            (its <slot>)))]

    [currency #currency (/.Currency $)]
    [amount #amount Natural]
    )

  (the .public order
    (for_any (_ $)
      (Order (Money $)))
    (by order.functor each
        ..amount
        n.order))

  (order.definitions [$] (Money $) ..order)

  (the .public equivalence
    (for_any (_ $)
      (Equivalence (Money $)))
    (by ..order equivalence))

  (alias [=]
         ..equivalence)

  (the .public (monoid $)
    (for_any (_ $)
      (-> (/.Currency $)
          (Monoid (Money $))))
    (implementation
     (the identity
       (nominal.abstraction
        [#currency $
         #amount 0]))
     (the (composite left right)
       (nominal.abstraction
        [#currency $
         #amount (n.+ (its #amount (nominal.representation left))
                      (its #amount (nominal.representation right)))]))))

  (the .public (+ parameter subject)
    (for_any (_ $)
      (-> (Money $) (Money $)
          (Money $)))
    (|> subject
        nominal.representation
        (revised #amount (n.+ (|> parameter nominal.representation (its #amount))))
        nominal.abstraction))

  (the .public (- parameter subject)
    (for_any (_ $)
      (-> (Money $) (Money $)
          (Maybe (Money $))))
    (let [parameter (nominal.representation parameter)
          subject (nominal.representation subject)]
      (if (n.< (its #amount parameter)
               (its #amount subject))
        {.#None}
        {.#Some (nominal.abstraction
                 [#currency (its #currency subject)
                  #amount (n.- (its #amount parameter)
                               (its #amount subject))])})))

  (the .public (injection it)
    (for_any (_ $)
      (text.Injection (Money $)))
    (let [[currency amount] (nominal.representation it)
          range (/.sub_divisions currency)
          [macro micro] (n./% range amount)
          sub (by (n.padded (|> range -- %.natural text.size)
                            n.base_10)
                  injection)]
      (%.message (%.natural macro)
                 (when range
                   1 ""
                   _ (%.message "." (sub micro)))
                 " " (/.alphabetic_code currency))))
  )

(template.with [<order> <name>]
  [(the .public (<name> left right)
     (for_any (_ $)
       (-> (Money $) (Money $)
           (Money $)))
     (if (<order> (..amount left)
                  (..amount right))
       right
       left))]

  [n.< minor]
  [n.> major]
  )

(template.with [<*> <name>]
  [(the .public (<name> it)
     (for_any (_ $)
       (-> (Money $)
           Natural))
     (<*> (/.sub_divisions (..currency it))
          (..amount it)))]

  [n./ units]
  [n.% sub_units]
  )
