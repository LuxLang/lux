... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except open)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["[0]" maybe (.use "[1]:[0]" functor)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    [text (.only Injection)
     ["%" \\injection]]]
   [math
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [macro
    ["[0]" template]]]]
 [//
  ["[0]" volume (.only Volume)]
  [//
   ["[0]" money (.only Money)
    [currency (.only Currency)]]
   [market
    [price (.only Price)]]]])

(every .public (Session $)
  (Record
   [:low (Price $)
    :to_minimum Natural
    :real_body Integer
    :to_high Natural
    :volume (Volume $)]))

(the .public currency
  (for_any (_ $)
    (-> (Session $)
        (Currency $)))
  (|>> (its :low)
       money.currency))

... https://en.wikipedia.org/wiki/Open-high-low-close_chart
(the .public low
  (for_any (_ $)
    (-> (Session $)
        (Price $)))
  (its :low))

(the .public (minimum it)
  (for_any (_ $)
    (-> (Session $)
        (Price $)))
  (money.+ (..low it)
           (money.money (..currency it)
                        (its :to_minimum it))))

(the .public (maximum it)
  (for_any (_ $)
    (-> (Session $)
        (Price $)))
  (let [real_body (its :real_body it)]
    (money.+ (..minimum it)
             (money.money (..currency it)
                          (.natural (if (i.< +0 real_body)
                                        (i.opposite real_body)
                                        real_body))))))

(the .public (open it)
  (for_any (_ $)
    (-> (Session $)
        (Price $)))
  (if (i.< +0 (its :real_body it))
      (..maximum it)
      (..minimum it)))

(the .public (close it)
  (for_any (_ $)
    (-> (Session $)
        (Price $)))
  (if (i.< +0 (its :real_body it))
      (..minimum it)
      (..maximum it)))

(the .public (high it)
  (for_any (_ $)
    (-> (Session $)
        (Price $)))
  (money.+ (..maximum it)
           (money.money (..currency it)
                        (its :to_high it))))

(the .public equivalence
  (for_any (_ $)
    (Equivalence (Session $)))
  (all product.equivalence
       money.equivalence
       n.equivalence
       i.equivalence
       n.equivalence
       volume.equivalence
       ))

(alias [=]
       ..equivalence)

(the (size from to)
  (for_any (_ $)
    (-> (Price $) (Price $)
        Natural))
  (|> to
      (money.- from)
      (maybe:each money.amount)
      (maybe.else 0)))

(the (distance open close)
  (for_any (_ $)
    (-> (Price $) (Price $)
        Integer))
  (if (money.> open close)
      (|> close
          (money.- open)
          (maybe:each money.amount)
          (maybe.else 0)
          .integer)
      (|> open
          (money.- close)
          (maybe:each money.amount)
          (maybe.else 0)
          .integer
          i.opposite)))

(template.with [<header> <name>]
  [(the <name> <header>)]

  [["O" open_header]
   ["H" high_header]
   ["L" low_header]
   ["C" close_header]
   ["V" volume_header]])

(the .public (as_text it)
  (for_any (_ $)
    (Injection (Session $)))
  (`` (text (,, (template.with [<header> <field>]
                  [<header> ": " (money.as_text (<field> it)) " | "]

                  [[..open_header ..open]
                   [..high_header ..high]
                   [..low_header ..low]
                   [..close_header ..close]]))
            ..volume_header ": " (%.natural (its [:volume volume.:in] it)))))

(exception.the .public (invalid [open high low close volume])
  (for_any (_ $)
    (Exception [(Price $) (Price $) (Price $) (Price $) (Volume $)]))
  (exception.report
   (`` (list (,, (template.with [<header> <field>]
                   [[<header> (money.as_text <field>)]]

                   [[..open_header open]
                    [..high_header high]
                    [..low_header low]
                    [..close_header close]]))
             [..volume_header (%.natural (its volume.:in volume))]))))

(the (between? [low high] it)
  (for_any (_ $)
    (-> [(Price $) (Price $)] (Price $)
        Bit))
  (and (money.>= low it)
       (money.<= high it)))

(the (valid? open high low close)
  (for_any (_ $)
    (-> (Price $) (Price $) (Price $) (Price $)
        Bit))
  (and (money.<= high low)
       (between? [low high] open)
       (between? [low high] close)))

(the .public (ohlc open high low close volume)
  (for_any (_ $)
    (-> (Price $) (Price $) (Price $) (Price $) (Volume $)
        (Try (Session $))))
  (if (valid? open high low close)
      (let [minimum (money.minor open close)
            maximum (money.major open close)]
        {try.:Success
         [:low low
          :to_minimum (..size low minimum)
          :real_body (..distance open close)
          :to_high (..size maximum high)
          :volume volume]})
      (exception.except ..invalid [open high low close volume])))

(the .public (composite before after)
  (for_any (_ $)
    (-> (Session $) (Session $)
        (Session $)))
  (try.trusted
   (ohlc (..open before)
         (money.major (..high before) (..high after))
         (money.minor (..low before) (..low after))
         (..close after)
         [volume.:in (n.+ (its [:volume volume.:in] before)
                          (its [:volume volume.:in] after))
          volume.:out (money.+ (its [:volume volume.:out] before)
                               (its [:volume volume.:out] after))])))

... https://en.wikipedia.org/wiki/Typical_price
(the .public (typical_price it)
  (for_any (_ $)
    (-> (Session $)
        (Price $)))
  (|> (all money.+
           (..high it)
           (..low it)
           
           (..open it)
           (..close it))
      money.amount
      (n./ 4)
      (money.money (money.currency (..close it)))))
