... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)]])

(the with_template (.in_module# .prelude with_template))
(with_template [,name]
  [(the ,name (.in_module# .prelude ,name))]

  [[with_monad]
   [monad:each]
   
   [meta:monad]
   [meta:pure]
   [failure]

   [?:value]
   [?:and]
   [?:maybe]
   [?:some]
   [?:any]

   [list:one]])

(every .public Target
  Text)

(with_template [<name> <value>]
  [(the .public <name>
     Target
     <value>)]
  
  [... Available.
   [js          "JavaScript"]
   [jvm         "JVM"]
   [lua         "Lua"]
   [python      "Python"]
   [ruby        "Ruby"]
   ... Not available yet.
   [c++         "C++"]
   [common_lisp "Common Lisp"]
   [php         "PHP"]
   [r           "R"]])

(the Eval
  ... TODO: Use the currently-commented definition.
  ... (.type# "eval")
  (type (-> Type Code
            (Meta Any))))

(the (eval type code)
  Eval
  (with_monad meta:monad
    [eval (function (_ lux)
            {.:Right [lux (as (-> Any Eval)
                              (its .:eval lux))]})]
    (eval type code)))

(the .public for
  (let [target (is (Meta Target)
                   (function (_ compiler)
                     {.:Right [compiler (its [.:info .:target] compiler)]}))
        platform_name (is (-> Code
                              (Meta Target))
                          (function (_ it)
                            (with_monad meta:monad
                              [it (eval Target it)]
                              (pure (as (-> Any Target) it)))))]
    (macro (_ tokens)
      (when (?:value tokens
                     (?:and (?:some (?:and ?:any ?:any))
                            (?:maybe ?:any)))
        {.:Some [options default]}
        (with_monad meta:monad
          [target target
           options (monad:each meta:monad
                               (function (_ [platform pick])
                                 (with_monad meta:monad
                                   [platform (platform_name platform)]
                                   (pure [platform pick])))
                               options)]
          (when (list:one (function (_ [platform pick])
                            (if (.text_=# target platform)
                                {.:Some pick}
                                {.:None}))
                          options)
            {.:Some pick}
            (meta:pure (list pick))

            {.:None}
            (when default
              {.:Some default}
              (meta:pure (list default))
              
              {.:None}
              (failure (text "No code for target platform: " target)))))

        {.:None}
        (failure ..wrong_syntax)))))
