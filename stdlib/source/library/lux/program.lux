(.require
 [library
  [lux (.except)
   ["@" target]
   [abstract
    [monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" io]
    [concurrency
     ["[0]" thread]]]
   [macro (.only with_symbols)
    [syntax (.only syntax)]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\parser]]]]]
 ["</>" \\parser])

(type Arguments
  (Variant
   {#Raw Text}
   {#Parsed (List Code)}))

(def arguments^
  (<code>.Parser Arguments)
  (<>.or <code>.local
         (<code>.tuple (<>.some <code>.any))))

(def .public program:
  (syntax (_ [args ..arguments^
              body <code>.any])
    (with_symbols [g!program g!args g!_ g!output g!message]
      (let [initialization+event_loop (for @.old body
                                           @.jvm body
                                           @.js body
                                           @.python body
                                           ... else
                                           (` ((~! do) (~! io.monad)
                                               [(~ g!output) (~ body)
                                                (~ g!_) (~! thread.run!)]
                                               ((~' in) (~ g!output)))))]
        (in (list (` ("lux def program"
                      (~ (case args
                           {#Raw args}
                           (` (.function ((~ g!program) (~ (code.symbol ["" args])))
                                (~ initialization+event_loop)))
                           
                           {#Parsed args}
                           (` (.function ((~ g!program) (~ g!args))
                                (case ((~! </>.result) (.is (~! (</>.Parser (io.IO .Any)))
                                                            ((~! do) (~! <>.monad)
                                                             [(~+ args)
                                                              (~ g!_) (~! </>.end)]
                                                             ((~' in) (~ initialization+event_loop))))
                                       (~ g!args))
                                  {.#Right (~ g!output)}
                                  (~ g!output)

                                  {.#Left (~ g!message)}
                                  (.panic! (~ g!message)))))))))))))))
