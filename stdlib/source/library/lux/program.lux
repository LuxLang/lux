(.module:
  [library
   [lux "*"
    ["@" target]
    [abstract
     [monad {"+" do}]]
    [control
     ["[0]" io]
     [concurrency
      ["[0]" thread]]
     ["<>" parser
      ["<[0]>" code]
      ["<[0]>" cli]]]
    [macro {"+" with_identifiers}
     [syntax {"+" syntax:}]
     ["[0]" code]]]])

(type: Arguments
  (Variant
   {#Raw Text}
   {#Parsed (List Code)}))

(def: arguments^
  (<code>.Parser Arguments)
  (<>.or <code>.local_identifier
         (<code>.tuple (<>.some <code>.any))))

(syntax: .public (program: [args ..arguments^
                            body <code>.any])
  (with_identifiers [g!program g!args g!_ g!output g!message]
    (let [initialization+event_loop
          (` ((~! do) (~! io.monad)
              [(~ g!output) (~ body)
               (~+ (for [@.old (list)
                         @.jvm (list)
                         @.js (list)
                         @.python (list)]
                        (list g!_ (` (~! thread.run!)))))]
              ((~' in) (~ g!output))))]
      (in (list (` ("lux def program"
                    (~ (case args
                         {#Raw args}
                         (` (.function ((~ g!program) (~ (code.identifier ["" args])))
                              (~ initialization+event_loop)))
                         
                         {#Parsed args}
                         (` (.function ((~ g!program) (~ g!args))
                              (case ((~! <cli>.result) (: (~! (<cli>.Parser (io.IO .Any)))
                                                          ((~! do) (~! <>.monad)
                                                           [(~+ args)
                                                            (~ g!_) (~! <cli>.end)]
                                                           ((~' in) (~ initialization+event_loop))))
                                     (~ g!args))
                                {.#Right (~ g!output)}
                                (~ g!output)

                                {.#Left (~ g!message)}
                                (.panic! (~ g!message))))))))))))))
