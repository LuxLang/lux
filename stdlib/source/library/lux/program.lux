... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" io (.only IO)]
    [concurrency
     ["[0]" thread]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro (.only with_symbols)
     [syntax (.only syntax)]]]]]
 ["</>" \\projection])

(every .public Program
  (-> (List Text) (IO Any)))

(every Arguments
  (Variant
   {#Raw Text}
   {#Parsed (List Code)}))

(the arguments^
  (<code>.Projection Arguments)
  (<>.or <code>.local
         (<code>.tuple (<>.some <code>.any))))

(the .public program
  (syntax (_ [args ..arguments^
              body <code>.any])
    (with_symbols [g!program g!args g!_ g!output g!message]
      (let [initialization+event_loop (for .old body
                                           .jvm body
                                           .js body
                                           .python body
                                           ... else
                                           (` (do io.monad
                                                [(, g!output) (, body)
                                                 (, g!_) thread.run!]
                                                ((,' in) (, g!output)))))]
        (in (list (` (is Program
                         (, (when args
                              {#Raw args}
                              (` (.function ((, g!program) (, (code.symbol ["" args])))
                                   (, initialization+event_loop)))
                              
                              {#Parsed args}
                              (` (.function ((, g!program) (, g!args))
                                   (when (</>.value (.is (</>.Projection (io.IO .Any))
                                                         (do <>.monad
                                                           [(,* args)
                                                            (, g!_) </>.end]
                                                           ((,' in) (, initialization+event_loop))))
                                                    (, g!args))
                                     {.#Right (, g!output)}
                                     (, g!output)

                                     {.#Left (, g!message)}
                                     (.panic! (, g!message)))))))))))))))
