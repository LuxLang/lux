... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [concurrency
    ["[0]" thread]]
   [control
    ["[0]" io (.only IO)]]
   [data
    [collection
     ["[0]" list
      ["?[1]" \\projection]]]]
   [macro (.only with_names)
    ["[0]" syntax]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]]
 ["</>" \\projection])

(every .public Program
  (-> (Stack Text)
      (IO Any)))

(every Arguments
  (Variant
   {#Raw Text}
   {#Parsed (List Code)}))

(the arguments^
  (<code>.Projection Arguments)
  (<>.or <code>.local
         (<code>.tuple (<>.some ?list.any))))

(syntax.the .public (program [args ..arguments^
                              body ?list.any])
  (with_names ['program 'args '_ 'output 'message]
    (let [initialization+event_loop (for .jvm body
                                         .js body
                                         .python body
                                         ... else
                                         (` (monad.let io.monad
                                              [(, 'output) (, body)
                                               (, '_) thread.value]
                                              ((,' pure) (, 'output)))))]
      (pure (list (` (is Program
                         (, (when args
                              {#Raw args}
                              (` (.function ((, 'program) (, (code.name ["" args])))
                                   (, initialization+event_loop)))
                              
                              {#Parsed args}
                              (` (.function ((, 'program) (, 'args))
                                   (when (<| (</>.value (, 'args))
                                             (.is (</>.Projection (io.IO .Any)))
                                             (monad.let <>.monad
                                               [(,* args)]
                                               ((,' pure) (, initialization+event_loop))))
                                     {.#Right (, 'output)}
                                     (, 'output)

                                     {.#Left (, 'message)}
                                     (.halt! (, 'message))))))))))))))
