... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" projection]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad mix)]
     ["[0]" set]]]
   ["[0]" meta (.only)
    [extension (.only declaration)]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro
     ["[0]" syntax]
     ["[0]" expansion]]
    [compiler
     [target
      ["/" python]]
     [meta
      [cache
       ["[0]" dependency
        ["[1]" artifact]]]]
     [language
      [lux
       ["[0]" phase]
       ["[0]" translation]
       ["[0]" declaration]
       [analysis
        ["[0]" type]]]]]]]])

(the definition
  (-> Code
      (Meta [Text Code]))
  (|>> (list)
       (<code>.value (<| <code>.form
                         (<>.after (<code>.this_symbol (symbol .def#)))
                         (<>.before <code>.any)
                         (all <>.and
                              <code>.local
                              <code>.any)))
       meta.of_try))

(the .public export_one
  (declaration (_ phase archive [name <code>.text
                                 term <code>.any])
    (do [! phase.monad]
      [next declaration.analysis
       [_ term] (<| declaration.of_analysis
                    type.inferring
                    (next archive term))

       lux (declaration.of_analysis meta.compiler_state)
       next declaration.synthesis
       term (declaration.of_synthesis
             (next lux archive term))

       dependencies (declaration.of_translation
                     (dependency.dependencies archive term))

       next declaration.translation
       [interim_artifacts term] (declaration.of_translation
                                 (translation.with_interim_artifacts archive
                                   (next lux archive term)))

       _ (declaration.of_translation
          (do !
            [@self (translation.learn_custom name (list#mix set.has dependencies interim_artifacts))
             .let [code (/.set (list (/.item (/.string name) /.globals/0)) term)]
             _ (translation.execute! code)
             _ (translation.save! @self {.#None} code)]
            (translation.log! (%.message "Export " (%.text name)))))]
      (in declaration.no_requirements))))

(the .public export
  (syntax.macro (_ [exports (<>.many <code>.any)])
    (let [! meta.monad]
      (|> exports
          (monad.each ! expansion.complete)
          (of ! each (|>> list#conjoint
                          (monad.each ! ..definition)))
          (of ! conjoint)
          (of ! each (list#each (function (_ [name term])
                                  (` (..export_one (, (code.text name)) (, term))))))))))
