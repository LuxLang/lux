(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]]
   [data
    [text
     ["%" \\format]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad mix)]
     ["[0]" set]]]
   [math
    ["[0]" random]]
   ["[0]" meta (.only)
    [extension (.only declaration)]
    ["[0]" static]
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    [macro
     [syntax (.only syntax)]
     ["[0]" expansion]]
    [target
     ["/" python]]
    [compiler
     ["[0]" phase]
     [meta
      [cache
       ["[0]" dependency
        ["[1]" artifact]]]]
     [language
      [lux
       ["[0]" generation]
       ["[0]" declaration]
       [analysis
        ["[0]" type]]]]]]]])

(def definition
  (-> Code (Meta [Text Code]))
  (|>> (list)
       (<code>.result (<| <code>.form
                          (<>.after (<code>.this_symbol (symbol .def#)))
                          (<>.before <code>.any)
                          (all <>.and
                               <code>.local
                               <code>.any)))
       meta.lifted))

(with_expansions [<extension> (static.random (|>> %.nat (%.format "python export ") code.text)
                                             random.nat)]
  (declaration (<extension> self phase archive [name <code>.text
                                                term <code>.any])
    (do [! phase.monad]
      [next declaration.analysis
       [_ term] (<| declaration.lifted_analysis
                    type.inferring
                    (next archive term))

       next declaration.synthesis
       term (declaration.lifted_synthesis
             (next archive term))

       dependencies (declaration.lifted_generation
                     (dependency.dependencies archive term))

       next declaration.generation
       [interim_artifacts term] (declaration.lifted_generation
                                 (generation.with_interim_artifacts archive
                                   (next archive term)))

       _ (declaration.lifted_generation
          (do !
            [@self (generation.learn_custom name (list#mix set.has dependencies interim_artifacts))
             .let [code (/.set (list (/.item (/.string name) /.globals/0)) term)]
             _ (generation.execute! code)
             _ (generation.save! @self {.#None} code)]
            (generation.log! (%.format "Export " (%.text name)))))]
      (in declaration.no_requirements)))

  (def .public export
    (syntax (_ [exports (<>.many <code>.any)])
      (let [! meta.monad]
        (|> exports
            (monad.each ! expansion.complete)
            (at ! each (|>> list#conjoint
                            (monad.each ! ..definition)))
            (at ! conjoint)
            (at ! each (list#each (function (_ [name term])
                                    (` (<extension> (, (code.text name)) (, term)))))))))))
