... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" set]
     ["[0]" list (.use "[1]:[0]" monad)
      ["?[1]" \\projection]]
     ["[0]" sequence]]]
   [macro
    ["[0]" syntax]
    ["[0]" expansion]]
   [target
    ["/" python]]
   ["[0]" meta (.only)
    [extension (.only declaration)]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [compiler
    [meta
     [cache
      ["[0]" dependency
       ["[1]" artifact]]]]
    [language
     [lux
      ["[0]" phase]
      ["[0]" translation]
      ["[0]" declaration]
      [analysis
       ["[0]" type]]]]]]])

(the (definition it)
  (-> Code
      (Meta [Text Code]))
  (|> (<| <code>.form
          (<>.after (<code>.this_name (name .def#)))
          (<>.before ?list.any)
          (all <>.and
               <code>.local
               ?list.any))
      (?list.value (list it))
      meta.of_try))

(the .public export_one
  (declaration (_ phase archive [name <code>.text
                                 term ?list.any])
    (monad.let [! phase.monad]
      [analysis declaration.analysis
       [_ term] (<| declaration.of_analysis
                    type.inferring
                    (analysis archive term))

       lux (declaration.of_analysis meta.compiler_state)
       synthesis declaration.synthesis
       term (declaration.of_synthesis
             (synthesis lux archive term))

       dependencies (declaration.of_translation
                     (dependency.dependencies archive term))

       translation declaration.translation
       [interim_artifacts term] (<| declaration.of_translation
                                    (translation.with_interim_artifacts archive)
                                    (translation lux archive term))
       
       _ (declaration.of_translation
          (monad.let !
            [@self (translation.learn_custom (sequence.mix set.has dependencies interim_artifacts) name)
             .let [code (/.set (list (/.item (/.string name) /.globals/0)) term)]
             _ (translation.execute! code)]
            (translation.save! @self {.:None} code)))]
      (pure declaration.no_requirements))))

(syntax.the .public (export [exports (<>.many ?list.any)])
  (let [! meta.monad]
    (|> exports
        (list.each' ! expansion.complete)
        (by ! each (|>> list:conjoint
                        (list.each' ! ..definition)))
        (by ! conjoint)
        (by ! each (list:each (function (_ [name term])
                                (` (..export_one (, (code.text name)) (, term)))))))))
