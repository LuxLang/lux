(.require
 [library
  [lux (.except)
   [extension (.only declaration)]
   ["[0]" static]
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]]
   [data
    [text
     ["%" \\format]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad mix)]
     ["[0]" set]]]
   ["[0]" macro (.only)
    [syntax (.only syntax)]]
   [math
    ["[0]" random]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\parser]]]
   [target
    ["/" lua]]
   [tool
    [compiler
     ["[0]" phase]
     [meta
      [cache
       ["[0]" dependency
        ["[1]" artifact]]]]
     [language
      [lux
       ["[0]" generation]
       ["[0]" declaration]
       [analysis
        ["[0]" type]]]]]]]])

(def definition
  (-> Code (Meta [Text Code]))
  (|>> (list)
       (<code>.result (<| <code>.form
                          (<>.after (<code>.this_text "lux def"))
                          (<>.before <code>.any)
                          (all <>.and
                               <code>.local
                               <code>.any)))
       meta.lifted))

... [15.2 – Privacy](https://www.lua.org/pil/15.2.html)
... [15.3 – Packages and Files](https://www.lua.org/pil/15.3.html)
... [15.4 – Using the Global Table](https://www.lua.org/pil/15.4.html)

(with_expansions [<extension> (static.random (|>> %.nat (%.format "lua export ") code.text)
                                             random.nat)]
  (declaration (<extension> self phase archive [name <code>.text
                                                term <code>.any])
    (do [! phase.monad]
      [next declaration.analysis
       [_ term] (<| declaration.lifted_analysis
                    type.inferring
                    (next archive term))

       next declaration.synthesis
       term (declaration.lifted_synthesis
             (next archive term))

       dependencies (declaration.lifted_generation
                     (dependency.dependencies archive term))

       next declaration.generation
       [interim_artifacts term] (declaration.lifted_generation
                                 (generation.with_interim_artifacts archive
                                   (next archive term)))

       _ (declaration.lifted_generation
          (do !
            [@self (generation.learn_custom name (list#mix set.has dependencies interim_artifacts))
             .let [$exports (/.var "_REQUIREDNAME")
                   $global (/.var "_G")
                   exporting? (/.not (/.= /.nil $exports))
                   no_exports? (/.= /.nil (/.item $exports $global))
                   initialize_exports! (/.set (list (/.item $exports $global)) (/.table (list)))
                   export_definition! (/.set (|> $global
                                                 (/.item $exports)
                                                 (/.item (/.string name))
                                                 (list))
                                             (/.var name))
                   export! (/.when exporting?
                                   (all /.then
                                        (/.when no_exports?
                                                initialize_exports!)
                                        export_definition!
                                        ))]
             _ (generation.execute! (all /.then
                                         (/.set (list (/.var name)) term)
                                         export!))
             _ (generation.save! @self {.#None} (all /.then
                                                     (/.local/1 (/.var name) term)
                                                     export!))]
            (generation.log! (%.format "Export " (%.text name)))))]
      (in declaration.no_requirements)))

  (def .public export
    (syntax (_ [exports (<>.many <code>.any)])
      (let [! meta.monad]
        (|> exports
            (monad.each ! macro.expansion)
            (at ! each (|>> list#conjoint
                            (monad.each ! ..definition)))
            (at ! conjoint)
            (at ! each (list#each (function (_ [name term])
                                    (` (<extension> (~ (code.text name)) (~ term)))))))))))
