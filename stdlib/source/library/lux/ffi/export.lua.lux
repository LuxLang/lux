... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["<>" projection]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" sequence]
     ["[0]" set]
     ["[0]" list (.use "[1]#[0]" monad)
      ["?[1]" \\projection]]]]
   [macro
    ["[0]" syntax]
    ["[0]" expansion]]
   ["[0]" meta (.only)
    [extension (.only declaration)]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [compiler
    [meta
     [cache
      ["[0]" dependency
       ["[1]" artifact]]]]
    [language
     [lux
      ["[0]" phase]
      ["[0]" translation]
      ["[0]" declaration]
      [analysis
       ["[0]" type]]]]]
   [target
    ["/" lua]]]])

(the (definition it)
  (-> Code
      (Meta [Text Code]))
  (|> (<| <code>.form
          (<>.after (<code>.this_name (name .def#)))
          (<>.before ?list.any)
          (all <>.and
               <code>.local
               ?list.any))
      (?list.value (list it))
      meta.of_try))

... [15.2 – Privacy](https://www.lua.org/pil/15.2.html)
... [15.3 – Packages and Files](https://www.lua.org/pil/15.3.html)
... [15.4 – Using the Global Table](https://www.lua.org/pil/15.4.html)

(the .public export_one
  (declaration (_ phase archive [name <code>.text
                                 term ?list.any])
    (do [! phase.monad]
      [next declaration.analysis
       [_ term] (<| declaration.of_analysis
                    type.inferring
                    (next archive term))

       lux (declaration.of_analysis meta.compiler_state)
       next declaration.synthesis
       term (declaration.of_synthesis
             (next lux archive term))

       dependencies (declaration.of_translation
                     (dependency.dependencies archive term))

       next declaration.translation
       [interim_artifacts term] (declaration.of_translation
                                 (translation.with_interim_artifacts archive
                                   (next lux archive term)))

       _ (declaration.of_translation
          (do !
            [@self (translation.learn_custom name (sequence.mix set.has dependencies interim_artifacts))
             .let [$exports (/.var "_REQUIREDNAME")
                   $global (/.var "_G")
                   exporting? (/.not (/.= /.nil $exports))
                   no_exports? (/.= /.nil (/.item $exports $global))
                   initialize_exports! (/.set (list (/.item $exports $global)) (/.table (list)))
                   export_definition! (/.set (|> $global
                                                 (/.item $exports)
                                                 (/.item (/.string name))
                                                 (list))
                                             (/.var name))
                   export! (/.when exporting?
                             (all /.then
                                  (/.when no_exports?
                                    initialize_exports!)
                                  export_definition!
                                  ))]
             _ (translation.execute! (all /.then
                                          (/.set (list (/.var name)) term)
                                          export!))]
            (translation.save! @self {.#None} (all /.then
                                                   (/.local/1 (/.var name) term)
                                                   export!))))]
      (in declaration.no_requirements))))

(the .public export
  (syntax.macro (_ [exports (<>.many ?list.any)])
    (let [! meta.monad]
      (|> exports
          (list.each' ! expansion.complete)
          (by ! each (|>> list#conjoint
                          (list.each' ! ..definition)))
          (by ! conjoint)
          (by ! each (list#each (function (_ [name term])
                                  (` (export_one (, (code.text name)) (, term))))))))))
