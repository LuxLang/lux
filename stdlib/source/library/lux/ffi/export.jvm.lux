... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except function)
   [abstract
    ["<>" projection]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monad)
      ["?[1]" \\projection]]]]
   [macro
    ["[0]" syntax]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]]]]
 ["[0]" //])

(every (API it)
  (Record
   [#interface it
    #type Code
    #term Code]))

(the (api it)
  (for_any (_ it)
    (-> (Projection it)
        (Projection (API it))))
  (<code>.form
   (all <>.and
        it
        ?list.any
        ?list.any
        )))

(every Constant
  Text)

(the constant
  (Projection Constant)
  <code>.local)

(every Function
  (Record
   [#variables (List Text)
    #name Text
    #requirements (List [Text Code])]))

(the function
  (Projection Function)
  (<code>.form
   (all <>.and
        (<>.else (list) (<code>.tuple (<>.some <code>.local)))
        <code>.local
        (<code>.tuple (<>.some (all <>.and
                                    <code>.local
                                    ?list.any
                                    )))
        )))

(every Export
  (Variant
   {#Constant (API Constant)}
   {#Function (API Function)}))

(the exportP
  (Projection Export)
  (all <>.or
       (..api ..constant)
       (..api ..function)
       ))

(the .public export
  (syntax.macro (_ [api <code>.local
                    exports (<>.many ..exportP)])
    (let [initialization (is (List (API Constant))
                             (list.all (.function (_ it)
                                         (when it
                                           {#Constant it}
                                           {.#Some it}
                                           
                                           _
                                           {.#None}))
                                       exports))]
      (pure (list (` (//.class "final" (, (code.local api))
                               (,* (list#each (.function (_ it)
                                                (when it
                                                  {#Constant [name type term]}
                                                  (` ("public" "final" "static" (, (code.local name)) (, type)))
                                                  
                                                  {#Function [[variables name requirements] type term]}
                                                  (` ("public" "strict" "static"
                                                      [(,* (list#each code.local variables))]
                                                      ((, (code.local name))
                                                       [(,* (|> requirements
                                                                (list#each (.function (_ [name type])
                                                                             (list (code.local name)
                                                                                   type)))
                                                                list#conjoint))])
                                                      (, type)
                                                      (, term)))))
                                              exports))
                               ... Useless constructor
                               ("private" [] ((,' new) (,' self) []) [] [])
                               ("public" "strict" "static" [] ((,' <clinit>) [])
                                (,' void)
                                [(,* (list#each (.function (_ [name type term])
                                                  (` (.jvm_member_put_static# (, (code.text api))
                                                                              (, (code.text name))
                                                                              (.jvm_object_cast# (, term)))))
                                                initialization))])
                               )))))))
