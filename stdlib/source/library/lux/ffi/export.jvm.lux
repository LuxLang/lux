(.using
 [library
  [lux (.except function)
   [control
    ["<>" parser (.only)
     ["<[0]>" code (.only Parser)]]]
   [data
    [collection
     ["[0]" list (.open: "[1]#[0]" monad)]]]
   [macro
    [syntax (.only syntax)]
    ["[0]" code]]]]
 ["[0]" //])

(type: (API of)
  (Record
   [#interface of
    #type Code
    #term Code]))

(def (api of)
  (All (_ of) (-> (Parser of) (Parser (API of))))
  (<code>.form
   (all <>.and
        of
        <code>.any
        <code>.any
        )))

(type: Constant
  Text)

(def constant
  (Parser Constant)
  <code>.local)

(type: Function
  (Record
   [#variables (List Text)
    #name Text
    #requirements (List [Text Code])]))

(def function
  (Parser Function)
  (<code>.form
   (all <>.and
        (<>.else (list) (<code>.tuple (<>.some <code>.local)))
        <code>.local
        (<code>.tuple (<>.some (all <>.and
                                    <code>.local
                                    <code>.any
                                    )))
        )))

(type: Export
  (Variant
   {#Constant (API Constant)}
   {#Function (API Function)}))

(def exportP
  (Parser Export)
  (all <>.or
       (..api ..constant)
       (..api ..function)
       ))

(def .public export
  (syntax (_ [api <code>.local
              exports (<>.many ..exportP)])
    (let [initialization (is (List (API Constant))
                             (list.all (.function (_ it)
                                         (case it
                                           {#Constant it}
                                           {.#Some it}
                                           
                                           _
                                           {.#None}))
                                       exports))]
      (in (list (` (//.class "final" (~ (code.local api))
                     (~+ (list#each (.function (_ it)
                                      (case it
                                        {#Constant [name type term]}
                                        (` ("public" "final" "static" (~ (code.local name)) (~ type)))
                                        
                                        {#Function [[variables name requirements] type term]}
                                        (` ("public" "strict" "static"
                                            [(~+ (list#each code.local variables))]
                                            ((~ (code.local name))
                                             [(~+ (|> requirements
                                                      (list#each (.function (_ [name type])
                                                                   (list (code.local name)
                                                                         type)))
                                                      list#conjoint))])
                                            (~ type)
                                            (~ term)))))
                                    exports))
                     ... Useless constructor
                     ("private" [] ((~' new) (~' self) []) [] [])
                     ("public" "strict" "static" [] ((~' <clinit>) [])
                      (~' void)
                      [(~+ (list#each (.function (_ [name type term])
                                        (` ("jvm member put static"
                                            (~ (code.text api))
                                            (~ (code.text name))
                                            ("jvm object cast" (~ term)))))
                                      initialization))])
                     )))))))
