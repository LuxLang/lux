... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except #Function
                function)
   [abstract
    ["<>" projection]]
   [data
    [collection
     ["[0]" stack (.use "[1]#[0]" monad)]]]
   [macro
    ["[0]" syntax]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]]]]
 ["[0]" //])

(every (API of)
  (Record
   [#interface of
    #type Code
    #term Code]))

(the (api of)
  (for_any (_ of)
    (-> (Projection of)
        (Projection (API of))))
  (<code>.form
   (all <>.and
        of
        <code>.any
        <code>.any
        )))

(every Constant
  Text)

(the constant
  (Projection Constant)
  <code>.local)

(every Function
  (Record
   [#variables (Stack Text)
    #name Text
    #requirements (Stack [Text Code])]))

(the function
  (Projection Function)
  (<code>.form
   (all <>.and
        (<>.else (stack) (<code>.tuple (<>.some <code>.local)))
        <code>.local
        (<code>.tuple (<>.some (all <>.and
                                    <code>.local
                                    <code>.any
                                    )))
        )))

(every Export
  (Variant
   {#Constant (API Constant)}
   {#Function (API Function)}))

(the exportP
  (Projection Export)
  (all <>.or
       (..api ..constant)
       (..api ..function)
       ))

(the .public export
  (syntax.macro (_ [api <code>.local
                    exports (<>.many ..exportP)])
    (let [initialization (is (Stack (API Constant))
                             (stack.all (.function (_ it)
                                          (when it
                                            {#Constant it}
                                            {.#Some it}
                                            
                                            _
                                            {.#None}))
                                        exports))]
      (in (stack (` (//.class "final" (, (code.local api))
                      (,* (stack#each (.function (_ it)
                                        (when it
                                          {#Constant [name type term]}
                                          (` ("public" "final" "static" (, (code.local name)) (, type)))
                                          
                                          {#Function [[variables name requirements] type term]}
                                          (` ("public" "strict" "static"
                                              [(,* (stack#each code.local variables))]
                                              ((, (code.local name))
                                               [(,* (|> requirements
                                                        (stack#each (.function (_ [name type])
                                                                      (stack (code.local name)
                                                                             type)))
                                                        stack#conjoint))])
                                              (, type)
                                              (, term)))))
                                      exports))
                      ... Useless constructor
                      ("private" [] ((,' new) (,' self) []) [] [])
                      ("public" "strict" "static" [] ((,' <clinit>) [])
                       (,' void)
                       [(,* (stack#each (.function (_ [name type term])
                                          (` (.jvm_member_put_static# (, (code.text api))
                                                                      (, (code.text name))
                                                                      (.jvm_object_cast# (, term)))))
                                        initialization))])
                      )))))))
