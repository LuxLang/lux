(.require
 [library
  [lux (.except global)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]]
   [data
    ["[0]" text
     ["%" \\format]
     ["<[1]>" \\parser (.only Parser)]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad mix)]
     ["[0]" set]]]
   [math
    ["[0]" random]]
   ["[0]" meta (.only)
    [extension (.only declaration)]
    ["[0]" static]
    ["[0]" type]
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    [macro
     [syntax (.only syntax)]
     ["[0]" expansion]]
    [target
     ["/" ruby]]
    [compiler
     ["[0]" phase]
     [meta
      [cache
       ["[0]" dependency
        ["[1]" artifact]]]]
     [language
      [lux
       ["[0]" translation]
       ["[0]" declaration]
       ["[0]" analysis
        ["[1]" type]]]]]]]])

(def upper! (<text>.one_of! "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
(def lower! (<text>.one_of! "abcdefghijklmnopqrstuvwxyz"))
(def decimal! (<text>.one_of! "0123456789"))
(def sigil! (<text>.one_of! "_"))

(def tail!
  (all <>.either
       ..upper!
       ..lower!
       ..decimal!
       ..sigil!
       ))

(with_template [<name> <head>]
  [(def <name>
     (Parser Text)
     (<| <text>.slice
         (<text>.and! <head>)
         (<text>.some! ..tail!)))]

  [method ..lower!]
  [global (<text>.one_of! "$")]
  [constant ..upper!]
  )

(type Name
  (Variant
   {#Method Text}
   {#Global Text}))

(def name
  (Parser Name)
  (<>.or ..method
         (<>.either ..global
                    ..constant)))

(def definition
  (-> Code (Meta [Name Code]))
  (|>> (list)
       (<code>.result (<| <code>.form
                          (<>.after (<code>.this_symbol (symbol .def#)))
                          (<>.before <code>.any)
                          (all <>.and
                               (<text>.then ..name <code>.local)
                               <code>.any)))
       meta.lifted))

(with_expansions [<extension> (static.random (|>> %.nat (%.format "ruby export ") code.text)
                                             random.nat)]
  (declaration (<extension> self phase archive [global? <code>.bit
                                                name <code>.text
                                                term <code>.any])
    (do [! phase.monad]
      [next declaration.analysis
       [type term] (<| declaration.lifted_analysis
                       analysis.inferring
                       (next archive term))

       next declaration.synthesis
       term (declaration.lifted_synthesis
             (next archive term))

       dependencies (declaration.lifted_translation
                     (dependency.dependencies archive term))

       next declaration.translation
       [interim_artifacts term] (declaration.lifted_translation
                                 (translation.with_interim_artifacts archive
                                   (next archive term)))

       _ (declaration.lifted_translation
          (do !
            [@self (translation.learn_custom name (list#mix set.has dependencies interim_artifacts))
             .let [[:input:/* :output:] (type.flat_function type)
                   code (if global?
                          (/.set (list (/.manual name)) term)
                          (when :input:/*
                            {.#End}
                            (/.function (/.manual name) (list)
                              (/.return term))

                            _
                            (/.statement (/.apply (list (/.string name) term) {.#None}
                                                  (/.manual "define_method")))))]
             _ (translation.execute! code)
             _ (translation.save! @self {.#None} code)]
            (translation.log! (%.format "Export " (%.text name)))))]
      (in declaration.no_requirements)))

  (def .public export
    (syntax (_ [exports (<>.many <code>.any)])
      (let [! meta.monad]
        (|> exports
            (monad.each ! expansion.complete)
            (at ! each (|>> list#conjoint
                            (monad.each ! ..definition)))
            (at ! conjoint)
            (at ! each (list#each (function (_ [name term])
                                    (` (<extension> (,* (when name
                                                          {#Method name}
                                                          (list (code.bit false) (code.text name))
                                                          
                                                          {#Global name}
                                                          (list (code.bit true) (code.text name))))
                                                    (, term)))))))))))
