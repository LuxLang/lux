(.using
 [library
  [lux (.except global)
   [extension (.only directive)]
   ["[0]" meta]
   ["[0]" static]
   ["[0]" type]
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser (.only)
     ["<[0]>" code]]]
   [data
    ["[0]" text
     ["%" format]
     ["<[1]>" \\parser (.only Parser)]]
    [collection
     ["[0]" list (.open: "[1]#[0]" monad mix)]
     ["[0]" set]]]
   ["[0]" macro (.only)
    [syntax (.only syntax)]
    ["[0]" code]]
   [math
    ["[0]" random]]
   [target
    ["/" ruby]]
   [tool
    [compiler
     ["[0]" phase]
     [meta
      [cache
       ["[0]" dependency
        ["[1]" artifact]]]]
     [language
      [lux
       ["[0]" generation]
       ["[0]" directive]
       ["[0]" analysis
        ["[1]" type]]]]]]]])

(def: upper! (<text>.one_of! "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
(def: lower! (<text>.one_of! "abcdefghijklmnopqrstuvwxyz"))
(def: decimal! (<text>.one_of! "0123456789"))
(def: sigil! (<text>.one_of! "_"))

(def: tail!
  (all <>.either
       ..upper!
       ..lower!
       ..decimal!
       ..sigil!
       ))

(with_template [<name> <head>]
  [(def: <name>
     (Parser Text)
     (<| <text>.slice
         (<text>.and! <head>)
         (<text>.some! ..tail!)))]

  [method ..lower!]
  [global (<text>.one_of! "$")]
  [constant ..upper!]
  )

(type: Name
  (Variant
   {#Method Text}
   {#Global Text}))

(def: name
  (Parser Name)
  (<>.or ..method
         (<>.either ..global
                    ..constant)))

(def: definition
  (-> Code (Meta [Name Code]))
  (|>> (list)
       (<code>.result (<| <code>.form
                          (<>.after (<code>.this_text "lux def"))
                          (<>.before <code>.any)
                          (all <>.and
                               (<text>.then ..name <code>.local)
                               <code>.any)))
       meta.lifted))

(with_expansions [<extension> (static.random (|>> %.nat (%.format "ruby export ") code.text)
                                             random.nat)]
  (directive (<extension> self phase archive [global? <code>.bit
                                              name <code>.text
                                              term <code>.any])
    (do [! phase.monad]
      [next directive.analysis
       [type term] (<| directive.lifted_analysis
                       analysis.inferring
                       (next archive term))

       next directive.synthesis
       term (directive.lifted_synthesis
             (next archive term))

       dependencies (directive.lifted_generation
                     (dependency.dependencies archive term))

       next directive.generation
       [interim_artifacts term] (directive.lifted_generation
                                 (generation.with_interim_artifacts archive
                                   (next archive term)))

       _ (directive.lifted_generation
          (do !
            [@self (generation.learn_custom name (list#mix set.has dependencies interim_artifacts))
             .let [[:input:/* :output:] (type.flat_function type)
                   code (if global?
                          (/.set (list (/.manual name)) term)
                          (case :input:/*
                            {.#End}
                            (/.function (/.manual name) (list)
                              (/.return term))

                            _
                            (/.statement (/.apply (list (/.string name) term) {.#None}
                                                  (/.manual "define_method")))))]
             _ (generation.execute! code)
             _ (generation.save! @self {.#None} code)]
            (generation.log! (%.format "Export " (%.text name)))))]
      (in directive.no_requirements)))

  (def: .public export
    (syntax (_ [exports (<>.many <code>.any)])
      (let [! meta.monad]
        (|> exports
            (monad.each ! macro.expansion)
            (at ! each (|>> list#conjoint
                            (monad.each ! ..definition)))
            (at ! conjoint)
            (at ! each (list#each (function (_ [name term])
                                    (` (<extension> (~+ (case name
                                                          {#Method name}
                                                          (list (code.bit #0) (code.text name))
                                                          
                                                          {#Global name}
                                                          (list (code.bit #1) (code.text name))))
                                                    (~ term)))))))))))
