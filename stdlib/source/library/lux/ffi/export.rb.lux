... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except global
                Name name)
   [abstract
    ["<>" projection]
    ["[0]" monad (.only do)]]
   [data
    ["[0]" text
     ["%" \\injection]
     ["<[1]>" \\projection (.only Projection)]]
    [collection
     ["[0]" stack (.use "[1]#[0]" monad mix)]
     ["[0]" set]]]
   ["[0]" type]
   [macro
    ["[0]" syntax]
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" meta (.only)
    [extension (.only declaration)]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [compiler
     [target
      ["/" ruby]]
     [meta
      [cache
       ["[0]" dependency
        ["[1]" artifact]]]]
     [language
      [lux
       ["[0]" phase]
       ["[0]" translation]
       ["[0]" declaration]
       ["[0]" analysis
        ["[1]" type]]]]]]]])

(the upper! (<text>.one_of! "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
(the lower! (<text>.one_of! "abcdefghijklmnopqrstuvwxyz"))
(the decimal! (<text>.one_of! "0123456789"))
(the sigil! (<text>.one_of! "_"))

(the tail!
  (all <>.either
       ..upper!
       ..lower!
       ..decimal!
       ..sigil!
       ))

(template.with [<name> <head>]
  [(the <name>
     (Projection Text)
     (<| <text>.slice
         (<text>.and! <head>)
         (<text>.some! ..tail!)))]

  [method ..lower!]
  [global (<text>.one_of! "$")]
  [constant ..upper!]
  )

(every Name
  (Variant
   {#Method Text}
   {#Global Text}))

(the name
  (Projection Name)
  (<>.or ..method
         (<>.either ..global
                    ..constant)))

(the definition
  (-> Code (Meta [Name Code]))
  (|>> (stack)
       (<code>.value (<| <code>.form
                         (<>.after (<code>.this_name (.name .def#)))
                         (<>.before <code>.any)
                         (all <>.and
                              (<text>.then ..name <code>.local)
                              <code>.any)))
       meta.of_try))

(the .public export_one
  (declaration (_ phase archive [global? <code>.bit
                                 name <code>.text
                                 term <code>.any])
    (do [! phase.monad]
      [next declaration.analysis
       [type term] (<| declaration.of_analysis
                       analysis.inferring
                       (next archive term))

       lux (declaration.of_analysis meta.compiler_state)
       next declaration.synthesis
       term (declaration.of_synthesis
             (next lux archive term))

       dependencies (declaration.of_translation
                     (dependency.dependencies archive term))

       next declaration.translation
       [interim_artifacts term] (declaration.of_translation
                                 (translation.with_interim_artifacts archive
                                   (next lux archive term)))

       _ (declaration.of_translation
          (do !
            [@self (translation.learn_custom name (stack#mix set.has dependencies interim_artifacts))
             .let [[:input:/* :output:] (type.flat_function type)
                   code (if global?
                          (/.; (/.set (stack (/.manual name)) term))
                          (when :input:/*
                            {.#Empty}
                            (/.function (/.manual name) (stack)
                              (/.return term))

                            _
                            (/.; (/.apply (stack (/.string name) term) {.#None}
                                          (/.manual "define_method")))))]
             _ (translation.execute! code)]
            (translation.save! @self {.#None} code)))]
      (in declaration.no_requirements))))

(the .public export
  (syntax.macro (_ [exports (<>.many <code>.any)])
    (let [! meta.monad]
      (|> exports
          (monad.each ! expansion.complete)
          (by ! each (|>> stack#conjoint
                          (monad.each ! ..definition)))
          (by ! conjoint)
          (by ! each (stack#each (function (_ [name term])
                                   (` (export_one (,* (when name
                                                        {#Method name}
                                                        (stack (code.bit false) (code.text name))
                                                        
                                                        {#Global name}
                                                        (stack (code.bit true) (code.text name))))
                                                  (, term))))))))))
