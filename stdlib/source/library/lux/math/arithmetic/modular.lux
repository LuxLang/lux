... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text)
   [abstract
    [equivalence (.only Equivalence)]
    [monoid (.only Monoid)]
    [format (.only Format)]
    [order (.only Order)]
    ["<>" projection]
    ["[0]" monad]]
   ["[0]" error (.only)
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["<[1]>" \\projection (.only Projection)]]]
   [math
    [number
     [/64
      ["i" integer (.use "[1]:[0]" base_10)]]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]
   [meta
    ["[0]" provenance]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]]
 [///
  ["/" modulus (.only Modulus)]])

(nominal.every .public (Modulo m)
  (Record
   [#modulus (Modulus m)
    #value Integer])

  (the .public (modulo modulus value)
    (for_any (_ %)
      (-> (Modulus %) Integer
          (Modulo %)))
    (nominal.of
     [#modulus modulus
      #value (i.modulo (/.divisor modulus) value)]))

  (template.with [<name> <type> <side>]
    [(the .public <name>
       (for_any (_ %)
         (-> (Modulo %)
             <type>))
       (|>> nominal.as
            <side>))]

    [[modulus (Modulus %) product.left]
     [value Integer product.right]])
  
  (exception.the .public (incorrect_modulus [modulus parsed])
    (for_any (_ %)
      (Exception [(Modulus %) Integer]))
    (exception.report
     (list ["Expected" (i:as (/.divisor modulus))]
           ["Actual" (i:as parsed)])))

  ... https://en.wikipedia.org/wiki/Delimiter
  (the delimiter
    " modulo ")

  (the integerL
    (Projection Integer)
    (<>.of i.base_10
           (<text>.and (<text>.one_of "-+") (<text>.many <text>.base_10))))

  (the .public (text expected)
    (for_any (_ %)
      (-> (Modulus %)
          (Format Text (Modulo %))))
    (implementation
     (the (as modulo)
       (let [[_ value] (nominal.as modulo)]
         (.text (i:as value)
                ..delimiter
                (i:as (/.divisor expected)))))

     (the of
       (<text>.value
        (monad.let <>.monad
          [[value _ actual] (all <>.and integerL (<text>.this ..delimiter) integerL)
           _ (<>.assertion (exception.error ..incorrect_modulus [expected actual])
                           (i.= (/.divisor expected) actual))]
          (pure (..modulo expected value)))))))

  (template.with [<name> <op>]
    [(the .public (<name> expected actual)
       (for_any (_ %)
         (-> (Modulo %) (Modulo %)
             Bit))
       (let [[_ expected] (nominal.as expected)
             [_ actual] (nominal.as actual)]
         (<op> expected actual)))]

    [[= i.=]
     [< i.<]
     [<= i.<=]
     [> i.>]
     [>= i.>=]])

  (the .public equivalence
    (for_any (_ %)
      (Equivalence (Modulo %)))
    (implementation
     (the = ..=)))

  (the .public order
    (for_any (_ %)
      (Order (Modulo %)))
    (implementation
     (the equivalence ..equivalence)
     (the < ..<)))

  (template.with [<name> <op>]
    [(the .public (<name> param subject)
       (for_any (_ %)
         (-> (Modulo %)
             (Change (Modulo %))))
       (let [[modulus param] (nominal.as param)
             [_ subject] (nominal.as subject)]
         (nominal.of
          [#modulus modulus
           #value (|> subject
                      (<op> param)
                      (i.modulo (/.divisor modulus)))])))]

    [[+ i.+]
     [- i.-]
     [x i.x]])

  (template.with [<composition> <identity> <monoid>]
    [(the .public (<monoid> modulus)
       (for_any (_ %)
         (-> (Modulus %)
             (Monoid (Modulo %))))
       (implementation
        (the identity
          (..modulo modulus <identity>))
        (the composite
          <composition>)))]
    
    [[..+ +0 addition]
     [..x +1 multiplication]])
  
  (the .public (inverse modulo)
    (for_any (_ %)
      (-> (Modulo %)
          (Maybe (Modulo %))))
    (let [[modulus value] (nominal.as modulo)
          [[vk mk] gcd] (i.extended_greatest_common_divisor value (/.divisor modulus))]
      (when gcd
        +1 {try.#Success (..modulo modulus vk)}
        _ {try.#Failure error.not_valid})))
  )

(exception.the .public (moduli_are_not_equal [expected actual])
  (for_any (_ r% s%)
    (Exception [(Modulus r%) (Modulus s%)]))
  (exception.report
   (list ["Expected" (i:as (/.divisor expected))]
         ["Actual" (i:as (/.divisor actual))])))

(the .public (adapter expected actual)
  (for_any (_ r% s%)
    (-> (Modulus r%) (Modulus s%)
        (Try (-> (Modulo s%)
                 (Modulo r%)))))
  (if (/.= expected actual)
      {try.#Success (|>> ..value
                         (..modulo expected))}
      (exception.except ..moduli_are_not_equal [expected actual])))
