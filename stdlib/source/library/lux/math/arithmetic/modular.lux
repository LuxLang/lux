... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text)
   [abstract
    [equivalence (.only Equivalence)]
    [monoid (.only Monoid)]
    [format (.only Format)]
    [monad (.only do)]
    [order (.only Order)]
    ["<>" projection]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" monoid)
     ["<[1]>" \\projection (.only Projection)]]]
   [math
    [number
     ["i" integer (.use "[1]#[0]" base_10)]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]
   [meta
    ["[0]" provenance]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]]
 [///
  ["/" modulus (.only Modulus)]])

(nominal.every .public (Mod m)
  (Record
   [#modulus (Modulus m)
    #value Integer])

  (the .public (modular modulus value)
    (for_any (_ %)
      (-> (Modulus %) Integer
          (Mod %)))
    (nominal.abstraction
     [#modulus modulus
      #value (i.mod (/.divisor modulus) value)]))

  (template.with [<name> <type> <side>]
    [(the .public <name>
       (for_any (_ %)
         (-> (Mod %)
             <type>))
       (|>> nominal.representation
            <side>))]

    [modulus (Modulus %) product.left]
    [value Integer product.right]
    )
  
  (exception.the .public (incorrect_modulus [modulus parsed])
    (for_any (_ %)
      (Exception [(Modulus %) Integer]))
    (exception.report
     (list ["Expected" (i#as (/.divisor modulus))]
           ["Actual" (i#as parsed)])))

  ... https://en.wikipedia.org/wiki/Delimiter
  (the delimiter
    " mod ")

  (the integerL
    (Projection Integer)
    (<>.of i.base_10
           (<text>.and (<text>.one_of "-+") (<text>.many <text>.decimal))))

  (the .public (text expected)
    (for_any (_ %)
      (-> (Modulus %)
          (Format Text (Mod %))))
    (implementation
     (the (as modular)
       (let [[_ value] (nominal.representation modular)]
         (all text#composite
              (i#as value)
              ..delimiter
              (i#as (/.divisor expected)))))

     (the of
       (<text>.value
        (do <>.monad
          [[value _ actual] (all <>.and integerL (<text>.this ..delimiter) integerL)
           _ (<>.assertion (exception.error ..incorrect_modulus [expected actual])
                           (i.= (/.divisor expected) actual))]
          (in (..modular expected value)))))))

  (template.with [<name> <op>]
    [(the .public (<name> expected actual)
       (for_any (_ %)
         (-> (Mod %) (Mod %)
             Bit))
       (let [[_ expected] (nominal.representation expected)
             [_ actual] (nominal.representation actual)]
         (<op> expected actual)))]

    [= i.=]
    [< i.<]
    [<= i.<=]
    [> i.>]
    [>= i.>=]
    )

  (the .public equivalence
    (for_any (_ %)
      (Equivalence (Mod %)))
    (implementation
     (the = ..=)))

  (the .public order
    (for_any (_ %)
      (Order (Mod %)))
    (implementation
     (the equivalence ..equivalence)
     (the < ..<)))

  (template.with [<name> <op>]
    [(the .public (<name> param subject)
       (for_any (_ %)
         (-> (Mod %) (Mod %)
             (Mod %)))
       (let [[modulus param] (nominal.representation param)
             [_ subject] (nominal.representation subject)]
         (nominal.abstraction
          [#modulus modulus
           #value (|> subject
                      (<op> param)
                      (i.mod (/.divisor modulus)))])))]

    [+ i.+]
    [- i.-]
    [* i.*]
    )

  (template.with [<composition> <identity> <monoid>]
    [(the .public (<monoid> modulus)
       (for_any (_ %)
         (-> (Modulus %)
             (Monoid (Mod %))))
       (implementation
        (the identity
          (..modular modulus <identity>))
        (the composite
          <composition>)))]
    
    [..+ +0 addition]
    [..* +1 multiplication]
    )

  (exception.the .public (lacks_inverse it)
    (for_any (_ %)
      (Exception (Mod %)))
    (exception.report
     (list ["Number" (by (..text (..modulus it)) as it)])))
  
  (the .public (inverse modular)
    (for_any (_ %)
      (-> (Mod %)
          (Maybe (Mod %))))
    (let [[modulus value] (nominal.representation modular)
          [[vk mk] gcd] (i.extended_gcd value (/.divisor modulus))]
      (when gcd
        +1 {try.#Success (..modular modulus vk)}
        _ (exception.except ..lacks_inverse [modular]))))
  )

(exception.the .public (moduli_are_not_equal [expected actual])
  (for_any (_ r% s%)
    (Exception [(Modulus r%) (Modulus s%)]))
  (exception.report
   (list ["Expected" (i#as (/.divisor expected))]
         ["Actual" (i#as (/.divisor actual))])))

(the .public (adapter expected actual)
  (for_any (_ r% s%)
    (-> (Modulus r%) (Modulus s%)
        (Try (-> (Mod s%)
                 (Mod r%)))))
  (if (/.= expected actual)
    {try.#Success (|>> ..value
                       (..modular expected))}
    (exception.except ..moduli_are_not_equal [expected actual])))
