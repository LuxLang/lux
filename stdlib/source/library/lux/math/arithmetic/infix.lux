... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["<>" projection (.use "[1]#[0]" functor)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)
      ["?[1]" \\projection]]]]
   [math
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [macro
    ["[0]" syntax]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]]]])

(every Infix
  (Rec Infix
    (Variant
     {#Const Code}
     {#Call (List Code)}
     {#Unary Code Infix}
     {#Binary Infix Code Infix})))

(the literal
  (Projection Code)
  (all <>.either
       (<>#each code.bit <code>.bit)
       (<>#each code.natural <code>.natural)
       (<>#each code.integer <code>.integer)
       (<>#each code.revolution <code>.revolution)
       (<>#each code.decimal <code>.decimal)
       (<>#each code.text <code>.text)
       (<>#each code.name <code>.name)))

(the expression
  (Projection Infix)
  (<| <>.rec (function (_ expression))
      (all <>.or
           ..literal
           (<code>.form (<>.many ?list.any))
           (<code>.tuple (<>.and ?list.any expression))
           (<code>.tuple (do <>.monad
                           [init_subject expression
                            init_op ?list.any
                            init_param expression
                            steps (<>.some (<>.and ?list.any expression))]
                           (pure (list#mix (function (_ [op param] [_subject _op _param])
                                             [{#Binary _subject _op _param} op param])
                                           [init_subject init_op init_param]
                                           steps))))
           )))

(the (prefix infix)
  (-> Infix Code)
  (when infix
    {#Const value}
    value
    
    {#Call parts}
    (code.form parts)

    {#Unary op subject}
    (` ((, op) (, (prefix subject))))
    
    {#Binary left op right}
    (` ((, op) (, (prefix right)) (, (prefix left))))))

(the .public infix
  (syntax.macro (_ [expr ..expression])
    (pure (list (..prefix expr)))))
