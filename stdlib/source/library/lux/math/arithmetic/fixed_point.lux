... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [function
    ["[0]" inline]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    [number
     ["n" natural]
     ["i" integer]
     ["[0]" i64]]]
   ["[0]" macro
    ["[1]" local]
    ["[0]" template]]
   [type
    ["[0]" nominal]]]]
 [// (.only Arithmetic)])

(the .public maximum
  Natural
  (-- i64.width))

(nominal.every .public (Point @)
  Natural

  (exception.the .public (point_exceeds_maximum it)
    (Exception Natural)
    (exception.report
     (list ["Candidate" (%.natural it)]
           ["Maximum" (%.natural maximum)])))

  (the .public (point it)
    (for_some (_ @)
      (-> Natural
          (Try (Point @))))
    (if (n.> maximum it)
      (exception.except ..point_exceeds_maximum [it])
      {try.#Success (nominal.abstraction it)}))

  (the .public location
    (for_any (_ @)
      (-> (Point @)
          Natural))
    (|>> nominal.representation))
  
  (nominal.every .public (Fixed @)
    Integer

    (the sign
      (-> Integer
          (I64 Any))
      (i64.and (i64.bit ..maximum)))

    (the of_units
      (inline.macro (_ @ it)
        (for_any (_ @)
          (-> (Point @) Integer
              (I64 Any)))
        (|> it
            .i64
            (i64.left_shifted (nominal.representation Point @))
            (i64.or (sign it)))))

    (the of_sub_units
      (inline.macro (_ @ it)
        (for_any (_ @)
          (-> (Point @) Revolution
              (I64 Any)))
        (|> it
            .i64
            (i64.right_shifted (n.- (nominal.representation Point @) i64.width)))))

    (the .public (fixed @ units sub_units)
      (for_any (_ @)
        (-> (Point @) Integer Revolution
            (Fixed @)))
      (nominal.abstraction
       (.integer (i64.or (of_units @ units)
                         (of_sub_units @ sub_units)))))

    (template.with [<name> <type> <of>]
      [(the .public (<name> @ it)
         (for_any (_ @)
           (-> (Point @) <type>
               (Fixed @)))
         (nominal.abstraction
          (.integer (<of> @ it))))]

      [of_integer Integer of_units]
      [of_revolution Revolution of_sub_units]
      )

    (the .public (units @)
      (for_any (_ @)
        (-> (Point @) (Fixed @)
            Integer))
      (|>> nominal.representation
           (i.right_shifted (nominal.representation Point @))))

    (the .public (sub_units @)
      (for_any (_ @)
        (-> (Point @) (Fixed @)
            Revolution))
      (|>> nominal.representation
           (i64.and (i64.mask (nominal.representation Point @)))
           (i64.left_shifted (n.- (nominal.representation Point @) i64.width))
           .revolution))

    (template.with [<composite_type> <post_processing> <fp> <integer>]
      [(the .public (<fp> _ parameter subject)
         (for_any (_ @)
           (-> (Point @) (Fixed @) (Fixed @)
               <composite_type>))
         (<post_processing>
          (<integer> (nominal.representation parameter)
                     (nominal.representation subject))))]

      [(Fixed @) nominal.abstraction + i.+]
      [(Fixed @) nominal.abstraction - i.-]

      [Bit |> = i.=]
      [Bit |> < i.<]
      [Bit |> <= i.<=]
      [Bit |> > i.>]
      [Bit |> >= i.>=]
      )

    (template.with [<quarter> <name>]
      [(the <name>
         (for_any (_ of)
           (-> (I64 of)
               (I64 of)))
         (let [left (n.- (n.* (++ <quarter>) 16) i64.width)
               right (n.+ (n.* <quarter> 16) left)]
           (|>> (i64.left_shifted left)
                (i64.right_shifted right))))]

      [0 ll]
      [1 lh]
      [2 hl]
      [3 hh]
      )

    (the low
      (for_any (_ of)
        (-> (I64 of)
            (I64 of)))
      (i64.and (i64.mask 32)))

    (the high
      (for_any (_ of)
        (-> (I64 of)
            (I64 of)))
      (i64.right_shifted 32))

    (template.with [<shift> <name>]
      [(the <name>
         (for_any (_ of)
           (-> (I64 of)
               (I64 of)))
         (i64.left_shifted <shift>))]

      [16 up/16]
      [32 up/32]
      )

    (the .public (* @ parameter subject)
      (for_any (_ @)
        (-> (Point @) (Fixed @) (Fixed @)
            (Fixed @)))
      (let [mask (i64.mask (nominal.representation Point @))]
        (macro.let [units' (template.macro (_ <it>)
                             [(i.right_shifted (nominal.representation Point @) <it>)])
                    sub_units' (template.macro (_ <it>)
                                 [(i64.and mask <it>)])
                    high_sub_units' (template.macro (_ <it>)
                                      [(i64.right_shifted (nominal.representation Point @) <it>)])]
          (let [parameter (nominal.representation parameter)
                subject (nominal.representation subject)

                s::u (units' subject)
                s::s (sub_units' subject)
                
                p::u (units' parameter)
                p::s (sub_units' parameter)
                
                s*p (i.* s::u p::s)
                p*s (i.* p::u s::s)
                
                x::u (all i.+
                          (i.* p::u
                               s::u)
                          (units' s*p)
                          (units' p*s)
                          )
                x::s (all i.+
                          (high_sub_units'
                           (i.* p::s
                                s::s))
                          (sub_units' s*p)
                          (sub_units' p*s)
                          )]
            (nominal.abstraction
             (.integer (i64.or (of_units @ x::u)
                               x::s)))))))

    (the .public (/ @ parameter subject)
      (for_any (_ @)
        (-> (Point @) (Fixed @) (Fixed @)
            (Fixed @)))
      (|> subject
          nominal.representation
          (i64.left_shifted (nominal.representation Point @))
          (i./ (nominal.representation parameter))
          (i.right_shifted (nominal.representation Point @))
          nominal.abstraction))
    )
  )

(the .public (equivalence @)
  (for_any (_ @)
    (-> (Point @)
        (Equivalence (Fixed @))))
  (implementation
   (the = (..= @))
   ))

(the .public (order @)
  (for_any (_ @)
    (-> (Point @)
        (Order (Fixed @))))
  (implementation
   (the equivalence (..equivalence @))
   (the < (..< @))
   ))

(the .public (arithmetic @)
  (for_any (_ @)
    (-> (Point @)
        (Arithmetic (Fixed @))))
  (implementation
   (the + (..+ @))
   (the - (..- @))
   (the * (..* @))
   (the / (../ @))
   ))

(the .public (as_text @ it)
  (for_any (_ @)
    (-> (Point @)
        (text.Injection (Fixed @))))
  (%.message (%.integer (..units @ it))
             (%.revolution (..sub_units @ it))))
