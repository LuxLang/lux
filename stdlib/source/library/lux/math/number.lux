... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [codec (.only Codec)]]
   [control
    ["[0]" try (.only Try)]]
   [data
    ["[0]" text]]
   [meta
    [macro
     ["^" pattern]]]]]
 ["[0]" /
  ["[1][0]" nat]
  ["[1][0]" int]
  ["[1][0]" rev]
  ["[1][0]" frac]])

(def separator
  ",")

(def (separator_prefixed? number)
  (-> Text Bit)
  (when (.text_index# 0 ..separator number)
    {.#Some 0}
    true

    _
    false))

(def without_separators
  (-> Text Text)
  (text.replaced ..separator ""))

(def .public dec
  (let [<error> "Invalid octal syntax."]
    (macro (_ tokens state)
      (when tokens
        {.#Item [meta {.#Text repr'}] {.#End}}
        (if (..separator_prefixed? repr')
          {try.#Failure <error>}
          (let [repr (..without_separators repr')]
            (`` (when (of /nat.decimal decoded repr)
                  {try.#Success value}
                  {try.#Success [state (list [meta {.#Nat value}])]}

                  (^.multi {try.#Failure _}
                           [(of /int.decimal decoded repr)
                            {try.#Success value}])
                  {try.#Success [state (list [meta {.#Int value}])]}

                  (^.multi {try.#Failure _}
                           [(of /rev.decimal decoded repr)
                            {try.#Success value}])
                  {try.#Success [state (list [meta {.#Rev value}])]}

                  (,, (with_template [<codec>]
                        [(^.multi {try.#Failure _}
                                  [(of <codec> decoded repr)
                                   {try.#Success value}])
                         {try.#Success [state (list [meta {.#Frac value}])]}]

                        [/frac.decimal]
                        [/frac.degree]
                        [/frac.percentage]
                        [/frac.permille]
                        [/frac.permyriad]
                        ))

                  _
                  {try.#Failure <error>}))))

        _
        {try.#Failure <error>}))))

(alias [decimal]
       ..dec)

(with_template [<macro> <nat> <int> <rev> <frac> <error>]
  [(def .public <macro>
     (macro (_ tokens state)
       (when tokens
         {.#Item [meta {.#Text repr'}] {.#End}}
         (if (..separator_prefixed? repr')
           {try.#Failure <error>}
           (let [repr (..without_separators repr')]
             (when (of <nat> decoded repr)
               {try.#Success value}
               {try.#Success [state (list [meta {.#Nat value}])]}

               (^.multi {try.#Failure _}
                        [(of <int> decoded repr)
                         {try.#Success value}])
               {try.#Success [state (list [meta {.#Int value}])]}

               (^.multi {try.#Failure _}
                        [(of <rev> decoded repr)
                         {try.#Success value}])
               {try.#Success [state (list [meta {.#Rev value}])]}

               (^.multi {try.#Failure _}
                        [(of <frac> decoded repr)
                         {try.#Success value}])
               {try.#Success [state (list [meta {.#Frac value}])]}

               _
               {try.#Failure <error>})))

         _
         {try.#Failure <error>})))]

  [bin /nat.binary /int.binary /rev.binary /frac.binary "Invalid binary syntax."]
  [oct /nat.octal  /int.octal  /rev.octal  /frac.octal  "Invalid octal syntax."]
  [hex /nat.hex    /int.hex    /rev.hex    /frac.hex    "Invalid hexadecimal syntax."]
  )

(alias [binary]
       ..bin)

(alias [octal]
       ..oct)

(alias [hexadecimal]
       ..hex)

(alias [base_02] ..binary)
(alias [base_08] ..octal)
(alias [base_10] ..decimal)
(alias [base_16] ..hex)
