... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [format (.only Format)]]
   [error
    ["[0]" try (.only Try)]]
   [data
    ["[0]" text]]
   [macro
    ["^" pattern]]
   ["[0]" error]]]
 ["[0]" /
  [/64
   ["[1][0]" natural]
   ["[1][0]" integer]
   ["[1][0]" revolution]
   ["[1][0]" decimal]]])

(the with_template (.in_module# .prelude .with_template))

... https://en.wikipedia.org/wiki/Delimiter
(the delimiter
  ",")

(the (prefixed_by_delimiter? number)
  (-> Text Bit)
  (when (.text_index# 0 ..delimiter number)
    {.#Some 0}
    true

    _
    false))

(the without_delimiters
  (-> Text Text)
  (text.replaced ..delimiter ""))

(the .public base_10
  (macro (_ tokens state)
    (when tokens
      (list {.#Text meta repr'})
      (if (..prefixed_by_delimiter? repr')
          {try.#Failure error.not_valid}
          (let [repr (..without_delimiters repr')]
            (`` (when (by /natural.base_10 of repr)
                  {try.#Success value}
                  {try.#Success [state (list {.#Natural meta value})]}

                  (,, (with_template [,tag <format>]
                        [(^.multi {try.#Failure _}
                                  [(by <format> of repr)
                                   {try.#Success value}])
                         {try.#Success [state (list {,tag meta value})]}]

                        [[.#Integer /integer.base_10]
                         [.#Revolution /revolution.base_10]
                         [.#Decimal /decimal.degree]
                         [.#Decimal /decimal.gradian]
                         [.#Decimal /decimal.per_cent]
                         [.#Decimal /decimal.per_mille]
                         [.#Decimal /decimal.per_myriad]
                         [.#Decimal /decimal.base_10]]))

                  _
                  {try.#Failure error.not_valid}))))

      _
      {try.#Failure error.not_valid})))

(with_template [<macro> <natural> <integer> <revolution> <decimal>]
  [(the .public <macro>
     (macro (_ tokens state)
       (when tokens
         (list {.#Text meta repr'})
         (if (..prefixed_by_delimiter? repr')
             {try.#Failure error.not_valid}
             (let [repr (..without_delimiters repr')]
               (`` (when (by <natural> of repr)
                     {try.#Success value}
                     {try.#Success [state (list {.#Natural meta value})]}

                     (,, (with_template [,tag <format>]
                           [(^.multi {try.#Failure _}
                                     [(by <format> of repr)
                                      {try.#Success value}])
                            {try.#Success [state (list {,tag meta value})]}]

                           [[.#Integer <integer>]
                            [.#Revolution <revolution>]
                            [.#Decimal <decimal>]]))

                     _
                     {try.#Failure error.not_valid}))))

         _
         {try.#Failure error.not_valid})))]

  [[base_02 /natural.base_02 /integer.base_02 /revolution.base_02 /decimal.base_02]
   [base_08 /natural.base_08 /integer.base_08 /revolution.base_08 /decimal.base_08]
   [base_16 /natural.base_16 /integer.base_16 /revolution.base_16 /decimal.base_16]])
