(.require
 [library
  [lux (.except)
   [abstract
    [codec (.only Codec)]]
   [control
    ["[0]" try (.only Try)]]
   [data
    ["[0]" text]]
   [meta
    [macro
     ["^" pattern]]]]]
 ["[0]" /
  ["[1][0]" nat]
  ["[1][0]" int]
  ["[1][0]" rev]
  ["[1][0]" frac]])

(def separator
  ",")

(def (separator_prefixed? number)
  (-> Text Bit)
  (when ("lux text index" 0 ..separator number)
    {.#Some 0}
    true

    _
    false))

(def without_separators
  (-> Text Text)
  (text.replaced ..separator ""))

(with_template [<macro> <nat> <int> <rev> <frac> <error>]
  [(def .public <macro>
     (macro (_ tokens state)
       (when tokens
         {.#Item [meta {.#Text repr'}] {.#End}}
         (if (..separator_prefixed? repr')
           {try.#Failure <error>}
           (let [repr (..without_separators repr')]
             (when (at <nat> decoded repr)
               {try.#Success value}
               {try.#Success [state (list [meta {.#Nat value}])]}

               (^.multi {try.#Failure _}
                        [(at <int> decoded repr)
                         {try.#Success value}])
               {try.#Success [state (list [meta {.#Int value}])]}

               (^.multi {try.#Failure _}
                        [(at <rev> decoded repr)
                         {try.#Success value}])
               {try.#Success [state (list [meta {.#Rev value}])]}

               (^.multi {try.#Failure _}
                        [(at <frac> decoded repr)
                         {try.#Success value}])
               {try.#Success [state (list [meta {.#Frac value}])]}

               _
               {try.#Failure <error>})))

         _
         {try.#Failure <error>})))]

  [bin /nat.binary /int.binary /rev.binary /frac.binary "Invalid binary syntax."]
  [oct /nat.octal  /int.octal  /rev.octal  /frac.octal  "Invalid octal syntax."]
  [hex /nat.hex    /int.hex    /rev.hex    /frac.hex    "Invalid hexadecimal syntax."]
  )
