... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [format (.only Format)]]
   [control
    ["[0]" try (.only Try)]]
   [data
    ["[0]" text]]
   [meta
    [macro
     ["^" pattern]]]]]
 ["[0]" /
  ["[1][0]" natural]
  ["[1][0]" integer]
  ["[1][0]" rev]
  ["[1][0]" decimal]])

(the with_template' (.in_module# .prelude .with_template))

(the separator
  ",")

(the (separator_prefixed? number)
  (-> Text Bit)
  (when (.text_index# 0 ..separator number)
    {.#Some 0}
    true

    _
    false))

(the without_separators
  (-> Text Text)
  (text.replaced ..separator ""))

(the .public base_10
  (let [<error> "Invalid decimal syntax."]
    (macro (_ tokens state)
      (when tokens
        {.#Item [meta {.#Text repr'}] {.#End}}
        (if (..separator_prefixed? repr')
          {try.#Failure <error>}
          (let [repr (..without_separators repr')]
            (`` (when (of /natural.base_10 projection repr)
                  {try.#Success value}
                  {try.#Success [state (list [meta {.#Natural value}])]}

                  (^.multi {try.#Failure _}
                           [(of /integer.base_10 projection repr)
                            {try.#Success value}])
                  {try.#Success [state (list [meta {.#Integer value}])]}

                  (^.multi {try.#Failure _}
                           [(of /rev.base_10 projection repr)
                            {try.#Success value}])
                  {try.#Success [state (list [meta {.#Rev value}])]}

                  (,, (with_template' [<format>]
                        [(^.multi {try.#Failure _}
                                  [(of <format> projection repr)
                                   {try.#Success value}])
                         {try.#Success [state (list [meta {.#Decimal value}])]}]

                        [/decimal.degree]
                        [/decimal.percentage]
                        [/decimal.permille]
                        [/decimal.permyriad]
                        [/decimal.base_10]
                        ))

                  _
                  {try.#Failure <error>}))))

        _
        {try.#Failure <error>}))))

(with_template' [<macro> <natural> <integer> <rev> <decimal> <error>]
  [(the .public <macro>
     (macro (_ tokens state)
       (when tokens
         {.#Item [meta {.#Text repr'}] {.#End}}
         (if (..separator_prefixed? repr')
           {try.#Failure <error>}
           (let [repr (..without_separators repr')]
             (when (of <natural> projection repr)
               {try.#Success value}
               {try.#Success [state (list [meta {.#Natural value}])]}

               (^.multi {try.#Failure _}
                        [(of <integer> projection repr)
                         {try.#Success value}])
               {try.#Success [state (list [meta {.#Integer value}])]}

               (^.multi {try.#Failure _}
                        [(of <rev> projection repr)
                         {try.#Success value}])
               {try.#Success [state (list [meta {.#Rev value}])]}

               (^.multi {try.#Failure _}
                        [(of <decimal> projection repr)
                         {try.#Success value}])
               {try.#Success [state (list [meta {.#Decimal value}])]}

               _
               {try.#Failure <error>})))

         _
         {try.#Failure <error>})))]

  [bin /natural.binary /integer.binary /rev.binary /decimal.binary "Invalid binary syntax."]
  [oct /natural.octal  /integer.octal  /rev.octal  /decimal.octal  "Invalid octal syntax."]
  [hex /natural.hex    /integer.hex    /rev.hex    /decimal.hex    "Invalid hexadecimal syntax."]
  )

(alias [binary]
       ..bin)

(alias [octal]
       ..oct)

(alias [hexadecimal]
       ..hex)

(alias [base_02] ..binary)
(alias [base_08] ..octal)
(alias [decimal] ..base_10)
(alias [base_16] ..hex)
