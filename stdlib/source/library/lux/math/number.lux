... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [format (.only Format)]]
   [error
    ["[0]" try (.only Try)]]
   [data
    ["[0]" text]]
   [macro
    ["^" pattern]]]]
 ["[0]" /
  ["[1][0]" natural]
  ["[1][0]" integer]
  ["[1][0]" revolution]
  ["[1][0]" decimal]])

(the with_template' (.in_module# .prelude .with_template))

... https://en.wikipedia.org/wiki/Delimiter
(the delimiter
  ",")

(the (delimiter_prefixed? number)
  (-> Text Bit)
  (when (.text_index# 0 ..delimiter number)
    {.#Some 0}
    true

    _
    false))

(the without_delimiters
  (-> Text Text)
  (text.replaced ..delimiter ""))

(the .public base_10
  (let [<error> "Invalid decimal syntax."]
    (macro (_ tokens state)
      (when tokens
        (list {.#Text meta repr'})
        (if (..delimiter_prefixed? repr')
            {try.#Failure <error>}
            (let [repr (..without_delimiters repr')]
              (`` (when (by /natural.base_10 of repr)
                    {try.#Success value}
                    {try.#Success [state (list {.#Natural meta value})]}

                    (^.multi {try.#Failure _}
                             [(by /integer.base_10 of repr)
                              {try.#Success value}])
                    {try.#Success [state (list {.#Integer meta value})]}

                    (^.multi {try.#Failure _}
                             [(by /revolution.base_10 of repr)
                              {try.#Success value}])
                    {try.#Success [state (list {.#Revolution meta value})]}

                    (,, (with_template' [<format>]
                          [(^.multi {try.#Failure _}
                                    [(by <format> of repr)
                                     {try.#Success value}])
                           {try.#Success [state (list {.#Decimal meta value})]}]

                          [/decimal.degree]
                          [/decimal.per_cent]
                          [/decimal.per_mille]
                          [/decimal.per_myriad]
                          [/decimal.base_10]
                          ))

                    _
                    {try.#Failure <error>}))))

        _
        {try.#Failure <error>}))))

(with_template' [<macro> <natural> <integer> <revolution> <decimal> <error>]
  [(the .public <macro>
     (macro (_ tokens state)
       (when tokens
         (list {.#Text meta repr'})
         (if (..delimiter_prefixed? repr')
             {try.#Failure <error>}
             (let [repr (..without_delimiters repr')]
               (when (by <natural> of repr)
                 {try.#Success value}
                 {try.#Success [state (list {.#Natural meta value})]}

                 (^.multi {try.#Failure _}
                          [(by <integer> of repr)
                           {try.#Success value}])
                 {try.#Success [state (list {.#Integer meta value})]}

                 (^.multi {try.#Failure _}
                          [(by <revolution> of repr)
                           {try.#Success value}])
                 {try.#Success [state (list {.#Revolution meta value})]}

                 (^.multi {try.#Failure _}
                          [(by <decimal> of repr)
                           {try.#Success value}])
                 {try.#Success [state (list {.#Decimal meta value})]}

                 _
                 {try.#Failure <error>})))

         _
         {try.#Failure <error>})))]

  [bin /natural.binary /integer.binary /revolution.binary /decimal.binary "Invalid binary syntax."]
  [oct /natural.octal  /integer.octal  /revolution.octal  /decimal.octal  "Invalid octal syntax."]
  [hex /natural.hex    /integer.hex    /revolution.hex    /decimal.hex    "Invalid hexadecimal syntax."]
  )

(alias [binary]
       ..bin)

(alias [octal]
       ..oct)

(alias [hexadecimal]
       ..hex)

(alias [base_02] ..binary)
(alias [base_08] ..octal)
(alias [decimal] ..base_10)
(alias [base_16] ..hex)
