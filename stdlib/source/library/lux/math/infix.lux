(.module:
  {#.doc "Common mathematical constants and functions."}
  [library
   [lux #*
    [abstract
     [monad (#+ do)]]
    [control
     ["<>" parser ("#\." functor)
      ["<.>" code (#+ Parser)]]]
    [data
     ["." product]
     [collection
      ["." list ("#\." fold)]]]
    [macro
     [syntax (#+ syntax:)]
     ["." code]]
    [math
     [number
      ["n" nat]
      ["i" int]]]]])

(type: #rec Infix
  (#Const Code)
  (#Call (List Code))
  (#Unary Code Infix)
  (#Binary Infix Code Infix))

(def: infix^
  (Parser Infix)
  (<| <>.rec (function (_ infix^))
      ($_ <>.or
          ($_ <>.either
              (<>\map code.bit <code>.bit)
              (<>\map code.nat <code>.nat)
              (<>\map code.int <code>.int)
              (<>\map code.rev <code>.rev)
              (<>\map code.frac <code>.frac)
              (<>\map code.text <code>.text)
              (<>\map code.identifier <code>.identifier)
              (<>\map code.tag <code>.tag))
          (<code>.form (<>.many <code>.any))
          (<code>.tuple (<>.and <code>.any infix^))
          (<code>.tuple ($_ <>.either
                            (do <>.monad
                              [_ (<code>.this! (' #and))
                               init_subject infix^
                               init_op <code>.any
                               init_param infix^
                               steps (<>.some (<>.and <code>.any infix^))]
                              (in (product.right (list\fold (function (_ [op param] [subject [_subject _op _param]])
                                                              [param [(#Binary _subject _op _param)
                                                                      (` and)
                                                                      (#Binary subject op param)]])
                                                            [init_param [init_subject init_op init_param]]
                                                            steps))))
                            (do <>.monad
                              [init_subject infix^
                               init_op <code>.any
                               init_param infix^
                               steps (<>.some (<>.and <code>.any infix^))]
                              (in (list\fold (function (_ [op param] [_subject _op _param])
                                               [(#Binary _subject _op _param) op param])
                                             [init_subject init_op init_param]
                                             steps)))
                            ))
          )))

(def: (prefix infix)
  (-> Infix Code)
  (case infix
    (#Const value)
    value
    
    (#Call parts)
    (code.form parts)

    (#Unary op subject)
    (` ((~ op) (~ (prefix subject))))
    
    (#Binary left op right)
    (` ((~ op) (~ (prefix right)) (~ (prefix left))))))

(syntax: .public (infix {expr infix^})
  {#.doc (doc "Infix math syntax."
              (infix [x i.* +10])
              (infix [[x i.+ y] i.* [x i.- y]])
              (infix [sin [x i.+ y]])
              (infix [[x n.< y] and [y n.< z]])
              (infix [#and x n.< y n.< z])
              (infix [(n.* 3 9) gcd 450])

              "The rules for infix syntax are simple."
              "If you want your binary function to work well with it."
              "Then take the argument to the right (y) as your first argument,"
              "and take the argument to the left (x) as your second argument.")}
  (in (list (..prefix expr))))
