... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Fuzzy_logic
(.using
 [library
  [lux (.except)
   [abstract
    [functor
     ["[0]" contravariant]]]
   [function
    [predicate (.only Predicate)]]
   [data
    [collection
     ["[0]" set (.only Set)]]]
   [math
    [number
     ["/" revolution]]]
   [macro
    ["[0]" template]]]]
 ["[0]" //
  ["[1]" continuous]])

(every .public (Fuzzy a)
  (-> a Revolution))

(the .public functor
  (contravariant.Functor Fuzzy)
  (implementation
   (the (each f fb)
     (|>> f fb))))

(template.with [<name> <verdict>]
  [(the .public <name>
     Fuzzy
     (function (_ _)
       <verdict>))]

  [empty //.false]
  [full //.true]
  )

(the .public (membership set elem)
  (for_any (_ a) (-> (Fuzzy a) a Revolution))
  (set elem))

(template.with [<set_composition> <membership_composition>]
  [(the .public (<set_composition> left right)
     (for_any (_ a) (-> (Fuzzy a) (Fuzzy a) (Fuzzy a)))
     (function (_ elem)
       (<membership_composition> (left elem)
                                 (right elem))))]

  [union //.or]
  [intersection //.and]
  )

(the .public (complement set)
  (for_any (_ a) (-> (Fuzzy a) (Fuzzy a)))
  (|>> set //.not))

(the .public (difference sub base)
  (for_any (_ a) (-> (Fuzzy a) (Fuzzy a) (Fuzzy a)))
  (..intersection (..complement sub) base))

(the .public (of_predicate predicate)
  (for_any (_ a) (-> (Predicate a) (Fuzzy a)))
  (function (_ elem)
    (if (predicate elem)
      //.true
      //.false)))

(the .public (predicate treshold set)
  (for_any (_ a) (-> Revolution (Fuzzy a) (Predicate a)))
  (function (_ elem)
    (/.> treshold (set elem))))

(the .public of_set
  (for_any (_ a) (-> (Set a) (Fuzzy a)))
  (|>> set.member? ..of_predicate))

(the (ascending from to)
  (-> Revolution Revolution (Fuzzy Revolution))
  (let [measure (/.- from to)]
    (function (_ elem)
      (if (/.< from elem)
        ... below
        //.false

        (/.< to elem)
        ... in the middle...
        (|> elem
            (/.- from)
            (/./ measure))

        ... above
        //.true))))

(the (descending from to)
  (-> Revolution Revolution (Fuzzy Revolution))
  (..complement (..ascending from to)))

(the .public (gradient from to)
  (-> Revolution Revolution (Fuzzy Revolution))
  (if (/.< to from)
    (..ascending from to)
    (..descending from to)))

(the !sort_2
  (template.macro (_ <low> <high>)
    [(if (/.> <low> <high>)
       [<low> <high>]
       [<high> <low>])]))

(the .public (triangle minimum middle maximum)
  (-> Revolution Revolution Revolution (Fuzzy Revolution))
  (let [[low_0 high_0] (!sort_2 minimum middle)
        [minimum' high_1] (!sort_2 low_0 maximum)
        [middle' maximum'] (!sort_2 high_0 high_1)]
    (..intersection (..ascending minimum' middle')
                    (..descending middle' maximum'))))

(the .public (trapezoid minimum middle_minimum middle_maximum maximum)
  (-> Revolution Revolution Revolution Revolution (Fuzzy Revolution))
  (let [[low_0 high_0] (!sort_2 minimum middle_minimum)
        [low_1 high_1] (!sort_2 middle_maximum maximum)
        [minimum' middle_0] (!sort_2 low_0 low_1)
        [middle_1 maximum'] (!sort_2 high_0 high_1)
        [middle_minimum' middle_maximum'] (!sort_2 middle_0 middle_1)]
    (..intersection (..ascending minimum' middle_minimum')
                    (..descending middle_maximum' maximum'))))

(the .public (cut treshold set)
  (for_any (_ a)
    (-> Revolution (Fuzzy a)
        (Fuzzy a)))
  (function (_ elem)
    (let [membership (set elem)]
      (if (/.< treshold membership)
        //.false
        (|> membership (/.- treshold) (/.* //.true))))))
