... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Fuzzy_logic
(.require
 [library
  [lux (.except)
   [abstract
    [functor
     ["[0]" contravariant]]]
   [control
    [function
     [predicate (.only Predicate)]]]
   [data
    [collection
     ["[0]" list]
     ["[0]" set (.only Set)]]]
   [math
    [number
     ["/" rev]]]
   [meta
    [macro
     ["[0]" template]]]]]
 ["[0]" //
  ["[1]" continuous]])

(every .public (Fuzzy a)
  (-> a Rev))

(the .public functor
  (contravariant.Functor Fuzzy)
  (implementation
   (the (each f fb)
     (|>> f fb))))

(template.with [<name> <verdict>]
  [(the .public <name>
     Fuzzy
     (function (_ _)
       <verdict>))]

  [empty //.false]
  [full //.true]
  )

(the .public (membership set elem)
  (for_any (_ a) (-> (Fuzzy a) a Rev))
  (set elem))

(template.with [<set_composition> <membership_composition>]
  [(the .public (<set_composition> left right)
     (for_any (_ a) (-> (Fuzzy a) (Fuzzy a) (Fuzzy a)))
     (function (_ elem)
       (<membership_composition> (left elem)
                                 (right elem))))]

  [union //.or]
  [intersection //.and]
  )

(the .public (complement set)
  (for_any (_ a) (-> (Fuzzy a) (Fuzzy a)))
  (|>> set //.not))

(the .public (difference sub base)
  (for_any (_ a) (-> (Fuzzy a) (Fuzzy a) (Fuzzy a)))
  (..intersection (..complement sub) base))

(the .public (of_predicate predicate)
  (for_any (_ a) (-> (Predicate a) (Fuzzy a)))
  (function (_ elem)
    (if (predicate elem)
      //.true
      //.false)))

(the .public (predicate treshold set)
  (for_any (_ a) (-> Rev (Fuzzy a) (Predicate a)))
  (function (_ elem)
    (/.> treshold (set elem))))

(the .public of_set
  (for_any (_ a) (-> (Set a) (Fuzzy a)))
  (|>> set.member? ..of_predicate))

(the (ascending from to)
  (-> Rev Rev (Fuzzy Rev))
  (let [measure (/.- from to)]
    (function (_ elem)
      (cond (/.< from elem)
            ... below
            //.false

            (/.< to elem)
            ... in the middle...
            (|> elem
                (/.- from)
                (/./ measure))

            ... above
            //.true))))

(the (descending from to)
  (-> Rev Rev (Fuzzy Rev))
  (..complement (..ascending from to)))

(the .public (gradient from to)
  (-> Rev Rev (Fuzzy Rev))
  (if (/.< to from)
    (..ascending from to)
    (..descending from to)))

(the !sort_2
  (template.macro (_ <low> <high>)
    [(if (/.> <low> <high>)
       [<low> <high>]
       [<high> <low>])]))

(the .public (triangle bottom middle top)
  (-> Rev Rev Rev (Fuzzy Rev))
  (let [[low_0 high_0] (!sort_2 bottom middle)
        [bottom' high_1] (!sort_2 low_0 top)
        [middle' top'] (!sort_2 high_0 high_1)]
    (..intersection (..ascending bottom' middle')
                    (..descending middle' top'))))

(the .public (trapezoid bottom middle_bottom middle_top top)
  (-> Rev Rev Rev Rev (Fuzzy Rev))
  (let [[low_0 high_0] (!sort_2 bottom middle_bottom)
        [low_1 high_1] (!sort_2 middle_top top)
        [bottom' middle_0] (!sort_2 low_0 low_1)
        [middle_1 top'] (!sort_2 high_0 high_1)
        [middle_bottom' middle_top'] (!sort_2 middle_0 middle_1)]
    (..intersection (..ascending bottom' middle_bottom')
                    (..descending middle_top' top'))))

(the .public (cut treshold set)
  (for_any (_ a)
    (-> Rev (Fuzzy a)
        (Fuzzy a)))
  (function (_ elem)
    (let [membership (set elem)]
      (if (/.< treshold membership)
        //.false
        (|> membership (/.- treshold) (/.* //.true))))))
