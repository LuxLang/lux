... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [math
    [number
     ["f" frac]]]]])

(every .public Angle
  Frac)

(with_template [<name> <value>]
  [(the .public <name>
     Angle
     <value>)]

  ... ["Ï€ is wrong!" by Bob Palais](https://www.math.utah.edu/~palais/pi.html)
  [pi  +3.14159265358979323846]
  ... [The Tau Manifesto](https://tauday.com/tau-manifesto)
  [tau +6.28318530717958647692]
  )

... https://en.wikipedia.org/wiki/Turn_(angle)
(the .public turn
  Angle
  ..tau)

... https://en.wikipedia.org/wiki/Radian
(the .public radian
  Angle
  +1.0)

... https://en.wikipedia.org/wiki/Degree_(angle)
(the .public degree
  Angle
  (f.of_degree ..tau))

... https://en.wikipedia.org/wiki/Gradian
(the .public gradian
  Angle
  (f./ +400.0 ..tau))

... https://en.wikipedia.org/wiki/Trigonometric_functions
... https://en.wikipedia.org/wiki/Inverse_trigonometric_functions
(for .old
     (these (with_template [<input> <output> <name> <method>]
              [(the .public (<name> it)
                 (-> <input>
                     <output>)
                 (<method> it))]

              [Angle Frac cos    "jvm invokestatic:java.lang.Math:cos:double"]
              [Angle Frac sin    "jvm invokestatic:java.lang.Math:sin:double"]
              [Angle Frac tan    "jvm invokestatic:java.lang.Math:tan:double"]

              [Frac Angle acos   "jvm invokestatic:java.lang.Math:acos:double"]
              [Frac Angle asin   "jvm invokestatic:java.lang.Math:asin:double"]
              [Frac Angle atan   "jvm invokestatic:java.lang.Math:atan:double"]
              ))

     .jvm
     (these (the !double
              (template (_ value)
                [(|> value
                     (as (Nominal "java.lang.Double"))
                     .jvm_object_cast#)]))
            
            (the !frac
              (template (_ value)
                [(|> value
                     .jvm_object_cast#
                     (is (Nominal "java.lang.Double"))
                     (as Frac))]))
            
            (with_template [<input> <output> <name> <method>]
              [(the .public <name>
                 (-> <input>
                     <output>)
                 (|>> !double
                      ["D"]
                      (.jvm_member_invoke_static# [] "java.lang.Math" <method> [])
                      !frac))]

              [Angle Frac cos    "cos"]
              [Angle Frac sin    "sin"]
              [Angle Frac tan    "tan"]

              [Frac Angle acos   "acos"]
              [Frac Angle asin   "asin"]
              [Frac Angle atan   "atan"]
              ))

     .js
     (these (with_template [<input> <output> <name> <method>]
              [(the .public <name>
                 (-> <input>
                     <output>)
                 (|>> []
                      (.js_apply# (.js_constant# <method>))
                      (as Frac)))]

              [Angle Frac cos    "Math.cos"]
              [Angle Frac sin    "Math.sin"]
              [Angle Frac tan    "Math.tan"]

              [Frac Angle acos   "Math.acos"]
              [Frac Angle asin   "Math.asin"]
              [Frac Angle atan   "Math.atan"]
              ))

     .python
     (these (with_template [<input> <output> <name> <method>]
              [(the .public <name>
                 (-> <input>
                     <output>)
                 (|>> []
                      (.python_object_do# <method> (.python_import# "math"))
                      (as Frac)))]

              [Angle Frac cos    "cos"]
              [Angle Frac sin    "sin"]
              [Angle Frac tan    "tan"]

              [Frac Angle acos   "acos"]
              [Frac Angle asin   "asin"]
              [Frac Angle atan   "atan"]
              ))

     .lua
     (these (with_template [<input> <output> <name> <method>]
              [(the .public <name>
                 (-> <input>
                     <output>)
                 (|>> []
                      (.lua_apply# (.lua_constant# <method>))
                      (as Frac)))]

              [Angle Frac cos    "math.cos"]
              [Angle Frac sin    "math.sin"]
              [Angle Frac tan    "math.tan"]

              [Frac Angle acos   "math.acos"]
              [Frac Angle asin   "math.asin"]
              [Frac Angle atan   "math.atan"]
              ))

     .ruby
     (these (with_template [<input> <output> <name> <method>]
              [(the .public <name>
                 (-> <input>
                     <output>)
                 (|>> []
                      (.ruby_apply# (.ruby_constant# <method>))
                      (as Frac)))]

              [Angle Frac cos    "Math.cos"]
              [Angle Frac sin    "Math.sin"]
              [Angle Frac tan    "Math.tan"]

              [Frac Angle acos   "Math.acos"]
              [Frac Angle asin   "Math.asin"]
              [Frac Angle atan   "Math.atan"]
              ))

     .php
     (these (with_template [<input> <output> <name> <method>]
              [(the .public <name>
                 (-> <input>
                     <output>)
                 (|>> ("php apply" ("php constant" <method>))
                      (as Frac)))]

              [Angle Frac cos    "cos"]
              [Angle Frac sin    "sin"]
              [Angle Frac tan    "tan"]

              [Frac Angle acos   "acos"]
              [Frac Angle asin   "asin"]
              [Frac Angle atan   "atan"]
              ))

     .scheme
     (these (with_template [<input> <output> <name> <method>]
              [(the .public <name>
                 (-> <input>
                     <output>)
                 (|>> ("scheme apply" ("scheme constant" <method>))
                      (as Frac)))]

              [Angle Frac cos    "cos"]
              [Angle Frac sin    "sin"]
              [Angle Frac tan    "tan"]

              [Frac Angle acos   "acos"]
              [Frac Angle asin   "asin"]
              [Frac Angle atan   "atan"]
              ))
     )

(the .public (atan_2 x y)
  (-> Frac Frac
      Frac)
  (cond (f.< x +0.0)
        (..atan (f./ x y))

        (f.< +0.0 x)
        (if (or (f.< y +0.0)
                (f.= +0.0 y))
          (|> y (f./ x) atan (f.+ pi))
          (|> y (f./ x) atan (f.- pi)))

        ... (f.= +0.0 x)
        (cond (f.< y +0.0)
              (|> pi (f./ +2.0))
              
              (f.< +0.0 y)
              (|> pi (f./ -2.0))
              
              ... (f.= +0.0 y)
              (f./ +0.0 +0.0))))

(the .public (hypotenuse catA catB)
  (-> Frac Frac
      Frac)
  (f.pow +0.5 (f.+ (f.* catA catA)
                   (f.* catB catB))))

(alias [sine]
       ..sin)

(alias [co_sine]
       ..cos)

(alias [tangent]
       ..tan)

(with_template [<name> <reciprocal>]
  [(the .public <name>
     (-> Angle
         Frac)
     (|>> <reciprocal>
          f.reciprocal))]

  [secant co_sine]
  [co_secant sine]
  [co_tangent tangent]
  )

(alias [sec]
       ..secant)

(alias [csc]
       ..co_secant)

(alias [cot]
       ..co_tangent)

(with_template [<name> <reciprocal>]
  [(the .public <name>
     (-> Angle
         Frac)
     (|>> f.reciprocal
          <reciprocal>))]

  [arc_secant ..acos]
  [arc_co_secant ..asin]
  [arc_co_tangent ..atan]
  )

(alias [arc_sine]
       ..asin)

(alias [arc_co_sine]
       ..acos)

(alias [arc_tangent]
       ..atan)

(alias [arc_tangent_2]
       ..atan_2)

(alias [asec]
       ..arc_secant)

(alias [acsc]
       ..arc_co_secant)

(alias [acot]
       ..arc_co_tangent)
