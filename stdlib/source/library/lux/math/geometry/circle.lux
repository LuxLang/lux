... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [math
    [number
     [/64
      ["d" decimal]]]]
   [macro
    ["[0]" template]]]]
 [///
  ["[0]" unit]])

(every .public Angle
  Decimal)

(template.with [,name ,unit]
  [(the .public ,name
     Angle
     (its unit.#factor ,unit))]

  [... ["Ï€ is wrong!" by Bob Palais](https://www.math.utah.edu/~palais/pi.html)
   [pi  unit.radian]
   ... [The Tau Manifesto](https://tauday.com/tau-manifesto)
   [tau unit.turn]])

... https://en.wikipedia.org/wiki/Turn_(angle)
(the .public turn
  Angle
  ..tau)

... https://en.wikipedia.org/wiki/Radian
(the .public radian
  Angle
  +1.0)

... https://en.wikipedia.org/wiki/Degree_(angle)
(the .public degree
  Angle
  (d.of_degree ..tau))

... https://en.wikipedia.org/wiki/Gradian
(the .public gradian
  Angle
  (d.of_gradian ..tau))

... https://en.wikipedia.org/wiki/Trigonometric_functions
... https://en.wikipedia.org/wiki/Inverse_trigonometric_functions
(for .jvm
     (these (the !double
              (template.macro (_ value)
                [(|> value
                     (as (-> Decimal (Nominal "java.lang.Double")))
                     .jvm_object_cast#)]))
            
            (the !decimal
              (template.macro (_ value)
                [(|> value
                     .jvm_object_cast#
                     (as (-> (Nominal "java.lang.Double") Decimal)))]))
            
            (template.with [<input> <output> <name> <method>]
              [(the .public <name>
                 (-> <input>
                     <output>)
                 (|>> !double
                      ["D"]
                      (.jvm_member_invoke_static# [] "java.lang.Math" <method> [])
                      !decimal))]

              [[Angle Decimal cos "cos"]
               [Angle Decimal sin "sin"]
               [Angle Decimal tan "tan"]

               [Decimal Angle acos "acos"]
               [Decimal Angle asin "asin"]
               [Decimal Angle atan "atan"]]))

     .js
     (these (template.with [<input> <output> <name> <method>]
              [(the .public <name>
                 (-> <input>
                     <output>)
                 (|>> []
                      (.js_of# (.js_constant# <method>))
                      (as (-> Any Decimal))))]

              [[Angle Decimal cos "Math.cos"]
               [Angle Decimal sin "Math.sin"]
               [Angle Decimal tan "Math.tan"]

               [Decimal Angle acos "Math.acos"]
               [Decimal Angle asin "Math.asin"]
               [Decimal Angle atan "Math.atan"]]))

     .python
     (these (template.with [<input> <output> <name> <method>]
              [(the .public <name>
                 (-> <input>
                     <output>)
                 (|>> []
                      (.python_object_do# <method> (.python_import# "math"))
                      (as (-> Any Decimal))))]

              [[Angle Decimal cos "cos"]
               [Angle Decimal sin "sin"]
               [Angle Decimal tan "tan"]

               [Decimal Angle acos "acos"]
               [Decimal Angle asin "asin"]
               [Decimal Angle atan "atan"]]))

     .lua
     (these (template.with [<input> <output> <name> <method>]
              [(the .public <name>
                 (-> <input>
                     <output>)
                 (|>> []
                      (.lua_of# (.lua_constant# <method>))
                      (as (-> Any Decimal))))]

              [[Angle Decimal cos "math.cos"]
               [Angle Decimal sin "math.sin"]
               [Angle Decimal tan "math.tan"]

               [Decimal Angle acos "math.acos"]
               [Decimal Angle asin "math.asin"]
               [Decimal Angle atan "math.atan"]]))

     .ruby
     (these (template.with [<input> <output> <name> <method>]
              [(the .public <name>
                 (-> <input>
                     <output>)
                 (|>> []
                      (.ruby_of# (.ruby_constant# <method>))
                      (as (-> Any Decimal))))]

              [[Angle Decimal cos "Math.cos"]
               [Angle Decimal sin "Math.sin"]
               [Angle Decimal tan "Math.tan"]

               [Decimal Angle acos "Math.acos"]
               [Decimal Angle asin "Math.asin"]
               [Decimal Angle atan "Math.atan"]]))

     .php
     (these (template.with [<input> <output> <name> <method>]
              [(the .public <name>
                 (-> <input>
                     <output>)
                 (|>> ("php of" ("php constant" <method>))
                      (as (-> Any Decimal))))]

              [[Angle Decimal cos "cos"]
               [Angle Decimal sin "sin"]
               [Angle Decimal tan "tan"]

               [Decimal Angle acos "acos"]
               [Decimal Angle asin "asin"]
               [Decimal Angle atan "atan"]]))
     )

(the .public (atan_2 x y)
  (-> Decimal Decimal
      Decimal)
  (if (d.< x +0.0)
      (..atan (d./ x y))

      (d.< +0.0 x)
      (if (or (d.< y +0.0)
              (d.= +0.0 y))
          (|> y (d./ x) atan (d.+ pi))
          (|> y (d./ x) atan (d.- pi)))

      ... (d.= +0.0 x)
      (if (d.< y +0.0)
          (|> pi (d./ +2.0))
          
          (d.< +0.0 y)
          (|> pi (d./ -2.0))
          
          ... (d.= +0.0 y)
          (d./ +0.0 +0.0))))

(the .public (hypotenuse catA catB)
  (-> Decimal Decimal
      Decimal)
  (d.^ +0.5 (d.+ (d.x catA catA)
                 (d.x catB catB))))

(alias [sine]
       ..sin)

(alias [co_sine]
       ..cos)

(alias [tangent]
       ..tan)

(template.with [<name> <reciprocal>]
  [(the .public <name>
     (-> Angle
         Decimal)
     (|>> <reciprocal>
          d.reciprocal))]

  [[secant co_sine]
   [co_secant sine]
   [co_tangent tangent]])

(alias [sec]
       ..secant)

(alias [csc]
       ..co_secant)

(alias [cot]
       ..co_tangent)

(template.with [<name> <reciprocal>]
  [(the .public <name>
     (-> Angle
         Decimal)
     (|>> d.reciprocal
          <reciprocal>))]

  [[arc_secant ..acos]
   [arc_co_secant ..asin]
   [arc_co_tangent ..atan]])

(alias [arc_sine]
       ..asin)

(alias [arc_co_sine]
       ..acos)

(alias [arc_tangent]
       ..atan)

(alias [arc_tangent_2]
       ..atan_2)

(alias [asec]
       ..arc_secant)

(alias [acsc]
       ..arc_co_secant)

(alias [acot]
       ..arc_co_tangent)
