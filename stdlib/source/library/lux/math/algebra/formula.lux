... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except :Variable with)
   [math
    [number
     [/64
      ["[0]" natural]
      ["[0]" decimal]]]]
   [control
    ["[0]" state (.only State)]]
   [data
    ["[0]" sum]
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" set (.only Set)]
     ["[0]" list (.use "[1]:[0]" monad)
      ["?[1]" \\projection]]]]
   [abstract
    ["?" projection]
    ["[0]" monad]
    ["[0]" equality (.only Equality)]]
   [macro
    ["^" pattern]
    ["[0]" template]
    ["[0]" syntax]]
   [meta
    ["[0]" code (.only)
     ["?[1]" \\projection]]]]]
 [//
  ["[0]" variable (.only Variable)]])

... https://en.wikipedia.org/wiki/Scalar_(physics)
(every .public Scalar
  Decimal)

(every .public Formula
  (Rec @
    (Variant
     {:Constant Scalar}
     {:+ @ @}
     {:- @ @}
     {:x @ @}
     {:/ @ @}
     {:^ @ @}
     {:Variable Variable})))

(the .public equality
  (Equality Formula)
  (<| equality.recursive
      (.function (_ equality))
      (let [binary (product.equality equality equality)])
      (all sum.equality
           decimal.equality
           binary
           binary
           binary
           binary
           binary
           variable.equality
           )))

(alias [=]
       ..equality)

(the .public (as_text it)
  (text.Injection Formula)
  (`` (when it
        {:Constant it}
        (by decimal.base_10 as it)

        (,, (template.with [,tag ,symbol]
              [{,tag parameter it}
               (|> (list ,symbol (as_text parameter) (as_text it))
                   (text.interposed " ")
                   (text.enclosed ["(" ")"]))]
              [[:+ "+"]
               [:- "-"]
               [:x "x"]
               [:/ "/"]
               [:^ "^"]]))
        
        {:Variable it}
        (variable.as_text it))))

(every .public Environment
  Natural)

(the .public constant
  (-> Scalar
      Formula)
  (|>> {:Constant}))

(the .public (variable name)
  (-> Text
      (State Environment Formula))
  (monad.let state.monad
    [it state.state
     _ (state.update ++)]
    (pure {:Variable it name})))

(template.with [,name ,tag]
  [(the .public (,name parameter it)
     (-> Formula
         (Change Formula))
     {,tag parameter it})]

  [[+ :+]
   [- :-]
   [x :x]
   [/ :/]
   [^ :^]])

(the .public new
  (for_any (_ it)
    (-> (State Environment it)
        it))
  (|>> (state.value natural.zero)
       product.right))

(the .public (every_variable it)
  (-> Formula
      (Set variable.Identity))
  (`` (when it
        {:Constant _}
        (set.empty natural.hash)

        (,, (template.with [,tag]
              [{,tag parameter it}
               (set.union (every_variable parameter)
                          (every_variable it))]

              [[:+]
               [:-]
               [:x]
               [:/]
               [:^]]))
        
        {:Variable it}
        (set.of_list natural.hash (list (variable.identity it))))))

(the .public (as_code it)
  (-> Formula
      Code)
  (`` (when it
        {:Constant it}
        (code.decimal it)

        (,, (template.with [,tag ,function]
              [{,tag parameter it}
               (` (,function (, (as_code parameter))
                             (, (as_code it))))]

              [[:+ decimal.+]
               [:- decimal.-]
               [:x decimal.x]
               [:/ decimal./]
               [:^ decimal.^]]))
        
        {:Variable it}
        (variable.as_code it))))

(syntax.the .public (with [variables (?code.tuple (?.some ?code.local))
                           body ?list.any])
  (pure (list (` (monad.let state.monad
                   [(,* (|> variables
                            (list:each (function (_ it)
                                         (list (code.local it)
                                               (` (..variable (, (code.text it)))))))
                            list:conjoint))]
                   (by state.monad (,' pure) (, body)))))))
