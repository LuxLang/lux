... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except function)
   [math
    [number
     [/64
      ["[0]" natural]]]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)
      ["?[1]" \\projection]]
     ["[0]" set (.only Set)]]]
   [abstract
    ["[0]" monad]]
   [macro
    ["[0]" template]
    ["[0]" syntax]]
   ["[0]" error (.only)
    ["[0]" try (.only Try)]]
   ["[0]" meta]
   [type
    ["[0]" nominal]]]]
 [//
  ["[0]" variable]
  ["[0]" formula (.only Formula)]])

... https://en.wikipedia.org/wiki/Equation
(nominal.every .public Equation
  [Formula Formula]

  (the .public (= left right)
    (-> Formula Formula
        Equation)
    (nominal.of [left right]))

  (template.with [,name ,side]
    [(the .public ,name
       (-> Equation
           Formula)
       (|>> nominal.as
            ,side))]

    [[left product.left]
     [right product.right]])

  (the .public in_reverse
    (Change Equation)
    (|>> nominal.as
         product.swapped
         nominal.of))

  (the .public (as_text it)
    (text.Injection Equation)
    (|> (list "="
              (formula.as_text (..left it))
              (formula.as_text (..right it)))
        (text.interposed " ")
        (text.enclosed ["(" ")"])))

  (template.with [,name ,formula]
    [(the .public (,name parameter it)
       (-> Equation Equation
           Equation)
       (= (,formula (..left parameter) (..left it))
          (,formula (..right parameter) (..right it))))]

    [[+ formula.+]
     [- formula.-]
     [x formula.x]
     [/ formula./]
     [^ formula.^]])

  (the (function'' parameters value definition)
    (-> (List Formula) Formula Formula
        Code)
    (let [input (list.repeated (list.size parameters)
                               (` formula.Scalar))
          type (` (-> (,* input)
                      formula.Scalar))]
      (` (is (, type)
             (.function ((, (formula.as_code value))
                         (,* (list#each formula.as_code parameters)))
               (, (formula.as_code definition)))))))

  (the (function' parameters value it)
    (-> (List Formula) Formula Equation
        (Try Code))
    (let [[concept definition] (nominal.as it)
          input (is (Set variable.Identity)
                    (|> parameters
                        (list#each formula.every_variable)
                        (list.mix set.union (set.empty natural.hash))))
          output (is (Set variable.Identity)
                     (formula.every_variable value))]
      (if (let [there_is_no_circularity
                (not (set.sub? input output))

                all_inputs_are_present_in_definition
                (set.= input
                       (formula.every_variable definition))

                only_the_concept_is_being_calculated
                (set.= output
                       (formula.every_variable concept))]
            (and there_is_no_circularity
                 all_inputs_are_present_in_definition
                 only_the_concept_is_being_calculated))
          {try.#Success (function'' parameters value definition)}
          {try.#Failure error.not_valid})))

  (every .public (Function of)
    [Formula of
     Equation])

  (the Function'
    (type (Try (Function (List Formula)))))

  (the .public function
    (syntax.macro (_ [it ?list.any])
      (monad.let meta.monad
        [it (meta.eval Function' it)]
        (when (monad.let try.monad
                [[concept parameters it] (as (-> Any
                                                 Function')
                                             it)]
                (function' parameters concept it))
          {try.#Success it}
          (pure (list it))
          
          {try.#Failure error}
          (meta.failure error)))))
  )
