... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except #seed
                or and list i64 nat int rev char only)
   [abstract
    [hash (.only Hash)]
    [functor (.only Functor)]
    [apply (.only Apply)]
    ["[0]" monad (.only Monad do)]]
   [control
    ["[0]" state (.only State)]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)
     [char (.only Char)]
     ["[0]" unicode
      ["[1]" set]]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]
     ["[0]" array (.only Array)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" queue (.only Queue)]
     ["[0]" set (.only Set)]
     ["[0]" stack (.only Stack)]
     ["[0]" sequence (.only Sequence)]
     [tree
      ["[0]" finger (.only Tree)]]]]
   [math
    [number (.only hex)
     ["n" nat]
     ["i" int]
     ["d" dec]
     ["f" frac]
     ["c" complex]
     ["[0]" i64]]]
   [meta
    [type
     [refinement (.only Refiner Refined)]
     ["[0]" object (.only Object object)]]]
   [world
    ["[0]" time (.only Time)
     ["[0]" instant (.only Instant)]
     ["[0]" date (.only Date)]
     ["[0]" duration (.only Duration)]
     ["[0]" month (.only Month)]
     ["[0]" day (.only Day)]]]]])

(for .old
     (every .public PRNG
       (Rec PRNG
         (-> Any
             [PRNG I64])))

     ... else
     (object.every .public (PRNG [] state)
       [#number (object.Method Any [(Object PRNG state) I64])]))

(every .public (Random of)
  (for .old (State PRNG of)
       (for_any (_ seed)
         (State (Object PRNG seed) of))))

(the Implementation
  (template (_ ,interface)
    [(for .old (,interface Random)
          (for_any (_ seed)
            (,interface (for_any (_ of) (Random of seed)))))]))

(the .public functor
  (Implementation Functor)
  state.functor)

(the .public apply
  (Implementation Apply)
  state.apply)

(the .public monad
  (Implementation Monad)
  state.monad)

(the .public (only pred gen)
  (for_any (_ of)
    (-> (-> of Bit) (Random of)
        (Random of)))
  (do ..monad
    [sample gen]
    (if (pred sample)
      (in sample)
      (only pred gen))))

(the .public (one check random)
  (for_any (_ input output)
    (-> (-> input (Maybe output)) (Random input)
        (Random output)))
  (do ..monad
    [sample random]
    (when (check sample)
      {.#Some output}
      (in output)

      {.#None}
      (one check random))))

(the .public (refined refiner gen)
  (for_any (_ of %)
    (-> (Refiner of %) (Random of)
        (Random (Refined of %))))
  (do ..monad
    [sample gen]
    (when (refiner sample)
      {.#Some refined}
      (in refined)

      {.#None}
      (refined refiner gen))))

(the .public bit
  (Random Bit)
  (function (_ prng)
    (let [[prng output] (for .old (prng [])
                             (object.on ..#number [] prng))]
      [prng (|> output
                (i64.and 1)
                (n.= 1))])))

(the .public i64
  (Random I64)
  (function (_ prng)
    (let [[prng left] (for .old (prng [])
                           (object.on ..#number [] prng))
          [prng right] (for .old (prng [])
                            (object.on ..#number [] prng))]
      [prng (|> left
                (i64.left_shifted 32)
                (.i64_+# right))])))

(with_template [<name> <type> <cast>]
  [(the .public <name>
     (Random <type>)
     (of ..functor each (|>> <cast>) ..i64))]

  [nat Nat .nat]
  [int Int .int]
  [rev Rev .rev]
  )

(the .public dec
  (Random Dec)
  (of ..functor each
      (|>> .i64
           d.of_bits)
      ..nat))

(the .public safe_dec
  (Random Dec)
  (let [mantissa_range (.int (i64.left_shifted 53 1))
        mantissa_max (i.dec (-- mantissa_range))]
    (of ..functor each
        (|>> (i.% mantissa_range)
             i.dec
             (d./ mantissa_max))
        ..int)))

(the .public (char set)
  (-> unicode.Set
      (Random Char))
  (let [start (unicode.start set)
        end (unicode.end set)
        size (n.- start end)
        in_range (is (-> Char Char)
                     (|>> (n.% size) (n.+ start)))]
    (|> ..nat
        (of ..functor each in_range)
        (..only (unicode.member? set)))))

(the .public (text char_gen size)
  (-> (Random Char) Nat
      (Random Text))
  (if (n.= 0 size)
    (of ..monad in "")
    (do ..monad
      [x char_gen
       xs (text char_gen (-- size))]
      (in (text#composite (text.of_char x) xs)))))

(with_template [<name> <set>]
  [(the .public <name>
     (-> Nat
         (Random Text))
     (..text (..char <set>)))]

  [unicode       unicode.character]
  [ascii         unicode.ascii]
  [alphabetic    unicode.alphabetic]
  [alpha_numeric unicode.alpha_numeric]
  [numeric       unicode.numeric]
  [upper_cased   unicode.upper_case]
  [lower_cased   unicode.lower_case]
  )

(with_template [<name> <type> <ctor> <gen>]
  [(the .public <name>
     (Random <type>)
     (do ..monad
       [left <gen>
        right <gen>]
       (in (<ctor> left right))))]

  [frac    f.Frac    f.frac   ..nat]
  [complex c.Complex c.complex ..safe_dec]
  )

(the .public (and left right)
  (for_any (_ left right)
    (-> (Random left) (Random right)
        (Random (And left right))))
  (function (_ prng)
    (let [[prng left] (left prng)
          [prng right] (right prng)]
      [prng [left right]])))

(the .public (or left right)
  (for_any (_ left right)
    (-> (Random left) (Random right)
        (Random (Or left right))))
  (function (_ prng)
    (let [[prng ?] (..bit prng)]
      (if ?
        (let [[prng left] (left prng)]
          [prng {#0 left}])
        (let [[prng right] (right prng)]
          [prng {#1 right}])))))

(the .public (either left right)
  (for_any (_ of)
    (-> (Random of) (Random of)
        (Random of)))
  (function (_ prng)
    (let [[prng ?] (..bit prng)]
      (if ?
        (left prng)
        (right prng)))))

(the .public (rec gen)
  (for_any (_ of)
    (-> (-> (Random of) (Random of))
        (Random of)))
  (function (_ state)
    (let [gen' (gen (rec gen))]
      (gen' state))))

(the .public (maybe value_gen)
  (for_any (_ of)
    (-> (Random of)
        (Random (Maybe of))))
  (do [! ..monad]
    [some? bit]
    (if some?
      (do !
        [value value_gen]
        (in {.#Some value}))
      (in {.#None}))))

(the .public (list size value_gen)
  (for_any (_ of)
    (-> Nat (Random of)
        (Random (List of))))
  (if (n.> 0 size)
    (do ..monad
      [x value_gen
       xs (list (-- size) value_gen)]
      (in {.#Item x xs}))
    (of ..monad in (.list))))

(the .public (sequence size value_gen)
  (for_any (_ of)
    (-> Nat (Random of)
        (Random (Sequence of))))
  (if (n.> 0 size)
    (do ..monad
      [x value_gen
       xs (sequence (-- size) value_gen)]
      (in (sequence.suffix x xs)))
    (of ..monad in sequence.empty)))

(with_template [<name> <type> <ctor>]
  [(the .public (<name> size value_gen)
     (for_any (_ of)
       (-> Nat (Random of)
           (Random (<type> of))))
     (do ..monad
       [values (list size value_gen)]
       (in (|> values <ctor>))))]

  [array Array array.of_list]
  [queue Queue queue.of_list]
  [stack Stack (list#mix stack.top stack.empty)]
  )

(the .public (set hash size value_gen)
  (for_any (_ of)
    (-> (Hash of) Nat (Random of)
        (Random (Set of))))
  (if (n.> 0 size)
    (do [! ..monad]
      [xs (set hash (-- size) value_gen)]
      (loop (again [_ []])
        (do !
          [x value_gen
           .let [xs+ (set.has x xs)]]
          (if (n.= size (set.size xs+))
            (in xs+)
            (again [])))))
    (of ..monad in (set.empty hash))))

(the .public (dictionary hash size key_gen value_gen)
  (for_any (_ key value)
    (-> (Hash key) Nat (Random key) (Random value)
        (Random (Dictionary key value))))
  (if (n.> 0 size)
    (do [! ..monad]
      [kv (dictionary hash (-- size) key_gen value_gen)]
      (loop (again [_ []])
        (do !
          [k key_gen
           v value_gen
           .let [kv+ (dictionary.has k v kv)]]
          (if (n.= size (dictionary.size kv+))
            (in kv+)
            (again [])))))
    (of ..monad in (dictionary.empty hash))))

(the .public instant
  (Random Instant)
  (of ..functor each instant.of_millis ..int))

(the .public date
  (Random Date)
  (of ..functor each instant.date ..instant))

(the .public time
  (Random Time)
  (of ..functor each instant.time ..instant))

(the .public duration
  (Random Duration)
  (of ..functor each duration.of_millis ..int))

(the .public month
  (Random Month)
  (let [(open "/#[0]") ..monad]
    (..either (..either (..either (/#in {month.#January})
                                  (..either (/#in {month.#February})
                                            (/#in {month.#March})))
                        (..either (/#in {month.#April})
                                  (..either (/#in {month.#May})
                                            (/#in {month.#June}))))
              (..either (..either (/#in {month.#July})
                                  (..either (/#in {month.#August})
                                            (/#in {month.#September})))
                        (..either (/#in {month.#October})
                                  (..either (/#in {month.#November})
                                            (/#in {month.#December})))))))

(the .public day
  (Random Day)
  (let [(open "/#[0]") ..monad]
    (..either (..either (/#in {day.#Sunday})
                        (..either (/#in {day.#Monday})
                                  (/#in {day.#Tuesday})))
              (..either (..either (/#in {day.#Wednesday})
                                  (/#in {day.#Thursday}))
                        (..either (/#in {day.#Friday})
                                  (/#in {day.#Saturday}))))))

(for .old
     (the .public (value prng seed it)
       (for_any (_ seed of)
         (-> (-> seed PRNG) seed (Random of)
             [PRNG of]))
       (state.value (prng seed) it))

     ... else
     (the .public (value prng seed it)
       (for_any (_ seed of)
         (-> (PRNG seed) seed (Random of seed)
             [(Object PRNG seed) of]))
       (state.value (object prng seed)
                    it)))

(the .public (prng update return)
  (for_any (_ seed)
    (-> (-> seed seed) (-> seed I64)
        (for .old (-> seed PRNG)
             (PRNG seed))))
  (for .old (function (_ seed _)
              [(prng update return (update seed))
               (return seed)])
       [#number (object.method
                  (function (_ next again [this _])
                    (let [seed (object.state this)]
                      [(object (prng update return) (update seed))
                       (return seed)])))]))

(every .public PCG_32
  (Record
   [#increase (I64 Any)
    #seed (I64 Any)]))

(the .public pcg_32
  (for .old (-> PCG_32 PRNG)
       (PRNG PCG_32))
  (let [magic 6364136223846793005]
    (..prng (function (_ [increase seed])
              (|> seed .nat (n.* magic) (.i64_+# increase) [increase]))
            (function (_ [increase seed])
              (let [rot (|> seed .nat (i64.right_shifted 59))]
                (|> seed
                    (i64.right_shifted 18)
                    (i64.xor seed)
                    (i64.right_shifted 27)
                    (i64.right_rotated rot)
                    .i64))))))

(every .public Xoroshiro_128+
  (Record
   [#seed_0 (I64 Any)
    #seed_1 (I64 Any)]))

(the .public xoroshiro_128+
  (for .old (-> Xoroshiro_128+ PRNG)
       (PRNG Xoroshiro_128+))
  (..prng (function (_ [s0 s1])
            (let [s01 (i64.xor s0 s1)]
              [(|> s0
                   (i64.left_rotated 55)
                   (i64.xor s01)
                   (i64.xor (i64.left_shifted 14 s01)))
               (i64.left_rotated 36 s01)]))
          (function (_ [s0 s1])
            (.i64_+# s0 s1))))

... https://en.wikipedia.org/wiki/Xorshift#Initialization
... http://xorshift.di.unimi.it/splitmix64.c
... [Andrew Clifton - Don't generate, hash! (Or, how I learned to stop worrying and love SplitMix64)](https://www.youtube.com/watch?v=e4b--cyXEsM)
(every .public Split_Mix_64
  Nat)

(the .public split_mix_64
  (for .old (-> Split_Mix_64 PRNG)
       (PRNG Split_Mix_64))
  (let [twist (is (-> Nat Nat Nat)
                  (function (_ shift value)
                    (i64.xor (i64.right_shifted shift value)
                             value)))
        mix n.*]
    (..prng (n.+ (hex "9E,37,79,B9,7F,4A,7C,15"))
            (|>> (twist 30)
                 (mix (hex "BF,58,47,6D,1C,E4,E5,B9"))

                 (twist 27)
                 (mix (hex "94,D0,49,BB,13,31,11,EB"))

                 (twist 31)
                 .i64))))
