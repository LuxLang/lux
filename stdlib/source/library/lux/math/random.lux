... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except #seed
                text or and stack list i64 natural integer revolution character only try)
   [abstract
    [hash (.only Hash)]
    [functor (.only Functor)]
    [monad (.only Monad do)]]
   [control
    ["[0]" state (.only State)]]
   [error
    ["[0]" try (.only Try)]]
   [data
    ["[0]" text (.only)
     [character (.only Character)]
     ["[0]" unicode
      ["[1]" set]]]
    [collection
     ["[0]" list]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" queue (.only Queue)]
     ["[0]" set (.only Set)]]]
   [math
    [number (.only hex)
     ["n" natural]
     ["i" integer]
     ["d" decimal]
     ["f" fraction]
     ["c" complex]
     ["[0]" i64]]]
   [macro
    ["[0]" template]]]])

(every .public (PRNG state)
  (-> state
      [(Can PRNG state) I64]))

(every .public (Random it)
  (for_any (_ seed)
    (State (Can PRNG seed) it)))

(the Implementation
  (template.macro (_ ,interface)
    [(for_any (_ seed)
       (,interface (for_any (_ it) (Random it seed))))]))

(the .public functor
  (Implementation Functor)
  state.functor)

(the .public monad
  (Implementation Monad)
  state.monad)

(the .public (only pred gen)
  (for_any (_ it)
    (-> (-> it Bit) (Random it)
        (Random it)))
  (do ..monad
    [sample gen]
    (if (pred sample)
        (pure sample)
        (only pred gen))))

(the .public (one check random)
  (for_any (_ input output)
    (-> (-> input (Maybe output)) (Random input)
        (Random output)))
  (do ..monad
    [sample random]
    (when (check sample)
      {.#Some output}
      (pure output)

      {.#None}
      (one check random))))

(the .public bit
  (Random Bit)
  (function (_ [seed number])
    (let [[prng output] (number seed)]
      [prng (|> output
                (i64.and 1)
                (n.= 1))])))

(the .public i64
  (Random I64)
  (function (_ [seed number])
    (let [[[seed number] left] (number seed)
          [prng right] (number seed)]
      [prng (|> left
                (i64.left_shifted 32)
                (.i64_+# right))])))

(template.with [<name> <type> <cast>]
  [(the .public <name>
     (Random <type>)
     (by ..functor each (|>> <cast>) ..i64))]

  [natural Natural .natural]
  [integer Integer .integer]
  [revolution Revolution .revolution]
  )

(the .public decimal
  (Random Decimal)
  (by ..functor each
      (|>> .i64
           d.of_bits)
      ..natural))

(the .public unit_decimal
  (Random Decimal)
  (let [mantissa_range (.integer (i64.left_shifted 53 1))
        mantissa_maximum (i.decimal (-- mantissa_range))]
    (by ..functor each
        (|>> (i.% mantissa_range)
             i.absolute
             i.decimal
             (d./ mantissa_maximum))
        ..integer)))

(the .public safe_decimal
  (Random Decimal)
  (..only (|>> d.not_a_number? not)
          ..decimal))

(the .public (character set)
  (-> unicode.Set
      (Random Character))
  (let [start (unicode.start set)
        end (unicode.end set)
        size (n.- start end)
        in_range (is (-> Character Character)
                     (|>> (n.% size) (n.+ start)))]
    (|> ..natural
        (by ..functor each in_range)
        (..only (unicode.member? set)))))

(the .public (text character_gen size)
  (-> (Random Character) Natural
      (Random Text))
  (if (n.= 0 size)
      (by ..monad pure "")
      (do ..monad
        [x character_gen
         xs (text character_gen (-- size))]
        (pure (.text (text.of_character x) xs)))))

(template.with [<name> <set>]
  [(the .public <name>
     (-> Natural
         (Random Text))
     (..text (..character <set>)))]

  [unicode       unicode.character]
  [ascii         unicode.ascii]
  [alphabetic    unicode.alphabetic]
  [alpha_numeric unicode.alpha_numeric]
  [numeric       unicode.numeric]
  [upper_cased   unicode.upper_case]
  [lower_cased   unicode.lower_case]
  )

(template.with [<name> <type> <ctor> <gen>]
  [(the .public <name>
     (Random <type>)
     (do ..monad
       [left <gen>
        right <gen>]
       (pure (<ctor> left right))))]

  [fraction f.Fraction f.new ..natural]
  [complex c.Complex c.complex ..unit_decimal]
  )

(the .public (and left right)
  (for_any (_ left right)
    (-> (Random left) (Random right)
        (Random (And left right))))
  (function (_ prng)
    (let [[prng left] (left prng)
          [prng right] (right prng)]
      [prng [left right]])))

(the .public (or left right)
  (for_any (_ left right)
    (-> (Random left) (Random right)
        (Random (Or left right))))
  (function (_ prng)
    (let [[prng ?] (..bit prng)]
      (if ?
          (let [[prng left] (left prng)]
            [prng {0b left}])
          (let [[prng right] (right prng)]
            [prng {1b right}])))))

(the .public (either left right)
  (for_any (_ it)
    (-> (Random it) (Random it)
        (Random it)))
  (function (_ prng)
    (let [[prng ?] (..bit prng)]
      (if ?
          (left prng)
          (right prng)))))

(the .public (rec gen)
  (for_any (_ it)
    (-> (-> (Random it) (Random it))
        (Random it)))
  (function (_ state)
    (let [gen' (gen (rec gen))]
      (gen' state))))

(the .public (try it)
  (for_any (_ it)
    (-> (Random (Try it))
        (Random it)))
  (do ..monad
    [attempt it]
    (when attempt
      {try.#Success it}
      (pure it)

      {try.#Failure _}
      (try it))))

(the .public (maybe value_gen)
  (for_any (_ it)
    (-> (Random it)
        (Random (Maybe it))))
  (do [! ..monad]
    [some? bit]
    (if some?
        (do !
          [value value_gen]
          (pure {.#Some value}))
        (pure {.#None}))))

(the .public (stack size value_gen)
  (for_any (_ it)
    (-> Natural (Random it)
        (Random (Stack it))))
  (if (n.> 0 size)
      (do ..monad
        [x value_gen
         xs (stack (-- size) value_gen)]
        (pure {.#Top x xs}))
      (by ..monad pure (.stack))))

(the .public list
  (for_any (_ item)
    (-> Natural
        (-> (Random item)
            (Random (List item)))))
  list.static)

(template.with [<name> <type> ,of_list]
  [(the .public (<name> size item)
     (for_any (_ it)
       (-> Natural
           (-> (Random it)
               (Random (<type> it)))))
     (by ..monad each
         ,of_list
         (..list size item)))]

  [array Array list.as_array]
  [queue Queue queue.of_list]
  )

(the .public (set hash size value_gen)
  (for_any (_ it)
    (-> (Hash it) Natural
        (-> (Random it)
            (Random (Set it)))))
  (if (n.> 0 size)
      (do [! ..monad]
        [xs (set hash (-- size) value_gen)]
        (loop (again [_ []])
          (do !
            [x value_gen
             .let [xs+ (set.has x xs)]]
            (if (n.= size (set.size xs+))
                (pure xs+)
                (again [])))))
      (by ..monad pure (set.empty hash))))

(the .public (dictionary hash size key_gen value_gen)
  (for_any (_ key value)
    (-> (Hash key) Natural (Random key) (Random value)
        (Random (Dictionary key value))))
  (if (n.> 0 size)
      (do [! ..monad]
        [kv (dictionary hash (-- size) key_gen value_gen)]
        (loop (again [_ []])
          (do !
            [k key_gen
             v value_gen
             .let [kv+ (dictionary.has k v kv)]]
            (if (n.= size (dictionary.size kv+))
                (pure kv+)
                (again [])))))
      (by ..monad pure (dictionary.empty hash))))

(the .public (value prng seed it)
  (for_any (_ seed it)
    (-> (PRNG seed) seed (Random it seed)
        [(Can PRNG seed) it]))
  (state.value (can prng seed)
               it))

(the .public (prng update return)
  (for_any (_ seed)
    (-> (-> seed seed) (-> seed I64)
        (PRNG seed)))
  (function (ability seed)
    [(can ability (update seed))
     (return seed)]))

(every .public PCG_32
  (Record
   [#increase (I64 Any)
    #seed (I64 Any)]))

(the .public pcg_32
  (PRNG PCG_32)
  (let [magic 6364136223846793005]
    (..prng (function (_ [increase seed])
              (|> seed .natural (n.x magic) (.i64_+# increase) [increase]))
            (function (_ [increase seed])
              (let [rot (|> seed .natural (i64.right_shifted 59))]
                (|> seed
                    (i64.right_shifted 18)
                    (i64.xor seed)
                    (i64.right_shifted 27)
                    (i64.right_rotated rot)
                    .i64))))))

(every .public Xoroshiro_128+
  (Record
   [#seed_0 (I64 Any)
    #seed_1 (I64 Any)]))

(the .public xoroshiro_128+
  (PRNG Xoroshiro_128+)
  (..prng (function (_ [s0 s1])
            (let [s01 (i64.xor s0 s1)]
              [(|> s0
                   (i64.left_rotated 55)
                   (i64.xor s01)
                   (i64.xor (i64.left_shifted 14 s01)))
               (i64.left_rotated 36 s01)]))
          (function (_ [s0 s1])
            (.i64_+# s0 s1))))

... https://en.wikipedia.org/wiki/Xorshift#Initialization
... http://xorshift.di.unimi.it/splitmix64.c
... [Andrew Clifton - Don't generate, hash! (Or, how I learned to stop worrying and love SplitMix64)](https://www.youtube.com/watch?v=e4b--cyXEsM)
(every .public Split_Mix_64
  Natural)

(the .public split_mix_64
  (PRNG Split_Mix_64)
  (let [twist (is (-> Natural Natural Natural)
                  (function (_ shift value)
                    (i64.xor (i64.right_shifted shift value)
                             value)))
        mix n.x]
    (..prng (n.+ (hex "9E,37,79,B9,7F,4A,7C,15"))
            (|>> (twist 30)
                 (mix (hex "BF,58,47,6D,1C,E4,E5,B9"))

                 (twist 27)
                 (mix (hex "94,D0,49,BB,13,31,11,EB"))

                 (twist 31)
                 .i64))))
