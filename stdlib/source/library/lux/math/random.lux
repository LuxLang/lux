(.module:
  {#.doc "Pseudo-random number generation (PRNG) algorithms."}
  [library
   [lux (#- or and list i64 nat int rev char)
    [abstract
     [hash (#+ Hash)]
     [functor (#+ Functor)]
     [apply (#+ Apply)]
     ["." monad (#+ Monad do)]]
    [data
     ["." text (#+ Char) ("#\." monoid)
      ["." unicode #_
       ["#" set]]]
     [collection
      ["." list ("#\." fold)]
      ["." array (#+ Array)]
      ["." dictionary (#+ Dictionary)]
      ["." queue (#+ Queue)]
      ["." set (#+ Set)]
      ["." stack (#+ Stack)]
      ["." row (#+ Row)]
      [tree
       ["." finger (#+ Tree)]]]]
    [math
     [number (#+ hex)
      ["n" nat]
      ["i" int]
      ["f" frac]
      ["r" ratio]
      ["c" complex]
      ["." i64]]]
    ["." time (#+ Time)
     ["." instant (#+ Instant)]
     ["." date (#+ Date)]
     ["." duration (#+ Duration)]
     ["." month (#+ Month)]
     ["." day (#+ Day)]]
    [type
     [refinement (#+ Refiner Refined)]]]])

(type: .public #rec PRNG
  {#.doc "An abstract way to represent any PRNG."}
  (-> Any [PRNG I64]))

(type: .public (Random a)
  {#.doc "A producer of random values based on a PRNG."}
  (-> PRNG [PRNG a]))

(implementation: .public functor
  (Functor Random)
  
  (def: (map f fa)
    (function (_ state)
      (let [[state' a] (fa state)]
        [state' (f a)]))))

(implementation: .public apply
  (Apply Random)
  
  (def: &functor ..functor)

  (def: (apply ff fa)
    (function (_ state)
      (let [[state' f] (ff state)
            [state'' a] (fa state')]
        [state'' (f a)]))))

(implementation: .public monad
  (Monad Random)
  
  (def: &functor ..functor)

  (def: (in a)
    (function (_ state)
      [state a]))

  (def: (join ffa)
    (function (_ state)
      (let [[state' fa] (ffa state)]
        (fa state')))))

(def: .public (only pred gen)
  {#.doc "Retries the generator until the output satisfies a predicate."}
  (All [a] (-> (-> a Bit) (Random a) (Random a)))
  (do ..monad
    [sample gen]
    (if (pred sample)
      (in sample)
      (only pred gen))))

(def: .public (one check random)
  (All [a b]
    (-> (-> a (Maybe b)) (Random a) (Random b)))
  (do ..monad
    [sample random]
    (case (check sample)
      (#.Some output)
      (in output)

      #.None
      (one check random))))

(def: .public (refined refiner gen)
  {#.doc "Retries the generator until the output can be refined."}
  (All [t r] (-> (Refiner t r) (Random t) (Random (Refined t r))))
  (do ..monad
    [sample gen]
    (case (refiner sample)
      (#.Some refined)
      (in refined)

      #.None
      (refined refiner gen))))

(def: .public bit
  (Random Bit)
  (function (_ prng)
    (let [[prng output] (prng [])]
      [prng (|> output (i64.and 1) (n.= 1))])))

(def: .public i64
  (Random I64)
  (function (_ prng)
    (let [[prng left] (prng [])
          [prng right] (prng [])]
      [prng (|> left
                (i64.left_shifted 32)
                ("lux i64 +" right))])))

(template [<name> <type> <cast>]
  [(def: .public <name>
     (Random <type>)
     (\ ..monad map <cast> ..i64))]

  [nat Nat .nat]
  [int Int .int]
  [rev Rev .rev]
  )

(def: .public frac
  (Random Frac)
  (\ ..monad map (|>> .i64 f.of_bits) ..nat))

(def: .public safe_frac
  {#.doc (example "A number in the interval [0.0,1.0].")}
  (Random Frac)
  (let [mantissa_range (.int (i64.left_shifted 53 1))
        mantissa_max (i.frac (-- mantissa_range))]
    (\ ..monad map
       (|>> (i.% mantissa_range)
            i.frac
            (f./ mantissa_max))
       ..int)))

(def: .public (char set)
  (-> unicode.Set (Random Char))
  (let [start (unicode.start set)
        end (unicode.end set)
        size (n.- start end)
        in_range (: (-> Char Char)
                    (|>> (n.% size) (n.+ start)))]
    (|> ..nat
        (\ ..monad map in_range)
        (..only (unicode.member? set)))))

(def: .public (text char_gen size)
  (-> (Random Char) Nat (Random Text))
  (if (n.= 0 size)
    (\ ..monad in "")
    (do ..monad
      [x char_gen
       xs (text char_gen (-- size))]
      (in (text\compose (text.of_char x) xs)))))

(template [<name> <set>]
  [(def: .public <name>
     (-> Nat (Random Text))
     (..text (..char <set>)))]

  [unicode         unicode.character]
  [ascii           unicode.ascii]
  [ascii/alpha     unicode.ascii/alpha]
  [ascii/alpha_num unicode.ascii/alpha_num]
  [ascii/numeric   unicode.ascii/numeric]
  [ascii/upper     unicode.ascii/upper]
  [ascii/lower     unicode.ascii/lower]
  )

(template [<name> <type> <ctor> <gen>]
  [(def: .public <name>
     (Random <type>)
     (do ..monad
       [left <gen>
        right <gen>]
       (in (<ctor> left right))))]

  [ratio   r.Ratio   r.ratio   ..nat]
  [complex c.Complex c.complex ..safe_frac]
  )

(def: .public (and left right)
  {#.doc "Sequencing combinator."}
  (All [a b] (-> (Random a) (Random b) (Random [a b])))
  (do ..monad
    [=left left
     =right right]
    (in [=left =right])))

(def: .public (or left right)
  {#.doc "Heterogeneous alternative combinator."}
  (All [a b] (-> (Random a) (Random b) (Random (Or a b))))
  (do {! ..monad}
    [? bit]
    (if ?
      (do !
        [=left left]
        (in (0 #0 =left)))
      (do !
        [=right right]
        (in (0 #1 =right))))))

(def: .public (either left right)
  {#.doc "Homogeneous alternative combinator."}
  (All [a] (-> (Random a) (Random a) (Random a)))
  (do ..monad
    [? bit]
    (if ?
      left
      right)))

(def: .public (rec gen)
  {#.doc "A combinator for producing recursive random generators."}
  (All [a] (-> (-> (Random a) (Random a)) (Random a)))
  (function (_ state)
    (let [gen' (gen (rec gen))]
      (gen' state))))

(def: .public (maybe value_gen)
  (All [a] (-> (Random a) (Random (Maybe a))))
  (do {! ..monad}
    [some? bit]
    (if some?
      (do !
        [value value_gen]
        (in (#.Some value)))
      (in #.None))))

(template [<name> <type> <zero> <plus>]
  [(def: .public (<name> size value_gen)
     (All [a] (-> Nat (Random a) (Random (<type> a))))
     (if (n.> 0 size)
       (do ..monad
         [x value_gen
          xs (<name> (-- size) value_gen)]
         (in (<plus> x xs)))
       (\ ..monad in <zero>)))]

  [list List (.list)   #.Item]
  [row  Row  row.empty row.suffix]
  )

(template [<name> <type> <ctor>]
  [(def: .public (<name> size value_gen)
     (All [a] (-> Nat (Random a) (Random (<type> a))))
     (do ..monad
       [values (list size value_gen)]
       (in (|> values <ctor>))))]

  [array Array array.of_list]
  [queue Queue queue.of_list]
  [stack Stack (list\fold stack.top stack.empty)]
  )

(def: .public (set hash size value_gen)
  (All [a] (-> (Hash a) Nat (Random a) (Random (Set a))))
  (if (n.> 0 size)
    (do {! ..monad}
      [xs (set hash (-- size) value_gen)]
      (loop [_ []]
        (do !
          [x value_gen
           .let [xs+ (set.has x xs)]]
          (if (n.= size (set.size xs+))
            (in xs+)
            (recur [])))))
    (\ ..monad in (set.empty hash))))

(def: .public (dictionary hash size key_gen value_gen)
  (All [k v] (-> (Hash k) Nat (Random k) (Random v) (Random (Dictionary k v))))
  (if (n.> 0 size)
    (do {! ..monad}
      [kv (dictionary hash (-- size) key_gen value_gen)]
      (loop [_ []]
        (do !
          [k key_gen
           v value_gen
           .let [kv+ (dictionary.has k v kv)]]
          (if (n.= size (dictionary.size kv+))
            (in kv+)
            (recur [])))))
    (\ ..monad in (dictionary.empty hash))))

(def: .public instant
  (Random Instant)
  (\ ..monad map instant.of_millis ..int))

(def: .public date
  (Random Date)
  (\ ..monad map instant.date ..instant))

(def: .public time
  (Random Time)
  (\ ..monad map instant.time ..instant))

(def: .public duration
  (Random Duration)
  (\ ..monad map duration.of_millis ..int))

(def: .public month
  (Random Month)
  (let [(^open "\.") ..monad]
    (..either (..either (..either (\in #month.January)
                                  (..either (\in #month.February)
                                            (\in #month.March)))
                        (..either (\in #month.April)
                                  (..either (\in #month.May)
                                            (\in #month.June))))
              (..either (..either (\in #month.July)
                                  (..either (\in #month.August)
                                            (\in #month.September)))
                        (..either (\in #month.October)
                                  (..either (\in #month.November)
                                            (\in #month.December)))))))

(def: .public day
  (Random Day)
  (let [(^open "\.") ..monad]
    (..either (..either (\in #day.Sunday)
                        (..either (\in #day.Monday)
                                  (\in #day.Tuesday)))
              (..either (..either (\in #day.Wednesday)
                                  (\in #day.Thursday))
                        (..either (\in #day.Friday)
                                  (\in #day.Saturday))))))

(def: .public (result prng calc)
  (All [a] (-> PRNG (Random a) [PRNG a]))
  (calc prng))

(def: .public (prng update return)
  (All [a] (-> (-> a a) (-> a I64) (-> a PRNG)))
  (function (recur state)
    (function (_ _)
      [(recur (update state))
       (return state)])))

(def: .public (pcg_32 [increase seed])
  {#.doc (example "An implementation of the PCG32 algorithm."
                  "For more information, please see: http://www.pcg-random.org/")}
  (-> [(I64 Any) (I64 Any)] PRNG)
  (let [magic 6364136223846793005]
    (function (_ _)
      [(|> seed .nat (n.* magic) ("lux i64 +" increase) [increase] pcg_32)
       (let [rot (|> seed .i64 (i64.right_shifted 59))]
         (|> seed
             (i64.right_shifted 18)
             (i64.xor seed)
             (i64.right_shifted 27)
             (i64.right_rotated rot)
             .i64))])))

(def: .public (xoroshiro_128+ [s0 s1])
  {#.doc (example "An implementation of the Xoroshiro128+ algorithm."
                  "For more information, please see: http://xoroshiro.di.unimi.it/")}
  (-> [(I64 Any) (I64 Any)] PRNG)
  (function (_ _)
    [(let [s01 (i64.xor s0 s1)]
       (xoroshiro_128+ [(|> s0
                            (i64.left_rotated 55)
                            (i64.xor s01)
                            (i64.xor (i64.left_shifted 14 s01)))
                        (i64.left_rotated 36 s01)]))
     ("lux i64 +" s0 s1)]))

... https://en.wikipedia.org/wiki/Xorshift#Initialization
... http://xorshift.di.unimi.it/splitmix64.c
(def: .public split_mix_64
  {#.doc (example "An implementation of the SplitMix64 algorithm.")}
  (-> Nat PRNG)
  (let [twist (: (-> Nat Nat Nat)
                 (function (_ shift value)
                   (i64.xor (i64.right_shifted shift value)
                            value)))
        mix n.*]
    (..prng (n.+ (hex "9E,37,79,B9,7F,4A,7C,15"))
            (|>> (twist 30)
                 (mix (hex "BF,58,47,6D,1C,E4,E5,B9"))

                 (twist 27)
                 (mix (hex "94,D0,49,BB,13,31,11,EB"))

                 (twist 31)
                 .i64))))
