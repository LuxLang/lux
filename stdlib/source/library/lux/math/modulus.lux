... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception]]
   [math
    [number
     [/64
      ["i" integer]]]]
   [macro
    ["[0]" syntax]]
   [type
    ["[0]" nominal]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]])

(exception.the .public zero_cannot_be_a_modulus)

(nominal.every .public (Modulus %)
  Integer

  (the .public (modulus value)
    (for_some (_ %)
      (-> Integer
          (Try (Modulus %))))
    (if (i.= +0 value)
        (exception.except ..zero_cannot_be_a_modulus [])
        {try.:Success (nominal.of value)}))

  (the .public divisor
    (for_any (_ %) (-> (Modulus %) Integer))
    (|>> nominal.as))

  (the .public (= expected actual)
    (for_any (_ %r %s) (-> (Modulus %r) (Modulus %s) Bit))
    (i.= (nominal.as expected)
         (nominal.as actual)))

  (the .public (congruent? modulus expected actual)
    (for_any (_ %)
      (-> (Modulus %) Integer Integer
          Bit))
    (|> actual
        (i.- expected)
        (i.% (nominal.as modulus))
        (i.= +0)))
  )

(syntax.the .public (literal [divisor <code>.integer])
  (meta.of_try
   (monad.let try.monad
     [_ (..modulus divisor)]
     (pure (list (` (try.trusted (..modulus (, (code.integer divisor))))))))))
