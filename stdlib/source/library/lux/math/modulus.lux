... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception]]
   [math
    [number
     ["i" int]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    [macro
     [syntax (.only syntax)]]
    [type
     ["[0]" nominal]]]]])

(exception.the .public zero_cannot_be_a_modulus)

(nominal.every .public (Modulus %)
  Int

  (the .public (modulus value)
    (Ex (_ %) (-> Int (Try (Modulus %))))
    (if (i.= +0 value)
      (exception.except ..zero_cannot_be_a_modulus [])
      {try.#Success (nominal.abstraction value)}))

  (the .public divisor
    (All (_ %) (-> (Modulus %) Int))
    (|>> nominal.representation))

  (the .public (= expected actual)
    (All (_ %r %s) (-> (Modulus %r) (Modulus %s) Bit))
    (i.= (nominal.representation expected)
         (nominal.representation actual)))

  (the .public (congruent? modulus expected actual)
    (All (_ %) (-> (Modulus %) Int Int Bit))
    (|> actual
        (i.- expected)
        (i.% (nominal.representation modulus))
        (i.= +0)))
  )

(the .public literal
  (syntax (_ [divisor <code>.int])
    (meta.of_try
     (do try.monad
       [_ (..modulus divisor)]
       (in (list (` (try.trusted (..modulus (, (code.int divisor)))))))))))
