(.module:
  [library
   [lux #*
    ["." meta]
    [abstract
     [monad (#+ do)]]
    [control
     ["." try (#+ Try)]
     ["." exception (#+ exception:)]
     [parser
      ["<.>" code]]]
    [macro
     [syntax (#+ syntax:)]
     ["." code]]
    [math
     [number
      ["i" int]]]
    [type
     abstract]]])

(exception: #export zero_cannot_be_a_modulus)

(abstract: #export (Modulus m)
  Int

  {#.doc (doc "A number used as a modulus in modular arithmetic."
              "It cannot be 0.")}

  (def: #export (modulus value)
    (Ex [m] (-> Int (Try (Modulus m))))
    (if (i.= +0 value)
      (exception.throw ..zero_cannot_be_a_modulus [])
      (#try.Success (:abstraction value))))

  (def: #export divisor
    (All [m] (-> (Modulus m) Int))
    (|>> :representation))

  (def: #export (= reference subject)
    (All [r s] (-> (Modulus r) (Modulus s) Bit))
    (i.= (:representation reference)
         (:representation subject)))

  (def: #export (congruent? modulus reference subject)
    (All [m] (-> (Modulus m) Int Int Bit))
    (|> subject
        (i.- reference)
        (i.% (:representation modulus))
        (i.= +0)))
  )

(syntax: #export (literal {divisor <code>.int})
  (meta.lift
   (do try.monad
     [_ (..modulus divisor)]
     (wrap (list (` ((~! try.assumed) (..modulus (~ (code.int divisor))))))))))
