... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except and or not false true)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [monoid (.only Monoid)]]
   [control
    ["[0]" try (.only Try)]]
   [meta
    ["[0]" provenance]]]]
 [//
  ["n" natural]])

(the .public Number
  .I64)

(the with_template' (.in_module# .prelude .with_template))

(the .public bits_per_byte
  8)

(the .public bytes_per_i64
  8)

(the .public width
  Natural
  (n.* ..bits_per_byte
       ..bytes_per_i64))

(with_template' [<parameter_type> <name> <op>]
  [(the .public (<name> parameter subject)
     (for_any (_ of)
       (-> <parameter_type> (I64 of)
           (I64 of)))
     (<op> parameter subject))]

  [(I64 Any) or .i64_or#]
  [(I64 Any) xor .i64_xor#]
  [(I64 Any) and .i64_and#]
  
  [Natural left_shifted .i64_left#]
  [Natural right_shifted .i64_right#]
  )

... https://en.wikipedia.org/wiki/Mask_(computing)
(every .public Mask
  I64)

(the .public (bit position)
  (-> Natural
      Mask)
  (|> 1 .i64 (..left_shifted (n.% ..width position))))

(the .public sign
  Mask
  (..bit (-- ..width)))

(the .public not
  (for_any (_ of)
    (-> (I64 of)
        (I64 of)))
  (..xor (.i64 (-- 0))))

(the .public false
  Mask
  (.i64 0))

(the .public true
  Mask
  (..not ..false))

(the .public (mask amount_of_bits)
  (-> Natural
      Mask)
  (when amount_of_bits
    0 ..false
    bits (when (n.% ..width bits)
           0 ..true
           bits (|> 1 .i64 (..left_shifted (n.% ..width bits)) .--))))

(the (with_shift shift value)
  (-> Natural Natural
      Natural)
  (|> value
      (right_shifted shift)
      (n.+ value)))

(the .public (ones it)
  (-> (I64 Any)
      Natural)
  (let [ones' (n.- (|> it (right_shifted 1) (..and 6148914691236517205) i64)
                   (i64 it))]
    (|> ones'
        (right_shifted 2) (..and 3689348814741910323) (n.+ (..and 3689348814741910323 ones'))
        (with_shift 4) (..and 1085102592571150095)
        (with_shift 8)
        (with_shift 16)
        (with_shift 32)
        (..and 127))))

(the .public (zero index input)
  (for_any (_ of)
    (-> Natural (I64 of)
        (I64 of)))
  (|> index ..bit ..not (..and input)))

(with_template' [<name> <op>]
  [(the .public (<name> index input)
     (for_any (_ of)
       (-> Natural (I64 of)
           (I64 of)))
     (|> index ..bit (<op> input)))]

  [one     ..or]
  [flipped ..xor]
  )

(the .public (one? index input)
  (-> Natural (I64 Any)
      Bit)
  (|> input .i64 (..and (..bit index)) (n.= 0) .not))

(the .public (zero? index input)
  (-> Natural (I64 Any)
      Bit)
  (.not (..one? index input)))

(with_template' [<name> <forward> <backward>]
  [(the .public (<name> distance input)
     (for_any (_ of)
       (-> Natural (I64 of)
           (I64 of)))
     (..or (<forward> distance input)
           (<backward> (n.- (n.% ..width distance) ..width) input)))]

  [left_rotated  ..left_shifted  ..right_shifted]
  [right_rotated ..right_shifted ..left_shifted]
  )

(the .public (region offset size)
  (-> Natural Natural
      Mask)
  (..left_rotated offset (..mask size)))

(the .public equivalence
  (for_any (_ of)
    (Equivalence (I64 of)))
  (implementation
   (the (= expected actual)
     (.i64_=# expected actual))))

(alias [=]
       ..equivalence)

(the .public hash
  (for_any (_ of)
    (Hash (I64 of)))
  (implementation
   (the equivalence ..equivalence)

   (the hash (|>> .natural))))

(with_template' [<monoid> <identity> <composite>]
  [(the .public <monoid>
     (for_any (_ of)
       (Monoid (I64 of)))
     (implementation
      (the identity <identity>)
      (the composite <composite>)))]

  [disjunction ..false ..or]
  [conjunction ..true ..and]
  )

(the .public reversed
  (for_any (_ of)
    (-> (I64 of)
        (I64 of)))
  (let [swapper (is (-> Natural
                        (for_any (_ of)
                          (-> (I64 of)
                              (I64 of))))
                    (function (_ power)
                      (let [size (..left_shifted power 1)
                            repetitions (is (-> Natural Text
                                                Text)
                                            (function (_ times character)
                                              (loop (again [iterations 1
                                                            output character])
                                                (if (n.< times iterations)
                                                  (again (++ iterations)
                                                         (.text_composite# character output))
                                                  output))))
                            pattern (repetitions (n./ (n.+ size size) ..width)
                                                 (.text_composite# (repetitions size "1")
                                                                   (repetitions size "0")))

                            high (try.trusted (by n.binary projection pattern))
                            low (..right_rotated size high)]
                        (function (_ value)
                          (..or (..right_shifted size (..and high value))
                                (..left_shifted size (..and low value)))))))
        
        swap_01 (swapper 0)
        swap_02 (swapper 1)
        swap_04 (swapper 2)
        swap_08 (swapper 3)
        swap_16 (swapper 4)
        swap_32 (swapper 5)]
    (|>> swap_32
         swap_16
         swap_08
         swap_04
         swap_02
         swap_01)))

(every .public (Sub size)
  (Interface
   (is (Equivalence (I64 size))
       sub_equivalence)
   (is Natural
       bits)
   (is (-> I64 (I64 size))
       narrow)
   (is (-> (I64 size) I64)
       wide)))

(the .public invalid_width
  Error
  (provenance.with (provenance.here)
    "Invalid width."))

(the .public (sub width)
  (for_some (_ size)
    (-> Natural
        (Try (Sub size))))
  (if (.and (n.> 0 width)
            (n.< ..width width))
    (let [sign_shift (n.- width ..width)
          sign (..bit (-- width))
          mantissa (..mask (-- width))
          co_mantissa (..xor (.i64 -1) mantissa)]
      {try.#Success
       (is Sub
           (implementation
            (the sub_equivalence ..equivalence)
            (the bits width)
            (the (narrow value)
              (..or (|> value
                        (..and ..sign)
                        (..right_shifted sign_shift))
                    (|> value
                        (..and mantissa))))
            (the (wide value)
              (.i64 (when (.natural (..and sign value))
                      0 value
                      _ (..or co_mantissa value))))))})
    {try.#Failure ..invalid_width}))

(with_template' [<--> <++>]
  [(alias [<-->]
          .--)

   (alias [<++>]
          .++)]

  [decrement increment]
  [less more]
  [previous next]
  [before after]
  )
