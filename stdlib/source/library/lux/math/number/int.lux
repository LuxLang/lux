(.using
 [library
  [lux (.except)
   [abstract
    [hash (.only Hash)]
    [enum (.only Enum)]
    [interval (.only Interval)]
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [codec (.only Codec)]
    [predicate (.only Predicate)]
    ["[0]" order (.only Order)]]
   [control
    ["[0]" maybe]
    ["[0]" try (.only Try)]]
   [data
    [text (.only Char)]]
   [macro
    ["^" pattern]]]]
 ["[0]" //
  ["[1][0]" nat]
  ["[1][0]" i64]])

(template [<name> <op>]
  [(def: .public (<name> param subject)
     (-> Int Int Bit)
     (<op> param subject))]

  [= "lux i64 ="]
  [< "lux i64 <"]
  )

(def: .public (<= reference sample)
  (-> Int Int Bit)
  (if ("lux i64 <" reference sample)
    #1
    ("lux i64 =" reference sample)))

(def: .public (> reference sample)
  (-> Int Int Bit)
  ("lux i64 <" sample reference))

(def: .public (>= reference sample)
  (-> Int Int Bit)
  (if ("lux i64 <" sample reference)
    #1
    ("lux i64 =" reference sample)))

(template [<comparison> <name>]
  [(def: .public <name>
     (Predicate Int)
     (<comparison> +0))]

  [..> positive?]
  [..< negative?]
  [..= zero?]
  )

(template [<name> <test>]
  [(def: .public (<name> left right)
     (-> Int Int Int)
     (if (<test> right left)
       left
       right))]

  [min ..<]
  [max ..>]
  )

(template [<name> <op>]
  [(def: .public (<name> param subject)
     (-> Int Int Int)
     (<op> param subject))]

  [+ "lux i64 +"]
  [- "lux i64 -"]
  [* "lux i64 *"]
  [/ "lux i64 /"]
  [% "lux i64 %"]
  )

(def: .public (/% param subject)
  (-> Int Int [Int Int])
  [(../ param subject)
   (..% param subject)])

(def: .public (opposite it)
  (-> Int Int)
  (..- it +0))

(def: .public (abs it)
  (-> Int Int)
  (if (..< +0 it)
    (..* -1 it)
    it))

(def: .public (signum it)
  (-> Int Int)
  (cond (..= +0 it) +0
        (..< +0 it) -1
        ... else
        +1))

... https://rob.conery.io/2018/08/21/mod-and-remainder-are-not-the-same/
(def: .public (mod divisor dividend)
  (All (_ m) (-> Int Int Int))
  (let [remainder (..% divisor dividend)]
    (if (or (and (..< +0 divisor)
                 (..> +0 remainder))
            (and (..> +0 divisor)
                 (..< +0 remainder)))
      (..+ divisor remainder)
      remainder)))

(def: .public even?
  (-> Int Bit)
  (|>> (..% +2) ("lux i64 =" +0)))

(def: .public odd?
  (-> Int Bit)
  (|>> ..even? not))

... https://en.wikipedia.org/wiki/Greatest_common_divisor
(def: .public (gcd a b)
  (-> Int Int Int)
  (case b
    +0 a
    _ (gcd b (..% b a))))

(def: .public (co_prime? a b)
  (-> Int Int Bit)
  (..= +1 (..gcd a b)))

... https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
(def: .public (extended_gcd a b)
  (-> Int Int [[Int Int] Int])
  (loop (again [x +1 x1 +0
                y +0 y1 +1
                a1 a b1 b])
    (case b1
      +0 [[x y] a1]
      _ (let [q (/ b1 a1)]
          (again x1 (- (* q x1) x)
                 y1 (- (* q y1) y)
                 b1 (- (* q b1) a1))))))

... https://en.wikipedia.org/wiki/Least_common_multiple
(def: .public (lcm a b)
  (-> Int Int Int)
  (case [a b]
    (^.or [_ +0] [+0 _])
    +0

    _
    (|> a (/ (gcd a b)) (* b))))

(def: .public frac
  (-> Int Frac)
  (|>> "lux i64 f64"))

(implementation: .public equivalence
  (Equivalence Int)
  
  (def: = ..=))

(implementation: .public order
  (Order Int)
  
  (def: equivalence ..equivalence)
  (def: < ..<))

(implementation: .public enum
  (Enum Int)
  
  (def: order ..order)
  (def: succ ++)
  (def: pred --))

... TODO: Find out why the numeric literals fail during JS compilation.
(implementation: .public interval
  (Interval Int)
  
  (def: enum ..enum)
  (def: top
    ... +9,223,372,036,854,775,807
    (let [half (//i64.left_shifted 62 +1)]
      (+ half
         (-- half))))
  (def: bottom
    ... -9,223,372,036,854,775,808
    (//i64.left_shifted 63 +1)))

(template [<name> <composite> <identity>]
  [(implementation: .public <name>
     (Monoid Int)
     
     (def: identity <identity>)
     (def: composite <composite>))]

  [addition       ..+   +0]
  [multiplication ..*   +1]
  [maximum        ..max (at ..interval bottom)]
  [minimum        ..min (at ..interval top)]
  )

(def: -sign "-")
(def: +sign "+")

(template [<struct> <codec> <error>]
  [(implementation: .public <struct>
     (Codec Text Int)
     
     (def: (encoded value)
       (if (..< +0 value)
         (|> value ++ ..opposite .nat ++ (at <codec> encoded) ("lux text concat" ..-sign))
         (|> value .nat (at <codec> encoded) ("lux text concat" ..+sign))))

     (def: (decoded repr)
       (let [input_size ("lux text size" repr)]
         (if (//nat.> 1 input_size)
           (case ("lux text clip" 0 1 repr)
             (pattern (static ..+sign))
             (|> repr
                 ("lux text clip" 1 (-- input_size))
                 (at <codec> decoded)
                 (at try.functor each (|>> .int)))
             
             (pattern (static ..-sign))
             (|> repr
                 ("lux text clip" 1 (-- input_size))
                 (at <codec> decoded)
                 (at try.functor each (|>> -- .int ..opposite --)))
             
             _
             {try.#Failure <error>})
           {try.#Failure <error>}))))]

  [binary  //nat.binary  "Invalid binary syntax for Int: "]
  [octal   //nat.octal   "Invalid octal syntax for Int: "]
  [decimal //nat.decimal "Invalid syntax for Int: "]
  [hex     //nat.hex     "Invalid hexadecimal syntax for Int: "]
  )

(implementation: .public hash
  (Hash Int)
  
  (def: equivalence ..equivalence)
  (def: hash (|>> .nat)))

(def: .public (right_shifted parameter subject)
  (-> Nat Int Int)
  (with_expansions [<positive> (//i64.right_shifted parameter subject)]
    (if (< +0 subject)
      (|> +1
          (//i64.left_shifted parameter)
          --
          (//i64.left_shifted (//nat.- parameter //i64.width))
          (//i64.or <positive>))
      <positive>)))
