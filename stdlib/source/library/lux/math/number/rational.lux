... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... [Rational number](https://en.wikipedia.org/wiki/Rational_number)
(.require
 [library
  [lux (.except integer)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]
    [monoid (.only Monoid)]
    [format (.only Format)]
    [monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" function]
    ["[0]" maybe]
    ["[0]" error]
    ["[0]" try (.only Try)]
    [function
     [predicate (.only Predicate)]]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" monoid)]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro
     ["[0]" syntax]
     ["[0]" template]]]]]
 [//
  ["//" integer (.use "[1]#[0]" base_10)]
  ["d" decimal]
  ["[0]" natural (.use "[1]#[0]" base_10)]
  [//
   [arithmetic (.only Arithmetic)]]])

(every .public Rational
  (Record
   [#numerator Integer
    #denominator Natural]))

(the It ..Rational)

(alias [Number]
       ..It)

(the .public not_an_integer
  (error.error "Not an integer."))

(the .public (integer value)
  (-> It
      (Try Integer))
  (when (its #denominator value)
    1 {try.#Success (its #numerator value)}
    _ {try.#Failure ..not_an_integer}))

(the .public (normal it)
  (-> It
      It)
  (let [(open "/[0]") it]
    (when /#denominator
      0 it
      _ (when (//.gcd /#numerator (.integer /#denominator))
          +1 it
          common [..#numerator (//./ common /#numerator)
                  ..#denominator (.natural (//./ common (.integer /#denominator)))]))))

(the .public rational
  (syntax.macro (_ [numerator <code>.any
                    ?denominator (<>.maybe <code>.any)])
    (in (list (` (normal [..#numerator (, numerator)
                          ..#denominator (, (maybe.else (' 1) ?denominator))]))))))

(the .public (= parameter subject)
  (-> It It
      Bit)
  (//.= (//.* (its #numerator parameter)
              (.integer (its #denominator subject)))
        (//.* (.integer (its #denominator parameter))
              (its #numerator subject))))

(the .public equivalence
  (Equivalence It)
  (implementation
   (the = ..=)))

(the (equalized parameter subject)
  (-> It It
      [Integer Integer])
  [(//.* (.integer (its #denominator subject))
         (its #numerator parameter))
   (//.* (.integer (its #denominator parameter))
         (its #numerator subject))])

(the .public (< parameter subject)
  (-> It It
      Bit)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (//.< parameter' subject')))

(the .public (<= parameter subject)
  (-> It It
      Bit)
  (or (< parameter subject)
      (= parameter subject)))

(the .public (> parameter subject)
  (-> It It
      Bit)
  (..< subject parameter))

(the .public (>= parameter subject)
  (-> It It
      Bit)
  (or (> parameter subject)
      (= parameter subject)))

(the .public order
  (Order It)
  (implementation
   (the equivalence ..equivalence)
   (the < ..<)))

(the .public (+ parameter subject)
  (-> It It
      It)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (normal [#numerator (//.+ parameter' subject')
             #denominator (natural.* (its #denominator parameter)
                                     (its #denominator subject))])))

(the .public (- parameter subject)
  (-> It It
      It)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (normal [#numerator (//.- parameter' subject')
             #denominator (natural.* (its #denominator parameter)
                                     (its #denominator subject))])))

(the .public (* parameter subject)
  (-> It It
      It)
  (normal [#numerator (//.* (its #numerator parameter)
                            (its #numerator subject))
           #denominator (natural.* (its #denominator parameter)
                                   (its #denominator subject))]))

(the .public (reciprocal (open "/[0]"))
  (-> It
      It)
  (if (//.< +0 /#numerator)
    ... Negative
    [..#numerator (//.opposite (.integer /#denominator))
     ..#denominator (.natural (//.opposite /#numerator))]
    ... Positive
    [..#numerator (.integer /#denominator)
     ..#denominator (.natural /#numerator)]))

(the .public (/ parameter subject)
  (-> It It
      It)
  (* (..reciprocal parameter) subject))

(the .public (% parameter subject)
  (-> It It
      It)
  (let [[parameter' subject'] (..equalized parameter subject)
        quot (//./ parameter' subject')]
    (..- (revised #numerator (//.* quot) parameter)
         subject)))

(the .public arithmetic
  (Arithmetic It)
  (implementation
   (the + ..+)
   (the - ..-)
   (the * ..*)
   (the / ../)))

(the separator "/")

(the .public (as_text (open "/[0]"))
  (text.Injection It)
  (all text#composite
       (//#injection /#numerator)
       ..separator
       (natural#injection /#denominator)))

(the .public format
  (Format Text It)
  (implementation
   (the injection ..as_text)

   (the (projection input)
     (when (text.split_by ..separator input)
       {.#Some [num denom]}
       (do try.monad
         [numerator (//#projection num)
          denominator (natural#projection denom)]
         (in (normal [#numerator numerator
                      #denominator denominator])))
       
       {.#None}
       {try.#Failure (text#composite "Invalid syntax for rational: " input)}))))

(template.with [<identity> <composite> <name>]
  [(the .public <name>
     (Monoid It)
     (implementation
      (the identity (..rational <identity>))
      (the composite <composite>)))]
  
  [+0 ..+ addition]
  [+1 ..* multiplication]
  )

(template.with [,numerator ,name]
  [(the .public ,name
     It
     (..rational ,numerator))]

  [+0 zero]
  [+1 one]
  [-1 negative]
  )

(alias [positive]
       ..one)

(template.with [,order ,name]
  [(the .public ,name
     (Predicate It)
     (,order ..zero))]

  [< negative?]
  [> positive?]
  )

(the .public (opposite it)
  (-> It
      It)
  (..- it ..zero))

(the .public (absolute it)
  (-> It
      It)
  (if (..< ..zero it)
    (..opposite it)
    it))

(alias [abs]
       ..absolute)

(template.with [<numerator> <fraction>]
  [(the .public <fraction>
     It
     [#numerator <numerator>
      #denominator 0])]

  [+1 infinity]
  ... https://en.wikipedia.org/wiki/Indeterminate_form
  [+0 indeterminate]
  )

(the .public finite?
  (Predicate It)
  (|>> (= ..infinity)
       not))

(the .public (determinate? it)
  (Predicate It)
  (not (and (//.= (its #numerator indeterminate)
                  (its #numerator it))
            (natural.= (its #denominator indeterminate)
                       (its #denominator it)))))

(template.with [,/% ,name ,reference]
  [(the .public (,name (open "/[0]"))
     (-> It
         It)
     (..rational (,/% (.integer /#denominator)
                      /#numerator)
                 ,reference))]

  [//./ whole 1]
  [//.% partial /#denominator]
  )

... https://en.wikipedia.org/wiki/Number#Classification
(alias [Q]
       ..It)

(the .public (decimal it)
  (-> It
      Decimal)
  (d./ (natural.decimal (its #denominator it))
       (//.decimal (its #numerator it))))
