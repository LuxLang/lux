... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... [Rational number](https://en.wikipedia.org/wiki/Rational_number)
(.require
 [library
  [lux (.except integer)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]
    [monoid (.only Monoid)]
    [format (.only Format)]
    [monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" function]
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    [function
     [predicate (.only Predicate)]]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" monoid)]]
   [meta
    ["[0]" location]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro
     ["[0]" syntax]
     ["[0]" template]]]]]
 [//
  ["i" integer (.use "[1]#[0]" base_10)]
  [//
   [arithmetic (.only Arithmetic)]]])

(every .public Rational
  (Record
   [#numerator Integer
    #denominator Integer]))

(the .public Number
  ..Rational)

(the .public not_an_integer
  Error
  (location.with (location.here)
    "Not an integer."))

(the .public (integer value)
  (-> Rational
      (Try Integer))
  (when (its #denominator value)
    +1 {try.#Success (its #numerator value)}
    _ {try.#Failure ..not_an_integer}))

(the .public (normal (open "/[0]"))
  (-> Rational
      Rational)
  (let [common (i.gcd /#numerator /#denominator)]
    [..#numerator (i./ common /#numerator)
     ..#denominator (i./ common /#denominator)]))

(the .public rational
  (syntax.macro (_ [numerator <code>.any
                    ?denominator (<>.maybe <code>.any)])
    (in (list (` (normal [..#numerator (, numerator)
                          ..#denominator (, (maybe.else (' +1) ?denominator))]))))))

(the .public (= parameter subject)
  (-> Rational Rational
      Bit)
  (i.= (i.* (its #numerator parameter)
            (its #denominator subject))
       (i.* (its #denominator parameter)
            (its #numerator subject))))

(the .public equivalence
  (Equivalence Rational)
  (implementation
   (the = ..=)))

(the (equalized parameter subject)
  (-> Rational Rational
      [Integer Integer])
  [(i.* (its #denominator subject)
        (its #numerator parameter))
   (i.* (its #denominator parameter)
        (its #numerator subject))])

(the .public (< parameter subject)
  (-> Rational Rational
      Bit)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (i.< parameter' subject')))

(the .public (<= parameter subject)
  (-> Rational Rational
      Bit)
  (or (< parameter subject)
      (= parameter subject)))

(the .public (> parameter subject)
  (-> Rational Rational
      Bit)
  (..< subject parameter))

(the .public (>= parameter subject)
  (-> Rational Rational
      Bit)
  (or (> parameter subject)
      (= parameter subject)))

(the .public order
  (Order Rational)
  (implementation
   (the equivalence ..equivalence)
   (the < ..<)))

(the .public (+ parameter subject)
  (-> Rational Rational
      Rational)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (normal [(i.+ parameter' subject')
             (i.* (its #denominator parameter)
                  (its #denominator subject))])))

(the .public (- parameter subject)
  (-> Rational Rational
      Rational)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (normal [(i.- parameter' subject')
             (i.* (its #denominator parameter)
                  (its #denominator subject))])))

(the .public (* parameter subject)
  (-> Rational Rational
      Rational)
  (normal [(i.* (its #numerator parameter)
                (its #numerator subject))
           (i.* (its #denominator parameter)
                (its #denominator subject))]))

(the .public (/ parameter subject)
  (-> Rational Rational
      Rational)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (normal [subject' parameter'])))

(the .public (% parameter subject)
  (-> Rational Rational
      Rational)
  (let [[parameter' subject'] (..equalized parameter subject)
        quot (i./ parameter' subject')]
    (..- (revised #numerator (i.* quot) parameter)
         subject)))

(the .public arithmetic
  (Arithmetic Rational)
  (implementation
   (the + ..+)
   (the - ..-)
   (the * ..*)
   (the / ../)))

(the .public (reciprocal (open "/[0]"))
  (-> Rational
      Rational)
  [..#numerator /#denominator
   ..#denominator /#numerator])

(the separator "/")

(the .public format
  (Format Text Rational)
  (implementation
   (the (injection (open "/[0]"))
     (all text#composite
          (i#injection /#numerator)
          ..separator (i#injection /#denominator)))

   (the (projection input)
     (when (text.split_by ..separator input)
       {.#Some [num denom]}
       (do try.monad
         [numerator (i#projection num)
          denominator (i#projection denom)]
         (in (normal [#numerator numerator
                      #denominator denominator])))
       
       {.#None}
       {.#Left (text#composite "Invalid syntax for rational: " input)}))))

(template.with [<identity> <composite> <name>]
  [(the .public <name>
     (Monoid Rational)
     (implementation
      (the identity (..rational <identity>))
      (the composite <composite>)))]
  
  [+0 ..+ addition]
  [+1 ..* multiplication]
  )

(the .public zero
  Rational
  [#numerator +0
   #denominator +1])

(the .public one
  Rational
  [#numerator +1
   #denominator +1])

(the .public negative
  Rational
  [#numerator -1
   #denominator +1])

(template.with [<numerator> <predicate> ,name]
  [(the .public ,name
     Rational
     [#numerator <numerator>
      #denominator +0])

   (the .public <predicate>
     (Predicate Rational)
     (|>> (= ,name)
          not))]

  [+1 finite? infinity]
  ... https://en.wikipedia.org/wiki/Indeterminate_form
  [+0 determinate? indeterminate]
  )

(template.with [,/% ,name]
  [(the .public (,name it)
     (-> Rational
         Rational)
     (..rational (,/% (its #denominator it)
                      (its #numerator it))
                 (its #denominator it)))]

  [i./ whole]
  [i.% partial]
  )

... https://en.wikipedia.org/wiki/Number#Classification
(alias [Q]
       ..Rational)
