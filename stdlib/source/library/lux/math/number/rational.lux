... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text integer)
   [abstract
    ["<>" projection]
    ["[0]" equivalence]
    ["[0]" order]
    ["[0]" monoid]
    ["[0]" format]
    ["[0]" monad]]
   [control
    ["[0]" maybe]]
   ["[0]" error (.only)
    ["[0]" try]]
   [function
    ["[0]" predicate]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list
      ["?[1]" \\projection]]]]
   [macro
    ["[0]" syntax]
    ["[0]" template]
    ["[0]" expansion]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]]
 [//
  ["d" decimal]
  ["[0]" natural]
  ["[0]" integer]
  ["[0]" fraction]
  [//
   ["[0]" arithmetic]
   ["[0]" unit]]])

(the .public extension
  "rational#")

(expansion.let [,*variables (these ,#numerator ,#denominator

                                   ,n#zero ,n#one
                                   ,n#=
                                   ,n#x
                                   ,n#integer
                                   ,n#base_10

                                   ,i#zero ,i#positive_one ,i#negative_one
                                   ,i#= ,i#<
                                   ,i#+ ,i#- ,i#x ,i#/ ,i#%
                                   ,i#opposite ,i#signum ,i#greatest_common_divisor
                                   ,i#natural ,i#small
                                   ,i#base_10

                                   ,fraction#delimiter)]
  (these (the types_of_module
           (template.macro (_ ,*variables)
             [... [Rational number](https://en.wikipedia.org/wiki/Rational_number)
              (every .public Number
                (Record
                 [#numerator ,#numerator
                  #denominator ,#denominator]))

              ... https://en.wikipedia.org/wiki/Number#Classification
              (alias [Rational Q]
                     Number)
              ]))

         (the values_of_module
           (template.macro (_ ,*variables)
             [(the .public not_an_integer
                (error.error "Not an integer."))

              (the .public (integer it)
                (-> Number
                    (try.Try ,#numerator))
                (if (,n#= ,n#one (its #denominator it))
                    {try.#Success (its #numerator it)}
                    {try.#Failure not_an_integer}))

              (the .public (normal it)
                (Change Number)
                (let [(open "/[0]") it]
                  (if (,n#= ,n#zero /#denominator)
                      it
                      (let [common (,i#greatest_common_divisor /#numerator (,i#natural /#denominator))]
                        (if (,i#= ,i#positive_one common)
                            it
                            [#numerator (,i#/ common /#numerator)
                             #denominator (,n#integer (,i#/ common (,i#natural /#denominator)))])))))

              (template.with [,numerator ,name]
                [(the .public ,name
                   Number
                   [#numerator ,numerator
                    #denominator ,n#one])]

                [,i#zero zero]
                [,i#positive_one positive_one]
                [,i#negative_one negative_one]
                )

              (template.with [<numerator> ,name]
                [(the .public ,name
                   Number
                   [#numerator <numerator>
                    #denominator ,n#zero])]

                [,i#positive_one infinity]
                ... https://en.wikipedia.org/wiki/Indeterminate_form
                [,i#zero indeterminate]
                )
              ]))

         (the order_of_module
           (template.macro (_ ,*variables)
             [(the .public (= parameter subject)
                (-> Number Number
                    Bit)
                (,i#= (,i#x (its #numerator parameter)
                            (,i#natural (its #denominator subject)))
                      (,i#x (,i#natural (its #denominator parameter))
                            (its #numerator subject))))

              (the .public equivalence
                (equivalence.Equivalence Number)
                (implementation
                 (the = =)))

              (the (equal parameter subject)
                (-> Number Number
                    [,#numerator ,#numerator])
                [(,i#x (,i#natural (its #denominator subject))
                       (its #numerator parameter))
                 (,i#x (,i#natural (its #denominator parameter))
                       (its #numerator subject))])

              (the .public (< parameter subject)
                (-> Number Number
                    Bit)
                (let [[parameter subject] (equal parameter subject)]
                  (,i#< parameter subject)))

              (the .public (> parameter subject)
                (-> Number Number
                    Bit)
                (< subject parameter))

              (template.with [,<>= ,<>]
                [(the .public (,<>= parameter subject)
                   (-> Number Number
                       Bit)
                   (or (,<> parameter subject)
                       (= parameter subject)))]

                [<= <]
                [>= >]
                )

              (the .public order
                (order.Order Number)
                (implementation
                 (the equivalence equivalence)
                 (the < <)))

              (template.with [,name <test>]
                [(the .public (,name left right)
                   (-> Number Number
                       Number)
                   (if (<test> right left)
                       left
                       right))]

                [minor <]
                [major >]
                )
              ]))

         (the arithmetic_of_module_1/2
           (template.macro (_ ,*variables)
             [(the .public (+ parameter subject)
                (-> Number Number
                    Number)
                (normal [#numerator (let [[parameter subject] (equal parameter subject)]
                                      (,i#+ parameter subject))
                         #denominator (,n#x (its #denominator parameter)
                                            (its #denominator subject))]))

              (the .public (- parameter subject)
                (-> Number Number
                    Number)
                (normal [#numerator (let [[parameter subject] (equal parameter subject)]
                                      (,i#- parameter subject))
                         #denominator (,n#x (its #denominator parameter)
                                            (its #denominator subject))]))

              (the .public (x parameter subject)
                (-> Number Number
                    Number)
                (normal [#numerator (,i#x (its #numerator parameter)
                                          (its #numerator subject))
                         #denominator (,n#x (its #denominator parameter)
                                            (its #denominator subject))]))

              (the .public (reciprocal (open "/[0]"))
                (Change Number)
                (if (,i#< ,i#zero /#numerator)
                    ... Negative
                    [#numerator (,i#opposite (,i#natural /#denominator))
                     #denominator (,n#integer (,i#opposite /#numerator))]
                    ... Positive
                    [#numerator (,i#natural /#denominator)
                     #denominator (,n#integer /#numerator)]))

              (the .public (/ parameter subject)
                (-> Number Number
                    Number)
                (x (reciprocal parameter) subject))

              (the .public (% parameter subject)
                (-> Number Number
                    Number)
                (let [quot (let [[parameter subject] (equal parameter subject)]
                             (,i#/ parameter subject))]
                  (- (revised #numerator (,i#x quot) parameter)
                     subject)))

              (the .public arithmetic
                (arithmetic.Arithmetic Number)
                (implementation
                 (the + +)
                 (the - -)
                 (the x x)
                 (the / /)))
              ]))

         (the arithmetic_of_module_2/2
           (template.macro (_ ,*variables)
             [(every .public Exponent
                Integer)

              ... https://en.wikipedia.org/wiki/Exponentiation
              ... https://en.wikipedia.org/wiki/Exponentiation_by_squaring
              (the .public (^ power base)
                (-> Exponent Number
                    Number)
                (if (.int_<# +0 power)
                    (reciprocal (^ (integer.opposite power)
                                   base))
                    (loop (^ [power power
                              base base
                              it positive_one])
                      (if (.i64_=# +0 power)
                          it
                          (^ (.i64_right# 1 power)
                             (x base base)
                             (if (.i64_=# +1 (.i64_and# +1 power))
                                 (x base it)
                                 it))))))

              (the .public (opposite it)
                (Change Number)
                (- it zero))

              (the .public (absolute it)
                (Change Number)
                (if (< zero it)
                    (opposite it)
                    it))

              (the .public signum
                (Change Number)
                (|>> (its #numerator)
                     ,i#signum
                     [#denominator ,n#one
                      #numerator]))

              (template.with [,composite ,identity ,name]
                [(the .public ,name
                   (monoid.Monoid Number)
                   (implementation
                    (the identity [#numerator ,identity #denominator ,n#one])
                    (the composite ,composite)))]
                
                [+ ,i#zero addition]
                [x ,i#positive_one multiplication]
                )
              ]))

         (the arithmetic_of_module
           (template.macro (_ ,*variables)
             [(..arithmetic_of_module_1/2 ,*variables)
              (..arithmetic_of_module_2/2 ,*variables)]))

         (the properties_of_module
           (template.macro (_ ,*variables)
             [(template.with [,order ,name]
                [(the .public ,name
                   (predicate.Predicate Number)
                   (,order zero))]

                [= neutral?]
                [< negative?]
                [> positive?]
                )

              (the .public finite?
                (predicate.Predicate Number)
                (|>> (= infinity)
                     not))

              (the .public (determinate? it)
                (predicate.Predicate Number)
                (not (and (,i#= (its #numerator indeterminate)
                                (its #numerator it))
                          (,n#= (its #denominator indeterminate)
                                (its #denominator it)))))

              (template.with [,/% ,name ,reference]
                [(the .public (,name (open "/[0]"))
                   (Change Number)
                   [#numerator (,/% (,i#natural /#denominator)
                                    /#numerator)
                    #denominator ,reference])]

                [,i#/ whole ,n#one]
                [,i#% partial /#denominator]
                )
              ]))

         (the formats_of_module
           (template.macro (_ ,*variables)
             [... https://en.wikipedia.org/wiki/Delimiter
              (the .public delimiter
                ,fraction#delimiter)

              (the .public text
                (format.Format Text Number)
                (implementation
                 (the (as (open "/[0]"))
                   (.text (by ,i#base_10 as /#numerator)
                          ,fraction#delimiter
                          (by ,n#base_10 as /#denominator)))

                 (the (of input)
                   (when (text.split_by ,fraction#delimiter input)
                     {.#Some [num denom]}
                     (monad.do try.monad
                       [numerator (by ,i#base_10 of num)
                        denominator (by ,n#base_10 of denom)]
                       (pure (normal [#numerator numerator
                                      #denominator denominator])))
                     
                     {.#None}
                     {try.#Failure (.text "Invalid syntax for rational: " input)}))))

              (template.with [<format> <as> <of> ,unit]
                [(expansion.let [,exchange_rate (these [#numerator (,i#small (.integer (its unit.#factor ,unit)))
                                                        #denominator ,n#one])]
                   (these (the .public <as>
                            (Change Number)
                            (x ,exchange_rate))
                          
                          (the .public <of>
                            (Change Number)
                            (/ ,exchange_rate))
                          
                          (the .public <format>
                            (format.Format Text Number)
                            (let [suffix (its unit.#suffix ,unit)]
                              (implementation
                               (the as
                                 (|>> <as>
                                      whole
                                      integer
                                      (try.else ,i#zero)
                                      (by ,i#base_10 as)
                                      (text.suffix suffix)))

                               (the (of it)
                                 (when (text.split_by suffix it)
                                   {.#Some [it ""]}
                                   (|> it
                                       (by ,i#base_10 of)
                                       (by try.functor each (|>> [#denominator ,n#one
                                                                  #numerator]
                                                                 <of>)))
                                   
                                   _
                                   {try.#Failure format.not_valid})))))))]

                [degree as_degree of_degree unit.degree]
                [gradian as_gradian of_gradian unit.gradian]
                [per_cent as_per_cent of_per_cent unit.per_cent]
                [per_mille as_per_mille of_per_mille unit.per_mille]
                [per_myriad as_per_myriad of_per_myriad unit.per_myriad]
                )
              ]))

         (the .public module
           (template.macro (_ ,*variables)
             [(..types_of_module ,*variables)
              (..values_of_module ,*variables)
              (..order_of_module ,*variables)
              (..arithmetic_of_module ,*variables)
              (..properties_of_module ,*variables)
              (..formats_of_module ,*variables)

              (the .public (approximately margin_of_error)
                (-> Number
                    (equivalence.Equivalence Number))
                (implementation
                 (the (= standard value)
                   (|> value
                       (- standard)
                       absolute
                       (< margin_of_error)))))
              ]))))

(..module ..Integer ..Natural
          
          natural.zero natural.one
          natural.=
          natural.x
          .natural
          natural.base_10

          integer.zero integer.positive_one integer.negative_one
          integer.= integer.<
          integer.+ integer.- integer.x integer./ integer.%
          integer.opposite integer.signum integer.greatest_common_divisor
          .integer <|
          integer.base_10

          fraction.delimiter)

(the .public new
  (syntax.macro (_ [numerator ?list.any
                    ?denominator (<>.maybe ?list.any)])
    (pure (list (` (normal [#numerator (, numerator)
                            #denominator (, (maybe.else (` natural.one) ?denominator))]))))))

(the .public smallest
  Number
  (new +1 (by natural.interval maximum)))

(the .public most_positive
  Number
  (new (by integer.interval maximum)))

(the .public most_negative
  Number
  (new (by integer.interval minimum)))

(template.with [,identity ,composite ,name]
  [(the .public ,name
     (monoid.Monoid Number)
     (implementation
      (the identity ,identity)
      (the composite ,composite)))]
  
  [most_positive minor minimum]
  [most_negative major maximum]
  )

(the .public (decimal it)
  (-> Number
      Decimal)
  (d./ (natural.decimal (its #denominator it))
       (integer.decimal (its #numerator it))))
