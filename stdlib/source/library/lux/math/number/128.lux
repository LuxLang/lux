... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except macro)]]
 [//
  ["[0]" /64 (.only)
   ["half" natural]]])

(the macro (.in_module# .prelude template#macro))
(the with_expansions (.in_module# .prelude expansion#let))

(the Half
  Natural)

(every .public Number
  (Record
   [#top Half
    #bottom Half]))

(the top_bit
  (-- /64.width))

(the can_overflow?
  (macro (_ ,it)
    [(/64.one? ..top_bit ,it)]))

(the .public (+ origin it)
  (-> Half Half
      Number)
  (let [origin_can_overflow? (can_overflow? origin)
        it_can_overflow? (can_overflow? it)
        low (half.+ origin it)]
    [#top (if (and origin_can_overflow?
                   it_can_overflow?)
              1

              (or origin_can_overflow?
                  it_can_overflow?)
              (if (can_overflow? low)
                  0
                  1)

              ... else
              0)
     #bottom low]))

(with_expansions [,middle (these 32)]
  (these (the mask
           (/64.mask ,middle))

         (the digit_1/2
           (macro (_ ,it)
             [(/64.and ..mask ,it)]))

         (the digit_2/2
           (macro (_ ,it)
             [(/64.>> ,middle ,it)]))

         (the halves
           (macro (_ ,2/2 ,1/2 ,it)
             ['temporary ,it
              ,2/2 (..digit_2/2 'temporary)
              ,1/2 (..digit_1/2 'temporary)]))

         (the up_1/2
           (macro (_ ,it)
             [(/64.<< ,middle ,it)]))))

(the .public (x scale it)
  (-> Half Half
      Number)
  (`` (let [(,, (halves scale_1/2 scale_2/2 scale))
            (,, (halves it_1/2 it_2/2 it))
            (,, (halves remainder digit_11 (half.x scale_2/2 it_2/2)))
            (,, (halves digit_21 remainder (half.+ (half.x scale_1/2 it_2/2) remainder)))

            top_1/2 (half.+ (half.x scale_2/2 it_1/2) remainder)
            remainder (digit_2/2 top_1/2)]
        [#top (all half.+ (half.x scale_1/2 it_1/2) digit_21 remainder)
         #bottom (half.+ (up_1/2 top_1/2) digit_11)])))
