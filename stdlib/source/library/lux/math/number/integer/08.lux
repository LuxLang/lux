... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Integer as for)
   [abstract
    ["[0]" equivalence]
    ["[0]" hash]
    ["[0]" order]]
   [data
    ["[0]" binary
     ["[1]" \\injection]]]
   [math
    ["[0]" random]]
   [type
    ["[0]" nominal]]
   [macro
    ["[0]" template]]]]
 ["[0]" // (.only)
  [//
   ["[0]" natural]
   ["[0]" i64]]])

(the .public for
  (template.macro (_ ,size ,injection)
    [(nominal.every .public Integer
       .Integer

       (alias [Number]
              Integer)

       (the .public as
         (-> Integer
             .Integer)
         (|>> nominal.representation))

       (the .public hash
         (hash.Hash Integer)
         (by hash.functor each as //.hash))

       (the .public order
         (order.Order Integer)
         (by order.functor each as //.order))

       (order.for [] Integer order)

       (the .public equivalence
         (equivalence.Equivalence Integer)
         (by order equivalence))

       (alias [=]
              equivalence)

       (the .public size ,size)

       (the .public maximum
         Integer
         (|> size
             (natural.* i64.bits_per_byte)
             i64.mask
             .integer
             nominal.abstraction))

       (the .public minimum
         Integer
         (|> maximum
             nominal.representation
             i64.not
             nominal.abstraction))

       (the (small it)
         (-> .Integer
             .Integer)
         (if (//.< +0 it)
           (i64.or (nominal.representation minimum) it)
           (i64.and (nominal.representation maximum) it)))

       (the .public of
         (-> .Integer
             Integer)
         (|>> small
              nominal.abstraction))

       (the .public (+ parameter it)
         (-> Integer Integer
             Integer)
         (|> (//.+ (nominal.representation parameter)
                   (nominal.representation it))
             small
             nominal.abstraction))

       (the .public (- parameter it)
         (-> Integer Integer
             Integer)
         (|> (//.- (nominal.representation parameter)
                   (nominal.representation it))
             small
             nominal.abstraction))

       (the .public as_binary
         (binary.Injection Integer)
         (|>> nominal.representation
              ,injection))

       (the .public random
         (random.Random Integer)
         (by random.functor each of random.integer))
       )]))

(..for 1
       binary.bits_08)
