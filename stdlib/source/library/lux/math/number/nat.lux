... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [hash (.only Hash)]
    [enum (.only Enum)]
    [interval (.only Interval)]
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [codec (.only Codec)]
    ["[0]" order (.only Order)]]
   [control
    ["[0]" function]
    ["[0]" maybe]
    ["[0]" try (.only Try)]]]]
 [///
  [arithmetic (.only Arithmetic)]])

(with_template [<extension> <output> <name>]
  [(the .public (<name> parameter subject)
     (-> Nat Nat
         <output>)
     (<extension> parameter subject))]

  [.i64_=# Bit =]
  [.i64_+# Nat +]
  [.i64_-# Nat -]
  )

(the high
  (-> (I64 Any)
      I64)
  (|>> (.i64_right# 32)))

(the low
  (-> (I64 Any)
      I64)
  (let [mask (|> 1 (.i64_left# 32) (.i64_-# 1))]
    (|>> (.i64_and# mask))))

(the .public (< reference sample)
  (-> Nat Nat
      Bit)
  (let [referenceH (..high reference)
        sampleH (..high sample)]
    (if (.int_<# referenceH sampleH)
      true
      (if (.i64_=# referenceH sampleH)
        (.int_<#
         (..low reference)
         (..low sample))
        false))))

(the .public (<= reference sample)
  (-> Nat Nat
      Bit)
  (or (..< reference sample)
      (.i64_=# reference sample)))

(the .public (> reference sample)
  (-> Nat Nat
      Bit)
  (..< sample reference))

(the .public (>= reference sample)
  (-> Nat Nat
      Bit)
  (or (..< sample reference)
      (.i64_=# reference sample)))

(with_template [<name> <test>]
  [(the .public (<name> left right)
     (-> Nat Nat
         Nat)
     (if (<test> right left)
       left
       right))]

  [min ..<]
  [max ..>]
  )

(the .public (* parameter subject)
  (-> Nat Nat
      Nat)
  (.nat (.int_*# (.int parameter)
                 (.int subject))))

(the .public (/ parameter subject)
  (-> Nat Nat
      Nat)
  (if (.int_<# +0 (.int parameter))
    (if (..< parameter subject)
      0
      1)
    (let [quotient (|> subject
                       (.i64_right# 1)
                       (.int_/# (.int parameter))
                       (.i64_left# 1))
          flat (.int_*# (.int parameter)
                        (.int quotient))
          remainder (.i64_-# flat subject)]
      (if (..< parameter remainder)
        quotient
        (.i64_+# 1 quotient)))))

(the .public (/% parameter subject)
  (-> Nat Nat
      [Nat Nat])
  (let [quotient (../ parameter subject)
        flat (.int_*# (.int parameter)
                      (.int quotient))]
    [quotient (.i64_-# flat subject)]))

(the .public (% parameter subject)
  (-> Nat Nat
      Nat)
  (let [flat (.int_*# (.int parameter)
                      (.int (../ parameter subject)))]
    (.i64_-# flat subject)))

(the .public arithmetic
  (Arithmetic Nat)
  (implementation
   (the + ..+)
   (the - ..-)
   (the * ..*)
   (the / ../)))

(the .public (gcd a b)
  (-> Nat Nat
      Nat)
  (when b
    0 a
    _ (gcd b (..% b a))))

(the .public (co_prime? a b)
  (-> Nat Nat
      Bit)
  (..= 1 (..gcd a b)))

(`` (the .public (lcm a b)
      (-> Nat Nat
          Nat)
      (when [a b]
        (,, (with_template [<pattern>]
              [<pattern>
               0]

              [[_ 0]]
              [[0 _]]))

        _
        (|> a (../ (..gcd a b)) (..* b)))))

(the .public even?
  (-> Nat
      Bit)
  (|>> (..% 2) (.i64_=# 0)))

(the .public odd?
  (-> Nat
      Bit)
  (|>> ..even? not))

(the .public frac
  (-> Nat
      Frac)
  (|>> .int .int_f64#))

(the .public equivalence
  (Equivalence Nat)
  (implementation
   (the = ..=)))

(the .public order
  (Order Nat)
  (implementation
   (the equivalence ..equivalence)
   (the < ..<)))

(the .public enum
  (Enum Nat)
  (implementation
   (the order ..order)
   (the succ ++)
   (the pred --)))

(the .public interval
  (Interval Nat)
  (implementation
   (the enum ..enum)
   (the top (-- 0))
   (the bottom 0)))

(with_template [<name> <composite> <identity>]
  [(the .public <name>
     (Monoid Nat)
     (implementation
      (the identity <identity>)
      (the composite <composite>)))]

  [addition       ..+   0]
  [multiplication ..*   1]
  [minimum        ..min (of ..interval top)]
  [maximum        ..max (of ..interval bottom)]
  )

(the (binary_character value)
  (-> Nat
      Text)
  (when value
    0 "0"
    1 "1"
    _ (undefined)))

(the (binary_value digit)
  (-> Nat
      (Maybe Nat))
  (when digit
    (char "0") {.#Some 0}
    (char "1") {.#Some 1}
    _ {.#None}))

(the (octal_character value)
  (-> Nat
      Text)
  (when value
    0 "0"
    1 "1"
    2 "2"
    3 "3"
    4 "4"
    5 "5"
    6 "6"
    7 "7"
    _ (undefined)))

(the (octal_value digit)
  (-> Nat
      (Maybe Nat))
  (when digit
    (char "0") {.#Some 0}
    (char "1") {.#Some 1}
    (char "2") {.#Some 2}
    (char "3") {.#Some 3}
    (char "4") {.#Some 4}
    (char "5") {.#Some 5}
    (char "6") {.#Some 6}
    (char "7") {.#Some 7}
    _ {.#None}))

(the (decimal_character value)
  (-> Nat
      Text)
  (when value
    0 "0"
    1 "1"
    2 "2"
    3 "3"
    4 "4"
    5 "5"
    6 "6"
    7 "7"
    8 "8"
    9 "9"
    _ (undefined)))

(the (decimal_value digit)
  (-> Nat
      (Maybe Nat))
  (when digit
    (char "0") {.#Some 0}
    (char "1") {.#Some 1}
    (char "2") {.#Some 2}
    (char "3") {.#Some 3}
    (char "4") {.#Some 4}
    (char "5") {.#Some 5}
    (char "6") {.#Some 6}
    (char "7") {.#Some 7}
    (char "8") {.#Some 8}
    (char "9") {.#Some 9}
    _ {.#None}))

(the (hexadecimal_character value)
  (-> Nat
      Text)
  (when value
    0 "0"
    1 "1"
    2 "2"
    3 "3"
    4 "4"
    5 "5"
    6 "6"
    7 "7"
    8 "8"
    9 "9"
    10 "A"
    11 "B"
    12 "C"
    13 "D"
    14 "E"
    15 "F"
    _ (undefined)))

(`` (the (hexadecimal_value digit)
      (-> Nat
          (Maybe Nat))
      (when digit
        (,, (with_template [<character> <number>]
              [(char <character>)
               {.#Some <number>}]

              ["0" 0] ["1" 1] ["2" 2] ["3" 3] ["4" 4]
              ["5" 5] ["6" 6] ["7" 7] ["8" 8] ["9" 9]))

        (,, (with_template [<lower> <upper> <number>]
              [(char <lower>)
               {.#Some <number>}
               
               (char <upper>)
               {.#Some <number>}]

              ["a" "A" 10] ["b" "B" 11] ["c" "C" 12]
              ["d" "D" 13] ["e" "E" 14] ["f" "F" 15]))
        
        _
        {.#None})))

(with_template [<shift> <struct> <to_character> <to_value> <error>]
  [(the .public <struct>
     (Codec Text Nat)
     (implementation
      (the encoded
        (let [mask (|> 1 (.i64_left# <shift>) --)]
          (function (_ value)
            (loop (again [input value
                          output ""])
              (let [output' (.text_composite# (<to_character> (.i64_and# mask input))
                                              output)]
                (when (is Nat (.i64_right# <shift> input))
                  0
                  output'

                  input'
                  (again input' output')))))))

      (the (decoded repr)
        (let [input_size (.text_size# repr)]
          (if (..> 0 input_size)
            (loop (again [idx 0
                          output 0])
              (if (..< input_size idx)
                (when (<to_value> (.text_char# idx repr))
                  {.#Some digit_value}
                  (again (++ idx)
                         (|> output
                             (.i64_left# <shift>)
                             (.i64_or# digit_value)))

                  _
                  {try.#Failure (.text_composite# <error> repr)})
                {try.#Success output}))
            {try.#Failure (.text_composite# <error> repr)})))))]

  [1 binary binary_character      binary_value      "Invalid binary syntax for Nat: "]
  [3 octal  octal_character       octal_value       "Invalid octal syntax for Nat: "]
  [4 hex    hexadecimal_character hexadecimal_value "Invalid hexadecimal syntax for Nat: "]
  )

(the .public decimal
  (Codec Text Nat)
  (implementation
   (the (encoded value)
     (loop (again [input value
                   output ""])
       (let [digit (decimal_character (..% 10 input))
             output' (.text_composite# digit output)]
         (when (../ 10 input)
           0
           output'

           input'
           (again input' output')))))

   (the (decoded repr)
     (let [input_size (.text_size# repr)]
       (with_expansions [<failure> {try.#Failure (.text_composite# "Invalid decimal syntax for Nat: " repr)}]
         (if (..> 0 input_size)
           (loop (again [idx 0
                         output 0])
             (if (..< input_size idx)
               (when (decimal_value (.text_char# idx repr))
                 {.#None}
                 <failure>

                 {.#Some digit_value}
                 (again (++ idx)
                        (|> output (..* 10) (..+ digit_value))))
               {try.#Success output}))
           <failure>))))))

(the .public hash
  (Hash Nat)
  (implementation
   (the equivalence ..equivalence)
   (the hash function.identity)))

(the .public (padded expected_size codec)
  (-> Nat (Codec Text Nat)
      (Codec Text Nat))
  (implementation
   (the (encoded it)
     (loop (next [it (of codec encoded it)])
       (if (< expected_size (.text_size# it))
         (next (.text_composite# "0" it))
         it)))

   (the decoded
     (of codec decoded))))

(alias [base_02] ..binary)
(alias [base_08] ..octal)
(alias [base_10] ..decimal)
(alias [base_16] ..hex)
