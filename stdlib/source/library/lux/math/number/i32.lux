(.require
 [library
  [lux (.except i64)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["?" parser]
    ["[0]" maybe]
    ["[0]" try]]
   [meta
    ["[0]" static]
    ["[0]" type (.only)
     ["?[1]" \\parser]]
    [compiler
     ["@" target]]]]]
 [//
  ["[0]" i64]])

(def sub
  (maybe.trusted (i64.sub 32)))

(for @.old
     (def .public I32
       Type
       (when (type_of ..sub)
         {.#Apply :size: :sub:}
         (type_literal (I64 :size:))

         _
         (undefined)))

     (`` (type .public I32
           (I64 (,, (|> (type_of ..sub)
                        (?type.result (?type.applied (?.after (?type.exactly i64.Sub)
                                                              ?type.any)))
                        try.trusted
                        (static.literal type.code))))))
     )

(def .public equivalence (Equivalence I32) (of ..sub sub_equivalence))
(def .public width Nat (of ..sub bits))
(def .public i32 (-> I64 I32) (of ..sub narrow))
(def .public i64 (-> I32 I64) (of ..sub wide))
