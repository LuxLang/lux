(.using
 [library
  [lux {"-" i64}
   [type {"+" by_example}]
   [abstract
    [equivalence {"+" Equivalence}]]
   [control
    ["[0]" maybe]]]]
 [//
  ["[0]" i64 {"+" Sub}]])

(def: sub
  ... TODO: Stop needing this coercion.
  (as (Sub (I64 (Primitive "#I32")))
      (maybe.trusted (i64.sub 32))))

(def: .public I32
  Type
  ... TODO: Switch to the cleaner approach ASAP.
  (case (type_of ..sub)
    {.#Apply :size: :sub:}
    (type (I64 :size:))

    _
    (undefined))
  ... (by_example [size]
  ...              (Sub size)
  ...              ..sub
  
  ...              (I64 size))
  )

(def: .public equivalence (Equivalence I32) (# ..sub sub_equivalence))
(def: .public width Nat (# ..sub bits))
(def: .public i32 (-> I64 I32) (# ..sub narrow))
(def: .public i64 (-> I32 I64) (# ..sub wide))
