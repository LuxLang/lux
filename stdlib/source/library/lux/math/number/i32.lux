(.using
 [library
  [lux (.except i64)
   [type (.only by_example)]
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["[0]" maybe]]]]
 [//
  ["[0]" i64 (.only Sub)]])

(def: sub
  ... TODO: Stop needing this coercion.
  (as (Sub (I64 (Primitive "#I32")))
      (maybe.trusted (i64.sub 32))))

(def: .public I32
  Type
  ... TODO: Switch to the cleaner approach ASAP.
  (case (type_of ..sub)
    {.#Apply :size: :sub:}
    (type (I64 :size:))

    _
    (undefined))
  ... (by_example [size]
  ...   (is (Sub size)
  ...       ..sub)
  ...   (I64 size))
  )

(def: .public equivalence (Equivalence I32) (at ..sub sub_equivalence))
(def: .public width Nat (at ..sub bits))
(def: .public i32 (-> I64 I32) (at ..sub narrow))
(def: .public i64 (-> I32 I64) (at ..sub wide))
