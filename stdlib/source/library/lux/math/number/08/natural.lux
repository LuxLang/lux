... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Natural as)
   [abstract
    ["[0]" equality]
    ["[0]" hash]
    ["[0]" order]]
   [function
    ["[0]" predicate]]
   [data
    ["[0]" binary
     ["[1]" \\injection]]]
   [math
    ["[0]" random]]
   [type
    ["[0]" nominal]]
   [macro
    ["[0]" template]]]]
 [///
  ["[0]" /64 (.only)
   ["//" natural]]])

(the .public for
  (template.macro (_ ,size ,injection)
    [(nominal.every .public Natural
       .Natural

       (alias [Number]
              Natural)

       (the .public as
         (-> Natural
             .Natural)
         (|>> nominal.as))

       (the .public hash
         (hash.Hash Natural)
         (by hash.functor each as //.hash))

       (the .public order
         (order.Order Natural)
         (by order.functor each as //.order))

       (order.for [] Natural order)

       (the .public equality
         (equality.Equality Natural)
         (by order equality))

       (alias [=]
              equality)

       (the .public size ,size)

       (the .public maximum
         Natural
         (|> size
             (//.x /64.bits_per_byte)
             /64.mask
             nominal.of))

       (the .public valid?
         (predicate.Predicate .Natural)
         (|>> (//.> (nominal.as maximum))
              not))

       (the .public of
         (-> .Natural
             Natural)
         (|>> (/64.and (nominal.as maximum))
              nominal.of))

       (the .public (+ parameter it)
         (-> Natural Natural
             Natural)
         (|> (//.+ (nominal.as parameter)
                   (nominal.as it))
             (/64.and (nominal.as maximum))
             nominal.of))

       (the .public (- parameter it)
         (-> Natural Natural
             Natural)
         (|> (//.- (nominal.as parameter)
                   (nominal.as it))
             (/64.and (nominal.as maximum))
             nominal.of))

       (the .public as_binary
         (binary.Injection Natural)
         (|>> nominal.as
              ,injection))

       (the .public random
         (random.Random Natural)
         (by random.functor each of random.natural))
       )]))

(..for 1
       binary.bits_08)
