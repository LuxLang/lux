... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except natural integer revolution)
   [abstract
    [hash (.only Hash)]
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [format (.only Format)]
    [monad (.only do)]
    [order (.only Order)]]
   [control
    ["[0]" maybe]
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" text]]
   [meta
    ["[0]" provenance]]]]
 ["[0]" //
  ["[1][0]" i64]
  ["[1][0]" natural]
  ["[1][0]" integer]
  ["[1][0]" revolution]
  [//
   [arithmetic (.only Arithmetic)]
   ["[0]" unit]]])

(the .public Number
  .Decimal)

(the It ..Number)

(the with_template' (.in_module# .prelude .with_template))
(the template#macro (.in_module# .prelude .template#macro))

(with_template' [,name <value>]
  [(the .public ,name
     It
     <value>)]

  [e +2.7182818284590452354]
  [zero +0.0]
  [positive +1.0]
  [negative -1.0]
  )

(for .jvm
     (these (the !double
              (template#macro
               (_ value)
               [(|> value
                    (as (Nominal "java.lang.Double"))
                    .jvm_object_cast#)]))
            
            (the !decimal
              (template#macro
               (_ value)
               [(|> value
                    .jvm_object_cast#
                    (is (Nominal "java.lang.Double"))
                    (as It))]))
            
            (with_template' [,name <method>]
              [(the .public ,name
                 (-> It
                     It)
                 (|>> !double
                      ["D"]
                      (.jvm_member_invoke_static# [] "java.lang.Math" <method> [])
                      !decimal))]
              
              [exp    "exp"]
              [log    "log"]
              
              [ceil   "ceil"]
              [floor  "floor"]
              
              [root_2 "sqrt"]
              [root_3 "cbrt"]
              )
            
            (the .public (pow param subject)
              (-> It It
                  It)
              (|> (.jvm_member_invoke_static# [] "java.lang.Math" "pow" []
                                              ["D" (!double subject)] ["D" (!double param)])
                  !decimal)))

     .js
     (these (with_template' [,name <method>]
              [(the .public ,name
                 (-> It
                     It)
                 (|>> []
                      (.js_apply# (.js_constant# <method>))
                      (as It)))]
              
              [exp    "Math.exp"]
              [log    "Math.log"]
              
              [ceil   "Math.ceil"]
              [floor  "Math.floor"]

              [root_2 "Math.sqrt"]
              [root_3 "Math.cbrt"]
              )
            
            (the .public (pow param subject)
              (-> It It
                  It)
              (as It (.js_apply# (.js_constant# "Math.pow") [subject param]))))

     .python
     (these (with_template' [,name <method>]
              [(the .public ,name
                 (-> It
                     It)
                 (|>> []
                      (.python_object_do# <method> (.python_import# "math"))
                      (as It)))]
              
              [exp    "exp"]
              [log    "log"]
              
              [ceil   "ceil"]
              [floor  "floor"]

              [root_2 "sqrt"]
              )
            
            (the .public (pow param subject)
              (-> It It
                  It)
              (as It (.python_object_do# "pow" (.python_import# "math") [subject param])))

            (the .public (root_3 it)
              (-> It
                  It)
              (if (.f64_<# +0.0 it)
                (|> it
                    (.f64_*# -1.0)
                    (..pow (.f64_/# +3.0 +1.0))
                    (.f64_*# -1.0))
                (|> it
                    (..pow (.f64_/# +3.0 +1.0))))))

     .lua
     (these (with_template' [,name <method>]
              [(the .public ,name
                 (-> It
                     It)
                 (|>> []
                      (.lua_apply# (.lua_constant# <method>))
                      (as It)))]
              
              [exp    "math.exp"]
              [log    "math.log"]
              
              [ceil   "math.ceil"]
              [floor  "math.floor"]

              [root_2 "math.sqrt"]
              )
            
            (the .public (pow param subject)
              (-> It It
                  It)
              (.lua_power# param subject))

            (the .public (root_3 it)
              (-> It
                  It)
              (if (.f64_<# +0.0 it)
                (|> it
                    (.f64_*# -1.0)
                    (..pow (.f64_/# +3.0 +1.0))
                    (.f64_*# -1.0))
                (|> it
                    (..pow (.f64_/# +3.0 +1.0))))))

     .ruby
     (these (with_template' [,name <method>]
              [(the .public ,name
                 (-> It
                     It)
                 (|>> []
                      (.ruby_apply# (.ruby_constant# <method>))
                      (as It)))]
              
              [exp    "Math.exp"]
              [log    "Math.log"]
              
              [root_2 "Math.sqrt"]
              [root_3 "Math.cbrt"]
              )

            (with_template' [,name <method>]
              [(the .public (,name it)
                 (-> It
                     It)
                 (|> (.ruby_object_do# <method> it [])
                     (as Integer)
                     (.int_f64#)))]

              [ceil  "ceil"]
              [floor "floor"]
              )

            (the .public (pow param subject)
              (-> It It
                  It)
              (as It (.ruby_object_do# "**" subject [param]))))

     .php
     (these (with_template' [,name <method>]
              [(the .public ,name
                 (-> It
                     It)
                 (|>> ("php apply" ("php constant" <method>))
                      (as It)))]
              
              [exp    "exp"]
              [log    "log"]

              [ceil   "ceil"]
              [floor  "floor"]
              
              [root_2 "sqrt"]
              )

            (the .public (pow param subject)
              (-> It It
                  It)
              (as It ("php apply" ("php constant" "pow") subject param)))

            (the .public root_3
              (-> It
                  It)
              (..pow (.f64_/# +3.0 +1.0))))
     )

(the .public (round it)
  (-> It
      It)
  (let [floored (floor it)
        diff (.f64_-# floored it)]
    (if (.f64_<# diff +0.5)
      (.f64_+# +1.0 floored)
      
      (.f64_<# -0.5 diff)
      (.f64_+# -1.0 floored)
      
      ... else
      floored)))

(the .public (log_by base it)
  (-> It It
      It)
  (.f64_/# (..log base)
           (..log it)))

(the .public (factorial it)
  (-> Natural
      Natural)
  (loop (again [acc 1
                it it])
    (if (//natural.> 1 it)
      (again (//natural.* it acc) (-- it))
      acc)))

(with_template' [,name <op>]
  [(the .public (,name param subject)
     (-> It It
         Bit)
     (<op> param subject))]

  [= .f64_=#]
  [< .f64_<#]
  )

(the .public (<= reference it)
  (-> It It
      Bit)
  (or (.f64_<# reference it)
      (.f64_=# reference it)))

(the .public (> reference it)
  (-> It It
      Bit)
  (.f64_<# it reference))

(the .public (>= reference it)
  (-> It It
      Bit)
  (or (.f64_<# it reference)
      (.f64_=# it reference)))

(with_template' [<comparison> ,name]
  [(the .public ,name
     (Predicate It)
     (<comparison> +0.0))]

  [..> positive?]
  [..< negative?]
  [..= zero?]
  )

(with_template' [,name <op>]
  [(the .public (,name param subject)
     (-> It It
         It)
     (<op> param subject))]

  [+ .f64_+#]
  [- .f64_-#]
  [* .f64_*#]
  [/ .f64_/#]
  [% .f64_%#]
  )

(the .public arithmetic
  (Arithmetic It)
  (implementation
   (the + ..+)
   (the - ..-)
   (the * ..*)
   (the / ../)))

(the .public (/% param subject)
  (-> It It
      [It It])
  [(../ param subject)
   (..% param subject)])

... https://en.wikipedia.org/wiki/Additive_inverse
(the .public (opposite it)
  (-> It
      It)
  (..- it +0.0))

(the .public (absolute it)
  (-> It
      It)
  (if (..< +0.0 it)
    (..opposite it)
    it))

(alias [abs]
       ..absolute)

(the .public (signum it)
  (-> It
      It)
  (if (..= +0.0 it) +0.0
    (..< +0.0 it) -1.0
    ... else
    +1.0))

(the min_exponent -1022)
(the max_exponent (//integer.decimal +1023))

(with_template' [,name <test>]
  [(the .public (,name left right)
     (-> It It
         It)
     (if (<test> right left)
       left
       right))]

  [minor ..<]
  [major ..>]
  )

(the .public natural
  (-> It
      Natural)
  (|>> .f64_int# .natural))

(the .public integer
  (-> It
      Integer)
  (|>> .f64_int#))

(the mantissa_size Natural 52)
(the exponent_size Natural 11)

(the decimal_denominator
  (|> -1
      (.i64_right# ..exponent_size)
      .int_f64#))

(the .public revolution
  (-> It
      Revolution)
  (|>> ..abs
       (..% +1.0)
       (..* ..decimal_denominator)
       .f64_int#
       (.i64_left# ..exponent_size)))

(with_template' [,name <numerator>]
  [(the .public ,name
     It
     (../ +0.0 <numerator>))]

  [not_a_number      +0.0]
  [positive_infinity +1.0]
  )

(the .public negative_infinity
  It
  (..* -1.0 ..positive_infinity))

(the .public (not_a_number? it)
  (-> It
      Bit)
  (not (..= it it)))

(the .public (number? it)
  (-> It
      Bit)
  (not (or (..not_a_number? it)
           (..= ..positive_infinity it)
           (..= ..negative_infinity it))))

(the .public equivalence
  (Equivalence It)
  (implementation
   (the (= left right)
     (or (..= left right)
         (and (..not_a_number? left)
              (..not_a_number? right))))))

(the .public order
  (Order It)
  (implementation
   (the equivalence ..equivalence)
   (the < ..<)))

(the .public smallest
  It
  (..pow (//integer.decimal (//integer.- (.integer ..mantissa_size) ..min_exponent))
         +2.0))

(the .public biggest
  It
  (let [f2^-52 (..pow (//natural.decimal (//natural.- ..mantissa_size 0)) +2.0)
        f2^+1023 (..pow ..max_exponent +2.0)]
    (|> +2.0
        (..- f2^-52)
        (..* f2^+1023))))

(with_template' [,name ,composite ,identity]
  [(the .public ,name
     (Monoid It)
     (implementation
      (the identity ,identity)
      (the composite ,composite)))]

  [addition       ..+   +0.0]
  [multiplication ..*   +1.0]
  [minimum        ..minor ..biggest]
  [maximum        ..major (..* -1.0 ..biggest)]
  )

(the .public cannot_project
  Error
  (provenance.with (provenance.here)
    "Cannot project."))

... https://en.wikipedia.org/wiki/Delimiter
... https://en.wikipedia.org/wiki/Decimal_separator
(the .public delimiter
  ".")

(the (decimal#injection it)
  (-> It
      Text)
  (for .jvm
       (|> it
           ..!double
           ["D"]
           (.jvm_member_invoke_static# [] "java.lang.Double" "toString" [])
           (as Text)
           (text.replaced "E-" "e-")
           (text.replaced "E" "e+"))
       
       .js
       (let [raw (as Text (.js_object_do# "toString" it []))]
         (if (text.contains? ..delimiter raw)
           raw
           (.text_composite# raw ".0")))

       .lua
       (as Text (.lua_apply# (.lua_constant# "string.format") ["%.17g" it]))

       .python
       (as Text (.python_apply# (.python_constant# "repr") [it]))

       .ruby
       (as Text (.ruby_object_do# "to_s" it []))))

(the with_projection_error
  (template#macro
   (_ ,it)
   [(when (try ,it)
      {try.#Failure _}
      {try.#Failure ..cannot_project}

      success
      success)]))

(the _expansion#let (.in_module# .prelude .expansion#let))

(the .public base_10
  (Format Text It)
  (implementation
   (the (injection it)
     (when it
       -0.0 (let [output (decimal#injection it)]
              (if (text.starts_with? "-" output)
                output
                (.text_composite# "+" output)))
       _ (if (..< +0.0 it)
           (decimal#injection it)
           (.text_composite# "+" (decimal#injection it)))))

   (the (projection it)
     (for .jvm
          (|> it
              (as (Nominal "java.lang.String"))
              .jvm_object_cast#
              ["Ljava/lang/String;"]
              (.jvm_member_invoke_static# [] "java.lang.Double" "parseDouble" [])
              ..!decimal
              with_projection_error)

          .js
          (|> (.js_apply# (.js_constant# "parseFloat") [it])
              (as It)
              with_projection_error)

          .lua
          (|> (.lua_apply# (.lua_constant# "tonumber") [it])
              (as It)
              with_projection_error)

          .python
          (|> (.python_apply# (.python_constant# "float") [it])
              (as It)
              with_projection_error)

          .ruby
          (let [projection (as It (.ruby_object_do# "to_f" it []))]
            (<| (_expansion#let [,success {try.#Success projection}])
                (if (..= +0.0 projection)
                  (when it
                    "0" ,success
                    "+0" ,success
                    "-0" ,success
                    
                    ".0" ,success
                    "+.0" ,success
                    "-.0" ,success
                    
                    "0.0" ,success
                    "+0.0" ,success
                    "-0.0" ,success

                    else
                    {try.#Failure ..cannot_project})
                  ,success)))))))

(the log/2
  (-> It
      It)
  (let [base (..log +2.0)]
    (|>> ..log
         (../ base))))

(the double_bias Natural 1023)

(the exponent_mask (//i64.mask ..exponent_size))

(the exponent_offset ..mantissa_size)
(the sign_offset (//natural.+ ..exponent_size ..exponent_offset))

(with_template' [<cast> <hex> ,name]
  [(the ,name
     (|> <hex>
         (by //natural.hex projection)
         try.trusted
         <cast>))]

  [.i64 "FFF8000000000000" not_a_number_bits]
  [.i64 "7FF0000000000000" positive_infinity_bits]
  [.i64 "FFF0000000000000" negative_infinity_bits]
  [.i64 "0000000000000000" positive_zero_bits]
  [.i64 "8000000000000000" negative_zero_bits]
  [.natural "7FF" special_exponent_bits]
  )

(the smallest_exponent
  (..log/2 ..smallest))

(the .public (reciprocal it)
  (-> It
      It)
  (../ it
       +1.0))

(the .public (bits it)
  (-> It
      I64)
  (.i64 (if (..not_a_number? it)
          ..not_a_number_bits

          (..= positive_infinity it)
          ..positive_infinity_bits

          (..= negative_infinity it)
          ..negative_infinity_bits

          (..= +0.0 it)
          (if (..= positive_infinity (reciprocal it))
            ... Positive zero
            ..positive_zero_bits
            ... Negative zero
            ..negative_zero_bits)

          ... else
          (let [sign_bit (if (..< +0.0 it)
                           1
                           0)
                it (..abs it)
                exponent (|> it
                             ..log/2
                             ..floor
                             (..minor ..max_exponent))
                min_gap (..- (//integer.decimal ..min_exponent) exponent)
                power (|> (//natural.decimal ..mantissa_size)
                          (..+ (..minor +0.0 min_gap))
                          (..- exponent))
                max_gap (..- ..max_exponent power)
                mantissa (|> it
                             (..* (..pow (..minor ..max_exponent power) +2.0))
                             (..* (if (..> +0.0 max_gap)
                                    (..pow max_gap +2.0)
                                    +1.0)))
                exponent_bits (|> (if (..< +0.0 min_gap)
                                    (|> (..integer exponent)
                                        (//integer.- (..integer min_gap))
                                        --)
                                    (..integer exponent))
                                  (//integer.+ (.integer ..double_bias))
                                  (//i64.and ..exponent_mask))
                mantissa_bits (..integer mantissa)]
            (all //i64.or
                 (//i64.left_shifted ..sign_offset sign_bit)
                 (//i64.left_shifted ..exponent_offset exponent_bits)
                 (//i64.zero ..mantissa_size mantissa_bits)))
          )))

(with_template' [<getter> <size> <offset>]
  [(the <getter>
     (-> (I64 Any)
         I64)
     (let [mask (|> 1 (//i64.left_shifted <size>) -- (//i64.left_shifted <offset>))]
       (|>> (//i64.and mask) (//i64.right_shifted <offset>) .i64)))]

  [mantissa ..mantissa_size 0]
  [exponent ..exponent_size ..mantissa_size]
  [sign     1               ..sign_offset]
  )

(the .public (of_bits it)
  (-> I64
      It)
  (when [(is Natural (..exponent it))
         (is Natural (..mantissa it))
         (is Natural (..sign it))]
    [..special_exponent_bits 0 0]
    ..positive_infinity

    [..special_exponent_bits 0 1]
    ..negative_infinity

    [..special_exponent_bits _ _]
    ..not_a_number

    ... Positive zero
    [0 0 0] +0.0
    ... Negative zero
    [0 0 1] (..* -1.0 +0.0)

    [E M S]
    (let [sign (if (//natural.= 0 S)
                 +1.0
                 -1.0)
          [mantissa power] (if (//natural.< ..mantissa_size E)
                             [(if (//natural.= 0 E)
                                M
                                (//i64.one ..mantissa_size M))
                              (|> E
                                  (//natural.- ..double_bias)
                                  .integer
                                  (//integer.major ..min_exponent)
                                  (//integer.- (.integer ..mantissa_size)))]
                             [(//i64.one ..mantissa_size M)
                              (|> E (//natural.- ..double_bias) (//natural.- ..mantissa_size) .integer)])
          exponent (..pow (//integer.decimal power) +2.0)]
      (|> (//natural.decimal mantissa)
          (..* exponent)
          (..* sign)))))

(`` (the (representation_exponent format representation)
      (-> (Format Text Natural) Text
          (Try [Text Integer]))
      (when [(.text_index# 0 "e+" representation)
             (.text_index# 0 "E+" representation)
             (.text_index# 0 "e-" representation)
             (.text_index# 0 "E-" representation)]
        (,, (with_template' [<factor> <pattern>]
              [<pattern>
               (do try.monad
                 [.let [after_offset (//natural.+ 2 split_index)
                        after_length (//natural.- after_offset (.text_size# representation))]
                  exponent (|> representation
                               (.text_clip# after_offset after_length)
                               (by format projection))]
                 (in [(.text_clip# 0 split_index representation)
                      (//integer.* <factor> (.integer exponent))]))]

              [+1 [{.#Some split_index} {.#None} {.#None} {.#None}]]
              [+1 [{.#None} {.#Some split_index} {.#None} {.#None}]]
              
              [-1 [{.#None} {.#None} {.#Some split_index} {.#None}]]
              [-1 [{.#None} {.#None} {.#None} {.#Some split_index}]]))
        
        _
        {try.#Success [representation +0]})))

(with_template' [<struct> <natural> <integer> <error>]
  [(the .public <struct>
     (Format Text It)
     (implementation
      (the (injection value)
        (let [bits (..bits value)
              mantissa (..mantissa bits)
              exponent (//integer.- (.integer ..double_bias) (..exponent bits))
              sign (..sign bits)]
          (.text_composite# (when (.natural sign)
                              1 "-"
                              0 "+"
                              _ (undefined))
                            (by <natural> injection (.natural mantissa))
                            ..delimiter "0" "E"
                            (by <integer> injection exponent))))

      (the (projection representation)
        (let [negative? (text.starts_with? "-" representation)
              positive? (text.starts_with? "+" representation)]
          (if (or negative? positive?)
            (do [! try.monad]
              [[mantissa exponent] (..representation_exponent <natural> representation)
               [whole decimal] (when (.text_index# 0 ..delimiter mantissa)
                                 {.#Some split_index}
                                 (do !
                                   [.let [after_offset (++ split_index)
                                          after_length (//natural.- after_offset (.text_size# mantissa))]
                                    decimal (|> mantissa
                                                (.text_clip# after_offset after_length)
                                                (by <natural> projection))]
                                   (in [(.text_clip# 0 split_index mantissa)
                                        decimal]))

                                 {.#None}
                                 {try.#Failure (.text_composite# <error> representation)})
               .let [whole (.text_clip# 1 (-- (.text_size# whole)) whole)]
               mantissa (by <natural> projection (when decimal
                                                   0 whole
                                                   _ (.text_composite# whole (by <natural> injection decimal))))
               .let [sign (if negative? 1 0)]]
              (in (..of_bits
                   (all //i64.or
                        (//i64.left_shifted ..sign_offset (.i64 sign))
                        (//i64.left_shifted ..mantissa_size (.i64 (//integer.+ (.integer ..double_bias) exponent)))
                        (//i64.zero ..mantissa_size (.i64 mantissa))))))
            {try.#Failure (.text_composite# <error> representation)})))))]

  [binary //natural.binary //integer.binary "Invalid binary syntax: "]
  [octal //natural.octal //integer.octal "Invalid octaladecimal syntax: "]
  [hex //natural.hex //integer.hex "Invalid hexadecimal syntax: "]
  )

(the .public hash
  (Hash It)
  (implementation
   (the equivalence ..equivalence)
   (the hash ..bits)))

(the .public (approximately margin_of_error)
  (-> It
      (Equivalence It))
  (implementation
   (the (= standard value)
     (|> value
         (..- standard)
         ..abs
         (..< margin_of_error)))))

(the .public (mod divisor dividend)
  (-> It It It)
  (let [remainder (..% divisor dividend)]
    (if (or (and (..< +0.0 divisor)
                 (..> +0.0 remainder))
            (and (..> +0.0 divisor)
                 (..< +0.0 remainder)))
      (..+ divisor remainder)
      remainder)))

(with_template' [<format> <as> <of> ,unit]
  [(the .public <as>
     (-> It
         It)
     (* (//natural.decimal (its unit.#factor ,unit))))
   
   (the .public <of>
     (-> It
         It)
     (/ (//natural.decimal (its unit.#factor ,unit))))
   
   (the .public <format>
     (Format Text It)
     (let [suffix (its unit.#suffix ,unit)]
       (implementation
        (the injection
          (|>> <as>
               (by ..base_10 injection)
               (text.suffix suffix)))

        (the (projection it)
          (when (text.split_by suffix it)
            {.#Some [it ""]}
            (|> it
                (by ..base_10 projection)
                (try#each <of>))
            
            _
            {try.#Failure ..cannot_project})))))]

  [degree as_degree of_degree unit.degree]
  [gradian as_gradian of_gradian unit.gradian]
  [per_cent as_per_cent of_per_cent unit.per_cent]
  [per_mille as_per_mille of_per_mille unit.per_mille]
  [per_myriad as_per_myriad of_per_myriad unit.per_myriad]
  )

(alias [base_02] ..binary)
(alias [base_08] ..octal)
(alias [decimal] ..base_10)
(alias [base_16] ..hex)

(the .public (whole it)
  (-> It
      It)
  (if (< +0.0 it)
    (..ceil it)
    (..floor it)))

(the .public partial
  (-> It
      It)
  (..% +1.0))
