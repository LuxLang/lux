... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [codec (.only Codec)]
    [monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" maybe]
    ["[0]" try]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["f" frac]
     ["[0]" int]]
    [geometry
     [trigonometry
      ["[0]" plane]]]]
   [meta
    ["[0]" code
     ["<[1]>" \\parser]]
    [macro
     [syntax (.only syntax)]]]]]
 [///
  [arithmetic (.only Arithmetic)]])

(every .public Complex
  (Record
   [#real Frac
    #imaginary Frac]))

(the .public complex
  (syntax (_ [real <code>.any
              ?imaginary (<>.maybe <code>.any)])
    (in (list (` [..#real (, real)
                  ..#imaginary (, (maybe.else (' +0.0) ?imaginary))])))))

(the .public i
  Complex
  (..complex +0.0 +1.0))

(the .public +one
  Complex
  (..complex +1.0 +0.0))

(the .public -one
  Complex
  (..complex -1.0 +0.0))

(the .public zero
  Complex
  (..complex +0.0 +0.0))

(the .public (not_a_number? complex)
  (-> Complex
      Bit)
  (or (f.not_a_number? (its #real complex))
      (f.not_a_number? (its #imaginary complex))))

(the .public (= param input)
  (-> Complex Complex
      Bit)
  (and (f.= (its #real param)
            (its #real input))
       (f.= (its #imaginary param)
            (its #imaginary input))))

(with_template [<name> <op>]
  [(the .public (<name> param input)
     (-> Complex Complex
         Complex)
     [#real (<op> (its #real param)
                  (its #real input))
      #imaginary (<op> (its #imaginary param)
                       (its #imaginary input))])]

  [+ f.+]
  [- f.-]
  )

(the .public equivalence
  (Equivalence Complex)
  (implementation
   (the = ..=)))

(with_template [<name> <transform>]
  [(the .public <name>
     (-> Complex
         Complex)
     (|>> (revised #real <transform>)
          (revised #imaginary <transform>)))]

  [opposite f.opposite]
  [signum f.signum]
  )

(the .public conjugate
  (-> Complex
      Complex)
  (revised #imaginary f.opposite))

(the .public (*' param input)
  (-> Frac Complex
      Complex)
  [#real (f.* param
              (its #real input))
   #imaginary (f.* param
                   (its #imaginary input))])

(the .public (* param input)
  (-> Complex Complex
      Complex)
  [#real (f.- (f.* (its #imaginary param)
                   (its #imaginary input))
              (f.* (its #real param)
                   (its #real input)))
   #imaginary (f.+ (f.* (its #real param)
                        (its #imaginary input))
                   (f.* (its #imaginary param)
                        (its #real input)))])

(the .public (/ param input)
  (-> Complex Complex
      Complex)
  (let [(open "/[0]") param]
    (if (f.< (f.abs /#imaginary)
             (f.abs /#real))
      (let [quot (f./ /#imaginary /#real)
            denom (|> /#real (f.* quot) (f.+ /#imaginary))]
        [..#real (|> (its ..#real input) (f.* quot) (f.+ (its ..#imaginary input)) (f./ denom))
         ..#imaginary (|> (its ..#imaginary input) (f.* quot) (f.- (its ..#real input)) (f./ denom))])
      (let [quot (f./ /#real /#imaginary)
            denom (|> /#imaginary (f.* quot) (f.+ /#real))]
        [..#real (|> (its ..#imaginary input) (f.* quot) (f.+ (its ..#real input)) (f./ denom))
         ..#imaginary (|> (its ..#imaginary input) (f.- (f.* quot (its ..#real input))) (f./ denom))]))))

(the .public (/' param subject)
  (-> Frac Complex
      Complex)
  (let [(open "/[0]") subject]
    [..#real (f./ param /#real)
     ..#imaginary (f./ param /#imaginary)]))

(the .public (% param input)
  (-> Complex Complex
      Complex)
  (let [scaled (/ param input)
        quotient (|> scaled
                     (revised #real f.floor)
                     (revised #imaginary f.floor))]
    (- (* quotient param)
       input)))

(the .public arithmetic
  (Arithmetic Complex)
  (implementation
   (the + ..+)
   (the - ..-)
   (the * ..*)
   (the / ../)))

(the .public (cos subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject]
    [..#real (f.* (f.cosh /#imaginary)
                  (plane.cos /#real))
     ..#imaginary (f.opposite (f.* (f.sinh /#imaginary)
                                   (plane.sin /#real)))]))

(the .public (cosh subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject]
    [..#real (f.* (plane.cos /#imaginary)
                  (f.cosh /#real))
     ..#imaginary (f.* (plane.sin /#imaginary)
                       (f.sinh /#real))]))

(the .public (sin subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject]
    [..#real (f.* (f.cosh /#imaginary)
                  (plane.sin /#real))
     ..#imaginary (f.* (f.sinh /#imaginary)
                       (plane.cos /#real))]))

(the .public (sinh subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject]
    [..#real (f.* (plane.cos /#imaginary)
                  (f.sinh /#real))
     ..#imaginary (f.* (plane.sin /#imaginary)
                       (f.cosh /#real))]))

(the .public (tan subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject
        r2 (f.* +2.0 /#real)
        i2 (f.* +2.0 /#imaginary)
        d (f.+ (plane.cos r2) (f.cosh i2))]
    [..#real (f./ d (plane.sin r2))
     ..#imaginary (f./ d (f.sinh i2))]))

(the .public (tanh subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject
        r2 (f.* +2.0 /#real)
        i2 (f.* +2.0 /#imaginary)
        d (f.+ (f.cosh r2) (plane.cos i2))]
    [..#real (f./ d (f.sinh r2))
     ..#imaginary (f./ d (plane.sin i2))]))

(the .public (abs subject)
  (-> Complex
      Frac)
  (let [(open "/[0]") subject]
    (if (f.< (f.abs /#imaginary)
             (f.abs /#real))
      (if (f.= +0.0 /#imaginary)
        (f.abs /#real)
        (let [q (f./ /#imaginary /#real)]
          (f.* (f.pow +0.5 (f.+ +1.0 (f.* q q)))
               (f.abs /#imaginary))))
      (if (f.= +0.0 /#real)
        (f.abs /#imaginary)
        (let [q (f./ /#real /#imaginary)]
          (f.* (f.pow +0.5 (f.+ +1.0 (f.* q q)))
               (f.abs /#real)))))))

(the .public (exp subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject
        r_exp (f.exp /#real)]
    [..#real (f.* r_exp (plane.cos /#imaginary))
     ..#imaginary (f.* r_exp (plane.sin /#imaginary))]))

(the .public (log subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject]
    [..#real (|> subject ..abs f.log)
     ..#imaginary (plane.atan_2 /#real /#imaginary)]))

(with_template [<name> <type> <op>]
  [(the .public (<name> param input)
     (-> <type> Complex
         Complex)
     (|> input log (<op> param) exp))]

  [pow  Complex ..*]
  [pow' Frac    ..*']
  )

(the (with_sign sign magnitude)
  (-> Frac Frac
      Frac)
  (f.* (f.signum sign) magnitude))

(the .public (root_2 input)
  (-> Complex
      Complex)
  (let [(open "/[0]") input
        t (|> input ..abs (f.+ (f.abs /#real)) (f./ +2.0) (f.pow +0.5))]
    (if (f.< +0.0 /#real)
      [..#real (f./ (f.* +2.0 t)
                    (f.abs /#imaginary))
       ..#imaginary (f.* t (..with_sign /#imaginary +1.0))]
      [..#real t
       ..#imaginary (f./ (f.* +2.0 t)
                         /#imaginary)])))

(the (root_2-1z input)
  (-> Complex
      Complex)
  (|> (complex +1.0) (- (* input input)) ..root_2))

(the .public (reciprocal (open "/[0]"))
  (-> Complex
      Complex)
  (if (f.< (f.abs /#imaginary)
           (f.abs /#real))
    (let [q (f./ /#imaginary /#real)
          scale (f./ (|> /#real (f.* q) (f.+ /#imaginary))
                     +1.0)]
      [..#real (f.* q scale)
       ..#imaginary (f.opposite scale)])
    (let [q (f./ /#real /#imaginary)
          scale (f./ (|> /#imaginary (f.* q) (f.+ /#real))
                     +1.0)]
      [..#real scale
       ..#imaginary (|> scale f.opposite (f.* q))])))

(the .public (acos input)
  (-> Complex
      Complex)
  (|> input
      (..+ (|> input ..root_2-1z (..* ..i)))
      ..log
      (..* (..opposite ..i))))

(the .public (asin input)
  (-> Complex
      Complex)
  (|> input
      ..root_2-1z
      (..+ (..* ..i input))
      ..log
      (..* (..opposite ..i))))

(the .public (atan input)
  (-> Complex
      Complex)
  (|> input
      (..+ ..i)
      (../ (..- input ..i))
      ..log
      (..* (../ (..complex +2.0) ..i))))

(the .public (argument (open "/[0]"))
  (-> Complex
      Frac)
  (plane.atan_2 /#real /#imaginary))

(the .public (roots nth input)
  (-> Nat Complex
      (List Complex))
  (when nth
    0 (list)
    _ (let [r_nth (|> nth .int int.frac)
            nth_root_of_abs (|> input ..abs (f.pow (f./ r_nth +1.0)))
            nth_phi (|> input ..argument (f./ r_nth))
            slice (f./ r_nth plane.tau)]
        (|> (list.indices nth)
            (list#each (function (_ nth')
                         (let [inner (|> nth' .int int.frac
                                         (f.* slice)
                                         (f.+ nth_phi))
                               real (f.* nth_root_of_abs
                                         (plane.cos inner))
                               imaginary (f.* nth_root_of_abs
                                              (plane.sin inner))]
                           [..#real real
                            ..#imaginary imaginary])))))))

(the .public (approximately? margin_of_error standard value)
  (-> Frac Complex Complex
      Bit)
  (and (f.approximately? margin_of_error
                         (its ..#real standard)
                         (its ..#real value))
       (f.approximately? margin_of_error
                         (its ..#imaginary standard)
                         (its ..#imaginary value))))

(the .public (format it)
  (-> Complex
      Text)
  (.text_composite# (of f.decimal encoded (its ..#real it))
                    " " (of f.decimal encoded (its ..#imaginary it)) "i"))

(the .public codec
  (Codec Text Complex)
  (implementation
   (the encoded ..format)
   (the (decoded it)
     (when (text.split_by " " it)
       {.#Some [real imaginary]}
       (do try.monad
         [real (of f.decimal decoded real)
          imaginary (of f.decimal decoded (text.replaced_once "i" "" imaginary))]
         (in [#real real
              #imaginary imaginary]))

       {.#None}
       (do try.monad
         [real (of f.decimal decoded it)]
         (in [#real real
              #imaginary +0.0]))))))

... https://en.wikipedia.org/wiki/Polar_coordinate_system
(the (square it)
  (-> Frac
      Frac)
  (f.* it it))

(the .public (magnitude it)
  (-> Complex
      Frac)
  (f.root_2 (f.+ (square (its #real it))
                 (square (its #imaginary it)))))

(the .public (phase it)
  (-> Complex
      Frac)
  (plane.atan_2 (its #real it)
                (its #imaginary it)))

(the .public (polar magnitude phase)
  (-> Frac Frac
      Complex)
  [#real (f.* magnitude (plane.cos phase))
   #imaginary (f.* magnitude (plane.sin phase))])
