... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except not and or)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["|" pipe]]
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monoid functor)]]]
   [math
    [number
     ["[0]" /64 (.only)
      ["n" natural]]]]
   [macro
    ["[0]" template]]]])

(every .public Digit
  Natural)

(every .public Number
  (List Digit))

(the zero_digit
  Digit
  0)

(the .public zero
  Number
  (list))

(every .public Address
  Natural)

(the digits
  (template.macro (_ ,it)
    [(.list_size# ,it)]))

(the digit'
  (template.macro (_ ,address ,it)
    [(.list_item# ,address ,it)]))

(the (digit address it)
  (-> Address Number
      Digit)
  (if (n.< (digits it) address)
      (digit' address it)
      zero_digit))

(the .public (bit address it)
  (-> Address Number
      Bit)
  (let [[address_of_digit address_of_bit] (n./% /64.width address)]
    (|> it
        (digit address_of_digit)
        (/64.one? address_of_bit))))

(the end
  Address
  (-- 0))

(the (normal it)
  (Change Number)
  (when (digits it)
    0
    it

    digits_of_origin
    (loop (normal [digits digits_of_origin])
      (when (-- digits)
        ..end
        ..zero

        last
        (when (digit' last it)
          ..zero_digit
          (normal last)

          else
          (if (n.= digits_of_origin digits)
              it
              (list.first digits it)))))))

(template.with [<name> <op>]
  [(the .public (<name> address it)
     (-> Address
         (Change Number))
     (let [[address_of_digit address_of_bit] (n./% /64.width address)
           current_digits (digits it)]
       (normal (if (n.< current_digits address_of_digit)
                   (list.revised address_of_digit (<op> address_of_bit) it)
                   (let [padding (list.repeated (n.- current_digits address_of_digit)
                                                ..zero_digit)
                         lead (<op> address_of_bit ..zero_digit)]
                     (all list#composite
                          it
                          padding
                          (list lead)))))))]

  [[with_one /64.one]
   [with_zero /64.zero]
   [with_flipped /64.flipped]])

(the .public not
  (Change Number)
  (|>> (list#each /64.not)
       normal))

(template.with [<name> <op>]
  [(the .public (<name> param subject)
     (-> Number Number
         Number)
     (let [digits_of_param (digits param)
           digits_of_subject (digits subject)
           common_composite (list#each (function (_ [param subject])
                                         (<op> param subject))
                                       (list.zipped_2 param subject))]
       (normal (if (.or (n.= digits_of_param digits_of_subject)
                        (same? /64.and <op>))
                   common_composite
                   (let [common (n.minor digits_of_param digits_of_subject)
                         complete (n.major digits_of_param digits_of_subject)
                         excess (if (same? digits_of_param complete)
                                    param
                                    subject)]
                     (list#composite common_composite
                                     (list.after common excess)))))))]

  [[and /64.and]
   [or  /64.or]
   [xor /64.xor]])

(the .public equivalence
  (Equivalence Number)
  (list.equivalence /64.equivalence))
