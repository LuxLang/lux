... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Natural N macro)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]
    [hash (.only Hash)]
    [monoid (.only Monoid)]
    [format (.only Format)]
    ["[0]" monad]]
   ["[0]" error (.only)
    ["[0]" try (.use "[1]:[0]" functor)]]
   ["[0]" function (.only)
    [predicate (.only Predicate)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" monoid functor)]]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" monad)]]
   [aspect
    ["[0]" case (.only Case)]]]]
 [///
  ["[0]" big]
  ["[0]" /64 (.only)
   ["//" natural]]
  ["[0]" /128]])

(every .public Number
  big.Number)

(alias [Natural N]
       ..Number)

(the It ..Number)

(the with_template (.in_module# .prelude with_template))
(the macro (.in_module# .prelude template:macro))

(the zero'
  (macro (_)
    [(.list)]))

(the one'
  (macro (_)
    [(.list 1)]))

(the .public zero
  It
  (zero'))

(the .public one
  It
  (one'))

(the .public small
  (Case Number //.Number)
  (case.new (function (_ it)
              (when it
                (..zero')
                {.#Right //.zero}
                
                (list it)
                {.#Right it}

                else
                {.#Left it}))
            (function (_ it)
              (when it
                //.zero ..zero
                _ (list it)))))

(the .public (random digits)
  (-> //.Number
      (Random It))
  (when digits
    0 (random:pure ..zero)
    _ (monad.let random.monad
        [head (random.only (//.> 0) random.natural)
         tail (random.list (-- digits) random.natural)]
        (pure (list:composite (list head) tail)))))

(the .public =
  (-> It It
      Bit)
  (by (list.equivalence //.equivalence) =))

(the digits
  (macro (_ ,it)
    [(.list_size# ,it)]))

(the end
  //.Number
  (-- 0))

(the .public (< reference it)
  (-> It It
      Bit)
  (let [size_of_reference (..digits reference)
        size_of_it (..digits it)]
    (if (//.= size_of_reference size_of_it)
        (loop (< [digit (-- size_of_reference)])
          (when digit
            ..end
            false

            else
            (let [digit_of_reference (.list_item# digit reference)
                  digit_of_it (.list_item# digit it)]
              (or (//.< digit_of_reference digit_of_it)
                  (and (//.= digit_of_reference digit_of_it)
                       (< (-- digit)))))))
        (//.< size_of_reference size_of_it))))

(the .public (> reference it)
  (-> It It
      Bit)
  (< it reference))

(with_template [,<> ,<>=]
  [(the .public (,<>= reference it)
     (-> It It
         Bit)
     (or (,<> reference it)
         (= reference it)))]

  [[< <=]
   [> >=]])

(with_template [,<> ,name]
  [(the .public (,name reference it)
     (-> It It
         It)
     (if (,<> reference it)
         it
         reference))]

  [[> major]
   [< minor]])

(the digit
  (macro (_ ,size ,context ,choice)
    [(if (//.< ,size ,choice)
         (.list_item# ,choice ,context)
         0)]))

(the .public (+ origin it)
  (-> It It
      It)
  (let [size_of_origin (..digits origin)
        size_of_it (..digits it)
        minimum_size (//.major size_of_origin size_of_it)
        [_ it] (list.dynamic (function (_ [digit carry])
                               (if (//.< minimum_size digit)
                                   (let [digit_of_origin (..digit size_of_origin origin digit)
                                         digit_of_it (..digit size_of_it it digit)
                                         [carry' digit'] (/128.+ digit_of_origin digit_of_it)
                                         [carry'' digit''] (/128.+ carry digit')]
                                     {.#Some [[(++ digit)
                                               (//.+ carry' carry'')]
                                              digit'']})

                                   (//.= minimum_size digit)
                                   (when carry
                                     0 {.#None}
                                     _ {.#Some [[(++ digit)
                                                 0]
                                                carry]})

                                   ... else
                                   {.#None}))
                             [0 0])]
    it))

(the (-' minor major)
  (-> It
      (Change It))
  (let [size_of_minor (..digits minor)
        size_of_major (..digits major)
        maximum_size (//.major size_of_minor size_of_major)
        last (-- maximum_size)
        [[_ _ last_non_zero] it] (list.dynamic (function (it [current carry last_non_zero])
                                                 (if (//.< maximum_size current)
                                                     (let [current_of_minor' (..digit size_of_minor minor current)
                                                           carry_overflows? (//.> (/64.not current_of_minor') carry)
                                                           current_of_minor (//.+ carry current_of_minor')
                                                           current_of_major (..digit size_of_major major current)
                                                           must_carry? (or carry_overflows?
                                                                           (//.> current_of_major current_of_minor))]
                                                       {.#Some [[(++ current)
                                                                 (if must_carry?
                                                                     1
                                                                     0)
                                                                 (if (//.= current_of_minor current_of_major)
                                                                     last_non_zero
                                                                     current)]
                                                                (//.- current_of_minor current_of_major)]})
                                                     {.#None}))
                                               [0 0 (-- 0)])]
    (if (//.= last last_non_zero)
        it
        (list.first (++ last_non_zero) it))))

(the .public (excess origin it)
  (-> It
      (Change It))
  (if (< origin it)
      (-' it origin)
      ..zero))

(the .public (- origin it)
  (-> It
      (Change It))
  (if (< origin it)
      ..zero
      (-' origin it)))

(the (x'' scale it)
  (-> big.Digit
      (Change It))
  (let [size (..digits it)
        [_ it] (list.dynamic (function (_ [current carry])
                               (if (//.< size current)
                                   (let [[high low] (/128.x scale (.list_item# current it))
                                         [carry low] (/128.+ carry low)]
                                     {.#Some [[(++ current)
                                               (//.+ carry high)]
                                              low]})

                                   (//.> 0 carry)
                                   {.#Some [[current
                                             0]
                                            carry]}

                                   ... else
                                   {.#None}))
                             [0 0])]
    it))

(the (x' level scale it)
  (-> //.Number big.Digit
      (Change It))
  (when scale
    0 ..zero
    _ (let [left (when scale
                   1 it
                   _ (x'' scale it))]
        (if (= ..zero left)
            ..zero
            (when level
              0 left
              _ (list:composite (list.repeated level 0) left))))))

(the .public (x scale it)
  (-> It It
      It)
  (let [[it _] (list.mix (function (_ scale [accumulation level])
                           [(+ (x' level scale it)
                               accumulation)
                            (++ level)])
                         [..zero 0]
                         scale)]
    it))

(error.the .public division_by_zero)

(every .public Exponent
  //.Exponent)

(the .public (logarithm_2 it)
  (-> It
      Exponent)
  (when (..digits it)
    0
    0

    digits
    (let [last_digit (-- digits)]
      (|> last_digit
          (..digit digits it)
          /64.highest_bit
          (//.+ (//.x 64 last_digit))))))

(the (with_padding zeroes)
  (-> //.Number
      (Change It))
  (list:composite (list.repeated zeroes 0)))

(the (with_shift exponent it)
  (-> //.Number
      (Change It))
  (let [block (//.- exponent /64.width)
        mask (/64.<< block (/64.mask exponent))
        size (..digits it)
        [_ it] (list.dynamic (function (_ [@ carry])
                               (if (//.< size @)
                                   (let [digit (.list_item# @ it)
                                         carry' (|> digit
                                                    (/64.and mask)
                                                    (/64.>> block))
                                         digit' (|> digit
                                                    (/64.<< exponent)
                                                    (/64.or carry))]
                                     {.#Some [[(++ @)
                                               carry']
                                              digit']})
                                   
                                   (//.= 0 carry)
                                   {.#None}

                                   ... else
                                   {.#Some [[(++ @)
                                             0]
                                            carry]}))
                             [0 0])]
    it))

(the (<< exponent it)
  (-> Exponent
      (Change It))
  (when it
    (..zero')
    ..zero

    else
    (when (//./% /64.width exponent)
      [0 0]
      it

      [zeroes 0]
      (with_padding zeroes it)

      [0 exponent]
      (with_shift exponent it)
      
      [zeroes shift]
      (|> it
          (with_shift exponent)
          (with_padding zeroes)))))

(the .public (exponential_2 exponent)
  (-> Exponent
      It)
  (<< exponent ..one))

(the as_text
  (-> It
      Text)
  (|>> list.in_reverse
       (list.as_text (by //.base_10 as))))

(the .public (/ scale it)
  (-> It It
      It)
  (when scale
    (zero')
    (halt! ..division_by_zero)

    (one')
    it

    else
    (when it
      (zero')
      ..zero

      else
      (if (< scale it)
          ..zero

          (= scale it)
          ..one

          ... else
          (when (//.- (logarithm_2 scale) (logarithm_2 it))
            0
            ..one

            it/scale
            (let [scale' (<< it/scale scale)]
              (if (= it scale')
                  (exponential_2 it/scale)

                  (< it scale')
                  (|> it
                      (- scale')
                      (/ scale)
                      (+ (exponential_2 it/scale)))

                  ... else
                  (let [it/scale (-- it/scale)
                        scale' (<< it/scale scale)]
                    (|> it
                        (- scale')
                        (/ scale)
                        (+ (exponential_2 it/scale)))))))))))

(the both
  (macro (_ ,left ,right)
    [[,left ,right]]))

(the right
  (macro (_ ,left ,right)
    [,right]))

(with_template [,name ,type ,choice]
  [(the .public (,name scale it)
     (-> It It
         ,type)
     (let [quotient (/ scale it)
           flat (x scale quotient)]
       (,choice quotient (- flat it))))]

  [[/% [It It] both]
   [% It right]])

... https://en.wikipedia.org/wiki/Exponentiation
... https://en.wikipedia.org/wiki/Exponentiation_by_squaring
(the .public (^ power base)
  (-> Exponent
      (Change It))
  (loop (^ [power power
            base base
            it ..one])
    (if (.i64_=# 0 power)
        it
        (^ (.i64_right# 1 power)
           (x base base)
           (if (.i64_=# 1 (.i64_and# 1 power))
               (x base it)
               it)))))

... https://en.wikipedia.org/wiki/Greatest_common_divisor
(the .public (greatest_common_divisor a b)
  (-> It It
      It)
  (when b
    (..zero') a
    _ (greatest_common_divisor b (..% b a))))

(alias [gcd]
       ..greatest_common_divisor)

... https://en.wikipedia.org/wiki/Coprime_integers
(the .public (co_prime? a b)
  (-> It
      (Predicate It))
  (..= ..one (..greatest_common_divisor a b)))

... https://en.wikipedia.org/wiki/Least_common_multiple
(the .public (least_common_multiple a b)
  (-> It It
      It)
  (`` (when [a b]
        (,, (with_template [<pattern>]
              [<pattern>
               ..zero]

              [[[_ (..zero')]]
               [[(..zero') _]]]))

        _
        (|> a
            (../ (..greatest_common_divisor a b))
            (..x b)))))

(alias [lcm]
       ..least_common_multiple)

(the .public equivalence
  (Equivalence It)
  (implementation
   (the = ..=)))

(the .public order
  (Order It)
  (implementation
   (the equivalence ..equivalence)
   (the < ..<)))

(the .public hash
  (Hash It)
  (implementation
   (the equivalence ..equivalence)
   (the (hash it)
     (when it
       (..zero')
       0
       
       _
       (.list_item# 0 it)))))

(with_template [<name> <composite> <identity>]
  [(the .public <name>
     (Monoid It)
     (implementation
      (the identity <identity>)
      (the composite <composite>)))]

  [[addition       ..+     ..zero]
   [multiplication ..x     ..one]
   [maximum        ..major ..zero]])

(the .public (multiple? reference it)
  (-> It
      (Predicate It))
  (|> it
      (% reference)
      (= ..zero)))

(the .public (divisor? reference it)
  (-> It
      (Predicate It))
  (multiple? it reference))

(the .public even?
  (Predicate It)
  (multiple? (list 2)))

(the .public odd?
  (Predicate It)
  (|>> ..even?
       not))

(the base_02_digits_per_digit
  (//./ 1 /64.width))

(the base_16_digits_per_digit
  (//./ 4 /64.width))

(the (runs_of_digits per_digit it)
  (-> //.Number Text
      (List Text))
  (let [total (text.size it)]
    (if (//.> per_digit total)
        (loop (runs_of_digits [end total
                               suffix (is (List Text)
                                          (list))])
          (if (//.> per_digit end)
              (let [start (//.- per_digit end)
                    run (.text_clip# start per_digit it)]
                (runs_of_digits start (list:composite suffix (list run))))
              (list:composite suffix (list (.text_clip# 0 end it)))))
        (list it))))

(the base_08_digits_per_digit
  (//./ 3 /64.width))

... 02^64 - 1 = 18,446,744,073,709,551,615
... 10^19     = 10,000,000,000,000,000,000

(the range_of_base_10
  10,000,000,000,000,000,000)

(the base_10_digits_per_digit
  19)

(with_template [,name ,per_digit]
  [(the (,name it)
     (when (text.size it)
       ,per_digit
       it

       digits
       (let [padding (//.- digits ,per_digit)]
         (text (text.interposed "" (list.repeated padding "0"))
               it))))]

  [[with_padding_for_02 ..base_02_digits_per_digit]
   [with_padding_for_16 ..base_16_digits_per_digit]

   [with_padding_for_08 ..base_08_digits_per_digit]
   [with_padding_for_10 ..base_10_digits_per_digit]])

(the (with_no_padding it)
  (Change Text)
  (let [limit (text.size it)]
    (loop (with_no_padding [padding 0])
      (if (//.< limit padding)
          (when (.text_char# padding it)
            (character "0")
            (with_no_padding (++ padding))

            else
            (.text_clip# padding (//.- padding limit) it))
          "0"))))

(with_template [,name ,per_digit ,padding ,//]
  [(the .public ,name
     (Format Text It)
     (implementation
      (the (as it)
        (when it
          (..zero')
          "0"

          else
          (|> it
              (list:each (|>> (by ,// as) ,padding))
              list.in_reverse
              (text.interposed "")
              ..with_no_padding)))

      (the of
        (|>> ..with_no_padding
             (runs_of_digits ,per_digit)
             (list.each' try.monad (by ,// of))))))]

  [[base_02 ..base_02_digits_per_digit ..with_padding_for_02 //.base_02]
   [base_16 ..base_16_digits_per_digit ..with_padding_for_16 //.base_16]])

(the initial_shift_for_head 0)
(the no_head 0)
(the initial_carry 0)

(the .public base_08
  (Format Text It)
  (let [addition_to_shift (//.% 3 /64.width)
        initial_shift_for_clean_up addition_to_shift]
    (implementation
     (the (as it)
       (when it
         (..zero')
         "0"

         else
         (let [[it carry _] (list.mix (function (_ digit [it carry shift_for_clean_up])
                                        (when shift_for_clean_up
                                          /64.width
                                          [(text (by //.base_08 as carry) it)
                                           ..initial_carry
                                           initial_shift_for_clean_up]

                                          else
                                          (let [proper_digit (|> digit

                                                                 (/64.<< shift_for_clean_up)
                                                                 (/64.>> shift_for_clean_up)
                                                                 
                                                                 (/64.<< (-- shift_for_clean_up))
                                                                 (/64.or carry))]
                                            [(text (with_padding_for_08 (by //.base_08 as proper_digit)) it)
                                             (/64.>> (/64.opposite shift_for_clean_up) digit)
                                             (//.+ addition_to_shift shift_for_clean_up)])))
                                      ["" ..initial_carry initial_shift_for_clean_up]
                                      it)]
           (..with_no_padding (when carry
                                ..initial_carry
                                it

                                else
                                (text (by //.base_08 as carry) it))))))

     (the (of it)
       (monad.let [! try.monad]
         [[[head tail] _] (|> it
                              ..with_no_padding
                              (runs_of_digits ..base_08_digits_per_digit)
                              (list.each' try.monad (by //.base_08 of))
                              (by ! each (list.mix (function (_ digit [[head tail] shift_for_head])
                                                     [(when (/64.shift shift_for_head)
                                                        ..initial_shift_for_head
                                                        [digit tail]

                                                        shift_for_head
                                                        (let [head' (|> digit
                                                                        (/64.<< (/64.opposite shift_for_head))
                                                                        (/64.or head))]
                                                          [(/64.>> shift_for_head digit)
                                                           (list:composite tail (list head'))]))
                                                      (//.+ addition_to_shift shift_for_head)])
                                                   [[..no_head ..zero] ..initial_shift_for_head])))]
         (pure (when head
                 ..no_head
                 tail
                 
                 else
                 (list:composite tail (list head)))))))))

(the factor_for_base_10
  Number
  (list ..range_of_base_10))

(the .public base_10
  (Format Text It)
  (implementation
   (the (as it)
     (loop (as [input it
                output ""])
       (let [[tail head] (/% ..factor_for_base_10 input)
             output (text (when head
                            (list head)
                            (with_padding_for_10 (by //.base_10 as head))

                            else
                            "0")
                          output)]
         (when tail
           (..zero')
           (..with_no_padding output)

           else
           (as tail output)))))

   (the of
     (|>> ..with_no_padding
          (runs_of_digits ..base_10_digits_per_digit)
          (list.each' try.monad (by //.base_10 of))
          (try:each (|>> (list.mix (function (_ digit [total factor])
                                     [(|> (list digit)
                                          (x factor)
                                          (+ total))
                                      (x factor_for_base_10 factor)])
                                   [..zero ..one])
                         product.left))))))

(the .public #Zero
  (Case It
        Any)
  (case.new (function (_ it)
              (if (= ..zero it)
                  {.#Right []}
                  {.#Left it}))
            (function.constant ..zero)))

(the .public #Successor
  (Case It
        It)
  (case.new (function (_ it)
              (if (= ..zero it)
                  {.#Left it}
                  {.#Right (- ..one it)}))
            (+ ..one)))
