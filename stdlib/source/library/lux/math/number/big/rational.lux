... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text integer)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [data
    [collection
     ["[0]" list
      ["?[1]" \\projection]]]]
   [math
    ["[0]" random (.only Random)]]
   [aspect
    ["[0]" case (.only Case)]]]]
 [//
  ["[0]" natural]
  ["[0]" integer]
  [//
   [/64
    ["/" rational]]]])

(the integer_as_natural
  (its integer.:absolute))

(/.module integer.Number natural.Number
          
          natural.zero natural.one
          natural.=
          natural.x
          ..integer_as_natural
          natural.base_10

          integer.zero integer.positive_one integer.negative_one
          integer.= integer.<
          integer.+ integer.- integer.x integer./ integer.%
          integer.opposite integer.signum integer.greatest_common_divisor
          (case.some integer.natural) (case.some integer.small)
          integer.base_10)

(the .public small
  (Case ..Number /.Number)
  (case.new (function (_ it)
              (when [(case.if natural.small (..denominator it))
                     (case.if integer.small (..numerator it))]
                [{.:Right denominator} {.:Right numerator}]
                {.:Right (/.new denominator numerator)}

                else
                {.:Left it}))
            (function (_ it)
              (new (case.some natural.small (/.denominator it))
                   (case.some integer.small (/.numerator it))))))

(the .public (random digits)
  (-> Natural
      (Random ..Number))
  (monad.let random.monad
    [numerator (integer.random digits)
     denominator (natural.random digits)]
    (pure (new denominator numerator))))
