... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Integer Z macro natural)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]
    [hash (.only Hash)]
    [enum (.only Enum)]
    [monoid (.only Monoid)]
    [format (.only Format)]
    ["[0]" monad]]
   [logic
    ["[0]" bit]]
   ["[0]" error (.only)
    ["[0]" try]]
   [function
    [predicate (.only Predicate)]]
   [math
    ["[0]" random (.only Random)]]
   [aspect
    ["[0]" case (.only Case)]]
   [meta
    ["[0]" static]]]]
 [//
  ["//" natural]
  [//
   ["[0]" signum]
   [/64
    ["//_64" natural]
    ["/_64" integer]]]])

(the with_template (.in_module# .prelude with_template))
(the macro (.in_module# .prelude template#macro))

(every .public Number
  (Record
   [... https://en.wikipedia.org/wiki/Sign_function
    #signum signum.Signum
    ... https://en.wikipedia.org/wiki/Absolute_value
    #absolute //.Number]))

(alias [Integer Z]
       ..Number)

(the It ..Number)

(the .public (random digits)
  (-> Natural
      (Random It))
  (random.and random.bit
              (//.random digits)))

(the .public zero
  It
  [#signum signum.positive
   #absolute //.zero])

(the .public positive_one
  It
  [#signum signum.positive
   #absolute //.one])

(the .public negative_one
  It
  [#signum signum.negative
   #absolute //.one])

(the .public natural
  (Case It //.Number)
  (case.new (function (_ it)
              (when (its #signum it)
                signum.positive
                {.#Right (its #absolute it)}

                else
                {.#Left it}))
            (|>> [#signum signum.positive
                  #absolute])))

(the most_small
  /_64.Number
  (by /_64.interval minimum))

(the .public small
  (Case It /_64.Number)
  (case.new (function (_ it)
              (when (case.if //.small (its #absolute it))
                {.#Right absolute}
                (if (//_64.< //_64.infinity absolute)
                    {.#Right (/_64.x (when (its #signum it)
                                       signum.positive /_64.positive_one
                                       signum.negative /_64.negative_one)
                                     (.integer absolute))}
                    {.#Left it})

                else
                {.#Left it}))
            (function (_ it)
              (when it
                ..most_small
                [#signum signum.negative
                 #absolute (|> (by /_64.interval maximum)
                               .natural
                               (case.some //.small)
                               (//.+ //.one))]

                else
                [#signum (/_64.negative? (/_64.signum it))
                 #absolute (|> it
                               /_64.absolute
                               .natural
                               (case.some //.small))]))))

(the .public absolute
  (Change It)
  (|>> (its #absolute)
       (case.some ..natural)))

(the .public (signum it)
  (Change It)
  (if (//.= //.zero (its #absolute it))
      ..zero
      (when (its #signum it)
        signum.positive ..positive_one
        signum.negative ..negative_one)))

(the .public (= reference it)
  (-> It It
      Bit)
  (when [reference it]
    [[signum_of_reference absolute_of_reference]
     [signum_of_it absolute_of_it]]
    (if (bit.= signum_of_reference signum_of_it)
        (//.= absolute_of_reference absolute_of_it)
        (and (//.= //.zero absolute_of_reference)
             (//.= //.zero absolute_of_it)))))

(the .public (< reference it)
  (-> It It
      Bit)
  (when [reference it]
    [[signum.positive reference]
     [signum.positive it]]
    (//.< reference it)

    [[signum.negative reference]
     [signum.negative it]]
    (//.< it reference)

    [[signum.positive reference]
     [signum.negative it]]
    (not (and (//.= //.zero reference)
              (//.= //.zero it)))

    [[signum.negative reference]
     [signum.positive it]]
    false))

(the .public (> reference it)
  (-> It It
      Bit)
  (< it reference))

(with_template [,<>= ,<>]
  [(the .public (,<>= reference it)
     (-> It It
         Bit)
     (or (,<> reference it)
         (= reference it)))]

  [[<= <]
   [>= >]])

(with_template [<comparison> <name>]
  [(the .public <name>
     (Predicate It)
     (<comparison> ..zero))]

  [[..> positive?]
   [..< negative?]
   [..= zero?]])

(with_template [<name> <test>]
  [(the .public (<name> left right)
     (-> It It
         It)
     (if (<test> right left)
         left
         right))]

  [[minor ..<]
   [major ..>]])

(the .public opposite
  (Change It)
  (revised #signum not))

(the (normal it)
  (Change It)
  (if (|> it
          (its #absolute)
          (//.= //.zero))
      ..zero
      it))

(the .public (+ origin it)
  (-> It It
      It)
  (when [origin it]
    [[signum_of_origin origin']
     [signum_of_it it']]
    (if (bit.= signum_of_origin signum_of_it)
        [#signum signum_of_it
         #absolute (//.+ origin' it')]
        (..normal [#signum (if (//.< origin' it')
                               (its #signum origin)
                               (its #signum it))
                   #absolute (//.- (//.minor origin' it')
                                   (//.major origin' it'))]))))

(the .public (- origin it)
  (-> It It
      It)
  (+ (opposite origin) it))

(with_template [,/ ,//]
  [(the .public (,/ origin it)
     (-> It It
         It)
     (when [origin it]
       [[signum_of_origin origin]
        [signum_of_it it]]
       [#signum (signum.x signum_of_origin signum_of_it)
        #absolute (,// origin it)]))]

  [[x //.x]
   [/ //./]])

(the both
  (macro (_ ,left ,right)
    [[,left ,right]]))

(the right
  (macro (_ ,left ,right)
    [,right]))

(with_template [,name ,type ,choice]
  [(the .public (,name scale it)
     (-> It It
         ,type)
     (let [quotient (/ scale it)
           flat (x scale quotient)]
       (,choice quotient (- flat it))))]

  [[/% [It It] both]
   [% It right]])

... https://en.wikipedia.org/wiki/Exponentiation
... https://en.wikipedia.org/wiki/Exponentiation_by_squaring
(the .public (^ power base)
  (-> //.Exponent
      (Change It))
  (loop (^ [power power
            base base
            it ..positive_one])
    (if (.i64_=# 0 power)
        it
        (^ (.i64_right# 1 power)
           (x base base)
           (if (.i64_=# 1 (.i64_and# 1 power))
               (x base it)
               it)))))

... https://rob.conery.io/2018/08/21/mod-and-remainder-are-not-the-same/
(the .public (mod divisor dividend)
  (-> It It
      It)
  (let [remainder (..% divisor dividend)]
    (if (or (and (..< ..zero divisor)
                 (..> ..zero remainder))
            (and (..> ..zero divisor)
                 (..< ..zero remainder)))
        (..+ divisor remainder)
        remainder)))

(the .public even?
  (Predicate It)
  (let [two (+ ..positive_one ..positive_one)]
    (|>> (..% two)
         (= ..zero))))

(the .public odd?
  (Predicate It)
  (|>> ..even?
       not))

... https://en.wikipedia.org/wiki/Greatest_common_divisor
(the .public (greatest_common_divisor a b)
  (-> It It
      It)
  (|> (//.greatest_common_divisor (its #absolute a)
                                  (its #absolute b))
      (case.some natural)))

(alias [gcd]
       ..greatest_common_divisor)

... https://en.wikipedia.org/wiki/Coprime_integers
(the .public (co_prime? a b)
  (-> It
      (Predicate It))
  (..= ..positive_one
       (..greatest_common_divisor a b)))

... https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
(the .public (extended_greatest_common_divisor a b)
  (-> It It
      [[It It] It])
  (loop (extended_greatest_common_divisor [x ..positive_one x1 ..zero
                                           y ..zero y1 ..positive_one
                                           a1 (..absolute a) b1 (..absolute b)])
    (if (= ..zero b1)
        [[x y] a1]
        (let [q (/ b1 a1)]
          (extended_greatest_common_divisor x1 (- (..x q x1) x)
                                            y1 (- (..x q y1) y)
                                            b1 (- (..x q b1) a1))))))

(alias [extended_gcd]
       ..extended_greatest_common_divisor)

... https://en.wikipedia.org/wiki/Least_common_multiple
(`` (the .public (least_common_multiple a b)
      (-> It It
          It)
      (if (or (= ..zero a)
              (= ..zero b))
          ..zero
          (/ (greatest_common_divisor a b)
             (x a b)))))

(alias [lcm]
       ..least_common_multiple)

(the .public (multiple? reference it)
  (-> It
      (Predicate It))
  (|> it
      (% reference)
      (= ..zero)))

(the .public (divisor? reference it)
  (-> It
      (Predicate It))
  (multiple? it reference))

(the .public equivalence
  (Equivalence It)
  (implementation
   (the = ..=)))

(the .public order
  (Order It)
  (implementation
   (the equivalence ..equivalence)
   (the < ..<)))

(the .public hash
  (Hash It)
  (implementation
   (the equivalence ..equivalence)
   (the hash
     (|>> (its #absolute)
          (by //.hash hash)))))

(the .public enum
  (Enum It)
  (implementation
   (the order ..order)
   (the succ (+ ..positive_one))
   (the pred (- ..positive_one))))

(with_template [<name> <composite> <identity>]
  [(the .public <name>
     (Monoid It)
     (implementation
      (the identity <identity>)
      (the composite <composite>)))]

  [[addition       ..+   ..zero]
   [multiplication ..x   ..positive_one]])

(with_template [,/ ,//]
  [(the .public ,/
     (Format Text It)
     (implementation
      (the (as it)
        (text (`` (when (its #signum it)
                    signum.positive (,, (static.text (signum.as_text signum.positive)))
                    signum.negative (,, (static.text (signum.as_text signum.negative)))))
              (by ,// as (its #absolute it))))

      (the (of it)
        (let [size (.text_size# it)]
          (if (//_64.> 1 size)
              (monad.let try.monad
                [signum (`` (when (.text_clip# 0 1 it)
                              (,, (static.text (signum.as_text signum.positive)))
                              (pure signum.positive)
                              
                              (,, (static.text (signum.as_text signum.negative)))
                              (pure signum.negative)
                              
                              else
                              {try.#Failure error.not_valid}))
                 absolute (|> it
                              (.text_clip# 1 (-- size))
                              (by ,// of))]
                (pure [#signum signum
                       #absolute absolute]))
              {try.#Failure error.not_valid})))))]

  [[base_02 //.base_02]
   [base_08 //.base_08]
   [base_10 //.base_10]
   [base_16 //.base_16]])

(the .public (reflection origin it)
  (-> It It
      It)
  (- (- origin it) origin))
