(.require
 [library
  [lux (.except i64)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["?" parser]
    ["[0]" maybe]
    ["[0]" try]]
   [meta
    ["[0]" static]
    ["[0]" type (.only)
     ["?[1]" \\parser]]]]]
 [//
  ["[0]" i64]])

(def sub
  (maybe.trusted (i64.sub 16)))

(`` (type .public I16
      (I64 (,, (|> (type_of ..sub)
                   (?type.result (?type.applied (?.after (?type.exactly i64.Sub)
                                                         ?type.any)))
                   try.trusted
                   (static.literal type.code))))))

(def .public equivalence (Equivalence I16) (at ..sub sub_equivalence))
(def .public width Nat (at ..sub bits))
(def .public i16 (-> I64 I16) (at ..sub narrow))
(def .public i64 (-> I16 I64) (at ..sub wide))
