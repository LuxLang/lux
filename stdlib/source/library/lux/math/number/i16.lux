(.require
 [library
  [lux (.except i64)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["[0]" maybe]]
   [meta
    [type (.only by_example)]]]]
 [//
  ["[0]" i64 (.only Sub)]])

(def sub
  (maybe.trusted (i64.sub 16)))

(def .public I16
  Type
  ... TODO: Switch to the cleaner approach ASAP.
  (when (type_of ..sub)
    {.#Apply :size: :sub:}
    (type_literal (I64 :size:))

    _
    (undefined))
  ... (by_example [size]
  ...   (is (Sub size)
  ...       ..sub)
  ...   (I64 size))
  )

(def .public equivalence (Equivalence I16) (at ..sub sub_equivalence))
(def .public width Nat (at ..sub bits))
(def .public i16 (-> I64 I16) (at ..sub narrow))
(def .public i64 (-> I16 I64) (at ..sub wide))
