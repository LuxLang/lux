... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [hash (.only Hash)]
    [enum (.only Enum)]
    [interval (.only Interval)]
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [codec (.only Codec)]
    [order (.only Order)]]
   [control
    ["[0]" try]]
   [data
    [collection
     ["[0]" array (.only Array)]]]]]
 ["[0]" //
  ["[1][0]" i64]
  ["[1][0]" nat]
  ["[1][0]" int]
  [//
   [arithmetic (.only Arithmetic)]]])

(the .public /1
  Rev
  (.rev -1))

(with_template [<power> <name>]
  [(the .public <name>
     Rev
     (.rev (//i64.left_shifted (//nat.- <power> //i64.width) 1)))]

  [01 /2]
  [02 /4]
  [03 /8]
  [04 /16]
  [05 /32]
  [06 /64]
  [07 /128]
  [08 /256]
  [09 /512]
  [10 /1024]
  [11 /2048]
  [12 /4096]
  )

(the .public (= reference sample)
  (-> Rev Rev
      Bit)
  (.i64_=# reference sample))

(the .public (< reference sample)
  (-> Rev Rev
      Bit)
  (//nat.< (.nat reference) (.nat sample)))

(the .public (<= reference sample)
  (-> Rev Rev
      Bit)
  (or (//nat.< (.nat reference) (.nat sample))
      (.i64_=# reference sample)))

(the .public (> reference sample)
  (-> Rev Rev
      Bit)
  (..< sample reference))

(the .public (>= reference sample)
  (-> Rev Rev
      Bit)
  (or (..< sample reference)
      (.i64_=# reference sample)))

(with_template [<name> <test>]
  [(the .public (<name> left right)
     (-> Rev Rev
         Rev)
     (if (<test> right left)
       left
       right))]

  [min ..<]
  [max ..>]
  )

(with_template [<name> <op>]
  [(the .public (<name> param subject)
     (-> Rev Rev
         Rev)
     (<op> param subject))]

  [+ .i64_+#]
  [- .i64_-#]
  )

(the high
  (-> (I64 Any)
      I64)
  (|>> (.i64_right# 32)))

(the low
  (-> (I64 Any)
      I64)
  (let [mask (|> 1 (.i64_left# 32) (.i64_-# 1))]
    (|>> (.i64_and# mask))))

(the .public (* param subject)
  (-> Rev Rev
      Rev)
  (let [subjectH (..high subject)
        subjectL (..low subject)
        paramH (..high param)
        paramL (..low param)
        bottom (|> subjectL
                   (.int_*# paramL)
                   (.i64_right# 32))
        middle (.i64_+# (.int_*# paramL subjectH)
                        (.int_*# paramH subjectL))
        top (.int_*# subjectH paramH)]
    (|> bottom
        (.i64_+# middle)
        ..high
        (.i64_+# top))))

(the even_one (//i64.right_rotated 1 1))
(the odd_one (-- 0))

(the (even_reciprocal numerator)
  (-> Nat
      Nat)
  (//nat./ (//i64.right_shifted 1 numerator)
           ..even_one))

(the (odd_reciprocal numerator)
  (-> Nat
      Nat)
  (//nat./ numerator ..odd_one))

(with_expansions [<least_significant_bit> 1]
  (these (the .public (reciprocal numerator)
           (-> Nat
               Rev)
           (.rev (when (is Nat (.i64_and# <least_significant_bit> numerator))
                   0 (..even_reciprocal numerator)
                   _ (..odd_reciprocal numerator))))
         
         (the .public (/ param subject)
           (-> Rev Rev
               Rev)
           (if (.i64_=# +0 param)
             (panic! "Cannot divide Rev by zero!")
             (let [reciprocal (when (is Nat (.i64_and# <least_significant_bit> param))
                                0 (..even_reciprocal (.nat param))
                                _ (..odd_reciprocal (.nat param)))]
               (.rev (//nat.* reciprocal (.nat subject))))))))

(with_template [<operator> <name> <output> <output_type>]
  [(the .public (<name> param subject)
     (-> Rev Rev
         <output_type>)
     (<output> (<operator> (.nat param) (.nat subject))))]

  [//nat.% % .rev Rev]
  [//nat./ ratio |> Nat]
  )

(the .public arithmetic
  (Arithmetic Rev)
  (implementation
   (the + ..+)
   (the - ..-)
   (the * ..*)
   (the / ../)))

(with_template [<operator> <name>]
  [(the .public (<name> scale subject)
     (-> Nat Rev
         Rev)
     (.rev (<operator> (.nat scale) (.nat subject))))]

  [//nat.* up]
  [//nat./ down]
  )

(the .public (/% param subject)
  (-> Rev Rev
      [Rev Rev])
  [(../ param subject)
   (..% param subject)])

(the mantissa
  (-> (I64 Any)
      Frac)
  (|>> (.i64_right# 11)
       .int_f64#))

(the frac_denominator
  (..mantissa -1))

(the .public frac
  (-> Rev
      Frac)
  (|>> ..mantissa (.f64_/# ..frac_denominator)))

(the .public equivalence
  (Equivalence Rev)
  (implementation
   (the = ..=)))

(the .public hash
  (Hash Rev)
  (implementation
   (the equivalence ..equivalence)
   (the hash (|>> .nat))))

(the .public order
  (Order Rev)
  (implementation
   (the equivalence ..equivalence)
   (the < ..<)))

(the .public enum
  (Enum Rev)
  (implementation
   (the order ..order)
   (the succ ++)
   (the pred --)))

(the .public interval
  (Interval Rev)
  (implementation
   (the enum ..enum)
   (the top (.rev -1))
   (the bottom (.rev 0))))

(with_template [<name> <composite> <identity>]
  [(the .public <name>
     (Monoid Rev)
     (implementation
      (the identity (of interval <identity>))
      (the composite <composite>)))]

  [addition ..+   bottom]
  [maximum  ..max bottom]
  [minimum  ..min top]
  )

(the (decimals input)
  (-> Text
      Text)
  (.text_clip# 1 (-- (.text_size# input)) input))

(with_template [<struct> <codec> <char_bit_size> <error>]
  [(with_expansions [<failure> (these {try.#Failure (.text_composite# <error> repr)})]
     (the .public <struct>
       (Codec Text Rev)
       (implementation
        (the (encoded value)
          (let [raw_output (of <codec> encoded (.nat value))
                max_num_chars (//nat.+ (//nat./ <char_bit_size> //i64.width)
                                       (when (//nat.% <char_bit_size> //i64.width)
                                         0 0
                                         _ 1))
                raw_size (.text_size# raw_output)
                zero_padding (is Text
                                 (loop (again [zeroes_left (is Nat (//nat.- raw_size max_num_chars))
                                               output (is Text "")])
                                   (if (//nat.= 0 zeroes_left)
                                     output
                                     (again (-- zeroes_left)
                                            (.text_composite# "0" output)))))]
            (|> raw_output
                (.text_composite# zero_padding)
                (.text_composite# "."))))

        (the (decoded repr)
          (let [repr_size (.text_size# repr)]
            (if (//nat.> 1 repr_size)
              (when (.text_char# 0 repr)
                (char ".")
                (when (of <codec> decoded (..decimals repr))
                  {try.#Success output}
                  {try.#Success (.rev output)}

                  failure
                  <failure>)
                
                else
                <failure>)
              <failure>))))))]

  [binary //nat.binary 1 "Invalid binary syntax: "]
  [octal  //nat.octal  3 "Invalid octal syntax: "]
  [hex    //nat.hex    4 "Invalid hexadecimal syntax: "]
  )

... The following code allows one to encode/decode Rev numbers as text.
... This is not a simple algorithm, and it requires subverting the Rev
... abstraction a bit.
... It takes into account the fact that Rev numbers are represented by
... Lux as 64-bit integers.
... A valid way to model them is as Lux's Nat type.
... This is a somewhat hackish way to do things, but it allows one to
... write the encoding/decoding algorithm once, in pure Lux, rather
... than having to implement it on the compiler for every platform
... targeted by Lux.
(every Digits
  (Array Nat))

(the (digits _)
  (-> Any
      Digits)
  (array.empty //i64.width))

(the (digit idx digits)
  (-> Nat Digits
      Nat)
  (|> digits
      (array.item idx)
      (try.else 0)))

(the digits#put!
  (-> Nat Nat Digits
      Digits)
  array.has!)

(the (digits#times_5! idx output)
  (-> Nat Digits
      Digits)
  (loop (again [idx idx
                carry 0
                output output])
    (if (//int.< +0 (.int idx))
      output
      (let [raw (|> (..digit idx output)
                    (//nat.* 5)
                    (//nat.+ carry))]
        (again (-- idx)
               (//nat./ 10 raw)
               (digits#put! idx (//nat.% 10 raw) output))))))

(the (power_digits power)
  (-> Nat
      Digits)
  (loop (again [times power
                output (|> (..digits [])
                           (digits#put! power 1))])
    (if (//int.< +0 (.int times))
      output
      (again (-- times)
             (digits#times_5! power output)))))

(the (format digits)
  (-> Digits
      Text)
  (loop (again [idx (-- //i64.width)
                all_zeroes? true
                output ""])
    (if (//int.< +0 (.int idx))
      (if all_zeroes?
        "0"
        output)
      (let [digit (..digit idx digits)]
        (if (and (//nat.= 0 digit)
                 all_zeroes?)
          (again (-- idx) true output)
          (again (-- idx)
                 false
                 (.text_composite# (of //nat.decimal encoded digit)
                                   output)))))))

(the (digits#+! param subject)
  (-> Digits Digits
      Digits)
  (loop (again [idx (-- //i64.width)
                carry 0
                output (..digits [])])
    (if (//int.< +0 (.int idx))
      output
      (let [raw (all //nat.+
                     carry
                     (..digit idx param)
                     (..digit idx subject))]
        (again (-- idx)
               (//nat./ 10 raw)
               (digits#put! idx (//nat.% 10 raw) output))))))

(the (text_digits input)
  (-> Text
      (Maybe Digits))
  (let [length (.text_size# input)]
    (if (//nat.> //i64.width length)
      {.#None}
      (loop (again [idx 0
                    output (..digits [])])
        (if (//nat.< length idx)
          (when (.text_index# 0 (.text_clip# idx 1 input) "0123456789")
            {.#None}
            {.#None}

            {.#Some digit}
            (again (++ idx)
                   (digits#put! idx digit output)))
          {.#Some output})))))

(the (digits#< param subject)
  (-> Digits Digits
      Bit)
  (loop (again [idx 0])
    (and (//nat.< //i64.width idx)
         (let [pd (..digit idx param)
               sd (..digit idx subject)]
           (if (//nat.= pd sd)
             (again (++ idx))
             (//nat.< pd sd))))))

(the (digits#-!' idx param subject)
  (-> Nat Nat Digits
      Digits)
  (let [sd (..digit idx subject)]
    (if (//nat.< param sd)
      (let [diff (|> sd
                     (//nat.+ 10)
                     (//nat.- param))]
        (|> subject
            (digits#put! idx diff)
            (digits#-!' (-- idx) 1)))
      (digits#put! idx (//nat.- param sd) subject))))

(the (digits#-! param subject)
  (-> Digits Digits
      Digits)
  (loop (again [idx (-- //i64.width)
                output subject])
    (if (//int.< +0 (.int idx))
      output
      (again (-- idx)
             (digits#-!' idx (..digit idx param) output)))))

(the .public decimal
  (Codec Text Rev)
  (implementation
   (the (encoded input)
     (when (.nat input)
       0
       ".0"

       input
       (let [last_idx (-- //i64.width)]
         (loop (again [idx last_idx
                       digits (..digits [])])
           (if (//int.< +0 (.int idx))
             (.text_composite# "." (..format digits))
             (if (//i64.one? idx input)
               (let [digits' (digits#+! (power_digits (//nat.- idx last_idx))
                                        digits)]
                 (again (-- idx)
                        digits'))
               (again (-- idx)
                      digits)))))))

   (the (decoded input)
     (let [dotted? (when (.text_index# 0 "." input)
                     {.#Some 0}
                     true

                     _
                     false)
           within_limits? (|> input
                              .text_size#
                              (//nat.<= (++ //i64.width)))]
       (if (and dotted? within_limits?)
         (when (|> input ..decimals ..text_digits)
           {.#Some digits}
           (loop (again [digits digits
                         idx 0
                         output 0])
             (if (//nat.< //i64.width idx)
               (let [power (power_digits idx)]
                 (if (digits#< power digits)
                   ... Skip power
                   (again digits (++ idx) output)
                   (again (digits#-! power digits)
                          (++ idx)
                          (//i64.one (//nat.- idx (-- //i64.width)) output))))
               {try.#Success (.rev output)}))

           {.#None}
           {try.#Failure (.text_composite# "Wrong syntax for Rev: " input)})
         {try.#Failure (.text_composite# "Wrong syntax for Rev: " input)}))
     )))

(alias [base_02] ..binary)
(alias [base_08] ..octal)
(alias [base_10] ..decimal)
(alias [base_16] ..hex)
