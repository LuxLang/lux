... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [hash (.only Hash)]
    [enum (.only Enum)]
    [interval (.only Interval)]
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [format (.only Format)]
    ["[0]" order (.only Order)]]
   [control
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    [function
     [predicate (.only Predicate)]]]]]
 ["[0]" //
  ["[1][0]" natural]
  ["[1][0]" i64]
  [//
   [arithmetic (.only Arithmetic)]]])

(the .public Number
  .Integer)

(the It
  ..Number)

(the with_template' (.in_module# .prelude .with_template))

(with_template' [<name> <op>]
  [(the .public (<name> param subject)
     (-> It It
         Bit)
     (<op> param subject))]

  [= .i64_=#]
  [< .int_<#]
  )

(the .public (<= reference it)
  (-> It It
      Bit)
  (if (.int_<# reference it)
    true
    (.i64_=# reference it)))

(the .public (> reference it)
  (-> It It
      Bit)
  (.int_<# it reference))

(the .public (>= reference it)
  (-> It It
      Bit)
  (if (.int_<# it reference)
    true
    (.i64_=# reference it)))

(with_template' [<comparison> <name>]
  [(the .public <name>
     (Predicate It)
     (<comparison> +0))]

  [..> positive?]
  [..< negative?]
  [..= zero?]
  )

(with_template' [<name> <test>]
  [(the .public (<name> left right)
     (-> It It
         It)
     (if (<test> right left)
       left
       right))]

  [min ..<]
  [max ..>]
  )

(with_template' [<name> <op>]
  [(the .public (<name> param subject)
     (-> It It
         It)
     (<op> param subject))]

  [+ .i64_+#]
  [- .i64_-#]
  [* .int_*#]
  [/ .int_/#]
  [% .int_%#]
  )

(the .public arithmetic
  (Arithmetic It)
  (implementation
   (the + ..+)
   (the - ..-)
   (the * ..*)
   (the / ../)))

(the .public (/% param subject)
  (-> It It
      [It It])
  [(../ param subject)
   (..% param subject)])

(the .public (opposite it)
  (-> It
      It)
  (..- it +0))

(the .public (absolute it)
  (-> It
      It)
  (if (..< +0 it)
    (..opposite it)
    it))

(alias [abs]
       ..absolute)

(the .public (signum it)
  (-> It
      It)
  (if
    (..= +0 it) +0
    (..< +0 it) -1
    ... else
    +1))

... https://rob.conery.io/2018/08/21/mod-and-remainder-are-not-the-same/
(the .public (mod divisor dividend)
  (-> It It
      It)
  (let [remainder (..% divisor dividend)]
    (if (or (and (..< +0 divisor)
                 (..> +0 remainder))
            (and (..> +0 divisor)
                 (..< +0 remainder)))
      (..+ divisor remainder)
      remainder)))

(the .public even?
  (-> It
      Bit)
  (|>> (..% +2) (.i64_=# +0)))

(the .public odd?
  (-> It
      Bit)
  (|>> ..even? not))

... https://en.wikipedia.org/wiki/Greatest_common_divisor
(the .public (gcd a b)
  (-> It It
      It)
  (.integer (//natural.gcd (.natural (..abs a))
                           (.natural (..abs b)))))

(alias [greatest_common_divisor]
       ..gcd)

(the .public (co_prime? a b)
  (-> It It
      Bit)
  (..= +1 (..gcd a b)))

... https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
(the .public (extended_gcd a b)
  (-> It It
      [[It It] It])
  (loop (extended_gcd [x +1 x1 +0
                       y +0 y1 +1
                       a1 (..abs a) b1 (..abs b)])
    (when b1
      +0 [[x y] a1]
      _ (let [q (/ b1 a1)]
          (extended_gcd x1 (- (* q x1) x)
                        y1 (- (* q y1) y)
                        b1 (- (* q b1) a1))))))

(alias [extended_greatest_common_divisor]
       ..extended_gcd)

... https://en.wikipedia.org/wiki/Least_common_multiple
(`` (the .public (lcm a b)
      (-> It It
          It)
      (when [a b]
        (,, (with_template' [<pattern>]
              [<pattern>
               +0]

              [[_ +0]]
              [[+0 _]]))

        _
        (|> a (/ (gcd a b)) (* b)))))

(alias [least_common_multiple]
       ..lcm)

(the .public decimal
  (-> It
      Decimal)
  (|>> .int_f64#))

(the .public equivalence
  (Equivalence It)
  (implementation
   (the = ..=)))

(the .public order
  (Order It)
  (implementation
   (the equivalence ..equivalence)
   (the < ..<)))

(the .public enum
  (Enum It)
  (implementation
   (the order ..order)
   (the succ ++)
   (the pred --)))

... TODO: Find out why the numeric literals fail during JS compilation.
(the .public interval
  (Interval It)
  (implementation
   (the enum ..enum)
   (the top
     ... +9,223,372,036,854,775,807
     (let [half (//i64.left_shifted 62 +1)]
       (+ half
          (-- half))))
   (the bottom
     ... -9,223,372,036,854,775,808
     (//i64.left_shifted 63 +1))))

(with_template' [<name> <composite> <identity>]
  [(the .public <name>
     (Monoid It)
     (implementation
      (the identity <identity>)
      (the composite <composite>)))]

  [addition       ..+   +0]
  [multiplication ..*   +1]
  [maximum        ..max (of ..interval bottom)]
  [minimum        ..min (of ..interval top)]
  )

(the -sign "-")
(the +sign "+")

(with_template' [<struct> <format> <error>]
  [(the .public <struct>
     (Format Text It)
     (implementation
      (the (injection value)
        (if (..< +0 value)
          (|> value ++ ..opposite .natural ++ (of <format> injection) (.text_composite# ..-sign))
          (|> value .natural (of <format> injection) (.text_composite# ..+sign))))

      (the (projection repr)
        (let [input_size (.text_size# repr)]
          (if (//natural.> 1 input_size)
            (when (.text_clip# 0 1 repr)
              ..+sign
              (|> repr
                  (.text_clip# 1 (-- input_size))
                  (of <format> projection)
                  (of try.functor each (|>> .integer)))
              
              ..-sign
              (|> repr
                  (.text_clip# 1 (-- input_size))
                  (of <format> projection)
                  (of try.functor each (|>> -- .integer ..opposite --)))
              
              _
              {try.#Failure <error>})
            {try.#Failure <error>})))))]

  [base_02 //natural.base_02 "Invalid binary syntax for Integer."]
  [base_08 //natural.base_08 "Invalid octal syntax for Integer."]
  [base_10 //natural.base_10 "Invalid syntax for Integer."]
  [base_16 //natural.base_16 "Invalid hexadecimal syntax for Integer."]
  )

(the .public hash
  (Hash It)
  (implementation
   (the equivalence ..equivalence)
   (the hash (|>> .natural))))

(the _expansion#let (.in_module# .prelude .expansion#let))

(the .public (right_shifted parameter subject)
  (-> Natural It
      It)
  (<| (_expansion#let [<positive> (//i64.right_shifted parameter subject)])
      (if (< +0 subject)
        (|> +1
            (//i64.left_shifted parameter)
            --
            (//i64.left_shifted (//natural.- parameter //i64.width))
            (//i64.or <positive>))
        <positive>)))

(alias [binary] ..base_02)
(alias [octal] ..base_08)
... (alias [decimal] ..base_10)
(alias [hex] ..base_16)
