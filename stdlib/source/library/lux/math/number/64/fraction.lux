... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text natural)
   [abstract
    ["<>" projection]
    ["[0]" equivalence]
    ["[0]" monoid]
    ["[0]" order]
    ["[0]" format]
    ["[0]" monad]]
   [control
    ["[0]" maybe]]
   [data
    [collection
     ["[0]" list
      ["?[1]" \\projection]]]]
   ["[0]" error (.only)
    ["[0]" try]]
   [function
    ["[0]" predicate]]
   [data
    ["[0]" text]]
   [macro
    ["[0]" syntax]
    ["[0]" template]
    ["[0]" expansion]]]]
 [//
  ["//" natural]
  ["[0]" integer]
  ["[0]" decimal]
  [///
   ["[0]" unit]]])

(the .public extension
  "fraction#")

... https://en.wikipedia.org/wiki/Delimiter
(the .public delimiter
  "/")

(expansion.let [,*variables (these ,//#Number ,//#number
                                   ,//#= ,//#< ,//#greatest_common_divisor
                                   ,//#0 ,//#1
                                   ,//#+ ,//#- ,//#x ,//#/ ,//#%
                                   ,//#delimiter ,//#base_10)]
  (these (the types_of_module
           (template.macro (_ ,*variables)
             [... [Fraction](https://en.wikipedia.org/wiki/Fraction)
              (every .public Number
                (Record
                 [#numerator ,//#Number
                  #denominator ,//#Number]))

              ... [Fraction](https://en.wikipedia.org/wiki/Fraction)
              ... https://en.wikipedia.org/wiki/Number#Classification
              (alias [Fraction Q+]
                     Number)
              ]))

         (the values_of_module
           (template.macro (_ ,*variables)
             [(the .public not_a_natural
                (error.error "Not a natural number."))

              (the .public (natural value)
                (-> Number
                    (try.Try ,//#Number))
                (if (,//#= ,//#1 (its #denominator value))
                    {try.#Success (its #numerator value)}
                    {try.#Failure not_a_natural}))

              (the .public (normal it)
                (Change Number)
                (let [(open "/[0]") it
                      common (,//#greatest_common_divisor /#numerator /#denominator)]
                  (if (,//#= ,//#0 common)
                      it
                      [#numerator (,//#/ common /#numerator)
                       #denominator (,//#/ common /#denominator)])))

              (template.with [,numerator ,name]
                [(the .public ,name
                   Number
                   [#numerator ,numerator
                    #denominator ,//#1])]

                [[,//#0 zero]
                 [,//#1 one]])

              (template.with [<numerator> <fraction>]
                [(the .public <fraction>
                   Number
                   [#numerator <numerator>
                    #denominator ,//#0])]

                [[,//#1 infinity]
                 ... https://en.wikipedia.org/wiki/Indeterminate_form
                 [,//#0 indeterminate]])

              (template.with [,/% ,name ,reference]
                [(the .public (,name (open "/[0]"))
                   (Change Number)
                   [#numerator (,/% /#denominator
                                    /#numerator)
                    #denominator ,reference])]

                [[,//#/ whole ,//#1]
                 [,//#% partial /#denominator]])]))

         (the order_of_module
           (template.macro (_ ,*variables)
             [(the .public (= parameter subject)
                (-> Number Number
                    Bit)
                (,//#= (,//#x (its #numerator parameter)
                              (its #denominator subject))
                       (,//#x (its #denominator parameter)
                              (its #numerator subject))))

              (the .public equivalence
                (equivalence.Equivalence Number)
                (implementation
                 (the = =)))

              (the (equal parameter subject)
                (-> Number Number
                    [,//#Number ,//#Number])
                [(,//#x (its #denominator subject)
                        (its #numerator parameter))
                 (,//#x (its #denominator parameter)
                        (its #numerator subject))])

              (the .public (< parameter subject)
                (-> Number Number
                    Bit)
                (let [[parameter' subject'] (equal parameter subject)]
                  (,//#< parameter' subject')))

              (the .public (<= parameter subject)
                (-> Number Number
                    Bit)
                (or (< parameter subject)
                    (= parameter subject)))

              (the .public (> parameter subject)
                (-> Number Number
                    Bit)
                (< subject parameter))

              (the .public (>= parameter subject)
                (-> Number Number
                    Bit)
                (or (> parameter subject)
                    (= parameter subject)))

              (the .public order
                (order.Order Number)
                (implementation
                 (the equivalence equivalence)
                 (the < <)))

              (template.with [,name <test>]
                [(the .public (,name left right)
                   (-> Number Number
                       Number)
                   (if (<test> right left)
                       left
                       right))]

                [[minor <]
                 [major >]])

              (template.with [,identity ,composite ,name]
                [(the .public ,name
                   (monoid.Monoid Number)
                   (implementation
                    (the identity ,identity)
                    (the composite ,composite)))]
                
                [[infinity minor minimum]
                 [zero major maximum]])
              ]))

         (the arithmetic_of_module_1/2
           (template.macro (_ ,*variables)
             [(the .public (+ parameter subject)
                (-> Number Number
                    Number)
                (let [[parameter' subject'] (equal parameter subject)]
                  (normal [#numerator (,//#+ parameter' subject')
                           #denominator (,//#x (its #denominator parameter)
                                               (its #denominator subject))])))

              (the (-' origin it)
                (-> Number
                    (Change Number))
                (let [denominator (,//#x (its #denominator origin)
                                         (its #denominator it))
                      [origin it] (equal origin it)]
                  (normal [#numerator (,//#- origin it)
                           #denominator denominator])))

              (the .public (excess origin it)
                (-> Number
                    (Change Number))
                (if (< origin it)
                    (-' it origin)
                    zero))

              (the .public (- origin it)
                (-> Number
                    (Change Number))
                (if (< origin it)
                    zero
                    (-' origin it)))

              (the .public (x parameter subject)
                (-> Number Number
                    Number)
                (normal [#numerator (,//#x (its #numerator parameter)
                                           (its #numerator subject))
                         #denominator (,//#x (its #denominator parameter)
                                             (its #denominator subject))]))

              (the .public (/ parameter subject)
                (-> Number Number
                    Number)
                (let [[parameter' subject'] (equal parameter subject)]
                  (normal [#numerator subject'
                           #denominator parameter'])))

              (the .public (% parameter subject)
                (-> Number Number
                    Number)
                (let [[parameter' subject'] (equal parameter subject)
                      quotient (,//#/ parameter' subject')]
                  (|> subject
                      (- (revised #numerator (,//#x quotient) parameter)))))
              ]))

         (the arithmetic_of_module_2/2
           (template.macro (_ ,*variables)
             [(the .public (reciprocal (open "/[0]"))
                (Change Number)
                [#numerator /#denominator
                 #denominator /#numerator])

              (every .public Exponent
                Integer)

              ... https://en.wikipedia.org/wiki/Exponentiation
              ... https://en.wikipedia.org/wiki/Exponentiation_by_squaring
              (the .public (^ power base)
                (-> Exponent Number
                    Number)
                (if (.int_<# +0 power)
                    (reciprocal (^ (integer.opposite power)
                                   base))
                    (loop (^ [power power
                              base base
                              it one])
                      (if (.i64_=# +0 power)
                          it
                          (^ (.i64_right# 1 power)
                             (x base base)
                             (if (.i64_=# +1 (.i64_and# 1 power))
                                 (x base it)
                                 it))))))

              (template.with [,identity ,composite ,name]
                [(the .public ,name
                   (monoid.Monoid Number)
                   (implementation
                    (the identity ,identity)
                    (the composite ,composite)))]
                
                [[zero + addition]
                 [one x multiplication]])
              ]))

         (the arithmetic_of_module
           (template.macro (_ ,*variables)
             [(..arithmetic_of_module_1/2 ,*variables)
              (..arithmetic_of_module_2/2 ,*variables)]))

         (the formats_of_module
           (template.macro (_ ,*variables)
             [(the .public (as_text (open "/[0]"))
                (text.Injection Number)
                (.text (by ,//#base_10 as /#numerator)
                       ,//#delimiter
                       (by ,//#base_10 as /#denominator)))

              (the .public text
                (format.Format Text Number)
                (implementation
                 (the as as_text)

                 (the (of input)
                   (when (text.split_by ,//#delimiter input)
                     {.#Some [num denom]}
                     (monad.do try.monad
                       [numerator (by ,//#base_10 of num)
                        denominator (by ,//#base_10 of denom)]
                       (pure (normal [#numerator numerator
                                      #denominator denominator])))
                     
                     {.#None}
                     {try.#Failure (.text "Invalid syntax for fraction: " input)}))))

              (template.with [<format> <as> <of> ,unit]
                [(expansion.let [,exchange_rate (these [#numerator (,//#number (its unit.#factor ,unit))
                                                        #denominator ,//#1])]
                   (these (the .public <as>
                            (Change Number)
                            (x ,exchange_rate))
                          
                          (the .public <of>
                            (Change Number)
                            (/ ,exchange_rate))
                          
                          (the .public <format>
                            (format.Format Text Number)
                            (let [suffix (its unit.#suffix ,unit)]
                              (implementation
                               (the as
                                 (|>> <as>
                                      whole
                                      natural
                                      (try.else ,//#0)
                                      (by ,//#base_10 as)
                                      (text.suffix suffix)))

                               (the (of it)
                                 (when (text.split_by suffix it)
                                   {.#Some [it ""]}
                                   (|> it
                                       (by ,//#base_10 of)
                                       (by try.functor each
                                           (|>> [#denominator ,//#1
                                                 #numerator]
                                                <of>)))
                                   
                                   _
                                   {try.#Failure format.not_valid})))))))]

                [[degree as_degree of_degree unit.degree]
                 [gradian as_gradian of_gradian unit.gradian]
                 [per_cent as_per_cent of_per_cent unit.per_cent]
                 [per_mille as_per_mille of_per_mille unit.per_mille]
                 [per_myriad as_per_myriad of_per_myriad unit.per_myriad]])
              ]))

         (the .public module
           (template.macro (_ ,*variables)
             [(..types_of_module ,*variables)
              (..values_of_module ,*variables)
              (..order_of_module ,*variables)
              (..arithmetic_of_module ,*variables)
              (..formats_of_module ,*variables)

              (the .public (approximately? margin_of_error standard value)
                (-> Number Number Number
                    Bit)
                (|> (- (minor standard value)
                       (major standard value))
                    (<= margin_of_error)))

              (the .public finite?
                (predicate.Predicate Number)
                (|>> (= infinity)
                     not))

              (the .public (determinate? it)
                (predicate.Predicate Number)
                (not (and (,//#= (its #numerator indeterminate)
                                 (its #numerator it))
                          (,//#= (its #denominator indeterminate)
                                 (its #denominator it)))))

              (the .public (inversion origin it)
                (-> Number Number
                    Number)
                (/ (/ origin it) origin))
              ]))))

(..module .Natural <|
          //.= //.< //.greatest_common_divisor
          //.zero //.one
          //.+ //.- //.x //./ //.%
          ..delimiter //.base_10)

(the .public new
  (syntax.macro (_ [numerator ?list.any
                    ?denominator (<>.maybe ?list.any)])
    (pure (list (` (normal [#numerator (, numerator)
                            #denominator (, (maybe.else (' //.one) ?denominator))]))))))

(the .public (decimal it)
  (-> Number
      Decimal)
  (decimal./ (//.decimal (its #denominator it))
             (//.decimal (its #numerator it))))
