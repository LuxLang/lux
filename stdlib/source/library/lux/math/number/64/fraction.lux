... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text natural)
   [abstract
    ["<>" projection]
    ["[0]" equality]
    ["[0]" monoid]
    ["[0]" order]
    ["[0]" format]
    ["[0]" monad]]
   [data
    [collection
     ["[0]" list
      ["?[1]" \\projection]]]]
   ["[0]" error (.only)
    ["[0]" try]]
   ["[0]" function (.only)
    ["[0]" predicate]]
   [data
    ["[0]" text]]
   [macro
    ["[0]" template]
    ["[0]" expansion]]
   [type
    ["[0]" nominal]]
   [aspect
    ["[0]" case]]]]
 [//
  ["//" natural]
  ["[0]" integer]
  ["[0]" decimal]
  [///
   ["[0]" unit]]])

(the .public extension
  "fraction#")

... https://en.wikipedia.org/wiki/Delimiter
(the .public delimiter
  "/")

(expansion.let [,*variables (these ,Number ,number
                                   ,= ,< ,greatest_common_divisor
                                   ,0 ,1
                                   ,+ ,- ,x ,/ ,%
                                   ,base_10)]
  (these (the values_of_module
           (template.macro (_ ,*variables)
             [(the numerator'
                (template.macro (_ ,it)
                  [(|> ,it
                       nominal.as
                       (its :numerator))]))

              (the denominator'
                (template.macro (_ ,it)
                  [(|> ,it
                       nominal.as
                       (its :denominator))]))

              (the .public numerator
                (-> Number
                    ,Number)
                (|>> numerator'))

              (the .public denominator
                (-> Number
                    ,Number)
                (|>> denominator'))

              (the .public natural
                (case.Case Number ,Number)
                (case.new (function (_ it)
                            (if (,= ,1 (denominator' it))
                                {.:Right (numerator' it)}
                                {.:Left it}))
                          (|>> [:denominator ,1
                                :numerator]
                               nominal.of)))

              (the .public (new denominator numerator)
                (-> ,Number ,Number
                    Number)
                (let [common (,greatest_common_divisor numerator denominator)]
                  (nominal.of (if (,= ,0 common)
                                  [:numerator numerator
                                   :denominator denominator]
                                  [:numerator (,/ common numerator)
                                   :denominator (,/ common denominator)]))))

              (template.with [,numerator ,name]
                [(the .public ,name
                   Number
                   (case.some natural ,numerator))]

                [[,0 zero]
                 [,1 one]])

              (template.with [<numerator> <fraction>]
                [(the .public <fraction>
                   Number
                   (nominal.of [:numerator <numerator>
                                :denominator ,0]))]

                [[,1 infinity]
                 ... https://en.wikipedia.org/wiki/Indeterminate_form
                 [,0 indeterminate]])

              (template.with [,/% ,name ,reference]
                [(the .public (,name it)
                   (Change Number)
                   (new ,reference
                        (,/% (denominator' it)
                             (numerator' it))))]

                [[,/ whole ,1]
                 [,% partial (denominator' it)]])]))

         (the order_of_module
           (template.macro (_ ,*variables)
             [(the .public (= parameter subject)
                (-> Number Number
                    Bit)
                (and (,= (numerator' parameter)
                         (numerator' subject))
                     (,= (denominator' parameter)
                         (denominator' subject))))

              (the .public equality
                (equality.Equality Number)
                (implementation
                 (the = =)))

              (the (equal parameter subject)
                (-> Number Number
                    [,Number ,Number])
                [(,x (denominator' subject)
                     (numerator' parameter))
                 (,x (denominator' parameter)
                     (numerator' subject))])

              (the .public (~ reference it)
                (-> Number Number
                    Bit)
                (let [[reference it] (equal reference it)]
                  (,= reference it)))

              (the .public (< parameter subject)
                (-> Number Number
                    Bit)
                (let [[parameter' subject'] (equal parameter subject)]
                  (,< parameter' subject')))

              (the .public (<= parameter subject)
                (-> Number Number
                    Bit)
                (or (< parameter subject)
                    (= parameter subject)))

              (the .public (> parameter subject)
                (-> Number Number
                    Bit)
                (< subject parameter))

              (the .public (>= parameter subject)
                (-> Number Number
                    Bit)
                (or (> parameter subject)
                    (= parameter subject)))

              (the .public order
                (order.Order Number)
                (implementation
                 (the equality equality)
                 (the < <)))

              (template.with [,name <test>]
                [(the .public (,name left right)
                   (-> Number
                       (Change Number))
                   (if (<test> right left)
                       left
                       right))]

                [[minor <]
                 [major >]])

              (template.with [,identity ,composite ,name]
                [(the .public ,name
                   (monoid.Monoid Number)
                   (implementation
                    (the identity ,identity)
                    (the composite ,composite)))]
                
                [[infinity minor minimum]
                 [zero major maximum]])
              ]))

         (the arithmetic_of_module_1/2
           (template.macro (_ ,*variables)
             [(the .public (+ parameter subject)
                (-> Number
                    (Change Number))
                (let [[parameter' subject'] (equal parameter subject)]
                  (new (,x (denominator' parameter)
                           (denominator' subject))
                       (,+ parameter' subject'))))

              (the (-' origin it)
                (-> Number
                    (Change Number))
                (let [denominator (,x (denominator' origin)
                                      (denominator' it))
                      [origin it] (equal origin it)]
                  (new denominator
                       (,- origin it))))

              (the .public (excess origin it)
                (-> Number
                    (Change Number))
                (if (< origin it)
                    (-' it origin)
                    zero))

              (the .public (- origin it)
                (-> Number
                    (Change Number))
                (if (< origin it)
                    zero
                    (-' origin it)))

              (the .public (x parameter subject)
                (-> Number
                    (Change Number))
                (new (,x (denominator' parameter)
                         (denominator' subject))
                     (,x (numerator' parameter)
                         (numerator' subject))))

              (the .public (/ parameter subject)
                (-> Number
                    (Change Number))
                (let [[parameter' subject'] (equal parameter subject)]
                  (new parameter'
                       subject')))

              (the .public (% parameter subject)
                (-> Number
                    (Change Number))
                (let [[parameter' subject'] (equal parameter subject)
                      quotient (,/ parameter' subject')
                      whole (|> parameter
                                nominal.as
                                (revised :numerator (,x quotient))
                                nominal.of)]
                  (|> subject
                      (- whole))))
              ]))

         (the arithmetic_of_module_2/2
           (template.macro (_ ,*variables)
             [(the .public (reciprocal it)
                (Change Number)
                (nominal.of [:numerator (denominator' it)
                             :denominator (numerator' it)]))

              (every .public Exponent
                Integer)

              ... https://en.wikipedia.org/wiki/Exponentiation
              ... https://en.wikipedia.org/wiki/Exponentiation_by_squaring
              (the .public (^ power base)
                (-> Exponent Number
                    Number)
                (if (.int_<# +0 power)
                    (reciprocal (^ (integer.opposite power)
                                   base))
                    (loop (^ [power power
                              base base
                              it one])
                      (if (.i64_=# +0 power)
                          it
                          (^ (.i64_right# 1 power)
                             (x base base)
                             (if (.i64_=# +1 (.i64_and# 1 power))
                                 (x base it)
                                 it))))))

              (template.with [,composite ,identity ,name]
                [(the .public ,name
                   (monoid.Monoid Number)
                   (implementation
                    (the identity ,identity)
                    (the composite ,composite)))]
                
                [[+ zero addition]
                 [x one multiplication]])
              ]))

         (the arithmetic_of_module
           (template.macro (_ ,*variables)
             [(..arithmetic_of_module_1/2 ,*variables)
              (..arithmetic_of_module_2/2 ,*variables)]))

         (the formats_of_module
           (template.macro (_ ,*variables)
             [(the .public (as_text it)
                (text.Injection Number)
                (.text (by ,base_10 as (numerator' it))
                       ..delimiter
                       (by ,base_10 as (denominator' it))))

              (the .public text
                (format.Format Text Number)
                (implementation
                 (the as as_text)

                 (the (of input)
                   (when (text.split_by ..delimiter input)
                     {.:Some [num denom]}
                     (monad.let try.monad
                       [numerator (by ,base_10 of num)
                        denominator (by ,base_10 of denom)]
                       (pure (new denominator
                                  numerator)))
                     
                     {.:None}
                     {try.:Failure error.not_valid}))))

              (template.with [<format> <as> <of> ,unit]
                [(expansion.let [,exchange_rate (these (case.some natural (,number (its unit.:factor ,unit))))]
                   (these (the .public <as>
                            (Change Number)
                            (x ,exchange_rate))
                          
                          (the .public <of>
                            (Change Number)
                            (/ ,exchange_rate))
                          
                          (the .public <format>
                            (format.Format Text Number)
                            (let [suffix (its unit.:suffix ,unit)]
                              (implementation
                               (the as
                                 (|>> <as>
                                      whole
                                      (case.if natural)
                                      (function.or (function.constant ,0)
                                                   function.identity)
                                      (by ,base_10 as)
                                      (text.suffix suffix)))

                               (the (of it)
                                 (when (text.split_by suffix it)
                                   {.:Some [it ""]}
                                   (|> it
                                       (by ,base_10 of)
                                       (by try.functor each
                                           (|>> (case.some natural)
                                                <of>)))
                                   
                                   _
                                   {try.:Failure error.not_valid})))))))]

                [[degree as_degree of_degree unit.degree]
                 [gradian as_gradian of_gradian unit.gradian]
                 [per_cent as_per_cent of_per_cent unit.per_cent]
                 [per_mille as_per_mille of_per_mille unit.per_mille]
                 [per_myriad as_per_myriad of_per_myriad unit.per_myriad]])
              ]))

         (the .public module
           (template.macro (_ ,*variables)
             [... [Fraction](https://en.wikipedia.org/wiki/Fraction)
              (nominal.every .public Number
                (Record
                 [:numerator ,Number
                  :denominator ,Number])

                (..values_of_module ,*variables)
                (..order_of_module ,*variables)
                (..arithmetic_of_module ,*variables)
                (..formats_of_module ,*variables)

                (the .public (approximately? margin_of_error standard value)
                  (-> Number Number Number
                      Bit)
                  (<= margin_of_error
                      (- (minor standard value)
                         (major standard value))))

                (the .public (inversion origin it)
                  (-> Number
                      (Change Number))
                  (/ (/ origin it) origin)))

              ... [Fraction](https://en.wikipedia.org/wiki/Fraction)
              ... https://en.wikipedia.org/wiki/Number#Classification
              (alias [Fraction Q+]
                     Number)]))))

(..module .Natural <|
          //.= //.< //.greatest_common_divisor
          //.zero //.one
          //.+ //.- //.x //./ //.%
          //.base_10)

(the .public (decimal it)
  (-> Number
      Decimal)
  (decimal./ (//.decimal (denominator it))
             (//.decimal (numerator it))))
