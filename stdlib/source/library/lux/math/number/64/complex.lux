... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text argument)
   [abstract
    [equivalence (.only Equivalence)]
    [format (.only Format)]
    [monad (.only do)]
    ["<>" projection]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)
      ["?[1]" \\projection]]]]
   [math
    [number
     [/64
      ["d" decimal]
      ["[0]" integer]]]
    [geometry
     ["[0]" circle]
     ["[0]" hyperbola]]]
   [macro
    ["[0]" syntax]
    ["[0]" template]]
   [meta
    ["[0]" code
     ["<[1]>" \\projection]]]]]
 [////
  [arithmetic (.only Arithmetic)]])

(every .public Complex
  (Record
   [#real Decimal
    #imaginary Decimal]))

(the .public Number
  ..Complex)

(the .public complex
  (syntax.macro (_ [real ?list.any
                    ?imaginary (<>.maybe ?list.any)])
    (pure (list (` [..#real (, real)
                    ..#imaginary (, (maybe.else (' +0.0) ?imaginary))])))))

(the .public i
  Complex
  (..complex +0.0 +1.0))

(the .public +one
  Complex
  (..complex +1.0 +0.0))

(the .public -one
  Complex
  (..complex -1.0 +0.0))

(the .public zero
  Complex
  (..complex +0.0 +0.0))

(the .public one
  Complex
  (..complex +1.0 +0.0))

(the .public (not_a_number? complex)
  (-> Complex
      Bit)
  (or (d.not_a_number? (its #real complex))
      (d.not_a_number? (its #imaginary complex))))

(the .public (= param input)
  (-> Complex Complex
      Bit)
  (and (d.= (its #real param)
            (its #real input))
       (d.= (its #imaginary param)
            (its #imaginary input))))

(template.with [<name> <op>]
  [(the .public (<name> param input)
     (-> Complex Complex
         Complex)
     [#real (<op> (its #real param)
                  (its #real input))
      #imaginary (<op> (its #imaginary param)
                       (its #imaginary input))])]

  [[+ d.+]
   [- d.-]])

(the .public equivalence
  (Equivalence Complex)
  (implementation
   (the = ..=)))

(template.with [<name> <transform>]
  [(the .public <name>
     (-> Complex
         Complex)
     (|>> (revised #real <transform>)
          (revised #imaginary <transform>)))]

  [[opposite d.opposite]
   [signum d.signum]])

(the .public conjugate
  (-> Complex
      Complex)
  (revised #imaginary d.opposite))

(the .public (x' param input)
  (-> Decimal Complex
      Complex)
  [#real (d.x param
              (its #real input))
   #imaginary (d.x param
                   (its #imaginary input))])

(the .public (x param input)
  (-> Complex Complex
      Complex)
  [#real (d.- (d.x (its #imaginary param)
                   (its #imaginary input))
              (d.x (its #real param)
                   (its #real input)))
   #imaginary (d.+ (d.x (its #real param)
                        (its #imaginary input))
                   (d.x (its #imaginary param)
                        (its #real input)))])

(the .public (/ param input)
  (-> Complex Complex
      Complex)
  (let [(open "/[0]") param]
    (if (d.< (d.absolute /#imaginary)
             (d.absolute /#real))
        (let [quot (d./ /#imaginary /#real)
              denom (|> /#real (d.x quot) (d.+ /#imaginary))]
          [..#real (|> (its ..#real input) (d.x quot) (d.+ (its ..#imaginary input)) (d./ denom))
           ..#imaginary (|> (its ..#imaginary input) (d.x quot) (d.- (its ..#real input)) (d./ denom))])
        (let [quot (d./ /#real /#imaginary)
              denom (|> /#imaginary (d.x quot) (d.+ /#real))]
          [..#real (|> (its ..#imaginary input) (d.x quot) (d.+ (its ..#real input)) (d./ denom))
           ..#imaginary (|> (its ..#imaginary input) (d.- (d.x quot (its ..#real input))) (d./ denom))]))))

(the .public (/' param subject)
  (-> Decimal Complex
      Complex)
  (let [(open "/[0]") subject]
    [..#real (d./ param /#real)
     ..#imaginary (d./ param /#imaginary)]))

(the .public (% param input)
  (-> Complex Complex
      Complex)
  (let [scaled (/ param input)
        quotient (|> scaled
                     (revised #real d.floor)
                     (revised #imaginary d.floor))]
    (- (x quotient param)
       input)))

(the .public arithmetic
  (Arithmetic Complex)
  (implementation
   (the + ..+)
   (the - ..-)
   (the x ..x)
   (the / ../)))

(the .public (cos subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject]
    [..#real (d.x (hyperbola.co_sine /#imaginary)
                  (circle.cos /#real))
     ..#imaginary (d.opposite (d.x (hyperbola.sine /#imaginary)
                                   (circle.sin /#real)))]))

(the .public (cosh subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject]
    [..#real (d.x (circle.cos /#imaginary)
                  (hyperbola.co_sine /#real))
     ..#imaginary (d.x (circle.sin /#imaginary)
                       (hyperbola.sine /#real))]))

(the .public (sin subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject]
    [..#real (d.x (hyperbola.co_sine /#imaginary)
                  (circle.sin /#real))
     ..#imaginary (d.x (hyperbola.sine /#imaginary)
                       (circle.cos /#real))]))

(the .public (sinh subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject]
    [..#real (d.x (circle.cos /#imaginary)
                  (hyperbola.sine /#real))
     ..#imaginary (d.x (circle.sin /#imaginary)
                       (hyperbola.co_sine /#real))]))

(the .public (tan subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject
        r2 (d.x +2.0 /#real)
        i2 (d.x +2.0 /#imaginary)
        d (d.+ (circle.cos r2) (hyperbola.co_sine i2))]
    [..#real (d./ d (circle.sin r2))
     ..#imaginary (d./ d (hyperbola.sine i2))]))

(the .public (tanh subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject
        r2 (d.x +2.0 /#real)
        i2 (d.x +2.0 /#imaginary)
        d (d.+ (hyperbola.co_sine r2) (circle.cos i2))]
    [..#real (d./ d (hyperbola.sine r2))
     ..#imaginary (d./ d (circle.sin i2))]))

(the .public (absolute subject)
  (-> Complex
      Decimal)
  (let [(open "/[0]") subject]
    (if (d.< (d.absolute /#imaginary)
             (d.absolute /#real))
        (if (d.= +0.0 /#imaginary)
            (d.absolute /#real)
            (let [q (d./ /#imaginary /#real)]
              (d.x (d.^ +0.5 (d.+ +1.0 (d.x q q)))
                   (d.absolute /#imaginary))))
        (if (d.= +0.0 /#real)
            (d.absolute /#imaginary)
            (let [q (d./ /#real /#imaginary)]
              (d.x (d.^ +0.5 (d.+ +1.0 (d.x q q)))
                   (d.absolute /#real)))))))

(alias [abs]
       ..absolute)

(the .public (exp subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject
        r_exp (d.exp /#real)]
    [..#real (d.x r_exp (circle.cos /#imaginary))
     ..#imaginary (d.x r_exp (circle.sin /#imaginary))]))

(the .public (log subject)
  (-> Complex
      Complex)
  (let [(open "/[0]") subject]
    [..#real (|> subject ..absolute d.log)
     ..#imaginary (circle.atan_2 /#real /#imaginary)]))

(template.with [<name> <type> <op>]
  [(the .public (<name> param input)
     (-> <type> Complex
         Complex)
     (|> input log (<op> param) exp))]

  [[^  Complex ..x]
   [^' Decimal ..x']])

(the (with_sign sign magnitude)
  (-> Decimal Decimal
      Decimal)
  (d.x (d.signum sign) magnitude))

(the .public (root_2 input)
  (-> Complex
      Complex)
  (let [(open "/[0]") input
        t (|> input ..absolute (d.+ (d.absolute /#real)) (d./ +2.0) (d.^ +0.5))]
    (if (d.< +0.0 /#real)
        [..#real (d./ (d.x +2.0 t)
                      (d.absolute /#imaginary))
         ..#imaginary (d.x t (..with_sign /#imaginary +1.0))]
        [..#real t
         ..#imaginary (d./ (d.x +2.0 t)
                           /#imaginary)])))

(the (root_2-1z input)
  (-> Complex
      Complex)
  (|> (complex +1.0) (- (x input input)) ..root_2))

(the .public (reciprocal (open "/[0]"))
  (-> Complex
      Complex)
  (if (d.< (d.absolute /#imaginary)
           (d.absolute /#real))
      (let [q (d./ /#imaginary /#real)
            scale (d./ (|> /#real (d.x q) (d.+ /#imaginary))
                       +1.0)]
        [..#real (d.x q scale)
         ..#imaginary (d.opposite scale)])
      (let [q (d./ /#real /#imaginary)
            scale (d./ (|> /#imaginary (d.x q) (d.+ /#real))
                       +1.0)]
        [..#real scale
         ..#imaginary (|> scale d.opposite (d.x q))])))

(the .public (acos input)
  (-> Complex
      Complex)
  (|> input
      (..+ (|> input ..root_2-1z (..x ..i)))
      ..log
      (..x (..opposite ..i))))

(the .public (asin input)
  (-> Complex
      Complex)
  (|> input
      ..root_2-1z
      (..+ (..x ..i input))
      ..log
      (..x (..opposite ..i))))

(the .public (atan input)
  (-> Complex
      Complex)
  (|> input
      (..+ ..i)
      (../ (..- input ..i))
      ..log
      (..x (../ (..complex +2.0) ..i))))

(the .public (argument (open "/[0]"))
  (-> Complex
      Decimal)
  (circle.atan_2 /#real /#imaginary))

(the .public (roots nth input)
  (-> Natural Complex
      (List Complex))
  (when nth
    0 (list)
    _ (let [r_nth (|> nth .integer integer.decimal)
            nth_root_of_absolute (|> input ..absolute (d.^ (d./ r_nth +1.0)))
            nth_phi (|> input ..argument (d./ r_nth))
            slice (d./ r_nth circle.tau)]
        (|> (list.indices nth)
            (list#each (function (_ nth')
                         (let [inner (|> nth' .integer integer.decimal
                                         (d.x slice)
                                         (d.+ nth_phi))
                               real (d.x nth_root_of_absolute
                                         (circle.cos inner))
                               imaginary (d.x nth_root_of_absolute
                                              (circle.sin inner))]
                           [..#real real
                            ..#imaginary imaginary])))))))

(the .public (approximately? margin_of_error standard value)
  (-> Decimal Complex Complex
      Bit)
  (and (d.approximately? margin_of_error (its ..#real standard)
                         (its ..#real value))
       (d.approximately? margin_of_error (its ..#imaginary standard)
                         (its ..#imaginary value))))

(the .public (as_text it)
  (text.Injection Complex)
  (.text_composite# (by d.base_10 as (its ..#real it))
                    " "
                    (by d.base_10 as (its ..#imaginary it))
                    "i"))

(the .public text
  (Format Text Complex)
  (implementation
   (the as ..as_text)
   (the (of it)
     (when (text.split_by " " it)
       {.#Some [real imaginary]}
       (do try.monad
         [real (by d.base_10 of real)
          imaginary (by d.base_10 of (text.replaced_once "i" "" imaginary))]
         (pure [#real real
                #imaginary imaginary]))

       {.#None}
       (do try.monad
         [real (by d.base_10 of it)]
         (pure [#real real
                #imaginary +0.0]))))))

... https://en.wikipedia.org/wiki/Polar_coordinate_system
(the (square it)
  (-> Decimal
      Decimal)
  (d.x it it))

(the .public (magnitude it)
  (-> Complex
      Decimal)
  (d.root_2 (d.+ (square (its #real it))
                 (square (its #imaginary it)))))

(the .public (phase it)
  (-> Complex
      Decimal)
  (circle.atan_2 (its #real it)
                 (its #imaginary it)))

(the .public (polar magnitude phase)
  (-> Decimal Decimal
      Complex)
  [#real (d.x magnitude (circle.cos phase))
   #imaginary (d.x magnitude (circle.sin phase))])

... https://en.wikipedia.org/wiki/Number#Classification
(alias [C]
       ..Complex)
