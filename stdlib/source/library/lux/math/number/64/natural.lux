... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [hash (.only Hash)]
    [enum (.only Enum)]
    [interval (.only Interval)]
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [format (.only Format)]
    [order (.only Order)]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try (.only Try)]]
   ["[0]" function (.only)
    [predicate (.only Predicate)]]]]
 [///
  ["[0]" digit]
  [//
   [arithmetic (.only Arithmetic)]]])

(the .public Number
  .Natural)

(the It
  ..Number)

(the with_template (.in_module# .prelude .with_template))

(with_template [<name> <extension> <output>]
  [(the .public (<name> parameter subject)
     (-> It It
         <output>)
     (<extension> parameter subject))]

  [[= .i64_=# Bit]
   [+ .i64_+# It]
   [- .i64_-# It]]
  )

(with_template [,value ,name]
  [(the .public ,name
     It
     ,value)]

  [[0 zero]
   [1 one]]
  )

(the high
  (-> (I64 Any)
      I64)
  (|>> (.i64_right# 32)))

(the low
  (-> (I64 Any)
      I64)
  (let [mask (|> 1 (.i64_left# 32) (.i64_-# 1))]
    (|>> (.i64_and# mask))))

(the .public (< reference it)
  (-> It It
      Bit)
  (let [referenceH (..high reference)
        itH (..high it)]
    (if (.int_<# referenceH itH)
        true
        (if (.i64_=# referenceH itH)
            (.int_<#
             (..low reference)
             (..low it))
            false))))

(the .public (<= reference it)
  (-> It It
      Bit)
  (or (..< reference it)
      (.i64_=# reference it)))

(the .public (> reference it)
  (-> It It
      Bit)
  (..< it reference))

(the .public (>= reference it)
  (-> It It
      Bit)
  (or (..< it reference)
      (.i64_=# reference it)))

(with_template [<name> <test>]
  [(the .public (<name> left right)
     (-> It It
         It)
     (if (<test> right left)
         left
         right))]

  [[minor ..<]
   [major ..>]]
  )

(the .public (x parameter subject)
  (-> It It
      It)
  (.natural (.int_x# (.integer parameter)
                     (.integer subject))))

(the .public (/ parameter subject)
  (-> It It
      It)
  (if (.int_<# +0 (.integer parameter))
      (if (..< parameter subject)
          0
          1)
      (let [quotient (|> subject
                         (.i64_right# 1)
                         (.int_/# (.integer parameter))
                         (.i64_left# 1))
            flat (.int_x# (.integer parameter)
                          (.integer quotient))
            remainder (.i64_-# flat subject)]
        (if (..< parameter remainder)
            quotient
            (.i64_+# 1 quotient)))))

(the .public (/% parameter subject)
  (-> It It
      [It It])
  (let [quotient (../ parameter subject)
        flat (.int_x# (.integer parameter)
                      (.integer quotient))]
    [quotient (.i64_-# flat subject)]))

(the .public (% parameter subject)
  (-> It It
      It)
  (let [flat (.int_x# (.integer parameter)
                      (.integer (../ parameter subject)))]
    (.i64_-# flat subject)))

(every .public Exponent
  Natural)

... https://en.wikipedia.org/wiki/Exponentiation
... https://en.wikipedia.org/wiki/Exponentiation_by_squaring
(the .public (^ power base)
  (-> Exponent
      (Change It))
  (loop (^ [power power
            base base
            it 1])
    (if (.i64_=# 0 power)
        it
        (^ (.i64_right# 1 power)
           (x base base)
           (if (.i64_=# 1 (.i64_and# 1 power))
               (x base it)
               it)))))

(the .public arithmetic
  (Arithmetic It)
  (implementation
   (the + ..+)
   (the - ..-)
   (the x ..x)
   (the / ../)))

... https://en.wikipedia.org/wiki/Greatest_common_divisor
(the .public (greatest_common_divisor a b)
  (-> It It
      It)
  (when b
    0 a
    _ (greatest_common_divisor b (..% b a))))

(alias [gcd]
       ..greatest_common_divisor)

... https://en.wikipedia.org/wiki/Coprime_integers
(the .public (co_prime? a b)
  (-> It
      (Predicate It))
  (..= 1 (..greatest_common_divisor a b)))

... https://en.wikipedia.org/wiki/Least_common_multiple
(the .public (least_common_multiple a b)
  (-> It It
      It)
  (`` (when [a b]
        (,, (with_template [<pattern>]
              [<pattern>
               0]

              [[[_ 0]]
               [[0 _]]]))

        _
        (|> a (../ (..greatest_common_divisor a b)) (..x b)))))

(alias [lcm]
       ..least_common_multiple)

(the .public decimal
  (-> It
      Decimal)
  (|>> .integer
       .int_f64#))

(the .public equivalence
  (Equivalence It)
  (implementation
   (the = ..=)))

(the .public order
  (Order It)
  (implementation
   (the equivalence ..equivalence)
   (the < ..<)))

(the .public enum
  (Enum It)
  (implementation
   (the order ..order)
   (the succ ++)
   (the pred --)))

(the .public interval
  (Interval It)
  (implementation
   (the enum ..enum)
   (the maximum (-- 0))
   (the minimum 0)))

(with_template [<name> <composite> <identity>]
  [(the .public <name>
     (Monoid It)
     (implementation
      (the identity <identity>)
      (the composite <composite>)))]

  [[addition       ..+     0]
   [multiplication ..x     1]
   [minimum        ..minor (by ..interval maximum)]
   [maximum        ..major (by ..interval minimum)]]
  )

(with_template [,digit ,character ,value ,text]
  [(the ,text
     (its digit.#character ,digit))

   (the ,character
     (`` (character (,, (static ,text)))))

   (the ,value
     (its digit.#value ,digit))]

  [[digit.the_00 character_of_00 value_of_00 text_of_00]
   [digit.the_01 character_of_01 value_of_01 text_of_01]

   [digit.the_02 character_of_02 value_of_02 text_of_02]
   [digit.the_03 character_of_03 value_of_03 text_of_03]
   [digit.the_04 character_of_04 value_of_04 text_of_04]
   [digit.the_05 character_of_05 value_of_05 text_of_05]
   [digit.the_06 character_of_06 value_of_06 text_of_06]
   [digit.the_07 character_of_07 value_of_07 text_of_07]

   [digit.the_08 character_of_08 value_of_08 text_of_08]
   [digit.the_09 character_of_09 value_of_09 text_of_09]

   [digit.the_10 character_of_10 value_of_10 text_of_10]
   [digit.the_11 character_of_11 value_of_11 text_of_11]
   [digit.the_12 character_of_12 value_of_12 text_of_12]
   [digit.the_13 character_of_13 value_of_13 text_of_13]
   [digit.the_14 character_of_14 value_of_14 text_of_14]
   [digit.the_15 character_of_15 value_of_15 text_of_15]]
  )

(the (binary_digit it)
  (-> It
      Text)
  (when it
    ..value_of_00 ..text_of_00
    ..value_of_01 ..text_of_01
    _ (undefined)))

(the (binary_value it)
  (-> It
      (Maybe It))
  (when it
    ..character_of_00 {.#Some ..value_of_00}
    ..character_of_01 {.#Some ..value_of_01}
    _ {.#None}))

(the (octal_digit it)
  (-> It
      Text)
  (when it
    ..value_of_02 ..text_of_02
    ..value_of_03 ..text_of_03
    ..value_of_04 ..text_of_04
    ..value_of_05 ..text_of_05
    ..value_of_06 ..text_of_06
    ..value_of_07 ..text_of_07
    _ (binary_digit it)))

(the (octal_value it)
  (-> It
      (Maybe It))
  (when it
    ..character_of_02 {.#Some ..value_of_02}
    ..character_of_03 {.#Some ..value_of_03}
    ..character_of_04 {.#Some ..value_of_04}
    ..character_of_05 {.#Some ..value_of_05}
    ..character_of_06 {.#Some ..value_of_06}
    ..character_of_07 {.#Some ..value_of_07}
    _ (binary_value it)))

(the (decimal_digit it)
  (-> It
      Text)
  (when it
    ..value_of_08 ..text_of_08
    ..value_of_09 ..text_of_09
    _ (octal_digit it)))

(the (decimal_value it)
  (-> It
      (Maybe It))
  (when it
    ..character_of_08 {.#Some ..value_of_08}
    ..character_of_09 {.#Some ..value_of_09}
    _ (octal_value it)))

(the (hexadecimal_digit it)
  (-> It
      Text)
  (when it
    ..value_of_10 ..text_of_10
    ..value_of_11 ..text_of_11
    ..value_of_12 ..text_of_12
    ..value_of_13 ..text_of_13
    ..value_of_14 ..text_of_14
    ..value_of_15 ..text_of_15
    _ (decimal_digit it)))

(the (hexadecimal_value it)
  (-> It
      (Maybe It))
  (when it
    ..character_of_10 {.#Some ..value_of_10}
    ..character_of_11 {.#Some ..value_of_11}
    ..character_of_12 {.#Some ..value_of_12}
    ..character_of_13 {.#Some ..value_of_13}
    ..character_of_14 {.#Some ..value_of_14}
    ..character_of_15 {.#Some ..value_of_15}
    _ (decimal_value it)))

(with_template [<shift> <struct> <to_digit> <to_value> <error>]
  [(the .public <struct>
     (Format Text It)
     (implementation
      (the as
        (let [mask (|> 1 (.i64_left# <shift>) --)]
          (function (_ value)
            (loop (again [input value
                          output ""])
              (let [output' (.text_composite# (<to_digit> (.i64_and# mask input))
                                              output)]
                (when (is It (.i64_right# <shift> input))
                  0
                  output'

                  input'
                  (again input' output')))))))

      (the (of repr)
        (let [input_size (.text_size# repr)]
          (if (..> 0 input_size)
              (loop (again [idx 0
                            output 0])
                (if (..< input_size idx)
                    (when (<to_value> (.text_char# idx repr))
                      {.#Some digit_value}
                      (again (++ idx)
                             (|> output
                                 (.i64_left# <shift>)
                                 (.i64_or# digit_value)))

                      _
                      {try.#Failure (.text_composite# <error> repr)})
                    {try.#Success output}))
              {try.#Failure (.text_composite# <error> repr)})))))]

  [[1 binary binary_digit      binary_value      "Invalid binary syntax: "]
   [3 octal  octal_digit       octal_value       "Invalid octal syntax: "]
   [4 hex    hexadecimal_digit hexadecimal_value "Invalid hexadecimal syntax: "]]
  )

(the _expansion#let (.in_module# .prelude .expansion#let))

(for .python (these)
     .lua (these)
     (these (the code#natural (.in_module# .prelude .code#natural))
            (the code#text (.in_module# .prelude .code#text))
            (the natural#as (.in_module# .prelude .natural#as))

            (the single_digit_range 10)
            (the last_single_digit (-- single_digit_range))

            (the double_digit_range (x ..single_digit_range ..single_digit_range))
            (the last_double_digit (-- double_digit_range))

            (the multi_digit_range (x ..single_digit_range ..double_digit_range))
            (the last_multi_digit (-- multi_digit_range))

            (with_template [,name ,last ,padding ,limit]
              [(the ,name
                 (macro (_ _ lux)
                   {.#Right [lux (loop (next [natural ,last
                                              output (is (List Code) (list))])
                                   (let [output (.list_composite# (list (code#natural natural)
                                                                        (code#text (.text_composite# ,padding (natural#as natural))))
                                                                  output)]
                                     (when natural
                                       ,limit output
                                       _ (next (-- natural) output))))]}))]

              [[leading_multi_decimals ..last_multi_digit "" 0]

               [non_leading_single_decimals ..last_single_digit "00" 0]
               [non_leading_double_decimals ..last_double_digit "0" ..single_digit_range]
               [non_leading_multi_decimals ..last_multi_digit "" ..double_digit_range]]
              )

            (the (leading_decimals value)
              (-> It
                  Text)
              (`` (when value
                    (,, (leading_multi_decimals))

                    _
                    (undefined))))

            (the (non_leading_decimals value)
              (-> It
                  Text)
              (`` (when value
                    (,, (non_leading_single_decimals))
                    (,, (non_leading_double_decimals))
                    (,, (non_leading_multi_decimals))

                    _
                    (undefined))))))

(the .public base_10
  (Format Text It)
  (implementation
   (the as
     (for .python (.in_module# .prelude .natural#as)
          .lua (.in_module# .prelude .natural#as)
          (function (_ value)
            (loop (code#text [input value
                              output ""])
              (if (..< ..multi_digit_range input)
                  (.text_composite# (leading_decimals input)
                                    output)
                  (code#text (../ ..multi_digit_range input)
                             (.text_composite# (non_leading_decimals (..% ..multi_digit_range input))
                                               output)))))))

   (the (of repr)
     (let [input_size (.text_size# repr)]
       (<| (_expansion#let [<failure> {try.#Failure (.text_composite# "Invalid decimal syntax: " repr)}])
           (if (..> 0 input_size)
               (loop (again [idx 0
                             output 0])
                 (if (..< input_size idx)
                     (when (decimal_value (.text_char# idx repr))
                       {.#None}
                       <failure>

                       {.#Some digit_value}
                       (again (++ idx)
                              (|> output (..x 10) (..+ digit_value))))
                     {try.#Success output}))
               <failure>))))))

(the .public hash
  (Hash It)
  (implementation
   (the equivalence ..equivalence)
   (the hash function.identity)))

(the .public (padded expected_size format)
  (-> It (Format Text It)
      (Format Text It))
  (implementation
   (the (as it)
     (loop (next [it (by format as it)])
       (if (< expected_size (.text_size# it))
           (next (.text_composite# "0" it))
           it)))

   (the of
     (by format of))))

(alias [base_02] ..binary)
(alias [base_08] ..octal)
... (alias [base_10] ..decimal)
(alias [base_16] ..hex)

(the .public (multiple? reference it)
  (-> It
      (Predicate It))
  (|> it
      (% reference)
      (.i64_=# 0)))

(the .public (divisor? reference it)
  (-> It
      (Predicate It))
  (multiple? it reference))

(the .public even?
  (Predicate It)
  (multiple? 2))

(the .public odd?
  (Predicate It)
  (|>> ..even?
       not))

... https://en.wikipedia.org/wiki/Primality_test
(the .public (prime? it)
  (Predicate It)
  (or (< 4 it)
      (if (or (multiple? 2 it)
              (multiple? 3 it))
          false
          (loop (prime? [under 5])
            (or (< (x under under) it)
                (if (or (divisor? it under)
                        (divisor? it (+ 2 under)))
                    false
                    (prime? (+ 6 under))))))))

(the .public (opposite it)
  (Change It)
  (- it 0))

(every .public (Subtraction it)
  (Record
   [#positive it
    #negative it]))

(the .public (-' origin it)
  (-> It It
      (Subtraction It))
  (if (< origin it)
      ... Negative
      [#positive 0
       #negative (- it origin)]
      ... Positive
      [#positive (- origin it)
       #negative 0]))
