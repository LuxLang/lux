... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except natural integer revolution)
   [abstract
    [hash (.only Hash)]
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [format (.only Format)]
    [monad (.only do)]
    [order (.only Order)]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" text]]
   [meta
    ["[0]" provenance]]]]
 [//
  ["[0]" natural]
  ["[0]" integer]
  [//
   ["[0]" /64]
   [//
    [arithmetic (.only Arithmetic)]
    ["[0]" unit]]]])

(the .public Number
  .Decimal)

(the It ..Number)

(the with_template (.in_module# .prelude .with_template))
(the template#macro (.in_module# .prelude .template#macro))

(with_template [,name <value>]
  [(the .public ,name
     It
     <value>)]

  [[e +2.7182818284590452354]
   [zero +0.0]
   [positive +1.0]
   [negative -1.0]]
  )

(for .jvm
     (these (the !double
              (template#macro
               (_ value)
               [(|> value
                    (as (-> It (Nominal "java.lang.Double")))
                    .jvm_object_cast#)]))
            
            (the !decimal
              (template#macro
               (_ value)
               [(|> value
                    .jvm_object_cast#
                    (as (-> (Nominal "java.lang.Double") It)))]))
            
            (with_template [,name <method>]
              [(the .public ,name
                 (Change It)
                 (|>> !double
                      ["D"]
                      (.jvm_member_invoke_static# [] "java.lang.Math" <method> [])
                      !decimal))]
              
              [[exp    "exp"]
               [log    "log"]
               
               [ceil   "ceil"]
               [floor  "floor"]
               
               [root_2 "sqrt"]
               [root_3 "cbrt"]]
              )
            
            (the .public (^ param subject)
              (-> It It
                  It)
              (|> (.jvm_member_invoke_static# [] "java.lang.Math" "pow" []
                                              ["D" (!double subject)] ["D" (!double param)])
                  !decimal)))

     .js
     (these (with_template [,name <method>]
              [(the .public ,name
                 (Change It)
                 (|>> []
                      (.js_of# (.js_constant# <method>))
                      (as (-> Any It))))]
              
              [[exp    "Math.exp"]
               [log    "Math.log"]
               
               [ceil   "Math.ceil"]
               [floor  "Math.floor"]

               [root_2 "Math.sqrt"]
               [root_3 "Math.cbrt"]]
              )
            
            (the .public (^ param subject)
              (-> It It
                  It)
              (as (-> Any It)
                  (.js_of# (.js_constant# "Math.pow") [subject param]))))

     .python
     (these (with_template [,name <method>]
              [(the .public ,name
                 (Change It)
                 (|>> []
                      (.python_object_do# <method> (.python_import# "math"))
                      (as (-> Any It))))]
              
              [[exp    "exp"]
               [log    "log"]
               
               [ceil   "ceil"]
               [floor  "floor"]

               [root_2 "sqrt"]]
              )
            
            (the .public (^ param subject)
              (-> It It
                  It)
              (as (-> Any It)
                  (.python_object_do# "pow" (.python_import# "math") [subject param])))

            (the .public (root_3 it)
              (-> It
                  It)
              (if (.f64_<# +0.0 it)
                  (|> it
                      (.f64_x# -1.0)
                      (^ (.f64_/# +3.0 +1.0))
                      (.f64_x# -1.0))
                  (|> it
                      (^ (.f64_/# +3.0 +1.0))))))

     .lua
     (these (with_template [,name <method>]
              [(the .public ,name
                 (Change It)
                 (|>> []
                      (.lua_of# (.lua_constant# <method>))
                      (as (-> Any It))))]
              
              [[exp    "math.exp"]
               [log    "math.log"]
               
               [ceil   "math.ceil"]
               [floor  "math.floor"]

               [root_2 "math.sqrt"]]
              )
            
            (the .public (^ param subject)
              (-> It It
                  It)
              (.lua_power# param subject))

            (the .public (root_3 it)
              (-> It
                  It)
              (if (.f64_<# +0.0 it)
                  (|> it
                      (.f64_x# -1.0)
                      (^ (.f64_/# +3.0 +1.0))
                      (.f64_x# -1.0))
                  (|> it
                      (^ (.f64_/# +3.0 +1.0))))))

     .ruby
     (these (with_template [,name <method>]
              [(the .public ,name
                 (Change It)
                 (|>> []
                      (.ruby_of# (.ruby_constant# <method>))
                      (as (-> Any It))))]
              
              [[exp    "Math.exp"]
               [log    "Math.log"]
               
               [root_2 "Math.sqrt"]
               [root_3 "Math.cbrt"]]
              )

            (with_template [,name <method>]
              [(the .public (,name it)
                 (Change It)
                 (|> (.ruby_object_do# <method> it [])
                     (as (-> Any Integer))
                     (.int_f64#)))]

              [[ceil  "ceil"]
               [floor "floor"]]
              )

            (the .public (^ param subject)
              (-> It It
                  It)
              (as (-> Any It)
                  (.ruby_object_do# "**" subject [param]))))

     .php
     (these (with_template [,name <method>]
              [(the .public ,name
                 (Change It)
                 (|>> ("php of" ("php constant" <method>))
                      (as (-> Any It))))]
              
              [[exp    "exp"]
               [log    "log"]

               [ceil   "ceil"]
               [floor  "floor"]
               
               [root_2 "sqrt"]]
              )

            (the .public (^ param subject)
              (-> It It
                  It)
              (as (-> Any It)
                  ("php of" ("php constant" "pow") subject param)))

            (the .public root_3
              (-> It
                  It)
              (^ (.f64_/# +3.0 +1.0))))
     )

(the .public (round it)
  (-> It
      It)
  (let [floored (floor it)
        diff (.f64_-# floored it)]
    (if (.f64_<# diff +0.5)
        (.f64_+# +1.0 floored)
        
        (.f64_<# -0.5 diff)
        (.f64_+# -1.0 floored)
        
        ... else
        floored)))

(the .public (log_by base it)
  (-> It It
      It)
  (.f64_/# (..log base)
           (..log it)))

(the .public (factorial it)
  (-> Natural
      Natural)
  (loop (again [acc 1
                it it])
    (if (natural.> 1 it)
        (again (natural.x it acc) (-- it))
        acc)))

(with_template [,name <op>]
  [(the .public (,name param subject)
     (-> It It
         Bit)
     (<op> param subject))]

  [[= .f64_=#]
   [< .f64_<#]]
  )

(the .public (<= reference it)
  (-> It It
      Bit)
  (or (.f64_<# reference it)
      (.f64_=# reference it)))

(the .public (> reference it)
  (-> It It
      Bit)
  (.f64_<# it reference))

(the .public (>= reference it)
  (-> It It
      Bit)
  (or (.f64_<# it reference)
      (.f64_=# it reference)))

(with_template [<comparison> ,name]
  [(the .public ,name
     (Predicate It)
     (<comparison> +0.0))]

  [[..> positive?]
   [..< negative?]
   [..= zero?]]
  )

(with_template [,name <op>]
  [(the .public (,name param subject)
     (-> It It
         It)
     (<op> param subject))]

  [[+ .f64_+#]
   [- .f64_-#]
   [x .f64_x#]
   [/ .f64_/#]
   [% .f64_%#]]
  )

(the .public arithmetic
  (Arithmetic It)
  (implementation
   (the + ..+)
   (the - ..-)
   (the x ..x)
   (the / ../)))

(the .public (/% param subject)
  (-> It It
      [It It])
  [(../ param subject)
   (..% param subject)])

... https://en.wikipedia.org/wiki/Additive_inverse
(the .public (opposite it)
  (-> It
      It)
  (..- it +0.0))

(the .public (absolute it)
  (-> It
      It)
  (if (..< +0.0 it)
      (..opposite it)
      it))

(alias [abs]
       ..absolute)

(the .public (signum it)
  (-> It
      It)
  (if (..= +0.0 it) +0.0
      (..< +0.0 it) -1.0
      ... else
      +1.0))

(the min_exponent -1022)
(the max_exponent (integer.decimal +1023))

(with_template [,name <test>]
  [(the .public (,name left right)
     (-> It It
         It)
     (if (<test> right left)
         left
         right))]

  [[minor ..<]
   [major ..>]]
  )

(the .public natural
  (-> It
      Natural)
  (|>> .f64_int# .natural))

(the .public integer
  (-> It
      Integer)
  (|>> .f64_int#))

(the size_of_mantissa Natural 52)
(the size_of_exponent Natural 11)

(the decimal_denominator
  (|> -1
      (.i64_right# ..size_of_exponent)
      .int_f64#))

(the .public revolution
  (-> It
      Revolution)
  (|>> ..abs
       (..% +1.0)
       (..x ..decimal_denominator)
       .f64_int#
       (.i64_left# ..size_of_exponent)))

(with_template [,name <numerator>]
  [(the .public ,name
     It
     (../ +0.0 <numerator>))]

  [[not_a_number      +0.0]
   [positive_infinity +1.0]]
  )

(the .public negative_infinity
  It
  (..x -1.0 ..positive_infinity))

(the .public (not_a_number? it)
  (-> It
      Bit)
  (not (..= it it)))

(the .public (number? it)
  (-> It
      Bit)
  (not (or (..not_a_number? it)
           (..= ..positive_infinity it)
           (..= ..negative_infinity it))))

(the .public equivalence
  (Equivalence It)
  (implementation
   (the (= left right)
     (or (..= left right)
         (and (..not_a_number? left)
              (..not_a_number? right))))))

(the .public order
  (Order It)
  (implementation
   (the equivalence ..equivalence)
   (the < ..<)))

(the .public smallest
  It
  (^ (integer.decimal (integer.- (.integer ..size_of_mantissa) ..min_exponent))
     +2.0))

(the .public biggest
  It
  (let [f2^-52 (^ (natural.decimal (natural.- ..size_of_mantissa 0)) +2.0)
        f2^+1023 (^ ..max_exponent +2.0)]
    (|> +2.0
        (..- f2^-52)
        (..x f2^+1023))))

(with_template [,name ,composite ,identity]
  [(the .public ,name
     (Monoid It)
     (implementation
      (the identity ,identity)
      (the composite ,composite)))]

  [[addition       ..+   +0.0]
   [multiplication ..x   +1.0]
   [minimum        ..minor ..biggest]
   [maximum        ..major (..x -1.0 ..biggest)]]
  )

(the .public cannot_project
  Error
  (provenance.with (provenance.here)
    "Cannot project."))

... https://en.wikipedia.org/wiki/Delimiter
... https://en.wikipedia.org/wiki/Decimal_separator
(the .public delimiter
  ".")

(the .public delimiter_for_exponentiation
  "e")

(the negative_exponentiation
  (text ..delimiter_for_exponentiation "-"))

(the positive_exponentiation
  (text ..delimiter_for_exponentiation "+"))

(the (decimal#as it)
  (-> It
      Text)
  (for .jvm
       (|> it
           ..!double
           ["D"]
           (.jvm_member_invoke_static# [] "java.lang.Double" "toString" [])
           (as (-> (Nominal "java.lang.String") Text))
           (text.replaced "E-" ..negative_exponentiation)
           (text.replaced "E" ..positive_exponentiation))
       
       .js
       (let [raw (as (-> Any Text) (.js_object_do# "toString" it []))]
         (if (text.contains? ..delimiter raw)
             raw
             (.text_composite# raw ".0")))

       .lua
       (as (-> Any Text) (.lua_of# (.lua_constant# "string.format") ["%.17g" it]))

       .python
       (as (-> Any Text) (.python_of# (.python_constant# "repr") [it]))

       .ruby
       (as (-> Any Text) (.ruby_object_do# "to_s" it []))))

(the with_projection_error
  (template#macro
   (_ ,it)
   [(when (try ,it)
      {try.#Failure _}
      {try.#Failure ..cannot_project}

      success
      success)]))

(the _expansion#let (.in_module# .prelude .expansion#let))

(the .public base_10
  (Format Text It)
  (implementation
   (the (as it)
     (when it
       -0.0 (let [output (decimal#as it)]
              (if (text.starts_with? "-" output)
                  output
                  (.text_composite# "+" output)))
       _ (if (..< +0.0 it)
             (decimal#as it)
             (.text_composite# "+" (decimal#as it)))))

   (the (of it)
     (for .jvm
          (|> it
              (as (-> Text (Nominal "java.lang.String")))
              .jvm_object_cast#
              ["Ljava/lang/String;"]
              (.jvm_member_invoke_static# [] "java.lang.Double" "parseDouble" [])
              ..!decimal
              with_projection_error)

          .js
          (|> (.js_of# (.js_constant# "parseFloat") [it])
              (as (-> Any It))
              with_projection_error)

          .lua
          (|> (.lua_of# (.lua_constant# "tonumber") [it])
              (as (-> Any It))
              with_projection_error)

          .python
          (|> (.python_of# (.python_constant# "float") [it])
              (as (-> Any It))
              with_projection_error)

          .ruby
          (let [projection (as (-> Any It) (.ruby_object_do# "to_f" it []))]
            (<| (_expansion#let [,success {try.#Success projection}])
                (if (..= +0.0 projection)
                    (when it
                      "0" ,success
                      "+0" ,success
                      "-0" ,success
                      
                      ".0" ,success
                      "+.0" ,success
                      "-.0" ,success
                      
                      "0.0" ,success
                      "+0.0" ,success
                      "-0.0" ,success

                      else
                      {try.#Failure ..cannot_project})
                    ,success)))))))

(the log/2
  (-> It
      It)
  (let [base (..log +2.0)]
    (|>> ..log
         (../ base))))

(the bias_of_exponent Natural 1023)

(the mask_of_exponent (/64.mask ..size_of_exponent))

(the offset_of_exponent ..size_of_mantissa)
(the offset_of_sign (natural.+ ..size_of_exponent ..offset_of_exponent))

(with_template [<cast> <hex> ,name]
  [(the ,name
     (|> <hex>
         (by natural.hex of)
         try.trusted
         <cast>))]

  [[.i64 "FFF8000000000000" bits_of_not_a_number]
   [.i64 "7FF0000000000000" bits_of_positive_infinity]
   [.i64 "FFF0000000000000" bits_of_negative_infinity]
   [.i64 "0000000000000000" bits_of_positive_zero]
   [.i64 "8000000000000000" bits_of_negative_zero]
   [.natural "7FF" bits_of_special_exponent]]
  )

(the smallest_exponent
  (..log/2 ..smallest))

(the .public (reciprocal it)
  (-> It
      It)
  (../ it
       +1.0))

(the .public (bits it)
  (-> It
      I64)
  (.i64 (if (..not_a_number? it)
            ..bits_of_not_a_number

            (..= positive_infinity it)
            ..bits_of_positive_infinity

            (..= negative_infinity it)
            ..bits_of_negative_infinity

            (..= +0.0 it)
            (if (..= positive_infinity (reciprocal it))
                ... Positive zero
                ..bits_of_positive_zero
                ... Negative zero
                ..bits_of_negative_zero)

            ... else
            (let [sign_bit (if (..< +0.0 it)
                               1
                               0)
                  it (..abs it)
                  exponent (|> it
                               ..log/2
                               ..floor
                               (..minor ..max_exponent))
                  min_gap (..- (integer.decimal ..min_exponent) exponent)
                  power (|> (natural.decimal ..size_of_mantissa)
                            (..+ (..minor +0.0 min_gap))
                            (..- exponent))
                  max_gap (..- ..max_exponent power)
                  mantissa (|> it
                               (..x (^ (..minor ..max_exponent power) +2.0))
                               (..x (if (..> +0.0 max_gap)
                                        (^ max_gap +2.0)
                                        +1.0)))
                  exponent_bits (|> (if (..< +0.0 min_gap)
                                        (|> (..integer exponent)
                                            (integer.- (..integer min_gap))
                                            --)
                                        (..integer exponent))
                                    (integer.+ (.integer ..bias_of_exponent))
                                    (/64.and ..mask_of_exponent))
                  mantissa_bits (..integer mantissa)]
              (all /64.or
                   (/64.left_shifted ..offset_of_sign sign_bit)
                   (/64.left_shifted ..offset_of_exponent exponent_bits)
                   (/64.zero ..size_of_mantissa mantissa_bits)))
            )))

(with_template [<getter> <size> <offset>]
  [(the <getter>
     (Change I64)
     (let [mask (|> 1 (/64.left_shifted <size>) -- (/64.left_shifted <offset>))]
       (|>> (/64.and mask) (/64.right_shifted <offset>) .i64)))]

  [[mantissa ..size_of_mantissa 0]
   [exponent ..size_of_exponent ..size_of_mantissa]
   [sign     1                  ..offset_of_sign]]
  )

(the .public (of_bits it)
  (-> I64
      It)
  (when [(is Natural (..exponent it))
         (is Natural (..mantissa it))
         (is Natural (..sign it))]
    [..bits_of_special_exponent 0 0]
    ..positive_infinity

    [..bits_of_special_exponent 0 1]
    ..negative_infinity

    [..bits_of_special_exponent _ _]
    ..not_a_number

    ... Positive zero
    [0 0 0] +0.0
    ... Negative zero
    [0 0 1] (..x -1.0 +0.0)

    [E M S]
    (let [sign (if (natural.= 0 S)
                   +1.0
                   -1.0)
          [mantissa power] (if (natural.< ..size_of_mantissa E)
                               [(if (natural.= 0 E)
                                    M
                                    (/64.one ..size_of_mantissa M))
                                (|> E
                                    (natural.- ..bias_of_exponent)
                                    .integer
                                    (integer.major ..min_exponent)
                                    (integer.- (.integer ..size_of_mantissa)))]
                               [(/64.one ..size_of_mantissa M)
                                (|> E (natural.- ..bias_of_exponent) (natural.- ..size_of_mantissa) .integer)])
          exponent (^ (integer.decimal power) +2.0)]
      (|> (natural.decimal mantissa)
          (..x exponent)
          (..x sign)))))

(`` (the (representation_exponent format representation)
      (-> (Format Text Natural) Text
          (Try [Text Integer]))
      (when [(.text_index# 0 "e+" representation)
             (.text_index# 0 "E+" representation)
             (.text_index# 0 "e-" representation)
             (.text_index# 0 "E-" representation)]
        (,, (with_template [<factor> <pattern>]
              [<pattern>
               (do try.monad
                 [.let [after_offset (natural.+ 2 split_index)
                        after_length (natural.- after_offset (.text_size# representation))]
                  exponent (|> representation
                               (.text_clip# after_offset after_length)
                               (by format of))]
                 (pure [(.text_clip# 0 split_index representation)
                        (integer.x <factor> (.integer exponent))]))]

              [[+1 [{.#Some split_index} {.#None} {.#None} {.#None}]]
               [+1 [{.#None} {.#Some split_index} {.#None} {.#None}]]
               
               [-1 [{.#None} {.#None} {.#Some split_index} {.#None}]]
               [-1 [{.#None} {.#None} {.#None} {.#Some split_index}]]]
              ))
        
        _
        {try.#Success [representation +0]})))

(with_template [<struct> <natural> <integer> <error>]
  [(the .public <struct>
     (Format Text It)
     (implementation
      (the (as value)
        (let [bits (..bits value)
              mantissa (..mantissa bits)
              exponent (integer.- (.integer ..bias_of_exponent) (..exponent bits))
              sign (..sign bits)]
          (.text_composite# (when (.natural sign)
                              1 "-"
                              0 "+"
                              _ (undefined))
                            (by <natural> as (.natural mantissa))
                            ..delimiter "0" ..delimiter_for_exponentiation
                            (by <integer> as exponent))))

      (the (of representation)
        (let [negative? (text.starts_with? "-" representation)
              positive? (text.starts_with? "+" representation)]
          (if (or negative? positive?)
              (do [! try.monad]
                [[mantissa exponent] (..representation_exponent <natural> representation)
                 [whole decimal] (when (.text_index# 0 ..delimiter mantissa)
                                   {.#Some split_index}
                                   (do !
                                     [.let [after_offset (++ split_index)
                                            after_length (natural.- after_offset (.text_size# mantissa))]
                                      decimal (|> mantissa
                                                  (.text_clip# after_offset after_length)
                                                  (by <natural> of))]
                                     (pure [(.text_clip# 0 split_index mantissa)
                                            decimal]))

                                   {.#None}
                                   {try.#Failure (.text_composite# <error> representation)})
                 .let [whole (.text_clip# 1 (-- (.text_size# whole)) whole)]
                 mantissa (by <natural> of (when decimal
                                             0 whole
                                             _ (.text_composite# whole (by <natural> as decimal))))
                 .let [sign (if negative? 1 0)]]
                (pure (..of_bits
                       (all /64.or
                            (/64.left_shifted ..offset_of_sign (.i64 sign))
                            (/64.left_shifted ..size_of_mantissa (.i64 (integer.+ (.integer ..bias_of_exponent) exponent)))
                            (/64.zero ..size_of_mantissa (.i64 mantissa))))))
              {try.#Failure (.text_composite# <error> representation)})))))]

  [[binary natural.binary integer.binary "Invalid binary syntax: "]
   [octal natural.octal integer.octal "Invalid octaladecimal syntax: "]
   [hex natural.hex integer.hex "Invalid hexadecimal syntax: "]]
  )

(the .public hash
  (Hash It)
  (implementation
   (the equivalence ..equivalence)
   (the hash ..bits)))

(the .public (approximately margin_of_error)
  (-> It
      (Equivalence It))
  (implementation
   (the (= standard value)
     (|> value
         (..- standard)
         ..abs
         (..< margin_of_error)))))

(the .public (mod divisor dividend)
  (-> It It It)
  (let [remainder (..% divisor dividend)]
    (if (or (and (..< +0.0 divisor)
                 (..> +0.0 remainder))
            (and (..> +0.0 divisor)
                 (..< +0.0 remainder)))
        (..+ divisor remainder)
        remainder)))

(with_template [<format> <as> <of> ,unit]
  [(the .public <as>
     (-> It
         It)
     (x (natural.decimal (its unit.#factor ,unit))))
   
   (the .public <of>
     (-> It
         It)
     (/ (natural.decimal (its unit.#factor ,unit))))
   
   (the .public <format>
     (Format Text It)
     (let [suffix (its unit.#suffix ,unit)]
       (implementation
        (the as
          (|>> <as>
               (by ..base_10 as)
               (text.suffix suffix)))

        (the (of it)
          (when (text.split_by suffix it)
            {.#Some [it ""]}
            (|> it
                (by ..base_10 of)
                (try#each <of>))
            
            _
            {try.#Failure ..cannot_project})))))]

  [[degree as_degree of_degree unit.degree]
   [gradian as_gradian of_gradian unit.gradian]
   [per_cent as_per_cent of_per_cent unit.per_cent]
   [per_mille as_per_mille of_per_mille unit.per_mille]
   [per_myriad as_per_myriad of_per_myriad unit.per_myriad]]
  )

(alias [base_02] ..binary)
(alias [base_08] ..octal)
(alias [decimal] ..base_10)
(alias [base_16] ..hex)

(the .public (whole it)
  (Change It)
  (if (< +0.0 it)
      (..ceil it)
      (..floor it)))

(the .public partial
  (Change It)
  (..% +1.0))
