(.module:
  [library
   [lux {"-" [nat]}
    [abstract
     [equivalence {"+" [Equivalence]}]
     [order {"+" [Order]}]
     [monoid {"+" [Monoid]}]
     [codec {"+" [Codec]}]
     [monad {"+" [do]}]]
    [control
     ["." function]
     ["." maybe]
     ["." try]
     ["<>" parser
      ["<.>" code {"+" [Parser]}]]]
    [data
     ["." product]
     ["." text ("#\." monoid)]]
    [macro
     [syntax {"+" [syntax:]}]
     ["." code]]]]
  [//
   ["n" nat ("#\." decimal)]])

(type: .public Ratio
  (Record
   [#numerator Nat
    #denominator Nat]))

(def: .public (nat value)
  (-> Ratio (Maybe Nat))
  (case (value@ #denominator value)
    1 (#.Some (value@ #numerator value))
    _ #.None))

(def: (normal (^slots [#numerator #denominator]))
  (-> Ratio Ratio)
  (let [common (n.gcd numerator denominator)]
    [#numerator (n./ common numerator)
     #denominator (n./ common denominator)]))

(syntax: .public (ratio [numerator <code>.any
                         ?denominator (<>.maybe <code>.any)])
  (in (list (` ((~! ..normal) [#..numerator (~ numerator)
                               #..denominator (~ (maybe.else (' 1) ?denominator))])))))

(def: .public (= parameter subject)
  (-> Ratio Ratio Bit)
  (and (n.= (value@ #numerator parameter)
            (value@ #numerator subject))
       (n.= (value@ #denominator parameter)
            (value@ #denominator subject))))

(implementation: .public equivalence
  (Equivalence Ratio)
  
  (def: = ..=))

(def: (equalized parameter subject)
  (-> Ratio Ratio [Nat Nat])
  [(n.* (value@ #denominator subject)
        (value@ #numerator parameter))
   (n.* (value@ #denominator parameter)
        (value@ #numerator subject))])

(def: .public (< parameter subject)
  (-> Ratio Ratio Bit)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (n.< parameter' subject')))

(def: .public (<= parameter subject)
  (-> Ratio Ratio Bit)
  (or (< parameter subject)
      (= parameter subject)))

(def: .public (> parameter subject)
  (-> Ratio Ratio Bit)
  (..< subject parameter))

(def: .public (>= parameter subject)
  (-> Ratio Ratio Bit)
  (or (> parameter subject)
      (= parameter subject)))

(implementation: .public order
  (Order Ratio)
  
  (def: &equivalence ..equivalence)
  (def: < ..<))

(def: .public (+ parameter subject)
  (-> Ratio Ratio Ratio)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (normal [(n.+ parameter' subject')
             (n.* (value@ #denominator parameter)
                  (value@ #denominator subject))])))

(def: .public (- parameter subject)
  (-> Ratio Ratio Ratio)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (normal [(n.- parameter' subject')
             (n.* (value@ #denominator parameter)
                  (value@ #denominator subject))])))

(def: .public (* parameter subject)
  (-> Ratio Ratio Ratio)
  (normal [(n.* (value@ #numerator parameter)
                (value@ #numerator subject))
           (n.* (value@ #denominator parameter)
                (value@ #denominator subject))]))

(def: .public (/ parameter subject)
  (-> Ratio Ratio Ratio)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (normal [subject' parameter'])))

(def: .public (% parameter subject)
  (-> Ratio Ratio Ratio)
  (let [[parameter' subject'] (..equalized parameter subject)
        quot (n./ parameter' subject')]
    (..- (revised@ #numerator (n.* quot) parameter)
         subject)))

(def: .public (reciprocal (^slots [#numerator #denominator]))
  (-> Ratio Ratio)
  [#numerator denominator
   #denominator numerator])

(def: separator ":")

(implementation: .public codec
  (Codec Text Ratio)
  
  (def: (encoded (^slots [#numerator #denominator]))
    ($_ text\composite (n\encoded numerator) ..separator (n\encoded denominator)))

  (def: (decoded input)
    (case (text.split_by ..separator input)
      (#.Some [num denom])
      (do try.monad
        [numerator (n\decoded num)
         denominator (n\decoded denom)]
        (in (normal [#numerator numerator
                     #denominator denominator])))
      
      #.None
      (#.Left (text\composite "Invalid syntax for ratio: " input)))))

(template [<identity> <composite> <name>]
  [(implementation: .public <name>
     (Monoid Ratio)

     (def: identity (..ratio <identity>))
     (def: composite <composite>))]
  
  [0 ..+ addition]
  [1 ..* multiplication]
  )
