... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except natural)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]
    [monoid (.only Monoid)]
    [format (.only Format)]
    [monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" maybe]
    ["[0]" error]
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    [function
     [predicate (.only Predicate)]]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)]]
   [meta
    ["[0]" location]
    ["[0]" code
     ["<[1]>" \\projection (.only Projection)]]
    [macro
     ["[0]" syntax]
     ["[0]" template]]]]]
 [//
  ["//" natural (.use "[1]#[0]" base_10)]
  ["[0]" decimal]
  [//
   ["[0]" unit]
   [arithmetic (.only Arithmetic)]]])

... [Fraction](https://en.wikipedia.org/wiki/Fraction)
(every .public Fraction
  (Record
   [#numerator Natural
    #denominator Natural]))

(the .public Number
  ..Fraction)

(the It ..Fraction)

(the .public not_a_natural
  (error.error "Not a natural number."))

(the .public (natural value)
  (-> It
      (Try Natural))
  (when (its #denominator value)
    1 {try.#Success (its #numerator value)}
    _ {try.#Failure ..not_a_natural}))

(the .public (normal it)
  (-> It
      It)
  (let [(open "/[0]") it]
    (when (//.gcd /#numerator /#denominator)
      0 it
      common [..#numerator (//./ common /#numerator)
              ..#denominator (//./ common /#denominator)])))

(the .public fraction
  (syntax.macro (_ [numerator <code>.any
                    ?denominator (<>.maybe <code>.any)])
    (in (list (` (..normal [..#numerator (, numerator)
                            ..#denominator (, (maybe.else (' 1) ?denominator))]))))))

(the .public (= parameter subject)
  (-> It It
      Bit)
  (//.= (//.* (its #numerator parameter)
              (its #denominator subject))
        (//.* (its #denominator parameter)
              (its #numerator subject))))

(the .public equivalence
  (Equivalence It)
  (implementation
   (the = ..=)))

(the (equalized parameter subject)
  (-> It It
      [Natural Natural])
  [(//.* (its #denominator subject)
         (its #numerator parameter))
   (//.* (its #denominator parameter)
         (its #numerator subject))])

(the .public (< parameter subject)
  (-> It It
      Bit)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (//.< parameter' subject')))

(the .public (<= parameter subject)
  (-> It It
      Bit)
  (or (< parameter subject)
      (= parameter subject)))

(the .public (> parameter subject)
  (-> It It
      Bit)
  (..< subject parameter))

(the .public (>= parameter subject)
  (-> It It
      Bit)
  (or (> parameter subject)
      (= parameter subject)))

(the .public order
  (Order It)
  (implementation
   (the equivalence ..equivalence)
   (the < ..<)))

(the .public (+ parameter subject)
  (-> It It
      It)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (normal [(//.+ parameter' subject')
             (//.* (its #denominator parameter)
                   (its #denominator subject))])))

(the .public (- parameter subject)
  (-> It It
      It)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (normal [(//.- parameter' subject')
             (//.* (its #denominator parameter)
                   (its #denominator subject))])))

(the .public (* parameter subject)
  (-> It It
      It)
  (normal [(//.* (its #numerator parameter)
                 (its #numerator subject))
           (//.* (its #denominator parameter)
                 (its #denominator subject))]))

(the .public (/ parameter subject)
  (-> It It
      It)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (normal [subject' parameter'])))

(the .public (% parameter subject)
  (-> It It
      It)
  (let [[parameter' subject'] (..equalized parameter subject)
        quot (//./ parameter' subject')]
    (..- (revised #numerator (//.* quot) parameter)
         subject)))

(the .public arithmetic
  (Arithmetic It)
  (implementation
   (the + ..+)
   (the - ..-)
   (the * ..*)
   (the / ../)))

(the .public (reciprocal (open "/[0]"))
  (-> It
      It)
  [..#numerator /#denominator
   ..#denominator /#numerator])

(the .public separator
  "/")

(the .public (as_text (open "/[0]"))
  (text.Injection It)
  (all text#composite
       (//#injection /#numerator)
       ..separator
       (//#injection /#denominator)))

(the .public format
  (Format Text It)
  (implementation
   (the injection ..as_text)

   (the (projection input)
     (when (text.split_by ..separator input)
       {.#Some [num denom]}
       (do try.monad
         [numerator (//#projection num)
          denominator (//#projection denom)]
         (in (normal [#numerator numerator
                      #denominator denominator])))
       
       {.#None}
       {.#Left (text#composite "Invalid syntax for fraction: " input)}))))

(the .public zero
  It
  [#numerator 0
   #denominator 1])

(the .public one
  It
  [#numerator 1
   #denominator 1])

(template.with [,name <test>]
  [(the .public (,name left right)
     (-> It It
         It)
     (if (<test> right left)
       left
       right))]

  [min ..<]
  [max ..>]
  )

(the .public biggest
  It
  (..fraction (of //.interval top)))

(the .public smallest
  It
  (..reciprocal ..biggest))

(template.with [,identity ,composite ,name]
  [(the .public ,name
     (Monoid It)
     (implementation
      (the identity ,identity)
      (the composite ,composite)))]
  
  [..zero ..+ addition]
  [..one ..* multiplication]

  [..biggest ..min minimum]
  [..smallest ..max maximum]
  )

(template.with [<numerator> <fraction>]
  [(the .public <fraction>
     It
     [#numerator <numerator>
      #denominator 0])]

  [1 infinity]
  ... https://en.wikipedia.org/wiki/Indeterminate_form
  [0 indeterminate]
  )

(the .public finite?
  (Predicate It)
  (|>> (= ..infinity)
       not))

(the .public (determinate? it)
  (Predicate It)
  (not (and (//.= (its #numerator indeterminate) (its #numerator it))
            (//.= (its #denominator indeterminate) (its #denominator it)))))

(template.with [,/% ,name ,reference]
  [(the .public (,name (open "/[0]"))
     (-> It
         It)
     (..fraction (,/% /#denominator
                      /#numerator)
                 ,reference))]

  [//./ whole 1]
  [//.% partial /#denominator]
  )

... https://en.wikipedia.org/wiki/Number#Classification
(alias [Q+]
       ..It)

(the .public (decimal it)
  (-> It
      Decimal)
  (decimal./ (//.decimal (its #denominator it))
             (//.decimal (its #numerator it))))

(the .public cannot_project
  Error
  (location.with (location.here)
    "Cannot project."))

(template.with [<format> <as> <of> ,unit]
  [(the .public <as>
     (-> It
         It)
     (* (..fraction (its unit.#factor ,unit))))
   
   (the .public <of>
     (-> It
         It)
     (/ (..fraction (its unit.#factor ,unit))))
   
   (the .public <format>
     (Format Text It)
     (let [suffix (its unit.#suffix ,unit)]
       (implementation
        (the injection
          (|>> <as>
               ..whole
               ..natural
               (try.else 0)
               (of //.base_10 injection)
               (text.suffix suffix)))

        (the (projection it)
          (when (text.split_by suffix it)
            {.#Some [it ""]}
            (|> it
                (of //.base_10 projection)
                (try#each (|>> ..fraction <of>)))
            
            _
            {try.#Failure ..cannot_project})))))]

  [degree as_degree of_degree unit.degree]
  [gradian as_gradian of_gradian unit.gradian]
  [percentage as_percentage of_percentage unit.percentage]
  [permille as_permille of_permille unit.permille]
  [permyriad as_permyriad of_permyriad unit.permyriad]
  )

(the .public (approximately margin_of_error)
  (-> It
      (Equivalence It))
  (implementation
   (the (= standard value)
     (..< margin_of_error
          (if (..< standard value)
            (..- value standard)
            (..- standard value))))))

(the .public extension
  "fraction#")
