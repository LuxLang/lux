... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... [Fraction](https://en.wikipedia.org/wiki/Fraction)
(.require
 [library
  [lux (.except natural)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]
    [monoid (.only Monoid)]
    [format (.only Format)]
    [monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" function]
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    [function
     [predicate (.only Predicate)]]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" monoid)]]
   [meta
    ["[0]" location]
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]
    [macro
     ["[0]" syntax]
     ["[0]" template]]]]]
 [//
  ["n" natural (.use "[1]#[0]" base_10)]
  [//
   [arithmetic (.only Arithmetic)]]])

(every .public Fraction
  (Record
   [#numerator Natural
    #denominator Natural]))

(the .public not_a_natural
  Error
  (location.with (location.here)
    "Not a natural number."))

(the .public (natural value)
  (-> Fraction
      (Try Natural))
  (when (its #denominator value)
    1 {try.#Success (its #numerator value)}
    _ {try.#Failure ..not_a_natural}))

(the .public (normal (open "/[0]"))
  (-> Fraction
      Fraction)
  (let [common (n.gcd /#numerator /#denominator)]
    [..#numerator (n./ common /#numerator)
     ..#denominator (n./ common /#denominator)]))

(the .public fraction
  (syntax.macro (_ [numerator <code>.any
                    ?denominator (<>.maybe <code>.any)])
    (in (list (` (normal [..#numerator (, numerator)
                          ..#denominator (, (maybe.else (' 1) ?denominator))]))))))

(the .public (= parameter subject)
  (-> Fraction Fraction
      Bit)
  (n.= (n.* (its #numerator parameter)
            (its #denominator subject))
       (n.* (its #denominator parameter)
            (its #numerator subject))))

(the .public equivalence
  (Equivalence Fraction)
  (implementation
   (the = ..=)))

(the (equalized parameter subject)
  (-> Fraction Fraction
      [Natural Natural])
  [(n.* (its #denominator subject)
        (its #numerator parameter))
   (n.* (its #denominator parameter)
        (its #numerator subject))])

(the .public (< parameter subject)
  (-> Fraction Fraction
      Bit)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (n.< parameter' subject')))

(the .public (<= parameter subject)
  (-> Fraction Fraction
      Bit)
  (or (< parameter subject)
      (= parameter subject)))

(the .public (> parameter subject)
  (-> Fraction Fraction
      Bit)
  (..< subject parameter))

(the .public (>= parameter subject)
  (-> Fraction Fraction
      Bit)
  (or (> parameter subject)
      (= parameter subject)))

(the .public order
  (Order Fraction)
  (implementation
   (the equivalence ..equivalence)
   (the < ..<)))

(the .public (+ parameter subject)
  (-> Fraction Fraction
      Fraction)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (normal [(n.+ parameter' subject')
             (n.* (its #denominator parameter)
                  (its #denominator subject))])))

(the .public (- parameter subject)
  (-> Fraction Fraction
      Fraction)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (normal [(n.- parameter' subject')
             (n.* (its #denominator parameter)
                  (its #denominator subject))])))

(the .public (* parameter subject)
  (-> Fraction Fraction
      Fraction)
  (normal [(n.* (its #numerator parameter)
                (its #numerator subject))
           (n.* (its #denominator parameter)
                (its #denominator subject))]))

(the .public (/ parameter subject)
  (-> Fraction Fraction
      Fraction)
  (let [[parameter' subject'] (..equalized parameter subject)]
    (normal [subject' parameter'])))

(the .public (% parameter subject)
  (-> Fraction Fraction
      Fraction)
  (let [[parameter' subject'] (..equalized parameter subject)
        quot (n./ parameter' subject')]
    (..- (revised #numerator (n.* quot) parameter)
         subject)))

(the .public arithmetic
  (Arithmetic Fraction)
  (implementation
   (the + ..+)
   (the - ..-)
   (the * ..*)
   (the / ../)))

(the .public (reciprocal (open "/[0]"))
  (-> Fraction
      Fraction)
  [..#numerator /#denominator
   ..#denominator /#numerator])

(the separator "/")

(the .public (as_text (open "/[0]"))
  (text.Injection Fraction)
  (all text#composite
       (n#injection /#numerator)
       ..separator
       (n#injection /#denominator)))

(the .public format
  (Format Text Fraction)
  (implementation
   (the injection ..as_text)

   (the (projection input)
     (when (text.split_by ..separator input)
       {.#Some [num denom]}
       (do try.monad
         [numerator (n#projection num)
          denominator (n#projection denom)]
         (in (normal [#numerator numerator
                      #denominator denominator])))
       
       {.#None}
       {.#Left (text#composite "Invalid syntax for fraction: " input)}))))

(template.with [<identity> <composite> <name>]
  [(the .public <name>
     (Monoid Fraction)
     (implementation
      (the identity (..fraction <identity>))
      (the composite <composite>)))]
  
  [0 ..+ addition]
  [1 ..* multiplication]
  )

(the .public zero
  Fraction
  [#numerator 0
   #denominator 1])

(the .public one
  Fraction
  [#numerator 1
   #denominator 1])

(template.with [<numerator> <predicate> <fraction>]
  [(the .public <fraction>
     Fraction
     [#numerator <numerator>
      #denominator 0])

   (the .public <predicate>
     (Predicate Fraction)
     (|>> (= <fraction>)
          not))]

  [1 finite? infinity]
  ... https://en.wikipedia.org/wiki/Indeterminate_form
  [0 determinate? indeterminate]
  )

(template.with [,/% ,name]
  [(the .public (,name it)
     (-> Fraction
         Fraction)
     (..fraction (,/% (its #denominator it)
                      (its #numerator it))
                 (its #denominator it)))]

  [n./ whole]
  [n.% partial]
  )

... https://en.wikipedia.org/wiki/Number#Classification
(alias [Q+]
       ..Fraction)
