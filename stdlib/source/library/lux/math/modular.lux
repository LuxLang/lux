(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]
    [monoid (.only Monoid)]
    [codec (.only Codec)]
    [monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only exception)]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" monoid)
     ["<[1]>" \\parser (.only Parser)]]]
   [math
    [number
     ["i" int (.use "[1]#[0]" decimal)]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    [type
     [primitive (.except)]]]]]
 ["[0]" //
  ["[1]" modulus (.only Modulus)]])

(primitive .public (Mod m)
  (Record
   [#modulus (Modulus m)
    #value Int])

  (def .public (modular modulus value)
    (All (_ %) (-> (Modulus %) Int (Mod %)))
    (abstraction [#modulus modulus
                  #value (i.mod (//.divisor modulus) value)]))

  (with_template [<name> <type> <side>]
    [(def .public <name>
       (All (_ %) (-> (Mod %) <type>))
       (|>> representation <side>))]

    [modulus (Modulus %) product.left]
    [value Int product.right]
    )
  
  (exception .public [%] (incorrect_modulus [modulus (Modulus %)
                                             parsed Int])
    (exception.report
     (list ["Expected" (i#encoded (//.divisor modulus))]
           ["Actual" (i#encoded parsed)])))

  (def separator
    " mod ")

  (def intL
    (Parser Int)
    (<>.codec i.decimal
              (<text>.and (<text>.one_of "-+") (<text>.many <text>.decimal))))

  (def .public (codec expected)
    (All (_ %) (-> (Modulus %) (Codec Text (Mod %))))
    (implementation
     (def (encoded modular)
       (let [[_ value] (representation modular)]
         (all text#composite
              (i#encoded value)
              ..separator
              (i#encoded (//.divisor expected)))))

     (def decoded
       (<text>.result
        (do <>.monad
          [[value _ actual] (all <>.and intL (<text>.this ..separator) intL)
           _ (<>.assertion (exception.error ..incorrect_modulus [expected actual])
                           (i.= (//.divisor expected) actual))]
          (in (..modular expected value)))))))

  (with_template [<name> <op>]
    [(def .public (<name> reference subject)
       (All (_ %) (-> (Mod %) (Mod %) Bit))
       (let [[_ reference] (representation reference)
             [_ subject] (representation subject)]
         (<op> reference subject)))]

    [= i.=]
    [< i.<]
    [<= i.<=]
    [> i.>]
    [>= i.>=]
    )

  (def .public equivalence
    (All (_ %) (Equivalence (Mod %)))
    (implementation
     (def = ..=)))

  (def .public order
    (All (_ %) (Order (Mod %)))
    (implementation
     (def equivalence ..equivalence)
     (def < ..<)))

  (with_template [<name> <op>]
    [(def .public (<name> param subject)
       (All (_ %) (-> (Mod %) (Mod %) (Mod %)))
       (let [[modulus param] (representation param)
             [_ subject] (representation subject)]
         (abstraction [#modulus modulus
                       #value (|> subject
                                  (<op> param)
                                  (i.mod (//.divisor modulus)))])))]

    [+ i.+]
    [- i.-]
    [* i.*]
    )

  (with_template [<composition> <identity> <monoid>]
    [(def .public (<monoid> modulus)
       (All (_ %) (-> (Modulus %) (Monoid (Mod %))))
       (implementation
        (def identity
          (..modular modulus <identity>))
        (def composite
          <composition>)))]
    
    [..+ +0 addition]
    [..* +1 multiplication]
    )
  
  (def .public (inverse modular)
    (All (_ %) (-> (Mod %) (Maybe (Mod %))))
    (let [[modulus value] (representation modular)
          [[vk mk] gcd] (i.extended_gcd value (//.divisor modulus))]
      (case gcd
        +1 {.#Some (..modular modulus vk)}
        _ {.#None})))
  )

(exception .public [r% s%] (moduli_are_not_equal [reference (Modulus r%)
                                                  subject (Modulus s%)])
  (exception.report
   (list ["Reference" (i#encoded (//.divisor reference))]
         ["Subject" (i#encoded (//.divisor subject))])))

(def .public (adapter reference subject)
  (All (_ r% s%)
    (-> (Modulus r%) (Modulus s%)
        (Try (-> (Mod s%) (Mod r%)))))
  (if (//.= reference subject)
    {try.#Success (|>> ..value
                       (..modular reference))}
    (exception.except ..moduli_are_not_equal [reference subject])))
