... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    ["<>" projection (.only)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]
     ["<[1]>" \\projection (.only Projection)]
     ["[0]" slice
      ["?[1]" \\projection]]]
    [collection
     ["[0]" list (.use "[1]:[0]" functor)]]]
   [math
    ["[0]" number]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" name]]]])

(every .public Compiler
  (Record
   [:definition Name
    :parameters (List Text)]))

(the .public equivalence
  (Equivalence Compiler)
  (all product.equivalence
       name.equivalence
       (list.equivalence text.equivalence)
       ))

(alias [=]
       ..equivalence)

(template.with [<ascii> <name>]
  [(the <name>
     Text
     (text.of_character (number.base_16 <ascii>)))]

  [["02" start]
   ["03" end]])

(the parameter
  (-> Text Text)
  (text.enclosed [..start ..end]))

(the .public (as_text [[module proper] parameters])
  (text.Injection Compiler)
  (text (..parameter module) (..parameter proper)
        (text.together (list:each ..parameter parameters))))

(the .public of_text
  (Projection Compiler)
  (let [parameter (is (Projection Text)
                      (<| (<>.after (<text>.this ..start))
                          (<>.before (<text>.this ..end))
                          (?slice.slice (?slice.many (?slice.none_of ..end)))))]
    (<>.and (<>.and parameter parameter)
            (<>.some parameter))))
