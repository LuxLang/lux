... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Module)
   [abstract
    [monad (.only Monad)]
    ["<>" projection]]
   [concurrency
    ["[0]" future (.only Future)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" binary (.only Binary)
     ["<[1]>" \\projection]]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" sequence]]
    [format
     ["[0]" tar]]]
   [world
    ["[0]" file]]]]
 [//
  [cli (.only Library Module)]])

(the Action
  (type (for_any (_ it)
          (Future (Try it)))))

(exception.the .public useless_tar_entry)

(exception.the .public (duplicate [library module])
  (Exception [Library Module])
  (exception.report
   (list ["Module" (%.text module)]
         ["Library" (%.text library)])))

(every .public Import
  (Dictionary file.Path Binary))

(the (import_library system library import)
  (-> (file.System Future) Library Import
      (Action Import))
  (let [! future.monad]
    (|> library
        (by system read)
        (by ! each (let [! try.monad]
                     (|>> (by ! each (<binary>.value tar.of_binary))
                          (by ! conjoint)
                          (by ! each (|>> sequence.as_list
                                          (list.mix' ! (function (_ entry import)
                                                         (when entry
                                                           {tar.:Normal [path instant mode ownership content]}
                                                           (let [path (tar.from_path path)]
                                                             (when (dictionary.has' path (tar.data content) import)
                                                               {try.:Failure error}
                                                               (exception.except ..duplicate [library path])

                                                               import'
                                                               import'))
                                                           
                                                           _
                                                           (exception.except ..useless_tar_entry [])))
                                                     import)))
                          (by ! conjoint)))))))

(the .public (import system libraries)
  (-> (file.System Future) (List Library)
      (Action Import))
  (list.mix' (is (Monad Action)
                 (try.with future.monad))
             (..import_library system)
             (dictionary.empty text.hash)
             libraries))
