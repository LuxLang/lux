... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Source)
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future) (.use "[1]#[0]" functor)]]
   [error
    ["[0]" exception (.only Exception)]
    ["[0]" try (.only Try)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    ["[0]" binary (.only)
     ["![1]" \\injection]]
    [collection
     ["[0]" dictionary]
     ["[0]" sequence]
     ["[0]" list (.use "[1]#[0]" mix)]]
    [format
     ["[0]" tar]]]
   [time
    ["[0]" instant]]
   [world
    ["[0]" file]]]]
 [//
  [cli (.only Source Export)]
  ["[0]" io
   ["[1]" context]]])

(the .public file
  "library.tar")

(the .public mode
  (all tar.and
       tar.read_by_owner tar.write_by_owner
       tar.read_by_group tar.write_by_group
       tar.read_by_other))

(the .public ownership
  tar.Ownership
  (let [commons (is tar.Owner
                    [tar.#name tar.anonymous
                     tar.#id tar.no_id])]
    [tar.#user commons
     tar.#group commons]))

(exception.the .public (cannot_export [file])
  (Exception file.Path)
  (exception.report
   (list ["File" (%.text file)])))

(the .public (library fs sources)
  (-> (file.System Future) (List Source)
      (Future (Try tar.Tar)))
  (|> sources
      (io.listing fs)
      (future#each (function (_ listing)
                     (when listing
                       {try.#Success listing}
                       (list.mix' try.monad
                                  (function (_ [path source_code] tar)
                                    (when [(|> path
                                               (text.replaced (by fs delimiter) .module_delimiter)
                                               tar.path)
                                           (tar.content source_code)]
                                      [{try.#Success path} {try.#Success content}]
                                      {try.#Success (sequence.suffix {tar.#Normal [path
                                                                                   (instant.of_millis +0)
                                                                                   ..mode
                                                                                   ..ownership
                                                                                   content]}
                                                                     tar)}

                                      else
                                      (exception.except ..cannot_export [path])))
                                  (sequence.sequence)
                                  (dictionary.entries listing))

                       {try.#Failure error}
                       {try.#Failure error})))))

(the .public (export fs [sources target])
  (-> (file.System Future) Export
      (Future (Try Any)))
  (monad.let [! (try.with future.monad)]
    [tar (|> sources
             (..library fs)
             (by ! each (!binary.value tar.as_binary)))
     .let [/ (by fs delimiter)]]
    (by fs write (text target / ..file) tar)))
