... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]]
   [data
    [binary (.only Binary)]
    ["[0]" product]
    [text
     [encoding 
      ["[0]" utf8]]]
    [collection
     ["[0]" sequence]
     ["[0]" set (.only Set)]
     ["[0]" list (.use "[1]:[0]" functor)]]]
   [type (.only sharing)]]]
 ["[0]" // (.only Packager)
  [//
   ["[0]" archive (.only Output)
    ["[0]" artifact]
    ["[0]" unit]
    ["[0]" module (.only)
     ["[0]" descriptor]]]
   ["[0]" cache
    [dependency
     ["[1]/[0]" module]
     ["[1]/[0]" artifact]]]
   ["[0]" io
    ["[1]" archive]]
   [//
    [language
     ["$" lux]]]]])

(the (write_module necessary_dependencies sequence [module_id output] so_far)
  (for_any (_ declaration)
    (-> (Set unit.ID) (-> declaration declaration declaration) [module.ID Output] declaration
        (Try declaration)))
  (|> output
      sequence.as_list
      (list.all (function (_ [artifact_id custom content])
                  (if (set.member? necessary_dependencies [module_id artifact_id])
                      {.#Some content}
                      {.#None})))
      (list.mix' try.monad
                 (function (_ content so_far)
                   (|> content
                       (by utf8.binary of)
                       (by try.monad each
                           (|>> as_expected
                                (is declaration)
                                (sharing [declaration]
                                  (is declaration
                                      so_far))
                                (sequence so_far)))))
                 so_far)))

(the .public (package header code sequence scope)
  (for_any (_ declaration)
    (-> declaration
        (-> declaration Text)
        (-> declaration declaration declaration)
        (-> declaration declaration)
        Packager))
  (function (package host_dependencies archive program)
    (monad.let [! try.monad]
      [.let [necessary_dependencies (cache/artifact.necessary_dependencies archive)]
       order (cache/module.load_order $.key archive)]
      (|> order
          (list:each (function (_ [module [module_id entry]])
                       [module_id (its archive.#output entry)]))
          (list.mix' ! (..write_module necessary_dependencies sequence) header)
          (by ! each (|>> scope
                          code
                          (by utf8.binary as)
                          {.#Left}))))))
