... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [control
    ["[0]" pipe]]
   [error
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" maybe (.use "[1]:[0]" functor)]
    ["[0]" product]
    ["[0]" binary
     ["[1]" \\injection (.only Injection)]
     ["<[1]>" \\projection (.only Projection)]]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     [set (.only Set)]
     ["[0]" list]
     ["[0]" sequence (.only Sequence) (.use "[1]:[0]" functor mix)]
     ["[0]" dictionary (.only Dictionary)]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]]]
 ["[0]" //
  ["[0]" unit]
  ["[1]" artifact (.only Artifact ID)
   ["[2][0]" category (.only Category)]
   ["[2][0]" definition]]])

(nominal.every .public Registry
  (Record
   [:artifacts (Sequence [Artifact (Set unit.ID)])
    :resolver (Dictionary Text [ID (Maybe //definition.Definition)])])

  (the .public empty
    Registry
    (nominal.of
     [:artifacts sequence.empty
      :resolver (dictionary.empty text.hash)]))

  (the .public artifacts
    (-> Registry (Sequence [Artifact (Set unit.ID)]))
    (|>> nominal.as
         (its :artifacts)))

  (the next
    (-> Registry ID)
    (|>> ..artifacts sequence.size))

  (the .public (resource mandatory? dependencies registry)
    (-> Bit (Set unit.ID) Registry [ID Registry])
    (let [id (..next registry)]
      [id
       (|> registry
           nominal.as
           (revised :artifacts (sequence.suffix [[//.:id id
                                                  //.:category {//category.:Anonymous}
                                                  //.:mandatory? mandatory?]
                                                 dependencies]))
           nominal.of)]))

  (template.with [<tag> <create> <fetch> <type> <name> <+resolver>]
    [(the .public (<create> it mandatory? dependencies registry)
       (-> <type> Bit (Set unit.ID) Registry [ID Registry])
       (let [id (..next registry)]
         [id
          (|> registry
              nominal.as
              (revised :artifacts (sequence.suffix [[//.:id id
                                                     //.:category {<tag> it}
                                                     //.:mandatory? mandatory?]
                                                    dependencies]))
              (revised :resolver (dictionary.has (<name> it) [id (is (Maybe //definition.Definition) <+resolver>)]))
              nominal.of)]))

     (the .public (<fetch> registry)
       (-> Registry
           (List <type>))
       (|> registry
           nominal.as
           (its :artifacts)
           sequence.as_list
           (list.all (|>> product.left
                          (its //.:category)
                          (pipe.when
                            {<tag> it} {.:Some it}
                            _ {.:None})))))]

    [[//category.:Definition definition definitions //definition.Definition
      product.left {.:Some it}]
     [//category.:Custom custom customs Text |> {.:None}]]
    )

  (the .public (find_definition name registry)
    (-> Text Registry (Maybe [ID (Maybe //definition.Definition)]))
    (|> (nominal.as registry)
        (its :resolver)
        (dictionary.value name)))

  (the .public (id name registry)
    (-> Text Registry (Maybe ID))
    (maybe:each product.left (find_definition name registry)))

  (the .public as_binary
    (Injection Registry)
    (let [definition (is (Injection //definition.Definition)
                         (all binary.and
                              binary.text
                              (binary.maybe
                               (all binary.and
                                    binary.natural
                                    binary.natural
                                    binary.natural
                                    ))
                              ))
          category (is (Injection Category)
                       (function (_ value)
                         (`` (when value
                               (,, (template.with [<natural> <tag> <as_binary>]
                                     [{<tag> value}
                                      ((binary.and binary.natural <as_binary>) [<natural> value])]

                                     [[0 //category.:Anonymous binary.any]
                                      [1 //category.:Definition definition]
                                      [2 //category.:Custom binary.text]]))))))
          mandatory? binary.bit
          dependency (is (Injection unit.ID)
                         (binary.and binary.natural binary.natural))
          dependencies (is (Injection (Set unit.ID))
                           (binary.set dependency))
          artifacts (is (Injection (Sequence [Category Bit (Set unit.ID)]))
                        (binary.sequence_64 (all binary.and category mandatory? dependencies)))]
      (|>> nominal.as
           (its :artifacts)
           (sequence:each (function (_ [it dependencies])
                            [(its //.:category it)
                             (its //.:mandatory? it)
                             dependencies]))
           artifacts)))

  (exception.the (invalid_category tag)
    (Exception Natural)
    (exception.report
     (list ["Tag" (%.natural tag)])))

  (the .public of_binary
    (Projection Registry)
    (let [definition (is (Projection //definition.Definition)
                         (all <>.and
                              <binary>.text
                              (<binary>.maybe
                               (all <>.and
                                    <binary>.natural
                                    <binary>.natural
                                    <binary>.natural
                                    ))
                              ))
          category (is (Projection Category)
                       (monad.let [! <>.monad]
                         [tag <binary>.natural]
                         (`` (when tag
                               (,, (template.with [<natural> <tag> <projection>]
                                     [<natural>
                                      (by ! each (|>> {<tag>}) <projection>)]

                                     [[0 //category.:Anonymous <binary>.any]
                                      [1 //category.:Definition definition]
                                      [2 //category.:Custom <binary>.text]]))
                               
                               _
                               (<>.failure (exception.error ..invalid_category [tag]))))))
          mandatory? <binary>.bit
          dependency (is (Projection unit.ID)
                         (<>.and <binary>.natural <binary>.natural))
          dependencies (is (Projection (Set unit.ID))
                           (<binary>.set unit.hash dependency))]
      (|> (<binary>.sequence_64 (all <>.and category mandatory? dependencies))
          (by <>.monad each (sequence:mix (function (_ [category mandatory? dependencies] registry)
                                            (product.right
                                             (`` (when category
                                                   {//category.:Anonymous}
                                                   (..resource mandatory? dependencies registry)

                                                   (,, (template.with [<tag> <create>]
                                                         [{<tag> name}
                                                          (<create> name mandatory? dependencies registry)]

                                                         [[//category.:Definition ..definition]
                                                          [//category.:Custom ..custom]]))
                                                   ))))
                                          ..empty)))))
  )
