... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [collection
     ["[0]" dictionary (.only Dictionary)]]
    ["[0]" binary
     [\\projection (.only Projection)]
     ["[1]" \\injection (.only Injection)]]]
   [type (.only sharing)
    ["[0]" nominal]]]]
 [///
  ["[0]" signature (.only Signature)]
  ["[0]" key (.only Key)]])

(exception.the .public (invalid_signature [expected actual])
  (Exception [Signature Signature])
  (exception.report
   (list ["Expected" (signature.description expected)]
         ["Actual" (signature.description actual)])))

(nominal.every .public (Document d)
  (Record
   [#signature Signature
    #content d])

  (the .public (content key document)
    (for_any (_ d) (-> (Key d) (Document Any) (Try d)))
    (let [[document//signature document//content] (nominal.as document)]
      (if (signature.= (key.signature key)
                       document//signature)
          {try.#Success (sharing [e]
                          (is (Key e)
                              key)
                          (is e
                              (as_expected document//content)))}
          (exception.except ..invalid_signature [(key.signature key)
                                                 document//signature]))))

  (the .public (document key content)
    (for_any (_ d) (-> (Key d) d (Document d)))
    (nominal.of
     [#signature (key.signature key)
      #content content]))

  (the .public (marked? key document)
    (for_any (_ d) (-> (Key d) (Document Any) (Try (Document d))))
    (monad.let try.monad
      [_ (..content key document)]
      (pure (as_expected document))))

  (the .public signature
    (-> (Document Any) Signature)
    (|>> nominal.as
         (its #signature)))

  (the .public (as_binary content)
    (for_any (_ d)
      (-> (Injection d)
          (Injection (Document d))))
    (let [as_binary (all binary.and
                         signature.as_binary
                         content)]
      (|>> nominal.as
           as_binary)))

  (the .public (of_binary key it)
    (for_any (_ d)
      (-> (Key d) (Projection d)
          (Projection (Document d))))
    (monad.let <>.monad
      [actual signature.of_binary
       .let [expected (key.signature key)]
       _ (if (signature.= expected actual)
             (pure [])
             (<>.of_try (exception.except ..invalid_signature [expected actual])))
       it it]
      (pure (nominal.of [actual it]))))
  )
