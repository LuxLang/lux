... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Module)
   [abstract
    [monad (.only Monad do)]]
   [concurrency
    ["[0]" future (.only Future) (.use "[1]#[0]" monad)]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [function
    [predicate (.only Predicate)]]
   [data
    [binary (.only Binary)]
    ["[0]" text (.use "[1]#[0]" hash)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" list]]]
   ["[0]" type]
   [world
    ["[0]" file]]]]
 ["[0]" // (.only Context)
  ["/[1]" //
   [import (.only Import)]
   ["/[1]" // (.only Input)]
   [archive
    [module
     [descriptor (.only Module)]]]]])

(exception.the .public (cannot_find_module [importer module])
  (Exception [Module Module])
  (exception.report
   (list ["Module" (%.text module)]
         ["Importer" (%.text importer)])))

(exception.the .public (cannot_read_module module)
  (Exception Module)
  (exception.report
   (list ["Module" (%.text module)])))

(every .public Extension
  Text)

(the .public lux_extension
  Extension
  ".lux")

(the .public (path fs context module)
  (for_any (_ !)
    (-> (file.System !) Context Module
        file.Path))
  (|> module
      (//.path fs)
      (text context (by fs delimiter))))

(the (find_source_file fs importer contexts module extension)
  (-> (file.System Future) Module (List Context) Module Extension
      (Future (Try file.Path)))
  (do [! future.monad]
    [path (list.one' !
                     (function (_ context)
                       (let [path (text (..path fs context module) extension)]
                         (do !
                           [? (by fs file? path)]
                           (pure (if ?
                                     {.#Some path}
                                     {.#None})))))
                     contexts)]
    (pure (try.or path
                  (exception.except ..cannot_find_module [importer module])))))

(the (full_host_extension partial_host_extension)
  (-> Extension
      Extension)
  (text partial_host_extension ..lux_extension))

(the (find_local_source_file fs importer import contexts partial_host_extension module)
  (-> (file.System Future) Module Import (List Context) Extension Module
      (Future (Try [file.Path Binary])))
  ... Preference is explicitly being given to Lux files that have a host extension.
  ... Normal Lux files (i.e. without a host extension) are then picked as fallback files.
  (do [! future.monad]
    [outcome (..find_source_file fs importer contexts module (..full_host_extension partial_host_extension))]
    (when outcome
      {try.#Success path}
      (|> path
          (by fs read)
          (by (try.with !) each (|>> [path])))

      {try.#Failure _}
      (do [! (try.with !)]
        [path (..find_source_file fs importer contexts module ..lux_extension)]
        (|> path
            (by fs read)
            (by ! each (|>> [path])))))))

(the (find_library_source_file importer import partial_host_extension module)
  (-> Module Import Extension Module
      (Try [file.Path Binary]))
  (let [path (text module (..full_host_extension partial_host_extension))]
    (when (dictionary.value path import)
      {try.#Success data}
      {try.#Success [path data]}

      failure
      (let [path (text module ..lux_extension)]
        (when (dictionary.value path import)
          {try.#Success data}
          {try.#Success [path data]}

          failure
          (exception.except ..cannot_find_module [importer module]))))))

(the (find_any_source_file fs importer import contexts partial_host_extension module)
  (-> (file.System Future) Module Import (List Context) Extension Module
      (Future (Try [file.Path Binary])))
  ... Preference is explicitly being given to Lux files that have a host extension.
  ... Normal Lux files (i.e. without a host extension) are then picked as fallback files.
  (do [! future.monad]
    [outcome (find_local_source_file fs importer import contexts partial_host_extension module)]
    (when outcome
      {try.#Success [path data]}
      (pure outcome)

      {try.#Failure _}
      (pure (..find_library_source_file importer import partial_host_extension module)))))

(the .public (read fs importer import contexts partial_host_extension module)
  (-> (file.System Future) Module Import (List Context) Extension Module
      (Future (Try Input)))
  (do (try.with future.monad)
    [[path binary] (..find_any_source_file fs importer import contexts partial_host_extension module)]
    (when (by utf8.binary of binary)
      {try.#Success code}
      (pure [////.#module module
             ////.#file path
             ////.#hash (text#hash code)
             ////.#code code])
      
      {try.#Failure _}
      (future#pure (exception.except ..cannot_read_module [module])))))

(every .public Enumeration
  (Dictionary file.Path Binary))

(the (context_listing fs context directory enumeration)
  (-> (file.System Future) Context file.Path Enumeration
      (Future (Try Enumeration)))
  (do [! (try.with future.monad)]
    [enumeration (|> directory
                     (by fs directory_files)
                     (by ! each (list.mix' ! (function (_ file enumeration)
                                               (if (text.ends_with? ..lux_extension file)
                                                   (do !
                                                     [source_code (by fs read file)]
                                                     (future#pure (dictionary.has' (text.replaced_once context "" file) source_code enumeration)))
                                                   (pure enumeration)))
                                           enumeration))
                     (by ! conjoint))]
    (|> directory
        (by fs sub_directories)
        (by ! each (list.mix' ! (context_listing fs context) enumeration))
        (by ! conjoint))))

(the Action
  (type (for_any (_ it)
          (Future (Try it)))))

(the (canonical fs context)
  (-> (file.System Future) Context
      (Action Context))
  (do (try.with future.monad)
    [subs (by fs sub_directories context)]
    (pure (|> subs
              (list.item 0)
              (try.else context)
              (file.parent fs)
              (maybe.else context)))))

(the .public (listing fs contexts)
  (-> (file.System Future) (List Context)
      (Action Enumeration))
  (let [! (is (Monad Action)
              (try.with future.monad))]
    (list.mix' !
               (function (_ context enumeration)
                 (do !
                   [context (..canonical fs context)]
                   (..context_listing fs
                                      (text context (by fs delimiter))
                                      context
                                      enumeration)))
               (is Enumeration
                   (dictionary.empty text.hash))
               contexts)))
