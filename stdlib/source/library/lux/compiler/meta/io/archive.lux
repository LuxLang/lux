... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    [monad (.only Monad do)]]
   [concurrency
    ["[0]" future (.only Future) (.use "[1]#[0]" monad)]]
   [error (.only error)
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    ["[0]" binary (.only Binary)
     ["<[1]>" \\projection (.only Projection)]]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     [set (.only Set)]
     ["[0]" list (.use "[1]#[0]" mix monad)
      ["[0]" property (.use "[1]#[0]" functor)]]
     ["[0]" stack (.use "[1]#[0]" mix monad)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" sequence (.only Sequence)]]]
   [macro
    ["^" pattern]
    ["[0]" expansion]]
   [meta
    ["[0]" configuration (.only Configuration)]
    ["[0]" version]]
   [world
    ["[0]" file]]
   [compiler
    ["@[0]" type]]]]
 ["[0]" // (.only)
  ["[1][0]" context]
  ["/[1]" // (.only)
   [import (.only Import)]
   ["[0]" context (.only Context)]
   ["[0]" archive (.only Output Archive)
    [key (.only Key)]
    ["[0]" registry (.only Registry)]
    ["[0]" unit]
    ["[0]" artifact (.only Artifact)
     ["[0]" category (.only Category)]]
    ["[0]" module (.only)
     ["[0]" descriptor (.only Descriptor)]
     ["[0]" document (.only Document)]]]
   ["[0]" cache (.only)
    ["[1]/[0]" archive]
    ["[1]/[0]" module]
    ["[1]/[0]" purge (.only Cache Purge)]
    ["[0]" dependency
     ["[1]" module]]]
   [// (.only Custom)
    [language
     ["$" lux (.only)
      ["[0]" analysis]
      ["[0]" synthesis]
      ["[0]" translation]
      ["[0]" declaration]
      ["[1]/[0]" program]]]]]])

(the (module_of key projection)
  (for_any (_ document)
    (-> (Key document) (Projection document) (Projection (module.Module document))))
  (all <>.and
       <binary>.natural
       descriptor.of_binary
       (document.of_binary key projection)))

(the (of_binary key of_binary)
  (for_any (_ document)
    (-> (Key document) (Projection document)
        (Projection [(module.Module document) Registry])))
  (all <>.and
       (..module_of key of_binary)
       registry.of_binary))

(the (fresh_analysis_state host configuration)
  (-> Target Configuration
      analysis.State)
  (analysis.state (analysis.info version.latest host configuration)))

(the (analysis_state host configuration archive)
  (-> Target Configuration Archive
      (Try analysis.State))
  (do [! try.monad]
    [modules (is (Try (property.List @type.Module))
                 (list.each' ! (function (_ module)
                                 (do !
                                   [entry (archive.find module archive)
                                    content (|> entry
                                                (its [archive.#module module.#document])
                                                (document.content $.key))]
                                   (in [module content])))
                             (archive.archived archive)))]
    (in (|> (fresh_analysis_state host configuration)
            (has @type.#modules modules)))))

(every Definitions
  (Dictionary Text Any))

(the cannot_find_artifact
  (error "Cannot find artifact."))

(the cannot_find_definition
  (error "Cannot find definition."))

(the (loaded_document extension host @module expected actual document)
  (for_any (_ expression declaration)
    (-> Text (translation.Host expression declaration) module.ID (Sequence [Artifact (Set unit.ID)]) (Dictionary Text Binary) (Document @type.Module)
        (Try [(Document @type.Module) Output])))
  (do [! try.monad]
    [[definitions output] (is (Try [Definitions Output])
                              (loop (again [input (list.as_stack (sequence.as_list expected))
                                            definitions (is Definitions
                                                            (dictionary.empty text.hash))
                                            output (is Output sequence.empty)])
                                (when input
                                  {.#Top [[[@artifact artifact_category mandatory_artifact?] artifact_dependencies] input']}
                                  (when (do !
                                          [data (|> actual
                                                    (dictionary.value (text (%.natural @artifact) extension))
                                                    (try.of_maybe ..cannot_find_artifact))
                                           .let [context [@module @artifact]
                                                 declaration (by host ingest context data)]]
                                          (when artifact_category
                                            {category.#Anonymous}
                                            (do !
                                              [.let [output (sequence.suffix [@artifact {.#None} data] output)]
                                               _ (by host re_learn context {.#None} declaration)]
                                              (in [definitions
                                                   output]))
                                            
                                            {category.#Definition [name function_artifact]}
                                            (let [output (sequence.suffix [@artifact {.#None} data] output)]
                                              (if (text.= $/program.name name)
                                                  (in [definitions
                                                       output])
                                                  (do !
                                                    [value (by host re_load context {.#None} declaration)]
                                                    (in [(dictionary.has name value definitions)
                                                         output]))))

                                            {category.#Custom name}
                                            (do !
                                              [.let [output (sequence.suffix [@artifact {.#Some name} data] output)]
                                               _ (by host re_learn context {.#Some name} declaration)]
                                              (in [definitions
                                                   output]))))
                                    {try.#Success [definitions' output']}
                                    (again input' definitions' output')

                                    failure
                                    failure)
                                  
                                  {.#Empty}
                                  {try.#Success [definitions output]})))
     content (document.content $.key document)
     definitions (list.each' ! (function (_ [def_name [exported? def_global]])
                                 (when def_global
                                   {@type.#Alias payload}
                                   (in (list [def_name [exported? def_global]]))
                                   
                                   {@type.#Definition [type _]}
                                   (|> definitions
                                       (dictionary.value def_name)
                                       (try.of_maybe ..cannot_find_definition)
                                       (by ! each (|>> [type]
                                                       {@type.#Definition}
                                                       [exported?]
                                                       [def_name]
                                                       (list))))

                                   {@type.#Default [type _]}
                                   (in (list))))
                             (its @type.#definitions content))]
    (in [(document.document $.key (has @type.#definitions (list#conjoint definitions) content))
         output])))

(the (load_definitions fs context @module host_environment entry)
  (for_any (_ expression declaration)
    (-> (file.System Future) Context module.ID (translation.Host expression declaration)
        (archive.Entry @type.Module)
        (Future (Try (archive.Entry @type.Module)))))
  (do (try.with future.monad)
    [actual (is (Future (Try (Dictionary Text Binary)))
                (cache/module.artifacts future.monad fs @module))
     .let [expected (registry.artifacts (its archive.#registry entry))]
     [document output] (|> (its [archive.#module module.#document] entry)
                           (loaded_document (its context.#artifact_extension context) host_environment @module expected actual)
                           future#in)]
    (in (|> entry
            (has [archive.#module module.#document] document)
            (has archive.#output output)))))

(the pseudo_module
  Text
  "(Lux Caching System)")

(the (cache_of customs)
  (-> (Stack Custom) (Projection [(module.Module Any) Registry]))
  (when customs
    {.#Empty}
    (..of_binary $.key $.of_binary)
    
    {.#Top [custom_state custom_key custom_format custom_of custom_compiler] tail}
    (all <>.either
         (..of_binary custom_key custom_of)
         (cache_of tail)
         )))

(the (valid_cache customs fs context import contexts [module_name @module])
  (-> (Stack Custom) (file.System Future) Context Import (List //.Context)
      [descriptor.Module module.ID]
      (Future (Try Cache)))
  (expansion.let [<cache> (these module_name @module module registry)]
    (do [! (try.with future.monad)]
      [data (is (Future (Try Binary))
                (cache/module.cache fs @module))
       [module registry] (future#in (<binary>.value (..cache_of customs) data))]
      (if (text.= descriptor.runtime module_name)
          (in [true <cache>])
          (do !
            [input (//context.read fs ..pseudo_module import (list.as_stack contexts) (its context.#host_module_extension context) module_name)]
            (in [(cache/purge.valid? (its module.#descriptor module) input) <cache>]))))))

(the (pre_loaded_caches customs fs context import contexts archive)
  (-> (Stack Custom) (file.System Future) Context Import (List //.Context) Archive
      (Future (Try (List Cache))))
  (do [! (try.with future.monad)]
    [... TODO: Stop needing to wrap this expression in an unnecessary "do" expression.
     it (|> archive
            archive.reservations
            (list.each' ! (..valid_cache customs fs context import contexts)))]
    (in it)))

(the (load_order archive pre_loaded_caches)
  (-> Archive (List Cache)
      (Try (dependency.Order @type.Module)))
  (|> pre_loaded_caches
      (list.mix' try.monad
                 (function (_ [_ [module @module |module| registry]] archive)
                   (archive.has module
                                [archive.#module |module|
                                 archive.#output (is Output sequence.empty)
                                 archive.#registry registry]
                                archive))
                 archive)
      (by try.monad each (dependency.load_order $.key))
      (by try.monad conjoint)))

(the (loaded_caches host_environment fs context purge load_order)
  (for_any (_ expression declaration)
    (-> (translation.Host expression declaration) (file.System Future) Context
        Purge (dependency.Order @type.Module)
        (Future (Try (List [descriptor.Module (archive.Entry @type.Module)])))))
  (do [! (try.with future.monad)]
    [... TODO: Stop needing to wrap this expression in an unnecessary "do" expression.
     it (|> load_order
            list.of_stack
            (list.only (|>> product.left (dictionary.key? purge) not))
            (list.each' ! (function (_ [module_name [@module entry]])
                            (do !
                              [entry (..load_definitions fs context @module host_environment entry)]
                              (in [module_name entry])))))]
    (in it)))

(the (load_every_reserved_module customs configuration host_environment fs context import contexts archive)
  (for_any (_ expression declaration)
    (-> (Stack Custom) Configuration (translation.Host expression declaration) (file.System Future) Context Import (List //.Context) Archive
        (Future (Try [Archive analysis.State]))))
  (do [! (try.with future.monad)]
    [pre_loaded_caches (..pre_loaded_caches customs fs context import contexts archive)
     load_order (future#in (load_order archive pre_loaded_caches))
     .let [purge (cache/purge.purge pre_loaded_caches load_order)]
     _ (|> purge
           dictionary.entries
           (list.each' ! (|>> product.right (cache/purge.purge! fs))))
     loaded_caches (..loaded_caches host_environment fs context purge load_order)]
    (future#in
     (do [! try.monad]
       [archive (list.mix' !
                           (function (_ [module entry] archive)
                             (archive.has module entry archive))
                           archive
                           loaded_caches)
        analysis_state (..analysis_state (its context.#host context) configuration archive)]
       (in [archive analysis_state])))))

(the .public (thaw customs configuration host_environment fs context import contexts)
  (for_any (_ expression declaration)
    (-> (Stack Custom) Configuration (translation.Host expression declaration) (file.System Future) Context Import (List //.Context)
        (Future (Try [Archive analysis.State]))))
  (do future.monad
    [binary (by fs read (cache/archive.descriptor fs))]
    (when binary
      {try.#Success binary}
      (do (try.with future.monad)
        [archive (future#in (archive.import ///.version configuration binary))]
        (..load_every_reserved_module customs configuration host_environment fs context import contexts archive))
      
      {try.#Failure error}
      (in {try.#Success [archive.empty
                         (fresh_analysis_state (its context.#host context) configuration)]}))))
