... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future)]]
   [error
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" text (.only)]
    [collection
     ["[0]" list (.use "[1]#[0]" mix functor)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" set]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [world
    ["[0]" file]]]]
 ["[0]" //
  ["[1][0]" module]
  ["[0]" dependency
   ["[1]" module]]
  ["/[1]" //
   ["/[1]" // (.only Input)]
   ["[0]" archive (.only)
    [registry (.only Registry)]
    ["[0]" module (.only)
     ["[0]" descriptor (.only Descriptor)]]]]])

(every .public Cache
  [Bit descriptor.Module module.ID (module.Module Any) Registry])

(every .public Purge
  (Dictionary descriptor.Module module.ID))

... TODO: Make the monad parameterizable.
(the .public (purge! fs @module)
  (-> (file.System Future) module.ID
      (Future (Try Any)))
  (monad.let [! (try.with future.monad)]
    [.let [cache (//module.path fs @module)]
     _ (|> cache
           (by fs directory_files)
           (by ! each (list.each' ! (by fs delete)))
           (by ! conjoint))]
    (by fs delete cache)))

(the .public (valid? expected actual)
  (-> Descriptor Input
      Bit)
  (and (text.= (its descriptor.#name expected)
               (its ////.#module actual))
       (text.= (its descriptor.#file expected)
               (its ////.#file actual))
       (n.= (its descriptor.#hash expected)
            (its ////.#hash actual))))

(the initial
  (-> (List Cache)
      Purge)
  (|>> (list.all (function (_ [valid? module_name @module _])
                   (if valid?
                       {.#None}
                       {.#Some [module_name @module]})))
       (dictionary.of_list text.hash)))

(the .public (purge caches)
  (-> (List Cache) (dependency.Order Any)
      Purge)
  (list#mix (function (_ [module_name [@module entry]] purge)
              (let [purged? (is (Predicate descriptor.Module)
                                (dictionary.in_domain? purge))]
                (if (purged? module_name)
                    purge
                    (if (|> entry
                            (its [archive.#module module.#descriptor descriptor.#references])
                            set.as_list
                            (list.any? purged?))
                        (dictionary.has module_name @module purge)
                        purge))))
            (..initial caches)))
