... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Tree_shaking
(.using
 [library
  [lux (.except all)
   [abstract
    [hash (.only Hash)]
    [monad (.only do)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid mix monad)]
     ["[0]" stack (.use "[1]#[0]" monoid mix monad)]
     ["[0]" set (.only Set)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" sequence]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [meta
    ["[0]" name]]
   [compiler
    ["[0]" reference (.only Constant)]
    [language
     [lux
      ["[0]" phase]
      ["[0]" synthesis (.only Path)]
      ["[0]" translation (.only Operation)]
      ["[0]" analysis
       ["[1]/[0]" complex]]]]]]]
 [////
  ["[0]" archive (.only Archive)
   ["[0]" artifact]
   ["[0]" registry (.only Registry)]
   ["[0]" unit]]])

(the (path_references references)
  (-> (-> synthesis.Term (Stack Constant))
      (-> Path (Stack Constant)))
  (function (again path)
    (`` (when path
          (^.or {synthesis.#Pop}
                {synthesis.#Access _}
                {synthesis.#Bind _}
                {synthesis.#List size})
          (stack)

          (,, (template.with [<tag>]
                [{<tag> left right}
                 (.all stack#composite
                       (again left)
                       (again right))]

                [synthesis.#Alt]
                [synthesis.#Seq]))
          
          {synthesis.#Bit_Fork test then else}
          (when else
            {.#Some else}
            (.all stack#composite
                  (again then)
                  (again else))
            
            {.#None}
            (again then))

          (,, (template.with [<tag>]
                [{<tag> [head tail]}
                 (|> {.#Top head (list.as_stack tail)}
                     (stack#each (|>> product.right again))
                     stack#conjoint)]

                [synthesis.#I64_Fork]
                [synthesis.#F64_Fork]
                [synthesis.#Text_Fork]))
          
          {synthesis.#Then then}
          (references then)))))

(the (references [_ value])
  (-> synthesis.Term
      (Stack Constant))
  (when value
    {synthesis.#Simple value}
    (stack)
    
    {synthesis.#Structure value}
    (when value
      {analysis/complex.#Variant value}
      (|> value
          (its analysis/complex.#value)
          references)
      
      {analysis/complex.#Tuple value}
      (|> value
          list.as_stack
          (stack#each references)
          stack#conjoint))

    {synthesis.#Reference value}
    (when value
      {reference.#Variable _}
      (stack)
      
      {reference.#Constant value}
      (stack value))
    
    {synthesis.#Control value}
    (when value
      {synthesis.#When input path}
      (.all stack#composite
            (references input)
            (path_references references path))
      
      {synthesis.#Loop value}
      (when value
        {synthesis.#Tail_Recursion value}
        (let [of_inits (|> value
                           (its synthesis.#inits)
                           list.as_stack
                           (stack#each references))
              of_iteration (|> value
                               (its synthesis.#iteration)
                               references)]
          (stack#conjoint (stack.partial of_iteration of_inits)))
        
        {synthesis.#Tail_Iteration value}
        (|> value
            list.as_stack
            (stack#each references)
            stack#conjoint))
      
      {synthesis.#Function value}
      (when value
        {synthesis.#Abstraction value}
        (|> value
            (its synthesis.#body)
            references)
        
        {synthesis.#Reification function arguments}
        (|> (stack.partial function (list.as_stack arguments))
            (stack#each references)
            stack#conjoint)))
    
    {synthesis.#Extension [name parameters]}
    (|> parameters
        list.as_stack
        (stack#each references)
        stack#conjoint)))

(the .public (dependencies archive value)
  (for_any (_ anchor expression declaration)
    (-> Archive synthesis.Term
        (Operation anchor expression declaration (Set unit.ID))))
  (let [! phase.monad]
    (|> value
        ..references
        list.of_stack
        (set.of_list name.hash)
        set.as_list
        (list.each' ! (translation.remember archive))
        (by ! each (set.of_list unit.hash)))))

(the .public (path_dependencies archive value)
  (for_any (_ anchor expression declaration)
    (-> Archive Path
        (Operation anchor expression declaration (Set unit.ID))))
  (let [! phase.monad]
    (|> value
        (..path_references ..references)
        list.of_stack
        (set.of_list name.hash)
        set.as_list
        (list.each' ! (translation.remember archive))
        (by ! each (set.of_list unit.hash)))))

(the .public all
  (-> (Stack (Set unit.ID))
      (Set unit.ID))
  (stack#mix set.union unit.none))

(the (immediate_dependencies archive)
  (-> Archive
      [(Stack unit.ID)
       (Dictionary unit.ID (Set unit.ID))])
  (|> archive
      archive.entries
      (list#each (function (_ [module [module_id [_module output registry]]])
                   (|> registry
                       registry.artifacts
                       sequence.as_list
                       (list#each (function (_ [artifact dependencies])
                                    [[module_id (its artifact.#id artifact)]
                                     (its artifact.#mandatory? artifact)
                                     dependencies])))))
      list#conjoint
      (list#mix (function (_ [artifact_id mandatory? dependencies]
                             [mandatory_dependencies
                              all_dependencies])
                  [(if mandatory?
                     (stack.partial artifact_id mandatory_dependencies)
                     mandatory_dependencies)
                   (dictionary.has artifact_id dependencies all_dependencies)])
                [(stack)
                 (dictionary.empty unit.hash)])))

(the .public (necessary_dependencies archive)
  (-> Archive
      (Set unit.ID))
  (let [[mandatory immediate] (immediate_dependencies archive)]
    (loop (again [pending mandatory
                  minimum unit.none])
      (when pending
        {.#Top head tail}
        (if (set.member? minimum head)
          (again tail minimum)
          (again (when (dictionary.value head immediate)
                   {try.#Success additional}
                   (stack#composite (list.as_stack (set.as_list additional)) tail)

                   failure
                   tail)
                 (set.has head minimum)))
        
        {.#Empty}
        minimum))))
