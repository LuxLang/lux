... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Tree_shaking
(.using
 [library
  [lux (.except all)
   [abstract
    [hash (.only Hash)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]:[0]" monoid mix monad)]
     ["[0]" set (.only Set)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" sequence]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [meta
    ["[0]" name]]
   [compiler
    ["@[0]" type (.only Constant)]
    [language
     [lux
      ["[0]" phase]
      ["[0]" synthesis (.only Term)
       ["[0]" path (.only Path)]]
      ["[0]" translation (.only Operation)]
      ["[0]" analysis
       ["[1]/[0]" complex]]]]]]]
 [////
  ["[0]" archive (.only Archive)
   ["[0]" artifact]
   ["[0]" registry (.only Registry)]
   ["[0]" unit]]])

(the (path_references references)
  (-> (-> Term (List Constant))
      (-> (Path Term) (List Constant)))
  (function (of path)
    (`` (when path
          (^.or {path.:Pop}
                {path.:Access _}
                {path.:Bind _}
                {path.:List size})
          (list)

          (,, (template.with [<tag>]
                [{<tag> left right}
                 (.all list:composite
                       (of left)
                       (of right))]

                [[path.:Or]
                 [path.:And]]))
          
          {path.:Bit_Fork test then else}
          (when else
            {.:Some else}
            (.all list:composite
                  (of then)
                  (of else))
            
            {.:None}
            (of then))

          (,, (template.with [<tag>]
                [{<tag> [head tail]}
                 (|> (list:composite (list head) tail)
                     (list:each (|>> product.right of))
                     list:conjoint)]

                [[path.:I64_Fork]
                 [path.:F64_Fork]
                 [path.:Text_Fork]]))
          
          {path.:Then then}
          (references then)))))

(the (references [_ value])
  (-> Term
      (List Constant))
  (when value
    {synthesis.:Simple value}
    (list)
    
    {synthesis.:Structure value}
    (when value
      {@type.:Complex_Variant value}
      (|> value
          (its @type.:choice)
          references)
      
      {@type.:Complex_Tuple value}
      (|> value
          (list:each references)
          list:conjoint))

    {synthesis.:Reference value}
    (when value
      {@type.:Variable_Reference _}
      (list)
      
      {@type.:Constant_Reference value}
      (list value))
    
    {synthesis.:Control value}
    (when value
      {synthesis.:When input path}
      (.all list:composite
            (references input)
            (path_references references path))
      
      {synthesis.:Loop value}
      (when value
        {synthesis.:Tail_Recursion value}
        (.all list:composite
              (|> value
                  (its synthesis.:inits)
                  (list:each references)
                  list:conjoint)
              (|> value
                  (its synthesis.:iteration)
                  references))
        
        {synthesis.:Tail_Iteration value}
        (|> value
            (list:each references)
            list:conjoint))
      
      {synthesis.:Function value}
      (when value
        {synthesis.:Abstraction value}
        (|> value
            (its synthesis.:body)
            references)
        
        {synthesis.:Reification function arguments}
        (|> (list:composite (list function) arguments)
            (list:each references)
            list:conjoint)))
    
    {synthesis.:Extension [name parameters]}
    (|> parameters
        (list:each references)
        list:conjoint)))

(the .public (dependencies archive value)
  (for_any (_ anchor expression declaration)
    (-> Archive Term
        (Operation anchor expression declaration (Set unit.ID))))
  (let [! phase.monad]
    (|> value
        ..references
        (set.of_list name.hash)
        set.as_list
        (list.each' ! (translation.remember archive))
        (by ! each (set.of_list unit.hash)))))

(the .public (path_dependencies archive value)
  (for_any (_ anchor expression declaration)
    (-> Archive (Path Term)
        (Operation anchor expression declaration (Set unit.ID))))
  (let [! phase.monad]
    (|> value
        (..path_references ..references)
        (set.of_list name.hash)
        set.as_list
        (list.each' ! (translation.remember archive))
        (by ! each (set.of_list unit.hash)))))

(the .public all
  (-> (List (Set unit.ID))
      (Set unit.ID))
  (list:mix set.union unit.none))

(the (immediate_dependencies archive)
  (-> Archive
      [(List unit.ID)
       (Dictionary unit.ID (Set unit.ID))])
  (|> archive
      archive.entries
      (list:each (function (_ [module [module_id [_module output registry]]])
                   (|> registry
                       registry.artifacts
                       sequence.as_list
                       (list:each (function (_ [artifact dependencies])
                                    [[module_id (its artifact.:id artifact)]
                                     (its artifact.:mandatory? artifact)
                                     dependencies])))))
      list:conjoint
      (list:mix (function (_ [artifact_id mandatory? dependencies]
                             [mandatory_dependencies
                              all_dependencies])
                  [(if mandatory?
                       (list:composite (list artifact_id) mandatory_dependencies)
                       mandatory_dependencies)
                   (dictionary.has artifact_id dependencies all_dependencies)])
                [(list)
                 (dictionary.empty unit.hash)])))

(the .public (necessary_dependencies archive)
  (-> Archive
      (Set unit.ID))
  (let [[mandatory immediate] (immediate_dependencies archive)]
    (list:mix (function (mix head minimum)
                (if (set.member? minimum head)
                    minimum
                    (let [minimum (set.has head minimum)]
                      (when (dictionary.value head immediate)
                        {try.:Success additional}
                        (list:mix mix minimum (set.as_list additional))

                        failure
                        minimum))))
              unit.none
              mandatory)))
