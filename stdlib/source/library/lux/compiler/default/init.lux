... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception]]
   [data
    [binary (.only Binary)]
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" hash)]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" dictionary]
     ["[0]" set]
     ["[0]" sequence (.use "[1]#[0]" functor)]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" configuration (.only Configuration)]
    ["[0]" version]
    ["[0]" code]]
   [world
    ["[0]" file]]]]
 ["[0]" //
  ["/[1]" // (.only Instancer)
   [language
    [lux
     ["[0]" phase]
     ["[1][0]" program (.only Program)]
     ["[1][0]" syntax (.only Aliases)]
     ["[1][0]" synthesis]
     ["[1][0]" declaration (.only Requirements Extender)]
     ["[1][0]" translation]
     ["[0]" analysis (.only)
      [macro (.only Expander)]
      ["[0]A" module]]
     [phase
      ["[0]P" analysis]
      ["[0]P" synthesis]
      ["[0]P" declaration]
      ["[0]" extension (.only)
       ["[0]E" analysis]
       [declaration
        ["[0]D" lux]]]]]]
   [meta
    ["[0]" archive (.only Archive)
     [key (.only Key)]
     ["[0]" unit]
     ["[0]" registry (.only Registry)]
     ["[0]M" module (.only)
      ["[0]" descriptor]
      ["[0]" document]]]]
   ["@[0]" type]]])

(the .public (state target module configuration extender expander host translate)
  (for_any (_ anchor expression declaration)
    (-> Target
        descriptor.Module
        Configuration
        extension.Extender Expander
        (///translation.Host expression declaration)
        (-> extension.Extender @type.Lux (///translation.Phase anchor expression declaration))
        (///declaration.State anchor expression declaration)))
  (let [lux (analysis.state (analysis.info version.latest target configuration))]
    [///declaration.#analysis [///declaration.#state lux
                               ///declaration.#phase (analysisP.phase extender expander)]
     ///declaration.#synthesis [///declaration.#state ///synthesis.init
                                ///declaration.#phase (synthesisP.phase extender)]
     ///declaration.#translation [///declaration.#state (///translation.state host module)
                                  ///declaration.#phase (translate extender)]]))

(every Reader
  (-> Source
      (Either [Source Text]
              [Source @type.Code])))

(the (reader current_module aliases [provenance offset source_code])
  (-> descriptor.Module Aliases Source
      (analysis.Operation Reader))
  (function (_ state)
    {try.#Success [state (///syntax.parse source_code current_module aliases)]}))

(the (read source reader)
  (-> Source Reader
      (analysis.Operation [Source @type.Code]))
  (function (_ compiler)
    (when (reader source)
      {.#Left [source' error]}
      {try.#Failure error}

      {.#Right [source' output]}
      {try.#Success [(|> compiler
                         (has @type.#source source')
                         (has @type.#provenance (code.provenance output)))
                     [source' output]]})))

(every (Payload declaration)
  [(///translation.Buffer declaration)
   Registry])

(the type_of_analysis
  (@type.Default .Analysis))

(the type_of_synthesis
  (@type.Default .Synthesis))

(the type_of_translation
  (@type.Default .Translation))

(the type_of_declaration
  (@type.Default .Declaration))

(template.with [,name ,type ,bundle]
  [(the (,name bundle)
     (for_any (_ anchor expression declaration)
       (-> ,bundle
           (///declaration.Operation anchor expression declaration Any)))
     (monad.let [! phase.monad]
       [_ (|> bundle
              dictionary.entries
              (list.each' !
                          (function (_ [name handler])
                            (///declaration.of_analysis
                             (moduleA.override_definition [.prelude name] [true {@type.#Definition [,type handler]}])))))]
       (pure [])))]

  [[with_analysis_defaults ..type_of_analysis analysis.Bundle]
   [with_synthesis_defaults ..type_of_synthesis ///synthesis.Bundle]
   [with_translation_defaults ..type_of_translation (///translation.Bundle anchor expression declaration)]
   [with_declaration_defaults ..type_of_declaration (///declaration.Bundle anchor expression declaration)]])

(every .public (Extensions anchor expression declaration)
  [analysis.Bundle
   ///synthesis.Bundle
   (///translation.Bundle anchor expression declaration)
   (///declaration.Bundle anchor expression declaration)])

(the .public (with_defaults module [analysis_bundle synthesis_bundle translation_bundle host_declaration_bundle])
  (for_any (_ anchor expression declaration)
    (-> Text (Extensions anchor expression declaration)
        (///declaration.Operation anchor expression declaration Any)))
  (when module
    .prelude
    (monad.let phase.monad
      [_ (with_analysis_defaults analysis_bundle)
       _ (with_synthesis_defaults synthesis_bundle)
       _ (with_translation_defaults translation_bundle)]
      (with_declaration_defaults (dictionary.composite host_declaration_bundle
                                                       luxD.bundle)))

    _
    (with phase.monad
      (pure []))))

(the (begin dependencies hash input all_extensions)
  (for_any (_ anchor expression declaration)
    (-> (List descriptor.Module) Natural ///.Input
        (Extensions anchor expression declaration)
        (///declaration.Operation anchor expression declaration
                                  [Source (Payload declaration)])))
  (monad.let phase.monad
    [.let [module (its ///.#module input)]
     _ (///declaration.set_current_module module)
     _ (///declaration.of_analysis
        (moduleA.create hash module))
     _ (with_defaults module all_extensions)]
    (///declaration.of_analysis
     (monad.let [! phase.monad]
       [_ (list.each' ! moduleA.import dependencies)
        .let [source (analysis.source (its ///.#module input) (its ///.#code input))]
        _ (analysis.set_source_code source)]
       (pure [source [///translation.empty_buffer
                      registry.empty]])))))

(the (end module)
  (-> descriptor.Module
      (for_any (_ anchor expression declaration)
        (///declaration.Operation anchor expression declaration [@type.Module (Payload declaration)])))
  (monad.let phase.monad
    [_ (///declaration.of_analysis
        (moduleA.set_compiled module))
     [_ analysis_module] (<| ///declaration.of_analysis
                             phase.current_module)
     final_buffer (///declaration.of_translation
                   ///translation.buffer)
     final_registry (///declaration.of_translation
                     ///translation.get_registry)]
    (pure [analysis_module
           [final_buffer
            final_registry]])))

... TODO: Inline ASAP
(the (get_current_payload _)
  (for_any (_ anchor expression declaration)
    (-> (Extender anchor expression declaration)
        (///declaration.Operation anchor expression declaration
                                  (Payload declaration))))
  (monad.let phase.monad
    [buffer (///declaration.of_translation
             ///translation.buffer)
     registry (///declaration.of_translation
               ///translation.get_registry)]
    (pure [buffer registry])))

... TODO: Inline ASAP
(the (process_declaration wrapper archive extender expander pre_payoad code)
  (for_any (_ anchor expression declaration)
    (-> phase.Wrapper Archive (Extender anchor expression declaration) Expander (Payload declaration) @type.Code
        (///declaration.Operation anchor expression declaration
                                  [Requirements (Payload declaration)])))
  (monad.let phase.monad
    [.let [[pre_buffer pre_registry] pre_payoad]
     _ (///declaration.of_translation
        (///translation.set_buffer pre_buffer))
     _ (///declaration.of_translation
        (///translation.set_registry pre_registry))
     requirements (let [execute! (declarationP.phase wrapper extender expander)]
                    (execute! archive code))
     post_payload (..get_current_payload extender)]
    (pure [requirements post_payload])))

(the (iteration' wrapper archive extender expander reader source pre_payload)
  (for_any (_ anchor expression declaration)
    (-> phase.Wrapper Archive (Extender anchor expression declaration) Expander Reader Source (Payload declaration)
        (///declaration.Operation anchor expression declaration
                                  [Source Requirements (Payload declaration)])))
  (monad.let phase.monad
    [[source code] (///declaration.of_analysis
                    (..read source reader))
     [requirements post_payload] (process_declaration wrapper archive extender expander pre_payload code)]
    (pure [source requirements post_payload])))

(the (iteration wrapper archive extender expander module source pre_payload aliases)
  (for_any (_ anchor expression declaration)
    (-> phase.Wrapper Archive (Extender anchor expression declaration) Expander descriptor.Module Source (Payload declaration) Aliases
        (///declaration.Operation anchor expression declaration
                                  (Maybe [Source Requirements (Payload declaration)]))))
  (monad.let phase.monad
    [reader (///declaration.of_analysis
             (..reader module aliases source))]
    (function (_ state)
      (when (phase.value' state (..iteration' wrapper archive extender expander reader source pre_payload))
        {try.#Success [state source&requirements&buffer]}
        {try.#Success [state {.#Some source&requirements&buffer}]}

        {try.#Failure error}
        (if (exception.is? ///syntax.end_of_file error)
            {try.#Success [state {.#None}]}
            (exception.with ///.cannot_compile module {try.#Failure error}))))))

(the (default_dependencies prelude input)
  (-> descriptor.Module ///.Input
      (List descriptor.Module))
  (if (text.= prelude (its ///.#module input))
      (list descriptor.runtime)
      (list descriptor.runtime prelude)))

(the module_aliases
  (-> @type.Module
      Aliases)
  (|>> (its @type.#module_aliases)
       (dictionary.of_list text.hash)))

(expansion.let [<parameters> (these anchor expression declaration)]
  (these (the (define_program! archive program global program_module program_definition)
           (for_any (_ <parameters>)
             (-> Archive
                 (Program expression declaration) (-> Archive Name (///translation.Operation <parameters> expression))
                 descriptor.Module Text
                 (///translation.Operation <parameters> Any)))
           (monad.let phase.monad
             [ [@program _] (///translation.definition archive [program_module program_definition])
               @self (///translation.learn [///program.name {.#None}] true (set.has @program (set.empty unit.hash)))

               |program| (global archive [program_module program_definition])
               @module (phase.of_try (archive.id program_module archive))]
             (///translation.save! @self {.#None} (program [@module @self] |program|))))

         (the .public (compiler program global wrapper extender expander prelude write_declaration program_module program_definition
                                extensions)
           (for_any (_ <parameters>)
             (-> (Program expression declaration) (-> Archive Name (///translation.Operation <parameters> expression))
                 phase.Wrapper (Extender <parameters>) Expander descriptor.Module (-> declaration Binary)
                 descriptor.Module (Maybe Text)
                 (Extensions <parameters>)
                 (Instancer (///declaration.State <parameters>) @type.Module)))
           (let [execute! (declarationP.phase wrapper extender expander)]
             (function (_ key parameters input)
               (let [dependencies (default_dependencies prelude input)]
                 [///.#dependencies dependencies
                  ///.#process (function (_ state archive)
                                 (monad.let [! try.monad]
                                   [.let [hash (text#hash (its ///.#code input))]
                                    [state [source buffer]] (<| (phase.value' state)
                                                                (..begin dependencies hash input extensions))
                                    .let [module (its ///.#module input)]]
                                   (loop (again [iteration (<| (phase.value' state)
                                                               (..iteration wrapper archive extender expander module source buffer ///syntax.no_aliases))])
                                     (monad.let !
                                       [[state ?source&requirements&temporary_payload] iteration]
                                       (when ?source&requirements&temporary_payload
                                         {.#None}
                                         (monad.let !
                                           [[state [analysis_module [final_buffer final_registry]]]
                                            (<| (phase.value' state)
                                                (monad.let [! phase.monad]
                                                  [_ (if (text.= program_module module)
                                                         (when program_definition
                                                           {.#Some program_definition}
                                                           (///declaration.of_translation
                                                            (define_program! archive program global program_module program_definition))
                                                           
                                                           {.#None}
                                                           (pure []))
                                                         (pure []))]
                                                  (..end module)))
                                            .let [descriptor [descriptor.#hash hash
                                                              descriptor.#name module
                                                              descriptor.#file (its ///.#file input)
                                                              descriptor.#references (set.of_list text.hash dependencies)
                                                              descriptor.#state {.#Compiled}]]]
                                           (pure [state
                                                  {.#Right [[moduleM.#id (try.else moduleM.runtime (archive.id module archive))
                                                             moduleM.#descriptor descriptor
                                                             moduleM.#document (document.document key analysis_module)]
                                                            (sequence#each (function (_ [artifact_id custom declaration])
                                                                             [artifact_id custom (write_declaration declaration)])
                                                                           final_buffer)
                                                            final_registry]}]))

                                         {.#Some [source requirements temporary_payload]}
                                         (let [[temporary_buffer temporary_registry] temporary_payload]
                                           (pure [state
                                                  {.#Left [///.#dependencies (|> requirements
                                                                                 (its ///declaration.#imports)
                                                                                 (list#each product.left))
                                                           ///.#process (function (_ state archive)
                                                                          (again (<| (phase.value' state)
                                                                                     (monad.let [! phase.monad]
                                                                                       [[_ analysis_module] (<| (is (for_any (_ anchor expression declaration)
                                                                                                                      (///declaration.Operation anchor expression declaration
                                                                                                                                                [module.Name @type.Module])))
                                                                                                                ///declaration.of_analysis
                                                                                                                phase.current_module)
                                                                                        _ (///declaration.of_translation
                                                                                           (///translation.set_buffer temporary_buffer))
                                                                                        _ (///declaration.of_translation
                                                                                           (///translation.set_registry temporary_registry))
                                                                                        _ (|> requirements
                                                                                              (its ///declaration.#referrals)
                                                                                              (list.each' ! (execute! archive)))
                                                                                        temporary_payload (..get_current_payload extender)]
                                                                                       (..iteration wrapper archive extender expander module source temporary_payload (..module_aliases analysis_module))))))]}]))
                                         )))))]))))
         ))
