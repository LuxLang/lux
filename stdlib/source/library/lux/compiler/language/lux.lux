... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["?" projection]]
   [data
    ["[0]" binary
     ["_" \\injection (.only Injection)]
     ["?[1]" \\projection (.only Projection)]]]
   [meta
    ["[0]" version]]
   [compiler
    ["@[0]" type]]]]
 ["[0]" /
  [analysis
   ["[0]" module]]
  [///
   [meta
    [archive
     ["[0]" signature]
     ["[0]" key (.only Key)]]]]])

... TODO: Remove #module_hash, #imports & #module_state ASAP.
... TODO: Not just from this projection, but from the lux.Module type.
(the .public as_binary
  (Injection @type.Module)
  (let [name (is (Injection @type.Name)
                 (_.and _.text _.text))
        provenance (is (Injection @type.Provenance)
                       (all _.and _.text _.natural _.natural))
        expression (let [simple (is (Injection @type.Simple)
                                    (all _.or
                                         _.any
                                         _.bit
                                         _.natural
                                         _.integer
                                         _.revolution
                                         _.decimal
                                         _.text))
                         variant (is (for_any (_ it)
                                       (-> (Injection it)
                                           (Injection (@type.Variant it))))
                                     (function (_ it)
                                       (all _.and
                                            _.natural
                                            _.bit
                                            it)))
                         complex (is (for_any (_ it)
                                       (-> (Injection it)
                                           (Injection (@type.Complex it))))
                                     (function (_ it)
                                       (all _.or
                                            (variant it)
                                            (_.list it))))
                         variable (is (Injection @type.Variable)
                                      (all _.or
                                           _.natural
                                           _.natural))
                         reference (is (Injection @type.Reference)
                                       (all _.or
                                            variable
                                            name))
                         pattern (is (Injection @type.Pattern)
                                     (function (pattern it)
                                       ((all _.or
                                             simple
                                             (complex pattern)
                                             (_.list pattern)
                                             _.natural)
                                        it)))
                         branch (is (for_any (_ it)
                                      (-> (Injection it)
                                          (Injection (@type.Branch it))))
                                    (_.and pattern))
                         match (is (for_any (_ it)
                                     (-> (Injection it)
                                         (Injection (@type.Match it))))
                                   (function (_ it)
                                     (all _.and
                                          (branch it)
                                          (_.list (branch it)))))
                         extension (is (for_any (_ it)
                                         (-> (Injection it)
                                             (Injection (@type.Extension it))))
                                       (function (_ it)
                                         (all _.and
                                              name
                                              (_.list it))))]
                     (is (Injection @type.Expression)
                         (function (expression it)
                           ((all _.or
                                 (_.and provenance simple)
                                 (_.and provenance (complex expression))
                                 (_.and provenance reference)
                                 (_.and provenance (_.and expression (match expression)))
                                 (_.and provenance (_.and (_.list expression) expression))
                                 (_.and provenance (_.and expression expression))
                                 (_.and provenance (extension expression)))
                            it))))
        definition (is (Injection @type.Definition)
                       (all _.and
                            _.type
                            (_.maybe (_.and expression (_.maybe expression)))
                            _.any))
        global (is (Injection @type.Global)
                   (all _.or
                        name
                        definition))]
    (all _.and
         ... #module_hash
         _.natural
         ... #module_aliases
         (_.list name)
         ... #definitions
         (_.list (_.and _.text (_.and _.bit global)))
         ... #imports
         (_.list _.text)
         ... #module_state
         _.any)))

(the .public of_binary
  (Projection @type.Module)
  (let [name (is (Projection @type.Name)
                 (all ?.and
                      ?binary.text
                      ?binary.text))
        provenance (is (Projection @type.Provenance)
                       (all ?.and ?binary.text ?binary.natural ?binary.natural))
        expression (let [simple (is (Projection @type.Simple)
                                    (all ?.or
                                         ?binary.any
                                         ?binary.bit
                                         ?binary.natural
                                         ?binary.integer
                                         ?binary.revolution
                                         ?binary.decimal
                                         ?binary.text))
                         variant (is (for_any (_ it)
                                       (-> (Projection it)
                                           (Projection (@type.Variant it))))
                                     (function (_ it)
                                       (all ?.and
                                            ?binary.natural
                                            ?binary.bit
                                            it)))
                         complex (is (for_any (_ it)
                                       (-> (Projection it)
                                           (Projection (@type.Complex it))))
                                     (function (_ it)
                                       (all ?.or
                                            (variant it)
                                            (?binary.list it))))
                         variable (is (Projection @type.Variable)
                                      (all ?.or
                                           ?binary.natural
                                           ?binary.natural))
                         reference (is (Projection @type.Reference)
                                       (all ?.or
                                            variable
                                            name))
                         pattern (is (Projection @type.Pattern)
                                     (function (pattern it)
                                       ((all ?.or
                                             simple
                                             (complex pattern)
                                             (?binary.list pattern)
                                             ?binary.natural)
                                        it)))
                         branch (is (for_any (_ it)
                                      (-> (Projection it)
                                          (Projection (@type.Branch it))))
                                    (?.and pattern))
                         match (is (for_any (_ it)
                                     (-> (Projection it)
                                         (Projection (@type.Match it))))
                                   (function (_ it)
                                     (all ?.and
                                          (branch it)
                                          (?binary.list (branch it)))))
                         extension (is (for_any (_ it)
                                         (-> (Projection it)
                                             (Projection (@type.Extension it))))
                                       (function (_ it)
                                         (all ?.and
                                              name
                                              (?binary.list it))))]
                     (is (Projection @type.Expression)
                         (function (expression it)
                           ((all ?.or
                                 (?.and provenance simple)
                                 (?.and provenance (complex expression))
                                 (?.and provenance reference)
                                 (?.and provenance (?.and expression (match expression)))
                                 (?.and provenance (?.and (?binary.list expression) expression))
                                 (?.and provenance (?.and expression expression))
                                 (?.and provenance (extension expression)))
                            it))))
        definition (is (Projection @type.Definition)
                       (all ?.and
                            ?binary.type
                            (?binary.maybe (?.and expression (?binary.maybe expression)))
                            ?binary.any))
        global (is (Projection @type.Global)
                   (all ?binary.or
                        name
                        definition))]
    (all ?.and
         ... #module_hash
         ?binary.natural
         ... #module_aliases
         (?binary.list name)
         ... #definitions
         (?binary.list (?.and ?binary.text (?.and ?binary.bit global)))
         ... #imports
         (?binary.list ?binary.text)
         ... #module_state
         (by ?.monad pure {.#Cached}))))

(the .public key
  (Key @type.Module)
  (key.key [signature.#name (name ..compiler)
            signature.#version version.latest]
           (module.empty 0)))
