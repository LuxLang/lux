... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]]
   [data
    ["[0]" binary
     ["_" \\injection (.only Injection)]
     ["<[1]>" \\projection (.only Projection)]]]
   [meta
    ["[0]" version]]
   [compiler
    ["@[0]" type]]]]
 ["[0]" /
  [analysis
   ["[0]" module]]
  [///
   [meta
    [archive
     ["[0]" signature]
     ["[0]" key (.only Key)]]]]])

... TODO: Remove #module_hash, #imports & #module_state ASAP.
... TODO: Not just from this projection, but from the lux.Module type.
(the .public as_binary
  (Injection @type.Module)
  (let [definition (is (Injection @type.Definition)
                       (all _.and
                            _.type
                            _.any))
        alias (is (Injection @type.Alias)
                  (_.and _.text _.text))
        global (is (Injection @type.Global)
                   (all _.or
                        alias
                        definition))]
    (all _.and
         ... #module_hash
         _.natural
         ... #module_aliases
         (_.list alias)
         ... #definitions
         (_.list (_.and _.text (_.and _.bit global)))
         ... #imports
         (_.list _.text)
         ... #module_state
         _.any)))

(the .public of_binary
  (Projection @type.Module)
  (let [definition (is (Projection @type.Definition)
                       (all <>.and
                            <binary>.type
                            <binary>.any))
        alias (is (Projection @type.Alias)
                  (all <>.and
                       <binary>.text
                       <binary>.text))
        global (is (Projection @type.Global)
                   (all <binary>.or
                        alias
                        definition))]
    (all <>.and
         ... #module_hash
         <binary>.natural
         ... #module_aliases
         (<binary>.list alias)
         ... #definitions
         (<binary>.list (<>.and <binary>.text (<>.and <binary>.bit global)))
         ... #imports
         (<binary>.list <binary>.text)
         ... #module_state
         (by <>.monad pure {.#Cached}))))

(the .public key
  (Key @type.Module)
  (key.key [signature.#name (name ..compiler)
            signature.#version version.latest]
           (module.empty 0)))
