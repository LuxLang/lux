... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["?" projection]]
   [data
    ["[0]" binary
     ["![1]" \\injection (.only Injection)]
     ["?[1]" \\projection (.only Projection)]]]
   [meta
    ["[0]" version]]
   [compiler
    ["@[0]" type]]]]
 ["[0]" /
  [analysis
   ["[0]" module]]
  [///
   [meta
    [archive
     ["[0]" signature]
     ["[0]" key (.only Key)]]]]])

... TODO: Remove :module_hash, :imports & :module_state ASAP.
... TODO: Not just from this projection, but from the lux.Module type.
(the .public as_binary
  (Injection @type.Module)
  (let [name (is (Injection @type.Name)
                 (!binary.and !binary.text !binary.text))
        definition (is (Injection @type.Definition)
                       (all !binary.and
                            !binary.type
                            (!binary.maybe (!binary.and !binary.expression (!binary.maybe !binary.expression)))
                            !binary.any))
        global (is (Injection @type.Global)
                   (all !binary.or
                        name
                        definition))]
    (all !binary.and
         ... :module_hash
         !binary.natural
         ... :module_aliases
         (!binary.list name)
         ... :definitions
         (!binary.list (!binary.and !binary.text (!binary.and !binary.bit global)))
         ... :imports
         (!binary.list !binary.text)
         ... :module_state
         !binary.any)))

(the .public of_binary
  (Projection @type.Module)
  (let [name (is (Projection @type.Name)
                 (all ?.and
                      ?binary.text
                      ?binary.text))
        definition (is (Projection @type.Definition)
                       (all ?.and
                            ?binary.type
                            (?binary.maybe (?.and ?binary.expression (?binary.maybe ?binary.expression)))
                            ?binary.any))
        global (is (Projection @type.Global)
                   (all ?binary.or
                        name
                        definition))]
    (all ?.and
         ... :module_hash
         ?binary.natural
         ... :module_aliases
         (?binary.list name)
         ... :definitions
         (?binary.list (?.and ?binary.text (?.and ?binary.bit global)))
         ... :imports
         (?binary.list ?binary.text)
         ... :module_state
         (by ?.monad pure {.:Cached}))))

(the .public key
  (Key @type.Module)
  (key.key [signature.:name (name ..compiler)
            signature.:version version.latest]
           (module.empty 0)))
