... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Pattern
                #Reification
                text natural integer revolution when local except variant tuple)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    ["[0]" monad]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   ["[0]" error (.only)
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   ["[0]" function]
   [data
    ["[0]" product]
    ["[0]" text (.only \n)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix monoid)
      ["?[1]" \\projection]
      ["[0]" property (.use "[1]#[0]" functor)]]]]
   [math
    [number
     [/64
      ["n" natural]
      ["i" integer]
      ["r" revolution]]]]
   ["[0]" type]
   [macro
    ["[0]" syntax]
    ["[0]" expansion]
    ["[0]" template]]
   [meta
    ["[0]" static]
    ["[0]" provenance]
    ["[0]" configuration (.only Configuration)]
    ["[0]" name]
    ["[0]" module]
    ["[0]" code
     ["<[1]>" \\projection]]]]]
 ["[0]" /
  ["[1][0]" simple]
  ["[1][0]" complex]
  ["[1][0]" pattern (.only Pattern)]
  [//
   ["[0]" phase (.only)
    ["[0]" extension (.only Extension)]]
   [///
    [arity (.only Arity)]
    ["[0]" version (.only Version)]
    ["[0]" reference (.only Reference)
     ["[0]" variable (.only Variable)]]
    [meta
     [archive (.only Archive)]]
    ["@[0]" type]]]])

(every .public (Branch' e)
  (Record
   [#when Pattern
    #then e]))

(every .public (Match' e)
  [(Branch' e) (List (Branch' e))])

(every .public (Environment a)
  (List a))

(template.the (Term' ,it)
  [(And ..Provenance ,it)])

(every .public (Term _)
  (Variant
   {#Simple (Term' @type.Simple)}
   {#Structure (Term' (@type.Complex (Term _)))}
   {#Reference (Term' Reference)}
   {#When (Term' [(Term _) (Match' (Term _))])}
   {#Abstraction (Term' [(Environment (Term _)) (Term _)])}
   {#Reification (Term' [(Term _) (Term _)])}
   {#Extension (Term' (Extension (Term _)))}))

(every .public Branch
  (Branch' Term))

(every .public Match
  (Match' Term))

(the (branch_equivalence equivalence)
  (-> (Equivalence Term)
      (Equivalence Branch))
  (implementation
   (the (= [expected_pattern expected_body] [actual_pattern actual_body])
     (and (by /pattern.equivalence = expected_pattern actual_pattern)
          (by equivalence = expected_body actual_body)))))

(the .public equivalence
  (Equivalence Term)
  (implementation
   (the (= expected actual)
     (.when [expected actual]
       [{#Simple _ expected}
        {#Simple _ actual}]
       (by /simple.equivalence = expected actual)

       [{#Structure _ expected}
        {#Structure _ actual}]
       (by (/complex.equivalence =) = expected actual)

       [{#Reference _ expected}
        {#Reference _ actual}]
       (by reference.equivalence = expected actual)

       [{#When _ [expected_analysis [expected_head expected_tail]]}
        {#When _ [actual_analysis [actual_head actual_tail]]}]
       (and (= expected_analysis actual_analysis)
            (by (branch_equivalence =) = expected_head actual_head)
            (by (list.equivalence (branch_equivalence =)) = expected_tail actual_tail))

       [{#Abstraction _ [expected_environment expected_analysis]}
        {#Abstraction _ [actual_environment actual_analysis]}]
       (and (= expected_analysis actual_analysis)
            (by (list.equivalence =) = expected_environment actual_environment))

       [{#Reification _ [expected_input expected_abstraction]}
        {#Reification _ [actual_input actual_abstraction]}]
       (and (= expected_input actual_input)
            (= expected_abstraction actual_abstraction))

       [{#Extension _ expected}
        {#Extension _ actual}]
       (by (extension.equivalence =) = expected actual)

       _
       false))))

(alias [=]
       ..equivalence)

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (<name> provenance content)
       [{<tag> provenance content}]))]

  [[when ..#When]])

(the .public unit
  (template.macro (unit provenance)
    [{..#Simple provenance {@type.#Simple_Unit}}]))

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (<name> provenance value)
       [{..#Simple provenance {<tag> value}}]))]

  [[bit @type.#Simple_Bit]
   [natural @type.#Simple_Natural]
   [integer @type.#Simple_Integer]
   [revolution @type.#Simple_Revolution]
   [decimal @type.#Simple_Decimal]
   [text @type.#Simple_Text]])

(every .public (Abstraction c)
  [(Environment c) Arity c])

(every .public (Reification c)
  [c (List c)])

(the .public coercion
  (template.macro (_ @ value)
    [(|> 1
         {variable.#Local}
         {reference.#Variable}
         {..#Reference @}
         {..#Abstraction @ (list)}
         {..#Reification @ value})]))

(the .public (reified [abstraction inputs])
  (-> (Reification Term)
      Term)
  (list#mix (function (_ input abstraction')
              {#Reification provenance.dummy input abstraction'})
            abstraction
            inputs))

(the .public (reification analysis)
  (-> Term
      (Reification Term))
  (loop (again [abstraction analysis
                inputs (is (List Term)
                           (list))])
    (.when abstraction
      {#Reification @ input next}
      (again next (list#composite (list input) inputs))

      _
      [abstraction inputs])))

(template.with [<name> <tag>]
  [(the .public <name>
     (syntax.macro (_ [provenance ?list.any
                       content ?list.any])
       (pure (list (` (.<| {..#Reference (, provenance)}
                           <tag>
                           (, content)))))))]

  [[variable {reference.#Variable}]
   [constant {reference.#Constant}]

   [local    reference.local]
   [foreign  reference.foreign]])

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (<name> provenance content)
       [(.<| {..#Structure provenance}
             {<tag>}
             content)]))]

  [[variant @type.#Complex_Variant]
   [tuple   @type.#Complex_Tuple]])

(the .public (as_text analysis)
  (text.Injection Term)
  (.when analysis
    {#Simple @ it}
    (/simple.as_text it)
    
    {#Structure @ it}
    (/complex.as_text as_text it)
    
    {#Reference @ it}
    (reference.as_text it)
    
    {#When @ analysis [head tail]}
    (let [branch (is (-> Branch Text)
                     (function (_ [when then])
                       (.text (/pattern.as_text when) " " (as_text then))))]
      (.text "({"
             (branch head)
             " "
             (|> tail
                 (list#each branch)
                 (text.interposed " "))
             "} "
             (as_text analysis)
             ")"))
    
    {#Abstraction @ environment body}
    (|> (as_text body)
        (.text (|> environment
                   (list#each as_text)
                   (text.interposed " ")
                   (text.enclosed ["[" "]"]))
               " ")
        (text.enclosed ["(" ")"]))
    
    {#Reification @ _}
    (let [[abstraction parameters] (..reification analysis)]
      (|> (.text (as_text abstraction)
                 " "
                 (|> parameters
                     (list#each as_text)
                     (text.interposed " ")))
          (text.enclosed ["(" ")"])))
    
    {#Extension @ name parameters}
    (|> parameters
        (list#each as_text)
        (text.interposed " ")
        (.text (name.as_text name) " ")
        (text.enclosed ["(" ")"]))))

(every .public State
  @type.Lux)

(every .public Operation
  (phase.Operation State))

(every .public Phase
  (phase.Phase State @type.Code Term))

(template.with [<special> <general>]
  [(every .public <special>
     (<general> State @type.Code Term))]

  [[Handler  extension.Handler]
   [Bundle   extension.Bundle]
   [Extender extension.Extender]])

(the .public (with_source_code source action)
  (for_any (_ it)
    (-> Source
        (Change (Operation it))))
  (function (_ state)
    (let [old_source (its @type.#source state)]
      (.when (action (has @type.#source source state))
        {try.#Success [state' output]}
        {try.#Success [(has @type.#source old_source state')
                       output]}

        failure
        failure))))

(the .public (with_current_module name)
  (for_any (_ it)
    (-> Text
        (Change (Operation it))))
  (phase.localized (is (-> ..State (Maybe Text))
                       (its @type.#current_module))
                   (is (-> (Maybe Text) (Change ..State))
                       (has @type.#current_module))
                   (function.constant {.#Some name})))

(the .public (with_provenance provenance action)
  (for_any (_ it)
    (-> Provenance
        (Change (Operation it))))
  (if (text.= "" (product.left provenance))
      action
      (function (_ state)
        (let [old_provenance (its @type.#provenance state)]
          (.when (action (has @type.#provenance provenance state))
            {try.#Success [state' output]}
            {try.#Success [(has @type.#provenance old_provenance state')
                           output]}

            failure
            failure)))))

(the .public provenance
  (Operation Provenance)
  (function (_ lux)
    {try.#Success [lux
                   (its @type.#provenance lux)]}))

(the .public expected_type
  (Operation @type.Type)
  (function (_ lux)
    (.when (its @type.#expected lux)
      {.#Some it}
      {try.#Success [lux it]}

      else
      {try.#Failure error.not_available})))

(the .public seed
  (Operation Natural)
  (function (_ lux)
    {try.#Success [lux (its @type.#seed lux)]}))

(the (located provenance)
  (-> Provenance
      (Change Text))
  (|>> (.text (provenance.as_text provenance) \n)))

(the .public (failure error)
  (-> Text
      Operation)
  (function (_ state)
    {try.#Failure (located (its @type.#provenance state) error)}))

(the .public (of_try it)
  (for_any (_ it)
    (-> (Try it)
        (Operation it)))
  (function (_ state)
    (.when it
      {try.#Failure error}
      {try.#Failure (located (its @type.#provenance state) error)}

      {try.#Success it}
      {try.#Success [state it]})))

(the .public (except exception parameters)
  (for_any (_ ex)
    (-> (Exception ex) ex
        Operation))
  (..failure (exception.error exception parameters)))

(the .public (assertion exception parameters condition)
  (for_any (_ ex)
    (-> (Exception ex) ex Bit
        (Operation Any)))
  (if condition
      (by phase.monad pure [])
      (..except exception parameters)))

(the .public (with_exception exception message action)
  (for_any (_ ex it)
    (-> (Exception ex) ex
        (Change (Operation it))))
  (function (_ state)
    (.when (exception.with exception message
             (action state))
      {try.#Failure error}
      {try.#Failure (located (its @type.#provenance state) error)}

      success
      success)))

(the .public (set_state state)
  (-> ..State
      (Operation Any))
  (function (_ _)
    {try.#Success [state []]}))

(template.with [<name> <type> <field> <value>]
  [(the .public (<name> value)
     (-> <type>
         (Operation Any))
     (phase.update (is (Change ..State)
                       (has <field> <value>))))]

  [[set_source_code    Source     @type.#source         value]
   [set_current_module Text       @type.#current_module {.#Some value}]
   [set_provenance     Provenance @type.#provenance     value]])

(the .public (source file code)
  (-> Text Text
      Source)
  [[file 1 0] 0 code])

(the dummy_source
  Source
  [provenance.dummy 0 ""])

(the type_context
  @type.Type_Context
  [@type.#for_all (list)
   @type.#there_exists 0])

(the .public (info version host configuration)
  (-> Version Text Configuration
      @type.Info)
  [@type.#target host
   @type.#version (version.as_text version)
   @type.#mode {.#Build}
   @type.#configuration configuration])

(the .public (state info)
  (-> @type.Info
      ..State)
  [@type.#info info
   @type.#source ..dummy_source
   @type.#provenance provenance.dummy
   @type.#current_module {.#None}
   @type.#modules (list)
   @type.#scopes (stack)
   @type.#type_context ..type_context
   @type.#expected {.#None}
   @type.#seed 0
   @type.#eval (as_expected [])])

(the .public (delegated extender analysis archive extension parameters)
  (-> Extender Phase Archive Name (List @type.Code)
      (Operation Term))
  (monad.let phase.monad
    [lux phase.state]
    (extension.reification extender
                           lux analysis archive
                           .Analysis extension parameters
                           (|>>)
                           (function (_ _) {.#None}))))
