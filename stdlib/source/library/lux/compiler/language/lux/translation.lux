... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except #module #counter
                name)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   ["[0]" function]
   [data
    [binary (.only Binary)]
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" sequence (.only Sequence) (.use "[1]:[0]" functor)]
     ["[0]" list (.use "[1]:[0]" functor mix)]
     ["[0]" set (.only Set)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [meta
    ["[0]" name]]]]
 [//
  ["[0]" synthesis]
  ["[0]" phase (.only)
   ["[0]" extension]]
  [///
   [meta
    ["[0]" archive (.only Archive)
     ["[0]" registry (.only Registry)]
     ["[0]" unit]
     ["[0]" artifact (.only)
      ["[0]" category]
      ["[0]" definition]]
     ["[0]" module (.only)
      ["[0]" descriptor]]]]]])

(every .public (Buffer declaration)
  (Sequence [artifact.ID (Maybe Text) declaration]))

(exception.the .public (cannot_interpret error)
  (Exception Text)
  (exception.report
   (list ["Error" error])))

(template.with [<name>]
  [(exception.the .public (<name> it)
     (Exception artifact.ID)
     (exception.report
      (list ["Artifact ID" (%.natural it)])))]

  [[cannot_overwrite_output]
   [no_buffer_for_saving_code]]
  )

(every .public (Host expression declaration)
  (Interface
   (is (-> [(Maybe unit.ID) expression]
           (Try Any))
       evaluate)
   (is (-> declaration
           (Try Any))
       execute)
   (is (-> unit.ID (Maybe Text) [(Maybe unit.ID) expression]
           (Try [Text Any declaration]))
       define)

   (is (-> unit.ID Binary
           declaration)
       ingest)
   (is (-> unit.ID (Maybe Text) declaration
           (Try Any))
       re_learn)
   (is (-> unit.ID (Maybe Text) declaration
           (Try Any))
       re_load)))

(every .public (State anchor expression declaration)
  (Record
   [#module descriptor.Module
    #anchor (Maybe anchor)
    #host (Host expression declaration)
    #buffer (Maybe (Buffer declaration))
    #registry Registry
    #registry_shift Natural
    #counter Natural
    #context (Maybe artifact.ID)
    #interim_artifacts (Sequence artifact.ID)]))

(every .public (Operation anchor expression declaration)
  (phase.Operation (State anchor expression declaration)))

(every .public (Phase anchor expression declaration)
  (phase.Phase (State anchor expression declaration) synthesis.Term expression))

(template.with [<special> <general>]
  [(every .public (<special> anchor expression declaration)
     (<general> (State anchor expression declaration) synthesis.Term expression))]

  [[Handler  extension.Handler]
   [Bundle   extension.Bundle]
   [Extender extension.Extender]]
  )

(the .public (state host module)
  (for_any (_ anchor expression declaration)
    (-> (Host expression declaration) descriptor.Module
        (..State anchor expression declaration)))
  [#module module
   #anchor {.#None}
   #host host
   #buffer {.#None}
   #registry registry.empty
   #registry_shift 0
   #counter 0
   #context {.#None}
   #interim_artifacts sequence.empty])

(the .public empty_buffer
  Buffer
  sequence.empty)

(template.with [<tag>
                <with_declaration> <with_type> <with_value>
                <set> <get> <get_type> <exception>]
  [(exception.the .public <exception>)

   (the .public <with_declaration>
     (for_any (_ anchor expression declaration output)
       <with_type>)
     (function (_ body)
       (function (_ state)
         (when (body (has <tag> {.#Some <with_value>} state))
           {try.#Success [state' output]}
           {try.#Success [(has <tag> (its <tag> state) state')
                          output]}

           {try.#Failure error}
           {try.#Failure error}))))

   (the .public <get>
     (for_any (_ anchor expression declaration)
       (Operation anchor expression declaration <get_type>))
     (function (_ state)
       (when (its <tag> state)
         {.#Some output}
         {try.#Success [state output]}

         {.#None}
         (exception.except <exception> []))))

   (the .public (<set> value)
     (for_any (_ anchor expression declaration)
       (-> <get_type>
           (Operation anchor expression declaration Any)))
     (function (_ state)
       {try.#Success [(has <tag> {.#Some value} state)
                      []]}))]

  [[#anchor
    (with_anchor anchor)
    (-> anchor (Operation anchor expression declaration output)
        (Operation anchor expression declaration output))
    anchor
    set_anchor anchor anchor no_anchor]

   [#buffer
    with_buffer
    (-> (Operation anchor expression declaration output)
        (Operation anchor expression declaration output))
    ..empty_buffer
    set_buffer buffer (Buffer declaration) no_active_buffer]]
  )

(the .public get_registry
  (for_any (_ anchor expression declaration)
    (Operation anchor expression declaration Registry))
  (function (_ state)
    {try.#Success [state (its #registry state)]}))

(the .public (set_registry value)
  (for_any (_ anchor expression declaration)
    (-> Registry
        (Operation anchor expression declaration Any)))
  (function (_ state)
    {try.#Success [(has #registry value state)
                   []]}))

(the .public next
  (for_any (_ anchor expression declaration)
    (Operation anchor expression declaration Natural))
  (monad.let phase.monad
    [count (phase.read (its #counter))
     _ (phase.update (revised #counter ++))]
    (pure count)))

(the .public (name prefix)
  (for_any (_ anchor expression declaration)
    (-> Text
        (Operation anchor expression declaration Text)))
  (by phase.monad each (|>> %.natural (text prefix)) ..next))

(the .public (enter_module module)
  (for_any (_ anchor expression declaration)
    (-> descriptor.Module
        (Operation anchor expression declaration Any)))
  (phase.update (has #module module)))

(the .public module
  (for_any (_ anchor expression declaration)
    (Operation anchor expression declaration descriptor.Module))
  (phase.read (its #module)))

(the .public (evaluate! code)
  (for_any (_ anchor expression declaration)
    (-> [(Maybe unit.ID) expression]
        (Operation anchor expression declaration Any)))
  (function (_ state)
    (when (by (its #host state) evaluate code)
      {try.#Success output}
      {try.#Success [state output]}

      {try.#Failure error}
      (exception.except ..cannot_interpret [error]))))

(the .public (execute! code)
  (for_any (_ anchor expression declaration)
    (-> declaration
        (Operation anchor expression declaration Any)))
  (function (_ state)
    (when (by (its #host state) execute code)
      {try.#Success output}
      {try.#Success [state output]}

      {try.#Failure error}
      (exception.except ..cannot_interpret error))))

(the .public (define! context custom code)
  (for_any (_ anchor expression declaration)
    (-> unit.ID (Maybe Text) [(Maybe unit.ID) expression]
        (Operation anchor expression declaration [Text Any declaration])))
  (function (_ state)
    (when (by (its #host state) define context custom code)
      {try.#Success output}
      {try.#Success [state output]}

      {try.#Failure error}
      (exception.except ..cannot_interpret error))))

(the .public (save! artifact_id custom code)
  (for_any (_ anchor expression declaration)
    (-> artifact.ID (Maybe Text) declaration
        (Operation anchor expression declaration Any)))
  (monad.let [! phase.monad]
    [?buffer (phase.read (its #buffer))]
    (when ?buffer
      {.#Some buffer}
      ... TODO: Optimize by no longer checking for overwrites...
      ... TODO: Optimize by using a dictionary instead of a sequence for the buffer.
      (if (sequence.any? (|>> product.left (n.= artifact_id)) buffer)
          (phase.except ..cannot_overwrite_output [artifact_id])
          (phase.update (has #buffer {.#Some (sequence.suffix [artifact_id custom code] buffer)})))
      
      {.#None}
      (phase.except ..no_buffer_for_saving_code [artifact_id]))))

(template.with [<type> <mandatory?> <inputs> <input_types> <name> <artifact>]
  [(`` (the .public (<name> it (,, (template.spliced <inputs>)) dependencies)
         (for_any (_ anchor expression declaration)
           (-> <type> (,, (template.spliced <input_types>)) (Set unit.ID)
               (Operation anchor expression declaration artifact.ID)))
         (function (_ state)
           (let [[id registry'] (<artifact> it <mandatory?> dependencies (its #registry state))]
             {try.#Success [(has #registry registry' state)
                            id]}))))]

  [[definition.Definition mandatory? [mandatory?] [Bit] learn registry.definition]
   [Text 1b [] [] learn_custom registry.custom]]
  )

(exception.the .public (unknown_definition [name known_definitions])
  (Exception [Name (List definition.Definition)])
  (exception.report
   (list ["Definition" (name.proper name)]
         ["Module" (name.module name)]
         ["Known Definitions" (exception.listing product.left known_definitions)])))

(the .public (remember archive name)
  (for_any (_ anchor expression declaration)
    (-> Archive Name
        (Operation anchor expression declaration unit.ID)))
  (function (_ state)
    (let [[_module _name] name]
      (monad.let try.monad
        [@module (archive.id _module archive)
         registry (if (text.= (its #module state) _module)
                      {try.#Success (its #registry state)}
                      (monad.let try.monad
                        [[_module output registry] (archive.find _module archive)]
                        {try.#Success registry}))]
        (when (registry.id _name registry)
          {.#None}
          (exception.except ..unknown_definition [name (registry.definitions registry)])
          
          {.#Some id}
          {try.#Success [state [@module id]]})))))

(the .public (definition archive name)
  (for_any (_ anchor expression declaration)
    (-> Archive Name
        (Operation anchor expression declaration [unit.ID (Maybe definition.Definition)])))
  (function (_ state)
    (let [[_module _name] name]
      (monad.let try.monad
        [@module (archive.id _module archive)
         registry (if (text.= (its #module state) _module)
                      {try.#Success (its #registry state)}
                      (monad.let try.monad
                        [[_module output registry] (archive.find _module archive)]
                        {try.#Success registry}))]
        (when (registry.find_definition _name registry)
          {.#None}
          (exception.except ..unknown_definition [name (registry.definitions registry)])
          
          {.#Some [@artifact def]}
          {try.#Success [state [[@module @artifact] def]]})))))

(exception.the .public no_context)

(the .public (module_id module archive)
  (for_any (_ anchor expression declaration)
    (-> descriptor.Module Archive
        (Operation anchor expression declaration module.ID)))
  (function (_ state)
    (monad.let try.monad
      [@module (archive.id module archive)]
      (pure [state @module]))))

(the .public (context archive)
  (for_any (_ anchor expression declaration)
    (-> Archive
        (Operation anchor expression declaration unit.ID)))
  (function (_ state)
    (when (its #context state)
      {.#None}
      (exception.except ..no_context [])
      
      {.#Some id}
      (monad.let try.monad
        [@module (archive.id (its #module state) archive)]
        (pure [state [@module id]])))))

(the .public (with_context @artifact body)
  (for_any (_ anchor expression declaration it)
    (-> artifact.ID (Operation anchor expression declaration it)
        (Operation anchor expression declaration it)))
  (function (_ state)
    (monad.let try.monad
      [[state' output] (body (has #context {.#Some @artifact} state))]
      (pure [(has #context (its #context state) state')
             output]))))

(the .public (with_registry_shift shift body)
  (for_any (_ anchor expression declaration it)
    (-> Natural (Operation anchor expression declaration it)
        (Operation anchor expression declaration it)))
  (function (_ state)
    (monad.let try.monad
      [[state' output] (body (has #registry_shift shift state))]
      (pure [(has #registry_shift (its #registry_shift state) state')
             output]))))

(the .public (with_new_context archive dependencies body)
  (for_any (_ anchor expression declaration it)
    (-> Archive (Set unit.ID) (Operation anchor expression declaration it)
        (Operation anchor expression declaration [unit.ID it])))
  (function (_ state)
    (let [[@artifact registry'] (registry.resource false dependencies (its #registry state))
          @artifact (n.+ @artifact (its #registry_shift state))]
      (monad.let try.monad
        [[state' output] (body (|> state
                                   (has #registry registry')
                                   (has #context {.#Some @artifact})
                                   (revised #interim_artifacts (sequence.suffix @artifact))))
         @module (archive.id (its #module state) archive)]
        (pure [(has #context (its #context state) state')
               [[@module @artifact]
                output]])))))

(the .public (with_interim_artifacts archive body)
  (for_any (_ anchor expression declaration it)
    (-> Archive (Operation anchor expression declaration it)
        (Operation anchor expression declaration [(Sequence unit.ID) it])))
  (monad.let phase.monad
    [module (phase.read (its #module))]
    (function (_ state)
      (monad.let try.monad
        [@module (archive.id module archive)
         [state' output] (body state)]
        (pure [(has #interim_artifacts sequence.empty state')
               [(sequence:each (|>> [@module]) (its #interim_artifacts state'))
                output]])))))
