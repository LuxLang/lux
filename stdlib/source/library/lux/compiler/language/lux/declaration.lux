... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Module
                #module #imports)
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monoid)]]]
   [macro
    ["[0]" template]]]]
 [//
  ["[0]" analysis]
  ["[0]" synthesis]
  ["[0]" translation]
  ["[0]" phase (.only)
   ["[0]" extension]]
  [///
   [meta
    [archive
     [module
      [descriptor (.only Module)]]]]
   ["@[0]" type]]])

(every .public (Component state phase)
  (Record
   [#state state
    #phase phase]))

(every .public (State anchor expression declaration)
  (Record
   [#analysis (Component analysis.State
                         analysis.Phase)
    #synthesis (Component synthesis.State
                          (-> @type.Lux synthesis.Phase))
    #translation (Component (translation.State anchor expression declaration)
                            (-> @type.Lux (translation.Phase anchor expression declaration)))]))

(every .public Import
  (Record
   [#module Module
    #alias Text]))

(every .public Requirements
  (Record
   [#imports (List Import)
    #referrals (List @type.Code)]))

(the .public no_requirements
  Requirements
  [#imports (list)
   #referrals (list)])

(the .public (merge_requirements left right)
  (-> Requirements Requirements
      Requirements)
  [#imports (list#composite (its #imports left) (its #imports right))
   #referrals (list#composite (its #referrals left) (its #referrals right))])

(every .public (Operation anchor expression declaration)
  (phase.Operation (State anchor expression declaration)))

(every .public (Phase anchor expression declaration)
  (phase.Phase (State anchor expression declaration) @type.Code Requirements))

(template.with [<special> <general>]
  [(every .public (<special> anchor expression declaration)
     (<general> (..State anchor expression declaration) @type.Code Requirements))]

  [Handler  extension.Handler]
  [Bundle   extension.Bundle]
  [Extender extension.Extender]
  )

(template.with [<name> <component> <phase>]
  [(the .public <name>
     (for_any (_ anchor expression declaration)
       (Operation anchor expression declaration <phase>))
     (function (_ state)
       {try.#Success [state (its [<component> ..#phase] state)]}))]

  [analysis   ..#analysis   analysis.Phase]
  [synthesis  ..#synthesis  (-> @type.Lux synthesis.Phase)]
  [translation ..#translation (-> @type.Lux (translation.Phase anchor expression declaration))]
  )

(template.with [<name> <component> <operation>]
  [(the .public <name>
     (for_any (_ anchor expression declaration output)
       (-> (<operation> output)
           (Operation anchor expression declaration output)))
     (phase.sub [(its [<component> ..#state])
                 (has [<component> ..#state])]))]

  [of_analysis   ..#analysis   analysis.Operation]
  [of_synthesis  ..#synthesis  synthesis.Operation]
  [of_translation ..#translation (translation.Operation anchor expression declaration)]
  )

(the .public (set_current_module module)
  (for_any (_ anchor expression declaration)
    (-> Module
        (Operation anchor expression declaration Any)))
  (do phase.monad
    [_ (..of_analysis (analysis.set_current_module module))]
    (..of_translation (translation.enter_module module))))
