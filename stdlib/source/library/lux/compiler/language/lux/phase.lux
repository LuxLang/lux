... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except except with try or macro)
   [abstract
    [functor (.only Functor)]
    ["[0]" monad (.only Monad)]]
   [control
    ["[0]" state]
    ["[0]" io]
    ["[0]" maybe]]
   [error
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only \n)]
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)
      ["[0]" property]]
     ["[0]" stack (.use "[1]#[0]" functor)]]]
   [macro
    ["[0]" template]
    ["[0]" expansion]]
   [meta
    ["[0]" name (.use "[1]#[0]" absolute)]
    ["[0]" module]
    ["[0]" label]
    ["[0]" binding]]
   ["[0]" type]]]
 [////
  [meta
   [archive (.only Archive)]]
  ["@[0]" type]])

(every .public (Operation state it)
  (state.With state Try it))

(the .public functor
  (for_any (_ state)
    (Functor (Operation state)))
  (implementation
   (the (each f it)
     (function (_ state)
       (when (it state)
         {try.#Success [state' output]}
         {try.#Success [state' (f output)]}
         
         {try.#Failure error}
         {try.#Failure error})))))

(the .public monad
  (for_any (_ state)
    (Monad (Operation state)))
  (implementation
   (the functor ..functor)
   
   (the (pure it)
     (function (_ state)
       {try.#Success [state it]}))

   (the (conjoint it)
     (function (_ state)
       (when (it state)
         {try.#Success [state' it']}
         (it' state')
         
         {try.#Failure error}
         {try.#Failure error})))))

(every .public (Phase state input output)
  (-> Archive input
      (Operation state output)))

(every .public Wrapper
  (for_any (_ state input output)
    (-> (Phase state input output)
        Any)))

(the .public (value' state operation)
  (for_any (_ state it)
    (-> state (Operation state it)
        (Try [state it])))
  (operation state))

(the .public (value state operation)
  (for_any (_ state it)
    (-> state (Operation state it)
        (Try it)))
  (|> state
      operation
      (by try.monad each product.right)))

(the .public state
  (for_any (_ state)
    (Operation state state))
  (function (_ state)
    {try.#Success [state state]}))

(the .public (with state)
  (for_any (_ state)
    (-> state
        (Operation state Any)))
  (function (_ _)
    {try.#Success [state []]}))

(the .public (sub [get set] operation)
  (for_any (_ state state' it)
    (-> [(-> state state') (-> state' state state)]
        (Operation state' it)
        (Operation state it)))
  (function (_ state)
    (monad.let try.monad
      [[state' output] (operation (get state))]
      (pure [(set state' state) output]))))

(the .public failure
  (-> Text
      Operation)
  (|>> {try.#Failure} (state.lifted try.monad)))

(the .public (except exception parameters)
  (for_any (_ it)
    (-> (Exception it) it
        Operation))
  (..failure (exception.error exception parameters)))

(the .public (of_try error)
  (for_any (_ state it)
    (-> (Try it)
        (Operation state it)))
  (function (_ state)
    (try#each (|>> [state]) error)))

(the .public assertion
  (template.macro (_ exception message test)
    [(if test
         (by ..monad pure [])
         (..except exception message))]))

(the .public (try it)
  (for_any (_ state value)
    (-> (Operation state value)
        (Operation state (Try value))))
  (function (_ state)
    (when (it state)
      {try.#Success [state' it']}
      {try.#Success [state' {try.#Success it'}]}
      
      {try.#Failure error}
      {try.#Success [state {try.#Failure error}]})))

(the .public identity
  (for_any (_ state it)
    (Phase state it it))
  (function (_ archive input state)
    {try.#Success [state input]}))

(the .public (composite pre post)
  (for_any (_ state/0 state/1 input middle output)
    (-> (Phase state/0 input middle)
        (Phase state/1 middle output)
        (Phase [state/0 state/1] input output)))
  (function (_ archive input [pre/state post/state])
    (monad.let try.monad
      [[pre/state' temp] (pre archive input pre/state)
       [post/state' output] (post archive temp post/state)]
      (pure [[pre/state' post/state'] output]))))

(the .public (read get)
  (for_any (_ state it)
    (-> (-> state it)
        (Operation state it)))
  (function (_ state)
    {try.#Success [state (get state)]}))

(the .public (update transform)
  (for_any (_ state)
    (-> (Change state)
        (Operation state Any)))
  (function (_ state)
    {try.#Success [(transform state) []]}))

(the .public (localized get set transform)
  (for_any (_ state state' it)
    (-> (-> state state') (-> state' (Change state)) (Change state')
        (Change (Operation state it))))
  (function (_ operation)
    (function (_ state)
      (let [old (get state)]
        (when (operation (set (transform old) state))
          {try.#Success [state' output]}
          {try.#Success [(set old state') output]}

          failure
          failure)))))

(the .public (temporary transform)
  (for_any (_ state it)
    (-> (Change state)
        (Change (Operation state it))))
  (function (_ operation)
    (function (_ state)
      (when (operation (transform state))
        {try.#Success [state' output]}
        {try.#Success [state output]}

        failure
        failure))))

(the .public (or left right)
  (for_any (_ state left right)
    (-> (Operation state left) (Operation state right)
        (Operation state (Or left right))))
  (monad.let [! ..monad]
    [left (..try left)]
    (when left
      {try.#Success left}
      (pure {0b left})

      {try.#Failure error}
      (monad.let !
        [right right]
        (pure {1b right})))))

(the .public (either left right)
  (for_any (_ state it)
    (-> (Operation state it) (Operation state it)
        (Operation state it)))
  (monad.let [! ..monad]
    [left (..try left)]
    (when left
      {try.#Success left}
      (pure left)

      {try.#Failure error}
      right)))

(these (the .public name_of_current_module
         (Operation @type.Lux @type.Name_Of_Module)
         (function (_ lux)
           (.when (its @type.#current_module lux)
             {.#Some current_module}
             {try.#Success [lux current_module]}

             else
             {try.#Failure module.not_available})))

       (the .public (normal name)
         (-> Name
             (Operation @type.Lux Name))
         (when name
           ["" name]
           (by ..functor each
               (function (_ module)
                 [module name])
               ..name_of_current_module)

           _
           (by ..monad pure name)))

       (the .public (by_name name)
         (-> module.Name
             (Operation @type.Lux @type.Module))
         (function (_ lux)
           (when (property.value name (its @type.#modules lux))
             {try.#Success module}
             {try.#Success [lux module]}

             else
             {try.#Failure module.not_known})))

       (the .public current_module
         (Operation @type.Lux [module.Name @type.Module])
         (monad.let ..monad
           [name ..name_of_current_module
            module (..by_name name)]
           (pure [name module])))

       (the (visible? exported? referenced_module this_module)
         (-> Bit module.Name module.Name
             Bit)
         (.or exported?
              (text.= referenced_module this_module)))

       (template.with [,singular ,type]
         [(expansion.let [,unknown (template.name [label._] ["unknown_" ,singular])
                          ,cannot_access (template.name [label._] ["cannot_access_" ,singular])
                          ,not_a (template.name [label._] ["not_a_" ,singular])]
            (the .public (,singular it)
              (-> Name
                  (Operation @type.Lux @type.Label))
              (monad.let ..monad
                [it (..normal it)
                 module (..by_name (name.module it))
                 this_module_name ..name_of_current_module]
                (when (property.value (name.proper it) (its @type.#definitions module))
                  {try.#Success [exported? {@type.#Definition [def_type expression_of_definition def_value]}]}
                  (if (visible? exported? (name.module it) this_module_name)
                      (if (type.= ,type (@type.old def_type))
                          (pure (as (-> Any @type.Label) def_value))
                          (..of_try (exception.except ,not_a [it])))
                      (..of_try (exception.except ,cannot_access [it this_module_name])))

                  failure
                  (..of_try (exception.except ,unknown [it]))))))]

         [[tag @type.Tag]
          [slot @type.Slot]])

       (the without_lux_runtime
         (Change (List module.Name))
         ... The Lux runtime shows up as ""
         ... so I'm excluding it.
         (list.only (|>> (text.= module.runtime)
                         not)))

       ... https://en.wikipedia.org/wiki/Delimiter
       (the listing_delimiter
         Text
         (text \n "                    "))

       (the module_listing
         (-> (List module.Name)
             Text)
         (|>> ..without_lux_runtime
              (list.sorted text.<)
              (text.interposed ..listing_delimiter)))

       (the (not_known lux name)
         (-> @type.Lux Name
             Error)
         (let [name_of_current (|> lux
                                   (its @type.#current_module)
                                   (maybe.else "???"))
               every_known (|> lux
                               (its @type.#modules)
                               (list#each product.left)
                               ..module_listing)
               this_module (|> lux
                               (its @type.#modules)
                               (property.value name_of_current)
                               try.trusted)
               candidates (|> lux
                              (its @type.#modules)
                              (list#each (function (_ [module_name module])
                                           (|> module
                                               (its @type.#definitions)
                                               (list.all (function (_ [def_name [exported? global]])
                                                           (if (.and exported?
                                                                     (text.= (name.proper name) def_name))
                                                               {.#Some (name#as [module_name def_name])}
                                                               {.#None}))))))
                              list#conjoint
                              (list.sorted text.<)
                              (text.interposed ..listing_delimiter))
               imports (|> this_module
                           (its @type.#imports)
                           ..module_listing)
               aliases (|> this_module
                           (its @type.#module_aliases)
                           (list#each (function (_ [alias real]) (text alias " => " real)))
                           (list.sorted text.<)
                           (text.interposed ..listing_delimiter))]
           (text "" " All known modules: " every_known
                 \n "           Aliases: " aliases
                 \n "           Imports: " imports
                 \n "        Candidates: " candidates
                 \n "    Current module: " name_of_current
                 \n "Unknown definition: " (name#as name))))

       (the .public (definition name)
         (-> Name
             (Operation @type.Lux [Bit @type.Global]))
         (monad.let ..monad
           [name (..normal name)
            .let [[normal_module normal_proper] name]]
           (function (_ lux)
             (when (is (Maybe [Bit @type.Global])
                       (monad.let maybe.monad
                         [it (|> lux
                                 (its @type.#modules)
                                 (property.value normal_module))]
                         (|> it
                             (its @type.#definitions)
                             (property.value normal_proper))))
               {.#Some exported?,definition}
               {try.#Success [lux exported?,definition]}

               _
               {try.#Failure (..not_known lux name)}))))

       (the .public (macro full_name)
         (-> Name
             (Operation @type.Lux @type.Macro))
         (monad.let ..monad
           [full_name (..normal full_name)
            this_module ..name_of_current_module]
           (is (Operation @type.Lux @type.Macro)
               (function (_ lux)
                 (let [modules (its @type.#modules lux)]
                   (loop (macro [[module name] full_name])
                     (monad.let try.monad
                       [$module (property.value module modules)
                        [exported? definition] (|> $module
                                                   (is @type.Module)
                                                   (its @type.#definitions)
                                                   (property.value name))]
                       (when definition
                         {@type.#Alias de_aliased}
                         (macro de_aliased)
                         
                         {@type.#Definition [def_type expression_of_definition def_value]}
                         (if (type.= @type.Macro (@type.old def_type))
                             {try.#Success [lux (as (-> Any @type.Macro) def_value)]}
                             {try.#Failure binding.not_a_macro})))))))))

       (the .public (export name)
         (-> Name
             (Operation @type.Lux @type.Definition))
         (monad.let [! ..monad]
           [name (..normal name)
            .let [[expected _] name]
            [exported? definition] (..definition name)
            actual ..name_of_current_module]
           (if (.or exported?
                    (text.= expected actual))
               (when definition
                 {@type.#Alias it}
                 (export it)

                 {@type.#Definition it}
                 (pure it))
               (..failure (text "Global is not an export: " (name#as name))))))

       (the .public every_module
         (Operation @type.Lux (property.List @type.Module))
         (function (_ lux)
           (|> lux
               (its @type.#modules)
               [lux]
               {try.#Success})))

       (the .public every_local
         (Operation @type.Lux (Stack (property.List @type.Type)))
         (function (_ lux)
           {try.#Success [lux
                          (|> lux
                              (its @type.#scopes)
                              (stack#each (|>> (its [@type.#locals @type.#mappings])
                                               (list#each (function (_ [name [type _]])
                                                            [name type])))))]}))

       (the .public (imported_by? import module)
         (-> module.Name module.Name
             (Operation @type.Lux Bit))
         (by ..monad each
             (|>> (its @type.#imports)
                  (list.any? (text.= import)))
             (..by_name module)))
       )
