... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["<>" projection]]
   ["[0]" function]
   [data
    [collection
     ["[0]" dictionary]
     ["[0]" list (.only)
      ["?[1]" \\projection]]]]
   [macro
    ["[0]" template]]
   [target
    ["_" js (.only Var Expression)]]]]
 [//
  [common (.only custom)]
  [////
   ["[0]" extension]
   [translation
    [extension (.only Nullary Unary Binary Trinary
                      nullary unary binary trinary)]
    [js
     ["[0]" runtime (.only Operation Phase Handler Bundle
                           with_vars)]]]
   [//
    ["[0]" phase]
    ["[0]" translation]
    ["[0]" synthesis
     ["?[1]" \\projection]]]]])

(the object::new
  (custom
   [(all <>.and ?list.any (<>.some ?list.any))
    (function (_ phase archive [constructorS inputsS])
      (do [! phase.monad]
        [constructorG (phase archive constructorS)
         inputsG (list.each' ! (phase archive) inputsS)]
        (in (_.new constructorG inputsG))))]))

(the object::get
  Handler
  (custom
   [(all <>.and ?synthesis.text ?list.any)
    (function (_ phase archive [fieldS objectS])
      (do phase.monad
        [objectG (phase archive objectS)]
        (in (_.its fieldS objectG))))]))

(the object::do
  Handler
  (custom
   [(all <>.and ?synthesis.text ?list.any (<>.some ?list.any))
    (function (_ phase archive [methodS objectS inputsS])
      (do [! phase.monad]
        [objectG (phase archive objectS)
         inputsG (list.each' ! (phase archive) inputsS)]
        (in (_.do methodS inputsG objectG))))]))

(template.with [<!> <?> <unit>]
  [(the <!> (Nullary Expression) (function.constant <unit>))
   (the <?> (Unary Expression) (_.= <unit>))]

  [object::null object::null? _.null]
  [object::undefined object::undefined? _.undefined]
  )

(the with_object
  (-> Bundle Bundle)
  (|>> (dictionary.has "js_object_new#|translation" object::new)
       (dictionary.has "js_object_get#|translation" object::get)
       (dictionary.has "js_object_do#|translation" object::do)

       (dictionary.has "js_object_null#|translation" (nullary object::null))
       (dictionary.has "js_object_null?#|translation" (unary object::null?))

       (dictionary.has "js_object_undefined#|translation" (nullary object::undefined))
       (dictionary.has "js_object_undefined?#|translation" (unary object::undefined?))
       ))

(the js::constant
  (custom
   [?synthesis.text
    (function (_ phase archive name)
      (by phase.monad in (_.var name)))]))

(the js::on
  (custom
   [(all <>.and ?list.any (<>.some ?list.any))
    (function (_ phase archive [abstractionS inputsS])
      (do [! phase.monad]
        [abstractionG (phase archive abstractionS)
         inputsG (list.each' ! (phase archive) inputsS)]
        (in (_.on inputsG abstractionG))))]))

(the js::function
  (custom
   [(all <>.and ?synthesis.i64 ?list.any)
    (function (_ phase archive [arity abstractionS])
      (do [! phase.monad]
        [abstractionG (phase archive abstractionS)
         .let [variable (is (-> Text (Operation Var))
                            (|>> translation.name
                                 (by ! each _.var)))]
         'inputs (list.each' ! (function (_ _) (variable "input"))
                             (list.repeated (.natural arity) []))
         'abstraction (variable "abstraction")]
        (in (_.closure 'inputs
                       (all _.then
                            (_.define 'abstraction abstractionG)
                            (_.return (when (.natural arity)
                                        0 (_.on (list runtime.unit) 'abstraction)
                                        1 (_.on 'inputs 'abstraction)
                                        _ (_.on (list (_.array 'inputs)) 'abstraction))))))))]))

(the .public bundle
  Bundle
  (|> extension.empty
      with_object

      (dictionary.has "js_constant#|translation" js::constant)
      (dictionary.has "js_apply#|translation" js::on)
      (dictionary.has "js_type_of#|translation" (unary _.type_of))
      (dictionary.has "js_function#|translation" js::function)
      ))
