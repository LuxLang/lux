... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except i64 text)
   ["[0]" ffi (.only import)]
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" try]]
   [math
    [number
     [/64
      ["i" integer]]]]
   [macro
    ["[0]" template]]
   [target
    [jvm
     ["_" bytecode (.only Bytecode)]
     ["[0]" type]
     [encoding
      ["[0]" signed]]]]]])

(the $Boolean (type.class (list) "java.lang.Boolean"))
(the $Long (type.class (list) "java.lang.Long"))
(the $Double (type.class (list) "java.lang.Double"))

(the .public (bit value)
  (-> Bit
      (Bytecode Any))
  (_.getstatic $Boolean (if value "TRUE" "FALSE") $Boolean))

(the wrap_i64
  (_.invokestatic $Long "valueOf" (type.method [(list) (list type.long) $Long (list)])))

(the .public (i64' value)
  (-> (I64 Any)
      (Bytecode Any))
  (`` (when (.integer value)
        (,, (template.with [<integer> <instruction>]
              [<integer>
               <instruction>]

              [[+0 _.lconst_0]
               [+1 _.lconst_1]]
              ))

        (,, (template.with [<integer> <instruction>]
              [<integer>
               (do _.monad
                 [_ <instruction>]
                 _.i2l)]

              [[-1 _.iconst_m1]
               ... [+0 _.iconst_0]
               ... [+1 _.iconst_1]
               [+2 _.iconst_2]
               [+3 _.iconst_3]
               [+4 _.iconst_4]
               [+5 _.iconst_5]]
              ))

        value
        (when (signed.s1 value)
          {try.#Success value}
          (do _.monad
            [_ (_.bipush value)]
            _.i2l)

          {try.#Failure _}
          (when (signed.s2 value)
            {try.#Success value}
            (do _.monad
              [_ (_.sipush value)]
              _.i2l)

            {try.#Failure _}
            (_.long value))))))

(the .public (i64 value)
  (-> (I64 Any)
      (Bytecode Any))
  (do _.monad
    [_ (..i64' value)]
    ..wrap_i64))

(the wrap_f64
  (_.invokestatic $Double "valueOf" (type.method [(list) (list type.double) $Double (list)])))

(import java/lang/Double
        "[1]::[0]"
        ("static" doubleToRawLongBits [double] long))

(the double_bits
  (-> Decimal
      Integer)
  (|>> [] java/lang/Double::doubleToRawLongBits
       ffi.of_long))

(the d0_bits
  Integer
  (double_bits +0.0))

(the .public (f64' value)
  (-> Decimal
      (Bytecode Any))
  (`` (when value
        (,, (template.with [<integer> <instruction>]
              [<integer>
               <instruction>]

              [[+1.0 _.dconst_1]]
              ))

        (,, (template.with [<integer> <instruction>]
              [<integer>
               (do _.monad
                 [_ <instruction>]
                 _.f2d)]

              [[+2.0 _.fconst_2]]
              ))

        (,, (template.with [<integer> <instruction>]
              [<integer>
               (do _.monad
                 [_ <instruction>]
                 _.i2d)]

              [[-1.0 _.iconst_m1]
               ... [+0.0 _.iconst_0]
               ... [+1.0 _.iconst_1]
               ... [+2.0 _.iconst_2]
               [+3.0 _.iconst_3]
               [+4.0 _.iconst_4]
               [+5.0 _.iconst_5]]
              ))
        
        _
        (if (|> value
                ..double_bits
                (i.= ..d0_bits))
            _.dconst_0
            (_.double value)))))

(the .public (f64 value)
  (-> Decimal
      (Bytecode Any))
  (do _.monad
    [_ (..f64' value)]
    ..wrap_f64))

(the .public text
  (-> Text
      (Bytecode Any))
  _.string)
