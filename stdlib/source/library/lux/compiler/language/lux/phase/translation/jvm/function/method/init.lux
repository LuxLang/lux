... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Type type name)
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" list (.use "[1]:[0]" monoid functor)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [target
    [jvm
     ["_" bytecode (.only Bytecode)]
     ["[0]" method (.only Method)]
     [encoding
      ["[0]" signed]]
     [constant
      [pool (.only Resource)]]
     ["[0]" type (.only Type)
      ["[0]" category (.only Class Value)]]]]]]
 ["[0]" // (.only)
  ["[1][0]" implementation]
  ["/[1]" //
   ["[1][0]" abstract]
   [field
    [constant
     ["[1][0]" arity]]
    [variable
     ["[1][0]" foreign]
     ["[1][0]" partial]]]
   ["/[1]" //
    ["[1][0]" type]
    ["[1][0]" reference]
    [////
     ["[0]" synthesis]
     [///
      [type (.only Register Environment)]
      ["[0]" arity (.only Arity)]]]]]])

(the .public name "<init>")

(the (partials arity)
  (-> Arity
      (List (Type Value)))
  (list.repeated (-- arity) ////type.value))

(the .public (type environment_size arity)
  (-> Natural Arity
      (Type category.Method))
  (type.method [(list)
                (list:composite (///foreign.closure environment_size)
                                (if (arity.multiary? arity)
                                    (list:composite (list ///arity.type) (..partials arity))
                                    (list)))
                type.void
                (list)]))

(the no_partials
  (|> +0
      signed.s1
      try.trusted
      _.bipush))

(the .public (super environment_size arity)
  (-> Natural Arity
      (Bytecode Any))
  (let [arity_register (++ environment_size)]
    (all _.composite
         (if (arity.unary? arity)
             ..no_partials
             (_.iload arity_register))
         (_.invokespecial ///abstract.class ..name ///abstract.init))))

(the (store_all amount put offset)
  (-> Natural
      (-> Register (Bytecode Any) (Bytecode Any))
      (-> Register Register)
      (Bytecode Any))
  (|> (list.domain amount)
      (list:each (function (_ register)
                   (put register
                        (_.aload (offset register)))))
      (list.complete _.monad)))

(the .public (method class environment arity)
  (-> (Type Class) (Environment synthesis.Term) Arity
      (Resource Method))
  (let [environment_size (list.size environment)
        offset_foreign (is (-> Register Register)
                           (n.+ 1))
        offset_arity (is (-> Register Register)
                         (|>> offset_foreign (n.+ environment_size)))
        offset_partial (is (-> Register Register)
                           (|>> offset_arity (n.+ 1)))]
    (method.method //.modifier ..name
      false (..type environment_size arity)
      (list)
      {.:Some (all _.composite
                   ////reference.this
                   (..super environment_size arity)
                   (store_all environment_size (///foreign.put class) offset_foreign)
                   (store_all (-- arity) (///partial.put class) offset_partial)
                   _.return)})))

(the .public (instance class environment arity)
  (-> (Type Class) (List (Bytecode Any)) Arity
      (Bytecode Any))
  (all _.composite
       (_.new class)
       _.dup
       (list.complete _.monad environment)
       (///partial.new arity)
       (_.invokespecial class ..name (..type (list.size environment) arity))))
