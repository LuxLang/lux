... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Declaration
                i64 variant
                the)
   [abstract
    [monad (.only do)]
    ["<>" projection]]
   ["[0]" function]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" hash)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad mix monoid)
      ["?[1]" \\projection]]
     ["[0]" sequence]]]
   [math
    [number (.only hex)
     ["[0]" i64]
     ["[0]" integer (.use "[1]#[0]" interval)]]]
   ["[0]" macro (.only)
    ["[0]" syntax]
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [target
    ["_" ruby (.only LVar Computation Literal)]]]]
 ["[0]" ///
  ["[1][0]" reference]
  ["//[1]" ///
   ["[0]" phase]
   ["[0]" synthesis]
   ["[0]" translation (.only)
    ["[0]" script]]
   [///
    [reference
     [register (.only Register)]]
    [meta
     [archive (.only Output Archive)
      ["[0]" unit]
      ["[0]" registry (.only Registry)]]]]]])

(every .public Anchor
  Register)

(every .public Value
  _.Expression)

(every .public Declaration
  _.Statement)

(template.with [<name> <base>]
  [(every .public <name>
     (<base> Anchor Value Declaration))]

  [Operation translation.Operation]
  [Phase translation.Phase]
  [Handler translation.Handler]
  [Bundle translation.Bundle]
  )

(every .public (Expression it)
  (-> Phase Archive it
      (Operation _.Expression)))

(every .public Phase!
  (-> Phase Archive synthesis.Term
      (Operation _.Statement)))

(every .public (Statement it)
  (-> Phase! Phase Archive it
      (Operation _.Statement)))

(.the .public unit
  (_.string synthesis.unit))

(.the (flag value)
  (-> Bit
      Literal)
  (if value
      ..unit
      _.nil))

(.the .public with_vars
  (syntax.macro (_ [vars (<code>.tuple (<>.some <code>.local))
                    body ?list.any])
    (do [! meta.monad]
      [ids (list.complete ! (list.repeated (list.size vars) meta.seed))]
      (in (list (` (let [(,* (|> vars
                                 (list.zipped_2 ids)
                                 (list#each (function (_ [id var])
                                              (list (code.local var)
                                                    (` (_.local (, (code.text (text "v" (%.natural id)))))))))
                                 list#conjoint))]
                     (, body))))))))

(.the module_id
  0)

(.the $Numeric
  _.CVar
  (_.manual "Numeric"))

(.the mruby?
  _.Expression
  (_.and (|> $Numeric
             (_.do "method_defined?" (list (_.string "remainder")) {.#None})
             _.not)
         (|> $Numeric
             (_.do "method_defined?" (list (_.string "remainder_of_divide")) {.#None}))))

(.the normal_ruby?
  _.Expression
  (_.not ..mruby?)
  ... (|> (_.local "Object")
  ...     (_.do "const_defined?" (list (_.string "Encoding")) {.#None}))
  )

(.the the
  (syntax.macro (_ [declaration (<>.or <code>.local
                                       (<code>.form (<>.and <code>.local
                                                            (<>.some <code>.local))))
                    conditional_implementations (<>.some (<code>.tuple (<>.and ?list.any ?list.any)))
                    default_implementation ?list.any])
    (do meta.monad
      [runtime_id meta.seed]
      (macro.with_names ['_]
        (when declaration
          {.#Left name}
          (macro.with_names ['_]
            (let [runtime (code.local (///reference.artifact [..module_id runtime_id]))
                  runtime_name (` (_.constant (, (code.text (code.as_text runtime)))))
                  'name (code.local name)]
              (in (list (` (.the .public (, 'name) _.CVar (, runtime_name)))
                        (` (.the (, (code.local (text "@" name)))
                             _.Statement
                             (, (list#mix (function (_ [when then] else)
                                            (` (_.if (, when)
                                                     (_.; (_.set (list (, runtime_name)) (, then)))
                                                     (, else))))
                                          (` (_.; (_.set (list (, runtime_name)) (, default_implementation))))
                                          conditional_implementations))))))))
          
          {.#Right [name inputs]}
          (macro.with_names ['_]
            (let [runtime (code.local (///reference.artifact [..module_id runtime_id]))
                  runtime_name (` (_.local (, (code.text (code.as_text runtime)))))
                  'name (code.local name)
                  inputsC (list#each code.local inputs)
                  inputs_typesC (list#each (function.constant (` _.Expression))
                                           inputs)]
              (in (list (` (.the .public ((, 'name) (,* inputsC))
                             (-> (,* inputs_typesC)
                                 Computation)
                             (_.apply (list (,* inputsC)) {.#None}
                                      (, runtime_name))))
                        
                        (` (.the (, (code.local (text "@" name)))
                             _.Statement
                             (..with_vars [(,* inputsC)]
                               (, (list#mix (function (_ [when then] else)
                                              (` (_.if (, when)
                                                       (_.function (, runtime_name) (list (,* inputsC))
                                                         (, then))
                                                       (, else))))
                                            (` (_.function (, runtime_name) (list (,* inputsC))
                                                 (, default_implementation)))
                                            conditional_implementations))))))))))))))

(.the tuple_size
  (_.its "length"))

(.the last_index
  (|>> ..tuple_size
       (_.- (_.int +1))))

(expansion.let [<recur> (these (all _.then
                                    (_.; (_.set (list lefts) (_.- last_index_right lefts)))
                                    (_.; (_.set (list tuple) (_.item last_index_right tuple)))))]
  (these (the (tuple//left lefts tuple)
           (with_vars [last_index_right]
             (<| (_.while (_.bool true))
                 (all _.then
                      (_.; (_.set (list last_index_right) (..last_index tuple)))
                      (_.if (_.> lefts last_index_right)
                            ... No need for recursion
                            (_.return (_.item lefts tuple))
                            ... Needs recursion
                            <recur>)))))

         (the (tuple//right lefts tuple)
           (with_vars [last_index_right right_index]
             (<| (_.while (_.bool true))
                 (all _.then
                      (_.; (_.set (list last_index_right) (..last_index tuple)))
                      (_.; (_.set (list right_index) (_.+ (_.int +1) lefts)))
                      (<| (_.if (_.= last_index_right right_index)
                                (_.return (_.item right_index tuple)))
                          (_.if (_.> last_index_right right_index)
                                ... Needs recursion.
                                <recur>)
                          (_.return (_.array_range right_index (..tuple_size tuple) tuple)))
                      ))))))

(.the .public variant_tag_field script.variant_lefts)
(.the .public variant_flag_field script.variant_right?)
(.the .public variant_value_field script.variant_choice)

(the (sum//make tag last? value)
  (_.return (_.hash (list [(_.string ..variant_tag_field) tag]
                          [(_.string ..variant_flag_field) last?]
                          [(_.string ..variant_value_field) value]))))

(.the .public (variant tag last? value)
  (-> Natural Bit _.Expression
      Computation)
  (sum//make (_.int (.integer tag)) (..flag last?) value))

(.the .public left
  (-> _.Expression
      Computation)
  (..variant 0 0b))

(.the .public right
  (-> _.Expression
      Computation)
  (..variant 0 1b))

(.the .public none
  Computation
  (..left ..unit))

(.the .public some
  (-> _.Expression
      Computation)
  ..right)

(the (sum//get sum expected::right? expected::lefts)
  (let [mismatch! (_.return _.nil)
        actual::lefts (_.item (_.string ..variant_tag_field) sum)
        actual::right? (_.item (_.string ..variant_flag_field) sum)
        actual::value (_.item (_.string ..variant_value_field) sum)
        recur! (all _.then
                    (_.; (_.set (list expected::lefts) (|> expected::lefts
                                                           (_.- actual::lefts)
                                                           (_.- (_.int +1)))))
                    (_.; (_.set (list sum) actual::value)))]
    (<| (_.while (_.bool true))
        (_.if (_.= expected::lefts actual::lefts)
              (_.if (_.= expected::right? actual::right?)
                    (_.return actual::value)
                    mismatch!))
        (_.if (_.< expected::lefts actual::lefts)
              (_.if (_.= ..unit actual::right?)
                    recur!
                    mismatch!))
        (_.if (_.= ..unit expected::right?)
              (_.return (sum//make (|> actual::lefts
                                       (_.- expected::lefts)
                                       (_.- (_.int +1)))
                                   actual::right?
                                   actual::value)))
        mismatch!)))

(.the runtime//adt
  _.Statement
  (all _.then
       @tuple//left
       @tuple//right
       @sum//make
       @sum//get
       ))

(the (lux//try risky)
  (with_vars [error value]
    (_.begin (all _.then
                  (_.; (_.set (list value) (_.apply_lambda (list ..unit) risky)))
                  (_.return (..right value)))
             (list [(list) error
                    (_.return (..left (_.its "message" error)))]))))

(the (lux//program_args raw)
  (with_vars [tail head]
    (all _.then
         (_.; (_.set (list tail) ..none))
         (<| (_.for_in head raw)
             (_.; (_.set (list tail) (..some (_.array (list head tail))))))
         (_.return tail))))

(.the runtime//lux
  _.Statement
  (all _.then
       @lux//try
       @lux//program_args
       ))

(.the i64::+limit (_.manual "+0x7FFFFFFFFFFFFFFF"))
(.the i64::-limit (_.manual "-0x8000000000000000"))
(.the i64::+cap (_.manual "+0x8000000000000000"))
(.the i64::-cap (_.manual "-0x8000000000000001"))

(the i64::+iteration
  (_.manual "(+1<<64)"))

(the i64::-iteration
  (_.manual "(-1<<64)"))

(the (i64::i64 input)
  [..mruby? (_.return input)]
  (with_vars [temp]
    (`` (<| (,, (template.with [<scenario> <iteration> <cap> <entrance>]
                  [(_.if (|> input <scenario>)
                         (all _.then
                              (_.; (_.set (list temp) (_.% <iteration> input)))
                              (_.return (_.? (|> temp <scenario>)
                                             (|> temp (_.- <cap>) (_.+ <entrance>))
                                             temp))))]

                  [(_.> ..i64::+limit) ..i64::+iteration ..i64::+cap ..i64::-limit]
                  [(_.< ..i64::-limit) ..i64::-iteration ..i64::-cap ..i64::+limit]
                  ))
            (_.return input)))))

(.the i32::low
  (|>> (_.bit_and (_.manual "+0xFFFFFFFF"))))

(.the i32::high
  (|>> (_.bit_shr (_.int +32))
       ..i32::low))

(.the i32::positive?
  (|>> (_.bit_and (_.manual "+0x80000000"))
       (_.= (_.int +0))))

(.the i32::up
  (_.bit_shl (_.int +32)))

(.the i64
  (template.macro (_ @high @low)
    [(|> (_.? (i32::positive? @high)
              @high
              (|> (_.manual "+0xFFFFFFFF")
                  (_.- @high)
                  _.bit_not))
         i32::up
         (_.bit_or @low))]))

(.the as_natural
  (_.% ..i64::+iteration))

(template.with [<runtime> <host>]
  [(the (<runtime> left right)
     [..normal_ruby? (_.return (..i64::i64 (<host> (..as_natural left) (..as_natural right))))]
     (with_vars [high low]
       (all _.then
            (_.; (_.set (list high) (<host> (i32::high left) (..i32::high right))))
            (_.; (_.set (list low) (<host> (i32::low left) (..i32::low right))))
            (_.return (..i64 high low)))))]

  [i64::and _.bit_and]
  [i64::or _.bit_or]
  [i64::xor _.bit_xor]
  )

(.the (cap_shift! shift)
  (-> LVar
      _.Statement)
  (_.; (_.set (list shift) (|> shift (_.bit_and (_.int +63))))))

(.the (handle_no_shift! shift input)
  (-> LVar LVar
      (-> _.Statement
          _.Statement))
  (_.if (|> shift (_.= (_.int +0)))
        (_.return input)))

(.the small_shift?
  (-> LVar
      _.Expression)
  (|>> (_.< (_.int +32))))

(the (i64::left_shifted shift input)
  [..normal_ruby? (_.return (|> input
                                (_.bit_shl (_.% (_.int +64) shift))
                                ..i64::i64))]
  (with_vars [high low]
    (all _.then
         (..cap_shift! shift)
         (<| (..handle_no_shift! shift input)
             (_.if (..small_shift? shift)
                   (all _.then
                        (_.; (_.set (list high) (_.bit_or (|> input i32::high (_.bit_shl shift))
                                                          (|> input i32::low (_.bit_shr (_.- shift (_.int +32)))))))
                        (_.; (_.set (list low) (|> input i32::low (_.bit_shl shift))))
                        (_.return (..i64 (i32::low high)
                                         (i32::low low)))))
             (all _.then
                  (_.; (_.set (list high) (|> input i32::low (_.bit_shl (_.- (_.int +32) shift)))))
                  (_.return (..i64 (i32::low high)
                                   (_.int +0)))))
         )))

(the (i64::right_shifted shift input)
  [..normal_ruby? (all _.then
                       (_.; (_.set (list shift) (_.% (_.int +64) shift)))
                       (_.return (_.? (_.= (_.int +0) shift)
                                      input
                                      (|> input
                                          ..as_natural
                                          (_.bit_shr shift)))))]
  (with_vars [high low]
    (all _.then
         (..cap_shift! shift)
         (<| (..handle_no_shift! shift input)
             (_.if (..small_shift? shift)
                   (all _.then
                        (_.; (_.set (list high) (|> input i32::high (_.bit_shr shift))))
                        (_.; (_.set (list low) (|> input i32::low (_.bit_shr shift)
                                                   (_.bit_or (|> input i32::high (_.bit_shl (_.- shift (_.int +32))))))))
                        (_.return (..i64 high low))))
             (_.return (_.? (|> shift (_.= (_.int +32)))
                            (i32::high input)
                            (|> input i32::high (_.bit_shr (_.- (_.int +32) shift)))))))))

(the (i64::/ parameter subject)
  (_.return (_.? (_.and (_.= (_.int -1) parameter)
                        (_.= (_.int integer#minimum) subject))
                 subject
                 (let [extra (_.do "remainder" (list parameter) {.#None} subject)]
                   (|> subject
                       (_.- extra)
                       (_./ parameter))))))

(the (i64::+ parameter subject)
  [..normal_ruby? (_.return (i64::i64 (_.+ parameter subject)))]
  (with_vars [high low]
    (all _.then
         (_.; (_.set (list low) (_.+ (i32::low subject)
                                     (i32::low parameter))))
         (_.; (_.set (list high) (|> (i32::high low)
                                     (_.+ (i32::high subject))
                                     (_.+ (i32::high parameter))
                                     i32::low)))

         (_.return (..i64 high (i32::low low)))
         )))

(.the i64::minimum
  (_.manual "-0x8000000000000000"))

(.the (i64::opposite value)
  (_.? (_.= i64::minimum value)
       i64::minimum
       (i64::+ (_.int +1) (_.bit_not value))))

(the (i64::- parameter subject)
  [..normal_ruby? (_.return (i64::i64 (_.- parameter subject)))]
  (_.return (i64::+ (i64::opposite parameter) subject)))

(.the i16::high
  (_.bit_shr (_.int +16)))

(.the i16::low
  (_.bit_and (_.manual "+0xFFFF")))

(.the i16::up
  (_.bit_shl (_.int +16)))

(the (i64::* parameter subject)
  [..normal_ruby? (_.return (i64::i64 (_.* parameter subject)))]
  (let [hh (|>> i32::high i16::high)
        hl (|>> i32::high i16::low)
        lh (|>> i32::low i16::high)
        ll (|>> i32::low i16::low)]
    (with_vars [l48 l32 l16 l00
                r48 r32 r16 r00
                x48 x32 x16 x00
                high low]
      (all _.then
           (_.; (_.set (list l48) (hh subject)))
           (_.; (_.set (list l32) (hl subject)))
           (_.; (_.set (list l16) (lh subject)))
           (_.; (_.set (list l00) (ll subject)))

           (_.; (_.set (list r48) (hh parameter)))
           (_.; (_.set (list r32) (hl parameter)))
           (_.; (_.set (list r16) (lh parameter)))
           (_.; (_.set (list r00) (ll parameter)))

           (_.; (_.set (list x00) (_.* l00 r00)))
           (_.; (_.set (list x16) (i16::high x00)))
           (_.; (_.set (list x00) (i16::low x00)))
           
           (_.; (_.set (list x16) (|> x16 (_.+ (_.* l16 r00)))))
           (_.; (_.set (list x32) (i16::high x16))) (_.; (_.set (list x16) (i16::low x16)))
           (_.; (_.set (list x16) (|> x16 (_.+ (_.* l00 r16)))))
           (_.; (_.set (list x32) (|> x32 (_.+ (i16::high x16))))) (_.; (_.set (list x16) (i16::low x16)))

           (_.; (_.set (list x32) (|> x32 (_.+ (_.* l32 r00)))))
           (_.; (_.set (list x48) (i16::high x32))) (_.; (_.set (list x32) (i16::low x32)))
           (_.; (_.set (list x32) (|> x32 (_.+ (_.* l16 r16)))))
           (_.; (_.set (list x48) (|> x48 (_.+ (i16::high x32))))) (_.; (_.set (list x32) (i16::low x32)))
           (_.; (_.set (list x32) (|> x32 (_.+ (_.* l00 r32)))))
           (_.; (_.set (list x48) (|> x48 (_.+ (i16::high x32))))) (_.; (_.set (list x32) (i16::low x32)))
           
           (_.; (_.set (list x48) (|> x48
                                      (_.+ (_.* l48 r00))
                                      (_.+ (_.* l32 r16))
                                      (_.+ (_.* l16 r32))
                                      (_.+ (_.* l00 r48))
                                      i16::low)))

           (_.; (_.set (list high) (_.bit_or (i16::up x48) x32)))
           (_.; (_.set (list low) (_.bit_or (i16::up x16) x00)))
           (_.return (..i64 high low))
           )))
  )

(the (i64::char subject)
  [..mruby? (_.return (_.do "chr" (list) {.#None} subject))]
  (_.return (_.do "chr" (list (_.string "UTF-8")) {.#None} subject)))

(.the runtime//i64
  _.Statement
  (all _.then
       @i64::+iteration
       @i64::-iteration
       @i64::i64
       @i64::left_shifted
       @i64::right_shifted
       @i64::and
       @i64::or
       @i64::xor
       @i64::+
       @i64::-
       @i64::*
       @i64::/
       @i64::char
       ))

(the (text//index subject param start)
  (with_vars [idx]
    (all _.then
         (_.; (_.set (list idx) (|> subject (_.do "index" (list param start) {.#None}))))
         (_.if (_.= _.nil idx)
               (_.return ..none)
               (_.return (..some idx))))))

(.the (within? top value)
  (-> _.Expression _.Expression
      Computation)
  (_.and (|> value (_.>= (_.int +0)))
         (|> value (_.< top))))

(the (text//clip offset length text)
  (_.if (_.= (_.int +0) length)
        (_.return (_.string ""))
        (_.return (_.array_range offset (_.+ offset (_.- (_.int +1) length)) text))))

(the (text//char idx text)
  (_.if (|> idx (within? (_.its "length" text)))
        (_.return (|> text (_.array_range idx idx) (_.do "ord" (list) {.#None})))
        (_.; (_.raise (_.string "[Lux Error] Cannot get char from text.")))))

(.the runtime//text
  _.Statement
  (all _.then
       @text//index
       @text//clip
       @text//char
       ))

(the (array//write idx value array)
  (all _.then
       (_.; (_.set (list (_.item idx array)) value))
       (_.return array)))

(.the runtime//array
  _.Statement
  (all _.then
       @array//write
       ))

(.the full
  _.Statement
  (all _.then
       (_.when ..mruby?
         ... We're in mRuby/DragonRuby territory.
         (_.; (_.do "class_eval" (list) {.#Some [(list (_.local "_"))
                                                 (_.; (_.alias_method/2 (_.string "remainder")
                                                                        (_.string "remainder_of_divide")))]}
                $Numeric)))
       runtime//adt
       runtime//lux
       runtime//i64
       runtime//text
       runtime//array
       ))

(.the .public translate
  (Operation [Registry Output])
  (do phase.monad
    [_ (translation.execute! ..full)
     _ (translation.save! ..module_id {.#None} ..full)]
    (in [(|> registry.empty
             (registry.resource true unit.none)
             product.right)
         (sequence.sequence [..module_id
                             {.#None}
                             (|> ..full
                                 _.code
                                 (by utf8.binary as))])])))
