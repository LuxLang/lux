... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except name
                when exec let if its
                or and)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix monoid)]
     ["[0]" set]]]
   [math
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [macro
    ["[0]" template]]
   [target
    ["_" ruby (.only LVar)]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Expression Phase! Statement)]
  ["[1][0]" reference]
  ["[1][0]" primitive]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    [synthesis
     ["[0]" when]]
    ["/[1]" //
     ["[0]" phase (.use "[1]#[0]" monad)]
     ["[1][0]" translation]
     ["[0]" synthesis (.only Path)
      [access
       ["[0]" member (.only Member)]]]
     ["//[1]" ///
      [reference
       [register (.only Register)]]
      [meta
       [archive (.only Archive)]]]]]]])

(the name
  (-> Text
      (Operation LVar))
  (|>> /////translation.name
       (phase#each _.local)))

(the .public register
  (-> Register LVar)
  (|>> (///reference.local //reference.system) as_expected))

(the .public capture
  (-> Register LVar)
  (|>> (///reference.foreign //reference.system) as_expected))

(the .public (exec next archive it)
  (Expression synthesis.Exec)
  (do [! phase.monad]
    [.let [[tail after] (synthesis.flat_exec (.its synthesis.#exec_after it))]
     all_before (list.each' ! (next archive)
                            (list#composite (list (.its synthesis.#exec_before it))
                                            tail))
     after (next archive after)]
    (pure (|> (_.array (list (_.array all_before)
                             after))
              (_.item (_.int +1))))))

(the .public (exec! statement expression archive [this that])
  (Statement synthesis.Exec)
  (do phase.monad
    [this (expression archive this)
     that (statement expression archive that)]
    (pure (all _.then
               (_.; this)
               that
               ))))

... TODO: Find some way to do 'let' without paying the price of the closure.
(the .public (let next archive [head_binding head_value body])
  (Expression synthesis.Let)
  (do [! phase.monad]
    [.let [[tail body] (synthesis.flat_let body)]
     bindings (list.each' ! (function (_ [binding value])
                              (phase#each (|>> (_.set (list (..register binding)))
                                               _.;)
                                          (next archive value)))
                          (list#composite (list [head_binding head_value])
                                          tail))
     body (next archive body)]
    ... (pure (|> (_.array (list#composite bindings
    ...                                  (list body)))
    ...         (_.item (_.int (.integer (list.size bindings))))))
    (pure (<| (_.of_lambda (list))
              (_.lambda {.#None})
              [(list)
               (list#mix _.then
                         (_.return body)
                         (list.reversed bindings))]))
    ))

(the .public (let! statement expression archive [register valueS bodyS])
  (Statement synthesis.Let)
  (do phase.monad
    [valueO (expression archive valueS)
     bodyO (statement expression archive bodyS)]
    (pure (all _.then
               (_.; (_.set (list (..register register)) valueO))
               bodyO))))

(the .public (if expression archive [testS thenS elseS])
  (Expression synthesis.If)
  (do phase.monad
    [testO (expression archive testS)
     thenO (expression archive thenS)
     elseO (expression archive elseS)]
    (pure (_.? testO thenO elseO))))

(the .public (if! statement expression archive [testS thenS elseS])
  (Statement synthesis.If)
  (do phase.monad
    [test! (expression archive testS)
     then! (statement expression archive thenS)
     else! (statement expression archive elseS)]
    (pure (_.if test!
                then!
                else!))))

(the (projection it)
  (.if (.its member.#right? it)
       (//runtime.tuple//right (_.int (.integer (.its member.#lefts it))))
       (//runtime.tuple//left (_.int (.integer (.its member.#lefts it))))))

(the .public (its expression archive [pathP valueS])
  (Expression synthesis.Its)
  (do phase.monad
    [valueO (expression archive valueS)]
    (pure (list#mix (function (_ member source)
                      ((projection member) source))
                    valueO
                    pathP))))

(the @savepoint (_.local "lux_pm_savepoint"))
(the @cursor (_.local "lux_pm_cursor"))
(the @temp (_.local "lux_pm_temp"))

(the (push! value)
  (-> _.Expression _.Statement)
  (_.; (|> @cursor (_.do "push" (list value) {.#None}))))

(the peek_and_pop
  _.Expression
  (|> @cursor (_.do "pop" (list) {.#None})))

(the pop!
  _.Statement
  (_.; ..peek_and_pop))

(the peek
  _.Expression
  (_.item (_.int -1) @cursor))

(the save!
  _.Statement
  (.let [cursor (_.array_range (_.int +0) (_.int -1) @cursor)]
    (_.; (|> @savepoint (_.do "push" (list cursor) {.#None})))))

(the restore!
  _.Statement
  (_.; (_.set (list @cursor) (|> @savepoint (_.do "pop" (list) {.#None})))))

(the fail! _.break)

(the (multi_pop! pops)
  (-> Natural _.Statement)
  (_.; (_.do "slice!"
         (list (_.int (i.x -1 (.integer pops)))
               (_.int (.integer pops)))
         {.#None}
         @cursor)))

(template.with [<name> <flag>]
  [(the (<name> simple? idx)
     (-> Bit Natural _.Statement)
     (all _.then
          (_.; (_.set (list @temp) (//runtime.sum//get ..peek <flag>
                                                       (|> idx .integer _.int))))
          (.if simple?
               (_.when (_.= _.nil @temp)
                 fail!)
               (_.if (_.= _.nil @temp)
                     fail!
                     (..push! @temp)))))]

  [[left_choice  _.nil]
   [right_choice //runtime.unit]]
  )

(the (with_looping in_closure? 'once 'continue? body!)
  (-> Bit LVar LVar _.Statement _.Statement)
  (.if in_closure?
       (all _.then
            (_.while (_.bool true)
                     body!))
       (all _.then
            (_.; (_.set (list 'once) (_.bool true)))
            (_.; (_.set (list 'continue?) (_.bool false)))
            (<| (_.while (_.bool true))
                (_.if 'once
                      (all _.then
                           (_.; (_.set (list 'once) (_.bool false)))
                           body!)
                      (all _.then
                           (_.; (_.set (list 'continue?) (_.bool true)))
                           _.break)))
            (_.when 'continue?
              _.next))))

(the (alternation in_closure? 'once 'continue? pre! post!)
  (-> Bit LVar LVar _.Statement _.Statement _.Statement)
  (all _.then
       (with_looping in_closure? 'once 'continue?
         (all _.then
              ..save!
              pre!))
       ..restore!
       post!))

(the (pattern_matching' in_closure? statement expression archive)
  (-> Bit (Statement Path))
  (function (again pathP)
    (`` (.when pathP
          {synthesis.#Then bodyS}
          (statement expression archive bodyS)

          {synthesis.#Pop}
          (phase#pure ..pop!)

          {synthesis.#Bind register}
          (phase#pure (_.; (_.set (list (..register register)) ..peek)))

          {synthesis.#Bit_Fork when thenP elseP}
          (do [! phase.monad]
            [then! (again thenP)
             else! (.when elseP
                     {.#Some elseP}
                     (again elseP)

                     {.#None}
                     (pure ..fail!))]
            (pure (.if when
                       (_.if ..peek
                             then!
                             else!)
                       (_.if ..peek
                             else!
                             then!))))

          (,, (template.with [<tag> <injection>]
                [{<tag> [head tail]}
                 (do [! phase.monad]
                   [clauses (list.each' ! (function (_ [when then])
                                            (by ! each (|>> [(<injection> when)])
                                                (again then)))
                                        (list#composite (list head) tail))]
                   (pure (_.case ..peek
                                 (list.reversed clauses)
                                 ..fail!)))]

                [... [synthesis.#I64_Fork //primitive.i64]
                 [synthesis.#F64_Fork //primitive.f64]
                 [synthesis.#Text_Fork //primitive.text]]))

          {synthesis.#I64_Fork [head tail]}
          (do [! phase.monad]
            ['input (..name "input")
             clauses (list.each' ! (function (_ [when then])
                                     (by ! each (|>> [(//primitive.i64 when)])
                                         (again then)))
                                 (list#composite (list head) tail))]
            (pure (all _.then
                       (_.; (_.set (list 'input) ..peek))
                       (list#mix (function (_ [when then] else)
                                   (_.if (_.= when 'input)
                                         then
                                         else))
                                 ..fail!
                                 (list.reversed clauses)))))

          (,, (template.with [<complex> <simple> <choice>]
                [(<complex> idx)
                 (phase#pure (<choice> false idx))

                 (<simple> idx nextP)
                 (|> nextP
                     again
                     (phase#each (_.then (<choice> true idx))))]

                [[synthesis.side/left  synthesis.simple_left_side  ..left_choice]
                 [synthesis.side/right synthesis.simple_right_side ..right_choice]]
                ))

          (synthesis.member/left 0)
          (phase#pure (|> ..peek (_.item (_.int +0)) ..push!))
          
          (,, (template.with [<pm> <getter>]
                [(<pm> lefts)
                 (phase#pure (|> ..peek (<getter> (_.int (.integer lefts))) ..push!))]

                [[synthesis.member/left  //runtime.tuple//left]
                 [synthesis.member/right //runtime.tuple//right]]
                ))

          {synthesis.#List size}
          (phase#pure (_.when (_.not (_.= (_.int (.integer size))
                                          (_.its "length" ..peek)))
                        fail!))

          (synthesis.item index)
          (phase#pure (..push! (_.item (_.int (.integer index)) ..peek)))

          (synthesis.!bind_top register thenP)
          (do phase.monad
            [then! (again thenP)]
            (phase#pure (all _.then
                             (_.; (_.set (list (..register register)) ..peek_and_pop))
                             then!)))

          (synthesis.!multi_pop nextP)
          (.let [[extra_pops nextP'] (when.count_pops nextP)]
            (do phase.monad
              [next! (again nextP')]
              (phase#pure (all _.then
                               (..multi_pop! (n.+ 2 extra_pops))
                               next!))))

          (synthesis.path/seq preP postP)
          (do phase.monad
            [pre! (again preP)
             post! (again postP)]
            (pure (all _.then
                       pre!
                       post!)))

          (synthesis.path/alt preP postP)
          (do phase.monad
            [pre! (again preP)
             post! (again postP)
             'once (..name "once")
             'continue? (..name "continue")]
            (pure (..alternation in_closure? 'once 'continue? pre! post!)))))))

(the (pattern_matching in_closure? statement expression archive pathP)
  (-> Bit (Statement Path))
  (do phase.monad
    [pattern_matching! (pattern_matching' in_closure? statement expression archive pathP)
     'once (..name "once")
     'continue? (..name "continue")]
    (pure (all _.then
               (..with_looping in_closure? 'once 'continue?
                 pattern_matching!)
               (_.; (_.raise (_.string when.pattern_matching_error)))))))

(the .public (when! in_closure? statement expression archive [valueS pathP])
  (-> Bit (Statement [synthesis.Term Path]))
  (do phase.monad
    [start (expression archive valueS)
     pattern_matching! (pattern_matching in_closure? statement expression archive pathP)]
    (pure (all _.then
               (_.; (_.set (list @cursor) (_.array (list start))))
               (_.; (_.set (list @savepoint) (_.array (list))))
               pattern_matching!
               ))))

(the .public (when statement expression archive when)
  (-> Phase! (Expression [synthesis.Term Path]))
  (|> when
      (when! true statement expression archive)
      (by phase.monad each
          (|>> [(list)] (_.lambda {.#None})
               (_.of_lambda (list))))))

(the .public (multi_let! statement expression archive [input bindings body])
  (Statement synthesis.Multi_Let)
  (do phase.monad
    [input (expression archive input)
     body (statement expression archive body)
     'tuple (..name "tuple")]
    (pure (all _.then
               (list#mix (function (_ [register member] left)
                           (all _.then
                                left
                                (_.; (_.set (list (..register register)) (..projection member 'tuple)))))
                         (_.; (_.set (list 'tuple) input))
                         bindings)
               body))))

(the .public (multi_let statement expression archive)
  (-> Phase!
      (Expression synthesis.Multi_Let))
  (|>> (multi_let! statement expression archive)
       (by phase.monad each
           (|>> [(list)] (_.lambda {.#None})
                (_.of_lambda (list))))))

(template.with [,lux ,host]
  [(the .public (,lux expression archive [parameter subject])
     (Expression [synthesis.Term synthesis.Term])
     (do phase.monad
       [parameter (expression archive parameter)
        subject (expression archive subject)]
       (pure (,host parameter subject))))]

  [[or _.or]
   [and _.and]]
  )

(template.with [,expression ,statement ,type ,injection]
  [(the .public (,statement statement expression archive [input clauses else])
     (Statement [synthesis.Term (List [,type synthesis.Term]) synthesis.Term])
     (do [! phase.monad]
       [input (expression archive input)
        clauses (list.each' ! (function (_ [when then])
                                (by ! each (|>> [(,injection when)]) (statement expression archive then)))
                            clauses)
        else (statement expression archive else)]
       (pure (_.case input (list.reversed clauses) else))))

   (the .public (,expression statement expression archive)
     (-> Phase!
         (Expression [synthesis.Term (List [,type synthesis.Term]) synthesis.Term]))
     (|>> (,statement statement expression archive)
          (by phase.monad each
              (|>> [(list)] (_.lambda {.#None})
                   (_.of_lambda (list))))))]

  [... [when_i64 when_i64! I64 //primitive.i64]
   [when_f64 when_f64! F64 //primitive.f64]
   [when_text when_text! Text //primitive.text]]
  )

(the .public (when_i64! statement expression archive [input clauses else])
  (Statement [synthesis.Term (List [I64 synthesis.Term]) synthesis.Term])
  (do [! phase.monad]
    [input (expression archive input)
     'input (..name "input")
     clauses (list.each' ! (function (_ [when then])
                             (by ! each (|>> [(//primitive.i64 when)])
                                 (statement expression archive then)))
                         clauses)
     else (statement expression archive else)]
    (pure (all _.then
               (_.; (_.set (list 'input) input))
               (list#mix (function (_ [when then] else)
                           (_.if (_.= when 'input)
                                 then
                                 else))
                         else
                         (list.reversed clauses))))))

(the .public (when_i64 statement expression archive)
  (-> Phase!
      (Expression [synthesis.Term (List [I64 synthesis.Term]) synthesis.Term]))
  (|>> (when_i64! statement expression archive)
       (by phase.monad each
           (|>> [(list)] (_.lambda {.#None})
                (_.of_lambda (list))))))
