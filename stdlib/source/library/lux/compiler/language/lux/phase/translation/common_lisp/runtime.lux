... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except the)
   [abstract
    ["<>" projection]
    ["[0]" monad (.only do)]]
   ["[0]" function]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" hash)
     ["%" \\injection]
     ["[0]" encoding]]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor monoid)]
     ["[0]" sequence]]]
   [math
    [number (.only hex)
     ["[0]" i64]]]
   ["[0]" macro (.only)
    ["[0]" syntax]
    ["[0]" expansion]
    ["[0]" template]]
   [target
    ["_" common_lisp (.only Computation Literal)]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]]
 ["[0]" ///
  ["[1][0]" reference]
  ["//[1]" ///
   [analysis (.only Variant)]
   ["[1][0]" synthesis (.only Synthesis)]
   ["[1][0]" translation]
   ["//[1]" /// (.only)
    ["[1][0]" phase]
    [reference
     [variable (.only Register)]]
    [meta
     [archive (.only Output Archive)
      ["[0]" artifact (.only Registry)]]]]]])

(.the module_id
  0)

(template.with [<name> <base>]
  [(every .public <name>
     (<base> [_.Tag Register] (_.Expression Any) (_.Expression Any)))]

  [Operation /////translation.Operation]
  [Phase /////translation.Phase]
  [Handler /////translation.Handler]
  [Bundle /////translation.Bundle]
  )

(every .public (Expression i)
  (-> Phase Archive i
      (Operation (_.Expression Any))))

(.the .public unit
  (_.string /////synthesis.unit))

(.the (flag value)
  (-> Bit Literal)
  (if value
    (_.string "")
    _.nil))

(.the (variant' tag last? value)
  (-> (_.Expression Any) (_.Expression Any) (_.Expression Any) (Computation Any))
  (_.list/* (stack tag last? value)))

(.the .public (variant [lefts right? value])
  (-> (Variant (_.Expression Any)) (Computation Any))
  (variant' (_.int (.integer lefts)) (flag right?) value))

(.the .public none
  (Computation Any)
  (|> ..unit [0 #0] ..variant))

(.the .public some
  (-> (_.Expression Any) (Computation Any))
  (|>> [1 #1] ..variant))

(.the .public left
  (-> (_.Expression Any) (Computation Any))
  (|>> [0 #0] ..variant))

(.the .public right
  (-> (_.Expression Any) (Computation Any))
  (|>> [1 #1] ..variant))

(.the .public with_vars
  (syntax.macro (_ [vars (<code>.tuple (<>.some <code>.local))
                    body <code>.any])
    (do [! meta.monad]
      [ids (monad.all ! (stack.repeated (stack.size vars) meta.seed))]
      (in (stack (` (let [(,* (|> vars
                                  (stack.zipped_2 ids)
                                  (stack#each (function (_ [id var])
                                                (stack (code.local var)
                                                       (` (_.var (, (code.text (text "v" (%.natural id)))))))))
                                  stack.together))]
                      (, body))))))))

(.the the
  (syntax.macro (_ [declaration (<>.or <code>.local
                                       (<code>.form (<>.and <code>.local
                                                            (<>.some <code>.local))))
                    code <code>.any])
    (do meta.monad
      [runtime_id meta.seed]
      (macro.with_names ['_]
        (let [runtime (code.local (///reference.artifact [..module_id runtime_id]))
              runtime_name (` (_.var (, (code.text (code.as_text runtime)))))]
          (when declaration
            {.#Left name}
            (let ['name (code.local name)
                  code_nameC (code.local (text "@" name))]
              (in (stack (` (.the .public (, 'name)
                              _.Var/1
                              (, runtime_name)))
                         
                         (` (.the (, code_nameC)
                              (_.Expression Any)
                              (_.defparameter (, runtime_name) (, code)))))))
            
            {.#Right [name inputs]}
            (let ['name (code.local name)
                  code_nameC (code.local (text "@" name))
                  
                  inputsC (stack#each code.local inputs)
                  inputs_typesC (stack#each (function.constant (` (_.Expression Any)))
                                            inputs)]
              (in (stack (` (.the .public ((, 'name) (,* inputsC))
                              (-> (,* inputs_typesC) (_.Computation Any))
                              (_.call/* (, runtime_name) (stack (,* inputsC)))))
                         
                         (` (.the (, code_nameC)
                              (_.Expression Any)
                              (..with_vars [(,* inputsC)]
                                (_.defun (, runtime_name) (_.args (stack (,* inputsC)))
                                         (, code))))))))))))))

(the (lux//try op)
  (with_vars [error]
    (_.handler_case
     (stack [(_.bool true) error
             (..left (_.format/3 [_.nil (_.string "~A") error]))])
     (..right (_.funcall/+ [op (stack ..unit)])))))

... TODO: Use Common Lisp's swiss-army loop macro instead.
(the (lux//program_args inputs)
  (with_vars [loop input tail]
    (_.labels (stack [loop [(_.args (stack input tail))
                            (_.if (_.null/1 input)
                              tail
                              (_.funcall/+ [(_.function/1 loop)
                                            (stack (_.cdr/1 input)
                                                   (..some (_.vector/* (stack (_.car/1 input) tail))))]))]])
              (_.funcall/+ [(_.function/1 loop)
                            (stack (_.reverse/1 inputs)
                                   ..none)]))))

(.the runtime//lux
  (Stack (_.Expression Any))
  (stack @lux//try
         @lux//program_args))

(.the last_index
  (|>> _.length/1 [(_.int +1)] _.-/2))

(expansion.let [<recur> (these (all _.then
                                    (_.; (_.set lefts (_.-/2 [last_index_right lefts])))
                                    (_.; (_.set tuple (_.nth last_index_right tuple)))))]
  (these (.the !recur
           (template.macro (_ <side>)
             (<side> (_.-/2 [last_index_right lefts])
                     (_.elt/2 [tuple last_index_right]))))
         
         (the (tuple//left lefts tuple)
           (with_vars [last_index_right]
             (_.let (stack [last_index_right (..last_index tuple)])
               (stack (_.if (_.>/2 [lefts last_index_right])
                        ... No need for recursion
                        (_.elt/2 [tuple lefts])
                        ... Needs recursion
                        (!recur tuple//left))))))

         (the (tuple//right lefts tuple)
           (with_vars [last_index_right right_index]
             (_.let (stack [last_index_right (..last_index tuple)]
                           [right_index (_.+/2 [(_.int +1) lefts])])
               (stack (_.cond (stack [(_.=/2 [last_index_right right_index])
                                      (_.elt/2 [tuple right_index])]
                                     [(_.>/2 [last_index_right right_index])
                                      ... Needs recursion.
                                      (!recur tuple//right)])
                              (_.subseq/3 [tuple right_index (_.length/1 tuple)]))))))))

... TODO: Find a way to extract parts of the sum without "nth", which
... does a linear search, and is thus expensive.
(the (sum//get sum wantsLast wantedTag)
  (with_vars [sum_tag sum_flag]
    (let [no_match! (_.return sum)
          sum_value (_.nth/2 [(_.int +2) sum])
          test_recursion! (_.if sum_flag
                            ... Must iterate.
                            (_.progn (stack (_.setq wantedTag (_.-/2 [sum_tag wantedTag]))
                                            (_.setq sum sum_value)))
                            no_match!)]
      (_.while (_.bool true)
               (_.let (stack [sum_tag (_.nth/2 [(_.int +0) sum])]
                             [sum_flag (_.nth/2 [(_.int +1) sum])])
                 (stack (_.cond (stack [(_.=/2 [sum_tag wantedTag])
                                        (_.if (_.equal/2 [wantsLast sum_flag])
                                          (_.return sum_value)
                                          test_recursion!)]

                                       [(_.>/2 [sum_tag wantedTag])
                                        test_recursion!]

                                       [(_.and (_.</2 [sum_tag wantedTag])
                                               wantsLast)
                                        (_.return (variant' (_.-/2 [wantedTag sum_tag]) sum_flag sum_value))])

                                no_match!)))))))

(.the runtime//adt
  (Stack (_.Expression Any))
  (stack @tuple//left
         @tuple//right
         @sum//get))

(the (i64//right_shifted shift input)
  (_.if (_.=/2 [(_.int +0) shift])
    input
    (let [anti_shift (_.-/2 [shift (_.int +64)])
          mask (|> (_.int +1)
                   [anti_shift] _.ash/2
                   [(_.int +1)] _.-/2)]
      (|> input
          [(_.*/2 [(_.int -1) shift])] _.ash/2
          [mask] _.logand/2))))

(.the runtime//i64
  (Stack (_.Expression Any))
  (stack @i64//right_shifted))

(the (text//clip offset length text)
  (_.subseq/3 [text offset (_.+/2 [offset length])]))

(the (text//index offset sub text)
  (with_vars [index]
    (_.let (stack [index (_.search/3 [sub text offset])])
      (stack (_.if index
               (..some index)
               ..none)))))

(.the runtime//text
  (Stack (_.Expression Any))
  (stack @text//index
         @text//clip))

(the (io//exit code)
  (_.progn (stack (_.conditional+ (stack "sbcl")
                                  (_.call/* (_.var "sb-ext:quit") (stack code)))
                  (_.conditional+ (stack "clisp")
                                  (_.call/* (_.var "ext:exit") (stack code)))
                  (_.conditional+ (stack "ccl")
                                  (_.call/* (_.var "ccl:quit") (stack code)))
                  (_.conditional+ (stack "allegro")
                                  (_.call/* (_.var "excl:exit") (stack code)))
                  (_.call/* (_.var "cl-user::quit") (stack code)))))

(.the runtime//io
  (Stack (_.Expression Any))
  (stack @io//exit))

(.the runtime
  (_.progn (all stack#composite
                runtime//adt
                runtime//lux
                runtime//i64
                runtime//text
                runtime//io)))

(.the .public translate
  (Operation [Registry Output])
  (do ///////phase.monad
    [_ (/////translation.execute! ..runtime)
     _ (/////translation.save! (%.natural ..module_id) ..runtime)]
    (in [(|> artifact.empty
             artifact.resource
             product.right)
         (sequence.sequence [(%.natural ..module_id)
                             (|> ..runtime
                                 _.code
                                 (by encoding.utf8 as))])])))
