... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" pipe]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list]
     ["[0]" dictionary (.only Dictionary)]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" check]]
   ["[0]" meta]
   [compiler
    ["@[0]" type]]]]
 ["[0]" /
  ["[1][0]" function]
  ["[1][0]" when]
  ["[1][0]" variable]
  ["/[1]" //
   ["[0]" extension]
   ["/[1]" //
    ["[0]" phase (.use "[1]:[0]" monad)]
    ["/" synthesis (.only Operation Phase Extender Handler)
     ["[1][0]" simple]]
    ["[0]" analysis (.only)
     ["[2][0]" simple]
     ["[2][0]" complex]]
    [///
     [reference (.only)
      [variable (.only)]]
     [meta
      [archive (.only Archive)]]]]]])

(the (simple analysis)
  (-> @type.Simple
      /simple.Simple)
  (`` (when analysis
        {@type.#Simple_Unit}
        {/simple.#Text /.unit}
        
        (,, (template.with [<analysis> <synthesis>]
              [{<analysis> value}
               {<synthesis> value}]

              [[@type.#Simple_Bit /simple.#Bit]
               [@type.#Simple_Decimal /simple.#F64]
               [@type.#Simple_Text /simple.#Text]]))

        (,, (template.with [<analysis> <synthesis>]
              [{<analysis> value}
               {<synthesis> (.i64 value)}]

              [[@type.#Simple_Natural /simple.#I64]
               [@type.#Simple_Integer /simple.#I64]
               [@type.#Simple_Revolution /simple.#I64]])))))

(the (optimization extender lux)
  (-> Extender @type.Lux
      Phase)
  (function (phase archive analysis)
    (when analysis
      {@type.#Simple @ analysis'}
      (phase:pure [@ {/.#Simple (..simple analysis')}])

      {@type.#Reference @ reference}
      (phase:pure [@ {/.#Reference reference}])

      {@type.#Complex @ structure}
      (/.with_currying? false
        (when structure
          {@type.#Complex_Variant variant}
          (phase:each
           (function (_ valueS)
             (/.variant @ (has @type.#choice valueS variant)))
           (phase archive (its @type.#choice variant)))

          {@type.#Complex_Tuple tuple}
          (|> tuple
              (list.each' phase.monad (phase archive))
              (phase:each (|>> (/.tuple @))))))
      
      {@type.#When @ inputA branchesAB+}
      (/.with_currying? false
        (/when.synthesize @ phase branchesAB+ archive inputA))

      (analysis.coercion @ value)
      (phase archive value)

      {@type.#Application @ _}
      (/.with_currying? false
        (/function.reification @ phase archive analysis))

      {@type.#Abstraction @ environmentA bodyA}
      (/function.abstraction @ phase environmentA archive bodyA)

      {@type.#Extension @ name parameters}
      (extension.reification extender lux phase archive .Synthesis name parameters
                             (|>>)
                             (function (_ _)
                               {.#Some (|> parameters
                                           (list.each' phase.monad (phase archive))
                                           (phase:each (|>> [name] {/.#Extension} [@])))}))
      )))

(the .public (phase extender lux archive analysis)
  (-> Extender @type.Lux
      Phase)
  (monad.let phase.monad
    [synthesis (..optimization extender lux archive analysis)]
    (phase.of_try (/variable.optimization synthesis))))
