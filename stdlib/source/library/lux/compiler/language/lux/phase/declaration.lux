... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" mix monoid)]]]
   [macro
    ["^" pattern]
    ["[0]" expansion]]
   [type (.only sharing)
    ["[0]" check]]
   ["[0]" meta (.only)
    ["[0]" binding]
    ["[0]" code]
    ["[0]" module]]]]
 ["[0]" // (.use "[1]:[0]" monad)
  ["[0]" extension]
  ["/[1]" //
   ["/" declaration (.only Operation Phase Handler Extender)]
   ["[0]" analysis (.only)
    ["[1]/[0]" macro (.only Expander)]
    ["[1]/[0]" type]
    ["[0]" evaluation]]
   [///
    [reference (.only)
     [variable (.only)]]
    [meta
     [archive (.only Archive)]]
    ["@[0]" type]]]])

(exception.the .public (not_a_declaration [module code])
  (Exception [Text @type.Code])
  (exception.report
   (list ["Declaration" (code.relative module code)])))

(the (requiring phase archive expansion)
  (for_any (_ anchor expression declaration)
    (-> (Phase anchor expression declaration) Archive (List @type.Code)
        (Operation anchor expression declaration /.Requirements)))
  (list.mix' //.monad
             (function (_ head tail)
               (by //.monad each
                   (/.merge_requirements tail)
                   (phase archive head)))
             /.no_requirements
             expansion))

(every Outcome
  (Variant
   {:More (List @type.Code)}
   {:Done /.Requirements}))

(the (macro_or_extension analysis archive whole_term function_term)
  (for_any (_ anchor expression declaration)
    (-> analysis.Phase Archive @type.Code @type.Code
        (Operation anchor expression declaration Name)))
  (monad.let //.monad
    [here (<| /.of_analysis
              //.name_of_current_module)
     attempt (/.of_analysis
              (is (analysis.Operation (Or analysis.Term
                                          (Try analysis.Term)))
                  (all //.or
                       (<| (analysis/type.with @type.Macro)
                           (analysis archive function_term))
                       (<| //.try
                           (analysis/type.with .Declaration)
                           (analysis archive function_term)))))]
    (when attempt
      (^.or {0b analysis}
            {1b {try.:Success analysis}})
      (when analysis
        (analysis.constant @ definition)
        (pure definition)

        _
        (//.except ..not_a_declaration [here function_term]))

      {1b {try.:Failure error}}
      (if (text.contains? (its exception.:label extension.defaults_cannot_be_referenced)
                          error)
          (when function_term
            {@type.:Name _ definition}
            (pure definition)

            _
            (//.except ..not_a_declaration [here function_term]))
          (//.except ..not_a_declaration [here function_term])))))

(the (failure code)
  (-> Code
      Operation)
  (monad.let //.monad
    [here (<| /.of_analysis
              //.name_of_current_module)]
    (//.except ..not_a_declaration [here code])))

(expansion.let [<lux_def_module> (these {@type.:Form @module
                                                     (list {@type.:Name @extension [..prelude "module#"]}
                                                           {@type.:Tuple @annotations annotations})})]
  (the .public (phase wrapper extender expander)
    (for_any (_ anchor expression declaration)
      (-> //.Wrapper (Extender anchor expression declaration) Expander
          (Phase anchor expression declaration)))
    (function (again archive code)
      (monad.let [! //.monad]
        [state //.state
         .let [analysis (its [/.:analysis /.:phase] state)
               compiler_eval ((evaluation.evaluator analysis
                                                    [(its [/.:synthesis /.:state] state)
                                                     (its [/.:synthesis /.:phase] state)]
                                                    [(its [/.:translation /.:state] state)
                                                     (its [/.:translation /.:phase] state)])
                              archive)
               extension_eval (as (-> Any @type.Eval)
                                  (wrapper (as_expected compiler_eval)))]
         _ (//.with (has [/.:analysis /.:state @type.:eval] extension_eval state))]
        (when code
          {@type.:Form _ it}
          (when (list.item 0 it)
            {try.:Success term}
            (monad.let !
              [macro|extension (macro_or_extension analysis archive code term)
               expansion|requirements (let [inputs (list.after 1 it)]
                                        (extension.reification extender
                                                               (its [/.:analysis /.:state] state) again archive
                                                               .Declaration macro|extension inputs
                                                               (|>> {:Done})
                                                               (function (_ _)
                                                                 {.:Some (<| /.of_analysis
                                                                             (monad.let !
                                                                               [macro (//.macro macro|extension)
                                                                                expansion (analysis/macro.expansion expander macro|extension macro inputs)]
                                                                               (pure {:More expansion})))})))]
              (when expansion|requirements
                {:More expansion}
                (when (list.item 0 expansion)
                  {try.:Success <lux_def_module>}
                  (|> (again archive <lux_def_module>)
                      (by ! each (revised /.:referrals (list:composite (list.after 1 expansion)))))

                  _
                  (..requiring again archive expansion))

                {:Done requirements}
                (pure requirements)))

            _
            (..failure code))

          _
          (..failure code))))))
