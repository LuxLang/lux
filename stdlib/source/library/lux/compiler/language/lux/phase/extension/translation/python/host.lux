... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   ["[0]" function]
   [data
    [collection
     ["[0]" list (.only)
      ["?[1]" \\projection]]
     ["[0]" dictionary]]]
   [macro
    ["[0]" template]]
   [target
    ["_" python (.only Expression SVar)]]]]
 ["[0]" //
  [common (.only custom)]
  [////
   ["[1]" extension]
   [translation
    [extension (.only Nullary Unary Binary Trinary
                      nullary unary binary trinary)]
    ["//" python
     ["[1][0]" runtime (.only Operation Phase Handler Bundle
                              with_vars)]]]
   [//
    ["[0]" phase]
    ["[0]" translation]
    ["[0]" synthesis
     ["?[1]" \\projection]]
    [///
     ["[0]" extension (.only)
      ["[1]/[0]" python]]]]]])

(the object:get
  Handler
  (custom
   [(all <>.and ?synthesis.text ?list.any)
    (function (_ phase archive [fieldS objectS])
      (monad.let phase.monad
        [objectG (phase archive objectS)]
        (pure (_.its fieldS objectG))))]))

(the object:do
  Handler
  (custom
   [(all <>.and ?synthesis.text ?list.any (<>.some ?list.any))
    (function (_ phase archive [methodS objectS inputsS])
      (monad.let [! phase.monad]
        [objectG (phase archive objectS)
         inputsG (list.each' ! (phase archive) inputsS)]
        (pure (_.do methodS inputsG objectG))))]))

(template.with [<!> <?> <unit>]
  [(the <!> (Nullary Expression) (function.constant <unit>))
   (the <?> (Unary Expression) (_.= <unit>))]

  [[object:none object:none? _.none]]
  )

(the with_object
  (-> Bundle Bundle)
  (|>> (dictionary.has (extension.synthesis extension/python.object_get) object:get)
       (dictionary.has (extension.synthesis extension/python.object_do) object:do)
       (dictionary.has (extension.synthesis extension/python.object_none) (nullary object:none))
       (dictionary.has (extension.synthesis extension/python.object_none?) (unary object:none?))
       ))

(the python:constant
  (custom
   [?synthesis.text
    (function (_ phase archive name)
      (monad.let phase.monad
        []
        (pure (_.var name))))]))

(the python:import
  (custom
   [?synthesis.text
    (function (_ phase archive module)
      (monad.let phase.monad
        []
        (pure (_.of (list (_.string module)
                          _.none
                          _.none
                          (_.list (list (_.string ""))))
                    (_.var "__import__")))))]))

(the python:of
  (custom
   [(all <>.and ?list.any (<>.some ?list.any))
    (function (_ phase archive [abstractionS inputsS])
      (monad.let [! phase.monad]
        [abstractionG (phase archive abstractionS)
         inputsG (list.each' ! (phase archive) inputsS)]
        (pure (_.of inputsG abstractionG))))]))

(the python:function
  (custom
   [(all <>.and ?synthesis.i64 ?list.any)
    (function (_ phase archive [arity abstractionS])
      (monad.let [! phase.monad]
        [abstractionG (phase archive abstractionS)
         .let [variable (is (-> Text (Operation SVar))
                            (|>> translation.name
                                 (by ! each _.var)))]
         'inputs (list.each' ! (function (_ _) (variable "input"))
                             (list.repeated (.natural arity) []))]
        (pure (_.lambda 'inputs
                        (when (.natural arity)
                          0 (_.of (list //runtime.unit) abstractionG)
                          1 (_.of 'inputs abstractionG)
                          _ (_.of (list (_.list 'inputs)) abstractionG))))))]))

(the python:exec
  (custom
   [(all <>.and ?list.any ?list.any)
    (function (_ phase archive [codeS globalsS])
      (monad.let [! phase.monad]
        [codeG (phase archive codeS)
         globalsG (phase archive globalsS)]
        (pure (//runtime.lux:exec codeG globalsG))))]))

(the .public bundle
  Bundle
  (|> //.empty
      with_object

      (dictionary.has (extension.synthesis extension/python.constant) python:constant)
      (dictionary.has (extension.synthesis extension/python.function) python:function)
      (dictionary.has (extension.synthesis extension/python.of) python:of)
      (dictionary.has (extension.synthesis extension/python.import) python:import)
      (dictionary.has (extension.synthesis extension/python.exec) python:exec)
      ))
