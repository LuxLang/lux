... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Pattern Analysis
                when tuple list)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix monoid monad)]
     ["[0]" stack (.use "[1]#[0]" mix monoid monad)]]]
   [math
    [number
     ["n" natural]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   ["[0]" type (.only)
    ["[0]" check (.only Check)]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" binding]
    ["[0]" code]
    ["[0]" label]]]]
 ["[0]" //
  ["[1][0]" complex]
  [///
   ["[0]" phase]
   ["/" analysis (.only Operation Phase)
    ["[1][0]" simple]
    ["[1][0]" complex]
    ["[1][0]" pattern (.only Pattern)]
    ["[1][0]" type]
    ["[1][0]" scope]
    ["[1][0]" coverage (.only Coverage)]]
   [///
    ["@[0]" type]
    ["[0]" extension
     ["[1]" lux]]]]])

(exception.the .public (mismatch [module type pattern])
  (Exception [Text Type Code])
  (exception.report
   (.list ["Type" (type.as_text type)]
          ["Pattern" (code.relative module pattern)])))

(exception.the .public (sum_has_no_case [case type])
  (Exception [Natural Type])
  (exception.report
   (.list ["Case" (%.natural case)]
          ["Type" (type.as_text type)])))

(exception.the .public (invalid [module it])
  (Exception [Text @type.Code])
  (exception.report
   (.list ["Pattern" (code.relative module it)])))

(exception.the .public (non_tuple type)
  (Exception Type)
  (exception.report
   (.list ["Type" (type.as_text type)])))

(exception.the .public (not_a_list type)
  (Exception Type)
  (exception.report
   (.list ["Type" (type.as_text type)])))

(exception.the .public (non_exhaustive [module input branches coverage])
  (Exception [Text @type.Code (Stack [@type.Code @type.Code]) Coverage])
  (exception.report
   (.list ["Input" (code.relative module input)]
          ["Branches" (|> branches
                          (stack#each (function (_ [slot value])
                                        (stack slot value)))
                          stack#conjoint
                          list.of_stack
                          code.tuple
                          (code.relative module))]
          ["Coverage" (/coverage.as_text coverage)])))

(exception.the .public empty_branches)

(the (quantified envs baseT)
  (-> (Stack (Stack Type)) Type Type)
  (.when envs
    {.#Empty}
    baseT

    {.#Top head tail}
    (quantified tail {.#Universal head baseT})))

... Type-checking on the input value is done during the analysis of a
... "when" expression, to ensure that the patterns being used make
... sense for the type of the input value.
... Sometimes, that input value is complex, by depending on
... type-variables or quantifications.
... This function makes it easier for "when" analysis to properly
... type-check the input with respect to the patterns.
(the .public (tuple :it:)
  (-> Type (Check [(Stack type.Variable) Type]))
  (loop (again [envs (is (Stack (Stack Type))
                         (stack))
                :it: :it:])
    (.when :it:
      {.#Variable id}
      (do check.monad
        [?:it:' (phase.try (check.type id))]
        (.when ?:it:'
          {try.#Success :it:'}
          (again envs :it:')

          _
          (check.except ..non_tuple :it:)))

      {.#Named name unnamedT}
      (again envs unnamedT)

      {.#Universal env unquantifiedT}
      (again {.#Top env envs} unquantifiedT)

      {.#Existential _}
      (do check.monad
        [[@head :head:] check.var
         [tail :tuple:] (again envs (maybe.trusted (type.reified (.list :head:) :it:)))]
        (in [(stack.partial @head tail) :tuple:]))

      {.#Reification _}
      (do [! check.monad]
        [.let [[:abstraction: :parameters:] (type.flat_reification :it:)]
         :abstraction: (.when :abstraction:
                         {.#Variable @abstraction}
                         (do !
                           [?:abstraction: (phase.try (check.type @abstraction))]
                           (.when ?:abstraction:
                             {try.#Success :abstraction:}
                             (in :abstraction:)

                             _
                             (check.except ..non_tuple :it:)))

                         _
                         (in :abstraction:))]
        (.when (type.reified :parameters: :abstraction:)
          {.#Some :it:}
          (again envs :it:)

          {.#None}
          (check.except ..non_tuple :it:)))

      {.#Product _}
      (|> :it:
          type.flat_tuple
          (list#each (..quantified envs))
          type.tuple
          [(stack)]
          (by check.monad in))

      _
      (by check.monad in [(stack) (..quantified envs :it:)]))))

(the .public (list type)
  (-> Type
      (Check [(Stack type.Variable) Type]))
  (loop (list [envs (is (Stack (Stack Type))
                        (stack))
               type type])
    (.when type
      {.#Variable id}
      (do check.monad
        [?type (phase.try (check.type id))]
        (.when ?type
          {try.#Success type}
          (list envs type)

          _
          (check.except ..not_a_list type)))

      {.#Named name type}
      (list envs type)

      {.#Universal env type}
      (list {.#Top env envs} type)

      {.#Existential _}
      (do check.monad
        [[@head type_of_head] check.var
         [tail type] (list envs (maybe.trusted (type.reified (.list type_of_head) type)))]
        (in [(stack.partial @head tail) type]))

      {.#Reification _}
      (do [! check.monad]
        [.let [[:abstraction: :parameters:] (type.flat_reification type)]
         :abstraction: (.when :abstraction:
                         {.#Variable @abstraction}
                         (do !
                           [?:abstraction: (phase.try (check.type @abstraction))]
                           (.when ?:abstraction:
                             {try.#Success :abstraction:}
                             (in :abstraction:)

                             _
                             (check.except ..not_a_list type)))

                         _
                         (in :abstraction:))]
        (.when (type.reified :parameters: :abstraction:)
          {.#Some type}
          (list envs type)

          {.#None}
          (check.except ..not_a_list type)))

      _
      (by check.monad in [(stack) (..quantified envs type)]))))

(the (simple_pattern_analysis type :input: provenance output next)
  (for_any (_ a) (-> Type Type Provenance Pattern (Operation a) (Operation [Pattern a])))
  (/.with_provenance provenance
    (do phase.monad
      [_ (/type.check (check.check :input: type))
       outputA next]
      (in [output outputA]))))

(the (tuple_pattern_analysis pattern_analysis :input: sub_patterns next)
  (for_any (_ a)
    (-> (-> Type @type.Code (Operation a) (Operation [Pattern a]))
        Type (Stack @type.Code) (Operation a) (Operation [Pattern a])))
  (do [! phase.monad]
    [[@ex_var+ :input:'] (/type.check (..tuple :input:))]
    (.when :input:'
      {.#Product _}
      (let [matches (loop (again [types (list.as_stack (type.flat_tuple :input:'))
                                  patterns sub_patterns
                                  output (is (Stack [Type @type.Code])
                                             {.#Empty})])
                      (.when [types patterns]
                        [{.#Empty} {.#Empty}]
                        output

                        [{.#Top headT {.#Empty}} {.#Top headP {.#Empty}}]
                        {.#Top [headT headP] output}

                        [remainingT {.#Top headP {.#Empty}}]
                        {.#Top [(type.tuple (list.of_stack remainingT)) headP] output}

                        [{.#Top headT {.#Empty}} remainingP]
                        {.#Top [headT (code.tuple (list.of_stack remainingP))] output}
                        
                        [{.#Top headT tailT} {.#Top headP tailP}]
                        (again tailT tailP {.#Top [headT headP] output})

                        _
                        (undefined)))]
        (do !
          [[memberP+ thenA] (stack#mix (is (for_any (_ a)
                                             (-> [Type @type.Code] (Operation [(Stack Pattern) a])
                                                 (Operation [(Stack Pattern) a])))
                                           (function (_ [memberT memberC] then)
                                             (do !
                                               [[memberP [memberP+ thenA]] ((as (for_any (_ a) (-> Type @type.Code (Operation a) (Operation [Pattern a])))
                                                                                pattern_analysis)
                                                                            memberT memberC then)]
                                               (in [(stack.partial memberP memberP+) thenA]))))
                                       (do !
                                         [nextA next]
                                         (in [(stack) nextA]))
                                       matches)
           _ (/type.check (stack.each' check.monad check.forget! @ex_var+))]
          (in [(/pattern.tuple (list.of_stack memberP+))
               thenA])))

      _
      (do !
        [[here _] module.current]
        (/.except ..mismatch [here :input:' (code.tuple (list.of_stack sub_patterns))])))))

(the name_of_type_of_list
  (its @type.#name @type.list))

(the (analysis_of_list pattern_analysis type_of_input sub_patterns next)
  (for_any (_ it)
    (-> (-> Type @type.Code (Operation it) (Operation [Pattern it]))
        Type (Stack @type.Code) (Operation it) (Operation [Pattern it])))
  (do [! phase.monad]
    [[@ex_var+ type_of_input] (/type.check (..list type_of_input))]
    (.when type_of_input
      {.#Nominal ..name_of_type_of_list (.stack type_of_item)}
      (do !
        [[sub_patterns thenA] (stack#mix (is (for_any (_ it)
                                               (-> @type.Code (Operation [(Stack Pattern) it])
                                                   (Operation [(Stack Pattern) it])))
                                             (function (_ item then)
                                               (do !
                                                 [[head [tail thenA]] ((as (for_any (_ a) (-> Type @type.Code (Operation a) (Operation [Pattern a])))
                                                                           pattern_analysis)
                                                                       type_of_item item then)]
                                                 (in [(stack.partial head tail) thenA]))))
                                         (do !
                                           [nextA next]
                                           (in [(stack) nextA]))
                                         (stack.reversed sub_patterns))
         _ (/type.check (stack.each' check.monad check.forget! @ex_var+))]
        (in [(/pattern.list (list.of_stack sub_patterns))
             thenA]))

      _
      (do !
        [[here _] module.current]
        (/.except ..mismatch [here type_of_input (` (.list# (,* (list.of_stack sub_patterns))))])))))

(every (Analysis it)
  (-> Type @type.Code (Operation it)
      (Operation [Pattern it])))

(the (anonymous_variant pattern_analysis
                        :input: pattern next
                        provenance lefts right? values)
  (for_any (_ it)
    (-> (Analysis it)
        Type @type.Code (Operation it)
        Provenance Natural Bit (Stack @type.Code)
        (Operation [Pattern it])))
  (/.with_provenance provenance
    (do [! phase.monad]
      [[@ex_var+ :input:'] (/type.check (..tuple :input:))]
      (.when :input:'
        {.#Sum _}
        (let [flat_sum (type.flat_variant :input:')
              size_sum (list.size flat_sum)
              idx (/complex.tag right? lefts)]
          (.when (list.item idx flat_sum)
            (^.multi {try.#Success caseT}
                     (n.< size_sum idx))
            (do !
              [[testP nextA] (pattern_analysis (if (and (n.> size_sum size_sum)
                                                        (n.= (-- size_sum) idx))
                                                   (type.variant (list.after (-- size_sum) flat_sum))
                                                   caseT)
                                               (code.tuple (list.of_stack values))
                                               next)
               _ (/type.check (stack.each' check.monad check.forget! @ex_var+))]
              (in [(/pattern.variant [lefts right? testP])
                   nextA]))

            _
            (/.except ..sum_has_no_case [idx :input:])))

        {.#Universal _}
        (do !
          [[ex_id exT] (/type.check check.existential)
           it (pattern_analysis (maybe.trusted (type.reified (.list exT) :input:'))
                                pattern
                                next)
           _ (/type.check (stack.each' check.monad check.forget! @ex_var+))]
          (in it))
        
        _
        (do !
          [[here _] module.current]
          (/.except ..mismatch [here :input:' pattern]))))))

... This function handles several concerns at once, but it must be that
... way because those concerns are interleaved when doing
... pattern-matching and they cannot be separated.
... The pattern is analysed in order to get a general feel for what is
... expected of the input value. This, in turn, informs the
... type-checking of the input.
... A kind of "continuation" value is passed around which signifies
... what needs to be done _after_ analysing a pattern.
... In general, this is done to analyse the "body" expression
... associated to a particular pattern _in the context of_ said
... pattern.
... The reason why *context* is important is because patterns may bind
... values to local variables, which may in turn be referenced in the
... body expressions.
... That is why the body must be analysed in the context of the
... pattern, and not separately.
(the (pattern_analysis :input: pattern next)
  Analysis
  (let [failure (do phase.monad
                  [[here _] module.current]
                  (/.except ..invalid [here pattern]))]
    (`` (.when pattern
          (@type.#Name provenance ["" name])
          (/.with_provenance provenance
            (do phase.monad
              [outputA (/scope.with_local [name :input:]
                         next)
               idx /scope.next]
              (in [{/pattern.#Bind idx} outputA])))

          (,, (template.with [<type> ,tag <input> <output>]
                [(,tag provenance <input>)
                 (simple_pattern_analysis <type> :input: provenance {/pattern.#Simple <output>} next)]

                [@type.Bit @type.#Bit pattern_value {/simple.#Bit pattern_value}]
                [@type.Natural @type.#Natural pattern_value {/simple.#Natural pattern_value}]
                [@type.Integer @type.#Integer pattern_value {/simple.#Integer pattern_value}]
                [@type.Revolution @type.#Revolution pattern_value {/simple.#Revolution pattern_value}]
                [@type.Decimal @type.#Decimal pattern_value {/simple.#Decimal pattern_value}]
                [@type.Text @type.#Text pattern_value {/simple.#Text pattern_value}]
                [Any @type.#Tuple (.list) {/simple.#Unit}]))
          
          (@type.#Tuple provenance (.list singleton))
          (pattern_analysis :input: singleton next)
          
          (@type.#Tuple provenance sub_patterns)
          (/.with_provenance provenance
            (do [! phase.monad]
              [record (//complex.normal true (list.as_stack sub_patterns))
               record_size,members,recordT (is (Operation (Maybe [Natural (Stack @type.Code) Type]))
                                               (.when record
                                                 {.#Some record}
                                                 (//complex.order true record)

                                                 {.#None}
                                                 (in {.#None})))]
              (.when record_size,members,recordT
                {.#Some [record_size members recordT]}
                (do !
                  [_ (.when :input:
                       {.#Variable @input}
                       (/type.check (do check.monad
                                      [? (check.bound? @input)]
                                      (if ?
                                          (in [])
                                          (check.check :input: recordT))))

                       _
                       (in []))]
                  (.when members
                    (stack singleton)
                    (pattern_analysis :input: singleton next)

                    _
                    (..tuple_pattern_analysis pattern_analysis :input: members next)))
                
                {.#None}
                (..tuple_pattern_analysis pattern_analysis :input: (list.as_stack sub_patterns) next))))

          (@type.#Form provenance every_item)
          (.when (list.as_stack every_item)
            (stack.partial (@type.#Name provenance [.prelude extension.list]) sub_patterns)
            (/.with_provenance provenance
              (..analysis_of_list pattern_analysis :input: sub_patterns next))

            _
            failure)

          (@type.#Variant provenance every_item)
          (.when (list.as_stack every_item)
            (stack.partial (@type.#Bit _ right?) values)
            (anonymous_variant pattern_analysis
                               :input: pattern next
                               provenance 0 right? values)

            (stack.partial (@type.#Natural _ lefts) (@type.#Bit _ right?) values)
            (anonymous_variant pattern_analysis
                               :input: pattern next
                               provenance lefts right? values)

            (stack.partial (@type.#Name _ tag) values)
            (/.with_provenance provenance
              (do phase.monad
                [tag (binding.normal tag)
                 [lefts,right? variantT] (label.tag tag)
                 [lefts right?] (in (.when lefts,right?
                                      {.#Some [lefts right? family]}
                                      [lefts right?]

                                      {.#None}
                                      [0 false]))
                 _ (/type.check (check.check :input: variantT))]
                (pattern_analysis :input:
                                  (@type.variant_code (.list (@type.natural_code lefts)
                                                             (@type.bit_code right?)
                                                             (@type.tuple_code (list.of_stack values))))
                                  next)))

            _
            failure)

          _
          failure
          ))))

(the .public (when analyse branches archive inputC)
  (-> Phase (Stack [@type.Code @type.Code]) Phase)
  (.when branches
    {.#Top [patternH bodyH] branchesT}
    (do [! phase.monad]
      [[:input: inputA] (<| /type.inferring
                            (analyse archive inputC))
       outputH (pattern_analysis :input: patternH (analyse archive bodyH))
       outputT (stack.each' !
                            (function (_ [patternT bodyT])
                              (pattern_analysis :input: patternT (analyse archive bodyT)))
                            branchesT)
       outputHC (|> outputH product.left /coverage.coverage /.of_try)
       outputTC (stack.each' ! (|>> product.left /coverage.coverage /.of_try) outputT)
       _ (.when (stack.mix' try.monad /coverage.composite outputHC outputTC)
           {try.#Success coverage}
           (do !
             [[here _] module.current]
             (phase.assertion ..non_exhaustive [here inputC branches coverage]
                              (/coverage.exhaustive? coverage)))

           {try.#Failure error}
           (/.failure error))
       @ meta.provenance]
      (in [@ {/.#When inputA [outputH (list.of_stack outputT)]}]))

    {.#Empty}
    (/.except ..empty_branches [])))
