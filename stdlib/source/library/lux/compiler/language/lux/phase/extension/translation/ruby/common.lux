... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["<>" projection]]
   [control
    ["|" pipe]]
   [error
    ["[0]" try]]
   ["[0]" function]
   [data
    ["[0]" product]
    ["[0]" text (.only \n)
     ["%" \\injection]]
    [collection
     ["[0]" dictionary]
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [macro
    ["[0]" template]]
   [target
    ["_" ruby]]
   [compiler
    [meta
     [archive (.only Archive)]]]]]
 [/////
  ["[0]" extension]
  [translation
   [extension (.only Nullary Unary Binary Trinary Variadic
                     nullary unary binary trinary variadic)]
   ["//" ruby
    ["[1][0]" runtime (.only Operation Phase Phase! Handler Bundle)]
    ["[1][0]" primitive]
    ["[1][0]" structure]
    ["[1][0]" reference]
    ["[1][0]" function]
    ["[1][0]" when]
    ["[1][0]" loop]]]
  [//
   ["[0]" phase (.use "[1]#[0]" monad)]
   ["[0]" translation]
   ["[0]" synthesis (.only)
    ["<[1]>" \\projection (.only Projection)]]]])

(the .public (custom [projection handler])
  (for_any (_ s)
    (-> [(Projection s)
         (-> Phase Archive s (Operation _.Expression))]
        Handler))
  (function (_ phase archive input)
    (when (<synthesis>.value projection (list.as_stack input))
      {try.#Success input'}
      (handler phase archive input')

      {try.#Failure error}
      (phase.failure error))))

(the .public (statement expression archive synthesis)
  Phase!
  (`` (when synthesis
        ... TODO: Get rid of this ASAP
        [@ {synthesis.#Extension [.prelude "when_char#|translation"] parameters}]
        (do phase.monad
          [body (expression archive synthesis)]
          (in (as _.Statement
                  body)))
        
        (,, (template.with [<tag>]
              [(<tag> @ value)
               (phase#each _.return
                           (expression archive synthesis))]

              [synthesis.bit]
              [synthesis.i64]
              [synthesis.f64]
              [synthesis.text]
              [synthesis.variant]
              [synthesis.tuple]
              [synthesis.reification]
              ))

        (,, (template.with [<tag>]
              [[@ {<tag> value}]
               (phase#each _.return
                           (expression archive synthesis))]

              [synthesis.#Reference]
              [synthesis.#Extension]))

        (synthesis.let @ register input body)
        (//when.let! statement expression archive [register input body])

        (synthesis.exec @ before after)
        (//when.exec! statement expression archive [before after])

        (synthesis.when @ it)
        (<| (,, (template.with [,synthesis]
                  [(when (,synthesis it)
                     {.#Some it}
                     (phase#each _.return
                                 (expression archive synthesis))

                     else)]

                  [synthesis.its]
                  ))
            (,, (template.with [,synthesis ,translation]
                  [(when (,synthesis it)
                     {.#Some it}
                     (,translation statement expression archive it)

                     else)]

                  [synthesis.if //when.if!]
                  [synthesis.when_i64 //when.when_i64!]
                  [synthesis.when_f64 //when.when_f64!]
                  [synthesis.when_text //when.when_text!]
                  [synthesis.multi_let //when.multi_let!]
                  ))
            (//when.when! false statement expression archive it))

        (,, (template.with [<tag> <translator>]
              [(<tag> @ value)
               (<translator> statement expression archive value)]

              [synthesis.tail_recursion //loop.tail_recursion!]
              [synthesis.tail_iteration //loop.tail_iteration!]))

        (synthesis.abstraction @ abstraction)
        (phase#each _.return
                    (//function.function statement expression archive abstraction))
        )))

... TODO: Get rid of this ASAP
(the lux::syntax_char_case!
  (..custom [(all <>.and
                  <synthesis>.any
                  <synthesis>.any
                  (<>.some (<synthesis>.tuple (all <>.and
                                                   (<synthesis>.tuple (<>.many <synthesis>.i64))
                                                   <synthesis>.any))))
             (function (_ phase archive [input else conditionals])
               (do [! phase.monad]
                 [inputG (phase archive input)
                  else! (statement phase archive else)
                  @input (by ! each _.local (translation.name "input"))
                  conditionals! (is (Operation (List [_.Expression _.Statement]))
                                    (list.each' ! (function (_ [chars branch])
                                                    (do !
                                                      [branch! (statement phase archive branch)]
                                                      (in [(|> chars
                                                               (list#each (|>> .integer _.int (_.= @input)))
                                                               (list#mix (function (_ clause total)
                                                                           (if (same? _.nil total)
                                                                             clause
                                                                             (_.or clause total)))
                                                                         _.nil))
                                                           branch!])))
                                                conditionals))
                  ... .let [closure (_.lambda {.#None} (list @input)
                  ...                         (list#mix (function (_ [test then] else)
                  ...                                     (_.if test (_.return then) else))
                  ...                                   (_.return else!)
                  ...                                   conditionals!))]
                  ]
                 ... (in (_.apply_lambda (list inputG) closure))
                 (in (<| (as _.Expression)
                         (is _.Statement)
                         (all _.then
                              (_.; (_.set (list @input) inputG))
                              (list#mix (function (_ [test then!] else!)
                                          (_.if test then! else!))
                                        else!
                                        conditionals!))))))]))

(the with_basic_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "when_char#|translation" lux::syntax_char_case!)
       (dictionary.has "is?#|translation" (binary (function (_ [expected actual])
                                                    (_.do "equal?" (list expected) {.#None} actual))))
       (dictionary.has "try#|translation" (unary //runtime.lux//try))))

(the with_i64_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "i64_and#|translation" (binary (product.uncurried //runtime.i64::and)))
       (dictionary.has "i64_or#|translation" (binary (product.uncurried //runtime.i64::or)))
       (dictionary.has "i64_xor#|translation" (binary (product.uncurried //runtime.i64::xor)))
       (dictionary.has "i64_left#|translation" (binary (product.uncurried //runtime.i64::left_shifted)))
       (dictionary.has "i64_right#|translation" (binary (product.uncurried //runtime.i64::right_shifted)))
       
       (dictionary.has "i64_=#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "i64_+#|translation" (binary (product.uncurried //runtime.i64::+)))
       (dictionary.has "i64_-#|translation" (binary (product.uncurried //runtime.i64::-)))
       ))

(the with_integer_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "int_<#|translation" (binary (product.uncurried _.<)))
       (dictionary.has "int_*#|translation" (binary (product.uncurried //runtime.i64::*)))
       (dictionary.has "int_/#|translation" (binary (product.uncurried //runtime.i64::/)))
       (dictionary.has "int_%#|translation" (binary (function (_ [parameter subject])
                                                      (_.do "remainder" (list parameter) {.#None} subject))))
       
       (dictionary.has "int_f64#|translation" (unary (_./ (_.float +1.0))))
       (dictionary.has "int_char#|translation" (unary //runtime.i64::char))
       ))

(the with_f64_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "f64_+#|translation" (binary (product.uncurried _.+)))
       (dictionary.has "f64_-#|translation" (binary (product.uncurried _.-)))
       (dictionary.has "f64_*#|translation" (binary (product.uncurried _.*)))
       (dictionary.has "f64_/#|translation" (binary (product.uncurried _./)))
       (dictionary.has "f64_%#|translation" (binary (function (_ [parameter subject])
                                                      (_.do "remainder" (list parameter) {.#None} subject))))
       (dictionary.has "f64_=#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "f64_<#|translation" (binary (product.uncurried _.<)))
       (dictionary.has "f64_int#|translation" (unary (_.do "floor" (list) {.#None})))))

(the (text//char [subjectO paramO])
  (Binary _.Expression)
  (//runtime.text//char subjectO paramO))

(the (text//clip [paramO extraO subjectO])
  (Trinary _.Expression)
  (//runtime.text//clip paramO extraO subjectO))

(the (text//index [startO partO textO])
  (Trinary _.Expression)
  (//runtime.text//index textO partO startO))

(the text//composite
  (Variadic _.Expression)
  (|>> list.of_stack
       (|.when
         (list)
         (_.string "")

         (list single)
         single

         (list left right)
         (|> left (_.+ right))

         parts
         (list#mix _.bit_shl (_.string "") parts))))

(the with_text_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "text_=#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "text_<#|translation" (binary (product.uncurried _.<)))
       (dictionary.has "text_composite#|translation" (variadic ..text//composite))
       (dictionary.has "text_index#|translation" (trinary text//index))
       (dictionary.has "text_size#|translation" (unary (_.its "length")))
       (dictionary.has "text_char#|translation" (binary (product.uncurried //runtime.text//char)))
       (dictionary.has "text_clip#|translation" (trinary text//clip))
       ))

(the (io//log! messageG)
  (Unary _.Expression)
  (|> (_.print/2 messageG (_.string \n))
      (_.or //runtime.unit)))

(the io//error!
  (Unary _.Expression)
  (let [stack_trace (_.do "join" (list (_.string \n))
                      {.#None}
                      _.caller/0)]
    (|>> (_.+ (_.string (text \n \n)))
         (_.+ stack_trace)
         _.raise)))

(the with_io_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "log!#|translation" (unary ..io//log!))
       (dictionary.has "error#|translation" (unary ..io//error!))
       ))

(the .public bundle
  Bundle
  (|> extension.empty
      with_basic_extensions
      with_i64_extensions
      with_integer_extensions
      with_f64_extensions
      with_text_extensions
      with_io_extensions
      ))
