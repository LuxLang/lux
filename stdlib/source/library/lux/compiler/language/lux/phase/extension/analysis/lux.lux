... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except global local when function with type)
   [abstract
    [monad (.only do)]
    ["?" projection (.use "[1]#[0]" monad)]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     [character (.only Character)]
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)
      ["?[1]" \\projection]
      ["[0]" property]]
     ["[0]" dictionary]]]
   [math
    [number
     [/64
      ["n" natural]
      ["[0]" fraction]
      ["[0]" rational]]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" binding]
    ["[0]" name]
    ["[0]" module]
    [module
     ["[0]" import]]
    ["[0]" code (.only)
     ["?[1]" \\projection]]]]]
 ["[0]" /// (.only)
  [///
   ["[0]" phase (.only)
    [analysis
     ["[0]" when]
     ["[0]" function]]]
   ["[0]" analysis (.only Operation Phase Bundle)
    [evaluation (.only Eval)]
    ["[0]A" type]
    ["[0]" scope]
    ["[0]" inference]]
   [///
    ["[0]" reference]
    [meta
     [archive (.only Archive)]]
    ["@[0]" type]
    ["[0]" extension (.only)
     ["[1]/[0]" lux]]]]])

(every Handler
  (-> extension.Name
      analysis.Handler))

(the .public (custom [syntax handler] extension_name)
  (for_any (_ it)
    (-> [(?code.Projection it)
         (-> extension.Name Phase Archive it (Operation analysis.Term))]
        Handler))
  (.function (_ analysis archive args)
    (.when (?list.value args syntax)
      {try.#Success inputs}
      (handler extension_name analysis archive inputs)

      {try.#Failure error}
      (phase.failure error))))

(the .public translation
  (-> extension.Name
      Name)
  (|>> extension.translation
       [.prelude]))

(the .public (with name anonymous)
  (-> extension.Name Handler
      (Change Bundle))
  (dictionary.has name (anonymous name)))

(exception.the .public (incorrect_arity [expected actual])
  (Exception [Natural Natural])
  (exception.report
   (list ["Expected" (%.natural expected)]
         ["Actual" (%.natural actual)])))

(the (simple inputsT+ outputT extension_name)
  (-> (List Type) Type
      Handler)
  (let [num_expected (list.size inputsT+)]
    (.function (_ analysis archive args)
      (let [num_actual (list.size args)]
        (if (n.= num_expected num_actual)
            (do [! phase.monad]
              [_ (typeA.inference outputT)
               argsA (list.each' !
                                 (.function (_ [argT argC])
                                   (<| (typeA.expecting argT)
                                       (analysis archive argC)))
                                 (list.zipped_2 inputsT+ args))
               @ meta.provenance]
              (pure [@ {analysis.#Extension (..translation extension_name) argsA}]))
            (analysis.except ..incorrect_arity [num_expected num_actual]))))))

(the .public (nullary valueT)
  (-> Type
      Handler)
  (simple (list) valueT))

(the .public (unary inputT outputT)
  (-> Type Type
      Handler)
  (simple (list inputT) outputT))

(the .public (binary subjectT paramT outputT)
  (-> Type Type Type
      Handler)
  (simple (list subjectT paramT) outputT))

(the .public (trinary subjectT param0T param1T outputT)
  (-> Type Type Type Type
      Handler)
  (simple (list subjectT param0T param1T) outputT))

(the .public (variadic next input output extension_name)
  (-> (Change extension.Name) Type Type
      Handler)
  (.function (_ analysis archive args)
    (do [! phase.monad]
      [_ (typeA.inference output)
       argsA (list.each' !
                         (|>> (analysis archive)
                              (typeA.expecting input))
                         args)
       @ meta.provenance]
      (pure [@ {analysis.#Extension [.prelude (next extension_name)] argsA}]))))

... TODO: Get rid of this ASAP
(these
 (exception.the .public (character_text_must_be_size_1 text)
   (Exception Text)
   (exception.report
    (list ["Text" (%.text text)])))
 
 (the text_char
   (?code.Projection Character)
   (do ?.monad
     [raw ?code.text]
     (.when (text.size raw)
       1 (pure (|> raw (text.character 0) maybe.trusted))
       _ (?.failure (exception.error ..character_text_must_be_size_1 [raw])))))

 (the lux::syntax_char_case!
   Handler
   (..custom
    [(all ?.and
          ?list.any
          (?code.tuple (?.some (?.and (?code.tuple (?.many ..text_char))
                                      ?list.any)))
          ?list.any)
     (.function (_ extension_name analysis archive [input conditionals else])
       (do [! phase.monad]
         [input (<| (typeA.expecting @type.Character)
                    (analysis archive input))
          expectedT meta.expected_type
          conditionals (list.each' ! (.function (_ [cases branch])
                                       (<| (by ! each (|>> [cases]))
                                           (typeA.expecting expectedT)
                                           (analysis archive)
                                           branch))
                                   conditionals)
          else (<| (typeA.expecting expectedT)
                   (analysis archive else))
          @ meta.provenance]
         (pure (|> conditionals
                   (list#each (.function (_ [cases branch])
                                (<| (analysis.tuple @)
                                    (list (analysis.tuple @ (list#each (|>> (analysis.natural @)) cases))
                                          branch))))
                   (list#composite (list input else))
                   {analysis.#Extension (..translation extension_name)}
                   [@]))))])))

... .is?# represents reference/pointer equality.
(the (lux::is? extension_name)
  Handler
  (.function (_ analysis archive args)
    (<| typeA.with_var (.function (_ [@var :var:]))
        ((binary :var: :var: @type.Bit extension_name)
         analysis archive args))))

... .try# provides a unified way to interact with the host platform's runtime error-handling facilities.
(the lux::try
  Handler
  (..custom
   [?list.any
    (.function (_ extension_name analysis archive opC)
      (<| typeA.with_var (.function (_ [@var :var:]))
          (do [! phase.monad]
            [_ (typeA.inference (.type (Either @type.Text :var:)))
             @ meta.provenance]
            (|> opC
                (analysis archive)
                (typeA.expecting (.type (-> .Any :var:)))
                (by ! each (|>> list
                                {analysis.#Extension (..translation extension_name)}
                                [@]))))))]))

(the .public (in_module#_extension eval)
  (-> Eval
      Handler)
  (..custom
   [(?.and ?list.any ?list.any)
    (.function (_ extension_name analysis archive [module 'expression])
      (do [! phase.monad]
        [module (eval archive @type.Text module)]
        (analysis.with_current_module (as (-> Any Text) module)
          (analysis archive (code.with [(as (-> Any Text) module) 0 0] 'expression)))))]))

(the .public (is#_extension eval)
  (-> Eval
      Handler)
  (..custom
   [(?.and ?list.any ?list.any)
    (.function (_ extension_name analysis archive [typeC valueC])
      (do [! phase.monad]
        [actualT (by ! each (|>> (as (-> Any @type.Type)))
                     (eval archive @type.Type typeC))
         _ (typeA.inference actualT)]
        (<| (typeA.expecting actualT)
            (analysis archive valueC))))]))

(the .public (as#_extension eval)
  (-> Eval
      Handler)
  (..custom
   [(?.and ?list.any ?list.any)
    (.function (_ extension_name analysis archive [typeC it])
      (do [! phase.monad]
        [coercion (eval archive @type.Type typeC)
         [actual_type it] (inference.general archive analysis (as (-> Any @type.Type) coercion) (stack it))
         _ (typeA.inference actual_type)]
        (.when it
          (stack it)
          (pure it)

          _
          (undefined))))]))

(exception.the .public (cannot_access_global [from global])
  (Exception [Text Name])
  (exception.report
   (list ["From" (%.text from)]
         ["Global" (name.as_text global)])))

(the (expected_module current quoted)
  (-> Text Text
      Text)
  (.when quoted
    "" current
    _ quoted))

... It may seem odd that type-checking is done just prior to raising an exception.
... It would be a completely useless labor...
... Except for that fact that, under certain circumstances, the compiler needs to access defaults.
... And it only needs to forbid access in every other situation.
... What this does is make sure that any code which does need to access defaults can just catch
... the exception, and know that the default it was looking for has the correct type, because
... the exception is only ever raised _after_ the inference.
(the (global_default name [type _])
  (for_any (_ it)
    (-> Name @type.Default
        (Operation it)))
  (do phase.monad
    [_ (typeA.inference type)]
    (analysis.except ///.defaults_cannot_be_referenced [name])))

(the .public global
  Handler
  (..custom
   [(?.and ?code.text ?code.global)
    (.function (_ extension_name analysis archive [quoted_module def_name])
      (loop (de_aliased [validated_access? false
                         def_name def_name])
        (do [! phase.monad]
          [(^.let def_name [::module ::name]) (binding.normal def_name)
           [exported? constant] (binding.definition def_name)
           current module.current_name
           .let [expected (..expected_module current quoted_module)]
           imported! (import.by? ::module expected)]
          (if (let [in_the_same_module? (text.= expected ::module)
                    can_access_export? (and exported? imported!)]
                (or validated_access?
                    in_the_same_module?
                    can_access_export?))
              (.when constant
                {@type.#Alias real_def_name}
                (de_aliased true real_def_name)
                
                {@type.#Definition [type _]}
                (do !
                  [_ (typeA.inference type)
                   @ meta.provenance]
                  (pure (analysis.constant @ def_name)))

                {@type.#Default it}
                (global_default def_name it))
              (analysis.except ..cannot_access_global [expected def_name])))))]))

(exception.the .public (unknown_local name)
  (Exception Text)
  (exception.report
   (list ["Name" (%.text name)])))

(the .public local
  Handler
  (..custom
   [?code.local
    (.function (_ extension_name analysis archive [it])
      (do [! phase.monad]
        [?var (scope.variable it)]
        (.when ?var
          {.#Some [local_type local_reference]}
          (do !
            [_ (typeA.inference local_type)
             @ meta.provenance]
            (pure (analysis.variable @ local_reference)))

          {.#None}
          (analysis.except ..unknown_local [it]))))]))

(the universe
  Handler
  (..custom
   [(?#pure [])
    (.function (_ extension_name analysis archive [])
      (do phase.monad
        [_ (typeA.inference @type.Natural)
         @ meta.provenance]
        (pure (analysis.natural @ (++ (.universe#))))))]))

(the when
  Handler
  (..custom
   [(?.and ?list.any
           (?.many (?.and ?list.any ?list.any)))
    (.function (_ extension_name analysis archive [input branches])
      (when.when (list.as_stack branches) analysis archive input))]))

(the function
  Handler
  (..custom
   [(all ?.and
         ?code.local
         ?code.local
         ?list.any)
    (.function (_ extension_name analysis archive [function_name arg_name body])
      (function.function analysis function_name arg_name archive body))]))

(template.with [,name ,type ,normal ,numerator_projection ,numerator_analysis]
  [(the ,name
     Handler
     (..custom
      [(all ?.and
            ,numerator_projection
            ?code.natural)
       (.function (_ extension_name analysis archive [numerator denominator])
         (do phase.monad
           [.let [[numerator denominator] (,normal [numerator denominator])]
            _ (typeA.inference ,type)
            @ meta.provenance]
           (pure (analysis.tuple @ (list (,numerator_analysis @ numerator)
                                         (analysis.natural @ denominator))))))]))]

  [fraction fraction.Number fraction.normal ?code.natural analysis.natural]
  [rational rational.Number rational.normal ?code.integer analysis.integer]
  )

(the with_basic
  (Change Bundle)
  (|>> (with "is?#" lux::is?)
       (with "try#" lux::try)
       (with "when_char#" lux::syntax_char_case!)
       (with "local#" ..local)
       (with "global#" ..global)
       (with "universe#" ..universe)
       (with "when#" ..when)
       (with "function#" ..function)

       (with fraction.extension ..fraction)
       (with rational.extension ..rational)))

(the with_io
  (Change Bundle)
  (|>> (with "log!#" (unary @type.Text Any))
       (with "error#" (unary @type.Text Nothing))))

(the Any_I64
  (.type (@type.I64 Any)))

(the with_i64
  (Change Bundle)
  (|>> (with "i64_and#" (binary Any_I64 Any_I64 @type.I64))
       (with "i64_or#" (binary Any_I64 Any_I64 @type.I64))
       (with "i64_xor#" (binary Any_I64 Any_I64 @type.I64))
       (with "i64_left#" (binary @type.Natural Any_I64 @type.I64))
       (with "i64_right#" (binary @type.Natural Any_I64 @type.I64))

       (with "i64_=#" (binary Any_I64 Any_I64 @type.Bit))
       (with "i64_+#" (binary Any_I64 Any_I64 @type.I64))
       (with "i64_-#" (binary Any_I64 Any_I64 @type.I64))))

(the with_integer
  (Change Bundle)
  (|>> (with "int_<#" (binary @type.Integer @type.Integer @type.Bit))
       (with "int_x#" (binary @type.Integer @type.Integer @type.Integer))
       (with "int_/#" (binary @type.Integer @type.Integer @type.Integer))
       (with "int_%#" (binary @type.Integer @type.Integer @type.Integer))
       
       (with "int_f64#" (unary @type.Integer @type.Decimal))
       (with "int_char#" (unary @type.Integer @type.Text))))

(the with_decimal
  (Change Bundle)
  (|>> (with "f64_+#" (binary @type.Decimal @type.Decimal @type.Decimal))
       (with "f64_-#" (binary @type.Decimal @type.Decimal @type.Decimal))
       (with "f64_x#" (binary @type.Decimal @type.Decimal @type.Decimal))
       (with "f64_/#" (binary @type.Decimal @type.Decimal @type.Decimal))
       (with "f64_%#" (binary @type.Decimal @type.Decimal @type.Decimal))
       (with "f64_=#" (binary @type.Decimal @type.Decimal @type.Bit))
       (with "f64_<#" (binary @type.Decimal @type.Decimal @type.Bit))
       
       (with "f64_int#" (unary @type.Decimal @type.Integer))))

(the with_text
  (Change Bundle)
  (|>> (with "text_=#" (binary @type.Text @type.Text @type.Bit))
       (with "text_<#" (binary @type.Text @type.Text @type.Bit))
       (with "text_composite#" (variadic extension.synthesis @type.Text @type.Text))
       (with "text_index#" (trinary @type.Natural @type.Text @type.Text (.type (Maybe @type.Natural))))
       (with "text_size#" (unary @type.Text @type.Natural))
       (with "text_char#" (binary @type.Natural @type.Text @type.Natural))
       (with "text_clip#" (trinary @type.Natural @type.Natural @type.Text @type.Text))
       ))

(the lux::list
  Handler
  (..custom
   [(?.some ?list.any)
    (.function (_ extension_name analysis archive elements)
      (if (list.empty? elements)
          (do [! phase.monad]
            [_ (typeA.inference @type.List)
             @ meta.provenance]
            (pure [@ {analysis.#Extension (..translation extension_name) (list)}]))
          (<| typeA.with_var (.function (_ [_ it]))
              (do [! phase.monad]
                [_ (typeA.inference (.type (@type.List it)))
                 elements (list.each' ! (|>> (analysis archive)
                                             (typeA.expecting it))
                                      elements)
                 @ meta.provenance]
                (pure (|> elements
                          {analysis.#Extension (..translation extension_name)}
                          [@]))))))]))

(the lux::list_size
  Handler
  (..custom
   [?list.any
    (.function (_ extension_name analysis archive it)
      (<| typeA.with_var (.function (_ [_ type_of_item]))
          (do [! phase.monad]
            [@ meta.provenance
             _ (typeA.inference @type.Natural)]
            (|> it
                (analysis archive)
                (typeA.expecting (.type (@type.List type_of_item)))
                (by ! each (|>> list
                                {analysis.#Extension (..translation extension_name)}
                                [@]))))))]))

(the lux::list_item
  Handler
  (..custom
   [(?.and ?list.any ?list.any)
    (.function (_ extension_name analysis archive [address it])
      (<| typeA.with_var (.function (_ [_ type_of_item]))
          (do [! phase.monad]
            [@ meta.provenance
             _ (typeA.inference type_of_item)
             address (<| (typeA.expecting @type.Natural)
                         (analysis archive)
                         address)]
            (|> it
                (analysis archive)
                (typeA.expecting (.type (@type.List type_of_item)))
                (by ! each (|>> (list address)
                                {analysis.#Extension (..translation extension_name)}
                                [@]))))))]))

(the lux::list_composite
  Handler
  (..custom
   [(?.and ?list.any ?list.any)
    (.function (_ extension_name analysis archive [prefix suffix])
      (<| typeA.with_var (.function (_ [_ type_of_item]))
          (do [! phase.monad]
            [@ meta.provenance
             .let [type_of_list (.type (@type.List type_of_item))
                   segment (|>> (analysis archive)
                                (typeA.expecting type_of_list))]
             _ (typeA.inference type_of_list)
             prefix (segment prefix)
             suffix (segment suffix)]
            (pure (|> (list prefix suffix)
                      {analysis.#Extension (..translation extension_name)}
                      [@])))))]))

(the with_list
  (Change Bundle)
  (|>> (with extension/lux.list ..lux::list)
       (with extension/lux.list_size ..lux::list_size)
       (with extension/lux.list_item ..lux::list_item)
       (with extension/lux.list_composite ..lux::list_composite)
       ))

(exception.the .public (type_is_not_known [name])
  (Exception Text)
  (exception.report
   (list ["Choice" (%.text name)]
         ["Each option" (|> (property.keys @type.each_name)
                            (list#composite (property.keys @type.each_type))
                            (list.sorted text.<)
                            (exception.listing %.text))])))

(the type::name
  Handler
  (..custom
   [?code.text
    (.function (_ extension_name analysis archive [it])
      (do [! phase.monad]
        [it (.when (property.value it @type.each_name)
              {try.#Success name}
              (pure name)
              
              {try.#Failure _}
              (analysis.except ..type_is_not_known [it]))
         @ meta.provenance
         _ (typeA.inference @type.Text)]
        (pure (analysis.text @ it))))]))

(the type
  Handler
  (..custom
   [?code.text
    (.function (_ extension_name analysis archive [it])
      (do [! phase.monad]
        [_ (typeA.inference @type.Type)]
        (.when (property.value it @type.each_type)
          {try.#Success it}
          (<| (typeA.expecting @type.Type)
              (analysis archive)
              it)
          
          {try.#Failure _}
          (analysis.except ..type_is_not_known [it]))))]))

(the with_type
  (Change Bundle)
  (|>> (with extension/lux.type_name ..type::name)
       (with extension/lux.type ..type)
       ))

(the array
  Handler
  (..custom
   [?list.any
    (.function (_ extension_name analysis archive size)
      (<| typeA.with_var (.function (_ [_ to_write]))
          typeA.with_var (.function (_ [_ to_read]))
          (do [! phase.monad]
            [_ (typeA.inference (@type.Array to_write to_read))
             size (|> size
                      (analysis archive)
                      (typeA.expecting @type.Natural))
             @ meta.provenance]
            (pure (|> (list size)
                      {analysis.#Extension (..translation extension_name)}
                      [@])))))]))

(the array_size
  Handler
  (..custom
   [?list.any
    (.function (_ extension_name analysis archive it)
      (<| typeA.with_var (.function (_ [_ to_write]))
          typeA.with_var (.function (_ [_ to_read]))
          (do [! phase.monad]
            [_ (typeA.inference @type.Natural)
             it (<| (typeA.expecting (@type.Array to_write to_read))
                    (analysis archive)
                    it)
             @ meta.provenance]
            (pure (|> (list it)
                      {analysis.#Extension (..translation extension_name)}
                      [@])))))]))

(the array_its
  Handler
  (..custom
   [(?.and ?list.any ?list.any)
    (.function (_ extension_name analysis archive [address it])
      (<| typeA.with_var (.function (_ [_ to_write]))
          typeA.with_var (.function (_ [_ to_read]))
          (do [! phase.monad]
            [_ (typeA.inference to_read)
             it (<| (typeA.expecting (@type.Array to_write to_read))
                    (analysis archive)
                    it)
             address (<| (typeA.expecting @type.Natural)
                         (analysis archive)
                         address)
             @ meta.provenance]
            (pure (|> (list address it)
                      {analysis.#Extension (..translation extension_name)}
                      [@])))))]))

(the array_has
  Handler
  (..custom
   [(all ?.and ?list.any ?list.any ?list.any)
    (.function (_ extension_name analysis archive [address value it])
      (<| typeA.with_var (.function (_ [_ to_write]))
          typeA.with_var (.function (_ [_ to_read]))
          (do [! phase.monad]
            [_ (typeA.inference (@type.Array to_write to_read))
             it (<| (typeA.expecting (@type.Array to_write to_read))
                    (analysis archive)
                    it)
             value (<| (typeA.expecting to_write)
                       (analysis archive)
                       value)
             address (<| (typeA.expecting @type.Natural)
                         (analysis archive)
                         address)
             @ meta.provenance]
            (pure (|> (list address value it)
                      {analysis.#Extension (..translation extension_name)}
                      [@])))))]))

(the array_lacks?
  Handler
  (..custom
   [(?.and ?list.any ?list.any)
    (.function (_ extension_name analysis archive [address it])
      (<| typeA.with_var (.function (_ [_ to_write]))
          typeA.with_var (.function (_ [_ to_read]))
          (do [! phase.monad]
            [_ (typeA.inference @type.Bit)
             it (<| (typeA.expecting (@type.Array to_write to_read))
                    (analysis archive)
                    it)
             address (<| (typeA.expecting @type.Natural)
                         (analysis archive)
                         address)
             @ meta.provenance]
            (pure (|> (list address it)
                      {analysis.#Extension (..translation extension_name)}
                      [@])))))]))

(the array_lacks
  Handler
  (..custom
   [(all ?.and ?list.any ?list.any)
    (.function (_ extension_name analysis archive [address it])
      (<| typeA.with_var (.function (_ [_ to_write]))
          typeA.with_var (.function (_ [_ to_read]))
          (do [! phase.monad]
            [_ (typeA.inference (@type.Array to_write to_read))
             it (<| (typeA.expecting (@type.Array to_write to_read))
                    (analysis archive)
                    it)
             address (<| (typeA.expecting @type.Natural)
                         (analysis archive)
                         address)
             @ meta.provenance]
            (pure (|> (list address it)
                      {analysis.#Extension (..translation extension_name)}
                      [@])))))]))

(the with_array
  (Change Bundle)
  (|>> (with extension/lux.array ..array)
       (with extension/lux.array_size ..array_size)
       (with extension/lux.array_its ..array_its)
       (with extension/lux.array_has ..array_has)
       (with extension/lux.array_lacks ..array_lacks)
       (with extension/lux.array_lacks? ..array_lacks?)
       ))

(the .public bundle
  (|> ///.empty
      with_basic
      with_io
      with_text
      with_i64
      with_integer
      with_decimal
      with_list
      with_type
      with_array
      ))
