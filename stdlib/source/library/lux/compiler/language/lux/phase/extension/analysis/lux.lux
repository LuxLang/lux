... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except global local when function with)
   [abstract
    [monad (.only do)]
    ["?" projection (.use "[1]#[0]" monad)]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     [character (.only Character)]
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)
      ["?[1]" \\projection]]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["n" natural]
     ["[0]" fraction]
     ["[0]" rational]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   ["[0]" type (.only)
    ["[0]" check]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" binding]
    ["[0]" name]
    [module
     ["[0]" import]]
    ["[0]" code
     ["?[1]" \\projection (.only Projection)]]]]]
 ["[0]" /// (.only)
  ["/[1]" //
   [//
    ["[0]" phase (.only)
     [analysis
      ["[0]" when]
      ["[0]" function]]]
    ["[0]" analysis (.only Operation Phase Handler Bundle)
     [evaluation (.only Eval)]
     ["[0]A" type]
     ["[0]" scope]]
    [///
     ["[0]" reference]
     [meta
      [archive (.only Archive)]]
     ["[0]" extension (.only)
      ["[1]/[0]" lux]]]]]])

(the .public (custom [syntax handler] extension_name)
  (for_any (_ it)
    (-> [(Projection it)
         (-> extension.Name Phase Archive it (Operation analysis.Term))]
        (-> extension.Name Handler)))
  (.function (_ analysis archive args)
    (.when (?list.value args syntax)
      {try.#Success inputs}
      (handler extension_name analysis archive inputs)

      {try.#Failure error}
      (phase.failure error))))

(the .public translation
  (-> extension.Name
      Name)
  (|>> extension.translation
       [.prelude]))

(the .public (with name anonymous)
  (-> extension.Name (-> extension.Name Handler)
      (-> Bundle Bundle))
  (dictionary.has name (anonymous name)))

(exception.the .public (incorrect_arity [expected actual])
  (Exception [Natural Natural])
  (exception.report
   (list ["Expected" (%.natural expected)]
         ["Actual" (%.natural actual)])))

(the (simple inputsT+ outputT extension_name)
  (-> (List Type) Type (-> extension.Name Handler))
  (let [num_expected (list.size inputsT+)]
    (.function (_ analysis archive args)
      (let [num_actual (list.size args)]
        (if (n.= num_expected num_actual)
            (do [! phase.monad]
              [_ (typeA.inference outputT)
               argsA (list.each' !
                                 (.function (_ [argT argC])
                                   (<| (typeA.expecting argT)
                                       (analysis archive argC)))
                                 (list.zipped_2 inputsT+ args))
               @ meta.provenance]
              (in [@ {analysis.#Extension (..translation extension_name) argsA}]))
            (analysis.except ..incorrect_arity [num_expected num_actual]))))))

(the .public (nullary valueT)
  (-> Type
      (-> extension.Name Handler))
  (simple (list) valueT))

(the .public (unary inputT outputT)
  (-> Type Type
      (-> extension.Name Handler))
  (simple (list inputT) outputT))

(the .public (binary subjectT paramT outputT)
  (-> Type Type Type
      (-> extension.Name Handler))
  (simple (list subjectT paramT) outputT))

(the .public (trinary subjectT param0T param1T outputT)
  (-> Type Type Type Type
      (-> extension.Name Handler))
  (simple (list subjectT param0T param1T) outputT))

(the .public (variadic next input output extension_name)
  (-> (-> extension.Name extension.Name) Type Type
      (-> extension.Name Handler))
  (.function (_ analysis archive args)
    (do [! phase.monad]
      [_ (typeA.inference output)
       argsA (list.each' !
                         (|>> (analysis archive)
                              (typeA.expecting input))
                         args)
       @ meta.provenance]
      (in [@ {analysis.#Extension [.prelude (next extension_name)] argsA}]))))

... TODO: Get rid of this ASAP
(these
 (exception.the .public (character_text_must_be_size_1 text)
   (Exception Text)
   (exception.report
    (list ["Text" (%.text text)])))
 
 (the text_char
   (Projection Character)
   (do ?.monad
     [raw ?code.text]
     (.when (text.size raw)
       1 (in (|> raw (text.character 0) maybe.trusted))
       _ (?.failure (exception.error ..character_text_must_be_size_1 [raw])))))

 (the lux::syntax_char_case!
   (-> extension.Name Handler)
   (..custom
    [(all ?.and
          ?list.any
          (?code.tuple (?.some (?.and (?code.tuple (?.many ..text_char))
                                      ?list.any)))
          ?list.any)
     (.function (_ extension_name phase archive [input conditionals else])
       (do [! phase.monad]
         [input (<| (typeA.expecting Character)
                    (phase archive input))
          expectedT meta.expected_type
          conditionals (list.each' ! (.function (_ [cases branch])
                                       (do !
                                         [branch (<| (typeA.expecting expectedT)
                                                     (phase archive branch))]
                                         (in [cases branch])))
                                   conditionals)
          else (<| (typeA.expecting expectedT)
                   (phase archive else))
          @ meta.provenance]
         (in (|> conditionals
                 (list#each (.function (_ [cases branch])
                              (<| (analysis.tuple @)
                                  (list (analysis.tuple @ (list#each (|>> (analysis.natural @)) cases))
                                        branch))))
                 (list#composite (list input else))
                 {analysis.#Extension (..translation extension_name)}
                 [@]))))])))

... .is?# represents reference/pointer equality.
(the (lux::is? extension_name)
  (-> extension.Name Handler)
  (.function (_ analysis archive args)
    (<| typeA.with_var
        (.function (_ [@var :var:]))
        ((binary :var: :var: Bit extension_name)
         analysis archive args))))

... .try# provides a unified way to interact with the host platform's runtime error-handling facilities.
(the lux::try
  (-> extension.Name Handler)
  (..custom
   [?list.any
    (.function (_ extension_name analysis archive opC)
      (<| typeA.with_var
          (.function (_ [@var :var:]))
          (do [! phase.monad]
            [_ (typeA.inference (type (Either Text :var:)))
             @ meta.provenance]
            (|> opC
                (analysis archive)
                (typeA.expecting (type (-> .Any :var:)))
                (by ! each (|>> list
                                {analysis.#Extension (..translation extension_name)}
                                [@]))))))]))

(the .public (in_module#_extension eval)
  (-> Eval
      (-> extension.Name Handler))
  (..custom
   [(?.and ?list.any ?list.any)
    (.function (_ extension_name analysis archive [module 'expression])
      (do [! phase.monad]
        [module (eval archive Text module)]
        (analysis.with_current_module (as Text module)
          (.when 'expression
            [_ 'expression]
            (analysis archive [[(as Text module) 0 0] 'expression])))))]))

(the .public (is#_extension eval)
  (-> Eval
      (-> extension.Name Handler))
  (..custom
   [(?.and ?list.any ?list.any)
    (.function (_ extension_name analysis archive [typeC valueC])
      (do [! phase.monad]
        [actualT (by ! each (|>> (as Type))
                     (eval archive Type typeC))
         _ (typeA.inference actualT)]
        (<| (typeA.expecting actualT)
            (analysis archive valueC))))]))

(the .public (as#_extension eval)
  (-> Eval
      (-> extension.Name Handler))
  (..custom
   [(?.and ?list.any ?list.any)
    (.function (_ extension_name analysis archive [typeC valueC])
      (do [! phase.monad]
        [actualT (by ! each (|>> (as Type))
                     (eval archive Type typeC))
         _ (typeA.inference actualT)
         [valueT valueA] (typeA.inferring (analysis archive valueC))]
        (in valueA)))]))

(the (caster input output)
  (-> Type Type
      (-> extension.Name Handler))
  (..custom
   [?list.any
    (.function (_ extension_name phase archive valueC)
      (do [! phase.monad]
        [_ (typeA.inference output)]
        (<| (typeA.expecting input)
            (phase archive valueC))))]))

(exception.the .public (cannot_access_global [from global])
  (Exception [Text Name])
  (exception.report
   (list ["From" (%.text from)]
         ["Global" (name.as_text global)])))

(the (expected_module current quoted)
  (-> Text Text
      Text)
  (.when quoted
    "" current
    _ quoted))

... It may seem odd that type-checking is done just prior to raising an exception.
... It would be a completely useless labor...
... Except for that fact that, under certain circumstances, the compiler needs to access defaults.
... And it only needs to forbid access in every other situation.
... What this does is make sure that any code which does need to access defaults can just catch
... the exception, and know that the default it was looking for has the correct type, because
... the exception is only ever raised _after_ the inference.
(the (global_default name [type _])
  (for_any (_ it)
    (-> Name Default
        (Operation it)))
  (do phase.monad
    [_ (typeA.inference type)]
    (analysis.except ///.defaults_cannot_be_referenced [name])))

(the .public global
  (-> extension.Name Handler)
  (..custom
   [(?.and ?code.text ?code.global)
    (.function (_ extension_name phase archive [quoted_module def_name])
      (loop (de_aliased [validated_access? false
                         def_name def_name])
        (do [! phase.monad]
          [(^.let def_name [::module ::name]) (binding.normal def_name)
           [exported? constant] (binding.definition def_name)
           [current _] module.current
           .let [expected (..expected_module current quoted_module)]
           imported! (import.by? ::module expected)]
          (if (let [in_the_same_module? (text.= expected ::module)
                    can_access_export? (and exported? imported!)]
                (or validated_access?
                    in_the_same_module?
                    can_access_export?))
              (.when constant
                {.#Alias real_def_name}
                (de_aliased true real_def_name)
                
                {.#Definition [type _]}
                (do !
                  [_ (typeA.inference type)
                   @ meta.provenance]
                  (in (analysis.constant @ def_name)))

                {.#Default it}
                (global_default def_name it))
              (analysis.except ..cannot_access_global [expected def_name])))))]))

(exception.the .public (unknown_local name)
  (Exception Text)
  (exception.report
   (list ["Name" (%.text name)])))

(the .public local
  (-> extension.Name Handler)
  (..custom
   [?code.local
    (.function (_ extension_name phase archive [it])
      (do [! phase.monad]
        [?var (scope.variable it)]
        (.when ?var
          {.#Some [local_type local_reference]}
          (do !
            [_ (typeA.inference local_type)
             @ meta.provenance]
            (in (analysis.variable @ local_reference)))

          {.#None}
          (analysis.except ..unknown_local [it]))))]))

(the universe
  (-> extension.Name Handler)
  (..custom
   [(?#in [])
    (.function (_ extension_name phase archive [])
      (do phase.monad
        [_ (typeA.inference Natural)
         @ meta.provenance]
        (in (analysis.natural @ (++ (.universe#))))))]))

(the when
  (-> extension.Name Handler)
  (..custom
   [(?.and ?list.any
           (?.many (?.and ?list.any ?list.any)))
    (.function (_ extension_name phase archive [input branches])
      (when.when phase (list.as_stack branches) archive input))]))

(the function
  (-> extension.Name Handler)
  (..custom
   [(all ?.and
         ?code.local
         ?code.local
         ?list.any)
    (.function (_ extension_name phase archive [function_name arg_name body])
      (function.function phase function_name arg_name archive body))]))

(template.with [,name ,type ,normal ,numerator_projection ,numerator_analysis]
  [(the ,name
     (-> extension.Name Handler)
     (..custom
      [(all ?.and
            ,numerator_projection
            ?code.natural)
       (.function (_ extension_name phase archive [numerator denominator])
         (do phase.monad
           [.let [[numerator denominator] (,normal [numerator denominator])]
            _ (typeA.inference ,type)
            @ meta.provenance]
           (in (analysis.tuple @ (list (,numerator_analysis @ numerator)
                                       (analysis.natural @ denominator))))))]))]

  [fraction fraction.Number fraction.normal ?code.natural analysis.natural]
  [rational rational.Number rational.normal ?code.integer analysis.integer]
  )

(the with_basic_extensions
  (-> Bundle
      Bundle)
  (|>> (with "is_type#" (..caster .Type .Type))
       (with "is?#" lux::is?)
       (with "try#" lux::try)
       (with "when_char#" lux::syntax_char_case!)
       (with "local#" ..local)
       (with "global#" ..global)
       (with "universe#" ..universe)
       (with "when#" ..when)
       (with "function#" ..function)

       (with fraction.extension ..fraction)
       (with rational.extension ..rational)))

(the with_io_extensions
  (-> Bundle
      Bundle)
  (|>> (with "log!#" (unary Text Any))
       (with "error#" (unary Text Nothing))))

(the Any_I64
  (type (I64 Any)))

(the with_i64_extensions
  (-> Bundle
      Bundle)
  (|>> (with "i64_and#" (binary Any_I64 Any_I64 I64))
       (with "i64_or#" (binary Any_I64 Any_I64 I64))
       (with "i64_xor#" (binary Any_I64 Any_I64 I64))
       (with "i64_left#" (binary Natural Any_I64 I64))
       (with "i64_right#" (binary Natural Any_I64 I64))

       (with "i64_=#" (binary Any_I64 Any_I64 Bit))
       (with "i64_+#" (binary Any_I64 Any_I64 I64))
       (with "i64_-#" (binary Any_I64 Any_I64 I64))))

(the with_integer_extensions
  (-> Bundle
      Bundle)
  (|>> (with "int_<#" (binary Integer Integer Bit))
       (with "int_*#" (binary Integer Integer Integer))
       (with "int_/#" (binary Integer Integer Integer))
       (with "int_%#" (binary Integer Integer Integer))
       
       (with "int_f64#" (unary Integer Decimal))
       (with "int_char#" (unary Integer Text))))

(the with_decimal_extensions
  (-> Bundle
      Bundle)
  (|>> (with "f64_+#" (binary Decimal Decimal Decimal))
       (with "f64_-#" (binary Decimal Decimal Decimal))
       (with "f64_*#" (binary Decimal Decimal Decimal))
       (with "f64_/#" (binary Decimal Decimal Decimal))
       (with "f64_%#" (binary Decimal Decimal Decimal))
       (with "f64_=#" (binary Decimal Decimal Bit))
       (with "f64_<#" (binary Decimal Decimal Bit))
       
       (with "f64_int#" (unary Decimal Integer))))

(the with_text_extensions
  (-> Bundle
      Bundle)
  (|>> (with "text_=#" (binary Text Text Bit))
       (with "text_<#" (binary Text Text Bit))
       (with "text_composite#" (variadic extension.synthesis Text Text))
       (with "text_index#" (trinary Natural Text Text (type (Maybe Natural))))
       (with "text_size#" (unary Text Natural))
       (with "text_char#" (binary Natural Text Natural))
       (with "text_clip#" (trinary Natural Natural Text Text))
       ))

(the lux::list
  (-> extension.Name Handler)
  (..custom
   [(?.some ?list.any)
    (.function (_ extension_name analysis archive elements)
      (if (list.empty? elements)
          (do [! phase.monad]
            [_ (typeA.inference List)
             @ meta.provenance]
            (in [@ {analysis.#Extension (..translation extension_name) (list)}]))
          (<| typeA.with_var
              (.function (_ [_ it]))
              (do [! phase.monad]
                [_ (typeA.inference (type (List it)))
                 elements (list.each' ! (|>> (analysis archive)
                                             (typeA.expecting it))
                                      elements)
                 @ meta.provenance]
                (in (|> elements
                        {analysis.#Extension (..translation extension_name)}
                        [@]))))))]))

(the lux::list_size
  (-> extension.Name Handler)
  (..custom
   [?list.any
    (.function (_ extension_name analysis archive it)
      (<| typeA.with_var
          (.function (_ [_ type_of_item]))
          (do [! phase.monad]
            [@ meta.provenance
             _ (typeA.inference Natural)]
            (|> it
                (analysis archive)
                (typeA.expecting (type (List type_of_item)))
                (by ! each (|>> list
                                {analysis.#Extension (..translation extension_name)}
                                [@]))))))]))

(the lux::list_item
  (-> extension.Name Handler)
  (..custom
   [(?.and ?list.any ?list.any)
    (.function (_ extension_name analysis archive [address it])
      (<| typeA.with_var
          (.function (_ [_ type_of_item]))
          (do [! phase.monad]
            [@ meta.provenance
             _ (typeA.inference type_of_item)
             address (<| (typeA.expecting Natural)
                         (analysis archive)
                         address)]
            (|> it
                (analysis archive)
                (typeA.expecting (type (List type_of_item)))
                (by ! each (|>> (list address)
                                {analysis.#Extension (..translation extension_name)}
                                [@]))))))]))

(the lux::list_composite
  (-> extension.Name Handler)
  (..custom
   [(?.and ?list.any ?list.any)
    (.function (_ extension_name analysis archive [prefix suffix])
      (<| typeA.with_var
          (.function (_ [_ type_of_item]))
          (do [! phase.monad]
            [@ meta.provenance
             .let [type_of_list (type (List type_of_item))
                   segment (|>> (analysis archive)
                                (typeA.expecting type_of_list))]
             _ (typeA.inference type_of_list)
             prefix (segment prefix)
             suffix (segment suffix)]
            (in (|> (list prefix suffix)
                    {analysis.#Extension (..translation extension_name)}
                    [@])))))]))

(the with_list_extensions
  (-> Bundle
      Bundle)
  (|>> (with extension/lux.list ..lux::list)
       (with extension/lux.list_size ..lux::list_size)
       (with extension/lux.list_item ..lux::list_item)
       (with extension/lux.list_composite ..lux::list_composite)
       ))

(the .public bundle
  (|> ///.empty
      with_basic_extensions
      with_io_extensions
      with_text_extensions
      with_i64_extensions
      with_integer_extensions
      with_decimal_extensions
      with_list_extensions
      ))
