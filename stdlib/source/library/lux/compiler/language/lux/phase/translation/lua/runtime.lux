... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Label Declaration
                variant
                the)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   ["[0]" function]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" hash)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)
      ["?[1]" \\projection]]
     ["[0]" sequence]]]
   ["[0]" macro (.only)
    ["[0]" syntax]
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [target
    ["_" lua (.only Location Var Computation Literal Label)]]]]
 ["[0]" ///
  ["[1][0]" reference]
  ["//[1]" ///
   ["[0]" phase]
   ["[0]" synthesis]
   ["[0]" translation (.only)
    ["[0]" script]]
   ["//[1]" /// (.only)
    [meta
     [archive (.only Output Archive)
      ["[0]" registry (.only Registry)]
      ["[0]" unit]]]
    ["@[0]" type (.only Register)]]]])

(every .public Anchor
  [Register Label])

(every .public Value
  _.Expression)

(every .public Declaration
  _.Statement)

(template.with [<name> <base>]
  [(every .public <name>
     (<base> Anchor Value Declaration))]

  [[Operation translation.Operation]
   [Phase translation.Phase]
   [Handler translation.Handler]
   [Bundle translation.Bundle]]
  )

(every .public (Expression it)
  (-> Phase Archive it
      (Operation _.Expression)))

(every .public Phase!
  (-> Phase Archive synthesis.Term
      (Operation _.Statement)))

(every .public (Statement it)
  (-> Phase! Phase Archive it
      (Operation _.Statement)))

(.the .public unit
  (_.string synthesis.unit))

(.the (flag value)
  (-> Bit
      Literal)
  (if value
      ..unit
      _.nil))

(.the .public variant_tag_field script.variant_lefts)
(.the .public variant_flag_field script.variant_right?)
(.the .public variant_value_field script.variant_choice)

(.the (variant' tag last? value)
  (-> _.Expression _.Expression _.Expression
      Literal)
  (_.table (list [..variant_tag_field tag]
                 [..variant_flag_field last?]
                 [..variant_value_field value])))

(.the .public (variant tag last? value)
  (-> Natural Bit _.Expression
      Literal)
  (variant' (_.int (.integer tag))
            (flag last?)
            value))

(.the .public left
  (-> _.Expression
      Literal)
  (..variant 0 0b))

(.the .public right
  (-> _.Expression
      Literal)
  (..variant 0 1b))

(.the .public none
  Literal
  (..left ..unit))

(.the .public some
  (-> _.Expression
      Literal)
  ..right)

(.the (feature name definition)
  (-> Var (-> Var _.Statement)
      _.Statement)
  (definition name))

(.the .public with_vars
  (syntax.macro (_ [vars (<code>.tuple (<>.some <code>.local))
                    body ?list.any])
    (monad.let [! meta.monad]
      [ids (list.complete ! (list.repeated (list.size vars) meta.seed))]
      (pure (list (` (let [(,* (|> vars
                                   (list.zipped_2 ids)
                                   (list#each (function (_ [id var])
                                                (list (code.local var)
                                                      (` (_.var (, (code.text (text "v" (%.natural id)))))))))
                                   list#conjoint))]
                       (, body))))))))

(.the module_id
  0)

(.the the
  (syntax.macro (_ [declaration (<>.or <code>.local
                                       (<code>.form (<>.and <code>.local
                                                            (<>.some <code>.local))))
                    code ?list.any])
    (monad.let meta.monad
      [runtime_id meta.seed]
      (macro.with_names ['_]
        (let [runtime (code.local (///reference.artifact [..module_id runtime_id]))
              runtime_name (` (_.var (, (code.text (code.as_text runtime)))))]
          (when declaration
            {.#Left name}
            (macro.with_names ['_]
              (let ['name (code.local name)]
                (pure (list (` (.the .public (, 'name)
                                 Var
                                 (, runtime_name)))
                            
                            (` (.the (, (code.local (text "@" name)))
                                 _.Statement
                                 (..feature (, runtime_name)
                                            (function ((, '_) (, 'name))
                                              (_.set (, 'name) (, code))))))))))
            
            {.#Right [name inputs]}
            (macro.with_names ['_]
              (let ['name (code.local name)
                    inputsC (list#each code.local inputs)
                    inputs_typesC (list#each (function.constant (` _.Expression))
                                             inputs)]
                (pure (list (` (.the .public ((, 'name) (,* inputsC))
                                 (-> (,* inputs_typesC)
                                     Computation)
                                 (_.of (list (,* inputsC)) (, runtime_name))))
                            
                            (` (.the (, (code.local (text "@" name)))
                                 _.Statement
                                 (..feature (, runtime_name)
                                            (function ((, '_) (, '_))
                                              (..with_vars [(,* inputsC)]
                                                (_.function (, '_) (list (,* inputsC))
                                                  (, code)))))))))))))))))

(.the (item index table)
  (-> _.Expression _.Expression
      Location)
  (_.item (_.+ (_.int +1) index) table))

(.the last_index
  (|>> _.length (_.- (_.int +1))))

(expansion.let [<recur> (these (all _.then
                                    (_.set (list lefts) (_.- last_index_right lefts))
                                    (_.set (list tuple) (..item last_index_right tuple))))]
  (these (the (tuple//left lefts tuple)
           (with_vars [last_index_right]
             (<| (_.while (_.boolean true))
                 (all _.then
                      (_.local/1 last_index_right (..last_index tuple))
                      (_.if (_.> lefts last_index_right)
                            ... No need for recursion
                            (_.return (..item lefts tuple))
                            ... Needs recursion
                            <recur>)))))

         (the (tuple//right lefts tuple)
           (with_vars [last_index_right right_index]
             (<| (_.while (_.boolean true))
                 (all _.then
                      (_.local/1 last_index_right (..last_index tuple))
                      (_.local/1 right_index (_.+ (_.int +1) lefts))
                      (<| (_.if (_.= last_index_right right_index)
                                (_.return (..item right_index tuple)))
                          (_.if (_.> last_index_right right_index)
                                ... Needs recursion.
                                <recur>)
                          (_.return (_.of (list tuple
                                                (_.+ (_.int +1) right_index)
                                                (_.length tuple)
                                                (_.int +1)
                                                (_.array (list)))
                                          (_.var "table.move"))))
                      ))))))

(the (sum//get sum expected::right? expected::lefts)
  (let [mismatch! (_.return _.nil)
        actual::lefts (_.its ..variant_tag_field sum)
        actual::right? (_.its ..variant_flag_field sum)
        actual::value (_.its ..variant_value_field sum)
        recur! (all _.then
                    (_.set (list expected::lefts) (|> expected::lefts
                                                      (_.- actual::lefts)
                                                      (_.- (_.int +1))))
                    (_.set (list sum) actual::value))]
    (<| (_.while (_.boolean true))
        (_.if (_.= expected::lefts actual::lefts)
              (_.if (_.= expected::right? actual::right?)
                    (_.return actual::value)
                    mismatch!))
        (_.if (_.< expected::lefts actual::lefts)
              (_.if (_.= ..unit actual::right?)
                    recur!
                    mismatch!))
        (_.if (_.= ..unit expected::right?)
              (_.return (variant' (|> actual::lefts
                                      (_.- expected::lefts)
                                      (_.- (_.int +1)))
                                  actual::right?
                                  actual::value)))
        mismatch!)))

(.the runtime//adt
  _.Statement
  (all _.then
       @tuple//left
       @tuple//right
       @sum//get
       ))

(the (lux//try risky)
  (let [closure (|> risky
                    (_.of (list ..unit))
                    _.return
                    (_.closure (list)))
        $debug (_.var "debug")
        $xpcall (_.var "xpcall")]
    (with_vars [success value]
      (_.if (_.and $debug $xpcall)
            (all _.then
                 (_.let (list success value) (_.of (list closure (_.its "traceback" $debug))
                                                   $xpcall))
                 (_.if success
                       (_.return (..right value))
                       (_.return (..left value))))
            (all _.then
                 (_.let (list success value) (_.of (list closure)
                                                   (_.var "pcall")))
                 (_.if success
                       (_.return (..right value))
                       (_.return (..left value))))))))

(the (lux//program_args raw)
  (_.if (_.= _.nil raw)
        (_.return ..none)
        (with_vars [tail head idx]
          (all _.then
               (_.let (list tail) ..none)
               (<| (_.for_step idx (_.length raw) (_.int +1) (_.int -1))
                   (_.set (list tail) (..some (_.array (list (_.item idx raw)
                                                             tail)))))
               (_.return tail)))))

(.the runtime//lux
  _.Statement
  (all _.then
       @lux//try
       @lux//program_args
       ))

(.the cap_shift
  (_.% (_.int +64)))

(the (i64//<< param subject)
  (_.return (_.bit_shl (..cap_shift param) subject)))

(the (i64//>> param subject)
  (let [mask (|> (_.int +1)
                 (_.bit_shl (_.- param (_.int +64)))
                 (_.- (_.int +1)))]
    (all _.then
         (_.set (list param) (..cap_shift param))
         (_.return (|> subject
                       (_.bit_shr param)
                       (_.bit_and mask))))))

(the (i64//division param subject)
  (with_vars [floored]
    (all _.then
         (_.local/1 floored (_.// param subject))
         (let [potentially_floored? (_.< (_.int +0) floored)
               inexact? (|> subject
                            (_.% param)
                            (_.= (_.int +0))
                            _.not)]
           (_.if (_.and potentially_floored?
                        inexact?)
                 (_.return (_.+ (_.int +1) floored))
                 (_.return floored))))))

(the (i64//remainder param subject)
  (_.return (_.- (|>  subject (..i64//division param) (_.* param))
                 subject)))

(.the runtime//i64
  _.Statement
  (all _.then
       @i64//<<
       @i64//>>
       @i64//division
       @i64//remainder
       ))

(.the (find_byte_index subject param start)
  (-> _.Expression _.Expression _.Expression
      _.Expression)
  (_.of (list subject param start (_.boolean 1b))
        (_.var "string.find")))

(.the (char_index subject byte_index)
  (-> _.Expression _.Expression
      _.Expression)
  (_.of (list subject (_.int +1) byte_index)
        (_.var "utf8.len")))

(.the (byte_index subject char_index)
  (-> _.Expression _.Expression
      _.Expression)
  (_.of (list subject (_.+ (_.int +1) char_index)) (_.var "utf8.offset")))

(.the lux_index
  (-> _.Expression
      _.Expression)
  (_.- (_.int +1)))

... TODO: Remove this once the Lua compiler becomes self-hosted.
(.the on_rembulan?
  (_.= (_.string "Lua 5.3")
       (_.var "_VERSION")))

(the (text//index subject param start)
  (expansion.let [<rembulan> (all _.then
                                  (_.local/1 byte_index (|> start
                                                            (_.+ (_.int +1))
                                                            (..find_byte_index subject param)))
                                  (_.if (_.= _.nil byte_index)
                                        (_.return ..none)
                                        (_.return (..some (..lux_index byte_index)))))
                  <normal> (all _.then
                                (_.local/1 byte_index (|> start
                                                          (..byte_index subject)
                                                          (..find_byte_index subject param)))
                                (_.if (_.= _.nil byte_index)
                                      (_.return ..none)
                                      (_.return (..some (|> byte_index
                                                            (..char_index subject)
                                                            ..lux_index)))))]
    (with_vars [byte_index]
      (for .lua <normal>
           (_.if ..on_rembulan?
                 <rembulan>
                 <normal>)))))

(the (text//clip text offset length)
  (expansion.let [<rembulan> (_.return (_.of (list text (_.+ (_.int +1) offset) (_.+ offset length))
                                             (_.var "string.sub")))
                  <normal> (_.return (_.of (list text
                                                 (..byte_index text offset)
                                                 (|> (_.+ offset length)
                                                     ... (_.+ (_.int +1))
                                                     (..byte_index text)
                                                     (_.- (_.int +1))))
                                           (_.var "string.sub")))]
    (for .lua <normal>
         (_.if ..on_rembulan?
               <rembulan>
               <normal>))))

(the (text//size subject)
  (expansion.let [<rembulan> (_.return (_.of (list subject) (_.var "string.len")))
                  <normal> (_.return (_.of (list subject) (_.var "utf8.len")))]
    (for .lua <normal>
         (_.if ..on_rembulan?
               <rembulan>
               <normal>))))

(the (text//char idx text)
  (expansion.let [<rembulan> (with_vars [char]
                               (all _.then
                                    (_.local/1 char (_.of (list text idx)
                                                          (_.var "string.byte")))
                                    (_.if (_.= _.nil char)
                                          (_.; (_.error/1 (_.string "[Lux Error] Cannot get char from text.")))
                                          (_.return char))))
                  <normal> (with_vars [offset char]
                             (all _.then
                                  (_.local/1 offset (_.of (list text idx) (_.var "utf8.offset")))
                                  (_.if (_.= _.nil offset)
                                        (_.; (_.error/1 (_.string "[Lux Error] Cannot get char from text.")))
                                        (_.return (_.of (list text offset) (_.var "utf8.codepoint"))))))]
    (for .lua <normal>
         (_.if ..on_rembulan?
               <rembulan>
               <normal>))))

(.the runtime//text
  _.Statement
  (all _.then
       @text//index
       @text//clip
       @text//size
       @text//char
       ))

(the (array//write idx value array)
  (all _.then
       (_.set (list (..item idx array)) value)
       (_.return array)))

(.the runtime//array
  _.Statement
  (all _.then
       @array//write
       ))

(.the full
  _.Statement
  (all _.then
       ..runtime//adt
       ..runtime//lux
       ..runtime//i64
       ..runtime//text
       ..runtime//array
       ))

(.the .public translate
  (Operation [Registry Output])
  (monad.let phase.monad
    [_ (translation.execute! ..full)
     _ (translation.save! ..module_id {.#None} ..full)]
    (pure [(|> registry.empty
               (registry.resource true unit.none)
               product.right)
           (sequence.sequence [..module_id
                               {.#None}
                               (|> ..full
                                   _.code
                                   (by utf8.binary as))])])))
