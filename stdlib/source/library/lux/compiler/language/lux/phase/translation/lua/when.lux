... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except when exec let if its
                or and)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix monoid)]
     ["[0]" set]]]
   [macro
    ["[0]" template]]
   [target
    ["_" lua (.only Var)]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Phase! Expression Statement)]
  ["[1][0]" reference]
  ["[1][0]" primitive]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    ["[1][0]" synthesis
     ["[1]/[0]" when]]
    ["/[1]" //
     ["[0]" phase (.use "[1]#[0]" monad)]
     ["[1][0]" translation]
     ["[0]" synthesis (.only Path)
      [access
       ["[0]" member (.only Member)]]]
     ["//[1]" ///
      [reference
       [register (.only Register)]
       ["[1][0]" variable]]
      [meta
       [archive (.only Archive)]]]]]]])

(the .public register
  (-> Register
      Var)
  (|>> (///reference.local //reference.system) as_expected))

(the .public capture
  (-> Register
      Var)
  (|>> (///reference.foreign //reference.system) as_expected))

(the .public (exec next archive it)
  (Expression synthesis.Exec)
  (do [! phase.monad]
    [.let [[tail after] (synthesis.flat_exec (.its synthesis.#exec_after it))]
     all_before (list.each' ! (next archive)
                            (list#composite (list (.its synthesis.#exec_before it))
                                            tail))
     after (next archive after)]
    (pure (_.item (_.int +2)
                  (_.array (list (_.array all_before)
                                 after))))))

(the .public (exec! statement next archive [this that])
  (Statement synthesis.Exec)
  (do [! phase.monad]
    [this (next archive this)
     that (statement next archive that)
     $dummy (by ! each _.var (/////translation.name "_exec"))]
    (pure (all _.then
               (_.set (list $dummy) this)
               that))))

(the .public (let next archive [head_binding head_value body])
  (Expression synthesis.Let)
  (do [! phase.monad]
    [.let [[tail body] (synthesis.flat_let body)]
     bindings (list.each' ! (function (_ [binding value])
                              (phase#each (_.local/1 (..register binding))
                                          (next archive value)))
                          (list#composite (list [head_binding head_value])
                                          tail))
     body (next archive body)]
    ... TODO: Find some way to do 'let' without paying the price of the closure.
    (pure (<| (_.apply (list))
              (_.closure (list))
              (list#mix _.then
                        (_.return body)
                        (list.reversed bindings))))))

(the .public (let! statement next archive [register valueS bodyS])
  (Statement synthesis.Let)
  (do phase.monad
    [valueO (next archive valueS)
     bodyO (statement next archive bodyS)]
    (pure (all _.then
               (_.local/1 (..register register) valueO)
               bodyO))))

(the (projection it)
  (.if (.its member.#right? it)
       (//runtime.tuple//right (_.int (.integer (.its member.#lefts it))))
       (//runtime.tuple//left (_.int (.integer (.its member.#lefts it))))))

(the .public (its next archive [pathP valueS])
  (Expression synthesis.Its)
  (do phase.monad
    [valueO (next archive valueS)]
    (pure (list#mix ..projection
                    valueO
                    pathP))))

(the .public (if next archive [testS thenS elseS])
  (Expression synthesis.If)
  (do phase.monad
    [testO (next archive testS)
     thenO (next archive thenS)
     elseO (next archive elseS)]
    (pure (|> (_.if testO
                    (_.return thenO)
                    (_.return elseO))
              (_.closure (list))
              (_.apply (list))))))

(the .public (if! statement next archive [testS thenS elseS])
  (Statement synthesis.If)
  (do phase.monad
    [testO (next archive testS)
     thenO (statement next archive thenS)
     elseO (statement next archive elseS)]
    (pure (_.if testO
                thenO
                elseO))))

(the @savepoint (_.var "lux_pm_savepoint"))
(the @cursor (_.var "lux_pm_cursor"))
(the @temp (_.var "lux_pm_temp"))

(the (push! value)
  (-> _.Expression
      _.Statement)
  (_.; (|> (_.var "table.insert") (_.apply (list @cursor value)))))

(the peek_and_pop
  _.Expression
  (|> (_.var "table.remove") (_.apply (list @cursor))))

(the pop!
  _.Statement
  (_.; ..peek_and_pop))

(the peek
  _.Expression
  (_.item (_.length @cursor) @cursor))

(the save!
  _.Statement
  (_.; (|> (_.var "table.insert")
           (_.apply (list @savepoint
                          (_.apply (list @cursor
                                         (_.int +1)
                                         (_.length @cursor)
                                         (_.int +1)
                                         (_.table (list)))
                                   (_.var "table.move")))))))

(the restore!
  _.Statement
  (_.set (list @cursor) (|> (_.var "table.remove") (_.apply (list @savepoint)))))

(the fail! _.break)

(template.with [<name> <flag>]
  [(the (<name> simple? idx)
     (-> Bit Natural
         _.Statement)
     (all _.then
          (_.set (list @temp) (//runtime.sum//get ..peek <flag>
                                                  (|> idx .integer _.int)))
          (.if simple?
               (_.when (_.= _.nil @temp)
                 fail!)
               (_.if (_.= _.nil @temp)
                     fail!
                     (..push! @temp)))))]

  [left_choice  _.nil]
  [right_choice //runtime.unit]
  )

(the (alternation pre! post!)
  (-> _.Statement _.Statement
      _.Statement)
  (all _.then
       (_.while (_.boolean true)
                (all _.then
                     ..save!
                     pre!))
       (all _.then
            ..restore!
            post!)))

(the (pattern_matching' statement next archive)
  (-> Phase! Phase Archive Path
      (Operation _.Statement))
  (function (again pathP)
    (`` (.when pathP
          {synthesis.#Then bodyS}
          (statement next archive bodyS)

          {synthesis.#Pop}
          (phase#pure ..pop!)

          {synthesis.#Bind register}
          (phase#pure (_.local/1 (..register register) ..peek))

          {synthesis.#Bit_Fork when thenP elseP}
          (do [! phase.monad]
            [then! (again thenP)
             else! (.when elseP
                     {.#Some elseP}
                     (again elseP)

                     {.#None}
                     (pure ..fail!))]
            (pure (.if when
                       (_.if ..peek
                             then!
                             else!)
                       (_.if ..peek
                             else!
                             then!))))

          (,, (template.with [<tag> <injection>]
                [{<tag> [head tail]}
                 (do [! phase.monad]
                   ['input (phase#each _.var (/////translation.name "input"))
                    clauses (list.each' ! (function (_ [match then])
                                            (do !
                                              [then! (again then)]
                                              (pure [(_.= (<injection> match)
                                                          'input)
                                                     then!])))
                                        (list#composite (list head) tail))]
                   (pure (all _.then
                              (_.local/1 'input ..peek)
                              (list#mix (function (_ [when then!] else!)
                                          (_.if when then! else!))
                                        ..fail!
                                        (list.reversed clauses)))))]

                [synthesis.#I64_Fork //primitive.i64]
                [synthesis.#F64_Fork //primitive.f64]
                [synthesis.#Text_Fork //primitive.text]))

          (,, (template.with [<complex> <simple> <choice>]
                [(<complex> idx)
                 (phase#pure (<choice> false idx))

                 (<simple> idx nextP)
                 (phase#each (_.then (<choice> true idx)) (again nextP))]

                [synthesis.side/left  synthesis.simple_left_side  ..left_choice]
                [synthesis.side/right synthesis.simple_right_side ..right_choice]))

          (synthesis.member/left 0)
          (phase#pure (|> ..peek (_.item (_.int +1)) ..push!))
          
          (,, (template.with [<pm> <getter>]
                [(<pm> lefts)
                 (phase#pure (|> ..peek (<getter> (_.int (.integer lefts))) ..push!))]

                [synthesis.member/left  //runtime.tuple//left]
                [synthesis.member/right //runtime.tuple//right]))

          {synthesis.#List size}
          (phase#pure (_.when (_.not (_.= (_.int (.integer size))
                                          (_.length ..peek)))
                        ..fail!))

          (synthesis.item index)
          (phase#pure (..push! (_.item (_.int (.integer (++ index))) ..peek)))

          (synthesis.!bind_top register thenP)
          (do phase.monad
            [then! (again thenP)]
            (phase#pure (all _.then
                             (_.local/1 (..register register) ..peek_and_pop)
                             then!)))

          (,, (template.with [<tag> <combinator>]
                [(<tag> preP postP)
                 (do phase.monad
                   [pre! (again preP)
                    post! (again postP)]
                   (pure (<combinator> pre! post!)))]

                [synthesis.path/seq _.then]
                [synthesis.path/alt ..alternation]))))))

(the (pattern_matching statement next archive pathP)
  (-> Phase! Phase Archive Path
      (Operation _.Statement))
  (do phase.monad
    [pattern_matching! (pattern_matching' statement next archive pathP)]
    (pure (all _.then
               (_.while (_.boolean true)
                        pattern_matching!)
               (_.; (|> (_.var "error") (_.apply (list (_.string ////synthesis/when.pattern_matching_error)))))))))

(the .public dependencies
  (-> Path
      (List Var))
  (|>> ////synthesis/when.storage
       (.its ////synthesis/when.#dependencies)
       set.as_list
       (list#each (function (_ variable)
                    (.when variable
                      {///////variable.#Local register}
                      (..register register)
                      
                      {///////variable.#Foreign register}
                      (..capture register))))))

(the .public (when! statement next archive [valueS pathP])
  (Statement [synthesis.Term Path])
  (do phase.monad
    [start (next archive valueS)
     pattern_matching! (pattern_matching statement next archive pathP)]
    (pure (all _.then
               (_.local (list @temp))
               (_.local/1 @cursor (_.array (list start)))
               (_.local/1 @savepoint (_.array (list)))
               pattern_matching!))))

(the .public (when statement next archive [valueS pathP])
  (-> Phase!
      (Expression [synthesis.Term Path]))
  (|> [valueS pathP]
      (..when! statement next archive)
      (phase#each (|>> (_.closure (list))
                       (_.apply (list))))))

(the .public (multi_let! statement expression archive [input bindings body])
  (Statement synthesis.Multi_Let)
  (do phase.monad
    [input (expression archive input)
     body (statement expression archive body)
     'tuple (phase#each _.var (/////translation.name "tuple"))]
    (pure (all _.then
               (list#mix (function (_ [register member] left)
                           (all _.then
                                left
                                (_.local/1 (..register register) (..projection member 'tuple))))
                         (_.local/1 'tuple input)
                         bindings)
               body))))

(the .public (multi_let statement expression archive)
  (-> Phase!
      (Expression synthesis.Multi_Let))
  (|>> (multi_let! statement expression archive)
       (phase#each (|>> (_.closure (list))
                        (_.apply (list))))))

(template.with [,lux ,host]
  [(the .public (,lux expression archive [parameter subject])
     (Expression [synthesis.Term synthesis.Term])
     (do phase.monad
       [parameter (expression archive parameter)
        subject (expression archive subject)]
       (pure (,host parameter subject))))]

  [or _.or]
  [and _.and]
  )

(template.with [,expression ,statement ,type ,injection]
  [(the .public (,statement statement expression archive [input clauses else])
     (Statement [synthesis.Term (List [,type synthesis.Term]) synthesis.Term])
     (do [! phase.monad]
       [input (expression archive input)
        'input (phase#each _.var (/////translation.name "input"))
        clauses (list.each' ! (function (_ [when then])
                                (by ! each (|>> [when]) (statement expression archive then)))
                            clauses)
        else (statement expression archive else)]
       (pure (all _.then
                  (_.local/1 'input input)
                  (list#mix (function (_ [when then] else)
                              (_.if (_.= (,injection when)
                                         'input)
                                    then
                                    else))
                            else
                            (list.reversed clauses))))))

   (the .public (,expression statement expression archive)
     (-> Phase!
         (Expression [synthesis.Term (List [,type synthesis.Term]) synthesis.Term]))
     (|>> (,statement statement expression archive)
          (phase#each (|>> (_.closure (list))
                           (_.apply (list))))))]

  [when_i64 when_i64! I64 //primitive.i64]
  [when_f64 when_f64! F64 //primitive.f64]
  [when_text when_text! Text //primitive.text]
  )
