... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Declaration
                ++ variant
                the)
   [abstract
    [monad (.only do)]
    ["<>" projection]]
   ["[0]" function]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" hash)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)
      ["?[1]" \\projection]]
     ["[0]" stack (.use "[1]#[0]" functor)]
     ["[0]" sequence]]]
   [math
    [number (.only hex)
     ["d" decimal]
     ["[0]" i64]]]
   ["[0]" macro (.only)
    ["[0]" syntax]
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" version]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [target
    ["_" python (.only SVar Computation Literal)]]]]
 ["[0]" ///
  ["[1][0]" reference]
  ["//[1]" ///
   ["[0]" phase]
   ["[0]" synthesis]
   ["[1][0]" translation]
   [///
    [reference
     [register (.only Register)]]
    [meta
     [archive (.only Output Archive)
      ["[0]" registry (.only Registry)]
      ["[0]" unit]]]]]])

(every .public Anchor
  Register)

(every .public Value
  _.Expression)

(every .public Declaration
  _.Statement)

(template.with [<name> <base>]
  [(every .public <name>
     (<base> Anchor Value Declaration))]

  [Operation /////translation.Operation]
  [Phase /////translation.Phase]
  [Handler /////translation.Handler]
  [Bundle /////translation.Bundle]
  )

(every .public Phase!
  (-> Phase Archive synthesis.Term
      (Operation _.Statement)))

(every .public (Statement it)
  (-> Phase! Phase Archive it
      (Operation _.Statement)))

(every .public (Expression it)
  (-> Phase Archive it
      (Operation _.Expression)))

(.the prefix
  "LuxRuntime")

(.the .public unit
  (_.unicode synthesis.unit))

(.the (flag value)
  (-> Bit
      Literal)
  (if value
      ..unit
      _.none))

(.the (variant' tag last? value)
  (-> _.Expression _.Expression _.Expression
      Literal)
  (_.tuple (list tag last? value)))

(.the .public (variant tag last? value)
  (-> Natural Bit _.Expression
      Literal)
  (variant' (_.int (.integer tag))
            (flag last?)
            value))

(.the .public left
  (-> _.Expression
      Literal)
  (..variant 0 #0))

(.the .public right
  (-> _.Expression
      Literal)
  (..variant 0 #1))

(.the .public none
  Literal
  (..left ..unit))

(.the .public some
  (-> _.Expression
      Literal)
  ..right)

(.the (runtime_name name)
  (-> Text
      SVar)
  (let [name (text ..prefix
                   "_" (%.natural version.latest)
                   "_" (%.natural (text#hash name)))]
    (_.var name)))

(.the (feature name definition)
  (-> SVar (-> SVar _.Statement)
      _.Statement)
  (definition name))

(.the .public with_vars
  (syntax.macro (_ [vars (<code>.tuple (<>.some <code>.local))
                    body ?list.any])
    (do [! meta.monad]
      [ids (list.complete ! (list.repeated (list.size vars) meta.seed))]
      (in (list (` (let [(,* (|> vars
                                 (list.zipped_2 ids)
                                 (list#each (function (_ [id var])
                                              (list (code.local var)
                                                    (` (_.var (, (code.text (text "v" (%.natural id)))))))))
                                 list#conjoint))]
                     (, body))))))))

(.the the
  (syntax.macro (_ [declaration (<>.or <code>.local
                                       (<code>.form (<>.and <code>.local
                                                            (<>.some <code>.local))))
                    code ?list.any])
    (when declaration
      {.#Left name}
      (macro.with_names ['_]
        (let [nameC (code.local name)
              code_nameC (code.local (text "@" name))
              runtime_nameC (` (runtime_name (, (code.text name))))]
          (in (list (` (.the .public (, nameC) SVar (, runtime_nameC)))
                    (` (.the (, code_nameC)
                         _.Statement
                         (..feature (, runtime_nameC)
                                    (function ((, '_) (, '_))
                                      (_.set (list (, '_)) (, code))))))))))
      
      {.#Right [name inputs]}
      (macro.with_names ['_]
        (let [nameC (code.local name)
              code_nameC (code.local (text "@" name))
              runtime_nameC (` (runtime_name (, (code.text name))))
              inputsC (list#each code.local inputs)
              inputs_typesC (list#each (function.constant (` _.Expression))
                                       inputs)]
          (in (list (` (.the .public ((, nameC) (,* inputsC))
                         (-> (,* inputs_typesC)
                             Computation)
                         (_.apply (list (,* inputsC)) (, runtime_nameC))))
                    (` (.the (, code_nameC)
                         _.Statement
                         (..feature (, runtime_nameC)
                                    (function ((, '_) (, '_))
                                      (..with_vars [(,* inputsC)]
                                        (_.def (, '_) (list (,* inputsC))
                                               (, code))))))))))))))

(the (lux::try op)
  (with_vars [exception]
    (_.try (_.return (..right (_.apply (list ..unit) op)))
           (list [(list "Exception") exception
                  (_.return (..left (_.do "join"
                                      (list (_.do "format_exception_only"
                                              (list (_.its "__class__" exception)
                                                    exception)
                                              (_.__import__/1 (_.string "traceback"))))
                                      (_.string ""))))]))))

(the (lux::program_args program_args)
  (with_vars [inputs value]
    (all _.then
         (_.set (list inputs) ..none)
         (<| (_.for_in value (_.apply (list program_args) (_.var "reversed")))
             (_.set (list inputs)
                    (..some (_.list (list value inputs)))))
         (_.return inputs))))

(the (lux::exec code globals)
  (all _.then
       (_.exec {.#Some globals} code)
       (_.return ..unit)))

(.the runtime//lux
  _.Statement
  (all _.then
       @lux::try
       @lux::program_args
       @lux::exec
       ))

(the (io::log! message)
  (all _.then
       (_.print message)
       (|> (_.__import__/1 (_.unicode "sys"))
           (_.its "stdout")
           (_.do "flush" (list))
           _.;)
       (_.return ..unit)))

(the (io::throw! message)
  (_.raise (_.Exception/1 (|> message
                              (_.+ (_.string text.\n))
                              (_.+ (_.do "join"
                                     (list (_.do "format_stack" (list)
                                             (_.__import__/1 (_.string "traceback"))))
                                     (_.string "")))))))

(.the runtime//io
  _.Statement
  (all _.then
       @io::log!
       @io::throw!
       ))

(.the last_index
  (|>> _.len/1 (_.- (_.int +1))))

(expansion.let [<recur> (these (all _.then
                                    (_.set (list lefts) (_.- last_index_right lefts))
                                    (_.set (list tuple) (_.item last_index_right tuple))))]
  (these (the (tuple::left lefts tuple)
           (with_vars [last_index_right]
             (_.while (_.bool true)
                      (all _.then
                           (_.set (list last_index_right) (..last_index tuple))
                           (_.if (_.> lefts last_index_right)
                                 ... No need for recursion
                                 (_.return (_.item lefts tuple))
                                 ... Needs recursion
                                 <recur>))
                      {.#None})))

         (the (tuple::right lefts tuple)
           (with_vars [last_index_right right_index]
             (_.while (_.bool true)
                      (all _.then
                           (_.set (list last_index_right) (..last_index tuple))
                           (_.set (list right_index) (_.+ (_.int +1) lefts))
                           (<| (_.if (_.= last_index_right right_index)
                                     (_.return (_.item right_index tuple)))
                               (_.if (_.> last_index_right right_index)
                                     ... Needs recursion.
                                     <recur>)
                               (_.return (_.slice_from right_index tuple))))
                      {.#None})))))

(the (sum::get sum expected::right? expected::lefts)
  (let [mismatch! (_.return _.none)
        actual::lefts (_.item (_.int +0) sum)
        actual::right? (_.item (_.int +1) sum)
        actual::value (_.item (_.int +2) sum)
        recur! (all _.then
                    (_.set (list expected::lefts) (|> expected::lefts
                                                      (_.- actual::lefts)
                                                      (_.- (_.int +1))))
                    (_.set (list sum) actual::value))]
    (_.while (_.bool true)
             (<| (_.if (_.= expected::lefts actual::lefts)
                       (_.if (_.= expected::right? actual::right?)
                             (_.return actual::value)
                             mismatch!))
                 (_.if (_.< expected::lefts actual::lefts)
                       (_.if (_.= ..unit actual::right?)
                             recur!
                             mismatch!))
                 (_.if (_.= ..unit expected::right?)
                       (_.return (variant' (|> actual::lefts
                                               (_.- expected::lefts)
                                               (_.- (_.int +1)))
                                           actual::right?
                                           actual::value)))
                 mismatch!)
             {.#None})))

(.the runtime//adt
  _.Statement
  (all _.then
       @tuple::left
       @tuple::right
       @sum::get
       ))

(.the i64::+limit (_.manual "+0x7FFFFFFFFFFFFFFF"))
(.the i64::-limit (_.manual "-0x8000000000000000"))
(.the i64::+iteration (_.manual "+0x10000000000000000"))
(.the i64::-iteration (_.manual "-0x10000000000000000"))
(.the i64::+cap (_.manual "+0x8000000000000000"))
(.the i64::-cap (_.manual "-0x8000000000000001"))

(the (i64::64 input)
  (with_vars [temp]
    (`` (<| (,, (template.with [<scenario> <iteration> <cap> <entrance>]
                  [(_.if (|> input <scenario>)
                         (all _.then
                              (_.set (list temp) (_.% <iteration> input))
                              (_.return (_.? (|> temp <scenario>)
                                             (|> temp (_.- <cap>) (_.+ <entrance>))
                                             temp))))]

                  [(_.> ..i64::+limit) ..i64::+iteration ..i64::+cap ..i64::-limit]
                  [(_.< ..i64::-limit) ..i64::-iteration ..i64::-cap ..i64::+limit]
                  ))
            (_.return (for .python input
                           ... This +- is only necessary to guarantee that values within the limits are always longs in Python 2
                           (|> input (_.+ ..i64::+limit) (_.- ..i64::+limit))))))))

(.the as_natural
  (_.% ..i64::+iteration))

(the (i64::left_shifted param subject)
  (_.return (|> subject
                (_.bit_shl (_.% (_.int +64) param))
                ..i64::64)))

(the (i64::right_shifted param subject)
  (all _.then
       (_.set (list param) (_.% (_.int +64) param))
       (_.return (_.? (_.= (_.int +0) param)
                      subject
                      (|> subject
                          ..as_natural
                          (_.bit_shr param))))))

(the (i64#/ param subject)
  (with_vars [floored]
    (all _.then
         (_.set (list floored) (_.// param subject))
         (_.return (let [potentially_floored? (_.< (_.int +0) floored)
                         inexact? (|> subject
                                      (_.% param)
                                      (_.= (_.int +0))
                                      _.not)]
                     (<| (_.? (_.and potentially_floored?
                                     inexact?)
                              (_.+ (_.int +1) floored))
                         (_.? (_.= (_.manual "+9223372036854775808")
                                   floored)
                              (_.manual "-9223372036854775808"))
                         floored))))))

(the (i64::remainder param subject)
  (_.return (_.- (|>  subject (..i64#/ param) (_.* param))
                 subject)))

(template.with [<runtime> <host>]
  [(the (<runtime> left right)
     (_.return (..i64::64 (<host> (..as_natural left) (..as_natural right)))))]

  [i64::and _.bit_and]
  [i64::or _.bit_or]
  [i64::xor _.bit_xor]
  )

(.the python_version
  _.Expression
  (|> (_.__import__/1 (_.unicode "sys"))
      (_.its "version_info")
      (_.its "major")))

(the (i64::char value)
  (_.return (_.? (_.= (_.int +3) ..python_version)
                 (_.chr/1 value)
                 (_.unichr/1 value))))

(.the runtime//i64
  _.Statement
  (all _.then
       @i64::64
       @i64::left_shifted
       @i64::right_shifted
       @i64#/
       @i64::remainder
       @i64::and
       @i64::or
       @i64::xor
       @i64::char
       ))

(the (f64::/ parameter subject)
  (_.return (_.? (_.= (_.float +0.0) parameter)
                 (<| (_.? (_.> (_.float +0.0) subject)
                          (_.float d.positive_infinity))
                     (_.? (_.< (_.float +0.0) subject)
                          (_.float d.negative_infinity))
                     (_.float d.not_a_number))
                 (_./ parameter subject))))

(.the runtime//f64
  _.Statement
  (all _.then
       @f64::/
       ))

(the (text::index start param subject)
  (with_vars [idx]
    (all _.then
         (_.set (list idx) (|> subject (_.do "find" (list param start))))
         (_.return (_.? (_.= (_.int -1) idx)
                        ..none
                        (..some (..i64::64 idx)))))))

(.the ++
  (|>> (_.+ (_.int +1))))

(.the (within? top value)
  (-> _.Expression _.Expression
      Computation)
  (_.and (|> value (_.>= (_.int +0)))
         (|> value (_.< top))))

(the (text::clip @offset @length @text)
  (_.return (|> @text (_.slice @offset (_.+ @offset @length)))))

(the (text::char idx text)
  (_.if (|> idx (within? (_.len/1 text)))
        (_.return (|> text (_.slice idx (..++ idx)) _.ord/1 ..i64::64))
        (_.raise (_.Exception/1 (_.unicode "[Lux Error] Cannot get char from text.")))))

(.the runtime//text
  _.Statement
  (all _.then
       @text::index
       @text::clip
       @text::char
       ))

(the (array::write idx value array)
  (all _.then
       (_.set (list (_.item idx array)) value)
       (_.return array)))

(.the runtime//array
  _.Statement
  (all _.then
       @array::write
       ))

(.the full_runtime
  _.Statement
  (all _.then
       runtime//lux
       runtime//io
       runtime//adt
       runtime//i64
       runtime//f64
       runtime//text
       runtime//array
       ))

(.the module_id
  0)

(.the .public translate
  (Operation [Registry Output])
  (do phase.monad
    [_ (/////translation.execute! ..full_runtime)
     _ (/////translation.save! ..module_id {.#None} ..full_runtime)]
    (in [(|> registry.empty
             (registry.resource true unit.none)
             product.right)
         (sequence.sequence [..module_id
                             {.#None}
                             (|> ..full_runtime
                                 _.code
                                 (by utf8.binary as))])])))
