... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [data
    [collection
     ["[0]" dictionary]
     ["[0]" list (.use "[1]:[0]" monoid)
      ["?[1]" \\projection]]]]
   ["[0]" type (.only)
    ["[0]" check]]
   ["[0]" meta (.only)
    ["[0]" code
     ["<[1]>" \\projection]]]
   [target
    ["_" python]]]]
 ["[0]" //
  ["/" lux (.only custom)]
  ["/[1]" // (.only)
   [///
    ["[0]" phase]
    ["[0]" analysis (.only Operation Phase Handler Bundle)
     ["[1]/[0]" type]]]]])

(the None
  (for .python ffi.None
       Any))

(the Object
  (for .python (type (ffi.Object Any))
       Any))

(the Function
  (for .python ffi.Function
       Any))

(the Dict
  (for .python ffi.Dict
       Any))

(the object::get
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text ?list.any)
    (function (_ extension phase archive [fieldC objectC])
      (monad.let phase.monad
        [objectA (analysis/type.with ..Object
                   (phase archive objectC))
         _ (analysis/type.inference .Any)
         @ analysis.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list (analysis.text @ fieldC)
                                            objectA)}])))]))

(the object::do
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text ?list.any (<code>.tuple (<>.some ?list.any)))
    (function (_ extension phase archive [methodC objectC inputsC])
      (monad.let [! phase.monad]
        [objectA (analysis/type.with ..Object
                   (phase archive objectC))
         inputsA (list.each' ! (|>> (phase archive) (analysis/type.with Any))
                             inputsC)
         _ (analysis/type.inference .Any)
         @ analysis.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list:composite (list (analysis.text @ methodC)
                                                            objectA)
                                                      inputsA)}])))]))

(the with_object_extensions
  (-> Bundle Bundle)
  (|>> (/.with "python_object_get#" object::get)
       (/.with "python_object_do#" object::do)
       (/.with "python_object_none#" (/.nullary ..None))
       (/.with "python_object_none?#" (/.unary Any Bit))
       ))

(the python::constant
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (monad.let phase.monad
        [_ (analysis/type.inference Any)
         @ analysis.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list (analysis.text @ name))}])))]))

(the python::import
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (monad.let phase.monad
        [_ (analysis/type.inference ..Object)
         @ analysis.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list (analysis.text @ name))}])))]))

(the python::of
  (-> Text Handler)
  (custom
   [(all <>.and ?list.any (<code>.tuple (<>.some ?list.any)))
    (function (_ extension phase archive [abstractionC inputsC])
      (monad.let [! phase.monad]
        [abstractionA (analysis/type.with ..Function
                        (phase archive abstractionC))
         inputsA (list.each' ! (|>> (phase archive) (analysis/type.with Any))
                             inputsC)
         _ (analysis/type.inference Any)
         @ analysis.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list:composite (list abstractionA) inputsA)}])))]))

(the python::function
  (-> Text Handler)
  (custom
   [(all <>.and <code>.natural ?list.any)
    (function (_ extension phase archive [arity abstractionC])
      (monad.let phase.monad
        [.let [inputT (type.tuple (list.repeated arity Any))]
         abstractionA (analysis/type.with (-> inputT Any)
                        (phase archive abstractionC))
         _ (analysis/type.inference ..Function)
         @ analysis.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list (analysis.natural @ arity)
                                            abstractionA)}])))]))

(the python::exec
  (-> Text Handler)
  (custom
   [(all <>.and ?list.any ?list.any)
    (function (_ extension phase archive [codeC globalsC])
      (monad.let phase.monad
        [codeA (analysis/type.with Text
                 (phase archive codeC))
         globalsA (analysis/type.with ..Dict
                    (phase archive globalsC))
         _ (analysis/type.inference .Any)
         @ analysis.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list codeA globalsA)}])))]))

(the .public bundle
  Bundle
  (|> ///.empty
      with_object_extensions

      (/.with "python_constant#" python::constant)
      (/.with "python_import#" python::import)
      (/.with "python_of#" python::of)
      (/.with "python_function#" python::function)
      (/.with "python_exec#" python::exec)
      ))
