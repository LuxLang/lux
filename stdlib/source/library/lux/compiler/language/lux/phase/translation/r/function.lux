... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except function)
   [abstract
    [monad (.only do)]]
   [control
    pipe]
   [data
    ["[0]" product]
    [text
     ["%" \\injection]]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor mix)]]]
   [target
    ["_" r (.only SVar)]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Expression)]
  ["[1][0]" reference]
  ["[1][0]" when]
  ["/[1]" //
   ["[1][0]" reference]
   ["//[1]" ///
    [analysis (.only Variant Tuple Abstraction Application Analysis)]
    [synthesis (.only Synthesis)]
    ["[1][0]" translation (.only Context)]
    ["//[1]" ///
     [arity (.only Arity)]
     ["[1][0]" phase (.use "[1]#[0]" monad)]
     [reference
      [variable (.only Register Variable)]]
     [meta
      [archive
       ["[0]" artifact]]]]]]])

(the .public (reification expression archive [functionS argsS+])
  (Expression (Application Synthesis))
  (do [! ///////phase.monad]
    [functionO (expression archive functionS)
     argsO+ (stack.each' ! (expression archive) argsS+)]
    (in (_.apply argsO+ functionO))))

(the (with_closure function_id $function inits function_definition)
  (-> artifact.ID SVar (Stack _.Expression) _.Expression (Operation _.Expression))
  (when inits
    {.#Empty}
    (do ///////phase.monad
      [_ (/////translation.execute! function_definition)
       _ (/////translation.save! (%.natural function_id)
                                 function_definition)]
      (in $function))

    _
    (do ///////phase.monad
      [.let [closure_definition (_.set! $function
                                        (_.function (|> inits
                                                        stack.size
                                                        stack.indices
                                                        (stack#each //when.capture))
                                          (all _.then
                                               function_definition
                                               $function)))]
       _ (/////translation.execute! closure_definition)
       _ (/////translation.save! (%.natural function_id) closure_definition)]
      (in (_.apply inits $function)))))

(the $curried (_.var "curried"))
(the $missing (_.var "missing"))

(the (input_declaration register)
  (-> Register _.Expression)
  (_.set! (|> register ++ //when.register)
          (|> $curried (_.item (|> register ++ .integer _.int)))))

(the .public (function expression archive [environment arity bodyS])
  (Expression (Abstraction Synthesis))
  (do [! ///////phase.monad]
    [[[function_module function_artifact] bodyO] (/////translation.with_new_context archive
                                                   (do !
                                                     [$self (by ! each (|>> ///reference.artifact _.var)
                                                                (/////translation.context archive))]
                                                     (/////translation.with_anchor $self
                                                       (expression archive bodyS))))
     closureO+ (stack.each' ! (expression archive) environment)
     .let [arityO (|> arity .integer _.int)
           $num_args (_.var "num_args")
           $self (_.var (///reference.artifact [function_module function_artifact]))
           apply_poly (.function (_ args func)
                        (_.apply (stack func args) (_.var "do.call")))]]
    (with_closure function_artifact $self closureO+
      (_.set! $self (_.function (stack _.var_args)
                      (all _.then
                           (_.set! $curried (_.list (stack _.var_args)))
                           (_.set! $num_args (_.length $curried))
                           (_.cond (stack [(|> $num_args (_.= arityO))
                                           (all _.then
                                                (_.set! (//when.register 0) $self)
                                                (|> arity
                                                    stack.indices
                                                    (stack#each input_declaration)
                                                    (stack#mix _.then bodyO)))]
                                          [(|> $num_args (_.> arityO))
                                           (let [arity_args (_.slice (_.int +1) arityO $curried)
                                                 output_func_args (_.slice (|> arityO (_.+ (_.int +1)))
                                                                           $num_args
                                                                           $curried)]
                                             (|> $self
                                                 (apply_poly arity_args)
                                                 (apply_poly output_func_args)))])
                                   ... (|> $num_args (_.< arityO))
                                   (let [$missing (_.var "missing")]
                                     (_.function (stack _.var_args)
                                       (all _.then
                                            (_.set! $missing (_.list (stack _.var_args)))
                                            (|> $self
                                                (apply_poly (_.apply (stack $curried $missing)
                                                                     (_.var "append"))))))))))))
    ))
