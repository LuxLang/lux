... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list]
     ["[0]" stack (.use "[1]#[0]" functor mix)]
     ["[0]" set]]]
   [math
    [number
     ["n" natural]]]
   [target
    ["_" python (.only SVar)]]]]
 ["[0]" //
  [runtime (.only Operation Phase Expression Phase! Statement)]
  ["[1][0]" when]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    [synthesis
     ["[0]" when]]
    ["/[1]" //
     ["[0]" phase]
     ["[0]" synthesis]
     ["[1][0]" translation]
     ["//[1]" ///
      [meta
       ["[0]" cache
        [dependency
         ["[1]" artifact]]]]
      [reference
       [register (.only Register)]
       ["[1][0]" variable]]]]]]])

(the (setup offset bindings body)
  (-> Register (Stack _.Expression) _.Statement _.Statement)
  (let [variables (|> bindings
                      stack.enumeration
                      (stack#each (|>> product.left (n.+ offset) //when.register))
                      list.of_stack)]
    (all _.then
         (_.set variables (_.multi (list.of_stack bindings)))
         body)))

(the .public (set_tail_recursion body!)
  (-> _.Statement _.Statement)
  (_.while (_.bool true)
           body!
           {.#None}))

(the .public (tail_recursion! statement expression archive [start initsS+ bodyS])
  (Statement (synthesis.Tail_Recursion synthesis.Term))
  (when initsS+
    ... function/false/non-independent loop
    {.#Empty}
    (statement expression archive bodyS)

    ... true loop
    _
    (do [! phase.monad]
      [initsO+ (stack.each' ! (expression archive) initsS+)
       body! (/////translation.with_anchor start
               (statement expression archive bodyS))]
      (in (<| (..setup start initsO+)
              ..set_tail_recursion
              body!)))))

(the .public (tail_recursion statement expression archive [start initsS+ bodyS])
  (-> Phase!
      (Expression (synthesis.Tail_Recursion synthesis.Term)))
  (when initsS+
    ... function/false/non-independent loop
    {.#Empty}
    (expression archive bodyS)

    ... true loop
    _
    (do [! phase.monad]
      [dependencies (cache.dependencies archive bodyS)
       initsO+ (stack.each' ! (expression archive) initsS+)
       [[loop_module loop_artifact] body!] (/////translation.with_new_context archive dependencies
                                             (/////translation.with_anchor start
                                               (statement expression archive bodyS)))
       .let [@loop (_.var (///reference.artifact [loop_module loop_artifact]))
             locals (|> initsS+
                        stack.enumeration
                        (stack#each (|>> product.left (n.+ start) //when.register)))
             actual_loop (<| (_.def @loop (list.of_stack locals))
                             ..set_tail_recursion
                             body!)
             [declaration instantiation] (is [_.Statement _.Expression]
                                             (when (|> (synthesis.path/then bodyS)
                                                       //when.dependencies
                                                       list.of_stack
                                                       (set.of_list _.hash)
                                                       (set.difference (set.of_list _.hash (list.of_stack locals)))
                                                       set.as_list
                                                       list.as_stack)
                                               {.#Empty}
                                               [actual_loop
                                                @loop]

                                               foreigns
                                               [(_.def @loop (list.of_stack foreigns)
                                                       (all _.then
                                                            actual_loop
                                                            (_.return @loop)
                                                            ))
                                                (_.apply (list.of_stack foreigns) @loop)]))]
       _ (/////translation.execute! declaration)
       _ (/////translation.save! loop_artifact {.#None} declaration)]
      (in (_.apply (list.of_stack initsO+) instantiation)))))

(the .public (tail_iteration! statement expression archive it)
  (Statement (Stack synthesis.Term))
  (do [! phase.monad]
    [offset /////translation.anchor
     it (stack.each' ! (expression archive) it)]
    (in (..setup offset it
                 _.continue))))
