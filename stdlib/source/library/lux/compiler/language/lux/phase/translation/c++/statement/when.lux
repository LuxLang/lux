... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except if let exec when local)
   [abstract
    ["[0]" monad]]
   [data
    [collection
     ["[0]" list (.use "[1]:[0]" mix)]]
    [text
     ["%" \\injection]]]
   [macro
    ["[0]" template]]
   [target
    ["_" c++ (.only)
     ["[0]" type]]]]]
 ["[0]" ///
  ["[1][0]" type]
  ["[0]" runtime (.only Operation Phase Phase')]
  ["[0]" primitive]
  ["[0]" reference]
  [////
   ["[0]" translation]
   ["[0]" synthesis (.only Path)]
   ["[0]" phase (.use "[1]:[0]" monad)
    ["[0]" synthesis
     ["[1]/[0]" when]]]
   [///
    [meta
     [archive (.only Archive)]]]]])

(the .public (if statement expression archive it)
  (runtime.Statement synthesis.If)
  (monad.let phase.monad
    [when (expression archive (its synthesis.#if_when it))
     then (statement expression archive (its synthesis.#if_then it))
     else (statement expression archive (its synthesis.#if_else it))]
    (pure (_.if when
                then
                {.#Some else}))))

(the .public (let statement expression archive it)
  (runtime.Statement synthesis.Let)
  (monad.let phase.monad
    [.let [[binding value] (its synthesis.#context it)]
     value (expression archive value)
     body (statement expression archive (its synthesis.#expression it))]
    (pure (all _.then
               (_.constant (reference.local binding)
                           runtime.value_type
                           value)
               body))))

(the .public (exec statement expression archive it)
  (runtime.Statement synthesis.Exec)
  (monad.let phase.monad
    [before (expression archive (its synthesis.#before it))
     after (statement expression archive (its synthesis.#after it))]
    (pure (all _.then
               (_.; before)
               after))))

(the failure
  (-> _.Label
      _.Statement)
  _.go_to)

(the (push! value road)
  (-> _.Expression _.Local
      _.Statement)
  (_.; (_.:= road (runtime.push runtime.value_type value road))))

(the (pop! road)
  (-> _.Local
      _.Statement)
  (_.; (_.:= road (runtime.pop road))))

(template.with [<flag> <name>]
  [(the (<name> temporary road @failure simple? lefts)
     (-> _.Local _.Local _.Label Bit Natural
         _.Statement)
     (all _.then
          (_.; (_.:= temporary (runtime.choice lefts <flag> (runtime.peek road))))
          (_.if (_.= runtime.null temporary)
                (..failure @failure)
                (.if simple?
                     {.#None}
                     {.#Some (push! temporary road)}))))]

  [[0b left_choice]
   [1b right_choice]]
  )

(the (optimized_pattern_matching temporary road @failure next it)
  (-> _.Local _.Local _.Label
      (-> (-> Path (Operation _.Statement))
          (-> Path (Operation (Maybe _.Statement)))))
  (`` (.when it
        (,, (template.with [<simple> <choice>]
              [(<simple> idx nextP)
               (|> nextP
                   next
                   (by phase.monad each (|>> (_.then (<choice> temporary road @failure true idx))
                                             {.#Some})))]

              [[synthesis.simple_left_side  ..left_choice]
               [synthesis.simple_right_side ..right_choice]]
              ))

        (synthesis.left_member 0)
        (phase:pure {.#Some (push! (|> (runtime.peek road)
                                       runtime.tuple_values
                                       (_.item (_.int +0)))
                                   road)})

        ... Extra optimization
        (synthesis.path/seq
         (synthesis.left_member 0)
         (synthesis.!bind_top register then))
        (monad.let phase.monad
          [then! (next then)]
          (pure {.#Some (all _.then
                             (_.constant (reference.local register)
                                         runtime.value_type
                                         (|> (runtime.peek road)
                                             runtime.tuple_values
                                             (_.item (_.int +0))))
                             then!)}))

        ... Extra optimization
        (,, (template.with [<pm> <getter>]
              [(synthesis.path/seq
                (<pm> lefts)
                (synthesis.!bind_top register then))
               (monad.let phase.monad
                 [then! (next then)]
                 (pure {.#Some (all _.then
                                    (_.constant (reference.local register)
                                                runtime.value_type
                                                (|> (runtime.peek road)
                                                    (runtime.host_value runtime.tuple_type)
                                                    _.at
                                                    (<getter> (_.int (.int lefts)))))
                                    then!)}))]

              [[synthesis.left_member  runtime.left]
               [synthesis.right_member runtime.right]]
              ))

        (synthesis.!bind_top register then)
        (monad.let phase.monad
          [then! (next then)]
          (pure {.#Some (all _.then
                             (_.constant (reference.local register)
                                         runtime.value_type
                                         (runtime.peek road))
                             (..pop! road)
                             then!)}))

        _
        (phase:pure {.#None}))))

(the local
  (Operation _.Local)
  (phase:each (|>> %.natural_16 (text "__") _.local)
              translation.next))

(the label
  (Operation _.Label)
  (phase:each (|>> %.natural_16 (text "___") _.label)
              translation.next))

(the (save! road fork)
  (-> _.Local _.Local
      _.Statement)
  (_.; (_.:= fork (runtime.push (type.address runtime.road) road fork))))

(the (restore! road fork)
  (-> _.Local _.Local
      _.Statement)
  (all _.then
       (_.; (_.:= road (runtime.peek fork)))
       (pop! fork)
       ))

(the (alternation @else road fork pre! post!)
  (-> _.Label _.Local _.Local _.Statement _.Statement
      _.Statement)
  (all _.then
       (save! road fork)
       pre!

       (_.set_label @else)
       (restore! road fork)
       post!))

(the (pattern_matching statement expression archive temporary road fork)
  (-> Phase' Phase Archive _.Local _.Local _.Local _.Label Path
      (Operation _.Statement))
  (function (next @failure it)
    (monad.let [! phase.monad]
      [outcome (optimized_pattern_matching temporary road @failure (next @failure) it)]
      (`` (.when outcome
            {.#Some outcome}
            (pure outcome)

            {.#None}
            (.when it
              {synthesis.#Then body}
              (statement expression archive body)

              {synthesis.#Pop}
              (pure (..pop! road))

              {synthesis.#Bind register}
              (pure (_.constant (reference.local register)
                                runtime.value_type
                                (runtime.peek road)))

              {synthesis.#Bit_Fork when then else}
              (monad.let !
                [then! (next @failure then)
                 else! (.when else
                         {.#Some else}
                         (next @failure else)

                         {.#None}
                         (pure (..failure @failure)))
                 .let [[then! else!] (.if when
                                          [then! else!]
                                          [else! then!])]]
                (pure (_.if (|> (runtime.peek road)
                                (runtime.host_value ///type.bit)
                                _.at)
                            then!
                            {.#Some else!})))

              (,, (template.with [<tag> <injection> <type> <=>]
                    [{<tag> item}
                     (monad.let !
                       [it ..local
                        clauses (list.each' ! (function (_ [match then])
                                                (by ! each
                                                    (|>> [(<=> (<injection> match) it)])
                                                    (next @failure then)))
                                            {.#Top item})]
                       (pure (_.block
                              (all _.then
                                   (_.constant it <type> (|> (runtime.peek road)
                                                             (runtime.host_value <type>)
                                                             _.at))
                                   (list:mix (function (_ [when then] else)
                                               (_.if when then {.#Some else}))
                                             (..failure @failure)
                                             clauses)))))]

                    [[synthesis.#I64_Fork primitive.i64' ///type.i64 _.=]
                     [synthesis.#F64_Fork primitive.f64' ///type.f64 _.=]
                     [synthesis.#Text_Fork primitive.text' runtime.text_type runtime.text_=]]
                    ))

              (,, (template.with [<complex> <choice>]
                    [(<complex> idx)
                     (pure (<choice> temporary road @failure false idx))]

                    [[synthesis.left_side  ..left_choice]
                     [synthesis.right_side ..right_choice]]
                    ))

              (,, (template.with [<pm> <getter>]
                    [(<pm> lefts)
                     (pure (push! (|> (runtime.peek road)
                                      (runtime.host_value runtime.tuple_type)
                                      _.at
                                      (<getter> (_.int (.int lefts))))
                                  road))]

                    [[synthesis.left_member  runtime.left]
                     [synthesis.right_member runtime.right]]
                    ))

              (synthesis.path/seq left right)
              (monad.let phase.monad
                [left (next @failure left)
                 right (next @failure right)]
                (pure (all _.then
                           left
                           right)))

              (synthesis.path/alt left right)
              (monad.let phase.monad
                [@else ..label
                 left (next @else left)
                 right (next @failure right)]
                (pure (..alternation @else road fork left right)))))))))

(the .public (when statement expression archive it)
  (runtime.Statement synthesis.When)
  (monad.let [! phase.monad]
    [input (expression archive (.its synthesis.#input it))
     temporary ..local
     road ..local
     fork ..local
     @failure ..label
     output (pattern_matching statement expression archive temporary road fork @failure (.its synthesis.#output it))]
    (pure (all _.then
               (_.variable road
                           (type.address runtime.road)
                           (runtime.push runtime.value_type input _.null))
               (_.variable fork
                           (type.address runtime.fork)
                           _.null)
               output
               
               (_.set_label @failure)
               (_.throw (_.string synthesis/when.pattern_matching_error))))))
