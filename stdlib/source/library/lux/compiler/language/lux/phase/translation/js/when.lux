... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except when exec let if its
                or and)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" maybe]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix monoid)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]]
   [target
    ["_" js (.only Computation Var)]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Phase! Expression Statement)]
  ["[1][0]" reference]
  ["[1][0]" primitive]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    ["[1][0]" synthesis
     ["[1]/[0]" when]]
    ["/[1]" //
     ["[0]" phase (.use "[1]#[0]" monad)]
     ["[0]" translation]
     ["[0]" synthesis (.only Path)
      [access
       ["[0]" member (.only Member)]]]
     ["//[1]" ///
      [reference
       [register (.only Register)]]
      [meta
       [archive (.only Archive)]]]]]]])

(the .public register
  (-> Register
      Var)
  (|>> (///reference.local //reference.system)
       as_expected))

... https://en.wikipedia.org/wiki/Comma_operator
(the .public (exec next archive it)
  (Expression synthesis.Exec)
  (monad.let phase.monad
    [before (next archive (.its synthesis.#exec_before it))
     after (next archive (.its synthesis.#exec_after it))]
    (pure (_., before after))))

(the .public (exec! statement expression archive it)
  (Statement synthesis.Exec)
  (monad.let phase.monad
    [before (expression archive (.its synthesis.#exec_before it))
     after (statement expression archive (.its synthesis.#exec_after it))]
    (pure (all _.then
               (_.; before)
               after))))

... TODO: Find some way to do 'let' without paying the price of the closure.
(the .public (let next archive [head_binding head_value body])
  (Expression synthesis.Let)
  (monad.let [! phase.monad]
    [.let [[tail body] (synthesis.flat_let body)]
     bindings (list.each' ! (function (_ [binding value])
                              (phase#each (_.define (..register binding))
                                          (next archive value)))
                          (list#composite (list [head_binding head_value])
                                          tail))
     body (next archive body)]
    ... (pure (list#mix _., body (list.in_reverse bindings)))
    (pure (<| (_.of (list))
              (_.closure (list))
              (list#mix _.then
                        (_.return body)
                        (list.in_reverse bindings))))
    ))

(the .public (let! statement expression archive [register valueS bodyS])
  (Statement synthesis.Let)
  (monad.let phase.monad
    [valueO (expression archive valueS)
     bodyO (statement expression archive bodyS)]
    (pure (all _.then
               (_.define (..register register) valueO)
               bodyO))))

(the .public (if expression archive [testS thenS elseS])
  (Expression synthesis.If)
  (monad.let phase.monad
    [testO (expression archive testS)
     thenO (expression archive thenS)
     elseO (expression archive elseS)]
    (pure (_.? testO thenO elseO))))

(the .public (if! statement expression archive [testS thenS elseS])
  (Statement synthesis.If)
  (monad.let phase.monad
    [testO (expression archive testS)
     thenO (statement expression archive thenS)
     elseO (statement expression archive elseS)]
    (pure (_.if testO
                thenO
                elseO))))

(the (projection it)
  (.if (.its member.#right? it)
       (//runtime.tuple//right (_.i32 (.integer (.its member.#lefts it))))
       (//runtime.tuple//left (_.i32 (.integer (.its member.#lefts it))))))

(the .public (its expression archive [pathP valueS])
  (Expression synthesis.Its)
  (monad.let phase.monad
    [valueO (expression archive valueS)]
    (pure (list#mix ..projection valueO pathP))))

(the @savepoint (_.var "lux_pm_cursor_savepoint"))
(the @cursor (_.var "lux_pm_cursor"))
(the @temp (_.var "lux_pm_temp"))

(the (push_cursor! value)
  (-> _.Expression _.Statement)
  (_.; (|> @cursor (_.do "push" (list value)))))

(the peek_and_pop_cursor
  _.Expression
  (|> @cursor (_.do "pop" (list))))

(the pop_cursor!
  _.Statement
  (_.; ..peek_and_pop_cursor))

(the length
  (|>> (_.its "length")))

(the last_index
  (|>> ..length (_.- (_.i32 +1))))

(the peek_cursor
  _.Expression
  (|> @cursor (_.at (last_index @cursor))))

(the save_cursor!
  _.Statement
  (.let [cursor (|> @cursor (_.do "slice" (list)))]
    (_.; (|> @savepoint (_.do "push" (list cursor))))))

(the restore_cursor!
  _.Statement
  (_.; (_.set @cursor (|> @savepoint (_.do "pop" (list))))))

(the fail_pm! _.break)

(the (multi_pop_cursor! pops)
  (-> Natural _.Statement)
  (.let [popsJS (_.i32 (.integer pops))]
    (_.; (|> @cursor (_.do "splice" (list (|> @cursor ..length (_.- popsJS))
                                          popsJS))))))

(template.with [<name> <flag>]
  [(the (<name> simple? idx)
     (-> Bit Natural
         _.Statement)
     (all _.then
          (_.; (_.set @temp (//runtime.sum//get ..peek_cursor <flag>
                                                (|> idx .integer _.i32))))
          (.if simple?
               (_.when (_.= _.null @temp)
                 ..fail_pm!)
               (_.if (_.= _.null @temp)
                     ..fail_pm!
                     (push_cursor! @temp)))))]

  [[left_choice  _.null]
   [right_choice //runtime.unit]]
  )

(the (alternation pre! post!)
  (-> _.Statement _.Statement _.Statement)
  (all _.then
       (_.do_while (_.boolean false)
                   (all _.then
                        ..save_cursor!
                        pre!))
       (all _.then
            ..restore_cursor!
            post!)))

(the (optimized_pattern_matching again pathP)
  (-> (-> Path (Operation _.Statement))
      (-> Path (Operation (Maybe _.Statement))))
  (`` (.when pathP
        (,, (template.with [<simple> <choice>]
              [(<simple> idx nextP)
               (|> nextP
                   again
                   (by phase.monad each (|>> (_.then (<choice> true idx)) {.#Some})))]

              [[synthesis.simple_left_side  ..left_choice]
               [synthesis.simple_right_side ..right_choice]]
              ))

        (synthesis.left_member 0)
        (phase#pure {.#Some (push_cursor! (_.at (_.i32 +0) ..peek_cursor))})

        ... Extra optimization
        (synthesis.path/seq
         (synthesis.left_member 0)
         (synthesis.!bind_top register thenP))
        (monad.let phase.monad
          [then! (again thenP)]
          (pure {.#Some (all _.then
                             (_.define (..register register) (_.at (_.i32 +0) ..peek_cursor))
                             then!)}))

        ... Extra optimization
        (,, (template.with [<pm> <getter>]
              [(synthesis.path/seq
                (<pm> lefts)
                (synthesis.!bind_top register thenP))
               (monad.let phase.monad
                 [then! (again thenP)]
                 (pure {.#Some (all _.then
                                    (_.define (..register register) (<getter> (_.i32 (.integer lefts)) ..peek_cursor))
                                    then!)}))]

              [[synthesis.left_member  //runtime.tuple//left]
               [synthesis.right_member //runtime.tuple//right]]
              ))

        (synthesis.!bind_top register thenP)
        (monad.let phase.monad
          [then! (again thenP)]
          (pure {.#Some (all _.then
                             (_.define (..register register) ..peek_and_pop_cursor)
                             then!)}))

        (synthesis.!multi_pop nextP)
        (.let [[extra_pops nextP'] (////synthesis/when.count_pops nextP)]
          (monad.let phase.monad
            [next! (again nextP')]
            (pure {.#Some (all _.then
                               (multi_pop_cursor! (n.+ 2 extra_pops))
                               next!)})))

        _
        (phase#pure {.#None}))))

(the (pattern_matching' statement expression archive)
  (-> Phase! Phase Archive
      (-> Path (Operation _.Statement)))
  (function (again pathP)
    (monad.let phase.monad
      [outcome (optimized_pattern_matching again pathP)]
      (`` (.when outcome
            {.#Some outcome}
            (pure outcome)

            {.#None}
            (.when pathP
              {synthesis.#Then bodyS}
              (statement expression archive bodyS)

              {synthesis.#Pop}
              (phase#pure pop_cursor!)

              {synthesis.#Bind register}
              (phase#pure (_.define (..register register) ..peek_cursor))

              {synthesis.#Bit_Fork when thenP elseP}
              (monad.let [! phase.monad]
                [then! (again thenP)
                 else! (.when elseP
                         {.#Some elseP}
                         (again elseP)

                         {.#None}
                         (pure ..fail_pm!))]
                (pure (.if when
                           (_.if ..peek_cursor
                                 then!
                                 else!)
                           (_.if ..peek_cursor
                                 else!
                                 then!))))

              {synthesis.#I64_Fork [head tail]}
              (monad.let [! phase.monad]
                ['input (phase#each _.var (translation.name "input"))
                 clauses (list.each' ! (function (_ [when then])
                                         (monad.let !
                                           [then! (again then)]
                                           (pure [(//runtime.i64::= (//primitive.i64 when)
                                                                    'input)
                                                  then!])))
                                     (list#composite (list head) tail))]
                (pure (all _.then
                           (_.define 'input ..peek_cursor)
                           (list#mix (function (_ [when then] else)
                                       (_.if when then else))
                                     ..fail_pm!
                                     (list.in_reverse clauses)))))

              (,, (template.with [<tag> <injection>]
                    [{<tag> [head tail]}
                     (monad.let [! phase.monad]
                       [cases (list.each' ! (function (_ [match then])
                                              (by ! each (|>> [(list (<injection> match))]) (again then)))
                                          (list#composite (list head) tail))]
                       (pure (_.switch ..peek_cursor
                                       (list.in_reverse cases)
                                       {.#Some ..fail_pm!})))]

                    [[synthesis.#F64_Fork //primitive.f64]
                     [synthesis.#Text_Fork //primitive.text]]
                    ))

              (,, (template.with [<complex> <choice>]
                    [(<complex> idx)
                     (phase#pure (<choice> false idx))]

                    [[synthesis.left_side  ..left_choice]
                     [synthesis.right_side ..right_choice]]
                    ))

              (,, (template.with [<pm> <getter>]
                    [(<pm> lefts)
                     (phase#pure (push_cursor! (<getter> (_.i32 (.integer lefts)) ..peek_cursor)))]

                    [[synthesis.left_member  //runtime.tuple//left]
                     [synthesis.right_member //runtime.tuple//right]]
                    ))

              {synthesis.#List size}
              (phase#pure (_.when (_.not (_.= (_.i32 (.integer size))
                                              (_.its "length" ..peek_cursor)))
                            ..fail_pm!))

              (synthesis.item index)
              (phase#pure (push_cursor! (_.at (_.i32 (.integer index)) ..peek_cursor)))

              (,, (template.with [<tag> <combinator>]
                    [(<tag> leftP rightP)
                     (monad.let phase.monad
                       [left! (again leftP)
                        right! (again rightP)]
                       (pure (<combinator> left! right!)))]

                    [[synthesis.path/seq _.then]
                     [synthesis.path/alt ..alternation]]
                    ))))))))

(the (pattern_matching statement expression archive pathP)
  (-> Phase! Phase Archive Path (Operation _.Statement))
  (monad.let phase.monad
    [pattern_matching! (pattern_matching' statement expression archive pathP)]
    (pure (all _.then
               (_.do_while (_.boolean false)
                           pattern_matching!)
               (_.throw (_.string ////synthesis/when.pattern_matching_error))))))

(the .public (when! statement expression archive [valueS pathP])
  (Statement [synthesis.Term Path])
  (monad.let phase.monad
    [start (expression archive valueS)
     pattern_matching! (pattern_matching statement expression archive pathP)]
    (pure (all _.then
               (_.declare @temp)
               (_.define @cursor (_.array (list start)))
               (_.define @savepoint (_.array (list)))
               pattern_matching!))))

(the .public (when statement expression archive [valueS pathP])
  (-> Phase! (Expression [synthesis.Term Path]))
  (monad.let phase.monad
    [pattern_matching! (..when! statement expression archive [valueS pathP])]
    (pure (|> pattern_matching!
              (_.closure (list))
              (_.of (list))))))

(the .public (multi_let! statement expression archive [input bindings body])
  (Statement synthesis.Multi_Let)
  (monad.let phase.monad
    [input (expression archive input)
     body (statement expression archive body)
     'tuple (phase#each _.var (translation.name "tuple"))]
    (pure (all _.then
               (list#mix (function (_ [register member] left)
                           (all _.then
                                left
                                (_.define (..register register) (..projection member 'tuple))))
                         (_.define 'tuple input)
                         bindings)
               body))))

(the .public (multi_let statement expression archive)
  (-> Phase! (Expression synthesis.Multi_Let))
  (|>> (multi_let! statement expression archive)
       (phase#each (|>> (_.closure (list))
                        (_.of (list))))))

(template.with [,lux ,host]
  [(the .public (,lux expression archive [parameter subject])
     (Expression [synthesis.Term synthesis.Term])
     (monad.let phase.monad
       [parameter (expression archive parameter)
        subject (expression archive subject)]
       (pure (,host parameter subject))))]

  [[or _.or]
   [and _.and]]
  )

(template.with [,expression ,statement ,type ,injection]
  [(the .public (,statement statement expression archive [input clauses else])
     (Statement [synthesis.Term (List [,type synthesis.Term]) synthesis.Term])
     (monad.let [! phase.monad]
       [input (expression archive input)
        clauses (list.each' ! (function (_ [match then])
                                (by ! each (|>> [(list (,injection match))])
                                    (statement expression archive then)))
                            clauses)
        else (statement expression archive else)]
       (pure (_.switch input
                       (list.in_reverse clauses)
                       {.#Some else}))))

   (the .public (,expression statement expression archive)
     (-> Phase!
         (Expression [synthesis.Term (List [,type synthesis.Term]) synthesis.Term]))
     (|>> (,statement statement expression archive)
          (phase#each (|>> (_.closure (list))
                           (_.of (list))))))]

  [[when_f64 when_f64! F64 //primitive.f64]
   [when_text when_text! Text //primitive.text]]
  )

(template.with [,expression ,statement ,type ,injection]
  [(the .public (,statement statement expression archive [input clauses else])
     (Statement [synthesis.Term (List [,type synthesis.Term]) synthesis.Term])
     (monad.let [! phase.monad]
       [input (expression archive input)
        'input (phase#each _.var (translation.name "input"))
        clauses (list.each' ! (function (_ [when then])
                                (by ! each (|>> [when]) (statement expression archive then)))
                            clauses)
        else (statement expression archive else)]
       (pure (all _.then
                  (_.define 'input input)
                  (list#mix (function (_ [when then] else)
                              (_.if (//runtime.i64::= (,injection when)
                                                      'input)
                                    then
                                    else))
                            else
                            (list.in_reverse clauses))))))

   (the .public (,expression expression archive [input clauses else])
     (Expression [synthesis.Term (List [,type synthesis.Term]) synthesis.Term])
     (monad.let [! phase.monad]
       [input (expression archive input)
        'input (phase#each _.var (translation.name "input"))
        clauses (list.each' ! (function (_ [when then])
                                (by ! each (|>> [when]) (expression archive then)))
                            clauses)
        else (expression archive else)]
       (pure (<| (_.of (list input))
                 (_.closure (list 'input))
                 _.return
                 (list#mix (function (_ [when then] else)
                             (_.? (//runtime.i64::= (,injection when)
                                                    'input)
                                  then
                                  else))
                           else
                           (list.in_reverse clauses))))))]

  [[when_i64 when_i64! I64 //primitive.i64]]
  )
