... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Analysis)
   ["[0]" ffi]
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [data
    [collection
     ["[0]" dictionary]
     ["[0]" stack]
     ["[0]" list
      ["?[1]" \\projection]]]]
   ["[0]" type (.only)
    ["[0]" check]]
   ["[0]" target (.only)
    ["_" php]]
   ["[0]" code
    ["<[1]>" \\projection]]]]
 [//
  ["/" lux (.only custom)]
  [//
   ["[0]" bundle]
   [//
    ["[0]" analysis
     ["[1]/[0]" type]]
    [//
     ["[0]" analysis (.only Analysis Operation Phase Handler Bundle)]
     [///
      ["[0]" phase]]]]]])

(the Null
  (target.for target.php ffi.Null
              Any))

(the Object
  (target.for target.php (type (ffi.Object Any))
              Any))

(the Function
  (target.for target.php ffi.Function
              Any))

(the object:new
  Handler
  (custom
   [(all <>.and <code>.text (<>.some ?list.any))
    (function (_ extension phase archive [constructor inputsC])
      (monad.let [! phase.monad]
        [inputsA (stack.each' ! (|>> (phase archive) (analysis/type.with_type Any)) inputsC)
         _ (analysis/type.infer .Any)]
        (pure {analysis.:Extension extension (stack.partial (analysis.text constructor) inputsA)})))]))

(the object:get
  Handler
  (custom
   [(all <>.and <code>.text ?list.any)
    (function (_ extension phase archive [fieldC objectC])
      (monad.let phase.monad
        [objectA (analysis/type.with_type ..Object
                   (phase archive objectC))
         _ (analysis/type.infer .Any)]
        (pure {analysis.:Extension extension (stack (analysis.text fieldC)
                                                    objectA)})))]))

(the object:do
  Handler
  (custom
   [(all <>.and <code>.text ?list.any (<>.some ?list.any))
    (function (_ extension phase archive [methodC objectC inputsC])
      (monad.let [! phase.monad]
        [objectA (analysis/type.with_type ..Object
                   (phase archive objectC))
         inputsA (stack.each' ! (|>> (phase archive) (analysis/type.with_type Any)) inputsC)
         _ (analysis/type.infer .Any)]
        (pure {analysis.:Extension extension (stack.partial (analysis.text methodC)
                                                            objectA
                                                            inputsA)})))]))

(the bundle:object
  Bundle
  (<| (bundle.prefix "object")
      (|> bundle.empty
          (bundle.install "new" object:new)
          (bundle.install "get" object:get)
          (bundle.install "do" object:do)
          (bundle.install "null" (/.nullary ..Null))
          (bundle.install "null?" (/.unary Any Bit))
          )))

(the php:constant
  Handler
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (monad.let phase.monad
        [_ (analysis/type.infer Any)]
        (pure {analysis.:Extension extension (stack (analysis.text name))})))]))

(the php:of
  Handler
  (custom
   [(all <>.and ?list.any (<>.some ?list.any))
    (function (_ extension phase archive [abstractionC inputsC])
      (monad.let [! phase.monad]
        [abstractionA (analysis/type.with_type ..Function
                        (phase archive abstractionC))
         inputsA (stack.each' ! (|>> (phase archive) (analysis/type.with_type Any)) inputsC)
         _ (analysis/type.infer Any)]
        (pure {analysis.:Extension extension (stack.partial abstractionA inputsA)})))]))

(the php:pack
  Handler
  (custom
   [(all <>.and ?list.any ?list.any)
    (function (_ extension phase archive [formatC dataC])
      (monad.let [! phase.monad]
        [formatA (analysis/type.with_type Text
                   (phase archive formatC))
         dataA (analysis/type.with_type (type (Array (I64 Any)))
                 (phase archive dataC))
         _ (analysis/type.infer Text)]
        (pure {analysis.:Extension extension (stack formatA dataA)})))]))

(the .public bundle
  Bundle
  (<| (bundle.prefix "php")
      (|> bundle.empty
          (dictionary.composite bundle:object)

          (bundle.install "constant" php:constant)
          (bundle.install "of" php:of)
          (bundle.install "pack" php:pack)
          (bundle.install "script universe" (/.nullary .Bit))
          )))
