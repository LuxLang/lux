... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)
      ["?[1]" \\projection]]]]
   ["[0]" macro (.only with_names)
    ["[0]" syntax]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]]
 ["[0]" ///
  ["[1][0]" extension]
  [//
   ["[0]" phase]
   ["[0]" translation]]])

(the Vector
  (syntax.macro (_ [size <code>.natural
                    elemT ?list.any])
    (in (list (` [(,* (list.repeated size elemT))])))))

(the Arity
  (template.macro (_ arity)
    [(for_any (_ it)
       (-> (Vector arity it) it))]))

(exception.the .public (incorrect_arity [expected actual])
  (Exception [Natural Natural])
  (exception.report
   (list ["Expected" (%.natural expected)]
         ["Actual" (%.natural actual)])))

(the arity
  (syntax.macro (_ [arity <code>.natural])
    (with_names ['_ 'extension 'phase 'archive 'inputs 'anchor 'expression 'declaration]
      (do [! meta.monad]
        ['input+ (list.all' ! (list.repeated arity (macro.name "input")))]
        (in (list (` (is (for_any ((, '_) (, 'anchor) (, 'expression) (, 'declaration))
                           (-> ((Arity (, (code.natural arity))) (, 'expression))
                               (translation.Handler (, 'anchor) (, 'expression) (, 'declaration))))
                         (function ((, '_) (, 'extension))
                           (function ((, '_) (, 'phase) (, 'archive) (, 'inputs))
                             (when (, 'inputs)
                               (list (,* 'input+))
                               (do phase.monad
                                 [(,* (|> 'input+
                                          (list#each (function (_ 'input)
                                                       (list 'input (` ((, 'phase) (, 'archive) (, 'input))))))
                                          list#conjoint))]
                                 ((,' in) ((, 'extension) [(,* 'input+)])))

                               (, '_)
                               (phase.except ..incorrect_arity [(, (code.natural arity)) (list.size (, 'inputs))]))
                             ))))))))))

(template.with [<arity> <type> <term>]
  [(every .public <type> (Arity <arity>))
   (the .public <term> (arity <arity>))]

  [0 Nullary nullary]
  [1 Unary unary]
  [2 Binary binary]
  [3 Trinary trinary]
  )

(every .public (Variadic it)
  (-> (Stack it)
      it))

(the .public (variadic extension)
  (for_any (_ anchor expression declaration)
    (-> (Variadic expression)
        (translation.Handler anchor expression declaration)))
  (function (_ phase archive inputsS)
    (let [! phase.monad]
      (|> inputsS
          (list.each' ! (phase archive))
          (by ! each (|>> list.as_stack extension))))))
