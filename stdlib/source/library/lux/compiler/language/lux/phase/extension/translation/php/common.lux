... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["<>" projection]]
   [error
    ["[0]" try]]
   ["[0]" function]
   [data
    ["[0]" product]
    [collection
     ["[0]" dictionary]
     ["[0]" set]
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" stack (.use "[1]#[0]" functor mix)]]]
   [macro
    ["[0]" template]]
   [target
    ["_" php]]]]
 ["[0]" ////
  ["/" bundle]
  ["/[1]" //
   ["[0]" extension]
   [translation
    [extension (.only Nullary Unary Binary Trinary
                      nullary unary binary trinary)]
    ["[0]" reference]
    ["//" php
     ["[1][0]" runtime (.only Operation Phase Handler Bundle)]
     ["[1][0]" when]]]
   [//
    ["[0]" synthesis
     ["<s>" \\projection]]
    ["[0]" translation]
    [///
     ["[1]" phase]]]]])

(the !unary
  (template.macro (_ function)
    (|>> stack _.apply (|> (_.constant function)))))

... TODO: Get rid of this ASAP
(the lux::syntax_char_case!
  (..custom [(all <>.and
                  <s>.any
                  <s>.any
                  (<>.some (<s>.tuple (all <>.and
                                           (<s>.tuple (<>.many <s>.i64))
                                           <s>.any))))
             (function (_ extension_name phase archive [input else conditionals])
               (do [! /////.monad]
                 [inputG (phase archive input)
                  [[context_module context_artifact] elseG] (translation.with_new_context archive
                                                              (phase archive else))
                  @input (by ! each _.var (translation.name "input"))
                  conditionalsG (is (Operation (Stack [_.Expression _.Expression]))
                                    (stack.each' ! (function (_ [chars branch])
                                                     (do !
                                                       [branchG (phase archive branch)]
                                                       (in [(|> chars
                                                                (stack#each (|>> .integer _.int (_.=== @input)))
                                                                (stack#mix (function (_ clause total)
                                                                             (if (same? _.null total)
                                                                               clause
                                                                               (_.or clause total)))
                                                                           _.null))
                                                            branchG])))
                                                 conditionals))
                  .let [foreigns (|> conditionals
                                     (stack#each (|>> product.right synthesis.path/then //when.dependencies))
                                     (stack.partial (//when.dependencies (synthesis.path/then else)))
                                     stack.together
                                     list.of_stack
                                     (set.of_list _.hash)
                                     set.as_list
                                     list.as_stack)
                        @expression (_.constant (reference.artifact [context_module context_artifact]))
                        declaration (_.define_function @expression (stack.partial (_.parameter @input) (stack#each _.reference foreigns))
                                                       (stack#mix (function (_ [test then] else)
                                                                    (_.if test (_.return then) else))
                                                                  (_.return elseG)
                                                                  conditionalsG))]
                  _ (translation.execute! declaration)
                  _ (translation.save! context_artifact declaration)]
                 (in (_.apply (stack.partial inputG foreigns) @expression))))]))

(the lux_procs
  Bundle
  (|> /.empty
      (/.install "syntax char case!" lux::syntax_char_case!)
      (/.install "is" (binary (product.uncurried _.===)))
      (/.install "try" (unary //runtime.lux//try))
      ))

(the (left_shifted [parameter subject])
  (Binary _.Expression)
  (_.bit_shl (_.% (_.int +64) parameter) subject))

(the i64_procs
  Bundle
  (<| (/.prefix "i64")
      (|> /.empty
          (/.install "and" (binary (product.uncurried _.bit_and)))
          (/.install "or" (binary (product.uncurried _.bit_or)))
          (/.install "xor" (binary (product.uncurried _.bit_xor)))
          (/.install "left-shift" (binary ..left_shifted))
          (/.install "right-shift" (binary (product.uncurried //runtime.i64//right_shifted)))
          (/.install "=" (binary (product.uncurried _.==)))
          (/.install "<" (binary (product.uncurried _.<)))
          (/.install "+" (binary (product.uncurried //runtime.i64//+)))
          (/.install "-" (binary (product.uncurried //runtime.i64//-)))
          (/.install "*" (binary (product.uncurried //runtime.i64//*)))
          (/.install "/" (binary (function (_ [parameter subject])
                                   (_.intdiv/2 [subject parameter]))))
          (/.install "%" (binary (product.uncurried _.%)))
          (/.install "f64" (unary (_./ (_.float +1.0))))
          (/.install "char" (unary //runtime.i64//char))
          )))

(the (f64//% [parameter subject])
  (Binary _.Expression)
  (_.fmod/2 [subject parameter]))

(the (f64//encode subject)
  (Unary _.Expression)
  (_.number_format/2 [subject (_.int +17)]))

(the f64_procs
  Bundle
  (<| (/.prefix "f64")
      (|> /.empty
          (/.install "=" (binary (product.uncurried _.==)))
          (/.install "<" (binary (product.uncurried _.<)))
          (/.install "+" (binary (product.uncurried _.+)))
          (/.install "-" (binary (product.uncurried _.-)))
          (/.install "*" (binary (product.uncurried _.*)))
          (/.install "/" (binary (product.uncurried _./)))
          (/.install "%" (binary ..f64//%))
          (/.install "i64" (unary _.intval/1))
          (/.install "encode" (unary ..f64//encode))
          (/.install "decode" (unary //runtime.f64//decode)))))

(the (text//clip [paramO extraO subjectO])
  (Trinary _.Expression)
  (//runtime.text//clip paramO extraO subjectO))

(the (text//index [startO partO textO])
  (Trinary _.Expression)
  (//runtime.text//index textO partO startO))

(the text_procs
  Bundle
  (<| (/.prefix "text")
      (|> /.empty
          (/.install "=" (binary (product.uncurried _.==)))
          (/.install "<" (binary (product.uncurried _.<)))
          (/.install "concat" (binary (product.uncurried (function.flipped _.concat))))
          (/.install "index" (trinary ..text//index))
          (/.install "size" (unary //runtime.text//size))
          (/.install "char" (binary (product.uncurried //runtime.text//char)))
          (/.install "clip" (trinary ..text//clip))
          )))

(the io_procs
  Bundle
  (<| (/.prefix "io")
      (|> /.empty
          (/.install "log" (unary //runtime.io//log!))
          (/.install "error" (unary //runtime.io//throw!)))))

(the .public bundle
  Bundle
  (<| (/.prefix "lux")
      (|> /.empty
          (dictionary.composite lux_procs)
          (dictionary.composite i64_procs)
          (dictionary.composite f64_procs)
          (dictionary.composite text_procs)
          (dictionary.composite io_procs))))
