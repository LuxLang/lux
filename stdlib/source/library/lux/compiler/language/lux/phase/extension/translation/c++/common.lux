... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" monad (.only do)]]
   [control
    ["|" pipe]
    ["[0]" try]]
   ["[0]" function]
   [data
    ["[0]" product]
    [collection
     ["[0]" stack (.use "[1]#[0]" monad)]
     ["[0]" dictionary]]]
   [math
    [number
     ["[0]" i32]]]
   [compiler
    [target
     ["_" c++]]]]]
 ["[0]" /////
  ["[0]" extension]
  [translation
   [extension (.only Nullary Unary Binary Trinary Variadic
                     nullary unary binary trinary variadic)]
   ["//" c++
    ["[0]" runtime (.only Operation Phase Bundle Handler)]
    ["[0]" type]]]
  [//
   ["[0]" phase]
   ["[0]" synthesis
    ["<[1]>" \\projection (.only Projection)]]
   [///
    [meta
     [archive (.only Archive)]]]]])

(the .public (custom [projection handler])
  (for_any (_ of)
    (-> [(Projection of)
         (-> Phase Archive of (Operation _.Expression))]
        Handler))
  (function (_ phase archive input)
    (when (<synthesis>.value projection input)
      {try.#Success input'}
      (handler phase archive input')

      {try.#Failure error}
      (phase.failure error))))

(the i64::char
  (Unary _.Expression)
  (|>> (runtime.host_value type.i64)
       _.at
       (_.is type.char)
       stack (_.array type.char (_.int +1)) (_.new)
       (runtime.dynamic_text (_.int +1))
       (runtime.simple runtime.Text)))

(the with_integer_extensions
  (-> Bundle
      Bundle)
  (|>> (dictionary.has "int_char#|translation" (unary i64::char))
       ))

(the text::composite
  (Variadic _.Expression)
  (|>> (|.when
         (stack)
         runtime.unit

         (stack single)
         single

         it
         (|> it
             (stack#each (|>> (runtime.host_value runtime.text_type)
                              _.at))
             runtime.text_composite)
         )))

(the with_text_extensions
  (-> Bundle
      Bundle)
  (|>> (dictionary.has "text_composite#|translation" (variadic ..text::composite))
       ))

(the .public bundle
  Bundle
  (|> extension.empty
      with_integer_extensions
      with_text_extensions
      ))
