... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Variant Tuple
                variant tuple)
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" list]]]
   [math
    [number
     [integer
      ["i[0]" /32]]]]
   [target
    [jvm
     ["_" bytecode (.only Bytecode)]
     ["[0]" type]
     [encoding
      ["[0]" signed]]]]]]
 ["[0]" //
  ["[1][0]" type]
  ["[1][0]" runtime (.only Operation Phase Expression)]
  ["[1][0]" primitive]
  ["///[1]" ////
   ["[0]" phase]
   ["[0]" synthesis]
   [analysis
    [complex (.only Variant Tuple)]]]])

(the .public (lefts lefts)
  (-> Nat
      (Bytecode Any))
  (when lefts
    0 _.iconst_0
    1 _.iconst_1
    2 _.iconst_2
    3 _.iconst_3
    4 _.iconst_4
    5 _.iconst_5
    _ (when (signed.s1 (.integer lefts))
        {try.#Success value}
        (_.bipush value)

        {try.#Failure _}
        (when (signed.s2 (.integer lefts))
          {try.#Success value}
          (_.sipush value)

          {try.#Failure _}
          (_.int (i/32.of (.integer lefts)))))))

(the .public (right? right?)
  (-> Bit
      (Bytecode Any))
  (if right?
    //runtime.right_right?
    //runtime.left_right?))

(the .public (variant phase archive [lefts right? valueS])
  (Expression (Variant synthesis.Term))
  (do phase.monad
    [valueI (phase archive valueS)]
    (in (do _.monad
          [_ (..lefts lefts)
           _ (..right? right?)
           _ valueI]
          (_.invokestatic //runtime.class "variant"
                          (type.method [(list)
                                        (list //type.lefts //type.right? //type.value)
                                        //type.variant
                                        (list)]))))))

(the .public (tuple phase archive membersS)
  (Expression (Tuple synthesis.Term))
  (when membersS
    (list)
    (by phase.monad in //runtime.unit)

    (list singletonS)
    (phase archive singletonS)

    membersS
    (do [! phase.monad]
      [membersI (|> membersS
                    list.enumeration
                    (list.each' ! (function (_ [idx member])
                                    (do !
                                      [memberI (phase archive member)]
                                      (in (do _.monad
                                            [_ _.dup
                                             _ (_.int (i/32.of (.integer idx)))
                                             _ memberI]
                                            _.aastore))))))]
      (in (do [! _.monad]
            [_ (_.int (i/32.of (.integer (list.size membersS))))
             _ (_.anewarray //type.value)]
            (list.all' ! membersI))))))
