... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except variant tuple)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" list]]]
   [math
    [number
     ["i[0]" /32
      ["[1]" integer]]]]
   [target
    [jvm
     ["_" bytecode (.only Bytecode)]
     ["[0]" type]
     [encoding
      ["[0]" signed]]]]
   [compiler
    ["@[0]" type]]]]
 ["[0]" //
  ["[1][0]" type]
  ["[1][0]" runtime (.only Operation Phase Expression)]
  ["[1][0]" primitive]
  ["///[1]" ////
   ["[0]" phase]
   ["[0]" synthesis]]])

(the .public (lefts lefts)
  (-> Natural
      (Bytecode Any))
  (when lefts
    0 _.iconst_0
    1 _.iconst_1
    2 _.iconst_2
    3 _.iconst_3
    4 _.iconst_4
    5 _.iconst_5
    _ (when (signed.s1 (.integer lefts))
        {try.#Success value}
        (_.bipush value)

        {try.#Failure _}
        (when (signed.s2 (.integer lefts))
          {try.#Success value}
          (_.sipush value)

          {try.#Failure _}
          (_.int (i/32.of (.integer lefts)))))))

(the .public (right? it)
  (-> Bit
      (Bytecode Any))
  (if it
      //runtime.is_right
      //runtime.is_left))

(the .public (variant phase archive [lefts right? valueS])
  (Expression (@type.Variant synthesis.Term))
  (monad.let phase.monad
    [valueI (phase archive valueS)]
    (pure (monad.let _.monad
            [_ (..lefts lefts)
             _ (..right? right?)
             _ valueI]
            (_.invokestatic //runtime.class "variant"
                            (type.method [(list)
                                          (list //type.lefts //type.right? //type.value)
                                          //type.variant
                                          (list)]))))))

(the .public (tuple phase archive membersS)
  (Expression (@type.Tuple synthesis.Term))
  (when membersS
    (list)
    (by phase.monad pure //runtime.unit)

    (list singletonS)
    (phase archive singletonS)

    membersS
    (monad.let [! phase.monad]
      [membersI (|> membersS
                    list.enumeration
                    (list.each' ! (function (_ [idx member])
                                    (monad.let !
                                      [memberI (phase archive member)]
                                      (pure (monad.let _.monad
                                              [_ _.dup
                                               _ (_.int (i/32.of (.integer idx)))
                                               _ memberI]
                                              _.aastore))))))]
      (pure (monad.let [! _.monad]
              [_ (_.int (i/32.of (.integer (list.size membersS))))
               _ (_.anewarray //type.value)]
              (list.complete ! membersI))))))
