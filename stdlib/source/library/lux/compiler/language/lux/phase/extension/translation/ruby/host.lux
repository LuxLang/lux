... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["?" projection (.use "[1]#[0]" functor)]]
   ["[0]" function]
   [data
    [collection
     ["[0]" list (.only)
      ["?[1]" \\projection]]
     ["[0]" dictionary]]]
   [macro
    ["[0]" template]]
   [target
    ["_" ruby (.only Var Expression)]]]]
 [//
  [common (.only custom)]
  [////
   ["[0]" extension]
   [translation
    [extension (.only Nullary Unary Binary Trinary
                      nullary unary binary trinary)]
    [ruby
     ["[0]" runtime (.only Operation Phase Handler Bundle
                           with_vars)]]]
   [//
    ["[0]" phase]
    ["[0]" synthesis
     ["?[1]" \\projection]]]]])

(the object::get
  Handler
  (custom
   [(all ?.and ?synthesis.text ?list.any)
    (function (_ phase archive [fieldS objectS])
      (do phase.monad
        [objectG (phase archive objectS)]
        (in (_.its fieldS objectG))))]))

(the object::do
  Handler
  (custom
   [(all ?.and
         ?synthesis.text
         ?list.any
         (?.some ?list.any))
    (function (_ phase archive [methodS objectS inputsS])
      (do [! phase.monad]
        [objectG (phase archive objectS)
         inputsG (list.each' ! (phase archive) inputsS)]
        (in (_.do methodS inputsG {.#None} objectG))))]))

(template.with [<!> <?> <unit>]
  [(the <!> (Nullary Expression) (function.constant <unit>))
   (the <?> (Unary Expression) (_.= <unit>))]

  [object::nil object::nil? _.nil]
  )

(the with_object
  (-> Bundle Bundle)
  (|>> (dictionary.has "ruby_object_get#|translation" object::get)
       (dictionary.has "ruby_object_do#|translation" object::do)
       (dictionary.has "ruby_object_nil#|translation" (nullary object::nil))
       (dictionary.has "ruby_object_nil?#|translation" (unary object::nil?))
       ))

(the ruby::constant
  (custom
   [?synthesis.text
    (function (_ phase archive name)
      (by phase.monad in (is _.CVar (_.manual name))))]))

(the ruby::apply
  (custom
   [(all ?.and
         ?list.any
         (?.some ?list.any))
    (function (_ phase archive [abstractionS inputsS])
      (do [! phase.monad]
        [abstractionG (phase archive abstractionS)
         inputsG (list.each' ! (phase archive) inputsS)]
        (in (_.apply inputsG {.#None} abstractionG))))]))

(the ruby::import
  (custom
   [?synthesis.text
    (function (_ phase archive module)
      (by phase.monad in
          (_.require/1 (_.string module))))]))

(the .public bundle
  Bundle
  (|> extension.empty
      with_object

      (dictionary.has "ruby_constant#|translation" ruby::constant)
      (dictionary.has "ruby_apply#|translation" ruby::apply)
      (dictionary.has "ruby_import#|translation" ruby::import)
      ))
