... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Type Label
                with abstraction)
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" product]
    [binary
     ["[0]" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid mix functor)]
     ["[0]" stack (.use "[1]#[0]" monoid mix functor)]
     ["[0]" sequence]]]
   [math
    [number
     ["n" natural]]]
   [target
    [jvm
     ["_" bytecode (.only Label Bytecode) (.use "[1]#[0]" monad)]
     ["[0]" version]
     ["[0]" modifier (.only Modifier) (.use "[1]#[0]" monoid)]
     ["[0]" field (.only Field)]
     ["[0]" method (.only Method)]
     ["[0]" class (.only Class)]
     ["[0]" attribute]
     ["[0]" type (.only Type)
      ["[0]" category]
      ["[0]" reflection]]
     ["[0]" constant (.only)
      [pool (.only Resource)]]
     [encoding
      [name
       ["[0]" external]
       ["[0]" internal]]]]]
   [compiler
    [meta
     ["[0]" archive (.only Archive)]
     ["[0]" cache
      [dependency
       ["[1]/[0]" artifact]]]]]]]
 ["[0]" /
  ["[1][0]" abstract]
  [field
   [constant
    ["[1][0]" arity]]
   [variable
    ["[1][0]" foreign]
    ["[1][0]" partial]]]
  [method
   ["[1][0]" init]
   ["[1][0]" implementation]
   ["[1][0]" reset]
   ["[1][0]" apply]]
  ["/[1]" //
   ["[1][0]" runtime (.only Operation Phase Expression)]
   ["[1][0]" reference]
   [////
    [analysis (.only Environment)]
    ["[0]" phase]
    ["[0]" synthesis (.only Abstraction Reification)]
    ["[0]" translation]
    [///
     ["[0]" arity (.only Arity)]
     [meta
      [archive
       ["[0]" unit]]]
     [reference
      [register (.only Register)]]]]]])

(the .public (with expression archive @begin class environment arity body)
  (-> Phase Archive Label external.Name (Environment synthesis.Term) Arity (Bytecode Any)
      (Operation [(List (Resource Field))
                  (List (Resource Method))
                  (Bytecode Any)]))
  (let [classT (type.class (list) class)
        fields (is (List (Resource Field))
                   (list#composite (/foreign.variables environment)
                                   (/partial.variables arity)))
        methods (is (List (Resource Method))
                    (list#composite (list (/init.method classT environment arity)
                                          (/reset.method classT environment arity))
                                    (if (arity.multiary? arity)
                                      (|> (n.minor arity /arity.maximum)
                                          list.indices
                                          (list#each (|>> ++ (/apply.method classT environment arity @begin)))
                                          (list#composite (list (/implementation.method classT arity @begin body))))
                                      (list (/implementation.method classT arity @begin body)
                                            (/apply.method classT environment arity @begin 1)))))]
    (do [! phase.monad]
      [environment (list.each' ! (expression archive) environment)]
      (in [fields methods (/init.instance classT environment arity)]))))

(the modifier
  (Modifier Class)
  (all modifier#composite
       class.public
       class.final))

(the this_offset
  1)

(the internal
  (for_any (_ category)
    (-> (Type (category.Value category))
        internal.Name))
  (|>> type.reflection
       reflection.reflection
       internal.name))

(the .public (abstraction expression archive [environment arity bodyS])
  (Expression Abstraction)
  (do phase.monad
    [dependencies (cache/artifact.dependencies archive bodyS)
     @begin //runtime.forge_label
     [function_context bodyG] (<| (translation.with_new_context archive dependencies)
                                  (translation.with_anchor [@begin ..this_offset])
                                  (expression archive bodyS))
     .let [function_class (//runtime.class_name function_context)]
     [fields methods instance] (..with expression archive @begin function_class environment arity bodyG)
     module translation.module
     class (phase.of_try (class.class version.v6_0
                           ..modifier
                           (internal.name function_class)
                           {.#None}
                           (..internal /abstract.class) (list)
                           fields
                           methods
                           (list (attribute.source_file module))))
     .let [bytecode [function_class (\\injection.value class.as_binary class)]]
     _ (translation.execute! bytecode)
     _ (translation.save! (product.right function_context) {.#None} bytecode)]
    (in instance)))

(the (arbitrary_reification' expression archive [abstraction parameters])
  (Expression [(Bytecode Any) (List synthesis.Term)])
  (do [! phase.monad]
    [parameters (list.each' ! (expression archive) parameters)]
    (in (all _.composite
             abstraction
             (|> parameters
                 list.as_stack
                 (stack.sub /arity.maximum)
                 list.of_stack
                 (list.each' _.monad
                             (function (_ batchG)
                               (let [batchG (list.of_stack batchG)]
                                 (all _.composite
                                      (_.checkcast /abstract.class)
                                      (list.all' _.monad batchG)
                                      (_.invokevirtual /abstract.class //runtime.apply::name (//runtime.apply::type (list.size batchG)))
                                      )))))
             ))))

(the (arbitrary_reification expression archive [abstraction parameters])
  (Expression Reification)
  (do [! phase.monad]
    [abstraction (expression archive abstraction)]
    (arbitrary_reification' expression archive [abstraction parameters])))

(the (exact_reification expression archive [$abstraction @abstraction arity parameters])
  (Expression [Name unit.ID Arity (List synthesis.Term)])
  (do [! phase.monad]
    [.let [:abstraction: (type.class (list) (//runtime.class_name @abstraction))]
     abstraction (//reference.constant archive $abstraction)
     parameters (list.each' ! (expression archive) parameters)]
    (in (all _.composite
             abstraction
             (list.all' _.monad parameters)
             (/implementation.call :abstraction: arity)
             ))))

(the (successive_reification expression archive [$abstraction @abstraction arity parameters])
  (Expression [Name unit.ID Arity (List synthesis.Term)])
  (do [! phase.monad]
    [first (exact_reification expression archive [$abstraction @abstraction arity (list.first arity parameters)])]
    (arbitrary_reification' expression archive [first (list.after arity parameters)])))

(the .public (reification expression archive [abstraction parameters])
  (Expression Reification)
  (when abstraction
    (synthesis.constant @ $abstraction)
    (do [! phase.monad]
      [[@definition |abstraction|] (translation.definition archive $abstraction)
       .let [actual_arity (list.size parameters)]]
      (when |abstraction|
        {.#Some [_ {.#Some [expected_arity @abstraction]}]}
        (if (n.= expected_arity actual_arity)
          (exact_reification expression archive [$abstraction @abstraction expected_arity parameters])

          (n.< expected_arity actual_arity)
          (arbitrary_reification expression archive [abstraction parameters])
          
          ... (n.> expected_arity actual_arity)
          (successive_reification expression archive [$abstraction @abstraction expected_arity parameters]))
        
        _
        (arbitrary_reification expression archive [abstraction parameters])))

    _
    (arbitrary_reification expression archive [abstraction parameters])))
