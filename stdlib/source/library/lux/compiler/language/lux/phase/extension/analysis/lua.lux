... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [data
    [collection
     ["[0]" array]
     ["[0]" dictionary]
     ["[0]" list (.use "[1]:[0]" monoid)
      ["?[1]" \\projection]]]]
   [macro
    ["[0]" template]]
   ["[0]" type (.only)
    ["[0]" check]]
   ["[0]" meta (.only)
    ["[0]" code
     ["<[1]>" \\projection]]]
   ["[0]" target (.only)
    ["_" lua]]
   [compiler
    ["@[0]" type]
    ["@[0]" extension]]]]
 [//
  ["/" lux (.only custom)]
  [///
   ["[0]" extension]
   [//
    ["[0]" phase]
    ["[0]" analysis (.only Operation Phase Handler Bundle)
     ["[1]/[0]" type]]]]])

(the Nil
  (target.if target.lua
             ffi.Nil

             ... else
             Any))

(the Object
  (target.if target.lua
             (type (ffi.Object Any))

             ... else
             Any))

(the Function
  (target.if target.lua
             ffi.Function

             ... else
             Any))

(the object:get
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text ?list.any)
    (function (_ extension phase archive [fieldC objectC])
      (monad.let phase.monad
        [objectA (analysis/type.with ..Object
                   (phase archive objectC))
         _ (analysis/type.inference .Any)
         @ analysis.provenance]
        (pure {@type.:Extension @ [.prelude (@extension.synthesis extension)]
                                (list (analysis.text @ fieldC)
                                      objectA)})))]))

(the object:do
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text ?list.any (<code>.tuple (<>.some ?list.any)))
    (function (_ extension phase archive [methodC objectC inputsC])
      (monad.let [! phase.monad]
        [objectA (analysis/type.with ..Object
                   (phase archive objectC))
         inputsA (list.each' ! (|>> (phase archive) (analysis/type.with Any))
                             inputsC)
         _ (analysis/type.inference .Any)
         @ analysis.provenance]
        (pure {@type.:Extension @ [.prelude (@extension.synthesis extension)]
                                (list:composite (list (analysis.text @ methodC)
                                                      objectA)
                                                inputsA)})))]))

(the with_object_extensions
  (-> Bundle Bundle)
  (|>> (/.with "lua_object_get#" object:get)
       (/.with "lua_object_do#" object:do)
       (/.with "lua_object_nil#" (/.nullary ..Nil))
       (/.with "lua_object_nil?#" (/.unary Any Bit))
       ))

(template.with [<name> <fromT> <toT>]
  [(the <name>
     (-> Text Handler)
     (custom
      [?list.any
       (function (_ extension phase archive inputC)
         (monad.let [! phase.monad]
           [inputA (analysis/type.with (type <fromT>)
                     (phase archive inputC))
            _ (analysis/type.inference (type <toT>))
            @ analysis.provenance]
           (pure {@type.:Extension @ [.prelude (@extension.synthesis extension)]
                                   (list inputA)})))]))]

  [[utf8:encode Text (.Array (I64 Any))]
   [utf8:decode (.Array (I64 Any)) Text]])

(the with_utf8_extensions
  (-> Bundle Bundle)
  (|>> (/.with "lua_utf8_injection#" utf8:encode)
       (/.with "lua_utf8_projection#" utf8:decode)
       ))

(the lua:constant
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (monad.let phase.monad
        [_ (analysis/type.inference Any)
         @ analysis.provenance]
        (pure {@type.:Extension @ [.prelude (@extension.synthesis extension)]
                                (list (analysis.text @ name))})))]))

(the lua:of
  (-> Text Handler)
  (custom
   [(all <>.and ?list.any (<code>.tuple (<>.some ?list.any)))
    (function (_ extension phase archive [abstractionC inputsC])
      (monad.let [! phase.monad]
        [abstractionA (analysis/type.with ..Function
                        (phase archive abstractionC))
         inputsA (list.each' ! (|>> (phase archive) (analysis/type.with Any))
                             inputsC)
         _ (analysis/type.inference Any)
         @ analysis.provenance]
        (pure {@type.:Extension @ [.prelude (@extension.synthesis extension)]
                                (list:composite (list abstractionA) inputsA)})))]))

(the lua:power
  (-> Text Handler)
  (custom
   [(all <>.and ?list.any ?list.any)
    (function (_ extension phase archive [powerC baseC])
      (monad.let [! phase.monad]
        [powerA (analysis/type.with Decimal
                  (phase archive powerC))
         baseA (analysis/type.with Decimal
                 (phase archive baseC))
         _ (analysis/type.inference Decimal)
         @ analysis.provenance]
        (pure {@type.:Extension @ [.prelude (@extension.synthesis extension)]
                                (list powerA baseA)})))]))

(the lua:import
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (monad.let phase.monad
        [_ (analysis/type.inference ..Object)
         @ analysis.provenance]
        (pure {@type.:Extension @ [.prelude (@extension.synthesis extension)]
                                (list (analysis.text @ name))})))]))

(the lua:function
  (-> Text Handler)
  (custom
   [(all <>.and <code>.natural ?list.any)
    (function (_ extension phase archive [arity abstractionC])
      (monad.let phase.monad
        [.let [inputT (type.tuple (list.repeated arity Any))]
         abstractionA (analysis/type.with (-> inputT Any)
                        (phase archive abstractionC))
         _ (analysis/type.inference ..Function)
         @ analysis.provenance]
        (pure {@type.:Extension @ [.prelude (@extension.synthesis extension)]
                                (list (analysis.natural @ arity)
                                      abstractionA)})))]))

(the .public bundle
  Bundle
  (|> extension.empty
      with_object_extensions
      with_utf8_extensions

      (/.with "lua_constant#" lua:constant)
      (/.with "lua_of#" lua:of)
      (/.with "lua_power#" lua:power)
      (/.with "lua_import#" lua:import)
      (/.with "lua_function#" lua:function)
      (/.with "lua_script_universe#" (/.nullary .Bit))
      ))
