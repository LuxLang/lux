... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    ["<>" projection]
    ["[0]" monad (.only do)]]
   [data
    [collection
     ["[0]" array]
     ["[0]" dictionary]
     ["[0]" stack]]]
   [macro
    ["[0]" template]]
   ["[0]" type (.only)
    ["[0]" check]]
   ["[0]" meta (.only)
    ["[0]" code
     ["<[1]>" \\projection]]]
   [target
    ["_" lua]]]]
 [//
  ["/" lux (.only custom)]
  [///
   ["[0]" extension]
   [//
    ["[0]" phase]
    ["[0]" analysis (.only Operation Phase Handler Bundle)
     ["[1]/[0]" type]]]]])

(the Nil
  (for .lua ffi.Nil
       Any))

(the Object
  (for .lua (type (ffi.Object Any))
       Any))

(the Function
  (for .lua ffi.Function
       Any))

(the array::new
  (-> Text Handler)
  (custom
   [<code>.any
    (function (_ extension phase archive lengthC)
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [lengthA (analysis/type.expecting Natural
                                              (phase archive lengthC))
             _ (analysis/type.inference (type (array.Array' :read: :write:)))
             @ meta.provenance]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (stack lengthA)}]))))]))

(the array::length
  (-> Text Handler)
  (custom
   [<code>.any
    (function (_ extension phase archive arrayC)
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [arrayA (analysis/type.expecting (type (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference Natural)
             @ meta.provenance]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (stack arrayA)}]))))]))

(the array::read
  (-> Text Handler)
  (custom
   [(<>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (analysis/type.expecting Natural
                                             (phase archive indexC))
             arrayA (analysis/type.expecting (type (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference :read:)
             @ meta.provenance]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (stack indexA arrayA)}]))))]))

(the array::write
  (-> Text Handler)
  (custom
   [(all <>.and <code>.any <code>.any <code>.any)
    (function (_ extension phase archive [indexC valueC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (analysis/type.expecting Natural
                                             (phase archive indexC))
             valueA (analysis/type.expecting :write:
                                             (phase archive valueC))
             arrayA (analysis/type.expecting (type (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference (type (array.Array' :read: :write:)))
             @ meta.provenance]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (stack indexA valueA arrayA)}]))))]))

(the array::delete
  (-> Text Handler)
  (custom
   [(all <>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (analysis/type.expecting Natural
                                             (phase archive indexC))
             arrayA (analysis/type.expecting (type (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference (type (array.Array' :read: :write:)))
             @ meta.provenance]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (stack indexA arrayA)}]))))]))

(the with_array_extensions
  (-> Bundle Bundle)
  (|>> (/.install "lua_array_new#" array::new)
       (/.install "lua_array_length#" array::length)
       (/.install "lua_array_read#" array::read)
       (/.install "lua_array_write#" array::write)
       (/.install "lua_array_delete#" array::delete)
       ))

(the object::get
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text <code>.any)
    (function (_ extension phase archive [fieldC objectC])
      (do phase.monad
        [objectA (analysis/type.expecting ..Object
                                          (phase archive objectC))
         _ (analysis/type.inference .Any)
         @ meta.provenance]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (stack (analysis.text @ fieldC)
                                           objectA)}])))]))

(the object::do
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text <code>.any (<code>.tuple (<>.some <code>.any)))
    (function (_ extension phase archive [methodC objectC inputsC])
      (do [! phase.monad]
        [objectA (analysis/type.expecting ..Object
                                          (phase archive objectC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.expecting Any)) inputsC)
         _ (analysis/type.inference .Any)
         @ meta.provenance]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (stack.partial (analysis.text @ methodC)
                                                   objectA
                                                   inputsA)}])))]))

(the with_object_extensions
  (-> Bundle Bundle)
  (|>> (/.install "lua_object_get#" object::get)
       (/.install "lua_object_do#" object::do)
       (/.install "lua_object_nil#" (/.nullary ..Nil))
       (/.install "lua_object_nil?#" (/.unary Any Bit))
       ))

(template.with [<name> <fromT> <toT>]
  [(the <name>
     (-> Text Handler)
     (custom
      [<code>.any
       (function (_ extension phase archive inputC)
         (do [! phase.monad]
           [inputA (analysis/type.expecting (type <fromT>)
                                            (phase archive inputC))
            _ (analysis/type.inference (type <toT>))
            @ meta.provenance]
           (in [@ {analysis.#Extension (/.translation extension)
                                       (stack inputA)}])))]))]

  [utf8::encode Text (array.Array (I64 Any))]
  [utf8::decode (array.Array (I64 Any)) Text]
  )

(the with_utf8_extensions
  (-> Bundle Bundle)
  (|>> (/.install "lua_utf8_injection#" utf8::encode)
       (/.install "lua_utf8_projection#" utf8::decode)
       ))

(the lua::constant
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.inference Any)
         @ meta.provenance]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (stack (analysis.text @ name))}])))]))

(the lua::apply
  (-> Text Handler)
  (custom
   [(all <>.and <code>.any (<code>.tuple (<>.some <code>.any)))
    (function (_ extension phase archive [abstractionC inputsC])
      (do [! phase.monad]
        [abstractionA (analysis/type.expecting ..Function
                                               (phase archive abstractionC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.expecting Any)) inputsC)
         _ (analysis/type.inference Any)
         @ meta.provenance]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (stack.partial abstractionA inputsA)}])))]))

(the lua::power
  (-> Text Handler)
  (custom
   [(all <>.and <code>.any <code>.any)
    (function (_ extension phase archive [powerC baseC])
      (do [! phase.monad]
        [powerA (analysis/type.expecting Decimal
                                         (phase archive powerC))
         baseA (analysis/type.expecting Decimal
                                        (phase archive baseC))
         _ (analysis/type.inference Decimal)
         @ meta.provenance]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (stack powerA baseA)}])))]))

(the lua::import
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.inference ..Object)
         @ meta.provenance]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (stack (analysis.text @ name))}])))]))

(the lua::function
  (-> Text Handler)
  (custom
   [(all <>.and <code>.natural <code>.any)
    (function (_ extension phase archive [arity abstractionC])
      (do phase.monad
        [.let [inputT (type.tuple (stack.repeated arity Any))]
         abstractionA (analysis/type.expecting (-> inputT Any)
                                               (phase archive abstractionC))
         _ (analysis/type.inference ..Function)
         @ meta.provenance]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (stack (analysis.natural @ arity)
                                           abstractionA)}])))]))

(the .public bundle
  Bundle
  (|> extension.empty
      with_array_extensions
      with_object_extensions
      with_utf8_extensions

      (/.install "lua_constant#" lua::constant)
      (/.install "lua_apply#" lua::apply)
      (/.install "lua_power#" lua::power)
      (/.install "lua_import#" lua::import)
      (/.install "lua_function#" lua::function)
      (/.install "lua_script_universe#" (/.nullary .Bit))
      ))
