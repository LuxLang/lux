... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Declaration
                i64 variant
                the)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   ["[0]" function]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" hash)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)
      ["?[1]" \\projection]]
     ["[0]" sequence]]]
   [math
    ["[0]" number (.only)
     ["[0]" /64]]]
   ["[0]" macro (.only)
    ["[0]" syntax]
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [target
    ["_" js (.only Var Computation)]]]]
 ["[0]" ///
  ["[1][0]" reference]
  ["//[1]" ///
   ["[0]" phase]
   ["[0]" synthesis]
   ["[0]" translation (.only)
    ["[0]" script]]
   [///
    [meta
     [archive (.only Output Archive)
      ["[0]" registry (.only Registry)]
      ["[0]" unit]]]
    ["@[0]" type (.only Register)]]]])

(every .public Anchor
  [Register Text])

(every .public Value
  _.Expression)

(every .public Declaration
  _.Statement)

(template.with [<name> <base>]
  [(every .public <name>
     (<base> Anchor Value Declaration))]

  [[Operation translation.Operation]
   [Phase translation.Phase]
   [Handler translation.Handler]
   [Bundle translation.Bundle]]
  )

(every .public (Expression it)
  (-> Phase Archive it
      (Operation _.Expression)))

(every .public Phase!
  (-> Phase Archive synthesis.Term
      (Operation _.Statement)))

(every .public (Statement it)
  (-> Phase! Phase Archive it
      (Operation _.Statement)))

(.the .public high
  (-> (I64 Any)
      (I64 Any))
  (/64.>> 32))

(.the .public low
  (-> (I64 Any)
      (I64 Any))
  (let [mask (-- (/64.<< 32 1))]
    (|>> (/64.and mask))))

(.the .public unit
  Computation
  (_.string synthesis.unit))

(.the .public (flag value)
  (-> Bit
      Computation)
  (if value
      (_.string "")
      _.null))

(.the (feature name definition)
  (-> Var (-> Var _.Expression)
      _.Statement)
  (_.define name (definition name)))

(syntax.the .public (with_vars [vars (<code>.tuple (<>.some <code>.local))
                                body ?list.any])
  (monad.let [! meta.monad]
    [ids (list.complete ! (list.repeated (list.size vars) meta.seed))]
    (pure (list (` (let [(,* (|> vars
                                 (list.zipped_2 ids)
                                 (list#each (function (_ [id var])
                                              (list (code.local var)
                                                    (` (_.var (, (code.text (text "v" (%.natural id)))))))))
                                 list#conjoint))]
                     (, body)))))))

(syntax.the (the [declaration (<>.or <code>.local
                                     (<code>.form (<>.and <code>.local
                                                          (<>.some <code>.local))))
                  code ?list.any])
  (macro.with_names ['_ runtime]
    (let [runtime_name (` (_.var (, (code.text (code.as_text runtime)))))]
      (when declaration
        {.#Left name}
        (let ['name (code.local name)]
          (pure (list (` (.the .public (, 'name)
                           Var
                           (, runtime_name)))
                      
                      (` (.the (, (code.local (text "@" name)))
                           _.Statement
                           (..feature (, runtime_name)
                                      (function ((, '_) (, 'name))
                                        (, code))))))))
        
        {.#Right [name inputs]}
        (let ['name (code.local name)
              inputsC (list#each code.local inputs)
              inputs_typesC (list#each (function.constant (` _.Expression)) inputs)]
          (pure (list (` (.the .public ((, 'name) (,* inputsC))
                           (-> (,* inputs_typesC)
                               Computation)
                           (_.of (list (,* inputsC))
                                 (, runtime_name))))
                      
                      (` (.the (, (code.local (text "@" name)))
                           _.Statement
                           (..feature (, runtime_name)
                                      (function ((, '_) (, '_))
                                        (..with_vars [(,* inputsC)]
                                          (_.function (, '_) (list (,* inputsC))
                                            (, code))))))))))))))

(.the length
  (-> _.Expression
      Computation)
  (_.its "length"))

(.the last_index
  (-> _.Expression
      Computation)
  (|>> ..length (_.- (_.i32 +1))))

(.the (last_element tuple)
  (_.at (..last_index tuple)
        tuple))

(expansion.let [<recur> (these (all _.then
                                    (_.; (_.set lefts (_.- last_index_right lefts)))
                                    (_.; (_.set tuple (_.at last_index_right tuple)))))]
  (these (the (tuple//left lefts tuple)
           (with_vars [last_index_right]
             (<| (_.while (_.boolean true))
                 (all _.then
                      (_.define last_index_right (..last_index tuple))
                      (_.if (_.> lefts last_index_right)
                            ... No need for recursion
                            (_.return (_.at lefts tuple))
                            ... Needs recursion
                            <recur>)))))

         (the (tuple//right lefts tuple)
           (with_vars [last_index_right right_index]
             (<| (_.while (_.boolean true))
                 (all _.then
                      (_.define last_index_right (..last_index tuple))
                      (_.define right_index (_.+ (_.i32 +1) lefts))
                      (<| (_.if (_.= last_index_right right_index)
                                (_.return (_.at right_index tuple)))
                          (_.if (_.> last_index_right right_index)
                                ... Needs recursion.
                                <recur>)
                          (_.return (_.do "slice" (list right_index) tuple)))
                      ))))))

(.the .public variant_tag_field script.variant_lefts)
(.the .public variant_flag_field script.variant_right?)
(.the .public variant_value_field script.variant_choice)

(the variant//new
  (let [@this (_.var "this")]
    (with_vars [tag is_last value]
      (_.closure (list tag is_last value)
                 (all _.then
                      (_.; (_.set (_.its ..variant_tag_field @this) tag))
                      (_.; (_.set (_.its ..variant_flag_field @this) is_last))
                      (_.; (_.set (_.its ..variant_value_field @this) value))
                      )))))

(.the .public (variant tag last? value)
  (-> _.Expression _.Expression _.Expression
      Computation)
  (_.new ..variant//new (list tag last? value)))

(the (sum//get sum expected::right? expected::lefts)
  (let [mismatch! (_.return _.null)
        actual::lefts (|> sum (_.its ..variant_tag_field))
        actual::right? (|> sum (_.its ..variant_flag_field))
        actual::value (|> sum (_.its ..variant_value_field))
        recur! (all _.then
                    (_.; (_.set expected::lefts (|> expected::lefts
                                                    (_.- actual::lefts)
                                                    (_.- (_.i32 +1)))))
                    (_.; (_.set sum actual::value)))]
    (<| (_.while (_.boolean true))
        (_.if (_.= expected::lefts actual::lefts)
              (_.if (_.= expected::right? actual::right?)
                    (_.return actual::value)
                    mismatch!))
        (_.if (_.< expected::lefts actual::lefts)
              (_.if (_.= ..unit actual::right?)
                    recur!
                    mismatch!))
        (_.if (_.= ..unit expected::right?)
              (_.return (..variant (|> actual::lefts
                                       (_.- expected::lefts)
                                       (_.- (_.i32 +1)))
                                   actual::right?
                                   actual::value)))
        mismatch!)))

(.the left
  (-> _.Expression
      Computation)
  (..variant (_.i32 +0) (flag 0b)))

(.the right
  (-> _.Expression
      Computation)
  (..variant (_.i32 +0) (flag 1b)))

(.the none
  Computation
  (..left ..unit))

(.the some
  (-> _.Expression
      Computation)
  ..right)

(.the runtime//structure
  _.Statement
  (all _.then
       @tuple//left
       @tuple//right
       @variant//new
       @sum//get
       ))

(the (lux//try op)
  (with_vars [ex]
    (_.try (_.return (..right (_.of (list ..unit) op)))
           [ex (_.return (..left (_.its "stack" ex)))])))

(the (lux//program_args inputs)
  (with_vars [output idx]
    (all _.then
         (_.define output ..none)
         (_.for idx
                (..last_index inputs)
                (_.>= (_.i32 +0) idx)
                (_.-- idx)
                (_.; (_.set output (..some (_.array (list (_.at idx inputs)
                                                          output))))))
         (_.return output))))

(.the runtime//lux
  _.Statement
  (all _.then
       @lux//try
       @lux//program_args
       ))

(.the .public i64_low_field script.i64_low)
(.the .public i64_high_field script.i64_high)

(the i64::new
  (let [@this (_.var "this")]
    (with_vars [high low]
      (_.closure (list high low)
                 (all _.then
                      (_.; (_.set (_.its ..i64_high_field @this) high))
                      (_.; (_.set (_.its ..i64_low_field @this) low))
                      )))))

(.the .public (i64 high low)
  (-> _.Expression _.Expression
      Computation)
  (_.new ..i64::new (list high low)))

(template.with [<name> <op>]
  [(the (<name> subject parameter)
     (_.return (..i64 (<op> (_.its ..i64_high_field subject)
                            (_.its ..i64_high_field parameter))
                      (<op> (_.its ..i64_low_field subject)
                            (_.its ..i64_low_field parameter)))))]

  [[i64::xor _.bit_xor]
   [i64::or  _.bit_or]
   [i64::and _.bit_and]]
  )

(the (i64::not value)
  (_.return (..i64 (_.bit_not (_.its ..i64_high_field value))
                   (_.bit_not (_.its ..i64_low_field value)))))

(.the (cap_shift! shift)
  (-> Var
      _.Statement)
  (_.; (_.set shift (|> shift (_.bit_and (_.i32 +63))))))

(.the (no_shift! shift input)
  (-> Var Var
      (-> _.Expression
          _.Expression))
  (_.? (|> shift (_.= (_.i32 +0)))
       input))

(.the small_shift?
  (-> Var
      _.Expression)
  (|>> (_.< (_.i32 +32))))

(the (i64::<< input shift)
  (all _.then
       (..cap_shift! shift)
       (_.return (<| (..no_shift! shift input)
                     (_.? (..small_shift? shift)
                          (let [high (_.bit_or (|> input (_.its ..i64_high_field) (_.left_shift shift))
                                               (|> input (_.its ..i64_low_field) (_.logic_right_shift (_.- shift (_.i32 +32)))))
                                low (|> input (_.its ..i64_low_field) (_.left_shift shift))]
                            (..i64 high low)))
                     (let [high (|> input (_.its ..i64_low_field) (_.left_shift (_.- (_.i32 +32) shift)))]
                       (..i64 high (_.i32 +0)))))
       ))

(the (i64::arithmetic_>> input shift)
  (all _.then
       (..cap_shift! shift)
       (_.return (<| (..no_shift! shift input)
                     (_.? (..small_shift? shift)
                          (let [high (|> input (_.its ..i64_high_field) (_.arithmetic_right_shift shift))
                                low (|> input (_.its ..i64_low_field) (_.logic_right_shift shift)
                                        (_.bit_or (|> input (_.its ..i64_high_field) (_.left_shift (_.- shift (_.i32 +32))))))]
                            (..i64 high low)))
                     (let [high (_.? (|> input (_.its ..i64_high_field) (_.>= (_.i32 +0)))
                                     (_.i32 +0)
                                     (_.i32 -1))
                           low (|> input (_.its ..i64_high_field) (_.arithmetic_right_shift (_.- (_.i32 +32) shift)))]
                       (..i64 high low))))))

(the (i64::>> input shift)
  (all _.then
       (..cap_shift! shift)
       (_.return (<| (..no_shift! shift input)
                     (_.? (..small_shift? shift)
                          (let [high (|> input (_.its ..i64_high_field) (_.logic_right_shift shift))
                                low (|> input (_.its ..i64_low_field) (_.logic_right_shift shift)
                                        (_.bit_or (|> input (_.its ..i64_high_field) (_.left_shift (_.- shift (_.i32 +32))))))]
                            (..i64 high low)))
                     (_.? (|> shift (_.= (_.i32 +32)))
                          (..i64 (_.i32 +0) (|> input (_.its ..i64_high_field))))
                     (..i64 (_.i32 +0)
                            (|> input (_.its ..i64_high_field) (_.logic_right_shift (_.- (_.i32 +32) shift))))))))

(.the runtime//bit
  _.Statement
  (all _.then
       @i64::and
       @i64::or
       @i64::xor
       @i64::not
       @i64::<<
       @i64::arithmetic_>>
       @i64::>>
       ))

(the i64::2^16
  (_.left_shift (_.i32 +16) (_.i32 +1)))

(the i64::2^32
  (_.* i64::2^16 i64::2^16))

(the i64::2^64
  (_.* i64::2^32 i64::2^32))

(the i64::2^63
  (|> i64::2^64 (_./ (_.i32 +2))))

(the (i64::unsigned_low i64)
  (_.return (_.? (|> i64 (_.its ..i64_low_field) (_.>= (_.i32 +0)))
                 (|> i64 (_.its ..i64_low_field))
                 (|> i64 (_.its ..i64_low_field) (_.+ i64::2^32)))))

(the (i64::number i64)
  (_.return (|> i64
                (_.its ..i64_high_field)
                (_.* i64::2^32)
                (_.+ (i64::unsigned_low i64)))))

(the i64::zero
  (..i64 (_.i32 +0) (_.i32 +0)))

(the i64::minimum
  (..i64 (_.i32 (.integer (number.base_16 "80,00,00,00")))
         (_.i32 +0)))

(the i64::maximum
  (..i64 (_.i32 (.integer (number.base_16 "7F,FF,FF,FF")))
         (_.i32 (.integer (number.base_16 "FF,FF,FF,FF")))))

(the i64::one
  (..i64 (_.i32 +0) (_.i32 +1)))

(the (i64::= expected actual)
  (_.return (_.and (_.= (_.its ..i64_high_field expected)
                        (_.its ..i64_high_field actual))
                   (_.= (_.its ..i64_low_field expected)
                        (_.its ..i64_low_field actual)))))

(the (i64::+ parameter subject)
  (let [up_16 (_.left_shift (_.i32 +16))
        high_16 (_.logic_right_shift (_.i32 +16))
        low_16 (_.bit_and (_.i32 (.integer (number.base_16 "FFFF"))))
        hh (|>> (_.its ..i64_high_field) high_16)
        hl (|>> (_.its ..i64_high_field) low_16)
        lh (|>> (_.its ..i64_low_field) high_16)
        ll (|>> (_.its ..i64_low_field) low_16)]
    (with_vars [l48 l32 l16 l00
                r48 r32 r16 r00
                x48 x32 x16 x00]
      (all _.then
           (_.define l48 (hh subject))
           (_.define l32 (hl subject))
           (_.define l16 (lh subject))
           (_.define l00 (ll subject))

           (_.define r48 (hh parameter))
           (_.define r32 (hl parameter))
           (_.define r16 (lh parameter))
           (_.define r00 (ll parameter))

           (_.define x00 (_.+ l00 r00))
           
           (_.define x16 (|> (high_16 x00)
                             (_.+ l16)
                             (_.+ r16)))
           (_.; (_.set x00 (low_16 x00)))
           
           (_.define x32 (|> (high_16 x16)
                             (_.+ l32)
                             (_.+ r32)))
           (_.; (_.set x16 (low_16 x16)))
           
           (_.define x48 (|> (high_16 x32)
                             (_.+ l48)
                             (_.+ r48)
                             low_16))
           (_.; (_.set x32 (low_16 x32)))

           (_.return (..i64 (_.bit_or (up_16 x48) x32)
                            (_.bit_or (up_16 x16) x00)))
           ))))

(the (i64::opposite value)
  (_.return (_.? (i64::= i64::minimum value)
                 i64::minimum
                 (i64::+ i64::one (i64::not value)))))

(the i64::-one
  (i64::opposite i64::one))

(the (i64::of_number value)
  (_.return (<| (_.? (_.not_a_number? value)
                     i64::zero)
                (_.? (_.<= (_.opposite i64::2^63) value)
                     i64::minimum)
                (_.? (|> value (_.+ (_.i32 +1)) (_.>= i64::2^63))
                     i64::maximum)
                (_.? (|> value (_.< (_.i32 +0)))
                     (|> value _.opposite i64::of_number i64::opposite))
                (..i64 (|> value (_./ i64::2^32) _.to_i32)
                       (|> value (_.% i64::2^32) _.to_i32)))))

(the (i64::- parameter subject)
  (_.return (i64::+ (i64::opposite parameter) subject)))

(the (i64::x parameter subject)
  (let [up_16 (_.left_shift (_.i32 +16))
        high_16 (_.logic_right_shift (_.i32 +16))
        low_16 (_.bit_and (_.i32 (.integer (number.base_16 "FFFF"))))
        hh (|>> (_.its ..i64_high_field) high_16)
        hl (|>> (_.its ..i64_high_field) low_16)
        lh (|>> (_.its ..i64_low_field) high_16)
        ll (|>> (_.its ..i64_low_field) low_16)]
    (with_vars [l48 l32 l16 l00
                r48 r32 r16 r00
                x48 x32 x16 x00]
      (all _.then
           (_.define l48 (hh subject))
           (_.define l32 (hl subject))
           (_.define l16 (lh subject))
           (_.define l00 (ll subject))

           (_.define r48 (hh parameter))
           (_.define r32 (hl parameter))
           (_.define r16 (lh parameter))
           (_.define r00 (ll parameter))

           (_.define x00 (_.* l00 r00))
           (_.define x16 (|> (high_16 x00)
                             (_.+ (_.* l16 r00))))
           (_.; (_.set x00 (low_16 x00)))
           
           (_.define x32 (high_16 x16))
           (_.; (_.set x16 (|> x16 low_16 (_.+ (_.* l00 r16)))))
           (_.; (_.set x32 (|> x32 (_.+ (high_16 x16)))))
           (_.; (_.set x16 (low_16 x16)))

           (_.; (_.set x32 (|> x32 (_.+ (_.* l32 r00)))))
           (_.define x48 (high_16 x32))
           (_.; (_.set x32 (|> x32 low_16 (_.+ (_.* l16 r16)))))
           (_.; (_.set x48 (|> x48 (_.+ (high_16 x32)))))
           (_.; (_.set x32 (|> x32 low_16 (_.+ (_.* l00 r32)))))
           (_.; (_.set x48 (|> x48 (_.+ (high_16 x32)))))
           (_.; (_.set x32 (low_16 x32)))
           
           (_.; (_.set x48 (|> x48
                               (_.+ (_.* l48 r00))
                               (_.+ (_.* l32 r16))
                               (_.+ (_.* l16 r32))
                               (_.+ (_.* l00 r48))
                               low_16)))

           (_.return (..i64 (_.bit_or (up_16 x48) x32)
                            (_.bit_or (up_16 x16) x00)))
           ))))

(the (i64::< parameter subject)
  (let [negative? (|>> (_.its ..i64_high_field) (_.< (_.i32 +0)))]
    (with_vars [-subject? -parameter?]
      (all _.then
           (_.define -subject? (negative? subject))
           (_.define -parameter? (negative? parameter))
           (_.return (<| (_.? (_.and -subject? (_.not -parameter?))
                              (_.boolean true))
                         (_.? (_.and (_.not -subject?) -parameter?)
                              (_.boolean false))
                         (negative? (i64::- parameter subject))))
           ))))

(.the (i64::<= param subject)
  (-> _.Expression _.Expression
      _.Expression)
  (|> (i64::< param subject)
      (_.or (i64::= param subject))))

(.the negative?
  (i64::< i64::zero))

(the (i64::/ parameter subject)
  (<| (_.if (i64::= i64::zero parameter)
            (_.throw (_.string "Cannot divide by zero!")))
      (_.if (i64::= i64::zero subject)
            (_.return i64::zero))
      (_.if (i64::= i64::minimum subject)
            (<| (_.if (_.or (i64::= i64::one parameter)
                            (i64::= i64::-one parameter))
                      (_.return i64::minimum))
                (_.if (i64::= i64::minimum parameter)
                      (_.return i64::one))
                (with_vars [approximation]
                  (let [subject/2 (..i64::arithmetic_>> subject (_.i32 +1))]
                    (all _.then
                         (_.define approximation (i64::<< (i64::/ parameter
                                                                  subject/2)
                                                          (_.i32 +1)))
                         (_.if (i64::= i64::zero approximation)
                               (_.return (_.? (..negative? parameter)
                                              i64::one
                                              i64::-one))
                               (let [remainder (i64::- (i64::x approximation
                                                               parameter)
                                                       subject)]
                                 (_.return (i64::+ (i64::/ parameter
                                                           remainder)
                                                   approximation)))))))))
      (_.if (i64::= i64::minimum parameter)
            (_.return i64::zero))
      (_.if (..negative? subject)
            (_.return (_.? (..negative? parameter)
                           (i64::/ (i64::opposite parameter)
                                   (i64::opposite subject))
                           (i64::opposite (i64::/ parameter
                                                  (i64::opposite subject))))))
      (_.if (..negative? parameter)
            (_.return (i64::opposite (i64::/ (i64::opposite parameter) subject))))
      (with_vars [result remainder]
        (all _.then
             (_.define result i64::zero)
             (_.define remainder subject)
             (_.while (i64::<= remainder parameter)
                      (with_vars [approximate approximate_result approximate_remainder log2 delta]
                        (let [approximate_result' (i64::of_number approximate)
                              approx_remainder (i64::x parameter approximate_result)]
                          (all _.then
                               (_.define approximate (_.of (list (_.i32 +1)
                                                                 (_.of (list (_./ (i64::number parameter)
                                                                                  (i64::number remainder)))
                                                                       (_.var "Math.floor")))
                                                           (_.var "Math.max")))
                               (_.define log2 (_.of (list (_./ (_.var "Math.LN2")
                                                               (_.of (list approximate)
                                                                     (_.var "Math.log"))))
                                                    (_.var "Math.ceil")))
                               (_.define delta (_.? (_.> (_.i32 +48) log2)
                                                    (_.of (list (_.i32 +2)
                                                                (_.- (_.i32 +48)
                                                                     log2))
                                                          (_.var "Math.pow"))
                                                    (_.i32 +1)))
                               (_.define approximate_result approximate_result')
                               (_.define approximate_remainder approx_remainder)
                               (_.while (_.or (..negative? approximate_remainder)
                                              (i64::< approximate_remainder
                                                      remainder))
                                        (all _.then
                                             (_.; (_.set approximate (_.- delta approximate)))
                                             (_.; (_.set approximate_result approximate_result'))
                                             (_.; (_.set approximate_remainder approx_remainder))))
                               (_.; (_.set result (i64::+ (_.? (i64::= i64::zero approximate_result)
                                                               i64::one
                                                               approximate_result)
                                                          result)))
                               (_.; (_.set remainder (i64::- approximate_remainder remainder)))))))
             (_.return result)))))

(the (i64::% parameter subject)
  (let [flat (|> subject
                 (i64::/ parameter)
                 (i64::x parameter))]
    (_.return (i64::- flat subject))))

(.the runtime//i64
  _.Statement
  (all _.then
       ..runtime//bit

       @i64::2^16
       @i64::2^32
       @i64::2^64
       @i64::2^63
       @i64::unsigned_low
       @i64::new
       @i64::zero
       @i64::minimum
       @i64::maximum
       @i64::one
       @i64::=
       @i64::+
       @i64::opposite
       @i64::-one
       @i64::number
       @i64::of_number
       @i64::-
       @i64::x
       @i64::<
       @i64::/
       @i64::%
       ))

(the (text//index start part text)
  (with_vars [idx]
    (all _.then
         (_.define idx (|> text (_.do "indexOf" (list part (i64::number start)))))
         (_.return (_.? (_.= (_.i32 -1) idx)
                        ..none
                        (..some (i64::of_number idx)))))))

(the (text//clip offset length text)
  (_.return (|> text (_.do "substring" (list (_.its ..i64_low_field offset)
                                             (_.+ (_.its ..i64_low_field offset)
                                                  (_.its ..i64_low_field length)))))))

(the (text//char idx text)
  (with_vars [result]
    (all _.then
         (_.define result (|> text (_.do "charCodeAt" (list (_.its ..i64_low_field idx)))))
         (_.if (_.not_a_number? result)
               (_.throw (_.string "[Lux Error] Cannot get char from text."))
               (_.return (i64::of_number result))))))

(.the runtime//text
  _.Statement
  (all _.then
       @text//index
       @text//clip
       @text//char
       ))

(the (io//log message)
  (let [console (_.var "console")
        print (_.var "print")
        end! (_.return ..unit)

        has_console? (|> console _.type_of (_.= (_.string "undefined")) _.not)
        node_or_browser? (|> has_console?
                             (_.and (_.its "log" console)))
        nashorn? (|> print _.type_of (_.= (_.string "undefined")) _.not)]
    (<| (_.if node_or_browser?
              (all _.then
                   (_.; (|> console (_.do "log" (list message))))
                   end!))
        (_.if nashorn?
              (all _.then
                   (_.; (_.of (list message) print))
                   end!))
        end!)))

(the (io//error message)
  (_.throw (_.new (_.var "Error") (list message))))

(.the runtime//io
  _.Statement
  (all _.then
       @io//log
       @io//error
       ))

(the (js//get object field)
  (with_vars [temp]
    (all _.then
         (_.define temp (_.at field object))
         (_.return (_.? (_.= _.undefined temp)
                        ..none
                        (..some temp))))))

(the (js//set object field input)
  (all _.then
       (_.; (_.set (_.at field object) input))
       (_.return object)))

(the (js//delete object field)
  (all _.then
       (_.; (_.delete (_.at field object)))
       (_.return object)))

(.the runtime//js
  _.Statement
  (all _.then
       @js//get
       @js//set
       @js//delete
       ))

(the (array//write idx value array)
  (all _.then
       (_.; (_.set (_.at (_.its ..i64_low_field idx) array) value))
       (_.return array)))

(the (array//delete idx array)
  (all _.then
       (_.; (_.delete (_.at (_.its ..i64_low_field idx) array)))
       (_.return array)))

(the array#slice
  (|> (_.array (list))
      (_.its "slice")))

(.the runtime//array
  _.Statement
  (all _.then
       @array#slice
       @array//write
       @array//delete
       ))

(.the full
  _.Statement
  (all _.then
       runtime//structure
       runtime//i64
       runtime//text
       runtime//io
       runtime//js
       runtime//array
       runtime//lux
       ))

(.the module_id
  0)

(.the .public translate
  (Operation [Registry Output])
  (monad.let phase.monad
    [_ (translation.execute! ..full)
     _ (translation.save! ..module_id {.#None} ..full)]
    (pure [(|> registry.empty
               (registry.resource true unit.none)
               product.right)
           (sequence.sequence [..module_id
                               {.#None}
                               (|> ..full
                                   _.code
                                   (by utf8.binary as))])])))
