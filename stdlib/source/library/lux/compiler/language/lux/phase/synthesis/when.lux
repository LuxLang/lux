... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Pattern)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" product]
    ["[0]" bit]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix monoid)]
     ["[0]" stack (.use "[1]#[0]" mix)]
     ["[0]" set (.only Set)]]]
   [math
    [number
     ["n" natural]
     ["[0]" i64]
     ["[0]" decimal]]]
   [macro
    ["^" pattern]
    ["[0]" expansion]
    ["[0]" template]]]]
 ["[0]" ///
  [//
   ["[0]" phase (.use "[1]#[0]" monad)]
   ["[0]" analysis (.only Match)
    ["[2][0]" simple]
    ["[2][0]" complex]
    ["[2][0]" pattern (.only Pattern)]]
   ["/" synthesis (.only Path Operation Phase)
    ["[1][0]" access (.only)
     ["[2][0]" side]
     ["[2][0]" member (.only Member)]]]
   [///
    ["[1][0]" reference (.only)
     [register (.only Register)]
     ["[1]/[0]" variable (.only Variable)]]
    [meta
     [archive (.only Archive)]]]]])

(the clean_up
  (-> Path
      Path)
  (|>> {/.#Seq {/.#Pop}}))

(the (path' pattern end? thenC)
  (-> Pattern Bit (Operation Path)
      (Operation Path))
  (when pattern
    {///pattern.#Simple simple}
    (`` (when simple
          {///simple.#Unit}
          thenC

          {///simple.#Bit when}
          (phase#each (function (_ then)
                        {/.#Bit_Fork when then {.#None}})
                      thenC)

          (,, (template.with [<from> <to> <conversion>]
                [{<from> test}
                 (phase#each (function (_ then)
                               {<to> [(<conversion> test) then] (list)})
                             thenC)]

                [///simple.#Natural /.#I64_Fork .i64]
                [///simple.#Integer /.#I64_Fork .i64]
                [///simple.#Revolution /.#I64_Fork .i64]
                [///simple.#Decimal /.#F64_Fork |>]
                [///simple.#Text /.#Text_Fork |>]))))

    {///pattern.#Bind register}
    (<| (by phase.monad each (|>> {/.#Seq {/.#Bind register}}))
        /.with_new_local
        thenC)

    {///pattern.#Complex {///complex.#Variant [lefts right? value_pattern]}}
    (<| (phase#each (|>> {/.#Seq {/.#Access {/access.#Side [/side.#lefts lefts
                                                            /side.#right? right?]}}}))
        (path' value_pattern end?)
        (pipe.if [(pipe.new (not end?) [])]
          [(phase#each ..clean_up)]
          [])
        thenC)

    {///pattern.#Complex {///complex.#Tuple tuple}}
    (let [tuple::last (-- (list.size tuple))]
      (list#mix (function (_ [tuple::lefts tuple::member] nextC)
                  (.when tuple::member
                    {///pattern.#Simple {///simple.#Unit}}
                    nextC

                    _
                    (let [right? (n.= tuple::last tuple::lefts)
                          end?' (and end? right?)]
                      (<| (phase#each (|>> {/.#Seq {/.#Access {/access.#Member [/member.#lefts (if right?
                                                                                                 (-- tuple::lefts)
                                                                                                 tuple::lefts)
                                                                                /member.#right? right?]}}}))
                          (path' tuple::member end?')
                          (pipe.if [(pipe.new (not end?') [])]
                            [(phase#each ..clean_up)]
                            [])
                          nextC))))
                thenC
                (list.reversed (list.enumeration tuple))))

    {///pattern.#List it}
    (let [size (list.size it)
          last (-- size)]
      (|> (list#mix (function (_ [position item] nextC)
                      (.when item
                        {///pattern.#Simple {///simple.#Unit}}
                        nextC

                        _
                        (let [end? (and end?
                                        (n.= last position))]
                          (<| (phase#each (|>> {/.#Seq {/.#Access {/access.#Item position}}}))
                              (path' item end?)
                              (pipe.if [(pipe.new (not end?) [])]
                                [(phase#each ..clean_up)]
                                [])
                              nextC))))
                    thenC
                    (list.reversed (list.enumeration it)))
          (phase#each (|>> {/.#Seq {/.#List size}}))))
    ))

(the (path archive synthesize pattern bodyA)
  (-> Archive Phase Pattern analysis.Term
      (Operation Path))
  (path' pattern true (phase#each (|>> {/.#Then}) (synthesize archive bodyA))))

(the (weave_branch weave equivalence [new_test new_then] [[old_test old_then] old_tail])
  (for_any (_ it)
    (-> (-> Path Path Path) (Equivalence it) [it Path] (/.Fork it Path)
        (/.Fork it Path)))
  (if (by equivalence = new_test old_test)
    [[old_test (weave new_then old_then)] old_tail]
    [[old_test old_then]
     (when (list.item 0 old_tail)
       {try.#Failure _}
       (list [new_test new_then])
       
       {try.#Success old_item}
       (let [[head tail] (weave_branch weave equivalence [new_test new_then] [old_item (list.after 1 old_tail)])]
         (list#composite (list head) tail)))]))

(the (weave_fork weave equivalence [new_head new_tail] old_fork)
  (for_any (_ it)
    (-> (-> Path Path Path) (Equivalence it) (/.Fork it Path) (/.Fork it Path)
        (/.Fork it Path)))
  (list#mix (..weave_branch weave equivalence)
            old_fork
            (list#composite (list new_head) new_tail)))

(the (weave new old)
  (-> Path Path
      Path)
  (expansion.let [<default> (these {/.#Alt old new})]
    (`` (when [new old]
          [_
           {/.#Alt old_left old_right}]
          {/.#Alt old_left
                  (weave new old_right)}

          [{/.#Seq preN postN}
           {/.#Seq preO postO}]
          (when (weave preN preO)
            {/.#Alt _}
            <default>

            woven
            {/.#Seq woven (weave postN postO)})

          [{/.#Pop} {/.#Pop}]
          old

          [{/.#Bit_Fork new_when new_then new_else}
           {/.#Bit_Fork old_when old_then old_else}]
          (if (bit.= new_when old_when)
            {/.#Bit_Fork old_when
                         (weave new_then old_then)
                         (when [new_else old_else]
                           [{.#None} {.#None}]
                           {.#None}

                           (^.or [{.#Some woven_then} {.#None}]
                                 [{.#None} {.#Some woven_then}])
                           {.#Some woven_then}

                           [{.#Some new_else} {.#Some old_else}]
                           {.#Some (weave new_else old_else)})}
            {/.#Bit_Fork old_when
                         (when new_else
                           {.#None}
                           old_then

                           {.#Some new_else}
                           (weave new_else old_then))
                         {.#Some (when old_else
                                   {.#None}
                                   new_then

                                   {.#Some old_else}
                                   (weave new_then old_else))}})

          (,, (template.with [<tag> <equivalence>]
                [[{<tag> new_fork} {<tag> old_fork}]
                 {<tag> (..weave_fork weave <equivalence> new_fork old_fork)}]

                [/.#I64_Fork i64.equivalence]
                [/.#F64_Fork decimal.equivalence]
                [/.#Text_Fork text.equivalence]))
          
          (,, (template.with [<access> <side> <lefts> <right?>]
                [[{/.#Access {<access> [<lefts> newL <right?> <side>]}}
                  {/.#Access {<access> [<lefts> oldL <right?> <side>]}}]
                 (if (n.= newL oldL)
                   old
                   <default>)]

                [/access.#Side .false /side.#lefts /side.#right?]
                [/access.#Side .true /side.#lefts /side.#right?]

                [/access.#Member .false /member.#lefts /member.#right?]
                [/access.#Member .true /member.#lefts /member.#right?]))

          [{/.#Bind newR} {/.#Bind oldR}]
          (if (n.= newR oldR)
            old
            <default>)

          _
          <default>))))

(the .public (synthesize_when synthesize @ archive input [[headP headA] tailPA+])
  (-> Phase Provenance Archive /.Term Match
      (Operation /.Term))
  (do [! phase.monad]
    [headSP (path archive synthesize headP headA)
     tailSP+ (list.each' ! (product.uncurried (path archive synthesize)) tailPA+)]
    (in (/.when @ [input (list#mix weave headSP tailSP+)]))))

(the !masking
  (template.macro (_ <@> <variable> <output>)
    [[[{///pattern.#Bind <variable>}
       [<@> {analysis.#Reference (///reference.local <output>)}]]
      (stack)]]))

(the .public (synthesize_masking synthesize @ archive input @variable @output)
  (-> Phase Provenance Archive /.Term Register Register
      (Operation /.Term))
  (if (n.= @variable @output)
    (phase#in input)
    (do phase.monad
      [body (/.with_new_local
              (synthesize archive [@ {analysis.#Reference (///reference.local @output)}]))]
      (in (/.let @ @variable input body)))))

(the .public (synthesize @ synthesize^ [headB tailB+] archive inputA)
  (-> Provenance Phase Match
      Phase)
  (do [! phase.monad]
    [inputS (synthesize^ archive inputA)]
    (when [headB (list.as_stack tailB+)]
      (!masking @ @variable @output)
      (..synthesize_masking synthesize^ @ archive inputS @variable @output)
      
      [head tail]
      (..synthesize_when synthesize^ @ archive inputS [head (list.of_stack tail)]))))

(the .public (count_pops path)
  (-> Path
      [Natural Path])
  (when path
    (/.path/seq {/.#Pop} path')
    (let [[pops post_pops] (count_pops path')]
      [(++ pops) post_pops])

    _
    [0 path]))

(the .public pattern_matching_error
  "Invalid expression for pattern-matching.")

(every .public Storage
  (Record
   [#bindings (Set Register)
    #dependencies (Set Variable)]))

(the empty
  Storage
  [#bindings (set.empty n.hash)
   #dependencies (set.empty ///reference/variable.hash)])

... TODO: Use this to declare all local variables at the beginning of
... script functions.
... That way, it should be possible to do cheap "let" expressions,
... since the variable will exist beforehand, so no closure will need
... to be created for it.
... Apply this trick to JS, Python et al.
(the .public (storage path)
  (-> Path
      Storage)
  (loop (for_path [path path
                   path_storage ..empty])
    (when path
      (^.or {/.#Pop}
            {/.#Access Access}
            {/.#List size})
      path_storage

      (/.path/bind register)
      (revised #bindings (set.has register)
               path_storage)

      {/.#Bit_Fork _ default else}
      (|> (when else
            {.#None}
            path_storage
            
            {.#Some else}
            (for_path else path_storage))
          (for_path default))

      (^.or {/.#I64_Fork [head tail]}
            {/.#F64_Fork [head tail]}
            {/.#Text_Fork [head tail]})
      (|> (list#composite (list head) tail)
          (list#each product.right)
          (list#mix for_path path_storage))

      (^.or (/.path/seq left right)
            (/.path/alt left right))
      (stack#mix for_path path_storage (stack left right))

      (/.path/then bodyS)
      (loop (for_synthesis [bodyS bodyS
                            synthesis_storage path_storage])
        (when bodyS
          (^.or [@ {/.#Simple _}]
                (/.constant @ _))
          synthesis_storage
          
          (/.variant @ [lefts right? valueS])
          (for_synthesis valueS synthesis_storage)

          (/.tuple @ members)
          (list#mix for_synthesis synthesis_storage members)

          [@ {/.#Reference {///reference.#Variable {///reference/variable.#Local register}}}]
          (if (set.member? (its #bindings synthesis_storage) register)
            synthesis_storage
            (revised #dependencies (set.has {///reference/variable.#Local register}) synthesis_storage))

          [@ {/.#Reference {///reference.#Variable var}}]
          (revised #dependencies (set.has var) synthesis_storage)

          (/.reification @ [functionS argsS])
          (list#mix for_synthesis (for_synthesis functionS synthesis_storage) argsS)

          (/.abstraction @ [environment arity bodyS])
          (list#mix for_synthesis synthesis_storage environment)

          (/.when @ [inputS pathS])
          (revised #dependencies
                   (set.union (its #dependencies (for_path pathS synthesis_storage)))
                   (for_synthesis inputS synthesis_storage))

          (/.tail_recursion @ [start initsS+ iterationS])
          (revised #dependencies
                   (set.union (|> synthesis_storage
                                  (revised #bindings (set.union (|> initsS+
                                                                    list.enumeration
                                                                    (list#each (|>> product.left (n.+ start)))
                                                                    (set.of_list n.hash))))
                                  (for_synthesis iterationS)
                                  (its #dependencies)))
                   (list#mix for_synthesis synthesis_storage initsS+))

          (/.tail_iteration @ replacementsS+)
          (list#mix for_synthesis synthesis_storage replacementsS+)

          [@ {/.#Extension [extension argsS]}]
          (list#mix for_synthesis synthesis_storage argsS)))
      )))
