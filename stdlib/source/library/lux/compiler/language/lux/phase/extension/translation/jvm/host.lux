... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Type Parameter Array
                argument)
   [abstract
    ["<>" projection (.use "[1]:[0]" functor)]
    ["[0]" monad]]
   [control
    ["[0]" maybe (.use "[1]:[0]" functor)]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    [binary
     ["[0]" \\injection]]
    ["[0]" text (.only)
     ["%" \\injection]
     ["<[1]>" \\projection]]
    [collection
     ["[0]" list (.use "[1]:[0]" monad mix monoid)
      ["?[1]" \\projection]]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" set (.only Set)]
     ["[0]" sequence]]]
   [math
    [number
     ["i[0]" /32
      ["[1]" integer]]
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]
    ["[0]" template]
    ["[0]" expansion]]
   [meta
    ["[0]" provenance]]
   [target
    [jvm
     ["[0]" version]
     ["[0]" modifier (.use "[1]:[0]" monoid)]
     ["[0]" method (.only Method)]
     ["[0]" class (.only Class)]
     [constant
      [pool (.only Resource)]]
     [encoding
      [name
       ["[0]" internal]]]
     ["_" bytecode (.only Bytecode) (.use "[1]:[0]" monad)
      ["__" instruction (.only Primitive_Array_Type)]]
     ["[0]" type (.only Type Typed Argument)
      ["[0]" category (.only Void Value Return Primitive Object Array Var Parameter)]
      ["[0]" box]
      ["[0]" reflection]
      ["[0]" signature]
      ["[0]" projection]]]]]]
 ["[0]" //
  ["[0]" common (.only custom)]
  ["///[1]" ////
   [translation
    [extension (.only Nullary Unary Binary Trinary Variadic
                      nullary unary binary trinary variadic)]
    ["///" jvm (.only)
     ["[1][0]" runtime (.only Operation Bundle Phase Handler)]
     ["[1][0]" reference]
     ["[1][0]" value]
     [function
      [field
       [variable
        ["[0]" foreign]]]]]]
   ["[0]" extension (.only)
    [analysis
     ["/" jvm]]]
   ["/[1]" //
    ["[0]" phase]
    ["[1][0]" translation]
    ["[0]" synthesis (.only Path)
     ["<[1]>" \\projection (.only Projection)]
     ["[0]" path]]
    [///
     ["@[0]" type (.only Register Variable Environment)]
     [meta
      ["[0]" archive (.only Archive)
       ["[0]" artifact]
       ["[0]" unit]]
      ["[0]" cache
       [dependency
        ["[1]/[0]" artifact]]]]
     ["[0]" extension
      ["[1]/[0]" jvm]]]]]])

(template.with [<name> <0>]
  [(the <name>
     (Bytecode Any)
     (all _.composite
          _.l2i
          <0>))]

  [[l2s _.i2s]
   [l2b _.i2b]
   [l2c _.i2c]])

(template.with [<conversion> <name>]
  [(the (<name> inputG)
     (Unary (Bytecode Any))
     (if (identical? _.nop <conversion>)
         inputG
         (all _.composite
              inputG
              <conversion>)))]
  
  [[_.d2f conversion:double_to_float]
   [_.d2i conversion:double_to_int]
   [_.d2l conversion:double_to_long]
   
   [_.f2d conversion:float_to_double]
   [_.f2i conversion:float_to_int]
   [_.f2l conversion:float_to_long]
   
   [_.i2b conversion:int_to_byte]
   [_.i2c conversion:int_to_char]
   [_.i2d conversion:int_to_double]
   [_.i2f conversion:int_to_float]
   [_.i2l conversion:int_to_long]
   [_.i2s conversion:int_to_short]
   
   [_.l2d conversion:long_to_double]
   [_.l2f conversion:long_to_float]
   [_.l2i conversion:long_to_int]
   [..l2s conversion:long_to_short]
   [..l2b conversion:long_to_byte]
   [..l2c conversion:long_to_char]
   
   [_.i2b conversion:char_to_byte]
   [_.i2s conversion:char_to_short]
   [_.nop conversion:char_to_int]
   [_.i2l conversion:char_to_long]
   
   [_.i2l conversion:byte_to_long]
   
   [_.i2l conversion:short_to_long]])

(the with_conversion
  (Change Bundle)
  (|>> (common.with extension/jvm.conversion_double_to_float (unary conversion:double_to_float))
       (common.with extension/jvm.conversion_double_to_int (unary conversion:double_to_int))
       (common.with extension/jvm.conversion_double_to_long (unary conversion:double_to_long))
       
       (common.with extension/jvm.conversion_float_to_double (unary conversion:float_to_double))
       (common.with extension/jvm.conversion_float_to_int (unary conversion:float_to_int))
       (common.with extension/jvm.conversion_float_to_long (unary conversion:float_to_long))
       
       (common.with extension/jvm.conversion_int_to_byte (unary conversion:int_to_byte))
       (common.with extension/jvm.conversion_int_to_char (unary conversion:int_to_char))
       (common.with extension/jvm.conversion_int_to_double (unary conversion:int_to_double))
       (common.with extension/jvm.conversion_int_to_float (unary conversion:int_to_float))
       (common.with extension/jvm.conversion_int_to_long (unary conversion:int_to_long))
       (common.with extension/jvm.conversion_int_to_short (unary conversion:int_to_short))
       
       (common.with extension/jvm.conversion_long_to_double (unary conversion:long_to_double))
       (common.with extension/jvm.conversion_long_to_float (unary conversion:long_to_float))
       (common.with extension/jvm.conversion_long_to_int (unary conversion:long_to_int))
       (common.with extension/jvm.conversion_long_to_short (unary conversion:long_to_short))
       (common.with extension/jvm.conversion_long_to_byte (unary conversion:long_to_byte))
       (common.with extension/jvm.conversion_long_to_char (unary conversion:long_to_char))
       
       (common.with extension/jvm.conversion_char_to_byte (unary conversion:char_to_byte))
       (common.with extension/jvm.conversion_char_to_short (unary conversion:char_to_short))
       (common.with extension/jvm.conversion_char_to_int (unary conversion:char_to_int))
       (common.with extension/jvm.conversion_char_to_long (unary conversion:char_to_long))
       
       (common.with extension/jvm.conversion_byte_to_long (unary conversion:byte_to_long))
       
       (common.with extension/jvm.conversion_short_to_long (unary conversion:short_to_long))
       ))

(template.with [<name> <op>]
  [(the (<name> [parameter! subject!])
     (Binary (Bytecode Any))
     (all _.composite
          subject!
          parameter!
          <op>))]

  [[int:+ _.iadd]
   [int:- _.isub]
   [int:x _.imul]
   [int:/ _.idiv]
   [int:% _.irem]
   [int:and _.iand]
   [int:or _.ior]
   [int:xor _.ixor]
   [int:shl _.ishl]
   [int:shr _.ishr]
   [int:ushr _.iushr]
   
   [long:+ _.ladd]
   [long:- _.lsub]
   [long:x _.lmul]
   [long:/ _.ldiv]
   [long:% _.lrem]
   [long:and _.land]
   [long:or _.lor]
   [long:xor _.lxor]
   [long:shl _.lshl]
   [long:shr _.lshr]
   [long:ushr _.lushr]

   [float:+ _.fadd]
   [float:- _.fsub]
   [float:x _.fmul]
   [float:/ _.fdiv]
   [float:% _.frem]
   
   [double:+ _.dadd]
   [double:- _.dsub]
   [double:x _.dmul]
   [double:/ _.ddiv]
   [double:% _.drem]])

(template.with [<name> <op>]
  [(the (<name> [expected actual])
     (Binary (Bytecode Any))
     (all _.composite
          actual
          expected
          (common.predicate <op>)))]

  [[int:= _.if_icmpeq]
   [int:< _.if_icmplt]

   [char:= _.if_icmpeq]
   [char:< _.if_icmplt]])

(template.with [<name> <op> <expected>]
  [(the (<name> [expected actual])
     (Binary (Bytecode Any))
     (all _.composite
          actual
          expected
          <op>
          (_.int (i/32.of <expected>))
          (common.predicate _.if_icmpeq)))]

  [[long:= _.lcmp +0]
   [long:< _.lcmp -1]
   
   [float:= _.fcmpg +0]
   [float:< _.fcmpg -1]

   [double:= _.dcmpg +0]
   [double:< _.dcmpg -1]])

(the with_int
  (Change Bundle)
  (|>> (common.with extension/jvm.int_+ (binary int:+))
       (common.with extension/jvm.int_- (binary int:-))
       (common.with extension/jvm.int_x (binary int:x))
       (common.with extension/jvm.int_/ (binary int:/))
       (common.with extension/jvm.int_% (binary int:%))
       (common.with extension/jvm.int_= (binary int:=))
       (common.with extension/jvm.int_< (binary int:<))
       (common.with extension/jvm.int_and (binary int:and))
       (common.with extension/jvm.int_or (binary int:or))
       (common.with extension/jvm.int_xor (binary int:xor))
       (common.with extension/jvm.int_shl (binary int:shl))
       (common.with extension/jvm.int_shr (binary int:shr))
       (common.with extension/jvm.int_ushr (binary int:ushr))
       ))

(the with_long
  (Change Bundle)
  (|>> (common.with extension/jvm.long_+ (binary long:+))
       (common.with extension/jvm.long_- (binary long:-))
       (common.with extension/jvm.long_x (binary long:x))
       (common.with extension/jvm.long_/ (binary long:/))
       (common.with extension/jvm.long_% (binary long:%))
       (common.with extension/jvm.long_= (binary long:=))
       (common.with extension/jvm.long_< (binary long:<))
       (common.with extension/jvm.long_and (binary long:and))
       (common.with extension/jvm.long_or (binary long:or))
       (common.with extension/jvm.long_xor (binary long:xor))
       (common.with extension/jvm.long_shl (binary long:shl))
       (common.with extension/jvm.long_shr (binary long:shr))
       (common.with extension/jvm.long_ushr (binary long:ushr))
       ))

(the with_float
  (Change Bundle)
  (|>> (common.with extension/jvm.float_+ (binary float:+))
       (common.with extension/jvm.float_- (binary float:-))
       (common.with extension/jvm.float_x (binary float:x))
       (common.with extension/jvm.float_/ (binary float:/))
       (common.with extension/jvm.float_% (binary float:%))
       (common.with extension/jvm.float_= (binary float:=))
       (common.with extension/jvm.float_< (binary float:<))
       ))

(the with_double
  (Change Bundle)
  (|>> (common.with extension/jvm.double_+ (binary double:+))
       (common.with extension/jvm.double_- (binary double:-))
       (common.with extension/jvm.double_x (binary double:x))
       (common.with extension/jvm.double_/ (binary double:/))
       (common.with extension/jvm.double_% (binary double:%))
       (common.with extension/jvm.double_= (binary double:=))
       (common.with extension/jvm.double_< (binary double:<))
       ))

(the with_char
  (Change Bundle)
  (|>> (common.with extension/jvm.char_= (binary char:=))
       (common.with extension/jvm.char_< (binary char:<))
       ))

(template.with [<name> <category> <projection>]
  [(the .public <name>
     (Projection (Type <category>))
     (<text>.then <projection> <synthesis>.text))]

  [[var Var projection.var]
   [class category.Class projection.class]
   [object Object projection.object]
   [value Value projection.value]
   [return Return projection.return]])

(the reflection
  (for_any (_ category)
    (-> (Type (Value category))
        Text))
  (|>> type.reflection reflection.reflection))

(the signature
  (for_any (_ category)
    (-> (Type category)
        Text))
  (|>> type.signature signature.signature))

(exception.the .public (not_an_object_array arrayJT)
  (Exception (Type Array))
  (exception.report
   (list ["JVM type" (..signature arrayJT)])))

(the .public object_array
  (Projection (Type Object))
  (monad.let <>.monad
    [arrayJT (<text>.then projection.array <synthesis>.text)]
    (when (projection.array? arrayJT)
      {.:Some elementJT}
      (when (projection.object? elementJT)
        {.:Some elementJT}
        (pure elementJT)

        {.:None}
        (<>.failure (exception.error ..not_an_object_array [arrayJT])))
      
      {.:None}
      (undefined))))

(the (primitive_array_length_handler jvm_primitive)
  (-> (Type Primitive)
      Handler)
  (..custom
   [?list.any
    (function (_ translate archive arrayS)
      (monad.let phase.monad
        [arrayG (translate archive arrayS)]
        (pure (all _.composite
                   arrayG
                   (_.checkcast (type.array jvm_primitive))
                   _.arraylength))))]))

(the array:length:object
  Handler
  (..custom
   [(all <>.and ..object_array ?list.any)
    (function (_ translate archive [elementJT arrayS])
      (monad.let phase.monad
        [arrayG (translate archive arrayS)]
        (pure (all _.composite
                   arrayG
                   (_.checkcast (type.array elementJT))
                   _.arraylength))))]))

(the (new_primitive_array_handler jvm_primitive)
  (-> Primitive_Array_Type
      Handler)
  (..custom
   [?list.any
    (function (_ translate archive [lengthS])
      (monad.let phase.monad
        [lengthG (translate archive lengthS)]
        (pure (all _.composite
                   lengthG
                   (_.newarray jvm_primitive)))))]))

(the array:new:object
  Handler
  (..custom
   [(all <>.and ..object ?list.any)
    (function (_ translate archive [objectJT lengthS])
      (monad.let phase.monad
        [lengthG (translate archive lengthS)]
        (pure (all _.composite
                   lengthG
                   (_.anewarray objectJT)))))]))

(the (read_primitive_array_handler jvm_primitive loadG)
  (-> (Type Primitive) (Bytecode Any)
      Handler)
  (..custom
   [(all <>.and ?list.any ?list.any)
    (function (_ translate archive [idxS arrayS])
      (monad.let phase.monad
        [arrayG (translate archive arrayS)
         idxG (translate archive idxS)]
        (pure (all _.composite
                   arrayG
                   (_.checkcast (type.array jvm_primitive))
                   idxG
                   loadG))))]))

(the array:read:object
  Handler
  (..custom
   [(all <>.and ..object_array ?list.any ?list.any)
    (function (_ translate archive [elementJT idxS arrayS])
      (monad.let phase.monad
        [arrayG (translate archive arrayS)
         idxG (translate archive idxS)]
        (pure (all _.composite
                   arrayG
                   (_.checkcast (type.array elementJT))
                   idxG
                   _.aaload))))]))

(the (write_primitive_array_handler jvm_primitive storeG)
  (-> (Type Primitive) (Bytecode Any)
      Handler)
  (..custom
   [(all <>.and ?list.any ?list.any ?list.any)
    (function (_ translate archive [idxS valueS arrayS])
      (monad.let phase.monad
        [arrayG (translate archive arrayS)
         idxG (translate archive idxS)
         valueG (translate archive valueS)]
        (pure (all _.composite
                   arrayG
                   (_.checkcast (type.array jvm_primitive))
                   _.dup
                   idxG
                   valueG
                   storeG))))]))

(the array:write:object
  Handler
  (..custom
   [(all <>.and ..object_array ?list.any ?list.any ?list.any)
    (function (_ translate archive [elementJT idxS valueS arrayS])
      (monad.let phase.monad
        [arrayG (translate archive arrayS)
         idxG (translate archive idxS)
         valueG (translate archive valueS)]
        (pure (all _.composite
                   arrayG
                   (_.checkcast (type.array elementJT))
                   _.dup
                   idxG
                   valueG
                   _.aastore))))]))

(the with_array
  (Change Bundle)
  (|>> (common.with extension/jvm.array_length_boolean (primitive_array_length_handler type.boolean))
       (common.with extension/jvm.array_length_byte (primitive_array_length_handler type.byte))
       (common.with extension/jvm.array_length_short (primitive_array_length_handler type.short))
       (common.with extension/jvm.array_length_int (primitive_array_length_handler type.int))
       (common.with extension/jvm.array_length_long (primitive_array_length_handler type.long))
       (common.with extension/jvm.array_length_float (primitive_array_length_handler type.float))
       (common.with extension/jvm.array_length_double (primitive_array_length_handler type.double))
       (common.with extension/jvm.array_length_char (primitive_array_length_handler type.char))
       (common.with extension/jvm.array_length_object array:length:object)

       (common.with extension/jvm.array_new_boolean (new_primitive_array_handler __.t_boolean))
       (common.with extension/jvm.array_new_byte (new_primitive_array_handler __.t_byte))
       (common.with extension/jvm.array_new_short (new_primitive_array_handler __.t_short))
       (common.with extension/jvm.array_new_int (new_primitive_array_handler __.t_int))
       (common.with extension/jvm.array_new_long (new_primitive_array_handler __.t_long))
       (common.with extension/jvm.array_new_float (new_primitive_array_handler __.t_float))
       (common.with extension/jvm.array_new_double (new_primitive_array_handler __.t_double))
       (common.with extension/jvm.array_new_char (new_primitive_array_handler __.t_char))
       (common.with extension/jvm.array_new_object array:new:object)

       (common.with extension/jvm.array_read_boolean (read_primitive_array_handler type.boolean _.baload))
       (common.with extension/jvm.array_read_byte (read_primitive_array_handler type.byte _.baload))
       (common.with extension/jvm.array_read_short (read_primitive_array_handler type.short _.saload))
       (common.with extension/jvm.array_read_int (read_primitive_array_handler type.int _.iaload))
       (common.with extension/jvm.array_read_long (read_primitive_array_handler type.long _.laload))
       (common.with extension/jvm.array_read_float (read_primitive_array_handler type.float _.faload))
       (common.with extension/jvm.array_read_double (read_primitive_array_handler type.double _.daload))
       (common.with extension/jvm.array_read_char (read_primitive_array_handler type.char _.caload))
       (common.with extension/jvm.array_read_object array:read:object)

       (common.with extension/jvm.array_write_boolean (write_primitive_array_handler type.boolean _.bastore))
       (common.with extension/jvm.array_write_byte (write_primitive_array_handler type.byte _.bastore))
       (common.with extension/jvm.array_write_short (write_primitive_array_handler type.short _.sastore))
       (common.with extension/jvm.array_write_int (write_primitive_array_handler type.int _.iastore))
       (common.with extension/jvm.array_write_long (write_primitive_array_handler type.long _.lastore))
       (common.with extension/jvm.array_write_float (write_primitive_array_handler type.float _.fastore))
       (common.with extension/jvm.array_write_double (write_primitive_array_handler type.double _.dastore))
       (common.with extension/jvm.array_write_char (write_primitive_array_handler type.char _.castore))
       (common.with extension/jvm.array_write_object array:write:object)
       ))

(the (object:null _)
  (Nullary (Bytecode Any))
  _.aconst_null)

(the (object:null? objectG)
  (Unary (Bytecode Any))
  (all _.composite
       objectG
       (common.predicate _.ifnull)))

(the (object:synchronized [monitorG exprG])
  (Binary (Bytecode Any))
  (all _.composite
       monitorG
       _.dup
       _.monitorenter
       exprG
       _.swap
       _.monitorexit))

(the unitG
  (_.string synthesis.unit))

(the (object:throw exceptionG)
  (Unary (Bytecode Any))
  (all _.composite
       exceptionG
       (_.checkcast (type.class (list) "java.lang.Throwable"))
       ///runtime.throw
       unitG))

(the $Class (type.class (list) "java.lang.Class"))
(the $String (type.class (list) "java.lang.String"))

(the object:class
  Handler
  (..custom
   [<synthesis>.text
    (function (_ translate archive [class])
      (monad.let phase.monad
        []
        (pure (all _.composite
                   (_.string class)
                   (_.invokestatic ..$Class "forName" (type.method [(list) (list ..$String) ..$Class (list)]))))))]))

(the object:instance?
  Handler
  (..custom
   [(all <>.and <synthesis>.text ?list.any)
    (function (_ translate archive [class objectS])
      (monad.let phase.monad
        [objectG (translate archive objectS)]
        (pure (all _.composite
                   objectG
                   (_.instanceof (type.class (list) class))
                   (///value.boxed type.boolean)))))]))

(the object:cast
  Handler
  (..custom
   [(all <>.and <synthesis>.text <synthesis>.text ?list.any)
    (function (_ translate archive [from to valueS])
      (monad.let phase.monad
        [valueG (translate archive valueS)]
        (pure (`` (if (,, (template.with [<object> <type>]
                            [(and (text.= (..reflection <type>) from)
                                  (text.= <object> to))
                             (all _.composite
                                  valueG
                                  (///value.boxed <type>))

                             (and (text.= <object> from)
                                  (text.= (..reflection <type>) to))
                             (all _.composite
                                  valueG
                                  (///value.primitive <type>))]
                            
                            [[box.boolean type.boolean]
                             [box.byte    type.byte]
                             [box.short   type.short]
                             [box.int     type.int]
                             [box.long    type.long]
                             [box.char    type.char]
                             [box.float   type.float]
                             [box.double  type.double]]))
                      ... else
                      valueG)))))]))

(the with_object
  (Change Bundle)
  (|>> (common.with extension/jvm.object_null (nullary object:null))
       (common.with extension/jvm.object_null? (unary object:null?))
       (common.with extension/jvm.object_synchronized (binary object:synchronized))
       (common.with extension/jvm.object_throw (unary object:throw))
       (common.with extension/jvm.object_class object:class)
       (common.with extension/jvm.object_instance? object:instance?)
       (common.with extension/jvm.object_cast object:cast)
       ))

(the get:static
  Handler
  (..custom
   [(all <>.and <synthesis>.text <synthesis>.text ..value)
    (function (_ translate archive [class field :unboxed:])
      (by phase.monad pure (_.getstatic (type.class (list) class) field :unboxed:)))]))

(the put:static
  Handler
  (..custom
   [(all <>.and <synthesis>.text <synthesis>.text ..value ?list.any)
    (function (_ translate archive [class field :unboxed: valueS])
      (monad.let phase.monad
        [valueG (translate archive valueS)]
        (pure (all _.composite
                   valueG
                   (when (projection.object? :unboxed:)
                     {.:Some :unboxed:}
                     (_.checkcast :unboxed:)
                     
                     {.:None}
                     (_:pure []))
                   (_.putstatic (type.class (list) class) field :unboxed:)
                   ..unitG))))]))

(the get:virtual
  Handler
  (..custom
   [(all <>.and <synthesis>.text <synthesis>.text ..value ?list.any)
    (function (_ translate archive [class field :unboxed: objectS])
      (monad.let phase.monad
        [objectG (translate archive objectS)
         .let [:class: (type.class (list) class)
               getG (_.getfield :class: field :unboxed:)]]
        (pure (all _.composite
                   objectG
                   (_.checkcast :class:)
                   getG))))]))

(the put:virtual
  Handler
  (..custom
   [(all <>.and <synthesis>.text <synthesis>.text ..value ?list.any ?list.any)
    (function (_ translate archive [class field :unboxed: valueS objectS])
      (monad.let phase.monad
        [valueG (translate archive valueS)
         objectG (translate archive objectS)
         .let [:class: (type.class (list) class)
               putG (when (projection.object? :unboxed:)
                      {.:Some :unboxed:}
                      (all _.composite
                           (_.checkcast :unboxed:)
                           (_.putfield :class: field :unboxed:))
                      
                      {.:None}
                      (_.putfield :class: field :unboxed:))]]
        (pure (all _.composite
                   objectG
                   (_.checkcast :class:)
                   _.dup
                   valueG
                   putG))))]))

(every Input
  (Typed synthesis.Term))

(the input
  (Projection Input)
  (<synthesis>.tuple (<>.and ..value ?list.any)))

(the (translate_input translate archive [valueT valueS])
  (-> Phase Archive Input
      (Operation (Typed (Bytecode Any))))
  (monad.let phase.monad
    [valueG (translate archive valueS)]
    (when (type.primitive? valueT)
      {.:Right valueT}
      (pure [valueT valueG])
      
      {.:Left valueT}
      (pure [valueT (all _.composite
                         valueG
                         (_.checkcast valueT))]))))

(the (prepare_output outputT)
  (-> (Type Return)
      (Bytecode Any))
  (when (type.void? outputT)
    {.:Right outputT}
    ..unitG
    
    {.:Left outputT}
    (_:pure [])))

(the invoke:static
  Handler
  (..custom
   [(all <>.and ..class <synthesis>.text ..return (<>.some ..input))
    (function (_ translate archive [class method outputT inputsTS])
      (monad.let [! phase.monad]
        [inputsTG (list.each' ! (translate_input translate archive) inputsTS)]
        (pure (all _.composite
                   (list.each' _.monad product.right inputsTG)
                   (_.invokestatic class method (type.method [(list) (list:each product.left inputsTG) outputT (list)]))
                   (prepare_output outputT)))))]))

(template.with [<check_cast?> <name> <invoke>]
  [(the <name>
     Handler
     (..custom
      [(all <>.and ..class <synthesis>.text ..return ?list.any (<>.some ..input))
       (function (_ translate archive [class method outputT objectS inputsTS])
         (monad.let [! phase.monad]
           [objectG (translate archive objectS)
            inputsTG (list.each' ! (translate_input translate archive) inputsTS)]
           (pure (all _.composite
                      objectG
                      (if <check_cast?>
                          (_.checkcast class)
                          (_:pure []))
                      (list.each' _.monad product.right inputsTG)
                      (<invoke> class method (type.method [(list) (list:each product.left inputsTG) outputT (list)]))
                      (prepare_output outputT)))))]))]

  [[1b invoke:virtual _.invokevirtual]
   [0b invoke:special _.invokespecial]
   [1b invoke:interface _.invokeinterface]])

(the invoke:constructor
  Handler
  (..custom
   [(all <>.and ..class (<>.some ..input))
    (function (_ translate archive [class inputsTS])
      (monad.let [! phase.monad]
        [inputsTG (list.each' ! (translate_input translate archive) inputsTS)]
        (pure (all _.composite
                   (_.new class)
                   _.dup
                   (list.each' _.monad product.right inputsTG)
                   (_.invokespecial class "<init>" (type.method [(list) (list:each product.left inputsTG) type.void (list)]))))))]))

(the with_member
  (Change Bundle)
  (|>> (common.with extension/jvm.member_get_static get:static)
       (common.with extension/jvm.member_get_virtual get:virtual)
       
       (common.with extension/jvm.member_put_static put:static)
       (common.with extension/jvm.member_put_virtual put:virtual)
       
       (common.with extension/jvm.member_invoke_static invoke:static)
       (common.with extension/jvm.member_invoke_virtual invoke:virtual)
       (common.with extension/jvm.member_invoke_special invoke:special)
       (common.with extension/jvm.member_invoke_interface invoke:interface)
       (common.with extension/jvm.member_invoke_constructor invoke:constructor)
       ))

(the annotation_parameter
  (Projection (/.Annotation_Parameter synthesis.Term))
  (<synthesis>.tuple (<>.and <synthesis>.text ?list.any)))

(the annotation
  (Projection (/.Annotation synthesis.Term))
  (<synthesis>.tuple (<>.and <synthesis>.text
                             (<>.some ..annotation_parameter))))

(the argument
  (Projection Argument)
  (<synthesis>.tuple (<>.and <synthesis>.text ..value)))

(the .public (hidden_method_body arity body)
  (-> Natural synthesis.Term
      synthesis.Term)
  (expansion.let [<oops> (halt! (text (%.natural arity) " " (synthesis.as_text body)))]
    (when [arity body]
      (^.or [0 _]
            [1 _])
      body
      
      [_ [@ {synthesis.:Control {synthesis.:When _ path}}]]
      (loop (of [path (is Path path)])
        (when path
          {path.:And _ next}
          (of next)

          ... TO DO: Stop doing the ^.multi
          (^.multi {path.:Then path}
                   [path (synthesis.tuple @ (list _ hidden))])
          hidden
          
          _
          <oops>))

      _
      <oops>)))

(the (without_fake_parameter:path without_fake_parameter)
  (-> (-> synthesis.Term synthesis.Term)
      (-> Path Path))
  (function (of it)
    (`` (when it
          (^.or {path.:Pop}
                {path.:Access _}
                {path.:List size})
          it
          
          {path.:Bind it}
          {path.:Bind (-- it)}
          
          {path.:Bit_Fork when then else}
          {path.:Bit_Fork when
                          (of then)
                          (maybe:each of else)}

          (,, (template.with [<tag>]
                [{<tag> [head tail]}
                 {<tag> [(revised path.:then of head)
                         (list:each (revised path.:then of) tail)]}]

                [[path.:I64_Fork]
                 [path.:F64_Fork]
                 [path.:Text_Fork]]))
          
          (,, (template.with [<tag>]
                [{<tag> left right}
                 {<tag> (of left) (of right)}]

                [[path.:Or]
                 [path.:And]]))
          
          {path.:Then it}
          {path.:Then (without_fake_parameter it)}))))

(the .public (without_fake_parameter it)
  (-> synthesis.Term
      synthesis.Term)
  (when it
    [@ {synthesis.:Simple _}]
    it
    
    [@ {synthesis.:Structure it}]
    [@ {synthesis.:Structure
        (when it
          {@type.:Complex_Variant it}
          {@type.:Complex_Variant (revised @type.:choice without_fake_parameter it)}

          {@type.:Complex_Tuple it}
          {@type.:Complex_Tuple (list:each without_fake_parameter it)})}]
    
    [@ {synthesis.:Reference it}]
    [@ {synthesis.:Reference
        (when it
          {@type.:Variable_Reference it}
          {@type.:Variable_Reference
           (when it
             {@type.:Local it}
             {@type.:Local (-- it)}
             
             {@type.:Foreign _}
             it)}
          
          {@type.:Constant_Reference _}
          it)}]
    
    [@ {synthesis.:Control it}]
    [@ {synthesis.:Control
        (when it
          {synthesis.:When value path}
          {synthesis.:When (without_fake_parameter value)
                           (without_fake_parameter:path without_fake_parameter path)}
          
          {synthesis.:Loop it}
          {synthesis.:Loop
           (when it
             {synthesis.:Tail_Recursion [synthesis.:start start
                                         synthesis.:inits inits
                                         synthesis.:iteration iteration]}
             {synthesis.:Tail_Recursion [synthesis.:start (-- start)
                                         synthesis.:inits (list:each without_fake_parameter inits)
                                         synthesis.:iteration iteration]}
             
             {synthesis.:Tail_Iteration _}
             it)}
          
          {synthesis.:Function it}
          {synthesis.:Function
           (when it
             {synthesis.:Abstraction [synthesis.:environment environment
                                      synthesis.:arity arity
                                      synthesis.:body body]}
             {synthesis.:Abstraction [synthesis.:environment (list:each without_fake_parameter environment)
                                      synthesis.:arity arity
                                      synthesis.:body body]}
             
             {synthesis.:Reification [synthesis.:function function
                                      synthesis.:arguments arguments]}
             {synthesis.:Reification [synthesis.:function (without_fake_parameter function)
                                      synthesis.:arguments (list:each without_fake_parameter arguments)]})})}]

    [@ {synthesis.:Extension name parameters}]
    [@ {synthesis.:Extension name (list:each without_fake_parameter parameters)}]))

(the overriden_method_definition
  (Projection [(Environment synthesis.Term) (/.Overriden_Method synthesis.Term)])
  (<synthesis>.tuple (monad.let <>.monad
                       [_ (<synthesis>.this_text /.overriden_tag)
                        ownerT ..class
                        name <synthesis>.text
                        strict_fp? <synthesis>.bit
                        annotations (<synthesis>.tuple (<>.some ..annotation))
                        vars (<synthesis>.tuple (<>.some ..var))
                        self_name <synthesis>.text
                        arguments (<synthesis>.tuple (<>.some ..argument))
                        returnT ..return
                        exceptionsT (<synthesis>.tuple (<>.some ..class))
                        [environment _ _ body] (<| (<synthesis>.function 1)
                                                   (<synthesis>.loop (<>.exactly 0 ?list.any))
                                                   <synthesis>.tuple
                                                   (<>.after ?list.any)
                                                   ?list.any)
                        .let [arity (list.size arguments)]]
                       (pure [environment
                              [ownerT name
                               strict_fp? annotations vars
                               self_name arguments returnT exceptionsT
                               (<| (..hidden_method_body arity)
                                   (when arity
                                     0 (without_fake_parameter body)
                                     _ body))]]))))

(the (normalize_path normalize)
  (-> (-> synthesis.Term synthesis.Term)
      (-> Path Path))
  (function (of path)
    (`` (when path
          {path.:Then bodyS}
          {path.:Then (normalize bodyS)}

          (,, (template.with [<tag>]
                [{<tag> leftP rightP}
                 {<tag> (of leftP) (of rightP)}]

                [[path.:Or]
                 [path.:And]]))

          (,, (template.with [<tag>]
                [{<tag> _}
                 path]

                [[path.:Pop]
                 [path.:Bind]
                 [path.:Access]
                 [path.:List]]))

          {path.:Bit_Fork when then else}
          {path.:Bit_Fork when (of then) (maybe:each of else)}

          (,, (template.with [<tag>]
                [{<tag> [[exampleH nextH] tail]}
                 {<tag> [[exampleH (of nextH)]
                         (list:each (function (_ [example next])
                                      [example (of next)])
                                    tail)]}]

                [[path.:I64_Fork]
                 [path.:F64_Fork]
                 [path.:Text_Fork]]))
          ))))

(every Mapping
  (Dictionary synthesis.Term Variable))

(the (normalize_method_body mapping)
  (-> Mapping synthesis.Term
      synthesis.Term)
  (function (of body)
    (`` (when body
          (,, (template.with [<tag>]
                [<tag>
                 body]

                [[[@ {synthesis.:Simple _}]]
                 [(synthesis.constant @ _)]]))

          (synthesis.variant @ [lefts right? sub])
          (synthesis.variant @ [lefts right? (of sub)])

          (synthesis.tuple @ members)
          (synthesis.tuple @ (list:each of members))

          (synthesis.variable @ var)
          (|> mapping
              (dictionary.value body)
              (try.else var)
              (synthesis.variable @))

          (synthesis.when @ [inputS pathS])
          (synthesis.when @ [(of inputS) (normalize_path of pathS)])

          (synthesis.tail_recursion @ [offset initsS+ bodyS])
          (synthesis.tail_recursion @ [offset (list:each of initsS+) (of bodyS)])

          (synthesis.tail_iteration @ updatesS+)
          (synthesis.tail_iteration @ (list:each of updatesS+))

          (synthesis.abstraction @ [environment arity bodyS])
          (synthesis.abstraction @ [(list:each (function (_ captured)
                                                 (when captured
                                                   (synthesis.variable @ var)
                                                   (|> mapping
                                                       (dictionary.value captured)
                                                       (try.else var)
                                                       (synthesis.variable @))

                                                   _
                                                   captured))
                                               environment)
                                    arity
                                    bodyS])

          (synthesis.reification @ [functionS inputsS+])
          (synthesis.reification @ [(of functionS) (list:each of inputsS+)])

          [@ {synthesis.:Extension [name inputsS+]}]
          [@ {synthesis.:Extension [name (list:each of inputsS+)]}]))))

(the $Object
  (type.class (list) "java.lang.Object"))

(the (anonymous_init_method env inputsTI)
  (-> (Environment synthesis.Term) (List (Typed (Bytecode Any)))
      (Type category.Method))
  (type.method [(list)
                (list.repeated (n.+ (list.size inputsTI) (list.size env)) ..$Object)
                type.void
                (list)]))

(the (with_anonymous_init class env super_class inputsTG)
  (-> (Type category.Class) (Environment synthesis.Term) (Type category.Class) (List (Typed (Bytecode Any)))
      (Resource Method))
  (let [inputs_offset (list.size inputsTG)
        inputs! (|> inputsTG
                    list.enumeration
                    (list:each (function (_ [register [type term]])
                                 (let [then! (when (type.primitive? type)
                                               {.:Right type}
                                               (///value.primitive type)
                                               
                                               {.:Left type}
                                               (_.checkcast type))]
                                   (all _.composite
                                        (_.aload (++ register))
                                        then!))))
                    list.in_reverse
                    (list:mix _.composite (_:pure [])))
        store_captured! (|> env
                            list.size
                            list.domain
                            (list.each' _.monad (.function (_ register)
                                                  (all _.composite
                                                       (_.aload 0)
                                                       (_.aload (n.+ inputs_offset (++ register)))
                                                       (_.putfield class (///reference.foreign_name register) $Object)))))]
    (method.method method.public "<init>"
      true (anonymous_init_method env inputsTG)
      (list)
      {.:Some (all _.composite
                   (_.aload 0)
                   inputs!
                   (_.invokespecial super_class "<init>" (type.method [(list) (list:each product.left inputsTG) type.void (list)]))
                   store_captured!
                   _.return)})))

(the (anonymous_instance translate archive class env inputsTI)
  (-> Phase Archive (Type category.Class) (Environment synthesis.Term) (List (Typed (Bytecode Any)))
      (Operation (Bytecode Any)))
  (monad.let [! phase.monad]
    [captureG+ (list.each' ! (translate archive) env)]
    (pure (all _.composite
               (_.new class)
               _.dup
               (|> inputsTI
                   (list:each product.right)
                   list.in_reverse
                   (list:mix _.composite (_:pure [])))
               (list.complete _.monad captureG+)
               (_.invokespecial class "<init>" (anonymous_init_method env inputsTI))))))

(the (returnG returnT)
  (-> (Type Return)
      (Bytecode Any))
  (when (type.void? returnT)
    {.:Right returnT}
    _.return

    {.:Left returnT}
    (when (type.primitive? returnT)
      {.:Left returnT}
      (when (type.class? returnT)
        {.:Some class_name}
        (all _.composite
             (_.checkcast returnT)
             _.areturn)

        {.:None}
        _.areturn)
      
      {.:Right returnT}
      (template.let [(unwrap_primitive <return> <type>)
                     [(all _.composite
                           (///value.primitive <type>)
                           <return>)]]
        (`` (if (,, (template.with [<return> <type>]
                      [(by type.equivalence = <type> returnT)
                       (unwrap_primitive <return> <type>)]

                      [[_.ireturn type.boolean]
                       [_.ireturn type.byte]
                       [_.ireturn type.short]
                       [_.ireturn type.int]
                       [_.ireturn type.char]
                       [_.freturn type.float]
                       [_.lreturn type.long]]))

                ... (by type.equivalence = type.double returnT)
                (unwrap_primitive _.dreturn type.double)))))))

(the (method_dependencies archive method)
  (-> Archive (/.Overriden_Method synthesis.Term)
      (Operation (Set unit.ID)))
  (let [[_super _name _strict_fp? _annotations
         _t_vars _this _arguments _return _exceptions
         bodyS] method]
    (cache/artifact.dependencies archive bodyS)))

(the (anonymous_dependencies archive inputsTS overriden_methods)
  (-> Archive (List Input) (List [(Environment synthesis.Term) (/.Overriden_Method synthesis.Term)])
      (Operation (Set unit.ID)))
  (monad.let [! phase.monad]
    [all_input_dependencies (list.each' ! (|>> product.right (cache/artifact.dependencies archive)) inputsTS)
     all_closure_dependencies (|> overriden_methods
                                  (list:each product.left)
                                  list:conjoint
                                  (list.each' ! (cache/artifact.dependencies archive)))
     all_method_dependencies (list.each' ! (|>> product.right (method_dependencies archive)) overriden_methods)]
    (pure (<| cache/artifact.all
              (all list:composite
                   all_input_dependencies
                   all_closure_dependencies
                   all_method_dependencies)))))

(the (prepare_argument lux_register argumentT jvm_register)
  (-> Register (Type Value) Register
      [Register (Bytecode Any)])
  (when (type.primitive? argumentT)
    {.:Left argumentT}
    [(n.+ 1 jvm_register)
     (if (n.= lux_register jvm_register)
         (_:pure [])
         (all _.composite
              (_.aload jvm_register)
              (_.astore lux_register)))]
    
    {.:Right argumentT}
    (template.let [(wrap_primitive <shift> <load> <type>)
                   [[(n.+ <shift> jvm_register)
                     (all _.composite
                          (<load> jvm_register)
                          (///value.boxed <type>)
                          (_.astore lux_register))]]]
      (`` (if (,, (template.with [<shift> <load> <type>]
                    [(by type.equivalence = <type> argumentT)
                     (wrap_primitive <shift> <load> <type>)]

                    [[1 _.iload type.boolean]
                     [1 _.iload type.byte]
                     [1 _.iload type.short]
                     [1 _.iload type.int]
                     [1 _.iload type.char]
                     [1 _.fload type.float]
                     [2 _.lload type.long]]))

              ... (by type.equivalence = type.double argumentT)
              (wrap_primitive 2 _.dload type.double))))))

(the .public (prepare_arguments offset types)
  (-> Natural (List (Type Value))
      (Bytecode Any))
  (|> types
      list.enumeration
      (list:mix (function (_ [lux_register type] [jvm_register before])
                  (let [[jvm_register' after] (prepare_argument (n.+ offset lux_register) type jvm_register)]
                    [jvm_register'
                     (all _.composite
                          before
                          after)]))
                (is [Register (Bytecode Any)]
                    [offset
                     (_:pure [])]))
      product.right))

(the (normalized_method global_mapping [environment method])
  (-> Mapping [(Environment synthesis.Term) (/.Overriden_Method synthesis.Term)]
      (/.Overriden_Method synthesis.Term))
  (let [[ownerT name strict_fp? annotations vars self_name arguments returnT exceptionsT body] method
        local_mapping (|> environment
                          list.enumeration
                          (list:each (function (_ [foreign_id capture])
                                       [(synthesis.foreign provenance.dummy foreign_id)
                                        (|> global_mapping
                                            (dictionary.value capture)
                                            try.trusted)]))
                          (dictionary.of_list synthesis.hash))]
    [ownerT name
     strict_fp? annotations vars
     self_name arguments returnT exceptionsT
     (normalize_method_body local_mapping body)]))

(the (total_environment overriden_methods)
  (-> (List [(Environment synthesis.Term) (/.Overriden_Method synthesis.Term)])
      (List synthesis.Term))
  (|> overriden_methods
      ... Get all the environments.
      (list:each product.left)
      ... Combine them.
      list:conjoint
      ... Remove duplicates.
      (set.of_list synthesis.hash)
      set.as_list))

(the (global_mapping total_environment)
  (-> (List synthesis.Term)
      Mapping)
  (|> total_environment
      ... Give them names as "foreign" variables.
      list.enumeration
      (list:each (function (_ [id capture])
                   [capture {@type.:Foreign id}]))
      (dictionary.of_list synthesis.hash)))

(the (method_definition phase archive artifact_id method)
  (-> Phase Archive artifact.ID (/.Overriden_Method synthesis.Term)
      (Operation (Resource Method)))
  (let [[ownerT name strict_fp? annotations vars self_name arguments returnT exceptionsT bodyS] method]
    (monad.let phase.monad
      [bodyG (//////translation.with_context artifact_id
               (phase archive bodyS))
       .let [argumentsT (list:each product.right arguments)
             methodT (type.method [vars argumentsT returnT exceptionsT])]]
      (pure (method.method (all modifier:composite
                                method.public
                                method.final
                                (if strict_fp?
                                    method.strict
                                    modifier:identity))
              name
              true methodT
              (list)
              {.:Some (all _.composite
                           (prepare_arguments 1 argumentsT)
                           bodyG
                           (returnG returnT))})))))

(the class:anonymous
  Handler
  (..custom
   [(all <>.and
         ..class
         (<synthesis>.tuple (<>.some ..class))
         (<synthesis>.tuple (<>.some ..input))
         (<synthesis>.tuple (<>.some ..overriden_method_definition)))
    (function (_ translate archive [super_class
                                    super_interfaces
                                    inputsTS
                                    overriden_methods])
      (monad.let [! phase.monad]
        [all_dependencies (anonymous_dependencies archive inputsTS overriden_methods)
         [context _] (//////translation.with_new_context archive all_dependencies (pure []))
         .let [[module_id artifact_id] context
               anonymous_class_name (///runtime.class_name context)
               class (type.class (list) anonymous_class_name)
               total_environment (..total_environment overriden_methods)
               global_mapping (..global_mapping total_environment)]
         inputsTI (list.each' ! (translate_input translate archive) inputsTS)
         methods! (|> overriden_methods
                      (list:each (normalized_method global_mapping))
                      (list.each' ! (method_definition translate archive artifact_id)))
         bytecode (<| (by ! each (\\injection.value class.as_binary))
                      phase.of_try
                      (class.class version.v6_0 (all modifier:composite class.public class.final)
                                   (internal.name anonymous_class_name)
                                   {.:None}
                                   (internal.name (..reflection super_class))
                                   (list:each (|>> ..reflection internal.name) super_interfaces)
                                   (foreign.variables total_environment)
                                   (list:composite (list (..with_anonymous_init class total_environment super_class inputsTI))
                                                   methods!)
                                   (list)))
         .let [artifact [anonymous_class_name bytecode]]
         _ (//////translation.execute! artifact)
         _ (//////translation.save! artifact_id {.:None} artifact)]
        (anonymous_instance translate archive class total_environment inputsTI)))]))

(the with_class
  (Change Bundle)
  (common.with extension/jvm.class_anonymous class:anonymous))

(the .public bundle
  Bundle
  (<| with_conversion
      with_int
      with_long
      with_float
      with_double
      with_char
      with_array
      with_object
      with_member
      with_class
      extension.empty
      ))
