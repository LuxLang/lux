... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Type Definition Label Declaration
                when false true try variant stack)
   [abstract
    ["[0]" monad]
    ["[0]" enum]]
   [error
    ["[0]" try]]
   [data
    ["[0]" product]
    [binary (.only Binary)
     ["[0]" \\injection]]
    [collection
     ["[0]" list (.use "[1]:[0]" functor monoid)]
     ["[0]" sequence]]
    [text
     ["%" \\injection]]]
   [math
    [number
     ["i[0]" /32
      ["[1]" integer]]
     ["[0]" /64 (.only)
      ["n" natural]]]]
   [macro
    ["[0]" template]]
   [target
    ["[0]" jvm
     ["_" bytecode (.only Label Bytecode)]
     ["[0]" modifier (.only Modifier) (.use "[1]:[0]" monoid)]
     ["[0]" field (.only Field)]
     ["[0]" method (.only Method)]
     ["[1]/[0]" version]
     ["[0]" class (.only Class)]
     [constant
      [pool (.only Resource)]]
     [encoding
      [name
       ["[0]" internal]]]
     ["[0]" type (.only Type)
      ["[0]" category]
      ["[0]" reflection]]]]]]
 ["[0]" //
  ["[1][0]" type]
  ["[1][0]" value]
  ["[1][0]" function
   ["[1]" abstract]
   [field
    [constant
     ["[1]/[0]" arity]]
    [variable
     ["[1]/[0]" count]]]]
  ["//[1]" ///
   [//
    ["[0]" phase]
    ["[0]" synthesis]
    ["[0]" translation]
    [///
     [arity (.only Arity)]
     [meta
      [archive (.only Output Archive)
       ["[0]" artifact]
       ["[0]" registry (.only Registry)]
       ["[0]" unit]]]
     [type (.only Register)]]]]])

(every .public Byte_Code
  Binary)

(every .public Definition
  [Text Byte_Code])

(every .public Anchor
  [Label Register])

(every .public Value
  (Bytecode Any))

(every .public Declaration
  Definition)

(template.with [<name> <base>]
  [(every .public <name>
     (<base> Anchor Value Declaration))]

  [[State translation.State]
   [Operation translation.Operation]
   [Phase translation.Phase]
   [Handler translation.Handler]
   [Bundle translation.Bundle]
   [Extender translation.Extender]])

(every .public (Expression i)
  (-> Phase Archive i
      (Operation Value)))

(every .public Host
  (translation.Host Value Definition))

(the .public (class_name [module id])
  (-> unit.ID
      Text)
  (text "lux"
        "." (%.natural (n.% 10 (++ (.universe#))))
        "." (%.natural module)
        "." (%.natural id)))

(the .public id
  artifact.ID
  0)

(the .public class
  (type.class (list) (class_name [0 ..id])))

(the procedure
  (-> Text (Type category.Method)
      Value)
  (_.invokestatic ..class))

(the modifier
  (Modifier Method)
  (all modifier:composite
       method.public
       method.static
       method.strict
       ))

(the this
  Value
  _.aload_0)

(the .public (item index)
  (Change Value)
  (all _.composite
       index
       _.aaload))

(the (set! index value)
  (-> Value Value
      (Bytecode Any))
  (all _.composite
       ... A
       _.dup ... AA
       index ... AAI
       value ... AAIV
       _.aastore ... A
       ))

(the .public unit (_.string synthesis.unit))

(the variant:name "variant")
(the variant:type (type.method [(list) (list //type.lefts //type.right? //type.value) //type.variant (list)]))
(the .public variant (..procedure ..variant:name ..variant:type))

(the variant_lefts _.iconst_0)
(the variant_right? _.iconst_1)
(the variant_value _.iconst_2)

(the variant:method
  (let [new_variant (all _.composite
                         _.iconst_3
                         (_.anewarray //type.value))
        $lefts (all _.composite
                    _.iload_0
                    (//value.boxed type.int))
        $right? _.aload_1
        $value _.aload_2]
    (method.method ..modifier ..variant:name
      .false ..variant:type
      (list)
      {.:Some (all _.composite
                   new_variant                       ... A[3]
                   (..set! ..variant_lefts $lefts)   ... A[3]
                   (..set! ..variant_right? $right?) ... A[3]
                   (..set! ..variant_value $value)   ... A[3]
                   _.areturn)})))

(the .public is_left _.aconst_null)
(the .public is_right ..unit)

(the (left_case it)
  (Change (Bytecode Any))
  (all _.composite
       _.iconst_0
       ..is_left
       it
       ..variant))

(the right_case
  (Bytecode Any)
  (all _.composite
       _.iconst_0
       ..is_right
       _.dup2_x1
       _.pop2
       ..variant))

(the .public some ..right_case)

(the .public none
  Value
  (left_case ..unit))

(the exception_constructor (type.method [(list) (list //type.text) type.void (list)]))
(the (illegal_state_exception message)
  (-> Text (Bytecode Any))
  (let [^IllegalStateException (type.class (list) "java.lang.IllegalStateException")]
    (all _.composite
         (_.new ^IllegalStateException)
         _.dup
         (_.string message)
         (_.invokespecial ^IllegalStateException "<init>" ..exception_constructor))))

(the failure:type
  (type.method [(list) (list) type.void (list)]))

(the (failure name message)
  (-> Text Text (Resource Method))
  (method.method ..modifier name
    .false ..failure:type
    (list)
    {.:Some
     (all _.composite
          (..illegal_state_exception message)
          _.athrow)}))

(the pm_failure:name "pm_failure")
(the .public pm_failure (..procedure ..pm_failure:name ..failure:type))

(the pm_failure:method
  (..failure ..pm_failure:name "Invalid expression for pattern-matching."))

(the .public head_of_stack _.iconst_0)
(the .public tail_of_stack _.iconst_1)

(the stack:name "stack")
(the stack:type (type.method [(list) (list //type.stack //type.value) //type.stack (list)]))
(the .public stack (..procedure ..stack:name ..stack:type))

(the stack:method
  (method.method ..modifier ..stack:name
    .false ..stack:type
    (list)
    {.:Some
     (let [new_stack_frame! (all _.composite
                                 _.iconst_2
                                 (_.anewarray //type.value))
           $head _.aload_1
           $tail _.aload_0]
       (all _.composite
            new_stack_frame!
            (..set! ..head_of_stack $head)
            (..set! ..tail_of_stack $tail)
            _.areturn))}))

(the when:name "when")
(the when:type (type.method [(list) (list //type.variant //type.lefts //type.right?) //type.value (list)]))
(the .public when (..procedure ..when:name ..when:type))

(the when:method
  (method.method ..modifier ..when:name
    .false ..when:type
    (list)
    {.:Some
     (monad.let _.monad
       [@loop _.new_label
        @perfect_match! _.new_label
        @lefts_match! _.new_label
        @maybe_nested _.new_label
        @mismatch! _.new_label
        .let [$variant _.aload_0
              $lefts _.iload_1
              $right? _.aload_2

              :lefts (all _.composite
                          (..item ..variant_lefts)
                          (//value.primitive type.int))
              :right? (..item ..variant_right?)
              :value (..item ..variant_value)

              not_found _.aconst_null

              super_nested_lefts (all _.composite
                                      _.swap
                                      _.isub
                                      (_.int (i/32.of +1))
                                      _.isub)
              super_nested (all _.composite
                                ... lefts, sumT
                                super_nested_lefts ... super_lefts
                                $variant :right? ... super_lefts, super_right
                                $variant :value ... super_lefts, super_right, super_value
                                ..variant)

              update_$variant (all _.composite
                                   $variant :value
                                   (_.checkcast //type.variant)
                                   _.astore_0)
              update_$lefts (all _.composite
                                 _.isub
                                 (_.int (i/32.of +1))
                                 _.isub)
              again (is (-> Label (Bytecode Any))
                        (function (_ @)
                          (all _.composite
                               ... lefts, sumT
                               update_$variant ... lefts, sumT
                               update_$lefts ... sub_lefts
                               (_.goto @))))]]
       (all _.composite
            $lefts
            (_.set_label @loop)
            $variant :lefts
            _.dup2 (_.if_icmpeq @lefts_match!)
            _.dup2 (_.if_icmpgt @maybe_nested)
            $right? (_.ifnull @mismatch!) ... lefts, sumT
            super_nested                 ... super_variant
            _.areturn
            (_.set_label @lefts_match!) ... lefts, sumT
            $right?            ... lefts, sumT, wants_right?
            $variant :right? ... lefts, sumT, wants_right?, is_right?
            (_.if_acmpeq @perfect_match!) ... lefts, sumT
            (_.set_label @mismatch!) ... lefts, sumT
            ... _.pop2
            not_found
            _.areturn
            (_.set_label @maybe_nested)   ... lefts, sumT
            $variant :right?       ... lefts, sumT, right?
            (_.ifnull @mismatch!)  ... lefts, sumT
            (again @loop)
            (_.set_label @perfect_match!) ... lefts, sumT
            ... _.pop2
            $variant :value
            _.areturn
            ))}))

(the projection_type (type.method [(list) (list //type.tuple //type.lefts) //type.value (list)]))

(the left_of_tuple:name "left")
(the .public left_of_tuple (..procedure ..left_of_tuple:name ..projection_type))

(the right_of_tuple:name "right")
(the .public right_of_tuple (..procedure ..right_of_tuple:name ..projection_type))

(the projection:method2
  [(Resource Method) (Resource Method)]
  (let [$tuple _.aload_0
        $tuple:size (all _.composite
                         $tuple
                         _.arraylength)

        $lefts _.iload_1

        $last_right (all _.composite
                         $tuple:size
                         _.iconst_1
                         _.isub)

        update_$lefts (all _.composite
                           $lefts $last_right _.isub
                           _.istore_1)
        update_$tuple (all _.composite
                           $tuple $last_right _.aaload (_.checkcast //type.tuple)
                           _.astore_0)
        recur (is (-> Label (Bytecode Any))
                  (function (_ @loop)
                    (all _.composite
                         update_$lefts
                         update_$tuple
                         (_.goto @loop))))

        left_of_tuple:method
        (method.method ..modifier ..left_of_tuple:name
          .false ..projection_type
          (list)
          {.:Some
           (monad.let _.monad
             [@loop _.new_label
              @recursive _.new_label
              .let [:left (all _.composite
                               $lefts
                               _.aaload)]]
             (all _.composite
                  (_.set_label @loop)
                  $lefts $last_right (_.if_icmpge @recursive)
                  $tuple :left
                  _.areturn
                  (_.set_label @recursive)
                  ... Recursive
                  (recur @loop)))})

        right_of_tuple:method
        (method.method ..modifier ..right_of_tuple:name
          .false ..projection_type
          (list)
          {.:Some
           (monad.let _.monad
             [@loop _.new_label
              @not_tail _.new_label
              @slice _.new_label
              .let [$right (all _.composite
                                $lefts
                                _.iconst_1
                                _.iadd)
                    $:nested (all _.composite
                                  $tuple
                                  _.swap
                                  _.aaload)
                    super_nested (all _.composite
                                      $tuple
                                      $right
                                      $tuple:size
                                      (_.invokestatic (type.class (list) "java.util.Arrays") "copyOfRange"
                                                      (type.method [(list) (list //type.tuple //type.lefts //type.lefts) //type.tuple (list)])))]]
             (all _.composite
                  (_.set_label @loop)
                  $last_right $right
                  _.dup2 (_.if_icmpne @not_tail)
                  ... _.pop
                  $:nested
                  _.areturn
                  (_.set_label @not_tail)
                  (_.if_icmpgt @slice)
                  ... Must recurse
                  (recur @loop)
                  (_.set_label @slice)
                  super_nested
                  _.areturn))})]
    [left_of_tuple:method
     right_of_tuple:method]))

(the .public of:name "apply")

(the .public (of:type arity)
  (-> Arity (Type category.Method))
  (type.method [(list) (list.repeated arity //type.value) //type.value (list)]))

(the .public of
  (_.invokevirtual //function.class ..of:name (..of:type 1)))

(the try:name "try")
(the try:type (type.method [(list) (list //function.class) //type.variant (list)]))
(the .public try (..procedure ..try:name ..try:type))

(the throw:name "throw")
(the throw:type (type.method [(list) (list (type.class (list) "java.lang.Throwable")) type.void (list)]))
(the .public throw (..procedure ..throw:name ..throw:type))

(the false _.iconst_0)
(the true _.iconst_1)

(the try:method
  (method.method ..modifier ..try:name
    .false ..try:type
    (list)
    {.:Some
     (monad.let _.monad
       [@try _.new_label
        @handler _.new_label
        .let [$unsafe ..this

              ^StringWriter (type.class (list) "java.io.StringWriter")
              string_writer (all _.composite
                                 (_.new ^StringWriter)
                                 _.dup
                                 (_.invokespecial ^StringWriter "<init>" (type.method [(list) (list) type.void (list)])))

              ^PrintWriter (type.class (list) "java.io.PrintWriter")
              print_writer (all _.composite
                                ... WTW
                                (_.new ^PrintWriter) ... WTWP
                                _.dup_x1 ... WTPWP
                                _.swap   ... WTPPW
                                ..true   ... WTPPWZ
                                (_.invokespecial ^PrintWriter "<init>" (type.method [(list) (list (type.class (list) "java.io.Writer") type.boolean) type.void (list)]))
                                ... WTP
                                )
              unsafe_application (all _.composite
                                      $unsafe
                                      ..unit
                                      ..of)
              trace (all _.composite
                         ... T
                         string_writer          ... TW
                         _.dup_x1               ... WTW
                         print_writer           ... WTP
                         (_.invokevirtual //type.error "printStackTrace" (type.method [(list) (list ^PrintWriter) type.void (list)])) ... W
                         (_.invokevirtual ^StringWriter "toString" (type.method [(list) (list) //type.text (list)])) ... S
                         )]]
       (all _.composite
            (_.try @try @handler @handler //type.error)
            (_.set_label @try)
            unsafe_application
            ..right_case
            _.areturn
            (_.set_label @handler) ... T
            trace ... S
            (..left_case (all _.composite
                              _.dup2_x1
                              _.pop2))
            _.areturn
            ))}))

(the throw:method
  (method.method ..modifier ..throw:name
    .false ..throw:type
    (list)
    {.:Some
     (all _.composite
          _.aload_0
          _.athrow
          )}))

(the reflection
  (for_any (_ category)
    (-> (Type (category.Value category))
        Text))
  (|>> type.reflection reflection.reflection))

(the ^Object (type.class (list) "java.lang.Object"))

(the translate_runtime
  (Operation [artifact.ID (Maybe Text) Binary])
  (let [class (..reflection ..class)
        modifier (is (Modifier Class)
                     (all modifier:composite
                          class.public
                          class.final))
        bytecode (<| (\\injection.value class.as_binary)
                     try.trusted
                     (class.class jvm/version.v6_0
                                  modifier
                                  (internal.name class)
                                  {.:None}
                                  (internal.name (..reflection ^Object)) (list)
                                  (list)
                                  (let [[left_of_tuple:method right_of_tuple:method] projection:method2]
                                    (list ..variant:method

                                          ..pm_failure:method

                                          ..stack:method
                                          ..when:method
                                          left_of_tuple:method
                                          right_of_tuple:method

                                          ..try:method
                                          ..throw:method))
                                  (list)))]
    (monad.let phase.monad
      [_ (translation.execute! [class bytecode])
       _ (translation.save! ..id {.:None} [class bytecode])]
      (pure [..id {.:None} bytecode]))))

(the translate_function
  (Operation Any)
  (let [of:method+ (|> (enum.range n.enum
                                   (++ //function/arity.minimum)
                                   //function/arity.maximum)
                       (list:each (function (_ arity)
                                    (method.method method.public ..of:name
                                      .false (..of:type arity)
                                      (list)
                                      {.:Some
                                       (let [previous_inputs (|> arity
                                                                 list.domain
                                                                 (list.each' _.monad _.aload))]
                                         (all _.composite
                                              previous_inputs
                                              (_.invokevirtual //function.class ..of:name (..of:type (-- arity)))
                                              (_.checkcast //function.class)
                                              (_.aload arity)
                                              (_.invokevirtual //function.class ..of:name (..of:type //function/arity.minimum))
                                              _.areturn))})))
                       (list:composite (list (method.method (modifier:composite method.public method.abstract)
                                               ..of:name
                                               .false (..of:type //function/arity.minimum)
                                               (list)
                                               {.:None}))))
        <init>:method (method.method method.public "<init>"
                        .false //function.init
                        (list)
                        {.:Some
                         (let [$partials _.iload_1]
                           (all _.composite
                                ..this
                                (_.invokespecial ^Object "<init>" (type.method [(list) (list) type.void (list)]))
                                ..this
                                $partials
                                (_.putfield //function.class //function/count.field //function/count.type)
                                _.return))})
        modifier (is (Modifier Class)
                     (all modifier:composite
                          class.public
                          class.abstract))
        class (..reflection //function.class)
        partial_count (is (Resource Field)
                          (field.field (modifier:composite field.public field.final)
                                       //function/count.field
                                       .false //function/count.type
                                       sequence.empty))
        bytecode (<| (\\injection.value class.as_binary)
                     try.trusted
                     (class.class jvm/version.v6_0
                                  modifier
                                  (internal.name class)
                                  {.:None}
                                  (internal.name (..reflection ^Object)) (list)
                                  (list partial_count)
                                  (list:composite (list <init>:method) of:method+)
                                  (list)))]
    (monad.let phase.monad
      [_ (translation.execute! [class bytecode])
       ... _ (translation.save! //function.id {.:None} [class bytecode])
       ]
      (pure []))))

(the .public translation
  (Operation [Registry Output])
  (monad.let phase.monad
    [runtime_payload ..translate_runtime
     ... _ ..translate_function
     ]
    (pure [(|> registry.empty
               (registry.resource .true unit.none)
               product.right
               ... (registry.resource .true unit.none)
               ... product.right
               )
           (sequence.sequence runtime_payload
                              ... function_payload
                              )])))

(the .public forge_label
  (Operation Label)
  (let [shift (n./ 4 /64.width)]
    ... This shift is done to avoid the possibility of forged labels
    ... to be in the range of the labels that are generated automatically
    ... during the evaluation of Bytecode expressions.
    (by phase.monad each (|>> ++ (/64.<< shift)) translation.next)))
