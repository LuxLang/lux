... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Tag
                variant tuple record)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" maybe]
    ["[0]" state]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]
     ["[0]" stack (.use "[1]#[0]" functor)]
     ["[0]" dictionary (.only Dictionary)]]]
   [logic
    ["[0]" bit]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]]
   ["[0]" type (.only)
    ["[0]" check]]
   ["[0]" meta (.only)
    ["[0]" name]
    ["[0]" code]
    ["[0]" label]
    ["[0]" module]
    ["[0]" binding (.only)
     ["[0]" local]]]
   [function
    [predicate (.only Predicate)]]
   [aspect
    ["[0]" view]]]]
 ["[0]" //
  ["[1][0]" simple]
  [///
   ["[0]" phase (.use "[1]#[0]" monad)]
   ["/" analysis (.only Operation Phase)
    ["[1][0]" complex (.only Tag)]
    ["[1][0]" type]
    ["[1][0]" inference]]
   [///
    [meta
     [archive (.only Archive)]]
    ["@[0]" type]]]])

(exception.the .public (not_a_quantified_type type)
  (Exception Type)
  (exception.report
   (list ["Type" (type.as_text type)])))

(template.with [<name>]
  [(exception.the .public (<name> [module type members])
     (Exception [Text Type (List @type.Code)])
     (exception.report
      (list ["Type" (type.as_text type)]
            ["Expression" (code.relative module (code.tuple members))])))]

  [[invalid_tuple_type]
   [cannot_analyse_tuple]])

(template.with [<name>]
  [(exception.the .public (<name> [module type lefts right? code])
     (Exception [Text Type Natural Bit @type.Code])
     (exception.report
      (list ["Type" (type.as_text type)]
            ["Lefts" (%.natural lefts)]
            ["Right?" (bit.as_text right?)]
            ["Expression" (code.relative module code)])))]

  [[invalid_variant_type]
   [cannot_analyse_sum]
   [cannot_infer_sum]])

(exception.the .public (cannot_analyse_variant [module type tag code])
  (Exception [Text Type Name @type.Code])
  (exception.report
   (list ["Type" (type.as_text type)]
         ["Tag" (name.as_text tag)]
         ["Expression" (code.relative module code)])))

(exception.the .public (cannot_order_record [module @ code])
  (Exception [Text Code (List [Name @type.Code])])
  (exception.report
   (list ["@" (code.as_text @)]
         ["Expression" (|> code
                           (list#each (function (_ [slot value])
                                        (list (code.name slot)
                                              value)))
                           list#conjoint
                           code.tuple
                           (code.relative module))])))

(the (case lefts right? cases)
  (-> Natural Bit (List Type)
      Type)
  (let [tag (/complex.tag right? lefts)
        expected_size (++ tag)
        actual_size (list.size cases)]
    (if (and right?
             (n.< actual_size expected_size))
        (type.variant (list.after tag cases))
        (|> cases
            (list.item tag)
            (try.else .Nothing)))))

(the .public (sum lefts right? analysis archive)
  (-> Natural Bit
      (Change Phase))
  (function (again valueC)
    (monad.let [! phase.monad]
      [expectedT /.expected_type
       .let [expectedT (@type.old_type expectedT)]
       expectedT' (/type.check (check.clean (list) expectedT))
       @ /.provenance
       here phase.name_of_current_module]
      (/.with_exception ..cannot_analyse_sum [here expectedT' lefts right? valueC]
        (when expectedT
          (type.Sum _ _)
          (|> (analysis archive valueC)
              (by ! each (|>> [lefts right?] (/.variant @)))
              (/type.with (..case lefts right? (type.flat_variant expectedT))))

          {.#Named name unnamedT}
          (<| (/type.with unnamedT)
              (again valueC))

          {.#Variable .general id}
          (monad.let !
            [?expectedT' (phase.try (/type.check (check.type id)))]
            (when ?expectedT'
              {try.#Success expectedT'}
              (<| (/type.with expectedT')
                  (again valueC))

              ... Cannot do inference when the tag is numeric.
              ... This is because there is no way of knowing how many
              ... cases the inferred sum type would have.
              _
              (/.except ..cannot_infer_sum [here expectedT lefts right? valueC])))

          {.#Quantification .universal _}
          (monad.let !
            [[@instance :instance:] (/type.check check.existential)]
            (<| (/type.with (maybe.trusted (type.reified (list :instance:) expectedT)))
                (again valueC)))
          
          {.#Quantification .existential _}
          (<| /type.with_var
              (function (_ [@instance :instance:]))
              (/type.with (maybe.trusted (type.reified (list :instance:) expectedT)))
              (again valueC))
          
          {.#Reification inputT funT}
          (when funT
            {.#Variable .general funT_id}
            (monad.let !
              [?funT' (phase.try (/type.check (check.type funT_id)))]
              (when ?funT'
                {try.#Success funT'}
                (<| (/type.with {.#Reification inputT funT'})
                    (again valueC))

                _
                (/.except ..invalid_variant_type [here expectedT lefts right? valueC])))

            _
            (when (type.reified (list inputT) funT)
              {.#Some outputT}
              (<| (/type.with outputT)
                  (again valueC))

              {.#None}
              (/.except ..not_a_quantified_type [funT])))
          
          _
          (/.except ..invalid_variant_type [here expectedT lefts right? valueC]))))))

(the .public (variant analyse tag archive valueC)
  (-> Phase Name
      Phase)
  (monad.let [! phase.monad]
    [tag (phase.normal tag)
     [lefts,right? variantT] (phase.tag tag)
     [lefts right?] (pure (when lefts,right?
                            {.#Some [lefts right? family]}
                            [lefts right?]

                            {.#None}
                            [0 false]))
     expectedT /.expected_type
     .let [expectedT (@type.old_type expectedT)]]
    (when expectedT
      {.#Variable .general _}
      (monad.let !
        [inferenceT (/inference.variant lefts right? (@type.old_type variantT))
         [inferredT valueA+] (/inference.general archive analyse inferenceT (stack valueC))
         @ /.provenance]
        (pure (/.variant @ [lefts right? (|> valueA+ stack.top try.trusted)])))

      else
      (monad.let !
        [here phase.name_of_current_module]
        (/.with_exception ..cannot_analyse_variant [here else tag valueC]
          (..sum lefts right? analyse archive valueC))))))

(the (typed_product analyse expectedT archive members)
  (-> Phase Type Archive (List @type.Code)
      (Operation /.Term))
  (<| (monad.let [! phase.monad]
        [@ /.provenance])
      (by ! each (|>> (view.of list.stack) (/.tuple @)))
      (is (Operation (Stack /.Term)))
      (loop (again [membersT+ (view.as list.stack (type.flat_tuple expectedT))
                    membersC+ (view.as list.stack members)])
        (when [membersT+ membersC+]
          [{.#Top memberT {.#Empty}} {.#Top memberC {.#Empty}}]
          (<| (by ! each (|>> stack))
              (/type.with memberT)
              (analyse archive memberC))
          
          [{.#Top memberT {.#Empty}} _]
          (<| (/type.with memberT)
              (by ! each (|>> stack))
              (analyse archive (code.tuple (view.of list.stack membersC+))))
          
          [_ {.#Top memberC {.#Empty}}]
          (<| (/type.with (type.tuple (view.of list.stack membersT+)))
              (by ! each (|>> stack) (analyse archive memberC)))
          
          [{.#Top memberT membersT+'} {.#Top memberC membersC+'}]
          (monad.let !
            [memberA (<| (/type.with memberT)
                         (analyse archive memberC))
             memberA+ (again membersT+' membersC+')]
            (pure {.#Top memberA memberA+}))
          
          _
          (monad.let !
            [here phase.name_of_current_module]
            (/.except ..cannot_analyse_tuple [here expectedT members]))))))

(the .public (product analyse archive membersC)
  (-> Phase Archive (List @type.Code)
      (Operation /.Term))
  (monad.let [! phase.monad]
    [expectedT /.expected_type
     .let [expectedT (@type.old_type expectedT)]
     here phase.name_of_current_module]
    (/.with_exception ..cannot_analyse_tuple [here expectedT membersC]
      (when expectedT
        (type.Product _ _)
        (..typed_product analyse expectedT archive membersC)

        {.#Named name unnamedT}
        (<| (/type.with unnamedT)
            (product analyse archive membersC))

        {.#Variable .general id}
        (monad.let !
          [?expectedT' (phase.try (/type.check (check.type id)))]
          (when ?expectedT'
            {try.#Success expectedT'}
            (<| (/type.with expectedT')
                (product analyse archive membersC))

            _
            ... Must infer...
            (monad.let !
              [membersTA (list.each' ! (|>> (analyse archive)
                                            /type.inferring)
                                     membersC)
               _ (/type.check (check.check expectedT
                                           (type.tuple (list#each product.left membersTA))))
               @ /.provenance]
              (pure (/.tuple @ (list#each product.right membersTA))))))

        {.#Quantification .universal _}
        (monad.let !
          [[@instance :instance:] (/type.check check.existential)]
          (<| (/type.with (maybe.trusted (type.reified (list :instance:) expectedT)))
              (product analyse archive membersC)))

        {.#Quantification .existential _}
        (<| /type.with_var
            (function (_ [@instance :instance:]))
            (/type.with (maybe.trusted (type.reified (list :instance:) expectedT)))
            (product analyse archive membersC))

        {.#Reification inputT funT}
        (when funT
          {.#Variable .general funT_id}
          (monad.let !
            [?funT' (phase.try (/type.check (check.type funT_id)))]
            (when ?funT'
              {try.#Success funT'}
              (<| (/type.with {.#Reification inputT funT'})
                  (product analyse archive membersC))

              _
              (/.except ..invalid_tuple_type [here expectedT membersC])))

          _
          (when (type.reified (list inputT) funT)
            {.#Some outputT}
            (<| (/type.with outputT)
                (product analyse archive membersC))

            {.#None}
            (/.except ..not_a_quantified_type [funT])))
        
        _
        (/.except ..invalid_tuple_type [here expectedT membersC])))))

... There cannot be any ambiguity or improper syntax when analysing
... records, so they must be normalized for further analysis.
... Normalization just means that all the tags get resolved to their
... canonical form (with their corresponding module identified).
(the .public (normal pattern_matching? record)
  (-> Bit (List @type.Code)
      (Operation (Maybe (Stack [Name @type.Code]))))
  (loop (again [input (view.as list.stack record)
                output (is (Stack [Name @type.Code])
                           {.#Empty})])
    (when input
      (stack.partial {@type.#Name _ ["" slotH]} valueH tail)
      (if pattern_matching?
          (phase#pure {.#None})
          (monad.let phase.monad
            [slotH (phase.normal ["" slotH])]
            (again tail {.#Top [slotH valueH] output})))
      
      (stack.partial {@type.#Name _ slotH} valueH tail)
      (monad.let phase.monad
        [slotH (phase.normal slotH)]
        (again tail {.#Top [slotH valueH] output}))

      {.#Empty}
      (phase#pure {.#Some output})

      _
      (phase#pure {.#None}))))

(the (local_binding? name)
  (-> Text
      (Operation Bit))
  (by phase.monad each
      (stack.any? (list.any? (|>> product.left (text.= name))))
      phase.every_local))

(the (slot_type [[_ it] _])
  (-> [@type.Label @type.Code]
      Type)
  (@type.old_type it))

(the (same_record? it)
  (Predicate (Stack [@type.Label @type.Code]))
  (when it
    (stack.partial head tail)
    (let [expected (slot_type head)]
      (stack.every? (|>> slot_type (type.= expected)) tail))
    
    (stack)
    false))

(the (complete_record? it)
  (Predicate (Stack [@type.Label @type.Code]))
  (loop (again [expected_lefts 0
                remaining it])
    (when remaining
      {.#Top [[{.#Some [lefts .true family]} type] value] {.#Empty}}
      (n.= (-- expected_lefts) lefts)

      {.#Top [[{.#None} type] value] {.#Empty}}
      (n.= 0 expected_lefts)

      {.#Top [[{.#Some [lefts .false family]} type] value] tail}
      (and (n.= expected_lefts lefts)
           (again (++ expected_lefts) tail))

      _
      false)))

(the sorted_record
  (Change (Stack [@type.Label @type.Code]))
  (|>> (view.of list.stack)
       (list.sorted (function (_ left right)
                      (when [left right]
                        [[[{.#Some [leftsL right?L familyL]} typeL] valueL]
                         [[{.#Some [leftsR right?R familyR]} typeR] valueR]]
                        (if (n.= leftsL leftsR)
                            (not right?R)
                            (n.< leftsL leftsR))

                        _
                        false)))
       (view.as list.stack)))

... Lux already possesses the means to analyse tuples, so
... re-implementing the same functionality for records makes no sense.
... Records, thus, get transformed into tuples by ordering the elements.
(the (order' head_k original_record)
  (-> Name (Stack [Name @type.Code])
      (Operation (Maybe [Natural (Stack @type.Code) Type])))
  (monad.let [! phase.monad]
    [record (<| phase.try
                (stack.each' ! (function (_ [slot value])
                                 (monad.let !
                                   [slot (phase.slot slot)]
                                   (pure [slot value])))
                             original_record))]
    (when record
      {try.#Success record}
      (monad.let !
        [.let [record (sorted_record record)]
         here phase.name_of_current_module
         _ (phase.assertion ..cannot_order_record [here (` ..same_record?) (view.of list.stack original_record)]
                            (same_record? record))
         _ (phase.assertion ..cannot_order_record [here (` ..complete_record?) (view.of list.stack original_record)]
                            (complete_record? record))]
        (pure (<| try.maybe
                  (monad.let try.monad
                    [[[_ :record:] _] (stack.top record)]
                    (pure [(stack.size record)
                           (stack#each product.right record)
                           (@type.old_type :record:)])))))

      {try.#Failure error}
      (pure {.#None}))))

(the .public (order pattern_matching? record)
  (-> Bit (Stack [Name @type.Code])
      (Operation (Maybe [Natural (Stack @type.Code) Type])))
  (when record
    ... empty_record = empty_tuple = unit/any = []
    {.#Empty}
    (phase#pure {.#Some [0 (stack) .Any]})

    {.#Top [head_k head_v] _}
    (when head_k
      ["" head_k']
      (if pattern_matching?
          (phase#pure {.#None})
          (monad.let phase.monad
            [local_binding? (..local_binding? head_k')]
            (if local_binding?
                (pure {.#None})
                (order' head_k record))))
      
      _
      (order' head_k record))))

(the .public (record analyse archive members)
  (-> Phase Archive (List @type.Code)
      (Operation /.Term))
  (when members
    (list)
    //simple.unit

    (list singletonC)
    (analyse archive singletonC)

    (list {@type.#Name _ pseudo_slot} singletonC)
    (monad.let [! phase.monad]
      [head_k (phase.normal pseudo_slot)
       slot (phase.try (phase.slot head_k))]
      (when (as (-> Any (Try @type.Label)) slot)
        {try.#Success [lefts,right? recordT]}
        (when lefts,right?
          {.#None}
          (analyse archive singletonC)
          
          _
          (..product analyse archive members))

        _
        (..product analyse archive members)))

    _
    (monad.let [! phase.monad]
      [?members (..normal false members)]
      (when ?members
        {.#None}
        (..product analyse archive members)

        {.#Some slots}
        (monad.let !
          [record_size,membersC,recordT (..order false slots)]
          (when record_size,membersC,recordT
            {.#None}
            (..product analyse archive members)

            {.#Some [record_size membersC recordT]}
            (monad.let !
              [expectedT /.expected_type
               .let [expectedT (@type.old_type expectedT)]]
              (when expectedT
                {.#Variable .general _}
                (monad.let !
                  [inferenceT (/inference.record record_size recordT)
                   [inferredT membersA] (/inference.general archive analyse inferenceT membersC)
                   @ /.provenance]
                  (pure (/.tuple @ (view.of list.stack membersA))))

                _
                (..product analyse archive (view.of list.stack membersC))))))))))
