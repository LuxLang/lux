... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Type Label
                let exec when its
                if or and)
   [abstract
    ["[0]" monad]]
   [data
    [collection
     ["[0]" list (.use "[1]:[0]" mix monoid)]]]
   [math
    [number
     ["i[0]" /32
      ["[1]" integer]]
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]]
   [target
    [jvm
     ["_" bytecode (.only Label Bytecode) (.use "[1]:[0]" monad)]
     ["[0]" type (.only Type)
      [category (.only Method)]]]]]]
 ["[0]" //
  ["[1][0]" type]
  ["[1][0]" runtime (.only Operation Phase Expression)]
  ["[1][0]" value]
  ["[1][0]" complex]
  ["[1][0]" primitive]
  [////
   ["[0]" phase (.use "[1]:[0]" monad)]
   ["[0]" translation]
   ["[0]" synthesis (.only Path)
    ["[0]" path (.only Fork)]
    [access
     ["[0]" member (.only Member)]]]
   [///
    [type (.only Register)]]]])

(the (pop_alt stack_depth)
  (-> Natural
      (Bytecode Any))
  (.when stack_depth
    0 (_:pure [])
    1 _.pop
    2 _.pop2
    _ ... (n.> 2)
    (all _.composite
         _.pop2
         (pop_alt (n.- 2 stack_depth)))))

(the int
  (-> (I64 Any)
      (Bytecode Any))
  (|>> .integer i/32.of _.int))

(the peek
  (Bytecode Any)
  (all _.composite
       _.dup
       (//runtime.item //runtime.head_of_stack)))

(the pop
  (Bytecode Any)
  (all _.composite
       (//runtime.item //runtime.tail_of_stack)
       (_.checkcast //type.stack)))

(the (left_of_tuple lefts)
  (-> Natural
      (Bytecode Any))
  (all _.composite
       (_.checkcast //type.tuple)
       (..int lefts)
       (.when lefts
         0
         _.aaload
         
         lefts
         //runtime.left_of_tuple)))

(the (right_of_tuple lefts)
  (-> Natural
      (Bytecode Any))
  (all _.composite
       (_.checkcast //type.tuple)
       (..int lefts)
       //runtime.right_of_tuple))

(the object_equals
  (.let [class (type.class (list) "java.lang.Object")
         method (type.method [(list) (list //type.value) type.boolean (list)])]
    (_.invokevirtual class "equals" method)))

(the (bind register)
  (-> Register
      (Operation (Bytecode Any)))
  (phase:pure (all _.composite
                   ..peek
                   (_.astore register))))

(the (bit_pattern_matching of @else [when thenP elseP])
  (-> (-> Path (Operation (Bytecode Any)))
      Label [Bit Path (Maybe Path)]
      (Operation (Bytecode Any)))
  (monad.let phase.monad
    [then! (of thenP)
     else! (.when elseP
             {.:Some elseP}
             (of elseP)

             {.:None}
             (pure (_.goto @else)))
     .let [if! (.if when _.ifeq _.ifne)]]
    (pure (monad.let _.monad
            [@else _.new_label]
            (all _.composite
                 ..peek
                 (//value.primitive type.boolean)
                 (if! @else)
                 then!
                 (_.set_label @else)
                 else!)))))

(template.with [<name> <type> <unwrap> <dup> <pop> <test> <comparison> <if>]
  [(the (<name> of @else [head tail])
     (-> (-> Path (Operation (Bytecode Any)))
         Label (Fork <type> Path)
         (Operation (Bytecode Any)))
     (monad.let [! phase.monad]
       [fork! (list.mix' ! (function (_ [test thenP] else!)
                             (monad.let !
                               [then! (of thenP)]
                               (pure (monad.let _.monad
                                       [@else _.new_label]
                                       (all _.composite
                                            <dup>
                                            (<test> test)
                                            <comparison>
                                            (<if> @else)
                                            <pop>
                                            then!
                                            (_.set_label @else)
                                            else!)))))
                         (all _.composite
                              <pop>
                              (_.goto @else))
                         (list.in_reverse (list:composite (list head) tail)))]
       (pure (all _.composite
                  ..peek
                  <unwrap>
                  fork!))))]

  [[i64_pattern_matching I64 (//value.primitive type.long) _.dup2 _.pop2 //primitive.i64' _.lcmp _.ifne]
   [f64_pattern_matching F64 (//value.primitive type.double) _.dup2 _.pop2 //primitive.f64' _.dcmpl _.ifne]
   [text_pattern_matching Text (by _.monad pure []) _.dup _.pop //primitive.text ..object_equals _.ifeq]])

(the (optimized_pattern_matching pattern_matching it)
  (-> (-> Path (Operation (Bytecode Any)))
      (-> Path (Operation (Maybe (Bytecode Any)))))
  (`` (.when it
        (,, (template.with [<pattern> <projection>]
              [{path.:And (<pattern> lefts)
                          (path.bind_top register then)}
               (monad.let phase.monad
                 [then (pattern_matching then)]
                 (pure {.:Some (all _.composite
                                    ..peek
                                    (<projection> lefts)
                                    (_.astore register)
                                    then)}))]

              [[path.left_member ..left_of_tuple]
               [path.right_member ..right_of_tuple]]))
        
        else
        (phase:pure {.:None}))))

(the (pattern_matching' stack_depth @else @end expression archive)
  (-> Natural Label Label
      (Expression Path))
  (function (of path)
    (monad.let phase.monad
      [outcome (optimized_pattern_matching of path)]
      (.when outcome
        {.:Some outcome}
        (pure outcome)

        else
        (`` (.when path
              {path.:Pop}
              (pure ..pop)
              
              {path.:Bind register}
              (..bind register)

              (,, (template.with [<tag> <path>]
                    [{<tag> it}
                     (<path> of @else it)]

                    [[path.:Bit_Fork ..bit_pattern_matching]
                     [path.:I64_Fork ..i64_pattern_matching]
                     [path.:F64_Fork ..f64_pattern_matching]
                     [path.:Text_Fork ..text_pattern_matching]]))

              {path.:Then bodyS}
              (monad.let phase.monad
                [body! (expression archive bodyS)]
                (pure (all _.composite
                           (..pop_alt stack_depth)
                           body!
                           (_.when_continuous (_.goto @end)))))
              
              (path.side lefts right?)
              (pure (monad.let _.monad
                      [@success _.new_label]
                      (all _.composite
                           ..peek
                           (_.checkcast //type.variant)
                           (//complex.lefts lefts)
                           (//complex.right? right?)
                           //runtime.when
                           _.dup
                           (_.ifnonnull @success)
                           _.pop
                           (_.goto @else)
                           (_.set_label @success)
                           //runtime.stack)))

              (,, (template.with [<pattern> <projection>]
                    [(<pattern> lefts)
                     (pure (all _.composite
                                ..peek
                                (<projection> lefts)
                                //runtime.stack))]

                    [[path.left_member ..left_of_tuple]
                     [path.right_member ..right_of_tuple]]))

              {path.:List size}
              (pure (all _.composite
                         ..peek
                         (_.checkcast //type.list)
                         _.arraylength
                         (..int size)
                         (_.if_icmpne @else)))
              
              (path.item index)
              (pure (all _.composite
                         ..peek
                         (_.checkcast //type.list)
                         (..int index)
                         _.aaload
                         //runtime.stack))

              {path.:Or leftP rightP}
              (monad.let phase.monad
                [@alt_else //runtime.forge_label
                 left! (pattern_matching' (++ stack_depth) @alt_else @end expression archive leftP)
                 right! (of rightP)]
                (pure (all _.composite
                           _.dup
                           left!
                           (_.set_label @alt_else)
                           _.pop
                           right!)))
              
              {path.:And leftP rightP}
              (monad.let phase.monad
                [left! (of leftP)
                 right! (of rightP)]
                (pure (all _.composite
                           left!
                           right!)))
              ))))))

(the (pattern_matching @end expression archive path)
  (-> Label
      (Expression Path))
  (monad.let phase.monad
    [@else //runtime.forge_label
     pattern_matching! (..pattern_matching' 1 @else @end expression archive path)]
    (pure (all _.composite
               pattern_matching!
               (<| (_.when_acknowledged @else)
                   (all _.composite
                        (_.set_label @else)
                        //runtime.pm_failure
                        (_.goto @end)
                        ))
               ))))

(the .public (exec expression archive [this that])
  (Expression synthesis.Exec)
  (monad.let phase.monad
    [this! (expression archive this)
     that! (expression archive that)]
    (pure (all _.composite
               this!
               _.pop
               that!))))

(the .public (let expression archive [register inputS bodyS])
  (Expression synthesis.Let)
  (monad.let phase.monad
    [input! (expression archive inputS)
     body! (expression archive bodyS)]
    (pure (all _.composite
               input!
               (_.astore register)
               body!))))

(the (projection it)
  (.if (.its member.:right? it)
       (..right_of_tuple (.its member.:lefts it))
       (..left_of_tuple (.its member.:lefts it))))

(the .public (its expression archive [path recordS])
  (Expression synthesis.Its)
  (monad.let phase.monad
    [record! (expression archive recordS)]
    (pure (list:mix (function (_ step so_far!)
                      (all _.composite
                           so_far!
                           (..projection step)))
                    record!
                    path))))

(the .public (when expression archive [valueS path])
  (Expression [synthesis.Term Path])
  (monad.let phase.monad
    [@end //runtime.forge_label
     value! (expression archive valueS)
     pattern_matching! (..pattern_matching @end expression archive path)]
    (pure (all _.composite
               _.aconst_null
               value!
               //runtime.stack
               pattern_matching!
               (<| (_.when_acknowledged @end)
                   (_.set_label @end))))))

(the .public (multi_let expression archive [input bindings body])
  (Expression synthesis.Multi_Let)
  (monad.let phase.monad
    [input (expression archive input)
     body (expression archive body)]
    (pure (all _.composite
               (list:mix (function (_ [register member] left)
                           (all _.composite
                                left
                                _.dup
                                (..projection member)
                                (_.astore register)))
                         input
                         bindings)
               _.pop
               body))))

(the .public (if expression archive [testS thenS elseS])
  (Expression (synthesis.If synthesis.Term))
  (monad.let phase.monad
    [test! (expression archive testS)
     then! (expression archive thenS)
     else! (expression archive elseS)]
    (pure (monad.let _.monad
            [@else _.new_label
             @end _.new_label]
            (all _.composite
                 test!
                 (//value.primitive type.boolean)
                 (_.ifeq @else)
                 then!
                 (_.when_continuous (_.goto @end))
                 (_.set_label @else)
                 else!
                 (<| (_.when_acknowledged @end)
                     (_.set_label @end)))))))

(the variant:right?
  (all _.composite
       _.iconst_1
       _.aaload
       ))

(the variant:value
  (all _.composite
       _.iconst_2
       _.aaload
       ))

(the variant:else
  (all _.composite
       (//complex.lefts 0)
       (//complex.right? true)
       //runtime.when
       ))

(the .public (variant_if expression archive [test [the_then then] [the_else else]])
  (Expression (synthesis.If [(Maybe Register) synthesis.Term]))
  (monad.let phase.monad
    [test (expression archive test)
     then (expression archive then)
     else (expression archive else)]
    (pure (monad.let _.monad
            [@else _.new_label
             @end _.new_label]
            (all _.composite
                 test (_.checkcast //type.variant)
                 (.when [the_then the_else]
                   [{.:Some the_then} {.:Some the_else}]
                   (all _.composite
                        _.dup
                        variant:right? (_.ifnonnull @else)
                        variant:value (_.astore the_then)
                        then
                        (_.when_continuous (_.goto @end))
                        (_.set_label @else)
                        variant:else (_.astore the_else))
                   
                   [{.:None} {.:Some the_else}]
                   (all _.composite
                        _.dup
                        variant:right? (_.ifnonnull @else)
                        _.pop
                        then
                        (_.when_continuous (_.goto @end))
                        (_.set_label @else)
                        variant:else (_.astore the_else))
                   
                   [{.:Some the_then} {.:None}]
                   (all _.composite
                        _.dup
                        variant:right? (_.ifnonnull @else)
                        variant:value (_.astore the_then)
                        then
                        (_.when_continuous (_.goto @end))
                        (_.set_label @else)
                        _.pop)
                   
                   [{.:None} {.:None}]
                   (all _.composite
                        variant:right? (_.ifnonnull @else)
                        then
                        (_.when_continuous (_.goto @end))
                        (_.set_label @else)))
                 else
                 (<| (_.when_acknowledged @end)
                     (_.set_label @end)))))))

(template.with [,name ,type ,un_box ,literal ,dup ,pop ,comparison ,if]
  [(the .public (,name expression archive [input cases else])
     (Expression [synthesis.Term (List [,type synthesis.Term]) synthesis.Term])
     (monad.let [! phase.monad]
       [input (expression archive input)
        cases (list.each' ! (function (_ [when then])
                              (by ! each
                                  (|>> [when])
                                  (expression archive then)))
                          cases)
        else (expression archive else)]
       (pure (monad.let [! _.monad]
               [@end _.new_label]
               (all _.composite
                    input
                    ,un_box
                    (list:mix (function (_ [when then] else)
                                (monad.let [! _.monad]
                                  [@else _.new_label]
                                  (all _.composite
                                       ,dup
                                       (,literal when)
                                       ,comparison
                                       (,if @else)
                                       ,pop
                                       then
                                       (_.when_continuous (_.goto @end))
                                       (_.set_label @else)
                                       else)))
                              (all _.composite
                                   ,pop
                                   else
                                   (<| (_.when_acknowledged @end)
                                       (_.set_label @end)))
                              (list.in_reverse cases)))))))]

  [[when_i64 I64 (//value.primitive type.long) //primitive.i64' _.dup2 _.pop2 _.lcmp _.ifne]
   [when_f64 F64 (//value.primitive type.double) //primitive.f64' _.dup2 _.pop2 _.dcmpl _.ifne]
   [when_text Text (pure []) //primitive.text _.dup _.pop ..object_equals _.ifeq]])
