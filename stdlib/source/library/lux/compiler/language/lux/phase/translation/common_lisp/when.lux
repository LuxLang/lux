... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except when let if)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor mix monoid)]
     ["[0]" set]]]
   [math
    [number
     ["n" natural]]]
   [macro
    ["[0]" template]]
   [meta
    [target
     ["_" common_lisp (.only Var/1)]]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Expression)]
  ["[1][0]" reference]
  ["[1][0]" primitive]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    ["[1][0]" synthesis
     ["[1]/[0]" when]]
    ["/[1]" //
     ["[1][0]" synthesis (.only Member Synthesis Path)]
     ["[1][0]" translation]
     ["//[1]" ///
      [reference
       ["[1][0]" variable (.only Register)]]
      ["[1][0]" phase (.use "[1]#[0]" monad)]
      [meta
       [archive (.only Archive)]]]]]]])

(the .public register
  (-> Register Var/1)
  (|>> (///reference.local //reference.system) as_expected))

(the .public capture
  (-> Register Var/1)
  (|>> (///reference.foreign //reference.system) as_expected))

(the .public (let expression archive [valueS register bodyS])
  (Expression [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueG (expression archive valueS)
     bodyG (expression archive bodyS)]
    (in (_.let (stack [(..register register) valueG])
          (stack bodyG)))))

(the .public (if expression archive [testS thenS elseS])
  (Expression [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [testG (expression archive testS)
     thenG (expression archive thenS)
     elseG (expression archive elseS)]
    (in (_.if testG thenG elseG))))

(the .public (get expression archive [pathP valueS])
  (Expression [(Stack Member) Synthesis])
  (do ///////phase.monad
    [valueG (expression archive valueS)]
    (in (stack#mix (function (_ side source)
                     (.let [method (`` (.when side
                                         (,, (template.with [<side> <accessor>]
                                               [(<side> lefts)
                                                (<accessor> (_.int (.integer lefts)))]

                                               [.#Left //runtime.tuple//left]
                                               [.#Right //runtime.tuple//right]))))]
                       (method source)))
                   valueG
                   pathP))))

(the @savepoint (_.var "lux_pm_savepoint"))
(the @cursor (_.var "lux_pm_cursor"))
(the @temp (_.var "lux_pm_temp"))
(the @variant (_.var "lux_pm_variant"))

(the (push! value)
  (-> (_.Expression Any) (_.Expression Any))
  (_.setq @cursor (_.cons/2 [value @cursor])))

(the pop!
  (_.Expression Any)
  (_.setq @cursor (_.cdr/1 @cursor)))

(the peek
  (_.Expression Any)
  (_.car/1 @cursor))

(the save!
  (_.Expression Any)
  (_.setq @savepoint (_.cons/2 [@cursor @savepoint])))

(the restore!
  (Stack (_.Expression Any))
  (stack (_.setq @cursor (_.car/1 @savepoint))
         (_.setq @savepoint (_.cdr/1 @savepoint))))

(the (multi_pop! pops)
  (-> Natural (_.Expression Any))
  (_.setq @cursor (_.nthcdr/2 [(_.int (.integer pops)) @cursor])))

(template.with [<name> <flag> <prep>]
  [(the (<name> @fail simple? idx next!)
     (-> _.Tag Bit Natural (Maybe (_.Expression Any)) (_.Expression Any))
     (.let [<failure_condition> (_.eq/2 [@variant @temp])]
       (_.let (stack [@variant ..peek])
         (stack.partial (_.setq @temp (|> idx <prep> .integer _.int (//runtime.sum//get @variant <flag>)))
                        (.if simple?
                          (_.when <failure_condition>
                            (_.go @fail))
                          (_.if <failure_condition>
                            (_.go @fail)
                            (..push! @temp)))
                        (.when next!
                          {.#Some next!}
                          (stack next!)
                          
                          {.#None}
                          (stack))))))]

  [left_choice  _.nil         (<|)]
  [right_choice (_.string "") ++]
  )

(the (alternation @else pre! post!)
  (-> _.Tag (_.Expression Any) (_.Expression Any)
      (_.Expression Any))
  (_.tagbody (all stack#composite
                  (stack ..save!
                         pre!
                         @else)
                  ..restore!
                  (stack post!))))

(the (pattern_matching' expression archive)
  (Expression [Var/1 _.Tag _.Tag Path])
  (function (again [$output @done @fail pathP])
    (`` (.when pathP
          (/////synthesis.path/then bodyS)
          (by ///////phase.monad each
              (function (_ outputV)
                (_.progn (stack (_.setq $output outputV)
                                (_.go @done))))
              (expression archive bodyS))

          {/////synthesis.#Pop}
          (///////phase#in ..pop!)

          {/////synthesis.#Bind register}
          (///////phase#in (_.setq (..register register) ..peek))

          {/////synthesis.#Bit_Fork when thenP elseP}
          (do [! ///////phase.monad]
            [then! (again [$output @done @fail thenP])
             else! (.when elseP
                     {.#Some elseP}
                     (again [$output @done @fail elseP])

                     {.#None}
                     (in (_.go @fail)))]
            (in (.if when
                  (_.if ..peek
                    then!
                    else!)
                  (_.if ..peek
                    else!
                    then!))))

          (,, (template.with [<tag> <injection> <=>]
                [{<tag> item}
                 (do [! ///////phase.monad]
                   [clauses (monad.each ! (function (_ [match then])
                                            (do !
                                              [then! (again [$output @done @fail then])]
                                              (in [(<=> [(|> match <injection>)
                                                         ..peek])
                                                   then!])))
                                        {.#Top item})]
                   (in (stack#mix (function (_ [when then] else)
                                    (_.if when then else))
                                  (_.go @fail)
                                  clauses)))]

                [/////synthesis.#I64_Fork //primitive.i64 _.=/2]
                [/////synthesis.#F64_Fork //primitive.f64 _.=/2]
                [/////synthesis.#Text_Fork //primitive.text _.string=/2]))

          (,, (template.with [<complex> <simple> <choice>]
                [(<complex> idx)
                 (///////phase#in (<choice> @fail false idx {.#None}))

                 (<simple> idx nextP)
                 (|> nextP
                     [$output @done @fail] again
                     (by ///////phase.monad each (|>> {.#Some} (<choice> @fail true idx))))]

                [/////synthesis.side/left  /////synthesis.simple_left_side  ..left_choice]
                [/////synthesis.side/right /////synthesis.simple_right_side ..right_choice]))

          (/////synthesis.member/left 0)
          (///////phase#in (..push! (_.elt/2 [..peek (_.int +0)])))
          
          (,, (template.with [<pm> <getter>]
                [(<pm> lefts)
                 (///////phase#in (|> ..peek (<getter> (_.int (.integer lefts))) ..push!))]

                [/////synthesis.member/left  //runtime.tuple//left]
                [/////synthesis.member/right //runtime.tuple//right]))

          (/////synthesis.!multi_pop nextP)
          (.let [[extra_pops nextP'] (////synthesis/when.count_pops nextP)]
            (do ///////phase.monad
              [next! (again [$output @done @fail nextP'])]
              (///////phase#in (_.progn (stack (..multi_pop! (n.+ 2 extra_pops))
                                               next!)))))

          (/////synthesis.path/alt preP postP)
          (do [! ///////phase.monad]
            [@else (by ! each (|>> %.natural (text "lux_when_else") _.tag) /////translation.next)
             pre! (again [$output @done @else preP])
             post! (again [$output @done @fail postP])]
            (in (..alternation @else pre! post!)))

          (/////synthesis.path/seq preP postP)
          (do ///////phase.monad
            [pre! (again [$output @done @fail preP])
             post! (again [$output @done @fail postP])]
            (in (_.progn (stack pre! post!))))))))

(the (pattern_matching $output expression archive pathP)
  (-> Var/1
      (Expression Path))
  (do [! ///////phase.monad]
    [@done (by ! each (|>> %.natural (text "lux_when_done") _.tag) /////translation.next)
     @fail (by ! each (|>> %.natural (text "lux_when_fail") _.tag) /////translation.next)
     pattern_matching! (pattern_matching' expression archive [$output @done @fail pathP])]
    (in (_.tagbody
         (stack pattern_matching!
                @fail
                (_.error/1 (_.string ////synthesis/when.pattern_matching_error))
                @done)))))

(the .public (when expression archive [valueS pathP])
  (Expression [Synthesis Path])
  (do [! ///////phase.monad]
    [initG (expression archive valueS)
     $output (by ! each (|>> %.natural (text "lux_when_output") _.var) /////translation.next)
     pattern_matching! (pattern_matching $output expression archive pathP)
     .let [storage (|> pathP
                       ////synthesis/when.storage
                       (its ////synthesis/when.#bindings)
                       set.stack
                       (stack#each (function (_ register)
                                     [(..register register)
                                      _.nil])))]]
    (in (_.let (stack.partial [@cursor (_.list/* (stack initG))]
                              [@savepoint (_.list/* (stack))]
                              [@temp _.nil]
                              [$output _.nil]
                              storage)
          (stack pattern_matching!
                 $output)))))
