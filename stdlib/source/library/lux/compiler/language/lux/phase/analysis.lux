... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except abstraction)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list]
     ["[0]" stack]]]
   [math
    [number
     ["n" natural]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [type
    ["[0]" check]]
   ["[0]" meta (.only)
    ["[0]" binding]
    ["[0]" provenance]
    ["[0]" code]
    ["[0]" module]]]]
 ["[0]" /
  ["[1][0]" simple]
  ["[1][0]" complex]
  ["[1][0]" reference]
  ["[1][0]" function]
  ["[0]" // (.only)
   ["[0]" extension]
   [//
    ["/" analysis (.only Operation Phase Handler Extender)
     ["[1][0]" macro (.only Expander)]
     ["[1][0]" type]]
    [///
     ["[0]" reference]
     [meta
      [archive (.only Archive)]]
     ["@[0]" type]]]]])

(exception.the .public (invalid [module syntax])
  (Exception [Text @type.Code])
  (exception.report
   (list ["Syntax" (code.relative module syntax)])))

... TODO: Replace with an inline function.
(the variant_analysis
  (template.macro (_ analysis archive tag values)
    ... (-> Phase Archive Name (Stack @type.Code) (Operation /.Term))
    [(when values
       (list value)
       (/complex.variant analysis tag archive value)

       _
       (/complex.variant analysis tag archive (code.tuple values)))]))

... TODO: Replace with an inline function.
(the sum_analysis
  (template.macro (_ analysis archive lefts right? values)
    ... (-> Phase Archive Natural Bit (Stack @type.Code) (Operation /.Term))
    [(when values
       (list value)
       (/complex.sum analysis lefts right? archive value)

       _
       (/complex.sum analysis lefts right? archive (code.tuple values)))]))

(every Macro_Abstraction
  [Name .Macro])

(every Extension_Abstraction
  Name)

(every Function_Abstraction
  [Type /.Term])

(every Abstraction
  (Variant
   {#Macro Macro_Abstraction}
   {#Extension Extension_Abstraction}
   {#Function Function_Abstraction}))

(the (not_an_abstraction term)
  (-> @type.Code
      Operation)
  (do //.monad
    [here module.current_name]
    (//.except ..invalid [here term])))

(the (macro_abstraction analysis archive term)
  (-> Phase Archive @type.Code
      (Operation Macro_Abstraction))
  (do [! //.monad]
    [it (<| (/type.expecting @type.Macro)
            (analysis archive term))]
    (when it
      (/.constant @ name)
      (do [! //.monad]
        [it (binding.macro name)]
        (in [name it]))

      _
      (..not_an_abstraction term))))

(the (extension_abstraction analysis archive term)
  (-> Phase Archive @type.Code
      (Operation Extension_Abstraction))
  (do //.monad
    [it (<| //.try
            (/type.expecting .Analysis)
            (analysis archive term))]
    (when it
      {try.#Success it}
      (when it
        (/.constant @ it)
        (in it)

        _
        (..not_an_abstraction term))

      {try.#Failure error}
      (if (text.contains? (its exception.#label extension.defaults_cannot_be_referenced)
                          error)
          (when term
            {@type.#Name _ ["" _]}
            (..not_an_abstraction term)
            
            {@type.#Name _ it}
            (in it)

            _
            (..not_an_abstraction term))
          (..not_an_abstraction term)))))

(the (function_abstraction analysis archive term)
  (-> Phase Archive @type.Code
      (Operation Function_Abstraction))
  (<| /type.inferring
      (analysis archive term)))

(the (abstraction analysis archive term)
  (-> Phase Archive @type.Code
      (Operation Abstraction))
  (all //.or
       (macro_abstraction analysis archive term)
       (extension_abstraction analysis archive term)
       (function_abstraction analysis archive term)
       ))

... TODO: Replace with an inline function.
(the reification
  (template.macro (_ extender expander analysis archive 'abstraction argsC+)
    ... (-> Extender Expander Phase Archive @type.Code (Stack @type.Code) (Operation /.Term))
    [(do [! //.monad]
       [abstraction (abstraction analysis archive 'abstraction)]
       (when abstraction
         {#Function type abstraction}
         (/function.reification analysis argsC+ type abstraction archive 'abstraction)

         {#Macro name macro}
         (do !
           [expansion (/macro.single_expansion expander name macro (list.of_stack argsC+))]
           (analysis archive expansion))
         
         {#Extension abstraction}
         (do !
           [lux //.state]
           (extension.reification extender
                                  lux analysis archive
                                  .Analysis abstraction (list.of_stack argsC+)
                                  (|>>)
                                  (function (_ _) {.#None})))))]))

(the .public (phase extender expander)
  (-> Extender Expander
      Phase)
  (function (analysis archive code)
    ... The provenance must be set in the state for the sake
    ... of having useful error messages.
    (<| (let [@ (code.provenance code)
              failure (do //.monad
                        [here module.current_name]
                        (//.except ..invalid [here code]))])
        (/.with_provenance @)
        (`` (when code
              ... The `quoted_module` value is extracted from the name's provenance in order to solve a problem with macro expansion.
              ... Suppose that we have 3 modules: `A`, `B`, and `C`.
              ... Module `A` exports a definition named `a`.
              ... Module `B` exports a macro named `b`, which makes a reference to `A.a` in its expansion.
              ... Module `C` imports module `B`, but not module `A`. It also utilizes the `B.b` macro somewhere in its code.
              ... Now, Module `C` has a reference to `A.a` somewhere in its code, which it cannot access because it does not import `A`.
              ... In order to allow macros to reference any definition their owning module can see, when programmatically generating a name, they set themselves
              ... as the module in the name's provenance.
              ... The compiler then picks that up as the `quoted_module`, and uses it for name resolution in order to guarantee visibility of names in the expansion.
              {@type.#Name [quoted_module _line _row] it}
              (/reference.reference extender analysis archive quoted_module it)

              {@type.#Form _ elems}
              (when (list.as_stack elems)
                (stack.partial functionC argsC+)
                (..reification extender expander analysis archive functionC argsC+)

                _
                failure)

              {@type.#Variant _ elems}
              (when (list.as_stack elems)
                (stack.partial {@type.#Name _ tag} values)
                (..variant_analysis analysis archive tag (list.of_stack values))

                (stack.partial {@type.#Bit _ right?} values)
                (..sum_analysis analysis archive 0 right? (list.of_stack values))

                (stack.partial {@type.#Natural _ lefts} {@type.#Bit _ right?} values)
                (..sum_analysis analysis archive lefts right? (list.of_stack values))

                _
                failure)

              {@type.#Tuple _ elems}
              (/complex.record analysis archive (list.as_stack elems))

              (,, (template.with [<tag> <analyser>]
                    [{<tag> _ value}
                     (<analyser> value)]

                    [@type.#Text /simple.text]
                    [@type.#Natural /simple.natural]
                    [@type.#Bit /simple.bit]
                    [@type.#Decimal /simple.decimal]
                    [@type.#Integer /simple.integer]
                    [@type.#Revolution /simple.revolution])))))))
