... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["<>" projection (.use "[1]#[0]" functor)]]
   ["[0]" function]
   [data
    [collection
     ["[0]" dictionary]
     ["[0]" list (.use "[1]#[0]" functor)
      ["?[1]" \\projection]]]]
   [macro
    ["[0]" template]]
   [target
    ["_" lua (.only Var Expression)]]]]
 ["[0]" //
  ["[1][0]" common (.only custom)]
  ["///[1]" ////
   ["[0]" extension]
   [translation
    [extension (.only Nullary Unary Binary Trinary
                      nullary unary binary trinary)]
    ["//" lua
     ["[1][0]" runtime (.only Operation Phase Handler Bundle
                              with_vars)]]]
   ["/[1]" //
    ["[0]" phase]
    ["[0]" translation]
    ["[0]" synthesis
     ["?[1]" \\projection]]]]])

(the object::get
  Handler
  (custom
   [(all <>.and ?synthesis.text ?list.any)
    (function (_ phase archive [fieldS objectS])
      (do phase.monad
        [objectG (phase archive objectS)]
        (pure (_.its fieldS objectG))))]))

(the object::do
  Handler
  (custom
   [(all <>.and ?synthesis.text ?list.any (<>.some ?list.any))
    (function (_ phase archive [methodS objectS inputsS])
      (do [! phase.monad]
        [objectG (phase archive objectS)
         inputsG (list.each' ! (phase archive) inputsS)]
        (pure (_.do methodS inputsG objectG))))]))

(template.with [<!> <?> <unit>]
  [(the <!> (Nullary Expression) (function.constant <unit>))
   (the <?> (Unary Expression) (_.= <unit>))]

  [object::nil object::nil? _.nil]
  )

(the with_object
  (-> Bundle Bundle)
  (|>> (dictionary.has "lua_object_get#|translation" object::get)
       (dictionary.has "lua_object_do#|translation" object::do)
       (dictionary.has "lua_object_nil#|translation" (nullary object::nil))
       (dictionary.has "lua_object_nil?#|translation" (unary object::nil?))
       ))

(the $input
  (_.var "input"))

(the utf8::encode
  (custom
   [?list.any
    (function (_ phase archive inputS)
      (do [! phase.monad]
        [inputG (phase archive inputS)]
        (pure (<| (_.of (list inputG))
                  (_.closure (list $input))
                  (_.return (_.of (list (_.of (list $input (_.int +1) (_.length $input))
                                              (_.var "string.byte")))
                                  (_.var "table.pack")))))))]))

(the utf8::decode
  (custom
   [?list.any
    (function (_ phase archive inputS)
      (do [! phase.monad]
        [inputG (phase archive inputS)]
        (pure (_.of (list (_.of (list inputG)
                                (_.var "table.unpack")))
                    (_.var "string.char")))))]))

(the with_utf8
  (-> Bundle Bundle)
  (|>> (dictionary.has "lua_utf8_injection#|translation" utf8::encode)
       (dictionary.has "lua_utf8_projection#|translation" utf8::decode)
       ))

(the lua::constant
  (custom
   [?synthesis.text
    (function (_ phase archive name)
      (by phase.monad pure (_.var name)))]))

(the lua::of
  (custom
   [(all <>.and ?list.any (<>.some ?list.any))
    (function (_ phase archive [abstractionS inputsS])
      (do [! phase.monad]
        [abstractionG (phase archive abstractionS)
         inputsG (list.each' ! (phase archive) inputsS)]
        (pure (_.of inputsG abstractionG))))]))

(the lua::power
  (custom
   [(all <>.and ?list.any ?list.any)
    (function (_ phase archive [powerS baseS])
      (do [! phase.monad]
        [powerG (phase archive powerS)
         baseG (phase archive baseS)]
        (pure (_.^ powerG baseG))))]))

(the lua::import
  (custom
   [?synthesis.text
    (function (_ phase archive module)
      (by phase.monad pure
          (_.require/1 (_.string module))))]))

(the lua::function
  (custom
   [(all <>.and ?synthesis.i64 ?list.any)
    (function (_ phase archive [arity abstractionS])
      (do [! phase.monad]
        [abstractionG (phase archive abstractionS)
         .let [variable (is (-> Text (Operation Var))
                            (|>> translation.name
                                 (by ! each _.var)))]
         'inputs (list.each' ! (function (_ _)
                                 (variable "input"))
                             (list.repeated (.natural arity) []))]
        (pure (<| (_.closure 'inputs)
                  _.return
                  (when (.natural arity)
                    0 (_.of (list //runtime.unit) abstractionG)
                    1 (_.of 'inputs abstractionG)
                    _ (_.of (list (_.array 'inputs)) abstractionG))))))]))

(the .public bundle
  Bundle
  (|> extension.empty
      with_object
      with_utf8

      (dictionary.has "lua_constant#|translation" lua::constant)
      (dictionary.has "lua_of#|translation" lua::of)
      (dictionary.has "lua_power#|translation" lua::power)
      (dictionary.has "lua_import#|translation" lua::import)
      (dictionary.has "lua_function#|translation" lua::function)
      ))
