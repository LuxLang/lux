... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   ["[0]" function]
   [data
    [collection
     ["[0]" dictionary]
     ["[0]" list (.only)
      ["?[1]" \\projection]]]]
   [macro
    ["[0]" template]]
   [target
    ["_" lua (.only Var Expression)]]]]
 ["[0]" //
  [common (.only custom)]
  ["///[1]" ////
   ["[2]" extension]
   [translation
    [extension (.only Nullary Unary Binary Trinary
                      nullary unary binary trinary)]
    [lua
     ["[0]" runtime (.only Operation Phase Handler Bundle
                           with_vars)]]]
   ["/[1]" //
    ["[0]" phase]
    ["[0]" translation]
    ["[0]" synthesis
     ["?[1]" \\projection]]
    [///
     ["[0]" extension (.only)
      ["[1]/[0]" lua]]]]]])

(the object:get
  Handler
  (custom
   [(all <>.and ?synthesis.text ?list.any)
    (function (_ phase archive [fieldS objectS])
      (monad.let phase.monad
        [objectG (phase archive objectS)]
        (pure (_.its fieldS objectG))))]))

(the object:do
  Handler
  (custom
   [(all <>.and ?synthesis.text ?list.any (<>.some ?list.any))
    (function (_ phase archive [methodS objectS inputsS])
      (monad.let [! phase.monad]
        [objectG (phase archive objectS)
         inputsG (list.each' ! (phase archive) inputsS)]
        (pure (_.do methodS inputsG objectG))))]))

(template.with [<!> <?> <unit>]
  [(the <!> (Nullary Expression) (function.constant <unit>))
   (the <?> (Unary Expression) (_.= <unit>))]

  [[object:nil object:nil? _.nil]]
  )

(the with_object
  (Change Bundle)
  (|>> (dictionary.has (extension.synthesis extension/lua.object_get) object:get)
       (dictionary.has (extension.synthesis extension/lua.object_do) object:do)
       (dictionary.has (extension.synthesis extension/lua.object_nil) (nullary object:nil))
       (dictionary.has (extension.synthesis extension/lua.object_nil?) (unary object:nil?))))

(the $input
  (_.var "input"))

(the utf8:encode
  (custom
   [?list.any
    (function (_ phase archive inputS)
      (monad.let [! phase.monad]
        [inputG (phase archive inputS)]
        (pure (<| (_.of (list inputG))
                  (_.closure (list $input))
                  (_.return (_.of (list (_.of (list $input (_.int +1) (_.length $input))
                                              (_.var "string.byte")))
                                  (_.var "table.pack")))))))]))

(the utf8:decode
  (custom
   [?list.any
    (function (_ phase archive inputS)
      (monad.let [! phase.monad]
        [inputG (phase archive inputS)]
        (pure (_.of (list (_.of (list inputG)
                                (_.var "table.unpack")))
                    (_.var "string.char")))))]))

(the with_utf8
  (Change Bundle)
  (|>> (dictionary.has (extension.synthesis extension/lua.utf8_injection) utf8:encode)
       (dictionary.has (extension.synthesis extension/lua.utf8_projection) utf8:decode)))

(the lua:constant
  (custom
   [?synthesis.text
    (function (_ phase archive name)
      (by phase.monad pure (_.var name)))]))

(the lua:of
  (custom
   [(all <>.and ?list.any (<>.some ?list.any))
    (function (_ phase archive [abstractionS inputsS])
      (monad.let [! phase.monad]
        [abstractionG (phase archive abstractionS)
         inputsG (list.each' ! (phase archive) inputsS)]
        (pure (_.of inputsG abstractionG))))]))

(the lua:power
  (custom
   [(all <>.and ?list.any ?list.any)
    (function (_ phase archive [powerS baseS])
      (monad.let [! phase.monad]
        [powerG (phase archive powerS)
         baseG (phase archive baseS)]
        (pure (_.^ powerG baseG))))]))

(the lua:import
  (custom
   [?synthesis.text
    (function (_ phase archive module)
      (by phase.monad pure
          (_.require/1 (_.string module))))]))

(the lua:function
  (custom
   [(all <>.and ?synthesis.i64 ?list.any)
    (function (_ phase archive [arity abstractionS])
      (monad.let [! phase.monad]
        [abstractionG (phase archive abstractionS)
         .let [variable (is (-> Text (Operation Var))
                            (|>> translation.name
                                 (by ! each _.var)))]
         'inputs (list.each' ! (function (_ _)
                                 (variable "input"))
                             (list.repeated (.natural arity) []))]
        (pure (<| (_.closure 'inputs)
                  _.return
                  (when (.natural arity)
                    0 (_.of (list runtime.unit) abstractionG)
                    1 (_.of 'inputs abstractionG)
                    _ (_.of (list (_.array 'inputs)) abstractionG))))))]))

(the .public bundle
  Bundle
  (|> //.empty
      with_object
      with_utf8

      (dictionary.has (extension.synthesis extension/lua.constant) lua:constant)
      (dictionary.has (extension.synthesis extension/lua.function) lua:function)
      (dictionary.has (extension.synthesis extension/lua.of) lua:of)
      (dictionary.has (extension.synthesis extension/lua.import) lua:import)
      (dictionary.has (extension.synthesis extension/lua.power) lua:power)
      ))
