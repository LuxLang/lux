... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" maybe (.use "[1]:[0]" functor)]
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" list (.use "[1]:[0]" functor mix monoid)]
     ["[0]" set]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]
    ["[0]" expansion]
    ["[0]" template]]]]
 [////
  ["[0]" analysis (.only)
   ["[1]/[0]" complex]]
  ["/" synthesis (.only)
   ["[0]" path (.only Path)]
   ["[1][0]" access]]
  [///
   [arity (.only Arity)]
   ["@[0]" type (.only Register Variable)]]])

(the (prune redundant register)
  (-> Register Register
      Register)
  (if (n.> redundant register)
      (-- register)
      register))

(every (Remover it)
  (-> Register
      (-> it it)))

(the (remove_local_from_path remove_local redundant)
  (-> (Remover /.Term)
      (Remover (Path /.Term)))
  (function (of path)
    (`` (when path
          {path.:And {path.:Bind register}
                     post}
          (if (n.= redundant register)
              (of post)
              {path.:And {path.:Bind (..prune redundant register)}
                         (of post)})

          (,, (template.with [,access]
                [(^.or {path.:And {path.:Access ,access}
                                  {path.:And {path.:Bind register}
                                             post}}
                       ... This alternative form should never occur in practice.
                       ... Yet, it is "technically" possible to construct it.
                       {path.:And {path.:And {path.:Access ,access}
                                             {path.:Bind register}}
                                  post})
                 (if (n.= redundant register)
                     (of post)
                     {path.:And {path.:Access ,access}
                                {path.:And {path.:Bind (..prune redundant register)}
                                           (of post)}})]

                [[{/access.:Member member}]
                 [{/access.:Item position}]]))

          (,, (template.with [<tag>]
                [{<tag> left right}
                 {<tag> (of left) (of right)}]

                [[path.:Or]
                 [path.:And]]))

          {path.:Bit_Fork when then else}
          {path.:Bit_Fork when (of then) (maybe:each of else)}

          (,, (template.with [<tag>]
                [{<tag> [[test then] tail]}
                 {<tag> [[test (of then)]
                         (list:each (function (_ [test' then'])
                                      [test' (of then')])
                                    tail)]}]

                [[path.:I64_Fork]
                 [path.:F64_Fork]
                 [path.:Text_Fork]]))
          
          (^.or {path.:Pop}
                {path.:Access _}
                {path.:List size})
          path

          {path.:Bind register}
          (undefined)
          
          {path.:Then then}
          {path.:Then (remove_local redundant then)}
          ))))

(the (remove_local_from_variable redundant variable)
  (Remover Variable)
  (when variable
    {@type.:Local register}
    {@type.:Local (..prune redundant register)}
    
    {@type.:Foreign register}
    variable))

(the (remove_local redundant)
  (Remover /.Term)
  (function (of synthesis)
    (when synthesis
      [@ {/.:Simple _}]
      synthesis
      
      [@ {/.:Structure structure}]
      [@ {/.:Structure (when structure
                         {@type.:Complex_Variant [lefts right value]}
                         {@type.:Complex_Variant [lefts right (of value)]}
                         
                         {@type.:Complex_Tuple tuple}
                         {@type.:Complex_Tuple (list:each of tuple)})}]
      
      [@ {/.:Reference reference}]
      (when reference
        {@type.:Variable_Reference variable}
        (/.variable @ (..remove_local_from_variable redundant variable))

        {@type.:Constant_Reference constant}
        synthesis)
      
      [@ {/.:Control control}]
      [@ {/.:Control (when control
                       {/.:When [input path]}
                       {/.:When (of input) (remove_local_from_path remove_local redundant path)}
                       
                       {/.:Loop loop}
                       {/.:Loop (when loop
                                  {/.:Tail_Recursion [start inits iteration]}
                                  {/.:Tail_Recursion [(..prune redundant start)
                                                      (list:each of inits)
                                                      (of iteration)]}
                                  
                                  {/.:Tail_Iteration resets}
                                  {/.:Tail_Iteration (list:each of resets)})}

                       {/.:Function function}
                       {/.:Function (when function
                                      {/.:Abstraction [environment arity body]}
                                      {/.:Abstraction [(list:each of environment)
                                                       arity
                                                       body]}

                                      {/.:Reification abstraction inputs}
                                      {/.:Reification (of abstraction) (list:each of inputs)})})}]
      
      [@ {/.:Extension name inputs}]
      [@ {/.:Extension name (list:each of inputs)}])))

(every Redundancy
  (Dictionary Register Bit))

(the initial
  Redundancy
  (dictionary.empty n.hash))

(the redundant! true)
(the necessary! false)

(the (extended offset amount redundancy)
  (-> Register Natural Redundancy
      [(List Register) Redundancy])
  (let [extension (|> amount list.domain (list:each (n.+ offset)))]
    [extension
     (list:mix (function (_ register redundancy)
                 (dictionary.has register ..necessary! redundancy))
               redundancy
               extension)]))

(the (default arity)
  (-> Arity
      Redundancy)
  (product.right (..extended 0 (++ arity) ..initial)))

(every (Optimization it)
  (-> [Redundancy it]
      (Try [Redundancy it])))

(the (list_optimization optimization)
  (for_any (_ it)
    (-> (Optimization it)
        (Optimization (List it))))
  (function (of [redundancy values])
    (if (list.empty? values)
        {try.:Success [redundancy
                       values]}
        (monad.let try.monad
          [head (list.item 0 values)
           [redundancy head] (optimization [redundancy head])
           [redundancy tail] (of [redundancy (list.after 1 values)])]
          (pure [redundancy
                 (list:composite (list head) tail)])))))

(template.with [<name>]
  [(exception.the .public (<name> register)
     (Exception Register)
     (exception.report
      (list ["Register" (%.natural register)])))]

  [[redundant_declaration]
   [unknown_register]])

(the (declare register redundancy)
  (-> Register Redundancy
      (Try Redundancy))
  (when (dictionary.value register redundancy)
    {try.:Failure _}
    {try.:Success (dictionary.has register ..redundant! redundancy)}
    
    {try.:Success _}
    (exception.except ..redundant_declaration [register])))

(the (observe register redundancy)
  (-> Register Redundancy
      (Try Redundancy))
  (when (dictionary.value register redundancy)
    {try.:Failure _}
    (exception.except ..unknown_register [register])
    
    {try.:Success _}
    {try.:Success (dictionary.has register ..necessary! redundancy)}))

(the (path_optimization optimization)
  (-> (Optimization /.Term)
      (Optimization (Path /.Term)))
  (function (of [redundancy path])
    (`` (when path
          (^.or {path.:Pop}
                {path.:Access _}
                {path.:List size})
          {try.:Success [redundancy
                         path]}

          {path.:Bit_Fork test then else}
          (monad.let [! try.monad]
            [[redundancy then] (of [redundancy then])
             [redundancy else] (when else
                                 {.:Some else}
                                 (by ! each
                                     (function (_ [redundancy else])
                                       [redundancy {.:Some else}])
                                     (of [redundancy else]))

                                 {.:None}
                                 (pure [redundancy {.:None}]))]
            (pure [redundancy {path.:Bit_Fork test then else}]))
          
          (,, (template.with [<tag> <type>]
                [{<tag> [[test then] elses]}
                 (monad.let [! try.monad]
                   [[redundancy then] (of [redundancy then])
                    [redundancy elses] (..list_optimization (is (Optimization [<type> (Path /.Term)])
                                                                (function (_ [redundancy [else_test else_then]])
                                                                  (monad.let !
                                                                    [[redundancy else_then] (of [redundancy else_then])]
                                                                    (pure [redundancy [else_test else_then]]))))
                                                            [redundancy elses])]
                   (pure [redundancy {<tag> [[test then] elses]}]))]

                [[path.:I64_Fork I64]
                 [path.:F64_Fork Decimal]
                 [path.:Text_Fork Text]]))
          
          {path.:Bind register}
          (monad.let try.monad
            [redundancy (..declare register redundancy)]
            (pure [redundancy
                   path]))
          
          {path.:Or left right}
          (monad.let try.monad
            [[redundancy left] (of [redundancy left])
             [redundancy right] (of [redundancy right])]
            (pure [redundancy {path.:Or left right}]))
          
          {path.:And pre post}
          (monad.let try.monad
            [.let [baseline (|> redundancy
                                dictionary.domain
                                (set.of_list n.hash))]
             [redundancy pre] (of [redundancy pre])
             .let [bindings (|> redundancy
                                dictionary.domain
                                (set.of_list n.hash)
                                (set.difference baseline))]
             [redundancy post] (of [redundancy post])
             .let [redundants (|> redundancy
                                  dictionary.entries
                                  (list.only (function (_ [register redundant?])
                                               (and (set.member? bindings register)
                                                    redundant?)))
                                  (list:each product.left))]]
            (pure [(list:mix dictionary.lacks redundancy (set.as_list bindings))
                   (|> redundants
                       (list.in_order n.>)
                       (list:mix (..remove_local_from_path ..remove_local) {path.:And pre post}))]))

          {path.:Then then}
          (monad.let try.monad
            [[redundancy then] (optimization [redundancy then])]
            (pure [redundancy {path.:Then then}]))
          ))))

(the (optimization' [redundancy synthesis])
  (Optimization /.Term)
  (expansion.let [<no_op> (these {try.:Success [redundancy
                                                synthesis]})]
    (when synthesis
      [@ {/.:Simple _}]
      <no_op>
      
      [@ {/.:Structure structure}]
      (when structure
        {@type.:Complex_Variant [lefts right value]}
        (monad.let try.monad
          [[redundancy value] (optimization' [redundancy value])]
          (pure [redundancy
                 [@ {/.:Structure {@type.:Complex_Variant [lefts right value]}}]]))
        
        {@type.:Complex_Tuple tuple}
        (monad.let try.monad
          [[redundancy tuple] (..list_optimization optimization' [redundancy tuple])]
          (pure [redundancy
                 [@ {/.:Structure {@type.:Complex_Tuple tuple}}]])))
      
      [@ {/.:Reference reference}]
      (when reference
        {@type.:Variable_Reference variable}
        (when variable
          {@type.:Local register}
          (monad.let try.monad
            [redundancy (..observe register redundancy)]
            <no_op>)
          
          {@type.:Foreign register}
          <no_op>)

        {@type.:Constant_Reference constant}
        <no_op>)
      
      [@ {/.:Control control}]
      (when control
        {/.:When input path}
        (monad.let try.monad
          [[redundancy input] (optimization' [redundancy input])
           [redundancy path] (..path_optimization optimization' [redundancy path])]
          (pure [redundancy
                 [@ {/.:Control {/.:When input path}}]]))
        
        {/.:Loop loop}
        (when loop
          {/.:Tail_Recursion [start inits iteration]}
          (monad.let try.monad
            [[redundancy inits] (..list_optimization optimization' [redundancy inits])
             .let [[extension redundancy] (..extended start (list.size inits) redundancy)]
             [redundancy iteration] (optimization' [redundancy iteration])]
            (pure [(list:mix dictionary.lacks redundancy extension)
                   [@ {/.:Control {/.:Loop {/.:Tail_Recursion [start inits iteration]}}}]]))
          
          {/.:Tail_Iteration resets}
          (monad.let try.monad
            [[redundancy resets] (..list_optimization optimization' [redundancy resets])]
            (pure [redundancy
                   [@ {/.:Control {/.:Loop {/.:Tail_Iteration resets}}}]])))

        {/.:Function function}
        (when function
          {/.:Abstraction [environment arity body]}
          (monad.let [! try.monad]
            [[redundancy environment] (..list_optimization optimization' [redundancy environment])
             [_ body] (optimization' [(..default arity) body])]
            (pure [redundancy
                   [@ {/.:Control {/.:Function {/.:Abstraction [environment arity body]}}}]]))
          
          {/.:Reification abstraction inputs}
          (monad.let try.monad
            [[redundancy abstraction] (optimization' [redundancy abstraction])
             [redundancy inputs] (..list_optimization optimization' [redundancy inputs])]
            (pure [redundancy
                   [@ {/.:Control {/.:Function {/.:Reification abstraction inputs}}}]]))))
      
      [@ {/.:Extension name inputs}]
      (monad.let try.monad
        [[redundancy inputs] (..list_optimization optimization' [redundancy inputs])]
        (pure [redundancy
               [@ {/.:Extension name inputs}]])))))

(the .public optimization
  (-> /.Term
      (Try /.Term))
  (|>> [..initial]
       optimization'
       (by try.monad each product.right)))
