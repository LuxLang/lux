... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" list (.use "[1]#[0]" functor mix monoid)]
     ["[0]" set]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]
    ["[0]" expansion]
    ["[0]" template]]]]
 [////
  ["[0]" analysis (.only)
   ["[1]/[0]" complex]]
  ["/" synthesis (.only Path)
   ["[1][0]" access]]
  [///
   [arity (.only Arity)]
   ["[0]" reference (.only)
    [register (.only Register)]
    ["[0]" variable (.only Variable)]]
   ["@[0]" type]]])

(the (prune redundant register)
  (-> Register Register
      Register)
  (if (n.> redundant register)
      (-- register)
      register))

(every (Remover it)
  (-> Register
      (-> it it)))

(the (remove_local_from_path remove_local redundant)
  (-> (Remover /.Term)
      (Remover Path))
  (function (again path)
    (`` (when path
          {/.#Seq {/.#Bind register}
                  post}
          (if (n.= redundant register)
              (again post)
              {/.#Seq {/.#Bind (..prune redundant register)}
                      (again post)})

          (,, (template.with [,access]
                [(^.or {/.#Seq {/.#Access ,access}
                               {/.#Seq {/.#Bind register}
                                       post}}
                       ... This alternative form should never occur in practice.
                       ... Yet, it is "technically" possible to construct it.
                       {/.#Seq {/.#Seq {/.#Access ,access}
                                       {/.#Bind register}}
                               post})
                 (if (n.= redundant register)
                     (again post)
                     {/.#Seq {/.#Access ,access}
                             {/.#Seq {/.#Bind (..prune redundant register)}
                                     (again post)}})]

                [[{/access.#Member member}]
                 [{/access.#Item position}]]
                ))

          (,, (template.with [<tag>]
                [{<tag> left right}
                 {<tag> (again left) (again right)}]

                [[/.#Seq]
                 [/.#Alt]]
                ))

          {/.#Bit_Fork when then else}
          {/.#Bit_Fork when (again then) (maybe#each again else)}

          (,, (template.with [<tag>]
                [{<tag> [[test then] tail]}
                 {<tag> [[test (again then)]
                         (list#each (function (_ [test' then'])
                                      [test' (again then')])
                                    tail)]}]

                [[/.#I64_Fork]
                 [/.#F64_Fork]
                 [/.#Text_Fork]]
                ))
          
          (^.or {/.#Pop}
                {/.#Access _}
                {/.#List size})
          path

          {/.#Bind register}
          (undefined)
          
          {/.#Then then}
          {/.#Then (remove_local redundant then)}
          ))))

(the (remove_local_from_variable redundant variable)
  (Remover Variable)
  (when variable
    {variable.#Local register}
    {variable.#Local (..prune redundant register)}
    
    {variable.#Foreign register}
    variable))

(the (remove_local redundant)
  (Remover /.Term)
  (function (again synthesis)
    (when synthesis
      [@ {/.#Simple _}]
      synthesis
      
      [@ {/.#Structure structure}]
      [@ {/.#Structure (when structure
                         {@type.#Complex_Variant [lefts right value]}
                         {@type.#Complex_Variant [lefts right (again value)]}
                         
                         {@type.#Complex_Tuple tuple}
                         {@type.#Complex_Tuple (list#each again tuple)})}]
      
      [@ {/.#Reference reference}]
      (when reference
        {reference.#Variable variable}
        (/.variable @ (..remove_local_from_variable redundant variable))

        {reference.#Constant constant}
        synthesis)
      
      [@ {/.#Control control}]
      [@ {/.#Control (when control
                       {/.#When [input path]}
                       {/.#When (again input) (remove_local_from_path remove_local redundant path)}
                       
                       {/.#Loop loop}
                       {/.#Loop (when loop
                                  {/.#Tail_Recursion [start inits iteration]}
                                  {/.#Tail_Recursion [(..prune redundant start)
                                                      (list#each again inits)
                                                      (again iteration)]}
                                  
                                  {/.#Tail_Iteration resets}
                                  {/.#Tail_Iteration (list#each again resets)})}

                       {/.#Function function}
                       {/.#Function (when function
                                      {/.#Abstraction [environment arity body]}
                                      {/.#Abstraction [(list#each again environment)
                                                       arity
                                                       body]}

                                      {/.#Reification abstraction inputs}
                                      {/.#Reification (again abstraction) (list#each again inputs)})})}]
      
      [@ {/.#Extension name inputs}]
      [@ {/.#Extension name (list#each again inputs)}])))

(every Redundancy
  (Dictionary Register Bit))

(the initial
  Redundancy
  (dictionary.empty n.hash))

(the redundant! true)
(the necessary! false)

(the (extended offset amount redundancy)
  (-> Register Natural Redundancy
      [(List Register) Redundancy])
  (let [extension (|> amount list.indices (list#each (n.+ offset)))]
    [extension
     (list#mix (function (_ register redundancy)
                 (dictionary.has register ..necessary! redundancy))
               redundancy
               extension)]))

(the (default arity)
  (-> Arity
      Redundancy)
  (product.right (..extended 0 (++ arity) ..initial)))

(every (Optimization it)
  (-> [Redundancy it]
      (Try [Redundancy it])))

(the (list_optimization optimization)
  (for_any (_ it)
    (-> (Optimization it)
        (Optimization (List it))))
  (function (again [redundancy values])
    (if (list.empty? values)
        {try.#Success [redundancy
                       values]}
        (monad.let try.monad
          [head (list.item 0 values)
           [redundancy head] (optimization [redundancy head])
           [redundancy tail] (again [redundancy (list.after 1 values)])]
          (pure [redundancy
                 (list#composite (list head) tail)])))))

(template.with [<name>]
  [(exception.the .public (<name> register)
     (Exception Register)
     (exception.report
      (list ["Register" (%.natural register)])))]

  [[redundant_declaration]
   [unknown_register]]
  )

(the (declare register redundancy)
  (-> Register Redundancy
      (Try Redundancy))
  (when (dictionary.value register redundancy)
    {try.#Failure _}
    {try.#Success (dictionary.has register ..redundant! redundancy)}
    
    {try.#Success _}
    (exception.except ..redundant_declaration [register])))

(the (observe register redundancy)
  (-> Register Redundancy
      (Try Redundancy))
  (when (dictionary.value register redundancy)
    {try.#Failure _}
    (exception.except ..unknown_register [register])
    
    {try.#Success _}
    {try.#Success (dictionary.has register ..necessary! redundancy)}))

(the (path_optimization optimization)
  (-> (Optimization /.Term)
      (Optimization Path))
  (function (again [redundancy path])
    (`` (when path
          (^.or {/.#Pop}
                {/.#Access _}
                {/.#List size})
          {try.#Success [redundancy
                         path]}

          {/.#Bit_Fork test then else}
          (monad.let [! try.monad]
            [[redundancy then] (again [redundancy then])
             [redundancy else] (when else
                                 {.#Some else}
                                 (by ! each
                                     (function (_ [redundancy else])
                                       [redundancy {.#Some else}])
                                     (again [redundancy else]))

                                 {.#None}
                                 (pure [redundancy {.#None}]))]
            (pure [redundancy {/.#Bit_Fork test then else}]))
          
          (,, (template.with [<tag> <type>]
                [{<tag> [[test then] elses]}
                 (monad.let [! try.monad]
                   [[redundancy then] (again [redundancy then])
                    [redundancy elses] (..list_optimization (is (Optimization [<type> Path])
                                                                (function (_ [redundancy [else_test else_then]])
                                                                  (monad.let !
                                                                    [[redundancy else_then] (again [redundancy else_then])]
                                                                    (pure [redundancy [else_test else_then]]))))
                                                            [redundancy elses])]
                   (pure [redundancy {<tag> [[test then] elses]}]))]

                [[/.#I64_Fork I64]
                 [/.#F64_Fork Decimal]
                 [/.#Text_Fork Text]]
                ))
          
          {/.#Bind register}
          (monad.let try.monad
            [redundancy (..declare register redundancy)]
            (pure [redundancy
                   path]))
          
          {/.#Alt left right}
          (monad.let try.monad
            [[redundancy left] (again [redundancy left])
             [redundancy right] (again [redundancy right])]
            (pure [redundancy {/.#Alt left right}]))
          
          {/.#Seq pre post}
          (monad.let try.monad
            [.let [baseline (|> redundancy
                                dictionary.keys
                                (set.of_list n.hash))]
             [redundancy pre] (again [redundancy pre])
             .let [bindings (|> redundancy
                                dictionary.keys
                                (set.of_list n.hash)
                                (set.difference baseline))]
             [redundancy post] (again [redundancy post])
             .let [redundants (|> redundancy
                                  dictionary.entries
                                  (list.only (function (_ [register redundant?])
                                               (and (set.member? bindings register)
                                                    redundant?)))
                                  (list#each product.left))]]
            (pure [(list#mix dictionary.lacks redundancy (set.as_list bindings))
                   (|> redundants
                       (list.sorted n.>)
                       (list#mix (..remove_local_from_path ..remove_local) {/.#Seq pre post}))]))

          {/.#Then then}
          (monad.let try.monad
            [[redundancy then] (optimization [redundancy then])]
            (pure [redundancy {/.#Then then}]))
          ))))

(the (optimization' [redundancy synthesis])
  (Optimization /.Term)
  (expansion.let [<no_op> (these {try.#Success [redundancy
                                                synthesis]})]
    (when synthesis
      [@ {/.#Simple _}]
      <no_op>
      
      [@ {/.#Structure structure}]
      (when structure
        {@type.#Complex_Variant [lefts right value]}
        (monad.let try.monad
          [[redundancy value] (optimization' [redundancy value])]
          (pure [redundancy
                 [@ {/.#Structure {@type.#Complex_Variant [lefts right value]}}]]))
        
        {@type.#Complex_Tuple tuple}
        (monad.let try.monad
          [[redundancy tuple] (..list_optimization optimization' [redundancy tuple])]
          (pure [redundancy
                 [@ {/.#Structure {@type.#Complex_Tuple tuple}}]])))
      
      [@ {/.#Reference reference}]
      (when reference
        {reference.#Variable variable}
        (when variable
          {variable.#Local register}
          (monad.let try.monad
            [redundancy (..observe register redundancy)]
            <no_op>)
          
          {variable.#Foreign register}
          <no_op>)

        {reference.#Constant constant}
        <no_op>)
      
      [@ {/.#Control control}]
      (when control
        {/.#When input path}
        (monad.let try.monad
          [[redundancy input] (optimization' [redundancy input])
           [redundancy path] (..path_optimization optimization' [redundancy path])]
          (pure [redundancy
                 [@ {/.#Control {/.#When input path}}]]))
        
        {/.#Loop loop}
        (when loop
          {/.#Tail_Recursion [start inits iteration]}
          (monad.let try.monad
            [[redundancy inits] (..list_optimization optimization' [redundancy inits])
             .let [[extension redundancy] (..extended start (list.size inits) redundancy)]
             [redundancy iteration] (optimization' [redundancy iteration])]
            (pure [(list#mix dictionary.lacks redundancy extension)
                   [@ {/.#Control {/.#Loop {/.#Tail_Recursion [start inits iteration]}}}]]))
          
          {/.#Tail_Iteration resets}
          (monad.let try.monad
            [[redundancy resets] (..list_optimization optimization' [redundancy resets])]
            (pure [redundancy
                   [@ {/.#Control {/.#Loop {/.#Tail_Iteration resets}}}]])))

        {/.#Function function}
        (when function
          {/.#Abstraction [environment arity body]}
          (monad.let [! try.monad]
            [[redundancy environment] (..list_optimization optimization' [redundancy environment])
             [_ body] (optimization' [(..default arity) body])]
            (pure [redundancy
                   [@ {/.#Control {/.#Function {/.#Abstraction [environment arity body]}}}]]))
          
          {/.#Reification abstraction inputs}
          (monad.let try.monad
            [[redundancy abstraction] (optimization' [redundancy abstraction])
             [redundancy inputs] (..list_optimization optimization' [redundancy inputs])]
            (pure [redundancy
                   [@ {/.#Control {/.#Function {/.#Reification abstraction inputs}}}]]))))
      
      [@ {/.#Extension name inputs}]
      (monad.let try.monad
        [[redundancy inputs] (..list_optimization optimization' [redundancy inputs])]
        (pure [redundancy
               [@ {/.#Extension name inputs}]])))))

(the .public optimization
  (-> /.Term
      (Try /.Term))
  (|>> [..initial]
       optimization'
       (by try.monad each product.right)))
