... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["<>" projection]]
   [control
    [io (.only IO)]
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" binary]
    ["[0]" product]
    ["[0]" text
     ["%" \\injection]]
    [collection
     ["[0]" dictionary]
     ["[0]" array]
     ["[0]" list (.use "[1]#[0]" functor mix)
      ["?[1]" \\projection]]
     ["[0]" stack (.use "[1]#[0]" functor mix)]
     ["[0]" set (.only Set)]]]
   [math
    [number
     ["n" natural]]]
   [macro
    ["^" pattern]
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" type (.only sharing)
    ["[0]" check]]
   ["[0]" meta (.only)
    ["[0]" name]
    ["[0]" code
     ["<[1]>" \\projection]]]]]
 ["[0]" /// (.only)
  ["[1][0]" analysis]
  ["/[1]" //
   ["/[1]" //
    ["[0]" analysis (.only)
     [macro (.only Expander)]
     ["[1]/[0]" evaluation]
     ["[0]A" type]
     ["[0]" scope]
     ["[0]" module]]
    ["[0]" synthesis]
    ["[1][0]" translation]
    ["[1][0]" declaration (.only Import Requirements Phase Operation Handler Extender Bundle)]
    ["[0]" phase (.only)
     [extension
      ["[0]E" analysis
       ["[1]" lux]]]]
    ["[1][0]" program (.only Program)]
    [///
     [meta
      ["[0]" archive (.only Archive)
       ["[0]" artifact]
       ["[0]" unit]]
      ["[0]" cache
       [dependency
        ["[1]/[0]" artifact]]]]
     ["@[0]" type]]]]])

(the .public (custom [syntax handler])
  (for_any (_ anchor expression declaration it)
    (-> [(<code>.Projection it)
         (-> (Phase anchor expression declaration) Archive it
             (Operation anchor expression declaration Requirements))]
        (Handler anchor expression declaration)))
  (function (_ phase archive inputs)
    (when (?list.value inputs syntax)
      {try.#Success inputs}
      (handler phase archive inputs)

      {try.#Failure error}
      (phase.failure error))))

... TODO: Inline "evaluate!'" into "evaluate!" ASAP
(the (evaluate!' archive translation code//type codeS)
  (for_any (_ anchor expression declaration)
    (-> Archive
        (/////translation.Phase anchor expression declaration)
        Type
        synthesis.Term
        (Operation anchor expression declaration [Type expression Any])))
  (/////declaration.of_translation
   (do phase.monad
     [module /////translation.module
      id /////translation.next
      codeG (translation archive codeS)
      @module (/////translation.module_id module archive)
      codeV (/////translation.evaluate! [{.#None} codeG])]
     (in [code//type codeG codeV]))))

(the .public (evaluate! archive type codeC)
  (for_any (_ anchor expression declaration)
    (-> Archive Type @type.Code
        (Operation anchor expression declaration [Type expression Any])))
  (do phase.monad
    [state phase.state
     .let [analysis_state (its [/////declaration.#analysis /////declaration.#state] state)
           analysis (its [/////declaration.#analysis /////declaration.#phase] state)
           synthesis ((its [/////declaration.#synthesis /////declaration.#phase] state) analysis_state)
           translation ((its [/////declaration.#translation /////declaration.#phase] state) analysis_state)]
     [_ codeA] (<| /////declaration.of_analysis
                   scope.with
                   typeA.fresh
                   (typeA.expecting type)
                   (analysis archive codeC))
     codeS (/////declaration.of_synthesis
            (synthesis archive codeA))]
    (evaluate!' archive translation type codeS)))

... TODO: Inline "definition'" into "definition" ASAP
(the (definition' archive translation [module name] code//type codeS)
  (for_any (_ anchor expression declaration)
    (-> Archive
        (/////translation.Phase anchor expression declaration)
        Name
        Type
        synthesis.Term
        (Operation anchor expression declaration [Type expression Any])))
  (/////declaration.of_translation
   (do phase.monad
     [dependencies (cache/artifact.dependencies archive codeS)
      [interim_artifacts codeG] (/////translation.with_interim_artifacts archive
                                  (translation archive codeS))
      .let [@abstraction (when codeS
                           (synthesis.abstraction @ [env arity body])
                           (|> interim_artifacts
                               stack.last
                               (maybe#each (|>> [arity])))

                           _
                           {.#None})]
      @module (phase.of_try (archive.id module archive))
      @self (/////translation.learn [name @abstraction] false (stack#mix set.has dependencies interim_artifacts))
      [target_name value declaration] (/////translation.define! [@module @self] {.#None} [(maybe#each product.right @abstraction) codeG])
      _ (/////translation.save! @self {.#None} declaration)]
     (in [code//type codeG value]))))

(the (definition archive name codeC)
  (for_any (_ anchor expression declaration)
    (-> Archive Name @type.Code
        (Operation anchor expression declaration [Type expression Any])))
  (do [! phase.monad]
    [state phase.state
     .let [analysis_state (its [/////declaration.#analysis /////declaration.#state] state)
           analysis (its [/////declaration.#analysis /////declaration.#phase] state)
           synthesis ((its [/////declaration.#synthesis /////declaration.#phase] state) analysis_state)
           translation ((its [/////declaration.#translation /////declaration.#phase] state) analysis_state)]
     [_ code//type codeA] (/////declaration.of_analysis
                           (scope.with
                             (typeA.fresh
                              (do !
                                [[code//type codeA] (typeA.inferring
                                                     (analysis archive codeC))
                                 code//type (typeA.check (check.clean (stack) code//type))]
                                (in [code//type codeA])))))
     codeS (/////declaration.of_synthesis
            (synthesis archive codeA))]
    (definition' archive translation name code//type codeS)))

(the Analysis' (@type.new .Analysis))

... TODO: Get rid of this function ASAP.
(the refresh
  (for_any (_ anchor expression declaration)
    (Operation anchor expression declaration Any))
  (do [! phase.monad]
    [state phase.state
     .let [eval (analysis/evaluation.evaluator (its [/////declaration.#analysis /////declaration.#phase] state)
                                               [(its [/////declaration.#synthesis /////declaration.#state] state)
                                                (its [/////declaration.#synthesis /////declaration.#phase] state)]
                                               [(its [/////declaration.#translation /////declaration.#state] state)
                                                (its [/////declaration.#translation /////declaration.#phase] state)])]
     _ (<| /////declaration.of_analysis
           (do !
             [_ (module.override_definition [.prelude "in_module#"] [true {@type.#Default [..Analysis' (analysisE.in_module#_extension eval "in_module#")]}])
              _ (module.override_definition [.prelude "is#"] [true {@type.#Default [..Analysis' (analysisE.is#_extension eval "is#")]}])
              _ (module.override_definition [.prelude "as#"] [true {@type.#Default [..Analysis' (analysisE.as#_extension eval "as#")]}])]
             (in [])))]
    (in [])))

(the lux::def
  Handler
  (..custom
   [(all <>.and <code>.local ?list.any ?list.any)
    (function (_ phase archive [short_name valueC exported?C])
      (when valueC
        (@type.#Name _ original)
        (do phase.monad
          [_ ..refresh
           state phase.state
           .let [analysis (its [/////declaration.#analysis /////declaration.#phase] state)]
           [code//type codeA] (<| /////declaration.of_analysis
                                  typeA.fresh
                                  typeA.inferring
                                  (analysis archive valueC))
           [_ _ exported?] (evaluate! archive @type.Bit exported?C)
           .let [original (when codeA
                            (analysis.constant @ original)
                            original

                            _
                            (undefined))]
           _ (<| /////declaration.of_analysis
                 (module.define short_name [(as .Bit exported?) {@type.#Alias original}]))]
          (in /////declaration.no_requirements))

        _
        (do phase.monad
          [_ ..refresh
           current_module (<| /////declaration.of_analysis
                              module.current_name)
           .let [full_name [current_module short_name]]
           [type valueT value] (..definition archive full_name valueC)
           [_ _ exported?] (evaluate! archive @type.Bit exported?C)
           _ (<| /////declaration.of_analysis
                 (module.define short_name [(as Bit exported?) {@type.#Definition [(@type.new type)
                                                                                   value]}]))]
          (in /////declaration.no_requirements))))]))

(the imports
  (<code>.Projection (List Import))
  (|> (<code>.tuple (<>.and <code>.text <code>.text))
      <>.some
      <code>.tuple))

(the def_module
  Handler
  (..custom
   [..imports
    (function (_ phase archive imports)
      (do [! phase.monad]
        [_ (<| /////declaration.of_analysis
               (list.each' ! (function (_ [module alias])
                               (do !
                                 [_ (module.import module)]
                                 (when alias
                                   "" (in [])
                                   _ (module.alias alias module))))
                           imports))]
        (in [/////declaration.#imports (list.as_stack imports)
             /////declaration.#referrals (stack)])))]))

... TODO: Stop requiring these types and the "swapped" function below to make types line-up.
(template.with [<name> <anonymous>]
  [(the <name>
     Type
     (expansion.let [<original> binary.Binary]
       (let [_ <original>]
         {.#Named (name <original>)
                  <anonymous>})))]

  [Binary|Python (Nominal "bytearray")]
  [Binary|DEFAULT (type (array.Array (I64 Any)))]
  )

(the (swapped original replacement)
  (-> Type Type
      (Change Type))
  (function (again type)
    (if (type.= original type)
        replacement
        (`` (when type
              {.#Nominal name parameters}
              {.#Nominal name (list#each (function (_ [polarity it])
                                           [polarity (again it)])
                                         parameters)}

              {.#Reification left right}
              {.#Reification (again left) (again right)}

              {.#Quantification quantification closure body}
              {.#Quantification quantification closure (again body)}
              
              {.#Named name anonymous}
              {.#Named name (again anonymous)}
              
              (^.or {.#Parameter _}
                    {.#Variable _}
                    {.#Opaque _})
              type)))))

(the .public bundle
  Bundle
  (|> ///.empty
      (dictionary.has "def#" lux::def)
      (dictionary.has "module#" def_module)))
