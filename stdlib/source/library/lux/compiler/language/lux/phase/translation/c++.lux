... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [macro
    ["[0]" template]]]]
 ["[0]" /
  [runtime (.only Operation Phase Handler)]
  ["[1][0]" primitive]
  ["[1][0]" complex]
  ["[1][0]" reference]
  ["[0]" function]
  ["[0]" when]
  ["[0]" loop]
  ["[0]" statement]
  [///
   ["[0]" extension]
   [//
    ["[0]" phase (.use "[1]#[0]" monad)]
    ["[0]" synthesis]
    ["[0]" translation]
    [///
     ["[0]" reference]]]]])

(the .public (translation extender lux)
  (-> extension.Extender Lux
      Phase)
  (function (phase archive it)
    (`` (when it
          (,, (template.with [<tag> <translator>]
                [(<tag> @ it)
                 (phase#pure (<translator> it))]

                [[synthesis.bit  /primitive.bit]
                 [synthesis.i64  /primitive.i64]
                 [synthesis.f64  /primitive.f64]
                 [synthesis.text /primitive.text]]
                ))

          (synthesis.variant @ it)
          (/complex.variant phase archive it)

          (synthesis.tuple @ it)
          (/complex.tuple phase archive it)

          [@ {synthesis.#Reference it}]
          (when it
            {reference.#Variable it}
            (phase#pure (/reference.variable it))
            
            {reference.#Constant it}
            (/reference.constant archive it))

          (synthesis.when @ it)
          (when.when statement.statement phase archive it)

          (synthesis.exec @ it)
          (when.exec phase archive it)

          (synthesis.let @ it)
          (when.let phase archive it)

          (synthesis.if @ it)
          (when.if phase archive it)

          (synthesis.its @ it)
          (when.its phase archive it)

          (synthesis.scope @ it)
          (loop.scope statement.statement phase archive it)

          ... (synthesis.again @ updates)
          ... (loop.again phase archive updates)

          (synthesis.abstraction @ it)
          (function.abstraction statement.statement phase archive it)

          (synthesis.reification @ it)
          (function.reification phase archive it)

          [@ {synthesis.#Extension [name parameters]}]
          (extension.reification extender lux phase archive .Translation name parameters
                                 (|>>)
                                 (function (_ _) {.#None}))

          _
          (halt! (synthesis.as_text it))
          ))))
