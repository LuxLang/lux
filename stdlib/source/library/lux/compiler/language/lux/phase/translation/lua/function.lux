... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except function)
   [abstract
    ["[0]" monad]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" monoid functor mix)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [target
    ["_" lua (.only Var)]]
   [compiler
    [type (.only Register)]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Phase! Expression)]
  ["[1][0]" reference]
  ["[1][0]" when]
  ["/[1]" //
   ["[1][0]" reference]
   ["//[1]" ///
    ["[0]" phase (.use "[1]:[0]" monad)]
    ["[0]" analysis]
    ["[0]" synthesis]
    ["[0]" translation]
    ["//[1]" ///
     [arity (.only Arity)]
     [meta
      [archive
       ["[0]" unit]]
      ["[0]" cache
       [dependency
        ["[1]" artifact]]]]]]]])

(the capture
  (-> Register
      Var)
  (|>> (///reference.foreign //reference.system)
       as_expected))

(the (procedure_id abstraction_id)
  (-> unit.ID
      unit.ID)
  [unit.:module (its unit.:module abstraction_id)
   unit.:artifact (++ (its unit.:artifact abstraction_id))])

(the @scope
  (-> unit.ID
      _.Label)
  (|>> ///reference.artifact
       (text.suffix "_scope")
       _.label))

(the (procedure environment name arity body)
  (-> (List //runtime.Value) unit.ID Arity _.Statement
      _.Statement)
  (_.function (_.var (///reference.artifact name))
    (all list:composite
         (|> (list.enumeration environment)
             (list:each (|>> product.left ..capture)))
         (list (//when.register 0))
         (list:each (|>> ++ //when.register)
                    (list.domain arity))
         )
    (all _.then
         (_.set_label (..@scope name))
         body)))

(the (arbitrary_reification' expression archive [abstraction parameters])
  (Expression [//runtime.Value (List synthesis.Term)])
  (monad.let [! phase.monad]
    [parameters (list.each' ! (expression archive) parameters)]
    (pure (_.of parameters abstraction))))

(the (arbitrary_reification expression archive [abstraction parameters])
  (Expression synthesis.Reification)
  (monad.let phase.monad
    [abstraction (expression archive abstraction)]
    (arbitrary_reification' expression archive [abstraction parameters])))

(the (exact_reification expression archive [abstraction arity parameters])
  (Expression [unit.ID Arity (List synthesis.Term)])
  (monad.let [! phase.monad]
    [parameters (list.each' ! (expression archive) parameters)]
    (pure (_.of (list:composite (list (_.var (///reference.artifact abstraction)))
                                parameters)
                (_.var (///reference.artifact (..procedure_id abstraction)))))))

(the (successive_reification expression archive [abstraction arity parameters])
  (Expression [unit.ID Arity (List synthesis.Term)])
  (monad.let [! phase.monad]
    [first (exact_reification expression archive [abstraction arity (list.first arity parameters)])]
    (arbitrary_reification' expression archive [first (list.after arity parameters)])))

(the .public (reification expression archive [abstraction parameters])
  (Expression synthesis.Reification)
  (when abstraction
    (synthesis.constant @ $abstraction)
    (monad.let [! phase.monad]
      [[@definition |abstraction|] (translation.definition archive $abstraction)
       .let [actual_arity (list.size parameters)]]
      (when |abstraction|
        {.:Some [_ {.:Some [expected_arity @abstraction]}]}
        (if (n.= expected_arity actual_arity)
            (exact_reification expression archive [@abstraction expected_arity parameters])

            (n.< expected_arity actual_arity)
            (arbitrary_reification expression archive [abstraction parameters])
            
            ... (n.> expected_arity actual_arity)
            (successive_reification expression archive [@abstraction expected_arity parameters]))
        
        _
        (arbitrary_reification expression archive [abstraction parameters])))

    _
    (arbitrary_reification expression archive [abstraction parameters])))

(the (with_closure inits @self @args body!)
  (-> (List _.Expression) Var (List Var) _.Statement
      [_.Statement _.Expression])
  (when inits
    (list)
    [(_.function @self @args body!)
     @self]

    non_empty
    (let [@inits (|> (list.enumeration inits)
                     (list:each (|>> product.left ..capture)))]
      [(_.function @self @inits
         (all _.then
              (_.local_function @self @args body!)
              (_.return @self)))
       (_.of inits @self)])))

(the input
  (|>> ++ //when.register))

(the .public (function statement expression archive [environment arity bodyS])
  (-> Phase!
      (Expression (analysis.Abstraction synthesis.Term)))
  (monad.let [! phase.monad]
    [dependencies (cache.dependencies archive bodyS)
     environment (list.each' ! (expression archive) environment)
     [abstraction_id @scope body!] (let [abstraction (<| (translation.with_new_context archive dependencies)
                                                         (monad.let !
                                                           [@scope (by ! each ..@scope
                                                                       (translation.context archive))
                                                            body (translation.with_anchor [1 @scope]
                                                                   (statement expression archive bodyS))]
                                                           (pure [@scope body])))]
                                     (when environment
                                       (list)
                                       (monad.let !
                                         [[abstraction_id procedure_id @scope body!] (<| (translation.with_new_context archive dependencies)
                                                                                         abstraction)
                                          .let [procedure_definition (..procedure environment procedure_id arity body!)]
                                          _ (translation.execute! procedure_definition)
                                          _ (translation.save! (its unit.:artifact procedure_id) {.:None} procedure_definition)]
                                         (pure [abstraction_id @scope body!]))

                                       non_empty
                                       abstraction))
     .let [@curried (_.var "curried")
           arityO (|> arity .integer _.int)
           @num_args (_.var "num_args")
           @self (_.var (///reference.artifact abstraction_id))
           initialize_self! (_.local/1 (//when.register 0) @self)
           initialize! (list:mix (.function (_ post pre!)
                                   (all _.then
                                        pre!
                                        (_.local/1 (..input post) (_.item (|> post ++ .integer _.int) @curried))))
                                 initialize_self!
                                 (list.domain arity))
           pack (|>> (list) _.array)
           unpack (is (-> _.Expression _.Expression)
                      (.function (_ it)
                        (_.of (list it) (_.var "table.unpack"))))
           @var_args (_.var "...")
           [definition instantiation] (with_closure environment @self (list @var_args)
                                        (all _.then
                                             (_.local/1 @curried (pack @var_args))
                                             (_.local/1 @num_args (_.length @curried))
                                             (<| (_.if (|> @num_args (_.= arityO))
                                                       (all _.then
                                                            initialize!
                                                            (_.set_label @scope)
                                                            body!))
                                                 (_.if (|> @num_args (_.< arityO))
                                                       (_.return (_.closure (list @var_args)
                                                                            (let [@extra_args (_.var "extra_args")]
                                                                              (all _.then
                                                                                   (_.local/1 @extra_args (pack @var_args))
                                                                                   (_.return (_.of (list (unpack (_.of (list @extra_args
                                                                                                                             (_.int +1)
                                                                                                                             (_.length @extra_args)
                                                                                                                             (_.+ (_.int +1) @num_args)
                                                                                                                             (_.of (list @curried
                                                                                                                                         (_.int +1)
                                                                                                                                         @num_args
                                                                                                                                         (_.int +1)
                                                                                                                                         (_.array (list)))
                                                                                                                                   (_.var "table.move")))
                                                                                                                       (_.var "table.move"))))
                                                                                                   @self)))))))
                                                 ... (|> @num_args (_.> arityO))
                                                 (let [arity_inputs (_.of (list @curried
                                                                                (_.int +1)
                                                                                arityO
                                                                                (_.int +1)
                                                                                (_.array (list)))
                                                                          (_.var "table.move"))
                                                       extra_inputs (_.of (list @curried
                                                                                (_.+ (_.int +1) arityO)
                                                                                @num_args
                                                                                (_.int +1)
                                                                                (_.array (list)))
                                                                          (_.var "table.move"))]
                                                   (_.return (|> @self
                                                                 (_.of (list (unpack arity_inputs)))
                                                                 (_.of (list (unpack extra_inputs)))))))
                                             ))]
     _ (translation.execute! definition)
     _ (translation.save! (product.right abstraction_id) {.:None} definition)]
    (pure instantiation)))
