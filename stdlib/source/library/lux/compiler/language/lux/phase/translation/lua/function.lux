... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except function)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" stack (.use "[1]#[0]" monoid functor mix)]]]
   [math
    [number
     ["n" natural]]]
   [compiler
    [target
     ["_" lua (.only Var)]]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Phase! Expression)]
  ["[1][0]" reference]
  ["[1][0]" when]
  ["/[1]" //
   ["[1][0]" reference]
   ["//[1]" ///
    ["[0]" phase (.use "[1]#[0]" monad)]
    ["[0]" analysis]
    ["[0]" synthesis]
    ["[0]" translation]
    ["//[1]" ///
     [arity (.only Arity)]
     [meta
      [archive
       ["[0]" unit]]
      ["[0]" cache
       [dependency
        ["[1]" artifact]]]]
     [reference
      [register (.only Register)]]]]]])

(the capture
  (-> Register Var)
  (|>> (///reference.foreign //reference.system) as_expected))

(the (procedure_id abstraction_id)
  (-> unit.ID
      unit.ID)
  [unit.#module (its unit.#module abstraction_id)
   unit.#artifact (++ (its unit.#artifact abstraction_id))])

(the @scope
  (-> unit.ID
      _.Label)
  (|>> ///reference.artifact
       (text.suffix "_scope")
       _.label))

(the (procedure environment name arity body)
  (-> (Stack //runtime.Value) unit.ID Arity _.Statement
      _.Statement)
  (_.function (_.var (///reference.artifact name))
    (all stack#composite
         (|> (stack.enumeration environment)
             (stack#each (|>> product.left ..capture)))
         (stack (//when.register 0))
         (stack#each (|>> ++ //when.register)
                     (stack.indices arity))
         )
    (all _.then
         (_.set_label (..@scope name))
         body)))

(the (arbitrary_reification' expression archive [abstraction parameters])
  (Expression [//runtime.Value (Stack synthesis.Term)])
  (do [! phase.monad]
    [parameters (monad.each ! (expression archive) parameters)]
    (in (_.apply parameters abstraction))))

(the (arbitrary_reification expression archive [abstraction parameters])
  (Expression synthesis.Reification)
  (do phase.monad
    [abstraction (expression archive abstraction)]
    (arbitrary_reification' expression archive [abstraction parameters])))

(the (exact_reification expression archive [abstraction arity parameters])
  (Expression [unit.ID Arity (Stack synthesis.Term)])
  (do [! phase.monad]
    [parameters (monad.each ! (expression archive) parameters)]
    (in (_.apply {.#Top (_.var (///reference.artifact abstraction))
                        parameters}
                 (_.var (///reference.artifact (..procedure_id abstraction)))))))

(the (successive_reification expression archive [abstraction arity parameters])
  (Expression [unit.ID Arity (Stack synthesis.Term)])
  (do [! phase.monad]
    [first (exact_reification expression archive [abstraction arity (stack.first arity parameters)])]
    (arbitrary_reification' expression archive [first (stack.after arity parameters)])))

(the .public (reification expression archive [abstraction parameters])
  (Expression synthesis.Reification)
  (when abstraction
    (synthesis.constant @ $abstraction)
    (do [! phase.monad]
      [[@definition |abstraction|] (translation.definition archive $abstraction)
       .let [actual_arity (stack.size parameters)]]
      (when |abstraction|
        {.#Some [_ {.#Some [expected_arity @abstraction]}]}
        (if (n.= expected_arity actual_arity)
          (exact_reification expression archive [@abstraction expected_arity parameters])

          (n.< expected_arity actual_arity)
          (arbitrary_reification expression archive [abstraction parameters])
          
          ... (n.> expected_arity actual_arity)
          (successive_reification expression archive [@abstraction expected_arity parameters]))
        
        _
        (arbitrary_reification expression archive [abstraction parameters])))

    _
    (arbitrary_reification expression archive [abstraction parameters])))

(the (with_closure inits @self @args body!)
  (-> (Stack _.Expression) Var (Stack Var) _.Statement [_.Statement _.Expression])
  (when inits
    {.#Empty}
    [(_.function @self @args body!)
     @self]

    _
    (let [@inits (|> (stack.enumeration inits)
                     (stack#each (|>> product.left ..capture)))]
      [(_.function @self @inits
         (all _.then
              (_.local_function @self @args body!)
              (_.return @self)))
       (_.apply inits @self)])))

(the input
  (|>> ++ //when.register))

(the .public (function statement expression archive [environment arity bodyS])
  (-> Phase! (Expression (analysis.Abstraction synthesis.Term)))
  (do [! phase.monad]
    [dependencies (cache.dependencies archive bodyS)
     environment (monad.each ! (expression archive) environment)
     [abstraction_id @scope body!] (let [abstraction (<| (translation.with_new_context archive dependencies)
                                                         (do !
                                                           [@scope (by ! each ..@scope
                                                                       (translation.context archive))
                                                            body (translation.with_anchor [1 @scope]
                                                                   (statement expression archive bodyS))]
                                                           (in [@scope body])))]
                                     (when environment
                                       (stack)
                                       (do !
                                         [[abstraction_id procedure_id @scope body!] (<| (translation.with_new_context archive dependencies)
                                                                                         abstraction)
                                          .let [procedure_definition (..procedure environment procedure_id arity body!)]
                                          _ (translation.execute! procedure_definition)
                                          _ (translation.save! (its unit.#artifact procedure_id) {.#None} procedure_definition)]
                                         (in [abstraction_id @scope body!]))

                                       non_empty
                                       abstraction))
     .let [@curried (_.var "curried")
           arityO (|> arity .integer _.int)
           @num_args (_.var "num_args")
           @self (_.var (///reference.artifact abstraction_id))
           initialize_self! (_.local/1 (//when.register 0) @self)
           initialize! (stack#mix (.function (_ post pre!)
                                    (all _.then
                                         pre!
                                         (_.local/1 (..input post) (_.item (|> post ++ .integer _.int) @curried))))
                                  initialize_self!
                                  (stack.indices arity))
           pack (|>> (stack) _.array)
           unpack (is (-> _.Expression _.Expression)
                      (.function (_ it)
                        (_.apply (stack it) (_.var "table.unpack"))))
           @var_args (_.var "...")
           [definition instantiation] (with_closure environment @self (stack @var_args)
                                        (all _.then
                                             (_.local/1 @curried (pack @var_args))
                                             (_.local/1 @num_args (_.length @curried))
                                             (<| (_.if (|> @num_args (_.= arityO))
                                                   (all _.then
                                                        initialize!
                                                        (_.set_label @scope)
                                                        body!))
                                                 (_.if (|> @num_args (_.< arityO))
                                                   (_.return (_.closure (stack @var_args)
                                                                        (let [@extra_args (_.var "extra_args")]
                                                                          (all _.then
                                                                               (_.local/1 @extra_args (pack @var_args))
                                                                               (_.return (_.apply (stack (unpack (_.apply (stack @extra_args
                                                                                                                                 (_.int +1)
                                                                                                                                 (_.length @extra_args)
                                                                                                                                 (_.+ (_.int +1) @num_args)
                                                                                                                                 (_.apply (stack @curried
                                                                                                                                                 (_.int +1)
                                                                                                                                                 @num_args
                                                                                                                                                 (_.int +1)
                                                                                                                                                 (_.array (stack)))
                                                                                                                                          (_.var "table.move")))
                                                                                                                          (_.var "table.move"))))
                                                                                                  @self)))))))
                                                 ... (|> @num_args (_.> arityO))
                                                 (let [arity_inputs (_.apply (stack @curried
                                                                                    (_.int +1)
                                                                                    arityO
                                                                                    (_.int +1)
                                                                                    (_.array (stack)))
                                                                             (_.var "table.move"))
                                                       extra_inputs (_.apply (stack @curried
                                                                                    (_.+ (_.int +1) arityO)
                                                                                    @num_args
                                                                                    (_.int +1)
                                                                                    (_.array (stack)))
                                                                             (_.var "table.move"))]
                                                   (_.return (|> @self
                                                                 (_.apply (stack (unpack arity_inputs)))
                                                                 (_.apply (stack (unpack extra_inputs)))))))
                                             ))]
     _ (translation.execute! definition)
     _ (translation.save! (product.right abstraction_id) {.#None} definition)]
    (in instantiation)))
