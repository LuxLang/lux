... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except abstraction)
   [abstract
    ["[0]" monad]
    ["[0]" enum]]
   [control
    ["[0]" pipe]
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]]]
 ["[0]" //
  ["[1][0]" loop (.only Transform)]
  ["//[1]" ///
   ["/" synthesis (.only Path Abstraction Operation Phase)]
   ["[0]" phase (.use "[1]#[0]" monad)]
   ["[0]" analysis (.only Environment)
    ["[1]/[0]" complex]]
   [///
    [arity (.only Arity)]
    ["[1][0]" reference (.only)
     [register (.only Register)]
     ["[1]/[0]" variable (.only Variable)]]]]])

(exception.the .public (cannot_find_foreign_variable_in_environment [foreign environment])
  (Exception [Register (Environment /.Term)])
  (exception.report
   (list ["Foreign" (%.natural foreign)]
         ["Environment" (exception.listing /.as_text environment)])))

(the .public self_reference
  (template.macro (self_reference @)
    [(/.local @ 0)]))

(the .public (reification @ phase)
  (-> Provenance Phase
      Phase)
  (function (_ archive exprA)
    (let [[funcA argsA] (analysis.reification exprA)]
      (monad.let [! phase.monad]
        [funcS (phase archive funcA)
         argsS (list.each' ! (phase archive) argsA)]
        (expansion.let [<reification> (these (/.reification @ [funcS argsS]))]
          (when funcS
            (/.abstraction @ functionS)
            (if (n.= (its /.#arity functionS)
                     (list.size argsS))
                (monad.let !
                  [locals /.locals]
                  (pure (|> functionS
                            (//loop.optimization true locals argsS)
                            (maybe#each (is (-> [Natural (List /.Term) /.Term]
                                                /.Term)
                                            (function (_ [start inits iteration])
                                              (when iteration
                                                (/.tail_recursion @ [start' inits' output])
                                                (if (and (n.= start start')
                                                         (list.empty? inits'))
                                                    (/.tail_recursion @ [start inits output])
                                                    (/.tail_recursion @ [start inits iteration]))

                                                _
                                                (/.tail_recursion @ [start inits iteration])))))
                            (maybe.else <reification>))))
                (pure <reification>))

            (/.reification @ [funcS' argsS'])
            (pure (/.reification @ [funcS' (list#composite argsS' argsS)]))

            _
            (pure <reification>)))))))

(the (find_foreign environment register)
  (-> (Environment /.Term) Register
      (Operation /.Term))
  (when (list.item register environment)
    {try.#Success aliased}
    (phase#pure aliased)

    {try.#Failure _}
    (phase.except ..cannot_find_foreign_variable_in_environment [register environment])))

(the (grow_path grow path)
  (-> (-> /.Term (Operation /.Term)) Path
      (Operation Path))
  (`` (when path
        {/.#Bind register}
        (phase#pure {/.#Bind (++ register)})

        (,, (template.with [<tag>]
              [{<tag> left right}
               (monad.let phase.monad
                 [left' (grow_path grow left)
                  right' (grow_path grow right)]
                 (pure {<tag> left' right'}))]

              [[/.#Alt]
               [/.#Seq]]
              ))

        {/.#Bit_Fork test then else}
        (monad.let [! phase.monad]
          [then (grow_path grow then)
           else (when else
                  {.#Some else}
                  (by ! each (|>> {.#Some}) (grow_path grow else))

                  {.#None}
                  (pure {.#None}))]
          (pure {/.#Bit_Fork test then else}))
        
        (,, (template.with [<tag>]
              [{<tag> [[test then] elses]}
               (monad.let [! phase.monad]
                 [then (grow_path grow then)
                  elses (list.each' ! (function (_ [else_test else_then])
                                        (monad.let !
                                          [else_then (grow_path grow else_then)]
                                          (pure [else_test else_then])))
                                    elses)]
                 (pure {<tag> [[test then] elses]}))]

              [[/.#I64_Fork]
               [/.#F64_Fork]
               [/.#Text_Fork]]
              ))
        
        {/.#Then thenS}
        (|> thenS
            grow
            (phase#each (|>> {/.#Then})))

        _
        (phase#pure path))))

(the (grow environment expression)
  (-> (Environment /.Term) /.Term
      (Operation /.Term))
  (when expression
    [@ {/.#Structure structure}]
    (when structure
      {analysis/complex.#Variant [lefts right? subS]}
      (|> subS
          (grow environment)
          (phase#each (|>> [lefts right?] (/.variant @))))
      
      {analysis/complex.#Tuple membersS+}
      (|> membersS+
          (list.each' phase.monad (grow environment))
          (phase#each (|>> (/.tuple @)))))

    (..self_reference @)
    (phase#pure (/.reification @ [expression (list (/.local @ 1))]))
    
    [@ {/.#Reference reference}]
    (when reference
      {////reference.#Variable variable}
      (when variable
        {////reference/variable.#Local register}
        (phase#pure (/.local @ (++ register)))
        
        {////reference/variable.#Foreign register}
        (..find_foreign environment register))
      
      {////reference.#Constant constant}
      (phase#pure expression))
    
    [@ {/.#Control control}]
    (when control
      {/.#When [inputS pathS]}
      (monad.let phase.monad
        [inputS' (grow environment inputS)
         pathS' (grow_path (grow environment) pathS)]
        (pure (/.when @ [inputS' pathS'])))
      
      {/.#Loop loop}
      (when loop
        {/.#Tail_Recursion [start initsS+ iterationS]}
        (monad.let [! phase.monad]
          [initsS+' (list.each' ! (grow environment) initsS+)
           iterationS' (grow environment iterationS)]
          (pure (/.tail_recursion @ [(++ start) initsS+' iterationS'])))
        
        {/.#Tail_Iteration argumentsS+}
        (|> argumentsS+
            (list.each' phase.monad (grow environment))
            (phase#each (|>> (/.tail_iteration @)))))
      
      {/.#Function function}
      (when function
        {/.#Abstraction [_env _arity _body]}
        (monad.let [! phase.monad]
          [_env' (list.each' !
                             (|>> (pipe.when
                                    [@ {/.#Reference {////reference.#Variable {////reference/variable.#Foreign register}}}]
                                    (..find_foreign environment register)

                                    captured
                                    (grow environment captured)))
                             _env)]
          (pure (/.abstraction @ [_env' _arity _body])))
        
        {/.#Reification funcS argsS+}
        (monad.let [! phase.monad]
          [funcS (grow environment funcS)
           argsS+ (list.each' ! (grow environment) argsS+)]
          (pure (/.reification @ (when funcS
                                   (/.reification @ [(..self_reference @) pre_argsS+])
                                   [(..self_reference @)
                                    (list#composite pre_argsS+ argsS+)]

                                   _
                                   [funcS
                                    argsS+]))))))
    
    [@ {/.#Extension name argumentsS+}]
    (|> argumentsS+
        (list.each' phase.monad (grow environment))
        (phase#each (|>> {/.#Extension name} [@])))

    [@ {/.#Simple _}]
    (phase#pure expression)))

(the .public (abstraction @ phase environment archive bodyA)
  (-> Provenance Phase (Environment analysis.Term)
      Phase)
  (monad.let [! phase.monad]
    [environment (list.each' ! (phase archive) environment)
     bodyS (/.with_currying? true
             (/.with_locals 2
               (phase archive bodyA)))
     abstraction (is (Operation Abstraction)
                     (when bodyS
                       (/.abstraction @ [env' down_arity' bodyS'])
                       (|> bodyS'
                           (grow env')
                           (by ! each (function (_ body)
                                        [/.#environment environment
                                         /.#arity (++ down_arity')
                                         /.#body body])))
                       
                       _
                       (pure [/.#environment environment
                              /.#arity 1
                              /.#body bodyS])))
     currying? /.currying?]
    (pure (<| (/.abstraction @)
              (if currying?
                  abstraction
                  (when (//loop.optimization false 1 (list) abstraction)
                    {.#Some it}
                    [/.#environment environment
                     /.#arity (its /.#arity abstraction)
                     /.#body (/.tail_recursion @ it)]
                    
                    {.#None}
                    abstraction))))))
