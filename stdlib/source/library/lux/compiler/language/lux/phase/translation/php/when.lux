... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except when let if)
   [abstract
    ["[0]" monad]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" functor mix)]
     ["[0]" set]]]
   [math
    [number
     [/64
      ["i" integer]]]]
   [macro
    ["[0]" template]]
   [target
    ["_" php (.only Var)]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Phase! Expression Statement)]
  ["[1][0]" reference]
  ["[1][0]" primitive]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    ["[1][0]" synthesis
     ["[1]/[0]" when]]
    ["/[1]" //
     ["[1][0]" synthesis (.only Member Synthesis Path)]
     ["[1][0]" translation]
     ["//[1]" ///
      [reference
       ["[1][0]" variable (.only Register)]]
      ["[1][0]" phase (.use "[1]:[0]" monad)]
      [meta
       [archive (.only Archive)]]]]]]])

(the .public register
  (-> Register Var)
  (|>> (///reference.local //reference.system) as_expected))

(the .public capture
  (-> Register Var)
  (|>> (///reference.foreign //reference.system) as_expected))

(the .public (let expression archive [valueS register bodyS])
  (Expression [Synthesis Register Synthesis])
  (monad.let ///////phase.monad
    [valueG (expression archive valueS)
     bodyG (expression archive bodyS)]
    (pure (|> bodyG
              (list (_.set (..register register) valueG))
              _.array/*
              (_.item (_.int +1))))))

(the .public (let! statement expression archive [valueS register bodyS])
  (Statement [Synthesis Register Synthesis])
  (monad.let ///////phase.monad
    [valueO (expression archive valueS)
     body! (statement expression archive bodyS)]
    (pure (all _.then
               (_.set! (..register register) valueO)
               body!))))

(the .public (if expression archive [testS thenS elseS])
  (Expression [Synthesis Synthesis Synthesis])
  (monad.let ///////phase.monad
    [testG (expression archive testS)
     thenG (expression archive thenS)
     elseG (expression archive elseS)]
    (pure (_.? testG thenG elseG))))

(the .public (if! statement expression archive [testS thenS elseS])
  (Statement [Synthesis Synthesis Synthesis])
  (monad.let ///////phase.monad
    [test! (expression archive testS)
     then! (statement expression archive thenS)
     else! (statement expression archive elseS)]
    (pure (_.if test!
                then!
                else!))))

(the .public (get expression archive [pathP valueS])
  (Expression [(List Member) Synthesis])
  (monad.let ///////phase.monad
    [valueG (expression archive valueS)]
    (pure (list:mix (function (_ side source)
                      (.let [method (`` (.when side
                                          (,, (template.with [<side> <accessor>]
                                                [(<side> lefts)
                                                 (<accessor> (_.int (.integer lefts)))]

                                                [[.:Left //runtime.tuple//left]
                                                 [.:Right //runtime.tuple//right]]
                                                ))))]
                        (method source)))
                    valueG
                    pathP))))

(the @savepoint (_.var "lux_pm_savepoint"))
(the @cursor (_.var "lux_pm_cursor"))
(the @temp (_.var "lux_pm_temp"))

(the (push! value)
  (-> _.Expression _.Statement)
  (_.; (_.array_push/2 [@cursor value])))

(the peek_and_pop
  _.Expression
  (_.array_pop/1 @cursor))

(the pop!
  _.Statement
  (_.; ..peek_and_pop))

(the peek
  _.Expression
  (_.item (|> @cursor _.count/1 (_.- (_.int +1)))
          @cursor))

(the save!
  _.Statement
  (.let [cursor (_.array_slice/2 [@cursor (_.int +0)])]
    (_.; (_.array_push/2 [@savepoint cursor]))))

(the restore!
  _.Statement
  (_.set! @cursor (_.array_pop/1 @savepoint)))

(the fail! _.break)

(the (multi_pop! pops)
  (-> Natural _.Statement)
  (_.; (_.array_splice/3 [@cursor
                          (_.int +0)
                          (_.int (i.x -1 (.integer pops)))])))

(template.with [<name> <flag> <prep>]
  [(the (<name> simple? idx)
     (-> Bit Natural _.Statement)
     (all _.then
          (_.set! @temp (|> idx <prep> .integer _.int (//runtime.sum//get ..peek <flag>)))
          (.if simple?
               (_.when (_.is_null/1 @temp)
                 fail!)
               (_.if (_.is_null/1 @temp)
                     fail!
                     (..push! @temp)))))]

  [[left_choice  _.null        (<|)]
   [right_choice (_.string "") ++]]
  )

(the (alternation pre! post!)
  (-> _.Statement _.Statement _.Statement)
  (all _.then
       (_.do_while (_.bool false)
                   (all _.then
                        ..save!
                        pre!))
       (all _.then
            ..restore!
            post!)))

(the (pattern_matching' statement expression archive)
  (Statement Path)
  (function (of pathP)
    (`` (.when pathP
          {/////synthesis.:Then bodyS}
          (statement expression archive bodyS)

          {/////synthesis.:Pop}
          (///////phase:pure ..pop!)

          {/////synthesis.:Bind register}
          (///////phase:pure (_.set! (..register register) ..peek))

          {/////synthesis.:Bit_Fork when thenP elseP}
          (monad.let [! ///////phase.monad]
            [then! (of thenP)
             else! (.when elseP
                     {.:Some elseP}
                     (of elseP)

                     {.:None}
                     (pure ..fail!))]
            (pure (.if when
                       (_.if ..peek
                             then!
                             else!)
                       (_.if ..peek
                             else!
                             then!))))

          (,, (template.with [<tag> <injection>]
                [{<tag> item}
                 (monad.let [! ///////phase.monad]
                   [clauses (list.each' ! (function (_ [match then])
                                            (monad.let !
                                              [then! (of then)]
                                              (pure [(_.=== (|> match <injection>)
                                                            ..peek)
                                                     then!])))
                                        {.:Top item})]
                   (pure (_.cond clauses ..fail!)))]

                [[/////synthesis.:I64_Fork //primitive.i64]
                 [/////synthesis.:F64_Fork //primitive.f64]
                 [/////synthesis.:Text_Fork //primitive.text]]
                ))

          (,, (template.with [<complex> <simple> <choice>]
                [(<complex> idx)
                 (///////phase:pure (<choice> false idx))

                 (<simple> idx nextP)
                 (|> nextP
                     of
                     (by ///////phase.monad each (_.then (<choice> true idx))))]

                [[/////synthesis.left_side  /////synthesis.simple_left_side  ..left_choice]
                 [/////synthesis.right_side /////synthesis.simple_right_side ..right_choice]]
                ))

          (/////synthesis.left_member 0)
          (///////phase:pure (|> ..peek (_.item (_.int +0)) ..push!))
          
          (,, (template.with [<pm> <getter>]
                [(<pm> lefts)
                 (///////phase:pure (|> ..peek (<getter> (_.int (.integer lefts))) ..push!))]

                [[/////synthesis.left_member  //runtime.tuple//left]
                 [/////synthesis.right_member //runtime.tuple//right]]
                ))

          (/////synthesis.!bind_top register thenP)
          (monad.let ///////phase.monad
            [then! (of thenP)]
            (///////phase:pure (all _.then
                                    (_.set! (..register register) ..peek_and_pop)
                                    then!)))

          ... (/////synthesis.!multi_pop nextP)
          ... (.let [[extra_pops nextP'] (////synthesis/when.count_pops nextP)]
          ...   (monad.let ///////phase.monad
          ...     [next! (of nextP')]
          ...     (///////phase:pure (all _.then
          ...                    (..multi_pop! (n.+ 2 extra_pops))
          ...                    next!))))

          (,, (template.with [<tag> <combinator>]
                [(<tag> preP postP)
                 (monad.let ///////phase.monad
                   [pre! (of preP)
                    post! (of postP)]
                   (pure (<combinator> pre! post!)))]

                [[/////synthesis.path/seq _.then]
                 [/////synthesis.path/alt ..alternation]]
                ))))))

(the (pattern_matching statement expression archive pathP)
  (Statement Path)
  (monad.let ///////phase.monad
    [iteration! (pattern_matching' statement expression archive pathP)]
    (pure (all _.then
               (_.do_while (_.bool false)
                           iteration!)
               (_.throw (_.new (_.constant "Exception") (list (_.string ////synthesis/when.pattern_matching_error))))))))

(the .public dependencies
  (-> Path
      (List Var))
  (|>> ////synthesis/when.storage
       (its ////synthesis/when.:dependencies)
       set.as_list
       (list:each (function (_ variable)
                    (.when variable
                      {///////variable.:Local register}
                      (..register register)
                      
                      {///////variable.:Foreign register}
                      (..capture register))))))

(the .public (when! statement expression archive [valueS pathP])
  (Statement [Synthesis Path])
  (monad.let ///////phase.monad
    [stack_init (expression archive valueS)
     pattern_matching! (pattern_matching statement expression archive pathP)]
    (pure (all _.then
               (_.set! @cursor (_.array/* (list stack_init)))
               (_.set! @savepoint (_.array/* (list)))
               pattern_matching!))))

(the .public (when statement expression archive [valueS pathP])
  (-> Phase! (Expression [Synthesis Path]))
  (monad.let [! ///////phase.monad]
    [[[when_module when_artifact] when!] (/////translation.with_new_context archive
                                           (when! statement expression archive [valueS pathP]))
     .let [@when (_.constant (///reference.artifact [when_module when_artifact]))
           @dependencies+ (..dependencies (/////synthesis.path/seq (/////synthesis.path/then valueS)
                                                                   pathP))
           declaration (_.define_function @when (list:each _.parameter @dependencies+) when!)]
     _ (/////translation.execute! declaration)
     _ (/////translation.save! when_artifact declaration)]
    (pure (_.of @dependencies+ @when))))
