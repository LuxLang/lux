... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    [collection
     ["[0]" stack (.use "[1]#[0]" functor mix)]]]
   [compiler
    [target
     ["_" c++ (.only)
      ["[0]" type]]]]]]
 ["[0]" //
  ["[0]" runtime]
  ["[0]" reference]
  ["[0]" statement]
  [////
   [analysis (.only Reification)]
   ["[0]" synthesis (.only Abstraction')]
   ["[0]" phase]
   [///
    [meta
     ["[0]" cache
      [dependency
       ["[1]" artifact]]]]]]])

(the .public (reification expression archive [abstraction arguments])
  (runtime.Expression Reification)
  (do [! phase.monad]
    [abstraction (expression archive abstraction)
     arguments (monad.each ! (expression archive) arguments)]
    (in (runtime.on arguments abstraction))))

(the .public (abstraction statement expression archive [environment arity body])
  (-> runtime.Phase'
      (runtime.Expression Abstraction'))
  (do [! phase.monad]
    [dependencies (cache.dependencies archive body)
     body (statement expression archive body)
     .let [$self (reference.local 0)
           $arguments (reference.local (-- 0))]]
    (in (<| (runtime.function (_.int (.integer arity)))
            (_.lambda (|> environment
                          stack.enumeration
                          (stack#each (function (_ [register variable])
                                        (when variable
                                          (synthesis.variable @ variable)
                                          (_.alias (reference.foreign register)
                                                   (reference.variable variable))

                                          _
                                          (undefined)))))
                      (stack [$self runtime.value_type]
                             [$arguments runtime.partials_type])
                      {.#Some runtime.value_type}
                      (stack#mix _.then
                                 body
                                 (stack#each (function (_ register')
                                               (_.variable (reference.local (++ register'))
                                                           runtime.value_type
                                                           (_.item (_.int (.integer register'))
                                                                   $arguments)))
                                             (stack.indices arity))))))))
