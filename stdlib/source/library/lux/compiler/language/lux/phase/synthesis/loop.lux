... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" monad)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monoid)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]]]
 [////
  ["/" synthesis (.only Path Abstraction)]
  ["[0]" analysis (.only Environment)
   ["[1]/[0]" complex]]
  [///
   [arity (.only Arity)]
   ["[0]" reference (.only)
    [register (.only Register)]
    ["[0]" variable (.only Variable)]]]])

(every .public (Transform it)
  (-> it
      (Maybe it)))

(the .public (register_optimization offset)
  (-> Register
      (-> Register
          Register))
  (|>> -- (n.+ offset)))

(the (path_optimization body_optimization offset)
  (-> (Transform /.Term) Register
      (Transform Path))
  (function (again path)
    (`` (when path
          {/.#Bind register}
          {.#Some {/.#Bind (register_optimization offset register)}}

          (,, (template.with [<tag>]
                [{<tag> left right}
                 (do maybe.monad
                   [left' (again left)
                    right' (again right)]
                   (pure {<tag> left' right'}))]

                [[/.#Alt]
                 [/.#Seq]]
                ))

          {/.#Bit_Fork test then else}
          (do [! maybe.monad]
            [then (again then)
             else (when else
                    {.#Some else}
                    (by ! each (|>> {.#Some}) (again else))

                    {.#None}
                    (pure {.#None}))]
            (pure {/.#Bit_Fork test then else}))
          
          (,, (template.with [<tag>]
                [{<tag> [[test then] elses]}
                 (do [! maybe.monad]
                   [then (again then)
                    elses (list.each' ! (function (_ [else_test else_then])
                                          (do !
                                            [else_then (again else_then)]
                                            (pure [else_test else_then])))
                                      elses)]
                   (pure {<tag> [[test then] elses]}))]

                [[/.#I64_Fork]
                 [/.#F64_Fork]
                 [/.#Text_Fork]]
                ))
          
          {/.#Then body}
          (|> body
              body_optimization
              (maybe#each (|>> {/.#Then})))

          _
          {.#Some path}))))

(the (body_optimization true_loop? offset tail_recursion_environment arity expr)
  (-> Bit Register (Environment /.Term) Arity
      (Transform /.Term))
  (loop (again [return? true
                expr expr])
    (when expr
      [@ {/.#Simple _}]
      {.#Some expr}

      [@ {/.#Structure structure}]
      (when structure
        {analysis/complex.#Variant variant}
        (do maybe.monad
          [value' (|> variant (its analysis/complex.#value) (again false))]
          (pure (|> variant
                    (has analysis/complex.#value value')
                    (/.variant @))))
        
        {analysis/complex.#Tuple tuple}
        (|> tuple
            (list.each' maybe.monad (again false))
            (maybe#each (|>> (/.tuple @)))))

      [@ {/.#Reference reference}]
      (when reference
        {reference.#Variable (variable.self)}
        (if true_loop?
            {.#None}
            {.#Some expr})
        
        (reference.constant constant)
        {.#Some expr}

        (reference.local register)
        {.#Some [@ {/.#Reference (reference.local (register_optimization offset register))}]}

        (reference.foreign register)
        (if true_loop?
            (list.item register tail_recursion_environment)
            {.#Some expr}))

      (/.when @ [input path])
      (do maybe.monad
        [input' (again false input)
         path' (path_optimization (again return?) offset path)]
        (pure (|> path' [input'] (/.when @))))

      (/.tail_recursion @ it)
      (do [! maybe.monad]
        [inits (|> it
                   (its /.#inits)
                   (list.each' ! (again false)))
         iteration (again return? (its /.#iteration it))]
        (pure (/.tail_recursion @ [/.#start (|> it (its /.#start) (register_optimization offset))
                                   /.#inits inits
                                   /.#iteration iteration])))

      (/.tail_iteration @ args)
      (|> args
          (list.each' maybe.monad (again false))
          (maybe#each (|>> (/.tail_iteration @))))

      (/.abstraction @ [environment arity body])
      (do [! maybe.monad]
        [environment (list.each' ! (again false) environment)]
        (pure (/.abstraction @ [environment arity body])))
      
      (/.reification @ [abstraction arguments])
      (do [! maybe.monad]
        [arguments (list.each' ! (again false) arguments)]
        (expansion.let [<application> (these (do !
                                               [abstraction (again false abstraction)]
                                               (pure (/.reification @ [abstraction arguments]))))]
          (when abstraction
            [@ {/.#Reference {reference.#Variable (variable.self)}}]
            (if (and return?
                     (n.= arity (list.size arguments)))
                (pure (/.tail_iteration @ arguments))
                (if true_loop?
                    {.#None}
                    <application>))
            
            _
            <application>)))

      ... TODO: Stop relying on this custom code.
      [@ {/.#Extension [[.prelude "when_char#|translation"] parameters]}]
      (if return?
          (do [! maybe.monad]
            [input (list.item 0 parameters)
             else (list.item 1 parameters)

             input (again false input)
             matches (list.each' !
                                 (is (-> /.Term
                                         (Maybe /.Term))
                                     (function (_ match)
                                       (when match
                                         [@ {/.#Structure {analysis/complex.#Tuple tuple}}]
                                         (do !
                                           [when (list.item 0 tuple)
                                            then (list.item 1 tuple)
                                            
                                            when (again false when)
                                            then (again return? then)]
                                           (pure [@ {/.#Structure {analysis/complex.#Tuple (list when then)}}]))

                                         _
                                         (again false match))))
                                 (list.after 2 parameters))
             else (again return? else)]
            (pure [@ {/.#Extension [[.prelude "when_char#|translation"] (list#composite (list input else) matches)]}]))
          {.#None})

      [@ {/.#Extension [name args]}]
      (|> args
          (list.each' maybe.monad (again false))
          (maybe#each (|>> [name] {/.#Extension} [@]))))))

(the .public (optimization true_loop? offset inits functionS)
  (-> Bit Register (List /.Term) Abstraction
      (Maybe [Register (List /.Term) /.Term]))
  (|> (its /.#body functionS)
      (body_optimization true_loop? offset (its /.#environment functionS) (its /.#arity functionS))
      (maybe#each (|>> [offset inits]))))
