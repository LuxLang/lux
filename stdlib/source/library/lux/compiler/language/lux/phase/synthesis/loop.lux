... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [data
    ["[0]" maybe (.use "[1]:[0]" monad)]
    [collection
     ["[0]" list (.use "[1]:[0]" monoid)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]]]
 [////
  ["/" synthesis (.only Abstraction)
   ["[0]" path (.only Path)]]
  [///
   [arity (.only Arity)]
   ["@[0]" type (.only Register Variable Environment)]
   ["[0]" reference (.only)
    ["[0]" variable]]]])

(every .public (Transform it)
  (-> it
      (Maybe it)))

(the .public (register_optimization offset)
  (-> Register
      (Change Register))
  (|>> -- (n.+ offset)))

(the (path_optimization body_optimization offset)
  (-> (Transform /.Term) Register
      (Transform (Path /.Term)))
  (function (of path)
    (`` (when path
          {path.:Bind register}
          {.:Some {path.:Bind (register_optimization offset register)}}

          (,, (template.with [<tag>]
                [{<tag> left right}
                 (monad.let maybe.monad
                   [left' (of left)
                    right' (of right)]
                   (pure {<tag> left' right'}))]

                [[path.:Or]
                 [path.:And]]))

          {path.:Bit_Fork test then else}
          (monad.let [! maybe.monad]
            [then (of then)
             else (when else
                    {.:Some else}
                    (by ! each (|>> {.:Some}) (of else))

                    {.:None}
                    (pure {.:None}))]
            (pure {path.:Bit_Fork test then else}))
          
          (,, (template.with [<tag>]
                [{<tag> [[test then] elses]}
                 (monad.let [! maybe.monad]
                   [then (of then)
                    elses (list.each' ! (function (_ [else_test else_then])
                                          (monad.let !
                                            [else_then (of else_then)]
                                            (pure [else_test else_then])))
                                      elses)]
                   (pure {<tag> [[test then] elses]}))]

                [[path.:I64_Fork]
                 [path.:F64_Fork]
                 [path.:Text_Fork]]))
          
          {path.:Then body}
          (|> body
              body_optimization
              (maybe:each (|>> {path.:Then})))

          _
          {.:Some path}))))

(the (body_optimization true_loop? offset tail_recursion_environment arity expr)
  (-> Bit Register (Environment /.Term) Arity
      (Transform /.Term))
  (loop (of [return? true
             expr expr])
    (when expr
      [@ {/.:Simple _}]
      {.:Some expr}

      [@ {/.:Structure structure}]
      (when structure
        {@type.:Complex_Variant variant}
        (monad.let maybe.monad
          [value' (|> variant (its @type.:choice) (of false))]
          (pure (|> variant
                    (has @type.:choice value')
                    (/.variant @))))
        
        {@type.:Complex_Tuple tuple}
        (|> tuple
            (list.each' maybe.monad (of false))
            (maybe:each (|>> (/.tuple @)))))

      [@ {/.:Reference reference}]
      (when reference
        {@type.:Variable_Reference (variable.self)}
        (if true_loop?
            {.:None}
            {.:Some expr})
        
        (reference.constant constant)
        {.:Some expr}

        (reference.local register)
        {.:Some [@ {/.:Reference (reference.local (register_optimization offset register))}]}

        (reference.foreign register)
        (if true_loop?
            (list.item register tail_recursion_environment)
            {.:Some expr}))

      (/.when @ [input path])
      (monad.let maybe.monad
        [input' (of false input)
         path' (path_optimization (of return?) offset path)]
        (pure (|> path' [input'] (/.when @))))

      (/.tail_recursion @ it)
      (monad.let [! maybe.monad]
        [inits (|> it
                   (its /.:inits)
                   (list.each' ! (of false)))
         iteration (of return? (its /.:iteration it))]
        (pure (/.tail_recursion @ [/.:start (|> it (its /.:start) (register_optimization offset))
                                   /.:inits inits
                                   /.:iteration iteration])))

      (/.tail_iteration @ args)
      (|> args
          (list.each' maybe.monad (of false))
          (maybe:each (|>> (/.tail_iteration @))))

      (/.abstraction @ [environment arity body])
      (monad.let [! maybe.monad]
        [environment (list.each' ! (of false) environment)]
        (pure (/.abstraction @ [environment arity body])))
      
      (/.reification @ [abstraction arguments])
      (monad.let [! maybe.monad]
        [arguments (list.each' ! (of false) arguments)]
        (expansion.let [<application> (these (monad.let !
                                               [abstraction (of false abstraction)]
                                               (pure (/.reification @ [abstraction arguments]))))]
          (when abstraction
            [@ {/.:Reference {@type.:Variable_Reference (variable.self)}}]
            (if (and return?
                     (n.= arity (list.size arguments)))
                (pure (/.tail_iteration @ arguments))
                (if true_loop?
                    {.:None}
                    <application>))
            
            _
            <application>)))

      ... TODO: Stop relying on this custom code.
      [@ {/.:Extension [[.prelude "when_char#|translation"] parameters]}]
      (if return?
          (monad.let [! maybe.monad]
            [input (list.item 0 parameters)
             else (list.item 1 parameters)

             input (of false input)
             matches (list.each' !
                                 (is (-> /.Term
                                         (Maybe /.Term))
                                     (function (_ match)
                                       (when match
                                         [@ {/.:Structure {@type.:Complex_Tuple tuple}}]
                                         (monad.let !
                                           [when (list.item 0 tuple)
                                            then (list.item 1 tuple)
                                            
                                            when (of false when)
                                            then (of return? then)]
                                           (pure [@ {/.:Structure {@type.:Complex_Tuple (list when then)}}]))

                                         _
                                         (of false match))))
                                 (list.after 2 parameters))
             else (of return? else)]
            (pure [@ {/.:Extension [[.prelude "when_char#|translation"] (list:composite (list input else) matches)]}]))
          {.:None})

      [@ {/.:Extension [name args]}]
      (|> args
          (list.each' maybe.monad (of false))
          (maybe:each (|>> [name] {/.:Extension} [@]))))))

(the .public (optimization true_loop? offset inits functionS)
  (-> Bit Register (List /.Term) Abstraction
      (Maybe [Register (List /.Term) /.Term]))
  (|> (its /.:body functionS)
      (body_optimization true_loop? offset (its /.:environment functionS) (its /.:arity functionS))
      (maybe:each (|>> [offset inits]))))
