... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Label)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" product]
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" set]]]
   [math
    [number
     ["n" natural]]]
   [target
    ["_" lua (.only Var Label)]]]]
 ["[0]" //
  [runtime (.only Operation Phase Phase! Expression Statement)]
  ["[1][0]" when]
  ["/[1]" //
   ["[1][0]" reference]
   ["//[1]" ///
    ["[0]" phase]
    ["[0]" synthesis]
    ["[1][0]" translation]
    ["//[1]" ///
     [meta
      [archive (.only Archive)]
      ["[0]" cache
       [dependency
        ["[1]" artifact]]]]
     [reference
      [register (.only Register)]]]]]])

(the @tail_recursion
  (-> Natural
      Label)
  (|>> %.natural
       (text "tail_recursion")
       _.label))

(the (setup initial? offset bindings as_expression? body)
  (-> Bit Register (List _.Expression) Bit _.Statement
      _.Statement)
  (let [variables (|> bindings
                      list.enumeration
                      (list#each (|>> product.left (n.+ offset) //when.register)))]
    (if as_expression?
        body
        (all _.then
             (if initial?
                 (_.let variables (_.multi bindings))
                 (_.set variables (_.multi bindings)))
             body))))

(the .public (tail_recursion! statement expression archive as_expression? [start initsS+ bodyS])
  ... (Statement (synthesis.Tail_Recursion synthesis.Term))
  (-> Phase! Phase Archive Bit (synthesis.Tail_Recursion synthesis.Term)
      (Operation [(List _.Expression) _.Statement]))
  (when initsS+
    ... function/false/non-independent loop
    (list)
    (|> bodyS
        (statement expression archive)
        (by phase.monad each (|>> [(list)])))

    ... true loop
    non_empty
    (do [! phase.monad]
      [@tail_recursion (by ! each ..@tail_recursion /////translation.next)
       initsO+ (list.each' ! (expression archive) initsS+)
       body! (/////translation.with_anchor [start @tail_recursion]
               (statement expression archive bodyS))]
      (pure [initsO+
             (..setup true start initsO+ as_expression?
                      (all _.then
                           (_.set_label @tail_recursion)
                           body!))]))))

(the .public (tail_recursion statement expression archive [start initsS+ bodyS])
  (-> Phase!
      (Expression (synthesis.Tail_Recursion synthesis.Term)))
  (when initsS+
    ... function/false/non-independent loop
    (list)
    (expression archive bodyS)

    ... true loop
    non_empty
    (do [! phase.monad]
      [dependencies (cache.dependencies archive bodyS)
       [[artifact_module artifact_id] [initsO+ tail_recursion!]] (/////translation.with_new_context archive dependencies
                                                                   (tail_recursion! statement expression archive true [start initsS+ bodyS]))
       .let [@loop (_.var (///reference.artifact [artifact_module artifact_id]))
             locals (|> initsO+
                        list.enumeration
                        (list#each (|>> product.left (n.+ start) //when.register)))
             [declaration instantiation] (is [_.Statement _.Expression]
                                             (when (|> (synthesis.path/then bodyS)
                                                       //when.dependencies
                                                       (set.of_list _.hash)
                                                       (set.difference (set.of_list _.hash locals))
                                                       set.as_list)
                                               (list)
                                               [(_.function @loop locals
                                                  tail_recursion!)
                                                @loop]

                                               foreigns
                                               (let [@context (_.var (text (_.code @loop) "_context"))]
                                                 [(_.function @context foreigns
                                                    (all _.then
                                                         (<| (_.local_function @loop locals)
                                                             tail_recursion!)
                                                         (_.return @loop)
                                                         ))
                                                  (_.of foreigns @context)])))]
       _ (/////translation.execute! declaration)
       _ (/////translation.save! artifact_id {.#None} declaration)]
      (pure (_.of initsO+ instantiation)))))

(the .public (tail_iteration! statement expression archive it)
  (Statement (List synthesis.Term))
  (do [! phase.monad]
    [[offset @tail_recursion] /////translation.anchor
     it (list.each' ! (expression archive) it)]
    (pure (..setup false offset it false (_.go_to @tail_recursion)))))
