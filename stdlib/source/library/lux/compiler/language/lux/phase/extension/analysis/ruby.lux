... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [data
    [collection
     ["[0]" dictionary]
     ["[0]" list (.use "[1]:[0]" monoid)
      ["?[1]" \\projection]]]]
   ["[0]" type (.only)
    ["[0]" check]]
   ["[0]" meta (.only)
    ["[0]" code
     ["<[1]>" \\projection]]]
   ["[0]" target (.only)
    ["_" ruby]]
   [compiler
    ["@[0]" type]]]]
 ["[0]" //
  ["/" lux (.only custom)]
  ["/[1]" // (.only)
   [///
    ["[0]" phase]
    ["[0]" analysis (.only Operation Phase Handler Bundle)
     ["[1]/[0]" type]]
    [///
     ["[0]" extension (.only)
      ["[1]/[0]" ruby]]]]]])

(the Nil
  (target.if target.ruby
             ffi.Nil

             ... else
             Any))

(the Object
  (target.if target.ruby
             (type (ffi.Object Any))

             ... else
             Any))

(the Function
  (target.if target.ruby
             ffi.Function

             ... else
             Any))

(the object:get
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text ?list.any)
    (function (_ extension phase archive [fieldC objectC])
      (monad.let phase.monad
        [objectA (<| (analysis/type.with ..Object)
                     (phase archive objectC))
         _ (analysis/type.inference .Any)
         @ analysis.provenance]
        (pure {@type.:Extension @ [.prelude (extension.synthesis extension)]
                                (list (analysis.text @ fieldC)
                                      objectA)})))]))

(the object:do
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text ?list.any (<code>.tuple (<>.some ?list.any)))
    (function (_ extension phase archive [methodC objectC inputsC])
      (monad.let [! phase.monad]
        [objectA (<| (analysis/type.with ..Object)
                     (phase archive objectC))
         inputsA (list.each' ! (|>> (phase archive) (analysis/type.with Any))
                             inputsC)
         _ (analysis/type.inference .Any)
         @ analysis.provenance]
        (pure {@type.:Extension @ [.prelude (extension.synthesis extension)]
                                (list:composite (list (analysis.text @ methodC)
                                                      objectA)
                                                inputsA)})))]))

(the with_object_extensions
  (Change Bundle)
  (|>> (/.with extension/ruby.object_get object:get)
       (/.with extension/ruby.object_do object:do)
       (/.with extension/ruby.object_nil (/.nullary ..Nil))
       (/.with extension/ruby.object_nil? (/.unary Any Bit))
       ))

(the ruby:constant
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (monad.let phase.monad
        [_ (analysis/type.inference Any)
         @ analysis.provenance]
        (pure {@type.:Extension @ [.prelude (extension.synthesis extension)]
                                (list (analysis.text @ name))})))]))

(the ruby:of
  (-> Text Handler)
  (custom
   [(all <>.and ?list.any (<code>.tuple (<>.some ?list.any)))
    (function (_ extension phase archive [abstractionC inputsC])
      (monad.let [! phase.monad]
        [abstractionA (<| (analysis/type.with ..Function)
                          (phase archive abstractionC))
         inputsA (list.each' ! (|>> (phase archive) (analysis/type.with Any))
                             inputsC)
         _ (analysis/type.inference Any)
         @ analysis.provenance]
        (pure {@type.:Extension @ [.prelude (extension.synthesis extension)]
                                (list:composite (list abstractionA) inputsA)})))]))

(the ruby:import
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (monad.let phase.monad
        [_ (analysis/type.inference Bit)
         @ analysis.provenance]
        (pure {@type.:Extension @ [.prelude (extension.synthesis extension)]
                                (list (analysis.text @ name))})))]))

(the .public bundle
  Bundle
  (|> ///.empty
      with_object_extensions

      (/.with extension/ruby.constant ruby:constant)
      (/.with extension/ruby.of ruby:of)
      (/.with extension/ruby.import ruby:import)
      ))
