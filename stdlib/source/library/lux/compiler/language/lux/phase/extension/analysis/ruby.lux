... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [data
    [collection
     ["[0]" dictionary]
     ["[0]" list (.use "[1]#[0]" monoid)
      ["?[1]" \\projection]]]]
   ["[0]" type (.only)
    ["[0]" check]]
   ["[0]" meta (.only)
    ["[0]" code
     ["<[1]>" \\projection]]]
   [target
    ["_" ruby]]]]
 [//
  ["/" lux (.only custom)]
  [///
   ["[0]" extension]
   [//
    ["[0]" phase]
    ["[0]" analysis (.only Operation Phase Handler Bundle)
     ["[1]/[0]" type]]]]])

(the Nil
  (for .ruby ffi.Nil
       Any))

(the Object
  (for .ruby (type (ffi.Object Any))
       Any))

(the Function
  (for .ruby ffi.Function
       Any))

(the object::get
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text ?list.any)
    (function (_ extension phase archive [fieldC objectC])
      (monad.let phase.monad
        [objectA (<| (analysis/type.expecting ..Object)
                     (phase archive objectC))
         _ (analysis/type.inference .Any)
         @ meta.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list (analysis.text @ fieldC)
                                            objectA)}])))]))

(the object::do
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text ?list.any (<code>.tuple (<>.some ?list.any)))
    (function (_ extension phase archive [methodC objectC inputsC])
      (monad.let [! phase.monad]
        [objectA (<| (analysis/type.expecting ..Object)
                     (phase archive objectC))
         inputsA (list.each' ! (|>> (phase archive) (analysis/type.expecting Any))
                             inputsC)
         _ (analysis/type.inference .Any)
         @ meta.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list#composite (list (analysis.text @ methodC)
                                                            objectA)
                                                      inputsA)}])))]))

(the with_object_extensions
  (-> Bundle Bundle)
  (|>> (/.with "ruby_object_get#" object::get)
       (/.with "ruby_object_do#" object::do)
       (/.with "ruby_object_nil#" (/.nullary ..Nil))
       (/.with "ruby_object_nil?#" (/.unary Any Bit))
       ))

(the ruby::constant
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (monad.let phase.monad
        [_ (analysis/type.inference Any)
         @ meta.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list (analysis.text @ name))}])))]))

(the ruby::of
  (-> Text Handler)
  (custom
   [(all <>.and ?list.any (<code>.tuple (<>.some ?list.any)))
    (function (_ extension phase archive [abstractionC inputsC])
      (monad.let [! phase.monad]
        [abstractionA (<| (analysis/type.expecting ..Function)
                          (phase archive abstractionC))
         inputsA (list.each' ! (|>> (phase archive) (analysis/type.expecting Any))
                             inputsC)
         _ (analysis/type.inference Any)
         @ meta.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list#composite (list abstractionA) inputsA)}])))]))

(the ruby::import
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (monad.let phase.monad
        [_ (analysis/type.inference Bit)
         @ meta.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list (analysis.text @ name))}])))]))

(the .public bundle
  Bundle
  (|> extension.empty
      with_object_extensions

      (/.with "ruby_constant#" ruby::constant)
      (/.with "ruby_of#" ruby::of)
      (/.with "ruby_import#" ruby::import)
      (/.with "ruby_script_universe#" (/.nullary .Bit))
      ))
