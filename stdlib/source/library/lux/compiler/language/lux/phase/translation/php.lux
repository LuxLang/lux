... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [control
    ["[0]" exception]]
   [macro
    ["[0]" template]]
   [target
    ["_" php]]]]
 ["[0]" /
  [runtime (.only Phase Phase!)]
  ["[1][0]" primitive]
  ["[1][0]" structure]
  ["[1][0]" reference]
  ["[1][0]" when]
  ["[1][0]" loop]
  ["[1][0]" function]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    ["[1][0]" extension]
    ["/[1]" //
     [analysis (.only)]
     ["[1][0]" synthesis]
     ["//[1]" ///
      ["[1][0]" phase (.use "[1]:[0]" monad)]
      [reference (.only)
       [variable (.only)]]]]]]])

(the (statement expression archive synthesis)
  Phase!
  (`` (when synthesis
        (,, (template.with [<tag>]
              [(<tag> value)
               (//////phase:each _.return (expression archive synthesis))]

              [[////synthesis.bit]
               [////synthesis.i64]
               [////synthesis.f64]
               [////synthesis.text]
               [////synthesis.variant]
               [////synthesis.tuple]
               [////synthesis.get]
               [////synthesis.reification]]
              ))

        (,, (template.with [<tag>]
              [{<tag> value}
               (//////phase:each _.return (expression archive synthesis))]

              [[////synthesis.:Reference]
               [////synthesis.:Extension]]
              ))

        (////synthesis.when when)
        (/when.when! statement expression archive when)

        (,, (template.with [<tag> <translator>]
              [(<tag> value)
               (<translator> statement expression archive value)]

              [[////synthesis.let /when.let!]
               [////synthesis.if /when.if!]
               [////synthesis.scope /loop.scope!]
               [////synthesis.again /loop.again!]]
              ))

        (////synthesis.abstraction abstraction)
        (//////phase:each _.return (/function.function statement expression archive abstraction))
        )))

(exception.the .public cannot_recur_as_an_expression)

(the .public (expression archive synthesis)
  Phase
  (`` (when synthesis
        (,, (template.with [<tag> <translator>]
              [(<tag> value)
               (//////phase:in (<translator> value))]

              [[////synthesis.bit  /primitive.bit]
               [////synthesis.i64  /primitive.i64]
               [////synthesis.f64  /primitive.f64]
               [////synthesis.text /primitive.text]]
              ))

        {////synthesis.:Reference value}
        (//reference.reference /reference.system archive value)

        (,, (template.with [<tag> <translator>]
              [(<tag> value)
               (<translator> expression archive value)]

              [[////synthesis.variant /structure.variant]
               [////synthesis.tuple /structure.tuple]
               [////synthesis.let /when.let]
               [////synthesis.if /when.if]
               [////synthesis.get /when.get]
               [////synthesis.reification /function.reification]]
              ))

        (,, (template.with [<tag> <translator>]
              [(<tag> value)
               (<translator> statement expression archive value)]

              [[////synthesis.when /when.when]
               [////synthesis.scope /loop.scope]
               [////synthesis.abstraction /function.function]]
              ))

        (////synthesis.again _)
        (//////phase.except ..cannot_recur_as_an_expression [])

        {////synthesis.:Extension extension}
        (///extension.reification archive expression extension))))

(the .public translate
  Phase
  ..expression)
