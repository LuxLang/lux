... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    [text
     ["%" \\injection]]]
   [macro
    ["[0]" template]]
   [target
    [jvm
     ["_" bytecode (.only Bytecode)]
     ["[0]" type]]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation)]
  ["[1][0]" value]
  ["[1][0]" type]
  [////
   ["[0]" phase (.use "[1]#[0]" monad)]
   ["[0]" translation]
   [///
    [reference
     [register (.only Register)]
     ["[0]" variable (.only Variable)]]
    [meta
     [archive (.only Archive)]]]]])

(the .public this
  (Bytecode Any)
  _.aload_0)

(template.with [<prefix> <name>]
  [(the .public <name>
     (-> Register
         Text)
     (|>> %.natural (text <prefix>)))]

  ["f" foreign_name]
  ["p" partial_name]
  )

(the (foreign archive it)
  (-> Archive Register
      (Operation (Bytecode Any)))
  (do [! phase.monad]
    [bytecode_name (by ! each //runtime.class_name
                       (translation.context archive))]
    (pure (all _.composite
               ..this
               (_.getfield (type.class (list) bytecode_name)
                           (..foreign_name it)
                           //type.value)))))

(the .public (variable archive it)
  (-> Archive Variable
      (Operation (Bytecode Any)))
  (when it
    {variable.#Local it}
    (phase#pure (_.aload it))
    
    {variable.#Foreign it}
    (..foreign archive it)))

(the .public (constant archive name)
  (-> Archive Name
      (Operation (Bytecode Any)))
  (do phase.monad
    [[@definition |abstraction|] (translation.definition archive name)
     .let [:definition: (type.class (list) (//runtime.class_name @definition))]]
    (pure (when |abstraction|
            {.#Some [_ {.#Some [expected_arity @abstraction]}]}
            (let [:abstraction: (type.class (list) (//runtime.class_name @abstraction))]
              (_.getstatic :definition: //value.field :abstraction:))
            
            _
            (_.getstatic :definition: //value.field //type.value)))))
