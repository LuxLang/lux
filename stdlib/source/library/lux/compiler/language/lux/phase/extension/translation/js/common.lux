... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" monad (.only do)]]
   [control
    ["|" pipe]]
   [error
    ["[0]" try]]
   [data
    ["[0]" product]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor mix)]
     ["[0]" dictionary]]]
   [macro
    ["[0]" template]]
   [target
    ["_" js (.only Literal)]]
   [compiler
    [meta
     [archive (.only Archive)]]]]]
 [/////
  ["[0]" extension]
  [translation
   [extension (.only Nullary Unary Binary Trinary Variadic
                     nullary unary binary trinary variadic)]
   ["//" js
    ["[1][0]" runtime (.only Operation Phase Phase! Handler Bundle)]
    ["[1][0]" primitive]
    ["[1][0]" structure]
    ["[1][0]" reference]
    ["[1][0]" when]
    ["[1][0]" loop]
    ["[1][0]" function]]]
  [//
   ["[0]" phase (.use "[1]#[0]" monad)]
   ["[0]" synthesis (.only)
    ["?[1]" \\projection (.only Projection)]]]])

(the .public (custom [projection handler])
  (for_any (_ s)
    (-> [(Projection s)
         (-> Phase Archive s (Operation _.Expression))]
        Handler))
  (function (_ phase archive input)
    (when (?synthesis.value projection input)
      {try.#Success input'}
      (handler phase archive input')

      {try.#Failure error}
      (phase.failure error))))

... [Procedures]
... [[Bits]]
(template.with [<name> <op>]
  [(the (<name> [paramG subjectG])
     (Binary _.Expression)
     (<op> subjectG (//runtime.i64::number paramG)))]

  [i64::left_shifted  //runtime.i64::left_shifted]
  [i64::right_shifted //runtime.i64::right_shifted]
  )

... [[Numbers]]
(the i64::char
  (Unary _.Expression)
  (|>> //runtime.i64::number
       (stack)
       (_.apply (_.var "String.fromCharCode"))))

... [[Text]]
(the text//composite
  (Variadic _.Expression)
  (|>> (|.when
         (stack)
         (_.string "")

         (stack single)
         single

         (stack.partial left rights)
         ... (|> left (_.do "concat" rights))
         (stack#mix (function (_ right left)
                      (|> left (_.do "concat" (stack right))))
                    left
                    rights))))

(the (text//clip [startG endG subjectG])
  (Trinary _.Expression)
  (//runtime.text//clip startG endG subjectG))

(the (text//index [startG partG subjectG])
  (Trinary _.Expression)
  (//runtime.text//index startG partG subjectG))

... [[IO]]
(the (io//log messageG)
  (Unary _.Expression)
  (all _.,
       (//runtime.io//log messageG)
       //runtime.unit))

(the .public (statement expression archive synthesis)
  Phase!
  (`` (when synthesis
        ... TODO: Get rid of this ASAP
        [@ {synthesis.#Extension [.prelude "when_char#|translation"] parameters}]
        (do phase.monad
          [body (expression archive synthesis)]
          (in (as _.Statement body)))

        (,, (template.with [<tag>]
              [(<tag> @ value)
               (phase#each _.return
                           (expression archive synthesis))]

              [synthesis.bit]
              [synthesis.i64]
              [synthesis.f64]
              [synthesis.text]
              [synthesis.variant]
              [synthesis.tuple]
              [synthesis.reification]))

        (,, (template.with [<tag>]
              [[@ {<tag> value}]
               (phase#each _.return
                           (expression archive synthesis))]

              [synthesis.#Reference]
              [synthesis.#Extension]))

        (synthesis.let @ register input body)
        (//when.let! statement expression archive [register input body])

        (synthesis.exec @ before after)
        (//when.exec! statement expression archive [before after])

        (synthesis.when @ it)
        (<| (,, (template.with [,synthesis]
                  [(when (,synthesis it)
                     {.#Some it}
                     (phase#each _.return
                                 (expression archive synthesis))

                     else)]

                  [synthesis.its]
                  ))
            (,, (template.with [,synthesis ,translation]
                  [(when (,synthesis it)
                     {.#Some it}
                     (,translation statement expression archive it)

                     else)]

                  [synthesis.if //when.if!]
                  [synthesis.when_i64 //when.when_i64!]
                  [synthesis.when_f64 //when.when_f64!]
                  [synthesis.when_text //when.when_text!]
                  [synthesis.multi_let //when.multi_let!]
                  ))
            (//when.when! statement expression archive it))

        (synthesis.tail_recursion @ tail_recursion)
        (//loop.tail_recursion! statement expression archive tail_recursion)

        (synthesis.tail_iteration @ updates)
        (//loop.tail_iteration! statement expression archive updates)

        (synthesis.abstraction @ abstraction)
        (phase#each _.return (//function.function statement expression archive abstraction))
        )))

... TODO: Get rid of this ASAP
(the lux::syntax_char_case!
  (..custom [(all <>.and
                  ?synthesis.any
                  ?synthesis.any
                  (<>.some (?synthesis.tuple (all <>.and
                                                  (?synthesis.tuple (<>.many ?synthesis.i64))
                                                  ?synthesis.any))))
             (function (_ phase archive [input else conditionals])
               (do [! phase.monad]
                 [inputG (phase archive input)
                  else! (..statement phase archive else)
                  conditionals! (is (Operation (Stack [(Stack Literal)
                                                       _.Statement]))
                                    (monad.each ! (function (_ [chars branch])
                                                    (do !
                                                      [branch! (..statement phase archive branch)]
                                                      (in [(stack#each (|>> .integer _.int) chars)
                                                           branch!])))
                                                conditionals))]
                 ... (in (_.apply (_.closure (stack)
                 ...                           (_.switch (_.its //runtime.i64_low_field inputG)
                 ...                                     conditionals!
                 ...                                     {.#Some (_.return else!)}))
                 ...                (stack)))
                 (in (<| (as _.Expression)
                         (is _.Statement)
                         (_.switch (_.its //runtime.i64_low_field inputG)
                                   conditionals!
                                   {.#Some else!})))))]))

... [Bundles]
(the with_basic_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "when_char#|translation" lux::syntax_char_case!)
       (dictionary.has "is?#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "try#|translation" (unary //runtime.lux//try))))

(the with_i64_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "i64_and#|translation" (binary (product.uncurried //runtime.i64::and)))
       (dictionary.has "i64_or#|translation" (binary (product.uncurried //runtime.i64::or)))
       (dictionary.has "i64_xor#|translation" (binary (product.uncurried //runtime.i64::xor)))
       (dictionary.has "i64_left#|translation" (binary i64::left_shifted))
       (dictionary.has "i64_right#|translation" (binary i64::right_shifted))
       (dictionary.has "i64_=#|translation" (binary (product.uncurried //runtime.i64::=)))
       (dictionary.has "i64_+#|translation" (binary (product.uncurried //runtime.i64::+)))
       (dictionary.has "i64_-#|translation" (binary (product.uncurried //runtime.i64::-)))
       ))

(the with_integer_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "int_<#|translation" (binary (product.uncurried //runtime.i64::<)))
       
       (dictionary.has "int_*#|translation" (binary (product.uncurried //runtime.i64::*)))
       (dictionary.has "int_/#|translation" (binary (product.uncurried //runtime.i64::/)))
       (dictionary.has "int_%#|translation" (binary (product.uncurried //runtime.i64::%)))
       
       (dictionary.has "int_f64#|translation" (unary //runtime.i64::number))
       (dictionary.has "int_char#|translation" (unary i64::char))
       ))

(the with_f64_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "f64_+#|translation" (binary (product.uncurried _.+)))
       (dictionary.has "f64_-#|translation" (binary (product.uncurried _.-)))
       (dictionary.has "f64_*#|translation" (binary (product.uncurried _.*)))
       (dictionary.has "f64_/#|translation" (binary (product.uncurried _./)))
       (dictionary.has "f64_%#|translation" (binary (product.uncurried _.%)))

       (dictionary.has "f64_=#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "f64_<#|translation" (binary (product.uncurried _.<)))
       
       (dictionary.has "f64_int#|translation" (unary //runtime.i64::of_number))
       ))

(the with_text_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "text_=#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "text_<#|translation" (binary (product.uncurried _.<)))
       
       (dictionary.has "text_composite#|translation" (variadic text//composite))
       (dictionary.has "text_index#|translation" (trinary text//index))
       (dictionary.has "text_size#|translation" (unary (|>> (_.its "length") //runtime.i64::of_number)))
       (dictionary.has "text_char#|translation" (binary (product.uncurried //runtime.text//char)))
       (dictionary.has "text_clip#|translation" (trinary text//clip))
       ))

(the with_io_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "log!#|translation" (unary io//log))
       (dictionary.has "error#|translation" (unary //runtime.io//error))))

(the .public bundle
  Bundle
  (|> extension.empty
      with_basic_extensions
      with_i64_extensions
      with_integer_extensions
      with_f64_extensions
      with_text_extensions
      with_io_extensions
      ))
