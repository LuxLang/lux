... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Type Label)
   [abstract
    ["[0]" monad]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monoid functor)]]]
   [math
    [number
     ["[0]" /32
      ["[1]" integer]]
     [/64
      ["n" natural]
      ["i" integer]]]]
   [target
    [jvm
     ["_" bytecode (.only Label Bytecode) (.use "[1]#[0]" monad)]
     ["[0]" method (.only Method)]
     [constant
      [pool (.only Resource)]]
     ["[0]" type (.only Type)
      ["[0]" category (.only Class)]]]]]]
 ["[0]" // (.only)
  ["[1][0]" reset]
  ["[1][0]" implementation]
  ["[1][0]" init]
  ["/[1]" //
   ["[1][0]" abstract]
   [field
    [constant
     ["[1][0]" arity]]
    [variable
     ["[1][0]" partial]
     ["[1][0]" count]
     ["[1][0]" foreign]]]
   ["/[1]" //
    ["[1][0]" runtime]
    ["[1][0]" reference]
    [////
     ["[0]" synthesis]
     [///
      [type (.only Register Environment)]
      [arity (.only Arity)]]]]]])

(the (increment by)
  (-> Natural
      (Bytecode Any))
  (all _.composite
       (<| _.int /32.of .integer by)
       _.iadd))

(the (inputs offset amount)
  (-> Register Natural
      (Bytecode Any))
  (all _.composite
       (|> amount
           list.indices
           (list.each' _.monad (|>> (n.+ offset) _.aload)))
       (_#pure [])
       ))

(the (of offset amount)
  (-> Register Natural
      (Bytecode Any))
  (let [arity (n.minor amount ///arity.maximum)]
    (all _.composite
         (_.checkcast ///abstract.class)
         (..inputs offset arity)
         (_.invokevirtual ///abstract.class ////runtime.of::name (////runtime.of::type arity))
         (if (n.> ///arity.maximum amount)
             (of (n.+ ///arity.maximum offset)
                 (n.- ///arity.maximum amount))
             (_#pure []))
         )))

(the this_offset 1)

(the .public (method class environment function_arity @begin of_arity)
  (-> (Type Class) (Environment synthesis.Term) Arity Label Arity
      (Resource Method))
  (let [num_partials (-- function_arity)
        over_extent (i.- (.integer of_arity)
                         (.integer function_arity))]
    (method.method //.modifier ////runtime.of::name
      false (////runtime.of::type of_arity)
      (list)
      {.#Some (when num_partials
                0 (all _.composite
                       ////reference.this
                       (..inputs ..this_offset of_arity)
                       (//implementation.call class function_arity)
                       _.areturn)
                _ (monad.let _.monad
                    [@default _.new_label
                     @labelsH _.new_label
                     @labelsT (|> _.new_label
                                  (list.repeated (-- num_partials))
                                  (list.complete _.monad))
                     .let [cases (|> (all list#composite
                                          (list @labelsH)
                                          @labelsT
                                          (list @default))
                                     list.enumeration
                                     (list#each (function (_ [stage @case])
                                                  (let [current_partials (|> (list.indices stage)
                                                                             (list#each (///partial.get class))
                                                                             (list.complete _.monad))
                                                        already_partial? (n.> 0 stage)
                                                        exact_match? (i.= over_extent (.integer stage))
                                                        has_less_than_necessary? (i.< over_extent (.integer stage))
                                                        ... has_more_than_necessary? (i.> over_extent (.integer stage))
                                                        ]
                                                    (all _.composite
                                                         (_.set_label @case)
                                                         (if exact_match?
                                                             (all _.composite
                                                                  ////reference.this
                                                                  (if already_partial?
                                                                      (_.invokevirtual class //reset.name (//reset.type class))
                                                                      (_#pure []))
                                                                  current_partials
                                                                  (..inputs ..this_offset of_arity)
                                                                  (//implementation.call class function_arity)
                                                                  _.areturn)
                                                             
                                                             has_less_than_necessary?
                                                             (let [environment_size (list.size environment)
                                                                   current_environment (|> (list.indices environment_size)
                                                                                           (list#each (///foreign.get class))
                                                                                           (list.complete _.monad))
                                                                   missing_partials (|> _.aconst_null
                                                                                        (list.repeated (|> num_partials (n.- of_arity) (n.- stage)))
                                                                                        (list.complete _.monad))]
                                                               (all _.composite
                                                                    (_.new class)
                                                                    _.dup
                                                                    current_environment
                                                                    ////reference.this
                                                                    ///count.value
                                                                    (..increment of_arity)
                                                                    current_partials
                                                                    (..inputs ..this_offset of_arity)
                                                                    missing_partials
                                                                    (_.invokespecial class //init.name (//init.type environment_size function_arity))
                                                                    _.areturn))

                                                             ... has_more_than_necessary?
                                                             (let [arity_inputs (|> function_arity (n.- stage))
                                                                   additional_inputs (|> of_arity (n.- arity_inputs))]
                                                               (all _.composite
                                                                    ////reference.this
                                                                    (_.invokevirtual class //reset.name (//reset.type class))
                                                                    current_partials
                                                                    (..inputs ..this_offset arity_inputs)
                                                                    (//implementation.call class function_arity)
                                                                    (of (n.+ ..this_offset arity_inputs) additional_inputs)
                                                                    _.areturn)))))))
                                     (list.complete _.monad))]]
                    (all _.composite
                         ////reference.this
                         ///count.value
                         (_.tableswitch (/32.of +0) @default [@labelsH @labelsT])
                         cases)))})))
