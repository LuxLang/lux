... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [data
    [collection
     ["[0]" dictionary]
     ["[0]" list (.use "[1]#[0]" monoid)
      ["?[1]" \\projection]]]]
   ["[0]" type (.only)
    ["[0]" check]]
   [compiler
    ["@[0]" type]]
   ["[0]" meta (.only)
    ["[0]" code
     ["<[1]>" \\projection]]]
   [target
    ["_" js]]]]
 [//
  ["/" lux (.only custom)]
  [///
   ["[0]" extension]
   [//
    ["[0]" phase]
    ["[0]" analysis (.only Operation Phase Handler Bundle)
     ["[1]/[0]" type]]]]])

(the object::new
  (-> Text Handler)
  (custom
   [(all <>.and ?list.any (<code>.tuple (<>.some ?list.any)))
    (function (_ extension phase archive [constructorC inputsC])
      (monad.let [! phase.monad]
        [constructorA (analysis/type.expecting Any
                                               (phase archive constructorC))
         inputsA (list.each' ! (|>> (phase archive) (analysis/type.expecting Any))
                             inputsC)
         _ (analysis/type.inference .Any)
         @ meta.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list#composite (list constructorA) inputsA)}])))]))

(the object::get
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text ?list.any)
    (function (_ extension phase archive [fieldC objectC])
      (monad.let phase.monad
        [objectA (analysis/type.expecting Any
                                          (phase archive objectC))
         _ (analysis/type.inference .Any)
         @ meta.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list (analysis.text @ fieldC)
                                            objectA)}])))]))

(the object::do
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text ?list.any (<code>.tuple (<>.some ?list.any)))
    (function (_ extension phase archive [methodC objectC inputsC])
      (monad.let [! phase.monad]
        [objectA (analysis/type.expecting Any
                                          (phase archive objectC))
         inputsA (list.each' ! (|>> (phase archive) (analysis/type.expecting Any))
                             inputsC)
         _ (analysis/type.inference .Any)
         @ meta.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list#composite (list (analysis.text @ methodC)
                                                            objectA)
                                                      inputsA)}])))]))

(the with_object_extensions
  (-> Bundle Bundle)
  (|>> (/.with "js_object_new#" object::new)
       (/.with "js_object_get#" object::get)
       (/.with "js_object_do#" object::do)

       (/.with "js_object_null#" (/.nullary Any))
       (/.with "js_object_null?#" (/.unary Any Bit))

       (/.with "js_object_undefined#" (/.nullary Any))
       (/.with "js_object_undefined?#" (/.unary Any Bit))
       ))

(the js::constant
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (monad.let phase.monad
        [_ (analysis/type.inference Any)
         @ meta.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list (analysis.text @ name))}])))]))

(the js::of
  (-> Text Handler)
  (custom
   [(all <>.and ?list.any (<code>.tuple (<>.some ?list.any)))
    (function (_ extension phase archive [abstractionC inputsC])
      (monad.let [! phase.monad]
        [abstractionA (analysis/type.expecting Any
                                               (phase archive abstractionC))
         inputsA (list.each' ! (|>> (phase archive) (analysis/type.expecting Any))
                             inputsC)
         _ (analysis/type.inference Any)
         @ meta.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list#composite (list abstractionA) inputsA)}])))]))

(the js::type_of
  (-> Text Handler)
  (custom
   [?list.any
    (function (_ extension phase archive objectC)
      (monad.let phase.monad
        [objectA (analysis/type.expecting Any
                                          (phase archive objectC))
         _ (analysis/type.inference .Text)
         @ meta.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list objectA)}])))]))

(the js::function
  (-> Text Handler)
  (custom
   [(all <>.and <code>.natural ?list.any)
    (function (_ extension phase archive [arity abstractionC])
      (monad.let phase.monad
        [.let [inputT (type.tuple (list.repeated arity Any))]
         abstractionA (analysis/type.expecting (-> inputT Any)
                                               (phase archive abstractionC))
         _ (analysis/type.inference (for .js ffi.Function
                                         Any))
         @ meta.provenance]
        (pure [@ {analysis.#Extension (/.translation extension)
                                      (list (analysis.natural @ arity)
                                            abstractionA)}])))]))

(the .public bundle
  Bundle
  (|> extension.empty
      with_object_extensions

      (/.with "js_constant#" js::constant)
      (/.with "js_of#" js::of)
      (/.with "js_type_of#" js::type_of)
      (/.with "js_function#" js::function)
      ))
