... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except function)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor mix)]]]
   [target
    ["_" ruby (.only LVar GVar)]]]]
 ["[0]" //
  [runtime (.only Operation Phase Expression Phase!)]
  ["[1][0]" reference]
  ["[1][0]" when]
  ["[1][0]" loop]
  ["/[1]" //
   ["[1][0]" reference]
   ["//[1]" ///
    ["[0]" phase]
    ["[0]" synthesis]
    ["[1][0]" translation]
    ["//[1]" ///
     [arity (.only Arity)]
     [reference
      [register (.only Register)]]
     [meta
      ["[0]" cache
       [dependency
        ["[1]/[0]" artifact]]]]]]]])

(the .public (reification expression archive [functionS argsS+])
  (Expression synthesis.Reification)
  (do [! phase.monad]
    [functionO (expression archive functionS)
     argsO+ (monad.each ! (expression archive) argsS+)]
    (in (_.apply_lambda argsO+ functionO))))

(the .public capture
  (-> Register LVar)
  (|>> (///reference.foreign //reference.system) as_expected))

(the (with_closure inits self function_definition)
  (-> (Stack _.Expression) Text _.Expression [_.Statement _.Expression])
  (let [@self (_.global self)]
    (when inits
      {.#Empty}
      [(_.; (_.set (stack @self) function_definition))
       @self]

      _
      [(_.; (_.set (stack @self) (_.lambda {.#None}
                                           [(|> (stack.enumeration inits)
                                                (stack#each (|>> product.left ..capture)))
                                            (let [@self (_.local self)]
                                              (all _.then
                                                   (_.; (_.set (stack @self) function_definition))
                                                   (_.return @self)))])))
       (_.apply_lambda inits @self)])))

(the input
  (|>> ++ //when.register))

(the .public (function statement expression archive [environment arity bodyS])
  (-> Phase! (Expression synthesis.Abstraction))
  (do [! phase.monad]
    [dependencies (cache/artifact.dependencies archive bodyS)
     [[function_module function_artifact] body!] (/////translation.with_new_context archive dependencies
                                                   (/////translation.with_anchor 1
                                                     (statement expression archive bodyS)))
     closureO+ (monad.each ! (expression archive) environment)
     .let [function_name (///reference.artifact [function_module function_artifact])
           @curried (_.local "curried")
           arityO (|> arity .integer _.int)
           limitO (|> arity -- .integer _.int)
           @num_args (_.local "num_args")
           @self (is _.Location
                     (when closureO+
                       {.#Empty}
                       (_.global function_name)

                       _
                       (_.local function_name)))
           initialize_self! (_.; (_.set (stack (//when.register 0)) @self))
           initialize! (stack#mix (.function (_ post pre!)
                                    (all _.then
                                         pre!
                                         (_.; (_.set (stack (..input post)) (_.item (|> post .integer _.int) @curried)))))
                                  initialize_self!
                                  (stack.indices arity))
           [declaration instatiation] (with_closure closureO+ function_name
                                        (_.lambda {.#None}
                                                  [(stack (_.variadic @curried))
                                                   (all _.then
                                                        (_.; (_.set (stack @num_args) (_.its "length" @curried)))
                                                        (<| (_.if (|> @num_args (_.= arityO))
                                                              (<| (_.then initialize!)
                                                                  //loop.with_tail_recursion
                                                                  body!))
                                                            (_.if (|> @num_args (_.< arityO))
                                                              (let [@missing (_.local "missing")]
                                                                (_.return (_.lambda {.#None}
                                                                                    [(stack (_.variadic @missing))
                                                                                     (_.return (|> @self
                                                                                                   (_.apply_lambda (stack (_.splat (|> (_.array (stack))
                                                                                                                                       (_.do "concat" (stack @curried) {.#None})
                                                                                                                                       (_.do "concat" (stack @missing) {.#None})))))))]))))
                                                            ... (|> @num_args (_.> arityO))
                                                            (let [slice (.function (_ from to)
                                                                          (_.array_range from to @curried))
                                                                  arity_args (_.splat (slice (_.int +0) limitO))
                                                                  output_func_args (_.splat (slice arityO @num_args))]
                                                              (_.return (|> @self
                                                                            (_.apply_lambda (stack arity_args))
                                                                            (_.apply_lambda (stack output_func_args))))))
                                                        )]))]
     _ (/////translation.execute! declaration)
     _ (/////translation.save! function_artifact {.#None} declaration)]
    (in instatiation)))
