... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except list with)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [control
    ["|" pipe]]
   [error
    ["[0]" try]]
   ["[0]" function]
   [data
    ["[0]" product]
    [collection
     ["[0]" dictionary]
     ["[0]" list (.use "[1]:[0]" functor mix)
      ["?[1]" \\projection]]]]
   [macro
    ["[0]" template]]
   ["[0]" target (.only)
    ["_" lua]]
   [compiler
    [meta
     [archive (.only Archive)]]
    ["[0]" extension (.only)
     ["[1]/[0]" lux]]]
   [aspect
    ["[0]" view]]]]
 [/////
  ["//" extension]
  [translation
   [extension (.only Nullary Unary Binary Trinary Variadic
                     nullary unary binary trinary variadic)]
   ["//" lua
    ["[1][0]" runtime (.only Operation Phase Phase! Handler Bundle)]
    ["[1][0]" primitive]
    ["[1][0]" structure]
    ["[1][0]" reference]
    ["[1][0]" when]
    ["[1][0]" loop]
    ["[1][0]" function]]]
  [//
   ["[0]" phase (.use "[1]:[0]" monad)]
   ["[0]" translation]
   ["[0]" synthesis (.only)
    ["?[1]" \\projection (.only Projection)]]]])

(the .public (custom [projection handler])
  (for_any (_ s)
    (-> [(Projection s)
         (-> Phase Archive s (Operation _.Expression))]
        Handler))
  (function (_ phase archive input)
    (when (?list.value input projection)
      {try.:Success input'}
      (handler phase archive input')

      {try.:Failure error}
      (phase.failure error))))

(the !unary
  (template.macro (_ function)
    [(|>> .list _.of (|> (_.var function)))]))

(the .public (statement expression archive synthesis)
  Phase!
  (`` (when synthesis
        ... TODO: Get rid of this ASAP
        [@ {synthesis.:Extension [.prelude "when_char#|translation"] parameters}]
        (monad.let phase.monad
          [body (expression archive synthesis)]
          (pure (as (-> _.Expression _.Statement) body)))
        
        (,, (template.with [<tag>]
              [(<tag> @ value)
               (phase:each _.return (expression archive synthesis))]

              [[synthesis.bit]
               [synthesis.i64]
               [synthesis.f64]
               [synthesis.text]
               [synthesis.variant]
               [synthesis.tuple]
               [synthesis.reification]]
              ))

        (,, (template.with [<tag>]
              [[@ {<tag> value}]
               (phase:each _.return (expression archive synthesis))]

              [[synthesis.:Reference]
               [synthesis.:Extension]]
              ))

        (synthesis.let @ register input body)
        (//when.let! statement expression archive [register input body])

        (synthesis.exec @ before after)
        (//when.exec! statement expression archive [before after])

        (synthesis.when @ it)
        (<| (,, (template.with [,tag]
                  [(when (,tag it)
                     {.:Some it}
                     (phase:each _.return (expression archive synthesis))

                     else)]

                  [[synthesis.its]]
                  ))
            (,, (template.with [,tag ,translation]
                  [(when (,tag it)
                     {.:Some it}
                     (,translation statement expression archive it)

                     else)]

                  [[synthesis.if //when.if!]
                   [synthesis.when_i64 //when.when_i64!]
                   [synthesis.when_f64 //when.when_f64!]
                   [synthesis.when_text //when.when_text!]
                   [synthesis.multi_let //when.multi_let!]]
                  ))
            (//when.when! statement expression archive it))

        (synthesis.tail_recursion @ tail_recursion)
        (monad.let phase.monad
          [[inits tail_recursion!] (//loop.tail_recursion! statement expression archive false tail_recursion)]
          (pure tail_recursion!))

        (synthesis.tail_iteration @ updates)
        (//loop.tail_iteration! statement expression archive updates)

        (synthesis.abstraction @ abstraction)
        (phase:each _.return (//function.function statement expression archive abstraction))
        )))

... TODO: Get rid of this ASAP
(the lux//syntax_char_case!
  (..custom [(all <>.and
                  ?list.any
                  ?list.any
                  (<>.some (?synthesis.tuple (all <>.and
                                                  (?synthesis.tuple (<>.many ?synthesis.i64))
                                                  ?list.any))))
             (function (_ phase archive [input else conditionals])
               (|> conditionals
                   (list:each (function (_ [chars branch])
                                {synthesis.:And (when (view.as list.stack chars)
                                                  {.:Empty}
                                                  {synthesis.:Pop}
                                                  
                                                  {.:Top head tail}
                                                  {synthesis.:I64_Fork
                                                   [head {synthesis.:Pop}]
                                                   (list:each (function (_ char)
                                                                [char {synthesis.:Pop}])
                                                              (view.of list.stack tail))})
                                                {synthesis.:Then branch}}))
                   list.in_reverse
                   (list:mix (function (_ pre post)
                               {synthesis.:Or pre post})
                             {synthesis.:Then else})
                   [input]
                   (//when.when! statement phase archive)
                   (by phase.monad each (|>> (as (-> _.Statement _.Expression))))))]))

(the .public (with name anonymous)
  (-> extension.Name Handler
      (Change Bundle))
  (dictionary.has (extension.synthesis name) anonymous))

(the with_basic
  (Change Bundle)
  (|>> (with extension/lux.when_char lux//syntax_char_case!)
       (with extension/lux.is? (binary (product.uncurried _.=)))
       (with extension/lux.try (unary //runtime.lux//try))))

(the with_i64
  (Change Bundle)
  (|>> (with extension/lux.i64_and (binary (product.uncurried _.bit_and)))
       (with extension/lux.i64_or (binary (product.uncurried _.bit_or)))
       (with extension/lux.i64_xor (binary (product.uncurried _.bit_xor)))
       (with extension/lux.i64_left (binary (product.uncurried //runtime.i64//<<)))
       (with extension/lux.i64_right (binary (product.uncurried //runtime.i64//>>)))
       
       (with extension/lux.i64_= (binary (product.uncurried _.=)))
       (with extension/lux.i64_+ (binary (product.uncurried _.+)))
       (with extension/lux.i64_- (binary (product.uncurried _.-)))
       ))

(the with_integer
  (Change Bundle)
  (|>> (with extension/lux.int_< (binary (product.uncurried _.<)))
       (with extension/lux.int_x (binary (product.uncurried _.*)))
       (with extension/lux.int_/ (binary (product.uncurried //runtime.i64//division)))
       (with extension/lux.int_% (binary (product.uncurried //runtime.i64//remainder)))
       
       (with extension/lux.int_f64 (unary (_./ (_.float +1.0))))
       (with extension/lux.int_char (unary (!unary "utf8.char")))
       ))

(the with_decimal
  (Change Bundle)
  (|>> (with extension/lux.f64_+ (binary (product.uncurried _.+)))
       (with extension/lux.f64_- (binary (product.uncurried _.-)))
       (with extension/lux.f64_x (binary (product.uncurried _.*)))
       (with extension/lux.f64_/ (binary (product.uncurried _./)))
       (with extension/lux.f64_% (binary (product.uncurried (function (_ parameter subject) (_.of (.list subject parameter) (_.var "math.fmod"))))))
       
       (with extension/lux.f64_= (binary (product.uncurried _.=)))
       (with extension/lux.f64_< (binary (product.uncurried _.<)))

       (with extension/lux.f64_int (unary (!unary "math.floor")))))

(the (text//char [paramO subjectO])
  (Binary _.Expression)
  (//runtime.text//char (_.+ (_.int +1) paramO) subjectO))

(the (text//clip [paramO extraO subjectO])
  (Trinary _.Expression)
  (//runtime.text//clip subjectO paramO extraO))

(the (text//index [startO partO textO])
  (Trinary _.Expression)
  (//runtime.text//index textO partO startO))

(the text//composite
  (Variadic _.Expression)
  (|>> (|.when
         (.list)
         (_.string "")

         (.list single)
         single

         (.list left right)
         (|> left (_.concatenation right))

         parts
         (_.of (.list (_.array parts))
               (_.var "table.concat")))))

(the with_text
  (Change Bundle)
  (|>> (with extension/lux.text_= (binary (product.uncurried _.=)))
       (with extension/lux.text_< (binary (product.uncurried _.<)))
       
       (with extension/lux.text_composite (variadic ..text//composite))
       (with extension/lux.text_index (trinary ..text//index))
       (with extension/lux.text_size (unary //runtime.text//size))
       ... TODO: Use version below once the Lua compiler becomes self-hosted.
       ... (with extension/lux.text_size (unary (target.if target.lua
       ...                                                 (!unary "utf8.len")

       ...                                                 ... else
       ...                                                 (!unary "string.len"))))
       (with extension/lux.text_char (binary ..text//char))
       (with extension/lux.text_clip (trinary ..text//clip))
       ))

(the (io//log! messageO)
  (Unary _.Expression)
  (|> (_.of (.list messageO) (_.var "print"))
      (_.or //runtime.unit)))

(the with_io
  (Change Bundle)
  (|>> (with extension/lux.log! (unary ..io//log!))
       (with extension/lux.error (unary (!unary "error")))))

(the list
  (Variadic _.Expression)
  _.array)

(the list_size
  (Unary _.Expression)
  _.length)

(the (list_item [address it])
  (Binary _.Expression)
  (_.item (_.+ (_.int +1) address)
          it))

(the (list_composite' output input)
  (-> _.Var _.Expression
      _.Statement)
  (let [_ (_.var "_")
        value (_.var "value")]
    (_.for_in (.list _ value)
              (_.ipairs/1 input)
              (_.; (_.of (.list output value)
                         (_.var "table.insert"))))))

(the (list_composite [left right])
  (Binary _.Expression)
  (|> (let [it (_.var "it")]
        (_.closure (.list it)
                   (all _.then
                        (list_composite' it left)
                        (list_composite' it right)
                        (_.return it)
                        )))
      (_.of (.list (_.array (.list))))))

(the with_list
  (Change Bundle)
  (|>> (dictionary.has (extension.synthesis extension/lux.list)
                       (variadic ..list))
       (dictionary.has (extension.synthesis extension/lux.list_size)
                       (unary ..list_size))
       (dictionary.has (extension.synthesis extension/lux.list_item)
                       (binary ..list_item))
       (dictionary.has (extension.synthesis extension/lux.list_composite)
                       (binary ..list_composite))
       ))

(the array
  (Unary _.Expression)
  (|>> ["n"]
       .list
       _.table))

(the array_size
  (Unary _.Expression)
  ..list_size)

(the array_its
  (Binary _.Expression)
  ..list_item)

(the (array_has [address value it])
  (Trinary _.Expression)
  (//runtime.array//write address value it))

(the (array_lacks [address it])
  (Binary _.Expression)
  (array_has [address _.nil it]))

(the (array_lacks? [address it])
  (Binary _.Expression)
  (|> (array_its [address it])
      (_.= _.nil)))

(the with_array
  (Change Bundle)
  (|>> (dictionary.has (extension.synthesis extension/lux.array)
                       (unary ..array))
       (dictionary.has (extension.synthesis extension/lux.array_size)
                       (unary ..array_size))
       (dictionary.has (extension.synthesis extension/lux.array_its)
                       (binary ..array_its))
       (dictionary.has (extension.synthesis extension/lux.array_has)
                       (trinary ..array_has))
       (dictionary.has (extension.synthesis extension/lux.array_lacks)
                       (binary ..array_lacks))
       (dictionary.has (extension.synthesis extension/lux.array_lacks?)
                       (binary ..array_lacks?))
       ))

(the .public bundle
  Bundle
  (|> //.empty
      with_basic
      with_i64
      with_integer
      with_decimal
      with_text
      with_io
      with_list
      with_array
      ))
