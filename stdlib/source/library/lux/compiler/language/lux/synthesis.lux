... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except :Reification
                :locals :source
                i64 local
                let exec when its variant tuple text
                if or and
                abstraction)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    ["[0]" monad]]
   [control
    ["[0]" maybe]]
   [data
    ["[0]" sum]
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]:[0]" functor monoid)]
     ["[0]" dictionary (.only Dictionary)]]]
   [logic
    ["[0]" bit]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" monad)]
    [number
     ["[0]" /64 (.only)
      ["n" natural]
      ["i" integer]
      ["d" decimal]]]]
   [macro
    ["^" pattern]
    ["[0]" expansion]
    ["[0]" template]]
   [meta
    ["[0]" provenance]]]]
 ["[0]" /
  ["[1][0]" path]
  ["[1][0]" simple (.only Simple)]
  ["[1][0]" access (.only Access)
   ["[2][0]" side (.only Side)]
   ["[2][0]" member (.only Member)]]
  [//
   ["[0]" analysis (.only)
    ["[1]/[0]" complex]]
   ["[0]" phase (.only)
    ["[0]" extension]]
   [///
    [arity (.only Arity)]
    ["@[0]" type (.only Complex Register Variable Reference Environment Extension)]
    ["[0]" reference (.only)
     ["[0]" variable]]]]])

(every .public State
  (Record
   [:locals Natural
    ... https://en.wikipedia.org/wiki/Currying
    :currying? Bit]))

(the .public init
  State
  [:locals 0
   :currying? false])

(every .public Resolver
  (Dictionary Variable Variable))

(the .public fresh_resolver
  Resolver
  (dictionary.empty variable.hash))

(every .public (Abstraction' it)
  (Record
   [:environment (Environment it)
    :arity Arity
    :body it]))

(every .public (Reification' it)
  (Record
   [:function it
    :arguments (List it)]))

(every .public (When it)
  (Record
   [:input it
    :output (/path.Path it)]))

(every .public (Tail_Recursion it)
  (Record
   [:start Register
    :inits (List it)
    :iteration it]))

(every .public (Loop it)
  (Variant {:Tail_Recursion (Tail_Recursion it)}
           {:Tail_Iteration (List it)}))

(every .public (Function it)
  (Variant {:Abstraction (Abstraction' it)}
           {:Reification (Reification' it)}))

(every .public (Control it)
  (Variant {:When (When it)}
           {:Loop (Loop it)}
           {:Function (Function it)}))

(expansion.let [@ ($ (Term' $))]
  (every .public (Term' $)
    (Variant {:Simple Simple}
             {:Structure (Complex @)}
             {:Reference Reference}
             {:Control (Control @)}
             {:Extension (Extension @)})))

(every .public Term
  (Annotated Provenance
             (Term' (Annotated Provenance))))

(every .public Operation
  (phase.Operation State))

(every .public Phase
  (phase.Phase State analysis.Term Term))

(template.with [<special> <general>]
  [(every .public <special>
     (<general> ..State analysis.Term Term))]

  [[Handler  extension.Handler]
   [Bundle   extension.Bundle]
   [Extender extension.Extender]])

(every .public Abstraction
  (Abstraction' Term))

(every .public Reification
  (Reification' Term))

(the .public unit
  Text
  "")

(template.with [<with> <query> <tag> <type>]
  [(the .public (<with> value)
     (-> <type>
         (for_any (_ it)
           (Change (Operation it))))
     (phase.temporary (has <tag> value)))

   (the .public <query>
     (Operation <type>)
     (phase.read (.its <tag>)))]

  [[with_locals    locals    :locals    Natural]
   [with_currying? currying? :currying? Bit]])

(the .public with_new_local
  (for_any (_ it)
    (Change (Operation it)))
  (<<| (monad.let phase.monad
         [locals ..locals])
       (..with_locals (++ locals))))

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (<name> <@> content)
       [[<@> {..:Simple {<tag> content}}]]))]

  [[bit  /simple.:Bit]
   [i64  /simple.:I64]
   [f64  /simple.:F64]
   [text /simple.:Text]])

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (<name> <@> content)
       [(.<| [<@>]
             {..:Structure}
             {<tag>}
             content)]))]

  [[variant @type.:Complex_Variant]
   [tuple   @type.:Complex_Tuple]])

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (<name> <@> content)
       [(.<| [<@>]
             {..:Reference}
             <tag>
             content)]))]

  [[variable reference.variable]
   [constant reference.constant]
   [local    reference.local]
   [foreign  reference.foreign]])

(the .public when
  (template.macro (<name> <@> content)
    [(.<| [<@>]
          {..:Control}
          {..:When}
          content)]))

(template.with [<name> <family> <tag>]
  [(the .public <name>
     (template.macro (<name> <@> content)
       [(.<| [<@>]
             {..:Control}
             {<family>}
             {<tag>}
             content)]))]

  [[tail_recursion ..:Loop ..:Tail_Recursion]
   [tail_iteration ..:Loop ..:Tail_Iteration]

   [abstraction ..:Function ..:Abstraction]
   [reification ..:Function ..:Reification]])

(the .public (as_text [_ value])
  (text.Injection Term)
  (.when value
    {:Simple it}
    (/simple.as_text it)

    {:Structure it}
    (analysis/complex.as_text as_text it)

    {:Reference reference}
    (reference.as_text reference)

    {:Control control}
    (.when control
      {:Function function}
      (.when function
        {:Abstraction [environment arity body]}
        (.let [environment' (|> environment
                                (list:each as_text)
                                (text.interposed " ")
                                (text.enclosed ["[" "]"]))]
          (|> (.text environment' " " (%.natural arity) " " (as_text body))
              (text.enclosed ["{:function " "}"])))
        
        {:Reification func args}
        (|> args
            (list:each as_text)
            (text.interposed " ")
            (.text (as_text func) " ")
            (text.enclosed ["(" ")"])))

      {:When input path}
      (|> (.text (as_text input) " " (/path.as_text as_text path))
          (text.enclosed ["{:when " "}"]))
      
      {:Loop loop}
      (.when loop
        {:Tail_Recursion tail_recursion}
        (|> (.text (%.natural (.its :start tail_recursion))
                   " " (|> (.its :inits tail_recursion)
                           (list:each as_text)
                           (text.interposed " ")
                           (text.enclosed ["[" "]"]))
                   " " (as_text (.its :iteration tail_recursion)))
            (text.enclosed ["{:loop " "}"]))
        
        {:Tail_Iteration args}
        (|> args
            (list:each as_text)
            (text.interposed " ")
            (text.enclosed ["{:tail_iteration " "}"]))))

    {:Extension [[_ name] args]}
    (|> (list:each as_text args)
        (text.interposed " ")
        (.text (%.text name) " ")
        (text.enclosed ["(" ")"]))))

(the (when_equivalence (open "/:[0]"))
  (for_any (_ it)
    (-> (Equivalence it)
        (Equivalence (When it))))
  (implementation
   (the (= [expected_input expected_path] [actual_input actual_path])
     (.and (/:= expected_input actual_input)
           (by (/path.equivalence /:=) = expected_path actual_path)))))

(the (loop_equivalence (open "/:[0]"))
  (for_any (_ it)
    (-> (Equivalence it)
        (Equivalence (Loop it))))
  (implementation
   (the (= expected actual)
     (.when [expected actual]
       [{:Tail_Recursion [expected_start expected_inits expected_iteration]}
        {:Tail_Recursion [actual_start actual_inits actual_iteration]}]
       (.and (n.= expected_start actual_start)
             (by (list.equivalence /:=) = expected_inits actual_inits)
             (/:= expected_iteration actual_iteration))

       [{:Tail_Iteration expected} {:Tail_Iteration actual}]
       (by (list.equivalence /:=) = expected actual)
       
       _
       false))))

(the (loop_hash super)
  (for_any (_ it)
    (-> (Hash it)
        (Hash (Loop it))))
  (implementation
   (the equivalence
     (..loop_equivalence (by super equivalence)))
   
   (the (hash value)
     (.when value
       {:Tail_Recursion [start inits iteration]}
       (all n.x 2
            (by n.hash hash start)
            (by (list.hash super) hash inits)
            (by super hash iteration))

       {:Tail_Iteration resets}
       (all n.x 3
            (by (list.hash super) hash resets))
       ))))

(the (function_equivalence (open "/:[0]"))
  (for_any (_ it)
    (-> (Equivalence it)
        (Equivalence (Function it))))
  (implementation
   (the (= expected actual)
     (.when [expected actual]
       [{:Abstraction [expected_environment expected_arity expected_body]}
        {:Abstraction [actual_environment actual_arity actual_body]}]
       (.and (by (list.equivalence /:=) = expected_environment actual_environment)
             (n.= expected_arity actual_arity)
             (/:= expected_body actual_body))
       
       [{:Reification [expected_abstraction expected_arguments]}
        {:Reification [actual_abstraction actual_arguments]}]
       (.and (/:= expected_abstraction actual_abstraction)
             (by (list.equivalence /:=) = expected_arguments actual_arguments))
       
       _
       false))))

(the (function_hash super)
  (for_any (_ it)
    (-> (Hash it)
        (Hash (Function it))))
  (implementation
   (the equivalence
     (..function_equivalence (by super equivalence)))
   
   (the (hash value)
     (.when value
       {:Abstraction [environment arity body]}
       (all n.x 2
            (by (list.hash super) hash environment)
            (by n.hash hash arity)
            (by super hash body))
       
       {:Reification [abstraction arguments]}
       (all n.x 3
            (by super hash abstraction)
            (by (list.hash super) hash arguments))
       ))))

(the (control_equivalence (open "/:[0]"))
  (for_any (_ it)
    (-> (Equivalence it)
        (Equivalence (Control it))))
  (implementation
   (the (= expected actual)
     (`` (.when [expected actual]
           (,, (template.with [<tag> <equivalence>]
                 [[{<tag> expected} {<tag> actual}]
                  (by (<equivalence> /:=) = expected actual)]

                 [[:When ..when_equivalence]
                  [:Loop ..loop_equivalence]
                  [:Function ..function_equivalence]]))
           
           _
           false)))))

(the (control_hash super)
  (for_any (_ it)
    (-> (Hash it)
        (Hash (Control it))))
  (implementation
   (the equivalence
     (..control_equivalence (by super equivalence)))

   (the (hash value)
     (`` (.when value
           {:When [input path]}
           (all n.x 2
                (by super hash input)
                (by (/path.hash super) hash path))
           
           (,, (template.with [<factor> <tag> <hash>]
                 [{<tag> value}
                  (n.x <factor> (by (<hash> super) hash value))]

                 [[3 :Loop ..loop_hash]
                  [5 :Function ..function_hash]]))
           )))))

(the .public equivalence
  (Equivalence Term)
  (implementation
   (the (= [_ expected] [_ actual])
     (`` (.when [expected actual]
           (,, (template.with [<tag> <equivalence>]
                 [[{<tag> expected'} {<tag> actual'}]
                  (by <equivalence> = expected' actual')]

                 [[:Simple /simple.equivalence]
                  [:Structure (analysis/complex.equivalence =)]
                  [:Reference reference.equivalence]
                  [:Control (control_equivalence =)]
                  [:Extension (extension.equivalence =)]]))

           _
           false)))))

(alias [=]
       ..equivalence)

(the .public hash
  (Hash Term)
  (implementation
   (the equivalence ..equivalence)

   (the (hash value)
     (.let [again_hash [..equivalence hash]]
       (`` (.when value
             (,, (template.with [<factor> <tag> <hash>]
                   [[_ {<tag> value}]
                    (n.x <factor> (by <hash> hash value))]

                   [[02 :Simple /simple.hash]
                    [03 :Structure (analysis/complex.hash again_hash)]
                    [05 :Reference reference.hash]
                    [07 :Control (..control_hash again_hash)]
                    [11 :Extension (extension.hash again_hash)]]))))))))

(the Projection
  (type [Register Member]))

(every .public Multi_Let
  [Term
   (List Projection)
   Term])

(the .public (multi_let [input output])
  (-> (When Term)
      (Maybe Multi_Let))
  (loop (of [bindings (is (List Projection)
                          (list))
             output output])
    (.when output
      (all {/path.:And}
           {/path.:Access {/access.:Member member}}
           {/path.:Bind register}
           then)
      (.let [bindings (list:composite bindings (list [register member]))]
        (.when then
          {/path.:And {/path.:Pop} then}
          (of bindings then)

          {/path.:Then body}
          {.:Some [input bindings body]}

          _
          {.:None}))

      _
      {.:None})))

(every .public (If branch)
  (Record
   [:if_when Term
    :if_then branch
    :if_else branch]))

(the .public (if [input output])
  (-> (When Term)
      (Maybe (If Term)))
  (.when output
    (^.or {/path.:Bit_Fork .true {/path.:Then then} {.:Some {/path.:Then else}}}
          {/path.:Bit_Fork .false {/path.:Then else} {.:Some {/path.:Then then}}})
    {.:Some [:if_when input
             :if_then then
             :if_else else]}

    _
    {.:None}))

(template.let [(complete ,right? ,binding ,body)
               [(all {/path.:And}
                     {/path.:Access {/access.:Side [/side.:lefts 0
                                                    /side.:right? ,right?]}}
                     {/path.:Bind ,binding}
                     {/path.:Then ,body})]

               (partial ,right? ,body)
               [(all {/path.:And}
                     {/path.:Access {/access.:Side [/side.:lefts 0
                                                    /side.:right? ,right?]}}
                     {/path.:Then ,body})]

               (trust ,body)
               [{/path.:Then ,body}]]
  (expansion.let [,complete_then (complete .false @then then)
                  ,complete_else (complete .true @else else)

                  ,partial_then (partial .false then)
                  ,partial_else (partial .true else)]
    (the .public (variant_if [input output])
      (-> (When Term)
          (Maybe (If [(Maybe Register) Term])))
      (.when output
        (^.or {/path.:Or ,complete_then ,complete_else}
              {/path.:Or ,complete_else ,complete_then})
        {.:Some [:if_when input
                 :if_then [{.:Some @then} then]
                 :if_else [{.:Some @else} else]]}

        (^.or {/path.:Or ,partial_then ,complete_else}
              {/path.:Or ,complete_else ,partial_then}

              {/path.:Or ,complete_else (trust then)})
        {.:Some [:if_when input
                 :if_then [{.:None} then]
                 :if_else [{.:Some @else} else]]}

        (^.or {/path.:Or ,complete_then ,partial_else}
              {/path.:Or ,partial_else ,complete_then})
        {.:Some [:if_when input
                 :if_then [{.:Some @then} then]
                 :if_else [{.:None} else]]}

        (^.or {/path.:Or ,partial_then ,partial_else}
              {/path.:Or ,partial_else ,partial_then}

              {/path.:Or ,partial_else (trust then)})
        {.:Some [:if_when input
                 :if_then [{.:None} then]
                 :if_else [{.:None} else]]}

        _
        {.:None}))))

(template.with [,name ,static ,value ,dynamic]
  [(the .public (,name it)
     (-> (If Term)
         (Maybe [Term Term]))
     (.when (.its ,static it)
       (..bit _ ,value)
       {.:Some [(.its ,dynamic it)
                (.its :if_when it)]}

       else
       {.:None}))]

  [[or :if_then .true :if_else]
   [and :if_else .false :if_then]])

(template.with [,name ,type ,path]
  [(the .public (,name [input output])
     (-> (When Term)
         (Maybe [Term (List [,type Term]) Term]))
     (.when output
       {/path.:Or {,path head tail}
                  {/path.:Then else}}
       (monad.let [! maybe.monad]
         [.let [case (is (-> (/path.Road ,type (/path.Path Term))
                             (Maybe [,type Term]))
                         (function (_ road)
                           (.when (.its /path.:then road)
                             {/path.:Then then}
                             {.:Some [(.its /path.:when road) then]}

                             _
                             {.:None})))]
          head (case head)
          tail (list.each' ! case tail)]
         (pure [input
                (list:composite (list head) tail)
                else]))

       _
       {.:None}))]

  [[when_i64 I64 /path.:I64_Fork]
   [when_f64 F64 /path.:F64_Fork]
   [when_text Text /path.:Text_Fork]])

(the .public let
  (template.macro (_ ,@ ,register ,value ,body)
    [(<| [,@]
         {..:Control}
         {..:When}
         [..:input ,value
          ..:output]
         {/path.:And {/path.:Bind ,register}
                     {/path.:Then ,body}})]))

(every .public Let
  (Record
   [:let_binding Register
    :let_input Term
    :let_body Term]))

(the .public (flat_let body)
  (-> Term
      [(List [Register Term]) Term])
  (.when body
    (..let @ register value body)
    (.let [[tail body] (flat_let body)]
      [(list:composite (list [register value]) tail) body])

    _
    [(list) body]))

(every .public Exec
  (Record
   [:exec_before Term
    :exec_after Term]))

(the .public exec
  (template.macro (_ ,@ ,before ,after)
    [(<| [,@]
         {..:Control}
         {..:When}
         [..:input ,before
          ..:output]
         {/path.:Then ,after})]))

(the .public (flat_exec after)
  (-> Term
      [(List Term) Term])
  (.when after
    (..exec @ before after)
    (.let [[tail after] (flat_exec after)]
      [(list:composite (list before) tail) after])

    _
    [(list) after]))

(every .public Its
  (Record
   [:its_path (List Member)
    :its_source Term]))

(the .public (its [source pattern_matching])
  (-> (When Term)
      (Maybe Its))
  (loop (its [path (is (List Member)
                       (list))
              pattern_matching pattern_matching])
    (.when pattern_matching
      (all {/path.:And}
           {/path.:Access {/access.:Member member}}
           {/path.:Pop}
           tail)
      (its path tail)

      (all {/path.:And}
           {/path.:Access {/access.:Member member}}
           {/path.:Bind expected}
           {/path.:Then (..local @ actual)})
      (.if (n.= expected actual)
           {.:Some [:its_path (list:composite path (list member))
                    :its_source source]}
           {.:None})

      (all {/path.:And}
           {/path.:Access {/access.:Member member}}
           tail)
      (its (list:composite path (list member))
           tail)

      _
      {.:None})))

(the .public random
  (Random Term)
  (<| random.rec
      (function (_ random))
      (.let [random_complex (is (Random (Complex Term))
                                (all random.or
                                     (all random.and
                                          random.natural
                                          random.bit
                                          random)
                                     (random.list 2 random)))
             random_control (is (Random (Control Term))
                                (.let [random_when (is (Random (When Term))
                                                       (all random.and
                                                            random
                                                            (/path.random 0 random)))
                                       random_loop (is (Random (Loop Term))
                                                       (all random.or
                                                            (all random.and
                                                                 random.natural
                                                                 (random.list 1 random)
                                                                 random)
                                                            (random.list 1 random)))
                                       random_function (is (Random (Function Term))
                                                           (all random.or
                                                                (all random.and
                                                                     (random.list 1 random)
                                                                     random.natural
                                                                     random)
                                                                (all random.and
                                                                     random
                                                                     (random.list 1 random))))]
                                  (all random.or
                                       random_when
                                       random_loop
                                       random_function)))
             random_extension (is (Random (Extension Term))
                                  (all random.and
                                       (is (Random Name)
                                           (all random.and
                                                (random.lower_cased 1)
                                                (random.upper_cased 1)))
                                       (random.list 1 random)))]
        (all random.and
             (random:pure provenance.dummy)
             (all random.or
                  /simple.random
                  random_complex
                  reference.random
                  random_control
                  random_extension
                  )))))
