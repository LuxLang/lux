... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [type (.only sharing)]
   [abstract
    [monad (.only do)]]
   [concurrency
    ["[0]" atom (.only Atom)]]
   [control
    ["[0]" io]]
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["n" natural]
     ["[0]" i64]]]
   ["[0]" meta (.only)
    ["[0]" module]]]]
 ["[0]" // (.only Operation)
  ["[1][0]" type]
  ["[1][0]" scope]
  [//
   [phase
    ["[0]P" analysis]
    [//
     ["[0]" phase]
     ["[0]" synthesis]
     ["[0]" translation]
     [///
      [meta
       ["[0]" archive (.only Archive)
        ["[0]A" module]
        ["[0]" artifact]]]
      ["@[0]" type]]]]]])

(every .public Eval
  (-> Archive Type @type.Code
      (Operation Any)))

(the evals
  (Atom (Dictionary moduleA.ID artifact.ID))
  (atom.atom (dictionary.empty n.hash)))

(the .public (evaluator analysis
                        [synthesis_state synthesis]
                        [translation_state translation])
  (for_any (_ anchor expression artifact)
    (-> //.Phase
        [synthesis.State
         (-> Lux synthesis.Phase)]
        [(translation.State anchor expression artifact)
         (-> Lux (translation.Phase anchor expression artifact))]
        Eval))
  (function (eval archive type exprC)
    (do phase.monad
      [exprA (<| (//type.expecting type)
                 //scope.reset
                 (analysis archive exprC))
       [module _] module.current
       lux meta.compiler_state]
      (<| phase.of_try
          (do try.monad
            [exprS (|> exprA
                       (synthesis lux archive)
                       (phase.value synthesis_state))])
          (phase.value translation_state)
          (do phase.monad
            [@module (sharing [anchor expression artifact]
                       (is (-> Lux (translation.Phase anchor expression artifact))
                           translation)
                       (is (translation.Operation anchor expression artifact moduleA.ID)
                           (translation.module_id module archive)))
             .let [[evals _] (io.value (atom.update! (dictionary.revised' @module 0 ++) ..evals))
                   @eval (try.else 0 (dictionary.value @module evals))]
             exprO (<| (translation.with_registry_shift (|> @module
                                                            (i64.left_shifted 16)
                                                            (i64.or @eval)
                                                            (i64.left_shifted 32)))
                       (translation lux archive exprS))]
            (translation.evaluate! [{.#None} exprO]))))))
