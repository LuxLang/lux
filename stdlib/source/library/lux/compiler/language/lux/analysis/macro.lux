... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" name]
    ["[0]" code]]
   [compiler
    ["@[0]" type]]]]
 [///
  ["[0]" phase]
  ["[0]" analysis]])

(exception.the .public (expansion_failed [module macro inputs error])
  (Exception [Text Name (List @type.Code) Text])
  (exception.report
   (list ["Macro" (name.as_text macro)]
         ["Inputs" (exception.listing (code.relative module) inputs)]
         ["Error" error])))

(exception.the .public (must_have_single_expansion [module macro inputs outputs])
  (Exception [Text Name (List @type.Code) (List @type.Code)])
  (exception.report
   (list ["Macro" (name.as_text macro)]
         ["Inputs" (exception.listing (code.relative module) inputs)]
         ["Outputs" (exception.listing (code.relative module) outputs)])))

(every .public Expander
  (-> Macro (List @type.Code) analysis.State
      (Try (Try [analysis.State (List @type.Code)]))))

(the current_module
  (analysis.Operation module.Name)
  (function (_ state)
    (when (its @type.#current_module state)
      {.#Some it}
      {try.#Success [state it]}

      {.#None}
      {try.#Failure module.no_current})))

(the .public (expansion expander name macro inputs)
  (-> Expander Name Macro (List @type.Code)
      (analysis.Operation (List @type.Code)))
  (function (_ state)
    (do try.monad
      [output (expander macro inputs state)]
      (when output
        {try.#Failure error}
        ((do phase.monad
           [here ..current_module]
           (phase.failure (exception.error ..expansion_failed [here name inputs error])))
         state)

        _
        output))))

(the .public (single_expansion expander name macro inputs)
  (-> Expander Name Macro (List @type.Code)
      (analysis.Operation @type.Code))
  (do [! phase.monad]
    [expansion (..expansion expander name macro inputs)]
    (when expansion
      (list single)
      (in single)

      _
      (do !
        [here ..current_module]
        (phase.failure (exception.error ..must_have_single_expansion [here name inputs expansion]))))))
