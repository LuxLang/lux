... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Tag Tuple Variant
                #Variant #Tuple)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [data
    ["[0]" bit]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["n" natural]]]]])

(every .public (Variant it)
  (Record
   [#lefts Natural
    #right? Bit
    #value it]))

(every .public (Tuple it)
  (List it))

(every .public (Complex it)
  (.Variant
   {#Variant (Variant it)}
   {#Tuple (Tuple it)}))

(every .public Tag
  Natural)

(the .public (tag right? lefts)
  (-> Bit Natural
      Tag)
  (if right?
      (++ lefts)
      lefts))

(the .public (lefts right? tag)
  (-> Bit Tag
      Natural)
  (if right?
      (-- tag)
      tag))

(the .public (choice multiplicity pick)
  (-> Natural Tag
      [Natural Bit])
  (let [right? (n.= (-- multiplicity) pick)]
    [(..lefts right? pick)
     right?]))

(the .public (equivalence (open "/#[0]"))
  (for_any (_ it)
    (-> (Equivalence it)
        (Equivalence (Complex it))))
  (implementation
   (the (= expected actual)
     (when [expected actual]
       [{#Variant [expected_lefts expected_right? expected_value]}
        {#Variant [actual_lefts actual_right? actual_value]}]
       (and (n.= expected_lefts actual_lefts)
            (bit.= expected_right? actual_right?)
            (/#= expected_value actual_value))
       
       [{#Tuple expected} {#Tuple actual}]
       (by (list.equivalence /#=) = expected actual)

       _
       false))))

(the .public (hash super)
  (for_any (_ it)
    (-> (Hash it)
        (Hash (Complex it))))
  (implementation
   (the equivalence
     (..equivalence (by super equivalence)))
   
   (the (hash value)
     (when value
       {#Variant [lefts right? value]}
       (all n.x 2
            (by n.hash hash lefts)
            (by bit.hash hash right?)
            (by super hash value))
       
       {#Tuple members}
       (all n.x 3
            (by (list.hash super) hash members))
       ))))

(the .public (as_text %it it)
  (for_any (_ it)
    (-> (text.Injection it)
        (text.Injection (Complex it))))
  (when it
    {#Variant [lefts right? it]}
    (text "{"
          (%.natural lefts)
          " " (bit.as_text right?)
          " " (%it it)
          "}")
    
    {#Tuple it}
    (|> it
        (list#each %it)
        (text.interposed " ")
        (text.enclosed ["[" "]"]))))
