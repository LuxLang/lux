... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except local with)
   [function
    [predicate (.only Predicate)]]
   [control
    ["[0]" maybe (.use "[1]:[0]" monad)]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text]
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]:[0]" functor mix monoid)
      ["[0]" property]]
     ["[0]" stack (.use "[1]:[0]" functor mix monoid)]]]
   [compiler
    ["@[0]" type (.only Register Variable Environment)]]
   [aspect
    ["[0]" view]]]]
 ["/" // (.only Operation Phase)
  [//
   ["[0]" phase]]])

(every Local
  (@type.Bindings [@type.Type Register]))

(every Foreign
  (@type.Bindings [@type.Type Variable]))

(the (local? name scope)
  (-> Text
      (Predicate @type.Scope))
  (|> scope
      (its [@type.#locals @type.#mappings])
      (property.contains? name)))

(the (local name scope)
  (-> Text @type.Scope
      (Maybe [@type.Type Variable]))
  (|> scope
      (its [@type.#locals @type.#mappings])
      (property.value name)
      (maybe:each (function (_ [type value])
                    [type {@type.#Local value}]))))

(the (captured? name scope)
  (-> Text
      (Predicate @type.Scope))
  (|> scope
      (its [@type.#captured @type.#mappings])
      (property.contains? name)))

(the (captured name scope)
  (-> Text @type.Scope
      (Maybe [@type.Type Variable]))
  (loop (again [idx 0
                mappings (|> scope
                             (its [@type.#captured @type.#mappings])
                             (view.as list.stack))])
    (when mappings
      {.#Top [_name [_source_type _source_ref]] mappings'}
      (if (text.= name _name)
          {.#Some [_source_type {@type.#Foreign idx}]}
          (again (++ idx) mappings'))

      {.#Empty}
      {.#None})))

(the (reference? name scope)
  (-> Text
      (Predicate @type.Scope))
  (or (local? name scope)
      (captured? name scope)))

(the (reference name scope)
  (-> Text @type.Scope
      (Maybe [@type.Type Variable]))
  (when (..local name scope)
    {.#Some type}
    {.#Some type}

    _
    (..captured name scope)))

(the .public (variable name)
  (-> Text
      (Operation (Maybe [Type Variable])))
  (function (_ state)
    (let [[inner outer] (|> state
                            (its @type.#scopes)
                            (stack.split_when (|>> (reference? name))))]
      (when outer
        {.#Empty}
        {.#Right [state {.#None}]}

        {.#Top maximum_outer _}
        (let [[ref_type init_ref] (maybe.else (undefined)
                                              (..reference name maximum_outer))
              [ref inner'] (stack:mix (is (-> @type.Scope [Variable (Stack @type.Scope)] [Variable (Stack @type.Scope)])
                                          (function (_ scope ref+inner)
                                            [{@type.#Foreign (its [@type.#captured @type.#counter] scope)}
                                             {.#Top (revised @type.#captured
                                                             (is (-> Foreign Foreign)
                                                                 (|>> (revised @type.#counter ++)
                                                                      (revised @type.#mappings (property.has name [ref_type (product.left ref+inner)]))))
                                                             scope)
                                                    (product.right ref+inner)}]))
                                      [init_ref {.#Empty}]
                                      (stack.in_reverse inner))
              scopes (stack:composite inner' outer)]
          {.#Right [(has @type.#scopes scopes state)
                    {.#Some [(@type.old ref_type) ref]}]})
        ))))

(exception.the .public no_scope)
(exception.the .public drained)

(the .public (with_local [name type] action)
  (for_any (_ it)
    (-> [Text Type]
        (Change (Operation it))))
  (function (_ state)
    (when (its @type.#scopes state)
      {.#Top head tail}
      (let [old_mappings (its [@type.#locals @type.#mappings] head)
            new_var_id (its [@type.#locals @type.#counter] head)
            new_head (revised @type.#locals
                              (is (Change Local)
                                  (|>> (revised @type.#counter ++)
                                       (revised @type.#mappings (property.has name [(@type.new type) new_var_id]))))
                              head)]
        (when (phase.value' (has @type.#scopes {.#Top new_head tail} state)
                            action)
          {try.#Success [state' output]}
          (when (its @type.#scopes state')
            {.#Top head' tail'}
            (let [scopes' {.#Top (has @type.#locals (its @type.#locals head) head')
                                 tail'}]
              {try.#Success [(has @type.#scopes scopes' state')
                             output]})

            _
            (exception.except ..drained []))

          {try.#Failure error}
          {try.#Failure error}))

      _
      (exception.except ..no_scope []))))

(the empty
  @type.Scope
  (let [bindings (is @type.Bindings
                     [@type.#counter 0
                      @type.#mappings (list)])]
    [@type.#locals bindings
     @type.#captured bindings]))

(the .public (reset action)
  (for_any (_ it)
    (Change (Operation it)))
  (function (_ state)
    (when (action (has @type.#scopes (stack ..empty) state))
      {try.#Success [state' output]}
      {try.#Success [(has @type.#scopes (its @type.#scopes state) state')
                     output]}

      failure
      failure)))

(the .public (with action)
  (for_any (_ it)
    (-> (Operation it)
        (Operation [@type.Scope it])))
  (function (_ state)
    (when (action (revised @type.#scopes (|>> {.#Top ..empty}) state))
      {try.#Success [state' output]}
      (when (its @type.#scopes state')
        {.#Top head tail}
        {try.#Success [(has @type.#scopes tail state')
                       [head output]]}

        {.#Empty}
        (exception.except ..drained []))

      {try.#Failure error}
      {try.#Failure error})))

(the .public next
  (Operation Register)
  (function (_ state)
    (when (its @type.#scopes state)
      {.#Top maximum _}
      {try.#Success [state (its [@type.#locals @type.#counter] maximum)]}

      {.#Empty}
      (exception.except ..no_scope []))))

(the .public environment
  (-> @type.Scope
      (Environment Variable))
  (|>> (its [@type.#captured @type.#mappings])
       (list:each (function (_ [_ [_ ref]]) ref))))
