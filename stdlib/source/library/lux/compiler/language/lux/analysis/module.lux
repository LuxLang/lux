... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except with alias)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" pipe]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" stack (.use "[1]#[0]" mix functor)]
     ["[0]" list (.use "[1]#[0]" mix functor monoid)
      ["[0]" property]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" module]
    ["[0]" name]]
   [compiler
    ["@[0]" type]]]]
 ["/" // (.only Operation)
  [//
   ["[0]" phase]]])

(exception.the .public (unknown_module module)
  (Exception module.Name)
  (exception.report
   (list ["Module" module])))

(exception.the .public (cannot_define_more_than_once [name already_existing])
  (Exception [Name Global])
  (exception.report
   (list ["Definition" (name.as_text name)]
         ["Original" (when already_existing
                       {.#Alias it}
                       (text "alias of " (name.as_text it))
                       
                       {.#Definition it}
                       (text "definition " (name.as_text name))

                       {.#Default it}
                       (text "default " (name.as_text name)))])))

(exception.the .public (can_only_change_state_of_active_module [module state])
  (Exception [module.Name Module_State])
  (exception.report
   (list ["Module" module]
         ["Desired state" (when state
                            {.#Active}   "Active"
                            {.#Compiled} "Compiled"
                            {.#Cached}   "Cached")])))

(the .public (empty hash)
  (-> Natural
      Module)
  [.#module_hash hash
   .#module_aliases (stack)
   .#definitions (stack)
   .#imports (list)
   .#module_state {.#Active}])

(the .public (import module)
  (-> module.Name
      (Operation Any))
  (do phase.monad
    [[self_name _] (/.with_lux
                     module.current)]
    (function (_ state)
      {try.#Success [(revised @type.#modules
                              (property.revised self_name (revised @type.#imports (function (_ current)
                                                                                    (if (list.any? (text.= module)
                                                                                                   current)
                                                                                        current
                                                                                        (list#composite current (list module))))))
                              state)
                     []]})))

(the .public (by_alias it origin)
  (-> Text module.Name
      (Operation [module.Name Module]))
  (do phase.monad
    [modules (/.with_lux
               module.all)
     name (phase.of_try
           (do try.monad
             [origin (property.value origin modules)]
             (property.value it (list.of_stack (its .#module_aliases origin)))))
     module (/.with_lux
              (module.by_name name))]
    (in [name module])))

(exception.the .public (cannot_re-use_alias [alias for previous origin])
  (Exception [Text module.Name module.Name module.Name])
  (exception.report
   (list ["Alias" (%.text alias)]
         ["For" (%.text for)]
         ["Previous" (%.text previous)]
         ["In module" (%.text origin)])))

(the .public (alias it module)
  (-> Text module.Name
      (Operation Any))
  (do phase.monad
    [[current _] (/.with_lux
                   module.current)
     previous (phase.try (by_alias it current))]
    (when previous
      {try.#Success [previous _]}
      (/.except ..cannot_re-use_alias [it module previous current])
      
      {try.#Failure _}
      (/.with_lux
        (function (_ state)
          {try.#Success [(revised .#modules
                                  (property.revised current (revised .#module_aliases (is (-> (Stack [Text Text]) (Stack [Text Text]))
                                                                                          (|>> {.#Top [it module]}))))
                                  state)
                         []]})))))

(the .public (exists? module)
  (-> module.Name
      (Operation Bit))
  (function (_ state)
    (|> state
        (its @type.#modules)
        (property.value module)
        (pipe.when
          {try.#Success _}
          true
          
          failure
          false)
        [state]
        {try.#Success})))

(the .public (define name exported?,definition)
  (-> Text [Bit Global]
      (Operation Any))
  (do phase.monad
    [[self_name self] (/.with_lux
                        module.current)]
    (when (property.value name (list.of_stack (its .#definitions self)))
      {try.#Success [_ already_existing]}
      (/.except ..cannot_define_more_than_once [[self_name name] already_existing])

      failure
      (/.with_lux
        (function (_ state)
          {try.#Success [(revised .#modules
                                  (property.has self_name
                                                (revised .#definitions
                                                         (is (-> (Stack [Text [Bit Global]])
                                                                 (Stack [Text [Bit Global]]))
                                                             (|>> {.#Top [name exported?,definition]}))
                                                         self))
                                  state)
                         []]})))))

(the .public (override_definition [module proper] exported?,definition)
  (-> Name [Bit Global]
      (Operation Any))
  (/.with_lux
    (function (_ state)
      {try.#Success [(revised @type.#modules
                              (property.revised module
                                                (revised .#definitions
                                                         (|>> list.of_stack
                                                              (property.has proper exported?,definition)
                                                              list.as_stack)))
                              state)
                     []]})))

(the .public (create hash name)
  (-> Natural module.Name
      (Operation Any))
  (/.with_lux
    (function (_ state)
      {try.#Success [(revised .#modules
                              (property.has name (..empty hash))
                              state)
                     []]})))

(the .public (with hash name action)
  (for_any (_ it)
    (-> Natural module.Name (Operation it)
        (Operation [Module it])))
  (do phase.monad
    [_ (..create hash name)
     output (/.with_current_module name
              action)
     module (/.with_lux
              (module.by_name name))]
    (in [module output])))

(template.with [<setter> <asker> <tag>]
  [(the .public (<setter> module_name)
     (-> module.Name
         (Operation Any))
     (do phase.monad
       [module (/.with_lux
                 (module.by_name module_name))]
       (let [active? (when (its .#module_state module)
                       {.#Active}
                       true
                       
                       _
                       false)]
         (if active?
             (/.with_lux
               (function (_ state)
                 {try.#Success [(|> state
                                    (revised .#modules
                                             (property.has module_name (has .#module_state {<tag>} module))))
                                []]}))
             (/.except ..can_only_change_state_of_active_module [module_name {<tag>}])))))
   
   (the .public (<asker> module_name)
     (-> module.Name
         (Operation Bit))
     (function (_ state)
       (when (|> state
                 (its @type.#modules)
                 (property.value module_name))
         {try.#Success module}
         {try.#Success [state
                        (when (its .#module_state module)
                          {<tag>}
                          true
                          
                          _
                          false)]}

         failure
         ((/.except ..unknown_module module_name)
          state))))]

  [set_active   active?   .#Active]
  [set_compiled compiled? .#Compiled]
  [set_cached   cached?   .#Cached]
  )
