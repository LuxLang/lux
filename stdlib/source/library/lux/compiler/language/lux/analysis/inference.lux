... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except variant tuple record)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" maybe]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]
     ["[0]" stack (.use "[1]#[0]" functor monoid)]]]
   [math
    [number
     ["n" natural]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   ["[0]" type (.only)
    ["[0]" check]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" code]]]]
 ["/" // (.only Operation Phase)
  ["[1][0]" type]
  [//
   ["[0]" phase (.use "[1]#[0]" monad)
    ["[0]" extension]]
   [///
    [meta
     [archive (.only Archive)]]]]])

(exception.the .public (cannot_infer [module type arguments])
  (Exception [Text Type (List Code)])
  (exception.report
   (list ["Type" (type.as_text type)]
         ["Arguments" (exception.listing (code.relative module) arguments)])))

(exception.the .public (cannot_infer_argument [module type argument])
  (Exception [Text Type Code])
  (exception.report
   (list ["Type" (type.as_text type)]
         ["Argument" (code.relative module argument)])))

(template.with [<name>]
  [(exception.the .public (<name> type)
     (Exception Type)
     (exception.report
      (list ["Type" (type.as_text type)])))]

  [not_a_variant]
  [not_a_record]
  [invalid_type_application]
  )

(the .public (quantified @variable @parameter :it:)
  (-> type.Variable Natural Type
      Type)
  (`` (when :it:
        {.#Nominal name co_variant}
        {.#Nominal name (stack#each (quantified @variable @parameter) co_variant)}

        (,, (template.with [<tag>]
              [{<tag> left right}
               {<tag> (quantified @variable @parameter left)
                      (quantified @variable @parameter right)}]

              [.#Sum]
              [.#Product]
              [.#Function]
              [.#Reification]))
        
        {.#Variable @}
        (if (n.= @variable @)
          {.#Parameter @parameter}
          :it:)

        (,, (template.with [<tag>]
              [{<tag> env body}
               {<tag> (stack#each (quantified @variable @parameter) env)
                      (quantified @variable (n.+ 2 @parameter) body)}]

              [.#Universal]
              [.#Existential]))

        (^.or {.#Parameter _}
              {.#Opaque _}
              {.#Named _})
        :it:)))

... Type-inference works by applying some (potentially quantified) type
... to a sequence of values.
... Function types are used for this, although inference is not always
... done for function application (alternative uses may be records and
... tagged variants).
... But, so long as the type being used for the inference can be treated
... as a function type, this method of inference should work.
(the (general' variables archive analyse inferT args)
  (-> (Stack type.Variable) Archive Phase Type (Stack Code)
      (Operation [Type_Context
                  (Stack type.Variable)
                  Type
                  (Stack /.Term)]))
  (when args
    {.#Empty}
    (do phase.monad
      [just_before (/type.check check.context)
       _ (/type.inference inferT)]
      (in [just_before variables inferT (stack)]))
    
    {.#Top argC args'}
    (when inferT
      {.#Named name unnamedT}
      (general' variables archive analyse unnamedT args)

      {.#Universal _}
      (do phase.monad
        [[@variable :variable:] (/type.check check.var)]
        (general' (stack.partial @variable variables) archive analyse (maybe.trusted (type.applied (stack :variable:) inferT)) args))

      {.#Existential _}
      (do phase.monad
        [:ex: /type.existential]
        (general' variables archive analyse (maybe.trusted (type.applied (stack :ex:) inferT)) args))

      {.#Reification inputT transT}
      (when (type.applied (stack inputT) transT)
        {.#Some outputT}
        (general' variables archive analyse outputT args)

        {.#None}
        (/.except ..invalid_type_application [inferT]))

      ... Arguments are inferred back-to-front because, by convention,
      ... Lux functions take the most important arguments *last*, which
      ... means that the most information for doing proper inference is
      ... located in the last arguments to a function call.
      ... By inferring back-to-front, a lot of type-annotations can be
      ... avoided in Lux code, since the inference algorithm can piece
      ... things together more easily.
      {.#Function inputT outputT}
      (do phase.monad
        [[just_before variables outputT' args'A] (general' variables archive analyse outputT args')
         [here _] module.current
         argA (<| (/.with_exception ..cannot_infer_argument [here inputT (list.of_stack argC)])
                  (/type.expecting inputT)
                  (analyse archive argC))]
        (in [just_before variables outputT' (stack.partial argA args'A)]))

      {.#Variable infer_id}
      (do phase.monad
        [[here _] module.current
         ?inferT' (phase.try (/type.check (check.type infer_id)))]
        (when ?inferT'
          {try.#Success inferT'}
          (general' variables archive analyse inferT' args)

          _
          (/.except ..cannot_infer [here inferT (list.of_stack args)])))

      _
      (do phase.monad
        [[here _] module.current]
        (/.except ..cannot_infer [here inferT (list.of_stack args)])))
    ))

(the .public (general archive analyse inferT args)
  (-> Archive Phase Type (Stack Code)
      (Operation [Type (Stack /.Term)]))
  (do [! phase.monad]
    [[just_before variables :inference: terms] (general' (stack) archive analyse inferT args)]
    (in [:inference: terms])
    ... (when variables
    ...   (stack)
    ...   (in [:inference: terms])

    ...   _
    ...   (do !
    ...     [:inference: (/type.check
    ...                   (do [! check.monad]
    ...                     [quantifications (stack.mix' ! (function (_ @variable level)
    ...                                                     (do !
    ...                                                       [:variable: (check.try (check.identity variables @variable))]
    ...                                                       (when :variable:
    ...                                                         {try.#Success _}
    ...                                                         (in level)

    ...                                                         {try.#Failure _}
    ...                                                         (do !
    ...                                                           [.let [:variable: (|> level (n.* 2) ++ {.#Parameter})]
    ...                                                            _ (check.bind :variable: @variable)]
    ...                                                           (in (++ level))))))
    ...                                                 0
    ...                                                 variables)
    ...                      :inference:' (by ! each (type.univ_q quantifications) (check.clean variables :inference:))
    ...                      _ (check.with just_before)]
    ...                     (in :inference:')))
    ...      _ (/type.inference :inference:)]
    ...     (in [:inference: terms])))
    ))

(the (with_recursion @self recursion)
  (-> Natural Type Type
      Type)
  (function (again it)
    (`` (when it
          (^.or {.#Parameter index}
                {.#Reification {.#Nominal "" {.#Empty}}
                               {.#Parameter index}})
          (if (n.= @self index)
            recursion
            it)
          
          (,, (template.with [<tag>]
                [{<tag> left right}
                 {<tag> (again left) (again right)}]

                [.#Sum]
                [.#Product]
                [.#Function]
                [.#Reification]))
          
          (,, (template.with [<tag>]
                [{<tag> environment quantified}
                 {<tag> (stack#each again environment)
                        (with_recursion (n.+ 2 @self) recursion quantified)}]

                [.#Universal]
                [.#Existential]))
          
          {.#Nominal name parameters}
          {.#Nominal name (stack#each again parameters)}

          _
          it))))

(the parameters
  (-> Natural
      (Stack Type))
  (|>> stack.indices
       (stack#each (|>> (n.* 2) ++ {.#Parameter}))
       stack.reversed))

(template.with [<name> <types> <inputs> <exception> <when> <then>]
  [(`` (the .public (<name> (,, (template.spliced <inputs>)) complex)
         (-> (,, (template.spliced <types>)) Type
             (Operation Type))
         (loop (again [depth 0
                       it complex])
           (`` (when it
                 {.#Named name it}
                 (again depth it)

                 (,, (template.with [<tag>]
                       [{<tag> env it}
                        (phase#each (|>> {<tag> env})
                                    (again (++ depth) it))]

                       [.#Universal]
                       [.#Existential]))

                 {.#Reification parameter abstraction}
                 (when (type.applied (stack parameter) abstraction)
                   {.#Some it}
                   (again depth it)

                   {.#None}
                   (/.except ..invalid_type_application [it]))

                 {<when> _}
                 <then>

                 _
                 (/.except <exception> [complex]))))))]

  [record [Natural] [arity] ..not_a_record
   .#Product
   (let [[lefts right] (|> it
                           type.flat_tuple
                           (stack.split_at (-- arity)))]
     (phase#in (type.function
                 (stack#each (..with_recursion (|> depth -- (n.* 2)) complex)
                             (stack#composite lefts (stack (type.tuple right))))
                 (type.application (parameters depth) complex))))]
  [variant [Natural Bit] [lefts right?] ..not_a_variant
   .#Sum
   (|> it
       type.flat_variant
       (stack.after lefts)
       (pipe.when
         {.#Top [head tail]}
         (let [case (if right?
                      (type.variant tail)
                      head)]
           (-> (if (n.= 0 depth)
                 case
                 (..with_recursion (|> depth -- (n.* 2)) complex case))
               (type.application (parameters depth) complex)))

         {.#Empty}
         (-> .Nothing complex))
       phase#in)]
  )
