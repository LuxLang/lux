... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except variant tuple record general)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" pipe]
    ["[0]" maybe]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]:[0]" functor monoid)]
     ["[0]" stack (.use "[1]:[0]" functor)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   ["[0]" type (.only)
    ["[0]" check]]
   ["[0]" meta (.only)
    ["[0]" code]
    ["[0]" module]]
   [aspect
    ["[0]" view]]]]
 ["/" // (.only Operation Phase)
  ["[1][0]" type]
  [//
   ["[0]" phase (.use "[1]:[0]" monad)
    ["[0]" extension]]
   [///
    [meta
     [archive (.only Archive)]]
    ["@[0]" type]]]])

(exception.the .public (cannot_infer [module type arguments])
  (Exception [module.Name Type (List @type.Code)])
  (exception.report
   (list ["Type" (type.as_text type)]
         ["Arguments" (exception.listing (code.relative module) arguments)])))

(exception.the .public (cannot_infer_argument [module type argument])
  (Exception [module.Name Type @type.Code])
  (exception.report
   (list ["Type" (type.as_text type)]
         ["Argument" (code.relative module argument)])))

(template.with [<name>]
  [(exception.the .public (<name> type)
     (Exception Type)
     (exception.report
      (list ["Type" (type.as_text type)])))]

  [[not_a_variant]
   [not_a_record]
   [invalid_type_application]])

(the .public (quantified @variable @parameter :it:)
  (-> type.Variable Natural
      (Change Type))
  (`` (when :it:
        {.:Nominal name co_variant}
        {.:Nominal name (list:each (function (_ [polarity it])
                                     [polarity (quantified @variable @parameter it)])
                                   co_variant)}

        {.:Reification left right}
        {.:Reification (quantified @variable @parameter left)
                       (quantified @variable @parameter right)}
        
        {.:Variable .general @}
        (if (n.= @variable @)
            {.:Parameter .argument @parameter}
            :it:)

        {.:Quantification quantification env body}
        {.:Quantification quantification
                          (stack:each (function (_ [abstraction argument])
                                        [(quantified @variable @parameter abstraction)
                                         (quantified @variable @parameter argument)])
                                      env)
                          (quantified @variable (++ @parameter) body)}

        (^.or {.:Parameter _}
              {.:Variable .special _}
              {.:Named _})
        :it:)))

(the (cannot_infer! inference arguments)
  (-> Type (Stack @type.Code)
      (Operation Nothing))
  (monad.let phase.monad
    [here phase.name_of_current_module]
    (/.except ..cannot_infer [here inference (view.of list.stack arguments)])))

... Type-inference works by applying some (potentially quantified) type
... to a sequence of values.
... Function types are used for this, although inference is not always
... done for function application (alternative uses may be records and
... tagged variants).
... But, so long as the type being used for the inference can be treated
... as a function type, this method of inference should work.
(the .public (general archive analysis morphism args)
  (-> Archive Phase Type (Stack @type.Code)
      (Operation [Type (Stack /.Term)]))
  (when args
    {.:Empty}
    (monad.let phase.monad
      [_ (/type.inference morphism)]
      (pure [morphism (stack)]))
    
    {.:Top argC args'}
    (when morphism
      {.:Named name unnamedT}
      (general archive analysis unnamedT args)

      {.:Quantification .universal _}
      (monad.let phase.monad
        [[@variable :variable:] (/type.check check.var)]
        (general archive analysis
                 (maybe.trusted (type.reified (list :variable:) morphism))
                 args))

      {.:Quantification .existential _}
      (monad.let phase.monad
        [:ex: /type.existential]
        (general archive analysis
                 (maybe.trusted (type.reified (list (@type.old :ex:)) morphism))
                 args))

      {.:Reification inputT transT}
      (when (type.reified (list inputT) transT)
        {.:Some outputT}
        (general archive analysis outputT args)

        {.:None}
        (/.except ..invalid_type_application [morphism]))

      ... Arguments are inferred back-to-front because, by convention,
      ... Lux functions take the most important arguments *last*, which
      ... means that the most information for doing proper inference is
      ... located in the last arguments to a function call.
      ... By inferring back-to-front, a lot of type-annotations can be
      ... avoided in Lux code, since the inference algorithm can piece
      ... things together more easily.
      (type.Function inputT outputT)
      (monad.let phase.monad
        [[outputT' args'A] (general archive analysis outputT args')
         here phase.name_of_current_module
         argA (<| (/.with_exception ..cannot_infer_argument [here inputT argC])
                  (/type.with inputT)
                  (analysis archive argC))]
        (pure [outputT' (stack.partial argA args'A)]))

      {.:Variable .general morphism'}
      (monad.let phase.monad
        [morphism' (phase.try (/type.check (check.type morphism')))]
        (when morphism'
          {try.:Success morphism}
          (general archive analysis morphism args)

          _
          (cannot_infer! morphism args)))

      _
      (cannot_infer! morphism args))))

(the (with_recursion @self recursion)
  (-> Natural Type
      (Change Type))
  (function (again it)
    (`` (when it
          (^.or {.:Parameter .abstraction index}
                {.:Reification {.:Nominal "" (list)}
                               {.:Parameter .abstraction index}})
          (if (n.= @self index)
              recursion
              it)
          
          {.:Reification left right}
          {.:Reification (again left) (again right)}
          
          {.:Quantification quantification environment quantified}
          {.:Quantification quantification
                            (stack:each (function (_ [abstraction argument])
                                          [(again abstraction)
                                           (again argument)])
                                        environment)
                            (with_recursion (++ @self) recursion quantified)}
          
          {.:Nominal name parameters}
          {.:Nominal name (list:each (function (_ [polarity it])
                                       [polarity (again it)])
                                     parameters)}

          _
          it))))

(the parameters
  (-> Natural
      (List Type))
  (|>> list.domain
       (list:each (|>> {.:Parameter .argument}))
       list.in_reverse))

(template.with [<name> <types> <inputs> <exception> <when> <then>]
  [(`` (the .public (<name> (,, (template.spliced <inputs>)) complex)
         (-> (,, (template.spliced <types>)) Type
             (Operation Type))
         (loop (again [depth 0
                       it complex])
           (`` (when it
                 {.:Named name it}
                 (again depth it)

                 {.:Quantification quantification env it}
                 (phase:each (|>> {.:Quantification quantification env})
                             (again (++ depth) it))

                 {.:Reification parameter abstraction}
                 (when (type.reified (list parameter) abstraction)
                   {.:Some it}
                   (again depth it)

                   {.:None}
                   (/.except ..invalid_type_application [it]))

                 (<when> _ _)
                 <then>

                 _
                 (/.except <exception> [complex]))))))]

  [[record [Natural] [arity] ..not_a_record
    type.Product
    (let [[lefts right] (|> it
                            type.flat_tuple
                            (list.split (-- arity)))]
      (phase:pure (type.function
                    (list:each (..with_recursion (-- depth) complex)
                               (list:composite lefts (list (type.tuple right))))
                    (type.reification (parameters depth) complex))))]
   [variant [Natural Bit] [lefts right?] ..not_a_variant
    type.Sum
    (|> it
        type.flat_variant
        (list.after lefts)
        (view.as list.stack)
        (pipe.when
          {.:Top head tail}
          (let [case (if right?
                         (type.variant (view.of list.stack tail))
                         head)]
            (-> (if (n.= 0 depth)
                    case
                    (..with_recursion (-- depth) complex case))
                (type.reification (parameters depth) complex)))

          {.:Empty}
          (-> .Nothing complex))
        phase:pure)]])
