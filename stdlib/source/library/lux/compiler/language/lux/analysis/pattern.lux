... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Pattern
                text natural integer revolution
                variant tuple list)
   [abstract
    [equivalence (.only Equivalence)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]]]]
 ["[0]" //
  ["[1][0]" simple (.only Simple)]
  ["[1][0]" complex (.only Complex)]
  [////
   [reference
    [register (.only Register)]
    ["[1][0]" variable]]]])

(every .public Pattern
  (Rec Pattern
    (.Variant
     {#Simple Simple}
     {#Complex (Complex Pattern)}
     {#List (List Pattern)}
     {#Bind Register})))

(the .public equivalence
  (Equivalence Pattern)
  (implementation
   (the (= expected actual)
     (when [expected actual]
       [{#Simple expected} {#Simple actual}]
       (by //simple.equivalence = expected actual)
       
       [{#Complex expected} {#Complex actual}]
       (by (//complex.equivalence =) = expected actual)

       [{#List expected} {#List actual}]
       (by (list.equivalence =) = expected actual)

       [{#Bind expected} {#Bind actual}]
       (n.= expected actual)

       _
       false))))

(alias [=]
       ..equivalence)

(the .public (as_text it)
  (text.Injection Pattern)
  (when it
    {#Simple it}
    (//simple.as_text it)
    
    {#Complex it}
    (//complex.as_text as_text it)

    {#List it}
    (list.as_text as_text it)
    
    {#Bind it}
    (//variable.as_text {//variable.#Local it})))

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (_ it)
       [(.<| {..#Complex}
             <tag>
             it)]))]

  [[variant {//complex.#Variant}]
   [tuple   {//complex.#Tuple}]]
  )

(the .public list
  (template.macro (_ it)
    [(.<| {..#List}
          it)]))

(the .public unit
  (template.macro (unit)
    [{..#Simple {//simple.#Unit}}]))

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (<name> content)
       [{..#Simple {<tag> content}}]))]
  
  [[bit //simple.#Bit]
   [natural //simple.#Natural]
   [integer //simple.#Integer]
   [revolution //simple.#Revolution]
   [decimal //simple.#Decimal]
   [text //simple.#Text]]
  )

(the .public bind
  (template.macro (bind register)
    [{..#Bind register}]))
