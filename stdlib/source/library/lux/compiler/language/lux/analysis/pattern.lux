... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Pattern
                text natural integer revolution
                variant tuple list)
   [abstract
    [equivalence (.only Equivalence)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]]
   [compiler
    ["@[0]" type (.only Pattern)]]]]
 ["[0]" //
  ["[1][0]" simple]
  ["[1][0]" complex]
  [////
   [reference
    ["[1][0]" variable]]]])

(the .public equivalence
  (Equivalence Pattern)
  (implementation
   (the (= expected actual)
     (when [expected actual]
       [{@type.#Simple_Pattern expected}
        {@type.#Simple_Pattern actual}]
       (by //simple.equivalence = expected actual)
       
       [{@type.#Complex_Pattern expected}
        {@type.#Complex_Pattern actual}]
       (by (//complex.equivalence =) = expected actual)

       [{@type.#List_Pattern expected}
        {@type.#List_Pattern actual}]
       (by (list.equivalence =) = expected actual)

       [{@type.#Bind_Pattern expected}
        {@type.#Bind_Pattern actual}]
       (n.= expected actual)

       _
       false))))

(alias [=]
       ..equivalence)

(the .public (as_text it)
  (text.Injection Pattern)
  (when it
    {@type.#Simple_Pattern it}
    (//simple.as_text it)
    
    {@type.#Complex_Pattern it}
    (//complex.as_text as_text it)

    {@type.#List_Pattern it}
    (list.as_text as_text it)
    
    {@type.#Bind_Pattern it}
    (//variable.as_text {@type.#Local it})))

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (_ it)
       [(.<| {@type.#Complex_Pattern}
             <tag>
             it)]))]

  [[variant {@type.#Complex_Variant}]
   [tuple   {@type.#Complex_Tuple}]])

(the .public list
  (template.macro (_ it)
    [(.<| {@type.#List_Pattern}
          it)]))

(the .public unit
  (template.macro (_)
    [{@type.#Simple_Pattern {@type.#Simple_Unit}}]))

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (_ content)
       [{@type.#Simple_Pattern {<tag> content}}]))]
  
  [[bit @type.#Simple_Bit]
   [natural @type.#Simple_Natural]
   [integer @type.#Simple_Integer]
   [revolution @type.#Simple_Revolution]
   [decimal @type.#Simple_Decimal]
   [text @type.#Simple_Text]])

(the .public bind
  (template.macro (bind register)
    [{@type.#Bind_Pattern register}]))
