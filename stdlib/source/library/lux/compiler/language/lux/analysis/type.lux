... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except existential with)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   ["[0]" function (.only)
    [predicate (.only Predicate)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   ["[0]" type (.only)
    ["[0]" check (.only Check)]]
   ["[0]" meta (.only)
    ["[0]" name]
    ["[0]" module]]
   [compiler
    ["@[0]" type]]]]
 ["/" // (.only Operation)
  [//
   ["[0]" phase]]])

(the .public (check action)
  (for_any (_ it)
    (-> (Check it)
        (Operation it)))
  (function (_ state)
    (when (action (@type.old_context (its @type.#type_context state)))
      {try.#Success [context' output]}
      {try.#Success [(has @type.#type_context (@type.new_context context') state)
                     output]}

      {try.#Failure error}
      ((/.failure error) state))))

(the prefix
  (text (name.as_text (name ..type)) "#"))

(the .public (existential? type)
  (Predicate @type.Type)
  (when type
    {@type.#Nominal actual (list)}
    (text.starts_with? ..prefix actual)

    _
    false))

(the (existential' module id)
  (-> @type.Name_Of_Module Natural
      @type.Type)
  {@type.#Nominal (text ..prefix module "#" (%.natural id)) (list)})

(the .public existential
  (Operation @type.Type)
  (monad.let [! phase.monad]
    [module phase.name_of_current_module]
    (by ! each (..existential' module)
        /.seed)))

(the .public (with expected)
  (for_any (_ it)
    (-> .Type
        (Change (Operation it))))
  (phase.localized (its @type.#expected)
                   (has @type.#expected)
                   (function.constant {.#Some (@type.new expected)})))

(the .public fresh
  (for_any (_ it)
    (Change (Operation it)))
  (phase.localized (its @type.#type_context)
                   (has @type.#type_context)
                   (function.constant (@type.new_context check.fresh_context))))

(the .public (inference actualT)
  (-> .Type
      (Operation Any))
  (monad.let phase.monad
    [expectedT /.expected_type]
    (..check (check.check (@type.old expectedT) actualT))))

(the .public (with_var it)
  (for_any (_ it)
    (-> (-> [type.Variable .Type]
            (Operation it))
        (Operation it)))
  (monad.let phase.monad
    [type_of_it (..check check.var)
     it (it type_of_it)]
    (pure it)))

(the .public (inferring action)
  (for_any (_ it)
    (-> (Operation it)
        (Operation [.Type it])))
  (<| ..with_var
      (function (_ [@it :it:]))
      (monad.let phase.monad
        [it (..with :it:
              action)
         :it: (..check (check.identity (list) @it))]
        (pure [:it: it]))))
