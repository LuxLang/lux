... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except existential)
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   ["[0]" function (.only)
    [predicate (.only Predicate)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    [number
     ["n" natural]]]
   ["[0]" type (.only)
    ["[0]" check (.only Check)]]
   ["[0]" meta (.only)
    ["[0]" name]
    ["[0]" module]]
   [compiler
    ["@[0]" type]]]]
 ["/" // (.only Operation)
  [//
   ["[0]" phase]]])

(the .public (check action)
  (for_any (_ it)
    (-> (Check it)
        (Operation it)))
  (function (_ state)
    (when (action (its @type.#type_context state))
      {try.#Success [context' output]}
      {try.#Success [(has .#type_context context' state)
                     output]}

      {try.#Failure error}
      ((/.failure error) state)
      )))

(the prefix
  (text (name.as_text (name ..type)) "#"))

(the .public (existential? type)
  (Predicate @type.Type)
  (when type
    {@type.#Nominal actual (list)}
    (text.starts_with? ..prefix actual)

    _
    false))

(the (existential' module id)
  (-> Text Natural
      @type.Type)
  {@type.#Nominal (text ..prefix module "#" (%.natural id)) (list)})

(the .public existential
  (Operation @type.Type)
  (do [! phase.monad]
    [module module.current_name]
    (by ! each (..existential' module) meta.seed)))

(the .public (expecting expected)
  (for_any (_ it)
    (-> .Type
        (Change (Operation it))))
  (phase.localized (its @type.#expected)
                   (has @type.#expected)
                   (function.constant {.#Some expected})))

(the .public fresh
  (for_any (_ it)
    (Change (Operation it)))
  (phase.localized (its @type.#type_context)
                   (has @type.#type_context)
                   (function.constant check.fresh_context)))

(the .public (inference actualT)
  (-> .Type
      (Operation Any))
  (do phase.monad
    [expectedT meta.expected_type]
    (..check (check.check expectedT actualT)
             ... (do [! check.monad]
             ...   [pre check.context
             ...    it (check.check expectedT actualT)
             ...    post check.context
             ...    .let [pre#var_counter (its .#var_counter pre)]]
             ...   (if (n.< (its .#var_counter post)
             ...            pre#var_counter)
             ...     (do !
             ...       [.let [new! (is (-> [Natural (Maybe Type)] (Maybe Natural))
             ...                      (function (_ [id _])
             ...                        (if (n.< id pre#var_counter)
             ...                          {.#Some id}
             ...                          {.#None})))
             ...              new_vars (|> post
             ...                           (its .#var_bindings)
             ...                           (stack.all new!))]
             ...        _ (stack.each' ! (function (_ @new)
             ...                          (do !
             ...                            [:new: (check.try (check.identity new_vars @new))]
             ...                            (when :new:
             ...                              {try.#Success :new:}
             ...                              (in :new:)
             
             ...                              {try.#Failure error}
             ...                              (do !
             ...                                [[id _] check.existential
             ...                                 .let [:new: (..existential' module id)]
             ...                                 _ (check.bind :new: @new)]
             ...                                (in :new:)))))
             ...                      new_vars)
             ...        expectedT' (check.clean new_vars expectedT)
             ...        _ (check.with pre)]
             ...       (check.check expectedT' actualT))
             ...     (in it)))
             )))

(the .public (with_var it)
  (for_any (_ it)
    (-> (-> [type.Variable .Type]
            (Operation it))
        (Operation it)))
  (do phase.monad
    [@it,:it: (..check check.var)
     it (it @it,:it:)
     .let [[@it :it:] @it,:it:]
     _ (..check (check.forget! @it))]
    (in it)))

(the .public (inferring action)
  (for_any (_ it)
    (-> (Operation it)
        (Operation [.Type it])))
  (<| ..with_var
      (function (_ [@it :it:]))
      (do phase.monad
        [it (..expecting :it: action)
         :it: (..check (check.identity (stack) @it))]
        (in [:it: it]))))
