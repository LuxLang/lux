... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Variant Pattern
                #Bit #Natural #Integer #Revolution #Decimal #Text #Variant)
   [abstract
    [equivalence (.only Equivalence)]
    ["[0]" monad]]
   [control
    ["[0]" maybe (.use "[1]:[0]" monoid monad)]]
   [function
    [predicate (.only Predicate)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]:[0]" functor mix)]
     ["[0]" stack]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" set (.only Set)]]]
   [logic
    ["[0]" bit]]
   [math
    [number
     [/64
      ["n" natural (.use "[1]:[0]" interval)]
      ["i" integer]
      ["r" revolution]
      ["d" decimal]]]]
   [macro
    ["^" pattern]
    ["[0]" template]
    ["[0]" expansion]]
   [aspect
    ["[0]" view]]
   [compiler
    ["@[0]" type (.only Pattern)]]]]
 ["[0]" //
  ["[1][0]" simple]
  ["[1][0]" complex]])

... The coverage of a pattern-matching expression summarizes how well
... all the possible values of an input are being covered by the
... different patterns involved.
... Ideally, the pattern-matching has "exhaustive" coverage, which just
... means that every possible value can be matched by at least 1
... pattern.
... Every other coverage is considered partial, and it would be valued
... as insuficient (since it could lead to runtime errors due to values
... not being handled by any pattern).
(template.let [(Variant' @)
               [[(Maybe Natural) (Dictionary Natural @)]]]
  (these (every .public (Coverage _)
           (.Variant
            {#Exhaustive}
            {#Bit Bit}
            {#Natural (Set Natural)}
            {#Integer (Set Integer)}
            {#Revolution (Set Revolution)}
            {#Decimal (Set Decimal)}
            {#Text (Set Text)}
            {#Variant (Variant' (Coverage _))}
            {#List (List (Coverage _))}
            {#Seq (Coverage _) (Coverage _)}
            {#Alt (Coverage _) (Coverage _)}))

         (every .public Variant
           (Variant' Coverage))))

(the .public (minimum [maximum cases])
  (-> Variant
      Natural)
  (maybe.else (|> cases
                  dictionary.domain
                  (list:mix n.major 0)
                  ++)
              maximum))

(the .public (maximum [maximum cases])
  (-> Variant
      Natural)
  (maybe.else n:maximum maximum))

(the (alternatives coverage)
  (-> Coverage
      (Stack Coverage))
  (when coverage
    {#Alt left right}
    (stack.partial left (alternatives right))

    _
    (stack coverage)))

(the .public equivalence
  (Equivalence Coverage)
  (implementation
   (the (= expected actual)
     (`` (when [expected actual]
           [{#Exhaustive} {#Exhaustive}]
           true

           [{#Bit sideR} {#Bit sideS}]
           (bit.= sideR sideS)

           (,, (template.with [<tag>]
                 [[{<tag> partialR} {<tag> partialS}]
                  (set.= partialR partialS)]

                 [[#Natural]
                  [#Integer]
                  [#Revolution]
                  [#Decimal]
                  [#Text]]))

           [{#Variant allR casesR} {#Variant allS casesS}]
           (and (by (maybe.equivalence n.equivalence) = allR allS)
                (by (dictionary.equivalence =) = casesR casesS))

           [{#List reference} {#List it}]
           (by (list.equivalence =) = reference it)
           
           [{#Seq leftR rightR} {#Seq leftS rightS}]
           (and (= leftR leftS)
                (= rightR rightS))

           [{#Alt _} {#Alt _}]
           (let [flatR (alternatives expected)
                 flatS (alternatives actual)]
             (and (n.= (stack.size flatR) (stack.size flatS))
                  (list.every? (function (_ [coverageR coverageS])
                                 (= coverageR coverageS))
                               (list.zipped_2 (view.of list.stack flatR)
                                              (view.of list.stack flatS)))))

           _
           false)))))

(alias [=]
       ..equivalence)

(the .public (as_text value)
  (text.Injection Coverage)
  (`` (when value
        {#Bit it}
        (bit.as_text it)

        (,, (template.with [<tag> <injection>]
              [{<tag> it}
               (|> it
                   set.as_list
                   (list:each <injection>)
                   (text.interposed " ")
                   (text.enclosed ["[" "]"]))]

              [[#Natural %.natural]
               [#Integer %.integer]
               [#Revolution %.revolution]
               [#Decimal %.decimal]
               [#Text %.text]]))
        
        {#Variant ?max_cases cases}
        (|> cases
            dictionary.entries
            (list:each (function (_ [tag it])
                         (text (%.natural tag) " " (as_text it))))
            (text.interposed " ")
            (text (maybe.else "?" (maybe:each %.natural ?max_cases)) " ")
            (text.enclosed ["{" "}"]))

        {#List it}
        (|> it
            (list:each as_text)
            (text.interposed " ")
            (text.enclosed ["(list " ")"]))

        {#Seq left right}
        (text "(& " (as_text left) " " (as_text right) ")")
        
        {#Alt left right}
        (text "(| " (as_text left) " " (as_text right) ")")

        {#Exhaustive}
        "*")))

(exception.the .public (invalid_tuple size)
  (Exception Natural)
  (exception.report
   (list ["Expected size" ">= 2"]
         ["Actual size" (%.natural size)])))

(the .public (coverage pattern)
  (-> Pattern
      (Try Coverage))
  (`` (when pattern
        (^.or {@type.#Simple_Pattern {@type.#Simple_Unit}}
              {@type.#Bind_Pattern _})
        {try.#Success {#Exhaustive}}

        ... Simple patterns (other than unit/[]) always have partial coverage because there
        ... are too many possibilities as far as values go.
        (,, (template.with [<from> <to> <hash>]
              [{@type.#Simple_Pattern {<from> it}}
               {try.#Success {<to> (set.of_list <hash> (list it))}}]

              [[@type.#Simple_Natural #Natural n.hash]
               [@type.#Simple_Integer #Integer i.hash]
               [@type.#Simple_Revolution #Revolution r.hash]
               [@type.#Simple_Decimal #Decimal d.hash]
               [@type.#Simple_Text #Text text.hash]]))

        ... Bits are the exception, since there is only "0b" and
        ... "1b", which means it is possible for bit
        ... pattern-matching to become exhaustive if complementary parts meet.
        {@type.#Simple_Pattern {@type.#Simple_Bit value}}
        {try.#Success {#Bit value}}

        ... Tuple patterns can be exhaustive if there is exhaustiveness for all of
        ... their sub-patterns.
        {@type.#Complex_Pattern {@type.#Complex_Tuple membersP+}}
        (when (list.in_reverse membersP+)
          (^.or (list)
                (list _))
          (exception.except ..invalid_tuple [(list.size membersP+)])
          
          members
          (list.mix' try.monad
                     (function (_ leftP rightC)
                       (monad.let try.monad
                         [leftC (coverage leftP)]
                         (when rightC
                           {#Exhaustive}
                           (pure leftC)

                           _
                           (pure {#Seq leftC rightC}))))
                     {#Exhaustive}
                     members))

        {@type.#List_Pattern it}
        (|> it
            (list.each' try.monad coverage)
            (by try.monad each (|>> {#List})))

        ... Variant patterns can be shown to be exhaustive if all the possible
        ... cases are handled exhaustively.
        {@type.#Complex_Pattern {@type.#Complex_Variant [lefts right? value]}}
        (monad.let try.monad
          [value_coverage (coverage value)
           .let [idx (if right?
                         (++ lefts)
                         lefts)]]
          (pure {#Variant (if right?
                              {.#Some (++ idx)}
                              {.#None})
                          (|> (dictionary.empty n.hash)
                              (dictionary.has idx value_coverage))})))))

(the (xor left right)
  (-> Bit Bit
      Bit)
  (not (bit.= left right)))

... The coverage checker not only verifies that pattern-matching is
... exhaustive, but also that there are no redundant patterns.
... Redundant patterns will never be executed, since there will
... always be a pattern prior to them that would match the input.
... Because of that, the presence of redundant patterns is assumed to
... be a bug, likely due to programmer carelessness.
(exception.the .public (redundancy [so_far addition])
  (Exception [Coverage Coverage])
  (exception.report
   (list ["Coverage so-far" (as_text so_far)]
         ["Additional coverage" (as_text addition)])))

(exception.the .public (variant_mismatch [expected mismatched])
  (Exception [Natural Natural])
  (exception.report
   (list ["Expected cases" (%.natural expected)]
         ["Mismatched cases" (%.natural mismatched)])))

(the .public (exhaustive? coverage)
  (-> Coverage Bit)
  (when coverage
    {#Exhaustive}
    true

    _
    false))

... After determining the coverage of each individual pattern, it is
... necessary to merge them all to figure out if the entire
... pattern-matching expression is exhaustive and whether it contains
... redundant patterns.
(the .public (composite addition so_far)
  (-> Coverage Coverage
      (Try Coverage))
  (expansion.let [<redundancy> (exception.except ..redundancy [so_far addition])
                  <alternatively> {try.#Success {#Alt addition so_far}}
                  <else> (if (= so_far addition)
                             ... The addition cannot possibly improve the coverage.
                             <redundancy>
                             ... There are now 2 alternative paths.
                             <alternatively>)]
    (`` (when [addition so_far]
          ... 2 bit coverages are exhaustive if they complement one another.
          [{#Bit sideA} {#Bit sideSF}]
          (if (xor sideA sideSF)
              {try.#Success {#Exhaustive}}
              <redundancy>)

          (,, (template.with [<tag>]
                [[{<tag> partialA} {<tag> partialSF}]
                 (if (set.empty? (set.intersection partialA partialSF))
                     {try.#Success {<tag> (set.union partialA partialSF)}}
                     <redundancy>)]

                [[#Natural]
                 [#Integer]
                 [#Revolution]
                 [#Decimal]
                 [#Text]]))

          [{#Variant addition'} {#Variant so_far'}]
          (let [[allA casesA] addition'
                [allSF casesSF] so_far'
                addition_cases (..maximum addition')
                so_far_cases (..maximum so_far')]
            (if (template.let [(known_cases? it)
                               [(n.< n:maximum it)]]
                  (and (known_cases? so_far_cases)
                       (if (known_cases? addition_cases)
                           (not (n.= so_far_cases addition_cases))
                           (n.> so_far_cases (..minimum addition')))))
                (exception.except ..variant_mismatch [so_far_cases addition_cases])

                (by (dictionary.equivalence ..equivalence) = casesSF casesA)
                <redundancy>

                ... else
                (monad.let [! try.monad]
                  [casesM (list.mix' !
                                     (function (_ [tagA coverageA] casesSF')
                                       (when (dictionary.value tagA casesSF')
                                         {try.#Success coverageSF}
                                         (monad.let !
                                           [coverageM (composite coverageA coverageSF)]
                                           (pure (dictionary.has tagA coverageM casesSF')))

                                         {try.#Failure _}
                                         (pure (dictionary.has tagA coverageA casesSF'))))
                                     casesSF
                                     (dictionary.entries casesA))]
                  (pure (if (and (n.= (n.minor addition_cases so_far_cases)
                                      (dictionary.size casesM))
                                 (list.every? ..exhaustive? (dictionary.values casesM)))
                            {#Exhaustive}
                            {#Variant (maybe:composite allA allSF) casesM})))))

          [{#List addition'} {#List so_far'}]
          (if (n.= (list.size addition')
                   (list.size so_far'))
              (let [composites (|> (list.zipped_2 addition' so_far')
                                   (list:each (function (_ [addition' so_far'])
                                                [(composite addition' so_far')
                                                 so_far'])))

                    redundant? (is (Predicate [(Try Coverage)
                                               Coverage])
                                   (|>> product.left (match? {try.#Failure _})))
                    complete_redundancy! (list.every? redundant? composites)]
                (if complete_redundancy!
                    <redundancy>
                    (|> composites
                        (list:each (function (_ [composite so_far])
                                     (try.else so_far composite)))
                        {#List}
                        {try.#Success})))
              <else>)

          [{#Seq leftA rightA} {#Seq leftSF rightSF}]
          (when [(= leftSF leftA) (= rightSF rightA)]
            ... Same prefix
            [.true .false]
            (monad.let try.monad
              [rightM (composite rightA rightSF)]
              (pure (if (..exhaustive? rightM)
                        ... If all that follows is exhaustive, then it can be safely dropped
                        ... (since only the "left" part would influence whether the
                        ... composite coverage is exhaustive or not).
                        leftSF
                        {#Seq leftSF rightM})))

            ... Same suffix
            [.false .true]
            (monad.let try.monad
              [leftM (composite leftA leftSF)]
              (pure {#Seq leftM rightA}))

            ... The 2 sequences cannot possibly be merged.
            [.false .false]
            <alternatively>

            ... There is nothing the addition adds to the coverage.
            [.true .true]
            <redundancy>)

          ... The addition cannot possibly improve the coverage.
          [_ {#Exhaustive}]
          <redundancy>

          ... The addition completes the coverage.
          [{#Exhaustive} _]
          {try.#Success {#Exhaustive}}
          
          ... When merging a new coverage against one based on Alt, it may be
          ... that one of the many coverages in the Alt is complementary to
          ... the new one, so effort must be made to fuse carefully, to match
          ... the right coverages together.
          ... If one of the Alt sub-coverages matches the new one, the cycle
          ... must be repeated, in case the resulting coverage can now match
          ... other ones in the original Alt.
          ... This process must be repeated until no further productive
          ... merges can be done.
          [_ {#Alt leftS rightS}]
          (monad.let [! try.monad]
            [.let [fuse_once (is (-> Coverage (Stack Coverage)
                                     (Try [(Maybe Coverage)
                                           (Stack Coverage)]))
                                 (function (_ coverageA possibilitiesSF)
                                   (loop (again [altsSF possibilitiesSF])
                                     (when altsSF
                                       {.#Empty}
                                       (pure [{.#None} (stack coverageA)])
                                       
                                       {.#Top altSF altsSF'}
                                       (monad.let !
                                         [altMSF (composite coverageA altSF)]
                                         (when altMSF
                                           {#Alt _}
                                           (monad.let !
                                             [[success altsSF+] (again altsSF')]
                                             (pure [success {.#Top altSF altsSF+}]))

                                           _
                                           (pure [{.#Some altMSF} altsSF'])))))))]]
            (loop (again [addition addition
                          possibilitiesSF (alternatives so_far)])
              (monad.let !
                [[addition' possibilitiesSF'] (fuse_once addition possibilitiesSF)]
                (when addition'
                  {.#Some addition'}
                  (again addition' possibilitiesSF')
                  
                  {.#None}
                  (when (stack.in_reverse possibilitiesSF')
                    {.#Top last prevs}
                    (pure (stack.mix (function (_ left right) {#Alt left right})
                                     last
                                     prevs))

                    {.#Empty}
                    (undefined))))))

          ... The left part will always match, so the addition is redundant.
          [{#Seq left right} single]
          (if (= left single)
              <redundancy>
              <else>)

          ... The right part is not necessary, since it can always match the left.
          [single {#Seq left right}]
          (if (= left single)
              {try.#Success single}
              <else>)

          _
          <else>))))
