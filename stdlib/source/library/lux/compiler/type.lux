... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Name Type
                Bit
                Text text
                Decimal
                I64 i64
                Natural natural
                Integer integer
                Revolution revolution
                Tag Slot
                List list
                Macro macro)
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor)
      ["[0]" property]]]]
   [meta
    ["[0]" name]]]])

(the .public prefix
  name.delimiter)

(every .public Name
  (Record
   [#alias .Text
    #name .Text]))

(the expansion#let (.in_module# .prelude .expansion#let))
(the with_template (.in_module# .prelude .with_template))

(expansion#let [,each_simple (these [bit Bit]
                                    [decimal Decimal]
                                    [text Text]
                                    [tag Tag]
                                    [slot Slot]
                                    [macro Macro])
                ,each_complex (these [i64 I64]
                                     [list List])
                ,each_integer (these [natural Natural]
                                     [integer Integer]
                                     [revolution Revolution])
                ,each (these ,each_simple
                             ,each_complex
                             ,each_integer)
                ,each_name (with_template [,name ,type]
                             [,name]
                             
                             ,each
                             )]
               (these (with_template [,name ,type]
                        [(the .public ,name
                           Name
                           (let [proper (name.proper (.name ,name))]
                             [#alias proper
                              #name (.text ..prefix proper)]))]

                        ,each
                        )
                      (with_template [,name ,type]
                        [(the .public ,type
                           .Type
                           {.#Nominal (its #name ,name) (stack)})]

                        ,each_simple
                        )
                      (with_template [,name ,type]
                        [(the .public ,type
                           .Type
                           (for_any (_ it)
                             {.#Nominal (its #name ,name) (stack it)}))]

                        ,each_complex
                        )
                      (with_template [,name ,type]
                        [(the .public ,type
                           .Type
                           {.#Nominal (its #name ..i64)
                                      (stack {.#Nominal (its #name ,name) (stack)})})]

                        ,each_integer
                        )
                      (the .public each
                        (property.List .Text)
                        (.list ,each_name))
                      ))

(the .public Type
  (type (Rec Type
          (Or
           ... #Nominal
           (And ..Text (Stack Type))
           ... #Sum
           (And Type Type)
           ... #Product
           (And Type Type)
           ... #Function
           (And Type Type)
           ... #Parameter
           ..Natural
           ... #Variable
           ..Natural
           ... #Opaque
           ..Natural
           ... #Universal
           (Quantification Type)
           ... #Existential
           (Quantification Type)
           ... #Reification
           (And Type Type)
           ... #Named
           (And (And ..Text ..Text) Type)))))
