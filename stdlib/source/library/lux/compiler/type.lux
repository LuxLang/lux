... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Module Name
                Bit
                Text text
                Decimal
                I64 i64
                Natural natural
                Integer integer
                Revolution revolution
                Label Tag Slot
                List list
                Macro macro
                Array

                function
                Type
                #Nominal #Parameter #Variable #Quantification #Reification #Named

                Provenance
                Code
                #Bit #Natural #Integer #Revolution #Decimal #Text #Name #Form #Variant #Tuple

                Maybe
                Info
                #target #version #mode #configuration
                Definition Alias
                Global
                #Definition #Alias
                Module
                #module_hash #module_aliases #definitions #imports #module_state
                Bindings
                #counter #mappings
                Scope
                #locals #captured
                Type_Context
                #for_all #there_exists
                Lux
                #info #source #provenance
                #current_module #modules #scopes
                #type_context #expected #seed
                #eval

                Meta

                Variant Tuple

                #Local
                #Variable

                Pattern)
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor)]
     ["[0]" list (.use "[1]#[0]" functor)
      ["[0]" property (.use "[1]#[0]" functor)]]]]
   [meta
    ["[0]" name]]
   ["[0]" function]
   [math
    [number
     [/64
      ["n" natural]]]]]])

(the prefix
  name.delimiter)

(every .public Identity
  (Record
   [#alias .Text
    #real_name .Text]))

(the expansion#let (.in_module# .prelude expansion#let))
(the with_template (.in_module# .prelude with_template))
(the template#macro (.in_module# .prelude template#macro))

(with_template [,name ,pre_processing]
  [(the ,name
     (.macro (_ it state)
       (when it
         (.list {.#Name @ ["" it]})
         {.#Right [state (.list {.#Text @ (|> it ,pre_processing)})]}

         _
         {.#Left .wrong_syntax})))]

  [[alias_of_type |>]
   [name_of_type (.text ..prefix)]])

(expansion#let [,each_simple (these [bit Bit .co_variant .co_variant]
                                    [decimal Decimal .co_variant .co_variant]
                                    [text Text .co_variant .co_variant]
                                    [tag Tag .co_variant .co_variant]
                                    [slot Slot .co_variant .co_variant]
                                    [macro Macro .co_variant .co_variant]
                                    [eval Eval .co_variant .co_variant])
                ,each_complex (these [i64 I64 .co_variant .co_variant]
                                     [list List .co_variant .co_variant])
                ,each_integer (these [natural Natural .co_variant .co_variant]
                                     [integer Integer .co_variant .co_variant]
                                     [revolution Revolution .co_variant .co_variant])
                ,each_1 (these [default Default .co_variant .co_variant])
                ,each_2 (these [sum Sum .co_variant .co_variant]
                               [product Product .co_variant .co_variant]
                               [function Function .contra_variant .co_variant]
                               [array Array .contra_variant .co_variant])
                ,each (these ,each_simple
                             ,each_complex
                             ,each_integer
                             ,each_1
                             ,each_2)
                ,each_name (with_template [,name ,type ,left_polarity ,right_polarity]
                             [,name]
                             
                             [,each])]
               (these (with_template [,name ,type ,left_polarity ,right_polarity]
                        [(the .public ,name
                           Identity
                           [#alias (..alias_of_type ,name)
                            #real_name (..name_of_type ,name)])]

                        [,each])
                      (with_template [,name ,type ,left_polarity ,right_polarity]
                        [(the .public ,type
                           .Type
                           {.#Nominal (its #real_name ,name) (.list)})]

                        [,each_simple])
                      (with_template [,name ,type ,left_polarity ,right_polarity]
                        [(the .public ,type
                           .Type
                           (for_any (_ it)
                             {.#Nominal (its #real_name ,name) (.list [.co_variant it])}))]

                        [,each_complex])
                      (with_template [,name ,type ,left_polarity ,right_polarity]
                        [(the .public ,type
                           .Type
                           {.#Nominal (its #real_name ..i64)
                                      (.list [.co_variant {.#Nominal (its #real_name ,name) (.list)}])})]

                        [,each_integer])
                      (with_template [,name ,type ,left_polarity ,right_polarity]
                        [(`` (the .public ,type
                               (<| (template#macro (_ ,it))
                                   [{.#Nominal (,, (name_of_type ,name))
                                               (.list [(,, (static ,left_polarity)) ,it])}])))]

                        [,each_1])
                      (with_template [,name ,type ,left_polarity ,right_polarity]
                        [(`` (the .public ,type
                               (<| (template#macro (_ ,left ,right))
                                   [{.#Nominal (,, (name_of_type ,name))
                                               (.list [(,, (static ,left_polarity)) ,left]
                                                      [(,, (static ,right_polarity)) ,right])}])))]

                        [,each_2])
                      (the .public each_name
                        (property.List .Text)
                        (.list ,each_name))
                      ))

(the .public Name_Of_Module
  ..Text)

(the .public Name
  (And ..Name_Of_Module ..Text))

(`` (the List'
      (<| (template#macro (_ ,it))
          [{.#Nominal (its #real_name ..list) (.list [(,, (static .co_variant)) ,it])}])))

(every .public (Type _)
  (.Variant
   {#Nominal ..Text (..List' [.Polarity (Type _)])}
   {#Parameter .Parameter ..Natural}
   {#Variable .Quality ..Natural}
   {#Quantification .Quantification (.Stack [(Type _) (Type _)]) (Type _)}
   {#Reification (Type _) (Type _)}
   {#Named ..Name (Type _)}))

(the .public Character
  .Type
  ..Natural)

(the .public Provenance
  .Type
  (And ..Name_Of_Module ..Natural ..Natural))

(the Code'
  (<| (template#macro (_ ,it))
      [(And ..Provenance ,it)]))

(every .public (Code _)
  (.Variant
   {#Bit (Code' ..Bit)}
   {#Natural (Code' ..Natural)}
   {#Integer (Code' ..Integer)}
   {#Revolution (Code' ..Revolution)}
   {#Decimal (Code' ..Decimal)}
   {#Text (Code' ..Text)}
   {#Name (Code' ..Name)}
   {#Form (Code' (List' (Code _)))}
   {#Variant (Code' (List' (Code _)))}
   {#Tuple (Code' (List' (Code _)))}))

(the Maybe
  (<| (template#macro (_ ,it))
      [(.Or .Any ,it)]))

(every .public Label
  [(..Maybe [..Natural ..Bit (..List' ..Name)])
   ..Type])

(the Try
  (<| (template#macro (_ ,it))
      [(.Or ..Text ,it)]))

(the Property_List
  (<| (template#macro (_ ,it))
      [(..List' (And ..Text ,it))]))

(every .public Info
  (Record
   [#target ..Text
    #version ..Text
    #mode .Mode
    #configuration (..Property_List ..Text)]))

(the .public Definition
  (And ..Type .Any))

(the .public Alias
  ..Name)

(every .public Global
  (.Variant
   {#Alias Alias}
   {#Definition Definition}))

(every .public Module
  (Record
   [#module_hash ..Natural
    #module_aliases (..Property_List ..Text)
    #definitions (..Property_List [..Bit ..Global])
    #imports (..List' ..Text)
    #module_state .Module_State]))

(every .public (Bindings it)
  (Record
   [#counter ..Natural
    #mappings (..Property_List it)]))

(every .public Scope
  (Record
   [#locals (..Bindings [..Type ..Natural])
    #captured (..Bindings [..Type .Ref])]))

(every .public Type_Context
  (Record
   [#for_all (..List' (..Maybe ..Type))
    #there_exists ..Natural]))

(every .public Lux
  (Record
   [#info ..Info
    #source .Source
    #provenance ..Provenance
    #current_module (Maybe ..Name_Of_Module)
    #modules (..Property_List ..Module)
    #scopes (.Stack ..Scope)
    #type_context ..Type_Context
    #expected (Maybe ..Type)
    #seed ..Natural
    #eval ..Eval]))

(the Meta
  (<| (template#macro (_ ,it))
      [(-> ..Lux
           (Try (.And ..Lux ,it)))]))

(the .public Eval'
  (-> ..Type ..Code
      (Meta Any)))

(every .public Simple
  (.Variant
   {#Simple_Unit}
   {#Simple_Bit ..Bit}
   {#Simple_Natural ..Natural}
   {#Simple_Integer ..Integer}
   {#Simple_Revolution ..Revolution}
   {#Simple_Decimal ..Decimal}
   {#Simple_Text ..Text}))

(every .public (Variant it)
  (Record
   [#lefts Natural
    #right? Bit
    #value it]))

(every .public (Tuple it)
  (List' it))

(every .public (Complex it)
  (.Variant
   {#Complex_Variant (Variant it)}
   {#Complex_Tuple (Tuple it)}))

(every .public Register
  Natural)

(every .public Variable
  (.Variant
   {#Local Register}
   {#Foreign Register}))

(every .public Constant
  ..Name)

(every .public Reference
  (.Variant
   {#Variable_Reference ..Variable}
   {#Constant_Reference ..Constant}))

(every .public (Pattern _)
  (.Variant
   {#Simple_Pattern Simple}
   {#Complex_Pattern (Complex Pattern)}
   {#List_Pattern (List' Pattern)}
   {#Bind_Pattern Register}))

(every .public (Branch it)
  (Record
   [#when Pattern
    #then it]))

(every .public (Match it)
  [(Branch it)
   (List' (Branch it))])

(every .public (Environment it)
  (List' it))

(every .public (Extension it)
  (Record
   [#name Name
    #parameters (List' it)]))

... https://en.wikipedia.org/wiki/Expression_(mathematics)
(the Expression'
  (<| (template#macro (_ ,it))
      [(And ..Provenance ,it)]))

(every .public (Expression _)
  (.Variant
   {#Simple (Expression' ..Simple)}
   {#Complex (Expression' (..Complex Expression))}
   {#Reference (Expression' Reference)}
   {#When (Expression' [Expression (..Match Expression)])}
   {#Abstraction (Expression' [(..Environment Expression) Expression])}
   {#Application (Expression' [Expression Expression])}
   {#Extension (Expression' (Extension Expression))}))

(the code#bit (.in_module# .prelude code#bit))
(the code#natural (.in_module# .prelude code#natural))
(the code#text (.in_module# .prelude code#text))
(the code#tuple (.in_module# .prelude code#tuple))
(the code#variant (.in_module# .prelude code#variant))

(the empty
  ..Code
  (code#variant (.list (code#bit 0b))))

(the (top head tail)
  (-> ..Code ..Code
      ..Code)
  (code#variant (.list (code#bit 1b)
                       head
                       tail)))

(every (Injection it)
  (-> it
      ..Code))

(the (code#stack code it)
  (for_any (_ it)
    (-> (Injection it)
        (Injection (Stack it))))
  (when it
    {.#Empty}
    empty

    {.#Top head tail}
    (top (code head) (code#stack code tail))))

(the (code#argument code [polarity it])
  (for_any (_ it)
    (-> (Injection it)
        (Injection [Bit it])))
  (code#tuple (.list (code#bit polarity)
                     (code it))))

(the ('list code it)
  (for_any (_ it)
    (-> (Injection it)
        (Injection (List' it))))
  (` (.list# (,* (list#each code it)))))

(the (nominal code [name parameters])
  (-> (Injection .Type)
      (Injection [Text (List' [.Polarity .Type])]))
  (code#variant (.list (code#natural 0)
                       (code#bit 0b)
                       (code#tuple (.list (code#text name)
                                          ('list (code#argument code) parameters))))))

(the (code it)
  (Injection .Type)
  (`` (when it
        {.#Nominal it}
        (nominal code it)

        {.#Parameter parameter it}
        (code#variant (.list (code#natural 1)
                             (code#bit 0b)
                             (code#bit parameter)
                             (code#natural it)))

        {.#Variable quality it}
        (code#variant (.list (code#natural 2)
                             (code#bit 0b)
                             (code#bit quality)
                             (code#natural it)))

        {.#Quantification quantification closure body}
        (code#variant (.list (code#natural 3)
                             (code#bit 0b)
                             (code#tuple (.list (code#bit quantification)
                                                (code#stack (.function (_ [abstraction argument])
                                                              (` [(, (code abstraction))
                                                                  (, (code argument))]))
                                                            closure)
                                                (code body)))))
        
        {.#Reification left right}
        (code#variant (.list (code#natural 4)
                             (code#bit 0b)
                             (code#tuple (.list (code left)
                                                (code right)))))

        {.#Named [module proper] anonymous}
        (code#variant (.list (code#natural 4)
                             (code#bit 1b)
                             (code#tuple (.list (code#tuple (.list (code#text module)
                                                                   (code#text proper)))
                                                (code anonymous)))))
        )))

(the .public each_type
  (property.List ..Code)
  (|> (.list ["label" ..Label]
             ["name_of_module" ..Name_Of_Module]
             ["name" ..Name]
             ["provenance" ..Provenance]
             ["code" ..Code]
             ["type" ..Type]
             ["info" ..Info]
             ["definition" ..Definition]
             ["alias" ..Alias]
             ["global" ..Global]
             ["module" ..Module]
             ["bindings" ..Bindings]
             ["scope" ..Scope]
             ["type_context" ..Type_Context]
             ["lux" ..Lux]
             ["eval" ..Eval'])
      (is (property.List .Type))
      (list#each (.function (_ [name type])
                   [name (..code type)]))))

(these (comment
         (these (the .public (old_type it)
                  (-> ..Type
                      .Type)
                  it)

                (the .public (new_type it)
                  (-> .Type
                      ..Type)
                  it)
                ))

       (these (the .public old_type
                (<| (template#macro (_ ,it))
                    [,it]))

              (the .public new_type
                ..old_type)
              )
       )

(the .public (old_global it)
  (-> ..Global
      .Global)
  it
  ... (when it
  ...   {..#Definition [type value]}
  ...   {.#Definition [(old_type type) value]}
  
  ...   {..#Alias name}
  ...   {.#Alias name})
  )

(the .public (new_global it)
  (-> .Global
      ..Global)
  it
  ... (when it
  ...   {.#Definition [type value]}
  ...   {..#Definition [(new_type type) value]}
  
  ...   {.#Alias name}
  ...   {..#Alias name})
  )

(the .public (old_module it)
  (-> ..Module
      .Module)
  [.#module_hash (its ..#module_hash it)
   .#module_aliases (its ..#module_aliases it)
   .#definitions (property#each (.function (_ [export? global])
                                  [export? (old_global global)])
                                (its ..#definitions it))
   .#imports (its ..#imports it)
   .#module_state (its ..#module_state it)])

(the .public (new_module it)
  (-> .Module
      ..Module)
  [.#module_hash (its ..#module_hash it)
   .#module_aliases (its ..#module_aliases it)
   .#definitions (property#each (.function (_ [export? global])
                                  [export? (new_global global)])
                                (its ..#definitions it))
   .#imports (its ..#imports it)
   .#module_state (its ..#module_state it)])

(the .public (old_bindings it)
  (for_any (_ it)
    (-> (..Bindings [..Type it])
        (.Bindings [.Type it])))
  it
  ... [.#counter (its ..#counter it)
  ...  .#mappings (property#each (.function (_ [type it])
  ...                              [(old_type type) it])
  ...                            (its ..#mappings it))]
  )

(the .public (new_bindings it)
  (for_any (_ it)
    (-> (.Bindings [.Type it])
        (..Bindings [..Type it])))
  it
  ... [.#counter (its ..#counter it)
  ...  .#mappings (property#each (.function (_ [type it])
  ...                              [(new_type type) it])
  ...                            (its ..#mappings it))]
  )

(the .public (old_Scope it)
  (-> ..Scope
      .Scope)
  it
  ... [.#locals (old_bindings (its ..#locals it))
  ...  .#captured (old_bindings (its ..#captured it))]
  )

(the .public (new_Scope it)
  (-> .Scope
      ..Scope)
  it
  ... [.#locals (new_bindings (its ..#locals it))
  ...  .#captured (new_bindings (its ..#captured it))]
  )

(the .public (old_type_context it)
  (-> ..Type_Context
      .Type_Context)
  it
  ... [.#ex_counter (its ..#there_exists it)
  ...  .#var_counter (list.size (its ..#for_all it))
  ...  .#var_bindings (list.enumeration (its ..#for_all it))]
  )

(the .public (new_type_context it)
  (-> .Type_Context
      ..Type_Context)
  it
  ... [#for_all (list#each product.right (its .#var_bindings it))
  ...  #there_exists (its .#ex_counter it)]
  )

(the .public (old_lux it)
  (-> ..Lux
      .Lux)
  [.#info (its ..#info it)
   .#source (its ..#source it)
   .#provenance (its ..#provenance it)
   .#current_module (its ..#current_module it)
   .#modules (property#each old_module (its ..#modules it))
   .#scopes (its ..#scopes it)
   .#type_context (old_type_context (its ..#type_context it))
   .#expected (its ..#expected it)
   .#seed (its ..#seed it)
   .#eval (its ..#eval it)])

(the .public (new_lux it)
  (-> .Lux
      ..Lux)
  [.#info (its ..#info it)
   .#source (its ..#source it)
   .#provenance (its ..#provenance it)
   .#current_module (its ..#current_module it)
   .#modules (property#each new_module (its ..#modules it))
   .#scopes (its ..#scopes it)
   .#type_context (new_type_context (its ..#type_context it))
   .#expected (its ..#expected it)
   .#seed (its ..#seed it)
   .#eval (its ..#eval it)])
