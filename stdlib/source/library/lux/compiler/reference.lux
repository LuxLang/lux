... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except local)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [control
    ["[0]" pipe]]
   [data
    [text (.only Injection)
     ["%" \\injection]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [meta
    ["[0]" name]]
   [compiler
    ["@[0]" type (.only Reference)]]]]
 ["[0]" /
  ["[1][0]" variable]])

(the .public equivalence
  (Equivalence Reference)
  (implementation
   (the (= expected actual)
     (`` (when [expected actual]
           (,, (template.with [<tag> <equivalence>]
                 [[{<tag> expected} {<tag> actual}]
                  (by <equivalence> = expected actual)]

                 [[@type.:Variable_Reference /variable.equivalence]
                  [@type.:Constant_Reference name.equivalence]]))

           _
           false)))))

(alias [=]
       ..equivalence)

(the .public hash
  (Hash Reference)
  (implementation
   (the equivalence
     ..equivalence)

   (the (hash value)
     (`` (when value
           (,, (template.with [<factor> <tag> <hash>]
                 [{<tag> value}
                  (|> value
                      (by <hash> hash)
                      (n.x <factor>))]

                 [[2 @type.:Variable_Reference /variable.hash]
                  [3 @type.:Constant_Reference name.hash]]))
           )))))

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (<name> content)
       [(<| {@type.:Variable_Reference}
            {<tag>}
            content)]))]

  [[local   @type.:Local]
   [foreign @type.:Foreign]])

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (<name> content)
       [(<| {<tag>}
            content)]))]

  [[variable @type.:Variable_Reference]
   [constant @type.:Constant_Reference]])

(`` (the .public self
      (template.macro (self)
        [(..variable (,, (/variable.self)))])))

(the .public as_text
  (Injection Reference)
  (|>> (pipe.when
         {@type.:Variable_Reference variable}
         (/variable.as_text variable)
         
         {@type.:Constant_Reference constant}
         (name.as_text constant))))
