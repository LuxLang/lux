... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except macro
                its revised has
                as
                when
                all with)
   [abstract
    [functor (.only Functor)
     ["[0]" pro]]]
   [type
    ["[0]" nominal]]
   ["[0]" function]
   [data
    ["[0]" product]]]])

(the macro
  (<| (.in_module# .prelude)
      .template#macro))

(the with_template
  (<| (.in_module# .prelude)
      .with_template))

(every .public (Optic it internal_cause internal_effect external_cause external_effect)
  (-> (it internal_cause internal_effect)
      (it external_cause external_effect)))

(these (every .public (View internal_cause internal_effect external_cause external_effect)
         (for_any (_ it)
           (-> (pro.Functor it)
               (Optic it internal_cause internal_effect external_cause external_effect))))

       (the As
         (macro (_ internal_cause internal_effect external_cause external_effect)
           [(-> internal_effect
                external_effect)]))

       (the Of
         (macro (_ internal_cause internal_effect external_cause external_effect)
           [(-> external_cause
                internal_cause)]))

       (every .public (View' internal_cause internal_effect external_cause external_effect)
         (Record
          [#as (As internal_cause internal_effect external_cause external_effect)
           #of (Of internal_cause internal_effect external_cause external_effect)]))

       (the .public (view' as of)
         (for_any (_ internal_cause internal_effect external_cause external_effect)
           (-> (As internal_cause internal_effect external_cause external_effect) (Of internal_cause internal_effect external_cause external_effect)
               (View' internal_cause internal_effect external_cause external_effect)))
         [#as as
          #of of])

       (the functor_of_view
         (for_any (_ internal_cause internal_effect)
           (pro.Functor (View' internal_cause internal_effect)))
         (implementation
          (the (each before after [/#as /#of])
            (..view' (|>> /#as after)
                     (|>> before /#of)))))

       (with_template [,name ,type ,tag]
         [(the .public ,name
            (for_any (_ internal_cause internal_effect external_cause external_effect)
              (-> (View' internal_cause internal_effect external_cause external_effect)
                  (,type internal_cause internal_effect external_cause external_effect)))
            (.its ,tag))]

         [as As #as]
         [of Of #of]
         )

       (the (as_view [/#as /#of]
                     [pro_functor])
         (for_any (_ internal_cause internal_effect external_cause external_effect)
           (-> (View' internal_cause internal_effect external_cause external_effect)
               (View internal_cause internal_effect external_cause external_effect)))
         (<| (.with pro_functor)
             (each /#of /#as)))

       (the identity_view'
         (for_any (_ internal_cause internal_effect)
           (View' internal_cause internal_effect
                  internal_cause internal_effect))
         (view' function.identity function.identity))

       (the (as_view' it)
         (for_any (_ internal_cause internal_effect external_cause external_effect)
           (-> (View internal_cause internal_effect external_cause external_effect (View' internal_cause internal_effect))
               (View' internal_cause internal_effect external_cause external_effect)))
         (it [..functor_of_view]
             ..identity_view'))
       )

(these (every .public (Property internal_cause internal_effect external_cause external_effect)
         (for_any (_ it)
           (-> [(pro.Functor it) (pro.Cartesian it)]
               (Optic it internal_cause internal_effect external_cause external_effect))))

       (the Its
         (macro (_ focus focus' context context')
           [(-> context
                focus)]))

       (the Has
         (macro (_ focus focus' context context')
           [(-> [focus' context]
                context')]))

       (every .public (Property' focus focus' context context')
         (Record
          [#its (Its focus focus' context context')
           #has (Has focus focus' context context')]))

       (the .public (property' its has)
         (for_any (_ focus focus' context context')
           (-> (Its focus focus' context context') (Has focus focus' context context')
               (Property' focus focus' context context')))
         [#its its
          #has has])

       (the functor_of_property'
         (for_any (_ internal_cause internal_effect)
           (pro.Functor (Property' internal_cause internal_effect)))
         (implementation
          (the (each before after [/#its /#has])
            (..property' (|>> before
                              /#its)
                         (|>> (product.then function.identity before)
                              /#has
                              after)))))

       (the cartesian_of_property'
         (for_any (_ internal_cause internal_effect)
           (pro.Cartesian (Property' internal_cause internal_effect)))
         (implementation
          (the (in_left [/#its /#has])
            (..property' (|>> product.left
                              /#its)
                         (product.forked (|>> (product.then function.identity product.left)
                                              /#has)
                                         (|>> product.right
                                              product.right))))
          (the (in_right [/#its /#has])
            (..property' (|>> product.right
                              /#its)
                         (product.forked (|>> product.right
                                              product.left)
                                         (|>> (product.then function.identity product.right)
                                              /#has))))))

       (the .public (as_property [/#its /#has]
                                 [pro_functor cartesian])
         (for_any (_ internal_cause internal_effect external_cause external_effect)
           (-> (Property' internal_cause internal_effect external_cause external_effect)
               (Property internal_cause internal_effect external_cause external_effect)))
         (<| (.with pro_functor)
             (.with cartesian)
             (|>> in_left
                  (each (product.forked /#its function.identity) /#has))))

       (the identity_property'
         (for_any (_ internal_cause internal_effect)
           (Property' internal_cause internal_effect
                      internal_cause internal_effect))
         (..property' function.identity product.left))

       (the .public (as_property' it)
         (for_any (_ internal_cause internal_effect external_cause external_effect)
           (-> (Property internal_cause internal_effect external_cause external_effect (Property' internal_cause internal_effect))
               (Property' internal_cause internal_effect external_cause external_effect)))
         (it [..functor_of_property' ..cartesian_of_property']
             ..identity_property'))

       (the .public its
         (for_any (_ focus focus' context context')
           (-> (Property' focus focus' context context')
               (Its focus focus' context context')))
         (.its #its))

       (the .public (has property' value context)
         (for_any (_ focus focus' context context')
           (-> (Property' focus focus' context context')
               (-> focus'
                   (-> context context'))))
         (by property' #has [value context]))

       (the .public (revised property' change context)
         (for_any (_ focus focus' context context')
           (-> (Property' focus focus' context context')
               (-> (-> focus focus')
                   (-> context context'))))
         (by property' #has [(change (its property' context)) context]))
       )

(the .public (composite outer inner)
  (for_any (_ focus focus'
              middle middle'
              context context')
    (-> (Property' middle middle' context context') (Property' focus focus' middle middle')
        (Property' focus focus' context context')))
  [#its (|>> (its outer)
             (its inner))
   #has (function (_ [focus context])
          (revised outer (has inner focus) context))])

(these (the When
         (macro (_ context case)
           [(-> context
                (Or context case))]))

       (the Some
         (macro (_ context case)
           [(-> case
                context)]))

       (every .public (Case context case)
         (Record
          [#when (When context case)
           #some (Some context case)]))

       (the .public (case when some)
         (for_any (_ context case)
           (-> (When context case) (Some context case)
               (Case context case)))
         [#when when
          #some some])

       (with_template [,name ,type ,tag]
         [(the .public ,name
            (for_any (_ context case)
              (-> (Case context case)
                  (,type context case)))
            (.its ,tag))]

         [when When #when]
         [some Some #some]
         )
       )

... TODO: Make this nominal type unnecessary.
(nominal.every .public (Membership one all)
  (Variant
   {#All all}
   {#One one (Membership one (-> one all))})

  (the outer
    (for_any (_ one all)
      (-> (Membership one all)
          (Or all (And one (Membership one (-> one all))))))
    (|>> nominal.reification))

  (the inner
    (for_any (_ one all)
      (-> (Or all (And one (Membership one (-> one all))))
          (Membership one all)))
    (|>> nominal.abstraction))

  (the .public membership_functor
    (for_any (_ one)
      (Functor (Membership one)))
    (implementation
     (the (each value it)
       (nominal.abstraction
        (.when (nominal.reification it)
          {#All all}
          {#All (value all)}

          {#One one next}
          {#One one (each (function (_ before)
                            (|>> before
                                 value))
                          next)}))
       )))

  (every .public (Apply context)
    (Interface
     (is (Functor context)
         functor)
     (is (for_any (_ it)
           (-> it
               (context it)))
         pure)
     (is (for_any (_ it it')
           (-> (context (-> it it'))
               (-> (context it)
                   (context it'))))
         with)))

  (the .public membership_apply
    (for_any (_ one)
      (Apply (Membership one)))
    (implementation
     (the functor ..membership_functor)
     (the pure (|>> {#All} nominal.abstraction))
     (the (with internal_effect internal_cause)
       (.when (nominal.reification internal_effect)
         {#All internal_effect}
         (by ..membership_functor each internal_effect internal_cause)

         {#One one internal_effect}
         (nominal.abstraction
          {#One one (with (by ..membership_functor each function.flipped internal_effect)
                      internal_cause)})))))

  (the .public (one it)
    (for_any (_ it)
      (-> it
          (Membership it it)))
    (nominal.abstraction {#One it (nominal.abstraction {#All (|>>)})}))

  (the .public (all it)
    (for_any (_ one all)
      (-> (Membership one all)
          all))
    (.when (nominal.reification it)
      {#All it}
      it

      {#One one next}
      ((all next) one)))

  (every .public (Member all one)
    (-> all
        (Membership one all)))
  )
