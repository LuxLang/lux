(.module:
  [library
   [lux (#- nat)
    [abstract
     [equivalence (#+ Equivalence)]
     [hash (#+ Hash)]
     [order (#+ Order)]
     [enum (#+ Enum)]
     [codec (#+ Codec)]]
    [control
     ["." try (#+ Try)]
     ["." exception (#+ exception:)]]
    [data
     ["." text]]
    [macro
     ["." template]]
    [math
     [number
      ["n" nat]]]]])

(type: #export Day
  {#.doc (doc "A day of the week.")}
  #Sunday
  #Monday
  #Tuesday
  #Wednesday
  #Thursday
  #Friday
  #Saturday)

(implementation: #export equivalence
  (Equivalence Day)
  
  (def: (= reference sample)
    (case [reference sample]
      (^template [<tag>]
        [[<tag> <tag>]
         #1])
      ([#Sunday]
       [#Monday]
       [#Tuesday]
       [#Wednesday]
       [#Thursday]
       [#Friday]
       [#Saturday])

      _
      #0)))

(def: (nat day)
  (-> Day Nat)
  (case day
    #Sunday    0
    #Monday    1
    #Tuesday   2
    #Wednesday 3
    #Thursday  4
    #Friday    5
    #Saturday  6))

(implementation: #export order
  (Order Day)
  
  (def: &equivalence ..equivalence)
  
  (def: (< reference sample)
    (n.< (..nat reference) (..nat sample))))

(implementation: #export enum
  (Enum Day)
  
  (def: &order ..order)
  
  (def: (succ day)
    (case day
      #Sunday    #Monday
      #Monday    #Tuesday
      #Tuesday   #Wednesday
      #Wednesday #Thursday
      #Thursday  #Friday
      #Friday    #Saturday
      #Saturday  #Sunday))
  
  (def: (pred day)
    (case day
      #Monday    #Sunday
      #Tuesday   #Monday
      #Wednesday #Tuesday
      #Thursday  #Wednesday
      #Friday    #Thursday
      #Saturday  #Friday
      #Sunday    #Saturday)))

(exception: #export (not_a_day_of_the_week {value Text})
  (exception.report
   ["Value" (text.format value)]))

(implementation: #export codec
  (Codec Text Day)
  
  (def: (encode value)
    (case value
      (^template [<tag>]
        [<tag> (template.text [<tag>])])
      ([#..Monday]
       [#..Tuesday]
       [#..Wednesday]
       [#..Thursday]
       [#..Friday]
       [#..Saturday]
       [#..Sunday])))
  (def: (decode value)
    (case value
      (^template [<tag>]
        [(^ (template.text [<tag>])) (#try.Success <tag>)])
      ([#..Monday]
       [#..Tuesday]
       [#..Wednesday]
       [#..Thursday]
       [#..Friday]
       [#..Saturday]
       [#..Sunday])
      _ (exception.except ..not_a_day_of_the_week [value]))))

(def: #export week
  {#.doc (doc "All the days, ordered by when they come in a week.")}
  (List Day)
  (list #Sunday
        #Monday
        #Tuesday
        #Wednesday
        #Thursday
        #Friday
        #Saturday))

(with_expansions [<pairs> (as_is [01 #Sunday]
                                 [02 #Monday]
                                 [03 #Tuesday]
                                 [04 #Wednesday]
                                 [05 #Thursday]
                                 [06 #Friday]
                                 [07 #Saturday])]
  (def: #export (number day)
    (-> Day Nat)
    (case day
      (^template [<number> <day>]
        [<day> <number>])
      (<pairs>)))

  (exception: #export (invalid_day {number Nat})
    (exception.report
     ["Number" (\ n.decimal encode number)]
     ["Valid range" ($_ "lux text concat"
                        (\ n.decimal encode (..number #Sunday))
                        " ~ "
                        (\ n.decimal encode (..number #Saturday)))]))

  (def: #export (by_number number)
    (-> Nat (Try Day))
    (case number
      (^template [<number> <day>]
        [<number> (#try.Success <day>)])
      (<pairs>)
      _ (exception.except ..invalid_day [number])))
  )

(implementation: #export hash
  (Hash Day)

  (def: &equivalence ..equivalence)
  (def: (hash day)
    (case day
      (^template [<prime> <day>]
        [<day>
         <prime>])
      ([02 #Sunday]
       [03 #Monday]
       [05 #Tuesday]
       [07 #Wednesday]
       [11 #Thursday]
       [13 #Friday]
       [17 #Saturday]))))
