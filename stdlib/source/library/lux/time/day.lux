(.using
 [library
  [lux {"-" nat}
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [order (.only Order)]
    [enum (.only Enum)]
    [codec (.only Codec)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only exception:)]]
   [data
    ["[0]" text ("[1]#[0]" monoid)]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [math
    [number
     ["n" nat]]]]])

(type: .public Day
  (Variant
   {#Sunday}
   {#Monday}
   {#Tuesday}
   {#Wednesday}
   {#Thursday}
   {#Friday}
   {#Saturday}))

(implementation: .public equivalence
  (Equivalence Day)
  
  (def: (= reference sample)
    (case [reference sample]
      (^.template [<tag>]
        [[{<tag>} {<tag>}]
         #1])
      ([#Sunday]
       [#Monday]
       [#Tuesday]
       [#Wednesday]
       [#Thursday]
       [#Friday]
       [#Saturday])

      _
      #0)))

(def: (nat day)
  (-> Day Nat)
  (case day
    {#Sunday}    0
    {#Monday}    1
    {#Tuesday}   2
    {#Wednesday} 3
    {#Thursday}  4
    {#Friday}    5
    {#Saturday}  6))

(implementation: .public order
  (Order Day)
  
  (def: equivalence ..equivalence)
  
  (def: (< reference sample)
    (n.< (..nat reference) (..nat sample))))

(implementation: .public enum
  (Enum Day)
  
  (def: order ..order)
  
  (def: (succ day)
    (case day
      {#Sunday}    {#Monday}
      {#Monday}    {#Tuesday}
      {#Tuesday}   {#Wednesday}
      {#Wednesday} {#Thursday}
      {#Thursday}  {#Friday}
      {#Friday}    {#Saturday}
      {#Saturday}  {#Sunday}))
  
  (def: (pred day)
    (case day
      {#Monday}    {#Sunday}
      {#Tuesday}   {#Monday}
      {#Wednesday} {#Tuesday}
      {#Thursday}  {#Wednesday}
      {#Friday}    {#Thursday}
      {#Saturday}  {#Friday}
      {#Sunday}    {#Saturday})))

(exception: .public (not_a_day_of_the_week [value Text])
  (exception.report
   "Value" (text.format value)))

(implementation: .public codec
  (Codec Text Day)
  
  (def: (encoded value)
    (case value
      (^.template [<tag>]
        [{<tag>}
         (text.replaced "#" "" (template.text [<tag>]))])
      ([..#Monday]
       [..#Tuesday]
       [..#Wednesday]
       [..#Thursday]
       [..#Friday]
       [..#Saturday]
       [..#Sunday])))
  (def: (decoded value)
    (case (text#composite "#" value)
      (^.template [<tag>]
        [(pattern (template.text [<tag>]))
         {try.#Success {<tag>}}])
      ([..#Monday]
       [..#Tuesday]
       [..#Wednesday]
       [..#Thursday]
       [..#Friday]
       [..#Saturday]
       [..#Sunday])
      _ (exception.except ..not_a_day_of_the_week [value]))))

(def: .public week
  (List Day)
  (list {#Sunday}
        {#Monday}
        {#Tuesday}
        {#Wednesday}
        {#Thursday}
        {#Friday}
        {#Saturday}))

(with_expansions [<pairs> (these [01 #Sunday]
                                 [02 #Monday]
                                 [03 #Tuesday]
                                 [04 #Wednesday]
                                 [05 #Thursday]
                                 [06 #Friday]
                                 [07 #Saturday])]
  (def: .public (number day)
    (-> Day Nat)
    (case day
      (^.template [<number> <day>]
        [{<day>}
         <number>])
      (<pairs>)))

  (exception: .public (invalid_day [number Nat])
    (exception.report
     "Number" (# n.decimal encoded number)
     "Valid range" (all "lux text concat"
                        (# n.decimal encoded (..number {#Sunday}))
                        " ~ "
                        (# n.decimal encoded (..number {#Saturday})))))

  (def: .public (by_number number)
    (-> Nat (Try Day))
    (case number
      (^.template [<number> <day>]
        [<number>
         {try.#Success {<day>}}])
      (<pairs>)
      
      _
      (exception.except ..invalid_day [number])))
  )

(implementation: .public hash
  (Hash Day)

  (def: equivalence ..equivalence)
  (def: (hash day)
    (case day
      (^.template [<prime> <day>]
        [{<day>}
         <prime>])
      ([02 #Sunday]
       [03 #Monday]
       [05 #Tuesday]
       [07 #Wednesday]
       [11 #Thursday]
       [13 #Friday]
       [17 #Saturday]))))
