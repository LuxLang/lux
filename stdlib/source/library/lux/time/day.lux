... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text)
   [abstract
    [equality (.only Equality)]
    [hash (.only Hash)]
    [enum (.only Enum)]
    [format (.only Format)]
    ["?" projection (.use "[1]:[0]" monad)]
    ["[0]" order (.only Order)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.use "[1]:[0]" monoid)
     ["?[1]" \\projection (.only Projection)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]
    ["[0]" expansion]]]])

(expansion.let [,values (these [0 02 :Sunday]
                               [1 03 :Monday]
                               [2 05 :Tuesday]
                               [3 07 :Wednesday]
                               [4 11 :Thursday]
                               [5 13 :Friday]
                               [6 17 :Saturday])]
  (these (`` (every .public Day
               (Variant
                (,, (template.with [,number ,prime ,tag]
                      [{,tag}]

                      [,values])))))

         (the .public equality
           (Equality Day)
           (implementation
            (the (= expected actual)
              (`` (when [expected actual]
                    (,, (template.with [,number ,prime ,tag]
                          [[{,tag} {,tag}]
                           true]

                          [,values]))

                    _
                    false)))))

         (the .public (as_text value)
           (text.Injection Day)
           (`` (when value
                 (,, (template.with [,number ,prime ,tag]
                       [{,tag}
                        (text.replaced "#" "" (template.text [,tag]))]

                       [,values])))))

         (the .public of_text
           (Projection Day)
           (`` (all ?.either
                    (,, (template.with [,number ,prime ,tag]
                          [(?.after (?text.this (text.replaced "#" "" (template.text [,tag])))
                                    (?:pure {,tag}))]

                          [,values]))
                    )))

         (the .public week
           (List Day)
           (`` (list (,, (template.with [,number ,prime ,tag]
                           [{,tag}]

                           [,values])))))

         (the .public (number day)
           (-> Day
               Natural)
           (`` (when day
                 (,, (template.with [,number ,prime ,tag]
                       [{,tag}
                        (++ ,number)]

                       [,values])))))

         (exception.the .public (invalid_day number)
           (Exception Natural)
           (exception.report
            (list ["Number" (by n.base_10 as number)]
                  ["Valid range" (.text_composite# (by n.base_10 as (..number {:Sunday}))
                                                   " ~ "
                                                   (by n.base_10 as (..number {:Saturday})))])))

         (the .public (by_number number)
           (-> Natural
               (Try Day))
           (`` (when (-- number)
                 (,, (template.with [,number ,prime ,tag]
                       [,number
                        {try.:Success {,tag}}]

                       [,values]))
                 
                 _
                 (exception.except ..invalid_day [number]))))

         (the .public hash
           (Hash Day)
           (implementation
            (the equality ..equality)
            (the (hash it)
              (`` (when it
                    (,, (template.with [,number ,prime ,tag]
                          [{,tag}
                           ,prime]

                          [,values])))))))
         ))

(alias [=]
       ..equality)

(the .public order
  (Order Day)
  (implementation
   (the equality ..equality)
   
   (the (< reference it)
     (n.< (..number reference)
          (..number it)))))

(order.for [] Day ..order)

(the limit (..number {:Saturday}))

(the .public enum
  (Enum Day)
  (implementation
   (the order ..order)
   
   (the succ
     (|>> number
          (n.% limit)
          ++
          by_number
          try.trusted))
   
   (the pred
     (let [shift (-- limit)]
       (|>> number
            --
            (n.+ shift)
            (n.% limit)
            ++
            by_number
            try.trusted)))))

(the .public text
  (Format Text Day)
  (implementation
   (the as ..as_text)
   (the of (?text.value ..of_text))))

(the .public random
  (Random Day)
  (by random.functor each
      (|>> (n.% ..limit)
           ++
           by_number
           try.trusted)
      random.natural))
