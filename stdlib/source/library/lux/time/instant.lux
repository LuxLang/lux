... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text)
   [abstract
    [equality (.only Equality)]
    [enum (.only Enum)]
    [format (.only Format)]
    [hash (.only Hash)]
    ["<>" projection (.only)]
    ["[0]" order (.only Order)]
    ["[0]" monad]]
   [control
    [io (.only IO io)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text (.only)
     ["<[1]>" \\projection (.only Projection)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["i" integer (.use "[1]:[0]" interval)]
      ["d" decimal]]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]
   ["[0]" target]]]
 ["[0]" // (.only Time)
  ["[0]" duration (.only Duration)]
  ["[0]" month (.only Month)]
  ["[0]" day (.only Day)]
  ["[0]" date (.only Date)]])

(nominal.every .public Instant
  Integer

  (the .public of_millis
    (-> Integer
        Instant)
    (|>> nominal.of))

  (the .public millis
    (-> Instant
        Integer)
    (|>> nominal.as))

  (the .public (span from to)
    (-> Instant Instant
        Duration)
    (duration.of_millis (i.- (nominal.as from)
                             (nominal.as to))))

  (template.with [<*> <name>]
    [(the .public (<name> duration instant)
       (-> Duration
           (Change Instant))
       (nominal.of
        (<*> (duration.millis duration)
             (nominal.as instant))))]

    [[i.- before]
     [i.+ after]])

  (the .public (relative instant)
    (-> Instant
        Duration)
    (|> instant
        nominal.as
        duration.of_millis))

  (the .public absolute
    (-> Duration
        Instant)
    (|>> duration.millis
         nominal.of))

  (the .public equality
    (Equality Instant)
    (implementation
     (the (= param subject)
       (by i.equality =
           (nominal.as param)
           (nominal.as subject)))))

  (alias [=]
         ..equality)

  (the .public order
    (Order Instant)
    (implementation
     (the equality ..equality)
     (the (< param subject)
       (by i.order <
           (nominal.as param)
           (nominal.as subject)))))

  (order.for [] Instant ..order)

  (the .public hash
    (Hash Instant)
    (implementation
     (the equality ..equality)
     (the hash
       (|>> nominal.as
            (by i.hash hash)))))

  (`` (the .public enum
        (Enum Instant)
        (implementation
         (the order ..order)
         (,, (template.with [<name>]
               [(the <name>
                  (|>> nominal.as
                       (by i.enum <name>)
                       nominal.of))]

               [[succ]
                [pred]])))))
  )

(the .public epoch
  Instant
  (..of_millis +0))

(template.with [<name> <value>]
  [(the .public <name>
     Instant
     (..of_millis <value>))]

  [[first i:minimum]
   [last i:maximum]])

(the millis_per_day
  (duration.ticks duration.milli_second duration.day))

(the (date_time instant)
  (-> Instant
      [Date Duration])
  (let [offset (..millis instant)
        bce? (i.< +0 offset)
        [days day_time] (if bce?
                            (let [[days millis] (i./% ..millis_per_day offset)]
                              (when millis
                                +0 [days millis]
                                _ [(-- days) (i.+ ..millis_per_day millis)]))
                            (i./% ..millis_per_day offset))]
    [(date.of_days days)
     (duration.of_millis day_time)]))

(template.with [<value> <definition>]
  [(the <definition>
     Text
     <value>)]

  [["T" date_suffix]
   ["Z" time_suffix]])

(the (clock_time duration)
  (-> Duration
      Time)
  (|> (if (by duration.order < duration.empty duration)
          (duration.+ duration.day duration)
          duration)
      duration.millis
      .natural
      //.of_millis
      try.trusted))

(the .public (as_text instant)
  (text.Injection Instant)
  (let [[date time] (..date_time instant)
        time (..clock_time time)]
    (.text (by date.text as date) ..date_suffix
           (by //.text as time) ..time_suffix)))

(the .public of_text
  (Projection Instant)
  (monad.let [! <>.monad]
    [days (by ! each date.as_days date.of_text)
     _ (<text>.this ..date_suffix)
     time (by ! each //.millis //.of_text)
     _ (<text>.this ..time_suffix)]
    (pure (|> (if (i.< +0 days)
                  (|> duration.day
                      (duration.up (.natural (i.x -1 days)))
                      duration.inverse)
                  (duration.up (.natural days) duration.day))
              (duration.+ (duration.up time duration.milli_second))
              ..absolute))))

(the .public text
  (Format Text Instant)
  (implementation
   (the as ..as_text)
   (the of (<text>.value ..of_text))))

(the .public now
  (IO Instant)
  (io (..of_millis (target.if target.jvm
                              (|> (.jvm_member_invoke_static# [] "java.lang.System" "currentTimeMillis" [])
                                  .jvm_object_cast#
                                  (as (-> (Nominal "java.lang.Long") Integer)))
                              
                              target.js
                              (let [date (.js_object_new# (.js_constant# "Date") [])]
                                (|> (.js_object_do# "getTime" date [])
                                    (as (-> Any Decimal))
                                    .f64_int#))
                              
                              target.python
                              (let [time (.python_import# "time")]
                                (|> (.python_object_do# "time" time [])
                                    (as (-> Any Decimal))
                                    (d.x +1,000.0)
                                    .f64_int#))
                              
                              target.lua
                              (|> (.lua_of# (.lua_constant# "os.time") [])
                                  (as (-> Any Integer))
                                  (i.x +1,000))
                              
                              target.ruby
                              (let [% (.ruby_constant# "Time")
                                    % (.ruby_object_do# "now" % [])]
                                (|> (.ruby_object_do# "to_f" % [])
                                    (as (-> Any Decimal))
                                    (d.x +1,000.0)
                                    .f64_int#))
                              
                              target.php
                              (|> ("php constant" "time")
                                  "php of"
                                  (as (-> Any Integer))
                                  (i.x +1,000))
                              
                              target.common_lisp
                              (|> ("common_lisp constant" "get-universal-time")
                                  "common_lisp of"
                                  (as (-> Any Integer))
                                  (i.x +1,000))
                              ))))

(template.with [<field> <type> <post_processing>]
  [(the .public (<field> instant)
     (-> Instant
         <type>)
     (let [[date time] (..date_time instant)]
       (|> <field> <post_processing>)))]

  [[date Date (|>)]
   [time Time ..clock_time]])

(the .public (day_of_week instant)
  (-> Instant
      Day)
  (let [offset (..relative instant)
        days (duration.ticks duration.day offset)
        day_time (duration.% duration.day offset)
        days (if (and (duration.negative? offset)
                      (not (duration.neutral? day_time)))
                 (-- days)
                 days)
        ... 1970/01/01 was a Thursday
        y1970m0d0 +4]
    (when (|> y1970m0d0
              (i.+ days) (i.% +7)
              ... This is done to turn negative days into positive days.
              (i.+ +7) (i.% +7))
      +0 {day.:Sunday}
      +1 {day.:Monday}
      +2 {day.:Tuesday}
      +3 {day.:Wednesday}
      +4 {day.:Thursday}
      +5 {day.:Friday}
      +6 {day.:Saturday}
      _ (undefined))))

(the .public (of_date_time date time)
  (-> Date Time
      Instant)
  (|> (date.as_days date)
      (i.x (duration.millis duration.day))
      (i.+ (.integer (//.millis time)))
      ..of_millis))

(the .public random
  (Random Instant)
  (by random.functor each ..of_millis random.integer))
