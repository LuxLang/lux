... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [format (.only Format)]
    [equivalence (.only Equivalence)]
    ["[0]" order (.only Order)]]
   [control
    ["<>" projection (.only)]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]
    [function
     [predicate (.only Predicate)]]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)
     ["<[1]>" \\projection (.only Projection)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" natural (.use "[1]#[0]" base_10)]
     ["i" integer (.use "[1]#[0]" base_10)]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]]])

(every .public Period
  Natural)

(template.with [<period> <name>]
  [(the .public <name>
     Period
     <period>)]

  [004 leap]
  [100 century]
  [400 era]
  )

(the Days
  Natural)

(the .public days
  Days
  365)

(the per_leap
  Days
  (++ (n.* ..leap ..days)))

(the per_century
  Days
  (-- (n.* (n./ ..leap ..century)
           ..per_leap)))

(the per_era
  Days
  (++ (n.* (n./ ..century ..era)
           ..per_century)))

(the Internal
  Integer)

(the External
  Integer)

(the .public invalid
  External
  +0)

(the (internal year)
  (-> External
      Internal)
  (if (i.< ..invalid year)
    (++ year)
    year))

(the (external year)
  (-> Internal
      External)
  (if (i.> ..invalid year)
    year
    (-- year)))

(exception.the .public there_is_no_year_0)

... https://en.wikipedia.org/wiki/Gregorian_calendar
(nominal.every .public Year
  Internal

  (the (of_days days)
    (-> Integer
        Internal)
    (let [[era days] (i./% (.integer ..per_era) days)
          [century days] (i./% (.integer ..per_century) days)
          [leap days] (i./% (.integer ..per_leap) days)
          [years days] (i./% (.integer ..days) days)]
      (..internal
       (all i.+
            (i.* (.integer ..era) era)
            (i.* (.integer ..century) century)
            (i.* (.integer ..leap) leap)
            years))))

  (template.with [,name ,extreme]
    [(the .public ,name
       Year
       (|> (by i.interval ,extreme)
           ..of_days
           nominal.abstraction))]

    [first minimum]
    [last maximum]
    )

  (the .public value
    (-> Year
        External)
    (|>> nominal.representation
         ..external))

  (exception.the .public (beyond_limits [year])
    (Exception [External])
    (exception.report
     (list ["Year" (i#injection year)]
           ["Minimum" (i#injection (..value first))]
           ["Maximum" (i#injection (..value last))])))

  (the .public (year value)
    (-> External
        (Try Year))
    (when value
      ..invalid
      (exception.except ..there_is_no_year_0 [])
      
      external
      (<| (if (i.< (..value first) external)
            (exception.except ..beyond_limits [external]))
          (if (i.> (..value last) external)
            (exception.except ..beyond_limits [external]))
          {try.#Success (nominal.abstraction (..internal external))})))

  (the .public epoch
    Year
    (nominal.abstraction +1970))
  )

(the (exact? factor input)
  (-> Period
      (Predicate Internal))
  (|> input
      (i.% (.integer factor))
      (i.= +0)))

... https://en.wikipedia.org/wiki/Leap_year#Algorithm
(the .public (leap? year)
  (Predicate Year)
  (let [year (|> year ..value ..internal)]
    (and (..exact? ..leap year)
         (or (not (..exact? ..century year))
             (..exact? ..era year)))))

(the (with_year_0_leap year days)
  (let [after_year_0? (i.> ..invalid year)]
    (if after_year_0?
      (i.+ +1 days)
      days)))

(the .public (leaps year)
  (-> Year
      Integer)
  (let [year (|> year ..value ..internal)
        limit (if (i.> +0 year)
                (-- year)
                (++ year))]
    (`` (|> +0
            (,, (template.with [<polarity> <years>]
                  [(<polarity> (i./ (.integer <years>) limit))]

                  [i.+ ..leap]
                  [i.- ..century]
                  [i.+ ..era]
                  ))
            (..with_year_0_leap year)))))

(the .public (as_text year)
  (text.Injection Year)
  (let [year (..value year)]
    (if (i.< ..invalid year)
      (i#injection year)
      (n#injection (.natural year)))))

(the .public projection
  (Projection Year)
  (do [! <>.monad]
    [sign (<>.or (<text>.this "-") (in []))
     digits (<text>.many <text>.decimal)
     raw_year (<>.format i.base_10 (in (text#composite "+" digits)))]
    (<>.of_try (..year (when sign
                         {.#Left _}  (i.* -1 raw_year)
                         {.#Right _} raw_year)))))

(the .public format
  (Format Text Year)
  (implementation
   (the injection ..as_text)
   (the projection (<text>.value ..projection))))

(the .public equivalence
  (Equivalence Year)
  (implementation
   (the (= expected actual)
     (i.= (..value expected) (..value actual)))))

(alias [=]
       ..equivalence)

(the .public order
  (Order Year)
  (implementation
   (the equivalence ..equivalence)

   (the (< expected actual)
     (i.< (..value expected) (..value actual)))))

(order.definitions [] Year ..order)

(the .public random
  (Random Year)
  (let [first (.natural (i.abs (..value ..first)))
        last (.natural (..value ..last))
        span (n.+ first last)]
    (random.one (|>> (n.% span)
                     (n.- first)
                     .integer
                     ..year
                     try.maybe)
                random.natural)))
