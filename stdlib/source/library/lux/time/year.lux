(.module:
  [library
   [lux #*
    [abstract
     [monad (#+ do)]
     [codec (#+ Codec)]
     [equivalence (#+ Equivalence)]
     [order (#+ Order)]]
    [control
     ["." try (#+ Try)]
     ["." exception (#+ exception:)]
     ["<>" parser
      ["<.>" text (#+ Parser)]]]
    [data
     ["." text ("#\." monoid)]]
    [math
     [number
      ["n" nat ("#\." decimal)]
      ["i" int ("#\." decimal)]]]
    [type
     abstract]]])

(def: (internal year)
  (-> Int Int)
  (if (i.< +0 year)
    (inc year)
    year))

(def: (external year)
  (-> Int Int)
  (if (i.> +0 year)
    year
    (dec year)))

(exception: .public there_is_no_year_0)

... https://en.wikipedia.org/wiki/Gregorian_calendar
(abstract: .public Year
  {#.doc (example "A year in the gregorian calendar."
                  "Both negative (< 0) and positive (> 0) values are valid, but not 0."
                  "This is because the first year of the gregorian calendar was year 1.")}

  Int

  (def: .public (year value)
    {#.doc (example "A valid year in the gregorian calendar, if possible.")}
    (-> Int (Try Year))
    (case value
      +0 (exception.except ..there_is_no_year_0 [])
      _ (#try.Success (:abstraction (..internal value)))))

  (def: .public value
    (-> Year Int)
    (|>> :representation ..external))

  (def: .public epoch
    Year
    (:abstraction +1970))
  )

(def: .public days
  {#.doc (example "The amount of days in a typical year.")}
  Nat
  365)

(type: .public Period
  {#.doc (example "An amount of years.")}
  Nat)

(template [<period> <name>]
  [(def: .public <name>
     Period
     <period>)]

  [004 leap]
  [100 century]
  [400 era]
  )

(def: (divisible? factor input)
  (-> Int Int Bit)
  (|> input (i.% factor) (i.= +0)))

... https://en.wikipedia.org/wiki/Leap_year#Algorithm
(def: .public (leap? year)
  (-> Year Bit)
  (let [year (|> year ..value ..internal)]
    (and (..divisible? (.int ..leap) year)
         (or (not (..divisible? (.int ..century) year))
             (..divisible? (.int ..era) year)))))

(def: (with_year_0_leap year days)
  (let [after_year_0? (i.> +0 year)]
    (if after_year_0?
      (i.+ +1 days)
      days)))

(def: .public (leaps year)
  {#.doc (example "The number of leap years in a period of years.")}
  (-> Year Int)
  (let [year (|> year ..value ..internal)
        limit (if (i.> +0 year)
                (dec year)
                (inc year))]
    (`` (|> +0
            (~~ (template [<polarity> <years>]
                  [(<polarity> (i./ (.int <years>) limit))]

                  [i.+ ..leap]
                  [i.- ..century]
                  [i.+ ..era]
                  ))
            (..with_year_0_leap year)))))

(def: (encode year)
  (-> Year Text)
  (let [year (..value year)]
    (if (i.< +0 year)
      (i\encode year)
      (n\encode (.nat year)))))

(def: .public parser
  (Parser Year)
  (do {! <>.monad}
    [sign (<>.or (<text>.this "-") (in []))
     digits (<text>.many <text>.decimal)
     raw_year (<>.codec i.decimal (in (text\compose "+" digits)))]
    (<>.lift (..year (case sign
                       (#.Left _)  (i.* -1 raw_year)
                       (#.Right _) raw_year)))))

(implementation: .public codec
  {#.doc (example "Based on ISO 8601."
                  "For example: 2017")}
  (Codec Text Year)
  
  (def: encode ..encode)
  (def: decode (<text>.result ..parser)))

(implementation: .public equivalence
  (Equivalence Year)

  (def: (= reference subject)
    (i.= (..value reference) (..value subject))))

(implementation: .public order
  (Order Year)

  (def: &equivalence ..equivalence)

  (def: (< reference subject)
    (i.< (..value reference) (..value subject))))
