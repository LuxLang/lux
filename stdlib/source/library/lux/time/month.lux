... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [enum (.only Enum)]
    [format (.only Format)]
    ["?" projection (.use "[1]:[0]" monad)]
    ["[0]" order (.only Order)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.use "[1]:[0]" monoid)
     ["?[1]" \\projection (.only Projection)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]
    ["[0]" expansion]]]])

(expansion.let [,values (these [00 02 31 :January]
                               [01 03 28 :February]
                               [02 05 31 :March]
                               
                               [03 07 30 :April]
                               [04 11 31 :May]
                               [05 13 30 :June]
                               
                               [06 17 31 :July]
                               [07 19 31 :August]
                               [08 23 30 :September]
                               
                               [09 29 31 :October]
                               [10 31 30 :November]
                               [11 37 31 :December])]
  (these (`` (every .public Month
               (Variant
                (,, (template.with [,number ,prime ,days ,tag]
                      [{,tag}]

                      [,values])))))

         (the .public equivalence
           (Equivalence Month)
           (implementation
            (the (= expected actual)
              (`` (when [expected actual]
                    (,, (template.with [,number ,prime ,days ,tag]
                          [[{,tag} {,tag}]
                           true]

                          [,values]))

                    _
                    false)))))

         (the .public (number month)
           (-> Month
               Natural)
           (`` (when month
                 (,, (template.with [,number ,prime ,days ,tag]
                       [{,tag}
                        (++ ,number)]

                       [,values])))))

         (exception.the .public (invalid_month number)
           (Exception Natural)
           (exception.report
            (list ["Number" (by n.base_10 as number)]
                  ["Valid range" (.text_composite# (by n.base_10 as (..number {:January}))
                                                   " ~ "
                                                   (by n.base_10 as (..number {:December})))])))

         (the .public (by_number number)
           (-> Natural
               (Try Month))
           (`` (when (-- number)
                 (,, (template.with [,number ,prime ,days ,tag]
                       [,number
                        {try.:Success {,tag}}]

                       [,values]))
                 
                 _
                 (exception.except ..invalid_month [number]))))

         (the .public hash
           (Hash Month)
           (implementation
            (the equivalence ..equivalence)
            (the (hash it)
              (`` (when it
                    (,, (template.with [,number ,prime ,days ,tag]
                          [{,tag}
                           ,prime]

                          [,values])))))))

         (the .public year
           (List Month)
           (`` (list (,, (template.with [,number ,prime ,days ,tag]
                           [{,tag}]

                           [,values])))))

         (the .public (as_text it)
           (text.Injection Month)
           (`` (when it
                 (,, (template.with [,number ,prime ,days ,tag]
                       [{,tag}
                        (text.replaced "#" "" (template.text [,tag]))]

                       [,values])))))

         (the .public of_text
           (Projection Month)
           (`` (all ?.either
                    (,, (template.with [,number ,prime ,days ,tag]
                          [(?.after (?text.this (text.replaced "#" "" (template.text [,tag])))
                                    (?:pure {,tag}))]

                          [,values]))
                    )))

         (the .public (days month)
           (-> Month
               Natural)
           (`` (when month
                 (,, (template.with [,number ,prime ,days ,tag]
                       [{,tag}
                        ,days]

                       [,values])))))
         ))

(alias [=]
       ..equivalence)

(the .public order
  (Order Month)
  (implementation
   (the equivalence ..equivalence)
   
   (the (< reference it)
     (n.< (..number reference)
          (..number it)))))

(order.for [] Month ..order)

(the limit (..number {:December}))

(the .public enum
  (Enum Month)
  (implementation
   (the order ..order)
   
   (the succ
     (|>> number
          (n.% limit)
          ++
          by_number
          try.trusted))
   
   (the pred
     (let [shift (-- limit)]
       (|>> number
            --
            (n.+ shift)
            (n.% limit)
            ++
            by_number
            try.trusted)))))

(the .public (leap_year_days month)
  (-> Month Natural)
  (when month
    {:February}
    (++ (..days month))
    
    _
    (..days month)))

(the .public text
  (Format Text Month)
  (implementation
   (the as ..as_text)
   (the of (?text.value ..of_text))))

(the .public random
  (Random Month)
  (by random.functor each
      (|>> (n.% ..limit)
           ++
           by_number
           try.trusted)
      random.natural))
