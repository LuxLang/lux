(.module:
  [library
   [lux #*
    [abstract
     [equivalence (#+ Equivalence)]
     [order (#+ Order)]
     [enum (#+ Enum)]
     [codec (#+ Codec)]
     [monoid (#+ Monoid)]
     [monad (#+ do)]]
    [control
     ["." try]
     ["<>" parser
      ["<.>" text (#+ Parser)]]]
    [data
     ["." text ("#\." monoid)]]
    [math
     [number
      ["i" int]
      ["." nat ("#\." decimal)]]]
    [type
     abstract]]]
  ["." // #_
   ["#." year]])

(abstract: .public Duration
  {#.doc "Durations have a resolution of milli-seconds."}

  Int

  (def: .public of_millis
    (-> Int Duration)
    (|>> :abstraction))

  (def: .public millis
    (-> Duration Int)
    (|>> :representation))

  (template [<op> <name>]
    [(def: .public (<name> param subject)
       (-> Duration Duration Duration)
       (:abstraction (<op> (:representation param) (:representation subject))))]

    [i.+ merged]
    [i.% framed]
    )

  (template [<op> <name>]
    [(def: .public (<name> scalar)
       (-> Nat Duration Duration)
       (|>> :representation (<op> (.int scalar)) :abstraction))]

    [i.* up]
    [i./ down]
    )

  (def: .public inverse
    (-> Duration Duration)
    (|>> :representation (i.* -1) :abstraction))

  (def: .public (ticks param subject)
    (-> Duration Duration Int)
    (i./ (:representation param) (:representation subject)))

  (implementation: .public equivalence
    (Equivalence Duration)
    
    (def: (= param subject)
      (i.= (:representation param) (:representation subject))))

  (implementation: .public order
    (Order Duration)
    
    (def: &equivalence ..equivalence)
    (def: (< param subject)
      (i.< (:representation param) (:representation subject))))

  (template [<op> <name>]
    [(def: .public <name>
       (-> Duration Bit)
       (|>> :representation (<op> +0)))]

    [i.> positive?]
    [i.< negative?]
    [i.= neutral?]
    )
  )

(def: .public empty
  (..of_millis +0))

(def: .public milli_second
  (..of_millis +1))

(template [<name> <scale> <base>]
  [(def: .public <name>
     (..up <scale> <base>))]

  [second  1,000 milli_second]
  [minute     60 second]
  [hour       60 minute]
  [day        24 hour]

  [week        7 day]
  [normal_year //year.days day]
  )

(def: .public leap_year
  (..merged ..day ..normal_year))

(implementation: .public monoid
  (Monoid Duration)
  
  (def: identity ..empty)
  (def: compose ..merged))

(template [<value> <definition>]
  [(def: <definition> <value>)]

  ["D" day_suffix]
  ["h" hour_suffix]
  ["m" minute_suffix]
  ["s" second_suffix]
  ["ms" milli_second_suffix]

  ["+" positive_sign]
  ["-" negative_sign]
  )

(def: (encoded duration)
  (if (\ ..equivalence = ..empty duration)
    ($_ text\compose
        ..positive_sign
        (nat\encoded 0)
        ..milli_second_suffix)
    (let [signed? (negative? duration)
          [days time_left] [(ticks day duration) (framed day duration)]
          days (if signed?
                 (i.abs days)
                 days)
          time_left (if signed?
                      (..inverse time_left)
                      time_left)
          [hours time_left] [(ticks hour time_left) (framed hour time_left)]
          [minutes time_left] [(ticks minute time_left) (framed minute time_left)]
          [seconds time_left] [(ticks second time_left) (framed second time_left)]
          millis (..millis time_left)]
      ($_ text\compose
          (if signed? ..negative_sign ..positive_sign)
          (if (i.= +0 days) "" (text\compose (nat\encoded (.nat days)) ..day_suffix))
          (if (i.= +0 hours) "" (text\compose (nat\encoded (.nat hours)) ..hour_suffix))
          (if (i.= +0 minutes) "" (text\compose (nat\encoded (.nat minutes)) ..minute_suffix))
          (if (i.= +0 seconds) "" (text\compose (nat\encoded (.nat seconds)) ..second_suffix))
          (if (i.= +0 millis) "" (text\compose (nat\encoded (.nat millis)) ..milli_second_suffix))
          ))))

(def: parser
  (Parser Duration)
  (let [section (: (-> Text Text (Parser Nat))
                   (function (_ suffix false_suffix)
                     (|> (<text>.many <text>.decimal)
                         (<>.codec nat.decimal)
                         (<>.before (case false_suffix
                                      "" (<text>.this suffix)
                                      _ (<>.after (<>.not (<text>.this false_suffix))
                                                  (<text>.this suffix))))
                         (<>.else 0))))]
    (do <>.monad
      [sign (<>.or (<text>.this ..negative_sign)
                   (<text>.this ..positive_sign))
       days (section ..day_suffix "")
       hours (section hour_suffix "")
       minutes (section ..minute_suffix ..milli_second_suffix)
       seconds (section ..second_suffix "")
       millis (section ..milli_second_suffix "")
       .let [span (|> ..empty
                      (..merged (..up days ..day))
                      (..merged (..up hours ..hour))
                      (..merged (..up minutes ..minute))
                      (..merged (..up seconds ..second))
                      (..merged (..up millis ..milli_second)))]]
      (in (case sign
            (#.Left _) (..inverse span)
            (#.Right _) span)))))

(implementation: .public codec
  (Codec Text Duration)

  (def: encoded ..encoded)
  (def: decoded (<text>.result ..parser)))

(def: .public (difference from to)
  (-> Duration Duration Duration)
  (|> from ..inverse (..merged to)))

(implementation: .public enum
  (Enum Duration)

  (def: &order ..order)
  (def: succ
    (..merged ..milli_second))
  (def: pred
    (..merged (..inverse ..milli_second))))
