... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text)
   [abstract
    [equivalence (.only Equivalence)]
    [enum (.only Enum)]
    [format (.only Format)]
    [monoid (.only Monoid)]
    [monad (.only do)]
    ["<>" projection (.only)]
    ["[0]" order (.only Order)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text (.only)
     ["<[1]>" \\projection (.only Projection)]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["i" integer]
     ["[0]" natural (.use "[1]#[0]" base_10)]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]]]
 ["[0]" //
  ["[1][0]" year]])

(nominal.every .public Duration
  Integer

  (the .public of_millis
    (-> Integer Duration)
    (|>> nominal.of))

  (the .public millis
    (-> Duration Integer)
    (|>> nominal.as))

  (template.with [<op> <name>]
    [(the .public (<name> param subject)
       (-> Duration Duration Duration)
       (nominal.of
        (<op> (nominal.as param)
              (nominal.as subject))))]

    [i.+ composite]
    [i.% framed]
    )

  (template.with [<op> <name>]
    [(the .public (<name> scalar)
       (-> Natural Duration Duration)
       (|>> nominal.as
            (<op> (.integer scalar))
            nominal.of))]

    [i.* up]
    [i./ down]
    )

  (the .public inverse
    (-> Duration Duration)
    (|>> nominal.as
         (i.* -1)
         nominal.of))

  (the .public (ticks param subject)
    (-> Duration Duration Integer)
    (i./ (nominal.as param)
         (nominal.as subject)))

  (the .public equivalence
    (Equivalence Duration)
    (implementation
     (the (= param subject)
       (i.= (nominal.as param)
            (nominal.as subject)))))

  (alias [=]
         ..equivalence)

  (the .public order
    (Order Duration)
    (implementation
     (the equivalence ..equivalence)
     (the (< param subject)
       (i.< (nominal.as param)
            (nominal.as subject)))))

  (order.for [] Duration ..order)

  (template.with [<op> <name>]
    [(the .public <name>
       (-> Duration Bit)
       (|>> nominal.as
            (<op> +0)))]

    [i.> positive?]
    [i.< negative?]
    [i.= neutral?]
    )
  )

(the .public empty
  Duration
  (..of_millis +0))

(the .public milli_second
  Duration
  (..of_millis +1))

(template.with [<name> <scale> <base>]
  [(the .public <name>
     Duration
     (..up <scale> <base>))]

  [second  1,000 milli_second]
  [minute     60 second]
  [hour       60 minute]
  [day        24 hour]

  [week        7 day]
  [normal_year //year.days day]
  )

(the .public leap_year
  Duration
  (..composite ..day ..normal_year))

(the .public monoid
  (Monoid Duration)
  (implementation
   (the identity ..empty)
   (the composite ..composite)))

(template.with [<value> <definition>]
  [(the <definition> <value>)]

  ["D" day_suffix]
  ["h" hour_suffix]
  ["m" minute_suffix]
  ["s" second_suffix]
  ["ms" milli_second_suffix]

  ["+" positive_sign]
  ["-" negative_sign]
  )

(the .public (as_text duration)
  (if (by ..equivalence = ..empty duration)
      (.text ..positive_sign
             (natural#as 0)
             ..milli_second_suffix)
      (let [signed? (negative? duration)
            [days time_left] [(ticks day duration) (framed day duration)]
            days (if signed?
                     (i.abs days)
                     days)
            time_left (if signed?
                          (..inverse time_left)
                          time_left)
            [hours time_left] [(ticks hour time_left) (framed hour time_left)]
            [minutes time_left] [(ticks minute time_left) (framed minute time_left)]
            [seconds time_left] [(ticks second time_left) (framed second time_left)]
            millis (..millis time_left)]
        (.text (if signed? ..negative_sign ..positive_sign)
               (if (i.= +0 days) "" (.text (natural#as (.natural days)) ..day_suffix))
               (if (i.= +0 hours) "" (.text (natural#as (.natural hours)) ..hour_suffix))
               (if (i.= +0 minutes) "" (.text (natural#as (.natural minutes)) ..minute_suffix))
               (if (i.= +0 seconds) "" (.text (natural#as (.natural seconds)) ..second_suffix))
               (if (i.= +0 millis) "" (.text (natural#as (.natural millis)) ..milli_second_suffix))
               ))))

(the .public of_text
  (Projection Duration)
  (let [section (is (-> Text Text (Projection Natural))
                    (function (_ suffix false_suffix)
                      (|> (<text>.many <text>.decimal)
                          (<>.of natural.base_10)
                          (<>.before (when false_suffix
                                       "" (<text>.this suffix)
                                       _ (<>.after (<>.not (<text>.this false_suffix))
                                                   (<text>.this suffix))))
                          (<>.else 0))))]
    (do <>.monad
      [sign (<>.or (<text>.this ..negative_sign)
                   (<text>.this ..positive_sign))
       days (section ..day_suffix "")
       hours (section hour_suffix "")
       minutes (section ..minute_suffix ..milli_second_suffix)
       seconds (section ..second_suffix "")
       millis (section ..milli_second_suffix "")
       .let [span (|> ..empty
                      (..composite (..up days ..day))
                      (..composite (..up hours ..hour))
                      (..composite (..up minutes ..minute))
                      (..composite (..up seconds ..second))
                      (..composite (..up millis ..milli_second)))]]
      (pure (when sign
              {.#Left _} (..inverse span)
              {.#Right _} span)))))

(the .public text
  (Format Text Duration)
  (implementation
   (the as ..as_text)
   (the of (<text>.value ..of_text))))

(the .public (difference from to)
  (-> Duration Duration Duration)
  (|> from ..inverse (..composite to)))

(the .public enum
  (Enum Duration)
  (implementation
   (the order ..order)
   (the succ
     (..composite ..milli_second))
   (the pred
     (..composite (..inverse ..milli_second)))))

(the .public random
  (Random Duration)
  (by random.functor each ..of_millis random.integer))
