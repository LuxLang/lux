... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except function as let variant tuple)
   [abstract
    [equivalence (.only Equivalence)]
    [format (.only Format)]
    [monad (.only Monad do)]
    ["?" projection (.use "[1]#[0]" monad)]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try (.only Try)]]
   ["[0]" function (.only)
    ["[0]" predicate (.only Predicate)]]
   [data
    ["[0]" product]
    ["[0]" text (.only \n) (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" array]
     ["[0]" list (.use "[1]#[0]" monad monoid mix)
      ["?[1]" \\projection]]
     ["[0]" stack (.use "[1]#[0]" monad monoid mix)]]]
   [math
    [number
     ["n" natural (.use "[1]#[0]" base_10)]]]
   ["[0]" macro (.only)
    ["[0]" syntax]
    ["[0]" expansion]]
   ["[0]" meta (.use "[1]#[0]" functor)
    ["[0]" provenance]
    ["[0]" name]
    ["[0]" binding]
    ["[0]" code (.only)
     ["?[1]" \\projection (.only Projection)]]]]])

(every .public Variable
  Natural)

(the with_template' (.in_module# .prelude .with_template))

(with_template' [<name> <tag>]
  [(the .public (<name> type)
     (-> Type
         [Natural Type])
     (loop (value [num_args 0
                   type type])
       (when type
         {<tag> env sub_type}
         (value (++ num_args) sub_type)

         _
         [num_args type])))]

  [flat_univ_q .#Universal]
  [flat_ex_q   .#Existential]
  )

(the .public (flat_function type)
  (-> Type
      [(List Type) Type])
  (.let [[output inputs] (list.dynamic (.function (_ it)
                                         (when it
                                           {.#Function in out}
                                           {.#Some [out in]}

                                           _
                                           {.#None}))
                                       type)]
    [inputs output]))

(the .public (flat_reification it)
  (-> Type
      [Type (List Type)])
  (.let [[abstraction parameters] (list.dynamic (.function (_ it)
                                                  (when it
                                                    {.#Reification parameter abstraction}
                                                    {.#Some [abstraction parameter]}

                                                    _
                                                    {.#None}))
                                                it)]
    [abstraction (list.reversed parameters)]))

(with_template' [<name> <tag>]
  [(the .public (<name> it)
     (-> Type
         (List Type))
     (.let [[right lefts] (list.dynamic (.function (_ it)
                                          (when it
                                            {<tag> left right}
                                            {.#Some [right left]}

                                            _
                                            {.#None}))
                                        it)]
       (list#composite lefts (list right))))]

  [flat_variant .#Sum]
  [flat_tuple   .#Product]
  )

(`` (the (as_text' name_format type)
      (-> (Format Text Name) Type
          Text)
      (when type
        {.#Nominal name params}
        (text "(Nominal "
              (text.enclosed' text.double_quote name)
              " "
              (|> params
                  list.of_stack
                  (list#each (as_text' name_format))
                  (text.interposed " ")
                  (text.enclosed ["[" "]"]))
              ")")

        (,, (with_template' [<tag> <open> <close> <flat>]
              [{<tag> _}
               (text <open>
                     (|> (<flat> type)
                         (list#each (as_text' name_format))
                         list.reversed
                         (list.interposed " ")
                         (list#mix text#composite ""))
                     <close>)]

              [.#Sum  "(Or " ")" flat_variant]
              [.#Product "["   "]" flat_tuple]))

        {.#Function input output}
        (.let [[ins out] (flat_function type)]
          (text  "(-> "
                 (|> ins
                     (list#each (as_text' name_format))
                     list.reversed
                     (list.interposed " ")
                     (list#mix text#composite ""))
                 " " (as_text' name_format out) ")"))

        {.#Parameter idx}
        (n#as idx)

        {.#Variable id}
        (text "-" (n#as id))

        {.#Opaque id}
        (text "+" (n#as id))

        {.#Reification param fun}
        (.let [[type_func type_args] (flat_reification type)]
          (text  "(" (as_text' name_format type_func) " " (|> type_args (list#each (as_text' name_format)) list.reversed (list.interposed " ") (list#mix text#composite "")) ")"))

        (,, (with_template' [<tag> <desc>]
              [{<tag> env body}
               (text "("
                     <desc>
                     " {"
                     (|> env
                         list.of_stack
                         (list#each (as_text' name_format))
                         (text.interposed " "))
                     "} "
                     (as_text' name_format body)
                     ")")]

              [.#Universal "All"]
              [.#Existential "Ex"]))

        {.#Named name type}
        (by name_format as name)
        )))

(the .public absolute_text
  (-> Type
      Text)
  (..as_text' name.absolute))

(the .public (relative_text module)
  (-> Text Type
      Text)
  (..as_text' (name.relative module)))

... https://en.wikipedia.org/wiki/Lambda_calculus#%CE%B2-reduction
(`` (the (reduced env type)
      (-> (List Type)
          (Change Type))
      (when type
        {.#Nominal name params}
        {.#Nominal name (stack#each (reduced env) params)}
        
        (,, (with_template' [<tag>]
              [{<tag> left right}
               {<tag> (reduced env left) (reduced env right)}]

              [.#Sum]
              [.#Product]
              [.#Function]
              [.#Reification]))
        
        (,, (with_template' [<tag>]
              [{<tag> old_env def}
               (when old_env
                 {.#Empty}
                 {<tag> (list.as_stack env) def}

                 _
                 {<tag> (stack#each (reduced env) old_env) def})]

              [.#Universal]
              [.#Existential]))
        
        {.#Parameter idx}
        (try.else (halt! (text "Unknown type parameter"
                               \n "      Index: " (n#as idx)
                               \n "Environment: " (|> env
                                                      list.enumeration
                                                      (list#each (.function (_ [index type])
                                                                   (text (n#as index)
                                                                         " " (..absolute_text type))))
                                                      (text.interposed (text \n "             ")))))
                  (list.item idx env))
        
        _
        type
        )))

(`` (the .public equivalence
      (Equivalence Type)
      (implementation
       (the (= reference it)
         (or (for .php
                  ... TODO: Remove this once JPHP is gone.
                  false
                  (same? reference it))
             (when [reference it]
               [{.#Nominal reference_name reference_parameters} {.#Nominal it_name it_parameters}]
               (and (text.= reference_name it_name)
                    (by (stack.equivalence =) = reference_parameters it_parameters))

               (,, (with_template' [<tag>]
                     [[{<tag> reference} {<tag> it}]
                      (n.= reference it)]

                     [.#Variable]
                     [.#Opaque]
                     [.#Parameter]
                     ))

               (,, (with_template' [<tag>]
                     [[{<tag> reference_left reference_right}
                       {<tag> it_left it_right}]
                      (and (= reference_left it_left)
                           (= reference_right it_right))]

                     [.#Function]
                     [.#Reification]
                     [.#Sum]
                     [.#Product]
                     ))

               [{.#Named _ reference} it]
               (= reference it)

               [reference {.#Named _ it}]
               (= reference it)

               (,, (with_template' [<tag>]
                     [[{<tag> reference_closure reference_body} {<tag> it_closure it_body}]
                      (and (by (stack.equivalence =) = reference_closure it_closure)
                           (= reference_body it_body))]

                     [.#Universal]
                     [.#Existential]
                     ))

               _
               false
               ))))))

(alias [=]
       ..equivalence)

(`` (the .public (reified parameters abstraction)
      (-> (List Type) Type
          (Maybe Type))
      (list.mix' maybe.monad
                 (.function (on parameter abstraction)
                   (when abstraction
                     (,, (with_template' [<tag>]
                           [{<tag> env body}
                            {.#Some (reduced (list#composite (list abstraction parameter)
                                                             (list.of_stack env))
                                             body)}]

                           [.#Universal]
                           [.#Existential]))

                     {.#Reification parameter' abstraction}
                     (do maybe.monad
                       [abstraction (on parameter' abstraction)]
                       (on parameter abstraction))

                     {.#Named name abstraction}
                     (on parameter abstraction)
                     
                     _
                     {.#None}))
                 abstraction
                 parameters)))

(`` (the .public (code type)
      (-> Type
          Code)
      (when type
        {.#Nominal name params}
        (` {.#Nominal (, (code.text name))
                      (.stack (,* (list.of_stack (stack#each code params))))})

        (,, (with_template' [<tag>]
              [{<tag> idx}
               (` {<tag> (, (code.natural idx))})]

              [.#Variable]
              [.#Opaque]
              [.#Parameter]))

        (,, (with_template' [<tag>]
              [{<tag> left right}
               (` {<tag> (, (code left))
                         (, (code right))})]

              [.#Sum]
              [.#Product]
              [.#Function]
              [.#Reification]))

        {.#Named name sub_type}
        (code.name name)

        (,, (with_template' [<tag>]
              [{<tag> env body}
               (` {<tag> (.stack (,* (list.of_stack (stack#each code env))))
                         (, (code body))})]

              [.#Universal]
              [.#Existential]))
        )))

(the .public (de_aliased type)
  (Change Type)
  (when type
    {.#Named _ {.#Named name type'}}
    (de_aliased {.#Named name type'})

    _
    type))

(the .public (anonymous it)
  (Change Type)
  (when it
    {.#Named _ it}
    (anonymous it)

    _
    it))

(with_template' [<name> <base> <ctor>]
  [(the .public (<name> types)
     (-> (List Type)
         Type)
     (when (list.as_stack (list.reversed types))
       (.stack)
       <base>

       (.stack type)
       type

       {.#Top type types'}
       (stack#mix (.function (_ left right)
                    {<ctor> left right})
                  type
                  types')))]

  [variant Nothing .#Sum]
  [tuple   Any     .#Product]
  )

(with_template' [,name ,tag ,pre_processing]
  [(the .public (,name inputs output)
     (-> (List Type) Type
         Type)
     (list#mix (.function (_ cause effect)
                 {,tag cause effect})
               output
               (,pre_processing inputs)))]

  [function .#Function list.reversed]
  [reification .#Reification |>]
  )

(with_template' [<name> <tag>]
  [(the .public (<name> size body)
     (-> Natural Type
         Type)
     (when size
       0 body
       _  (|> body
              (<name> (-- size))
              {<tag> (stack)})))]

  [univ_q .#Universal]
  [ex_q   .#Existential]
  )

(`` (the .public (quantified? type)
      (-> Type
          Bit)
      (when type
        {.#Named [module name] _type}
        (quantified? _type)

        {.#Reification A F}
        (|> (..reified (list A) F)
            (by maybe.monad each quantified?)
            (maybe.else false))

        (,, (with_template' [<pattern>]
              [<pattern>
               true]

              [{.#Universal _}]
              [{.#Existential _}]))

        _
        false)))

(the .public (array depth element_type)
  (-> Natural Type
      Type)
  (when depth
    0 element_type
    _ (|> element_type
          (array (-- depth))
          (stack)
          {.#Nominal array.nominal})))

(the .public (flat_array type)
  (-> Type
      [Natural Type])
  (expansion.let [<default> [0 type]]
    (when type
      {.#Nominal name (stack element_type)}
      (if (text.= array.nominal name)
          (.let [[depth element_type] (flat_array element_type)]
            [(++ depth) element_type])
          <default>)

      _
      <default>)))

(the .public array?
  (-> Type
      Bit)
  (|>> ..flat_array
       product.left
       (n.> 0)))

(the new_secret_marker
  (macro (_ _)
    (macro.with_names ['_secret_marker_]
      (in (list '_secret_marker_)))))

(the secret_marker
  (`` (name (,, (new_secret_marker)))))

(the .public log!
  (syntax.macro (_ [input (?.or (?.and ?code.name
                                       (?.maybe (?.after (?code.this_name ..secret_marker) ?list.any)))
                                ?list.any)])
    (when input
      {.#Left [valueN valueC]}
      (do meta.monad
        [provenance meta.provenance
         valueT (binding.type valueN)
         .let [[@ _ _] provenance
               _ (.log!# (text (by name.absolute as (name ..log!)) " " (provenance.as_text provenance)
                               \n "Expression: " (when valueC
                                                   {.#Some valueC}
                                                   (code.absolute valueC)
                                                   
                                                   {.#None}
                                                   (by name.absolute as valueN))
                               \n "      Type: " (..relative_text @ valueT)))]]
        (in (list (code.name valueN))))
      
      {.#Right valueC}
      (macro.with_names ['value]
        (in (list (` (.let [(, 'value) (, valueC)]
                       (..log! (, valueC) (, (code.name ..secret_marker)) (, 'value))))))))))

(the type_parameters
  (Projection (List Text))
  (?code.tuple (?.some ?code.local)))

(the .public as
  (syntax.macro (_ [type_vars type_parameters
                    input ?list.any
                    output ?list.any
                    value (?.maybe ?list.any)])
    (macro.with_names ['_]
      (.let [casterC (` (is (for_any ((, '_) (,* (list#each code.local type_vars)))
                              (-> (, input) (, output)))
                            (|>> as_expected)))]
        (when value
          {.#None}
          (in (list casterC))
          
          {.#Some value}
          (in (list (` ((, casterC) (, value))))))))))

(every Typed
  (Record
   [#type Code
    #term Code]))

(the (typed lux)
  (-> Lux
      (Projection Typed))
  (do ?.monad
    [it ?list.any
     type_check (?.of_try (meta.value lux (expansion.complete it)))]
    (<| (?code.locally type_check)
        ?code.form
        (?.after (?code.this (` .is#)))
        (?.and ?list.any ?list.any))))

... TODO: Make sure the generated code always gets optimized away.
(the .public sharing
  (syntax.macro (_ lux [type_vars ..type_parameters
                        exemplar (..typed lux)
                        computation (..typed lux)])
    (macro.with_names ['_]
      (.let ['type (` (for_any ((, '_) (,* (list#each code.local type_vars)))
                        (-> (, (its #type exemplar))
                            (, (its #type computation)))))
             'share (` (is (, 'type)
                           (.function ((, '_) (, '_))
                             (, (its #term computation)))))]
        (in (list (` ((, 'share) (, (its #term exemplar))))))))))

(the .public by_example
  (syntax.macro (_ lux [type_vars ..type_parameters
                        exemplar (..typed lux)
                        extraction ?list.any])
    (in (list (` (.type_of (..sharing [(,* (list#each code.local type_vars))]
                             (is (, (its #type exemplar))
                                 (, (its #term exemplar)))
                             (is (, extraction)
                                 ... The value of this expression will never be relevant, so it doesn't matter what it is.
                                 (.as .Nothing [])))))))))

(`` (the .public (replaced before after)
      (-> Type Type Type
          Type)
      (.function (value it)
        (if (by ..equivalence = before it)
            after
            (when it
              {.#Nominal name co_variant}
              {.#Nominal name (stack#each value co_variant)}

              (,, (with_template' [<tag>]
                    [{<tag> left right}
                     {<tag> (value left)
                            (value right)}]

                    [.#Sum]
                    [.#Product]
                    [.#Function]
                    [.#Reification]))

              (,, (with_template' [<tag>]
                    [{<tag> env body}
                     {<tag> (stack#each value env)
                            (value body)}]

                    [.#Universal]
                    [.#Existential]))

              (,, (with_template' [<pattern>]
                    [<pattern>
                     it]

                    [{.#Parameter _}]
                    [{.#Variable _}]
                    [{.#Opaque _}]
                    [{.#Named _}]))
              )))))

(the .public let
  (syntax.macro (_ [bindings (?code.tuple (?.some (?.and ?list.any ?list.any)))
                    bodyT ?list.any])
    (in (list (` (expansion.let [(,* (|> bindings
                                         (list#each (.function (_ [localT valueT])
                                                      (list localT (` (.these (, valueT))))))
                                         list#conjoint))]
                   (, bodyT)))))))

(alias [as_text]
       ..absolute_text)
