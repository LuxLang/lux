... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except function let variant tuple)
   [abstract
    [equivalence (.only Equivalence)]
    [format (.only Format)]
    ["?" projection (.use "[1]#[0]" monad)]
    ["[0]" monad]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try (.only Try)]]
   ["[0]" function (.only)
    [predicate (.only Predicate)]]
   [data
    ["[0]" product]
    ["[0]" text (.only \n) (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" array]
     ["[0]" list (.use "[1]#[0]" monad monoid mix)
      ["?[1]" \\projection]]
     ["[0]" stack (.use "[1]#[0]" functor mix)]]]
   [logic
    ["[0]" bit]]
   [math
    [number
     [/64
      ["n" natural (.use "[1]#[0]" base_10)]]]]
   ["[0]" macro (.only)
    ["[0]" syntax]
    ["[0]" expansion]]
   ["[0]" meta (.use "[1]#[0]" functor)
    ["[0]" provenance]
    ["[0]" name]
    ["[0]" binding]
    ["[0]" code (.only)
     ["?[1]" \\projection (.only Projection)]]]
   [compiler
    ["@[0]" type]]
   [aspect
    ["[0]" view]]]])

(every .public Variable
  Natural)

(the with_template (.in_module# .prelude .with_template))

(with_template [<name> <tag>]
  [(the .public (<name> type)
     (-> Type
         [Natural Type])
     (loop (value [num_args 0
                   type type])
       (when type
         {.#Quantification <tag> env sub_type}
         (value (++ num_args) sub_type)

         _
         [num_args type])))]

  [[flat_univ_q .universal]
   [flat_ex_q   .existential]])

(the template#macro (.in_module# .prelude .template#macro))
(the function_type (.type_name# "function"))

(`` (the .public Function
      (template#macro (_ ,left ,right)
                      [{.#Nominal (,, (static ..function_type))
                                  (.list [(,, (static .contra_variant)) ,left]
                                         [(,, (static .co_variant)) ,right])}])))

(the .public (flat_function type)
  (-> Type
      [(List Type) Type])
  (.let [[output inputs] (list.dynamic (.function (_ it)
                                         (when it
                                           (Function in out)
                                           {.#Some [out in]}

                                           _
                                           {.#None}))
                                       type)]
    [inputs output]))

(the .public (flat_reification it)
  (-> Type
      [Type (List Type)])
  (.let [[abstraction parameters] (list.dynamic (.function (_ it)
                                                  (when it
                                                    {.#Reification parameter abstraction}
                                                    {.#Some [abstraction parameter]}

                                                    _
                                                    {.#None}))
                                                it)]
    [abstraction (list.reversed parameters)]))

(the sum_type (.type_name# "sum"))
(the product_type (.type_name# "product"))
(with_template [<name> ,name ,constructor]
  [(`` (the .public ,constructor
         (template#macro (_ ,left ,right)
                         [{.#Nominal (,, (static ,name))
                                     (.list [(,, (static .co_variant)) ,left]
                                            [(,, (static .co_variant)) ,right])}])))

   (the .public (<name> it)
     (-> Type
         (List Type))
     (.let [[right lefts] (list.dynamic (.function (_ it)
                                          (when it
                                            (,constructor left right)
                                            {.#Some [right left]}

                                            _
                                            {.#None}))
                                        it)]
       (list#composite lefts (list right))))]

  [[flat_variant ..sum_type Sum]
   [flat_tuple   ..product_type Product]])

(the polarity_as_text
  (text.Injection Polarity)
  (.let [format_of_name (name.relative .prelude)]
    (.function (_ it)
      (`` (when it
            (,, (with_template [,option]
                  [,option (by format_of_name as (name ,option))]

                  [[.contra_variant]
                   [.co_variant]])))))))

(`` (the (as_text' name_format type)
      (-> (Format Text Name)
          (text.Injection Type))
      (when type
        (,, (with_template [,type <open> <close> <flat>]
              [(,type _ _)
               (text <open>
                     (|> (<flat> type)
                         (list#each (as_text' name_format))
                         list.reversed
                         (list.interposed " ")
                         (list#mix text#composite ""))
                     <close>)]

              [[..Sum  "(Or " ")" flat_variant]
               [..Product "["   "]" flat_tuple]]))

        (..Function _ _)
        (.let [[ins out] (flat_function type)]
          (text  "(-> "
                 (|> ins
                     (list#each (as_text' name_format))
                     list.reversed
                     (list.interposed " ")
                     (list#mix text#composite ""))
                 " " (as_text' name_format out) ")"))

        {.#Nominal name params}
        (text "(Nominal "
              (text.enclosed' text.double_quote name)
              " "
              (|> params
                  (list#each (.function (_ [polarity it])
                               (text "[" (polarity_as_text polarity)
                                     " " (as_text' name_format it)
                                     "]")))
                  (text.interposed " ")
                  (text.enclosed ["[" "]"]))
              ")")

        {.#Parameter parameter level}
        (text "(" (when parameter
                    .abstraction "abstraction"
                    .argument "argument")
              " " (n#as level)
              ")")

        {.#Variable id}
        (text "-" (n#as id))

        {.#Opaque id}
        (text "+" (n#as id))

        {.#Reification param fun}
        (.let [[type_func type_args] (flat_reification type)]
          (text  "(" (as_text' name_format type_func) " " (|> type_args (list#each (as_text' name_format)) list.reversed (list.interposed " ") (list#mix text#composite "")) ")"))

        (,, (with_template [<tag> <desc>]
              [{.#Quantification <tag> env body}
               (text "(" <desc>
                     " " (|> env
                             (view.of list.stack)
                             (list#each (.function (_ [abstraction argument])
                                          (text "[" (as_text' name_format abstraction)
                                                " " (as_text' name_format argument)
                                                "]")))
                             (text.interposed " ")
                             (text.enclosed ["{" "}"]))
                     " " (as_text' name_format body)
                     ")")]

              [[.universal "for_any"]
               [.existential "for_some"]]))

        {.#Named name type}
        (by name_format as name)
        )))

(the .public absolute_text
  (text.Injection Type)
  (..as_text' name.absolute))

(the .public (relative_text module)
  (-> Text
      (text.Injection Type))
  (..as_text' (name.relative module)))

... https://en.wikipedia.org/wiki/Lambda_calculus#%CE%B2-reduction
(`` (the (reduced env type)
      (-> (Stack [Type Type])
          (Change Type))
      (when type
        {.#Nominal name params}
        {.#Nominal name (list#each (.function (_ [polarity it])
                                     [polarity (reduced env it)])
                                   params)}
        
        {.#Reification left right}
        {.#Reification (reduced env left) (reduced env right)}
        
        {.#Quantification quantification old_env def}
        {.#Quantification quantification
                          (when old_env
                            {.#Empty}
                            env

                            _
                            (stack#each (.function (_ [abstraction argument])
                                          [(reduced env abstraction)
                                           (reduced env argument)])
                                        old_env))
                          def}
        
        {.#Parameter parameter idx}
        (when (stack.item idx env)
          {try.#Success [abstraction argument]}
          (when parameter
            .abstraction abstraction
            .argument argument)

          failure
          (halt! (text "Unknown type parameter"
                       \n "  Parameter: " (bit.as_text parameter)
                       \n "      Index: " (n#as idx)
                       \n "Environment: " (|> env
                                              (view.of list.stack)
                                              list.enumeration
                                              (list#each (.function (_ [index [abstraction argument]])
                                                           (text (n#as index)
                                                                 " " (..absolute_text abstraction)
                                                                 " " (..absolute_text argument))))
                                              (text.interposed (text \n "             "))))))
        
        _
        type
        )))

(`` (the .public equivalence
      (Equivalence Type)
      (implementation
       (the (= reference it)
         (or (for .php
                  ... TODO: Remove this once JPHP is gone.
                  false
                  (same? reference it))
             (when [reference it]
               [{.#Nominal reference_name reference_parameters}
                {.#Nominal it_name it_parameters}]
               (and (text.= reference_name it_name)
                    (by (list.equivalence (product.equivalence bit.equivalence =)) =
                        reference_parameters
                        it_parameters))

               [{.#Parameter parameter_of_reference level_of_reference} {.#Parameter parameter_of_it level_of_it}]
               (and (bit.= parameter_of_reference parameter_of_it)
                    (n.= level_of_reference level_of_it))

               (,, (with_template [<tag>]
                     [[{<tag> reference} {<tag> it}]
                      (n.= reference it)]

                     [[.#Variable]
                      [.#Opaque]]))

               [{.#Reification reference_left reference_right}
                {.#Reification it_left it_right}]
               (and (= reference_left it_left)
                    (= reference_right it_right))

               [{.#Named _ reference} it]
               (= reference it)

               [reference {.#Named _ it}]
               (= reference it)

               [{.#Quantification quantification_of_reference reference_closure reference_body}
                {.#Quantification quantification_of_it it_closure it_body}]
               (and (bit.= quantification_of_reference quantification_of_it)
                    (by (stack.equivalence (product.equivalence = =)) = reference_closure it_closure)
                    (= reference_body it_body))

               _
               false
               ))))))

(alias [=]
       ..equivalence)

(`` (the .public (reified parameters abstraction)
      (-> (List Type) Type
          (Maybe Type))
      (list.mix' maybe.monad
                 (.function (on parameter abstraction)
                   (when abstraction
                     {.#Quantification quantification env body}
                     {.#Some (reduced {.#Top [abstraction parameter]
                                             env}
                                      body)}

                     {.#Reification parameter' abstraction}
                     (monad.let maybe.monad
                       [abstraction (on parameter' abstraction)]
                       (on parameter abstraction))

                     {.#Named name abstraction}
                     (on parameter abstraction)
                     
                     _
                     {.#None}))
                 abstraction
                 parameters)))

(`` (the .public (code type)
      (-> Type
          Code)
      (when type
        {.#Nominal name params}
        (` {.#Nominal (, (code.text name))
                      (.list (,* (list#each (.function (_ [polarity it])
                                              (` [(, (code.bit polarity))
                                                  (, (code it))]))
                                            params)))})

        {.#Parameter parameter level}
        (` {.#Parameter (, (code.bit parameter))
                        (, (code.natural level))})

        (,, (with_template [<tag>]
              [{<tag> idx}
               (` {<tag> (, (code.natural idx))})]

              [[.#Variable]
               [.#Opaque]]))

        {.#Reification left right}
        (` {.#Reification (, (code left))
                          (, (code right))})

        {.#Named name sub_type}
        (code.name name)

        {.#Quantification quantification env body}
        (` {.#Quantification (, (code.bit quantification))
                             (.stack (,* (|> env
                                             (stack#each (.function (_ [abstraction argument])
                                                           (` [(, (code abstraction))
                                                               (, (code argument))])))
                                             (view.of list.stack))))
                             (, (code body))})
        )))

(the .public (de_aliased type)
  (Change Type)
  (when type
    {.#Named _ {.#Named name type'}}
    (de_aliased {.#Named name type'})

    _
    type))

(the .public (anonymous it)
  (Change Type)
  (when it
    {.#Named _ it}
    (anonymous it)

    _
    it))

(with_template [<name> <base> ,type]
  [(the .public (<name> types)
     (-> (List Type)
         Type)
     (when (|> types
               list.reversed
               (view.as list.stack))
       (.stack)
       <base>

       (.stack type)
       type

       {.#Top type types'}
       (stack#mix (.function (_ left right)
                    (,type left right))
                  type
                  types')))]

  [[variant Nothing ..Sum]
   [tuple   Any     ..Product]])

(the .public (function inputs output)
  (-> (List Type)
      (Change Type))
  (list#mix (.function (_ cause effect)
              (..Function cause effect))
            output
            (list.reversed inputs)))

(the .public (reification parameters abstraction)
  (-> (List Type)
      (Change Type))
  (list#mix (.function (_ parameter abstraction)
              {.#Reification parameter abstraction})
            abstraction
            parameters))

(with_template [<name> <tag>]
  [(the .public (<name> size body)
     (-> Natural
         (Change Type))
     (when size
       0 body
       _  (|> body
              (<name> (-- size))
              {.#Quantification <tag> (stack)})))]

  [[univ_q .universal]
   [ex_q   .existential]])

(`` (the .public (quantified? type)
      (Predicate Type)
      (when type
        {.#Quantification _}
        true

        {.#Named [module name] _type}
        (quantified? _type)

        {.#Reification A F}
        (|> (..reified (list A) F)
            (by maybe.monad each quantified?)
            (maybe.else false))

        _
        false)))

(the .public (array depth element_type)
  (-> Natural
      (Change Type))
  (when depth
    0 element_type
    _ (.let [element_type (array (-- depth) element_type)]
        (@type.Array element_type element_type))))

(the .public (flat_array type)
  (-> Type
      [Natural Type])
  (when type
    (@type.Array to_write to_read)
    (.let [[depth element_type] (flat_array to_read)]
      [(++ depth) element_type])

    _
    [0 type]))

(the .public array?
  (Predicate Type)
  (|>> ..flat_array
       product.left
       (n.> 0)))

(the new_secret_marker
  (macro (_ _)
    (macro.with_names ['_secret_marker_]
      (pure (list '_secret_marker_)))))

(the secret_marker
  (`` (name (,, (new_secret_marker)))))

(the .public log!
  (syntax.macro (_ [input (?.or (?.and ?code.name
                                       (?.maybe (?.after (?code.this_name ..secret_marker) ?list.any)))
                                ?list.any)])
    (when input
      {.#Left [valueN valueC]}
      (monad.let meta.monad
        [provenance meta.provenance
         valueT (binding.type valueN)
         .let [[@ _ _] provenance
               _ (.log!# (text (by name.absolute as (name ..log!)) " " (provenance.as_text provenance)
                               \n "Expression: " (when valueC
                                                   {.#Some valueC}
                                                   (code.absolute valueC)
                                                   
                                                   {.#None}
                                                   (by name.absolute as valueN))
                               \n "      Type: " (..relative_text @ valueT)))]]
        (pure (list (code.name valueN))))
      
      {.#Right valueC}
      (macro.with_names ['value]
        (pure (list (` (.let [(, 'value) (, valueC)]
                         (..log! (, valueC) (, (code.name ..secret_marker)) (, 'value))))))))))

(the type_parameters
  (Projection (List Text))
  (?code.tuple (?.some ?code.local)))

(every Typed
  (Record
   [#type Code
    #term Code]))

(the (typed lux)
  (-> Lux
      (Projection Typed))
  (monad.let ?.monad
    [it ?list.any
     type_check (?.of_try (meta.value lux (expansion.complete it)))]
    (<| (?code.locally type_check)
        ?code.form
        (?.after (?code.this (` .is#)))
        (?.and ?list.any ?list.any))))

... TODO: Make sure the generated code always gets optimized away.
(the .public sharing
  (syntax.macro (_ lux [type_vars ..type_parameters
                        exemplar (..typed lux)
                        computation (..typed lux)])
    (macro.with_names ['_]
      (.let ['type (` (for_any ((, '_) (,* (list#each code.local type_vars)))
                        (-> (, (its #type exemplar))
                            (, (its #type computation)))))
             'share (` (is (, 'type)
                           (.function ((, '_) (, '_))
                             (, (its #term computation)))))]
        (pure (list (` ((, 'share) (, (its #term exemplar))))))))))

(the .public by_example
  (syntax.macro (_ lux [type_vars ..type_parameters
                        exemplar (..typed lux)
                        extraction ?list.any])
    (pure (list (` (.type_of (..sharing [(,* (list#each code.local type_vars))]
                               (is (, (its #type exemplar))
                                   (, (its #term exemplar)))
                               (is (, extraction)
                                   ... The value of this expression will never be relevant, so it doesn't matter what it is.
                                   (as (-> Any .Nothing) [])))))))))

(`` (the .public (replaced before after)
      (-> Type Type
          (Change Type))
      (.function (value it)
        (if (by ..equivalence = before it)
            after
            (when it
              {.#Nominal name co_variant}
              {.#Nominal name (list#each (.function (_ [polarity it])
                                           [polarity (value it)])
                                         co_variant)}

              {.#Reification left right}
              {.#Reification (value left)
                             (value right)}

              {.#Quantification quantification env body}
              {.#Quantification quantification
                                (stack#each (.function (_ [abstraction argument])
                                              [(value abstraction)
                                               (value argument)])
                                            env)
                                (value body)}

              (,, (with_template [<pattern>]
                    [<pattern>
                     it]

                    [[{.#Parameter _}]
                     [{.#Variable _}]
                     [{.#Opaque _}]
                     [{.#Named _}]]))
              )))))

(the .public let
  (syntax.macro (_ [bindings (?code.tuple (?.some (?.and ?list.any ?list.any)))
                    bodyT ?list.any])
    (pure (list (` (expansion.let [(,* (|> bindings
                                           (list#each (.function (_ [localT valueT])
                                                        (list localT (` (.these (, valueT))))))
                                           list#conjoint))]
                     (, bodyT)))))))

(alias [as_text]
       ..absolute_text)
