... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Change
                its has revised type)
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception (.only Exception)]]
   [data
    [collection
     ["[0]" stack]
     ["[0]" list (.use "[1]#[0]" monoid)]]]
   [math
    [number
     ["[0]" natural (.use "[1]#[0]" base_10)]]]
   [macro
    ["^" pattern]
    ["[0]" template]]]]
 ["[0]" //])

(every .public Binding
  (Maybe Type))

(the .public un_bound
  (template.macro (_)
    [{.#None}]))

(the .public bound
  (template.macro (_ ,type)
    [{.#Some ,type}]))

(template.with [,name]
  [(exception.the .public (,name [it])
     (Exception //.Variable)
     (exception.report
      (list ["Variable" (natural#as it)])))]

  [not_known]
  [not_bound]
  [already_exists]
  )

(every .public Environment
  (List [//.Variable Binding]))

(the It ..Environment)

(the .public empty
  ..It
  (list))

(the (position expected it)
  (-> //.Variable ..It
      (Try Natural))
  (let [limit (list.size it)]
    (loop (position [value 0])
      (if (natural.< limit value)
          (let [[actual _] (.list_item# value it)]
            (if (natural.= expected actual)
                {try.#Success value}
                (position (++ value))))
          (exception.except ..not_known [expected])))))

(the .public (has variable it)
  (-> //.Variable ..It
      (Try ..It))
  (when (..position variable it)
    {try.#Failure error}
    {try.#Success (list#composite it (list [variable (..un_bound)]))}

    already_exists!
    (exception.except ..already_exists [variable])))

(the .public (lacks variable it)
  (-> //.Variable
      (.Change ..It))
  (when (..position variable it)
    {try.#Success to_remove}
    (list#composite (list.first to_remove it)
                    (list.after (++ to_remove) it))

    already_lacks!
    it))

(the variable#=
  (template.macro (_ ,super ,sub)
    [(.i64_=# (.is //.Variable ,super)
              (.is //.Variable ,sub))]))

(every .public (Query it)
  (-> ..It
      (Try it)))

(the .public (its expected)
  (-> //.Variable
      (Query Binding))
  (list.one (function (_ [actual var_type])
              (if (variable#= expected actual)
                  {.#Some var_type}
                  {.#None}))))

(the (revised expected binding it)
  (-> //.Variable Binding ..It
      (Try ..It))
  (|> it
      (..position expected)
      (try#each (function (_ item)
                  (list.revised item
                                (function (_ [actual var_type])
                                  [actual binding])
                                it)))))

(the .public (binding variable it)
  (-> //.Variable
      (Query Binding))
  (|> (..its variable it)
      (try#each (function (_ it)
                  (when it
                    (^.or (..bound {.#Variable _})
                          (..un_bound))
                    (..un_bound)

                    bound
                    bound)))))

(the .public (type variable it)
  (-> //.Variable
      (Query Type))
  (do try.monad
    [it (..binding variable it)]
    (when it
      (..bound it)
      (in it)

      un_bound
      (exception.except ..not_bound [variable]))))

(the .public (bound? variable it)
  (-> //.Variable
      (Query Bit))
  (do try.monad
    [it (..binding variable it)]
    (in (when it
          (..bound it)
          true

          un_bound
          false))))

(every .public Change
  (-> ..It
      (Try ..It)))

(exception.the .public (cannot_bind_again [variable wanted current])
  (Exception [//.Variable Type Type])
  (exception.report
   (list ["Variable" (natural#as variable)]
         ["Wanted type" (//.absolute_text wanted)]
         ["Current type" (//.absolute_text current)])))

(the .public (new variable type it)
  (-> //.Variable Type
      Change)
  (do try.monad
    [binding (..its variable it)]
    (when binding
      (..un_bound)
      (..revised variable {.#Some type} it)

      (..bound current)
      (exception.except ..cannot_bind_again [variable type current]))))

(the .public (changed variable binding it)
  (-> //.Variable Binding
      Change)
  (do try.monad
    [variable_is_known! (..its variable it)]
    (..revised variable binding it)))

(every .public Ring
  (Stack //.Variable))

(the link
  (template.macro (_ ,it)
    [{.#Variable ,it}]))

(the .public (ring start it)
  (-> //.Variable
      (Query Ring))
  (loop (ring [current start
               output (stack start)])
    (when (..its current it)
      {try.#Success (..bound type)}
      (when type
        (..link next)
        (if (variable#= start next)
            {try.#Success output}
            (ring next (stack.partial next output)))
        
        invalid
        {try.#Success (stack)})

      {try.#Success (..un_bound)}
      {try.#Success output}
      
      {try.#Failure error}
      {try.#Failure error})))

... TODO: Can be optimized...
(the .public (two left right it)
  (-> //.Variable //.Variable
      Change)
  (do try.monad
    [it (..new left {.#Variable right} it)]
    (..new right {.#Variable left} it)))

... TODO: Can be optimized...
(the .public (three interpose to from it)
  (-> //.Variable //.Variable //.Variable
      Change)
  (do try.monad
    [it (..changed from (..bound {.#Variable interpose}) it)]
    (..changed interpose (..bound {.#Variable to}) it)))
