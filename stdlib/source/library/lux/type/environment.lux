... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Change
                its has revised type)
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [collection
     ["[0]" stack]
     ["[0]" list (.use "[1]#[0]" monoid)]]]
   [math
    [number
     [/64
      ["[0]" natural (.use "[1]#[0]" base_10)]]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   ["[0]" function]]]
 ["[0]" //])

(the try#pure
  (template.macro (_ ,it)
    [{try.#Success ,it}]))

(the try#let
  (template.macro (_ ,binding ,value ,body)
    [(when ,value
       {try.#Success ,binding}
       ,body

       {try.#Failure error}
       {try.#Failure error})]))

(the try#each
  (template.macro (_ ,binding ,value ,body)
    [(try#let ,binding ,value (try#pure ,body))]))

(every .public Binding
  (Maybe Type))

(the .public un_bound
  (template.macro (_)
    [{.#None}]))

(the .public bound
  (template.macro (_ ,type)
    [{.#Some ,type}]))

(template.with [,name]
  [(exception.the .public (,name [it])
     (Exception //.Variable)
     (exception.report
      (list ["Variable" (natural#as it)])))]

  [[not_known]
   [not_bound]
   [already_exists]]
  )

(every .public Environment
  (List Binding))

(the It ..Environment)

(every .public Change
  (-> ..It
      (Try ..It)))

(the .public empty
  ..It
  (list))

(the variable#=
  (template.macro (_ ,super ,sub)
    [(.i64_=# (.is //.Variable ,super)
              (.is //.Variable ,sub))]))

(every .public (Query it)
  (-> ..It
      (Try it)))

(the .public its
  (-> //.Variable
      (Query Binding))
  list.item)

(the (revised variable binding)
  (-> //.Variable Binding
      (.Change ..It))
  (list.revised variable (function.constant binding)))

(the .public (binding variable it)
  (-> //.Variable
      (Query Binding))
  (<| (try#each it (..its variable it))
      (when it
        (^.or (..bound {.#Variable .general _})
              (..un_bound))
        (..un_bound)

        bound
        bound)))

(the .public (type variable it)
  (-> //.Variable
      (Query Type))
  (<| (try#let it (..binding variable it))
      (when it
        (..bound it)
        (try#pure it)

        un_bound
        (exception.except ..not_bound [variable]))))

(the .public (bound? variable it)
  (-> //.Variable
      (Query Bit))
  (<| (try#let it (..binding variable it))
      (try#pure (when it
                  (..bound it)
                  true

                  un_bound
                  false))))

(exception.the .public (cannot_bind_again [variable wanted current])
  (Exception [//.Variable Type Type])
  (exception.report
   (list ["Variable" (natural#as variable)]
         ["Wanted type" (//.absolute_text wanted)]
         ["Current type" (//.absolute_text current)])))

(the .public (new variable type it)
  (-> //.Variable Type
      Change)
  (<| (try#let binding (..its variable it))
      (when binding
        (..un_bound)
        {try.#Success (..revised variable {.#Some type} it)}

        (..bound current)
        (exception.except ..cannot_bind_again [variable type current]))))

(the .public (changed variable binding it)
  (-> //.Variable Binding
      Change)
  (<| (try#let variable_is_known! (..its variable it))
      {try.#Success (..revised variable binding it)}))

(every .public Ring
  (Stack //.Variable))

(the link
  (template.macro (_ ,it)
    [{.#Variable .general ,it}]))

(the .public (ring start it)
  (-> //.Variable
      (Query Ring))
  (loop (ring [current start
               output (stack start)])
    (when (..its current it)
      {try.#Success (..bound type)}
      (when type
        (..link next)
        (if (variable#= start next)
            {try.#Success output}
            (ring next (stack.partial next output)))
        
        invalid
        {try.#Success (stack)})

      {try.#Success (..un_bound)}
      {try.#Success output}
      
      {try.#Failure error}
      {try.#Failure error})))

(the .public (two left right it)
  (-> //.Variable //.Variable
      Change)
  (<| (try#let it (..new left {.#Variable .general right} it))
      (..new right {.#Variable .general left} it)))

(the .public (three interpose to from it)
  (-> //.Variable //.Variable //.Variable
      Change)
  (<| (try#let it (..changed from (..bound {.#Variable .general interpose}) it))
      (..changed interpose (..bound {.#Variable .general to}) it)))
