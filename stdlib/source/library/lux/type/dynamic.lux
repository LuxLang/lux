... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except static)
   ["[0]" debug]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]]
   [macro (.only with_names)
    ["[0]" syntax]
    ["[0]" expansion]]
   [meta
    ["[0]" code
     ["<[1]>" \\projection]]]]]
 ["[0]" // (.only)
  ["[0]" nominal (.only)]])

(exception.the .public (wrong_type [expected actual])
  (Exception [Type Type])
  (exception.report
   (list ["Expected" (//.as_text expected)]
         ["Actual" (//.as_text actual)])))

(expansion.let [<representation> [Type Any]]
  (nominal.every .public Dynamic
    <representation>
    
    (the .public dynamic
      (syntax.macro (_ [value <code>.any])
        (with_names ['value]
          (in (list (` (.let [(, 'value) (, value)]
                         (as Dynamic [(.type_of (, 'value)) (, 'value)]))))))))

    (the .public static
      (syntax.macro (_ [type <code>.any
                        value <code>.any])
        (with_names ['type 'value]
          (in (list (` (.let [[(, 'type) (, 'value)] (|> (, value)
                                                         (is Dynamic)
                                                         (as <representation>))]
                         (.is (try.Try (, type))
                              (.if (.by //.equivalence (,' =)
                                        (.type (, type))
                                        (, 'type))
                                {try.#Success (.as (, type) (, 'value))}
                                (exception.except ..wrong_type [(.type (, type)) (, 'type)]))))))))))

    (the .public (as_text value)
      (-> Dynamic
          (Try Text))
      (let [[type value] (nominal.representation value)]
        (debug.representation type value)))
    ))
