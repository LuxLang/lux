(.module:
  [library
   [lux #*
    ["." debug]
    [control
     ["." try (#+ Try)]
     ["." exception (#+ exception:)]]
    [data
     [text
      ["%" format]]]
    [macro (#+ with_gensyms)
     ["." syntax (#+ syntax:)]]
    ["." type
     abstract]]])

(exception: .public (wrong_type {expected Type} {actual Type})
  (exception.report
   ["Expected" (%.type expected)]
   ["Actual" (%.type actual)]))

(abstract: .public Dynamic
  {#.doc "A value coupled with its type, so it can be checked later."}

  [Type Any]

  (def: abstraction (-> [Type Any] Dynamic) (|>> :abstraction))
  (def: representation (-> Dynamic [Type Any]) (|>> :representation))

  (syntax: .public (:dynamic value)
    {#.doc (doc (: Dynamic
                   (:dynamic 123)))}
    (with_gensyms [g!value]
      (in (list (` (let [(~ g!value) (~ value)]
                     ((~! ..abstraction) [(:of (~ g!value)) (~ g!value)])))))))

  (syntax: .public (:check type value)
    {#.doc (doc (: (try.Try Nat)
                   (:check Nat (:dynamic 123))))}
    (with_gensyms [g!type g!value]
      (in (list (` (let [[(~ g!type) (~ g!value)] ((~! ..representation) (~ value))]
                     (: ((~! try.Try) (~ type))
                        (if (\ (~! type.equivalence) (~' =)
                               (.type (~ type)) (~ g!type))
                          (#try.Success (:as (~ type) (~ g!value)))
                          ((~! exception.except) ..wrong_type [(.type (~ type)) (~ g!type)])))))))))

  (def: .public (format value)
    (-> Dynamic (Try Text))
    (let [[type value] (:representation value)]
      (debug.representation type value)))
  )
