... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except let)
   [abstract
    ["<>" projection (.use "[1]:[0]" functor)]
    ["[0]" monad (.only Monad)
     ["[0]" indexed]]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" set]
     ["[0]" sequence (.only Sequence)]
     ["[0]" list (.use "[1]:[0]" functor mix)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   ["[0]" macro (.only)
    ["[0]" syntax]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" code
     ["<[1]>" \\projection (.only Projection)]]]]]
 [//
  ["[0]" nominal]])

(every .public (Procedure ! input output value)
  (-> input (! [output value])))

(every .public (Linear ! value)
  (for_any (_ keys)
    (Procedure ! keys keys value)))

(every .public (Affine ! permissions value)
  (for_any (_ keys)
    (Procedure ! keys [permissions keys] value)))

(every .public (Relevant ! permissions value)
  (for_any (_ keys)
    (Procedure ! [permissions keys] keys value)))

(the .public (monad monad)
  (for_any (_ !) (-> (Monad !) (indexed.Monad (Procedure !))))
  (implementation
   (the (pure value)
     (function (_ keys)
       (by monad pure [keys value])))

   (the (then f input)
     (function (_ keysI)
       (monad.let monad
         [[keysT value] (input keysI)]
         ((f value) keysT))))))

(the .public (value monad procedure)
  (for_any (_ ! v) (-> (Monad !) (Linear ! v) (! v)))
  (monad.let monad
    [[_ output] (procedure [])]
    (pure output)))

(the .public (lifted monad procedure)
  (for_any (_ ! v) (-> (Monad !) (! v) (Linear ! v)))
  (function (_ keys)
    (monad.let monad
      [output procedure]
      (pure [keys output]))))

(nominal.every .public Ordered Any)
(nominal.every .public Commutative Any)

(nominal.every .public (Key mode key)
  Any

  (template.with [<name> <mode>]
    [(the <name>
       (for_some (_ k) (-> Any (Key <mode> k)))
       (|>> nominal.of))]

    [[ordered_key     Ordered]
     [commutative_key Commutative]]))

(nominal.every .public (Res key value)
  value

  (template.with [<name> <mode> <key>]
    [(the .public (<name> monad value)
       (for_any (_ ! v) (for_some (_ k) (-> (Monad !) v (Affine ! (Key <mode> k) (Res k v)))))
       (function (_ keys)
         (by monad pure [[(<key> []) keys] (nominal.of value)])))]

    [[ordered     Ordered     ..ordered_key]
     [commutative Commutative ..commutative_key]])

  (the .public (read monad resource)
    (for_any (_ ! v k m)
      (-> (Monad !) (Res k v) (Relevant ! (Key m k) v)))
    (function (_ [key keys])
      (by  monad pure [keys (nominal.as resource)])))
  )

(exception.the .public index_cannot_be_repeated)

(the indices
  (Projection (List Natural))
  (monad.let [! <>.monad]
    [it (<code>.tuple (<>.some <code>.natural))
     _ (<>.assertion (exception.error ..index_cannot_be_repeated [])
                     (|> it
                         (set.of_list n.hash)
                         set.size
                         (n.= (list.size it))))]
    (pure it)))

(the (no_op monad)
  (for_any (_ mode)
    (-> (Monad mode)
        (Linear mode Any)))
  (function (_ context)
    (by monad pure [context []])))

(syntax.the .public (exchange [swaps ..indices])
  (macro.with_names ['_ 'context '!]
    (when swaps
      (list)
      (pure (list (` ..no_op)))

      not_empty@
      (monad.let [! meta.monad]
        [.let [max_idx (list:mix n.major 0 swaps)]
         'inputs (|> (macro.name "input")
                     (list.repeated (++ max_idx))
                     (list.complete !))
         .let ['outputs (|> (list.mix' try.monad
                                       (function (_ from to)
                                         (monad.let try.monad
                                           [input (list.item from 'inputs)]
                                           (pure (sequence.suffix input to))))
                                       (is (Sequence Code) sequence.empty)
                                       swaps)
                            try.trusted
                            sequence.as_list)
               'inputsT+ (list:each (|>> (,) (..Key ..Commutative) (`)) 'inputs)
               'outputsT+ (list:each (|>> (,) (..Key ..Commutative) (`)) 'outputs)]]
        (pure (list (` (is (for_any ((, '_) (, '!) (,* 'inputs) (, 'context))
                             (-> (monad.Monad (, '!))
                                 (Procedure (, '!)
                                            [(,* 'inputsT+) (, 'context)]
                                            [(,* 'outputsT+) (, 'context)]
                                            .Any)))
                           (function ((, '_) (, '!) [(,* 'inputs) (, 'context)])
                             (by (, '!) (,' pure) [[(,* 'outputs) (, 'context)] []]))))))))))

(exception.the .public amount_cannot_be_zero)

(the amount
  (Projection Natural)
  (monad.let <>.monad
    [raw <code>.natural
     _ (<>.assertion (exception.error ..amount_cannot_be_zero [])
                     (n.> 0 raw))]
    (pure raw)))

(template.with [<name> <from> <to>]
  [(syntax.the .public (<name> [amount ..amount])
     (macro.with_names ['_ 'context '!]
       (monad.let [! meta.monad]
         ['keys (|> (macro.name "keys")
                    (list.repeated amount)
                    (list.complete !))]
         (pure (list (` (is (for_any ((, '_) (, '!) (,* 'keys) (, 'context))
                              (-> (monad.Monad (, '!))
                                  (Procedure (, '!)
                                             [<from> (, 'context)]
                                             [<to> (, 'context)]
                                             .Any)))
                            (function ((, '_) (, '!) [<from> (, 'context)])
                              (by (, '!) (,' pure) [[<to> (, 'context)] []])))))))))]

  [[group    (,* 'keys)   [(,* 'keys)]]
   [un_group [(,* 'keys)] (,* 'keys)]])
