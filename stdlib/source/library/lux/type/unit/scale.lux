(.require
 [library
  [lux (.except type)
   [control
    [parser
     ["<[0]>" code]]]
   ["[0]" macro (.only)
    [syntax (.only syntax)]]
   [math
    [number
     ["i" int]
     ["[0]" ratio (.only Ratio)]]]]]
 ["[0]" // (.only)
  ["/[1]" //]])

(.type .public (Scale s)
  (Interface
   (is (All (_ u) (-> (//.Qty Any u) (//.Qty s u)))
       up)
   (is (All (_ u) (-> (//.Qty s u) (//.Qty Any u)))
       down)
   (is Ratio
       ratio)))

(def .public (scale ratio)
  (Ex (_ s) (-> Ratio (Scale s)))
  (let [(open "/[0]") ratio]
    (implementation
     (def up
       (|>> //.number
            (i.* (.int /#numerator))
            (i./ (.int /#denominator))
            //.quantity))
     (def down
       (|>> //.number
            (i.* (.int /#denominator))
            (i./ (.int /#numerator))
            //.quantity))
     (def ratio
       ratio))))

(def .public (re_scaled from to quantity)
  (All (_ si so u) (-> (Scale si) (Scale so) (//.Qty si u) (//.Qty so u)))
  (let [(open "/[0]") (ratio./ (at from ratio)
                               (at to ratio))]
    (|> quantity
        //.number
        (i.* (.int /#numerator))
        (i./ (.int /#denominator))
        //.quantity)))

(def .public type
  (syntax (_ [it <code>.any])
    (macro.with_symbols [g!a]
      (in (list (` ((~! ///.by_example) [(~ g!a)]
                    (is (..Scale (~ g!a))
                        (~ it))
                    (~ g!a))))))))

(with_template [<order_of_magnitude> <up> <up_type> <down> <down_type>]
  [(def .public <up>
     (scale [ratio.#numerator <order_of_magnitude>
             ratio.#denominator 1]))
   
   (.type .public <up_type>
     (~ (..type <up>)))
   
   (def .public <down>
     (scale [ratio.#numerator 1
             ratio.#denominator <order_of_magnitude>]))
   
   (.type .public <down_type>
     (~ (..type <down>)))]

  [        1,000 kilo Kilo milli Milli]
  [    1,000,000 mega Mega micro Micro]
  [1,000,000,000 giga Giga nano  Nano ]
  )
