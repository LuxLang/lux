... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except type)
   [data
    [collection
     ["[0]" list
      ["?[1]" \\projection]]]]
   [math
    [number
     ["i" integer]
     ["[0]" fraction (.only Fraction)]]]
   ["[0]" macro (.only)
    ["[0]" syntax]
    ["[0]" template]]
   [meta
    ["[0]" code
     ["<[1]>" \\projection]]]]]
 ["[0]" // (.only)
  ["/[1]" //]])

(.every .public (Scale s)
  (Interface
   (is (for_any (_ u) (-> (//.Measure Any u) (//.Measure s u)))
       up)
   (is (for_any (_ u) (-> (//.Measure s u) (//.Measure Any u)))
       down)
   (is Fraction
       fraction)))

(the .public (scale fraction)
  (for_some (_ s)
    (-> Fraction
        (Scale s)))
  (let [(open "/[0]") fraction]
    (implementation
     (the up
       (|>> //.number
            (i.* (.integer /#numerator))
            (i./ (.integer /#denominator))
            //.measure))
     (the down
       (|>> //.number
            (i.* (.integer /#denominator))
            (i./ (.integer /#numerator))
            //.measure))
     (the fraction
       fraction))))

(the .public (re_scaled from to measure)
  (for_any (_ si so u)
    (-> (Scale si) (Scale so) (//.Measure si u)
        (//.Measure so u)))
  (let [(open "/[0]") (fraction./ (by from fraction)
                                  (by to fraction))]
    (|> measure
        //.number
        (i.* (.integer /#numerator))
        (i./ (.integer /#denominator))
        //.measure)))

(the .public type
  (syntax.macro (_ [it ?list.any])
    (macro.with_names ['of]
      (pure (list (` (///.by_example [(, 'of)]
                       (is (..Scale (, 'of))
                           (, it))
                       (, 'of))))))))

(template.with [<order_of_magnitude> <up> <up_type> <down> <down_type>]
  [(the .public <up>
     (scale [fraction.#numerator <order_of_magnitude>
             fraction.#denominator 1]))
   
   (the .public <up_type>
     (let [[module _] (name .._)
           [_ proper] (name <up_type>)]
       {.#Named [module proper]
                (..type <up>)}))
   
   (the .public <down>
     (scale [fraction.#numerator 1
             fraction.#denominator <order_of_magnitude>]))
   
   (the .public <down_type>
     (let [[module _] (name .._)
           [_ proper] (name <down_type>)]
       {.#Named [module proper]
                (..type <down>)}))]

  [        1,000 kilo Kilo milli Milli]
  [    1,000,000 mega Mega micro Micro]
  [1,000,000,000 giga Giga nano  Nano ]
  )
