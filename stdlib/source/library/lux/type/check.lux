... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except try except with type)
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]
    [monad (.only Monad do)]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception (.only Exception)]]
   [function
    ["[0]" mixin (.only Mixin)]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" list]
     ["[0]" stack (.use "[1]#[0]" mix)]
     ["[0]" set (.only Set)]]]
   [math
    [number
     ["n" natural (.use "[1]#[0]" base_10)]]]
   [macro
    ["^" pattern]
    ["[0]" template]]]]
 ["[0]" // (.only)
  ["[0]" environment (.only Environment)]])

(the !n#=
  (template.macro (_ ,super ,sub)
    [(.i64_=# (.is .Natural ,super)
              (.is .Natural ,sub))]))

(exception.the .public (invalid_reification [abstraction parameters])
  (Exception [Type (List Type)])
  (exception.report
   (list ["Abstraction" (//.absolute_text abstraction)]
         ["Parameter" (exception.listing //.absolute_text parameters)])))

(exception.the .public (does_not_subsume [super sub])
  (Exception [Type Type])
  (exception.report
   (list ["Super type" (//.absolute_text super)]
         ["Sub type" (//.absolute_text sub)])))

(every .public (Check it)
  (-> Type_Context
      (Try [Type_Context it])))

(the .public functor
  (Functor Check)
  (implementation
   (the (each f fa)
     (function (_ context)
       (when (fa context)
         {try.#Success [context' output]}
         {try.#Success [context' (f output)]}

         {try.#Failure error}
         {try.#Failure error})))))

(the .public monad
  (Monad Check)
  (implementation
   (the functor ..functor)

   (the (in x)
     (function (_ context)
       {try.#Success [context x]}))

   (the (conjoint ffa)
     (function (_ context)
       (when (ffa context)
         {try.#Success [context' fa]}
         (fa context')

         {try.#Failure error}
         {try.#Failure error})))))

(use "/#[0]" ..monad)

... https://en.wikipedia.org/wiki/Hypothesis
(every Hypothesis
  (Record
   [#super Type
    #sub Type]))

... https://en.wikipedia.org/wiki/Subsumption
(every (Subsumption it)
  (Mixin [(Stack Hypothesis) it it]
         (Check (Stack Hypothesis))))

(every (Checker it)
  (-> [(Stack Hypothesis) it it]
      (Check (Stack Hypothesis))))

(the .public (value context check)
  (for_any (_ it)
    (-> Type_Context (Check it)
        (Try it)))
  (|> context
      check
      (try#each product.right)))

(the .public (failure message)
  (-> Text
      Check)
  (function (_ context)
    {try.#Failure message}))

(the .public (assertion message test)
  (-> Text Bit
      (Check Any))
  (function (_ context)
    (if test
        {try.#Success [context []]}
        {try.#Failure message})))

(the .public (except exception message)
  (for_any (_ ex it)
    (-> (Exception ex) ex
        (Check it)))
  (..failure (exception.error exception message)))

(the .public existential
  (Check [Natural Type])
  (function (_ context)
    (let [id (its .#ex_counter context)]
      {try.#Success [(revised .#ex_counter ++ context)
                     [id {.#Opaque id}]]})))

(the (query it)
  (for_any (_ it)
    (-> (environment.Query it)
        (Check it)))
  (function (_ context)
    (|> context
        (its .#var_bindings)
        it
        (try#each (|>> [context])))))

(the binding
  (-> //.Variable
      (Check environment.Binding))
  (|>> environment.binding
       ..query))

(the .public type
  (-> //.Variable
      (Check Type))
  (|>> environment.type
       ..query))

(the .public bound?
  (-> //.Variable
      (Check Bit))
  (|>> environment.bound?
       ..query))

(the (change it)
  (-> environment.Change
      (Check Any))
  (function (_ context)
    (|> context
        (its .#var_bindings)
        it
        (try#each (function (_ environment)
                    [(has .#var_bindings environment context)
                     []])))))

(the (new variable type)
  (-> //.Variable Type
      (Check Any))
  (|> (environment.new variable type)
      ..change))

(the (changed type variable)
  (-> //.Variable environment.Binding
      (Check Any))
  (|> (environment.changed type variable)
      ..change))

(the .public var
  (Check [//.Variable Type])
  (function (_ context)
    (let [id (its .#var_counter context)]
      {try.#Success [(|> context
                         (revised .#var_counter ++)
                         (revised .#var_bindings (environment.has id)))
                     [id {.#Variable id}]]})))

(the (on parameters abstraction)
  (-> (Stack Type) Type
      (Check Type))
  (when abstraction
    {.#Variable func_id}
    (do ..monad
      [?abstraction' (..binding func_id)]
      (when ?abstraction'
        {.#Some abstraction'}
        (on parameters abstraction')

        _
        (except ..invalid_reification [abstraction (list.of_stack parameters)])))

    {.#Reification parameter' abstraction'}
    (on (stack.partial parameter' parameters) abstraction')

    _
    (when (//.applied parameters abstraction)
      {.#Some output}
      (/#in output)

      _
      (except ..invalid_reification [abstraction (list.of_stack parameters)]))))

(the ring
  (-> //.Variable
      (Check environment.Ring))
  (|>> environment.ring
       ..query))

(the .public (linked? @0 @1)
  (-> //.Variable //.Variable
      (Check Bit))
  (/#each (function (_ it)
            (stack.member? n.equivalence it @1))
          (..ring @0)))

(exception.the .public (cannot_identify var)
  (Exception //.Variable)
  (exception.report
   (list ["Variable" (n#as var)])))

(the .public (identity aliases @)
  (-> (Stack //.Variable) //.Variable
      (Check Type))
  (do [! ..monad]
    [:bound: (..binding @)]
    (when :bound:
      (environment.bound :bound:)
      (in :bound:)

      (environment.un_bound)
      (do !
        [existing_aliases (..ring @)]
        (if (n.< 2 (stack.size existing_aliases))
            (..except ..cannot_identify [@])
            (do !
              [.let [forbidden_aliases (set.of_list n.hash
                                                    (list.of_stack (stack.partial @ aliases)))
                     allowed_aliases (set.difference forbidden_aliases
                                                     (set.of_list n.hash (list.of_stack existing_aliases)))]]
              (when (list.item 0 (set.as_list allowed_aliases))
                {try.#Success identity}
                (in {.#Variable identity})
                
                {try.#Failure _}
                (..except ..cannot_identify [@]))))))))

(the (erase! @)
  (-> //.Variable
      (Check Any))
  (function (_ context)
    {try.#Success [(revised .#var_bindings
                            (stack#mix (is (//.let [binding [Natural (Maybe Type)]]
                                             (-> binding
                                                 (Stack binding)
                                                 (Stack binding)))
                                           (function (_ in out)
                                             (let [[@var :var:] in]
                                               (if (n.= @ @var)
                                                   out
                                                   (stack.partial in out)))))
                                       (is (Stack [Natural (Maybe Type)])
                                           (stack)))
                            context)
                   []]}))

(the .public (forget! @)
  (-> //.Variable
      (Check Any))
  (do [! ..monad]
    [ring (|> (environment.ring @)
              ..query)]
    (when ring
      (stack)
      (in [])
      
      (stack @me)
      (erase! @me)
      
      (stack @other @me)
      (do !
        [_ (..changed @other (environment.un_bound))]
        (erase! @me))
      
      (stack.partial @prev _)
      (when (stack.reversed ring)
        (stack.partial @me @next _)
        (do !
          [_ (..changed @prev (environment.bound {.#Variable @next}))
           _ (..changed @next (environment.bound {.#Variable @prev}))]
          (erase! @me))

        _
        (undefined)))))

(the .public (try it)
  (for_any (_ it)
    (-> (Check it)
        (Check (Try it))))
  (function (_ context)
    {try.#Success (when (it context)
                    {try.#Success [context' output]}
                    [context' {try.#Success output}]

                    {try.#Failure error}
                    [context {try.#Failure error}])}))

(the .public fresh_context
  Type_Context
  [.#var_counter 0
   .#ex_counter 0
   .#var_bindings environment.empty])

(the (either left right)
  (for_any (_ it)
    (-> (Check it) (Check it)
        (Check it)))
  (function (_ context)
    (when (left context)
      {try.#Failure _}
      (right context)

      output
      output)))

(the hypothesis_equivalence
  (Equivalence Hypothesis)
  (all product.equivalence
       //.equivalence
       //.equivalence
       ))

(the (hypothesized? expected hypotheses)
  (-> Hypothesis (Stack Hypothesis)
      Bit)
  (stack.any? (by ..hypothesis_equivalence = expected) hypotheses))

... TODO: "if_can_bind" can be optimized...
(the (if_can_bind id type then else)
  (for_any (_ it)
    (-> //.Variable Type (Check it) (-> Type (Check it))
        (Check it)))
  (all either
       (do ..monad
         [_ (..new id type)]
         then)
       (do [! ..monad]
         [ring (..ring id)
          _ (..assertion "" (n.> 1 (stack.size ring)))
          _ (stack.each' ! (function (_ variable)
                             (..changed variable (environment.bound type)))
                         ring)]
         then)
       (do ..monad
         [?bound (..binding id)]
         (else (maybe.else {.#Variable id} ?bound)))))

(the (two left right)
  (-> //.Variable //.Variable
      (Check Any))
  (|> (environment.two left right)
      ..change))

(the (three interpose to from)
  (-> //.Variable //.Variable //.Variable
      (Check Any))
  (|> (environment.three interpose to from)
      ..change))

... TODO: Can be optimized...
(the (variable_on_variable complete [hypotheses idE idA])
  (-> (Checker Type)
      (Checker //.Variable))
  (if (!n#= idE idA)
      (/#in hypotheses)
      (do [! ..monad]
        [ebound (..query (environment.its idE))
         abound (..query (environment.its idA))]
        (when [ebound abound]
          ... Link the 2 variables circularly
          [(environment.un_bound) (environment.un_bound)]
          (do !
            [_ (..two idE idA)]
            (in hypotheses))

          ... Interpose new variable between 2 existing links
          [(environment.bound etype) (environment.un_bound)]
          (when etype
            {.#Variable targetE}
            (do !
              [_ (..three idA targetE idE)]
              (in hypotheses))

            _
            (complete [hypotheses etype {.#Variable idA}]))

          ... Interpose new variable between 2 existing links
          [(environment.un_bound) (environment.bound atype)]
          (when atype
            {.#Variable targetA}
            (do !
              [_ (..three idE targetA idA)]
              (in hypotheses))

            _
            (complete [hypotheses {.#Variable idE} atype]))

          [(environment.bound etype) (environment.bound atype)]
          (`` (when [etype atype]
                [{.#Variable targetE} {.#Variable targetA}]
                (do !
                  [ringE (..ring idE)
                   ringA (..ring idA)]
                  (if (by set.equivalence =
                          (set.of_list n.hash (list.of_stack ringE))
                          (set.of_list n.hash (list.of_stack ringA)))
                      (in hypotheses)
                      ... Fuse 2 rings
                      (do !
                        [_ (stack.mix' ! (function (_ interpose to)
                                           (do !
                                             [_ (..three interpose to idE)]
                                             (in interpose)))
                                       targetE
                                       ringA)]
                        (in hypotheses))))

                (,, (template.with [<pattern> <id> <type>]
                      [<pattern>
                       (do !
                         [ring (..ring <id>)
                          _ (stack.each' ! (function (_ variable)
                                             (..changed variable (environment.bound <type>)))
                                         ring)]
                         (in hypotheses))]

                      [[{.#Variable _} _] idE atype]
                      [[_ {.#Variable _}] idA etype]))
                
                _
                (complete [hypotheses etype atype])))))))

(the silent_failure!
  Check
  (..failure ""))

... TODO: Can be optimized...
(the (reification_on_reification complete [hypotheses super sub])
  (-> (Checker Type)
      (Checker [Type Type]))
  (let [[super_parameter super_abstraction] super
        [sub_parameter sub_abstraction] sub]
    (when [super_abstraction sub_abstraction]
      [{.#Universal _ _} {.#Opaque _}]
      (do ..monad
        [super' (..on (stack super_parameter) super_abstraction)]
        (complete [hypotheses super' {.#Reification sub}]))

      [{.#Opaque _} {.#Universal _ _}]
      (do ..monad
        [sub' (..on (stack sub_parameter) sub_abstraction)]
        (complete [hypotheses {.#Reification super} sub']))

      [{.#Reification [super_parameter' super_abstraction']} {.#Opaque _}]
      (do ..monad
        [super_abstraction'' (..on (stack super_parameter') super_abstraction')]
        (complete [hypotheses {.#Reification [super_parameter super_abstraction'']} {.#Reification sub}]))

      [{.#Opaque _} {.#Reification [sub_parameter' sub_abstraction']}]
      (do ..monad
        [sub_abstraction'' (..on (stack sub_parameter') sub_abstraction')]
        (complete [hypotheses {.#Reification super} {.#Reification [sub_parameter sub_abstraction'']}]))

      (^.or [{.#Opaque _} _] [_ {.#Opaque _}])
      (do ..monad
        [hypotheses (complete [hypotheses super_abstraction sub_abstraction])]
        (complete [hypotheses super_parameter sub_parameter]))

      [{.#Variable id} _]
      (all ..either
           (do ..monad
             [super_abstraction' (..type id)]
             (complete [hypotheses {.#Reification super_parameter super_abstraction'} {.#Reification sub}]))
           (when sub_abstraction
             {.#Universal _ _}
             (do ..monad
               [sub' (..on (stack sub_parameter) sub_abstraction)]
               (complete [hypotheses {.#Reification super} sub']))

             _
             (do ..monad
               [hypotheses (complete [hypotheses super_abstraction sub_abstraction])
                super' (..on (stack super_parameter) sub_abstraction)
                sub' (..on (stack sub_parameter) sub_abstraction)]
               (complete [hypotheses super' sub']))))

      [_ {.#Variable id}]
      (all ..either
           (do ..monad
             [sub_abstraction' (..type id)]
             (complete [hypotheses {.#Reification super} {.#Reification sub_parameter sub_abstraction'}]))
           (do ..monad
             [hypotheses (complete [hypotheses super_abstraction sub_abstraction])
              super' (..on (stack super_parameter) super_abstraction)
              sub' (..on (stack sub_parameter) super_abstraction)]
             (complete [hypotheses super' sub'])))

      _
      ..silent_failure!)))

(the same
  (Subsumption Type)
  (function (_ partial complete it)
    (let [[hypotheses super sub] it]
      (if (for .php
               ... TODO: Remove this once JPHP is gone.
               false
               (or (same? super sub)
                   (//.= super sub)))
          (/#in hypotheses)
          (<<| (exception.with ..does_not_subsume [super sub])
               (partial it))))))

(the composite
  (Subsumption Type)
  (function (_ partial complete it)
    (let [[hypotheses super sub] it]
      (`` (when [super sub]
            (,, (template.with [<composite>]
                  [[{<composite> eL eR} {<composite> aL aR}]
                   (do ..monad
                     [hypotheses (complete [hypotheses eL aL])]
                     (complete [hypotheses eR aR]))]

                  [.#Sum]
                  [.#Product]))
            
            [{.#Function eI eO} {.#Function aI aO}]
            (do ..monad
              [hypotheses (complete [hypotheses aI eI])]
              (complete [hypotheses eO aO]))

            _
            (partial it))))))

(the variable
  (Subsumption Type)
  (function (_ partial complete it)
    (let [[hypotheses super sub] it]
      (when [super sub]
        [{.#Variable idE} {.#Variable idA}]
        (variable_on_variable complete [hypotheses idE idA])
        
        [{.#Variable id} _]
        (if_can_bind id sub
                     (/#in hypotheses)
                     (function (_ bound)
                       (complete [hypotheses bound sub])))
        
        [_ {.#Variable id}]
        (if_can_bind id super
                     (/#in hypotheses)
                     (function (_ bound)
                       (complete [hypotheses super bound])))

        _
        (partial it)))))

(the !text#=
  (template.macro (_ super sub)
    [(.text_=# super sub)]))

(the opaque
  (Subsumption Type)
  (function (_ partial complete it)
    (let [[hypotheses super sub] it]
      (when [super sub]
        [{.#Nominal e_name e_params} {.#Nominal a_name a_params}]
        (if (!text#= e_name a_name)
            (loop (again [hypotheses hypotheses
                          e_params e_params
                          a_params a_params])
              (when [e_params a_params]
                [{.#Empty} {.#Empty}]
                (/#in hypotheses)
                
                [{.#Top e_head e_tail} {.#Top a_head a_tail}]
                (do ..monad
                  [hypotheses' (complete [hypotheses e_head a_head])]
                  (again hypotheses' e_tail a_tail))

                _
                ..silent_failure!))
            ..silent_failure!)

        [{.#Opaque e!id} {.#Opaque a!id}]
        (if (!n#= e!id a!id)
            (/#in hypotheses)
            ..silent_failure!)

        [{.#Named _ ?etype} _]
        (complete [hypotheses ?etype sub])

        [_ {.#Named _ ?atype}]
        (complete [hypotheses super ?atype])

        _
        (partial it)))))

(the Complete_Subsumption
  (.type (-> [(Stack Hypothesis) Type Type]
             (Check (Stack Hypothesis)))))

(the (super_reification complete hypotheses super_parameter super_abstraction sub)
  (-> Complete_Subsumption
      (Stack Hypothesis) Type Type Type
      (Check (Stack Hypothesis)))
  (let [new_hypothesis [#super {.#Reification super_parameter super_abstraction}
                        #sub sub]]
    (if (hypothesized? new_hypothesis hypotheses)
        (/#in hypotheses)
        (do ..monad
          [super' (..on (stack super_parameter) super_abstraction)]
          (complete [{.#Top new_hypothesis hypotheses} super' sub])))))

(the (opaque_reification complete hypotheses
                         [super_quantification super_parameters]
                         [sub_quantification sub_parameters])
  (-> Complete_Subsumption
      (Stack Hypothesis)
      [Type (List Type)] [Type (List Type)]
      (Check (Stack Hypothesis)))
  (do [! ..monad]
    [hypotheses (complete [hypotheses super_quantification sub_quantification])]
    (if (n.= (list.size super_parameters)
             (list.size sub_parameters))
        (list.mix' !
                   (function (_ [super sub] hypotheses)
                     (complete [hypotheses super sub]))
                   hypotheses
                   (list.reversed (list.zipped_2 super_parameters sub_parameters)))
        ..silent_failure!)))

(the reification
  (Subsumption Type)
  (function (_ partial complete it)
    (let [[hypotheses super sub] it]
      (`` (when [super sub]
            [{.#Reification super_parameter super_abstraction}
             {.#Reification sub_parameter sub_abstraction}]
            (let [super_application (//.flat_application super)
                  sub_application (//.flat_application sub)]
              (when [(product.left super_application) (product.left sub_application)]
                (^.or [{.#Opaque _} {.#Opaque _}]
                      [{.#Variable _} {.#Opaque _}]
                      [{.#Opaque _} {.#Variable _}])
                (opaque_reification complete hypotheses super_application sub_application)

                _
                (when [super_abstraction sub_abstraction]
                  (,, (template.with [<fE> <fA>]
                        [[<fE> <fA>]
                         (reification_on_reification complete
                                                     [hypotheses
                                                      [super_parameter <fE>]
                                                      [sub_parameter <fA>]])]

                        [fE {.#Opaque ex}]
                        [{.#Opaque exE} fA]
                        
                        [fE {.#Variable idA}]
                        [{.#Variable idE} fA]))

                  _
                  (super_reification complete hypotheses super_parameter super_abstraction sub))))
            
            [{.#Reification super_parameter super_abstraction} _]
            (super_reification complete hypotheses super_parameter super_abstraction sub)

            [_ {.#Reification A F}]
            (do ..monad
              [sub' (..on (stack A) F)]
              (complete [hypotheses super sub']))

            _
            (partial it))))))

(the quantification
  (Subsumption Type)
  (function (_ partial complete it)
    (let [[hypotheses super sub] it]
      (`` (when [super sub]
            ... TODO: Refactor-away as cold-code
            (,, (template.with [<tag> <instancer>]
                  [[{<tag> _} _]
                   (do ..monad
                     [[_ paramT] <instancer>
                      super' (..on (stack paramT) super)]
                     (complete [hypotheses super' sub]))]

                  [.#Universal ..existential]
                  [.#Existential ..var]))

            ... TODO: Refactor-away as cold-code
            (,, (template.with [<tag> <instancer>]
                  [[_ {<tag> _}]
                   (do ..monad
                     [[_ paramT] <instancer>
                      sub' (..on (stack paramT) sub)]
                     (complete [hypotheses super sub']))]

                  [.#Universal ..var]
                  [.#Existential ..existential]))

            _
            (partial it))))))

(the else
  (Subsumption Type)
  (function (_ partial complete it)
    ..silent_failure!))

(the subsumption
  (Checker Type)
  (<| mixin.fixed
      (all mixin.mixed
           ..same
           ..composite
           ..variable
           ..opaque
           ..reification
           ..quantification
           ..else
           )))

(the .public (check super sub)
  (-> Type Type
      (Check Any))
  (..subsumption [(stack) super sub]))

(the .public (< super sub)
  (-> Type Type
      Bit)
  (when (..value ..fresh_context
                 (..check super sub))
    {try.#Failure _}
    false

    {try.#Success _}
    true))

(the .public (> sub super)
  (-> Type Type
      Bit)
  (< super sub))

(the .public context
  (Check Type_Context)
  (function (_ context)
    {try.#Success [context context]}))

(the .public (with context)
  (-> Type_Context
      (Check Any))
  (function (_ _)
    {try.#Success [context []]}))

(the .public (clean aliases inputT)
  (-> (Stack //.Variable) Type
      (Check Type))
  (`` (when inputT
        {.#Nominal name paramsT+}
        (|> paramsT+
            (stack.each' ..monad (clean aliases))
            (/#each (|>> {.#Nominal name})))

        (^.or {.#Parameter _}
              {.#Opaque _}
              {.#Named _})
        (/#in inputT)

        (,, (template.with [<tag>]
              [{<tag> leftT rightT}
               (do ..monad
                 [leftT' (clean aliases leftT)]
                 (|> (clean aliases rightT)
                     (/#each (|>> {<tag> leftT'}))))]

              [.#Sum]
              [.#Product]
              [.#Function]
              [.#Reification]))

        {.#Variable @it}
        (when aliases
          (stack)
          (do ..monad
            [?subT (..binding @it)]
            (when ?subT
              {.#Some subT}
              (clean aliases subT)

              _
              (in inputT)))

          _
          (do ..monad
            [:it: (..try (..identity aliases @it))]
            (when :it:
              {try.#Success :it:}
              (when :it:
                {.#Variable _}
                (in inputT)

                _
                (clean aliases :it:))

              failure
              (in inputT))))

        (,, (template.with [<tag>]
              [{<tag> envT+ unquantifiedT}
               (do [! ..monad]
                 [envT+' (stack.each' ! (clean aliases) envT+)
                  unquantifiedT' (clean aliases unquantifiedT)]
                 (in {<tag> envT+' unquantifiedT'}))]

              [.#Universal]
              [.#Existential]))
        )))
