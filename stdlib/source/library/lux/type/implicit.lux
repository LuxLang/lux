... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except with)
   [abstract
    [monad (.only do)]
    ["<>" projection]
    ["[0]" equivalence]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad mix)
      ["?[1]" \\projection]
      ["[0]" property]]
     ["[0]" stack (.use "[1]#[0]" monad mix)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    ["[0]" number (.only)
     ["n" natural]]]
   ["[0]" macro (.only)
    ["[0]" syntax]
    ["[0]" expansion]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" label]
    ["[0]" name]
    ["[0]" binding (.only)
     ["[0]" local]]
    [module
     ["[0]" import]]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]]
 ["[0]" // (.only)
  ["[0]" check (.only Check)]])

(the (type_var id env)
  (-> Natural Type_Context
      (Meta Type))
  (when (list.example (|>> product.left (n.= id))
                      (its .#var_bindings env))
    {try.#Success [_ {.#Some type}]}
    (when type
      {.#Variable id'}
      (type_var id' env)

      _
      (by meta.monad in type))

    {try.#Success [_ {.#None}]}
    (meta.failure (text "Unbound type-var " (%.natural id)))

    {try.#Failure _}
    (meta.failure (text "Unknown type-var " (%.natural id)))
    ))

(the (implicit_type var_name)
  (-> Name
      (Meta Type))
  (do meta.monad
    [raw_type (binding.type var_name)
     compiler meta.compiler_state]
    (when raw_type
      {.#Variable id}
      (type_var id (its .#type_context compiler))

      _
      (in raw_type))))

(the (member_type idx sig_type)
  (-> Natural Type
      (Check Type))
  (when sig_type
    {.#Named _ sig_type'}
    (member_type idx sig_type')

    {.#Reification arg func}
    (when (//.reified (list arg) func)
      {.#None}
      (check.failure (text "Cannot reify type " (//.as_text func) " to type " (//.as_text arg)))

      {.#Some sig_type'}
      (member_type idx sig_type'))

    {.#Product left right}
    (if (n.= 0 idx)
        (by check.monad in left)
        (member_type (-- idx) right))

    _
    (if (n.= 0 idx)
        (by check.monad in sig_type)
        (check.failure (text "Cannot find member type " (%.natural idx) " for " (//.as_text sig_type))))))

(the (member_name member)
  (-> Name
      (Meta Name))
  (when member
    ["" simple_name]
    (meta.either (do meta.monad
                   [member (binding.normal member)
                    _ (label.slot member)]
                   (in member))
                 (do [! meta.monad]
                   [[this_module_name _] module.current
                    imp_mods (import.all this_module_name)
                    tag_stacks (list.each' ! label.tag_stacks imp_mods)
                    .let [tag_stacks (|> tag_stacks list.as_stack stack#conjoint (stack#each product.left) stack#conjoint)
                          candidates (stack.only (|>> product.right (text.= simple_name))
                                                 tag_stacks)]]
                   (when candidates
                     {.#Empty}
                     (meta.failure (text "Unknown slot: " (name.as_text member)))
                     
                     {.#Top winner {.#Empty}}
                     (in winner)
                     
                     _
                     (meta.failure (text "Too many candidate slots: " (%.stack name.as_text candidates))))))

    _
    (by meta.monad in member)))

(the (implicit_member member)
  (-> Name
      (Meta [Natural Type]))
  (do meta.monad
    [member (member_name member)
     [lefts,right? sig_type] (label.slot member)]
    (when lefts,right?
      {.#Some [lefts right? family]}
      (in [(if right?
               (++ lefts)
               lefts)
           sig_type])
      
      {.#None}
      (in [0 sig_type]))))

(the (compatible_type? interface candidate)
  (-> Type Type
      Bit)
  (expansion.let [<found?> (//.= interface candidate)]
    (<| (or <found?>)

        (let [[parameters candidate] (//.flat_univ_q candidate)])
        (or <found?>)

        (let [[inputs candidate] (//.flat_function candidate)])
        (or <found?>)

        (let [[candidate parameters] (//.flat_reification candidate)])
        (or <found?>)
        
        (let [candidate (//.de_aliased candidate)])
        <found?>)))

(the (available_definitions sig_type source_module target_module constants aggregate)
  (-> Type Text Text (property.List [Bit Definition])
      (Change (Stack [Name Type])))
  (list#mix (function (_ [name [exported? [def_type def_value]]] aggregate)
              (if (and (or (text.= target_module source_module)
                           exported?)
                       (compatible_type? sig_type def_type))
                  {.#Top [[source_module name] def_type] aggregate}
                  aggregate))
            aggregate
            constants))

(the (local_env sig_type)
  (-> Type
      (Meta (Stack [Name Type])))
  (do meta.monad
    [local_batches local.all
     .let [total_locals (|> local_batches
                            (stack#each list.as_stack)
                            stack#conjoint
                            (stack#mix (function (_ [name type] table)
                                         (try.else table (dictionary.has' name type table)))
                                       (is (Dictionary Text Type)
                                           (dictionary.empty text.hash))))]]
    (in (|> total_locals
            dictionary.entries
            (list.all (function (_ [name type])
                        (if (compatible_type? sig_type type)
                            {.#Some [["" name] type]}
                            {.#None})))
            list.as_stack))))

(the (local_structs sig_type)
  (-> Type
      (Meta (Stack [Name Type])))
  (do [! meta.monad]
    [[this_module_name _] module.current
     definitions (binding.resolved_globals this_module_name)]
    (in (available_definitions sig_type this_module_name this_module_name definitions {.#Empty}))))

(the (imported_structs sig_type)
  (-> Type
      (Meta (Stack [Name Type])))
  (do [! meta.monad]
    [[this_module_name _] module.current
     imported_modules (import.all this_module_name)
     accessible_definitions (list.each' ! binding.resolved_globals imported_modules)]
    (in (list#mix (function (_ [imported_module definitions] tail)
                    (available_definitions sig_type imported_module this_module_name definitions tail))
                  {.#Empty}
                  (list.zipped_2 imported_modules
                                 accessible_definitions)))))

(the (on_argument arg func)
  (-> Type Type
      (Check Type))
  (when func
    {.#Named _ func'}
    (on_argument arg func')

    {.#Universal _}
    (do check.monad
      [[id var] check.var]
      (|> func
          (//.reified (list var))
          maybe.trusted
          (on_argument arg)))

    {.#Function input output}
    (do check.monad
      [_ (check.check input arg)]
      (in output))

    _
    (check.failure (text "Invalid function type: " (//.as_text func)))))

(the (concrete_type type)
  (-> Type
      (Check [(Stack Natural) Type]))
  (when type
    {.#Universal _}
    (do check.monad
      [[id var] check.var
       [ids final_output] (concrete_type (maybe.trusted (//.reified (list var) type)))]
      (in [{.#Top id ids}
           final_output]))
    
    _
    (by check.monad in [(stack) type])))

(the (ensure_function_application! member_type input_types expected_output)
  (-> Type (Stack Type) Type
      (Check []))
  (do check.monad
    [actual_output (stack.mix' check.monad ..on_argument member_type input_types)]
    (check.check expected_output actual_output)))

(every Instance
  (Rec Instance
    (Record
     [#constructor Name
      #dependencies (Stack Instance)])))

(the (candidate_provision provision context dep alts)
  (-> (-> Lux Type_Context Type (Check Instance))
      Type_Context Type (Stack [Name Type])
      (Meta (Stack Instance)))
  (do meta.monad
    [compiler meta.compiler_state]
    (when (|> alts
              (stack#each (function (_ [alt_name alt_type])
                            (when (check.value context
                                               (do [! check.monad]
                                                 [[tvars alt_type] (concrete_type alt_type)
                                                  .let [[deps alt_type] (//.flat_function alt_type)]
                                                  _ (check.check dep alt_type)
                                                  context' check.context]
                                                 (stack.each' ! (provision compiler context')
                                                              (list.as_stack deps))))
                              {.#Left error}
                              (stack)

                              {.#Right =deps}
                              (stack [alt_name =deps]))))
              stack#conjoint)
      {.#Empty}
      (meta.failure (text "No candidates for provisioning: " (//.as_text dep)))

      found
      (in found))))

(the (provision sig_type compiler context dep)
  (-> Type Lux Type_Context Type
      (Check Instance))
  (when (meta.value compiler
                    (all meta.either
                         (do meta.monad [alts (..local_env sig_type)] (..candidate_provision (provision sig_type) context dep alts))
                         (do meta.monad [alts (..local_structs sig_type)] (..candidate_provision (provision sig_type) context dep alts))
                         (do meta.monad [alts (..imported_structs sig_type)] (..candidate_provision (provision sig_type) context dep alts))))
    {.#Left error}
    (check.failure error)

    {.#Right candidates}
    (when candidates
      {.#Empty}
      (check.failure (text "No candidates for provisioning: " (//.as_text dep)))

      {.#Top winner {.#Empty}}
      (by check.monad in winner)

      _
      (check.failure (text "Too many candidates for provisioning: " (//.as_text dep) " --- " (%.stack (|>> product.left name.as_text) candidates))))
    ))

(the (candidate_alternatives sig_type member_idx input_types output_type alts)
  (-> Type Natural (Stack Type) Type (Stack [Name Type])
      (Meta (Stack Instance)))
  (do meta.monad
    [compiler meta.compiler_state
     context meta.type_context]
    (when (|> alts
              (stack#each (function (_ [alt_name alt_type])
                            (when (<| (check.value context)
                                      (do [! check.monad]
                                        [[tvars alt_type] (concrete_type alt_type)
                                         .let [[deps alt_type] (//.flat_function alt_type)]
                                         _ (check.check alt_type sig_type)
                                         member_type (member_type member_idx alt_type)
                                         _ (ensure_function_application! member_type input_types output_type)
                                         context' check.context]
                                        (stack.each' ! (provision sig_type compiler context')
                                                     (list.as_stack deps))))
                              {.#Left error}
                              (stack)

                              {.#Right =deps}
                              (stack [alt_name =deps]))))
              stack#conjoint)
      {.#Empty}
      (meta.failure (text "No alternatives for " (//.as_text (//.function (list.of_stack input_types) output_type))))

      found
      (in found))))

(the (alternatives sig_type member_idx input_types output_type)
  (-> Type Natural (Stack Type) Type
      (Meta (Stack Instance)))
  (let [test (candidate_alternatives sig_type member_idx input_types output_type)]
    (all meta.either
         (do meta.monad [alts (..local_env sig_type)] (test alts))
         (do meta.monad [alts (..local_structs sig_type)] (test alts))
         (do meta.monad [alts (..imported_structs sig_type)] (test alts)))))

(the (var? input)
  (-> Code
      Bit)
  (when input
    {.#Name _ _}
    #1

    _
    false))

(the (pair_list [l r])
  (for_any (_ it)
    (-> [it it]
        (List it)))
  (list l r))

(the (instance$ [constructor dependencies])
  (-> Instance
      Code)
  (when dependencies
    {.#Empty}
    (code.name constructor)

    _
    (` ((, (code.name constructor)) (,* (list.of_stack (stack#each instance$ dependencies)))))))

(the .public any
  (syntax.macro (_ [member <code>.name
                    args (<>.or (<>.some <code>.name)
                                (<>.some ?list.any))])
    (when args
      {.#Left args}
      (do [! meta.monad]
        [[member_idx sig_type] (..implicit_member member)
         input_types (list.each' ! ..implicit_type args)
         output_type meta.expected_type
         chosen_ones (alternatives sig_type member_idx (list.as_stack input_types) output_type)]
        (when chosen_ones
          (stack)
          (meta.failure (text "No implementation could be found for member: " (name.as_text member)))

          (stack chosen)
          (in (list (` (.by (, (instance$ chosen))
                            (, (code.local (product.right member)))
                            (,* (list#each code.name args))))))

          _
          (meta.failure (text "Too many implementations available: "
                              (|> chosen_ones
                                  list.of_stack
                                  (list#each (|>> product.left name.as_text))
                                  (text.interposed ", "))
                              " --- for type: " (//.as_text sig_type)))))

      {.#Right args}
      (do [! meta.monad]
        [labels (|> (macro.name "'parameter")
                    (list.repeated (list.size args))
                    (list.all' !))]
        (in (list (` (let [(,* (|> args
                                   (list.zipped_2 labels)
                                   (list#each ..pair_list)
                                   list#conjoint))]
                       (..any (, (code.name member)) (,* labels)))))))
      )))

(the (implicit_bindings amount)
  (-> Natural
      (Meta (List Code)))
  (|> (macro.name "'implicit")
      (list.repeated amount)
      (list.all' meta.monad)))

(the .public with
  (syntax.macro (_ [implementations (<code>.tuple (<>.many ?list.any))
                    body ?list.any])
    (do meta.monad
      ['implicit+ (implicit_bindings (list.size implementations))]
      (in (list (` (let [(,* (|> (list.zipped_2 'implicit+ implementations)
                                 (list#each (function (_ ['implicit implementation])
                                              (list 'implicit implementation)))
                                 list#conjoint))]
                     (, body))))))))

(the .public implicitly
  (syntax.macro (_ [implementations (<>.many ?list.any)])
    (do meta.monad
      ['implicit+ (implicit_bindings (list.size implementations))]
      (in (|> (list.zipped_2 'implicit+ implementations)
              (list#each (function (_ ['implicit implementation])
                           (` (the .private (, 'implicit)
                                (, implementation))))))))))
