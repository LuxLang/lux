(.using
 [library
  [lux "*"
   ["[0]" meta]
   ["[0]" type]
   [abstract
    ["[0]" monad {"+" do}]]
   [control
    ["[0]" maybe]
    ["<>" parser ("[1]#[0]" monad)
     ["<[0]>" type {"+" Env}]
     ["<[0]>" code {"+" Parser}]]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list ("[1]#[0]" functor)]
     ["[0]" dictionary]]]
   [macro {"+" with_symbols}
    [syntax {"+" syntax:}]
    ["^" pattern]
    ["[0]" code]]
   [math
    [number
     ["n" nat]]]]])

(def: polyP
  (Parser [Code Text Code])
  (let [private ($_ <>.and
                    <code>.local_symbol
                    <code>.any)]
    (<>.either (<>.and <code>.any private)
               (<>.and (<>#in (` .private)) private))))

(syntax: .public (poly: [[export_policy name body] ..polyP])
  (with_symbols [g!_ g!type g!output]
    (let [g!name (code.symbol ["" name])]
      (in (.list (` ((~! syntax:) (~ export_policy) ((~ g!name) [(~ g!type) (~! <code>.any)])
                     ((~! do) (~! meta.monad)
                      [(~ g!type) ((~! meta.eval) .Type (~ g!type))]
                      (case (: (.Either .Text .Code)
                               ((~! <type>.result) ((~! <>.rec)
                                                    (function ((~ g!_) (~ g!name))
                                                      (~ body)))
                                (.:as .Type (~ g!type))))
                        {.#Left (~ g!output)}
                        ((~! meta.failure) (~ g!output))

                        {.#Right (~ g!output)}
                        ((~' in) (.list (~ g!output))))))))))))

(def: .public (code env type)
  (-> Env Type Code)
  (`` (case type
        {.#Primitive name params}
        (` {.#Primitive (~ (code.text name))
                        (.list (~+ (list#each (code env) params)))})

        (^.template [<tag>]
          [{<tag> idx}
           (` {<tag> (~ (code.nat idx))})])
        ([.#Var] [.#Ex])

        {.#Parameter idx}
        (let [idx (<type>.argument env idx)]
          (if (n.= 0 idx)
            (|> (dictionary.value idx env) maybe.trusted product.left (code env))
            (` (.$ (~ (code.nat (-- idx)))))))

        {.#Apply {.#Primitive "" {.#End}}
                 {.#Parameter idx}}
        (case (<type>.argument env idx)
          0 (|> env (dictionary.value 0) maybe.trusted product.left (code env))
          idx (undefined))
        
        (^.template [<tag>]
          [{<tag> left right}
           (` {<tag> (~ (code env left))
                     (~ (code env right))})])
        ([.#Function] [.#Apply])

        (^.template [<macro> <tag> <flattener>]
          [{<tag> left right}
           (` (<macro> (~+ (list#each (code env) (<flattener> type)))))])
        ([.Union .#Sum type.flat_variant]
         [.Tuple .#Product type.flat_tuple])

        {.#Named name sub_type}
        (code.symbol name)

        (^.template [<tag>]
          [{<tag> scope body}
           (` {<tag> (.list (~+ (list#each (code env) scope)))
                     (~ (code env body))})])
        ([.#UnivQ] [.#ExQ])
        )))
