(.using
 [library
  [lux (.except type)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    [parser
     ["<[0]>" code]]]
   [macro (.only with_symbols)
    [syntax (.only syntax:)]]
   ["[0]" type
    [primitive (.full)]]]])

(primitive: .public (Class t c %)
  (-> t c)

  (def: .public class
    (All (_ t c)
      (Ex (_ %)
        (-> (-> t c) (Class t c %))))
    (|>> abstraction))

  (primitive: .public (Quotient t c %)
    (Record
     [#value t
      #label c])

    (def: .public (quotient class value)
      (All (_ t c %)
        (-> (Class t c %) t
            (Quotient t c %)))
      (abstraction [#value value
                    #label ((representation Class class) value)]))

    (template [<name> <output> <slot>]
      [(def: .public <name>
         (All (_ t c %) (-> (Quotient t c %) <output>))
         (|>> representation (the <slot>)))]

      [value t #value]
      [label c #label]
      )
    )
  )

(syntax: .public (type [class <code>.any])
  ... TODO: Switch to the cleaner approach ASAP.
  (with_symbols [g!t g!c g!% g!_ g!:quotient:]
    (in (list (` (let [... (~ g!_) (.is (.Ex ((~ g!_) (~ g!t) (~ g!c) (~ g!%))
                       ...               (..Class (~ g!t) (~ g!c) (~ g!%)))
                       ...             (~ class))
                       ]
                   (.case (.type_of (~ class))
                     {.#Apply (~ g!%) {.#Apply (~ g!c) {.#Apply (~ g!t) (~ g!:quotient:)}}}
                     (.type (..Quotient (~ g!t) (~ g!c) (~ g!%)))

                     (~ g!_)
                     (.undefined))))
              ... (` ((~! type.by_example)
              ...     [(~ g!t) (~ g!c) (~ g!%)]

              ...     (..Class (~ g!t) (~ g!c) (~ g!%))
              ...     (~ class)
              
              ...     (..Quotient (~ g!t) (~ g!c) (~ g!%))))
              ))))

(implementation: .public (equivalence super)
  (All (_ t c %) (-> (Equivalence c) (Equivalence (..Quotient t c %))))

  (def: (= reference sample)
    (# super = (..label reference) (..label sample))))
