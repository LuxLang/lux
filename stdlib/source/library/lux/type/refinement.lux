(.module:
  [library
   [lux {"-" [type]}
    [abstract
     [predicate {"+" [Predicate]}]]
    [control
     [parser
      ["<[0]>" code]]]
    ["[0]" macro
     [syntax {"+" [syntax:]}]]
    ["[0]" type
     abstract]]])

(abstract: .public (Refined t %)
  (Record
   [#value t
    #predicate (Predicate t)])

  (type: .public (Refiner t %)
    (-> t (Maybe (Refined t %))))

  (def: .public (refiner predicate)
    (All (_ t)
      (Ex (_ %)
        (-> (Predicate t) (Refiner t %))))
    (function (_ value)
      (if (predicate value)
        {#.Some (:abstraction [#value value
                               #predicate predicate])}
        #.None)))

  (template [<name> <output> <slot>]
    [(def: .public <name>
       (All (_ t %) (-> (Refined t %) <output>))
       (|>> :representation (value@ <slot>)))]

    [value     t             #value]
    [predicate (Predicate t) #predicate]
    )

  (def: .public (lifted transform)
    (All (_ t %)
      (-> (-> t t)
          (-> (Refined t %) (Maybe (Refined t %)))))
    (function (_ refined)
      (let [(^slots [#value #predicate]) (:representation refined)
            value' (transform value)]
        (if (predicate value')
          {#.Some (:abstraction [#value value'
                                 #predicate predicate])}
          #.None))))
  )

(def: .public (only refiner values)
  (All (_ t %)
    (-> (Refiner t %) (List t) (List (Refined t %))))
  (case values
    #.End
    #.End

    {#.Item head tail}
    (case (refiner head)
      {#.Some refined}
      {#.Item refined (only refiner tail)}
      
      #.None
      (only refiner tail))))

(def: .public (partition refiner values)
  (All (_ t %)
    (-> (Refiner t %) (List t) [(List (Refined t %)) (List t)]))
  (case values
    #.End
    [#.End #.End]

    {#.Item head tail}
    (let [[yes no] (partition refiner tail)]
      (case (refiner head)
        {#.Some refined}
        [{#.Item refined yes}
         no]
        
        #.None
        [yes
         {#.Item head no}]))))

(syntax: .public (type [refiner <code>.any])
  (macro.with_identifiers [g!t g!%]
    (in (list (` ((~! type.:by_example) [(~ g!t) (~ g!%)]
                  (..Refiner (~ g!t) (~ g!%))
                  (~ refiner)
                  
                  (..Refined (~ g!t) (~ g!%))))))))
