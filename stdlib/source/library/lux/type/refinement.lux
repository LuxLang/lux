(.using
 [library
  [lux (.except type only)
   [abstract
    [predicate (.only Predicate)]]
   [control
    [parser
     ["<[0]>" code]]]
   ["[0]" macro (.only)
    [syntax (.only syntax)]]
   ["[0]" type (.only)
    [primitive (.except)]]]])

(primitive .public (Refined t %)
  (Record
   [#value t
    #predicate (Predicate t)])

  (type: .public (Refiner t %)
    (-> t (Maybe (Refined t %))))

  (def: .public (refiner predicate)
    (All (_ t)
      (Ex (_ %)
        (-> (Predicate t) (Refiner t %))))
    (function (_ value)
      (if (predicate value)
        {.#Some (abstraction [#value value
                              #predicate predicate])}
        {.#None})))

  (with_template [<name> <output> <slot>]
    [(def: .public <name>
       (All (_ t %) (-> (Refined t %) <output>))
       (|>> representation (the <slot>)))]

    [value     t             #value]
    [predicate (Predicate t) #predicate]
    )

  (def: .public (lifted transform)
    (All (_ t %)
      (-> (-> t t)
          (-> (Refined t %) (Maybe (Refined t %)))))
    (function (_ refined)
      (let [(open "_[0]") (representation refined)
            value' (transform _#value)]
        (if (_#predicate value')
          {.#Some (abstraction [..#value value'
                                ..#predicate _#predicate])}
          {.#None}))))
  )

(def: .public (only refiner values)
  (All (_ t %)
    (-> (Refiner t %) (List t) (List (Refined t %))))
  (case values
    {.#End}
    {.#End}

    {.#Item head tail}
    (case (refiner head)
      {.#Some refined}
      {.#Item refined (only refiner tail)}
      
      {.#None}
      (only refiner tail))))

(def: .public (partition refiner values)
  (All (_ t %)
    (-> (Refiner t %) (List t) [(List (Refined t %)) (List t)]))
  (case values
    {.#End}
    [{.#End} {.#End}]

    {.#Item head tail}
    (let [[yes no] (partition refiner tail)]
      (case (refiner head)
        {.#Some refined}
        [{.#Item refined yes}
         no]
        
        {.#None}
        [yes
         {.#Item head no}]))))

(def: .public type
  (syntax (_ [refiner <code>.any])
    ... TODO: Switch to the cleaner approach ASAP.
    (macro.with_symbols [g!t g!% g!_ g!:refiner:]
      (in (list (` (let [ ... (~ g!_) (.is (.Ex ((~ g!_) (~ g!t) (~ g!%))
                         ...               (..Refined (~ g!t) (~ g!%)))
                         ...             (~ refiner))
                         ]
                     (.case (.type_of (~ refiner))
                       {.#Apply (~ g!%) {.#Apply (~ g!t) (~ g!:refiner:)}}
                       (.type (..Refined (~ g!t) (~ g!%)))

                       (~ g!_)
                       (.undefined))))
                ... (` ((~! type.by_example) [(~ g!t) (~ g!%)]
                ...     (is (..Refiner (~ g!t) (~ g!%))
                ...         (~ refiner))
                ...     (..Refined (~ g!t) (~ g!%))))
                )))))
