... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except only type)
   [abstract
    ["?" projection]
    ["[0]" monad]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" sum]
    [collection
     ["[0]" list (.use "[1]:[0]" functor)
      ["?[1]" \\projection]]]]
   [math
    ["[0]" random (.only Random)]]
   ["[0]" macro (.only)
    ["[0]" syntax]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" code
     ["<[1]>" \\projection]]]]]
 ["[0]" // (.only)
  ["?[1]" \\projection]
  ["[0]" nominal]])

(nominal.every .public (Refined super %)
  (Record
   [#value super
    #predicate (Predicate super)])

  (.every .public (Refiner super %)
    (-> super
        (Maybe (Refined super %))))

  (the .public (refiner predicate)
    (for_any (_ super)
      (for_some (_ %)
        (-> (Predicate super)
            (Refiner super %))))
    (function (_ value)
      (if (predicate value)
          {.#Some (nominal.of
                   [#value value
                    #predicate predicate])}
          {.#None})))

  (template.with [<name> <slot> <output>]
    [(the .public <name>
       (for_any (_ super %)
         (-> (Refined super %)
             <output>))
       (|>> nominal.as
            (its <slot>)))]

    [[value #value super]
     [predicate #predicate (Predicate super)]])

  (the .public (lifted transform)
    (for_any (_ super %)
      (-> (-> super super)
          (-> (Refined super %)
              (Maybe (Refined super %)))))
    (function (_ refined)
      (let [(open "_[0]") (nominal.as refined)
            value' (transform _#value)]
        (if (_#predicate value')
            {.#Some (nominal.of
                     [..#value value'
                      ..#predicate _#predicate])}
            {.#None}))))
  )

(the .public only
  (for_any (_ super %)
    (-> (Refiner super %)
        (-> (List super)
            (List (Refined super %)))))
  list.all)

(the .public (partition refinement)
  (for_any (_ super %)
    (-> (Refiner super %)
        (-> (List super)
            [(List super)
             (List (Refined super %))])))
  (|>> (list:each (function (_ it)
                    (when (refinement it)
                      {.#Some it}
                      {.#Right it}
                      
                      {.#None}
                      {.#Left it})))
       sum.partition))

(syntax.the .public (type [it ?list.any])
  (macro.with_names ['_ 'super '%]
    (monad.let meta.monad
      [it (meta.eval Type (` (.type_of ((is (for_any ((, '_) (, 'super) (, '%))
                                              (-> (..Refiner (, 'super) (, '%))
                                                  (..Refiner (, 'super) (, '%))))
                                            (|>>))
                                        (, it)))))
       [super %] (|> (as (-> Any Type) it)
                     (?//.value (?//.reified (?.after (?//.exactly ..Refiner)
                                                      (all ?.and ?//.any ?//.any))))
                     meta.of_try)]
      (pure (list (` (.type (..Refined (, (//.code super))
                                       (, (//.code %))))))))))

(the .public (random refiner value)
  (for_any (_ it %)
    (-> (Refiner it %) (Random it)
        (Random (Refined it %))))
  (monad.let random.monad
    [sample value]
    (when (refiner sample)
      {.#Some refined}
      (pure refined)

      {.#None}
      (random refiner value))))
