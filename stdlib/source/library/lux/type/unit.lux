(.module:
  [library
   [lux #*
    ["." meta]
    [abstract
     [monad (#+ Monad do)]
     [equivalence (#+ Equivalence)]
     [order (#+ Order)]
     [enum (#+ Enum)]]
    [control
     ["<>" parser ("#\." monad)
      ["<.>" code (#+ Parser)]]]
    [data
     ["." text
      ["%" format (#+ format)]]]
    [macro
     ["." code]
     ["." template]
     [syntax (#+ syntax:)
      ["|.|" export]
      ["|.|" annotations]]]
    [math
     [number
      ["n" nat]
      ["i" int]
      ["." ratio (#+ Ratio)]]]
    [type
     abstract]]])

(abstract: .public (Qty unit)
  {#.doc (example "A quantity with an associated unit of measurement.")}
  
  Int
  
  (def: in
    (All [unit] (-> Int (Qty unit)))
    (|>> :abstraction))

  (def: out
    (All [unit] (-> (Qty unit) Int))
    (|>> :representation))

  (template [<name> <op>]
    [(def: .public (<name> param subject)
       (All [unit] (-> (Qty unit) (Qty unit) (Qty unit)))
       (:abstraction (<op> (:representation param)
                           (:representation subject))))]

    [+ i.+]
    [- i.-]
    )

  (template [<name> <op> <p> <s> <p*s>]
    [(def: .public (<name> param subject)
       (All [p s] (-> (Qty <p>) (Qty <s>) (Qty <p*s>)))
       (:abstraction (<op> (:representation param)
                           (:representation subject))))]

    [* i.* p s [p s]]
    [/ i./ p [p s] s]
    )
  )

(interface: .public (Unit a)
  {#.doc (example "A unit of measurement, to qualify numbers with.")}
  (: (-> Int (Qty a))
     in)
  (: (-> (Qty a) Int)
     out))

(interface: .public (Scale s)
  {#.doc (example "A scale of magnitude.")}
  (: (All [u] (-> (Qty u) (Qty (s u))))
     scale)
  (: (All [u] (-> (Qty (s u)) (Qty u)))
     de_scale)
  (: Ratio
     ratio))

(type: .public Pure
  {#.doc (example "A pure, unit-less quantity.")}
  (Qty Any))

(def: .public pure
  (-> Int Pure)
  ..in)

(def: .public number
  (-> Pure Int)
  ..out)

(syntax: .public (unit: [[export_policy type_name unit_name annotations]
                         (|export|.parser
                          ($_ <>.and
                              <code>.local_identifier
                              <code>.local_identifier
                              (<>.else |annotations|.empty |annotations|.parser)))])
  {#.doc (example "Define a unit of measurement."
                  "Both the name of the type, and the name of the Unit implementation must be specified."
                  (unit: .public Feet feet
                    {#.doc (example "Optional annotations.")}))}
  (do meta.monad
    [@ meta.current_module_name
     .let [g!type (code.local_identifier type_name)]]
    (in (list (` (type: (~ export_policy) (~ g!type)
                   (~ (|annotations|.format annotations))
                   (primitive (~ (code.text (%.name [@ type_name]))))))

              (` (implementation: (~ export_policy) (~ (code.local_identifier unit_name))
                   (..Unit (~ g!type))

                   (def: (~' in) (~! ..in))
                   (def: (~' out) (~! ..out))))
              ))))

(def: scale
  (Parser Ratio)
  (<code>.tuple (do <>.monad
                  [numerator <code>.nat
                   _ (<>.assertion (format "Numerator must be positive: " (%.nat numerator))
                                   (n.> 0 numerator))
                   denominator <code>.nat
                   _ (<>.assertion (format "Denominator must be positive: " (%.nat denominator))
                                   (n.> 0 denominator))]
                  (in [numerator denominator]))))

(syntax: .public (scale: [[export_policy type_name scale_name ratio annotations]
                          (|export|.parser
                           ($_ <>.and
                               <code>.local_identifier
                               <code>.local_identifier
                               ..scale
                               (<>.else |annotations|.empty |annotations|.parser)))])
  {#.doc (example "Define a scale of magnitude."
                  (scale: .public Bajillion bajillion
                    [1 1,234,567,890]
                    {#.doc (example "Optional annotations.")}))}
  (do meta.monad
    [.let [(^slots [#ratio.numerator #ratio.denominator]) ratio]
     @ meta.current_module_name
     .let [g!scale (code.local_identifier type_name)]]
    (in (list (` (type: (~ export_policy) ((~ g!scale) (~' u))
                   (~ (|annotations|.format annotations))
                   (primitive (~ (code.text (%.name [@ type_name]))) [(~' u)])))
              
              (` (implementation: (~ export_policy) (~ (code.local_identifier scale_name))
                   (..Scale (~ g!scale))
                   
                   (def: (~' scale)
                     (|>> ((~! ..out))
                          (i.* (~ (code.int (.int numerator))))
                          (i./ (~ (code.int (.int denominator))))
                          ((~! ..in))))
                   (def: (~' de_scale)
                     (|>> ((~! ..out))
                          (i.* (~ (code.int (.int denominator))))
                          (i./ (~ (code.int (.int numerator))))
                          ((~! ..in))))
                   (def: (~' ratio)
                     [(~ (code.nat numerator)) (~ (code.nat denominator))])))
              ))))

(def: .public (re_scaled from to quantity)
  (All [si so u] (-> (Scale si) (Scale so) (Qty (si u)) (Qty (so u))))
  (let [[numerator denominator] (ratio./ (\ from ratio)
                                         (\ to ratio))]
    (|> quantity
        out
        (i.* (.int numerator))
        (i./ (.int denominator))
        in)))

(syntax: (implementation_name [type_name <code>.local_identifier])
  (in (list (code.local_identifier (text.lower_cased type_name)))))

(template [<type> <from> <to>]
  [(`` (scale: .public <type>
         (~~ (implementation_name <type>))
         [<from> <to>]
         {#.doc (example (~~ (template.text ["'" <type> "' scale from " <from> " to " <to> "."])))}))]

  [Kilo 1         1,000]
  [Mega 1     1,000,000]
  [Giga 1 1,000,000,000]

  [Milli 1,000         1]
  [Micro 1,000,000     1]
  [Nano  1,000,000,000 1]
  )

(template [<type>]
  [(`` (unit: .public <type>
         (~~ (implementation_name <type>))
         {#.doc (example (~~ (template.text ["'" <type> "' unit of meaurement."])))}))]

  [Gram]
  [Meter]
  [Litre]
  [Second]
  )

(implementation: .public equivalence
  (All [unit] (Equivalence (Qty unit)))
  
  (def: (= reference sample)
    (i.= (..out reference) (..out sample))))

(implementation: .public order
  (All [unit] (Order (Qty unit)))
  
  (def: &equivalence ..equivalence)
  
  (def: (< reference sample)
    (i.< (..out reference) (..out sample))))

(implementation: .public enum
  (All [unit] (Enum (Qty unit)))
  
  (def: &order ..order)
  (def: succ (|>> ..out inc ..in))
  (def: pred (|>> ..out dec ..in)))
