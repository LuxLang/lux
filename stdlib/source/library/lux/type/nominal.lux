... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except every as)
   [abstract
    ["<>" projection (.use "[1]:[0]" monad)]
    ["[0]" monad]]
   [data
    [collection
     ["[0]" list (.use "[1]:[0]" functor)
      ["?[1]" \\projection]]]]
   ["[0]" macro (.only)
    ["[0]" context]
    ["[0]" syntax]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" name (.use "[1]:[0]" absolute)]
    ["[0]" binding]
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]
     ["[0]" export]]]]]
 ["[0]" //])

(the with_template (.in_module# .prelude .with_template))

(.every .public Frame
  (Record
   [:name Name
    :type_vars (List Code)
    :abstraction Code
    :reification Code]))

(context.the
  [frames]
  [expression]
  [declaration]
  Frame)

(.the .public current
  (Meta Frame)
  (context.peek ..frames))

(.the .public (specific name)
  (-> Name
      (Meta Frame))
  (context.search (|>> (its :name) (name.= name))
                  ..frames))

(.the cast
  (Projection [(Maybe Name) Code])
  (<>.either (<>.and (<>.maybe <code>.name) ?list.any)
             (<>.and (<>:pure {.:None}) ?list.any)))

(with_template [<name> <from>]
  [(syntax.the .public (<name> [[frame value] ..cast])
     (monad.let [! meta.monad]
       ['_ (macro.name "'_")
        [name type_vars of as] (when frame
                                 {.:Some frame}
                                 (monad.let !
                                   [frame (binding.normal frame)]
                                   (..specific frame))
                                 
                                 {.:None}
                                 ..current)]
       (pure (list (` (.as (for_any ((, '_) (,* type_vars))
                             (-> (, <from>)
                                 (, <name>)))
                           (, value)))))))]

  [[of as]
   [as of]])

(.the declarationP
  (Projection [Text (List Text)])
  (<>.either (<code>.form (<>.and <code>.local (<>.some <code>.local)))
             (<>.and <code>.local (by <>.monad pure (list)))))

(.the abstract
  (Projection [Code [Text (List Text)] Code (List Code)])
  (export.with
    (all <>.and
         ..declarationP
         ?list.any
         (<>.some ?list.any)
         )))

... TODO: Make sure the generated code always gets optimized away.
... (This applies to uses of "of" and "as")
(syntax.the .public (every [[export_policy [name type_vars] as_type nominals]
                            ..abstract])
  (monad.let meta.monad
    [[current_module _] module.current
     'Reification (macro.name "Reification")
     .let [type_varsC (list:each code.local type_vars)
           of_declaration (` ((, (code.local name)) (,* type_varsC)))
           as_declaration (` ((, 'Reification) (,* type_varsC)))
           full_name [current_module name]]]
    (..declaration [full_name type_varsC of_declaration as_declaration]
      (` (.these (.every (, export_policy) (, of_declaration)
                   (Nominal (, (code.text (name:as full_name)))
                            [(,* (list:each (|>> (list (code.bit .co_variant))
                                                 code.tuple)
                                            type_varsC))]))
                 (.every (, as_declaration)
                   (, as_type))
                 (,* nominals))))))

(.the selection
  (Projection [(List Code) Code])
  (<>.either (<>.and (<>:each (|>> list) ?list.any) ?list.any)
             (<>.and (<>:pure (list)) ?list.any)))

(syntax.the .public (transmutation [[specific value] ..selection])
  (pure (list (` (.|> (, value)
                      (..as (,* specific))
                      (..of (,* specific)))))))
