... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except every)
   [abstract
    [monad (.only do)]
    ["<>" projection (.use "[1]#[0]" monad)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   ["[0]" macro (.only)
    ["[0]" context]
    ["[0]" syntax (.only)
     ["[0]" export]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" name (.use "[1]#[0]" absolute)]
    ["[0]" binding]
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]]]]
 ["[0]" //])

(the with_template' (.in_module# .prelude .with_template))

(.every .public Frame
  (Record
   [#name Name
    #type_vars (List Code)
    #abstraction Code
    #reification Code]))

(context.def
 [frames]
 [expression]
 [declaration]
 Frame)

(.the .public current
  (Meta Frame)
  (context.peek ..frames))

(.the .public (specific name)
  (-> Name
      (Meta Frame))
  (context.search (|>> (its #name) (name.= name))
                  ..frames))

(.the cast
  (Projection [(Maybe Name) Code])
  (<>.either (<>.and (<>.maybe <code>.name) <code>.any)
             (<>.and (<>#in {.#None}) <code>.any)))

(with_template' [<name> <from> <to>]
  [(.the .public <name>
     (syntax.macro (_ [[frame value] ..cast])
       (do [! meta.monad]
         [[name type_vars abstraction reification] (when frame
                                                     {.#Some frame}
                                                     (do !
                                                       [frame (binding.normal frame)]
                                                       (..specific frame))
                                                     
                                                     {.#None}
                                                     ..current)]
         (in (stack (` (//.as [(,* (list.as_stack type_vars))] (, <from>) (, <to>)
                              (, value))))))))]

  [abstraction reification abstraction]
  [reification abstraction reification]
  )

(.the declarationP
  (Projection [Text (List Text)])
  (<>.either (<code>.form (<>.and <code>.local (<>.some <code>.local)))
             (<>.and <code>.local (by <>.monad in (list)))))

(.the abstract
  (Projection [Code [Text (List Text)] Code (List Code)])
  (export.with
    (all <>.and
         ..declarationP
         <code>.any
         (<>.some <code>.any)
         )))

... TODO: Make sure the generated code always gets optimized away.
... (This applies to uses of "abstraction" and "reification")
(.the .public every
  (syntax.macro (_ [[export_policy [name type_vars] reification_type nominals]
                    ..abstract])
    (do meta.monad
      [[current_module _] module.current
       'Reification (macro.name "Reification")
       .let [type_varsC (list#each code.local type_vars)
             abstraction_declaration (` ((, (code.local name)) (,* (list.as_stack type_varsC))))
             reification_declaration (` ((, 'Reification) (,* (list.as_stack type_varsC))))
             full_name [current_module name]]]
      (..declaration [full_name type_varsC abstraction_declaration reification_declaration]
        (` (.these (.every (, export_policy) (, abstraction_declaration)
                     (Nominal (, (code.text (name#as full_name)))
                              [(,* (list.as_stack type_varsC))]))
                   (.every (, reification_declaration)
                     (, reification_type))
                   (,* (list.as_stack nominals))))))))

(.the selection
  (Projection [(List Code) Code])
  (<>.either (<>.and (<>#each (|>> list) <code>.any) <code>.any)
             (<>.and (<>#in (list)) <code>.any)))

(.the .public transmutation
  (syntax.macro (_ [[specific value] ..selection])
    (in (stack (` (.|> (, value)
                       (..reification (,* (list.as_stack specific)))
                       (..abstraction (,* (list.as_stack specific)))))))))
