... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except only except)
   [abstract
    [monad (.only do)]
    ["?" projection]]
   [error (.only error)
    ["[0]" try (.only Try)]]
   ["[0]" function (.only)
    ["[0]" predicate (.only Predicate)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]
     ["[0]" stack (.use "[1]#[0]" functor monoid)]]]
   [math
    [number
     ["n" natural]]]
   [macro
    ["[0]" syntax]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" binding]
    ["[0]" provenance]
    ["[0]" name]
    ["[0]" label]
    ["[0]" code
     ["?[1]" \\projection]]]]]
 ["[0]" // (.only)
  ["[1][0]" function]])

(the .public member
  (syntax.macro (_ [label ?code.global
                    parameters (?code.tuple (?.some ?code.any))])
    (do [! meta.monad]
      [full_label (binding.normal label)
       label (meta.or (label.tag full_label)
                      (label.slot full_label))
       parameters (list.each' ! (|>> (meta.eval Type)
                                     (by ! each (|>> (.as Type))))
                              parameters)
       .let [[flat context it] (when label
                                 {.#Left [context it]}
                                 [//.flat_variant context it]
                                 
                                 {.#Right [context it]}
                                 [//.flat_tuple context it])]
       [here _] module.current
       it (when (//.applied (list.as_stack parameters) it)
            {.#Some it}
            (in it)

            {.#None}
            (meta.failure (text "Cannot apply type "
                                (//.relative_text here it)
                                " to parameters: "
                                (|> parameters
                                    (list#each (//.relative_text here))
                                    (text.interposed ", ")))))
       it (when context
            {.#None}
            (in it)

            {.#Some [lefts right? _]}
            (when (list.item (if right?
                               (++ lefts)
                               lefts)
                             (flat it))
              {try.#Success it}
              (in it)

              {try.#Failure _}
              (meta.failure (text "Invalid label "
                                  (by (name.relative here) as full_label)
                                  " for type "
                                  (//.relative_text here it)))))]
      (in (stack (//.code it))))))

(the as_type
  (-> Type
      Code)
  (|>> //.code
       (,)
       (is Type)
       (`)))

(the .public slots_belong_to_different_types
  (error "Slots belong to different types."))

(the (specialized parameters [head tail])
  (-> (List Code) [Name (List Name)]
      (Meta [(List Type) [Label (List Label)]]))
  (do [! meta.monad]
    [head (label.slot head)
     tail (list.each' ! label.slot tail)
     .let [general_type (product.right head)]
     _ (if (list.every? (|>> product.right (by //.equivalence = general_type)) tail)
         (in [])
         (meta.failure ..slots_belong_to_different_types))
     parameters (list.each' ! (|>> (meta.eval Type)
                                   (by ! each (|>> (.as Type))))
                            parameters)
     it (when (//.applied (list.as_stack parameters) general_type)
          {.#Some it}
          (in it)

          {.#None}
          (meta.failure //function.cannot_specialize))]
    (in [(//.flat_tuple it) [head tail]])))

(the .public singleton
  (error "Cannot produce a subset of a singleton."))

(the (slot_index [it _])
  (-> Label
      (Try Natural))
  (when it
    {.#Some [index right? cohort]}
    {try.#Success (if right?
                    (++ index)
                    index)}

    {.#None}
    {try.#Failure ..singleton}))

(the .public only
  (syntax.macro (_ [parameters (?code.tuple (?.some ?code.any))
                    [head tail] (?code.tuple (?.and ?code.name (?.some ?code.name)))])
    (do [! meta.monad]
      [[specialized_type [head tail]] (..specialized parameters [head tail])
       subset (meta.of_try
               (do [! try.monad]
                 [head (..slot_index head)
                  tail (list.each' ! ..slot_index tail)]
                 (|> (list#composite (list head) tail)
                     (list.each' ! ((function.flipped list.item) specialized_type)))))]
      (in (stack (as_type (//.tuple (list.as_stack subset))))))))

(the .public except
  (syntax.macro (_ [parameters (?code.tuple (?.some ?code.any))
                    [head tail] (?code.tuple (?.and ?code.name (?.some ?code.name)))])
    (do [! meta.monad]
      [[specialized_type [head tail]] (..specialized parameters [head tail])
       excluded (meta.of_try
                 (do [! try.monad]
                   [head (..slot_index head)
                    tail (list.each' ! ..slot_index tail)]
                   (in (list#composite (list head) tail))))
       .let [excluded? (is (Predicate Natural)
                           (function (_ index)
                             (list.any? (n.= index) excluded)))
             included (|> (when (product.left head)
                            {.#Some [index exported? cohort]}
                            (stack.size cohort)

                            {.#None}
                            1)
                          list.indices
                          (list.only (predicate.not excluded?)))]
       subset (meta.of_try
               (list.each' try.monad ((function.flipped list.item) specialized_type)
                           included))]
      (in (stack (as_type (//.tuple (list.as_stack subset))))))))
