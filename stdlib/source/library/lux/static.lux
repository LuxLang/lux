(.using
 [library
  [lux {"-" nat int rev if cond}
   ["[0]" meta ("[1]#[0]" functor)]
   [abstract
    [monad (.only do)]]
   [control
    ["<>" parser
     ["<[0]>" code]]]
   [data
    [collection
     ["[0]" list ("[1]#[0]" functor mix)]]]
   [macro
    [syntax (.only syntax:)]
    ["[0]" code]]
   [math
    [number (.only hex)]
    ["[0]" random (.only Random)]]]])

(template [<name> <type> <format>]
  [(syntax: .public (<name> [expression <code>.any])
     (# meta.monad each
        (|>> (as <type>) <format> list)
        (meta.eval <type> expression)))]

  [bit .Bit code.bit]
  [nat .Nat code.nat]
  [int .Int code.int]
  [rev .Rev code.rev]
  [frac .Frac code.frac]
  [text .Text code.text]
  )

(def: pcg_32_magic_inc
  Nat
  (hex "FEDCBA9876543210"))

(with_expansions [<type> (Ex (_ a)
                           [(-> a Code)
                            a])]
  (syntax: .public (literal [format <code>.any
                             expression <code>.any])
    (do meta.monad
      [pair (meta.eval (.type <type>)
                       (` [(~ format) (~ expression)]))
       .let [[format expression] (as <type> pair)]]
      (in (list (format expression))))))

(with_expansions [<type> (Ex (_ a)
                           [(-> a Code)
                            (List a)])]
  (syntax: .public (literals [format <code>.any
                              expression <code>.any])
    (do meta.monad
      [pair (meta.eval (.type <type>)
                       (` [(~ format) (~ expression)]))
       .let [[format expression] (as <type> pair)]]
      (in (list#each format expression)))))

(syntax: .public (seed [])
  (meta#each (|>> code.nat list) meta.seed))

(template [<name> <random> <format>]
  [(syntax: .public (<name> [])
     (do meta.monad
       [seed meta.seed
        .let [[_ result] (random.result (random.pcg_32 [..pcg_32_magic_inc seed])
                                        <random>)]]
       (in (list (<format> result)))))]

  [random_bit random.bit code.bit]
  [random_nat random.nat code.nat]
  [random_int random.int code.int]
  [random_rev random.rev code.rev]
  [random_frac random.frac code.frac]
  )

(with_expansions [<type> (Ex (_ a)
                           [(-> a Code)
                            (Random a)])]
  (syntax: .public (random [format <code>.any
                            random <code>.any])
    (do meta.monad
      [pair (meta.eval (type <type>)
                       (` [(~ format) (~ random)]))
       .let [[format random] (as <type> pair)]
       seed meta.seed
       .let [[_ result] (random.result (random.pcg_32 [..pcg_32_magic_inc seed])
                                       random)]]
      (in (list (format result))))))

(with_expansions [<type> (Ex (_ a)
                           [(-> a Code)
                            (Random (List a))])]
  (syntax: .public (randoms [format <code>.any
                             random <code>.any])
    (do meta.monad
      [pair (meta.eval (type <type>)
                       (` [(~ format) (~ random)]))
       .let [[format random] (as <type> pair)]
       seed meta.seed
       .let [[_ result] (random.result (random.pcg_32 [..pcg_32_magic_inc seed])
                                       random)]]
      (in (list#each format result)))))

(syntax: .public (if [test <code>.any
                      then <code>.any
                      else <code>.any])
  (do meta.monad
    [test (meta.eval .Bit test)]
    (in (list (.if (as .Bit test)
                then
                else)))))

(syntax: .public (cond [test,then/* (<>.some (<>.and <code>.any <code>.any))
                        else <code>.any])
  (in (list (list#mix (function (_ [test then] else)
                        (` (..if (~ test)
                             (~ then)
                             (~ else))))
                      else
                      (list.reversed test,then/*)))))

(syntax: .public (when [test <code>.any
                        then <code>.any])
  (do meta.monad
    [test (meta.eval .Bit test)]
    (in (.if (as .Bit test)
          (list then)
          (list)))))
