(.require
 [library
  [lux (.except nat int rev if cond)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" parser]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [macro
    [syntax (.only syntax)]]
   [math
    [number (.only hex)]
    ["[0]" random (.only Random)]]
   ["[0]" meta (.use "[1]#[0]" functor)
    ["[0]" code (.only)
     ["<[1]>" \\parser]]]]])

(with_template [<name> <type> <format>]
  [(def .public <name>
     (syntax (_ [expression <code>.any])
       (at meta.monad each
           (|>> (as <type>) <format> list)
           (meta.eval <type> expression))))]

  [bit .Bit code.bit]
  [nat .Nat code.nat]
  [int .Int code.int]
  [rev .Rev code.rev]
  [frac .Frac code.frac]
  [text .Text code.text]
  )

(def pcg_32_magic_inc
  Nat
  (hex "FEDCBA9876543210"))

(with_expansions [<type> (Ex (_ a)
                           [(-> a Code)
                            a])]
  (def .public literal
    (syntax (_ [format <code>.any
                expression <code>.any])
      (do meta.monad
        [pair (meta.eval (.type_literal <type>)
                         (` [(, format) (, expression)]))
         .let [[format expression] (as <type> pair)]]
        (in (list (format expression)))))))

(with_expansions [<type> (Ex (_ a)
                           [(-> a Code)
                            (List a)])]
  (def .public literals
    (syntax (_ [format <code>.any
                expression <code>.any])
      (do meta.monad
        [pair (meta.eval (.type_literal <type>)
                         (` [(, format) (, expression)]))
         .let [[format expression] (as <type> pair)]]
        (in (list#each format expression))))))

(def .public seed
  (syntax (_ [])
    (meta#each (|>> code.nat list) meta.seed)))

(with_template [<name> <random> <format>]
  [(def .public <name>
     (syntax (_ [])
       (do meta.monad
         [seed meta.seed
          .let [[_ result] (random.result (random.pcg_32 [..pcg_32_magic_inc seed])
                                          <random>)]]
         (in (list (<format> result))))))]

  [random_bit random.bit code.bit]
  [random_nat random.nat code.nat]
  [random_int random.int code.int]
  [random_rev random.rev code.rev]
  [random_frac random.frac code.frac]
  )

(with_expansions [<type> (Ex (_ a)
                           [(-> a Code)
                            (Random a)])]
  (def .public random
    (syntax (_ [format <code>.any
                random <code>.any])
      (do meta.monad
        [pair (meta.eval (type_literal <type>)
                         (` [(, format) (, random)]))
         .let [[format random] (as <type> pair)]
         seed meta.seed
         .let [[_ result] (random.result (random.pcg_32 [..pcg_32_magic_inc seed])
                                         random)]]
        (in (list (format result)))))))

(with_expansions [<type> (Ex (_ a)
                           [(-> a Code)
                            (Random (List a))])]
  (def .public randoms
    (syntax (_ [format <code>.any
                random <code>.any])
      (do meta.monad
        [pair (meta.eval (type_literal <type>)
                         (` [(, format) (, random)]))
         .let [[format random] (as <type> pair)]
         seed meta.seed
         .let [[_ result] (random.result (random.pcg_32 [..pcg_32_magic_inc seed])
                                         random)]]
        (in (list#each format result))))))

(def .public if
  (syntax (_ [test <code>.any
              then <code>.any
              else <code>.any])
    (do meta.monad
      [test (meta.eval .Bit test)]
      (in (list (.if (as .Bit test)
                  then
                  else))))))

(def .public cond
  (syntax (_ [test,then/* (<>.some (<>.and <code>.any <code>.any))
              else <code>.any])
    (in (list (list#mix (function (_ [test then] else)
                          (` (..if (, test)
                               (, then)
                               (, else))))
                        else
                        (list.reversed test,then/*))))))

(def .public when
  (syntax (_ [test <code>.any
              then <code>.any])
    (do meta.monad
      [test (meta.eval .Bit test)]
      (in (.if (as .Bit test)
            (list then)
            (list))))))
