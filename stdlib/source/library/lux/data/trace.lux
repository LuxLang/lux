(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monoid (.only Monoid)]
    [functor (.only Functor)]
    comonad]
   function]])

(type: .public (Trace t a)
  (Record
   [#monoid (Monoid t)
    #trace (-> t a)]))

(implementation: .public functor
  (All (_ t) (Functor (Trace t)))

  (def: (each f fa)
    (revised #trace (composite f) fa)))

(implementation: .public comonad
  (All (_ t) (CoMonad (Trace t)))
  
  (def: functor ..functor)

  (def: (out wa)
    ((the #trace wa)
     (the [#monoid monoid.#identity] wa)))

  (def: (disjoint wa)
    (let [monoid (the #monoid wa)]
      [#monoid monoid
       #trace (function (_ t1)
                [#monoid monoid
                 #trace (function (_ t2)
                          ((the #trace wa)
                           (# monoid composite t1 t2)))])])))

(def: .public (result context tracer)
  (All (_ t a) (-> t (Trace t a) a))
  (# tracer trace context))
