(.module:
  [library
   [lux #*
    [abstract
     ["." monoid (#+ Monoid)]
     [functor (#+ Functor)]
     comonad]
    function]])

(type: .public (Trace t a)
  {#monoid (Monoid t)
   #trace (-> t a)})

(implementation: .public functor (All [t] (Functor (Trace t)))
  (def: (map f fa)
    (update@ #trace (compose f) fa)))

(implementation: .public comonad (All [t] (CoMonad (Trace t)))
  (def: &functor ..functor)

  (def: (out wa)
    ((get@ #trace wa)
     (get@ [#monoid #monoid.identity] wa)))

  (def: (split wa)
    (let [monoid (get@ #monoid wa)]
      {#monoid monoid
       #trace (function (_ t1)
                {#monoid monoid
                 #trace (function (_ t2)
                          ((get@ #trace wa)
                           (\ monoid compose t1 t2)))})})))

(def: .public (run context tracer)
  (All [t a] (-> t (Trace t a) a))
  (\ tracer trace context))
