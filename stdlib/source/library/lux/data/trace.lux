(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monoid (.only Monoid)]
    [functor (.only Functor)]
    comonad]]])

(type .public (Trace t a)
  (Record
   [#monoid (Monoid t)
    #trace (-> t a)]))

(def .public functor
  (All (_ t) (Functor (Trace t)))
  (implementation
   (def (each f fa)
     (revised #trace (composite f) fa))))

(def .public comonad
  (All (_ t) (CoMonad (Trace t)))
  (implementation
   (def functor ..functor)

   (def (out wa)
     ((the #trace wa)
      (the [#monoid monoid.#identity] wa)))

   (def (disjoint wa)
     (let [monoid (the #monoid wa)]
       [#monoid monoid
        #trace (function (_ t1)
                 [#monoid monoid
                  #trace (function (_ t2)
                           ((the #trace wa)
                            (at monoid composite t1 t2)))])]))))

(def .public (result context tracer)
  (All (_ t a) (-> t (Trace t a) a))
  (at tracer trace context))
