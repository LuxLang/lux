... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [monoid (.only Monoid)]]]])

(the with_template (.in_module# .prelude .with_template))

(with_template [<name>]
  [(the .public (<name> [left right])
     (for_any (_ left right)
       (-> [left right]
           <name>))
     <name>)]

  [[left]
   [right]]
  )

... https://en.wikipedia.org/wiki/Currying
(the .public (curried f)
  (for_any (_ left right it)
    (-> (-> [left right] it)
        (-> left right it)))
  (function (_ x y)
    (f [x y])))

(the .public (uncurried f)
  (for_any (_ left right it)
    (-> (-> left right it)
        (-> [left right] it)))
  (function (_ xy)
    (let [[x y] xy]
      (f x y))))

(the .public (swapped [left right])
  (for_any (_ left right)
    (-> [left right]
        [right left]))
  [right left])

(the .public (then f g)
  (for_any (_ left right left' right')
    (-> (-> left left') (-> right right')
        (-> [left right] [left' right'])))
  (function (_ [x y])
    [(f x) (g y)]))

(the .public (forked f g)
  (for_any (_ it left right)
    (-> (-> it left) (-> it right)
        (-> it [left right])))
  (function (_ x)
    [(f x) (g x)]))

(the .public (equivalence left right)
  (for_any (_ left right)
    (-> (Equivalence left) (Equivalence right)
        (Equivalence [left right])))
  (implementation
   (the (= [rl rr] [sl sr])
     (and (by left = rl sl)
          (by right = rr sr)))))

(the .public (hash left right)
  (for_any (_ left right)
    (-> (Hash left) (Hash right)
        (Hash [left right])))
  (implementation
   (the equivalence
     (..equivalence (by left equivalence)
                    (by right equivalence)))
   (the (hash [leftV rightV])
     (.i64_+# (by left hash leftV)
              (by right hash rightV)))))

(the .public (monoid left right)
  (for_any (_ left right)
    (-> (Monoid left) (Monoid right)
        (Monoid [left right])))
  (implementation
   (the identity
     [(by left identity)
      (by right identity)])
   (the (composite before after)
     [(by left composite (..left before) (..left after))
      (by right composite (..right before) (..right after))])))
