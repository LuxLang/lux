(.require
 [library
  [lux (.except left right)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]]])

(with_template [<name>]
  [(def .public (<name> [left right])
     (All (_ left right)
       (-> [left right] <name>))
     <name>)]

  [left]
  [right]
  )

... https://en.wikipedia.org/wiki/Currying
(def .public (curried f)
  (All (_ a b c)
    (-> (-> [a b] c)
        (-> a b c)))
  (function (_ x y)
    (f [x y])))

(def .public (uncurried f)
  (All (_ a b c)
    (-> (-> a b c)
        (-> [a b] c)))
  (function (_ xy)
    (let [[x y] xy]
      (f x y))))

(def .public (swapped [left right])
  (All (_ left right) (-> [left right] [right left]))
  [right left])

(def .public (then f g)
  (All (_ a b c d)
    (-> (-> a c) (-> b d)
        (-> [a b] [c d])))
  (function (_ [x y])
    [(f x) (g y)]))

(def .public (forked f g)
  (All (_ a l r)
    (-> (-> a l) (-> a r)
        (-> a [l r])))
  (function (_ x)
    [(f x) (g x)]))

(def .public (equivalence left right)
  (All (_ l r) (-> (Equivalence l) (Equivalence r) (Equivalence [l r])))
  (implementation
   (def (= [rl rr] [sl sr])
     (and (at left = rl sl)
          (at right = rr sr)))))

(def .public (hash left right)
  (All (_ l r) (-> (Hash l) (Hash r) (Hash [l r])))
  (implementation
   (def equivalence
     (..equivalence (at left equivalence)
                    (at right equivalence)))
   (def (hash [leftV rightV])
     (.i64_+# (at left hash leftV)
              (at right hash rightV)))))
