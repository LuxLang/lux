... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [control
    [function
     [predicate (.only Predicate)]]]
   [data
    ["[0]" product]]
   [math
    [number
     ["n" nat]
     ["i" int]
     ["f" frac]
     ["[0]" i64]]]]])

(def .public limit
  Nat
  256)

(type .public Value
  Nat)

(with_template [<name> <value>]
  [(def .public <name>
     Value
     <value>)]

  [least 0]
  [most (-- limit)]
  )

(def .public (value? it)
  (Predicate Nat)
  (not (or (n.< ..least it)
           (n.> ..most it))))

(def .public value
  (-> Nat
      Value)
  (|>> (n.max ..least)
       (n.min ..most)))

(type .public RGB
  (Record
   [#red Value
    #green Value
    #blue Value]))

(def .public (rgb red green blue)
  (-> Nat Nat Nat
      RGB)
  [#red (value red)
   #green (value green)
   #blue (value blue)])

(def .public hash
  (Hash RGB)
  (all product.hash
       n.hash
       n.hash
       n.hash
       ))

(def .public equivalence
  (Equivalence RGB)
  (of ..hash equivalence))

(def (opposite_intensity value)
  (-> Nat
      Nat)
  (|> ..most
      (n.- value)))

(def .public (complement it)
  (-> RGB
      RGB)
  (`` [(,, (with_template [<slot>]
             [<slot> (|> it
                         (the <slot>)
                         opposite_intensity)]

             [#red]
             [#green]
             [#blue]
             ))]))

(with_template [<color> <value>]
  [(def .public <color>
     RGB
     [#red <value>
      #green <value>
      #blue <value>])]

  [black ..least]
  [white ..most]
  )

(with_template [<identity> <composite> <monoid>]
  [(def .public <monoid>
     (Monoid RGB)
     (implementation
      (def identity
        <identity>)

      (def (composite left right)
        (`` [(,, (with_template [<slot>]
                   [<slot> (<composite> (the <slot> left)
                                        (the <slot> right))]

                   [#red]
                   [#green]
                   [#blue]
                   ))]))))]

  [..black n.max addition]
  [..white n.min subtraction]
  )

(def (ratio it)
  (-> Frac
      Frac)
  (cond (f.> +1.0 it)
        (f.% +1.0 it)

        (f.< +0.0 it)
        (|> it (f.% +1.0) (f.+ +1.0))

        ... else
        it))

(def .public (interpolated end ratio start)
  (-> RGB Frac RGB
      RGB)
  (let [dS (..ratio ratio)
        dE (|> +1.0 (f.- dS))
        interpolated' (is (-> Nat Nat
                              Nat)
                          (function (_ end start)
                            (|> (|> start .int i.frac (f.* dS))
                                (f.+ (|> end .int i.frac (f.* dE)))
                                f.int
                                .nat)))]
    (..rgb (interpolated' (the #red end) (the #red start))
           (interpolated' (the #green end) (the #green start))
           (interpolated' (the #blue end) (the #blue start)))))

(with_template [<name> <target>]
  [(def .public <name>
     (-> Frac RGB
         RGB)
     (..interpolated <target>))]

  [darker   ..black]
  [brighter ..white]
  )
