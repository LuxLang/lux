... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [control
    [function
     [predicate (.only Predicate)]]]
   [data
    ["[0]" product]
    [text
     ["%" \\injection]]]
   [math
    [number
     ["n" nat]
     ["i" int]
     ["d" dec]
     ["[0]" i64]]]]])

(the mask
  i64.Mask
  (i64.mask 8))

(the .public limit
  Nat
  (++ (nat ..mask)))

(every .public Value
  Nat)

(with_template [<name> <value>]
  [(the .public <name>
     Value
     <value>)]

  [least 0]
  [most (-- limit)]
  )

(the .public (value? it)
  (Predicate Nat)
  (not (or (n.< ..least it)
           (n.> ..most it))))

(the .public value
  (-> Nat
      Value)
  (i64.and ..mask))

(every .public RGB
  Nat)

(with_template [<section> <name>]
  [(the .public <name>
     (-> RGB
         Value)
     (|>> (i64.right_shifted (n.* 8 <section>))
          (i64.and ..mask)))]

  [2 red]
  [1 green]
  [0 blue]
  )

(the .public (rgb red green blue)
  (-> Nat Nat Nat
      RGB)
  (`` (all i64.or
           (,, (with_template [<section> <name>]
                 [(i64.left_shifted (n.* 8 <section>) (value <name>))]

                 [2 red]
                 [1 green]
                 [0 blue]
                 ))
           )))

(the .public hash
  (Hash RGB)
  n.hash)

(the .public equivalence
  (Equivalence RGB)
  (of ..hash equivalence))

(the (opposite_intensity value)
  (-> Value
      Value)
  (|> ..most
      (n.- value)))

(the .public (complement it)
  (-> RGB
      RGB)
  (`` (rgb (,, (with_template [<slot>]
                 [(|> it
                      <slot>
                      opposite_intensity)]

                 [red]
                 [green]
                 [blue]
                 )))))

(with_template [<color> <value>]
  [(the .public <color>
     RGB
     (rgb <value> <value> <value>))]

  [black ..least]
  [white ..most]
  )

(with_template [<identity> <composite> <monoid>]
  [(the .public <monoid>
     (Monoid RGB)
     (implementation
      (the identity
        <identity>)

      (the (composite left right)
        (`` (rgb (,, (with_template [<slot>]
                       [(<composite> (<slot> left)
                                     (<slot> right))]

                       [red]
                       [green]
                       [blue]
                       )))))))]

  [..black n.max addition]
  [..white n.min subtraction]
  )

(the (ratio it)
  (-> Dec
      Dec)
  (cond (d.> +1.0 it)
        (d.% +1.0 it)

        (d.< +0.0 it)
        (|> it (d.% +1.0) (d.+ +1.0))

        ... else
        it))

(the .public (interpolated end ratio start)
  (-> RGB Dec RGB
      RGB)
  (let [dS (..ratio ratio)
        dE (|> +1.0 (d.- dS))
        interpolated' (is (-> Nat Nat
                              Nat)
                          (function (_ end start)
                            (|> (|> start .int i.dec (d.* dS))
                                (d.+ (|> end .int i.dec (d.* dE)))
                                d.int
                                .nat)))]
    (..rgb (interpolated' (red end) (red start))
           (interpolated' (green end) (green start))
           (interpolated' (blue end) (blue start)))))

(with_template [<name> <target>]
  [(the .public <name>
     (-> Dec RGB
         RGB)
     (..interpolated <target>))]

  [darker   ..black]
  [brighter ..white]
  )

(the .public (format it)
  (%.Injection RGB)
  (%.message "rgb("
             (%.nat (red it))
             "," (%.nat (green it))
             "," (%.nat (blue it))
             ")"))
