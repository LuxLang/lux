(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    ["[0]" hash (.only Hash)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\format]]]
   [math
    [number
     ["n" nat]
     ["[0]" i64]]]
   [meta
    [type
     ["[0]" nominal]]]]])

(def .public limit
  Nat
  256)

(nominal.def .public Value
  Nat

  (def .public least
    Value
    (nominal.abstraction 0))

  (def .public most
    Value
    (nominal.abstraction (-- ..limit)))

  (exception.def .public (invalid it)
    (Exception Nat)
    (exception.report
     (list ["Limit" (%.nat ..limit)]
           ["Value" (%.nat it)])))

  (def .public (value it)
    (-> Nat
        (Try Value))
    (if (n.< ..limit it)
      {try.#Success (nominal.abstraction it)}
      (exception.except ..invalid [it])))

  (def .public number
    (-> Value Nat)
    (|>> nominal.representation))

  (type .public RGB
    (Record
     [#red Value
      #green Value
      #blue Value]))

  (def .public (rgb red green blue)
    (-> Nat Nat Nat
        (Try RGB))
    (do try.monad
      [red (value red)
       green (value green)
       blue (value blue)]
      (in [#red red
           #green green
           #blue blue])))

  (def .public equivalence
    (Equivalence RGB)
    (implementation
     (def (= [rR gR bR] [rS gS bS])
       (and (n.= (nominal.representation rR) (nominal.representation rS))
            (n.= (nominal.representation gR) (nominal.representation gS))
            (n.= (nominal.representation bR) (nominal.representation bS))))))

  (def .public hash
    (Hash RGB)
    (implementation
     (def equivalence
       ..equivalence)

     (def (hash [r g b])
       (all i64.or
            (i64.left_shifted 16 (nominal.representation r))
            (i64.left_shifted 08 (nominal.representation g))
            (nominal.representation b)))))

  (def (opposite_intensity value)
    (-> Nat Nat)
    (|> (nominal.representation ..most)
        (n.- value)))

  (def .public (complement it)
    (-> RGB RGB)
    (`` [(,, (with_template [<slot>]
               [<slot> (|> it
                           (the <slot>)
                           nominal.representation
                           opposite_intensity
                           nominal.abstraction)]

               [#red]
               [#green]
               [#blue]
               ))]))

  (def .public black
    RGB
    [#red ..least
     #green ..least
     #blue ..least])

  (def .public white
    RGB
    [#red ..most
     #green ..most
     #blue ..most])

  (with_template [<monoid> <identity> <composite> <left> <right>]
    [(def .public <monoid>
       (Monoid RGB)
       (implementation
        (def identity
          <identity>)

        (def (composite left right)
          (let [left (<left> left)
                right (<right> right)]
            (`` [(,, (with_template [<slot>]
                       [<slot> (nominal.abstraction
                                (<composite> (nominal.representation (the <slot> left))
                                             (nominal.representation (the <slot> right))))]

                       [#red]
                       [#green]
                       [#blue]
                       ))])))))]

    [addition ..black n.max |> |>]
    [subtraction ..white n.min ..complement |>]
    )
  )
