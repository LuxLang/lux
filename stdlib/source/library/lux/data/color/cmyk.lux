... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    [function
     [predicate (.only Predicate)]]]
   [data
    ["[0]" product]]
   [math
    [number
     ["f" frac]
     ["[0]" int]]]]]
 [//
  ["[0]" rgb (.only RGB)]])

(type .public Value
  Frac)

(with_template [<value> <name>]
  [(def .public <name>
     Value
     <value>)]

  [+0.0 least]
  [+1.0 most]
  )

(def .public (value? it)
  (Predicate Frac)
  (not (or (f.< ..least it)
           (f.> ..most it))))

(def .public value
  (-> Frac
      Value)
  (|>> (f.max ..least)
       (f.min ..most)))

(type .public CMYK
  (Record
   [#cyan Value
    #magenta Value
    #yellow Value
    #key Value]))

(def .public equivalence
  (Equivalence CMYK)
  (all product.equivalence
       f.equivalence
       f.equivalence
       f.equivalence
       f.equivalence
       ))

(def top
  (-- rgb.limit))

(def rgb_factor
  (|> top .int int.frac))

(def down
  (-> Nat
      Frac)
  (|>> .int int.frac (f./ rgb_factor)))

(def up
  (-> Frac
      Nat)
  (|>> (f.* rgb_factor) f.round f.int .nat))

(def (opposite it)
  (-> Frac
      Frac)
  (f.- it ..most))

(def .public (of_rgb it)
  (-> RGB
      CMYK)
  (let [red (..down (its rgb.#red it))
        green (..down (its rgb.#green it))
        blue (..down (its rgb.#blue it))
        key (opposite (all f.max red green blue))
        f (if (f.< ..most key)
            (f./ (opposite key)
                 ..most)
            ..least)]
    [#cyan (|> ..most (f.- red) (f.- key) (f.* f))
     #magenta (|> ..most (f.- green) (f.- key) (f.* f))
     #yellow (|> ..most (f.- blue) (f.- key) (f.* f))
     #key key]))

(def .public (rgb it)
  (-> CMYK
      RGB)
  (when (its #key it)
    ..most
    rgb.black
    
    key
    (let [~key (opposite key)]
      (rgb.rgb (..up (f.* ~key (opposite (its #cyan it))))
               (..up (f.* ~key (opposite (its #magenta it))))
               (..up (f.* ~key (opposite (its #yellow it))))))))
