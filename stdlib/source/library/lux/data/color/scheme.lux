... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["i" int]
     ["f" frac]]]]]
 [//
  [rgb (.only RGB)]
  ["[0]" hsl]
  ["[0]" hsb]])

(def (ratio it)
  (-> Frac
      Frac)
  (cond (f.> +1.0 it)
        (f.% +1.0 it)

        (f.< +0.0 it)
        (|> it (f.% +1.0) (f.+ +1.0))

        ... else
        it))

(with_template [<name> <1> <2>]
  [(`` (def .public (<name> it)
         (-> RGB
             [RGB RGB RGB])
         (let [(open "/[0]") (hsl.of_rgb it)]
           [it
            (hsl.rgb (hsl.hsl (|> /#hue (f.+ <1>) ..ratio)
                              /#saturation
                              /#luminance))
            (hsl.rgb (hsl.hsl (|> /#hue (f.+ <2>) ..ratio)
                              /#saturation
                              /#luminance))])))]

  [triad            (|> +1.0 (f./ +3.0)) (|> +2.0 (f./ +3.0))]
  [clash            (|> +1.0 (f./ +4.0)) (|> +3.0 (f./ +4.0))]
  [split_complement (|> +1.0 (f./ +5.0)) (|> +3.0 (f./ +5.0))]
  )

(with_template [<name> <1> <2> <3>]
  [(`` (def .public (<name> it)
         (-> RGB
             [RGB RGB RGB RGB])
         (let [(open "/[0]") (hsl.of_rgb it)
               of_hue (is (-> hsl.Value
                              RGB)
                          (function (_ hue)
                            (hsl.rgb (hsl.hsl hue /#saturation /#luminance))))]
           [it
            (|> /#hue (f.+ <1>) ..ratio of_hue)
            (|> /#hue (f.+ <2>) ..ratio of_hue)
            (|> /#hue (f.+ <3>) ..ratio of_hue)])))]

  [square   (|> +1.0 (f./ +4.0))  (|> +2.0 (f./ +4.0))  (|> +3.0 (f./ +4.0))]
  [tetradic (|> +2.0 (f./ +12.0)) (|> +6.0 (f./ +12.0)) (|> +8.0 (f./ +12.0))]
  )

(type .public Spread
  Frac)

... https://en.wikipedia.org/wiki/Color_scheme
(type .public Scheme
  (-> Spread Nat RGB
      (List RGB)))

(def .public (analogous spread variations it)
  Scheme
  (let [it (hsl.of_rgb it)
        hue (the hsl.#hue it)
        saturation (the hsl.#saturation it)
        luminance (the hsl.#luminance it)
        spread (..ratio spread)]
    (list#each (function (_ idx)
                 (hsl.rgb (hsl.hsl (|> idx ++ .int i.frac (f.* spread) (f.+ hue) ..ratio)
                                   saturation
                                   luminance)))
               (list.indices variations))))

(def .public (monochromatic spread variations it)
  Scheme
  (let [it (hsb.of_rgb it)
        hue (hsb.hue it)
        saturation (hsb.saturation it)
        brightness (hsb.brightness it)
        spread (..ratio spread)]
    (|> (list.indices variations)
        (list#each (|>> ++ .int i.frac
                        (f.* spread)
                        (f.+ brightness)
                        ..ratio
                        (hsb.hsb hue saturation)
                        hsb.rgb)))))
