(.module:
  [library
   [lux (#- list)
    [abstract
     [monoid (#+ Monoid)]
     [equivalence (#+ Equivalence)]
     [hash (#+ Hash)]
     [apply (#+ Apply)]
     ["." functor (#+ Functor)]
     ["." monad (#+ Monad do)]]
    [meta
     ["." location]]]])

## (type: (Maybe a)
##   #.None
##   (#.Some a))

(implementation: .public monoid
  (All [a] (Monoid (Maybe a)))
  
  (def: identity #.None)
  
  (def: (compose mx my)
    (case mx
      #.None
      my
      
      (#.Some x)
      (#.Some x))))

(implementation: .public functor
  (Functor Maybe)
  
  (def: (map f ma)
    (case ma
      #.None     #.None
      (#.Some a) (#.Some (f a)))))

(implementation: .public apply
  (Apply Maybe)
  
  (def: &functor ..functor)

  (def: (apply ff fa)
    (case [ff fa]
      [(#.Some f) (#.Some a)]
      (#.Some (f a))

      _
      #.None)))

(implementation: .public monad
  (Monad Maybe)
  
  (def: &functor ..functor)

  (def: (in x)
    (#.Some x))

  (def: (join mma)
    (case mma
      #.None
      #.None
      
      (#.Some mx)
      mx)))

(implementation: .public (equivalence super)
  (All [a] (-> (Equivalence a) (Equivalence (Maybe a))))
  
  (def: (= mx my)
    (case [mx my]
      [#.None #.None]
      #1

      [(#.Some x) (#.Some y)]
      (\ super = x y)
      
      _
      #0)))

(implementation: .public (hash super)
  (All [a] (-> (Hash a) (Hash (Maybe a))))

  (def: &equivalence
    (..equivalence (\ super &equivalence)))
  
  (def: (hash value)
    (case value
      #.None
      0

      (#.Some value)
      (\ super hash value))))

(implementation: .public (with monad)
  (All [M] (-> (Monad M) (Monad (All [a] (M (Maybe a))))))

  (def: &functor (functor.compose (get@ #monad.&functor monad) ..functor))

  (def: in (|>> (\ ..monad in) (\ monad in)))
  
  (def: (join MmMma)
    (do monad
      [mMma MmMma]
      (case mMma
        #.None
        (in #.None)

        (#.Some Mma)
        Mma))))

(def: .public (lift monad)
  {#.doc (doc "Wraps a monadic value with Maybe machinery.")}
  (All [M a] (-> (Monad M) (-> (M a) (M (Maybe a)))))
  (\ monad map (\ ..monad in)))

(macro: .public (else tokens state)
  {#.doc (doc "Allows you to provide a default value that will be used"
              "if a (Maybe x) value turns out to be #.None."
              "Note: the expression for the default value will not be computed if the base computation succeeds."
              (else +20 (#.Some +10))
              "=>"
              +10
              --------------------------
              (else +20 #.None)
              "=>"
              +20)}
  (case tokens
    (^ (.list else maybe))
    (let [g!temp (: Code [location.dummy (#.Identifier ["" ""])])]
      (#.Right [state (.list (` (case (~ maybe)
                                  (#.Some (~ g!temp))
                                  (~ g!temp)

                                  #.None
                                  (~ else))))]))

    _
    (#.Left "Wrong syntax for else")))

(def: .public assume
  {#.doc (doc "Assumes that a Maybe value is a #.Some and yields its value."
              "Raises/throws a runtime error otherwise."
              "WARNING: Use with caution.")}
  (All [a] (-> (Maybe a) a))
  (|>> (..else (undefined))))

(def: .public (list value)
  (All [a] (-> (Maybe a) (List a)))
  (case value
    #.None
    #.End

    (#.Some value)
    (#.Item value #.End)))

(macro: .public (when tokens state)
  {#.doc (doc "Can be used as a guard in (co)monadic be/do expressions."
              (do monad
                [value (do_something 1 2 3)
                 ..when (passes_test? value)]
                (do_something_else 4 5 6)))}
  (case tokens
    (^ (.list test then))
    (#.Right [state (.list (` (.if (~ test)
                                (~ then)
                                #.None)))])

    _
    (#.Left "Wrong syntax for when")))
