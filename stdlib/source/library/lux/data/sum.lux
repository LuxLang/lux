... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except by)
   [abstract
    [equality (.only Equality)]
    [hash (.only Hash)]]
   [data
    [collection
     ["[0]" list]]]
   [math
    [number
     ["[0]" /64]]]]])

(the with_template (.in_module# .prelude with_template))

(with_template [<right?> <name>]
  [(the .public <name>
     (for_any (_ left right)
       (-> <name>
           (Or left right)))
     (|>> {<right?>}))]

  [[0b left]
   [1b right]])

(the .public (by on_left on_right)
  (for_any (_ l l' r r')
    (-> (-> l l') (-> r r')
        (-> (Or l r) (Or l' r'))))
  (function (_ input)
    (when input
      {0b l} {0b (on_left l)}
      {1b r} {1b (on_right r)})))

(with_template [<right?> <side> <name>]
  [(the .public <name>
     (for_any (_ left right)
       (-> (List (Or left right))
           (List <side>)))
     (list.all (function (_ it)
                 (when it
                   {<right?> it}
                   {.:Some it}

                   _
                   {.:None}))))]

  [[0b left lefts]
   [1b right rights]])

(the .public (partition it)
  (for_any (_ left right)
    (-> (List (Or left right))
        [(List left) (List right)]))
  [(..lefts it)
   (..rights it)])

(the .public (equality left right)
  (for_any (_ l r)
    (-> (Equality l) (Equality r)
        (Equality (Or l r))))
  (implementation
   (the (= expected actual)
     (when [expected actual]
       [{.:Left expected} {.:Left actual}]
       (.by left = expected actual)

       [{.:Right expected} {.:Right actual}]
       (.by right = expected actual)

       _
       false))))

(the .public (hash left right)
  (for_any (_ l r)
    (-> (Hash l) (Hash r)
        (Hash (Or l r))))
  (implementation
   (the equality
     (..equality (.by left equality)
                 (.by right equality)))
   (the (hash value)
     (when value
       {.:Left value}
       (.by left hash value)

       {.:Right value}
       (|> value
           (.by right hash)
           (/64.left_rotated 1))))))
