... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [data
    [collection
     ["[0]" list]]]
   [macro
    ["[0]" template]]]])

(template.with [<right?> <name>]
  [(the .public <name>
     (for_any (_ left right)
       (-> <name>
           (Or left right)))
     (|>> {<right?>}))]

  [#0 left]
  [#1 right])

(the .public (either on_left on_right)
  (for_any (_ a b c)
    (-> (-> a c) (-> b c)
        (-> (Or a b) c)))
  (function (_ input)
    (when input
      {#0 l} (on_left l)
      {#1 r} (on_right r))))

(the .public (then on_left on_right)
  (for_any (_ l l' r r')
    (-> (-> l l') (-> r r')
        (-> (Or l r) (Or l' r'))))
  (function (_ input)
    (when input
      {#0 l} {#0 (on_left l)}
      {#1 r} {#1 (on_right r)})))

(template.with [<right?> <side> <name>]
  [(the .public <name>
     (for_any (_ left right)
       (-> (List (Or left right))
           (List <side>)))
     (list.all (function (_ it)
                 (when it
                   {<right?> it}
                   {.#Some it}

                   _
                   {.#None}))))]

  [#0 left lefts]
  [#1 right rights]
  )

(the .public (partition it)
  (for_any (_ left right)
    (-> (List (Or left right))
        [(List left) (List right)]))
  [(..lefts it)
   (..rights it)])

(the .public (equivalence left right)
  (for_any (_ l r) (-> (Equivalence l) (Equivalence r) (Equivalence (Or l r))))
  (implementation
   (the (= expected actual)
     (when [expected actual]
       [{.#Left expected} {.#Left actual}]
       (by left = expected actual)

       [{.#Right expected} {.#Right actual}]
       (by right = expected actual)

       _
       false))))

(the .public (hash left right)
  (for_any (_ l r)
    (-> (Hash l) (Hash r)
        (Hash (Or l r))))
  (implementation
   (the equivalence
     (..equivalence (by left equivalence)
                    (by right equivalence)))
   (the (hash value)
     (.natural (when value
                 {.#Left value}
                 (.int_*# +2 (.integer (by left hash value)))

                 {.#Right value}
                 (.int_*# +3 (.integer (by right hash value))))))))
