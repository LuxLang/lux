(.require
 [library
  [lux (.except left right)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]]])

(with_template [<right?> <name>]
  [(def .public (<name> value)
     (All (_ left right)
       (-> <name> (Or left right)))
     {0 <right?> value})]

  [#0 left]
  [#1 right])

(def .public (either on_left on_right)
  (All (_ a b c)
    (-> (-> a c) (-> b c)
        (-> (Or a b) c)))
  (function (_ input)
    (when input
      {0 #0 l} (on_left l)
      {0 #1 r} (on_right r))))

(def .public (then on_left on_right)
  (All (_ l l' r r')
    (-> (-> l l') (-> r r')
        (-> (Or l r) (Or l' r'))))
  (function (_ input)
    (when input
      {0 #0 l} {0 #0 (on_left l)}
      {0 #1 r} {0 #1 (on_right r)})))

(with_template [<right?> <side> <name>]
  [(def .public (<name> it)
     (All (_ t0 t1) (-> (List (Or t0 t1)) (List <side>)))
     ... TODO: Use the more obvious implementation once "tail recursion modulo cons" is added to the compiler.
     (list#mix (function (_ head tail)
                 (when head
                   {0 <right?> head}
                   (list.partial head tail)

                   _
                   tail))
               (list)
               (list.reversed it)))]

  [#0 t0 lefts]
  [#1 t1 rights]
  )

(def .public (partition xs)
  (All (_ a b) (-> (List (Or a b)) [(List a) (List b)]))
  (when xs
    {.#End}
    [{.#End} {.#End}]

    {.#Item x xs'}
    (let [[lefts rights] (partition xs')]
      (when x
        {0 #0 x'}  [{.#Item x' lefts} rights]
        {0 #1 x'} [lefts {.#Item x' rights}]))))

(def .public (equivalence left right)
  (All (_ l r) (-> (Equivalence l) (Equivalence r) (Equivalence (Or l r))))
  (implementation
   (def (= reference sample)
     (when [reference sample]
       [{.#Left reference} {.#Left sample}]
       (at left = reference sample)

       [{.#Right reference} {.#Right sample}]
       (at right = reference sample)

       _
       false))))

(def .public (hash left right)
  (All (_ l r) (-> (Hash l) (Hash r) (Hash (Or l r))))
  (implementation
   (def equivalence
     (..equivalence (at left equivalence)
                    (at right equivalence)))
   (def (hash value)
     (.nat (when value
             {.#Left value}
             ("lux i64 *" +2 (.int (at left hash value)))

             {.#Right value}
             ("lux i64 *" +3 (.int (at right hash value))))))))
