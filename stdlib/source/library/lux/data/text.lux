(.module:
  [library
   [lux #*
    ["@" target]
    [abstract
     [hash (#+ Hash)]
     [monoid (#+ Monoid)]
     [equivalence (#+ Equivalence)]
     [order (#+ Order)]
     [monad (#+ Monad do)]
     [codec (#+ Codec)]]
    [data
     ["." maybe]
     [collection
      ["." list ("#\." fold)]]]
    [math
     [number
      ["n" nat]
      ["." i64]]]]])

(type: #export Char
  Nat)

## TODO: Instead of ints, chars should be produced fron nats.
## (The JVM specifies chars as 16-bit unsigned integers)
(def: #export from_code
  (-> Char Text)
  (|>> .int "lux i64 char"))

(template [<code> <short> <long>]
  [(def: #export <long> (from_code <code>))
   (def: #export <short> <long>)]

  [00 \0  null]
  [07 \a  alarm]
  [08 \b  back_space]
  [09 \t  tab]
  [10 \n  new_line]
  [11 \v  vertical_tab]
  [12 \f  form_feed]
  [13 \r  carriage_return]
  [34 \'' double_quote]
  )

(def: #export line_feed ..new_line)

(def: #export size
  (-> Text Nat)
  (|>> "lux text size"))

(def: #export (nth idx input)
  (-> Nat Text (Maybe Char))
  (if (n.< ("lux text size" input) idx)
    (#.Some ("lux text char" idx input))
    #.None))

(def: #export (index_of' pattern from input)
  (-> Text Nat Text (Maybe Nat))
  ("lux text index" from pattern input))

(def: #export (index_of pattern input)
  (-> Text Text (Maybe Nat))
  ("lux text index" 0 pattern input))

(def: (last_index_of'' part since text)
  (-> Text Nat Text (Maybe Nat))
  (case ("lux text index" (inc since) part text)
    #.None
    (#.Some since)

    (#.Some since')
    (last_index_of'' part since' text)))

(def: #export (last_index_of' part from text)
  (-> Text Nat Text (Maybe Nat))
  (case ("lux text index" from part text)
    (#.Some since)
    (last_index_of'' part since text)

    #.None
    #.None))

(def: #export (last_index_of part text)
  (-> Text Text (Maybe Nat))
  (case ("lux text index" 0 part text)
    (#.Some since)
    (last_index_of'' part since text)

    #.None
    #.None))

(def: #export (starts_with? prefix x)
  (-> Text Text Bit)
  (case (index_of prefix x)
    (#.Some 0)
    true

    _
    false))

(def: #export (ends_with? postfix x)
  (-> Text Text Bit)
  (case (last_index_of postfix x)
    (#.Some n)
    (n.= (size x)
         (n.+ (size postfix) n))

    _
    false))

(def: #export (encloses? boundary value)
  (-> Text Text Bit)
  (and (starts_with? boundary value)
       (ends_with? boundary value)))

(def: #export (contains? sub text)
  (-> Text Text Bit)
  (case ("lux text index" 0 sub text)
    (#.Some _)
    true

    _
    false))

(def: #export (prefix param subject)
  (-> Text Text Text)
  ("lux text concat" param subject))

(def: #export (suffix param subject)
  (-> Text Text Text)
  ("lux text concat" subject param))

(def: #export (enclose [left right] content)
  {#.doc "Surrounds the given content text with left and right side additions."}
  (-> [Text Text] Text Text)
  ($_ "lux text concat" left content right))

(def: #export (enclose' boundary content)
  {#.doc "Surrounds the given content text with the same boundary text."}
  (-> Text Text Text)
  (enclose [boundary boundary] content))

(def: #export format
  (-> Text Text)
  (..enclose' ..double_quote))

(def: #export (clip offset characters input)
  (-> Nat Nat Text (Maybe Text))
  (if (|> characters (n.+ offset) (n.<= ("lux text size" input)))
    (#.Some ("lux text clip" offset characters input))
    #.None))

(def: #export (clip' offset input)
  (-> Nat Text (Maybe Text))
  (let [size ("lux text size" input)]
    (if (n.<= size offset)
      (#.Some ("lux text clip" offset (n.- offset size) input))
      #.None)))

(def: #export (split at x)
  (-> Nat Text (Maybe [Text Text]))
  (case [(..clip 0 at x) (..clip' at x)]
    [(#.Some pre) (#.Some post)]
    (#.Some [pre post])

    _
    #.None))

(def: #export (split_with token sample)
  (-> Text Text (Maybe [Text Text]))
  (do maybe.monad
    [index (index_of token sample)
     [pre post'] (split index sample)
     [_ post] (split (size token) post')]
    (wrap [pre post])))

(def: #export (split_all_with token sample)
  (-> Text Text (List Text))
  (loop [input sample
         output (: (List Text) (list))]
    (case (..split_with token input)
      (#.Some [pre post])
      (|> output
          (#.Cons pre)
          (recur post))

      #.None
      (|> output
          (#.Cons input)
          list.reverse))))

(def: #export (replace_once pattern replacement template)
  (-> Text Text Text Text)
  (<| (maybe.default template)
      (do maybe.monad
        [[pre post] (..split_with pattern template)]
        (wrap ($_ "lux text concat" pre replacement post)))))

(def: #export (replace_all pattern replacement template)
  (-> Text Text Text Text)
  (for {@.old
        (:as Text
             ("jvm invokevirtual:java.lang.String:replace:java.lang.CharSequence,java.lang.CharSequence"
              (:as (primitive "java.lang.String") template)
              (:as (primitive "java.lang.CharSequence") pattern)
              (:as (primitive "java.lang.CharSequence") replacement)))
        @.jvm
        (:as Text
             ("jvm member invoke virtual" [] "java.lang.String" "replace" []
              (:as (primitive "java.lang.String") template)
              ["Ljava/lang/CharSequence;" (:as (primitive "java.lang.CharSequence") pattern)]
              ["Ljava/lang/CharSequence;" (:as (primitive "java.lang.CharSequence") replacement)]))
        ## TODO: Comment/turn-off when generating a JS compiler using a JVM-based compiler because Nashorn's implementation of "replaceAll" is incorrect. 
        @.js
        (:as Text
             ("js object do" "replaceAll" template [pattern replacement]))
        @.python
        (:as Text
             ("python object do" "replace" template pattern replacement))
        ## TODO @.lua
        @.ruby
        (:as Text
             ("ruby object do" "gsub" template pattern replacement))
        @.php
        (:as Text
             ("php apply" (:assume ("php constant" "str_replace"))
              pattern replacement template))
        ## TODO @.scheme
        ## TODO @.common_lisp
        ## TODO @.r
        }
       ## Inefficient default
       (loop [left ""
              right template]
         (case (..split_with pattern right)
           (#.Some [pre post])
           (recur ($_ "lux text concat" left pre replacement) post)

           #.None
           ("lux text concat" left right)))))

(implementation: #export equivalence
  (Equivalence Text)
  
  (def: (= reference sample)
    ("lux text =" reference sample)))

(implementation: #export order
  (Order Text)
  
  (def: &equivalence ..equivalence)

  (def: (< reference sample)
    ("lux text <" reference sample)))

(implementation: #export monoid
  (Monoid Text)
  
  (def: identity "")
  
  (def: (compose left right)
    ("lux text concat" left right)))

(implementation: #export hash
  (Hash Text)
  
  (def: &equivalence ..equivalence)
  
  (def: (hash input)
    (for {@.old
          (|> input
              (: (primitive "java.lang.String"))
              "jvm invokevirtual:java.lang.String:hashCode:"
              "jvm convert int-to-long"
              (:as Nat))

          @.jvm
          (|> input
              (:as (primitive "java.lang.String"))
              ("jvm member invoke virtual" [] "java.lang.String" "hashCode" [])
              "jvm conversion int-to-long"
              "jvm object cast"
              (: (primitive "java.lang.Long"))
              (:as Nat))}
         ## Platform-independent default.
         (let [length ("lux text size" input)]
           (loop [idx 0
                  hash 0]
             (if (n.< length idx)
               (recur (inc idx)
                      (|> hash
                          (i64.left_shift 5)
                          (n.- hash)
                          (n.+ ("lux text char" idx input))))
               hash))))))

(def: #export concat
  (-> (List Text) Text)
  (let [(^open ".") ..monoid]
    (|>> list.reverse (list\fold compose identity))))

(def: #export (join_with sep texts)
  (-> Text (List Text) Text)
  (|> texts (list.interpose sep) concat))

(def: #export (empty? text)
  (-> Text Bit)
  (case text
    "" true
    _  false))

(def: #export space
  Text
  " ")

(def: #export (space? char)
  {#.doc "Checks whether the character is white-space."}
  (-> Char Bit)
  (with_expansions [<options> (template [<char>]
                                [(^ (char (~~ (static <char>))))]

                                [..tab]
                                [..vertical_tab]
                                [..space]
                                [..new_line]
                                [..carriage_return]
                                [..form_feed]
                                )]
    (`` (case char
          (^or <options>)
          true

          _
          false))))

(def: #export (lower_case value)
  (-> Text Text)
  (for {@.old
        (:as Text
             ("jvm invokevirtual:java.lang.String:toLowerCase:"
              (:as (primitive "java.lang.String") value)))
        @.jvm
        (:as Text
             ("jvm member invoke virtual" [] "java.lang.String" "toLowerCase" []
              (:as (primitive "java.lang.String") value)))
        @.js
        (:as Text
             ("js object do" "toLowerCase" value []))
        @.python
        (:as Text
             ("python object do" "lower" value))
        @.lua
        (:as Text
             ("lua apply" ("lua constant" "string.lower") value))
        @.ruby
        (:as Text
             ("ruby object do" "downcase" value))}))

(def: #export (upper_case value)
  (-> Text Text)
  (for {@.old
        (:as Text
             ("jvm invokevirtual:java.lang.String:toUpperCase:"
              (:as (primitive "java.lang.String") value)))
        @.jvm
        (:as Text
             ("jvm member invoke virtual" [] "java.lang.String" "toUpperCase" []
              (:as (primitive "java.lang.String") value)))
        @.js
        (:as Text
             ("js object do" "toUpperCase" value []))
        @.python
        (:as Text
             ("python object do" "upper" value))
        @.lua
        (:as Text
             ("lua apply" ("lua constant" "string.upper") value))
        @.ruby
        (:as Text
             ("ruby object do" "upcase" value))}))
