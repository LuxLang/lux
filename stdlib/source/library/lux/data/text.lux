... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except character)
   [abstract
    [hash (.only Hash)]
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [monad (.only do)]
    ["[0]" order (.only Order)]
    [functor
     ["[0]" contravariant]]]
   [control
    ["[0]" maybe]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [math
    [number
     ["n" natural]
     ["[0]" i64]]]]]
 [/
  ["[0]" character (.only Character)]])

(every .public Index
  Natural)

(the with_template' (.in_module# .prelude .with_template))

... TODO: Instead of integers, characters should be produced fron naturals.
... (The JVM specifies characters as 16-bit unsigned integers)
(the .public of_character
  (-> Character
      Text)
  (|>> .integer
       .int_char#))

(with_template' [<code> <short> <long>]
  [(the .public <long> (..of_character <code>))
   (the .public <short> <long>)]

  [character.\0  \0  null]
  [character.\a  \a  alarm]
  [character.\b  \b  back_space]
  [character.\t  \t  tab]
  [character.\n  \n  new_line]
  [character.\v  \v  vertical_tab]
  [character.\f  \f  form_feed]
  [character.\r  \r  carriage_return]
  [character.\'' \'' double_quote]
  )

(the .public line_feed
  Text
  ..new_line)

(the .public size
  (-> Text
      Natural)
  (|>> .text_size#))

(the .public (character index input)
  (-> Index Text
      (Maybe Character))
  (if (n.< (.text_size# input) index)
    {.#Some (.text_char# index input)}
    {.#None}))

(the .public (index_since offset pattern input)
  (-> Index Text Text
      (Maybe Index))
  (.text_index# offset pattern input))

(the .public (index pattern input)
  (-> Text Text
      (Maybe Index))
  (index_since 0 pattern input))

(the .public (last_index part text)
  (-> Text Text
      (Maybe Index))
  (loop (again [offset 0
                output (is (Maybe Index)
                           {.#None})])
    (let [output' (.text_index# offset part text)]
      (when output'
        {.#None}
        output

        {.#Some offset'}
        (again (++ offset') output')))))

(the .public (starts_with? prefix x)
  (-> Text Text
      Bit)
  (when (index prefix x)
    {.#Some 0}
    true

    _
    false))

(the .public (ends_with? postfix x)
  (-> Text Text
      Bit)
  (when (last_index postfix x)
    {.#Some n}
    (n.= (size x)
         (n.+ (size postfix) n))

    _
    false))

(the .public (enclosed_by? boundary value)
  (-> Text Text
      Bit)
  (and (starts_with? boundary value)
       (ends_with? boundary value)))

(the .public (contains? sub text)
  (-> Text Text
      Bit)
  (when (.text_index# 0 sub text)
    {.#Some _}
    true

    _
    false))

(the .public (prefix param subject)
  (-> Text Text
      Text)
  (.text_composite# param subject))

(the .public (suffix param subject)
  (-> Text Text
      Text)
  (.text_composite# subject param))

(the .public (enclosed [left right] content)
  (-> [Text Text] Text
      Text)
  (.text_composite# left content right))

(the .public (enclosed' boundary content)
  (-> Text Text
      Text)
  (enclosed [boundary boundary] content))

(the .public (enclosed? [left right] it)
  (-> [Text Text] Text
      Bit)
  (and (starts_with? left it)
       (ends_with? right it)))

(every .public (Injection of)
  (-> of
      Text))

(the .public functor
  (contravariant.Functor Injection)
  (implementation
   (the (each f fb)
     (|>> f fb))))

(the .public injection
  (Injection Text)
  (..enclosed' ..double_quote))

(the .public (clip offset size input)
  (-> Index Natural Text
      (Maybe Text))
  (if (|> size (n.+ offset) (n.> (.text_size# input)))
    {.#None}
    {.#Some (.text_clip# offset size input)}))

(the .public (clip_since offset input)
  (-> Index Text
      (Maybe Text))
  (let [size (.text_size# input)]
    (if (n.> size offset)
      {.#None}
      {.#Some (.text_clip# offset (n.- offset size) input)})))

(the .public (split_at at x)
  (-> Index Text
      (Maybe [Text Text]))
  (when [(..clip 0 at x) (..clip_since at x)]
    [{.#Some pre} {.#Some post}]
    {.#Some [pre post]}

    _
    {.#None}))

(the .public (split_by token it)
  (-> Text Text
      (Maybe [Text Text]))
  (do maybe.monad
    [index (index token it)
     [pre post'] (split_at index it)
     [_ post] (split_at (size token) post')]
    (in [pre post])))

(the .public (all_split_by token it)
  (-> Text Text
      (List Text))
  (loop (again [input it
                output (is (List Text) (list))])
    (when (..split_by token input)
      {.#Some [pre post]}
      (|> output
          {.#Item pre}
          (again post))

      {.#None}
      (|> output
          {.#Item input}
          list.reversed))))

(the .public (replaced_once pattern replacement template)
  (-> Text Text Text
      Text)
  (<| (maybe.else template)
      (do maybe.monad
        [[pre post] (..split_by pattern template)]
        (in (.text_composite# pre replacement post)))))

(for .js (these (the defined?
                  (macro (_ tokens lux)
                    (when tokens
                      (list it)
                      {.#Right [lux (list (` (.when (.js_type_of# (.js_constant# (, it)))
                                               "undefined"
                                               .false

                                               (,' _)
                                               .true)))]}

                      _
                      {.#Left ""})))
                (the if_nashorn
                  (macro (_ tokens lux)
                    (when tokens
                      (list then else)
                      {.#Right [lux (list (if (and (..defined? "java")
                                                   (..defined? "java.lang")
                                                   (..defined? "java.lang.Object"))
                                            then
                                            else))]}

                      _
                      {.#Left ""}))))
     (these))

(the _expansion#let (.in_module# .prelude .expansion#let))

(the .public (replaced pattern replacement template)
  (-> Text Text Text
      Text)
  (<| (_expansion#let [ ... Inefficient default
                       <default> (loop (again [left ""
                                               right template])
                                   (when (..split_by pattern right)
                                     {.#Some [pre post]}
                                     (again (.text_composite# left pre replacement) post)

                                     {.#None}
                                     (.text_composite# left right)))])
      (for .jvm
           (as Text
               (.jvm_member_invoke_virtual# [] "java.lang.String" "replace" []
                                            (as (Nominal "java.lang.String") template)
                                            ["Ljava/lang/CharSequence;" (as (Nominal "java.lang.CharSequence") pattern)]
                                            ["Ljava/lang/CharSequence;" (as (Nominal "java.lang.CharSequence") replacement)]))
           .js
           ... TODO: Remove this when Nashorn is no longer being used.
           (..if_nashorn
            <default>
            (as Text
                (.js_object_do# "replaceAll" template [pattern replacement])))
           .python
           (as Text
               (.python_object_do# "replace" template [pattern replacement]))
           ... TODO .lua
           .ruby
           (as Text
               (.ruby_object_do# "gsub" template [pattern replacement]))
           .php
           (as Text
               ("php apply" (as_expected ("php constant" "str_replace"))
                pattern replacement template))
           ... TODO .scheme
           ... TODO .common_lisp
           ... TODO .r
           
           ... Inefficient default
           <default>)))

(the .public equivalence
  (Equivalence Text)
  (implementation
   (the (= expected actual)
     (.text_=# expected actual))))

(alias [=]
       ..equivalence)

(the .public order
  (Order Text)
  (implementation
   (the equivalence ..equivalence)

   (the (< reference it)
     (.text_<# reference it))))

(order.definitions [] ..Text ..order)

(the .public monoid
  (Monoid Text)
  (implementation
   (the identity "")
   
   (the (composite left right)
     (.text_composite# left right))))

(the .public hash
  (Hash Text)
  (implementation
   (the equivalence ..equivalence)

   (the (hash input)
     (for .jvm
          (|> input
              (as (Nominal "java.lang.Object"))
              (.jvm_member_invoke_virtual# [] "java.lang.Object" "hashCode" [])
              .jvm_conversion_int_to_long#
              .jvm_object_cast#
              (is (Nominal "java.lang.Long"))
              (as Natural))
          ... Platform-independent default.
          (let [length (.text_size# input)]
            (loop (again [index 0
                          hash 0])
              (if (n.< length index)
                (again (++ index)
                       (|> hash
                           (i64.left_shifted 5)
                           (n.- hash)
                           (n.+ (.text_char# index input))))
                hash)))))))

(the .public together
  (-> (List Text)
      Text)
  (with ..monoid
    (|>> list.reversed
         (list#mix composite identity))))

(the .public (interposed separator texts)
  (-> Text (List Text)
      Text)
  (when separator
    "" (..together texts)
    _ (|> texts (list.interposed separator) ..together)))

(the .public (empty? text)
  (-> Text
      Bit)
  (when text
    "" true
    _  false))

(the .public space
  Text
  " ")

(the .public (space? character)
  (-> Character
      Bit)
  (<| (_expansion#let [<options> (with_template' [<character>]
                                   [(.character (,, (static <character>)))
                                    true]

                                   [..tab]
                                   [..vertical_tab]
                                   [..space]
                                   [..new_line]
                                   [..carriage_return]
                                   [..form_feed]
                                   )])
      (`` (when character
            <options>

            _
            false))))

(the .public (lower_cased value)
  (-> Text
      Text)
  (for .jvm
       (as Text
           (.jvm_member_invoke_virtual# [] "java.lang.String" "toLowerCase" []
                                        (as (Nominal "java.lang.String") value)))
       .js
       (as Text
           (.js_object_do# "toLowerCase" value []))
       .python
       (as Text
           (.python_object_do# "lower" value []))
       .lua
       (as Text
           (.lua_apply# (.lua_constant# "string.lower") [value]))
       .ruby
       (as Text
           (.ruby_object_do# "downcase" value []))))

(the .public (upper_cased value)
  (-> Text
      Text)
  (for .jvm
       (as Text
           (.jvm_member_invoke_virtual# [] "java.lang.String" "toUpperCase" []
                                        (as (Nominal "java.lang.String") value)))
       .js
       (as Text
           (.js_object_do# "toUpperCase" value []))
       .python
       (as Text
           (.python_object_do# "upper" value []))
       .lua
       (as Text
           (.lua_apply# (.lua_constant# "string.upper") [value]))
       .ruby
       (as Text
           (.ruby_object_do# "upcase" value []))))
