(.using
 [library
  [lux "*"
   ["@" target]
   ["[0]" ffi {"+" import:}]
   [control
    ["[0]" function]]
   [data
    ["[0]" product]
    [text
     ["%" format {"+" format}]]
    [collection
     ["[0]" array]
     ["[0]" sequence {"+" Sequence} ("[1]#[0]" mix)]]]
   [math
    [number
     ["n" nat]]]
   [type
    [abstract {"-" pattern}]]]]
 ["[0]" //])

(with_expansions [<jvm> (as_is (import: java/lang/CharSequence
                                 "[1]::[0]")

                               (import: java/lang/Appendable
                                 "[1]::[0]"
                                 (append [java/lang/CharSequence] java/lang/Appendable))

                               (import: java/lang/String
                                 "[1]::[0]"
                                 (new [int])
                                 (toString [] java/lang/String))

                               (import: java/lang/StringBuilder
                                 "[1]::[0]"
                                 (new [int])
                                 (toString [] java/lang/String)))]
  (`` (for @.old (as_is <jvm>)
           @.jvm (as_is <jvm>)
           @.js (as_is (import: (JS_Array a)
                         "[1]::[0]"
                         (push [a] a)
                         (join [Text] Text)))
           @.lua (as_is (import: (table/concat [(array.Array Text) Text] Text))
                        ...https://www.lua.org/manual/5.3/manual.html#pdf-table.concat
                        (import: (table/insert [(array.Array Text) Text] "?" Nothing))
                        ... https://www.lua.org/manual/5.3/manual.html#pdf-table.insert
                        )
           (as_is))))

(`` (abstract: .public Buffer
      (for @.old [Nat (-> java/lang/StringBuilder java/lang/StringBuilder)]
           @.jvm [Nat (-> java/lang/StringBuilder java/lang/StringBuilder)]
           @.js [Nat (-> (JS_Array Text) (JS_Array Text))]
           @.lua [Nat (-> (array.Array Text) (array.Array Text))]
           ... default
           (Sequence Text))

      (def: .public empty
        Buffer
        (abstraction (with_expansions [<jvm> [0 function.identity]]
                       (for @.old <jvm>
                            @.jvm <jvm>
                            @.js [0 function.identity]
                            @.lua [0 function.identity]
                            ... default
                            sequence.empty))))

      (def: .public (then chunk buffer)
        (-> Text Buffer Buffer)
        (with_expansions [<jvm> (let [[capacity transform] (representation buffer)
                                      then! (is (-> Text java/lang/StringBuilder java/lang/StringBuilder)
                                                (function (_ chunk builder)
                                                  (exec
                                                    (java/lang/Appendable::append (as java/lang/CharSequence chunk)
                                                                                  builder)
                                                    builder)))]
                                  (abstraction [(n.+ (//.size chunk) capacity)
                                                (|>> transform (then! chunk))]))]
          (for @.old <jvm>
               @.jvm <jvm>
               @.js (let [[capacity transform] (representation buffer)
                          then! (is (-> (JS_Array Text) (JS_Array Text))
                                    (function (_ array)
                                      (exec
                                        (JS_Array::push chunk array)
                                        array)))]
                      (abstraction [(n.+ (//.size chunk) capacity)
                                    (|>> transform then!)]))
               @.lua (let [[capacity transform] (representation buffer)
                           then! (is (-> (array.Array Text) (array.Array Text))
                                     (function (_ array)
                                       (exec
                                         (table/insert array chunk)
                                         array)))]
                       (abstraction [(n.+ (//.size chunk) capacity)
                                     (|>> transform then!)]))
               ... default
               (|> buffer representation (sequence.suffix chunk) abstraction))))

      (def: .public size
        (-> Buffer Nat)
        (with_expansions [<jvm> (|>> representation product.left)]
          (for @.old <jvm>
               @.jvm <jvm>
               @.js <jvm>
               @.lua <jvm>
               ... default
               (|>> representation
                    (sequence#mix (function (_ chunk total)
                                    (n.+ (//.size chunk) total))
                                  0)))))

      (def: .public (text buffer)
        (-> Buffer Text)
        (with_expansions [<jvm> (let [[capacity transform] (representation buffer)]
                                  (|> (java/lang/StringBuilder::new (ffi.as_int (.int capacity)))
                                      transform
                                      java/lang/StringBuilder::toString
                                      ffi.of_string))]
          (for @.old <jvm>
               @.jvm <jvm>
               @.js (let [[capacity transform] (representation buffer)]
                      (|> (array.empty 0)
                          (as (JS_Array Text))
                          transform
                          (JS_Array::join "")))
               @.lua (let [[capacity transform] (representation buffer)]
                       (table/concat (transform (array.empty 0)) ""))
               ... default
               (sequence#mix (function (_ chunk total)
                               (format total chunk))
                             ""
                             (representation buffer)))))
      ))
