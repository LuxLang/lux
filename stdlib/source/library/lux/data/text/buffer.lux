... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text)
   ["[0]" ffi (.only import)]
   ["[0]" function]
   [data
    ["[0]" product]
    [text
     ["%" \\injection]]
    [collection
     ["[0]" array]
     ["[0]" sequence (.only Sequence) (.use "[1]#[0]" mix)]]]
   [math
    [number
     ["n" natural]]]
   [macro
    ["[0]" expansion]]
   [type
    ["[0]" nominal]]]]
 ["[0]" //])

(`` (for .jvm (these (import java/lang/CharSequence
                             "[1]::[0]")

                     (import java/lang/Appendable
                             "[1]::[0]"
                             (append [java/lang/CharSequence] java/lang/Appendable))

                     (import java/lang/String
                             "[1]::[0]")

                     (import java/lang/StringBuilder
                             "[1]::[0]"
                             (new [int])
                             (toString [] java/lang/String)))
         .js (these (import (JS_Array a)
                            "[1]::[0]"
                            (push [a] a)
                            (join [Text] Text)))
         .lua (these (import (table/concat [(.Array Text) Text] Text))
                     ...https://www.lua.org/manual/5.3/manual.html#pdf-table.concat
                     (import (table/insert [(.Array Text) Text] "?" Nothing))
                     ... https://www.lua.org/manual/5.3/manual.html#pdf-table.insert
                     )
         .python (these (import (Python_List of)
                                "[1]::[0]"
                                (append [of] "?" Any))
                        (import Python_Text
                                "[1]::[0]"
                                (join [(Python_List Text)] Text)))
         .ruby (these (import Ruby_Text
                              "[1]::[0]"
                              (<< [Text] Ruby_Text)))
         ... ... default
         ... (these)
         ))

(`` (nominal.every .public Buffer
      (for .jvm [Natural (Change java/lang/StringBuilder)]
           .js [Natural (Change (JS_Array Text))]
           .lua [Natural (Change (.Array Text))]
           .python [Natural (Change (Python_List Text))]
           .ruby [Natural (Change Ruby_Text)]
           ... ... default
           ... (Sequence Text)
           )

      (the .public empty
        Buffer
        (nominal.abstraction
         (for .jvm [0 function.identity]
              .js [0 function.identity]
              .lua [0 function.identity]
              .python [0 function.identity]
              .ruby [0 function.identity]
              ... ... default
              ... sequence.empty
              )))

      (the .public (then chunk buffer)
        (-> Text Buffer
            Buffer)
        (for .jvm (let [[capacity transform] (nominal.reification buffer)
                        then! (is (-> Text (Change java/lang/StringBuilder))
                                  (function (_ chunk builder)
                                    (exec
                                      (java/lang/Appendable::append [(as (-> Text java/lang/CharSequence)
                                                                         chunk)]
                                                                    builder)
                                      builder)))]
                    (nominal.abstraction
                     [(n.+ (//.size chunk) capacity)
                      (|>> transform (then! chunk))]))
             .js (let [[capacity transform] (nominal.reification buffer)
                       then! (is (-> (JS_Array Text) (JS_Array Text))
                                 (function (_ array)
                                   (exec
                                     (JS_Array::push chunk array)
                                     array)))]
                   (nominal.abstraction
                    [(n.+ (//.size chunk) capacity)
                     (|>> transform then!)]))
             .lua (let [[capacity transform] (nominal.reification buffer)
                        then! (is (-> (.Array Text) (.Array Text))
                                  (function (_ array)
                                    (exec
                                      (table/insert [array chunk])
                                      array)))]
                    (nominal.abstraction
                     [(n.+ (//.size chunk) capacity)
                      (|>> transform then!)]))
             .python (let [[capacity transform] (nominal.reification buffer)
                           then! (is (-> (Python_List Text) (Python_List Text))
                                     (function (_ array)
                                       (exec
                                         (Python_List::append chunk array)
                                         array)))]
                       (nominal.abstraction
                        [(n.+ (//.size chunk) capacity)
                         (|>> transform then!)]))
             .ruby (let [[capacity transform] (nominal.reification buffer)
                         then! (is (Change Ruby_Text)
                                   (function (_ it)
                                     (exec
                                       (Ruby_Text::<< chunk it)
                                       it)))]
                     (nominal.abstraction
                      [(n.+ (//.size chunk) capacity)
                       (|>> transform then!)]))
             ... ... default
             ... (|> buffer nominal.reification (sequence.suffix chunk) nominal.abstraction)
             ))

      (the .public size
        (-> Buffer
            Natural)
        (for .jvm (|>> nominal.reification product.left)
             .js (|>> nominal.reification product.left)
             .lua (|>> nominal.reification product.left)
             .python (|>> nominal.reification product.left)
             .ruby (|>> nominal.reification product.left)
             ... ... default
             ... (|>> nominal.reification
             ...      (sequence#mix (function (_ chunk total)
             ...                      (n.+ (//.size chunk) total))
             ...                    0))
             ))

      (the .public (text buffer)
        (-> Buffer
            Text)
        (for .jvm (let [[capacity transform] (nominal.reification buffer)]
                    (|> (java/lang/StringBuilder::new [(ffi.as_int (.integer capacity))])
                        transform
                        (java/lang/StringBuilder::toString [])
                        ffi.of_string))
             .js (let [[capacity transform] (nominal.reification buffer)]
                   (|> (array.empty 0)
                       (as (-> (Array Text) (JS_Array Text)))
                       transform
                       (JS_Array::join "")))
             .lua (let [[capacity transform] (nominal.reification buffer)]
                    (table/concat [(transform (array.empty 0)) ""]))
             .python (let [[capacity transform] (nominal.reification buffer)]
                       (Python_Text::join (|> (array.empty 0)
                                              (as (-> (Array Text) (Python_List Text)))
                                              transform)
                                          (as (-> Text Python_Text) "")))
             .ruby (let [[capacity transform] (nominal.reification buffer)]
                     (|> ""
                         (as (-> Text Ruby_Text))
                         transform
                         (as (-> Ruby_Text Text))))
             ... ... default
             ... (sequence#mix (function (_ chunk total)
             ...                 (.text total chunk))
             ...               ""
             ...               (nominal.reification buffer))
             ))
      ))
