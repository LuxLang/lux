... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["[0]" ffi (.only import)]
   [control
    ["[0]" function]]
   [data
    ["[0]" product]
    [text
     ["%" \\format (.only format)]]
    [collection
     ["[0]" array]
     ["[0]" sequence (.only Sequence) (.use "[1]#[0]" mix)]]]
   [math
    [number
     ["n" nat]]]
   [meta
    [type
     ["[0]" nominal]]]]]
 ["[0]" //])

(with_expansions [<jvm> (these (import java/lang/CharSequence
                                 "[1]::[0]")

                               (import java/lang/Appendable
                                 "[1]::[0]"
                                 (append [java/lang/CharSequence] java/lang/Appendable))

                               (import java/lang/String
                                 "[1]::[0]")

                               (import java/lang/StringBuilder
                                 "[1]::[0]"
                                 (new [int])
                                 (toString [] java/lang/String)))]
  (`` (for .old (these <jvm>)
           .jvm (these <jvm>)
           .js (these (import (JS_Array a)
                        "[1]::[0]"
                        (push [a] a)
                        (join [Text] Text)))
           .lua (these (import (table/concat [(array.Array Text) Text] Text))
                       ...https://www.lua.org/manual/5.3/manual.html#pdf-table.concat
                       (import (table/insert [(array.Array Text) Text] "?" Nothing))
                       ... https://www.lua.org/manual/5.3/manual.html#pdf-table.insert
                       )
           .python (these (import (Python_List of)
                            "[1]::[0]"
                            (append [of] "?" Any))
                          (import Python_Text
                            "[1]::[0]"
                            (join [(Python_List Text)] Text)))
           .ruby (these (import Ruby_Text
                          "[1]::[0]"
                          (<< [Text] Ruby_Text)))
           ... ... default
           ... (these)
           )))

(`` (nominal.every .public Buffer
      (for .old [Nat (-> java/lang/StringBuilder java/lang/StringBuilder)]
           .jvm [Nat (-> java/lang/StringBuilder java/lang/StringBuilder)]
           .js [Nat (-> (JS_Array Text) (JS_Array Text))]
           .lua [Nat (-> (array.Array Text) (array.Array Text))]
           .python [Nat (-> (Python_List Text) (Python_List Text))]
           .ruby [Nat (-> Ruby_Text Ruby_Text)]
           ... ... default
           ... (Sequence Text)
           )

      (the .public empty
        Buffer
        (nominal.abstraction
         (with_expansions [<jvm> [0 function.identity]]
           (for .old <jvm>
                .jvm <jvm>
                .js [0 function.identity]
                .lua [0 function.identity]
                .python [0 function.identity]
                .ruby [0 function.identity]
                ... ... default
                ... sequence.empty
                ))))

      (the .public (then chunk buffer)
        (-> Text Buffer
            Buffer)
        (with_expansions [<jvm> (let [[capacity transform] (nominal.representation buffer)
                                      then! (is (-> Text java/lang/StringBuilder java/lang/StringBuilder)
                                                (function (_ chunk builder)
                                                  (exec
                                                    (java/lang/Appendable::append [(as java/lang/CharSequence chunk)]
                                                                                  builder)
                                                    builder)))]
                                  (nominal.abstraction
                                   [(n.+ (//.size chunk) capacity)
                                    (|>> transform (then! chunk))]))]
          (for .old <jvm>
               .jvm <jvm>
               .js (let [[capacity transform] (nominal.representation buffer)
                         then! (is (-> (JS_Array Text) (JS_Array Text))
                                   (function (_ array)
                                     (exec
                                       (JS_Array::push chunk array)
                                       array)))]
                     (nominal.abstraction
                      [(n.+ (//.size chunk) capacity)
                       (|>> transform then!)]))
               .lua (let [[capacity transform] (nominal.representation buffer)
                          then! (is (-> (array.Array Text) (array.Array Text))
                                    (function (_ array)
                                      (exec
                                        (table/insert [array chunk])
                                        array)))]
                      (nominal.abstraction
                       [(n.+ (//.size chunk) capacity)
                        (|>> transform then!)]))
               .python (let [[capacity transform] (nominal.representation buffer)
                             then! (is (-> (Python_List Text) (Python_List Text))
                                       (function (_ array)
                                         (exec
                                           (Python_List::append chunk array)
                                           array)))]
                         (nominal.abstraction
                          [(n.+ (//.size chunk) capacity)
                           (|>> transform then!)]))
               .ruby (let [[capacity transform] (nominal.representation buffer)
                           then! (is (-> Ruby_Text Ruby_Text)
                                     (function (_ it)
                                       (exec
                                         (Ruby_Text::<< chunk (as Ruby_Text it))
                                         it)))]
                       (nominal.abstraction
                        [(n.+ (//.size chunk) capacity)
                         (|>> transform then!)]))
               ... ... default
               ... (|> buffer nominal.representation (sequence.suffix chunk) nominal.abstraction)
               )))

      (the .public size
        (-> Buffer
            Nat)
        (with_expansions [<jvm> (|>> nominal.representation product.left)]
          (for .old <jvm>
               .jvm <jvm>
               .js <jvm>
               .lua <jvm>
               .python <jvm>
               .ruby <jvm>
               ... ... default
               ... (|>> nominal.representation
               ...      (sequence#mix (function (_ chunk total)
               ...                      (n.+ (//.size chunk) total))
               ...                    0))
               )))

      (the .public (text buffer)
        (-> Buffer
            Text)
        (with_expansions [<jvm> (let [[capacity transform] (nominal.representation buffer)]
                                  (|> (java/lang/StringBuilder::new [(ffi.as_int (.int capacity))])
                                      transform
                                      (java/lang/StringBuilder::toString [])
                                      ffi.of_string))]
          (for .old <jvm>
               .jvm <jvm>
               .js (let [[capacity transform] (nominal.representation buffer)]
                     (|> (array.empty 0)
                         (as (JS_Array Text))
                         transform
                         (JS_Array::join "")))
               .lua (let [[capacity transform] (nominal.representation buffer)]
                      (table/concat [(transform (array.empty 0)) ""]))
               .python (let [[capacity transform] (nominal.representation buffer)]
                         (Python_Text::join (|> (array.empty 0)
                                                (as (Python_List Text))
                                                transform)
                                            (as Python_Text "")))
               .ruby (let [[capacity transform] (nominal.representation buffer)]
                       (|> ""
                           (as Ruby_Text)
                           transform
                           (as Text)))
               ... ... default
               ... (sequence#mix (function (_ chunk total)
               ...                 (format total chunk))
               ...               ""
               ...               (nominal.representation buffer))
               )))
      ))
