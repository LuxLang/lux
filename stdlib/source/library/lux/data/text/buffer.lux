... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text)
   ["[0]" ffi]
   ["[0]" function]
   [data
    ["[0]" product]
    [text
     ["%" \\injection]]
    [collection
     ["[0]" array]
     ["[0]" sequence (.only Sequence) (.use "[1]:[0]" mix)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" expansion]]
   [type
    ["[0]" nominal]]
   ["[0]" target]]]
 ["[0]" //])

(`` (target.if target.jvm
               (these (ffi.the java/lang/CharSequence
                        "[1]:[0]")

                      (ffi.the java/lang/Appendable
                        "[1]:[0]"
                        (append [java/lang/CharSequence] java/lang/Appendable))

                      (ffi.the java/lang/String
                        "[1]:[0]")

                      (ffi.the java/lang/StringBuilder
                        "[1]:[0]"
                        (new [int])
                        (toString [] java/lang/String)))

               target.js
               (these (ffi.the (JS_Array a)
                        "[1]:[0]"
                        (push [a] a)
                        (join [Text] Text)))

               target.lua
               (these (ffi.the (table/concat [(.Array Text) Text] Text))
                      ...https://www.lua.org/manual/5.3/manual.html#pdf-table.concat
                      (ffi.the (table/insert [(.Array Text) Text] "?" Nothing))
                      ... https://www.lua.org/manual/5.3/manual.html#pdf-table.insert
                      )

               target.python
               (these (ffi.the (Python_List of)
                        "[1]:[0]"
                        (append [of] "?" Any))
                      (ffi.the Python_Text
                        "[1]:[0]"
                        (join [(Python_List Text)] Text)))
               
               target.ruby
               (these (ffi.the Ruby_Text
                        "[1]:[0]"
                        (<< [Text] Ruby_Text)))
               
               ... ... default
               ... (these)
               ))

(`` (nominal.every .public Buffer
      (target.if target.jvm
                 [Natural (Change java/lang/StringBuilder)]

                 target.js
                 [Natural (Change (JS_Array Text))]

                 target.lua
                 [Natural (Change (.Array Text))]

                 target.python
                 [Natural (Change (Python_List Text))]

                 target.ruby
                 [Natural (Change Ruby_Text)]
                 
                 ... ... default
                 ... (Sequence Text)
                 )

      (the .public empty
        Buffer
        (nominal.of
         (target.if [target.jvm target.js target.lua target.python target.ruby]
                    [0 function.identity]
                    
                    ... ... else
                    ... sequence.empty
                    )))

      (the .public (then chunk buffer)
        (-> Text Buffer
            Buffer)
        (target.if target.jvm
                   (let [[capacity transform] (nominal.as buffer)
                         then! (is (-> Text (Change java/lang/StringBuilder))
                                   (function (_ chunk builder)
                                     (exec
                                       (java/lang/Appendable:append [(as (-> Text java/lang/CharSequence)
                                                                         chunk)]
                                                                    builder)
                                       builder)))]
                     (nominal.of
                      [(n.+ (//.size chunk) capacity)
                       (|>> transform (then! chunk))]))

                   target.js
                   (let [[capacity transform] (nominal.as buffer)
                         then! (is (-> (JS_Array Text) (JS_Array Text))
                                   (function (_ array)
                                     (exec
                                       (JS_Array:push chunk array)
                                       array)))]
                     (nominal.of
                      [(n.+ (//.size chunk) capacity)
                       (|>> transform then!)]))

                   target.lua
                   (let [[capacity transform] (nominal.as buffer)
                         then! (is (-> (.Array Text) (.Array Text))
                                   (function (_ array)
                                     (exec
                                       (table/insert [array chunk])
                                       array)))]
                     (nominal.of
                      [(n.+ (//.size chunk) capacity)
                       (|>> transform then!)]))

                   target.python
                   (let [[capacity transform] (nominal.as buffer)
                         then! (is (-> (Python_List Text) (Python_List Text))
                                   (function (_ array)
                                     (exec
                                       (Python_List:append chunk array)
                                       array)))]
                     (nominal.of
                      [(n.+ (//.size chunk) capacity)
                       (|>> transform then!)]))

                   target.ruby
                   (let [[capacity transform] (nominal.as buffer)
                         then! (is (Change Ruby_Text)
                                   (function (_ it)
                                     (exec
                                       (Ruby_Text:<< chunk it)
                                       it)))]
                     (nominal.of
                      [(n.+ (//.size chunk) capacity)
                       (|>> transform then!)]))
                   
                   ... ... default
                   ... (|> buffer nominal.as (sequence.suffix chunk) nominal.of)
                   ))

      (the .public size
        (-> Buffer
            Natural)
        (target.if [target.jvm target.js target.lua target.python target.ruby]
                   (|>> nominal.as product.left)
                   
                   ... ... else
                   ... (|>> nominal.as
                   ...      (sequence:mix (function (_ chunk total)
                   ...                      (n.+ (//.size chunk) total))
                   ...                    0))
                   ))

      (the .public (text buffer)
        (-> Buffer
            Text)
        (target.if target.jvm
                   (let [[capacity transform] (nominal.as buffer)]
                     (|> (java/lang/StringBuilder:new [(ffi.as_int (.integer capacity))])
                         transform
                         (java/lang/StringBuilder:toString [])
                         ffi.of_string))

                   target.js
                   (let [[capacity transform] (nominal.as buffer)]
                     (|> (array.empty 0)
                         (as (-> (Array Text) (JS_Array Text)))
                         transform
                         (JS_Array:join "")))

                   target.lua
                   (let [[capacity transform] (nominal.as buffer)]
                     (table/concat [(transform (array.empty 0)) ""]))

                   target.python
                   (let [[capacity transform] (nominal.as buffer)]
                     (Python_Text:join (|> (array.empty 0)
                                           (as (-> (Array Text) (Python_List Text)))
                                           transform)
                                       (as (-> Text Python_Text) "")))

                   target.ruby
                   (let [[capacity transform] (nominal.as buffer)]
                     (|> ""
                         (as (-> Text Ruby_Text))
                         transform
                         (as (-> Ruby_Text Text))))
                   
                   ... ... else
                   ... (sequence:mix (function (_ chunk total)
                   ...                 (.text total chunk))
                   ...               ""
                   ...               (nominal.as buffer))
                   ))
      ))
