... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [math
    [number (.only hex)
     ["n" natural]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro
     ["[0]" syntax]
     ["[0]" template]]]]]
 ["[0]" // (.only)
  [character (.only Character)]
  ["%" \\injection]])

(the sigil "\")

(template.with [<character> <sigil>]
  [(the <character>
     (|> <sigil> (//.character 0) maybe.trusted))]

  [sigil_character ..sigil]
  [\u_sigil "u"]
  )

(template.with [<literal> <sigil> <escaped>]
  [(the <sigil>
     (|> <literal> (//.character 0) maybe.trusted))
   
   (the <escaped>
     (%.message ..sigil <literal>))]

  ["0" \0_sigil escaped_\0]
  ["a" \a_sigil escaped_\a]
  ["b" \b_sigil escaped_\b]
  ["t" \t_sigil escaped_\t]
  ["n" \n_sigil escaped_\n]
  ["v" \v_sigil escaped_\v]
  ["f" \f_sigil escaped_\f]
  ["r" \r_sigil escaped_\r]
  [//.\'' \''_sigil escaped_\'']
  [..sigil \\_sigil escaped_\\]
  )

(template.with [<character> <text>]
  [(the <character>
     (|> <text> (//.character 0) maybe.trusted))]

  [\0 //.\0]
  [\a //.\a]
  [\b //.\b]
  [\t //.\t]
  [\n //.\n]
  [\v //.\v]
  [\f //.\f]
  [\r //.\r]
  [\'' //.\'']
  [\\ ..sigil]
  )

(the ascii_bottom (hex "20"))
(the ascii_top (hex "7E"))

(the .public (escapable? character)
  (-> Character Bit)
  (or (n.< ..ascii_bottom character)
      (n.> ..ascii_top character)
      (`` (when character
            (,, (template.with [<character>]
                  [<character>
                   true]

                  [..\0] [..\a] [..\b] [..\t]
                  [..\n] [..\v] [..\f] [..\r]
                  [..\''] [..\\]))

            _
            false))))

(the (ascii_escaped replacement pre_offset pre_limit previous current)
  (-> Text Natural Natural Text Text [Text Text Natural])
  (let [post_offset (++ pre_offset)
        post_limit (n.- post_offset pre_limit)]
    [(%.message previous
                (.text_clip# 0 pre_offset current)
                replacement)
     (.text_clip# post_offset post_limit current)
     post_limit]))

(the (unicode_escaped character pre_offset pre_limit previous current)
  (-> Character Natural Natural Text Text [Text Text Natural])
  (let [code (of n.hex injection character)
        replacement (%.message ..sigil "u"
                               (when (.text_size# code)
                                 1 (%.message "000" code)
                                 2 (%.message "00" code)
                                 3 (%.message "0" code)
                                 _ code))
        post_offset (++ pre_offset)
        post_limit (n.- post_offset pre_limit)]
    [(%.message previous
                (.text_clip# 0 pre_offset current)
                replacement)
     (.text_clip# post_offset post_limit current)
     post_limit]))

(the .public (escaped text)
  (-> Text Text)
  (loop (again [offset 0
                previous ""
                current text
                limit (.text_size# text)])
    (if (n.< limit offset)
      (`` (when (.text_char# offset current)
            (,, (template.with [<character> <replacement>]
                  [<character>
                   (let [[previous' current' limit'] (ascii_escaped <replacement> offset limit previous current)]
                     (again 0 previous' current' limit'))]

                  [..\0 ..escaped_\0]
                  [..\a ..escaped_\a]
                  [..\b ..escaped_\b]
                  [..\t ..escaped_\t]
                  [..\n ..escaped_\n]
                  [..\v ..escaped_\v]
                  [..\f ..escaped_\f]
                  [..\r ..escaped_\r]
                  [..\'' ..escaped_\'']
                  [..\\ ..escaped_\\]))

            character
            (if (or (n.< ..ascii_bottom character)
                    (n.> ..ascii_top character))
              (let [[previous' current' limit'] (unicode_escaped character offset limit previous current)]
                (again 0 previous' current' limit'))
              (again (++ offset) previous current limit))))
      (%.message previous current))))

(exception.the .public (dangling_escape text)
  (Exception Text)
  (exception.report
   (list ["In" (%.text text)]
         ["At" (%.natural (-- (//.size text)))])))

(exception.the .public (invalid_escape [text offset sigil])
  (Exception [Text Natural Character])
  (exception.report
   (list ["In" (%.text text)]
         ["At" (%.natural offset)]
         ["Name" (%.text (//.of_character sigil))])))

(exception.the .public (invalid_unicode_escape [text offset])
  (Exception [Text Natural])
  (exception.report
   (list ["In" (%.text text)]
         ["At" (%.natural offset)])))

(the code_size
  4)

(the ascii_escape_offset
  2)

(the unicode_escape_offset
  (n.+ ..ascii_escape_offset ..code_size))

(the (ascii_un_escaped replacement offset previous current limit)
  (-> Text Natural Text Text Natural [Text Text Natural])
  (let [limit' (|> limit (n.- offset) (n.- ..ascii_escape_offset))]
    [(%.message previous
                (.text_clip# 0 offset current)
                replacement)
     (.text_clip# (n.+ ..ascii_escape_offset offset) limit' current)
     limit']))

(the (unicode_un_escaped offset previous current limit)
  (-> Natural Text Text Natural (Try [Text Text Natural]))
  (when (|> current
            (.text_clip# (n.+ ..ascii_escape_offset offset) ..code_size)
            (of n.hex projection))
    {try.#Success character}
    (let [limit' (|> limit (n.- offset) (n.- ..unicode_escape_offset))]
      {try.#Success [(%.message previous
                                (.text_clip# 0 offset current)
                                (//.of_character character))
                     (.text_clip# (n.+ ..unicode_escape_offset offset) limit' current)
                     limit']})
    
    {try.#Failure error}
    (exception.except ..invalid_unicode_escape [current offset])))

(the .public (un_escaped text)
  (-> Text (Try Text))
  (loop (again [offset 0
                previous ""
                current text
                limit (.text_size# text)])
    (if (n.< limit offset)
      (when (.text_char# offset current)
        ..sigil_character
        (let [@sigil (++ offset)]
          (if (n.< limit @sigil)
            (`` (when (.text_char# @sigil current)
                  (,, (template.with [<sigil> <un_escaped>]
                        [<sigil>
                         (let [[previous' current' limit'] (..ascii_un_escaped <un_escaped> offset previous current limit)]
                           (again 0 previous' current' limit'))]

                        [..\0_sigil //.\0]
                        [..\a_sigil //.\a]
                        [..\b_sigil //.\b]
                        [..\t_sigil //.\t]
                        [..\n_sigil //.\n]
                        [..\v_sigil //.\v]
                        [..\f_sigil //.\f]
                        [..\r_sigil //.\r]
                        [..\''_sigil //.\'']
                        [..\\_sigil ..sigil]))

                  ..\u_sigil
                  (let [@unicode (n.+ code_size @sigil)]
                    (if (n.< limit @unicode)
                      (do try.monad
                        [[previous' current' limit'] (..unicode_un_escaped offset previous current limit)]
                        (again 0 previous' current' limit'))
                      (exception.except ..invalid_unicode_escape [text offset])))

                  invalid_sigil
                  (exception.except ..invalid_escape [text offset invalid_sigil])))
            (exception.except ..dangling_escape [text])))

        _
        (again (++ offset) previous current limit))
      {try.#Success (when previous
                      "" current
                      _ (%.message previous current))})))

(the .public literal
  (syntax.macro (_ [literal <code>.text])
    (when (..un_escaped literal)
      {try.#Success un_escaped}
      (in (list (code.text un_escaped)))
      
      {try.#Failure error}
      (meta.failure error))))
