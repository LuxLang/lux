... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except pattern or)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" projection (.use "[1]#[0]" monad)]
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    ["[0]" text
     ["<[1]>" \\projection (.only Projection)]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix monad)]]]
   [math
    [number (.only hex)
     ["n" natural (.use "[1]#[0]" base_10)]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro (.only with_symbols)
     ["^" pattern]
     ["[0]" syntax]
     ["[0]" template]]]]]
 ["[0]" // (.only)
  ["%" \\injection]])

(the regex_char^
  (Projection Text)
  (<text>.none_of "\.|&()[]{}"))

(the escaped_char^
  (Projection Text)
  (do <>.monad
    [? (<>.parses? (<text>.this "\"))]
    (if ?
      <text>.any
      regex_char^)))

(the ,!
  (template.macro (_ <it>)
    [(` (.in_module# (, (code.text (.let [[module short] (.symbol .._)]
                                     module)))
                     <it>))]))

(the (refined refinement^ base^)
  (for_any (_ of)
    (-> (Projection of) (Projection Text)
        (Projection Text)))
  (do <>.monad
    [output base^
     _ (<text>.local output refinement^)]
    (in output)))

(the word
  (Projection Text)
  (<>.either <text>.alpha_num
             (<text>.one_of "_")))

(the (copy reference)
  (-> Text
      (Projection Text))
  (<>.after (<text>.this reference)
            (<>#in reference)))

(the together
  (-> (Projection (List Text))
      (Projection Text))
  (of <>.monad each //.together))

(the symbol_char^
  (Projection Text)
  (<text>.none_of (%.message "[]{}()s.<>" //.double_quote)))

(the symbol_part^
  (Projection Text)
  (do <>.monad
    [head (refined (<text>.not <text>.decimal)
                   symbol_char^)
     tail (<text>.some symbol_char^)]
    (in (%.message head tail))))

(the (symbol^ current_module)
  (-> Text
      (Projection Symbol))
  (all <>.either
       (<>.and (<>#in current_module) (<>.after (<text>.this "..") symbol_part^))
       (<>.and symbol_part^ (<>.after (<text>.this ".") symbol_part^))
       (<>.and (<>#in .prelude) (<>.after (<text>.this ".") symbol_part^))
       (<>.and (<>#in "") symbol_part^)))

(the (re_var^ current_module)
  (-> Text
      (Projection Code))
  (do <>.monad
    [symbol (<text>.enclosed ["\@<" ">"] (symbol^ current_module))]
    (in (` (is (<text>.Projection Text) (, (code.symbol symbol)))))))

(the re_range^
  (Projection Code)
  (do [! <>.monad]
    [from (|> regex_char^ (of ! each (|>> (//.char 0) maybe.trusted)))
     _ (<text>.this "-")
     to (|> regex_char^ (of ! each (|>> (//.char 0) maybe.trusted)))]
    (in (` (<text>.range (, (code.natural from)) (, (code.natural to)))))))

(the re_char^
  (Projection Code)
  (do <>.monad
    [char escaped_char^]
    (in (` ((, (,! ..copy)) (, (code.text char)))))))

(the re_options^
  (Projection Code)
  (do <>.monad
    [options (<text>.many escaped_char^)]
    (in (` (<text>.one_of (, (code.text options)))))))

(the re_user_class^'
  (Projection Code)
  (do <>.monad
    [negate? (<>.maybe (<text>.this "^"))
     parts (<>.many (all <>.either
                         re_range^
                         re_options^))]
    (in (when negate?
          {.#Some _} (` (<text>.not (all <>.either (,* parts))))
          {.#None}   (` (all <>.either (,* parts)))))))

(the re_user_class^
  (Projection Code)
  (do <>.monad
    [init ..re_user_class^'
     rest (<>.some (<>.after (<text>.this "&&")
                             (<text>.enclosed ["[" "]"]
                                              ..re_user_class^')))]
    (in (list#mix (function (_ refinement base)
                    (` ((, (,! ..refined)) (, refinement) (, base))))
                  init
                  rest))))

(the blank
  (Projection Text)
  (<text>.one_of (%.message " " //.tab)))

(the ascii
  (Projection Text)
  (<text>.range (hex "0") (hex "7F")))

(the control
  (Projection Text)
  (<>.either (<text>.range (hex "0") (hex "1F"))
             (<text>.one_of (//.of_char (hex "7F")))))

(the punctuation
  (Projection Text)
  (<text>.one_of (%.message "!#$%&'()*+,-./:;<=>?@[\]^_`{|}~"
                            //.double_quote)))

(the graph
  (Projection Text)
  (<>.either ..punctuation
             <text>.alpha_num))

(the print
  (Projection Text)
  (<>.either ..graph
             (<text>.one_of //.space)))

(the re_system_class^
  (Projection Code)
  (do <>.monad
    []
    (all <>.either
         (<>.after (<text>.this ".") (in (` <text>.any)))
         (<>.after (<text>.this "\d") (in (` <text>.decimal)))
         (<>.after (<text>.this "\D") (in (` (<text>.not <text>.decimal))))
         (<>.after (<text>.this "\s") (in (` <text>.space)))
         (<>.after (<text>.this "\S") (in (` (<text>.not <text>.space))))
         (<>.after (<text>.this "\w") (in (,! ..word)))
         (<>.after (<text>.this "\W") (in (` (<text>.not (, (,! ..word))))))

         (<>.after (<text>.this "\p{Lower}") (in (` <text>.lower)))
         (<>.after (<text>.this "\p{Upper}") (in (` <text>.upper)))
         (<>.after (<text>.this "\p{Alpha}") (in (` <text>.alpha)))
         (<>.after (<text>.this "\p{Digit}") (in (` <text>.decimal)))
         (<>.after (<text>.this "\p{Alnum}") (in (` <text>.alpha_num)))
         (<>.after (<text>.this "\p{Space}") (in (` <text>.space)))
         (<>.after (<text>.this "\p{HexDigit}") (in (` <text>.hexadecimal)))
         (<>.after (<text>.this "\p{OctDigit}") (in (` <text>.octal)))
         (<>.after (<text>.this "\p{Blank}") (in (,! ..blank)))
         (<>.after (<text>.this "\p{ASCII}") (in (,! ..ascii)))
         (<>.after (<text>.this "\p{Contrl}") (in (,! ..control)))
         (<>.after (<text>.this "\p{Punct}") (in (,! ..punctuation)))
         (<>.after (<text>.this "\p{Graph}") (in (,! ..graph)))
         (<>.after (<text>.this "\p{Print}") (in (,! ..print)))
         )))

(the re_class^
  (Projection Code)
  (<>.either re_system_class^
             (<text>.enclosed ["[" "]"] re_user_class^)))

(the number^
  (Projection Natural)
  (|> (<text>.many <text>.decimal)
      (<>.format n.base_10)))

(the re_back_reference^
  (Projection Code)
  (<>.either (do <>.monad
               [_ (<text>.this "\")
                id number^]
               (in (` ((, (,! ..copy)) (, (code.symbol ["" (n#injection id)]))))))
             (do <>.monad
               [_ (<text>.this "\k<")
                captured_symbol symbol_part^
                _ (<text>.this ">")]
               (in (` ((, (,! ..copy)) (, (code.symbol ["" captured_symbol]))))))))

(the (re_simple^ current_module)
  (-> Text
      (Projection Code))
  (all <>.either
       re_class^
       (re_var^ current_module)
       re_back_reference^
       re_char^
       ))

(the (re_simple_quantified^ current_module)
  (-> Text
      (Projection Code))
  (do <>.monad
    [base (re_simple^ current_module)
     quantifier (<text>.one_of "?*+")]
    (when quantifier
      "?"
      (in (` (<>.else "" (, base))))
      
      "*"
      (in (` ((, (,! ..together)) (<>.some (, base)))))
      
      ... "+"
      _
      (in (` ((, (,! ..together)) (<>.many (, base)))))
      )))

(exception.the .public (incorrect_quantification [from to])
  (Exception [Natural Natural])
  (exception.report
   (list ["Input" (%.message (%.natural from) "," (%.natural to))]
         ["Should be" (%.message (%.natural to) "," (%.natural from))])))

(the (re_counted_quantified^ current_module)
  (-> Text
      (Projection Code))
  (do [! <>.monad]
    [base (re_simple^ current_module)]
    (<| (<text>.enclosed ["{" "}"])
        (all <>.either
             (do !
               [[from to] (<>.and number^ (<>.after (<text>.this ",") number^))
                _ (<>.assertion (exception.error ..incorrect_quantification [from to])
                                (n.<= to from))]
               (in (` ((, (,! ..together)) (<>.between (, (code.natural from))
                                                       (, (code.natural (n.- from to)))
                                                       (, base))))))
             (do !
               [limit (<>.after (<text>.this ",") number^)]
               (in (` ((, (,! ..together)) (<>.at_most (, (code.natural limit)) (, base))))))
             (do !
               [limit (<>.before (<text>.this ",") number^)]
               (in (` ((, (,! ..together)) (<>.at_least (, (code.natural limit)) (, base))))))
             (do !
               [limit number^]
               (in (` ((, (,! ..together)) (<>.exactly (, (code.natural limit)) (, base))))))))))

(the (re_quantified^ current_module)
  (-> Text
      (Projection Code))
  (<>.either (re_simple_quantified^ current_module)
             (re_counted_quantified^ current_module)))

(the (re_complex^ current_module)
  (-> Text
      (Projection Code))
  (all <>.either
       (re_quantified^ current_module)
       (re_simple^ current_module)))

(every Re_Group
  (Variant
   {#Non_Capturing}
   {#Capturing [(Maybe Text) Natural]}))

(the (re_sequential^ capturing? re_scoped^ current_module)
  (-> Bit (-> Text (Projection [Re_Group Code])) Text
      (Projection [Natural Code]))
  (do <>.monad
    [parts (<>.many (<>.or (re_complex^ current_module)
                           (re_scoped^ current_module)))
     .let [g!total (code.symbol ["" "0total"])
           g!temp (code.symbol ["" "0temp"])
           [_ names steps] (list#mix (is (-> (Either Code [Re_Group Code])
                                             [Natural (List Code) (List (List Code))]
                                             [Natural (List Code) (List (List Code))])
                                         (function (_ part [idx names steps])
                                           (when part
                                             (^.or {.#Left complex}
                                                   {.#Right [{#Non_Capturing} complex]})
                                             [idx
                                              names
                                              (list.partial (list g!temp complex
                                                                  (` .let) (` [(, g!total) (of //.monoid (,' composite) (, g!total) (, g!temp))]))
                                                            steps)]
                                             
                                             {.#Right [{#Capturing [?name num_captures]} scoped]}
                                             (let [[idx! name!] (when ?name
                                                                  {.#Some _name}
                                                                  [idx (code.symbol ["" _name])]

                                                                  {.#None}
                                                                  [(++ idx) (code.symbol ["" (n#injection idx)])])
                                                   access (if (n.> 0 num_captures)
                                                            (` (product.left (, name!)))
                                                            name!)]
                                               [idx!
                                                (list.partial name! names)
                                                (list.partial (list name! scoped
                                                                    (` .let) (` [(, g!total) (of //.monoid (,' composite) (, g!total) (, access))]))
                                                              steps)])
                                             )))
                                     [0
                                      (is (List Code) (list))
                                      (is (List (List Code)) (list))]
                                     parts)]]
    (in [(if capturing?
           (list.size names)
           0)
         (` (do <>.monad
              [.let [(, g!total) ""]
               (,* (|> steps list.reversed list#conjoint))]
              ((, (' in)) [(, g!total) (,* (list.reversed names))])))])
    ))

(the (alternative lexer)
  (-> (Projection Text)
      (Projection [Text Any]))
  (<>.and lexer (of <>.monad in [])))

(the (or left right)
  (for_any (_ left right)
    (-> (Projection [Text left]) (Projection [Text right])
        (Projection [Text (Or left right)])))
  (function (_ input)
    (when (left input)
      {try.#Success [input' [lt lv]]}
      {try.#Success [input' [lt {#0 lv}]]}

      {try.#Failure _}
      (when (right input)
        {try.#Success [input' [rt rv]]}
        {try.#Success [input' [rt {#1 rv}]]}

        {try.#Failure error}
        {try.#Failure error}))))

(the (either left right)
  (for_any (_ left right)
    (-> (Projection [Text left]) (Projection [Text right])
        (Projection Text)))
  (function (_ input)
    (when (left input)
      {try.#Success [input' [lt lv]]}
      {try.#Success [input' lt]}

      {try.#Failure _}
      (when (right input)
        {try.#Success [input' [rt rv]]}
        {try.#Success [input' rt]}

        {try.#Failure error}
        {try.#Failure error}))))

(the (prep_alternative [num_captures alt])
  (-> [Natural Code]
      Code)
  (if (n.> 0 num_captures)
    alt
    (` ((, (,! ..alternative)) (, alt)))))

(the (re_alternative^ capturing? re_scoped^ current_module)
  (-> Bit (-> Text (Projection [Re_Group Code])) Text
      (Projection [Natural Code]))
  (do <>.monad
    [.let [sub^ (re_sequential^ capturing? re_scoped^ current_module)]
     head sub^
     tail (<>.some (<>.after (<text>.this "|") sub^))]
    (if (list.empty? tail)
      (in head)
      (in [(list#mix n.max (product.left head) (list#each product.left tail))
           (` (all ((, (if capturing?
                         (,! ..or)
                         (,! ..either))))
                   (, (prep_alternative head))
                   (,* (list#each prep_alternative tail))))]))))

(the (re_scoped^ current_module)
  (-> Text
      (Projection [Re_Group Code]))
  (all <>.either
       (do <>.monad
         [_ (<text>.this "(?:")
          [_ scoped] (re_alternative^ false re_scoped^ current_module)
          _ (<text>.this ")")]
         (in [{#Non_Capturing} scoped]))
       (do <>.monad
         [complex (re_complex^ current_module)]
         (in [{#Non_Capturing} complex]))
       (do <>.monad
         [_ (<text>.this "(?<")
          captured_symbol symbol_part^
          _ (<text>.this ">")
          [num_captures pattern] (re_alternative^ true re_scoped^ current_module)
          _ (<text>.this ")")]
         (in [{#Capturing [{.#Some captured_symbol} num_captures]} pattern]))
       (do <>.monad
         [_ (<text>.this "(")
          [num_captures pattern] (re_alternative^ true re_scoped^ current_module)
          _ (<text>.this ")")]
         (in [{#Capturing [{.#None} num_captures]} pattern]))))

(the (regex^ current_module)
  (-> Text
      (Projection Code))
  (of <>.monad each product.right (re_alternative^ true re_scoped^ current_module)))

(the .public regex
  (syntax.macro (_ [pattern <code>.text])
    (do meta.monad
      [[current_module _] module.current]
      (when (<text>.value (regex^ current_module)
                          pattern)
        {try.#Failure error}
        (meta.failure (%.message "Error while parsing regular-expression:" //.new_line
                                 error))

        {try.#Success regex}
        (in (list regex))))))

(the .public pattern
  (.pattern
   (syntax.macro (_ [[pattern bindings] (<code>.form (<>.and <code>.text (<>.maybe <code>.any)))
                     body <code>.any
                     branches (<>.many <code>.any)])
     (with_symbols [g!temp]
       (in (list.partial (` (^.multi (, g!temp)
                                     [(<text>.value (..regex (, (code.text pattern))) (, g!temp))
                                      {try.#Success (, (maybe.else g!temp bindings))}]))
                         body
                         branches))))))
