... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Array)
   ["[0]" ffi]
   [abstract
    [format (.only Format)]]
   [error
    ["[0]" try (.only Try)]]
   [data
    ["[0]" binary (.only Binary)]]
   [macro
    ["[0]" expansion]]
   ["[0]" target]]]
 ["[0]" //])

(target.if target.jvm
           (ffi.the java/lang/String
             "[1]:[0]"
             (new [[byte] java/lang/String])
             (getBytes [java/lang/String] [byte]))

           target.js
           (these (ffi.the Uint8Array
                    "[1]:[0]")

                  ... On Node
                  (ffi.the Buffer
                    "[1]:[0]"
                    ("static" from "as" from|injection [ffi.String ffi.String] Buffer)
                    ("static" from "as" from|projection [Uint8Array] Buffer)
                    (toString [ffi.String] ffi.String))

                  ... On the browser
                  (ffi.the TextEncoder
                    "[1]:[0]"
                    (new [ffi.String])
                    (encode [ffi.String] Uint8Array))
                  
                  (ffi.the TextDecoder
                    "[1]:[0]"
                    (new [ffi.String])
                    (decode [Uint8Array] ffi.String)))

           target.ruby
           (these (ffi.the String
                    "[1]:[0]"
                    (encode [Text] String)
                    (force_encoding [Text] Text)
                    (bytes [] Binary))

                  (ffi.the Array
                    "[1]:[0]"
                    (pack [Text] String)))

           target.php
           (these (ffi.the Almost_Binary)
                  (ffi.the (unpack [ffi.String ffi.String] Almost_Binary))
                  (ffi.the (array_values [Almost_Binary] Binary))
                  (the php_byte_array_format "C*"))
           (these))

(the (as_binary value)
  (-> Text
      Binary)
  (target.if target.jvm
             (java/lang/String:getBytes [(ffi.as_string (//.name //.utf_8))]
                                        (ffi.as_string value))

             target.js
             (if ffi.on_nashorn?
                 (as (-> Any Binary)
                     (.js_object_do# "getBytes" value ["utf8"]))
                 
                 ffi.on_node_js?
                 (|> (Buffer:from|injection [value "utf8"])
                     ... This coercion is valid as per NodeJS's documentation:
                     ... https://nodejs.org/api/buffer.html#buffer_buffers_and_typedarrays
                     (as (-> Any Uint8Array)))
                 
                 ... On the browser
                 (|> (TextEncoder:new [(//.name //.utf_8)])
                     (TextEncoder:encode [value]))
                 )

             target.python
             (as (-> Any Binary)
                 (.python_of# (as_expected (.python_constant# "bytearray")) [value "utf-8"]))

             target.lua
             (.lua_utf8_injection# value)

             target.ruby
             (|> value
                 (as (-> Any String))
                 (String:encode ["UTF-8"])
                 (String:bytes []))

             target.php
             (|> (..unpack [..php_byte_array_format value])
                 ..array_values
                 ("php object new" "ArrayObject")
                 (as (-> Any Binary)))))

(the (of_binary value)
  (-> Binary
      (Try Text))
  (target.if target.jvm
             (|> (java/lang/String:new [value (ffi.as_string (//.name //.utf_8))])
                 ffi.of_string
                 {try.:Success})

             target.js
             (if ffi.on_nashorn?
                 (|> (.js_object_new# (.js_constant# "java.lang.String") [value "utf8"])
                     (as (-> Any Text))
                     {try.:Success})

                 ffi.on_node_js?
                 (|> (Buffer:from|projection [value])
                     (Buffer:toString ["utf8"])
                     {try.:Success})
                 
                 ... On the browser
                 (|> (TextDecoder:new [(//.name //.utf_8)])
                     (TextDecoder:decode [value])
                     {try.:Success}))

             target.python
             (try (as (-> Any Text)
                      (.python_object_do# "decode" (as_expected value) ["utf-8"])))

             target.lua
             {try.:Success (.lua_utf8_projection# value)}

             target.ruby
             (|> value
                 (as (-> Any Array))
                 (Array:pack ["C*"])
                 (as (-> Any String))
                 (String:force_encoding ["UTF-8"])
                 {try.:Success})

             target.php
             (|> value
                 ("php pack" ..php_byte_array_format)
                 {try.:Success})))

(the .public binary
  (Format Binary Text)
  (implementation
   (the as ..as_binary)
   (the of ..of_binary)))
