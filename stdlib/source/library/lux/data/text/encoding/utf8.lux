... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    [format (.only Format)]]
   [control
    ["[0]" try (.only Try)]]
   [data
    ["[0]" binary (.only Binary)]]
   [macro
    ["[0]" expansion]]]]
 ["[0]" //])

(for .jvm
     (ffi.import java/lang/String
       "[1]::[0]"
       (new [[byte] java/lang/String])
       (getBytes [java/lang/String] [byte]))

     .js
     (these (ffi.import Uint8Array
              "[1]::[0]")

            ... On Node
            (ffi.import Buffer
              "[1]::[0]"
              ("static" from "as" from|injection [ffi.String ffi.String] Buffer)
              ("static" from "as" from|projection [Uint8Array] Buffer)
              (toString [ffi.String] ffi.String))

            ... On the browser
            (ffi.import TextEncoder
              "[1]::[0]"
              (new [ffi.String])
              (encode [ffi.String] Uint8Array))
            
            (ffi.import TextDecoder
              "[1]::[0]"
              (new [ffi.String])
              (decode [Uint8Array] ffi.String)))

     .ruby
     (these (ffi.import String
              "[1]::[0]"
              (encode [Text] String)
              (force_encoding [Text] Text)
              (bytes [] Binary))

            (ffi.import Array
              "[1]::[0]"
              (pack [Text] String)))

     .php
     (these (ffi.import Almost_Binary)
            (ffi.import (unpack [ffi.String ffi.String] Almost_Binary))
            (ffi.import (array_values [Almost_Binary] Binary))
            (the php_byte_array_format "C*"))
     (these))

(the (injection value)
  (-> Text Binary)
  (for .jvm
       (java/lang/String::getBytes [(ffi.as_string (//.name //.utf_8))]
                                   (ffi.as_string value))

       .js
       (if ffi.on_nashorn?
         (as Binary (.js_object_do# "getBytes" value ["utf8"]))
         
         ffi.on_node_js?
         (|> (Buffer::from|injection [value "utf8"])
             ... This coercion is valid as per NodeJS's documentation:
             ... https://nodejs.org/api/buffer.html#buffer_buffers_and_typedarrays
             (as Uint8Array))
         
         ... On the browser
         (|> (TextEncoder::new [(//.name //.utf_8)])
             (TextEncoder::encode [value]))
         )

       .python
       (as Binary (.python_apply# (as_expected (.python_constant# "bytearray")) [value "utf-8"]))

       .lua
       (.lua_utf8_injection# value)

       .ruby
       (|> value
           (as String)
           (String::encode ["UTF-8"])
           (String::bytes []))

       .php
       (|> (..unpack [..php_byte_array_format value])
           ..array_values
           ("php object new" "ArrayObject")
           (as Binary))))

(the (projection value)
  (-> Binary (Try Text))
  (for .jvm
       (|> (java/lang/String::new [value (ffi.as_string (//.name //.utf_8))])
           ffi.of_string
           {try.#Success})

       .js
       (if ffi.on_nashorn?
         (|> (.js_object_new# (.js_constant# "java.lang.String") [value "utf8"])
             (as Text)
             {try.#Success})

         ffi.on_node_js?
         (|> (Buffer::from|projection [value])
             (Buffer::toString ["utf8"])
             {try.#Success})
         
         ... On the browser
         (|> (TextDecoder::new [(//.name //.utf_8)])
             (TextDecoder::decode [value])
             {try.#Success}))

       .python
       (try (as Text (.python_object_do# "decode" (as_expected value) ["utf-8"])))

       .lua
       {try.#Success (.lua_utf8_projection# value)}

       .ruby
       (|> value
           (as Array)
           (Array::pack ["C*"])
           (as String)
           (String::force_encoding ["UTF-8"])
           {try.#Success})

       .php
       (|> value
           ("php pack" ..php_byte_array_format)
           {try.#Success})))

(the .public format
  (Format Binary Text)
  (implementation
   (the injection ..injection)
   (the projection ..projection)))
