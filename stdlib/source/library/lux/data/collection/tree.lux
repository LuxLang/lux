(.module:
  [library
   [lux #*
    [abstract
     [functor (#+ Functor)]
     [equivalence (#+ Equivalence)]
     [fold (#+ Fold)]
     [monad (#+ do)]]
    [control
     ["<>" parser
      ["<.>" code (#+ Parser)]]]
    [data
     [collection
      ["." list ("#\." monad fold)]]]
    [macro
     [syntax (#+ syntax:)]
     ["." code]]]])

(type: .public (Tree a)
  {#.doc (example "A generic tree data-structure.")}
  {#value a
   #children (List (Tree a))})

(def: .public (flat tree)
  {#.doc (example "All the leaf values of the tree, in order.")}
  (All [a] (-> (Tree a) (List a)))
  (|> tree
      (get@ #children)
      (list\map flat)
      list\join
      (#.Item (get@ #value tree))))

(def: .public (leaf value)
  (All [a] (-> a (Tree a)))
  {#value value
   #children (list)})

(def: .public (branch value children)
  (All [a] (-> a (List (Tree a)) (Tree a)))
  {#value value
   #children children})

(type: #rec Tree_Code
  [Code (List Tree_Code)])

(def: tree^
  (Parser Tree_Code)
  (|> (|>> <>.some
           <code>.record
           (<>.and <code>.any))
      <>.rec
      <>.some
      <code>.record
      (<>.else (list))
      (<>.and <code>.any)))

(syntax: .public (tree {root tree^})
  {#.doc (example "Tree literals."
                  (: (Tree Nat)
                     (tree 12
                           {34 {}
                            56 {}
                            78 {90 {}}})))}
  (in (list (` (~ (loop [[value children] root]
                    (` {#value (~ value)
                        #children (list (~+ (list\map recur children)))})))))))

(implementation: .public (equivalence super)
  (All [a] (-> (Equivalence a) (Equivalence (Tree a))))
  
  (def: (= tx ty)
    (and (\ super = (get@ #value tx) (get@ #value ty))
         (\ (list.equivalence (equivalence super)) = (get@ #children tx) (get@ #children ty)))))

(implementation: .public functor
  (Functor Tree)
  
  (def: (map f fa)
    {#value (f (get@ #value fa))
     #children (list\map (map f)
                         (get@ #children fa))}))

(implementation: .public fold
  (Fold Tree)
  
  (def: (fold f init tree)
    (list\fold (function (_ tree' init') (fold f init' tree'))
               (f (get@ #value tree)
                  init)
               (get@ #children tree))))
