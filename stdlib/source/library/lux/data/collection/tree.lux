... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    [equivalence (.only Equivalence)]
    ["<>" projection]]
   [function
    [poly
     [type
      [mix (.only Mix)]]]]
   [data
    [collection
     ["[0]" list (.use "[1]:[0]" monad mix monoid)
      ["?[1]" \\projection]]]]
   [macro
    ["[0]" syntax]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]]]])

(every .public (Tree it)
  (Record
   [:value it
    :children (List (Tree it))]))

(the .public (flat tree)
  (for_any (_ it)
    (-> (Tree it)
        (List it)))
  (|> tree
      (its :children)
      (list:each flat)
      list:conjoint
      (list:composite (list (its :value tree)))))

(the .public (leaf value)
  (for_any (_ it)
    (-> it
        (Tree it)))
  [:value value
   :children (list)])

(the .public (branch value children)
  (for_any (_ it)
    (-> it (List (Tree it))
        (Tree it)))
  [:value value
   :children children])

(every Tree_Code
  (Rec Tree_Code
    [Code (List Tree_Code)]))

(the tree^
  (Projection Tree_Code)
  (|> (|>> <>.some
           <code>.variant
           (<>.and ?list.any))
      <>.rec
      <>.some
      <code>.variant
      (<>.else (list))
      (<>.and ?list.any)))

(syntax.the .public (tree [root tree^])
  (pure (list (loop (again [[value children] root])
                (` [:value (, value)
                    :children (list (,* (list:each again children)))])))))

(the .public (equivalence super)
  (for_any (_ a)
    (-> (Equivalence a)
        (Equivalence (Tree a))))
  (implementation
   (the (= tx ty)
     (and (by super = (its :value tx) (its :value ty))
          (by (list.equivalence (equivalence super)) = (its :children tx) (its :children ty))))))

(the .public functor
  (Functor Tree)
  (implementation
   (the (each f fa)
     [:value (f (its :value fa))
      :children (list:each (each f)
                           (its :children fa))])))

(the .public mix
  (Mix Tree)
  (implementation
   (the (mix f init tree)
     (list:mix (function (_ tree' init') (mix f init' tree'))
               (f (its :value tree)
                  init)
               (its :children tree)))))
