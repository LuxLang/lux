... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [algorithm
    [mix (.only Mix)]]
   [control
    ["<>" projection]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monad mix)]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]
    [macro
     ["[0]" syntax]]]]])

(every .public (Tree a)
  (Record
   [#value a
    #children (List (Tree a))]))

(the .public (flat tree)
  (for_any (_ a) (-> (Tree a) (List a)))
  (|> tree
      (its #children)
      (list#each flat)
      list#conjoint
      {.#Item (its #value tree)}))

(the .public (leaf value)
  (for_any (_ a) (-> a (Tree a)))
  [#value value
   #children (list)])

(the .public (branch value children)
  (for_any (_ a) (-> a (List (Tree a)) (Tree a)))
  [#value value
   #children children])

(every Tree_Code
  (Rec Tree_Code
    [Code (List Tree_Code)]))

(the tree^
  (Projection Tree_Code)
  (|> (|>> <>.some
           <code>.variant
           (<>.and <code>.any))
      <>.rec
      <>.some
      <code>.variant
      (<>.else (list))
      (<>.and <code>.any)))

(the .public tree
  (syntax.macro (_ [root tree^])
    (in (list (loop (again [[value children] root])
                (` [#value (, value)
                    #children (list (,* (list#each again children)))]))))))

(the .public (equivalence super)
  (for_any (_ a)
    (-> (Equivalence a)
        (Equivalence (Tree a))))
  (implementation
   (the (= tx ty)
     (and (of super = (its #value tx) (its #value ty))
          (of (list.equivalence (equivalence super)) = (its #children tx) (its #children ty))))))

(the .public functor
  (Functor Tree)
  (implementation
   (the (each f fa)
     [#value (f (its #value fa))
      #children (list#each (each f)
                           (its #children fa))])))

(the .public mix
  (Mix Tree)
  (implementation
   (the (mix f init tree)
     (list#mix (function (_ tree' init') (mix f init' tree'))
               (f (its #value tree)
                  init)
               (its #children tree)))))
