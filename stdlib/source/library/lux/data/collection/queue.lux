... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except stack)
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]]
   [control
    ["[0]" try (.only Try)]]
   [data
    [collection
     ["[0]" stack (.use "[1]#[0]" monoid functor)]]]
   [math
    [number
     ["n" natural]]]
   [meta
    ["[0]" provenance]]]])

(every .public (Queue of)
  (Record
   [#front (Stack of)
    #rear (Stack of)]))

(the .public empty
  Queue
  [#front (.stack)
   #rear (.stack)])

(the .public (of_stack entries)
  (for_any (_ of)
    (-> (Stack of)
        (Queue of)))
  [#front entries
   #rear (.stack)])

(the .public (stack queue)
  (for_any (_ of)
    (-> (Queue of)
        (Stack of)))
  (let [(open "_[0]") queue]
    (stack#composite _#front (stack.reversed _#rear))))

(the .public it_is_empty
  Error
  (provenance.with (provenance.here)
    "Empty."))

(the .public front
  (for_any (_ of)
    (-> (Queue of)
        (Try of)))
  (|>> (its #front)
       stack.head
       (try.as ..it_is_empty)))

(the .public (size queue)
  (for_any (_ of)
    (-> (Queue of)
        Natural))
  (let [(open "_[0]") queue]
    (n.+ (stack.size _#front)
         (stack.size _#rear))))

(the .public empty?
  (for_any (_ of)
    (-> (Queue of)
        Bit))
  (|>> (its #front)
       stack.empty?))

(the .public (member? equivalence queue member)
  (for_any (_ of)
    (-> (Equivalence of) (Queue of) of
        Bit))
  (let [(open "_[0]") queue]
    (or (stack.member? equivalence _#front member)
        (stack.member? equivalence _#rear member))))

(the .public (next queue)
  (for_any (_ of)
    (-> (Queue of)
        (Queue of)))
  (when (its #front queue)
    ... Empty...
    (.stack)
    queue

    ... Front has dried up...
    (.stack _)
    (|> queue
        (has #front (stack.reversed (its #rear queue)))
        (has #rear (.stack)))

    ... Consume front!
    (stack.partial _ front')
    (|> queue
        (has #front front'))))

(the .public (end val queue)
  (for_any (_ of)
    (-> of (Queue of)
        (Queue of)))
  (when (its #front queue)
    {.#Empty}
    (has #front (.stack val) queue)

    _
    (revised #rear (|>> {.#Top val}) queue)))

(the .public (equivalence super)
  (for_any (_ of)
    (-> (Equivalence of)
        (Equivalence (Queue of))))
  (implementation
   (the (= expected actual)
     (by (stack.equivalence super) =
         (..stack expected)
         (..stack actual)))))

(the .public functor
  (Functor Queue)
  (implementation
   (the (each f fa)
     [#front (|> fa (its #front) (stack#each f))
      #rear (|> fa (its #rear) (stack#each f))])))
