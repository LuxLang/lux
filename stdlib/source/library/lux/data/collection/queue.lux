... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except list)
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monoid functor)]]]
   [math
    [number
     ["n" nat]]]]])

(every .public (Queue a)
  (Record
   [#front (List a)
    #rear (List a)]))

(the .public empty
  Queue
  [#front (.list)
   #rear (.list)])

(the .public (of_list entries)
  (All (_ a) (-> (List a) (Queue a)))
  [#front entries
   #rear (.list)])

(the .public (list queue)
  (All (_ a) (-> (Queue a) (List a)))
  (let [(open "_[0]") queue]
    (list#composite _#front (list.reversed _#rear))))

(the .public front
  (All (_ a) (-> (Queue a) (Maybe a)))
  (|>> (its #front) list.head))

(the .public (size queue)
  (All (_ a) (-> (Queue a) Nat))
  (let [(open "_[0]") queue]
    (n.+ (list.size _#front)
         (list.size _#rear))))

(the .public empty?
  (All (_ a) (-> (Queue a) Bit))
  (|>> (its #front) list.empty?))

(the .public (member? equivalence queue member)
  (All (_ a) (-> (Equivalence a) (Queue a) a Bit))
  (let [(open "_[0]") queue]
    (or (list.member? equivalence _#front member)
        (list.member? equivalence _#rear member))))

(the .public (next queue)
  (All (_ a) (-> (Queue a) (Queue a)))
  (when (its #front queue)
    ... Empty...
    (.list)
    queue

    ... Front has dried up...
    (.list _)
    (|> queue
        (has #front (list.reversed (its #rear queue)))
        (has #rear (.list)))

    ... Consume front!
    (list.partial _ front')
    (|> queue
        (has #front front'))))

(the .public (end val queue)
  (All (_ a) (-> a (Queue a) (Queue a)))
  (when (its #front queue)
    {.#End}
    (has #front (.list val) queue)

    _
    (revised #rear (|>> {.#Item val}) queue)))

(the .public (equivalence super)
  (All (_ a) (-> (Equivalence a) (Equivalence (Queue a))))
  (implementation
   (the (= reference subject)
     (of (list.equivalence super) =
         (..list reference)
         (..list subject)))))

(the .public functor
  (Functor Queue)
  (implementation
   (the (each f fa)
     [#front (|> fa (its #front) (list#each f))
      #rear (|> fa (its #rear) (list#each f))])))
