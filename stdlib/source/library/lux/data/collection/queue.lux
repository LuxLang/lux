... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]]
   ["[0]" error (.only)
    ["[0]" try (.only Try)]]
   [data
    [collection
     ["[0]" stack (.use "[1]#[0]" functor)]
     ["[0]" list (.use "[1]#[0]" monoid)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [meta
    ["[0]" provenance]]]])

(every .public (Queue it)
  (Record
   [#front (Stack it)
    #rear (Stack it)]))

(the .public empty
  Queue
  [#front (stack)
   #rear (stack)])

(the .public (of_list it)
  (for_any (_ it)
    (-> (List it)
        (Queue it)))
  [#front (list.as_stack it)
   #rear (stack)])

(the .public (as_list queue)
  (for_any (_ it)
    (-> (Queue it)
        (List it)))
  (let [(open "/[0]") queue]
    (list#composite (list.of_stack /#front)
                    (list.reversed (list.of_stack /#rear)))))

(the .public front
  (for_any (_ it)
    (-> (Queue it)
        (Try it)))
  (|>> (its #front)
       stack.top
       (try.as error.empty)))

(the .public (size queue)
  (for_any (_ it)
    (-> (Queue it)
        Natural))
  (let [(open "/[0]") queue]
    (n.+ (stack.size /#front)
         (stack.size /#rear))))

(the .public empty?
  (for_any (_ it)
    (-> (Queue it)
        Bit))
  (|>> (its #front)
       stack.empty?))

(the .public (member? equivalence queue member)
  (for_any (_ it)
    (-> (Equivalence it) (Queue it) it
        Bit))
  (let [(open "/[0]") queue]
    (or (stack.member? equivalence /#front member)
        (stack.member? equivalence /#rear member))))

(the .public (next queue)
  (for_any (_ it)
    (-> (Queue it)
        (Queue it)))
  (when (its #front queue)
    ... Empty...
    (stack)
    queue

    ... Front has dried up...
    (stack _)
    (|> queue
        (has #front (stack.reversed (its #rear queue)))
        (has #rear (stack)))

    ... Consume front!
    (stack.partial _ front')
    (|> queue
        (has #front front'))))

(the .public (end val queue)
  (for_any (_ it)
    (-> it (Queue it)
        (Queue it)))
  (when (its #front queue)
    {.#Empty}
    (has #front (stack val) queue)

    _
    (revised #rear (|>> {.#Top val}) queue)))

(the .public (equivalence super)
  (for_any (_ it)
    (-> (Equivalence it)
        (Equivalence (Queue it))))
  (implementation
   (the (= expected actual)
     (by (list.equivalence super) =
         (as_list expected)
         (as_list actual)))))

(the .public functor
  (Functor Queue)
  (implementation
   (the (each f fa)
     [#front (|> fa (its #front) (stack#each f))
      #rear (|> fa (its #rear) (stack#each f))])))
