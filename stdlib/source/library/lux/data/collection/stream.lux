... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except pattern only)
   [abstract
    [functor (.only Functor)]
    [comonad (.only CoMonad)]
    ["<>" projection]]
   [control
    ["//" continuation (.only Cont)]]
   [function
    ["[0]" predicate]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]
     ["[0]" stack (.use "[1]#[0]" monad)]]]
   [math
    [number
     ["n" natural]]]
   [macro (.only with_names)
    ["[0]" syntax]
    ["[0]" template]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]])

(every .public (Stream a)
  (Cont [a (Stream a)]))

(the .public (iterations step init)
  (for_any (_ a b)
    (-> (-> a [a b]) a (Stream b)))
  (let [[next x] (step init)]
    (//.pending [x (iterations step next)])))

(the .public (repeated x)
  (for_any (_ a)
    (-> a (Stream a)))
  (//.pending [x (repeated x)]))

(the .public (cycle [start next])
  (for_any (_ a)
    (-> [a (Stack a)] (Stream a)))
  (loop (again [head start
                tail next])
    (//.pending [head (when tail
                        {.#Empty}
                        (again start next)
                        
                        {.#Top head' tail'}
                        (again head' tail'))])))

(template.with [<name> <return>]
  [(the .public (<name> stream)
     (for_any (_ a) (-> (Stream a) <return>))
     (let [[head tail] (//.value stream)]
       <name>))]

  [head a]
  [tail (Stream a)]
  )

(the .public (item idx stream)
  (for_any (_ a) (-> Natural (Stream a) a))
  (let [[head tail] (//.value stream)]
    (when idx
      0 head
      _ (item (-- idx) tail))))

(template.with [<taker> <dropper> <pred_type> <pred_test> <pred_step> <post_test>]
  [(the .public (<taker> pred xs)
     (for_any (_ a)
       (-> <pred_type> (Stream a) (Stack a)))
     (let [[x xs'] (//.value xs)]
       (if (<post_test> <pred_test>)
         (stack.partial x (<taker> <pred_step> xs'))
         (stack))))

   (the .public (<dropper> pred xs)
     (for_any (_ a)
       (-> <pred_type> (Stream a) (Stream a)))
     (let [[x xs'] (//.value xs)]
       (if (<post_test> <pred_test>)
         (<dropper> <pred_step> xs')
         xs)))]
  
  [while until (-> a Bit) (pred x)     pred       |>]
  [first after Natural    (n.= 0 pred) (-- pred) not]
  )

(template.with [<splitter> <pred_type> <pred_test> <pred_step>]
  [(the .public (<splitter> pred xs)
     (for_any (_ a)
       (-> <pred_type> (Stream a) [(Stack a) (Stream a)]))
     (let [[x xs'] (//.value xs)]
       (if <pred_test>
         [(stack) xs]
         (let [[tail next] (<splitter> <pred_step> xs')]
           [{.#Top [x tail]} next]))))]
  
  [split_when (-> a Bit) (pred x)     pred]
  [split_at   Natural    (n.= 0 pred) (-- pred)]
  )

(the .public (only predicate stream)
  (for_any (_ a) (-> (-> a Bit) (Stream a) (Stream a)))
  (let [[head tail] (//.value stream)]
    (if (predicate head)
      (//.pending [head (only predicate tail)])
      (only predicate tail))))

(the .public (partition left? xs)
  (for_any (_ a)
    (-> (-> a Bit) (Stream a)
        [(Stream a) (Stream a)]))
  [(..only left? xs)
   (..only (predicate.complement left?) xs)])

(the .public functor
  (Functor Stream)
  (implementation
   (the (each f fa)
     (let [[head tail] (//.value fa)]
       (//.pending [(f head) (each f tail)])))))

(the .public comonad
  (CoMonad Stream)
  (implementation
   (the functor ..functor)
   
   (the out head)
   
   (the (disjoint wa)
     (let [[head tail] (//.value wa)]
       (//.pending [wa (disjoint tail)])))))

(the .public pattern
  (.pattern
   (syntax.macro (_ [patterns (<code>.form (<>.many <code>.any))
                     body <code>.any
                     branches (<>.some <code>.any)])
     (with_names ['stream]
       (let [body+ (` (let [(,* (|> patterns
                                    (list#each (function (_ pattern)
                                                 (list (` [(, pattern) (, 'stream)])
                                                       (` (//.value (, 'stream))))))
                                    list#conjoint
                                    list.as_stack))]
                        (, body)))]
         (in (stack.partial 'stream body+ (list.as_stack branches))))))))
