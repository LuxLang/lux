... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except pattern only)
   [abstract
    [functor (.only Functor)]
    [comonad (.only CoMonad)]
    ["<>" projection]]
   [control
    ["//" continuation (.only Cont)]]
   [function
    ["[0]" predicate (.only Predicate)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monad monoid)
      ["?[1]" \\projection]]]]
   [math
    [number
     ["n" natural]]]
   [macro (.only with_names)
    ["[0]" syntax]
    ["[0]" template]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]])

(every .public (Stream it)
  (Cont [it (Stream it)]))

(the .public (iterations step init)
  (for_any (_ state it)
    (-> (-> state [state it])
        (-> state (Stream it))))
  (let [[next x] (step init)]
    (//.pending [x (iterations step next)])))

(the .public (repeated it)
  (for_any (_ it)
    (-> it
        (Stream it)))
  (//.pending [it (repeated it)]))

(the .public (cycle [start next])
  (for_any (_ it)
    (-> [it (List it)]
        (Stream it)))
  (let [limit (list.size next)]
    (loop (cycle [head start
                  tail limit])
      (//.pending [head (if (n.= limit tail)
                            (cycle start 0)
                            (cycle (.list_item# tail next) (++ tail)))]))))

(template.with [<name> <return>]
  [(the .public (<name> stream)
     (for_any (_ it)
       (-> (Stream it)
           <return>))
     (let [[head tail] (//.value stream)]
       <name>))]

  [head it]
  [tail (Stream it)]
  )

(the .public (item idx stream)
  (for_any (_ it)
    (-> Natural (Stream it)
        it))
  (let [[head tail] (//.value stream)]
    (when idx
      0 head
      _ (item (-- idx) tail))))

(the .public (split_when ? it)
  (for_any (_ it)
    (-> (Predicate it) (Stream it)
        [(List it) (Stream it)]))
  (let [[stream list] (list.dynamic (function (_ it)
                                      (let [[head tail] (//.value it)]
                                        (if (? head)
                                            {.#None}
                                            {.#Some [tail head]})))
                                    it)]
    [list stream]))

(the .public (while ? it)
  (for_any (_ it)
    (-> (Predicate it) (Stream it)
        (List it)))
  (let [[list stream] (split_when (predicate.not ?) it)]
    list))

(the .public (until ? it)
  (for_any (_ it)
    (-> (Predicate it)
        (Change (Stream it))))
  (let [[list stream] (split_when ? it)]
    stream))

(the .public (split_at amount it)
  (for_any (_ it)
    (-> Natural (Stream it)
        [(List it) (Stream it)]))
  (let [[stream list] (list.static amount
                                   (function (_ it)
                                     (let [[head tail] (//.value it)]
                                       [tail head]))
                                   it)]
    [list stream]))

(the .public (first amount it)
  (for_any (_ it)
    (-> Natural (Stream it)
        (List it)))
  (let [[list stream] (split_at amount it)]
    list))

(the .public (after amount it)
  (for_any (_ it)
    (-> Natural
        (Change (Stream it))))
  (let [[list stream] (split_at amount it)]
    stream))

(the .public (only predicate stream)
  (for_any (_ it)
    (-> (Predicate it)
        (Change (Stream it))))
  (let [[head tail] (//.value stream)]
    (if (predicate head)
        (//.pending [head (only predicate tail)])
        (only predicate tail))))

(the .public (partition left? xs)
  (for_any (_ it)
    (-> (Predicate it) (Stream it)
        [(Stream it) (Stream it)]))
  [(..only left? xs)
   (..only (predicate.complement left?) xs)])

(the .public functor
  (Functor Stream)
  (implementation
   (the (each f fa)
     (let [[head tail] (//.value fa)]
       (//.pending [(f head) (each f tail)])))))

(the .public comonad
  (CoMonad Stream)
  (implementation
   (the functor ..functor)
   
   (the out head)
   
   (the (disjoint wa)
     (let [[head tail] (//.value wa)]
       (//.pending [wa (disjoint tail)])))))

(the .public pattern
  (.pattern
   (syntax.macro (_ [patterns (<code>.form (<>.many ?list.any))
                     body ?list.any
                     branches (<>.some ?list.any)])
     (with_names ['stream]
       (let [body+ (` (let [(,* (|> patterns
                                    (list#each (function (_ pattern)
                                                 (list (` [(, pattern) (, 'stream)])
                                                       (` (//.value (, 'stream))))))
                                    list#conjoint))]
                        (, body)))]
         (in (list#composite (list 'stream body+)
                             branches)))))))
