... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]]
   [control
    ["[0]" try (.only Try)]]
   [data
    [collection
     ["//" list]]]
   [meta
    ["[0]" location]
    [type
     ["[0]" nominal]]]]])

(nominal.every .public (Stack of)
  (List of)

  (the .public empty
    Stack
    (nominal.abstraction (list)))

  (the .public size
    (for_any (_ of)
      (-> (Stack of)
          Natural))
    (|>> nominal.representation
         //.size))

  (the .public empty?
    (for_any (_ of)
      (-> (Stack of)
          Bit))
    (|>> nominal.representation
         //.empty?))

  (the .public is_empty
    Error
    (location.with (location.here)
      "Empty."))

  (the .public (value stack)
    (for_any (_ of)
      (-> (Stack of)
          (Try of)))
    (when (nominal.representation stack)
      {.#Item value _}
      {try.#Success value}

      {.#End}
      {try.#Failure ..is_empty}))

  (the .public (next stack)
    (for_any (_ of)
      (-> (Stack of)
          (Try [of (Stack of)])))
    (when (nominal.representation stack)
      {.#Item top stack'}
      {try.#Success [top (nominal.abstraction stack')]}

      {.#End}
      {try.#Failure ..is_empty}))

  (the .public (top value stack)
    (for_any (_ of)
      (-> of (Stack of)
          (Stack of)))
    (nominal.abstraction
     {.#Item value (nominal.representation stack)}))

  (the .public (equivalence super)
    (for_any (_ of)
      (-> (Equivalence of)
          (Equivalence (Stack of))))
    (implementation
     (the (= expected actual)
       (of (//.equivalence super) =
           (nominal.representation expected)
           (nominal.representation actual)))))

  (the .public functor
    (Functor Stack)
    (implementation
     (the (each f value)
       (|> value
           nominal.representation
           (of //.functor each f)
           nominal.abstraction))))
  )
