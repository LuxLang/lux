... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]]
   [data
    [collection
     ["//" list]]]
   [meta
    [type
     ["[0]" nominal]]]]])

(nominal.every .public (Stack a)
  (List a)

  (the .public empty
    Stack
    (nominal.abstraction (list)))

  (the .public size
    (All (_ a) (-> (Stack a) Nat))
    (|>> nominal.representation
         //.size))

  (the .public empty?
    (All (_ a) (-> (Stack a) Bit))
    (|>> nominal.representation
         //.empty?))

  (the .public (value stack)
    (All (_ a) (-> (Stack a) (Maybe a)))
    (when (nominal.representation stack)
      {.#End}
      {.#None}
      
      {.#Item value _}
      {.#Some value}))

  (the .public (next stack)
    (All (_ a) (-> (Stack a) (Maybe [a (Stack a)])))
    (when (nominal.representation stack)
      {.#End}
      {.#None}
      
      {.#Item top stack'}
      {.#Some [top (nominal.abstraction stack')]}))

  (the .public (top value stack)
    (All (_ a) (-> a (Stack a) (Stack a)))
    (nominal.abstraction
     {.#Item value (nominal.representation stack)}))

  (the .public (equivalence super)
    (All (_ a)
      (-> (Equivalence a)
          (Equivalence (Stack a))))
    (implementation
     (the (= reference subject)
       (of (//.equivalence super) =
           (nominal.representation reference)
           (nominal.representation subject)))))

  (the .public functor
    (Functor Stack)
    (implementation
     (the (each f value)
       (|> value
           nominal.representation
           (of //.functor each f)
           nominal.abstraction))))
  )
