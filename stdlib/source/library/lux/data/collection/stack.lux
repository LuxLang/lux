(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]]
   [data
    [collection
     ["//" list]]]
   [meta
    [type
     ["[0]" nominal (.except def)]]]]])

(nominal.def .public (Stack a)
  (List a)

  (def .public empty
    Stack
    (abstraction (list)))

  (def .public size
    (All (_ a) (-> (Stack a) Nat))
    (|>> representation //.size))

  (def .public empty?
    (All (_ a) (-> (Stack a) Bit))
    (|>> representation //.empty?))

  (def .public (value stack)
    (All (_ a) (-> (Stack a) (Maybe a)))
    (when (representation stack)
      {.#End}
      {.#None}
      
      {.#Item value _}
      {.#Some value}))

  (def .public (next stack)
    (All (_ a) (-> (Stack a) (Maybe [a (Stack a)])))
    (when (representation stack)
      {.#End}
      {.#None}
      
      {.#Item top stack'}
      {.#Some [top (abstraction stack')]}))

  (def .public (top value stack)
    (All (_ a) (-> a (Stack a) (Stack a)))
    (abstraction {.#Item value (representation stack)}))

  (def .public (equivalence super)
    (All (_ a)
      (-> (Equivalence a)
          (Equivalence (Stack a))))
    (implementation
     (def (= reference subject)
       (at (//.equivalence super) = (representation reference) (representation subject)))))

  (def .public functor
    (Functor Stack)
    (implementation
     (def (each f value)
       (|> value
           representation
           (at //.functor each f)
           abstraction))))
  )
