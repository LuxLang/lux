(.module:
  [library
   [lux #*
    [abstract
     [equivalence (#+ Equivalence)]
     [functor (#+ Functor)]]
    [data
     [collection
      ["//" list]]]
    [type
     abstract]]])

(abstract: .public (Stack a)
  {#.doc (example "A first-in, last-out sequential data-structure.")}

  (List a)

  (def: .public empty
    Stack
    (:abstraction (list)))

  (def: .public size
    (All [a] (-> (Stack a) Nat))
    (|>> :representation //.size))

  (def: .public empty?
    (All [a] (-> (Stack a) Bit))
    (|>> :representation //.empty?))

  (def: .public (peek stack)
    {#.doc (example "Yields the top value in the stack, if any.")}
    (All [a] (-> (Stack a) (Maybe a)))
    (case (:representation stack)
      #.End
      #.None
      
      (#.Item value _)
      (#.Some value)))

  (def: .public (pop stack)
    (All [a] (-> (Stack a) (Maybe [a (Stack a)])))
    (case (:representation stack)
      #.End
      #.None
      
      (#.Item top stack')
      (#.Some [top (:abstraction stack')])))

  (def: .public (push value stack)
    (All [a] (-> a (Stack a) (Stack a)))
    (:abstraction (#.Item value (:representation stack))))

  (implementation: .public (equivalence super)
    (All [a]
      (-> (Equivalence a)
          (Equivalence (Stack a))))

    (def: (= reference subject)
      (\ (//.equivalence super) = (:representation reference) (:representation subject))))

  (implementation: .public functor
    (Functor Stack)
    
    (def: (map f value)
      (|> value
          :representation
          (\ //.functor map f)
          :abstraction)))
  )
