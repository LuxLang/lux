... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except only)
   [abstract
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    ["[0]" monad (.only Monad)]
    ["[0]" functor (.only Functor)]]
   ["[0]" error (.only)
    ["[0]" try (.only Try)]]
   [function
    [predicate (.only Predicate)]
    [poly
     [type
      [mix (.only Mix)]]]]
   [data
    ["[0]" product]]
   [math
    [number
     [/64
      ["n" natural]]]]]])

(the with_template (.in_module# .prelude .with_template))

... (every (Stack it)
...   (Variant
...    {:Empty}
...    {:Top it (Stack it)}))

(the .public mix
  (Mix Stack)
  (implementation
   (the (mix f init xs)
     (.when xs
       {.:Top x xs'}
       (mix f (f x init) xs')

       end
       init))))

(the .public (in_reverse it)
  (for_any (_ it)
    (-> (Stack it)
        (Stack it)))
  (mix (function (_ top pop)
         {.:Top top pop})
       {.:Empty}
       it))

(the .public (only keep? xs)
  (for_any (_ it)
    (-> (Predicate it) (Stack it)
        (Stack it)))
  (.when xs
    {.:Top x xs'}
    (if (keep? x)
        {.:Top x (only keep? xs')}
        (only keep? xs'))

    end
    end))

(the list:as_stack (.in_module# .prelude .list:as_stack))

(the .public partial
  (macro (_ tokens state)
    (.when (in_reverse (list:as_stack tokens))
      {.:Top pop tops}
      {.:Right [state (list (..mix (function (_ top pop)
                                     (` {.:Top (, top) (, pop)}))
                                   pop
                                   tops))]}

      _
      {.:Left .wrong_syntax})))

(the (split_when' predicate ys xs)
  (for_any (_ it)
    (-> (Predicate it) (Stack it) (Stack it)
        [(Stack it) (Stack it)]))
  (.when xs
    {.:Top x xs'}
    (if (predicate x)
        [ys xs]
        (split_when' predicate {.:Top x ys} xs'))

    end
    [ys xs]))

(the .public (split_when predicate xs)
  (for_any (_ it)
    (-> (Predicate it) (Stack it)
        [(Stack it) (Stack it)]))
  (let [[ys' xs'] (split_when' predicate {.:Empty} xs)]
    [(in_reverse ys') xs']))

(the .public (one check xs)
  (for_any (_ input output)
    (-> (-> input (Maybe output))
        (-> (Stack input) (Try output))))
  (.when xs
    {.:Top x xs'}
    (.when (check x)
      {.:None}
      (one check xs')

      {.:Some it}
      {try.:Success it})

    end
    {try.:Failure error.no_instance}))

(the .public (example predicate xs)
  (for_any (_ it)
    (-> (Predicate it) (Stack it)
        (Try it)))
  (..one (function (_ value)
           (if (predicate value)
               {.:Some value}
               {.:None}))
         xs))

(the .public size
  (for_any (_ it)
    (-> (Stack it)
        Natural))
  (mix (function (_ _ acc)
         (++ acc))
       0))

(with_template [<name> <init> <op>]
  [(the .public (<name> predicate items)
     (for_any (_ it)
       (-> (Predicate it)
           (Predicate (Stack it))))
     (.when items
       {.:Top top pop}
       (<op> (predicate top)
             (<name> predicate pop))

       end
       <init>))]

  [[any?   0b or]
   [every? 1b and]])

(the .public (item i xs)
  (for_any (_ it)
    (-> Natural (Stack it)
        (Try it)))
  (.when xs
    {.:Top x xs'}
    (.when i
      0 {try.:Success x}
      _ (item (-- i) xs'))

    end
    {try.:Failure error.not_valid}))

(the .public (equivalence //)
  (for_any (_ it)
    (-> (Equivalence it)
        (Equivalence (Stack it))))
  (implementation
   (the (= xs ys)
     (.when [xs ys]
       [{.:Empty} {.:Empty}]
       true

       [{.:Top x xs'} {.:Top y ys'}]
       (and (by // = x y)
            (= xs' ys'))

       [_ _]
       false))))

(the .public (hash //)
  (for_any (_ it)
    (-> (Hash it)
        (Hash (Stack it))))
  (implementation
   (the equivalence
     (..equivalence (by // equivalence)))
   
   (the hash
     (by ..mix mix
         (function (_ member)
           (n.+ (by // hash member)))
         0))))

(the .public monoid
  (for_any (_ it)
    (Monoid (Stack it)))
  (implementation
   (the identity
     {.:Empty})
   (the (composite left right)
     ... TODO: Use the more obvious implementation once "tail recursion modulo cons" is added to the compiler.
     (mix (function (_ top pop)
            {.:Top top pop})
          right
          (in_reverse left)))))

(the .public functor
  (Functor Stack)
  (implementation
   (the (each f it)
     ... TODO: Use the more obvious implementation once "tail recursion modulo cons" is added to the compiler.
     (mix (function (_ top pop)
            {.:Top (f top) pop})
          (stack)
          (in_reverse it)))))

(the .public (empty? xs)
  (for_any (_ it)
    (Predicate (Stack it)))
  (.when xs
    {.:Empty}
    true
    
    _
    false))

(the .public (member? eq xs x)
  (for_any (_ it)
    (-> (Equivalence it) (Stack it)
        (Predicate it)))
  (.when xs
    {.:Top x' xs'}
    (or (by eq = x x')
        (member? eq xs' x))

    end
    false))

(with_template [<side> <output>]
  [(the .public (<side> it)
     (for_any (_ it)
       (-> (Stack it)
           (Try <output>)))
     (.when it
       {.:Top top pop}
       {try.:Success <side>}

       end
       {try.:Failure error.empty}))]

  [[top it]
   [pop (Stack it)]])

(the .public (each' monad f)
  (for_any (_ ! before after)
    (-> (Monad !)
        (-> before
            (! after))
        (-> (Stack before)
            (! (Stack after)))))
  (let [(open "/:[0]") monad]
    (function (again xs)
      (.when xs
        {.:Empty}
        (/:pure {.:Empty})
        
        {.:Top x xs'}
        (|> (f x)
            (/:each (function (_ _x)
                      (/:each (|>> {.:Top _x}) (again xs'))))
            /:conjoint)))))

(the .public (only' monad f)
  (for_any (_ ! it)
    (-> (Monad !)
        (-> it (! Bit))
        (-> (Stack it) (! (Stack it)))))
  (let [(open "/:[0]") monad]
    (function (again xs)
      (.when xs
        {.:Empty}
        (/:pure {.:Empty})
        
        {.:Top top xs'}
        (|> (f top)
            (/:each (function (_ verdict)
                      (/:each (function (_ pop)
                                (if verdict
                                    {.:Top top pop}
                                    pop))
                              (again xs'))))
            /:conjoint)))))

(the .public (mix' monad f init xs)
  (for_any (_ ! part whole)
    (-> (Monad !) (-> part whole (! whole)) whole (Stack part)
        (! whole)))
  (.when xs
    {.:Empty}
    (by monad pure init)

    {.:Top x xs}
    (monad.let monad
      [init (f x init)]
      (mix' monad f init xs))))
