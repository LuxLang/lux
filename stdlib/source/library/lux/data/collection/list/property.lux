... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except List has revised)
   [abstract
    [equivalence (.only Equivalence)]
    [monoid (.only Monoid)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" nat]]]
   [meta
    ["[0]" location]]]])

(the with_template' (.in_module# .prelude .with_template))

... https://en.wikipedia.org/wiki/Property_list
(every .public (List of)
  (.List [Text of]))

(the .public empty
  List
  {.#End})

(the .public size
  (for_any (_ of)
    (-> (List of)
        Nat))
  list.size)

(the .public empty?
  (for_any (_ of)
    (-> (List of)
        Bit))
  (|>> ..size
       (n.= 0)))

(the .public unknown_value
  Error
  (location.with (location.here)
    "Unknown value."))

(the .public (value key properties)
  (for_any (_ of)
    (-> Text (List of)
        (Try of)))
  (when properties
    {.#Item [k' v'] properties'}
    (if (text.= key k')
      {try.#Success v'}
      (value key properties'))

    {.#End}
    {try.#Failure ..unknown_value}))

(with_template' [<name> <type> <access>]
  [(the .public <name>
     (for_any (_ of)
       (-> (List of)
           (.List <type>)))
     (list#each <access>))]

  [keys   Text product.left]
  [values of   product.right]
  )

(the .public (contains? key properties)
  (for_any (_ of)
    (-> Text (List of)
        Bit))
  (when (..value key properties)
    {try.#Success _}
    true

    failure
    false))

(the .public (has key val properties)
  (for_any (_ of)
    (-> Text of (List of)
        (List of)))
  (when properties
    {.#Item [k' v'] properties'}
    (if (text.= key k')
      {.#Item [key val]
              properties'}
      {.#Item [k' v']
              (has key val properties')})

    end
    (list [key val])))

(the .public (revised key f properties)
  (for_any (_ of)
    (-> Text (-> of of) (List of)
        (List of)))
  (when properties
    {.#Item [k' v'] properties'}
    (if (text.= key k')
      {.#Item [k' (f v')] properties'}
      {.#Item [k' v'] (revised key f properties')})

    end
    end))

(the .public (lacks key properties)
  (for_any (_ of)
    (-> Text (List of)
        (List of)))
  (when properties
    {.#Item [k' v'] properties'}
    (if (text.= key k')
      properties'
      {.#Item [k' v']
              (lacks key properties')})

    end
    end))

(the .public (equivalence (open "/#[0]"))
  (for_any (_ of)
    (-> (Equivalence of)
        (Equivalence (List of))))
  (implementation
   (the (= expected actual)
     (and (n.= (list.size expected)
               (list.size actual))
          (list.every? (function (_ [key val])
                         (|> expected
                             (..value key)
                             (maybe#each (/#= val))
                             (maybe.else false)))
                       actual)))))

(the .public monoid
  (for_any (_ of)
    (Monoid (List of)))
  (implementation
   (the identity
     ..empty)

   (the (composite left right)
     (list#mix (function (_ [key val] it)
                 (..has key val it))
               right
               left))))
