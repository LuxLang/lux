(.require
 [library
  [lux (.except List has revised)
   [abstract
    [equivalence (.only Equivalence)]
    [monoid (.only Monoid)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" equivalence)]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" nat]]]]])

... https://en.wikipedia.org/wiki/Property_list
(type .public (List a)
  (.List [Text a]))

(def .public empty
  List
  {.#End})

(def .public size
  (All (_ a) (-> (List a) Nat))
  list.size)

(def .public empty?
  (All (_ a) (-> (List a) Bit))
  (|>> ..size (n.= 0)))

(def .public (value key properties)
  (All (_ a) (-> Text (List a) (Maybe a)))
  (case properties
    {.#End}
    {.#None}

    {.#Item [k' v'] properties'}
    (if (text#= key k')
      {.#Some v'}
      (value key properties'))))

(with_template [<name> <type> <access>]
  [(def .public <name>
     (All (_ a) (-> (List a) (.List <type>)))
     (list#each <access>))]

  [keys   Text product.left]
  [values a    product.right]
  )

(def .public (contains? key properties)
  (All (_ a) (-> Text (List a) Bit))
  (case (..value key properties)
    {.#Some _}
    true

    {.#None}
    false))

(def .public (has key val properties)
  (All (_ a) (-> Text a (List a) (List a)))
  (case properties
    {.#End}
    (list [key val])

    {.#Item [k' v'] properties'}
    (if (text#= key k')
      {.#Item [key val]
              properties'}
      {.#Item [k' v']
              (has key val properties')})))

(def .public (revised key f properties)
  (All (_ a) (-> Text (-> a a) (List a) (List a)))
  (case properties
    {.#End}
    {.#End}

    {.#Item [k' v'] properties'}
    (if (text#= key k')
      {.#Item [k' (f v')] properties'}
      {.#Item [k' v'] (revised key f properties')})))

(def .public (lacks key properties)
  (All (_ a) (-> Text (List a) (List a)))
  (case properties
    {.#End}
    properties

    {.#Item [k' v'] properties'}
    (if (text#= key k')
      properties'
      {.#Item [k' v']
              (lacks key properties')})))

(def .public (equivalence (open "/#[0]"))
  (All (_ a) (-> (Equivalence a) (Equivalence (List a))))
  (implementation
   (def (= reference subject)
     (and (n.= (list.size reference)
               (list.size subject))
          (list.every? (function (_ [key val])
                         (|> reference
                             (..value key)
                             (maybe#each (/#= val))
                             (maybe.else false)))
                       subject)))))

(def .public monoid
  (All (_ a) (Monoid (List a)))
  (implementation
   (def identity
     ..empty)

   (def (composite left right)
     (list#mix (function (_ [key val] it)
                 (..has key val it))
               right
               left))))
