... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except List has revised)
   [abstract
    [equivalence (.only Equivalence)]
    [monoid (.only Monoid)]
    [functor (.only Functor)]]
   [error
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    ["[0]" text]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [function
    [predicate (.only Predicate)]]]]
 ["[0]" // (.use "[1]:[0]" functor monoid)])

(the with_template (.in_module# .prelude .with_template))

... https://en.wikipedia.org/wiki/Property_list
(every .public (List it)
  (.List [Text it]))

(the .public empty
  List
  (list))

(the .public size
  (for_any (_ it)
    (-> (List it)
        Natural))
  //.size)

(the .public empty?
  (for_any (_ it)
    (Predicate (List it)))
  (|>> ..size
       (n.= 0)))

(the .public (value key it)
  (for_any (_ it)
    (-> Text (List it)
        (Try it)))
  (//.one (function (_ [actual_key value])
            (if (text.= key actual_key)
                {.:Some value}
                {.:None}))
          it))

(with_template [<name> <type> <access>]
  [(the .public <name>
     (for_any (_ it)
       (-> (List it)
           (.List <type>)))
     (//:each <access>))]

  [[domain Text product.left]
   [values it   product.right]])

(the .public (contains? key it)
  (for_any (_ it)
    (-> Text
        (Predicate (List it))))
  (when (..value key it)
    {try.:Success _}
    true

    failure
    false))

(the (index key it)
  (for_any (_ it)
    (-> Text (List it)
        (Maybe [Natural it])))
  (let [limit (..size it)]
    (loop (index [current 0])
      (if (n.< limit current)
          (let [[actual_key value] (.list_item# current it)]
            (if (text.= key actual_key)
                {.:Some [current value]}
                (index (++ current))))
          {.:None}))))

(the .public (has key value it)
  (for_any (_ it)
    (-> Text it
        (Change (List it))))
  (when (index key it)
    {.:Some [index _]}
    (//.has index [key value] it)
    
    {.:None}
    (//:composite it (list [key value]))))

(the .public (revised key change it)
  (for_any (_ it)
    (-> Text (Change it)
        (Change (List it))))
  (when (index key it)
    {.:Some [index value]}
    (//.has index [key (change value)] it)
    
    {.:None}
    it))

(the .public (lacks key it)
  (for_any (_ it)
    (-> Text
        (Change (List it))))
  (when (index key it)
    {.:Some [index value]}
    (//.lacks index it)
    
    {.:None}
    it))

(the .public (equivalence /:=)
  (for_any (_ it)
    (-> (Equivalence it)
        (Equivalence (List it))))
  (implementation
   (the (= expected actual)
     (and (n.= (//.size expected)
               (//.size actual))
          (//.every? (function (_ [key expected_value])
                       (when (..value key expected)
                         {try.:Success actual_value}
                         (/:= expected_value actual_value)

                         failure
                         false))
                     actual)))))

(the .public monoid
  (for_any (_ it)
    (Monoid (List it)))
  (implementation
   (the identity
     ..empty)

   (the (composite left right)
     (//.mix (function (_ [key val] it)
               (..has key val it))
             right
             left))))

(the .public functor
  (Functor List)
  (implementation
   (the (each value it)
     (//:each (function (_ [name entry])
                [name (value entry)])
              it))))
