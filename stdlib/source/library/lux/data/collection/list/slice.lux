... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except list)
   [type
    ["[0]" nominal]]
   [aspect
    ["[0]" view (.only View)]
    ["[0]" case (.only Case)]]
   [abstract
    [equivalence (.only Equivalence)]]
   [math
    [number
     [/64
      ["n" natural]]]]
   ["[0]" function (.only)
    [predicate (.only Predicate)]]
   [data
    [collection
     ["[0]" array
      ["[1]" \\unsafe]]]]
   [meta
    ["[0]" name]]]]
 ["[0]" //])

(nominal.every .public (Slice it)
  (Record
   [#space (List it)
    #origin Natural
    #size Natural])

  (the .public (new it)
    (for_any (_ it)
      (-> (List it)
          (Slice it)))
    (nominal.of [#space it
                 #origin 0
                 #size (//.size it)]))

  (the (as_list it)
    (for_any (_ it)
      (-> (Slice it)
          (List it)))
    (let [it (nominal.as it)]
      (|> (its #space it)
          (//.after (its #origin it))
          (//.first (its #size it)))))

  (the .public list
    (for_any (_ it)
      (View (Slice it)
            (List it)))
    (view.new ..new ..as_list))

  (the .public size
    (for_any (_ it)
      (-> (Slice it)
          Natural))
    (|>> nominal.as
         (its #size)))

  (the .public empty
    Slice
    (..new //.empty))

  (the .public empty?
    (for_any (_ it)
      (Predicate (Slice it)))
    (|>> ..size
         (n.= 0)))

  (the .public (equivalence //)
    (for_any (_ it)
      (-> (Equivalence it)
          (Equivalence (Slice it))))
    (implementation
     (the (= reference it)
       (let [reference (nominal.as reference)
             it (nominal.as it)]
         (and (n.= (its #size reference)
                   (its #size it))
              (let [limit (its #size it)

                    origin_of_reference (its #origin reference)
                    origin_of_it (its #origin it)

                    reference (its #space reference)
                    it (its #space it)]
                (loop (= [position 0])
                  (or (n.= limit position)
                      (and (by // =
                               (.list_item# (n.+ origin_of_reference position)
                                            reference)
                               (.list_item# (n.+ origin_of_it position)
                                            it))
                           (= (++ position)))))))))))

  (the .public #Nil
    (for_any (_ it)
      (Case (Slice it)
            Any))
    (case.new (function (_ it)
                (if (empty? it)
                    {.#Right []}
                    {.#Left it}))
              (function.constant (..new //.empty))))

  (the module_of_//
    (name.module (name //._)))
  
  (the list#of (.in_module# ..module_of_// of))
  (the list#as (.in_module# ..module_of_// as))

  (the .public #Cons
    (for_any (_ it)
      (Case (Slice it)
            [it (Slice it)]))
    (case.new (function (_ it)
                (if (empty? it)
                    {.#Left it}
                    {.#Right [(|> it
                                  nominal.as
                                  (its #space)
                                  (.list_item# 0))
                              (|> it
                                  nominal.as
                                  (revised #origin ++)
                                  (revised #size --)
                                  nominal.of)]}))
              (function (_ [head tail])
                (let [size (..size tail)]
                  (|> (array.empty (++ size))
                      (array.copy! size 0 (list#as (as_list tail)) 1)
                      (array.has! 0 head)
                      list#of
                      ..new)))))

  (the .public #Pair
    (for_any (_ it)
      (Case (Slice it)
            [it it (Slice it)]))
    (case.new (function (_ it)
                (let [size (..size it)]
                  (if (n.< 2 size)
                      {.#Left it}
                      (let [it (nominal.as it)
                            space (its #space it)
                            origin (its #origin it)
                            last (n.+ origin
                                      (-- (its #size it)))]
                        {.#Right [(.list_item# origin space)
                                  (.list_item# last space)
                                  (|> it
                                      (revised #origin ++)
                                      (revised #size (n.- 2))
                                      nominal.of)]}))))
              (function (_ [start end center])
                (let [size (..size center)]
                  (|> (array.empty (n.+ 2 size))
                      (array.copy! size 0 (list#as (as_list center)) 1)
                      (array.has! 0 start)
                      (array.has! (++ size) end)
                      list#of
                      ..new)))))
  )
