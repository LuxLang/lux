... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except not and or)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["|" pipe]]
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" array (.use "[1]#[0]" mix)]]]
   [math
    [number
     ["[0]" /64 (.only)
      ["n" natural]]]]
   [macro
    ["[0]" template]]]])

(every .public Chunk
  I64)

(the .public chunk_size
  /64.width)

(every .public Bits
  (Array Chunk))

(the empty_chunk
  Chunk
  (.i64 0))

(the .public empty
  Bits
  (array.empty 0))

(the .public (size bits)
  (-> Bits
      Natural)
  (array#mix (function (_ chunk total)
               (|> chunk /64.ones (n.+ total)))
             0
             bits))

(the .public (capacity bits)
  (-> Bits
      Natural)
  (|> bits array.size (n.x chunk_size)))

(the .public empty?
  (-> Bits
      Bit)
  (|>> ..size (n.= 0)))

(the .public (bit index bits)
  (-> Natural Bits
      Bit)
  (let [[chunk_index bit_index] (n./% chunk_size index)]
    (.and (n.< (array.size bits) chunk_index)
          (|> (array.item chunk_index bits)
              (try.else empty_chunk)
              (/64.one? bit_index)))))

(the (chunk idx bits)
  (-> Natural Bits
      Chunk)
  (if (n.< (array.size bits) idx)
      (|> bits
          (array.item idx)
          (try.else empty_chunk))
      empty_chunk))

(template.with [<name> <op>]
  [(the .public (<name> index input)
     (-> Natural Bits
         Bits)
     (let [[chunk_index bit_index] (n./% chunk_size index)]
       (loop (again [size|output (n.major (++ chunk_index)
                                          (array.size input))
                     output ..empty])
         (let [idx|output (-- size|output)]
           (if (n.> 0 size|output)
               (when (|> (..chunk idx|output input)
                         (|.if [(|.new (n.= chunk_index idx|output) [])]
                               [(<op> bit_index)]

                               ... else
                               [])
                         .natural)
                 0
                 ... TODO: Remove 'no_op' once new-luxc is the official compiler.
                 (let [no_op (again (-- size|output) output)]
                   no_op)
                 
                 chunk
                 (|> (if (same? ..empty output)
                         (is Bits (array.empty size|output))
                         output)
                     (array.has! idx|output (.i64 chunk))
                     (again (-- size|output))))
               output)))))]

  [one /64.one]
  [zero /64.zero]
  [flipped /64.flipped]
  )

(the .public (intersects? reference it)
  (-> Bits Bits
      Bit)
  (let [chunks (n.minor (array.size reference)
                        (array.size it))]
    (loop (again [idx 0])
      (if (n.< chunks idx)
          (.or (|> (..chunk idx it)
                   (/64.and (..chunk idx reference))
                   (.i64_=# empty_chunk)
                   .not)
               (again (++ idx)))
          false))))

(the .public (not input)
  (-> Bits
      Bits)
  (when (array.size input)
    0
    ..empty

    size|output
    (loop (again [size|output size|output
                  output ..empty])
      (let [idx (-- size|output)]
        (when (|> input (..chunk idx) /64.not .natural)
          0
          (again (-- size|output) output)

          chunk
          (if (n.> 0 size|output)
              (|> (if (same? ..empty output)
                      (is Bits (array.empty size|output))
                      output)
                  (array.has! idx (.i64 chunk))
                  (again (-- size|output)))
              output))))))

(template.with [<name> <op>]
  [(the .public (<name> param subject)
     (-> Bits Bits
         Bits)
     (when (n.major (array.size param)
                    (array.size subject))
       0
       ..empty

       size|output
       (loop (again [size|output size|output
                     output ..empty])
         (let [idx (-- size|output)]
           (if (n.> 0 size|output)
               (when (|> (..chunk idx subject)
                         (<op> (..chunk idx param))
                         .natural)
                 0
                 (again (-- size|output) output)

                 chunk
                 (|> (if (same? ..empty output)
                         (is Bits (array.empty size|output))
                         output)
                     (array.has! idx (.i64 chunk))
                     (again (-- size|output))))
               output)))))]

  [and /64.and]
  [or  /64.or]
  [xor /64.xor]
  )

(the .public equivalence
  (Equivalence Bits)
  (implementation
   (the (= expected actual)
     (let [size (n.major (array.size expected)
                         (array.size actual))]
       (loop (again [idx 0])
         (if (n.< size idx)
             (.and (.i64_=# (..chunk idx expected)
                            (..chunk idx actual))
                   (again (++ idx)))
             true))))))
