(.using
 [library
  [lux (.except not and or)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["[0]" pipe]
    ["[0]" maybe]]
   [data
    [collection
     ["[0]" array (.only Array) ("[1]#[0]" mix)]]]
   [math
    [number
     ["n" nat]
     ["[0]" i64]]]]])

(type: .public Chunk
  I64)

(def: .public chunk_size
  i64.width)

(type: .public Bits
  (Array Chunk))

(def: empty_chunk
  Chunk
  (.i64 0))

(def: .public empty
  Bits
  (array.empty 0))

(def: .public (size bits)
  (-> Bits Nat)
  (array#mix (function (_ chunk total)
               (|> chunk i64.ones (n.+ total)))
             0
             bits))

(def: .public (capacity bits)
  (-> Bits Nat)
  (|> bits array.size (n.* chunk_size)))

(def: .public empty?
  (-> Bits Bit)
  (|>> ..size (n.= 0)))

(def: .public (bit index bits)
  (-> Nat Bits Bit)
  (let [[chunk_index bit_index] (n./% chunk_size index)]
    (.and (n.< (array.size bits) chunk_index)
          (|> (array.item chunk_index bits)
              (maybe.else empty_chunk)
              (i64.one? bit_index)))))

(def: (chunk idx bits)
  (-> Nat Bits Chunk)
  (if (n.< (array.size bits) idx)
    (|> bits (array.item idx) (maybe.else empty_chunk))
    empty_chunk))

(template [<name> <op>]
  [(def: .public (<name> index input)
     (-> Nat Bits Bits)
     (let [[chunk_index bit_index] (n./% chunk_size index)]
       (loop (again [size|output (n.max (++ chunk_index)
                                        (array.size input))
                     output ..empty])
         (let [idx|output (-- size|output)]
           (if (n.> 0 size|output)
             (case (|> (..chunk idx|output input)
                       (pipe.cond [(pipe.new (n.= chunk_index idx|output) [])]
                                  [(<op> bit_index)]

                                  ... else
                                  [])
                       .nat)
               0
               ... TODO: Remove 'no_op' once new-luxc is the official compiler.
               (let [no_op (again (-- size|output) output)]
                 no_op)
               
               chunk
               (|> (if (same? ..empty output)
                     (is Bits (array.empty size|output))
                     output)
                   (array.has! idx|output (.i64 chunk))
                   (again (-- size|output))))
             output)))))]

  [one i64.one]
  [zero i64.zero]
  [flipped i64.flipped]
  )

(def: .public (intersects? reference sample)
  (-> Bits Bits Bit)
  (let [chunks (n.min (array.size reference)
                      (array.size sample))]
    (loop (again [idx 0])
      (if (n.< chunks idx)
        (.or (|> (..chunk idx sample)
                 (i64.and (..chunk idx reference))
                 ("lux i64 =" empty_chunk)
                 .not)
             (again (++ idx)))
        #0))))

(def: .public (not input)
  (-> Bits Bits)
  (case (array.size input)
    0
    ..empty

    size|output
    (loop (again [size|output size|output
                  output ..empty])
      (let [idx (-- size|output)]
        (case (|> input (..chunk idx) i64.not .nat)
          0
          (again (-- size|output) output)

          chunk
          (if (n.> 0 size|output)
            (|> (if (same? ..empty output)
                  (is Bits (array.empty size|output))
                  output)
                (array.has! idx (.i64 chunk))
                (again (-- size|output)))
            output))))))

(template [<name> <op>]
  [(def: .public (<name> param subject)
     (-> Bits Bits Bits)
     (case (n.max (array.size param)
                  (array.size subject))
       0
       ..empty

       size|output
       (loop (again [size|output size|output
                     output ..empty])
         (let [idx (-- size|output)]
           (if (n.> 0 size|output)
             (case (|> (..chunk idx subject)
                       (<op> (..chunk idx param))
                       .nat)
               0
               (again (-- size|output) output)

               chunk
               (|> (if (same? ..empty output)
                     (is Bits (array.empty size|output))
                     output)
                   (array.has! idx (.i64 chunk))
                   (again (-- size|output))))
             output)))))]

  [and i64.and]
  [or  i64.or]
  [xor i64.xor]
  )

(implementation: .public equivalence
  (Equivalence Bits)
  
  (def: (= reference sample)
    (let [size (n.max (array.size reference)
                      (array.size sample))]
      (loop (again [idx 0])
        (if (n.< size idx)
          (.and ("lux i64 ="
                 (..chunk idx reference)
                 (..chunk idx sample))
                (again (++ idx)))
          #1)))))
