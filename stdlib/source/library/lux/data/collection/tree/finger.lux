(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monoid (.only Monoid)]]
   [control
    [function
     [predicate (.only Predicate)]]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monoid)]]]
   [meta
    [type
     ["[0]" primitive (.only abstraction representation)]]]]])

... https://en.wikipedia.org/wiki/Finger_tree
(primitive.def .public (Tree @ t v)
  (Record
   [#monoid (Monoid t)
    #tag t
    #root (Either v
                  [(Tree @ t v) (Tree @ t v)])])

  (type .public (Builder @ t)
    (Interface
     (is (All (_ v)
           (-> t v (Tree @ t v)))
         leaf)
     (is (All (_ v)
           (-> (Tree @ t v)
               (Tree @ t v)
               (Tree @ t v)))
         branch)))

  (with_template [<name> <tag> <output>]
    [(def .public <name>
       (All (_ @ t v) (-> (Tree @ t v) <output>))
       (|>> representation (the <tag>)))]

    [tag #tag t]
    [root #root (Either v [(Tree @ t v) (Tree @ t v)])]
    )

  (def .public (builder monoid)
    (All (_ t) (Ex (_ @) (-> (Monoid t) (Builder @ t))))
    (implementation
     (def (leaf tag value)
       (abstraction
        [#monoid monoid
         #tag tag
         #root {.#Left value}]))
     
     (def (branch left right)
       (abstraction
        [#monoid monoid
         #tag (at monoid composite (..tag left) (..tag right))
         #root {.#Right [left right]}]))))

  (def .public (value tree)
    (All (_ @ t v) (-> (Tree @ t v) v))
    (when (the #root (representation tree))
      {0 #0 value}
      value

      {0 #1 [left right]}
      (value left)))

  (def .public (tags tree)
    (All (_ @ t v) (-> (Tree @ t v) (List t)))
    (when (the #root (representation tree))
      {0 #0 value}
      (list (the #tag (representation tree)))

      {0 #1 [left right]}
      (list#composite (tags left)
                      (tags right))))

  (def .public (values tree)
    (All (_ @ t v) (-> (Tree @ t v) (List v)))
    (when (the #root (representation tree))
      {0 #0 value}
      (list value)

      {0 #1 [left right]}
      (list#composite (values left)
                      (values right))))

  (def .public (one predicate tree)
    (All (_ @ t v) (-> (Predicate t) (Tree @ t v) (Maybe v)))
    (let [[monoid tag root] (representation tree)]
      (if (predicate tag)
        (let [(open "tag//[0]") monoid]
          (loop (again [_tag tag//identity
                        _node root])
            (when _node
              {0 #0 value}
              {.#Some value}

              {0 #1 [left right]}
              (let [shifted_tag (tag//composite _tag (..tag left))]
                (if (predicate shifted_tag)
                  (again _tag (the #root (representation left)))
                  (again shifted_tag (the #root (representation right))))))))
        {.#None})))
  )

(def .public (exists? predicate tree)
  (All (_ @ t v) (-> (Predicate t) (Tree @ t v) Bit))
  (when (..one predicate tree)
    {.#Some _}
    true

    {.#None}
    false))
