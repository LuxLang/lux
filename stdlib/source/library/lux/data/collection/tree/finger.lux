... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monoid (.only Monoid)]]
   [function
    [predicate (.only Predicate)]]
   [data
    [collection
     ["[0]" stack (.use "[1]#[0]" monoid)]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]]])

... https://en.wikipedia.org/wiki/Finger_tree
(nominal.every .public (Tree @ t v)
  (Record
   [#monoid (Monoid t)
    #tag t
    #root (Either v
                  [(Tree @ t v) (Tree @ t v)])])

  (every .public (Builder @ t)
    (Interface
     (is (for_any (_ v)
           (-> t v (Tree @ t v)))
         leaf)
     (is (for_any (_ v)
           (-> (Tree @ t v)
               (Tree @ t v)
               (Tree @ t v)))
         branch)))

  (template.with [<name> <tag> <output>]
    [(the .public <name>
       (for_any (_ @ t v) (-> (Tree @ t v) <output>))
       (|>> nominal.reification
            (its <tag>)))]

    [tag #tag t]
    [root #root (Either v [(Tree @ t v) (Tree @ t v)])]
    )

  (the .public (builder monoid)
    (for_any (_ t)
      (for_some (_ @)
        (-> (Monoid t)
            (Builder @ t))))
    (implementation
     (the (leaf tag value)
       (nominal.abstraction
        [#monoid monoid
         #tag tag
         #root {.#Left value}]))
     
     (the (branch left right)
       (nominal.abstraction
        [#monoid monoid
         #tag (by monoid composite (..tag left) (..tag right))
         #root {.#Right [left right]}]))))

  (the .public (value tree)
    (for_any (_ @ t v) (-> (Tree @ t v) v))
    (when (its #root (nominal.reification tree))
      {#0 value}
      value

      {#1 [left right]}
      (value left)))

  (the .public (tags tree)
    (for_any (_ @ t v) (-> (Tree @ t v) (Stack t)))
    (when (its #root (nominal.reification tree))
      {#0 value}
      (stack (its #tag (nominal.reification tree)))

      {#1 [left right]}
      (stack#composite (tags left)
                       (tags right))))

  (the .public (values tree)
    (for_any (_ @ t v) (-> (Tree @ t v) (Stack v)))
    (when (its #root (nominal.reification tree))
      {#0 value}
      (stack value)

      {#1 [left right]}
      (stack#composite (values left)
                       (values right))))

  (the .public (one predicate tree)
    (for_any (_ @ t v) (-> (Predicate t) (Tree @ t v) (Maybe v)))
    (let [[monoid tag root] (nominal.reification tree)]
      (if (predicate tag)
        (let [(open "tag#[0]") monoid]
          (loop (again [_tag tag#identity
                        _node root])
            (when _node
              {#0 value}
              {.#Some value}

              {#1 [left right]}
              (let [shifted_tag (tag#composite _tag (..tag left))]
                (if (predicate shifted_tag)
                  (again _tag (its #root (nominal.reification left)))
                  (again shifted_tag (its #root (nominal.reification right))))))))
        {.#None})))
  )

(the .public (exists? predicate tree)
  (for_any (_ @ t v)
    (-> (Predicate t) (Tree @ t v)
        Bit))
  (when (..one predicate tree)
    {.#Some _}
    true

    {.#None}
    false))
