(.module:
  [library
   [lux #*
    [abstract
     [predicate (#+ Predicate)]
     ["." monoid (#+ Monoid)]]
    [data
     [collection
      ["." list ("#\." monoid)]]]
    [type
     [abstract (#+ abstract: :abstraction :representation)]]]])

(abstract: #export (Tree @ t v)
  {#monoid (Monoid t)
   #tag t
   #root (| v
            [(Tree @ t v) (Tree @ t v)])}

  (interface: #export (Builder @ t)
    (: (All [v]
         (-> t v (Tree @ t v)))
       leaf)
    (: (All [v]
         (-> (Tree @ t v)
             (Tree @ t v)
             (Tree @ t v)))
       branch))

  (template [<name> <tag> <output>]
    [(def: #export <name>
       (All [@ t v] (-> (Tree @ t v) <output>))
       (|>> :representation (get@ <tag>)))]

    [tag #tag t]
    [root #root (Either v [(Tree @ t v) (Tree @ t v)])]
    )

  (implementation: #export (builder monoid)
    (All [t] (Ex [@] (-> (Monoid t) (Builder @ t))))

    (def: (leaf tag value)
      (:abstraction
       {#monoid monoid
        #tag tag
        #root (0 #0 value)}))
    
    (def: (branch left right)
      (:abstraction
       {#monoid monoid
        #tag (\ monoid compose (..tag left) (..tag right))
        #root (0 #1 [left right])})))

  (def: #export (value tree)
    (All [@ t v] (-> (Tree @ t v) v))
    (case (get@ #root (:representation tree))
      (0 #0 value)
      value

      (0 #1 [left right])
      (value left)))

  (def: #export (tags tree)
    (All [@ t v] (-> (Tree @ t v) (List t)))
    (case (get@ #root (:representation tree))
      (0 #0 value)
      (list (get@ #tag (:representation tree)))

      (0 #1 [left right])
      (list\compose (tags left)
                    (tags right))))

  (def: #export (values tree)
    (All [@ t v] (-> (Tree @ t v) (List v)))
    (case (get@ #root (:representation tree))
      (0 #0 value)
      (list value)

      (0 #1 [left right])
      (list\compose (values left)
                    (values right))))

  (def: #export (one predicate tree)
    (All [@ t v] (-> (Predicate t) (Tree @ t v) (Maybe v)))
    (let [[monoid tag root] (:representation tree)]
      (if (predicate tag)
        (let [(^open "tag//.") monoid]
          (loop [_tag tag//identity
                 _node root]
            (case _node
              (0 #0 value)
              (#.Some value)

              (0 #1 [left right])
              (let [shifted_tag (tag//compose _tag (..tag left))]
                (if (predicate shifted_tag)
                  (recur _tag (get@ #root (:representation left)))
                  (recur shifted_tag (get@ #root (:representation right))))))))
        #.None)))
  )

(def: #export (exists? predicate tree)
  (All [@ t v] (-> (Predicate t) (Tree @ t v) Bit))
  (case (..one predicate tree)
    (#.Some _)
    true

    #.None
    false))
