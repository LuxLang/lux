(.using
 [library
  [lux "*"
   ["@" target]
   [abstract
    [functor {"+" Functor}]
    [comonad {"+" CoMonad}]
    [monad {"+" do}]
    [equivalence {"+" Equivalence}]]
   [control
    ["[0]" maybe ("[1]#[0]" monad)]]
   [data
    ["[0]" product]
    [text
     ["%" format {"+" format}]]
    [collection
     ["[0]" list ("[1]#[0]" functor monoid)]]]]]
 ["[0]" // {"+" Tree} ("[1]#[0]" functor)])

(type: (Family Zipper a)
  (Record
   [#parent (Zipper a)
    #lefts (List (Tree a))
    #rights (List (Tree a))]))

... https://en.wikipedia.org/wiki/Zipper_(data_structure)
(type: .public (Zipper a)
  (Record
   [#family (Maybe (Family Zipper a))
    #node (Tree a)]))

(implementation: .public (equivalence super)
  (All (_ a)
    (-> (Equivalence a)
        (Equivalence (Zipper a))))
  
  (def: (= reference sample)
    (let [== ($_ product.equivalence
                 (maybe.equivalence
                  ($_ product.equivalence
                      =
                      (list.equivalence (//.equivalence super))
                      (list.equivalence (//.equivalence super))))
                 (//.equivalence super))]
      (== reference sample))))

(def: .public (zipper tree)
  (All (_ a) (-> (Tree a) (Zipper a)))
  [#family {.#None}
   #node tree])

(def: .public tree
  (All (_ a) (-> (Zipper a) (Tree a)))
  (the #node))

(def: .public value
  (All (_ a) (-> (Zipper a) a))
  (the [#node //.#value]))

(def: .public (set value zipper)
  (All (_ a) (-> a (Zipper a) (Zipper a)))
  (has [#node //.#value] value zipper))

(def: .public (update transform zipper)
  (All (_ a) (-> (-> a a) (Zipper a) (Zipper a)))
  (revised [#node //.#value] transform zipper))

(def: children
  (All (_ a) (-> (Zipper a) (List (Tree a))))
  (the [#node //.#children]))

(def: .public leaf?
  (All (_ a) (-> (Zipper a) Bit))
  (|>> ..children list.empty?))

(def: .public branch?
  (All (_ a) (-> (Zipper a) Bit))
  (|>> ..leaf? not))

(def: .public (start? zipper)
  (All (_ a) (-> (Zipper a) Bit))
  (case (the #family zipper)
    {.#None}
    true

    _
    false))

(def: .public (down zipper)
  (All (_ a) (-> (Zipper a) (Maybe (Zipper a))))
  (case (..children zipper)
    {.#End}
    {.#None}

    {.#Item head tail}
    {.#Some [#family {.#Some [#parent (has [#node //.#children] (list) zipper)
                              #lefts {.#End}
                              #rights tail]}
             #node head]}))

(def: .public (up zipper)
  (All (_ a) (-> (Zipper a) (Maybe (Zipper a))))
  (do maybe.monad
    [family (the #family zipper)]
    (in (let [(^open "_[0]") family]
          (for @.old
               (revised #node (: (-> (Tree (:parameter 0))
                                     (Tree (:parameter 0)))
                                 (has //.#children (list#composite (list.reversed _#lefts)
                                                                   {.#Item (the #node zipper)
                                                                           _#rights})))
                        _#parent)
               (has [#node //.#children]
                    (list#composite (list.reversed _#lefts)
                                    {.#Item (the #node zipper)
                                            _#rights})
                    _#parent))))))

(template [<one> <all> <side> <op_side>]
  [(def: .public (<one> zipper)
     (All (_ a) (-> (Zipper a) (Maybe (Zipper a))))
     (case (the #family zipper)
       {.#Some family}
       (case (the <side> family)
         {.#Item next side'}
         {.#Some (for @.old
                      [#family {.#Some (|> family
                                           (has <side> side')
                                           (revised <op_side> (|>> {.#Item (the #node zipper)})))}
                       #node next]
                      (let [move (: (All (_ a) (-> (List (Tree a)) (Zipper a) (Family Zipper a) (Family Zipper a)))
                                    (function (_ side' zipper)
                                      (|>> (has <side> side')
                                           (revised <op_side> (|>> {.#Item (the #node zipper)})))))]
                        [#family {.#Some (move side' zipper family)}
                         #node next]))}

         {.#End}
         {.#None})

       {.#None}
       {.#None}))

   (def: .public (<all> zipper)
     (All (_ a) (-> (Zipper a) (Maybe (Zipper a))))
     (case (the #family zipper)
       {.#None}
       {.#None}

       {.#Some family}
       (case (list.reversed (the <side> family))
         {.#End}
         {.#None}

         {.#Item last prevs}
         {.#Some (for @.old [#family {.#Some (|> family
                                                 (has <side> {.#End})
                                                 (revised <op_side> (|>> {.#Item (the #node zipper)}
                                                                         (list#composite prevs))))}
                             #node last]
                      (let [move (: (All (_ a) (-> (List (Tree a)) (Zipper a) (Family Zipper a) (Family Zipper a)))
                                    (function (_ prevs zipper)
                                      (|>> (has <side> {.#End})
                                           (revised <op_side> (|>> {.#Item (the #node zipper)}
                                                                   (list#composite prevs))))))]
                        [#family {.#Some (move prevs zipper family)}
                         #node last]))})))]

  [right rightmost #rights #lefts]
  [left  leftmost  #lefts  #rights]
  )

(def: .public (next zipper)
  (All (_ a) (-> (Zipper a) (Maybe (Zipper a))))
  (case (..down zipper)
    {.#Some forward}
    {.#Some forward}
    
    {.#None}
    (loop [@ zipper]
      (case (..right @)
        {.#Some forward}
        {.#Some forward}
        
        {.#None}
        (do maybe.monad
          [@ (..up @)]
          (again @))))))

(def: (bottom zipper)
  (All (_ a) (-> (Zipper a) (Zipper a)))
  (case (..right zipper)
    {.#Some forward}
    (bottom forward)

    {.#None}
    (case (..down zipper)
      {.#Some forward}
      (bottom forward)

      {.#None}
      zipper)))

(def: .public (previous zipper)
  (All (_ a) (-> (Zipper a) (Maybe (Zipper a))))
  (case (..left zipper)
    {.#None}
    (..up zipper)

    {.#Some backward}
    {.#Some (case (..down backward)
              {.#Some then}
              (..bottom then)

              {.#None}
              backward)}))

(template [<name> <move>]
  [(def: .public (<name> zipper)
     (All (_ a) (-> (Zipper a) (Maybe (Zipper a))))
     (case (<move> zipper)
       {.#None}
       {.#None}

       {.#Some @}
       (loop [@ @]
         (case (<move> @)
           {.#None}
           {.#Some @}

           {.#Some @}
           (again @)))))]

  [end ..next]
  [start ..previous]
  )

(def: .public (end? zipper)
  (All (_ a) (-> (Zipper a) Bit))
  (case (..end zipper)
    {.#None}
    true

    {.#Some _}
    false))

(def: .public (interpose value zipper)
  (All (_ a) (-> a (Zipper a) (Zipper a)))
  (revised [#node //.#children]
           (|>> (//.branch value) list)
           zipper))

(def: .public (adopt value zipper)
  (All (_ a) (-> a (Zipper a) (Zipper a)))
  (revised [#node //.#children]
           (|>> {.#Item (//.leaf value)})
           zipper))

(def: .public (remove zipper)
  (All (_ a) (-> (Zipper a) (Maybe (Zipper a))))
  (do maybe.monad
    [family (the #family zipper)]
    (case (the #lefts family)
      {.#End}
      (in (has [#node //.#children]
               (the #rights family)
               (the #parent family)))

      {.#Item next side}
      (in (|> zipper
              (has #family (|> family
                               (has #lefts side)
                               {.#Some}))
              (has #node next))))))

(template [<name> <side>]
  [(def: .public (<name> value zipper)
     (All (_ a) (-> a (Zipper a) (Maybe (Zipper a))))
     (case (the #family zipper)
       {.#None}
       {.#None}

       {.#Some family}
       {.#Some (has #family
                    {.#Some (revised <side> (|>> {.#Item (//.leaf value)}) family)}
                    zipper)}))]

  [insert_left  #lefts]
  [insert_right #rights]
  )

(implementation: .public functor
  (Functor Zipper)
  
  (def: (each f (^open "_[0]"))
    [#family (maybe#each (function (_ (^open "_[0]"))
                           [#parent (each f _#parent)
                            #lefts (list#each (//#each f) _#lefts)
                            #rights (list#each (//#each f) _#rights)])
                         _#family)
     #node (//#each f _#node)]))

(implementation: .public comonad
  (CoMonad Zipper)
  
  (def: &functor
    ..functor)

  (def: out
    (the [#node //.#value]))

  (def: (disjoint (^open "_[0]"))
    (let [tree_splitter (: (All (_ a) (-> (Tree a) (Tree (Zipper a))))
                           (function (tree_splitter tree)
                             [//.#value (..zipper tree)
                              //.#children (|> tree
                                               (the //.#children)
                                               (list#each tree_splitter))]))]
      [#family (maybe#each (function (_ (^open "_[0]"))
                             [..#parent (disjoint _#parent)
                              ..#lefts (list#each tree_splitter _#lefts)
                              ..#rights (list#each tree_splitter _#rights)])
                           _#family)
       #node (tree_splitter _#node)])))
