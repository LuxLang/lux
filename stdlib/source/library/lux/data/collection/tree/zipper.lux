... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    [comonad (.only CoMonad)]
    [equivalence (.only Equivalence)]
    ["[0]" monad]]
   [control
    ["[0]" maybe (.use "[1]#[0]" monad)]]
   ["[0]" error (.only)
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]
     ["[0]" stack (.use "[1]#[0]" functor monoid)]]]
   [macro
    ["[0]" template]]
   [aspect
    ["[0]" view]]]]
 ["[0]" // (.only Tree) (.use "[1]#[0]" functor)])

(every (Family Zipper it)
  (Record
   [#parent (Zipper it)
    #lefts (Stack (Tree it))
    #rights (Stack (Tree it))]))

... https://en.wikipedia.org/wiki/Zipper_(data_structure)
(every .public (Zipper it)
  (Record
   [#family (Maybe (Family Zipper it))
    #node (Tree it)]))

(the .public (equivalence super)
  (for_any (_ it)
    (-> (Equivalence it)
        (Equivalence (Zipper it))))
  (implementation
   (the (= expected actual)
     (let [== (all product.equivalence
                   (maybe.equivalence
                    (all product.equivalence
                         =
                         (stack.equivalence (//.equivalence super))
                         (stack.equivalence (//.equivalence super))))
                   (//.equivalence super))]
       (== expected actual)))))

(the .public (zipper tree)
  (for_any (_ it)
    (-> (Tree it)
        (Zipper it)))
  [#family {.#None}
   #node tree])

(the .public tree
  (for_any (_ it)
    (-> (Zipper it)
        (Tree it)))
  (its #node))

(the .public value
  (for_any (_ it)
    (-> (Zipper it)
        it))
  (its [#node //.#value]))

(the .public (set value zipper)
  (for_any (_ it)
    (-> it (Zipper it)
        (Zipper it)))
  (has [#node //.#value] value zipper))

(the .public (update transform zipper)
  (for_any (_ it)
    (-> (-> it it) (Zipper it)
        (Zipper it)))
  (revised [#node //.#value] transform zipper))

(the children
  (for_any (_ it)
    (-> (Zipper it)
        (List (Tree it))))
  (its [#node //.#children]))

(the .public leaf?
  (for_any (_ it)
    (-> (Zipper it)
        Bit))
  (|>> ..children
       list.empty?))

(the .public branch?
  (for_any (_ it)
    (-> (Zipper it)
        Bit))
  (|>> ..leaf?
       not))

(the .public (start? zipper)
  (for_any (_ it)
    (-> (Zipper it)
        Bit))
  (when (its #family zipper)
    {.#None}
    true

    _
    false))

(the .public (down zipper)
  (for_any (_ it)
    (-> (Zipper it)
        (Try (Zipper it))))
  (when (view.as list.stack (..children zipper))
    {.#Top head tail}
    {try.#Success
     [#family {.#Some [#parent (has [#node //.#children] (list) zipper)
                       #lefts {.#Empty}
                       #rights tail]}
      #node head]}

    {.#Empty}
    {try.#Failure error.not_valid}))

(the .public (up zipper)
  (for_any (_ it)
    (-> (Zipper it)
        (Try (Zipper it))))
  (<| (try.of_maybe error.not_valid)
      (monad.let maybe.monad
        [family (its #family zipper)]
        (pure (let [(open "_[0]") family]
                (has [#node //.#children]
                     (list#composite (list.reversed (view.of list.stack _#lefts))
                                     (view.of list.stack {.#Top (its #node zipper)
                                                                _#rights}))
                     _#parent))))))

(template.with [<one> <all> <side> <op_side>]
  [(the .public (<one> zipper)
     (for_any (_ it)
       (-> (Zipper it)
           (Try (Zipper it))))
     (when (its #family zipper)
       {.#Some family}
       (when (its <side> family)
         {.#Top next side'}
         {try.#Success
          (let [move (is (for_any (_ it)
                           (-> (Stack (Tree it)) (Zipper it)
                               (Change (Family Zipper it))))
                         (function (_ side' zipper)
                           (|>> (has <side> side')
                                (revised <op_side> (|>> {.#Top (its #node zipper)})))))]
            [#family {.#Some (move side' zipper family)}
             #node next])}

         {.#Empty}
         {try.#Failure error.not_valid})

       {.#None}
       {try.#Failure error.not_valid}))

   (the .public (<all> zipper)
     (for_any (_ it)
       (-> (Zipper it)
           (Try (Zipper it))))
     (when (its #family zipper)
       {.#Some family}
       (when (stack.reversed (its <side> family))
         {.#Top last prevs}
         {try.#Success
          (let [move (is (for_any (_ it)
                           (-> (Stack (Tree it)) (Zipper it)
                               (Change (Family Zipper it))))
                         (function (_ prevs zipper)
                           (|>> (has <side> {.#Empty})
                                (revised <op_side> (|>> {.#Top (its #node zipper)}
                                                        (stack#composite prevs))))))]
            [#family {.#Some (move prevs zipper family)}
             #node last])}

         {.#Empty}
         {try.#Failure error.not_valid})

       {.#None}
       {try.#Failure error.not_valid}))]

  [[right rightmost #rights #lefts]
   [left  leftmost  #lefts  #rights]])

(the .public (next zipper)
  (for_any (_ it)
    (-> (Zipper it)
        (Try (Zipper it))))
  (all try.or
       (..down zipper)
       (loop (again [@ zipper])
         (when (..right @)
           {try.#Success forward}
           {try.#Success forward}
           
           {try.#Failure _}
           (monad.let try.monad
             [@ (..up @)]
             (again @))))))

(the (minimum zipper)
  (for_any (_ it)
    (-> (Zipper it)
        (Zipper it)))
  (when (..right zipper)
    {try.#Success forward}
    (minimum forward)

    {try.#Failure _}
    (when (..down zipper)
      {try.#Success forward}
      (minimum forward)

      {try.#Failure _}
      zipper)))

(the .public (previous zipper)
  (for_any (_ it)
    (-> (Zipper it)
        (Try (Zipper it))))
  (when (..left zipper)
    {try.#Failure _}
    (..up zipper)

    {try.#Success backward}
    {try.#Success (when (..down backward)
                    {try.#Success then}
                    (..minimum then)

                    {try.#Failure _}
                    backward)}))

(template.with [<name> <move>]
  [(the .public (<name> zipper)
     (for_any (_ it)
       (-> (Zipper it)
           (Try (Zipper it))))
     (monad.let try.monad
       [@ (<move> zipper)]
       (loop (next [@ @])
         (when (<move> @)
           {try.#Failure error}
           (pure @)

           {try.#Success @}
           (next @)))))]

  [[end ..next]
   [start ..previous]])

(the .public (end? zipper)
  (for_any (_ it)
    (-> (Zipper it)
        Bit))
  (when (..end zipper)
    {try.#Failure error}
    true

    {try.#Success _}
    false))

(the .public (interpose value zipper)
  (for_any (_ it)
    (-> it (Zipper it)
        (Zipper it)))
  (revised [#node //.#children]
           (|>> (//.branch value) list)
           zipper))

(the .public (adopt value zipper)
  (for_any (_ it)
    (-> it (Zipper it)
        (Zipper it)))
  (revised [#node //.#children]
           (|>> (list#composite (list (//.leaf value))))
           zipper))

(the .public (remove zipper)
  (for_any (_ it)
    (-> (Zipper it)
        (Try (Zipper it))))
  (<| (try.of_maybe error.not_valid)
      (monad.let maybe.monad
        [family (its #family zipper)]
        (pure (when (its #lefts family)
                {.#Empty}
                (has [#node //.#children]
                     (view.of list.stack (its #rights family))
                     (its #parent family))

                {.#Top next side}
                (|> zipper
                    (has #family (|> family
                                     (has #lefts side)
                                     {.#Some}))
                    (has #node next)))))))

(template.with [<name> <side>]
  [(the .public (<name> value zipper)
     (for_any (_ it)
       (-> it (Zipper it)
           (Try (Zipper it))))
     (when (its #family zipper)
       {.#Some family}
       {try.#Success (has #family
                          {.#Some (revised <side> (|>> {.#Top (//.leaf value)}) family)}
                          zipper)}

       {.#None}
       {try.#Failure error.not_valid}))]

  [[insert_left  #lefts]
   [insert_right #rights]])

(the .public functor
  (Functor Zipper)
  (implementation
   (the (each f (open "_[0]"))
     [#family (maybe#each (function (_ (open "_[0]"))
                            [#parent (each f _#parent)
                             #lefts (stack#each (//#each f) _#lefts)
                             #rights (stack#each (//#each f) _#rights)])
                          _#family)
      #node (//#each f _#node)])))

(the .public comonad
  (CoMonad Zipper)
  (implementation
   (the functor
     ..functor)

   (the this
     (its [#node //.#value]))

   (the (disjoint (open "_[0]"))
     (let [tree_splitter (is (for_any (_ it)
                               (-> (Tree it)
                                   (Tree (Zipper it))))
                             (function (tree_splitter tree)
                               [//.#value (..zipper tree)
                                //.#children (|> tree
                                                 (its //.#children)
                                                 (list#each tree_splitter))]))]
       [#family (maybe#each (function (_ (open "_[0]"))
                              [..#parent (disjoint _#parent)
                               ..#lefts (stack#each tree_splitter _#lefts)
                               ..#rights (stack#each tree_splitter _#rights)])
                            _#family)
        #node (tree_splitter _#node)]))))
