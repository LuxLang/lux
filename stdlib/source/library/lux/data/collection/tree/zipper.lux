... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except left right)
   [abstract
    [functor (.only Functor)]
    [comonad (.only CoMonad)]
    [monad (.only do)]
    [equivalence (.only Equivalence)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" monad)]
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]]]
   [meta
    ["[0]" location]]]]
 ["[0]" // (.only Tree) (.use "[1]#[0]" functor)])

(every (Family Zipper of)
  (Record
   [#parent (Zipper of)
    #lefts (List (Tree of))
    #rights (List (Tree of))]))

... https://en.wikipedia.org/wiki/Zipper_(data_structure)
(every .public (Zipper of)
  (Record
   [#family (Maybe (Family Zipper of))
    #node (Tree of)]))

(the .public (equivalence super)
  (for_any (_ of)
    (-> (Equivalence of)
        (Equivalence (Zipper of))))
  (implementation
   (the (= expected actual)
     (let [== (all product.equivalence
                   (maybe.equivalence
                    (all product.equivalence
                         =
                         (list.equivalence (//.equivalence super))
                         (list.equivalence (//.equivalence super))))
                   (//.equivalence super))]
       (== expected actual)))))

(the .public (zipper tree)
  (for_any (_ of)
    (-> (Tree of)
        (Zipper of)))
  [#family {.#None}
   #node tree])

(the .public tree
  (for_any (_ of)
    (-> (Zipper of)
        (Tree of)))
  (its #node))

(the .public value
  (for_any (_ of)
    (-> (Zipper of)
        of))
  (its [#node //.#value]))

(the .public (set value zipper)
  (for_any (_ of)
    (-> of (Zipper of)
        (Zipper of)))
  (has [#node //.#value] value zipper))

(the .public (update transform zipper)
  (for_any (_ of)
    (-> (-> of of) (Zipper of)
        (Zipper of)))
  (revised [#node //.#value] transform zipper))

(the children
  (for_any (_ of)
    (-> (Zipper of)
        (List (Tree of))))
  (its [#node //.#children]))

(the .public leaf?
  (for_any (_ of)
    (-> (Zipper of)
        Bit))
  (|>> ..children
       list.empty?))

(the .public branch?
  (for_any (_ of)
    (-> (Zipper of)
        Bit))
  (|>> ..leaf?
       not))

(the .public (start? zipper)
  (for_any (_ of)
    (-> (Zipper of)
        Bit))
  (when (its #family zipper)
    {.#None}
    true

    _
    false))

(the .public cannot_move
  Error
  (location.with (location.here)
    "Cannot move."))

(the .public (down zipper)
  (for_any (_ of)
    (-> (Zipper of)
        (Try (Zipper of))))
  (when (..children zipper)
    {.#Item head tail}
    {try.#Success
     [#family {.#Some [#parent (has [#node //.#children] (list) zipper)
                       #lefts {.#End}
                       #rights tail]}
      #node head]}

    {.#End}
    {try.#Failure ..cannot_move}))

(the .public (up zipper)
  (for_any (_ of)
    (-> (Zipper of)
        (Try (Zipper of))))
  (<| (try.of_maybe ..cannot_move)
      (do maybe.monad
        [family (its #family zipper)]
        (in (let [(open "_[0]") family]
              (for .old
                   (revised #node (is (-> (Tree (parameter 0))
                                          (Tree (parameter 0)))
                                      (has //.#children (list#composite (list.reversed _#lefts)
                                                                        {.#Item (its #node zipper)
                                                                                _#rights})))
                            _#parent)
                   (has [#node //.#children]
                        (list#composite (list.reversed _#lefts)
                                        {.#Item (its #node zipper)
                                                _#rights})
                        _#parent)))))))

(with_template [<one> <all> <side> <op_side>]
  [(the .public (<one> zipper)
     (for_any (_ of)
       (-> (Zipper of)
           (Try (Zipper of))))
     (when (its #family zipper)
       {.#Some family}
       (when (its <side> family)
         {.#Item next side'}
         {try.#Success
          (for .old
               [#family {.#Some (|> family
                                    (has <side> side')
                                    (revised <op_side> (|>> {.#Item (its #node zipper)})))}
                #node next]
               (let [move (is (for_any (_ of) (-> (List (Tree of)) (Zipper of) (Family Zipper of) (Family Zipper of)))
                              (function (_ side' zipper)
                                (|>> (has <side> side')
                                     (revised <op_side> (|>> {.#Item (its #node zipper)})))))]
                 [#family {.#Some (move side' zipper family)}
                  #node next]))}

         {.#End}
         {try.#Failure ..cannot_move})

       {.#None}
       {try.#Failure ..cannot_move}))

   (the .public (<all> zipper)
     (for_any (_ of)
       (-> (Zipper of)
           (Try (Zipper of))))
     (when (its #family zipper)
       {.#Some family}
       (when (list.reversed (its <side> family))
         {.#Item last prevs}
         {try.#Success
          (for .old [#family {.#Some (|> family
                                         (has <side> {.#End})
                                         (revised <op_side> (|>> {.#Item (its #node zipper)}
                                                                 (list#composite prevs))))}
                     #node last]
               (let [move (is (for_any (_ of) (-> (List (Tree of)) (Zipper of) (Family Zipper of) (Family Zipper of)))
                              (function (_ prevs zipper)
                                (|>> (has <side> {.#End})
                                     (revised <op_side> (|>> {.#Item (its #node zipper)}
                                                             (list#composite prevs))))))]
                 [#family {.#Some (move prevs zipper family)}
                  #node last]))}

         {.#End}
         {try.#Failure ..cannot_move})

       {.#None}
       {try.#Failure ..cannot_move}))]

  [right rightmost #rights #lefts]
  [left  leftmost  #lefts  #rights]
  )

(the .public (next zipper)
  (for_any (_ of)
    (-> (Zipper of)
        (Try (Zipper of))))
  (all try.or
       (..down zipper)
       (loop (again [@ zipper])
         (when (..right @)
           {try.#Success forward}
           {try.#Success forward}
           
           {try.#Failure _}
           (do try.monad
             [@ (..up @)]
             (again @))))))

(the (bottom zipper)
  (for_any (_ of)
    (-> (Zipper of)
        (Zipper of)))
  (when (..right zipper)
    {try.#Success forward}
    (bottom forward)

    {try.#Failure _}
    (when (..down zipper)
      {try.#Success forward}
      (bottom forward)

      {try.#Failure _}
      zipper)))

(the .public (previous zipper)
  (for_any (_ of)
    (-> (Zipper of)
        (Try (Zipper of))))
  (when (..left zipper)
    {try.#Failure _}
    (..up zipper)

    {try.#Success backward}
    {try.#Success (when (..down backward)
                    {try.#Success then}
                    (..bottom then)

                    {try.#Failure _}
                    backward)}))

(with_template [<name> <move>]
  [(the .public (<name> zipper)
     (for_any (_ of)
       (-> (Zipper of)
           (Try (Zipper of))))
     (do try.monad
       [@ (<move> zipper)]
       (loop (next [@ @])
         (when (<move> @)
           {try.#Failure error}
           (in @)

           {try.#Success @}
           (next @)))))]

  [end ..next]
  [start ..previous]
  )

(the .public (end? zipper)
  (for_any (_ of)
    (-> (Zipper of)
        Bit))
  (when (..end zipper)
    {try.#Failure error}
    true

    {try.#Success _}
    false))

(the .public (interpose value zipper)
  (for_any (_ of)
    (-> of (Zipper of)
        (Zipper of)))
  (revised [#node //.#children]
           (|>> (//.branch value) list)
           zipper))

(the .public (adopt value zipper)
  (for_any (_ of)
    (-> of (Zipper of)
        (Zipper of)))
  (revised [#node //.#children]
           (|>> {.#Item (//.leaf value)})
           zipper))

(the .public cannot_remove
  Error
  (location.with (location.here)
    "Cannot remove."))

(the .public (remove zipper)
  (for_any (_ of)
    (-> (Zipper of)
        (Try (Zipper of))))
  (<| (try.of_maybe ..cannot_remove)
      (do maybe.monad
        [family (its #family zipper)]
        (in (when (its #lefts family)
              {.#End}
              (has [#node //.#children]
                   (its #rights family)
                   (its #parent family))

              {.#Item next side}
              (|> zipper
                  (has #family (|> family
                                   (has #lefts side)
                                   {.#Some}))
                  (has #node next)))))))

(the .public cannot_insert
  Error
  (location.with (location.here)
    "Cannot insert."))

(with_template [<name> <side>]
  [(the .public (<name> value zipper)
     (for_any (_ of)
       (-> of (Zipper of)
           (Try (Zipper of))))
     (when (its #family zipper)
       {.#Some family}
       {try.#Success (has #family
                          {.#Some (revised <side> (|>> {.#Item (//.leaf value)}) family)}
                          zipper)}

       {.#None}
       {try.#Failure ..cannot_insert}))]

  [insert_left  #lefts]
  [insert_right #rights]
  )

(the .public functor
  (Functor Zipper)
  (implementation
   (the (each f (open "_[0]"))
     [#family (maybe#each (function (_ (open "_[0]"))
                            [#parent (each f _#parent)
                             #lefts (list#each (//#each f) _#lefts)
                             #rights (list#each (//#each f) _#rights)])
                          _#family)
      #node (//#each f _#node)])))

(the .public comonad
  (CoMonad Zipper)
  (implementation
   (the functor
     ..functor)

   (the out
     (its [#node //.#value]))

   (the (disjoint (open "_[0]"))
     (let [tree_splitter (is (for_any (_ of)
                               (-> (Tree of)
                                   (Tree (Zipper of))))
                             (function (tree_splitter tree)
                               [//.#value (..zipper tree)
                                //.#children (|> tree
                                                 (its //.#children)
                                                 (list#each tree_splitter))]))]
       [#family (maybe#each (function (_ (open "_[0]"))
                              [..#parent (disjoint _#parent)
                               ..#lefts (list#each tree_splitter _#lefts)
                               ..#rights (list#each tree_splitter _#rights)])
                            _#family)
        #node (tree_splitter _#node)]))))
