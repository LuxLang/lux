(.module:
  [library
   [lux (#- list)
    [abstract
     [equivalence (#+ Equivalence)]
     [order (#+ Order)]]
    [data
     [collection
      ["." list ("#\." fold)]
      [dictionary
       ["/" ordered]]]]
    [type
     abstract]]])

(abstract: #export (Set a)
  (/.Dictionary a a)

  {#.doc (doc "A set with ordered entries.")}

  (def: #export empty
    (All [a] (-> (Order a) (Set a)))
    (|>> /.empty :abstraction))

  (def: #export (member? set elem)
    (All [a] (-> (Set a) a Bit))
    (/.key? (:representation set) elem))

  (template [<type> <name> <alias>]
    [(def: #export <name>
       (All [a] (-> (Set a) <type>))
       (|>> :representation <alias>))]

    [(Maybe a) min /.min]
    [(Maybe a) max /.max]
    [Nat size  /.size]
    [Bit empty? /.empty?]
    )

  (def: #export (add elem set)
    (All [a] (-> a (Set a) (Set a)))
    (|> set :representation (/.put elem elem) :abstraction))

  (def: #export (remove elem set)
    (All [a] (-> a (Set a) (Set a)))
    (|> set :representation (/.remove elem) :abstraction))

  (def: #export list
    (All [a] (-> (Set a) (List a)))
    (|>> :representation /.keys))

  (def: #export (of_list &order list)
    (All [a] (-> (Order a) (List a) (Set a)))
    (list\fold add (..empty &order) list))

  (def: #export (union left right)
    (All [a] (-> (Set a) (Set a) (Set a)))
    (list\fold ..add right (..list left)))

  (def: #export (intersection left right)
    (All [a] (-> (Set a) (Set a) (Set a)))
    (|> (..list right)
        (list.only (..member? left))
        (..of_list (get@ #/.&order (:representation right)))))

  (def: #export (difference param subject)
    (All [a] (-> (Set a) (Set a) (Set a)))
    (|> (..list subject)
        (list.only (|>> (..member? param) not))
        (..of_list (get@ #/.&order (:representation subject)))))

  (implementation: #export equivalence
    (All [a] (Equivalence (Set a)))
    
    (def: (= reference sample)
      (\ (list.equivalence (\ (:representation reference) &equivalence))
         = (..list reference) (..list sample))))
  )

(def: #export (sub? super sub)
  {#.doc (doc "Is 'sub' a sub-set of 'super'?")}
  (All [a] (-> (Set a) (Set a) Bit))
  (|> sub
      ..list
      (list.every? (..member? super))))

(def: #export (super? sub super)
  {#.doc (doc "Is 'super' a super-set of 'sub'?")}
  (All [a] (-> (Set a) (Set a) Bit))
  (sub? super sub))
