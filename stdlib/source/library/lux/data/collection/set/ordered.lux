... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except has list)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]]
   [control
    ["[0]" try (.only Try)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]
     [dictionary
      ["/" ordered]]]]
   [meta
    ["[0]" provenance]
    [type
     ["[0]" nominal]]
    [macro
     ["[0]" template]]]]])

(nominal.every .public (Set of)
  (/.Dictionary of of)

  (the .public empty
    (for_any (_ of)
      (-> (Order of)
          (Set of)))
    (|>> /.empty
         nominal.abstraction))

  (the .public (member? set elem)
    (for_any (_ of)
      (-> (Set of) of
          Bit))
    (/.key? (nominal.representation set) elem))

  (the .public it_is_empty
    Error
    (provenance.with (provenance.here)
      "Empty."))

  (template.with [<name> <alias>]
    [(the .public <name>
       (for_any (_ of)
         (-> (Set of)
             (Try of)))
       (|>> nominal.representation
            <alias>
            (try.as it_is_empty)))]

    [minor /.minor]
    [major /.major]
    )

  (template.with [<type> <name> <alias>]
    [(the .public <name>
       (for_any (_ of)
         (-> (Set of)
             <type>))
       (|>> nominal.representation
            <alias>))]

    [Natural size  /.size]
    [Bit empty? /.empty?]
    )

  (the .public (has elem set)
    (for_any (_ of)
      (-> of (Set of)
          (Set of)))
    (|> set
        nominal.representation
        (/.has elem elem)
        nominal.abstraction))

  (the .public (lacks elem set)
    (for_any (_ of)
      (-> of (Set of)
          (Set of)))
    (|> set
        nominal.representation
        (/.lacks elem)
        nominal.abstraction))

  (the .public list
    (for_any (_ of)
      (-> (Set of)
          (List of)))
    (|>> nominal.representation
         /.keys))

  (the .public (of_list order list)
    (for_any (_ of)
      (-> (Order of) (List of)
          (Set of)))
    (list#mix has (..empty order) list))

  (the .public (union left right)
    (for_any (_ of)
      (-> (Set of) (Set of)
          (Set of)))
    (list#mix ..has right (..list left)))

  (the .public (intersection left right)
    (for_any (_ of)
      (-> (Set of) (Set of)
          (Set of)))
    (|> (..list right)
        (list.only (..member? left))
        (..of_list (its /.#order (nominal.representation right)))))

  (the .public (difference param subject)
    (for_any (_ of)
      (-> (Set of) (Set of)
          (Set of)))
    (|> (..list subject)
        (list.only (|>> (..member? param) not))
        (..of_list (its /.#order (nominal.representation subject)))))

  (the .public equivalence
    (for_any (_ of)
      (Equivalence (Set of)))
    (implementation
     (the (= expected actual)
       (by (list.equivalence (by (nominal.representation expected) equivalence))
           = (..list expected) (..list actual)))))
  )

(the .public (sub? super sub)
  (for_any (_ of)
    (-> (Set of) (Set of)
        Bit))
  (|> sub
      ..list
      (list.every? (..member? super))))

(the .public (super? sub super)
  (for_any (_ of)
    (-> (Set of) (Set of)
        Bit))
  (sub? super sub))
