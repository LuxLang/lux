(.require
 [library
  [lux (.except has list)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]
     [dictionary
      ["/" ordered]]]]
   [meta
    [type
     ["[0]" primitive (.except def)]]]]])

(primitive.def .public (Set a)
  (/.Dictionary a a)

  (def .public empty
    (All (_ a) (-> (Order a) (Set a)))
    (|>> /.empty abstraction))

  (def .public (member? set elem)
    (All (_ a) (-> (Set a) a Bit))
    (/.key? (representation set) elem))

  (with_template [<type> <name> <alias>]
    [(def .public <name>
       (All (_ a) (-> (Set a) <type>))
       (|>> representation <alias>))]

    [(Maybe a) min /.min]
    [(Maybe a) max /.max]
    [Nat size  /.size]
    [Bit empty? /.empty?]
    )

  (def .public (has elem set)
    (All (_ a) (-> a (Set a) (Set a)))
    (|> set representation (/.has elem elem) abstraction))

  (def .public (lacks elem set)
    (All (_ a) (-> a (Set a) (Set a)))
    (|> set representation (/.lacks elem) abstraction))

  (def .public list
    (All (_ a) (-> (Set a) (List a)))
    (|>> representation /.keys))

  (def .public (of_list order list)
    (All (_ a) (-> (Order a) (List a) (Set a)))
    (list#mix has (..empty order) list))

  (def .public (union left right)
    (All (_ a) (-> (Set a) (Set a) (Set a)))
    (list#mix ..has right (..list left)))

  (def .public (intersection left right)
    (All (_ a) (-> (Set a) (Set a) (Set a)))
    (|> (..list right)
        (list.only (..member? left))
        (..of_list (the /.#order (representation right)))))

  (def .public (difference param subject)
    (All (_ a) (-> (Set a) (Set a) (Set a)))
    (|> (..list subject)
        (list.only (|>> (..member? param) not))
        (..of_list (the /.#order (representation subject)))))

  (def .public equivalence
    (All (_ a) (Equivalence (Set a)))
    (implementation
     (def (= reference sample)
       (at (list.equivalence (at (representation reference) equivalence))
           = (..list reference) (..list sample)))))
  )

(def .public (sub? super sub)
  (All (_ a) (-> (Set a) (Set a) Bit))
  (|> sub
      ..list
      (list.every? (..member? super))))

(def .public (super? sub super)
  (All (_ a) (-> (Set a) (Set a) Bit))
  (sub? super sub))
