... https://en.wikipedia.org/wiki/Multiset
(.using
 [library
  [lux {"-" has list}
   [abstract
    [equivalence {"+" Equivalence}]
    [hash {"+" Hash}]]
   [control
    ["[0]" function]
    ["[0]" maybe]]
   [macro
    ["^" pattern]]
   [math
    [number
     ["n" nat]]]
   [type
    ["[0]" primitive {"+" primitive: abstraction representation}]]]]
 ["[0]" //
  [//
   ["[0]" list ("[1]#[0]" mix monoid)]
   ["[0]" dictionary {"+" Dictionary}]]])

(primitive: .public (Set a)
  (Dictionary a Nat)

  (def: .public empty
    (All (_ a) (-> (Hash a) (Set a)))
    (|>> dictionary.empty abstraction))

  (def: .public size
    (All (_ a) (-> (Set a) Nat))
    (|>> representation dictionary.values (list#mix n.+ 0)))

  (def: .public (has multiplicity elem set)
    (All (_ a) (-> Nat a (Set a) (Set a)))
    (case multiplicity
      0 set
      _ (|> set
            representation
            (dictionary.revised' elem 0 (n.+ multiplicity))
            abstraction)))

  (def: .public (lacks multiplicity elem set)
    (All (_ a) (-> Nat a (Set a) (Set a)))
    (case multiplicity
      0 set
      _ (case (dictionary.value elem (representation set))
          {.#Some current}
          (abstraction
           (if (n.> multiplicity current)
             (dictionary.revised elem (n.- multiplicity) (representation set))
             (dictionary.lacks elem (representation set))))
          
          {.#None}
          set)))

  (def: .public (multiplicity set elem)
    (All (_ a) (-> (Set a) a Nat))
    (|> set representation (dictionary.value elem) (maybe.else 0)))

  (def: .public list
    (All (_ a) (-> (Set a) (List a)))
    (|>> representation
         dictionary.entries
         (list#mix (function (_ [elem multiplicity] output)
                     (list#composite (list.repeated multiplicity elem) output))
                   {.#End})))

  (template [<name> <composite>]
    [(def: .public (<name> parameter subject)
       (All (_ a) (-> (Set a) (Set a) (Set a)))
       (abstraction (dictionary.composite_with <composite> (representation parameter) (representation subject))))]

    [union n.max]
    [sum n.+]
    )

  (def: .public (intersection parameter subject)
    (All (_ a) (-> (Set a) (Set a) (Set a)))
    (let [subject (representation subject)]
      (list#mix (function (_ [elem multiplicity] output)
                  (..has (n.min (..multiplicity parameter elem)
                                multiplicity)
                         elem
                         output))
                (..empty (dictionary.key_hash subject))
                (dictionary.entries subject))))

  (def: .public (difference parameter subject)
    (All (_ a) (-> (Set a) (Set a) (Set a)))
    (|> parameter
        representation
        dictionary.entries
        (list#mix (function (_ [elem multiplicity] output)
                    (..lacks multiplicity elem output))
                  subject)))

  (def: .public (sub? reference subject)
    (All (_ a) (-> (Set a) (Set a) Bit))
    (|> subject
        representation
        dictionary.entries
        (list.every? (function (_ [elem multiplicity])
                       (|> elem
                           (..multiplicity reference)
                           (n.>= multiplicity))))))

  (def: .public (support set)
    (All (_ a) (-> (Set a) (//.Set a)))
    (let [(^.let set [hash _]) (representation set)]
      (|> set
          dictionary.keys
          (//.of_list hash))))

  (implementation: .public equivalence
    (All (_ a) (Equivalence (Set a)))
    
    (def: (= reference sample)
      (let [reference (representation reference)]
        (and (n.= (dictionary.size reference)
                  (dictionary.size (representation sample)))
             (|> reference
                 dictionary.entries
                 (list.every? (function (_ [elem multiplicity])
                                (|> elem
                                    (..multiplicity sample)
                                    (n.= multiplicity)))))))))

  (implementation: .public hash
    (All (_ a) (Hash (Set a)))
    
    (def: equivalence ..equivalence)
    
    (def: (hash set)
      (let [set (representation set)
            [hash _] set]
        (list#mix (function (_ [elem multiplicity] acc)
                    (|> elem (# hash hash) (n.* multiplicity) (n.+ acc)))
                  0
                  (dictionary.entries set)))))
  )

(def: .public (member? set elem)
  (All (_ a) (-> (Set a) a Bit))
  (|> elem (..multiplicity set) (n.> 0)))

(def: .public empty?
  (All (_ a) (-> (Set a) Bit))
  (|>> ..size (n.= 0)))

(def: .public (of_list hash subject)
  (All (_ a) (-> (Hash a) (List a) (Set a)))
  (list#mix (..has 1) (..empty hash) subject))

(def: .public (of_set subject)
  (All (_ a) (-> (//.Set a) (Set a)))
  (..of_list (//.member_hash subject)
             (//.list subject)))

(def: .public super?
  (All (_ a) (-> (Set a) (Set a) Bit))
  (function.flipped sub?))
