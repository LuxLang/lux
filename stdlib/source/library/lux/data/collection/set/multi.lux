... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Multiset
(.using
 [library
  [lux (.except has)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [error
    ["[0]" try]]
   ["[0]" function]
   [math
    [number
     ["n" natural]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [type
    ["[0]" nominal]]]]
 ["[0]" // (.only)
  [//
   ["[0]" list (.use "[1]#[0]" mix monoid)]
   ["[0]" dictionary (.only Dictionary)]]])

(nominal.every .public (Set it)
  (Dictionary it Natural)

  (the .public empty
    (for_any (_ it)
      (-> (Hash it)
          (Set it)))
    (|>> dictionary.empty
         nominal.abstraction))

  (the .public size
    (for_any (_ it)
      (-> (Set it)
          Natural))
    (|>> nominal.reification
         dictionary.values
         (list#mix n.+ 0)))

  (the .public (has multiplicity elem set)
    (for_any (_ it)
      (-> Natural it (Set it)
          (Set it)))
    (when multiplicity
      0 set
      _ (|> set
            nominal.reification
            (dictionary.revised' elem 0 (n.+ multiplicity))
            nominal.abstraction)))

  (the .public (lacks multiplicity elem set)
    (for_any (_ it)
      (-> Natural it (Set it)
          (Set it)))
    (when multiplicity
      0 set
      _ (when (dictionary.value elem (nominal.reification set))
          {try.#Success current}
          (nominal.abstraction
           (if (n.> multiplicity current)
             (dictionary.revised elem (n.- multiplicity) (nominal.reification set))
             (dictionary.lacks elem (nominal.reification set))))
          
          failure
          set)))

  (the .public (multiplicity set elem)
    (for_any (_ it)
      (-> (Set it) it
          Natural))
    (|> set
        nominal.reification
        (dictionary.value elem)
        (try.else 0)))

  (the .public as_list
    (for_any (_ it)
      (-> (Set it)
          (List it)))
    (|>> nominal.reification
         dictionary.entries
         (list#mix (function (_ [elem multiplicity] output)
                     (list#composite (list.repeated multiplicity elem) output))
                   list.empty)))

  (template.with [<name> <composite>]
    [(the .public (<name> parameter subject)
       (for_any (_ it)
         (-> (Set it) (Set it)
             (Set it)))
       (nominal.abstraction
        (dictionary.composite_with <composite>
                                   (nominal.reification parameter)
                                   (nominal.reification subject))))]

    [union n.major]
    [sum n.+]
    )

  (the .public (intersection parameter subject)
    (for_any (_ it)
      (-> (Set it) (Set it)
          (Set it)))
    (let [subject (nominal.reification subject)]
      (list#mix (function (_ [elem multiplicity] output)
                  (..has (n.minor (..multiplicity parameter elem)
                                  multiplicity)
                         elem
                         output))
                (..empty (dictionary.hash subject))
                (dictionary.entries subject))))

  (the .public (difference parameter subject)
    (for_any (_ it)
      (-> (Set it) (Set it)
          (Set it)))
    (|> parameter
        nominal.reification
        dictionary.entries
        (list#mix (function (_ [elem multiplicity] output)
                    (..lacks multiplicity elem output))
                  subject)))

  (the .public (sub? reference subject)
    (for_any (_ it)
      (-> (Set it) (Set it)
          Bit))
    (|> subject
        nominal.reification
        dictionary.entries
        (list.every? (function (_ [elem multiplicity])
                       (|> elem
                           (..multiplicity reference)
                           (n.>= multiplicity))))))

  (the .public (support set)
    (for_any (_ it)
      (-> (Set it)
          (//.Set it)))
    (let [(^.let set [hash _]) (nominal.reification set)]
      (|> set
          dictionary.keys
          (//.of_list hash))))

  (the .public equivalence
    (for_any (_ it)
      (Equivalence (Set it)))
    (implementation
     (the (= expected actual)
       (let [expected (nominal.reification expected)]
         (and (n.= (dictionary.size expected)
                   (dictionary.size (nominal.reification actual)))
              (|> expected
                  dictionary.entries
                  (list.every? (function (_ [elem multiplicity])
                                 (|> elem
                                     (..multiplicity actual)
                                     (n.= multiplicity))))))))))

  (the .public hash
    (for_any (_ it)
      (Hash (Set it)))
    (implementation
     (the equivalence ..equivalence)
     
     (the (hash set)
       (let [set (nominal.reification set)
             [hash _] set]
         (list#mix (function (_ [elem multiplicity] acc)
                     (|> elem (by hash hash) (n.* multiplicity) (n.+ acc)))
                   0
                   (dictionary.entries set))))))
  )

(the .public (member? set elem)
  (for_any (_ it)
    (-> (Set it) it
        Bit))
  (|> elem (..multiplicity set) (n.> 0)))

(the .public empty?
  (for_any (_ it)
    (-> (Set it)
        Bit))
  (|>> ..size (n.= 0)))

(the .public (of_list hash subject)
  (for_any (_ it)
    (-> (Hash it) (List it)
        (Set it)))
  (list#mix (..has 1) (..empty hash) subject))

(the .public (of_set subject)
  (for_any (_ it)
    (-> (//.Set it)
        (Set it)))
  (..of_list (//.hash_of_member subject)
             (//.as_list subject)))

(the .public super?
  (for_any (_ it)
    (-> (Set it) (Set it)
        Bit))
  (function.flipped sub?))
