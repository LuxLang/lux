... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Multiset
(.require
 [library
  [lux (.except has list)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [control
    ["[0]" function]
    ["[0]" try]]
   [math
    [number
     ["n" nat]]]
   [meta
    [macro
     ["^" pattern]]
    [type
     ["[0]" nominal]]]]]
 ["[0]" // (.only)
  [//
   ["[0]" list (.use "[1]#[0]" mix monoid)]
   ["[0]" dictionary (.only Dictionary)]]])

(nominal.every .public (Set of)
  (Dictionary of Nat)

  (the .public empty
    (All (_ of)
      (-> (Hash of)
          (Set of)))
    (|>> dictionary.empty
         nominal.abstraction))

  (the .public size
    (All (_ of)
      (-> (Set of)
          Nat))
    (|>> nominal.representation
         dictionary.values
         (list#mix n.+ 0)))

  (the .public (has multiplicity elem set)
    (All (_ of)
      (-> Nat of (Set of)
          (Set of)))
    (when multiplicity
      0 set
      _ (|> set
            nominal.representation
            (dictionary.revised' elem 0 (n.+ multiplicity))
            nominal.abstraction)))

  (the .public (lacks multiplicity elem set)
    (All (_ of)
      (-> Nat of (Set of)
          (Set of)))
    (when multiplicity
      0 set
      _ (when (dictionary.value elem (nominal.representation set))
          {try.#Success current}
          (nominal.abstraction
           (if (n.> multiplicity current)
             (dictionary.revised elem (n.- multiplicity) (nominal.representation set))
             (dictionary.lacks elem (nominal.representation set))))
          
          failure
          set)))

  (the .public (multiplicity set elem)
    (All (_ of)
      (-> (Set of) of
          Nat))
    (|> set
        nominal.representation
        (dictionary.value elem)
        (try.else 0)))

  (the .public list
    (All (_ of)
      (-> (Set of)
          (List of)))
    (|>> nominal.representation
         dictionary.entries
         (list#mix (function (_ [elem multiplicity] output)
                     (list#composite (list.repeated multiplicity elem) output))
                   {.#End})))

  (with_template [<name> <composite>]
    [(the .public (<name> parameter subject)
       (All (_ of)
         (-> (Set of) (Set of)
             (Set of)))
       (nominal.abstraction
        (dictionary.composite_with <composite>
                                   (nominal.representation parameter)
                                   (nominal.representation subject))))]

    [union n.max]
    [sum n.+]
    )

  (the .public (intersection parameter subject)
    (All (_ of)
      (-> (Set of) (Set of)
          (Set of)))
    (let [subject (nominal.representation subject)]
      (list#mix (function (_ [elem multiplicity] output)
                  (..has (n.min (..multiplicity parameter elem)
                                multiplicity)
                         elem
                         output))
                (..empty (dictionary.key_hash subject))
                (dictionary.entries subject))))

  (the .public (difference parameter subject)
    (All (_ of)
      (-> (Set of) (Set of)
          (Set of)))
    (|> parameter
        nominal.representation
        dictionary.entries
        (list#mix (function (_ [elem multiplicity] output)
                    (..lacks multiplicity elem output))
                  subject)))

  (the .public (sub? reference subject)
    (All (_ of)
      (-> (Set of) (Set of)
          Bit))
    (|> subject
        nominal.representation
        dictionary.entries
        (list.every? (function (_ [elem multiplicity])
                       (|> elem
                           (..multiplicity reference)
                           (n.>= multiplicity))))))

  (the .public (support set)
    (All (_ of)
      (-> (Set of)
          (//.Set of)))
    (let [(^.let set [hash _]) (nominal.representation set)]
      (|> set
          dictionary.keys
          (//.of_list hash))))

  (the .public equivalence
    (All (_ of)
      (Equivalence (Set of)))
    (implementation
     (the (= reference sample)
       (let [reference (nominal.representation reference)]
         (and (n.= (dictionary.size reference)
                   (dictionary.size (nominal.representation sample)))
              (|> reference
                  dictionary.entries
                  (list.every? (function (_ [elem multiplicity])
                                 (|> elem
                                     (..multiplicity sample)
                                     (n.= multiplicity))))))))))

  (the .public hash
    (All (_ of)
      (Hash (Set of)))
    (implementation
     (the equivalence ..equivalence)
     
     (the (hash set)
       (let [set (nominal.representation set)
             [hash _] set]
         (list#mix (function (_ [elem multiplicity] acc)
                     (|> elem (of hash hash) (n.* multiplicity) (n.+ acc)))
                   0
                   (dictionary.entries set))))))
  )

(the .public (member? set elem)
  (All (_ of)
    (-> (Set of) of
        Bit))
  (|> elem (..multiplicity set) (n.> 0)))

(the .public empty?
  (All (_ of)
    (-> (Set of)
        Bit))
  (|>> ..size (n.= 0)))

(the .public (of_list hash subject)
  (All (_ of)
    (-> (Hash of) (List of)
        (Set of)))
  (list#mix (..has 1) (..empty hash) subject))

(the .public (of_set subject)
  (All (_ of)
    (-> (//.Set of)
        (Set of)))
  (..of_list (//.member_hash subject)
             (//.list subject)))

(the .public super?
  (All (_ of)
    (-> (Set of) (Set of)
        Bit))
  (function.flipped sub?))
