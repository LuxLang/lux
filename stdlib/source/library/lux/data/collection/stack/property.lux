... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Stack has revised)
   [abstract
    [equivalence (.only Equivalence)]
    [monoid (.only Monoid)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" natural]]]
   [meta
    ["[0]" provenance]]]])

(the with_template' (.in_module# .prelude .with_template))

... https://en.wikipedia.org/wiki/Property_list
(every .public (Stack of)
  (.Stack [Text of]))

(the .public empty
  Stack
  {.#Empty})

(the .public size
  (for_any (_ of)
    (-> (Stack of)
        Natural))
  stack.size)

(the .public empty?
  (for_any (_ of)
    (-> (Stack of)
        Bit))
  (|>> ..size
       (n.= 0)))

(the .public unknown_value
  Error
  (provenance.with (provenance.here)
    "Unknown value."))

(the .public (value key properties)
  (for_any (_ of)
    (-> Text (Stack of)
        (Try of)))
  (when properties
    {.#Top [k' v'] properties'}
    (if (text.= key k')
      {try.#Success v'}
      (value key properties'))

    {.#Empty}
    {try.#Failure ..unknown_value}))

(with_template' [<name> <type> <access>]
  [(the .public <name>
     (for_any (_ of)
       (-> (Stack of)
           (.Stack <type>)))
     (stack#each <access>))]

  [keys   Text product.left]
  [values of   product.right]
  )

(the .public (contains? key properties)
  (for_any (_ of)
    (-> Text (Stack of)
        Bit))
  (when (..value key properties)
    {try.#Success _}
    true

    failure
    false))

(the .public (has key val properties)
  (for_any (_ of)
    (-> Text of (Stack of)
        (Stack of)))
  (when properties
    {.#Top [k' v'] properties'}
    (if (text.= key k')
      {.#Top [key val]
             properties'}
      {.#Top [k' v']
             (has key val properties')})

    end
    (stack [key val])))

(the .public (revised key f properties)
  (for_any (_ of)
    (-> Text (-> of of) (Stack of)
        (Stack of)))
  (when properties
    {.#Top [k' v'] properties'}
    (if (text.= key k')
      {.#Top [k' (f v')] properties'}
      {.#Top [k' v'] (revised key f properties')})

    end
    end))

(the .public (lacks key properties)
  (for_any (_ of)
    (-> Text (Stack of)
        (Stack of)))
  (when properties
    {.#Top [k' v'] properties'}
    (if (text.= key k')
      properties'
      {.#Top [k' v']
             (lacks key properties')})

    end
    end))

(the .public (equivalence (open "/#[0]"))
  (for_any (_ of)
    (-> (Equivalence of)
        (Equivalence (Stack of))))
  (implementation
   (the (= expected actual)
     (and (n.= (stack.size expected)
               (stack.size actual))
          (stack.every? (function (_ [key val])
                          (|> expected
                              (..value key)
                              (maybe#each (/#= val))
                              (maybe.else false)))
                        actual)))))

(the .public monoid
  (for_any (_ of)
    (Monoid (Stack of)))
  (implementation
   (the identity
     ..empty)

   (the (composite left right)
     (stack#mix (function (_ [key val] it)
                  (..has key val it))
                right
                left))))
