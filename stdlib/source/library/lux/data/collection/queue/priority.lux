... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    ["[0]" monad]]
   ["[0]" error (.only)
    ["[0]" try (.only Try)]]
   [data
    ["[0]" maybe]
    [collection
     ["[0]" tree
      ["[1]" finger (.only Tree)]]]]
   [math
    [number
     [/64
      ["n" natural (.use "[1]:[0]" interval)]]]]
   [type (.only by_example)
    ["[0]" nominal]]]])

(every .public Priority
  Natural)

(the .public maximum
  Priority
  n:maximum)

(the .public minimum
  Priority
  n:minimum)

(the builder
  (tree.builder n.maximum))

(the :@:
  (by_example [@]
    (is (tree.Builder @ Priority)
        ..builder)
    @))

(nominal.every .public (Queue it)
  (Maybe (Tree :@: Priority it))

  (the .public empty
    Queue
    (|> {.:None}
        nominal.of
        (as (-> (Queue Any) Queue))))

  (the .public (front queue)
    (for_any (_ it)
      (-> (Queue it)
          (Maybe it)))
    (<| (try.of_maybe error.empty)
        (monad.let maybe.monad
          [tree (nominal.as queue)]
          (tree.one (n.= (tree.tag tree))
                    tree))))

  (the .public (size queue)
    (for_any (_ it)
      (-> (Queue it)
          Natural))
    (when (nominal.as queue)
      {.:None}
      0

      {.:Some tree}
      (loop (of [node tree])
        (when (tree.root node)
          {0b _}
          1

          {1b [left right]}
          (n.+ (of left) (of right))))))

  (the .public (member? equivalence queue member)
    (for_any (_ it)
      (-> (Equivalence it) (Queue it) it
          Bit))
    (when (nominal.as queue)
      {.:None}
      false

      {.:Some tree}
      (loop (of [node tree])
        (when (tree.root node)
          {0b reference}
          (by equivalence = reference member)

          {1b [left right]}
          (or (of left)
              (of right))))))

  (the .public (next queue)
    (for_any (_ it)
      (-> (Queue it)
          (Queue it)))
    (nominal.of
     (monad.let maybe.monad
       [tree (nominal.as queue)
        .let [highest_priority (tree.tag tree)]]
       (loop (of [node tree])
         (when (tree.root node)
           {0b reference}
           (if (n.= highest_priority (tree.tag node))
               {.:None}
               {.:Some node})

           {1b left right}
           (if (n.= highest_priority (tree.tag left))
               (when (of left)
                 {.:None}
                 {.:Some right}

                 {.:Some =left}
                 {.:Some (by ..builder branch =left right)})
               (when (of right)
                 {.:None}
                 {.:Some left}

                 {.:Some =right}
                 {.:Some (by ..builder branch left =right)})))))))

  (the .public (end priority value queue)
    (for_any (_ it)
      (-> Priority it (Queue it)
          (Queue it)))
    (let [addition (by ..builder leaf priority value)]
      (nominal.of
       (when (nominal.as queue)
         {.:None}
         {.:Some addition}

         {.:Some tree}
         {.:Some (by ..builder branch tree addition)}))))
  )

(the .public empty?
  (for_any (_ it)
    (-> (Queue it)
        Bit))
  (|>> ..size
       (n.= 0)))
