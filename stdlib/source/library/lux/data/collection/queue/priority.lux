(.module:
  [library
   [lux #*
    [abstract
     [equivalence (#+ Equivalence)]
     [monad (#+ do)]]
    [data
     ["." maybe]
     [collection
      ["." tree #_
       ["#" finger (#+ Tree)]]]]
    [math
     [number
      ["n" nat ("#\." interval)]]]
    [type (#+ :by_example)
     [abstract (#+ abstract: :abstraction :representation)]]]])

(type: .public Priority
  Nat)

(def: .public max
  Priority
  n\top)

(def: .public min
  Priority
  n\bottom)

(def: builder
  (tree.builder n.maximum))

(def: :@:
  (:by_example [@]
               (tree.Builder @ Priority)
               ..builder
               
               @))

(abstract: .public (Queue a)
  {}
  
  (Maybe (Tree :@: Priority a))

  (def: .public empty
    Queue
    (:abstraction #.None))

  (def: .public (peek queue)
    (All [a] (-> (Queue a) (Maybe a)))
    (do maybe.monad
      [tree (:representation queue)]
      (tree.one (n.= (tree.tag tree))
                tree)))

  (def: .public (size queue)
    (All [a] (-> (Queue a) Nat))
    (case (:representation queue)
      #.None
      0

      (#.Some tree)
      (loop [node tree]
        (case (tree.root node)
          (0 #0 _)
          1

          (0 #1 [left right])
          (n.+ (recur left) (recur right))))))

  (def: .public (member? equivalence queue member)
    (All [a] (-> (Equivalence a) (Queue a) a Bit))
    (case (:representation queue)
      #.None
      false

      (#.Some tree)
      (loop [node tree]
        (case (tree.root node)
          (0 #0 reference)
          (\ equivalence = reference member)

          (0 #1 [left right])
          (or (recur left)
              (recur right))))))

  (def: .public (pop queue)
    (All [a] (-> (Queue a) (Queue a)))
    (:abstraction
     (do maybe.monad
       [tree (:representation queue)
        .let [highest_priority (tree.tag tree)]]
       (loop [node tree]
         (case (tree.root node)
           (0 #0 reference)
           (if (n.= highest_priority (tree.tag node))
             #.None
             (#.Some node))

           (0 #1 left right)
           (if (n.= highest_priority (tree.tag left))
             (case (recur left)
               #.None
               (#.Some right)

               (#.Some =left)
               (#.Some (\ ..builder branch =left right)))
             (case (recur right)
               #.None
               (#.Some left)

               (#.Some =right)
               (#.Some (\ ..builder branch left =right)))))))))

  (def: .public (push priority value queue)
    (All [a] (-> Priority a (Queue a) (Queue a)))
    (let [addition (\ ..builder leaf priority value)]
      (:abstraction
       (case (:representation queue)
         #.None
         (#.Some addition)

         (#.Some tree)
         (#.Some (\ ..builder branch tree addition))))))
  )

(def: .public empty?
  (All [a] (-> (Queue a) Bit))
  (|>> ..size (n.= 0)))
