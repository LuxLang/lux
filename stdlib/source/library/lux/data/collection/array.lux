... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monoid (.only Monoid)]
    [functor (.only Functor)]
    [equality (.only Equality)]]
   ["[0]" error (.only)
    ["[0]" try (.only Try)]]
   [function
    [predicate (.only Predicate)]
    [poly
     [type
      [mix (.only Mix)]]]]
   [data
    [collection
     ["[0]" list (.use "[1]:[0]" functor)]]]
   [math
    [number
     ["[0]" /64]]]
   [meta
    ["[0]" provenance]]]]
 ["/" \\unsafe])

(every .public Index
  /.Index)

(the .public array
  (let [natural (is (-> Natural
                        Code)
                    (|>> [provenance.dummy]
                         {.:Natural}))]
    (macro (_ elements lux)
      {try.:Success [lux
                     (list (` (|> (/.empty (, (natural (list.size elements))))
                                  (,* (list:each (function (_ [index value])
                                                   (` (/.has! (, (natural index))
                                                              (, value))))
                                                 (list.enumeration elements))))))]})))

(the .public limit
  Natural
  (-- (/64.<< 31 1)))

(the .public empty
  (-> Natural
      Array)
  (|>> /.empty))

(the .public size
  (for_any (_ to_write to_read)
    (-> (Array' to_write to_read)
        Natural))
  (|>> /.size))

(the .public (item index array)
  (for_any (_ to_write to_read)
    (-> Index (Array' to_write to_read)
        (Try to_read)))
  (if (/.lacks? index array)
      {try.:Failure error.not_valid}
      {try.:Success (/.item index array)}))

(the .public (has! index value array)
  (for_any (_ to_write to_read)
    (-> Index to_write
        (Change (Array' to_write to_read))))
  (/.has! index value array))

(the .public (lacks! index array)
  (for_any (_ to_write to_read)
    (-> Index
        (Change (Array' to_write to_read))))
  (/.lacks! index array))

(the .public (lacks? index array)
  (for_any (_ to_write to_read)
    (-> Index
        (Predicate (Array' to_write to_read))))
  (/.lacks? index array))

(the .public (has? index array)
  (for_any (_ to_write to_read)
    (-> Index
        (Predicate (Array' to_write to_read))))
  (/.has? index array))

(the .public (revised! index $ array)
  (for_any (_ to_write to_read)
    (-> Index (-> to_read to_write)
        (Change (Array' to_write to_read))))
  (/.revised! index $ array))

(the .public (upsert! index default transform array)
  (for_any (_ to_write to_read)
    (-> Index to_read (-> to_read to_write)
        (Change (Array' to_write to_read))))
  (/.upsert! index default transform array))

(the .public (copy! length src_start src_array dest_start dest_array)
  (for_any (_ to_write to_read any)
    (-> Natural Index (Array' any to_write) Index
        (Change (Array' to_write to_read))))
  (/.copy! length src_start src_array dest_start dest_array))

(the .public occupancy
  (for_any (_ to_write to_read)
    (-> (Array' to_write to_read)
        Natural))
  (|>> /.occupancy))

(the .public vacancy
  (for_any (_ to_write to_read)
    (-> (Array' to_write to_read)
        Natural))
  (|>> /.vacancy))

(the .public (only! ? it)
  (for_any (_ to_write to_read)
    (-> (Predicate to_read)
        (Change (Array' to_write to_read))))
  (/.only! ? it))

(the .public (example ? it)
  (for_any (_ to_write to_read)
    (-> (Predicate to_read) (Array' to_write to_read)
        (Try to_read)))
  (/.example ? it))

(the .public (example' ? it)
  (for_any (_ to_write to_read)
    (-> (-> Index (Predicate to_read)) (Array' to_write to_read)
        (Try [Index to_read])))
  (/.example' ? it))

(the .public clone
  (for_any (_ it)
    (Change (Array it)))
  (|>> /.clone))

(the .public (equality //)
  (for_any (_ to_read)
    (-> (Equality to_read)
        (Equality (for_some (_ to_write)
                    (Array' to_write to_read)))))
  (implementation
   (the (= left/* right/*)
     (/.= // left/* right/*))))

(the .public monoid
  (for_any (_ it)
    (Monoid (Array it)))
  (implementation
   (the identity (/.empty 0))

   (the (composite left/* right/*)
     (/.composite left/* right/*))))

(the .public mix
  (for_any (_ to_write)
    (Mix (Array' to_write)))
  (implementation
   (the (mix $ init it)
     (/.mix (function (_ index partial total)
              ($ partial total))
            init
            it))))

(the .public functor
  (Functor Array)
  (implementation
   (the (each $ input)
     (/.each $ input))))

(the with_template (.in_module# .prelude .with_template))

(with_template [<safe> <unsafe>]
  [(the .public (<safe> ? it)
     (for_any (_ to_write to_read)
       (-> (Predicate to_read)
           (Predicate (Array' to_write to_read))))
     (<unsafe> ? it))]

  [[every? /.every?]
   [any? /.any?]]
  )

(the .public (one ? it)
  (for_any (_ to_write to_read to_read')
    (-> (-> to_read (Maybe to_read')) (Array' to_write to_read)
        (Try to_read')))
  (/.one ? it))
