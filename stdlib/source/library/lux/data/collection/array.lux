(.using
 [library
  [lux {"-" list}
   [abstract
    [monoid {"+" Monoid}]
    [functor {"+" Functor}]
    [equivalence {"+" Equivalence}]
    [mix {"+" Mix}]
    [predicate {"+" Predicate}]]
   [data
    [collection
     ["[0]" list]]]]]
 ["!" \\unsafe])

(def: .public type_name
  !.type)

(type: .public Array
  !.Array)

(def: .public empty
  (All (_ a) (-> Nat (Array a)))
  (|>> !.empty))

(def: .public size
  (All (_ a) (-> (Array a) Nat))
  (|>> !.size))

(def: .public (read! index array)
  (All (_ a)
    (-> Nat (Array a) (Maybe a)))
  (if (!.lacks? index array)
    {.#None}
    {.#Some (!.item index array)}))

(def: .public (write! index value array)
  (All (_ a)
    (-> Nat a (Array a) (Array a)))
  (!.has! index value array))

(def: .public (delete! index array)
  (All (_ a)
    (-> Nat (Array a) (Array a)))
  (!.lacks! index array))

(def: .public (lacks? index array)
  (All (_ a)
    (-> Nat (Array a) Bit))
  (!.lacks? index array))

(def: .public (contains? index array)
  (All (_ a)
    (-> Nat (Array a) Bit))
  (not (!.lacks? index array)))

(def: .public (update! index $ array)
  (All (_ a)
    (-> Nat (-> a a) (Array a) (Array a)))
  (!.revised! index $ array))

(def: .public (upsert! index default transform array)
  (All (_ a)
    (-> Nat a (-> a a) (Array a) (Array a)))
  (!.upsert! index default transform array))

(def: .public (copy! length src_start src_array dest_start dest_array)
  (All (_ a)
    (-> Nat Nat (Array a) Nat (Array a)
        (Array a)))
  (!.copy! length src_start src_array dest_start dest_array))

(def: .public occupancy
  (All (_ a) (-> (Array a) Nat))
  (|>> !.occupancy))

(def: .public vacancy
  (All (_ a) (-> (Array a) Nat))
  (|>> !.vacancy))

(def: .public (filter! ? it)
  (All (_ a)
    (-> (Predicate a) (Array a) (Array a)))
  (!.only! ? it))

(def: .public (example ? it)
  (All (_ a)
    (-> (Predicate a) (Array a) (Maybe a)))
  (!.example ? it))

(def: .public (example+ ? it)
  (All (_ a)
    (-> (-> Nat a Bit) (Array a) (Maybe [Nat a])))
  (!.example' ? it))

(def: .public clone
  (All (_ a) (-> (Array a) (Array a)))
  (|>> !.clone))

(def: .public of_list
  (All (_ a) (-> (List a) (Array a)))
  (|>> !.of_list))

(def: .public (list default array)
  (All (_ a) (-> (Maybe a) (Array a) (List a)))
  (!.list default array))

(implementation: .public (equivalence //)
  (All (_ a) (-> (Equivalence a) (Equivalence (Array a))))
  
  (def: (= left/* right/*)
    (!.= // left/* right/*)))

(implementation: .public monoid
  (All (_ a) (Monoid (Array a)))
  
  (def: identity (!.empty 0))

  (def: (composite left/* right/*)
    (!.composite left/* right/*)))

(implementation: .public mix
  (Mix Array)
  
  (def: (mix $ init it)
    (!.mix (function (_ index partial total)
             ($ partial total))
           init
           it)))

(implementation: .public functor
  (Functor Array)
  
  (def: (each $ input)
    (!.each $ input)))

(def: .public (every? ? it)
  (All (_ a)
    (-> (Predicate a) (Predicate (Array a))))
  (!.every? ? it))

(def: .public (any? ? it)
  (All (_ a)
    (-> (Predicate a) (Predicate (Array a))))
  (!.any? ? it))

(def: .public (one ? it)
  (All (_ a b)
    (-> (-> a (Maybe b)) (Array a) (Maybe b)))
  (!.one ? it))
