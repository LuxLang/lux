(.using
 [library
  [lux (.except list)
   [abstract
    [monoid (.only Monoid)]
    [functor (.only Functor)]
    [equivalence (.only Equivalence)]
    [mix (.only Mix)]
    [predicate (.only Predicate)]]
   [data
    [collection
     ["[0]" list]]]
   [type
    [variance (.only)]]]]
 ["!" \\unsafe])

(def: .public type_name
  Text
  !.type)

(type: .public Array'
  !.Array')

(type: .public Array
  !.Array)

(def: .public empty
  (All (_ a) (-> Nat (Array a)))
  (|>> !.empty))

(def: .public size
  (All (_ r w) (-> (Array' r w) Nat))
  (|>> !.size))

(def: .public (item index array)
  (All (_ r w)
    (-> Nat (Array' r w) (Maybe r)))
  (if (!.lacks? index array)
    {.#None}
    {.#Some (!.item index array)}))

(def: .public (has! index value array)
  (All (_ r w)
    (-> Nat w (Array' r w) (Array' r w)))
  (!.has! index value array))

(def: .public (lacks! index array)
  (All (_ r w)
    (-> Nat (Array' r w) (Array' r w)))
  (!.lacks! index array))

(def: .public (lacks? index array)
  (All (_ r w)
    (-> Nat (Array' r w) Bit))
  (!.lacks? index array))

(def: .public (has? index array)
  (All (_ r w)
    (-> Nat (Array' r w) Bit))
  (!.has? index array))

(def: .public (revised! index $ array)
  (All (_ r w)
    (-> Nat (-> r w) (Array' r w) (Array' r w)))
  (!.revised! index $ array))

(def: .public (upsert! index default transform array)
  (All (_ r w)
    (-> Nat r (-> r w) (Array' r w) (Array' r w)))
  (!.upsert! index default transform array))

(def: .public (copy! length src_start src_array dest_start dest_array)
  (All (_ r w)
    (-> Nat Nat (Array' w Nothing) Nat (Array' r w)
        (Array' r w)))
  (!.copy! length src_start src_array dest_start dest_array))

(def: .public occupancy
  (All (_ r w) (-> (Array' r w) Nat))
  (|>> !.occupancy))

(def: .public vacancy
  (All (_ r w) (-> (Array' r w) Nat))
  (|>> !.vacancy))

(def: .public (only! ? it)
  (All (_ r w)
    (-> (Predicate r) (Array' r w) (Array' r w)))
  (!.only! ? it))

(def: .public (example ? it)
  (All (_ r w)
    (-> (Predicate r) (Array' r w) (Maybe r)))
  (!.example ? it))

(def: .public (example' ? it)
  (All (_ r w)
    (-> (-> Nat r Bit) (Array' r w) (Maybe [Nat r])))
  (!.example' ? it))

(def: .public clone
  (All (_ a) (-> (Array a) (Array a)))
  (|>> !.clone))

(def: .public of_list
  (All (_ a) (-> (List a) (Array a)))
  (|>> !.of_list))

(def: .public (list default array)
  (All (_ r w) (-> (Maybe r) (Array' r w) (List r)))
  (!.list default array))

(def: .public (equivalence //)
  (All (_ r) (-> (Equivalence r) (Equivalence (Ex (_ w) (Array' r w)))))
  (implementation
   (def: (= left/* right/*)
     (!.= // left/* right/*))))

(def: .public monoid
  (All (_ a) (Monoid (Array a)))
  (implementation
   (def: identity (!.empty 0))

   (def: (composite left/* right/*)
     (!.composite left/* right/*))))

(def: .public mix
  (Mix (All (_ r) (Array' r Nothing)))
  (implementation
   (def: (mix $ init it)
     (!.mix (function (_ index partial total)
              ($ partial total))
            init
            it))))

(def: .public functor
  (Functor Array)
  (implementation
   (def: (each $ input)
     (!.each $ input))))

(with_template [<safe> <unsafe>]
  [(def: .public (<safe> ? it)
     (All (_ r w)
       (-> (Predicate r) (Predicate (Array' r w))))
     (<unsafe> ? it))]

  [every? !.every?]
  [any? !.any?]
  )

(def: .public (one ? it)
  (All (_ r r' w)
    (-> (-> r (Maybe r')) (Array' r w) (Maybe r')))
  (!.one ? it))
