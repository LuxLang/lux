... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except list)
   [abstract
    [monoid (.only Monoid)]
    [functor (.only Functor)]
    [equivalence (.only Equivalence)]]
   [algorithm
    [mix (.only Mix)]]
   [control
    ["[0]" try (.only Try)]
    [function
     [predicate (.only Predicate)]]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [meta
    ["[0]" location]
    [type
     [variance (.only)]]]]]
 ["!" \\unsafe])

(the .public nominal
  Text
  !.nominal)

(every .public Array'
  !.Array')

(every .public Array
  !.Array)

(the .public array
  (let [nat (is (-> Nat
                    Code)
                (|>> {.#Nat}
                     [location.dummy]))]
    (macro (_ elements lux)
      {try.#Success [lux
                     (.list (` (|> (!.empty (, (nat (list.size elements))))
                                   (,* (list#each (function (_ [index value])
                                                    (` (!.has! (, (nat index))
                                                               (, value))))
                                                  (list.enumeration elements))))))]})))

(the .public empty
  (for_any (_ of)
    (-> Nat
        (Array of)))
  (|>> !.empty))

(the .public size
  (for_any (_ read write)
    (-> (Array' read write)
        Nat))
  (|>> !.size))

(the .public index_out_of_bounds
  (location.with (location.here)
    "Index out of bounds."))

(the .public (item index array)
  (for_any (_ read write)
    (-> Nat (Array' read write)
        (Try read)))
  (if (!.lacks? index array)
    {try.#Failure ..index_out_of_bounds}
    {try.#Success (!.item index array)}))

(the .public (has! index value array)
  (for_any (_ read write)
    (-> Nat write (Array' read write)
        (Array' read write)))
  (!.has! index value array))

(the .public (lacks! index array)
  (for_any (_ read write)
    (-> Nat (Array' read write)
        (Array' read write)))
  (!.lacks! index array))

(the .public (lacks? index array)
  (for_any (_ read write)
    (-> Nat (Array' read write)
        Bit))
  (!.lacks? index array))

(the .public (has? index array)
  (for_any (_ read write)
    (-> Nat (Array' read write)
        Bit))
  (!.has? index array))

(the .public (revised! index $ array)
  (for_any (_ read write)
    (-> Nat (-> read write) (Array' read write)
        (Array' read write)))
  (!.revised! index $ array))

(the .public (upsert! index default transform array)
  (for_any (_ read write)
    (-> Nat read (-> read write) (Array' read write)
        (Array' read write)))
  (!.upsert! index default transform array))

(the .public (copy! length src_start src_array dest_start dest_array)
  (for_any (_ read write)
    (-> Nat Nat (Array' write Nothing) Nat (Array' read write)
        (Array' read write)))
  (!.copy! length src_start src_array dest_start dest_array))

(the .public occupancy
  (for_any (_ read write)
    (-> (Array' read write)
        Nat))
  (|>> !.occupancy))

(the .public vacancy
  (for_any (_ read write)
    (-> (Array' read write)
        Nat))
  (|>> !.vacancy))

(the .public (only! ? it)
  (for_any (_ read write)
    (-> (Predicate read) (Array' read write)
        (Array' read write)))
  (!.only! ? it))

(the .public (example ? it)
  (for_any (_ read write)
    (-> (Predicate read) (Array' read write)
        (Try read)))
  (!.example ? it))

(the .public (example' ? it)
  (for_any (_ read write)
    (-> (-> Nat read Bit) (Array' read write)
        (Try [Nat read])))
  (!.example' ? it))

(the .public clone
  (for_any (_ of)
    (-> (Array of)
        (Array of)))
  (|>> !.clone))

(the .public of_list
  (for_any (_ of)
    (-> (List of)
        (Array of)))
  (|>> !.of_list))

(the .public (list default array)
  (for_any (_ read write)
    (-> (Maybe read) (Array' read write)
        (List read)))
  (!.list default array))

(the .public (equivalence //)
  (for_any (_ read)
    (-> (Equivalence read)
        (Equivalence (for_some (_ write)
                       (Array' read write)))))
  (implementation
   (the (= left/* right/*)
     (!.= // left/* right/*))))

(the .public monoid
  (for_any (_ of)
    (Monoid (Array of)))
  (implementation
   (the identity (!.empty 0))

   (the (composite left/* right/*)
     (!.composite left/* right/*))))

(the .public mix
  (Mix (for_any (_ read)
         (Array' read Nothing)))
  (implementation
   (the (mix $ init it)
     (!.mix (function (_ index partial total)
              ($ partial total))
            init
            it))))

(the .public functor
  (Functor Array)
  (implementation
   (the (each $ input)
     (!.each $ input))))

(with_template [<safe> <unsafe>]
  [(the .public (<safe> ? it)
     (for_any (_ read write)
       (-> (Predicate read)
           (Predicate (Array' read write))))
     (<unsafe> ? it))]

  [every? !.every?]
  [any? !.any?]
  )

(the .public (one ? it)
  (for_any (_ read read' write)
    (-> (-> read (Maybe read')) (Array' read write)
        (Try read')))
  (!.one ? it))
