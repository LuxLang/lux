(.using
 [library
  [lux {"-" list}
   ["@" target]
   [abstract
    [monoid {"+" Monoid}]
    [functor {"+" Functor}]
    [equivalence {"+" Equivalence}]
    [mix {"+" Mix}]
    [predicate {"+" Predicate}]]
   [control
    ["[0]" maybe]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list ("[1]#[0]" mix)]]]
   [math
    [number
     ["n" nat]]]]])

(def: .public type_name
  "#Array")

(type: .public (Array a)
  {.#Primitive ..type_name {.#Item a {.#End}}})

(with_expansions [<index_type> (Primitive "java.lang.Long")
                  <elem_type> (Primitive "java.lang.Object")
                  <array_type> (type (Array <elem_type>))]
  (for [@.jvm
        (template: (!int value)
          [(|> value
               (:as <index_type>)
               "jvm object cast"
               "jvm conversion long-to-int")])]
       (as_is))
  
  (def: .public (empty size)
    (All (_ a) (-> Nat (Array a)))
    (for [@.old
          (:expected ("jvm anewarray" "(java.lang.Object )" size))

          @.jvm
          (|> size
              !int
              "jvm array new object"
              (: <array_type>)
              :expected)

          @.js ("js array new" size)
          @.python ("python array new" size)
          @.lua ("lua array new" size)
          @.ruby ("ruby array new" size)
          @.php ("php array new" size)
          @.scheme ("scheme array new" size)]))

  (def: .public (size array)
    (All (_ a) (-> (Array a) Nat))
    (for [@.old
          ("jvm arraylength" array)

          @.jvm
          (|> array
              (:as <array_type>)
              "jvm array length object"
              "jvm conversion int-to-long"
              "jvm object cast"
              (: <index_type>)
              (:as Nat))

          @.js ("js array length" array)
          @.python ("python array length" array)
          @.lua ("lua array length" array)
          @.ruby ("ruby array length" array)
          @.php ("php array length" array)
          @.scheme ("scheme array length" array)]))

  (template: (!read! <read!> <null?>)
    [(let [output (<read!> index array)]
       (if (<null?> output)
         {.#None}
         {.#Some output}))])

  (def: .public (read! index array)
    (All (_ a)
      (-> Nat (Array a) (Maybe a)))
    (if (n.< (size array) index)
      (for [@.old
            (let [value ("jvm aaload" array index)]
              (if ("jvm object null?" value)
                {.#None}
                {.#Some value}))

            @.jvm
            (let [value (|> array
                            (:as <array_type>)
                            ("jvm array read object" (!int index)))]
              (if ("jvm object null?" value)
                {.#None}
                {.#Some (:expected value)}))

            @.js (!read! "js array read" "js object undefined?")
            @.python (!read! "python array read" "python object none?")
            @.lua (!read! "lua array read" "lua object nil?")
            @.ruby (!read! "ruby array read" "ruby object nil?")
            @.php (!read! "php array read" "php object null?")
            @.scheme (!read! "scheme array read" "scheme object nil?")])
      {.#None}))

  (def: .public (write! index value array)
    (All (_ a)
      (-> Nat a (Array a) (Array a)))
    (for [@.old
          ("jvm aastore" array index value)

          @.jvm
          (|> array
              (:as <array_type>)
              ("jvm array write object" (!int index) (:as <elem_type> value))
              :expected)

          @.js ("js array write" index value array)
          @.python ("python array write" index value array)
          @.lua ("lua array write" index value array)
          @.ruby ("ruby array write" index value array)
          @.php ("php array write" index value array)
          @.scheme ("scheme array write" index value array)]))

  (def: .public (delete! index array)
    (All (_ a)
      (-> Nat (Array a) (Array a)))
    (if (n.< (size array) index)
      (for [@.old
            (write! index (:expected ("jvm object null")) array)

            @.jvm
            (write! index (:expected (: <elem_type> ("jvm object null"))) array)

            @.js ("js array delete" index array)
            @.python ("python array delete" index array)
            @.lua ("lua array delete" index array)
            @.ruby ("ruby array delete" index array)
            @.php ("php array delete" index array)
            @.scheme ("scheme array delete" index array)])
      array))
  )

(def: .public (contains? index array)
  (All (_ a)
    (-> Nat (Array a) Bit))
  (case (..read! index array)
    {.#Some _}
    true

    _
    false))

(def: .public (update! index transform array)
  (All (_ a)
    (-> Nat (-> a a) (Array a) (Array a)))
  (case (read! index array)
    {.#None}
    array

    {.#Some value}
    (write! index (transform value) array)))

(def: .public (upsert! index default transform array)
  (All (_ a)
    (-> Nat a (-> a a) (Array a) (Array a)))
  (write! index
          (|> array (read! index) (maybe.else default) transform)
          array))

(def: .public (copy! length src_start src_array dest_start dest_array)
  (All (_ a)
    (-> Nat Nat (Array a) Nat (Array a)
        (Array a)))
  (if (n.= 0 length)
    dest_array
    (list#mix (function (_ offset target)
                (case (read! (n.+ offset src_start) src_array)
                  {.#None}
                  target
                  
                  {.#Some value}
                  (write! (n.+ offset dest_start) value target)))
              dest_array
              (list.indices length))))

(def: .public (occupancy array)
  (All (_ a) (-> (Array a) Nat))
  (list#mix (function (_ idx count)
              (case (read! idx array)
                {.#None}
                count
                
                {.#Some _}
                (++ count)))
            0
            (list.indices (size array))))

(def: .public (vacancy array)
  (All (_ a) (-> (Array a) Nat))
  (n.- (..occupancy array) (..size array)))

(def: .public (filter! p xs)
  (All (_ a)
    (-> (Predicate a) (Array a) (Array a)))
  (list#mix (function (_ idx xs')
              (case (read! idx xs)
                {.#None}
                xs'

                {.#Some x}
                (if (p x)
                  xs'
                  (delete! idx xs'))))
            xs
            (list.indices (size xs))))

(def: .public (example p xs)
  (All (_ a)
    (-> (Predicate a) (Array a) (Maybe a)))
  (let [arr_size (size xs)]
    (loop [idx 0]
      (if (n.< arr_size idx)
        (case (read! idx xs)
          {.#None}
          (again (++ idx))
          
          {.#Some x}
          (if (p x)
            {.#Some x}
            (again (++ idx))))
        {.#None}))))

(def: .public (example+ p xs)
  (All (_ a)
    (-> (-> Nat a Bit) (Array a) (Maybe [Nat a])))
  (let [arr_size (size xs)]
    (loop [idx 0]
      (if (n.< arr_size idx)
        (case (read! idx xs)
          {.#None}
          (again (++ idx))
          
          {.#Some x}
          (if (p idx x)
            {.#Some [idx x]}
            (again (++ idx))))
        {.#None}))))

(def: .public (clone xs)
  (All (_ a) (-> (Array a) (Array a)))
  (let [arr_size (size xs)]
    (list#mix (function (_ idx ys)
                (case (read! idx xs)
                  {.#None}
                  ys

                  {.#Some x}
                  (write! idx x ys)))
              (empty arr_size)
              (list.indices arr_size))))

(def: .public (of_list xs)
  (All (_ a) (-> (List a) (Array a)))
  (product.right (list#mix (function (_ x [idx arr])
                             [(++ idx) (write! idx x arr)])
                           [0 (empty (list.size xs))]
                           xs)))

(def: underflow
  Nat
  (-- 0))

(def: (list|-default array empty)
  (All (_ a) (-> (Array a) (List a) (List a)))
  (loop [idx (-- (size array))
         output empty]
    (case idx
      (^ (static ..underflow))
      output

      _
      (again (-- idx)
             (case (read! idx array)
               {.#Some head}
               {.#Item head output}

               {.#None}
               output)))))

(def: (list|+default default array)
  (All (_ a) (-> a (Array a) (List a)))
  (loop [idx (-- (size array))
         output (`` (: (List (~~ (:of default)))
                       {.#End}))]
    (case idx
      (^ (static ..underflow))
      output

      _
      (again (-- idx)
             {.#Item (maybe.else default (read! idx array))
                     output}))))

(def: .public (list default array)
  (All (_ a) (-> (Maybe a) (Array a) (List a)))
  (case default
    {.#Some default}
    (list|+default default array)
    
    {.#None}
    (list|-default array {.#End})))

(implementation: .public (equivalence (^open ",#[0]"))
  (All (_ a) (-> (Equivalence a) (Equivalence (Array a))))
  
  (def: (= xs ys)
    (let [sxs (size xs)
          sxy (size ys)]
      (and (n.= sxy sxs)
           (list#mix (function (_ idx prev)
                       (and prev
                            (case [(read! idx xs) (read! idx ys)]
                              [{.#None} {.#None}]
                              true

                              [{.#Some x} {.#Some y}]
                              (,#= x y)

                              _
                              false)))
                     true
                     (list.indices sxs))))))

(implementation: .public monoid
  (All (_ a) (Monoid (Array a)))
  
  (def: identity (empty 0))

  (def: (composite xs ys)
    (let [sxs (size xs)
          sxy (size ys)]
      (|> (empty (n.+ sxy sxs))
          (copy! sxs 0 xs 0)
          (copy! sxy 0 ys sxs)))))

(implementation: .public functor
  (Functor Array)
  
  (def: (each f ma)
    (let [arr_size (size ma)]
      (if (n.= 0 arr_size)
        (empty arr_size)
        (list#mix (function (_ idx mb)
                    (case (read! idx ma)
                      {.#None}
                      mb

                      {.#Some x}
                      (write! idx (f x) mb)))
                  (empty arr_size)
                  (list.indices arr_size))
        ))))

(implementation: .public mix
  (Mix Array)
  
  (def: (mix f init xs)
    (let [arr_size (size xs)]
      (loop [so_far init
             idx 0]
        (if (n.< arr_size idx)
          (case (read! idx xs)
            {.#None}
            (again so_far (++ idx))

            {.#Some value}
            (again (f value so_far) (++ idx)))
          so_far)))))

(template [<name> <init> <op>]
  [(def: .public (<name> predicate)
     (All (_ a)
       (-> (Predicate a) (Predicate (Array a))))
     (function (_ array)
       (let [size (..size array)]
         (loop [idx 0]
           (if (n.< size idx)
             (case (..read! idx array)
               {.#Some value}
               (<op> (predicate value)
                     (again (++ idx)))
               
               {.#None}
               (again (++ idx)))
             <init>)))))]

  [every? true  and]
  [any?   false or]
  )

(def: .public (one check items)
  (All (_ a b)
    (-> (-> a (Maybe b)) (Array a) (Maybe b)))
  (let [size (..size items)]
    (loop [idx 0]
      (if (n.< size idx)
        (with_expansions [<again> (again (++ idx))]
          (case (..read! idx items)
            {.#Some input}
            (case (check input)
              {.#None}
              <again>

              output
              output)
            
            {.#None}
            <again>))
        {.#None}))))
