(.module:
  [library
   [lux (#- list)
    [abstract
     [equivalence (#+ Equivalence)]
     [hash (#+ Hash)]
     [predicate (#+ Predicate)]
     [monoid (#+ Monoid)]]
    [data
     [collection
      ["." list ("#\." fold)]]]
    [math
     [number
      ["n" nat]]]]]
  ["." // #_
   ["#" dictionary (#+ Dictionary)]])

(type: .public (Set a)
  {#.doc (example "An un-ordered data-structure with unique items."
                  "This means there is no repetition/duplication among the items.")}
  (Dictionary a Any))

(def: .public member_hash
  (All [a] (-> (Set a) (Hash a)))
  //.key_hash)

(def: .public empty
  (All [a] (-> (Hash a) (Set a)))
  //.empty)

(def: .public size
  (All [a] (-> (Set a) Nat))
  //.size)

(def: .public (add elem set)
  (All [a] (-> a (Set a) (Set a)))
  (|> set (//.put elem [])))

(def: .public remove
  (All [a] (-> a (Set a) (Set a)))
  //.remove)

(def: .public member?
  (All [a] (-> (Set a) a Bit))
  //.key?)

(def: .public list
  (All [a] (-> (Set a) (List a)))
  //.keys)

(def: .public union
  (All [a] (-> (Set a) (Set a) (Set a)))
  //.merged)

(def: .public (difference sub base)
  (All [a] (-> (Set a) (Set a) (Set a)))
  (list\fold ..remove base (..list sub)))

(def: .public (intersection filter base)
  (All [a] (-> (Set a) (Set a) (Set a)))
  (//.sub (//.keys filter)
          base))

(implementation: .public equivalence
  (All [a] (Equivalence (Set a)))
  
  (def: (= (^@ reference [hash _]) sample)
    (and (n.= (..size reference)
              (..size sample))
         (list.every? (..member? reference)
                      (..list sample)))))

(implementation: .public hash
  (All [a] (Hash (Set a)))
  
  (def: &equivalence ..equivalence)
  
  (def: (hash set)
    (|> set
        ..list
        (\ (list.hash (..member_hash set)) hash))))

(implementation: .public (monoid hash)
  (All [a] (-> (Hash a) (Monoid (Set a))))

  (def: identity (..empty hash))
  (def: compose ..union))

(def: .public empty?
  (All [a] (-> (Set a) Bit))
  (|>> ..size (n.= 0)))

(def: .public (of_list hash elements)
  (All [a] (-> (Hash a) (List a) (Set a)))
  (list\fold ..add (..empty hash) elements))

(def: .public (sub? super sub)
  (All [a] (-> (Set a) (Set a) Bit))
  (list.every? (..member? super) (..list sub)))

(def: .public (super? sub super)
  (All [a] (-> (Set a) (Set a) Bit))
  (..sub? super sub))

(def: .public predicate
  (All [a] (-> (Set a) (Predicate a)))
  ..member?)
