... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except has list)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [monoid (.only Monoid)]]
   [control
    [function
     [predicate (.only Predicate)]]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [math
    [number
     ["n" nat]]]
   [meta
    [macro
     ["^" pattern]]]]]
 ["[0]" //
  ["[1]" dictionary (.only Dictionary)]])

(every .public (Set a)
  (Dictionary a Any))

(the .public member_hash
  (All (_ a) (-> (Set a) (Hash a)))
  //.key_hash)

(the .public empty
  (All (_ a) (-> (Hash a) (Set a)))
  //.empty)

(the .public size
  (All (_ a) (-> (Set a) Nat))
  //.size)

(the .public (has elem set)
  (All (_ a) (-> a (Set a) (Set a)))
  (|> set (//.has elem [])))

(the .public lacks
  (All (_ a) (-> a (Set a) (Set a)))
  //.lacks)

(the .public member?
  (All (_ a) (-> (Set a) a Bit))
  //.key?)

(the .public list
  (All (_ a) (-> (Set a) (List a)))
  //.keys)

(the .public union
  (All (_ a) (-> (Set a) (Set a) (Set a)))
  //.composite)

(the .public (difference sub base)
  (All (_ a) (-> (Set a) (Set a) (Set a)))
  (list#mix ..lacks base (..list sub)))

(the .public (intersection filter base)
  (All (_ a) (-> (Set a) (Set a) (Set a)))
  (//.sub (//.keys filter)
          base))

(the .public equivalence
  (All (_ a) (Equivalence (Set a)))
  (implementation
   (the (= (^.let reference [hash _]) sample)
     (and (n.= (..size reference)
               (..size sample))
          (list.every? (..member? reference)
                       (..list sample))))))

(the .public hash
  (All (_ a) (Hash (Set a)))
  (implementation
   (the equivalence ..equivalence)
   
   (the (hash set)
     (|> set
         ..list
         (of (list.hash (..member_hash set)) hash)))))

(the .public (monoid hash)
  (All (_ a) (-> (Hash a) (Monoid (Set a))))
  (implementation
   (the identity (..empty hash))
   (the composite ..union)))

(the .public empty?
  (All (_ a) (-> (Set a) Bit))
  (|>> ..size (n.= 0)))

(the .public (of_list hash elements)
  (All (_ a) (-> (Hash a) (List a) (Set a)))
  (list#mix ..has (..empty hash) elements))

(the .public (sub? super sub)
  (All (_ a) (-> (Set a) (Set a) Bit))
  (list.every? (..member? super) (..list sub)))

(the .public (super? sub super)
  (All (_ a) (-> (Set a) (Set a) Bit))
  (..sub? super sub))

(the .public predicate
  (All (_ a) (-> (Set a) (Predicate a)))
  ..member?)
