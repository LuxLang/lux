... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except has)
   [abstract
    [equality (.only Equality)]
    [hash (.only Hash)]
    [monoid (.only Monoid)]]
   [function
    [predicate (.only Predicate)]]
   [data
    [collection
     ["[0]" list (.use "[1]:[0]" mix)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["^" pattern]]]]
 ["[0]" //
  ["[1]" dictionary (.only Dictionary)]])

(every .public (Set it)
  (Dictionary it Any))

(the .public hash_of_member
  (for_any (_ it)
    (-> (Set it)
        (Hash it)))
  //.hash)

(the .public empty
  (for_any (_ it)
    (-> (Hash it)
        (Set it)))
  //.empty)

(the .public size
  (for_any (_ it)
    (-> (Set it)
        Natural))
  //.size)

(the .public (has elem set)
  (for_any (_ it)
    (-> it (Set it)
        (Set it)))
  (|> set (//.has elem [])))

(the .public lacks
  (for_any (_ it)
    (-> it (Set it)
        (Set it)))
  //.lacks)

(the .public member?
  (for_any (_ it)
    (-> (Set it)
        (Predicate it)))
  //.in_domain?)

(the .public as_list
  (for_any (_ it)
    (-> (Set it)
        (List it)))
  //.domain)

(the .public union
  (for_any (_ it)
    (-> (Set it) (Set it)
        (Set it)))
  //.composite)

(the .public (difference sub base)
  (for_any (_ it)
    (-> (Set it) (Set it)
        (Set it)))
  (list:mix ..lacks base (..as_list sub)))

(the .public (intersection filter base)
  (for_any (_ it)
    (-> (Set it) (Set it)
        (Set it)))
  (//.sub (//.domain filter)
          base))

(the .public equality
  (for_any (_ it)
    (Equality (Set it)))
  (implementation
   (the (= (^.let reference [hash _]) sample)
     (and (n.= (..size reference)
               (..size sample))
          (list.every? (..member? reference)
                       (..as_list sample))))))

(alias [=]
       ..equality)

(the .public hash
  (for_any (_ it)
    (Hash (Set it)))
  (implementation
   (the equality ..equality)
   
   (the (hash set)
     (|> set
         ..as_list
         (by (list.hash (..hash_of_member set)) hash)))))

(the .public (monoid hash)
  (for_any (_ it)
    (-> (Hash it)
        (Monoid (Set it))))
  (implementation
   (the identity (..empty hash))
   (the composite ..union)))

(the .public empty?
  (for_any (_ it)
    (Predicate (Set it)))
  (|>> ..size
       (n.= 0)))

(the .public (of_list hash elements)
  (for_any (_ it)
    (-> (Hash it) (List it)
        (Set it)))
  (list:mix ..has (..empty hash) elements))

(the .public (sub? super sub)
  (for_any (_ it)
    (-> (Set it)
        (Predicate (Set it))))
  (list.every? (..member? super)
               (..as_list sub)))

(the .public (super? sub super)
  (for_any (_ it)
    (-> (Set it)
        (Predicate (Set it))))
  (..sub? super sub))

(the .public predicate
  (for_any (_ it)
    (-> (Set it)
        (Predicate it)))
  ..member?)
