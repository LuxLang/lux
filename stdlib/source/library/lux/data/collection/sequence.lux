(.module:
  [library
   [lux #*
    [abstract
     [functor (#+ Functor)]
     [comonad (#+ CoMonad)]]
    [control
     ["//" continuation (#+ Cont)]
     ["<>" parser
      ["<.>" code (#+ Parser)]]]
    [macro (#+ with_gensyms)
     [syntax (#+ syntax:)]
     ["." code]]
    [data
     ["." bit]
     [collection
      ["." list ("#\." monad)]]]
    [math
     [number
      ["n" nat]]]]])

(type: .public (Sequence a)
  {#.doc "An infinite sequence of values."}
  (Cont [a (Sequence a)]))

(def: .public (iterations f x)
  {#.doc "Create a sequence by applying a function to a value, and to its result, on and on..."}
  (All [a]
    (-> (-> a a) a (Sequence a)))
  (//.pending [x (iterations f (f x))]))

(def: .public (repeated x)
  {#.doc "Repeat a value forever."}
  (All [a]
    (-> a (Sequence a)))
  (//.pending [x (repeated x)]))

(def: .public (cycle [start next])
  {#.doc (doc "Go over the elements of a list forever."
              "The list should not be empty.")}
  (All [a]
    (-> [a (List a)] (Sequence a)))
  (loop [head start
         tail next]
    (//.pending [head (case tail
                        #.End
                        (recur start next)
                        
                        (#.Item head' tail')
                        (recur head' tail'))])))

(template [<name> <return>]
  [(def: .public (<name> sequence)
     (All [a] (-> (Sequence a) <return>))
     (let [[head tail] (//.run sequence)]
       <name>))]

  [head a]
  [tail (Sequence a)]
  )

(def: .public (item idx sequence)
  (All [a] (-> Nat (Sequence a) a))
  (let [[head tail] (//.run sequence)]
    (case idx
      0 head
      _ (item (dec idx) tail))))

(template [<taker> <dropper> <splitter> <pred_type> <pred_test> <pred_step>]
  [(def: .public (<taker> pred xs)
     (All [a]
       (-> <pred_type> (Sequence a) (List a)))
     (let [[x xs'] (//.run xs)]
       (if <pred_test>
         (list& x (<taker> <pred_step> xs'))
         (list))))

   (def: .public (<dropper> pred xs)
     (All [a]
       (-> <pred_type> (Sequence a) (Sequence a)))
     (let [[x xs'] (//.run xs)]
       (if <pred_test>
         (<dropper> <pred_step> xs')
         xs)))

   (def: .public (<splitter> pred xs)
     (All [a]
       (-> <pred_type> (Sequence a) [(List a) (Sequence a)]))
     (let [[x xs'] (//.run xs)]
       (if <pred_test>
         (let [[tail next] (<splitter> <pred_step> xs')]
           [(#.Item [x tail]) next])
         [(list) xs])))]
  
  [take_while drop_while split_while (-> a Bit) (pred x)     pred]
  [take       drop       split       Nat        (n.> 0 pred) (dec pred)]
  )

(def: .public (unfold step init)
  {#.doc "A stateful way of infinitely calculating the values of a sequence."}
  (All [a b]
    (-> (-> a [a b]) a (Sequence b)))
  (let [[next x] (step init)]
    (//.pending [x (unfold step next)])))

(def: .public (only predicate sequence)
  {#.doc (doc "A new sequence only with items that satisfy the predicate.")}
  (All [a] (-> (-> a Bit) (Sequence a) (Sequence a)))
  (let [[head tail] (//.run sequence)]
    (if (predicate head)
      (//.pending [head (only predicate tail)])
      (only predicate tail))))

(def: .public (partition left? xs)
  {#.doc (doc "Split a sequence in two based on a predicate."
              "The left side contains all entries for which the predicate is #1."
              "The right side contains all entries for which the predicate is #0.")}
  (All [a] (-> (-> a Bit) (Sequence a) [(Sequence a) (Sequence a)]))
  [(..only left? xs)
   (..only (bit.complement left?) xs)])

(implementation: .public functor
  (Functor Sequence)
  
  (def: (map f fa)
    (let [[head tail] (//.run fa)]
      (//.pending [(f head) (map f tail)]))))

(implementation: .public comonad
  (CoMonad Sequence)
  
  (def: &functor ..functor)
  
  (def: out head)
  
  (def: (split wa)
    (let [[head tail] (//.run wa)]
      (//.pending [wa (split tail)]))))

(syntax: .public (^sequence& {patterns (<code>.form (<>.many <code>.any))}
                             body
                             {branches (<>.some <code>.any)})
  {#.doc (doc "Allows destructuring of sequences in pattern-matching expressions."
              "Caveat emptor: Only use it for destructuring, and not for testing values within the sequences."
              (let [(^sequence& x y z _tail) (some_sequence_func +1 +2 +3)]
                (func x y z)))}
  (with_gensyms [g!sequence]
    (let [body+ (` (let [(~+ (list\join (list\map (function (_ pattern)
                                                    (list (` [(~ pattern) (~ g!sequence)])
                                                          (` ((~! //.run) (~ g!sequence)))))
                                                  patterns)))]
                     (~ body)))]
      (in (list& g!sequence body+ branches)))))
