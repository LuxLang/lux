(.module:
  [library
   [lux #*
    [abstract
     [equivalence (#+ Equivalence)]]
    [data
     ["." product]
     ["." text ("#\." equivalence)]
     [collection
      ["." list ("#\." functor)]]]
    [math
     [number
      ["n" nat]]]]])

## https://en.wikipedia.org/wiki/Property_list
(type: #export (PList a)
  {#.doc (doc "A property list."
              "It's a simple dictionary-like structure with Text keys.")}
  (List [Text a]))

(def: #export empty
  PList
  #.End)

(def: #export size
  (All [a] (-> (PList a) Nat))
  list.size)

(def: #export empty?
  (All [a] (-> (PList a) Bit))
  (|>> ..size (n.= 0)))

(def: #export (get key properties)
  (All [a] (-> Text (PList a) (Maybe a)))
  (case properties
    #.End
    #.None

    (#.Item [k' v'] properties')
    (if (text\= key k')
      (#.Some v')
      (get key properties'))))

(template [<name> <type> <access>]
  [(def: #export <name>
     (All [a] (-> (PList a) (List <type>)))
     (list\map <access>))]

  [keys   Text product.left]
  [values a    product.right]
  )

(def: #export (contains? key properties)
  (All [a] (-> Text (PList a) Bit))
  (case (..get key properties)
    (#.Some _)
    true

    #.None
    false))

(def: #export (put key val properties)
  (All [a] (-> Text a (PList a) (PList a)))
  (case properties
    #.End
    (list [key val])

    (#.Item [k' v'] properties')
    (if (text\= key k')
      (#.Item [key val]
              properties')
      (#.Item [k' v']
              (put key val properties')))))

(def: #export (update key f properties)
  (All [a] (-> Text (-> a a) (PList a) (PList a)))
  (case properties
    #.End
    #.End

    (#.Item [k' v'] properties')
    (if (text\= key k')
      (#.Item [k' (f v')] properties')
      (#.Item [k' v'] (update key f properties')))))

(def: #export (remove key properties)
  (All [a] (-> Text (PList a) (PList a)))
  (case properties
    #.End
    properties

    (#.Item [k' v'] properties')
    (if (text\= key k')
      properties'
      (#.Item [k' v']
              (remove key properties')))))

(def: #export equivalence
  (All [a] (-> (Equivalence a) (Equivalence (PList a))))
  (|>> (product.equivalence text.equivalence)
       list.equivalence))
