(.module:
  [library
   [lux "*"
    [abstract
     [equivalence {"+" [Equivalence]}]]
    [data
     ["[0]" product]
     ["[0]" text ("[1]#[0]" equivalence)]
     [collection
      ["[0]" list ("[1]#[0]" functor)]]]
    [math
     [number
      ["n" nat]]]]])

... https://en.wikipedia.org/wiki/Property_list
(type: .public (PList a)
  (List [Text a]))

(def: .public empty
  PList
  {.#End})

(def: .public size
  (All (_ a) (-> (PList a) Nat))
  list.size)

(def: .public empty?
  (All (_ a) (-> (PList a) Bit))
  (|>> ..size (n.= 0)))

(def: .public (value key properties)
  (All (_ a) (-> Text (PList a) (Maybe a)))
  (case properties
    {.#End}
    {.#None}

    {.#Item [k' v'] properties'}
    (if (text#= key k')
      {.#Some v'}
      (value key properties'))))

(template [<name> <type> <access>]
  [(def: .public <name>
     (All (_ a) (-> (PList a) (List <type>)))
     (list#each <access>))]

  [keys   Text product.left]
  [values a    product.right]
  )

(def: .public (contains? key properties)
  (All (_ a) (-> Text (PList a) Bit))
  (case (..value key properties)
    {.#Some _}
    true

    {.#None}
    false))

(def: .public (has key val properties)
  (All (_ a) (-> Text a (PList a) (PList a)))
  (case properties
    {.#End}
    (list [key val])

    {.#Item [k' v'] properties'}
    (if (text#= key k')
      {.#Item [key val]
              properties'}
      {.#Item [k' v']
              (has key val properties')})))

(def: .public (revised key f properties)
  (All (_ a) (-> Text (-> a a) (PList a) (PList a)))
  (case properties
    {.#End}
    {.#End}

    {.#Item [k' v'] properties'}
    (if (text#= key k')
      {.#Item [k' (f v')] properties'}
      {.#Item [k' v'] (revised key f properties')})))

(def: .public (lacks key properties)
  (All (_ a) (-> Text (PList a) (PList a)))
  (case properties
    {.#End}
    properties

    {.#Item [k' v'] properties'}
    (if (text#= key k')
      properties'
      {.#Item [k' v']
              (lacks key properties')})))

(def: .public equivalence
  (All (_ a) (-> (Equivalence a) (Equivalence (PList a))))
  (|>> (product.equivalence text.equivalence)
       list.equivalence))
