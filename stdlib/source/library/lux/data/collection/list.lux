... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except only all static has revised when macro as stack)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [monoid (.only Monoid)]
    [functor (.only Functor)]
    ["[0]" monad (.only Monad)]]
   ["[0]" error (.only)
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]]
   [function
    ["[0]" predicate (.only Predicate)]
    [poly
     [type
      [mix (.only Mix)]]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [aspect
    ["[0]" view (.only View)]]]]
 [//
  ["[0]" stack]
  [array
   ["/" \\unsafe]]])

(the with_template (.in_module# .prelude with_template))
(the macro (.in_module# .prelude template#macro))

(with_template [,name ,from ,to]
  [(the ,name
     (macro (_ ,it)
       [((is (for_any (_ it)
               (-> ,from
                   ,to))
             (|>> as_expected))
         ,it)]))]

  [[as (.List it) (.Array it)]
   [of (.Array it) (.List it)]])

(the .public size
  (for_any (_ it)
    (-> (List it)
        Natural))
  (|>> .list_size#))

(the .public empty?
  (for_any (_ it)
    (Predicate (List it)))
  (|>> ..size
       (n.= 0)))

(the .public (equivalence //)
  (for_any (_ it)
    (-> (Equivalence it)
        (Equivalence (List it))))
  (implementation
   (the (= that this)
     (/.= // (..as that) (..as this)))))

(the .public (hash //)
  (for_any (_ it)
    (-> (Hash it)
        (Hash (List it))))
  (implementation
   (the equivalence
     (..equivalence (by // equivalence)))
   
   (the (hash it)
     (/.mix (function (_ index member hash)
              (n.+ (by // hash member) hash))
            0
            (..as it)))))

(the .public empty
  List
  (list))

(the .public monoid
  (for_any (_ it)
    (Monoid (List it)))
  (implementation
   (the identity
     ..empty)

   (the (composite left right)
     (.list_composite# left right))))

(the .public mix
  (Mix List)
  (implementation
   (the (mix step init it)
     (/.mix (function (_ index partial total)
              (step partial total))
            init
            (..as it)))))

(the .public functor
  (Functor List)
  (implementation
   (the (each it input)
     (|> (..as input)
         (/.each it)
         ..of))))

(the .public monad
  (Monad List)
  (implementation
   (the functor ..functor)

   (the pure
     (|>> list))

   (the (conjoint it)
     (let [size_of_total (..mix (function (_ sub it)
                                  (n.+ it (..size sub)))
                                0
                                it)]
       (|> it
           (..mix (function (_ segment [it offset])
                    (let [segment (..as segment)
                          size_of_segment (/.size segment)]
                      [(/.copy! size_of_segment 0 segment offset it)
                       (n.+ size_of_segment offset)]))
                  [(/.empty size_of_total) 0])
           product.left
           ..of)))))

(the .public (enumeration it)
  (for_any (_ it)
    (-> (List it)
        (List [Natural it])))
  (..of (let [it (..as it)]
          (/.mix (function (_ index value it)
                   (/.has! index [index value] it))
                 (/.empty (/.size it))
                 it))))

(the .public (item position it)
  (for_any (_ it)
    (-> Natural (List it)
        (Try it)))
  (if (n.< (.list_size# it) position)
      {try.#Success (.list_item# position it)}
      {try.#Failure error.not_valid}))

(the .public (first amount it)
  (for_any (_ it)
    (-> Natural
        (Change (List it))))
  (let [at_most (.list_size# it)]
    (if (n.= amount at_most)
        it
        (let [amount (n.minor amount at_most)]
          (|> (/.empty amount)
              (/.copy! amount 0 (..as it) 0)
              ..of)))))

(the .public (after amount it)
  (for_any (_ it)
    (-> Natural
        (Change (List it))))
  (.when (..size it)
    0
    it
    
    size
    (let [it (..as it)]
      (if (n.< size amount)
          (let [size (n.- amount (/.size it))]
            (|> (/.empty size)
                (/.copy! size amount it 0)
                ..of))
          ..empty))))

(the .public (reversed it)
  (for_any (_ it)
    (Change (List it)))
  (..of (let [size (.list_size# it)
              last (-- size)]
          (/.mix (function (_ index value it)
                   (/.has! (n.- index last) value it))
                 (/.empty size)
                 (..as it)))))

(the .public (indices limit)
  (for_any (_ it)
    (-> Natural
        (List Natural)))
  (..of (let [it (/.empty limit)]
          (loop (value [index 0])
            (if (n.< limit index)
                (exec
                  (/.has! index index it)
                  (value (++ index)))
                it)))))

(the .public (complete (open "/#[0]") it)
  (for_any (_ ! it)
    (-> (Monad !) (List (! it))
        (! (List it))))
  (let [limit (.list_size# it)
        value (/.empty limit)]
    (loop (next [position 0])
      (if (n.< limit position)
          (|> it
              (.list_item# position)
              (/#each (function (_ item)
                        (exec
                          (/.has! position item value)
                          (next (++ position)))))
              /#conjoint)
          (/#pure (..of value))))))

(the .public (each' (open "/#[0]") on it)
  (for_any (_ ! before after)
    (-> (Monad !)
        (-> before
            (! after))
        (-> (List before)
            (! (List after)))))
  (let [limit (.list_size# it)
        value (/.empty limit)]
    (loop (next [position 0])
      (if (n.< limit position)
          (|> it
              (.list_item# position)
              on
              (/#each (function (_ item)
                        (exec
                          (/.has! position item value)
                          (next (++ position)))))
              /#conjoint)
          (/#pure (..of value))))))

(the .public (mix' (open "/#[0]") on initial_state it)
  (for_any (_ ! it state)
    (-> (Monad !) (-> it state (! state)) state (List it)
        (! state)))
  (let [limit (.list_size# it)]
    (loop (value [position 0
                  state initial_state])
      (if (n.< limit position)
          (|> (on (.list_item# position it) state)
              (/#each (value (++ position)))
              /#conjoint)
          (/#pure state)))))

(the .public (repeated amount it)
  (for_any (_ it)
    (-> Natural it
        (List it)))
  (let [value (/.empty amount)]
    (loop (next [position 0])
      (if (n.< amount position)
          (exec
            (/.has! position it value)
            (next (++ position)))
          (..of value)))))

(the .public (as_text as_text it)
  (for_any (_ it)
    (-> (-> it Text)
        (-> (List it) Text)))
  (text "(.list"
        (mix (function (_ item it)
               (text it " " (as_text item)))
             ""
             it)
        ")"))

(the .public only
  (for_any (_ it)
    (-> (Predicate it)
        (Change (List it))))
  (.in_module# .prelude list#only))

(the .public (only' ! ? it)
  (for_any (_ ! it)
    (-> (Monad !) (-> it (! Bit)) (List it)
        (! (List it))))
  (let [(open "/#[0]") !]
    (|> it
        (each' ! (function (_ item)
                   (/#each (|>> [item]) (? item))))
        (/#each (|>> (..only product.right)
                     (by ..functor each product.left))))))

... TO DO: Stop needing this hack.
(the (empty' size it)
  (for_any (_ it)
    (-> Natural (List it)
        (.Array it)))
  (/.empty size))

(the (of_full_array default it)
  (for_any (_ it)
    (-> it (.Array it)
        (List it)))
  (let [limit (/.size it)
        value (empty' limit (..of it))]
    (loop (next [position 0])
      (if (n.< limit position)
          (exec
            (/.has! position
                    (.if (/.lacks? position it)
                         default
                         (/.item position it))
                    value)
            (next (++ position)))
          (..of value)))))

(the (missing it)
  (for_any (_ it)
    (-> (.Array it)
        Natural))
  (let [limit (/.size it)]
    (loop (value [position 0
                  missing 0])
      (if (n.< limit position)
          (value (++ position)
                 (.if (/.lacks? position it)
                      (++ missing)
                      missing))
          missing))))

(the (of_partial_array it)
  (for_any (_ it)
    (-> (.Array it)
        (List it)))
  (let [limit (/.size it)
        size (n.- (..missing it) limit)

        value (empty' size (..of it))]
    (loop (next [position 0
                 index 0])
      (if (n.< limit position)
          (next (++ position)
                (.if (/.lacks? position it)
                     index
                     (exec
                       (/.has! index (/.item position it) value)
                       (++ index))))
          (..of value)))))

(the .public (of_array default it)
  (for_any (_ it)
    (-> (Maybe it) (.Array it)
        (List it)))
  (.when default
    {.#None}
    (of_partial_array it)
    
    {.#Some default}
    (of_full_array default it)))

(the .public (zipped_2 _0 _1)
  (for_any (_ _0 _1)
    (-> (List _0) (List _1)
        (List [_0 _1])))
  (let [size_of_0 (.list_size# _0)
        size_of_1 (.list_size# _1)
        size (n.minor size_of_0 size_of_1)]
    (..of (if (same? size_of_0 size)
              (/.mix (function (_ @ _0 it)
                       (/.has! @ [_0 (.list_item# @ _1)] it))
                     (/.empty size)
                     (..as _0))
              (/.mix (function (_ @ _1 it)
                       (/.has! @ [(.list_item# @ _0) _1] it))
                     (/.empty size)
                     (..as _1))))))

... TO DO: Stop needing this hack.
(the (for_static size it)
  (for_any (_ state item)
    (-> Natural (-> state [state item])
        (.Array item)))
  (/.empty size))

(the .public (static size item initial_state)
  (for_any (_ state item)
    (-> Natural (-> state [state item]) state
        [state (List item)]))
  (let [value (..for_static size item)]
    (loop (next [@ 0
                 state initial_state])
      (if (n.< size @)
          (let [[state item] (item state)]
            (exec
              (/.has! @ item value)
              (next (++ @) state)))
          [state (..of value)]))))

(the <<
  (macro (_ ,shift ,it)
    [(is Natural
         (.i64_left# (is Natural ,shift)
                     (is Natural ,it)))]))

... TO DO: Stop needing this hack.
(the (for_dynamic size it)
  (for_any (_ state item)
    (-> Natural (-> state (Maybe [state item]))
        (.Array item)))
  (/.empty size))

(the .public (dynamic item initial_state)
  (for_any (_ state item)
    (-> (-> state (Maybe [state item]))
        (-> state [state (List item)])))
  (loop (next [@ 0
               state initial_state
               value (..for_dynamic (<< 2 1) item)])
    (let [capacity (/.size value)]
      (.when (item state)
        {.#Some [state item]}
        (|> (if (n.< capacity @)
                value
                ... Expand
                (|> (/.empty (<< 1 capacity))
                    (/.copy! capacity 0 value 0)))
            (/.has! @ item)
            (next (++ @) state))
        
        {.#None}
        (let [usage @]
          (|> (if (n.= capacity usage)
                  value
                  ... Shrink
                  (|> (/.empty usage)
                      (/.copy! usage 0 value 0)))
              ..of
              [state]))))))

(the .public (all value it)
  (for_any (_ _0 _1)
    (-> (-> _0 (Maybe _1))
        (-> (List _0)
            (List _1))))
  (let [size (.list_size# it)
        [_ it] (dynamic (function (item address)
                          (if (n.< size address)
                              (.when (value (.list_item# address it))
                                {.#Some item}
                                {.#Some [(++ address) item]}
                                
                                none
                                (item (++ address)))
                              {.#None}))
                        0)]
    it))

(with_template [,name ,identity ,composite]
  [(the .public (,name ? it)
     (for_any (_ it)
       (-> (Predicate it)
           (Predicate (List it))))
     (let [limit (.list_size# it)]
       (loop (value [@ 0])
         (if (n.< limit @)
             (,composite (? (.list_item# @ it))
                         (value (++ @)))
             ,identity))))]

  [[any?   0b or]
   [every? 1b and]])

(the .public (one check it)
  (for_any (_ input output)
    (-> (-> input (Maybe output)) (List input)
        (Try output)))
  (let [limit (.list_size# it)]
    (loop (value [@ 0])
      (if (n.< limit @)
          (.when (check (.list_item# @ it))
            {.#None}
            (value (++ @))
            
            {.#Some it}
            {try.#Success it})
          {try.#Failure error.not_valid}))))

(the .public (one' monad check it)
  (for_any (_ context input output)
    (-> (Monad context) (-> input (context (Maybe output)))
        (-> (List input)
            (context (Try output)))))
  (let [limit (.list_size# it)]
    (loop (value [@ 0])
      (if (n.< limit @)
          (monad.let monad
            [check (check (.list_item# @ it))]
            (.when check
              {.#None}
              (value (++ @))
              
              {.#Some it}
              (pure {try.#Success it})))
          (by monad pure {try.#Failure error.not_valid})))))

(the .public (member? = context candidate)
  (for_any (_ it)
    (-> (Equivalence it) (List it)
        (Predicate it)))
  (any? (= candidate) context))

(the .public (example predicate)
  (for_any (_ it)
    (-> (Predicate it) (List it)
        (Try it)))
  (..one (function (_ value)
           (if (predicate value)
               {.#Some value}
               {.#None}))))

(the .public (interposed delimiter it)
  (for_any (_ it)
    (-> it (List it)
        (List it)))
  (.when (..size it)
    0 it
    1 it

    size
    (let [last (-- size)
          new_size (n.+ size last)]
      (..of (/.mix (function (_ @ value it)
                     (let [@' (n.x 2 @)]
                       (if (n.= last @)
                           (/.has! @' value it)
                           (|> it
                               (/.has! @' value)
                               (/.has! (++ @') delimiter)))))
                   (/.empty new_size)
                   (..as it))))))

(the (of_stack it)
  (for_any (_ it)
    (-> (Stack it)
        (List it)))
  (let [value (/.empty (stack.size it))]
    (exec
      (stack.mix (function (_ item @)
                   (exec
                     (/.has! @ item value)
                     (++ @)))
                 0
                 it)
      (..of value))))

(the as_stack
  (for_any (_ it)
    (-> (List it)
        (Stack it)))
  (|>> ..reversed
       (..mix (function (_ head tail)
                {.#Top head tail})
              {.#Empty})))

(the .public stack
  (for_any (_ it)
    (View (List it)
          (Stack it)))
  (view.new ..of_stack ..as_stack))

(the .public (split position it)
  (for_any (_ it)
    (-> Natural (List it)
        [(List it) (List it)]))
  [(first position it)
   (after position it)])

(the .public (sub size_of_complete_segment it)
  (for_any (_ it)
    (-> Natural (List it)
        (List (List it))))
  (.when size_of_complete_segment
    0 ..empty
    _ (let [[complete partial] (n./% size_of_complete_segment (.list_size# it))
            [segments size_of_last_segment] (.when partial
                                              0 [complete size_of_complete_segment]
                                              _ [(++ complete) partial])
            last_segment (-- segments)]
        (|> (static segments
                    (function (_ current_segment)
                      [(++ current_segment)
                       (let [offset (n.x size_of_complete_segment current_segment)
                             size_of_segment (if (n.= last_segment current_segment)
                                                 size_of_last_segment
                                                 size_of_complete_segment)]
                         (|> (/.empty size_of_segment)
                             (/.copy! size_of_segment offset (..as it) 0)
                             ..of))])
                    0)
            product.right))))

(the Order
  (type (for_any (_ it)
          (-> (-> it it Bit) Natural Natural
              (Change (.Array it))))))

(the (in_order in_range < first last it)
  (for_any (_ it)
    (Change (Order it)))
  (loop (in_order [less first
                   more last
                   it it])
    (if (n.< more less)
        (let [next (++ less)
              @less (/.item less it)
              @next (/.item next it)]
          (if (< @less @next)
              (|> it
                  (/.has! less @next)
                  (/.has! next @less)
                  (in_order next more))
              (|> it
                  (/.has! next (/.item more it))
                  (/.has! more @next)
                  (in_order less (-- more)))))
        (if (n.= first less)
            (in_range < (++ first) last it)
            
            (n.= last more)
            (in_range < first (-- last) it)
            
            ... else
            (|> it
                (in_range < first (-- less))
                (in_range < (++ more) last))))))

(the (in_range < first last it)
  Order
  (.when (n.- first last)
    0 it
    1 (let [@first (/.item first it)
            @last (/.item last it)]
        (if (< @first @last)
            (|> it
                (/.has! first @last)
                (/.has! last @first))
            it))
    _ (in_order in_range < first last it)))

(the .public (sorted < it)
  (for_any (_ it)
    (-> (-> it it Bit)
        (Change (List it))))
  (.when (..size it)
    0 it
    1 it
    
    size
    (|> (/.empty size)
        (/.copy! size 0 (..as it) 0)
        (in_range < 0 (-- size))
        ..of)))

(the .public (partition satisfies? it)
  (for_any (_ it)
    (-> (Predicate it) (List it)
        [(List it) (List it)]))
  [(only satisfies? it)
   (only (predicate.not satisfies?) it)])

(the (expansion by it)
  (for_any (_ it)
    (-> Natural
        (Change (.Array it))))
  (let [size (/.size it)]
    (|> (/.empty (n.+ by size))
        (/.copy! size 0 it 0))))

(the (clone it)
  (for_any (_ it)
    (Change (.Array it)))
  (let [size (/.size it)]
    (|> (/.empty size)
        (/.copy! size 0 it 0))))

(the .public (has index value it)
  (for_any (_ it)
    (-> Natural it
        (Change (List it))))
  (let [limit (.list_size# it)]
    (if (n.< limit index)
        (|> it
            ..as
            ..clone
            (/.has! index value)
            ..of)

        (n.= limit index)
        (|> it
            ..as
            (..expansion 1)
            (/.has! index value)
            ..of)

        ... else
        it)))

(the .public (revised index change it)
  (for_any (_ it)
    (-> Natural (Change it)
        (Change (List it))))
  (if (n.< (.list_size# it) index)
      (|> it
          ..as
          ..clone
          (/.has! index (change (.list_item# index it)))
          ..of)
      it))

(the .public (lacks index it)
  (for_any (_ it)
    (-> Natural
        (Change (List it))))
  (if (n.< (.list_size# it) index)
      (let [it (..as it)
            size (/.size it)
            after (++ index)]
        (|> (/.empty (-- size))
            (/.copy! index 0 it 0)
            (/.copy! (n.- after size) after it index)
            ..of))
      it))

(the .public as_array
  (for_any (_ it)
    (-> (List it)
        (.Array it)))
  (|>> ..as
       ..clone))

(the .public when
  (macro (_ ,test ,then)
    [(if ,test
         ,then
         (list))]))

(the .public (every_mix next state it)
  (for_any (_ it mix)
    (-> (-> it (Change mix)) mix
        (-> (List it) (List mix))))
  (let [last (..size it)]
    (|> [0 state]
        (static (++ last)
                (function (_ [index state])
                  [(if (n.= last index)
                       [index state]
                       [(++ index)
                        (next (.list_item# index it) state)])
                   state]))
        product.right)))

(the .public (while valid? it)
  (for_any (_ item)
    (-> (Predicate item)
        (Change (List item))))
  (let [limit (.list_size# it)]
    (loop (while [index 0])
      (if (and (n.< limit index)
               (valid? (.list_item# index it)))
          (while (++ index))
          (first index it)))))

(the .public (until valid? it)
  (for_any (_ item)
    (-> (Predicate item)
        (Change (List item))))
  (let [limit (.list_size# it)]
    (loop (until [index 0])
      (if (and (n.< limit index)
               (not (valid? (.list_item# index it))))
          (until (++ index))
          (after index it)))))
