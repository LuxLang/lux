... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [monoid (.only Monoid)]
    [functor (.only Functor)]
    [monad (.only Monad)]]
   [algorithm
    [mix (.only Mix)]]
   [control
    ["[0]" try (.only Try)]]
   [function
    [predicate (.only Predicate)]]
   [data
    [collection
     ["[0]" stack (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["n" natural]]]
   [type
    [variance (.only)]]]]
 [//
  [array
   ["/" \\unsafe]]])

(every .public (List of)
  (/.Array of))

(the .public list
  (let [natural (is (-> Natural
                        Code)
                    (|>> {.#Natural}
                         [(.in_module# .prelude provenance#dummy)]))]
    (macro (_ elements lux)
      {try.#Success [lux
                     (stack (` (|> (/.empty (, (natural (stack.size elements))))
                                   (,* (stack#each (function (_ [index value])
                                                     (` (/.has! (, (natural index))
                                                                (, value))))
                                                   (stack.enumeration elements))))))]})))

(the .public size
  (for_any (_ of)
    (-> (List of)
        Natural))
  (|>> /.size))

(the .public (equivalence //)
  (for_any (_ of)
    (-> (Equivalence of)
        (Equivalence (List of))))
  (implementation
   (the (= that this)
     (/.= // that this))))

(the .public (hash //)
  (for_any (_ of)
    (-> (Hash of)
        (Hash (List of))))
  (implementation
   (the equivalence
     (..equivalence (by // equivalence)))
   
   (the (hash it)
     (/.mix (function (_ index member hash)
              (n.+ (by // hash member) hash))
            0
            it))))

(the .public empty
  List
  (/.empty 0))

(the .public monoid
  (for_any (_ of)
    (Monoid (List of)))
  (implementation
   (the identity ..empty)

   (the (composite left right)
     (/.composite left right))))

(the .public mix
  (Mix (for_any (_ of)
         (List of)))
  (implementation
   (the (mix step init it)
     (/.mix (function (_ index partial total)
              (step partial total))
            init
            it))))

(the .public functor
  (Functor List)
  (implementation
   (the (each it input)
     (/.each it input))))

(the .public monad
  (Monad List)
  (implementation
   (the functor ..functor)

   (the in
     (|>> ..list))

   (the (conjoint it)
     (/.mix (function (_ index right left)
              (/.composite left right))
            ..empty
            it))))

(the .public of_stack
  (for_any (_ of)
    (-> (Stack of)
        (List of)))
  (|>> /.of_stack))

(the .public (as_stack it)
  (for_any (_ of)
    (-> (List of)
        (Stack of)))
  (/.stack {.#None} it))
