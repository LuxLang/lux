... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except type only all static)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [monoid (.only Monoid)]
    [functor (.only Functor)]
    [monad (.only Monad)]]
   [error (.only error)
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]]
   [function
    [predicate (.only Predicate)]
    [polytypism
     [mix (.only Mix)]]]
   [math
    [number
     ["n" natural]]]]]
 [//
  ["[0]" stack]
  [array (.only Array)
   ["/" \\unsafe]]])

(the .public type
  "#List")

(the with_template' (.in_module# .prelude .with_template))
(the template#macro (.in_module# .prelude .template#macro))

(with_template' [,name ,from ,to]
  [(the ,name
     (template#macro
      (_ ,it)
      [((is (for_any (_ it write)
              (-> ,from
                  ,to))
            (|>> as_expected))
        ,it)]))]

  [reification (.List it) (/.Array' it write)]
  [abstraction (/.Array' it write) (.List it)]
  )

(the .public size
  (for_any (_ it)
    (-> (List it)
        Natural))
  (|>> ..reification
       /.size))

(the .public empty?
  (for_any (_ it)
    (Predicate (List it)))
  (|>> ..size
       (n.= 0)))

(the .public (equivalence //)
  (for_any (_ it)
    (-> (Equivalence it)
        (Equivalence (List it))))
  (implementation
   (the (= that this)
     (/.= //
          (..reification that)
          (..reification this)))))

(the .public (hash //)
  (for_any (_ it)
    (-> (Hash it)
        (Hash (List it))))
  (implementation
   (the equivalence
     (..equivalence (by // equivalence)))
   
   (the (hash it)
     (/.mix (function (_ index member hash)
              (n.+ (by // hash member) hash))
            0
            (..reification it)))))

(the .public empty
  List
  (..abstraction (/.empty 0)))

(the .public monoid
  (for_any (_ it)
    (Monoid (List it)))
  (implementation
   (the identity ..empty)

   (the (composite left right)
     (<| ..abstraction
         (/.composite (..reification left)
                      (..reification right))))))

(the .public mix
  (Mix List)
  (implementation
   (the (mix step init it)
     (/.mix (function (_ index partial total)
              (step partial total))
            init
            (..reification it)))))

(the .public functor
  (Functor List)
  (implementation
   (the (each it input)
     (|> (..reification input)
         (/.each it)
         ..abstraction))))

(the .public monad
  (Monad List)
  (implementation
   (the functor ..functor)

   (the in
     (|>> list))

   (the (conjoint it)
     (let [size_of_total (..mix (function (_ sub it)
                                  (n.+ it (..size sub)))
                                0
                                it)]
       (|> it
           (..mix (function (_ segment [it offset])
                    (let [segment (..reification segment)
                          size_of_segment (/.size segment)]
                      [(/.copy! size_of_segment 0 segment offset it)
                       (n.+ size_of_segment offset)]))
                  [(/.empty size_of_total) 0])
           product.left
           ..abstraction)))))

(the .public (enumeration it)
  (for_any (_ it)
    (-> (List it)
        (List [Natural it])))
  (..abstraction
   (let [it (..reification it)]
     (/.mix (function (_ index value it)
              (/.has! index [index value] it))
            (/.empty (/.size it))
            it))))

(the .public not_valid
  (error "Not valid."))

(the .public (item position it)
  (for_any (_ it)
    (-> Natural (List it)
        (Try it)))
  (let [it (..reification it)]
    (if (n.< (/.size it) position)
      {try.#Success (/.item position it)}
      {try.#Failure ..not_valid})))

(the .public (first amount it)
  (for_any (_ it)
    (-> Natural (List it)
        (List it)))
  (..abstraction
   (let [it (..reification it)
         amount (n.minor amount (/.size it))]
     (|> (/.empty amount)
         (/.copy! amount 0 it 0)))))

(the .public (after amount it)
  (for_any (_ it)
    (-> Natural (List it)
        (List it)))
  (let [it (..reification it)]
    (if (n.< (/.size it) amount)
      (let [size (n.- amount (/.size it))]
        (|> (/.empty size)
            (/.copy! size amount it 0)
            ..abstraction))
      ..empty)))

(the .public (reversed it)
  (for_any (_ it)
    (-> (List it)
        (List it)))
  (..abstraction
   (let [it (..reification it)
         size (/.size it)
         last (-- size)]
     (/.mix (function (_ index value it)
              (/.has! (n.- index last) value it))
            (/.empty size)
            it))))

(the .public (indices limit)
  (for_any (_ it)
    (-> Natural
        (List Natural)))
  (..abstraction
   (let [it (/.empty limit)]
     (loop (value [index 0])
       (if (n.< limit index)
         (exec
           (/.has! index index it)
           (value (++ index)))
         it)))))

(the .public (all' (open "/#[0]") it)
  (for_any (_ ! it)
    (-> (Monad !) (List (! it))
        (! (List it))))
  (let [it (..reification it)
        limit (/.size it)
        value (/.empty limit)]
    (loop (next [position 0])
      (if (n.< limit position)
        (|> it
            (/.item position)
            (/#each (function (_ item)
                      (exec
                        (/.has! position item value)
                        (next (++ position)))))
            /#conjoint)
        (/#in (..abstraction value))))))

(the .public (each' (open "/#[0]") on it)
  (for_any (_ ! before after)
    (-> (Monad !) (-> before (! after)) (List before)
        (! (List after))))
  (let [it (..reification it)
        limit (/.size it)
        value (/.empty limit)]
    (loop (next [position 0])
      (if (n.< limit position)
        (|> it
            (/.item position)
            on
            (/#each (function (_ item)
                      (exec
                        (/.has! position item value)
                        (next (++ position)))))
            /#conjoint)
        (/#in (..abstraction value))))))

(the .public (mix' (open "/#[0]") on initial_state it)
  (for_any (_ ! it state)
    (-> (Monad !) (-> it state (! state)) state (List it)
        (! state)))
  (let [it (..reification it)
        limit (/.size it)]
    (loop (value [position 0
                  state initial_state])
      (if (n.< limit position)
        (|> (on (/.item position it) state)
            (/#each (value (++ position)))
            /#conjoint)
        (/#in state)))))

(the .public (repeated amount it)
  (for_any (_ it)
    (-> Natural it
        (List it)))
  (let [value (/.empty amount)]
    (loop (next [position 0])
      (if (n.< amount position)
        (exec
          (/.has! position it value)
          (next (++ position)))
        (..abstraction value)))))

(the .public (as_text as_text it)
  (for_any (_ it)
    (-> (-> it Text)
        (-> (List it) Text)))
  (text "(.list"
        (mix (function (_ item it)
               (text it " " (as_text item)))
             ""
             it)
        ")"))

... TO DO: Stop needing this hack.
(the (empty' size it)
  (for_any (_ it)
    (-> Natural (List it)
        (/.Array it)))
  (/.empty size))

(the .public (only ? it)
  (for_any (_ it)
    (-> (Predicate it) (List it)
        (List it)))
  (let [selected (..empty' (..size it) it)
        size (..mix (function (_ value position)
                      (if (? value)
                        (exec
                          (/.has! position value selected)
                          (++ position))
                        position))
                    0
                    it)]
    (|> (/.empty size)
        (/.copy! size 0 selected 0)
        ..abstraction)))

(the .public (only' ! ? it)
  (for_any (_ ! it)
    (-> (Monad !) (-> it (! Bit)) (List it)
        (! (List it))))
  (let [(open "/#[0]") !]
    (|> it
        (each' ! (function (_ item)
                   (/#each (|>> [item]) (? item))))
        (/#each (|>> (..only product.right)
                     (by ..functor each product.left))))))

(the (of_full_array default it)
  (for_any (_ it)
    (-> it (Array it)
        (List it)))
  (let [limit (/.size it)
        value (empty' limit (..abstraction it))]
    (loop (next [position 0])
      (if (n.< limit position)
        (exec
          (/.has! position
                  (.if (/.lacks? position it)
                    default
                    (/.item position it))
                  value)
          (next (++ position)))
        (..abstraction value)))))

(the (missing it)
  (for_any (_ it)
    (-> (Array it)
        Natural))
  (let [limit (/.size it)]
    (loop (value [position 0
                  missing 0])
      (if (n.< limit position)
        (value (++ position)
               (.if (/.lacks? position it)
                 (++ missing)
                 missing))
        missing))))

(the (of_partial_array it)
  (for_any (_ it)
    (-> (Array it)
        (List it)))
  (let [limit (/.size it)
        size (n.+ limit (..missing it))

        value (empty' size (..abstraction it))]
    (loop (next [position 0
                 index 0])
      (if (n.< limit position)
        (next (++ position)
              (.if (/.lacks? position it)
                index
                (exec
                  (/.has! index (/.item position it) value)
                  (++ index))))
        (..abstraction value)))))

(the .public (of_array default it)
  (for_any (_ it)
    (-> (Maybe it) (Array it)
        (List it)))
  (when default
    {.#None}
    (of_partial_array it)
    
    {.#Some default}
    (of_full_array default it)))

(the .public (all check it)
  (for_any (_ _0 _1)
    (-> (-> _0 (Maybe _1)) (List _0)
        (List _1)))
  (..mix (function (_ item it)
           (.when (check item)
             {.#Some item}
             (by ..monoid composite it (list item))
             
             {.#None}
             it))
         ..empty
         it))

(the .public (zipped_2 _0 _1)
  (for_any (_ _0 _1)
    (-> (List _0) (List _1)
        (List [_0 _1])))
  (let [_0 (..reification _0)
        _1 (..reification _1)
        size_of_0 (/.size _0)
        size_of_1 (/.size _1)
        size (n.minor size_of_0 size_of_1)]
    (..abstraction
     (if (same? size_of_0 size)
       (/.mix (function (_ @ _0 it)
                (/.has! @ [_0 (/.item @ _1)] it))
              (/.empty size)
              _0)
       (/.mix (function (_ @ _1 it)
                (/.has! @ [(/.item @ _0) _1] it))
              (/.empty size)
              _1)))))

... TO DO: Stop needing this hack.
(the (for_static size it)
  (for_any (_ state item)
    (-> Natural (-> state [state item])
        (/.Array item)))
  (/.empty size))

(the .public (static size item initial_state)
  (for_any (_ state item)
    (-> Natural (-> state [state item]) state
        [state (List item)]))
  (let [value (..for_static size item)]
    (loop (next [@ 0
                 state initial_state])
      (if (n.< size @)
        (let [[state item] (item state)]
          (exec
            (/.has! @ item value)
            (next (++ @) state)))
        [state (..abstraction value)]))))

(the <<
  (template#macro
   (_ ,shift ,it)
   [(is Natural
        (.i64_left# (is Natural ,shift)
                    (is Natural ,it)))]))

... TO DO: Stop needing this hack.
(the (for_dynamic size it)
  (for_any (_ state item)
    (-> Natural (-> state (Maybe [state item]))
        (/.Array item)))
  (/.empty size))

(the .public (dynamic item initial_state)
  (for_any (_ state item)
    (-> (-> state (Maybe [state item])) state
        [state (List item)]))
  (loop (next [@ 0
               state initial_state
               value (..for_dynamic (<< 2 1) item)])
    (let [capacity (/.size value)]
      (.when (item state)
        {.#Some [state item]}
        (|> (if (n.< capacity @)
              value
              ... Expand
              (|> (/.empty (<< 1 capacity))
                  (/.copy! capacity 0 value 0)))
            (/.has! @ item)
            (next (++ @) state))
        
        {.#None}
        (let [usage @]
          (|> (if (n.= capacity usage)
                value
                ... Shrink
                (|> (/.empty usage)
                    (/.copy! usage 0 value 0)))
              ..abstraction
              [state]))))))

(with_template' [,name ,identity ,composite]
  [(the .public (,name ? it)
     (for_any (_ it)
       (-> (Predicate it)
           (Predicate (List it))))
     (let [it (..reification it)
           limit (/.size it)]
       (loop (value [@ 0])
         (if (n.< limit @)
           (,composite (? (/.item @ it))
                       (value (++ @)))
           ,identity))))]

  [any?   #0 or]
  [every? #1 and]
  )

(the .public no_one
  (error "No one value to be found."))

(the .public (one check it)
  (for_any (_ input output)
    (-> (-> input (Maybe output)) (List input)
        (Try output)))
  (let [it (..reification it)
        limit (/.size it)]
    (loop (value [@ 0])
      (if (n.< limit @)
        (.when (check (/.item @ it))
          {.#None}
          (value (++ @))
          
          {.#Some it}
          {try.#Success it})
        {try.#Failure ..no_one}))))

(the .public (member? = context candidate)
  (for_any (_ it)
    (-> (Equivalence it) (List it) it
        Bit))
  (any? (= candidate) context))

(the .public (example predicate)
  (for_any (_ it)
    (-> (Predicate it) (List it)
        (Try it)))
  (..one (function (_ value)
           (if (predicate value)
             {.#Some value}
             {.#None}))))

(the .public (interposed delimiter it)
  (for_any (_ it)
    (-> it (List it)
        (List it)))
  (when (..size it)
    0 it
    1 it

    size
    (let [last (-- size)
          new_size (n.+ size last)]
      (..abstraction
       (/.mix (function (_ @ value it)
                (let [@' (n.* 2 @)]
                  (if (n.= last @)
                    (/.has! @' value it)
                    (|> it
                        (/.has! @' value)
                        (/.has! (++ @') delimiter)))))
              (/.empty new_size)
              (..reification it))))))

(the .public (of_stack it)
  (for_any (_ it)
    (-> (Stack it)
        (List it)))
  (let [value (/.empty (stack.size it))]
    (exec
      (stack.mix (function (_ item @)
                   (exec
                     (/.has! @ item value)
                     (++ @)))
                 0
                 it)
      (..abstraction value))))

(the .public as_stack
  (for_any (_ it)
    (-> (List it)
        (Stack it)))
  (|>> ..reversed
       (..mix (function (_ head tail)
                {.#Top head tail})
              {.#Empty})))

(the .public (split_at position it)
  (for_any (_ it)
    (-> Natural (List it)
        [(List it) (List it)]))
  [(first position it)
   (after position it)])
