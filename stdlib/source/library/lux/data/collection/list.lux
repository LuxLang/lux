... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except revised all only with when)
   [abstract
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    ["[0]" functor (.only Functor)]
    ["[0]" monad (.only Monad do)]
    ["[0]" enum]]
   [algorithm
    [mix (.only Mix)]]
   [control
    [error (.only error)]
    ["[0]" try (.only Try)]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" bit]
    ["[0]" product]]
   [math
    [number
     ["n" natural]]]]])

(the with_template' (.in_module# .prelude .with_template))
(the template#macro (.in_module# .prelude .template#macro))

... (every (List of)
...   (Variant
...    {#End}
...    {#Item of (List of)}))

(the .public mix
  (Mix List)
  (implementation
   (the (mix f init xs)
     (.when xs
       {.#Item x xs'}
       (mix f (f x init) xs')

       end
       init))))

(the .public (mixes f init inputs)
  (for_any (_ of mix)
    (-> (-> of mix mix) mix (List of)
        (List mix)))
  (.when inputs
    {.#Item [head tail]}
    {.#Item [init (mixes f (f head init) tail)]}

    end
    (list init)))

(the .public (reversed it)
  (for_any (_ of)
    (-> (List of)
        (List of)))
  (mix (function (_ head tail)
         {.#Item head tail})
       {.#End}
       it))

(the .public (only keep? xs)
  (for_any (_ of)
    (-> (Predicate of) (List of)
        (List of)))
  (.when xs
    {.#Item x xs'}
    (if (keep? x)
      {.#Item x (only keep? xs')}
      (only keep? xs'))

    end
    end))

(the .public (partition satisfies? list)
  (for_any (_ of)
    (-> (Predicate of) (List of)
        [(List of) (List of)]))
  (.when list
    {.#Item head tail}
    (let [[in out] (partition satisfies? tail)]
      (if (satisfies? head)
        [{.#Item head in} out]
        [in {.#Item head out}]))

    end
    [end end]))

(the .public partial
  (macro (_ tokens state)
    (.when (reversed tokens)
      {.#Item tail heads}
      {.#Right [state (list (..mix (function (_ head tail)
                                     (` {.#Item (, head) (, tail)}))
                                   tail
                                   heads))]}

      _
      {.#Left .wrong_syntax})))

(the .public un_even
  (..error "Cannot pair values of an un-even list."))

(the .public (pairs xs)
  (for_any (_ of)
    (-> (List of)
        (Try (List [of of]))))
  (.when xs
    (..partial x1 x2 xs')
    (.when (pairs xs')
      {try.#Success tail}
      {try.#Success (partial [x1 x2] tail)}

      failure
      failure)

    (list)
    {try.#Success (list)}

    _
    {try.#Failure ..un_even}))

(with_template' [<name> <then> <else>]
  [(the .public (<name> n xs)
     (for_any (_ of)
       (-> Natural (List of)
           (List of)))
     (if (n.> 0 n)
       (.when xs
         {.#Item x xs'}
         <then>

         end
         end)
       <else>))]
  
  [first {.#Item x (first (-- n) xs')} {.#End}]
  [after (after (-- n) xs') xs]
  )

(with_template' [<name> <then> <else>]
  [(the .public (<name> predicate xs)
     (for_any (_ of)
       (-> (Predicate of) (List of)
           (List of)))
     (.when xs
       {.#Item x xs'}
       (if (predicate x)
         <then>
         <else>)

       end
       end))]

  [while {.#Item x (while predicate xs')} {.#End}]
  [until xs (until predicate xs')]
  )

(the .public (split_at n xs)
  (for_any (_ of)
    (-> Natural (List of)
        [(List of) (List of)]))
  (.when n
    0 [{.#End} xs]
    _ (.when xs
        {.#Item x xs'}
        (let [[tail rest] (split_at (-- n) xs')]
          [{.#Item x tail} rest])

        end
        [end end])))

(the (split_when' predicate ys xs)
  (for_any (_ of)
    (-> (Predicate of) (List of) (List of)
        [(List of) (List of)]))
  (.when xs
    {.#Item x xs'}
    (if (predicate x)
      [ys xs]
      (split_when' predicate {.#Item x ys} xs'))

    end
    [ys xs]))

(the .public (split_when predicate xs)
  (for_any (_ of)
    (-> (Predicate of) (List of)
        [(List of) (List of)]))
  (let [[ys' xs'] (split_when' predicate {.#End} xs)]
    [(reversed ys') xs']))

(the .public (sub size list)
  (for_any (_ of)
    (-> Natural (List of)
        (List (List of))))
  (.when list
    {.#End}
    {.#End}

    _
    (let [[pre post] (split_at size list)]
      {.#Item pre (sub size post)})))

(the .public (repeated n x)
  (for_any (_ of)
    (-> Natural of
        (List of)))
  (.when n
    0 {.#End}
    _ {.#Item x (repeated (-- n) x)}))

(the (iterations' f x)
  (for_any (_ of)
    (-> (-> of (Maybe of)) of
        (List of)))
  (.when (f x)
    {.#Some x'}
    {.#Item x (iterations' f x')}

    {.#None}
    (list)))

(the .public (iterations f x)
  (for_any (_ of)
    (-> (-> of (Maybe of)) of
        (List of)))
  (.when (f x)
    {.#Some x'}
    {.#Item x (iterations' f x')}

    {.#None}
    (list x)))

(the .public no_one
  (..error "No one value to be found."))

(the .public (one check xs)
  (for_any (_ input output)
    (-> (-> input (Maybe output)) (List input)
        (Try output)))
  (.when xs
    {.#Item x xs'}
    (.when (check x)
      {.#None}
      (one check xs')

      {.#Some it}
      {try.#Success it})

    end
    {try.#Failure ..no_one}))

(the .public (all check xs)
  (for_any (_ a b)
    (-> (-> a (Maybe b)) (List a) (List b)))
  (for .js
       ... TODO: Stop relying on this ASAP.
       (mix (function (_ head tail)
              (.when (check head)
                {.#Some head}
                {.#Item head tail}
                
                {.#None}
                tail))
            {.#End}
            (reversed xs))
       (.when xs
         {.#Item x xs'}
         (.when (check x)
           {.#Some output}
           {.#Item output (all check xs')}
           
           {.#None}
           (all check xs'))

         {.#End}
         {.#End})))

(the .public (example predicate xs)
  (for_any (_ of)
    (-> (Predicate of) (List of)
        (Try of)))
  (..one (function (_ value)
           (if (predicate value)
             {.#Some value}
             {.#None}))
         xs))

(the .public (interposed sep xs)
  (for_any (_ of)
    (-> of (List of)
        (List of)))
  (.when xs
    (list x)
    xs

    (..partial x xs')
    (..partial x sep (interposed sep xs'))

    end
    end))

(the .public size
  (for_any (_ of)
    (-> (List of)
        Nat))
  (mix (function (_ _ acc)
         (++ acc))
       0))

(with_template' [<name> <init> <op>]
  [(the .public (<name> predicate items)
     (for_any (_ of)
       (-> (Predicate of)
           (Predicate (List of))))
     (.when items
       {.#Item head tail}
       (<op> (predicate head)
             (<name> predicate tail))

       end
       <init>))]

  [every? #1 and]
  [any?   #0 or]
  )

(the .public no_item
  (..error "The list lacks a value at that index."))

(the .public (item i xs)
  (for_any (_ of)
    (-> Natural (List of)
        (Try of)))
  (.when xs
    {.#Item x xs'}
    (.when i
      0 {try.#Success x}
      _ (item (-- i) xs'))

    end
    {try.#Failure ..no_item}))

(the .public (equivalence Equivalence<a>)
  (for_any (_ of)
    (-> (Equivalence of)
        (Equivalence (List of))))
  (implementation
   (the (= xs ys)
     (.when [xs ys]
       [{.#End} {.#End}]
       true

       [{.#Item x xs'} {.#Item y ys'}]
       (and (by Equivalence<a> = x y)
            (= xs' ys'))

       [_ _]
       false))))

(the .public (hash super)
  (for_any (_ of)
    (-> (Hash of)
        (Hash (List of))))
  (implementation
   (the equivalence
     (..equivalence (by super equivalence)))
   
   (the hash
     (by ..mix mix
         (function (_ member hash)
           (n.+ (by super hash member) hash))
         0))))

(the .public monoid
  (for_any (_ of)
    (Monoid (List of)))
  (implementation
   (the identity
     {.#End})
   (the (composite left right)
     ... TODO: Use the more obvious implementation once "tail recursion modulo cons" is added to the compiler.
     (mix (function (_ head tail)
            {.#Item head tail})
          right
          (reversed left)))))

(use "[0]" ..monoid)

(the .public functor
  (Functor List)
  (implementation
   (the (each f it)
     ... TODO: Use the more obvious implementation once "tail recursion modulo cons" is added to the compiler.
     (mix (function (_ head tail)
            {.#Item (f head) tail})
          (list)
          (reversed it)))))

(use "[0]" ..functor)

(the .public monad
  (Monad List)
  (implementation
   (the functor ..functor)

   (the in
     (|>> list))

   (the conjoint
     (|>> reversed (mix composite identity)))))

(the .public (sorted < xs)
  (for_any (_ of)
    (-> (-> of of Bit) (List of)
        (List of)))
  (.when xs
    {.#Item x xs'}
    (let [[pre post] (mix (function (_ x' [pre post])
                            (if (< x x')
                              [{.#Item x' pre} post]
                              [pre {.#Item x' post}]))
                          (`` [(is (,, (type_of xs))
                                   (list))
                               (is (,, (type_of xs))
                                   (list))])
                          xs')]
      (.all composite
            (sorted < pre)
            (list x)
            (sorted < post)))

    end
    end))

(the .public (empty? xs)
  (for_any (_ of)
    (Predicate (List of)))
  (.when xs
    {.#End}
    true
    
    _
    false))

(the .public (member? eq xs x)
  (for_any (_ of)
    (-> (Equivalence of) (List of) of
        Bit))
  (.when xs
    {.#Item x' xs'}
    (or (by eq = x x')
        (member? eq xs' x))

    end
    false))

(the .public empty
  (..error "Empty list."))

(with_template' [<side> <output>]
  [(the .public (<side> it)
     (for_any (_ of)
       (-> (List of)
           (Try <output>)))
     (.when it
       {.#Item head tail}
       {try.#Success <side>}

       end
       {try.#Failure ..empty}))]

  [head of]
  [tail (List of)]
  )

(the .public (indices size)
  (-> Natural
      (List Natural))
  (.when size
    0 (list)
    _ (|> size -- (enum.range n.enum 0))))

(the (name$ name)
  (-> Text
      Code)
  [["" 0 0] {.#Name "" name}])

(the (natural#injection value)
  (-> Natural
      Text)
  (loop (again [input value
                output ""])
    (let [digit (.when (n.% 10 input)
                  0 "0"
                  1 "1"
                  2 "2"
                  3 "3"
                  4 "4"
                  5 "5"
                  6 "6"
                  7 "7"
                  8 "8"
                  9 "9"
                  _ (undefined))
          output' (.text_composite# digit output)
          input' (n./ 10 input)]
      (.when input'
        0 output'
        _ (again input' output')))))

(the .public cannot_zip_0_lists
  (..error "Cannot zip 0 lists."))

(the .public zipped
  (macro (_ tokens state)
    (.when tokens
      (list [_ {.#Natural num_lists}])
      (if (n.> 0 num_lists)
        (let [(open "[0]") ..functor
              indices (..indices num_lists)
              type_vars (is (List Code) (each (|>> natural#injection name$) indices))
              zipped_type (` (.for_any ((, (name$ "0_")) (,* type_vars))
                               (-> (,* (each (is (-> Code Code) (function (_ var) (` (List (, var)))))
                                             type_vars))
                                   (List [(,* type_vars)]))))
              vars+lists (|> indices
                             (each ++)
                             (each (function (_ idx)
                                     (let [base (natural#injection idx)]
                                       [(name$ base)
                                        (name$ (.text_composite# base "'"))]))))
              pattern (` [(,* (each (function (_ [v vs]) (` {.#Item (, v) (, vs)}))
                                    vars+lists))])
              'step (name$ "0step0")
              'blank (name$ "0,0")
              list_vars (each product.right vars+lists)
              code (` (is (, zipped_type)
                          (function ((, 'step) (,* list_vars))
                            (.when [(,* list_vars)]
                              (, pattern)
                              {.#Item [(,* (each product.left vars+lists))]
                                      ((, 'step) (,* list_vars))}

                              (, 'blank)
                              {.#End}))))]
          {.#Right [state (list code)]})
        {.#Left ..cannot_zip_0_lists})

      _
      {.#Left .wrong_syntax})))

(the .public zipped_2 (zipped 2))
(the .public zipped_3 (zipped 3))

(the .public zipped_with
  (macro (_ tokens state)
    (.when tokens
      (list [_ {.#Natural num_lists}])
      (if (n.> 0 num_lists)
        (let [(open "[0]") ..functor
              indices (..indices num_lists)
              'return_type (name$ "0return_type0")
              'func (name$ "0func0")
              type_vars (is (List Code) (each (|>> natural#injection name$) indices))
              zipped_type (` (for_any ((, (name$ "0_")) (,* type_vars) (, 'return_type))
                               (-> (-> (,* type_vars) (, 'return_type))
                                   (,* (each (is (-> Code Code) (function (_ var) (` (List (, var)))))
                                             type_vars))
                                   (List (, 'return_type)))))
              vars+lists (|> indices
                             (each ++)
                             (each (function (_ idx)
                                     (let [base (natural#injection idx)]
                                       [(name$ base)
                                        (name$ (.text_composite# base "'"))]))))
              pattern (` [(,* (each (function (_ [v vs]) (` {.#Item (, v) (, vs)}))
                                    vars+lists))])
              'step (name$ "0step0")
              'blank (name$ "0,0")
              list_vars (each product.right vars+lists)
              code (` (is (, zipped_type)
                          (function ((, 'step) (, 'func) (,* list_vars))
                            (.when [(,* list_vars)]
                              (, pattern)
                              {.#Item ((, 'func) (,* (each product.left vars+lists)))
                                      ((, 'step) (, 'func) (,* list_vars))}

                              (, 'blank)
                              {.#End}))))]
          {.#Right [state (list code)]})
        {.#Left ..cannot_zip_0_lists})

      _
      {.#Left .wrong_syntax})))

(the .public zipped_with_2 (zipped_with 2))
(the .public zipped_with_3 (zipped_with 3))

(the .public (last xs)
  (for_any (_ of)
    (-> (List of)
        (Try of)))
  (.when xs
    (list x)
    {try.#Success x}
    
    (..partial x xs')
    (last xs')

    end
    {try.#Failure ..empty}))

(the .public (inits xs)
  (for_any (_ of)
    (-> (List of)
        (Try (List of))))
  (.when xs
    (list x)
    {try.#Success {.#End}}
    
    (..partial x xs')
    (.when (inits xs')
      {try.#Success tail}
      {try.#Success {.#Item x tail}}

      {try.#Failure _}
      (undefined))

    end
    {try.#Failure ..empty}
    ))

(the .public together
  (for_any (_ of)
    (-> (List (List of))
        (List of)))
  (by ..monad conjoint))

(the .public (with monad)
  (for_any (_ !)
    (-> (Monad !)
        (Monad (for_any (_ of)
                 (! (List of))))))
  (implementation
   (the functor
     (functor.composite (its monad.functor monad)
                        ..functor))

   (the in
     (|>> (by ..monad in) (by monad in)))
   
   (the (conjoint MlMla)
     (do [! monad]
       [lMla MlMla
        lla (monad.all ! lMla)]
       (in (..together lla))))))

(the .public (lifted monad)
  (for_any (_ ! of)
    (-> (Monad !)
        (-> (! of)
            (! (List of)))))
  (by monad each (by ..monad in)))

(the .public (enumeration xs)
  (for_any (_ of)
    (-> (List of)
        (List [Natural of])))
  (loop (again [idx 0
                xs xs])
    (.when xs
      {.#Item x xs'}
      {.#Item [idx x] (again (++ idx) xs')}

      end
      (list))))

(the .public when
  (template#macro
   (_ <test> <then>)
   [(if <test>
      <then>
      (list))]))

(the .public (revised item revision it)
  (for_any (_ of)
    (-> Natural (-> of of) (List of)
        (List of)))
  (.when it
    {.#Item head tail}
    (.when item
      0 {.#Item (revision head) tail}
      _ (revised (-- item) revision it))

    end
    end))
