(.module:
  [library
   [lux #*
    [abstract
     [monoid (#+ Monoid)]
     [equivalence (#+ Equivalence)]
     [hash (#+ Hash)]
     [codec (#+ Codec)]]
    [control
     ["." function]]]])

(template [<zero> <one>]
  [(def: .public <zero> Bit #0)
   (def: .public <one> Bit  #1)]

  [no  yes]
  [off on]
  )

(implementation: .public equivalence
  (Equivalence Bit)
  
  (def: (= x y)
    (if x
      y
      (not y))))

(implementation: .public hash
  (Hash Bit)
  
  (def: &equivalence ..equivalence)
  
  (def: (hash value)
    (case value
      #0 2
      #1 3)))

(template [<name> <identity> <op>]
  [(implementation: .public <name>
     (Monoid Bit)
     
     (def: identity <identity>)
     (def: (compose x y) (<op> x y)))]

  [disjunction #0 or]
  [conjunction #1 and]
  )

(implementation: .public codec
  (Codec Text Bit)
  
  (def: (encode x)
    (if x
      "#1"
      "#0"))

  (def: (decode input)
    (case input
      "#1" (#.Right #1)
      "#0" (#.Right #0)
      _    (#.Left "Wrong syntax for Bit."))))

(def: .public complement
  {#.doc (example "Generates the complement of a predicate."
                  "That is a predicate that returns the oposite of the original predicate.")}
  (All [a] (-> (-> a Bit) (-> a Bit)))
  (function.composite not))
