(.using
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    [monad (.only Monad)]
    [comonad (.only CoMonad)]]
   [control
    ["[0]" function]]]])

(type: .public (Identity a)
  a)

(def: .public functor
  (Functor Identity)
  (implementation
   (def: each function.identity)))

(def: .public apply
  (Apply Identity)
  (implementation
   (def: functor ..functor)
   (def: (on fa ff)
     (ff fa))))

(def: .public monad
  (Monad Identity)
  (implementation
   (def: functor ..functor)
   (def: in function.identity)
   (def: conjoint function.identity)))

(def: .public comonad
  (CoMonad Identity)
  (implementation
   (def: functor ..functor)
   (def: out function.identity)
   (def: disjoint function.identity)))
