(.module:
  [library
   [lux #*
    [abstract
     [functor (#+ Functor)]
     [apply (#+ Apply)]
     [monad (#+ Monad)]
     [comonad (#+ CoMonad)]]
    [control
     ["." function]]]])

(type: #export (Identity a)
  a)

(implementation: #export functor
  (Functor Identity)

  (def: map function.identity))

(implementation: #export apply
  (Apply Identity)

  (def: &functor ..functor)
  (def: (apply ff fa) (ff fa)))

(implementation: #export monad
  (Monad Identity)
  
  (def: &functor ..functor)
  (def: in function.identity)
  (def: join function.identity))

(implementation: #export comonad
  (CoMonad Identity)
  
  (def: &functor ..functor)
  (def: out function.identity)
  (def: split function.identity))
