(.using
  [library
   [lux "*"
    [abstract
     [functor {"+" Functor}]
     [apply {"+" Apply}]
     [monad {"+" Monad}]
     [comonad {"+" CoMonad}]]
    [control
     ["[0]" function]]]])

(type: .public (Identity a)
  a)

(implementation: .public functor
  (Functor Identity)

  (def: each function.identity))

(implementation: .public apply
  (Apply Identity)

  (def: &functor ..functor)
  (def: (on fa ff)
    (ff fa)))

(implementation: .public monad
  (Monad Identity)
  
  (def: &functor ..functor)
  (def: in function.identity)
  (def: conjoint function.identity))

(implementation: .public comonad
  (CoMonad Identity)
  
  (def: &functor ..functor)
  (def: out function.identity)
  (def: disjoint function.identity))
