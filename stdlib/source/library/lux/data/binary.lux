... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [monoid (.only Monoid)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" array
      [\\unsafe (.only)]]]]
   [math
    [number
     ["n" natural]
     ["[0]" i64]]]
   [macro
    ["[0]" template]]]]
 ["[0]" /
  ["[1]" \\unsafe]])

(every .public Binary
  /.Binary)

(every .public Index
  /.Index)

(the .public size
  (-> Binary
      Natural)
  (|>> /.size))

(the .public limit
  Natural
  (i64.left_shifted 31 1))

(the .public empty
  (-> Natural
      Binary)
  (|>> /.empty))

(the .public (mix $ init it)
  (for_any (_ a)
    (-> (-> I64 a a) a Binary
        a))
  (let [size (/.size it)]
    (loop (again [index 0
                  output init])
      (if (n.< size index)
        (again (++ index) ($ (/.bits_08 index it) output))
        output))))

(exception.the .public (index_out_of_bounds [size index])
  (Exception [Natural Index])
  (exception.report
   (stack ["Size" (%.natural size)]
          ["Index" (%.natural index)])))

(template.with [<safe> <unsafe> <shift>]
  [(the .public (<safe> index it)
     (-> Index Binary
         (Try I64))
     (if (n.< (/.size it) (|> index <shift>))
       {try.#Success (<unsafe> index it)}
       (exception.except ..index_out_of_bounds [(/.size it) index])))]

  [bits_08 /.bits_08 (|>)]
  [bits_16 /.bits_16 (n.+ 1)]
  [bits_32 /.bits_32 (n.+ 3)]
  [bits_64 /.bits_64 (n.+ 7)]
  )

(template.with [<safe> <unsafe> <shift>]
  [(the .public (<safe> index value it)
     (-> Index (I64 Any) Binary
         (Try Binary))
     (if (n.< (/.size it) (|> index <shift>))
       {try.#Success (<unsafe> index value it)}
       (exception.except ..index_out_of_bounds [(/.size it) index])))]

  [has_08! /.has_08! (|>)]
  [has_16! /.has_16! (n.+ 1)]
  [has_32! /.has_32! (n.+ 3)]
  [has_64! /.has_64! (n.+ 7)]
  )

(the .public equivalence
  (Equivalence Binary)
  (implementation
   (the (= expected actual)
     (/.= expected actual))))

(alias [=]
       ..equivalence)

(the .public hash
  (Hash Binary)
  (implementation
   (the equivalence ..equivalence)
   (the hash
     (..mix (function (_ byte hash)
              (i64.xor byte (i64.left_rotated 1 hash)))
            0))))

(exception.the .public (cannot_copy [bytes source_input target_output])
  (Exception [Natural Index Index])
  (exception.report
   (stack ["Bytes" (%.natural bytes)]
          ["Source input space" (%.natural source_input)]
          ["Target output space" (%.natural target_output)])))

(the .public (copy! bytes source_offset source target_offset target)
  (-> Natural Index Binary Index Binary
      (Try Binary))
  (let [source_input (n.- source_offset (/.size source))
        target_output (n.- target_offset (/.size target))]
    (if (or (n.< bytes source_input)
            (n.< bytes target_output))
      (exception.except ..cannot_copy [bytes source_input target_output])
      {try.#Success (/.copy! bytes source_offset source target_offset target)})))

(the .public (copy it)
  (-> Binary
      Binary)
  (let [size (..size it)]
    (/.copy! size 0 it 0 (..empty size))))

(exception.the .public (slice_out_of_bounds [size offset length])
  (Exception [Natural Index Natural])
  (exception.report
   (stack ["Size" (%.natural size)]
          ["Offset" (%.natural offset)]
          ["Length" (%.natural length)])))

(the .public (slice offset length binary)
  (-> Index Natural Binary
      (Try Binary))
  (let [size (/.size binary)
        limit (n.+ length offset)]
    (if (n.< limit size)
      (exception.except ..slice_out_of_bounds [size offset length])
      {try.#Success (/.slice offset length binary)})))

(the .public (after bytes binary)
  (-> Natural Binary
      Binary)
  (if (n.= 0 bytes)
    (..copy binary)

    (n.< (/.size binary) bytes)
    (/.slice bytes (n.- bytes (/.size binary)) binary)

    ... else
    (/.empty 0)))

(the .public monoid
  (Monoid Binary)
  (implementation
   (the identity
     (/.empty 0))

   (the (composite left right)
     (let [sizeL (/.size left)
           sizeR (/.size right)]
       (|> (/.empty (n.+ sizeL sizeR))
           (/.copy! sizeL 0 left 0)
           (/.copy! sizeR 0 right sizeL))))))
