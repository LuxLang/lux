(.module:
  [library
   [lux (#- and or not)
    [control
     [parser
      ["s" code]]]
    [data
     [text
      ["%" format (#+ format)]]]
    [macro
     ["." template]
     ["." code]
     [syntax (#+ syntax:)]]
    [type
     abstract]]]
  ["." // #_
   ["#." value (#+ Value Length Count Resolution Ratio
                   Orientation Scan Boolean Update
                   Block_Overflow Inline_Overflow
                   Display_Mode Color_Gamut Inverted_Colors
                   Pointer Hover
                   Light Scripting Motion Color_Scheme)]])

(syntax: (text_identifier {identifier s.text})
  (in (list (code.local_identifier (text.replace_all "-" "_" identifier)))))

(abstract: #export Media
  Text

  (def: #export media
    (-> Media Text)
    (|>> :representation))

  (template [<media>]
    [(`` (def: #export (~~ (text_identifier <media>))
           Media
           (:abstraction <media>)))]

    ["all"]
    ["print"]
    ["screen"]
    ["speech"]
    ))

(abstract: #export Feature
  Text

  (def: #export feature
    (-> Feature Text)
    (|>> :representation))

  (template [<feature> <brand>]
    [(`` (def: #export ((~~ (text_identifier <feature>)) input)
           (-> (Value <brand>) Feature)
           (:abstraction (format "(" <feature> ": " (//value.value input) ")"))))]

    ["min-color" Count]
    ["color" Count]
    ["max-color" Count]

    ["min-color-index" Count]
    ["color-index" Count]
    ["max-color-index" Count]

    ["min-monochrome" Count]
    ["monochrome" Count]
    ["max-monochrome" Count]

    ["min-height" Length]
    ["height" Length]
    ["max-height" Length]

    ["min-width" Length]
    ["width" Length]
    ["max-width" Length]

    ["min-resolution" Resolution]
    ["resolution" Resolution]
    ["max-resolution" Resolution]

    ["aspect-ratio" Ratio]
    ["max-aspect-ratio" Ratio]
    ["min-aspect-ratio" Ratio]

    ["display-mode" Display_Mode]
    ["color-gamut" Color_Gamut]
    ["grid" Boolean]
    ["orientation" Orientation]
    ["overflow-block" Block_Overflow]
    ["overflow-inline" Inline_Overflow]
    ["scan" Scan]
    ["update" Update]
    ["inverted-colors" Inverted_Colors]
    ["pointer" Pointer]
    ["any-pointer" Pointer]
    ["hover" Hover]
    ["any-hover" Hover]
    ["light-level" Light]
    ["scripting" Scripting]
    ["prefers-reduced-motion" Motion]
    ["prefers-color-scheme" Color_Scheme]
    )
  )

(abstract: #export Query
  Text

  (def: #export query
    (-> Query Text)
    (|>> :representation))

  (template [<name> <operator>]
    [(def: #export <name>
       (-> Media Query)
       (|>> ..media (format <operator>) :abstraction))]

    [except "not "]
    [only "only "]
    )

  (def: #export not
    (-> Feature Query)
    (|>> ..feature (format "not ") :abstraction))

  (template [<name> <operator>]
    [(def: #export (<name> left right)
       (-> Query Query Query)
       (:abstraction (format (:representation left)
                             <operator>
                             (:representation right))))]

    [and " and "]
    [or " or "]
    )
  )
