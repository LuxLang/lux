(.require
 [library
  [lux (.except and or not)
   [data
    ["[0]" text (.only)
     ["%" \\format (.only format)]]]
   [macro
    [syntax (.only syntax)]
    ["[0]" template]]
   [meta
    ["[0]" code (.only syntax)
     ["s" \\parser]]
    [type
     [primitive (.except)]]]]]
 ["[0]" //
  ["[1][0]" value (.only Value Length Count Resolution Ratio
                         Orientation Scan Boolean Update
                         Block_Overflow Inline_Overflow
                         Display_Mode Color_Gamut Inverted_Colors
                         Pointer Hover
                         Light Scripting Motion Color_Scheme)]])

(def text_symbol
  (syntax (_ [symbol s.text])
    (in (list (code.local (text.replaced "-" "_" symbol))))))

(primitive .public Media
  Text

  (def .public media
    (-> Media Text)
    (|>> representation))

  (with_template [<media>]
    [(`` (def .public (,, (text_symbol <media>))
           Media
           (abstraction <media>)))]

    ["all"]
    ["print"]
    ["screen"]
    ["speech"]
    ))

(primitive .public Feature
  Text

  (def .public feature
    (-> Feature Text)
    (|>> representation))

  (with_template [<feature> <brand>]
    [(`` (def .public ((,, (text_symbol <feature>)) input)
           (-> (Value <brand>) Feature)
           (abstraction (format "(" <feature> ": " (//value.value input) ")"))))]

    ["min-color" Count]
    ["color" Count]
    ["max-color" Count]

    ["min-color-index" Count]
    ["color-index" Count]
    ["max-color-index" Count]

    ["min-monochrome" Count]
    ["monochrome" Count]
    ["max-monochrome" Count]

    ["min-height" Length]
    ["height" Length]
    ["max-height" Length]

    ["min-width" Length]
    ["width" Length]
    ["max-width" Length]

    ["min-resolution" Resolution]
    ["resolution" Resolution]
    ["max-resolution" Resolution]

    ["aspect-ratio" Ratio]
    ["max-aspect-ratio" Ratio]
    ["min-aspect-ratio" Ratio]

    ["display-mode" Display_Mode]
    ["color-gamut" Color_Gamut]
    ["grid" Boolean]
    ["orientation" Orientation]
    ["overflow-block" Block_Overflow]
    ["overflow-inline" Inline_Overflow]
    ["scan" Scan]
    ["update" Update]
    ["inverted-colors" Inverted_Colors]
    ["pointer" Pointer]
    ["any-pointer" Pointer]
    ["hover" Hover]
    ["any-hover" Hover]
    ["light-level" Light]
    ["scripting" Scripting]
    ["prefers-reduced-motion" Motion]
    ["prefers-color-scheme" Color_Scheme]
    )
  )

(primitive .public Query
  Text

  (def .public query
    (-> Query Text)
    (|>> representation))

  (with_template [<name> <operator>]
    [(def .public <name>
       (-> Media Query)
       (|>> ..media (format <operator>) abstraction))]

    [except "not "]
    [only "only "]
    )

  (def .public not
    (-> Feature Query)
    (|>> ..feature (format "not ") abstraction))

  (with_template [<name> <operator>]
    [(def .public (<name> left right)
       (-> Query Query Query)
       (abstraction (format (representation left)
                            <operator>
                            (representation right))))]

    [and " and "]
    [or " or "]
    )
  )
