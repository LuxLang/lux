(.require
 [library
  [lux (.except)
   ["[0]" meta]
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" text (.use "[1]#[0]" hash)
     ["%" \\format (.only format)]]]
   [meta
    ["[0]" code]
    [macro
     [syntax (.only syntax)]]
    [type
     [primitive (.except)]]]]])

(primitive .public ID
  Text

  (def .public id
    (-> ID Text)
    (|>> representation))

  (def .public custom
    (-> Text ID)
    (|>> abstraction))

  (def .public generic
    (syntax (_ [])
      (do meta.monad
        [module meta.current_module_name
         id meta.seed]
        (in (list (` (..custom (, (code.text (format "i" (%.nat_16 id)
                                                     "_" (%.nat_16 (text#hash module))))))))))))
  )
