(.module:
  [library
   [lux (#- and)
    [data
     ["." maybe]
     [number
      ["." nat]]
     ["." text
      ["%" format (#+ format)]
      ["." encoding (#+ Encoding)]]
     [collection
      ["." list ("#\." functor)]]]
    [type
     abstract]
    [world
     [net (#+ URL)]]]]
  ["." / #_
   ["#." selector (#+ Selector Combinator)]
   ["#." value (#+ Value Animation Percentage)]
   ["#." font (#+ Font)]
   ["#." style (#+ Style)]
   ["#." query (#+ Query)]])

(abstract: #export Common Any)
(abstract: #export Special Any)

(abstract: #export (CSS brand)
  Text

  (def: #export css
    (-> (CSS Any) Text)
    (|>> :representation))

  (def: #export empty
    (CSS Common)
    (:abstraction ""))

  (def: #export (rule selector style)
    (-> (Selector Any) Style (CSS Common))
    (:abstraction (format (/selector.selector selector) "{" (/style.inline style) "}")))

  (def: #export char_set
    (-> Encoding (CSS Special))
    (|>> encoding.name
         %.text
         (text.enclosed ["@charset " ";"])
         :abstraction))

  (def: #export (font font)
    (-> Font (CSS Special))
    (let [with_unicode (case (get@ #/font.unicode_range font)
                         (#.Some unicode_range)
                         (let [unicode_range' (format "U+" (\ nat.hex encode (get@ #/font.start unicode_range))
                                                      "-" (\ nat.hex encode (get@ #/font.end unicode_range)))]
                           (list ["unicode-range" unicode_range']))
                         
                         #.None
                         (list))]
      (|> (list& ["font-family" (get@ #/font.family font)]
                 ["src" (format "url(" (get@ #/font.source font) ")")]
                 ["font-stretch" (|> font (get@ #/font.stretch) (maybe.else /value.normal_stretch) /value.value)]
                 ["font-style" (|> font (get@ #/font.style) (maybe.else /value.normal_style) /value.value)]
                 ["font-weight" (|> font (get@ #/font.weight) (maybe.else /value.normal_weight) /value.value)]
                 with_unicode)
          (list\map (function (_ [property value])
                      (format property ": " value ";")))
          (text.join_with /style.separator)
          (text.enclosed ["{" "}"])
          (format "@font-face")
          :abstraction)))

  (def: #export (import url query)
    (-> URL (Maybe Query) (CSS Special))
    (:abstraction (format (format "@import url(" (%.text url) ")")
                          (case query
                            (#.Some query)
                            (format " " (/query.query query))
                            
                            #.None
                            "")
                          ";")))

  (def: css_separator
    text.new_line)

  (type: #export Frame
    {#when Percentage
     #what Style})

  (def: #export (key_frames animation frames)
    (-> (Value Animation) (List Frame) (CSS Special))
    (:abstraction (format "@keyframes " (/value.value animation) " {"
                          (|> frames
                              (list\map (function (_ frame)
                                          (format (/value.percentage (get@ #when frame)) " {"
                                                  (/style.inline (get@ #what frame))
                                                  "}")))
                              (text.join_with ..css_separator))
                          "}")))

  (template: (!compose <pre> <post>)
    (:abstraction (format (:representation <pre>) ..css_separator
                          (:representation <post>))))
  
  (def: #export (and pre post)
    (-> (CSS Any) (CSS Any) (CSS Any))
    (!compose pre post))

  (def: #export (alter combinator selector css)
    (-> Combinator (Selector Any) (CSS Common) (CSS Common))
    (|> css
        :representation
        (text.split_all_with ..css_separator)
        (list\map (|>> (format (/selector.selector (|> selector (combinator (/selector.tag "")))))))
        (text.join_with ..css_separator)
        :abstraction))

  (def: #export (dependent combinator selector style inner)
    (-> Combinator (Selector Any) Style (CSS Common) (CSS Common))
    (!compose (..rule selector style)
              (..alter combinator selector inner)))

  (template [<name> <combinator>]
    [(def: #export <name>
       (-> (Selector Any) Style (CSS Common) (CSS Common))
       (..dependent <combinator>))]

    [with_descendants /selector.in]
    [with_children /selector.sub]
    )
  )
