... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except has text natural integer revolution list
                or and
                variant record)
   [abstract
    [equivalence (.only Equivalence)]
    [format (.only Format)]
    [monad (.only do)]
    ["<>" projection (.use "[1]#[0]" monad)]]
   [control
    ["[0]" pipe]
    ["[0]" maybe]]
   [error
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception (.only Exception)]]
   ["[0]" function (.only)
    [predicate (.only Predicate)]]
   [data
    ["[0]" bit]
    ["[0]" product]
    ["[0]" text (.only \n)
     ["<[1]>" \\projection (.only Projection)]
     ["[0]" escape]]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid mix functor)]
     ["[0]" dictionary (.only Dictionary) (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["[0]" natural]
     ["[0]" integer]
     ["[0]" revolution]
     ["[0]" decimal (.use "[1]#[0]" base_10)]
     ["[0]" i64]]]
   [macro
    ["[0]" syntax]
    ["[0]" template]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [time
    ["[0]" instant]
    ["[0]" duration]
    ["[0]" date]
    ["[0]" day]
    ["[0]" month]]]])

(template.with [<name> <type>]
  [(every .public <name>
     <type>)]

  [Null    Any]
  [Boolean Bit]
  [Number  Decimal]
  [String  Text]
  )

(every .public JSON
  (Rec JSON
    (Variant
     {#Null    Null}
     {#Boolean Boolean}
     {#Number  Number}
     {#String  String}
     {#Array   (List JSON)}
     {#Object  (Dictionary String JSON)})))

(template.with [<name> <type>]
  [(every .public <name>
     <type>)]

  [Array  (List JSON)]
  [Object (Dictionary String JSON)]
  )

(the .public null?
  (Predicate JSON)
  (|>> (pipe.when
         {#Null}
         true
         
         _
         false)))

(the .public object
  (-> (List [String JSON])
      JSON)
  (|>> (dictionary.of_list text.hash)
       {..#Object}))

(every JSON'
  (Rec JSON'
    (Variant
     {#Null'    Null}
     {#Boolean' Boolean}
     {#Number'  Number}
     {#String'  String}
     {#Array'   (List JSON')}
     {#Object'  (Dictionary String JSON')}
     {#Code'    Code})))

(the jsonP
  (<code>.Projection JSON')
  (<>.rec
   (function (_ jsonP)
     (all <>.or
          (<code>.form (<>#in []))
          <code>.bit
          <code>.decimal
          <code>.text
          (<>#each list.of_stack
                   (<code>.tuple (<>.some jsonP)))
          (<>#each (|>> list.of_stack (dictionary.of_list text.hash))
                   (<code>.variant (<>.some (<>.and <code>.text jsonP))))
          <code>.any
          ))))

(the (jsonF token)
  (-> JSON'
      Code)
  (`` (when token
        {#Null' _}
        (` {..#Null})
        
        (,, (template.with [<ctor> <input_tag> <output_tag>]
              [{<input_tag> value}
               (` {<output_tag> (, (<ctor> value))})]

              [code.bit  ..#Boolean' ..#Boolean]
              [code.decimal ..#Number' ..#Number]
              [code.text ..#String' ..#String]))
        
        {#Array' members}
        (` {..#Array (.list (,* (list.as_stack (list#each jsonF members))))})

        {#Object' pairs}
        (` {..#Object (dictionary.of_list text.hash
                                          (.list (,* (|> pairs
                                                         dictionary.entries
                                                         (list#each (function (_ [key_name value])
                                                                      (` [(, (code.text key_name)) (, (jsonF value))])))
                                                         list.as_stack))))})

        {#Code' code}
        code)))

(the .public json
  (syntax.macro (_ [token ..jsonP])
    (in (.stack (` (is JSON
                       (, (jsonF token))))))))

(the .public (fields json)
  (-> JSON
      (Try (List String)))
  (when json
    {#Object obj}
    {try.#Success (dictionary.keys obj)}

    _
    {try.#Failure "Cannot get the fields of a non-object."}))

(the .public (field key json)
  (-> String JSON
      (Try JSON))
  (when json
    {#Object obj}
    (when (dictionary.value key obj)
      {try.#Success value}
      {try.#Success value}

      failure
      {try.#Failure (.text "Missing field '" key "' on object.")})

    _
    {try.#Failure (.text "Cannot get field '" key "' on a non-object.")}))

(the .public (has key value json)
  (-> String JSON JSON
      (Try JSON))
  (when json
    {#Object obj}
    {try.#Success {#Object (dictionary.has key value obj)}}

    _
    {try.#Failure (.text "Cannot set field '" key "' on a non-object.")}))

(template.with [<name> <tag> <type>]
  [(the .public (<name> key json)
     (-> Text JSON
         (Try <type>))
     (when (field key json)
       {try.#Success {<tag> value}}
       {try.#Success value}

       {try.#Success _}
       {try.#Failure (.text "Wrong value type at key: " key)}

       {try.#Failure error}
       {try.#Failure error}))]

  [boolean_field #Boolean Boolean]
  [number_field  #Number  Number]
  [string_field  #String  String]
  [array_field   #Array   Array]
  [object_field  #Object  Object]
  )

(the .public equivalence
  (Equivalence JSON)
  (implementation
   (the (= x y)
     (`` (when [x y]
           [{#Null} {#Null}]
           true

           (,, (template.with [<tag> <struct>]
                 [[{<tag> x'} {<tag> y'}]
                  (by <struct> = x' y')]

                 [#Boolean bit.equivalence]
                 [#Number  decimal.equivalence]
                 [#String  text.equivalence]))

           [{#Array xs} {#Array ys}]
           (.and (natural.= (list.size xs) (list.size ys))
                 (list#mix (function (_ [x' y'] prev)
                             (.and prev
                                   (= x' y')))
                           true
                           (list.zipped_2 xs ys)))
           
           [{#Object xs} {#Object ys}]
           (.and (natural.= (dictionary.size xs) (dictionary.size ys))
                 (list#mix (function (_ [xk xv] prev)
                             (.and prev
                                   (when (dictionary.value xk ys)
                                     {try.#Success yv}
                                     (= xv yv)

                                     failure
                                     false)))
                           true
                           (dictionary.entries xs)))
           
           _
           false)))))

(alias [=]
       ..equivalence)

............................................................
............................................................
............................................................

(the (null_as_text _)
  (text.Injection Null)
  "null")

(the boolean_as_text
  (text.Injection Boolean)
  (|>> (pipe.when
         .false
         "false"
         
         .true
         "true")))

(the number_as_text
  (text.Injection Number)
  (|>> (pipe.when
         +0.0 ... OR -0.0
         "0.0"

         value
         (let [raw (by decimal.base_10 as value)]
           (if (decimal.< +0.0 value)
             raw
             (|> raw (text.split_at 1) maybe.trusted product.right))))))

(the string_as_text
  (text.Injection String)
  (|>> escape.escaped
       (text.enclosed [text.double_quote text.double_quote])))

(template.with [<token> <name>]
  [(the <name>
     Text
     <token>)]

  ... https://en.wikipedia.org/wiki/Delimiter
  ["," value_delimiter]
  [":" entry_delimiter]

  ["[" array_start]
  ["]" array_end]

  ["{" object_start]
  ["}" object_end]
  )

(the (array_as_text as_text)
  (-> (text.Injection JSON)
      (text.Injection Array))
  (|>> (list#each as_text)
       (text.interposed ..value_delimiter)
       (text.enclosed [..array_start ..array_end])))

(the (kv_as_text as_text [key value])
  (-> (text.Injection JSON)
      (text.Injection [String JSON]))
  (.text (..string_as_text key)
         ..entry_delimiter
         (as_text value)))

(the (object_as_text as_text)
  (-> (text.Injection JSON)
      (text.Injection Object))
  (|>> dictionary.entries
       (list#each (..kv_as_text as_text))
       (text.interposed ..value_delimiter)
       (text.enclosed [..object_start ..object_end])))

(the .public (as_text json)
  (text.Injection JSON)
  (`` (when json
        (,, (template.with [<tag> <as_text>]
              [{<tag> value}
               (<as_text> value)]

              [#Null    ..null_as_text]
              [#Boolean ..boolean_as_text]
              [#Number  ..number_as_text]
              [#String  ..string_as_text]
              [#Array   (..array_as_text as_text)]
              [#Object  (..object_as_text as_text)]))
        )))

............................................................
............................................................
............................................................

(the space_of
  (Projection Text)
  (<text>.some <text>.space))

(the value_delimiter_of
  (Projection [Text Any Text])
  (all <>.and
       ..space_of
       (<text>.this ..value_delimiter)
       ..space_of))

(the null_of
  (Projection Null)
  (do <>.monad
    [_ (<text>.this "null")]
    (in [])))

(template.with [<name> <token> <value>]
  [(the <name>
     (Projection Boolean)
     (do <>.monad
       [_ (<text>.this <token>)]
       (in <value>)))]

  [false_of "false" #0]
  [true_of  "true"  #1]
  )

(the boolean_of
  (Projection Boolean)
  (all <>.either
       ..true_of
       ..false_of))

(the number_of
  (Projection Number)
  (do [! <>.monad]
    [signed? (<>.parses? (<text>.this "-"))
     digits (<text>.many <text>.decimal)
     decimals (<>.else "0"
                       (do !
                         [_ (<text>.this ".")]
                         (<text>.many <text>.decimal)))
     exp (<>.else ""
                  (do !
                    [mark (<text>.one_of "eE")
                     signed?' (<>.parses? (<text>.this "-"))
                     offset (<text>.many <text>.decimal)]
                    (in (.text mark (if signed?' "-" "") offset))))]
    (when (decimal#of (.text (if signed? "-" "") digits "." decimals exp))
      {try.#Success value}
      (in value)

      {try.#Failure message}
      (<>.failure message))))

(the escaped_string_of
  (Projection Text)
  (`` (all <>.either
           (,, (template.with [<when> <then>]
                 [(<>.after (<text>.this <when>)
                            (<>#in <then>))]

                 ["\t" text.tab]
                 ["\b" text.back_space]
                 ["\n" \n]
                 ["\r" text.carriage_return]
                 ["\f" text.form_feed]
                 [(.text "\" text.double_quote) text.double_quote]
                 ["\\" "\"]
                 ))
           (<>.after (<text>.this "\u")
                     (|> <text>.hexadecimal!
                         (<text>.exactly! 4)
                         <text>.slice
                         (<>.of natural.hex)
                         (<>#each text.of_character)))
           )))

(the string_of
  (Projection String)
  (<| (<text>.enclosed [text.double_quote text.double_quote])
      (loop (again [_ []]))
      (do [! <>.monad]
        [characters (<text>.some (<text>.none_of (.text "\" text.double_quote)))
         stop <text>.next])
      (if (text.= "\" stop)
        (do !
          [escaped ..escaped_string_of
           next_characters (again [])]
          (in (.text characters escaped next_characters)))
        (in characters))))

(the (kv_of json_of)
  (-> (Projection JSON)
      (Projection [String JSON]))
  (do <>.monad
    [key ..string_of
     _ ..space_of
     _ (<text>.this ..entry_delimiter)
     _ ..space_of
     value json_of]
    (in [key value])))

(template.with [<name> <type> <open> <close> <elem_of> <prep>]
  [(the (<name> json_of)
     (-> (Projection JSON)
         (Projection <type>))
     (do <>.monad
       [_ (<text>.this <open>)
        _ space_of
        elems (<>.delimited_by ..value_delimiter_of <elem_of>)
        _ space_of
        _ (<text>.this <close>)]
       (in (|> elems <prep>))))]

  [array_of  Array  ..array_start ..array_end json_of list.of_stack]
  [object_of Object ..object_start ..object_end (kv_of json_of) (<| (dictionary.of_list text.hash) list.of_stack)]
  )

(the json_of
  (Projection JSON)
  (<| (<>.after ..space_of)
      (<>.before ..space_of)
      (<>.rec
       (function (_ json_of)
         (all <>.or
              null_of
              boolean_of
              number_of
              string_of
              (array_of json_of)
              (object_of json_of))))))

(the .public format
  (Format Text JSON)
  (implementation
   (the as ..as_text)
   (the of (<text>.value json_of))))

(exception.the (cannot_project [it])
  (Exception JSON)
  (exception.report
   (.list ["JSON" (..as_text it)])))

(template.with [,name ,type ,tag]
  [(the .public ,name
     (Format JSON ,type)
     (implementation
      (the as (|>> {,tag}))
      (the (of it)
        (when it
          {,tag it}
          {try.#Success it}

          _
          (exception.except ..cannot_project [it])))))]

  [any Any #Null]
  [bit Bit #Boolean]
  [decimal Decimal #Number]
  [text Text #String]
  )

(the low_mask Natural (|> 1 (i64.left_shifted 32) --))
(the high_mask Natural (|> low_mask (i64.left_shifted 32)))

(the .public natural
  (Format JSON Natural)
  (implementation
   (the (as input)
     (let [high (|> input (i64.and high_mask) (i64.right_shifted 32))
           low (i64.and low_mask input)]
       {#Array (.list (|> high .integer integer.decimal {#Number})
                      (|> low .integer integer.decimal {#Number}))}))
   (the (of it)
     (when it
       {#Array (.list {#Number high} {#Number low})}
       {try.#Success (natural.+ (|> high decimal.integer .natural (i64.left_shifted 32))
                                (|> low decimal.integer .natural))}

       _
       (exception.except ..cannot_project [it])))))

(the .public integer
  (Format JSON Integer)
  (implementation
   (the as
     (|>> .natural
          (by ..natural as)))
   (the of
     (|>> (by ..natural of)
          (by try.functor each (|>> .integer))))))

(the .public revolution
  (Format JSON Revolution)
  (implementation
   (the as
     (|>> .natural
          (by ..natural as)))
   (the of
     (|>> (by ..natural of)
          (by try.functor each (|>> .revolution))))))

(template.with [,name ,type ,format]
  [(the .public ,name
     (Format JSON ,type)
     (implementation
      (the as
        (|>> (by ,format as)
             {#String}))
      (the (of it)
        (when it
          {#String it}
          (by ,format of it)
          
          _
          (exception.except ..cannot_project [it])))))]

  [duration duration.Duration duration.text]
  [instant instant.Instant instant.text]
  [date date.Date date.text]
  [day day.Day day.text]
  [month month.Month month.text]
  )

(the .public (sum left right)
  (for_any (_ left right)
    (-> (Format JSON left) (Format JSON right)
        (Format JSON (Or left right))))
  (implementation
   (the (as it)
     {#Array (when it
               {#0 it}
               (.list {#Boolean #0} (by left as it))
               
               {#1 it}
               (.list {#Boolean #1} (by right as it)))})
   (the (of it)
     (`` (when it
           (,, (template.with [,flag ,format]
                 [{#Array (.list {#Boolean ,flag} it)}
                  (try#each (|>> {,flag}) (with ,format (of it)))]

                 [#0 left]
                 [#1 right]
                 ))

           _
           (exception.except ..cannot_project [it]))))))

(the .public (product left right)
  (for_any (_ left right)
    (-> (Format JSON left) (Format JSON right)
        (Format JSON (And left right))))
  (implementation
   (the (as [itL itR])
     {#Array (.list (with left (as itL))
                    (with right (as itR)))})
   (the (of it)
     (when it
       {#Array (.list itL itR)}
       (do try.monad
         [itL (with left (of itL))
          itR (with right (of itR))]
         (in [itL itR]))
       
       _
       (exception.except ..cannot_project [it])))))

(the .public (recursive context)
  (for_any (_ it)
    (-> (-> (Format JSON it)
            (Format JSON it))
        (Format JSON it)))
  (implementation
   (the (as it)
     (with (context [as (function (_ _) {try.#Failure ""})])
       (as it)))
   (the (of it)
     (with (context [(|>> {#Null}) of])
       (of it)))))

(the .public (list item)
  (for_any (_ it)
    (-> (Format JSON it)
        (Format JSON (List it))))
  (implementation
   (the as
     (|>> (list#each (with item as))
          {#Array}))
   (the (of it)
     (when it
       {#Array it}
       (list.each' try.monad (with item of) it)
       
       _
       (exception.except ..cannot_project [it])))))

(the .public (dictionary value)
  (for_any (_ it)
    (-> (Format JSON it)
        (Format JSON (Dictionary Text it))))
  (implementation
   (the as
     (|>> (dictionary#each (by value as))
          {#Object}))
   (the (of it)
     (when it
       {#Object it}
       (|> it
           dictionary.entries
           (list.each' try.monad (function (_ [key it])
                                   (do try.monad
                                     [it (with value (of it))]
                                     (in [key it]))))
           (try#each (dictionary.of_list text.hash)))
       
       _
       (exception.except ..cannot_project [it])))))

(every .public (Case it)
  (-> Natural
      (Format JSON it)))

(the .public (case format)
  (for_any (_ it)
    (-> (Format JSON it)
        (Case it)))
  (function (_ expected)
    (let [expected (natural.decimal expected)]
      (implementation
       (the (as it)
         {#Array (.list {#Number expected}
                        (by format as it))})
       (the (of it)
         (when it
           {#Array (.list {#Number actual} case)}
           (if (decimal.= expected actual)
             (by format of case)
             (exception.except ..cannot_project [it]))
           
           _
           (exception.except ..cannot_project [it])))))))

(the .public (or left right)
  (for_any (_ left right)
    (-> (Case left) (Case right)
        (Case (Or left right))))
  (function (_ expected)
    (implementation
     (the (as it)
       (when it
         {#0 it} (by (left expected) as it)
         {#1 it} (by (right (++ expected)) as it)))
     (the (of it)
       (when (by (left expected) of it)
         {try.#Success it}
         {try.#Success {#0 it}}
         
         {try.#Failure _}
         (when (by (right (++ expected)) of it)
           {try.#Success it}
           {try.#Success {#1 it}}
           
           {try.#Failure error}
           {try.#Failure error}))))))

(the .public variant
  (for_any (_ it)
    (-> (Case it)
        (Format JSON it)))
  (function.on 0))

(every .public (Member it)
  (-> [Natural Bit]
      (Format (List JSON) it)))

(the .public (member format)
  (for_any (_ it)
    (-> (Format JSON it)
        (Member it)))
  (function (_ [index end?])
    (implementation
     (the (as it)
       (.list (by format as it)))
     (the (of it)
       (if (.or (not end?)
                (natural.= (++ index) (list.size it)))
         (do try.monad
           [it (list.item index it)]
           (by format of it))
         (exception.except ..cannot_project [{#Array it}]))))))

(the .public (and left right)
  (for_any (_ left right)
    (-> (Member left) (Member right)
        (Member (And left right))))
  (function (_ [index end?])
    (implementation
     (the (as it)
       (all list#composite
            (by (left [index false]) as (product.left it))
            (by (right [(++ index) true]) as (product.right it))))
     (the (of it)
       (do try.monad
         [left (by (left [index false]) of it)
          right (by (right [(++ index) true]) of it)]
         (in [left right]))))))

(the .public (record member)
  (for_any (_ it)
    (-> (Member it)
        (Format JSON it)))
  (let [format (member [0 true])]
    (implementation
     (the (as it)
       {#Array (by format as it)})
     (the (of it)
       (when it
         {#Array items}
         (by format of items)

         _
         (exception.except ..cannot_project [it]))))))
