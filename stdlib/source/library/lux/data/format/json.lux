... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except has nat int rev list)
   [abstract
    [equivalence (.only Equivalence)]
    [codec (.only Codec)]
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser (.use "[1]#[0]" monad)]
    ["[0]" pipe]
    ["[0]" maybe]
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception (.only Exception)]
    [function
     [predicate (.only Predicate)]]]
   [data
    ["[0]" bit]
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" equivalence monoid)
     ["<[1]>" \\parser (.only Parser)]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix functor)]
     ["[0]" sequence (.only Sequence sequence) (.use "[1]#[0]" monad)]
     ["[0]" dictionary (.only Dictionary) (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["[0]" nat]
     ["[0]" int]
     ["[0]" rev]
     ["[0]" dec (.use "[1]#[0]" decimal)]
     ["[0]" i64]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    [macro
     [syntax (.only syntax)]
     ["^" pattern]]]
   [world
    [time
     ["[0]" instant]
     ["[0]" duration]
     ["[0]" date]
     ["[0]" day]
     ["[0]" month]]]]])

(with_template [<name> <type>]
  [(every .public <name>
     <type>)]

  [Null    Any]
  [Boolean Bit]
  [Number  Dec]
  [String  Text]
  )

(every .public JSON
  (Rec JSON
    (Variant
     {#Null    Null}
     {#Boolean Boolean}
     {#Number  Number}
     {#String  String}
     {#Array   (Sequence JSON)}
     {#Object  (Dictionary String JSON)})))

(with_template [<name> <type>]
  [(every .public <name>
     <type>)]

  [Array  (Sequence JSON)]
  [Object (Dictionary String JSON)]
  )

(the .public null?
  (Predicate JSON)
  (|>> (pipe.when
         {#Null}
         true
         
         _
         false)))

(the .public object
  (-> (List [String JSON])
      JSON)
  (|>> (dictionary.of_list text.hash)
       {..#Object}))

(every JSON'
  (Rec JSON'
    (Variant
     {#Null'    Null}
     {#Boolean' Boolean}
     {#Number'  Number}
     {#String'  String}
     {#Array'   (Sequence JSON')}
     {#Object'  (Dictionary String JSON')}
     {#Code'    Code})))

(the jsonP
  (<code>.Parser JSON')
  (<>.rec
   (function (_ jsonP)
     (all <>.or
          (<code>.form (<>#in []))
          <code>.bit
          <code>.dec
          <code>.text
          (<>#each sequence.of_list
                   (<code>.tuple (<>.some jsonP)))
          (<>#each (dictionary.of_list text.hash)
                   (<code>.variant (<>.some (<>.and <code>.text jsonP))))
          <code>.any
          ))))

(the (jsonF token)
  (-> JSON'
      Code)
  (when token
    {#Null' _}
    (` {..#Null})
    
    (^.with_template [<ctor> <input_tag> <output_tag>]
      [{<input_tag> value}
       (` {<output_tag> (, (<ctor> value))})])
    ([code.bit  ..#Boolean' ..#Boolean]
     [code.dec ..#Number' ..#Number]
     [code.text ..#String' ..#String])
    
    {#Array' members}
    (` {..#Array (sequence.sequence (,* (sequence.list (sequence#each jsonF members))))})

    {#Object' pairs}
    (` {..#Object (dictionary.of_list text.hash
                                      (.list (,* (|> pairs
                                                     dictionary.entries
                                                     (list#each (function (_ [key_name value])
                                                                  (` [(, (code.text key_name)) (, (jsonF value))])))))))})

    {#Code' code}
    code))

(the .public json
  (syntax (_ [token ..jsonP])
    (in (.list (` (is JSON (, (jsonF token))))))))

(the .public (fields json)
  (-> JSON
      (Try (List String)))
  (when json
    {#Object obj}
    {try.#Success (dictionary.keys obj)}

    _
    {try.#Failure "Cannot get the fields of a non-object."}))

(the .public (field key json)
  (-> String JSON
      (Try JSON))
  (when json
    {#Object obj}
    (when (dictionary.value key obj)
      {try.#Success value}
      {try.#Success value}

      failure
      {try.#Failure (all text#composite "Missing field '" key "' on object.")})

    _
    {try.#Failure (all text#composite "Cannot get field '" key "' on a non-object.")}))

(the .public (has key value json)
  (-> String JSON JSON
      (Try JSON))
  (when json
    {#Object obj}
    {try.#Success {#Object (dictionary.has key value obj)}}

    _
    {try.#Failure (all text#composite "Cannot set field '" key "' on a non-object.")}))

(with_template [<name> <tag> <type>]
  [(the .public (<name> key json)
     (-> Text JSON
         (Try <type>))
     (when (field key json)
       {try.#Success {<tag> value}}
       {try.#Success value}

       {try.#Success _}
       {try.#Failure (all text#composite "Wrong value type at key: " key)}

       {try.#Failure error}
       {try.#Failure error}))]

  [boolean_field #Boolean Boolean]
  [number_field  #Number  Number]
  [string_field  #String  String]
  [array_field   #Array   Array]
  [object_field  #Object  Object]
  )

(the .public equivalence
  (Equivalence JSON)
  (implementation
   (the (= x y)
     (when [x y]
       [{#Null} {#Null}]
       true

       (^.with_template [<tag> <struct>]
         [[{<tag> x'} {<tag> y'}]
          (of <struct> = x' y')])
       ([#Boolean bit.equivalence]
        [#Number  dec.equivalence]
        [#String  text.equivalence])

       [{#Array xs} {#Array ys}]
       (and (nat.= (sequence.size xs) (sequence.size ys))
            (list#mix (function (_ idx prev)
                        (and prev
                             (maybe.else false
                                         (do maybe.monad
                                           [x' (sequence.item idx xs)
                                            y' (sequence.item idx ys)]
                                           (in (= x' y'))))))
                      true
                      (list.indices (sequence.size xs))))
       
       [{#Object xs} {#Object ys}]
       (and (nat.= (dictionary.size xs) (dictionary.size ys))
            (list#mix (function (_ [xk xv] prev)
                        (and prev
                             (when (dictionary.value xk ys)
                               {try.#Success yv}
                               (= xv yv)

                               failure
                               false)))
                      true
                      (dictionary.entries xs)))
       
       _
       false))))

............................................................
............................................................
............................................................

(the (null_format _)
  (-> Null
      Text)
  "null")

(the boolean_format
  (-> Boolean
      Text)
  (|>> (pipe.when
         .false
         "false"
         
         .true
         "true")))

(the number_format
  (-> Number
      Text)
  (|>> (pipe.when
         +0.0 ... OR -0.0
         "0.0"

         value
         (let [raw (of dec.decimal injection value)]
           (if (dec.< +0.0 value)
             raw
             (|> raw (text.split_at 1) maybe.trusted product.right))))))

(the escape "\")
(the escaped_dq (text#composite ..escape text.double_quote))

(the string_format
  (-> String
      Text)
  (|>> (text.replaced text.double_quote ..escaped_dq)
       (text.enclosed [text.double_quote text.double_quote])))

(with_template [<token> <name>]
  [(the <name>
     Text
     <token>)]

  ["," value_separator]
  [":" entry_separator]

  ["[" array_start]
  ["]" array_end]

  ["{" object_start]
  ["}" object_end]
  )

(the (array_format format)
  (-> (-> JSON Text)
      (-> Array Text))
  (|>> (sequence#each format)
       sequence.list
       (text.interposed ..value_separator)
       (text.enclosed [..array_start ..array_end])))

(the (kv_format format [key value])
  (-> (-> JSON Text)
      (-> [String JSON] Text))
  (all text#composite
       (..string_format key)
       ..entry_separator
       (format value)
       ))

(the (object_format format)
  (-> (-> JSON Text)
      (-> Object Text))
  (|>> dictionary.entries
       (list#each (..kv_format format))
       (text.interposed ..value_separator)
       (text.enclosed [..object_start ..object_end])))

(the .public (format json)
  (-> JSON
      Text)
  (when json
    (^.with_template [<tag> <format>]
      [{<tag> value}
       (<format> value)])
    ([#Null    ..null_format]
     [#Boolean ..boolean_format]
     [#Number  ..number_format]
     [#String  ..string_format]
     [#Array   (..array_format format)]
     [#Object  (..object_format format)])
    ))

............................................................
............................................................
............................................................

(the space_parser
  (Parser Text)
  (<text>.some <text>.space))

(the value_separator_parser
  (Parser [Text Any Text])
  (all <>.and
       ..space_parser
       (<text>.this ..value_separator)
       ..space_parser))

(the null_parser
  (Parser Null)
  (do <>.monad
    [_ (<text>.this "null")]
    (in [])))

(with_template [<name> <token> <value>]
  [(the <name>
     (Parser Boolean)
     (do <>.monad
       [_ (<text>.this <token>)]
       (in <value>)))]

  [false_parser "false" #0]
  [true_parser  "true"  #1]
  )

(the boolean_parser
  (Parser Boolean)
  (all <>.either
       ..true_parser
       ..false_parser))

(the number_parser
  (Parser Number)
  (do [! <>.monad]
    [signed? (<>.parses? (<text>.this "-"))
     digits (<text>.many <text>.decimal)
     decimals (<>.else "0"
                       (do !
                         [_ (<text>.this ".")]
                         (<text>.many <text>.decimal)))
     exp (<>.else ""
                  (do !
                    [mark (<text>.one_of "eE")
                     signed?' (<>.parses? (<text>.this "-"))
                     offset (<text>.many <text>.decimal)]
                    (in (all text#composite mark (if signed?' "-" "") offset))))]
    (when (dec#projection (all text#composite (if signed? "-" "") digits "." decimals exp))
      {try.#Success value}
      (in value)

      {try.#Failure message}
      (<>.failure message))))

(the escaped_parser
  (Parser Text)
  (`` (all <>.either
           (,, (with_template [<when> <then>]
                 [(<>.after (<text>.this <when>)
                            (<>#in <then>))]

                 ["\t" text.tab]
                 ["\b" text.back_space]
                 ["\n" text.new_line]
                 ["\r" text.carriage_return]
                 ["\f" text.form_feed]
                 [(text#composite "\" text.double_quote) text.double_quote]
                 ["\\" "\"]
                 ))
           (<>.after (<text>.this "\u")
                     (|> <text>.hexadecimal!
                         (<text>.exactly! 4)
                         <text>.slice
                         (<>.codec nat.hex)
                         (<>#each text.of_char)))
           )))

(the string_parser
  (Parser String)
  (<| (<text>.enclosed [text.double_quote text.double_quote])
      (loop (again [_ []]))
      (do [! <>.monad]
        [chars (<text>.some (<text>.none_of (text#composite "\" text.double_quote)))
         stop <text>.next])
      (if (text#= "\" stop)
        (do !
          [escaped escaped_parser
           next_chars (again [])]
          (in (all text#composite chars escaped next_chars)))
        (in chars))))

(the (kv_parser json_parser)
  (-> (Parser JSON)
      (Parser [String JSON]))
  (do <>.monad
    [key ..string_parser
     _ ..space_parser
     _ (<text>.this ..entry_separator)
     _ ..space_parser
     value json_parser]
    (in [key value])))

(with_template [<name> <type> <open> <close> <elem_parser> <prep>]
  [(the (<name> json_parser)
     (-> (Parser JSON)
         (Parser <type>))
     (do <>.monad
       [_ (<text>.this <open>)
        _ space_parser
        elems (<>.separated_by ..value_separator_parser <elem_parser>)
        _ space_parser
        _ (<text>.this <close>)]
       (in (<prep> elems))))]

  [array_parser  Array  ..array_start ..array_end json_parser sequence.of_list]
  [object_parser Object ..object_start ..object_end (kv_parser json_parser) (dictionary.of_list text.hash)]
  )

(the json_parser
  (Parser JSON)
  (<| (<>.after ..space_parser)
      (<>.before ..space_parser)
      (<>.rec
       (function (_ json_parser)
         (all <>.or
              null_parser
              boolean_parser
              number_parser
              string_parser
              (array_parser json_parser)
              (object_parser json_parser))))))

(the .public codec
  (Codec Text JSON)
  (implementation
   (the injection ..format)
   (the projection (<text>.value json_parser))))

(exception.the (cannot_project [it])
  (Exception JSON)
  (exception.report
   (.list ["JSON" (with ..codec
                    (injection it))])))

(with_template [,name ,type ,tag]
  [(the .public ,name
     (Codec JSON ,type)
     (implementation
      (the injection (|>> {,tag}))
      (the (projection it)
        (when it
          {,tag it}
          {try.#Success it}

          _
          (exception.except ..cannot_project [it])))))]

  [any Any #Null]
  [bit Bit #Boolean]
  [dec Dec #Number]
  [text Text #String]
  )

(the low_mask Nat (|> 1 (i64.left_shifted 32) --))
(the high_mask Nat (|> low_mask (i64.left_shifted 32)))

(the .public nat
  (Codec JSON Nat)
  (implementation
   (the (injection input)
     (let [high (|> input (i64.and high_mask) (i64.right_shifted 32))
           low (i64.and low_mask input)]
       {#Array (sequence (|> high .int int.dec {#Number})
                         (|> low .int int.dec {#Number}))}))
   (the (projection it)
     (when it
       {#Array it'}
       (when (sequence.list it')
         (.list {#Number high} {#Number low})
         {try.#Success (nat.+ (|> high dec.int .nat (i64.left_shifted 32))
                              (|> low dec.int .nat))}

         _
         (exception.except ..cannot_project [it]))

       _
       (exception.except ..cannot_project [it])))))

(the .public int
  (Codec JSON Int)
  (implementation
   (the injection
     (|>> .nat
          (of ..nat injection)))
   (the projection
     (|>> (of ..nat projection)
          (of try.functor each (|>> .int))))))

(the .public rev
  (Codec JSON Rev)
  (implementation
   (the injection
     (|>> .nat
          (of ..nat injection)))
   (the projection
     (|>> (of ..nat projection)
          (of try.functor each (|>> .rev))))))

(with_template [,name ,type ,codec]
  [(the .public ,name
     (Codec JSON ,type)
     (implementation
      (the injection
        (|>> (of ,codec injection)
             {#String}))
      (the (projection it)
        (when it
          {#String it}
          (of ,codec projection it)
          
          _
          (exception.except ..cannot_project [it])))))]

  [duration duration.Duration duration.codec]
  [instant instant.Instant instant.codec]
  [date date.Date date.codec]
  [day day.Day day.codec]
  [month month.Month month.codec]
  )

(the .public (sum left right)
  (All (_ left right)
    (-> (Codec JSON left) (Codec JSON right)
        (Codec JSON (Or left right))))
  (implementation
   (the (injection it)
     {#Array (sequence (when it
                         {#0 it}
                         (with left (injection it))
                         
                         {#1 it}
                         (with right (injection it))))})
   (the (projection it)
     (when it
       {#Array it'}
       (`` (when (sequence.list it')
             (,, (with_template [,flag ,codec]
                   [(.list {#Boolean ,flag} it)
                    (try#each (|>> {,flag}) (with ,codec (projection it)))]

                   [#0 left]
                   [#1 right]
                   ))

             _
             (exception.except ..cannot_project [it])))
       
       _
       (exception.except ..cannot_project [it])))))

(the .public (product left right)
  (All (_ left right)
    (-> (Codec JSON left) (Codec JSON right)
        (Codec JSON (And left right))))
  (implementation
   (the (injection [itL itR])
     {#Array (sequence (with left (injection itL))
                       (with right (injection itR)))})
   (the (projection it)
     (when it
       {#Array it'}
       (when (sequence.list it')
         (.list itL itR)
         (do try.monad
           [itL (with left (projection itL))
            itR (with right (projection itR))]
           (in [itL itR]))

         _
         (exception.except ..cannot_project [it]))
       
       _
       (exception.except ..cannot_project [it])))))

(the .public (recursive context)
  (All (_ of)
    (-> (-> (Codec JSON of)
            (Codec JSON of))
        (Codec JSON of)))
  (implementation
   (the (injection it)
     (with (context [injection
                     (function (_ _) {try.#Failure ""})])
       (injection it)))
   (the (projection it)
     (with (context [(|>> {#Null})
                     projection])
       (projection it)))))

(the .public (list item)
  (All (_ of)
    (-> (Codec JSON of)
        (Codec JSON (List of))))
  (implementation
   (the injection
     (|>> (list#each (with item injection))
          sequence.of_list
          {#Array}))
   (the (projection it)
     (when it
       {#Array it}
       (|> it
           sequence.list
           (monad.each try.monad (with item projection)))
       
       _
       (exception.except ..cannot_project [it])))))

(the .public (dictionary value)
  (All (_ of)
    (-> (Codec JSON of)
        (Codec JSON (Dictionary Text of))))
  (implementation
   (the injection
     (|>> (dictionary#each (of value injection))
          {#Object}))
   (the (projection it)
     (when it
       {#Object it}
       (|> it
           dictionary.entries
           (monad.each try.monad (function (_ [key it])
                                   (do try.monad
                                     [it (with value (projection it))]
                                     (in [key it]))))
           (try#each (dictionary.of_list text.hash)))
       
       _
       (exception.except ..cannot_project [it])))))
