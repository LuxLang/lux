... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Tag #Text text)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]
    [format (.only Format)]
    ["<>" projection (.use "[1]#[0]" monad)]]
   [data
    ["[0]" product]
    ["[0]" text (.only \n)
     ["<[1]>" \\projection (.only Projection)]
     ["[0]" slice (.only Slice)
      ["?[1]" \\projection]]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     [/64
      ["n" natural]
      ["[0]" integer]]]]
   [meta
    ["[0]" name (.use "[1]#[0]" absolute)]]]])

(every .public Tag
  Name)

(every .public Attribute
  Name)

(every .public Attrs
  (Dictionary Attribute Text))

(the .public attributes
  Attrs
  (dictionary.empty name.hash))

(every .public XML
  (Rec XML
    (Variant
     {#Text Text}
     {#Node Tag Attrs (List XML)})))

... https://en.wikipedia.org/wiki/Delimiter
(the namespace_delimiter
  ":")

(the xml_standard_escape_character^
  (Projection Text)
  (all <>.either
       (<>.after (<text>.this "&lt;") (<>#pure "<"))
       (<>.after (<text>.this "&gt;") (<>#pure ">"))
       (<>.after (<text>.this "&amp;") (<>#pure "&"))
       (<>.after (<text>.this "&apos;") (<>#pure "'"))
       (<>.after (<text>.this "&quot;") (<>#pure text.double_quote))
       ))

(the xml_unicode_escape_character^
  (Projection Text)
  (|> (do [! <>.monad]
        [hex? (<>.maybe (<text>.this "x"))]
        (<| (by ! each (|>> .natural text.of_character))
            (<>.of integer.base_10)
            ?slice.slice
            ?slice.many
            (when hex?
              {.#None}
              ?slice.decimal

              {.#Some _}
              ?slice.hexadecimal)))
      (<>.before (<text>.this ";"))
      (<>.after (<text>.this "&#"))))

(the xml_escape_character^
  (Projection Text)
  (<>.either xml_standard_escape_character^
             xml_unicode_escape_character^))

(the xml_character^
  (Projection Text)
  (<>.either (<text>.none_of (.text "<>&" text.double_quote))
             xml_escape_character^))

(the xml_identifier
  (Projection Text)
  (?slice.slice
   (all ?slice.and
        (<>.either (?slice.one_of "_")
                   ?slice.alpha)
        (?slice.some (<>.either (?slice.one_of "_.-")
                                ?slice.alpha_num)))))

(the namespaced_name^
  (Projection Name)
  (do <>.monad
    [first_part xml_identifier
     ?second_part (<| <>.maybe (<>.after (<text>.this ..namespace_delimiter)) xml_identifier)]
    (when ?second_part
      {.#None}
      (pure ["" first_part])

      {.#Some second_part}
      (pure [first_part second_part]))))

(the tag^ namespaced_name^)
(the attr_name^ namespaced_name^)

(the spaced^
  (for_any (_ it)
    (-> (Projection it)
        (Projection it)))
  (let [white_space^ (<>.some <text>.space)]
    (|>> (<>.before white_space^)
         (<>.after white_space^))))

(the attr_value^
  (Projection Text)
  (let [value^ (<text>.some xml_character^)]
    (<>.either (<text>.enclosed [text.double_quote text.double_quote] value^)
               (<text>.enclosed ["'" "'"] value^))))

(the attrs^
  (Projection Attrs)
  (<| (by <>.monad each (dictionary.of_list name.hash))
      <>.some
      (<>.and (..spaced^ attr_name^))
      (<>.after (<text>.this "="))
      (..spaced^ attr_value^)))

(the (close_tag^ expected)
  (-> Tag
      (Projection []))
  (do <>.monad
    [actual (|> tag^
                ..spaced^
                (<>.after (<text>.this "/"))
                (<text>.enclosed ["<" ">"]))]
    (<>.assertion (.text "Close tag does not match open tag." \n
                         "Expected: " (name#as expected) \n
                         "  Actual: " (name#as actual) \n)
                  (name.= expected actual))))

(the comment^
  (Projection Slice)
  (|> (?slice.not (<text>.this "--"))
      ?slice.some
      (<text>.enclosed ["<!--" "-->"])
      ..spaced^))

(the xml_header^
  (Projection Attrs)
  (|> (..spaced^ attrs^)
      (<>.before (<text>.this "?>"))
      (<>.after (<text>.this "<?xml"))
      ..spaced^))

(the cdata^
  (Projection Slice)
  (let [end (<text>.this "]]>")]
    (|> (?slice.some (?slice.not end))
        (<>.after end)
        (<>.after (<text>.this "<![CDATA["))
        ..spaced^)))

(the text^
  (Projection XML)
  (|> (..spaced^ (<text>.many xml_character^))
      (<>.either (?slice.slice cdata^))
      (<>#each (|>> {#Text}))))

(the null^
  (Projection Any)
  (<text>.this (text.of_character 0)))

(the xml^
  (Projection XML)
  (|> (<>.rec
       (function (_ node^)
         (|> (do <>.monad
               [_ (<text>.this "<")
                tag (..spaced^ tag^)
                attrs (..spaced^ attrs^)
                .let [no_children^ (all <>.either
                                        (do <>.monad
                                          [_ (<text>.this "/>")]
                                          (pure {#Node tag attrs (list)}))
                                        (do <>.monad
                                          [_ (<text>.this ">")
                                           _ (<>.some (<>.either ?slice.space
                                                                 ..comment^))
                                           _ (..close_tag^ tag)]
                                          (pure {#Node tag attrs (list)})))
                      with_children^ (do <>.monad
                                       [_ (<text>.this ">")
                                        children (<>.many node^)
                                        _ (..close_tag^ tag)]
                                       (pure {#Node tag attrs children}))]]
               (all <>.either
                    no_children^
                    with_children^))
             ..spaced^
             (<>.before (<>.some ..comment^))
             (<>.after (<>.some ..comment^))
             (<>.either ..text^))))
      (<>.before (<>.some ..null^))
      (<>.after (<>.maybe ..xml_header^))))

(the (sanitize_value input)
  (-> Text
      Text)
  (|> input
      (text.replaced "&" "&amp;")
      (text.replaced "<" "&lt;")
      (text.replaced ">" "&gt;")
      (text.replaced "'" "&apos;")
      (text.replaced text.double_quote "&quot;")))

(the .public (tag [namespace name])
  (-> Tag
      Text)
  (when namespace
    "" name
    _ (.text namespace ..namespace_delimiter name)))

(the .public attribute
  (-> Attribute
      Text)
  ..tag)

(the xml_header
  Text
  (let [quote (is (-> Text
                      Text)
                  (function (_ value)
                    (.text text.double_quote value text.double_quote)))]
    (.text "<?xml"
           " version=" (quote "1.0")
           " encoding=" (quote "UTF-8")
           "?>")))

(the .public as_text
  (text.Injection XML)
  (let [attributes (is (-> Attrs
                           Text)
                       (function (_ attrs)
                         (|> attrs
                             dictionary.entries
                             (list#each (function (_ [key value])
                                          (.text (..attribute key) "=" text.double_quote (sanitize_value value) text.double_quote)))
                             (text.interposed " "))))]
    (function (_ input)
      (.text ..xml_header \n
             (loop (again [prefix ""
                           input input])
               (when input
                 {#Text value}
                 (sanitize_value value)

                 {#Node xml_tag xml_attrs (list {#Text value})}
                 (let [tag (..tag xml_tag)
                       attrs (if (dictionary.empty? xml_attrs)
                                 ""
                                 (.text " " (attributes xml_attrs)))]
                   (.text prefix "<" tag attrs ">"
                          (sanitize_value value)
                          "</" tag ">"))
                 
                 {#Node xml_tag xml_attrs xml_children}
                 (let [tag (..tag xml_tag)
                       attrs (if (dictionary.empty? xml_attrs)
                                 ""
                                 (.text " " (attributes xml_attrs)))]
                   (if (list.empty? xml_children)
                       (.text prefix "<" tag attrs "/>")
                       (.text prefix "<" tag attrs ">"
                              (|> xml_children
                                  (list#each (|>> (again (.text prefix text.tab)) (.text \n)))
                                  text.together)
                              \n prefix "</" tag ">")))))
             ))))

(the .public text
  (Format Text XML)
  (implementation
   (the as ..as_text)
   (the of (<text>.value ..xml^))))

(the .public equivalence
  (Equivalence XML)
  (implementation
   (the (= expected actual)
     (when [expected actual]
       [{#Text expected/value} {#Text actual/value}]
       (text.= expected/value actual/value)

       [{#Node expected/tag expected/attrs expected/children}
        {#Node actual/tag actual/attrs actual/children}]
       (and (name.= expected/tag actual/tag)
            (by (dictionary.equivalence text.equivalence) = expected/attrs actual/attrs)
            (n.= (list.size expected/children)
                 (list.size actual/children))
            (|> (list.zipped_2 expected/children actual/children)
                (list.every? (product.uncurried =))))

       _
       false))))

(alias [=]
       ..equivalence)
