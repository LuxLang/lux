... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Tag
                #Text
                symbol)
   [abstract
    [monad (.only do)]
    [equivalence (.only Equivalence)]
    [format (.only Format)]]
   [control
    ["<>" projection (.use "[1]#[0]" monad)]]
   [data
    ["[0]" product]
    ["[0]" text (.only \n) (.use "[1]#[0]" monoid)
     ["<[1]>" \\projection (.only Projection Slice)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["n" natural]
     ["[0]" integer]]]
   [meta
    ["[0]" symbol (.use "[1]#[0]" absolute)]]]])

(every .public Tag
  Symbol)

(every .public Attribute
  Symbol)

(every .public Attrs
  (Dictionary Attribute Text))

(the .public attributes
  Attrs
  (dictionary.empty symbol.hash))

(every .public XML
  (Rec XML
    (Variant
     {#Text Text}
     {#Node Tag Attrs (List XML)})))

(the namespace_separator
  ":")

(the xml_standard_escape_character^
  (Projection Text)
  (all <>.either
       (<>.after (<text>.this "&lt;") (<>#in "<"))
       (<>.after (<text>.this "&gt;") (<>#in ">"))
       (<>.after (<text>.this "&amp;") (<>#in "&"))
       (<>.after (<text>.this "&apos;") (<>#in "'"))
       (<>.after (<text>.this "&quot;") (<>#in text.double_quote))
       ))

(the xml_unicode_escape_character^
  (Projection Text)
  (|> (do [! <>.monad]
        [hex? (<>.maybe (<text>.this "x"))]
        (<| (by ! each (|>> .natural text.of_character))
            (<>.format integer.base_10)
            <text>.slice
            <text>.many!
            (when hex?
              {.#None}
              <text>.decimal!

              {.#Some _}
              <text>.hexadecimal!)))
      (<>.before (<text>.this ";"))
      (<>.after (<text>.this "&#"))))

(the xml_escape_character^
  (Projection Text)
  (<>.either xml_standard_escape_character^
             xml_unicode_escape_character^))

(the xml_character^
  (Projection Text)
  (<>.either (<text>.none_of (all text#composite "<>&" text.double_quote))
             xml_escape_character^))

(the xml_identifier
  (Projection Text)
  (<text>.slice
   (all <text>.and!
        (<>.either (<text>.one_of! "_")
                   <text>.alpha!)
        (<text>.some! (<>.either (<text>.one_of! "_.-")
                                 <text>.alpha_num!)))))

(the namespaced_symbol^
  (Projection Symbol)
  (do <>.monad
    [first_part xml_identifier
     ?second_part (<| <>.maybe (<>.after (<text>.this ..namespace_separator)) xml_identifier)]
    (when ?second_part
      {.#None}
      (in ["" first_part])

      {.#Some second_part}
      (in [first_part second_part]))))

(the tag^ namespaced_symbol^)
(the attr_name^ namespaced_symbol^)

(the spaced^
  (for_any (_ a)
    (-> (Projection a)
        (Projection a)))
  (let [white_space^ (<>.some <text>.space)]
    (|>> (<>.before white_space^)
         (<>.after white_space^))))

(the attr_value^
  (Projection Text)
  (let [value^ (<text>.some xml_character^)]
    (<>.either (<text>.enclosed [text.double_quote text.double_quote] value^)
               (<text>.enclosed ["'" "'"] value^))))

(the attrs^
  (Projection Attrs)
  (<| (by <>.monad each (dictionary.of_list symbol.hash))
      <>.some
      (<>.and (..spaced^ attr_name^))
      (<>.after (<text>.this "="))
      (..spaced^ attr_value^)))

(the (close_tag^ expected)
  (-> Tag (Projection []))
  (do <>.monad
    [actual (|> tag^
                ..spaced^
                (<>.after (<text>.this "/"))
                (<text>.enclosed ["<" ">"]))]
    (<>.assertion (all text#composite "Close tag does not match open tag." \n
                       "Expected: " (symbol#injection expected) \n
                       "  Actual: " (symbol#injection actual) \n)
                  (symbol.= expected actual))))

(the comment^
  (Projection Slice)
  (|> (<text>.not! (<text>.this "--"))
      <text>.some!
      (<text>.enclosed ["<!--" "-->"])
      ..spaced^))

(the xml_header^
  (Projection Attrs)
  (|> (..spaced^ attrs^)
      (<>.before (<text>.this "?>"))
      (<>.after (<text>.this "<?xml"))
      ..spaced^))

(the cdata^
  (Projection Slice)
  (let [end (<text>.this "]]>")]
    (|> (<text>.some! (<text>.not! end))
        (<>.after end)
        (<>.after (<text>.this "<![CDATA["))
        ..spaced^)))

(the text^
  (Projection XML)
  (|> (..spaced^ (<text>.many xml_character^))
      (<>.either (<text>.slice cdata^))
      (<>#each (|>> {#Text}))))

(the null^
  (Projection Any)
  (<text>.this (text.of_character 0)))

(the xml^
  (Projection XML)
  (|> (<>.rec
       (function (_ node^)
         (|> (do <>.monad
               [_ (<text>.this "<")
                tag (..spaced^ tag^)
                attrs (..spaced^ attrs^)
                .let [no_children^ (all <>.either
                                        (do <>.monad
                                          [_ (<text>.this "/>")]
                                          (in {#Node tag attrs (list)}))
                                        (do <>.monad
                                          [_ (<text>.this ">")
                                           _ (<>.some (<>.either <text>.space!
                                                                 ..comment^))
                                           _ (..close_tag^ tag)]
                                          (in {#Node tag attrs (list)})))
                      with_children^ (do <>.monad
                                       [_ (<text>.this ">")
                                        children (<>.many node^)
                                        _ (..close_tag^ tag)]
                                       (in {#Node tag attrs children}))]]
               (all <>.either
                    no_children^
                    with_children^))
             ..spaced^
             (<>.before (<>.some ..comment^))
             (<>.after (<>.some ..comment^))
             (<>.either ..text^))))
      (<>.before (<>.some ..null^))
      (<>.after (<>.maybe ..xml_header^))))

(the (sanitize_value input)
  (-> Text Text)
  (|> input
      (text.replaced "&" "&amp;")
      (text.replaced "<" "&lt;")
      (text.replaced ">" "&gt;")
      (text.replaced "'" "&apos;")
      (text.replaced text.double_quote "&quot;")))

(the .public (tag [namespace name])
  (-> Tag Text)
  (when namespace
    "" name
    _ (all text#composite namespace ..namespace_separator name)))

(the .public attribute
  (-> Attribute Text)
  ..tag)

(the xml_header
  Text
  (let [quote (is (-> Text Text)
                  (function (_ value)
                    (all text#composite text.double_quote value text.double_quote)))]
    (all text#composite
         "<?xml"
         " version=" (quote "1.0")
         " encoding=" (quote "UTF-8")
         "?>")))

(the .public as_text
  (text.Injection XML)
  (let [attributes (is (-> Attrs Text)
                       (function (_ attrs)
                         (|> attrs
                             dictionary.entries
                             (list#each (function (_ [key value])
                                          (all text#composite (..attribute key) "=" text.double_quote (sanitize_value value) text.double_quote)))
                             (text.interposed " "))))]
    (function (_ input)
      (all text#composite
           ..xml_header text.new_line
           (loop (again [prefix ""
                         input input])
             (when input
               {#Text value}
               (sanitize_value value)

               {#Node xml_tag xml_attrs (list {#Text value})}
               (let [tag (..tag xml_tag)
                     attrs (if (dictionary.empty? xml_attrs)
                             ""
                             (all text#composite " " (attributes xml_attrs)))]
                 (all text#composite
                      prefix "<" tag attrs ">"
                      (sanitize_value value)
                      "</" tag ">"))
               
               {#Node xml_tag xml_attrs xml_children}
               (let [tag (..tag xml_tag)
                     attrs (if (dictionary.empty? xml_attrs)
                             ""
                             (all text#composite " " (attributes xml_attrs)))]
                 (if (list.empty? xml_children)
                   (all text#composite prefix "<" tag attrs "/>")
                   (all text#composite prefix "<" tag attrs ">"
                        (|> xml_children
                            (list#each (|>> (again (text#composite prefix text.tab)) (text#composite text.new_line)))
                            text.together)
                        text.new_line prefix "</" tag ">")))))
           ))))

(the .public format
  (Format Text XML)
  (implementation
   (the injection ..as_text)
   (the projection (<text>.value ..xml^))))

(the .public equivalence
  (Equivalence XML)
  (implementation
   (the (= expected actual)
     (when [expected actual]
       [{#Text expected/value} {#Text actual/value}]
       (text.= expected/value actual/value)

       [{#Node expected/tag expected/attrs expected/children}
        {#Node actual/tag actual/attrs actual/children}]
       (and (symbol.= expected/tag actual/tag)
            (by (dictionary.equivalence text.equivalence) = expected/attrs actual/attrs)
            (n.= (list.size expected/children)
                 (list.size actual/children))
            (|> (list.zipped_2 expected/children actual/children)
                (list.every? (product.uncurried =))))

       _
       false))))

(alias [=]
       ..equivalence)
