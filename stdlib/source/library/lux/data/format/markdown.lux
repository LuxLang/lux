(.module:
  [library
   [lux (#- and)
    [data
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor)]]]
    [type
     abstract]
    [world
     [net (#+ URL)]]]])

## https://www.markdownguide.org/basic-syntax/

(def: sanitize
  (-> Text Text)
  (|>> (text.replace_all "\" "\\")
       (text.replace_all "`" "\`")
       (text.replace_all "*" "\*")
       (text.replace_all "_" "\_")
       (text.replace_all "{" "\{")
       (text.replace_all "}" "\}")
       (text.replace_all "[" "\[")
       (text.replace_all "]" "\]")
       (text.replace_all "(" "\(")
       (text.replace_all ")" "\)")
       (text.replace_all "#" "\#")
       (text.replace_all "+" "\+")
       (text.replace_all "-" "\-")
       (text.replace_all "." "\.")
       (text.replace_all "!" "\!")))

(abstract: #export Span Any)
(abstract: #export Block Any)

(abstract: #export (Markdown brand)
  Text

  (def: #export empty
    Markdown
    (:abstraction ""))

  (def: #export text
    (-> Text (Markdown Span))
    (|>> ..sanitize :abstraction))

  (def: blank_line
    (format text.new_line text.new_line))

  (template [<name> <prefix>]
    [(def: #export (<name> content)
       (-> Text Markdown)
       (:abstraction (format <prefix> " " (..sanitize content) ..blank_line)))]

    [heading/1 "#"]
    [heading/2 "##"]
    [heading/3 "###"]
    [heading/4 "####"]
    [heading/5 "#####"]
    [heading/6 "######"]
    )

  (def: (block content)
    (-> Text (Markdown Block))
    (:abstraction (format content ..blank_line)))

  (def: #export paragraph
    (-> (Markdown Span) (Markdown Block))
    (|>> :representation ..block))

  (def: #export break
    (Markdown Span)
    (:abstraction (format "  " text.new_line)))

  (template [<name> <wrapper>]
    [(def: #export <name>
       (-> (Markdown Span) (Markdown Span))
       (|>> :representation
            (text.enclose [<wrapper> <wrapper>])
            :abstraction))]

    [bold "**"]
    [italic "_"]
    )

  (def: (prefix with)
    (-> Text (-> Text Text))
    (|>> (text.split_all_with text.new_line)
         (list\map (function (_ line)
                     (if (text.empty? line)
                       line
                       (format with line))))
         (text.join_with text.new_line)))

  (def: indent
    (-> Text Text)
    (..prefix text.tab))

  (def: #export quote
    (-> (Markdown Block) (Markdown Block))
    (|>> :representation
         (..prefix "> ")
         :abstraction))

  (def: #export numbered_list
    (-> (List [(Markdown Span) (Maybe (Markdown Block))])
        (Markdown Block))
    (|>> list.enumeration
         (list\map (function (_ [idx [summary detail]])
                     (format (%.nat (inc idx)) ". " (:representation summary) text.new_line
                             (case detail
                               (#.Some detail)
                               (|> detail :representation ..indent (text.enclose [text.new_line text.new_line]))
                               
                               #.None
                               ""))))
         (text.join_with text.new_line)
         ..block))

  (def: #export bullet_list
    (-> (List [(Markdown Span) (Maybe (Markdown Block))])
        (Markdown Block))
    (|>> (list\map (function (_ [summary detail])
                     (format "*. " (:representation summary) text.new_line
                             (case detail
                               (#.Some detail)
                               (|> detail :representation ..indent (text.enclose [text.new_line text.new_line]))
                               
                               #.None
                               ""))))
         (text.join_with text.new_line)
         ..block))

  (def: #export snippet
    {#.doc "A snippet of code."}
    (-> Text (Markdown Span))
    (|>> ..sanitize (text.enclose ["`" "`"]) :abstraction))

  (def: #export code
    {#.doc "A block of code."}
    (-> Text (Markdown Block))
    (let [open (format "```" text.new_line)
          close (format text.new_line "```")]
      (|>> (text.enclose [open close]) ..block)))

  (def: #export (image description url)
    (-> Text URL (Markdown Span))
    (:abstraction (format "![" (..sanitize description) "](" url ")")))

  (def: #export horizontal_rule
    (Markdown Block)
    (..block "___"))

  (def: #export (link description url)
    (-> (Markdown Span) URL (Markdown Span))
    (:abstraction (format "[" (:representation description) "](" url ")")))

  (type: #export Email
    Text)

  (template [<name> <type>]
    [(def: #export <name>
       (-> <type> (Markdown Span))
       (|>> (text.enclose ["<" ">"]) :abstraction))]

    [url URL]
    [email Email]
    )

  (template [<name> <brand> <infix>]
    [(def: #export (<name> pre post)
       (-> (Markdown <brand>) (Markdown <brand>) (Markdown <brand>))
       (:abstraction (format (:representation pre) <infix> (:representation post))))]

    [and Span " "]
    [then Block ""]
    )

  (def: #export markdown
    (-> (Markdown Any) Text)
    (|>> :representation))
  )
