... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except and quote text)
   [data
    ["[0]" text (.only \n)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]
   [world
    [net (.only URL)]]]])

... https://www.markdownguide.org/basic-syntax/

(the safe
  (-> Text
      Text)
  (|>> (text.replaced "\" "\\")
       (text.replaced "`" "\`")
       (text.replaced "*" "\*")
       (text.replaced "_" "\_")
       (text.replaced "{" "\{")
       (text.replaced "}" "\}")
       (text.replaced "[" "\[")
       (text.replaced "]" "\]")
       (text.replaced "(" "\(")
       (text.replaced ")" "\)")
       (text.replaced "#" "\#")
       (text.replaced "+" "\+")
       (text.replaced "-" "\-")
       (text.replaced "." "\.")
       (text.replaced "!" "\!")))

(nominal.every .public Span Any)
(nominal.every .public Block Any)

(nominal.every .public (Markdown brand)
  Text

  (the .public empty
    Markdown
    (|> ""
        nominal.abstraction
        (as (-> (Markdown Any) Markdown))))

  (the .public text
    (-> Text
        (Markdown Span))
    (|>> ..safe nominal.abstraction))

  (the blank_line
    (.text \n \n))

  (template.with [<name> <prefix>]
    [(the .public (<name> content)
       (-> (Markdown Span)
           (Markdown Block))
       (nominal.abstraction (.text <prefix> " " (nominal.reification content) ..blank_line)))]

    [heading/1 "#"]
    [heading/2 "##"]
    [heading/3 "###"]
    [heading/4 "####"]
    [heading/5 "#####"]
    [heading/6 "######"]
    )

  (the (block content)
    (-> Text
        (Markdown Block))
    (nominal.abstraction (.text content ..blank_line)))

  (the .public paragraph
    (-> (Markdown Span)
        (Markdown Block))
    (|>> nominal.reification ..block))

  (the .public break
    (Markdown Span)
    (nominal.abstraction (.text "  " \n)))

  (template.with [<name> <wrapper>]
    [(the .public <name>
       (-> (Markdown Span)
           (Markdown Span))
       (|>> nominal.reification
            (text.enclosed [<wrapper> <wrapper>])
            nominal.abstraction))]

    [bold "**"]
    [italic "_"]
    )

  (the (prefix with)
    (-> Text
        (-> Text
            Text))
    (|>> (text.all_split_by \n)
         (list#each (function (_ line)
                      (if (text.empty? line)
                        line
                        (.text with line))))
         (text.interposed \n)))

  (the indent
    (-> Text
        Text)
    (..prefix text.tab))

  (the .public quote
    (-> (Markdown Block)
        (Markdown Block))
    (|>> nominal.reification
         (..prefix "> ")
         nominal.abstraction))

  (the .public numbered_list
    (-> (List [(Markdown Span) (Maybe (Markdown Block))])
        (Markdown Block))
    (|>> list.enumeration
         (list#each (function (_ [idx [summary detail]])
                      (.text "1. " (nominal.reification summary)
                             (when detail
                               {.#Some detail}
                               (|> detail
                                   nominal.reification
                                   ..indent
                                   (text.enclosed [\n \n])
                                   (.text \n))
                               
                               {.#None}
                               ""))))
         (text.interposed \n)
         ..block))

  (the .public bullet_list
    (-> (List [(Markdown Span) (Maybe (Markdown Block))])
        (Markdown Block))
    (|>> (list#each (function (_ [summary detail])
                      (.text "* " (nominal.reification summary)
                             (when detail
                               {.#Some detail}
                               (|> detail
                                   nominal.reification
                                   ..indent
                                   (text.enclosed [\n \n])
                                   (.text \n))
                               
                               {.#None}
                               ""))))
         (text.interposed \n)
         ..block))

  ... A snippet of code.
  (the .public snippet
    (-> Text
        (Markdown Span))
    (|>> (text.enclosed ["`` " " ``"]) nominal.abstraction))

  ... A (generic) block of code.
  (the .public generic_code
    (-> Text
        (Markdown Block))
    (let [open (.text "```" \n)
          close (.text \n "```")]
      (|>> (text.enclosed [open close]) ..block)))

  ... A block of code of a specific language.
  (the .public (code language block)
    (-> Text Text
        (Markdown Block))
    (let [open (.text "```" language \n)
          close (.text \n "```")]
      (|> block
          (text.enclosed [open close])
          ..block)))

  (the .public raw_code
    (-> Text
        (Markdown Block))
    (|>> (text.enclosed ["<code>" "</code>"])
         (text.enclosed ["<pre>" "</pre>"])
         ..block))

  (the .public (image description url)
    (-> Text URL
        (Markdown Span))
    (nominal.abstraction (.text "![" (..safe description) "](" url ")")))

  (the .public horizontal_rule
    (Markdown Block)
    (..block "___"))

  (the .public (anchor name)
    (-> Text
        (Markdown Span))
    (nominal.abstraction (.text "<a name=" name "></a>")))

  (the .public (link description url)
    (-> (Markdown Span) URL
        (Markdown Span))
    (nominal.abstraction (.text "[" (nominal.reification description) "](" url ")")))

  (every .public Email
    Text)

  (template.with [<name> <type>]
    [(the .public <name>
       (-> <type>
           (Markdown Span))
       (|>> (text.enclosed ["<" ">"]) nominal.abstraction))]

    [url URL]
    [email Email]
    )

  (template.with [<name> <brand> <infix>]
    [(the .public (<name> pre post)
       (-> (Markdown <brand>) (Markdown <brand>)
           (Markdown <brand>))
       (nominal.abstraction (.text (nominal.reification pre) <infix> (nominal.reification post))))]

    [and Span " "]
    [then Block ""]
    )

  (the .public markdown
    (for_any (_ a)
      (-> (Markdown a)
          Text))
    (|>> nominal.reification))
  )
