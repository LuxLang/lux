... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Array
                text private also i64 variant tuple)
   ["[0]" ffi]
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [control
    ["[0]" pipe]
    ["[0]" io (.only IO)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   ["[0]" function]
   [data
    ["[0]" text (.only \n)
     ["%" \\injection]]
    [collection
     ["[0]" array]
     ["[0]" list (.use "[1]:[0]" monad)
      ["?[1]" \\projection]]
     ["[0]" dictionary]]]
   [logic
    ["[0]" bit]]
   [math
    [number
     [/64
      ["n" natural]
      ["i" integer]
      ["d" decimal]
      ["[0]" fraction (.only Fraction)]]]]
   [macro
    ["^" pattern]
    ["[0]" template]
    ["[0]" syntax]
    ["[0]" expansion]]
   ["[0]" type (.only)
    ["<[1]>" \\projection (.only Projection)]]
   ["[0]" meta (.only)
    ["[0]" name]
    ["[0]" provenance]
    ["[0]" binding (.only)
     ["[0]" local]]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [compiler
    [language
     [lux
      [translation
       ["[0]" script]]]]]
   [aspect
    ["[0]" view]]
   ["[0]" target]]])

(target.if target.jvm
           (these (ffi.the java/lang/String
                    "[1]:[0]")

                  (ffi.the (java/lang/Class a)
                    "[1]:[0]")

                  (ffi.the java/lang/Object
                    "[1]:[0]"
                    (toString [] java/lang/String))

                  (ffi.the java/lang/Integer
                    "[1]:[0]"
                    (longValue [] long))

                  (ffi.the java/lang/Long
                    "[1]:[0]")

                  (ffi.the java/lang/Double
                    "[1]:[0]")

                  (ffi.the java/lang/Number
                    "[1]:[0]"
                    (doubleValue [] double)))

           target.js
           (these (ffi.the JSON
                    "[1]:[0]"
                    ("static" stringify [.Any] ffi.String))
                  (ffi.the Array
                    "[1]:[0]"
                    ("static" isArray [.Any] ffi.Boolean)))

           target.python
           (these (.every PyType
                    (Nominal "python_type"))
                  
                  (ffi.the (type "as" python_type [.Any] PyType))
                  (ffi.the (str "as" python_text [.Any] ffi.String)))

           target.lua
           (these (ffi.the (type "as" lua_type [.Any] ffi.String))
                  (ffi.the (tostring "as" lua_text [.Any] ffi.String))

                  (ffi.the math
                    "[1]:[0]"
                    ("static" type [.Any] "?" ffi.String)))

           target.ruby
           (these (ffi.the Class
                    "[1]:[0]")

                  (ffi.the Object
                    "[1]:[0]"
                    (class [] Class)
                    (to_s [] ffi.String)))

           target.php
           (these (ffi.the (gettype "as" php_type [.Any] ffi.String))
                  (ffi.the (strval "as" php_text [.Any] ffi.String)))
           )

(the Inspector
  (.type (text.Injection Any)))

(the (tuple_inspection inspection)
  (Change Inspector)
  (|>> (as (-> Any (List Any)))
       (list:each inspection)
       (text.interposed " ")
       (text.enclosed ["[" "]"])))

(exception.the .public (not_of_type type)
  (Exception Type)
  (exception.report
   (list ["Type" (type.as_text type)])))

(template.with [,name ,lux_type ,jvm_class ,js_type ,js_fields ,python_tags ,lua_type ,lua_math_types ,ruby_constants ,php_type]
  [(the .public (,name it)
     (-> Any
         (Try ,lux_type))
     (if (target.if target.jvm
                    (when (ffi.as ,jvm_class (as (-> Any java/lang/Object) it))
                      {.:Some it}
                      true
                      
                      else
                      false)

                    target.js
                    (expansion.let [,fields (template.spliced ,js_fields)]
                      (and (text.= ,js_type (ffi.type_of it))
                           (not (`` (or (,, (template.with [,field]
                                              [(.js_object_undefined?: (`` (.js_object_get# (,, (static ,field)) it)))]

                                              [,fields]
                                              )))))))

                    target.python
                    (let [it (python_text (python_type it))]
                      (expansion.let [,tags (template.spliced ,python_tags)]
                        (`` (or (,, (template.with [,type]
                                      [(text.= ,type it)]

                                      [,tags]
                                      ))))))

                    target.lua
                    (expansion.let [,math_types (template.spliced ,lua_math_types)]
                      (`` (and (text.= ,lua_type (..lua_type it))
                               (,, (template.with [,type]
                                     [(when (math:type it)
                                        {.:Some ,type}
                                        true

                                        else
                                        false)]

                                     [,math_types]
                                     )))))

                    target.ruby
                    (expansion.let [,constants (template.spliced ,ruby_constants)]
                      (template.let [(class <literal>)
                                     [(|> <literal>
                                          (as (-> Any ..Object))
                                          (Object:class []))]]
                        (let [it_class (class it)]
                          (`` (or (,, (template.with [<literal>]
                                        [(identical? (class <literal>) it_class)]

                                        [,constants]
                                        )))))))

                    target.php
                    (text.= ,php_type (php_type it)))
         {try.:Success (as (-> Any ,lux_type) it)}
         (exception.except ..not_of_type [,lux_type])))]

  [[bit .Bit java/lang/Boolean "boolean" [] [["<type 'bool'>"] ["<class 'bool'>"]] "boolean" [] [[0b] [1b]] "boolean"]
   [i64 .I64 java/lang/Long "object" [[script.i64_low] [script.i64_high]] [["<type 'int'>"] ["<class 'int'>"]] "number" [["integer"]] [[+1]] "integer"]
   [decimal .Decimal java/lang/Double "number" [] [["<type 'float'>"] ["<class 'float'>"]] "number" [["float"]] [[+1.0]] "double"]
   [text .Text java/lang/String "string" [] [["<type 'str'>"] ["<class 'str'>"] ["<type 'unicode'>"] ["<class 'unicode'>"]] "string" [] [[""]] "string"]])

(the .public (variant it)
  (-> Any
      (Try [Natural Bit Any]))
  (expansion.let [,failure (exception.except ..not_of_type [(type (Or Any Any))])]
    (target.if target.jvm
               (when (ffi.as [java/lang/Object] it)
                 {.:Some it}
                 (let [it (as (-> Any (.Array java/lang/Object)) it)]
                   (when (array.item 0 it)
                     (^.multi {try.:Success tag}
                              [(ffi.as java/lang/Integer tag)
                               {.:Some lefts}]
                              [[(array.item 1 it) (array.item 2 it)]
                               [right? {try.:Success choice}]])
                     {try.:Success [(.natural (ffi.of_long (java/lang/Integer:longValue [] lefts)))
                                    (when right?
                                      {try.:Success _} 1b
                                      {try.:Failure _} 0b)
                                    choice]}

                     else
                     ,failure))
                 
                 else
                 ,failure)

               target.js
               (when (ffi.type_of it)
                 "object"
                 (let [lefts (`` (.js_object_get# (,, (static script.variant_lefts)) it))
                       right? (`` (.js_object_get# (,, (static script.variant_right?)) it))
                       choice (`` (.js_object_get# (,, (static script.variant_choice)) it))]
                   (if (not (or (.js_object_undefined?: lefts)
                                (.js_object_undefined?: right?)
                                (.js_object_undefined?: choice)))
                       {try.:Success [(.natural (d.integer (as (-> Any Decimal) lefts)))
                                      (not (.js_object_null?: right?))
                                      choice]}

                       ... else
                       ,failure))

                 else
                 ,failure)

               target.python
               (let [tag (python_text (python_type it))]
                 (if (or (text.= "<type 'tuple'>" tag)
                         (text.= "<class 'tuple'>" tag))
                     (let [variant (as (-> Any (.Array Any)) it)]
                       (when (array.size variant)
                         3
                         (let [lefts (.array_its# 0 variant)
                               right? (.array_its# 1 variant)
                               choice (.array_its# 2 variant)]
                           (if (not (or (.python_object_none?: lefts)
                                        (.python_object_none?: choice)))
                               {try.:Success [(as (-> Any .Natural) lefts)
                                              (|> right? .python_object_none?: not)
                                              choice]}
                               ,failure))

                         else
                         ,failure))
                     ,failure))

               target.lua
               (when (lua_type it)
                 "table"
                 (let [lefts (`` (.lua_object_get# (,, (static script.variant_lefts)) it))
                       right? (`` (.lua_object_get# (,, (static script.variant_right?)) it))
                       choice (`` (.lua_object_get# (,, (static script.variant_choice)) it))]
                   (if (not (or (.lua_object_nil?# lefts)
                                (.lua_object_nil?# choice)))
                       {try.:Success [(as (-> Any .Natural) lefts)
                                      (|> right? .lua_object_nil?# not)
                                      choice]}
                       ,failure))

                 else
                 ,failure)

               target.ruby
               (template.let [(class_of <literal>)
                              [(|> <literal>
                                   (as (-> Any ..Object))
                                   (Object:class []))]

                              (field ,field)
                              [(.ruby_object_do# "[]" it [,field])]]
                 (if (identical? (class_of (as (-> Maybe Any) {.:None}))
                                 (class_of it))
                     (let [lefts (field script.variant_lefts)
                           right? (field script.variant_right?)
                           choice (field script.variant_choice)]
                       (if (not (or (.ruby_object_nil?: lefts)
                                    (.ruby_object_nil?: choice)))
                           {try.:Success [(as (-> Any .Natural) lefts)
                                          (|> right? .ruby_object_nil?: not)
                                          choice]}
                           ,failure))
                     ,failure))

               target.php
               (when (php_type it)
                 "object"
                 (let [lefts (`` (.php_object_get# (,, (static script.variant_lefts)) it))
                       right? (`` (.php_object_get# (,, (static script.variant_right?)) it))
                       choice (`` (.php_object_get# (,, (static script.variant_choice)) it))]
                   (if (not (or (.php_object_null?: lefts)
                                (.php_object_null?: choice)))
                       {try.:Success [(as (-> Any .Natural) lefts)
                                      (|> right? .php_object_null?: not)
                                      choice]}
                       ,failure))

                 else
                 ,failure))))

(expansion.let [,type (these (List Any))]
  (the .public (tuple it)
    (-> Any
        (Try ,type))
    (if (target.if target.jvm
                   (when (ffi.as [java/lang/Object] (as (-> Any java/lang/Object) it))
                     {.:Some _}
                     (when (variant it)
                       {try.:Failure _}
                       true

                       else
                       false)
                     
                     {.:None}
                     false)

                   target.js
                   (when (ffi.type_of it)
                     "object"
                     (Array:isArray it)

                     else
                     false)

                   target.python
                   (let [tag (python_text (python_type it))]
                     (or (text.= "<type 'list'>" tag)
                         (text.= "<class 'list'>" tag)))

                   target.lua
                   (when (lua_type it)
                     "table"
                     (when (variant it)
                       {try.:Failure _}
                       true

                       else
                       false)

                     else
                     false)

                   target.ruby
                   (template.let [(class_of <literal>)
                                  [(|> <literal>
                                       (as (-> Any ..Object))
                                       (Object:class []))]]
                     (identical? (class_of [[] []])
                                 (class_of it)))

                   target.php
                   (text.= "array" (php_type it)))
        {try.:Success (as (-> Any ,type) it)}
        (exception.except ..not_of_type [(type ,type)]))))

(the .public (inspection it)
  Inspector
  (`` (<| (,, (template.with [,predicate ,as_text]
                [(when (,predicate it)
                   {try.:Success it}
                   (,as_text it)

                   else)]

                [[..bit bit.as_text]
                 [..i64 %.integer]
                 [..decimal %.decimal]
                 [..text %.text]]))
          (when (..variant it)
            {try.:Success [lefts right? choice]}
            (|> (.text (%.natural lefts)
                       " " (bit.as_text right?)
                       " " (inspection choice))
                (text.enclosed ["{" "}"]))

            else)
          (when (..tuple it)
            {try.:Success it}
            (tuple_inspection inspection it)

            else)
          ... else
          (target.if target.jvm
                     (|> it
                         (as (-> Any java/lang/Object))
                         (java/lang/Object:toString [])
                         ffi.of_string)

                     target.js
                     (JSON:stringify it)

                     target.python
                     (python_text it)

                     target.lua
                     (lua_text it)

                     target.ruby
                     (|> it
                         (as (-> Any ..Object))
                         (Object:to_s []))

                     target.php
                     (php_text it)))))

(exception.the .public (cannot_represent_value type)
  (Exception Type)
  (exception.report
   (list ["Type" (type.as_text type)])))

(.every Representation
  (text.Injection Any))

(the primitive_representation
  (Projection Representation)
  (`` (all <>.either
           (monad.let <>.monad
             [_ (<type>.exactly Any)]
             (pure (function.constant "[]")))
           
           (,, (template.with [<type> <injection>]
                 [(monad.let <>.monad
                    [_ (<type>.sub <type>)]
                    (pure (|>> (as (-> Any <type>))
                               <injection>)))]

                 [[Bit bit.as_text]
                  [Natural %.natural]
                  [Integer %.integer]
                  [Revolution %.revolution]
                  [Decimal %.decimal]
                  [Text %.text]]))
           )))

(the (special_representation representation)
  (-> (Projection Representation)
      (Projection Representation))
  (`` (all <>.either
           (,, (template.with [<type> <injection>]
                 [(monad.let <>.monad
                    [_ (<type>.sub <type>)]
                    (pure (|>> (as (-> Any <type>))
                               <injection>)))]

                 [[Fraction fraction.as_text]
                  [Name name.as_text]
                  [Provenance provenance.as_text]
                  [Type type.as_text]
                  [Code code.as_text]]))

           (monad.let <>.monad
             [[_ elemT] (<type>.reified (<>.and (<type>.exactly List) <type>.any))
              elemR (<type>.local (list elemT) representation)]
             (pure (|>> (as (-> Any (List Any)))
                        (list.as_text elemR))))

           (monad.let <>.monad
             [[_ elemT] (<type>.reified (<>.and (<type>.exactly Maybe) <type>.any))
              elemR (<type>.local (list elemT) representation)]
             (pure (|>> (as (-> Any (Maybe Any)))
                        (%.maybe elemR)))))))

(the (variant_representation representation)
  (-> (Projection Representation)
      (Projection Representation))
  (monad.let <>.monad
    [membersR+ (<type>.variant (<>.many representation))]
    (pure (function (_ variantV)
            (let [[lefts right? sub_repr] (loop (of [lefts 0
                                                     representations (view.as list.stack membersR+)
                                                     variantV variantV])
                                            (when representations
                                              {.:Top leftR {.:Top rightR extraR+}}
                                              (when (as (-> Any (Or Any Any)) variantV)
                                                {.:Left left}
                                                [lefts 0b (leftR left)]

                                                {.:Right right}
                                                (when extraR+
                                                  {.:Empty}
                                                  [lefts 1b (rightR right)]

                                                  _
                                                  (of (++ lefts) {.:Top rightR extraR+} right)))

                                              _
                                              (undefined)))]
              (.text "{" (%.natural lefts) " " (bit.as_text right?) " " sub_repr "}"))))))

(the (tuple_representation representation)
  (-> (Projection Representation)
      (Projection Representation))
  (monad.let <>.monad
    [membersR+ (<type>.tuple (<>.many representation))]
    (pure (function (_ tupleV)
            (let [tuple_body (loop (of [representations (view.as list.stack membersR+)
                                        tupleV tupleV])
                               (when representations
                                 {.:Empty}
                                 ""
                                 
                                 {.:Top lastR {.:Empty}}
                                 (lastR tupleV)
                                 
                                 {.:Top headR tailR}
                                 (let [[leftV rightV] (as (-> Any (And Any Any)) tupleV)]
                                   (.text (headR leftV) " " (of tailR rightV)))))]
              (.text "[" tuple_body "]"))))))

(the representation_projection
  (Projection Representation)
  (<>.rec
   (function (_ representation)
     (all <>.either
          ..primitive_representation
          (..special_representation representation)
          (..variant_representation representation)
          (..tuple_representation representation)

          (monad.let <>.monad
            [[funcT inputsT+] (<type>.reified (<>.and <type>.any (<>.many <type>.any)))]
            (when (type.reified inputsT+ funcT)
              {.:Some outputT}
              (<type>.local (list outputT) representation)

              {.:None}
              (<>.failure "")))

          (monad.let <>.monad
            [[name anonymous] <type>.named]
            (<type>.local (list anonymous) representation))

          (<>.failure "")
          ))))

(the .public (representation type value)
  (-> Type Any
      (Try Text))
  (when (<type>.value ..representation_projection type)
    {try.:Success representation}
    {try.:Success (representation value)}

    {try.:Failure _}
    (exception.except ..cannot_represent_value type)))

(syntax.the .public (private [definition <code>.global])
  (let [[module _] definition]
    (pure (list (` (.in_module#
                    (, (code.text module))
                    (, (code.name definition))))))))

(the .public log!
  (-> Text
      Any)
  (|>> .log!#))

(exception.the .public (type_hole [provenance type])
  (Exception [Provenance Type])
  (exception.report
   (list ["Provenance" (provenance.as_text provenance)]
         ["Type" (type.as_text type)])))

(syntax.the .public (hole [])
  (monad.let meta.monad
    [provenance meta.provenance
     expectedT meta.expected_type]
    (function.constant (exception.except ..type_hole [provenance expectedT]))))

(.every Target
  [Text (Maybe Code)])

(the target
  (<code>.Projection Target)
  (<>.either (<>.and <code>.local
                     (by <>.monad pure {.:None}))
             (<code>.tuple (<>.and <code>.local
                                   (by <>.monad each (|>> {.:Some}) ?list.any)))))

(exception.the .public (unknown_local_binding name)
  (Exception Text)
  (exception.report
   (list ["Name" (%.text name)])))

(syntax.the .public (here [targets (is (<code>.Projection (List Target))
                                       (|> ..target
                                           <>.some
                                           (<>.else (list))))])
  (monad.let [! meta.monad]
    [provenance meta.provenance
     locals local.all
     .let [environment (|> locals
                           (view.of list.stack)
                           list:conjoint
                           ... The list is reversed to make sure that, when building the dictionary,
                           ... later bindings overshadow earlier ones if they have the same name.
                           list.in_reverse
                           (dictionary.of_list text.hash))]
     targets (is (Meta (List Target))
                 (when targets
                   (list)
                   (|> environment
                       dictionary.domain
                       (list:each (function (_ local) [local {.:None}]))
                       pure)

                   _
                   (list.each' ! (function (_ [name injection])
                                   (if (dictionary.in_domain? environment name)
                                       (pure [name injection])
                                       (function.constant (exception.except ..unknown_local_binding [name]))))
                               targets)))]
    (pure (list (` (..log! (.text_composite#
                            (, (code.text (.text (provenance.as_text provenance) \n)))
                            (exception.report
                             (list (,* (list:each (function (_ [name injection])
                                                    (let [injection (when injection
                                                                      {.:None}
                                                                      (` ..inspection)
                                                                      
                                                                      {.:Some injection}
                                                                      injection)]
                                                      (` [(, (code.text name))
                                                          ((, injection) (, (code.local name)))])))
                                                  targets)))))))))))

(the .public (also to_do it)
  (for_any (_ it)
    (-> (-> it (IO Any)) it
        it))
  (exec
    (io.value (to_do it))
    it))
