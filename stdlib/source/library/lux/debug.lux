... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Target
                private type also)
   ["[0]" ffi (.only import)]
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" pipe]
    ["[0]" function]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]
    ["[0]" io (.only IO)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection (.only Injection)]]
    [format
     [xml (.only XML)]
     ["[0]" json]]
    [collection
     ["[0]" array]
     ["[0]" list (.use "[1]#[0]" monad)]
     ["[0]" dictionary]]]
   [math
    [number
     [frac (.only Frac)]
     ["n" nat]
     ["i" int]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro
     ["^" pattern]
     ["[0]" template]
     ["[0]" syntax (.only syntax)]]
    ["[0]" type (.only)
     ["<[1]>" \\projection (.only Projection)]]]
   [world
    [time (.only Time)
     [instant (.only Instant)]
     [duration (.only Duration)]
     [date (.only Date)]
     [month (.only Month)]
     [day (.only Day)]]]]])

(with_expansions [<jvm> (these (import java/lang/String
                                 "[1]::[0]")

                               (import (java/lang/Class a)
                                 "[1]::[0]")

                               (import java/lang/Object
                                 "[1]::[0]"
                                 (toString [] java/lang/String))

                               (import java/lang/Integer
                                 "[1]::[0]"
                                 (longValue [] long))

                               (import java/lang/Long
                                 "[1]::[0]")

                               (import java/lang/Number
                                 "[1]::[0]"
                                 (doubleValue [] double)))]
  (for .old (these <jvm>)
       .jvm (these <jvm>)

       .js
       (these (import JSON
                "[1]::[0]"
                ("static" stringify [.Any] ffi.String))
              (import Array
                "[1]::[0]"
                ("static" isArray [.Any] ffi.Boolean)))

       .python
       (these (.every PyType
                (Nominal "python_type"))
              
              (import (type [.Any] PyType))
              (import (str [.Any] ffi.String)))

       .lua
       (these (import (type [.Any] ffi.String))
              (import (tostring [.Any] ffi.String))

              (import math
                "[1]::[0]"
                ("static" type [.Any] "?" ffi.String)))

       .ruby
       (these (import Class
                "[1]::[0]")

              (import Object
                "[1]::[0]"
                (class [] Class)
                (to_s [] ffi.String)))

       .php
       (these (import (gettype [.Any] ffi.String))
              (import (strval [.Any] ffi.String)))

       .scheme
       (these (import (boolean? [.Any] Bit))
              (import (integer? [.Any] Bit))
              (import (real? [.Any] Bit))
              (import (string? [.Any] Bit))
              (import (vector? [.Any] Bit))
              (import (pair? [.Any] Bit))
              (import (car [.Any] .Any))
              (import (cdr [.Any] .Any))
              (import (format [Text .Any] Text)))
       ))

(the Inspector
  (.type (Injection Any)))

(for .lua (the (tuple_array tuple)
            (-> (array.Array Any) (array.Array Any))
            (array.of_list
             (loop (again [idx 0])
               (let [member (.lua_array_read# idx tuple)]
                 (if (.lua_object_nil?# member)
                   {.#End}
                   {.#Item member (again (++ idx))})))))
     (these))

(the (tuple_inspection inspection)
  (-> Inspector Inspector)
  (with_expansions [<adaption> (for .lua (,, (these ..tuple_array))
                                    (,, (these)))]
    (`` (|>> (as (array.Array Any))
             <adaption>
             (array.list {.#None})
             (list#each inspection)
             (text.interposed " ")
             (text.enclosed ["[" "]"])))))

(the .public (inspection value)
  Inspector
  (with_expansions [<jvm> (let [object (as java/lang/Object value)]
                            (`` (<| (,, (with_template [<class> <processing>]
                                          [(when (ffi.as <class> object)
                                             {.#Some value}
                                             (`` (|> value (,, (template.spliced <processing>))))
                                             
                                             {.#None})]

                                          [java/lang/Boolean [ffi.of_boolean %.bit]]
                                          [java/lang/Long [ffi.of_long %.int]]
                                          [java/lang/Number [(java/lang/Number::doubleValue []) ffi.of_double %.dec]]
                                          [java/lang/String [ffi.of_string %.text]]
                                          ))
                                    (when (ffi.as [java/lang/Object] object)
                                      {.#Some value}
                                      (let [value (as (array.Array java/lang/Object) value)]
                                        (when (array.item 0 value)
                                          (^.multi {try.#Success tag}
                                                   [(ffi.as java/lang/Integer tag)
                                                    {.#Some tag}]
                                                   [[(array.item 1 value) (array.item 2 value)]
                                                    [last? {try.#Success choice}]])
                                          (let [last? (when last?
                                                        {try.#Success _} #1
                                                        {try.#Failure _} #0)]
                                            (|> (%.message (%.nat (.nat (ffi.of_long (java/lang/Integer::longValue [] tag))))
                                                           " " (%.bit last?)
                                                           " " (inspection choice))
                                                (text.enclosed ["{" "}"])))

                                          _
                                          (tuple_inspection inspection value)))
                                      {.#None})
                                    (ffi.of_string (java/lang/Object::toString [] object)))))]
    (for .old <jvm>
         .jvm <jvm>

         .js
         (when (ffi.type_of value)
           (^.with_template [<type_of> <then>]
             [<type_of>
              (`` (|> value (,, (template.spliced <then>))))])
           (["boolean" [(as .Bit) %.bit]]
            ["number" [(as .Dec) %.dec]]
            ["string" [(as .Text) %.text]]
            ["undefined" [JSON::stringify]])
           
           "object"
           (let [variant_tag (.js_object_get# "_lux_tag" value)
                 variant_flag (.js_object_get# "_lux_flag" value)
                 variant_value (.js_object_get# "_lux_value" value)]
             (cond (not (or (.js_object_undefined?# variant_tag)
                            (.js_object_undefined?# variant_flag)
                            (.js_object_undefined?# variant_value)))
                   (|> (%.message (JSON::stringify variant_tag)
                                  " " (%.bit (not (.js_object_null?# variant_flag)))
                                  " " (inspection variant_value))
                       (text.enclosed ["{" "}"]))

                   (not (or (.js_object_undefined?# (.js_object_get# "_lux_low" value))
                            (.js_object_undefined?# (.js_object_get# "_lux_high" value))))
                   (|> value (as .Int) %.int)

                   (Array::isArray value)
                   (tuple_inspection inspection value)
                   
                   ... else
                   (JSON::stringify value)))

           _
           (JSON::stringify value))

         .python
         (when (..str (..type value))
           (^.with_template [<type_of> <class_of> <then>]
             [(^.or <type_of> <class_of>)
              (`` (|> value (,, (template.spliced <then>))))])
           (["<type 'bool'>" "<class 'bool'>" [(as .Bit) %.bit]]
            ["<type 'int'>" "<class 'int'>" [(as .Int) %.int]]
            ["<type 'float'>" "<class 'float'>" [(as .Dec) %.dec]]
            ["<type 'str'>" "<class 'str'>" [(as .Text) %.text]]
            ["<type 'unicode'>" "<class 'unicode'>" [(as .Text) %.text]])

           (^.or "<type 'list'>" "<class 'list'>")
           (tuple_inspection inspection value)

           (^.or "<type 'tuple'>" "<class 'tuple'>")
           (let [variant (as (array.Array Any) value)]
             (when (array.size variant)
               3 (let [variant_tag (.python_array_read# 0 variant)
                       variant_flag (.python_array_read# 1 variant)
                       variant_value (.python_array_read# 2 variant)]
                   (if (or (.python_object_none?# variant_tag)
                           (.python_object_none?# variant_value))
                     (..str value)
                     (|> (%.message (|> variant_tag (as .Nat) %.nat)
                                    " " (|> variant_flag .python_object_none?# not %.bit)
                                    " " (inspection variant_value))
                         (text.enclosed ["{" "}"]))))
               _ (..str value)))

           _
           (..str value))

         .lua
         (when (..type value)
           (^.with_template [<type_of> <then>]
             [<type_of>
              (`` (|> value (,, (template.spliced <then>))))])
           (["boolean" [(as .Bit) %.bit]]
            ["string" [(as .Text) %.text]]
            ["nil" [(pipe.new "nil" [])]])

           "number"
           (when (math::type value)
             {.#Some "integer"} (|> value (as .Int) %.int)
             {.#Some "float"} (|> value (as .Dec) %.dec)
             
             _
             (..tostring value))
           
           "table"
           (let [variant_tag (.lua_object_get# "_lux_tag" value)
                 variant_flag (.lua_object_get# "_lux_flag" value)
                 variant_value (.lua_object_get# "_lux_value" value)]
             (if (or (.lua_object_nil?# variant_tag)
                     (.lua_object_nil?# variant_value))
               (tuple_inspection inspection value)
               (|> (%.message (|> variant_tag (as .Nat) %.nat)
                              " " (%.bit (not (.lua_object_nil?# variant_flag)))
                              " " (inspection variant_value))
                   (text.enclosed ["{" "}"]))))

           _
           (..tostring value))

         .ruby
         (template.let [(class_of <literal>)
                        [(|> <literal>
                             (as ..Object)
                             (Object::class []))]

                        (to_s <object>)
                        [(|> <object>
                             (as ..Object)
                             (Object::to_s []))]]
           (let [value_class (class_of value)]
             (`` (cond (,, (with_template [<literal> <type> <injection>]
                             [(same? (class_of <literal>) value_class)
                              (|> value (as <type>) <injection>)]

                             [#0 Bit %.bit]
                             [#1 Bit %.bit]
                             [+1 Int %.int]
                             [+1.0 Dec %.dec]
                             ["" Text %.text]
                             [(.ruby_object_nil#) Any (pipe.new "nil" [])]
                             ))

                       (same? (class_of {.#None}) value_class)
                       (let [variant_tag (.ruby_object_get# "_lux_tag" value)
                             variant_flag (.ruby_object_get# "_lux_flag" value)
                             variant_value (.ruby_object_get# "_lux_value" value)]
                         (if (or (.ruby_object_nil?# variant_tag)
                                 (.ruby_object_nil?# variant_value))
                           (tuple_inspection inspection value)
                           (|> (%.message (|> variant_tag (as .Nat) %.nat)
                                          " " (%.bit (not (.ruby_object_nil?# variant_flag)))
                                          " " (inspection variant_value))
                               (text.enclosed ["{" "}"]))))

                       (same? (class_of [[] []]) value_class)
                       (tuple_inspection inspection value)

                       ... else
                       (to_s value)))))

         .php
         (when (..gettype value)
           (^.with_template [<type_of> <then>]
             [<type_of>
              (`` (|> value (,, (template.spliced <then>))))])
           (["boolean" [(as .Bit) %.bit]]
            ["integer" [(as .Int) %.int]]
            ["double" [(as .Dec) %.dec]]
            ["string" [(as .Text) %.text]]
            ["NULL" [(pipe.new "null" [])]]
            ["array" [(tuple_inspection inspection)]])

           "object"
           (let [variant_tag ("php object get" "_lux_tag" value)
                 variant_flag ("php object get" "_lux_flag" value)
                 variant_value ("php object get" "_lux_value" value)]
             (if (or ("php object null?" variant_tag)
                     ("php object null?" variant_value))
               (..strval value)
               (|> (%.message (|> variant_tag (as .Nat) %.nat)
                              " " (%.bit (not ("php object null?" variant_flag)))
                              " " (inspection variant_value))
                   (text.enclosed ["{" "}"]))))

           _
           (..strval value))

         .scheme
         (`` (cond (,, (with_template [<when> <then>]
                         [(<when> value)
                          (`` (|> value (,, (template.spliced <then>))))]

                         [..boolean? [(as .Bit) %.bit]]
                         [..integer? [(as .Int) %.int]]
                         [..real? [(as .Dec) %.dec]]
                         [..string? [(as .Text) %.text]]
                         ["scheme object nil?" [(pipe.new "()" [])]]
                         [..vector? [(tuple_inspection inspection)]]))

                   (..pair? value)
                   (let [variant_tag (..car value)
                         variant_rest (..cdr value)]
                     (if (and (..integer? variant_tag)
                              (i.> +0 (as Int variant_tag))
                              (..pair? variant_rest))
                       (let [variant_flag (..car variant_rest)
                             variant_value (..cdr variant_rest)]
                         (|> (%.message (|> variant_tag (as .Nat) %.nat)
                                        " " (%.bit (not ("scheme object nil?" variant_flag)))
                                        " " (inspection variant_value))
                             (text.enclosed ["{" "}"])))
                       (..format ["~s" value])))

                   ... else
                   (..format ["~s" value])
                   ))
         )))

(exception.the .public (cannot_represent_value type)
  (Exception Type)
  (exception.report
   (list ["Type" (%.type type)])))

(.every Representation
  (-> Any Text))

(the primitive_representation
  (Projection Representation)
  (`` (all <>.either
           (do <>.monad
             [_ (<type>.exactly Any)]
             (in (function.constant "[]")))
           
           (,, (with_template [<type> <injection>]
                 [(do <>.monad
                    [_ (<type>.sub <type>)]
                    (in (|>> (as <type>) <injection>)))]

                 [Bit %.bit]
                 [Nat %.nat]
                 [Int %.int]
                 [Rev %.rev]
                 [Dec %.dec]
                 [Text %.text]))
           )))

(the (special_representation representation)
  (-> (Projection Representation) (Projection Representation))
  (`` (all <>.either
           (,, (with_template [<type> <injection>]
                 [(do <>.monad
                    [_ (<type>.sub <type>)]
                    (in (|>> (as <type>)
                             <injection>)))]

                 [Frac %.frac]
                 [Symbol %.symbol]
                 [Location %.location]
                 [Type %.type]
                 [Code %.code]
                 
                 [Instant %.instant]
                 [Duration %.duration]
                 [Date %.date]
                 [Time %.time]
                 [Month %.month]
                 [Day %.day]
                 
                 [json.JSON %.json]
                 [XML %.xml]))

           (do <>.monad
             [[_ elemT] (<type>.applied (<>.and (<type>.exactly List) <type>.any))
              elemR (<type>.local (list elemT) representation)]
             (in (|>> (as (List Any)) (%.list elemR))))

           (do <>.monad
             [[_ elemT] (<type>.applied (<>.and (<type>.exactly Maybe) <type>.any))
              elemR (<type>.local (list elemT) representation)]
             (in (|>> (as (Maybe Any))
                      (%.maybe elemR)))))))

(the (variant_representation representation)
  (-> (Projection Representation) (Projection Representation))
  (do <>.monad
    [membersR+ (<type>.variant (<>.many representation))]
    (in (function (_ variantV)
          (let [[lefts right? sub_repr] (loop (again [lefts 0
                                                      representations membersR+
                                                      variantV variantV])
                                          (when representations
                                            {.#Item leftR {.#Item rightR extraR+}}
                                            (when (as (Or Any Any) variantV)
                                              {.#Left left}
                                              [lefts #0 (leftR left)]

                                              {.#Right right}
                                              (when extraR+
                                                {.#End}
                                                [lefts #1 (rightR right)]

                                                _
                                                (again (++ lefts) {.#Item rightR extraR+} right)))

                                            _
                                            (undefined)))]
            (%.message "{" (%.nat lefts) " " (%.bit right?) " " sub_repr "}"))))))

(the (tuple_representation representation)
  (-> (Projection Representation) (Projection Representation))
  (do <>.monad
    [membersR+ (<type>.tuple (<>.many representation))]
    (in (function (_ tupleV)
          (let [tuple_body (loop (again [representations membersR+
                                         tupleV tupleV])
                             (when representations
                               {.#End}
                               ""
                               
                               {.#Item lastR {.#End}}
                               (lastR tupleV)
                               
                               {.#Item headR tailR}
                               (let [[leftV rightV] (as [Any Any] tupleV)]
                                 (%.message (headR leftV) " " (again tailR rightV)))))]
            (%.message "[" tuple_body "]"))))))

(the representation_projection
  (Projection Representation)
  (<>.rec
   (function (_ representation)
     (all <>.either
          ..primitive_representation
          (..special_representation representation)
          (..variant_representation representation)
          (..tuple_representation representation)

          (do <>.monad
            [[funcT inputsT+] (<type>.applied (<>.and <type>.any (<>.many <type>.any)))]
            (when (type.applied inputsT+ funcT)
              {.#Some outputT}
              (<type>.local (list outputT) representation)

              {.#None}
              (<>.failure "")))

          (do <>.monad
            [[name anonymous] <type>.named]
            (<type>.local (list anonymous) representation))

          (<>.failure "")
          ))))

(the .public (representation type value)
  (-> Type Any (Try Text))
  (when (<type>.value ..representation_projection type)
    {try.#Success representation}
    {try.#Success (representation value)}

    {try.#Failure _}
    (exception.except ..cannot_represent_value type)))

(the .public private
  (syntax (_ [definition <code>.global])
    (let [[module _] definition]
      (in (list (` (.in_module#
                    (, (code.text module))
                    (, (code.symbol definition)))))))))

(the .public log!
  (-> Text Any)
  (|>> .log!#))

(exception.the .public (type_hole [location type])
  (Exception [Location Type])
  (exception.report
   (list ["Location" (%.location location)]
         ["Type" (%.type type)])))

(the .public hole
  (syntax (_ [])
    (do meta.monad
      [location meta.location
       expectedT meta.expected_type]
      (function.constant (exception.except ..type_hole [location expectedT])))))

(.every Target
  [Text (Maybe Code)])

(the target
  (<code>.Projection Target)
  (<>.either (<>.and <code>.local
                     (of <>.monad in {.#None}))
             (<code>.tuple (<>.and <code>.local
                                   (of <>.monad each (|>> {.#Some}) <code>.any)))))

(exception.the .public (unknown_local_binding name)
  (Exception Text)
  (exception.report
   (list ["Name" (%.text name)])))

(the .public here
  (syntax (_ [targets (is (<code>.Projection (List Target))
                          (|> ..target
                              <>.some
                              (<>.else (list))))])
    (do [! meta.monad]
      [location meta.location
       locals meta.locals
       .let [environment (|> locals
                             list.together
                             ... The list is reversed to make sure that, when building the dictionary,
                             ... later bindings overshadow earlier ones if they have the same name.
                             list.reversed
                             (dictionary.of_list text.hash))]
       targets (is (Meta (List Target))
                   (when targets
                     {.#End}
                     (|> environment
                         dictionary.keys
                         (list#each (function (_ local) [local {.#None}]))
                         in)

                     _
                     (monad.each ! (function (_ [name injection])
                                     (if (dictionary.key? environment name)
                                       (in [name injection])
                                       (function.constant (exception.except ..unknown_local_binding [name]))))
                                 targets)))]
      (in (list (` (..log! (.text_composite#
                            (, (code.text (%.message (%.location location) text.new_line)))
                            (exception.report
                             (.list (,* (|> targets
                                            (list#each (function (_ [name injection])
                                                         (let [injection (when injection
                                                                           {.#None}
                                                                           (` ..inspection)
                                                                           
                                                                           {.#Some injection}
                                                                           injection)]
                                                           (` [(, (code.text name))
                                                               ((, injection) (, (code.local name)))]))))))))))))))))

(the .public (also to_do it)
  (for_any (_ of)
    (-> (-> of (IO Any)) of
        of))
  (exec
    (io.run! (to_do it))
    it))
