... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Target
                text private also i64 variant tuple)
   ["[0]" ffi (.only import)]
   [abstract
    [monad (.only do)]
    ["<>" projection]]
   [control
    ["[0]" pipe]
    ["[0]" io (.only IO)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   ["[0]" function]
   [data
    ["[0]" bit]
    ["[0]" text (.only \n)
     ["%" \\injection]]
    [collection
     ["[0]" array]
     ["[0]" stack (.use "[1]#[0]" monad)]
     ["[0]" list (.use "[1]#[0]" monad)]
     ["[0]" dictionary]]]
   [math
    [number
     ["n" natural]
     ["i" integer]
     ["d" decimal]
     ["[0]" fraction (.only Fraction)]]]
   [macro
    ["^" pattern]
    ["[0]" template]
    ["[0]" syntax]
    ["[0]" expansion]]
   ["[0]" type (.only)
    ["<[1]>" \\projection (.only Projection)]]
   ["[0]" meta (.only)
    ["[0]" name]
    ["[0]" provenance]
    ["[0]" binding (.only)
     ["[0]" local]]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [compiler
    [language
     [lux
      [translation
       ["[0]" script]]]]]]])

(for .jvm
     (these (import java/lang/String
              "[1]::[0]")

            (import (java/lang/Class a)
              "[1]::[0]")

            (import java/lang/Object
              "[1]::[0]"
              (toString [] java/lang/String))

            (import java/lang/Integer
              "[1]::[0]"
              (longValue [] long))

            (import java/lang/Long
              "[1]::[0]")

            (import java/lang/Double
              "[1]::[0]")

            (import java/lang/Number
              "[1]::[0]"
              (doubleValue [] double)))

     .js
     (these (import JSON
              "[1]::[0]"
              ("static" stringify [.Any] ffi.String))
            (import Array
              "[1]::[0]"
              ("static" isArray [.Any] ffi.Boolean)))

     .python
     (these (.every PyType
              (Nominal "python_type"))
            
            (import (type "as" python_type [.Any] PyType))
            (import (str "as" python_text [.Any] ffi.String)))

     .lua
     (these (import (type "as" lua_type [.Any] ffi.String))
            (import (tostring "as" lua_text [.Any] ffi.String))

            (import math
              "[1]::[0]"
              ("static" type [.Any] "?" ffi.String)))

     .ruby
     (these (import Class
              "[1]::[0]")

            (import Object
              "[1]::[0]"
              (class [] Class)
              (to_s [] ffi.String)))

     .php
     (these (import (gettype "as" php_type [.Any] ffi.String))
            (import (strval "as" php_text [.Any] ffi.String)))
     )

(the Inspector
  (.type (text.Injection Any)))

(for .lua (the (tuple_array tuple)
            (-> (array.Array Any)
                (array.Array Any))
            (array.of_stack
             (loop (again [idx 0])
               (let [member (.lua_array_read# idx tuple)]
                 (if (.lua_object_nil?# member)
                   {.#Empty}
                   {.#Top member (again (++ idx))})))))
     (these))

(the (tuple_inspection inspection)
  (-> Inspector
      Inspector)
  (expansion.let [<adaption> (for .lua (,, (these ..tuple_array))
                                  (,, (these)))]
    (`` (|>> (as (array.Array Any))
             <adaption>
             (list.of_array {.#None})
             (list#each inspection)
             (text.interposed " ")
             (text.enclosed ["[" "]"])))))

(exception.the .public (not_of_type type)
  (Exception Type)
  (exception.report
   (list ["Type" (type.as_text type)])))

(template.with [,name ,lux_type ,jvm_class ,js_type ,js_fields ,python_tags ,lua_type ,lua_math_types ,ruby_constants ,php_type]
  [(the .public (,name it)
     (-> Any
         (Try ,lux_type))
     (if (for .jvm
              (when (ffi.as ,jvm_class (as java/lang/Object it))
                {.#Some it}
                true
                
                else
                false)

              .js
              (expansion.let [,fields (template.spliced ,js_fields)]
                (and (text.= ,js_type (ffi.type_of it))
                     (not (`` (or (,, (template.with [,field]
                                        [(.js_object_undefined?# (`` (.js_object_get# (,, (static ,field)) it)))]

                                        ,fields
                                        )))))))

              .python
              (let [it (python_text (python_type it))]
                (expansion.let [,tags (template.spliced ,python_tags)]
                  (`` (or (,, (template.with [,type]
                                [(text.= ,type it)]

                                ,tags
                                ))))))

              .lua
              (expansion.let [,math_types (template.spliced ,lua_math_types)]
                (`` (and (text.= ,lua_type (..lua_type it))
                         (,, (template.with [,type]
                               [(when (math::type it)
                                  {.#Some ,type}
                                  true

                                  else
                                  false)]

                               ,math_types
                               )))))

              .ruby
              (expansion.let [,constants (template.spliced ,ruby_constants)]
                (template.let [(class <literal>)
                               [(|> <literal>
                                    (as ..Object)
                                    (Object::class []))]]
                  (let [it_class (class it)]
                    (`` (or (,, (template.with [<literal>]
                                  [(same? (class <literal>) it_class)]

                                  ,constants
                                  )))))))

              .php
              (text.= ,php_type (php_type it)))
       {try.#Success (as ,lux_type it)}
       (exception.except ..not_of_type [,lux_type])))]

  [bit .Bit java/lang/Boolean "boolean" [] [["<type 'bool'>"] ["<class 'bool'>"]] "boolean" [] [[#0] [#1]] "boolean"]
  [i64 .I64 java/lang/Long "object" [[script.i64_low] [script.i64_high]] [["<type 'int'>"] ["<class 'int'>"]] "number" [["integer"]] [[+1]] "integer"]
  [decimal .Decimal java/lang/Double "number" [] [["<type 'float'>"] ["<class 'float'>"]] "number" [["float"]] [[+1.0]] "double"]
  [text .Text java/lang/String "string" [] [["<type 'str'>"] ["<class 'str'>"] ["<type 'unicode'>"] ["<class 'unicode'>"]] "string" [] [[""]] "string"]
  )

(the .public (variant it)
  (-> Any
      (Try [Natural Bit Any]))
  (expansion.let [,failure (exception.except ..not_of_type [(type (Or Any Any))])]
    (for .jvm
         (when (ffi.as [java/lang/Object] it)
           {.#Some it}
           (let [it (as (array.Array java/lang/Object) it)]
             (when (array.item 0 it)
               (^.multi {try.#Success tag}
                        [(ffi.as java/lang/Integer tag)
                         {.#Some lefts}]
                        [[(array.item 1 it) (array.item 2 it)]
                         [right? {try.#Success choice}]])
               {try.#Success [(.natural (ffi.of_long (java/lang/Integer::longValue [] lefts)))
                              (when right?
                                {try.#Success _} #1
                                {try.#Failure _} #0)
                              choice]}

               else
               ,failure))
           
           else
           ,failure)

         .js
         (when (ffi.type_of it)
           "object"
           (let [lefts (`` (.js_object_get# (,, (static script.variant_lefts)) it))
                 right? (`` (.js_object_get# (,, (static script.variant_right?)) it))
                 choice (`` (.js_object_get# (,, (static script.variant_choice)) it))]
             (if (not (or (.js_object_undefined?# lefts)
                          (.js_object_undefined?# right?)
                          (.js_object_undefined?# choice)))
               {try.#Success [(.natural (d.integer (as Decimal lefts)))
                              (not (.js_object_null?# right?))
                              choice]}

               ... else
               ,failure))

           else
           ,failure)

         .python
         (let [tag (python_text (python_type it))]
           (if (or (text.= "<type 'tuple'>" tag)
                   (text.= "<class 'tuple'>" tag))
             (let [variant (as (array.Array Any) it)]
               (when (array.size variant)
                 3
                 (let [lefts (.python_array_read# 0 variant)
                       right? (.python_array_read# 1 variant)
                       choice (.python_array_read# 2 variant)]
                   (if (not (or (.python_object_none?# lefts)
                                (.python_object_none?# choice)))
                     {try.#Success [(as .Natural lefts)
                                    (|> right? .python_object_none?# not)
                                    choice]}
                     ,failure))

                 else
                 ,failure))
             ,failure))

         .lua
         (when (lua_type it)
           "table"
           (let [lefts (`` (.lua_object_get# (,, (static script.variant_lefts)) it))
                 right? (`` (.lua_object_get# (,, (static script.variant_right?)) it))
                 choice (`` (.lua_object_get# (,, (static script.variant_choice)) it))]
             (if (not (or (.lua_object_nil?# lefts)
                          (.lua_object_nil?# choice)))
               {try.#Success [(as .Natural lefts)
                              (|> right? .lua_object_nil?# not)
                              choice]}
               ,failure))

           else
           ,failure)

         .ruby
         (template.let [(class_of <literal>)
                        [(|> <literal>
                             (as ..Object)
                             (Object::class []))]

                        (field ,field)
                        [(.ruby_object_do# "[]" it [,field])]]
           (if (same? (class_of {.#None})
                      (class_of it))
             (let [lefts (field script.variant_lefts)
                   right? (field script.variant_right?)
                   choice (field script.variant_choice)]
               (if (not (or (.ruby_object_nil?# lefts)
                            (.ruby_object_nil?# choice)))
                 {try.#Success [(as .Natural lefts)
                                (|> right? .ruby_object_nil?# not)
                                choice]}
                 ,failure))
             ,failure))

         .php
         (when (php_type it)
           "object"
           (let [lefts (`` (.php_object_get# (,, (static script.variant_lefts)) it))
                 right? (`` (.php_object_get# (,, (static script.variant_right?)) it))
                 choice (`` (.php_object_get# (,, (static script.variant_choice)) it))]
             (if (not (or (.php_object_null?# lefts)
                          (.php_object_null?# choice)))
               {try.#Success [(as .Natural lefts)
                              (|> right? .php_object_null?# not)
                              choice]}
               ,failure))

           else
           ,failure))))

(expansion.let [,type (these (array.Array Any))]
  (the .public (tuple it)
    (-> Any
        (Try ,type))
    (if (for .jvm
             (when (ffi.as [java/lang/Object] (as java/lang/Object it))
               {.#Some _}
               (when (variant it)
                 {try.#Failure _}
                 true

                 else
                 false)
               
               {.#None}
               false)

             .js
             (when (ffi.type_of it)
               "object"
               (Array::isArray it)

               else
               false)

             .python
             (let [tag (python_text (python_type it))]
               (or (text.= "<type 'list'>" tag)
                   (text.= "<class 'list'>" tag)))

             .lua
             (when (lua_type it)
               "table"
               (when (variant it)
                 {try.#Failure _}
                 true

                 else
                 false)

               else
               false)

             .ruby
             (template.let [(class_of <literal>)
                            [(|> <literal>
                                 (as ..Object)
                                 (Object::class []))]]
               (same? (class_of [[] []])
                      (class_of it)))

             .php
             (text.= "array" (php_type it)))
      {try.#Success (as ,type it)}
      (exception.except ..not_of_type [(type ,type)]))))

(the .public (inspection it)
  Inspector
  (`` (<| (,, (template.with [,predicate ,as_text]
                [(when (,predicate it)
                   {try.#Success it}
                   (,as_text it)

                   else)]

                [..bit bit.as_text]
                [..i64 %.integer]
                [..decimal %.decimal]
                [..text %.text]
                ))
          (when (..variant it)
            {try.#Success [lefts right? choice]}
            (|> (.text (%.natural lefts)
                       " " (bit.as_text right?)
                       " " (inspection choice))
                (text.enclosed ["{" "}"]))

            else)
          (when (..tuple it)
            {try.#Success it}
            (tuple_inspection inspection it)

            else)
          ... else
          (for .jvm
               (|> it
                   (as java/lang/Object)
                   (java/lang/Object::toString [])
                   ffi.of_string)

               .js
               (JSON::stringify it)

               .python
               (python_text it)

               .lua
               (lua_text it)

               .ruby
               (|> it
                   (as ..Object)
                   (Object::to_s []))

               .php
               (php_text it)))))

(exception.the .public (cannot_represent_value type)
  (Exception Type)
  (exception.report
   (list ["Type" (type.as_text type)])))

(.every Representation
  (text.Injection Any))

(the primitive_representation
  (Projection Representation)
  (`` (all <>.either
           (do <>.monad
             [_ (<type>.exactly Any)]
             (in (function.constant "[]")))
           
           (,, (template.with [<type> <injection>]
                 [(do <>.monad
                    [_ (<type>.sub <type>)]
                    (in (|>> (as <type>) <injection>)))]

                 [Bit bit.as_text]
                 [Natural %.natural]
                 [Integer %.integer]
                 [Revolution %.revolution]
                 [Decimal %.decimal]
                 [Text %.text]))
           )))

(the (special_representation representation)
  (-> (Projection Representation)
      (Projection Representation))
  (`` (all <>.either
           (,, (template.with [<type> <injection>]
                 [(do <>.monad
                    [_ (<type>.sub <type>)]
                    (in (|>> (as <type>)
                             <injection>)))]

                 [Fraction fraction.as_text]
                 [Name name.as_text]
                 [Provenance provenance.as_text]
                 [Type type.as_text]
                 [Code code.as_text]))

           (do <>.monad
             [[_ elemT] (<type>.applied (<>.and (<type>.exactly List) <type>.any))
              elemR (<type>.local (list elemT) representation)]
             (in (|>> (as (List Any))
                      (list.as_text elemR))))

           (do <>.monad
             [[_ elemT] (<type>.applied (<>.and (<type>.exactly Maybe) <type>.any))
              elemR (<type>.local (list elemT) representation)]
             (in (|>> (as (Maybe Any))
                      (%.maybe elemR)))))))

(the (variant_representation representation)
  (-> (Projection Representation)
      (Projection Representation))
  (do <>.monad
    [membersR+ (<type>.variant (<>.many representation))]
    (in (function (_ variantV)
          (let [[lefts right? sub_repr] (loop (again [lefts 0
                                                      representations (list.as_stack membersR+)
                                                      variantV variantV])
                                          (when representations
                                            {.#Top leftR {.#Top rightR extraR+}}
                                            (when (as (Or Any Any) variantV)
                                              {.#Left left}
                                              [lefts #0 (leftR left)]

                                              {.#Right right}
                                              (when extraR+
                                                {.#Empty}
                                                [lefts #1 (rightR right)]

                                                _
                                                (again (++ lefts) {.#Top rightR extraR+} right)))

                                            _
                                            (undefined)))]
            (.text "{" (%.natural lefts) " " (bit.as_text right?) " " sub_repr "}"))))))

(the (tuple_representation representation)
  (-> (Projection Representation)
      (Projection Representation))
  (do <>.monad
    [membersR+ (<type>.tuple (<>.many representation))]
    (in (function (_ tupleV)
          (let [tuple_body (loop (again [representations (list.as_stack membersR+)
                                         tupleV tupleV])
                             (when representations
                               {.#Empty}
                               ""
                               
                               {.#Top lastR {.#Empty}}
                               (lastR tupleV)
                               
                               {.#Top headR tailR}
                               (let [[leftV rightV] (as [Any Any] tupleV)]
                                 (.text (headR leftV) " " (again tailR rightV)))))]
            (.text "[" tuple_body "]"))))))

(the representation_projection
  (Projection Representation)
  (<>.rec
   (function (_ representation)
     (all <>.either
          ..primitive_representation
          (..special_representation representation)
          (..variant_representation representation)
          (..tuple_representation representation)

          (do <>.monad
            [[funcT inputsT+] (<type>.applied (<>.and <type>.any (<>.many <type>.any)))]
            (when (type.applied (list.as_stack inputsT+) funcT)
              {.#Some outputT}
              (<type>.local (list outputT) representation)

              {.#None}
              (<>.failure "")))

          (do <>.monad
            [[name anonymous] <type>.named]
            (<type>.local (list anonymous) representation))

          (<>.failure "")
          ))))

(the .public (representation type value)
  (-> Type Any
      (Try Text))
  (when (<type>.value ..representation_projection type)
    {try.#Success representation}
    {try.#Success (representation value)}

    {try.#Failure _}
    (exception.except ..cannot_represent_value type)))

(the .public private
  (syntax.macro (_ [definition <code>.global])
    (let [[module _] definition]
      (in (list (` (.in_module#
                    (, (code.text module))
                    (, (code.name definition)))))))))

(the .public log!
  (-> Text
      Any)
  (|>> .log!#))

(exception.the .public (type_hole [provenance type])
  (Exception [Provenance Type])
  (exception.report
   (list ["Provenance" (provenance.as_text provenance)]
         ["Type" (type.as_text type)])))

(the .public hole
  (syntax.macro (_ [])
    (do meta.monad
      [provenance meta.provenance
       expectedT meta.expected_type]
      (function.constant (exception.except ..type_hole [provenance expectedT])))))

(.every Target
  [Text (Maybe Code)])

(the target
  (<code>.Projection Target)
  (<>.either (<>.and <code>.local
                     (by <>.monad in {.#None}))
             (<code>.tuple (<>.and <code>.local
                                   (by <>.monad each (|>> {.#Some}) <code>.any)))))

(exception.the .public (unknown_local_binding name)
  (Exception Text)
  (exception.report
   (list ["Name" (%.text name)])))

(the .public here
  (syntax.macro (_ [targets (is (<code>.Projection (List Target))
                                (|> ..target
                                    <>.some
                                    (<>.else (list))))])
    (do [! meta.monad]
      [provenance meta.provenance
       locals local.all
       .let [environment (|> locals
                             stack#conjoint
                             ... The list is reversed to make sure that, when building the dictionary,
                             ... later bindings overshadow earlier ones if they have the same name.
                             stack.reversed
                             list.of_stack
                             (dictionary.of_list text.hash))]
       targets (is (Meta (List Target))
                   (when targets
                     (list)
                     (|> environment
                         dictionary.keys
                         (list#each (function (_ local) [local {.#None}]))
                         in)

                     _
                     (list.each' ! (function (_ [name injection])
                                     (if (dictionary.key? environment name)
                                       (in [name injection])
                                       (function.constant (exception.except ..unknown_local_binding [name]))))
                                 targets)))]
      (in (list (` (..log! (.text_composite#
                            (, (code.text (.text (provenance.as_text provenance) \n)))
                            (exception.report
                             (list (,* (list#each (function (_ [name injection])
                                                    (let [injection (when injection
                                                                      {.#None}
                                                                      (` ..inspection)
                                                                      
                                                                      {.#Some injection}
                                                                      injection)]
                                                      (` [(, (code.text name))
                                                          ((, injection) (, (code.local name)))])))
                                                  targets))))))))))))

(the .public (also to_do it)
  (for_any (_ it)
    (-> (-> it (IO Any)) it
        it))
  (exec
    (io.value (to_do it))
    it))
