... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except try)
   [abstract
    [functor (.only Functor)]
    ["[0]" monad (.only Monad)]]
   [error
    ["[0]" try (.only Try) (.use "[1]:[0]" monad)]
    ["[0]" exception (.only Exception)]]]]
 [//
  ["[0]" future (.only Future) (.use "[1]:[0]" monad)]
  ["[0]" frp]])

(every .public (Process a)
  (Future (Try a)))

(every .public Channel' frp.Channel')
(every .public Channel frp.Channel)
(every .public Sink frp.Sink)

(the .public channel
  (for_any (_ a) (-> Any [(Channel a) (Sink a)]))
  frp.channel)

(the .public functor
  (Functor Process)
  (implementation
   (the (each $)
     (future:each (try:each $)))))

(the .public monad
  (Monad Process)
  (implementation
   (the functor ..functor)
   (the pure (|>> try:pure future:pure))
   (the (conjoint atatx)
     (monad.let future.monad
       [tatx atatx]
       (when tatx
         {try.:Success atx}
         atx
         
         {try.:Failure error}
         (pure {try.:Failure error}))))))

(exception.the .public channel_has_been_closed)

(the .public (read it)
  (for_any (_ r w)
    (-> (Channel' r w) (Process [r (Channel' r w)])))
  (let [[output resolver] (future.future [])]
    (exec
      (future.soon
       (future.upon! (function (_ head,tail)
                       (resolver (when head,tail
                                   {.:Some [head tail]}
                                   {try.:Success [head tail]}
                                   
                                   {.:None}
                                   (exception.except ..channel_has_been_closed []))))
                     it))
      output)))

(the .public (write value sink)
  (for_any (_ w)
    (-> w (Sink w) (Process Any)))
  (future.soon (by sink feed value)))

(the .public (close sink)
  (for_any (_ w)
    (-> (Sink w) (Process Any)))
  (future.soon (by sink close)))

(the .public try
  (for_any (_ a) (-> (Process a) (Process (Try a))))
  (future:each (|>> {try.:Success})))
