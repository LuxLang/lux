... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except or and)
   [abstract
    [functor (.only Functor)]
    [monad (.only do)]]
   [control
    ["[0]" io (.only IO) (.use "[1]#[0]" functor)]]
   ["[0]" function]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid)]]]
   [type
    ["[0]" nominal]]]]
 [//
  ["[0]" atom (.only Atom)]])

(every (Dependency it)
  (-> it
      (IO Any)))

(nominal.every .public (Computation it)
  (Atom [it (List (Dependency it))])

  (the .public value
    (for_any (_ it)
      (-> (Computation it)
          (IO it)))
    (|>> nominal.reification
         atom.read!
         (io#each product.left)))

  (the (computation value)
    (for_any (_ it)
      (-> it
          (Computation it)))
    (nominal.abstraction (atom.atom [value (list)])))

  (the .public functor
    (Functor Computation)
    (implementation
     (the (each $ input)
       (io.value (do [! io.monad]
                   [old (atom.read! (nominal.reification input))
                    .let [[current dependencies] old
                          output (computation ($ current))]
                    ? (atom.compare_and_swap! old
                                              [current (list#composite dependencies
                                                                       (list (function (retry! next)
                                                                               (do !
                                                                                 [old (atom.read! (nominal.reification output))
                                                                                  .let [[_ dependencies] old]
                                                                                  ? (atom.compare_and_swap! old
                                                                                                            [($ next) dependencies]
                                                                                                            (nominal.reification output))]
                                                                                 (if ?
                                                                                     (pure [])
                                                                                     (retry! next))))))]
                                              (nominal.reification input))]
                   (pure (if ?
                             output
                             (each $ input))))))))

  (the (watch! dependency it)
    (for_any (_ it)
      (-> (Dependency it) (Computation it)
          (IO Any)))
    (do io.monad
      [.let [it' (nominal.reification it)]
       old (atom.read! it')
       .let [[current dependencies] old]
       ? (atom.compare_and_swap! old [current (list#composite dependencies (list dependency))] it')]
      (if ?
          (pure [])
          (watch! dependency it))))

  (the (update! $ output)
    (for_any (_ it)
      (-> (-> it it) (Computation it)
          (IO Any)))
    (atom.update! (function (_ [current dependencies])
                    [($ current) dependencies])
                  (nominal.reification output)))

  (the .public (or left right)
    (for_any (_ left right)
      (-> (Computation left) (Computation right)
          (Computation (Or left right))))
    (io.value (do io.monad
                [left' (value left)
                 .let [output (computation {.#Left left'})]
                 _ (watch! (function (_ it)
                             (update! (function.constant {.#Left it}) output))
                           left)
                 _ (watch! (function (_ it)
                             (update! (function.constant {.#Right it}) output))
                           right)]
                (pure output))))

  (the .public (and left right)
    (for_any (_ left right)
      (-> (Computation left) (Computation right)
          (Computation (And left right))))
    (io.value (do io.monad
                [left' (value left)
                 right' (value right)
                 .let [output (computation [left' right'])]
                 _ (watch! (function (_ left)
                             (update! (function (_ [_ right])
                                        [left right])
                                      output))
                           left)
                 _ (watch! (function (_ right)
                             (update! (function (_ [left _])
                                        [left right])
                                      output))
                           right)]
                (pure output))))

  (the .public (either left right)
    (for_any (_ it)
      (-> (Computation it) (Computation it)
          (Computation it)))
    (io.value (do io.monad
                [left' (value left)
                 .let [output (computation left')]
                 .let [update! (function (_ it)
                                 (update! (function.constant it) output))]
                 _ (watch! update! left)
                 _ (watch! update! right)]
                (pure output))))

  (nominal.every .public (Var it)
    (Computation it)

    (the .public (var value)
      (for_any (_ it)
        (-> it
            (Var it)))
      (<| (nominal.abstraction Var)
          (nominal.abstraction Computation)
          (atom.atom [value (list)])))

    (the .public mutations
      (for_any (_ it)
        (-> (Var it)
            (Computation it)))
      (|>> (nominal.reification Var)))

    (the .public (mutate! value it)
      (for_any (_ it)
        (-> it (Var it)
            (IO Any)))
      (do [! io.monad]
        [.let [it' (|> it
                       (nominal.reification Var)
                       (nominal.reification Computation))]
         old (atom.read! it')
         .let [[_ dependencies] old]
         ? (atom.compare_and_swap! old [value dependencies] it')]
        (if ?
            (do !
              [_ (list.each' ! (function.of value) dependencies)]
              (pure []))
            (mutate! value it))))
    )
  )
