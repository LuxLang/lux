... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    ["[0]" monad (.only Monad)]]
   [control
    ["[0]" io (.only IO io)]
    ["[0]" maybe]
    ["[0]" state]]
   [error
    ["[0]" try]]
   [data
    ["[0]" product]
    [collection
     ["[0]" stack]]]
   [macro
    ["^" pattern]]
   [type (.only sharing)
    ["[0]" nominal]
    ["[0]" variance (.only Mutable)]]]]
 [//
  ["[0]" atom (.only Atom atom)]
  ["[0]" future (.only Future Resolver)]
  ["[0]" frp (.only Channel Sink)]])

(every (Observer it)
  (-> it
      (IO Any)))

(nominal.every (Var'' it)
  (Atom [it (Stack (Sink it))])

  (every .public (Var' read write)
    (Var'' (Mutable read write)))
  
  (every .public (Var it)
    (Var'' (Mutable it it)))

  (the .public (var value)
    (for_any (_ it)
      (-> it
          (Var it)))
    (nominal.of (atom.atom [(variance.write value) (stack)])))

  (the read!
    (for_any (_ read write)
      (-> (Var' read write)
          read))
    (|>> nominal.as
         atom.read!
         io.value
         product.left
         variance.read))

  (the (write! new_value var)
    (for_any (_ read write)
      (-> write (Var' read write)
          (IO Any)))
    (monad.let [! io.monad]
      [.let [var' (nominal.as var)]
       (^.let old [_ observers]) (atom.read! var')
       succeeded? (atom.compare_and_swap! old [(variance.write new_value) observers] var')]
      (if succeeded?
          (monad.let !
            [banned (stack.only' ! (function (_ sink)
                                     (monad.let !
                                       [result (by sink feed (variance.write new_value))]
                                       (pure (when result
                                               {try.#Success _}
                                               false
                                               
                                               {try.#Failure _}
                                               true))))
                                 observers)
             _ (atom.update! (function (_ [value audience])
                               (|> audience
                                   (stack.only (function (_ it)
                                                 (not (stack.any? (same? it) banned))))
                                   [value]))
                             var')]
            (pure []))
          (write! new_value var))))

  (the .public (changes target)
    (for_any (_ it)
      (-> (Var it)
          (IO [(Channel it)
               (Sink it)])))
    (monad.let io.monad
      [.let [[channel sink] (sharing [a]
                              (is (Var a)
                                  target)
                              (is [(Channel a) (Sink a)]
                                  (frp.channel [])))]
       _ (atom.update! (function (_ [value observers])
                         [value {.#Top (implementation
                                        (the close (by sink close))
                                        (the feed (|>> variance.read (by sink feed))))
                                       observers}])
                       (nominal.as target))]
      (pure [channel sink])))
  )

(every (Tx_Frame read write)
  (Record
   [#var (Var' read write)
    #original read
    #current write]))

(every Tx
  (Stack (for_some (_ read write)
           (Tx_Frame read write))))

(every .public (STM it)
  (state.State Tx it))

(the (var_value var tx)
  (for_any (_ read write)
    (-> (Var' read write) Tx
        (Maybe read)))
  (|> tx
      (stack.example (function (_ [_var _original _current])
                       (same? (as (-> Any (Var Any)) var)
                              (as (-> Any (Var Any)) _var))))
      (by maybe.monad each (function (_ [_var _original _current])
                             _current))
      as_expected))

(the .public (read var)
  (for_any (_ read write)
    (-> (Var' read write)
        (STM read)))
  (function (_ tx)
    (when (var_value var tx)
      {.#Some value}
      [tx value]

      {.#None}
      (let [value (..read! var)]
        [{.#Top [#var var
                 #original value
                 #current (as_expected value)]
                tx}
         value]))))

(the (with_updated_var var value tx)
  (for_any (_ read write)
    (-> (Var' read write) write Tx
        Tx))
  (when tx
    {.#Empty}
    {.#Empty}
    
    {.#Top [_var _original _current] tx'}
    (if (same? (as (-> Any (Var Any)) var)
               (as (-> Any (Var Any)) _var))
        {.#Top [#var _var
                #original _original
                #current (as_expected value)]
               tx'}
        {.#Top [#var _var
                #original _original
                #current _current]
               (with_updated_var var value tx')})))

(the .public (write value var)
  (for_any (_ read write)
    (-> write (Var' read write)
        (STM Any)))
  (function (_ tx)
    (when (var_value var tx)
      {.#Some _}
      [(with_updated_var var value tx)
       []]

      {.#None}
      [{.#Top [#var var
               #original (..read! var)
               #current value]
              tx}
       []])))

(the .public functor
  (Functor STM)
  state.functor)

(the .public monad
  (Monad STM)
  state.monad)

(the .public (update f var)
  (for_any (_ read write)
    (-> (-> read write) (Var' read write)
        (STM [read write])))
  (monad.let ..monad
    [before (..read var)
     .let [after (f before)]
     _ (..write after var)]
    (pure [before after])))

(the (can_commit? tx)
  (-> Tx
      Bit)
  (stack.every? (function (_ [_var _original _current])
                  (same? _original (..read! _var)))
                tx))

(the (commit_var! [_var _original _current])
  (-> (for_some (_ read write)
        (Tx_Frame read write))
      (IO Any))
  (if (same? (as (-> Any Any) _original)
             (as (-> Any Any) _current))
      (io [])
      (..write! _current _var)))

(the fresh_tx
  Tx
  (stack))

(every Commit
  (for_some (_ it)
    [(STM it)
     (Future it)
     (Resolver it)]))

(the pending_commits
  (Atom (Rec Commits
          [(Future [Commit Commits])
           (Resolver [Commit Commits])]))
  (atom (future.future [])))

(the commit_processor_flag
  (Atom Bit)
  (atom false))

(the (issue_commit! commit)
  (-> Commit
      (IO Any))
  (let [entry [commit (future.future [])]]
    (monad.let [! io.monad]
      [|commits|&resolve (atom.read! pending_commits)]
      (loop (again [[|commits| resolve] |commits|&resolve])
        (monad.let !
          [|commits| (future.value |commits|)]
          (when |commits|
            {.#None}
            (monad.let io.monad
              [resolved? (resolve entry)]
              (if resolved?
                  (atom.write! (product.right entry) pending_commits)
                  (again |commits|&resolve)))
            
            {.#Some [head tail]}
            (again tail)))))))

(the (process_commit! commit)
  (-> Commit
      (IO Any))
  (let [[stm_proc output resolve] commit
        [finished_tx value] (stm_proc fresh_tx)]
    (if (can_commit? finished_tx)
        (monad.let [! io.monad]
          [_ (stack.each' ! ..commit_var! finished_tx)]
          (resolve value))
        (..issue_commit! commit))))

(the start_commit_processor!
  (IO Any)
  (monad.let [! io.monad]
    [flag (atom.read! commit_processor_flag)]
    (if flag
        (pure [])
        (monad.let !
          [was_first? (atom.compare_and_swap! flag true commit_processor_flag)]
          (if was_first?
              (monad.let !
                [[future resolve] (atom.read! pending_commits)]
                (future.upon! (function (again [head [tail _resolve]])
                                (monad.let !
                                  [_ (..process_commit! head)]
                                  (future.upon! again tail)))
                              future))
              (pure [])))
        )))

(the .public (commit! stm_proc)
  (for_any (_ it)
    (-> (STM it)
        (Future it)))
  (let [[output resolver] (future.future [])]
    (exec
      (io.value (monad.let io.monad
                  [_ ..start_commit_processor!]
                  (..issue_commit! [stm_proc output resolver])))
      output)))
