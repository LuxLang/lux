... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Scope
                or and)
   [abstract
    [functor (.only Functor)]
    ["[0]" monad (.only Monad)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" monad)]
    ["[0]" io (.only IO) (.use "[1]#[0]" monad)]]
   [data
    [collection
     ["[0]" list]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     [/64
      ["[0]" natural]]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]
   [type (.only sharing)
    ["[0]" nominal]]]]
 ["[0]" //
  ["[1]" future (.use "[1]#[0]" monad)]
  ["[0]" thread (.only Delay)]
  ["[0]" atom (.only Atom)]])

(nominal.every .public (Future value)
  (Record
   [#cancel! (IO Bit)
    #future (//.Future (Maybe value))])

  (the .public future
    (for_any (_ value)
      (-> (Future value)
          (//.Future (Maybe value))))
    (|>> nominal.as
         (its #future)))

  (the .public cancel!
    (for_any (_ value)
      (-> (Future value) (IO Bit)))
    (|>> nominal.as
         (its #cancel!)))

  (template.with [<name> <pattern>]
    [(the .public <name>
       (for_any (_ value)
         (-> (Future value)
             (IO Bit)))
       (|>> nominal.as
            (its #future)
            //.value
            (io#each (function (_ it)
                       (when it
                         <pattern>
                         true
                         
                         _
                         false)))))]

    [[pending? {.#None}]
     [cancelled? {.#Some {.#None}}]
     [completed? {.#Some {.#Some _}}]])

  (the .public functor
    (Functor Future)
    (implementation
     (the (each $ it)
       (|> it
           nominal.as
           (revised #future (//#each (maybe#each $)))
           nominal.of))))

  (the .public monad
    (Monad Future)
    (implementation
     (the functor ..functor)

     (the pure
       (|>> maybe#pure
            //#pure
            [#cancel! (io#pure false)
             #future]
            nominal.of))

     (the (conjoint !!it)
       (let [!!it (nominal.as !!it)]
         (nominal.of
          [#cancel! (its #cancel! !!it)
           #future (monad.let [! //.monad]
                     [?!it (its #future !!it)]
                     (when ?!it
                       {.#Some !it}
                       (its #future (nominal.as !it))

                       {.#None}
                       (pure {.#None})))])))))

  (the .public (and left right)
    (for_any (_ left right)
      (-> (Future left) (Future right)
          (Future (And left right))))
    (let [[read! write!] (sharing [left right]
                           (is [(Future left) (Future right)]
                               [left right])
                           (is [(//.Future (Maybe (And left right)))
                                (//.Resolver (Maybe (And left right)))]
                               (//.future [])))
          _ (io.value (//.upon! (function (_ left)
                                  (when left
                                    {.#None}
                                    (write! {.#None})
                                    
                                    {.#Some left}
                                    (//.upon! (function (_ right)
                                                (when right
                                                  {.#None}
                                                  (write! {.#None})
                                                  
                                                  {.#Some right}
                                                  (write! {.#Some [left right]})))
                                              (its #future (nominal.as right)))))
                                (its #future (nominal.as left))))]
      (nominal.of
       [#cancel! (write! {.#None})
        #future read!])))

  (the .public (or left right)
    (for_any (_ left right)
      (-> (Future left) (Future right)
          (Future (Or left right))))
    (let [[left|right write!] (sharing [left right]
                                (is [(Future left) (Future right)]
                                    [left right])
                                (is [(//.Future (Maybe (Either left right)))
                                     (//.Resolver (Maybe (Either left right)))]
                                    (//.future [])))]
      (expansion.let [<sides> (template.with [<side> <other> <tag>]
                                [(io.value (//.upon! (function (_ it)
                                                       (when it
                                                         {.#Some it}
                                                         (write! {.#Some {<tag> it}})
                                                         
                                                         {.#None}
                                                         (//.upon! (function (_ it)
                                                                     (when it
                                                                       {.#Some it}
                                                                       (io#pure [])
                                                                       
                                                                       {.#None}
                                                                       (write! {.#None})))
                                                                   (its #future (nominal.as <other>)))))
                                                     (its #future (nominal.as <side>))))]

                                [[left  right .#Left]
                                 [right left  .#Right]])]
        (exec
          <sides>
          (nominal.of
           [#cancel! (write! {.#None})
            #future left|right])))))

  (the .public (either left right)
    (for_any (_ value)
      (-> (Future value) (Future value)
          (Future value)))
    (let [[left||right write!] (sharing [value]
                                 (is (Future value)
                                     left)
                                 (is [(//.Future (Maybe value))
                                      (//.Resolver (Maybe value))]
                                     (//.future [])))]
      (expansion.let [<sides> (template.with [<side> <other>]
                                [(io.value (//.upon! (function (_ it)
                                                       (when it
                                                         {.#Some it}
                                                         (write! {.#Some it})
                                                         
                                                         {.#None}
                                                         (//.upon! (function (_ it)
                                                                     (when it
                                                                       {.#Some it}
                                                                       (io#pure [])
                                                                       
                                                                       {.#None}
                                                                       (write! {.#None})))
                                                                   (its #future (nominal.as <other>)))))
                                                     (its #future (nominal.as <side>))))]

                                [[left  right]
                                 [right left]])]
        (exec
          <sides>
          (nominal.of
           [#cancel! (write! {.#None})
            #future left||right])))))

  (every .public (Action value)
    (-> (Future value)
        (IO (Maybe value))))

  (every ID
    Natural)

  (every Pending
    (Dictionary ID
                (for_some (_ value)
                  (Future value))))

  (nominal.every .public (Scope value)
    (Record
     [#pending (Atom [ID Pending])
      #itself (Future value)])

    (the .public close!
      (for_any (_ value)
        (-> (Scope value)
            (IO Bit)))
      (|>> (nominal.as Scope)
           (its #itself)
           (nominal.as Future)
           (its #cancel!)))

    (the .public closed?
      (for_any (_ value)
        (-> (Scope value)
            (IO Bit)))
      (|>> (nominal.as Scope)
           (its #itself)
           cancelled?))

    (the .public (with_scope body)
      (for_any (_ value)
        (-> (-> (Scope value) (Future value))
            (Future value)))
      (let [[future resolve!] (sharing [value]
                                (is (-> (Scope value) (Future value))
                                    body)
                                (is [(//.Future (Maybe value)) (//.Resolver (Maybe value))]
                                    (//.future [])))
            pending (is (Atom [ID Pending])
                        (atom.atom [0 (dictionary.empty natural.hash)]))
            close! (monad.let [! io.monad]
                     [... Cancel all pending tasks.
                      [next pending] (atom.read! pending)
                      _ (list.each' ! cancel! (dictionary.values pending))]
                     (resolve! {.#None}))
            scope (<| (nominal.of Scope)
                      [#pending pending
                       #itself (<| (nominal.of Future)
                                   [#cancel! close!
                                    #future future])])
            it (body scope)]
        (<| (nominal.of Future)
            [#cancel! close!
             #future (exec
                       (|> (nominal.as Future it)
                           (its #future)
                           (//.upon! (function (_ it)
                                       (monad.let io.monad
                                         [_ (resolve! it)]
                                         close!)))
                           io.value)
                       future)])))

    (the (un_register! scope id)
      (for_any (_ value)
        (-> (Scope value) ID (IO Any)))
      (|> scope
          nominal.as
          (its #pending)
          (atom.update! (function (_ [next pending])
                          (|> pending
                              (dictionary.lacks id)
                              [next])))))

    (the (register! scope it)
      (for_any (_ value)
        (-> (Scope value) (Future value) (IO Any)))
      (monad.let io.monad
        [[[next _] _] (|> scope
                          nominal.as
                          (its #pending)
                          (atom.update! (function (_ [next pending])
                                          (|> pending
                                              (dictionary.has next it)
                                              [(++ next)]))))]
        (|> it
            (nominal.as Future)
            (its #future)
            (//.upon! (function (_ _)
                        (un_register! scope next))))))

    (the .public (schedule! scope milli_seconds action)
      (for_any (_ value)
        (-> (Scope value) Delay (Action value)
            (Future value)))
      (let [[future resolve!] (sharing [value]
                                (is (Action value)
                                    action)
                                (is [(//.Future (Maybe value)) (//.Resolver (Maybe value))]
                                    (//.future [])))
            cancel! (resolve! {.#None})
            it (<| (nominal.of Future)
                   [#cancel! cancel!
                    #future future])]
        (exec
          (<| io.value
              (is (IO Any))
              (monad.let [! io.monad]
                [? (closed? scope)]
                (if ?
                    cancel!
                    (monad.let !
                      [_ (register! scope it)]
                      (<| (thread.schedule! milli_seconds)
                          (monad.let !
                            [_ (pure [])
                             value (action it)]
                            (resolve! value)))))))
          it)))
    )
  )

(the .public (soon scope it)
  (for_any (_ value)
    (-> (Scope value) (Action value)
        (Future value)))
  (..schedule! scope 0 it))

(the .public (after scope milli_seconds value)
  (for_any (_ value)
    (-> (Scope value) Delay value
        (Future value)))
  (..schedule! scope milli_seconds
               (function (_ _)
                 (io#pure {.#Some value}))))

(the .public (delay scope milli_seconds)
  (for_any (_ value)
    (-> (Scope value) Delay
        (Future Any)))
  (..after scope milli_seconds []))
