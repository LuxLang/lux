... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   ["[0]" debug]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io (.only IO io)]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text]]
   [math
    [number
     ["n" natural]
     ["d" decimal]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]
   [meta
    ["[0]" configuration]]
   [time
    ["[0]" instant (.only Instant) (.use "[1]#[0]" order)]
    ["[0]" duration]]]]
 [//
  ["[0]" atom (.only Atom)]
  ["[0]" event]])

(for .jvm (these (ffi.import java/lang/Object
                   "[1]::[0]")
                 
                 (ffi.import java/lang/Long
                   "[1]::[0]")

                 (ffi.import java/lang/Runtime
                   "[1]::[0]"
                   ("static" getRuntime [] java/lang/Runtime)
                   (availableProcessors [] int))

                 (ffi.import java/lang/Runnable
                   "[1]::[0]")

                 (ffi.import java/util/concurrent/TimeUnit
                   "[1]::[0]"
                   ("enum" MILLISECONDS))
                 
                 (ffi.import java/util/concurrent/Executor
                   "[1]::[0]"
                   (execute [java/lang/Runnable] "io" void))

                 (ffi.import (java/util/concurrent/ScheduledFuture a)
                   "[1]::[0]")

                 (ffi.import java/util/concurrent/ScheduledThreadPoolExecutor
                   "[1]::[0]"
                   (new [int])
                   (schedule [java/lang/Runnable long java/util/concurrent/TimeUnit] "io" (java/util/concurrent/ScheduledFuture java/lang/Object))))

     .js
     (these (ffi.import (setTimeout [ffi.Function ffi.Number] "io" Any)))

     .python
     (these (ffi.import threading/Timer
              "[1]::[0]"
              (start [] "io" "?" Any))
            (ffi.import threading
              "[1]::[0]"
              ("static" Timer [ffi.Float ffi.Function] threading/Timer)))
     
     ... Default
     (these)
     )

(the .public parallelism
  Natural
  (expansion.let [<default> 1]
    (for .jvm (<| (configuration.for ["lua_compiler?" ""]
                                     ... TODO: Remove this when Rembulan is no longer being used.
                                     <default>)
                  (|> [] java/lang/Runtime::getRuntime
                      (java/lang/Runtime::availableProcessors [])
                      ffi.of_int
                      .natural))
         ... Default
         <default>)))

(for .jvm (the runner
            java/util/concurrent/ScheduledThreadPoolExecutor
            (|> ..parallelism
                .integer
                ffi.as_int
                [] java/util/concurrent/ScheduledThreadPoolExecutor::new))
     .js (these)
     .python (these)
     
     ... Default
     (the schedule!,value
       (let [[module _] (name .._)]
         (event.loop module))))

(the (execute! action)
  (-> (IO Any) Any)
  (when (try (io.value action))
    {try.#Failure error}
    (exec
      (debug.log! (.text_composite# "ERROR DURING THREAD EXECUTION:" text.\n
                                    error))
      [])
    
    {try.#Success _}
    []))

(every .public Delay
  Natural)

(the .public milli_second
  Delay
  1)

(template.with [<name> <scale> <base>]
  [(the .public <name>
     Delay
     (n.* <scale> <base>))]

  [second 1,000 milli_second]
  [minute    60 second]
  [hour      60 minute]
  [day       24 hour]
  [week       7 day]
  )

(the .public (schedule! milli_seconds action)
  (-> Delay (IO Any) (IO Any))
  (for .jvm
       (let [runnable (ffi.object [] [java/lang/Runnable]
                        []
                        (java/lang/Runnable [] (run self []) void
                                            (..execute! action)))]
         (when milli_seconds
           0 (java/util/concurrent/Executor::execute [runnable] runner)
           _ (java/util/concurrent/ScheduledThreadPoolExecutor::schedule [runnable (.integer milli_seconds) java/util/concurrent/TimeUnit::MILLISECONDS]
                                                                         runner)))

       .js
       (..setTimeout [(ffi.function (_ []) Any (..execute! action))
                      (n.decimal milli_seconds)])

       .python
       (do io.monad
         [_ (|> (ffi.function (_ []) Any (..execute! action))
                [(|> milli_seconds n.decimal (d./ +1,000.0))]
                threading::Timer
                (threading/Timer::start []))]
         (in []))
       
       ... Default
       (let [[schedule! value] ..schedule!,value]
         (schedule! milli_seconds action))))

(for .jvm (these)
     .js (these)
     .python (these)
     
     ... Default
     (the .public value
       (IO Any)
       (let [[schedule! value] ..schedule!,value]
         (do io.monad
           [outcome value]
           (in (when outcome
                 {try.#Success _}
                 []
                 
                 {try.#Failure error}
                 (debug.log! error))))))
     )
