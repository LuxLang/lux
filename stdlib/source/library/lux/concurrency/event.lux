... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Event_loop
(.using
 [library
  [lux (.except loop)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" io (.only IO)]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" stack]]]
   [math
    [number
     ["n" natural]]]
   [time
    ["[0]" instant (.only Instant) (.use "[1]#[0]" order)]
    ["[0]" duration]]]]
 [//
  ["[0]" atom (.only Atom)]])

(the Action
  (type (IO Any)))

(every Event
  (Record
   [#when Instant
    #what Action]))

(the Scheduler
  (type (-> Natural Action
            (IO Any))))

(the Loop
  (type (IO (Try Natural))))

(exception.the .public (error_during_execution [loop error])
  (Exception [Text Text])
  (exception.report
   (stack ["Loop" (%.text loop)]
          ["Error" error])))

(the (execute! loop action)
  (-> Text Action (Try Any))
  (when (try (io.value action))
    {try.#Failure error}
    (exception.except ..error_during_execution [loop error])
    
    success
    success))

(exception.the .public (already_started loop)
  (Exception Text)
  (exception.report
   (stack ["Loop" (%.text loop)])))

(the .public (loop name)
  (-> Text [Scheduler Loop])
  (let [state (is (Atom [Bit (Stack Event)])
                  (atom.atom [false (stack)]))]
    [(is Scheduler
         (function (schedule! milli_seconds action)
           (do io.monad
             [now instant.now
              _ (atom.update! (function (_ [stated? events])
                                [stated?
                                 (stack.partial [#when (instant.after (duration.of_millis (.integer milli_seconds))
                                                                      now)
                                                 #what action]
                                                events)])
                              state)]
             (in []))))
     (is Loop
         (.loop (retry! [_ []])
           (do [! io.monad]
             [started?,events (atom.read! state)
              .let [[started? events] started?,events]]
             (if started?
               (in (exception.except ..already_started [name]))
               (do !
                 [swapped? (atom.compare_and_swap! started?,events [true events] state)]
                 (if swapped?
                   (.loop (again [events_processed 0])
                     (do !
                       [started?,events (atom.read! state)
                        .let [[started? events] started?,events]]
                       (when events
                         ... And... we're done!
                         {.#Empty}
                         (in {try.#Success events_processed})

                         _
                         (do !
                           [now instant.now
                            .let [[pending ready] (stack.partition (function (_ thread)
                                                                     (instant#< (its #when thread) now))
                                                                   events)]
                            swapped? (atom.compare_and_swap! started?,events [started? pending] state)]
                           (if swapped?
                             (do [! (try.with !)]
                               [_ (monad.each ! (|>> (its #what) (..execute! name) io.io) ready)]
                               (again (n.+ (stack.size ready) events_processed)))
                             (again events_processed))))))
                   (retry! [])))))))]))
