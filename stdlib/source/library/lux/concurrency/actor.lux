... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" io (.only IO io)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" bit]
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid)]]]
   [macro
    ["[0]" local]
    ["[0]" template]]
   [type (.only sharing)
    ["[0]" nominal]]]]
 [//
  ["[0]" atom (.only Atom atom)]
  ["[0]" future (.only Future Resolver) (.use "[1]#[0]" monad)]
  ["[0]" frp (.only Channel Channel')]])

(exception.the .public poisoned)
(exception.the .public dead)

(local.let [<Mail> (template.macro (_ Actor state)
                     [(-> state (Actor state)
                          (Future (Try state)))])
            <Obituary> (template.macro (_ Actor state)
                         [[Text state (List (<Mail> Actor state))]])
            <Mailbox> (template.macro (_ Actor state)
                        [(Rec Mailbox
                           [(Future [(<Mail> Actor state) Mailbox])
                            (Resolver [(<Mail> Actor state) Mailbox])])])]
  (these (the (pending [read write])
           (for_any (_ it)
             (-> (Rec Mailbox
                   [(Future [it Mailbox])
                    (Resolver [it Mailbox])])
                 (IO (List it))))
           (do [! io.monad]
             [current (future.value read)]
             (when current
               {.#Some [head tail]}
               (by ! each (list#composite (list head))
                   (pending tail))
               
               {.#None}
               (in (list)))))
         
         (nominal.every .public (Actor state)
           (Record
            [#obituary [(Future (<Obituary> Actor state))
                        (Resolver (<Obituary> Actor state))]
             #mailbox (Atom (<Mailbox> Actor state))])

           (every .public (Mail state)
             (<Mail> Actor state))

           (every .public (Obituary state)
             (<Obituary> Actor state))

           (every .public (Behavior state)
             (-> (Mail state) state (Actor state)
                 (Future (Try state))))

           (the .public (spawn! behavior init)
             (for_any (_ state)
               (-> (Behavior state) state
                   (IO (Actor state))))
             (io (let [self (`` (is (Actor (,, (type_of init)))
                                    (nominal.abstraction
                                     [#obituary (future.future [])
                                      #mailbox (atom (future.future []))])))
                       process (loop (again [state init
                                             [|mailbox| _] (io.value (atom.read! (its #mailbox (nominal.reification self))))])
                                 (do [! future.monad]
                                   [[head tail] |mailbox|
                                    ?state' (behavior head state self)]
                                   (when ?state'
                                     {try.#Failure error}
                                     (let [[_ resolve] (its #obituary (nominal.reification self))]
                                       (exec
                                         (io.value
                                          (do io.monad
                                            [pending (..pending tail)]
                                            (resolve [error state (list#composite (list head) pending)])))
                                         (in [])))

                                     {try.#Success state'}
                                     (again state' tail))))]
                   self)))

           (the .public (alive? actor)
             (for_any (_ state)
               (-> (Actor state)
                   (IO Bit)))
             (let [[obituary _] (its #obituary (nominal.reification actor))]
               (|> obituary
                   future.value
                   (by io.functor each
                       (|>> (pipe.when
                              {.#None}
                              bit.yes

                              _
                              bit.no))))))

           (the .public (obituary' actor)
             (for_any (_ state)
               (-> (Actor state)
                   (IO (Maybe (Obituary state)))))
             (let [[obituary _] (its #obituary (nominal.reification actor))]
               (future.value obituary)))

           (the .public obituary
             (for_any (_ state)
               (-> (Actor state)
                   (Future (Obituary state))))
             (|>> nominal.reification
                  (its #obituary)
                  product.left))

           (the .public (mail! mail actor)
             (for_any (_ state)
               (-> (Mail state) (Actor state)
                   (IO (Try Any))))
             (do [! io.monad]
               [alive? (..alive? actor)]
               (if alive?
                   (let [entry [mail (future.future [])]]
                     (do !
                       [|mailbox|&resolve (atom.read! (its #mailbox (nominal.reification actor)))]
                       (loop (again [[|mailbox| resolve] |mailbox|&resolve])
                         (do !
                           [|mailbox| (future.value |mailbox|)]
                           (when |mailbox|
                             {.#None}
                             (do !
                               [resolved? (resolve entry)]
                               (if resolved?
                                   (do !
                                     [_ (atom.write! (product.right entry) (its #mailbox (nominal.reification actor)))]
                                     (in {try.#Success []}))
                                   (again |mailbox|&resolve)))
                             
                             {.#Some [_ |mailbox|']}
                             (again |mailbox|'))))))
                   (in (exception.except ..dead [])))))

           (every .public (Message state it)
             (-> state (Actor state)
                 (Future (Try [state it]))))

           (the (mail message)
             (for_any (_ state it)
               (-> (Message state it)
                   [(Future (Try it))
                    (Mail state)]))
             (let [[future resolve] (sharing [state it]
                                      (is (Message state it)
                                          message)
                                      (is [(Future (Try it))
                                           (Resolver (Try it))]
                                          (future.future [])))]
               [future
                (function (_ state self)
                  (do [! future.monad]
                    [outcome (message state self)]
                    (when outcome
                      {try.#Success [state' return]}
                      (exec
                        (io.value (resolve {try.#Success return}))
                        (future.resolved {try.#Success state'}))
                      
                      {try.#Failure error}
                      (exec
                        (io.value (resolve {try.#Failure error}))
                        (future.resolved {try.#Failure error})))))]))

           (the .public (request! message actor)
             (for_any (_ state it)
               (-> (Message state it) (Actor state)
                   (Future (Try it))))
             (let [[future mail] (..mail message)]
               (do future.monad
                 [outcome (future.soon (..mail! mail actor))]
                 (when outcome
                   {try.#Success _}
                   future
                   
                   {try.#Failure error}
                   (in {try.#Failure error})))))
           )))

(the .public default
  Behavior
  (function (_ mail state self)
    (mail state self)))

(the .public (poison! actor)
  (for_any (_ state)
    (-> (Actor state)
        (IO (Try Any))))
  (..mail! (function (_ state self)
             (future.resolved (exception.except ..poisoned [])))
           actor))

(every .public Stop
  (IO Any))

(the continue! true)
(the stop! false)

(the .public (observe! action channel actor)
  (for_any (_ read write state)
    (-> (-> read Stop (Mail state)) (Channel' read write) (Actor state)
        (IO Any)))
  (let [signal (is (Atom Bit)
                   (atom.atom ..continue!))
        stop (is Stop
                 (atom.write! ..stop! signal))]
    (frp.subscribe! (function (_ event)
                      (do [! io.monad]
                        [continue? (atom.read! signal)]
                        (if continue?
                            (|> actor
                                (..mail! (action event stop))
                                (by ! each try.maybe))
                            (in {.#None}))))
                    channel)))

... The following behavior and messages allow Lux's actors to behave like Clojure's agents.
... https://clojure.org/reference/agents

(exception.the .public invalid)

(the .public (validated ? it)
  (for_any (_ state)
    (-> (Predicate state) (Behavior state)
        (Behavior state)))
  (function (_ mail before actor)
    (do (try.with future.monad)
      [after (mail before actor)]
      (if (? after)
          (in after)
          (future#in (exception.except ..invalid []))))))

(the .public state
  (for_any (_ state)
    (Message state state))
  (function (_ state self)
    (future#in {try.#Success [state state]})))

(the .public (update $)
  (for_any (_ state)
    (-> (-> state state)
        (Message state [state state])))
  (function (_ before self)
    (let [after ($ before)]
      (future#in {try.#Success [after [before after]]}))))

(the .public (reset after)
  (for_any (_ state)
    (-> state
        (Message state state)))
  (function (_ before self)
    (future#in {try.#Success [after before]})))
