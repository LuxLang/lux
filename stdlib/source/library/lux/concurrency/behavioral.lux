... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [macro
    ["[0]" template]]]]
 [//
  ["[0]" future (.only Future) (.use "[1]:[0]" monad)]
  ["[0]" frp (.only Channel)]])

(the <Event>
  (template.macro (_ Constructor data)
    [[(Constructor data) data]]))

(every .public (Constructor data)
  (-> data (<Event> Constructor data)))

(every .public Event
  (for_some (_ data)
    (<Event> Constructor data)))

(the .public (event constructor)
  (for_any (_ data)
    (-> (-> data data)
        (Constructor data)))
  (exec
    [] ... This was added to avoid having auto-currying to fuse the "event" and "self" functions.
    ... Otherwise, the "identical?" comparison done later would fail.
    (function (self data)
      [self (constructor data)])))

(the .public (event? expected it)
  (for_any (_ data)
    (-> (Constructor data) Event
        (Maybe data)))
  (let [[actual data] it]
    (if (identical? expected actual)
        {.:Some (as_expected data)}
        {.:None})))

(the .public (scenario events expected initial behavior)
  (for_any (_ state data)
    (-> (Channel Event) (Constructor data) state (-> data state (Future state))
        (Future state)))
  (frp.mix (function (_ event state)
             (when (event? expected event)
               {.:Some data}
               (behavior data state)
               
               {.:None}
               (future:pure state)))
           initial
           events))
