... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" pipe]
    ["[0]" io (.only IO)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" queue (.only Queue)]]]
   [math
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [macro
    ["[0]" expansion]
    ["[0]" template]]
   [type
    ["[0]" nominal]
    ["[0]" refinement]]]]
 [//
  ["[0]" atom (.only Atom)]
  ["[0]" future (.only Future Resolver)]])

(every State
  (Record
   [:max_positions Natural
    :open_positions Integer
    :waiting_list (Queue (Resolver Any))]))

(nominal.every .public Semaphore
  (Atom State)

  (the most_positions_possible
    (.natural (by i.interval maximum)))

  (the .public (semaphore initial_open_positions)
    (-> Natural
        Semaphore)
    (let [max_positions (n.minor initial_open_positions
                                 ..most_positions_possible)]
      (nominal.of
       (atom.atom [:max_positions max_positions
                   :open_positions (.integer max_positions)
                   :waiting_list queue.empty]))))

  (the .public (wait! semaphore)
    (-> Semaphore
        (Future Any))
    (let [semaphore (nominal.as semaphore)
          [signal sink] (is [(Future Any) (Resolver Any)]
                            (future.future []))]
      (exec
        (io.value
         (expansion.let [<had_open_position?> (these (its :open_positions) (i.> -1))]
           (monad.let io.monad
             [[_ state'] (atom.update! (|>> (revised :open_positions --)
                                            (pipe.if [<had_open_position?>]
                                                     []
                                                     [(revised :waiting_list (queue.end sink))]))
                                       semaphore)]
             (expansion.let [<go_ahead> (sink [])
                             <get_in_line> (pure false)]
               (if (|> state' <had_open_position?>)
                   <go_ahead>
                   <get_in_line>)))))
        signal)))

  (exception.the .public (semaphore_is_maxed_out max_positions)
    (Exception Natural)
    (exception.report
     (list ["Max Positions" (%.natural max_positions)])))

  (the .public (signal! semaphore)
    (-> Semaphore
        (Future (Try Integer)))
    (let [semaphore (nominal.as semaphore)]
      (future.soon
       (monad.let [! io.monad]
         [[pre post] (atom.update! (function (_ state)
                                     (if (i.= (.integer (its :max_positions state))
                                              (its :open_positions state))
                                         state
                                         (|> state
                                             (revised :open_positions ++)
                                             (revised :waiting_list queue.next))))
                                   semaphore)]
         (if (identical? pre post)
             (pure (exception.except ..semaphore_is_maxed_out [(its :max_positions pre)]))
             (monad.let !
               [_ (when (queue.front (its :waiting_list pre))
                    {try.:Success sink}
                    (sink [])

                    failure
                    (pure true))]
               (pure {try.:Success (its :open_positions post)})))))))
  )

(nominal.every .public Mutex
  Semaphore

  (the .public (mutex _)
    (-> Any
        Mutex)
    (nominal.of (semaphore 1)))

  (the acquire!
    (-> Mutex
        (Future Any))
    (|>> nominal.as
         ..wait!))

  (the release!
    (-> Mutex
        (Future (Try Integer)))
    (|>> nominal.as
         ..signal!))

  (the .public (synchronize! mutex procedure)
    (for_any (_ it)
      (-> Mutex (IO (Future it))
          (Future it)))
    (monad.let future.monad
      [_ (..acquire! mutex)
       output (io.value procedure)
       _ (..release! mutex)]
      (pure output)))
  )

(the .public limit
  (refinement.refiner (n.> 0)))

(every .public Limit
  (, (refinement.type limit)))

(nominal.every .public Barrier
  (Record
   [:limit Limit
    :count (Atom Natural)
    :start_turnstile Semaphore
    :end_turnstile Semaphore])

  (the .public (barrier limit)
    (-> Limit
        Barrier)
    (nominal.of
     [:limit limit
      :count (atom.atom 0)
      :start_turnstile (..semaphore 0)
      :end_turnstile (..semaphore 0)]))

  (the (un_block! times turnstile)
    (-> Natural Semaphore
        (Future Any))
    (loop (of [step 0])
      (if (n.< times step)
          (monad.let future.monad
            [outcome (..signal! turnstile)]
            (of (++ step)))
          (by future.monad pure []))))

  (template.with [<phase> <update> <goal> <turnstile>]
    [(the (<phase> barrier)
       (-> Barrier
           (Future Any))
       (monad.let future.monad
         [.let [barrier (nominal.as barrier)
                limit (refinement.value (its :limit barrier))
                goal <goal>
                [_ count] (io.value (atom.update! <update> (its :count barrier)))
                reached? (n.= goal count)]]
         (if reached?
             (..un_block! (-- limit) (its <turnstile> barrier))
             (..wait! (its <turnstile> barrier)))))]

    [[start! ++ limit :start_turnstile]
     [end!   -- 0     :end_turnstile]])

  (the .public (block! barrier)
    (-> Barrier
        (Future Any))
    (monad.let future.monad
      [_ (..start! barrier)]
      (..end! barrier)))
  )
