... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io (.only IO) (.use "[1]#[0]" functor)]]
   ["[0]" function]
   [data
    ["[0]" product]
    [collection
     ["[0]" array
      ["[1]" \\unsafe]]]]
   [type
    ["[0]" nominal]
    ["[0]" variance (.only Mutable)]]]])

(for .jvm (ffi.import (java/util/concurrent/atomic/AtomicReference it)
                      "[1]::[0]"
                      (new [it])
                      (get [] it)
                      (compareAndSet [it it] boolean))
     (these))

(nominal.every .public (Atom'' it)
  (for .jvm (java/util/concurrent/atomic/AtomicReference it)
       (.Array it))

  (every .public (Atom' r w)
    (Atom'' (Mutable r w)))

  (every .public (Atom it)
    (Atom' it it))

  (the .public (atom value)
    (for_any (_ it)
      (-> it
          (Atom it)))
    (nominal.abstraction
     (for .jvm (as_expected (java/util/concurrent/atomic/AtomicReference::new [value]))
          (array.has! 0 (variance.write value) (array.empty 1)))))

  (the .public (read! atom)
    (for_any (_ r w)
      (-> (Atom' r w)
          (IO r)))
    (io.io (for .jvm (as_expected (java/util/concurrent/atomic/AtomicReference::get [] (nominal.reification atom)))
                (variance.read (array.item 0 (nominal.reification atom))))))

  (the .public (compare_and_swap! current new atom)
    (for_any (_ r w) (-> r w (Atom' r w) (IO Bit)))
    (io.io (for .jvm (ffi.of_boolean
                      (java/util/concurrent/atomic/AtomicReference::compareAndSet [current new] (nominal.reification atom)))
                (if (|> (nominal.reification atom)
                        (array.item 0)
                        variance.read
                        (same? current))
                    (exec
                      (array.has! 0 (variance.write new) (nominal.reification atom))
                      true)
                    false))))
  )

(the .public (update! f atom)
  (for_any (_ r w) (-> (-> r w) (Atom' r w) (IO [r w])))
  (loop (again [_ []])
    (do io.monad
      [old (read! atom)
       .let [new (f old)]
       swapped? (compare_and_swap! old new atom)]
      (if swapped?
          (in [old new])
          (again [])))))

(the .public (write! value atom)
  (for_any (_ r w) (-> w (Atom' r w) (IO r)))
  (|> atom
      (..update! (function.constant value))
      (io#each product.left)))
