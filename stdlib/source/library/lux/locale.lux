(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    ["[0]" hash (.only Hash)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [data
    ["[0]" text (.only)
     ["%" \\format (.only format)]
     ["[0]" encoding (.only Encoding)]]]
   [type
    [primitive (.except)]]]]
 [/
  ["[0]" language (.only Language)]
  ["[0]" territory (.only Territory)]])

(primitive .public Locale
  Text

  (def territory_separator "_")
  (def encoding_separator ".")

  (def .public (locale language territory encoding)
    (-> Language (Maybe Territory) (Maybe Encoding) Locale)
    (abstraction (format (language.code language)
                         (|> territory
                             (maybe#each (|>> territory.long_code (format ..territory_separator)))
                             (maybe.else ""))
                         (|> encoding
                             (maybe#each (|>> encoding.name (format ..encoding_separator)))
                             (maybe.else "")))))

  (def .public code
    (-> Locale Text)
    (|>> representation))

  (def .public hash
    (Hash Locale)
    (at hash.functor each ..code text.hash))

  (def .public equivalence
    (Equivalence Locale)
    (at ..hash equivalence))
  )
