(.module:
  [library
   [lux #*
    [abstract
     [monoid (#+ Monoid)]]]])

(def: .public identity
  (All (_ a) (-> a a))
  (|>>))

(def: .public (composite f g)
  (All (_ a b c)
    (-> (-> b c) (-> a b) (-> a c)))
  (|>> g f))

(def: .public (constant value)
  (All (_ o) (-> o (All (_ i) (-> i o))))
  (function (_ _) value))

(def: .public (flipped f)
  (All (_ a b c)
    (-> (-> a b c) (-> b a c)))
  (function (_ x y) (f y x)))

(def: .public (on input function)
  (All (_ i o)
    (-> i (-> i o) o))
  (function input))

(implementation: .public monoid
  (All (_ a) (Monoid (-> a a)))
  
  (def: identity ..identity)
  (def: composite ..composite))
