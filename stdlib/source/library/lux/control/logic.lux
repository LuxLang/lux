... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except natural integer revolution
                or and)
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]
    [monad (.only Monad
                  do)]]
   [control
    ["[0]" try (.only Try) (.use "[1]#[0]" monad)]
    ["[0]" state]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" list (.use "[1]#[0]" monad mix monoid)]]]
   [math
    [number
     ["[0]" natural]
     ["[0]" integer]
     ["[0]" revolution]
     ["[0]" decimal]]]
   [meta
    [type
     ["[0]" nominal]
     ["[0]" object (.only Object object)]]
    [macro
     ["^" pattern]
     ["[0]" expansion]]]]])

(the .public natural
  (Equivalence Natural)
  natural.equivalence)

(the .public integer
  (Equivalence Integer)
  integer.equivalence)

(the .public revolution
  (Equivalence Revolution)
  revolution.equivalence)

(the .public decimal
  (Equivalence Decimal)
  decimal.equivalence)

(the .public text
  (Equivalence Text)
  text.equivalence)

(every ID
  Natural)

(every Binding
  (for_some (_ of)
    [(Equivalence of)
     (Either ID of)]))

(every Context
  (Dictionary ID Binding))

(the empty
  Context
  (dictionary.empty natural.hash))

(every .public Logic
  (state.With Context List))

(the .public (values it)
  (for_any (_ of)
    (-> (Logic of)
        (List of)))
  (|> ..empty
      it
      (list#each product.right)))

(the .public failure
  (Logic Nothing)
  (function (_ context)
    (list)))

(the .public success
  (Logic Any)
  (function (_ context)
    (list [context []])))

(the .public monad
  (Monad Logic)
  (state.with list.monad))

(the .public functor
  (Functor Logic)
  (by ..monad functor))

(the .public (or left right)
  (for_any (_ of)
    (-> (Logic of) (Logic of)
        (Logic of)))
  (function (_ context)
    (list#composite (left context)
                    (right context))))

(the .public (and left right)
  (for_any (_ left right)
    (-> (Logic left) (Logic right)
        (Logic right)))
  (do ..monad
    [_ left]
    right))

(expansion.let [,Term (these (Object (Term' of)))]
  (these (object.every .public (Term' [of] _)
           [#value (object.Method [] (Logic of))
            #unified (object.Method [,Term] (Logic Any))])

         (.every .public (Term of)
           ,Term)))

(the .public (value it)
  (for_any (_ of)
    (-> ((Term of) Any)
        (Logic of)))
  (object.on #value [] it))

(the .public (= expected actual)
  (for_any (_ of)
    (-> (Term of) ((Term of) Any)
        (Logic Any)))
  (object.on #unified [expected] actual))

(every (Constant of)
  [(Equivalence of) of])

(the class_of_constant
  (for_any (_ of)
    ((Term' of) (Constant of)))
  [#value (object.method
            (function (_ next again [this []])
              (let [[this#= this_value] (object.state this)]
                (by ..monad in this_value))))
   #unified (object.method
              (function (_ next again [this [expected]])
                (when (object.as (object.class this) expected)
                  {.#Some expected}
                  (let [[expected#= expected_value] (object.state expected)
                        [this#= this_value] (object.state this)]
                    (if (this#= expected_value this_value)
                      ..success
                      ..failure))

                  {.#None}
                  (= this expected))))])

(the .public (constant equivalence it)
  (for_any (_ of)
    (-> (Equivalence of) of
        (Term of)))
  (object ..class_of_constant [equivalence it]))

(nominal.every (Variable of)
  ID

  (the (binding id context)
    (for_any (_ of)
      (-> (Variable of) Context
          (Try (Binding of))))
    (|> context
        (dictionary.value (nominal.representation id))
        (try#each (|>> as_expected))))

  (the (has_binding equivalence value id context)
    (for_any (_ of)
      (-> (Equivalence of) of ID Context
          Context))
    (dictionary.has id [equivalence {.#Right value}] context))

  (every Ring
    (List ID))

  (the (ring start context)
    (-> ID Context
        (Try Ring))
    (loop (next [id start
                 output (is Ring (list))])
      (do try.monad
        [[_ it] (dictionary.value id context)]
        (when it
          {.#Left link}
          (if (natural.= start link)
            (in (list.partial start output))
            (next link (list.partial link output)))

          {.#Right value}
          (undefined)))))

  (the (connected left right context)
    (-> Ring Ring Context
        (Try Context))
    (when [left right]
      [(list left) (list right)]
      (|> context
          (dictionary.revised left (function (_ [equivalence _])
                                     [equivalence {.#Left right}]))
          (dictionary.revised right (function (_ [equivalence _])
                                      [equivalence {.#Left left}]))
          try#in)

      (^.or [(list.partial head tail) it]
            [it (list.partial head tail)])
      (do try.monad
        [[_ head'] (dictionary.value head context)]
        (when head'
          {.#Left next}
          (let [[last context] (list#mix (function (_ next [previous context])
                                           (|> context
                                               (dictionary.revised previous (function (_ [equivalence _])
                                                                              [equivalence {.#Left next}]))
                                               [next]))
                                         [head context]
                                         it)]
            (in (dictionary.revised last (function (_ [equivalence _])
                                           [equivalence {.#Left next}])
                                    context)))

          {.#Right _}
          (undefined)))

      _
      (try#in context)))

  (the (unified_variables expected_id this)
    (for_any (_ of)
      (-> (Variable of) ((Term of) (Variable of))
          (Logic Any)))
    (function (_ context)
      (let [this_id (object.state this)]
        (<| (try.else (list))
            (is (Try (List [Context Any])))
            (do [! try.monad]
              [[expected#= expected_value] (binding expected_id context)
               [this#= this_value] (binding this_id context)]
              (when [expected_value this_value]
                [{.#Right expected_value}
                 {.#Right this_value}]
                (in (if (by this#= = expected_value this_value)
                      (list [context this_value])
                      (list)))

                [{.#Right expected_value}
                 {.#Left this_link}]
                (do !
                  [ring (..ring this_link context)]
                  (in (list [(list#mix (has_binding this#= expected_value) context ring)
                             []])))

                [{.#Left expected_link}
                 {.#Right this_value}]
                (do !
                  [ring (..ring expected_link context)]
                  (in (list [(list#mix (has_binding expected#= this_value) context ring)
                             []])))

                [{.#Left expected_link}
                 {.#Left this_link}]
                (do !
                  [this_ring (..ring this_link context)
                   expected_ring (..ring expected_link context)
                   context (connected this_ring expected_ring context)]
                  (in (list [context []])))))))))

  (the class_of_variable
    (for_any (_ of)
      ((Term' of) (Variable of)))
    [#value (object.method
              (function (_ next again [this []])
                (function (_ context)
                  (when (dictionary.value (nominal.representation (object.state this))
                                          context)
                    {try.#Success [this#= {.#Right this_value}]}
                    (list [context this_value])

                    _
                    (list)))))
     #unified (object.method
                (function (_ next again [this [expected]])
                  (when (object.as (object.class this) expected)
                    {.#Some expected}
                    (let [expected_id (object.state expected)]
                      (unified_variables expected_id this))

                    {.#None}
                    (do ..monad
                      [expected_value (..value expected)]
                      (function (_ context)
                        (let [id (object.state this)]
                          (<| (try.else (list))
                              (is (Try (List [Context Any])))
                              (do try.monad
                                [[this#= this_value] (binding id context)]
                                (in (when this_value
                                      {.#Right this_value}
                                      (if (by this#= = expected_value this_value)
                                        (list [context this_value])
                                        (list))

                                      {.#Left link}
                                      (list [(dictionary.has (nominal.representation id)
                                                             [this#= {.#Right expected_value}]
                                                             context)
                                             []])))))))))))])

  (the .public (variable equivalence)
    (for_any (_ of)
      (-> (Equivalence of)
          (Logic (Term of))))
    (function (_ context)
      (let [id (dictionary.size context)]
        (list [(dictionary.has id [equivalence {.#Left id}] context)
               (object ..class_of_variable (nominal.abstraction id))]))))
  )
