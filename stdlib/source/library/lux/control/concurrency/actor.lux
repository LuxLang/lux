(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only exception)]
    ["[0]" io (.only IO io)]]
   [data
    ["[0]" bit]
    ["[0]" product]]
   [meta
    [macro
     ["[0]" local]]
    [type (.only sharing)
     [primitive (.only primitive representation abstraction)]]]]]
 [//
  ["[0]" atom (.only Atom atom)]
  ["[0]" async (.only Async Resolver)]
  ["[0]" frp (.only Channel Channel')]])

(exception .public poisoned)
(exception .public dead)

(local.let [<Mail> (template (_ Actor s)
                     [(-> s (Actor s) (Async (Try s)))])
            <Obituary> (template (_ Actor s)
                         [[Text s (List (<Mail> Actor s))]])
            <Mailbox> (template (_ Actor s)
                        [(Rec Mailbox
                           [(Async [(<Mail> Actor s) Mailbox])
                            (Resolver [(<Mail> Actor s) Mailbox])])])]
  (these (def (pending [read write])
           (All (_ a)
             (-> (Rec Mailbox
                   [(Async [a Mailbox])
                    (Resolver [a Mailbox])])
                 (IO (List a))))
           (do [! io.monad]
             [current (async.value read)]
             (when current
               {.#Some [head tail]}
               (at ! each (|>> {.#Item head})
                   (pending tail))
               
               {.#None}
               (in {.#End}))))
         
         (primitive .public (Actor s)
           (Record
            [#obituary [(Async (<Obituary> Actor s))
                        (Resolver (<Obituary> Actor s))]
             #mailbox (Atom (<Mailbox> Actor s))])

           (type .public (Mail s)
             (<Mail> Actor s))

           (type .public (Obituary s)
             (<Obituary> Actor s))

           (type .public (Behavior s)
             (-> (Mail s) s (Actor s) (Async (Try s))))

           (def .public (spawn! behavior init)
             (All (_ s) (-> (Behavior s) s (IO (Actor s))))
             (io (let [self (sharing [s]
                              (is (Behavior s)
                                  behavior)
                              (is (Actor s)
                                  (abstraction [#obituary (async.async [])
                                                #mailbox (atom (async.async []))])))
                       process (loop (again [state init
                                             [|mailbox| _] (io.run! (atom.read! (the #mailbox (representation self))))])
                                 (do [! async.monad]
                                   [[head tail] |mailbox|
                                    ?state' (behavior head state self)]
                                   (when ?state'
                                     {try.#Failure error}
                                     (let [[_ resolve] (the #obituary (representation self))]
                                       (exec (io.run!
                                              (do io.monad
                                                [pending (..pending tail)]
                                                (resolve [error state {.#Item head pending}])))
                                         (in [])))

                                     {try.#Success state'}
                                     (again state' tail))))]
                   self)))

           (def .public (alive? actor)
             (All (_ s) (-> (Actor s) (IO Bit)))
             (let [[obituary _] (the #obituary (representation actor))]
               (|> obituary
                   async.value
                   (at io.functor each
                       (|>> (pipe.when
                              {.#None}
                              bit.yes

                              _
                              bit.no))))))

           (def .public (obituary' actor)
             (All (_ s) (-> (Actor s) (IO (Maybe (Obituary s)))))
             (let [[obituary _] (the #obituary (representation actor))]
               (async.value obituary)))

           (def .public obituary
             (All (_ s) (-> (Actor s) (Async (Obituary s))))
             (|>> representation
                  (the #obituary)
                  product.left))

           (def .public (mail! mail actor)
             (All (_ s) (-> (Mail s) (Actor s) (IO (Try Any))))
             (do [! io.monad]
               [alive? (..alive? actor)]
               (if alive?
                 (let [entry [mail (async.async [])]]
                   (do !
                     [|mailbox|&resolve (atom.read! (the #mailbox (representation actor)))]
                     (loop (again [[|mailbox| resolve] |mailbox|&resolve])
                       (do !
                         [|mailbox| (async.value |mailbox|)]
                         (when |mailbox|
                           {.#None}
                           (do !
                             [resolved? (resolve entry)]
                             (if resolved?
                               (do !
                                 [_ (atom.write! (product.right entry) (the #mailbox (representation actor)))]
                                 (in {try.#Success []}))
                               (again |mailbox|&resolve)))
                           
                           {.#Some [_ |mailbox|']}
                           (again |mailbox|'))))))
                 (in (exception.except ..dead [])))))

           (type .public (Message s o)
             (-> s (Actor s) (Async (Try [s o]))))

           (def (mail message)
             (All (_ s o) (-> (Message s o) [(Async (Try o)) (Mail s)]))
             (let [[async resolve] (sharing [s o]
                                     (is (Message s o)
                                         message)
                                     (is [(Async (Try o))
                                          (Resolver (Try o))]
                                         (async.async [])))]
               [async
                (function (_ state self)
                  (do [! async.monad]
                    [outcome (message state self)]
                    (when outcome
                      {try.#Success [state' return]}
                      (exec
                        (io.run! (resolve {try.#Success return}))
                        (async.resolved {try.#Success state'}))
                      
                      {try.#Failure error}
                      (exec
                        (io.run! (resolve {try.#Failure error}))
                        (async.resolved {try.#Failure error})))))]))

           (def .public (tell! message actor)
             (All (_ s o) (-> (Message s o) (Actor s) (Async (Try o))))
             (let [[async mail] (..mail message)]
               (do async.monad
                 [outcome (async.future (..mail! mail actor))]
                 (when outcome
                   {try.#Success}
                   async
                   
                   {try.#Failure error}
                   (in {try.#Failure error})))))
           )))

(def .public default
  Behavior
  (function (_ mail state self)
    (mail state self)))

(def .public (poison! actor)
  (All (_ s) (-> (Actor s) (IO (Try Any))))
  (..mail! (function (_ state self)
             (async.resolved (exception.except ..poisoned [])))
           actor))

(type .public Stop
  (IO Any))

(def continue! true)
(def stop! false)

(def .public (observe! action channel actor)
  (All (_ r w s) (-> (-> r Stop (Mail s)) (Channel' r w) (Actor s) (IO Any)))
  (let [signal (is (Atom Bit)
                   (atom.atom ..continue!))
        stop (is Stop
                 (atom.write! ..stop! signal))]
    (frp.subscribe! (function (_ event)
                      (do [! io.monad]
                        [continue? (atom.read! signal)]
                        (if continue?
                          (|> actor
                              (..mail! (action event stop))
                              (at ! each try.maybe))
                          (in {.#None}))))
                    channel)))
