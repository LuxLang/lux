(.module:
  [library
   [lux "*"
    ["@" target]
    ["[0]" ffi]
    [abstract
     ["[0]" monad {"+" do}]]
    [control
     ["[0]" try]
     ["[0]" exception {"+" exception:}]
     ["[0]" io {"+" IO io}]]
    [data
     ["[0]" text]
     [collection
      ["[0]" list]]]
    [math
     [number
      ["n" nat]
      ["f" frac]]]
    [time
     ["[0]" instant]]]]
  [//
   ["[0]" atom {"+" Atom}]])

(with_expansions [<jvm> (as_is (ffi.import: java/lang/Object)

                               (ffi.import: java/lang/Runtime
                                 ["[1]::[0]"
                                  ("static" getRuntime [] java/lang/Runtime)
                                  (availableProcessors [] int)])

                               (ffi.import: java/lang/Runnable)

                               (ffi.import: java/util/concurrent/TimeUnit
                                 ["[1]::[0]"
                                  ("enum" MILLISECONDS)])
                               
                               (ffi.import: java/util/concurrent/Executor
                                 ["[1]::[0]"
                                  (execute [java/lang/Runnable] "io" void)])

                               (ffi.import: (java/util/concurrent/ScheduledFuture a))

                               (ffi.import: java/util/concurrent/ScheduledThreadPoolExecutor
                                 ["[1]::[0]"
                                  (new [int])
                                  (schedule [java/lang/Runnable long java/util/concurrent/TimeUnit] "io" (java/util/concurrent/ScheduledFuture java/lang/Object))]))]
  (for [@.old (as_is <jvm>)
        @.jvm (as_is <jvm>)

        @.js
        (as_is (ffi.import: (setTimeout [ffi.Function ffi.Number] "io" Any)))

        @.python
        (ffi.import: threading/Timer
          ["[1]::[0]"
           (new [ffi.Float ffi.Function])
           (start [] "io" "?" Any)])]
       
       ... Default
       (type: Thread
         (Record
          [#creation Nat
           #delay Nat
           #action (IO Any)]))
       ))

(def: .public parallelism
  Nat
  (with_expansions [<jvm> (|> (java/lang/Runtime::getRuntime)
                              (java/lang/Runtime::availableProcessors)
                              .nat)]
    (for [@.old <jvm>
          @.jvm <jvm>]
         ... Default
         1)))

(with_expansions [<jvm> (as_is (def: runner
                                 java/util/concurrent/ScheduledThreadPoolExecutor
                                 (java/util/concurrent/ScheduledThreadPoolExecutor::new (.int ..parallelism))))]
  (for [@.old <jvm>
        @.jvm <jvm>
        @.js (as_is)
        @.python (as_is)]
       
       ... Default
       (def: runner
         (Atom (List Thread))
         (atom.atom (list)))))

(def: (execute! action)
  (-> (IO Any) Any)
  (case (try (io.run! action))
    {try.#Failure error}
    (exec
      ("lux io log" ($_ "lux text concat"
                        "ERROR DURING THREAD EXECUTION:" text.new_line
                        error))
      [])
    
    {try.#Success _}
    []))

(def: .public (schedule! milli_seconds action)
  (-> Nat (IO Any) (IO Any))
  (with_expansions [<jvm> (as_is (let [runnable (ffi.object [] [java/lang/Runnable]
                                                  []
                                                  (java/lang/Runnable [] (run self []) void
                                                                      (..execute! action)))]
                                   (case milli_seconds
                                     0 (java/util/concurrent/Executor::execute runnable runner)
                                     _ (java/util/concurrent/ScheduledThreadPoolExecutor::schedule runnable (.int milli_seconds) java/util/concurrent/TimeUnit::MILLISECONDS
                                                                                                   runner))))]
    (for [@.old <jvm>
          @.jvm <jvm>

          @.js
          (..setTimeout [(ffi.closure [] (..execute! action))
                         (n.frac milli_seconds)])

          @.python
          (do io.monad
            [_ (|> (ffi.lambda [] (..execute! action))
                   [(|> milli_seconds n.frac (f./ +1,000.0))]
                   threading/Timer::new
                   (threading/Timer::start []))]
            (in []))]
         
         ... Default
         (do [! io.monad]
           [now (# ! each (|>> instant.millis .nat) instant.now)
            _ (atom.update! (|>> {.#Item [#creation now
                                          #delay milli_seconds
                                          #action action]})
                            ..runner)]
           (in [])))))

(for [@.old (as_is)
      @.jvm (as_is)
      @.js (as_is)
      @.python (as_is)]
     
     ... Default
     (as_is (exception: .public cannot_continue_running_threads)

            ... https://en.wikipedia.org/wiki/Event_loop
            ... Starts the event-loop.
            (def: .public run!
              (IO Any)
              (loop [_ []]
                (do [! io.monad]
                  [threads (atom.read! ..runner)]
                  (case threads
                    ... And... we're done!
                    {.#End}
                    (in [])

                    _
                    (do !
                      [now (# ! each (|>> instant.millis .nat) instant.now)
                       .let [[ready pending] (list.partition (function (_ thread)
                                                               (|> (value@ #creation thread)
                                                                   (n.+ (value@ #delay thread))
                                                                   (n.<= now)))
                                                             threads)]
                       swapped? (atom.compare_and_swap! threads pending ..runner)]
                      (if swapped?
                        (do !
                          [_ (monad.each ! (|>> (value@ #action) ..execute! io.io) ready)]
                          (again []))
                        (panic! (exception.error ..cannot_continue_running_threads []))))
                    ))))
            ))
