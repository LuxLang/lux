... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except list only)
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]
    [apply (.only Apply)]
    ["[0]" monad (.only Monad do)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]
    ["[0]" try (.only Try)]
    ["[0]" exception]
    ["[0]" io (.only IO io)]]
   [meta
    ["[0]" type (.only sharing)]]]]
 [//
  [thread (.only Delay)]
  ["[0]" atom (.only Atom)]
  ["[0]" async (.only Async Async') (.use "[1]#[0]" monad)]])

(type .public (Channel' r w)
  (Async' (Maybe [r (Channel' r w)])
          (Maybe [w (Channel' r w)])))

(type .public (Channel a)
  (Channel' a a))

(exception.def .public already_closed)

(type .public (Sink w)
  (Interface
   (is (IO (Try Any))
       close)
   (is (-> w (IO (Try Any)))
       feed)))

(def (sink resolution)
  (All (_ a)
    (-> (async.Resolver (Maybe [a (Channel a)]))
        (Sink a)))
  (let [sink (atom.atom resolution)]
    (implementation
     (def close
       (loop (again [_ []])
         (do [! io.monad]
           [current (atom.read! sink)
            stopped? (current {.#None})]
           (if stopped?
             ... I closed the sink.
             (in {try.#Success []})
             ... Someone else interacted with the sink.
             (do !
               [latter (atom.read! sink)]
               (if (same? current latter)
                 ... Someone else closed the sink.
                 (in (exception.except ..already_closed []))
                 ... Someone else fed the sink while I was closing it.
                 (again [])))))))
     
     (def (feed value)
       (loop (again [_ []])
         (do [! io.monad]
           [current (atom.read! sink)
            .let [[next resolve_next] (sharing [a]
                                        (is (async.Resolver (Maybe [a (Channel a)]))
                                            current)
                                        (is [(Channel a)
                                             (async.Resolver (Maybe [a (Channel a)]))]
                                            (async.async [])))]
            fed? (current {.#Some [value next]})]
           (if fed?
             ... I fed the sink.
             (do !
               [_ (atom.compare_and_swap! current resolve_next sink)]
               (in {try.#Success []}))
             ... Someone else interacted with the sink.
             (do !
               [latter (atom.read! sink)]
               (if (same? current latter)
                 ... Someone else closed the sink while I was feeding it.
                 (in (exception.except ..already_closed []))
                 ... Someone else fed the sink.
                 (again []))))))))))

(def .public (channel _)
  (All (_ a) (-> Any [(Channel a) (Sink a)]))
  (let [[async resolve] (async.async [])]
    [async (..sink resolve)]))

(def .public functor
  (Functor Channel)
  (implementation
   (def (each f)
     (async#each
      (maybe#each
       (function (_ [head tail])
         [(f head)
          (each f tail)]))))))

(def .public apply
  (Apply Channel)
  (implementation
   (def functor ..functor)

   (def (on fa ff)
     (do async.monad
       [item_f ff
        item_a fa]
       (when [item_f item_a]
         [{.#Some [head_f tail_f]} {.#Some [head_a tail_a]}]
         (in {.#Some [(head_f head_a)
                      (on tail_a tail_f)]})

         _
         (in {.#None}))))))

(def empty
  Channel
  (async.resolved {.#None}))

(def .public monad
  (Monad Channel)
  (implementation
   (def functor ..functor)

   (def (in a)
     (async.resolved {.#Some [a ..empty]}))

   (def (conjoint mma)
     (let [[output sink] (sharing [a]
                           (is (Channel (Channel a))
                               mma)
                           (is [(Channel a) (Sink a)]
                               (channel [])))]
       (exec
         (is (Async Any)
             (loop (again [mma mma])
               (do [! async.monad]
                 [?mma mma]
                 (when ?mma
                   {.#Some [ma mma']}
                   (do !
                     [_ (loop (again [ma ma])
                          (do !
                            [?ma ma]
                            (when ?ma
                              {.#Some [a ma']}
                              (exec
                                (io.run! (of sink feed a))
                                (again ma'))
                              
                              {.#None}
                              (in []))))]
                     (again mma'))
                   
                   {.#None}
                   (in (is Any (io.run! (of sink close))))))))
         output)))))

(type .public (Subscriber a)
  (-> a (IO (Maybe Any))))

(def .public (subscribe! subscriber it)
  (All (_ r w) (-> (Subscriber r) (Channel' r w) (IO Any)))
  (io (exec
        (is (Async Any)
            (loop (again [it (type.as [r w]
                                      (Channel' r w)
                                      (Channel r)
                                      it)])
              (do async.monad
                [item it]
                (when item
                  {.#Some [head tail]}
                  (when (io.run! (subscriber head))
                    {.#Some _}
                    (again tail)
                    
                    {.#None}
                    (in []))
                  
                  {.#None}
                  (in [])))))
        [])))

(def .public (only pass? it)
  (All (_ a) (-> (-> a Bit) (Channel a) (Channel a)))
  (do async.monad
    [item it]
    (when item
      {.#Some [head tail]}
      (let [tail' (only pass? tail)]
        (if (pass? head)
          (in {.#Some [head tail']})
          tail'))
      
      {.#None}
      (in {.#None}))))

(def .public (of_async async)
  (All (_ a) (-> (Async a) (Channel a)))
  (async#each (function (_ value)
                {.#Some [value ..empty]})
              async))

(def .public (mix f init it)
  (All (_ a b)
    (-> (-> b a (Async a)) a (Channel b)
        (Async a)))
  (do [! async.monad]
    [item it]
    (when item
      {.#None}
      (in init)
      
      {.#Some [head tail]}
      (do !
        [init' (f head init)]
        (mix f init' tail)))))

(def .public (mixes f init it)
  (All (_ a b)
    (-> (-> b a (Async a)) a (Channel b)
        (Channel a)))
  (<| async#in
      {.#Some}
      [init]
      (do [! async.monad]
        [item it]
        (when item
          {.#None}
          (in {.#None})
          
          {.#Some [head tail]}
          (do !
            [init' (f head init)]
            (mixes f init' tail))))))

(def .public (poll milli_seconds action)
  (All (_ a)
    (-> Delay (IO a) [(Channel a) (Sink a)]))
  (let [[output sink] (channel [])]
    (exec
      (io.run! (loop (again [_ []])
                 (do io.monad
                   [value action
                    _ (of sink feed value)]
                   (async.upon! again (async.delay milli_seconds)))))
      [output sink])))

(def .public (periodic milli_seconds)
  (-> Delay [(Channel Any) (Sink Any)])
  (..poll milli_seconds (io [])))

(def .public (iterations f init)
  (All (_ s o) (-> (-> s (Async (Maybe [s o]))) s (Channel o)))
  (do async.monad
    [?next (f init)]
    (in (when ?next
          {.#Some [state output]}
          {.#Some [output (iterations f state)]}
          
          {.#None}
          {.#None}))))

(def (distinct' equivalence previous it)
  (All (_ a) (-> (Equivalence a) a (Channel a) (Channel a)))
  (do async.monad
    [item it]
    (when item
      {.#Some [head tail]}
      (if (of equivalence = previous head)
        (distinct' equivalence previous tail)
        (in {.#Some [head (distinct' equivalence head tail)]}))
      
      {.#None}
      (in {.#None}))))

(def .public (distinct equivalence it)
  (All (_ a) (-> (Equivalence a) (Channel a) (Channel a)))
  (do async.monad
    [item it]
    (in (when item
          {.#Some [head tail]}
          {.#Some [head (distinct' equivalence head tail)]}
          
          {.#None}
          {.#None}))))

(def .public (list it)
  (All (_ a) (-> (Channel a) (Async (List a))))
  (do [! async.monad]
    [item it]
    (when item
      {.#Some [head tail]}
      (of ! each (|>> {.#Item head})
          (list tail))

      {.#None}
      (in {.#End}))))

(def .public (sequential milli_seconds values)
  (All (_ a) (-> Delay (List a) (Channel a)))
  (when values
    {.#End}
    ..empty

    {.#Item head tail}
    (async.resolved {.#Some [head
                             (do async.monad
                               [_ (async.delay milli_seconds)]
                               (sequential milli_seconds tail))]})))
