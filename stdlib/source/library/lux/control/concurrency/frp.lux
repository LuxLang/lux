(.module:
  [library
   [lux #*
    [abstract
     [predicate (#+ Predicate)]
     [equivalence (#+ Equivalence)]
     [functor (#+ Functor)]
     [apply (#+ Apply)]
     ["." monad (#+ Monad do)]]
    [control
     ["." try (#+ Try)]
     ["." exception (#+ exception:)]
     ["." io (#+ IO io)]]
    [data
     ["." maybe ("#\." functor)]]
    [type (#+ :share)
     abstract]]]
  [//
   ["." atom (#+ Atom)]
   ["." promise (#+ Promise) ("#\." functor)]])

(type: #export (Channel a)
  {#.doc "An asynchronous channel to distribute values."}
  (Promise (Maybe [a (Channel a)])))

(exception: #export channel_is_already_closed)

(interface: #export (Sink a)
  (: (IO (Try Any))
     close)
  (: (-> a (IO (Try Any)))
     feed))

(def: (sink resolve)
  (All [a]
    (-> (promise.Resolver (Maybe [a (Channel a)]))
        (Sink a)))
  (let [sink (atom.atom resolve)]
    (implementation
     (def: close
       (loop [_ []]
         (do {! io.monad}
           [current (atom.read sink)
            stopped? (current #.None)]
           (if stopped?
             ## I closed the sink.
             (wrap (exception.return []))
             ## Someone else interacted with the sink.
             (do !
               [latter (atom.read sink)]
               (if (is? current latter)
                 ## Someone else closed the sink.
                 (wrap (exception.throw ..channel_is_already_closed []))
                 ## Someone else fed the sink while I was closing it.
                 (recur [])))))))
     
     (def: (feed value)
       (loop [_ []]
         (do {! io.monad}
           [current (atom.read sink)
            #let [[next resolve_next] (:share [a]
                                              (promise.Resolver (Maybe [a (Channel a)]))
                                              current
                                              
                                              [(Promise (Maybe [a (Channel a)]))
                                               (promise.Resolver (Maybe [a (Channel a)]))]
                                              (promise.promise []))]
            fed? (current (#.Some [value next]))]
           (if fed?
             ## I fed the sink.
             (do !
               [_ (atom.compare_and_swap current resolve_next sink)]
               (wrap (exception.return [])))
             ## Someone else interacted with the sink.
             (do !
               [latter (atom.read sink)]
               (if (is? current latter)
                 ## Someone else closed the sink while I was feeding it.
                 (wrap (exception.throw ..channel_is_already_closed []))
                 ## Someone else fed the sink.
                 (recur []))))))))))

(def: #export (channel _)
  (All [a] (-> Any [(Channel a) (Sink a)]))
  (let [[promise resolve] (promise.promise [])]
    [promise (..sink resolve)]))

(implementation: #export functor
  (Functor Channel)
  
  (def: (map f)
    (promise\map
     (maybe\map
      (function (_ [head tail])
        [(f head) (map f tail)])))))

(implementation: #export apply
  (Apply Channel)
  
  (def: &functor ..functor)

  (def: (apply ff fa)
    (do promise.monad
      [cons_f ff
       cons_a fa]
      (case [cons_f cons_a]
        [(#.Some [head_f tail_f]) (#.Some [head_a tail_a])]
        (wrap (#.Some [(head_f head_a) (apply tail_f tail_a)]))

        _
        (wrap #.None)))))

(def: empty
  Channel
  (promise.resolved #.None))

(implementation: #export monad
  (Monad Channel)
  
  (def: &functor ..functor)

  (def: (wrap a)
    (promise.resolved (#.Some [a ..empty])))

  (def: (join mma)
    (let [[output sink] (channel [])]
      (exec (: (Promise Any)
               (loop [mma mma]
                 (do {! promise.monad}
                   [?mma mma]
                   (case ?mma
                     (#.Some [ma mma'])
                     (do !
                       [_ (loop [ma ma]
                            (do !
                              [?ma ma]
                              (case ?ma
                                (#.Some [a ma'])
                                (exec (io.run (\ sink feed a))
                                  (recur ma'))
                                
                                #.None
                                (wrap []))))]
                       (recur mma'))
                     
                     #.None
                     (wrap (: Any (io.run (\ sink close))))))))
        output))))

(type: #export (Subscriber a)
  (-> a (IO (Maybe Any))))

(def: #export (subscribe subscriber channel)
  (All [a] (-> (Subscriber a) (Channel a) (IO Any)))
  (io (exec (: (Promise Any)
               (loop [channel channel]
                 (do promise.monad
                   [cons channel]
                   (case cons
                     (#.Some [head tail])
                     (case (io.run (subscriber head))
                       (#.Some _)
                       (recur tail)
                       
                       #.None
                       (wrap []))
                     
                     #.None
                     (wrap [])))))
        [])))

(def: #export (filter pass? channel)
  (All [a] (-> (Predicate a) (Channel a) (Channel a)))
  (do promise.monad
    [cons channel]
    (case cons
      (#.Some [head tail])
      (let [tail' (filter pass? tail)]
        (if (pass? head)
          (wrap (#.Some [head tail']))
          tail'))
      
      #.None
      (wrap #.None))))

(def: #export (from_promise promise)
  (All [a] (-> (Promise a) (Channel a)))
  (promise\map (function (_ value)
                 (#.Some [value ..empty]))
               promise))

(def: #export (fold f init channel)
  {#.doc "Asynchronous fold over channels."}
  (All [a b]
    (-> (-> b a (Promise a)) a (Channel b)
        (Promise a)))
  (do {! promise.monad}
    [cons channel]
    (case cons
      #.None
      (wrap init)
      
      (#.Some [head tail])
      (do !
        [init' (f head init)]
        (fold f init' tail)))))

(def: #export (folds f init channel)
  {#.doc "A channel of folds."}
  (All [a b]
    (-> (-> b a (Promise a)) a (Channel b)
        (Channel a)))
  (do {! promise.monad}
    [cons channel]
    (case cons
      #.None
      (wrap (#.Some [init (wrap #.None)]))
      
      (#.Some [head tail])
      (do !
        [init' (f head init)]
        (wrap (#.Some [init (folds f init' tail)]))))))

(def: #export (poll milli_seconds action)
  (All [a]
    (-> Nat (IO a) [(Channel a) (Sink a)]))
  (let [[output sink] (channel [])]
    (exec (io.run (loop [_ []]
                    (do io.monad
                      [value action
                       _ (\ sink feed value)]
                      (promise.await recur (promise.wait milli_seconds)))))
      [output sink])))

(def: #export (periodic milli_seconds)
  (-> Nat [(Channel Any) (Sink Any)])
  (..poll milli_seconds (io [])))

(def: #export (iterate f init)
  (All [s o] (-> (-> s (Promise (Maybe [s o]))) s (Channel o)))
  (do promise.monad
    [?next (f init)]
    (case ?next
      (#.Some [state output])
      (wrap (#.Some [output (iterate f state)]))
      
      #.None
      (wrap #.None))))

(def: (distinct' equivalence previous channel)
  (All [a] (-> (Equivalence a) a (Channel a) (Channel a)))
  (do promise.monad
    [cons channel]
    (case cons
      (#.Some [head tail])
      (if (\ equivalence = previous head)
        (distinct' equivalence previous tail)
        (wrap (#.Some [head (distinct' equivalence head tail)])))
      
      #.None
      (wrap #.None))))

(def: #export (distinct equivalence channel)
  (All [a] (-> (Equivalence a) (Channel a) (Channel a)))
  (do promise.monad
    [cons channel]
    (case cons
      (#.Some [head tail])
      (wrap (#.Some [head (distinct' equivalence head tail)]))
      
      #.None
      (wrap #.None))))

(def: #export (consume channel)
  {#.doc "Reads the entirety of a channel's content and returns it as a list."}
  (All [a] (-> (Channel a) (Promise (List a))))
  (do {! promise.monad}
    [cons channel]
    (case cons
      (#.Some [head tail])
      (\ ! map (|>> (#.Cons head))
         (consume tail))

      #.None
      (wrap #.Nil))))

(def: #export (sequential milli_seconds values)
  (All [a] (-> Nat (List a) (Channel a)))
  (case values
    #.Nil
    ..empty

    (#.Cons head tail)
    (promise.resolved (#.Some [head (do promise.monad
                                      [_ (promise.wait milli_seconds)]
                                      (sequential milli_seconds tail))]))))
