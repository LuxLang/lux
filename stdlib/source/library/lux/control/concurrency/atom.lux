(.using
 [library
  [lux "*"
   ["@" target]
   ["[0]" ffi]
   [abstract
    [monad {"+" do}]]
   [control
    ["[0]" function]
    ["[0]" io {"+" IO} ("[1]#[0]" functor)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" array "_"
      ["[1]" \\unsafe]]]]
   [type
    [abstract {"-" pattern}]
    ["[0]" variance {"+" Mutable}]]]])

(with_expansions [<jvm> (these (ffi.import: (java/util/concurrent/atomic/AtomicReference a)
                                 "[1]::[0]"
                                 (new [a])
                                 (get [] a)
                                 (compareAndSet [a a] boolean)))]
  (for @.old <jvm>
       @.jvm <jvm>
       (these)))

(abstract: .public (Atom'' a)
  (with_expansions [<jvm> (java/util/concurrent/atomic/AtomicReference a)]
    (for @.old <jvm>
         @.jvm <jvm>
         (array.Array a)))

  (type: .public (Atom' r w)
    (Atom'' (Mutable r w)))

  (type: .public (Atom a)
    (Atom'' (Mutable a a)))

  (def: .public (atom value)
    (All (_ a) (-> a (Atom a)))
    (abstraction
     (with_expansions [<jvm> (as_expected (java/util/concurrent/atomic/AtomicReference::new value))]
       (for @.old <jvm>
            @.jvm <jvm>
            (array.has! 0 value (array.empty 1))))))

  (def: .public (read! atom)
    (All (_ r w) (-> (Atom' r w) (IO r)))
    (with_expansions [<jvm> (java/util/concurrent/atomic/AtomicReference::get (representation atom))]
      (io.io (for @.old (variance.read <jvm>)
                  @.jvm <jvm>
                  (variance.read (array.item 0 (representation atom)))))))

  (def: .public (compare_and_swap! current new atom)
    (All (_ r w) (-> r w (Atom' r w) (IO Bit)))
    (io.io (for @.old (ffi.of_boolean
                       (java/util/concurrent/atomic/AtomicReference::compareAndSet (variance.write
                                                                                    (`` (as (~~ (type_of new))
                                                                                            current)))
                                                                                   (variance.write new)
                                                                                   (representation atom)))
                @.jvm (ffi.of_boolean
                       (java/util/concurrent/atomic/AtomicReference::compareAndSet current new (representation atom)))
                (let [old (array.item 0 (representation atom))]
                  (if (same? old current)
                    (exec
                      (array.has! 0 new (representation atom))
                      true)
                    false)))))
  )

(def: .public (update! f atom)
  (All (_ r w) (-> (-> r w) (Atom' r w) (IO [r w])))
  (loop (again [_ []])
    (do io.monad
      [old (read! atom)
       .let [new (f old)]
       swapped? (compare_and_swap! old new atom)]
      (if swapped?
        (in [old new])
        (again [])))))

(def: .public (write! value atom)
  (All (_ r w) (-> w (Atom' r w) (IO r)))
  (|> atom
      (..update! (function.constant value))
      (io#each product.left)))
