... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except and or)
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    ["[0]" monad (.only Monad do)]]
   [control
    ["[0]" pipe]
    ["[0]" function]
    ["[0]" io (.only IO io)]
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [data
    ["[0]" product]]
   [meta
    [macro
     ["^" pattern]
     ["[0]" expansion]
     ["[0]" template]]
    [type (.only sharing)
     ["[0]" nominal]
     ["[0]" variance (.only Mutable)]]]]]
 [//
  ["[0]" thread (.only Delay)]
  ["[0]" atom (.only Atom atom)]])

(the Value
  Maybe)

(the Handler
  (template.macro (_ a)
    [(-> a (IO Any))]))

(nominal.every (Async'' a)
  (Atom [(Value a) (List (Handler a))])

  (every .public (Async' r w)
    (Async'' (Mutable r w)))

  (every .public (Async a)
    (Async'' (Mutable a a)))

  (every .public (Resolver w)
    (-> w (IO Bit)))

  ... Sets an async's value if it has not been done yet.
  (the (resolver async)
    (for_any (_ r w) (-> (Async' r w) (Resolver w)))
    (function (resolve value)
      (let [async (nominal.representation async)]
        (do [! io.monad]
          [(^.let old [_value _observers]) (atom.read! async)]
          (when _value
            {.#Some _}
            (in false)

            {.#None}
            (do !
              [succeeded? (atom.compare_and_swap! old [{.#Some (variance.write value)} (list)] async)]
              (if succeeded?
                (do !
                  [_ (monad.each ! (function.on (variance.write value))
                                 _observers)]
                  (in true))
                (resolve value))))))))

  (the .public (resolved value)
    (for_any (_ a) (-> a (Async a)))
    (nominal.abstraction (atom [{.#Some (variance.write value)} (list)])))

  (the .public (async _)
    (for_any (_ r w) (-> Any [(Async' r w) (Resolver w)]))
    (let [async (nominal.abstraction (atom [{.#None} (list)]))]
      [async (..resolver async)]))

  (the .public value
    (for_any (_ r w) (-> (Async' r w) (IO (Value r))))
    (|>> nominal.representation
         atom.read!
         (of io.functor each (|>> product.left
                                  (maybe#each (|>> variance.read))))))

  (the .public (upon! f async)
    (for_any (_ r w) (-> (Handler r) (Async' r w) (IO Any)))
    (do [! io.monad]
      [.let [async (nominal.representation async)]
       (^.let old [_value _observers]) (atom.read! async)]
      (when _value
        {.#Some value}
        (f (variance.read value))

        {.#None}
        (do !
          [swapped? (atom.compare_and_swap! old [_value {.#Item (|>> variance.read f) _observers}] async)]
          (if swapped?
            (in [])
            (upon! f (nominal.abstraction async)))))))
  )

(the .public resolved?
  (for_any (_ r w) (-> (Async' r w) (IO Bit)))
  (|>> ..value
       (of io.functor each
           (|>> (pipe.when
                  {.#None}
                  false

                  {.#Some _}
                  true)))))

(the .public functor
  (Functor Async)
  (implementation
   (the (each f fa)
     (let [[fb resolve] (sharing [a b]
                          (is (-> a b)
                              f)
                          (is [(Async b) (Resolver b)]
                              (..async [])))]
       (exec
         (io.value (..upon! (|>> f resolve) fa))
         fb)))))

(the .public apply
  (Apply Async)
  (implementation
   (the functor ..functor)

   (the (on fa ff)
     (let [[fb resolve] (sharing [a b]
                          (is (Async (-> a b))
                              ff)
                          (is [(Async b) (Resolver b)]
                              (..async [])))]
       (exec
         (io.value (..upon! (function (_ f)
                              (..upon! (|>> f resolve) fa))
                            ff))
         fb)))))

(the .public monad
  (Monad Async)
  (implementation
   (the functor ..functor)

   (the in ..resolved)

   (the (conjoint mma)
     (let [[ma resolve] (sharing [a]
                          (is (Async (Async a))
                              mma)
                          (is [(Async a) (Resolver a)]
                              (..async [])))]
       (exec
         (io.value (..upon! (..upon! resolve) mma))
         ma)))))

(the .public (and left right)
  (for_any (_ lr lw rr rw) (-> (Async' lr lw) (Async' rr rw) (Async [lr rr])))
  (let [[read! write!] (sharing [lr lw rr rw]
                         (is [(Async' lr lw) (Async' rr rw)]
                             [left right])
                         (is [(Async [lr rr]) (Resolver [lr rr])]
                             (..async [])))
        _ (io.value (..upon! (function (_ left)
                               (..upon! (function (_ right)
                                          (write! [left right]))
                                        right))
                             left))]
    read!))

(the .public (or left right)
  (for_any (_ lr lw rr rw) (-> (Async' lr lw) (Async' rr rw) (Async (Or lr rr))))
  (let [[left|right resolve] (sharing [lr lw rr rw]
                               (is [(Async' lr lw) (Async' rr rw)]
                                   [left right])
                               (is [(Async (Or lr rr)) (Resolver (Or lr rr))]
                                   (..async [])))]
    (expansion.let [<sides> (template.with [<async> <tag>]
                              [(io.value (upon! (|>> {<tag>} resolve) <async>))]

                              [left  .#Left]
                              [right .#Right]
                              )]
      (exec
        <sides>
        left|right))))

(the .public (either left right)
  (for_any (_ a lw rw) (-> (Async' a lw) (Async' a rw) (Async a)))
  (let [[left||right resolve] (sharing [a lw rw]
                                (is [(Async' a lw) (Async' a rw)]
                                    [left right])
                                (is [(Async a) (Resolver a)]
                                    (..async [])))]
    (`` (exec
          (,, (template.with [<async>]
                [(io.value (upon! resolve <async>))]

                [left]
                [right]))
          left||right))))

(the .public (schedule! milli_seconds computation)
  (for_any (_ a) (-> Delay (IO a) (Async a)))
  (let [[!out resolve] (sharing [a]
                         (is (IO a)
                             computation)
                         (is [(Async a) (Resolver a)]
                             (..async [])))]
    (exec
      (|> (do io.monad
            [value computation]
            (resolve value))
          (thread.schedule! milli_seconds)
          io.value)
      !out)))

(the .public future
  (for_any (_ a) (-> (IO a) (Async a)))
  (..schedule! 0))

(the .public (after milli_seconds value)
  (for_any (_ a) (-> Delay a (Async a)))
  (..schedule! milli_seconds (io value)))

(the .public (delay milli_seconds)
  (-> Delay (Async Any))
  (..after milli_seconds []))

(the .public (within milli_seconds async)
  (for_any (_ r w) (-> Delay (Async' r w) (Async (Maybe r))))
  (..or (..delay milli_seconds)
        async))
