... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... ["Type-safe pattern combinators" by Morten Rhiger](https://core.ac.uk/works/9613163)
(.using
 [library
  [lux (.except Pattern And
                text natural integer revolution
                or and
                is has
                try with when
                match?
                abstraction)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    [pure (.only Pure)]]
   ["[0]" function (.only)
    [predicate (.only Predicate)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.only)
      ["[0]" property]]]]
   [logic
    ["[0]" bit]]
   [math
    [number
     [/64
      ["[0]" natural]
      ["[0]" integer]
      ["[0]" revolution]
      ["[0]" decimal]]]]
   [macro
    ["[0]" template]]
   ["[0]" type]]])

... Consumption
(the empty
  (template.macro (_)
    [[]]))

(every Empty
  (..empty))

(every (Consumption it)
  it)

(the consuming
  (template.macro (_ it pred)
    [(.tuple it pred)]))

(every (Consuming it pred)
  (..consuming it pred))

... Production
(every Production
  (for_any (_ it)
    it))

(every (Producing it pred)
  (-> it
      pred))

... Composition
(every (Adjustment negative positive value)
  (-> negative positive
      value))

(every Start
  (for_any (_ value)
    (Adjustment (..Production value) ..Empty
                value)))

(the start
  Start
  (function (_ one (..empty))
    one))

(every (Composition negative_change positive_change)
  (for_any (_ value negative positive)
    (-> (Adjustment negative positive
                    value)
        (Adjustment (negative_change negative) (positive_change positive)
                    value))))

(every Same
  (Composition ..Production
               ..Consumption))

(the same
  Same
  (|>>))

(every (With it)
  (Composition (..Producing it)
               (..Consuming it)))

(the (with pred)
  With
  (function (_ negative (..consuming ++ --))
    (pred (negative ++) --)))

... Body
(the Then
  (template.macro (_ ,arity ,value)
    [(-> ,arity
         ,value)]))

(the Else
  (template.macro (_ ,value)
    [(Then ..Empty ,value)]))

(the Body
  (template.macro (_ ,outer ,inner ,value)
    [(-> (Then ,inner ,value) (Else ,value)
         (Then ,outer ,value))]))

(every Simple
  (for_any (_ arity value)
    (Body arity arity value)))

(the success
  Simple
  (function (_ then else)
    then))

(every (Complex it)
  (for_any (_ arity value)
    (|> (Body arity (..Consuming it arity) value)
        (..Producing it))))

(the (complex value)
  Complex
  (function (_ then else focus)
    (then (..consuming value focus))))

(the failure
  (for_any (_ outer inner value)
    (Body outer inner value))
  (function (_ then else focus)
    (else (..empty))))

(the (try left right)
  (for_any (_ arity_0 arity_1 value)
    (type.let [choice (Body arity_1 arity_0 value)]
      (-> choice choice
          choice)))
  (function (_ then else focus)
    (left then
          (function (_ _)
            (right then else focus))
          focus)))

(the (composite left right)
  (for_any (_ arity_0 arity_1 arity_2 value)
    (-> (Body arity_1 arity_0 value)
        (Body arity_2 arity_1 value)
        (Body arity_2 arity_0 value)))
  (function (_ then else focus)
    (right (left then else) else focus)))

... Pattern
(every .public (Pattern composition input outer inner value)
  [... #composition
   composition
   ... #match
   (-> input
       (..Body outer inner value))])

(the .public (or left right)
  (for_any (_ number input outer inner value)
    (type.let [choice (Pattern number input outer inner value)]
      (-> choice choice
          choice)))
  (let [[number left] left
        [_ right] right]
    [number
     (function (_ input)
       (..try (left input)
              (right input)))]))

(template.with [,tag ,side]
  [(the .public (,side it)
     (for_any (_ number
                 outer inner
                 value
                 left right)
       (-> (Pattern number ,side outer inner value)
           (Pattern number (Or left right) outer inner value)))
     (let [[number it] it]
       [number
        (function (_ value)
          (.when value
            {,tag value}
            (it value)

            _
            ..failure))]))]

  [[0b left]
   [1b right]])

(the And
  (template.macro (_ ,left ,right ,pair)
    [(for_any (_ number_0 number_1 number_2
                 arity_0 arity_1 arity_2
                 value)
       (-> (Pattern (-> number_0 number_1) ,left arity_1 arity_2 value)
           (Pattern (-> number_1 number_2) ,right arity_0 arity_1 value)
           (Pattern (-> number_0 number_2) ,pair arity_0 arity_2 value)))]))

(the .public (and left right)
  (for_any (_ input)
    (..And input input
           input))
  (let [[numberL left] left
        [numberR right] right]
    [(|>> numberL numberR)
     (function (_ input)
       (..composite (left input)
                    (right input)))]))

(the .public (pair left right)
  (for_any (_ left right)
    (..And left right
           (.And left right)))
  (let [[numberL leftM] left
        [numberR rightM] right]
    [(|>> numberL numberR)
     (function (_ [leftV rightV])
       (..composite (leftM leftV)
                    (rightM rightV)))]))

(the .public (item pattern)
  (for_any (_ it number outer inner value)
    (-> (Pattern number it outer inner value)
        (Pattern number (List it) outer inner value)))
  (let [[number match] pattern]
    [number
     (function (_ input)
       (let [size (.list_size# input)]
         (loop (item [address 0])
           (if (natural.< size address)
               (..try (match (.list_item# address input))
                      (function (_ then else focus)
                        ((item (++ address)) then else focus)))
               ..failure))))]))

(every .public (Static it)
  (for_any (_ value arity)
    (Pattern ..Same it arity (..Consumption arity) value)))

(the .public none
  Static
  [..same
   (function.constant ..failure)])

(the .public any
  Static
  [..same
   (function.constant ..success)])

(the .public (is predicate)
  (for_any (_ it)
    (-> (Predicate it)
        (Static it)))
  [..same
   (function (_ input)
     (if (predicate input)
         ..success
         ..failure))])

(the .public (constant = expected)
  (for_any (_ it)
    (-> (Equivalence it) it
        (Static it)))
  (..is (= expected)))

(template.with [,type ,name ,equivalence]
  [(the .public ,name
     (-> ,type
         (Static ,type))
     (..constant ,equivalence))]

  [[Bit bit bit.equivalence]
   [Natural natural natural.equivalence]
   [Integer integer integer.equivalence]
   [Revolution revolution revolution.equivalence]
   [Decimal decimal decimal.equivalence]
   [Text text text.equivalence]])

(every .public (Dynamic input it)
  (for_any (_ value arity)
    (Pattern ..With (input it) arity (..Consuming it arity) value)))

(the .public variable
  (Dynamic Pure)
  [..with
   ..complex])

(the .public (has key)
  (-> Text
      (Dynamic property.List))
  (..item (..pair (..text key)
                  ..variable)))

(the .public (first predicate)
  (for_any (_ it)
    (-> (Predicate it)
        (Dynamic List it)))
  (..item (..and (..is predicate)
                 ..variable)))

... Clause
(every .public (Clause input value)
  (-> input (..Else value)
      value))

(template.let [(composition term arity value)
               [(type.let [negative term
                           positive (..Then arity value)]
                  (-> ..Start
                      (-> negative positive)))]]
  (every .public (Case input term value)
    (for_some (_ arity)
      (..Pattern (composition term arity value)
                 input ..Empty arity value))))

(the .public (clause pattern body)
  (for_any (_ input term value)
    (-> (Case input term value) term
        (Clause input value)))
  (function (_ input else)
    (let [[number match] pattern]
      ((match input) (number ..start body) else []))))

(the .public (else left right)
  (for_any (_ input value)
    (-> (Clause input value) (Clause input value)
        (Clause input value)))
  (function (_ input else)
    (left input
          (function (_ _)
            (right input else)))))

... Main
(the .public (when input clause)
  (for_any (_ input value)
    (-> input (Clause input value)
        value))
  (clause input
          (function (_ _)
            (undefined))))

(the .public (match? pattern input)
  (for_any (_ it)
    (-> (Case it Bit Bit)
        (Predicate it)))
  (<| (..when input)
      (all ..else
           (..clause pattern true)
           (..clause ..any false))))

(the .public (abstraction pattern body)
  (for_any (_ input term value)
    (-> (Case input term value) term
        (-> input value)))
  (function (_ input)
    (..when input (..clause pattern body))))
