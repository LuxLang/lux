... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    [monad (.only Monad
                  do)]
    [equivalence (.only Equivalence)]]
   [concurrency
    ["[0]" atom]]
   [control
    ["[0]" io]]
   [meta
    ["[0]" code
     ["<[1]>" \\projection]]
    [macro (.only with_symbols)
     ["[0]" syntax]
     ["[0]" template]]
    [type (.only sharing)
     ["[0]" nominal]]]]])

(the Computation
  (template.macro (_ of)
    [(-> Any
         of)]))

(nominal.every .public (Lazy of)
  (Computation of)

  (the .public (as_lazy generator)
    (for_any (_ of)
      (-> (Computation of)
          (Lazy of)))
    (let [cache (atom.atom (sharing [of]
                             (is (Computation of)
                                 generator)
                             (is (Maybe of)
                                 {.#None})))]
      (nominal.abstraction
       (function (_ _)
         (when (io.value (atom.read! cache))
           {.#Some value}
           value

           _
           (let [value (generator [])]
             (exec
               (io.value (atom.compare_and_swap! _ {.#Some value} cache))
               value)))))))

  (the value'
    (template.macro (_ ,it)
      [((nominal.representation ,it) [])]))

  (the .public value
    (for_any (_ of)
      (-> (Lazy of)
          of))
    (|>> ..value'))

  (the .public lazy
    (syntax.macro (_ [expression <code>.any])
      (with_symbols [g!_]
        (in (list (` (..as_lazy (function ((, g!_) (, g!_)) (, expression)))))))))

  (the .public (equivalence (open "_#[0]"))
    (for_any (_ of)
      (-> (Equivalence of)
          (Equivalence (Lazy of))))
    (implementation
     (the (= left right)
       (_#= (..value' left)
            (..value' right)))))

  (the .public functor
    (Functor Lazy)
    (implementation
     (the (each f fa)
       (lazy (f (..value' fa))))))

  (the .public monad
    (Monad Lazy)
    (implementation
     (the functor ..functor)
     (the in (|>> lazy))
     (the conjoint ..value)))
  )
