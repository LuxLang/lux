(.require
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    [monad (.only Monad do)]
    [equivalence (.only Equivalence)]]
   [control
    ["[0]" io]
    [concurrency
     ["[0]" atom]]]
   [meta
    ["[0]" code
     ["<[1]>" \\parser]]
    [macro (.only with_symbols)
     [syntax (.only syntax)]]
    [type (.only sharing)
     ["[0]" nominal (.except def)]]]]])

(nominal.def .public (Lazy a)
  (-> [] a)

  (def .public (lazy' generator)
    (All (_ a) (-> (-> [] a) (Lazy a)))
    (let [cache (atom.atom (sharing [a]
                             (is (-> [] a)
                                 generator)
                             (is (Maybe a)
                                 {.#None})))]
      (abstraction (function (_ _)
                     (when (io.run! (atom.read! cache))
                       {.#Some value}
                       value

                       _
                       (let [value (generator [])]
                         (exec
                           (io.run! (atom.compare_and_swap! _ {.#Some value} cache))
                           value)))))))

  (def .public (value lazy)
    (All (_ a) (-> (Lazy a) a))
    ((representation lazy) [])))

(def .public lazy
  (syntax (_ [expression <code>.any])
    (with_symbols [g!_]
      (in (list (` (..lazy' (function ((, g!_) (, g!_)) (, expression)))))))))

(def .public (equivalence (open "_#[0]"))
  (All (_ a) (-> (Equivalence a) (Equivalence (Lazy a))))
  (implementation
   (def (= left right)
     (_#= (..value left)
          (..value right)))))

(def .public functor
  (Functor Lazy)
  (implementation
   (def (each f fa)
     (lazy (f (value fa))))))

(def .public apply
  (Apply Lazy)
  (implementation
   (def functor ..functor)
   (def (on fa ff)
     (lazy ((value ff) (value fa))))))

(def .public monad
  (Monad Lazy)
  (implementation
   (def functor ..functor)
   (def in (|>> lazy))
   (def conjoint ..value)))
