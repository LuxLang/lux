... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    [monad (.only Monad
                  do)]
    [equivalence (.only Equivalence)]]
   [control
    ["[0]" io]
    [concurrency
     ["[0]" atom]]]
   [meta
    ["[0]" code
     ["<[1]>" \\projection]]
    [macro (.only with_symbols)
     ["[0]" syntax]]
    [type (.only sharing)
     ["[0]" nominal]]]]])

(nominal.every .public (Lazy a)
  (-> [] a)

  (the .public (lazy' generator)
    (for_any (_ a) (-> (-> [] a) (Lazy a)))
    (let [cache (atom.atom (sharing [a]
                             (is (-> [] a)
                                 generator)
                             (is (Maybe a)
                                 {.#None})))]
      (nominal.abstraction
       (function (_ _)
         (when (io.value (atom.read! cache))
           {.#Some value}
           value

           _
           (let [value (generator [])]
             (exec
               (io.value (atom.compare_and_swap! _ {.#Some value} cache))
               value)))))))

  (the .public (value lazy)
    (for_any (_ a) (-> (Lazy a) a))
    ((nominal.representation lazy) [])))

(the .public lazy
  (syntax.macro (_ [expression <code>.any])
    (with_symbols [g!_]
      (in (list (` (..lazy' (function ((, g!_) (, g!_)) (, expression)))))))))

(the .public (equivalence (open "_#[0]"))
  (for_any (_ a)
    (-> (Equivalence a)
        (Equivalence (Lazy a))))
  (implementation
   (the (= left right)
     (_#= (..value left)
          (..value right)))))

(the .public functor
  (Functor Lazy)
  (implementation
   (the (each f fa)
     (lazy (f (value fa))))))

(the .public apply
  (Apply Lazy)
  (implementation
   (the functor ..functor)
   (the (on fa ff)
     (lazy ((value ff) (value fa))))))

(the .public monad
  (Monad Lazy)
  (implementation
   (the functor ..functor)
   (the in (|>> lazy))
   (the conjoint ..value)))
