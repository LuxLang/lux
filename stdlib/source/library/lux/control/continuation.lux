... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    [monad (.only Monad do)]]
   [control
    ["[0]" function]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro (.only with_symbols)
     [syntax (.only syntax)]]]]])

(every .public (Context of answer)
  (-> of
      answer))

(the .public empty
  (All (_ of)
    (Context of of))
  function.identity)

(every .public (Cont of)
  (All (_ answer)
    (-> (Context of answer)
        answer)))

(the .public (continued next cont)
  (All (_ of answer)
    (-> (Context of answer) (Cont of answer)
        answer))
  (cont next))

(the .public value
  (All (_ of)
    (-> (Cont of)
        of))
  (..continued ..empty))

(the Implementation
  (template (_ <interface>)
    [(All (_ answer)
       (<interface> (All (_ of)
                      (Cont of answer))))]))

(the .public functor
  (Implementation Functor)
  (implementation
   (the (each $ it)
     (function (_ after)
       (it (function.composite after $))))))

(the .public apply
  (Implementation Apply)
  (implementation
   (the functor ..functor)

   (the (on parameter procedure)
     (function (_ after)
       (<| parameter (function (_ parameter))
           procedure (function (_ procedure))
           (after (procedure parameter)))))))

(the .public monad
  (Implementation Monad)
  (implementation
   (the functor ..functor)

   (the (in value)
     (function (_ after)
       (after value)))

   (the (conjoint ffa)
     (function (_ after)
       (ffa (continued after))))))

(the .public (call/cc context)
  (All (_ local_return global_return final_return)
    (-> (-> (-> local_return (Cont global_return final_return))
            (Cont local_return final_return))
        (Cont local_return final_return)))
  (function (_ after_pause)
    (context (function (_ value)
               (function (_ after_resumption)
                 (after_pause value)))
             after_pause)))

(alias [with_current]
       ..call/cc)

(the .public pending
  (syntax (_ [expr <code>.any])
    (with_symbols ['_ 'after]
      (in (list (` (.function ((, '_) (, 'after))
                     ((, 'after) (, expr)))))))))
