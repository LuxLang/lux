(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" io]
    ["[0]" try]
    ["[0]" exception (.only exception:)]
    ["<>" parser (.open: "[1]#[0]" functor)
     ["<c>" code (.only Parser)]]]
   [data
    ["[0]" text
     ["%" \\format (.only format)]]]
   [time
    ["[0]" instant]
    ["[0]" date (.only Date) (.open: "[1]#[0]" order)]]
   ["[0]" meta]
   [macro
    ["[0]" code]
    ["[0]" template]
    [syntax (.only syntax)]]]])

(exception: .public (must_remember [deadline Date
                                    today Date
                                    message Text
                                    focus (Maybe Code)])
  (exception.report
   "Deadline" (%.date deadline)
   "Today" (%.date today)
   "Message" message
   "Code" (case focus
            {.#Some focus}
            (%.code focus)

            {.#None}
            "")))

(def: deadline
  (Parser Date)
  (all <>.either
       (<>#each (|>> instant.of_millis instant.date)
                <c>.int)
       (do <>.monad
         [raw <c>.text]
         (case (at date.codec decoded raw)
           {try.#Success date}
           (in date)
           
           {try.#Failure message}
           (<>.failure message)))))

(def: .public remember
  (syntax (_ [deadline ..deadline
              message <c>.text
              focus (<>.maybe <c>.any)])
    (let [now (io.run! instant.now)
          today (instant.date now)]
      (if (date#< deadline today)
        (in (case focus
              {.#Some focus}
              (list focus)

              {.#None}
              (list)))
        (meta.failure (exception.error ..must_remember [deadline today message focus]))))))

(with_template [<name> <message>]
  [(`` (def: .public <name>
         (syntax (_ [deadline ..deadline
                     message <c>.text
                     focus (<>.maybe <c>.any)])
           (in (list (` (..remember (~ (code.text (%.date deadline)))
                          (~ (code.text (format <message> " " message)))
                          (~+ (case focus
                                {.#Some focus}
                                (list focus)

                                {.#None}
                                (list))))))))))]

  [to_do  "TODO"]
  [fix_me "FIXME"]
  )
