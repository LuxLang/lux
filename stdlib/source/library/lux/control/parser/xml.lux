(.module:
  [library
   [lux #*
    [abstract
     [monad (#+ do)]]
    [control
     ["." try (#+ Try) ("#\." functor)]
     ["." exception (#+ exception:)]]
    [data
     ["." name ("#\." equivalence codec)]
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list]
      ["." dictionary]]
     [format
      ["/" xml (#+ Attribute Attrs Tag XML)]]]]]
  ["." //])

(type: .public (Parser a)
  {#.doc (example "A parser of XML-encoded data.")}
  (//.Parser [Attrs (List XML)] a))

(exception: .public empty_input)
(exception: .public unexpected_input)

(exception: .public (wrong_tag {expected Tag} {actual Tag})
  (exception.report
   ["Expected" (%.text (/.tag expected))]
   ["Actual" (%.text (/.tag actual))]))

(exception: .public (unknown_attribute {expected Attribute} {available (List Attribute)})
  (exception.report
   ["Expected" (%.text (/.attribute expected))]
   ["Available" (exception.listing (|>> /.attribute %.text) available)]))

(exception: .public (unconsumed_inputs {inputs (List XML)})
  (exception.report
   ["Inputs" (exception.listing (\ /.codec encode) inputs)]))

(def: (result' parser attrs documents)
  (All [a] (-> (Parser a) Attrs (List XML) (Try a)))
  (case (//.result parser [attrs documents])
    (#try.Success [[attrs' remaining] output])
    (if (list.empty? remaining)
      (#try.Success output)
      (exception.except ..unconsumed_inputs remaining))
    
    (#try.Failure error)
    (#try.Failure error)))

(def: .public (result parser documents)
  {#.doc (example "Applies a parser against a stream of XML documents."
                  "Verifies that all of the inputs are consumed by the parser.")}
  (All [a] (-> (Parser a) (List XML) (Try a)))
  (..result' parser /.attributes documents))

(def: .public text
  {#.doc (example "Yields text from a text node.")}
  (Parser Text)
  (function (_ [attrs documents])
    (case documents
      #.End
      (exception.except ..empty_input [])
      
      (#.Item head tail)
      (case head
        (#/.Text value)
        (#try.Success [[attrs tail] value])
        
        (#/.Node _)
        (exception.except ..unexpected_input [])))))

(def: .public tag
  {#.doc (example "Yields the tag from the next node.")}
  (Parser Tag)
  (function (_ [attrs documents])
    (case documents
      #.End
      (exception.except ..empty_input [])
      
      (#.Item head _)
      (case head
        (#/.Text _)
        (exception.except ..unexpected_input [])
        
        (#/.Node tag _ _)
        (#try.Success [[attrs documents] tag])))))

(def: .public (attribute name)
  {#.doc (example "Yields the value of an attribute in the current node.")}
  (-> Attribute (Parser Text))
  (function (_ [attrs documents])
    (case (dictionary.get name attrs)
      #.None
      (exception.except ..unknown_attribute [name (dictionary.keys attrs)])
      
      (#.Some value)
      (#try.Success [[attrs documents] value]))))

(def: .public (node expected parser)
  {#.doc (example "Parses the contents of the next node if the tag matches.")}
  (All [a] (-> Tag (Parser a) (Parser a)))
  (function (_ [attrs documents])
    (case documents
      #.End
      (exception.except ..empty_input [])
      
      (#.Item head tail)
      (case head
        (#/.Text _)
        (exception.except ..unexpected_input [])
        
        (#/.Node actual attrs' children)
        (if (name\= expected actual)
          (|> children
              (..result' parser attrs')
              (try\map (|>> [[attrs tail]])))
          (exception.except ..wrong_tag [expected actual]))))))

(def: .public any
  {#.doc (example "Yields the next node.")}
  (Parser XML)
  (function (_ [attrs documents])
    (case documents
      #.End
      (exception.except ..empty_input [])
      
      (#.Item head tail)
      (#try.Success [[attrs tail] head]))))

(exception: .public nowhere)

(def: .public (somewhere parser)
  {#.doc (example "Applies the parser somewhere among the remaining inputs; instead of demanding that the parser succeeds against the immediate inputs.")}
  (All [a] (-> (Parser a) (Parser a)))
  (function (recur [attrs input])
    (case (//.result parser [attrs input])
      (#try.Success [[attrs remaining] output])
      (#try.Success [[attrs remaining] output])
      
      (#try.Failure error)
      (case input
        #.End
        (exception.except ..nowhere [])
        
        (#.Item head tail)
        (do try.monad
          [[[attrs tail'] output] (recur [attrs tail])]
          (in [[attrs (#.Item head tail')]
               output]))))))
