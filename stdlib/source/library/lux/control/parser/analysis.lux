(.using
 [library
  [lux {"-" nat int rev local}
   [abstract
    [monad {"+" do}]]
   [control
    ["[0]" try {"+" Try}]
    ["[0]" exception {"+" exception:}]]
   [data
    ["[0]" bit]
    ["[0]" text
     ["%" format {"+" format}]]
    [collection
     ["[0]" list ("[1]#[0]" functor)]]]
   [macro
    ["[0]" template]]
   [math
    [number
     ["[0]" i64]
     ["[0]" nat]
     ["[0]" int]
     ["[0]" rev]
     ["[0]" frac]]]
   [meta
    ["[0]" symbol]]
   [tool
    [compiler
     [arity {"+" Arity}]
     [reference {"+" }
      [variable {"+" }]]
     [language
      [lux
       ["/" analysis {"+" Environment Analysis}]]]]]]]
 ["[0]" //])

(def: (remaining_inputs asts)
  (-> (List Analysis) Text)
  (format text.new_line "Remaining input: "
          (|> asts
              (list#each /.format)
              (text.interposed " "))))

(exception: .public (cannot_parse [input (List Analysis)])
  (exception.report
   ["Input" (exception.listing /.format input)]))

(exception: .public (unconsumed_input [input (List Analysis)])
  (exception.report
   ["Input" (exception.listing /.format input)]))

(type: .public Parser
  (//.Parser (List Analysis)))

(def: .public (result parser input)
  (All (_ a) (-> (Parser a) (List Analysis) (Try a)))
  (case (parser input)
    {try.#Failure error}
    {try.#Failure error}

    {try.#Success [{.#End} value]}
    {try.#Success value}
    
    {try.#Success [unconsumed _]}
    (exception.except ..unconsumed_input unconsumed)))

(def: .public any
  (Parser Analysis)
  (function (_ input)
    (case input
      {.#End}
      (exception.except ..cannot_parse input)
      
      {.#Item [head tail]}
      {try.#Success [tail head]})))

(def: .public end!
  (Parser Any)
  (function (_ tokens)
    (case tokens
      {.#End} {try.#Success [tokens []]}
      _       {try.#Failure (format "Expected list of tokens to be empty!"
                                    (remaining_inputs tokens))})))

(def: .public end?
  (Parser Bit)
  (function (_ tokens)
    {try.#Success [tokens (case tokens
                            {.#End} true
                            _       false)]}))

(template [<query> <assertion> <tag> <type> <eq>]
  [(`` (as_is (def: .public <query>
                (Parser <type>)
                (function (_ input)
                  (case input
                    (pattern (list& (<tag> x) input'))
                    {try.#Success [input' x]}

                    _
                    (exception.except ..cannot_parse input))))

              (def: .public (<assertion> expected)
                (-> <type> (Parser Any))
                (function (_ input)
                  (case input
                    (pattern (list& (<tag> actual) input'))
                    (if (# <eq> = expected actual)
                      {try.#Success [input' []]}
                      (exception.except ..cannot_parse input))

                    _
                    (exception.except ..cannot_parse input))))))]

  [bit bit! /.bit Bit bit.equivalence]
  [nat nat! /.nat Nat nat.equivalence]
  [int int! /.int Int int.equivalence]
  [rev rev! /.rev Rev rev.equivalence]
  [frac frac! /.frac Frac frac.equivalence]
  [text text! /.text Text text.equivalence]
  [local local! /.local Nat nat.equivalence]
  [foreign foreign! /.foreign Nat nat.equivalence]
  [constant constant! /.constant Symbol symbol.equivalence]
  )

(def: .public (tuple parser)
  (All (_ a) (-> (Parser a) (Parser a)))
  (function (_ input)
    (case input
      (pattern (list& (/.tuple head) tail))
      (do try.monad
        [output (..result parser head)]
        {try.#Success [tail output]})

      _
      (exception.except ..cannot_parse input))))
