(.module:
  [library
   [lux (#- Variant Tuple nat int rev local)
    [abstract
     [monad (#+ do)]]
    [control
     ["." try (#+ Try)]
     ["." exception (#+ exception:)]]
    [data
     ["." bit]
     ["." name]
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor)]]]
    [macro
     ["." template]]
    [math
     [number
      ["." i64]
      ["." nat]
      ["." int]
      ["." rev]
      ["." frac]]]
    [tool
     [compiler
      [arity (#+ Arity)]
      [reference (#+)
       [variable (#+)]]
      [language
       [lux
        ["/" analysis (#+ Variant Tuple Environment Analysis)]]]]]]]
  ["." //])

(def: (remaining_inputs asts)
  (-> (List Analysis) Text)
  (format text.new_line "Remaining input: "
          (|> asts
              (list\map /.%analysis)
              (list.interposed " ")
              (text.join_with ""))))

(exception: .public (cannot_parse {input (List Analysis)})
  (exception.report
   ["Input" (exception.listing /.%analysis input)]))

(exception: .public (unconsumed_input {input (List Analysis)})
  (exception.report
   ["Input" (exception.listing /.%analysis input)]))

(type: .public Parser
  {#.doc (example "A parser for Lux code analysis nodes.")}
  (//.Parser (List Analysis)))

(def: .public (result parser input)
  {#.doc (example "Executes a parser and makes sure no inputs go unconsumed.")}
  (All [a] (-> (Parser a) (List Analysis) (Try a)))
  (case (parser input)
    (#try.Failure error)
    (#try.Failure error)

    (#try.Success [#.End value])
    (#try.Success value)
    
    (#try.Success [unconsumed _])
    (exception.except ..unconsumed_input unconsumed)))

(def: .public any
  {#.doc (example "Matches any value, without discrimination.")}
  (Parser Analysis)
  (function (_ input)
    (case input
      #.End
      (exception.except ..cannot_parse input)
      
      (#.Item [head tail])
      (#try.Success [tail head]))))

(def: .public end!
  {#.doc "Ensures there are no more inputs."}
  (Parser Any)
  (function (_ tokens)
    (case tokens
      #.End (#try.Success [tokens []])
      _     (#try.Failure (format "Expected list of tokens to be empty!"
                                  (remaining_inputs tokens))))))

(def: .public end?
  {#.doc "Checks whether there are no more inputs."}
  (Parser Bit)
  (function (_ tokens)
    (#try.Success [tokens (case tokens
                            #.End true
                            _     false)])))

(template [<query> <assertion> <tag> <type> <eq>]
  [(`` (as_is (def: .public <query>
                {#.doc (example (~~ (template.text ["Queries for a " <query> " value."])))}
                (Parser <type>)
                (function (_ input)
                  (case input
                    (^ (list& (<tag> x) input'))
                    (#try.Success [input' x])

                    _
                    (exception.except ..cannot_parse input))))

              (def: .public (<assertion> expected)
                {#.doc (example (~~ (template.text ["Assert a specific " <query> " value."])))}
                (-> <type> (Parser Any))
                (function (_ input)
                  (case input
                    (^ (list& (<tag> actual) input'))
                    (if (\ <eq> = expected actual)
                      (#try.Success [input' []])
                      (exception.except ..cannot_parse input))

                    _
                    (exception.except ..cannot_parse input))))))]

  [bit bit! /.bit Bit bit.equivalence]
  [nat nat! /.nat Nat nat.equivalence]
  [int int! /.int Int int.equivalence]
  [rev rev! /.rev Rev rev.equivalence]
  [frac frac! /.frac Frac frac.equivalence]
  [text text! /.text Text text.equivalence]
  [local local! /.variable/local Nat nat.equivalence]
  [foreign foreign! /.variable/foreign Nat nat.equivalence]
  [constant constant! /.constant Name name.equivalence]
  )

(def: .public (tuple parser)
  {#.doc (example "Parses only within the context of a tuple's contents.")}
  (All [a] (-> (Parser a) (Parser a)))
  (function (_ input)
    (case input
      (^ (list& (/.tuple head) tail))
      (do try.monad
        [output (..result parser head)]
        (#try.Success [tail output]))

      _
      (exception.except ..cannot_parse input))))
