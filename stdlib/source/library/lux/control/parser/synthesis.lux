(.using
 [library
  [lux {"-" function loop i64 local}
   [abstract
    [monad {"+" do}]]
   [control
    ["[0]" try {"+" Try}]
    ["[0]" exception {"+" exception:}]]
   [data
    ["[0]" bit]
    ["[0]" text
     ["%" format {"+" format}]]]
   [math
    [number
     ["n" nat]
     ["[0]" i64]
     ["[0]" frac]]]
   [meta
    ["[0]" symbol]]
   [tool
    [compiler
     [reference {"+" }
      [variable {"+" Register}]]
     [arity {"+" Arity}]
     [language
      [lux
       [analysis {"+" Environment}]
       ["/" synthesis {"+" Synthesis Abstraction}]]]]]]]
 ["[0]" //])

(exception: .public (cannot_parse [input (List Synthesis)])
  (exception.report
   "Input" (exception.listing /.%synthesis input)))

(exception: .public (unconsumed_input [input (List Synthesis)])
  (exception.report
   "Input" (exception.listing /.%synthesis input)))

(exception: .public (expected_empty_input [input (List Synthesis)])
  (exception.report
   "Input" (exception.listing /.%synthesis input)))

(exception: .public (wrong_arity [expected Arity
                                  actual Arity])
  (exception.report
   "Expected" (%.nat expected)
   "Actual" (%.nat actual)))

(exception: .public empty_input)

(type: .public Parser
  (//.Parser (List Synthesis)))

(def: .public (result parser input)
  (All (_ a) (-> (Parser a) (List Synthesis) (Try a)))
  (case (parser input)
    {try.#Failure error}
    {try.#Failure error}

    {try.#Success [{.#End} value]}
    {try.#Success value}
    
    {try.#Success [unconsumed _]}
    (exception.except ..unconsumed_input unconsumed)))

(def: .public any
  (Parser Synthesis)
  (.function (_ input)
    (case input
      {.#End}
      (exception.except ..empty_input [])
      
      {.#Item [head tail]}
      {try.#Success [tail head]})))

(def: .public end
  (Parser Any)
  (.function (_ tokens)
    (case tokens
      {.#End} {try.#Success [tokens []]}
      _       (exception.except ..expected_empty_input [tokens]))))

(def: .public end?
  (Parser Bit)
  (.function (_ tokens)
    {try.#Success [tokens (case tokens
                            {.#End} true
                            _       false)]}))

(template [<query> <assertion> <tag> <type> <eq>]
  [(`` (def: .public <query>
         (Parser <type>)
         (.function (_ input)
           (case input
             (pattern (list& (<tag> x) input'))
             {try.#Success [input' x]}

             _
             (exception.except ..cannot_parse input)))))

   (`` (def: .public (<assertion> expected)
         (-> <type> (Parser Any))
         (.function (_ input)
           (case input
             (pattern (list& (<tag> actual) input'))
             (if (# <eq> = expected actual)
               {try.#Success [input' []]}
               (exception.except ..cannot_parse input))

             _
             (exception.except ..cannot_parse input)))))]

  [bit this_bit /.bit Bit bit.equivalence]
  [i64 this_i64 /.i64 I64 i64.equivalence]
  [f64 this_f64 /.f64 Frac frac.equivalence]
  [text this_text /.text Text text.equivalence]
  [local this_local /.variable/local Nat n.equivalence]
  [foreign this_foreign /.variable/foreign Nat n.equivalence]
  [constant this_constant /.constant Symbol symbol.equivalence]
  )

(def: .public (tuple parser)
  (All (_ a) (-> (Parser a) (Parser a)))
  (.function (_ input)
    (case input
      (pattern (list& (/.tuple head) tail))
      (do try.monad
        [output (..result parser head)]
        {try.#Success [tail output]})

      _
      (exception.except ..cannot_parse input))))

(def: .public (function expected parser)
  (All (_ a) (-> Arity (Parser a) (Parser [(Environment Synthesis) a])))
  (.function (_ input)
    (case input
      (pattern (list& (/.function/abstraction [environment actual body]) tail))
      (if (n.= expected actual)
        (do try.monad
          [output (..result parser (list body))]
          {try.#Success [tail [environment output]]})
        (exception.except ..wrong_arity [expected actual]))

      _
      (exception.except ..cannot_parse input))))

(def: .public (loop init_parsers iteration_parser)
  (All (_ a b) (-> (Parser a) (Parser b) (Parser [Register a b])))
  (.function (_ input)
    (case input
      (pattern (list& (/.loop/scope [start inits iteration]) tail))
      (do try.monad
        [inits (..result init_parsers inits)
         iteration (..result iteration_parser (list iteration))]
        {try.#Success [tail [start inits iteration]]})

      _
      (exception.except ..cannot_parse input))))
