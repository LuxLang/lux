(.module:
  [library
   [lux #*
    [control
     ["." try (#+ Try)]
     ["." exception (#+ exception:)]]
    [data
     ["." product]
     ["." text
      ["%" format (#+ format)]]
     [collection
      ["." dictionary (#+ Dictionary)]]]]]
  ["." //])

(type: .public Property
  Text)

(type: .public Environment
  (Dictionary Property Text))

(exception: .public (unknown_property {property Property})
  (exception.report
   ["Property" (%.text property)]))

(type: .public (Parser a)
  (//.Parser Environment a))

(def: .public empty
  Environment
  (dictionary.empty text.hash))

(def: .public (property name)
  (-> Property (Parser Text))
  (function (_ environment)
    (case (dictionary.value name environment)
      (#.Some value)
      (#try.Success [environment value])
      
      #.None
      (exception.except ..unknown_property [name]))))

(def: .public (result parser environment)
  (All [a] (-> (Parser a) Environment (Try a)))
  (\ try.monad map product.right (parser environment)))
