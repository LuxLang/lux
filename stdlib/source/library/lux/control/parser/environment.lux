(.module:
  [library
   [lux "*"
    [control
     ["[0]" try {"+" [Try]}]
     ["[0]" exception {"+" [exception:]}]]
    [data
     ["[0]" product]
     ["[0]" text
      ["%" format {"+" [format]}]]
     [collection
      ["[0]" dictionary {"+" [Dictionary]}]]]]]
  ["[0]" //])

(type: .public Property
  Text)

(type: .public Environment
  (Dictionary Property Text))

(exception: .public (unknown_property [property Property])
  (exception.report
   ["Property" (%.text property)]))

(type: .public (Parser a)
  (//.Parser Environment a))

(def: .public empty
  Environment
  (dictionary.empty text.hash))

(def: .public (property name)
  (-> Property (Parser Text))
  (function (_ environment)
    (case (dictionary.value name environment)
      (#.Some value)
      (#try.Success [environment value])
      
      #.None
      (exception.except ..unknown_property [name]))))

(def: .public (result parser environment)
  (All (_ a) (-> (Parser a) Environment (Try a)))
  (\ try.monad each product.right (parser environment)))
