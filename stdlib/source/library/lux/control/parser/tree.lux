(.module:
  [library
   [lux #*
    [abstract
     [monad (#+ do)]]
    [control
     ["." try (#+ Try)]
     ["." exception (#+ exception:)]]
    [data
     [collection
      [tree (#+ Tree)
       ["." zipper (#+ Zipper)]]]]]]
  ["." //])

(type: .public (Parser t a)
  {#.doc (example "A parser of arbitrary trees.")}
  (//.Parser (Zipper t) a))

(def: .public (result' parser zipper)
  {#.doc (example "Applies the parser against a tree zipper.")}
  (All [t a] (-> (Parser t a) (Zipper t) (Try a)))
  (do try.monad
    [[zipper output] (//.result parser zipper)]
    (in output)))

(def: .public (result parser tree)
  {#.doc (example "Applies the parser against a tree.")}
  (All [t a] (-> (Parser t a) (Tree t) (Try a)))
  (result' parser (zipper.zipper tree)))

(def: .public value
  {#.doc (example "Yields the value inside the current tree node.")}
  (All [t] (Parser t t))
  (function (_ zipper)
    (#try.Success [zipper (zipper.value zipper)])))

(exception: .public cannot_move_further)

(template [<name> <direction> <doc>]
  [(def: .public <name>
     {#.doc (example <doc>)}
     (All [t] (Parser t []))
     (function (_ zipper)
       (case (<direction> zipper)
         #.None
         (exception.except ..cannot_move_further [])

         (#.Some next)
         (#try.Success [next []]))))]

  [down      zipper.down
   "Move down."]
  [up        zipper.up
   "Move up."]

  [right     zipper.right
   "Move to the right."]
  [rightmost zipper.rightmost
   "Move to the rightmost node."]

  [left      zipper.left
   "Move to the left."]
  [leftmost  zipper.leftmost
   "Move to the leftmost node."]
  
  [next      zipper.next
   "Move to the next node."]
  [end       zipper.end
   "Move to the last node."]
  
  [previous  zipper.previous
   "Move to the previous node."]
  [start     zipper.start
   "Move to the root node."]
  )
