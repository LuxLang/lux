(.require
 [library
  [lux (.except use)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" io (.only IO)]
    [concurrency
     ["[0]" async (.only Async)]]]
   [data
    [text
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    ["[0]" macro (.only)
     [syntax (.only syntax)
      ["[0]" export]
      ["|[0]|" declaration]]]
    [type
     ["[0]" nominal (.except def)]]]]])

(nominal.def .public (Capability brand input output)
  (-> input output)

  (def .public (use it input)
    (All (_ brand input output)
      (-> (Capability brand input output)
          input
          output))
    ((representation it) input))

  (def .public capability
    (syntax (_ [[export_policy declaration [forger input output]]
                (export.with
                  (all <>.and
                       |declaration|.parser
                       (<code>.form (all <>.and <code>.local <code>.any <code>.any))))])
      (macro.with_symbols [g!_]
        (do [! meta.monad]
          [this_module meta.current_module_name
           .let [[name vars] declaration]
           g!brand (of ! each (|>> %.code code.text)
                       (macro.symbol (format (%.symbol [this_module name]))))
           .let [type (` (..Capability (.Nominal (, g!brand)) (, input) (, output)))]]
          (in (list (` (type (, export_policy)
                         (, (|declaration|.format declaration))
                         (, type)))
                    (` (def (, (code.local forger))
                         (All ((, g!_) (,* (list#each code.local vars)))
                           (-> (-> (, input) (, output))
                               (, type)))
                         (|>> as_expected)))
                    ))))))

  (def .public (async it)
    (All (_ brand input output)
      (-> (Capability brand input (IO output))
          (Capability brand input (Async output))))
    (abstraction (|>> ((representation it)) async.future)))
  )
