(.require
 [library
  [lux (.except use)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" io (.only IO)]
    [concurrency
     ["[0]" async (.only Async)]]]
   [data
    [text
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    ["[0]" macro (.only)
     [syntax (.only syntax)
      ["|[0]|" export]
      ["|[0]|" declaration]]]
    [type
     [primitive (.except)]]]]])

(primitive .public (Capability brand input output)
  (-> input output)

  (def capability
    (All (_ brand input output)
      (-> (-> input output)
          (Capability brand input output)))
    (|>> abstraction))

  (def .public (use capability input)
    (All (_ brand input output)
      (-> (Capability brand input output)
          input
          output))
    ((representation capability) input))

  (def .public capability:
    (syntax (_ [[export_policy declaration [forger input output]]
                (|export|.parser
                 (all <>.and
                      |declaration|.parser
                      (<code>.form (all <>.and <code>.local <code>.any <code>.any))))])
      (macro.with_symbols [g!_]
        (do [! meta.monad]
          [this_module meta.current_module_name
           .let [[name vars] declaration]
           g!brand (at ! each (|>> %.code code.text)
                       (macro.symbol (format (%.symbol [this_module name]))))
           .let [capability (` (..Capability (.Primitive (, g!brand)) (, input) (, output)))]]
          (in (list (` (type (, export_policy)
                         (, (|declaration|.format declaration))
                         (, capability)))
                    (` (def (, (code.local forger))
                         (All ((, g!_) (,* (list#each code.local vars)))
                           (-> (-> (, input) (, output))
                               (, capability)))
                         (,! ..capability)))
                    ))))))

  (def .public (async capability)
    (All (_ brand input output)
      (-> (Capability brand input (IO output))
          (Capability brand input (Async output))))
    (..capability (|>> ((representation capability)) async.future)))
  )
