... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except use)
   [abstract
    [monad (.only do)]]
   [concurrency
    ["[0]" async (.only Async)]]
   [control
    ["<>" projection]
    ["[0]" io (.only IO)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   ["[0]" meta (.only)
    ["[0]" symbol]
    ["[0]" module]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    ["[0]" macro (.only)
     ["[0]" syntax (.only)
      ["[0]" export]
      ["|[0]|" declaration]]]
    [type
     ["[0]" nominal]]]]])

(nominal.every .public (Capability brand input output)
  (-> input output)

  (the .public (use it input)
    (for_any (_ brand input output)
      (-> (Capability brand input output)
          input
          output))
    ((nominal.representation it) input))

  (the .public capability
    (syntax.macro (_ [[export_policy declaration [forger input output]]
                      (export.with
                        (all <>.and
                             |declaration|.projection
                             (<code>.form (all <>.and <code>.local <code>.any <code>.any))))])
      (macro.with_symbols [g!_]
        (do [! meta.monad]
          [[this_module _] module.current
           .let [[name vars] declaration]
           g!brand (by ! each (|>> code.as_text code.text)
                       (macro.symbol (%.message (symbol.as_text [this_module name]))))
           .let [type (` (..Capability (.Nominal (, g!brand)) (, input) (, output)))]]
          (in (list (` (every (, export_policy)
                         (, (|declaration|.injection declaration))
                         (, type)))
                    (` (the (, (code.local forger))
                         (for_any ((, g!_) (,* (list#each code.local vars)))
                           (-> (-> (, input) (, output))
                               (, type)))
                         (|>> as_expected)))
                    ))))))

  (the .public (async it)
    (for_any (_ brand input output)
      (-> (Capability brand input (IO output))
          (Capability brand input (Async output))))
    (nominal.abstraction
     (|>> ((nominal.representation it))
          async.future)))
  )
