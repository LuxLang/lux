(.module:
  [library
   [lux #*
    [abstract
     [monad (#+ do)]]
    [control
     ["." io (#+ IO)]
     ["<>" parser
      ["<c>" code]]
     [concurrency
      ["." async (#+ Async)]]]
    [data
     [text
      ["%" format (#+ format)]]
     [collection
      ["." list ("#\." functor)]]]
    [type
     abstract]
    ["." meta]
    ["." macro
     ["." code]
     [syntax (#+ syntax:)
      ["|.|" export]
      ["|.|" declaration]
      ["|.|" annotations]]]]])

(abstract: .public (Capability brand input output)
  {}

  (-> input output)

  (def: capability
    (All [brand input output]
      (-> (-> input output)
          (Capability brand input output)))
    (|>> :abstraction))

  (def: .public (use capability input)
    (All [brand input output]
      (-> (Capability brand input output)
          input
          output))
    ((:representation capability) input))

  (syntax: .public (capability: [[export_policy declaration annotations [forger input output]]
                                 (|export|.parser
                                  ($_ <>.and
                                      |declaration|.parser
                                      (<>.maybe |annotations|.parser)
                                      (<c>.form ($_ <>.and <c>.local_identifier <c>.any <c>.any))))])
    (do {! meta.monad}
      [this_module meta.current_module_name
       .let [[name vars] declaration]
       g!brand (\ ! map (|>> %.code code.text)
                  (macro.identifier (format (%.name [this_module name]))))
       .let [capability (` (..Capability (.primitive (~ g!brand)) (~ input) (~ output)))]]
      (in (list (` (type: (~ export_policy)
                     (~ (|declaration|.format declaration))
                     (~ capability)))
                (` (def: (~ (code.local_identifier forger))
                     (All [(~+ (list\map code.local_identifier vars))]
                       (-> (-> (~ input) (~ output))
                           (~ capability)))
                     (~! ..capability)))
                ))))

  (def: .public (async capability)
    (All [brand input output]
      (-> (Capability brand input (IO output))
          (Capability brand input (Async output))))
    (..capability (|>> ((:representation capability)) async.future)))
  )
