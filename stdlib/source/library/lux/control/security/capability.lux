(.using
  [library
   [lux "*"
    [abstract
     [monad {"+" do}]]
    [control
     ["[0]" io {"+" IO}]
     ["<>" parser
      ["<c>" code]]
     [concurrency
      ["[0]" async {"+" Async}]]]
    [data
     [text
      ["%" format {"+" format}]]
     [collection
      ["[0]" list ("[1]#[0]" functor)]]]
    [type
     abstract]
    ["[0]" meta]
    ["[0]" macro
     ["[0]" code]
     [syntax {"+" syntax:}
      ["|[0]|" export]
      ["|[0]|" declaration]]]]])

(abstract: .public (Capability brand input output)
  (-> input output)

  (def: capability
    (All (_ brand input output)
      (-> (-> input output)
          (Capability brand input output)))
    (|>> :abstraction))

  (def: .public (use capability input)
    (All (_ brand input output)
      (-> (Capability brand input output)
          input
          output))
    ((:representation capability) input))

  (syntax: .public (capability: [[export_policy declaration [forger input output]]
                                 (|export|.parser
                                  ($_ <>.and
                                      |declaration|.parser
                                      (<c>.form ($_ <>.and <c>.local_symbol <c>.any <c>.any))))])
    (macro.with_symbols [g!_]
      (do [! meta.monad]
        [this_module meta.current_module_name
         .let [[name vars] declaration]
         g!brand (# ! each (|>> %.code code.text)
                    (macro.symbol (format (%.symbol [this_module name]))))
         .let [capability (` (..Capability (.Primitive (~ g!brand)) (~ input) (~ output)))]]
        (in (list (` (type: (~ export_policy)
                       (~ (|declaration|.format declaration))
                       (~ capability)))
                  (` (def: (~ (code.local_symbol forger))
                       (All ((~ g!_) (~+ (list#each code.local_symbol vars)))
                         (-> (-> (~ input) (~ output))
                             (~ capability)))
                       (~! ..capability)))
                  )))))

  (def: .public (async capability)
    (All (_ brand input output)
      (-> (Capability brand input (IO output))
          (Capability brand input (Async output))))
    (..capability (|>> ((:representation capability)) async.future)))
  )
