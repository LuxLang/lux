(.module:
  [library
   [lux #*
    [abstract
     [functor (#+ Functor)]
     [apply (#+ Apply)]
     [monad (#+ Monad)]]
    [type
     abstract]]])

(abstract: .public (Policy brand value label)
  {#.doc (example "A security policy encoded as the means to 'upgrade' or 'downgrade' in a secure context.")}

  value

  (type: .public (Can_Upgrade brand label value)
    {#.doc (example "Represents the capacity to 'upgrade' a value.")}
    (-> value (Policy brand value label)))

  (type: .public (Can_Downgrade brand label value)
    {#.doc (example "Represents the capacity to 'downgrade' a value.")}
    (-> (Policy brand value label) value))

  (type: .public (Privilege brand label)
    {#.doc (example "Represents the privilege to both 'upgrade' and 'downgrade' a value.")}
    {#can_upgrade (Can_Upgrade brand label)
     #can_downgrade (Can_Downgrade brand label)})

  (type: .public (Delegation brand from to)
    {#.doc (example "Represents the act of delegating policy capacities.")}
    (All [value]
      (-> (Policy brand value from)
          (Policy brand value to))))

  (def: .public (delegation downgrade upgrade)
    {#.doc (example "Delegating policy capacities.")}
    (All [brand from to]
      (-> (Can_Downgrade brand from) (Can_Upgrade brand to)
          (Delegation brand from to)))
    (|>> downgrade upgrade))

  (type: .public (Context brand scope label)
    {#.doc (example "A computational context with an associated policy privilege.")}
    (-> (Privilege brand label)
        (scope label)))

  (def: privilege
    Privilege
    {#can_upgrade (|>> :abstraction)
     #can_downgrade (|>> :representation)})

  (def: .public (with_policy context)
    {#.doc (example "Activates a security context with the priviledge to enforce it's policy."

                    (type: Password
                      (Private Text))

                    (interface: (Policy %)
                      (: (-> Text (Password %))
                         password)
                      (: (-> (Password %) Text)
                         unsafe))

                    (def: (policy _)
                      (Ex [%] (-> Any (Policy %)))
                      (with_policy
                        (: (Context Privacy Policy)
                           (function (_ (^open "%::."))
                             (implementation
                              (def: (password value)
                                (%::can_upgrade value))
                              (def: (unsafe password)
                                (%::can_downgrade password))))))))}
    (All [brand scope]
      (Ex [label]
        (-> (Context brand scope label)
            (scope label))))
    (context ..privilege))

  (def: (of_policy constructor)
    (-> Type Type)
    (type (All [brand label]
            (constructor (All [value] (Policy brand value label))))))

  (implementation: .public functor
    (:~ (..of_policy Functor))
    
    (def: (map f fa)
      (|> fa :representation f :abstraction)))

  (implementation: .public apply
    (:~ (..of_policy Apply))
    
    (def: &functor ..functor)
    
    (def: (apply ff fa)
      (:abstraction ((:representation ff) (:representation fa)))))

  (implementation: .public monad
    (:~ (..of_policy Monad))
    
    (def: &functor ..functor)
    (def: in (|>> :abstraction))
    (def: join (|>> :representation)))
  )

(template [<brand> <value> <upgrade> <downgrade> <doc>]
  [(abstract: .public <brand>
     {#.doc <doc>}
     
     Any

     (type: .public <value>
       (Policy <brand>))
     
     (type: .public <upgrade>
       (Can_Upgrade <brand>))
     
     (type: .public <downgrade>
       (Can_Downgrade <brand>))
     )]

  [Privacy Private Can_Conceal Can_Reveal
   (example "A security context for privacy."
            "Private data is data which cannot be allowed to leak outside of the programmed.")]
  [Safety Safe Can_Trust Can_Distrust
   (example "A security context for safety."
            "Safe data is data coming from outside the program which can be trusted to be properly formatted and lacking injections.")]
  )
