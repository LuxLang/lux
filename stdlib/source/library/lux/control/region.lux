(.module:
  [library
   [lux "*"
    [abstract
     [functor {"+" [Functor]}]
     [apply {"+" [Apply]}]
     ["[0]" monad {"+" [Monad do]}]]
    [control
     ["[0]" try {"+" [Try]}]]
    [data
     ["[0]" text
      ["%" format {"+" [format]}]]
     [collection
      ["[0]" list ("[1]\[0]" mix)]]]]]
  [//
   ["[0]" exception {"+" [Exception exception:]}]])

(type: (Cleaner r !)
  (-> r (! (Try Any))))

(type: .public (Region r ! a)
  (-> [r (List (Cleaner r !))]
      (! [(List (Cleaner r !))
          (Try a)])))

(def: separator
  Text
  (format text.new_line
          "-----------------------------------------" text.new_line
          "-----------------------------------------" text.new_line
          "-----------------------------------------" text.new_line
          text.new_line))

(exception: .public [a] (clean_up_error [error Text
                                         output (Try a)])
  (format error
          (case output
            {#try.Success _}
            ""

            {#try.Failure error|output}
            (format separator
                    error|output))))

(def: (clean clean_up output)
  (All (_ a) (-> (Try Any) (Try a) (Try a)))
  (case clean_up
    {#try.Success _}
    output

    {#try.Failure error}
    (exception.except ..clean_up_error [error output])))

(def: .public (run! monad computation)
  (All (_ ! a)
    (-> (Monad !) (All (_ r) (Region r ! a))
        (! (Try a))))
  (do [! monad]
    [[cleaners output] (computation [[] (list)])]
    (|> cleaners
        (monad.each ! (function (_ cleaner) (cleaner [])))
        (\ ! each (list\mix clean output)))))

(def: .public (acquire! monad cleaner value)
  (All (_ ! a) (-> (Monad !) (-> a (! (Try Any))) a
                   (All (_ r) (Region r ! a))))
  (function (_ [region cleaners])
    (\ monad in [{#.Item (function (_ region) (cleaner value))
                  cleaners}
                 {#try.Success value}])))

(implementation: .public (functor super)
  (All (_ !)
    (-> (Functor !)
        (All (_ r) (Functor (Region r !)))))

  (def: (each f)
    (function (_ fa)
      (function (_ region+cleaners)
        (\ super each
           (function (_ [cleaners' temp])
             [cleaners' (case temp
                          {#try.Success value}
                          {#try.Success (f value)}

                          {#try.Failure error}
                          {#try.Failure error})])
           (fa region+cleaners))))))

(implementation: .public (apply super)
  (All (_ !)
    (-> (Monad !)
        (All (_ r) (Apply (Region r !)))))

  (def: &functor
    (..functor (value@ #monad.&functor super)))

  (def: (on fa ff)
    (function (_ [region cleaners])
      (do super
        [[cleaners ef] (ff [region cleaners])
         [cleaners ea] (fa [region cleaners])]
        (case ef
          {#try.Success f}
          (case ea
            {#try.Success a}
            (in [cleaners {#try.Success (f a)}])
            
            {#try.Failure error}
            (in [cleaners {#try.Failure error}]))
          
          {#try.Failure error}
          (in [cleaners {#try.Failure error}]))))))

(implementation: .public (monad super)
  (All (_ !)
    (-> (Monad !)
        (All (_ r) (Monad (Region r !)))))

  (def: &functor
    (..functor (value@ #monad.&functor super)))

  (def: (in value)
    (function (_ [region cleaners])
      (\ super in [cleaners {#try.Success value}])))

  (def: (conjoint ffa)
    (function (_ [region cleaners])
      (do super
        [[cleaners efa] (ffa [region cleaners])]
        (case efa
          {#try.Success fa}
          (fa [region cleaners])

          {#try.Failure error}
          (in [cleaners {#try.Failure error}]))))))

(def: .public (failure monad error)
  (All (_ ! a)
    (-> (Monad !) Text
        (All (_ r) (Region r ! a))))
  (function (_ [region cleaners])
    (\ monad in [cleaners {#try.Failure error}])))

(def: .public (except monad exception message)
  (All (_ ! e a)
    (-> (Monad !) (Exception e) e
        (All (_ r) (Region r ! a))))
  (failure monad (exception.error exception message)))

(def: .public (lifted monad operation)
  (All (_ ! a)
    (-> (Monad !) (! a)
        (All (_ r) (Region r ! a))))
  (function (_ [region cleaners])
    (\ monad each
       (|>> {#try.Success} [cleaners])
       operation)))
