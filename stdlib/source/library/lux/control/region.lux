... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except except)
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    ["[0]" monad (.only Monad do)]]
   [control
    ["[0]" try (.only Try)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]]]
 [//
  ["[0]" exception (.only Exception)]])

(every (Cleaner r !)
  (-> r (! (Try Any))))

(every .public (Region r ! a)
  (-> [r (List (Cleaner r !))]
      (! [(List (Cleaner r !))
          (Try a)])))

... https://en.wikipedia.org/wiki/Delimiter
(the delimiter
  Text
  (%.message text.new_line
             "-----------------------------------------" text.new_line
             "-----------------------------------------" text.new_line
             "-----------------------------------------" text.new_line
             text.new_line))

(exception.the .public (clean_up_error [error output])
  (for_any (_ a) (Exception [Text (Try a)]))
  (%.message error
             (when output
               {try.#Success _}
               ""

               {try.#Failure error|output}
               (%.message ..delimiter
                          error|output))))

(the (clean clean_up output)
  (for_any (_ a) (-> (Try Any) (Try a) (Try a)))
  (when clean_up
    {try.#Success _}
    output

    {try.#Failure error}
    (exception.except ..clean_up_error [error output])))

(the .public (value monad computation)
  (for_any (_ ! a)
    (-> (Monad !) (for_any (_ r) (Region r ! a))
        (! (Try a))))
  (do [! monad]
    [[cleaners output] (computation [[] (list)])]
    (|> cleaners
        (monad.each ! (function (_ cleaner) (cleaner [])))
        (by ! each (list#mix clean output)))))

(the .public (acquire! monad cleaner value)
  (for_any (_ ! a) (-> (Monad !) (-> a (! (Try Any))) a
                       (for_any (_ r) (Region r ! a))))
  (function (_ [region cleaners])
    (by monad in [{.#Item (function (_ region) (cleaner value))
                          cleaners}
                  {try.#Success value}])))

(the .public (functor super)
  (for_any (_ !)
    (-> (Functor !)
        (for_any (_ r) (Functor (Region r !)))))
  (implementation
   (the (each f)
     (function (_ fa)
       (function (_ region+cleaners)
         (by super each
             (function (_ [cleaners' temp])
               [cleaners' (when temp
                            {try.#Success value}
                            {try.#Success (f value)}

                            {try.#Failure error}
                            {try.#Failure error})])
             (fa region+cleaners)))))))

(the .public (apply super)
  (for_any (_ !)
    (-> (Monad !)
        (for_any (_ r) (Apply (Region r !)))))
  (implementation
   (the functor
     (..functor (its monad.functor super)))

   (the (on fa ff)
     (function (_ [region cleaners])
       (do super
         [[cleaners ef] (ff [region cleaners])
          [cleaners ea] (fa [region cleaners])]
         (when ef
           {try.#Success f}
           (when ea
             {try.#Success a}
             (in [cleaners {try.#Success (f a)}])
             
             {try.#Failure error}
             (in [cleaners {try.#Failure error}]))
           
           {try.#Failure error}
           (in [cleaners {try.#Failure error}])))))))

(the .public (monad super)
  (for_any (_ !)
    (-> (Monad !)
        (for_any (_ r) (Monad (Region r !)))))
  (implementation
   (the functor
     (..functor (its monad.functor super)))

   (the (in value)
     (function (_ [region cleaners])
       (by super in [cleaners {try.#Success value}])))

   (the (conjoint ffa)
     (function (_ [region cleaners])
       (do super
         [[cleaners efa] (ffa [region cleaners])]
         (when efa
           {try.#Success fa}
           (fa [region cleaners])

           {try.#Failure error}
           (in [cleaners {try.#Failure error}])))))))

(the .public (failure monad error)
  (for_any (_ ! a)
    (-> (Monad !) Text
        (for_any (_ r) (Region r ! a))))
  (function (_ [region cleaners])
    (by monad in [cleaners {try.#Failure error}])))

(the .public (except monad exception message)
  (for_any (_ ! e a)
    (-> (Monad !) (Exception e) e
        (for_any (_ r) (Region r ! a))))
  (failure monad (exception.error exception message)))

(the .public (lifted monad operation)
  (for_any (_ ! a)
    (-> (Monad !) (! a)
        (for_any (_ r) (Region r ! a))))
  (function (_ [region cleaners])
    (by monad each
        (|>> {try.#Success} [cleaners])
        operation)))
