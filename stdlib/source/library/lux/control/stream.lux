... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    ["[0]" monad (.only Monad)
     ["/" free]]]
   ["[0]" function]
   [data
    [collection
     ["[0]" list]
     ["[0]" sequence (.only Sequence)]]]
   ["[0]" type]]])

... https://en.wikipedia.org/wiki/Iterator
... https://en.wikipedia.org/wiki/Generator_(computer_programming)
... https://en.wikipedia.org/wiki/Stream_(computing)
(every (Yield it !)
  [[it] (-> [] !)])

(the yield_functor
  (for_any (_ it)
    (Functor (Yield it)))
  (implementation
   (the (each on [input next])
     [input (|>> next on)])))

(every .public (Stream yield it)
  (/.Free (..Yield yield) it))

(the .public monad
  (for_any (_ yield)
    (Monad (Stream yield)))
  (/.monad ..yield_functor))

(the .public functor
  (for_any (_ yield)
    (Functor (Stream yield)))
  (its monad.functor ..monad))

(the .public (sequence it)
  (for_any (_ yield it)
    (-> (Stream yield it)
        [(Sequence yield) it]))
  (loop (next [yield (type.sharing [yield it]
                       (is (Stream yield it)
                           it)
                       (is (Sequence yield)
                           sequence.empty))
               it it])
    (when it
      {/.#Pure it}
      [yield it]
      
      {/.#Impure [item after]}
      (next (sequence.suffix item yield)
            (after [])))))

(the .public (one it)
  (for_any (_ it)
    (-> it
        (Stream it Any)))
  {/.#Impure [[it] (function.constant {/.#Pure []})]})

(the .public many
  (for_any (_ it)
    (-> (List it)
        (Stream it Any)))
  (list.each' ..monad ..one))
