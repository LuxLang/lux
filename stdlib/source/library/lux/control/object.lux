... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   ["[0]" debug]
   [abstract
    [monad (.only do)]]
   [control
    ["?" parser]
    ["[0]" maybe (.use "[1]#[0]" functor)]
    [function
     [predicate (.only Predicate)]
     ["[0]" mixin (.only Mixin)]]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["?[1]" \\parser]]
    ["[0]" macro (.only)
     [syntax (.only syntax)]
     [template (.only with_locals)]]
    [type
     ["[0]" nominal]]]]])

... https://en.wikipedia.org/wiki/Object-oriented_programming
(nominal.every .public (Instance interface state)
  (Record
   [#class (interface state)
    #state state])

  (the .public (new class state)
    (All (_ interface state)
      (-> (interface state) state
          (Instance interface state)))
    (nominal.abstraction
     [#class class
      #state state]))

  (the .public class
    (All (_ interface state)
      (-> (Instance interface state)
          (interface state)))
    (|>> nominal.representation
         (its #class)))

  (the .public state
    (All (_ interface state)
      (-> (Instance interface state)
          state))
    (|>> nominal.representation
         (its #state)))
  )

(every .public (Object interface)
  (Ex (_ state)
    (Instance interface state)))

... https://en.wikipedia.org/wiki/Class_(computer_programming)
(the .public Class
  (syntax (_ [class,state (?.maybe (?code.form (?.and ?code.local ?code.local)))
              it (?code.tuple (?.some (?.and ?code.local ?code.any)))])
    (do meta.monad
      [macro.with_symbols ['class 'state]
       .let [['class 'state] (<| (maybe.else ['class 'state])
                                 (do maybe.monad
                                   [[class state] class,state]
                                   (in [(code.local class) (code.local state)])))]]
      (in (list (` (All ((, 'class) (, 'state))
                     (Tuple (,* (list#each (function (_ [name type])
                                             (` ((, type) (, 'class) (, 'state))))
                                           it)))))
                (` [(,* (list#each (|>> product.left code.text)
                                   it))]))))))

(the .public (instance? class)
  (All (_ interface state)
    (-> (interface state)
        (Predicate (Instance interface state))))
  (|>> ..class
       (same? class)))

(the Complete
  (template (_ input output interface state)
    [(-> [(Instance interface state) input]
         output)]))

(the Partial
  (template (_ input output interface state)
    [(Mixin [(Instance interface state) input]
            output)]))

... https://en.wikipedia.org/wiki/Method_(computer_programming)
(every .public (Method input output interface state)
  (Record
   [#complete (Complete input output interface state)
    #partial (Partial input output interface state)]))

(the .public (method partial)
  (All (_ interface state input output)
    (-> (Partial input output interface state)
        (Method input output interface state)))
  [#complete (mixin.fixed partial)
   #partial partial])

(the .public on
  (with_locals ['it]
    (template (_ <method> <input> <it>)
      [(let ['it <it>]
         ((its [<method> ..#complete] (..class 'it))
          ['it <input>]))])))

... https://en.wikipedia.org/wiki/Method_overriding
(the Change
  (template (_ of)
    [(-> of
         of)]))

(the Revision
  (template (_ inner outer)
    [(-> (Change inner)
         (Change outer))]))

(the (override' revision partial class)
  (All (_ interface state input output)
    (-> (Revision (Method input output interface state)
                  (interface state))
        (Partial input output interface state)
        (Change (interface state))))
  (revision (function (_ method)
              (let [partial (mixin.mixed partial (its #partial method))]
                [#complete (mixin.fixed partial)
                 #partial partial]))
            class))

(the .public override
  (template (_ <method> <partial> <class>)
    [((debug.private ..override') (.revised <method>) <partial> <class>)]))
