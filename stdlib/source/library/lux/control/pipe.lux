... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except let cond if exec when tuple)
   [abstract
    ["[0]" monad]]
   [control
    ["<>" projection]
    ["[0]" try]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]]]
   [math
    [number
     ["n" natural]
     ["i" int]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]
    [macro (.only with_symbols)
     ["[0]" syntax]]]]])

(the body
  (Projection (List Code))
  (<code>.tuple (<>.some <code>.any)))

(the .public new
  (syntax.macro (_ [start <code>.any
                    body ..body
                    prev <code>.any])
    (in (list (` (|> (, start) (,* body)))))))

(the .public let
  (syntax.macro (_ [binding <code>.any
                    body <code>.any
                    prev <code>.any])
    (in (list (` (.let [(, binding) (, prev)]
                   (, body)))))))

(the _reversed_
  (Projection Any)
  (function (_ tokens)
    {try.#Success [(list.reversed tokens) []]}))

(the .public cond
  (syntax.macro (_ [_ _reversed_
                    prev <code>.any
                    else ..body
                    _ _reversed_
                    branches (<>.some (<>.and ..body ..body))])
    (with_symbols [g!temp]
      (in (list (` (.let [(, g!temp) (, prev)]
                     (.cond (,* (monad.do list.monad
                                  [[test then] branches]
                                  (list (` (|> (, g!temp) (,* test)))
                                        (` (|> (, g!temp) (,* then))))))
                            (|> (, g!temp) (,* else))))))))))

(the .public if
  (syntax.macro (_ [test ..body
                    then ..body
                    else ..body
                    prev <code>.any])
    (in (list (` (..cond [(,* test)] [(,* then)]
                         [(,* else)]
                         (, prev)))))))

(the .public while
  (syntax.macro (_ [test ..body
                    then ..body
                    prev <code>.any])
    (with_symbols [g!temp g!again]
      (in (list (` (.loop ((, g!again) [(, g!temp) (, prev)])
                     (.if (|> (, g!temp) (,* test))
                       ((, g!again) (|> (, g!temp) (,* then)))
                       (, g!temp)))))))))

(the .public do
  (syntax.macro (_ [monad <code>.any
                    steps (<>.some ..body)
                    prev <code>.any])
    (with_symbols [g!temp]
      (.when (list.reversed steps)
        (list.partial last_step prev_steps)
        (.let [step_bindings (monad.do list.monad
                               [step (list.reversed prev_steps)]
                               (list g!temp (` (|> (, g!temp) (,* step)))))]
          (in (list (` (monad.do (, monad)
                         [.let [(, g!temp) (, prev)]
                          (,* step_bindings)]
                         (|> (, g!temp) (,* last_step)))))))

        _
        (in (list prev))))))

(the .public exec
  (syntax.macro (_ [body ..body
                    prev <code>.any])
    (with_symbols [g!temp]
      (in (list (` (.let [(, g!temp) (, prev)]
                     (.exec (|> (, g!temp) (,* body))
                       (, g!temp)))))))))

(the .public tuple
  (syntax.macro (_ [paths (<>.many ..body)
                    prev <code>.any])
    (with_symbols [g!temp]
      (in (list (` (.let [(, g!temp) (, prev)]
                     [(,* (list#each (function (_ body) (` (|> (, g!temp) (,* body))))
                                     paths))])))))))

(the .public when
  (syntax.macro (_ [branches (<>.many (<>.and <code>.any <code>.any))
                    prev <code>.any])
    (in (list (` (.when (, prev)
                   (,* (|> branches
                           (list#each (function (_ [pattern body]) (list pattern body)))
                           list#conjoint))))))))
