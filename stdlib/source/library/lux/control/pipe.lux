... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except let if exec when tuple)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monad)
      ["?[1]" \\projection]]]]
   [math
    [number
     ["n" natural]
     ["i" integer]]]
   [macro (.only with_names)
    ["[0]" syntax]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]]]])

(the body
  (Projection (List Code))
  (<code>.tuple (<>.some ?list.any)))

(the .public new
  (syntax.macro (_ [start ?list.any
                    body ..body
                    prev ?list.any])
    (in (list (` (|> (, start)
                     (,* body)))))))

(the .public let
  (syntax.macro (_ [binding ?list.any
                    body ?list.any
                    prev ?list.any])
    (in (list (` (.let [(, binding) (, prev)]
                   (, body)))))))

(the _reversed_
  (Projection Any)
  (function (_ [so_far tape])
    {try.#Success [[so_far (list.reversed tape)]
                   []]}))

(the .public if
  (syntax.macro (_ [_ _reversed_
                    prev ?list.any
                    else ..body
                    branches (<>.some (all <>.and
                                           ..body
                                           ..body))])
    (with_names ['temp]
      (in (list (` (.let [(, 'temp) (, prev)]
                     (.if (,* (monad.do list.monad
                                [[then test] (list.reversed branches)]
                                (list (` (|> (, 'temp) (,* test)))
                                      (` (|> (, 'temp) (,* then))))))
                          (|> (, 'temp)
                              (,* else))))))))))

(the .public while
  (syntax.macro (_ [test ..body
                    then ..body
                    prev ?list.any])
    (with_names ['temp 'again]
      (in (list (` (.loop ((, 'again) [(, 'temp) (, prev)])
                     (.if (|> (, 'temp)
                              (,* test))
                          ((, 'again) (|> (, 'temp)
                                          (,* then)))
                          (, 'temp)))))))))

(the .public do
  (syntax.macro (_ [monad ?list.any
                    steps (<>.some ..body)
                    prev ?list.any])
    (with_names ['temp]
      (.when (list.split_at 1 (list.reversed steps))
        [(list last_step) prev_steps]
        (.let [step_bindings (monad.do list.monad
                               [step (list.reversed prev_steps)]
                               (list 'temp (` (|> (, 'temp) (,* step)))))]
          (in (list (` (monad.do (, monad)
                         [.let [(, 'temp) (, prev)]
                          (,* step_bindings)]
                         (|> (, 'temp)
                             (,* last_step)))))))

        _
        (in (list prev))))))

(the .public exec
  (syntax.macro (_ [body ..body
                    prev ?list.any])
    (with_names ['temp]
      (in (list (` (.let [(, 'temp) (, prev)]
                     (.exec
                       (|> (, 'temp)
                           (,* body))
                       (, 'temp)))))))))

(the .public tuple
  (syntax.macro (_ [paths (<>.many ..body)
                    prev ?list.any])
    (with_names ['temp]
      (in (list (` (.let [(, 'temp) (, prev)]
                     [(,* (list#each (function (_ body) (` (|> (, 'temp) (,* body))))
                                     paths))])))))))

(the .public when
  (syntax.macro (_ [branches (<>.many (<>.and ?list.any ?list.any))
                    prev ?list.any])
    (in (list (` (.when (, prev)
                   (,* (|> branches
                           (list#each (function (_ [pattern body]) (list pattern body)))
                           list#conjoint))))))))
