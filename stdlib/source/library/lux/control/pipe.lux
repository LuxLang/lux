... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except let if exec when tuple)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monad)
      ["?[1]" \\projection]]]]
   [math
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [macro (.only with_names)
    ["[0]" syntax]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]]]])

(the body
  (Projection (List Code))
  (<code>.tuple (<>.some ?list.any)))

(syntax.the .public (new [start ?list.any
                          body ..body
                          prev ?list.any])
  (pure (list (` (|> (, start)
                     (,* body))))))

(syntax.the .public (let [binding ?list.any
                          body ?list.any
                          prev ?list.any])
  (pure (list (` (.let [(, binding) (, prev)]
                   (, body))))))

(the _in_reverse_
  (Projection Any)
  (function (_ [so_far tape])
    {try.#Success [[so_far (list.in_reverse tape)]
                   []]}))

(syntax.the .public (if [_ _in_reverse_
                         prev ?list.any
                         else ..body
                         branches (<>.some (all <>.and
                                                ..body
                                                ..body))])
  (with_names ['temp]
    (pure (list (` (.let [(, 'temp) (, prev)]
                     (.if (,* (monad.let list.monad
                                [[then test] (list.in_reverse branches)]
                                (list (` (|> (, 'temp) (,* test)))
                                      (` (|> (, 'temp) (,* then))))))
                          (|> (, 'temp)
                              (,* else)))))))))

(syntax.the .public (while [test ..body
                            then ..body
                            prev ?list.any])
  (with_names ['temp 'again]
    (pure (list (` (.loop ((, 'again) [(, 'temp) (, prev)])
                     (.if (|> (, 'temp)
                              (,* test))
                          ((, 'again) (|> (, 'temp)
                                          (,* then)))
                          (, 'temp))))))))

(syntax.the .public (with_monad [monad ?list.any
                                 steps (<>.some ..body)
                                 prev ?list.any])
  (with_names ['temp]
    (.when (list.split 1 (list.in_reverse steps))
      [(list last_step) prev_steps]
      (.let [step_bindings (monad.let list.monad
                             [step (list.in_reverse prev_steps)]
                             (list 'temp (` (|> (, 'temp) (,* step)))))]
        (pure (list (` (monad.let (, monad)
                         [.let [(, 'temp) (, prev)]
                          (,* step_bindings)]
                         (|> (, 'temp)
                             (,* last_step)))))))

      _
      (pure (list prev)))))

(syntax.the .public (exec [body ..body
                           prev ?list.any])
  (with_names ['temp]
    (pure (list (` (.let [(, 'temp) (, prev)]
                     (.exec
                       (|> (, 'temp)
                           (,* body))
                       (, 'temp))))))))

(syntax.the .public (tuple [paths (<>.many ..body)
                            prev ?list.any])
  (with_names ['temp]
    (pure (list (` (.let [(, 'temp) (, prev)]
                     [(,* (list#each (function (_ body) (` (|> (, 'temp) (,* body))))
                                     paths))]))))))

(syntax.the .public (when [branches (<>.many (<>.and ?list.any ?list.any))
                           prev ?list.any])
  (pure (list (` (.when (, prev)
                   (,* (|> branches
                           (list#each (function (_ [pattern body]) (list pattern body)))
                           list#conjoint)))))))
