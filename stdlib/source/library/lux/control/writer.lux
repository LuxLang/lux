(.module:
  [library
   [lux #*
    ["@" target]
    [abstract
     [monoid (#+ Monoid)]
     [apply (#+ Apply)]
     ["." functor (#+ Functor)]
     ["." monad (#+ Monad do)]]]])

(type: .public (Writer log value)
  {#log log
   #value value})

(def: .public (write message)
  (All [log] (-> log (Writer log Any)))
  [message []])

(implementation: .public functor
  (All [l]
    (Functor (Writer l)))
  
  (def: (map f fa)
    (let [[log datum] fa]
      [log (f datum)])))

(implementation: .public (apply monoid)
  (All [l]
    (-> (Monoid l) (Apply (Writer l))))
  
  (def: &functor ..functor)

  (def: (on fa ff)
    (let [[log1 f] ff
          [log2 a] fa]
      [(\ monoid compose log1 log2) (f a)])))

(implementation: .public (monad monoid)
  (All [l]
    (-> (Monoid l) (Monad (Writer l))))
  
  (def: &functor ..functor)

  (def: in
    (|>> [(\ monoid identity)]))

  (def: (join mma)
    (let [[log1 [log2 a]] mma]
      [(\ monoid compose log1 log2) a])))

(implementation: .public (with monoid monad)
  (All [l M] (-> (Monoid l) (Monad M) (Monad (All [a] (M (Writer l a))))))

  (def: &functor
    (functor.composite (value@ #monad.&functor monad)
                       ..functor))

  (def: in
    (let [writer (..monad monoid)]
      (|>> (\ writer in) (\ monad in))))
  
  (def: (join MlMla)
    (do monad
      [[l1 Mla] (for {@.old
                      (: ((:parameter 1) (Writer (:parameter 0) ((:parameter 1) (Writer (:parameter 0) (:parameter 2)))))
                         MlMla)}
                     ... On new compiler
                     MlMla)
       [l2 a] Mla]
      (in [(\ monoid compose l1 l2) a]))))

(def: .public (lifted monoid monad)
  (All [l M a]
    (-> (Monoid l) (Monad M)
        (-> (M a) (M (Writer l a)))))
  (\ monad map (|>> [(\ monoid identity)])))
