... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except with)
   [abstract
    [monoid (.only Monoid)]
    [apply (.only Apply)]
    ["[0]" functor (.only Functor)]
    ["[0]" monad (.only Monad do)]]
   [meta
    [compiler
     ["@" target]]]]])

(every .public (Writer log value)
  (Record
   [#log log
    #value value]))

(the .public (write message)
  (All (_ log) (-> log (Writer log Any)))
  [message []])

(the .public functor
  (All (_ l)
    (Functor (Writer l)))
  (implementation
   (the (each f fa)
     (let [[log datum] fa]
       [log (f datum)]))))

(the .public (apply monoid)
  (All (_ l)
    (-> (Monoid l) (Apply (Writer l))))
  (implementation
   (the functor ..functor)

   (the (on fa ff)
     (let [[log1 f] ff
           [log2 a] fa]
       [(of monoid composite log1 log2) (f a)]))))

(the .public (monad monoid)
  (All (_ l)
    (-> (Monoid l) (Monad (Writer l))))
  (implementation
   (the functor ..functor)

   (the in
     (|>> [(of monoid identity)]))

   (the (conjoint mma)
     (let [[log1 [log2 a]] mma]
       [(of monoid composite log1 log2) a]))))

(the .public (with monoid monad)
  (All (_ l M) (-> (Monoid l) (Monad M) (Monad (All (_ a) (M (Writer l a))))))
  (implementation
   (the functor
     (functor.composite (its monad.functor monad)
                        ..functor))

   (the in
     (let [writer (..monad monoid)]
       (|>> (of writer in) (of monad in))))
   
   (the (conjoint MlMla)
     (do monad
       [[l1 Mla] (for @.old
                      (is {.#Apply (Writer (parameter 0)
                                           {.#Apply (Writer (parameter 0)
                                                            (parameter 2))
                                                    (parameter 1)})
                                   (parameter 1)}
                          MlMla)
                      ... On new compiler
                      MlMla)
        [l2 a] Mla]
       (in [(of monoid composite l1 l2) a])))))

(the .public (lifted monoid monad)
  (All (_ l M a)
    (-> (Monoid l) (Monad M)
        (-> (M a) (M (Writer l a)))))
  (of monad each (|>> [(of monoid identity)])))
