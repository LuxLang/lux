... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except with)
   [abstract
    [monoid (.only Monoid)]
    ["[0]" functor (.only Functor)]
    ["[0]" monad (.only Monad do)]]]])

(every .public (Writer trace value)
  (Record
   [#trace trace
    #value value]))

(the .public (write message)
  (for_any (_ trace)
    (-> trace
        (Writer trace Any)))
  [message []])

(the .public functor
  (for_any (_ trace)
    (Functor (Writer trace)))
  (implementation
   (the (each f fa)
     (let [[trace datum] fa]
       [trace (f datum)]))))

(the .public (monad monoid)
  (for_any (_ trace)
    (-> (Monoid trace)
        (Monad (Writer trace))))
  (implementation
   (the functor ..functor)

   (the in
     (|>> [(by monoid identity)]))

   (the (conjoint mma)
     (let [[trace0 [trace1 a]] mma]
       [(by monoid composite trace0 trace1) a]))))

(every .public (With trace ! of)
  (! (Writer trace of)))

(the .public (with monoid monad)
  (for_any (_ ! trace)
    (-> (Monoid trace) (Monad !)
        (Monad (With trace !))))
  (implementation
   (the (functor it)
     (|> it
         (by ..functor each)
         (by monad each)))

   (the in
     (let [writer (..monad monoid)]
       (|>> (by writer in) (by monad in))))
   
   (the (conjoint MlMla)
     (do monad
       [[l0 Mla] MlMla
        [l1 a] Mla]
       (in [(by monoid composite l0 l1) a])))))

(the .public (lifted monoid monad)
  (for_any (_ ! trace of)
    (-> (Monoid trace) (Monad !)
        (-> (! of)
            (! (Writer trace of)))))
  (by monad each (|>> [(by monoid identity)])))
