(.using
 [library
  [lux "*"
   ["@" target]
   [abstract
    [monoid (.only Monoid)]
    [apply (.only Apply)]
    ["[0]" functor (.only Functor)]
    ["[0]" monad (.only Monad do)]]]])

(type: .public (Writer log value)
  (Record
   [#log log
    #value value]))

(def: .public (write message)
  (All (_ log) (-> log (Writer log Any)))
  [message []])

(implementation: .public functor
  (All (_ l)
    (Functor (Writer l)))
  
  (def: (each f fa)
    (let [[log datum] fa]
      [log (f datum)])))

(implementation: .public (apply monoid)
  (All (_ l)
    (-> (Monoid l) (Apply (Writer l))))
  
  (def: functor ..functor)

  (def: (on fa ff)
    (let [[log1 f] ff
          [log2 a] fa]
      [(# monoid composite log1 log2) (f a)])))

(implementation: .public (monad monoid)
  (All (_ l)
    (-> (Monoid l) (Monad (Writer l))))
  
  (def: functor ..functor)

  (def: in
    (|>> [(# monoid identity)]))

  (def: (conjoint mma)
    (let [[log1 [log2 a]] mma]
      [(# monoid composite log1 log2) a])))

(implementation: .public (with monoid monad)
  (All (_ l M) (-> (Monoid l) (Monad M) (Monad (All (_ a) (M (Writer l a))))))

  (def: functor
    (functor.composite (the monad.functor monad)
                       ..functor))

  (def: in
    (let [writer (..monad monoid)]
      (|>> (# writer in) (# monad in))))
  
  (def: (conjoint MlMla)
    (do monad
      [[l1 Mla] (for @.old
                     (is {.#Apply (Writer (parameter 0)
                                          {.#Apply (Writer (parameter 0)
                                                           (parameter 2))
                                                   (parameter 1)})
                                  (parameter 1)}
                         MlMla)
                     ... On new compiler
                     MlMla)
       [l2 a] Mla]
      (in [(# monoid composite l1 l2) a]))))

(def: .public (lifted monoid monad)
  (All (_ l M a)
    (-> (Monoid l) (Monad M)
        (-> (M a) (M (Writer l a)))))
  (# monad each (|>> [(# monoid identity)])))
