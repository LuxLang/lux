... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except with when or)
   [abstract
    [apply (.only Apply)]
    [equivalence (.only Equivalence)]
    ["[0]" functor (.only Functor)]
    ["[0]" monad (.only Monad do)]]
   [meta
    ["[0]" location]]]])

(every .public (Try of)
  (Variant
   {#Failure Text}
   {#Success of}))

(the .public functor
  (Functor Try)
  (implementation
   (the (each f ma)
     (.when ma
       {#Success datum}
       {#Success (f datum)}

       ... {#Failure msg}
       it
       (as_expected it)))))

(the .public apply
  (Apply Try)
  (implementation
   (the functor ..functor)

   (the (on fa ff)
     (.when ff
       {#Success f}
       (.when fa
         {#Success a}
         {#Success (f a)}

         ... {#Failure msg}
         it
         (as_expected it))

       ... {#Failure msg}
       it
       (as_expected it)))))

(the .public monad
  (Monad Try)
  (implementation
   (the functor ..functor)

   (the (in a)
     {#Success a})

   (the (conjoint mma)
     (.when mma
       {#Success ma}
       ma
       
       ... {#Failure msg}
       it
       (as_expected it)))))

(the .public (with monad)
  ... TODO: Replace (All (_ a) (! (Try a))) with (functor.Then ! Try)
  (All (_ !)
    (-> (Monad !)
        (Monad (All (_ of)
                 (! (Try of))))))
  (implementation
   (the functor
     (functor.composite (its monad.functor monad)
                        ..functor))

   (the in
     (|>> (of ..monad in)
          (of monad in)))
   
   (the (conjoint MeMea)
     (do monad
       [eMea MeMea]
       (.when eMea
         {#Success Mea}
         Mea
         
         ... {#Failure error}
         it
         (in (as_expected it)))))))

(the .public (lifted monad)
  (All (_ ! of)
    (-> (Monad !)
        (-> (! of)
            (! (Try of)))))
  (of monad each (of ..monad in)))

(the .public (equivalence (open "_#[0]"))
  (All (_ of)
    (-> (Equivalence of)
        (Equivalence (Try of))))
  (implementation
   (the (= reference sample)
     (.when [reference sample]
       [{#Success reference} {#Success sample}]
       (_#= reference sample)

       [{#Failure reference} {#Failure sample}]
       (.text_=# reference sample)

       _
       false
       ))))

(the .public (trusted try)
  (All (_ of)
    (-> (Try of)
        of))
  (.when try
    {#Success value}
    value

    {#Failure message}
    (panic! message)))

(the .public (maybe try)
  (All (_ of)
    (-> (Try of)
        (Maybe of)))
  (.when try
    {#Success value}
    {.#Some value}

    ... {#Failure message}
    _
    {.#None}))

(the .public (of_maybe maybe)
  (All (_ of)
    (-> (Maybe of)
        (Try of)))
  (.when maybe
    {.#Some value}
    {#Success value}

    {.#None}
    {#Failure ((.in_module# .prelude .symbol#encoded) (symbol ..of_maybe))}))

(the generated_symbol
  (macro (_ tokens compiler)
    (.when tokens
      (list [_ {.#Text prefix}])
      (let [generated_symbol (.in_module# .prelude .generated_symbol)]
        (.when (generated_symbol prefix compiler)
          {#Success [compiler 'it]}
          {#Success [compiler (list 'it)]}

          {#Failure error}
          {#Failure error}))

      _
      (undefined))))

(the .public else
  (with_expansions ['then (generated_symbol "'then")
                    'failure (generated_symbol "'failure")]
    (template (_ <else> <try>)
      [(.when <try>
         {..#Success 'then}
         'then

         ... {..#Failure 'failure}
         'failure
         <else>)])))

(the .public when
  (template (_ <test> <then>)
    [(if <test>
       <then>
       {..#Failure (let [symbol#encoded (.in_module# .prelude .symbol#encoded)]
                     (.text_composite# "[" (symbol#encoded (symbol ..when)) "]"
                                       " " "Invalid condition!"))})]))

(the .public or
  (template (_ ,left ,right)
    [(.when ,left
       {..#Success 'it}
       {..#Success 'it}

       {..#Failure 'error}
       ,right)]))
