... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except with when)
   [abstract
    [apply (.only Apply)]
    [equivalence (.only Equivalence)]
    ["[0]" functor (.only Functor)]
    ["[0]" monad (.only Monad do)]]
   [meta
    ["[0]" location]]]])

(type .public (Try a)
  (Variant
   {#Failure Text}
   {#Success a}))

(def .public functor
  (Functor Try)
  (implementation
   (def (each f ma)
     (.when ma
       {#Success datum}
       {#Success (f datum)}

       ... {#Failure msg}
       it
       (as_expected it)))))

(def .public apply
  (Apply Try)
  (implementation
   (def functor ..functor)

   (def (on fa ff)
     (.when ff
       {#Success f}
       (.when fa
         {#Success a}
         {#Success (f a)}

         ... {#Failure msg}
         it
         (as_expected it))

       ... {#Failure msg}
       it
       (as_expected it)))))

(def .public monad
  (Monad Try)
  (implementation
   (def functor ..functor)

   (def (in a)
     {#Success a})

   (def (conjoint mma)
     (.when mma
       {#Success ma}
       ma
       
       ... {#Failure msg}
       it
       (as_expected it)))))

(def .public (with monad)
  ... TODO: Replace (All (_ a) (! (Try a))) with (functor.Then ! Try)
  (All (_ !) (-> (Monad !) (Monad (All (_ a) (! (Try a))))))
  (implementation
   (def functor
     (functor.composite (the monad.functor monad)
                        ..functor))

   (def in
     (|>> (of ..monad in)
          (of monad in)))
   
   (def (conjoint MeMea)
     (do monad
       [eMea MeMea]
       (.when eMea
         {#Success Mea}
         Mea
         
         ... {#Failure error}
         it
         (in (as_expected it)))))))

(def .public (lifted monad)
  (All (_ ! a) (-> (Monad !) (-> (! a) (! (Try a)))))
  (of monad each (of ..monad in)))

(def .public (equivalence (open "_#[0]"))
  (All (_ a) (-> (Equivalence a) (Equivalence (Try a))))
  (implementation
   (def (= reference sample)
     (.when [reference sample]
       [{#Success reference} {#Success sample}]
       (_#= reference sample)

       [{#Failure reference} {#Failure sample}]
       (.text_=# reference sample)

       _
       false
       ))))

(def .public (trusted try)
  (All (_ a)
    (-> (Try a) a))
  (.when try
    {#Success value}
    value

    {#Failure message}
    (panic! message)))

(def .public (maybe try)
  (All (_ a)
    (-> (Try a) (Maybe a)))
  (.when try
    {#Success value}
    {.#Some value}

    ... {#Failure message}
    _
    {.#None}))

(def .public (of_maybe maybe)
  (All (_ a)
    (-> (Maybe a) (Try a)))
  (.when maybe
    {.#Some value}
    {#Success value}

    {.#None}
    {#Failure ((.in_module# .prelude .symbol#encoded) (symbol ..of_maybe))}))

(def generated_symbol
  (macro (_ tokens compiler)
    (.when tokens
      (list [_ {.#Text prefix}])
      (let [generated_symbol (.in_module# .prelude .generated_symbol)]
        (.when (generated_symbol prefix compiler)
          {#Success [compiler g!_]}
          {#Success [compiler (list g!_)]}

          {#Failure error}
          {#Failure error}))

      _
      (undefined))))

(def .public else
  (with_expansions [g!then (generated_symbol "g!then")
                    g!failure (generated_symbol "g!failure")]
    (template (_ <else> <try>)
      [(.when <try>
         {..#Success g!then}
         g!then

         ... {..#Failure g!failure}
         g!failure
         <else>)])))

(def .public when
  (template (_ <test> <then>)
    [(if <test>
       <then>
       {..#Failure (let [symbol#encoded (.in_module# .prelude .symbol#encoded)]
                     (.text_composite# "[" (symbol#encoded (symbol ..when)) "]"
                                       " " "Invalid condition!"))})]))
