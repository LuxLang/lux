... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except with when or as)
   [abstract
    [apply (.only Apply)]
    [equivalence (.only Equivalence)]
    ["[0]" functor (.only Functor)]
    ["[0]" monad (.only Monad
                        do)]]
   [control
    [function
     [predicate (.only Predicate)]]]]])

(the template#macro (.in_module# .prelude .template#macro))

(every .public (Try of)
  (Variant
   {#Failure Error}
   {#Success of}))

(the .public functor
  (Functor Try)
  (implementation
   (the (each f ma)
     (.when ma
       {#Success datum}
       {#Success (f datum)}

       failure
       (as_expected failure)))))

(the .public apply
  (Apply Try)
  (implementation
   (the functor ..functor)

   (the (on fa ff)
     (.when ff
       {#Success f}
       (.when fa
         {#Success a}
         {#Success (f a)}

         failure
         (as_expected failure))

       failure
       (as_expected failure)))))

(the .public monad
  (Monad Try)
  (implementation
   (the functor ..functor)

   (the (in a)
     {#Success a})

   (the (conjoint mma)
     (.when mma
       {#Success ma}
       ma
       
       failure
       (as_expected failure)))))

(every .public (With ! of)
  (! (Try of)))

(the .public (with monad)
  (for_any (_ !)
    (-> (Monad !)
        (Monad (With !))))
  (implementation
   (the (functor it)
     (|> it
         (by ..functor each)
         (by monad each)))

   (the in
     (|>> (by ..monad in)
          (by monad in)))
   
   (the (conjoint it)
     (do monad
       [it it]
       (.when it
         {#Success it}
         it
         
         failure
         (in (as_expected failure)))))))

(the .public (lifted monad)
  (for_any (_ ! of)
    (-> (Monad !)
        (-> (! of)
            (! (Try of)))))
  (by monad each (by ..monad in)))

(the .public (equivalence (open "/#[0]"))
  (for_any (_ of)
    (-> (Equivalence of)
        (Equivalence (Try of))))
  (implementation
   (the (= expected actual)
     (.when [expected actual]
       [{#Success expected} {#Success actual}]
       (/#= expected actual)

       [{#Failure expected} {#Failure actual}]
       (.text_=# expected actual)

       _
       false
       ))))

(the .public (trusted try)
  (for_any (_ of)
    (-> (Try of)
        of))
  (.when try
    {#Success value}
    value

    {#Failure message}
    (halt! message)))

(the .public (maybe try)
  (for_any (_ of)
    (-> (Try of)
        (Maybe of)))
  (.when try
    {#Success value}
    {.#Some value}

    failure
    {.#None}))

(the .public (of_maybe error maybe)
  (for_any (_ of)
    (-> Error (Maybe of)
        (Try of)))
  (.when maybe
    {.#Some value}
    {#Success value}

    {.#None}
    {#Failure error}))

(the generated_symbol
  (macro (_ tokens compiler)
    (.when tokens
      (list [_ {.#Text prefix}])
      (let [generated_symbol (.in_module# .prelude .generated_symbol)]
        (.when (generated_symbol prefix compiler)
          {#Success [compiler 'it]}
          {#Success [compiler (list 'it)]}

          {#Failure error}
          {#Failure error}))

      _
      (undefined))))

(the _expansion#let (.in_module# .prelude .expansion#let))

(the .public else
  (<| (_expansion#let ['then (generated_symbol "'then")
                       'failure (generated_symbol "'failure")])
      (template#macro
       (_ <else> <try>)
       [(.when <try>
          {..#Success 'then}
          'then

          'failure
          <else>)])))

(the .public when
  (template#macro
   (_ <test> <then>)
   [(.if <test>
      <then>
      {..#Failure (let [symbol#injection (.in_module# .prelude .symbol#injection)]
                    (.text_composite# "[" (symbol#injection (symbol ..when)) "]"
                                      " " "Invalid condition!"))})]))

(the .public or
  (<| (_expansion#let ['success (generated_symbol "'success")
                       'error (generated_symbol "'error")])
      (template#macro
       (_ ,left ,right)
       [(.when ,left
          {..#Failure 'error}
          ,right

          'success
          'success)])))

(the .public (as error it)
  (for_any (_ of)
    (-> Error (Try of)
        (Try of)))
  (.when it
    {..#Failure _}
    {..#Failure error}
    
    success
    success))

(the .public (is? expected it)
  (for_any (_ of)
    (-> Error
        (Predicate (Try of))))
  (.when it
    {..#Failure actual}
    (.text_=# expected actual)

    else
    false))
