... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except local with use)
   [abstract
    [functor (.only Functor)]
    [monad (.only Monad do)]]]])

(every .public (State state it)
  (-> state
      [state it]))

(the .public get
  (for_any (_ state)
    (State state state))
  (function (_ state)
    [state state]))

(the .public (put new_state)
  (for_any (_ state)
    (-> state
        (State state Any)))
  (function (_ state)
    [new_state []]))

(the .public (update change)
  (for_any (_ state)
    (-> (-> state state)
        (State state Any)))
  (function (_ state)
    [(change state) []]))

(the .public (use user)
  (for_any (_ state it)
    (-> (-> state it)
        (State state it)))
  (function (_ state)
    [state (user state)]))

(the .public (local change action)
  (for_any (_ state it)
    (-> (-> state state) (State state it)
        (State state it)))
  (function (_ state)
    (let [[state' output] (action (change state))]
      [state output])))

(the .public (value state action)
  (for_any (_ state it)
    (-> state (State state it)
        [state it]))
  (action state))

(the .public functor
  (for_any (_ state)
    (Functor (State state)))
  (implementation
   (the (each f ma)
     (function (_ state)
       (let [[state' a] (ma state)]
         [state' (f a)])))))

(the .public monad
  (for_any (_ state)
    (Monad (State state)))
  (implementation
   (the functor ..functor)

   (the (in a)
     (function (_ state)
       [state a]))

   (the (conjoint mma)
     (function (_ state)
       (let [[state' ma] (mma state)]
         (ma state'))))))

(the .public (while condition body)
  (for_any (_ state)
    (-> (State state Bit) (State state Any)
        (State state Any)))
  (do [! ..monad]
    [execute? condition]
    (if execute?
      (do !
        [_ body]
        (while condition body))
      (in []))))

(the .public (do_while condition body)
  (for_any (_ state)
    (-> (State state Bit) (State state Any)
        (State state Any)))
  (do ..monad
    [_ body]
    (while condition body)))

(every .public (With state ! it)
  (-> state
      (! [state it])))

(the (with//functor functor)
  (for_any (_ ! state)
    (-> (Functor !)
        (Functor (With state !))))
  (implementation
   (the (each f sfa)
     (function (_ state)
       (by functor each (function (_ [s a]) [s (f a)])
           (sfa state))))))

(the .public (value' state action)
  (for_any (_ ! state it)
    (-> state (With state ! it)
        (! [state it])))
  (action state))

(the .public (with monad)
  (for_any (_ ! state)
    (-> (Monad !)
        (Monad (With state !))))
  (implementation
   (the functor (with//functor (by monad functor)))

   (the (in a)
     (function (_ state)
       (by monad in [state a])))
   
   (the (conjoint sMsMa)
     (function (_ state)
       (do monad
         [[state' sMa] (sMsMa state)]
         (sMa state'))))))

(the .public (lifted monad ma)
  (for_any (_ ! state it)
    (-> (Monad !) (! it)
        (With state ! it)))
  (function (_ state)
    (do monad
      [a ma]
      (in [state a]))))
