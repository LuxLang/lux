(.using
 [library
  [lux {"-" local}
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    [monad (.only Monad do)]]]])

(type: .public (State s a)
  (-> s [s a]))

(def: .public get
  (All (_ s) (State s s))
  (function (_ state)
    [state state]))

(def: .public (put new_state)
  (All (_ s) (-> s (State s Any)))
  (function (_ state)
    [new_state []]))

(def: .public (update change)
  (All (_ s) (-> (-> s s) (State s Any)))
  (function (_ state)
    [(change state) []]))

(def: .public (use user)
  (All (_ s a) (-> (-> s a) (State s a)))
  (function (_ state)
    [state (user state)]))

(def: .public (local change action)
  (All (_ s a) (-> (-> s s) (State s a) (State s a)))
  (function (_ state)
    (let [[state' output] (action (change state))]
      [state output])))

(def: .public (result state action)
  (All (_ s a) (-> s (State s a) [s a]))
  (action state))

(implementation: .public functor
  (All (_ s) (Functor (State s)))
  
  (def: (each f ma)
    (function (_ state)
      (let [[state' a] (ma state)]
        [state' (f a)]))))

(implementation: .public apply
  (All (_ s) (Apply (State s)))
  
  (def: functor ..functor)

  (def: (on fa ff)
    (function (_ state)
      (let [[state' f] (ff state)
            [state'' a] (fa state')]
        [state'' (f a)]))))

(implementation: .public monad
  (All (_ s) (Monad (State s)))
  
  (def: functor ..functor)

  (def: (in a)
    (function (_ state)
      [state a]))

  (def: (conjoint mma)
    (function (_ state)
      (let [[state' ma] (mma state)]
        (ma state')))))

(def: .public (while condition body)
  (All (_ s) (-> (State s Bit) (State s Any) (State s Any)))
  (do [! ..monad]
    [execute? condition]
    (if execute?
      (do !
        [_ body]
        (while condition body))
      (in []))))

(def: .public (do_while condition body)
  (All (_ s) (-> (State s Bit) (State s Any) (State s Any)))
  (do ..monad
    [_ body]
    (while condition body)))

(implementation: (with//functor functor)
  (All (_ M s) (-> (Functor M) (Functor (All (_ a) (-> s (M [s a]))))))
  
  (def: (each f sfa)
    (function (_ state)
      (# functor each (function (_ [s a]) [s (f a)])
         (sfa state)))))

(implementation: (with//apply monad)
  (All (_ M s) (-> (Monad M) (Apply (All (_ a) (-> s (M [s a]))))))
  
  (def: functor (with//functor (# monad functor)))

  (def: (on sFa sFf)
    (function (_ state)
      (do monad
        [[state f] (sFf state)
         [state a] (sFa state)]
        (in [state (f a)])))))

(type: .public (+State M s a)
  (-> s (M [s a])))

(def: .public (result' state action)
  (All (_ M s a) (-> s (+State M s a) (M [s a])))
  (action state))

(implementation: .public (with monad)
  (All (_ M s) (-> (Monad M) (Monad (+State M s))))

  (def: functor (with//functor (# monad functor)))

  (def: (in a)
    (function (_ state)
      (# monad in [state a])))
  
  (def: (conjoint sMsMa)
    (function (_ state)
      (do monad
        [[state' sMa] (sMsMa state)]
        (sMa state')))))

(def: .public (lifted monad ma)
  (All (_ M s a) (-> (Monad M) (M a) (+State M s a)))
  (function (_ state)
    (do monad
      [a ma]
      (in [state a]))))
