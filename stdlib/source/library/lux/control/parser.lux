... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except or and not only)
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    [monad (.only Monad do)]
    [codec (.only Codec)]]
   [control
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]]]
   [meta
    ["[0]" location]]]])

(every .public (Parser state of)
  (-> state
      (Try [state of])))

(the .public functor
  (All (_ state)
    (Functor (Parser state)))
  (implementation
   (the (each f ma)
     (function (_ input)
       (when (ma input)
         {try.#Success [input' a]}
         {try.#Success [input' (f a)]}
         
         {try.#Failure msg}
         {try.#Failure msg})))))

(the .public apply
  (All (_ state)
    (Apply (Parser state)))
  (implementation
   (the functor ..functor)

   (the (on fa ff)
     (function (_ input)
       (when (ff input)
         {try.#Success [input' f]}
         (when (fa input')
           {try.#Success [input'' a]}
           {try.#Success [input'' (f a)]}

           {try.#Failure msg}
           {try.#Failure msg})

         {try.#Failure msg}
         {try.#Failure msg})))))

(the .public monad
  (All (_ state)
    (Monad (Parser state)))
  (implementation
   (the functor ..functor)

   (the (in x)
     (function (_ input)
       {try.#Success [input x]}))

   (the (conjoint mma)
     (function (_ input)
       (when (mma input)
         {try.#Success [input' ma]}
         (ma input')

         {try.#Failure msg}
         {try.#Failure msg})))))

(the .public (assertion message test)
  (All (_ state)
    (-> Text Bit
        (Parser state Any)))
  (function (_ input)
    (if test
      {try.#Success [input []]}
      {try.#Failure message})))

(the .public (maybe parser)
  (All (_ state of)
    (-> (Parser state of)
        (Parser state (Maybe of))))
  (function (_ input)
    (when (parser input)
      {try.#Success [input' x]}
      {try.#Success [input' {.#Some x}]}

      {try.#Failure _}
      {try.#Success [input {.#None}]})))

(the .public (value parser input)
  (All (_ state of)
    (-> (Parser state of) state
        (Try [state of])))
  (parser input))

(the .public (either this that)
  (All (_ state of)
    (-> (Parser state of) (Parser state of)
        (Parser state of)))
  (function (_ tokens)
    (when (this tokens)
      {try.#Failure _}
      (that tokens)
      
      success
      success)))

(with_expansions [<failure> {try.#Failure error}
                  <handle_failure!> (these <failure>
                                           <failure>)]
  (these (the .public (and left right)
           (All (_ state left right)
             (-> (Parser state left) (Parser state right)
                 (Parser state (And left right))))
           (function (_ state)
             (when (left state)
               {try.#Success [state left]}
               (when (right state)
                 {try.#Success [state right]}
                 {try.#Success [state [left right]]}
                 

                 <handle_failure!>)

               <handle_failure!>)))

         (the .public (or left right)
           (All (_ state left right)
             (-> (Parser state left) (Parser state right)
                 (Parser state (Or left right))))
           (function (_ tokens)
             (when (left tokens)
               {try.#Success [tokens' output]}
               {try.#Success [tokens' {0 #0 output}]}
               
               {try.#Failure _}
               (when (right tokens)
                 {try.#Success [tokens' output]}
                 {try.#Success [tokens' {0 #1 output}]}
                 
                 <handle_failure!>))))

         (the .public (some it)
           (All (_ state of)
             (-> (Parser state of)
                 (Parser state (List of))))
           (function (_ state)
             (loop (next [state state
                          output (list)])
               (when (it state)
                 {try.#Success [state head]}
                 (next state (list.partial head output))

                 {try.#Failure _}
                 {try.#Success [state (list.reversed output)]}))))

         (the .public (many parser)
           (All (_ state of)
             (-> (Parser state of)
                 (Parser state (List of))))
           (function (_ state)
             (when (parser state)
               {try.#Success [state head]}
               (when (..some parser state)
                 {try.#Success [state tail]}
                 {try.#Success [state {.#Item head tail}]}

                 <handle_failure!>)

               <handle_failure!>)))

         (the .public (after parameter it)
           (All (_ state _ of)
             (-> (Parser state _) (Parser state of)
                 (Parser state of)))
           (function (_ state)
             (when (parameter state)
               {try.#Success [state _]}
               (when (it state)
                 <handle_failure!>

                 success
                 success)

               <handle_failure!>)))

         (the .public (before parameter it)
           (All (_ state _ of)
             (-> (Parser state _) (Parser state of)
                 (Parser state of)))
           (function (_ state)
             (when (it state)
               {try.#Success [state it]}
               (when (parameter state)
                 {try.#Success [state _]}
                 {try.#Success [state it]}

                 <handle_failure!>)

               <handle_failure!>)))

         (the .public (of_try operation)
           (All (_ state of)
             (-> (Try of)
                 (Parser state of)))
           (function (_ input)
             (when operation
               {try.#Success output}
               {try.#Success [input output]}
               
               <handle_failure!>)))

         (the .public (parses parser)
           (All (_ state of)
             (-> (Parser state of)
                 (Parser state Any)))
           (function (_ input)
             (when (parser input)
               {try.#Success [input' _]}
               {try.#Success [input' []]}

               <handle_failure!>)))

         (the .public (codec codec parser)
           (All (_ state medium of)
             (-> (Codec medium of) (Parser state medium)
                 (Parser state of)))
           (function (_ input)
             (when (parser input)
               {try.#Success [input' to_decode]}
               (when (of codec decoded to_decode)
                 {try.#Success value}
                 {try.#Success [input' value]}

                 <handle_failure!>)

               <handle_failure!>))))
  )

(the .public (exactly amount parser)
  (All (_ state of)
    (-> Nat (Parser state of)
        (Parser state (List of))))
  (when amount
    0 (of ..monad in (list))
    _ (do [! ..monad]
        [x parser]
        (|> parser
            (exactly (-- amount))
            (of ! each (|>> {.#Item x}))))))

(the .public (at_least amount parser)
  (All (_ state of)
    (-> Nat (Parser state of)
        (Parser state (List of))))
  (do [! ..monad]
    [minimum (..exactly amount parser)]
    (of ! each (list#composite minimum) (..some parser))))

(the .public (at_most amount parser)
  (All (_ state of)
    (-> Nat (Parser state of)
        (Parser state (List of))))
  (when amount
    0 (of ..monad in (list))
    _ (function (_ input)
        (when (parser input)
          {try.#Success [input' x]}
          (..value (of ..monad each (|>> {.#Item x})
                       (at_most (-- amount) parser))
                   input')

          {try.#Failure msg}
          {try.#Success [input (list)]}))))

(the .public (between minimum additional parser)
  (All (_ state of)
    (-> Nat Nat (Parser state of)
        (Parser state (List of))))
  (do [! ..monad]
    [minimum (..exactly minimum parser)]
    (when additional
      0 (in minimum)
      _ (of ! each (list#composite minimum)
            (..at_most additional parser)))))

(the .public (separated_by separator parser)
  (All (_ state separator of)
    (-> (Parser state separator) (Parser state of)
        (Parser state (List of))))
  (do [! ..monad]
    [?x (..maybe parser)]
    (when ?x
      {.#Some x}
      (|> parser
          (..and separator)
          ..some
          (of ! each (|>> (list#each product.right) {.#Item x})))

      {.#None}
      (in {.#End}))))

(the .public did_not_fail
  Error
  (location.with (location.here)
    "Expected to fail; yet succeeded."))

(the .public (not parser)
  (All (_ state of)
    (-> (Parser state of)
        (Parser state Any)))
  (function (_ input)
    (when (parser input)
      {try.#Failure msg}
      {try.#Success [input []]}
      
      _
      {try.#Failure ..did_not_fail})))

(the .public (failure message)
  (All (_ state of)
    (-> Text
        (Parser state of)))
  (function (_ input)
    {try.#Failure message}))

(the .public (else value parser)
  (All (_ state of)
    (-> of (Parser state of)
        (Parser state of)))
  (function (_ input)
    (when (parser input)
      {try.#Failure error}
      {try.#Success [input value]}

      success
      success)))

(the .public remaining
  (All (_ state)
    (Parser state state))
  (function (_ inputs)
    {try.#Success [inputs inputs]}))

(the .public (rec parser)
  (All (_ state of)
    (-> (-> (Parser state of)
            (Parser state of))
        (Parser state of)))
  (function (_ inputs)
    (..value (parser (rec parser))
             inputs)))

(the .public (only test parser)
  (All (_ state of)
    (-> (-> of Bit) (Parser state of)
        (Parser state of)))
  (do ..monad
    [output parser
     _ (..assertion "Constraint failed." (test output))]
    (in output)))

(the .public (parses? parser)
  (All (_ state of)
    (-> (Parser state of)
        (Parser state Bit)))
  (function (_ input)
    (when (parser input)
      {try.#Success [input' _]}
      {try.#Success [input' true]}

      {try.#Failure error}
      {try.#Success [input false]})))

(the .public (speculative parser)
  (All (_ state of)
    (-> (Parser state of)
        (Parser state of)))
  (function (_ input)
    (when (parser input)
      {try.#Success [input' output]}
      {try.#Success [input output]}

      failure
      failure)))
