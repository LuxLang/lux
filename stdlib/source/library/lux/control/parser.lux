... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except or and not only)
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    [monad (.only Monad do)]
    [codec (.only Codec)]]
   [control
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]]]]])

(type .public (Parser state of)
  (-> state
      (Try [state of])))

(def .public functor
  (All (_ state)
    (Functor (Parser state)))
  (implementation
   (def (each f ma)
     (function (_ input)
       (when (ma input)
         {try.#Success [input' a]}
         {try.#Success [input' (f a)]}
         
         {try.#Failure msg}
         {try.#Failure msg})))))

(def .public apply
  (All (_ state)
    (Apply (Parser state)))
  (implementation
   (def functor ..functor)

   (def (on fa ff)
     (function (_ input)
       (when (ff input)
         {try.#Success [input' f]}
         (when (fa input')
           {try.#Success [input'' a]}
           {try.#Success [input'' (f a)]}

           {try.#Failure msg}
           {try.#Failure msg})

         {try.#Failure msg}
         {try.#Failure msg})))))

(def .public monad
  (All (_ state)
    (Monad (Parser state)))
  (implementation
   (def functor ..functor)

   (def (in x)
     (function (_ input)
       {try.#Success [input x]}))

   (def (conjoint mma)
     (function (_ input)
       (when (mma input)
         {try.#Success [input' ma]}
         (ma input')

         {try.#Failure msg}
         {try.#Failure msg})))))

(def .public (assertion message test)
  (All (_ state)
    (-> Text Bit
        (Parser state Any)))
  (function (_ input)
    (if test
      {try.#Success [input []]}
      {try.#Failure message})))

(def .public (maybe parser)
  (All (_ state of)
    (-> (Parser state of)
        (Parser state (Maybe of))))
  (function (_ input)
    (when (parser input)
      {try.#Success [input' x]}
      {try.#Success [input' {.#Some x}]}

      {try.#Failure _}
      {try.#Success [input {.#None}]})))

(def .public (result parser input)
  (All (_ state of)
    (-> (Parser state of) state
        (Try [state of])))
  (parser input))

(def .public (and left right)
  (All (_ state left right)
    (-> (Parser state left) (Parser state right)
        (Parser state (And left right))))
  (do [! ..monad]
    [head left]
    (of ! each (|>> [head]) right)))

(def .public (or left right)
  (All (_ state left right)
    (-> (Parser state left) (Parser state right)
        (Parser state (Or left right))))
  (function (_ tokens)
    (when (left tokens)
      {try.#Success [tokens' output]}
      {try.#Success [tokens' {0 #0 output}]}
      
      {try.#Failure _}
      (when (right tokens)
        {try.#Success [tokens' output]}
        {try.#Success [tokens' {0 #1 output}]}
        
        {try.#Failure error}
        {try.#Failure error}))))

(def .public (either this that)
  (All (_ state of)
    (-> (Parser state of) (Parser state of)
        (Parser state of)))
  (function (_ tokens)
    (when (this tokens)
      {try.#Failure _}
      (that tokens)
      
      success
      success)))

(def .public (some parser)
  (All (_ state of)
    (-> (Parser state of)
        (Parser state (List of))))
  (function (_ input)
    (when (parser input)
      {try.#Success [input' head]}
      (..result (of ..monad each (|>> (list.partial head))
                    (some parser))
                input')

      {try.#Failure _}
      {try.#Success [input (list)]})))

(def .public (many parser)
  (All (_ state of)
    (-> (Parser state of)
        (Parser state (List of))))
  (|> (..some parser)
      (..and parser)
      (of ..monad each (|>> {.#Item}))))

(def .public (exactly amount parser)
  (All (_ state of)
    (-> Nat (Parser state of)
        (Parser state (List of))))
  (when amount
    0 (of ..monad in (list))
    _ (do [! ..monad]
        [x parser]
        (|> parser
            (exactly (-- amount))
            (of ! each (|>> {.#Item x}))))))

(def .public (at_least amount parser)
  (All (_ state of)
    (-> Nat (Parser state of)
        (Parser state (List of))))
  (do [! ..monad]
    [minimum (..exactly amount parser)]
    (of ! each (list#composite minimum) (..some parser))))

(def .public (at_most amount parser)
  (All (_ state of)
    (-> Nat (Parser state of)
        (Parser state (List of))))
  (when amount
    0 (of ..monad in (list))
    _ (function (_ input)
        (when (parser input)
          {try.#Success [input' x]}
          (..result (of ..monad each (|>> {.#Item x})
                        (at_most (-- amount) parser))
                    input')

          {try.#Failure msg}
          {try.#Success [input (list)]}))))

(def .public (between minimum additional parser)
  (All (_ state of)
    (-> Nat Nat (Parser state of)
        (Parser state (List of))))
  (do [! ..monad]
    [minimum (..exactly minimum parser)]
    (when additional
      0 (in minimum)
      _ (of ! each (list#composite minimum)
            (..at_most additional parser)))))

(def .public (separated_by separator parser)
  (All (_ state separator of)
    (-> (Parser state separator) (Parser state of)
        (Parser state (List of))))
  (do [! ..monad]
    [?x (..maybe parser)]
    (when ?x
      {.#Some x}
      (|> parser
          (..and separator)
          ..some
          (of ! each (|>> (list#each product.right) {.#Item x})))

      {.#None}
      (in {.#End}))))

(def .public (not parser)
  (All (_ state of)
    (-> (Parser state of)
        (Parser state Any)))
  (function (_ input)
    (when (parser input)
      {try.#Failure msg}
      {try.#Success [input []]}
      
      _
      {try.#Failure "Expected to fail; yet succeeded."})))

(def .public (failure message)
  (All (_ state of)
    (-> Text
        (Parser state of)))
  (function (_ input)
    {try.#Failure message}))

(def .public (of_try operation)
  (All (_ state of)
    (-> (Try of)
        (Parser state of)))
  (function (_ input)
    (when operation
      {try.#Success output}
      {try.#Success [input output]}
      
      {try.#Failure error}
      {try.#Failure error})))

(def .public (else value parser)
  (All (_ state of)
    (-> of (Parser state of)
        (Parser state of)))
  (function (_ input)
    (when (parser input)
      {try.#Failure error}
      {try.#Success [input value]}

      success
      success)))

(def .public remaining
  (All (_ state)
    (Parser state state))
  (function (_ inputs)
    {try.#Success [inputs inputs]}))

(def .public (rec parser)
  (All (_ state of)
    (-> (-> (Parser state of)
            (Parser state of))
        (Parser state of)))
  (function (_ inputs)
    (..result (parser (rec parser)) inputs)))

(def .public (after param subject)
  (All (_ state _ of)
    (-> (Parser state _) (Parser state of)
        (Parser state of)))
  (do ..monad
    [_ param]
    subject))

(def .public (before param subject)
  (All (_ state _ of)
    (-> (Parser state _) (Parser state of)
        (Parser state of)))
  (do ..monad
    [output subject
     _ param]
    (in output)))

(def .public (only test parser)
  (All (_ state of)
    (-> (-> of Bit) (Parser state of)
        (Parser state of)))
  (do ..monad
    [output parser
     _ (..assertion "Constraint failed." (test output))]
    (in output)))

(def .public (parses? parser)
  (All (_ state of)
    (-> (Parser state of)
        (Parser state Bit)))
  (function (_ input)
    (when (parser input)
      {try.#Success [input' _]}
      {try.#Success [input' true]}

      {try.#Failure error}
      {try.#Success [input false]})))

(def .public (parses parser)
  (All (_ state of)
    (-> (Parser state of)
        (Parser state Any)))
  (function (_ input)
    (when (parser input)
      {try.#Success [input' _]}
      {try.#Success [input' []]}

      {try.#Failure error}
      {try.#Failure error})))

(def .public (speculative parser)
  (All (_ state of)
    (-> (Parser state of)
        (Parser state of)))
  (function (_ input)
    (when (parser input)
      {try.#Success [input' output]}
      {try.#Success [input output]}

      failure
      failure)))

(def .public (codec codec parser)
  (All (_ state medium of)
    (-> (Codec medium of) (Parser state medium)
        (Parser state of)))
  (function (_ input)
    (when (parser input)
      {try.#Success [input' to_decode]}
      (when (of codec decoded to_decode)
        {try.#Success value}
        {try.#Success [input' value]}

        {try.#Failure error}
        {try.#Failure error})

      {try.#Failure error}
      {try.#Failure error})))
