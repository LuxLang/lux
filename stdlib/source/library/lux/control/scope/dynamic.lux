... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Bindings Scope
                let the)
   ["[0]" debug]
   [abstract
    ["[0]" monad (.only do)]]
   [control
    [scope (.only Scope)]
    ["?" projection]
    ["[0]" function]
    ["[0]" maybe]]
   [data
    [collection
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" list (.use "[1]#[0]" mix)]]]
   ["[0]" meta (.only)
    ["[0]" symbol]
    ["[0]" code (.only)
     ["?[1]" \\projection]]
    ["[0]" macro (.only)
     [syntax (.only syntax)
      ["[0]" export]]]
    [type
     ["[0]" nominal]]]]])

(nominal.every Bindings
  (Dictionary Symbol Any)

  ... https://en.wikipedia.org/wiki/Scope_(computer_science)#Dynamic_scope
  (every .public Dynamic
    (Scope Bindings))

  (.the .public value
    (for_any (_ of)
      (-> (Dynamic of)
          of))
    (function.on (<| nominal.abstraction
                     (dictionary.empty symbol.hash))))

  (.the of_bindings
    (-> Bindings
        (Dictionary Symbol Any))
    (|>> nominal.representation))

  (.the .public the
    (syntax (_ [[policy name] (export.with ?code.local)
                type ?code.any
                term ?code.any])
      (do meta.monad
        [here meta.current_module_name
         macro.with_symbols ['default 'token]]
        (in (list (` (.the (, policy) (, (code.local name))
                       (Dynamic (, type))
                       (.let [(, 'default) (, term)
                              (, 'token) (is Symbol
                                             [(, (code.text here)) (, (code.text name))])]
                         (|>> ((debug.private ..of_bindings))
                              (dictionary.value (, 'token))
                              (as (Maybe (, type)))
                              (maybe.else (, 'default)))))))))))
  
  (.the (let' name value _ term)
    (for_any (_ of term)
      (-> Symbol of (Dynamic of) (Dynamic term)
          (Dynamic term)))
    (|>> nominal.representation
         (dictionary.has name value)
         nominal.abstraction
         term))

  (.the .public let
    (syntax (_ [bindings (?code.tuple (?.some (?.and ?code.symbol ?code.any)))
                term ?code.any])
      (do [! meta.monad]
        [bindings (monad.each ! (function (_ [name value])
                                  (do !
                                    [name (meta.normal name)]
                                    (in [name value])))
                              bindings)]
        (in (list (list#mix (function (_ [name value] term)
                              (.let ['name (code.symbol name)]
                                (` ((debug.private ..let')
                                    (symbol (, 'name))
                                    (, value)
                                    (, 'name)
                                    (, term)))))
                            term
                            (list.reversed bindings)))))))
  )
