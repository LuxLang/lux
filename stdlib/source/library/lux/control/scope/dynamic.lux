... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Bindings Scope
                let the)
   ["[0]" debug]
   [abstract
    ["?" projection]
    ["[0]" monad]]
   [control
    [scope (.only Scope)]
    ["[0]" maybe]]
   ["[0]" function]
   [data
    [collection
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" list (.use "[1]:[0]" mix)
      ["?[1]" \\projection]]]]
   ["[0]" macro (.only)
    ["[0]" syntax (.only)
     ["[0]" export]]]
   [type
    ["[0]" nominal]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" binding]
    ["[0]" name]
    ["[0]" code (.only)
     ["?[1]" \\projection]]]]])

(nominal.every Bindings
  (Dictionary Name Any)

  ... https://en.wikipedia.org/wiki/Scope_(computer_science)#Dynamic_scope
  (every .public Dynamic
    (Scope Bindings))

  (.the .public value
    (for_any (_ it)
      (-> (Dynamic it)
          it))
    (function.of (<| nominal.of
                     (dictionary.empty name.hash))))

  (.the of_bindings
    (-> Bindings
        (Dictionary Name Any))
    (|>> nominal.as))

  (syntax.the .public (the [[policy name] (export.with ?code.local)
                            type ?list.any
                            term ?list.any])
    (monad.let meta.monad
      [[here _] module.current
       macro.with_names ['default 'token]]
      (pure (list (` (.the (, policy) (, (code.local name))
                       (Dynamic (, type))
                       (.let [(, 'default) (, term)
                              (, 'token) (is Name
                                             [(, (code.text here)) (, (code.text name))])]
                         (|>> ((debug.private ..of_bindings))
                              (dictionary.value (, 'token))
                              (as (-> Any (Maybe (, type))))
                              (maybe.else (, 'default))))))))))
  
  (.the (let' name value _ term)
    (for_any (_ it term)
      (-> Name it (Dynamic it) (Dynamic term)
          (Dynamic term)))
    (|>> nominal.as
         (dictionary.has name value)
         nominal.of
         term))

  (syntax.the .public (let [bindings (?code.tuple (?.some (?.and ?code.name ?list.any)))
                            term ?list.any])
    (monad.let [! meta.monad]
      [bindings (list.each' ! (function (_ [name value])
                                (monad.let !
                                  [name (binding.normal name)]
                                  (pure [name value])))
                            bindings)]
      (pure (list (list:mix (function (_ [name value] term)
                              (.let ['name (code.name name)]
                                (` ((debug.private ..let')
                                    (name (, 'name))
                                    (, value)
                                    (, 'name)
                                    (, term)))))
                            term
                            (list.in_reverse bindings))))))
  )
