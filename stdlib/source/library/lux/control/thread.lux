... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    [monad (.only Monad do)]]
   [control
    ["[0]" io (.only IO)]]
   [data
    [collection
     ["[0]" array
      ["[1]" \\unsafe (.only Array)]]]]
   [meta
    [type
     ["[0]" nominal]
     ["[0]" variance (.only Mutable)]]]]])

(every .public (Thread ! a)
  (-> ! a))

(nominal.every (Box'' t a)
  (Array a)

  (every .public (Box' t r w)
    (Box'' t (Mutable r w)))

  (every .public (Box t a)
    (Box'' t (Mutable a a)))

  (the .public (box init)
    (All (_ a) (-> a (All (_ !) (Thread ! (Box ! a)))))
    (function (_ !)
      (|> (array.empty 1)
          (array.has! 0 (variance.write init))
          nominal.abstraction)))

  (the .public (read! box)
    (All (_ ! r w) (-> (Box' ! r w) (Thread ! r)))
    (function (_ !)
      (|> box
          nominal.representation
          (array.item 0)
          variance.read)))

  (the .public (write! value box)
    (All (_ r w) (-> w (All (_ !) (-> (Box' ! r w) (Thread ! Any)))))
    (function (_ !)
      (|> box
          nominal.representation
          (array.has! 0 (variance.write value))
          nominal.abstraction)))
  )

(the .public (value thread)
  (All (_ a)
    (-> (All (_ !) (Thread ! a))
        a))
  (thread []))

(the .public io
  (All (_ a)
    (-> (All (_ !) (Thread ! a))
        (IO a)))
  (|>> ..value io.io))

(the .public functor
  (All (_ !) (Functor (Thread !)))
  (implementation
   (the (each f)
     (function (_ fa)
       (function (_ !)
         (f (fa !)))))))

(the .public apply
  (All (_ !) (Apply (Thread !)))
  (implementation
   (the functor ..functor)

   (the (on fa ff)
     (function (_ !)
       ((ff !) (fa !))))))

(the .public monad
  (All (_ !) (Monad (Thread !)))
  (implementation
   (the functor ..functor)

   (the (in value)
     (function (_ !)
       value))

   (the (conjoint ffa)
     (function (_ !)
       ((ffa !) !)))))

(the .public (update! f box)
  (All (_ ! r w) (-> (-> r w) (Box' ! r w) (Thread ! [r w])))
  (do ..monad
    [old (read! box)
     .let [new (f old)]
     _ (write! new box)]
    (in [old new])))
