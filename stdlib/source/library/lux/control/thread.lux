... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    [monad (.only Monad do)]]
   [control
    ["[0]" io (.only IO)]]
   [data
    [collection
     ["[0]" array
      ["[1]" \\unsafe]]]]
   [type
    ["[0]" nominal]
    ["[0]" variance (.only Mutable)]]]])

(every .public (Thread thread it)
  (-> thread
      it))

(nominal.every (Box' thread r w)
  (Array (Mutable r w))

  (every .public (Box thread it)
    (Box' thread it it))

  (the .public (box init)
    (for_any (_ it)
      (-> it
          (for_any (_ thread)
            (Thread thread (Box thread it)))))
    (function (_ thread)
      (|> (array.empty 1)
          (array.has! 0 (variance.write init))
          nominal.abstraction)))

  (the .public (read! box)
    (for_any (_ thread to_read to_write)
      (-> (Box' thread to_read to_write)
          (Thread thread to_read)))
    (function (_ thread)
      (|> box
          nominal.reification
          (array.item 0)
          variance.read)))

  (the .public (write! value box)
    (for_any (_ to_read to_write)
      (-> to_write
          (for_any (_ thread)
            (-> (Box' thread to_read to_write)
                (Thread thread Any)))))
    (function (_ thread)
      (|> box
          nominal.reification
          (array.has! 0 (variance.write value))
          nominal.abstraction)))
  )

(the .public (value thread)
  (for_any (_ it thread)
    (-> (Thread thread it)
        it))
  (thread (as_expected [])))

(the .public io
  (for_any (_ it thread)
    (-> (Thread thread it)
        (IO it)))
  (|>> ..value
       io.io))

(the .public functor
  (for_any (_ thread)
    (Functor (Thread thread)))
  (implementation
   (the (each f)
     (function (_ fa)
       (function (_ thread)
         (f (fa thread)))))))

(the .public monad
  (for_any (_ thread)
    (Monad (Thread thread)))
  (implementation
   (the functor ..functor)

   (the (pure value)
     (function (_ thread)
       value))

   (the (conjoint ffa)
     (function (_ thread)
       ((ffa thread) thread)))))

(the .public (update! change box)
  (for_any (_ to_read to_write)
    (-> (-> to_read to_write)
        (for_any (_ thread)
          (-> (Box' thread to_read to_write)
              (Thread thread [to_read to_write])))))
  (do ..monad
    [old (read! box)
     .let [new (change old)]
     _ (write! new box)]
    (pure [old new])))
