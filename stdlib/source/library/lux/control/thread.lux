(.using
 [library
  [lux "*"
   ["@" target]
   [abstract
    [functor {"+" Functor}]
    [apply {"+" Apply}]
    [monad {"+" Monad do}]]
   [control
    ["[0]" io {"+" IO}]]
   [data
    [collection
     ["[0]" array "_"
      ["[1]" \\unsafe {"+" Array}]]]]
   [type
    [abstract {"-" pattern}]
    ["[0]" variance {"+" Mutable}]]]])

(type: .public (Thread ! a)
  (-> ! a))

(abstract: .public (Box'' t a)
  (Array a)

  (type: .public (Box' t r w)
    (Box'' t (Mutable r w)))

  (type: .public (Box t a)
    (Box'' t (Mutable a a)))

  (def: .public (box init)
    (All (_ a) (-> a (All (_ !) (Thread ! (Box ! a)))))
    (function (_ !)
      (|> (array.empty 1)
          (array.has! 0 (variance.write init))
          abstraction)))

  (def: .public (read! box)
    (All (_ ! r w) (-> (Box' ! r w) (Thread ! r)))
    (function (_ !)
      (|> box
          representation
          (array.item 0)
          variance.read)))

  (def: .public (write! value box)
    (All (_ r w) (-> w (All (_ !) (-> (Box' ! r w) (Thread ! Any)))))
    (function (_ !)
      (|> box
          representation
          (array.has! 0 (variance.write value))
          abstraction)))
  )

(def: .public (result thread)
  (All (_ a)
    (-> (All (_ !) (Thread ! a))
        a))
  (thread []))

(def: .public io
  (All (_ a)
    (-> (All (_ !) (Thread ! a))
        (IO a)))
  (|>> ..result io.io))

(implementation: .public functor
  (All (_ !) (Functor (Thread !)))

  (def: (each f)
    (function (_ fa)
      (function (_ !)
        (f (fa !))))))

(implementation: .public apply
  (All (_ !) (Apply (Thread !)))

  (def: &functor ..functor)

  (def: (on fa ff)
    (function (_ !)
      ((ff !) (fa !)))))

(implementation: .public monad
  (All (_ !) (Monad (Thread !)))

  (def: &functor ..functor)

  (def: (in value)
    (function (_ !)
      value))

  (def: (conjoint ffa)
    (function (_ !)
      ((ffa !) !))))

(def: .public (update! f box)
  (All (_ ! r w) (-> (-> r w) (Box' ! r w) (Thread ! [r w])))
  (do ..monad
    [old (read! box)
     .let [new (f old)]
     _ (write! new box)]
    (in [old new])))
