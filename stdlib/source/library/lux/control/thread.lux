(.module:
  [library
   [lux #*
    ["@" target]
    [abstract
     [functor (#+ Functor)]
     [apply (#+ Apply)]
     [monad (#+ Monad do)]]
    [control
     ["." io (#+ IO)]]
    [data
     [collection
      ["." array (#+ Array)]]]
    [type
     abstract]]])

(type: .public (Thread ! a)
  (-> ! a))

(abstract: .public (Box t v)
  {}

  (Array v)

  (def: .public (box init)
    (All [a] (-> a (All [!] (Thread ! (Box ! a)))))
    (function (_ !)
      (|> (array.empty 1)
          (array.write! 0 init)
          :abstraction)))

  (def: .public (read! box)
    (All [! a] (-> (Box ! a) (Thread ! a)))
    (function (_ !)
      (for {@.old
            ("jvm aaload" (:representation box) 0)

            @.jvm
            ("jvm array read object"
             (|> 0
                 (:as (primitive "java.lang.Long"))
                 "jvm object cast"
                 "jvm conversion long-to-int")
             (:representation box))

            @.js ("js array read" 0 (:representation box))
            @.python ("python array read" 0 (:representation box))
            @.lua ("lua array read" 0 (:representation box))
            @.ruby ("ruby array read" 0 (:representation box))
            @.php ("php array read" 0 (:representation box))
            @.scheme ("scheme array read" 0 (:representation box))})))

  (def: .public (write! value box)
    (All [a] (-> a (All [!] (-> (Box ! a) (Thread ! Any)))))
    (function (_ !)
      (|> box :representation (array.write! 0 value) :abstraction)))
  )

(def: .public (result thread)
  (All [a]
    (-> (All [!] (Thread ! a))
        a))
  (thread []))

(def: .public io
  (All [a]
    (-> (All [!] (Thread ! a))
        (IO a)))
  (|>> ..result io.io))

(implementation: .public functor
  (All [!] (Functor (Thread !)))

  (def: (map f)
    (function (_ fa)
      (function (_ !)
        (f (fa !))))))

(implementation: .public apply
  (All [!] (Apply (Thread !)))

  (def: &functor ..functor)

  (def: (apply ff fa)
    (function (_ !)
      ((ff !) (fa !)))))

(implementation: .public monad
  (All [!] (Monad (Thread !)))

  (def: &functor ..functor)

  (def: (in value)
    (function (_ !)
      value))

  (def: (join ffa)
    (function (_ !)
      ((ffa !) !))))

(def: .public (update! f box)
  (All [a !] (-> (-> a a) (Box ! a) (Thread ! a)))
  (do ..monad
    [old (read! box)
     _ (write! (f old) box)]
    (in old)))
