(.require
 [library
  [lux (.except Alias if loop left right)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" maybe (.use "[1]#[0]" monad)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix functor)]]]
   [math
    [number
     ["n" nat]
     ["i" int]
     ["r" rev]
     ["f" frac]]]
   ["[0]" meta (.only)
    ["[0]" type]
    ["[0]" code (.only)
     ["<[1]>" \\parser (.only Parser)]]
    ["[0]" macro (.only with_symbols)
     [syntax (.only syntax)]
     ["[0]" template]]]]]
 [//
  ["<>" parser (.use "[1]#[0]" monad)]])

(type Stack
  (Record
   [#bottom (Maybe Code)
    #top (List Code)]))

(def top
  (Parser (List Code))
  (<code>.tuple (<>.some <code>.any)))

(def bottom
  (Parser Code)
  (<code>.not ..top))

(def stack
  (Parser Stack)
  (<>.either (<>.and (<>.maybe bottom)
                     ..top)
             (<>.and (<>#each (|>> {.#Some}) bottom)
                     (<>#in (list)))))

(def (stack_type tops bottom)
  (-> (List Code) Code Code)
  (list#mix (function (_ top bottom)
              (` [(, bottom) (, top)]))
            bottom
            tops))

(def .public =>
  (syntax (_ [inputs stack
              outputs stack])
    (with_symbols [g!_ common_bottom]
      (let [input_bottom (maybe.else common_bottom (the #bottom inputs))
            output_bottom (maybe.else common_bottom (the #bottom outputs))
            input_stack (stack_type (the #top inputs) input_bottom)
            output_stack (stack_type (the #top outputs) output_bottom)]
        (in (list (.if (or (same? common_bottom input_bottom)
                           (same? common_bottom output_bottom))
                    (` (All ((, g!_) (, common_bottom))
                         (-> (, input_stack)
                             (, output_stack))))
                    (` (-> (, input_stack)
                           (, output_stack))))))))))

(def .public (value it)
  (All (_ ,,, a)
    (-> (=> []
            ,,, [a])
        a))
  (|> [] it product.right))

(def .public apply
  (syntax (_ [arity (<>.only (n.> 0) <code>.nat)])
    (with_symbols [g!_ g!func g!stack g!output]
      (monad.do [! meta.monad]
        [g!inputs (|> (macro.symbol "input") (list.repeated arity) (monad.all !))]
        (in (list (` (is (All ((, g!_) (,* g!inputs) (, g!output))
                           (-> (-> (,* g!inputs) (, g!output))
                               (=> [(,* g!inputs)] [(, g!output)])))
                         (function ((, g!_) (, g!func))
                           (function ((, g!_) (, (stack_type g!inputs g!stack)))
                             [(, g!stack) ((, g!func) (,* g!inputs))]))))))))))

(with_template [<arity>]
  [(`` (def .public (,, (template.symbol ["apply_" <arity>]))
         (..apply <arity>)))]

  [1] [2] [3] [4]
  [5] [6] [7] [8]
  )

(def .public (push x)
  (All (_ a) (-> a (=> [] [a])))
  (function (_ stack)
    [stack x]))

(def .public drop
  (All (_ t) (=> [t] []))
  (function (_ [stack top])
    stack))

(def .public nip
  (All (_ _ a) (=> [_ a] [a]))
  (function (_ [[stack _] top])
    [stack top]))

(def .public dup
  (All (_ a) (=> [a] [a a]))
  (function (_ [stack top])
    [[stack top] top]))

(def .public swap
  (All (_ a b) (=> [a b] [b a]))
  (function (_ [[stack l] r])
    [[stack r] l]))

(def .public left_rotation
  (All (_ a b c) (=> [a b c] [b c a]))
  (function (_ [[[stack a] b] c])
    [[[stack b] c] a]))

(def .public right_rotation
  (All (_ a b c) (=> [a b c] [c a b]))
  (function (_ [[[stack a] b] c])
    [[[stack c] a] b]))

(def .public &&
  (All (_ a b) (=> [a b] [(Tuple a b)]))
  (function (_ [[stack l] r])
    [stack [l r]]))

(def .public left
  (All (_ a b) (=> [a] [(Or a b)]))
  (function (_ [stack l])
    [stack {0 #0 l}]))

(def .public right
  (All (_ a b) (=> [b] [(Or a b)]))
  (function (_ [stack r])
    [stack {0 #1 r}]))

(with_template [<input> <output> <word> <func>]
  [(`` (def .public <word>
         (=> [<input> <input>] [<output>])
         (function (_ [[stack subject] param])
           [stack (<func> param subject)])))]

  [Nat Nat  n/+  n.+]
  [Nat Nat  n/-  n.-]
  [Nat Nat  n/*  n.*]
  [Nat Nat  n//  n./]
  [Nat Nat  n/%  n.%]
  [Nat Bit  n/=  n.=]
  [Nat Bit  n/<  n.<]
  [Nat Bit  n/<= n.<=]
  [Nat Bit  n/>  n.>]
  [Nat Bit  n/>= n.>=]

  [Int Int  i/+  i.+]
  [Int Int  i/-  i.-]
  [Int Int  i/*  i.*]
  [Int Int  i//  i./]
  [Int Int  i/%  i.%]
  [Int Bit  i/=  i.=]
  [Int Bit  i/<  i.<]
  [Int Bit  i/<= i.<=]
  [Int Bit  i/>  i.>]
  [Int Bit  i/>= i.>=]

  [Rev Rev  r/+  r.+]
  [Rev Rev  r/-  r.-]
  [Rev Rev  r/*  r.*]
  [Rev Rev  r//  r./]
  [Rev Rev  r/%  r.%]
  [Rev Bit  r/=  r.=]
  [Rev Bit  r/<  r.<]
  [Rev Bit  r/<= r.<=]
  [Rev Bit  r/>  r.>]
  [Rev Bit  r/>= r.>=]

  [Frac Frac f/+  f.+]
  [Frac Frac f/-  f.-]
  [Frac Frac f/*  f.*]
  [Frac Frac f//  f./]
  [Frac Frac f/%  f.%]
  [Frac Bit  f/=  f.=]
  [Frac Bit  f/<  f.<]
  [Frac Bit  f/<= f.<=]
  [Frac Bit  f/>  f.>]
  [Frac Bit  f/>= f.>=]
  )

(def .public if
  (All (_ ,,,0 ,,,1)
    (type.let [then (=> ,,,0 ,,,1)
               else (=> ,,,0 ,,,1)]
      (=> ,,,0 [Bit then else]
          ,,,1)))
  (function (_ [[[stack test] then] else])
    (.if test
      (then stack)
      (else stack))))

(def .public call
  (All (_ ,,,0 ,,,1)
    (type.let [quote (=> ,,,0 ,,,1)]
      (=> ,,,0 [quote]
          ,,,1)))
  (function (_ [stack quote])
    (quote stack)))

(def .public loop
  (All (_ ,,,)
    (type.let [test (=> ,,,
                        ,,, [Bit])]
      (=> ,,, [test]
          ,,,)))
  (function (loop [stack pred])
    (let [[stack' verdict] (pred stack)]
      (.if verdict
        (loop [stack' pred])
        stack'))))

(def .public dip
  (All (_ ,,, a)
    (=> ,,, [a (=> ,,, ,,,)]
        ,,, [a]))
  (function (_ [[stack a] quote])
    [(quote stack) a]))

(def .public dip_2
  (All (_ ,,, a b)
    (=> ,,, [a b (=> ,,, ,,,)]
        ,,, [a b]))
  (function (_ [[[stack a] b] quote])
    [[(quote stack) a] b]))

(def .public do
  (All (_ ,,,0 ,,,1)
    (type.let [body (=> ,,,0 ,,,1)
               pred (=> ,,,1 ,,,0 [Bit])]
      (=> ,,,0 [pred body]
          ,,,1 [pred body])))
  (function (_ [[stack pred] body])
    [[(body stack) pred] body]))

(def .public while
  (All (_ ,,,0 ,,,1)
    (type.let [body (=> ,,,1 ,,,0)
               pred (=> ,,,0 ,,,1 [Bit])]
      (=> ,,,0 [pred body]
          ,,,1)))
  (function (while [[stack pred] body])
    (let [[stack' verdict] (pred stack)]
      (.if verdict
        (while [[(body stack') pred] body])
        stack'))))

(def .public compose
  (All (_ ,,,0 ,,, ,,,1)
    (=> [(=> ,,,0 ,,,) (=> ,,, ,,,1)]
        [(=> ,,,0 ,,,1)]))
  (function (_ [[stack f] g])
    [stack (|>> f g)]))

(def .public partial
  (All (_ ,,,0 ,,,1 a)
    (=> ,,,0 [a (=> ,,,0 [a] ,,,1)]
        ,,,0 [(=> ,,,0 ,,,1)]))
  (function (_ [[stack arg] quote])
    [stack (|>> (push arg) quote)]))

(def .public when
  (All (_ ,,,)
    (type.let [body (=> ,,, ,,,)]
      (=> ,,, [Bit body]
          ,,,)))
  (|>> swap
       (push ..call)
       (push ..drop)
       if))

(def .public ?
  (All (_ a)
    (=> [Bit a a] [a]))
  (|>> left_rotation
       (push ..drop)
       (push ..nip)
       if))
