(.module:
  {#.doc "Pure-Lux exception-handling functionality."}
  [library
   [lux #*
    ["." macro]
    ["." meta]
    [abstract
     [monad (#+ do)]]
    [control
     ["p" parser
      ["s" code (#+ Parser)]]]
    [data
     ["." maybe]
     ["." product]
     ["." text ("#\." monoid)]
     [collection
      ["." list ("#\." functor fold)]]]
    [macro
     ["." code]
     [syntax (#+ syntax:)
      ["|.|" export]
      ["|.|" input]
      ["." type #_
       ["|#_.|" variable]]]]
    [math
     [number
      ["n" nat ("#\." decimal)]]]]]
  [//
   ["//" try (#+ Try)]])

(type: #export (Exception a)
  {#.doc "An exception provides a way to decorate error messages."}
  {#label Text
   #constructor (-> a Text)})

(def: #export (match? exception error)
  {#.doc (doc "Is this exception the cause of the error message?")}
  (All [e] (-> (Exception e) Text Bit))
  (text.starts_with? (get@ #label exception) error))

(def: #export (catch exception then try)
  {#.doc (doc "If a particular exception is detected on a possibly-erroneous value, handle it."
              "If no exception was detected, or a different one from the one being checked, then pass along the original value.")}
  (All [e a]
    (-> (Exception e) (-> Text a) (Try a)
        (Try a)))
  (case try
    (#//.Success output)
    (#//.Success output)

    (#//.Failure error)
    (let [reference (get@ #label exception)]
      (if (text.starts_with? reference error)
        (#//.Success (|> error
                         (text.clip' (text.size reference))
                         maybe.assume
                         then))
        (#//.Failure error)))))

(def: #export (otherwise to_do try)
  {#.doc "If no handler could be found to catch the exception, then run a function as a last-resort measure."}
  (All [a]
    (-> (-> Text a) (Try a) a))
  (case try
    (#//.Success output)
    output

    (#//.Failure error)
    (to_do error)))

(def: #export (return value)
  {#.doc "A way to lift normal values into the error-handling context."}
  (All [a] (-> a (Try a)))
  (#//.Success value))

(def: #export (construct exception message)
  {#.doc "Constructs an exception."}
  (All [e] (-> (Exception e) e Text))
  ((get@ #..constructor exception) message))

(def: #export (except exception message)
  {#.doc "Decorate an error message with an Exception and lift it into the error-handling context."}
  (All [e a] (-> (Exception e) e (Try a)))
  (#//.Failure (..construct exception message)))

(def: #export (assert exception message test)
  (All [e] (-> (Exception e) e Bit (Try Any)))
  (if test
    (#//.Success [])
    (..except exception message)))

(syntax: #export (exception: {export |export|.parser}
                   {t_vars (p.else (list) (s.tuple (p.some |type_variable|.parser)))}
                   {[name inputs] (p.either (p.and s.local_identifier (in (list)))
                                            (s.form (p.and s.local_identifier (p.some |input|.parser))))}
                   {body (p.maybe s.any)})
  {#.doc (doc "Define a new exception type."
              "It mostly just serves as a way to tag error messages for later catching."
              ""
              "Simple case:"
              (exception: #export some_exception)
              ""
              "Complex case:"
              (exception: #export [arbitrary type variables] (some_exception {optional Text} {arguments Int})
                optional_body))}
  (macro.with_gensyms [g!descriptor]
    (do meta.monad
      [current_module meta.current_module_name
       #let [descriptor ($_ text\compose "{" current_module "." name "}" text.new_line)
             g!self (code.local_identifier name)]]
      (in (list (` (def: (~+ (|export|.format export))
                     (~ g!self)
                     (All [(~+ (list\map |type_variable|.format t_vars))]
                       (..Exception [(~+ (list\map (get@ #|input|.type) inputs))]))
                     (let [(~ g!descriptor) (~ (code.text descriptor))]
                       {#..label (~ g!descriptor)
                        #..constructor (function ((~ g!self) [(~+ (list\map (get@ #|input|.binding) inputs))])
                                         ((~! text\compose) (~ g!descriptor)
                                          (~ (maybe.else (' "") body))))})))))
      )))

(def: (report' entries)
  (-> (List [Text Text]) Text)
  (let [header_separator ": "
        largest_header_size (list\fold (function (_ [header _] max)
                                         (n.max (text.size header) max))
                                       0
                                       entries)
        on_new_line (|> " "
                        (list.repeat (n.+ (text.size header_separator)
                                          largest_header_size))
                        (text.join_with "")
                        (text\compose text.new_line))
        on_entry (: (-> [Text Text] Text)
                    (function (_ [header message])
                      (let [padding (|> " "
                                        (list.repeat (n.- (text.size header)
                                                          largest_header_size))
                                        (text.join_with ""))]
                        (|> message
                            (text.replace_all text.new_line on_new_line)
                            ($_ text\compose padding header header_separator)))))]
    (case entries
      #.End
      ""

      (#.Item head tail)
      (list\fold (function (_ post pre)
                   ($_ text\compose pre text.new_line (on_entry post)))
                 (on_entry head)
                 tail))))

(syntax: #export (report {entries (p.many (s.tuple (p.and s.any s.any)))})
  {#.doc (doc "An error report."
              (: Text
                 (report ["Row 0" value/0]
                         ["Row 1" value/1]
                         ,,,
                         ["Row N" value/N])))}
  (in (list (` ((~! report') (list (~+ (|> entries
                                           (list\map (function (_ [header message])
                                                       (` [(~ header) (~ message)])))))))))))

(def: #export (enumerate format entries)
  {#.doc (doc "A numbered report of the entries on a list."
              "NOTE: 0-based numbering.")}
  (All [a]
    (-> (-> a Text) (List a) Text))
  (|> entries
      (list\fold (function (_ entry [index next])
                   [(inc index)
                    (#.Item [(n\encode index) (format entry)]
                            next)])
                 [0 #.End])
      product.right
      list.reverse
      ..report'))

(def: separator
  (let [gap ($_ "lux text concat" text.new_line text.new_line)
        horizontal_line (|> "-" (list.repeat 64) (text.join_with ""))]
    ($_ "lux text concat"
        gap
        horizontal_line
        gap)))

(def: (decorate prelude error)
  (-> Text Text Text)
  ($_ "lux text concat"
      prelude
      ..separator
      error))

(def: #export (with exception message computation)
  {#.doc (doc "If a computation fails, prepends the exception to the error.")}
  (All [e a] (-> (Exception e) e (Try a) (Try a)))
  (case computation
    (#//.Failure error)
    (#//.Failure (case error
                   ""
                   (..construct exception message)

                   _
                   (..decorate (..construct exception message) error)))

    success
    success))
