... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except except with when the)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" projection (.use "[1]#[0]" monad)]
    ["[0]" maybe]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" natural (.use "[1]#[0]" base_10)]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]
    ["[0]" macro (.only)
     ["[0]" syntax (.only)
      ["[0]" export]]]]]]
 [//
  ["//" try (.only Try)]])

(every .public (Exception it)
  (Record
   [#label Text
    #constructor (-> it Text)]))

(.the .public (is? exception error)
  (for_any (_ it)
    (-> (Exception it) Text
        Bit))
  (text.starts_with? (its #label exception) error))

(.the .public (failure? exception it)
  (for_any (_ it of)
    (-> (Exception it) (Try of)
        Bit))
  (.when it
    {//.#Failure error}
    (is? exception error)

    success
    false))

(.the .public (when exception then try)
  (for_any (_ it of)
    (-> (Exception it) (-> Text of) (Try of)
        (Try of)))
  (.when try
    {//.#Failure error}
    (let [reference (its #label exception)]
      (if (text.starts_with? reference error)
        {//.#Success (|> error
                         (text.clip_since (text.size reference))
                         maybe.trusted
                         then)}
        {//.#Failure error}))

    success
    success))

(.the .public (else then it)
  (for_any (_ of)
    (-> (-> Text of) (Try of)
        of))
  (.when it
    {//.#Success it}
    it

    {//.#Failure error}
    (then error)))

(.the .public (error exception message)
  (for_any (_ it)
    (-> (Exception it) it
        Text))
  ((its ..#constructor exception) message))

(.the .public (except exception message)
  (for_any (_ it of)
    (-> (Exception it) it
        (Try of)))
  {//.#Failure (..error exception message)})

(.the .public (assertion exception message test)
  (for_any (_ it)
    (-> (Exception it) it Bit
        (Try Any)))
  (if test
    {//.#Success []}
    (..except exception message)))

(.the exceptionP
  (Projection [export.Policy [[Text Code] Code Code]])
  (export.with
    (all <>.either
         (all <>.and
              (<code>.form (<>.and <code>.local <code>.any))
              <code>.any
              <code>.any)
         (do <>.monad
           [name <code>.local]
           (in [[name (code.local name)]
                (` (Exception Any))
                (` "")])))))

(.the .public the
  (syntax.macro (_ [[export_policy [[name input] type body]] ..exceptionP])
    (macro.with_symbols [g!descriptor]
      (do meta.monad
        [[current_module _] module.current]
        (let [descriptor (all text#composite "{" current_module "." name "}" text.new_line)
              g!self (code.local name)]
          (in (list (` (.the (, export_policy)
                         (, g!self)
                         (, type)
                         (let [(, g!descriptor) (, (code.text descriptor))]
                           [..#label (, g!descriptor)
                            ..#constructor (function ((, g!self) (, input))
                                             (by text.monoid (,' composite) (, g!descriptor) (, body)))]))))))))))

(.the .public (report entries)
  (-> (List [Text Text])
      Text)
  (let [header_separator ": "
        largest_header_size (list#mix (function (_ [header _] max)
                                        (n.max (text.size header) max))
                                      0
                                      entries)
        on_new_line (|> " "
                        (list.repeated (n.+ (text.size header_separator)
                                            largest_header_size))
                        text.together
                        (text#composite text.new_line))
        on_entry (is (-> [Text Text] Text)
                     (function (_ [header message])
                       (let [padding (|> " "
                                         (list.repeated (n.- (text.size header)
                                                             largest_header_size))
                                         text.together)]
                         (|> message
                             (text.replaced text.new_line on_new_line)
                             (all text#composite padding header header_separator)))))]
    (.when entries
      {.#End}
      ""

      {.#Item head tail}
      (list#mix (function (_ post pre)
                  (all text#composite pre text.new_line (on_entry post)))
                (on_entry head)
                tail))))

(.the .public (listing injection entries)
  (for_any (_ of)
    (-> (-> of Text) (List of)
        Text))
  (|> entries
      (list#mix (function (_ entry [index next])
                  [(++ index)
                   {.#Item [(n#injection index) (injection entry)]
                           next}])
                [0 {.#End}])
      product.right
      list.reversed
      ..report))

(.the separator
  Text
  (let [gap (.text_composite# text.new_line text.new_line)
        horizontal_line (|> "-" (list.repeated 64) text.together)]
    (.text_composite# gap
                      horizontal_line
                      gap)))

(.the (decorated prelude error)
  (-> Text Text
      Text)
  (.text_composite# prelude
                    ..separator
                    error))

(.the .public (with exception message computation)
  (for_any (_ it of)
    (-> (Exception it) it (Try of)
        (Try of)))
  (.when computation
    {//.#Failure error}
    {//.#Failure (.when error
                   ""
                   (..error exception message)

                   _
                   (..decorated (..error exception message) error))}

    success
    success))
