(.require
 [library
  [lux (.except local with)
   [abstract
    [apply (.only Apply)]
    ["[0]" functor (.only Functor)]
    ["[0]" monad (.only Monad do)]]
   [meta
    ["@" target]]]])

(type .public (Reader r a)
  (-> r a))

(def .public read
  (All (_ r) (Reader r r))
  (function (_ env) env))

(def .public (local change proc)
  (All (_ r a) (-> (-> r r) (Reader r a) (Reader r a)))
  (|>> change proc))

(def .public (result env proc)
  (All (_ r a) (-> r (Reader r a) a))
  (proc env))

(def .public functor
  (All (_ r) (Functor (Reader r)))
  (implementation
   (def (each f fa)
     (function (_ env)
       (f (fa env))))))

(def .public apply
  (All (_ r) (Apply (Reader r)))
  (implementation
   (def functor ..functor)

   (def (on fa ff)
     (function (_ env)
       ((ff env) (fa env))))))

(def .public monad
  (All (_ r) (Monad (Reader r)))
  (implementation
   (def functor ..functor)

   (def (in x)
     (function (_ env) x))

   (def (conjoint mma)
     (function (_ env)
       (mma env env)))))

(def .public (with monad)
  (All (_ !) (-> (Monad !) (All (_ e) (Monad (All (_ a) (Reader e (! a)))))))
  (implementation
   (def functor
     (functor.composite ..functor (the monad.functor monad)))

   (def in
     (|>> (of monad in)
          (of ..monad in)))
   
   (def (conjoint eMeMa)
     (function (_ env)
       (do monad
         [eMa (result env eMeMa)]
         (result env eMa))))))

(def .public lifted
  (All (_ ! e a) (-> (! a) (Reader e (! a))))
  (of ..monad in))
