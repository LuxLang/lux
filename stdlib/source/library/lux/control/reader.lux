(.using
 [library
  [lux (.except local with)
   ["@" target]
   [abstract
    [apply (.only Apply)]
    ["[0]" functor (.only Functor)]
    ["[0]" monad (.only Monad do)]]]])

(type: .public (Reader r a)
  (-> r a))

(def: .public read
  (All (_ r) (Reader r r))
  (function (_ env) env))

(def: .public (local change proc)
  (All (_ r a) (-> (-> r r) (Reader r a) (Reader r a)))
  (|>> change proc))

(def: .public (result env proc)
  (All (_ r a) (-> r (Reader r a) a))
  (proc env))

(implementation: .public functor
  (All (_ r) (Functor (Reader r)))
  
  (def: (each f fa)
    (function (_ env)
      (f (fa env)))))

(implementation: .public apply
  (All (_ r) (Apply (Reader r)))
  
  (def: functor ..functor)

  (def: (on fa ff)
    (function (_ env)
      ((ff env) (fa env)))))

(implementation: .public monad
  (All (_ r) (Monad (Reader r)))
  
  (def: functor ..functor)

  (def: (in x)
    (function (_ env) x))

  (def: (conjoint mma)
    (function (_ env)
      (mma env env))))

(implementation: .public (with monad)
  (All (_ !) (-> (Monad !) (All (_ e) (Monad (All (_ a) (Reader e (! a)))))))

  (def: functor
    (functor.composite ..functor (the monad.functor monad)))

  (def: in
    (|>> (at monad in)
         (at ..monad in)))
  
  (def: (conjoint eMeMa)
    (function (_ env)
      (do monad
        [eMa (result env eMeMa)]
        (result env eMa)))))

(def: .public lifted
  (All (_ ! e a) (-> (! a) (Reader e (! a))))
  (at ..monad in))
