(.require
 [library
  [lux (.except Declaration)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\parser (.only Parser)]]
    ["[0]" macro (.only with_symbols)
     [syntax (.only syntax)]]]]])

(type Declaration
  [Text (List Code)])

(def declaration
  (Parser Declaration)
  (<code>.form (<>.and <code>.local (<>.some <code>.any))))

(def inline
  (Parser [Declaration Code Code])
  (all <>.and
       ..declaration
       <code>.any
       <code>.any
       ))

(def .public inlined
  (syntax (_ [[[name parameters] type term] ..inline])
    (with_symbols [g!_]
      (do [! meta.monad]
        [@ meta.current_module_name
         g!parameters (|> (macro.symbol "parameter")
                          (list.repeated (list.size parameters))
                          (monad.all !))
         .let [inlined (` ((.in_module#
                            (, (code.text @))
                            (.is (, type)
                                 (.function ((, (code.local name)) (,* parameters))
                                   (, term))))
                           (,* (list#each (function (_ g!parameter)
                                            (` ((,' ,) (, g!parameter))))
                                          g!parameters))))
               g!parameters (|> g!parameters
                                (list#each (function (_ parameter)
                                             (list parameter (` <code>.any))))
                                list#conjoint)]]
        (in (list (` (syntax ((, g!_) [(,* g!parameters)])
                       (.at meta.monad (,' in) (.list (.`' (, inlined))))))))))))
