... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except all or and not)
   [abstract
    [monoid (.only Monoid)]
    [functor
     ["[0]" contravariant]]]]]
 ["[0]" //])

(type .public (Predicate of)
  (-> of
      Bit))

(with_template [<identity_value> <identity_name> <composition_name> <composition>]
  [(def .public <identity_name>
     Predicate
     (//.constant <identity_value>))

   (def .public (<composition_name> left right)
     (All (_ of)
       (-> (Predicate of) (Predicate of)
           (Predicate of)))
     (function (_ value)
       (<composition> (left value)
                      (right value))))]

  [#0 none or  .or]
  [#1 all  and .and]
  )

(with_template [<name> <identity> <composition>]
  [(def .public <name>
     (All (_ of)
       (Monoid (Predicate of)))
     (implementation
      (def identity <identity>)
      (def composite <composition>)))]

  [union        ..none ..or]
  [intersection ..all  ..and]
  )

(def .public (complement predicate)
  (All (_ of)
    (-> (Predicate of)
        (Predicate of)))
  (|>> predicate .not))

(alias [not]
       ..complement)

(def .public (difference sub base)
  (All (_ of)
    (-> (Predicate of) (Predicate of)
        (Predicate of)))
  (function (_ value)
    (.and (base value)
          (.not (sub value)))))

(def .public (rec predicate)
  (All (_ of)
    (-> (-> (Predicate of) (Predicate of))
        (Predicate of)))
  (function (again input)
    (predicate again input)))

(def .public functor
  (contravariant.Functor Predicate)
  (implementation
   (def (each $ it)
     (|>> $ it))))
