(.using
 [library
  [lux (.except)
   [control
    ["[0]" exception (.only exception:)]
    [parser
     ["<[0]>" code]]]
   [data
    [text
     ["%" \\format (.only format)]]]
   [macro (.only with_symbols)
    [syntax (.only syntax)]
    ["[0]" code]]
   [math
    [number
     ["i" int]]]]])

(with_template [<name>]
  [(exception: .public (<name> [condition Code])
     (exception.report
      "Condition" (%.code condition)))]

  [pre_condition_failed]
  [post_condition_failed]
  )

(def (assert! message test)
  (-> Text Bit [])
  (if test
    []
    (panic! message)))

(def .public pre
  (syntax (_ [test <code>.any
              expr <code>.any])
    (in (list (` (exec
                   ((~! ..assert!) (~ (code.text (exception.error ..pre_condition_failed test)))
                    (~ test))
                   (~ expr)))))))

(def .public post
  (syntax (_ [test <code>.any
              expr <code>.any])
    (with_symbols [g!output]
      (in (list (` (let [(~ g!output) (~ expr)]
                     (exec
                       ((~! ..assert!) (~ (code.text (exception.error ..post_condition_failed test)))
                        ((~ test) (~ g!output)))
                       (~ g!output)))))))))
