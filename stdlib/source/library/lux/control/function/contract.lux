(.module:
  [library
   [lux "*"
    [control
     ["." exception {"+" [exception:]}]
     [parser
      ["<.>" code]]]
    [data
     [text
      ["%" format {"+" [format]}]]]
    [macro {"+" [with_identifiers]}
     [syntax {"+" [syntax:]}]
     ["." code]]
    [math
     [number
      ["i" int]]]]])

(template [<name>]
  [(exception: .public (<name> {condition Code})
     (exception.report
      ["Condition" (%.code condition)]))]

  [pre_condition_failed]
  [post_condition_failed]
  )

(def: (assert! message test)
  (-> Text Bit [])
  (if test
    []
    (panic! message)))

(syntax: .public (pre [test <code>.any
                       expr <code>.any])
  (in (list (` (exec
                 ((~! ..assert!) (~ (code.text (exception.error ..pre_condition_failed test)))
                  (~ test))
                 (~ expr))))))

(syntax: .public (post [test <code>.any
                        expr <code>.any])
  (with_identifiers [g!output]
    (in (list (` (let [(~ g!output) (~ expr)]
                   (exec
                     ((~! ..assert!) (~ (code.text (exception.error ..post_condition_failed test)))
                      ((~ test) (~ g!output)))
                     (~ g!output))))))))
