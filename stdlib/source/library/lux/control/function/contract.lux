(.module:
  [library
   [lux #*
    [control
     ["." exception (#+ exception:)]]
    [data
     [text
      ["%" format (#+ format)]]]
    [macro (#+ with_identifiers)
     [syntax (#+ syntax:)]
     ["." code]]
    [math
     [number
      ["i" int]]]]])

(template [<name>]
  [(exception: (<name> {condition Code})
     (exception.report
      ["Condition" (%.code condition)]))]

  [pre_condition_failed]
  [post_condition_failed]
  )

(def: (assert! message test)
  (-> Text Bit [])
  (if test
    []
    (panic! message)))

(syntax: .public (pre test expr)
  {#.doc (example "Pre-conditions."
                  "Given a test and an expression to run, only runs the expression if the test passes."
                  "Otherwise, an error is raised."
                  (pre (i.= +4 (i.+ +2 +2))
                       (foo +123 +456 +789)))}
  (in (list (` (exec
                 ((~! ..assert!) (~ (code.text (exception.error ..pre_condition_failed test)))
                  (~ test))
                 (~ expr))))))

(syntax: .public (post test expr)
  {#.doc (example "Post-conditions."
                  "Given a predicate and an expression to run, evaluates the expression and then tests the output with the predicate."
                  "If the predicate returns #1, returns the value of the expression."
                  "Otherwise, an error is raised."
                  (post i.even?
                        (i.+ +2 +2)))}
  (with_identifiers [g!output]
    (in (list (` (let [(~ g!output) (~ expr)]
                   (exec
                     ((~! ..assert!) (~ (code.text (exception.error ..post_condition_failed test)))
                      ((~ test) (~ g!output)))
                     (~ g!output))))))))
