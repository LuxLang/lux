... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... Inspired by;
... "The Different Aspects of Monads and Mixins" by Bruno C. d. S. Oliveira

(.require
 [library
  [lux (.except)
   [abstract
    [monoid (.only Monoid)]
    [monad (.only Monad do)]]
   [control
    [function
     [predicate (.only Predicate)]]]]])

(type .public (Mixin input output)
  (-> (-> input output) (-> input output)
      (-> input output)))

(def .public (fixed f)
  (All (_ input output)
    (-> (Mixin input output)
        (-> input output)))
  (function (mix input)
    ((f mix mix) input)))

(def .public nothing
  Mixin
  (function (_ next again)
    next))

(def .public (mixed parent child)
  (All (_ input output)
    (-> (Mixin input output) (Mixin input output)
        (Mixin input output)))
  (function (_ next again)
    (parent (child next again) again)))

(def .public monoid
  (All (_ input output)
    (Monoid (Mixin input output)))
  (implementation
   (def identity ..nothing)
   (def composite ..mixed)))

(def .public (advice when then)
  (All (_ input output)
    (-> (Predicate input) (Mixin input output)
        (Mixin input output)))
  (function (_ next again input)
    (if (when input)
      ((then next again) input)
      (next input))))

(def .public (before ! action)
  (All (_ ! input output)
    (-> (Monad !) (-> input (! Any))
        (Mixin input (! output))))
  (function (_ next again input)
    (do !
      [_ (action input)]
      (next input))))

(def .public (after ! action)
  (All (_ ! input output)
    (-> (Monad !) (-> input output (! Any))
        (Mixin input (! output))))
  (function (_ next again input)
    (do !
      [output (next input)
       _ (action input output)]
      (in output))))

(type .public (Recursive input output)
  (-> (-> input output)
      (-> input output)))

(def .public (of_recursive recursive)
  (All (_ input output)
    (-> (Recursive input output)
        (Mixin input output)))
  (function (_ next again)
    (recursive again)))
