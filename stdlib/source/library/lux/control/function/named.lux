... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Named_parameter
(.require
 [library
  [lux (.except the)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["?" projection]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]
     ["[0]" set]
     ["[0]" dictionary]]]
   [math
    [number
     ["n" nat]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["?[1]" \\projection]]
    [macro (.only with_symbols)
     ["[0]" expansion]
     ["[0]" syntax (.only)
      ["[0]" export]]]]]])

(exception.the .public (duplicate_parameters [definition parameters])
  (Exception [Symbol (List Text)])
  (exception.report
   (list ["Definition" (%.symbol definition)]
         ["Parameters" (%.list %.text parameters)])))

(exception.the .public (invalid_parameters [definition expected actual])
  (Exception [Symbol (List Text) (List Text)])
  (exception.report
   (list ["Definition" (%.symbol definition)]
         ["Expected" (%.list %.text expected)]
         ["Actual" (%.list %.text actual)])))

(.the .public the
  (syntax.macro (_ [[exported? [name parameters] type body]
                    (export.with (all ?.and
                                      (?code.form (?.and ?code.local (?.some ?code.local)))
                                      ?code.any
                                      ?code.any))])
    (do meta.monad
      [here meta.current_module_name]
      (if (n.= (list.size parameters)
               (set.size (set.of_list text.hash parameters)))
        (with_symbols ['function 'parameters '_ 'it 'error]
          (expansion.let [<invalid_parameters> (meta.failure (exception.error ..invalid_parameters [(symbol (, (code.symbol [here name])))
                                                                                                    (list (,* (list#each code.text parameters)))
                                                                                                    (dictionary.keys (, 'parameters))]))]
            (in (list (` (.the (, exported?) ((, 'function) (,* (list#each code.local parameters)))
                           (, type)
                           (, body)))
                      (` (.the (, exported?) (, (code.local name))
                           (syntax.macro ((, (code.local name)) [(, 'parameters) (?.some (?.and ?code.local ?code.any))])
                             (let [(, 'parameters) (dictionary.of_list text.hash (, 'parameters))]
                               (when (dictionary.size (, 'parameters))
                                 (, (code.nat (list.size parameters)))
                                 (when (monad.each try.monad
                                                   (function ((, '_) (, 'it))
                                                     (dictionary.value (, 'it) (, 'parameters)))
                                                   (list (,* (list#each code.text parameters))))
                                   {try.#Success (, 'parameters)}
                                   (of meta.monad (,' in)
                                       (list (` ((, 'function) ((,' .,*) (, 'parameters))))))
                                   
                                   {try.#Failure (, 'error)}
                                   <invalid_parameters>)

                                 (, '_)
                                 <invalid_parameters>)))))))))
        (meta.failure (exception.error ..duplicate_parameters [[here name] parameters]))))))
