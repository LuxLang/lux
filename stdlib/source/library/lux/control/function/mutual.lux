... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Definition Declaration
                let macro the)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" projection (.use "[1]#[0]" monad)]
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    [text
     ["%" \\injection (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]
    ["[0]" macro (.only)
     ["[0]" local]
     [syntax (.only syntax)
      ["[0]" declaration (.only Declaration)]]]]]]
 ["[0]" //])

(every Mutual
  (Record
   [#declaration Declaration
    #type Code
    #body Code]))

(.the mutual
  (Projection [Declaration Code Code])
  (all <>.and
       declaration.projection
       <code>.any
       <code>.any
       ))

(.the (mutual_definition context g!context [g!name mutual])
  (-> (List Code) Code [Code Mutual] Code)
  (` (function ((, g!name) (, g!context))
       (.let [[(,* context)] (, g!context)]
         (function (, (declaration.format (its #declaration mutual)))
           (, (its #body mutual)))))))

(.the (macro g!context g!self)
  (-> Code Code Macro)
  (<| (as Macro)
      (is Macro')
      (function (_ parameters)
        (of meta.monad in (list (` (((, g!self) (, g!context)) (,* parameters))))))))

(.the .public let
  (syntax (_ [functions (<code>.tuple (<>.some ..mutual))
              body <code>.any])
    (when functions
      {.#End}
      (in (list body))
      
      {.#Item mutual {.#End}}
      (.let [g!name (|> mutual (its [#declaration declaration.#name]) code.local)]
        (in (list (` (.let [(, g!name) (is (, (its #type mutual))
                                           (function (, (declaration.format (its #declaration mutual)))
                                             (, (its #body mutual))))]
                       (, body))))))
      
      _
      (macro.with_symbols [g!context g!output]
        (do [! meta.monad]
          [here_name meta.current_module_name
           hidden_names (monad.each ! (//.constant (macro.symbol "mutual_function#"))
                                    functions)
           .let [definitions (list#each (..mutual_definition hidden_names g!context)
                                        (list.zipped_2 hidden_names
                                                       functions))
                 context_types (list#each (function (_ mutual)
                                            (` (-> (, g!context) (, (its #type mutual)))))
                                          functions)
                 user_names (list#each (|>> (its [#declaration declaration.#name]) code.local)
                                       functions)]
           g!pop (local.push (list#each (function (_ [g!name mutual])
                                          [[here_name (its [#declaration declaration.#name] mutual)]
                                           (..macro g!context g!name)])
                                        (list.zipped_2 hidden_names
                                                       functions)))]
          (in (list (` (.let [(, g!context) (is (Rec (, g!context)
                                                  [(,* context_types)])
                                                [(,* definitions)])
                              [(,* user_names)] (.let [[(,* user_names)] (, g!context)]
                                                  [(,* (list#each (function (_ g!name)
                                                                    (` ((, g!name) (, g!context))))
                                                                  user_names))])
                              (, g!output) (, body)]
                         (exec (, g!pop)
                           (, g!output)))))))))))

(every Definition
  (Record
   [#export_policy Code
    #mutual Mutual]))

(.the definition
  (Projection Definition)
  (<code>.tuple (<>.either (<>.and <code>.any ..mutual)
                           (<>.and (<>#in (` .private)) ..mutual))))

(.the .public the
  (syntax (_ [functions (<>.many ..definition)])
    (when functions
      {.#End}
      (in (list))
      
      {.#Item definition {.#End}}
      (.let [(open "_[0]") definition
             (open "_[0]") _#mutual]
        (in (list (` (.the (, _#export_policy) (, (declaration.format _#declaration))
                       (, _#type)
                       (, _#body))))))
      
      _
      (macro.with_symbols [g!context g!output]
        (do [! meta.monad]
          [here_name meta.current_module_name
           hidden_names (monad.each ! (//.constant (macro.symbol "mutual_function#"))
                                    functions)
           .let [definitions (list#each (..mutual_definition hidden_names g!context)
                                        (list.zipped_2 hidden_names
                                                       (list#each (its #mutual) functions)))
                 context_types (list#each (function (_ mutual)
                                            (` (-> (, g!context) (, (its [#mutual #type] mutual)))))
                                          functions)
                 user_names (list#each (|>> (its [#mutual #declaration declaration.#name]) code.local)
                                       functions)]
           g!pop (local.push (list#each (function (_ [g!name mutual])
                                          [[here_name (its [#mutual #declaration declaration.#name] mutual)]
                                           (..macro g!context g!name)])
                                        (list.zipped_2 hidden_names
                                                       functions)))]
          (in (list.partial (` (.the (, g!context)
                                 [(,* (list#each (its [#mutual #type]) functions))]
                                 (.let [(, g!context) (is (Rec (, g!context)
                                                            [(,* context_types)])
                                                          [(,* definitions)])
                                        [(,* user_names)] (, g!context)]
                                   [(,* (list#each (function (_ g!name)
                                                     (` ((, g!name) (, g!context))))
                                                   user_names))])))
                            g!pop
                            (list#each (function (_ mutual)
                                         (.let [g!name (|> mutual (its [#mutual #declaration declaration.#name]) code.local)]
                                           (` (.the (, (its #export_policy mutual))
                                                (, g!name)
                                                (, (its [#mutual #type] mutual))
                                                (.let [[(,* user_names)] (, g!context)]
                                                  (, g!name))))))
                                       functions))))))))
