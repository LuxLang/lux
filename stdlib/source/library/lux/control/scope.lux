... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Scope local with)
   [abstract
    [apply (.only Apply)]
    ["[0]" functor (.only Functor)]
    ["[0]" monad (.only Monad do)]]]])

... https://en.wikipedia.org/wiki/Scope_(computer_science)
(every .public (Scope context of)
  (-> context
      of))

(def .public read
  (All (_ context)
    (Scope context context))
  (|>>))

(def .public (local change proc)
  (All (_ context of)
    (-> (-> context context) (Scope context of)
        (Scope context of)))
  (|>> change
       proc))

(def .public (value env proc)
  (All (_ context of)
    (-> context (Scope context of)
        of))
  (proc env))

(def .public functor
  (All (_ context)
    (Functor (Scope context)))
  (implementation
   (def (each f fa)
     (function (_ env)
       (f (fa env))))))

(def .public apply
  (All (_ context)
    (Apply (Scope context)))
  (implementation
   (def functor ..functor)

   (def (on fa ff)
     (function (_ env)
       ((ff env) (fa env))))))

(def .public monad
  (All (_ context)
    (Monad (Scope context)))
  (implementation
   (def functor ..functor)

   (def (in x)
     (function (_ env) x))

   (def (conjoint mma)
     (function (_ env)
       (mma env env)))))

(def .public (with monad)
  (All (_ !)
    (-> (Monad !)
        (All (_ context)
          (Monad (All (_ of)
                   (Scope context (! of)))))))
  (implementation
   (def functor
     (functor.composite ..functor (its monad.functor monad)))

   (def in
     (|>> (of monad in)
          (of ..monad in)))
   
   (def (conjoint eMeMa)
     (function (_ env)
       (do monad
         [eMa (value env eMeMa)]
         (value env eMa))))))

(def .public lifted
  (All (_ ! context of)
    (-> (! of)
        (Scope context (! of))))
  (of ..monad in))
