... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except with if or macro)
   [abstract
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [functor (.only Functor)]
    ["[0]" monad (.only Monad)]]]])

(the macro (.in_module# .prelude template#macro))

... (every (Maybe it)
...   (Variant
...    {.#None}
...    {.#Some it}))

(the .public monoid
  (for_any (_ it)
    (Monoid (Maybe it)))
  (implementation
   (the identity
     {.#None})
   
   (the (composite mx my)
     (when mx
       {.#None}
       my
       
       _
       mx))))

(the .public functor
  (Functor Maybe)
  (implementation
   (the (each f ma)
     (when ma
       {.#Some a}
       {.#Some (f a)}
       
       ... {.#None}
       it
       (as_expected it)))))

(the .public monad
  (Monad Maybe)
  (implementation
   (the functor ..functor)

   (the (pure x)
     {.#Some x})

   (the (conjoint mma)
     (when mma
       {.#Some mx}
       mx
       
       ... {.#None}
       it
       (as_expected it)))))

(the .public (equivalence super)
  (for_any (_ it)
    (-> (Equivalence it)
        (Equivalence (Maybe it))))
  (implementation
   (the (= mx my)
     (when [mx my]
       [{.#None} {.#None}]
       true

       [{.#Some x} {.#Some y}]
       (by super = x y)
       
       _
       false))))

(the .public (hash super)
  (for_any (_ it)
    (-> (Hash it)
        (Hash (Maybe it))))
  (implementation
   (the equivalence
     (..equivalence (by super equivalence)))
   
   (the (hash value)
     (when value
       {.#None}
       1

       {.#Some value}
       (by super hash value)))))

(every .public (With ! it)
  (! (Maybe it)))

(the .public (with monad)
  (for_any (_ !)
    (-> (Monad !)
        (Monad (With !))))
  (implementation
   (the (functor it)
     (|> it
         (by ..functor each)
         (by monad each)))

   (the pure
     (|>> (by ..monad pure)
          (by monad pure)))
   
   (the (conjoint MmMma)
     (monad.let monad
       [mMma MmMma]
       (when mMma
         {.#Some Mma}
         Mma

         ... {.#None}
         it
         (pure (as_expected it)))))))

(the .public (lifted monad)
  (for_any (_ ! it)
    (-> (Monad !)
        (-> (! it)
            (! (Maybe it)))))
  (by monad each (by ..monad pure)))

(the .public else
  (macro (_ ,else ,maybe)
    [(when ,maybe
       {.#Some 'it}
       'it

       {.#None}
       ,else)]))

(the .public trusted
  (for_any (_ it)
    (-> (Maybe it)
        it))
  (|>> (..else (undefined))))

(the .public (as_list value)
  (for_any (_ it)
    (-> (Maybe it)
        (List it)))
  (when value
    {.#Some value}
    (list value)

    none
    (list)))

(the .public if
  (macro (_ <test> <then>)
    [(.if <test>
          <then>
          {.#None})]))

(the .public or
  (macro (_ ,left ,right)
    [(when ,left
       {.#Some 'it}
       {.#Some 'it}

       {.#None}
       ,right)]))
