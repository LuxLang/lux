... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except list with when or)
   [abstract
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [apply (.only Apply)]
    ["[0]" functor (.only Functor)]
    ["[0]" monad (.only Monad do)]]
   [meta
    ["[0]" location]]]])

(the template#macro (.in_module# .prelude .template#macro))

... (every (Maybe of)
...   {.#None}
...   {.#Some of})

(the .public monoid
  (for_any (_ of)
    (Monoid (Maybe of)))
  (implementation
   (the identity
     {.#None})
   
   (the (composite mx my)
     (.when mx
       {.#None}
       my
       
       _
       mx))))

(the .public functor
  (Functor Maybe)
  (implementation
   (the (each f ma)
     (.when ma
       {.#Some a}
       {.#Some (f a)}
       
       ... {.#None}
       it
       (as_expected it)))))

(the .public apply
  (Apply Maybe)
  (implementation
   (the functor ..functor)

   (the (on fa ff)
     (.when [ff fa]
       [{.#Some f} {.#Some a}]
       {.#Some (f a)}

       _
       {.#None}))))

(the .public monad
  (Monad Maybe)
  (implementation
   (the functor ..functor)

   (the (in x)
     {.#Some x})

   (the (conjoint mma)
     (.when mma
       {.#Some mx}
       mx
       
       ... {.#None}
       it
       (as_expected it)))))

(the .public (equivalence super)
  (for_any (_ of)
    (-> (Equivalence of)
        (Equivalence (Maybe of))))
  (implementation
   (the (= mx my)
     (.when [mx my]
       [{.#None} {.#None}]
       true

       [{.#Some x} {.#Some y}]
       (of super = x y)
       
       _
       false))))

(the .public (hash super)
  (for_any (_ of)
    (-> (Hash of)
        (Hash (Maybe of))))
  (implementation
   (the equivalence
     (..equivalence (of super equivalence)))
   
   (the (hash value)
     (.when value
       {.#None}
       1

       {.#Some value}
       (of super hash value)))))

(every .public (With ! of)
  (! (Maybe of)))

(the .public (with monad)
  (for_any (_ !)
    (-> (Monad !)
        (Monad (With !))))
  (implementation
   (the (functor it)
     (|> it
         (of ..functor each)
         (of monad each)))

   (the in
     (|>> (of ..monad in)
          (of monad in)))
   
   (the (conjoint MmMma)
     (do monad
       [mMma MmMma]
       (.when mMma
         {.#Some Mma}
         Mma

         ... {.#None}
         it
         (in (as_expected it)))))))

(the .public (lifted monad)
  (for_any (_ ! of)
    (-> (Monad !)
        (-> (! of)
            (! (Maybe of)))))
  (of monad each (of ..monad in)))

(the .public else
  (template#macro
   (_ ,else ,maybe)
   [(.when ,maybe
      {.#Some 'it}
      'it

      {.#None}
      ,else)]))

(the .public trusted
  (for_any (_ of)
    (-> (Maybe of)
        of))
  (|>> (..else (undefined))))

(the .public (list value)
  (for_any (_ of)
    (-> (Maybe of)
        (List of)))
  (.when value
    {.#Some value}
    (.list value)

    ... {.#None}
    _
    (.list)))

(the .public when
  (template#macro
   (_ <test> <then>)
   [(if <test>
      <then>
      {.#None})]))

(the .public or
  (template#macro
   (_ ,left ,right)
   [(.when ,left
      {.#Some 'it}
      {.#Some 'it}

      {.#None}
      ,right)]))
