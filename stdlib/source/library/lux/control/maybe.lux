(.require
 [library
  [lux (.except list with when)
   [abstract
    [monoid (.only Monoid)]
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [apply (.only Apply)]
    ["[0]" functor (.only Functor)]
    ["[0]" monad (.only Monad do)]]
   [meta
    ["[0]" location]]]])

... (type (Maybe a)
...   {.#None}
...   {.#Some a})

(def .public monoid
  (All (_ a) (Monoid (Maybe a)))
  (implementation
   (def identity
     {.#None})
   
   (def (composite mx my)
     (.when mx
       {.#None}
       my
       
       _
       mx))))

(def .public functor
  (Functor Maybe)
  (implementation
   (def (each f ma)
     (.when ma
       {.#Some a}
       {.#Some (f a)}
       
       ... {.#None}
       it
       (as_expected it)))))

(def .public apply
  (Apply Maybe)
  (implementation
   (def functor ..functor)

   (def (on fa ff)
     (.when [ff fa]
       [{.#Some f} {.#Some a}]
       {.#Some (f a)}

       _
       {.#None}))))

(def .public monad
  (Monad Maybe)
  (implementation
   (def functor ..functor)

   (def (in x)
     {.#Some x})

   (def (conjoint mma)
     (.when mma
       {.#Some mx}
       mx
       
       ... {.#None}
       it
       (as_expected it)))))

(def .public (equivalence super)
  (All (_ a) (-> (Equivalence a) (Equivalence (Maybe a))))
  (implementation
   (def (= mx my)
     (.when [mx my]
       [{.#None} {.#None}]
       true

       [{.#Some x} {.#Some y}]
       (of super = x y)
       
       _
       false))))

(def .public (hash super)
  (All (_ a) (-> (Hash a) (Hash (Maybe a))))
  (implementation
   (def equivalence
     (..equivalence (of super equivalence)))
   
   (def (hash value)
     (.when value
       {.#None}
       1

       {.#Some value}
       (of super hash value)))))

(def .public (with monad)
  (All (_ M) (-> (Monad M) (Monad (All (_ a) (M (Maybe a))))))
  (implementation
   (def functor
     (functor.composite (the monad.functor monad)
                        ..functor))

   (def in
     (|>> (of ..monad in)
          (of monad in)))
   
   (def (conjoint MmMma)
     (do monad
       [mMma MmMma]
       (.when mMma
         {.#Some Mma}
         Mma

         ... {.#None}
         it
         (in (as_expected it)))))))

(def .public (lifted monad)
  (All (_ M a) (-> (Monad M) (-> (M a) (M (Maybe a)))))
  (of monad each (of ..monad in)))

(def .public else
  (macro (_ tokens state)
    (.when tokens
      (.list else maybe)
      (let [g!temp (is Code [location.dummy {.#Symbol ["" ""]}])]
        {.#Right [state (.list (` (.when (, maybe)
                                    {.#Some (, g!temp)}
                                    (, g!temp)

                                    ... {.#None}
                                    (, g!temp)
                                    (, else))))]})

      _
      {.#Left "Wrong syntax for 'else'"})))

(def .public trusted
  (All (_ a) (-> (Maybe a) a))
  (|>> (..else (undefined))))

(def .public (list value)
  (All (_ a) (-> (Maybe a) (List a)))
  (.when value
    {.#Some value}
    (.list value)

    ... {.#None}
    _
    (.list)))

(def .public when
  (template (_ <test> <then>)
    [(if <test>
       <then>
       {.#None})]))
