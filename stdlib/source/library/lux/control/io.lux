... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    [monad (.only Monad
                  do)]]
   [meta
    ["[0]" code
     ["<[1]>" \\projection]]
    [macro (.only with_symbols)
     ["[0]" syntax]
     ["[0]" template]]
    [type
     ["[0]" nominal]]]]])

(nominal.every .public (IO a)
  (-> Any a)

  (the .public io'
    (for_any (_ a) (-> (-> Any a) (IO a)))
    (|>> nominal.abstraction))

  (the !io
    (template.macro (!io computation)
      [(nominal.abstraction
        (template.with_locals [g!func g!arg]
          (function (g!func g!arg)
            computation)))]))

  (the value'
    (template.macro (value' io)
      ... creatio ex nihilo
      [((nominal.representation io) [])]))

  (the .public io
    (syntax.macro (_ [computation <code>.any])
      (with_symbols [g!func g!arg]
        (in (list (` (..io' (function ((, g!func) (, g!arg))
                              (, computation)))))))))

  (the .public value
    (for_any (_ a)
      (-> (IO a)
          a))
    (|>> ..value'))

  (the .public functor
    (Functor IO)
    (implementation
     (the (each f)
       (|>> ..value' f !io))))

  (the .public apply
    (Apply IO)
    (implementation
     (the functor ..functor)

     (the (on fa ff)
       (!io ((..value' ff) (..value' fa))))))

  (the .public monad
    (Monad IO)
    (implementation
     (the functor ..functor)

     (the in
       (|>> !io))
     
     (the conjoint
       (|>> ..value'
            ..value'
            !io))))
  )
