(.using
 [library
  [lux "*"
   [abstract
    [functor {"+" Functor}]
    [apply {"+" Apply}]
    [monad {"+" Monad do}]]
   [control
    [parser
     ["<[0]>" code]]]
   [type
    [abstract "*"]]
   [macro {"+" with_symbols}
    [syntax {"+" syntax:}]
    ["[0]" template]]]])

(abstract: .public (IO a)
  (-> Any a)

  (def: label
    (All (_ a) (-> (-> Any a) (IO a)))
    (|>> abstraction))

  (template: (!io computation)
    [(abstraction
      (template.with_locals [g!func g!arg]
        (function (g!func g!arg)
          computation)))])

  (template: (run!' io)
    ... creatio ex nihilo
    [((representation io) [])])

  (syntax: .public (io [computation <code>.any])
    (with_symbols [g!func g!arg]
      (in (list (` ((~! ..label) (function ((~ g!func) (~ g!arg))
                                   (~ computation))))))))

  (def: .public run!
    (All (_ a) (-> (IO a) a))
    (|>> ..run!'))

  (implementation: .public functor
    (Functor IO)
    
    (def: (each f)
      (|>> ..run!' f !io)))

  (implementation: .public apply
    (Apply IO)
    
    (def: functor ..functor)

    (def: (on fa ff)
      (!io ((..run!' ff) (..run!' fa)))))

  (implementation: .public monad
    (Monad IO)
    
    (def: functor ..functor)

    (def: in
      (|>> !io))
    
    (def: conjoint
      (|>> ..run!' ..run!' !io)))
  )
