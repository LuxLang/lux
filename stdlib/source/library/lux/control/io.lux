(.require
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    [monad (.only Monad do)]]
   [meta
    ["[0]" code
     ["<[1]>" \\parser]]
    [macro (.only with_symbols)
     [syntax (.only syntax)]
     ["[0]" template]]
    [type
     [primitive (.except)]]]]])

(primitive .public (IO a)
  (-> Any a)

  (def label
    (All (_ a) (-> (-> Any a) (IO a)))
    (|>> abstraction))

  (def !io
    (template (!io computation)
      [(abstraction
        (template.with_locals [g!func g!arg]
          (function (g!func g!arg)
            computation)))]))

  (def run!'
    (template (run!' io)
      ... creatio ex nihilo
      [((representation io) [])]))

  (def .public io
    (syntax (_ [computation <code>.any])
      (with_symbols [g!func g!arg]
        (in (list (` ((,! ..label) (function ((, g!func) (, g!arg))
                                     (, computation)))))))))

  (def .public run!
    (All (_ a) (-> (IO a) a))
    (|>> ..run!'))

  (def .public functor
    (Functor IO)
    (implementation
     (def (each f)
       (|>> ..run!' f !io))))

  (def .public apply
    (Apply IO)
    (implementation
     (def functor ..functor)

     (def (on fa ff)
       (!io ((..run!' ff) (..run!' fa))))))

  (def .public monad
    (Monad IO)
    (implementation
     (def functor ..functor)

     (def in
       (|>> !io))
     
     (def conjoint
       (|>> ..run!' ..run!' !io))))
  )
