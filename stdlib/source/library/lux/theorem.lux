... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except the with let)
   [abstract
    ["??" projection]
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]:[0]" functor)
      ["?[1]" \\projection]]]]
   [math
    [number
     [/64
      ["[0]" natural]
      ["[0]" integer]
      ["[0]" revolution]]]]
   ["[0]" meta (.only)
    ["[0]" name]
    ["[0]" provenance]
    ["[0]" extension]
    ["[0]" code (.only)
     ["?[1]" \\projection (.only Projection)]
     ["[0]" export]]]
   [macro
    ["[0]" syntax]
    ["[0]" expansion]]
   [compiler
    ["@[0]" type]
    [language
     [lux
      ["[0]" phase]
      ["[0]" analysis (.only)
       ["[0]" type]]]]]
   [function
    ["[0]" predicate (.only Predicate)]]
   [logic
    ["[0]" bit]]]]
 [/
  ["?" proposition]
  ["by" rule]
  ["in" substitution]])

(every .public (Condition it)
  (-> ?.Identity
      (Try it)))

(exception.the .public (not_valid [where [left right]])
  (Exception [Name ?.Identity])
  (exception.report
   (list ["Where" (name.as_text where)]
         ["Left" (analysis.as_text left)]
         ["Right" (analysis.as_text right)])))

(.the .public (left_of_pair it)
  (Condition ?.Identity)
  (when it
    [(analysis.tuple _ (list left right))
     (analysis.tuple _ (list left' right'))]
    {try.:Success [left left']}

    else
    (exception.except ..not_valid [(name ..left_of_pair) it])))

(.the .public (right_of_pair it)
  (Condition ?.Identity)
  (when it
    [(analysis.tuple _ (list left right))
     (analysis.tuple _ (list left' right'))]
    {try.:Success [right right']}

    else
    (exception.except ..not_valid [(name ..right_of_pair) it])))

(.the .public (pair it)
  (Condition [?.Identity ?.Identity])
  (monad.and try.monad
             (left_of_pair it)
             (right_of_pair it)))

(.the .public (with condition then
                lemma
                context it)
  (for_any (_ it)
    (-> (Condition it) (in.Case it)
        (in.Case ?.Identity)))
  (monad.let try.monad
    [lemma (condition lemma)]
    ((then lemma) context it)))

... https://en.wikipedia.org/wiki/Mathematical_proof
... https://en.wikipedia.org/wiki/Formal_proof
(every .public Proof
  (in.Substitution ?.Identity))

(.the .public (let [identity proof] body
                context it)
  (for_any (_ it)
    (-> [?.Identity (in.Fact ?.Identity it)]
        (-> it Proof)
        Proof))
  (monad.let try.monad
    [value (proof context identity)]
    (body value context it)))

... https://en.wikipedia.org/wiki/Q.E.D.
(.the .public (qed context identity)
  Proof
  {try.:Success identity})

(.the .public (= left right
                 context it)
  (-> in.Rule in.Rule
      Proof)
  (monad.let try.monad
    [left (left context (product.left it))
     right (right context (product.right it))]
    (pure [left right])))

(.the (analysis it)
  (Change analysis.Term)
  (when it
    (?.variable _ @)
    (?.expression _ @)
    
    {@type.:Simple @ _}
    it
    
    {@type.:Complex @ it}
    {@type.:Complex @ (when it
                        {@type.:Complex_Variant it}
                        {@type.:Complex_Variant (revised @type.:choice analysis it)}
                        
                        {@type.:Complex_Tuple it}
                        {@type.:Complex_Tuple (list:each analysis it)})}
    
    {@type.:Reference @ it'}
    (when it'
      {@type.:Variable_Reference it'}
      (when it'
        {@type.:Local local}
        (?.variable provenance.dummy local)
        
        {@type.:Foreign _}
        it)
      
      {@type.:Constant_Reference _}
      it)
    
    {@type.:When @ input [head tail]}
    {@type.:When @ (analysis input) [(revised @type.:then analysis head)
                                     (list:each (revised @type.:then analysis) tail)]}
    
    {@type.:Abstraction @ environment body}
    {@type.:Abstraction @ (list:each analysis environment) body}
    
    {@type.:Application @ parameter abstraction}
    {@type.:Application @ (analysis parameter) (analysis abstraction)}
    
    {@type.:Extension @ name parameters}
    {@type.:Extension @ name (list:each analysis parameters)}))

(.the identity
  (Change ?.Identity)
  (|>> (revised ?.:slow ..analysis)
       (revised ?.:fast ..analysis)))

(exception.the .public (entailment_mismatch [expectation reality])
  (Exception [Natural Natural])
  (exception.report
   (list ["Expectation" (%.natural expectation)]
         ["Reality" (%.natural reality)])))

(.the the'
  (extension.analysis (_ analysis archive
                         [every_premise (?code.tuple (??.some ?list.any))
                          'proposition ?list.any
                          'proof ?list.any])
    (.let [code_of_identity (is (-> ?.Identity
                                    Code)
                                (function (_ [this that])
                                  (` [(, (?.code_of_analysis this))
                                      (, (?.code_of_analysis that))])))]
      (if (list.empty? every_premise)
          (monad.let [! phase.monad]
            [identity (meta.eval (type (?.Proposition ?.Identity)) 'proposition)
             identity ((as (-> Any (?.Proposition ?.Identity)) identity) ?.empty analysis archive)
             proof (meta.eval Proof 'proof)
             state_of_compiler phase.state]
            (when (monad.let try.monad
                    [[left right] ((as (-> Any Proof) proof)
                                   [in.:every_global state_of_compiler
                                    in.:next_variable 0
                                    in.:next_term 0]
                                   (..identity identity))]
                    (if (.with analysis.equivalence
                          (= left right))
                        {try.:Success [left right]}
                        (exception.except by.contradiction [left right])))
              {try.:Success theorem}
              (type.with ?.Identity
                (analysis archive (code_of_identity identity)))
              
              {try.:Failure error}
              (meta.failure error)))
          (monad.let [! phase.monad]
            [entailment (meta.eval (type (?.Proposition ?.Entailment)) 'proposition)
             entailment ((as (-> Any (?.Proposition ?.Entailment)) entailment) ?.empty analysis archive)
             .let [expectation (list.size (its ?.:every_premise entailment))
                   reality (list.size every_premise)]]
            (if (natural.= expectation reality)
                (monad.let !
                  ['_ (name.new "'_")
                   proof (meta.eval (list.mix (function (_ premise proof)
                                                (-> ?.Identity proof))
                                              Proof
                                              every_premise)
                                    (` (function ((, '_) (,* every_premise))
                                         (, 'proof))))
                   state_of_compiler phase.state]
                  (when (monad.let try.monad
                          [[left right] ((list.mix (function (_ premise proof)
                                                     ((as (-> Proof (-> ?.Identity Proof)) proof) (..identity premise)))
                                                   (as (-> Any Proof) proof)
                                                   (its ?.:every_premise entailment))
                                         [in.:every_global state_of_compiler
                                          in.:next_variable 0
                                          in.:next_term 0]
                                         (..identity (its ?.:conclusion entailment)))]
                          (if (.with analysis.equivalence
                                (= left right))
                              {try.:Success [left right]}
                              (exception.except by.contradiction [left right])))
                    {try.:Success theorem}
                    (type.with ?.Entailment
                      (analysis archive (` [?.:every_premise (list (,* (list:each code_of_identity (its ?.:every_premise entailment))))
                                            ?.:conclusion (, (code_of_identity (its ?.:conclusion entailment)))])))
                    
                    {try.:Failure error}
                    (meta.failure error)))
                (phase.except ..entailment_mismatch [expectation reality])))))))

(.the .public the
  (syntax.macro (_ state_of_compiler
                   [['export_policy 'declaration] (export.with (??.or (?code.form (??.and ?list.any (??.many ?list.any)))
                                                                      ?list.any))
                    'proposition ?list.any
                    'proof ?list.any])
    (pure (list (when 'declaration
                  {.:Right 'name}
                  (` (.the (, 'export_policy) (, 'name)
                       ?.Identity
                       (..the' []
                               (, 'proposition)
                               (, 'proof))))

                  {.:Left ['name 'every_premise]}
                  (` (.the (, 'export_policy) (, 'name)
                       ?.Entailment
                       (..the' [(,* 'every_premise)]
                               (, 'proposition)
                               (, 'proof)))))))))

(.the (potentially_identical? it)
  (Predicate ?.Identity)
  (when it
    [{@type.:Simple @ {@type.:Simple_Bit slow}}
     {@type.:Simple @ {@type.:Simple_Bit false}}]
    (bit.= slow false)
    
    [{@type.:Simple @ {@type.:Simple_Natural slow}}
     {@type.:Simple @ {@type.:Simple_Natural false}}]
    (natural.= slow false)
    
    [{@type.:Simple @ {@type.:Simple_Integer slow}}
     {@type.:Simple @ {@type.:Simple_Integer false}}]
    (integer.= slow false)
    
    [{@type.:Simple @ {@type.:Simple_Revolution slow}}
     {@type.:Simple @ {@type.:Simple_Revolution false}}]
    (revolution.= slow false)
    
    [{@type.:Simple @ {@type.:Simple_Text slow}}
     {@type.:Simple @ {@type.:Simple_Text false}}]
    (text.= slow false)
    
    else
    true))

(.the contradiction?
  (Predicate ?.Identity)
  (predicate.not ..potentially_identical?))

(.the .public (then else
                    context it)
  (-> Proof
      (in.Fact ?.Identity [?.Identity ?.Identity]))
  (.let [[slow fast] it]
    (expansion.let [if_reality {@type.:Simple @ {@type.:Simple_Bit reality}}
                    if_then {@type.:Simple_Pattern {@type.:Simple_Bit expectation_for_then}}
                    if_else {@type.:Simple_Pattern {@type.:Simple_Bit expectation_for_else}}]
      (when slow
        {@type.:When @ reality [[@type.:when if_then
                                 @type.:then body_for_then]
                                (list [@type.:when if_else
                                       @type.:then body_for_else])]}
        (monad.let try.monad
          [else (else context [?.:slow body_for_else
                               ?.:fast fast])]
          (if (contradiction? else)
              (pure [[?.:slow reality
                      ?.:fast (analysis.bit @ expectation_for_then)]
                     [?.:slow body_for_then
                      ?.:fast fast]])
              (exception.except ..not_valid [(name ..then) else])))

        else
        (exception.except ..not_valid [(name ..then) it])))))
