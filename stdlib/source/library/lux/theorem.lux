... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except the with)
   [abstract
    ["??" projection]
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]:[0]" functor)
      ["?[1]" \\projection]]]]
   [math
    [number
     [/64
      ["[0]" natural]]]]
   ["[0]" meta (.only)
    ["[0]" name]
    ["[0]" provenance]
    ["[0]" extension]
    ["[0]" code
     ["?[1]" \\projection]
     ["[0]" export]]]
   [macro
    ["[0]" syntax]]
   [compiler
    ["@[0]" type]
    [language
     [lux
      ["[0]" phase]
      ["[0]" analysis (.only)
       ["[0]" type]]]]]]]
 [/
  [proof (.only Proof)]
  ["?" proposition]
  ["by" rule]
  ["in" substitution]])

(every .public (Condition it)
  (-> ?.Identity
      (Try it)))

(.the .public (any it)
  (Condition ?.Identity)
  {try.:Success it})

(.the .public (pair in_left in_right
                    [slow fast])
  (for_any (_ left right)
    (-> (Condition left) (Condition right)
        (Condition [left right])))
  (monad.let [! try.monad]
    [[slow_left slow_right] (in.as_pair slow)
     [fast_left fast_right] (in.as_pair fast)]
    (monad.and !
               (in_left [slow_left fast_left])
               (in_right [slow_right fast_right]))))

(.the .public (with condition then
                lemma
                context it)
  (for_any (_ it)
    (-> (Condition it) (in.Case it)
        (in.Case ?.Identity)))
  (monad.let try.monad
    [lemma (condition lemma)]
    ((then lemma) context it)))

(.the (analysis it)
  (Change analysis.Term)
  (when it
    (?.variable _ @)
    (?.example _ @)
    
    {@type.:Simple @ _}
    it
    
    {@type.:Complex @ it}
    {@type.:Complex @ (when it
                        {@type.:Complex_Variant it}
                        {@type.:Complex_Variant (revised @type.:choice analysis it)}
                        
                        {@type.:Complex_Tuple it}
                        {@type.:Complex_Tuple (list:each analysis it)})}
    
    {@type.:Reference @ it'}
    (when it'
      {@type.:Variable_Reference it'}
      (when it'
        {@type.:Local local}
        (?.variable provenance.dummy local)
        
        {@type.:Foreign _}
        it)
      
      {@type.:Constant_Reference _}
      it)
    
    {@type.:When @ input [head tail]}
    {@type.:When @ (analysis input) [(revised @type.:then analysis head)
                                     (list:each (revised @type.:then analysis) tail)]}
    
    {@type.:Abstraction @ environment body}
    {@type.:Abstraction @ (list:each analysis environment) body}
    
    {@type.:Application @ parameter abstraction}
    {@type.:Application @ (analysis parameter) (analysis abstraction)}
    
    {@type.:Extension @ name parameters}
    {@type.:Extension @ name (list:each analysis parameters)}))

(.the identity
  (Change ?.Identity)
  (|>> (revised ?.:slow ..analysis)
       (revised ?.:fast ..analysis)))

(exception.the .public (entailment_mismatch [expectation reality])
  (Exception [Natural Natural])
  (exception.report
   (list ["Expectation" (%.natural expectation)]
         ["Reality" (%.natural reality)])))

(.the the'
  (extension.analysis (_ analysis archive
                         [every_premise (?code.tuple (??.some ?list.any))
                          'proposition ?list.any
                          'proof ?list.any])
    (let [code_of_identity (is (-> ?.Identity
                                   Code)
                               (function (_ [this that])
                                 (` [(, (?.code_of_analysis this))
                                     (, (?.code_of_analysis that))])))]
      (if (list.empty? every_premise)
          (monad.let [! phase.monad]
            [identity (meta.eval (type (?.Proposition ?.Identity)) 'proposition)
             identity ((as (-> Any (?.Proposition ?.Identity)) identity) ?.empty analysis archive)
             proof (meta.eval Proof 'proof)
             state_of_compiler phase.state]
            (when (monad.let try.monad
                    [[left right] ((as (-> Any Proof) proof)
                                   [in.:every_global state_of_compiler
                                    in.:next_variable 0
                                    in.:next_term 0]
                                   (..identity identity))]
                    (if (.with analysis.equivalence
                          (= left right))
                        {try.:Success [left right]}
                        (exception.except by.contradiction [left right])))
              {try.:Success theorem}
              (type.with ?.Identity
                (analysis archive (code_of_identity identity)))
              
              {try.:Failure error}
              (meta.failure error)))
          (monad.let [! phase.monad]
            [entailment (meta.eval (type (?.Proposition ?.Entailment)) 'proposition)
             entailment ((as (-> Any (?.Proposition ?.Entailment)) entailment) ?.empty analysis archive)
             .let [expectation (list.size (its ?.:every_premise entailment))
                   reality (list.size every_premise)]]
            (if (natural.= expectation reality)
                (monad.let !
                  ['_ (name.new "'_")
                   proof (meta.eval (list.mix (function (_ premise proof)
                                                (-> ?.Identity proof))
                                              Proof
                                              every_premise)
                                    (` (function ((, '_) (,* every_premise))
                                         (, 'proof))))
                   state_of_compiler phase.state]
                  (when (monad.let try.monad
                          [[left right] ((list.mix (function (_ premise proof)
                                                     ((as (-> Proof (-> ?.Identity Proof)) proof) (..identity premise)))
                                                   (as (-> Any Proof) proof)
                                                   (its ?.:every_premise entailment))
                                         [in.:every_global state_of_compiler
                                          in.:next_variable 0
                                          in.:next_term 0]
                                         (..identity (its ?.:conclusion entailment)))]
                          (if (.with analysis.equivalence
                                (= left right))
                              {try.:Success [left right]}
                              (exception.except by.contradiction [left right])))
                    {try.:Success theorem}
                    (type.with ?.Entailment
                      (analysis archive (` [?.:every_premise (list (,* (list:each code_of_identity (its ?.:every_premise entailment))))
                                            ?.:conclusion (, (code_of_identity (its ?.:conclusion entailment)))])))
                    
                    {try.:Failure error}
                    (meta.failure error)))
                (phase.except ..entailment_mismatch [expectation reality])))))))

(.the .public the
  (syntax.macro (_ state_of_compiler
                   [['export_policy 'declaration] (export.with (??.or (?code.form (??.and ?list.any (??.many ?list.any)))
                                                                      ?list.any))
                    'proposition ?list.any
                    'proof ?list.any])
    (pure (list (when 'declaration
                  {.:Right 'name}
                  (` (.the (, 'export_policy) (, 'name)
                       ?.Identity
                       (..the' []
                               (, 'proposition)
                               (, 'proof))))

                  {.:Left ['name 'every_premise]}
                  (` (.the (, 'export_policy) (, 'name)
                       ?.Entailment
                       (..the' [(,* 'every_premise)]
                               (, 'proposition)
                               (, 'proof)))))))))
