... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except the with)
   [abstract
    ["??" projection]
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]:[0]" functor)
      ["?[1]" \\projection]]]]
   [math
    [number
     [/64
      ["[0]" natural]]]]
   ["[0]" meta (.only)
    ["[0]" name]
    ["[0]" provenance]
    ["[0]" extension]
    ["[0]" code
     ["?[1]" \\projection]
     ["[0]" export]]]
   [macro
    ["[0]" syntax]
    ["[0]" template]]
   [compiler
    ["@[0]" type]
    [language
     [lux
      ["[0]" phase]
      ["[0]" analysis (.only)
       ["[0]" type]]]]]]]
 [/
  [proof (.only Proof)]
  ["?" proposition]
  ["by" rule]
  ["in" substitution]])

(every .public (Condition it)
  (-> ?.Proposition
      (Try it)))

(.the .public (any it)
  (Condition ?.Proposition)
  {try.:Success it})

(.the .public (pair in_left in_right
                    it)
  (for_any (_ left right)
    (-> (Condition left) (Condition right)
        (Condition [left right])))
  (monad.let [! try.monad]
    [[slow fast] (?.identity it)
     [slow_left slow_right] (in.as_pair slow)
     [fast_left fast_right] (in.as_pair fast)]
    (monad.and !
               (in_left {?.:Identity [slow_left fast_left]})
               (in_right {?.:Identity [slow_right fast_right]}))))

(.the .public (with condition then
                lemma
                context it)
  (for_any (_ it)
    (-> (Condition it) (in.Case it)
        (in.Case ?.Proposition)))
  (monad.let try.monad
    [lemma (condition lemma)]
    ((then lemma) context it)))

(.the (analysis it)
  (Change analysis.Term)
  (when it
    (?.variable _ @)
    (?.example _ @)
    
    {@type.:Simple @ _}
    it
    
    {@type.:Complex @ it}
    {@type.:Complex @ (when it
                        {@type.:Complex_Variant it}
                        {@type.:Complex_Variant (revised @type.:choice analysis it)}
                        
                        {@type.:Complex_Tuple it}
                        {@type.:Complex_Tuple (list:each analysis it)})}
    
    {@type.:Reference @ it'}
    (when it'
      {@type.:Variable_Reference it'}
      (when it'
        {@type.:Local local}
        (?.variable provenance.dummy local)
        
        {@type.:Foreign _}
        it)
      
      {@type.:Constant_Reference _}
      it)
    
    {@type.:When @ input [head tail]}
    {@type.:When @ (analysis input) [(revised @type.:then analysis head)
                                     (list:each (revised @type.:then analysis) tail)]}
    
    {@type.:Abstraction @ environment body}
    {@type.:Abstraction @ (list:each analysis environment) body}
    
    {@type.:Application @ parameter abstraction}
    {@type.:Application @ (analysis parameter) (analysis abstraction)}
    
    {@type.:Extension @ name parameters}
    {@type.:Extension @ name (list:each analysis parameters)}))

(.the (proposition it)
  (Change ?.Proposition)
  (`` (when it
        {?.:Identity it}
        {?.:Identity (|> it
                         (revised ?.:slow ..analysis)
                         (revised ?.:fast ..analysis))}

        (,, (template.with [,tag]
              [{,tag [left right]}
               {,tag [(proposition left) (proposition right)]}]

              [[?.:Entailment]
               [?.:Disjunction]])))))

(exception.the .public (entailment_mismatch [expectation reality])
  (Exception [Natural Natural])
  (exception.report
   (list ["Expectation" (%.natural expectation)]
         ["Reality" (%.natural reality)])))

(.the the'
  (extension.analysis (_ analysis archive
                         ['proposition ?list.any
                          'proof ?list.any])
    (monad.let [! phase.monad]
      [proposition (meta.eval (type (?.Proposition' ?.Proposition)) 'proposition)
       proposition ((as (-> Any (?.Proposition' ?.Proposition)) proposition) ?.empty analysis archive)
       proof (meta.eval Proof 'proof)
       state_of_compiler phase.state]
      (when ((as (-> Any Proof) proof)
             [in.:every_global state_of_compiler
              in.:next_variable 0
              in.:next_term 0]
             (..proposition proposition))
        {try.:Success theorem}
        (analysis archive (?.as_code proposition))
        
        {try.:Failure error}
        (meta.failure error)))))

(.the .public the
  (syntax.macro (_ state_of_compiler
                   [['export_policy 'name] (export.with ?list.any)
                    'proposition ?list.any
                    'proof ?list.any])
    (pure (list (` (.the (, 'export_policy) (, 'name)
                     ?.Proposition
                     (..the' (, 'proposition)
                             (, 'proof))))))))
