... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except the with)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list
      ["?[1]" \\projection]]]]
   ["[0]" meta (.only)
    ["[0]" name]
    [code
     ["[0]" export]]]
   [macro
    ["[0]" syntax]]
   [compiler
    [language
     [lux
      ["[0]" analysis]]]]]]
 [/
  ["?" proposition]
  ["[0]" rule]])

... https://en.wikipedia.org/wiki/Mathematical_proof
... https://en.wikipedia.org/wiki/Formal_proof
(every .public Proof
  (rule.Substitution ?.Identity))

... https://en.wikipedia.org/wiki/Q.E.D.
(.the .public (qed environment identity)
  Proof
  {try.:Success identity})

(.the .public (= left right
                 environment it)
  (-> rule.Rule rule.Rule
      Proof)
  (monad.let try.monad
    [left (left environment (product.left it))
     right (right environment (product.right it))]
    (pure [left right])))

(every .public (Condition it)
  (-> ?.Identity
      (Try it)))

(exception.the .public (not_valid' [where [left right]])
  (Exception [Name ?.Identity])
  (exception.report
   (list ["Where" (name.as_text where)]
         ["Left" (analysis.as_text left)]
         ["Right" (analysis.as_text right)])))

(.the .public (left_of_pair it)
  (Condition ?.Identity)
  (when it
    [(analysis.tuple _ (list left right))
     (analysis.tuple _ (list left' right'))]
    {try.:Success [left left']}

    else
    (exception.except ..not_valid' [(name ..left_of_pair) it])))

(.the .public (right_of_pair it)
  (Condition ?.Identity)
  (when it
    [(analysis.tuple _ (list left right))
     (analysis.tuple _ (list left' right'))]
    {try.:Success [right right']}

    else
    (exception.except ..not_valid' [(name ..right_of_pair) it])))

(.the .public (pair it)
  (Condition [?.Identity ?.Identity])
  (monad.and try.monad
             (left_of_pair it)
             (right_of_pair it)))

(.the .public (with condition then
                lemma
                environment it)
  (for_any (_ it)
    (-> (Condition it) (rule.Case it)
        (rule.Case ?.Identity)))
  (monad.let try.monad
    [lemma (condition lemma)]
    ((then lemma) environment it)))

(.the .public the
  (syntax.macro (_ state_of_compiler
                   [['export_policy 'name] (export.with ?list.any)
                    'proposition ?list.any
                    'proof ?list.any])
    (monad.let meta.monad
      [proposition (meta.eval ?.Identity 'proposition)
       proof (meta.eval Proof 'proof)]
      (when (monad.let try.monad
              [[left right] ((as (-> Any Proof) proof)
                             [state_of_compiler 0]
                             (as (-> Any ?.Identity) proposition))]
              (if (.with analysis.equivalence
                    (= left right))
                  {try.:Success [left right]}
                  (exception.except rule.contradiction [left right])))
        {try.:Success theorem}
        (pure (list (` (.the (, 'export_policy) (, 'name)
                         ?.Identity
                         (, 'proposition)))))
        
        {try.:Failure error}
        (meta.failure error)))))

... https://en.wikipedia.org/wiki/Law_of_identity
(..the .public law_of_identity
  (?.let [any]
    [it any]
    (?.= it it))
  (= rule.as_is rule.as_is))
