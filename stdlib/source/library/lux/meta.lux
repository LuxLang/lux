... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except try macro type local alias or and)
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    ["[0]" monad (.only Monad
                        do)]]
   [control
    ["[0]" maybe]
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" monoid order)]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid monad mix)
      ["[0]" property]]]]
   [math
    [number
     ["n" nat]
     ["i" int]]]]]
 [/
  ["[0]" location]
  ["[0]" symbol (.use "[1]#[0]" absolute equivalence)]
  ["[0]" code]])

(the with_template' (.in_module# .prelude .with_template))

... (.every (Meta of)
...   (-> Lux
...       (Try [Lux of])))

(the .public functor
  (Functor Meta)
  (implementation
   (the (each f fa)
     (function (_ lux)
       (when (fa lux)
         {try.#Success [lux' a]}
         {try.#Success [lux' (f a)]}

         {try.#Failure msg}
         {try.#Failure msg})))))

(the .public apply
  (Apply Meta)
  (implementation
   (the functor ..functor)

   (the (on fa ff)
     (function (_ lux)
       (when (ff lux)
         {try.#Success [lux' f]}
         (when (fa lux')
           {try.#Success [lux'' a]}
           {try.#Success [lux'' (f a)]}

           {try.#Failure msg}
           {try.#Failure msg})

         {try.#Failure msg}
         {try.#Failure msg})))))

(the .public monad
  (Monad Meta)
  (implementation
   (the functor ..functor)

   (the (in x)
     (function (_ lux)
       {try.#Success [lux x]}))
   
   (the (conjoint mma)
     (function (_ lux)
       (when (mma lux)
         {try.#Success [lux' ma]}
         (ma lux')

         {try.#Failure msg}
         {try.#Failure msg})))))

(the .public (value' lux action)
  (for_any (_ of)
    (-> Lux (Meta of)
        (Try [Lux of])))
  (action lux))

(the .public (value lux action)
  (for_any (_ of)
    (-> Lux (Meta of)
        (Try of)))
  (when (action lux)
    {try.#Success [_ output]}
    {try.#Success output}

    {try.#Failure error}
    {try.#Failure error}))

(the .public (or left right)
  (for_any (_ left right)
    (-> (Meta left) (Meta right)
        (Meta (Or left right))))
  (function (_ lux)
    (when (left lux)
      {try.#Success [lux it]}
      {try.#Success [lux {.#Left it}]}

      {try.#Failure error}
      (when (right lux)
        {try.#Success [lux it]}
        {try.#Success [lux {.#Right it}]}

        {try.#Failure error}
        {try.#Failure error}))))

(the .public (either left right)
  (for_any (_ of)
    (-> (Meta of) (Meta of)
        (Meta of)))
  (function (_ lux)
    (when (left lux)
      {try.#Failure error}
      (right lux)
      
      success
      success)))

(the .public (and left right)
  (for_any (_ left right)
    (-> (Meta left) (Meta right)
        (Meta (And left right))))
  (function (_ lux)
    (do try.monad
      [[lux left] (left lux)
       [lux right] (right lux)]
      (in [lux [left right]]))))

(the .public (assertion message test)
  (-> Text Bit
      (Meta Any))
  (function (_ lux)
    (if test
      {try.#Success [lux []]}
      {try.#Failure message})))

(the .public (failure error)
  (for_any (_ of)
    (-> Text
        (Meta of)))
  (function (_ lux)
    {try.#Failure (location.with (its .#location lux) error)}))

(the .public (module name)
  (-> Text
      (Meta Module))
  (function (_ lux)
    (when (property.value name (its .#modules lux))
      {try.#Success module}
      {try.#Success [lux module]}

      failure
      {try.#Failure (all text#composite "Unknown module: " name)})))

(the .public no_current_module
  Error
  (location.with (location.here)
    "No current module."))

(the .public current_module_name
  (Meta Text)
  (function (_ lux)
    (when (its .#current_module lux)
      {.#Some current_module}
      {try.#Success [lux current_module]}

      _
      {try.#Failure ..no_current_module})))

(the .public current_module
  (Meta Module)
  (let [(open "/#[0]") ..monad]
    (|> ..current_module_name
        (/#each ..module)
        /#conjoint)))

(the (macro_type? type)
  (-> Type
      Bit)
  (when type
    {.#Named [.prelude "Macro"]
             {.#Nominal "#Macro" {.#End}}}
    true

    _
    false))

(the .public (normal name)
  (-> Symbol
      (Meta Symbol))
  (when name
    ["" name]
    (do ..monad
      [module_name ..current_module_name]
      (in [module_name name]))

    _
    (of ..monad in name)))

(the .public not_a_macro
  Error
  (location.with (location.here)
    "Not a macro."))

(the .public (macro full_name)
  (-> Symbol
      (Meta Macro))
  (do ..monad
    [full_name (..normal full_name)]
    (is (Meta Macro)
        (function (_ lux)
          (when (..current_module_name lux)
            {try.#Success [_ this_module]}
            (let [modules (its .#modules lux)]
              (loop (macro [[module name] full_name])
                (do try.monad
                  [$module (property.value module modules)
                   [exported? definition] (|> $module
                                              (is Module)
                                              (its .#definitions)
                                              (property.value name))]
                  (when definition
                    {.#Alias de_aliased}
                    (macro de_aliased)
                    
                    {.#Definition [def_type def_value]}
                    (if (macro_type? def_type)
                      {try.#Success [lux (as Macro def_value)]}
                      {try.#Failure ..not_a_macro})

                    {.#Default _}
                    {try.#Failure ..not_a_macro}))))

            {try.#Failure error}
            {try.#Failure error})))))

(the .public seed
  (Meta Nat)
  (function (_ lux)
    {try.#Success [(revised .#seed ++ lux)
                   (its .#seed lux)]}))

(the .public (module_exists? module)
  (-> Text
      (Meta Bit))
  (function (_ lux)
    {try.#Success [lux (when (property.value module (its .#modules lux))
                         {try.#Success _}
                         true
                         
                         failure
                         false)]}))

(the (on_either f x1 x2)
  (for_any (_ input output)
    (-> (-> input (Maybe output)) input input
        (Maybe output)))
  (when (f x1)
    {.#None}
    (f x2)
    
    some
    some))

(the (type_variable idx bindings)
  (-> Nat (List [Nat (Maybe Type)])
      (Maybe Type))
  (when bindings
    {.#End}
    {.#None}
    
    {.#Item [var bound] bindings'}
    (if (n.= idx var)
      bound
      (type_variable idx bindings'))))

(`` (the (clean_type type)
      (-> Type
          (Meta Type))
      (when type
        {.#Var var}
        (function (_ lux)
          (when (|> lux
                    (its [.#type_context .#var_bindings])
                    (type_variable var))
            (,, (with_template' [<pattern>]
                  [<pattern>
                   {try.#Success [lux type]}]

                  [{.#None}]
                  [{.#Some {.#Var _}}]))
            

            {.#Some type'}
            {try.#Success [lux type']}))

        _
        (of ..monad in type))))

(the .public (var_type name)
  (-> Text
      (Meta Type))
  (function (_ lux)
    (let [test (is (-> [Text [Type Any]] Bit)
                   (|>> product.left (text#= name)))]
      (when (do maybe.monad
              [scope (list.example (function (_ env)
                                     (.or (list.any? test (is (List [Text [Type Any]])
                                                              (its [.#locals .#mappings] env)))
                                          (list.any? test (is (List [Text [Type Any]])
                                                              (its [.#captured .#mappings] env)))))
                                   (its .#scopes lux))
               [_ [type _]] (on_either (list.example test)
                                       (is (List [Text [Type Any]])
                                           (its [.#locals .#mappings] scope))
                                       (is (List [Text [Type Any]])
                                           (its [.#captured .#mappings] scope)))]
              (in type))
        {.#Some var_type}
        ((clean_type var_type) lux)

        {.#None}
        {try.#Failure (all text#composite "Unknown variable: " name)}))))

(the without_lux_runtime
  (-> (List Text)
      (List Text))
  ... The Lux runtime shows up as ""
  ... so I'm excluding it.
  (list.only (|>> text.empty? not)))

(the listing_separator
  Text
  (all text#composite text.new_line "                    "))

(the module_listing
  (-> (List Text)
      Text)
  (|>> ..without_lux_runtime
       (list.sorted text#<)
       (text.interposed ..listing_separator)))

(with_template' [<name> <yes>]
  [(the .public (<name> name)
     (-> Symbol
         (Meta [Bit Global]))
     (do ..monad
       [name (..normal name)
        .let [[normal_module normal_short] name]]
       (function (_ lux)
         (when (is (Maybe [Bit Global])
                   (do maybe.monad
                     [(open "[0]") (|> lux
                                       (its .#modules)
                                       (property.value normal_module))]
                     (property.value normal_short #definitions)))
           {.#Some exported?,definition}
           {try.#Success [lux exported?,definition]}

           _
           (let [current_module (|> lux (its .#current_module) (maybe.else "???"))
                 all_known_modules (|> lux
                                       (its .#modules)
                                       (list#each product.left)
                                       ..module_listing)]
             {try.#Failure (all text#composite
                                " All known modules: " all_known_modules text.new_line
                                (when (property.value current_module (its .#modules lux))
                                  {try.#Success this_module}
                                  (let [candidates (|> lux
                                                       (its .#modules)
                                                       (list#each (function (_ [module_name module])
                                                                    (|> module
                                                                        (its .#definitions)
                                                                        (list.all (function (_ [def_name [exported? global]])
                                                                                    (`` (when global
                                                                                          {<yes> _}
                                                                                          (if (.and exported?
                                                                                                    (text#= normal_short def_name))
                                                                                            {.#Some (symbol#injection [module_name def_name])}
                                                                                            {.#None})

                                                                                          _
                                                                                          {.#None})))))))
                                                       list.together
                                                       (list.sorted text#<)
                                                       (text.interposed ..listing_separator))
                                        imports (|> this_module
                                                    (its .#imports)
                                                    ..module_listing)
                                        aliases (|> this_module
                                                    (its .#module_aliases)
                                                    (list#each (function (_ [alias real]) (all text#composite alias " => " real)))
                                                    (list.sorted text#<)
                                                    (text.interposed ..listing_separator))]
                                    (all text#composite
                                         "           Aliases: " aliases text.new_line
                                         "           Imports: " imports text.new_line
                                         "        Candidates: " candidates text.new_line))

                                  failure
                                  "")
                                "    Current module: " current_module text.new_line
                                "Unknown definition: " (symbol#injection name) text.new_line
                                )})))))]

  [definition .#Definition]
  [default' .#Default]
  [alias' .#Alias]
  )

(the .public (export name)
  (-> Symbol
      (Meta Definition))
  (do [! ..monad]
    [name (..normal name)
     .let [[expected _] name]
     [exported? definition] (..definition name)
     actual ..current_module_name]
    (when definition
      {.#Definition it}
      (if (.or exported?
               (text#= expected actual))
        (in it)
        (failure (all text#composite "Definition is not an export: " (symbol#injection name))))

      {.#Alias it}
      (if (.or exported?
               (text#= expected actual))
        (export it)
        (failure (all text#composite "Alias is not an export: " (symbol#injection name))))

      {.#Default _}
      (failure (all text#composite
                    "Defaults are not considered exports: "
                    (symbol#injection name))))))

(the .public (default name)
  (-> Symbol
      (Meta Default))
  (do [! ..monad]
    [name (..normal name)
     [exported? definition] (..default' name)]
    (when definition
      {.#Definition _}
      (failure (all text#composite
                    "Definitions are not considered defaults: "
                    (symbol#injection name)))

      {.#Alias de_aliased}
      (failure (all text#composite
                    "Aliases are not considered defaults: "
                    (symbol#injection name)))

      {.#Default it}
      (if exported?
        (in it)
        (do !
          [.let [[expected _] name]
           actual ..current_module_name]
          (if (text#= expected actual)
            (in it)
            (failure (all text#composite "Default is not an export: " (symbol#injection name)))))))))

(the .public (alias name)
  (-> Symbol
      (Meta Symbol))
  (do [! ..monad]
    [name (..normal name)
     [exported? it] (..alias' name)]
    (when it
      {.#Alias it}
      (in it)

      _
      (undefined))))

(with_template' [<name> <slot> <type>]
  [(the .public <name>
     (Meta <type>)
     (function (_ lux)
       {try.#Success [lux (its <slot> lux)]}))]

  [compiler_state [] Lux]
  
  [type_context .#type_context Type_Context]
  
  [target [.#info .#target] Text]
  [version [.#info .#version] Text]
  [configuration [.#info .#configuration] (List [Text Text])]
  )

(the .public (definition_type name)
  (-> Symbol
      (Meta Type))
  (do ..monad
    [[exported? definition] (definition name)]
    (when definition
      {.#Alias de_aliased}
      (definition_type de_aliased)
      
      {.#Definition [def_type def_value]}
      (clean_type def_type)

      {.#Default _}
      (failure (all text#composite
                    "Defaults are not considered definitions: "
                    (symbol#injection name))))))

(the .public (type name)
  (-> Symbol
      (Meta Type))
  (when name
    ["" _name]
    (either (var_type _name)
            (definition_type name))

    _
    (definition_type name)))

(the .public (type_definition name)
  (-> Symbol
      (Meta Type))
  (do ..monad
    [[exported? definition] (definition name)]
    (when definition
      {.#Alias de_aliased}
      (type_definition de_aliased)
      
      {.#Definition [def_type def_value]}
      (let [type_code (.in_module# .prelude .type_code)]
        (if (.or (same? .Type def_type)
                 (of code.equivalence =
                     (type_code .Type)
                     (type_code def_type)))
          (in (as Type def_value))
          (..failure (all text#composite "Definition is not a type: " (symbol#injection name)))))

      {.#Default _}
      (..failure (all text#composite "Default is not a type: " (symbol#injection name))))))

(the .public (globals module)
  (-> Text
      (Meta (List [Text [Bit Global]])))
  (function (_ lux)
    (when (property.value module (its .#modules lux))
      {try.#Success module}
      {try.#Success [lux (its .#definitions module)]}

      failure
      {try.#Failure (all text#composite "Unknown module: " module)})))

(the .public (definitions module)
  (-> Text
      (Meta (List [Text [Bit Definition]])))
  (of ..monad each
      (list.all (function (_ [name [exported? global]])
                  (when global
                    {.#Alias de_aliased}
                    {.#None}
                    
                    {.#Definition definition}
                    {.#Some [name [exported? definition]]}

                    {.#Default _}
                    {.#None})))
      (..globals module)))

(the .public cannot_de-alias_a_default
  Error
  (location.with (location.here)
    "Cannot de-alias a default global."))

(the .public (resolved_globals module)
  (-> Text
      (Meta (List [Text [Bit Definition]])))
  (do [! ..monad]
    [it (..globals module)
     .let [input (is (List [Text Bit (Either Symbol Definition)])
                     (list.all (function (_ [name [exported? global]])
                                 (when global
                                   {.#Alias de_aliased}
                                   {.#Some [name exported? {.#Left de_aliased}]}
                                   
                                   {.#Definition definition}
                                   {.#Some [name exported? {.#Right definition}]}

                                   {.#Default _}
                                   {.#None}))
                               it))]]
    (function (_ lux)
      (loop (next [input input
                   output (is (List [Text [Bit Definition]])
                              (list))])
        (when input
          (list)
          {try.#Success [lux output]}

          (list.partial [name exported? it] input)
          (let [real_definition (is (Try Definition)
                                    (loop (again [it it])
                                      (when it
                                        {.#Left de_aliased}
                                        (when (..definition de_aliased lux)
                                          {try.#Success [_ [_ definition]]}
                                          (when definition
                                            {.#Alias de_aliased}
                                            (again {.#Left de_aliased})
                                            
                                            {.#Definition definition}
                                            {try.#Success definition}

                                            {.#Default _}
                                            {try.#Failure ..cannot_de-alias_a_default})
                                          
                                          {try.#Failure error}
                                          {try.#Failure error})
                                        
                                        {.#Right definition}
                                        {try.#Success definition})))]
            (when real_definition
              {try.#Success it}
              (next input (list.partial [name [exported? it]] output))
              
              {try.#Failure error}
              {try.#Failure error})))))))

(the .public (exports module_name)
  (-> Text
      (Meta (List [Text Definition])))
  (do ..monad
    [constants (..definitions module_name)]
    (in (do list.monad
          [[name [exported? [def_type def_value]]] constants]
          (if exported?
            (in [name [def_type def_value]])
            (list))))))

(the .public modules
  (Meta (List [Text Module]))
  (function (_ lux)
    (|> lux
        (its .#modules)
        [lux]
        {try.#Success})))

(the type#=
  (.in_module# .prelude .type#=))

(the type#injection
  (.in_module# .prelude .type#injection))

(the .public location
  (Meta Location)
  (function (_ lux)
    {try.#Success [lux (its .#location lux)]}))

(the .public not_expecting_any_type
  Error
  (location.with (location.here)
    "Not expecting any type."))

(the .public expected_type
  (Meta Type)
  (function (_ lux)
    (when (its .#expected lux)
      {.#Some type}
      {try.#Success [lux type]}

      {.#None}
      {try.#Failure ..not_expecting_any_type})))

(the .public (imported_modules module_name)
  (-> Text
      (Meta (List Text)))
  (do ..monad
    [(open "/[0]") (..module module_name)]
    (in /#imports)))

(the .public (imported_by? import module)
  (-> Text Text
      (Meta Bit))
  (do ..monad
    [(open "/[0]") (..module module)]
    (in (list.any? (text#= import) /#imports))))

(the .public (imported? import)
  (-> Text
      (Meta Bit))
  (of ..functor each
      (|>> (its .#imports) (list.any? (text#= import)))
      ..current_module))

(the .public (tag_lists module)
  (-> Text
      (Meta (List [(List Symbol) Type])))
  (do ..monad
    [=module (..module module)
     this_module_name ..current_module_name]
    (in (property.values
         (list#mix (function (_ [short [exported? global]] output)
                     (when global
                       {.#Definition [type value]}
                       (if (.and (type#= Slot type)
                                 (.or exported?
                                      (text#= this_module_name module)))
                         (let [[label type] (as Label value)]
                           (when label
                             {.#Some [lefts right? family]}
                             (when family
                               (list.partial [_ short] _)
                               (property.has short [family type] output)

                               (list)
                               (property.has short [(list [module short]) type] output))
                             
                             {.#None}
                             (property.has short [(list [module short]) type] output)))
                         output)

                       _
                       output))
                   (is (property.List [(List Symbol) Type])
                       (list))
                   (its .#definitions =module))))))

(the .public no_local_environment
  Error
  (location.with (location.here)
    "No local environment."))

(the .public locals
  (Meta (List (List [Text Type])))
  (function (_ lux)
    (when (list.inits (its .#scopes lux))
      {try.#Success scopes}
      {try.#Success [lux
                     (list#each (|>> (its [.#locals .#mappings])
                                     (list#each (function (_ [name [type _]])
                                                  [name type])))
                                scopes)]}

      {try.#Failure error}
      {try.#Failure ..no_local_environment})))

(the .public (de_aliased def_name)
  (-> Symbol
      (Meta Symbol))
  (do ..monad
    [[exported? constant] (..definition def_name)]
    (in (when constant
          {.#Alias real_def_name}
          real_def_name

          {.#Definition _}
          def_name

          {.#Default _}
          def_name))))

(the .public (of_try it)
  (for_any (_ of)
    (-> (Try of)
        (Meta of)))
  (when it
    {try.#Success output}
    (of ..monad in output)

    {try.#Failure error}
    (..failure error)))

(the .public (eval type code)
  (-> Type Code
      (Meta Any))
  (do [! ..monad]
    [eval (of ! each (its .#eval)
              ..compiler_state)]
    (eval type code)))

(the .public (try computation)
  (for_any (_ of)
    (-> (Meta of)
        (Meta (Try of))))
  (function (_ lux)
    {try.#Success
     (when (computation lux)
       {try.#Success [lux' output]}
       [lux' {try.#Success output}]

       {try.#Failure error}
       [lux {try.#Failure error}])}))
