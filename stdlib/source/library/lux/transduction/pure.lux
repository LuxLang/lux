... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except only and)
   [abstract
    [functor (.only Functor)]
    [monoid (.only Monoid)]]
   ["[0]" function (.only)
    [predicate (.only Predicate)]
    [polytypism
     [mix (.only Mix)]]]
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" array
      ["[1]" \\unsafe]]
     ["[0]" dictionary (.only Dictionary)]]]
   [concurrency
    ["[0]" future (.only Future) (.use "[1]#[0]" monad)]]
   [math
    [number
     ["n" natural]
     ["[0]" i64]]]
   [control
    [io (.only io)]]]]
 ["[0]" //])

(every .public (Transduction to_consume to_produce summary)
  (//.Transduction to_consume to_produce
                   summary summary))

(the .public functor
  (for_any (_ to_consume)
    (Functor (Transduction to_consume)))
  (implementation
   (the (each value it)
     (function (_ reduction)
       (it (function (_ detail summary)
             (reduction (value detail) summary)))))))

(the .public nothing
  (for_any (_ it)
    (Transduction it it))
  function.identity)

(the .public and
  (for_any (_ to_consume in_transit to_produce)
    (-> (Transduction to_consume in_transit) (Transduction in_transit to_produce)
        (Transduction to_consume to_produce)))
  function.composite)

(the .public (each it)
  (for_any (_ to_consume to_produce)
    (-> (-> to_consume to_produce)
        (Transduction to_consume to_produce)))
  (by ..functor each it ..nothing))

(the .public (only ?)
  (for_any (_ it)
    (-> (Predicate it)
        (Transduction it it)))
  (function (_ reduction detail summary)
    (if (? detail)
        (reduction detail summary)
        summary)))

(the .public (many mix)
  (for_any (_ collection it)
    (-> (Mix collection)
        (Transduction (collection it) it)))
  (function (_ reduction detail summary)
    (mix reduction summary detail)))

(the .public maybe
  (for_any (_ it)
    (Transduction (Maybe it) it))
  (function (_ reduction detail summary)
    (when detail
      {.#Some detail}
      (reduction detail summary)
      
      {.#None}
      summary)))

(the .public (replaced replacements)
  (for_any (_ it)
    (-> (Dictionary it it)
        (Transduction it it)))
  (function (_ reduction detail summary)
    (reduction (|> replacements
                   (dictionary.value detail)
                   (try.else detail))
               summary)))

(the .public (in_series reduction initial
                        transduction
                        mix collection)
  (for_any (_ collection to_consume to_mix summary)
    (-> (//.Reduction summary to_mix) summary
        (Transduction to_consume to_mix)
        (Mix collection) (collection to_consume)
        summary))
  (mix (transduction reduction) initial collection))

(every .public Parallelism
  Natural)

(the .public none
  Parallelism
  0)

(the .public suggestion
  Parallelism
  ... 2^9 = 512
  (i64.left_shifted 9 1))

(the .public (in_parallel parallelism monoid
                          transduction
                          it)
  (for_any (_ to_consume summary)
    (-> Parallelism (Monoid summary)
        (Transduction to_consume summary)
        (List to_consume)
        (Future summary)))
  (with monoid
    (let [in_series (in_series composite identity transduction list.mix)]
      (when parallelism
        ..none
        (future#pure (in_series it))
        
        _
        (|> it
            (list.sub parallelism)
            (list#each (|>> in_series io future.soon))
            (list.complete future.monad)
            (future#each (list.mix composite identity)))))))
