... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except only and)
   ["[0]" function (.only)
    [predicate (.only Predicate)]
    [polytypism
     [mix (.only Mix)]]]
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" dictionary (.only Dictionary)]]]]]
 ["[0]" //])

(every .public (Transduction to_consume to_produce whole)
  (//.Transduction to_consume to_produce
                   whole whole))

(the .public nothing
  (for_any (_ it)
    (Transduction it it))
  function.identity)

(the .public and
  (for_any (_ to_consume in_transit to_produce)
    (-> (Transduction to_consume in_transit) (Transduction in_transit to_produce)
        (Transduction to_consume to_produce)))
  function.composite)

(the .public (each it)
  (for_any (_ to_consume to_produce)
    (-> (-> to_consume to_produce)
        (Transduction to_consume to_produce)))
  (function (_ mix part whole)
    (mix (it part) whole)))

(the .public (only ?)
  (for_any (_ it)
    (-> (Predicate it)
        (Transduction it it)))
  (function (_ mix part whole)
    (if (? part)
      (mix part whole)
      whole)))

(the .public (many collection::mix)
  (for_any (_ collection it)
    (-> (Mix collection)
        (Transduction (collection it) it)))
  (function (_ mix part whole)
    (collection::mix mix whole part)))

(the .public maybe
  (for_any (_ it)
    (Transduction (Maybe it) it))
  (function (_ mix part whole)
    (when part
      {.#Some part}
      (mix part whole)
      
      {.#None}
      whole)))

(the .public (replaced replacements)
  (for_any (_ it)
    (-> (Dictionary it it)
        (Transduction it it)))
  (function (_ mix part whole)
    (mix (|> replacements
             (dictionary.value part)
             (try.else part))
         whole)))

(the .public (in_series mix initial
                        transduction
                        collection::mix collection)
  (for_any (_ collection to_consume to_mix whole)
    (-> (//.Reduction to_mix whole) whole
        (Transduction to_consume to_mix)
        (Mix collection) (collection to_consume)
        whole))
  (collection::mix (transduction mix) initial collection))
