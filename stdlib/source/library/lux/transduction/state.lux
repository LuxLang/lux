... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except and with)
   [abstract
    [functor (.only Functor Then)]
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   ["[0]" function (.only)
    [predicate (.only Predicate)]
    [poly
     [type
      [mix (.only Mix)]]]]
   [control
    [pure (.only Pure)]]
   [data
    ["[0]" maybe]
    ["[0]" product]
    [collection
     ["[0]" set (.only Set)]]]
   [math
    [number
     [/64
      ["n" natural]]]]]]
 ["[0]" // (.only)
  ["[0]" pure]])

(every .public (Transduction state to_consume to_produce summary)
  (Record
   [:in (-> summary (state summary))
    :out (-> (state summary) summary)
    :transduction (//.Transduction to_consume to_produce
                                   (state summary) summary)]))

(the .public functor
  (for_any (_ state to_consume)
    (Functor (Transduction state to_consume)))
  (implementation
   (the (each value it)
     [:in (its :in it)
      :out (its :out it)
      :transduction (function (_ reduction)
                      ((its :transduction it) (function (_ detail summary)
                                                (reduction (value detail) summary))))])))

(the .public (and before after)
  (for_any (_ before after to_consume in_transit to_produce)
    (-> (Transduction before to_consume in_transit) (Transduction after in_transit to_produce)
        (Transduction (Then before after) to_consume to_produce)))
  [:in (function.composite (its :in before)
                           (its :in after))
   :out (function.composite (its :out after)
                            (its :out before))
   :transduction (function.composite (its :transduction before)
                                     (its :transduction after))])

(the .public pure
  (for_any (_ to_consume to_produce)
    (-> (pure.Transduction to_consume to_produce)
        (Transduction Pure to_consume to_produce)))
  (|>> [:in function.identity
        :out function.identity
        :transduction]))

(every .public (With outer)
  (for_any (_ inner)
    [inner outer]))

(the .public (with outer inner)
  (for_any (_ head tail)
    (-> head tail
        (With head tail)))
  [inner outer])

(the result product.left)

(the .public (unique hash)
  (for_any (_ it)
    (-> (Hash it)
        (Transduction (With (Set it)) it it)))
  [:in (with (set.empty hash))
   :out ..result
   :transduction (function (_ reduction detail [summary state])
                   (if (set.member? state detail)
                       [summary state]
                       [(reduction detail summary)
                        (set.has detail state)]))])

(the .public (new equivalence)
  (for_any (_ it)
    (-> (Equivalence it)
        (Transduction (With (Maybe it)) it it)))
  [:in (with {.:None})
   :out ..result
   :transduction (function (_ reduction detail [summary state])
                   (if (|> state
                           (by maybe.functor each (by equivalence = detail))
                           (maybe.else false))
                       [summary state]
                       [(reduction detail summary)
                        {.:Some detail}]))])

(the .public (interposed delimiter)
  (for_any (_ it)
    (-> it
        (Transduction (With Bit) it it)))
  [:in (with true)
   :out ..result
   :transduction (function (_ reduction detail [summary first?])
                   [(reduction detail (if first?
                                          summary
                                          (reduction delimiter summary)))
                    false])])

(the .public (after quantity)
  (for_any (_ it)
    (-> Natural
        (Transduction (With Natural) it it)))
  [:in (with quantity)
   :out ..result
   :transduction (function (_ reduction detail [summary quantity])
                   (when quantity
                     0 [(reduction detail summary) quantity]
                     _ [summary (-- quantity)]))])

(the .public (until ?)
  (for_any (_ it)
    (-> (Predicate it)
        (Transduction (With Bit) it it)))
  [:in (with false)
   :out ..result
   :transduction (function (_ reduction detail [summary can_collect?])
                   (if (or can_collect?
                           (? detail))
                       [(reduction detail summary) true]
                       [summary can_collect?]))])

(the .public (skipping quantity)
  (for_any (_ it)
    (-> Nat
        (Transduction (With Natural) it it)))
  (let [limit (++ quantity)]
    [:in (with 0)
     :out ..result
     :transduction (when quantity
                     0 (function (_ reduction detail [summary skipped])
                         [(reduction detail summary)
                          skipped])
                     _ (function (_ reduction detail [summary skipped])
                         [(when skipped
                            0 (reduction detail summary)
                            _ summary)
                          (n.% limit (++ skipped))]))]))

(the .public (in_series reduction initial
                        transduction
                        mix collection)
  (for_any (_ collection with to_consume to_mix summary)
    (-> (//.Reduction summary to_mix) summary
        (Transduction with to_consume to_mix)
        (Mix collection) (collection to_consume)
        summary))
  (|> collection
      (mix ((its :transduction transduction) reduction)
           ((its :in transduction) initial))
      ((its :out transduction))))
