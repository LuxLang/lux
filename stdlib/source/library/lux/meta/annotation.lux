(.module:
  [library
   [lux {"-" [nat int rev]}
    [abstract
     ["[0]" monad {"+" [do]}]]
    [control
     ["[0]" maybe]]
    [data
     ["[0]" name ("[1]\[0]" equivalence)]]]])

(type: .public Annotation
  Code)

(def: .public (value tag ann)
  (-> Name Annotation (Maybe Code))
  (case ann
    [_ (#.Record ann)]
    (loop [ann ann]
      (case ann
        (#.Item [key value] ann')
        (case key
          [_ (#.Tag tag')]
          (if (name\= tag tag')
            (#.Some value)
            (recur ann'))

          _
          (recur ann'))
        
        #.End
        #.None))

    _
    #.None))

(template [<name> <tag> <type>]
  [(def: .public (<name> tag ann)
     (-> Name Annotation (Maybe <type>))
     (case (..value tag ann)
       (#.Some [_ (<tag> value)])
       (#.Some value)

       _
       #.None))]

  [bit        #.Bit        Bit]
  [nat        #.Nat        Nat]
  [int        #.Int        Int]
  [rev        #.Rev        Rev]
  [frac       #.Frac       Frac]
  [text       #.Text       Text]
  [identifier #.Identifier Name]
  [tag        #.Tag        Name]
  [form       #.Form       (List Code)]
  [tuple      #.Tuple      (List Code)]
  [record     #.Record     (List [Code Code])]
  )

(def: .public (flagged? flag)
  (-> Name Annotation Bit)
  (|>> (..bit flag) (maybe.else false)))

(def: (text_parser input)
  (-> Code (Maybe Text))
  (case input
    [_ (#.Text actual_value)]
    (#.Some actual_value)

    _
    #.None))
