(.module:
  [library
   [lux (#- nat int rev)
    [abstract
     ["." monad (#+ do)]]
    [data
     ["." maybe]
     ["." name ("#\." equivalence)]]]])

(type: #export Annotation
  Code)

(def: #export (value tag ann)
  (-> Name Annotation (Maybe Code))
  (case ann
    [_ (#.Record ann)]
    (loop [ann ann]
      (case ann
        (#.Item [key value] ann')
        (case key
          [_ (#.Tag tag')]
          (if (name\= tag tag')
            (#.Some value)
            (recur ann'))

          _
          (recur ann'))
        
        #.End
        #.None))

    _
    #.None))

(template [<name> <tag> <type>]
  [(def: #export (<name> tag ann)
     (-> Name Annotation (Maybe <type>))
     (case (..value tag ann)
       (#.Some [_ (<tag> value)])
       (#.Some value)

       _
       #.None))]

  [bit        #.Bit        Bit]
  [nat        #.Nat        Nat]
  [int        #.Int        Int]
  [rev        #.Rev        Rev]
  [frac       #.Frac       Frac]
  [text       #.Text       Text]
  [identifier #.Identifier Name]
  [tag        #.Tag        Name]
  [form       #.Form       (List Code)]
  [tuple      #.Tuple      (List Code)]
  [record     #.Record     (List [Code Code])]
  )

(def: #export documentation
  (-> Annotation (Maybe Text))
  (..text (name_of #.doc)))

(def: #export (flagged? flag)
  (-> Name Annotation Bit)
  (|>> (..bit flag) (maybe.default false)))

(template [<name> <tag>]
  [(def: #export <name>
     (-> Annotation Bit)
     (..flagged? (name_of <tag>)))]

  [implementation? #.implementation?]
  [recursive_type? #.type-rec?]
  [signature?      #.sig?]
  )

(def: (text_parser input)
  (-> Code (Maybe Text))
  (case input
    [_ (#.Text actual_value)]
    (#.Some actual_value)

    _
    #.None))

(template [<name> <tag>]
  [(def: #export (<name> ann)
     (-> Annotation (List Text))
     (maybe.default (list)
                    (do {! maybe.monad}
                      [args (..tuple (name_of <tag>) ann)]
                      (monad.map ! ..text_parser args))))]

  [function_arguments #.func-args]
  [type_arguments     #.type-args]
  )
