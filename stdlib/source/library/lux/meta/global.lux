... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except with)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["?" projection]
    ["[0]" maybe]]
   [data
    ["[0]" product]
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)
      ["[0]" property]]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["?[1]" \\projection]]
    ["[0]" macro (.only)
     [syntax (.only syntax)]]]]])

(the with_replacement
  (syntax (_ [[module short] ?code.global
              local ?code.local
              hidden ?code.local])
    (do meta.monad
      [here meta.current_module_name
       _ (is (Meta Any)
             (function (_ lux)
               (let [lux (revised .#modules
                                  (is (-> (property.List .Module) (property.List .Module))
                                      (property.revised module (is (-> .Module .Module)
                                                                   (function (_ module)
                                                                     (|> (do maybe.monad
                                                                           [global (property.value short (its .#definitions module))]
                                                                           (in (revised .#definitions
                                                                                        (|>> (property.has short [false {.#Alias [here local]}])
                                                                                             (property.has hidden global))
                                                                                        module)))
                                                                         (maybe.else module))))))
                                  lux)]
                 {.#Right [lux []]})))]
      (in (list)))))

(the without_replacement
  (syntax (_ [[module short] ?code.global
              hidden ?code.local])
    (do meta.monad
      [_ (is (Meta Any)
             (function (_ lux)
               (let [lux (revised .#modules
                                  (is (-> (property.List .Module) (property.List .Module))
                                      (property.revised module (is (-> .Module .Module)
                                                                   (function (_ module)
                                                                     (|> (do maybe.monad
                                                                           [global (property.value hidden (its .#definitions module))]
                                                                           (in (revised .#definitions
                                                                                        (|>> (property.has short global)
                                                                                             (property.lacks hidden))
                                                                                        module)))
                                                                         (maybe.else module))))))
                                  lux)]
                 {.#Right [lux []]})))]
      (in (list)))))

(the .public with
  (syntax (_ [replacements (?code.tuple (?.some (?.and ?code.global ?code.any)))
              declarations (?.some ?code.any)])
    (when (list.reversed replacements)
      (list)
      (in declarations)

      (list [global value])
      (do [! meta.monad]
        ['local (macro.symbol "'local")
         'hidden (macro.symbol "'hidden")
         .let [[@ _] (symbol .._)]]
        (in (list (` (the (, 'local)
                       (type_of (, (code.symbol global)))
                       (, value)))
                  (` ((.in_module# (, (code.text @)) ..with_replacement) (, (code.symbol global)) (, 'local) (, 'hidden)))
                  (` (these (,* declarations)))
                  (` ((.in_module# (, (code.text @)) ..without_replacement) (, (code.symbol global)) (, 'hidden))))))

      (list.partial [global re_definition] tail)
      (in (list (list#mix (function (_ [global re_definition] body)
                            (` (..with [(, (code.symbol global)) (, re_definition)]
                                 (, body))))
                          (` (..with [(, (code.symbol global)) (, re_definition)]
                               (,* declarations)))
                          tail))))))
