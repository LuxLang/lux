(.require
 [library
  [lux (.except local symbol function macro)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]]]
   [math
    [number
     ["[0]" nat]]]]]
 ["[0]" /
  ["[1][0]" expansion]]
 ["[0]" // (.only)
  ["[0]" code]
  ["[0]" symbol (.use "[1]#[0]" codec)]])

(def .public (symbol prefix)
  (-> Text (Meta Code))
  (do //.monad
    [id //.seed]
    (in (|> id
            (at nat.decimal encoded)
            (all text#composite "__gensym__" prefix)
            [""] code.symbol))))

(def (local ast)
  (-> Code (Meta Text))
  (case ast
    [_ {.#Symbol ["" name]}]
    (at //.monad in name)

    _
    (//.failure (text#composite "Code is not a local symbol: " (code.format ast)))))

(def .public wrong_syntax_error
  (-> Symbol Text)
  (|>> symbol#encoded
       (text.prefix (text#composite "Wrong syntax for " text.\''))
       (text.suffix (text#composite text.\'' "."))))

(def .public with_symbols
  (.macro (_ tokens)
    (case tokens
      (list [_ {.#Tuple symbols}] body)
      (do [! //.monad]
        [symbol_names (monad.each ! ..local symbols)
         .let [symbol_defs (list#conjoint (list#each (is (-> Text (List Code))
                                                         (.function (_ name) (list (code.symbol ["" name]) (` (..symbol (, (code.text name)))))))
                                                     symbol_names))]]
        (in (list (` (do //.monad
                       [(,* symbol_defs)]
                       (, body))))))

      _
      (//.failure (..wrong_syntax_error (.symbol ..with_symbols))))))

(def .public times
  (.macro (_ tokens)
    (case tokens
      (list.partial [_ {.#Nat times}] terms)
      (loop (again [times times
                    before terms])
        (case times
          0
          (at //.monad in before)

          _
          (do [! //.monad]
            [after (|> before
                       (monad.each ! /expansion.single)
                       (at ! each list#conjoint))]
            (again (-- times) after))))

      _
      (//.failure (..wrong_syntax_error (.symbol ..times))))))

(def .public final
  (.macro (_ it)
    (let [! //.monad]
      (|> it
          (monad.each ! /expansion.complete)
          (at ! each list#conjoint)))))

(def .public function
  (-> Macro Macro')
  (|>> (as Macro')))

(def .public macro
  (-> Macro' Macro)
  (|>> (as Macro)))
