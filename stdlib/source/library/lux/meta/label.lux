... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)]
    [collection
     ["[0]" stack (.use "[1]#[0]" mix)]
     ["[0]" list (.use "[1]#[0]" mix)
      ["[0]" property]]]]
   [macro
    ["[0]" template]
    ["[0]" expansion]]
   ["[0]" type]
   [compiler
    ["@[0]" type]]]]
 ["[0]" // (.only)
  ["[0]" module]
  ["[0]" binding]
  ["[0]" name (.use "[1]#[0]" absolute)]])

(template.with [,singular ,type]
  [(expansion.let [,unknown (template.name ["unknown_" ,singular])
                   ,cannot_access (template.name ["cannot_access_" ,singular])
                   ,not_a (template.name ["not_a_" ,singular])

                   ,plural (template.name [,singular "s"])
                   ,not_any (template.name ["not_any_" ,singular])]
     (these (exception.the .public (,unknown [it])
              (Exception Name)
              (exception.report
               (list [(template.text [,type]) (name#as it)])))

            (exception.the .public (,cannot_access [it from])
              (Exception [Name module.Name])
              (exception.report
               (list [(template.text [,type]) (name#as it)]
                     ["From" (text.as_text from)])))

            (exception.the .public (,not_a [it])
              (Exception Name)
              (exception.report
               (list [(template.text [,type]) (name#as it)])))

            (the .public (,singular it)
              (-> Name
                  (Meta Label))
              (do //.monad
                [it (binding.normal it)
                 module (module.by_name (name.module it))
                 [this_module_name _] module.current]
                (when (property.value (name.proper it) (its .#definitions module))
                  {try.#Success [exported? {.#Definition [def_type def_value]}]}
                  (if (.or (text.= this_module_name (name.module it))
                           exported?)
                      (if (type.= ,type def_type)
                          (in (as Label def_value))
                          (//.of_try (exception.except ,not_a [it])))
                      (//.of_try (exception.except ,cannot_access [it this_module_name])))

                  failure
                  (//.of_try (exception.except ,unknown [it])))))

            (exception.the .public (,not_any [it])
              (Exception Name)
              (exception.report
               (list ["For type" (name#as it)])))

            (the .public (,plural type_name)
              (-> Name
                  (Meta (Stack Name)))
              (do //.monad
                [type_name (binding.normal type_name)
                 module (module.by_name (name.module type_name))]
                (loop (,plural [definitions (list.as_stack (its .#definitions module))])
                  (when definitions
                    {.#Top [proper [exported? global]]
                           tail}
                    (expansion.let [,try_again (,plural tail)]
                      (when global
                        {.#Definition [type value]}
                        (if (type.= ,type type)
                            (let [[label type] (as Label value)]
                              (when type
                                {.#Named actual_name anonymous}
                                (if (name.= type_name actual_name)
                                    (in (when label
                                          {.#Some [lefts right? family]}
                                          family
                                          
                                          {.#None}
                                          (stack [(name.module type_name)
                                                  proper])))
                                    ,try_again)

                                _
                                ,try_again))
                            ,try_again)

                        _
                        ,try_again))

                    {.#Empty}
                    (//.of_try (exception.except ,not_any [type_name]))))))))]

  [tag @type.Tag]
  [slot @type.Slot]
  )

(the .public (tag_stacks module)
  (-> module.Name
      (Meta (Stack [(Stack Name) Type])))
  (do //.monad
    [=module (module.by_name module)
     [this_module_name _] module.current]
    (in (list.as_stack (property.values
                        (list#mix (function (_ [proper [exported? global]] output)
                                    (when global
                                      {.#Definition [type value]}
                                      (if (and (type.= @type.Slot type)
                                               (or exported?
                                                   (text.= this_module_name module)))
                                          (let [[label type] (as Label value)]
                                            (when label
                                              {.#Some [lefts right? family]}
                                              (when family
                                                (stack.partial [_ proper] _)
                                                (property.has proper [family type] output)

                                                (stack)
                                                (property.has proper [(stack [module proper]) type] output))
                                              
                                              {.#None}
                                              (property.has proper [(stack [module proper]) type] output)))
                                          output)

                                      _
                                      output))
                                  (is (property.List [(Stack Name) Type])
                                      (list))
                                  (its .#definitions =module)))))))
