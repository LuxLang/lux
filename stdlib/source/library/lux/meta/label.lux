... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)
      ["[0]" property]]]]]]
 ["[0]" // (.only)
  ["[0]" module]
  ["[0]" binding]
  ["[0]" symbol (.use "[1]#[0]" absolute)]
  ["[0]" type]
  [macro
   ["[0]" template]
   ["[0]" expansion]]])

(template.with [,singular ,type]
  [(expansion.let [,unknown (template.symbol ["unknown_" ,singular])
                   ,cannot_access (template.symbol ["cannot_access_" ,singular])
                   ,not_a (template.symbol ["not_a_" ,singular])

                   ,plural (template.symbol [,singular "s"])
                   ,not_any (template.symbol ["not_any_" ,singular])]
     (these (exception.the (,unknown [it])
              (Exception Symbol)
              (exception.report
               (list [(template.text [,type]) (symbol#injection it)])))

            (exception.the (,cannot_access [it from])
              (Exception [Symbol module.Name])
              (exception.report
               (list [(template.text [,type]) (symbol#injection it)]
                     ["From" (text.injection from)])))

            (exception.the (,not_a [it])
              (Exception Symbol)
              (exception.report
               (list [(template.text [,type]) (symbol#injection it)])))

            (the .public (,singular it)
              (-> Symbol
                  (Meta Label))
              (do //.monad
                [it (binding.normal it)
                 module (module.by_name (symbol.module it))
                 [this_module_name _] module.current]
                (when (property.value (symbol.short it) (its .#definitions module))
                  {try.#Success [exported? {.#Definition [def_type def_value]}]}
                  (if (.or (text.= this_module_name (symbol.module it))
                           exported?)
                    (if (type.= ,type def_type)
                      (in (as Label def_value))
                      (//.of_try (exception.except ,not_a [it])))
                    (//.of_try (exception.except ,cannot_access [it this_module_name])))

                  failure
                  (//.of_try (exception.except ,unknown [it])))))

            (exception.the (,not_any [it])
              (Exception Symbol)
              (exception.report
               (list ["For type" (symbol#injection it)])))

            (the .public (,plural type_name)
              (-> Symbol
                  (Meta (List Symbol)))
              (do //.monad
                [type_name (binding.normal type_name)
                 module (module.by_name (symbol.module type_name))]
                (loop (,plural [definitions (its .#definitions module)])
                  (when definitions
                    {.#Item [short [exported? global]]
                            tail}
                    (expansion.let [,try_again (,plural tail)]
                      (when global
                        {.#Definition [type value]}
                        (if (type.= ,type type)
                          (let [[label type] (as Label value)]
                            (when type
                              {.#Named actual_name anonymous}
                              (if (symbol.= type_name actual_name)
                                (in (when label
                                      {.#Some [lefts right? family]}
                                      family
                                      
                                      {.#None}
                                      (list [(symbol.module type_name)
                                             short])))
                                ,try_again)

                              _
                              ,try_again))
                          ,try_again)

                        _
                        ,try_again))

                    {.#End}
                    (//.of_try (exception.except ,not_any [type_name]))))))))]

  [tag .Tag]
  [slot .Slot]
  )

(the .public (tag_lists module)
  (-> module.Name
      (Meta (List [(List Symbol) Type])))
  (do //.monad
    [=module (module.by_name module)
     [this_module_name _] module.current]
    (in (property.values
         (list#mix (function (_ [short [exported? global]] output)
                     (when global
                       {.#Definition [type value]}
                       (if (and (type.= Slot type)
                                (or exported?
                                    (text.= this_module_name module)))
                         (let [[label type] (as Label value)]
                           (when label
                             {.#Some [lefts right? family]}
                             (when family
                               (list.partial [_ short] _)
                               (property.has short [family type] output)

                               (list)
                               (property.has short [(list [module short]) type] output))
                             
                             {.#None}
                             (property.has short [(list [module short]) type] output)))
                         output)

                       _
                       output))
                   (is (property.List [(List Symbol) Type])
                       (list))
                   (its .#definitions =module))))))
