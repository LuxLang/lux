... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Dimensional_analysis
(.require
 [library
  [lux (.except type)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]
    [enum (.only Enum)]]
   [data
    ["[0]" text (.only)
     ["%" \\format]]]
   [math
    [number
     ["i" int]]]
   [meta
    ["[0]" code
     ["<[1]>" \\projection]]
    ["[0]" macro (.only)
     [syntax (.only syntax)]]]]]
 ["[0]" // (.only)
  ["[0]" nominal]])

(nominal.every .public (Measure scale unit)
  Int

  (the .public measure
    (All (_ scale unit)
      (-> Int
          (Measure scale unit)))
    (|>> nominal.abstraction))

  (the .public number
    (All (_ scale unit)
      (-> (Measure scale unit)
          Int))
    (|>> nominal.representation))

  (the .public equivalence
    (All (_ scale unit)
      (Equivalence (Measure scale unit)))
    (implementation
     (the (= expected actual)
       (i.= (nominal.representation expected) (nominal.representation actual)))))

  (the .public order
    (All (_ scale unit)
      (Order (Measure scale unit)))
    (implementation
     (the equivalence ..equivalence)
     
     (the (< reference it)
       (i.< (nominal.representation reference) (nominal.representation it)))))

  (the .public enum
    (All (_ scale unit)
      (Enum (Measure scale unit)))
    (implementation
     (the order ..order)
     (the succ (|>> nominal.representation ++ nominal.abstraction))
     (the pred (|>> nominal.representation -- nominal.abstraction))))

  (with_template [<name> <op>]
    [(the .public (<name> param subject)
       (All (_ scale unit)
         (-> (Measure scale unit) (Measure scale unit)
             (Measure scale unit)))
       (nominal.abstraction
        (<op> (nominal.representation param)
              (nominal.representation subject))))]

    [+ i.+]
    [- i.-]
    )

  (with_template [<name> <op> <p> <s> <p*s>]
    [(the .public (<name> param subject)
       (All (_ scale p s)
         (-> (Measure scale <p>) (Measure scale <s>)
             (Measure scale <p*s>)))
       (nominal.abstraction
        (<op> (nominal.representation param)
              (nominal.representation subject))))]

    [* i.* p s [p s]]
    [/ i./ p [p s] s]
    )

  (.every .public (Unit of)
    (Interface
     (is (-> Int
             (Measure Any of))
         in)
     (is (-> (Measure Any of)
             Int)
         out)
     (is (-> (Measure Any of)
             Text)
         format)))

  (the .public (unit descriptor)
    (Ex (_ of)
      (-> Text
          (Unit of)))
    (implementation
     (the in ..measure)
     (the out ..number)
     (the format (|>> ..number %.int (text.suffix descriptor)))))
  )

(the .public type
  (syntax (_ [it <code>.any])
    (macro.with_symbols [g!a]
      (in (list (` (//.by_example [(, g!a)]
                     (is (..Unit (, g!a))
                         (, it))
                     (, g!a))))))))

(with_template [<descriptor> <unit> <type>]
  [(the .public <unit>
     (..unit <descriptor>))
   
   (the .public <type>
     (let [[module _] (symbol .._)
           [_ short] (symbol <type>)]
       {.#Named [module short]
                (..type <unit>)}))]

  ["g" gram Gram]
  ["m" meter Meter]
  ["l" litre Litre]
  ["s" second Second]
  )
