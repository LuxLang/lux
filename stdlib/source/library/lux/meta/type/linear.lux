... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only Monad
                        do)
     ["[0]" indexed]]]
   [control
    ["<>" projection]
    ["[0]" maybe]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" set]
     ["[0]" sequence (.only Sequence)]
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" natural]]]
   ["[0]" meta (.only)
    ["[0]" code
     ["<[1]>" \\projection (.only Projection)]]
    ["[0]" macro (.only)
     ["[0]" syntax]
     ["[0]" template]]]]]
 [//
  ["[0]" nominal]])

(every .public (Procedure ! input output value)
  (-> input (! [output value])))

(every .public (Linear ! value)
  (for_any (_ keys)
    (Procedure ! keys keys value)))

(every .public (Affine ! permissions value)
  (for_any (_ keys)
    (Procedure ! keys [permissions keys] value)))

(every .public (Relevant ! permissions value)
  (for_any (_ keys)
    (Procedure ! [permissions keys] keys value)))

(the .public (monad monad)
  (for_any (_ !) (-> (Monad !) (indexed.Monad (Procedure !))))
  (implementation
   (the (in value)
     (function (_ keys)
       (by monad in [keys value])))

   (the (then f input)
     (function (_ keysI)
       (do monad
         [[keysT value] (input keysI)]
         ((f value) keysT))))))

(the .public (value monad procedure)
  (for_any (_ ! v) (-> (Monad !) (Linear ! v) (! v)))
  (do monad
    [[_ output] (procedure [])]
    (in output)))

(the .public (lifted monad procedure)
  (for_any (_ ! v) (-> (Monad !) (! v) (Linear ! v)))
  (function (_ keys)
    (do monad
      [output procedure]
      (in [keys output]))))

(nominal.every .public Ordered Any)
(nominal.every .public Commutative Any)

(nominal.every .public (Key mode key)
  Any

  (template.with [<name> <mode>]
    [(the <name>
       (for_some (_ k) (-> Any (Key <mode> k)))
       (|>> nominal.abstraction))]

    [ordered_key     Ordered]
    [commutative_key Commutative]
    ))

(nominal.every .public (Res key value)
  value

  (template.with [<name> <mode> <key>]
    [(the .public (<name> monad value)
       (for_any (_ ! v) (for_some (_ k) (-> (Monad !) v (Affine ! (Key <mode> k) (Res k v)))))
       (function (_ keys)
         (by monad in [[(<key> []) keys] (nominal.abstraction value)])))]

    [ordered     Ordered     ..ordered_key]
    [commutative Commutative ..commutative_key]
    )

  (the .public (read monad resource)
    (for_any (_ ! v k m)
      (-> (Monad !) (Res k v) (Relevant ! (Key m k) v)))
    (function (_ [key keys])
      (by  monad in [keys (nominal.representation resource)])))
  )

(exception.the .public (index_cannot_be_repeated index)
  (Exception Natural)
  (exception.report
   (list ["Index" (%.natural index)])))

(exception.the .public amount_cannot_be_zero)

(the indices
  (Projection (List Natural))
  (<code>.tuple (loop (again [seen (set.empty n.hash)])
                  (do [! <>.monad]
                    [done? <code>.end?]
                    (if done?
                      (in (list))
                      (do !
                        [head <code>.natural
                         _ (<>.assertion (exception.error ..index_cannot_be_repeated head)
                                         (not (set.member? seen head)))
                         tail (again (set.has head seen))]
                        (in (list.partial head tail))))))))

(the (no_op monad)
  (for_any (_ m) (-> (Monad m) (Linear m Any)))
  (function (_ context)
    (by monad in [context []])))

(the .public exchange
  (syntax.macro (_ [swaps ..indices])
    (macro.with_symbols [g!_ g!context g!!]
      (when swaps
        {.#End}
        (in (list (` ..no_op)))

        {.#Item head tail}
        (do [! meta.monad]
          [.let [max_idx (list#mix n.major head tail)]
           g!inputs (<| (monad.all !) (list.repeated (++ max_idx)) (macro.symbol "input"))
           .let [g!outputs (|> (monad.mix maybe.monad
                                          (function (_ from to)
                                            (do maybe.monad
                                              [input (list.item from g!inputs)]
                                              (in (sequence.suffix input to))))
                                          (is (Sequence Code) sequence.empty)
                                          swaps)
                               maybe.trusted
                               sequence.as_list)
                 g!inputsT+ (list#each (|>> (,) (..Key ..Commutative) (`)) g!inputs)
                 g!outputsT+ (list#each (|>> (,) (..Key ..Commutative) (`)) g!outputs)]]
          (in (list (` (is (for_any ((, g!_) (, g!!) (,* g!inputs) (, g!context))
                             (-> (monad.Monad (, g!!))
                                 (Procedure (, g!!)
                                            [(,* g!inputsT+) (, g!context)]
                                            [(,* g!outputsT+) (, g!context)]
                                            .Any)))
                           (function ((, g!_) (, g!!) [(,* g!inputs) (, g!context)])
                             (by (, g!!) (,' in) [[(,* g!outputs) (, g!context)] []])))))))))))

(the amount
  (Projection Natural)
  (do <>.monad
    [raw <code>.natural
     _ (<>.assertion (exception.error ..amount_cannot_be_zero [])
                     (n.> 0 raw))]
    (in raw)))

(template.with [<name> <from> <to>]
  [(the .public <name>
     (syntax.macro (_ [amount ..amount])
       (macro.with_symbols [g!_ g!context g!!]
         (do [! meta.monad]
           [g!keys (|> (macro.symbol "keys")
                       (list.repeated amount)
                       (monad.all !))]
           (in (list (` (is (for_any ((, g!_) (, g!!) (,* g!keys) (, g!context))
                              (-> (monad.Monad (, g!!))
                                  (Procedure (, g!!)
                                             [<from> (, g!context)]
                                             [<to> (, g!context)]
                                             .Any)))
                            (function ((, g!_) (, g!!) [<from> (, g!context)])
                              (by (, g!!) (,' in) [[<to> (, g!context)] []]))))))))))]

  [group    (,* g!keys)   [(,* g!keys)]]
  [un_group [(,* g!keys)] (,* g!keys)]
  )
