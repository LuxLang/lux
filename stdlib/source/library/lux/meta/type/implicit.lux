... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except with)
   [abstract
    ["[0]" monad (.only do)]
    ["[0]" equivalence]]
   [control
    ["<>" projection]
    ["[0]" maybe]
    ["[0]" try]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\injection (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad mix)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    ["[0]" number (.only)
     ["n" nat]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    ["[0]" macro (.only)
     [syntax (.only syntax)]]]]]
 ["[0]" // (.use "[1]#[0]" equivalence)
  ["/[1]" //]
  ["[0]" check (.only Check)]])

(the (type_var id env)
  (-> Nat Type_Context
      (Meta Type))
  (when (list.example (|>> product.left (n.= id))
                      (its .#var_bindings env))
    {try.#Success [_ {.#Some type}]}
    (when type
      {.#Var id'}
      (type_var id' env)

      _
      (of ///.monad in type))

    {try.#Success [_ {.#None}]}
    (///.failure (format "Unbound type-var " (%.nat id)))

    {try.#Failure _}
    (///.failure (format "Unknown type-var " (%.nat id)))
    ))

(the (implicit_type var_name)
  (-> Symbol
      (Meta Type))
  (do ///.monad
    [raw_type (///.type var_name)
     compiler ///.compiler_state]
    (when raw_type
      {.#Var id}
      (type_var id (its .#type_context compiler))

      _
      (in raw_type))))

(the (member_type idx sig_type)
  (-> Nat Type
      (Check Type))
  (when sig_type
    {.#Named _ sig_type'}
    (member_type idx sig_type')

    {.#Apply arg func}
    (when (//.applied (list arg) func)
      {.#None}
      (check.failure (format "Cannot apply type " (%.type func) " to type " (%.type arg)))

      {.#Some sig_type'}
      (member_type idx sig_type'))

    {.#Product left right}
    (if (n.= 0 idx)
      (of check.monad in left)
      (member_type (-- idx) right))

    _
    (if (n.= 0 idx)
      (of check.monad in sig_type)
      (check.failure (format "Cannot find member type " (%.nat idx) " for " (%.type sig_type))))))

(the (member_name member)
  (-> Symbol
      (Meta Symbol))
  (when member
    ["" simple_name]
    (///.either (do ///.monad
                  [member (///.normal member)
                   _ (///.slot member)]
                  (in member))
                (do [! ///.monad]
                  [this_module_name ///.current_module_name
                   imp_mods (///.imported_modules this_module_name)
                   tag_lists (monad.each ! ///.tag_lists imp_mods)
                   .let [tag_lists (|> tag_lists list#conjoint (list#each product.left) list#conjoint)
                         candidates (list.only (|>> product.right (text#= simple_name))
                                               tag_lists)]]
                  (when candidates
                    {.#End}
                    (///.failure (format "Unknown slot: " (%.symbol member)))
                    
                    {.#Item winner {.#End}}
                    (in winner)
                    
                    _
                    (///.failure (format "Too many candidate slots: " (%.list %.symbol candidates))))))

    _
    (of ///.monad in member)))

(the (implicit_member member)
  (-> Symbol
      (Meta [Nat Type]))
  (do ///.monad
    [member (member_name member)
     [lefts,right? sig_type] (///.slot member)]
    (when lefts,right?
      {.#Some [lefts right? family]}
      (in [(if right?
             (++ lefts)
             lefts)
           sig_type])
      
      {.#None}
      (in [0 sig_type]))))

(the (compatible_type? interface candidate)
  (-> Type Type
      Bit)
  (with_expansions [<found?> (//#= interface candidate)]
    (<| (or <found?>)

        (let [[parameters candidate] (//.flat_univ_q candidate)])
        (or <found?>)

        (let [[inputs candidate] (//.flat_function candidate)])
        (or <found?>)

        (let [[candidate parameters] (//.flat_application candidate)])
        (or <found?>)
        
        (let [candidate (//.de_aliased candidate)])
        <found?>)))

(the (available_definitions sig_type source_module target_module constants aggregate)
  (-> Type Text Text (List [Text [Bit Definition]])
      (-> (List [Symbol Type]) (List [Symbol Type])))
  (list#mix (function (_ [name [exported? [def_type def_value]]] aggregate)
              (if (and (or (text#= target_module source_module)
                           exported?)
                       (compatible_type? sig_type def_type))
                {.#Item [[source_module name] def_type] aggregate}
                aggregate))
            aggregate
            constants))

(the (local_env sig_type)
  (-> Type
      (Meta (List [Symbol Type])))
  (do ///.monad
    [local_batches ///.locals
     .let [total_locals (list#mix (function (_ [name type] table)
                                    (try.else table (dictionary.has' name type table)))
                                  (is (Dictionary Text Type)
                                      (dictionary.empty text.hash))
                                  (list#conjoint local_batches))]]
    (in (|> total_locals
            dictionary.entries
            (list.all (function (_ [name type])
                        (if (compatible_type? sig_type type)
                          {.#Some [["" name] type]}
                          {.#None})))))))

(the (local_structs sig_type)
  (-> Type
      (Meta (List [Symbol Type])))
  (do [! ///.monad]
    [this_module_name ///.current_module_name
     definitions (///.resolved_globals this_module_name)]
    (in (available_definitions sig_type this_module_name this_module_name definitions {.#End}))))

(the (imported_structs sig_type)
  (-> Type
      (Meta (List [Symbol Type])))
  (do [! ///.monad]
    [this_module_name ///.current_module_name
     imported_modules (///.imported_modules this_module_name)
     accessible_definitions (monad.each ! ///.resolved_globals imported_modules)]
    (in (list#mix (function (_ [imported_module definitions] tail)
                    (available_definitions sig_type imported_module this_module_name definitions tail))
                  {.#End}
                  (list.zipped_2 imported_modules accessible_definitions)))))

(the (on_argument arg func)
  (-> Type Type
      (Check Type))
  (when func
    {.#Named _ func'}
    (on_argument arg func')

    {.#Universal _}
    (do check.monad
      [[id var] check.var]
      (|> func
          (//.applied (list var))
          maybe.trusted
          (on_argument arg)))

    {.#Function input output}
    (do check.monad
      [_ (check.check input arg)]
      (in output))

    _
    (check.failure (format "Invalid function type: " (%.type func)))))

(the (concrete_type type)
  (-> Type
      (Check [(List Nat) Type]))
  (when type
    {.#Universal _}
    (do check.monad
      [[id var] check.var
       [ids final_output] (concrete_type (maybe.trusted (//.applied (list var) type)))]
      (in [{.#Item id ids}
           final_output]))
    
    _
    (of check.monad in [(list) type])))

(the (ensure_function_application! member_type input_types expected_output)
  (-> Type (List Type) Type
      (Check []))
  (do check.monad
    [actual_output (monad.mix check.monad ..on_argument member_type input_types)]
    (check.check expected_output actual_output)))

(every Instance
  (Rec Instance
    (Record
     [#constructor Symbol
      #dependencies (List Instance)])))

(the (candidate_provision provision context dep alts)
  (-> (-> Lux Type_Context Type (Check Instance))
      Type_Context Type (List [Symbol Type])
      (Meta (List Instance)))
  (do ///.monad
    [compiler ///.compiler_state]
    (when (|> alts
              (list#each (function (_ [alt_name alt_type])
                           (when (check.value context
                                              (do [! check.monad]
                                                [[tvars alt_type] (concrete_type alt_type)
                                                 .let [[deps alt_type] (//.flat_function alt_type)]
                                                 _ (check.check dep alt_type)
                                                 context' check.context
                                                 =deps (monad.each ! (provision compiler context') deps)]
                                                (in =deps)))
                             {.#Left error}
                             (list)

                             {.#Right =deps}
                             (list [alt_name =deps]))))
              list#conjoint)
      {.#End}
      (///.failure (format "No candidates for provisioning: " (%.type dep)))

      found
      (in found))))

(the (provision sig_type compiler context dep)
  (-> Type Lux Type_Context Type
      (Check Instance))
  (when (///.value compiler
                   (all ///.either
                        (do ///.monad [alts (..local_env sig_type)] (..candidate_provision (provision sig_type) context dep alts))
                        (do ///.monad [alts (..local_structs sig_type)] (..candidate_provision (provision sig_type) context dep alts))
                        (do ///.monad [alts (..imported_structs sig_type)] (..candidate_provision (provision sig_type) context dep alts))))
    {.#Left error}
    (check.failure error)

    {.#Right candidates}
    (when candidates
      {.#End}
      (check.failure (format "No candidates for provisioning: " (%.type dep)))

      {.#Item winner {.#End}}
      (of check.monad in winner)

      _
      (check.failure (format "Too many candidates for provisioning: " (%.type dep) " --- " (%.list (|>> product.left %.symbol) candidates))))
    ))

(the (candidate_alternatives sig_type member_idx input_types output_type alts)
  (-> Type Nat (List Type) Type (List [Symbol Type])
      (Meta (List Instance)))
  (do ///.monad
    [compiler ///.compiler_state
     context ///.type_context]
    (when (|> alts
              (list#each (function (_ [alt_name alt_type])
                           (when (<| (check.value context)
                                     (do [! check.monad]
                                       [[tvars alt_type] (concrete_type alt_type)
                                        .let [[deps alt_type] (//.flat_function alt_type)]
                                        _ (check.check alt_type sig_type)
                                        member_type (member_type member_idx alt_type)
                                        _ (ensure_function_application! member_type input_types output_type)
                                        context' check.context
                                        =deps (monad.each ! (provision sig_type compiler context') deps)]
                                       (in =deps)))
                             {.#Left error}
                             (list)

                             {.#Right =deps}
                             (list [alt_name =deps]))))
              list#conjoint)
      {.#End}
      (///.failure (format "No alternatives for " (%.type (//.function input_types output_type))))

      found
      (in found))))

(the (alternatives sig_type member_idx input_types output_type)
  (-> Type Nat (List Type) Type
      (Meta (List Instance)))
  (let [test (candidate_alternatives sig_type member_idx input_types output_type)]
    (all ///.either
         (do ///.monad [alts (..local_env sig_type)] (test alts))
         (do ///.monad [alts (..local_structs sig_type)] (test alts))
         (do ///.monad [alts (..imported_structs sig_type)] (test alts)))))

(the (var? input)
  (-> Code
      Bit)
  (when input
    [_ {.#Symbol _}]
    #1

    _
    false))

(the (pair_list [l r])
  (All (_ of)
    (-> [of of]
        (List of)))
  (list l r))

(the (instance$ [constructor dependencies])
  (-> Instance
      Code)
  (when dependencies
    {.#End}
    (code.symbol constructor)

    _
    (` ((, (code.symbol constructor)) (,* (list#each instance$ dependencies))))))

(the .public any
  (syntax (_ [member <code>.symbol
              args (<>.or (<>.and (<>.some <code>.symbol) <code>.end)
                          (<>.and (<>.some <code>.any) <code>.end))])
    (when args
      {.#Left [args _]}
      (do [! ///.monad]
        [[member_idx sig_type] (..implicit_member member)
         input_types (monad.each ! ..implicit_type args)
         output_type ///.expected_type
         chosen_ones (alternatives sig_type member_idx input_types output_type)]
        (when chosen_ones
          {.#End}
          (///.failure (format "No implementation could be found for member: " (%.symbol member)))

          {.#Item chosen {.#End}}
          (in (list (` (.of (, (instance$ chosen))
                            (, (code.local (product.right member)))
                            (,* (list#each code.symbol args))))))

          _
          (///.failure (format "Too many implementations available: "
                               (|> chosen_ones
                                   (list#each (|>> product.left %.symbol))
                                   (text.interposed ", "))
                               " --- for type: " (%.type sig_type)))))

      {.#Right [args _]}
      (do [! ///.monad]
        [labels (|> (macro.symbol "g!parameter")
                    (list.repeated (list.size args))
                    (monad.all !))]
        (in (list (` (let [(,* (|> args (list.zipped_2 labels) (list#each ..pair_list) list#conjoint))]
                       (..any (, (code.symbol member)) (,* labels)))))))
      )))

(the (implicit_bindings amount)
  (-> Nat
      (Meta (List Code)))
  (|> (macro.symbol "g!implicit")
      (list.repeated amount)
      (monad.all ///.monad)))

(the .public with
  (syntax (_ [implementations (<code>.tuple (<>.many <code>.any))
              body <code>.any])
    (do ///.monad
      [g!implicit+ (implicit_bindings (list.size implementations))]
      (in (list (` (let [(,* (|> (list.zipped_2 g!implicit+ implementations)
                                 (list#each (function (_ [g!implicit implementation])
                                              (list g!implicit implementation)))
                                 list#conjoint))]
                     (, body))))))))

(the .public implicitly
  (syntax (_ [implementations (<>.many <code>.any)])
    (do ///.monad
      [g!implicit+ (implicit_bindings (list.size implementations))]
      (in (|> (list.zipped_2 g!implicit+ implementations)
              (list#each (function (_ [g!implicit implementation])
                           (` (the .private (, g!implicit)
                                (, implementation))))))))))
