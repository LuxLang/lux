... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except try except with type)
   [abstract
    [functor (.only Functor)]
    [apply (.only Apply)]
    ["[0]" monad (.only Monad do)]]
   [control
    ["[0]" maybe]
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception (.only Exception)]
    [function
     ["[0]" mixin (.only Mixin)]]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]
     ["[0]" set (.only Set)]]]
   [math
    [number
     ["n" natural (.use "[1]#[0]" base_10)]]]
   [meta
    [macro
     ["^" pattern]
     ["[0]" template]]]]]
 ["[0]" // (.only)
  ["[0]" environment (.only Environment)]])

(the !n#=
  (template.macro (_ ,super ,sub)
    [(.i64_=# (.is .Natural ,super)
              (.is .Natural ,sub))]))

(exception.the .public (invalid_type_reification [funcT argT])
  (Exception [Type Type])
  (exception.report
   (list ["Type function" (//.absolute_injection funcT)]
         ["Type argument" (//.absolute_injection argT)])))

(exception.the .public (type_check_failed [super sub])
  (Exception [Type Type])
  (exception.report
   (list ["Super" (//.absolute_injection super)]
         ["Sub" (//.absolute_injection sub)])))

(every .public (Check of)
  (-> Type_Context
      (Try [Type_Context of])))

(the .public functor
  (Functor Check)
  (implementation
   (the (each f fa)
     (function (_ context)
       (when (fa context)
         {try.#Success [context' output]}
         {try.#Success [context' (f output)]}

         {try.#Failure error}
         {try.#Failure error})))))

(the .public apply
  (Apply Check)
  (implementation
   (the functor ..functor)

   (the (on fa ff)
     (function (_ context)
       (when (ff context)
         {try.#Success [context' f]}
         (when (fa context')
           {try.#Success [context'' a]}
           {try.#Success [context'' (f a)]}

           {try.#Failure error}
           {try.#Failure error})

         {try.#Failure error}
         {try.#Failure error})))
   ))

(the .public monad
  (Monad Check)
  (implementation
   (the functor ..functor)

   (the (in x)
     (function (_ context)
       {try.#Success [context x]}))

   (the (conjoint ffa)
     (function (_ context)
       (when (ffa context)
         {try.#Success [context' fa]}
         (fa context')

         {try.#Failure error}
         {try.#Failure error})))))

(use "check#[0]" ..monad)

(every Assumption
  (Record
   [#super Type
    #sub Type]))

... https://en.wikipedia.org/wiki/Subsumption
(every (Subsumption of)
  (Mixin [(List Assumption) of of]
         (Check (List Assumption))))

(every (Checker of)
  (-> [(List Assumption) of of]
      (Check (List Assumption))))

(the .public (value context check)
  (for_any (_ of)
    (-> Type_Context (Check of)
        (Try of)))
  (|> context
      check
      (try#each product.right)))

(the .public (failure message)
  (for_any (_ of)
    (-> Text
        (Check of)))
  (function (_ context)
    {try.#Failure message}))

(the .public (assertion message test)
  (-> Text Bit
      (Check Any))
  (function (_ context)
    (if test
      {try.#Success [context []]}
      {try.#Failure message})))

(the .public (except exception message)
  (for_any (_ ex of)
    (-> (Exception ex) ex
        (Check of)))
  (..failure (exception.error exception message)))

(the .public existential
  (Check [Natural Type])
  (function (_ context)
    (let [id (its .#ex_counter context)]
      {try.#Success [(revised .#ex_counter ++ context)
                     [id {.#Opaque id}]]})))

(the (query it)
  (All (_ of)
    (-> (environment.Query of)
        (Check of)))
  (function (_ context)
    (|> context
        (its .#var_bindings)
        it
        (try#each (|>> [context])))))

(the binding
  (-> //.Variable
      (Check environment.Binding))
  (|>> environment.binding
       ..query))

(the .public type
  (-> //.Variable
      (Check Type))
  (|>> environment.type
       ..query))

(the (change it)
  (-> environment.Change
      (Check Any))
  (function (_ context)
    (|> context
        (its .#var_bindings)
        it
        (try#each (function (_ environment)
                    [(has .#var_bindings environment context)
                     []])))))

(the (new variable type)
  (-> //.Variable Type
      (Check Any))
  (|> (environment.new variable type)
      ..change))

(the (changed type variable)
  (-> //.Variable environment.Binding
      (Check Any))
  (|> (environment.changed type variable)
      ..change))

(the .public var
  (Check [//.Variable Type])
  (function (_ context)
    (let [id (its .#var_counter context)]
      {try.#Success [(|> context
                         (revised .#var_counter ++)
                         (revised .#var_bindings (environment.has id)))
                     [id {.#Variable id}]]})))

(the (on argT funcT)
  (-> Type Type
      (Check Type))
  (when funcT
    {.#Variable func_id}
    (do ..monad
      [?funcT' (..binding func_id)]
      (when ?funcT'
        {.#Some funcT'}
        (on argT funcT')

        _
        (except ..invalid_type_reification [funcT argT])))

    {.#Apply argT' funcT'}
    (do ..monad
      [funcT'' (on argT' funcT')]
      (on argT funcT''))

    _
    (when (//.applied (list argT) funcT)
      {.#Some output}
      (check#in output)

      _
      (except ..invalid_type_reification [funcT argT]))))

... TODO: Optimize this by not using sets anymore.
(the ring
  (-> //.Variable
      (Check (Set //.Variable)))
  (|>> environment.ring
       ..query
       (check#each (set.of_list n.hash))))

(the .public (linked? @0 @1)
  (-> //.Variable //.Variable
      (Check Bit))
  (check#each (function (_ it)
                (set.member? it @1))
              (..ring @0)))

(exception.the .public (cannot_identify var)
  (Exception //.Variable)
  (exception.report
   (list ["Variable" (n#injection var)])))

(the .public (identity aliases @)
  (-> (List //.Variable) //.Variable
      (Check Type))
  (do [! ..monad]
    [:bound: (..binding @)]
    (when :bound:
      {.#Some :bound:}
      (in :bound:)

      {.#None}
      (do !
        [existing_aliases (..ring @)]
        (if (n.< 2 (set.size existing_aliases))
          (..except ..cannot_identify [@])
          (do !
            [.let [forbidden_aliases (set.of_list n.hash (list.partial @ aliases))
                   allowed_aliases (set.difference forbidden_aliases existing_aliases)]]
            (when (set.list allowed_aliases)
              {.#Item identity _}
              (in {.#Variable identity})
              
              {.#None}
              (..except ..cannot_identify [@]))))))))

(the (erase! @)
  (-> //.Variable
      (Check Any))
  (function (_ context)
    {try.#Success [(revised .#var_bindings
                            (list#mix (is (//.let [binding [Natural (Maybe Type)]]
                                            (-> binding
                                                (List binding)
                                                (List binding)))
                                          (function (_ in out)
                                            (let [[@var :var:] in]
                                              (if (n.= @ @var)
                                                out
                                                (list.partial in out)))))
                                      (is (List [Natural (Maybe Type)])
                                          (list)))
                            context)
                   []]}))

(the .public (forget! @)
  (-> //.Variable
      (Check Any))
  (do [! ..monad]
    [ring (|> (environment.ring @)
              ..query)]
    (when ring
      (list)
      (in [])
      
      (list @me)
      (erase! @me)
      
      (list @other @me)
      (do !
        [_ (..changed @other (environment.un_bound))]
        (erase! @me))
      
      (list.partial @prev _)
      (when (list.reversed ring)
        (list.partial @me @next _)
        (do !
          [_ (..changed @prev (environment.bound {.#Variable @next}))
           _ (..changed @next (environment.bound {.#Variable @prev}))]
          (erase! @me))

        _
        (undefined)))))

(the .public (try it)
  (for_any (_ of)
    (-> (Check of)
        (Check (Try of))))
  (function (_ context)
    {try.#Success (when (it context)
                    {try.#Success [context' output]}
                    [context' {try.#Success output}]

                    {try.#Failure error}
                    [context {try.#Failure error}])}))

(the .public fresh_context
  Type_Context
  [.#var_counter 0
   .#ex_counter 0
   .#var_bindings environment.empty])

(the (either left right)
  (for_any (_ of)
    (-> (Check of) (Check of)
        (Check of)))
  (function (_ context)
    (when (left context)
      {try.#Failure _}
      (right context)

      output
      output)))

(the (assumed? [e a] assumptions)
  (-> Assumption (List Assumption)
      Bit)
  (list.any? (function (_ [e' a'])
               (and (//.= e e')
                    (//.= a a')))
             assumptions))

... TODO: "if_can_bind" can be optimized...
(the (if_can_bind id type then else)
  (for_any (_ of)
    (-> //.Variable Type (Check of) (-> Type (Check of))
        (Check of)))
  (all either
       (do ..monad
         [_ (..new id type)]
         then)
       (do [! ..monad]
         [ring (..ring id)
          _ (..assertion "" (n.> 1 (set.size ring)))
          _ (monad.each ! (function (_ variable)
                            (..changed variable (environment.bound type)))
                        (set.list ring))]
         then)
       (do ..monad
         [?bound (..binding id)]
         (else (maybe.else {.#Variable id} ?bound)))))

(the (two left right)
  (-> //.Variable //.Variable
      (Check Any))
  (|> (environment.two left right)
      ..change))

(the (three interpose to from)
  (-> //.Variable //.Variable //.Variable
      (Check Any))
  (|> (environment.three interpose to from)
      ..change))

... TODO: Can be optimized...
(the (variable_on_variable complete [assumptions idE idA])
  (-> (Checker Type)
      (Checker //.Variable))
  (if (!n#= idE idA)
    (check#in assumptions)
    (do [! ..monad]
      [ebound (..query (environment.its idE))
       abound (..query (environment.its idA))]
      (when [ebound abound]
        ... Link the 2 variables circularly
        [(environment.un_bound) (environment.un_bound)]
        (do !
          [_ (..two idE idA)]
          (in assumptions))

        ... Interpose new variable between 2 existing links
        [(environment.bound etype) (environment.un_bound)]
        (when etype
          {.#Variable targetE}
          (do !
            [_ (..three idA targetE idE)]
            (in assumptions))

          _
          (complete [assumptions etype {.#Variable idA}]))

        ... Interpose new variable between 2 existing links
        [(environment.un_bound) (environment.bound atype)]
        (when atype
          {.#Variable targetA}
          (do !
            [_ (..three idE targetA idA)]
            (in assumptions))

          _
          (complete [assumptions {.#Variable idE} atype]))

        [(environment.bound etype) (environment.bound atype)]
        (`` (when [etype atype]
              [{.#Variable targetE} {.#Variable targetA}]
              (do !
                [ringE (..ring idE)
                 ringA (..ring idA)]
                (if (of set.equivalence = ringE ringA)
                  (in assumptions)
                  ... Fuse 2 rings
                  (do !
                    [_ (monad.mix ! (function (_ interpose to)
                                      (do !
                                        [_ (..three interpose to idE)]
                                        (in interpose)))
                                  targetE
                                  (set.list ringA))]
                    (in assumptions))))

              (,, (template.with [<pattern> <id> <type>]
                    [<pattern>
                     (do !
                       [ring (..ring <id>)
                        _ (monad.each ! (function (_ variable)
                                          (..changed variable (environment.bound <type>)))
                                      (set.list ring))]
                       (in assumptions))]

                    [[{.#Variable _} _] idE atype]
                    [[_ {.#Variable _}] idA etype]))
              
              _
              (complete [assumptions etype atype])))))))

(the silent_failure!
  Check
  (..failure ""))

... TODO: Can be optimized...
(the (reification_on_reification complete [assumptions super sub])
  (-> (Checker Type)
      (Checker [Type Type]))
  (let [[super_parameter super_abstraction] super
        [sub_parameter sub_abstraction] sub]
    (when [super_abstraction sub_abstraction]
      [{.#Opaque exE} {.#Opaque exA}]
      (if (!n#= exE exA)
        (complete [assumptions super_parameter sub_parameter])
        ..silent_failure!)

      [{.#Universal _ _} {.#Opaque _}]
      (do ..monad
        [super' (..on super_parameter super_abstraction)]
        (complete [assumptions super' {.#Apply sub}]))

      [{.#Opaque _} {.#Universal _ _}]
      (do ..monad
        [sub' (..on sub_parameter sub_abstraction)]
        (complete [assumptions {.#Apply super} sub']))

      [{.#Apply [super_parameter' super_abstraction']} {.#Opaque _}]
      (do ..monad
        [super_abstraction'' (..on super_parameter' super_abstraction')]
        (complete [assumptions {.#Apply [super_parameter super_abstraction'']} {.#Apply sub}]))

      [{.#Opaque _} {.#Apply [sub_parameter' sub_abstraction']}]
      (do ..monad
        [sub_abstraction'' (..on sub_parameter' sub_abstraction')]
        (complete [assumptions {.#Apply super} {.#Apply [sub_parameter sub_abstraction'']}]))

      (^.or [{.#Opaque _} _] [_ {.#Opaque _}])
      (do ..monad
        [assumptions (complete [assumptions super_abstraction sub_abstraction])]
        (complete [assumptions super_parameter sub_parameter]))

      [{.#Variable id} _]
      (all ..either
           (do ..monad
             [super_abstraction' (..type id)]
             (complete [assumptions {.#Apply super_parameter super_abstraction'} {.#Apply sub}]))
           (when sub_abstraction
             {.#Universal _ _}
             (do ..monad
               [sub' (..on sub_parameter sub_abstraction)]
               (complete [assumptions {.#Apply super} sub']))
             
             {.#Opaque exA}
             (do ..monad
               [assumptions (complete [assumptions super_abstraction sub_abstraction])]
               (complete [assumptions super_parameter sub_parameter]))

             _
             (do ..monad
               [assumptions (complete [assumptions super_abstraction sub_abstraction])
                super' (..on super_parameter sub_abstraction)
                sub' (..on sub_parameter sub_abstraction)]
               (complete [assumptions super' sub']))))

      [_ {.#Variable id}]
      (all ..either
           (do ..monad
             [sub_abstraction' (..type id)]
             (complete [assumptions {.#Apply super} {.#Apply sub_parameter sub_abstraction'}]))
           (do ..monad
             [assumptions (complete [assumptions super_abstraction sub_abstraction])
              super' (..on super_parameter super_abstraction)
              sub' (..on sub_parameter super_abstraction)]
             (complete [assumptions super' sub'])))

      _
      ..silent_failure!)))

(the same
  (Subsumption Type)
  (function (_ partial complete it)
    (let [[assumptions super sub] it]
      (if (for .php
               ... TODO: Remove this once JPHP is gone.
               false
               (or (same? super sub)
                   (//.= super sub)))
        (check#in assumptions)
        (<<| (exception.with ..type_check_failed [super sub])
             (partial it))))))

(the composite
  (Subsumption Type)
  (function (_ partial complete it)
    (let [[assumptions super sub] it]
      (`` (when [super sub]
            (,, (template.with [<composite>]
                  [[{<composite> eL eR} {<composite> aL aR}]
                   (do ..monad
                     [assumptions (complete [assumptions eL aL])]
                     (complete [assumptions eR aR]))]

                  [.#Sum]
                  [.#Product]))
            
            [{.#Function eI eO} {.#Function aI aO}]
            (do ..monad
              [assumptions (complete [assumptions aI eI])]
              (complete [assumptions eO aO]))

            _
            (partial it))))))

(the variable
  (Subsumption Type)
  (function (_ partial complete it)
    (let [[assumptions super sub] it]
      (when [super sub]
        [{.#Variable idE} {.#Variable idA}]
        (variable_on_variable complete [assumptions idE idA])
        
        [{.#Variable id} _]
        (if_can_bind id sub
                     (check#in assumptions)
                     (function (_ bound)
                       (complete [assumptions bound sub])))
        
        [_ {.#Variable id}]
        (if_can_bind id super
                     (check#in assumptions)
                     (function (_ bound)
                       (complete [assumptions super bound])))

        _
        (partial it)))))

(the !text#=
  (template.macro (_ super sub)
    [(.text_=# super sub)]))

(the opaque
  (Subsumption Type)
  (function (_ partial complete it)
    (let [[assumptions super sub] it]
      (when [super sub]
        [{.#Nominal e_name e_params} {.#Nominal a_name a_params}]
        (if (!text#= e_name a_name)
          (loop (again [assumptions assumptions
                        e_params e_params
                        a_params a_params])
            (when [e_params a_params]
              [{.#End} {.#End}]
              (check#in assumptions)
              
              [{.#Item e_head e_tail} {.#Item a_head a_tail}]
              (do ..monad
                [assumptions' (complete [assumptions e_head a_head])]
                (again assumptions' e_tail a_tail))

              _
              ..silent_failure!))
          ..silent_failure!)

        [{.#Opaque e!id} {.#Opaque a!id}]
        (if (!n#= e!id a!id)
          (check#in assumptions)
          ..silent_failure!)

        [{.#Named _ ?etype} _]
        (complete [assumptions ?etype sub])

        [_ {.#Named _ ?atype}]
        (complete [assumptions super ?atype])

        _
        (partial it)))))

(the reification
  (Subsumption Type)
  (function (_ partial complete it)
    (let [[assumptions super sub] it]
      (`` (when [super sub]
            (,, (template.with [<fE> <fA>]
                  [[{.#Apply aE <fE>} {.#Apply aA <fA>}]
                   (reification_on_reification complete [assumptions [aE <fE>] [aA <fA>]])]

                  [F1 {.#Opaque ex}]
                  [{.#Opaque exE} fA]
                  [fE {.#Variable idA}]
                  [{.#Variable idE} fA]))
            
            [{.#Apply A F} _]
            (let [new_assumption [super sub]]
              (if (assumed? new_assumption assumptions)
                (check#in assumptions)
                (do ..monad
                  [super' (..on A F)]
                  (complete [{.#Item new_assumption assumptions} super' sub]))))

            [_ {.#Apply A F}]
            (do ..monad
              [sub' (..on A F)]
              (complete [assumptions super sub']))

            _
            (partial it))))))

(the quantification
  (Subsumption Type)
  (function (_ partial complete it)
    (let [[assumptions super sub] it]
      (`` (when [super sub]
            ... TODO: Refactor-away as cold-code
            (,, (template.with [<tag> <instancer>]
                  [[{<tag> _} _]
                   (do ..monad
                     [[_ paramT] <instancer>
                      super' (..on paramT super)]
                     (complete [assumptions super' sub]))]

                  [.#Universal ..existential]
                  [.#Existential ..var]))

            ... TODO: Refactor-away as cold-code
            (,, (template.with [<tag> <instancer>]
                  [[_ {<tag> _}]
                   (do ..monad
                     [[_ paramT] <instancer>
                      sub' (..on paramT sub)]
                     (complete [assumptions super sub']))]

                  [.#Universal ..var]
                  [.#Existential ..existential]))

            _
            (partial it))))))

(the else
  (Subsumption Type)
  (function (_ partial complete it)
    ..silent_failure!))

(the subsumption
  (Checker Type)
  (<| mixin.fixed
      (all mixin.mixed
           ..same
           ..composite
           ..variable
           ..opaque
           ..reification
           ..quantification
           ..else
           )))

(the .public (check super sub)
  (-> Type Type
      (Check Any))
  (..subsumption [(list) super sub]))

(the .public (subsumed? super sub)
  (-> Type Type
      Bit)
  (when (..value ..fresh_context
                 (..check super sub))
    {try.#Failure _}
    false

    {try.#Success _}
    true))

(the .public context
  (Check Type_Context)
  (function (_ context)
    {try.#Success [context context]}))

(the .public (with context)
  (-> Type_Context
      (Check Any))
  (function (_ _)
    {try.#Success [context []]}))

(the .public (clean aliases inputT)
  (-> (List //.Variable) Type
      (Check Type))
  (`` (when inputT
        {.#Nominal name paramsT+}
        (|> paramsT+
            (monad.each ..monad (clean aliases))
            (check#each (|>> {.#Nominal name})))

        (^.or {.#Parameter _}
              {.#Opaque _}
              {.#Named _})
        (check#in inputT)

        (,, (template.with [<tag>]
              [{<tag> leftT rightT}
               (do ..monad
                 [leftT' (clean aliases leftT)]
                 (|> (clean aliases rightT)
                     (check#each (|>> {<tag> leftT'}))))]

              [.#Sum]
              [.#Product]
              [.#Function]
              [.#Apply]))

        {.#Variable @it}
        (when aliases
          (list)
          (do ..monad
            [?subT (..binding @it)]
            (when ?subT
              {.#Some subT}
              (clean aliases subT)

              _
              (in inputT)))

          _
          (do ..monad
            [:it: (..try (..identity aliases @it))]
            (when :it:
              {try.#Success :it:}
              (when :it:
                {.#Variable _}
                (in inputT)

                _
                (clean aliases :it:))

              failure
              (in inputT))))

        (,, (template.with [<tag>]
              [{<tag> envT+ unquantifiedT}
               (do [! ..monad]
                 [envT+' (monad.each ! (clean aliases) envT+)
                  unquantifiedT' (clean aliases unquantifiedT)]
                 (in {<tag> envT+' unquantifiedT'}))]

              [.#Universal]
              [.#Existential]))
        )))
