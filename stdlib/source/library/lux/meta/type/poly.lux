... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... [PolyPâ€”a polytypic programming language extension](https://dl.acm.org/doi/10.1145/263699.263763)
... [Polytypic Programming in Haskell](https://www.researchgate.net/publication/2885193_Polytypic_Programming_in_Haskell)
... [Polytypic Programming](https://www.researchgate.net/publication/2272082_Polytypic_Programming)
... [Polytypic Programming With Ease](https://www.researchgate.net/publication/2854383_Polytypic_Programming_With_Ease)
... [Polytypic Genetic Programming](https://eprints.whiterose.ac.uk/117964/)
(.require
 [library
  [lux (.except has with macro)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    [error (.only error)]
    ["<>" projection (.use "[1]#[0]" monad)]
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["n" natural]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    ["[0]" macro (.only with_symbols)
     ["^" pattern]
     ["[0]" syntax]
     ["[0]" template]]]]]
 ["[0]" // (.only)
  ["?[1]" \\projection (.only Env)]
  ["/[1]" //]])

(exception.the (invalid [it])
  (Exception Type)
  (exception.report
   (list ["Type" (//.as_text it)])))

(the Poly
  (type (-> Type
            (Try Code))))

(the Composite
  (template.macro (_ ,of)
    [(-> Poly ,of
         (Try Code))]))

(every .public Complex
  (Variant
   {#Nested (Composite [Type Type])}
   {#Flat (Composite (List Type))}))

(the .public impossible
  (..error "Impossible."))

... https://en.wikipedia.org/wiki/N/A
(the .public (not_applicable _ _)
  (for_any (_ of)
    (Composite of))
  {try.#Failure ..impossible})

(the Specialization
  (type [Type Code]))

(the recursion_parameter
  (template.macro (_)
    [{.#Nominal "" {.#End}}]))

(the recursive
  (template.macro (_ ,type)
    [{.#Apply (..recursion_parameter)
              {.#Universal (list) ,type}}]))

(the recursion
  (template.macro (_)
    [{.#Apply (..recursion_parameter)
              {.#Parameter 0}}]))

(the polymorphic
  (template.macro (_ ,name ,non_quantified)
    [{.#Named ,name {.#Universal (list) ,non_quantified}}]))

(every Context
  (Dictionary Natural Code))

(the empty
  Context
  (dictionary.empty n.hash))

(the (has solution it)
  (-> Code
      (-> Context Context))
  (dictionary.has (dictionary.size it) solution it))

(the (with successor predecessors it)
  (-> Code (List Code)
      (-> Context Context))
  (let [[_ it] (list#mix (function (_ next [previous it])
                           [(list.partial next previous)
                            (|> it
                                (has (` ((, successor) (,* (list.reversed previous)))))
                                (has next))])
                         [(list) it]
                         predecessors)]
    it))

(the (specialized specializations it)
  (-> (List Specialization) Type
      (Maybe Code))
  (when specializations
    (list.partial [expected specialization] tail)
    (if (//.= expected it)
      {.#Some specialization}
      (specialized tail it))

    (list)
    {.#None}))

(every .public Polytypic
  (Record
   [#sum Complex
    #product Complex
    #function (Composite [Type Type])
    #apply (Maybe (Composite [Type Type]))
    #recursive (Composite [(List Code) Type])
    #recursion (Maybe (Composite [(List Code)]))
    #any (Maybe Code)
    #polymorphic (Maybe (Composite [(List Code) Natural Type]))
    #parameter (Maybe (Composite [Natural Natural]))
    #specializations (List Specialization)]))

(the default_apply
  (Composite [Type Type])
  (function (_ code [parameter abstraction])
    (do try.monad
      [abstraction (code abstraction)
       parameter (code parameter)]
      (in (` ((, abstraction) (, parameter)))))))

(the .public (nested combinator)
  (-> Code
      Complex)
  {#Nested (function (_ code [left right])
             (do try.monad
               [left (code left)
                right (code right)]
               (in (` ((, combinator) (, left) (, right))))))})

(every .public Flat
  (Record
   [#on_each Code
    #on_both Code
    #on_whole Code]))

(the .public (flat it)
  (-> Flat
      Complex)
  {#Flat (function (_ code parts)
           (do [! try.monad]
             [parts (monad.each ! code parts)]
             (in (` ((, (its #on_whole it))
                     (all (, (its #on_both it))
                          (,* (list#each (function (_ part)
                                           (` ((, (its #on_each it)) (, part))))
                                         parts))))))))})

(the .public (macro 'successor poly)
  (-> Code Polytypic
      Macro)
  (let [poly (is (-> Natural Code Context
                     Poly)
                 (function (code arity 'recursive context it)
                   (when (..specialized (its #specializations poly) it)
                     {.#Some code}
                     {try.#Success code}

                     {.#None}
                     (when it
                       {.#Sum sum}
                       (when (its #sum poly)
                         {#Nested for_sum}
                         (for_sum (code arity 'recursive context) sum)

                         {#Flat for_variant}
                         (for_variant (code arity 'recursive context) (//.flat_variant it)))

                       {.#Product product}
                       (when (its #product poly)
                         {#Nested for_product}
                         (for_product (code arity 'recursive context) product)

                         {#Flat for_record}
                         (for_record (code arity 'recursive context) (//.flat_tuple it)))

                       {.#Function it}
                       ((its #function poly) (code arity 'recursive context) it)

                       (..recursive it)
                       ((its #recursive poly) (code arity 'recursive context) [(list 'recursive) it])

                       (..recursion)
                       {try.#Success 'recursive}

                       {.#Apply it}
                       (when it
                         [{.#Parameter 1} {.#Parameter 0}]
                         (when (its #recursion poly)
                           {.#Some recursion}
                           (recursion (code arity 'recursive context) (list 'recursive))

                           {.#None}
                           ((maybe.else default_apply (its #apply poly))
                            (code arity 'recursive context)
                            it))

                         _
                         ((maybe.else default_apply (its #apply poly))
                          (code arity 'recursive context)
                          it))

                       {.#Parameter index}
                       (when (its #parameter poly)
                         {.#Some parameter}
                         (parameter (code arity 'recursive context) [arity index])

                         {.#None}
                         (when (dictionary.value index context)
                           {try.#Failure _}
                           (exception.except ..invalid [it])

                           success
                           success))
                       
                       (..polymorphic _ _)
                       (let [[arity non_quantified] (//.flat_univ_q (//.anonymous it))
                             'self (code.local "'self")]
                         (when (its #polymorphic poly)
                           {.#Some polymorphic}
                           (polymorphic (code arity 'self context) [(list 'self) arity non_quantified])

                           {.#None}
                           (do try.monad
                             [.let ['*parameters (list#each (|>> %.natural (%.message "_") code.local)
                                                            (list.indices arity))
                                    '*predecessors (list#each (|>> (,) ((, 'successor)) (`))
                                                              '*parameters)]
                              'body (code arity
                                          'self
                                          (with 'successor '*parameters context)
                                          non_quantified)]
                             (in (` (is (for_any ((, 'self) (,* '*parameters))
                                          (-> (,* '*predecessors)
                                              ((, 'successor) ((, (//.code it)) (,* '*parameters)))))
                                        (function ((, 'self) (,* '*parameters))
                                          (, 'body))))))))
                       
                       {.#Named name it}
                       (code arity 'recursive context it)

                       _
                       (when (its #any poly)
                         {.#Some any}
                         {try.#Success any}

                         _
                         (exception.except ..invalid [it]))))))]
    (syntax.macro (_ [type <code>.any])
      (macro.with_symbols ['recursive]
        (do ///.monad
          [type (///.eval Type type)
           .let [type (as Type type)]
           implementation (///.of_try (poly 0 'recursive ..empty type))]
          (in (list implementation)))))))
