... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except its has revised type)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception (.only Exception)]]
   [data
    [collection
     ["[0]" list]]]
   [math
    [number
     ["[0]" natural (.use "[1]#[0]" base_10)]]]
   [meta
    [macro
     ["^" pattern]
     ["[0]" template]]]]]
 ["[0]" //])

(every .public Binding
  (Maybe Type))

(the .public un_bound
  (template.macro (_)
    [{.#None}]))

(the .public bound
  (template.macro (_ ,type)
    [{.#Some ,type}]))

(template.with [,name]
  [(exception.the .public (,name [it])
     (Exception //.Variable)
     (exception.report
      (list ["Variable" (natural#injection it)])))]

  [not_known]
  [not_bound]
  )

(every .public Environment
  (List [//.Variable Binding]))

(the It ..Environment)

(the .public empty
  ..It
  (list))

(the .public (has variable)
  (-> //.Variable ..It
      ..It)
  (|>> (list.partial [variable (..un_bound)])))

(the variable#=
  (template.macro (_ ,super ,sub)
    [(.i64_=# (.is //.Variable ,super)
              (.is //.Variable ,sub))]))

(every .public (Query of)
  (-> ..It
      (Try of)))

(the .public (its expected it)
  (-> //.Variable
      (Query Binding))
  (when it
    (list.partial [actual var_type]
                  it')
    (if (variable#= expected actual)
      {try.#Success var_type}
      (its expected it'))

    (list)
    (exception.except ..not_known [expected])))

(the (revised expected binding it)
  (-> //.Variable Binding ..It
      (Try ..It))
  (when it
    (list.partial [actual var_type] it')
    (if (variable#= expected actual)
      {try.#Success (list.partial [actual binding]
                                  it')}
      (try#each (|>> (list.partial [actual var_type]))
                (revised expected binding it')))

    (list)
    (exception.except ..not_known [expected])))

(the .public (binding variable it)
  (-> //.Variable
      (Query Binding))
  (|> (..its variable it)
      (try#each (function (_ it)
                  (when it
                    (^.or (..bound {.#Variable _})
                          (..un_bound))
                    (..un_bound)

                    bound
                    bound)))))

(the .public (type variable it)
  (-> //.Variable
      (Query Type))
  (do try.monad
    [it (..binding variable it)]
    (when it
      (..bound it)
      (in it)

      un_bound
      (exception.except ..not_bound [variable]))))

(every .public Change
  (-> ..It
      (Try ..It)))

(exception.the .public (cannot_bind_again [variable wanted current])
  (Exception [//.Variable Type Type])
  (exception.report
   (list ["Variable" (natural#injection variable)]
         ["Wanted type" (//.absolute_injection wanted)]
         ["Current type" (//.absolute_injection current)])))

(the .public (new variable type it)
  (-> //.Variable Type
      Change)
  (do try.monad
    [binding (..its variable it)]
    (when binding
      (..un_bound)
      (..revised variable {.#Some type} it)

      (..bound current)
      (exception.except ..cannot_bind_again [variable type current]))))

(the .public (changed variable binding it)
  (-> //.Variable Binding
      Change)
  (do try.monad
    [variable_is_known! (..its variable it)]
    (..revised variable binding it)))

(every .public Ring
  (List //.Variable))

(the link
  (template.macro (_ ,it)
    [{.#Variable ,it}]))

(the .public (ring start it)
  (-> //.Variable
      (Query Ring))
  (loop (ring [current start
               output (list start)])
    (when (..its current it)
      {try.#Success (..bound type)}
      (when type
        (..link next)
        (if (variable#= start next)
          {try.#Success output}
          (ring next (list.partial next output)))
        
        invalid
        {try.#Success (list)})

      {try.#Success (..un_bound)}
      {try.#Success output}
      
      {try.#Failure error}
      {try.#Failure error})))

... TODO: Can be optimized...
(the .public (two left right it)
  (-> //.Variable //.Variable
      Change)
  (do try.monad
    [it (..new left {.#Variable right} it)]
    (..new right {.#Variable left} it)))

... TODO: Can be optimized...
(the .public (three interpose to from it)
  (-> //.Variable //.Variable //.Variable
      Change)
  (do try.monad
    [it (..changed from (..bound {.#Variable interpose}) it)]
    (..changed interpose (..bound {.#Variable to}) it)))
