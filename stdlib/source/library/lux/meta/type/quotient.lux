... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except type)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [control
    ["?" projection]]
   ["[0]" meta (.only)
    ["[0]" code
     ["<[1]>" \\projection]]
    ["[0]" macro (.only)
     ["[0]" syntax]
     ["[0]" template]]]]]
 ["[0]" // (.only)
  ["?[1]" \\projection]
  ["[0]" nominal]])

(nominal.every .public (Class super sub %)
  (-> super
      sub)

  (the .public class
    (for_any (_ super sub)
      (for_some (_ %)
        (-> (-> super sub)
            (Class super sub %))))
    (|>> nominal.abstraction))

  (nominal.every .public (Quotient super sub %)
    (Record
     [#value super
      #label sub])

    (the .public (quotient class value)
      (for_any (_ super sub %)
        (-> (Class super sub %) super
            (Quotient super sub %)))
      (nominal.abstraction
       [#value value
        #label ((nominal.representation Class class) value)]))

    (template.with [<name> <slot> <output>]
      [(the .public <name>
         (for_any (_ super sub %)
           (-> (Quotient super sub %)
               <output>))
         (|>> nominal.representation
              (its <slot>)))]

      [value #value super]
      [label #label sub]
      )
    )
  )

(the .public type
  (syntax.macro (_ [it <code>.any])
    (macro.with_symbols ['_ 'super 'sub '%]
      (do meta.monad
        [it (meta.eval Type (` (.type_of ((is (for_any ((, '_) (, 'super) (, 'sub) (, '%))
                                                (-> (..Class (, 'super) (, 'sub) (, '%))
                                                    (..Class (, 'super) (, 'sub) (, '%))))
                                              (|>>))
                                          (, it)))))
         [super sub %] (|> (as Type it)
                           (?//.value (?//.applied (?.after (?//.exactly ..Class)
                                                            (all ?.and ?//.any ?//.any ?//.any))))
                           meta.of_try)]
        (in (list (` (.type (..Quotient (, (//.code super))
                                        (, (//.code sub))
                                        (, (//.code %)))))))))))

(the .public (equivalence super)
  (for_any (_ super sub %)
    (-> (Equivalence sub)
        (Equivalence (..Quotient super sub %))))
  (implementation
   (the (= expected actual)
     (of super =
         (..label expected)
         (..label actual)))))
