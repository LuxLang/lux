(.require
 [library
  [lux (.except type)
   [abstract
    [equivalence (only Equivalence)]]
   [meta
    ["[0]" code
     ["<[1]>" \\parser]]
    [macro (.only with_symbols)
     [syntax (.only syntax)]]]]]
 ["[0]" // (.only)
  ["[0]" primitive (.except def)]])

(primitive.def .public (Class t c %)
  (-> t c)

  (def .public class
    (All (_ t c)
      (Ex (_ %)
        (-> (-> t c) (Class t c %))))
    (|>> abstraction))

  (primitive.def .public (Quotient t c %)
    (Record
     [#value t
      #label c])

    (def .public (quotient class value)
      (All (_ t c %)
        (-> (Class t c %) t
            (Quotient t c %)))
      (abstraction [#value value
                    #label ((representation Class class) value)]))

    (with_template [<name> <output> <slot>]
      [(def .public <name>
         (All (_ t c %) (-> (Quotient t c %) <output>))
         (|>> representation (the <slot>)))]

      [value t #value]
      [label c #label]
      )
    )
  )

(def .public type
  (syntax (_ [class <code>.any])
    ... TODO: Switch to the cleaner approach ASAP.
    (with_symbols [g!t g!c g!% g!_ g!:quotient:]
      (in (list (` (let [ ... (, g!_) (.is (.Ex ((, g!_) (, g!t) (, g!c) (, g!%))
                         ...               (..Class (, g!t) (, g!c) (, g!%)))
                         ...             (, class))
                         ]
                     (.when (.type_of (, class))
                       {.#Apply (, g!%) {.#Apply (, g!c) {.#Apply (, g!t) (, g!:quotient:)}}}
                       (.type_literal (..Quotient (, g!t) (, g!c) (, g!%)))

                       (, g!_)
                       (.undefined))))
                ... (` (//.by_example [(, g!t) (, g!c) (, g!%)]
                ...     (is (..Class (, g!t) (, g!c) (, g!%))
                ...         (, class))
                ...     (..Quotient (, g!t) (, g!c) (, g!%))))
                )))))

(def .public (equivalence super)
  (All (_ t c %) (-> (Equivalence c) (Equivalence (..Quotient t c %))))
  (implementation
   (def (= reference sample)
     (at super = (..label reference) (..label sample)))))
