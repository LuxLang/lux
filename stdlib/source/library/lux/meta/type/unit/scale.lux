... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except type)
   [math
    [number
     ["i" int]
     ["[0]" ratio (.only Ratio)]]]
   [meta
    ["[0]" code
     ["<[1]>" \\parser]]
    ["[0]" macro (.only)
     [syntax (.only syntax)]]]]]
 ["[0]" // (.only)
  ["/[1]" //]])

(.every .public (Scale s)
  (Interface
   (is (All (_ u) (-> (//.Measure Any u) (//.Measure s u)))
       up)
   (is (All (_ u) (-> (//.Measure s u) (//.Measure Any u)))
       down)
   (is Ratio
       ratio)))

(the .public (scale ratio)
  (Ex (_ s) (-> Ratio (Scale s)))
  (let [(open "/[0]") ratio]
    (implementation
     (the up
       (|>> //.number
            (i.* (.int /#numerator))
            (i./ (.int /#denominator))
            //.measure))
     (the down
       (|>> //.number
            (i.* (.int /#denominator))
            (i./ (.int /#numerator))
            //.measure))
     (the ratio
       ratio))))

(the .public (re_scaled from to measure)
  (All (_ si so u) (-> (Scale si) (Scale so) (//.Measure si u) (//.Measure so u)))
  (let [(open "/[0]") (ratio./ (of from ratio)
                               (of to ratio))]
    (|> measure
        //.number
        (i.* (.int /#numerator))
        (i./ (.int /#denominator))
        //.measure)))

(the .public type
  (syntax (_ [it <code>.any])
    (macro.with_symbols [g!a]
      (in (list (` (///.by_example [(, g!a)]
                     (is (..Scale (, g!a))
                         (, it))
                     (, g!a))))))))

(with_template [<order_of_magnitude> <up> <up_type> <down> <down_type>]
  [(the .public <up>
     (scale [ratio.#numerator <order_of_magnitude>
             ratio.#denominator 1]))
   
   (the .public <up_type>
     (let [[module _] (symbol .._)
           [_ short] (symbol <up_type>)]
       {.#Named [module short]
                (..type <up>)}))
   
   (the .public <down>
     (scale [ratio.#numerator 1
             ratio.#denominator <order_of_magnitude>]))
   
   (the .public <down_type>
     (let [[module _] (symbol .._)
           [_ short] (symbol <down_type>)]
       {.#Named [module short]
                (..type <down>)}))]

  [        1,000 kilo Kilo milli Milli]
  [    1,000,000 mega Mega micro Micro]
  [1,000,000,000 giga Giga nano  Nano ]
  )
