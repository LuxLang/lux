(.require
 [library
  [lux (.except static)
   ["[0]" debug]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only exception)]]
   [data
    [text
     ["%" \\format]]]
   [macro (.only with_symbols)
    ["[0]" syntax (.only syntax)]
    ["[0]" code
     ["<[1]>" \\parser]]]]]
 ["[0]" // (.only)
  ["[0]" primitive (.only primitive)]])

(exception .public (wrong_type [expected Type
                                actual Type])
  (exception.report
   "Expected" (%.type expected)
   "Actual" (%.type actual)))

(primitive .public Dynamic
  [Type Any]

  (def abstraction
    (-> [Type Any] Dynamic)
    (|>> primitive.abstraction))
  
  (def representation
    (-> Dynamic [Type Any])
    (|>> primitive.representation))

  (def .public dynamic
    (syntax (_ [value <code>.any])
      (with_symbols [g!value]
        (in (list (` (.let [(~ g!value) (~ value)]
                       ((~! ..abstraction) [(.type_of (~ g!value)) (~ g!value)]))))))))

  (def .public static
    (syntax (_ [type <code>.any
                value <code>.any])
      (with_symbols [g!type g!value]
        (in (list (` (.let [[(~ g!type) (~ g!value)] ((~! ..representation) (~ value))]
                       (.is ((~! try.Try) (~ type))
                            (.if (.at (~! //.equivalence) (~' =)
                                      (.type_literal (~ type)) (~ g!type))
                              {try.#Success (.as (~ type) (~ g!value))}
                              ((~! exception.except) ..wrong_type [(.type_literal (~ type)) (~ g!type)]))))))))))

  (def .public (format value)
    (-> Dynamic (Try Text))
    (let [[type value] (primitive.representation value)]
      (debug.representation type value)))
  )
