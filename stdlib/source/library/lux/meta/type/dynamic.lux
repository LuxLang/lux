(.require
 [library
  [lux (.except static)
   ["[0]" debug]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only exception)]]
   [data
    [text
     ["%" \\format]]]
   [meta
    ["[0]" code
     ["<[1]>" \\parser]]
    [macro (.only with_symbols)
     ["[0]" syntax (.only syntax)]]]]]
 ["[0]" // (.only)
  ["[0]" primitive (.only primitive)]])

(exception .public (wrong_type [expected Type
                                actual Type])
  (exception.report
   (list ["Expected" (%.type expected)]
         ["Actual" (%.type actual)])))

(with_expansions [<representation> [Type Any]]
  (primitive .public Dynamic
    <representation>
    
    (def .public dynamic
      (syntax (_ [value <code>.any])
        (with_symbols [g!value]
          (in (list (` (.let [(, g!value) (, value)]
                         (as Dynamic [(.type_of (, g!value)) (, g!value)]))))))))

    (def .public static
      (syntax (_ [type <code>.any
                  value <code>.any])
        (with_symbols [g!type g!value]
          (in (list (` (.let [[(, g!type) (, g!value)] (|> (, value)
                                                           (is Dynamic)
                                                           (as <representation>))]
                         (.is (try.Try (, type))
                              (.if (.at //.equivalence (,' =)
                                        (.type_literal (, type)) (, g!type))
                                {try.#Success (.as (, type) (, g!value))}
                                (exception.except ..wrong_type [(.type_literal (, type)) (, g!type)]))))))))))

    (def .public (format value)
      (-> Dynamic (Try Text))
      (let [[type value] (primitive.representation value)]
        (debug.representation type value)))
    ))
