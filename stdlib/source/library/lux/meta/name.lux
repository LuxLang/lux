... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [format (.only Format)]
    ["[0]" order (.only Order)]]
   [data
    ["[0]" text]
    ["[0]" product]]]])

(the with_template (.in_module# .prelude with_template))

... (every Name
...   [Text Text])

(with_template [<name>]
  [(the .public (<name> [module proper])
     (-> Name
         Text)
     <name>)]

  [[module]
   [proper]])

(the .public hash
  (Hash Name)
  (product.hash text.hash text.hash))

(the .public equivalence
  (Equivalence Name)
  (by ..hash equivalence))

(alias [=]
       ..equivalence)

(the .public order
  (Order Name)
  (implementation
   (the equivalence ..equivalence)
   (the (< [moduleP properP] [moduleS properS])
     (if (text.= moduleP moduleS)
         (by text.order < properP properS)
         (by text.order < moduleP moduleS)))))

(order.for [] Name ..order)

... https://en.wikipedia.org/wiki/Delimiter
(the .public delimiter
  ".")

(the .public absolute
  (Format Text Name)
  (implementation
   (the (as [module proper])
     (when module
       ""
       proper
       
       _
       (text module ..delimiter proper)))
   
   (the (of input)
     (when (text.all_split_by ..delimiter input)
       (list proper)
       {.:Right ["" proper]}

       (list module proper)
       {.:Right [module proper]}

       _
       {.:Left (text "Invalid format for Name: " input)}))))

(the .public (relative expected)
  (-> Text
      (Format Text Name))
  (implementation
   (the (as [module proper])
     (when module
       ""
       proper
       
       .prelude
       (text ..delimiter proper)
       
       _
       (text (if (text.= expected module)
                 ..delimiter
                 module)
             ..delimiter proper)))
   
   (the (of input)
     (when (text.all_split_by ..delimiter input)
       (list proper)
       {.:Right ["" proper]}

       (list "" proper)
       {.:Right [.prelude proper]}

       (list module proper)
       {.:Right [module proper]}

       (list "" "" proper)
       {.:Right [expected proper]}

       _
       {.:Left (text "Invalid format for Name: " input)}))))

(the with_monad (.in_module# .prelude with_monad))

(the .public of
  (let [meta:monad (.in_module# .prelude meta:monad)
        global_name (.in_module# .prelude global_name)
        code:text (.in_module# .prelude code:text)
        failure (.in_module# .prelude failure)]
    (macro (_ tokens)
      (when tokens
        (list {.:Name _ it})
        (with_monad meta:monad
          [module,proper (global_name it)
           .let [[module proper] module,proper]]
          (pure (list (` [(, (code:text module))
                          (, (code:text proper))]))))

        _
        (failure .wrong_syntax)))))

(the .public as_text
  (text.Injection Name)
  (by ..absolute as))

(the .public new
  (-> Text
      (Meta Code))
  (.in_module# .prelude generated_name))
