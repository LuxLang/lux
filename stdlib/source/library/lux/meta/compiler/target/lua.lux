... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Location Code Label
                if function or and not let local comment its when)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    ["[0]" enum]]
   [control
    ["|" pipe]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" natural]
     ["i" integer]
     ["d" decimal]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro
     ["[0]" syntax]
     ["[0]" template]
     ["[0]" expansion]]
    [type
     ["[0]" nominal]]]]])

... Added the carriage return for better Windows compatibility.
(the \n+
  Text
  (%.message text.carriage_return text.new_line))

(the nested
  (-> Text
      Text)
  (.let [nested_new_line (%.message text.new_line text.tab)]
    (|>> (%.message \n+)
         (text.replaced text.new_line nested_new_line))))

... https://en.wikipedia.org/wiki/Delimiter
(the input_delimiter ", ")

(nominal.every .public (Code brand)
  Text

  (the .public equivalence
    (for_any (_ brand)
      (Equivalence (Code brand)))
    (implementation
     (the (= expected actual)
       (by text.equivalence = (nominal.representation expected) (nominal.representation actual)))))

  (the .public hash
    (for_any (_ brand)
      (Hash (Code brand)))
    (implementation
     (the equivalence ..equivalence)
     (the hash (|>> nominal.representation (by text.hash hash)))))

  (the .public manual
    (-> Text
        Code)
    (|>> nominal.abstraction))

  (the .public code
    (-> (Code Any)
        Text)
    (|>> nominal.representation))

  (template.with [<type> <super>+]
    [(expansion.let [<brand> (template.name [<type> "'"])]
       (these (nominal.every (<brand> brand) Any)
              (`` (every .public <type> (|> Any <brand> (,, (template.spliced <super>+)))))))]
    
    [Expression [Code]]
    [Computation [Expression' Code]]
    [Location [Computation' Expression' Code]]
    [Statement [Code]]
    )

  (template.with [<type> <super>+]
    [(expansion.let [<brand> (template.name [<type> "'"])]
       (these (nominal.every <brand> Any)
              (`` (every .public <type> (|> <brand> (,, (template.spliced <super>+)))))))]

    [Literal [Computation' Expression' Code]]
    [Var [Location' Computation' Expression' Code]]
    [Access [Location' Computation' Expression' Code]]
    [Label [Code]]
    )

  (the .public nil
    Literal
    (nominal.abstraction "nil"))

  (the .public boolean
    (-> Bit
        Literal)
    (|>> (|.when
           #0 "false"
           #1 "true")
         nominal.abstraction))

  (the .public int
    (-> Integer
        Literal)
    ... Integers must be turned into hexadecimal to avoid quirks in how Lua parses integers.
    ... In particular, the number -9223372036854775808 will be incorrectly parsed as a float by Lua.
    (.let [to_hex (by n.hex injection)]
      (|>> .natural
           to_hex
           (%.message "0x")
           nominal.abstraction)))

  (the .public float
    (-> Decimal
        Literal)
    (|>> (|.if [(d.= d.positive_infinity)]
           [(|.new "(1.0/0.0)" [])]
           
           [(d.= d.negative_infinity)]
           [(|.new "(-1.0/0.0)" [])]
           
           [(d.= d.not_a_number)]
           [(|.new "(0.0/0.0)" [])]

           ... else
           [%.decimal (text.replaced "+" "")])
         nominal.abstraction))

  (the safe
    (-> Text
        Text)
    (`` (|>> (,, (template.with [<find> <replace>]
                   [(text.replaced <find> <replace>)]

                   ["\" "\\"]
                   [text.tab "\t"]
                   [text.vertical_tab "\v"]
                   [text.null "\0"]
                   [text.back_space "\b"]
                   [text.form_feed "\f"]
                   [text.new_line "\n"]
                   [text.carriage_return "\r"]
                   [text.double_quote (%.message "\" text.double_quote)]
                   ))
             )))

  (the .public string
    (-> Text
        Literal)
    (|>> ..safe
         (text.enclosed' text.double_quote)
         nominal.abstraction))

  (the .public multi
    (-> (List Expression)
        Expression)
    (|>> (list#each ..code)
         (text.interposed ..input_delimiter)
         nominal.abstraction))

  (the .public array
    (-> (List Expression)
        Literal)
    (|>> (list#each ..code)
         (text.interposed ..input_delimiter)
         (text.enclosed ["{" "}"])
         nominal.abstraction))

  (the .public table
    (-> (List [Text Expression])
        Literal)
    (|>> (list#each (.function (_ [key value])
                      (%.message key " = " (nominal.representation value))))
         (text.interposed ..input_delimiter)
         (text.enclosed ["({" "})"])
         nominal.abstraction))

  (the .public (item idx array)
    (-> Expression Expression
        Access)
    (nominal.abstraction
     (%.message "(" (nominal.representation array) ")[" (nominal.representation idx) "]")))

  (the .public (its field table)
    (-> Text Expression
        Access)
    (nominal.abstraction
     (%.message (nominal.representation table) "." field)))

  (the .public length
    (-> Expression
        Computation)
    (|>> nominal.representation
         (text.enclosed ["#(" ")"])
         nominal.abstraction))

  (the .public (apply args func)
    (-> (List Expression) Expression
        Computation)
    (|> args
        (list#each ..code)
        (text.interposed ..input_delimiter)
        (text.enclosed ["(" ")"])
        (%.message (nominal.representation func))
        nominal.abstraction))

  (the .public (do method args table)
    (-> Text (List Expression) Expression
        Computation)
    (|> args
        (list#each ..code)
        (text.interposed ..input_delimiter)
        (text.enclosed ["(" ")"])
        (%.message (nominal.representation table) ":" method)
        nominal.abstraction))

  (template.with [<op> <name>]
    [(the .public (<name> parameter subject)
       (-> Expression Expression
           Expression)
       (nominal.abstraction
        (%.message "("
                   (nominal.representation subject)
                   " " <op> " "
                   (nominal.representation parameter)
                   ")")))]

    ["==" =]
    ["<"  <]
    ["<=" <=]
    [">"  >]
    [">=" >=]
    ["+"  +]
    ["-"  -]
    ["*"  *]
    ["^"  ^]
    ["/"  /]
    ["//" //]
    ["%"  %]
    [".." concat]

    ["or"  or]
    ["and" and]
    
    ["|"   bit_or]
    ["&"   bit_and]
    ["~"   bit_xor]

    ["<<" bit_shl]
    [">>" bit_shr]
    )

  (template.with [<name> <unary>]
    [(the .public (<name> subject)
       (-> Expression
           Expression)
       (nominal.abstraction
        (%.message "(" <unary> " " (nominal.representation subject) ")")))]

    [not "not"]
    [opposite "-"]
    )

  (template.with [<name> <type>]
    [(the .public <name>
       (-> Text
           <type>)
       (|>> nominal.abstraction))]

    [var Var]
    [label Label]
    )

  (the .public ;
    (-> Expression
        Statement)
    (|>> nominal.representation
         nominal.abstraction))

  (the .public (then pre! post!)
    (-> Statement Statement
        Statement)
    (nominal.abstraction
     (%.message (nominal.representation pre!)
                \n+
                (nominal.representation post!))))

  (the locations
    (-> (List Location)
        Text)
    (|>> (list#each ..code)
         (text.interposed ..input_delimiter)))

  (the .public (local vars)
    (-> (List Var)
        Statement)
    (nominal.abstraction
     (%.message "local " (..locations vars))))

  (the .public (set vars value)
    (-> (List Location) Expression
        Statement)
    (nominal.abstraction
     (%.message (..locations vars) " = " (nominal.representation value))))

  (the .public (let vars value)
    (-> (List Var) Expression
        Statement)
    (nominal.abstraction
     (%.message "local " (..locations vars) " = " (nominal.representation value))))

  (the .public (local/1 var value)
    (-> Var Expression
        Statement)
    (nominal.abstraction
     (%.message "local " (nominal.representation var) " = " (nominal.representation value))))

  (the .public (if test then! else!)
    (-> Expression Statement Statement
        Statement)
    (nominal.abstraction
     (%.message "if " (nominal.representation test)
                \n+ "then" (..nested (nominal.representation then!))
                \n+ "else" (..nested (nominal.representation else!))
                \n+ "end")))

  (the .public (when test then!)
    (-> Expression Statement
        Statement)
    (nominal.abstraction
     (%.message "if " (nominal.representation test)
                \n+ "then" (..nested (nominal.representation then!))
                \n+ "end")))

  (the .public (while test body!)
    (-> Expression Statement
        Statement)
    (nominal.abstraction
     (%.message "while " (nominal.representation test) " do"
                (..nested (nominal.representation body!))
                \n+ "end")))

  (the .public (repeat until body!)
    (-> Expression Statement
        Statement)
    (nominal.abstraction
     (%.message "repeat"
                (..nested (nominal.representation body!))
                \n+ "until " (nominal.representation until))))

  (the .public (for_in vars source body!)
    (-> (List Var) Expression Statement
        Statement)
    (nominal.abstraction
     (%.message "for " (|> vars
                           (list#each ..code)
                           (text.interposed ..input_delimiter))
                " in " (nominal.representation source) " do"
                (..nested (nominal.representation body!))
                \n+ "end")))

  (the .public (for_step var from to step body!)
    (-> Var Expression Expression Expression Statement
        Statement)
    (nominal.abstraction
     (%.message "for " (nominal.representation var)
                " = " (nominal.representation from)
                ..input_delimiter (nominal.representation to)
                ..input_delimiter (nominal.representation step) " do"
                (..nested (nominal.representation body!))
                \n+ "end")))

  (the .public (return value)
    (-> Expression
        Statement)
    (nominal.abstraction
     (%.message "return " (nominal.representation value))))

  (the .public (closure args body!)
    (-> (List Var) Statement
        Expression)
    (|> (%.message "function " (|> args
                                   ..locations
                                   (text.enclosed ["(" ")"]))
                   (..nested (nominal.representation body!))
                   \n+ "end")
        (text.enclosed ["(" ")"])
        nominal.abstraction))

  (template.with [<name> <code> <binding>]
    [(the .public (<name> name args body!)
       (-> <binding> (List Var) Statement
           Statement)
       (nominal.abstraction
        (%.message <code> " " (nominal.representation name)
                   (|> args
                       ..locations
                       (text.enclosed ["(" ")"]))
                   (..nested (nominal.representation body!))
                   \n+ "end")))]

    [function "function" Location]
    [local_function "local function" Var]
    )

  (the .public break
    Statement
    (nominal.abstraction
     "break"))

  (the .public (set_label label)
    (-> Label
        Statement)
    (nominal.abstraction
     (%.message "::" (nominal.representation label) "::")))

  (the .public (go_to label)
    (-> Label
        Statement)
    (nominal.abstraction
     (%.message "goto " (nominal.representation label))))

  ... https://www.lua.org/pil/1.3.html
  (the .public (comment commentary on)
    (for_any (_ kind)
      (-> Text (Code kind)
          (Code kind)))
    (nominal.abstraction
     (%.message "-- "  commentary \n+ (nominal.representation on))))
  )

(the arity_inputs
  (syntax.macro (_ [arity <code>.natural])
    (in (.when arity
          0 (.list)
          _ (|> (-- arity)
                (enum.range n.enum 0)
                (list#each (|>> %.natural code.local)))))))

(the arity_types
  (syntax.macro (_ [arity <code>.natural])
    (in (list.repeated arity (` ..Expression)))))

(template.with [<arity> <function>+]
  [(expansion.let [<inputs> (arity_inputs <arity>)
                   <types> (arity_types <arity>)
                   <definitions> (template.spliced <function>+)]
     (template.with [<function>]
       [(`` (the .public ((,, (template.name [<function> "/" <arity>])) <inputs>)
              (-> <types>
                  Computation)
              (..apply (.list <inputs>) (..var <function>))))]

       <definitions>))]

  [1
   [["error"]
    ["pcall"]
    ["print"]
    ["require"]
    ["type"]
    ["ipairs"]]]
  [2
   [["error"]]]
  )
