... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except char int function)
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [meta
    [macro
     ["[0]" template]]]]]
 ["/" //])

(with_template [<name>]
  [(the .public <name>
     /.Type
     (/.type (/.global [(list) (template.text [<name>])] (list))))]

  [void]
  [bool]
  [char]
  [short]
  [int]
  [long]
  [float]
  [double]
  )

(the .public copy
  (-> /.Type
      /.Type)
  (|>> /.code
       (text.suffix "&")
       /.manual))

(alias [reference]
       ..copy)

(the .public move
  (-> /.Type
      /.Type)
  (|>> /.code
       (text.suffix "&&")
       /.manual))

(the .public address
  (-> /.Type
      /.Type)
  (|>> /.code
       (text.suffix "*")
       /.manual))

(alias [pointer array]
       ..address)

(the .public constant
  (-> /.Type
      /.Type)
  (|>> /.code
       (text.prefix "const ")
       /.manual))

(with_template [<ns> <name>/*]
  [(`` (with_template [<lux> <c++>]
         [(the .public <lux>
            /.Type
            (/.type (/.global [(list <ns>) <c++>] (list))))]

         (,, (template.spliced <name>/*))))]

  ... https://en.cppreference.com/w/cpp/string/basic_string
  [/.standard
   [[string "string"]
    [wide_string "wstring"]
    [u08_string "u8string"]
    [u16_string "u16string"]
    [u32_string "u32string"]]]
  )

(with_template [<lux> <c++>]
  [(the .public <lux>
     /.Type
     (/.type (/.global [(list) <c++>] (list))))]

  [char_08 "char8_t"]
  [char_16 "char16_t"]
  [char_32 "char32_t"]

  [int_08 "int8_t"]
  [int_16 "int16_t"]
  [int_32 "int32_t"]
  [int_64 "int64_t"]

  [int_fast_08 "int_fast8_t"]
  [int_fast_16 "int_fast16_t"]
  [int_fast_32 "int_fast32_t"]
  [int_fast_64 "int_fast64_t"]

  [int_least_08 "int_least8_t"]
  [int_least_16 "int_least16_t"]
  [int_least_32 "int_least32_t"]
  [int_least_64 "int_least64_t"]

  [int_max "intmax_t"]
  [int_ptr "intptr_t"]
  
  [uint_08 "uint8_t"]
  [uint_16 "uint16_t"]
  [uint_32 "uint32_t"]
  [uint_64 "uint64_t"]

  [uint_fast_08 "uint_fast8_t"]
  [uint_fast_16 "uint_fast16_t"]
  [uint_fast_32 "uint_fast32_t"]
  [uint_fast_64 "uint_fast64_t"]

  [uint_least_08 "uint_least8_t"]
  [uint_least_16 "uint_least16_t"]
  [uint_least_32 "uint_least32_t"]
  [uint_least_64 "uint_least64_t"]

  [uint_max "uintmax_t"]
  [uint_ptr "uintptr_t"]
  )

(the .public shared_ptr
  (-> /.Type
      /.Type)
  (|>> list
       (/.global [(list /.standard) "shared_ptr"])
       /.type))

(the .public (function arguments return)
  (-> (List /.Parameter) /.Parameter
      /.Type)
  (|> arguments
      (list#each /.code)
      (text.interposed ",")
      (text.enclosed ["(" ")"])
      (%.format (/.code return))
      /.manual))

(the .public (lambda arguments return)
  (-> (List /.Parameter) /.Parameter
      /.Type)
  (/.type (/.global [(list /.standard) "function"]
                    (list (..function arguments return)))))

(the .public initializer_list
  (-> /.Parameter
      /.Type)
  (|>> list
       (/.global [(list /.standard) "initializer_list"])
       /.type))
