... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Code Type Global Declaration Definition Label
                int as function template local global type also of is if for alias , its not)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["|"  pipe]
    ["[0]" maybe (.use "[1]#[0]" functor)]
    [function
     [predicate (.only Predicate)]]]
   [data
    ["[0]" text (.only \n \t)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]]]
   [math
    [number
     ["d" decimal]]]
   [meta
    [macro
     ["[0]" template]
     ["[0]" expansion]]
    [type
     ["[0]" nominal]]]]])

(the <% nominal.abstraction)
(the %> nominal.representation)

(the statement_separator ";")
(the parameter_separator (%.message "," " "))
(the namespace_separator "::")

(the term_delimiters ["(" ")"])
(the template_delimiters ["<" ">"])
(the initializer_list_delimiters ["{" "}"])
(the capture_delimiters ["[" "]"])
(the array_delimiters ..capture_delimiters)

(nominal.every .public (Code of)
  Text

  (the .public equivalence
    (for_any (_ of)
      (Equivalence (Code of)))
    (implementation
     (the (= refererence it)
       (text.= (%> refererence)
               (%> it)))))

  (the .public manual
    (for_any (_ of)
      (-> Text
          (Code of)))
    (|>> <%))

  (the .public code
    (-> (Code Any)
        Text)
    (|>> %>))

  (template.with [<super> <type>+]
    [(`` (template.with [<type> <parameter>*']
           [(expansion.let [<parameter>* (template.spliced <parameter>*')
                            <brand> (template.symbol [<type> "'"])]
              (these (nominal.every (<brand> <parameter>*)
                       Any)
                     
                     (.every .public <type>
                       (for_some (_ <parameter>*)
                         (<super> (<brand> <parameter>*))))))]

           (,, (template.spliced <type>+))))]

    [Code
     [[Capture []]
      [Parameter [of]]
      [Value [of]]
      [Statement [of]]
      [Label [of]]]]

    [Parameter
     [[Type [of]]]]
    
    [Type
     [[Type_Name []]]]

    [Value
     [[LValue [of]]
      [RValue [of]]]]

    [LValue
     [[Local []]
      [Global []]]]

    [RValue
     [[PRValue []]
      [Instantiation []]
      [Initializer_List []]]]

    [Statement
     [[Declaration [of]]
      [Block []]]]

    [Declaration
     [[Definition [of]]]]
    )

  (the .public Expression
    Value)

  (the .public Address
    LValue)

  (the .public Computation
    RValue)

  (the .public Pure
    PRValue)

  (the .public null
    Pure
    (<% "nullptr"))

  (the .public this
    Pure
    (<% "this"))

  (the .public bool
    (-> Bit
        Pure)
    (|>> (|.when
           .false "false"
           .true "true")
         <%))

  (the .public double
    (-> Decimal
        Pure)
    (|>> (|.cond [(d.= d.positive_infinity)]
                 [(|.new "(+1.0/0.0)" [])]
                 
                 [(d.= d.negative_infinity)]
                 [(|.new "(-1.0/0.0)" [])]
                 
                 [(d.= d.not_a_number)]
                 [(|.new "(0.0/0.0)" [])]

                 ... else
                 [%.decimal])
         <%))

  (.every .public Namespace
    Text)

  (the .public standard
    Namespace
    "std")

  (the .public local
    (-> Text
        Local)
    (|>> <%))

  (the instantiation
    (-> (List Parameter)
        Text)
    (|>> (|.when
           (list)
           ""

           it
           (|> it
               (list#each ..code)
               (text.interposed ..parameter_separator)
               (text.enclosed ..template_delimiters)))))

  (the .public (global [ns/* name] parameters)
    (-> [(List Namespace) Text] (List Parameter)
        Global)
    (<% (let [instance (%.message name (instantiation parameters))]
          (when ns/*
            (list) instance
            _ (%.message (text.interposed ..namespace_separator ns/*)
                         ..namespace_separator
                         instance)))))

  (the .public type
    (-> Address
        Type)
    (|>> nominal.transmutation))

  (the .public type_name
    (-> Text
        Type_Name)
    (|>> <%))

  (template.with [<prefix> <type> <name>]
    [(the .public <name>
       (-> Expression
           <type>)
       (|>> %>
            (text.prefix <prefix>)
            <%))]

    ["*" Address at]
    ["&" Pure address]
    )

  (the term
    (-> Text
        Text)
    (text.enclosed ..term_delimiters))

  (the term?
    (Predicate Expression)
    (|>> %>
         (text.enclosed? ..term_delimiters)))

  (the .public (is type term)
    (-> Type Expression
        Computation)
    (<| <%
        ..term
        (%.message (..term (%> type))
                   " " (%> term))))

  (the .public int
    (-> Int
        Pure)
    (|>> %.int
         <%))

  (the application
    (-> (List Expression)
        Text)
    (|>> (list#each ..code)
         (text.interposed ..parameter_separator)
         (text.enclosed ..term_delimiters)))

  (the .public (on parameters function)
    (-> (List Expression) Expression
        Expression)
    (<% (%.message (%> function) (application parameters))))

  (the .public (of parameters constructor)
    (-> (List Expression) Type
        Instantiation)
    (<% (%.message (%> constructor) (application parameters))))

  (the .public initializer_list
    (-> (List Expression)
        Initializer_List)
    (|>> (list#each ..code)
         (text.interposed ..parameter_separator)
         (text.enclosed ..initializer_list_delimiters)
         <%))

  (the .public (structure name parameters)
    (-> Type (List Expression)
        Instantiation)
    (<% (%.message (%> name)
                   (%> (initializer_list parameters)))))

  (the .public (array type arity initials)
    (-> Type Expression (List Expression)
        Instantiation)
    (<% (%.message (%> type)
                   (text.enclosed ..array_delimiters (%> arity))
                   " " (%> (initializer_list initials)))))

  (the .public (new it)
    (-> Instantiation
        Expression)
    (<% (%.message "new " (%> it))))

  (the .public (do method types parameters object)
    (-> Text (List Type) (List Expression) Expression
        Expression)
    (<% (%.message (%> object) "." method (instantiation types) (application parameters))))

  (the .public (<< it to)
    (-> Expression Expression
        Expression)
    (<% (%.message (%> to) " << " (%> it))))

  (the .public (include it)
    (-> Text
        Declaration)
    (<% (%.message "#include <" it ">")))

  (template.with [<name> <type>]
    [(the .public (<name> before after)
       (-> <type> <type>
           <type>)
       (<% (%.message (%> before)
                      \n (%> after))))]

    [then Statement]
    [also Declaration]
    )

  (the .public (, before after)
    (-> Expression Expression
        Expression)
    (<| <%
        (text.enclosed ..term_delimiters)
        (%.message (%> before)
                   ..parameter_separator
                   (%> after))))

  (the statement
    (for_any (_ of)
      (-> Text
          (Statement of)))
    (|>> (text.suffix ..statement_separator)
         <%))

  (the .public ;
    (-> Expression
        Statement)
    (|>> %>
         ..statement))

  (the .public return
    (-> Expression
        Statement)
    (|>> %>
         (%.message "return ")
         ..statement))

  (template.with [<name> <command>]
    [(the .public <name>
       (-> Expression
           Statement)
       (|>> %>
            (%.message <command> " ")
            ..statement))]

    [delete "delete"]
    [delete_array "delete[]"]
    )

  (.every Argument
    [Local Type])

  (the (argument [it type])
    (-> Argument
        Text)
    (%.message (%> type) " " (%> it)))

  (the arguments
    (-> (List Argument)
        Text)
    (|>> (list#each ..argument)
         (text.interposed ..parameter_separator)
         (text.enclosed ..term_delimiters)))

  (the .public block
    (-> Statement
        Block)
    (let [\n\t (%.message \n \t)
          <| (%.message "{" \n\t)
          |> (%.message \n "}")]
      (|>> %>
           (text.replaced \n \n\t)
           (text.enclosed [<| |>])
           <%)))

  (the template
    (-> (List Type_Name)
        Text)
    (|>> (|.when
           (list)
           ""
           
           it
           (%.message "template"
                      " " (|> it
                              (list#each (|>> %> (%.message "typename ")))
                              (text.interposed ..parameter_separator)
                              (text.enclosed ..template_delimiters))
                      " "))))

  (the .public (function name types inputs output body)
    (-> Local (List Type_Name) (List Argument) Type Statement
        Definition)
    (<% (%.message (..template types)
                   (%> output) " " (%> name) (..arguments inputs)
                   " " (%> (..block body)))))

  (the .public (namespace it body)
    (-> (Maybe Namespace) Declaration
        Declaration)
    (<% (%.message "namespace"
                   (when it
                     {.#Some it}
                     (%.message " " it)

                     _
                     "")
                   " " (%> (..block body)))))

  (template.with [<name>]
    [(the .public (<name> it)
       (-> Expression
           Expression)
       (..on (list it)
             (<% (template.text [<name>]))))]

    [int64_t]
    )

  (the safe
    (-> Text
        Text)
    (let [\\'' (%.message "\" text.\'')]
      (`` (|>> (,, (template.with [<find> <replace>]
                     [(text.replaced <find> <replace>)]

                     ["\" "\\"]
                     [text.\t "\t"]
                     [text.\v "\v"]
                     [text.\0 "\0"]
                     [text.\b "\b"]
                     [text.\f "\f"]
                     [text.\n "\n"]
                     [text.\r "\r"]
                     [text.\'' \\'']
                     ))
               ))))

  (template.with [<name> <prefix>]
    [(the .public <name>
       (-> Text
           Address)
       (|>> ..safe
            %.text
            <prefix>
            <%))]

    [u32_string (%.message "U")]
    [u16_string (%.message "u")]
    [string <|]
    )

  (.every Method
    (-> Local
        Definition))

  (the .public (destructor body)
    (-> Statement
        Method)
    (.function (_ of)
      (<% (%.message "~" (%> of) "()"
                     " " (%> (block body))))))

  (the .public (var_declaration name type)
    (-> Local Type
        Declaration)
    (|> (%.message (%> type) " " (%> name))
        ..statement))

  (the .public (constant name type value)
    (-> Local Type Expression
        Definition)
    (..statement (%.message (%> type) " const " (%> name) " = " (%> value))))

  (the .public (constant_array name type size value)
    (-> Local Type Pure Expression
        Definition)
    (..statement (%.message (%> type) " const " (%> name)
                            (text.enclosed ..array_delimiters (%> size))
                            " = " (%> value))))

  (the .public (variable name type value)
    (-> Local Type Expression
        Definition)
    (..statement (%.message (%> type) " " (%> name) " = " (%> value))))

  (the .public (:= location value)
    (-> Address Expression
        Address)
    (<% (%.message (%> location) " = " (%> value))))

  (the .public (structure_definition name types [fields methods])
    (-> Local (List Type_Name) [(List [Local Type]) (List Method)]
        Definition)
    (..statement
     (%.message (..template types) "struct"
                " " (%> name)
                " " (|> (all list#composite
                             (list#each (.function (_ [name type])
                                          (%> (var_declaration name type)))
                                        fields)
                             (list#each (.function (_ it)
                                          (..code (it name)))
                                        methods))
                        (text.interposed \n)
                        <%
                        ..block
                        %>))))

  (the .public (enum_definition name options)
    (-> Local (List Local)
        Definition)
    (..statement
     (%.message "enum"
                " " (%> name)
                " " (|> options
                        (list#each ..code)
                        (text.interposed ..parameter_separator)
                        <%
                        ..block
                        %>))))

  (the captures
    (-> (List Capture)
        Text)
    (|>> (list#each ..code)
         (text.interposed ..parameter_separator)
         (text.enclosed ..capture_delimiters)))
  
  (template.with [<sigil> <name>]
    [(the .public <name>
       Capture
       (<% <sigil>))]

    ["=" all_by_value]
    ["&" all_by_reference]
    )

  (the .public (alias name original)
    (-> Local Local
        Capture)
    (<% (%.message (%> name) " = " (%> original))))

  (the .public (lambda captures inputs output body)
    (-> (List Capture) (List Argument) (Maybe Type) Statement
        Expression)
    (<| <%
        ..term
        (%.message (..captures captures) (..arguments inputs)
                   (|> output
                       (maybe#each (|>> %> (%.message " -> ")))
                       (maybe.else ""))
                   " " (%> (..block body)))))

  (the .public (? when then else)
    (-> Expression Expression Expression
        Expression)
    (<| <%
        ..term
        (%.message (%> when)
                   " ? " (%> then)
                   " : " (%> else))))

  (template.with [<separator> <name>]
    [(the .public (<name> field owner)
       (-> Text Expression
           Expression)
       (<% (%.message (%> owner) <separator> field)))]

    ["." its]
    ["->" its*]
    )

  (the .public (item index array)
    (-> Expression Expression
        Address)
    (<% (%.message (%> array)
                   (text.enclosed ..array_delimiters (%> index)))))

  (template.with [<name> <operator>]
    [(the .public (<name> parameter subject)
       (-> Expression Expression
           Pure)
       (|> (%.message (%> subject) <operator> (%> parameter))
           ..term
           <%))]

    [+ " + "]
    [- " - "]
    ... [* " * "]
    [/ " / "]
    [% " % "]
    
    [= " == "]
    [< " < "]
    [> " > "]
    [<= " <= "]
    [>= " >= "]
    )

  (the .public not
    (-> Expression
        Expression)
    (|>> %>
         (%.message "!")
         ..term
         <%))

  (the .public (if when then else)
    (-> Expression Statement (Maybe Statement)
        Statement)
    (<% (%.message "if" (.if (term? when)
                          (%> when)
                          (..term (%> when)))
                   " " (%> (..block then))
                   (.when else
                     {.#Some else}
                     (%.message " else " (%> (..block else)))
                     
                     {.#None}
                     ""))))

  (the (for_initialization [variable type value])
    (-> [Local Type Expression]
        Text)
    (%.message (%> type) " " (%> variable) " = " (%> value)))

  (the for_initializations
    (-> (List [Local Type Expression])
        Text)
    (|>> (list#each ..for_initialization)
         (text.interposed ..parameter_separator)))

  (the .public (for inits when after body)
    (-> (List [Local Type Expression]) Expression Statement Statement
        Statement)
    (let [setup (|> (list (for_initializations inits)
                          (%> when)
                          (|> (%> after)
                              (text.replaced_once ..statement_separator "")))
                    (text.interposed (%.message ..statement_separator " "))
                    (text.enclosed ..term_delimiters))]
      (<% (%.message "for" setup
                     " " (%> (..block body))))))

  (the .public (for_each it of body)
    (-> Local Expression Statement
        Statement)
    (<% (%.message "for(auto " (%> it) " : " (%> of) ")"
                   " " (%> (..block body)))))

  (the .public label
    (-> Text
        Label)
    (|>> <%))

  (the .public set_label
    (-> Label
        Statement)
    (|>> %>
         (text.suffix ":")
         <%))

  (the .public go_to
    (-> Label
        Statement)
    (|>> %>
         (text.prefix "goto ")
         ..statement))

  (the .public throw
    (-> Expression
        Statement)
    (|>> %>
         (text.prefix "throw ")
         ..statement))

  (the .public (while when then)
    (-> Expression Statement
        Statement)
    (<% (%.message "while" (..term (%> when))
                   " " (%> (..block then)))))
  )
