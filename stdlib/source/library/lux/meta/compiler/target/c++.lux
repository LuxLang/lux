... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Code Type Global Declaration Definition Label
                int as function template local global type also of is if for alias , the not)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["|"  pipe]
    ["[0]" maybe (.use "[1]#[0]" functor)]
    [function
     [predicate (.only Predicate)]]]
   [data
    ["[0]" text (.only \n \t) (.use "[1]#[0]" equivalence)
     ["%" \\format]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]]]
   [math
    [number
     ["f" frac]]]
   [meta
    [macro
     ["[0]" template]]
    [type
     ["[0]" nominal]]]]])

(def <% nominal.abstraction)
(def %> nominal.representation)

(def statement_separator ";")
(def parameter_separator (%.format "," " "))
(def namespace_separator "::")

(def term_delimiters ["(" ")"])
(def template_delimiters ["<" ">"])
(def initializer_list_delimiters ["{" "}"])
(def capture_delimiters ["[" "]"])
(def array_delimiters ..capture_delimiters)

(nominal.def .public (Code of)
  Text

  (def .public equivalence
    (All (_ of)
      (Equivalence (Code of)))
    (implementation
     (def (= refererence it)
       (text#= (%> refererence)
               (%> it)))))

  (def .public manual
    (All (_ of)
      (-> Text
          (Code of)))
    (|>> <%))

  (def .public code
    (-> (Code Any)
        Text)
    (|>> %>))

  (with_template [<super> <type>+]
    [(`` (with_template [<type> <parameter>*']
           [(with_expansions [<parameter>* (template.spliced <parameter>*')
                              <brand> (template.symbol [<type> "'"])]
              (nominal.def (<brand> <parameter>*)
                Any)
              
              (.every .public <type>
                (Ex (_ <parameter>*)
                  (<super> (<brand> <parameter>*)))))]

           (,, (template.spliced <type>+))))]

    [Code
     [[Capture []]
      [Parameter [of]]
      [Value [of]]
      [Statement [of]]
      [Label [of]]]]

    [Parameter
     [[Type [of]]]]
    
    [Type
     [[Type_Name []]]]

    [Value
     [[LValue [of]]
      [RValue [of]]]]

    [LValue
     [[Local []]
      [Global []]]]

    [RValue
     [[PRValue []]
      [Instantiation []]
      [Initializer_List []]]]

    [Statement
     [[Declaration [of]]
      [Block []]]]

    [Declaration
     [[Definition [of]]]]
    )

  (def .public Expression
    Value)

  (def .public Address
    LValue)

  (def .public Computation
    RValue)

  (def .public Pure
    PRValue)

  (def .public null
    Pure
    (<% "nullptr"))

  (def .public this
    Pure
    (<% "this"))

  (def .public bool
    (-> Bit
        Pure)
    (|>> (|.when
           .false "false"
           .true "true")
         <%))

  (def .public double
    (-> Frac
        Pure)
    (|>> (|.cond [(f.= f.positive_infinity)]
                 [(|.new "(+1.0/0.0)" [])]
                 
                 [(f.= f.negative_infinity)]
                 [(|.new "(-1.0/0.0)" [])]
                 
                 [(f.= f.not_a_number)]
                 [(|.new "(0.0/0.0)" [])]

                 ... else
                 [%.frac])
         <%))

  (.every .public Namespace
    Text)

  (def .public standard
    Namespace
    "std")

  (def .public local
    (-> Text
        Local)
    (|>> <%))

  (def instantiation
    (-> (List Parameter)
        Text)
    (|>> (|.when
           (list)
           ""

           it
           (|> it
               (list#each ..code)
               (text.interposed ..parameter_separator)
               (text.enclosed ..template_delimiters)))))

  (def .public (global [ns/* name] parameters)
    (-> [(List Namespace) Text] (List Parameter)
        Global)
    (<% (let [instance (%.format name (instantiation parameters))]
          (when ns/*
            (list) instance
            _ (%.format (text.interposed ..namespace_separator ns/*)
                        ..namespace_separator
                        instance)))))

  (def .public type
    (-> Address
        Type)
    (|>> nominal.transmutation))

  (def .public type_name
    (-> Text
        Type_Name)
    (|>> <%))

  (with_template [<prefix> <type> <name>]
    [(def .public <name>
       (-> Expression
           <type>)
       (|>> %>
            (text.prefix <prefix>)
            <%))]

    ["*" Address at]
    ["&" Pure address]
    )

  (def term
    (-> Text
        Text)
    (text.enclosed ..term_delimiters))

  (def term?
    (Predicate Expression)
    (|>> %>
         (text.enclosed? ..term_delimiters)))

  (def .public (is type term)
    (-> Type Expression
        Computation)
    (<| <%
        ..term
        (%.format (..term (%> type))
                  " " (%> term))))

  (def .public int
    (-> Int
        Pure)
    (|>> %.int
         <%))

  (def application
    (-> (List Expression)
        Text)
    (|>> (list#each ..code)
         (text.interposed ..parameter_separator)
         (text.enclosed ..term_delimiters)))

  (def .public (on parameters function)
    (-> (List Expression) Expression
        Expression)
    (<% (%.format (%> function) (application parameters))))

  (def .public (of parameters constructor)
    (-> (List Expression) Type
        Instantiation)
    (<% (%.format (%> constructor) (application parameters))))

  (def .public initializer_list
    (-> (List Expression)
        Initializer_List)
    (|>> (list#each ..code)
         (text.interposed ..parameter_separator)
         (text.enclosed ..initializer_list_delimiters)
         <%))

  (def .public (structure name parameters)
    (-> Type (List Expression)
        Instantiation)
    (<% (%.format (%> name)
                  (%> (initializer_list parameters)))))

  (def .public (array type arity initials)
    (-> Type Expression (List Expression)
        Instantiation)
    (<% (%.format (%> type)
                  (text.enclosed ..array_delimiters (%> arity))
                  " " (%> (initializer_list initials)))))

  (def .public (new it)
    (-> Instantiation
        Expression)
    (<% (%.format "new " (%> it))))

  (def .public (do method types parameters object)
    (-> Text (List Type) (List Expression) Expression
        Expression)
    (<% (%.format (%> object) "." method (instantiation types) (application parameters))))

  (def .public (<< it to)
    (-> Expression Expression
        Expression)
    (<% (%.format (%> to) " << " (%> it))))

  (def .public (include it)
    (-> Text
        Declaration)
    (<% (%.format "#include <" it ">")))

  (with_template [<name> <type>]
    [(def .public (<name> before after)
       (-> <type> <type>
           <type>)
       (<% (%.format (%> before)
                     \n (%> after))))]

    [then Statement]
    [also Declaration]
    )

  (def .public (, before after)
    (-> Expression Expression
        Expression)
    (<| <%
        (text.enclosed ..term_delimiters)
        (%.format (%> before)
                  ..parameter_separator
                  (%> after))))

  (def statement
    (All (_ of)
      (-> Text
          (Statement of)))
    (|>> (text.suffix ..statement_separator)
         <%))

  (def .public ;
    (-> Expression
        Statement)
    (|>> %>
         ..statement))

  (def .public return
    (-> Expression
        Statement)
    (|>> %>
         (%.format "return ")
         ..statement))

  (with_template [<name> <command>]
    [(def .public <name>
       (-> Expression
           Statement)
       (|>> %>
            (%.format <command> " ")
            ..statement))]

    [delete "delete"]
    [delete_array "delete[]"]
    )

  (.every Argument
    [Local Type])

  (def (argument [it type])
    (-> Argument
        Text)
    (%.format (%> type) " " (%> it)))

  (def arguments
    (-> (List Argument)
        Text)
    (|>> (list#each ..argument)
         (text.interposed ..parameter_separator)
         (text.enclosed ..term_delimiters)))

  (def .public block
    (-> Statement
        Block)
    (let [\n\t (%.format \n \t)
          <| (%.format "{" \n\t)
          |> (%.format \n "}")]
      (|>> %>
           (text.replaced \n \n\t)
           (text.enclosed [<| |>])
           <%)))

  (def template
    (-> (List Type_Name)
        Text)
    (|>> (|.when
           (list)
           ""
           
           it
           (%.format "template"
                     " " (|> it
                             (list#each (|>> %> (%.format "typename ")))
                             (text.interposed ..parameter_separator)
                             (text.enclosed ..template_delimiters))
                     " "))))

  (def .public (function name types inputs output body)
    (-> Local (List Type_Name) (List Argument) Type Statement
        Definition)
    (<% (%.format (..template types)
                  (%> output) " " (%> name) (..arguments inputs)
                  " " (%> (..block body)))))

  (def .public (namespace it body)
    (-> (Maybe Namespace) Declaration
        Declaration)
    (<% (%.format "namespace"
                  (when it
                    {.#Some it}
                    (%.format " " it)

                    _
                    "")
                  " " (%> (..block body)))))

  (with_template [<name>]
    [(def .public (<name> it)
       (-> Expression
           Expression)
       (..on (list it)
             (<% (template.text [<name>]))))]

    [int64_t]
    )

  (def safe
    (-> Text
        Text)
    (let [\\'' (%.format "\" text.\'')]
      (`` (|>> (,, (with_template [<find> <replace>]
                     [(text.replaced <find> <replace>)]

                     ["\" "\\"]
                     [text.\t "\t"]
                     [text.\v "\v"]
                     [text.\0 "\0"]
                     [text.\b "\b"]
                     [text.\f "\f"]
                     [text.\n "\n"]
                     [text.\r "\r"]
                     [text.\'' \\'']
                     ))
               ))))

  (with_template [<name> <prefix>]
    [(def .public <name>
       (-> Text
           Address)
       (|>> ..safe
            %.text
            <prefix>
            <%))]

    [u32_string (%.format "U")]
    [u16_string (%.format "u")]
    [string <|]
    )

  (.every Method
    (-> Local
        Definition))

  (def .public (destructor body)
    (-> Statement
        Method)
    (.function (_ of)
      (<% (%.format "~" (%> of) "()"
                    " " (%> (block body))))))

  (def .public (var_declaration name type)
    (-> Local Type
        Declaration)
    (|> (%.format (%> type) " " (%> name))
        ..statement))

  (def .public (constant name type value)
    (-> Local Type Expression
        Definition)
    (..statement (%.format (%> type) " const " (%> name) " = " (%> value))))

  (def .public (constant_array name type size value)
    (-> Local Type Pure Expression
        Definition)
    (..statement (%.format (%> type) " const " (%> name)
                           (text.enclosed ..array_delimiters (%> size))
                           " = " (%> value))))

  (def .public (variable name type value)
    (-> Local Type Expression
        Definition)
    (..statement (%.format (%> type) " " (%> name) " = " (%> value))))

  (def .public (:= location value)
    (-> Address Expression
        Address)
    (<% (%.format (%> location) " = " (%> value))))

  (def .public (structure_definition name types [fields methods])
    (-> Local (List Type_Name) [(List [Local Type]) (List Method)]
        Definition)
    (..statement
     (%.format (..template types) "struct"
               " " (%> name)
               " " (|> (all list#composite
                            (list#each (.function (_ [name type])
                                         (%> (var_declaration name type)))
                                       fields)
                            (list#each (.function (_ it)
                                         (..code (it name)))
                                       methods))
                       (text.interposed \n)
                       <%
                       ..block
                       %>))))

  (def .public (enum_definition name options)
    (-> Local (List Local)
        Definition)
    (..statement
     (%.format "enum"
               " " (%> name)
               " " (|> options
                       (list#each ..code)
                       (text.interposed ..parameter_separator)
                       <%
                       ..block
                       %>))))

  (def captures
    (-> (List Capture)
        Text)
    (|>> (list#each ..code)
         (text.interposed ..parameter_separator)
         (text.enclosed ..capture_delimiters)))
  
  (with_template [<sigil> <name>]
    [(def .public <name>
       Capture
       (<% <sigil>))]

    ["=" all_by_value]
    ["&" all_by_reference]
    )

  (def .public (alias name original)
    (-> Local Local
        Capture)
    (<% (%.format (%> name) " = " (%> original))))

  (def .public (lambda captures inputs output body)
    (-> (List Capture) (List Argument) (Maybe Type) Statement
        Expression)
    (<| <%
        ..term
        (%.format (..captures captures) (..arguments inputs)
                  (|> output
                      (maybe#each (|>> %> (%.format " -> ")))
                      (maybe.else ""))
                  " " (%> (..block body)))))

  (def .public (? when then else)
    (-> Expression Expression Expression
        Expression)
    (<| <%
        ..term
        (%.format (%> when)
                  " ? " (%> then)
                  " : " (%> else))))

  (with_template [<separator> <name>]
    [(def .public (<name> field owner)
       (-> Text Expression
           Expression)
       (<% (%.format (%> owner) <separator> field)))]

    ["." the]
    ["->" the*]
    )

  (def .public (item index array)
    (-> Expression Expression
        Address)
    (<% (%.format (%> array)
                  (text.enclosed ..array_delimiters (%> index)))))

  (with_template [<name> <operator>]
    [(def .public (<name> parameter subject)
       (-> Expression Expression
           Pure)
       (|> (%.format (%> subject) <operator> (%> parameter))
           ..term
           <%))]

    [+ " + "]
    [- " - "]
    ... [* " * "]
    [/ " / "]
    [% " % "]
    
    [= " == "]
    [< " < "]
    [> " > "]
    [<= " <= "]
    [>= " >= "]
    )

  (def .public not
    (-> Expression
        Expression)
    (|>> %>
         (%.format "!")
         ..term
         <%))

  (def .public (if when then else)
    (-> Expression Statement (Maybe Statement)
        Statement)
    (<% (%.format "if" (.if (term? when)
                         (%> when)
                         (..term (%> when)))
                  " " (%> (..block then))
                  (.when else
                    {.#Some else}
                    (%.format " else " (%> (..block else)))
                    
                    {.#None}
                    ""))))

  (def (for_initialization [variable type value])
    (-> [Local Type Expression]
        Text)
    (%.format (%> type) " " (%> variable) " = " (%> value)))

  (def for_initializations
    (-> (List [Local Type Expression])
        Text)
    (|>> (list#each ..for_initialization)
         (text.interposed ..parameter_separator)))

  (def .public (for inits when after body)
    (-> (List [Local Type Expression]) Expression Statement Statement
        Statement)
    (let [setup (|> (list (for_initializations inits)
                          (%> when)
                          (|> (%> after)
                              (text.replaced_once ..statement_separator "")))
                    (text.interposed (%.format ..statement_separator " "))
                    (text.enclosed ..term_delimiters))]
      (<% (%.format "for" setup
                    " " (%> (..block body))))))

  (def .public (for_each it of body)
    (-> Local Expression Statement
        Statement)
    (<% (%.format "for(auto " (%> it) " : " (%> of) ")"
                  " " (%> (..block body)))))

  (def .public label
    (-> Text
        Label)
    (|>> <%))

  (def .public set_label
    (-> Label
        Statement)
    (|>> %>
         (text.suffix ":")
         <%))

  (def .public go_to
    (-> Label
        Statement)
    (|>> %>
         (text.prefix "goto ")
         ..statement))

  (def .public throw
    (-> Expression
        Statement)
    (|>> %>
         (text.prefix "throw ")
         ..statement))

  (def .public (while when then)
    (-> Expression Statement
        Statement)
    (<% (%.format "while" (..term (%> when))
                  " " (%> (..block then)))))
  )
