... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Code Type Global Declaration Definition
                int as function template local global type also of)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["|"  pipe]]
   [data
    ["[0]" text (.only \n \t) (.use "[1]#[0]" equivalence)
     ["%" \\format]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]]]
   [math
    [number
     ["f" frac]]]
   [meta
    [macro
     ["[0]" template]]
    [type
     ["[0]" nominal]]]]])

(def <% nominal.abstraction)
(def %> nominal.representation)

(def statement_separator ";")
(def parameter_separator (%.format "," " "))
(def term_delimiters ["(" ")"])
(def template_delimiters ["<" ">"])
(def initialization_delimiters ["{" "}"])

(nominal.def .public (Code of)
  Text

  (def .public equivalence
    (All (_ of)
      (Equivalence (Code of)))
    (implementation
     (def (= refererence it)
       (text#= (%> refererence)
               (%> it)))))

  (def .public manual
    (All (_ of)
      (-> Text
          (Code of)))
    (|>> <%))

  (def .public code
    (-> (Code Any)
        Text)
    (|>> %>))

  (with_template [<super> <type>+]
    [(`` (with_template [<type> <parameter>*']
           [(with_expansions [<parameter>* (template.spliced <parameter>*')
                              <brand> (template.symbol [<type> "'"])]
              (nominal.def (<brand> <parameter>*)
                Any)
              
              (.type .public <type>
                (Ex (_ <parameter>*)
                  (<super> (<brand> <parameter>*)))))]

           (,, (template.spliced <type>+))))]

    [Code
     [[Type [of]]
      [Expression [of]]
      [Statement [of]]]]
    
    [Type
     [[Type_Name []]]]

    [Expression
     [[Computation [of]]
      [Reference [of]]]]

    [Computation
     [[Literal []]
      [Instantiation []]]]

    [Reference
     [[Local []]
      [Global []]]]

    [Statement
     [[Declaration [of]]]]

    [Declaration
     [[Definition [of]]]]

    [Definition
     [[Method []]]]
    )

  (def .public bool
    (-> Bit
        Literal)
    (|>> (|.when
           .false "false"
           .true "true")
         <%))

  (def .public double
    (-> Frac
        Literal)
    (|>> (|.cond [(f.= f.positive_infinity)]
                 [(|.new "(+1.0/0.0)" [])]
                 
                 [(f.= f.negative_infinity)]
                 [(|.new "(-1.0/0.0)" [])]
                 
                 [(f.= f.not_a_number)]
                 [(|.new "(0.0/0.0)" [])]

                 ... else
                 [%.frac])
         <%))

  (.type .public Namespace
    Text)

  (def .public standard
    Namespace
    "std")

  (def .public local
    (-> Text
        Local)
    (|>> <%))

  (def instantiation
    (-> (List Type)
        Text)
    (|>> (|.when
           (list)
           ""

           it
           (|> it
               (list#each ..code)
               (text.interposed ..parameter_separator)
               (text.enclosed ..template_delimiters)))))

  (def .public (global [ns name] parameters)
    (-> [Namespace Text] (List Type)
        Global)
    (<% (let [instance (%.format name (instantiation parameters))]
          (when ns
            "" instance
            _ (%.format ns "::" instance)))))

  (def .public type
    (-> Reference
        Type)
    (|>> nominal.transmutation))

  (def .public type_name
    (-> Text
        Type_Name)
    (|>> <%))

  (def .public *
    (-> Type
        Type)
    (|>> %>
         (text.suffix "*")
         <%))

  (def .public deref
    (-> Expression
        Expression)
    (|>> %>
         (text.prefix "*")
         <%))

  (def .public (as type term)
    (-> Type Expression
        Computation)
    (<% (%.format "(" (%> type) ")"
                  " " (%> term))))

  (def .public int
    (-> Int
        Literal)
    (|>> %.int
         <%))

  (def application
    (-> (List Expression)
        Text)
    (|>> (list#each ..code)
         (text.interposed ..parameter_separator)
         (text.enclosed ..term_delimiters)))

  (def .public (on parameters function)
    (-> (List Expression) Expression
        Expression)
    (<% (%.format (%> function) (application parameters))))

  (def .public (of parameters constructor)
    (-> (List Expression) Type
        Instantiation)
    (<% (%.format (%> constructor) (application parameters))))

  (def initialization
    (-> (List Expression)
        Text)
    (|>> (list#each ..code)
         (text.interposed ..parameter_separator)
         (text.enclosed ..initialization_delimiters)))

  (def .public (structure name parameters)
    (-> Type (List Expression)
        Instantiation)
    (<% (%.format (%> name) (initialization parameters))))

  (def .public (array type arity initials)
    (-> Type Expression (List Expression)
        Instantiation)
    (<% (%.format (%> type) "[" (%> arity) "]" " " (initialization initials))))

  (def .public (new it)
    (-> Instantiation
        Expression)
    (<% (%.format "new " (%> it))))

  (def .public (do method types parameters object)
    (-> Text (List Type) (List Expression) Expression
        Expression)
    (<% (%.format (%> object) "." method (instantiation types) (application parameters))))

  (def .public (<< it to)
    (-> Expression Expression
        Expression)
    (<% (%.format (%> to) " << " (%> it))))

  (def .public (include it)
    (-> Text
        Declaration)
    (<% (%.format "#include <" it ">")))

  (with_template [<name> <type>]
    [(def .public (<name> before after)
       (-> <type> <type>
           <type>)
       (<% (%.format (%> before)
                     \n (%> after))))]

    [then Statement]
    [also Declaration]
    )

  (def statement
    (All (_ of)
      (-> Text
          (Statement of)))
    (|>> (text.suffix ..statement_separator)
         <%))

  (def .public ;
    (-> Expression
        Statement)
    (|>> %>
         ..statement))

  (with_template [<name> <command>]
    [(def .public <name>
       (-> Expression
           Statement)
       (|>> %>
            (%.format <command> " ")
            ..statement))]

    [delete "delete"]
    [delete_array "delete[]"]
    )

  (def template
    (-> (List Type_Name)
        Text)
    (|>> (|.when
           (list)
           ""
           
           it
           (%.format "template"
                     " " (|> it
                             (list#each (|>> %> (%.format "typename ")))
                             (text.interposed ..parameter_separator)
                             (text.enclosed ..template_delimiters))
                     " "))))

  (.type Argument
    [Type Local])

  (def (argument [type it])
    (-> Argument
        Text)
    (%.format (%> type) " " (%> it)))

  (def arguments
    (-> (List Argument)
        Text)
    (|>> (list#each ..argument)
         (text.interposed ..parameter_separator)
         (text.enclosed ..term_delimiters)))

  (def block
    (-> Text
        Text)
    (let [\n\t (%.format \n \t)
          <| (%.format "{" \n\t)
          |> (%.format \n "}")]
      (|>> (text.replaced \n \n\t)
           (text.enclosed [<| |>]))))

  (def .public (function name types inputs output body)
    (-> Local (List Type_Name) (List Argument) Type Statement
        Definition)
    (<% (%.format (..template types)
                  (%> output) " " (%> name) (..arguments inputs)
                  " " (..block (%> body)))))

  (def .public (namespace it body)
    (-> Namespace Declaration
        Declaration)
    (<% (%.format "namespace"
                  " " it
                  " " (..block (%> body)))))

  ... https://en.cppreference.com/w/cpp/types/integer
  (with_template [<name>]
    [(def .public (<name> it)
       (-> Expression
           Expression)
       (..on (list it)
             (<% (template.text [<name>]))))]

    [int64_t]
    )

  (def safe
    (-> Text
        Text)
    (let [\\'' (%.format "\" text.\'')]
      (`` (|>> (,, (with_template [<find> <replace>]
                     [(text.replaced <find> <replace>)]

                     ["\" "\\"]
                     [text.\t "\t"]
                     [text.\v "\v"]
                     [text.\0 "\0"]
                     [text.\b "\b"]
                     [text.\f "\f"]
                     [text.\n "\n"]
                     [text.\r "\r"]
                     [text.\'' \\'']
                     ))
               ))))

  ... https://en.cppreference.com/w/cpp/string/basic_string
  (def .public u32_string
    (-> Text
        Literal)
    (|>> ..safe
         %.text
         (%.format "U")
         <%))

  (def .public (destructor of body)
    (-> Local Statement
        Method)
    (<% (%.format "~" (%> of) "()"
                  " " (block (%> body)))))

  (def .public (var_declaration name type)
    (-> Local Type
        Declaration)
    (|> (%.format (%> type) " " (%> name))
        ..statement))

  (def .public (constant name type value)
    (-> Local Type Expression
        Definition)
    (..statement (%.format (%> type) " const " (%> name) " = " (%> value))))

  (def .public (structure_definition name [fields methods])
    (-> Local [(List [Local Type]) (List Method)]
        Definition)
    (..statement
     (%.format "struct"
               " " (%> name)
               " " (block (|> (all list#composite
                                   (list#each (.function (_ [name type])
                                                (%> (var_declaration name type)))
                                              fields)
                                   (list#each ..code
                                              methods))
                              (text.interposed \n))))))
  )
