... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except integer)
   ["[0]" ffi]
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]
    [monad (.only Monad do)]]
   [control
    ["[0]" pipe]
    ["[0]" state]
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [binary
     ["[0]" \\injection (.only Injection) (.use "specification#[0]" monoid)]]
    [collection
     ["[0]" sequence (.only Sequence) (.use "[1]#[0]" mix)]]]
   [math
    [number
     ["[0]" integer]
     ["[0]" decimal]
     ["[0]" i32]]]
   [meta
    [macro
     ["[0]" expansion]
     ["[0]" template]]]]]
 ["[0]" // (.only Constant)
  [utf8 (.only UTF8)]
  ["[0]" name_and_type (.only Name_And_Type)]
  ["[0]" class (.only Class)]
  ["[0]" reference (.only Reference)]
  ["[1][0]" integer]
  ["[1][0]" float]
  ["[1][0]" long]
  ["[1][0]" double]
  ["[1][0]" string]
  [//
   ["[1][0]" index (.only Index)]
   [encoding
    ["[1][0]" name (.only Internal External)]
    ["[1][0]" unsigned]]
   [type
    [category (.only Value Method)]
    ["[1][0]" descriptor (.only Descriptor)]]]])

(every .public Pool
  [Index (Sequence [Index Constant])])

(the .public equivalence
  (Equivalence Pool)
  (product.equivalence //index.equivalence
                       (sequence.equivalence (product.equivalence //index.equivalence
                                                                  //.equivalence))))

(alias [=]
       ..equivalence)

(every .public (Resource a)
  (state.With Try Pool a))

(the .public functor
  (Functor Resource)
  (implementation
   (the (each $ it)
     (|>> it
          (pipe.when
            {try.#Success [state output]}
            {try.#Success [state ($ output)]}
            
            ... {try.#Failure error}
            failure
            (as_expected failure))))))

(the .public monad
  (Monad Resource)
  (implementation
   (the functor ..functor)
   
   (the (in it)
     (function (_ state)
       {try.#Success [state it]}))
   
   (the (conjoint it)
     (function (_ state)
       (when (it state)
         {try.#Success [state' it']}
         (it' state')

         ... {try.#Failure error}
         failure
         (as_expected failure))))))

(the try|each
  (template.macro (_ <binding> <value> <body>)
    [(when <value>
       {try.#Success <binding>}
       <body>

       ... {try.#Failure error}
       failure
       (as_expected failure))]))

(the try|in
  (template.macro (_ <it>)
    [{try.#Success <it>}]))

(the !add
  (template.macro (_ <state> <tag> <equivalence> <value>)
    [(let [[current pool] <state>
           <value>' <value>]
       (expansion.let [<try_again> (these (again (.++ idx)))]
         (loop (again [idx 0])
           (when (sequence.item idx pool)
             {try.#Success entry}
             (when entry
               [index {<tag> reference}]
               (if (of <equivalence> = reference <value>')
                 {try.#Success [[current pool]
                                index]}
                 <try_again>)
               
               _
               <try_again>)
             
             {try.#Failure _}
             (<| (let [new {<tag> <value>'}])
                 (try|each @new (//unsigned.u2 (//.size new)))
                 (try|each next (is (Try Index)
                                    (|> current
                                        //index.value
                                        (//unsigned.+/2 @new)
                                        (of try.monad each //index.index))))
                 (try|in [[next
                           (sequence.suffix [current new] pool)]
                          current]))))))]))

(the /|do
  (template.macro (_ <state> <body>)
    [(function (_ <state>)
       <body>)]))

(the /|each
  (template.macro (_ <state> <binding> <value> <body>)
    [(when (<value> <state>)
       {try.#Success [<state> <binding>]}
       <body>

       ... {try.#Failure error}
       failure
       (as_expected failure))]))

(every (Adder of)
  (-> of (Resource (Index of))))

(template.with [<name> <type> <tag> <equivalence>]
  [(the .public (<name> value)
     (Adder <type>)
     (<| (/|do %)
         (!add % <tag> <equivalence> value)))]

  [integer //integer.Integer //.#Integer //integer.equivalence]
  [float //float.Float //.#Float //float.equivalence]
  [long //long.Long //.#Long integer.equivalence]
  [double //double.Double //.#Double decimal.equivalence]
  [utf8 UTF8 //.#UTF8 text.equivalence]
  )

(the .public (string value)
  (-> Text (Resource (Index //string.String)))
  (<| (/|do %)
      (/|each % @value (utf8 value))
      (!add % //.#String //index.equivalence @value)))

(the .public (class name)
  (-> Internal (Resource (Index Class)))
  (<| (/|do %)
      (/|each % @name (utf8 (//name.read name)))
      (let [value (class.class @name)])
      (!add % //.#Class class.equivalence value)))

(the .public (descriptor value)
  (for_any (_ kind)
    (-> (Descriptor kind)
        (Resource (Index (Descriptor kind)))))
  (<| (let [value (//descriptor.descriptor value)])
      (/|do %)
      (!add % //.#UTF8 text.equivalence value)))

(every .public (Member of)
  (Record
   [#name UTF8
    #descriptor (Descriptor of)]))

(the .public (name_and_type [name descriptor])
  (for_any (_ of)
    (-> (Member of) (Resource (Index (Name_And_Type of)))))
  (<| (/|do %)
      (/|each % @name (utf8 name))
      (/|each % @descriptor (..descriptor descriptor))
      (!add % //.#Name_And_Type name_and_type.equivalence [name_and_type.#name @name name_and_type.#descriptor @descriptor])))

(template.with [<name> <tag> <of>]
  [(the .public (<name> class member)
     (-> External (Member <of>) (Resource (Index (Reference <of>))))
     (<| (/|do %)
         (/|each % @class (..class (//name.internal class)))
         (/|each % @name_and_type (name_and_type member))
         (!add % <tag> reference.equivalence [reference.#class @class reference.#name_and_type @name_and_type])))]

  [field //.#Field Value]
  [method //.#Method Method]
  [interface_method //.#Interface_Method Method]
  )

(the !index
  (template.macro (_ <index>)
    [(|> <index> //index.value //unsigned.value)]))

(the .public injection
  (Injection Pool)
  (function (_ [next pool])
    (sequence#mix (function (_ [_index post] pre)
                    (specification#composite pre (//.injection post)))
                  (\\injection.bits_16 (!index next))
                  pool)))

(the .public empty
  Pool
  [(|> 1 //unsigned.u2 try.trusted //index.index)
   sequence.empty])
