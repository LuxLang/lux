... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Double)
   ["[0]" ffi]
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]
    [monad (.only Monad do)]]
   [control
    ["[0]" pipe]
    ["[0]" state (.only +State)]
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [binary
     ["[0]" \\format (.only Format) (.use "specification#[0]" monoid)]]
    [collection
     ["[0]" sequence (.only Sequence) (.use "[1]#[0]" mix)]]]
   [math
    [number
     ["[0]" int]
     ["[0]" frac]
     ["[0]" i32]]]]]
 ["[0]" // (.only UTF8 String Class Integer Float Long Double Constant Name_And_Type Reference)
  [//
   ["[1][0]" index (.only Index)]
   [encoding
    ["[1][0]" name (.only Internal External)]
    ["[1][0]" unsigned]]
   [type
    [category (.only Value Method)]
    ["[1][0]" descriptor (.only Descriptor)]]]])

(every .public Pool
  [Index (Sequence [Index Constant])])

(the .public equivalence
  (Equivalence Pool)
  (product.equivalence //index.equivalence
                       (sequence.equivalence (product.equivalence //index.equivalence
                                                                  //.equivalence))))

(every .public (Resource a)
  (+State Try Pool a))

(the .public functor
  (Functor Resource)
  (implementation
   (the (each $ it)
     (|>> it
          (pipe.when
            {try.#Success [state output]}
            {try.#Success [state ($ output)]}
            
            ... {try.#Failure error}
            failure
            (as_expected failure))))))

(the .public monad
  (Monad Resource)
  (implementation
   (the functor ..functor)
   
   (the (in it)
     (function (_ state)
       {try.#Success [state it]}))
   
   (the (conjoint it)
     (function (_ state)
       (when (it state)
         {try.#Success [state' it']}
         (it' state')

         ... {try.#Failure error}
         failure
         (as_expected failure))))))

(the try|each
  (template (_ <binding> <value> <body>)
    [(when <value>
       {try.#Success <binding>}
       <body>

       ... {try.#Failure error}
       failure
       (as_expected failure))]))

(the try|in
  (template (_ <it>)
    [{try.#Success <it>}]))

(the !add
  (template (_ <state> <tag> <equivalence> <value>)
    [(let [[current pool] <state>
           <value>' <value>]
       (with_expansions [<try_again> (these (again (.++ idx)))]
         (loop (again [idx 0])
           (when (sequence.item idx pool)
             {try.#Success entry}
             (when entry
               [index {<tag> reference}]
               (if (of <equivalence> = reference <value>')
                 {try.#Success [[current pool]
                                index]}
                 <try_again>)
               
               _
               <try_again>)
             
             {try.#Failure _}
             (<| (let [new {<tag> <value>'}])
                 (try|each @new (//unsigned.u2 (//.size new)))
                 (try|each next (is (Try Index)
                                    (|> current
                                        //index.value
                                        (//unsigned.+/2 @new)
                                        (of try.monad each //index.index))))
                 (try|in [[next
                           (sequence.suffix [current new] pool)]
                          current]))))))]))

(the /|do
  (template (_ <state> <body>)
    [(function (_ <state>)
       <body>)]))

(the /|each
  (template (_ <state> <binding> <value> <body>)
    [(when (<value> <state>)
       {try.#Success [<state> <binding>]}
       <body>

       ... {try.#Failure error}
       failure
       (as_expected failure))]))

(every (Adder of)
  (-> of (Resource (Index of))))

(with_template [<name> <type> <tag> <equivalence>]
  [(the .public (<name> value)
     (Adder <type>)
     (<| (/|do %)
         (!add % <tag> <equivalence> value)))]

  [integer Integer //.#Integer (//.value_equivalence i32.equivalence)]
  [float Float //.#Float (//.value_equivalence //.float_equivalence)]
  [long Long //.#Long (//.value_equivalence int.equivalence)]
  [double Double //.#Double (//.value_equivalence frac.equivalence)]
  [utf8 UTF8 //.#UTF8 text.equivalence]
  )

(the .public (string value)
  (-> Text (Resource (Index String)))
  (<| (/|do %)
      (/|each % @value (utf8 value))
      (let [value (//.string @value)])
      (!add % //.#String (//.value_equivalence //index.equivalence) value)))

(the .public (class name)
  (-> Internal (Resource (Index Class)))
  (<| (/|do %)
      (/|each % @name (utf8 (//name.read name)))
      (let [value (//.class @name)])
      (!add % //.#Class //.class_equivalence value)))

(the .public (descriptor value)
  (All (_ kind)
    (-> (Descriptor kind)
        (Resource (Index (Descriptor kind)))))
  (<| (let [value (//descriptor.descriptor value)])
      (/|do %)
      (!add % //.#UTF8 text.equivalence value)))

(every .public (Member of)
  (Record
   [#name UTF8
    #descriptor (Descriptor of)]))

(the .public (name_and_type [name descriptor])
  (All (_ of)
    (-> (Member of) (Resource (Index (Name_And_Type of)))))
  (<| (/|do %)
      (/|each % @name (utf8 name))
      (/|each % @descriptor (..descriptor descriptor))
      (!add % //.#Name_And_Type //.name_and_type_equivalence [//.#name @name //.#descriptor @descriptor])))

(with_template [<name> <tag> <of>]
  [(the .public (<name> class member)
     (-> External (Member <of>) (Resource (Index (Reference <of>))))
     (<| (/|do %)
         (/|each % @class (..class (//name.internal class)))
         (/|each % @name_and_type (name_and_type member))
         (!add % <tag> //.reference_equivalence [//.#class @class //.#name_and_type @name_and_type])))]

  [field //.#Field Value]
  [method //.#Method Method]
  [interface_method //.#Interface_Method Method]
  )

(the !index
  (template (_ <index>)
    [(|> <index> //index.value //unsigned.value)]))

(the .public format
  (Format Pool)
  (function (_ [next pool])
    (sequence#mix (function (_ [_index post] pre)
                    (specification#composite pre (//.format post)))
                  (\\format.bits_16 (!index next))
                  pool)))

(the .public empty
  Pool
  [(|> 1 //unsigned.u2 try.trusted //index.index)
   sequence.empty])
