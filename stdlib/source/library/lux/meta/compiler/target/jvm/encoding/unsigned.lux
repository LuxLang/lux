... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except natural)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    ["[0]" order (.only Order)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [binary
     ["[0]" \\injection (.only Injection)]]]
   [math
    [number
     ["n" natural]
     ["[0]" i64]]]
   [macro
    ["[0]" template]
    ["[0]" expansion]]
   [type
    ["[0]" nominal]]
   [meta
    ["[0]" name]]]])

(nominal.every .public (Unsigned brand)
  Natural

  (the .public value
    (-> (Unsigned Any)
        Natural)
    (|>> nominal.representation))

  (the .public equivalence
    (for_any (_ brand)
      (Equivalence (Unsigned brand)))
    (implementation
     (the (= expected actual)
       (n.= (nominal.representation expected)
            (nominal.representation actual)))))

  (the .public hash
    (for_any (_ brand)
      (Hash (Unsigned brand)))
    (implementation
     (the equivalence
       ..equivalence)
     (the hash
       (|>> nominal.representation
            (by n.hash hash)))))

  (alias [=]
         ..equivalence)

  (the .public order
    (for_any (_ brand)
      (Order (Unsigned brand)))
    (implementation
     (the equivalence ..equivalence)
     (the (< reference it)
       (n.< (nominal.representation reference)
            (nominal.representation it)))))

  (order.for [brand] (Unsigned brand) ..order)

  (exception.the .public (value_exceeds_the_maximum [type value maximum])
    (Exception [Name Natural (Unsigned Any)])
    (exception.report
     (list ["Type" (name.as_text type)]
           ["Value" (%.natural value)]
           ["Maximum" (%.natural (nominal.representation maximum))])))

  (exception.the .public (subtraction_cannot_yield_negative_value [type parameter subject])
    (for_any (_ brand)
      (Exception [Name (Unsigned brand) (Unsigned brand)]))
    (exception.report
     (list ["Type" (name.as_text type)]
           ["Parameter" (%.natural (nominal.representation parameter))]
           ["Subject" (%.natural (nominal.representation subject))])))

  (template.with [<bytes> <name> <size> <constructor> <maximum> <+> <-> <max>]
    [(expansion.let [<raw> (template.name [<name> "'"])]
       (these (nominal.every <raw> Any)
              (every .public <name> (Unsigned <raw>))))

     (the .public <size> <bytes>)
     
     (the .public <maximum>
       <name>
       (|> <bytes>
           (n.* i64.bits_per_byte)
           i64.mask
           nominal.abstraction))
     
     (the .public (<constructor> value)
       (-> Natural
           (Try <name>))
       (if (n.> (nominal.representation <maximum>) value)
         (exception.except ..value_exceeds_the_maximum [(name <name>) value <maximum>])
         {try.#Success (nominal.abstraction value)}))

     (the .public (<+> parameter subject)
       (-> <name> <name>
           (Try <name>))
       (<constructor>
        (n.+ (nominal.representation parameter)
             (nominal.representation subject))))

     (the .public (<-> parameter subject)
       (-> <name> <name>
           (Try <name>))
       (let [parameter' (nominal.representation parameter)
             subject' (nominal.representation subject)]
         (if (n.> subject' parameter')
           (exception.except ..subtraction_cannot_yield_negative_value [(name <name>) parameter subject])
           {try.#Success (nominal.abstraction (n.- parameter' subject'))})))

     (the .public (<max> left right)
       (-> <name> <name>
           <name>)
       (nominal.abstraction
        (n.major (nominal.representation left)
                 (nominal.representation right))))]

    [1 U1 bytes/1 u1 maximum/1 +/1 -/1 major/1]
    [2 U2 bytes/2 u2 maximum/2 +/2 -/2 major/2]
    [4 U4 bytes/4 u4 maximum/4 +/4 -/4 major/4]
    )

  (template.with [<name> <from> <to>]
    [(the .public <name>
       (-> <from> <to>)
       (|>> nominal.transmutation))]

    [lifted/2 U1 U2]
    [lifted/4 U2 U4]
    )

  (template.with [<injection_name> <type> <injection>]
    [(the .public <injection_name>
       (Injection <type>)
       (|>> nominal.representation
            <injection>))]

    [as_binary/1 U1 \\injection.bits_08]
    [as_binary/2 U2 \\injection.bits_16]
    [as_binary/4 U4 \\injection.bits_32]
    )
  )
