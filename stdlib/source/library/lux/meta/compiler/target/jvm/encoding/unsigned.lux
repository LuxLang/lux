... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except nat)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\format (.only format)]]
    [binary
     ["[0]" \\format (.only Format)]]]
   [math
    [number
     ["n" nat]
     ["[0]" i64]]]
   [meta
    [macro
     ["[0]" template]]
    [type
     ["[0]" nominal]]]]])

(nominal.every .public (Unsigned brand)
  Nat

  (the .public value
    (-> (Unsigned Any) Nat)
    (|>> nominal.representation))

  (the .public equivalence
    (All (_ brand) (Equivalence (Unsigned brand)))
    (implementation
     (the (= expected actual)
       (n.= (nominal.representation expected)
            (nominal.representation actual)))))

  (the .public order
    (All (_ brand) (Order (Unsigned brand)))
    (implementation
     (the equivalence ..equivalence)
     (the (< reference it)
       (n.< (nominal.representation reference)
            (nominal.representation it)))))

  (exception.the .public (value_exceeds_the_maximum [type value maximum])
    (Exception [Symbol Nat (Unsigned Any)])
    (exception.report
     (list ["Type" (%.symbol type)]
           ["Value" (%.nat value)]
           ["Maximum" (%.nat (nominal.representation maximum))])))

  (exception.the .public (subtraction_cannot_yield_negative_value [type parameter subject])
    (All (_ brand) (Exception [Symbol (Unsigned brand) (Unsigned brand)]))
    (exception.report
     (list ["Type" (%.symbol type)]
           ["Parameter" (%.nat (nominal.representation parameter))]
           ["Subject" (%.nat (nominal.representation subject))])))

  (with_template [<bytes> <name> <size> <constructor> <maximum> <+> <-> <max>]
    [(with_expansions [<raw> (template.symbol [<name> "'"])]
       (these (nominal.every .public <raw> Any)
              (every .public <name> (Unsigned <raw>))))

     (the .public <size> <bytes>)
     
     (the .public <maximum>
       <name>
       (|> <bytes>
           (n.* i64.bits_per_byte)
           i64.mask
           nominal.abstraction))
     
     (the .public (<constructor> value)
       (-> Nat (Try <name>))
       (if (n.> (nominal.representation <maximum>) value)
         (exception.except ..value_exceeds_the_maximum [(symbol <name>) value <maximum>])
         {try.#Success (nominal.abstraction value)}))

     (the .public (<+> parameter subject)
       (-> <name> <name> (Try <name>))
       (<constructor>
        (n.+ (nominal.representation parameter)
             (nominal.representation subject))))

     (the .public (<-> parameter subject)
       (-> <name> <name> (Try <name>))
       (let [parameter' (nominal.representation parameter)
             subject' (nominal.representation subject)]
         (if (n.> subject' parameter')
           (exception.except ..subtraction_cannot_yield_negative_value [(symbol <name>) parameter subject])
           {try.#Success (nominal.abstraction (n.- parameter' subject'))})))

     (the .public (<max> left right)
       (-> <name> <name> <name>)
       (nominal.abstraction
        (n.max (nominal.representation left)
               (nominal.representation right))))]

    [1 U1 bytes/1 u1 maximum/1 +/1 -/1 max/1]
    [2 U2 bytes/2 u2 maximum/2 +/2 -/2 max/2]
    [4 U4 bytes/4 u4 maximum/4 +/4 -/4 max/4]
    )

  (with_template [<name> <from> <to>]
    [(the .public <name>
       (-> <from> <to>)
       (|>> nominal.transmutation))]

    [lifted/2 U1 U2]
    [lifted/4 U2 U4]
    )

  (with_template [<format_name> <type> <format>]
    [(the .public <format_name>
       (Format <type>)
       (|>> nominal.representation
            <format>))]

    [format/1 U1 \\format.bits_8]
    [format/2 U2 \\format.bits_16]
    [format/4 U4 \\format.bits_32]
    )
  )
