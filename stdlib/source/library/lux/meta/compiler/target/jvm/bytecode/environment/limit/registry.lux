... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Type
                for static has)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence (.only Equivalence)]]
   [control
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]]
   [data
    [binary
     [\\injection (.only Injection)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    ["[0]" random (.only Random) (.use "[1]#[0]" monad)]
    [number
     ["n" natural]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]]]
 [//
  ["[0]" datum]
  [////
   [encoding
    ["[0]" unsigned]]
   ["[0]" type (.only)
    ["[1]/[0]" projection]]]])

(every .public Register
  unsigned.U1)

(the Representation
  unsigned.U2)

(nominal.every .public Registry
  Representation

  (the .public registry
    (-> Representation
        Registry)
    (|>> nominal.abstraction))

  (the (minimal type)
    (-> type.Method
        Natural)
    (let [[type_variables inputs output exceptions] (type/projection.method type)]
      (|> inputs
          (list#each (|>> datum.for unsigned.value))
          (list#mix n.+ 0))))

  (template.with [<start> <name>]
    [(the .public <name>
       (-> type.Method
           (Try Registry))
       (|>> ..minimal
            (n.+ <start>)
            unsigned.u2
            (try#each (|>> nominal.abstraction))))]

    [0 static]
    [1 virtual]
    )

  (the .public equivalence
    (Equivalence Registry)
    (by equivalence.functor each
        (|>> nominal.representation)
        unsigned.equivalence))

  (alias [=]
         ..equivalence)

  (the .public as_binary
    (Injection Registry)
    (|>> nominal.representation
         unsigned.injection/2))

  (the .public (has needed)
    (-> Registry Registry
        Registry)
    (|>> nominal.representation
         (unsigned.major/2 (nominal.representation needed))
         nominal.abstraction))

  (template.with [<name> <extra>]
    [(the .public <name>
       (-> Register
           Registry)
       (|>> unsigned.lifted/2
            (unsigned.+/2 <extra>)
            try.trusted
            nominal.abstraction))]

    [for datum.small]
    [for_wide datum.big]
    )

  (the .public random
    (Random Registry)
    (|> random.natural
        (random#each (n.% (++ (unsigned.value unsigned.maximum/2))))
        (random.one (|>> unsigned.u2
                         (try#each (|>> nominal.abstraction))))))
  )

(the .public length
  unsigned.bytes/2)
