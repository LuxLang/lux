... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Type
                static public private)
   [abstract
    [equivalence (.only Equivalence)]
    ["[0]" monad (.only do)]]
   [control
    ["[0]" try]]
   [data
    ["[0]" product]
    [binary
     ["[0]" \\injection (.only Injection) (.use "[1]#[0]" monoid)]]
    [collection
     ["[0]" sequence (.only Sequence)]
     ["[0]" list]]]]]
 ["[0]" //
  ["[1][0]" modifier (.only Modifier modifiers)]
  ["[1][0]" index (.only Index)]
  ["[1][0]" attribute (.only Attribute)
   ["[2][0]" code]]
  ["[1][0]" constant (.only UTF8)
   ["[2][0]" pool (.only Pool Resource)]]
  ["[1][0]" bytecode (.only Bytecode)
   ["[2][0]" environment (.only Environment)]
   ["[2][0]" instruction]]
  ["[1][0]" type (.only Type)
   [descriptor (.only Descriptor)]
   ["[2][0]" category]
   ["[2][0]" signature (.only Signature)]]])

(every .public Method
  (Rec Method
    (Record
     [#modifier (Modifier Method)
      #name (Index UTF8)
      #descriptor (Index (Descriptor //category.Method))
      #attributes (Sequence Attribute)])))

(modifiers
 Method
 ["0001" public]
 ["0002" private]
 ["0004" protected]
 ["0008" static]
 ["0010" final]
 ["0020" synchronized]
 ["0040" bridge]
 ["0080" var_args]
 ["0100" native]
 ["0400" abstract]
 ["0800" strict]
 ["1000" synthetic]
 )

(the .public (method modifier name with_signature? type attributes code)
  (-> (Modifier Method) UTF8 Bit (Type //category.Method) (List (Resource Attribute)) (Maybe (Bytecode Any))
      (Resource Method))
  (do [! //pool.monad]
    [@name (//pool.utf8 name)
     @descriptor (//pool.descriptor (//type.descriptor type))
     attributes (|> (if with_signature?
                      (list.partial (//attribute.signature (//type.signature type)) attributes)
                      attributes)
                    (monad.all !)
                    (of ! each sequence.of_list))
     attributes (when code
                  {.#Some code}
                  (do !
                    [environment (when (if (//modifier.has? static modifier)
                                         (//environment.static type)
                                         (//environment.virtual type))
                                   {try.#Success environment}
                                   (in environment)
                                   
                                   {try.#Failure error}
                                   (function (_ _)
                                     {try.#Failure error}))
                     [environment line_number_table exceptions instruction output] (//bytecode.resolve environment code)
                     .let [bytecode (|> instruction //instruction.value \\injection.instance)]
                     code_attributes (is (Resource (Sequence Attribute))
                                         (if (sequence.empty? line_number_table)
                                           (in sequence.empty)
                                           (do !
                                             [@line_number_table (//attribute.line_number_table line_number_table)]
                                             (in (sequence.sequence @line_number_table)))))
                     @code (//attribute.code [//code.#limit (its //environment.#limit environment)
                                              //code.#code bytecode
                                              //code.#exception_table exceptions
                                              //code.#attributes code_attributes])]
                    (in (sequence.suffix @code attributes)))
                  
                  {.#None}
                  (in attributes))]
    (in [#modifier modifier
         #name @name
         #descriptor @descriptor
         #attributes attributes])))

(the .public equivalence
  (Equivalence Method)
  (all product.equivalence
       //modifier.equivalence
       //index.equivalence
       //index.equivalence
       (sequence.equivalence //attribute.equivalence)
       ))

(the .public (injection field)
  (Injection Method)
  (`` (all \\injection#composite
           (,, (with_template [<injection> <slot>]
                 [(<injection> (its <slot> field))]

                 [//modifier.injection #modifier]
                 [//index.injection #name]
                 [//index.injection #descriptor]
                 [(\\injection.sequence_16 //attribute.injection) #attributes]))
           )))
