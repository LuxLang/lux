... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Declaration
                int char)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["[0]" maybe]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["n" nat]]]
   [meta
    [macro
     ["[0]" template]]
    [type
     ["[0]" nominal]]]]]
 ["[0]" //
  [category (.only Void Value Return Method Primitive Object Class Array Var Parameter Declaration)]
  ["/[1]" //
   [encoding
    ["[1][0]" name (.only Internal External)]]]])

(nominal.every .public (Descriptor category)
  Text

  (the .public descriptor
    (-> (Descriptor Any) Text)
    (|>> nominal.representation))

  (template.with [<sigil> <category> <name>]
    [(the .public <name>
       (Descriptor <category>)
       (nominal.abstraction <sigil>))]

    ["V" Void void]
    ["Z" Primitive boolean]
    ["B" Primitive byte]
    ["S" Primitive short]
    ["I" Primitive int]
    ["J" Primitive long]
    ["F" Primitive float]
    ["D" Primitive double]
    ["C" Primitive char]
    )

  (the .public class_prefix "L")
  (the .public class_suffix ";")

  (the .public class
    (-> External (Descriptor Class))
    (|>> ///name.internal
         ///name.read
         (text.enclosed [..class_prefix ..class_suffix])
         nominal.abstraction))

  (the .public (declaration name)
    (-> External (Descriptor Declaration))
    (nominal.transmutation (..class name)))

  (the .public as_class
    (-> (Descriptor Declaration) (Descriptor Class))
    (|>> nominal.transmutation))

  (template.with [<name> <category>]
    [(the .public <name>
       (Descriptor <category>)
       (nominal.transmutation
        (..class "java.lang.Object")))]

    [var Var]
    [wildcard Parameter]
    )

  (the .public (lower descriptor)
    (-> (Descriptor Parameter) (Descriptor Parameter))
    ..wildcard)

  (the .public upper
    (-> (Descriptor Parameter) (Descriptor Parameter))
    (|>> nominal.transmutation))
  
  (the .public array_prefix "[")

  (the .public array
    (-> (Descriptor Value)
        (Descriptor Array))
    (|>> nominal.representation
         (%.message ..array_prefix)
         nominal.abstraction))

  (the .public (method [inputs output])
    (-> [(List (Descriptor Value))
         (Descriptor Return)]
        (Descriptor Method))
    (nominal.abstraction
     (%.message (|> inputs
                    (list#each ..descriptor)
                    text.together
                    (text.enclosed ["(" ")"]))
                (nominal.representation output))))

  (the .public equivalence
    (for_any (_ category)
      (Equivalence (Descriptor category)))
    (implementation
     (the (= parameter subject)
       (text.= (nominal.representation parameter)
               (nominal.representation subject)))))

  (alias [=]
         ..equivalence)

  (the .public class_name
    (-> (Descriptor Object) Internal)
    (let [prefix_size (text.size ..class_prefix)
          suffix_size (text.size ..class_suffix)]
      (function (_ descriptor)
        (let [repr (nominal.representation descriptor)]
          (if (text.starts_with? ..array_prefix repr)
            (///name.internal repr)
            (|> repr
                (text.clip prefix_size
                           (|> (text.size repr)
                               (n.- prefix_size)
                               (n.- suffix_size)))
                (of maybe.monad each ///name.internal)
                maybe.trusted))))))
  )
