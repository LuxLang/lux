... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except int)
   [abstract
    [equivalence (.only Equivalence)]
    [order (.only Order)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [binary
     ["[0]" \\injection (.only Injection)]]]
   [math
    [number
     ["[0]" i64]
     ["n" nat]
     ["i" int]]]
   [meta
    [macro
     ["[0]" template]
     ["[0]" expansion]]
    [type
     ["[0]" nominal]]]]])

(nominal.every .public (Signed brand)
  Int

  (the .public value
    (-> (Signed Any) Int)
    (|>> nominal.representation))

  (the .public equivalence
    (for_any (_ brand)
      (Equivalence (Signed brand)))
    (implementation
     (the (= expected actual)
       (i.= (nominal.representation expected) (nominal.representation actual)))))

  (the .public order
    (for_any (_ brand)
      (Order (Signed brand)))
    (implementation
     (the equivalence ..equivalence)
     (the (< reference it)
       (i.< (nominal.representation reference) (nominal.representation it)))))

  (exception.the .public (value_exceeds_the_scope [value scope])
    (Exception [Int Nat])
    (exception.report
     (list ["Value" (%.int value)]
           ["Scope (in bytes)" (%.nat scope)])))

  (template.with [<bytes> <name> <size> <constructor> <maximum> <minimum> <+> <->]
    [(expansion.let [<raw> (template.symbol [<name> "'"])]
       (these (nominal.every <raw> Any)
              (every .public <name> (Signed <raw>))))

     (the .public <size> <bytes>)
     
     (the .public <maximum>
       <name>
       (|> <bytes>
           (n.* i64.bits_per_byte)
           --
           i64.mask
           nominal.abstraction))

     (the .public <minimum>
       <name>
       (let [it (nominal.representation <maximum>)]
         (nominal.abstraction
          (-- (i.- it +0)))))
     
     (the .public <constructor>
       (-> Int (Try <name>))
       (let [positive (nominal.representation <maximum>)
             negative (i64.not positive)]
         (function (_ value)
           (if (i.= (if (i.< +0 value)
                      (i64.or negative value)
                      (i64.and positive value))
                    value)
             {try.#Success (nominal.abstraction value)}
             (exception.except ..value_exceeds_the_scope [value <size>])))))

     (template.with [<abstract_operation> <concrete_operation>]
       [(the .public (<abstract_operation> parameter subject)
          (-> <name> <name> (Try <name>))
          (<constructor>
           (<concrete_operation> (nominal.representation parameter)
                                 (nominal.representation subject))))]

       [<+> i.+]
       [<-> i.-]
       )]

    [1 S1 bytes/1 s1 maximum/1 minimum/1 +/1 -/1]
    [2 S2 bytes/2 s2 maximum/2 minimum/2 +/2 -/2]
    [4 S4 bytes/4 s4 maximum/4 minimum/4 +/4 -/4]
    )

  (template.with [<name> <from> <to>]
    [(the .public <name>
       (-> <from> <to>)
       (|>> nominal.transmutation))]

    [lifted/2 S1 S2]
    [lifted/4 S2 S4]
    )

  (template.with [<injection_name> <type> <injection>]
    [(the .public <injection_name>
       (Injection <type>)
       (|>> nominal.representation
            <injection>))]

    [injection/1 S1 \\injection.bits_8]
    [injection/2 S2 \\injection.bits_16]
    [injection/4 S4 \\injection.bits_32]
    )
  )
